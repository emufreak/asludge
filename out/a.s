
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115037,d0
       8:	       subi.l #115037,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c15d <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115037,d0
      40:	       subi.l #115037,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c15d <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 74a8 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115037,d0
      7e:	       subi.l #115037,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c15d <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13c38 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c902 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13c50 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c15e <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13c38 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c902 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c15e <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13c38 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c902 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17c5a <PutChar+0x4>
     35c:	|  |              |   jsr 171b4 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c90a <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c90a <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c90a <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c90a <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c90a <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c90a <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c90a <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17c84 <PutChar+0x2e>
     834:	|   jsr 171b4 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c90a <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17ca0 <PutChar+0x4a>
     8a6:	|   jsr 171b4 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c90a <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c90a <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c90a <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c90a <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c90a <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c90a <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c90a <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c90a <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c902 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c90a <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13c38 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c90a <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c808 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c808 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c808 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c808 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c808 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c8c2 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c808 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c808 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c8be <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c808 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c808 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c808 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9872 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c808 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c80c <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c810 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d50 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17cc8 <PutChar+0x72>
     e1a:	          jsr 171b4 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c824 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17ce1 <PutChar+0x8b>
     e30:	      |   jsr 171b4 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c81e <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c90e <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c824 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17d0f <PutChar+0xb9>
     ef0:	|         jsr 171b4 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c90e <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17d2f <PutChar+0xd9>
     f3c:	|         jsr 171b4 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c830 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c856 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c846 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c85a <winHeight>,d0
     f6e:	|         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c846 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c846 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c846 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c846 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17d4f <PutChar+0xf9>
     fbe:	|         jsr 171b4 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c902 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17d64 <PutChar+0x10e>
    1010:	   |   jsr 171b4 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c90a <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c852 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115040,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115104,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115152,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115192,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c84a <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17d9f <PutChar+0x149>
    11c6:	                jsr 171b4 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c842 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c846 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c842 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c836 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c90e <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c856 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c856 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c856 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17b40 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c824 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c856 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17b40 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c836 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c856 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c85a <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17b40 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c856 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c85a <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17b40 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c90e <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c84e <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c84a <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c852 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c852 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c830 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c830 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c830 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,74(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17b40 <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,70(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,66(sp)
    1536:	                      move.l 1c902 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 70(sp),d0
    1542:	                      move.l 66(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,62(sp)
    154e:	                      move.l 62(sp),d0
    1552:	                      move.l d0,58(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l (a0),d0
    155c:	                  /-- bpl.s 1560 <CstDrawZBuffer+0x78>
    155e:	                  |   addq.l #7,d0
    1560:	                  \-> asr.l #3,d0
    1562:	                      move.l d0,d1
    1564:	                      addq.l #2,d1
    1566:	                      movea.l 100(sp),a0
    156a:	                      move.l 4(a0),d0
    156e:	                      move.l d0,-(sp)
    1570:	                      move.l d1,-(sp)
    1572:	                      jsr 17b40 <__mulsi3>
    1578:	                      addq.l #8,sp
    157a:	                      move.l d0,54(sp)
    157e:	                      moveq #2,d1
    1580:	                      move.l d1,50(sp)
    1584:	                      move.l 1c902 <SysBase>,d0
    158a:	                      movea.l d0,a6
    158c:	                      move.l 54(sp),d0
    1590:	                      move.l 50(sp),d1
    1594:	                      jsr -684(a6)
    1598:	                      move.l d0,46(sp)
    159c:	                      move.l 46(sp),d0
    15a0:	                      move.l d0,42(sp)
  WORD zbufferset = 0;
    15a4:	                      clr.w 94(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    15a8:	                      movea.l 100(sp),a0
    15ac:	                      move.l 4(a0),d0
    15b0:	                      move.l d0,d0
    15b2:	                      movea.w d0,a1
    15b4:	                      movea.l 100(sp),a0
    15b8:	                      move.l (a0),d0
    15ba:	                      move.l d0,d0
    15bc:	                      movea.w d0,a0
    15be:	                      clr.l -(sp)
    15c0:	                      pea 1 <_start+0x1>
    15c4:	                      move.l a1,-(sp)
    15c6:	                      move.l a0,-(sp)
    15c8:	                      pea 17dbb <PutChar+0x165>
    15ce:	                      move.l 78(sp),-(sp)
    15d2:	                      jsr 1729c <debug_register_bitmap>
    15d8:	                      lea 24(sp),sp
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    15dc:	                      movea.l 100(sp),a0
    15e0:	                      move.l 4(a0),d0
    15e4:	                      move.l d0,d0
    15e6:	                      movea.w d0,a1
    15e8:	                      movea.l 100(sp),a0
    15ec:	                      move.l (a0),d0
    15ee:	                      move.l d0,d0
    15f0:	                      addi.w #16,d0
    15f4:	                      movea.w d0,a0
    15f6:	                      clr.l -(sp)
    15f8:	                      pea 1 <_start+0x1>
    15fc:	                      move.l a1,-(sp)
    15fe:	                      move.l a0,-(sp)
    1600:	                      pea 17dc6 <PutChar+0x170>
    1606:	                      move.l 62(sp),-(sp)
    160a:	                      jsr 1729c <debug_register_bitmap>
    1610:	                      lea 24(sp),sp
  #endif    

  while(zbuffer) 
    1614:	   /----------------- bra.w 1b6e <CstDrawZBuffer+0x686>
  {              
    WORD spritex1oncanvas = x;
    1618:	/--|----------------> move.w 10(sp),36(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    161e:	|  |                  movea.l 100(sp),a0
    1622:	|  |                  move.l (a0),d0
    1624:	|  |                  move.l d0,d1
    1626:	|  |                  move.w 36(sp),d0
    162a:	|  |                  movea.w d1,a0
    162c:	|  |                  adda.w d0,a0
    162e:	|  |                  move.w a0,34(sp)
    WORD spritey1oncanvas = y;
    1632:	|  |                  move.w 8(sp),32(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1638:	|  |                  movea.l 100(sp),a0
    163c:	|  |                  move.l 4(a0),d0
    1640:	|  |                  move.l d0,d1
    1642:	|  |                  move.w 32(sp),d0
    1646:	|  |                  movea.w d1,a0
    1648:	|  |                  adda.w d0,a0
    164a:	|  |                  move.w a0,30(sp)

    WORD zbufferx1oncanvas = zbuffer->topx;
    164e:	|  |                  movea.l 104(sp),a0
    1652:	|  |                  move.l 8(a0),d0
    1656:	|  |                  move.w d0,28(sp)
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    165a:	|  |                  movea.l 104(sp),a0
    165e:	|  |                  move.l (a0),d0
    1660:	|  |                  move.l d0,d1
    1662:	|  |                  move.w 28(sp),d0
    1666:	|  |                  add.w d1,d0
    1668:	|  |                  move.w d0,26(sp)

    WORD zbuffery1oncanvas = zbuffer->topy;
    166c:	|  |                  movea.l 104(sp),a0
    1670:	|  |                  move.l 12(a0),d0
    1674:	|  |                  move.w d0,24(sp)
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1678:	|  |                  movea.l 104(sp),a0
    167c:	|  |                  move.l 4(a0),d0
    1680:	|  |                  move.l d0,d1
    1682:	|  |                  move.w 24(sp),d0
    1686:	|  |                  add.w d1,d0
    1688:	|  |                  move.w d0,22(sp)
  
    BOOL zbufferfromright = FALSE;
    168c:	|  |                  clr.w 92(sp)
    BOOL zbufferfromleft = FALSE;
    1690:	|  |                  clr.w 90(sp)
    BOOL zbufferfrombottom = FALSE;
    1694:	|  |                  clr.w 88(sp)
    BOOL zbufferfromtop = FALSE;
    1698:	|  |                  clr.w 86(sp)
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    169c:	|  |                  moveq #0,d0
    169e:	|  |                  move.w 30(sp),d0
    16a2:	|  |                  movea.l 104(sp),a0
    16a6:	|  |                  move.l 16(a0),d1
    16aa:	|  |                  cmp.l d0,d1
    16ac:	|  +----------------- ble.w 1b6e <CstDrawZBuffer+0x686>
    {    
      zbufferset = 1;
    16b0:	|  |                  move.w #1,94(sp)

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    16b6:	|  |                  move.w 28(sp),d0
    16ba:	|  |                  cmp.w 36(sp),d0
    16be:	|  |              /-- blt.s 16d6 <CstDrawZBuffer+0x1ee>
    16c0:	|  |              |   moveq #0,d0
    16c2:	|  |              |   move.w 34(sp),d0
    16c6:	|  |              |   movea.w 28(sp),a0
    16ca:	|  |              |   cmpa.l d0,a0
    16cc:	|  |              +-- bge.s 16d6 <CstDrawZBuffer+0x1ee>
        zbufferfromright = TRUE;
    16ce:	|  |              |   move.w #1,92(sp)
    16d4:	|  |           /--|-- bra.s 16f0 <CstDrawZBuffer+0x208>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    16d6:	|  |           |  \-> move.w 28(sp),d1
    16da:	|  |           |      cmp.w 36(sp),d1
    16de:	|  |           +----- bge.s 16f0 <CstDrawZBuffer+0x208>
    16e0:	|  |           |      move.w 26(sp),d0
    16e4:	|  |           |      cmp.w 36(sp),d0
    16e8:	|  |           +----- ble.s 16f0 <CstDrawZBuffer+0x208>
        zbufferfromleft = TRUE;       
    16ea:	|  |           |      move.w #1,90(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    16f0:	|  |           \----> tst.w 90(sp)
    16f4:	|  |              /-- bne.s 16fc <CstDrawZBuffer+0x214>
    16f6:	|  |              |   tst.w 92(sp)
    16fa:	|  |           /--|-- beq.s 1736 <CstDrawZBuffer+0x24e>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    16fc:	|  |           |  \-> move.w 24(sp),d1
    1700:	|  |           |      cmp.w 32(sp),d1
    1704:	|  |           |  /-- blt.s 171c <CstDrawZBuffer+0x234>
    1706:	|  |           |  |   moveq #0,d0
    1708:	|  |           |  |   move.w 30(sp),d0
    170c:	|  |           |  |   movea.w 24(sp),a0
    1710:	|  |           |  |   cmpa.l d0,a0
    1712:	|  |           |  +-- bge.s 171c <CstDrawZBuffer+0x234>
          zbufferfrombottom = TRUE;
    1714:	|  |           |  |   move.w #1,88(sp)
    171a:	|  |           +--|-- bra.s 1736 <CstDrawZBuffer+0x24e>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    171c:	|  |           |  \-> move.w 24(sp),d0
    1720:	|  |           |      cmp.w 32(sp),d0
    1724:	|  |           +----- bge.s 1736 <CstDrawZBuffer+0x24e>
    1726:	|  |           |      move.w 22(sp),d1
    172a:	|  |           |      cmp.w 32(sp),d1
    172e:	|  |           +----- ble.s 1736 <CstDrawZBuffer+0x24e>
          zbufferfromtop = TRUE;       
    1730:	|  |           |      move.w #1,86(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1736:	|  |           \----> tst.w 92(sp)
    173a:	|  |              /-- bne.s 1744 <CstDrawZBuffer+0x25c>
    173c:	|  |              |   tst.w 90(sp)
    1740:	|  +--------------|-- beq.w 1b6e <CstDrawZBuffer+0x686>
    1744:	|  |              \-> tst.w 88(sp)
    1748:	|  |              /-- bne.s 1752 <CstDrawZBuffer+0x26a>
    174a:	|  |              |   tst.w 86(sp)
    174e:	|  +--------------|-- beq.w 1b6e <CstDrawZBuffer+0x686>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1752:	|  |              \-> tst.w 92(sp)
    1756:	|  |     /----------- beq.w 18a6 <CstDrawZBuffer+0x3be>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    175a:	|  |     |            move.w 28(sp),d0
    175e:	|  |     |            move.w 36(sp),d1
    1762:	|  |     |            movea.w d0,a0
    1764:	|  |     |            suba.w d1,a0
    1766:	|  |     |            move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    176a:	|  |     |            move.w 20(sp),d0
    176e:	|  |     |            lsr.w #4,d0
    1770:	|  |     |            add.w d0,d0
    1772:	|  |     |            move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1776:	|  |     |            move.w 18(sp),d0
    177a:	|  |     |            lsl.w #3,d0
    177c:	|  |     |            move.w 20(sp),d1
    1780:	|  |     |            sub.w d0,d1
    1782:	|  |     |            move.w d1,16(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1786:	|  |     |            movea.l 100(sp),a0
    178a:	|  |     |            move.l (a0),d0
    178c:	|  |     |            movea.l d0,a0
    178e:	|  |     |            cmpa.w #0,a0
    1792:	|  |     |        /-- bge.s 1798 <CstDrawZBuffer+0x2b0>
    1794:	|  |     |        |   lea 15(a0),a0
    1798:	|  |     |        \-> move.l a0,d0
    179a:	|  |     |            asr.l #4,d0
    179c:	|  |     |            addq.l #1,d0
    179e:	|  |     |            move.l d0,d0
    17a0:	|  |     |            add.w d0,d0
    17a2:	|  |     |            move.w d0,80(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    17a6:	|  |     |            movea.w 26(sp),a0
    17aa:	|  |     |            moveq #0,d0
    17ac:	|  |     |            move.w 34(sp),d0
    17b0:	|  |     |            cmp.l a0,d0
    17b2:	|  |     |  /-------- bge.w 1892 <CstDrawZBuffer+0x3aa>
          {               
            WaitBlit();  
    17b6:	|  |     |  |         move.l 1c90e <GfxBase>,d0
    17bc:	|  |     |  |         movea.l d0,a6
    17be:	|  |     |  |         jsr -228(a6)
          
            custom->bltafwm = 0xffff;
    17c2:	|  |     |  |         movea.l 74(sp),a0
    17c6:	|  |     |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;          
    17cc:	|  |     |  |         movea.l 74(sp),a0
    17d0:	|  |     |  |         move.w #-1,70(a0)
            custom->bltdpt = tmpbuffer;        
    17d6:	|  |     |  |         movea.l 74(sp),a0
    17da:	|  |     |  |         move.l 42(sp),84(a0)
            custom->bltcon1 = 0;               
    17e0:	|  |     |  |         movea.l 74(sp),a0
    17e4:	|  |     |  |         move.w #0,66(a0)

            if (xdiffrest) {
    17ea:	|  |     |  |         tst.w 16(sp)
    17ee:	|  |     |  |  /----- beq.s 1846 <CstDrawZBuffer+0x35e>
              xdiffbyte += 2;                 
    17f0:	|  |     |  |  |      addq.w #2,18(sp)
      
              bltapt = zbuffer->bitplane - xdiffbyte;          
    17f4:	|  |     |  |  |      movea.l 104(sp),a0
    17f8:	|  |     |  |  |      move.l 20(a0),d1
    17fc:	|  |     |  |  |      moveq #0,d0
    17fe:	|  |     |  |  |      move.w 18(sp),d0
    1802:	|  |     |  |  |      neg.l d0
    1804:	|  |     |  |  |      add.l d1,d0
    1806:	|  |     |  |  |      move.l d0,82(sp)
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    180a:	|  |     |  |  |      move.w 16(sp),d0
    180e:	|  |     |  |  |      moveq #12,d1
    1810:	|  |     |  |  |      lsl.w d1,d0
    1812:	|  |     |  |  |      addi.w #2544,d0
    1816:	|  |     |  |  |      movea.l 74(sp),a0
    181a:	|  |     |  |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    181e:	|  |     |  |  |      movea.l 104(sp),a0
    1822:	|  |     |  |  |      move.l (a0),d0
    1824:	|  |     |  |  |  /-- bpl.s 1828 <CstDrawZBuffer+0x340>
    1826:	|  |     |  |  |  |   addq.l #7,d0
    1828:	|  |     |  |  |  \-> asr.l #3,d0
    182a:	|  |     |  |  |      move.l d0,d0
    182c:	|  |     |  |  |      sub.w 80(sp),d0
    1830:	|  |     |  |  |      movea.l 74(sp),a0
    1834:	|  |     |  |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    1838:	|  |     |  |  |      movea.l 74(sp),a0
    183c:	|  |     |  |  |      move.w #0,102(a0)
    1842:	|  |  /--|--|--|----- bra.w 19f8 <CstDrawZBuffer+0x510>
            }
            else
            {             
              xdiffbyte += 2;    
    1846:	|  |  |  |  |  \----> addq.w #2,18(sp)
              bltapt = zbuffer->bitplane - xdiffbyte;          
    184a:	|  |  |  |  |         movea.l 104(sp),a0
    184e:	|  |  |  |  |         move.l 20(a0),d1
    1852:	|  |  |  |  |         moveq #0,d0
    1854:	|  |  |  |  |         move.w 18(sp),d0
    1858:	|  |  |  |  |         neg.l d0
    185a:	|  |  |  |  |         add.l d1,d0
    185c:	|  |  |  |  |         move.l d0,82(sp)
              custom->bltcon0 = 0x9f0;              
    1860:	|  |  |  |  |         movea.l 74(sp),a0
    1864:	|  |  |  |  |         move.w #2544,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    186a:	|  |  |  |  |         movea.l 104(sp),a0
    186e:	|  |  |  |  |         move.l (a0),d0
    1870:	|  |  |  |  |     /-- bpl.s 1874 <CstDrawZBuffer+0x38c>
    1872:	|  |  |  |  |     |   addq.l #7,d0
    1874:	|  |  |  |  |     \-> asr.l #3,d0
    1876:	|  |  |  |  |         move.l d0,d0
    1878:	|  |  |  |  |         sub.w 80(sp),d0
    187c:	|  |  |  |  |         movea.l 74(sp),a0
    1880:	|  |  |  |  |         move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    1884:	|  |  |  |  |         movea.l 74(sp),a0
    1888:	|  |  |  |  |         move.w #0,102(a0)
    188e:	|  |  +--|--|-------- bra.w 19f8 <CstDrawZBuffer+0x510>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1892:	|  |  |  |  \-------> pea 17dd0 <PutChar+0x17a>
    1898:	|  |  |  |            jsr 171b4 <KPrintF>
    189e:	|  |  |  |            addq.l #4,sp
              return FALSE;
    18a0:	|  |  |  |            moveq #0,d0
    18a2:	|  |  |  |  /-------- bra.w 1c6a <CstDrawZBuffer+0x782>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    18a6:	|  |  |  \--|-------> move.w 36(sp),d0
    18aa:	|  |  |     |         move.w 28(sp),d1
    18ae:	|  |  |     |         movea.w d0,a0
    18b0:	|  |  |     |         suba.w d1,a0
    18b2:	|  |  |     |         move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18b6:	|  |  |     |         move.w 20(sp),d0
    18ba:	|  |  |     |         lsr.w #4,d0
    18bc:	|  |  |     |         add.w d0,d0
    18be:	|  |  |     |         move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);    
    18c2:	|  |  |     |         move.w 18(sp),d0
    18c6:	|  |  |     |         lsl.w #3,d0
    18c8:	|  |  |     |         move.w 20(sp),d1
    18cc:	|  |  |     |         sub.w d0,d1
    18ce:	|  |  |     |         move.w d1,16(sp)

                         
          bytewidth = (sprite->width/16)*2;
    18d2:	|  |  |     |         movea.l 100(sp),a0
    18d6:	|  |  |     |         move.l (a0),d0
    18d8:	|  |  |     |         movea.l d0,a0
    18da:	|  |  |     |         cmpa.w #0,a0
    18de:	|  |  |     |     /-- bge.s 18e4 <CstDrawZBuffer+0x3fc>
    18e0:	|  |  |     |     |   lea 15(a0),a0
    18e4:	|  |  |     |     \-> move.l a0,d0
    18e6:	|  |  |     |         asr.l #4,d0
    18e8:	|  |  |     |         move.l d0,d0
    18ea:	|  |  |     |         add.w d0,d0
    18ec:	|  |  |     |         move.w d0,80(sp)
          if(sprite->height == 60) {
    18f0:	|  |  |     |         movea.l 100(sp),a0
    18f4:	|  |  |     |         move.l 4(a0),d0
    18f8:	|  |  |     |         moveq #60,d1
    18fa:	|  |  |     |         cmp.l d0,d1
    18fc:	|  |  |     |     /-- bne.s 1908 <CstDrawZBuffer+0x420>
            sprite->height = 60;
    18fe:	|  |  |     |     |   movea.l 100(sp),a0
    1902:	|  |  |     |     |   moveq #60,d0
    1904:	|  |  |     |     |   move.l d0,4(a0)
          }
          
          custom->bltafwm = 0xffff;
    1908:	|  |  |     |     \-> movea.l 74(sp),a0
    190c:	|  |  |     |         move.w #-1,68(a0)
          custom->bltalwm = 0xffff;                      
    1912:	|  |  |     |         movea.l 74(sp),a0
    1916:	|  |  |     |         move.w #-1,70(a0)
          custom->bltcon1 = 0;          
    191c:	|  |  |     |         movea.l 74(sp),a0
    1920:	|  |  |     |         move.w #0,66(a0)

          if (xdiffrest) {
    1926:	|  |  |     |         tst.w 16(sp)
    192a:	|  |  |     |  /----- beq.s 199c <CstDrawZBuffer+0x4b4>
            bytewidth += 2; 
    192c:	|  |  |     |  |      addq.w #2,80(sp)
            //xdiffbyte += -2;            
            bltapt = zbuffer->bitplane + xdiffbyte;  
    1930:	|  |  |     |  |      movea.l 104(sp),a0
    1934:	|  |  |     |  |      move.l 20(a0),d1
    1938:	|  |  |     |  |      moveq #0,d0
    193a:	|  |  |     |  |      move.w 18(sp),d0
    193e:	|  |  |     |  |      add.l d1,d0
    1940:	|  |  |     |  |      move.l d0,82(sp)
            WaitBlit();   
    1944:	|  |  |     |  |      move.l 1c90e <GfxBase>,d0
    194a:	|  |  |     |  |      movea.l d0,a6
    194c:	|  |  |     |  |      jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    1950:	|  |  |     |  |      movea.l 74(sp),a0
    1954:	|  |  |     |  |      move.l 42(sp),84(a0)
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    195a:	|  |  |     |  |      moveq #0,d0
    195c:	|  |  |     |  |      move.w 16(sp),d0
    1960:	|  |  |     |  |      moveq #16,d1
    1962:	|  |  |     |  |      sub.l d0,d1
    1964:	|  |  |     |  |      move.l d1,d0
    1966:	|  |  |     |  |      moveq #12,d1
    1968:	|  |  |     |  |      lsl.w d1,d0
    196a:	|  |  |     |  |      addi.w #2544,d0
    196e:	|  |  |     |  |      movea.l 74(sp),a0
    1972:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1976:	|  |  |     |  |      movea.l 104(sp),a0
    197a:	|  |  |     |  |      move.l (a0),d0
    197c:	|  |  |     |  |  /-- bpl.s 1980 <CstDrawZBuffer+0x498>
    197e:	|  |  |     |  |  |   addq.l #7,d0
    1980:	|  |  |     |  |  \-> asr.l #3,d0
    1982:	|  |  |     |  |      move.l d0,d0
    1984:	|  |  |     |  |      sub.w 80(sp),d0
    1988:	|  |  |     |  |      movea.l 74(sp),a0
    198c:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = 0;                                                            
    1990:	|  |  |     |  |      movea.l 74(sp),a0
    1994:	|  |  |     |  |      move.w #0,102(a0)
    199a:	|  |  +-----|--|----- bra.s 19f8 <CstDrawZBuffer+0x510>
          }
          else
          {       
            //xdiffbyte += -2;      
            bltapt = zbuffer->bitplane + xdiffbyte;  
    199c:	|  |  |     |  \----> movea.l 104(sp),a0
    19a0:	|  |  |     |         move.l 20(a0),d1
    19a4:	|  |  |     |         moveq #0,d0
    19a6:	|  |  |     |         move.w 18(sp),d0
    19aa:	|  |  |     |         add.l d1,d0
    19ac:	|  |  |     |         move.l d0,82(sp)
            WaitBlit();         
    19b0:	|  |  |     |         move.l 1c90e <GfxBase>,d0
    19b6:	|  |  |     |         movea.l d0,a6
    19b8:	|  |  |     |         jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    19bc:	|  |  |     |         move.l 42(sp),d0
    19c0:	|  |  |     |         addq.l #2,d0
    19c2:	|  |  |     |         movea.l 74(sp),a0
    19c6:	|  |  |     |         move.l d0,84(a0)
            custom->bltcon0 = 4096 + 0x9f0;              
    19ca:	|  |  |     |         movea.l 74(sp),a0
    19ce:	|  |  |     |         move.w #6640,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19d4:	|  |  |     |         movea.l 104(sp),a0
    19d8:	|  |  |     |         move.l (a0),d0
    19da:	|  |  |     |     /-- bpl.s 19de <CstDrawZBuffer+0x4f6>
    19dc:	|  |  |     |     |   addq.l #7,d0
    19de:	|  |  |     |     \-> asr.l #3,d0
    19e0:	|  |  |     |         move.l d0,d0
    19e2:	|  |  |     |         sub.w 80(sp),d0
    19e6:	|  |  |     |         movea.l 74(sp),a0
    19ea:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = 2;                                                            
    19ee:	|  |  |     |         movea.l 74(sp),a0
    19f2:	|  |  |     |         move.w #2,102(a0)
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    19f8:	|  |  \-----|-------> move.w 32(sp),d0
    19fc:	|  |        |         move.w 24(sp),d1
    1a00:	|  |        |         movea.w d0,a0
    1a02:	|  |        |         suba.w d1,a0
    1a04:	|  |        |         move.w a0,14(sp)

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1a08:	|  |        |         movea.w 22(sp),a0
    1a0c:	|  |        |         moveq #0,d0
    1a0e:	|  |        |         move.w 30(sp),d0
    1a12:	|  |        |         cmp.l a0,d0
    1a14:	|  |        |     /-- bge.s 1a24 <CstDrawZBuffer+0x53c>
          height = sprite->height;
    1a16:	|  |        |     |   movea.l 100(sp),a0
    1a1a:	|  |        |     |   move.l 4(a0),d0
    1a1e:	|  |        |     |   move.w d0,78(sp)
    1a22:	|  |        |  /--|-- bra.s 1a34 <CstDrawZBuffer+0x54c>
        else
          height = zbuffery2oncanvas - spritey1oncanvas;
    1a24:	|  |        |  |  \-> move.w 22(sp),d0
    1a28:	|  |        |  |      move.w 32(sp),d1
    1a2c:	|  |        |  |      movea.w d0,a0
    1a2e:	|  |        |  |      suba.w d1,a0
    1a30:	|  |        |  |      move.w a0,78(sp)

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1a34:	|  |        |  \----> moveq #0,d0
    1a36:	|  |        |         move.w 14(sp),d0
    1a3a:	|  |        |         movea.l 104(sp),a0
    1a3e:	|  |        |         move.l (a0),d1
    1a40:	|  |        |         move.l d1,-(sp)
    1a42:	|  |        |         move.l d0,-(sp)
    1a44:	|  |        |         jsr 17b40 <__mulsi3>
    1a4a:	|  |        |         addq.l #8,sp
    1a4c:	|  |        |         tst.l d0
    1a4e:	|  |        |     /-- bge.s 1a52 <CstDrawZBuffer+0x56a>
    1a50:	|  |        |     |   addq.l #7,d0
    1a52:	|  |        |     \-> asr.l #3,d0
    1a54:	|  |        |         add.l 82(sp),d0
    1a58:	|  |        |         movea.l 74(sp),a0
    1a5c:	|  |        |         move.l d0,80(a0)
        UWORD bltsize =  height*64+bytewidth/2;          
    1a60:	|  |        |         move.w 78(sp),d0
    1a64:	|  |        |         move.w d0,d1
    1a66:	|  |        |         lsl.w #6,d1
    1a68:	|  |        |         move.w 80(sp),d0
    1a6c:	|  |        |         lsr.w #1,d0
    1a6e:	|  |        |         movea.w d1,a0
    1a70:	|  |        |         adda.w d0,a0
    1a72:	|  |        |         move.w a0,12(sp)
        custom->bltsize = height*64+bytewidth/2;
    1a76:	|  |        |         move.w 78(sp),d0
    1a7a:	|  |        |         move.w d0,d1
    1a7c:	|  |        |         lsl.w #6,d1
    1a7e:	|  |        |         move.w 80(sp),d0
    1a82:	|  |        |         lsr.w #1,d0
    1a84:	|  |        |         add.w d1,d0
    1a86:	|  |        |         movea.l 74(sp),a0
    1a8a:	|  |        |         move.w d0,88(a0)
       
        WaitBlit();
    1a8e:	|  |        |         move.l 1c90e <GfxBase>,d0
    1a94:	|  |        |         movea.l d0,a6
    1a96:	|  |        |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    1a9a:	|  |        |         movea.l 74(sp),a0
    1a9e:	|  |        |         move.w #-1,68(a0)
        custom->bltalwm = 0xffff;
    1aa4:	|  |        |         movea.l 74(sp),a0
    1aa8:	|  |        |         move.w #-1,70(a0)
        custom->bltamod = 2;
    1aae:	|  |        |         movea.l 74(sp),a0
    1ab2:	|  |        |         move.w #2,100(a0)
        custom->bltbmod = 0;
    1ab8:	|  |        |         movea.l 74(sp),a0
    1abc:	|  |        |         move.w #0,98(a0)
        custom->bltdmod = 0;
    1ac2:	|  |        |         movea.l 74(sp),a0
    1ac6:	|  |        |         move.w #0,102(a0)
        custom->bltcon0 = 0xd0c; //Copy A to D
    1acc:	|  |        |         movea.l 74(sp),a0
    1ad0:	|  |        |         move.w #3340,64(a0)
        custom->bltcon1 = 0;        
    1ad6:	|  |        |         movea.l 74(sp),a0
    1ada:	|  |        |         move.w #0,66(a0)

        custom->bltapt = (APTR) tmpbuffer + 2;
    1ae0:	|  |        |         move.l 42(sp),d0
    1ae4:	|  |        |         addq.l #2,d0
    1ae6:	|  |        |         movea.l 74(sp),a0
    1aea:	|  |        |         move.l d0,80(a0)
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aee:	|  |        |         movea.l 100(sp),a0
    1af2:	|  |        |         move.l 24(a0),d2
    1af6:	|  |        |         movea.l 100(sp),a0
    1afa:	|  |        |         move.l (a0),d0
    1afc:	|  |        |     /-- bpl.s 1b00 <CstDrawZBuffer+0x618>
    1afe:	|  |        |     |   addq.l #7,d0
    1b00:	|  |        |     \-> asr.l #3,d0
    1b02:	|  |        |         movea.l 100(sp),a0
    1b06:	|  |        |         move.l 4(a0),d1
    1b0a:	|  |        |         move.l d1,-(sp)
    1b0c:	|  |        |         move.l d0,-(sp)
    1b0e:	|  |        |         jsr 17b40 <__mulsi3>
    1b14:	|  |        |         addq.l #8,sp
    1b16:	|  |        |         move.l d0,d1
    1b18:	|  |        |         move.l d1,d0
    1b1a:	|  |        |         add.l d0,d0
    1b1c:	|  |        |         add.l d0,d0
    1b1e:	|  |        |         add.l d1,d0
    1b20:	|  |        |         add.l d2,d0
    1b22:	|  |        |         movea.l 74(sp),a0
    1b26:	|  |        |         move.l d0,76(a0)
        custom->bltdpt = (APTR) returnvalue;
    1b2a:	|  |        |         movea.l 74(sp),a0
    1b2e:	|  |        |         move.l 58(sp),84(a0)
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1b34:	|  |        |         movea.l 100(sp),a0
    1b38:	|  |        |         move.l 4(a0),d0
    1b3c:	|  |        |         move.l d0,d0
    1b3e:	|  |        |         move.w d0,d1
    1b40:	|  |        |         lsl.w #6,d1
    1b42:	|  |        |         movea.l 100(sp),a0
    1b46:	|  |        |         move.l (a0),d0
    1b48:	|  |        |         movea.l d0,a0
    1b4a:	|  |        |         cmpa.w #0,a0
    1b4e:	|  |        |     /-- bge.s 1b54 <CstDrawZBuffer+0x66c>
    1b50:	|  |        |     |   lea 15(a0),a0
    1b54:	|  |        |     \-> move.l a0,d0
    1b56:	|  |        |         asr.l #4,d0
    1b58:	|  |        |         move.l d0,d0
    1b5a:	|  |        |         add.w d1,d0
    1b5c:	|  |        |         movea.l 74(sp),a0
    1b60:	|  |        |         move.w d0,88(a0)

        zbuffer = zbuffer->nextPanel;
    1b64:	|  |        |         movea.l 104(sp),a0
    1b68:	|  |        |         move.l 24(a0),104(sp)
  while(zbuffer) 
    1b6e:	|  \--------|-------> tst.l 104(sp)
    1b72:	\-----------|-------- bne.w 1618 <CstDrawZBuffer+0x130>
      }
    }
  }
  FreeVec( tmpbuffer);
    1b76:	            |         move.l 42(sp),38(sp)
    1b7c:	            |         move.l 1c902 <SysBase>,d0
    1b82:	            |         movea.l d0,a6
    1b84:	            |         movea.l 38(sp),a1
    1b88:	            |         jsr -690(a6)
  if(zbufferset == 0)
    1b8c:	            |         tst.w 94(sp)
    1b90:	            |  /----- bne.w 1c66 <CstDrawZBuffer+0x77e>
  {
    WaitBlit();
    1b94:	            |  |      move.l 1c90e <GfxBase>,d0
    1b9a:	            |  |      movea.l d0,a6
    1b9c:	            |  |      jsr -228(a6)

    custom->bltafwm = 0xffff;
    1ba0:	            |  |      movea.l 74(sp),a0
    1ba4:	            |  |      move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
    1baa:	            |  |      movea.l 74(sp),a0
    1bae:	            |  |      move.w #-1,70(a0)
    custom->bltamod = 0;
    1bb4:	            |  |      movea.l 74(sp),a0
    1bb8:	            |  |      move.w #0,100(a0)
    custom->bltbmod = 0;
    1bbe:	            |  |      movea.l 74(sp),a0
    1bc2:	            |  |      move.w #0,98(a0)
    custom->bltcmod = 0;
    1bc8:	            |  |      movea.l 74(sp),a0
    1bcc:	            |  |      move.w #0,96(a0)
    custom->bltdmod = 0;
    1bd2:	            |  |      movea.l 74(sp),a0
    1bd6:	            |  |      move.w #0,102(a0)
    custom->bltcon0 = 0x9f0; //Copy A to D
    1bdc:	            |  |      movea.l 74(sp),a0
    1be0:	            |  |      move.w #2544,64(a0)
    custom->bltcon1 = 0;        
    1be6:	            |  |      movea.l 74(sp),a0
    1bea:	            |  |      move.w #0,66(a0)

    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bf0:	            |  |      movea.l 100(sp),a0
    1bf4:	            |  |      move.l 24(a0),d2
    1bf8:	            |  |      movea.l 100(sp),a0
    1bfc:	            |  |      move.l (a0),d0
    1bfe:	            |  |  /-- bpl.s 1c02 <CstDrawZBuffer+0x71a>
    1c00:	            |  |  |   addq.l #7,d0
    1c02:	            |  |  \-> asr.l #3,d0
    1c04:	            |  |      movea.l 100(sp),a0
    1c08:	            |  |      move.l 4(a0),d1
    1c0c:	            |  |      move.l d1,-(sp)
    1c0e:	            |  |      move.l d0,-(sp)
    1c10:	            |  |      jsr 17b40 <__mulsi3>
    1c16:	            |  |      addq.l #8,sp
    1c18:	            |  |      move.l d0,d1
    1c1a:	            |  |      move.l d1,d0
    1c1c:	            |  |      add.l d0,d0
    1c1e:	            |  |      add.l d0,d0
    1c20:	            |  |      add.l d1,d0
    1c22:	            |  |      add.l d2,d0
    1c24:	            |  |      movea.l 74(sp),a0
    1c28:	            |  |      move.l d0,80(a0)
    custom->bltdpt = (APTR) returnvalue;
    1c2c:	            |  |      movea.l 74(sp),a0
    1c30:	            |  |      move.l 58(sp),84(a0)
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1c36:	            |  |      movea.l 100(sp),a0
    1c3a:	            |  |      move.l 4(a0),d0
    1c3e:	            |  |      move.l d0,d0
    1c40:	            |  |      move.w d0,d1
    1c42:	            |  |      lsl.w #6,d1
    1c44:	            |  |      movea.l 100(sp),a0
    1c48:	            |  |      move.l (a0),d0
    1c4a:	            |  |      movea.l d0,a0
    1c4c:	            |  |      cmpa.w #0,a0
    1c50:	            |  |  /-- bge.s 1c56 <CstDrawZBuffer+0x76e>
    1c52:	            |  |  |   lea 15(a0),a0
    1c56:	            |  |  \-> move.l a0,d0
    1c58:	            |  |      asr.l #4,d0
    1c5a:	            |  |      move.l d0,d0
    1c5c:	            |  |      add.w d1,d0
    1c5e:	            |  |      movea.l 74(sp),a0
    1c62:	            |  |      move.w d0,88(a0)

  }

  return returnvalue;
    1c66:	            |  \----> move.l 58(sp),d0

}
    1c6a:	            \-------> move.l (sp)+,d2
    1c6c:	                      movea.l (sp)+,a6
    1c6e:	                      lea 88(sp),sp
    1c72:	                      rts

00001c74 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c74:	    lea -20(sp),sp
    1c78:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c7a:	    move.l 1c836 <CstDrawBuffer>,d0
    1c80:	/-- beq.s 1c9a <CstFreeBuffer+0x26>
    1c82:	|   move.l 1c836 <CstDrawBuffer>,20(sp)
    1c8a:	|   move.l 1c902 <SysBase>,d0
    1c90:	|   movea.l d0,a6
    1c92:	|   movea.l 20(sp),a1
    1c96:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c9a:	\-> move.l 1c832 <CstViewBuffer>,d0
    1ca0:	/-- beq.s 1cba <CstFreeBuffer+0x46>
    1ca2:	|   move.l 1c832 <CstViewBuffer>,16(sp)
    1caa:	|   move.l 1c902 <SysBase>,d0
    1cb0:	|   movea.l d0,a6
    1cb2:	|   movea.l 16(sp),a1
    1cb6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1cba:	\-> move.l 1c82c <CstCopperList>,d0
    1cc0:	/-- beq.s 1cda <CstFreeBuffer+0x66>
    1cc2:	|   move.l 1c82c <CstCopperList>,12(sp)
    1cca:	|   move.l 1c902 <SysBase>,d0
    1cd0:	|   movea.l d0,a6
    1cd2:	|   movea.l 12(sp),a1
    1cd6:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1cda:	\-> move.l 1c824 <CstBackDrop>,d0
    1ce0:	/-- beq.s 1cfa <CstFreeBuffer+0x86>
    1ce2:	|   move.l 1c824 <CstBackDrop>,8(sp)
    1cea:	|   move.l 1c902 <SysBase>,d0
    1cf0:	|   movea.l d0,a6
    1cf2:	|   movea.l 8(sp),a1
    1cf6:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1cfa:	\-> move.l 1c828 <CstBackDropBackup>,d0
    1d00:	/-- beq.s 1d1a <CstFreeBuffer+0xa6>
    1d02:	|   move.l 1c828 <CstBackDropBackup>,4(sp)
    1d0a:	|   move.l 1c902 <SysBase>,d0
    1d10:	|   movea.l d0,a6
    1d12:	|   movea.l 4(sp),a1
    1d16:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1d1a:	\-> clr.l 1c836 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1d20:	    clr.l 1c832 <CstViewBuffer>
  CstCopperList = NULL;
    1d26:	    clr.l 1c82c <CstCopperList>
  CstBackDrop = NULL;
    1d2c:	    clr.l 1c824 <CstBackDrop>

}
    1d32:	    nop
    1d34:	    movea.l (sp)+,a6
    1d36:	    lea 20(sp),sp
    1d3a:	    rts

00001d3c <CstFreeze>:



void CstFreeze( ) {
    1d3c:	       lea -36(sp),sp
    1d40:	       move.l a6,-(sp)
    1d42:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d44:	       pea 17e1f <PutChar+0x1c9>
    1d4a:	       jsr 171b4 <KPrintF>
    1d50:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1d52:	       move.l 1c856 <winWidth>,d0
    1d58:	       lsr.l #3,d0
    1d5a:	       move.l d0,d1
    1d5c:	       move.l 1c85a <winHeight>,d0
    1d62:	       move.l d0,d0
    1d64:	       muls.w d0,d1
    1d66:	       move.w d1,d0
    1d68:	       add.w d0,d0
    1d6a:	       add.w d0,d0
    1d6c:	       move.w d0,d2
    1d6e:	       add.w d1,d2
    1d70:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d74:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d7c:	       moveq #0,d0
    1d7e:	       move.w 26(sp),d0
    1d82:	       move.l d0,18(sp)
    1d86:	       clr.l 14(sp)
    1d8a:	       move.l 1c902 <SysBase>,d0
    1d90:	       movea.l d0,a6
    1d92:	       move.l 18(sp),d0
    1d96:	       move.l 14(sp),d1
    1d9a:	       jsr -684(a6)
    1d9e:	       move.l d0,10(sp)
    1da2:	       move.l 10(sp),d0
    1da6:	       move.l d0,1c828 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1dac:	       move.l 1c828 <CstBackDropBackup>,d0
    1db2:	   /-- bne.s 1dc2 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1db4:	   |   pea 17e46 <PutChar+0x1f0>
    1dba:	   |   jsr 171b4 <KPrintF>
    1dc0:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1dc2:	   \-> move.l 1c85a <winHeight>,d0
    1dc8:	       move.l d0,d0
    1dca:	       movea.w d0,a1
    1dcc:	       move.l 1c856 <winWidth>,d0
    1dd2:	       move.l d0,d0
    1dd4:	       movea.w d0,a0
    1dd6:	       move.l 1c828 <CstBackDropBackup>,d0
    1ddc:	       clr.l -(sp)
    1dde:	       pea 5 <_start+0x5>
    1de2:	       move.l a1,-(sp)
    1de4:	       move.l a0,-(sp)
    1de6:	       pea 17e7e <PutChar+0x228>
    1dec:	       move.l d0,-(sp)
    1dee:	       jsr 1729c <debug_register_bitmap>
    1df4:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1df8:	       move.l 1c824 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1e00:	       move.l 1c828 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1e08:	       clr.l 32(sp)
    1e0c:	   /-- bra.s 1e32 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1e0e:	/--|-> move.l 40(sp),d1
    1e12:	|  |   move.l d1,d0
    1e14:	|  |   addq.l #4,d0
    1e16:	|  |   move.l d0,40(sp)
    1e1a:	|  |   move.l 36(sp),d0
    1e1e:	|  |   move.l d0,d2
    1e20:	|  |   addq.l #4,d2
    1e22:	|  |   move.l d2,36(sp)
    1e26:	|  |   movea.l d1,a0
    1e28:	|  |   move.l (a0),d1
    1e2a:	|  |   movea.l d0,a0
    1e2c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e2e:	|  |   addq.l #1,32(sp)
    1e32:	|  \-> move.w 26(sp),d0
    1e36:	|      lsr.w #2,d0
    1e38:	|      move.w d0,d0
    1e3a:	|      andi.l #65535,d0
    1e40:	|      cmp.l 32(sp),d0
    1e44:	\----- bgt.s 1e0e <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e46:	       move.l 1c832 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1e4e:	       move.l 1c824 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1e56:	       clr.l 28(sp)
    1e5a:	   /-- bra.s 1e80 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1e5c:	/--|-> move.l 40(sp),d1
    1e60:	|  |   move.l d1,d0
    1e62:	|  |   addq.l #4,d0
    1e64:	|  |   move.l d0,40(sp)
    1e68:	|  |   move.l 36(sp),d0
    1e6c:	|  |   move.l d0,d2
    1e6e:	|  |   addq.l #4,d2
    1e70:	|  |   move.l d2,36(sp)
    1e74:	|  |   movea.l d1,a0
    1e76:	|  |   move.l (a0),d1
    1e78:	|  |   movea.l d0,a0
    1e7a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e7c:	|  |   addq.l #1,28(sp)
    1e80:	|  \-> move.w 26(sp),d0
    1e84:	|      lsr.w #2,d0
    1e86:	|      move.w d0,d0
    1e88:	|      andi.l #65535,d0
    1e8e:	|      cmp.l 28(sp),d0
    1e92:	\----- bgt.s 1e5c <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e94:	       move.w #2,1c830 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e9c:	       move.l 1c856 <winWidth>,d0
    1ea2:	       lsr.l #4,d0
    1ea4:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    1eaa:	       move.l a0,d1
    1eac:	       addq.l #2,d1
    1eae:	       move.l d1,1c846 <CstBackDropBufferApplyCursor>
    1eb4:	       move.l d0,d0
    1eb6:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1eb8:	       move.l 1c85a <winHeight>,d0
    1ebe:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    1ec4:	       move.l a0,d1
    1ec6:	       addq.l #2,d1
    1ec8:	       move.l d1,1c846 <CstBackDropBufferApplyCursor>
    1ece:	       move.l d0,d0
    1ed0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ed2:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    1ed8:	       move.l a0,d0
    1eda:	       addq.l #2,d0
    1edc:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    1ee2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ee4:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    1eea:	       move.l a0,d0
    1eec:	       addq.l #2,d0
    1eee:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    1ef4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ef6:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    1efc:	       move.l a0,d0
    1efe:	       addq.l #2,d0
    1f00:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    1f06:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1f08:	       pea 17e8d <PutChar+0x237>
    1f0e:	       jsr 171b4 <KPrintF>
    1f14:	       addq.l #4,sp

}  
    1f16:	       nop
    1f18:	       move.l (sp)+,d2
    1f1a:	       movea.l (sp)+,a6
    1f1c:	       lea 36(sp),sp
    1f20:	       rts

00001f22 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f22:	             lea -144(sp),sp
    1f26:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f2a:	             pea 17ea1 <PutChar+0x24b>
    1f30:	             jsr 171b4 <KPrintF>
    1f36:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f38:	             move.l 164(sp),-(sp)
    1f3c:	             jsr 6bc <get2bytes>
    1f42:	             addq.l #4,sp
    1f44:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1f48:	             move.l 164(sp),-(sp)
    1f4c:	             jsr 6bc <get2bytes>
    1f52:	             addq.l #4,sp
    1f54:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1f58:	             move.w 134(sp),d0
    1f5c:	             lsr.w #3,d0
    1f5e:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f62:	             move.w 130(sp),d0
    1f66:	             lsr.w #1,d0
    1f68:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f6c:	             move.l 1c856 <winWidth>,d0
    1f72:	             lsr.l #3,d0
    1f74:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f78:	             move.w 130(sp),d0
    1f7c:	             muls.w 132(sp),d0
    1f80:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f84:	             move.w 124(sp),d1
    1f88:	             move.w d1,d0
    1f8a:	             add.w d0,d0
    1f8c:	             add.w d0,d0
    1f8e:	             move.w d0,d2
    1f90:	             add.w d1,d2
    1f92:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f96:	             move.w 1c81e <CstPaletteLoaded>,d0
    1f9c:	/----------- bne.w 2036 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1fa0:	|            move.w #384,120(sp)

    if(CstPalette) {
    1fa6:	|            move.l 1c84e <CstPalette>,d0
    1fac:	|        /-- beq.s 1fc6 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1fae:	|        |   move.l 1c84e <CstPalette>,116(sp)
    1fb6:	|        |   move.l 1c902 <SysBase>,d0
    1fbc:	|        |   movea.l d0,a6
    1fbe:	|        |   movea.l 116(sp),a1
    1fc2:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fc6:	|        \-> moveq #64,d0
    1fc8:	|            move.l d0,112(sp)
    1fcc:	|            clr.l 108(sp)
    1fd0:	|            move.l 1c902 <SysBase>,d0
    1fd6:	|            movea.l d0,a6
    1fd8:	|            move.l 112(sp),d0
    1fdc:	|            move.l 108(sp),d1
    1fe0:	|            jsr -684(a6)
    1fe4:	|            move.l d0,104(sp)
    1fe8:	|            move.l 104(sp),d0
    1fec:	|            move.l d0,1c84e <CstPalette>
    CstPaletteLoaded = 1;
    1ff2:	|            move.w #1,1c81e <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1ffa:	|            move.l 1c84e <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2002:	|            clr.l 152(sp)
    2006:	|        /-- bra.s 202c <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    2008:	|     /--|-> move.l 164(sp),-(sp)
    200c:	|     |  |   jsr 6bc <get2bytes>
    2012:	|     |  |   addq.l #4,sp
    2014:	|     |  |   move.l d0,d1
    2016:	|     |  |   move.l 156(sp),d0
    201a:	|     |  |   move.l d0,d2
    201c:	|     |  |   addq.l #2,d2
    201e:	|     |  |   move.l d2,156(sp)
    2022:	|     |  |   move.l d1,d1
    2024:	|     |  |   movea.l d0,a0
    2026:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2028:	|     |  |   addq.l #1,152(sp)
    202c:	|     |  \-> moveq #31,d0
    202e:	|     |      cmp.l 152(sp),d0
    2032:	|     \----- bge.s 2008 <CstLoadBackdrop+0xe6>
    2034:	|  /-------- bra.s 2054 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2036:	\--|-------> clr.l 148(sp)
    203a:	   |     /-- bra.s 204c <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    203c:	   |  /--|-> move.l 164(sp),-(sp)
    2040:	   |  |  |   jsr 6bc <get2bytes>
    2046:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2048:	   |  |  |   addq.l #1,148(sp)
    204c:	   |  |  \-> moveq #31,d2
    204e:	   |  |      cmp.l 148(sp),d2
    2052:	   |  \----- bge.s 203c <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2054:	   \-------> moveq #0,d0
    2056:	             move.w 122(sp),d0
    205a:	             move.l d0,100(sp)
    205e:	             moveq #2,d0
    2060:	             move.l d0,96(sp)
    2064:	             move.l 1c902 <SysBase>,d0
    206a:	             movea.l d0,a6
    206c:	             move.l 100(sp),d0
    2070:	             move.l 96(sp),d1
    2074:	             jsr -684(a6)
    2078:	             move.l d0,92(sp)
    207c:	             move.l 92(sp),d0
    2080:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2084:	         /-- bne.s 2094 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2086:	         |   pea 17ed0 <PutChar+0x27a>
    208c:	         |   jsr 171b4 <KPrintF>
    2092:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2094:	         \-> moveq #0,d0
    2096:	             move.w 124(sp),d0
    209a:	             move.l d0,84(sp)
    209e:	             moveq #2,d2
    20a0:	             move.l d2,80(sp)
    20a4:	             move.l 1c902 <SysBase>,d0
    20aa:	             movea.l d0,a6
    20ac:	             move.l 84(sp),d0
    20b0:	             move.l 80(sp),d1
    20b4:	             jsr -684(a6)
    20b8:	             move.l d0,76(sp)
    20bc:	             move.l 76(sp),d0
    20c0:	             move.l d0,72(sp)
  if( !tmpmask)
    20c4:	         /-- bne.s 20d4 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20c6:	         |   pea 17f06 <PutChar+0x2b0>
    20cc:	         |   jsr 171b4 <KPrintF>
    20d2:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20d4:	         \-> move.w 132(sp),d0
    20d8:	             movea.w d0,a1
    20da:	             move.w 134(sp),d0
    20de:	             movea.w d0,a0
    20e0:	             clr.l -(sp)
    20e2:	             pea 5 <_start+0x5>
    20e6:	             move.l a1,-(sp)
    20e8:	             move.l a0,-(sp)
    20ea:	             pea 17f3a <PutChar+0x2e4>
    20f0:	             move.l 108(sp),-(sp)
    20f4:	             jsr 1729c <debug_register_bitmap>
    20fa:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20fe:	             move.w 132(sp),d0
    2102:	             movea.w d0,a1
    2104:	             move.w 134(sp),d0
    2108:	             movea.w d0,a0
    210a:	             clr.l -(sp)
    210c:	             pea 1 <_start+0x1>
    2110:	             move.l a1,-(sp)
    2112:	             move.l a0,-(sp)
    2114:	             pea 17f48 <PutChar+0x2f2>
    211a:	             move.l 108(sp),-(sp)
    211e:	             jsr 1729c <debug_register_bitmap>
    2124:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2128:	             move.l 164(sp),68(sp)
    212e:	             move.l 88(sp),64(sp)
    2134:	             moveq #2,d0
    2136:	             move.l d0,60(sp)
    213a:	             move.w 122(sp),d0
    213e:	             lsr.w #1,d0
    2140:	             move.w d0,d0
    2142:	             andi.l #65535,d0
    2148:	             move.l d0,56(sp)
    214c:	             move.l 1c90a <DOSBase>,d0
    2152:	             movea.l d0,a6
    2154:	             move.l 68(sp),d1
    2158:	             move.l 64(sp),d2
    215c:	             move.l 60(sp),d3
    2160:	             move.l 56(sp),d4
    2164:	             jsr -324(a6)
    2168:	             move.l d0,52(sp)
    216c:	             move.l 52(sp),d0
    2170:	             move.w d0,50(sp)
  if(!count) {
    2174:	         /-- bne.s 2188 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2176:	         |   pea 17f54 <PutChar+0x2fe>
    217c:	         |   jsr 171b4 <KPrintF>
    2182:	         |   addq.l #4,sp
    return;
    2184:	   /-----|-- bra.w 23d4 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2188:	   |     \-> move.l 164(sp),46(sp)
    218e:	   |         move.l 72(sp),42(sp)
    2194:	   |         moveq #2,d2
    2196:	   |         move.l d2,38(sp)
    219a:	   |         move.w 124(sp),d0
    219e:	   |         lsr.w #1,d0
    21a0:	   |         move.w d0,d0
    21a2:	   |         andi.l #65535,d0
    21a8:	   |         move.l d0,34(sp)
    21ac:	   |         move.l 1c90a <DOSBase>,d0
    21b2:	   |         movea.l d0,a6
    21b4:	   |         move.l 46(sp),d1
    21b8:	   |         move.l 42(sp),d2
    21bc:	   |         move.l 38(sp),d3
    21c0:	   |         move.l 34(sp),d4
    21c4:	   |         jsr -324(a6)
    21c8:	   |         move.l d0,30(sp)
    21cc:	   |         move.l 30(sp),d0
    21d0:	   |         move.w d0,50(sp)
   

  if(!count) {
    21d4:	   |     /-- bne.s 21e8 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21d6:	   |     |   pea 17f54 <PutChar+0x2fe>
    21dc:	   |     |   jsr 171b4 <KPrintF>
    21e2:	   |     |   addq.l #4,sp
    return;
    21e4:	   +-----|-- bra.w 23d4 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21e8:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21f0:	   |         move.l 1c824 <CstBackDrop>,d0
    21f6:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21fa:	   |         move.l 172(sp),d0
    21fe:	   |         move.w d0,d1
    2200:	   |         muls.w 126(sp),d1
    2204:	   |         move.l 168(sp),d0
    2208:	   |     /-- bpl.s 220c <CstLoadBackdrop+0x2ea>
    220a:	   |     |   addq.l #7,d0
    220c:	   |     \-> asr.l #3,d0
    220e:	   |         move.l d0,d0
    2210:	   |         movea.w d1,a0
    2212:	   |         adda.w d0,a0
    2214:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2218:	   |         moveq #0,d0
    221a:	   |         move.w 24(sp),d0
    221e:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2222:	   |         pea 17f6f <PutChar+0x319>
    2228:	   |         jsr 171b4 <KPrintF>
    222e:	   |         addq.l #4,sp


  WaitBlit();
    2230:	   |         move.l 1c90e <GfxBase>,d0
    2236:	   |         movea.l d0,a6
    2238:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    223c:	   |         movea.l 26(sp),a0
    2240:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2246:	   |         movea.l 26(sp),a0
    224a:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2250:	   |         movea.l 26(sp),a0
    2254:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    225a:	   |         movea.l 26(sp),a0
    225e:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2264:	   |         move.w 126(sp),d0
    2268:	   |         sub.w 130(sp),d0
    226c:	   |         movea.l 26(sp),a0
    2270:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2274:	   |         move.w 126(sp),d0
    2278:	   |         sub.w 130(sp),d0
    227c:	   |         movea.l 26(sp),a0
    2280:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2284:	   |         movea.l 26(sp),a0
    2288:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    228e:	   |         movea.l 26(sp),a0
    2292:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2298:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    229e:	   |         clr.l 136(sp)
    22a2:	   |     /-- bra.s 2304 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    22a4:	   |  /--|-> movea.l 26(sp),a0
    22a8:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    22ae:	   |  |  |   move.l 140(sp),d0
    22b2:	   |  |  |   movea.l 26(sp),a0
    22b6:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    22ba:	   |  |  |   move.l 144(sp),d0
    22be:	   |  |  |   movea.l 26(sp),a0
    22c2:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22c6:	   |  |  |   move.l 144(sp),d0
    22ca:	   |  |  |   movea.l 26(sp),a0
    22ce:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22d2:	   |  |  |   move.w 132(sp),d0
    22d6:	   |  |  |   lsl.w #6,d0
    22d8:	   |  |  |   add.w 128(sp),d0
    22dc:	   |  |  |   movea.l 26(sp),a0
    22e0:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22e4:	   |  |  |   moveq #0,d0
    22e6:	   |  |  |   move.w 124(sp),d0
    22ea:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    22ee:	   |  |  |   move.w 1c822 <CstBackdropSizePlane>,d0
    22f4:	   |  |  |   move.w d0,d0
    22f6:	   |  |  |   andi.l #65535,d0
    22fc:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2300:	   |  |  |   addq.l #1,136(sp)
    2304:	   |  |  \-> moveq #4,d0
    2306:	   |  |      cmp.l 136(sp),d0
    230a:	   |  \----- bge.s 22a4 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    230c:	   |         move.l 1c90e <GfxBase>,d0
    2312:	   |         movea.l d0,a6
    2314:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2318:	   |         pea 17f8e <PutChar+0x338>
    231e:	   |         jsr 171b4 <KPrintF>
    2324:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2326:	   |         move.l 88(sp),20(sp)
    232c:	   |         move.l 1c902 <SysBase>,d0
    2332:	   |         movea.l d0,a6
    2334:	   |         movea.l 20(sp),a1
    2338:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    233c:	   |         move.l 72(sp),16(sp)
    2342:	   |         move.l 1c902 <SysBase>,d0
    2348:	   |         movea.l d0,a6
    234a:	   |         movea.l 16(sp),a1
    234e:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2352:	   |         move.w #2,1c830 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    235a:	   |         move.l 1c856 <winWidth>,d0
    2360:	   |         lsr.l #4,d0
    2362:	   |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2368:	   |         move.l a0,d1
    236a:	   |         addq.l #2,d1
    236c:	   |         move.l d1,1c846 <CstBackDropBufferApplyCursor>
    2372:	   |         move.l d0,d0
    2374:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2376:	   |         move.l 1c85a <winHeight>,d0
    237c:	   |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2382:	   |         move.l a0,d1
    2384:	   |         addq.l #2,d1
    2386:	   |         move.l d1,1c846 <CstBackDropBufferApplyCursor>
    238c:	   |         move.l d0,d0
    238e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2390:	   |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2396:	   |         move.l a0,d0
    2398:	   |         addq.l #2,d0
    239a:	   |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    23a0:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23a2:	   |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    23a8:	   |         move.l a0,d0
    23aa:	   |         addq.l #2,d0
    23ac:	   |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    23b2:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23b4:	   |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    23ba:	   |         move.l a0,d0
    23bc:	   |         addq.l #2,d0
    23be:	   |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    23c4:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    23c6:	   |         pea 17fae <PutChar+0x358>
    23cc:	   |         jsr 171b4 <KPrintF>
    23d2:	   |         addq.l #4,sp

}
    23d4:	   \-------> movem.l (sp)+,d2-d4/a6
    23d8:	             lea 144(sp),sp
    23dc:	             rts

000023de <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    23de:	                lea -72(sp),sp
    23e2:	                move.l a6,-(sp)
    23e4:	                move.l d2,-(sp)
    23e6:	                move.l 88(sp),d1
    23ea:	                move.l 92(sp),d0
    23ee:	                move.w d1,d1
    23f0:	                move.w d1,10(sp)
    23f4:	                move.w d0,d0
    23f6:	                move.w d0,8(sp)
  UWORD *destination = 0;
    23fa:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    23fe:	                move.w #2,1c830 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2406:	                move.l 1c824 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    240e:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2412:	                movea.l 84(sp),a0
    2416:	                move.l (a0),d0
    2418:	                movea.l d0,a0
    241a:	                cmpa.w #0,a0
    241e:	            /-- bge.s 2424 <CstPasteChar+0x46>
    2420:	            |   lea 15(a0),a0
    2424:	            \-> move.l a0,d0
    2426:	                asr.l #4,d0
    2428:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    242c:	            /-- bne.s 2434 <CstPasteChar+0x56>
    242e:	            |   moveq #1,d0
    2430:	            |   move.l d0,40(sp)

  if( y < 0) {
    2434:	            \-> tst.w 8(sp)
    2438:	         /----- bge.s 2480 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    243a:	         |      movea.w 8(sp),a1
    243e:	         |      movea.l 84(sp),a0
    2442:	         |      move.l 4(a0),d0
    2446:	         |      add.l a1,d0
    2448:	         |  /-- bpl.s 245c <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    244a:	         |  |   pea 17fc8 <PutChar+0x372>
    2450:	         |  |   jsr 171b4 <KPrintF>
    2456:	         |  |   addq.l #4,sp
      return;
    2458:	/--------|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    245c:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    2460:	|        |      move.w 8(sp),d0
    2464:	|        |      ext.l d0
    2466:	|        |      neg.l d0
    2468:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    246c:	|        |      movea.l 84(sp),a0
    2470:	|        |      move.l 4(a0),d0
    2474:	|        |      movea.w 8(sp),a0
    2478:	|        |      add.l a0,d0
    247a:	|        |      move.l d0,44(sp)
    247e:	|     /--|----- bra.s 24f2 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2480:	|     |  \----> movea.w 8(sp),a1
    2484:	|     |         movea.l 84(sp),a0
    2488:	|     |         move.l 4(a0),d0
    248c:	|     |         move.l a1,d1
    248e:	|     |         add.l d0,d1
    2490:	|     |         move.l 1c85a <winHeight>,d0
    2496:	|     |         cmp.l d1,d0
    2498:	|     |  /----- bge.s 24da <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    249a:	|     |  |      movea.w 8(sp),a0
    249e:	|     |  |      move.l 1c85a <winHeight>,d0
    24a4:	|     |  |      cmp.l a0,d0
    24a6:	|     |  |  /-- bge.s 24ba <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24a8:	|     |  |  |   pea 17fc8 <PutChar+0x372>
    24ae:	|     |  |  |   jsr 171b4 <KPrintF>
    24b4:	|     |  |  |   addq.l #4,sp
      return;
    24b6:	+-----|--|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    ystartdst = y;
    24ba:	|     |  |  \-> movea.w 8(sp),a0
    24be:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    24c2:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    24c6:	|     |  |      move.l 1c85a <winHeight>,d0
    24cc:	|     |  |      movea.w 8(sp),a0
    24d0:	|     |  |      move.l d0,d1
    24d2:	|     |  |      sub.l a0,d1
    24d4:	|     |  |      move.l d1,44(sp)
    24d8:	|     +--|----- bra.s 24f2 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    24da:	|     |  \----> movea.w 8(sp),a0
    24de:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    24e2:	|     |         clr.l 48(sp)
    blitheight = single->height;
    24e6:	|     |         movea.l 84(sp),a0
    24ea:	|     |         move.l 4(a0),d0
    24ee:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    24f2:	|     \-------> tst.w 10(sp)
    24f6:	|        /----- bge.w 2668 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    24fa:	|        |      movea.w 10(sp),a1
    24fe:	|        |      movea.l 84(sp),a0
    2502:	|        |      move.l (a0),d0
    2504:	|        |      add.l a1,d0
    2506:	|        |  /-- bpl.s 251a <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2508:	|        |  |   pea 17fc8 <PutChar+0x372>
    250e:	|        |  |   jsr 171b4 <KPrintF>
    2514:	|        |  |   addq.l #4,sp
      return;
    2516:	+--------|--|-- bra.w 2b1c <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    251a:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2520:	|        |      move.w 10(sp),d0
    2524:	|        |  /-- bpl.s 252a <CstPasteChar+0x14c>
    2526:	|        |  |   addi.w #15,d0
    252a:	|        |  \-> asr.w #4,d0
    252c:	|        |      neg.w d0
    252e:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2532:	|        |      move.w 10(sp),d0
    2536:	|        |      ext.l d0
    2538:	|        |      neg.l d0
    253a:	|        |      andi.l #-2147483633,d0
    2540:	|        |  /-- bpl.s 254a <CstPasteChar+0x16c>
    2542:	|        |  |   subq.l #1,d0
    2544:	|        |  |   moveq #-16,d1
    2546:	|        |  |   or.l d1,d0
    2548:	|        |  |   addq.l #1,d0
    254a:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    254e:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2552:	|        |      movea.l 84(sp),a0
    2556:	|        |      move.l 24(a0),d0
    255a:	|        |      move.l d0,d1
    255c:	|        |      moveq #0,d0
    255e:	|        |      move.w 76(sp),d0
    2562:	|        |      add.l d0,d0
    2564:	|        |      move.l d1,d2
    2566:	|        |      add.l d0,d2
    2568:	|        |      movea.l 84(sp),a0
    256c:	|        |      move.l (a0),d0
    256e:	|        |      move.l 48(sp),-(sp)
    2572:	|        |      move.l d0,-(sp)
    2574:	|        |      jsr 17b40 <__mulsi3>
    257a:	|        |      addq.l #8,sp
    257c:	|        |      lsr.l #3,d0
    257e:	|        |      move.l d2,d1
    2580:	|        |      add.l d0,d1
    2582:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2586:	|        |      move.l 1c856 <winWidth>,d0
    258c:	|        |      move.l 52(sp),-(sp)
    2590:	|        |      move.l d0,-(sp)
    2592:	|        |      jsr 17b40 <__mulsi3>
    2598:	|        |      addq.l #8,sp
    259a:	|        |      lsr.l #3,d0
    259c:	|        |      move.l 28(sp),d1
    25a0:	|        |      add.l d1,d0
    25a2:	|        |      move.l d0,d2
    25a4:	|        |      subq.l #2,d2
    25a6:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25aa:	|        |      move.l 1c856 <winWidth>,d0
    25b0:	|        |      move.l 52(sp),-(sp)
    25b4:	|        |      move.l d0,-(sp)
    25b6:	|        |      jsr 17b40 <__mulsi3>
    25bc:	|        |      addq.l #8,sp
    25be:	|        |      lsr.l #3,d0
    25c0:	|        |      move.l 28(sp),d1
    25c4:	|        |      add.l d1,d0
    25c6:	|        |      move.l d0,d1
    25c8:	|        |      subq.l #2,d1
    25ca:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    25ce:	|        |      moveq #0,d0
    25d0:	|        |      move.w 74(sp),d0
    25d4:	|        |      moveq #16,d1
    25d6:	|        |      sub.l d0,d1
    25d8:	|        |      move.l d1,d0
    25da:	|        |      moveq #12,d2
    25dc:	|        |      lsl.l d2,d0
    25de:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    25e2:	|        |      movea.l 84(sp),a0
    25e6:	|        |      move.l (a0),d0
    25e8:	|        |      movea.l d0,a0
    25ea:	|        |      cmpa.w #0,a0
    25ee:	|        |  /-- bge.s 25f4 <CstPasteChar+0x216>
    25f0:	|        |  |   lea 15(a0),a0
    25f4:	|        |  \-> move.l a0,d0
    25f6:	|        |      asr.l #4,d0
    25f8:	|        |      move.l d0,d0
    25fa:	|        |      add.w 76(sp),d0
    25fe:	|        |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2604:	|        |      move.l a0,d1
    2606:	|        |      addq.l #2,d1
    2608:	|        |      move.l d1,1c846 <CstBackDropBufferApplyCursor>
    260e:	|        |      add.w 78(sp),d0
    2612:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2614:	|        |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    261a:	|        |      move.l a0,d0
    261c:	|        |      addq.l #2,d0
    261e:	|        |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    2624:	|        |      move.l 44(sp),d0
    2628:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    262a:	|        |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2630:	|        |      move.l a0,d0
    2632:	|        |      addq.l #2,d0
    2634:	|        |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    263a:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    263c:	|        |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2642:	|        |      move.l a0,d0
    2644:	|        |      addq.l #2,d0
    2646:	|        |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    264c:	|        |      move.l 52(sp),d0
    2650:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2652:	|        |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2658:	|        |      move.l a0,d0
    265a:	|        |      addq.l #2,d0
    265c:	|        |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    2662:	|        |      clr.w (a0)
    2664:	|     /--|----- bra.w 297c <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2668:	|     |  \----> movea.w 10(sp),a1
    266c:	|     |         movea.l 84(sp),a0
    2670:	|     |         move.l (a0),d0
    2672:	|     |         move.l a1,d1
    2674:	|     |         add.l d0,d1
    2676:	|     |         move.l 1c856 <winWidth>,d0
    267c:	|     |         cmp.l d1,d0
    267e:	|     |  /----- bge.w 281a <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2682:	|     |  |      movea.w 10(sp),a1
    2686:	|     |  |      movea.l 84(sp),a0
    268a:	|     |  |      move.l (a0),d0
    268c:	|     |  |      move.l a1,d1
    268e:	|     |  |      sub.l d0,d1
    2690:	|     |  |      move.l 1c856 <winWidth>,d0
    2696:	|     |  |      cmp.l d1,d0
    2698:	|     |  |  /-- bge.s 26ac <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    269a:	|     |  |  |   pea 17fc8 <PutChar+0x372>
    26a0:	|     |  |  |   jsr 171b4 <KPrintF>
    26a6:	|     |  |  |   addq.l #4,sp
      return;
    26a8:	+-----|--|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    26ac:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    26b0:	|     |  |      movea.w 10(sp),a1
    26b4:	|     |  |      movea.l 84(sp),a0
    26b8:	|     |  |      move.l (a0),d0
    26ba:	|     |  |      add.l a1,d0
    26bc:	|     |  |      move.l d0,d1
    26be:	|     |  |      move.l 1c856 <winWidth>,d0
    26c4:	|     |  |      sub.l d0,d1
    26c6:	|     |  |      move.l d1,d0
    26c8:	|     |  |      lsr.l #4,d0
    26ca:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    26ce:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    26d2:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    26d8:	|     |  |      movea.l 84(sp),a0
    26dc:	|     |  |      move.l 24(a0),d0
    26e0:	|     |  |      move.l d0,d2
    26e2:	|     |  |      movea.l 84(sp),a0
    26e6:	|     |  |      move.l (a0),d0
    26e8:	|     |  |      move.l 48(sp),-(sp)
    26ec:	|     |  |      move.l d0,-(sp)
    26ee:	|     |  |      jsr 17b40 <__mulsi3>
    26f4:	|     |  |      addq.l #8,sp
    26f6:	|     |  |      lsr.l #3,d0
    26f8:	|     |  |      move.l d2,d1
    26fa:	|     |  |      add.l d0,d1
    26fc:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2700:	|     |  |      move.l 1c856 <winWidth>,d0
    2706:	|     |  |      move.l 52(sp),-(sp)
    270a:	|     |  |      move.l d0,-(sp)
    270c:	|     |  |      jsr 17b40 <__mulsi3>
    2712:	|     |  |      addq.l #8,sp
    2714:	|     |  |      lsr.l #3,d0
    2716:	|     |  |      move.l 28(sp),d1
    271a:	|     |  |      add.l d0,d1
    271c:	|     |  |      move.w 10(sp),d0
    2720:	|     |  |  /-- bpl.s 2726 <CstPasteChar+0x348>
    2722:	|     |  |  |   addi.w #15,d0
    2726:	|     |  |  \-> asr.w #4,d0
    2728:	|     |  |      movea.w d0,a0
    272a:	|     |  |      move.l a0,d0
    272c:	|     |  |      add.l a0,d0
    272e:	|     |  |      move.l d1,d2
    2730:	|     |  |      add.l d0,d2
    2732:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2736:	|     |  |      move.l 1c856 <winWidth>,d0
    273c:	|     |  |      move.l 52(sp),-(sp)
    2740:	|     |  |      move.l d0,-(sp)
    2742:	|     |  |      jsr 17b40 <__mulsi3>
    2748:	|     |  |      addq.l #8,sp
    274a:	|     |  |      lsr.l #3,d0
    274c:	|     |  |      move.l 28(sp),d1
    2750:	|     |  |      add.l d0,d1
    2752:	|     |  |      move.w 10(sp),d0
    2756:	|     |  |  /-- bpl.s 275c <CstPasteChar+0x37e>
    2758:	|     |  |  |   addi.w #15,d0
    275c:	|     |  |  \-> asr.w #4,d0
    275e:	|     |  |      movea.w d0,a0
    2760:	|     |  |      move.l a0,d0
    2762:	|     |  |      add.l a0,d0
    2764:	|     |  |      move.l d1,d2
    2766:	|     |  |      add.l d0,d2
    2768:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    276c:	|     |  |      movea.l 84(sp),a0
    2770:	|     |  |      move.l (a0),d0
    2772:	|     |  |      andi.l #-2147483633,d0
    2778:	|     |  |  /-- bpl.s 2782 <CstPasteChar+0x3a4>
    277a:	|     |  |  |   subq.l #1,d0
    277c:	|     |  |  |   moveq #-16,d1
    277e:	|     |  |  |   or.l d1,d0
    2780:	|     |  |  |   addq.l #1,d0
    2782:	|     |  |  \-> moveq #12,d2
    2784:	|     |  |      lsl.l d2,d0
    2786:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    278a:	|     |  |      movea.l 84(sp),a0
    278e:	|     |  |      move.l (a0),d0
    2790:	|     |  |      movea.l d0,a0
    2792:	|     |  |      cmpa.w #0,a0
    2796:	|     |  |  /-- bge.s 279c <CstPasteChar+0x3be>
    2798:	|     |  |  |   lea 15(a0),a0
    279c:	|     |  |  \-> move.l a0,d0
    279e:	|     |  |      asr.l #4,d0
    27a0:	|     |  |      move.l d0,d0
    27a2:	|     |  |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    27a8:	|     |  |      move.l a0,d1
    27aa:	|     |  |      addq.l #2,d1
    27ac:	|     |  |      move.l d1,1c846 <CstBackDropBufferApplyCursor>
    27b2:	|     |  |      add.w 76(sp),d0
    27b6:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27b8:	|     |  |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    27be:	|     |  |      move.l a0,d0
    27c0:	|     |  |      addq.l #2,d0
    27c2:	|     |  |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    27c8:	|     |  |      move.l 44(sp),d0
    27cc:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27ce:	|     |  |      move.w 10(sp),d0
    27d2:	|     |  |  /-- bpl.s 27d8 <CstPasteChar+0x3fa>
    27d4:	|     |  |  |   addi.w #15,d0
    27d8:	|     |  |  \-> asr.w #4,d0
    27da:	|     |  |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    27e0:	|     |  |      move.l a0,d1
    27e2:	|     |  |      addq.l #2,d1
    27e4:	|     |  |      move.l d1,1c846 <CstBackDropBufferApplyCursor>
    27ea:	|     |  |      add.w d0,d0
    27ec:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ee:	|     |  |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    27f4:	|     |  |      move.l a0,d0
    27f6:	|     |  |      addq.l #2,d0
    27f8:	|     |  |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    27fe:	|     |  |      move.l 52(sp),d0
    2802:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2804:	|     |  |      movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    280a:	|     |  |      move.l a0,d0
    280c:	|     |  |      addq.l #2,d0
    280e:	|     |  |      move.l d0,1c846 <CstBackDropBufferApplyCursor>
    2814:	|     |  |      clr.w (a0)
    2816:	|     +--|----- bra.w 297c <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    281a:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2820:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2824:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2828:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    282c:	|     |         movea.l 84(sp),a0
    2830:	|     |         move.l 24(a0),d0
    2834:	|     |         move.l d0,d2
    2836:	|     |         movea.l 84(sp),a0
    283a:	|     |         move.l (a0),d0
    283c:	|     |         movea.l d0,a0
    283e:	|     |         cmpa.w #0,a0
    2842:	|     |     /-- bge.s 2848 <CstPasteChar+0x46a>
    2844:	|     |     |   lea 15(a0),a0
    2848:	|     |     \-> move.l a0,d0
    284a:	|     |         asr.l #4,d0
    284c:	|     |         move.l 48(sp),-(sp)
    2850:	|     |         move.l d0,-(sp)
    2852:	|     |         jsr 17b40 <__mulsi3>
    2858:	|     |         addq.l #8,sp
    285a:	|     |         add.l d0,d0
    285c:	|     |         move.l d2,d1
    285e:	|     |         add.l d0,d1
    2860:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2864:	|     |         move.l 1c856 <winWidth>,d0
    286a:	|     |         move.l 52(sp),-(sp)
    286e:	|     |         move.l d0,-(sp)
    2870:	|     |         jsr 17b40 <__mulsi3>
    2876:	|     |         addq.l #8,sp
    2878:	|     |         lsr.l #3,d0
    287a:	|     |         move.l 28(sp),d1
    287e:	|     |         add.l d0,d1
    2880:	|     |         move.w 10(sp),d0
    2884:	|     |     /-- bpl.s 288a <CstPasteChar+0x4ac>
    2886:	|     |     |   addi.w #15,d0
    288a:	|     |     \-> asr.w #4,d0
    288c:	|     |         movea.w d0,a0
    288e:	|     |         move.l a0,d0
    2890:	|     |         add.l a0,d0
    2892:	|     |         move.l d1,d2
    2894:	|     |         add.l d0,d2
    2896:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    289a:	|     |         move.l 1c856 <winWidth>,d0
    28a0:	|     |         move.l 52(sp),-(sp)
    28a4:	|     |         move.l d0,-(sp)
    28a6:	|     |         jsr 17b40 <__mulsi3>
    28ac:	|     |         addq.l #8,sp
    28ae:	|     |         lsr.l #3,d0
    28b0:	|     |         move.l 28(sp),d1
    28b4:	|     |         add.l d0,d1
    28b6:	|     |         move.w 10(sp),d0
    28ba:	|     |     /-- bpl.s 28c0 <CstPasteChar+0x4e2>
    28bc:	|     |     |   addi.w #15,d0
    28c0:	|     |     \-> asr.w #4,d0
    28c2:	|     |         movea.w d0,a0
    28c4:	|     |         move.l a0,d0
    28c6:	|     |         add.l a0,d0
    28c8:	|     |         move.l d1,d2
    28ca:	|     |         add.l d0,d2
    28cc:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    28d0:	|     |         move.w 10(sp),d0
    28d4:	|     |         andi.w #-32753,d0
    28d8:	|     |     /-- bpl.s 28e2 <CstPasteChar+0x504>
    28da:	|     |     |   subq.w #1,d0
    28dc:	|     |     |   ori.w #-16,d0
    28e0:	|     |     |   addq.w #1,d0
    28e2:	|     |     \-> ext.l d0
    28e4:	|     |         moveq #12,d1
    28e6:	|     |         lsl.l d1,d0
    28e8:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28ec:	|     |         movea.l 84(sp),a0
    28f0:	|     |         move.l (a0),d0
    28f2:	|     |         movea.l d0,a0
    28f4:	|     |         cmpa.w #0,a0
    28f8:	|     |     /-- bge.s 28fe <CstPasteChar+0x520>
    28fa:	|     |     |   lea 15(a0),a0
    28fe:	|     |     \-> move.l a0,d0
    2900:	|     |         asr.l #4,d0
    2902:	|     |         move.l d0,d0
    2904:	|     |         add.w 76(sp),d0
    2908:	|     |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    290e:	|     |         move.l a0,d1
    2910:	|     |         addq.l #2,d1
    2912:	|     |         move.l d1,1c846 <CstBackDropBufferApplyCursor>
    2918:	|     |         add.w 78(sp),d0
    291c:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    291e:	|     |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2924:	|     |         move.l a0,d0
    2926:	|     |         addq.l #2,d0
    2928:	|     |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    292e:	|     |         move.l 44(sp),d0
    2932:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2934:	|     |         move.w 10(sp),d0
    2938:	|     |     /-- bpl.s 293e <CstPasteChar+0x560>
    293a:	|     |     |   addi.w #15,d0
    293e:	|     |     \-> asr.w #4,d0
    2940:	|     |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2946:	|     |         move.l a0,d1
    2948:	|     |         addq.l #2,d1
    294a:	|     |         move.l d1,1c846 <CstBackDropBufferApplyCursor>
    2950:	|     |         add.w d0,d0
    2952:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2954:	|     |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    295a:	|     |         move.l a0,d0
    295c:	|     |         addq.l #2,d0
    295e:	|     |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    2964:	|     |         move.l 52(sp),d0
    2968:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    296a:	|     |         movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2970:	|     |         move.l a0,d0
    2972:	|     |         addq.l #2,d0
    2974:	|     |         move.l d0,1c846 <CstBackDropBufferApplyCursor>
    297a:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    297c:	|     \-------> moveq #0,d0
    297e:	|               move.w 74(sp),d0
    2982:	|               moveq #0,d1
    2984:	|               not.w d1
    2986:	|               asr.l d0,d1
    2988:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    298c:	|               moveq #0,d1
    298e:	|               move.w 76(sp),d1
    2992:	|               moveq #0,d0
    2994:	|               move.w 78(sp),d0
    2998:	|               sub.l d0,d1
    299a:	|               move.l d1,d0
    299c:	|               add.w d0,d0
    299e:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29a2:	|               move.l 1c856 <winWidth>,d0
    29a8:	|               lsr.l #3,d0
    29aa:	|               move.l d0,d2
    29ac:	|               move.w 76(sp),d1
    29b0:	|               sub.w 78(sp),d1
    29b4:	|               move.l 40(sp),d0
    29b8:	|               sub.w d0,d1
    29ba:	|               move.w d1,d0
    29bc:	|               add.w d1,d0
    29be:	|               add.w d2,d0
    29c0:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29c4:	|               move.l 1c856 <winWidth>,d0
    29ca:	|               lsr.l #3,d0
    29cc:	|               move.l d0,d2
    29ce:	|               move.w 76(sp),d1
    29d2:	|               sub.w 78(sp),d1
    29d6:	|               move.l 40(sp),d0
    29da:	|               sub.w d0,d1
    29dc:	|               move.w d1,d0
    29de:	|               add.w d1,d0
    29e0:	|               add.w d2,d0
    29e2:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    29e6:	|               move.l #14675968,16(sp)
  WaitBlit();
    29ee:	|               move.l 1c90e <GfxBase>,d0
    29f4:	|               movea.l d0,a6
    29f6:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    29fa:	|               movea.l 16(sp),a0
    29fe:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a04:	|               movea.l 16(sp),a0
    2a08:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2a0e:	|               move.w 24(sp),d0
    2a12:	|               movea.l 16(sp),a0
    2a16:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2a1a:	|               move.w 22(sp),d0
    2a1e:	|               movea.l 16(sp),a0
    2a22:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a26:	|               move.w 20(sp),d0
    2a2a:	|               movea.l 16(sp),a0
    2a2e:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a32:	|               move.l 1c856 <winWidth>,d0
    2a38:	|               lsr.l #3,d0
    2a3a:	|               move.l d0,d1
    2a3c:	|               move.l 1c85a <winHeight>,d0
    2a42:	|               move.l d0,d0
    2a44:	|               move.w d1,d2
    2a46:	|               muls.w d0,d2
    2a48:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a4c:	|               move.w 1c81c <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a54:	|               move.w 38(sp),d0
    2a58:	|               andi.w #1,d0
    2a5c:	|               move.w d0,12(sp)
  if(tmp2) {
    2a60:	|        /----- beq.s 2a6a <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2a62:	|        |      move.w #3066,36(sp)
    2a68:	|        |  /-- bra.s 2a70 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2a6a:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a70:	|           \-> clr.l 32(sp)
    2a74:	|     /-------- bra.w 2b12 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2a78:	|  /--|-------> move.l 56(sp),d0
    2a7c:	|  |  |         add.w 36(sp),d0
    2a80:	|  |  |         movea.l 16(sp),a0
    2a84:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2a88:	|  |  |         move.l 68(sp),d0
    2a8c:	|  |  |         movea.l 16(sp),a0
    2a90:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2a94:	|  |  |         move.l 64(sp),d0
    2a98:	|  |  |         movea.l 16(sp),a0
    2a9c:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2aa0:	|  |  |         move.l 60(sp),d0
    2aa4:	|  |  |         movea.l 16(sp),a0
    2aa8:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2aac:	|  |  |         move.l 44(sp),d0
    2ab0:	|  |  |         lsl.w #6,d0
    2ab2:	|  |  |         move.l 40(sp),d1
    2ab6:	|  |  |         add.w d1,d0
    2ab8:	|  |  |         sub.w 76(sp),d0
    2abc:	|  |  |         add.w 78(sp),d0
    2ac0:	|  |  |         movea.l 16(sp),a0
    2ac4:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2ac8:	|  |  |         moveq #0,d0
    2aca:	|  |  |         move.w 14(sp),d0
    2ace:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2ad2:	|  |  |         moveq #0,d0
    2ad4:	|  |  |         move.w 14(sp),d0
    2ad8:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2adc:	|  |  |         move.w 38(sp),d0
    2ae0:	|  |  |         lsr.w #1,d0
    2ae2:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2ae6:	|  |  |         move.w 38(sp),d1
    2aea:	|  |  |         andi.w #1,d1
    2aee:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2af2:	|  |  |  /----- beq.s 2afc <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2af4:	|  |  |  |      move.w #3066,36(sp)
    2afa:	|  |  |  |  /-- bra.s 2b02 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2afc:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2b02:	|  |  |     \-> move.l 1c90e <GfxBase>,d0
    2b08:	|  |  |         movea.l d0,a6
    2b0a:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b0e:	|  |  |         addq.l #1,32(sp)
    2b12:	|  |  \-------> moveq #4,d2
    2b14:	|  |            cmp.l 32(sp),d2
    2b18:	|  \----------- bge.w 2a78 <CstPasteChar+0x69a>
 
  }   
}
    2b1c:	\-------------> move.l (sp)+,d2
    2b1e:	                movea.l (sp)+,a6
    2b20:	                lea 72(sp),sp
    2b24:	                rts

00002b26 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b26:	                   lea -24(sp),sp
    2b2a:	                   move.l a6,-(sp)
    2b2c:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b2e:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b36:	                   move.l 1c83e <CstCleanupQueueDrawBuffer>,d0
    2b3c:	/----------------- beq.w 2d44 <CstRestoreScreen+0x21e>
    2b40:	|                  move.l 1c836 <CstDrawBuffer>,d0
    2b46:	+----------------- beq.w 2d44 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2b4a:	|                  move.l 1c90e <GfxBase>,d0
    2b50:	|                  movea.l d0,a6
    2b52:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b56:	|                  movea.l 16(sp),a0
    2b5a:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b60:	|                  movea.l 16(sp),a0
    2b64:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b6a:	|                  movea.l 16(sp),a0
    2b6e:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2b74:	|     /----------- bra.w 2d38 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2b78:	|  /--|----------> movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2b7e:	|  |  |            move.l 4(a0),d0
    2b82:	|  |  |  /-------- beq.w 2d06 <CstRestoreScreen+0x1e0>
    2b86:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2b8c:	|  |  |  |         movea.l 4(a0),a0
    2b90:	|  |  |  |         move.l 16(a0),d0
    2b94:	|  |  |  |         moveq #2,d1
    2b96:	|  |  |  |         cmp.l d0,d1
    2b98:	|  |  |  +-------- blt.w 2d06 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b9c:	|  |  |  |         move.l 1c856 <winWidth>,d0
    2ba2:	|  |  |  |         lsr.l #3,d0
    2ba4:	|  |  |  |         move.l d0,d1
    2ba6:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2bac:	|  |  |  |         move.w 8(a0),d0
    2bb0:	|  |  |  |         add.w d0,d0
    2bb2:	|  |  |  |         sub.w d0,d1
    2bb4:	|  |  |  |         movea.l 16(sp),a0
    2bb8:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bbc:	|  |  |  |         move.l 1c856 <winWidth>,d0
    2bc2:	|  |  |  |         lsr.l #3,d0
    2bc4:	|  |  |  |         move.l d0,d1
    2bc6:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2bcc:	|  |  |  |         move.w 8(a0),d0
    2bd0:	|  |  |  |         add.w d0,d0
    2bd2:	|  |  |  |         sub.w d0,d1
    2bd4:	|  |  |  |         movea.l 16(sp),a0
    2bd8:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2bdc:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2be2:	|  |  |  |         move.w 14(a0),d0
    2be6:	|  |  |  |         move.w d0,d0
    2be8:	|  |  |  |         andi.l #65535,d0
    2bee:	|  |  |  |         move.l 1c856 <winWidth>,d1
    2bf4:	|  |  |  |         move.l d1,-(sp)
    2bf6:	|  |  |  |         move.l d0,-(sp)
    2bf8:	|  |  |  |         jsr 17b40 <__mulsi3>
    2bfe:	|  |  |  |         addq.l #8,sp
    2c00:	|  |  |  |         move.l d0,d1
    2c02:	|  |  |  |         lsr.l #3,d1
    2c04:	|  |  |  |         move.l 1c824 <CstBackDrop>,d0
    2c0a:	|  |  |  |         add.l d0,d1
    2c0c:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2c12:	|  |  |  |         move.w 12(a0),d0
    2c16:	|  |  |  |         move.w d0,d0
    2c18:	|  |  |  |         andi.l #65535,d0
    2c1e:	|  |  |  |         move.l d1,d2
    2c20:	|  |  |  |         add.l d0,d2
    2c22:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c26:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2c2c:	|  |  |  |         move.w 14(a0),d0
    2c30:	|  |  |  |         move.w d0,d0
    2c32:	|  |  |  |         andi.l #65535,d0
    2c38:	|  |  |  |         move.l 1c856 <winWidth>,d1
    2c3e:	|  |  |  |         move.l d1,-(sp)
    2c40:	|  |  |  |         move.l d0,-(sp)
    2c42:	|  |  |  |         jsr 17b40 <__mulsi3>
    2c48:	|  |  |  |         addq.l #8,sp
    2c4a:	|  |  |  |         move.l d0,d1
    2c4c:	|  |  |  |         lsr.l #3,d1
    2c4e:	|  |  |  |         move.l 1c836 <CstDrawBuffer>,d0
    2c54:	|  |  |  |         add.l d0,d1
    2c56:	|  |  |  |         movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2c5c:	|  |  |  |         move.w 12(a0),d0
    2c60:	|  |  |  |         move.w d0,d0
    2c62:	|  |  |  |         andi.l #65535,d0
    2c68:	|  |  |  |         move.l d1,d2
    2c6a:	|  |  |  |         add.l d0,d2
    2c6c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c70:	|  |  |  |         clr.l 20(sp)
    2c74:	|  |  |  |     /-- bra.w 2cfc <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2c78:	|  |  |  |  /--|-> move.l 28(sp),d0
    2c7c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c80:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2c84:	|  |  |  |  |  |   move.l 24(sp),d0
    2c88:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c8c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2c90:	|  |  |  |  |  |   movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2c96:	|  |  |  |  |  |   move.w 10(a0),d0
    2c9a:	|  |  |  |  |  |   lsl.w #6,d0
    2c9c:	|  |  |  |  |  |   movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2ca2:	|  |  |  |  |  |   move.w 8(a0),d1
    2ca6:	|  |  |  |  |  |   add.w d1,d0
    2ca8:	|  |  |  |  |  |   movea.l 16(sp),a0
    2cac:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2cb0:	|  |  |  |  |  |   move.l 1c856 <winWidth>,d0
    2cb6:	|  |  |  |  |  |   lsr.l #3,d0
    2cb8:	|  |  |  |  |  |   move.l 1c85a <winHeight>,d1
    2cbe:	|  |  |  |  |  |   move.l d1,-(sp)
    2cc0:	|  |  |  |  |  |   move.l d0,-(sp)
    2cc2:	|  |  |  |  |  |   jsr 17b40 <__mulsi3>
    2cc8:	|  |  |  |  |  |   addq.l #8,sp
    2cca:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2cce:	|  |  |  |  |  |   move.l 1c856 <winWidth>,d0
    2cd4:	|  |  |  |  |  |   lsr.l #3,d0
    2cd6:	|  |  |  |  |  |   move.l 1c85a <winHeight>,d1
    2cdc:	|  |  |  |  |  |   move.l d1,-(sp)
    2cde:	|  |  |  |  |  |   move.l d0,-(sp)
    2ce0:	|  |  |  |  |  |   jsr 17b40 <__mulsi3>
    2ce6:	|  |  |  |  |  |   addq.l #8,sp
    2ce8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2cec:	|  |  |  |  |  |   move.l 1c90e <GfxBase>,d0
    2cf2:	|  |  |  |  |  |   movea.l d0,a6
    2cf4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cf8:	|  |  |  |  |  |   addq.l #1,20(sp)
    2cfc:	|  |  |  |  |  \-> moveq #4,d0
    2cfe:	|  |  |  |  |      cmp.l 20(sp),d0
    2d02:	|  |  |  |  \----- bge.w 2c78 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d06:	|  |  |  \-------> move.l 1c83e <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2d0e:	|  |  |            movea.l 1c83e <CstCleanupQueueDrawBuffer>,a0
    2d14:	|  |  |            move.l 16(a0),d0
    2d18:	|  |  |            move.l d0,1c83e <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2d1e:	|  |  |            move.l 12(sp),8(sp)
    2d24:	|  |  |            move.l 1c902 <SysBase>,d0
    2d2a:	|  |  |            movea.l d0,a6
    2d2c:	|  |  |            movea.l 8(sp),a1
    2d30:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d34:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d38:	|  |  \----------> move.l 1c83e <CstCleanupQueueDrawBuffer>,d0
    2d3e:	|  \-------------- bne.w 2b78 <CstRestoreScreen+0x52>
    2d42:	|              /-- bra.s 2d46 <CstRestoreScreen+0x220>
    return;
    2d44:	\--------------|-> nop
  }
  
}
    2d46:	               \-> move.l (sp)+,d2
    2d48:	                   movea.l (sp)+,a6
    2d4a:	                   lea 24(sp),sp
    2d4e:	                   rts

00002d50 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d50:	                                                                               lea -44(sp),sp
    2d54:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2d58:	                                                                               movea.l 92(sp),a2
    2d5c:	                                                                               move.l 96(sp),82(sp)
    2d62:	                                                                               move.l 100(sp),d6
    2d66:	                                                                               movea.l 104(sp),a4
    2d6a:	                                                                               move.l 108(sp),d2
    2d6e:	                                                                               move.w d6,d5
    2d70:	                                                                               move.w a4,d3
    2d72:	                                                                               move.w d2,50(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2d76:	                                                                               movea.w a4,a5
    2d78:	                                                                               move.w d6,d4
    2d7a:	                                                                               ext.l d4
    2d7c:	                                                                               move.l a5,-(sp)
    2d7e:	                                                                               move.l d4,-(sp)
    2d80:	                                                                               move.l 1c962 <zBuffer>,-(sp)
    2d86:	                                                                               move.l a2,-(sp)
    2d88:	                                                                               jsr 14e8 <CstDrawZBuffer>
    2d8e:	                                                                               move.l d0,84(sp)

  UWORD *destination = 0;
  switch(destinationtype)
    2d92:	                                                                               lea 16(sp),sp
    2d96:	                                                                               cmpi.w #1,50(sp)
    2d9c:	                                                /----------------------------- beq.w 31a6 <CstScaleSprite+0x456>
    2da0:	                                                |                              cmpi.w #2,50(sp)
    2da6:	                                                |                       /----- beq.w 306c <CstScaleSprite+0x31c>
    2daa:	                                                |                       |      suba.l a6,a6
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2dac:	                                                |  /--------------------|----> move.l 4(a2),d1
    2db0:	                                                |  |                    |      move.l a5,d0
    2db2:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2db4:	                                                |  |                    |      tst.w d3
    2db6:	                                                |  |           /--------|----- blt.w 3088 <CstScaleSprite+0x338>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2dba:	                                                |  |           |  /-----|----> movea.l 1c85a <winHeight>,a0
    2dc0:	                                                |  |           |  |     |      cmp.l a0,d0
    2dc2:	                                                |  |  /--------|--|-----|----- ble.w 31b0 <CstScaleSprite+0x460>
    if(y  > (int) winHeight) {
    2dc6:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2dc8:	                     /--------------------------|--|--|--------|--|-----|----- blt.w 326e <CstScaleSprite+0x51e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    ystartsrc = 0;
    blitheight = winHeight-y;
    2dcc:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2dce:	                     |                          |  |  |        |  |     |      move.l a0,74(sp)
    ystartsrc = 0;
    2dd2:	                     |                          |  |  |        |  |     |      moveq #0,d7


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2dd4:	                     |                          |  |  |  /-----|--|-----|----> move.l (a2),d3
    2dd6:	                     |                          |  |  |  |     |  |     |      move.l d4,d0
    2dd8:	                     |                          |  |  |  |     |  |     |      add.l d3,d0
  if( x < 0) 
    2dda:	                     |                          |  |  |  |     |  |     |      tst.w d5
    2ddc:	                     |                          |  |  |  |     |  |  /--|----- blt.w 30a4 <CstScaleSprite+0x354>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2de0:	                     |                          |  |  |  |     |  |  |  |  /-> move.l 1c856 <winWidth>,d5
    2de6:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d5,d0
    2de8:	                     |                          |  |  |  |  /--|--|--|--|--|-- ble.w 31ba <CstScaleSprite+0x46a>

    if(x - single->width > (int) winWidth)
    2dec:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d4
    2dee:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.l d5,d4
    2df0:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 326e <CstScaleSprite+0x51e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2df4:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d5,d0
    2df6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2df8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,64(sp)
    2dfc:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2dfe:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l #97088,d2
    2e04:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2e06:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2e08:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a0
    2e0a:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a0)
    2e0c:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2e0e:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2e10:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 68(sp),d7
    2e14:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2e16:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2e1a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2e1e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2e20:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d5,-(sp)
    2e22:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a1
    2e24:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a1)
    2e26:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2e28:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2e2a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d1
    2e2c:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d1
    2e2e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d1,a0
    2e30:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2e32:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a6
    2e34:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l d0,a6
    2e36:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a6,54(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2e3a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2e3c:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d6,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2e3e:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #0,d2
    2e40:	                     |                          |  |  |  |  |  |  |  |  |  |   not.w d2
    2e42:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d2
    2e44:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2e48:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2e4e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d1,d2
    2e50:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d1,d2
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2e52:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d4
    2e56:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    2e58:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d1
    2e5a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2e5c:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2e60:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    2e64:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d0
    2e66:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d1,d0
    2e68:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    2e6c:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpi.w #1,50(sp)
    2e72:	            /--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3598 <CstScaleSprite+0x848>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2e76:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    2e7c:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d3,d0
    2e7e:	   /--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 364e <CstScaleSprite+0x8fe>
    2e82:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2e84:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d1
    2e88:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d1
    2e8a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2e8c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2e92:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2e96:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2e9a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2e9e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1c846 <CstBackDropBufferApplyCursor>
    2ea4:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2ea8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2eae:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
    2eb0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l #116994,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2eb8:	/--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d5
    2eba:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d5
    2ebc:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d3
    2ebe:	|  |  /-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3486 <CstScaleSprite+0x736>
    2ec2:	|  |  |  /--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d3
    2ec4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d3,d5
  WaitBlit();
    2ec6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lea 1c90e <GfxBase>,a4
    2ecc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2ece:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2ed2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),dff044 <gcc8_c_support.c.1fed348d+0xdb3d8d>
  custom->bltalwm = bltalwm;
    2eda:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff046 <gcc8_c_support.c.1fed348d+0xdb3d8f>
  custom->bltamod = bltamod;
    2ee2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff064 <gcc8_c_support.c.1fed348d+0xdb3dad>
  custom->bltbmod = bltbmod;
    2ee8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff062 <gcc8_c_support.c.1fed348d+0xdb3dab>
  custom->bltcmod = bltcmod;
    2eee:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.1fed348d+0xdb3da9>
  custom->bltdmod = bltdmod;
    2ef4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.1fed348d+0xdb3daf>
  custom->bltcon0 = bltcon0;
    2efa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 78(sp),dff040 <gcc8_c_support.c.1fed348d+0xdb3d89>
  custom->bltcon1 = bltcon1;  
    2f02:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 80(sp),dff042 <gcc8_c_support.c.1fed348d+0xdb3d8b>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2f0a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f0c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),d5
    2f10:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2f12:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d4
    2f14:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d4
    2f16:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d4
    bltbpt += bltbptplus;
    2f1a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    2f20:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1c856 <winWidth>,d3
    2f26:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d3
    2f28:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1c85c <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    2f2e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    2f34:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    2f3a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    2f42:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    2f4a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f52:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f54:	|  |  |  |  |  /-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 338a <CstScaleSprite+0x63a>
    2f58:	|  |  |  |  |  |  /--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f5a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2f5c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2f5e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2f60:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    2f66:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    2f6a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2f6c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),d6
    2f70:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    bltdpt += bltcptplus;
    WaitBlit();
    2f72:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2f74:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f78:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2f7a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    2f80:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    2f86:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    2f8c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f92:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f94:	|  |  |  |  |  |  |  |                 /--------|--|--|--|--|--|--|--|--|--|-- blt.w 33ce <CstScaleSprite+0x67e>
    2f98:	|  |  |  |  |  |  |  |                 |     /--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f9a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2f9c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2f9e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2fa0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    2fa6:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2fa8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2faa:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2fac:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2fb0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2fb2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    2fb8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    2fbe:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    2fc4:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2fca:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2fcc:	|  |  |  |  |  |  |  |           /-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 340a <CstScaleSprite+0x6ba>
    2fd0:	|  |  |  |  |  |  |  |           |     |  /--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2fd2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2fd4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2fd6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2fd8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    2fde:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2fe0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2fe2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2fe4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2fe8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2fea:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    2ff0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    2ff6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    2ffc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3002:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    3004:	|  |  |  |  |  |  |  |     /-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3446 <CstScaleSprite+0x6f6>
    3008:	|  |  |  |  |  |  |  |     |     |  /--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    300a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    300c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    300e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    3010:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    3016:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    bltcpt += bltcptplus;
    3018:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d6,d3
    WaitBlit();
    301a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    301c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3020:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3022:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    3028:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    302e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    3034:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    303a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    303c:	|  |  |  |  |  |  |  |  /--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 335a <CstScaleSprite+0x60a>
    3040:	|  |  |  |  |  |  |  |  |  |  /--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d2
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d2
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    WaitBlit();
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

  FreeVec(mask);
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 50(sp),a0
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a1
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
}
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-> move.w #2,1c830 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1c824 <CstBackDrop>,a6
    if(y + single->height < 0) {
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d3
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----|-- bge.w 2dba <CstScaleSprite+0x6a>
    if(y + single->height < 0) {
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-----|-----|-> tst.l d0
    308a:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 326e <CstScaleSprite+0x51e>
    ystartsrc = y*-1;
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    blitheight = single->height+y;
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,74(sp)
    ystartdst = 0;
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   suba.l a5,a5
    if(x + single->width < 0) {
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d3
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d4,d0
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d3,d0
  if( x < 0) 
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d5
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     \-- bge.w 2de0 <CstScaleSprite+0x90>
    if(x + single->width < 0) {
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        \-------> tst.l d0
    30a6:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 326e <CstScaleSprite+0x51e>
    cutwordssource = (x*-1)/16; 
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,58(sp)
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d4
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d4
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c856 <winWidth>,d5
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17b40 <__mulsi3>,a0
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,-(sp)
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,-(sp)
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a0,54(sp)
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a0)
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 46(sp),a0
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d4
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.w 3284 <CstScaleSprite+0x534>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a6,d0.l),a6
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a6,54(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 58(sp),d1
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,d1
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w #16,a1
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         suba.l d4,a1
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,d2
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    3102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,78(sp)
  custom->bltcon1 = bltcon1;  
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a1,d2
    3108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d0,d2
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,80(sp)
      extrawords = 1;
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 58(sp),a6
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a6
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,-(sp)
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d3,-(sp)
    311a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,54(sp)
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a0)
    3120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 68(sp),a0
    3128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a0
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,d7
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    312e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a6
    3132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a6,d0
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    313e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d4,d0
    3148:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 46(sp),d1
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d1,d4
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.w d1,d4
    if( destinationtype == SCREEN)
    3154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmpi.w #1,50(sp)
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  /----- beq.w 32e8 <CstScaleSprite+0x598>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  /-> movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d3,d0
    3166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 58(sp),d0
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    316e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 76(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    317a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    3182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1c846 <CstBackDropBufferApplyCursor>
    3188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    318c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 58(sp)
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l #116994,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d5
    319a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d4,d5
    319c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d3
    319e:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2ec2 <CstScaleSprite+0x172>
    31a2:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3486 <CstScaleSprite+0x736>
      destination = (UWORD *) CstDrawBuffer;      
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--------|--|--|-> movea.l 1c836 <CstDrawBuffer>,a6
      break;
    31ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \--|--|--|--------|--|--|-- bra.w 2dac <CstScaleSprite+0x5c>
    blitheight = single->height;
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        \--|--|--------|--|--|-> move.l d1,74(sp)
    ystartsrc = 0;
    31b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   moveq #0,d7
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \--|--------|--|--|-- bra.w 2dd4 <CstScaleSprite+0x84>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    31ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \--------|--|--|-> lea 17b40 <__mulsi3>,a3
    31c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d7,-(sp)
    31c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    31c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    31ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 68(sp),d7
    31ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    31d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a5,-(sp)
    31da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d5,-(sp)
    31dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    31de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    31e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    31e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d4
    31e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d4
    31e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d4,a0
    31e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    31ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a6
    31ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l d0,a6
    31ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a6,54(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    31f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    31fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    31fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d1
    31fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
  custom->bltcon0 = bltcon0;
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    3204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    320a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    3210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmpi.w #1,50(sp)
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    /--|--|--|-- beq.w 3522 <CstScaleSprite+0x7d2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    321a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d3,d0
    3222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /--------|--|--|--|-- bmi.w 360c <CstScaleSprite+0x8bc>
    3226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    322a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    322c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    323a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1c846 <CstBackDropBufferApplyCursor>
    3244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    3248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,66(sp)
    324e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    3254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a3,a3
    extrawords = 1;
    3256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
    3258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l #116994,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /--|--------|--|--|--|-> lsr.l #3,d5
    3262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d4,d5
    3264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d3
    3266:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2ec2 <CstScaleSprite+0x172>
    326a:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3486 <CstScaleSprite+0x736>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    326e:	|  |  |  |  |  |  |  \--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98248,92(sp)
}
    3276:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    327a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    327e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 171b4 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3284:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  \--|--|-> adda.l d0,a6
    3286:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a6,54(sp)
    328a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 58(sp),d1
    328e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 80(sp)
    3292:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,78(sp)
      extrawords = 0;
    3298:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    329a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 58(sp),a6
    329e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a6
    32a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d7,-(sp)
    32a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d3,-(sp)
    32a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,54(sp)
    32a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a0)
    32aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    32ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    32ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 68(sp),a0
    32b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a0
    32b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,d7
    32b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    32b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a6
    32bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a6,d0
    32be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    32c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    32c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    32cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    32ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    32d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d4,d0
    32d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    32d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 46(sp),d1
    32da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d1,d4
    32dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.w d1,d4
    if( destinationtype == SCREEN)
    32de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmpi.w #1,50(sp)
    32e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  \-- bne.w 315e <CstScaleSprite+0x40e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    32e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     \----> move.l 1c83e <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    32ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l #116994,50(sp)
    32f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            lea 1c902 <SysBase>,a1
    32fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l (a1),a6
    32fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3300:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3302:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    3306:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    3308:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1c83e <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    330e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3312:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3314:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3318:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    331e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d3
    3320:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,d0
    3322:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     /--|----------- bmi.w 368c <CstScaleSprite+0x93c>
    3326:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    3328:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 58(sp),d0
    332c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    332e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3332:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3338:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    333c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3342:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1c856 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    3348:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 58(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    334c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  /--|--|----------> lsr.l #3,d5
    334e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d4,d5
    3350:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d3
    3352:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2ec2 <CstScaleSprite+0x172>
    3356:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3486 <CstScaleSprite+0x736>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    335a:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    335c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    335e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3360:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3362:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d2
    3364:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d2
    3366:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    WaitBlit();
    336c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    336e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
  FreeVec(mask);
    3372:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 50(sp),a0
    3376:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3378:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 68(sp),a1
    337c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -690(a6)
}
    3380:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    3384:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3388:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    338a:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    338c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    338e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3390:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    3392:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d0
    3394:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d0
    3396:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    339c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 60(sp),a5
    33a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    33a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l 54(sp),d6
    33a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d3,d6
    WaitBlit();
    33a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    33aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    33b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    33bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    33c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    33ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  \--------|--|--|--|--|----------- bge.w 2f98 <CstScaleSprite+0x248>
    33ce:	|  |  |  |  |  |  |     |  |  |  |  |  \--|-----------|--|--|--|--|----------> moveq #15,d1
    33d0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    33d2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    33d4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    33d6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d5,d0
    33d8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w a3,d0
    33da:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    33e0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    33e2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d3,d6
    WaitBlit();
    33e4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a4),a6
    33e6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33ea:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33ec:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    33f2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    33f8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    33fe:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3404:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    3406:	|  |  |  |  |  |  |     |  |  |  |  |     \-----------|--|--|--|--|----------- bge.w 2fd0 <CstScaleSprite+0x280>
    340a:	|  |  |  |  |  |  |     |  |  |  \--|-----------------|--|--|--|--|----------> moveq #15,d1
    340c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    340e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3410:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    3412:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d5,d0
    3414:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w a3,d0
    3416:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    341c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    341e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d3,d6
    WaitBlit();
    3420:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a4),a6
    3422:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3426:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3428:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    342e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    3434:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    343a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3440:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    3442:	|  |  |  |  |  |  |     |  |  |     \-----------------|--|--|--|--|----------- bge.w 3008 <CstScaleSprite+0x2b8>
    3446:	|  |  |  |  |  |  |     |  \--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3448:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    344a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    344c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    344e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d5,d0
    3450:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w a3,d0
    3452:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3da1>
    bltbpt += bltbptplus;
    3458:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    bltcpt += bltcptplus;
    345a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d6,d3
    WaitBlit();
    345c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a4),a6
    345e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3462:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3464:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    346a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    3470:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    3476:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    347c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    347e:	|  |  |  |  |  |  |     |     \-----------------------|--|--|--|--|----------- bge.w 3040 <CstScaleSprite+0x2f0>
    3482:	|  |  |  |  |  |  |     \-----------------------------|--|--|--|--|----------- bra.w 335a <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3486:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d3
    3488:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d3
    348a:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d3,d5
  WaitBlit();
    348c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lea 1c90e <GfxBase>,a4
    3492:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a4),a6
    3494:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3498:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 66(sp),dff044 <gcc8_c_support.c.1fed348d+0xdb3d8d>
  custom->bltalwm = bltalwm;
    34a0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 58(sp),dff046 <gcc8_c_support.c.1fed348d+0xdb3d8f>
  custom->bltamod = bltamod;
    34a8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff064 <gcc8_c_support.c.1fed348d+0xdb3dad>
  custom->bltbmod = bltbmod;
    34ae:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff062 <gcc8_c_support.c.1fed348d+0xdb3dab>
  custom->bltcmod = bltcmod;
    34b4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff060 <gcc8_c_support.c.1fed348d+0xdb3da9>
  custom->bltdmod = bltdmod;
    34ba:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff066 <gcc8_c_support.c.1fed348d+0xdb3daf>
  custom->bltcon0 = bltcon0;
    34c0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 78(sp),dff040 <gcc8_c_support.c.1fed348d+0xdb3d89>
  custom->bltcon1 = bltcon1;  
    34c8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 80(sp),dff042 <gcc8_c_support.c.1fed348d+0xdb3d8b>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    34d0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    34d2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),d5
    34d6:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    34d8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d4
    34da:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d4
    34dc:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d4
    bltbpt += bltbptplus;
    34e0:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    34e6:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1c856 <winWidth>,d3
    34ec:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d3
    34ee:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1c85c <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    34f4:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    34fa:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d99>
    custom->bltbpt = (APTR) bltbpt;
    3500:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 60(sp),dff04c <gcc8_c_support.c.1fed348d+0xdb3d95>
    custom->bltcpt = (APTR) bltcpt;
    3508:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff048 <gcc8_c_support.c.1fed348d+0xdb3d91>
    custom->bltdpt = (APTR) bltdpt;
    3510:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d9d>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3518:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    351a:	|  |  |  |  |  |  \-----------------------------------|--|--|--|--|----------- bge.w 2f58 <CstScaleSprite+0x208>
    351e:	|  |  |  |  |  \--------------------------------------|--|--|--|--|----------- bra.w 338a <CstScaleSprite+0x63a>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3522:	|  |  |  |  |                                         |  |  |  |  \----------> move.l 1c83e <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3528:	|  |  |  |  |                                         |  |  |  |               move.l #116994,50(sp)
    3530:	|  |  |  |  |                                         |  |  |  |               lea 1c902 <SysBase>,a0
    3536:	|  |  |  |  |                                         |  |  |  |               movea.l (a0),a6
    3538:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    353a:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    353c:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    3540:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    3542:	|  |  |  |  |                                         |  |  |  |               move.l d0,1c83e <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3548:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    354c:	|  |  |  |  |                                         |  |  |  |               move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    354e:	|  |  |  |  |                                         |  |  |  |               move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3552:	|  |  |  |  |                                         |  |  |  |               move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3558:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d3
    355a:	|  |  |  |  |                                         |  |  |  |               move.l d3,d0
    355c:	|  |  |  |  |                                         |  |  |  |     /-------- bmi.w 36ba <CstScaleSprite+0x96a>
    3560:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3562:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    3564:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3568:	|  |  |  |  |                                         |  |  |  |     |         move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    356e:	|  |  |  |  |                                         |  |  |  |     |         move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3572:	|  |  |  |  |                                         |  |  |  |     |         move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3576:	|  |  |  |  |                                         |  |  |  |     |         move.l 1c856 <winWidth>,d5
    357c:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,66(sp)
    3582:	|  |  |  |  |                                         |  |  |  |     |         moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3584:	|  |  |  |  |                                         |  |  |  |     |         clr.w 58(sp)
    cutwordssource = 0;
    3588:	|  |  |  |  |                                         |  |  |  |     |         suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    358a:	|  |  |  |  |                                         |  |  |  |  /--|-------> lsr.l #3,d5
    358c:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d4,d5
    358e:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d3
    3590:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2ec2 <CstScaleSprite+0x172>
    3594:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3486 <CstScaleSprite+0x736>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3598:	|  |  |  |  \-----------------------------------------|--|--|--|--|--|-------> move.l 1c83e <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    359e:	|  |  |  |                                            |  |  |  |  |  |         move.l #116994,50(sp)
    35a6:	|  |  |  |                                            |  |  |  |  |  |         lea 1c902 <SysBase>,a0
    35ac:	|  |  |  |                                            |  |  |  |  |  |         movea.l (a0),a6
    35ae:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    35b0:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    35b2:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    35b6:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    35b8:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1c83e <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    35be:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    35c2:	|  |  |  |                                            |  |  |  |  |  |         move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    35c4:	|  |  |  |                                            |  |  |  |  |  |         move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    35c8:	|  |  |  |                                            |  |  |  |  |  |         move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    35ce:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d3
    35d0:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,d0
    35d2:	|  |  |  |                                            |  |  |  |  |  |     /-- bmi.w 36ec <CstScaleSprite+0x99c>
    35d6:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    35d8:	|  |  |  |                                            |  |  |  |  |  |     |   movea.w 66(sp),a1
    35dc:	|  |  |  |                                            |  |  |  |  |  |     |   adda.w d0,a1
    35de:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    35e2:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    35e8:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    35ec:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35f0:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1c856 <winWidth>,d5
    35f6:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    35fc:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35fe:	|  |  |  |                                            |  |  |  |  |  |  /--|-> lsr.l #3,d5
    3600:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d4,d5
    3602:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d3
    3604:	|  |  |  \--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2ec2 <CstScaleSprite+0x172>
    3608:	|  |  \-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3486 <CstScaleSprite+0x736>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    360c:	|  |                                                  |  \--|--|--|--|--|--|-> moveq #15,d0
    360e:	|  |                                                  |     |  |  |  |  |  |   add.l d3,d0
    3610:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3612:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    3614:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3616:	|  |                                                  |     |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    361c:	|  |                                                  |     |  |  |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3620:	|  |                                                  |     |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3624:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    3628:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1c846 <CstBackDropBufferApplyCursor>
    362e:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3632:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,66(sp)
    3638:	|  |                                                  |     |  |  |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    363a:	|  |                                                  |     |  |  |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    363e:	|  |                                                  |     |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    3640:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    3642:	|  |                                                  |     |  |  |  |  |  |   move.l #116994,50(sp)
    364a:	|  |                                                  \-----|--|--|--|--|--|-- bra.w 3260 <CstScaleSprite+0x510>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    364e:	|  \--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    3650:	|                                                           |  |  |  |  |  |   add.l d3,d0
    3652:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    3654:	|                                                           |  |  |  |  |  |   move.w 66(sp),d1
    3658:	|                                                           |  |  |  |  |  |   add.w d0,d1
    365a:	|                                                           |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    365c:	|                                                           |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3662:	|                                                           |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3666:	|                                                           |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    366a:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    366e:	|                                                           |  |  |  |  |  |   move.l a1,1c846 <CstBackDropBufferApplyCursor>
    3674:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    3678:	|                                                           |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    367e:	|                                                           |  |  |  |  |  |   clr.w d2
    3680:	|                                                           |  |  |  |  |  |   move.l #116994,50(sp)
    3688:	\-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2eb8 <CstScaleSprite+0x168>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    368c:	                                                            |  \--|--|--|--|-> moveq #15,d0
    368e:	                                                            |     |  |  |  |   add.l d3,d0
    3690:	                                                            |     |  |  |  |   asr.l #4,d0
    3692:	                                                            |     |  |  |  |   add.w 58(sp),d0
    3696:	                                                            |     |  |  |  |   add.w d2,d0
    3698:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    369c:	                                                            |     |  |  |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    36a2:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36a6:	                                                            |     |  |  |  |   move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36ac:	                                                            |     |  |  |  |   move.l 1c856 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    36b2:	                                                            |     |  |  |  |   clr.w 58(sp)
    36b6:	                                                            \-----|--|--|--|-- bra.w 334c <CstScaleSprite+0x5fc>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36ba:	                                                                  |  \--|--|-> moveq #15,d0
    36bc:	                                                                  |     |  |   add.l d3,d0
    36be:	                                                                  |     |  |   asr.l #4,d0
    36c0:	                                                                  |     |  |   addq.w #1,d0
    36c2:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    36c6:	                                                                  |     |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36cc:	                                                                  |     |  |   move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36d0:	                                                                  |     |  |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36d4:	                                                                  |     |  |   move.l 1c856 <winWidth>,d5
    36da:	                                                                  |     |  |   move.w #-1,66(sp)
    36e0:	                                                                  |     |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    36e2:	                                                                  |     |  |   clr.w 58(sp)
    cutwordssource = 0;
    36e6:	                                                                  |     |  |   suba.l a3,a3
    36e8:	                                                                  \-----|--|-- bra.w 358a <CstScaleSprite+0x83a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    36ec:	                                                                        |  \-> moveq #15,d0
    36ee:	                                                                        |      add.l d3,d0
    36f0:	                                                                        |      asr.l #4,d0
    36f2:	                                                                        |      movea.w 66(sp),a1
    36f6:	                                                                        |      adda.w d0,a1
    36f8:	                                                                        |      move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    36fc:	                                                                        |      move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3702:	                                                                        |      move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3706:	                                                                        |      move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    370a:	                                                                        |      move.l 1c856 <winWidth>,d5
    3710:	                                                                        |      move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3716:	                                                                        |      clr.w d2
    3718:	                                                                        \----- bra.w 35fe <CstScaleSprite+0x8ae>

0000371c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    371c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    371e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3724:	move.l 8(sp),d0
    3728:	movea.l (sp),a0
    372a:	move.l d0,128(a0)
}
    372e:	nop
    3730:	addq.l #4,sp
    3732:	rts

00003734 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3734:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3738:	move.l 1c832 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3740:	move.l 1c836 <CstDrawBuffer>,d0
    3746:	move.l d0,1c832 <CstViewBuffer>
  CstDrawBuffer = tmp;
    374c:	move.l 16(sp),1c836 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3754:	move.l 1c83a <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    375c:	move.l 1c83e <CstCleanupQueueDrawBuffer>,d0
    3762:	move.l d0,1c83a <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3768:	move.l 12(sp),1c83e <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3770:	move.l 1c82c <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3778:	move.l 1c832 <CstViewBuffer>,d0
    377e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3782:	move.l 4(sp),d0
    3786:	clr.w d0
    3788:	swap d0
    378a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    378e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3792:	movea.w #118,a0
    3796:	adda.l 8(sp),a0
    379a:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    379c:	movea.w #114,a0
    37a0:	adda.l 8(sp),a0
    37a4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    37a8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    37b0:	move.l 4(sp),d0
    37b4:	clr.w d0
    37b6:	swap d0
    37b8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    37bc:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    37c0:	movea.w #126,a0
    37c4:	adda.l 8(sp),a0
    37c8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    37ca:	movea.w #122,a0
    37ce:	adda.l 8(sp),a0
    37d2:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    37d6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    37de:	move.l 4(sp),d0
    37e2:	clr.w d0
    37e4:	swap d0
    37e6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    37ea:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    37ee:	movea.l 8(sp),a0
    37f2:	lea 134(a0),a0
    37f6:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    37f8:	movea.l 8(sp),a0
    37fc:	lea 130(a0),a0
    3800:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3804:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    380c:	move.l 4(sp),d0
    3810:	clr.w d0
    3812:	swap d0
    3814:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3818:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    381c:	movea.l 8(sp),a0
    3820:	lea 142(a0),a0
    3824:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3826:	movea.l 8(sp),a0
    382a:	lea 138(a0),a0
    382e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3832:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    383a:	move.l 4(sp),d0
    383e:	clr.w d0
    3840:	swap d0
    3842:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3846:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    384a:	movea.l 8(sp),a0
    384e:	lea 150(a0),a0
    3852:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3854:	movea.l 8(sp),a0
    3858:	lea 146(a0),a0
    385c:	move.w 2(sp),(a0)

}
    3860:	nop
    3862:	lea 20(sp),sp
    3866:	rts

00003868 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3868:	          lea -56(sp),sp
    386c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    386e:	          pea 17ffb <PutChar+0x3a5>
    3874:	          jsr 171b4 <KPrintF>
    387a:	          addq.l #4,sp

  width = width / 8;
    387c:	          move.l 64(sp),d0
    3880:	      /-- bpl.s 3884 <CstReserveBackdrop+0x1c>
    3882:	      |   addq.l #7,d0
    3884:	      \-> asr.l #3,d0
    3886:	          move.l d0,64(sp)

  if( width < 40) 
    388a:	          moveq #39,d0
    388c:	          cmp.l 64(sp),d0
    3890:	      /-- blt.s 38a6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3892:	      |   pea 18015 <PutChar+0x3bf>
    3898:	      |   jsr 171b4 <KPrintF>
    389e:	      |   addq.l #4,sp
    return FALSE;
    38a0:	      |   clr.w d0
    38a2:	/-----|-- bra.w 3be8 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    38a6:	|     \-> pea 18053 <PutChar+0x3fd>
    38ac:	|         jsr 171b4 <KPrintF>
    38b2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    38b4:	|         move.l 64(sp),-(sp)
    38b8:	|         jsr fce <CstCreateCopperlist>
    38be:	|         addq.l #4,sp
    38c0:	|         move.l d0,1c82c <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    38c6:	|         pea 18073 <PutChar+0x41d>
    38cc:	|         jsr 171b4 <KPrintF>
    38d2:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    38d4:	|         move.l 64(sp),d1
    38d8:	|         move.l 68(sp),d0
    38dc:	|         muls.w d1,d0
    38de:	|         move.w d0,1c822 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    38e4:	|         move.w 1c822 <CstBackdropSizePlane>,d1
    38ea:	|         move.w d1,d0
    38ec:	|         add.w d0,d0
    38ee:	|         add.w d0,d0
    38f0:	|         add.w d1,d0
    38f2:	|         move.w d0,1c820 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    38f8:	|         move.w 1c820 <CstBackdropSize>,d0
    38fe:	|         move.w d0,d0
    3900:	|         andi.l #65535,d0
    3906:	|         move.l d0,48(sp)
    390a:	|         moveq #2,d1
    390c:	|         move.l d1,44(sp)
    3910:	|         move.l 1c902 <SysBase>,d0
    3916:	|         movea.l d0,a6
    3918:	|         move.l 48(sp),d0
    391c:	|         move.l 44(sp),d1
    3920:	|         jsr -684(a6)
    3924:	|         move.l d0,40(sp)
    3928:	|         move.l 40(sp),d0
    392c:	|         move.l d0,1c824 <CstBackDrop>
  if( !CstBackDrop)
    3932:	|         move.l 1c824 <CstBackDrop>,d0
    3938:	|     /-- bne.s 394e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    393a:	|     |   pea 1809a <PutChar+0x444>
    3940:	|     |   jsr 171b4 <KPrintF>
    3946:	|     |   addq.l #4,sp
    return FALSE;  
    3948:	|     |   clr.w d0
    394a:	+-----|-- bra.w 3be8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    394e:	|     \-> pea 180d2 <PutChar+0x47c>
    3954:	|         jsr 171b4 <KPrintF>
    395a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    395c:	|         move.l 1c824 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3964:	|         clr.l 52(sp)
    3968:	|     /-- bra.s 397e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    396a:	|  /--|-> move.l 56(sp),d0
    396e:	|  |  |   move.l d0,d1
    3970:	|  |  |   addq.l #4,d1
    3972:	|  |  |   move.l d1,56(sp)
    3976:	|  |  |   movea.l d0,a0
    3978:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    397a:	|  |  |   addq.l #1,52(sp)
    397e:	|  |  \-> move.w 1c820 <CstBackdropSize>,d0
    3984:	|  |      lsr.w #2,d0
    3986:	|  |      move.w d0,d0
    3988:	|  |      andi.l #65535,d0
    398e:	|  |      cmp.l 52(sp),d0
    3992:	|  \----- bgt.s 396a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3994:	|         move.w 1c820 <CstBackdropSize>,d0
    399a:	|         move.w d0,d0
    399c:	|         andi.l #65535,d0
    39a2:	|         move.l 64(sp),d1
    39a6:	|         add.l d1,d1
    39a8:	|         add.l d1,d0
    39aa:	|         move.l d0,36(sp)
    39ae:	|         moveq #2,d0
    39b0:	|         move.l d0,32(sp)
    39b4:	|         move.l 1c902 <SysBase>,d0
    39ba:	|         movea.l d0,a6
    39bc:	|         move.l 36(sp),d0
    39c0:	|         move.l 32(sp),d1
    39c4:	|         jsr -684(a6)
    39c8:	|         move.l d0,28(sp)
    39cc:	|         move.l 28(sp),d0
    39d0:	|         move.l d0,1c836 <CstDrawBuffer>
  if( !CstDrawBuffer)
    39d6:	|         move.l 1c836 <CstDrawBuffer>,d0
    39dc:	|     /-- bne.s 39f2 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    39de:	|     |   pea 180f8 <PutChar+0x4a2>
    39e4:	|     |   jsr 171b4 <KPrintF>
    39ea:	|     |   addq.l #4,sp
    return FALSE;  
    39ec:	|     |   clr.w d0
    39ee:	+-----|-- bra.w 3be8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    39f2:	|     \-> pea 18132 <PutChar+0x4dc>
    39f8:	|         jsr 171b4 <KPrintF>
    39fe:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3a00:	|         move.l #10000,24(sp)
    3a08:	|         clr.l 20(sp)
    3a0c:	|         move.l 1c902 <SysBase>,d0
    3a12:	|         movea.l d0,a6
    3a14:	|         move.l 24(sp),d0
    3a18:	|         move.l 20(sp),d1
    3a1c:	|         jsr -684(a6)
    3a20:	|         move.l d0,16(sp)
    3a24:	|         move.l 16(sp),d0
    3a28:	|         move.l d0,1c842 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3a2e:	|         move.l 1c842 <CstBackDropBufferApplyStart>,d0
    3a34:	|     /-- bne.s 3a4a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3a36:	|     |   pea 1815a <PutChar+0x504>
    3a3c:	|     |   jsr 171b4 <KPrintF>
    3a42:	|     |   addq.l #4,sp
    return FALSE;  
    3a44:	|     |   clr.w d0
    3a46:	+-----|-- bra.w 3be8 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3a4a:	|     \-> move.l 1c842 <CstBackDropBufferApplyStart>,d0
    3a50:	|         move.l d0,1c846 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3a56:	|         movea.l 1c842 <CstBackDropBufferApplyStart>,a0
    3a5c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3a5e:	|         movea.l 1c842 <CstBackDropBufferApplyStart>,a0
    3a64:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3a66:	|         move.w 1c820 <CstBackdropSize>,d0
    3a6c:	|         move.w d0,d0
    3a6e:	|         andi.l #65535,d0
    3a74:	|         move.l 64(sp),d1
    3a78:	|         add.l d1,d1
    3a7a:	|         add.l d1,d0
    3a7c:	|         move.l d0,12(sp)
    3a80:	|         moveq #2,d1
    3a82:	|         move.l d1,8(sp)
    3a86:	|         move.l 1c902 <SysBase>,d0
    3a8c:	|         movea.l d0,a6
    3a8e:	|         move.l 12(sp),d0
    3a92:	|         move.l 8(sp),d1
    3a96:	|         jsr -684(a6)
    3a9a:	|         move.l d0,4(sp)
    3a9e:	|         move.l 4(sp),d0
    3aa2:	|         move.l d0,1c832 <CstViewBuffer>
  if( !CstViewBuffer)
    3aa8:	|         move.l 1c832 <CstViewBuffer>,d0
    3aae:	|     /-- bne.s 3ac4 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3ab0:	|     |   pea 181a5 <PutChar+0x54f>
    3ab6:	|     |   jsr 171b4 <KPrintF>
    3abc:	|     |   addq.l #4,sp
    return FALSE;  
    3abe:	|     |   clr.w d0
    3ac0:	+-----|-- bra.w 3be8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3ac4:	|     \-> pea 181df <PutChar+0x589>
    3aca:	|         jsr 171b4 <KPrintF>
    3ad0:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3ad2:	|         move.l 1c836 <CstDrawBuffer>,d1
    3ad8:	|         move.l 64(sp),d0
    3adc:	|     /-- bpl.s 3ae0 <CstReserveBackdrop+0x278>
    3ade:	|     |   addq.l #3,d0
    3ae0:	|     \-> asr.l #2,d0
    3ae2:	|         add.l d0,d0
    3ae4:	|         add.l d0,d0
    3ae6:	|         add.l d1,d0
    3ae8:	|         move.l d0,1c836 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3aee:	|         move.l 1c832 <CstViewBuffer>,d1
    3af4:	|         move.l 64(sp),d0
    3af8:	|     /-- bpl.s 3afc <CstReserveBackdrop+0x294>
    3afa:	|     |   addq.l #3,d0
    3afc:	|     \-> asr.l #2,d0
    3afe:	|         add.l d0,d0
    3b00:	|         add.l d0,d0
    3b02:	|         add.l d1,d0
    3b04:	|         move.l d0,1c832 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3b0a:	|         move.l 1c824 <CstBackDrop>,d0
    3b10:	|         clr.l -(sp)
    3b12:	|         pea 5 <_start+0x5>
    3b16:	|         pea 100 <copyString+0x48>
    3b1a:	|         pea 140 <decodeFilename+0x28>
    3b1e:	|         pea 18207 <PutChar+0x5b1>
    3b24:	|         move.l d0,-(sp)
    3b26:	|         jsr 1729c <debug_register_bitmap>
    3b2c:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3b30:	|         move.l 68(sp),d0
    3b34:	|         movea.w d0,a1
    3b36:	|         move.l 64(sp),d0
    3b3a:	|         lsl.w #3,d0
    3b3c:	|         movea.w d0,a0
    3b3e:	|         move.l 1c836 <CstDrawBuffer>,d0
    3b44:	|         clr.l -(sp)
    3b46:	|         pea 5 <_start+0x5>
    3b4a:	|         move.l a1,-(sp)
    3b4c:	|         move.l a0,-(sp)
    3b4e:	|         pea 18217 <PutChar+0x5c1>
    3b54:	|         move.l d0,-(sp)
    3b56:	|         jsr 1729c <debug_register_bitmap>
    3b5c:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3b60:	|         move.l 68(sp),d0
    3b64:	|         movea.w d0,a1
    3b66:	|         move.l 64(sp),d0
    3b6a:	|         lsl.w #3,d0
    3b6c:	|         movea.w d0,a0
    3b6e:	|         move.l 1c832 <CstViewBuffer>,d0
    3b74:	|         clr.l -(sp)
    3b76:	|         pea 5 <_start+0x5>
    3b7a:	|         move.l a1,-(sp)
    3b7c:	|         move.l a0,-(sp)
    3b7e:	|         pea 18226 <PutChar+0x5d0>
    3b84:	|         move.l d0,-(sp)
    3b86:	|         jsr 1729c <debug_register_bitmap>
    3b8c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3b90:	|         move.l 1c82c <CstCopperList>,d0
    3b96:	|     /-- beq.s 3ba8 <CstReserveBackdrop+0x340>
    3b98:	|     |   move.l 1c836 <CstDrawBuffer>,d0
    3b9e:	|     +-- beq.s 3ba8 <CstReserveBackdrop+0x340>
    3ba0:	|     |   move.l 1c832 <CstViewBuffer>,d0
    3ba6:	|  /--|-- bne.s 3bba <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3ba8:	|  |  \-> pea 18235 <PutChar+0x5df>
    3bae:	|  |      jsr 171b4 <KPrintF>
    3bb4:	|  |      addq.l #4,sp
    return FALSE;
    3bb6:	|  |      clr.w d0
    3bb8:	+--|----- bra.s 3be8 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3bba:	|  \----> pea 18262 <PutChar+0x60c>
    3bc0:	|         jsr 171b4 <KPrintF>
    3bc6:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3bc8:	|         move.l 1c82c <CstCopperList>,d0
    3bce:	|         move.l d0,-(sp)
    3bd0:	|         jsr 371c <CstSetCl>
    3bd6:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3bd8:	|         pea 18289 <PutChar+0x633>
    3bde:	|         jsr 171b4 <KPrintF>
    3be4:	|         addq.l #4,sp
  return TRUE;
    3be6:	|         moveq #1,d0

}
    3be8:	\-------> movea.l (sp)+,a6
    3bea:	          lea 56(sp),sp
    3bee:	          rts

00003bf0 <CstUnfreeze>:

void CstUnfreeze() {
    3bf0:	       lea -24(sp),sp
    3bf4:	       move.l a6,-(sp)
    3bf6:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3bf8:	       pea 182ac <PutChar+0x656>
    3bfe:	       jsr 171b4 <KPrintF>
    3c04:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3c06:	       move.l 1c856 <winWidth>,d0
    3c0c:	       lsr.l #3,d0
    3c0e:	       move.l d0,d1
    3c10:	       move.l 1c85a <winHeight>,d0
    3c16:	       move.l d0,d0
    3c18:	       muls.w d0,d1
    3c1a:	       move.w d1,d0
    3c1c:	       add.w d0,d0
    3c1e:	       add.w d0,d0
    3c20:	       move.w d0,d2
    3c22:	       add.w d1,d2
    3c24:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3c28:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3c30:	       move.l 1c85a <winHeight>,d0
    3c36:	       move.l d0,d0
    3c38:	       movea.w d0,a1
    3c3a:	       move.l 1c856 <winWidth>,d0
    3c40:	       move.l d0,d0
    3c42:	       movea.w d0,a0
    3c44:	       move.l 1c828 <CstBackDropBackup>,d0
    3c4a:	       clr.l -(sp)
    3c4c:	       pea 5 <_start+0x5>
    3c50:	       move.l a1,-(sp)
    3c52:	       move.l a0,-(sp)
    3c54:	       pea 17e7e <PutChar+0x228>
    3c5a:	       move.l d0,-(sp)
    3c5c:	       jsr 1729c <debug_register_bitmap>
    3c62:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3c66:	       move.l 1c828 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3c6e:	       move.l 1c824 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3c76:	       clr.l 20(sp)
    3c7a:	   /-- bra.s 3ca0 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3c7c:	/--|-> move.l 28(sp),d1
    3c80:	|  |   move.l d1,d0
    3c82:	|  |   addq.l #4,d0
    3c84:	|  |   move.l d0,28(sp)
    3c88:	|  |   move.l 24(sp),d0
    3c8c:	|  |   move.l d0,d2
    3c8e:	|  |   addq.l #4,d2
    3c90:	|  |   move.l d2,24(sp)
    3c94:	|  |   movea.l d1,a0
    3c96:	|  |   move.l (a0),d1
    3c98:	|  |   movea.l d0,a0
    3c9a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3c9c:	|  |   addq.l #1,20(sp)
    3ca0:	|  \-> move.w 18(sp),d0
    3ca4:	|      lsr.w #2,d0
    3ca6:	|      move.w d0,d0
    3ca8:	|      andi.l #65535,d0
    3cae:	|      cmp.l 20(sp),d0
    3cb2:	\----- bgt.s 3c7c <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3cb4:	       move.w #2,1c830 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3cbc:	       move.l 1c856 <winWidth>,d0
    3cc2:	       lsr.l #4,d0
    3cc4:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3cca:	       move.l a0,d1
    3ccc:	       addq.l #2,d1
    3cce:	       move.l d1,1c846 <CstBackDropBufferApplyCursor>
    3cd4:	       move.l d0,d0
    3cd6:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3cd8:	       move.l 1c85a <winHeight>,d0
    3cde:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3ce4:	       move.l a0,d1
    3ce6:	       addq.l #2,d1
    3ce8:	       move.l d1,1c846 <CstBackDropBufferApplyCursor>
    3cee:	       move.l d0,d0
    3cf0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3cf2:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3cf8:	       move.l a0,d0
    3cfa:	       addq.l #2,d0
    3cfc:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    3d02:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d04:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3d0a:	       move.l a0,d0
    3d0c:	       addq.l #2,d0
    3d0e:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    3d14:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d16:	       movea.l 1c846 <CstBackDropBufferApplyCursor>,a0
    3d1c:	       move.l a0,d0
    3d1e:	       addq.l #2,d0
    3d20:	       move.l d0,1c846 <CstBackDropBufferApplyCursor>
    3d26:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3d28:	       move.l 1c828 <CstBackDropBackup>,d0
    3d2e:	   /-- bne.s 3d48 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3d30:	   |   move.l 1c828 <CstBackDropBackup>,10(sp)
    3d38:	   |   move.l 1c902 <SysBase>,d0
    3d3e:	   |   movea.l d0,a6
    3d40:	   |   movea.l 10(sp),a1
    3d44:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3d48:	   \-> pea 17e8d <PutChar+0x237>
    3d4e:	       jsr 171b4 <KPrintF>
    3d54:	       addq.l #4,sp

}
    3d56:	       nop
    3d58:	       move.l (sp)+,d2
    3d5a:	       movea.l (sp)+,a6
    3d5c:	       lea 24(sp),sp
    3d60:	       rts

00003d62 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3d62:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3d66:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3d6a:	       tst.l 24(sp)
    3d6e:	   /-- bge.s 3d74 <drawLine+0x12>
    3d70:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3d74:	   \-> tst.l 28(sp)
    3d78:	   /-- bge.s 3d7e <drawLine+0x1c>
    3d7a:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3d7e:	   \-> tst.l 32(sp)
    3d82:	   /-- bge.s 3d88 <drawLine+0x26>
    3d84:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3d88:	   \-> tst.l 36(sp)
    3d8c:	   /-- bge.s 3d92 <drawLine+0x30>
    3d8e:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3d92:	   \-> move.l 1c99e <sceneWidth>,d0
    3d98:	       cmp.l 24(sp),d0
    3d9c:	   /-- bge.s 3dac <drawLine+0x4a>
    3d9e:	   |   move.l 1c99e <sceneWidth>,d0
    3da4:	   |   move.l d0,d1
    3da6:	   |   subq.l #1,d1
    3da8:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3dac:	   \-> move.l 1c99e <sceneWidth>,d0
    3db2:	       cmp.l 32(sp),d0
    3db6:	   /-- bge.s 3dc6 <drawLine+0x64>
    3db8:	   |   move.l 1c99e <sceneWidth>,d0
    3dbe:	   |   move.l d0,d1
    3dc0:	   |   subq.l #1,d1
    3dc2:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3dc6:	   \-> move.l 1c9a2 <sceneHeight>,d0
    3dcc:	       cmp.l 28(sp),d0
    3dd0:	   /-- bge.s 3de0 <drawLine+0x7e>
    3dd2:	   |   move.l 1c9a2 <sceneHeight>,d0
    3dd8:	   |   move.l d0,d1
    3dda:	   |   subq.l #1,d1
    3ddc:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3de0:	   \-> move.l 1c9a2 <sceneHeight>,d0
    3de6:	       cmp.l 36(sp),d0
    3dea:	   /-- bge.s 3dfa <drawLine+0x98>
    3dec:	   |   move.l 1c9a2 <sceneHeight>,d0
    3df2:	   |   move.l d0,d1
    3df4:	   |   subq.l #1,d1
    3df6:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3dfa:	   \-> move.l 24(sp),d0
    3dfe:	       cmp.l 32(sp),d0
    3e02:	/----- ble.s 3e1e <drawLine+0xbc>
		x = x2; 
    3e04:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3e0a:	|      tst.w 10(sp)
    3e0e:	|      seq d0
    3e10:	|      neg.b d0
    3e12:	|      move.b d0,d0
    3e14:	|      andi.w #255,d0
    3e18:	|      move.w d0,10(sp)
    3e1c:	|  /-- bra.s 3e24 <drawLine+0xc2>
	} else x = x1;
    3e1e:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3e24:	   \-> move.l 28(sp),d1
    3e28:	       cmp.l 36(sp),d1
    3e2c:	/----- ble.s 3e48 <drawLine+0xe6>
		y = y2; 
    3e2e:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3e34:	|      tst.w 10(sp)
    3e38:	|      seq d0
    3e3a:	|      neg.b d0
    3e3c:	|      move.b d0,d0
    3e3e:	|      andi.w #255,d0
    3e42:	|      move.w d0,10(sp)
    3e46:	|  /-- bra.s 3e4e <drawLine+0xec>
	} else y = y1;	
    3e48:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3e4e:	   \-> move.l 32(sp),d0
    3e52:	       sub.l 24(sp),d0
    3e56:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3e5a:	       move.l 6(sp),d0
    3e5e:	   /-- bpl.s 3e62 <drawLine+0x100>
    3e60:	   |   neg.l d0
    3e62:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3e66:	       move.l 36(sp),d1
    3e6a:	       sub.l 28(sp),d1
    3e6e:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3e72:	       move.l 2(sp),d0
    3e76:	   /-- bpl.s 3e7a <drawLine+0x118>
    3e78:	   |   neg.l d0
    3e7a:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3e7e:	       tst.l 6(sp)
    3e82:	   /-- bne.s 3ea6 <drawLine+0x144>
		diffX = 1;
    3e84:	   |   moveq #1,d0
    3e86:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3e8a:	   |   move.l 1c99e <sceneWidth>,d0
    3e90:	   |   subq.l #1,d0
    3e92:	   |   cmp.l 16(sp),d0
    3e96:	   +-- bne.s 3ea6 <drawLine+0x144>
    3e98:	   |   move.l 1c99e <sceneWidth>,d0
    3e9e:	   |   move.l d0,d1
    3ea0:	   |   subq.l #2,d1
    3ea2:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3ea6:	   \-> tst.l 2(sp)
    3eaa:	   /-- bne.s 3ece <drawLine+0x16c>
		diffY = 1;
    3eac:	   |   moveq #1,d0
    3eae:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3eb2:	   |   move.l 1c9a2 <sceneHeight>,d0
    3eb8:	   |   subq.l #1,d0
    3eba:	   |   cmp.l 12(sp),d0
    3ebe:	   +-- bne.s 3ece <drawLine+0x16c>
    3ec0:	   |   move.l 1c9a2 <sceneHeight>,d0
    3ec6:	   |   move.l d0,d1
    3ec8:	   |   subq.l #2,d1
    3eca:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3ece:	   \-> pea 182d7 <PutChar+0x681>
    3ed4:	       jsr 171b4 <KPrintF>
    3eda:	       addq.l #4,sp
	
}
    3edc:	       nop
    3ede:	       lea 20(sp),sp
    3ee2:	       rts

00003ee4 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3ee4:	                      lea -24(sp),sp
    3ee8:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3eea:	                      move.l 1c85e <firstTexture>,d0
    3ef0:	/-------------------- beq.w 3fce <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3ef4:	|                     clr.l 24(sp)
    3ef8:	|     /-------------- bra.w 3fc2 <deleteTextures+0xde>
			BOOL found = FALSE;
    3efc:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    3f00:	|  |  |               move.l 1c85e <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3f08:	|  |  |               movea.l 20(sp),a0
    3f0c:	|  |  |               move.l (a0),d1
    3f0e:	|  |  |               move.l 24(sp),d0
    3f12:	|  |  |               add.l d0,d0
    3f14:	|  |  |               add.l d0,d0
    3f16:	|  |  |               movea.l 36(sp),a0
    3f1a:	|  |  |               adda.l d0,a0
    3f1c:	|  |  |               move.l (a0),d0
    3f1e:	|  |  |               cmp.l d1,d0
    3f20:	|  |  |  /----------- bne.w 3fb4 <deleteTextures+0xd0>
				found = TRUE;
    3f24:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3f2a:	|  |  |  |            movea.l 20(sp),a0
    3f2e:	|  |  |  |            move.l 12(a0),d0
    3f32:	|  |  |  |            move.l d0,1c85e <firstTexture>
				FreeVec(list);
    3f38:	|  |  |  |            move.l 20(sp),6(sp)
    3f3e:	|  |  |  |            move.l 1c902 <SysBase>,d0
    3f44:	|  |  |  |            movea.l d0,a6
    3f46:	|  |  |  |            movea.l 6(sp),a1
    3f4a:	|  |  |  |            jsr -690(a6)
				continue;
    3f4e:	|  |  |  |  /-------- bra.s 3fbe <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3f50:	|  |  |  |  |  /----> movea.l 20(sp),a0
    3f54:	|  |  |  |  |  |      movea.l 12(a0),a0
    3f58:	|  |  |  |  |  |      move.l (a0),d1
    3f5a:	|  |  |  |  |  |      move.l 24(sp),d0
    3f5e:	|  |  |  |  |  |      add.l d0,d0
    3f60:	|  |  |  |  |  |      add.l d0,d0
    3f62:	|  |  |  |  |  |      movea.l 36(sp),a0
    3f66:	|  |  |  |  |  |      adda.l d0,a0
    3f68:	|  |  |  |  |  |      move.l (a0),d0
    3f6a:	|  |  |  |  |  |      cmp.l d1,d0
    3f6c:	|  |  |  |  |  |  /-- bne.s 3faa <deleteTextures+0xc6>
					found = TRUE;
    3f6e:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    3f74:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3f78:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3f7e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3f82:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3f86:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3f8a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3f8e:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    3f92:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3f98:	|  |  |  |  |  |  |   move.l 1c902 <SysBase>,d0
    3f9e:	|  |  |  |  |  |  |   movea.l d0,a6
    3fa0:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    3fa4:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3fa8:	|  |  |  |  +--|--|-- bra.s 3fbe <deleteTextures+0xda>
				}
				list = list->next;
    3faa:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3fae:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    3fb4:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3fb8:	|  |  |     |  |      move.l 12(a0),d0
    3fbc:	|  |  |     |  \----- bne.s 3f50 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3fbe:	|  |  |     \-------> addq.l #1,24(sp)
    3fc2:	|  |  \-------------> move.l 24(sp),d0
    3fc6:	|  |                  cmp.l 32(sp),d0
    3fca:	|  \----------------- bcs.w 3efc <deleteTextures+0x18>
			}
		}
	}
}
    3fce:	\-------------------> nop
    3fd0:	                      movea.l (sp)+,a6
    3fd2:	                      lea 24(sp),sp
    3fd6:	                      rts

00003fd8 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3fd8:	subq.l #4,sp
    3fda:	move.l 8(sp),d0
    3fde:	move.w d0,d0
    3fe0:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    3fe4:	pea 182fa <PutChar+0x6a4>
    3fea:	jsr 171b4 <KPrintF>
    3ff0:	addq.l #4,sp
}
    3ff2:	nop
    3ff4:	addq.l #4,sp
    3ff6:	rts

00003ff8 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3ff8:	       moveq #-1,d0
    3ffa:	       cmp.l 4(sp),d0
    3ffe:	   /-- bne.s 4004 <resourceNameFromNum+0xc>
    4000:	   |   moveq #0,d0
    4002:	/--|-- bra.s 403c <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4004:	|  \-> move.l 1c8de <numResourceNames>,d0
    400a:	|  /-- bne.s 4014 <resourceNameFromNum+0x1c>
    400c:	|  |   move.l #99114,d0
    4012:	+--|-- bra.s 403c <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4014:	|  \-> move.l 1c8de <numResourceNames>,d0
    401a:	|      cmp.l 4(sp),d0
    401e:	|  /-- ble.s 4036 <resourceNameFromNum+0x3e>
    4020:	|  |   move.l 1c896 <allResourceNames>,d1
    4026:	|  |   move.l 4(sp),d0
    402a:	|  |   add.l d0,d0
    402c:	|  |   add.l d0,d0
    402e:	|  |   movea.l d1,a0
    4030:	|  |   adda.l d0,a0
    4032:	|  |   move.l (a0),d0
    4034:	+--|-- bra.s 403c <resourceNameFromNum+0x44>
	return "Unknown resource";
    4036:	|  \-> move.l #99123,d0
    403c:	\----> rts

0000403e <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    403e:	          lea -44(sp),sp
    4042:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4046:	          move.l #320,1c856 <winWidth>
    winHeight = 256;
    4050:	          move.l #256,1c85a <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    405a:	          tst.l 60(sp)
    405e:	      /-- bne.s 4076 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4060:	      |   pea 18344 <PutChar+0x6ee>
    4066:	      |   jsr b8 <copyString>
    406c:	      |   addq.l #4,sp
    406e:	      |   move.l d0,1c86e <bundleFolder>
    4074:	   /--|-- bra.s 408c <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4076:	   |  \-> movea.l 64(sp),a0
    407a:	   |      move.l (a0),d0
    407c:	   |      move.l d0,-(sp)
    407e:	   |      jsr b8 <copyString>
    4084:	   |      addq.l #4,sp
    4086:	   |      move.l d0,1c86e <bundleFolder>
	}
    
	int lastSlash = -1;
    408c:	   \----> moveq #-1,d0
    408e:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4092:	          clr.l 44(sp)
    4096:	   /----- bra.s 40b8 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4098:	/--|----> move.l 1c86e <bundleFolder>,d1
    409e:	|  |      move.l 44(sp),d0
    40a2:	|  |      movea.l d1,a0
    40a4:	|  |      adda.l d0,a0
    40a6:	|  |      move.b (a0),d0
    40a8:	|  |      cmpi.b #47,d0
    40ac:	|  |  /-- bne.s 40b4 <main_sludge+0x76>
    40ae:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    40b4:	|  |  \-> addq.l #1,44(sp)
    40b8:	|  \----> move.l 1c86e <bundleFolder>,d1
    40be:	|         move.l 44(sp),d0
    40c2:	|         movea.l d1,a0
    40c4:	|         adda.l d0,a0
    40c6:	|         move.b (a0),d0
    40c8:	\-------- bne.s 4098 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    40ca:	          move.l 1c86e <bundleFolder>,d0
    40d0:	          move.l 48(sp),d1
    40d4:	          addq.l #1,d1
    40d6:	          movea.l d0,a0
    40d8:	          adda.l d1,a0
    40da:	          clr.b (a0)

	if (argc > 1) {
    40dc:	          moveq #1,d0
    40de:	          cmp.l 60(sp),d0
    40e2:	      /-- bge.s 40fe <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    40e4:	      |   move.l 60(sp),d0
    40e8:	      |   addi.l #1073741823,d0
    40ee:	      |   add.l d0,d0
    40f0:	      |   add.l d0,d0
    40f2:	      |   movea.l 64(sp),a0
    40f6:	      |   adda.l d0,a0
    40f8:	      |   move.l (a0),52(sp)
    40fc:	   /--|-- bra.s 4158 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    40fe:	   |  \-> move.l 1c86e <bundleFolder>,d0
    4104:	   |      pea 1834a <PutChar+0x6f4>
    410a:	   |      move.l d0,-(sp)
    410c:	   |      jsr 13c78 <joinStrings>
    4112:	   |      addq.l #8,sp
    4114:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4118:	   |      move.l 52(sp),-(sp)
    411c:	   |      jsr 13b72 <fileExists>
    4122:	   |      addq.l #4,sp
    4124:	   |      tst.b d0
    4126:	   +----- bne.s 4158 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4128:	   |      move.l 52(sp),40(sp)
    412e:	   |      move.l 1c902 <SysBase>,d0
    4134:	   |      movea.l d0,a6
    4136:	   |      movea.l 40(sp),a1
    413a:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    413e:	   |      move.l 1c86e <bundleFolder>,d0
    4144:	   |      pea 18357 <PutChar+0x701>
    414a:	   |      move.l d0,-(sp)
    414c:	   |      jsr 13c78 <joinStrings>
    4152:	   |      addq.l #8,sp
    4154:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4158:	   \----> pea 18360 <PutChar+0x70a>
    415e:	          jsr 171b4 <KPrintF>
    4164:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4166:	          move.l 52(sp),-(sp)
    416a:	          jsr 13b72 <fileExists>
    4170:	          addq.l #4,sp
    4172:	          tst.b d0
    4174:	      /-- bne.s 41cc <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4176:	      |   move.l 1c90a <DOSBase>,d0
    417c:	      |   movea.l d0,a6
    417e:	      |   jsr -60(a6)
    4182:	      |   move.l d0,28(sp)
    4186:	      |   move.l 28(sp),d0
    418a:	      |   move.l d0,24(sp)
    418e:	      |   move.l #99168,20(sp)
    4196:	      |   moveq #21,d0
    4198:	      |   move.l d0,16(sp)
    419c:	      |   move.l 1c90a <DOSBase>,d0
    41a2:	      |   movea.l d0,a6
    41a4:	      |   move.l 24(sp),d1
    41a8:	      |   move.l 20(sp),d2
    41ac:	      |   move.l 16(sp),d3
    41b0:	      |   jsr -48(a6)
    41b4:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    41b8:	      |   pea 18360 <PutChar+0x70a>
    41be:	      |   jsr 171b4 <KPrintF>
    41c4:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    41c6:	      |   moveq #0,d0
    41c8:	/-----|-- bra.w 43ca <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    41cc:	|     \-> pea 18376 <PutChar+0x720>
    41d2:	|         jsr 171b4 <KPrintF>
    41d8:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    41da:	|         move.l 52(sp),-(sp)
    41de:	|         jsr 43d4 <setGameFilePath>
    41e4:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    41e6:	|         move.l 52(sp),-(sp)
    41ea:	|         jsr 5982 <initSludge>
    41f0:	|         addq.l #4,sp
    41f2:	|         tst.w d0
    41f4:	|     /-- bne.s 41fc <main_sludge+0x1be>
    41f6:	|     |   moveq #0,d0
    41f8:	+-----|-- bra.w 43ca <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    41fc:	|     \-> move.l 1c856 <winWidth>,d0
    4202:	|         cmpi.l #320,d0
    4208:	|     /-- bne.s 4218 <main_sludge+0x1da>
    420a:	|     |   move.l 1c85a <winHeight>,d0
    4210:	|     |   cmpi.l #256,d0
    4216:	|  /--|-- beq.s 423a <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4218:	|  |  \-> pea 18387 <PutChar+0x731>
    421e:	|  |      jsr 171b4 <KPrintF>
    4224:	|  |      addq.l #4,sp
		winWidth = 320;
    4226:	|  |      move.l #320,1c856 <winWidth>
		winHeight = 256;
    4230:	|  |      move.l #256,1c85a <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    423a:	|  \----> pea 18404 <PutChar+0x7ae>
    4240:	|         jsr 171b4 <KPrintF>
    4246:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4248:	|         move.l 1c85a <winHeight>,d0
    424e:	|         move.l d0,d1
    4250:	|         move.l 1c856 <winWidth>,d0
    4256:	|         move.l d1,-(sp)
    4258:	|         move.l d0,-(sp)
    425a:	|         jsr d374 <resizeBackdrop>
    4260:	|         addq.l #8,sp
    4262:	|         tst.w d0
    4264:	|     /-- bne.s 427a <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4266:	|     |   pea 18417 <PutChar+0x7c1>
    426c:	|     |   jsr 171b4 <KPrintF>
    4272:	|     |   addq.l #4,sp
		return FALSE;
    4274:	|     |   moveq #0,d0
    4276:	+-----|-- bra.w 43ca <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    427a:	|     \-> pea 1843d <PutChar+0x7e7>
    4280:	|         jsr 171b4 <KPrintF>
    4286:	|         addq.l #4,sp
	if (! initPeople ())
    4288:	|         jsr a8d0 <initPeople>
    428e:	|         tst.w d0
    4290:	|     /-- bne.s 42a6 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4292:	|     |   pea 1844a <PutChar+0x7f4>
    4298:	|     |   jsr 171b4 <KPrintF>
    429e:	|     |   addq.l #4,sp
		return FALSE;
    42a0:	|     |   moveq #0,d0
    42a2:	+-----|-- bra.w 43ca <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    42a6:	|     \-> pea 1846b <PutChar+0x815>
    42ac:	|         jsr 171b4 <KPrintF>
    42b2:	|         addq.l #4,sp
	if (! initFloor ())
    42b4:	|         jsr 1656a <initFloor>
    42ba:	|         tst.w d0
    42bc:	|     /-- bne.s 42d2 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    42be:	|     |   pea 18477 <PutChar+0x821>
    42c4:	|     |   jsr 171b4 <KPrintF>
    42ca:	|     |   addq.l #4,sp
		
		return FALSE;
    42cc:	|     |   moveq #0,d0
    42ce:	+-----|-- bra.w 43ca <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    42d2:	|     \-> pea 18497 <PutChar+0x841>
    42d8:	|         jsr 171b4 <KPrintF>
    42de:	|         addq.l #4,sp
	if (! initObjectTypes ())
    42e0:	|         jsr d530 <initObjectTypes>
    42e6:	|         tst.w d0
    42e8:	|     /-- bne.s 42fe <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    42ea:	|     |   pea 184a8 <PutChar+0x852>
    42f0:	|     |   jsr 171b4 <KPrintF>
    42f6:	|     |   addq.l #4,sp
		return FALSE;
    42f8:	|     |   moveq #0,d0
    42fa:	+-----|-- bra.w 43ca <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    42fe:	|     \-> pea 184ce <PutChar+0x878>
    4304:	|         jsr 171b4 <KPrintF>
    430a:	|         addq.l #4,sp
	initSpeech ();
    430c:	|         jsr 7da4 <initSpeech>
	KPrintF("Init status bar\n");
    4312:	|         pea 184db <PutChar+0x885>
    4318:	|         jsr 171b4 <KPrintF>
    431e:	|         addq.l #4,sp
	initStatusBar ();
    4320:	|         jsr 7868 <initStatusBar>

	KPrintF("Get numbered string\n");
    4326:	|         pea 184ec <PutChar+0x896>
    432c:	|         jsr 171b4 <KPrintF>
    4332:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4334:	|         pea 1 <_start+0x1>
    4338:	|         jsr 6b78 <getNumberedString>
    433e:	|         addq.l #4,sp
    4340:	|         move.l d0,1c866 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4346:	|         pea 18501 <PutChar+0x8ab>
    434c:	|         jsr 171b4 <KPrintF>
    4352:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4354:	|         move.l 1c8d2 <noStack>,d0
    435a:	|         pea 1 <_start+0x1>
    435e:	|         move.l d0,-(sp)
    4360:	|         clr.l -(sp)
    4362:	|         clr.l -(sp)
    4364:	|         clr.l -(sp)
    4366:	|         jsr 69ce <startNewFunctionNum>
    436c:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4370:	|         pea 18519 <PutChar+0x8c3>
    4376:	|         jsr 171b4 <KPrintF>
    437c:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    437e:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4386:	|         clr.l 1c872 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    438c:	|     /-- bra.s 43ac <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    438e:	|  /--|-> jsr 695e <sludgeDisplay>
		CsiCheckInput();
    4394:	|  |  |   jsr ce9c <CsiCheckInput>
		walkAllPeople();
    439a:	|  |  |   jsr be56 <walkAllPeople>
		handleInput();
    43a0:	|  |  |   jsr 571c <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    43a6:	|  |  |   jsr 170e8 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    43ac:	|  |  \-> move.l 1c872 <weAreDoneSoQuit>,d0
    43b2:	|  \----- beq.s 438e <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    43b4:	|         move.l 52(sp),32(sp)
    43ba:	|         move.l 1c902 <SysBase>,d0
    43c0:	|         movea.l d0,a6
    43c2:	|         movea.l 32(sp),a1
    43c6:	|         jsr -690(a6)
}
    43ca:	\-------> movem.l (sp)+,d2-d3/a6
    43ce:	          lea 44(sp),sp
    43d2:	          rts

000043d4 <setGameFilePath>:

void setGameFilePath (char * f) {
    43d4:	          lea -1104(sp),sp
    43d8:	          move.l a6,-(sp)
    43da:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    43dc:	          move.l #1112,d0
    43e2:	          add.l sp,d0
    43e4:	          addi.l #-1102,d0
    43ea:	          move.l d0,1100(sp)
    43ee:	          move.l #998,1096(sp)
    43f6:	          move.l 1c90a <DOSBase>,d0
    43fc:	          movea.l d0,a6
    43fe:	          move.l 1100(sp),d1
    4402:	          move.l 1096(sp),d2
    4406:	          jsr -564(a6)
    440a:	          move.w d0,1094(sp)
    440e:	          move.w 1094(sp),d0
    4412:	      /-- bne.s 4422 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4414:	      |   pea 1852c <PutChar+0x8d6>
    441a:	      |   jsr 171b4 <KPrintF>
    4420:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4422:	      \-> moveq #-1,d0
    4424:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4428:	          clr.l 1104(sp)
    442c:	   /----- bra.s 444a <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    442e:	/--|----> move.l 1104(sp),d0
    4432:	|  |      movea.l 1116(sp),a0
    4436:	|  |      adda.l d0,a0
    4438:	|  |      move.b (a0),d0
    443a:	|  |      cmpi.b #47,d0
    443e:	|  |  /-- bne.s 4446 <setGameFilePath+0x72>
    4440:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4446:	|  |  \-> addq.l #1,1104(sp)
    444a:	|  \----> move.l 1104(sp),d0
    444e:	|         movea.l 1116(sp),a0
    4452:	|         adda.l d0,a0
    4454:	|         move.b (a0),d0
    4456:	\-------- bne.s 442e <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4458:	          moveq #-1,d0
    445a:	          cmp.l 1108(sp),d0
    445e:	   /----- beq.s 44d8 <setGameFilePath+0x104>
		f[got] = 0;	
    4460:	   |      move.l 1108(sp),d0
    4464:	   |      movea.l 1116(sp),a0
    4468:	   |      adda.l d0,a0
    446a:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    446c:	   |      move.l 1116(sp),1090(sp)
    4472:	   |      moveq #-2,d0
    4474:	   |      move.l d0,1086(sp)
    4478:	   |      move.l 1c90a <DOSBase>,d0
    447e:	   |      movea.l d0,a6
    4480:	   |      move.l 1090(sp),d1
    4484:	   |      move.l 1086(sp),d2
    4488:	   |      jsr -84(a6)
    448c:	   |      move.l d0,1082(sp)
    4490:	   |      move.l 1082(sp),d0
    4494:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4498:	   |      move.l 1078(sp),1074(sp)
    449e:	   |      move.l 1c90a <DOSBase>,d0
    44a4:	   |      movea.l d0,a6
    44a6:	   |      move.l 1074(sp),d1
    44aa:	   |      jsr -126(a6)
    44ae:	   |      move.l d0,1070(sp)
    44b2:	   |      move.l 1070(sp),d0
    44b6:	   |  /-- bne.s 44ca <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    44b8:	   |  |   move.l 1116(sp),-(sp)
    44bc:	   |  |   pea 18552 <PutChar+0x8fc>
    44c2:	   |  |   jsr 171b4 <KPrintF>
    44c8:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    44ca:	   |  \-> move.l 1108(sp),d0
    44ce:	   |      movea.l 1116(sp),a0
    44d2:	   |      adda.l d0,a0
    44d4:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    44d8:	   \----> move.l #400,1066(sp)
    44e0:	          clr.l 1062(sp)
    44e4:	          move.l 1c902 <SysBase>,d0
    44ea:	          movea.l d0,a6
    44ec:	          move.l 1066(sp),d0
    44f0:	          move.l 1062(sp),d1
    44f4:	          jsr -684(a6)
    44f8:	          move.l d0,1058(sp)
    44fc:	          move.l 1058(sp),d0
    4500:	          move.l d0,1c86a <gamePath>
	if (gamePath==0) {
    4506:	          move.l 1c86a <gamePath>,d0
    450c:	      /-- bne.s 4520 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    450e:	      |   pea 18585 <PutChar+0x92f>
    4514:	      |   jsr 171b4 <KPrintF>
    451a:	      |   addq.l #4,sp
    451c:	   /--|-- bra.w 4608 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4520:	   |  \-> move.l 1c86a <gamePath>,1054(sp)
    4528:	   |      moveq #-2,d0
    452a:	   |      move.l d0,1050(sp)
    452e:	   |      move.l 1c90a <DOSBase>,d0
    4534:	   |      movea.l d0,a6
    4536:	   |      move.l 1054(sp),d1
    453a:	   |      move.l 1050(sp),d2
    453e:	   |      jsr -84(a6)
    4542:	   |      move.l d0,1046(sp)
    4546:	   |      move.l 1046(sp),d0
    454a:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    454e:	   |      move.l 1042(sp),1038(sp)
    4554:	   |      move.l 1c90a <DOSBase>,d0
    455a:	   |      movea.l d0,a6
    455c:	   |      move.l 1038(sp),d1
    4560:	   |      jsr -126(a6)
    4564:	   |      move.l d0,1034(sp)
    4568:	   |      move.l 1034(sp),d0
    456c:	   |  /-- bne.s 457c <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    456e:	   |  |   pea 185c0 <PutChar+0x96a>
    4574:	   |  |   jsr 171b4 <KPrintF>
    457a:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    457c:	   |  \-> move.l #1112,d0
    4582:	   |      add.l sp,d0
    4584:	   |      addi.l #-1102,d0
    458a:	   |      move.l d0,1030(sp)
    458e:	   |      moveq #-2,d0
    4590:	   |      move.l d0,1026(sp)
    4594:	   |      move.l 1c90a <DOSBase>,d0
    459a:	   |      movea.l d0,a6
    459c:	   |      move.l 1030(sp),d1
    45a0:	   |      move.l 1026(sp),d2
    45a4:	   |      jsr -84(a6)
    45a8:	   |      move.l d0,1022(sp)
    45ac:	   |      move.l 1022(sp),d0
    45b0:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    45b4:	   |      move.l 1042(sp),1018(sp)
    45ba:	   |      move.l 1c90a <DOSBase>,d0
    45c0:	   |      movea.l d0,a6
    45c2:	   |      move.l 1018(sp),d1
    45c6:	   |      jsr -126(a6)
    45ca:	   |      move.l d0,1014(sp)
    45ce:	   |      move.l 1014(sp),d0
    45d2:	   |  /-- bne.s 45e8 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    45d4:	   |  |   moveq #10,d0
    45d6:	   |  |   add.l sp,d0
    45d8:	   |  |   move.l d0,-(sp)
    45da:	   |  |   pea 185ec <PutChar+0x996>
    45e0:	   |  |   jsr 171b4 <KPrintF>
    45e6:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    45e8:	   |  \-> move.l 1c86a <gamePath>,d0
    45ee:	   +----- beq.s 4608 <setGameFilePath+0x234>
    45f0:	   |      move.l 1c86a <gamePath>,1010(sp)
    45f8:	   |      move.l 1c902 <SysBase>,d0
    45fe:	   |      movea.l d0,a6
    4600:	   |      movea.l 1010(sp),a1
    4604:	   |      jsr -690(a6)
}
    4608:	   \----> move.l (sp)+,d2
    460a:	          movea.l (sp)+,a6
    460c:	          lea 1104(sp),sp
    4610:	          rts

00004612 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4612:	/-------> lea -16(sp),sp
    4616:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4618:	|         move.l 24(sp),-(sp)
    461c:	|         jsr 6740 <pauseFunction>
    4622:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4624:	|     /-- bra.s 4636 <abortFunction+0x24>
    4626:	|  /--|-> moveq #24,d0
    4628:	|  |  |   add.l 24(sp),d0
    462c:	|  |  |   move.l d0,-(sp)
    462e:	|  |  |   jsr 150d0 <trimStack>
    4634:	|  |  |   addq.l #4,sp
    4636:	|  |  \-> movea.l 24(sp),a0
    463a:	|  |      move.l 24(a0),d0
    463e:	|  \----- bne.s 4626 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4640:	|         movea.l 24(sp),a0
    4644:	|         move.l 4(a0),12(sp)
    464a:	|         move.l 1c902 <SysBase>,d0
    4650:	|         movea.l d0,a6
    4652:	|         movea.l 12(sp),a1
    4656:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    465a:	|         clr.l 16(sp)
    465e:	|     /-- bra.s 467e <abortFunction+0x6c>
    4660:	|  /--|-> movea.l 24(sp),a0
    4664:	|  |  |   move.l 20(a0),d1
    4668:	|  |  |   move.l 16(sp),d0
    466c:	|  |  |   lsl.l #3,d0
    466e:	|  |  |   add.l d1,d0
    4670:	|  |  |   move.l d0,-(sp)
    4672:	|  |  |   jsr 1499a <unlinkVar>
    4678:	|  |  |   addq.l #4,sp
    467a:	|  |  |   addq.l #1,16(sp)
    467e:	|  |  \-> movea.l 24(sp),a0
    4682:	|  |      move.l 8(a0),d0
    4686:	|  |      cmp.l 16(sp),d0
    468a:	|  \----- bgt.s 4660 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    468c:	|         movea.l 24(sp),a0
    4690:	|         move.l 20(a0),8(sp)
    4696:	|         move.l 1c902 <SysBase>,d0
    469c:	|         movea.l d0,a6
    469e:	|         movea.l 8(sp),a1
    46a2:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    46a6:	|         moveq #28,d0
    46a8:	|         add.l 24(sp),d0
    46ac:	|         move.l d0,-(sp)
    46ae:	|         jsr 1499a <unlinkVar>
    46b4:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    46b6:	|         movea.l 24(sp),a0
    46ba:	|         move.l 40(a0),d0
    46be:	|     /-- beq.s 46d0 <abortFunction+0xbe>
    46c0:	|     |   movea.l 24(sp),a0
    46c4:	|     |   move.l 40(a0),d0
    46c8:	|     |   move.l d0,-(sp)
    46ca:	\-----|-- jsr 4612 <abortFunction>(pc)
    46ce:	      |   addq.l #4,sp
	FreeVec(fun);
    46d0:	      \-> move.l 24(sp),4(sp)
    46d6:	          move.l 1c902 <SysBase>,d0
    46dc:	          movea.l d0,a6
    46de:	          movea.l 4(sp),a1
    46e2:	          jsr -690(a6)
	fun = NULL;
    46e6:	          clr.l 24(sp)
}
    46ea:	          nop
    46ec:	          movea.l (sp)+,a6
    46ee:	          lea 16(sp),sp
    46f2:	          rts

000046f4 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    46f4:	          subq.l #8,sp
	int n = 0;
    46f6:	          clr.l 4(sp)
	*killedMyself = FALSE;
    46fa:	          movea.l 20(sp),a0
    46fe:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    4700:	          move.l 1c89a <allRunningFunctions>,(sp)
	while (fun) {
    4706:	   /----- bra.s 4734 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4708:	/--|----> movea.l (sp),a0
    470a:	|  |      move.l (a0),d0
    470c:	|  |      cmp.l 12(sp),d0
    4710:	|  |  /-- bne.s 472e <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    4712:	|  |  |   movea.l (sp),a0
    4714:	|  |  |   move.w #1,54(a0)
			n++;
    471a:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    471e:	|  |  |   move.l (sp),d0
    4720:	|  |  |   cmp.l 16(sp),d0
    4724:	|  |  +-- bne.s 472e <cancelAFunction+0x3a>
    4726:	|  |  |   movea.l 20(sp),a0
    472a:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    472e:	|  |  \-> movea.l (sp),a0
    4730:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4734:	|  \----> tst.l (sp)
    4736:	\-------- bne.s 4708 <cancelAFunction+0x14>
	}
	return n;
    4738:	          move.l 4(sp),d0
}
    473c:	          addq.l #8,sp
    473e:	          rts

00004740 <completeTimers>:


void completeTimers () {
    4740:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4742:	          move.l 1c89a <allRunningFunctions>,(sp)

	while (thisFunction) {
    4748:	   /----- bra.s 475e <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    474a:	/--|----> movea.l (sp),a0
    474c:	|  |      move.b 56(a0),d0
    4750:	|  |  /-- bne.s 4758 <completeTimers+0x18>
    4752:	|  |  |   movea.l (sp),a0
    4754:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4758:	|  |  \-> movea.l (sp),a0
    475a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    475e:	|  \----> tst.l (sp)
    4760:	\-------- bne.s 474a <completeTimers+0xa>
	}
}
    4762:	          nop
    4764:	          nop
    4766:	          addq.l #4,sp
    4768:	          rts

0000476a <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    476a:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    476e:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4774:	                                                             movea.l 80(sp),a0
    4778:	                                                             move.w 54(a0),d0
    477c:	/----------------------------------------------------------- beq.w 560a <continueFunction+0xea0>
		abortFunction (fun);
    4780:	|                                                            move.l 80(sp),-(sp)
    4784:	|                                                            jsr 4612 <abortFunction>
    478a:	|                                                            addq.l #4,sp
		return TRUE;
    478c:	|                                                            moveq #1,d0
    478e:	|  /-------------------------------------------------------- bra.w 5614 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4792:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4798:	|  |  |                                                      movea.l 80(sp),a0
    479c:	|  |  |                                                      move.l 4(a0),d1
    47a0:	|  |  |                                                      movea.l 80(sp),a0
    47a4:	|  |  |                                                      move.l 36(a0),d0
    47a8:	|  |  |                                                      lsl.l #3,d0
    47aa:	|  |  |                                                      movea.l d1,a0
    47ac:	|  |  |                                                      adda.l d0,a0
    47ae:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    47b4:	|  |  |                                                      movea.l 80(sp),a0
    47b8:	|  |  |                                                      move.l 4(a0),d1
    47bc:	|  |  |                                                      movea.l 80(sp),a0
    47c0:	|  |  |                                                      move.l 36(a0),d0
    47c4:	|  |  |                                                      lsl.l #3,d0
    47c6:	|  |  |                                                      movea.l d1,a0
    47c8:	|  |  |                                                      adda.l d0,a0
    47ca:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    47ce:	|  |  |                                                      moveq #41,d0
    47d0:	|  |  |                                                      cmp.l 64(sp),d0
    47d4:	|  |  |  /-------------------------------------------------- bcs.w 55be <continueFunction+0xe54>
    47d8:	|  |  |  |                                                   move.l 64(sp),d0
    47dc:	|  |  |  |                                                   add.l d0,d0
    47de:	|  |  |  |                                                   movea.l d0,a0
    47e0:	|  |  |  |                                                   adda.l #18412,a0
    47e6:	|  |  |  |                                                   move.w (a0),d0
    47e8:	|  |  |  |                                                   jmp (47ec <continueFunction+0x82>,pc,d0.w)
    47ec:	|  |  |  |                                                   bset d6,(a2)
    47ee:	|  |  |  |                                                   ori.w #2670,(a4)
    47f2:	|  |  |  |                                                   eori.w #2416,d6
    47f6:	|  |  |  |                                                   bchg d4,d2
    47f8:	|  |  |  |                                                   bclr d4,(a4)+
    47fa:	|  |  |  |                                                   andi.l #181013194,d4
    4800:	|  |  |  |                                                   .short 0x0aca
    4802:	|  |  |  |                                                   .short 0x0aca
    4804:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    480c:	|  |  |  |                                                   .short 0x0aca
    480e:	|  |  |  |                                                   andi.w #906,-(a4)
    4812:	|  |  |  |                                                   bchg d1,196(a2)
    4816:	|  |  |  |                                                   bset d1,580(a4)
    481a:	|  |  |  |                                                   bclr d1,2576(a2)
    481e:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4824:	|  |  |  |                                                   .short 0x0aca
    4826:	|  |  |  |                                                   eori.l #63572682,d0
    482c:	|  |  |  |                                                   .short 0x0aca
    482e:	|  |  |  |                                                   bchg d3,-(a2)
    4830:	|  |  |  |                                                   bchg #-36,(a2)
    4834:	|  |  |  |                                                   .short 0x08cc
    4836:	|  |  |  |                                                   addi.b #14,1038(a0)
    483c:	|  |  |  |                                                   .short 0x040e
    483e:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4842:	|  |  |  |                                                   ori.w #8232,(a0)
    4846:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    484c:	|  |  |  |                                                   ori.w #12136,(a0)
    4850:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4856:	|  |  |  |                                                   ori.w #12328,(a0)
    485a:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4860:	|  |  |  |                                                   add.l 44(sp),d1
    4864:	|  |  |  |                                                   moveq #28,d0
    4866:	|  |  |  |                                                   add.l 80(sp),d0
    486a:	|  |  |  |                                                   move.l d1,-(sp)
    486c:	|  |  |  |                                                   move.l d0,-(sp)
    486e:	|  |  |  |                                                   jsr 14c06 <copyVariable>
    4874:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4876:	|  |  |  |                                                   move.l 80(sp),-(sp)
    487a:	|  |  |  |                                                   jsr 561a <finishFunction>
    4880:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4882:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4888:	|  |  |  |                                                   move.l 80(sp),-(sp)
    488c:	|  |  |  |                                                   jsr 6782 <restartFunction>
    4892:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4894:	|  |  |  |  /----------------------------------------------- bra.w 55f2 <continueFunction+0xe88>
				finishFunction (fun);
    4898:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    489c:	|  |  |  |  |                                                jsr 561a <finishFunction>
    48a2:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    48a4:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    48a8:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    48ac:	|  |  |  |  +----------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    48b0:	|  |  |  |  |                                                movea.l 80(sp),a0
    48b4:	|  |  |  |  |                                                move.l 28(a0),d0
    48b8:	|  |  |  |  |                                                moveq #2,d1
    48ba:	|  |  |  |  |                                                cmp.l d0,d1
    48bc:	|  |  |  |  |                                            /-- beq.s 48c8 <continueFunction+0x15e>
    48be:	|  |  |  |  |                                            |   moveq #4,d1
    48c0:	|  |  |  |  |                                            |   cmp.l d0,d1
    48c2:	|  |  |  |  |                                         /--|-- beq.s 4916 <continueFunction+0x1ac>
    48c4:	|  |  |  |  |                                /--------|--|-- bra.w 49fe <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    48c8:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    48cc:	|  |  |  |  |                                |        |      jsr 6740 <pauseFunction>
    48d2:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    48d4:	|  |  |  |  |                                |        |      moveq #24,d0
    48d6:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    48da:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    48de:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    48e2:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    48e6:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    48e8:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    48ec:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    48f0:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    48f2:	|  |  |  |  |                                |        |      jsr 69ce <startNewFunctionNum>
    48f8:	|  |  |  |  |                                |        |      lea 20(sp),sp
    48fc:	|  |  |  |  |                                |        |      tst.l d0
    48fe:	|  |  |  |  |                                |        |  /-- bne.s 4906 <continueFunction+0x19c>
    4900:	|  |  |  |  |                                |        |  |   clr.w d0
    4902:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5614 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4906:	|  |  |  |  |                                |        |  \-> move.l 1c89a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    490e:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4912:	|  |  |  |  |                                |  /-----|----- bra.w 4a12 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4916:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    491a:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    491e:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4922:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4926:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4928:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    492a:	|  |  |  |  |                                |  |            jsr 1342e <callBuiltIn>
    4930:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4934:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4938:	|  |  |  |  |                                |  |            moveq #5,d0
    493a:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    493e:	|  |  |  |  |                                |  |  /-------- bcs.w 49fa <continueFunction+0x290>
    4942:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4946:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4948:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    494a:	|  |  |  |  |                                |  |  |         adda.l #18774,a0
    4950:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4952:	|  |  |  |  |                                |  |  |         jmp (4956 <continueFunction+0x1ec>,pc,d0.w)
    4956:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    495c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4960:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4966:	|  |  |  |  |                                |  |  |         divu.w (-71,a4,d4.l:8),d3
    496a:	|  |  |  |  |                                |  |  |         ori.b #-76,d1
    496e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4970:	|  |  |  |  |                                |  |  |         clr.w d0
    4972:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5614 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4976:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    497a:	|  |  |  |  |                                |  |  |         jsr 6740 <pauseFunction>
    4980:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4982:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4986:	|  |  |  |  |                                |  |  |  /----- bra.s 49fc <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4988:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    498c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4990:	|  |  |  |  |                                |  |  |  +----- bra.s 49fc <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4992:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4996:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    499c:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    499e:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    49a2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    49a6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    49aa:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    49ac:	|  |  |  |  |                                |  |  |  |      jsr 1503e <setVariable>
    49b2:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    49b6:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    49ba:	|  |  |  |  |                                |  |  |  |      jsr 6740 <pauseFunction>
    49c0:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    49c2:	|  |  |  |  |                                |  |  |  |      move.l 1c8d2 <noStack>,d1
    49c8:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    49cc:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    49ce:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    49d0:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    49d4:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    49d6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    49d8:	|  |  |  |  |                                |  |  |  |      jsr 69ce <startNewFunctionNum>
    49de:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    49e2:	|  |  |  |  |                                |  |  |  |      tst.l d0
    49e4:	|  |  |  |  |                                |  |  |  |  /-- bne.s 49ec <continueFunction+0x282>
    49e6:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    49e8:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5614 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    49ec:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c89a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    49f4:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    49f8:	|  |  |  |  |                                |  |  |  +----- bra.s 49fc <continueFunction+0x292>

						default:
						break;
    49fa:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    49fc:	|  |  |  |  |                                |  +-----\----X bra.s 4a12 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    49fe:	|  |  |  |  |                                \--|----------> pea 1873f <PutChar+0xae9>
    4a04:	|  |  |  |  |                                   |            jsr 171b4 <KPrintF>
    4a0a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4a0c:	|  |  |  |  |                                   |            clr.w d0
    4a0e:	|  +--|--|--|-----------------------------------|----------- bra.w 5614 <continueFunction+0xeaa>
			}
			break;
    4a12:	|  |  |  |  +-----------------------------------\----------X bra.w 55f2 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4a16:	|  |  |  |  |                                                moveq #28,d0
    4a18:	|  |  |  |  |                                                add.l 80(sp),d0
    4a1c:	|  |  |  |  |                                                clr.l -(sp)
    4a1e:	|  |  |  |  |                                                clr.l -(sp)
    4a20:	|  |  |  |  |                                                move.l d0,-(sp)
    4a22:	|  |  |  |  |                                                jsr 1503e <setVariable>
    4a28:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4a2c:	|  |  |  |  +----------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4a30:	|  |  |  |  |                                                move.l 68(sp),d1
    4a34:	|  |  |  |  |                                                moveq #28,d0
    4a36:	|  |  |  |  |                                                add.l 80(sp),d0
    4a3a:	|  |  |  |  |                                                move.l d1,-(sp)
    4a3c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4a40:	|  |  |  |  |                                                move.l d0,-(sp)
    4a42:	|  |  |  |  |                                                jsr 1503e <setVariable>
    4a48:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4a4c:	|  |  |  |  +----------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4a50:	|  |  |  |  |                                                move.l 68(sp),d1
    4a54:	|  |  |  |  |                                                moveq #28,d0
    4a56:	|  |  |  |  |                                                add.l 80(sp),d0
    4a5a:	|  |  |  |  |                                                move.l d1,-(sp)
    4a5c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4a60:	|  |  |  |  |                                                move.l d0,-(sp)
    4a62:	|  |  |  |  |                                                jsr 1503e <setVariable>
    4a68:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4a6c:	|  |  |  |  +----------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4a70:	|  |  |  |  |                                                moveq #28,d0
    4a72:	|  |  |  |  |                                                add.l 80(sp),d0
    4a76:	|  |  |  |  |                                                movea.l 80(sp),a0
    4a7a:	|  |  |  |  |                                                movea.l 20(a0),a0
    4a7e:	|  |  |  |  |                                                move.l 68(sp),d1
    4a82:	|  |  |  |  |                                                lsl.l #3,d1
    4a84:	|  |  |  |  |                                                add.l a0,d1
    4a86:	|  |  |  |  |                                                move.l d0,-(sp)
    4a88:	|  |  |  |  |                                                move.l d1,-(sp)
    4a8a:	|  |  |  |  |                                                jsr 14c06 <copyVariable>
    4a90:	|  |  |  |  |                                                addq.l #8,sp
    4a92:	|  |  |  |  |                                                tst.w d0
    4a94:	|  |  |  |  |  /-------------------------------------------- bne.w 55d0 <continueFunction+0xe66>
    4a98:	|  |  |  |  |  |                                             clr.w d0
    4a9a:	|  +--|--|--|--|-------------------------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4a9e:	|  |  |  |  |  |                                             moveq #28,d0
    4aa0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4aa4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4aa6:	|  |  |  |  |  |                                             jsr 14c8c <getBoolean>
    4aac:	|  |  |  |  |  |                                             addq.l #4,sp
    4aae:	|  |  |  |  |  |                                             tst.w d0
    4ab0:	|  |  |  |  |  |                                      /----- beq.s 4acc <continueFunction+0x362>
    4ab2:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4ab6:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4aba:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4abc:	|  |  |  |  |  |                                      |      jsr 14c8c <getBoolean>
    4ac2:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4ac4:	|  |  |  |  |  |                                      |      tst.w d0
    4ac6:	|  |  |  |  |  |                                      +----- beq.s 4acc <continueFunction+0x362>
    4ac8:	|  |  |  |  |  |                                      |      moveq #1,d0
    4aca:	|  |  |  |  |  |                                      |  /-- bra.s 4ace <continueFunction+0x364>
    4acc:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4ace:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4ad0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4ad4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ad6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4ada:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4adc:	|  |  |  |  |  |                                             jsr 1503e <setVariable>
    4ae2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4ae6:	|  |  |  |  |  |                                             moveq #24,d0
    4ae8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4aec:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4aee:	|  |  |  |  |  |                                             jsr 150d0 <trimStack>
    4af4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4af6:	|  |  |  |  +--|-------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4afa:	|  |  |  |  |  |                                             moveq #28,d0
    4afc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b00:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b02:	|  |  |  |  |  |                                             jsr 14c8c <getBoolean>
    4b08:	|  |  |  |  |  |                                             addq.l #4,sp
    4b0a:	|  |  |  |  |  |                                             tst.w d0
    4b0c:	|  |  |  |  |  |                                         /-- bne.s 4b24 <continueFunction+0x3ba>
    4b0e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4b12:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4b16:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4b18:	|  |  |  |  |  |                                         |   jsr 14c8c <getBoolean>
    4b1e:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4b20:	|  |  |  |  |  |                                         |   tst.w d0
    4b22:	|  |  |  |  |  |                                      /--|-- beq.s 4b28 <continueFunction+0x3be>
    4b24:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4b26:	|  |  |  |  |  |                                      |  /-- bra.s 4b2a <continueFunction+0x3c0>
    4b28:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4b2a:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4b2c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4b30:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b32:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4b36:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b38:	|  |  |  |  |  |                                             jsr 1503e <setVariable>
    4b3e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4b42:	|  |  |  |  |  |                                             moveq #24,d0
    4b44:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b48:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b4a:	|  |  |  |  |  |                                             jsr 150d0 <trimStack>
    4b50:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4b52:	|  |  |  |  +--|-------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4b56:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4b5a:	|  |  |  |  |  |                                             moveq #28,d0
    4b5c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b60:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b62:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4b66:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b68:	|  |  |  |  |  |                                             jsr 1503e <setVariable>
    4b6e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4b72:	|  |  |  |  +--|-------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4b76:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4b7a:	|  |  |  |  |  |                                             moveq #28,d0
    4b7c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b80:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b82:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4b86:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b88:	|  |  |  |  |  |                                             jsr 1503e <setVariable>
    4b8e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4b92:	|  |  |  |  +--|-------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4b96:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4b9a:	|  |  |  |  |  |                                             moveq #28,d0
    4b9c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ba0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4ba2:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4ba6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ba8:	|  |  |  |  |  |                                             jsr 1503e <setVariable>
    4bae:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4bb2:	|  |  |  |  +--|-------------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4bb6:	|  |  |  |  |  |                                             move.l 1c862 <dialogValue>,d0
    4bbc:	|  |  |  |  |  |                                             moveq #1,d1
    4bbe:	|  |  |  |  |  |                                             cmp.l d0,d1
    4bc0:	|  |  |  |  |  |  /----------------------------------------- beq.w 55d4 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4bc4:	|  |  |  |  |  |  |                                          pea 18754 <PutChar+0xafe>
    4bca:	|  |  |  |  |  |  |                                          jsr 171b4 <KPrintF>
    4bd0:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4bd2:	|  |  |  |  |  |  |                                          clr.w d0
    4bd4:	|  +--|--|--|--|--|----------------------------------------- bra.w 5614 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4bd8:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4bdc:	|  |  |  |  |  |  |                                          moveq #28,d0
    4bde:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4be2:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4be4:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4be6:	|  |  |  |  |  |  |                                          jsr 147d0 <loadStringToVar>
    4bec:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4bee:	|  |  |  |  |  |  |                                          tst.w d0
    4bf0:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 55d8 <continueFunction+0xe6e>
					return FALSE;
    4bf4:	|  |  |  |  |  |  |  |                                       clr.w d0
    4bf6:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4bfa:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4bfe:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4c02:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4c04:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4c06:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4c08:	|  |  |  |  |  |  |  |                                /----- beq.s 4c66 <continueFunction+0x4fc>
    4c0a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4c0c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4c0e:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4dfa <continueFunction+0x690>
    4c12:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4c14:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4c20 <continueFunction+0x4b6>
    4c16:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4c18:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4c1a:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4c66 <continueFunction+0x4fc>
    4c1c:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4dfa <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4c20:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4c22:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4c26:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4c52 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4c28:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4c2a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4c2e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4c30:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4c32:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4c34:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1503e <setVariable>
    4c3a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4c3e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4c40:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4c44:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4c46:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150d0 <trimStack>
    4c4c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4c4e:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4e10 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4c52:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 18795 <PutChar+0xb3f>
    4c58:	|  |  |  |  |  |  |  |              |  |              |      jsr 171b4 <KPrintF>
    4c5e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4c60:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4c62:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5614 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4c66:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4c6a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4c6e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4c72:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4c74:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4c8a <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4c76:	|  |  |  |  |  |  |  |              |  |                 |   pea 187d1 <PutChar+0xb7b>
    4c7c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 171b4 <KPrintF>
    4c82:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4c84:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4c86:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5614 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4c8a:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4c8c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4c90:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4c92:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4c96:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4c9a:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4c9c:	|  |  |  |  |  |  |  |              |  |                     jsr 1474c <getValueType>
    4ca2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4ca6:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4ca8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4cb0 <continueFunction+0x546>
    4caa:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4cac:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5614 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4cb0:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4cb4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4cb8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4cba:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4cbc:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4cbe:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ce0 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4cc0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4cc4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4cc6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4cca:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4cce:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4cd2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4cd4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4cd6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 143d6 <fastArrayGetByIndex>
    4cdc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4cde:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4d00 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4ce0:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4ce4:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4ce6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4cea:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4cee:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4cf2:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4cf4:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4cf6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4cf8:	|  |  |  |  |  |  |  |              |  |              |      jsr 15060 <stackGetByIndex>
    4cfe:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4d00:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4d04:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4d06:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4d0a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4d0c:	|  |  |  |  |  |  |  |              |  |                     jsr 150d0 <trimStack>
    4d12:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4d14:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4d18:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4d34 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4d1a:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4d1c:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4d20:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4d22:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4d24:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4d26:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1503e <setVariable>
    4d2c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4d30:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4e0e <continueFunction+0x6a4>
    4d34:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4d36:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4d3a:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4d48 <continueFunction+0x5de>
    4d3c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4d3e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4d42:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4d92 <continueFunction+0x628>
    4d44:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4dda <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4d48:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4d4c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4d50:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4d54:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4d56:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1474c <getValueType>
    4d5c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4d60:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4d62:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4d6a <continueFunction+0x600>
    4d64:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4d66:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4df4 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4d6a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4d6c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4d6e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4d72:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4d74:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4d78:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4d7a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1503e <setVariable>
    4d80:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4d84:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4d86:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4d88:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4d8c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4d90:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4df8 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4d92:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4d96:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4d9a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4d9e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4da0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1474c <getValueType>
    4da6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4daa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4dac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4db2 <continueFunction+0x648>
    4dae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4db0:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4df4 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4db2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4db4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4db6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4dba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4dbc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4dc0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4dc2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1503e <setVariable>
    4dc8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4dcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4dce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4dd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4dd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4df8 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4dda:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4ddc:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4de0:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4de2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4de6:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14c06 <copyVariable>
    4dec:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4dee:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4df0:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4e0e <continueFunction+0x6a4>
    4df2:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4df4:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 5614 <continueFunction+0xeaa>
				break;
    4df8:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4e0e <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4dfa:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 187ef <PutChar+0xb99>
    4e00:	|  |  |  |  |  |  |  |                 |  |                  jsr 171b4 <KPrintF>
    4e06:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4e08:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4e0a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5614 <continueFunction+0xeaa>
				break;
    4e0e:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4e10:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 55f2 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4e14:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e18:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4e1c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4e1e:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4e20:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4e22:	|  |  |  |  |  |  |  |                                   /-- beq.s 4e30 <continueFunction+0x6c6>
    4e24:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4e26:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4e28:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4edc <continueFunction+0x772>
    4e2c:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 4f3a <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4e30:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4e34:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4e38:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4e3c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4e3e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4e54 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4e40:	|  |  |  |  |  |  |  |                             |  |  |   pea 187d1 <PutChar+0xb7b>
    4e46:	|  |  |  |  |  |  |  |                             |  |  |   jsr 171b4 <KPrintF>
    4e4c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4e4e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4e50:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5614 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e54:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4e56:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4e5a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4e5c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4e60:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4e64:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4e66:	|  |  |  |  |  |  |  |                             |  |      jsr 1474c <getValueType>
    4e6c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4e70:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4e72:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4e7a <continueFunction+0x710>
    4e74:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4e76:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5614 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4e7a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4e7e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4e82:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4e86:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4e88:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4e8c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4e8e:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4e92:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4e96:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4e9a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4e9c:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4e9e:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4ea0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ea2:	|  |  |  |  |  |  |  |                             |  |      jsr 698a <stackSetByIndex>
    4ea8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4eac:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4eae:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4eb6 <continueFunction+0x74c>
						return FALSE;
    4eb0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4eb2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5614 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4eb6:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4eb8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4ebc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ebe:	|  |  |  |  |  |  |  |                             |  |      jsr 150d0 <trimStack>
    4ec4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4ec6:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4ec8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4ecc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ece:	|  |  |  |  |  |  |  |                             |  |      jsr 150d0 <trimStack>
    4ed4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4ed6:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4ed8:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 55f2 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4edc:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4ede:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4ee2:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4ee4:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4ee8:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4eec:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4eee:	|  |  |  |  |  |  |  |                             |         jsr 1474c <getValueType>
    4ef4:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4ef8:	|  |  |  |  |  |  |  |                             |         tst.w d0
    4efa:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4f02 <continueFunction+0x798>
    4efc:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4efe:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5614 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4f02:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    4f06:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    4f08:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4f0c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4f10:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4f14:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    4f16:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4f18:	|  |  |  |  |  |  |  |                             |         jsr 143d6 <fastArrayGetByIndex>
    4f1e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4f20:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4f24:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4f34 <continueFunction+0x7ca>
    4f26:	|  |  |  |  |  |  |  |                             |     |   pea 18813 <PutChar+0xbbd>
    4f2c:	|  |  |  |  |  |  |  |                             |     |   jsr 171b4 <KPrintF>
    4f32:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4f34:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    4f36:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5614 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    4f3a:	|  |  |  |  |  |  |  |                             \-------> pea 187ef <PutChar+0xb99>
    4f40:	|  |  |  |  |  |  |  |                                       jsr 171b4 <KPrintF>
    4f46:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    4f48:	|  |  |  |  |  |  |  |                                       clr.w d0
    4f4a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5614 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4f4e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f52:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4f56:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4f5a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4f5c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4f5e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f60:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f64:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    4f68:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4f6a:	|  |  |  |  |  |  |  |                                       jsr 1474c <getValueType>
    4f70:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4f74:	|  |  |  |  |  |  |  |                                       tst.w d0
    4f76:	|  |  |  |  |  |  |  |                                   /-- bne.s 4f7e <continueFunction+0x814>
    4f78:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4f7a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5614 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4f7e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4f82:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4f84:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4f88:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4f8a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f90:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    4f96:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    4f9a:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4f9e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4fa0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4fa2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4fa6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4faa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4fae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4fb0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4fb2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4fb4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4fb8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4fba:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    4fc0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4fc4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4fc8:	|  |  |  |  |  |  |  |                                       move.l 1c8b0 <globalVars>,d1
    4fce:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4fd2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4fd4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4fd6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4fd8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4fdc:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4fe0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4fe2:	|  |  |  |  |  |  |  |                                       jsr 1474c <getValueType>
    4fe8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4fec:	|  |  |  |  |  |  |  |                                       tst.w d0
    4fee:	|  |  |  |  |  |  |  |                                   /-- bne.s 4ff6 <continueFunction+0x88c>
    4ff0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4ff2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5614 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4ff6:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    4ffa:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ffc:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5000:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5002:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5006:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5008:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    500e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5012:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5016:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5018:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    501a:	|  |  |  |  |  |  |  |                                       movea.l 1c8b0 <globalVars>,a0
    5020:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5024:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5026:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5028:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    502a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    502e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5030:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    5036:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    503a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    503e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5042:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5046:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    504a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    504c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    504e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5050:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5054:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5058:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    505a:	|  |  |  |  |  |  |  |                                       jsr 1474c <getValueType>
    5060:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5064:	|  |  |  |  |  |  |  |                                       tst.w d0
    5066:	|  |  |  |  |  |  |  |                                   /-- bne.s 506e <continueFunction+0x904>
    5068:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    506a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5614 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    506e:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    5072:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5074:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5078:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    507a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    507e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5080:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    5086:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    508a:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    508e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5090:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5092:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5096:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    509a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    509e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50a0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    50a2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50a4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50a8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50aa:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    50b0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    50b4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    50b8:	|  |  |  |  |  |  |  |                                       move.l 1c8b0 <globalVars>,d1
    50be:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50c2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50c4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50c6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50c8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50cc:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    50d0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    50d2:	|  |  |  |  |  |  |  |                                       jsr 1474c <getValueType>
    50d8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    50dc:	|  |  |  |  |  |  |  |                                       tst.w d0
    50de:	|  |  |  |  |  |  |  |                                   /-- bne.s 50e6 <continueFunction+0x97c>
    50e0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    50e2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5614 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    50e6:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    50ea:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    50ec:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    50f0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50f2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50f6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50f8:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    50fe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5102:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5106:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5108:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    510a:	|  |  |  |  |  |  |  |                                       movea.l 1c8b0 <globalVars>,a0
    5110:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5114:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5116:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5118:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    511a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    511e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5120:	|  |  |  |  |  |  |  |                                       jsr 1503e <setVariable>
    5126:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    512a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    512e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5132:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5136:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    513a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    513c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    513e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5140:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5144:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5146:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5148:	|  |  |  |  |  |  |  |                                       jsr 14c06 <copyVariable>
    514e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5150:	|  |  |  |  |  |  |  |                                       tst.w d0
    5152:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 55dc <continueFunction+0xe72>
    5156:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5158:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    515c:	|  |  |  |  |  |  |  |  |                                    move.l 1c8b0 <globalVars>,d1
    5162:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5166:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5168:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    516a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    516c:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5170:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5172:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5174:	|  |  |  |  |  |  |  |  |                                    jsr 14c06 <copyVariable>
    517a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    517c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    517e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 55e0 <continueFunction+0xe76>
    5182:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5184:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5188:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    518a:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    518e:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c8b0 <globalVars>,a0
    5194:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5198:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    519a:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    519c:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    519e:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    51a0:	|  |  |  |  |  |  |  |  |  |                                 jsr 14c06 <copyVariable>
    51a6:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    51a8:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    51aa:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 55e4 <continueFunction+0xe7a>
    51ae:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    51b0:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    51b4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    51b6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    51ba:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    51bc:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    51c0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    51c2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    51c4:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13f88 <addVarToStack>
    51ca:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    51cc:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    51ce:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 55e8 <continueFunction+0xe7e>
    51d2:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    51d4:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    51d8:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    51da:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    51de:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    51e0:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    51e4:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    51e6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    51e8:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1400e <addVarToStackQuick>
    51ee:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    51f0:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    51f2:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 55ec <continueFunction+0xe82>
    51f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    51f8:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5614 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    51fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    51fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5202:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5204:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14c8c <getBoolean>
    520a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    520c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    520e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5210:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5212:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5214:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5216:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5218:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    521c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    521e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5222:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5224:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1503e <setVariable>
    522a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    522e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5232:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5234:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5238:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    523a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14c8c <getBoolean>
    5240:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5242:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5244:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 55f0 <continueFunction+0xe86>
				advanceNow = FALSE;
    5248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    524c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5256:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 55f0 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    525a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    525e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5268:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 55f2 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    526c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    526e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    527c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    527e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1474c <getValueType>
    5284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    528a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 5292 <continueFunction+0xb28>
    528c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    528e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5614 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    5296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    529a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    529c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    52a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    52a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    52a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    52a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1503e <setVariable>
    52ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    52b2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 55f2 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    52b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    52ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    52be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 55a8 <continueFunction+0xe3e>
    52c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    52c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    52c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 5344 <continueFunction+0xbda>
    52ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    52cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    52d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 538e <continueFunction+0xc24>
    52d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    52d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    52da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 52e8 <continueFunction+0xb7e>
    52dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    52de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    52e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5316 <continueFunction+0xbac>
    52e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 538e <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    52e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    52ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    52ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    52f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    52f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    52f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14082 <addVariablesInSecond>
    5300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    530a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 150d0 <trimStack>
    5310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 55bc <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    531c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14140 <compareVariablesInSecond>
    532e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 150d0 <trimStack>
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 55bc <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    534a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    534e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14140 <compareVariablesInSecond>
    535c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 150d0 <trimStack>
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    536e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    537a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    537c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    538a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 55bc <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    5392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    53a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1474c <getValueType>
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 53b6 <continueFunction+0xc4c>
    53b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    53b2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5614 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    53b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    53c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1474c <getValueType>
    53ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    53d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 53dc <continueFunction+0xc72>
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    53d8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5614 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    53de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    53e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    53e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 150d0 <trimStack>
    53ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    53ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 55ba <continueFunction+0xe50>
    53fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21514,a0
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (540a <continueFunction+0xca0>,pc,d0.w)
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    541a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    542a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    543a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b40 <__mulsi3>
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55bc <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    548e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55bc <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    549a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    549c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17bec <__modsi3>
    54a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    54a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    54b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    54bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    54c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55bc <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17bbe <__divsi3>
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    54dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    54e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    54ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55bc <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    550e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55bc <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    552e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    554e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55bc <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    555a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55bc <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    558c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    558e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    559a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1503e <setVariable>
    55a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55bc <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 18834 <PutChar+0xbde>
    55ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 171b4 <KPrintF>
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    55b8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5614 <continueFunction+0xeaa>
						break;
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    55bc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 55f2 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    55be:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 1884c <PutChar+0xbf6>
    55c4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 171b4 <KPrintF>
    55ca:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    55cc:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    55ce:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5614 <continueFunction+0xeaa>
			break;
    55d0:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    55d2:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55d4:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    55d6:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55d8:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    55da:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55dc:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    55de:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55e0:	|  |  |     |              \--|--|--|--|-------------------> nop
    55e2:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55e4:	|  |  |     |                 \--|--|--|-------------------> nop
    55e6:	|  |  |     +--------------------|--|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55e8:	|  |  |     |                    \--|--|-------------------> nop
    55ea:	|  |  |     +-----------------------|--|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55ec:	|  |  |     |                       \--|-------------------> nop
    55ee:	|  |  |     +--------------------------|-------------------- bra.s 55f2 <continueFunction+0xe88>
			break;
    55f0:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    55f2:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    55f6:	+--|--|----------------------------------------------------- beq.s 560a <continueFunction+0xea0>
    55f8:	|  |  |                                                      movea.l 80(sp),a0
    55fc:	|  |  |                                                      move.l 36(a0),d0
    5600:	|  |  |                                                      addq.l #1,d0
    5602:	|  |  |                                                      movea.l 80(sp),a0
    5606:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    560a:	\--|--|----------------------------------------------------> tst.w 74(sp)
    560e:	   |  \----------------------------------------------------- bne.w 4792 <continueFunction+0x28>

	}
	return TRUE;
    5612:	   |                                                         moveq #1,d0
}
    5614:	   \-------------------------------------------------------> lea 76(sp),sp
    5618:	                                                             rts

0000561a <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    561a:	          lea -16(sp),sp
    561e:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5620:	          move.l 24(sp),-(sp)
    5624:	          jsr 6740 <pauseFunction>
    562a:	          addq.l #4,sp
	if (fun -> stack) 
    562c:	          movea.l 24(sp),a0
    5630:	          move.l 24(a0),d0
    5634:	      /-- beq.s 5648 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5636:	      |   pea 18878 <PutChar+0xc22>
    563c:	      |   jsr 171b4 <KPrintF>
    5642:	      |   addq.l #4,sp
		return;
    5644:	/-----|-- bra.w 56e2 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5648:	|     \-> movea.l 24(sp),a0
    564c:	|         move.l 4(a0),12(sp)
    5652:	|         move.l 1c902 <SysBase>,d0
    5658:	|         movea.l d0,a6
    565a:	|         movea.l 12(sp),a1
    565e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5662:	|         clr.l 16(sp)
    5666:	|     /-- bra.s 5686 <finishFunction+0x6c>
    5668:	|  /--|-> movea.l 24(sp),a0
    566c:	|  |  |   move.l 20(a0),d1
    5670:	|  |  |   move.l 16(sp),d0
    5674:	|  |  |   lsl.l #3,d0
    5676:	|  |  |   add.l d1,d0
    5678:	|  |  |   move.l d0,-(sp)
    567a:	|  |  |   jsr 1499a <unlinkVar>
    5680:	|  |  |   addq.l #4,sp
    5682:	|  |  |   addq.l #1,16(sp)
    5686:	|  |  \-> movea.l 24(sp),a0
    568a:	|  |      move.l 8(a0),d0
    568e:	|  |      cmp.l 16(sp),d0
    5692:	|  \----- bgt.s 5668 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5694:	|         movea.l 24(sp),a0
    5698:	|         move.l 8(a0),d0
    569c:	|     /-- ble.s 56b8 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    569e:	|     |   movea.l 24(sp),a0
    56a2:	|     |   move.l 20(a0),8(sp)
    56a8:	|     |   move.l 1c902 <SysBase>,d0
    56ae:	|     |   movea.l d0,a6
    56b0:	|     |   movea.l 8(sp),a1
    56b4:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    56b8:	|     \-> moveq #28,d0
    56ba:	|         add.l 24(sp),d0
    56be:	|         move.l d0,-(sp)
    56c0:	|         jsr 1499a <unlinkVar>
    56c6:	|         addq.l #4,sp
	FreeVec(fun);
    56c8:	|         move.l 24(sp),4(sp)
    56ce:	|         move.l 1c902 <SysBase>,d0
    56d4:	|         movea.l d0,a6
    56d6:	|         movea.l 4(sp),a1
    56da:	|         jsr -690(a6)
	fun = NULL;
    56de:	|         clr.l 24(sp)
}
    56e2:	\-------> movea.l (sp)+,a6
    56e4:	          lea 16(sp),sp
    56e8:	          rts

000056ea <freezeSubs>:

void freezeSubs () {
    56ea:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    56ec:	          move.l 1c89a <allRunningFunctions>,(sp)

	while (thisFunction) {
    56f2:	   /----- bra.s 5710 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    56f4:	/--|----> movea.l (sp),a0
    56f6:	|  |      move.w 52(a0),d0
    56fa:	|  |  /-- bne.s 570a <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    56fc:	|  |  |   movea.l (sp),a0
    56fe:	|  |  |   move.b 56(a0),d0
    5702:	|  |  |   addq.b #1,d0
    5704:	|  |  |   movea.l (sp),a0
    5706:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    570a:	|  |  \-> movea.l (sp),a0
    570c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5710:	|  \----> tst.l (sp)
    5712:	\-------- bne.s 56f4 <freezeSubs+0xa>
	}
}
    5714:	          nop
    5716:	          nop
    5718:	          addq.l #4,sp
    571a:	          rts

0000571c <handleInput>:

BOOL handleInput () {
    571c:	             lea -16(sp),sp
    5720:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    5722:	             move.l 1ca16 <overRegion>,d0
    5728:	         /-- bne.s 5730 <handleInput+0x14>
    572a:	         |   jsr 15910 <getOverRegion>

	if (input.justMoved) {
    5730:	         \-> move.w 1c8b8 <input+0x4>,d0
    5736:	         /-- beq.s 5774 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5738:	         |   movea.l 1c27a <currentEvents>,a0
    573e:	         |   move.l 16(a0),d0
    5742:	         +-- beq.s 5774 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5744:	         |   move.l 1c8d2 <noStack>,d1
    574a:	         |   movea.l 1c27a <currentEvents>,a0
    5750:	         |   move.l 16(a0),d0
    5754:	         |   pea 1 <_start+0x1>
    5758:	         |   move.l d1,-(sp)
    575a:	         |   clr.l -(sp)
    575c:	         |   clr.l -(sp)
    575e:	         |   move.l d0,-(sp)
    5760:	         |   jsr 69ce <startNewFunctionNum>
    5766:	         |   lea 20(sp),sp
    576a:	         |   tst.l d0
    576c:	         +-- bne.s 5774 <handleInput+0x58>
    576e:	         |   clr.w d0
    5770:	/--------|-- bra.w 597a <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5774:	|        \-> clr.w 1c8b8 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    577a:	|            move.l 1c8ca <lastRegion>,d1
    5780:	|            move.l 1ca16 <overRegion>,d0
    5786:	|            cmp.l d1,d0
    5788:	|  /-------- beq.w 5860 <handleInput+0x144>
    578c:	|  |         movea.l 1c27a <currentEvents>,a0
    5792:	|  |         move.l 20(a0),d0
    5796:	|  +-------- beq.w 5860 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    579a:	|  |         moveq #12,d0
    579c:	|  |         move.l d0,16(sp)
    57a0:	|  |         clr.l 12(sp)
    57a4:	|  |         move.l 1c902 <SysBase>,d0
    57aa:	|  |         movea.l d0,a6
    57ac:	|  |         move.l 16(sp),d0
    57b0:	|  |         move.l 12(sp),d1
    57b4:	|  |         jsr -684(a6)
    57b8:	|  |         move.l d0,8(sp)
    57bc:	|  |         move.l 8(sp),d0
    57c0:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    57c4:	|  |         move.l 4(sp),d0
    57c8:	|  |     /-- bne.s 57de <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    57ca:	|  |     |   pea 1889e <PutChar+0xc48>
    57d0:	|  |     |   jsr 171b4 <KPrintF>
    57d6:	|  |     |   addq.l #4,sp
			return FALSE;
    57d8:	|  |     |   clr.w d0
    57da:	+--|-----|-- bra.w 597a <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    57de:	|  |     \-> movea.l 4(sp),a0
    57e2:	|  |         clr.l (a0)
		if (overRegion) {
    57e4:	|  |         move.l 1ca16 <overRegion>,d0
    57ea:	|  |  /----- beq.s 5812 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    57ec:	|  |  |      movea.l 1ca16 <overRegion>,a0
    57f2:	|  |  |      movea.l 28(a0),a0
    57f6:	|  |  |      move.l 4(a0),d1
    57fa:	|  |  |      move.l 4(sp),d0
    57fe:	|  |  |      move.l d1,-(sp)
    5800:	|  |  |      pea 7 <_start+0x7>
    5804:	|  |  |      move.l d0,-(sp)
    5806:	|  |  |      jsr 1503e <setVariable>
    580c:	|  |  |      lea 12(sp),sp
    5810:	|  |  |  /-- bra.s 5828 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    5812:	|  |  \--|-> move.l 4(sp),d0
    5816:	|  |     |   clr.l -(sp)
    5818:	|  |     |   pea 1 <_start+0x1>
    581c:	|  |     |   move.l d0,-(sp)
    581e:	|  |     |   jsr 1503e <setVariable>
    5824:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5828:	|  |     \-> movea.l 4(sp),a0
    582c:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5830:	|  |         movea.l 1c27a <currentEvents>,a0
    5836:	|  |         move.l 20(a0),d0
    583a:	|  |         pea 1 <_start+0x1>
    583e:	|  |         lea 8(sp),a0
    5842:	|  |         move.l a0,-(sp)
    5844:	|  |         clr.l -(sp)
    5846:	|  |         pea 1 <_start+0x1>
    584a:	|  |         move.l d0,-(sp)
    584c:	|  |         jsr 69ce <startNewFunctionNum>
    5852:	|  |         lea 20(sp),sp
    5856:	|  |         tst.l d0
    5858:	|  +-------- bne.s 5860 <handleInput+0x144>
    585a:	|  |         clr.w d0
    585c:	+--|-------- bra.w 597a <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5860:	|  \-------> move.w 1c8ba <input+0x6>,d0
    5866:	|        /-- beq.s 58a4 <handleInput+0x188>
    5868:	|        |   movea.l 1c27a <currentEvents>,a0
    586e:	|        |   move.l 4(a0),d0
    5872:	|        +-- beq.s 58a4 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5874:	|        |   move.l 1c8d2 <noStack>,d1
    587a:	|        |   movea.l 1c27a <currentEvents>,a0
    5880:	|        |   move.l 4(a0),d0
    5884:	|        |   pea 1 <_start+0x1>
    5888:	|        |   move.l d1,-(sp)
    588a:	|        |   clr.l -(sp)
    588c:	|        |   clr.l -(sp)
    588e:	|        |   move.l d0,-(sp)
    5890:	|        |   jsr 69ce <startNewFunctionNum>
    5896:	|        |   lea 20(sp),sp
    589a:	|        |   tst.l d0
    589c:	|        +-- bne.s 58a4 <handleInput+0x188>
    589e:	|        |   clr.w d0
    58a0:	+--------|-- bra.w 597a <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    58a4:	|        \-> move.w 1c8bc <input+0x8>,d0
    58aa:	|        /-- beq.s 58e8 <handleInput+0x1cc>
    58ac:	|        |   movea.l 1c27a <currentEvents>,a0
    58b2:	|        |   move.l 12(a0),d0
    58b6:	|        +-- beq.s 58e8 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58b8:	|        |   move.l 1c8d2 <noStack>,d1
    58be:	|        |   movea.l 1c27a <currentEvents>,a0
    58c4:	|        |   move.l 12(a0),d0
    58c8:	|        |   pea 1 <_start+0x1>
    58cc:	|        |   move.l d1,-(sp)
    58ce:	|        |   clr.l -(sp)
    58d0:	|        |   clr.l -(sp)
    58d2:	|        |   move.l d0,-(sp)
    58d4:	|        |   jsr 69ce <startNewFunctionNum>
    58da:	|        |   lea 20(sp),sp
    58de:	|        |   tst.l d0
    58e0:	|        +-- bne.s 58e8 <handleInput+0x1cc>
    58e2:	|        |   clr.w d0
    58e4:	+--------|-- bra.w 597a <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    58e8:	|        \-> move.w 1c8b4 <input>,d0
    58ee:	|        /-- beq.s 5926 <handleInput+0x20a>
    58f0:	|        |   movea.l 1c27a <currentEvents>,a0
    58f6:	|        |   move.l (a0),d0
    58f8:	|        +-- beq.s 5926 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58fa:	|        |   move.l 1c8d2 <noStack>,d1
    5900:	|        |   movea.l 1c27a <currentEvents>,a0
    5906:	|        |   move.l (a0),d0
    5908:	|        |   pea 1 <_start+0x1>
    590c:	|        |   move.l d1,-(sp)
    590e:	|        |   clr.l -(sp)
    5910:	|        |   clr.l -(sp)
    5912:	|        |   move.l d0,-(sp)
    5914:	|        |   jsr 69ce <startNewFunctionNum>
    591a:	|        |   lea 20(sp),sp
    591e:	|        |   tst.l d0
    5920:	|        +-- bne.s 5926 <handleInput+0x20a>
    5922:	|        |   clr.w d0
    5924:	+--------|-- bra.s 597a <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5926:	|        \-> move.w 1c8b6 <input+0x2>,d0
    592c:	|        /-- beq.s 5968 <handleInput+0x24c>
    592e:	|        |   movea.l 1c27a <currentEvents>,a0
    5934:	|        |   move.l 8(a0),d0
    5938:	|        +-- beq.s 5968 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    593a:	|        |   move.l 1c8d2 <noStack>,d1
    5940:	|        |   movea.l 1c27a <currentEvents>,a0
    5946:	|        |   move.l 8(a0),d0
    594a:	|        |   pea 1 <_start+0x1>
    594e:	|        |   move.l d1,-(sp)
    5950:	|        |   clr.l -(sp)
    5952:	|        |   clr.l -(sp)
    5954:	|        |   move.l d0,-(sp)
    5956:	|        |   jsr 69ce <startNewFunctionNum>
    595c:	|        |   lea 20(sp),sp
    5960:	|        |   tst.l d0
    5962:	|        +-- bne.s 5968 <handleInput+0x24c>
    5964:	|        |   clr.w d0
    5966:	+--------|-- bra.s 597a <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5968:	|        \-> move.l 1ca16 <overRegion>,d0
    596e:	|            move.l d0,1c8ca <lastRegion>
	return runSludge ();
    5974:	|            jsr 679c <runSludge>
}
    597a:	\----------> movea.l (sp)+,a6
    597c:	             lea 16(sp),sp
    5980:	             rts

00005982 <initSludge>:

BOOL initSludge (char * filename) {
    5982:	             lea -292(sp),sp
    5986:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    598a:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    598e:	             jsr ac76 <makeNullAnim>
    5994:	             move.l d0,1c808 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    599a:	             pea 1c8ac <gameVersion>
    59a0:	             pea 188d4 <PutChar+0xc7e>
    59a6:	             pea 45 <_start+0x45>
    59aa:	             pea 47 <_start+0x47>
    59ae:	             move.l 332(sp),-(sp)
    59b2:	             jsr 63d0 <openAndVerify>
    59b8:	             lea 20(sp),sp
    59bc:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    59c0:	         /-- bne.s 59c8 <initSludge+0x46>
    59c2:	         |   clr.w d0
    59c4:	/--------|-- bra.w 60f0 <initSludge+0x76e>
	if (FGetC (fp)) {
    59c8:	|        \-> move.l 288(sp),284(sp)
    59ce:	|            move.l 1c90a <DOSBase>,d0
    59d4:	|            movea.l d0,a6
    59d6:	|            move.l 284(sp),d1
    59da:	|            jsr -306(a6)
    59de:	|            move.l d0,280(sp)
    59e2:	|            move.l 280(sp),d0
    59e6:	|  /-------- beq.w 5b90 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    59ea:	|  |         move.l 288(sp),-(sp)
    59ee:	|  |         jsr 6bc <get2bytes>
    59f4:	|  |         addq.l #4,sp
    59f6:	|  |         move.l d0,1c8d6 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    59fc:	|  |         move.l 1c8d6 <numBIFNames>,d0
    5a02:	|  |         move.l d0,276(sp)
    5a06:	|  |         clr.l 272(sp)
    5a0a:	|  |         move.l 1c902 <SysBase>,d0
    5a10:	|  |         movea.l d0,a6
    5a12:	|  |         move.l 276(sp),d0
    5a16:	|  |         move.l 272(sp),d1
    5a1a:	|  |         jsr -684(a6)
    5a1e:	|  |         move.l d0,268(sp)
    5a22:	|  |         move.l 268(sp),d0
    5a26:	|  |         move.l d0,1c892 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5a2c:	|  |         move.l 1c892 <allBIFNames>,d0
    5a32:	|  |     /-- bne.s 5a3a <initSludge+0xb8>
    5a34:	|  |     |   clr.w d0
    5a36:	+--|-----|-- bra.w 60f0 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5a3a:	|  |     \-> clr.l 304(sp)
    5a3e:	|  |     /-- bra.s 5a64 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5a40:	|  |  /--|-> move.l 1c892 <allBIFNames>,d1
    5a46:	|  |  |  |   move.l 304(sp),d0
    5a4a:	|  |  |  |   add.l d0,d0
    5a4c:	|  |  |  |   add.l d0,d0
    5a4e:	|  |  |  |   movea.l d1,a2
    5a50:	|  |  |  |   adda.l d0,a2
    5a52:	|  |  |  |   move.l 288(sp),-(sp)
    5a56:	|  |  |  |   jsr b02 <readString>
    5a5c:	|  |  |  |   addq.l #4,sp
    5a5e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5a60:	|  |  |  |   addq.l #1,304(sp)
    5a64:	|  |  |  \-> move.l 1c8d6 <numBIFNames>,d0
    5a6a:	|  |  |      cmp.l 304(sp),d0
    5a6e:	|  |  \----- bgt.s 5a40 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5a70:	|  |         move.l 288(sp),-(sp)
    5a74:	|  |         jsr 6bc <get2bytes>
    5a7a:	|  |         addq.l #4,sp
    5a7c:	|  |         move.l d0,1c8e2 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5a82:	|  |         move.l 1c8e2 <numUserFunc>,d0
    5a88:	|  |         move.l d0,264(sp)
    5a8c:	|  |         clr.l 260(sp)
    5a90:	|  |         move.l 1c902 <SysBase>,d0
    5a96:	|  |         movea.l d0,a6
    5a98:	|  |         move.l 264(sp),d0
    5a9c:	|  |         move.l 260(sp),d1
    5aa0:	|  |         jsr -684(a6)
    5aa4:	|  |         move.l d0,256(sp)
    5aa8:	|  |         move.l 256(sp),d0
    5aac:	|  |         move.l d0,1c89e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5ab2:	|  |         move.l 1c89e <allUserFunc>,d0
    5ab8:	|  |     /-- bne.s 5ac0 <initSludge+0x13e>
    5aba:	|  |     |   clr.w d0
    5abc:	+--|-----|-- bra.w 60f0 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5ac0:	|  |     \-> clr.l 300(sp)
    5ac4:	|  |     /-- bra.s 5aea <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5ac6:	|  |  /--|-> move.l 1c89e <allUserFunc>,d1
    5acc:	|  |  |  |   move.l 300(sp),d0
    5ad0:	|  |  |  |   add.l d0,d0
    5ad2:	|  |  |  |   add.l d0,d0
    5ad4:	|  |  |  |   movea.l d1,a2
    5ad6:	|  |  |  |   adda.l d0,a2
    5ad8:	|  |  |  |   move.l 288(sp),-(sp)
    5adc:	|  |  |  |   jsr b02 <readString>
    5ae2:	|  |  |  |   addq.l #4,sp
    5ae4:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5ae6:	|  |  |  |   addq.l #1,300(sp)
    5aea:	|  |  |  \-> move.l 1c8e2 <numUserFunc>,d0
    5af0:	|  |  |      cmp.l 300(sp),d0
    5af4:	|  |  \----- bgt.s 5ac6 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5af6:	|  |         move.l 1c8ac <gameVersion>,d0
    5afc:	|  |         cmpi.l #258,d0
    5b02:	|  +-------- ble.w 5b90 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5b06:	|  |         move.l 288(sp),-(sp)
    5b0a:	|  |         jsr 6bc <get2bytes>
    5b10:	|  |         addq.l #4,sp
    5b12:	|  |         move.l d0,1c8de <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5b18:	|  |         move.l 1c8de <numResourceNames>,d0
    5b1e:	|  |         add.l d0,d0
    5b20:	|  |         add.l d0,d0
    5b22:	|  |         move.l d0,252(sp)
    5b26:	|  |         clr.l 248(sp)
    5b2a:	|  |         move.l 1c902 <SysBase>,d0
    5b30:	|  |         movea.l d0,a6
    5b32:	|  |         move.l 252(sp),d0
    5b36:	|  |         move.l 248(sp),d1
    5b3a:	|  |         jsr -684(a6)
    5b3e:	|  |         move.l d0,244(sp)
    5b42:	|  |         move.l 244(sp),d0
    5b46:	|  |         move.l d0,1c896 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5b4c:	|  |         move.l 1c896 <allResourceNames>,d0
    5b52:	|  |     /-- bne.s 5b5a <initSludge+0x1d8>
    5b54:	|  |     |   clr.w d0
    5b56:	+--|-----|-- bra.w 60f0 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5b5a:	|  |     \-> clr.l 296(sp)
    5b5e:	|  |     /-- bra.s 5b84 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5b60:	|  |  /--|-> move.l 1c896 <allResourceNames>,d1
    5b66:	|  |  |  |   move.l 296(sp),d0
    5b6a:	|  |  |  |   add.l d0,d0
    5b6c:	|  |  |  |   add.l d0,d0
    5b6e:	|  |  |  |   movea.l d1,a2
    5b70:	|  |  |  |   adda.l d0,a2
    5b72:	|  |  |  |   move.l 288(sp),-(sp)
    5b76:	|  |  |  |   jsr b02 <readString>
    5b7c:	|  |  |  |   addq.l #4,sp
    5b7e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5b80:	|  |  |  |   addq.l #1,296(sp)
    5b84:	|  |  |  \-> move.l 1c8de <numResourceNames>,d0
    5b8a:	|  |  |      cmp.l 296(sp),d0
    5b8e:	|  |  \----- bgt.s 5b60 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5b90:	|  \-------> move.l #129,1c8be <input+0xa>
	input.mouseY = 100;
    5b9a:	|            moveq #100,d0
    5b9c:	|            move.l d0,1c8c2 <input+0xe>
	winWidth = get2bytes (fp);
    5ba2:	|            move.l 288(sp),-(sp)
    5ba6:	|            jsr 6bc <get2bytes>
    5bac:	|            addq.l #4,sp
    5bae:	|            move.l d0,1c856 <winWidth>
	winHeight = get2bytes (fp);
    5bb4:	|            move.l 288(sp),-(sp)
    5bb8:	|            jsr 6bc <get2bytes>
    5bbe:	|            addq.l #4,sp
    5bc0:	|            move.l d0,1c85a <winHeight>
	specialSettings = FGetC (fp);
    5bc6:	|            move.l 288(sp),240(sp)
    5bcc:	|            move.l 1c90a <DOSBase>,d0
    5bd2:	|            movea.l d0,a6
    5bd4:	|            move.l 240(sp),d1
    5bd8:	|            jsr -306(a6)
    5bdc:	|            move.l d0,236(sp)
    5be0:	|            move.l 236(sp),d0
    5be4:	|            move.l d0,1c8e6 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5bea:	|            move.l 288(sp),232(sp)
    5bf0:	|            move.l 1c90a <DOSBase>,d0
    5bf6:	|            movea.l d0,a6
    5bf8:	|            move.l 232(sp),d1
    5bfc:	|            jsr -306(a6)
    5c00:	|            move.l d0,228(sp)
    5c04:	|            move.l 228(sp),d0
    5c08:	|            move.l d0,-(sp)
    5c0a:	|            pea 3e8 <encodeFilename+0xea>
    5c0e:	|            jsr 17bbe <__divsi3>
    5c14:	|            addq.l #8,sp
    5c16:	|            move.l d0,1c290 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5c1c:	|            move.l 288(sp),-(sp)
    5c20:	|            jsr b02 <readString>
    5c26:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5c28:	|            move.l 288(sp),224(sp)
    5c2e:	|            move.l #116900,220(sp)
    5c36:	|            moveq #8,d1
    5c38:	|            move.l d1,216(sp)
    5c3c:	|            moveq #1,d0
    5c3e:	|            move.l d0,212(sp)
    5c42:	|            move.l 1c90a <DOSBase>,d0
    5c48:	|            movea.l d0,a6
    5c4a:	|            move.l 224(sp),d1
    5c4e:	|            move.l 220(sp),d2
    5c52:	|            move.l 216(sp),d3
    5c56:	|            move.l 212(sp),d4
    5c5a:	|            jsr -324(a6)
    5c5e:	|            move.l d0,208(sp)
    5c62:	|            move.l 208(sp),d0
    5c66:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5c6a:	|            moveq #1,d1
    5c6c:	|            cmp.l 204(sp),d1
    5c70:	|        /-- beq.s 5c80 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5c72:	|        |   pea 1890d <PutChar+0xcb7>
    5c78:	|        |   jsr 171b4 <KPrintF>
    5c7e:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5c80:	|        \-> move.l 1c8ac <gameVersion>,d0
    5c86:	|            cmpi.l #258,d0
    5c8c:	|        /-- ble.s 5c9c <initSludge+0x31a>
    5c8e:	|        |   move.l 288(sp),-(sp)
    5c92:	|        |   jsr b02 <readString>
    5c98:	|        |   addq.l #4,sp
    5c9a:	|     /--|-- bra.s 5cb0 <initSludge+0x32e>
    5c9c:	|     |  \-> pea 1892b <PutChar+0xcd5>
    5ca2:	|     |      pea 1892b <PutChar+0xcd5>
    5ca8:	|     |      jsr 13c78 <joinStrings>
    5cae:	|     |      addq.l #8,sp
    5cb0:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5cb4:	|            move.l 1c8ac <gameVersion>,d0
    5cba:	|            cmpi.l #258,d0
    5cc0:	|     /----- ble.s 5ce2 <initSludge+0x360>
    5cc2:	|     |      move.l 288(sp),196(sp)
    5cc8:	|     |      move.l 1c90a <DOSBase>,d0
    5cce:	|     |      movea.l d0,a6
    5cd0:	|     |      move.l 196(sp),d1
    5cd4:	|     |      jsr -306(a6)
    5cd8:	|     |      move.l d0,192(sp)
    5cdc:	|     |      move.l 192(sp),d0
    5ce0:	|     |  /-- bra.s 5ce4 <initSludge+0x362>
    5ce2:	|     \--|-> moveq #0,d0
    5ce4:	|        \-> move.l d0,1c9e2 <gameSettings+0x4>
	makeLanguageTable (fp);
    5cea:	|            move.l 288(sp),-(sp)
    5cee:	|            jsr 1362e <makeLanguageTable>
    5cf4:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5cf6:	|            move.l 1c8ac <gameVersion>,d0
    5cfc:	|            cmpi.l #261,d0
    5d02:	|        /-- ble.s 5d50 <initSludge+0x3ce>
	{
		FGetC(fp);
    5d04:	|        |   move.l 288(sp),188(sp)
    5d0a:	|        |   move.l 1c90a <DOSBase>,d0
    5d10:	|        |   movea.l d0,a6
    5d12:	|        |   move.l 188(sp),d1
    5d16:	|        |   jsr -306(a6)
    5d1a:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5d1e:	|        |   move.l 288(sp),180(sp)
    5d24:	|        |   move.l 1c90a <DOSBase>,d0
    5d2a:	|        |   movea.l d0,a6
    5d2c:	|        |   move.l 180(sp),d1
    5d30:	|        |   jsr -306(a6)
    5d34:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5d38:	|        |   move.l 288(sp),-(sp)
    5d3c:	|        |   jsr 7d8 <getFloat>
    5d42:	|        |   addq.l #4,sp
		getFloat (fp);
    5d44:	|        |   move.l 288(sp),-(sp)
    5d48:	|        |   jsr 7d8 <getFloat>
    5d4e:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5d50:	|        \-> move.l 288(sp),-(sp)
    5d54:	|            jsr b02 <readString>
    5d5a:	|            addq.l #4,sp
    5d5c:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5d60:	|            pea 1892c <PutChar+0xcd6>
    5d66:	|            move.l 176(sp),-(sp)
    5d6a:	|            jsr 13bf8 <strcmp>
    5d70:	|            addq.l #8,sp
    5d72:	|            tst.l d0
    5d74:	|        /-- beq.s 5d7c <initSludge+0x3fa>
		return FALSE;
    5d76:	|        |   clr.w d0
    5d78:	+--------|-- bra.w 60f0 <initSludge+0x76e>
	}
	FreeVec( checker);
    5d7c:	|        \-> move.l 172(sp),168(sp)
    5d82:	|            move.l 1c902 <SysBase>,d0
    5d88:	|            movea.l d0,a6
    5d8a:	|            movea.l 168(sp),a1
    5d8e:	|            jsr -690(a6)
	checker = NULL;
    5d92:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5d96:	|            move.l 288(sp),164(sp)
    5d9c:	|            move.l 1c90a <DOSBase>,d0
    5da2:	|            movea.l d0,a6
    5da4:	|            move.l 164(sp),d1
    5da8:	|            jsr -306(a6)
    5dac:	|            move.l d0,160(sp)
    5db0:	|            move.l 160(sp),d0
    5db4:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5db8:	|            moveq #0,d0
    5dba:	|            move.b 159(sp),d0
    5dbe:	|            moveq #1,d1
    5dc0:	|            and.l d1,d0
    5dc2:	|        /-- beq.s 5e1a <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5dc4:	|        |   move.l 1c90a <DOSBase>,d0
    5dca:	|        |   movea.l d0,a6
    5dcc:	|        |   jsr -60(a6)
    5dd0:	|        |   move.l d0,38(sp)
    5dd4:	|        |   move.l 38(sp),d0
    5dd8:	|        |   move.l d0,34(sp)
    5ddc:	|        |   move.l #100660,30(sp)
    5de4:	|        |   moveq #54,d0
    5de6:	|        |   move.l d0,26(sp)
    5dea:	|        |   move.l 1c90a <DOSBase>,d0
    5df0:	|        |   movea.l d0,a6
    5df2:	|        |   move.l 34(sp),d1
    5df6:	|        |   move.l 30(sp),d2
    5dfa:	|        |   move.l 26(sp),d3
    5dfe:	|        |   jsr -48(a6)
    5e02:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5e06:	|        |   pea 1896b <PutChar+0xd15>
    5e0c:	|        |   jsr 171b4 <KPrintF>
    5e12:	|        |   addq.l #4,sp
		return FALSE;
    5e14:	|        |   clr.w d0
    5e16:	+--------|-- bra.w 60f0 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5e1a:	|        \-> move.l 288(sp),-(sp)
    5e1e:	|            jsr 6bc <get2bytes>
    5e24:	|            addq.l #4,sp
    5e26:	|            move.l d0,1c8da <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5e2c:	|            move.l 1c8da <numGlobals>,d0
    5e32:	|            lsl.l #3,d0
    5e34:	|            move.l d0,154(sp)
    5e38:	|            clr.l 150(sp)
    5e3c:	|            move.l 1c902 <SysBase>,d0
    5e42:	|            movea.l d0,a6
    5e44:	|            move.l 154(sp),d0
    5e48:	|            move.l 150(sp),d1
    5e4c:	|            jsr -684(a6)
    5e50:	|            move.l d0,146(sp)
    5e54:	|            move.l 146(sp),d0
    5e58:	|            move.l d0,1c8b0 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5e5e:	|            move.l 1c8b0 <globalVars>,d0
    5e64:	|        /-- bne.s 5e82 <initSludge+0x500>
    5e66:	|        |   move.l 1c8da <numGlobals>,d0
    5e6c:	|        +-- ble.s 5e82 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5e6e:	|        |   pea 189a3 <PutChar+0xd4d>
    5e74:	|        |   jsr 171b4 <KPrintF>
    5e7a:	|        |   addq.l #4,sp
		return FALSE;
    5e7c:	|        |   clr.w d0
    5e7e:	+--------|-- bra.w 60f0 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5e82:	|        \-> clr.l 308(sp)
    5e86:	|        /-- bra.s 5e9e <initSludge+0x51c>
    5e88:	|     /--|-> move.l 1c8b0 <globalVars>,d1
    5e8e:	|     |  |   move.l 308(sp),d0
    5e92:	|     |  |   lsl.l #3,d0
    5e94:	|     |  |   movea.l d1,a0
    5e96:	|     |  |   adda.l d0,a0
    5e98:	|     |  |   clr.l (a0)
    5e9a:	|     |  |   addq.l #1,308(sp)
    5e9e:	|     |  \-> move.l 1c8da <numGlobals>,d0
    5ea4:	|     |      cmp.l 308(sp),d0
    5ea8:	|     \----- bgt.s 5e88 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5eaa:	|            move.l 1c9e2 <gameSettings+0x4>,d0
    5eb0:	|            clr.l -(sp)
    5eb2:	|            move.l d0,-(sp)
    5eb4:	|            move.l 296(sp),-(sp)
    5eb8:	|            jsr 6ebe <setFileIndices>
    5ebe:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5ec2:	|            pea 1 <_start+0x1>
    5ec6:	|            jsr 6b78 <getNumberedString>
    5ecc:	|            addq.l #4,sp
    5ece:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5ed2:	|            move.l 142(sp),-(sp)
    5ed6:	|            jsr 2fe <encodeFilename>
    5edc:	|            addq.l #4,sp
    5ede:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5ee2:	|            move.l 142(sp),134(sp)
    5ee8:	|            move.l 1c902 <SysBase>,d0
    5eee:	|            movea.l d0,a6
    5ef0:	|            movea.l 134(sp),a1
    5ef4:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5ef8:	|            move.l 138(sp),130(sp)
    5efe:	|            move.l 1c90a <DOSBase>,d0
    5f04:	|            movea.l d0,a6
    5f06:	|            move.l 130(sp),d1
    5f0a:	|            jsr -120(a6)
    5f0e:	|            move.l d0,126(sp)
    5f12:	|            move.l 126(sp),d0
    5f16:	|            move.l d0,292(sp)
	if(lock == 0) {
    5f1a:	|        /-- bne.s 5f48 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5f1c:	|        |   move.l 138(sp),122(sp)
    5f22:	|        |   moveq #-2,d1
    5f24:	|        |   move.l d1,118(sp)
    5f28:	|        |   move.l 1c90a <DOSBase>,d0
    5f2e:	|        |   movea.l d0,a6
    5f30:	|        |   move.l 122(sp),d1
    5f34:	|        |   move.l 118(sp),d2
    5f38:	|        |   jsr -84(a6)
    5f3c:	|        |   move.l d0,114(sp)
    5f40:	|        |   move.l 114(sp),d0
    5f44:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    5f48:	|        \-> move.l 292(sp),110(sp)
    5f4e:	|            move.l 1c90a <DOSBase>,d0
    5f54:	|            movea.l d0,a6
    5f56:	|            move.l 110(sp),d1
    5f5a:	|            jsr -126(a6)
    5f5e:	|            move.l d0,106(sp)
    5f62:	|            move.l 106(sp),d0
    5f66:	|        /-- bne.s 5fc2 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    5f68:	|        |   move.l 138(sp),-(sp)
    5f6c:	|        |   pea 189d6 <PutChar+0xd80>
    5f72:	|        |   jsr 171b4 <KPrintF>
    5f78:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    5f7a:	|        |   move.l 1c90a <DOSBase>,d0
    5f80:	|        |   movea.l d0,a6
    5f82:	|        |   jsr -60(a6)
    5f86:	|        |   move.l d0,58(sp)
    5f8a:	|        |   move.l 58(sp),d0
    5f8e:	|        |   move.l d0,54(sp)
    5f92:	|        |   move.l #100867,50(sp)
    5f9a:	|        |   moveq #40,d0
    5f9c:	|        |   move.l d0,46(sp)
    5fa0:	|        |   move.l 1c90a <DOSBase>,d0
    5fa6:	|        |   movea.l d0,a6
    5fa8:	|        |   move.l 54(sp),d1
    5fac:	|        |   move.l 50(sp),d2
    5fb0:	|        |   move.l 46(sp),d3
    5fb4:	|        |   jsr -48(a6)
    5fb8:	|        |   move.l d0,42(sp)
		return FALSE;
    5fbc:	|        |   clr.w d0
    5fbe:	+--------|-- bra.w 60f0 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5fc2:	|        \-> move.l 138(sp),102(sp)
    5fc8:	|            move.l 1c902 <SysBase>,d0
    5fce:	|            movea.l d0,a6
    5fd0:	|            movea.l 102(sp),a1
    5fd4:	|            jsr -690(a6)

	readIniFile (filename);
    5fd8:	|            move.l 316(sp),-(sp)
    5fdc:	|            jsr 13762 <readIniFile>
    5fe2:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5fe4:	|            jsr 13534 <getLanguageForFileB>
    5fea:	|            move.l d0,1c27e <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5ff0:	|            move.l 1c27e <languageNum>,d0
    5ff6:	|        /-- bpl.s 6006 <initSludge+0x684>
    5ff8:	|        |   pea 18a2c <PutChar+0xdd6>
    5ffe:	|        |   jsr 171b4 <KPrintF>
    6004:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6006:	|        \-> move.l 1c27e <languageNum>,d0
    600c:	|            move.l d0,d1
    600e:	|            move.l 1c9e2 <gameSettings+0x4>,d0
    6014:	|            move.l d1,-(sp)
    6016:	|            move.l d0,-(sp)
    6018:	|            clr.l -(sp)
    601a:	|            jsr 6ebe <setFileIndices>
    6020:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6024:	|            movea.l 200(sp),a0
    6028:	|            move.b (a0),d0
    602a:	|     /----- beq.w 60d4 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    602e:	|     |      move.l 200(sp),-(sp)
    6032:	|     |      jsr 2fe <encodeFilename>
    6038:	|     |      addq.l #4,sp
    603a:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    603e:	|     |      move.l 98(sp),94(sp)
    6044:	|     |      move.l 1c90a <DOSBase>,d0
    604a:	|     |      movea.l d0,a6
    604c:	|     |      move.l 94(sp),d1
    6050:	|     |      jsr -120(a6)
    6054:	|     |      move.l d0,90(sp)
    6058:	|     |      move.l 90(sp),d0
    605c:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6060:	|     |  /-- bne.s 608e <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6062:	|     |  |   move.l 98(sp),86(sp)
    6068:	|     |  |   moveq #-2,d1
    606a:	|     |  |   move.l d1,82(sp)
    606e:	|     |  |   move.l 1c90a <DOSBase>,d0
    6074:	|     |  |   movea.l d0,a6
    6076:	|     |  |   move.l 86(sp),d1
    607a:	|     |  |   move.l 82(sp),d2
    607e:	|     |  |   jsr -84(a6)
    6082:	|     |  |   move.l d0,78(sp)
    6086:	|     |  |   move.l 78(sp),d0
    608a:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    608e:	|     |  \-> move.l 292(sp),74(sp)
    6094:	|     |      move.l 1c90a <DOSBase>,d0
    609a:	|     |      movea.l d0,a6
    609c:	|     |      move.l 74(sp),d1
    60a0:	|     |      jsr -126(a6)
    60a4:	|     |      move.l d0,70(sp)
    60a8:	|     |      move.l 70(sp),d0
    60ac:	|     |  /-- bne.s 60be <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    60ae:	|     |  |   move.l 1c90a <DOSBase>,d0
    60b4:	|     |  |   movea.l d0,a6
    60b6:	|     |  |   jsr -60(a6)
    60ba:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    60be:	|     |  \-> move.l 98(sp),62(sp)
    60c4:	|     |      move.l 1c902 <SysBase>,d0
    60ca:	|     |      movea.l d0,a6
    60cc:	|     |      movea.l 62(sp),a1
    60d0:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    60d4:	|     \----> movea.l 1c85a <winHeight>,a0
    60da:	|            lea -15(a0),a0
    60de:	|            move.l a0,d0
    60e0:	|            move.l d0,-(sp)
    60e2:	|            pea a <_start+0xa>
    60e6:	|            jsr 78fe <positionStatus>
    60ec:	|            addq.l #8,sp

	return TRUE;
    60ee:	|            moveq #1,d0
}
    60f0:	\----------> movem.l (sp)+,d2-d4/a2/a6
    60f4:	             lea 292(sp),sp
    60f8:	             rts

000060fa <killSpeechTimers>:

void killSpeechTimers () {
    60fa:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    60fc:	          move.l 1c89a <allRunningFunctions>,(sp)

	while (thisFunction) {
    6102:	   /----- bra.s 612e <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6104:	/--|----> movea.l (sp),a0
    6106:	|  |      move.b 56(a0),d0
    610a:	|  |  /-- bne.s 6128 <killSpeechTimers+0x2e>
    610c:	|  |  |   movea.l (sp),a0
    610e:	|  |  |   move.w 50(a0),d0
    6112:	|  |  +-- beq.s 6128 <killSpeechTimers+0x2e>
    6114:	|  |  |   movea.l (sp),a0
    6116:	|  |  |   move.l 12(a0),d0
    611a:	|  |  +-- beq.s 6128 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    611c:	|  |  |   movea.l (sp),a0
    611e:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6122:	|  |  |   movea.l (sp),a0
    6124:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6128:	|  |  \-> movea.l (sp),a0
    612a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    612e:	|  \----> tst.l (sp)
    6130:	\-------- bne.s 6104 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6132:	          jsr 7e3c <killAllSpeech>
}
    6138:	          nop
    613a:	          addq.l #4,sp
    613c:	          rts

0000613e <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    613e:	             lea -52(sp),sp
    6142:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6144:	             movea.l 60(sp),a0
    6148:	             move.l (a0),d0
    614a:	             move.l d0,-(sp)
    614c:	             jsr 6dfe <openSubSlice>
    6152:	             addq.l #4,sp
    6154:	             tst.w d0
    6156:	         /-- bne.s 615e <loadFunctionCode+0x20>
    6158:	         |   clr.w d0
    615a:	/--------|-- bra.w 6328 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    615e:	|        \-> move.l 1c8ea <bigDataFile>,44(sp)
    6166:	|            move.l 1c90a <DOSBase>,d0
    616c:	|            movea.l d0,a6
    616e:	|            move.l 44(sp),d1
    6172:	|            jsr -306(a6)
    6176:	|            move.l d0,40(sp)
    617a:	|            move.l 40(sp),d0
    617e:	|            move.l d0,d0
    6180:	|            movea.l 60(sp),a0
    6184:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6188:	|            move.l 1c8ea <bigDataFile>,d0
    618e:	|            move.l d0,-(sp)
    6190:	|            jsr 6bc <get2bytes>
    6196:	|            addq.l #4,sp
    6198:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    619c:	|            move.l 1c8ea <bigDataFile>,d0
    61a2:	|            move.l d0,-(sp)
    61a4:	|            jsr 6bc <get2bytes>
    61aa:	|            addq.l #4,sp
    61ac:	|            movea.l 60(sp),a0
    61b0:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    61b4:	|            move.l 1c8ea <bigDataFile>,d0
    61ba:	|            move.l d0,-(sp)
    61bc:	|            jsr 6bc <get2bytes>
    61c2:	|            addq.l #4,sp
    61c4:	|            movea.l 60(sp),a0
    61c8:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    61cc:	|            move.l 36(sp),d0
    61d0:	|            lsl.l #3,d0
    61d2:	|            move.l d0,32(sp)
    61d6:	|            clr.l 28(sp)
    61da:	|            move.l 1c902 <SysBase>,d0
    61e0:	|            movea.l d0,a6
    61e2:	|            move.l 32(sp),d0
    61e6:	|            move.l 28(sp),d1
    61ea:	|            jsr -684(a6)
    61ee:	|            move.l d0,24(sp)
    61f2:	|            move.l 24(sp),d0
    61f6:	|            movea.l 60(sp),a0
    61fa:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    61fe:	|            movea.l 60(sp),a0
    6202:	|            move.l 4(a0),d0
    6206:	|        /-- bne.s 621c <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6208:	|        |   pea 18a57 <PutChar+0xe01>
    620e:	|        |   jsr 171b4 <KPrintF>
    6214:	|        |   addq.l #4,sp
		return FALSE;
    6216:	|        |   clr.w d0
    6218:	+--------|-- bra.w 6328 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    621c:	|        \-> clr.l 52(sp)
    6220:	|        /-- bra.s 6282 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6222:	|     /--|-> move.l 1c8ea <bigDataFile>,8(sp)
    622a:	|     |  |   move.l 1c90a <DOSBase>,d0
    6230:	|     |  |   movea.l d0,a6
    6232:	|     |  |   move.l 8(sp),d1
    6236:	|     |  |   jsr -306(a6)
    623a:	|     |  |   move.l d0,4(sp)
    623e:	|     |  |   move.l 4(sp),d1
    6242:	|     |  |   movea.l 60(sp),a0
    6246:	|     |  |   movea.l 4(a0),a0
    624a:	|     |  |   move.l 52(sp),d0
    624e:	|     |  |   lsl.l #3,d0
    6250:	|     |  |   adda.l d0,a0
    6252:	|     |  |   move.l d1,d0
    6254:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6256:	|     |  |   move.l 1c8ea <bigDataFile>,d0
    625c:	|     |  |   move.l d0,-(sp)
    625e:	|     |  |   jsr 6bc <get2bytes>
    6264:	|     |  |   addq.l #4,sp
    6266:	|     |  |   move.l d0,d1
    6268:	|     |  |   movea.l 60(sp),a0
    626c:	|     |  |   movea.l 4(a0),a0
    6270:	|     |  |   move.l 52(sp),d0
    6274:	|     |  |   lsl.l #3,d0
    6276:	|     |  |   adda.l d0,a0
    6278:	|     |  |   move.l d1,d0
    627a:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    627e:	|     |  |   addq.l #1,52(sp)
    6282:	|     |  \-> move.l 52(sp),d0
    6286:	|     |      cmp.l 36(sp),d0
    628a:	|     \----- bcs.s 6222 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    628c:	|            jsr 6b6e <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6292:	|            movea.l 60(sp),a0
    6296:	|            move.l 8(a0),d0
    629a:	|  /-------- ble.w 631e <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    629e:	|  |         movea.l 60(sp),a0
    62a2:	|  |         move.l 8(a0),d0
    62a6:	|  |         lsl.l #3,d0
    62a8:	|  |         move.l d0,20(sp)
    62ac:	|  |         clr.l 16(sp)
    62b0:	|  |         move.l 1c902 <SysBase>,d0
    62b6:	|  |         movea.l d0,a6
    62b8:	|  |         move.l 20(sp),d0
    62bc:	|  |         move.l 16(sp),d1
    62c0:	|  |         jsr -684(a6)
    62c4:	|  |         move.l d0,12(sp)
    62c8:	|  |         move.l 12(sp),d0
    62cc:	|  |         movea.l 60(sp),a0
    62d0:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    62d4:	|  |         movea.l 60(sp),a0
    62d8:	|  |         move.l 20(a0),d0
    62dc:	|  |     /-- bne.s 62f0 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    62de:	|  |     |   pea 18a57 <PutChar+0xe01>
    62e4:	|  |     |   jsr 171b4 <KPrintF>
    62ea:	|  |     |   addq.l #4,sp
			return FALSE;
    62ec:	|  |     |   clr.w d0
    62ee:	+--|-----|-- bra.s 6328 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    62f0:	|  |     \-> clr.l 48(sp)
    62f4:	|  |     /-- bra.s 630e <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    62f6:	|  |  /--|-> movea.l 60(sp),a0
    62fa:	|  |  |  |   move.l 20(a0),d1
    62fe:	|  |  |  |   move.l 48(sp),d0
    6302:	|  |  |  |   lsl.l #3,d0
    6304:	|  |  |  |   movea.l d1,a0
    6306:	|  |  |  |   adda.l d0,a0
    6308:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    630a:	|  |  |  |   addq.l #1,48(sp)
    630e:	|  |  |  \-> movea.l 60(sp),a0
    6312:	|  |  |      move.l 8(a0),d0
    6316:	|  |  |      cmp.l 48(sp),d0
    631a:	|  |  \----- bgt.s 62f6 <loadFunctionCode+0x1b8>
    631c:	|  |     /-- bra.s 6326 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    631e:	|  \-----|-> movea.l 60(sp),a0
    6322:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6326:	|        \-> moveq #1,d0
}
    6328:	\----------> movea.l (sp)+,a6
    632a:	             lea 52(sp),sp
    632e:	             rts

00006330 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6330:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6332:	movea.l 1c27a <currentEvents>,a2
    6338:	move.l 8(sp),-(sp)
    633c:	jsr 6bc <get2bytes>
    6342:	addq.l #4,sp
    6344:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6346:	movea.l 1c27a <currentEvents>,a2
    634c:	move.l 8(sp),-(sp)
    6350:	jsr 6bc <get2bytes>
    6356:	addq.l #4,sp
    6358:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    635c:	movea.l 1c27a <currentEvents>,a2
    6362:	move.l 8(sp),-(sp)
    6366:	jsr 6bc <get2bytes>
    636c:	addq.l #4,sp
    636e:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6372:	movea.l 1c27a <currentEvents>,a2
    6378:	move.l 8(sp),-(sp)
    637c:	jsr 6bc <get2bytes>
    6382:	addq.l #4,sp
    6384:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6388:	movea.l 1c27a <currentEvents>,a2
    638e:	move.l 8(sp),-(sp)
    6392:	jsr 6bc <get2bytes>
    6398:	addq.l #4,sp
    639a:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    639e:	movea.l 1c27a <currentEvents>,a2
    63a4:	move.l 8(sp),-(sp)
    63a8:	jsr 6bc <get2bytes>
    63ae:	addq.l #4,sp
    63b0:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    63b4:	movea.l 1c27a <currentEvents>,a2
    63ba:	move.l 8(sp),-(sp)
    63be:	jsr 6bc <get2bytes>
    63c4:	addq.l #4,sp
    63c6:	move.l d0,24(a2)
}
    63ca:	nop
    63cc:	movea.l (sp)+,a2
    63ce:	rts

000063d0 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    63d0:	       lea -312(sp),sp
    63d4:	       movem.l d2-d3/a6,-(sp)
    63d8:	       move.l 332(sp),d1
    63dc:	       move.l 336(sp),d0
    63e0:	       move.b d1,d1
    63e2:	       move.b d1,16(sp)
    63e6:	       move.b d0,d0
    63e8:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    63ec:	       move.l 328(sp),318(sp)
    63f2:	       move.l #1005,314(sp)
    63fa:	       move.l 1c90a <DOSBase>,d0
    6400:	       movea.l d0,a6
    6402:	       move.l 318(sp),d1
    6406:	       move.l 314(sp),d2
    640a:	       jsr -30(a6)
    640e:	       move.l d0,310(sp)
    6412:	       move.l 310(sp),d0
    6416:	       move.l d0,306(sp)

	if (! fp) {
    641a:	   /-- bne.s 6476 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    641c:	   |   move.l 1c90a <DOSBase>,d0
    6422:	   |   movea.l d0,a6
    6424:	   |   jsr -60(a6)
    6428:	   |   move.l d0,154(sp)
    642c:	   |   move.l 154(sp),d0
    6430:	   |   move.l d0,150(sp)
    6434:	   |   move.l #100992,146(sp)
    643c:	   |   moveq #31,d0
    643e:	   |   move.l d0,142(sp)
    6442:	   |   move.l 1c90a <DOSBase>,d0
    6448:	   |   movea.l d0,a6
    644a:	   |   move.l 150(sp),d1
    644e:	   |   move.l 146(sp),d2
    6452:	   |   move.l 142(sp),d3
    6456:	   |   jsr -48(a6)
    645a:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    645e:	   |   move.l 328(sp),-(sp)
    6462:	   |   pea 18aa0 <PutChar+0xe4a>
    6468:	   |   jsr 171b4 <KPrintF>
    646e:	   |   addq.l #8,sp
		return NULL;
    6470:	   |   moveq #0,d0
    6472:	/--|-- bra.w 6736 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6476:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    647a:	|      move.l 306(sp),302(sp)
    6480:	|      move.l 1c90a <DOSBase>,d0
    6486:	|      movea.l d0,a6
    6488:	|      move.l 302(sp),d1
    648c:	|      jsr -306(a6)
    6490:	|      move.l d0,298(sp)
    6494:	|      move.l 298(sp),d0
    6498:	|      moveq #83,d1
    649a:	|      cmp.l d0,d1
    649c:	|  /-- beq.s 64a4 <openAndVerify+0xd4>
    649e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    64a4:	|  \-> move.l 306(sp),294(sp)
    64aa:	|      move.l 1c90a <DOSBase>,d0
    64b0:	|      movea.l d0,a6
    64b2:	|      move.l 294(sp),d1
    64b6:	|      jsr -306(a6)
    64ba:	|      move.l d0,290(sp)
    64be:	|      move.l 290(sp),d0
    64c2:	|      moveq #76,d1
    64c4:	|      cmp.l d0,d1
    64c6:	|  /-- beq.s 64ce <openAndVerify+0xfe>
    64c8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    64ce:	|  \-> move.l 306(sp),286(sp)
    64d4:	|      move.l 1c90a <DOSBase>,d0
    64da:	|      movea.l d0,a6
    64dc:	|      move.l 286(sp),d1
    64e0:	|      jsr -306(a6)
    64e4:	|      move.l d0,282(sp)
    64e8:	|      move.l 282(sp),d0
    64ec:	|      moveq #85,d1
    64ee:	|      cmp.l d0,d1
    64f0:	|  /-- beq.s 64f8 <openAndVerify+0x128>
    64f2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    64f8:	|  \-> move.l 306(sp),278(sp)
    64fe:	|      move.l 1c90a <DOSBase>,d0
    6504:	|      movea.l d0,a6
    6506:	|      move.l 278(sp),d1
    650a:	|      jsr -306(a6)
    650e:	|      move.l d0,274(sp)
    6512:	|      move.l 274(sp),d0
    6516:	|      moveq #68,d1
    6518:	|      cmp.l d0,d1
    651a:	|  /-- beq.s 6522 <openAndVerify+0x152>
    651c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6522:	|  \-> move.l 306(sp),270(sp)
    6528:	|      move.l 1c90a <DOSBase>,d0
    652e:	|      movea.l d0,a6
    6530:	|      move.l 270(sp),d1
    6534:	|      jsr -306(a6)
    6538:	|      move.l d0,266(sp)
    653c:	|      move.l 266(sp),d1
    6540:	|      move.b 16(sp),d0
    6544:	|      ext.w d0
    6546:	|      movea.w d0,a0
    6548:	|      cmpa.l d1,a0
    654a:	|  /-- beq.s 6552 <openAndVerify+0x182>
    654c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6552:	|  \-> move.l 306(sp),262(sp)
    6558:	|      move.l 1c90a <DOSBase>,d0
    655e:	|      movea.l d0,a6
    6560:	|      move.l 262(sp),d1
    6564:	|      jsr -306(a6)
    6568:	|      move.l d0,258(sp)
    656c:	|      move.l 258(sp),d1
    6570:	|      move.b 14(sp),d0
    6574:	|      ext.w d0
    6576:	|      movea.w d0,a0
    6578:	|      cmpa.l d1,a0
    657a:	|  /-- beq.s 6582 <openAndVerify+0x1b2>
    657c:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6582:	|  \-> tst.w 322(sp)
    6586:	|  /-- beq.s 65de <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6588:	|  |   move.l 1c90a <DOSBase>,d0
    658e:	|  |   movea.l d0,a6
    6590:	|  |   jsr -60(a6)
    6594:	|  |   move.l d0,174(sp)
    6598:	|  |   move.l 174(sp),d0
    659c:	|  |   move.l d0,170(sp)
    65a0:	|  |   move.l #101055,166(sp)
    65a8:	|  |   moveq #31,d0
    65aa:	|  |   move.l d0,162(sp)
    65ae:	|  |   move.l 1c90a <DOSBase>,d0
    65b4:	|  |   movea.l d0,a6
    65b6:	|  |   move.l 170(sp),d1
    65ba:	|  |   move.l 166(sp),d2
    65be:	|  |   move.l 162(sp),d3
    65c2:	|  |   jsr -48(a6)
    65c6:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    65ca:	|  |   pea 18abf <PutChar+0xe69>
    65d0:	|  |   jsr 171b4 <KPrintF>
    65d6:	|  |   addq.l #4,sp
		return NULL;
    65d8:	|  |   moveq #0,d0
    65da:	+--|-- bra.w 6736 <openAndVerify+0x366>
	}
	FGetC (fp);
    65de:	|  \-> move.l 306(sp),254(sp)
    65e4:	|      move.l 1c90a <DOSBase>,d0
    65ea:	|      movea.l d0,a6
    65ec:	|      move.l 254(sp),d1
    65f0:	|      jsr -306(a6)
    65f4:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    65f8:	|      nop
    65fa:	|  /-> move.l 306(sp),246(sp)
    6600:	|  |   move.l 1c90a <DOSBase>,d0
    6606:	|  |   movea.l d0,a6
    6608:	|  |   move.l 246(sp),d1
    660c:	|  |   jsr -306(a6)
    6610:	|  |   move.l d0,242(sp)
    6614:	|  |   move.l 242(sp),d0
    6618:	|  \-- bne.s 65fa <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    661a:	|      move.l 306(sp),238(sp)
    6620:	|      move.l 1c90a <DOSBase>,d0
    6626:	|      movea.l d0,a6
    6628:	|      move.l 238(sp),d1
    662c:	|      jsr -306(a6)
    6630:	|      move.l d0,234(sp)
    6634:	|      move.l 234(sp),d0
    6638:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    663c:	|      move.l 306(sp),226(sp)
    6642:	|      move.l 1c90a <DOSBase>,d0
    6648:	|      movea.l d0,a6
    664a:	|      move.l 226(sp),d1
    664e:	|      jsr -306(a6)
    6652:	|      move.l d0,222(sp)
    6656:	|      move.l 222(sp),d0
    665a:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    665e:	|      move.l 230(sp),d0
    6662:	|      lsl.l #8,d0
    6664:	|      add.l 218(sp),d0
    6668:	|      movea.l 344(sp),a0
    666c:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    666e:	|      movea.l 344(sp),a0
    6672:	|      move.l (a0),d0
    6674:	|      cmpi.l #514,d0
    667a:	|  /-- ble.s 66d0 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    667c:	|  |   move.l 1c90a <DOSBase>,d0
    6682:	|  |   movea.l d0,a6
    6684:	|  |   jsr -60(a6)
    6688:	|  |   move.l d0,194(sp)
    668c:	|  |   move.l 194(sp),d0
    6690:	|  |   move.l d0,190(sp)
    6694:	|  |   move.l #101082,186(sp)
    669c:	|  |   moveq #100,d1
    669e:	|  |   move.l d1,182(sp)
    66a2:	|  |   move.l 1c90a <DOSBase>,d0
    66a8:	|  |   movea.l d0,a6
    66aa:	|  |   move.l 190(sp),d1
    66ae:	|  |   move.l 186(sp),d2
    66b2:	|  |   move.l 182(sp),d3
    66b6:	|  |   jsr -48(a6)
    66ba:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    66be:	|  |   pea 18ada <PutChar+0xe84>
    66c4:	|  |   jsr 171b4 <KPrintF>
    66ca:	|  |   addq.l #4,sp
		return NULL;
    66cc:	|  |   moveq #0,d0
    66ce:	+--|-- bra.s 6736 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    66d0:	|  \-> movea.l 344(sp),a0
    66d4:	|      move.l (a0),d0
    66d6:	|      cmpi.l #257,d0
    66dc:	|  /-- bgt.s 6732 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    66de:	|  |   move.l 1c90a <DOSBase>,d0
    66e4:	|  |   movea.l d0,a6
    66e6:	|  |   jsr -60(a6)
    66ea:	|  |   move.l d0,214(sp)
    66ee:	|  |   move.l 214(sp),d0
    66f2:	|  |   move.l d0,210(sp)
    66f6:	|  |   move.l #101151,206(sp)
    66fe:	|  |   moveq #100,d0
    6700:	|  |   move.l d0,202(sp)
    6704:	|  |   move.l 1c90a <DOSBase>,d0
    670a:	|  |   movea.l d0,a6
    670c:	|  |   move.l 210(sp),d1
    6710:	|  |   move.l 206(sp),d2
    6714:	|  |   move.l 202(sp),d3
    6718:	|  |   jsr -48(a6)
    671c:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6720:	|  |   pea 18b1f <PutChar+0xec9>
    6726:	|  |   jsr 171b4 <KPrintF>
    672c:	|  |   addq.l #4,sp
		return NULL;
    672e:	|  |   moveq #0,d0
    6730:	+--|-- bra.s 6736 <openAndVerify+0x366>
	}
	return fp;
    6732:	|  \-> move.l 306(sp),d0
}
    6736:	\----> movem.l (sp)+,d2-d3/a6
    673a:	       lea 312(sp),sp
    673e:	       rts

00006740 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6740:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6742:	          move.l #116890,(sp)
	while (* huntAndDestroy) {
    6748:	   /----- bra.s 6774 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    674a:	/--|----> movea.l (sp),a0
    674c:	|  |      move.l (a0),d0
    674e:	|  |      cmp.l 8(sp),d0
    6752:	|  |  /-- bne.s 676a <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6754:	|  |  |   movea.l (sp),a0
    6756:	|  |  |   movea.l (a0),a0
    6758:	|  |  |   move.l 44(a0),d0
    675c:	|  |  |   movea.l (sp),a0
    675e:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6760:	|  |  |   movea.l 8(sp),a0
    6764:	|  |  |   clr.l 44(a0)
    6768:	|  +--|-- bra.s 6774 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    676a:	|  |  \-> movea.l (sp),a0
    676c:	|  |      move.l (a0),d0
    676e:	|  |      moveq #44,d1
    6770:	|  |      add.l d0,d1
    6772:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6774:	|  \----> movea.l (sp),a0
    6776:	|         move.l (a0),d0
    6778:	\-------- bne.s 674a <pauseFunction+0xa>
		}
	}
}
    677a:	          nop
    677c:	          nop
    677e:	          addq.l #4,sp
    6780:	          rts

00006782 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6782:	move.l 1c89a <allRunningFunctions>,d0
    6788:	movea.l 4(sp),a0
    678c:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6790:	move.l 4(sp),1c89a <allRunningFunctions>
}
    6798:	nop
    679a:	rts

0000679c <runSludge>:

BOOL runSludge () {
    679c:	                   lea -12(sp),sp
    67a0:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    67a2:	                   move.l 1c89a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    67aa:	      /----------- bra.s 6826 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    67ac:	   /--|----------> movea.l 12(sp),a0
    67b0:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    67b6:	   |  |            movea.l 12(sp),a0
    67ba:	   |  |            move.b 56(a0),d0
    67be:	   |  |  /-------- bne.s 6820 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    67c0:	   |  |  |         movea.l 12(sp),a0
    67c4:	   |  |  |         move.l 12(a0),d0
    67c8:	   |  |  |  /----- beq.s 67f2 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    67ca:	   |  |  |  |      movea.l 12(sp),a0
    67ce:	   |  |  |  |      move.l 12(a0),d0
    67d2:	   |  |  |  |  /-- bpl.s 67de <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    67d4:	   |  |  |  |  |   movea.l 12(sp),a0
    67d8:	   |  |  |  |  |   clr.l 12(a0)
    67dc:	   |  |  +--|--|-- bra.s 6820 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    67de:	   |  |  |  |  \-> movea.l 12(sp),a0
    67e2:	   |  |  |  |      move.l 12(a0),d0
    67e6:	   |  |  |  |      subq.l #1,d0
    67e8:	   |  |  |  |      movea.l 12(sp),a0
    67ec:	   |  |  |  |      move.l d0,12(a0)
    67f0:	   |  |  +--|----- bra.s 6820 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    67f2:	   |  |  |  \----> movea.l 12(sp),a0
    67f6:	   |  |  |         move.w 50(a0),d0
    67fa:	   |  |  |     /-- beq.s 680a <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    67fc:	   |  |  |     |   movea.l 12(sp),a0
    6800:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    6804:	   |  |  |     |   jsr 7e3c <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    680a:	   |  |  |     \-> move.l 12(sp),-(sp)
    680e:	   |  |  |         jsr 476a <continueFunction>
    6814:	   |  |  |         addq.l #4,sp
    6816:	   |  |  |         tst.w d0
    6818:	   |  |  +-------- bne.s 6820 <runSludge+0x84>
					return FALSE;
    681a:	   |  |  |         clr.w d0
    681c:	/--|--|--|-------- bra.w 68ac <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6820:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6826:	|  |  \----------> tst.l 12(sp)
    682a:	|  \-------------- bne.s 67ac <runSludge+0x10>
	}

	if (loadNow) {
    682c:	|                  move.l 1c8ce <loadNow>,d0
    6832:	|        /-------- beq.s 68aa <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6834:	|        |         movea.l 1c8ce <loadNow>,a0
    683a:	|        |         move.b (a0),d0
    683c:	|        |         cmpi.b #58,d0
    6840:	|        |  /----- bne.s 6874 <runSludge+0xd8>
			saveGame (loadNow + 1);
    6842:	|        |  |      move.l 1c8ce <loadNow>,d0
    6848:	|        |  |      addq.l #1,d0
    684a:	|        |  |      move.l d0,-(sp)
    684c:	|        |  |      jsr c6cc <saveGame>
    6852:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6854:	|        |  |      movea.l 1c9cc <saverFunc>,a0
    685a:	|        |  |      lea 28(a0),a0
    685e:	|        |  |      pea 1 <_start+0x1>
    6862:	|        |  |      pea 1 <_start+0x1>
    6866:	|        |  |      move.l a0,-(sp)
    6868:	|        |  |      jsr 1503e <setVariable>
    686e:	|        |  |      lea 12(sp),sp
    6872:	|        |  |  /-- bra.s 688c <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6874:	|        |  \--|-> move.l 1c8ce <loadNow>,d0
    687a:	|        |     |   move.l d0,-(sp)
    687c:	|        |     |   jsr c214 <loadGame>
    6882:	|        |     |   addq.l #4,sp
    6884:	|        |     |   tst.w d0
    6886:	|        |     +-- bne.s 688c <runSludge+0xf0>
    6888:	|        |     |   clr.w d0
    688a:	+--------|-----|-- bra.s 68ac <runSludge+0x110>
		}
		FreeVec(loadNow);
    688c:	|        |     \-> move.l 1c8ce <loadNow>,8(sp)
    6894:	|        |         move.l 1c902 <SysBase>,d0
    689a:	|        |         movea.l d0,a6
    689c:	|        |         movea.l 8(sp),a1
    68a0:	|        |         jsr -690(a6)
		loadNow = NULL;
    68a4:	|        |         clr.l 1c8ce <loadNow>
	}

	return TRUE;
    68aa:	|        \-------> moveq #1,d0
}
    68ac:	\----------------> movea.l (sp)+,a6
    68ae:	                   lea 12(sp),sp
    68b2:	                   rts

000068b4 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    68b4:	movea.l 1c27a <currentEvents>,a0
    68ba:	move.l (a0),d0
    68bc:	move.l 4(sp),-(sp)
    68c0:	move.l d0,-(sp)
    68c2:	jsr 8d0 <put2bytes>
    68c8:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    68ca:	movea.l 1c27a <currentEvents>,a0
    68d0:	move.l 4(a0),d0
    68d4:	move.l 4(sp),-(sp)
    68d8:	move.l d0,-(sp)
    68da:	jsr 8d0 <put2bytes>
    68e0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    68e2:	movea.l 1c27a <currentEvents>,a0
    68e8:	move.l 8(a0),d0
    68ec:	move.l 4(sp),-(sp)
    68f0:	move.l d0,-(sp)
    68f2:	jsr 8d0 <put2bytes>
    68f8:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    68fa:	movea.l 1c27a <currentEvents>,a0
    6900:	move.l 12(a0),d0
    6904:	move.l 4(sp),-(sp)
    6908:	move.l d0,-(sp)
    690a:	jsr 8d0 <put2bytes>
    6910:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6912:	movea.l 1c27a <currentEvents>,a0
    6918:	move.l 16(a0),d0
    691c:	move.l 4(sp),-(sp)
    6920:	move.l d0,-(sp)
    6922:	jsr 8d0 <put2bytes>
    6928:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    692a:	movea.l 1c27a <currentEvents>,a0
    6930:	move.l 20(a0),d0
    6934:	move.l 4(sp),-(sp)
    6938:	move.l d0,-(sp)
    693a:	jsr 8d0 <put2bytes>
    6940:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6942:	movea.l 1c27a <currentEvents>,a0
    6948:	move.l 24(a0),d0
    694c:	move.l 4(sp),-(sp)
    6950:	move.l d0,-(sp)
    6952:	jsr 8d0 <put2bytes>
    6958:	addq.l #8,sp
}
    695a:	nop
    695c:	rts

0000695e <sludgeDisplay>:

void sludgeDisplay () {					
    695e:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6960:	move.l #14675968,(sp)
	displayCursor();
    6966:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    696c:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6972:	jsr 2b26 <CstRestoreScreen>
	drawPeople();
    6978:	jsr 9fb0 <drawPeople>
	CstSwapBuffer();
    697e:	jsr 3734 <CstSwapBuffer>
}
    6984:	nop
    6986:	addq.l #4,sp
    6988:	rts

0000698a <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    698a:	      /-- bra.s 69aa <stackSetByIndex+0x20>
		vS = vS->next;
    698c:	/-----|-> movea.l 4(sp),a0
    6990:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6996:	|     +-- bne.s 69aa <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6998:	|     |   pea 18b66 <PutChar+0xf10>
    699e:	|     |   jsr 171b4 <KPrintF>
    69a4:	|     |   addq.l #4,sp
			return FALSE;
    69a6:	|     |   clr.w d0
    69a8:	|  /--|-- bra.s 69cc <stackSetByIndex+0x42>
	while (theIndex--) {
    69aa:	|  |  \-> move.l 8(sp),d0
    69ae:	|  |      move.l d0,d1
    69b0:	|  |      subq.l #1,d1
    69b2:	|  |      move.l d1,8(sp)
    69b6:	|  |      tst.l d0
    69b8:	\--|----- bne.s 698c <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    69ba:	   |      move.l 4(sp),d0
    69be:	   |      move.l d0,-(sp)
    69c0:	   |      move.l 16(sp),-(sp)
    69c4:	   |      jsr 14c06 <copyVariable>
    69ca:	   |      addq.l #8,sp
}
    69cc:	   \----> rts

000069ce <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    69ce:	             lea -24(sp),sp
    69d2:	             move.l a6,-(sp)
    69d4:	             move.l 48(sp),d0
    69d8:	             move.w d0,d0
    69da:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    69de:	             moveq #58,d0
    69e0:	             move.l d0,24(sp)
    69e4:	             clr.l 20(sp)
    69e8:	             move.l 1c902 <SysBase>,d0
    69ee:	             movea.l d0,a6
    69f0:	             move.l 24(sp),d0
    69f4:	             move.l 20(sp),d1
    69f8:	             jsr -684(a6)
    69fc:	             move.l d0,16(sp)
    6a00:	             move.l 16(sp),d0
    6a04:	             move.l d0,12(sp)
	if(!newFunc) {
    6a08:	         /-- bne.s 6a1e <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6a0a:	         |   pea 18b7f <PutChar+0xf29>
    6a10:	         |   jsr 171b4 <KPrintF>
    6a16:	         |   addq.l #4,sp
		return 0;
    6a18:	         |   moveq #0,d0
    6a1a:	/--------|-- bra.w 6b34 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6a1e:	|        \-> move.l 32(sp),d0
    6a22:	|            movea.l 12(sp),a0
    6a26:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6a28:	|            move.l 12(sp),-(sp)
    6a2c:	|            jsr 613e <loadFunctionCode>
    6a32:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6a34:	|            movea.l 12(sp),a0
    6a38:	|            move.l 16(a0),d1
    6a3c:	|            move.l 36(sp),d0
    6a40:	|            cmp.l d1,d0
    6a42:	|        /-- beq.s 6a58 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6a44:	|        |   pea 18ba8 <PutChar+0xf52>
    6a4a:	|        |   jsr 171b4 <KPrintF>
    6a50:	|        |   addq.l #4,sp
		return NULL; 
    6a52:	|        |   moveq #0,d0
    6a54:	+--------|-- bra.w 6b34 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6a58:	|        \-> movea.l 12(sp),a0
    6a5c:	|            move.l 16(a0),d1
    6a60:	|            movea.l 12(sp),a0
    6a64:	|            move.l 8(a0),d0
    6a68:	|            cmp.l d1,d0
    6a6a:	|  /-------- bge.s 6ad4 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6a6c:	|  |         pea 18bc4 <PutChar+0xf6e>
    6a72:	|  |         jsr 171b4 <KPrintF>
    6a78:	|  |         addq.l #4,sp
		return NULL; 
    6a7a:	|  |         moveq #0,d0
    6a7c:	+--|-------- bra.w 6b34 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6a80:	|  |  /----> movea.l 44(sp),a0
    6a84:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6a88:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6a8c:	|  |  |      movea.l 44(sp),a0
    6a90:	|  |  |      move.l (a0),d0
    6a92:	|  |  |  /-- bne.s 6aa8 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6a94:	|  |  |  |   pea 18bee <PutChar+0xf98>
    6a9a:	|  |  |  |   jsr 171b4 <KPrintF>
    6aa0:	|  |  |  |   addq.l #4,sp
			return NULL;
    6aa2:	|  |  |  |   moveq #0,d0
    6aa4:	+--|--|--|-- bra.w 6b34 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6aa8:	|  |  |  \-> movea.l 12(sp),a0
    6aac:	|  |  |      move.l 20(a0),d1
    6ab0:	|  |  |      move.l 36(sp),d0
    6ab4:	|  |  |      lsl.l #3,d0
    6ab6:	|  |  |      add.l d0,d1
    6ab8:	|  |  |      move.l 8(sp),d0
    6abc:	|  |  |      move.l d1,-(sp)
    6abe:	|  |  |      move.l d0,-(sp)
    6ac0:	|  |  |      jsr 14c06 <copyVariable>
    6ac6:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6ac8:	|  |  |      move.l 44(sp),-(sp)
    6acc:	|  |  |      jsr 150d0 <trimStack>
    6ad2:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6ad4:	|  \--|----> tst.l 36(sp)
    6ad8:	|     \----- bne.s 6a80 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6ada:	|            movea.l 12(sp),a0
    6ade:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6ae2:	|            movea.l 12(sp),a0
    6ae6:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6aea:	|            movea.l 12(sp),a0
    6aee:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6af4:	|            movea.l 12(sp),a0
    6af8:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6afe:	|            movea.l 12(sp),a0
    6b02:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6b06:	|            movea.l 12(sp),a0
    6b0a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6b0e:	|            movea.l 12(sp),a0
    6b12:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6b16:	|            movea.l 12(sp),a0
    6b1a:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6b1e:	|            movea.l 12(sp),a0
    6b22:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6b26:	|            move.l 12(sp),-(sp)
    6b2a:	|            jsr 6782 <restartFunction>
    6b30:	|            addq.l #4,sp
	return 1;
    6b32:	|            moveq #1,d0
}
    6b34:	\----------> movea.l (sp)+,a6
    6b36:	             lea 24(sp),sp
    6b3a:	             rts

00006b3c <unfreezeSubs>:

void unfreezeSubs () {
    6b3c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6b3e:	          move.l 1c89a <allRunningFunctions>,(sp)

	while (thisFunction) {
    6b44:	   /----- bra.s 6b62 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6b46:	/--|----> movea.l (sp),a0
    6b48:	|  |      move.b 56(a0),d0
    6b4c:	|  |  /-- beq.s 6b5c <unfreezeSubs+0x20>
    6b4e:	|  |  |   movea.l (sp),a0
    6b50:	|  |  |   move.b 56(a0),d0
    6b54:	|  |  |   subq.b #1,d0
    6b56:	|  |  |   movea.l (sp),a0
    6b58:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6b5c:	|  |  \-> movea.l (sp),a0
    6b5e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6b62:	|  \----> tst.l (sp)
    6b64:	\-------- bne.s 6b46 <unfreezeSubs+0xa>
	}
}
    6b66:	          nop
    6b68:	          nop
    6b6a:	          addq.l #4,sp
    6b6c:	          rts

00006b6e <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6b6e:	clr.w 1c286 <sliceBusy>
}
    6b74:	nop
    6b76:	rts

00006b78 <getNumberedString>:

char * getNumberedString (int value) {
    6b78:	       lea -56(sp),sp
    6b7c:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6b80:	       move.w 1c286 <sliceBusy>,d0
    6b86:	   /-- beq.s 6bd0 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6b88:	   |   move.l 1c90a <DOSBase>,d0
    6b8e:	   |   movea.l d0,a6
    6b90:	   |   jsr -60(a6)
    6b94:	   |   move.l d0,28(sp)
    6b98:	   |   move.l 28(sp),d0
    6b9c:	   |   move.l d0,24(sp)
    6ba0:	   |   move.l #101433,20(sp)
    6ba8:	   |   moveq #76,d0
    6baa:	   |   move.l d0,16(sp)
    6bae:	   |   move.l 1c90a <DOSBase>,d0
    6bb4:	   |   movea.l d0,a6
    6bb6:	   |   move.l 24(sp),d1
    6bba:	   |   move.l 20(sp),d2
    6bbe:	   |   move.l 16(sp),d3
    6bc2:	   |   jsr -48(a6)
    6bc6:	   |   move.l d0,12(sp)
		return NULL;
    6bca:	   |   moveq #0,d0
    6bcc:	/--|-- bra.w 6c6c <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6bd0:	|  \-> move.l 1c8ea <bigDataFile>,64(sp)
    6bd8:	|      move.l 72(sp),d0
    6bdc:	|      add.l d0,d0
    6bde:	|      add.l d0,d0
    6be0:	|      move.l d0,d1
    6be2:	|      move.l 1c8f6 <startOfTextIndex>,d0
    6be8:	|      add.l d1,d0
    6bea:	|      move.l d0,60(sp)
    6bee:	|      moveq #-1,d0
    6bf0:	|      move.l d0,56(sp)
    6bf4:	|      move.l 1c90a <DOSBase>,d0
    6bfa:	|      movea.l d0,a6
    6bfc:	|      move.l 64(sp),d1
    6c00:	|      move.l 60(sp),d2
    6c04:	|      move.l 56(sp),d3
    6c08:	|      jsr -66(a6)
    6c0c:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6c10:	|      move.l 1c8ea <bigDataFile>,d0
    6c16:	|      move.l d0,-(sp)
    6c18:	|      jsr 718 <get4bytes>
    6c1e:	|      addq.l #4,sp
    6c20:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6c24:	|      move.l 1c8ea <bigDataFile>,48(sp)
    6c2c:	|      move.l 72(sp),44(sp)
    6c32:	|      moveq #-1,d0
    6c34:	|      move.l d0,40(sp)
    6c38:	|      move.l 1c90a <DOSBase>,d0
    6c3e:	|      movea.l d0,a6
    6c40:	|      move.l 48(sp),d1
    6c44:	|      move.l 44(sp),d2
    6c48:	|      move.l 40(sp),d3
    6c4c:	|      jsr -66(a6)
    6c50:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6c54:	|      move.l 1c8ea <bigDataFile>,d0
    6c5a:	|      move.l d0,-(sp)
    6c5c:	|      jsr b02 <readString>
    6c62:	|      addq.l #4,sp
    6c64:	|      move.l d0,32(sp)
	
	return s;
    6c68:	|      move.l 32(sp),d0
}
    6c6c:	\----> movem.l (sp)+,d2-d3/a6
    6c70:	       lea 56(sp),sp
    6c74:	       rts

00006c76 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6c76:	       lea -32(sp),sp
    6c7a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6c7e:	       move.w 1c286 <sliceBusy>,d0
    6c84:	   /-- beq.s 6ca0 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6c86:	   |   pea 18c86 <PutChar+0x1030>
    6c8c:	   |   pea 18ca4 <PutChar+0x104e>
    6c92:	   |   jsr 171b4 <KPrintF>
    6c98:	   |   addq.l #8,sp
		return 0;
    6c9a:	   |   moveq #0,d0
    6c9c:	/--|-- bra.w 6d34 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6ca0:	|  \-> move.l 1c8ea <bigDataFile>,40(sp)
    6ca8:	|      move.l 48(sp),d0
    6cac:	|      add.l d0,d0
    6cae:	|      add.l d0,d0
    6cb0:	|      move.l d0,d1
    6cb2:	|      move.l 1c8f2 <startOfDataIndex>,d0
    6cb8:	|      add.l d1,d0
    6cba:	|      move.l d0,36(sp)
    6cbe:	|      moveq #-1,d0
    6cc0:	|      move.l d0,32(sp)
    6cc4:	|      move.l 1c90a <DOSBase>,d0
    6cca:	|      movea.l d0,a6
    6ccc:	|      move.l 40(sp),d1
    6cd0:	|      move.l 36(sp),d2
    6cd4:	|      move.l 32(sp),d3
    6cd8:	|      jsr -66(a6)
    6cdc:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6ce0:	|      move.l 1c8ea <bigDataFile>,24(sp)
    6ce8:	|      move.l 1c8ea <bigDataFile>,d0
    6cee:	|      move.l d0,-(sp)
    6cf0:	|      jsr 718 <get4bytes>
    6cf6:	|      addq.l #4,sp
    6cf8:	|      move.l d0,20(sp)
    6cfc:	|      clr.l 16(sp)
    6d00:	|      move.l 1c90a <DOSBase>,d0
    6d06:	|      movea.l d0,a6
    6d08:	|      move.l 24(sp),d1
    6d0c:	|      move.l 20(sp),d2
    6d10:	|      move.l 16(sp),d3
    6d14:	|      jsr -66(a6)
    6d18:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6d1c:	|      move.w #1,1c286 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6d24:	|      move.l 1c8ea <bigDataFile>,d0
    6d2a:	|      move.l d0,-(sp)
    6d2c:	|      jsr 718 <get4bytes>
    6d32:	|      addq.l #4,sp
}
    6d34:	\----> movem.l (sp)+,d2-d3/a6
    6d38:	       lea 32(sp),sp
    6d3c:	       rts

00006d3e <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6d3e:	       lea -32(sp),sp
    6d42:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6d46:	       move.w 1c286 <sliceBusy>,d0
    6d4c:	   /-- beq.s 6d68 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6d4e:	   |   pea 18c86 <PutChar+0x1030>
    6d54:	   |   pea 18ca4 <PutChar+0x104e>
    6d5a:	   |   jsr 171b4 <KPrintF>
    6d60:	   |   addq.l #8,sp
        return FALSE;
    6d62:	   |   clr.w d0
    6d64:	/--|-- bra.w 6df4 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6d68:	|  \-> move.l 1c8ea <bigDataFile>,40(sp)
    6d70:	|      move.l 48(sp),d0
    6d74:	|      add.l d0,d0
    6d76:	|      add.l d0,d0
    6d78:	|      move.l d0,d1
    6d7a:	|      move.l 1c8fe <startOfObjectIndex>,d0
    6d80:	|      add.l d1,d0
    6d82:	|      move.l d0,36(sp)
    6d86:	|      moveq #-1,d0
    6d88:	|      move.l d0,32(sp)
    6d8c:	|      move.l 1c90a <DOSBase>,d0
    6d92:	|      movea.l d0,a6
    6d94:	|      move.l 40(sp),d1
    6d98:	|      move.l 36(sp),d2
    6d9c:	|      move.l 32(sp),d3
    6da0:	|      jsr -66(a6)
    6da4:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6da8:	|      move.l 1c8ea <bigDataFile>,24(sp)
    6db0:	|      move.l 1c8ea <bigDataFile>,d0
    6db6:	|      move.l d0,-(sp)
    6db8:	|      jsr 718 <get4bytes>
    6dbe:	|      addq.l #4,sp
    6dc0:	|      move.l d0,20(sp)
    6dc4:	|      moveq #-1,d0
    6dc6:	|      move.l d0,16(sp)
    6dca:	|      move.l 1c90a <DOSBase>,d0
    6dd0:	|      movea.l d0,a6
    6dd2:	|      move.l 24(sp),d1
    6dd6:	|      move.l 20(sp),d2
    6dda:	|      move.l 16(sp),d3
    6dde:	|      jsr -66(a6)
    6de2:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6de6:	|      move.w #1,1c286 <sliceBusy>
    6dee:	|      move.w 1c286 <sliceBusy>,d0
}
    6df4:	\----> movem.l (sp)+,d2-d3/a6
    6df8:	       lea 32(sp),sp
    6dfc:	       rts

00006dfe <openSubSlice>:

BOOL openSubSlice (int num) {
    6dfe:	       lea -32(sp),sp
    6e02:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6e06:	       move.w 1c286 <sliceBusy>,d0
    6e0c:	   /-- beq.s 6e28 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6e0e:	   |   pea 18c86 <PutChar+0x1030>
    6e14:	   |   pea 18ca4 <PutChar+0x104e>
    6e1a:	   |   jsr 171b4 <KPrintF>
    6e20:	   |   addq.l #8,sp
		return FALSE;
    6e22:	   |   clr.w d0
    6e24:	/--|-- bra.w 6eb4 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6e28:	|  \-> move.l 1c8ea <bigDataFile>,40(sp)
    6e30:	|      move.l 48(sp),d0
    6e34:	|      add.l d0,d0
    6e36:	|      add.l d0,d0
    6e38:	|      move.l d0,d1
    6e3a:	|      move.l 1c8fa <startOfSubIndex>,d0
    6e40:	|      add.l d1,d0
    6e42:	|      move.l d0,36(sp)
    6e46:	|      moveq #-1,d0
    6e48:	|      move.l d0,32(sp)
    6e4c:	|      move.l 1c90a <DOSBase>,d0
    6e52:	|      movea.l d0,a6
    6e54:	|      move.l 40(sp),d1
    6e58:	|      move.l 36(sp),d2
    6e5c:	|      move.l 32(sp),d3
    6e60:	|      jsr -66(a6)
    6e64:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6e68:	|      move.l 1c8ea <bigDataFile>,24(sp)
    6e70:	|      move.l 1c8ea <bigDataFile>,d0
    6e76:	|      move.l d0,-(sp)
    6e78:	|      jsr 718 <get4bytes>
    6e7e:	|      addq.l #4,sp
    6e80:	|      move.l d0,20(sp)
    6e84:	|      moveq #-1,d0
    6e86:	|      move.l d0,16(sp)
    6e8a:	|      move.l 1c90a <DOSBase>,d0
    6e90:	|      movea.l d0,a6
    6e92:	|      move.l 24(sp),d1
    6e96:	|      move.l 20(sp),d2
    6e9a:	|      move.l 16(sp),d3
    6e9e:	|      jsr -66(a6)
    6ea2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6ea6:	|      move.w #1,1c286 <sliceBusy>
    6eae:	|      move.w 1c286 <sliceBusy>,d0
}
    6eb4:	\----> movem.l (sp)+,d2-d3/a6
    6eb8:	       lea 32(sp),sp
    6ebc:	       rts

00006ebe <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6ebe:	       lea -180(sp),sp
    6ec2:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6ec6:	       tst.l 196(sp)
    6eca:	/----- beq.s 6f0a <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6ecc:	|      move.l 196(sp),1c8ea <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6ed4:	|      move.l 196(sp),168(sp)
    6eda:	|      clr.l 164(sp)
    6ede:	|      clr.l 160(sp)
    6ee2:	|      move.l 1c90a <DOSBase>,d0
    6ee8:	|      movea.l d0,a6
    6eea:	|      move.l 168(sp),d1
    6eee:	|      move.l 164(sp),d2
    6ef2:	|      move.l 160(sp),d3
    6ef6:	|      jsr -66(a6)
    6efa:	|      move.l d0,156(sp)
    6efe:	|      move.l 156(sp),d0
    6f02:	|      move.l d0,1c8ee <startIndex>
    6f08:	|  /-- bra.s 6f44 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    6f0a:	\--|-> move.l 1c8ea <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6f12:	   |   move.l 196(sp),184(sp)
    6f18:	   |   move.l 1c8ee <startIndex>,d0
    6f1e:	   |   move.l d0,180(sp)
    6f22:	   |   moveq #-1,d0
    6f24:	   |   move.l d0,176(sp)
    6f28:	   |   move.l 1c90a <DOSBase>,d0
    6f2e:	   |   movea.l d0,a6
    6f30:	   |   move.l 184(sp),d1
    6f34:	   |   move.l 180(sp),d2
    6f38:	   |   move.l 176(sp),d3
    6f3c:	   |   jsr -66(a6)
    6f40:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6f44:	   \-> clr.w 1c286 <sliceBusy>

	if (skipBefore > numLanguages) {
    6f4a:	       move.l 204(sp),d0
    6f4e:	       cmp.l 200(sp),d0
    6f52:	   /-- bls.s 6f66 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6f54:	   |   pea 18cbe <PutChar+0x1068>
    6f5a:	   |   jsr 171b4 <KPrintF>
    6f60:	   |   addq.l #4,sp
		skipBefore = 0;
    6f62:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6f66:	   \-> move.l 200(sp),d0
    6f6a:	       sub.l 204(sp),d0
    6f6e:	       move.l d0,188(sp)
	while (skipBefore) {
    6f72:	   /-- bra.s 6fb0 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6f74:	/--|-> move.l 196(sp),24(sp)
    6f7a:	|  |   move.l 196(sp),-(sp)
    6f7e:	|  |   jsr 718 <get4bytes>
    6f84:	|  |   addq.l #4,sp
    6f86:	|  |   move.l d0,20(sp)
    6f8a:	|  |   moveq #-1,d0
    6f8c:	|  |   move.l d0,16(sp)
    6f90:	|  |   move.l 1c90a <DOSBase>,d0
    6f96:	|  |   movea.l d0,a6
    6f98:	|  |   move.l 24(sp),d1
    6f9c:	|  |   move.l 20(sp),d2
    6fa0:	|  |   move.l 16(sp),d3
    6fa4:	|  |   jsr -66(a6)
    6fa8:	|  |   move.l d0,12(sp)
		skipBefore --;
    6fac:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6fb0:	|  \-> tst.l 204(sp)
    6fb4:	\----- bne.s 6f74 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6fb6:	       move.l 196(sp),152(sp)
    6fbc:	       clr.l 148(sp)
    6fc0:	       clr.l 144(sp)
    6fc4:	       move.l 1c90a <DOSBase>,d0
    6fca:	       movea.l d0,a6
    6fcc:	       move.l 152(sp),d1
    6fd0:	       move.l 148(sp),d2
    6fd4:	       move.l 144(sp),d3
    6fd8:	       jsr -66(a6)
    6fdc:	       move.l d0,140(sp)
    6fe0:	       move.l 140(sp),d0
    6fe4:	       addq.l #4,d0
    6fe6:	       move.l d0,1c8f6 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6fec:	       move.l 196(sp),136(sp)
    6ff2:	       move.l 196(sp),-(sp)
    6ff6:	       jsr 718 <get4bytes>
    6ffc:	       addq.l #4,sp
    6ffe:	       move.l d0,132(sp)
    7002:	       moveq #-1,d0
    7004:	       move.l d0,128(sp)
    7008:	       move.l 1c90a <DOSBase>,d0
    700e:	       movea.l d0,a6
    7010:	       move.l 136(sp),d1
    7014:	       move.l 132(sp),d2
    7018:	       move.l 128(sp),d3
    701c:	       jsr -66(a6)
    7020:	       move.l d0,124(sp)

	while (skipAfter) {
    7024:	   /-- bra.s 7062 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7026:	/--|-> move.l 196(sp),40(sp)
    702c:	|  |   move.l 196(sp),-(sp)
    7030:	|  |   jsr 718 <get4bytes>
    7036:	|  |   addq.l #4,sp
    7038:	|  |   move.l d0,36(sp)
    703c:	|  |   moveq #-1,d0
    703e:	|  |   move.l d0,32(sp)
    7042:	|  |   move.l 1c90a <DOSBase>,d0
    7048:	|  |   movea.l d0,a6
    704a:	|  |   move.l 40(sp),d1
    704e:	|  |   move.l 36(sp),d2
    7052:	|  |   move.l 32(sp),d3
    7056:	|  |   jsr -66(a6)
    705a:	|  |   move.l d0,28(sp)
		skipAfter --;
    705e:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7062:	|  \-> tst.l 188(sp)
    7066:	\----- bne.s 7026 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7068:	       move.l 196(sp),120(sp)
    706e:	       clr.l 116(sp)
    7072:	       clr.l 112(sp)
    7076:	       move.l 1c90a <DOSBase>,d0
    707c:	       movea.l d0,a6
    707e:	       move.l 120(sp),d1
    7082:	       move.l 116(sp),d2
    7086:	       move.l 112(sp),d3
    708a:	       jsr -66(a6)
    708e:	       move.l d0,108(sp)
    7092:	       move.l 108(sp),d0
    7096:	       addq.l #4,d0
    7098:	       move.l d0,1c8fa <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    709e:	       move.l 196(sp),104(sp)
    70a4:	       move.l 196(sp),-(sp)
    70a8:	       jsr 718 <get4bytes>
    70ae:	       addq.l #4,sp
    70b0:	       move.l d0,100(sp)
    70b4:	       clr.l 96(sp)
    70b8:	       move.l 1c90a <DOSBase>,d0
    70be:	       movea.l d0,a6
    70c0:	       move.l 104(sp),d1
    70c4:	       move.l 100(sp),d2
    70c8:	       move.l 96(sp),d3
    70cc:	       jsr -66(a6)
    70d0:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    70d4:	       move.l 196(sp),88(sp)
    70da:	       clr.l 84(sp)
    70de:	       clr.l 80(sp)
    70e2:	       move.l 1c90a <DOSBase>,d0
    70e8:	       movea.l d0,a6
    70ea:	       move.l 88(sp),d1
    70ee:	       move.l 84(sp),d2
    70f2:	       move.l 80(sp),d3
    70f6:	       jsr -66(a6)
    70fa:	       move.l d0,76(sp)
    70fe:	       move.l 76(sp),d0
    7102:	       addq.l #4,d0
    7104:	       move.l d0,1c8fe <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    710a:	       move.l 196(sp),72(sp)
    7110:	       move.l 196(sp),-(sp)
    7114:	       jsr 718 <get4bytes>
    711a:	       addq.l #4,sp
    711c:	       move.l d0,68(sp)
    7120:	       clr.l 64(sp)
    7124:	       move.l 1c90a <DOSBase>,d0
    712a:	       movea.l d0,a6
    712c:	       move.l 72(sp),d1
    7130:	       move.l 68(sp),d2
    7134:	       move.l 64(sp),d3
    7138:	       jsr -66(a6)
    713c:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7140:	       move.l 196(sp),56(sp)
    7146:	       clr.l 52(sp)
    714a:	       clr.l 48(sp)
    714e:	       move.l 1c90a <DOSBase>,d0
    7154:	       movea.l d0,a6
    7156:	       move.l 56(sp),d1
    715a:	       move.l 52(sp),d2
    715e:	       move.l 48(sp),d3
    7162:	       jsr -66(a6)
    7166:	       move.l d0,44(sp)
    716a:	       move.l 44(sp),d0
    716e:	       move.l d0,1c8f2 <startOfDataIndex>
    7174:	       nop
    7176:	       movem.l (sp)+,d2-d3/a6
    717a:	       lea 180(sp),sp
    717e:	       rts

00007180 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7180:	    lea -20(sp),sp
    7184:	    move.l a6,-(sp)
    7186:	    move.l d7,-(sp)
	APTR vbr = 0;
    7188:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    718c:	    move.w #20090,10(sp)
    7192:	    move.w #2049,12(sp)
    7198:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    719e:	    movea.l 1c902 <SysBase>,a0
    71a4:	    move.w 296(a0),d0
    71a8:	    move.w d0,d0
    71aa:	    andi.l #65535,d0
    71b0:	    moveq #1,d1
    71b2:	    and.l d1,d0
    71b4:	/-- beq.s 71e2 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    71b6:	|   lea 28(sp),a0
    71ba:	|   lea -18(a0),a0
    71be:	|   move.l a0,20(sp)
    71c2:	|   move.l 1c902 <SysBase>,d0
    71c8:	|   movea.l d0,a6
    71ca:	|   move.l 20(sp),d7
    71ce:	|   exg d7,a5
    71d0:	|   jsr -30(a6)
    71d4:	|   exg d7,a5
    71d6:	|   move.l d0,16(sp)
    71da:	|   move.l 16(sp),d0
    71de:	|   move.l d0,24(sp)

	return vbr;
    71e2:	\-> move.l 24(sp),d0
}
    71e6:	    move.l (sp)+,d7
    71e8:	    movea.l (sp)+,a6
    71ea:	    lea 20(sp),sp
    71ee:	    rts

000071f0 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    71f0:	movea.l 1c928 <VBR>,a0
    71f6:	lea 108(a0),a0
    71fa:	move.l 4(sp),(a0)
}
    71fe:	nop
    7200:	rts

00007202 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7202:	movea.l 1c928 <VBR>,a0
    7208:	move.l 108(a0),d0
}
    720c:	rts

0000720e <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    720e:	       subq.l #8,sp
    7210:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7212:	       pea 18d07 <PutChar+0x10b1>
    7218:	       jsr 171b4 <KPrintF>
    721e:	       addq.l #4,sp
	Forbid();
    7220:	       move.l 1c902 <SysBase>,d0
    7226:	       movea.l d0,a6
    7228:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    722c:	       pea 18d1f <PutChar+0x10c9>
    7232:	       jsr 171b4 <KPrintF>
    7238:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    723a:	       movea.l 1c906 <custom>,a0
    7240:	       move.w 16(a0),d0
    7244:	       move.w d0,1c926 <SystemADKCON>
	SystemInts=custom->intenar;
    724a:	       movea.l 1c906 <custom>,a0
    7250:	       move.w 28(a0),d0
    7254:	       move.w d0,1c922 <SystemInts>
	SystemDMA=custom->dmaconr;
    725a:	       movea.l 1c906 <custom>,a0
    7260:	       move.w 2(a0),d0
    7264:	       move.w d0,1c924 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    726a:	       movea.l 1c90e <GfxBase>,a0
    7270:	       move.l 34(a0),d0
    7274:	       move.l d0,1c930 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    727a:	       pea 18d3d <PutChar+0x10e7>
    7280:	       jsr 171b4 <KPrintF>
    7286:	       addq.l #4,sp
	LoadView(0);
    7288:	       clr.l 4(sp)
    728c:	       move.l 1c90e <GfxBase>,d0
    7292:	       movea.l d0,a6
    7294:	       movea.l 4(sp),a1
    7298:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    729c:	       pea 18d53 <PutChar+0x10fd>
    72a2:	       jsr 171b4 <KPrintF>
    72a8:	       addq.l #4,sp
	WaitTOF();
    72aa:	       move.l 1c90e <GfxBase>,d0
    72b0:	       movea.l d0,a6
    72b2:	       jsr -270(a6)
	WaitTOF();
    72b6:	       move.l 1c90e <GfxBase>,d0
    72bc:	       movea.l d0,a6
    72be:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    72c2:	       pea 18d68 <PutChar+0x1112>
    72c8:	       jsr 171b4 <KPrintF>
    72ce:	       addq.l #4,sp
	WaitVbl();
    72d0:	       jsr 170e8 <WaitVbl>
	WaitVbl();
    72d6:	       jsr 170e8 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    72dc:	       pea 18d7d <PutChar+0x1127>
    72e2:	       jsr 171b4 <KPrintF>
    72e8:	       addq.l #4,sp
	OwnBlitter();
    72ea:	       move.l 1c90e <GfxBase>,d0
    72f0:	       movea.l d0,a6
    72f2:	       jsr -456(a6)
	WaitBlit();	
    72f6:	       move.l 1c90e <GfxBase>,d0
    72fc:	       movea.l d0,a6
    72fe:	       jsr -228(a6)
	Disable();
    7302:	       move.l 1c902 <SysBase>,d0
    7308:	       movea.l d0,a6
    730a:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    730e:	       pea 18d9e <PutChar+0x1148>
    7314:	       jsr 171b4 <KPrintF>
    731a:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    731c:	       movea.l 1c906 <custom>,a0
    7322:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7328:	       pea 18db5 <PutChar+0x115f>
    732e:	       jsr 171b4 <KPrintF>
    7334:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7336:	       clr.l 8(sp)
    733a:	   /-- bra.s 7358 <TakeSystem+0x14a>
		custom->color[a]=0;
    733c:	/--|-> movea.l 1c906 <custom>,a0
    7342:	|  |   move.l 8(sp),d0
    7346:	|  |   addi.l #192,d0
    734c:	|  |   add.l d0,d0
    734e:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7354:	|  |   addq.l #1,8(sp)
    7358:	|  \-> moveq #31,d0
    735a:	|      cmp.l 8(sp),d0
    735e:	\----- bge.s 733c <TakeSystem+0x12e>

	WaitVbl();
    7360:	       jsr 170e8 <WaitVbl>
	WaitVbl();
    7366:	       jsr 170e8 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    736c:	       pea 18dda <PutChar+0x1184>
    7372:	       jsr 171b4 <KPrintF>
    7378:	       addq.l #4,sp
	VBR=GetVBR();
    737a:	       jsr 7180 <GetVBR>
    7380:	       move.l d0,1c928 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7386:	       jsr 7202 <GetInterruptHandler>
    738c:	       move.l d0,1c92c <SystemIrq>
}
    7392:	       nop
    7394:	       movea.l (sp)+,a6
    7396:	       addq.l #8,sp
    7398:	       rts

0000739a <FreeSystem>:

void FreeSystem() { 
    739a:	subq.l #4,sp
    739c:	move.l a6,-(sp)
	WaitVbl();
    739e:	jsr 170e8 <WaitVbl>
	WaitBlit();
    73a4:	move.l 1c90e <GfxBase>,d0
    73aa:	movea.l d0,a6
    73ac:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    73b0:	movea.l 1c906 <custom>,a0
    73b6:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    73bc:	movea.l 1c906 <custom>,a0
    73c2:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    73c8:	movea.l 1c906 <custom>,a0
    73ce:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    73d4:	move.l 1c92c <SystemIrq>,d0
    73da:	move.l d0,-(sp)
    73dc:	jsr 71f0 <SetInterruptHandler>
    73e2:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    73e4:	movea.l 1c90e <GfxBase>,a0
    73ea:	move.l 38(a0),d0
    73ee:	movea.l 1c906 <custom>,a0
    73f4:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    73f8:	movea.l 1c90e <GfxBase>,a0
    73fe:	move.l 50(a0),d0
    7402:	movea.l 1c906 <custom>,a0
    7408:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    740c:	movea.l 1c906 <custom>,a0
    7412:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7418:	move.w 1c924 <SystemDMA>,d0
    741e:	movea.l 1c906 <custom>,a0
    7424:	ori.w #-32768,d0
    7428:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    742c:	move.w 1c926 <SystemADKCON>,d0
    7432:	movea.l 1c906 <custom>,a0
    7438:	ori.w #-32768,d0
    743c:	move.w d0,158(a0)

	WaitBlit();	
    7440:	move.l 1c90e <GfxBase>,d0
    7446:	movea.l d0,a6
    7448:	jsr -228(a6)
	DisownBlitter();
    744c:	move.l 1c90e <GfxBase>,d0
    7452:	movea.l d0,a6
    7454:	jsr -462(a6)
	Enable();
    7458:	move.l 1c902 <SysBase>,d0
    745e:	movea.l d0,a6
    7460:	jsr -126(a6)

	LoadView(ActiView);
    7464:	move.l 1c930 <ActiView>,4(sp)
    746c:	move.l 1c90e <GfxBase>,d0
    7472:	movea.l d0,a6
    7474:	movea.l 4(sp),a1
    7478:	jsr -222(a6)
	WaitTOF();
    747c:	move.l 1c90e <GfxBase>,d0
    7482:	movea.l d0,a6
    7484:	jsr -270(a6)
	WaitTOF();
    7488:	move.l 1c90e <GfxBase>,d0
    748e:	movea.l d0,a6
    7490:	jsr -270(a6)

	Permit();
    7494:	move.l 1c902 <SysBase>,d0
    749a:	movea.l d0,a6
    749c:	jsr -138(a6)
}
    74a0:	nop
    74a2:	movea.l (sp)+,a6
    74a4:	addq.l #4,sp
    74a6:	rts

000074a8 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    74a8:	    lea -132(sp),sp
    74ac:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    74b0:	    move.l #512,140(sp)
  	*bp = 0;
    74b8:	    movea.l 140(sp),a0
    74bc:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    74be:	    movea.w #4,a0
    74c2:	    move.l (a0),d0
    74c4:	    move.l d0,1c902 <SysBase>
	custom = (struct Custom*)0xdff000;	
    74ca:	    move.l #14675968,1c906 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    74d4:	    move.l #101886,136(sp)
    74dc:	    clr.l 132(sp)
    74e0:	    move.l 1c902 <SysBase>,d0
    74e6:	    movea.l d0,a6
    74e8:	    movea.l 136(sp),a1
    74ec:	    move.l 132(sp),d0
    74f0:	    jsr -552(a6)
    74f4:	    move.l d0,128(sp)
    74f8:	    move.l 128(sp),d0
    74fc:	    move.l d0,1c90e <GfxBase>
	if (!GfxBase)
    7502:	    move.l 1c90e <GfxBase>,d0
    7508:	/-- bne.s 751e <main+0x76>
		Exit(0);
    750a:	|   clr.l 124(sp)
    750e:	|   move.l 1c90a <DOSBase>,d0
    7514:	|   movea.l d0,a6
    7516:	|   move.l 124(sp),d1
    751a:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    751e:	\-> move.l #101903,120(sp)
    7526:	    clr.l 116(sp)
    752a:	    move.l 1c902 <SysBase>,d0
    7530:	    movea.l d0,a6
    7532:	    movea.l 120(sp),a1
    7536:	    move.l 116(sp),d0
    753a:	    jsr -552(a6)
    753e:	    move.l d0,112(sp)
    7542:	    move.l 112(sp),d0
    7546:	    move.l d0,1c90a <DOSBase>
	if (!DOSBase)
    754c:	    move.l 1c90a <DOSBase>,d0
    7552:	/-- bne.s 7568 <main+0xc0>
		Exit(0);
    7554:	|   clr.l 108(sp)
    7558:	|   move.l 1c90a <DOSBase>,d0
    755e:	|   movea.l d0,a6
    7560:	|   move.l 108(sp),d1
    7564:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7568:	\-> move.l #101915,104(sp)
    7570:	    clr.l 100(sp)
    7574:	    move.l 1c902 <SysBase>,d0
    757a:	    movea.l d0,a6
    757c:	    movea.l 104(sp),a1
    7580:	    move.l 100(sp),d0
    7584:	    jsr -552(a6)
    7588:	    move.l d0,96(sp)
    758c:	    move.l 96(sp),d0
    7590:	    move.l d0,1c912 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7596:	    move.l 1c912 <MathIeeeSingBasBase>,d0
    759c:	/-- bne.s 75b2 <main+0x10a>
		Exit(0);	
    759e:	|   clr.l 92(sp)
    75a2:	|   move.l 1c90a <DOSBase>,d0
    75a8:	|   movea.l d0,a6
    75aa:	|   move.l 92(sp),d1
    75ae:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    75b2:	\-> move.l #101939,88(sp)
    75ba:	    clr.l 84(sp)
    75be:	    move.l 1c902 <SysBase>,d0
    75c4:	    movea.l d0,a6
    75c6:	    movea.l 88(sp),a1
    75ca:	    move.l 84(sp),d0
    75ce:	    jsr -552(a6)
    75d2:	    move.l d0,80(sp)
    75d6:	    move.l 80(sp),d0
    75da:	    move.l d0,1c916 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    75e0:	    move.l 1c916 <MathIeeeSingTransBase>,d0
    75e6:	/-- bne.s 75fc <main+0x154>
		Exit(0);
    75e8:	|   clr.l 76(sp)
    75ec:	|   move.l 1c90a <DOSBase>,d0
    75f2:	|   movea.l d0,a6
    75f4:	|   move.l 76(sp),d1
    75f8:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    75fc:	\-> move.l #101965,72(sp)
    7604:	    clr.l 68(sp)
    7608:	    move.l 1c902 <SysBase>,d0
    760e:	    movea.l d0,a6
    7610:	    movea.l 72(sp),a1
    7614:	    move.l 68(sp),d0
    7618:	    jsr -552(a6)
    761c:	    move.l d0,64(sp)
    7620:	    move.l 64(sp),d0
    7624:	    move.l d0,1c91e <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    762a:	    move.l 1c91e <MathIeeeDoubTransBase>,d0
    7630:	/-- bne.s 7646 <main+0x19e>
		Exit(0);
    7632:	|   clr.l 60(sp)
    7636:	|   move.l 1c90a <DOSBase>,d0
    763c:	|   movea.l d0,a6
    763e:	|   move.l 60(sp),d1
    7642:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7646:	\-> move.l #101991,56(sp)
    764e:	    clr.l 52(sp)
    7652:	    move.l 1c902 <SysBase>,d0
    7658:	    movea.l d0,a6
    765a:	    movea.l 56(sp),a1
    765e:	    move.l 52(sp),d0
    7662:	    jsr -552(a6)
    7666:	    move.l d0,48(sp)
    766a:	    move.l 48(sp),d0
    766e:	    move.l d0,1c91a <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7674:	    move.l 1c91a <MathIeeeDoubBasBase>,d0
    767a:	/-- bne.s 7690 <main+0x1e8>
		Exit(0);
    767c:	|   clr.l 44(sp)
    7680:	|   move.l 1c90a <DOSBase>,d0
    7686:	|   movea.l d0,a6
    7688:	|   move.l 44(sp),d1
    768c:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 031!\n");
    7690:	\-> pea 18e7f <PutChar+0x1229>
    7696:	    jsr 171b4 <KPrintF>
    769c:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 031!\n", 25);
    769e:	    move.l 1c90a <DOSBase>,d0
    76a4:	    movea.l d0,a6
    76a6:	    jsr -60(a6)
    76aa:	    move.l d0,40(sp)
    76ae:	    move.l 40(sp),d0
    76b2:	    move.l d0,36(sp)
    76b6:	    move.l #102047,32(sp)
    76be:	    moveq #25,d0
    76c0:	    move.l d0,28(sp)
    76c4:	    move.l 1c90a <DOSBase>,d0
    76ca:	    movea.l d0,a6
    76cc:	    move.l 36(sp),d1
    76d0:	    move.l 32(sp),d2
    76d4:	    move.l 28(sp),d3
    76d8:	    jsr -48(a6)
    76dc:	    move.l d0,24(sp)
	Delay(50);
    76e0:	    moveq #50,d0
    76e2:	    move.l d0,20(sp)
    76e6:	    move.l 1c90a <DOSBase>,d0
    76ec:	    movea.l d0,a6
    76ee:	    move.l 20(sp),d1
    76f2:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    76f6:	    pea 18eb8 <PutChar+0x1262>
    76fc:	    jsr 171b4 <KPrintF>
    7702:	    addq.l #4,sp
	TakeSystem();
    7704:	    jsr 720e <TakeSystem>
	KPrintF("System Taken\n");
    770a:	    pea 18ec7 <PutChar+0x1271>
    7710:	    jsr 171b4 <KPrintF>
    7716:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7718:	    movea.l 1c906 <custom>,a0
    771e:	    move.w #-30721,150(a0)
	WaitVbl();
    7724:	    jsr 170e8 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    772a:	    pea 18ed5 <PutChar+0x127f>
    7730:	    jsr 171b4 <KPrintF>
    7736:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7738:	    move.l 152(sp),-(sp)
    773c:	    move.l 152(sp),-(sp)
    7740:	    jsr 403e <main_sludge>
    7746:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7748:	    jsr 739a <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    774e:	    move.l 1c90a <DOSBase>,16(sp)
    7756:	    move.l 1c902 <SysBase>,d0
    775c:	    movea.l d0,a6
    775e:	    movea.l 16(sp),a1
    7762:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7766:	    move.l 1c90e <GfxBase>,12(sp)
    776e:	    move.l 1c902 <SysBase>,d0
    7774:	    movea.l d0,a6
    7776:	    movea.l 12(sp),a1
    777a:	    jsr -414(a6)
    777e:	    moveq #0,d0
}
    7780:	    movem.l (sp)+,d2-d3/a6
    7784:	    lea 132(sp),sp
    7788:	    rts

0000778a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    778a:	    lea -16(sp),sp
    778e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7790:	    moveq #8,d0
    7792:	    move.l d0,16(sp)
    7796:	    clr.l 12(sp)
    779a:	    move.l 1c902 <SysBase>,d0
    77a0:	    movea.l d0,a6
    77a2:	    move.l 16(sp),d0
    77a6:	    move.l 12(sp),d1
    77aa:	    jsr -684(a6)
    77ae:	    move.l d0,8(sp)
    77b2:	    move.l 8(sp),d0
    77b6:	    move.l d0,4(sp)
	if (!newStat) {
    77ba:	/-- bne.s 77ea <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    77bc:	|   movea.l 1c288 <nowStatus>,a0
    77c2:	|   move.l (a0),d0
    77c4:	|   movea.l 4(sp),a0
    77c8:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    77cc:	|   pea 1892b <PutChar+0xcd5>
    77d2:	|   jsr b8 <copyString>
    77d8:	|   addq.l #4,sp
    77da:	|   movea.l 4(sp),a0
    77de:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    77e0:	|   movea.l 1c288 <nowStatus>,a0
    77e6:	|   move.l 4(sp),(a0)
	}
}
    77ea:	\-> nop
    77ec:	    movea.l (sp)+,a6
    77ee:	    lea 16(sp),sp
    77f2:	    rts

000077f4 <clearStatusBar>:

void clearStatusBar () {
    77f4:	       lea -16(sp),sp
    77f8:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    77fa:	       movea.l 1c288 <nowStatus>,a0
    7800:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    7804:	       movea.l 1c288 <nowStatus>,a0
    780a:	       moveq #-1,d0
    780c:	       move.l d0,6(a0)
	while (stat) {
    7810:	   /-- bra.s 7850 <clearStatusBar+0x5c>
		kill = stat;
    7812:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7818:	|  |   movea.l 16(sp),a0
    781c:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    7822:	|  |   movea.l 12(sp),a0
    7826:	|  |   move.l (a0),8(sp)
    782a:	|  |   move.l 1c902 <SysBase>,d0
    7830:	|  |   movea.l d0,a6
    7832:	|  |   movea.l 8(sp),a1
    7836:	|  |   jsr -690(a6)
		FreeVec(kill);
    783a:	|  |   move.l 12(sp),4(sp)
    7840:	|  |   move.l 1c902 <SysBase>,d0
    7846:	|  |   movea.l d0,a6
    7848:	|  |   movea.l 4(sp),a1
    784c:	|  |   jsr -690(a6)
	while (stat) {
    7850:	|  \-> tst.l 16(sp)
    7854:	\----- bne.s 7812 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7856:	       movea.l 1c288 <nowStatus>,a0
    785c:	       clr.l (a0)
}
    785e:	       nop
    7860:	       movea.l (sp)+,a6
    7862:	       lea 16(sp),sp
    7866:	       rts

00007868 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7868:	clr.l 1c934 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    786e:	move.w #-1,1c938 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7876:	moveq #-1,d0
    7878:	move.l d0,1c93a <mainStatus+0x6>
	mainStatus.statusX = 10;
    787e:	moveq #10,d0
    7880:	move.l d0,1c93e <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7886:	movea.l 1c85a <winHeight>,a0
    788c:	lea -15(a0),a0
    7890:	move.l a0,d0
    7892:	move.l d0,1c942 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7898:	nop
    789a:	rts

0000789c <killLastStatus>:

void killLastStatus () {
    789c:	    lea -12(sp),sp
    78a0:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    78a2:	    movea.l 1c288 <nowStatus>,a0
    78a8:	    move.l (a0),d0
    78aa:	/-- beq.s 78f4 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    78ac:	|   movea.l 1c288 <nowStatus>,a0
    78b2:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    78b6:	|   movea.l 1c288 <nowStatus>,a0
    78bc:	|   movea.l 12(sp),a1
    78c0:	|   move.l 4(a1),d0
    78c4:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    78c6:	|   movea.l 12(sp),a0
    78ca:	|   move.l (a0),8(sp)
    78ce:	|   move.l 1c902 <SysBase>,d0
    78d4:	|   movea.l d0,a6
    78d6:	|   movea.l 8(sp),a1
    78da:	|   jsr -690(a6)
		FreeVec(kill);
    78de:	|   move.l 12(sp),4(sp)
    78e4:	|   move.l 1c902 <SysBase>,d0
    78ea:	|   movea.l d0,a6
    78ec:	|   movea.l 4(sp),a1
    78f0:	|   jsr -690(a6)
	}
}
    78f4:	\-> nop
    78f6:	    movea.l (sp)+,a6
    78f8:	    lea 12(sp),sp
    78fc:	    rts

000078fe <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    78fe:	movea.l 1c288 <nowStatus>,a0
    7904:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    790a:	movea.l 1c288 <nowStatus>,a0
    7910:	move.l 8(sp),14(a0)
}
    7916:	nop
    7918:	rts

0000791a <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    791a:	       lea -100(sp),sp
    791e:	       move.l a6,-(sp)
    7920:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7922:	       movea.l 1c288 <nowStatus>,a0
    7928:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    792c:	       movea.l 1c288 <nowStatus>,a0
    7932:	       move.w 4(a0),d0
    7936:	       move.w d0,d0
    7938:	       andi.l #65535,d0
    793e:	       move.l 112(sp),-(sp)
    7942:	       move.l d0,-(sp)
    7944:	       jsr 8d0 <put2bytes>
    794a:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    794c:	       movea.l 1c288 <nowStatus>,a0
    7952:	       move.l 6(a0),d0
    7956:	       move.l d0,d0
    7958:	       movea.w d0,a0
    795a:	       move.l 112(sp),-(sp)
    795e:	       move.l a0,-(sp)
    7960:	       jsr a9c <putSigned>
    7966:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7968:	       movea.l 1c288 <nowStatus>,a0
    796e:	       move.l 10(a0),d0
    7972:	       move.l 112(sp),-(sp)
    7976:	       move.l d0,-(sp)
    7978:	       jsr 8d0 <put2bytes>
    797e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7980:	       movea.l 1c288 <nowStatus>,a0
    7986:	       move.l 14(a0),d0
    798a:	       move.l 112(sp),-(sp)
    798e:	       move.l d0,-(sp)
    7990:	       jsr 8d0 <put2bytes>
    7996:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7998:	       move.l 112(sp),100(sp)
    799e:	       movea.l 1c288 <nowStatus>,a0
    79a4:	       move.l 18(a0),96(sp)
    79aa:	       move.l 1c90a <DOSBase>,d0
    79b0:	       movea.l d0,a6
    79b2:	       move.l 100(sp),d1
    79b6:	       move.l 96(sp),d2
    79ba:	       jsr -312(a6)
    79be:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    79c2:	       move.l 112(sp),88(sp)
    79c8:	       movea.l 1c288 <nowStatus>,a0
    79ce:	       move.l 22(a0),84(sp)
    79d4:	       move.l 1c90a <DOSBase>,d0
    79da:	       movea.l d0,a6
    79dc:	       move.l 88(sp),d1
    79e0:	       move.l 84(sp),d2
    79e4:	       jsr -312(a6)
    79e8:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    79ec:	       move.l 112(sp),76(sp)
    79f2:	       movea.l 1c288 <nowStatus>,a0
    79f8:	       move.l 26(a0),72(sp)
    79fe:	       move.l 1c90a <DOSBase>,d0
    7a04:	       movea.l d0,a6
    7a06:	       move.l 76(sp),d1
    7a0a:	       move.l 72(sp),d2
    7a0e:	       jsr -312(a6)
    7a12:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7a16:	       move.l 112(sp),64(sp)
    7a1c:	       movea.l 1c288 <nowStatus>,a0
    7a22:	       move.l 30(a0),60(sp)
    7a28:	       move.l 1c90a <DOSBase>,d0
    7a2e:	       movea.l d0,a6
    7a30:	       move.l 64(sp),d1
    7a34:	       move.l 60(sp),d2
    7a38:	       jsr -312(a6)
    7a3c:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7a40:	       move.l 112(sp),52(sp)
    7a46:	       movea.l 1c288 <nowStatus>,a0
    7a4c:	       move.l 34(a0),48(sp)
    7a52:	       move.l 1c90a <DOSBase>,d0
    7a58:	       movea.l d0,a6
    7a5a:	       move.l 52(sp),d1
    7a5e:	       move.l 48(sp),d2
    7a62:	       jsr -312(a6)
    7a66:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7a6a:	       move.l 112(sp),40(sp)
    7a70:	       movea.l 1c288 <nowStatus>,a0
    7a76:	       move.l 38(a0),36(sp)
    7a7c:	       move.l 1c90a <DOSBase>,d0
    7a82:	       movea.l d0,a6
    7a84:	       move.l 40(sp),d1
    7a88:	       move.l 36(sp),d2
    7a8c:	       jsr -312(a6)
    7a90:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7a94:	   /-- bra.s 7ad8 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7a96:	/--|-> move.l 112(sp),16(sp)
    7a9c:	|  |   moveq #1,d0
    7a9e:	|  |   move.l d0,12(sp)
    7aa2:	|  |   move.l 1c90a <DOSBase>,d0
    7aa8:	|  |   movea.l d0,a6
    7aaa:	|  |   move.l 16(sp),d1
    7aae:	|  |   move.l 12(sp),d2
    7ab2:	|  |   jsr -312(a6)
    7ab6:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7aba:	|  |   movea.l 104(sp),a0
    7abe:	|  |   move.l (a0),d0
    7ac0:	|  |   move.l 112(sp),-(sp)
    7ac4:	|  |   move.l d0,-(sp)
    7ac6:	|  |   jsr bd8 <writeString>
    7acc:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7ace:	|  |   movea.l 104(sp),a0
    7ad2:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7ad8:	|  \-> tst.l 104(sp)
    7adc:	\----- bne.s 7a96 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7ade:	       move.l 112(sp),28(sp)
    7ae4:	       clr.l 24(sp)
    7ae8:	       move.l 1c90a <DOSBase>,d0
    7aee:	       movea.l d0,a6
    7af0:	       move.l 28(sp),d1
    7af4:	       move.l 24(sp),d2
    7af8:	       jsr -312(a6)
    7afc:	       move.l d0,20(sp)
}
    7b00:	       nop
    7b02:	       move.l (sp)+,d2
    7b04:	       movea.l (sp)+,a6
    7b06:	       lea 100(sp),sp
    7b0a:	       rts

00007b0c <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7b0c:	movea.l 1c288 <nowStatus>,a0
    7b12:	move.l 4(sp),6(a0)
}
    7b18:	nop
    7b1a:	rts

00007b1c <setStatusBar>:

void setStatusBar (char * txt) {
    7b1c:	    subq.l #4,sp
    7b1e:	    move.l a6,-(sp)
    7b20:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7b22:	    movea.l 1c288 <nowStatus>,a0
    7b28:	    move.l (a0),d0
    7b2a:	/-- beq.s 7b5e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7b2c:	|   movea.l 1c288 <nowStatus>,a0
    7b32:	|   movea.l (a0),a0
    7b34:	|   move.l (a0),8(sp)
    7b38:	|   move.l 1c902 <SysBase>,d0
    7b3e:	|   movea.l d0,a6
    7b40:	|   movea.l 8(sp),a1
    7b44:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7b48:	|   movea.l 1c288 <nowStatus>,a0
    7b4e:	|   movea.l (a0),a2
    7b50:	|   move.l 16(sp),-(sp)
    7b54:	|   jsr b8 <copyString>
    7b5a:	|   addq.l #4,sp
    7b5c:	|   move.l d0,(a2)
	}
}
    7b5e:	\-> nop
    7b60:	    movea.l (sp)+,a2
    7b62:	    movea.l (sp)+,a6
    7b64:	    addq.l #4,sp
    7b66:	    rts

00007b68 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7b68:	       movea.l 1c288 <nowStatus>,a0
    7b6e:	       move.l (a0),d0
    7b70:	/----- beq.s 7b7e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7b72:	|      movea.l 1c288 <nowStatus>,a0
    7b78:	|      movea.l (a0),a0
    7b7a:	|      move.l (a0),d0
    7b7c:	|  /-- bra.s 7b84 <statusBarText+0x1c>
	} else {
		return "";
    7b7e:	\--|-> move.l #100651,d0
	}
    7b84:	   \-> rts

00007b86 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7b86:	       lea -28(sp),sp
    7b8a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7b8e:	       move.l 52(sp),-(sp)
    7b92:	       jsr 15836 <stringWidth>
    7b98:	       addq.l #4,sp
    7b9a:	       asr.l #1,d0
    7b9c:	       move.l d0,-(sp)
    7b9e:	       jsr 175e6 <__floatsisf>
    7ba4:	       addq.l #4,sp
    7ba6:	       move.l d0,d1
    7ba8:	       move.l 1c2a0 <cameraZoom>,d0
    7bae:	       move.l d0,-(sp)
    7bb0:	       move.l d1,-(sp)
    7bb2:	       jsr 1749c <__divsf3>
    7bb8:	       addq.l #8,sp
    7bba:	       move.l d0,-(sp)
    7bbc:	       jsr 1757e <__fixsfsi>
    7bc2:	       addq.l #4,sp
    7bc4:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7bc8:	       move.l 56(sp),d0
    7bcc:	       sub.l 44(sp),d0
    7bd0:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7bd4:	       move.l 56(sp),d0
    7bd8:	       add.l 44(sp),d0
    7bdc:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7be0:	       moveq #12,d0
    7be2:	       move.l d0,32(sp)
    7be6:	       clr.l 28(sp)
    7bea:	       move.l 1c902 <SysBase>,d0
    7bf0:	       movea.l d0,a6
    7bf2:	       move.l 32(sp),d0
    7bf6:	       move.l 28(sp),d1
    7bfa:	       jsr -684(a6)
    7bfe:	       move.l d0,24(sp)
    7c02:	       move.l 24(sp),d0
    7c06:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7c0a:	       movea.l 1c95e <speech>,a0
    7c10:	       move.l 4(a0),d0
    7c14:	       movea.l 20(sp),a0
    7c18:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7c1c:	       move.l 52(sp),-(sp)
    7c20:	       jsr b8 <copyString>
    7c26:	       addq.l #4,sp
    7c28:	       movea.l 20(sp),a0
    7c2c:	       move.l d0,(a0)
	newLine -> x = xx1;
    7c2e:	       movea.l 20(sp),a0
    7c32:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7c38:	       movea.l 1c95e <speech>,a0
    7c3e:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7c44:	       moveq #4,d0
    7c46:	       cmp.l 40(sp),d0
    7c4a:	   /-- blt.s 7c6c <addSpeechLine+0xe6>
    7c4c:	   |   movea.l 60(sp),a0
    7c50:	   |   move.l (a0),d1
    7c52:	   |   moveq #5,d0
    7c54:	   |   sub.l 40(sp),d0
    7c58:	   |   cmp.l d1,d0
    7c5a:	   +-- ble.s 7c6c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7c5c:	   |   moveq #5,d0
    7c5e:	   |   sub.l 40(sp),d0
    7c62:	   |   movea.l 60(sp),a0
    7c66:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7c68:	/--|-- bra.w 7d98 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7c6c:	|  \-> move.l 36(sp),-(sp)
    7c70:	|      jsr 175e6 <__floatsisf>
    7c76:	|      addq.l #4,sp
    7c78:	|      move.l d0,d2
    7c7a:	|      move.l 1c856 <winWidth>,d0
    7c80:	|      move.l d0,-(sp)
    7c82:	|      jsr 1760e <__floatunsisf>
    7c88:	|      addq.l #4,sp
    7c8a:	|      move.l d0,d1
    7c8c:	|      move.l 1c2a0 <cameraZoom>,d0
    7c92:	|      move.l d0,-(sp)
    7c94:	|      move.l d1,-(sp)
    7c96:	|      jsr 1749c <__divsf3>
    7c9c:	|      addq.l #8,sp
    7c9e:	|      move.l #1084227584,-(sp)
    7ca4:	|      move.l d0,-(sp)
    7ca6:	|      jsr 178da <__subsf3>
    7cac:	|      addq.l #8,sp
    7cae:	|      move.l d0,-(sp)
    7cb0:	|      move.l d2,-(sp)
    7cb2:	|      jsr 176ce <__gesf2>
    7cb8:	|      addq.l #8,sp
    7cba:	|      tst.l d0
    7cbc:	|  /-- bge.s 7cc2 <addSpeechLine+0x13c>
}
    7cbe:	+--|-- bra.w 7d98 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7cc2:	|  \-> movea.l 60(sp),a0
    7cc6:	|      move.l (a0),d0
    7cc8:	|      move.l d0,-(sp)
    7cca:	|      jsr 175e6 <__floatsisf>
    7cd0:	|      addq.l #4,sp
    7cd2:	|      move.l d0,-(sp)
    7cd4:	|      jsr 17508 <__extendsfdf2>
    7cda:	|      addq.l #4,sp
    7cdc:	|      move.l d0,d4
    7cde:	|      move.l d1,d5
    7ce0:	|      move.l 1c856 <winWidth>,d0
    7ce6:	|      move.l d0,-(sp)
    7ce8:	|      jsr 1760e <__floatunsisf>
    7cee:	|      addq.l #4,sp
    7cf0:	|      move.l d0,d1
    7cf2:	|      move.l 1c2a0 <cameraZoom>,d0
    7cf8:	|      move.l d0,-(sp)
    7cfa:	|      move.l d1,-(sp)
    7cfc:	|      jsr 1749c <__divsf3>
    7d02:	|      addq.l #8,sp
    7d04:	|      move.l d0,-(sp)
    7d06:	|      jsr 17508 <__extendsfdf2>
    7d0c:	|      addq.l #4,sp
    7d0e:	|      clr.l -(sp)
    7d10:	|      move.l #1075052544,-(sp)
    7d16:	|      move.l d1,-(sp)
    7d18:	|      move.l d0,-(sp)
    7d1a:	|      jsr 17878 <__subdf3>
    7d20:	|      lea 16(sp),sp
    7d24:	|      move.l d0,d2
    7d26:	|      move.l d1,d3
    7d28:	|      move.l 36(sp),-(sp)
    7d2c:	|      jsr 175a6 <__floatsidf>
    7d32:	|      addq.l #4,sp
    7d34:	|      move.l d1,-(sp)
    7d36:	|      move.l d0,-(sp)
    7d38:	|      move.l d3,-(sp)
    7d3a:	|      move.l d2,-(sp)
    7d3c:	|      jsr 17878 <__subdf3>
    7d42:	|      lea 16(sp),sp
    7d46:	|      move.l d1,-(sp)
    7d48:	|      move.l d0,-(sp)
    7d4a:	|      move.l d5,-(sp)
    7d4c:	|      move.l d4,-(sp)
    7d4e:	|      jsr 17704 <__gtdf2>
    7d54:	|      lea 16(sp),sp
    7d58:	|      tst.l d0
    7d5a:	|  /-- bgt.s 7d5e <addSpeechLine+0x1d8>
}
    7d5c:	+--|-- bra.s 7d98 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7d5e:	|  \-> move.l 1c856 <winWidth>,d0
    7d64:	|      move.l d0,-(sp)
    7d66:	|      jsr 1760e <__floatunsisf>
    7d6c:	|      addq.l #4,sp
    7d6e:	|      move.l d0,d1
    7d70:	|      move.l 1c2a0 <cameraZoom>,d0
    7d76:	|      move.l d0,-(sp)
    7d78:	|      move.l d1,-(sp)
    7d7a:	|      jsr 1749c <__divsf3>
    7d80:	|      addq.l #8,sp
    7d82:	|      move.l d0,-(sp)
    7d84:	|      jsr 1757e <__fixsfsi>
    7d8a:	|      addq.l #4,sp
    7d8c:	|      subq.l #5,d0
    7d8e:	|      sub.l 36(sp),d0
    7d92:	|      movea.l 60(sp),a0
    7d96:	|      move.l d0,(a0)
}
    7d98:	\----> nop
    7d9a:	       movem.l (sp)+,d2-d5/a6
    7d9e:	       lea 28(sp),sp
    7da2:	       rts

00007da4 <initSpeech>:


void initSpeech () {
    7da4:	       lea -12(sp),sp
    7da8:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7daa:	       moveq #20,d0
    7dac:	       move.l d0,12(sp)
    7db0:	       clr.l 8(sp)
    7db4:	       move.l 1c902 <SysBase>,d0
    7dba:	       movea.l d0,a6
    7dbc:	       move.l 12(sp),d0
    7dc0:	       move.l 8(sp),d1
    7dc4:	       jsr -684(a6)
    7dc8:	       move.l d0,4(sp)
    7dcc:	       move.l 4(sp),d0
    7dd0:	       move.l d0,1c95e <speech>
	if (speech) {
    7dd6:	       move.l 1c95e <speech>,d0
    7ddc:	/----- beq.s 7e08 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7dde:	|      movea.l 1c95e <speech>,a0
    7de4:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7de6:	|      movea.l 1c95e <speech>,a0
    7dec:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7df0:	|      movea.l 1c95e <speech>,a0
    7df6:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7dfa:	|      movea.l 1c95e <speech>,a0
    7e00:	|      moveq #-1,d0
    7e02:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7e06:	|  /-- bra.s 7e16 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7e08:	\--|-> pea 18f12 <PutChar+0x12bc>
    7e0e:	   |   jsr 171b4 <KPrintF>
    7e14:	   |   addq.l #4,sp
}
    7e16:	   \-> nop
    7e18:	       movea.l (sp)+,a6
    7e1a:	       lea 12(sp),sp
    7e1e:	       rts

00007e20 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7e20:	       movea.l 1c95e <speech>,a0
    7e26:	       move.l 4(a0),d0
    7e2a:	/----- beq.s 7e38 <isThereAnySpeechGoingOn+0x18>
    7e2c:	|      movea.l 1c95e <speech>,a0
    7e32:	|      move.l 16(a0),d0
    7e36:	|  /-- bra.s 7e3a <isThereAnySpeechGoingOn+0x1a>
    7e38:	\--|-> moveq #-1,d0
}
    7e3a:	   \-> rts

00007e3c <killAllSpeech>:

void killAllSpeech () {
    7e3c:	       lea -12(sp),sp
    7e40:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7e42:	       movea.l 1c95e <speech>,a0
    7e48:	       move.l 12(a0),d0
    7e4c:	       moveq #-1,d1
    7e4e:	       cmp.l d0,d1
    7e50:	   /-- beq.s 7e5e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7e52:	   |   movea.l 1c95e <speech>,a0
    7e58:	   |   moveq #-1,d0
    7e5a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7e5e:	   \-> movea.l 1c95e <speech>,a0
    7e64:	       move.l (a0),d0
    7e66:	/----- beq.w 7ef2 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7e6a:	|      movea.l 1c95e <speech>,a0
    7e70:	|      move.l (a0),d1
    7e72:	|      lea -132(sp),sp
    7e76:	|      move.l sp,d0
    7e78:	|      movea.w #132,a0
    7e7c:	|      move.l a0,-(sp)
    7e7e:	|      move.l d1,-(sp)
    7e80:	|      move.l d0,-(sp)
    7e82:	|      jsr 17168 <memcpy>
    7e88:	|      lea 12(sp),sp
    7e8c:	|      jsr aaaa <makeSilent>
    7e92:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7e96:	|      movea.l 1c95e <speech>,a0
    7e9c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7e9e:	+----- bra.s 7ef2 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7ea0:	|  /-> movea.l 1c95e <speech>,a0
    7ea6:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7eac:	|  |   movea.l 1c95e <speech>,a0
    7eb2:	|  |   movea.l 4(a0),a1
    7eb6:	|  |   movea.l 1c95e <speech>,a0
    7ebc:	|  |   move.l 4(a1),d0
    7ec0:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7ec4:	|  |   movea.l 12(sp),a0
    7ec8:	|  |   move.l (a0),8(sp)
    7ecc:	|  |   move.l 1c902 <SysBase>,d0
    7ed2:	|  |   movea.l d0,a6
    7ed4:	|  |   movea.l 8(sp),a1
    7ed8:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7edc:	|  |   move.l 12(sp),4(sp)
    7ee2:	|  |   move.l 1c902 <SysBase>,d0
    7ee8:	|  |   movea.l d0,a6
    7eea:	|  |   movea.l 4(sp),a1
    7eee:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7ef2:	\--|-> movea.l 1c95e <speech>,a0
    7ef8:	   |   move.l 4(a0),d0
    7efc:	   \-- bne.s 7ea0 <killAllSpeech+0x64>
	}
}
    7efe:	       nop
    7f00:	       nop
    7f02:	       movea.l (sp)+,a6
    7f04:	       lea 12(sp),sp
    7f08:	       rts

00007f0a <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7f0a:	pea 2 <_start+0x2>
    7f0e:	move.l 8(sp),-(sp)
    7f12:	jsr 806a <setFrames>
    7f18:	addq.l #8,sp
}
    7f1a:	nop
    7f1c:	rts

00007f1e <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7f1e:	       lea -52(sp),sp
    7f22:	       move.l a6,-(sp)
    7f24:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    7f26:	       movea.l 64(sp),a0
    7f2a:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7f30:	       move.l 1c28c <speechSpeed>,d0
    7f36:	       move.l 68(sp),-(sp)
    7f3a:	       move.l d0,-(sp)
    7f3c:	       jsr a46 <putFloat>
    7f42:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7f44:	       movea.l 64(sp),a0
    7f48:	       move.l 8(a0),d0
    7f4c:	       move.l 68(sp),-(sp)
    7f50:	       move.l d0,-(sp)
    7f52:	       jsr 8d0 <put2bytes>
    7f58:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    7f5a:	       movea.l 64(sp),a0
    7f5e:	       move.l 16(a0),d0
    7f62:	       move.l 68(sp),-(sp)
    7f66:	       move.l d0,-(sp)
    7f68:	       jsr 8d0 <put2bytes>
    7f6e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7f70:	       movea.l 64(sp),a0
    7f74:	       move.l (a0),d0
    7f76:	   /-- beq.s 7fba <saveSpeech+0x9c>
			FPutC (fp, 1);
    7f78:	   |   move.l 68(sp),40(sp)
    7f7e:	   |   moveq #1,d0
    7f80:	   |   move.l d0,36(sp)
    7f84:	   |   move.l 1c90a <DOSBase>,d0
    7f8a:	   |   movea.l d0,a6
    7f8c:	   |   move.l 40(sp),d1
    7f90:	   |   move.l 36(sp),d2
    7f94:	   |   jsr -312(a6)
    7f98:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7f9c:	   |   movea.l 64(sp),a0
    7fa0:	   |   movea.l (a0),a0
    7fa2:	   |   movea.l 114(a0),a0
    7fa6:	   |   move.l 4(a0),d0
    7faa:	   |   move.l 68(sp),-(sp)
    7fae:	   |   move.l d0,-(sp)
    7fb0:	   |   jsr 8d0 <put2bytes>
    7fb6:	   |   addq.l #8,sp
    7fb8:	/--|-- bra.s 8036 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7fba:	|  \-> move.l 68(sp),52(sp)
    7fc0:	|      clr.l 48(sp)
    7fc4:	|      move.l 1c90a <DOSBase>,d0
    7fca:	|      movea.l d0,a6
    7fcc:	|      move.l 52(sp),d1
    7fd0:	|      move.l 48(sp),d2
    7fd4:	|      jsr -312(a6)
    7fd8:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7fdc:	+----- bra.s 8036 <saveSpeech+0x118>
			FPutC (fp, 1);
    7fde:	|  /-> move.l 68(sp),16(sp)
    7fe4:	|  |   moveq #1,d0
    7fe6:	|  |   move.l d0,12(sp)
    7fea:	|  |   move.l 1c90a <DOSBase>,d0
    7ff0:	|  |   movea.l d0,a6
    7ff2:	|  |   move.l 16(sp),d1
    7ff6:	|  |   move.l 12(sp),d2
    7ffa:	|  |   jsr -312(a6)
    7ffe:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    8002:	|  |   movea.l 56(sp),a0
    8006:	|  |   move.l (a0),d0
    8008:	|  |   move.l 68(sp),-(sp)
    800c:	|  |   move.l d0,-(sp)
    800e:	|  |   jsr bd8 <writeString>
    8014:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8016:	|  |   movea.l 56(sp),a0
    801a:	|  |   move.l 8(a0),d0
    801e:	|  |   move.l 68(sp),-(sp)
    8022:	|  |   move.l d0,-(sp)
    8024:	|  |   jsr 8d0 <put2bytes>
    802a:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    802c:	|  |   movea.l 56(sp),a0
    8030:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    8036:	\--|-> tst.l 56(sp)
    803a:	   \-- bne.s 7fde <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    803c:	       move.l 68(sp),28(sp)
    8042:	       clr.l 24(sp)
    8046:	       move.l 1c90a <DOSBase>,d0
    804c:	       movea.l d0,a6
    804e:	       move.l 28(sp),d1
    8052:	       move.l 24(sp),d2
    8056:	       jsr -312(a6)
    805a:	       move.l d0,20(sp)
}
    805e:	       nop
    8060:	       move.l (sp)+,d2
    8062:	       movea.l (sp)+,a6
    8064:	       lea 52(sp),sp
    8068:	       rts

0000806a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    806a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    806c:	movea.l 8(sp),a0
    8070:	movea.l 80(a0),a0
    8074:	move.l (a0),d2
    8076:	movea.l 8(sp),a0
    807a:	movea.l 80(a0),a0
    807e:	move.l 4(a0),d0
    8082:	move.l 12(sp),-(sp)
    8086:	move.l d0,-(sp)
    8088:	jsr 17b40 <__mulsi3>
    808e:	addq.l #8,sp
    8090:	move.l d0,d1
    8092:	movea.l 8(sp),a0
    8096:	move.l 106(a0),d0
    809a:	add.l d1,d0
    809c:	add.l d0,d0
    809e:	add.l d0,d0
    80a0:	movea.l d2,a0
    80a2:	adda.l d0,a0
    80a4:	move.l (a0),d0
    80a6:	movea.l 8(sp),a0
    80aa:	move.l d0,72(a0)
}
    80ae:	nop
    80b0:	move.l (sp)+,d2
    80b2:	rts

000080b4 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    80b4:	       lea -20(sp),sp
    80b8:	       move.l d2,-(sp)
    80ba:	       move.l 40(sp),d0
    80be:	       move.w d0,d0
    80c0:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    80c4:	       movea.l 1c95e <speech>,a0
    80ca:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    80d0:	       move.l 32(sp),-(sp)
    80d4:	       jsr a594 <findPerson>
    80da:	       addq.l #4,sp
    80dc:	       move.l d0,16(sp)
    if (thisPerson) {
    80e0:	   /-- beq.s 8106 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    80e2:	   |   movea.w 6(sp),a0
    80e6:	   |   move.l a0,-(sp)
    80e8:	   |   move.l 40(sp),-(sp)
    80ec:	   |   move.l 24(sp),-(sp)
    80f0:	   |   move.l 40(sp),-(sp)
    80f4:	   |   jsr 81cc <wrapSpeechPerson>
    80fa:	   |   lea 16(sp),sp
    80fe:	   |   move.l d0,20(sp)
    8102:	/--|-- bra.w 81c0 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8106:	|  \-> move.l 32(sp),-(sp)
    810a:	|      jsr 15996 <getRegionForObject>
    8110:	|      addq.l #4,sp
    8112:	|      move.l d0,12(sp)
        if (thisRegion) {
    8116:	|  /-- beq.s 8182 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8118:	|  |   movea.l 12(sp),a0
    811c:	|  |   movea.l 28(a0),a0
    8120:	|  |   move.l 28(a0),d0
    8124:	|  |   movea.l 12(sp),a0
    8128:	|  |   movea.l 4(a0),a1
    812c:	|  |   movea.l 12(sp),a0
    8130:	|  |   movea.l 28(a0),a0
    8134:	|  |   move.l 20(a0),d1
    8138:	|  |   movea.l a1,a0
    813a:	|  |   suba.l d1,a0
    813c:	|  |   move.l 1c9c0 <cameraY>,d1
    8142:	|  |   movea.l a0,a1
    8144:	|  |   suba.l d1,a1
    8146:	|  |   movea.l 12(sp),a0
    814a:	|  |   move.l (a0),d2
    814c:	|  |   movea.l 12(sp),a0
    8150:	|  |   move.l 8(a0),d1
    8154:	|  |   add.l d2,d1
    8156:	|  |   move.l d1,d2
    8158:	|  |   asr.l #1,d2
    815a:	|  |   move.l 1c9bc <cameraX>,d1
    8160:	|  |   movea.l d2,a0
    8162:	|  |   suba.l d1,a0
    8164:	|  |   move.l 36(sp),-(sp)
    8168:	|  |   move.l d0,-(sp)
    816a:	|  |   move.l a1,-(sp)
    816c:	|  |   move.l a0,-(sp)
    816e:	|  |   move.l 44(sp),-(sp)
    8172:	|  |   jsr 82ea <wrapSpeechXY>
    8178:	|  |   lea 20(sp),sp
    817c:	|  |   move.l d0,20(sp)
    8180:	+--|-- bra.s 81c0 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    8182:	|  \-> move.l 32(sp),-(sp)
    8186:	|      jsr d496 <findObjectType>
    818c:	|      addq.l #4,sp
    818e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    8192:	|      movea.l 8(sp),a0
    8196:	|      move.l 28(a0),d1
    819a:	|      move.l 1c856 <winWidth>,d0
    81a0:	|      lsr.l #1,d0
    81a2:	|      move.l 36(sp),-(sp)
    81a6:	|      move.l d1,-(sp)
    81a8:	|      pea a <_start+0xa>
    81ac:	|      move.l d0,-(sp)
    81ae:	|      move.l 44(sp),-(sp)
    81b2:	|      jsr 82ea <wrapSpeechXY>
    81b8:	|      lea 20(sp),sp
    81bc:	|      move.l d0,20(sp)
        }
    }
    return i;
    81c0:	\----> move.l 20(sp),d0
}
    81c4:	       move.l (sp)+,d2
    81c6:	       lea 20(sp),sp
    81ca:	       rts

000081cc <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    81cc:	    subq.l #8,sp
    81ce:	    movem.l d2-d4,-(sp)
    81d2:	    move.l 36(sp),d0
    81d6:	    move.w d0,d0
    81d8:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    81dc:	    movea.l 28(sp),a0
    81e0:	    movea.l 114(a0),a0
    81e4:	    move.l 28(a0),d2
    81e8:	    movea.l 28(sp),a0
    81ec:	    move.l 4(a0),d3
    81f0:	    move.l 1c9c0 <cameraY>,d0
    81f6:	    move.l d0,-(sp)
    81f8:	    jsr 175e6 <__floatsisf>
    81fe:	    addq.l #4,sp
    8200:	    move.l d0,-(sp)
    8202:	    move.l d3,-(sp)
    8204:	    jsr 178da <__subsf3>
    820a:	    addq.l #8,sp
    820c:	    move.l d0,d3
    820e:	    movea.l 28(sp),a0
    8212:	    move.l 32(a0),d4
    8216:	    movea.l 28(sp),a0
    821a:	    move.l 20(a0),d1
    821e:	    movea.l 28(sp),a0
    8222:	    move.l 24(a0),d0
    8226:	    sub.l d0,d1
    8228:	    move.l d1,-(sp)
    822a:	    jsr 175e6 <__floatsisf>
    8230:	    addq.l #4,sp
    8232:	    move.l d0,-(sp)
    8234:	    move.l d4,-(sp)
    8236:	    jsr 17698 <__mulsf3>
    823c:	    addq.l #8,sp
    823e:	    move.l d0,-(sp)
    8240:	    move.l d3,-(sp)
    8242:	    jsr 178da <__subsf3>
    8248:	    addq.l #8,sp
    824a:	    move.l d0,d3
    824c:	    movea.l 28(sp),a0
    8250:	    movea.l 114(a0),a0
    8254:	    move.l 20(a0),d0
    8258:	    move.l d0,-(sp)
    825a:	    jsr 175e6 <__floatsisf>
    8260:	    addq.l #4,sp
    8262:	    move.l d0,-(sp)
    8264:	    move.l d3,-(sp)
    8266:	    jsr 178da <__subsf3>
    826c:	    addq.l #8,sp
    826e:	    move.l d0,-(sp)
    8270:	    jsr 1757e <__fixsfsi>
    8276:	    addq.l #4,sp
    8278:	    move.l d0,d4
    827a:	    movea.l 28(sp),a0
    827e:	    move.l (a0),d3
    8280:	    move.l 1c9bc <cameraX>,d0
    8286:	    move.l d0,-(sp)
    8288:	    jsr 175e6 <__floatsisf>
    828e:	    addq.l #4,sp
    8290:	    move.l d0,-(sp)
    8292:	    move.l d3,-(sp)
    8294:	    jsr 178da <__subsf3>
    829a:	    addq.l #8,sp
    829c:	    move.l d0,-(sp)
    829e:	    jsr 1757e <__fixsfsi>
    82a4:	    addq.l #4,sp
    82a6:	    move.l 32(sp),-(sp)
    82aa:	    move.l d2,-(sp)
    82ac:	    move.l d4,-(sp)
    82ae:	    move.l d0,-(sp)
    82b0:	    move.l 40(sp),-(sp)
    82b4:	    jsr 82ea <wrapSpeechXY>
    82ba:	    lea 20(sp),sp
    82be:	    move.l d0,16(sp)
	if (animPerson) {
    82c2:	    tst.w 14(sp)
    82c6:	/-- beq.s 82de <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    82c8:	|   move.l 28(sp),-(sp)
    82cc:	|   jsr 7f0a <makeTalker>
    82d2:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    82d4:	|   movea.l 1c95e <speech>,a0
    82da:	|   move.l 28(sp),(a0)
	}
	return i;
    82de:	\-> move.l 16(sp),d0
}
    82e2:	    movem.l (sp)+,d2-d4
    82e6:	    addq.l #8,sp
    82e8:	    rts

000082ea <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    82ea:	                   lea -16(sp),sp
    82ee:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    82f2:	                   clr.l 16(sp)
    killAllSpeech();
    82f6:	                   jsr 7e3c <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    82fc:	                   move.l 36(sp),-(sp)
    8300:	                   jsr 13c38 <strlen>
    8306:	                   addq.l #4,sp
    8308:	                   movea.l d0,a0
    830a:	                   lea 20(a0),a0
    830e:	                   move.l a0,-(sp)
    8310:	                   jsr 1760e <__floatunsisf>
    8316:	                   addq.l #4,sp
    8318:	                   move.l d0,d1
    831a:	                   move.l 1c28c <speechSpeed>,d0
    8320:	                   move.l d0,-(sp)
    8322:	                   move.l d1,-(sp)
    8324:	                   jsr 17698 <__mulsf3>
    832a:	                   addq.l #8,sp
    832c:	                   move.l d0,-(sp)
    832e:	                   jsr 1757e <__fixsfsi>
    8334:	                   addq.l #4,sp
    8336:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    833a:	               /-- bgt.s 8342 <wrapSpeechXY+0x58>
    833c:	               |   moveq #1,d0
    833e:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    8342:	               \-> moveq #-1,d1
    8344:	                   cmp.l 52(sp),d1
    8348:	               /-- beq.s 8388 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    834a:	               |   move.l 1c9d0 <speechMode>,d0
    8350:	               +-- ble.s 8388 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8352:	               |   clr.l -(sp)
    8354:	               |   move.l 56(sp),-(sp)
    8358:	               |   jsr d160 <startSound>
    835e:	               |   addq.l #8,sp
    8360:	               |   tst.w d0
    8362:	               +-- beq.s 8388 <wrapSpeechXY+0x9e>
                speechTime = -10;
    8364:	               |   moveq #-10,d0
    8366:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    836a:	               |   movea.l 1c95e <speech>,a0
    8370:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8376:	               |   move.l 1c9d0 <speechMode>,d0
    837c:	               |   moveq #2,d1
    837e:	               |   cmp.l d0,d1
    8380:	               +-- bne.s 8388 <wrapSpeechXY+0x9e>
    8382:	               |   moveq #-10,d0
    8384:	/--------------|-- bra.w 860e <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8388:	|              \-> movea.l 1c95e <speech>,a0
    838e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    8394:	|     /----------- bra.w 8448 <wrapSpeechXY+0x15e>
        a = wrap;
    8398:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    839e:	|  |  |        /-- bra.s 83ae <wrapSpeechXY+0xc4>
            a--;
    83a0:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    83a4:	|  |  |  |     +-- bne.s 83ae <wrapSpeechXY+0xc4>
                a = wrap;
    83a6:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    83ac:	|  |  |  |  /--|-- bra.s 83c0 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    83ae:	|  |  |  |  |  \-> move.l 28(sp),d0
    83b2:	|  |  |  |  |      movea.l 36(sp),a0
    83b6:	|  |  |  |  |      adda.l d0,a0
    83b8:	|  |  |  |  |      move.b (a0),d0
    83ba:	|  |  |  |  |      cmpi.b #32,d0
    83be:	|  |  |  \--|----- bne.s 83a0 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    83c0:	|  |  |     \----> move.l 28(sp),d0
    83c4:	|  |  |            movea.l 36(sp),a0
    83c8:	|  |  |            adda.l d0,a0
    83ca:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    83cc:	|  |  |            lea 16(sp),a0
    83d0:	|  |  |            move.l a0,-(sp)
    83d2:	|  |  |            move.l 44(sp),-(sp)
    83d6:	|  |  |            move.l 44(sp),-(sp)
    83da:	|  |  |            jsr 7b86 <addSpeechLine>
    83e0:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    83e4:	|  |  |            move.l 28(sp),d0
    83e8:	|  |  |            movea.l 36(sp),a0
    83ec:	|  |  |            adda.l d0,a0
    83ee:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    83f2:	|  |  |            move.l 28(sp),d0
    83f6:	|  |  |            addq.l #1,d0
    83f8:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    83fc:	|  |  |            move.l 44(sp),-(sp)
    8400:	|  |  |            jsr 175e6 <__floatsisf>
    8406:	|  |  |            addq.l #4,sp
    8408:	|  |  |            move.l d0,d2
    840a:	|  |  |            move.l 1c9fa <fontHeight>,d0
    8410:	|  |  |            move.l d0,-(sp)
    8412:	|  |  |            jsr 175e6 <__floatsisf>
    8418:	|  |  |            addq.l #4,sp
    841a:	|  |  |            move.l d0,d1
    841c:	|  |  |            move.l 1c2a0 <cameraZoom>,d0
    8422:	|  |  |            move.l d0,-(sp)
    8424:	|  |  |            move.l d1,-(sp)
    8426:	|  |  |            jsr 1749c <__divsf3>
    842c:	|  |  |            addq.l #8,sp
    842e:	|  |  |            move.l d0,-(sp)
    8430:	|  |  |            move.l d2,-(sp)
    8432:	|  |  |            jsr 178da <__subsf3>
    8438:	|  |  |            addq.l #8,sp
    843a:	|  |  |            move.l d0,-(sp)
    843c:	|  |  |            jsr 1757e <__fixsfsi>
    8442:	|  |  |            addq.l #4,sp
    8444:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8448:	|  |  \----------> move.l 36(sp),-(sp)
    844c:	|  |               jsr 13c38 <strlen>
    8452:	|  |               addq.l #4,sp
    8454:	|  |               move.l d0,d1
    8456:	|  |               move.l 48(sp),d0
    845a:	|  |               cmp.l d1,d0
    845c:	|  \-------------- bcs.w 8398 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8460:	|                  lea 16(sp),a0
    8464:	|                  move.l a0,-(sp)
    8466:	|                  move.l 44(sp),-(sp)
    846a:	|                  move.l 44(sp),-(sp)
    846e:	|                  jsr 7b86 <addSpeechLine>
    8474:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8478:	|                  move.l 44(sp),-(sp)
    847c:	|                  jsr 175e6 <__floatsisf>
    8482:	|                  addq.l #4,sp
    8484:	|                  move.l d0,d2
    8486:	|                  move.l 1c9fa <fontHeight>,d0
    848c:	|                  move.l d0,-(sp)
    848e:	|                  jsr 175e6 <__floatsisf>
    8494:	|                  addq.l #4,sp
    8496:	|                  move.l d0,d1
    8498:	|                  move.l 1c2a0 <cameraZoom>,d0
    849e:	|                  move.l d0,-(sp)
    84a0:	|                  move.l d1,-(sp)
    84a2:	|                  jsr 1749c <__divsf3>
    84a8:	|                  addq.l #8,sp
    84aa:	|                  move.l d0,-(sp)
    84ac:	|                  move.l d2,-(sp)
    84ae:	|                  jsr 178da <__subsf3>
    84b4:	|                  addq.l #8,sp
    84b6:	|                  move.l d0,-(sp)
    84b8:	|                  jsr 1757e <__fixsfsi>
    84be:	|                  addq.l #4,sp
    84c0:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    84c4:	|              /-- bpl.s 84e2 <wrapSpeechXY+0x1f8>
    84c6:	|              |   movea.l 1c95e <speech>,a0
    84cc:	|              |   move.l 8(a0),d0
    84d0:	|              |   movea.l 1c95e <speech>,a0
    84d6:	|              |   sub.l 44(sp),d0
    84da:	|              |   move.l d0,8(a0)
    84de:	|           /--|-- bra.w 85d0 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    84e2:	|           |  \-> movea.l 1c95e <speech>,a0
    84e8:	|           |      move.l 8(a0),d0
    84ec:	|           |      move.l d0,-(sp)
    84ee:	|           |      jsr 175e6 <__floatsisf>
    84f4:	|           |      addq.l #4,sp
    84f6:	|           |      move.l d0,d2
    84f8:	|           |      move.l 1c9c0 <cameraY>,d0
    84fe:	|           |      move.l d0,-(sp)
    8500:	|           |      jsr 175e6 <__floatsisf>
    8506:	|           |      addq.l #4,sp
    8508:	|           |      move.l d0,d3
    850a:	|           |      move.l 1c85a <winHeight>,d4
    8510:	|           |      move.l 1c9fa <fontHeight>,d0
    8516:	|           |      pea 3 <_start+0x3>
    851a:	|           |      move.l d0,-(sp)
    851c:	|           |      jsr 17bbe <__divsi3>
    8522:	|           |      addq.l #8,sp
    8524:	|           |      move.l d4,d1
    8526:	|           |      sub.l d0,d1
    8528:	|           |      move.l d1,-(sp)
    852a:	|           |      jsr 1760e <__floatunsisf>
    8530:	|           |      addq.l #4,sp
    8532:	|           |      move.l d0,d1
    8534:	|           |      move.l 1c2a0 <cameraZoom>,d0
    853a:	|           |      move.l d0,-(sp)
    853c:	|           |      move.l d1,-(sp)
    853e:	|           |      jsr 1749c <__divsf3>
    8544:	|           |      addq.l #8,sp
    8546:	|           |      move.l d0,-(sp)
    8548:	|           |      move.l d3,-(sp)
    854a:	|           |      jsr 173a2 <__addsf3>
    8550:	|           |      addq.l #8,sp
    8552:	|           |      move.l d0,-(sp)
    8554:	|           |      move.l d2,-(sp)
    8556:	|           |      jsr 17752 <__gtsf2>
    855c:	|           |      addq.l #8,sp
    855e:	|           |      tst.l d0
    8560:	|           +----- ble.s 85d0 <wrapSpeechXY+0x2e6>
    8562:	|           |      move.l 1c9c0 <cameraY>,d0
    8568:	|           |      move.l d0,-(sp)
    856a:	|           |      jsr 175e6 <__floatsisf>
    8570:	|           |      addq.l #4,sp
    8572:	|           |      move.l d0,d2
    8574:	|           |      move.l 1c85a <winHeight>,d3
    857a:	|           |      move.l 1c9fa <fontHeight>,d0
    8580:	|           |      pea 3 <_start+0x3>
    8584:	|           |      move.l d0,-(sp)
    8586:	|           |      jsr 17bbe <__divsi3>
    858c:	|           |      addq.l #8,sp
    858e:	|           |      move.l d3,d1
    8590:	|           |      sub.l d0,d1
    8592:	|           |      move.l d1,-(sp)
    8594:	|           |      jsr 1760e <__floatunsisf>
    859a:	|           |      addq.l #4,sp
    859c:	|           |      move.l d0,d1
    859e:	|           |      move.l 1c2a0 <cameraZoom>,d0
    85a4:	|           |      move.l d0,-(sp)
    85a6:	|           |      move.l d1,-(sp)
    85a8:	|           |      jsr 1749c <__divsf3>
    85ae:	|           |      addq.l #8,sp
    85b0:	|           |      move.l d0,-(sp)
    85b2:	|           |      move.l d2,-(sp)
    85b4:	|           |      jsr 173a2 <__addsf3>
    85ba:	|           |      addq.l #8,sp
    85bc:	|           |      movea.l 1c95e <speech>,a2
    85c2:	|           |      move.l d0,-(sp)
    85c4:	|           |      jsr 1757e <__fixsfsi>
    85ca:	|           |      addq.l #4,sp
    85cc:	|           |      move.l d0,8(a2)

    if (offset) {
    85d0:	|           \----> move.l 16(sp),d0
    85d4:	|        /-------- beq.s 860a <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    85d6:	|        |         movea.l 1c95e <speech>,a0
    85dc:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    85e2:	|        |     /-- bra.s 8604 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    85e4:	|        |  /--|-> movea.l 20(sp),a0
    85e8:	|        |  |  |   move.l 8(a0),d1
    85ec:	|        |  |  |   move.l 16(sp),d0
    85f0:	|        |  |  |   add.l d1,d0
    85f2:	|        |  |  |   movea.l 20(sp),a0
    85f6:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    85fa:	|        |  |  |   movea.l 20(sp),a0
    85fe:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    8604:	|        |  |  \-> tst.l 20(sp)
    8608:	|        |  \----- bne.s 85e4 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    860a:	|        \-------> move.l 24(sp),d0
}
    860e:	\----------------> movem.l (sp)+,d2-d4/a2
    8612:	                   lea 16(sp),sp
    8616:	                   rts

00008618 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8618:	       lea -12(sp),sp
    861c:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    861e:	       move.l 1c962 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8626:	   /-- bra.s 864e <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8628:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    862e:	|  |   movea.l 12(sp),a0
    8632:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8638:	|  |   move.l 8(sp),4(sp)
    863e:	|  |   move.l 1c902 <SysBase>,d0
    8644:	|  |   movea.l d0,a6
    8646:	|  |   movea.l 4(sp),a1
    864a:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    864e:	|  \-> tst.l 12(sp)
    8652:	\----- bne.s 8628 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8654:	       clr.l 1c962 <zBuffer>
}
    865a:	       nop
    865c:	       movea.l (sp)+,a6
    865e:	       lea 12(sp),sp
    8662:	       rts

00008664 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8664:	                lea -304(sp),sp
    8668:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    866c:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8670:	                jsr 8618 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8676:	                move.l 328(sp),d0
    867a:	                move.l d0,-(sp)
    867c:	                jsr 6c76 <openFileFromNum>
    8682:	                addq.l #4,sp
    8684:	                tst.l d0
    8686:	            /-- bne.s 868e <setZBuffer+0x2a>
    8688:	            |   clr.w d0
    868a:	/-----------|-- bra.w 894c <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    868e:	|           \-> move.l 1c8ea <bigDataFile>,310(sp)
    8696:	|               move.l 1c90a <DOSBase>,d0
    869c:	|               movea.l d0,a6
    869e:	|               move.l 310(sp),d1
    86a2:	|               jsr -306(a6)
    86a6:	|               move.l d0,306(sp)
    86aa:	|               move.l 306(sp),d0
    86ae:	|               moveq #97,d1
    86b0:	|               cmp.l d0,d1
    86b2:	|        /----- bne.s 8726 <setZBuffer+0xc2>
    86b4:	|        |      move.l 1c8ea <bigDataFile>,302(sp)
    86bc:	|        |      move.l 1c90a <DOSBase>,d0
    86c2:	|        |      movea.l d0,a6
    86c4:	|        |      move.l 302(sp),d1
    86c8:	|        |      jsr -306(a6)
    86cc:	|        |      move.l d0,298(sp)
    86d0:	|        |      move.l 298(sp),d0
    86d4:	|        |      moveq #115,d1
    86d6:	|        |      cmp.l d0,d1
    86d8:	|        +----- bne.s 8726 <setZBuffer+0xc2>
    86da:	|        |      move.l 1c8ea <bigDataFile>,294(sp)
    86e2:	|        |      move.l 1c90a <DOSBase>,d0
    86e8:	|        |      movea.l d0,a6
    86ea:	|        |      move.l 294(sp),d1
    86ee:	|        |      jsr -306(a6)
    86f2:	|        |      move.l d0,290(sp)
    86f6:	|        |      move.l 290(sp),d0
    86fa:	|        |      moveq #122,d1
    86fc:	|        |      cmp.l d0,d1
    86fe:	|        +----- bne.s 8726 <setZBuffer+0xc2>
    8700:	|        |      move.l 1c8ea <bigDataFile>,286(sp)
    8708:	|        |      move.l 1c90a <DOSBase>,d0
    870e:	|        |      movea.l d0,a6
    8710:	|        |      move.l 286(sp),d1
    8714:	|        |      jsr -306(a6)
    8718:	|        |      move.l d0,282(sp)
    871c:	|        |      move.l 282(sp),d0
    8720:	|        |      moveq #98,d1
    8722:	|        |      cmp.l d0,d1
    8724:	|        |  /-- beq.s 873a <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8726:	|        \--|-> pea 18f4f <PutChar+0x12f9>
    872c:	|           |   jsr 171b4 <KPrintF>
    8732:	|           |   addq.l #4,sp
		 return FALSE;
    8734:	|           |   clr.w d0
    8736:	+-----------|-- bra.w 894c <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    873a:	|           \-> move.l 1c8ea <bigDataFile>,278(sp)
    8742:	|               move.l 1c90a <DOSBase>,d0
    8748:	|               movea.l d0,a6
    874a:	|               move.l 278(sp),d1
    874e:	|               jsr -306(a6)
    8752:	|               move.l d0,274(sp)
    8756:	|               move.l 274(sp),d0
    875a:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    875e:	|               moveq #28,d0
    8760:	|               move.l d0,270(sp)
    8764:	|               clr.l 266(sp)
    8768:	|               move.l 1c902 <SysBase>,d0
    876e:	|               movea.l d0,a6
    8770:	|               move.l 270(sp),d0
    8774:	|               move.l 266(sp),d1
    8778:	|               jsr -684(a6)
    877c:	|               move.l d0,262(sp)
    8780:	|               move.l 262(sp),d0
    8784:	|               move.l d0,1c962 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    878a:	|               move.l 1c962 <zBuffer>,318(sp)

	while(numelements--)
    8792:	|     /-------- bra.w 8932 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8796:	|  /--|-------> move.l 1c8ea <bigDataFile>,d0
    879c:	|  |  |         move.l d0,-(sp)
    879e:	|  |  |         jsr 6bc <get2bytes>
    87a4:	|  |  |         addq.l #4,sp
    87a6:	|  |  |         movea.l 318(sp),a0
    87aa:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    87ac:	|  |  |         move.l 1c8ea <bigDataFile>,d0
    87b2:	|  |  |         move.l d0,-(sp)
    87b4:	|  |  |         jsr 6bc <get2bytes>
    87ba:	|  |  |         addq.l #4,sp
    87bc:	|  |  |         movea.l 318(sp),a0
    87c0:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    87c4:	|  |  |         move.l 1c8ea <bigDataFile>,d0
    87ca:	|  |  |         move.l d0,-(sp)
    87cc:	|  |  |         jsr 6bc <get2bytes>
    87d2:	|  |  |         addq.l #4,sp
    87d4:	|  |  |         movea.l 318(sp),a0
    87d8:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    87dc:	|  |  |         move.l 1c8ea <bigDataFile>,d0
    87e2:	|  |  |         move.l d0,-(sp)
    87e4:	|  |  |         jsr 6bc <get2bytes>
    87ea:	|  |  |         addq.l #4,sp
    87ec:	|  |  |         movea.l 318(sp),a0
    87f0:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    87f4:	|  |  |         move.l 1c8ea <bigDataFile>,d0
    87fa:	|  |  |         move.l d0,-(sp)
    87fc:	|  |  |         jsr 6bc <get2bytes>
    8802:	|  |  |         addq.l #4,sp
    8804:	|  |  |         movea.l 318(sp),a0
    8808:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    880c:	|  |  |         movea.l 318(sp),a0
    8810:	|  |  |         move.l (a0),d0
    8812:	|  |  |         movea.l 318(sp),a0
    8816:	|  |  |         move.l 4(a0),d1
    881a:	|  |  |         move.l d1,-(sp)
    881c:	|  |  |         move.l d0,-(sp)
    881e:	|  |  |         jsr 17b40 <__mulsi3>
    8824:	|  |  |         addq.l #8,sp
    8826:	|  |  |         tst.l d0
    8828:	|  |  |     /-- bge.s 882c <setZBuffer+0x1c8>
    882a:	|  |  |     |   addq.l #7,d0
    882c:	|  |  |     \-> asr.l #3,d0
    882e:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8832:	|  |  |         moveq #0,d0
    8834:	|  |  |         move.w 260(sp),d0
    8838:	|  |  |         move.l d0,256(sp)
    883c:	|  |  |         moveq #2,d1
    883e:	|  |  |         move.l d1,252(sp)
    8842:	|  |  |         move.l 1c902 <SysBase>,d0
    8848:	|  |  |         movea.l d0,a6
    884a:	|  |  |         move.l 256(sp),d0
    884e:	|  |  |         move.l 252(sp),d1
    8852:	|  |  |         jsr -684(a6)
    8856:	|  |  |         move.l d0,248(sp)
    885a:	|  |  |         move.l 248(sp),d0
    885e:	|  |  |         movea.l 318(sp),a0
    8862:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8866:	|  |  |         move.l 1c8ea <bigDataFile>,244(sp)
    886e:	|  |  |         movea.l 318(sp),a0
    8872:	|  |  |         move.l 20(a0),240(sp)
    8878:	|  |  |         moveq #1,d0
    887a:	|  |  |         move.l d0,236(sp)
    887e:	|  |  |         moveq #0,d0
    8880:	|  |  |         move.w 260(sp),d0
    8884:	|  |  |         move.l d0,232(sp)
    8888:	|  |  |         move.l 1c90a <DOSBase>,d0
    888e:	|  |  |         movea.l d0,a6
    8890:	|  |  |         move.l 244(sp),d1
    8894:	|  |  |         move.l 240(sp),d2
    8898:	|  |  |         move.l 236(sp),d3
    889c:	|  |  |         move.l 232(sp),d4
    88a0:	|  |  |         jsr -324(a6)
    88a4:	|  |  |         move.l d0,228(sp)
    88a8:	|  |  |         move.l 228(sp),d0
    88ac:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    88b0:	|  |  |         tst.w 322(sp)
    88b4:	|  |  |  /----- beq.s 88f0 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88b6:	|  |  |  |      moveq #28,d1
    88b8:	|  |  |  |      move.l d1,222(sp)
    88bc:	|  |  |  |      clr.l 218(sp)
    88c0:	|  |  |  |      move.l 1c902 <SysBase>,d0
    88c6:	|  |  |  |      movea.l d0,a6
    88c8:	|  |  |  |      move.l 222(sp),d0
    88cc:	|  |  |  |      move.l 218(sp),d1
    88d0:	|  |  |  |      jsr -684(a6)
    88d4:	|  |  |  |      move.l d0,214(sp)
    88d8:	|  |  |  |      move.l 214(sp),d0
    88dc:	|  |  |  |      movea.l 318(sp),a0
    88e0:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    88e4:	|  |  |  |      movea.l 318(sp),a0
    88e8:	|  |  |  |      move.l 24(a0),318(sp)
    88ee:	|  |  |  |  /-- bra.s 88f8 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    88f0:	|  |  |  \--|-> movea.l 318(sp),a0
    88f4:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    88f8:	|  |  |     \-> movea.l 318(sp),a0
    88fc:	|  |  |         move.l 4(a0),d0
    8900:	|  |  |         move.l d0,d0
    8902:	|  |  |         movea.w d0,a1
    8904:	|  |  |         movea.l 318(sp),a0
    8908:	|  |  |         move.l (a0),d0
    890a:	|  |  |         move.l d0,d0
    890c:	|  |  |         movea.w d0,a0
    890e:	|  |  |         movea.l 318(sp),a2
    8912:	|  |  |         move.l 20(a2),d0
    8916:	|  |  |         clr.l -(sp)
    8918:	|  |  |         pea 1 <_start+0x1>
    891c:	|  |  |         move.l a1,-(sp)
    891e:	|  |  |         move.l a0,-(sp)
    8920:	|  |  |         pea 18f63 <PutChar+0x130d>
    8926:	|  |  |         move.l d0,-(sp)
    8928:	|  |  |         jsr 1729c <debug_register_bitmap>
    892e:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8932:	|  |  \-------> move.w 322(sp),d0
    8936:	|  |            move.w d0,d1
    8938:	|  |            subq.w #1,d1
    893a:	|  |            move.w d1,322(sp)
    893e:	|  |            tst.w d0
    8940:	|  \----------- bne.w 8796 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8944:	|               jsr 6b6e <finishAccess>
	
	return TRUE;
    894a:	|               moveq #1,d0
}
    894c:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8950:	                lea 304(sp),sp
    8954:	                rts

00008956 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8956:	          lea -32(sp),sp
    895a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    895c:	          move.l 40(sp),d0
    8960:	          addq.l #8,d0
    8962:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8966:	          clr.l 32(sp)
    896a:	   /----- bra.s 89b0 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    896c:	/--|----> movea.l 24(sp),a0
    8970:	|  |      movea.l 8(a0),a0
    8974:	|  |      move.l 32(sp),d1
    8978:	|  |      move.l d1,d0
    897a:	|  |      lsl.l #3,d0
    897c:	|  |      sub.l d1,d0
    897e:	|  |      add.l d0,d0
    8980:	|  |      add.l d0,d0
    8982:	|  |      adda.l d0,a0
    8984:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8988:	|  |      movea.l 8(sp),a0
    898c:	|  |      move.l 24(a0),d0
    8990:	|  |  /-- beq.s 89ac <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8992:	|  |  |   movea.l 8(sp),a0
    8996:	|  |  |   move.l 24(a0),4(sp)
    899c:	|  |  |   move.l 1c902 <SysBase>,d0
    89a2:	|  |  |   movea.l d0,a6
    89a4:	|  |  |   movea.l 4(sp),a1
    89a8:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    89ac:	|  |  \-> addq.l #1,32(sp)
    89b0:	|  \----> movea.l 24(sp),a0
    89b4:	|         move.l (a0),d0
    89b6:	|         cmp.l 32(sp),d0
    89ba:	\-------- bgt.s 896c <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    89bc:	          movea.l 24(sp),a0
    89c0:	          move.l 8(a0),20(sp)
    89c6:	          move.l 1c902 <SysBase>,d0
    89cc:	          movea.l d0,a6
    89ce:	          movea.l 20(sp),a1
    89d2:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    89d6:	          move.l 1ca1a <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89de:	      /-- bra.s 89ea <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    89e0:	   /--|-> movea.l 28(sp),a0
    89e4:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89ea:	   |  \-> movea.l 28(sp),a0
    89ee:	   |      movea.l 22(a0),a0
    89f2:	   |      move.l (a0),d1
    89f4:	   |      movea.l 40(sp),a0
    89f8:	   |      move.l (a0),d0
    89fa:	   |      cmp.l d1,d0
    89fc:	   |  /-- beq.s 8a04 <forgetSpriteBank+0xae>
    89fe:	   |  |   tst.l 28(sp)
    8a02:	   \--|-- bne.s 89e0 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8a04:	      \-> tst.l 28(sp)
    8a08:	   /----- beq.s 8a32 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8a0a:	   |      movea.l 40(sp),a0
    8a0e:	   |      move.l 22(a0),d0
    8a12:	   |      movea.l 28(sp),a0
    8a16:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8a1a:	   |      move.l 40(sp),12(sp)
    8a20:	   |      move.l 1c902 <SysBase>,d0
    8a26:	   |      movea.l d0,a6
    8a28:	   |      movea.l 12(sp),a1
    8a2c:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8a30:	   |  /-- bra.s 8a58 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8a32:	   \--|-> movea.l 1ca1a <allLoadedBanks>,a0
    8a38:	      |   move.l 22(a0),d0
    8a3c:	      |   move.l d0,1ca1a <allLoadedBanks>
		FreeVec( forgetme);
    8a42:	      |   move.l 40(sp),16(sp)
    8a48:	      |   move.l 1c902 <SysBase>,d0
    8a4e:	      |   movea.l d0,a6
    8a50:	      |   movea.l 16(sp),a1
    8a54:	      |   jsr -690(a6)
}
    8a58:	      \-> nop
    8a5a:	          movea.l (sp)+,a6
    8a5c:	          lea 32(sp),sp
    8a60:	          rts

00008a62 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8a62:	                      lea -84(sp),sp
    8a66:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8a6a:	                      pea 18f6f <PutChar+0x1319>
    8a70:	                      jsr 171b4 <KPrintF>
    8a76:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8a78:	                      clr.l 94(sp)
    8a7c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8a80:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8a84:	                      move.l 108(sp),-(sp)
    8a88:	                      jsr 6c76 <openFileFromNum>
    8a8e:	                      addq.l #4,sp
    8a90:	                      tst.l d0
    8a92:	                  /-- bne.s 8aa8 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8a94:	                  |   pea 18f89 <PutChar+0x1333>
    8a9a:	                  |   jsr 171b4 <KPrintF>
    8aa0:	                  |   addq.l #4,sp
		return FALSE;
    8aa2:	                  |   clr.w d0
    8aa4:	/-----------------|-- bra.w 8e9c <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8aa8:	|                 \-> move.l 1c8ea <bigDataFile>,d0
    8aae:	|                     move.l d0,-(sp)
    8ab0:	|                     jsr 6bc <get2bytes>
    8ab6:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8ab8:	|                     move.l 1c8ea <bigDataFile>,82(sp)
    8ac0:	|                     move.l 1c90a <DOSBase>,d0
    8ac6:	|                     movea.l d0,a6
    8ac8:	|                     move.l 82(sp),d1
    8acc:	|                     jsr -306(a6)
    8ad0:	|                     move.l d0,78(sp)
    8ad4:	|                     move.l 78(sp),d0
    8ad8:	|                     movea.l 112(sp),a0
    8adc:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8ae0:	|                     move.l 1c8ea <bigDataFile>,d0
    8ae6:	|                     move.l d0,-(sp)
    8ae8:	|                     jsr 6bc <get2bytes>
    8aee:	|                     addq.l #4,sp
    8af0:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8af4:	|                 /-- bgt.s 8b0a <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8af6:	|                 |   pea 18fb7 <PutChar+0x1361>
    8afc:	|                 |   jsr 171b4 <KPrintF>
    8b02:	|                 |   addq.l #4,sp
		return FALSE;
    8b04:	|                 |   clr.w d0
    8b06:	+-----------------|-- bra.w 8e9c <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8b0a:	|                 \-> movea.l 112(sp),a0
    8b0e:	|                     move.l 4(a0),d0
    8b12:	|                     moveq #3,d1
    8b14:	|                     cmp.l d0,d1
    8b16:	|                 /-- bne.s 8b24 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8b18:	|                 |   movea.l 112(sp),a0
    8b1c:	|                 |   move.w #1,12(a0)
    8b22:	|              /--|-- bra.s 8b46 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8b24:	|              |  \-> movea.l 112(sp),a0
    8b28:	|              |      move.l 4(a0),d0
    8b2c:	|              |      moveq #3,d1
    8b2e:	|              |      cmp.l d0,d1
    8b30:	|              +----- bge.s 8b46 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8b32:	|              |      pea 18ff7 <PutChar+0x13a1>
    8b38:	|              |      jsr 171b4 <KPrintF>
    8b3e:	|              |      addq.l #4,sp
		return FALSE;
    8b40:	|              |      clr.w d0
    8b42:	+--------------|----- bra.w 8e9c <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8b46:	|              \----> movea.l 112(sp),a0
    8b4a:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8b4e:	|                     move.l 74(sp),d1
    8b52:	|                     move.l d1,d0
    8b54:	|                     lsl.l #3,d0
    8b56:	|                     sub.l d1,d0
    8b58:	|                     add.l d0,d0
    8b5a:	|                     add.l d0,d0
    8b5c:	|                     move.l d0,70(sp)
    8b60:	|                     clr.l 66(sp)
    8b64:	|                     move.l 1c902 <SysBase>,d0
    8b6a:	|                     movea.l d0,a6
    8b6c:	|                     move.l 70(sp),d0
    8b70:	|                     move.l 66(sp),d1
    8b74:	|                     jsr -684(a6)
    8b78:	|                     move.l d0,62(sp)
    8b7c:	|                     move.l 62(sp),d0
    8b80:	|                     movea.l 112(sp),a0
    8b84:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8b88:	|                     movea.l 112(sp),a0
    8b8c:	|                     move.l 8(a0),d0
    8b90:	|                 /-- bne.s 8b98 <loadSpriteBank+0x136>
    8b92:	|                 |   clr.w d0
    8b94:	+-----------------|-- bra.w 8e9c <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8b98:	|                 \-> moveq #1,d0
    8b9a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8b9e:	|                     clr.l 100(sp)
    8ba2:	|     /-------------- bra.w 8e7a <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8ba6:	|  /--|-------------> move.l 1c8ea <bigDataFile>,d0
    8bac:	|  |  |               move.l d0,-(sp)
    8bae:	|  |  |               jsr 6bc <get2bytes>
    8bb4:	|  |  |               addq.l #4,sp
    8bb6:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8bba:	|  |  |               movea.l 112(sp),a0
    8bbe:	|  |  |               movea.l 8(a0),a0
    8bc2:	|  |  |               move.l 100(sp),d1
    8bc6:	|  |  |               move.l d1,d0
    8bc8:	|  |  |               lsl.l #3,d0
    8bca:	|  |  |               sub.l d1,d0
    8bcc:	|  |  |               add.l d0,d0
    8bce:	|  |  |               add.l d0,d0
    8bd0:	|  |  |               adda.l d0,a0
    8bd2:	|  |  |               moveq #0,d0
    8bd4:	|  |  |               move.w 60(sp),d0
    8bd8:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8bda:	|  |  |               movea.l 1c8ea <bigDataFile>,a1
    8be0:	|  |  |               movea.l 112(sp),a0
    8be4:	|  |  |               movea.l 8(a0),a0
    8be8:	|  |  |               move.l 100(sp),d1
    8bec:	|  |  |               move.l d1,d0
    8bee:	|  |  |               lsl.l #3,d0
    8bf0:	|  |  |               sub.l d1,d0
    8bf2:	|  |  |               add.l d0,d0
    8bf4:	|  |  |               add.l d0,d0
    8bf6:	|  |  |               lea (0,a0,d0.l),a2
    8bfa:	|  |  |               move.l a1,-(sp)
    8bfc:	|  |  |               jsr 6bc <get2bytes>
    8c02:	|  |  |               addq.l #4,sp
    8c04:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8c08:	|  |  |               movea.l 1c8ea <bigDataFile>,a1
    8c0e:	|  |  |               movea.l 112(sp),a0
    8c12:	|  |  |               movea.l 8(a0),a0
    8c16:	|  |  |               move.l 100(sp),d1
    8c1a:	|  |  |               move.l d1,d0
    8c1c:	|  |  |               lsl.l #3,d0
    8c1e:	|  |  |               sub.l d1,d0
    8c20:	|  |  |               add.l d0,d0
    8c22:	|  |  |               add.l d0,d0
    8c24:	|  |  |               lea (0,a0,d0.l),a2
    8c28:	|  |  |               move.l a1,-(sp)
    8c2a:	|  |  |               jsr 6bc <get2bytes>
    8c30:	|  |  |               addq.l #4,sp
    8c32:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8c36:	|  |  |               movea.l 1c8ea <bigDataFile>,a1
    8c3c:	|  |  |               movea.l 112(sp),a0
    8c40:	|  |  |               movea.l 8(a0),a0
    8c44:	|  |  |               move.l 100(sp),d1
    8c48:	|  |  |               move.l d1,d0
    8c4a:	|  |  |               lsl.l #3,d0
    8c4c:	|  |  |               sub.l d1,d0
    8c4e:	|  |  |               add.l d0,d0
    8c50:	|  |  |               add.l d0,d0
    8c52:	|  |  |               lea (0,a0,d0.l),a2
    8c56:	|  |  |               move.l a1,-(sp)
    8c58:	|  |  |               jsr 6bc <get2bytes>
    8c5e:	|  |  |               addq.l #4,sp
    8c60:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8c64:	|  |  |               movea.l 112(sp),a0
    8c68:	|  |  |               move.l 4(a0),d0
    8c6c:	|  |  |               moveq #3,d1
    8c6e:	|  |  |               cmp.l d0,d1
    8c70:	|  |  |     /-------- beq.w 8d0c <loadSpriteBank+0x2aa>
    8c74:	|  |  |     |         moveq #3,d1
    8c76:	|  |  |     |         cmp.l d0,d1
    8c78:	|  |  |  /--|-------- blt.w 8db2 <loadSpriteBank+0x350>
    8c7c:	|  |  |  |  |         moveq #1,d1
    8c7e:	|  |  |  |  |         cmp.l d0,d1
    8c80:	|  |  |  |  |     /-- beq.s 8c8c <loadSpriteBank+0x22a>
    8c82:	|  |  |  |  |     |   moveq #2,d1
    8c84:	|  |  |  |  |     |   cmp.l d0,d1
    8c86:	|  |  |  |  |  /--|-- beq.s 8cb8 <loadSpriteBank+0x256>
    8c88:	|  |  |  +--|--|--|-- bra.w 8db2 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8c8c:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8c90:	|  |  |  |  |  |      movea.l 8(a0),a0
    8c94:	|  |  |  |  |  |      move.l 100(sp),d1
    8c98:	|  |  |  |  |  |      move.l d1,d0
    8c9a:	|  |  |  |  |  |      lsl.l #3,d0
    8c9c:	|  |  |  |  |  |      sub.l d1,d0
    8c9e:	|  |  |  |  |  |      add.l d0,d0
    8ca0:	|  |  |  |  |  |      add.l d0,d0
    8ca2:	|  |  |  |  |  |      adda.l d0,a0
    8ca4:	|  |  |  |  |  |      move.l 4(a0),d0
    8ca8:	|  |  |  |  |  |      addq.l #2,d0
    8caa:	|  |  |  |  |  |      move.l d0,d0
    8cac:	|  |  |  |  |  |      add.w d0,d0
    8cae:	|  |  |  |  |  |      add.w d0,d0
    8cb0:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8cb4:	|  |  |  +--|--|----- bra.w 8db2 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8cb8:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8cbc:	|  |  |  |  |         movea.l 8(a0),a0
    8cc0:	|  |  |  |  |         move.l 100(sp),d1
    8cc4:	|  |  |  |  |         move.l d1,d0
    8cc6:	|  |  |  |  |         lsl.l #3,d0
    8cc8:	|  |  |  |  |         sub.l d1,d0
    8cca:	|  |  |  |  |         add.l d0,d0
    8ccc:	|  |  |  |  |         add.l d0,d0
    8cce:	|  |  |  |  |         adda.l d0,a0
    8cd0:	|  |  |  |  |         move.l (a0),d0
    8cd2:	|  |  |  |  |     /-- bpl.s 8cd6 <loadSpriteBank+0x274>
    8cd4:	|  |  |  |  |     |   addq.l #7,d0
    8cd6:	|  |  |  |  |     \-> asr.l #3,d0
    8cd8:	|  |  |  |  |         move.l d0,d2
    8cda:	|  |  |  |  |         movea.l 112(sp),a0
    8cde:	|  |  |  |  |         movea.l 8(a0),a0
    8ce2:	|  |  |  |  |         move.l 100(sp),d1
    8ce6:	|  |  |  |  |         move.l d1,d0
    8ce8:	|  |  |  |  |         lsl.l #3,d0
    8cea:	|  |  |  |  |         sub.l d1,d0
    8cec:	|  |  |  |  |         add.l d0,d0
    8cee:	|  |  |  |  |         add.l d0,d0
    8cf0:	|  |  |  |  |         adda.l d0,a0
    8cf2:	|  |  |  |  |         move.l 4(a0),d0
    8cf6:	|  |  |  |  |         move.l d0,d0
    8cf8:	|  |  |  |  |         move.w d2,d1
    8cfa:	|  |  |  |  |         muls.w d0,d1
    8cfc:	|  |  |  |  |         move.w d1,d0
    8cfe:	|  |  |  |  |         add.w d0,d0
    8d00:	|  |  |  |  |         add.w d1,d0
    8d02:	|  |  |  |  |         add.w d0,d0
    8d04:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8d08:	|  |  |  +--|-------- bra.w 8db2 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8d0c:	|  |  |  |  \-------> movea.l 112(sp),a0
    8d10:	|  |  |  |            movea.l 8(a0),a0
    8d14:	|  |  |  |            move.l 100(sp),d1
    8d18:	|  |  |  |            move.l d1,d0
    8d1a:	|  |  |  |            lsl.l #3,d0
    8d1c:	|  |  |  |            sub.l d1,d0
    8d1e:	|  |  |  |            add.l d0,d0
    8d20:	|  |  |  |            add.l d0,d0
    8d22:	|  |  |  |            adda.l d0,a0
    8d24:	|  |  |  |            move.l (a0),d0
    8d26:	|  |  |  |            andi.l #-2147483633,d0
    8d2c:	|  |  |  |        /-- bpl.s 8d36 <loadSpriteBank+0x2d4>
    8d2e:	|  |  |  |        |   subq.l #1,d0
    8d30:	|  |  |  |        |   moveq #-16,d1
    8d32:	|  |  |  |        |   or.l d1,d0
    8d34:	|  |  |  |        |   addq.l #1,d0
    8d36:	|  |  |  |        \-> tst.l d0
    8d38:	|  |  |  |     /----- ble.s 8d3e <loadSpriteBank+0x2dc>
    8d3a:	|  |  |  |     |      moveq #2,d0
    8d3c:	|  |  |  |     |  /-- bra.s 8d40 <loadSpriteBank+0x2de>
    8d3e:	|  |  |  |     \--|-> clr.w d0
    8d40:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8d44:	|  |  |  |            movea.l 112(sp),a0
    8d48:	|  |  |  |            movea.l 8(a0),a0
    8d4c:	|  |  |  |            move.l 100(sp),d1
    8d50:	|  |  |  |            move.l d1,d0
    8d52:	|  |  |  |            lsl.l #3,d0
    8d54:	|  |  |  |            sub.l d1,d0
    8d56:	|  |  |  |            add.l d0,d0
    8d58:	|  |  |  |            add.l d0,d0
    8d5a:	|  |  |  |            adda.l d0,a0
    8d5c:	|  |  |  |            move.l (a0),d0
    8d5e:	|  |  |  |            movea.l d0,a0
    8d60:	|  |  |  |            cmpa.w #0,a0
    8d64:	|  |  |  |        /-- bge.s 8d6a <loadSpriteBank+0x308>
    8d66:	|  |  |  |        |   lea 15(a0),a0
    8d6a:	|  |  |  |        \-> move.l a0,d0
    8d6c:	|  |  |  |            asr.l #4,d0
    8d6e:	|  |  |  |            add.l d0,d0
    8d70:	|  |  |  |            move.l d0,d1
    8d72:	|  |  |  |            moveq #0,d0
    8d74:	|  |  |  |            move.w 58(sp),d0
    8d78:	|  |  |  |            add.l d1,d0
    8d7a:	|  |  |  |            move.l d0,d2
    8d7c:	|  |  |  |            movea.l 112(sp),a0
    8d80:	|  |  |  |            movea.l 8(a0),a0
    8d84:	|  |  |  |            move.l 100(sp),d1
    8d88:	|  |  |  |            move.l d1,d0
    8d8a:	|  |  |  |            lsl.l #3,d0
    8d8c:	|  |  |  |            sub.l d1,d0
    8d8e:	|  |  |  |            add.l d0,d0
    8d90:	|  |  |  |            add.l d0,d0
    8d92:	|  |  |  |            adda.l d0,a0
    8d94:	|  |  |  |            move.l 4(a0),d0
    8d98:	|  |  |  |            move.l d0,d0
    8d9a:	|  |  |  |            move.w d2,d1
    8d9c:	|  |  |  |            muls.w d0,d1
    8d9e:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8da2:	|  |  |  |            cmpi.w #100,98(sp)
    8da8:	|  |  |  |        /-- bls.s 8db0 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8daa:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8db0:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8db2:	|  |  |  \----------> moveq #0,d0
    8db4:	|  |  |               move.w 98(sp),d0
    8db8:	|  |  |               add.l d0,d0
    8dba:	|  |  |               move.l d0,52(sp)
    8dbe:	|  |  |               moveq #2,d0
    8dc0:	|  |  |               move.l d0,48(sp)
    8dc4:	|  |  |               move.l 1c902 <SysBase>,d0
    8dca:	|  |  |               movea.l d0,a6
    8dcc:	|  |  |               move.l 52(sp),d0
    8dd0:	|  |  |               move.l 48(sp),d1
    8dd4:	|  |  |               jsr -684(a6)
    8dd8:	|  |  |               move.l d0,44(sp)
    8ddc:	|  |  |               movea.l 44(sp),a1
    8de0:	|  |  |               movea.l 112(sp),a0
    8de4:	|  |  |               movea.l 8(a0),a0
    8de8:	|  |  |               move.l 100(sp),d1
    8dec:	|  |  |               move.l d1,d0
    8dee:	|  |  |               lsl.l #3,d0
    8df0:	|  |  |               sub.l d1,d0
    8df2:	|  |  |               add.l d0,d0
    8df4:	|  |  |               add.l d0,d0
    8df6:	|  |  |               adda.l d0,a0
    8df8:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8dfc:	|  |  |               move.l 1c8ea <bigDataFile>,40(sp)
    8e04:	|  |  |               movea.l 112(sp),a0
    8e08:	|  |  |               movea.l 8(a0),a0
    8e0c:	|  |  |               move.l 100(sp),d1
    8e10:	|  |  |               move.l d1,d0
    8e12:	|  |  |               lsl.l #3,d0
    8e14:	|  |  |               sub.l d1,d0
    8e16:	|  |  |               add.l d0,d0
    8e18:	|  |  |               add.l d0,d0
    8e1a:	|  |  |               adda.l d0,a0
    8e1c:	|  |  |               move.l 24(a0),36(sp)
    8e22:	|  |  |               moveq #2,d1
    8e24:	|  |  |               move.l d1,32(sp)
    8e28:	|  |  |               move.w 98(sp),d0
    8e2c:	|  |  |               lsr.w #1,d0
    8e2e:	|  |  |               move.w d0,d0
    8e30:	|  |  |               andi.l #65535,d0
    8e36:	|  |  |               move.l d0,28(sp)
    8e3a:	|  |  |               move.l 1c90a <DOSBase>,d0
    8e40:	|  |  |               movea.l d0,a6
    8e42:	|  |  |               move.l 40(sp),d1
    8e46:	|  |  |               move.l 36(sp),d2
    8e4a:	|  |  |               move.l 32(sp),d3
    8e4e:	|  |  |               move.l 28(sp),d4
    8e52:	|  |  |               jsr -324(a6)
    8e56:	|  |  |               move.l d0,24(sp)
    8e5a:	|  |  |               move.l 24(sp),d0
    8e5e:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8e62:	|  |  |           /-- bne.s 8e76 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8e64:	|  |  |           |   pea 1902c <PutChar+0x13d6>
    8e6a:	|  |  |           |   jsr 171b4 <KPrintF>
    8e70:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8e72:	|  |  |           |   clr.w d0
    8e74:	+--|--|-----------|-- bra.s 8e9c <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8e76:	|  |  |           \-> addq.l #1,100(sp)
    8e7a:	|  |  \-------------> move.l 100(sp),d0
    8e7e:	|  |                  cmp.l 74(sp),d0
    8e82:	|  \----------------- blt.w 8ba6 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8e86:	|                     jsr 6b6e <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8e8c:	|                     pea 1905f <PutChar+0x1409>
    8e92:	|                     jsr 171b4 <KPrintF>
    8e98:	|                     addq.l #4,sp
	return TRUE;
    8e9a:	|                     moveq #1,d0
}
    8e9c:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8ea0:	                      lea 84(sp),sp
    8ea4:	                      rts

00008ea6 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8ea6:	                   lea -16(sp),sp
    8eaa:	                   move.l d2,-(sp)
    8eac:	                   move.l 32(sp),d0
    8eb0:	                   move.w d0,d0
    8eb2:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8eb6:	                   movea.l 28(sp),a0
    8eba:	                   move.l (a0),d2
    8ebc:	                   movea.l 24(sp),a0
    8ec0:	                   move.l 8(a0),d0
    8ec4:	                   move.l d0,-(sp)
    8ec6:	                   jsr 175e6 <__floatsisf>
    8ecc:	                   addq.l #4,sp
    8ece:	                   move.l d0,-(sp)
    8ed0:	                   move.l d2,-(sp)
    8ed2:	                   jsr 178da <__subsf3>
    8ed8:	                   addq.l #8,sp
    8eda:	                   move.l d0,-(sp)
    8edc:	                   jsr 1757e <__fixsfsi>
    8ee2:	                   addq.l #4,sp
    8ee4:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8ee8:	                   movea.l 28(sp),a0
    8eec:	                   move.l 4(a0),d2
    8ef0:	                   movea.l 24(sp),a0
    8ef4:	                   move.l 12(a0),d0
    8ef8:	                   move.l d0,-(sp)
    8efa:	                   jsr 175e6 <__floatsisf>
    8f00:	                   addq.l #4,sp
    8f02:	                   move.l d0,-(sp)
    8f04:	                   move.l d2,-(sp)
    8f06:	                   jsr 178da <__subsf3>
    8f0c:	                   addq.l #8,sp
    8f0e:	                   move.l d0,-(sp)
    8f10:	                   jsr 1757e <__fixsfsi>
    8f16:	                   addq.l #4,sp
    8f18:	                   move.w d0,8(sp)

	if( x < 0)
    8f1c:	                   tst.w 18(sp)
    8f20:	               /-- bge.s 8f54 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8f22:	               |   movea.l 28(sp),a0
    8f26:	               |   move.l (a0),d2
    8f28:	               |   movea.l 24(sp),a0
    8f2c:	               |   move.l 8(a0),d0
    8f30:	               |   move.l d0,-(sp)
    8f32:	               |   jsr 175e6 <__floatsisf>
    8f38:	               |   addq.l #4,sp
    8f3a:	               |   move.l d0,-(sp)
    8f3c:	               |   move.l d2,-(sp)
    8f3e:	               |   jsr 178da <__subsf3>
    8f44:	               |   addq.l #8,sp
    8f46:	               |   move.l d0,-(sp)
    8f48:	               |   jsr 1757e <__fixsfsi>
    8f4e:	               |   addq.l #4,sp
    8f50:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8f54:	               \-> movea.w 8(sp),a1
    8f58:	                   movea.w 18(sp),a0
    8f5c:	                   pea 1 <_start+0x1>
    8f60:	                   move.l a1,-(sp)
    8f62:	                   move.l a0,-(sp)
    8f64:	                   move.l 40(sp),-(sp)
    8f68:	                   move.l 40(sp),-(sp)
    8f6c:	                   jsr 2d50 <CstScaleSprite>
    8f72:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8f76:	                   movea.l 28(sp),a0
    8f7a:	                   move.l 118(a0),d0
    8f7e:	                   moveq #8,d1
    8f80:	                   and.l d1,d0
    8f82:	   /-------------- beq.w 904e <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8f86:	   |               movea.l 24(sp),a0
    8f8a:	   |               move.l 8(a0),d0
    8f8e:	   |  /----------- bpl.s 8fca <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f90:	   |  |            move.w 18(sp),d0
    8f94:	   |  |            tst.w 6(sp)
    8f98:	   |  |     /----- beq.s 8fb2 <scaleSprite+0x10c>
    8f9a:	   |  |     |      movea.l 24(sp),a0
    8f9e:	   |  |     |      move.l (a0),d1
    8fa0:	   |  |     |      move.l d1,d2
    8fa2:	   |  |     |      movea.l 24(sp),a0
    8fa6:	   |  |     |      move.l 8(a0),d1
    8faa:	   |  |     |      move.l d1,d1
    8fac:	   |  |     |      movea.w d2,a0
    8fae:	   |  |     |      suba.w d1,a0
    8fb0:	   |  |     |  /-- bra.s 8fc0 <scaleSprite+0x11a>
    8fb2:	   |  |     \--|-> movea.l 24(sp),a0
    8fb6:	   |  |        |   move.l 8(a0),d1
    8fba:	   |  |        |   move.l d1,d1
    8fbc:	   |  |        |   movea.w d1,a0
    8fbe:	   |  |        |   addq.w #1,a0
    8fc0:	   |  |        \-> move.w d0,d1
    8fc2:	   |  |            sub.w a0,d1
    8fc4:	   |  |            move.w d1,16(sp)
    8fc8:	   |  |  /-------- bra.s 9002 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8fca:	   |  \--|-------> move.w 18(sp),d1
    8fce:	   |     |         tst.w 6(sp)
    8fd2:	   |     |  /----- beq.s 8ff0 <scaleSprite+0x14a>
    8fd4:	   |     |  |      movea.l 24(sp),a0
    8fd8:	   |     |  |      move.l (a0),d0
    8fda:	   |     |  |      move.l d0,d2
    8fdc:	   |     |  |      movea.l 24(sp),a0
    8fe0:	   |     |  |      move.l 8(a0),d0
    8fe4:	   |     |  |      move.l d0,d0
    8fe6:	   |     |  |      movea.w d2,a0
    8fe8:	   |     |  |      suba.w d0,a0
    8fea:	   |     |  |      move.w a0,d0
    8fec:	   |     |  |      subq.w #1,d0
    8fee:	   |     |  |  /-- bra.s 8ffa <scaleSprite+0x154>
    8ff0:	   |     |  \--|-> movea.l 24(sp),a0
    8ff4:	   |     |     |   move.l 8(a0),d0
    8ff8:	   |     |     |   move.l d0,d0
    8ffa:	   |     |     \-> movea.w d1,a0
    8ffc:	   |     |         suba.w d0,a0
    8ffe:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9002:	   |     \-------> movea.l 28(sp),a0
    9006:	   |               move.l 24(a0),d0
    900a:	   |               move.l d0,d1
    900c:	   |               movea.l 24(sp),a0
    9010:	   |               move.l 12(a0),d0
    9014:	   |               move.l d0,d0
    9016:	   |               sub.w d0,d1
    9018:	   |               move.w 8(sp),d0
    901c:	   |               movea.w d1,a0
    901e:	   |               adda.w d0,a0
    9020:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9024:	   |               movea.l 24(sp),a0
    9028:	   |               move.l (a0),d0
    902a:	   |               move.l d0,d0
    902c:	   |               move.w 16(sp),d1
    9030:	   |               add.w d0,d1
    9032:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9036:	   |               movea.l 24(sp),a0
    903a:	   |               move.l 4(a0),d0
    903e:	   |               move.l d0,d0
    9040:	   |               movea.w 14(sp),a0
    9044:	   |               adda.w d0,a0
    9046:	   |               move.w a0,10(sp)
    904a:	/--|-------------- bra.w 9136 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    904e:	|  \-------------> move.w 18(sp),d1
    9052:	|                  move.l 1c9bc <cameraX>,d0
    9058:	|                  move.l d0,d0
    905a:	|                  sub.w d0,d1
    905c:	|                  move.w d1,18(sp)
		y -= cameraY;
    9060:	|                  move.w 8(sp),d1
    9064:	|                  move.l 1c9c0 <cameraY>,d0
    906a:	|                  move.l d0,d0
    906c:	|                  sub.w d0,d1
    906e:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9072:	|                  movea.l 24(sp),a0
    9076:	|                  move.l 8(a0),d0
    907a:	|     /----------- bpl.s 90b6 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    907c:	|     |            move.w 18(sp),d0
    9080:	|     |            tst.w 6(sp)
    9084:	|     |     /----- beq.s 909e <scaleSprite+0x1f8>
    9086:	|     |     |      movea.l 24(sp),a0
    908a:	|     |     |      move.l (a0),d1
    908c:	|     |     |      move.l d1,d2
    908e:	|     |     |      movea.l 24(sp),a0
    9092:	|     |     |      move.l 8(a0),d1
    9096:	|     |     |      move.l d1,d1
    9098:	|     |     |      movea.w d2,a0
    909a:	|     |     |      suba.w d1,a0
    909c:	|     |     |  /-- bra.s 90ac <scaleSprite+0x206>
    909e:	|     |     \--|-> movea.l 24(sp),a0
    90a2:	|     |        |   move.l 8(a0),d1
    90a6:	|     |        |   move.l d1,d1
    90a8:	|     |        |   movea.w d1,a0
    90aa:	|     |        |   addq.w #1,a0
    90ac:	|     |        \-> move.w d0,d1
    90ae:	|     |            sub.w a0,d1
    90b0:	|     |            move.w d1,16(sp)
    90b4:	|     |  /-------- bra.s 90ee <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    90b6:	|     \--|-------> move.w 18(sp),d1
    90ba:	|        |         tst.w 6(sp)
    90be:	|        |  /----- beq.s 90dc <scaleSprite+0x236>
    90c0:	|        |  |      movea.l 24(sp),a0
    90c4:	|        |  |      move.l (a0),d0
    90c6:	|        |  |      move.l d0,d2
    90c8:	|        |  |      movea.l 24(sp),a0
    90cc:	|        |  |      move.l 8(a0),d0
    90d0:	|        |  |      move.l d0,d0
    90d2:	|        |  |      movea.w d2,a0
    90d4:	|        |  |      suba.w d0,a0
    90d6:	|        |  |      move.w a0,d0
    90d8:	|        |  |      subq.w #1,d0
    90da:	|        |  |  /-- bra.s 90e6 <scaleSprite+0x240>
    90dc:	|        |  \--|-> movea.l 24(sp),a0
    90e0:	|        |     |   move.l 8(a0),d0
    90e4:	|        |     |   move.l d0,d0
    90e6:	|        |     \-> movea.w d1,a0
    90e8:	|        |         suba.w d0,a0
    90ea:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90ee:	|        \-------> movea.l 28(sp),a0
    90f2:	|                  move.l 24(a0),d0
    90f6:	|                  move.l d0,d1
    90f8:	|                  movea.l 24(sp),a0
    90fc:	|                  move.l 12(a0),d0
    9100:	|                  move.l d0,d0
    9102:	|                  sub.w d0,d1
    9104:	|                  move.w 8(sp),d0
    9108:	|                  movea.w d1,a0
    910a:	|                  adda.w d0,a0
    910c:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9110:	|                  movea.l 24(sp),a0
    9114:	|                  move.l (a0),d0
    9116:	|                  move.l d0,d0
    9118:	|                  move.w 16(sp),d1
    911c:	|                  add.w d0,d1
    911e:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9122:	|                  movea.l 24(sp),a0
    9126:	|                  move.l 4(a0),d0
    912a:	|                  move.l d0,d0
    912c:	|                  movea.w 14(sp),a0
    9130:	|                  adda.w d0,a0
    9132:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9136:	\----------------> move.l 1c8be <input+0xa>,d1
    913c:	                   moveq #0,d0
    913e:	                   move.w 16(sp),d0
    9142:	                   cmp.l d1,d0
    9144:	            /----- bgt.s 917a <scaleSprite+0x2d4>
    9146:	            |      move.l 1c8be <input+0xa>,d1
    914c:	            |      moveq #0,d0
    914e:	            |      move.w 12(sp),d0
    9152:	            |      cmp.l d1,d0
    9154:	            +----- blt.s 917a <scaleSprite+0x2d4>
    9156:	            |      move.l 1c8c2 <input+0xe>,d1
    915c:	            |      moveq #0,d0
    915e:	            |      move.w 14(sp),d0
    9162:	            |      cmp.l d1,d0
    9164:	            +----- bgt.s 917a <scaleSprite+0x2d4>
    9166:	            |      move.l 1c8c2 <input+0xe>,d1
    916c:	            |      moveq #0,d0
    916e:	            |      move.w 10(sp),d0
    9172:	            |      cmp.l d1,d0
    9174:	            +----- blt.s 917a <scaleSprite+0x2d4>
		return TRUE;
    9176:	            |      moveq #1,d0
    9178:	            |  /-- bra.s 917c <scaleSprite+0x2d6>
	}
	return FALSE;
    917a:	            \--|-> clr.w d0
    917c:	               \-> move.l (sp)+,d2
    917e:	                   lea 16(sp),sp
    9182:	                   rts

00009184 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9184:	    move.l 4(sp),d0
    9188:	/-- bpl.s 918c <TF_abs+0x8>
    918a:	|   neg.l d0
}
    918c:	\-> rts

0000918e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    918e:	             lea -28(sp),sp
    9192:	             move.l a6,-(sp)
    9194:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9196:	             move.l #132,28(sp)
    919e:	             clr.l 24(sp)
    91a2:	             move.l 1c902 <SysBase>,d0
    91a8:	             movea.l d0,a6
    91aa:	             move.l 28(sp),d0
    91ae:	             move.l 24(sp),d1
    91b2:	             jsr -684(a6)
    91b6:	             move.l d0,20(sp)
    91ba:	             move.l 20(sp),d0
    91be:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    91c2:	         /-- bne.s 91ca <addPerson+0x3c>
    91c4:	         |   clr.w d0
    91c6:	/--------|-- bra.w 93fa <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    91ca:	|        \-> move.l 48(sp),-(sp)
    91ce:	|            jsr d586 <loadObjectType>
    91d4:	|            addq.l #4,sp
    91d6:	|            movea.l 16(sp),a0
    91da:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    91de:	|            movea.l 16(sp),a0
    91e2:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    91ea:	|            movea.l 16(sp),a0
    91ee:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    91f2:	|            movea.l 16(sp),a0
    91f6:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    91fa:	|            move.l 44(sp),-(sp)
    91fe:	|            jsr 175e6 <__floatsisf>
    9204:	|            addq.l #4,sp
    9206:	|            move.l d0,d2
    9208:	|            move.l 40(sp),-(sp)
    920c:	|            jsr 175e6 <__floatsisf>
    9212:	|            addq.l #4,sp
    9214:	|            move.l d2,-(sp)
    9216:	|            move.l d0,-(sp)
    9218:	|            move.l 24(sp),-(sp)
    921c:	|            jsr acdc <moveAndScale>
    9222:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9226:	|            movea.l 16(sp),a0
    922a:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    922e:	|            movea.l 16(sp),a0
    9232:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9238:	|            movea.l 16(sp),a0
    923c:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9242:	|            movea.l 16(sp),a0
    9246:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    924a:	|            movea.l 16(sp),a0
    924e:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9252:	|            movea.l 16(sp),a0
    9256:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    925c:	|            movea.l 16(sp),a0
    9260:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9264:	|            movea.l 16(sp),a0
    9268:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9270:	|            movea.l 16(sp),a0
    9274:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    927c:	|            movea.l 16(sp),a0
    9280:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9284:	|            movea.l 16(sp),a0
    9288:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    928c:	|            movea.l 16(sp),a0
    9290:	|            movea.l 114(a0),a0
    9294:	|            move.l 24(a0),d0
    9298:	|            movea.l 16(sp),a0
    929c:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    92a0:	|            movea.l 16(sp),a0
    92a4:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    92a8:	|            movea.l 16(sp),a0
    92ac:	|            movea.l 114(a0),a0
    92b0:	|            move.l 32(a0),d0
    92b4:	|            movea.l 16(sp),a0
    92b8:	|            move.l d0,122(a0)
    newPerson->r = 0;
    92bc:	|            movea.l 16(sp),a0
    92c0:	|            clr.b 126(a0)
    newPerson->g = 0;
    92c4:	|            movea.l 16(sp),a0
    92c8:	|            clr.b 127(a0)
    newPerson->b = 0;
    92cc:	|            movea.l 16(sp),a0
    92d0:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    92d4:	|            movea.l 16(sp),a0
    92d8:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    92dc:	|            movea.l 16(sp),a0
    92e0:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    92e4:	|            movea.l 16(sp),a0
    92e8:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    92ee:	|            clr.l -(sp)
    92f0:	|            move.l 20(sp),-(sp)
    92f4:	|            jsr 806a <setFrames>
    92fa:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    92fc:	|            movea.l 52(sp),a0
    9300:	|            movea.l (a0),a0
    9302:	|            movea.l (a0),a0
    9304:	|            movea.l 4(a0),a0
    9308:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    930c:	|     /----- bpl.s 9316 <addPerson+0x188>
    930e:	|     |      move.l 12(sp),d0
    9312:	|     |      neg.l d0
    9314:	|     |  /-- bra.s 9318 <addPerson+0x18a>
    9316:	|     \--|-> moveq #1,d0
    9318:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    931c:	|            movea.l 52(sp),a0
    9320:	|            movea.l (a0),a0
    9322:	|            movea.l (a0),a0
    9324:	|            movea.l (a0),a0
    9326:	|            move.l 8(a0),d0
    932a:	|            cmp.l 8(sp),d0
    932e:	|     /----- bgt.s 9360 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9330:	|     |      tst.l 12(sp)
    9334:	|     |  /-- bge.s 9342 <addPerson+0x1b4>
            newPerson->height = 5;
    9336:	|     |  |   movea.l 16(sp),a0
    933a:	|     |  |   moveq #5,d0
    933c:	|     |  |   move.l d0,20(a0)
    9340:	|  /--|--|-- bra.s 938c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9342:	|  |  |  \-> movea.l 52(sp),a0
    9346:	|  |  |      movea.l (a0),a0
    9348:	|  |  |      movea.l (a0),a0
    934a:	|  |  |      movea.l (a0),a0
    934c:	|  |  |      movea.l 16(a0),a0
    9350:	|  |  |      move.l 12(a0),d0
    9354:	|  |  |      addq.l #5,d0
    9356:	|  |  |      movea.l 16(sp),a0
    935a:	|  |  |      move.l d0,20(a0)
    935e:	|  +--|----- bra.s 938c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9360:	|  |  \----> movea.l 52(sp),a0
    9364:	|  |         movea.l (a0),a0
    9366:	|  |         movea.l (a0),a0
    9368:	|  |         movea.l (a0),a0
    936a:	|  |         movea.l 16(a0),a0
    936e:	|  |         move.l 8(sp),d1
    9372:	|  |         move.l d1,d0
    9374:	|  |         lsl.l #3,d0
    9376:	|  |         sub.l d1,d0
    9378:	|  |         add.l d0,d0
    937a:	|  |         add.l d0,d0
    937c:	|  |         adda.l d0,a0
    937e:	|  |         move.l 12(a0),d0
    9382:	|  |         addq.l #5,d0
    9384:	|  |         movea.l 16(sp),a0
    9388:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    938c:	|  \-------> move.l #117094,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9394:	|        /-- bra.s 93a4 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9396:	|     /--|-> movea.l 32(sp),a0
    939a:	|     |  |   move.l (a0),d0
    939c:	|     |  |   moveq #36,d1
    939e:	|     |  |   add.l d0,d1
    93a0:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    93a4:	|     |  \-> movea.l 32(sp),a0
    93a8:	|     |      move.l (a0),d0
    93aa:	|     |  /-- beq.s 93d2 <addPerson+0x244>
    93ac:	|     |  |   movea.l 32(sp),a0
    93b0:	|     |  |   movea.l (a0),a0
    93b2:	|     |  |   move.l 4(a0),d2
    93b6:	|     |  |   move.l 44(sp),-(sp)
    93ba:	|     |  |   jsr 175e6 <__floatsisf>
    93c0:	|     |  |   addq.l #4,sp
    93c2:	|     |  |   move.l d0,-(sp)
    93c4:	|     |  |   move.l d2,-(sp)
    93c6:	|     |  |   jsr 1780c <__ltsf2>
    93cc:	|     |  |   addq.l #8,sp
    93ce:	|     |  |   tst.l d0
    93d0:	|     \--|-- blt.s 9396 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    93d2:	|        \-> movea.l 32(sp),a0
    93d6:	|            move.l (a0),d0
    93d8:	|            movea.l 16(sp),a0
    93dc:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    93e0:	|            movea.l 32(sp),a0
    93e4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    93e8:	|            movea.l 16(sp),a0
    93ec:	|            move.l 114(a0),d0
    93f0:	|            sne d0
    93f2:	|            neg.b d0
    93f4:	|            move.b d0,d0
    93f6:	|            andi.w #255,d0
}
    93fa:	\----------> move.l (sp)+,d2
    93fc:	             movea.l (sp)+,a6
    93fe:	             lea 28(sp),sp
    9402:	             rts

00009404 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9404:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9406:	       move.l 8(sp),-(sp)
    940a:	       jsr a594 <findPerson>
    9410:	       addq.l #4,sp
    9412:	       move.l d0,(sp)
    if (moveMe) {
    9414:	/----- beq.s 9448 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9416:	|      movea.l (sp),a0
    9418:	|      move.l 68(a0),d0
    941c:	|  /-- beq.s 942e <animatePerson+0x2a>
    941e:	|  |   movea.l (sp),a0
    9420:	|  |   move.l 68(a0),d0
    9424:	|  |   move.l d0,-(sp)
    9426:	|  |   jsr 4612 <abortFunction>
    942c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    942e:	|  \-> movea.l (sp),a0
    9430:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9434:	|      movea.l (sp),a0
    9436:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    943a:	|      movea.l (sp),a0
    943c:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9440:	|      movea.l (sp),a0
    9442:	|      move.l 12(sp),72(a0)
    }
}
    9448:	\----> nop
    944a:	       addq.l #4,sp
    944c:	       rts

0000944e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    944e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9450:	       move.l 8(sp),-(sp)
    9454:	       jsr a594 <findPerson>
    945a:	       addq.l #4,sp
    945c:	       move.l d0,(sp)
    if (moveMe) {
    945e:	/----- beq.s 94a0 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9460:	|      movea.l (sp),a0
    9462:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9466:	|      movea.l (sp),a0
    9468:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    946e:	|      move.l (sp),-(sp)
    9470:	|      jsr ae6a <rethinkAngle>
    9476:	|      addq.l #4,sp
        if (moveMe->walking) {
    9478:	|      movea.l (sp),a0
    947a:	|      move.w 64(a0),d0
    947e:	|  /-- beq.s 9492 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9480:	|  |   pea 1 <_start+0x1>
    9484:	|  |   move.l 4(sp),-(sp)
    9488:	|  |   jsr 806a <setFrames>
    948e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9490:	+--|-- bra.s 94a0 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9492:	|  \-> clr.l -(sp)
    9494:	|      move.l 4(sp),-(sp)
    9498:	|      jsr 806a <setFrames>
    949e:	|      addq.l #8,sp
}
    94a0:	\----> nop
    94a2:	       addq.l #4,sp
    94a4:	       rts

000094a6 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    94a6:	             lea -36(sp),sp
    94aa:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    94ac:	             movea.l 44(sp),a0
    94b0:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    94b6:	             moveq #12,d0
    94b8:	             move.l d0,28(sp)
    94bc:	             clr.l 24(sp)
    94c0:	             move.l 1c902 <SysBase>,d0
    94c6:	             movea.l d0,a6
    94c8:	             move.l 28(sp),d0
    94cc:	             move.l 24(sp),d1
    94d0:	             jsr -684(a6)
    94d4:	             move.l d0,20(sp)
    94d8:	             move.l 20(sp),d0
    94dc:	             move.l d0,16(sp)
	if (!(newAnim)) {
    94e0:	         /-- bne.s 94f6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    94e2:	         |   pea 19079 <PutChar+0x1423>
    94e8:	         |   jsr 171b4 <KPrintF>
    94ee:	         |   addq.l #4,sp
		return NULL;
    94f0:	         |   moveq #0,d0
    94f2:	/--------|-- bra.w 9648 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    94f6:	|        \-> movea.l 44(sp),a0
    94fa:	|            move.l (a0),d0
    94fc:	|            movea.l 16(sp),a0
    9500:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9502:	|            movea.l 16(sp),a0
    9506:	|            movea.l (a0),a0
    9508:	|            move.l 4(a0),d0
    950c:	|            addq.l #1,d0
    950e:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9512:	|            movea.l 16(sp),a0
    9516:	|            move.l 32(sp),8(a0)

	if (num) {
    951c:	|  /-------- beq.w 963c <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9520:	|  |         move.l 32(sp),d1
    9524:	|  |         move.l d1,d0
    9526:	|  |         add.l d0,d0
    9528:	|  |         add.l d1,d0
    952a:	|  |         add.l d0,d0
    952c:	|  |         add.l d0,d0
    952e:	|  |         move.l d0,12(sp)
    9532:	|  |         clr.l 8(sp)
    9536:	|  |         move.l 1c902 <SysBase>,d0
    953c:	|  |         movea.l d0,a6
    953e:	|  |         move.l 12(sp),d0
    9542:	|  |         move.l 8(sp),d1
    9546:	|  |         jsr -684(a6)
    954a:	|  |         move.l d0,4(sp)
    954e:	|  |         move.l 4(sp),d0
    9552:	|  |         movea.l 16(sp),a0
    9556:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    955a:	|  |         movea.l 16(sp),a0
    955e:	|  |         move.l 4(a0),d0
    9562:	|  |     /-- bne.s 9578 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9564:	|  |     |   pea 19079 <PutChar+0x1423>
    956a:	|  |     |   jsr 171b4 <KPrintF>
    9570:	|  |     |   addq.l #4,sp
			return NULL;
    9572:	|  |     |   moveq #0,d0
    9574:	+--|-----|-- bra.w 9648 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9578:	|  |     \-> clr.l 36(sp)
    957c:	|  |     /-- bra.w 962e <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9580:	|  |  /--|-> movea.l 44(sp),a0
    9584:	|  |  |  |   movea.l 4(a0),a0
    9588:	|  |  |  |   move.l 36(sp),d1
    958c:	|  |  |  |   move.l d1,d0
    958e:	|  |  |  |   add.l d0,d0
    9590:	|  |  |  |   add.l d1,d0
    9592:	|  |  |  |   add.l d0,d0
    9594:	|  |  |  |   add.l d0,d0
    9596:	|  |  |  |   lea (0,a0,d0.l),a1
    959a:	|  |  |  |   movea.l 16(sp),a0
    959e:	|  |  |  |   movea.l 4(a0),a0
    95a2:	|  |  |  |   move.l 36(sp),d1
    95a6:	|  |  |  |   move.l d1,d0
    95a8:	|  |  |  |   add.l d0,d0
    95aa:	|  |  |  |   add.l d1,d0
    95ac:	|  |  |  |   add.l d0,d0
    95ae:	|  |  |  |   add.l d0,d0
    95b0:	|  |  |  |   adda.l d0,a0
    95b2:	|  |  |  |   move.l (a1),d0
    95b4:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    95b6:	|  |  |  |   movea.l 44(sp),a0
    95ba:	|  |  |  |   movea.l 4(a0),a0
    95be:	|  |  |  |   move.l 36(sp),d1
    95c2:	|  |  |  |   move.l d1,d0
    95c4:	|  |  |  |   add.l d0,d0
    95c6:	|  |  |  |   add.l d1,d0
    95c8:	|  |  |  |   add.l d0,d0
    95ca:	|  |  |  |   add.l d0,d0
    95cc:	|  |  |  |   lea (0,a0,d0.l),a1
    95d0:	|  |  |  |   movea.l 16(sp),a0
    95d4:	|  |  |  |   movea.l 4(a0),a0
    95d8:	|  |  |  |   move.l 36(sp),d1
    95dc:	|  |  |  |   move.l d1,d0
    95de:	|  |  |  |   add.l d0,d0
    95e0:	|  |  |  |   add.l d1,d0
    95e2:	|  |  |  |   add.l d0,d0
    95e4:	|  |  |  |   add.l d0,d0
    95e6:	|  |  |  |   adda.l d0,a0
    95e8:	|  |  |  |   move.l 4(a1),d0
    95ec:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    95f0:	|  |  |  |   movea.l 44(sp),a0
    95f4:	|  |  |  |   movea.l 4(a0),a0
    95f8:	|  |  |  |   move.l 36(sp),d1
    95fc:	|  |  |  |   move.l d1,d0
    95fe:	|  |  |  |   add.l d0,d0
    9600:	|  |  |  |   add.l d1,d0
    9602:	|  |  |  |   add.l d0,d0
    9604:	|  |  |  |   add.l d0,d0
    9606:	|  |  |  |   lea (0,a0,d0.l),a1
    960a:	|  |  |  |   movea.l 16(sp),a0
    960e:	|  |  |  |   movea.l 4(a0),a0
    9612:	|  |  |  |   move.l 36(sp),d1
    9616:	|  |  |  |   move.l d1,d0
    9618:	|  |  |  |   add.l d0,d0
    961a:	|  |  |  |   add.l d1,d0
    961c:	|  |  |  |   add.l d0,d0
    961e:	|  |  |  |   add.l d0,d0
    9620:	|  |  |  |   adda.l d0,a0
    9622:	|  |  |  |   move.l 8(a1),d0
    9626:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    962a:	|  |  |  |   addq.l #1,36(sp)
    962e:	|  |  |  \-> move.l 36(sp),d0
    9632:	|  |  |      cmp.l 32(sp),d0
    9636:	|  |  \----- blt.w 9580 <copyAnim+0xda>
    963a:	|  |     /-- bra.s 9644 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    963c:	|  \-----|-> movea.l 16(sp),a0
    9640:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9644:	|        \-> move.l 16(sp),d0
}
    9648:	\----------> movea.l (sp)+,a6
    964a:	             lea 36(sp),sp
    964e:	             rts

00009650 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9650:	                lea -44(sp),sp
    9654:	                move.l a6,-(sp)
    9656:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9658:	                moveq #12,d0
    965a:	                move.l d0,40(sp)
    965e:	                clr.l 36(sp)
    9662:	                move.l 1c902 <SysBase>,d0
    9668:	                movea.l d0,a6
    966a:	                move.l 40(sp),d0
    966e:	                move.l 36(sp),d1
    9672:	                jsr -684(a6)
    9676:	                move.l d0,32(sp)
    967a:	                move.l 32(sp),d0
    967e:	                move.l d0,28(sp)
	if( !newP) {
    9682:	            /-- bne.s 9698 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9684:	            |   pea 1909a <PutChar+0x1444>
    968a:	            |   jsr 171b4 <KPrintF>
    9690:	            |   addq.l #4,sp
		return NULL;
    9692:	            |   moveq #0,d0
    9694:	/-----------|-- bra.w 9868 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9698:	|           \-> movea.l 28(sp),a0
    969c:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    96a2:	|               move.l 56(sp),d1
    96a6:	|               move.l d1,d0
    96a8:	|               add.l d0,d0
    96aa:	|               add.l d1,d0
    96ac:	|               add.l d0,d0
    96ae:	|               add.l d0,d0
    96b0:	|               move.l d0,24(sp)
    96b4:	|               clr.l 20(sp)
    96b8:	|               move.l 1c902 <SysBase>,d0
    96be:	|               movea.l d0,a6
    96c0:	|               move.l 24(sp),d0
    96c4:	|               move.l 20(sp),d1
    96c8:	|               jsr -684(a6)
    96cc:	|               move.l d0,16(sp)
    96d0:	|               move.l 16(sp),d0
    96d4:	|               movea.l 28(sp),a0
    96d8:	|               move.l d0,4(a0)
	if( !newP->frames) {
    96dc:	|               movea.l 28(sp),a0
    96e0:	|               move.l 4(a0),d0
    96e4:	|           /-- bne.s 96fa <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    96e6:	|           |   pea 1909a <PutChar+0x1444>
    96ec:	|           |   jsr 171b4 <KPrintF>
    96f2:	|           |   addq.l #4,sp
		return NULL;
    96f4:	|           |   moveq #0,d0
    96f6:	+-----------|-- bra.w 9868 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    96fa:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9700:	|               movea.l 60(sp),a0
    9704:	|               move.l (a0),44(sp)
	while (a) {
    9708:	|     /-------- bra.w 985c <createPersonaAnim+0x20c>
		a --;
    970c:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9710:	|  |  |         movea.l 28(sp),a0
    9714:	|  |  |         movea.l 4(a0),a0
    9718:	|  |  |         move.l 48(sp),d1
    971c:	|  |  |         move.l d1,d0
    971e:	|  |  |         add.l d0,d0
    9720:	|  |  |         add.l d1,d0
    9722:	|  |  |         add.l d0,d0
    9724:	|  |  |         add.l d0,d0
    9726:	|  |  |         adda.l d0,a0
    9728:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    972c:	|  |  |         movea.l 44(sp),a0
    9730:	|  |  |         move.l (a0),d0
    9732:	|  |  |         moveq #5,d1
    9734:	|  |  |         cmp.l d0,d1
    9736:	|  |  |     /-- bne.s 9762 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9738:	|  |  |     |   movea.l 28(sp),a0
    973c:	|  |  |     |   movea.l 4(a0),a0
    9740:	|  |  |     |   move.l 48(sp),d1
    9744:	|  |  |     |   move.l d1,d0
    9746:	|  |  |     |   add.l d0,d0
    9748:	|  |  |     |   add.l d1,d0
    974a:	|  |  |     |   add.l d0,d0
    974c:	|  |  |     |   add.l d0,d0
    974e:	|  |  |     |   lea (0,a0,d0.l),a1
    9752:	|  |  |     |   movea.l 44(sp),a0
    9756:	|  |  |     |   move.l 4(a0),d0
    975a:	|  |  |     |   move.l d0,8(a1)
    975e:	|  |  |  /--|-- bra.w 980a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9762:	|  |  |  |  \-> movea.l 44(sp),a0
    9766:	|  |  |  |      move.l (a0),d0
    9768:	|  |  |  |      moveq #2,d1
    976a:	|  |  |  |      cmp.l d0,d1
    976c:	|  |  |  |  /-- bne.s 9798 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    976e:	|  |  |  |  |   movea.l 44(sp),a0
    9772:	|  |  |  |  |   move.l 4(a0),d2
    9776:	|  |  |  |  |   movea.l 28(sp),a0
    977a:	|  |  |  |  |   movea.l 4(a0),a0
    977e:	|  |  |  |  |   move.l 48(sp),d1
    9782:	|  |  |  |  |   move.l d1,d0
    9784:	|  |  |  |  |   add.l d0,d0
    9786:	|  |  |  |  |   add.l d1,d0
    9788:	|  |  |  |  |   add.l d0,d0
    978a:	|  |  |  |  |   add.l d0,d0
    978c:	|  |  |  |  |   adda.l d0,a0
    978e:	|  |  |  |  |   move.l d2,d0
    9790:	|  |  |  |  |   neg.l d0
    9792:	|  |  |  |  |   move.l d0,8(a0)
    9796:	|  |  |  +--|-- bra.s 980a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9798:	|  |  |  |  \-> movea.l 44(sp),a0
    979c:	|  |  |  |      move.l (a0),d0
    979e:	|  |  |  |      moveq #6,d1
    97a0:	|  |  |  |      cmp.l d0,d1
    97a2:	|  |  |  |  /-- bne.s 97ea <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    97a4:	|  |  |  |  |   movea.l 44(sp),a0
    97a8:	|  |  |  |  |   movea.l 4(a0),a0
    97ac:	|  |  |  |  |   move.l (a0),d0
    97ae:	|  |  |  |  |   move.l d0,-(sp)
    97b0:	|  |  |  |  |   pea 1 <_start+0x1>
    97b4:	|  |  |  |  |   lea 20(sp),a0
    97b8:	|  |  |  |  |   move.l a0,-(sp)
    97ba:	|  |  |  |  |   jsr 1474c <getValueType>
    97c0:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    97c4:	|  |  |  |  |   movea.l 44(sp),a0
    97c8:	|  |  |  |  |   movea.l 4(a0),a0
    97cc:	|  |  |  |  |   movea.l (a0),a0
    97ce:	|  |  |  |  |   move.l 8(a0),d0
    97d2:	|  |  |  |  |   move.l d0,-(sp)
    97d4:	|  |  |  |  |   pea 1 <_start+0x1>
    97d8:	|  |  |  |  |   lea 16(sp),a0
    97dc:	|  |  |  |  |   move.l a0,-(sp)
    97de:	|  |  |  |  |   jsr 1474c <getValueType>
    97e4:	|  |  |  |  |   lea 12(sp),sp
    97e8:	|  |  |  +--|-- bra.s 980a <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    97ea:	|  |  |  |  \-> move.l 44(sp),d0
    97ee:	|  |  |  |      move.l d0,-(sp)
    97f0:	|  |  |  |      pea 1 <_start+0x1>
    97f4:	|  |  |  |      lea 20(sp),a0
    97f8:	|  |  |  |      move.l a0,-(sp)
    97fa:	|  |  |  |      jsr 1474c <getValueType>
    9800:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9804:	|  |  |  |      moveq #1,d0
    9806:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    980a:	|  |  |  \----> move.l 60(sp),-(sp)
    980e:	|  |  |         jsr 150d0 <trimStack>
    9814:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9816:	|  |  |         movea.l 28(sp),a0
    981a:	|  |  |         movea.l 4(a0),a0
    981e:	|  |  |         move.l 48(sp),d1
    9822:	|  |  |         move.l d1,d0
    9824:	|  |  |         add.l d0,d0
    9826:	|  |  |         add.l d1,d0
    9828:	|  |  |         add.l d0,d0
    982a:	|  |  |         add.l d0,d0
    982c:	|  |  |         adda.l d0,a0
    982e:	|  |  |         move.l 12(sp),d0
    9832:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9834:	|  |  |         movea.l 28(sp),a0
    9838:	|  |  |         movea.l 4(a0),a0
    983c:	|  |  |         move.l 48(sp),d1
    9840:	|  |  |         move.l d1,d0
    9842:	|  |  |         add.l d0,d0
    9844:	|  |  |         add.l d1,d0
    9846:	|  |  |         add.l d0,d0
    9848:	|  |  |         add.l d0,d0
    984a:	|  |  |         adda.l d0,a0
    984c:	|  |  |         move.l 8(sp),d0
    9850:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9854:	|  |  |         movea.l 60(sp),a0
    9858:	|  |  |         move.l (a0),44(sp)
	while (a) {
    985c:	|  |  \-------> tst.l 48(sp)
    9860:	|  \----------- bne.w 970c <createPersonaAnim+0xbc>
	}

	return newP;
    9864:	|               move.l 28(sp),d0
}
    9868:	\-------------> move.l (sp)+,d2
    986a:	                movea.l (sp)+,a6
    986c:	                lea 44(sp),sp
    9870:	                rts

00009872 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9872:	       lea -12(sp),sp
    9876:	       move.l a6,-(sp)

	if(orig->theSprites)
    9878:	       movea.l 20(sp),a0
    987c:	       move.l (a0),d0
    987e:	   /-- beq.s 98a8 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9880:	   |   movea.l 20(sp),a0
    9884:	   |   movea.l (a0),a0
    9886:	   |   move.l 4(a0),d0
    988a:	   |   subq.l #1,d0
    988c:	   |   move.l d0,4(a0)
    9890:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9896:	   +-- bne.s 98a8 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9898:	   |   movea.l 20(sp),a0
    989c:	   |   move.l (a0),d0
    989e:	   |   move.l d0,-(sp)
    98a0:	   |   jsr 8956 <forgetSpriteBank>
    98a6:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    98a8:	   \-> tst.l 20(sp)
    98ac:	/----- beq.s 98ec <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    98ae:	|      movea.l 20(sp),a0
    98b2:	|      move.l 8(a0),d0
    98b6:	|  /-- beq.s 98d2 <deleteAnim+0x60>
			FreeVec( orig->frames);
    98b8:	|  |   movea.l 20(sp),a0
    98bc:	|  |   move.l 4(a0),8(sp)
    98c2:	|  |   move.l 1c902 <SysBase>,d0
    98c8:	|  |   movea.l d0,a6
    98ca:	|  |   movea.l 8(sp),a1
    98ce:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    98d2:	|  \-> move.l 20(sp),4(sp)
    98d8:	|      move.l 1c902 <SysBase>,d0
    98de:	|      movea.l d0,a6
    98e0:	|      movea.l 4(sp),a1
    98e4:	|      jsr -690(a6)
		orig = NULL;
    98e8:	|      clr.l 20(sp)
	}	
	
}
    98ec:	\----> nop
    98ee:	       movea.l (sp)+,a6
    98f0:	       lea 12(sp),sp
    98f4:	       rts

000098f6 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    98f6:	          lea -124(sp),sp
    98fa:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    98fe:	          movea.l 152(sp),a0
    9902:	          move.l 56(a0),d1
    9906:	          movea.l 152(sp),a0
    990a:	          move.l 60(a0),d0
    990e:	          cmp.l d1,d0
    9910:	      /-- bne.s 9940 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9912:	      |   movea.l 152(sp),a0
    9916:	      |   moveq #-1,d0
    9918:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    991c:	      |   movea.l 152(sp),a0
    9920:	      |   move.l 40(a0),d0
    9924:	      |   movea.l 152(sp),a0
    9928:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    992c:	      |   movea.l 152(sp),a0
    9930:	      |   move.l 44(a0),d0
    9934:	      |   movea.l 152(sp),a0
    9938:	      |   move.l d0,52(a0)
    993c:	   /--|-- bra.w 9ea6 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9940:	   |  \-> movea.l 1ca1e <currentFloor>,a0
    9946:	   |      move.l 16(a0),d1
    994a:	   |      movea.l 152(sp),a0
    994e:	   |      move.l 56(a0),d0
    9952:	   |      add.l d0,d0
    9954:	   |      add.l d0,d0
    9956:	   |      movea.l d1,a0
    9958:	   |      adda.l d0,a0
    995a:	   |      move.l (a0),d1
    995c:	   |      movea.l 152(sp),a0
    9960:	   |      move.l 60(a0),d0
    9964:	   |      add.l d0,d0
    9966:	   |      add.l d0,d0
    9968:	   |      movea.l d1,a0
    996a:	   |      adda.l d0,a0
    996c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9970:	   |      moveq #-1,d0
    9972:	   |      cmp.l 144(sp),d0
    9976:	   |  /-- bne.s 997e <doBorderStuff+0x88>
    9978:	   |  |   clr.w d0
    997a:	/--|--|-- bra.w 9fa6 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    997e:	|  |  \-> movea.l 1ca1e <currentFloor>,a0
    9984:	|  |      move.l 12(a0),d1
    9988:	|  |      move.l 144(sp),d0
    998c:	|  |      lsl.l #3,d0
    998e:	|  |      add.l d0,d1
    9990:	|  |      movea.l 1ca1e <currentFloor>,a0
    9996:	|  |      movea.l 12(a0),a1
    999a:	|  |      movea.l 152(sp),a0
    999e:	|  |      move.l 56(a0),d0
    99a2:	|  |      lsl.l #3,d0
    99a4:	|  |      add.l a1,d0
    99a6:	|  |      lea 40(sp),a0
    99aa:	|  |      move.l a0,-(sp)
    99ac:	|  |      lea 48(sp),a0
    99b0:	|  |      move.l a0,-(sp)
    99b2:	|  |      move.l d1,-(sp)
    99b4:	|  |      move.l d0,-(sp)
    99b6:	|  |      jsr 16436 <getMatchingCorners>
    99bc:	|  |      lea 16(sp),sp
    99c0:	|  |      tst.w d0
    99c2:	|  |  /-- bne.s 99d8 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    99c4:	|  |  |   pea 190c4 <PutChar+0x146e>
    99ca:	|  |  |   jsr 171b4 <KPrintF>
    99d0:	|  |  |   addq.l #4,sp
            return FALSE;
    99d2:	|  |  |   clr.w d0
    99d4:	+--|--|-- bra.w 9fa6 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    99d8:	|  |  \-> movea.l 152(sp),a0
    99dc:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    99e2:	|  |      movea.l 152(sp),a0
    99e6:	|  |      move.l (a0),d0
    99e8:	|  |      move.l d0,-(sp)
    99ea:	|  |      jsr 1757e <__fixsfsi>
    99f0:	|  |      addq.l #4,sp
    99f2:	|  |      move.l d0,140(sp)
    99f6:	|  |      movea.l 152(sp),a0
    99fa:	|  |      move.l 4(a0),d0
    99fe:	|  |      move.l d0,-(sp)
    9a00:	|  |      jsr 1757e <__fixsfsi>
    9a06:	|  |      addq.l #4,sp
    9a08:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9a0c:	|  |      movea.l 152(sp),a0
    9a10:	|  |      move.l 40(a0),132(sp)
    9a16:	|  |      movea.l 152(sp),a0
    9a1a:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9a20:	|  |      movea.l 1ca1e <currentFloor>,a0
    9a26:	|  |      move.l 4(a0),d1
    9a2a:	|  |      move.l 44(sp),d0
    9a2e:	|  |      lsl.l #3,d0
    9a30:	|  |      movea.l d1,a0
    9a32:	|  |      adda.l d0,a0
    9a34:	|  |      move.l (a0),124(sp)
    9a38:	|  |      movea.l 1ca1e <currentFloor>,a0
    9a3e:	|  |      move.l 4(a0),d1
    9a42:	|  |      move.l 44(sp),d0
    9a46:	|  |      lsl.l #3,d0
    9a48:	|  |      movea.l d1,a0
    9a4a:	|  |      adda.l d0,a0
    9a4c:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9a52:	|  |      movea.l 1ca1e <currentFloor>,a0
    9a58:	|  |      move.l 4(a0),d1
    9a5c:	|  |      move.l 40(sp),d0
    9a60:	|  |      lsl.l #3,d0
    9a62:	|  |      movea.l d1,a0
    9a64:	|  |      adda.l d0,a0
    9a66:	|  |      move.l (a0),116(sp)
    9a6a:	|  |      movea.l 1ca1e <currentFloor>,a0
    9a70:	|  |      move.l 4(a0),d1
    9a74:	|  |      move.l 40(sp),d0
    9a78:	|  |      lsl.l #3,d0
    9a7a:	|  |      movea.l d1,a0
    9a7c:	|  |      adda.l d0,a0
    9a7e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9a84:	|  |      move.l 140(sp),d0
    9a88:	|  |      sub.l 132(sp),d0
    9a8c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9a90:	|  |      move.l 136(sp),d0
    9a94:	|  |      sub.l 128(sp),d0
    9a98:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9a9c:	|  |      move.l 116(sp),d0
    9aa0:	|  |      sub.l 124(sp),d0
    9aa4:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9aa8:	|  |      move.l 112(sp),d0
    9aac:	|  |      sub.l 120(sp),d0
    9ab0:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9ab4:	|  |      move.l 124(sp),d0
    9ab8:	|  |      sub.l 140(sp),d0
    9abc:	|  |      move.l 104(sp),-(sp)
    9ac0:	|  |      move.l d0,-(sp)
    9ac2:	|  |      jsr 17b40 <__mulsi3>
    9ac8:	|  |      addq.l #8,sp
    9aca:	|  |      move.l d0,d2
    9acc:	|  |      move.l 120(sp),d0
    9ad0:	|  |      sub.l 136(sp),d0
    9ad4:	|  |      move.l 108(sp),-(sp)
    9ad8:	|  |      move.l d0,-(sp)
    9ada:	|  |      jsr 17b40 <__mulsi3>
    9ae0:	|  |      addq.l #8,sp
    9ae2:	|  |      move.l d2,d1
    9ae4:	|  |      sub.l d0,d1
    9ae6:	|  |      move.l d1,-(sp)
    9ae8:	|  |      jsr 175a6 <__floatsidf>
    9aee:	|  |      addq.l #4,sp
    9af0:	|  |      move.l d0,32(sp)
    9af4:	|  |      move.l d1,36(sp)
    9af8:	|  |      move.l 32(sp),88(sp)
    9afe:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9b04:	|  |      move.l 96(sp),-(sp)
    9b08:	|  |      move.l 112(sp),-(sp)
    9b0c:	|  |      jsr 17b40 <__mulsi3>
    9b12:	|  |      addq.l #8,sp
    9b14:	|  |      move.l d0,d2
    9b16:	|  |      move.l 100(sp),-(sp)
    9b1a:	|  |      move.l 108(sp),-(sp)
    9b1e:	|  |      jsr 17b40 <__mulsi3>
    9b24:	|  |      addq.l #8,sp
    9b26:	|  |      move.l d2,d1
    9b28:	|  |      sub.l d0,d1
    9b2a:	|  |      move.l d1,-(sp)
    9b2c:	|  |      jsr 175a6 <__floatsidf>
    9b32:	|  |      addq.l #4,sp
    9b34:	|  |      move.l d1,-(sp)
    9b36:	|  |      move.l d0,-(sp)
    9b38:	|  |      move.l 100(sp),-(sp)
    9b3c:	|  |      move.l 100(sp),-(sp)
    9b40:	|  |      jsr 1743a <__divdf3>
    9b46:	|  |      lea 16(sp),sp
    9b4a:	|  |      move.l d0,24(sp)
    9b4e:	|  |      move.l d1,28(sp)
    9b52:	|  |      move.l 24(sp),88(sp)
    9b58:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9b5e:	|  |      clr.l -(sp)
    9b60:	|  |      clr.l -(sp)
    9b62:	|  |      move.l 100(sp),-(sp)
    9b66:	|  |      move.l 100(sp),-(sp)
    9b6a:	|  |      jsr 17704 <__gtdf2>
    9b70:	|  |      lea 16(sp),sp
    9b74:	|  |      tst.l d0
    9b76:	|  |  /-- ble.w 9c4e <doBorderStuff+0x358>
    9b7a:	|  |  |   clr.l -(sp)
    9b7c:	|  |  |   move.l #1072693248,-(sp)
    9b82:	|  |  |   move.l 100(sp),-(sp)
    9b86:	|  |  |   move.l 100(sp),-(sp)
    9b8a:	|  |  |   jsr 177be <__ltdf2>
    9b90:	|  |  |   lea 16(sp),sp
    9b94:	|  |  |   tst.l d0
    9b96:	|  |  +-- bge.w 9c4e <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9b9a:	|  |  |   move.l 124(sp),-(sp)
    9b9e:	|  |  |   jsr 175a6 <__floatsidf>
    9ba4:	|  |  |   addq.l #4,sp
    9ba6:	|  |  |   move.l d0,d2
    9ba8:	|  |  |   move.l d1,d3
    9baa:	|  |  |   move.l 100(sp),-(sp)
    9bae:	|  |  |   jsr 175a6 <__floatsidf>
    9bb4:	|  |  |   addq.l #4,sp
    9bb6:	|  |  |   move.l 92(sp),-(sp)
    9bba:	|  |  |   move.l 92(sp),-(sp)
    9bbe:	|  |  |   move.l d1,-(sp)
    9bc0:	|  |  |   move.l d0,-(sp)
    9bc2:	|  |  |   jsr 17636 <__muldf3>
    9bc8:	|  |  |   lea 16(sp),sp
    9bcc:	|  |  |   move.l d1,-(sp)
    9bce:	|  |  |   move.l d0,-(sp)
    9bd0:	|  |  |   move.l d3,-(sp)
    9bd2:	|  |  |   move.l d2,-(sp)
    9bd4:	|  |  |   jsr 173d8 <__adddf3>
    9bda:	|  |  |   lea 16(sp),sp
    9bde:	|  |  |   move.l d1,-(sp)
    9be0:	|  |  |   move.l d0,-(sp)
    9be2:	|  |  |   jsr 17548 <__fixdfsi>
    9be8:	|  |  |   addq.l #8,sp
    9bea:	|  |  |   movea.l 152(sp),a0
    9bee:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9bf2:	|  |  |   move.l 120(sp),-(sp)
    9bf6:	|  |  |   jsr 175a6 <__floatsidf>
    9bfc:	|  |  |   addq.l #4,sp
    9bfe:	|  |  |   move.l d0,d2
    9c00:	|  |  |   move.l d1,d3
    9c02:	|  |  |   move.l 96(sp),-(sp)
    9c06:	|  |  |   jsr 175a6 <__floatsidf>
    9c0c:	|  |  |   addq.l #4,sp
    9c0e:	|  |  |   move.l 92(sp),-(sp)
    9c12:	|  |  |   move.l 92(sp),-(sp)
    9c16:	|  |  |   move.l d1,-(sp)
    9c18:	|  |  |   move.l d0,-(sp)
    9c1a:	|  |  |   jsr 17636 <__muldf3>
    9c20:	|  |  |   lea 16(sp),sp
    9c24:	|  |  |   move.l d1,-(sp)
    9c26:	|  |  |   move.l d0,-(sp)
    9c28:	|  |  |   move.l d3,-(sp)
    9c2a:	|  |  |   move.l d2,-(sp)
    9c2c:	|  |  |   jsr 173d8 <__adddf3>
    9c32:	|  |  |   lea 16(sp),sp
    9c36:	|  |  |   move.l d1,-(sp)
    9c38:	|  |  |   move.l d0,-(sp)
    9c3a:	|  |  |   jsr 17548 <__fixdfsi>
    9c40:	|  |  |   addq.l #8,sp
    9c42:	|  |  |   movea.l 152(sp),a0
    9c46:	|  |  |   move.l d0,52(a0)
    9c4a:	|  +--|-- bra.w 9ea6 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9c4e:	|  |  \-> move.l 140(sp),d0
    9c52:	|  |      sub.l 124(sp),d0
    9c56:	|  |      move.l d0,84(sp)
    9c5a:	|  |      move.l 140(sp),d0
    9c5e:	|  |      sub.l 116(sp),d0
    9c62:	|  |      move.l d0,80(sp)
    9c66:	|  |      move.l 132(sp),d0
    9c6a:	|  |      sub.l 124(sp),d0
    9c6e:	|  |      move.l d0,76(sp)
    9c72:	|  |      move.l 132(sp),d0
    9c76:	|  |      sub.l 116(sp),d0
    9c7a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9c7e:	|  |      move.l 136(sp),d0
    9c82:	|  |      sub.l 120(sp),d0
    9c86:	|  |      move.l d0,68(sp)
    9c8a:	|  |      move.l 136(sp),d0
    9c8e:	|  |      sub.l 112(sp),d0
    9c92:	|  |      move.l d0,64(sp)
    9c96:	|  |      move.l 128(sp),d0
    9c9a:	|  |      sub.l 120(sp),d0
    9c9e:	|  |      move.l d0,60(sp)
    9ca2:	|  |      move.l 128(sp),d0
    9ca6:	|  |      sub.l 112(sp),d0
    9caa:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9cae:	|  |      move.l 84(sp),-(sp)
    9cb2:	|  |      move.l 88(sp),-(sp)
    9cb6:	|  |      jsr 17b40 <__mulsi3>
    9cbc:	|  |      addq.l #8,sp
    9cbe:	|  |      move.l d0,84(sp)
    9cc2:	|  |      move.l 80(sp),-(sp)
    9cc6:	|  |      move.l 84(sp),-(sp)
    9cca:	|  |      jsr 17b40 <__mulsi3>
    9cd0:	|  |      addq.l #8,sp
    9cd2:	|  |      move.l d0,80(sp)
    9cd6:	|  |      move.l 76(sp),-(sp)
    9cda:	|  |      move.l 80(sp),-(sp)
    9cde:	|  |      jsr 17b40 <__mulsi3>
    9ce4:	|  |      addq.l #8,sp
    9ce6:	|  |      move.l d0,76(sp)
    9cea:	|  |      move.l 72(sp),-(sp)
    9cee:	|  |      move.l 76(sp),-(sp)
    9cf2:	|  |      jsr 17b40 <__mulsi3>
    9cf8:	|  |      addq.l #8,sp
    9cfa:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9cfe:	|  |      move.l 68(sp),-(sp)
    9d02:	|  |      move.l 72(sp),-(sp)
    9d06:	|  |      jsr 17b40 <__mulsi3>
    9d0c:	|  |      addq.l #8,sp
    9d0e:	|  |      move.l d0,68(sp)
    9d12:	|  |      move.l 64(sp),-(sp)
    9d16:	|  |      move.l 68(sp),-(sp)
    9d1a:	|  |      jsr 17b40 <__mulsi3>
    9d20:	|  |      addq.l #8,sp
    9d22:	|  |      move.l d0,64(sp)
    9d26:	|  |      move.l 60(sp),-(sp)
    9d2a:	|  |      move.l 64(sp),-(sp)
    9d2e:	|  |      jsr 17b40 <__mulsi3>
    9d34:	|  |      addq.l #8,sp
    9d36:	|  |      move.l d0,60(sp)
    9d3a:	|  |      move.l 56(sp),-(sp)
    9d3e:	|  |      move.l 60(sp),-(sp)
    9d42:	|  |      jsr 17b40 <__mulsi3>
    9d48:	|  |      addq.l #8,sp
    9d4a:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d4e:	|  |      move.l 84(sp),-(sp)
    9d52:	|  |      jsr 175a6 <__floatsidf>
    9d58:	|  |      addq.l #4,sp
    9d5a:	|  |      move.l d0,d2
    9d5c:	|  |      move.l d1,d3
    9d5e:	|  |      move.l 68(sp),-(sp)
    9d62:	|  |      jsr 175a6 <__floatsidf>
    9d68:	|  |      addq.l #4,sp
    9d6a:	|  |      move.l d1,-(sp)
    9d6c:	|  |      move.l d0,-(sp)
    9d6e:	|  |      move.l d3,-(sp)
    9d70:	|  |      move.l d2,-(sp)
    9d72:	|  |      jsr 173d8 <__adddf3>
    9d78:	|  |      lea 16(sp),sp
    9d7c:	|  |      move.l d1,-(sp)
    9d7e:	|  |      move.l d0,-(sp)
    9d80:	|  |      jsr 17af6 <sqrt>
    9d86:	|  |      addq.l #8,sp
    9d88:	|  |      move.l d0,d2
    9d8a:	|  |      move.l d1,d3
    9d8c:	|  |      move.l 76(sp),-(sp)
    9d90:	|  |      jsr 175a6 <__floatsidf>
    9d96:	|  |      addq.l #4,sp
    9d98:	|  |      move.l d0,d4
    9d9a:	|  |      move.l d1,d5
    9d9c:	|  |      move.l 60(sp),-(sp)
    9da0:	|  |      jsr 175a6 <__floatsidf>
    9da6:	|  |      addq.l #4,sp
    9da8:	|  |      move.l d1,-(sp)
    9daa:	|  |      move.l d0,-(sp)
    9dac:	|  |      move.l d5,-(sp)
    9dae:	|  |      move.l d4,-(sp)
    9db0:	|  |      jsr 173d8 <__adddf3>
    9db6:	|  |      lea 16(sp),sp
    9dba:	|  |      move.l d1,-(sp)
    9dbc:	|  |      move.l d0,-(sp)
    9dbe:	|  |      jsr 17af6 <sqrt>
    9dc4:	|  |      addq.l #8,sp
    9dc6:	|  |      move.l d1,-(sp)
    9dc8:	|  |      move.l d0,-(sp)
    9dca:	|  |      move.l d3,-(sp)
    9dcc:	|  |      move.l d2,-(sp)
    9dce:	|  |      jsr 173d8 <__adddf3>
    9dd4:	|  |      lea 16(sp),sp
    9dd8:	|  |      move.l d0,d2
    9dda:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9ddc:	|  |      move.l 80(sp),-(sp)
    9de0:	|  |      jsr 175a6 <__floatsidf>
    9de6:	|  |      addq.l #4,sp
    9de8:	|  |      move.l d0,d4
    9dea:	|  |      move.l d1,d5
    9dec:	|  |      move.l 64(sp),-(sp)
    9df0:	|  |      jsr 175a6 <__floatsidf>
    9df6:	|  |      addq.l #4,sp
    9df8:	|  |      move.l d1,-(sp)
    9dfa:	|  |      move.l d0,-(sp)
    9dfc:	|  |      move.l d5,-(sp)
    9dfe:	|  |      move.l d4,-(sp)
    9e00:	|  |      jsr 173d8 <__adddf3>
    9e06:	|  |      lea 16(sp),sp
    9e0a:	|  |      move.l d1,-(sp)
    9e0c:	|  |      move.l d0,-(sp)
    9e0e:	|  |      jsr 17af6 <sqrt>
    9e14:	|  |      addq.l #8,sp
    9e16:	|  |      move.l d0,d4
    9e18:	|  |      move.l d1,d5
    9e1a:	|  |      move.l 72(sp),-(sp)
    9e1e:	|  |      jsr 175a6 <__floatsidf>
    9e24:	|  |      addq.l #4,sp
    9e26:	|  |      move.l d0,d6
    9e28:	|  |      move.l d1,d7
    9e2a:	|  |      move.l 56(sp),-(sp)
    9e2e:	|  |      jsr 175a6 <__floatsidf>
    9e34:	|  |      addq.l #4,sp
    9e36:	|  |      move.l d1,-(sp)
    9e38:	|  |      move.l d0,-(sp)
    9e3a:	|  |      move.l d7,-(sp)
    9e3c:	|  |      move.l d6,-(sp)
    9e3e:	|  |      jsr 173d8 <__adddf3>
    9e44:	|  |      lea 16(sp),sp
    9e48:	|  |      move.l d1,-(sp)
    9e4a:	|  |      move.l d0,-(sp)
    9e4c:	|  |      jsr 17af6 <sqrt>
    9e52:	|  |      addq.l #8,sp
    9e54:	|  |      move.l d1,-(sp)
    9e56:	|  |      move.l d0,-(sp)
    9e58:	|  |      move.l d5,-(sp)
    9e5a:	|  |      move.l d4,-(sp)
    9e5c:	|  |      jsr 173d8 <__adddf3>
    9e62:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e66:	|  |      move.l d1,-(sp)
    9e68:	|  |      move.l d0,-(sp)
    9e6a:	|  |      move.l d3,-(sp)
    9e6c:	|  |      move.l d2,-(sp)
    9e6e:	|  |      jsr 177be <__ltdf2>
    9e74:	|  |      lea 16(sp),sp
    9e78:	|  |      tst.l d0
    9e7a:	|  |  /-- bge.s 9e92 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9e7c:	|  |  |   movea.l 152(sp),a0
    9e80:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9e86:	|  |  |   movea.l 152(sp),a0
    9e8a:	|  |  |   move.l 120(sp),52(a0)
    9e90:	|  +--|-- bra.s 9ea6 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9e92:	|  |  \-> movea.l 152(sp),a0
    9e96:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9e9c:	|  |      movea.l 152(sp),a0
    9ea0:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9ea6:	|  \----> movea.l 152(sp),a0
    9eaa:	|         move.l 52(a0),d0
    9eae:	|         move.l d0,-(sp)
    9eb0:	|         jsr 175e6 <__floatsisf>
    9eb6:	|         addq.l #4,sp
    9eb8:	|         move.l d0,d1
    9eba:	|         movea.l 152(sp),a0
    9ebe:	|         move.l 4(a0),d0
    9ec2:	|         move.l d0,-(sp)
    9ec4:	|         move.l d1,-(sp)
    9ec6:	|         jsr 178da <__subsf3>
    9ecc:	|         addq.l #8,sp
    9ece:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9ed2:	|         movea.l 152(sp),a0
    9ed6:	|         move.l (a0),d2
    9ed8:	|         movea.l 152(sp),a0
    9edc:	|         move.l 48(a0),d0
    9ee0:	|         move.l d0,-(sp)
    9ee2:	|         jsr 175e6 <__floatsisf>
    9ee8:	|         addq.l #4,sp
    9eea:	|         move.l d0,-(sp)
    9eec:	|         move.l d2,-(sp)
    9eee:	|         jsr 178da <__subsf3>
    9ef4:	|         addq.l #8,sp
    9ef6:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9efa:	|         clr.l -(sp)
    9efc:	|         move.l 52(sp),-(sp)
    9f00:	|         jsr 17842 <__nesf2>
    9f06:	|         addq.l #8,sp
    9f08:	|         tst.l d0
    9f0a:	|     /-- bne.s 9f1e <doBorderStuff+0x628>
    9f0c:	|     |   clr.l -(sp)
    9f0e:	|     |   move.l 56(sp),-(sp)
    9f12:	|     |   jsr 17842 <__nesf2>
    9f18:	|     |   addq.l #8,sp
    9f1a:	|     |   tst.l d0
    9f1c:	|  /--|-- beq.s 9f94 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9f1e:	|  |  \-> move.l 52(sp),d0
    9f22:	|  |      move.l d0,-(sp)
    9f24:	|  |      move.l d0,-(sp)
    9f26:	|  |      jsr 173a2 <__addsf3>
    9f2c:	|  |      addq.l #8,sp
    9f2e:	|  |      move.l d0,-(sp)
    9f30:	|  |      move.l 52(sp),-(sp)
    9f34:	|  |      jsr 17946 <atan2f>
    9f3a:	|  |      addq.l #8,sp
    9f3c:	|  |      move.l d0,-(sp)
    9f3e:	|  |      jsr 17508 <__extendsfdf2>
    9f44:	|  |      addq.l #4,sp
    9f46:	|  |      move.l #-1540411785,-(sp)
    9f4c:	|  |      move.l #1078765033,-(sp)
    9f52:	|  |      move.l d1,-(sp)
    9f54:	|  |      move.l d0,-(sp)
    9f56:	|  |      jsr 17636 <__muldf3>
    9f5c:	|  |      lea 16(sp),sp
    9f60:	|  |      clr.l -(sp)
    9f62:	|  |      move.l #1080459264,-(sp)
    9f68:	|  |      move.l d1,-(sp)
    9f6a:	|  |      move.l d0,-(sp)
    9f6c:	|  |      jsr 173d8 <__adddf3>
    9f72:	|  |      lea 16(sp),sp
    9f76:	|  |      move.l d1,-(sp)
    9f78:	|  |      move.l d0,-(sp)
    9f7a:	|  |      jsr 17548 <__fixdfsi>
    9f80:	|  |      addq.l #8,sp
    9f82:	|  |      movea.l 152(sp),a0
    9f86:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9f8a:	|  |      movea.l 152(sp),a0
    9f8e:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9f94:	|  \----> pea 1 <_start+0x1>
    9f98:	|         move.l 156(sp),-(sp)
    9f9c:	|         jsr 806a <setFrames>
    9fa2:	|         addq.l #8,sp
    return TRUE;
    9fa4:	|         moveq #1,d0
}
    9fa6:	\-------> movem.l (sp)+,d2-d7
    9faa:	          lea 124(sp),sp
    9fae:	          rts

00009fb0 <drawPeople>:

void drawPeople () {
    9fb0:	                   lea -24(sp),sp
    9fb4:	                   move.l d2,-(sp)

	shufflePeople ();
    9fb6:	                   jsr ba4c <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9fbc:	                   move.l 1c966 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9fc4:	                   clr.l 20(sp)
	overRegion = NULL;
    9fc8:	                   clr.l 1ca16 <overRegion>

	while (thisPerson) {
    9fce:	   /-------------- bra.w a580 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9fd2:	/--|-------------> movea.l 24(sp),a0
    9fd6:	|  |               move.w 104(a0),d0
    9fda:	|  |  /----------- beq.w a334 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9fde:	|  |  |            movea.l 24(sp),a0
    9fe2:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9fe8:	|  |  |            movea.l 24(sp),a0
    9fec:	|  |  |            move.l 76(a0),d0
    9ff0:	|  |  |            cmp.l 20(sp),d0
    9ff4:	|  |  |  /-------- beq.w a1c2 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9ff8:	|  |  |  |         movea.l 24(sp),a0
    9ffc:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a000:	|  |  |  |         movea.l 24(sp),a0
    a004:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a00a:	|  |  |  |         movea.l 24(sp),a0
    a00e:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a012:	|  |  |  |         movea.l 20(sp),a0
    a016:	|  |  |  |         movea.l 4(a0),a0
    a01a:	|  |  |  |         move.l 4(a0),d0
    a01e:	|  |  |  |         movea.l 24(sp),a0
    a022:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a026:	|  |  |  |         movea.l 20(sp),a0
    a02a:	|  |  |  |         movea.l 4(a0),a1
    a02e:	|  |  |  |         movea.l 24(sp),a0
    a032:	|  |  |  |         move.l 84(a0),d0
    a036:	|  |  |  |         move.l d0,d1
    a038:	|  |  |  |         move.l d1,d0
    a03a:	|  |  |  |         add.l d0,d0
    a03c:	|  |  |  |         add.l d1,d0
    a03e:	|  |  |  |         add.l d0,d0
    a040:	|  |  |  |         add.l d0,d0
    a042:	|  |  |  |         lea (0,a1,d0.l),a0
    a046:	|  |  |  |         move.l 8(a0),d0
    a04a:	|  |  |  |     /-- ble.w a0ec <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a04e:	|  |  |  |     |   movea.l 20(sp),a0
    a052:	|  |  |  |     |   movea.l 4(a0),a1
    a056:	|  |  |  |     |   movea.l 24(sp),a0
    a05a:	|  |  |  |     |   move.l 84(a0),d0
    a05e:	|  |  |  |     |   move.l d0,d1
    a060:	|  |  |  |     |   move.l d1,d0
    a062:	|  |  |  |     |   add.l d0,d0
    a064:	|  |  |  |     |   add.l d1,d0
    a066:	|  |  |  |     |   add.l d0,d0
    a068:	|  |  |  |     |   add.l d0,d0
    a06a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a06e:	|  |  |  |     |   move.l 8(a0),d0
    a072:	|  |  |  |     |   clr.l -(sp)
    a074:	|  |  |  |     |   move.l d0,-(sp)
    a076:	|  |  |  |     |   jsr d160 <startSound>
    a07c:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a07e:	|  |  |  |     |   movea.l 24(sp),a0
    a082:	|  |  |  |     |   move.l 84(a0),d0
    a086:	|  |  |  |     |   addq.l #1,d0
    a088:	|  |  |  |     |   movea.l 24(sp),a0
    a08c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a090:	|  |  |  |     |   movea.l 24(sp),a0
    a094:	|  |  |  |     |   move.l 84(a0),d0
    a098:	|  |  |  |     |   movea.l 24(sp),a0
    a09c:	|  |  |  |     |   movea.l 72(a0),a0
    a0a0:	|  |  |  |     |   move.l 8(a0),d1
    a0a4:	|  |  |  |     |   move.l d1,-(sp)
    a0a6:	|  |  |  |     |   move.l d0,-(sp)
    a0a8:	|  |  |  |     |   jsr 17bec <__modsi3>
    a0ae:	|  |  |  |     |   addq.l #8,sp
    a0b0:	|  |  |  |     |   movea.l 24(sp),a0
    a0b4:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a0b8:	|  |  |  |     |   movea.l 24(sp),a0
    a0bc:	|  |  |  |     |   movea.l 72(a0),a0
    a0c0:	|  |  |  |     |   movea.l 4(a0),a1
    a0c4:	|  |  |  |     |   movea.l 24(sp),a0
    a0c8:	|  |  |  |     |   move.l 84(a0),d0
    a0cc:	|  |  |  |     |   move.l d0,d1
    a0ce:	|  |  |  |     |   move.l d1,d0
    a0d0:	|  |  |  |     |   add.l d0,d0
    a0d2:	|  |  |  |     |   add.l d1,d0
    a0d4:	|  |  |  |     |   add.l d0,d0
    a0d6:	|  |  |  |     |   add.l d0,d0
    a0d8:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a0dc:	|  |  |  |     |   move.l 4(a0),d0
    a0e0:	|  |  |  |     |   movea.l 24(sp),a0
    a0e4:	|  |  |  |     |   move.l d0,88(a0)
    a0e8:	|  |  |  |  /--|-- bra.w a22a <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a0ec:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a0f0:	|  |  |  |  |      movea.l 4(a0),a1
    a0f4:	|  |  |  |  |      movea.l 24(sp),a0
    a0f8:	|  |  |  |  |      move.l 84(a0),d0
    a0fc:	|  |  |  |  |      move.l d0,d1
    a0fe:	|  |  |  |  |      move.l d1,d0
    a100:	|  |  |  |  |      add.l d0,d0
    a102:	|  |  |  |  |      add.l d1,d0
    a104:	|  |  |  |  |      add.l d0,d0
    a106:	|  |  |  |  |      add.l d0,d0
    a108:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a10c:	|  |  |  |  |      move.l 8(a0),d0
    a110:	|  |  |  |  +----- beq.w a22a <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a114:	|  |  |  |  |      movea.l 1c8d2 <noStack>,a1
    a11a:	|  |  |  |  |      movea.l 20(sp),a0
    a11e:	|  |  |  |  |      move.l 4(a0),d2
    a122:	|  |  |  |  |      movea.l 24(sp),a0
    a126:	|  |  |  |  |      move.l 84(a0),d0
    a12a:	|  |  |  |  |      move.l d0,d1
    a12c:	|  |  |  |  |      move.l d1,d0
    a12e:	|  |  |  |  |      add.l d0,d0
    a130:	|  |  |  |  |      add.l d1,d0
    a132:	|  |  |  |  |      add.l d0,d0
    a134:	|  |  |  |  |      add.l d0,d0
    a136:	|  |  |  |  |      movea.l d2,a0
    a138:	|  |  |  |  |      adda.l d0,a0
    a13a:	|  |  |  |  |      move.l 8(a0),d0
    a13e:	|  |  |  |  |      neg.l d0
    a140:	|  |  |  |  |      pea 1 <_start+0x1>
    a144:	|  |  |  |  |      move.l a1,-(sp)
    a146:	|  |  |  |  |      clr.l -(sp)
    a148:	|  |  |  |  |      clr.l -(sp)
    a14a:	|  |  |  |  |      move.l d0,-(sp)
    a14c:	|  |  |  |  |      jsr 69ce <startNewFunctionNum>
    a152:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a156:	|  |  |  |  |      movea.l 24(sp),a0
    a15a:	|  |  |  |  |      move.l 84(a0),d0
    a15e:	|  |  |  |  |      addq.l #1,d0
    a160:	|  |  |  |  |      movea.l 24(sp),a0
    a164:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a168:	|  |  |  |  |      movea.l 24(sp),a0
    a16c:	|  |  |  |  |      move.l 84(a0),d0
    a170:	|  |  |  |  |      movea.l 24(sp),a0
    a174:	|  |  |  |  |      movea.l 72(a0),a0
    a178:	|  |  |  |  |      move.l 8(a0),d1
    a17c:	|  |  |  |  |      move.l d1,-(sp)
    a17e:	|  |  |  |  |      move.l d0,-(sp)
    a180:	|  |  |  |  |      jsr 17bec <__modsi3>
    a186:	|  |  |  |  |      addq.l #8,sp
    a188:	|  |  |  |  |      movea.l 24(sp),a0
    a18c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a190:	|  |  |  |  |      movea.l 24(sp),a0
    a194:	|  |  |  |  |      movea.l 72(a0),a0
    a198:	|  |  |  |  |      movea.l 4(a0),a1
    a19c:	|  |  |  |  |      movea.l 24(sp),a0
    a1a0:	|  |  |  |  |      move.l 84(a0),d0
    a1a4:	|  |  |  |  |      move.l d0,d1
    a1a6:	|  |  |  |  |      move.l d1,d0
    a1a8:	|  |  |  |  |      add.l d0,d0
    a1aa:	|  |  |  |  |      add.l d1,d0
    a1ac:	|  |  |  |  |      add.l d0,d0
    a1ae:	|  |  |  |  |      add.l d0,d0
    a1b0:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1b4:	|  |  |  |  |      move.l 4(a0),d0
    a1b8:	|  |  |  |  |      movea.l 24(sp),a0
    a1bc:	|  |  |  |  |      move.l d0,88(a0)
    a1c0:	|  |  |  |  +----- bra.s a22a <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a1c2:	|  |  |  \--|----> movea.l 24(sp),a0
    a1c6:	|  |  |     |      move.l (a0),d0
    a1c8:	|  |  |     |      movea.l 24(sp),a0
    a1cc:	|  |  |     |      move.l 8(a0),d1
    a1d0:	|  |  |     |      move.l d1,-(sp)
    a1d2:	|  |  |     |      move.l d0,-(sp)
    a1d4:	|  |  |     |      jsr 174d2 <__eqsf2>
    a1da:	|  |  |     |      addq.l #8,sp
    a1dc:	|  |  |     |      tst.l d0
    a1de:	|  |  |     |  /-- bne.s a222 <drawPeople+0x272>
    a1e0:	|  |  |     |  |   movea.l 24(sp),a0
    a1e4:	|  |  |     |  |   move.l 4(a0),d0
    a1e8:	|  |  |     |  |   movea.l 24(sp),a0
    a1ec:	|  |  |     |  |   move.l 12(a0),d1
    a1f0:	|  |  |     |  |   move.l d1,-(sp)
    a1f2:	|  |  |     |  |   move.l d0,-(sp)
    a1f4:	|  |  |     |  |   jsr 174d2 <__eqsf2>
    a1fa:	|  |  |     |  |   addq.l #8,sp
    a1fc:	|  |  |     |  |   tst.l d0
    a1fe:	|  |  |     |  +-- bne.s a222 <drawPeople+0x272>
    a200:	|  |  |     |  |   movea.l 20(sp),a0
    a204:	|  |  |     |  |   move.l 8(a0),d0
    a208:	|  |  |     |  |   moveq #1,d1
    a20a:	|  |  |     |  |   cmp.l d0,d1
    a20c:	|  |  |     |  +-- bne.s a222 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a20e:	|  |  |     |  |   movea.l 24(sp),a0
    a212:	|  |  |     |  |   move.l 16(a0),d0
    a216:	|  |  |     |  |   addq.l #1,d0
    a218:	|  |  |     |  |   movea.l 24(sp),a0
    a21c:	|  |  |     |  |   move.l d0,16(a0)
    a220:	|  |  |     +--|-- bra.s a22a <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a222:	|  |  |     |  \-> movea.l 24(sp),a0
    a226:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a22a:	|  |  |     \----> movea.l 24(sp),a0
    a22e:	|  |  |            move.l (a0),d0
    a230:	|  |  |            movea.l 24(sp),a0
    a234:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a238:	|  |  |            movea.l 24(sp),a0
    a23c:	|  |  |            move.l 4(a0),d0
    a240:	|  |  |            movea.l 24(sp),a0
    a244:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a248:	|  |  |            movea.l 20(sp),a0
    a24c:	|  |  |            movea.l 4(a0),a1
    a250:	|  |  |            movea.l 24(sp),a0
    a254:	|  |  |            move.l 84(a0),d0
    a258:	|  |  |            move.l d0,d1
    a25a:	|  |  |            move.l d1,d0
    a25c:	|  |  |            add.l d0,d0
    a25e:	|  |  |            add.l d1,d0
    a260:	|  |  |            add.l d0,d0
    a262:	|  |  |            add.l d0,d0
    a264:	|  |  |            lea (0,a1,d0.l),a0
    a268:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a26c:	|  |  |            move.l 8(sp),d0
    a270:	|  |  |            add.l d0,d0
    a272:	|  |  |            subx.l d0,d0
    a274:	|  |  |            neg.l d0
    a276:	|  |  |            move.b d0,d0
    a278:	|  |  |            move.b d0,d0
    a27a:	|  |  |            andi.l #255,d0
    a280:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a284:	|  |  |            move.l 8(sp),-(sp)
    a288:	|  |  |            jsr 9184 <TF_abs>
    a28e:	|  |  |            addq.l #4,sp
    a290:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a294:	|  |  |            movea.l 20(sp),a0
    a298:	|  |  |            movea.l (a0),a0
    a29a:	|  |  |            move.l 8(a0),d0
    a29e:	|  |  |            cmp.l 12(sp),d0
    a2a2:	|  |  |        /-- bgt.s a2b2 <drawPeople+0x302>
				fNum = 0;
    a2a4:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a2a8:	|  |  |        |   moveq #2,d0
    a2aa:	|  |  |        |   sub.l 16(sp),d0
    a2ae:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a2b2:	|  |  |        \-> moveq #2,d1
    a2b4:	|  |  |            cmp.l 16(sp),d1
    a2b8:	|  |  +----------- beq.s a334 <drawPeople+0x384>
				BOOL r = FALSE;
    a2ba:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a2be:	|  |  |            move.l 16(sp),d0
    a2c2:	|  |  |            movea.w d0,a0
    a2c4:	|  |  |            movea.l 20(sp),a1
    a2c8:	|  |  |            movea.l (a1),a1
    a2ca:	|  |  |            movea.l 16(a1),a1
    a2ce:	|  |  |            move.l 12(sp),d1
    a2d2:	|  |  |            move.l d1,d0
    a2d4:	|  |  |            lsl.l #3,d0
    a2d6:	|  |  |            sub.l d1,d0
    a2d8:	|  |  |            add.l d0,d0
    a2da:	|  |  |            add.l d0,d0
    a2dc:	|  |  |            add.l a1,d0
    a2de:	|  |  |            move.l a0,-(sp)
    a2e0:	|  |  |            move.l 28(sp),-(sp)
    a2e4:	|  |  |            move.l d0,-(sp)
    a2e6:	|  |  |            jsr 8ea6 <scaleSprite>
    a2ec:	|  |  |            lea 12(sp),sp
    a2f0:	|  |  |            move.w d0,6(sp)
				if (r) {
    a2f4:	|  |  +----------- beq.s a334 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a2f6:	|  |  |            movea.l 24(sp),a0
    a2fa:	|  |  |            movea.l 114(a0),a0
    a2fe:	|  |  |            movea.l (a0),a0
    a300:	|  |  |            move.b (a0),d0
    a302:	|  |  +----------- beq.s a334 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a304:	|  |  |            move.l 1c986 <personRegion+0x1c>,d1
    a30a:	|  |  |            movea.l 24(sp),a0
    a30e:	|  |  |            move.l 114(a0),d0
    a312:	|  |  |            cmp.l d1,d0
    a314:	|  |  |        /-- beq.s a31c <drawPeople+0x36c>
    a316:	|  |  |        |   clr.l 1c8ca <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a31c:	|  |  |        \-> movea.l 24(sp),a0
    a320:	|  |  |            move.l 114(a0),d0
    a324:	|  |  |            move.l d0,1c986 <personRegion+0x1c>
						overRegion = & personRegion;
    a32a:	|  |  |            move.l #117098,1ca16 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a334:	|  |  \----------> movea.l 24(sp),a0
    a338:	|  |               move.l 88(a0),d0
    a33c:	|  |               subq.l #1,d0
    a33e:	|  |               movea.l 24(sp),a0
    a342:	|  |               move.l d0,88(a0)
    a346:	|  |               movea.l 24(sp),a0
    a34a:	|  |               move.l 88(a0),d0
    a34e:	|  |        /----- bne.w a576 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a352:	|  |        |      movea.l 24(sp),a0
    a356:	|  |        |      move.l 84(a0),d0
    a35a:	|  |        |      addq.l #1,d0
    a35c:	|  |        |      movea.l 24(sp),a0
    a360:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a364:	|  |        |      movea.l 24(sp),a0
    a368:	|  |        |      move.l 84(a0),d0
    a36c:	|  |        |      movea.l 24(sp),a0
    a370:	|  |        |      movea.l 72(a0),a0
    a374:	|  |        |      move.l 8(a0),d1
    a378:	|  |        |      move.l d1,-(sp)
    a37a:	|  |        |      move.l d0,-(sp)
    a37c:	|  |        |      jsr 17bec <__modsi3>
    a382:	|  |        |      addq.l #8,sp
    a384:	|  |        |      movea.l 24(sp),a0
    a388:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a38c:	|  |        |      movea.l 24(sp),a0
    a390:	|  |        |      movea.l 72(a0),a0
    a394:	|  |        |      movea.l 4(a0),a1
    a398:	|  |        |      movea.l 24(sp),a0
    a39c:	|  |        |      move.l 84(a0),d0
    a3a0:	|  |        |      move.l d0,d1
    a3a2:	|  |        |      move.l d1,d0
    a3a4:	|  |        |      add.l d0,d0
    a3a6:	|  |        |      add.l d1,d0
    a3a8:	|  |        |      add.l d0,d0
    a3aa:	|  |        |      add.l d0,d0
    a3ac:	|  |        |      lea (0,a1,d0.l),a0
    a3b0:	|  |        |      move.l 4(a0),d0
    a3b4:	|  |        |      movea.l 24(sp),a0
    a3b8:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a3bc:	|  |        |      movea.l 24(sp),a0
    a3c0:	|  |        |      move.w 104(a0),d0
    a3c4:	|  |        +----- beq.w a576 <drawPeople+0x5c6>
    a3c8:	|  |        |      tst.l 20(sp)
    a3cc:	|  |        +----- beq.w a576 <drawPeople+0x5c6>
    a3d0:	|  |        |      movea.l 20(sp),a0
    a3d4:	|  |        |      move.l 4(a0),d0
    a3d8:	|  |        +----- beq.w a576 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a3dc:	|  |        |      movea.l 20(sp),a0
    a3e0:	|  |        |      movea.l 4(a0),a1
    a3e4:	|  |        |      movea.l 24(sp),a0
    a3e8:	|  |        |      move.l 84(a0),d0
    a3ec:	|  |        |      move.l d0,d1
    a3ee:	|  |        |      move.l d1,d0
    a3f0:	|  |        |      add.l d0,d0
    a3f2:	|  |        |      add.l d1,d0
    a3f4:	|  |        |      add.l d0,d0
    a3f6:	|  |        |      add.l d0,d0
    a3f8:	|  |        |      lea (0,a1,d0.l),a0
    a3fc:	|  |        |      move.l 8(a0),d0
    a400:	|  |        |  /-- ble.w a4a2 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a404:	|  |        |  |   movea.l 20(sp),a0
    a408:	|  |        |  |   movea.l 4(a0),a1
    a40c:	|  |        |  |   movea.l 24(sp),a0
    a410:	|  |        |  |   move.l 84(a0),d0
    a414:	|  |        |  |   move.l d0,d1
    a416:	|  |        |  |   move.l d1,d0
    a418:	|  |        |  |   add.l d0,d0
    a41a:	|  |        |  |   add.l d1,d0
    a41c:	|  |        |  |   add.l d0,d0
    a41e:	|  |        |  |   add.l d0,d0
    a420:	|  |        |  |   lea (0,a1,d0.l),a0
    a424:	|  |        |  |   move.l 8(a0),d0
    a428:	|  |        |  |   clr.l -(sp)
    a42a:	|  |        |  |   move.l d0,-(sp)
    a42c:	|  |        |  |   jsr d160 <startSound>
    a432:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a434:	|  |        |  |   movea.l 24(sp),a0
    a438:	|  |        |  |   move.l 84(a0),d0
    a43c:	|  |        |  |   addq.l #1,d0
    a43e:	|  |        |  |   movea.l 24(sp),a0
    a442:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a446:	|  |        |  |   movea.l 24(sp),a0
    a44a:	|  |        |  |   move.l 84(a0),d0
    a44e:	|  |        |  |   movea.l 24(sp),a0
    a452:	|  |        |  |   movea.l 72(a0),a0
    a456:	|  |        |  |   move.l 8(a0),d1
    a45a:	|  |        |  |   move.l d1,-(sp)
    a45c:	|  |        |  |   move.l d0,-(sp)
    a45e:	|  |        |  |   jsr 17bec <__modsi3>
    a464:	|  |        |  |   addq.l #8,sp
    a466:	|  |        |  |   movea.l 24(sp),a0
    a46a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a46e:	|  |        |  |   movea.l 24(sp),a0
    a472:	|  |        |  |   movea.l 72(a0),a0
    a476:	|  |        |  |   movea.l 4(a0),a1
    a47a:	|  |        |  |   movea.l 24(sp),a0
    a47e:	|  |        |  |   move.l 84(a0),d0
    a482:	|  |        |  |   move.l d0,d1
    a484:	|  |        |  |   move.l d1,d0
    a486:	|  |        |  |   add.l d0,d0
    a488:	|  |        |  |   add.l d1,d0
    a48a:	|  |        |  |   add.l d0,d0
    a48c:	|  |        |  |   add.l d0,d0
    a48e:	|  |        |  |   lea (0,a1,d0.l),a0
    a492:	|  |        |  |   move.l 4(a0),d0
    a496:	|  |        |  |   movea.l 24(sp),a0
    a49a:	|  |        |  |   move.l d0,88(a0)
    a49e:	|  |        +--|-- bra.w a576 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a4a2:	|  |        |  \-> movea.l 20(sp),a0
    a4a6:	|  |        |      movea.l 4(a0),a1
    a4aa:	|  |        |      movea.l 24(sp),a0
    a4ae:	|  |        |      move.l 84(a0),d0
    a4b2:	|  |        |      move.l d0,d1
    a4b4:	|  |        |      move.l d1,d0
    a4b6:	|  |        |      add.l d0,d0
    a4b8:	|  |        |      add.l d1,d0
    a4ba:	|  |        |      add.l d0,d0
    a4bc:	|  |        |      add.l d0,d0
    a4be:	|  |        |      lea (0,a1,d0.l),a0
    a4c2:	|  |        |      move.l 8(a0),d0
    a4c6:	|  |        +----- beq.w a576 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a4ca:	|  |        |      movea.l 1c8d2 <noStack>,a1
    a4d0:	|  |        |      movea.l 20(sp),a0
    a4d4:	|  |        |      move.l 4(a0),d2
    a4d8:	|  |        |      movea.l 24(sp),a0
    a4dc:	|  |        |      move.l 84(a0),d0
    a4e0:	|  |        |      move.l d0,d1
    a4e2:	|  |        |      move.l d1,d0
    a4e4:	|  |        |      add.l d0,d0
    a4e6:	|  |        |      add.l d1,d0
    a4e8:	|  |        |      add.l d0,d0
    a4ea:	|  |        |      add.l d0,d0
    a4ec:	|  |        |      movea.l d2,a0
    a4ee:	|  |        |      adda.l d0,a0
    a4f0:	|  |        |      move.l 8(a0),d0
    a4f4:	|  |        |      neg.l d0
    a4f6:	|  |        |      pea 1 <_start+0x1>
    a4fa:	|  |        |      move.l a1,-(sp)
    a4fc:	|  |        |      clr.l -(sp)
    a4fe:	|  |        |      clr.l -(sp)
    a500:	|  |        |      move.l d0,-(sp)
    a502:	|  |        |      jsr 69ce <startNewFunctionNum>
    a508:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a50c:	|  |        |      movea.l 24(sp),a0
    a510:	|  |        |      move.l 84(a0),d0
    a514:	|  |        |      addq.l #1,d0
    a516:	|  |        |      movea.l 24(sp),a0
    a51a:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a51e:	|  |        |      movea.l 24(sp),a0
    a522:	|  |        |      move.l 84(a0),d0
    a526:	|  |        |      movea.l 24(sp),a0
    a52a:	|  |        |      movea.l 72(a0),a0
    a52e:	|  |        |      move.l 8(a0),d1
    a532:	|  |        |      move.l d1,-(sp)
    a534:	|  |        |      move.l d0,-(sp)
    a536:	|  |        |      jsr 17bec <__modsi3>
    a53c:	|  |        |      addq.l #8,sp
    a53e:	|  |        |      movea.l 24(sp),a0
    a542:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a546:	|  |        |      movea.l 24(sp),a0
    a54a:	|  |        |      movea.l 72(a0),a0
    a54e:	|  |        |      movea.l 4(a0),a1
    a552:	|  |        |      movea.l 24(sp),a0
    a556:	|  |        |      move.l 84(a0),d0
    a55a:	|  |        |      move.l d0,d1
    a55c:	|  |        |      move.l d1,d0
    a55e:	|  |        |      add.l d0,d0
    a560:	|  |        |      add.l d1,d0
    a562:	|  |        |      add.l d0,d0
    a564:	|  |        |      add.l d0,d0
    a566:	|  |        |      lea (0,a1,d0.l),a0
    a56a:	|  |        |      move.l 4(a0),d0
    a56e:	|  |        |      movea.l 24(sp),a0
    a572:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a576:	|  |        \----> movea.l 24(sp),a0
    a57a:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a580:	|  \-------------> tst.l 24(sp)
    a584:	\----------------- bne.w 9fd2 <drawPeople+0x22>
	}
}
    a588:	                   nop
    a58a:	                   nop
    a58c:	                   move.l (sp)+,d2
    a58e:	                   lea 24(sp),sp
    a592:	                   rts

0000a594 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a594:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a596:	          move.l 1c966 <allPeople>,(sp)
	while (thisPerson) {
    a59c:	      /-- bra.s a5b4 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a59e:	/-----|-> movea.l (sp),a0
    a5a0:	|     |   movea.l 114(a0),a0
    a5a4:	|     |   move.l 4(a0),d0
    a5a8:	|     |   cmp.l 8(sp),d0
    a5ac:	|  /--|-- beq.s a5ba <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a5ae:	|  |  |   movea.l (sp),a0
    a5b0:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a5b4:	|  |  \-> tst.l (sp)
    a5b6:	\--|----- bne.s a59e <findPerson+0xa>
    a5b8:	   |  /-- bra.s a5bc <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a5ba:	   \--|-> nop
	}
	return thisPerson;
    a5bc:	      \-> move.l (sp),d0
}
    a5be:	          addq.l #4,sp
    a5c0:	          rts

0000a5c2 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a5c2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a5c4:	       move.l 12(sp),-(sp)
    a5c8:	       jsr a594 <findPerson>
    a5ce:	       addq.l #4,sp
    a5d0:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a5d2:	   /-- bne.s a5d8 <floatCharacter+0x16>
    a5d4:	   |   clr.w d0
    a5d6:	/--|-- bra.s a5e2 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a5d8:	|  \-> movea.l (sp),a0
    a5da:	|      move.l 8(sp),24(a0)
	return TRUE;
    a5e0:	|      moveq #1,d0
}
    a5e2:	\----> addq.l #4,sp
    a5e4:	       rts

0000a5e6 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a5e6:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a5e8:	          tst.l 8(sp)
    a5ec:	      /-- bne.s a5fa <forceWalkingPerson+0x14>
    a5ee:	      |   tst.l 12(sp)
    a5f2:	      +-- bne.s a5fa <forceWalkingPerson+0x14>
    a5f4:	      |   clr.w d0
    a5f6:	/-----|-- bra.w a68c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a5fa:	|     \-> move.l 16(sp),-(sp)
    a5fe:	|         jsr a594 <findPerson>
    a604:	|         addq.l #4,sp
    a606:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a608:	|     /-- bne.s a60e <forceWalkingPerson+0x28>
    a60a:	|     |   clr.w d0
    a60c:	+-----|-- bra.s a68c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a60e:	|     \-> movea.l (sp),a0
    a610:	|         move.l 68(a0),d0
    a614:	|     /-- beq.s a626 <forceWalkingPerson+0x40>
    a616:	|     |   movea.l (sp),a0
    a618:	|     |   move.l 68(a0),d0
    a61c:	|     |   move.l d0,-(sp)
    a61e:	|     |   jsr 4612 <abortFunction>
    a624:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a626:	|     \-> movea.l (sp),a0
    a628:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a62e:	|         movea.l (sp),a0
    a630:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a634:	|         movea.l (sp),a0
    a636:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a63c:	|         movea.l (sp),a0
    a63e:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a644:	|         movea.l (sp),a0
    a646:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a64c:	|         movea.l (sp),a0
    a64e:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a652:	|         movea.l (sp),a0
    a654:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a658:	|         move.l (sp),-(sp)
    a65a:	|         jsr 98f6 <doBorderStuff>
    a660:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a662:	|         pea 1 <_start+0x1>
    a666:	|         move.l 4(sp),-(sp)
    a66a:	|         jsr beda <walkMe>
    a670:	|         addq.l #8,sp
    a672:	|         tst.w d0
    a674:	|     /-- bne.s a67e <forceWalkingPerson+0x98>
    a676:	|     |   movea.l (sp),a0
    a678:	|     |   move.w 66(a0),d0
    a67c:	|  /--|-- beq.s a68a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a67e:	|  |  \-> movea.l (sp),a0
    a680:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a686:	|  |      moveq #1,d0
    a688:	+--|----- bra.s a68c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a68a:	|  \----> clr.w d0
    }
}
    a68c:	\-------> addq.l #4,sp
    a68e:	          rts

0000a690 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a690:	                lea -56(sp),sp
    a694:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a696:	                move.l #320,56(sp)
    a69e:	                move.l #200,52(sp)
    a6a6:	                moveq #-1,d0
    a6a8:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a6ac:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a6b4:	                clr.l 44(sp)
    a6b8:	   /----------- bra.w a890 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a6bc:	/--|----------> movea.l 1ca1e <currentFloor>,a0
    a6c2:	|  |            move.l 12(a0),d1
    a6c6:	|  |            move.l 44(sp),d0
    a6ca:	|  |            lsl.l #3,d0
    a6cc:	|  |            movea.l d1,a0
    a6ce:	|  |            adda.l d0,a0
    a6d0:	|  |            move.l (a0),d0
    a6d2:	|  |            move.l d0,d1
    a6d4:	|  |            subq.l #1,d1
    a6d6:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a6da:	|  |            clr.l 40(sp)
    a6de:	|  |     /----- bra.w a86e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a6e2:	|  |  /--|----> movea.l 1ca1e <currentFloor>,a0
    a6e8:	|  |  |  |      move.l 4(a0),d1
    a6ec:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a6f2:	|  |  |  |      movea.l 12(a0),a0
    a6f6:	|  |  |  |      move.l 44(sp),d0
    a6fa:	|  |  |  |      lsl.l #3,d0
    a6fc:	|  |  |  |      adda.l d0,a0
    a6fe:	|  |  |  |      movea.l 4(a0),a0
    a702:	|  |  |  |      move.l 40(sp),d0
    a706:	|  |  |  |      add.l d0,d0
    a708:	|  |  |  |      add.l d0,d0
    a70a:	|  |  |  |      adda.l d0,a0
    a70c:	|  |  |  |      move.l (a0),d0
    a70e:	|  |  |  |      lsl.l #3,d0
    a710:	|  |  |  |      movea.l d1,a0
    a712:	|  |  |  |      adda.l d0,a0
    a714:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a718:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a71e:	|  |  |  |      move.l 4(a0),d1
    a722:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a728:	|  |  |  |      movea.l 12(a0),a0
    a72c:	|  |  |  |      move.l 44(sp),d0
    a730:	|  |  |  |      lsl.l #3,d0
    a732:	|  |  |  |      adda.l d0,a0
    a734:	|  |  |  |      movea.l 4(a0),a0
    a738:	|  |  |  |      move.l 40(sp),d0
    a73c:	|  |  |  |      add.l d0,d0
    a73e:	|  |  |  |      add.l d0,d0
    a740:	|  |  |  |      adda.l d0,a0
    a742:	|  |  |  |      move.l (a0),d0
    a744:	|  |  |  |      lsl.l #3,d0
    a746:	|  |  |  |      movea.l d1,a0
    a748:	|  |  |  |      adda.l d0,a0
    a74a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a750:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a756:	|  |  |  |      move.l 4(a0),d1
    a75a:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a760:	|  |  |  |      movea.l 12(a0),a0
    a764:	|  |  |  |      move.l 44(sp),d0
    a768:	|  |  |  |      lsl.l #3,d0
    a76a:	|  |  |  |      adda.l d0,a0
    a76c:	|  |  |  |      movea.l 4(a0),a0
    a770:	|  |  |  |      move.l 36(sp),d0
    a774:	|  |  |  |      add.l d0,d0
    a776:	|  |  |  |      add.l d0,d0
    a778:	|  |  |  |      adda.l d0,a0
    a77a:	|  |  |  |      move.l (a0),d0
    a77c:	|  |  |  |      lsl.l #3,d0
    a77e:	|  |  |  |      movea.l d1,a0
    a780:	|  |  |  |      adda.l d0,a0
    a782:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a786:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a78c:	|  |  |  |      move.l 4(a0),d1
    a790:	|  |  |  |      movea.l 1ca1e <currentFloor>,a0
    a796:	|  |  |  |      movea.l 12(a0),a0
    a79a:	|  |  |  |      move.l 44(sp),d0
    a79e:	|  |  |  |      lsl.l #3,d0
    a7a0:	|  |  |  |      adda.l d0,a0
    a7a2:	|  |  |  |      movea.l 4(a0),a0
    a7a6:	|  |  |  |      move.l 36(sp),d0
    a7aa:	|  |  |  |      add.l d0,d0
    a7ac:	|  |  |  |      add.l d0,d0
    a7ae:	|  |  |  |      adda.l d0,a0
    a7b0:	|  |  |  |      move.l (a0),d0
    a7b2:	|  |  |  |      lsl.l #3,d0
    a7b4:	|  |  |  |      movea.l d1,a0
    a7b6:	|  |  |  |      adda.l d0,a0
    a7b8:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a7be:	|  |  |  |      movea.l 68(sp),a0
    a7c2:	|  |  |  |      move.l (a0),d1
    a7c4:	|  |  |  |      movea.l 64(sp),a0
    a7c8:	|  |  |  |      move.l (a0),d0
    a7ca:	|  |  |  |      move.l d1,-(sp)
    a7cc:	|  |  |  |      move.l d0,-(sp)
    a7ce:	|  |  |  |      move.l 24(sp),-(sp)
    a7d2:	|  |  |  |      move.l 32(sp),-(sp)
    a7d6:	|  |  |  |      move.l 40(sp),-(sp)
    a7da:	|  |  |  |      move.l 48(sp),-(sp)
    a7de:	|  |  |  |      lea 28(sp),a0
    a7e2:	|  |  |  |      move.l a0,-(sp)
    a7e4:	|  |  |  |      lea 36(sp),a0
    a7e8:	|  |  |  |      move.l a0,-(sp)
    a7ea:	|  |  |  |      jsr 15fce <closestPointOnLine>
    a7f0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a7f4:	|  |  |  |      movea.l 64(sp),a0
    a7f8:	|  |  |  |      move.l (a0),d0
    a7fa:	|  |  |  |      move.l 8(sp),d1
    a7fe:	|  |  |  |      move.l d0,d2
    a800:	|  |  |  |      sub.l d1,d2
    a802:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a806:	|  |  |  |      movea.l 68(sp),a0
    a80a:	|  |  |  |      move.l (a0),d0
    a80c:	|  |  |  |      move.l 4(sp),d1
    a810:	|  |  |  |      move.l d0,d2
    a812:	|  |  |  |      sub.l d1,d2
    a814:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a818:	|  |  |  |      move.l 28(sp),-(sp)
    a81c:	|  |  |  |      move.l 32(sp),-(sp)
    a820:	|  |  |  |      jsr 17b40 <__mulsi3>
    a826:	|  |  |  |      addq.l #8,sp
    a828:	|  |  |  |      move.l d0,d2
    a82a:	|  |  |  |      move.l 24(sp),-(sp)
    a82e:	|  |  |  |      move.l 28(sp),-(sp)
    a832:	|  |  |  |      jsr 17b40 <__mulsi3>
    a838:	|  |  |  |      addq.l #8,sp
    a83a:	|  |  |  |      move.l d2,d1
    a83c:	|  |  |  |      add.l d0,d1
    a83e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a842:	|  |  |  |      move.l 12(sp),d2
    a846:	|  |  |  |      cmp.l 32(sp),d2
    a84a:	|  |  |  |  /-- bge.s a864 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a84c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a852:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a858:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a85e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a864:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a86a:	|  |  |  |      addq.l #1,40(sp)
    a86e:	|  |  |  \----> movea.l 1ca1e <currentFloor>,a0
    a874:	|  |  |         move.l 12(a0),d1
    a878:	|  |  |         move.l 44(sp),d0
    a87c:	|  |  |         lsl.l #3,d0
    a87e:	|  |  |         movea.l d1,a0
    a880:	|  |  |         adda.l d0,a0
    a882:	|  |  |         move.l (a0),d0
    a884:	|  |  |         cmp.l 40(sp),d0
    a888:	|  |  \-------- bgt.w a6e2 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a88c:	|  |            addq.l #1,44(sp)
    a890:	|  \----------> movea.l 1ca1e <currentFloor>,a0
    a896:	|               move.l 8(a0),d0
    a89a:	|               cmp.l 44(sp),d0
    a89e:	\-------------- bgt.w a6bc <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a8a2:	                moveq #-1,d0
    a8a4:	                cmp.l 48(sp),d0
    a8a8:	            /-- bne.s a8ae <handleClosestPoint+0x21e>
    a8aa:	            |   clr.w d0
    a8ac:	         /--|-- bra.s a8c8 <handleClosestPoint+0x238>
	*setX = gotX;
    a8ae:	         |  \-> movea.l 64(sp),a0
    a8b2:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a8b6:	         |      movea.l 68(sp),a0
    a8ba:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a8be:	         |      movea.l 72(sp),a0
    a8c2:	         |      move.l 48(sp),(a0)

	return TRUE;
    a8c6:	         |      moveq #1,d0
}
    a8c8:	         \----> move.l (sp)+,d2
    a8ca:	                lea 56(sp),sp
    a8ce:	                rts

0000a8d0 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a8d0:	clr.l 1c97a <personRegion+0x10>
	personRegion.sY = 0;
    a8d6:	clr.l 1c97e <personRegion+0x14>
	personRegion.di = -1;
    a8dc:	moveq #-1,d0
    a8de:	move.l d0,1c982 <personRegion+0x18>
	allScreenRegions = NULL;
    a8e4:	clr.l 1ca12 <allScreenRegions>

	return TRUE;
    a8ea:	moveq #1,d0
}
    a8ec:	rts

0000a8ee <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a8ee:	          subq.l #4,sp
    a8f0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a8f2:	          tst.l 12(sp)
    a8f6:	      /-- bne.s a8fe <jumpPerson+0x10>
    a8f8:	      |   tst.l 16(sp)
    a8fc:	/-----|-- beq.s a972 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a8fe:	|     \-> move.l 20(sp),-(sp)
    a902:	|         jsr a594 <findPerson>
    a908:	|         addq.l #4,sp
    a90a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a90e:	|  /----- beq.s a976 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a910:	|  |      movea.l 4(sp),a0
    a914:	|  |      move.l 68(a0),d0
    a918:	|  |  /-- beq.s a92c <jumpPerson+0x3e>
    a91a:	|  |  |   movea.l 4(sp),a0
    a91e:	|  |  |   move.l 68(a0),d0
    a922:	|  |  |   move.l d0,-(sp)
    a924:	|  |  |   jsr 4612 <abortFunction>
    a92a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a92c:	|  |  \-> movea.l 4(sp),a0
    a930:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a934:	|  |      movea.l 4(sp),a0
    a938:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a93c:	|  |      movea.l 4(sp),a0
    a940:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a944:	|  |      move.l 16(sp),-(sp)
    a948:	|  |      jsr 175e6 <__floatsisf>
    a94e:	|  |      addq.l #4,sp
    a950:	|  |      move.l d0,d2
    a952:	|  |      move.l 12(sp),-(sp)
    a956:	|  |      jsr 175e6 <__floatsisf>
    a95c:	|  |      addq.l #4,sp
    a95e:	|  |      move.l d2,-(sp)
    a960:	|  |      move.l d0,-(sp)
    a962:	|  |      move.l 12(sp),-(sp)
    a966:	|  |      jsr acdc <moveAndScale>
    a96c:	|  |      lea 12(sp),sp
    a970:	|  |  /-- bra.s a978 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a972:	\--|--|-> nop
    a974:	   |  +-- bra.s a978 <jumpPerson+0x8a>
    if (!moveMe) return;
    a976:	   \--|-> nop
}
    a978:	      \-> move.l (sp)+,d2
    a97a:	          addq.l #4,sp
    a97c:	          rts

0000a97e <killAllPeople>:


void killAllPeople () {
    a97e:	          subq.l #8,sp
    a980:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a982:	   /----- bra.s a9ee <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a984:	/--|----> movea.l 1c966 <allPeople>,a0
    a98a:	|  |      move.l 68(a0),d0
    a98e:	|  |  /-- beq.s a9a4 <killAllPeople+0x26>
    a990:	|  |  |   movea.l 1c966 <allPeople>,a0
    a996:	|  |  |   move.l 68(a0),d0
    a99a:	|  |  |   move.l d0,-(sp)
    a99c:	|  |  |   jsr 4612 <abortFunction>
    a9a2:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a9a4:	|  |  \-> movea.l 1c966 <allPeople>,a0
    a9aa:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a9ae:	|  |      move.l 1c966 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a9b6:	|  |      movea.l 1c966 <allPeople>,a0
    a9bc:	|  |      move.l 36(a0),d0
    a9c0:	|  |      move.l d0,1c966 <allPeople>
		removeObjectType (killPeople -> thisType);
    a9c6:	|  |      movea.l 8(sp),a0
    a9ca:	|  |      move.l 114(a0),d0
    a9ce:	|  |      move.l d0,-(sp)
    a9d0:	|  |      jsr d83e <removeObjectType>
    a9d6:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a9d8:	|  |      move.l 8(sp),4(sp)
    a9de:	|  |      move.l 1c902 <SysBase>,d0
    a9e4:	|  |      movea.l d0,a6
    a9e6:	|  |      movea.l 4(sp),a1
    a9ea:	|  |      jsr -690(a6)
	while (allPeople) {
    a9ee:	|  \----> move.l 1c966 <allPeople>,d0
    a9f4:	\-------- bne.s a984 <killAllPeople+0x6>
	}
}
    a9f6:	          nop
    a9f8:	          nop
    a9fa:	          movea.l (sp)+,a6
    a9fc:	          addq.l #8,sp
    a9fe:	          rts

0000aa00 <killMostPeople>:

void killMostPeople() {
    aa00:	          lea -12(sp),sp
    aa04:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aa06:	          move.l #117094,12(sp)

    while (*lookyHere) {
    aa0e:	   /----- bra.w aa94 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aa12:	/--|----> movea.l 12(sp),a0
    aa16:	|  |      movea.l (a0),a0
    aa18:	|  |      move.l 118(a0),d0
    aa1c:	|  |      moveq #32,d1
    aa1e:	|  |      and.l d1,d0
    aa20:	|  |  /-- beq.s aa32 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aa22:	|  |  |   movea.l 12(sp),a0
    aa26:	|  |  |   move.l (a0),d0
    aa28:	|  |  |   moveq #36,d1
    aa2a:	|  |  |   add.l d0,d1
    aa2c:	|  |  |   move.l d1,12(sp)
    aa30:	|  +--|-- bra.s aa94 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aa32:	|  |  \-> movea.l 12(sp),a0
    aa36:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aa3a:	|  |      movea.l 8(sp),a0
    aa3e:	|  |      move.l 36(a0),d0
    aa42:	|  |      movea.l 12(sp),a0
    aa46:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aa48:	|  |      movea.l 8(sp),a0
    aa4c:	|  |      move.l 68(a0),d0
    aa50:	|  |  /-- beq.s aa64 <killMostPeople+0x64>
    aa52:	|  |  |   movea.l 8(sp),a0
    aa56:	|  |  |   move.l 68(a0),d0
    aa5a:	|  |  |   move.l d0,-(sp)
    aa5c:	|  |  |   jsr 4612 <abortFunction>
    aa62:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    aa64:	|  |  \-> movea.l 8(sp),a0
    aa68:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    aa6c:	|  |      movea.l 8(sp),a0
    aa70:	|  |      move.l 114(a0),d0
    aa74:	|  |      move.l d0,-(sp)
    aa76:	|  |      jsr d83e <removeObjectType>
    aa7c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    aa7e:	|  |      move.l 8(sp),4(sp)
    aa84:	|  |      move.l 1c902 <SysBase>,d0
    aa8a:	|  |      movea.l d0,a6
    aa8c:	|  |      movea.l 4(sp),a1
    aa90:	|  |      jsr -690(a6)
    while (*lookyHere) {
    aa94:	|  \----> movea.l 12(sp),a0
    aa98:	|         move.l (a0),d0
    aa9a:	\-------- bne.w aa12 <killMostPeople+0x12>
        }
    }
}
    aa9e:	          nop
    aaa0:	          nop
    aaa2:	          movea.l (sp)+,a6
    aaa4:	          lea 12(sp),sp
    aaa8:	          rts

0000aaaa <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    aaaa:	clr.l -(sp)
    aaac:	move.l sp,d0
    aaae:	addq.l #8,d0
    aab0:	move.l d0,-(sp)
    aab2:	jsr 806a <setFrames>
    aab8:	addq.l #8,sp
}
    aaba:	nop
    aabc:	rts

0000aabe <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    aabe:	          lea -12(sp),sp
    aac2:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    aac4:	          tst.l 20(sp)
    aac8:	      /-- bne.s aad6 <makeWalkingPerson+0x18>
    aaca:	      |   tst.l 24(sp)
    aace:	      +-- bne.s aad6 <makeWalkingPerson+0x18>
    aad0:	      |   clr.w d0
    aad2:	/-----|-- bra.w ac6e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    aad6:	|     \-> movea.l 1ca1e <currentFloor>,a0
    aadc:	|         move.l 8(a0),d0
    aae0:	|     /-- bne.s aae8 <makeWalkingPerson+0x2a>
    aae2:	|     |   clr.w d0
    aae4:	+-----|-- bra.w ac6e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    aae8:	|     \-> move.l 28(sp),-(sp)
    aaec:	|         jsr a594 <findPerson>
    aaf2:	|         addq.l #4,sp
    aaf4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    aaf8:	|     /-- bne.s ab00 <makeWalkingPerson+0x42>
    aafa:	|     |   clr.w d0
    aafc:	+-----|-- bra.w ac6e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    ab00:	|     \-> movea.l 12(sp),a0
    ab04:	|         move.l 68(a0),d0
    ab08:	|     /-- beq.s ab1c <makeWalkingPerson+0x5e>
    ab0a:	|     |   movea.l 12(sp),a0
    ab0e:	|     |   move.l 68(a0),d0
    ab12:	|     |   move.l d0,-(sp)
    ab14:	|     |   jsr 4612 <abortFunction>
    ab1a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    ab1c:	|     \-> movea.l 12(sp),a0
    ab20:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    ab24:	|         movea.l 12(sp),a0
    ab28:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ab2e:	|         movea.l 12(sp),a0
    ab32:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ab38:	|         movea.l 12(sp),a0
    ab3c:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ab42:	|         movea.l 12(sp),a0
    ab46:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ab4c:	|         move.l 24(sp),-(sp)
    ab50:	|         move.l 24(sp),-(sp)
    ab54:	|         jsr 16516 <inFloor>
    ab5a:	|         addq.l #8,sp
    ab5c:	|         movea.l 12(sp),a0
    ab60:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ab64:	|         movea.l 12(sp),a0
    ab68:	|         move.l 60(a0),d0
    ab6c:	|         moveq #-1,d1
    ab6e:	|         cmp.l d0,d1
    ab70:	|     /-- bne.s aba0 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ab72:	|     |   movea.w #60,a0
    ab76:	|     |   adda.l 12(sp),a0
    ab7a:	|     |   moveq #44,d1
    ab7c:	|     |   add.l 12(sp),d1
    ab80:	|     |   moveq #40,d0
    ab82:	|     |   add.l 12(sp),d0
    ab86:	|     |   move.l a0,-(sp)
    ab88:	|     |   move.l d1,-(sp)
    ab8a:	|     |   move.l d0,-(sp)
    ab8c:	|     |   jsr a690 <handleClosestPoint>
    ab92:	|     |   lea 12(sp),sp
    ab96:	|     |   tst.w d0
    ab98:	|     +-- bne.s aba0 <makeWalkingPerson+0xe2>
    ab9a:	|     |   clr.w d0
    ab9c:	+-----|-- bra.w ac6e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    aba0:	|     \-> movea.l 12(sp),a0
    aba4:	|         move.l 4(a0),d0
    aba8:	|         move.l d0,-(sp)
    abaa:	|         jsr 1757e <__fixsfsi>
    abb0:	|         addq.l #4,sp
    abb2:	|         move.l d0,d2
    abb4:	|         movea.l 12(sp),a0
    abb8:	|         move.l (a0),d0
    abba:	|         move.l d0,-(sp)
    abbc:	|         jsr 1757e <__fixsfsi>
    abc2:	|         addq.l #4,sp
    abc4:	|         move.l d2,-(sp)
    abc6:	|         move.l d0,-(sp)
    abc8:	|         jsr 16516 <inFloor>
    abce:	|         addq.l #8,sp
    abd0:	|         movea.l 12(sp),a0
    abd4:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    abd8:	|         movea.l 12(sp),a0
    abdc:	|         move.l 56(a0),d0
    abe0:	|         moveq #-1,d1
    abe2:	|         cmp.l d0,d1
    abe4:	|     /-- bne.s ac36 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    abe6:	|     |   movea.l 12(sp),a0
    abea:	|     |   move.l (a0),d0
    abec:	|     |   move.l d0,-(sp)
    abee:	|     |   jsr 1757e <__fixsfsi>
    abf4:	|     |   addq.l #4,sp
    abf6:	|     |   move.l d0,8(sp)
    abfa:	|     |   movea.l 12(sp),a0
    abfe:	|     |   move.l 4(a0),d0
    ac02:	|     |   move.l d0,-(sp)
    ac04:	|     |   jsr 1757e <__fixsfsi>
    ac0a:	|     |   addq.l #4,sp
    ac0c:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ac10:	|     |   moveq #56,d0
    ac12:	|     |   add.l 12(sp),d0
    ac16:	|     |   move.l d0,-(sp)
    ac18:	|     |   lea 8(sp),a0
    ac1c:	|     |   move.l a0,-(sp)
    ac1e:	|     |   moveq #16,d0
    ac20:	|     |   add.l sp,d0
    ac22:	|     |   move.l d0,-(sp)
    ac24:	|     |   jsr a690 <handleClosestPoint>
    ac2a:	|     |   lea 12(sp),sp
    ac2e:	|     |   tst.w d0
    ac30:	|     +-- bne.s ac36 <makeWalkingPerson+0x178>
    ac32:	|     |   clr.w d0
    ac34:	+-----|-- bra.s ac6e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    ac36:	|     \-> move.l 12(sp),-(sp)
    ac3a:	|         jsr 98f6 <doBorderStuff>
    ac40:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ac42:	|         clr.l -(sp)
    ac44:	|         move.l 16(sp),-(sp)
    ac48:	|         jsr beda <walkMe>
    ac4e:	|         addq.l #8,sp
    ac50:	|         tst.w d0
    ac52:	|     /-- bne.s ac5e <makeWalkingPerson+0x1a0>
    ac54:	|     |   movea.l 12(sp),a0
    ac58:	|     |   move.w 66(a0),d0
    ac5c:	|  /--|-- beq.s ac6c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ac5e:	|  |  \-> movea.l 12(sp),a0
    ac62:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ac68:	|  |      moveq #1,d0
    ac6a:	+--|----- bra.s ac6e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ac6c:	|  \----> clr.w d0
	}
}
    ac6e:	\-------> move.l (sp)+,d2
    ac70:	          lea 12(sp),sp
    ac74:	          rts

0000ac76 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ac76:	       lea -16(sp),sp
    ac7a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ac7c:	       moveq #12,d0
    ac7e:	       move.l d0,16(sp)
    ac82:	       clr.l 12(sp)
    ac86:	       move.l 1c902 <SysBase>,d0
    ac8c:	       movea.l d0,a6
    ac8e:	       move.l 16(sp),d0
    ac92:	       move.l 12(sp),d1
    ac96:	       jsr -684(a6)
    ac9a:	       move.l d0,8(sp)
    ac9e:	       move.l 8(sp),d0
    aca2:	       move.l d0,4(sp)
    if(newAnim == 0) {
    aca6:	   /-- bne.s acba <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    aca8:	   |   pea 19144 <PutChar+0x14ee>
    acae:	   |   jsr 171b4 <KPrintF>
    acb4:	   |   addq.l #4,sp
        return NULL;    
    acb6:	   |   moveq #0,d0
    acb8:	/--|-- bra.s acd4 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    acba:	|  \-> movea.l 4(sp),a0
    acbe:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    acc0:	|      movea.l 4(sp),a0
    acc4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    acc8:	|      movea.l 4(sp),a0
    accc:	|      clr.l 4(a0)
	return newAnim;
    acd0:	|      move.l 4(sp),d0
}
    acd4:	\----> movea.l (sp)+,a6
    acd6:	       lea 16(sp),sp
    acda:	       rts

0000acdc <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    acdc:	    move.l d2,-(sp)
	me->x = x;
    acde:	    movea.l 8(sp),a0
    ace2:	    move.l 12(sp),(a0)
	me->y = y;
    ace6:	    movea.l 8(sp),a0
    acea:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    acf0:	    movea.l 8(sp),a0
    acf4:	    clr.l 8(a0)
	me->oldy = 0;
    acf8:	    movea.l 8(sp),a0
    acfc:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ad00:	    movea.l 8(sp),a0
    ad04:	    move.l 118(a0),d0
    ad08:	    moveq #2,d1
    ad0a:	    and.l d1,d0
    ad0c:	/-- bne.s ad64 <moveAndScale+0x88>
    ad0e:	|   move.w 1c296 <scaleDivide>,d0
    ad14:	+-- beq.s ad64 <moveAndScale+0x88>
    ad16:	|   movea.l 8(sp),a0
    ad1a:	|   move.l 4(a0),d2
    ad1e:	|   move.w 1c294 <scaleHorizon>,d0
    ad24:	|   movea.w d0,a0
    ad26:	|   move.l a0,-(sp)
    ad28:	|   jsr 175e6 <__floatsisf>
    ad2e:	|   addq.l #4,sp
    ad30:	|   move.l d0,-(sp)
    ad32:	|   move.l d2,-(sp)
    ad34:	|   jsr 178da <__subsf3>
    ad3a:	|   addq.l #8,sp
    ad3c:	|   move.l d0,d2
    ad3e:	|   move.w 1c296 <scaleDivide>,d0
    ad44:	|   movea.w d0,a0
    ad46:	|   move.l a0,-(sp)
    ad48:	|   jsr 175e6 <__floatsisf>
    ad4e:	|   addq.l #4,sp
    ad50:	|   move.l d0,-(sp)
    ad52:	|   move.l d2,-(sp)
    ad54:	|   jsr 1749c <__divsf3>
    ad5a:	|   addq.l #8,sp
    ad5c:	|   movea.l 8(sp),a0
    ad60:	|   move.l d0,32(a0)
}
    ad64:	\-> nop
    ad66:	    move.l (sp)+,d2
    ad68:	    rts

0000ad6a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ad6a:	          lea -16(sp),sp
    ad6e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ad70:	          move.l 24(sp),-(sp)
    ad74:	          jsr a594 <findPerson>
    ad7a:	          addq.l #4,sp
    ad7c:	          move.l d0,8(sp)

    if (p) {
    ad80:	/-------- beq.w ae60 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ad84:	|         move.l 1ca16 <overRegion>,d0
    ad8a:	|         cmpi.l #117098,d0
    ad90:	|     /-- bne.s adae <removeOneCharacter+0x44>
    ad92:	|     |   movea.l 1ca16 <overRegion>,a0
    ad98:	|     |   move.l 28(a0),d1
    ad9c:	|     |   movea.l 8(sp),a0
    ada0:	|     |   move.l 114(a0),d0
    ada4:	|     |   cmp.l d1,d0
    ada6:	|     +-- bne.s adae <removeOneCharacter+0x44>
            overRegion = NULL;
    ada8:	|     |   clr.l 1ca16 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    adae:	|     \-> movea.l 8(sp),a0
    adb2:	|         move.l 68(a0),d0
    adb6:	|     /-- beq.s adca <removeOneCharacter+0x60>
    adb8:	|     |   movea.l 8(sp),a0
    adbc:	|     |   move.l 68(a0),d0
    adc0:	|     |   move.l d0,-(sp)
    adc2:	|     |   jsr 4612 <abortFunction>
    adc8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    adca:	|     \-> movea.l 8(sp),a0
    adce:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    add2:	|         clr.l 12(sp)
    add6:	|     /-- bra.s adfe <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    add8:	|  /--|-> movea.l 8(sp),a0
    addc:	|  |  |   movea.l 80(a0),a0
    ade0:	|  |  |   move.l (a0),d1
    ade2:	|  |  |   move.l 12(sp),d0
    ade6:	|  |  |   add.l d0,d0
    ade8:	|  |  |   add.l d0,d0
    adea:	|  |  |   movea.l d1,a0
    adec:	|  |  |   adda.l d0,a0
    adee:	|  |  |   move.l (a0),d0
    adf0:	|  |  |   move.l d0,-(sp)
    adf2:	|  |  |   jsr 9872 <deleteAnim>
    adf8:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    adfa:	|  |  |   addq.l #1,12(sp)
    adfe:	|  |  \-> moveq #2,d0
    ae00:	|  |      cmp.l 12(sp),d0
    ae04:	|  \----- bge.s add8 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ae06:	|         move.l #117094,16(sp)
    ae0e:	|     /-- bra.s ae1e <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ae10:	|  /--|-> movea.l 16(sp),a0
    ae14:	|  |  |   move.l (a0),d0
    ae16:	|  |  |   moveq #36,d1
    ae18:	|  |  |   add.l d0,d1
    ae1a:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ae1e:	|  |  \-> movea.l 16(sp),a0
    ae22:	|  |      move.l (a0),d0
    ae24:	|  |      cmp.l 8(sp),d0
    ae28:	|  \----- bne.s ae10 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ae2a:	|         movea.l 8(sp),a0
    ae2e:	|         move.l 36(a0),d0
    ae32:	|         movea.l 16(sp),a0
    ae36:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    ae38:	|         movea.l 8(sp),a0
    ae3c:	|         move.l 114(a0),d0
    ae40:	|         move.l d0,-(sp)
    ae42:	|         jsr d83e <removeObjectType>
    ae48:	|         addq.l #4,sp
        FreeVec(p);
    ae4a:	|         move.l 8(sp),4(sp)
    ae50:	|         move.l 1c902 <SysBase>,d0
    ae56:	|         movea.l d0,a6
    ae58:	|         movea.l 4(sp),a1
    ae5c:	|         jsr -690(a6)
    }
}
    ae60:	\-------> nop
    ae62:	          movea.l (sp)+,a6
    ae64:	          lea 16(sp),sp
    ae68:	          rts

0000ae6a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ae6a:	       subq.l #8,sp
    ae6c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ae6e:	       movea.l 16(sp),a0
    ae72:	       movea.l 80(a0),a0
    ae76:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ae7c:	       movea.l 16(sp),a0
    ae80:	       move.l 92(a0),d2
    ae84:	       move.l 4(sp),-(sp)
    ae88:	       pea b4 <_start+0xb4>
    ae8c:	       jsr 17bbe <__divsi3>
    ae92:	       addq.l #8,sp
    ae94:	       add.l d2,d0
    ae96:	       move.l d0,d1
    ae98:	       addi.l #180,d1
    ae9e:	       movea.l 16(sp),a0
    aea2:	       move.l 100(a0),d0
    aea6:	       move.l d1,d2
    aea8:	       add.l d0,d2
    aeaa:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    aeae:	   /-- bra.s aeb8 <rethinkAngle+0x4e>
    aeb0:	/--|-> addi.l #-360,8(sp)
    aeb8:	|  \-> cmpi.l #359,8(sp)
    aec0:	\----- bgt.s aeb0 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    aec2:	       move.l 4(sp),-(sp)
    aec6:	       move.l 12(sp),-(sp)
    aeca:	       jsr 17b40 <__mulsi3>
    aed0:	       addq.l #8,sp
    aed2:	       pea 168 <decodeFilename+0x50>
    aed6:	       move.l d0,-(sp)
    aed8:	       jsr 17bbe <__divsi3>
    aede:	       addq.l #8,sp
    aee0:	       movea.l 16(sp),a0
    aee4:	       move.l d0,106(a0)
}
    aee8:	       nop
    aeea:	       move.l (sp)+,d2
    aeec:	       addq.l #8,sp
    aeee:	       rts

0000aef0 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    aef0:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    aef2:	          movea.l 8(sp),a0
    aef6:	          move.l 8(a0),d0
    aefa:	          move.l 12(sp),-(sp)
    aefe:	          move.l d0,-(sp)
    af00:	          jsr 8d0 <put2bytes>
    af06:	          addq.l #8,sp
	if (p -> numFrames) {
    af08:	          movea.l 8(sp),a0
    af0c:	          move.l 8(a0),d0
    af10:	/-------- beq.w afb4 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    af14:	|         movea.l 8(sp),a0
    af18:	|         movea.l (a0),a0
    af1a:	|         move.l (a0),d0
    af1c:	|         move.l 12(sp),-(sp)
    af20:	|         move.l d0,-(sp)
    af22:	|         jsr 958 <put4bytes>
    af28:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    af2a:	|         clr.l (sp)
    af2c:	|     /-- bra.s afa6 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    af2e:	|  /--|-> movea.l 8(sp),a0
    af32:	|  |  |   movea.l 4(a0),a0
    af36:	|  |  |   move.l (sp),d1
    af38:	|  |  |   move.l d1,d0
    af3a:	|  |  |   add.l d0,d0
    af3c:	|  |  |   add.l d1,d0
    af3e:	|  |  |   add.l d0,d0
    af40:	|  |  |   add.l d0,d0
    af42:	|  |  |   adda.l d0,a0
    af44:	|  |  |   move.l (a0),d0
    af46:	|  |  |   move.l 12(sp),-(sp)
    af4a:	|  |  |   move.l d0,-(sp)
    af4c:	|  |  |   jsr 958 <put4bytes>
    af52:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    af54:	|  |  |   movea.l 8(sp),a0
    af58:	|  |  |   movea.l 4(a0),a0
    af5c:	|  |  |   move.l (sp),d1
    af5e:	|  |  |   move.l d1,d0
    af60:	|  |  |   add.l d0,d0
    af62:	|  |  |   add.l d1,d0
    af64:	|  |  |   add.l d0,d0
    af66:	|  |  |   add.l d0,d0
    af68:	|  |  |   adda.l d0,a0
    af6a:	|  |  |   move.l 4(a0),d0
    af6e:	|  |  |   move.l 12(sp),-(sp)
    af72:	|  |  |   move.l d0,-(sp)
    af74:	|  |  |   jsr 958 <put4bytes>
    af7a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    af7c:	|  |  |   movea.l 8(sp),a0
    af80:	|  |  |   movea.l 4(a0),a0
    af84:	|  |  |   move.l (sp),d1
    af86:	|  |  |   move.l d1,d0
    af88:	|  |  |   add.l d0,d0
    af8a:	|  |  |   add.l d1,d0
    af8c:	|  |  |   add.l d0,d0
    af8e:	|  |  |   add.l d0,d0
    af90:	|  |  |   adda.l d0,a0
    af92:	|  |  |   move.l 8(a0),d0
    af96:	|  |  |   move.l 12(sp),-(sp)
    af9a:	|  |  |   move.l d0,-(sp)
    af9c:	|  |  |   jsr 958 <put4bytes>
    afa2:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    afa4:	|  |  |   addq.l #1,(sp)
    afa6:	|  |  \-> movea.l 8(sp),a0
    afaa:	|  |      move.l 8(a0),d0
    afae:	|  |      cmp.l (sp),d0
    afb0:	|  \----- bgt.w af2e <saveAnim+0x3e>
		}
	}
	return TRUE;
    afb4:	\-------> moveq #1,d0
}
    afb6:	          addq.l #4,sp
    afb8:	          rts

0000afba <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    afba:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    afbc:	             movea.l 8(sp),a0
    afc0:	             move.l 4(a0),d0
    afc4:	             move.l 12(sp),-(sp)
    afc8:	             move.l d0,-(sp)
    afca:	             jsr 8d0 <put2bytes>
    afd0:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    afd2:	             clr.l (sp)
    afd4:	   /-------- bra.s b000 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    afd6:	/--|-------> movea.l 8(sp),a0
    afda:	|  |         move.l (a0),d1
    afdc:	|  |         move.l (sp),d0
    afde:	|  |         add.l d0,d0
    afe0:	|  |         add.l d0,d0
    afe2:	|  |         movea.l d1,a0
    afe4:	|  |         adda.l d0,a0
    afe6:	|  |         move.l (a0),d0
    afe8:	|  |         move.l 12(sp),-(sp)
    afec:	|  |         move.l d0,-(sp)
    afee:	|  |         jsr aef0 <saveAnim>
    aff4:	|  |         addq.l #8,sp
    aff6:	|  |         tst.w d0
    aff8:	|  |     /-- bne.s affe <saveCostume+0x44>
    affa:	|  |     |   clr.w d0
    affc:	|  |  /--|-- bra.s b014 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    affe:	|  |  |  \-> addq.l #1,(sp)
    b000:	|  \--|----> movea.l 8(sp),a0
    b004:	|     |      move.l 4(a0),d1
    b008:	|     |      move.l d1,d0
    b00a:	|     |      add.l d0,d0
    b00c:	|     |      add.l d1,d0
    b00e:	|     |      cmp.l (sp),d0
    b010:	\-----|----- bgt.s afd6 <saveCostume+0x1c>
	}

	return TRUE;
    b012:	      |      moveq #1,d0
}
    b014:	      \----> addq.l #4,sp
    b016:	             rts

0000b018 <savePeople>:

BOOL savePeople (BPTR fp) {
    b018:	             lea -144(sp),sp
    b01c:	             move.l a6,-(sp)
    b01e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b020:	             move.l 1c966 <allPeople>,148(sp)
	int countPeople = 0, a;
    b028:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b02c:	             move.w 1c294 <scaleHorizon>,d0
    b032:	             movea.w d0,a0
    b034:	             move.l 156(sp),-(sp)
    b038:	             move.l a0,-(sp)
    b03a:	             jsr a9c <putSigned>
    b040:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b042:	             move.w 1c296 <scaleDivide>,d0
    b048:	             movea.w d0,a0
    b04a:	             move.l 156(sp),-(sp)
    b04e:	             move.l a0,-(sp)
    b050:	             jsr a9c <putSigned>
    b056:	             addq.l #8,sp

	while (me) {
    b058:	         /-- bra.s b068 <savePeople+0x50>
		countPeople ++;
    b05a:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b05e:	      |  |   movea.l 148(sp),a0
    b062:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b068:	      |  \-> tst.l 148(sp)
    b06c:	      \----- bne.s b05a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b06e:	             move.l 156(sp),-(sp)
    b072:	             move.l 148(sp),-(sp)
    b076:	             jsr 8d0 <put2bytes>
    b07c:	             addq.l #8,sp

	me = allPeople;
    b07e:	             move.l 1c966 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b086:	             clr.l 140(sp)
    b08a:	   /-------- bra.w b4e2 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b08e:	/--|-------> movea.l 148(sp),a0
    b092:	|  |         move.l (a0),d0
    b094:	|  |         move.l 156(sp),-(sp)
    b098:	|  |         move.l d0,-(sp)
    b09a:	|  |         jsr a46 <putFloat>
    b0a0:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b0a2:	|  |         movea.l 148(sp),a0
    b0a6:	|  |         move.l 4(a0),d0
    b0aa:	|  |         move.l 156(sp),-(sp)
    b0ae:	|  |         move.l d0,-(sp)
    b0b0:	|  |         jsr a46 <putFloat>
    b0b6:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b0b8:	|  |         movea.l 148(sp),a0
    b0bc:	|  |         move.l 80(a0),d0
    b0c0:	|  |         move.l 156(sp),-(sp)
    b0c4:	|  |         move.l d0,-(sp)
    b0c6:	|  |         jsr afba <saveCostume>
    b0cc:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b0ce:	|  |         movea.l 148(sp),a0
    b0d2:	|  |         move.l 72(a0),d0
    b0d6:	|  |         move.l 156(sp),-(sp)
    b0da:	|  |         move.l d0,-(sp)
    b0dc:	|  |         jsr aef0 <saveAnim>
    b0e2:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b0e4:	|  |         move.l 156(sp),136(sp)
    b0ea:	|  |         movea.l 148(sp),a0
    b0ee:	|  |         move.l 72(a0),d1
    b0f2:	|  |         movea.l 148(sp),a0
    b0f6:	|  |         move.l 76(a0),d0
    b0fa:	|  |         cmp.l d1,d0
    b0fc:	|  |         seq d0
    b0fe:	|  |         neg.b d0
    b100:	|  |         move.b d0,d0
    b102:	|  |         andi.l #255,d0
    b108:	|  |         move.l d0,132(sp)
    b10c:	|  |         move.l 1c90a <DOSBase>,d0
    b112:	|  |         movea.l d0,a6
    b114:	|  |         move.l 136(sp),d1
    b118:	|  |         move.l 132(sp),d2
    b11c:	|  |         jsr -312(a6)
    b120:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b124:	|  |         movea.l 148(sp),a0
    b128:	|  |         move.l 32(a0),d0
    b12c:	|  |         move.l 156(sp),-(sp)
    b130:	|  |         move.l d0,-(sp)
    b132:	|  |         jsr a46 <putFloat>
    b138:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b13a:	|  |         movea.l 148(sp),a0
    b13e:	|  |         move.l 118(a0),d0
    b142:	|  |         move.l 156(sp),-(sp)
    b146:	|  |         move.l d0,-(sp)
    b148:	|  |         jsr 8d0 <put2bytes>
    b14e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b150:	|  |         movea.l 148(sp),a0
    b154:	|  |         move.l 20(a0),d0
    b158:	|  |         move.l 156(sp),-(sp)
    b15c:	|  |         move.l d0,-(sp)
    b15e:	|  |         jsr 8d0 <put2bytes>
    b164:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b166:	|  |         movea.l 148(sp),a0
    b16a:	|  |         move.l 40(a0),d0
    b16e:	|  |         move.l 156(sp),-(sp)
    b172:	|  |         move.l d0,-(sp)
    b174:	|  |         jsr 8d0 <put2bytes>
    b17a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b17c:	|  |         movea.l 148(sp),a0
    b180:	|  |         move.l 44(a0),d0
    b184:	|  |         move.l 156(sp),-(sp)
    b188:	|  |         move.l d0,-(sp)
    b18a:	|  |         jsr 8d0 <put2bytes>
    b190:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b192:	|  |         movea.l 148(sp),a0
    b196:	|  |         move.l 48(a0),d0
    b19a:	|  |         move.l 156(sp),-(sp)
    b19e:	|  |         move.l d0,-(sp)
    b1a0:	|  |         jsr 8d0 <put2bytes>
    b1a6:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b1a8:	|  |         movea.l 148(sp),a0
    b1ac:	|  |         move.l 52(a0),d0
    b1b0:	|  |         move.l 156(sp),-(sp)
    b1b4:	|  |         move.l d0,-(sp)
    b1b6:	|  |         jsr 8d0 <put2bytes>
    b1bc:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b1be:	|  |         movea.l 148(sp),a0
    b1c2:	|  |         move.l 84(a0),d0
    b1c6:	|  |         move.l 156(sp),-(sp)
    b1ca:	|  |         move.l d0,-(sp)
    b1cc:	|  |         jsr 8d0 <put2bytes>
    b1d2:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b1d4:	|  |         movea.l 148(sp),a0
    b1d8:	|  |         move.l 88(a0),d0
    b1dc:	|  |         move.l 156(sp),-(sp)
    b1e0:	|  |         move.l d0,-(sp)
    b1e2:	|  |         jsr 8d0 <put2bytes>
    b1e8:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b1ea:	|  |         movea.l 148(sp),a0
    b1ee:	|  |         move.l 28(a0),d0
    b1f2:	|  |         move.l 156(sp),-(sp)
    b1f6:	|  |         move.l d0,-(sp)
    b1f8:	|  |         jsr 8d0 <put2bytes>
    b1fe:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b200:	|  |         movea.l 148(sp),a0
    b204:	|  |         move.l 122(a0),d0
    b208:	|  |         move.l 156(sp),-(sp)
    b20c:	|  |         move.l d0,-(sp)
    b20e:	|  |         jsr 8d0 <put2bytes>
    b214:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b216:	|  |         movea.l 148(sp),a0
    b21a:	|  |         move.l 24(a0),d0
    b21e:	|  |         move.l d0,d0
    b220:	|  |         movea.w d0,a0
    b222:	|  |         move.l 156(sp),-(sp)
    b226:	|  |         move.l a0,-(sp)
    b228:	|  |         jsr a9c <putSigned>
    b22e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b230:	|  |         move.l 156(sp),124(sp)
    b236:	|  |         movea.l 148(sp),a0
    b23a:	|  |         move.w 104(a0),d0
    b23e:	|  |         movea.w d0,a0
    b240:	|  |         move.l a0,120(sp)
    b244:	|  |         move.l 1c90a <DOSBase>,d0
    b24a:	|  |         movea.l d0,a6
    b24c:	|  |         move.l 124(sp),d1
    b250:	|  |         move.l 120(sp),d2
    b254:	|  |         jsr -312(a6)
    b258:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b25c:	|  |         move.l 156(sp),112(sp)
    b262:	|  |         movea.l 148(sp),a0
    b266:	|  |         move.w 64(a0),d0
    b26a:	|  |         movea.w d0,a0
    b26c:	|  |         move.l a0,108(sp)
    b270:	|  |         move.l 1c90a <DOSBase>,d0
    b276:	|  |         movea.l d0,a6
    b278:	|  |         move.l 112(sp),d1
    b27c:	|  |         move.l 108(sp),d2
    b280:	|  |         jsr -312(a6)
    b284:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b288:	|  |         move.l 156(sp),100(sp)
    b28e:	|  |         movea.l 148(sp),a0
    b292:	|  |         move.w 66(a0),d0
    b296:	|  |         movea.w d0,a0
    b298:	|  |         move.l a0,96(sp)
    b29c:	|  |         move.l 1c90a <DOSBase>,d0
    b2a2:	|  |         movea.l d0,a6
    b2a4:	|  |         move.l 100(sp),d1
    b2a8:	|  |         move.l 96(sp),d2
    b2ac:	|  |         jsr -312(a6)
    b2b0:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b2b4:	|  |         movea.l 148(sp),a0
    b2b8:	|  |         move.l 68(a0),d0
    b2bc:	|  |  /----- beq.s b2fa <savePeople+0x2e2>
			FPutC (fp, 1);
    b2be:	|  |  |      move.l 156(sp),76(sp)
    b2c4:	|  |  |      moveq #1,d0
    b2c6:	|  |  |      move.l d0,72(sp)
    b2ca:	|  |  |      move.l 1c90a <DOSBase>,d0
    b2d0:	|  |  |      movea.l d0,a6
    b2d2:	|  |  |      move.l 76(sp),d1
    b2d6:	|  |  |      move.l 72(sp),d2
    b2da:	|  |  |      jsr -312(a6)
    b2de:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b2e2:	|  |  |      movea.l 148(sp),a0
    b2e6:	|  |  |      move.l 68(a0),d0
    b2ea:	|  |  |      move.l 156(sp),-(sp)
    b2ee:	|  |  |      move.l d0,-(sp)
    b2f0:	|  |  |      jsr c514 <saveFunction>
    b2f6:	|  |  |      addq.l #8,sp
    b2f8:	|  |  |  /-- bra.s b31e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b2fa:	|  |  \--|-> move.l 156(sp),88(sp)
    b300:	|  |     |   moveq #1,d0
    b302:	|  |     |   move.l d0,84(sp)
    b306:	|  |     |   move.l 1c90a <DOSBase>,d0
    b30c:	|  |     |   movea.l d0,a6
    b30e:	|  |     |   move.l 88(sp),d1
    b312:	|  |     |   move.l 84(sp),d2
    b316:	|  |     |   jsr -312(a6)
    b31a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b31e:	|  |     \-> movea.l 148(sp),a0
    b322:	|  |         move.l 106(a0),d0
    b326:	|  |         move.l 156(sp),-(sp)
    b32a:	|  |         move.l d0,-(sp)
    b32c:	|  |         jsr 8d0 <put2bytes>
    b332:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b334:	|  |         movea.l 148(sp),a0
    b338:	|  |         move.l 92(a0),d0
    b33c:	|  |         move.l 156(sp),-(sp)
    b340:	|  |         move.l d0,-(sp)
    b342:	|  |         jsr 8d0 <put2bytes>
    b348:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b34a:	|  |         movea.l 148(sp),a0
    b34e:	|  |         move.l 100(a0),d0
    b352:	|  |         move.l 156(sp),-(sp)
    b356:	|  |         move.l d0,-(sp)
    b358:	|  |         jsr 8d0 <put2bytes>
    b35e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b360:	|  |         movea.l 148(sp),a0
    b364:	|  |         move.l 96(a0),d0
    b368:	|  |         move.l 156(sp),-(sp)
    b36c:	|  |         move.l d0,-(sp)
    b36e:	|  |         jsr 8d0 <put2bytes>
    b374:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b376:	|  |         movea.l 148(sp),a0
    b37a:	|  |         move.l 110(a0),d0
    b37e:	|  |         move.l d0,d0
    b380:	|  |         movea.w d0,a0
    b382:	|  |         move.l 156(sp),-(sp)
    b386:	|  |         move.l a0,-(sp)
    b388:	|  |         jsr a9c <putSigned>
    b38e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b390:	|  |         movea.l 148(sp),a0
    b394:	|  |         move.l 56(a0),d0
    b398:	|  |         move.l d0,d0
    b39a:	|  |         movea.w d0,a0
    b39c:	|  |         move.l 156(sp),-(sp)
    b3a0:	|  |         move.l a0,-(sp)
    b3a2:	|  |         jsr a9c <putSigned>
    b3a8:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b3aa:	|  |         movea.l 148(sp),a0
    b3ae:	|  |         move.l 60(a0),d0
    b3b2:	|  |         move.l d0,d0
    b3b4:	|  |         movea.w d0,a0
    b3b6:	|  |         move.l 156(sp),-(sp)
    b3ba:	|  |         move.l a0,-(sp)
    b3bc:	|  |         jsr a9c <putSigned>
    b3c2:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b3c4:	|  |         move.l 156(sp),64(sp)
    b3ca:	|  |         movea.l 148(sp),a0
    b3ce:	|  |         move.b 126(a0),d0
    b3d2:	|  |         move.b d0,d0
    b3d4:	|  |         andi.l #255,d0
    b3da:	|  |         move.l d0,60(sp)
    b3de:	|  |         move.l 1c90a <DOSBase>,d0
    b3e4:	|  |         movea.l d0,a6
    b3e6:	|  |         move.l 64(sp),d1
    b3ea:	|  |         move.l 60(sp),d2
    b3ee:	|  |         jsr -312(a6)
    b3f2:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b3f6:	|  |         move.l 156(sp),52(sp)
    b3fc:	|  |         movea.l 148(sp),a0
    b400:	|  |         move.b 127(a0),d0
    b404:	|  |         move.b d0,d0
    b406:	|  |         andi.l #255,d0
    b40c:	|  |         move.l d0,48(sp)
    b410:	|  |         move.l 1c90a <DOSBase>,d0
    b416:	|  |         movea.l d0,a6
    b418:	|  |         move.l 52(sp),d1
    b41c:	|  |         move.l 48(sp),d2
    b420:	|  |         jsr -312(a6)
    b424:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b428:	|  |         move.l 156(sp),40(sp)
    b42e:	|  |         movea.l 148(sp),a0
    b432:	|  |         move.b 128(a0),d0
    b436:	|  |         move.b d0,d0
    b438:	|  |         andi.l #255,d0
    b43e:	|  |         move.l d0,36(sp)
    b442:	|  |         move.l 1c90a <DOSBase>,d0
    b448:	|  |         movea.l d0,a6
    b44a:	|  |         move.l 40(sp),d1
    b44e:	|  |         move.l 36(sp),d2
    b452:	|  |         jsr -312(a6)
    b456:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b45a:	|  |         move.l 156(sp),28(sp)
    b460:	|  |         movea.l 148(sp),a0
    b464:	|  |         move.b 129(a0),d0
    b468:	|  |         move.b d0,d0
    b46a:	|  |         andi.l #255,d0
    b470:	|  |         move.l d0,24(sp)
    b474:	|  |         move.l 1c90a <DOSBase>,d0
    b47a:	|  |         movea.l d0,a6
    b47c:	|  |         move.l 28(sp),d1
    b480:	|  |         move.l 24(sp),d2
    b484:	|  |         jsr -312(a6)
    b488:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b48c:	|  |         move.l 156(sp),16(sp)
    b492:	|  |         movea.l 148(sp),a0
    b496:	|  |         move.b 130(a0),d0
    b49a:	|  |         move.b d0,d0
    b49c:	|  |         andi.l #255,d0
    b4a2:	|  |         move.l d0,12(sp)
    b4a6:	|  |         move.l 1c90a <DOSBase>,d0
    b4ac:	|  |         movea.l d0,a6
    b4ae:	|  |         move.l 16(sp),d1
    b4b2:	|  |         move.l 12(sp),d2
    b4b6:	|  |         jsr -312(a6)
    b4ba:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b4be:	|  |         movea.l 148(sp),a0
    b4c2:	|  |         move.l 114(a0),d0
    b4c6:	|  |         move.l 156(sp),-(sp)
    b4ca:	|  |         move.l d0,-(sp)
    b4cc:	|  |         jsr d8de <saveObjectRef>
    b4d2:	|  |         addq.l #8,sp

		me = me -> next;
    b4d4:	|  |         movea.l 148(sp),a0
    b4d8:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b4de:	|  |         addq.l #1,140(sp)
    b4e2:	|  \-------> movea.l 140(sp),a0
    b4e6:	|            cmpa.l 144(sp),a0
    b4ea:	\----------- blt.w b08e <savePeople+0x76>
	}
	return TRUE;
    b4ee:	             moveq #1,d0
}
    b4f0:	             move.l (sp)+,d2
    b4f2:	             movea.l (sp)+,a6
    b4f4:	             lea 144(sp),sp
    b4f8:	             rts

0000b4fa <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b4fa:	movea.l 4(sp),a0
    b4fe:	move.l 8(sp),(a0)
}
    b502:	nop
    b504:	rts

0000b506 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b506:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b508:	       move.l 12(sp),-(sp)
    b50c:	       jsr a594 <findPerson>
    b512:	       addq.l #4,sp
    b514:	       move.l d0,(sp)
	if (! moveMe) return;
    b516:	/----- beq.s b52a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b518:	|      move.l 8(sp),-(sp)
    b51c:	|      move.l 4(sp),-(sp)
    b520:	|      jsr b530 <setMyDrawMode>
    b526:	|      addq.l #8,sp
    b528:	|  /-- bra.s b52c <setDrawMode+0x26>
	if (! moveMe) return;
    b52a:	\--|-> nop
}
    b52c:	   \-> addq.l #4,sp
    b52e:	       rts

0000b530 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b530:	       moveq #19,d0
    b532:	       cmp.l 8(sp),d0
    b536:	/----- bcs.w ba0e <setMyDrawMode+0x4de>
    b53a:	|      move.l 8(sp),d0
    b53e:	|      add.l d0,d0
    b540:	|      movea.l d0,a0
    b542:	|      adda.l #46414,a0
    b548:	|      move.w (a0),d0
    b54a:	|      jmp (b54e <setMyDrawMode+0x1e>,pc,d0.w)
    b54e:	|      .short 0x04c0
    b550:	|      ori.l #6684712,-(a4)
    b556:	|      btst d0,-(a0)
    b558:	|      bchg d0,(a6)+
    b55a:	|      bclr d0,(a4)+
    b55c:	|      bset d0,(a2)+
    b55e:	|      andi.b #84,(a6)
    b562:	|      andi.l #55575312,(a2)
    b568:	|      .short 0x02d0
    b56a:	|      bclr d1,(a0)
    b56c:	|      .short 0x044a
    b56e:	|      .short 0x040c
    b570:	|      movep.l d1,1158(a6)
    b574:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b576:	|      movea.l 4(sp),a0
    b57a:	|      clr.b 128(a0)
    b57e:	|      movea.l 4(sp),a0
    b582:	|      move.b 128(a0),d0
    b586:	|      movea.l 4(sp),a0
    b58a:	|      move.b d0,127(a0)
    b58e:	|      movea.l 4(sp),a0
    b592:	|      move.b 127(a0),d0
    b596:	|      movea.l 4(sp),a0
    b59a:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b59e:	|      movea.l 4(sp),a0
    b5a2:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b5a6:	|      movea.l 4(sp),a0
    b5aa:	|      move.b #64,130(a0)
			break;
    b5b0:	|  /-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5b4:	|  |   movea.l 4(sp),a0
    b5b8:	|  |   clr.b 128(a0)
    b5bc:	|  |   movea.l 4(sp),a0
    b5c0:	|  |   move.b 128(a0),d0
    b5c4:	|  |   movea.l 4(sp),a0
    b5c8:	|  |   move.b d0,127(a0)
    b5cc:	|  |   movea.l 4(sp),a0
    b5d0:	|  |   move.b 127(a0),d0
    b5d4:	|  |   movea.l 4(sp),a0
    b5d8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b5dc:	|  |   movea.l 4(sp),a0
    b5e0:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b5e4:	|  |   movea.l 4(sp),a0
    b5e8:	|  |   move.b #-128,130(a0)
			break;
    b5ee:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5f2:	|  |   movea.l 4(sp),a0
    b5f6:	|  |   clr.b 128(a0)
    b5fa:	|  |   movea.l 4(sp),a0
    b5fe:	|  |   move.b 128(a0),d0
    b602:	|  |   movea.l 4(sp),a0
    b606:	|  |   move.b d0,127(a0)
    b60a:	|  |   movea.l 4(sp),a0
    b60e:	|  |   move.b 127(a0),d0
    b612:	|  |   movea.l 4(sp),a0
    b616:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b61a:	|  |   movea.l 4(sp),a0
    b61e:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b622:	|  |   movea.l 4(sp),a0
    b626:	|  |   move.b #-64,130(a0)
			break;
    b62c:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b630:	|  |   movea.l 4(sp),a0
    b634:	|  |   clr.b 128(a0)
    b638:	|  |   movea.l 4(sp),a0
    b63c:	|  |   move.b 128(a0),d0
    b640:	|  |   movea.l 4(sp),a0
    b644:	|  |   move.b d0,127(a0)
    b648:	|  |   movea.l 4(sp),a0
    b64c:	|  |   move.b 127(a0),d0
    b650:	|  |   movea.l 4(sp),a0
    b654:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b658:	|  |   movea.l 4(sp),a0
    b65c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b660:	|  |   movea.l 4(sp),a0
    b664:	|  |   move.b #-2,130(a0)
			break;
    b66a:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b66e:	|  |   movea.l 4(sp),a0
    b672:	|  |   clr.b 128(a0)
    b676:	|  |   movea.l 4(sp),a0
    b67a:	|  |   move.b 128(a0),d0
    b67e:	|  |   movea.l 4(sp),a0
    b682:	|  |   move.b d0,127(a0)
    b686:	|  |   movea.l 4(sp),a0
    b68a:	|  |   move.b 127(a0),d0
    b68e:	|  |   movea.l 4(sp),a0
    b692:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b696:	|  |   movea.l 4(sp),a0
    b69a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   clr.b 130(a0)
			break;
    b6a8:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6ac:	|  |   movea.l 4(sp),a0
    b6b0:	|  |   clr.b 128(a0)
    b6b4:	|  |   movea.l 4(sp),a0
    b6b8:	|  |   move.b 128(a0),d0
    b6bc:	|  |   movea.l 4(sp),a0
    b6c0:	|  |   move.b d0,127(a0)
    b6c4:	|  |   movea.l 4(sp),a0
    b6c8:	|  |   move.b 127(a0),d0
    b6cc:	|  |   movea.l 4(sp),a0
    b6d0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b6d4:	|  |   movea.l 4(sp),a0
    b6d8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b6de:	|  |   movea.l 4(sp),a0
    b6e2:	|  |   clr.b 130(a0)
			break;
    b6e6:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6ea:	|  |   movea.l 4(sp),a0
    b6ee:	|  |   clr.b 128(a0)
    b6f2:	|  |   movea.l 4(sp),a0
    b6f6:	|  |   move.b 128(a0),d0
    b6fa:	|  |   movea.l 4(sp),a0
    b6fe:	|  |   move.b d0,127(a0)
    b702:	|  |   movea.l 4(sp),a0
    b706:	|  |   move.b 127(a0),d0
    b70a:	|  |   movea.l 4(sp),a0
    b70e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b712:	|  |   movea.l 4(sp),a0
    b716:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b71c:	|  |   movea.l 4(sp),a0
    b720:	|  |   clr.b 130(a0)
			break;
    b724:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   clr.b 128(a0)
    b730:	|  |   movea.l 4(sp),a0
    b734:	|  |   move.b 128(a0),d0
    b738:	|  |   movea.l 4(sp),a0
    b73c:	|  |   move.b d0,127(a0)
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   move.b 127(a0),d0
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b750:	|  |   movea.l 4(sp),a0
    b754:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b758:	|  |   movea.l 4(sp),a0
    b75c:	|  |   clr.b 130(a0)
			break;
    b760:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b764:	|  |   movea.l 4(sp),a0
    b768:	|  |   clr.b 128(a0)
    b76c:	|  |   movea.l 4(sp),a0
    b770:	|  |   move.b 128(a0),d0
    b774:	|  |   movea.l 4(sp),a0
    b778:	|  |   move.b d0,127(a0)
    b77c:	|  |   movea.l 4(sp),a0
    b780:	|  |   move.b 127(a0),d0
    b784:	|  |   movea.l 4(sp),a0
    b788:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b794:	|  |   movea.l 4(sp),a0
    b798:	|  |   move.b #64,130(a0)
			break;
    b79e:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   clr.b 128(a0)
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b 128(a0),d0
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   move.b d0,127(a0)
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   move.b 127(a0),d0
    b7c2:	|  |   movea.l 4(sp),a0
    b7c6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7ca:	|  |   movea.l 4(sp),a0
    b7ce:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b7d2:	|  |   movea.l 4(sp),a0
    b7d6:	|  |   move.b #-128,130(a0)
			break;
    b7dc:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   clr.b 128(a0)
    b7e8:	|  |   movea.l 4(sp),a0
    b7ec:	|  |   move.b 128(a0),d0
    b7f0:	|  |   movea.l 4(sp),a0
    b7f4:	|  |   move.b d0,127(a0)
    b7f8:	|  |   movea.l 4(sp),a0
    b7fc:	|  |   move.b 127(a0),d0
    b800:	|  |   movea.l 4(sp),a0
    b804:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b808:	|  |   movea.l 4(sp),a0
    b80c:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b810:	|  |   movea.l 4(sp),a0
    b814:	|  |   move.b #-64,130(a0)
			break;
    b81a:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b81e:	|  |   movea.l 4(sp),a0
    b822:	|  |   move.b #-128,128(a0)
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b 128(a0),d0
    b830:	|  |   movea.l 4(sp),a0
    b834:	|  |   move.b d0,127(a0)
    b838:	|  |   movea.l 4(sp),a0
    b83c:	|  |   move.b 127(a0),d0
    b840:	|  |   movea.l 4(sp),a0
    b844:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b848:	|  |   movea.l 4(sp),a0
    b84c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b852:	|  |   movea.l 4(sp),a0
    b856:	|  |   clr.b 130(a0)
			break;
    b85a:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b85e:	|  |   movea.l 4(sp),a0
    b862:	|  |   move.b #-128,128(a0)
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b 128(a0),d0
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b d0,127(a0)
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b 127(a0),d0
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b888:	|  |   movea.l 4(sp),a0
    b88c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b892:	|  |   movea.l 4(sp),a0
    b896:	|  |   clr.b 130(a0)
			break;
    b89a:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b89e:	|  |   movea.l 4(sp),a0
    b8a2:	|  |   move.b #-128,128(a0)
    b8a8:	|  |   movea.l 4(sp),a0
    b8ac:	|  |   move.b 128(a0),d0
    b8b0:	|  |   movea.l 4(sp),a0
    b8b4:	|  |   move.b d0,127(a0)
    b8b8:	|  |   movea.l 4(sp),a0
    b8bc:	|  |   move.b 127(a0),d0
    b8c0:	|  |   movea.l 4(sp),a0
    b8c4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8c8:	|  |   movea.l 4(sp),a0
    b8cc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   clr.b 130(a0)
			break;
    b8da:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8de:	|  |   movea.l 4(sp),a0
    b8e2:	|  |   move.b #-128,128(a0)
    b8e8:	|  |   movea.l 4(sp),a0
    b8ec:	|  |   move.b 128(a0),d0
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   move.b d0,127(a0)
    b8f8:	|  |   movea.l 4(sp),a0
    b8fc:	|  |   move.b 127(a0),d0
    b900:	|  |   movea.l 4(sp),a0
    b904:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b908:	|  |   movea.l 4(sp),a0
    b90c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   clr.b 130(a0)
			break;
    b918:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b91c:	|  |   movea.l 4(sp),a0
    b920:	|  |   st 128(a0)
    b924:	|  |   movea.l 4(sp),a0
    b928:	|  |   move.b 128(a0),d0
    b92c:	|  |   movea.l 4(sp),a0
    b930:	|  |   move.b d0,127(a0)
    b934:	|  |   movea.l 4(sp),a0
    b938:	|  |   move.b 127(a0),d0
    b93c:	|  |   movea.l 4(sp),a0
    b940:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b944:	|  |   movea.l 4(sp),a0
    b948:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b94e:	|  |   movea.l 4(sp),a0
    b952:	|  |   clr.b 130(a0)
			break;
    b956:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b95a:	|  |   movea.l 4(sp),a0
    b95e:	|  |   st 128(a0)
    b962:	|  |   movea.l 4(sp),a0
    b966:	|  |   move.b 128(a0),d0
    b96a:	|  |   movea.l 4(sp),a0
    b96e:	|  |   move.b d0,127(a0)
    b972:	|  |   movea.l 4(sp),a0
    b976:	|  |   move.b 127(a0),d0
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b982:	|  |   movea.l 4(sp),a0
    b986:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b98c:	|  |   movea.l 4(sp),a0
    b990:	|  |   clr.b 130(a0)
			break;
    b994:	|  +-- bra.w ba48 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b998:	|  |   movea.l 4(sp),a0
    b99c:	|  |   st 128(a0)
    b9a0:	|  |   movea.l 4(sp),a0
    b9a4:	|  |   move.b 128(a0),d0
    b9a8:	|  |   movea.l 4(sp),a0
    b9ac:	|  |   move.b d0,127(a0)
    b9b0:	|  |   movea.l 4(sp),a0
    b9b4:	|  |   move.b 127(a0),d0
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b9c0:	|  |   movea.l 4(sp),a0
    b9c4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b9ca:	|  |   movea.l 4(sp),a0
    b9ce:	|  |   clr.b 130(a0)
			break;
    b9d2:	|  +-- bra.s ba48 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9d4:	|  |   movea.l 4(sp),a0
    b9d8:	|  |   st 128(a0)
    b9dc:	|  |   movea.l 4(sp),a0
    b9e0:	|  |   move.b 128(a0),d0
    b9e4:	|  |   movea.l 4(sp),a0
    b9e8:	|  |   move.b d0,127(a0)
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   move.b 127(a0),d0
    b9f4:	|  |   movea.l 4(sp),a0
    b9f8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9fc:	|  |   movea.l 4(sp),a0
    ba00:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba04:	|  |   movea.l 4(sp),a0
    ba08:	|  |   clr.b 130(a0)
			break;
    ba0c:	|  +-- bra.s ba48 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba0e:	\--|-> movea.l 4(sp),a0
    ba12:	   |   clr.b 128(a0)
    ba16:	   |   movea.l 4(sp),a0
    ba1a:	   |   move.b 128(a0),d0
    ba1e:	   |   movea.l 4(sp),a0
    ba22:	   |   move.b d0,127(a0)
    ba26:	   |   movea.l 4(sp),a0
    ba2a:	   |   move.b 127(a0),d0
    ba2e:	   |   movea.l 4(sp),a0
    ba32:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba36:	   |   movea.l 4(sp),a0
    ba3a:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    ba3e:	   |   movea.l 4(sp),a0
    ba42:	   |   clr.b 130(a0)
			break;
    ba46:	   |   nop
	}
}
    ba48:	   \-> nop
    ba4a:	       rts

0000ba4c <shufflePeople>:

void shufflePeople () {
    ba4c:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    ba50:	             move.l #117094,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    ba58:	             move.l 1c966 <allPeople>,d0
    ba5e:	/----------- beq.w bb34 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    ba62:	|     /----- bra.w bb24 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    ba66:	|  /--|----> movea.l 16(sp),a0
    ba6a:	|  |  |      movea.l (a0),a0
    ba6c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    ba72:	|  |  |      movea.l 16(sp),a0
    ba76:	|  |  |      movea.l (a0),a0
    ba78:	|  |  |      move.l 118(a0),d0
    ba7c:	|  |  |      moveq #1,d1
    ba7e:	|  |  |      and.l d1,d0
    ba80:	|  |  |  /-- beq.s ba98 <shufflePeople+0x4c>
    ba82:	|  |  |  |   move.l #1148846080,-(sp)
    ba88:	|  |  |  |   move.l 16(sp),-(sp)
    ba8c:	|  |  |  |   jsr 173a2 <__addsf3>
    ba92:	|  |  |  |   addq.l #8,sp
    ba94:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    ba98:	|  |  |  \-> movea.l 16(sp),a0
    ba9c:	|  |  |      movea.l (a0),a0
    ba9e:	|  |  |      movea.l 36(a0),a0
    baa2:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    baa8:	|  |  |      movea.l 16(sp),a0
    baac:	|  |  |      movea.l (a0),a0
    baae:	|  |  |      movea.l 36(a0),a0
    bab2:	|  |  |      move.l 118(a0),d0
    bab6:	|  |  |      moveq #1,d1
    bab8:	|  |  |      and.l d1,d0
    baba:	|  |  |  /-- beq.s bad2 <shufflePeople+0x86>
    babc:	|  |  |  |   move.l #1148846080,-(sp)
    bac2:	|  |  |  |   move.l 12(sp),-(sp)
    bac6:	|  |  |  |   jsr 173a2 <__addsf3>
    bacc:	|  |  |  |   addq.l #8,sp
    bace:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bad2:	|  |  |  \-> move.l 8(sp),-(sp)
    bad6:	|  |  |      move.l 16(sp),-(sp)
    bada:	|  |  |      jsr 17752 <__gtsf2>
    bae0:	|  |  |      addq.l #8,sp
    bae2:	|  |  |      tst.l d0
    bae4:	|  |  |  /-- ble.s bb16 <shufflePeople+0xca>
			A = (*thisReference);
    bae6:	|  |  |  |   movea.l 16(sp),a0
    baea:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    baee:	|  |  |  |   movea.l 16(sp),a0
    baf2:	|  |  |  |   movea.l (a0),a0
    baf4:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    baf8:	|  |  |  |   movea.l (sp),a0
    bafa:	|  |  |  |   move.l 36(a0),d0
    bafe:	|  |  |  |   movea.l 4(sp),a0
    bb02:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bb06:	|  |  |  |   movea.l (sp),a0
    bb08:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bb0e:	|  |  |  |   movea.l 16(sp),a0
    bb12:	|  |  |  |   move.l (sp),(a0)
    bb14:	|  |  +--|-- bra.s bb24 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bb16:	|  |  |  \-> movea.l 16(sp),a0
    bb1a:	|  |  |      move.l (a0),d0
    bb1c:	|  |  |      moveq #36,d1
    bb1e:	|  |  |      add.l d0,d1
    bb20:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bb24:	|  |  \----> movea.l 16(sp),a0
    bb28:	|  |         movea.l (a0),a0
    bb2a:	|  |         move.l 36(a0),d0
    bb2e:	|  \-------- bne.w ba66 <shufflePeople+0x1a>
    bb32:	|        /-- bra.s bb36 <shufflePeople+0xea>
	if (!allPeople) return;
    bb34:	\--------|-> nop
		}
	}
}
    bb36:	         \-> lea 20(sp),sp
    bb3a:	             rts

0000bb3c <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bb3c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bb3e:	       tst.l 8(sp)
    bb42:	   /-- bgt.s bb48 <setCharacterWalkSpeed+0xc>
    bb44:	   |   clr.w d0
    bb46:	/--|-- bra.s bb66 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bb48:	|  \-> move.l 12(sp),-(sp)
    bb4c:	|      jsr a594 <findPerson>
    bb52:	|      addq.l #4,sp
    bb54:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bb56:	|  /-- bne.s bb5c <setCharacterWalkSpeed+0x20>
    bb58:	|  |   clr.w d0
    bb5a:	+--|-- bra.s bb66 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bb5c:	|  \-> movea.l (sp),a0
    bb5e:	|      move.l 8(sp),28(a0)
	return TRUE;
    bb64:	|      moveq #1,d0
}
    bb66:	\----> addq.l #4,sp
    bb68:	       rts

0000bb6a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bb6a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bb6c:	       move.l 8(sp),-(sp)
    bb70:	       jsr a594 <findPerson>
    bb76:	       addq.l #4,sp
    bb78:	       move.l d0,(sp)
    if (thisPerson) {
    bb7a:	/----- beq.s bb9a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bb7c:	|      movea.l (sp),a0
    bb7e:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bb84:	|      moveq #2,d0
    bb86:	|      and.l 12(sp),d0
    bb8a:	|  /-- beq.s bb96 <setPersonExtra+0x2c>
    bb8c:	|  |   movea.l (sp),a0
    bb8e:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bb96:	|  \-> moveq #1,d0
    bb98:	|  /-- bra.s bb9c <setPersonExtra+0x32>
    }
    return FALSE;
    bb9a:	\--|-> clr.w d0
}
    bb9c:	   \-> addq.l #4,sp
    bb9e:	       rts

0000bba0 <setScale>:


void setScale (short int h, short int d) {
    bba0:	subq.l #4,sp
    bba2:	move.l 8(sp),d1
    bba6:	move.l 12(sp),d0
    bbaa:	move.w d1,d1
    bbac:	move.w d1,2(sp)
    bbb0:	move.w d0,d0
    bbb2:	move.w d0,(sp)
	scaleHorizon = h;
    bbb4:	move.w 2(sp),1c294 <scaleHorizon>
	scaleDivide = d;
    bbbc:	move.w (sp),1c296 <scaleDivide>
}
    bbc2:	nop
    bbc4:	addq.l #4,sp
    bbc6:	rts

0000bbc8 <setShown>:

void setShown (BOOL h, int ob) {
    bbc8:	    subq.l #8,sp
    bbca:	    move.l 12(sp),d0
    bbce:	    move.w d0,d0
    bbd0:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bbd4:	    move.l 16(sp),-(sp)
    bbd8:	    jsr a594 <findPerson>
    bbde:	    addq.l #4,sp
    bbe0:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bbe4:	/-- beq.s bbf0 <setShown+0x28>
    bbe6:	|   movea.l 4(sp),a0
    bbea:	|   move.w 2(sp),104(a0)
}
    bbf0:	\-> nop
    bbf2:	    addq.l #8,sp
    bbf4:	    rts

0000bbf6 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bbf6:	       subq.l #8,sp
    bbf8:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bbfa:	       movea.l 16(sp),a0
    bbfe:	       move.l 92(a0),d0
    bc02:	       move.l d0,d1
    bc04:	       addi.l #360,d1
    bc0a:	       movea.l 16(sp),a0
    bc0e:	       move.l 96(a0),d0
    bc12:	       move.l d1,d2
    bc14:	       sub.l d0,d2
    bc16:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bc1a:	       movea.l 16(sp),a0
    bc1e:	       move.l 122(a0),d0
    bc22:	   /-- beq.s bc2e <spinStep+0x38>
    bc24:	   |   movea.l 16(sp),a0
    bc28:	   |   move.l 122(a0),d0
    bc2c:	/--|-- bra.s bc48 <spinStep+0x52>
    bc2e:	|  \-> movea.l 16(sp),a0
    bc32:	|      movea.l 80(a0),a0
    bc36:	|      move.l 4(a0),d0
    bc3a:	|      move.l d0,-(sp)
    bc3c:	|      pea 168 <decodeFilename+0x50>
    bc40:	|      jsr 17bbe <__divsi3>
    bc46:	|      addq.l #8,sp
    bc48:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bc4c:	   /-- bra.s bc56 <spinStep+0x60>
		diff -= 360;
    bc4e:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bc56:	|  \-> cmpi.l #180,8(sp)
    bc5e:	\----- bgt.s bc4e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bc60:	       move.l 8(sp),d0
    bc64:	       cmp.l 4(sp),d0
    bc68:	   /-- blt.s bc86 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bc6a:	   |   movea.l 16(sp),a0
    bc6e:	   |   move.l 92(a0),d0
    bc72:	   |   sub.l 4(sp),d0
    bc76:	   |   move.l d0,-(sp)
    bc78:	   |   move.l 20(sp),-(sp)
    bc7c:	   |   jsr bd66 <turnMeAngle>
    bc82:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bc84:	/--|-- bra.s bccc <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bc86:	|  \-> move.l 4(sp),d0
    bc8a:	|      neg.l d0
    bc8c:	|      cmp.l 8(sp),d0
    bc90:	|  /-- blt.s bcae <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bc92:	|  |   movea.l 16(sp),a0
    bc96:	|  |   move.l 92(a0),d0
    bc9a:	|  |   add.l 4(sp),d0
    bc9e:	|  |   move.l d0,-(sp)
    bca0:	|  |   move.l 20(sp),-(sp)
    bca4:	|  |   jsr bd66 <turnMeAngle>
    bcaa:	|  |   addq.l #8,sp
}
    bcac:	+--|-- bra.s bccc <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bcae:	|  \-> movea.l 16(sp),a0
    bcb2:	|      move.l 96(a0),d0
    bcb6:	|      move.l d0,-(sp)
    bcb8:	|      move.l 20(sp),-(sp)
    bcbc:	|      jsr bd66 <turnMeAngle>
    bcc2:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bcc4:	|      movea.l 16(sp),a0
    bcc8:	|      clr.w 66(a0)
}
    bccc:	\----> nop
    bcce:	       move.l (sp)+,d2
    bcd0:	       addq.l #8,sp
    bcd2:	       rts

0000bcd4 <stopPerson>:


BOOL stopPerson (int o) {
    bcd4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bcd6:	       move.l 8(sp),-(sp)
    bcda:	       jsr a594 <findPerson>
    bce0:	       addq.l #4,sp
    bce2:	       move.l d0,(sp)
    if (moveMe)
    bce4:	/----- beq.s bd22 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bce6:	|      movea.l (sp),a0
    bce8:	|      move.l 68(a0),d0
    bcec:	+----- beq.s bd22 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bcee:	|      movea.l (sp),a0
    bcf0:	|      move.l 68(a0),d0
    bcf4:	|      move.l d0,-(sp)
    bcf6:	|      jsr 4612 <abortFunction>
    bcfc:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bcfe:	|      movea.l (sp),a0
    bd00:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bd04:	|      movea.l (sp),a0
    bd06:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bd0a:	|      movea.l (sp),a0
    bd0c:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bd10:	|      clr.l -(sp)
    bd12:	|      move.l 4(sp),-(sp)
    bd16:	|      jsr 806a <setFrames>
    bd1c:	|      addq.l #8,sp
            return TRUE;
    bd1e:	|      moveq #1,d0
    bd20:	|  /-- bra.s bd24 <stopPerson+0x50>
        }
    return FALSE;
    bd22:	\--|-> clr.w d0
}
    bd24:	   \-> addq.l #4,sp
    bd26:	       rts

0000bd28 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bd28:	       subq.l #8,sp
	int total = 0;
    bd2a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bd2e:	       clr.l (sp)
    bd30:	   /-- bra.s bd52 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bd32:	/--|-> movea.l 12(sp),a0
    bd36:	|  |   movea.l 4(a0),a0
    bd3a:	|  |   move.l (sp),d1
    bd3c:	|  |   move.l d1,d0
    bd3e:	|  |   add.l d0,d0
    bd40:	|  |   add.l d1,d0
    bd42:	|  |   add.l d0,d0
    bd44:	|  |   add.l d0,d0
    bd46:	|  |   adda.l d0,a0
    bd48:	|  |   move.l 4(a0),d0
    bd4c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bd50:	|  |   addq.l #1,(sp)
    bd52:	|  \-> movea.l 12(sp),a0
    bd56:	|      move.l 8(a0),d0
    bd5a:	|      cmp.l (sp),d0
    bd5c:	\----- bgt.s bd32 <timeForAnim+0xa>
	}
	return total;
    bd5e:	       move.l 4(sp),d0
}
    bd62:	       addq.l #8,sp
    bd64:	       rts

0000bd66 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bd66:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bd68:	       movea.l 8(sp),a0
    bd6c:	       movea.l 80(a0),a0
    bd70:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bd74:	       movea.l 8(sp),a0
    bd78:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bd7e:	       move.l (sp),-(sp)
    bd80:	       pea b4 <_start+0xb4>
    bd84:	       jsr 17bbe <__divsi3>
    bd8a:	       addq.l #8,sp
    bd8c:	       move.l d0,d1
    bd8e:	       addi.l #180,d1
    bd94:	       movea.l 8(sp),a0
    bd98:	       move.l 100(a0),d0
    bd9c:	       add.l d1,d0
    bd9e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bda2:	   /-- bra.s bdac <turnMeAngle+0x46>
    bda4:	/--|-> addi.l #-360,12(sp)
    bdac:	|  \-> cmpi.l #359,12(sp)
    bdb4:	\----- bgt.s bda4 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bdb6:	       move.l (sp),-(sp)
    bdb8:	       move.l 16(sp),-(sp)
    bdbc:	       jsr 17b40 <__mulsi3>
    bdc2:	       addq.l #8,sp
    bdc4:	       pea 168 <decodeFilename+0x50>
    bdc8:	       move.l d0,-(sp)
    bdca:	       jsr 17bbe <__divsi3>
    bdd0:	       addq.l #8,sp
    bdd2:	       movea.l 8(sp),a0
    bdd6:	       move.l d0,106(a0)
}
    bdda:	       nop
    bddc:	       addq.l #4,sp
    bdde:	       rts

0000bde0 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bde0:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bde2:	          move.l 8(sp),-(sp)
    bde6:	          jsr a594 <findPerson>
    bdec:	          addq.l #4,sp
    bdee:	          move.l d0,(sp)
    if (thisPerson) {
    bdf0:	/-------- beq.s be50 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bdf2:	|         movea.l (sp),a0
    bdf4:	|         move.l 68(a0),d0
    bdf8:	|     /-- beq.s be0a <turnPersonToFace+0x2a>
    bdfa:	|     |   movea.l (sp),a0
    bdfc:	|     |   move.l 68(a0),d0
    be00:	|     |   move.l d0,-(sp)
    be02:	|     |   jsr 4612 <abortFunction>
    be08:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    be0a:	|     \-> movea.l (sp),a0
    be0c:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    be10:	|         movea.l (sp),a0
    be12:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    be16:	|         movea.l (sp),a0
    be18:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    be1c:	|         move.l 12(sp),-(sp)
    be20:	|         move.l 4(sp),-(sp)
    be24:	|         jsr bd66 <turnMeAngle>
    be2a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    be2c:	|         movea.l 1c95e <speech>,a0
    be32:	|         move.l (a0),d0
    be34:	|         cmp.l (sp),d0
    be36:	|  /----- bne.s be3c <turnPersonToFace+0x5c>
    be38:	|  |      moveq #2,d0
    be3a:	|  |  /-- bra.s be3e <turnPersonToFace+0x5e>
    be3c:	|  \--|-> moveq #0,d0
    be3e:	|     \-> move.l d0,-(sp)
    be40:	|         move.l 4(sp),-(sp)
    be44:	|         jsr 806a <setFrames>
    be4a:	|         addq.l #8,sp
        return TRUE;
    be4c:	|         moveq #1,d0
    be4e:	|     /-- bra.s be52 <turnPersonToFace+0x72>
    }
    return FALSE;
    be50:	\-----|-> clr.w d0
}
    be52:	      \-> addq.l #4,sp
    be54:	          rts

0000be56 <walkAllPeople>:

void walkAllPeople() {
    be56:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    be58:	             move.l 1c966 <allPeople>,(sp)

	while (thisPerson) {
    be5e:	   /-------- bra.s bece <walkAllPeople+0x78>
		if (thisPerson->walking) {
    be60:	/--|-------> movea.l (sp),a0
    be62:	|  |         move.w 64(a0),d0
    be66:	|  |     /-- beq.s be7a <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    be68:	|  |     |   pea 1 <_start+0x1>
    be6c:	|  |     |   move.l 4(sp),-(sp)
    be70:	|  |     |   jsr beda <walkMe>
    be76:	|  |     |   addq.l #8,sp
    be78:	|  |  /--|-- bra.s be9a <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    be7a:	|  |  |  \-> movea.l (sp),a0
    be7c:	|  |  |      move.w 66(a0),d0
    be80:	|  |  +----- beq.s be9a <walkAllPeople+0x44>
			spinStep(thisPerson);
    be82:	|  |  |      move.l (sp),-(sp)
    be84:	|  |  |      jsr bbf6 <spinStep>
    be8a:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    be8c:	|  |  |      clr.l -(sp)
    be8e:	|  |  |      move.l 4(sp),-(sp)
    be92:	|  |  |      jsr 806a <setFrames>
    be98:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    be9a:	|  |  \----> movea.l (sp),a0
    be9c:	|  |         move.w 64(a0),d0
    bea0:	|  |     /-- bne.s bec8 <walkAllPeople+0x72>
    bea2:	|  |     |   movea.l (sp),a0
    bea4:	|  |     |   move.w 66(a0),d0
    bea8:	|  |     +-- bne.s bec8 <walkAllPeople+0x72>
    beaa:	|  |     |   movea.l (sp),a0
    beac:	|  |     |   move.l 68(a0),d0
    beb0:	|  |     +-- beq.s bec8 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    beb2:	|  |     |   movea.l (sp),a0
    beb4:	|  |     |   move.l 68(a0),d0
    beb8:	|  |     |   move.l d0,-(sp)
    beba:	|  |     |   jsr 6782 <restartFunction>
    bec0:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bec2:	|  |     |   movea.l (sp),a0
    bec4:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bec8:	|  |     \-> movea.l (sp),a0
    beca:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bece:	|  \-------> tst.l (sp)
    bed0:	\----------- bne.s be60 <walkAllPeople+0xa>
	}
}
    bed2:	             nop
    bed4:	             nop
    bed6:	             addq.l #4,sp
    bed8:	             rts

0000beda <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    beda:	                lea -20(sp),sp
    bede:	                move.l d3,-(sp)
    bee0:	                move.l d2,-(sp)
    bee2:	                move.l 36(sp),d0
    bee6:	                move.w d0,d0
    bee8:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    beec:	                cmpi.w #-1,10(sp)
    bef2:	/-------------- bne.s befa <walkMe+0x20>
    bef4:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    befa:	>-------------> movea.l 32(sp),a0
    befe:	|               move.l 48(a0),d0
    bf02:	|               move.l d0,-(sp)
    bf04:	|               jsr 175e6 <__floatsisf>
    bf0a:	|               addq.l #4,sp
    bf0c:	|               move.l d0,d1
    bf0e:	|               movea.l 32(sp),a0
    bf12:	|               move.l (a0),d0
    bf14:	|               move.l d0,-(sp)
    bf16:	|               move.l d1,-(sp)
    bf18:	|               jsr 178da <__subsf3>
    bf1e:	|               addq.l #8,sp
    bf20:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bf24:	|               movea.l 32(sp),a0
    bf28:	|               move.l 52(a0),d0
    bf2c:	|               move.l d0,-(sp)
    bf2e:	|               jsr 175e6 <__floatsisf>
    bf34:	|               addq.l #4,sp
    bf36:	|               move.l d0,d1
    bf38:	|               movea.l 32(sp),a0
    bf3c:	|               move.l 4(a0),d0
    bf40:	|               move.l d0,-(sp)
    bf42:	|               move.l d1,-(sp)
    bf44:	|               jsr 178da <__subsf3>
    bf4a:	|               addq.l #8,sp
    bf4c:	|               move.l d0,-(sp)
    bf4e:	|               move.l d0,-(sp)
    bf50:	|               jsr 173a2 <__addsf3>
    bf56:	|               addq.l #8,sp
    bf58:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bf5c:	|               movea.l 32(sp),a0
    bf60:	|               move.l 32(a0),d2
    bf64:	|               movea.l 32(sp),a0
    bf68:	|               move.l 28(a0),d0
    bf6c:	|               move.l d0,-(sp)
    bf6e:	|               jsr 175e6 <__floatsisf>
    bf74:	|               addq.l #4,sp
    bf76:	|               move.l d0,-(sp)
    bf78:	|               move.l d2,-(sp)
    bf7a:	|               jsr 17698 <__mulsf3>
    bf80:	|               addq.l #8,sp
    bf82:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bf86:	|               move.l 24(sp),-(sp)
    bf8a:	|               jsr 17508 <__extendsfdf2>
    bf90:	|               addq.l #4,sp
    bf92:	|               move.l #-1717986918,-(sp)
    bf98:	|               move.l #1070176665,-(sp)
    bf9e:	|               move.l d1,-(sp)
    bfa0:	|               move.l d0,-(sp)
    bfa2:	|               jsr 177be <__ltdf2>
    bfa8:	|               lea 16(sp),sp
    bfac:	|               tst.l d0
    bfae:	|           /-- bge.s bfb8 <walkMe+0xde>
    bfb0:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bfb8:	|           \-> move.l 20(sp),-(sp)
    bfbc:	|               jsr 1757e <__fixsfsi>
    bfc2:	|               addq.l #4,sp
    bfc4:	|               move.l d0,-(sp)
    bfc6:	|               jsr 9184 <TF_abs>
    bfcc:	|               addq.l #4,sp
    bfce:	|               move.l d0,d2
    bfd0:	|               move.l 16(sp),-(sp)
    bfd4:	|               jsr 1757e <__fixsfsi>
    bfda:	|               addq.l #4,sp
    bfdc:	|               move.l d0,-(sp)
    bfde:	|               jsr 9184 <TF_abs>
    bfe4:	|               addq.l #4,sp
    bfe6:	|               cmp.l d2,d0
    bfe8:	|        /----- bgt.s c00c <walkMe+0x132>
    bfea:	|        |      move.l 20(sp),-(sp)
    bfee:	|        |      jsr 1757e <__fixsfsi>
    bff4:	|        |      addq.l #4,sp
    bff6:	|        |      move.l d0,-(sp)
    bff8:	|        |      jsr 9184 <TF_abs>
    bffe:	|        |      addq.l #4,sp
    c000:	|        |      move.l d0,-(sp)
    c002:	|        |      jsr 175e6 <__floatsisf>
    c008:	|        |      addq.l #4,sp
    c00a:	|        |  /-- bra.s c02c <walkMe+0x152>
    c00c:	|        \--|-> move.l 16(sp),-(sp)
    c010:	|           |   jsr 1757e <__fixsfsi>
    c016:	|           |   addq.l #4,sp
    c018:	|           |   move.l d0,-(sp)
    c01a:	|           |   jsr 9184 <TF_abs>
    c020:	|           |   addq.l #4,sp
    c022:	|           |   move.l d0,-(sp)
    c024:	|           |   jsr 175e6 <__floatsisf>
    c02a:	|           |   addq.l #4,sp
    c02c:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c030:	|               move.l 12(sp),-(sp)
    c034:	|               jsr 1757e <__fixsfsi>
    c03a:	|               addq.l #4,sp
    c03c:	|               move.l d0,-(sp)
    c03e:	|               jsr 9184 <TF_abs>
    c044:	|               addq.l #4,sp
    c046:	|               move.l d0,-(sp)
    c048:	|               jsr 175e6 <__floatsisf>
    c04e:	|               addq.l #4,sp
    c050:	|               move.l d0,-(sp)
    c052:	|               move.l 28(sp),-(sp)
    c056:	|               jsr 1780c <__ltsf2>
    c05c:	|               addq.l #8,sp
    c05e:	|               tst.l d0
    c060:	|        /----- bge.w c112 <walkMe+0x238>
			if (thisPerson->spinning) {
    c064:	|        |      movea.l 32(sp),a0
    c068:	|        |      move.w 66(a0),d0
    c06c:	|        |  /-- beq.s c08a <walkMe+0x1b0>
				spinStep(thisPerson);
    c06e:	|        |  |   move.l 32(sp),-(sp)
    c072:	|        |  |   jsr bbf6 <spinStep>
    c078:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c07a:	|        |  |   pea 1 <_start+0x1>
    c07e:	|        |  |   move.l 36(sp),-(sp)
    c082:	|        |  |   jsr 806a <setFrames>
    c088:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c08a:	|        |  \-> move.l 24(sp),-(sp)
    c08e:	|        |      move.l 16(sp),-(sp)
    c092:	|        |      jsr 1749c <__divsf3>
    c098:	|        |      addq.l #8,sp
    c09a:	|        |      move.l d0,24(sp)
			if (move)
    c09e:	|        |      tst.w 10(sp)
    c0a2:	|        |  /-- beq.s c10c <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c0a4:	|        |  |   movea.l 32(sp),a0
    c0a8:	|        |  |   move.l 4(a0),d2
    c0ac:	|        |  |   move.l 24(sp),d0
    c0b0:	|        |  |   move.l d0,-(sp)
    c0b2:	|        |  |   move.l d0,-(sp)
    c0b4:	|        |  |   jsr 173a2 <__addsf3>
    c0ba:	|        |  |   addq.l #8,sp
    c0bc:	|        |  |   move.l d0,-(sp)
    c0be:	|        |  |   move.l 20(sp),-(sp)
    c0c2:	|        |  |   jsr 1749c <__divsf3>
    c0c8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c0ca:	|        |  |   move.l d0,-(sp)
    c0cc:	|        |  |   move.l d2,-(sp)
    c0ce:	|        |  |   jsr 173a2 <__addsf3>
    c0d4:	|        |  |   addq.l #8,sp
    c0d6:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c0d8:	|        |  |   movea.l 32(sp),a0
    c0dc:	|        |  |   move.l (a0),d3
    c0de:	|        |  |   move.l 24(sp),-(sp)
    c0e2:	|        |  |   move.l 24(sp),-(sp)
    c0e6:	|        |  |   jsr 1749c <__divsf3>
    c0ec:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c0ee:	|        |  |   move.l d0,-(sp)
    c0f0:	|        |  |   move.l d3,-(sp)
    c0f2:	|        |  |   jsr 173a2 <__addsf3>
    c0f8:	|        |  |   addq.l #8,sp
    c0fa:	|        |  |   move.l d2,-(sp)
    c0fc:	|        |  |   move.l d0,-(sp)
    c0fe:	|        |  |   move.l 40(sp),-(sp)
    c102:	|        |  |   jsr acdc <moveAndScale>
    c108:	|        |  |   lea 12(sp),sp
			return TRUE;
    c10c:	|        |  \-> moveq #1,d0
    c10e:	|  /-----|----- bra.w c1c0 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c112:	|  |     \----> movea.l 32(sp),a0
    c116:	|  |            move.l 56(a0),d0
    c11a:	|  |            moveq #-1,d1
    c11c:	|  |            cmp.l d0,d1
    c11e:	|  |        /-- bne.s c156 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c120:	|  |        |   movea.l 32(sp),a0
    c124:	|  |        |   move.l 110(a0),d0
    c128:	|  |        |   moveq #-1,d1
    c12a:	|  |        |   cmp.l d0,d1
    c12c:	|  |  /-----|-- beq.s c16a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c12e:	|  |  |     |   movea.l 32(sp),a0
    c132:	|  |  |     |   move.l 110(a0),d0
    c136:	|  |  |     |   movea.l 32(sp),a0
    c13a:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c13e:	|  |  |     |   movea.l 32(sp),a0
    c142:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c148:	|  |  |     |   move.l 32(sp),-(sp)
    c14c:	|  |  |     |   jsr bbf6 <spinStep>
    c152:	|  |  |     |   addq.l #4,sp
			}
			break;
    c154:	|  |  +-----|-- bra.s c16a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c156:	|  |  |     \-> move.l 32(sp),-(sp)
    c15a:	|  |  |         jsr 98f6 <doBorderStuff>
    c160:	|  |  |         addq.l #4,sp
    c162:	|  |  |         tst.w d0
    c164:	|  |  |  /----- beq.s c16e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c166:	\--|--|--|----- bra.w befa <walkMe+0x20>
			break;
    c16a:	   |  \--|----> nop
    c16c:	   |     |  /-- bra.s c170 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c16e:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c170:	   |        \-> movea.l 32(sp),a0
    c174:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c178:	   |            clr.l -(sp)
    c17a:	   |            move.l 36(sp),-(sp)
    c17e:	   |            jsr 806a <setFrames>
    c184:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c186:	   |            movea.l 32(sp),a0
    c18a:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c18e:	   |            move.l d0,-(sp)
    c190:	   |            jsr 175e6 <__floatsisf>
    c196:	   |            addq.l #4,sp
    c198:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c19a:	   |            movea.l 32(sp),a0
    c19e:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c1a2:	   |            move.l d0,-(sp)
    c1a4:	   |            jsr 175e6 <__floatsisf>
    c1aa:	   |            addq.l #4,sp
    c1ac:	   |            move.l d2,-(sp)
    c1ae:	   |            move.l d0,-(sp)
    c1b0:	   |            move.l 40(sp),-(sp)
    c1b4:	   |            jsr acdc <moveAndScale>
    c1ba:	   |            lea 12(sp),sp
	return FALSE;
    c1be:	   |            clr.w d0
}
    c1c0:	   \----------> move.l (sp)+,d2
    c1c2:	                move.l (sp)+,d3
    c1c4:	                lea 20(sp),sp
    c1c8:	                rts

0000c1ca <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c1ca:	       subq.l #8,sp
    c1cc:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c1ce:	   /-- bra.s c1fe <clearStackLib+0x34>
		k = stackLib;
    c1d0:	/--|-> move.l 1c992 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c1d8:	|  |   movea.l 1c992 <stackLib>,a0
    c1de:	|  |   move.l 4(a0),d0
    c1e2:	|  |   move.l d0,1c992 <stackLib>
		FreeVec(k);
    c1e8:	|  |   move.l 8(sp),4(sp)
    c1ee:	|  |   move.l 1c902 <SysBase>,d0
    c1f4:	|  |   movea.l d0,a6
    c1f6:	|  |   movea.l 4(sp),a1
    c1fa:	|  |   jsr -690(a6)
	while (stackLib) {
    c1fe:	|  \-> move.l 1c992 <stackLib>,d0
    c204:	\----- bne.s c1d0 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c206:	       clr.l 1c98e <stackLibTotal>
}
    c20c:	       nop
    c20e:	       movea.l (sp)+,a6
    c210:	       addq.l #8,sp
    c212:	       rts

0000c214 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c214:	          lea -128(sp),sp
    c218:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c21c:	      /-- bra.s c22e <loadGame+0x1a>
    c21e:	   /--|-> move.l 1c89a <allRunningFunctions>,d0
    c224:	   |  |   move.l d0,-(sp)
    c226:	   |  |   jsr 561a <finishFunction>
    c22c:	   |  |   addq.l #4,sp
    c22e:	   |  \-> move.l 1c89a <allRunningFunctions>,d0
    c234:	   \----- bne.s c21e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c236:	          pea 1c996 <ssgVersion>
    c23c:	          pea 1918d <PutChar+0x1537>
    c242:	          pea 41 <_start+0x41>
    c246:	          pea 53 <_start+0x53>
    c24a:	          move.l 160(sp),-(sp)
    c24e:	          jsr 63d0 <openAndVerify>
    c254:	          lea 20(sp),sp
    c258:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c25c:	      /-- bne.s c264 <loadGame+0x50>
    c25e:	      |   clr.w d0
    c260:	/-----|-- bra.w c50a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c264:	|     \-> move.l 112(sp),108(sp)
    c26a:	|         lea 140(sp),a0
    c26e:	|         lea -126(a0),a0
    c272:	|         move.l a0,120(sp)
    c276:	|         moveq #8,d0
    c278:	|         move.l d0,116(sp)
    c27c:	|         move.l 1c90a <DOSBase>,d0
    c282:	|         movea.l d0,a6
    c284:	|         move.l 108(sp),d1
    c288:	|         move.l 120(sp),d2
    c28c:	|         move.l 116(sp),d3
    c290:	|         jsr -42(a6)
    c294:	|         move.l d0,132(sp)
    c298:	|         move.l 132(sp),d0
    c29c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c2a0:	|         moveq #8,d0
    c2a2:	|         cmp.l 128(sp),d0
    c2a6:	|     /-- beq.s c2b6 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c2a8:	|     |   pea 191ae <PutChar+0x1558>
    c2ae:	|     |   jsr 171b4 <KPrintF>
    c2b4:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c2b6:	|     \-> move.l 14(sp),d1
    c2ba:	|         move.l 1c8a4 <fileTime>,d0
    c2c0:	|         cmp.l d1,d0
    c2c2:	|     /-- bne.s c2d2 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c2c4:	|     |   move.l 18(sp),d1
    c2c8:	|     |   move.l 1c8a8 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c2ce:	|     |   cmp.l d1,d0
    c2d0:	|  /--|-- beq.s c2f2 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c2d2:	|  |  \-> move.l 144(sp),-(sp)
    c2d6:	|  |      pea 191ca <PutChar+0x1574>
    c2dc:	|  |      pea 19291 <PutChar+0x163b>
    c2e2:	|  |      jsr 171b4 <KPrintF>
    c2e8:	|  |      lea 12(sp),sp
		return FALSE; 
    c2ec:	|  |      clr.w d0
    c2ee:	+--|----- bra.w c50a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c2f2:	|  \----> move.l 112(sp),124(sp)
    c2f8:	|         move.l 1c90a <DOSBase>,d0
    c2fe:	|         movea.l d0,a6
    c300:	|         move.l 124(sp),d1
    c304:	|         jsr -306(a6)
    c308:	|         move.l d0,136(sp)
    c30c:	|         move.l 136(sp),d0
    c310:	|         move.l d0,d0
    c312:	|         move.w d0,1c15e <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c318:	|         move.l 112(sp),100(sp)
    c31e:	|         move.l 1c90a <DOSBase>,d0
    c324:	|         movea.l d0,a6
    c326:	|         move.l 100(sp),d1
    c32a:	|         jsr -306(a6)
    c32e:	|         move.l d0,96(sp)
    c332:	|         move.l 96(sp),d0
    c336:	|         move.l d0,d0
    c338:	|         move.w d0,1c8a2 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c33e:	|         move.l 112(sp),92(sp)
    c344:	|         move.l 1c90a <DOSBase>,d0
    c34a:	|         movea.l d0,a6
    c34c:	|         move.l 92(sp),d1
    c350:	|         jsr -306(a6)
    c354:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c358:	|         move.l 112(sp),84(sp)
    c35e:	|         move.l 1c90a <DOSBase>,d0
    c364:	|         movea.l d0,a6
    c366:	|         move.l 84(sp),d1
    c36a:	|         jsr -306(a6)
    c36e:	|         move.l d0,80(sp)
    c372:	|         move.l 80(sp),d0
    c376:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c37a:	|     /-- beq.s c3ae <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c37c:	|     |   move.l 112(sp),-(sp)
    c380:	|     |   jsr 6bc <get2bytes>
    c386:	|     |   addq.l #4,sp
    c388:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c38c:	|     |   move.l 112(sp),-(sp)
    c390:	|     |   jsr 6bc <get2bytes>
    c396:	|     |   addq.l #4,sp
    c398:	|     |   move.l d0,1c9fa <fontHeight>
		charOrder = readString(fp);		
    c39e:	|     |   move.l 112(sp),-(sp)
    c3a2:	|     |   jsr b02 <readString>
    c3a8:	|     |   addq.l #4,sp
    c3aa:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c3ae:	|     \-> move.l 104(sp),70(sp)
    c3b4:	|         move.l 1c902 <SysBase>,d0
    c3ba:	|         movea.l d0,a6
    c3bc:	|         movea.l 70(sp),a1
    c3c0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c3c4:	|         move.l 112(sp),-(sp)
    c3c8:	|         jsr 854 <getSigned>
    c3ce:	|         addq.l #4,sp
    c3d0:	|         move.w d0,1c806 <fontSpace>

	killAllPeople ();
    c3d6:	|         jsr a97e <killAllPeople>
	killAllRegions ();
    c3dc:	|         jsr 159c4 <killAllRegions>

	int camerX = get2bytes (fp);
    c3e2:	|         move.l 112(sp),-(sp)
    c3e6:	|         jsr 6bc <get2bytes>
    c3ec:	|         addq.l #4,sp
    c3ee:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c3f2:	|         move.l 112(sp),-(sp)
    c3f6:	|         jsr 6bc <get2bytes>
    c3fc:	|         addq.l #4,sp
    c3fe:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c402:	|         move.l 112(sp),-(sp)
    c406:	|         jsr 7d8 <getFloat>
    c40c:	|         addq.l #4,sp
    c40e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c412:	|         move.l 112(sp),54(sp)
    c418:	|         move.l 1c90a <DOSBase>,d0
    c41e:	|         movea.l d0,a6
    c420:	|         move.l 54(sp),d1
    c424:	|         jsr -306(a6)
    c428:	|         move.l d0,50(sp)
    c42c:	|         move.l 50(sp),d0
    c430:	|         move.l d0,d0
    c432:	|         move.b d0,1c278 <brightnessLevel>

	loadHandlers (fp);
    c438:	|         move.l 112(sp),-(sp)
    c43c:	|         jsr 6330 <loadHandlers>
    c442:	|         addq.l #4,sp
	loadRegions (fp);
    c444:	|         move.l 112(sp),-(sp)
    c448:	|         jsr 15a20 <loadRegions>
    c44e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c450:	|         moveq #12,d0
    c452:	|         move.l d0,46(sp)
    c456:	|         clr.l 42(sp)
    c45a:	|         move.l 1c902 <SysBase>,d0
    c460:	|         movea.l d0,a6
    c462:	|         move.l 46(sp),d0
    c466:	|         move.l 42(sp),d1
    c46a:	|         jsr -684(a6)
    c46e:	|         move.l d0,38(sp)
    c472:	|         move.l 38(sp),d0
    c476:	|         move.l d0,1c808 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c47c:	|         move.l 1c808 <mouseCursorAnim>,d0
    c482:	|     /-- bne.s c496 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c484:	|     |   pea 1929b <PutChar+0x1645>
    c48a:	|     |   jsr 171b4 <KPrintF>
    c490:	|     |   addq.l #4,sp
		return FALSE;
    c492:	|     |   clr.w d0
    c494:	+-----|-- bra.s c50a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c496:	|     \-> jsr d330 <nosnapshot>
	if (FGetC (fp)) {
    c49c:	|         move.l 112(sp),34(sp)
    c4a2:	|         move.l 1c90a <DOSBase>,d0
    c4a8:	|         movea.l d0,a6
    c4aa:	|         move.l 34(sp),d1
    c4ae:	|         jsr -306(a6)
    c4b2:	|         move.l d0,30(sp)
    c4b6:	|         move.l 30(sp),d0
    c4ba:	|     /-- beq.s c4d0 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c4bc:	|     |   move.l 112(sp),-(sp)
    c4c0:	|     |   jsr d3b0 <restoreSnapshot>
    c4c6:	|     |   addq.l #4,sp
    c4c8:	|     |   tst.w d0
    c4ca:	|     +-- bne.s c4d0 <loadGame+0x2bc>
    c4cc:	|     |   clr.w d0
    c4ce:	+-----|-- bra.s c50a <loadGame+0x2f6>
	}

	Close (fp);
    c4d0:	|     \-> move.l 112(sp),26(sp)
    c4d6:	|         move.l 1c90a <DOSBase>,d0
    c4dc:	|         movea.l d0,a6
    c4de:	|         move.l 26(sp),d1
    c4e2:	|         jsr -36(a6)
    c4e6:	|         move.l d0,22(sp)
	clearStackLib ();
    c4ea:	|         jsr c1ca <clearStackLib>

	cameraX = camerX;
    c4f0:	|         move.l 66(sp),1c9bc <cameraX>
	cameraY = camerY;
    c4f8:	|         move.l 62(sp),1c9c0 <cameraY>
	cameraZoom = camerZ;
    c500:	|         move.l 58(sp),1c2a0 <cameraZoom>

	return TRUE;
    c508:	|         moveq #1,d0
}
    c50a:	\-------> movem.l (sp)+,d2-d3/a6
    c50e:	          lea 128(sp),sp
    c512:	          rts

0000c514 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c514:	   /-> lea -64(sp),sp
    c518:	   |   move.l a6,-(sp)
    c51a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c51c:	   |   movea.l 76(sp),a0
    c520:	   |   move.l (a0),d0
    c522:	   |   move.l 80(sp),-(sp)
    c526:	   |   move.l d0,-(sp)
    c528:	   |   jsr 8d0 <put2bytes>
    c52e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c530:	   |   movea.l 76(sp),a0
    c534:	   |   move.l 40(a0),d0
    c538:	/--|-- beq.s c574 <saveFunction+0x60>
		FPutC (fp, 1);
    c53a:	|  |   move.l 80(sp),52(sp)
    c540:	|  |   moveq #1,d0
    c542:	|  |   move.l d0,48(sp)
    c546:	|  |   move.l 1c90a <DOSBase>,d0
    c54c:	|  |   movea.l d0,a6
    c54e:	|  |   move.l 52(sp),d1
    c552:	|  |   move.l 48(sp),d2
    c556:	|  |   jsr -312(a6)
    c55a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c55e:	|  |   movea.l 76(sp),a0
    c562:	|  |   move.l 40(a0),d0
    c566:	|  |   move.l 80(sp),-(sp)
    c56a:	|  |   move.l d0,-(sp)
    c56c:	|  \-- jsr c514 <saveFunction>(pc)
    c570:	|      addq.l #8,sp
    c572:	|  /-- bra.s c596 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c574:	\--|-> move.l 80(sp),64(sp)
    c57a:	   |   clr.l 60(sp)
    c57e:	   |   move.l 1c90a <DOSBase>,d0
    c584:	   |   movea.l d0,a6
    c586:	   |   move.l 64(sp),d1
    c58a:	   |   move.l 60(sp),d2
    c58e:	   |   jsr -312(a6)
    c592:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c596:	   \-> movea.l 76(sp),a0
    c59a:	       move.l 12(a0),d0
    c59e:	       move.l 80(sp),-(sp)
    c5a2:	       move.l d0,-(sp)
    c5a4:	       jsr 958 <put4bytes>
    c5aa:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c5ac:	       movea.l 76(sp),a0
    c5b0:	       move.l 36(a0),d0
    c5b4:	       move.l 80(sp),-(sp)
    c5b8:	       move.l d0,-(sp)
    c5ba:	       jsr 8d0 <put2bytes>
    c5c0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c5c2:	       move.l 80(sp),40(sp)
    c5c8:	       movea.l 76(sp),a0
    c5cc:	       move.w 54(a0),d0
    c5d0:	       movea.w d0,a0
    c5d2:	       move.l a0,36(sp)
    c5d6:	       move.l 1c90a <DOSBase>,d0
    c5dc:	       movea.l d0,a6
    c5de:	       move.l 40(sp),d1
    c5e2:	       move.l 36(sp),d2
    c5e6:	       jsr -312(a6)
    c5ea:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c5ee:	       move.l 80(sp),28(sp)
    c5f4:	       movea.l 76(sp),a0
    c5f8:	       move.w 48(a0),d0
    c5fc:	       movea.w d0,a0
    c5fe:	       move.l a0,24(sp)
    c602:	       move.l 1c90a <DOSBase>,d0
    c608:	       movea.l d0,a6
    c60a:	       move.l 28(sp),d1
    c60e:	       move.l 24(sp),d2
    c612:	       jsr -312(a6)
    c616:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c61a:	       move.l 80(sp),16(sp)
    c620:	       movea.l 76(sp),a0
    c624:	       move.w 50(a0),d0
    c628:	       movea.w d0,a0
    c62a:	       move.l a0,12(sp)
    c62e:	       move.l 1c90a <DOSBase>,d0
    c634:	       movea.l d0,a6
    c636:	       move.l 16(sp),d1
    c63a:	       move.l 12(sp),d2
    c63e:	       jsr -312(a6)
    c642:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c646:	       moveq #28,d0
    c648:	       add.l 76(sp),d0
    c64c:	       move.l 80(sp),-(sp)
    c650:	       move.l d0,-(sp)
    c652:	       jsr cd6c <saveVariable>
    c658:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c65a:	       movea.l 76(sp),a0
    c65e:	       move.b 56(a0),d0
    c662:	   /-- beq.s c672 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c664:	   |   pea 192bc <PutChar+0x1666>
    c66a:	   |   jsr 171b4 <KPrintF>
    c670:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c672:	   \-> movea.l 76(sp),a0
    c676:	       move.l 24(a0),d0
    c67a:	       move.l 80(sp),-(sp)
    c67e:	       move.l d0,-(sp)
    c680:	       jsr cbe0 <saveStack>
    c686:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c688:	       clr.l 68(sp)
    c68c:	   /-- bra.s c6b0 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c68e:	/--|-> movea.l 76(sp),a0
    c692:	|  |   move.l 20(a0),d1
    c696:	|  |   move.l 68(sp),d0
    c69a:	|  |   lsl.l #3,d0
    c69c:	|  |   add.l d1,d0
    c69e:	|  |   move.l 80(sp),-(sp)
    c6a2:	|  |   move.l d0,-(sp)
    c6a4:	|  |   jsr cd6c <saveVariable>
    c6aa:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6ac:	|  |   addq.l #1,68(sp)
    c6b0:	|  \-> movea.l 76(sp),a0
    c6b4:	|      move.l 8(a0),d0
    c6b8:	|      cmp.l 68(sp),d0
    c6bc:	\----- bgt.s c68e <saveFunction+0x17a>
	}
}
    c6be:	       nop
    c6c0:	       nop
    c6c2:	       move.l (sp)+,d2
    c6c4:	       movea.l (sp)+,a6
    c6c6:	       lea 64(sp),sp
    c6ca:	       rts

0000c6cc <saveGame>:

BOOL saveGame (char * fname) {
    c6cc:	          lea -248(sp),sp
    c6d0:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c6d4:	          move.l 264(sp),244(sp)
    c6da:	          move.l #1006,240(sp)
    c6e2:	          move.l 1c90a <DOSBase>,d0
    c6e8:	          movea.l d0,a6
    c6ea:	          move.l 244(sp),d1
    c6ee:	          move.l 240(sp),d2
    c6f2:	          jsr -30(a6)
    c6f6:	          move.l d0,236(sp)
    c6fa:	          move.l 236(sp),d0
    c6fe:	          move.l d0,232(sp)
	if (fp == NULL) {
    c702:	      /-- bne.s c718 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c704:	      |   pea 192de <PutChar+0x1688>
    c70a:	      |   jsr 171b4 <KPrintF>
    c710:	      |   addq.l #4,sp
		return FALSE;
    c712:	      |   clr.w d0
    c714:	/-----|-- bra.w cbd6 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c718:	|     \-> move.l 232(sp),228(sp)
    c71e:	|         move.l #103163,224(sp)
    c726:	|         moveq #6,d0
    c728:	|         move.l d0,220(sp)
    c72c:	|         move.l 1c90a <DOSBase>,d0
    c732:	|         movea.l d0,a6
    c734:	|         move.l 228(sp),d1
    c738:	|         move.l 224(sp),d2
    c73c:	|         move.l 220(sp),d3
    c740:	|         jsr -48(a6)
    c744:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c748:	|         move.l 232(sp),212(sp)
    c74e:	|         clr.l 208(sp)
    c752:	|         move.l 1c90a <DOSBase>,d0
    c758:	|         movea.l d0,a6
    c75a:	|         move.l 212(sp),d1
    c75e:	|         move.l 208(sp),d2
    c762:	|         jsr -312(a6)
    c766:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c76a:	|         move.l 232(sp),200(sp)
    c770:	|         clr.l 196(sp)
    c774:	|         move.l 1c90a <DOSBase>,d0
    c77a:	|         movea.l d0,a6
    c77c:	|         move.l 200(sp),d1
    c780:	|         move.l 196(sp),d2
    c784:	|         jsr -312(a6)
    c788:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c78c:	|         move.l 232(sp),188(sp)
    c792:	|         moveq #2,d0
    c794:	|         move.l d0,184(sp)
    c798:	|         move.l 1c90a <DOSBase>,d0
    c79e:	|         movea.l d0,a6
    c7a0:	|         move.l 188(sp),d1
    c7a4:	|         move.l 184(sp),d2
    c7a8:	|         jsr -312(a6)
    c7ac:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c7b0:	|         move.l 232(sp),176(sp)
    c7b6:	|         moveq #2,d0
    c7b8:	|         move.l d0,172(sp)
    c7bc:	|         move.l 1c90a <DOSBase>,d0
    c7c2:	|         movea.l d0,a6
    c7c4:	|         move.l 176(sp),d1
    c7c8:	|         move.l 172(sp),d2
    c7cc:	|         jsr -312(a6)
    c7d0:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c7d4:	|         move.l 232(sp),164(sp)
    c7da:	|         move.l #116900,160(sp)
    c7e2:	|         moveq #8,d0
    c7e4:	|         move.l d0,156(sp)
    c7e8:	|         move.l 1c90a <DOSBase>,d0
    c7ee:	|         movea.l d0,a6
    c7f0:	|         move.l 164(sp),d1
    c7f4:	|         move.l 160(sp),d2
    c7f8:	|         move.l 156(sp),d3
    c7fc:	|         jsr -48(a6)
    c800:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c804:	|         move.l 232(sp),148(sp)
    c80a:	|         move.w 1c15e <allowAnyFilename>,d0
    c810:	|         movea.w d0,a0
    c812:	|         move.l a0,144(sp)
    c816:	|         move.l 1c90a <DOSBase>,d0
    c81c:	|         movea.l d0,a6
    c81e:	|         move.l 148(sp),d1
    c822:	|         move.l 144(sp),d2
    c826:	|         jsr -312(a6)
    c82a:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c82e:	|         move.l 232(sp),136(sp)
    c834:	|         move.w 1c8a2 <captureAllKeys>,d0
    c83a:	|         movea.w d0,a0
    c83c:	|         move.l a0,132(sp)
    c840:	|         move.l 1c90a <DOSBase>,d0
    c846:	|         movea.l d0,a6
    c848:	|         move.l 136(sp),d1
    c84c:	|         move.l 132(sp),d2
    c850:	|         jsr -312(a6)
    c854:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c858:	|         move.l 232(sp),124(sp)
    c85e:	|         moveq #1,d0
    c860:	|         move.l d0,120(sp)
    c864:	|         move.l 1c90a <DOSBase>,d0
    c86a:	|         movea.l d0,a6
    c86c:	|         move.l 124(sp),d1
    c870:	|         move.l 120(sp),d2
    c874:	|         jsr -312(a6)
    c878:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c87c:	|         move.l 232(sp),112(sp)
    c882:	|         move.l 1ca0a <fontTableSize>,d0
    c888:	|         sgt d0
    c88a:	|         neg.b d0
    c88c:	|         move.b d0,d0
    c88e:	|         andi.l #255,d0
    c894:	|         move.l d0,108(sp)
    c898:	|         move.l 1c90a <DOSBase>,d0
    c89e:	|         movea.l d0,a6
    c8a0:	|         move.l 112(sp),d1
    c8a4:	|         move.l 108(sp),d2
    c8a8:	|         jsr -312(a6)
    c8ac:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c8b0:	|         move.l 1ca0a <fontTableSize>,d0
    c8b6:	|     /-- ble.s c8f4 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c8b8:	|     |   move.l 1c9fe <loadedFontNum>,d0
    c8be:	|     |   move.l 232(sp),-(sp)
    c8c2:	|     |   move.l d0,-(sp)
    c8c4:	|     |   jsr 8d0 <put2bytes>
    c8ca:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c8cc:	|     |   move.l 1c9fa <fontHeight>,d0
    c8d2:	|     |   move.l 232(sp),-(sp)
    c8d6:	|     |   move.l d0,-(sp)
    c8d8:	|     |   jsr 8d0 <put2bytes>
    c8de:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c8e0:	|     |   move.l 1ca02 <fontOrderString>,d0
    c8e6:	|     |   move.l 232(sp),-(sp)
    c8ea:	|     |   move.l d0,-(sp)
    c8ec:	|     |   jsr bd8 <writeString>
    c8f2:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c8f4:	|     \-> move.w 1c806 <fontSpace>,d0
    c8fa:	|         movea.w d0,a0
    c8fc:	|         move.l 232(sp),-(sp)
    c900:	|         move.l a0,-(sp)
    c902:	|         jsr a9c <putSigned>
    c908:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c90a:	|         move.l 1c9bc <cameraX>,d0
    c910:	|         move.l 232(sp),-(sp)
    c914:	|         move.l d0,-(sp)
    c916:	|         jsr 8d0 <put2bytes>
    c91c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c91e:	|         move.l 1c9c0 <cameraY>,d0
    c924:	|         move.l 232(sp),-(sp)
    c928:	|         move.l d0,-(sp)
    c92a:	|         jsr 8d0 <put2bytes>
    c930:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c932:	|         move.l 1c2a0 <cameraZoom>,d0
    c938:	|         move.l 232(sp),-(sp)
    c93c:	|         move.l d0,-(sp)
    c93e:	|         jsr a46 <putFloat>
    c944:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c946:	|         move.l 232(sp),100(sp)
    c94c:	|         move.b 1c278 <brightnessLevel>,d0
    c952:	|         move.b d0,d0
    c954:	|         andi.l #255,d0
    c95a:	|         move.l d0,96(sp)
    c95e:	|         move.l 1c90a <DOSBase>,d0
    c964:	|         movea.l d0,a6
    c966:	|         move.l 100(sp),d1
    c96a:	|         move.l 96(sp),d2
    c96e:	|         jsr -312(a6)
    c972:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c976:	|         move.l 232(sp),-(sp)
    c97a:	|         jsr 68b4 <saveHandlers>
    c980:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c982:	|         move.l 232(sp),-(sp)
    c986:	|         jsr 15bda <saveRegions>
    c98c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c98e:	|         move.l 1c808 <mouseCursorAnim>,d0
    c994:	|         move.l 232(sp),-(sp)
    c998:	|         move.l d0,-(sp)
    c99a:	|         jsr aef0 <saveAnim>
    c9a0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c9a2:	|         move.l 1c80c <mouseCursorFrameNum>,d0
    c9a8:	|         move.l 232(sp),-(sp)
    c9ac:	|         move.l d0,-(sp)
    c9ae:	|         jsr 8d0 <put2bytes>
    c9b4:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c9b6:	|         move.l 1c89a <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c9be:	|         clr.l 248(sp)
	while (thisFunction) {
    c9c2:	|     /-- bra.s c9d2 <saveGame+0x306>
		countFunctions ++;
    c9c4:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c9c8:	|  |  |   movea.l 252(sp),a0
    c9cc:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c9d2:	|  |  \-> tst.l 252(sp)
    c9d6:	|  \----- bne.s c9c4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c9d8:	|         move.l 232(sp),-(sp)
    c9dc:	|         move.l 252(sp),-(sp)
    c9e0:	|         jsr 8d0 <put2bytes>
    c9e6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c9e8:	|         move.l 1c89a <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c9f0:	|     /-- bra.s ca0c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c9f2:	|  /--|-> move.l 232(sp),-(sp)
    c9f6:	|  |  |   move.l 256(sp),-(sp)
    c9fa:	|  |  |   jsr c514 <saveFunction>
    ca00:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca02:	|  |  |   movea.l 252(sp),a0
    ca06:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca0c:	|  |  \-> tst.l 252(sp)
    ca10:	|  \----- bne.s c9f2 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ca12:	|         clr.l 256(sp)
    ca16:	|     /-- bra.s ca38 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ca18:	|  /--|-> move.l 1c8b0 <globalVars>,d1
    ca1e:	|  |  |   move.l 256(sp),d0
    ca22:	|  |  |   lsl.l #3,d0
    ca24:	|  |  |   add.l d1,d0
    ca26:	|  |  |   move.l 232(sp),-(sp)
    ca2a:	|  |  |   move.l d0,-(sp)
    ca2c:	|  |  |   jsr cd6c <saveVariable>
    ca32:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ca34:	|  |  |   addq.l #1,256(sp)
    ca38:	|  |  \-> move.l 1c8da <numGlobals>,d0
    ca3e:	|  |      cmp.l 256(sp),d0
    ca42:	|  \----- bgt.s ca18 <saveGame+0x34c>
	}

	savePeople (fp);
    ca44:	|         move.l 232(sp),-(sp)
    ca48:	|         jsr b018 <savePeople>
    ca4e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ca50:	|         movea.l 1ca1e <currentFloor>,a0
    ca56:	|         move.l 8(a0),d0
    ca5a:	|  /----- beq.s ca98 <saveGame+0x3cc>
		FPutC (fp, 1);
    ca5c:	|  |      move.l 232(sp),76(sp)
    ca62:	|  |      moveq #1,d0
    ca64:	|  |      move.l d0,72(sp)
    ca68:	|  |      move.l 1c90a <DOSBase>,d0
    ca6e:	|  |      movea.l d0,a6
    ca70:	|  |      move.l 76(sp),d1
    ca74:	|  |      move.l 72(sp),d2
    ca78:	|  |      jsr -312(a6)
    ca7c:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    ca80:	|  |      movea.l 1ca1e <currentFloor>,a0
    ca86:	|  |      move.l (a0),d0
    ca88:	|  |      move.l 232(sp),-(sp)
    ca8c:	|  |      move.l d0,-(sp)
    ca8e:	|  |      jsr 8d0 <put2bytes>
    ca94:	|  |      addq.l #8,sp
    ca96:	|  |  /-- bra.s caba <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ca98:	|  \--|-> move.l 232(sp),88(sp)
    ca9e:	|     |   clr.l 84(sp)
    caa2:	|     |   move.l 1c90a <DOSBase>,d0
    caa8:	|     |   movea.l d0,a6
    caaa:	|     |   move.l 88(sp),d1
    caae:	|     |   move.l 84(sp),d2
    cab2:	|     |   jsr -312(a6)
    cab6:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    caba:	|     \-> move.l 232(sp),64(sp)
    cac0:	|         move.l 1c9d0 <speechMode>,60(sp)
    cac8:	|         move.l 1c90a <DOSBase>,d0
    cace:	|         movea.l d0,a6
    cad0:	|         move.l 64(sp),d1
    cad4:	|         move.l 60(sp),d2
    cad8:	|         jsr -312(a6)
    cadc:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cae0:	|         move.b 1c7dc <fadeMode>,d0
    cae6:	|         move.b d0,d0
    cae8:	|         andi.l #255,d0
    caee:	|         move.l d0,52(sp)
    caf2:	|         move.l 232(sp),48(sp)
    caf8:	|         move.l 1c90a <DOSBase>,d0
    cafe:	|         movea.l d0,a6
    cb00:	|         move.l 52(sp),d1
    cb04:	|         move.l 48(sp),d2
    cb08:	|         jsr -312(a6)
    cb0c:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cb10:	|         move.l 1c95e <speech>,d0
    cb16:	|         move.l 232(sp),-(sp)
    cb1a:	|         move.l d0,-(sp)
    cb1c:	|         jsr 7f1e <saveSpeech>
    cb22:	|         addq.l #8,sp
	saveStatusBars (fp);
    cb24:	|         move.l 232(sp),-(sp)
    cb28:	|         jsr 791a <saveStatusBars>
    cb2e:	|         addq.l #4,sp
	saveSounds (fp);
    cb30:	|         move.l 232(sp),-(sp)
    cb34:	|         jsr d0de <saveSounds>
    cb3a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cb3c:	|         move.w 1c9ba <saveEncoding>,d0
    cb42:	|         move.w d0,d0
    cb44:	|         andi.l #65535,d0
    cb4a:	|         move.l 232(sp),-(sp)
    cb4e:	|         move.l d0,-(sp)
    cb50:	|         jsr 8d0 <put2bytes>
    cb56:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cb58:	|         move.l 1c9ac <parallaxStuff>,d0
    cb5e:	|         move.l 232(sp),-(sp)
    cb62:	|         move.l d0,-(sp)
    cb64:	|         jsr d3d6 <saveParallaxRecursive>
    cb6a:	|         addq.l #8,sp
	FPutC (fp, 0);
    cb6c:	|         move.l 232(sp),40(sp)
    cb72:	|         clr.l 36(sp)
    cb76:	|         move.l 1c90a <DOSBase>,d0
    cb7c:	|         movea.l d0,a6
    cb7e:	|         move.l 40(sp),d1
    cb82:	|         move.l 36(sp),d2
    cb86:	|         jsr -312(a6)
    cb8a:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cb8e:	|         move.l 232(sp),28(sp)
    cb94:	|         move.l 1c27e <languageNum>,24(sp)
    cb9c:	|         move.l 1c90a <DOSBase>,d0
    cba2:	|         movea.l d0,a6
    cba4:	|         move.l 28(sp),d1
    cba8:	|         move.l 24(sp),d2
    cbac:	|         jsr -312(a6)
    cbb0:	|         move.l d0,20(sp)

	Close(fp);
    cbb4:	|         move.l 232(sp),16(sp)
    cbba:	|         move.l 1c90a <DOSBase>,d0
    cbc0:	|         movea.l d0,a6
    cbc2:	|         move.l 16(sp),d1
    cbc6:	|         jsr -36(a6)
    cbca:	|         move.l d0,12(sp)
	clearStackLib ();
    cbce:	|         jsr c1ca <clearStackLib>
	return TRUE;
    cbd4:	|         moveq #1,d0
}
    cbd6:	\-------> movem.l (sp)+,d2-d3/a6
    cbda:	          lea 248(sp),sp
    cbde:	          rts

0000cbe0 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cbe0:	       lea -12(sp),sp
	int elements = 0;
    cbe4:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cbe8:	       move.l 16(sp),(sp)
	while (search) {
    cbec:	   /-- bra.s cbf8 <saveStack+0x18>
		elements ++;
    cbee:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cbf2:	|  |   movea.l (sp),a0
    cbf4:	|  |   move.l 8(a0),(sp)
	while (search) {
    cbf8:	|  \-> tst.l (sp)
    cbfa:	\----- bne.s cbee <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cbfc:	       move.l 20(sp),-(sp)
    cc00:	       move.l 12(sp),-(sp)
    cc04:	       jsr 8d0 <put2bytes>
    cc0a:	       addq.l #8,sp
	search = vs;
    cc0c:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cc10:	       clr.l 4(sp)
    cc14:	   /-- bra.s cc30 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cc16:	/--|-> move.l (sp),d0
    cc18:	|  |   move.l 20(sp),-(sp)
    cc1c:	|  |   move.l d0,-(sp)
    cc1e:	|  |   jsr cd6c <saveVariable>
    cc24:	|  |   addq.l #8,sp
		search = search -> next;
    cc26:	|  |   movea.l (sp),a0
    cc28:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cc2c:	|  |   addq.l #1,4(sp)
    cc30:	|  \-> move.l 4(sp),d0
    cc34:	|      cmp.l 8(sp),d0
    cc38:	\----- blt.s cc16 <saveStack+0x36>
	}
}
    cc3a:	       nop
    cc3c:	       nop
    cc3e:	       lea 12(sp),sp
    cc42:	       rts

0000cc44 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cc44:	             lea -44(sp),sp
    cc48:	             move.l a6,-(sp)
    cc4a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cc4c:	             move.l 1c992 <stackLib>,48(sp)
	int a = 0;
    cc54:	             clr.l 44(sp)
	while (s) {
    cc58:	      /----- bra.s ccb6 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cc5a:	   /--|----> movea.l 48(sp),a0
    cc5e:	   |  |      move.l (a0),d0
    cc60:	   |  |      cmp.l 56(sp),d0
    cc64:	   |  |  /-- bne.s cca8 <saveStackRef+0x64>
			FPutC (fp, 1);
    cc66:	   |  |  |   move.l 60(sp),16(sp)
    cc6c:	   |  |  |   moveq #1,d0
    cc6e:	   |  |  |   move.l d0,12(sp)
    cc72:	   |  |  |   move.l 1c90a <DOSBase>,d0
    cc78:	   |  |  |   movea.l d0,a6
    cc7a:	   |  |  |   move.l 16(sp),d1
    cc7e:	   |  |  |   move.l 12(sp),d2
    cc82:	   |  |  |   jsr -312(a6)
    cc86:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cc8a:	   |  |  |   move.l 1c98e <stackLibTotal>,d0
    cc90:	   |  |  |   sub.l 44(sp),d0
    cc94:	   |  |  |   move.l 60(sp),-(sp)
    cc98:	   |  |  |   move.l d0,-(sp)
    cc9a:	   |  |  |   jsr 8d0 <put2bytes>
    cca0:	   |  |  |   addq.l #8,sp
			return TRUE;
    cca2:	   |  |  |   moveq #1,d0
    cca4:	/--|--|--|-- bra.w cd62 <saveStackRef+0x11e>
		}
		s = s -> next;
    cca8:	|  |  |  \-> movea.l 48(sp),a0
    ccac:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ccb2:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ccb6:	|  |  \----> tst.l 48(sp)
    ccba:	|  \-------- bne.s cc5a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ccbc:	|            move.l 60(sp),40(sp)
    ccc2:	|            clr.l 36(sp)
    ccc6:	|            move.l 1c90a <DOSBase>,d0
    cccc:	|            movea.l d0,a6
    ccce:	|            move.l 40(sp),d1
    ccd2:	|            move.l 36(sp),d2
    ccd6:	|            jsr -312(a6)
    ccda:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    ccde:	|            movea.l 56(sp),a0
    cce2:	|            move.l (a0),d0
    cce4:	|            move.l 60(sp),-(sp)
    cce8:	|            move.l d0,-(sp)
    ccea:	|            jsr cbe0 <saveStack>
    ccf0:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    ccf2:	|            moveq #8,d0
    ccf4:	|            move.l d0,28(sp)
    ccf8:	|            clr.l 24(sp)
    ccfc:	|            move.l 1c902 <SysBase>,d0
    cd02:	|            movea.l d0,a6
    cd04:	|            move.l 28(sp),d0
    cd08:	|            move.l 24(sp),d1
    cd0c:	|            jsr -684(a6)
    cd10:	|            move.l d0,20(sp)
    cd14:	|            move.l 20(sp),d0
    cd18:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cd1c:	|            move.l 1c98e <stackLibTotal>,d0
    cd22:	|            addq.l #1,d0
    cd24:	|            move.l d0,1c98e <stackLibTotal>
	if (! s) {
    cd2a:	|            tst.l 48(sp)
    cd2e:	|        /-- bne.s cd42 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cd30:	|        |   pea 1932a <PutChar+0x16d4>
    cd36:	|        |   jsr 171b4 <KPrintF>
    cd3c:	|        |   addq.l #4,sp
		return FALSE;
    cd3e:	|        |   clr.w d0
    cd40:	+--------|-- bra.s cd62 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cd42:	|        \-> move.l 1c992 <stackLib>,d0
    cd48:	|            movea.l 48(sp),a0
    cd4c:	|            move.l d0,4(a0)
	s -> stack = vs;
    cd50:	|            movea.l 48(sp),a0
    cd54:	|            move.l 56(sp),(a0)
	stackLib = s;
    cd58:	|            move.l 48(sp),1c992 <stackLib>
	return TRUE;
    cd60:	|            moveq #1,d0
}
    cd62:	\----------> move.l (sp)+,d2
    cd64:	             movea.l (sp)+,a6
    cd66:	             lea 44(sp),sp
    cd6a:	             rts

0000cd6c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cd6c:	          lea -12(sp),sp
    cd70:	          move.l a6,-(sp)
    cd72:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cd74:	          move.l 28(sp),16(sp)
    cd7a:	          movea.l 24(sp),a0
    cd7e:	          move.l (a0),d0
    cd80:	          move.l d0,12(sp)
    cd84:	          move.l 1c90a <DOSBase>,d0
    cd8a:	          movea.l d0,a6
    cd8c:	          move.l 16(sp),d1
    cd90:	          move.l 12(sp),d2
    cd94:	          jsr -312(a6)
    cd98:	          move.l d0,8(sp)
	switch (from -> varType) {
    cd9c:	          movea.l 24(sp),a0
    cda0:	          move.l (a0),d0
    cda2:	          moveq #9,d1
    cda4:	          cmp.l d0,d1
    cda6:	      /-- bcs.w ce56 <saveVariable+0xea>
    cdaa:	      |   add.l d0,d0
    cdac:	      |   movea.l d0,a0
    cdae:	      |   adda.l #52666,a0
    cdb4:	      |   move.w (a0),d0
    cdb6:	      |   jmp (cdba <saveVariable+0x4e>,pc,d0.w)
    cdba:	      |   ori.l #1310740,(a0)+
    cdc0:	      |   ori.b #20,(20,a0,d0.w)
    cdc6:	      |   .short 0x004c
    cdc8:	      |   ori.b #126,(a4)
    cdcc:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cdd0:	      |   ori.b #40,(a0)+
    cdd4:	      |   ori.b #47,d4
    cdd8:	      |   ori.b #0,(a4)+
    cddc:	      |   jsr 958 <put4bytes>
    cde2:	      |   addq.l #8,sp
		return TRUE;
    cde4:	      |   moveq #1,d0
    cde6:	/-----|-- bra.w ce92 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cdea:	|     |   movea.l 24(sp),a0
    cdee:	|     |   move.l 4(a0),d0
    cdf2:	|     |   move.l 28(sp),-(sp)
    cdf6:	|     |   move.l d0,-(sp)
    cdf8:	|     |   jsr bd8 <writeString>
    cdfe:	|     |   addq.l #8,sp
		return TRUE;
    ce00:	|     |   moveq #1,d0
    ce02:	+-----|-- bra.w ce92 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce06:	|     |   movea.l 24(sp),a0
    ce0a:	|     |   move.l 4(a0),d0
    ce0e:	|     |   move.l 28(sp),-(sp)
    ce12:	|     |   move.l d0,-(sp)
    ce14:	|     |   jsr cc44 <saveStackRef>
    ce1a:	|     |   addq.l #8,sp
    ce1c:	+-----|-- bra.s ce92 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ce1e:	|     |   movea.l 24(sp),a0
    ce22:	|     |   move.l 4(a0),d0
    ce26:	|     |   move.l 28(sp),-(sp)
    ce2a:	|     |   move.l d0,-(sp)
    ce2c:	|     |   jsr afba <saveCostume>
    ce32:	|     |   addq.l #8,sp
		return FALSE;
    ce34:	|     |   clr.w d0
    ce36:	+-----|-- bra.s ce92 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ce38:	|     |   movea.l 24(sp),a0
    ce3c:	|     |   move.l 4(a0),d0
    ce40:	|     |   move.l 28(sp),-(sp)
    ce44:	|     |   move.l d0,-(sp)
    ce46:	|     |   jsr aef0 <saveAnim>
    ce4c:	|     |   addq.l #8,sp
		return FALSE;
    ce4e:	|     |   clr.w d0
    ce50:	+-----|-- bra.s ce92 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    ce52:	|     |   clr.w d0
    ce54:	+-----|-- bra.s ce92 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    ce56:	|     \-> movea.l 24(sp),a0
    ce5a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ce5c:	|         moveq #10,d1
    ce5e:	|         cmp.l d0,d1
    ce60:	|  /----- bcs.s ce7a <saveVariable+0x10e>
						typeName[from->varType] :
    ce62:	|  |      movea.l 24(sp),a0
    ce66:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ce68:	|  |      add.l d0,d0
    ce6a:	|  |      movea.l d0,a1
    ce6c:	|  |      adda.l d0,a1
    ce6e:	|  |      lea 1c7de <typeName>,a0
    ce74:	|  |      move.l (0,a1,a0.l),d0
    ce78:	|  |  /-- bra.s ce80 <saveVariable+0x114>
    ce7a:	|  \--|-> move.l #103247,d0
    ce80:	|     \-> move.l d0,-(sp)
    ce82:	|         pea 19356 <PutChar+0x1700>
    ce88:	|         jsr 171b4 <KPrintF>
    ce8e:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    ce90:	|         moveq #1,d0
    ce92:	\-------> move.l (sp)+,d2
    ce94:	          movea.l (sp)+,a6
    ce96:	          lea 12(sp),sp
    ce9a:	          rts

0000ce9c <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    ce9c:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cea0:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cea8:	          movea.l 4(sp),a0
    ceac:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    ceb2:	          movea.l 4(sp),a0
    ceb6:	          move.w 10(a0),d0
    ceba:	          lsr.w #8,d0
    cebc:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cec0:	          movea.l 4(sp),a0
    cec4:	          move.w 10(a0),d0
    cec8:	          move.b d0,(sp)

    if(counterx_new)
    ceca:	/-------- beq.w cf70 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cece:	|         clr.w d1
    ced0:	|         move.b (sp),d1
    ced2:	|         move.w 1c99a <counterx_old>,d0
    ced8:	|         sub.w d0,d1
    ceda:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cede:	|         cmpi.w #128,10(sp)
    cee4:	|     /-- blt.s cefc <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cee6:	|     |   move.w #1,1c8b8 <input+0x4>
            counterx_diff -= 256;    
    ceee:	|     |   move.w 10(sp),d0
    cef2:	|     |   addi.w #-256,d0
    cef6:	|     |   move.w d0,10(sp)
    cefa:	|  /--|-- bra.s cf28 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cefc:	|  |  \-> cmpi.w #-129,10(sp)
    cf02:	|  |  /-- bgt.s cf1a <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf04:	|  |  |   move.w 10(sp),d0
    cf08:	|  |  |   addi.w #256,d0
    cf0c:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cf10:	|  |  |   move.w #1,1c8b8 <input+0x4>
    cf18:	|  +--|-- bra.s cf28 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cf1a:	|  |  \-> tst.w 10(sp)
    cf1e:	|  +----- beq.s cf28 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cf20:	|  |      move.w #1,1c8b8 <input+0x4>
        }

        input.mouseX += counterx_diff;
    cf28:	|  \----> move.l 1c8be <input+0xa>,d0
    cf2e:	|         movea.w 10(sp),a0
    cf32:	|         add.l a0,d0
    cf34:	|         move.l d0,1c8be <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cf3a:	|         move.l 1c8be <input+0xa>,d1
    cf40:	|         move.l 1c856 <winWidth>,d0
    cf46:	|         cmp.l d1,d0
    cf48:	|     /-- bge.s cf58 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cf4a:	|     |   move.l 1c856 <winWidth>,d0
    cf50:	|     |   move.l d0,1c8be <input+0xa>
    cf56:	|  /--|-- bra.s cf66 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cf58:	|  |  \-> move.l 1c8be <input+0xa>,d0
    cf5e:	|  +----- bpl.s cf66 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cf60:	|  |      clr.l 1c8be <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cf66:	|  \----> clr.w d0
    cf68:	|         move.b (sp),d0
    cf6a:	|         move.w d0,1c99a <counterx_old>
    }    

    if(countery_new)
    cf70:	\-------> tst.b 1(sp)
    cf74:	/-------- beq.w d01e <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cf78:	|         clr.w d1
    cf7a:	|         move.b 1(sp),d1
    cf7e:	|         move.w 1c99c <countery_old>,d0
    cf84:	|         sub.w d0,d1
    cf86:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cf8a:	|         cmpi.w #128,8(sp)
    cf90:	|     /-- blt.s cfa8 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cf92:	|     |   move.w #1,1c8b8 <input+0x4>
            countery_diff -= 256;    
    cf9a:	|     |   move.w 8(sp),d0
    cf9e:	|     |   addi.w #-256,d0
    cfa2:	|     |   move.w d0,8(sp)
    cfa6:	|  /--|-- bra.s cfd4 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cfa8:	|  |  \-> cmpi.w #-129,8(sp)
    cfae:	|  |  /-- bgt.s cfc6 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cfb0:	|  |  |   move.w #1,1c8b8 <input+0x4>
            countery_diff += 256;
    cfb8:	|  |  |   move.w 8(sp),d0
    cfbc:	|  |  |   addi.w #256,d0
    cfc0:	|  |  |   move.w d0,8(sp)
    cfc4:	|  +--|-- bra.s cfd4 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cfc6:	|  |  \-> tst.w 8(sp)
    cfca:	|  +----- beq.s cfd4 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cfcc:	|  |      move.w #1,1c8b8 <input+0x4>
        }

        input.mouseY += countery_diff;
    cfd4:	|  \----> move.l 1c8c2 <input+0xe>,d0
    cfda:	|         movea.w 8(sp),a0
    cfde:	|         add.l a0,d0
    cfe0:	|         move.l d0,1c8c2 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cfe6:	|         move.l 1c8c2 <input+0xe>,d1
    cfec:	|         move.l 1c85a <winHeight>,d0
    cff2:	|         cmp.l d1,d0
    cff4:	|     /-- bge.s d004 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cff6:	|     |   move.l 1c85a <winHeight>,d0
    cffc:	|     |   move.l d0,1c8c2 <input+0xe>
    d002:	|  /--|-- bra.s d012 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d004:	|  |  \-> move.l 1c8c2 <input+0xe>,d0
    d00a:	|  +----- bpl.s d012 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d00c:	|  |      clr.l 1c8c2 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d012:	|  \----> clr.w d0
    d014:	|         move.b 1(sp),d0
    d018:	|         move.w d0,1c99c <countery_old>
    } 

    input.leftRelease = FALSE;
    d01e:	\-------> clr.w 1c8ba <input+0x6>
    input.rightRelease = FALSE;
    d024:	          clr.w 1c8bc <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d02a:	          move.w 1c8b4 <input>,d0
    d030:	      /-- beq.s d056 <CsiCheckInput+0x1ba>
    d032:	      |   movea.l #12574721,a0
    d038:	      |   move.b (a0),d0
    d03a:	      |   move.b d0,d0
    d03c:	      |   andi.l #255,d0
    d042:	      |   moveq #64,d1
    d044:	      |   and.l d1,d0
    d046:	      +-- beq.s d056 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d048:	      |   clr.w 1c8b4 <input>
        input.leftRelease = TRUE;
    d04e:	      |   move.w #1,1c8ba <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d056:	      \-> move.w 1c8b6 <input+0x2>,d0
    d05c:	      /-- beq.s d084 <CsiCheckInput+0x1e8>
    d05e:	      |   movea.l #14675990,a0
    d064:	      |   move.w (a0),d0
    d066:	      |   move.w d0,d0
    d068:	      |   andi.l #65535,d0
    d06e:	      |   andi.l #1024,d0
    d074:	      +-- beq.s d084 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d076:	      |   clr.w 1c8b6 <input+0x2>
        input.rightRelease = TRUE;
    d07c:	      |   move.w #1,1c8bc <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d084:	      \-> movea.l #12574721,a0
    d08a:	          move.b (a0),d0
    d08c:	          move.b d0,d0
    d08e:	          andi.l #255,d0
    d094:	          moveq #64,d1
    d096:	          and.l d1,d0
    d098:	      /-- bne.s d0a2 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d09a:	      |   move.w #1,1c8b4 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d0a2:	      \-> movea.l #14675990,a0
    d0a8:	          move.w (a0),d0
    d0aa:	          move.w d0,d0
    d0ac:	          andi.l #65535,d0
    d0b2:	          andi.l #1024,d0
    d0b8:	      /-- bne.s d0c2 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d0ba:	      |   move.w #1,1c8b6 <input+0x2>
    }

    d0c2:	      \-> nop
    d0c4:	          lea 12(sp),sp
    d0c8:	          rts

0000d0ca <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d0ca:	moveq #0,d0
}
    d0cc:	rts

0000d0ce <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d0ce:	nop
    d0d0:	rts

0000d0d2 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d0d2:	nop
    d0d4:	rts

0000d0d6 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d0d6:	moveq #1,d0
}
    d0d8:	rts

0000d0da <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d0da:	nop
    d0dc:	rts

0000d0de <saveSounds>:

void saveSounds (BPTR fp) {
    d0de:	lea -12(sp),sp
    d0e2:	move.l a6,-(sp)
    d0e4:	move.l d2,-(sp)
	FPutC (fp,0);
    d0e6:	move.l 24(sp),16(sp)
    d0ec:	clr.l 12(sp)
    d0f0:	move.l 1c90a <DOSBase>,d0
    d0f6:	movea.l d0,a6
    d0f8:	move.l 16(sp),d1
    d0fc:	move.l 12(sp),d2
    d100:	jsr -312(a6)
    d104:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d108:	move.l 1c29c <defSoundVol>,d0
    d10e:	move.l 24(sp),-(sp)
    d112:	move.l d0,-(sp)
    d114:	jsr 8d0 <put2bytes>
    d11a:	addq.l #8,sp
	put2bytes (defVol, fp);
    d11c:	move.l 1c298 <defVol>,d0
    d122:	move.l 24(sp),-(sp)
    d126:	move.l d0,-(sp)
    d128:	jsr 8d0 <put2bytes>
    d12e:	addq.l #8,sp
}
    d130:	nop
    d132:	move.l (sp)+,d2
    d134:	movea.l (sp)+,a6
    d136:	lea 12(sp),sp
    d13a:	rts

0000d13c <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d13c:	move.l 4(sp),1c298 <defVol>
}
    d144:	nop
    d146:	rts

0000d148 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d148:	move.l 4(sp),1c29c <defSoundVol>
}
    d150:	nop
    d152:	rts

0000d154 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d154:	nop
    d156:	rts

0000d158 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d158:	nop
    d15a:	rts

0000d15c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d15c:	nop
    d15e:	rts

0000d160 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d160:	subq.l #4,sp
    d162:	move.l 12(sp),d0
    d166:	move.w d0,d0
    d168:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d16c:	moveq #1,d0
}
    d16e:	addq.l #4,sp
    d170:	rts

0000d172 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d172:	nop
    d174:	rts

0000d176 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d176:	move.l 16(sp),-(sp)
    d17a:	move.l 16(sp),-(sp)
    d17e:	jsr e0e <CstBlankScreen>
    d184:	addq.l #8,sp
}
    d186:	nop
    d188:	rts

0000d18a <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d18a:	pea 19379 <PutChar+0x1723>
    d190:	jsr 171b4 <KPrintF>
    d196:	addq.l #4,sp
}
    d198:	nop
    d19a:	rts

0000d19c <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d19c:	movea.l 8(sp),a1
    d1a0:	movea.l 12(sp),a0
    d1a4:	move.l 8(sp),d1
    d1a8:	move.l 4(sp),d0
    d1ac:	move.l a1,-(sp)
    d1ae:	move.l a0,-(sp)
    d1b0:	move.l d1,-(sp)
    d1b2:	move.l d0,-(sp)
    d1b4:	jsr 3d62 <drawLine>
    d1ba:	lea 16(sp),sp
}
    d1be:	nop
    d1c0:	rts

0000d1c2 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d1c2:	movea.l 12(sp),a1
    d1c6:	movea.l 4(sp),a0
    d1ca:	move.l 8(sp),d1
    d1ce:	move.l 4(sp),d0
    d1d2:	move.l a1,-(sp)
    d1d4:	move.l a0,-(sp)
    d1d6:	move.l d1,-(sp)
    d1d8:	move.l d0,-(sp)
    d1da:	jsr 3d62 <drawLine>
    d1e0:	lea 16(sp),sp
}
    d1e4:	nop
    d1e6:	rts

0000d1e8 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d1e8:	pea 193b2 <PutChar+0x175c>
    d1ee:	jsr 171b4 <KPrintF>
    d1f4:	addq.l #4,sp
}
    d1f6:	nop
    d1f8:	rts

0000d1fa <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d1fa:	jsr 1c74 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d200:	pea 1c9a6 <backdropTextureName>
    d206:	pea 1 <_start+0x1>
    d20a:	jsr 3ee4 <deleteTextures>
    d210:	addq.l #8,sp
	backdropTextureName = 0;
    d212:	clr.l 1c9a6 <backdropTextureName>
	backdropExists = FALSE;
    d218:	clr.w 1c9aa <backdropExists>
}
    d21e:	nop
    d220:	rts

0000d222 <killParallax>:

void killParallax () {
    d222:	          lea -12(sp),sp
    d226:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d228:	   /----- bra.s d294 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d22a:	/--|----> move.l 1c9ac <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d232:	|  |      movea.l 12(sp),a0
    d236:	|  |      move.l 42(a0),d0
    d23a:	|  |      move.l d0,1c9ac <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d240:	|  |      move.l 12(sp),d0
    d244:	|  |      addq.l #4,d0
    d246:	|  |      move.l d0,-(sp)
    d248:	|  |      pea 1 <_start+0x1>
    d24c:	|  |      jsr 3ee4 <deleteTextures>
    d252:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d254:	|  |      movea.l 12(sp),a0
    d258:	|  |      move.l (a0),d0
    d25a:	|  |  /-- beq.s d274 <killParallax+0x52>
    d25c:	|  |  |   movea.l 12(sp),a0
    d260:	|  |  |   move.l (a0),8(sp)
    d264:	|  |  |   move.l 1c902 <SysBase>,d0
    d26a:	|  |  |   movea.l d0,a6
    d26c:	|  |  |   movea.l 8(sp),a1
    d270:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d274:	|  |  \-> tst.l 12(sp)
    d278:	|  |  /-- beq.s d290 <killParallax+0x6e>
    d27a:	|  |  |   move.l 12(sp),4(sp)
    d280:	|  |  |   move.l 1c902 <SysBase>,d0
    d286:	|  |  |   movea.l d0,a6
    d288:	|  |  |   movea.l 4(sp),a1
    d28c:	|  |  |   jsr -690(a6)
		k = NULL;
    d290:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d294:	|  \----> move.l 1c9ac <parallaxStuff>,d0
    d29a:	\-------- bne.s d22a <killParallax+0x8>
	}
}
    d29c:	          nop
    d29e:	          nop
    d2a0:	          movea.l (sp)+,a6
    d2a2:	          lea 12(sp),sp
    d2a6:	          rts

0000d2a8 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d2a8:	       move.l 4(sp),-(sp)
    d2ac:	       jsr 6c76 <openFileFromNum>
    d2b2:	       addq.l #4,sp
    d2b4:	       tst.l d0
    d2b6:	   /-- bne.s d2c8 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d2b8:	   |   pea 193d3 <PutChar+0x177d>
    d2be:	   |   jsr 171b4 <KPrintF>
    d2c4:	   |   addq.l #4,sp
		return;
    d2c6:	/--|-- bra.s d2e8 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d2c8:	|  \-> move.l 1c8ea <bigDataFile>,d0
    d2ce:	|      move.l 12(sp),-(sp)
    d2d2:	|      move.l 12(sp),-(sp)
    d2d6:	|      move.l d0,-(sp)
    d2d8:	|      jsr 1f22 <CstLoadBackdrop>
    d2de:	|      lea 12(sp),sp
	finishAccess ();
    d2e2:	|      jsr 6b6e <finishAccess>
	
}
    d2e8:	\----> rts

0000d2ea <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d2ea:	subq.l #8,sp
    d2ec:	movea.l 12(sp),a0
    d2f0:	move.l 16(sp),d1
    d2f4:	move.l 20(sp),d0
    d2f8:	movea.w a0,a0
    d2fa:	move.w a0,6(sp)
    d2fe:	move.w d1,d1
    d300:	move.w d1,4(sp)
    d304:	move.w d0,d0
    d306:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d30a:	pea 19422 <PutChar+0x17cc>
    d310:	jsr 171b4 <KPrintF>
    d316:	addq.l #4,sp

}
    d318:	nop
    d31a:	addq.l #8,sp
    d31c:	rts

0000d31e <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d31e:	pea 19445 <PutChar+0x17ef>
    d324:	jsr 171b4 <KPrintF>
    d32a:	addq.l #4,sp
}
    d32c:	nop
    d32e:	rts

0000d330 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d330:	pea 1c9b0 <snapshotTextureName>
    d336:	pea 1 <_start+0x1>
    d33a:	jsr 3ee4 <deleteTextures>
    d340:	addq.l #8,sp
	snapshotTextureName = 0;
    d342:	clr.l 1c9b0 <snapshotTextureName>
}
    d348:	nop
    d34a:	rts

0000d34c <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d34c:	clr.l 1c9bc <cameraX>
	cameraY = 0;
    d352:	clr.l 1c9c0 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d358:	move.l 1c9a2 <sceneHeight>,d0
    d35e:	move.l d0,d1
    d360:	move.l 1c99e <sceneWidth>,d0
    d366:	move.l d1,-(sp)
    d368:	move.l d0,-(sp)
    d36a:	jsr 3868 <CstReserveBackdrop>
    d370:	addq.l #8,sp
}
    d372:	rts

0000d374 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d374:	jsr d1fa <killBackDrop>
	killParallax ();
    d37a:	jsr d222 <killParallax>
	killZBuffer ();
    d380:	jsr 8618 <killZBuffer>
	sceneWidth = x;
    d386:	move.l 4(sp),d0
    d38a:	move.l d0,1c99e <sceneWidth>
	sceneHeight = y;
    d390:	move.l 8(sp),d0
    d394:	move.l d0,1c9a2 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d39a:	pea 1947e <PutChar+0x1828>
    d3a0:	jsr 171b4 <KPrintF>
    d3a6:	addq.l #4,sp
	return reserveBackdrop();
    d3a8:	jsr d34c <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d3ae:	rts

0000d3b0 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d3b0:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d3b2:	move.l 12(sp),-(sp)
    d3b6:	jsr 6bc <get2bytes>
    d3bc:	addq.l #4,sp
    d3be:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d3c2:	move.l 12(sp),-(sp)
    d3c6:	jsr 6bc <get2bytes>
    d3cc:	addq.l #4,sp
    d3ce:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d3d0:	moveq #1,d0
}
    d3d2:	addq.l #8,sp
    d3d4:	rts

0000d3d6 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d3d6:	   /-> lea -12(sp),sp
    d3da:	   |   move.l a6,-(sp)
    d3dc:	   |   move.l d2,-(sp)
	if (me) {
    d3de:	   |   tst.l 24(sp)
    d3e2:	/--|-- beq.w d478 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d3e6:	|  |   movea.l 24(sp),a0
    d3ea:	|  |   move.l 42(a0),d0
    d3ee:	|  |   move.l 28(sp),-(sp)
    d3f2:	|  |   move.l d0,-(sp)
    d3f4:	|  \-- jsr d3d6 <saveParallaxRecursive>(pc)
    d3f8:	|      addq.l #8,sp
		FPutC (fp, 1);
    d3fa:	|      move.l 28(sp),16(sp)
    d400:	|      moveq #1,d0
    d402:	|      move.l d0,12(sp)
    d406:	|      move.l 1c90a <DOSBase>,d0
    d40c:	|      movea.l d0,a6
    d40e:	|      move.l 16(sp),d1
    d412:	|      move.l 12(sp),d2
    d416:	|      jsr -312(a6)
    d41a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d41e:	|      movea.l 24(sp),a0
    d422:	|      move.w 28(a0),d0
    d426:	|      move.w d0,d0
    d428:	|      andi.l #65535,d0
    d42e:	|      move.l 28(sp),-(sp)
    d432:	|      move.l d0,-(sp)
    d434:	|      jsr 8d0 <put2bytes>
    d43a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d43c:	|      movea.l 24(sp),a0
    d440:	|      move.w 30(a0),d0
    d444:	|      move.w d0,d0
    d446:	|      andi.l #65535,d0
    d44c:	|      move.l 28(sp),-(sp)
    d450:	|      move.l d0,-(sp)
    d452:	|      jsr 8d0 <put2bytes>
    d458:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d45a:	|      movea.l 24(sp),a0
    d45e:	|      move.w 32(a0),d0
    d462:	|      move.w d0,d0
    d464:	|      andi.l #65535,d0
    d46a:	|      move.l 28(sp),-(sp)
    d46e:	|      move.l d0,-(sp)
    d470:	|      jsr 8d0 <put2bytes>
    d476:	|      addq.l #8,sp
	}
}
    d478:	\----> nop
    d47a:	       move.l (sp)+,d2
    d47c:	       movea.l (sp)+,a6
    d47e:	       lea 12(sp),sp
    d482:	       rts

0000d484 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d484:	pea 194a5 <PutChar+0x184f>
    d48a:	jsr 171b4 <KPrintF>
    d490:	addq.l #4,sp
	return TRUE;
    d492:	moveq #1,d0
    d494:	rts

0000d496 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d496:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d498:	             move.l 1c9b4 <allObjectTypes>,(sp)

	while (huntType) {
    d49e:	      /----- bra.s d4b6 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d4a0:	   /--|----> movea.l (sp),a0
    d4a2:	   |  |      move.l 4(a0),d0
    d4a6:	   |  |      cmp.l 8(sp),d0
    d4aa:	   |  |  /-- bne.s d4b0 <findObjectType+0x1a>
    d4ac:	   |  |  |   move.l (sp),d0
    d4ae:	/--|--|--|-- bra.s d4c6 <findObjectType+0x30>
		huntType = huntType -> next;
    d4b0:	|  |  |  \-> movea.l (sp),a0
    d4b2:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d4b6:	|  |  \----> tst.l (sp)
    d4b8:	|  \-------- bne.s d4a0 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d4ba:	|            move.l 8(sp),-(sp)
    d4be:	|            jsr d586 <loadObjectType>
    d4c4:	|            addq.l #4,sp
}
    d4c6:	\----------> addq.l #4,sp
    d4c8:	             rts

0000d4ca <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d4ca:	             lea -12(sp),sp
	int i, num = 0;
    d4ce:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d4d2:	             move.l 20(sp),-(sp)
    d4d6:	             jsr d496 <findObjectType>
    d4dc:	             addq.l #4,sp
    d4de:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d4e0:	             clr.l 8(sp)
    d4e4:	   /-------- bra.s d51a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d4e6:	/--|-------> movea.l (sp),a0
    d4e8:	|  |         move.l 38(a0),d1
    d4ec:	|  |         move.l 8(sp),d0
    d4f0:	|  |         lsl.l #3,d0
    d4f2:	|  |         movea.l d1,a0
    d4f4:	|  |         adda.l d0,a0
    d4f6:	|  |         move.l (a0),d0
    d4f8:	|  |         cmp.l 16(sp),d0
    d4fc:	|  |  /----- bne.s d516 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d4fe:	|  |  |      movea.l (sp),a0
    d500:	|  |  |      move.l 38(a0),d1
    d504:	|  |  |      move.l 8(sp),d0
    d508:	|  |  |      lsl.l #3,d0
    d50a:	|  |  |      movea.l d1,a0
    d50c:	|  |  |      adda.l d0,a0
    d50e:	|  |  |      move.l 4(a0),4(sp)
			break;
    d514:	|  |  |  /-- bra.s d526 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d516:	|  |  \--|-> addq.l #1,8(sp)
    d51a:	|  \-----|-> movea.l (sp),a0
    d51c:	|        |   move.l 16(a0),d0
    d520:	|        |   cmp.l 8(sp),d0
    d524:	\--------|-- bgt.s d4e6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d526:	         \-> move.l 4(sp),d0
}
    d52a:	             lea 12(sp),sp
    d52e:	             rts

0000d530 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d530:	moveq #1,d0
}
    d532:	rts

0000d534 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d534:	subq.l #8,sp
    d536:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d538:	move.l 16(sp),-(sp)
    d53c:	jsr 6bc <get2bytes>
    d542:	addq.l #4,sp
    d544:	move.l d0,-(sp)
    d546:	jsr d586 <loadObjectType>
    d54c:	addq.l #4,sp
    d54e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d552:	movea.l 8(sp),a0
    d556:	move.l (a0),4(sp)
    d55a:	move.l 1c902 <SysBase>,d0
    d560:	movea.l d0,a6
    d562:	movea.l 4(sp),a1
    d566:	jsr -690(a6)
	r -> screenName = readString (fp);
    d56a:	move.l 16(sp),-(sp)
    d56e:	jsr b02 <readString>
    d574:	addq.l #4,sp
    d576:	movea.l 8(sp),a0
    d57a:	move.l d0,(a0)
	return r;
    d57c:	move.l 8(sp),d0
}
    d580:	movea.l (sp)+,a6
    d582:	addq.l #8,sp
    d584:	rts

0000d586 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d586:	          lea -84(sp),sp
    d58a:	          move.l a6,-(sp)
    d58c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d58e:	          moveq #42,d0
    d590:	          move.l d0,84(sp)
    d594:	          clr.l 80(sp)
    d598:	          move.l 1c902 <SysBase>,d0
    d59e:	          movea.l d0,a6
    d5a0:	          move.l 84(sp),d0
    d5a4:	          move.l 80(sp),d1
    d5a8:	          jsr -684(a6)
    d5ac:	          move.l d0,76(sp)
    d5b0:	          move.l 76(sp),d0
    d5b4:	          move.l d0,72(sp)

    if (newType) {
    d5b8:	/-------- beq.w d832 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d5bc:	|         move.l 96(sp),-(sp)
    d5c0:	|         jsr 6d3e <openObjectSlice>
    d5c6:	|         addq.l #4,sp
    d5c8:	|         tst.w d0
    d5ca:	+-------- beq.w d832 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d5ce:	|         move.l 1c8ea <bigDataFile>,d0
    d5d4:	|         move.l d0,-(sp)
    d5d6:	|         jsr 6bc <get2bytes>
    d5dc:	|         addq.l #4,sp
    d5de:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d5e2:	|         move.l 1c8ea <bigDataFile>,64(sp)
    d5ea:	|         move.l 1c90a <DOSBase>,d0
    d5f0:	|         movea.l d0,a6
    d5f2:	|         move.l 64(sp),d1
    d5f6:	|         jsr -306(a6)
    d5fa:	|         move.l d0,60(sp)
    d5fe:	|         move.l 60(sp),d0
    d602:	|         move.l d0,d0
    d604:	|         movea.l 72(sp),a0
    d608:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d60c:	|         move.l 1c8ea <bigDataFile>,56(sp)
    d614:	|         move.l 1c90a <DOSBase>,d0
    d61a:	|         movea.l d0,a6
    d61c:	|         move.l 56(sp),d1
    d620:	|         jsr -306(a6)
    d624:	|         move.l d0,52(sp)
    d628:	|         move.l 52(sp),d0
    d62c:	|         move.l d0,d0
    d62e:	|         movea.l 72(sp),a0
    d632:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d636:	|         move.l 1c8ea <bigDataFile>,48(sp)
    d63e:	|         move.l 1c90a <DOSBase>,d0
    d644:	|         movea.l d0,a6
    d646:	|         move.l 48(sp),d1
    d64a:	|         jsr -306(a6)
    d64e:	|         move.l d0,44(sp)
    d652:	|         move.l 44(sp),d0
    d656:	|         move.l d0,d0
    d658:	|         movea.l 72(sp),a0
    d65c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d660:	|         move.l 1c8ea <bigDataFile>,40(sp)
    d668:	|         move.l 1c90a <DOSBase>,d0
    d66e:	|         movea.l d0,a6
    d670:	|         move.l 40(sp),d1
    d674:	|         jsr -306(a6)
    d678:	|         move.l d0,36(sp)
    d67c:	|         move.l 36(sp),d0
    d680:	|         movea.l 72(sp),a0
    d684:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d688:	|         move.l 1c8ea <bigDataFile>,32(sp)
    d690:	|         move.l 1c90a <DOSBase>,d0
    d696:	|         movea.l d0,a6
    d698:	|         move.l 32(sp),d1
    d69c:	|         jsr -306(a6)
    d6a0:	|         move.l d0,28(sp)
    d6a4:	|         move.l 28(sp),d0
    d6a8:	|         movea.l 72(sp),a0
    d6ac:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d6b0:	|         move.l 1c8ea <bigDataFile>,d0
    d6b6:	|         move.l d0,-(sp)
    d6b8:	|         jsr 718 <get4bytes>
    d6be:	|         addq.l #4,sp
    d6c0:	|         movea.l 72(sp),a0
    d6c4:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d6c8:	|         move.l 1c8ea <bigDataFile>,d0
    d6ce:	|         move.l d0,-(sp)
    d6d0:	|         jsr 6bc <get2bytes>
    d6d6:	|         addq.l #4,sp
    d6d8:	|         movea.l 72(sp),a0
    d6dc:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d6e0:	|         move.l 1c8ea <bigDataFile>,24(sp)
    d6e8:	|         move.l 1c90a <DOSBase>,d0
    d6ee:	|         movea.l d0,a6
    d6f0:	|         move.l 24(sp),d1
    d6f4:	|         jsr -306(a6)
    d6f8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d6fc:	|         move.l 1c8ea <bigDataFile>,d0
    d702:	|         move.l d0,-(sp)
    d704:	|         jsr 7d8 <getFloat>
    d70a:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d70c:	|         move.l 1c8ea <bigDataFile>,d0
    d712:	|         move.l d0,-(sp)
    d714:	|         jsr 7d8 <getFloat>
    d71a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d71c:	|         move.l 1c8ea <bigDataFile>,d0
    d722:	|         move.l d0,-(sp)
    d724:	|         jsr 6bc <get2bytes>
    d72a:	|         addq.l #4,sp
    d72c:	|         move.l d0,d0
    d72e:	|         movea.l 72(sp),a0
    d732:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d736:	|         move.l 1c8ea <bigDataFile>,d0
    d73c:	|         move.l d0,-(sp)
    d73e:	|         jsr 6bc <get2bytes>
    d744:	|         addq.l #4,sp
    d746:	|         movea.l 72(sp),a0
    d74a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d74e:	|         movea.l 72(sp),a0
    d752:	|         move.l 16(a0),d0
    d756:	|  /----- beq.s d788 <loadObjectType+0x202>
    d758:	|  |      movea.l 72(sp),a0
    d75c:	|  |      move.l 16(a0),d0
    d760:	|  |      lsl.l #3,d0
    d762:	|  |      move.l d0,16(sp)
    d766:	|  |      clr.l 12(sp)
    d76a:	|  |      move.l 1c902 <SysBase>,d0
    d770:	|  |      movea.l d0,a6
    d772:	|  |      move.l 16(sp),d0
    d776:	|  |      move.l 12(sp),d1
    d77a:	|  |      jsr -684(a6)
    d77e:	|  |      move.l d0,8(sp)
    d782:	|  |      move.l 8(sp),d0
    d786:	|  |  /-- bra.s d78a <loadObjectType+0x204>
    d788:	|  \--|-> moveq #0,d0
    d78a:	|     \-> movea.l 72(sp),a0
    d78e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d792:	|         clr.l 88(sp)
    d796:	|     /-- bra.s d7e6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d798:	|  /--|-> move.l 1c8ea <bigDataFile>,d1
    d79e:	|  |  |   movea.l 72(sp),a0
    d7a2:	|  |  |   movea.l 38(a0),a0
    d7a6:	|  |  |   move.l 88(sp),d0
    d7aa:	|  |  |   lsl.l #3,d0
    d7ac:	|  |  |   lea (0,a0,d0.l),a2
    d7b0:	|  |  |   move.l d1,-(sp)
    d7b2:	|  |  |   jsr 6bc <get2bytes>
    d7b8:	|  |  |   addq.l #4,sp
    d7ba:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d7bc:	|  |  |   move.l 1c8ea <bigDataFile>,d1
    d7c2:	|  |  |   movea.l 72(sp),a0
    d7c6:	|  |  |   movea.l 38(a0),a0
    d7ca:	|  |  |   move.l 88(sp),d0
    d7ce:	|  |  |   lsl.l #3,d0
    d7d0:	|  |  |   lea (0,a0,d0.l),a2
    d7d4:	|  |  |   move.l d1,-(sp)
    d7d6:	|  |  |   jsr 6bc <get2bytes>
    d7dc:	|  |  |   addq.l #4,sp
    d7de:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d7e2:	|  |  |   addq.l #1,88(sp)
    d7e6:	|  |  \-> movea.l 72(sp),a0
    d7ea:	|  |      move.l 16(a0),d0
    d7ee:	|  |      cmp.l 88(sp),d0
    d7f2:	|  \----- bgt.s d798 <loadObjectType+0x212>
            }
            finishAccess();
    d7f4:	|         jsr 6b6e <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d7fa:	|         move.l 68(sp),-(sp)
    d7fe:	|         jsr 6b78 <getNumberedString>
    d804:	|         addq.l #4,sp
    d806:	|         movea.l 72(sp),a0
    d80a:	|         move.l d0,(a0)
            newType->objectNum = i;
    d80c:	|         movea.l 72(sp),a0
    d810:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d816:	|         move.l 1c9b4 <allObjectTypes>,d0
    d81c:	|         movea.l 72(sp),a0
    d820:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d824:	|         move.l 72(sp),1c9b4 <allObjectTypes>
            return newType;
    d82c:	|         move.l 72(sp),d0
    d830:	|     /-- bra.s d834 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d832:	\-----|-> moveq #0,d0
}
    d834:	      \-> movea.l (sp)+,a2
    d836:	          movea.l (sp)+,a6
    d838:	          lea 84(sp),sp
    d83c:	          rts

0000d83e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d83e:	             lea -16(sp),sp
    d842:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d844:	             move.l #117172,16(sp)

	while (* huntRegion) {
    d84c:	   /-------- bra.s d8c0 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d84e:	/--|-------> movea.l 16(sp),a0
    d852:	|  |         move.l (a0),d0
    d854:	|  |         cmp.l 24(sp),d0
    d858:	|  |  /----- bne.s d8b2 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d85a:	|  |  |      movea.l 24(sp),a0
    d85e:	|  |  |      move.l 8(a0),d0
    d862:	|  |  |      movea.l 16(sp),a0
    d866:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d868:	|  |  |      movea.l 24(sp),a0
    d86c:	|  |  |      move.l 38(a0),12(sp)
    d872:	|  |  |      move.l 1c902 <SysBase>,d0
    d878:	|  |  |      movea.l d0,a6
    d87a:	|  |  |      movea.l 12(sp),a1
    d87e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d882:	|  |  |      movea.l 24(sp),a0
    d886:	|  |  |      move.l (a0),8(sp)
    d88a:	|  |  |      move.l 1c902 <SysBase>,d0
    d890:	|  |  |      movea.l d0,a6
    d892:	|  |  |      movea.l 8(sp),a1
    d896:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d89a:	|  |  |      move.l 24(sp),4(sp)
    d8a0:	|  |  |      move.l 1c902 <SysBase>,d0
    d8a6:	|  |  |      movea.l d0,a6
    d8a8:	|  |  |      movea.l 4(sp),a1
    d8ac:	|  |  |      jsr -690(a6)
			return;
    d8b0:	|  |  |  /-- bra.s d8d6 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d8b2:	|  |  \--|-> movea.l 16(sp),a0
    d8b6:	|  |     |   move.l (a0),d0
    d8b8:	|  |     |   move.l d0,d1
    d8ba:	|  |     |   addq.l #8,d1
    d8bc:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d8c0:	|  \-----|-> movea.l 16(sp),a0
    d8c4:	|        |   move.l (a0),d0
    d8c6:	\--------|-- bne.s d84e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d8c8:	         |   pea 194cc <PutChar+0x1876>
    d8ce:	         |   jsr 171b4 <KPrintF>
    d8d4:	         |   addq.l #4,sp
}
    d8d6:	         \-> movea.l (sp)+,a6
    d8d8:	             lea 16(sp),sp
    d8dc:	             rts

0000d8de <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d8de:	movea.l 4(sp),a0
    d8e2:	move.l 4(a0),d0
    d8e6:	move.l 8(sp),-(sp)
    d8ea:	move.l d0,-(sp)
    d8ec:	jsr 8d0 <put2bytes>
    d8f2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d8f4:	movea.l 4(sp),a0
    d8f8:	move.l (a0),d0
    d8fa:	move.l 8(sp),-(sp)
    d8fe:	move.l d0,-(sp)
    d900:	jsr bd8 <writeString>
    d906:	addq.l #8,sp
    d908:	nop
    d90a:	rts

0000d90c <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d90c:	                         lea -112(sp),sp
    d910:	                         move.l a6,-(sp)
    d912:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d914:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d918:	                         move.w 1c9ba <saveEncoding>,d0
    d91e:	                  /----- beq.s d928 <fileToStack+0x1c>
    d920:	                  |      move.l #103666,d0
    d926:	                  |  /-- bra.s d92e <fileToStack+0x22>
    d928:	                  \--|-> move.l #103692,d0
    d92e:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d932:	                         move.l 124(sp),112(sp)
    d938:	                         move.l #1005,108(sp)
    d940:	                         move.l 1c90a <DOSBase>,d0
    d946:	                         movea.l d0,a6
    d948:	                         move.l 112(sp),d1
    d94c:	                         move.l 108(sp),d2
    d950:	                         jsr -30(a6)
    d954:	                         move.l d0,104(sp)
    d958:	                         move.l 104(sp),d0
    d95c:	                         move.l d0,100(sp)
    if (!fp) {
    d960:	                     /-- bne.s d97a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d962:	                     |   move.l 124(sp),-(sp)
    d966:	                     |   pea 19523 <PutChar+0x18cd>
    d96c:	                     |   jsr 171b4 <KPrintF>
    d972:	                     |   addq.l #8,sp
        return FALSE;
    d974:	                     |   clr.w d0
    d976:	/--------------------|-- bra.w dc70 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d97a:	|                    \-> move.w 1c9ba <saveEncoding>,d0
    d980:	|                        move.l d0,d0
    d982:	|                        move.b d0,1c9b8 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d988:	|                        move.w 1c9ba <saveEncoding>,d0
    d98e:	|                        lsr.w #8,d0
    d990:	|                        move.l d0,d0
    d992:	|                        move.b d0,1c9b9 <encode2>

    while (*checker) {
    d998:	|                 /----- bra.s d9fc <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d99a:	|              /--|----> move.l 100(sp),30(sp)
    d9a0:	|              |  |      move.l 1c90a <DOSBase>,d0
    d9a6:	|              |  |      movea.l d0,a6
    d9a8:	|              |  |      move.l 30(sp),d1
    d9ac:	|              |  |      jsr -306(a6)
    d9b0:	|              |  |      move.l d0,26(sp)
    d9b4:	|              |  |      move.l 26(sp),d1
    d9b8:	|              |  |      movea.l 116(sp),a0
    d9bc:	|              |  |      move.b (a0),d0
    d9be:	|              |  |      ext.w d0
    d9c0:	|              |  |      movea.w d0,a0
    d9c2:	|              |  |      cmpa.l d1,a0
    d9c4:	|              |  |  /-- beq.s d9f8 <fileToStack+0xec>
            Close(fp);
    d9c6:	|              |  |  |   move.l 100(sp),22(sp)
    d9cc:	|              |  |  |   move.l 1c90a <DOSBase>,d0
    d9d2:	|              |  |  |   movea.l d0,a6
    d9d4:	|              |  |  |   move.l 22(sp),d1
    d9d8:	|              |  |  |   jsr -36(a6)
    d9dc:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d9e0:	|              |  |  |   move.l 124(sp),-(sp)
    d9e4:	|              |  |  |   pea 19530 <PutChar+0x18da>
    d9ea:	|              |  |  |   jsr 171b4 <KPrintF>
    d9f0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d9f2:	|              |  |  |   clr.w d0
    d9f4:	+--------------|--|--|-- bra.w dc70 <fileToStack+0x364>
        }
        checker++;
    d9f8:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d9fc:	|              |  \----> movea.l 116(sp),a0
    da00:	|              |         move.b (a0),d0
    da02:	|              \-------- bne.s d99a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da04:	|                        move.w 1c9ba <saveEncoding>,d0
    da0a:	|  /-------------------- beq.s da7e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da0c:	|  |                     move.l 100(sp),-(sp)
    da10:	|  |                     jsr dc7a <readStringEncoded>
    da16:	|  |                     addq.l #4,sp
    da18:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    da1c:	|  |                     pea 19571 <PutChar+0x191b>
    da22:	|  |                     move.l 100(sp),-(sp)
    da26:	|  |                     jsr 13bf8 <strcmp>
    da2c:	|  |                     addq.l #8,sp
    da2e:	|  |                     tst.l d0
    da30:	|  |                 /-- beq.s da64 <fileToStack+0x158>
            Close(fp);
    da32:	|  |                 |   move.l 100(sp),88(sp)
    da38:	|  |                 |   move.l 1c90a <DOSBase>,d0
    da3e:	|  |                 |   movea.l d0,a6
    da40:	|  |                 |   move.l 88(sp),d1
    da44:	|  |                 |   jsr -36(a6)
    da48:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    da4c:	|  |                 |   move.l 124(sp),-(sp)
    da50:	|  |                 |   pea 19580 <PutChar+0x192a>
    da56:	|  |                 |   jsr 171b4 <KPrintF>
    da5c:	|  |                 |   addq.l #8,sp
            return FALSE;
    da5e:	|  |                 |   clr.w d0
    da60:	+--|-----------------|-- bra.w dc70 <fileToStack+0x364>
        }
        FreeVec(checker);
    da64:	|  |                 \-> move.l 96(sp),92(sp)
    da6a:	|  |                     move.l 1c902 <SysBase>,d0
    da70:	|  |                     movea.l d0,a6
    da72:	|  |                     movea.l 92(sp),a1
    da76:	|  |                     jsr -690(a6)
        checker = NULL;
    da7a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    da7e:	|  >-------------------> move.w 1c9ba <saveEncoding>,d0
    da84:	|  |     /-------------- beq.w dbb8 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    da88:	|  |     |               move.l 100(sp),76(sp)
    da8e:	|  |     |               move.l 1c90a <DOSBase>,d0
    da94:	|  |     |               movea.l d0,a6
    da96:	|  |     |               move.l 76(sp),d1
    da9a:	|  |     |               jsr -306(a6)
    da9e:	|  |     |               move.l d0,72(sp)
    daa2:	|  |     |               move.l 72(sp),d0
    daa6:	|  |     |               move.b 1c9b8 <encode1>,d1
    daac:	|  |     |               ext.w d1
    daae:	|  |     |               ext.l d1
    dab0:	|  |     |               move.l d0,d2
    dab2:	|  |     |               eor.l d1,d2
    dab4:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dab8:	|  |     |               moveq #-1,d0
    daba:	|  |     |               cmp.l 68(sp),d0
    dabe:	|  |  /--|-------------- beq.w dc4e <fileToStack+0x342>

            char i = (char) tmp;
    dac2:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dac8:	|  |  |  |               move.b 67(sp),d0
    dacc:	|  |  |  |               ext.w d0
    dace:	|  |  |  |               movea.w d0,a0
    dad0:	|  |  |  |               moveq #2,d2
    dad2:	|  |  |  |               cmp.l a0,d2
    dad4:	|  |  |  |     /-------- beq.s db50 <fileToStack+0x244>
    dad6:	|  |  |  |     |         moveq #2,d0
    dad8:	|  |  |  |     |         cmp.l a0,d0
    dada:	|  |  |  |  /--|-------- blt.w db86 <fileToStack+0x27a>
    dade:	|  |  |  |  |  |         cmpa.w #0,a0
    dae2:	|  |  |  |  |  |     /-- beq.s daee <fileToStack+0x1e2>
    dae4:	|  |  |  |  |  |     |   moveq #1,d2
    dae6:	|  |  |  |  |  |     |   cmp.l a0,d2
    dae8:	|  |  |  |  |  |  /--|-- beq.s db2a <fileToStack+0x21e>
    daea:	|  |  |  |  +--|--|--|-- bra.w db86 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    daee:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    daf2:	|  |  |  |  |  |  |      jsr dc7a <readStringEncoded>
    daf8:	|  |  |  |  |  |  |      addq.l #4,sp
    dafa:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dafe:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db02:	|  |  |  |  |  |  |      lea 14(sp),a0
    db06:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db08:	|  |  |  |  |  |  |      jsr 1496e <makeTextVar>
    db0e:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db10:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db16:	|  |  |  |  |  |  |      move.l 1c902 <SysBase>,d0
    db1c:	|  |  |  |  |  |  |      movea.l d0,a6
    db1e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    db22:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    db26:	|  |  |  |  |  |  |  /-- bra.w dbde <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    db2a:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    db2e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    db34:	|  |  |  |  |  |     |   addq.l #4,sp
    db36:	|  |  |  |  |  |     |   move.l d0,-(sp)
    db38:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    db3c:	|  |  |  |  |  |     |   lea 18(sp),a0
    db40:	|  |  |  |  |  |     |   move.l a0,-(sp)
    db42:	|  |  |  |  |  |     |   jsr 1503e <setVariable>
    db48:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    db4c:	|  |  |  |  |  |     +-- bra.w dbde <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    db50:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    db56:	|  |  |  |  |        |   move.l 1c90a <DOSBase>,d0
    db5c:	|  |  |  |  |        |   movea.l d0,a6
    db5e:	|  |  |  |  |        |   move.l 62(sp),d1
    db62:	|  |  |  |  |        |   jsr -306(a6)
    db66:	|  |  |  |  |        |   move.l d0,58(sp)
    db6a:	|  |  |  |  |        |   move.l 58(sp),d0
    db6e:	|  |  |  |  |        |   move.l d0,-(sp)
    db70:	|  |  |  |  |        |   pea 1 <_start+0x1>
    db74:	|  |  |  |  |        |   lea 18(sp),a0
    db78:	|  |  |  |  |        |   move.l a0,-(sp)
    db7a:	|  |  |  |  |        |   jsr 1503e <setVariable>
    db80:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    db84:	|  |  |  |  |        +-- bra.s dbde <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    db86:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    db8a:	|  |  |  |           |   pea 19602 <PutChar+0x19ac>
    db90:	|  |  |  |           |   jsr 171b4 <KPrintF>
    db96:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    db98:	|  |  |  |           |   move.l 100(sp),46(sp)
    db9e:	|  |  |  |           |   move.l 1c90a <DOSBase>,d0
    dba4:	|  |  |  |           |   movea.l d0,a6
    dba6:	|  |  |  |           |   move.l 46(sp),d1
    dbaa:	|  |  |  |           |   jsr -36(a6)
    dbae:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dbb2:	|  |  |  |           |   clr.w d0
    dbb4:	+--|--|--|-----------|-- bra.w dc70 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dbb8:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dbbc:	|  |  |              |   jsr dd40 <readTextPlain>
    dbc2:	|  |  |              |   addq.l #4,sp
    dbc4:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dbc8:	|  |  |        /-----|-- beq.w dc52 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dbcc:	|  |  |        |     |   move.l 80(sp),-(sp)
    dbd0:	|  |  |        |     |   lea 14(sp),a0
    dbd4:	|  |  |        |     |   move.l a0,-(sp)
    dbd6:	|  |  |        |     |   jsr 1496e <makeTextVar>
    dbdc:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dbde:	|  |  |        |     \-> movea.l 128(sp),a0
    dbe2:	|  |  |        |         move.l (a0),d0
    dbe4:	|  |  |        |  /----- bne.s dc14 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dbe6:	|  |  |        |  |      move.l 128(sp),d0
    dbea:	|  |  |        |  |      move.l d0,-(sp)
    dbec:	|  |  |        |  |      lea 14(sp),a0
    dbf0:	|  |  |        |  |      move.l a0,-(sp)
    dbf2:	|  |  |        |  |      jsr 1400e <addVarToStackQuick>
    dbf8:	|  |  |        |  |      addq.l #8,sp
    dbfa:	|  |  |        |  |      tst.w d0
    dbfc:	|  |  |        |  |  /-- bne.s dc02 <fileToStack+0x2f6>
    dbfe:	|  |  |        |  |  |   clr.w d0
    dc00:	+--|--|--------|--|--|-- bra.s dc70 <fileToStack+0x364>
            sH->last = sH->first;
    dc02:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dc06:	|  |  |        |  |      move.l (a0),d0
    dc08:	|  |  |        |  |      movea.l 128(sp),a0
    dc0c:	|  |  |        |  |      move.l d0,4(a0)
    dc10:	|  +--|--------|--|----- bra.w da7e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc14:	|  |  |        |  \----> movea.l 128(sp),a0
    dc18:	|  |  |        |         move.l 4(a0),d0
    dc1c:	|  |  |        |         addq.l #8,d0
    dc1e:	|  |  |        |         move.l d0,-(sp)
    dc20:	|  |  |        |         lea 14(sp),a0
    dc24:	|  |  |        |         move.l a0,-(sp)
    dc26:	|  |  |        |         jsr 1400e <addVarToStackQuick>
    dc2c:	|  |  |        |         addq.l #8,sp
    dc2e:	|  |  |        |         tst.w d0
    dc30:	|  |  |        |     /-- bne.s dc36 <fileToStack+0x32a>
    dc32:	|  |  |        |     |   clr.w d0
    dc34:	+--|--|--------|-----|-- bra.s dc70 <fileToStack+0x364>
            sH->last = sH->last->next;
    dc36:	|  |  |        |     \-> movea.l 128(sp),a0
    dc3a:	|  |  |        |         movea.l 4(a0),a0
    dc3e:	|  |  |        |         move.l 8(a0),d0
    dc42:	|  |  |        |         movea.l 128(sp),a0
    dc46:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dc4a:	|  \--|--------|-------- bra.w da7e <fileToStack+0x172>
            if (tmp == -1) break;
    dc4e:	|     \--------|-------> nop
    dc50:	|              |     /-- bra.s dc54 <fileToStack+0x348>
            if (!line) break;
    dc52:	|              \-----|-> nop
        }
    }
    Close(fp);
    dc54:	|                    \-> move.l 100(sp),38(sp)
    dc5a:	|                        move.l 1c90a <DOSBase>,d0
    dc60:	|                        movea.l d0,a6
    dc62:	|                        move.l 38(sp),d1
    dc66:	|                        jsr -36(a6)
    dc6a:	|                        move.l d0,34(sp)
    return TRUE;
    dc6e:	|                        moveq #1,d0
}
    dc70:	\----------------------> move.l (sp)+,d2
    dc72:	                         movea.l (sp)+,a6
    dc74:	                         lea 112(sp),sp
    dc78:	                         rts

0000dc7a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dc7a:	          lea -32(sp),sp
    dc7e:	          move.l a6,-(sp)
    dc80:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dc82:	          move.l 44(sp),-(sp)
    dc86:	          jsr 6bc <get2bytes>
    dc8c:	          addq.l #4,sp
    dc8e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dc92:	          move.l 32(sp),d0
    dc96:	          addq.l #1,d0
    dc98:	          move.l d0,28(sp)
    dc9c:	          clr.l 24(sp)
    dca0:	          move.l 1c902 <SysBase>,d0
    dca6:	          movea.l d0,a6
    dca8:	          move.l 28(sp),d0
    dcac:	          move.l 24(sp),d1
    dcb0:	          jsr -684(a6)
    dcb4:	          move.l d0,20(sp)
    dcb8:	          move.l 20(sp),d0
    dcbc:	          move.l d0,16(sp)
    if (!s) return NULL;
    dcc0:	      /-- bne.s dcc6 <readStringEncoded+0x4c>
    dcc2:	      |   moveq #0,d0
    dcc4:	/-----|-- bra.s dd36 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dcc6:	|     \-> clr.l 36(sp)
    dcca:	|     /-- bra.s dd1c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dccc:	|  /--|-> move.l 44(sp),12(sp)
    dcd2:	|  |  |   move.l 1c90a <DOSBase>,d0
    dcd8:	|  |  |   movea.l d0,a6
    dcda:	|  |  |   move.l 12(sp),d1
    dcde:	|  |  |   jsr -306(a6)
    dce2:	|  |  |   move.l d0,8(sp)
    dce6:	|  |  |   move.l 8(sp),d0
    dcea:	|  |  |   move.l d0,d1
    dcec:	|  |  |   move.b 1c9b8 <encode1>,d2
    dcf2:	|  |  |   move.l 36(sp),d0
    dcf6:	|  |  |   movea.l 16(sp),a0
    dcfa:	|  |  |   adda.l d0,a0
    dcfc:	|  |  |   move.b d1,d0
    dcfe:	|  |  |   eor.b d2,d0
    dd00:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd02:	|  |  |   move.b 1c9b8 <encode1>,d0
    dd08:	|  |  |   move.b d0,d1
    dd0a:	|  |  |   move.b 1c9b9 <encode2>,d0
    dd10:	|  |  |   add.b d1,d0
    dd12:	|  |  |   move.b d0,1c9b8 <encode1>
    for (a = 0; a < len; a++) {
    dd18:	|  |  |   addq.l #1,36(sp)
    dd1c:	|  |  \-> move.l 36(sp),d0
    dd20:	|  |      cmp.l 32(sp),d0
    dd24:	|  \----- blt.s dccc <readStringEncoded+0x52>
    }
    s[len] = 0;
    dd26:	|         move.l 32(sp),d0
    dd2a:	|         movea.l 16(sp),a0
    dd2e:	|         adda.l d0,a0
    dd30:	|         clr.b (a0)
    return s;
    dd32:	|         move.l 16(sp),d0
}
    dd36:	\-------> move.l (sp)+,d2
    dd38:	          movea.l (sp)+,a6
    dd3a:	          lea 32(sp),sp
    dd3e:	          rts

0000dd40 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dd40:	             lea -104(sp),sp
    dd44:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dd48:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dd4c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dd52:	             move.l 124(sp),106(sp)
    dd58:	             clr.l 102(sp)
    dd5c:	             clr.l 98(sp)
    dd60:	             move.l 1c90a <DOSBase>,d0
    dd66:	             movea.l d0,a6
    dd68:	             move.l 106(sp),d1
    dd6c:	             move.l 102(sp),d2
    dd70:	             move.l 98(sp),d3
    dd74:	             jsr -66(a6)
    dd78:	             move.l d0,94(sp)
    dd7c:	             move.l 94(sp),d0
    dd80:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dd84:	   /-------- bra.s ddc8 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dd86:	/--|-------> move.l 124(sp),22(sp)
    dd8c:	|  |         move.l 1c90a <DOSBase>,d0
    dd92:	|  |         movea.l d0,a6
    dd94:	|  |         move.l 22(sp),d1
    dd98:	|  |         jsr -306(a6)
    dd9c:	|  |         move.l d0,18(sp)
    dda0:	|  |         move.l 18(sp),d0
    dda4:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dda8:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    ddae:	|  |         cmpi.b #10,17(sp)
    ddb4:	|  |  /----- beq.s ddbe <readTextPlain+0x7e>
    ddb6:	|  |  |      moveq #-1,d0
    ddb8:	|  |  |      cmp.l 110(sp),d0
    ddbc:	|  |  |  /-- bne.s ddc4 <readTextPlain+0x84>
            keepGoing = FALSE;
    ddbe:	|  |  \--|-> clr.w 114(sp)
    ddc2:	|  +-----|-- bra.s ddc8 <readTextPlain+0x88>
        } else {
            stringSize++;
    ddc4:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    ddc8:	|  \-------> tst.w 114(sp)
    ddcc:	\----------- bne.s dd86 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    ddce:	             tst.l 116(sp)
    ddd2:	         /-- bne.s dde2 <readTextPlain+0xa2>
    ddd4:	         |   moveq #-1,d0
    ddd6:	         |   cmp.l 110(sp),d0
    ddda:	         +-- bne.s dde2 <readTextPlain+0xa2>
        return NULL;
    dddc:	         |   moveq #0,d0
    ddde:	      /--|-- bra.w dec8 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dde2:	      |  \-> move.l 124(sp),86(sp)
    dde8:	      |      move.l 90(sp),82(sp)
    ddee:	      |      moveq #-1,d0
    ddf0:	      |      move.l d0,78(sp)
    ddf4:	      |      move.l 1c90a <DOSBase>,d0
    ddfa:	      |      movea.l d0,a6
    ddfc:	      |      move.l 86(sp),d1
    de00:	      |      move.l 82(sp),d2
    de04:	      |      move.l 78(sp),d3
    de08:	      |      jsr -66(a6)
    de0c:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de10:	      |      move.l 116(sp),d0
    de14:	      |      addq.l #1,d0
    de16:	      |      move.l d0,70(sp)
    de1a:	      |      clr.l 66(sp)
    de1e:	      |      move.l 1c902 <SysBase>,d0
    de24:	      |      movea.l d0,a6
    de26:	      |      move.l 70(sp),d0
    de2a:	      |      move.l 66(sp),d1
    de2e:	      |      jsr -684(a6)
    de32:	      |      move.l d0,62(sp)
    de36:	      |      move.l 62(sp),d0
    de3a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    de3e:	      |  /-- bne.s de46 <readTextPlain+0x106>
    de40:	      |  |   moveq #0,d0
    de42:	      +--|-- bra.w dec8 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    de46:	      |  \-> move.l 124(sp),54(sp)
    de4c:	      |      move.l 58(sp),50(sp)
    de52:	      |      moveq #1,d0
    de54:	      |      move.l d0,46(sp)
    de58:	      |      move.l 116(sp),42(sp)
    de5e:	      |      move.l 1c90a <DOSBase>,d0
    de64:	      |      movea.l d0,a6
    de66:	      |      move.l 54(sp),d1
    de6a:	      |      move.l 50(sp),d2
    de6e:	      |      move.l 46(sp),d3
    de72:	      |      move.l 42(sp),d4
    de76:	      |      jsr -324(a6)
    de7a:	      |      move.l d0,38(sp)
    de7e:	      |      move.l 38(sp),d0
    de82:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    de86:	      |      move.l 34(sp),d0
    de8a:	      |      cmp.l 116(sp),d0
    de8e:	      |  /-- beq.s de9e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    de90:	      |  |   pea 19637 <PutChar+0x19e1>
    de96:	      |  |   jsr 171b4 <KPrintF>
    de9c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    de9e:	      |  \-> move.l 124(sp),30(sp)
    dea4:	      |      move.l 1c90a <DOSBase>,d0
    deaa:	      |      movea.l d0,a6
    deac:	      |      move.l 30(sp),d1
    deb0:	      |      jsr -306(a6)
    deb4:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    deb8:	      |      move.l 116(sp),d0
    debc:	      |      movea.l 58(sp),a0
    dec0:	      |      adda.l d0,a0
    dec2:	      |      clr.b (a0)
    }

    return reply;
    dec4:	      |      move.l 58(sp),d0
}
    dec8:	      \----> movem.l (sp)+,d2-d4/a6
    decc:	             lea 104(sp),sp
    ded0:	             rts

0000ded2 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ded2:	                      lea -144(sp),sp
    ded6:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    deda:	                      move.l 160(sp),148(sp)
    dee0:	                      move.l #1006,144(sp)
    dee8:	                      move.l 1c90a <DOSBase>,d0
    deee:	                      movea.l d0,a6
    def0:	                      move.l 148(sp),d1
    def4:	                      move.l 144(sp),d2
    def8:	                      jsr -30(a6)
    defc:	                      move.l d0,140(sp)
    df00:	                      move.l 140(sp),d0
    df04:	                      move.l d0,136(sp)

    if (!fp) {
    df08:	                  /-- bne.s df22 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df0a:	                  |   move.l 160(sp),-(sp)
    df0e:	                  |   pea 19658 <PutChar+0x1a02>
    df14:	                  |   jsr 171b4 <KPrintF>
    df1a:	                  |   addq.l #8,sp
        return FALSE;
    df1c:	                  |   clr.w d0
    df1e:	/-----------------|-- bra.w e1de <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    df22:	|                 \-> movea.l 164(sp),a0
    df26:	|                     movea.l 4(a0),a0
    df2a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    df2e:	|                     move.w 1c9ba <saveEncoding>,d0
    df34:	|                     move.l d0,d0
    df36:	|                     move.b d0,1c9b8 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    df3c:	|                     move.w 1c9ba <saveEncoding>,d0
    df42:	|                     lsr.w #8,d0
    df44:	|                     move.l d0,d0
    df46:	|                     move.b d0,1c9b9 <encode2>

    if (saveEncoding) {
    df4c:	|                     move.w 1c9ba <saveEncoding>,d0
    df52:	|                 /-- beq.s dfa4 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    df54:	|                 |   move.l 136(sp),116(sp)
    df5a:	|                 |   move.l #103666,112(sp)
    df62:	|                 |   moveq #99,d0
    df64:	|                 |   not.b d0
    df66:	|                 |   add.l sp,d0
    df68:	|                 |   addi.l #-144,d0
    df6e:	|                 |   move.l d0,108(sp)
    df72:	|                 |   move.l 1c90a <DOSBase>,d0
    df78:	|                 |   movea.l d0,a6
    df7a:	|                 |   move.l 116(sp),d1
    df7e:	|                 |   move.l 112(sp),d2
    df82:	|                 |   move.l 108(sp),d3
    df86:	|                 |   jsr -354(a6)
    df8a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    df8e:	|                 |   move.l 136(sp),-(sp)
    df92:	|                 |   pea 19571 <PutChar+0x191b>
    df98:	|                 |   jsr e1e8 <writeStringEncoded>
    df9e:	|                 |   addq.l #8,sp
    dfa0:	|  /--------------|-- bra.w e1b6 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dfa4:	|  |              \-> move.l 136(sp),132(sp)
    dfaa:	|  |                  move.l #103692,128(sp)
    dfb2:	|  |                  moveq #99,d1
    dfb4:	|  |                  not.b d1
    dfb6:	|  |                  add.l sp,d1
    dfb8:	|  |                  addi.l #-144,d1
    dfbe:	|  |                  move.l d1,124(sp)
    dfc2:	|  |                  move.l 1c90a <DOSBase>,d0
    dfc8:	|  |                  movea.l d0,a6
    dfca:	|  |                  move.l 132(sp),d1
    dfce:	|  |                  move.l 128(sp),d2
    dfd2:	|  |                  move.l 124(sp),d3
    dfd6:	|  |                  jsr -354(a6)
    dfda:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    dfde:	|  +----------------- bra.w e1b6 <stackToFile+0x2e4>
        if (saveEncoding) {
    dfe2:	|  |  /-------------> move.w 1c9ba <saveEncoding>,d0
    dfe8:	|  |  |     /-------- beq.w e13a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    dfec:	|  |  |     |         movea.l 152(sp),a0
    dff0:	|  |  |     |         move.l (a0),d0
    dff2:	|  |  |     |         moveq #1,d1
    dff4:	|  |  |     |         cmp.l d0,d1
    dff6:	|  |  |     |     /-- beq.s e046 <stackToFile+0x174>
    dff8:	|  |  |     |     |   moveq #3,d1
    dffa:	|  |  |     |     |   cmp.l d0,d1
    dffc:	|  |  |     |  /--|-- bne.w e108 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e000:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e006:	|  |  |     |  |  |   move.b 1c9b8 <encode1>,d0
    e00c:	|  |  |     |  |  |   ext.w d0
    e00e:	|  |  |     |  |  |   movea.w d0,a0
    e010:	|  |  |     |  |  |   move.l a0,72(sp)
    e014:	|  |  |     |  |  |   move.l 1c90a <DOSBase>,d0
    e01a:	|  |  |     |  |  |   movea.l d0,a6
    e01c:	|  |  |     |  |  |   move.l 76(sp),d1
    e020:	|  |  |     |  |  |   move.l 72(sp),d2
    e024:	|  |  |     |  |  |   jsr -312(a6)
    e028:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e02c:	|  |  |     |  |  |   movea.l 152(sp),a0
    e030:	|  |  |     |  |  |   move.l 4(a0),d0
    e034:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e038:	|  |  |     |  |  |   move.l d0,-(sp)
    e03a:	|  |  |     |  |  |   jsr e1e8 <writeStringEncoded>
    e040:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e042:	|  |  |  /--|--|--|-- bra.w e1ac <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e046:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e04a:	|  |  |  |  |  |      move.l 4(a0),d0
    e04e:	|  |  |  |  |  |  /-- bmi.s e0be <stackToFile+0x1ec>
    e050:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e054:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e058:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e05e:	|  |  |  |  |  |  +-- bgt.s e0be <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e060:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e066:	|  |  |  |  |  |  |   move.b 1c9b8 <encode1>,d0
    e06c:	|  |  |  |  |  |  |   eori.b #2,d0
    e070:	|  |  |  |  |  |  |   ext.w d0
    e072:	|  |  |  |  |  |  |   movea.w d0,a0
    e074:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e078:	|  |  |  |  |  |  |   move.l 1c90a <DOSBase>,d0
    e07e:	|  |  |  |  |  |  |   movea.l d0,a6
    e080:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e084:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e088:	|  |  |  |  |  |  |   jsr -312(a6)
    e08c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e090:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e096:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e09a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e0a0:	|  |  |  |  |  |  |   move.l 1c90a <DOSBase>,d0
    e0a6:	|  |  |  |  |  |  |   movea.l d0,a6
    e0a8:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e0ac:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e0b0:	|  |  |  |  |  |  |   jsr -312(a6)
    e0b4:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e0b8:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e0ba:	|  |  |  +--|--|--|-- bra.w e1ac <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e0be:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e0c4:	|  |  |  |  |  |      move.b 1c9b8 <encode1>,d0
    e0ca:	|  |  |  |  |  |      eori.b #1,d0
    e0ce:	|  |  |  |  |  |      ext.w d0
    e0d0:	|  |  |  |  |  |      movea.w d0,a0
    e0d2:	|  |  |  |  |  |      move.l a0,36(sp)
    e0d6:	|  |  |  |  |  |      move.l 1c90a <DOSBase>,d0
    e0dc:	|  |  |  |  |  |      movea.l d0,a6
    e0de:	|  |  |  |  |  |      move.l 40(sp),d1
    e0e2:	|  |  |  |  |  |      move.l 36(sp),d2
    e0e6:	|  |  |  |  |  |      jsr -312(a6)
    e0ea:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e0ee:	|  |  |  |  |  |      movea.l 152(sp),a0
    e0f2:	|  |  |  |  |  |      move.l 4(a0),d0
    e0f6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e0fa:	|  |  |  |  |  |      move.l d0,-(sp)
    e0fc:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e102:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e104:	|  |  |  +--|--|----- bra.w e1ac <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e108:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e10c:	|  |  |  |  |         pea 1966a <PutChar+0x1a14>
    e112:	|  |  |  |  |         jsr 171b4 <KPrintF>
    e118:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e11a:	|  |  |  |  |         move.l 136(sp),28(sp)
    e120:	|  |  |  |  |         move.l 1c90a <DOSBase>,d0
    e126:	|  |  |  |  |         movea.l d0,a6
    e128:	|  |  |  |  |         move.l 28(sp),d1
    e12c:	|  |  |  |  |         jsr -36(a6)
    e130:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e134:	|  |  |  |  |         clr.w d0
    e136:	+--|--|--|--|-------- bra.w e1de <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e13a:	|  |  |  |  \-------> move.l 152(sp),d0
    e13e:	|  |  |  |            move.l d0,-(sp)
    e140:	|  |  |  |            jsr 14d22 <getTextFromAnyVar>
    e146:	|  |  |  |            addq.l #4,sp
    e148:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e14c:	|  |  |  |     /----- beq.s e1c0 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e14e:	|  |  |  |     |      movea.l 100(sp),a0
    e152:	|  |  |  |     |      move.b (a0),d0
    e154:	|  |  |  |     |      ext.w d0
    e156:	|  |  |  |     |      movea.w d0,a0
    e158:	|  |  |  |     |      move.l a0,12(sp)
    e15c:	|  |  |  |     |      move.l 136(sp),96(sp)
    e162:	|  |  |  |     |      move.l #104134,92(sp)
    e16a:	|  |  |  |     |      moveq #99,d0
    e16c:	|  |  |  |     |      not.b d0
    e16e:	|  |  |  |     |      add.l sp,d0
    e170:	|  |  |  |     |      addi.l #-144,d0
    e176:	|  |  |  |     |      move.l d0,88(sp)
    e17a:	|  |  |  |     |      move.l 1c90a <DOSBase>,d0
    e180:	|  |  |  |     |      movea.l d0,a6
    e182:	|  |  |  |     |      move.l 96(sp),d1
    e186:	|  |  |  |     |      move.l 92(sp),d2
    e18a:	|  |  |  |     |      move.l 88(sp),d3
    e18e:	|  |  |  |     |      jsr -354(a6)
    e192:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e196:	|  |  |  |     |      move.l 100(sp),80(sp)
    e19c:	|  |  |  |     |      move.l 1c902 <SysBase>,d0
    e1a2:	|  |  |  |     |      movea.l d0,a6
    e1a4:	|  |  |  |     |      movea.l 80(sp),a1
    e1a8:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e1ac:	|  |  |  \-----|----> movea.l 152(sp),a0
    e1b0:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e1b6:	|  \--|--------|----> tst.l 152(sp)
    e1ba:	|     \--------|----- bne.w dfe2 <stackToFile+0x110>
    e1be:	|              |  /-- bra.s e1c2 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e1c0:	|              \--|-> nop
    }
    Close(fp);
    e1c2:	|                 \-> move.l 136(sp),20(sp)
    e1c8:	|                     move.l 1c90a <DOSBase>,d0
    e1ce:	|                     movea.l d0,a6
    e1d0:	|                     move.l 20(sp),d1
    e1d4:	|                     jsr -36(a6)
    e1d8:	|                     move.l d0,16(sp)
    return TRUE;
    e1dc:	|                     moveq #1,d0
}
    e1de:	\-------------------> movem.l (sp)+,d2-d3/a6
    e1e2:	                      lea 144(sp),sp
    e1e6:	                      rts

0000e1e8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e1e8:	       lea -20(sp),sp
    e1ec:	       move.l a6,-(sp)
    e1ee:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e1f0:	       move.l 32(sp),-(sp)
    e1f4:	       jsr 13c38 <strlen>
    e1fa:	       addq.l #4,sp
    e1fc:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e200:	       move.l 36(sp),-(sp)
    e204:	       move.l 24(sp),-(sp)
    e208:	       jsr 8d0 <put2bytes>
    e20e:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e210:	       clr.l 24(sp)
    e214:	   /-- bra.s e26a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e216:	/--|-> move.l 36(sp),16(sp)
    e21c:	|  |   move.l 24(sp),d0
    e220:	|  |   movea.l 32(sp),a0
    e224:	|  |   adda.l d0,a0
    e226:	|  |   move.b (a0),d1
    e228:	|  |   move.b 1c9b8 <encode1>,d0
    e22e:	|  |   eor.b d1,d0
    e230:	|  |   ext.w d0
    e232:	|  |   movea.w d0,a0
    e234:	|  |   move.l a0,12(sp)
    e238:	|  |   move.l 1c90a <DOSBase>,d0
    e23e:	|  |   movea.l d0,a6
    e240:	|  |   move.l 16(sp),d1
    e244:	|  |   move.l 12(sp),d2
    e248:	|  |   jsr -312(a6)
    e24c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e250:	|  |   move.b 1c9b8 <encode1>,d0
    e256:	|  |   move.b d0,d1
    e258:	|  |   move.b 1c9b9 <encode2>,d0
    e25e:	|  |   add.b d1,d0
    e260:	|  |   move.b d0,1c9b8 <encode1>
	for (a = 0; a < len; a ++) {
    e266:	|  |   addq.l #1,24(sp)
    e26a:	|  \-> move.l 24(sp),d0
    e26e:	|      cmp.l 20(sp),d0
    e272:	\----- blt.s e216 <writeStringEncoded+0x2e>
	}
}
    e274:	       nop
    e276:	       nop
    e278:	       move.l (sp)+,d2
    e27a:	       movea.l (sp)+,a6
    e27c:	       lea 20(sp),sp
    e280:	       rts

0000e282 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e282:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e284:	                   tst.l 8(sp)
    e288:	               /-- bne.s e28e <failSecurityCheck+0xc>
    e28a:	               |   moveq #1,d0
    e28c:	/--------------|-- bra.s e30c <failSecurityCheck+0x8a>

	int a = 0;
    e28e:	|              \-> clr.l (sp)

	while (fn[a]) {
    e290:	|     /----------- bra.s e2fe <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e292:	|  /--|----------> move.l (sp),d0
    e294:	|  |  |            movea.l 8(sp),a0
    e298:	|  |  |            adda.l d0,a0
    e29a:	|  |  |            move.b (a0),d0
    e29c:	|  |  |            ext.w d0
    e29e:	|  |  |            movea.w d0,a0
    e2a0:	|  |  |            moveq #124,d0
    e2a2:	|  |  |            cmp.l a0,d0
    e2a4:	|  |  |     /----- beq.s e2e6 <failSecurityCheck+0x64>
    e2a6:	|  |  |     |      moveq #124,d1
    e2a8:	|  |  |     |      cmp.l a0,d1
    e2aa:	|  |  |  /--|----- blt.s e2fc <failSecurityCheck+0x7a>
    e2ac:	|  |  |  |  |      moveq #92,d0
    e2ae:	|  |  |  |  |      cmp.l a0,d0
    e2b0:	|  |  |  |  +----- beq.s e2e6 <failSecurityCheck+0x64>
    e2b2:	|  |  |  |  |      moveq #92,d1
    e2b4:	|  |  |  |  |      cmp.l a0,d1
    e2b6:	|  |  |  +--|----- blt.s e2fc <failSecurityCheck+0x7a>
    e2b8:	|  |  |  |  |      moveq #60,d0
    e2ba:	|  |  |  |  |      cmp.l a0,d0
    e2bc:	|  |  |  |  |  /-- blt.s e2dc <failSecurityCheck+0x5a>
    e2be:	|  |  |  |  |  |   moveq #34,d1
    e2c0:	|  |  |  |  |  |   cmp.l a0,d1
    e2c2:	|  |  |  +--|--|-- bgt.s e2fc <failSecurityCheck+0x7a>
    e2c4:	|  |  |  |  |  |   moveq #-34,d1
    e2c6:	|  |  |  |  |  |   add.l a0,d1
    e2c8:	|  |  |  |  |  |   move.l #83894529,d0
    e2ce:	|  |  |  |  |  |   lsr.l d1,d0
    e2d0:	|  |  |  |  |  |   moveq #1,d1
    e2d2:	|  |  |  |  |  |   and.l d1,d0
    e2d4:	|  |  |  |  |  |   sne d0
    e2d6:	|  |  |  |  |  |   neg.b d0
    e2d8:	|  |  |  |  +--|-- bne.s e2e6 <failSecurityCheck+0x64>
    e2da:	|  |  |  +--|--|-- bra.s e2fc <failSecurityCheck+0x7a>
    e2dc:	|  |  |  |  |  \-> lea -62(a0),a0
    e2e0:	|  |  |  |  |      moveq #1,d0
    e2e2:	|  |  |  |  |      cmp.l a0,d0
    e2e4:	|  |  |  +--|----- bcs.s e2fc <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e2e6:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e2ea:	|  |  |  |         pea 196ca <PutChar+0x1a74>
    e2f0:	|  |  |  |         jsr 171b4 <KPrintF>
    e2f6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e2f8:	|  |  |  |         moveq #1,d0
    e2fa:	+--|--|--|-------- bra.s e30c <failSecurityCheck+0x8a>
		}
		a++;
    e2fc:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e2fe:	|  |  \----------> move.l (sp),d0
    e300:	|  |               movea.l 8(sp),a0
    e304:	|  |               adda.l d0,a0
    e306:	|  |               move.b (a0),d0
    e308:	|  \-------------- bne.s e292 <failSecurityCheck+0x10>
	}
	return FALSE;
    e30a:	|                  clr.w d0
}
    e30c:	\----------------> addq.l #4,sp
    e30e:	                   rts

0000e310 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e310:	             lea -24(sp),sp
    e314:	             move.l a6,-(sp)
    e316:	             move.l 40(sp),d0
    e31a:	             move.w d0,d0
    e31c:	             move.w d0,6(sp)
	int fileNum = -1;
    e320:	             moveq #-1,d0
    e322:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e326:	             jsr 60fa <killSpeechTimers>

	switch (numParams) {
    e32c:	             moveq #2,d0
    e32e:	             cmp.l 32(sp),d0
    e332:	      /----- beq.s e376 <sayCore+0x66>
    e334:	      |      moveq #3,d0
    e336:	      |      cmp.l 32(sp),d0
    e33a:	/-----|----- bne.w e458 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e33e:	|     |      movea.l 36(sp),a0
    e342:	|     |      move.l 24(a0),d0
    e346:	|     |      move.l d0,-(sp)
    e348:	|     |      pea 5 <_start+0x5>
    e34c:	|     |      lea 20(sp),a0
    e350:	|     |      move.l a0,-(sp)
    e352:	|     |      jsr 1474c <getValueType>
    e358:	|     |      lea 12(sp),sp
    e35c:	|     |      tst.w d0
    e35e:	|     |  /-- bne.s e366 <sayCore+0x56>
    e360:	|     |  |   moveq #1,d0
    e362:	|  /--|--|-- bra.w e468 <sayCore+0x158>
			trimStack (&fun -> stack);
    e366:	|  |  |  \-> moveq #24,d0
    e368:	|  |  |      add.l 36(sp),d0
    e36c:	|  |  |      move.l d0,-(sp)
    e36e:	|  |  |      jsr 150d0 <trimStack>
    e374:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e376:	|  |  \----> movea.l 36(sp),a0
    e37a:	|  |         move.l 24(a0),d0
    e37e:	|  |         move.l d0,-(sp)
    e380:	|  |         jsr 14d22 <getTextFromAnyVar>
    e386:	|  |         addq.l #4,sp
    e388:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e38c:	|  |     /-- bne.s e394 <sayCore+0x84>
    e38e:	|  |     |   moveq #1,d0
    e390:	|  +-----|-- bra.w e468 <sayCore+0x158>
			trimStack (&fun -> stack);
    e394:	|  |     \-> moveq #24,d0
    e396:	|  |         add.l 36(sp),d0
    e39a:	|  |         move.l d0,-(sp)
    e39c:	|  |         jsr 150d0 <trimStack>
    e3a2:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3a4:	|  |         movea.l 36(sp),a0
    e3a8:	|  |         move.l 24(a0),d0
    e3ac:	|  |         move.l d0,-(sp)
    e3ae:	|  |         pea 7 <_start+0x7>
    e3b2:	|  |         lea 16(sp),a0
    e3b6:	|  |         move.l a0,-(sp)
    e3b8:	|  |         jsr 1474c <getValueType>
    e3be:	|  |         lea 12(sp),sp
    e3c2:	|  |         tst.w d0
    e3c4:	|  |     /-- bne.s e3cc <sayCore+0xbc>
    e3c6:	|  |     |   moveq #1,d0
    e3c8:	|  +-----|-- bra.w e468 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3cc:	|  |     \-> movea.l 36(sp),a0
    e3d0:	|  |         move.l 24(a0),d0
    e3d4:	|  |         move.l d0,-(sp)
    e3d6:	|  |         pea 7 <_start+0x7>
    e3da:	|  |         lea 16(sp),a0
    e3de:	|  |         move.l a0,-(sp)
    e3e0:	|  |         jsr 1474c <getValueType>
    e3e6:	|  |         lea 12(sp),sp
    e3ea:	|  |         tst.w d0
    e3ec:	|  |     /-- bne.s e3f2 <sayCore+0xe2>
    e3ee:	|  |     |   moveq #1,d0
    e3f0:	|  +-----|-- bra.s e468 <sayCore+0x158>
			trimStack (&fun -> stack);
    e3f2:	|  |     \-> moveq #24,d0
    e3f4:	|  |         add.l 36(sp),d0
    e3f8:	|  |         move.l d0,-(sp)
    e3fa:	|  |         jsr 150d0 <trimStack>
    e400:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e402:	|  |         movea.w 6(sp),a0
    e406:	|  |         move.l 12(sp),d1
    e40a:	|  |         move.l 8(sp),d0
    e40e:	|  |         move.l a0,-(sp)
    e410:	|  |         move.l d1,-(sp)
    e412:	|  |         move.l d0,-(sp)
    e414:	|  |         move.l 36(sp),-(sp)
    e418:	|  |         jsr 80b4 <wrapSpeech>
    e41e:	|  |         lea 16(sp),sp
    e422:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e426:	|  |         movea.l 36(sp),a0
    e42a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e430:	|  |         movea.l 36(sp),a0
    e434:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e43a:	|  |         move.l 24(sp),16(sp)
    e440:	|  |         move.l 1c902 <SysBase>,d0
    e446:	|  |         movea.l d0,a6
    e448:	|  |         movea.l 16(sp),a1
    e44c:	|  |         jsr -690(a6)
			newText = NULL;
    e450:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e454:	|  |         moveq #0,d0
    e456:	|  +-------- bra.s e468 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e458:	\--|-------> pea 19750 <PutChar+0x1afa>
    e45e:	   |         jsr 171b4 <KPrintF>
    e464:	   |         addq.l #4,sp
	return BR_ERROR;
    e466:	   |         moveq #1,d0
}
    e468:	   \-------> movea.l (sp)+,a6
    e46a:	             lea 24(sp),sp
    e46e:	             rts

0000e470 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e470:	pea 1 <_start+0x1>
    e474:	move.l 12(sp),-(sp)
    e478:	move.l 12(sp),-(sp)
    e47c:	jsr e310 <sayCore>
    e482:	lea 12(sp),sp
}
    e486:	rts

0000e488 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e488:	clr.l -(sp)
    e48a:	move.l 12(sp),-(sp)
    e48e:	move.l 12(sp),-(sp)
    e492:	jsr e310 <sayCore>
    e498:	lea 12(sp),sp
}
    e49c:	rts

0000e49e <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e49e:	jsr 15118 <freeze>
	freezeSubs (); 
    e4a4:	jsr 56ea <freezeSubs>
	fun -> freezerLevel = 0;
    e4aa:	movea.l 8(sp),a0
    e4ae:	clr.b 56(a0)
	return BR_CONTINUE;
    e4b2:	moveq #2,d0
}
    e4b4:	rts

0000e4b6 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e4b6:	jsr 1531c <unfreeze>
	unfreezeSubs (); 
    e4bc:	jsr 6b3c <unfreezeSubs>
	return BR_CONTINUE;
    e4c2:	moveq #2,d0
}
    e4c4:	rts

0000e4c6 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e4c6:	jsr 152f8 <howFrozen>
    e4cc:	move.l d0,d1
    e4ce:	moveq #28,d0
    e4d0:	add.l 8(sp),d0
    e4d4:	move.l d1,-(sp)
    e4d6:	pea 1 <_start+0x1>
    e4da:	move.l d0,-(sp)
    e4dc:	jsr 1503e <setVariable>
    e4e2:	lea 12(sp),sp
	return BR_CONTINUE; 
    e4e6:	moveq #2,d0
}
    e4e8:	rts

0000e4ea <builtIn_setCursor>:

builtIn(setCursor)
{
    e4ea:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e4ec:	movea.l 12(sp),a0
    e4f0:	move.l 24(a0),d0
    e4f4:	move.l d0,-(sp)
    e4f6:	jsr 14c24 <getAnimationFromVar>
    e4fc:	addq.l #4,sp
    e4fe:	move.l d0,(sp)
	pickAnimCursor (aa);
    e500:	move.l (sp),-(sp)
    e502:	jsr d6c <pickAnimCursor>
    e508:	addq.l #4,sp
	trimStack (&fun -> stack);
    e50a:	moveq #24,d0
    e50c:	add.l 12(sp),d0
    e510:	move.l d0,-(sp)
    e512:	jsr 150d0 <trimStack>
    e518:	addq.l #4,sp
	return BR_CONTINUE;
    e51a:	moveq #2,d0
}
    e51c:	addq.l #4,sp
    e51e:	rts

0000e520 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e520:	move.l 1c8be <input+0xa>,d1
    e526:	move.l 1c9bc <cameraX>,d0
    e52c:	add.l d0,d1
    e52e:	moveq #28,d0
    e530:	add.l 8(sp),d0
    e534:	move.l d1,-(sp)
    e536:	pea 1 <_start+0x1>
    e53a:	move.l d0,-(sp)
    e53c:	jsr 1503e <setVariable>
    e542:	lea 12(sp),sp
	return BR_CONTINUE;
    e546:	moveq #2,d0
}
    e548:	rts

0000e54a <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e54a:	move.l 1c8c2 <input+0xe>,d1
    e550:	move.l 1c9c0 <cameraY>,d0
    e556:	add.l d0,d1
    e558:	moveq #28,d0
    e55a:	add.l 8(sp),d0
    e55e:	move.l d1,-(sp)
    e560:	pea 1 <_start+0x1>
    e564:	move.l d0,-(sp)
    e566:	jsr 1503e <setVariable>
    e56c:	lea 12(sp),sp
	return BR_CONTINUE;
    e570:	moveq #2,d0
}
    e572:	rts

0000e574 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e574:	move.l 1c8be <input+0xa>,d0
    e57a:	move.l d0,-(sp)
    e57c:	jsr 175e6 <__floatsisf>
    e582:	addq.l #4,sp
    e584:	move.l d0,d1
    e586:	move.l 1c2a0 <cameraZoom>,d0
    e58c:	move.l d0,-(sp)
    e58e:	move.l d1,-(sp)
    e590:	jsr 17698 <__mulsf3>
    e596:	addq.l #8,sp
    e598:	move.l d0,-(sp)
    e59a:	jsr 1757e <__fixsfsi>
    e5a0:	addq.l #4,sp
    e5a2:	move.l d0,d1
    e5a4:	moveq #28,d0
    e5a6:	add.l 8(sp),d0
    e5aa:	move.l d1,-(sp)
    e5ac:	pea 1 <_start+0x1>
    e5b0:	move.l d0,-(sp)
    e5b2:	jsr 1503e <setVariable>
    e5b8:	lea 12(sp),sp
	return BR_CONTINUE;
    e5bc:	moveq #2,d0
}
    e5be:	rts

0000e5c0 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e5c0:	move.l 1c8c2 <input+0xe>,d0
    e5c6:	move.l d0,-(sp)
    e5c8:	jsr 175e6 <__floatsisf>
    e5ce:	addq.l #4,sp
    e5d0:	move.l d0,d1
    e5d2:	move.l 1c2a0 <cameraZoom>,d0
    e5d8:	move.l d0,-(sp)
    e5da:	move.l d1,-(sp)
    e5dc:	jsr 17698 <__mulsf3>
    e5e2:	addq.l #8,sp
    e5e4:	move.l d0,-(sp)
    e5e6:	jsr 1757e <__fixsfsi>
    e5ec:	addq.l #4,sp
    e5ee:	move.l d0,d1
    e5f0:	moveq #28,d0
    e5f2:	add.l 8(sp),d0
    e5f6:	move.l d1,-(sp)
    e5f8:	pea 1 <_start+0x1>
    e5fc:	move.l d0,-(sp)
    e5fe:	jsr 1503e <setVariable>
    e604:	lea 12(sp),sp
	return BR_CONTINUE;
    e608:	moveq #2,d0
}
    e60a:	rts

0000e60c <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e60c:	jsr 7b68 <statusBarText>
    e612:	move.l d0,d1
    e614:	moveq #28,d0
    e616:	add.l 8(sp),d0
    e61a:	move.l d1,-(sp)
    e61c:	move.l d0,-(sp)
    e61e:	jsr 1496e <makeTextVar>
    e624:	addq.l #8,sp
	return BR_CONTINUE;
    e626:	moveq #2,d0
}
    e628:	rts

0000e62a <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e62a:	       lea -20(sp),sp
    e62e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e630:	       movea.l 32(sp),a0
    e634:	       move.l 24(a0),d0
    e638:	       move.l d0,-(sp)
    e63a:	       jsr 14d22 <getTextFromAnyVar>
    e640:	       addq.l #4,sp
    e642:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e646:	   /-- bne.s e64e <builtIn_getMatchingFiles+0x24>
    e648:	   |   moveq #1,d0
    e64a:	/--|-- bra.w e710 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e64e:	|  \-> moveq #24,d0
    e650:	|      add.l 32(sp),d0
    e654:	|      move.l d0,-(sp)
    e656:	|      jsr 150d0 <trimStack>
    e65c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e65e:	|      moveq #28,d0
    e660:	|      add.l 32(sp),d0
    e664:	|      move.l d0,-(sp)
    e666:	|      jsr 1499a <unlinkVar>
    e66c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e66e:	|      movea.l 32(sp),a0
    e672:	|      moveq #6,d0
    e674:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e678:	|      moveq #12,d0
    e67a:	|      move.l d0,16(sp)
    e67e:	|      clr.l 12(sp)
    e682:	|      move.l 1c902 <SysBase>,d0
    e688:	|      movea.l d0,a6
    e68a:	|      move.l 16(sp),d0
    e68e:	|      move.l 12(sp),d1
    e692:	|      jsr -684(a6)
    e696:	|      move.l d0,8(sp)
    e69a:	|      move.l 8(sp),d0
    e69e:	|      movea.l 32(sp),a0
    e6a2:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e6a6:	|      moveq #32,d0
    e6a8:	|      add.l 32(sp),d0
    e6ac:	|  /-- bne.s e6b2 <builtIn_getMatchingFiles+0x88>
    e6ae:	|  |   moveq #1,d0
    e6b0:	+--|-- bra.s e710 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e6b2:	|  \-> movea.l 32(sp),a0
    e6b6:	|      movea.l 32(a0),a0
    e6ba:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e6bc:	|      movea.l 32(sp),a0
    e6c0:	|      movea.l 32(a0),a0
    e6c4:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e6c8:	|      movea.l 32(sp),a0
    e6cc:	|      movea.l 32(a0),a0
    e6d0:	|      moveq #1,d0
    e6d2:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e6d6:	|      movea.l 32(sp),a0
    e6da:	|      move.l 32(a0),d0
    e6de:	|      move.l 20(sp),-(sp)
    e6e2:	|      move.l d0,-(sp)
    e6e4:	|      jsr 14508 <getSavedGamesStack>
    e6ea:	|      addq.l #8,sp
    e6ec:	|      tst.w d0
    e6ee:	|  /-- bne.s e6f4 <builtIn_getMatchingFiles+0xca>
    e6f0:	|  |   moveq #1,d0
    e6f2:	+--|-- bra.s e710 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e6f4:	|  \-> move.l 20(sp),4(sp)
    e6fa:	|      move.l 1c902 <SysBase>,d0
    e700:	|      movea.l d0,a6
    e702:	|      movea.l 4(sp),a1
    e706:	|      jsr -690(a6)
	newText = NULL;
    e70a:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e70e:	|      moveq #2,d0
}
    e710:	\----> movea.l (sp)+,a6
    e712:	       lea 20(sp),sp
    e716:	       rts

0000e718 <builtIn_saveGame>:

builtIn(saveGame)
{
    e718:	       lea -12(sp),sp
    e71c:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e71e:	       movea.l 24(sp),a0
    e722:	       move.l 24(a0),d0
    e726:	       move.l d0,-(sp)
    e728:	       jsr 14d22 <getTextFromAnyVar>
    e72e:	       addq.l #4,sp
    e730:	       move.l d0,1c8ce <loadNow>
    trimStack(&fun->stack);
    e736:	       moveq #24,d0
    e738:	       add.l 24(sp),d0
    e73c:	       move.l d0,-(sp)
    e73e:	       jsr 150d0 <trimStack>
    e744:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e746:	       move.l 1c8ce <loadNow>,d0
    e74c:	       move.l d0,-(sp)
    e74e:	       jsr 2fe <encodeFilename>
    e754:	       addq.l #4,sp
    e756:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e75a:	       move.l 1c8ce <loadNow>,8(sp)
    e762:	       move.l 1c902 <SysBase>,d0
    e768:	       movea.l d0,a6
    e76a:	       movea.l 8(sp),a1
    e76e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e772:	       move.l 12(sp),-(sp)
    e776:	       jsr e282 <failSecurityCheck>
    e77c:	       addq.l #4,sp
    e77e:	       tst.w d0
    e780:	   /-- beq.s e786 <builtIn_saveGame+0x6e>
    e782:	   |   moveq #1,d0
    e784:	/--|-- bra.s e7d6 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e786:	|  \-> move.l 12(sp),-(sp)
    e78a:	|      pea 1977e <PutChar+0x1b28>
    e790:	|      jsr 13c78 <joinStrings>
    e796:	|      addq.l #8,sp
    e798:	|      move.l d0,1c8ce <loadNow>
    FreeVec(aaaaa);
    e79e:	|      move.l 12(sp),4(sp)
    e7a4:	|      move.l 1c902 <SysBase>,d0
    e7aa:	|      movea.l d0,a6
    e7ac:	|      movea.l 4(sp),a1
    e7b0:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e7b4:	|      moveq #28,d0
    e7b6:	|      add.l 24(sp),d0
    e7ba:	|      clr.l -(sp)
    e7bc:	|      pea 1 <_start+0x1>
    e7c0:	|      move.l d0,-(sp)
    e7c2:	|      jsr 1503e <setVariable>
    e7c8:	|      lea 12(sp),sp
    saverFunc = fun;
    e7cc:	|      move.l 24(sp),1c9cc <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e7d4:	|      moveq #0,d0
}
    e7d6:	\----> movea.l (sp)+,a6
    e7d8:	       lea 12(sp),sp
    e7dc:	       rts

0000e7de <builtIn_fileExists>:

builtIn(fileExists)
{
    e7de:	       lea -36(sp),sp
    e7e2:	       move.l a6,-(sp)
    e7e4:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7e6:	       movea.l 52(sp),a0
    e7ea:	       move.l 24(a0),d0
    e7ee:	       move.l d0,-(sp)
    e7f0:	       jsr 14d22 <getTextFromAnyVar>
    e7f6:	       addq.l #4,sp
    e7f8:	       move.l d0,1c8ce <loadNow>
    trimStack(&fun->stack);
    e7fe:	       moveq #24,d0
    e800:	       add.l 52(sp),d0
    e804:	       move.l d0,-(sp)
    e806:	       jsr 150d0 <trimStack>
    e80c:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e80e:	       move.l 1c8ce <loadNow>,d0
    e814:	       move.l d0,-(sp)
    e816:	       jsr 2fe <encodeFilename>
    e81c:	       addq.l #4,sp
    e81e:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e822:	       move.l 1c8ce <loadNow>,36(sp)
    e82a:	       move.l 1c902 <SysBase>,d0
    e830:	       movea.l d0,a6
    e832:	       movea.l 36(sp),a1
    e836:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e83a:	       move.l 40(sp),-(sp)
    e83e:	       jsr e282 <failSecurityCheck>
    e844:	       addq.l #4,sp
    e846:	       tst.w d0
    e848:	   /-- beq.s e850 <builtIn_fileExists+0x72>
    e84a:	   |   moveq #1,d0
    e84c:	/--|-- bra.w e8f0 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e850:	|  \-> move.l 40(sp),32(sp)
    e856:	|      move.l #1005,28(sp)
    e85e:	|      move.l 1c90a <DOSBase>,d0
    e864:	|      movea.l d0,a6
    e866:	|      move.l 32(sp),d1
    e86a:	|      move.l 28(sp),d2
    e86e:	|      jsr -30(a6)
    e872:	|      move.l d0,24(sp)
    e876:	|      move.l 24(sp),d0
    e87a:	|      move.l d0,20(sp)
    if (!fp) {        
    e87e:	|  /-- bne.s e88e <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e880:	|  |   pea 19780 <PutChar+0x1b2a>
    e886:	|  |   jsr 171b4 <KPrintF>
    e88c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e88e:	|  \-> tst.l 20(sp)
    e892:	|      sne d0
    e894:	|      neg.b d0
    e896:	|      moveq #0,d1
    e898:	|      move.b d0,d1
    e89a:	|      moveq #28,d0
    e89c:	|      add.l 52(sp),d0
    e8a0:	|      move.l d1,-(sp)
    e8a2:	|      pea 1 <_start+0x1>
    e8a6:	|      move.l d0,-(sp)
    e8a8:	|      jsr 1503e <setVariable>
    e8ae:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e8b2:	|      tst.l 20(sp)
    e8b6:	|  /-- beq.s e8d2 <builtIn_fileExists+0xf4>
    e8b8:	|  |   move.l 20(sp),16(sp)
    e8be:	|  |   move.l 1c90a <DOSBase>,d0
    e8c4:	|  |   movea.l d0,a6
    e8c6:	|  |   move.l 16(sp),d1
    e8ca:	|  |   jsr -36(a6)
    e8ce:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e8d2:	|  \-> move.l 40(sp),8(sp)
    e8d8:	|      move.l 1c902 <SysBase>,d0
    e8de:	|      movea.l d0,a6
    e8e0:	|      movea.l 8(sp),a1
    e8e4:	|      jsr -690(a6)
    loadNow = NULL;
    e8e8:	|      clr.l 1c8ce <loadNow>
    return BR_CONTINUE;
    e8ee:	|      moveq #2,d0
}
    e8f0:	\----> move.l (sp)+,d2
    e8f2:	       movea.l (sp)+,a6
    e8f4:	       lea 36(sp),sp
    e8f8:	       rts

0000e8fa <builtIn_loadGame>:

builtIn(loadGame)
{
    e8fa:	       lea -36(sp),sp
    e8fe:	       move.l a6,-(sp)
    e900:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e902:	       movea.l 52(sp),a0
    e906:	       move.l 24(a0),d0
    e90a:	       move.l d0,-(sp)
    e90c:	       jsr 14d22 <getTextFromAnyVar>
    e912:	       addq.l #4,sp
    e914:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e918:	       moveq #24,d0
    e91a:	       add.l 52(sp),d0
    e91e:	       move.l d0,-(sp)
    e920:	       jsr 150d0 <trimStack>
    e926:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e928:	       move.l 40(sp),-(sp)
    e92c:	       jsr 2fe <encodeFilename>
    e932:	       addq.l #4,sp
    e934:	       move.l d0,1c8ce <loadNow>
    FreeVec(aaaaa);
    e93a:	       move.l 40(sp),36(sp)
    e940:	       move.l 1c902 <SysBase>,d0
    e946:	       movea.l d0,a6
    e948:	       movea.l 36(sp),a1
    e94c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e950:	       move.l 1c8ce <loadNow>,d0
    e956:	       move.l d0,-(sp)
    e958:	       jsr e282 <failSecurityCheck>
    e95e:	       addq.l #4,sp
    e960:	       tst.w d0
    e962:	   /-- beq.s e968 <builtIn_loadGame+0x6e>
    e964:	   |   moveq #1,d0
    e966:	/--|-- bra.s e9d8 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e968:	|  \-> move.l 1c8ce <loadNow>,32(sp)
    e970:	|      move.l #1005,28(sp)
    e978:	|      move.l 1c90a <DOSBase>,d0
    e97e:	|      movea.l d0,a6
    e980:	|      move.l 32(sp),d1
    e984:	|      move.l 28(sp),d2
    e988:	|      jsr -30(a6)
    e98c:	|      move.l d0,24(sp)
    e990:	|      move.l 24(sp),d0
    e994:	|      move.l d0,20(sp)
    if (fp) {
    e998:	|  /-- beq.s e9b8 <builtIn_loadGame+0xbe>
        Close(fp);
    e99a:	|  |   move.l 20(sp),12(sp)
    e9a0:	|  |   move.l 1c90a <DOSBase>,d0
    e9a6:	|  |   movea.l d0,a6
    e9a8:	|  |   move.l 12(sp),d1
    e9ac:	|  |   jsr -36(a6)
    e9b0:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e9b4:	|  |   moveq #0,d0
    e9b6:	+--|-- bra.s e9d8 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e9b8:	|  \-> move.l 1c8ce <loadNow>,16(sp)
    e9c0:	|      move.l 1c902 <SysBase>,d0
    e9c6:	|      movea.l d0,a6
    e9c8:	|      movea.l 16(sp),a1
    e9cc:	|      jsr -690(a6)
    loadNow = NULL;
    e9d0:	|      clr.l 1c8ce <loadNow>
    return BR_CONTINUE;
    e9d6:	|      moveq #2,d0
}
    e9d8:	\----> move.l (sp)+,d2
    e9da:	       movea.l (sp)+,a6
    e9dc:	       lea 36(sp),sp
    e9e0:	       rts

0000e9e2 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e9e2:	move.l 1c9a2 <sceneHeight>,d0
    e9e8:	move.l d0,d1
    e9ea:	move.l 1c99e <sceneWidth>,d0
    e9f0:	move.l d1,-(sp)
    e9f2:	move.l d0,-(sp)
    e9f4:	clr.l -(sp)
    e9f6:	clr.l -(sp)
    e9f8:	jsr d176 <blankScreen>
    e9fe:	lea 16(sp),sp
	return BR_CONTINUE;
    ea02:	moveq #2,d0
}
    ea04:	rts

0000ea06 <builtIn_blankArea>:

builtIn(blankArea)
{
    ea06:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea0a:	       movea.l 24(sp),a0
    ea0e:	       move.l 24(a0),d0
    ea12:	       move.l d0,-(sp)
    ea14:	       pea 1 <_start+0x1>
    ea18:	       lea 8(sp),a0
    ea1c:	       move.l a0,-(sp)
    ea1e:	       jsr 1474c <getValueType>
    ea24:	       lea 12(sp),sp
    ea28:	       tst.w d0
    ea2a:	   /-- bne.s ea32 <builtIn_blankArea+0x2c>
    ea2c:	   |   moveq #1,d0
    ea2e:	/--|-- bra.w eb08 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea32:	|  \-> moveq #24,d0
    ea34:	|      add.l 24(sp),d0
    ea38:	|      move.l d0,-(sp)
    ea3a:	|      jsr 150d0 <trimStack>
    ea40:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea42:	|      movea.l 24(sp),a0
    ea46:	|      move.l 24(a0),d0
    ea4a:	|      move.l d0,-(sp)
    ea4c:	|      pea 1 <_start+0x1>
    ea50:	|      lea 12(sp),a0
    ea54:	|      move.l a0,-(sp)
    ea56:	|      jsr 1474c <getValueType>
    ea5c:	|      lea 12(sp),sp
    ea60:	|      tst.w d0
    ea62:	|  /-- bne.s ea6a <builtIn_blankArea+0x64>
    ea64:	|  |   moveq #1,d0
    ea66:	+--|-- bra.w eb08 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea6a:	|  \-> moveq #24,d0
    ea6c:	|      add.l 24(sp),d0
    ea70:	|      move.l d0,-(sp)
    ea72:	|      jsr 150d0 <trimStack>
    ea78:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea7a:	|      movea.l 24(sp),a0
    ea7e:	|      move.l 24(a0),d0
    ea82:	|      move.l d0,-(sp)
    ea84:	|      pea 1 <_start+0x1>
    ea88:	|      moveq #16,d0
    ea8a:	|      add.l sp,d0
    ea8c:	|      move.l d0,-(sp)
    ea8e:	|      jsr 1474c <getValueType>
    ea94:	|      lea 12(sp),sp
    ea98:	|      tst.w d0
    ea9a:	|  /-- bne.s eaa0 <builtIn_blankArea+0x9a>
    ea9c:	|  |   moveq #1,d0
    ea9e:	+--|-- bra.s eb08 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaa0:	|  \-> moveq #24,d0
    eaa2:	|      add.l 24(sp),d0
    eaa6:	|      move.l d0,-(sp)
    eaa8:	|      jsr 150d0 <trimStack>
    eaae:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eab0:	|      movea.l 24(sp),a0
    eab4:	|      move.l 24(a0),d0
    eab8:	|      move.l d0,-(sp)
    eaba:	|      pea 1 <_start+0x1>
    eabe:	|      moveq #20,d0
    eac0:	|      add.l sp,d0
    eac2:	|      move.l d0,-(sp)
    eac4:	|      jsr 1474c <getValueType>
    eaca:	|      lea 12(sp),sp
    eace:	|      tst.w d0
    ead0:	|  /-- bne.s ead6 <builtIn_blankArea+0xd0>
    ead2:	|  |   moveq #1,d0
    ead4:	+--|-- bra.s eb08 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ead6:	|  \-> moveq #24,d0
    ead8:	|      add.l 24(sp),d0
    eadc:	|      move.l d0,-(sp)
    eade:	|      jsr 150d0 <trimStack>
    eae4:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eae6:	|      movea.l (sp),a1
    eae8:	|      movea.l 4(sp),a0
    eaec:	|      move.l 8(sp),d1
    eaf0:	|      move.l 12(sp),d0
    eaf4:	|      move.l a1,-(sp)
    eaf6:	|      move.l a0,-(sp)
    eaf8:	|      move.l d1,-(sp)
    eafa:	|      move.l d0,-(sp)
    eafc:	|      jsr d176 <blankScreen>
    eb02:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb06:	|      moveq #2,d0
}
    eb08:	\----> lea 16(sp),sp
    eb0c:	       rts

0000eb0e <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb0e:	jsr d18a <darkScreen>
	return BR_CONTINUE;
    eb14:	moveq #2,d0
}
    eb16:	rts

0000eb18 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eb18:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb1c:	       movea.l 20(sp),a0
    eb20:	       move.l 24(a0),d0
    eb24:	       move.l d0,-(sp)
    eb26:	       pea 1 <_start+0x1>
    eb2a:	       lea 8(sp),a0
    eb2e:	       move.l a0,-(sp)
    eb30:	       jsr 1474c <getValueType>
    eb36:	       lea 12(sp),sp
    eb3a:	       tst.w d0
    eb3c:	   /-- bne.s eb44 <builtIn_addOverlay+0x2c>
    eb3e:	   |   moveq #1,d0
    eb40:	/--|-- bra.w ebdc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb44:	|  \-> moveq #24,d0
    eb46:	|      add.l 20(sp),d0
    eb4a:	|      move.l d0,-(sp)
    eb4c:	|      jsr 150d0 <trimStack>
    eb52:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb54:	|      movea.l 20(sp),a0
    eb58:	|      move.l 24(a0),d0
    eb5c:	|      move.l d0,-(sp)
    eb5e:	|      pea 1 <_start+0x1>
    eb62:	|      moveq #12,d0
    eb64:	|      add.l sp,d0
    eb66:	|      move.l d0,-(sp)
    eb68:	|      jsr 1474c <getValueType>
    eb6e:	|      lea 12(sp),sp
    eb72:	|      tst.w d0
    eb74:	|  /-- bne.s eb7a <builtIn_addOverlay+0x62>
    eb76:	|  |   moveq #1,d0
    eb78:	+--|-- bra.s ebdc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb7a:	|  \-> moveq #24,d0
    eb7c:	|      add.l 20(sp),d0
    eb80:	|      move.l d0,-(sp)
    eb82:	|      jsr 150d0 <trimStack>
    eb88:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb8a:	|      movea.l 20(sp),a0
    eb8e:	|      move.l 24(a0),d0
    eb92:	|      move.l d0,-(sp)
    eb94:	|      pea 5 <_start+0x5>
    eb98:	|      moveq #16,d0
    eb9a:	|      add.l sp,d0
    eb9c:	|      move.l d0,-(sp)
    eb9e:	|      jsr 1474c <getValueType>
    eba4:	|      lea 12(sp),sp
    eba8:	|      tst.w d0
    ebaa:	|  /-- bne.s ebb0 <builtIn_addOverlay+0x98>
    ebac:	|  |   moveq #1,d0
    ebae:	+--|-- bra.s ebdc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebb0:	|  \-> moveq #24,d0
    ebb2:	|      add.l 20(sp),d0
    ebb6:	|      move.l d0,-(sp)
    ebb8:	|      jsr 150d0 <trimStack>
    ebbe:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ebc0:	|      movea.l (sp),a0
    ebc2:	|      move.l 4(sp),d1
    ebc6:	|      move.l 8(sp),d0
    ebca:	|      move.l a0,-(sp)
    ebcc:	|      move.l d1,-(sp)
    ebce:	|      move.l d0,-(sp)
    ebd0:	|      jsr d2a8 <loadBackDrop>
    ebd6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ebda:	|      moveq #2,d0
}
    ebdc:	\----> lea 12(sp),sp
    ebe0:	       rts

0000ebe2 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ebe2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebe6:	       movea.l 20(sp),a0
    ebea:	       move.l 24(a0),d0
    ebee:	       move.l d0,-(sp)
    ebf0:	       pea 1 <_start+0x1>
    ebf4:	       lea 8(sp),a0
    ebf8:	       move.l a0,-(sp)
    ebfa:	       jsr 1474c <getValueType>
    ec00:	       lea 12(sp),sp
    ec04:	       tst.w d0
    ec06:	   /-- bne.s ec0e <builtIn_mixOverlay+0x2c>
    ec08:	   |   moveq #1,d0
    ec0a:	/--|-- bra.w eca6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec0e:	|  \-> moveq #24,d0
    ec10:	|      add.l 20(sp),d0
    ec14:	|      move.l d0,-(sp)
    ec16:	|      jsr 150d0 <trimStack>
    ec1c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec1e:	|      movea.l 20(sp),a0
    ec22:	|      move.l 24(a0),d0
    ec26:	|      move.l d0,-(sp)
    ec28:	|      pea 1 <_start+0x1>
    ec2c:	|      moveq #12,d0
    ec2e:	|      add.l sp,d0
    ec30:	|      move.l d0,-(sp)
    ec32:	|      jsr 1474c <getValueType>
    ec38:	|      lea 12(sp),sp
    ec3c:	|      tst.w d0
    ec3e:	|  /-- bne.s ec44 <builtIn_mixOverlay+0x62>
    ec40:	|  |   moveq #1,d0
    ec42:	+--|-- bra.s eca6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec44:	|  \-> moveq #24,d0
    ec46:	|      add.l 20(sp),d0
    ec4a:	|      move.l d0,-(sp)
    ec4c:	|      jsr 150d0 <trimStack>
    ec52:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec54:	|      movea.l 20(sp),a0
    ec58:	|      move.l 24(a0),d0
    ec5c:	|      move.l d0,-(sp)
    ec5e:	|      pea 5 <_start+0x5>
    ec62:	|      moveq #16,d0
    ec64:	|      add.l sp,d0
    ec66:	|      move.l d0,-(sp)
    ec68:	|      jsr 1474c <getValueType>
    ec6e:	|      lea 12(sp),sp
    ec72:	|      tst.w d0
    ec74:	|  /-- bne.s ec7a <builtIn_mixOverlay+0x98>
    ec76:	|  |   moveq #1,d0
    ec78:	+--|-- bra.s eca6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec7a:	|  \-> moveq #24,d0
    ec7c:	|      add.l 20(sp),d0
    ec80:	|      move.l d0,-(sp)
    ec82:	|      jsr 150d0 <trimStack>
    ec88:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ec8a:	|      movea.l (sp),a0
    ec8c:	|      move.l 4(sp),d1
    ec90:	|      move.l 8(sp),d0
    ec94:	|      move.l a0,-(sp)
    ec96:	|      move.l d1,-(sp)
    ec98:	|      move.l d0,-(sp)
    ec9a:	|      jsr d31e <mixBackDrop>
    eca0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eca4:	|      moveq #2,d0
}
    eca6:	\----> lea 12(sp),sp
    ecaa:	       rts

0000ecac <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ecac:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ecb0:	       pea 1979e <PutChar+0x1b48>
    ecb6:	       jsr 171b4 <KPrintF>
    ecbc:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecbe:	       movea.l 20(sp),a0
    ecc2:	       move.l 24(a0),d0
    ecc6:	       move.l d0,-(sp)
    ecc8:	       pea 1 <_start+0x1>
    eccc:	       lea 8(sp),a0
    ecd0:	       move.l a0,-(sp)
    ecd2:	       jsr 1474c <getValueType>
    ecd8:	       lea 12(sp),sp
    ecdc:	       tst.w d0
    ecde:	   /-- bne.s ece6 <builtIn_pasteImage+0x3a>
    ece0:	   |   moveq #1,d0
    ece2:	/--|-- bra.w ed84 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ece6:	|  \-> moveq #24,d0
    ece8:	|      add.l 20(sp),d0
    ecec:	|      move.l d0,-(sp)
    ecee:	|      jsr 150d0 <trimStack>
    ecf4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecf6:	|      movea.l 20(sp),a0
    ecfa:	|      move.l 24(a0),d0
    ecfe:	|      move.l d0,-(sp)
    ed00:	|      pea 1 <_start+0x1>
    ed04:	|      moveq #12,d0
    ed06:	|      add.l sp,d0
    ed08:	|      move.l d0,-(sp)
    ed0a:	|      jsr 1474c <getValueType>
    ed10:	|      lea 12(sp),sp
    ed14:	|      tst.w d0
    ed16:	|  /-- bne.s ed1c <builtIn_pasteImage+0x70>
    ed18:	|  |   moveq #1,d0
    ed1a:	+--|-- bra.s ed84 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed1c:	|  \-> moveq #24,d0
    ed1e:	|      add.l 20(sp),d0
    ed22:	|      move.l d0,-(sp)
    ed24:	|      jsr 150d0 <trimStack>
    ed2a:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ed2c:	|      movea.l 20(sp),a0
    ed30:	|      move.l 24(a0),d0
    ed34:	|      move.l d0,-(sp)
    ed36:	|      jsr 14c24 <getAnimationFromVar>
    ed3c:	|      addq.l #4,sp
    ed3e:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ed42:	|      moveq #24,d0
    ed44:	|      add.l 20(sp),d0
    ed48:	|      move.l d0,-(sp)
    ed4a:	|      jsr 150d0 <trimStack>
    ed50:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ed52:	|      tst.l 8(sp)
    ed56:	|  /-- bne.s ed5c <builtIn_pasteImage+0xb0>
    ed58:	|  |   moveq #2,d0
    ed5a:	+--|-- bra.s ed84 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ed5c:	|  \-> move.l (sp),d1
    ed5e:	|      move.l 4(sp),d0
    ed62:	|      move.l 8(sp),-(sp)
    ed66:	|      move.l d1,-(sp)
    ed68:	|      move.l d0,-(sp)
    ed6a:	|      jsr d94 <pasteCursor>
    ed70:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ed74:	|      pea 197b3 <PutChar+0x1b5d>
    ed7a:	|      jsr 171b4 <KPrintF>
    ed80:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ed82:	|      moveq #2,d0
}
    ed84:	\----> lea 12(sp),sp
    ed88:	       rts

0000ed8a <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ed8a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed8c:	       movea.l 16(sp),a0
    ed90:	       move.l 24(a0),d0
    ed94:	       move.l d0,-(sp)
    ed96:	       pea 1 <_start+0x1>
    ed9a:	       move.l sp,d0
    ed9c:	       addq.l #8,d0
    ed9e:	       move.l d0,-(sp)
    eda0:	       jsr 1474c <getValueType>
    eda6:	       lea 12(sp),sp
    edaa:	       tst.w d0
    edac:	   /-- bne.s edb4 <builtIn_setSceneDimensions+0x2a>
    edae:	   |   moveq #1,d0
    edb0:	/--|-- bra.w ee3c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edb4:	|  \-> moveq #24,d0
    edb6:	|      add.l 16(sp),d0
    edba:	|      move.l d0,-(sp)
    edbc:	|      jsr 150d0 <trimStack>
    edc2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edc4:	|      movea.l 16(sp),a0
    edc8:	|      move.l 24(a0),d0
    edcc:	|      move.l d0,-(sp)
    edce:	|      pea 1 <_start+0x1>
    edd2:	|      moveq #12,d0
    edd4:	|      add.l sp,d0
    edd6:	|      move.l d0,-(sp)
    edd8:	|      jsr 1474c <getValueType>
    edde:	|      lea 12(sp),sp
    ede2:	|      tst.w d0
    ede4:	|  /-- bne.s edea <builtIn_setSceneDimensions+0x60>
    ede6:	|  |   moveq #1,d0
    ede8:	+--|-- bra.s ee3c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edea:	|  \-> moveq #24,d0
    edec:	|      add.l 16(sp),d0
    edf0:	|      move.l d0,-(sp)
    edf2:	|      jsr 150d0 <trimStack>
    edf8:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    edfa:	|      move.l (sp),d1
    edfc:	|      move.l 4(sp),d0
    ee00:	|      move.l d1,-(sp)
    ee02:	|      move.l d0,-(sp)
    ee04:	|      jsr d374 <resizeBackdrop>
    ee0a:	|      addq.l #8,sp
    ee0c:	|      tst.w d0
    ee0e:	|  /-- beq.s ee2c <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee10:	|  |   move.l (sp),d1
    ee12:	|  |   move.l 4(sp),d0
    ee16:	|  |   move.l d1,-(sp)
    ee18:	|  |   move.l d0,-(sp)
    ee1a:	|  |   clr.l -(sp)
    ee1c:	|  |   clr.l -(sp)
    ee1e:	|  |   jsr d176 <blankScreen>
    ee24:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ee28:	|  |   moveq #2,d0
    ee2a:	+--|-- bra.s ee3c <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ee2c:	|  \-> pea 197c9 <PutChar+0x1b73>
    ee32:	|      jsr 171b4 <KPrintF>
    ee38:	|      addq.l #4,sp
	return BR_ERROR;
    ee3a:	|      moveq #1,d0
}
    ee3c:	\----> addq.l #8,sp
    ee3e:	       rts

0000ee40 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ee40:	          move.l d3,-(sp)
    ee42:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee44:	          movea.l 16(sp),a0
    ee48:	          move.l 24(a0),d0
    ee4c:	          move.l d0,-(sp)
    ee4e:	          pea 1 <_start+0x1>
    ee52:	          pea 1c9c0 <cameraY>
    ee58:	          jsr 1474c <getValueType>
    ee5e:	          lea 12(sp),sp
    ee62:	          tst.w d0
    ee64:	      /-- bne.s ee6c <builtIn_aimCamera+0x2c>
    ee66:	      |   moveq #1,d0
    ee68:	/-----|-- bra.w f0ee <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ee6c:	|     \-> moveq #24,d0
    ee6e:	|         add.l 16(sp),d0
    ee72:	|         move.l d0,-(sp)
    ee74:	|         jsr 150d0 <trimStack>
    ee7a:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee7c:	|         movea.l 16(sp),a0
    ee80:	|         move.l 24(a0),d0
    ee84:	|         move.l d0,-(sp)
    ee86:	|         pea 1 <_start+0x1>
    ee8a:	|         pea 1c9bc <cameraX>
    ee90:	|         jsr 1474c <getValueType>
    ee96:	|         lea 12(sp),sp
    ee9a:	|         tst.w d0
    ee9c:	|     /-- bne.s eea4 <builtIn_aimCamera+0x64>
    ee9e:	|     |   moveq #1,d0
    eea0:	+-----|-- bra.w f0ee <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eea4:	|     \-> moveq #24,d0
    eea6:	|         add.l 16(sp),d0
    eeaa:	|         move.l d0,-(sp)
    eeac:	|         jsr 150d0 <trimStack>
    eeb2:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    eeb4:	|         move.l 1c9bc <cameraX>,d0
    eeba:	|         move.l d0,-(sp)
    eebc:	|         jsr 175e6 <__floatsisf>
    eec2:	|         addq.l #4,sp
    eec4:	|         move.l d0,d2
    eec6:	|         move.l 1c856 <winWidth>,d0
    eecc:	|         lsr.l #1,d0
    eece:	|         move.l d0,-(sp)
    eed0:	|         jsr 1760e <__floatunsisf>
    eed6:	|         addq.l #4,sp
    eed8:	|         move.l d0,d1
    eeda:	|         move.l 1c2a0 <cameraZoom>,d0
    eee0:	|         move.l d0,-(sp)
    eee2:	|         move.l d1,-(sp)
    eee4:	|         jsr 1749c <__divsf3>
    eeea:	|         addq.l #8,sp
    eeec:	|         move.l d0,-(sp)
    eeee:	|         move.l d2,-(sp)
    eef0:	|         jsr 178da <__subsf3>
    eef6:	|         addq.l #8,sp
    eef8:	|         move.l d0,-(sp)
    eefa:	|         jsr 1757e <__fixsfsi>
    ef00:	|         addq.l #4,sp
    ef02:	|         move.l d0,1c9bc <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef08:	|         move.l 1c9c0 <cameraY>,d0
    ef0e:	|         move.l d0,-(sp)
    ef10:	|         jsr 175e6 <__floatsisf>
    ef16:	|         addq.l #4,sp
    ef18:	|         move.l d0,d2
    ef1a:	|         move.l 1c85a <winHeight>,d0
    ef20:	|         lsr.l #1,d0
    ef22:	|         move.l d0,-(sp)
    ef24:	|         jsr 1760e <__floatunsisf>
    ef2a:	|         addq.l #4,sp
    ef2c:	|         move.l d0,d1
    ef2e:	|         move.l 1c2a0 <cameraZoom>,d0
    ef34:	|         move.l d0,-(sp)
    ef36:	|         move.l d1,-(sp)
    ef38:	|         jsr 1749c <__divsf3>
    ef3e:	|         addq.l #8,sp
    ef40:	|         move.l d0,-(sp)
    ef42:	|         move.l d2,-(sp)
    ef44:	|         jsr 178da <__subsf3>
    ef4a:	|         addq.l #8,sp
    ef4c:	|         move.l d0,-(sp)
    ef4e:	|         jsr 1757e <__fixsfsi>
    ef54:	|         addq.l #4,sp
    ef56:	|         move.l d0,1c9c0 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ef5c:	|         move.l 1c9bc <cameraX>,d0
    ef62:	|     /-- bpl.s ef6e <builtIn_aimCamera+0x12e>
    ef64:	|     |   clr.l 1c9bc <cameraX>
    ef6a:	|  /--|-- bra.w f024 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ef6e:	|  |  \-> move.l 1c9bc <cameraX>,d0
    ef74:	|  |      move.l d0,-(sp)
    ef76:	|  |      jsr 175e6 <__floatsisf>
    ef7c:	|  |      addq.l #4,sp
    ef7e:	|  |      move.l d0,d2
    ef80:	|  |      move.l 1c99e <sceneWidth>,d0
    ef86:	|  |      move.l d0,-(sp)
    ef88:	|  |      jsr 1760e <__floatunsisf>
    ef8e:	|  |      addq.l #4,sp
    ef90:	|  |      move.l d0,d3
    ef92:	|  |      move.l 1c856 <winWidth>,d0
    ef98:	|  |      move.l d0,-(sp)
    ef9a:	|  |      jsr 1760e <__floatunsisf>
    efa0:	|  |      addq.l #4,sp
    efa2:	|  |      move.l d0,d1
    efa4:	|  |      move.l 1c2a0 <cameraZoom>,d0
    efaa:	|  |      move.l d0,-(sp)
    efac:	|  |      move.l d1,-(sp)
    efae:	|  |      jsr 1749c <__divsf3>
    efb4:	|  |      addq.l #8,sp
    efb6:	|  |      move.l d0,-(sp)
    efb8:	|  |      move.l d3,-(sp)
    efba:	|  |      jsr 178da <__subsf3>
    efc0:	|  |      addq.l #8,sp
    efc2:	|  |      move.l d0,-(sp)
    efc4:	|  |      move.l d2,-(sp)
    efc6:	|  |      jsr 17752 <__gtsf2>
    efcc:	|  |      addq.l #8,sp
    efce:	|  |      tst.l d0
    efd0:	|  +----- ble.s f024 <builtIn_aimCamera+0x1e4>
    efd2:	|  |      move.l 1c99e <sceneWidth>,d0
    efd8:	|  |      move.l d0,-(sp)
    efda:	|  |      jsr 1760e <__floatunsisf>
    efe0:	|  |      addq.l #4,sp
    efe2:	|  |      move.l d0,d2
    efe4:	|  |      move.l 1c856 <winWidth>,d0
    efea:	|  |      move.l d0,-(sp)
    efec:	|  |      jsr 1760e <__floatunsisf>
    eff2:	|  |      addq.l #4,sp
    eff4:	|  |      move.l d0,d1
    eff6:	|  |      move.l 1c2a0 <cameraZoom>,d0
    effc:	|  |      move.l d0,-(sp)
    effe:	|  |      move.l d1,-(sp)
    f000:	|  |      jsr 1749c <__divsf3>
    f006:	|  |      addq.l #8,sp
    f008:	|  |      move.l d0,-(sp)
    f00a:	|  |      move.l d2,-(sp)
    f00c:	|  |      jsr 178da <__subsf3>
    f012:	|  |      addq.l #8,sp
    f014:	|  |      move.l d0,-(sp)
    f016:	|  |      jsr 1757e <__fixsfsi>
    f01c:	|  |      addq.l #4,sp
    f01e:	|  |      move.l d0,1c9bc <cameraX>
	if (cameraY < 0) cameraY = 0;
    f024:	|  \----> move.l 1c9c0 <cameraY>,d0
    f02a:	|     /-- bpl.s f036 <builtIn_aimCamera+0x1f6>
    f02c:	|     |   clr.l 1c9c0 <cameraY>
    f032:	|  /--|-- bra.w f0ec <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f036:	|  |  \-> move.l 1c9c0 <cameraY>,d0
    f03c:	|  |      move.l d0,-(sp)
    f03e:	|  |      jsr 175e6 <__floatsisf>
    f044:	|  |      addq.l #4,sp
    f046:	|  |      move.l d0,d2
    f048:	|  |      move.l 1c9a2 <sceneHeight>,d0
    f04e:	|  |      move.l d0,-(sp)
    f050:	|  |      jsr 1760e <__floatunsisf>
    f056:	|  |      addq.l #4,sp
    f058:	|  |      move.l d0,d3
    f05a:	|  |      move.l 1c85a <winHeight>,d0
    f060:	|  |      move.l d0,-(sp)
    f062:	|  |      jsr 1760e <__floatunsisf>
    f068:	|  |      addq.l #4,sp
    f06a:	|  |      move.l d0,d1
    f06c:	|  |      move.l 1c2a0 <cameraZoom>,d0
    f072:	|  |      move.l d0,-(sp)
    f074:	|  |      move.l d1,-(sp)
    f076:	|  |      jsr 1749c <__divsf3>
    f07c:	|  |      addq.l #8,sp
    f07e:	|  |      move.l d0,-(sp)
    f080:	|  |      move.l d3,-(sp)
    f082:	|  |      jsr 178da <__subsf3>
    f088:	|  |      addq.l #8,sp
    f08a:	|  |      move.l d0,-(sp)
    f08c:	|  |      move.l d2,-(sp)
    f08e:	|  |      jsr 17752 <__gtsf2>
    f094:	|  |      addq.l #8,sp
    f096:	|  |      tst.l d0
    f098:	|  +----- ble.s f0ec <builtIn_aimCamera+0x2ac>
    f09a:	|  |      move.l 1c9a2 <sceneHeight>,d0
    f0a0:	|  |      move.l d0,-(sp)
    f0a2:	|  |      jsr 1760e <__floatunsisf>
    f0a8:	|  |      addq.l #4,sp
    f0aa:	|  |      move.l d0,d2
    f0ac:	|  |      move.l 1c85a <winHeight>,d0
    f0b2:	|  |      move.l d0,-(sp)
    f0b4:	|  |      jsr 1760e <__floatunsisf>
    f0ba:	|  |      addq.l #4,sp
    f0bc:	|  |      move.l d0,d1
    f0be:	|  |      move.l 1c2a0 <cameraZoom>,d0
    f0c4:	|  |      move.l d0,-(sp)
    f0c6:	|  |      move.l d1,-(sp)
    f0c8:	|  |      jsr 1749c <__divsf3>
    f0ce:	|  |      addq.l #8,sp
    f0d0:	|  |      move.l d0,-(sp)
    f0d2:	|  |      move.l d2,-(sp)
    f0d4:	|  |      jsr 178da <__subsf3>
    f0da:	|  |      addq.l #8,sp
    f0dc:	|  |      move.l d0,-(sp)
    f0de:	|  |      jsr 1757e <__fixsfsi>
    f0e4:	|  |      addq.l #4,sp
    f0e6:	|  |      move.l d0,1c9c0 <cameraY>
	return BR_CONTINUE;
    f0ec:	|  \----> moveq #2,d0
}
    f0ee:	\-------> move.l (sp)+,d2
    f0f0:	          move.l (sp)+,d3
    f0f2:	          rts

0000f0f4 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f0f4:	       subq.l #4,sp
    f0f6:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0f8:	       movea.l 16(sp),a0
    f0fc:	       move.l 24(a0),d0
    f100:	       move.l d0,-(sp)
    f102:	       pea 1 <_start+0x1>
    f106:	       moveq #12,d0
    f108:	       add.l sp,d0
    f10a:	       move.l d0,-(sp)
    f10c:	       jsr 1474c <getValueType>
    f112:	       lea 12(sp),sp
    f116:	       tst.w d0
    f118:	   /-- bne.s f120 <builtIn_zoomCamera+0x2c>
    f11a:	   |   moveq #1,d0
    f11c:	/--|-- bra.w f31a <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f120:	|  \-> moveq #24,d0
    f122:	|      add.l 16(sp),d0
    f126:	|      move.l d0,-(sp)
    f128:	|      jsr 150d0 <trimStack>
    f12e:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f130:	|      move.l 1c8be <input+0xa>,d0
    f136:	|      move.l d0,-(sp)
    f138:	|      jsr 175e6 <__floatsisf>
    f13e:	|      addq.l #4,sp
    f140:	|      move.l d0,d1
    f142:	|      move.l 1c2a0 <cameraZoom>,d0
    f148:	|      move.l d0,-(sp)
    f14a:	|      move.l d1,-(sp)
    f14c:	|      jsr 17698 <__mulsf3>
    f152:	|      addq.l #8,sp
    f154:	|      move.l d0,-(sp)
    f156:	|      jsr 1757e <__fixsfsi>
    f15c:	|      addq.l #4,sp
    f15e:	|      move.l d0,1c8be <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f164:	|      move.l 1c8c2 <input+0xe>,d0
    f16a:	|      move.l d0,-(sp)
    f16c:	|      jsr 175e6 <__floatsisf>
    f172:	|      addq.l #4,sp
    f174:	|      move.l d0,d1
    f176:	|      move.l 1c2a0 <cameraZoom>,d0
    f17c:	|      move.l d0,-(sp)
    f17e:	|      move.l d1,-(sp)
    f180:	|      jsr 17698 <__mulsf3>
    f186:	|      addq.l #8,sp
    f188:	|      move.l d0,-(sp)
    f18a:	|      jsr 1757e <__fixsfsi>
    f190:	|      addq.l #4,sp
    f192:	|      move.l d0,1c8c2 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f198:	|      move.l 4(sp),d0
    f19c:	|      move.l d0,-(sp)
    f19e:	|      jsr 175e6 <__floatsisf>
    f1a4:	|      addq.l #4,sp
    f1a6:	|      move.l #1008981770,-(sp)
    f1ac:	|      move.l d0,-(sp)
    f1ae:	|      jsr 17698 <__mulsf3>
    f1b4:	|      addq.l #8,sp
    f1b6:	|      move.l d0,1c2a0 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f1bc:	|      move.l 1c856 <winWidth>,d0
    f1c2:	|      move.l d0,-(sp)
    f1c4:	|      jsr 1760e <__floatunsisf>
    f1ca:	|      addq.l #4,sp
    f1cc:	|      move.l d0,d1
    f1ce:	|      move.l 1c2a0 <cameraZoom>,d0
    f1d4:	|      move.l d0,-(sp)
    f1d6:	|      move.l d1,-(sp)
    f1d8:	|      jsr 1749c <__divsf3>
    f1de:	|      addq.l #8,sp
    f1e0:	|      move.l d0,d2
    f1e2:	|      move.l 1c99e <sceneWidth>,d0
    f1e8:	|      move.l d0,-(sp)
    f1ea:	|      jsr 1760e <__floatunsisf>
    f1f0:	|      addq.l #4,sp
    f1f2:	|      move.l d0,-(sp)
    f1f4:	|      move.l d2,-(sp)
    f1f6:	|      jsr 17752 <__gtsf2>
    f1fc:	|      addq.l #8,sp
    f1fe:	|      tst.l d0
    f200:	|  /-- ble.s f236 <builtIn_zoomCamera+0x142>
    f202:	|  |   move.l 1c856 <winWidth>,d0
    f208:	|  |   move.l d0,-(sp)
    f20a:	|  |   jsr 1760e <__floatunsisf>
    f210:	|  |   addq.l #4,sp
    f212:	|  |   move.l d0,d2
    f214:	|  |   move.l 1c99e <sceneWidth>,d0
    f21a:	|  |   move.l d0,-(sp)
    f21c:	|  |   jsr 1760e <__floatunsisf>
    f222:	|  |   addq.l #4,sp
    f224:	|  |   move.l d0,-(sp)
    f226:	|  |   move.l d2,-(sp)
    f228:	|  |   jsr 1749c <__divsf3>
    f22e:	|  |   addq.l #8,sp
    f230:	|  |   move.l d0,1c2a0 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f236:	|  \-> move.l 1c85a <winHeight>,d0
    f23c:	|      move.l d0,-(sp)
    f23e:	|      jsr 1760e <__floatunsisf>
    f244:	|      addq.l #4,sp
    f246:	|      move.l d0,d1
    f248:	|      move.l 1c2a0 <cameraZoom>,d0
    f24e:	|      move.l d0,-(sp)
    f250:	|      move.l d1,-(sp)
    f252:	|      jsr 1749c <__divsf3>
    f258:	|      addq.l #8,sp
    f25a:	|      move.l d0,d2
    f25c:	|      move.l 1c9a2 <sceneHeight>,d0
    f262:	|      move.l d0,-(sp)
    f264:	|      jsr 1760e <__floatunsisf>
    f26a:	|      addq.l #4,sp
    f26c:	|      move.l d0,-(sp)
    f26e:	|      move.l d2,-(sp)
    f270:	|      jsr 17752 <__gtsf2>
    f276:	|      addq.l #8,sp
    f278:	|      tst.l d0
    f27a:	|  /-- ble.s f2b0 <builtIn_zoomCamera+0x1bc>
    f27c:	|  |   move.l 1c85a <winHeight>,d0
    f282:	|  |   move.l d0,-(sp)
    f284:	|  |   jsr 1760e <__floatunsisf>
    f28a:	|  |   addq.l #4,sp
    f28c:	|  |   move.l d0,d2
    f28e:	|  |   move.l 1c9a2 <sceneHeight>,d0
    f294:	|  |   move.l d0,-(sp)
    f296:	|  |   jsr 1760e <__floatunsisf>
    f29c:	|  |   addq.l #4,sp
    f29e:	|  |   move.l d0,-(sp)
    f2a0:	|  |   move.l d2,-(sp)
    f2a2:	|  |   jsr 1749c <__divsf3>
    f2a8:	|  |   addq.l #8,sp
    f2aa:	|  |   move.l d0,1c2a0 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f2b0:	|  \-> move.l 1c8be <input+0xa>,d0
    f2b6:	|      move.l d0,-(sp)
    f2b8:	|      jsr 175e6 <__floatsisf>
    f2be:	|      addq.l #4,sp
    f2c0:	|      move.l d0,d1
    f2c2:	|      move.l 1c2a0 <cameraZoom>,d0
    f2c8:	|      move.l d0,-(sp)
    f2ca:	|      move.l d1,-(sp)
    f2cc:	|      jsr 1749c <__divsf3>
    f2d2:	|      addq.l #8,sp
    f2d4:	|      move.l d0,-(sp)
    f2d6:	|      jsr 1757e <__fixsfsi>
    f2dc:	|      addq.l #4,sp
    f2de:	|      move.l d0,1c8be <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f2e4:	|      move.l 1c8c2 <input+0xe>,d0
    f2ea:	|      move.l d0,-(sp)
    f2ec:	|      jsr 175e6 <__floatsisf>
    f2f2:	|      addq.l #4,sp
    f2f4:	|      move.l d0,d1
    f2f6:	|      move.l 1c2a0 <cameraZoom>,d0
    f2fc:	|      move.l d0,-(sp)
    f2fe:	|      move.l d1,-(sp)
    f300:	|      jsr 1749c <__divsf3>
    f306:	|      addq.l #8,sp
    f308:	|      move.l d0,-(sp)
    f30a:	|      jsr 1757e <__fixsfsi>
    f310:	|      addq.l #4,sp
    f312:	|      move.l d0,1c8c2 <input+0xe>

	return BR_CONTINUE;
    f318:	|      moveq #2,d0
}
    f31a:	\----> move.l (sp)+,d2
    f31c:	       addq.l #4,sp
    f31e:	       rts

0000f320 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f320:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f322:	             tst.l 8(sp)
    f326:	         /-- bne.s f33a <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f328:	         |   pea 197ee <PutChar+0x1b98>
    f32e:	         |   jsr 171b4 <KPrintF>
    f334:	         |   addq.l #4,sp
		return BR_ERROR;
    f336:	         |   moveq #1,d0
    f338:	/--------|-- bra.s f39a <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f33a:	|        \-> jsr 15d74 <rand>
    f340:	|            move.l d0,d1
    f342:	|            move.l 8(sp),d0
    f346:	|            move.l d0,-(sp)
    f348:	|            move.l d1,-(sp)
    f34a:	|            jsr 17c1a <__umodsi3>
    f350:	|            addq.l #8,sp
    f352:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f354:	|     /----- bra.s f388 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f356:	|  /--|----> move.l (sp),d0
    f358:	|  |  |      cmp.l 8(sp),d0
    f35c:	|  |  |  /-- bne.s f378 <builtIn_pickOne+0x58>
    f35e:	|  |  |  |   moveq #28,d0
    f360:	|  |  |  |   add.l 12(sp),d0
    f364:	|  |  |  |   movea.l 12(sp),a0
    f368:	|  |  |  |   move.l 24(a0),d1
    f36c:	|  |  |  |   move.l d0,-(sp)
    f36e:	|  |  |  |   move.l d1,-(sp)
    f370:	|  |  |  |   jsr 14c06 <copyVariable>
    f376:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f378:	|  |  |  \-> moveq #24,d0
    f37a:	|  |  |      add.l 12(sp),d0
    f37e:	|  |  |      move.l d0,-(sp)
    f380:	|  |  |      jsr 150d0 <trimStack>
    f386:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f388:	|  |  \----> move.l 8(sp),d0
    f38c:	|  |         move.l d0,d1
    f38e:	|  |         subq.l #1,d1
    f390:	|  |         move.l d1,8(sp)
    f394:	|  |         tst.l d0
    f396:	|  \-------- bne.s f356 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f398:	|            moveq #2,d0
}
    f39a:	\----------> addq.l #4,sp
    f39c:	             rts

0000f39e <builtIn_substring>:

builtIn(substring)
{
    f39e:	       lea -40(sp),sp
    f3a2:	       move.l a6,-(sp)
    f3a4:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3a6:	       movea.l 56(sp),a0
    f3aa:	       move.l 24(a0),d0
    f3ae:	       move.l d0,-(sp)
    f3b0:	       pea 1 <_start+0x1>
    f3b4:	       lea 16(sp),a0
    f3b8:	       move.l a0,-(sp)
    f3ba:	       jsr 1474c <getValueType>
    f3c0:	       lea 12(sp),sp
    f3c4:	       tst.w d0
    f3c6:	   /-- bne.s f3ce <builtIn_substring+0x30>
    f3c8:	   |   moveq #1,d0
    f3ca:	/--|-- bra.w f546 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f3ce:	|  \-> moveq #24,d0
    f3d0:	|      add.l 56(sp),d0
    f3d4:	|      move.l d0,-(sp)
    f3d6:	|      jsr 150d0 <trimStack>
    f3dc:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3de:	|      movea.l 56(sp),a0
    f3e2:	|      move.l 24(a0),d0
    f3e6:	|      move.l d0,-(sp)
    f3e8:	|      pea 1 <_start+0x1>
    f3ec:	|      lea 20(sp),a0
    f3f0:	|      move.l a0,-(sp)
    f3f2:	|      jsr 1474c <getValueType>
    f3f8:	|      lea 12(sp),sp
    f3fc:	|      tst.w d0
    f3fe:	|  /-- bne.s f406 <builtIn_substring+0x68>
    f400:	|  |   moveq #1,d0
    f402:	+--|-- bra.w f546 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f406:	|  \-> moveq #24,d0
    f408:	|      add.l 56(sp),d0
    f40c:	|      move.l d0,-(sp)
    f40e:	|      jsr 150d0 <trimStack>
    f414:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f416:	|      movea.l 56(sp),a0
    f41a:	|      move.l 24(a0),d0
    f41e:	|      move.l d0,-(sp)
    f420:	|      jsr 14d22 <getTextFromAnyVar>
    f426:	|      addq.l #4,sp
    f428:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f42c:	|      moveq #24,d0
    f42e:	|      add.l 56(sp),d0
    f432:	|      move.l d0,-(sp)
    f434:	|      jsr 150d0 <trimStack>
    f43a:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f43c:	|      move.l 44(sp),-(sp)
    f440:	|      jsr 13c38 <strlen>
    f446:	|      addq.l #4,sp
    f448:	|      move.l d0,d1
    f44a:	|      move.l 12(sp),d0
    f44e:	|      movea.l d0,a0
    f450:	|      move.l 8(sp),d0
    f454:	|      add.l a0,d0
    f456:	|      cmp.l d1,d0
    f458:	|  /-- bls.s f48e <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f45a:	|  |   move.l 44(sp),-(sp)
    f45e:	|  |   jsr 13c38 <strlen>
    f464:	|  |   addq.l #4,sp
    f466:	|  |   move.l d0,d1
    f468:	|  |   move.l 12(sp),d0
    f46c:	|  |   sub.l d0,d1
    f46e:	|  |   move.l d1,d0
    f470:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f474:	|  |   move.l 44(sp),-(sp)
    f478:	|  |   jsr 13c38 <strlen>
    f47e:	|  |   addq.l #4,sp
    f480:	|  |   move.l d0,d1
    f482:	|  |   move.l 12(sp),d0
    f486:	|  |   cmp.l d1,d0
    f488:	|  +-- bls.s f48e <builtIn_substring+0xf0>
            start = 0;
    f48a:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f48e:	|  \-> move.l 8(sp),d0
    f492:	|  /-- bpl.s f498 <builtIn_substring+0xfa>
        length = 0;
    f494:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f498:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f49e:	|      move.l 12(sp),d1
    f4a2:	|      move.l 8(sp),d0
    f4a6:	|      move.l d1,d2
    f4a8:	|      add.l d0,d2
    f4aa:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f4ae:	|      move.l 36(sp),d0
    f4b2:	|      sub.l 40(sp),d0
    f4b6:	|      addq.l #1,d0
    f4b8:	|      move.l d0,32(sp)
    f4bc:	|      clr.l 28(sp)
    f4c0:	|      move.l 1c902 <SysBase>,d0
    f4c6:	|      movea.l d0,a6
    f4c8:	|      move.l 32(sp),d0
    f4cc:	|      move.l 28(sp),d1
    f4d0:	|      jsr -684(a6)
    f4d4:	|      move.l d0,24(sp)
    f4d8:	|      move.l 24(sp),d0
    f4dc:	|      move.l d0,20(sp)
    if (!newString) {
    f4e0:	|  /-- bne.s f4e6 <builtIn_substring+0x148>
        return BR_ERROR;
    f4e2:	|  |   moveq #1,d0
    f4e4:	+--|-- bra.s f546 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f4e6:	|  \-> move.l 36(sp),d0
    f4ea:	|      sub.l 40(sp),d0
    f4ee:	|      move.l d0,d1
    f4f0:	|      move.l 40(sp),d0
    f4f4:	|      add.l 44(sp),d0
    f4f8:	|      move.l d1,-(sp)
    f4fa:	|      move.l d0,-(sp)
    f4fc:	|      move.l 28(sp),-(sp)
    f500:	|      jsr 17168 <memcpy>
    f506:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f50a:	|      move.l 36(sp),d0
    f50e:	|      sub.l 40(sp),d0
    f512:	|      movea.l 20(sp),a0
    f516:	|      adda.l d0,a0
    f518:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f51a:	|      moveq #28,d0
    f51c:	|      add.l 56(sp),d0
    f520:	|      move.l 20(sp),-(sp)
    f524:	|      move.l d0,-(sp)
    f526:	|      jsr 1496e <makeTextVar>
    f52c:	|      addq.l #8,sp
    FreeVec(newString);
    f52e:	|      move.l 20(sp),16(sp)
    f534:	|      move.l 1c902 <SysBase>,d0
    f53a:	|      movea.l d0,a6
    f53c:	|      movea.l 16(sp),a1
    f540:	|      jsr -690(a6)
    return BR_CONTINUE;
    f544:	|      moveq #2,d0
}
    f546:	\----> move.l (sp)+,d2
    f548:	       movea.l (sp)+,a6
    f54a:	       lea 40(sp),sp
    f54e:	       rts

0000f550 <builtIn_stringLength>:

builtIn(stringLength)
{
    f550:	subq.l #8,sp
    f552:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f554:	movea.l 20(sp),a0
    f558:	move.l 24(a0),d0
    f55c:	move.l d0,-(sp)
    f55e:	jsr 14d22 <getTextFromAnyVar>
    f564:	addq.l #4,sp
    f566:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f56a:	moveq #24,d0
    f56c:	add.l 20(sp),d0
    f570:	move.l d0,-(sp)
    f572:	jsr 150d0 <trimStack>
    f578:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f57a:	move.l 8(sp),-(sp)
    f57e:	jsr 13c38 <strlen>
    f584:	addq.l #4,sp
    f586:	move.l d0,d1
    f588:	moveq #28,d0
    f58a:	add.l 20(sp),d0
    f58e:	move.l d1,-(sp)
    f590:	pea 1 <_start+0x1>
    f594:	move.l d0,-(sp)
    f596:	jsr 1503e <setVariable>
    f59c:	lea 12(sp),sp
	FreeVec(newText);
    f5a0:	move.l 8(sp),4(sp)
    f5a6:	move.l 1c902 <SysBase>,d0
    f5ac:	movea.l d0,a6
    f5ae:	movea.l 4(sp),a1
    f5b2:	jsr -690(a6)
	return BR_CONTINUE;
    f5b6:	moveq #2,d0
}
    f5b8:	movea.l (sp)+,a6
    f5ba:	addq.l #8,sp
    f5bc:	rts

0000f5be <builtIn_newStack>:

builtIn(newStack)
{
    f5be:	             lea -12(sp),sp
    f5c2:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f5c4:	             moveq #28,d0
    f5c6:	             add.l 24(sp),d0
    f5ca:	             move.l d0,-(sp)
    f5cc:	             jsr 1499a <unlinkVar>
    f5d2:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f5d4:	             movea.l 24(sp),a0
    f5d8:	             moveq #6,d0
    f5da:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f5de:	             moveq #12,d1
    f5e0:	             move.l d1,12(sp)
    f5e4:	             clr.l 8(sp)
    f5e8:	             move.l 1c902 <SysBase>,d0
    f5ee:	             movea.l d0,a6
    f5f0:	             move.l 12(sp),d0
    f5f4:	             move.l 8(sp),d1
    f5f8:	             jsr -684(a6)
    f5fc:	             move.l d0,4(sp)
    f600:	             move.l 4(sp),d0
    f604:	             movea.l 24(sp),a0
    f608:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f60c:	             movea.l 24(sp),a0
    f610:	             move.l 32(a0),d0
    f614:	         /-- bne.s f61c <builtIn_newStack+0x5e>
    f616:	         |   moveq #1,d0
    f618:	/--------|-- bra.w f6ae <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f61c:	|        \-> movea.l 24(sp),a0
    f620:	|            movea.l 32(a0),a0
    f624:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f626:	|            movea.l 24(sp),a0
    f62a:	|            movea.l 32(a0),a0
    f62e:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f632:	|            movea.l 24(sp),a0
    f636:	|            movea.l 32(a0),a0
    f63a:	|            moveq #1,d0
    f63c:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f640:	|     /----- bra.s f69c <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f642:	|  /--|----> movea.l 24(sp),a0
    f646:	|  |  |      move.l 32(a0),d0
    f64a:	|  |  |      move.l d0,d1
    f64c:	|  |  |      movea.l 24(sp),a0
    f650:	|  |  |      move.l 24(a0),d0
    f654:	|  |  |      move.l d1,-(sp)
    f656:	|  |  |      move.l d0,-(sp)
    f658:	|  |  |      jsr 13f88 <addVarToStack>
    f65e:	|  |  |      addq.l #8,sp
    f660:	|  |  |      tst.w d0
    f662:	|  |  |  /-- bne.s f668 <builtIn_newStack+0xaa>
    f664:	|  |  |  |   moveq #1,d0
    f666:	+--|--|--|-- bra.s f6ae <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f668:	|  |  |  \-> movea.l 24(sp),a0
    f66c:	|  |  |      movea.l 32(a0),a0
    f670:	|  |  |      move.l 4(a0),d0
    f674:	|  |  |  /-- bne.s f68c <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f676:	|  |  |  |   movea.l 24(sp),a0
    f67a:	|  |  |  |   movea.l 32(a0),a1
    f67e:	|  |  |  |   movea.l 24(sp),a0
    f682:	|  |  |  |   movea.l 32(a0),a0
    f686:	|  |  |  |   move.l (a1),d0
    f688:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f68c:	|  |  |  \-> moveq #24,d0
    f68e:	|  |  |      add.l 24(sp),d0
    f692:	|  |  |      move.l d0,-(sp)
    f694:	|  |  |      jsr 150d0 <trimStack>
    f69a:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f69c:	|  |  \----> move.l 20(sp),d0
    f6a0:	|  |         move.l d0,d1
    f6a2:	|  |         subq.l #1,d1
    f6a4:	|  |         move.l d1,20(sp)
    f6a8:	|  |         tst.l d0
    f6aa:	|  \-------- bne.s f642 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f6ac:	|            moveq #2,d0
}
    f6ae:	\----------> movea.l (sp)+,a6
    f6b0:	             lea 12(sp),sp
    f6b4:	             rts

0000f6b6 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f6b6:	          movea.l 8(sp),a0
    f6ba:	          movea.l 24(a0),a0
    f6be:	          move.l (a0),d0
    f6c0:	          moveq #6,d1
    f6c2:	          cmp.l d0,d1
    f6c4:	      /-- beq.s f6e0 <builtIn_stackSize+0x2a>
    f6c6:	      |   moveq #10,d1
    f6c8:	      |   cmp.l d0,d1
    f6ca:	   /--|-- beq.s f724 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f6cc:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f6ce:	   |  |   pea 19821 <PutChar+0x1bcb>
    f6d4:	   |  |   jsr 171b4 <KPrintF>
    f6da:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f6dc:	   |  |   moveq #1,d0
    f6de:	/--|--|-- bra.s f75e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f6e0:	|  |  \-> movea.l 8(sp),a0
    f6e4:	|  |      movea.l 24(a0),a0
    f6e8:	|  |      move.l 4(a0),d0
    f6ec:	|  |      move.l d0,-(sp)
    f6ee:	|  |      jsr 150ac <stackSize>
    f6f4:	|  |      addq.l #4,sp
    f6f6:	|  |      move.l d0,d1
    f6f8:	|  |      moveq #28,d0
    f6fa:	|  |      add.l 8(sp),d0
    f6fe:	|  |      move.l d1,-(sp)
    f700:	|  |      pea 1 <_start+0x1>
    f704:	|  |      move.l d0,-(sp)
    f706:	|  |      jsr 1503e <setVariable>
    f70c:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f710:	|  |      moveq #24,d0
    f712:	|  |      add.l 8(sp),d0
    f716:	|  |      move.l d0,-(sp)
    f718:	|  |      jsr 150d0 <trimStack>
    f71e:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f720:	|  |      moveq #2,d0
    f722:	+--|----- bra.s f75e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f724:	|  \----> movea.l 8(sp),a0
    f728:	|         movea.l 24(a0),a0
    f72c:	|         movea.l 4(a0),a0
    f730:	|         move.l 4(a0),d1
    f734:	|         moveq #28,d0
    f736:	|         add.l 8(sp),d0
    f73a:	|         move.l d1,-(sp)
    f73c:	|         pea 1 <_start+0x1>
    f740:	|         move.l d0,-(sp)
    f742:	|         jsr 1503e <setVariable>
    f748:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f74c:	|         moveq #24,d0
    f74e:	|         add.l 8(sp),d0
    f752:	|         move.l d0,-(sp)
    f754:	|         jsr 150d0 <trimStack>
    f75a:	|         addq.l #4,sp
			return BR_CONTINUE;
    f75c:	|         moveq #2,d0
}
    f75e:	\-------> rts

0000f760 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f760:	       movea.l 8(sp),a0
    f764:	       movea.l 24(a0),a0
    f768:	       move.l (a0),d0
    f76a:	       moveq #6,d1
    f76c:	       cmp.l d0,d1
    f76e:	   /-- beq.s f782 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f770:	   |   pea 1984a <PutChar+0x1bf4>
    f776:	   |   jsr 171b4 <KPrintF>
    f77c:	   |   addq.l #4,sp
		return BR_ERROR;
    f77e:	   |   moveq #1,d0
    f780:	/--|-- bra.s f7b6 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f782:	|  \-> moveq #28,d0
    f784:	|      add.l 8(sp),d0
    f788:	|      movea.l 8(sp),a0
    f78c:	|      move.l 24(a0),d1
    f790:	|      move.l d0,-(sp)
    f792:	|      move.l d1,-(sp)
    f794:	|      jsr 14252 <copyStack>
    f79a:	|      addq.l #8,sp
    f79c:	|      tst.w d0
    f79e:	|  /-- bne.s f7a4 <builtIn_copyStack+0x44>
    f7a0:	|  |   moveq #1,d0
    f7a2:	+--|-- bra.s f7b6 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f7a4:	|  \-> moveq #24,d0
    f7a6:	|      add.l 8(sp),d0
    f7aa:	|      move.l d0,-(sp)
    f7ac:	|      jsr 150d0 <trimStack>
    f7b2:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7b4:	|      moveq #2,d0
}
    f7b6:	\----> rts

0000f7b8 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7b8:	       movea.l 8(sp),a0
    f7bc:	       movea.l 24(a0),a0
    f7c0:	       movea.l 8(a0),a0
    f7c4:	       move.l (a0),d0
    f7c6:	       moveq #6,d1
    f7c8:	       cmp.l d0,d1
    f7ca:	   /-- beq.s f7e0 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f7cc:	   |   pea 19863 <PutChar+0x1c0d>
    f7d2:	   |   jsr 171b4 <KPrintF>
    f7d8:	   |   addq.l #4,sp
		return BR_ERROR;
    f7da:	   |   moveq #1,d0
    f7dc:	/--|-- bra.w f86e <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f7e0:	|  \-> movea.l 8(sp),a0
    f7e4:	|      movea.l 24(a0),a0
    f7e8:	|      movea.l 8(a0),a0
    f7ec:	|      move.l 4(a0),d0
    f7f0:	|      move.l d0,d1
    f7f2:	|      movea.l 8(sp),a0
    f7f6:	|      move.l 24(a0),d0
    f7fa:	|      move.l d1,-(sp)
    f7fc:	|      move.l d0,-(sp)
    f7fe:	|      jsr 13f88 <addVarToStack>
    f804:	|      addq.l #8,sp
    f806:	|      tst.w d0
    f808:	|  /-- bne.s f80e <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f80a:	|  |   moveq #1,d0
    f80c:	+--|-- bra.s f86e <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f80e:	|  \-> movea.l 8(sp),a0
    f812:	|      movea.l 24(a0),a0
    f816:	|      movea.l 8(a0),a0
    f81a:	|      movea.l 4(a0),a0
    f81e:	|      movea.l (a0),a0
    f820:	|      move.l 8(a0),d0
    f824:	|  /-- bne.s f84c <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f826:	|  |   movea.l 8(sp),a0
    f82a:	|  |   movea.l 24(a0),a0
    f82e:	|  |   movea.l 8(a0),a0
    f832:	|  |   movea.l 4(a0),a1
    f836:	|  |   movea.l 8(sp),a0
    f83a:	|  |   movea.l 24(a0),a0
    f83e:	|  |   movea.l 8(a0),a0
    f842:	|  |   movea.l 4(a0),a0
    f846:	|  |   move.l (a1),d0
    f848:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f84c:	|  \-> moveq #24,d0
    f84e:	|      add.l 8(sp),d0
    f852:	|      move.l d0,-(sp)
    f854:	|      jsr 150d0 <trimStack>
    f85a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f85c:	|      moveq #24,d0
    f85e:	|      add.l 8(sp),d0
    f862:	|      move.l d0,-(sp)
    f864:	|      jsr 150d0 <trimStack>
    f86a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f86c:	|      moveq #2,d0
}
    f86e:	\----> rts

0000f870 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f870:	             movea.l 8(sp),a0
    f874:	             movea.l 24(a0),a0
    f878:	             movea.l 8(a0),a0
    f87c:	             move.l (a0),d0
    f87e:	             moveq #6,d1
    f880:	             cmp.l d0,d1
    f882:	         /-- beq.s f898 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f884:	         |   pea 19863 <PutChar+0x1c0d>
    f88a:	         |   jsr 171b4 <KPrintF>
    f890:	         |   addq.l #4,sp
		return BR_ERROR;
    f892:	         |   moveq #1,d0
    f894:	/--------|-- bra.w f986 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f898:	|        \-> movea.l 8(sp),a0
    f89c:	|            movea.l 24(a0),a0
    f8a0:	|            movea.l 8(a0),a0
    f8a4:	|            movea.l 4(a0),a0
    f8a8:	|            move.l (a0),d0
    f8aa:	|     /----- bne.s f904 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f8ac:	|     |      movea.l 8(sp),a0
    f8b0:	|     |      movea.l 24(a0),a0
    f8b4:	|     |      movea.l 8(a0),a0
    f8b8:	|     |      move.l 4(a0),d0
    f8bc:	|     |      move.l d0,d1
    f8be:	|     |      movea.l 8(sp),a0
    f8c2:	|     |      move.l 24(a0),d0
    f8c6:	|     |      move.l d1,-(sp)
    f8c8:	|     |      move.l d0,-(sp)
    f8ca:	|     |      jsr 13f88 <addVarToStack>
    f8d0:	|     |      addq.l #8,sp
    f8d2:	|     |      tst.w d0
    f8d4:	|     |  /-- bne.s f8dc <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f8d6:	|     |  |   moveq #1,d0
    f8d8:	+-----|--|-- bra.w f986 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f8dc:	|     |  \-> movea.l 8(sp),a0
    f8e0:	|     |      movea.l 24(a0),a0
    f8e4:	|     |      movea.l 8(a0),a0
    f8e8:	|     |      movea.l 4(a0),a1
    f8ec:	|     |      movea.l 8(sp),a0
    f8f0:	|     |      movea.l 24(a0),a0
    f8f4:	|     |      movea.l 8(a0),a0
    f8f8:	|     |      movea.l 4(a0),a0
    f8fc:	|     |      move.l (a1),d0
    f8fe:	|     |      move.l d0,4(a0)
    f902:	|  /--|----- bra.s f964 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f904:	|  |  \----> movea.l 8(sp),a0
    f908:	|  |         movea.l 24(a0),a0
    f90c:	|  |         movea.l 8(a0),a0
    f910:	|  |         movea.l 4(a0),a0
    f914:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f918:	|  |         move.l d0,d1
    f91a:	|  |         addq.l #8,d1
    f91c:	|  |         movea.l 8(sp),a0
    f920:	|  |         move.l 24(a0),d0
    f924:	|  |         move.l d1,-(sp)
    f926:	|  |         move.l d0,-(sp)
    f928:	|  |         jsr 13f88 <addVarToStack>
    f92e:	|  |         addq.l #8,sp
    f930:	|  |         tst.w d0
    f932:	|  |     /-- bne.s f938 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f934:	|  |     |   moveq #1,d0
    f936:	+--|-----|-- bra.s f986 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f938:	|  |     \-> movea.l 8(sp),a0
    f93c:	|  |         movea.l 24(a0),a0
    f940:	|  |         movea.l 8(a0),a0
    f944:	|  |         movea.l 4(a0),a0
    f948:	|  |         movea.l 4(a0),a1
    f94c:	|  |         movea.l 8(sp),a0
    f950:	|  |         movea.l 24(a0),a0
    f954:	|  |         movea.l 8(a0),a0
    f958:	|  |         movea.l 4(a0),a0
    f95c:	|  |         move.l 8(a1),d0
    f960:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f964:	|  \-------> moveq #24,d0
    f966:	|            add.l 8(sp),d0
    f96a:	|            move.l d0,-(sp)
    f96c:	|            jsr 150d0 <trimStack>
    f972:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f974:	|            moveq #24,d0
    f976:	|            add.l 8(sp),d0
    f97a:	|            move.l d0,-(sp)
    f97c:	|            jsr 150d0 <trimStack>
    f982:	|            addq.l #4,sp
	return BR_CONTINUE;
    f984:	|            moveq #2,d0
}
    f986:	\----------> rts

0000f988 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f988:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f98a:	       movea.l 12(sp),a0
    f98e:	       movea.l 24(a0),a0
    f992:	       movea.l 8(a0),a0
    f996:	       move.l (a0),d0
    f998:	       moveq #6,d1
    f99a:	       cmp.l d0,d1
    f99c:	   /-- beq.s f9b2 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f99e:	   |   pea 1984a <PutChar+0x1bf4>
    f9a4:	   |   jsr 171b4 <KPrintF>
    f9aa:	   |   addq.l #4,sp
		return BR_ERROR;
    f9ac:	   |   moveq #1,d0
    f9ae:	/--|-- bra.w fa48 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f9b2:	|  \-> movea.l 12(sp),a0
    f9b6:	|      movea.l 24(a0),a0
    f9ba:	|      movea.l 8(a0),a0
    f9be:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9c2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f9c4:	|      movea.l 12(sp),a0
    f9c8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9cc:	|      clr.l -(sp)
    f9ce:	|      move.l d1,-(sp)
    f9d0:	|      move.l d0,-(sp)
    f9d2:	|      jsr 14328 <deleteVarFromStack>
    f9d8:	|      lea 12(sp),sp
    f9dc:	|      move.l d0,d1
    f9de:	|      moveq #28,d0
    f9e0:	|      add.l 12(sp),d0
    f9e4:	|      move.l d1,-(sp)
    f9e6:	|      pea 1 <_start+0x1>
    f9ea:	|      move.l d0,-(sp)
    f9ec:	|      jsr 1503e <setVariable>
    f9f2:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f9f6:	|      movea.l 12(sp),a0
    f9fa:	|      movea.l 24(a0),a0
    f9fe:	|      movea.l 8(a0),a0
    fa02:	|      movea.l 4(a0),a0
    fa06:	|      move.l (a0),d0
    fa08:	|      movea.l 12(sp),a0
    fa0c:	|      movea.l 24(a0),a0
    fa10:	|      movea.l 8(a0),a0
    fa14:	|      movea.l 4(a0),a2
    fa18:	|      move.l d0,-(sp)
    fa1a:	|      jsr 15088 <stackFindLast>
    fa20:	|      addq.l #4,sp
    fa22:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fa26:	|      moveq #24,d0
    fa28:	|      add.l 12(sp),d0
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      jsr 150d0 <trimStack>
    fa34:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa36:	|      moveq #24,d0
    fa38:	|      add.l 12(sp),d0
    fa3c:	|      move.l d0,-(sp)
    fa3e:	|      jsr 150d0 <trimStack>
    fa44:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa46:	|      moveq #2,d0
}
    fa48:	\----> movea.l (sp)+,a2
    fa4a:	       rts

0000fa4c <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fa4c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa4e:	       movea.l 12(sp),a0
    fa52:	       movea.l 24(a0),a0
    fa56:	       movea.l 8(a0),a0
    fa5a:	       move.l (a0),d0
    fa5c:	       moveq #6,d1
    fa5e:	       cmp.l d0,d1
    fa60:	   /-- beq.s fa76 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa62:	   |   pea 1984a <PutChar+0x1bf4>
    fa68:	   |   jsr 171b4 <KPrintF>
    fa6e:	   |   addq.l #4,sp
		return BR_ERROR;
    fa70:	   |   moveq #1,d0
    fa72:	/--|-- bra.w fb0e <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fa76:	|  \-> movea.l 12(sp),a0
    fa7a:	|      movea.l 24(a0),a0
    fa7e:	|      movea.l 8(a0),a0
    fa82:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa86:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa88:	|      movea.l 12(sp),a0
    fa8c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa90:	|      pea 1 <_start+0x1>
    fa94:	|      move.l d1,-(sp)
    fa96:	|      move.l d0,-(sp)
    fa98:	|      jsr 14328 <deleteVarFromStack>
    fa9e:	|      lea 12(sp),sp
    faa2:	|      move.l d0,d1
    faa4:	|      moveq #28,d0
    faa6:	|      add.l 12(sp),d0
    faaa:	|      move.l d1,-(sp)
    faac:	|      pea 1 <_start+0x1>
    fab0:	|      move.l d0,-(sp)
    fab2:	|      jsr 1503e <setVariable>
    fab8:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fabc:	|      movea.l 12(sp),a0
    fac0:	|      movea.l 24(a0),a0
    fac4:	|      movea.l 8(a0),a0
    fac8:	|      movea.l 4(a0),a0
    facc:	|      move.l (a0),d0
    face:	|      movea.l 12(sp),a0
    fad2:	|      movea.l 24(a0),a0
    fad6:	|      movea.l 8(a0),a0
    fada:	|      movea.l 4(a0),a2
    fade:	|      move.l d0,-(sp)
    fae0:	|      jsr 15088 <stackFindLast>
    fae6:	|      addq.l #4,sp
    fae8:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    faec:	|      moveq #24,d0
    faee:	|      add.l 12(sp),d0
    faf2:	|      move.l d0,-(sp)
    faf4:	|      jsr 150d0 <trimStack>
    fafa:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fafc:	|      moveq #24,d0
    fafe:	|      add.l 12(sp),d0
    fb02:	|      move.l d0,-(sp)
    fb04:	|      jsr 150d0 <trimStack>
    fb0a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb0c:	|      moveq #2,d0
}
    fb0e:	\----> movea.l (sp)+,a2
    fb10:	       rts

0000fb12 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb12:	       movea.l 8(sp),a0
    fb16:	       movea.l 24(a0),a0
    fb1a:	       move.l (a0),d0
    fb1c:	       moveq #6,d1
    fb1e:	       cmp.l d0,d1
    fb20:	   /-- beq.s fb34 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb22:	   |   pea 1984a <PutChar+0x1bf4>
    fb28:	   |   jsr 171b4 <KPrintF>
    fb2e:	   |   addq.l #4,sp
		return BR_ERROR;
    fb30:	   |   moveq #1,d0
    fb32:	/--|-- bra.s fb9e <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fb34:	|  \-> movea.l 8(sp),a0
    fb38:	|      movea.l 24(a0),a0
    fb3c:	|      movea.l 4(a0),a0
    fb40:	|      move.l (a0),d0
    fb42:	|  /-- bne.s fb56 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fb44:	|  |   pea 1987b <PutChar+0x1c25>
    fb4a:	|  |   jsr 171b4 <KPrintF>
    fb50:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb52:	|  |   moveq #1,d0
    fb54:	+--|-- bra.s fb9e <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fb56:	|  \-> moveq #28,d0
    fb58:	|      add.l 8(sp),d0
    fb5c:	|      movea.l 8(sp),a0
    fb60:	|      movea.l 24(a0),a0
    fb64:	|      movea.l 4(a0),a0
    fb68:	|      move.l (a0),d1
    fb6a:	|      move.l d0,-(sp)
    fb6c:	|      move.l d1,-(sp)
    fb6e:	|      jsr 14c06 <copyVariable>
    fb74:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fb76:	|      movea.l 8(sp),a0
    fb7a:	|      movea.l 24(a0),a0
    fb7e:	|      move.l 4(a0),d0
    fb82:	|      move.l d0,-(sp)
    fb84:	|      jsr 150d0 <trimStack>
    fb8a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb8c:	|      moveq #24,d0
    fb8e:	|      add.l 8(sp),d0
    fb92:	|      move.l d0,-(sp)
    fb94:	|      jsr 150d0 <trimStack>
    fb9a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb9c:	|      moveq #2,d0
}
    fb9e:	\----> rts

0000fba0 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fba0:	       movea.l 8(sp),a0
    fba4:	       movea.l 24(a0),a0
    fba8:	       move.l (a0),d0
    fbaa:	       moveq #6,d1
    fbac:	       cmp.l d0,d1
    fbae:	   /-- beq.s fbc2 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbb0:	   |   pea 1984a <PutChar+0x1bf4>
    fbb6:	   |   jsr 171b4 <KPrintF>
    fbbc:	   |   addq.l #4,sp
		return BR_ERROR;
    fbbe:	   |   moveq #1,d0
    fbc0:	/--|-- bra.s fc16 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbc2:	|  \-> movea.l 8(sp),a0
    fbc6:	|      movea.l 24(a0),a0
    fbca:	|      movea.l 4(a0),a0
    fbce:	|      move.l (a0),d0
    fbd0:	|  /-- bne.s fbe4 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fbd2:	|  |   pea 1987b <PutChar+0x1c25>
    fbd8:	|  |   jsr 171b4 <KPrintF>
    fbde:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbe0:	|  |   moveq #1,d0
    fbe2:	+--|-- bra.s fc16 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbe4:	|  \-> moveq #28,d0
    fbe6:	|      add.l 8(sp),d0
    fbea:	|      movea.l 8(sp),a0
    fbee:	|      movea.l 24(a0),a0
    fbf2:	|      movea.l 4(a0),a0
    fbf6:	|      move.l (a0),d1
    fbf8:	|      move.l d0,-(sp)
    fbfa:	|      move.l d1,-(sp)
    fbfc:	|      jsr 14c06 <copyVariable>
    fc02:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc04:	|      moveq #24,d0
    fc06:	|      add.l 8(sp),d0
    fc0a:	|      move.l d0,-(sp)
    fc0c:	|      jsr 150d0 <trimStack>
    fc12:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc14:	|      moveq #2,d0
}
    fc16:	\----> rts

0000fc18 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc18:	       movea.l 8(sp),a0
    fc1c:	       movea.l 24(a0),a0
    fc20:	       move.l (a0),d0
    fc22:	       moveq #6,d1
    fc24:	       cmp.l d0,d1
    fc26:	   /-- beq.s fc3a <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc28:	   |   pea 1984a <PutChar+0x1bf4>
    fc2e:	   |   jsr 171b4 <KPrintF>
    fc34:	   |   addq.l #4,sp
		return BR_ERROR;
    fc36:	   |   moveq #1,d0
    fc38:	/--|-- bra.s fc90 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc3a:	|  \-> movea.l 8(sp),a0
    fc3e:	|      movea.l 24(a0),a0
    fc42:	|      movea.l 4(a0),a0
    fc46:	|      move.l (a0),d0
    fc48:	|  /-- bne.s fc5c <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fc4a:	|  |   pea 1987b <PutChar+0x1c25>
    fc50:	|  |   jsr 171b4 <KPrintF>
    fc56:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc58:	|  |   moveq #1,d0
    fc5a:	+--|-- bra.s fc90 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fc5c:	|  \-> moveq #28,d0
    fc5e:	|      add.l 8(sp),d0
    fc62:	|      movea.l 8(sp),a0
    fc66:	|      movea.l 24(a0),a0
    fc6a:	|      movea.l 4(a0),a0
    fc6e:	|      move.l 4(a0),d1
    fc72:	|      move.l d0,-(sp)
    fc74:	|      move.l d1,-(sp)
    fc76:	|      jsr 14c06 <copyVariable>
    fc7c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc7e:	|      moveq #24,d0
    fc80:	|      add.l 8(sp),d0
    fc84:	|      move.l d0,-(sp)
    fc86:	|      jsr 150d0 <trimStack>
    fc8c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc8e:	|      moveq #2,d0
}
    fc90:	\----> rts

0000fc92 <builtIn_random>:

builtIn(random)
{
    fc92:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fc94:	       movea.l 12(sp),a0
    fc98:	       move.l 24(a0),d0
    fc9c:	       move.l d0,-(sp)
    fc9e:	       pea 1 <_start+0x1>
    fca2:	       move.l sp,d0
    fca4:	       addq.l #8,d0
    fca6:	       move.l d0,-(sp)
    fca8:	       jsr 1474c <getValueType>
    fcae:	       lea 12(sp),sp
    fcb2:	       tst.w d0
    fcb4:	   /-- bne.s fcba <builtIn_random+0x28>
		return BR_ERROR;
    fcb6:	   |   moveq #1,d0
    fcb8:	/--|-- bra.s fd04 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fcba:	|  \-> moveq #24,d0
    fcbc:	|      add.l 12(sp),d0
    fcc0:	|      move.l d0,-(sp)
    fcc2:	|      jsr 150d0 <trimStack>
    fcc8:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fcca:	|      move.l (sp),d0
    fccc:	|  /-- bgt.s fcd2 <builtIn_random+0x40>
    fcce:	|  |   moveq #1,d0
    fcd0:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fcd2:	|  \-> jsr 15d74 <rand>
    fcd8:	|      move.l d0,d1
    fcda:	|      move.l (sp),d0
    fcdc:	|      move.l d0,-(sp)
    fcde:	|      move.l d1,-(sp)
    fce0:	|      jsr 17c1a <__umodsi3>
    fce6:	|      addq.l #8,sp
    fce8:	|      move.l d0,d1
    fcea:	|      moveq #28,d0
    fcec:	|      add.l 12(sp),d0
    fcf0:	|      move.l d1,-(sp)
    fcf2:	|      pea 1 <_start+0x1>
    fcf6:	|      move.l d0,-(sp)
    fcf8:	|      jsr 1503e <setVariable>
    fcfe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd02:	|      moveq #2,d0
}
    fd04:	\----> addq.l #4,sp
    fd06:	       rts

0000fd08 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd08:	nop
    fd0a:	rts

0000fd0c <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd0c:	moveq #2,d0
}
    fd0e:	rts

0000fd10 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd10:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd12:	       movea.l 12(sp),a0
    fd16:	       move.l 24(a0),d0
    fd1a:	       move.l d0,-(sp)
    fd1c:	       pea 1 <_start+0x1>
    fd20:	       move.l sp,d0
    fd22:	       addq.l #8,d0
    fd24:	       move.l d0,-(sp)
    fd26:	       jsr 1474c <getValueType>
    fd2c:	       lea 12(sp),sp
    fd30:	       tst.w d0
    fd32:	   /-- bne.s fd46 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fd34:	   |   pea 1988e <PutChar+0x1c38>
    fd3a:	   |   jsr 171b4 <KPrintF>
    fd40:	   |   addq.l #4,sp
		return BR_ERROR;
    fd42:	   |   moveq #1,d0
    fd44:	/--|-- bra.s fd86 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fd46:	|  \-> moveq #24,d0
    fd48:	|      add.l 12(sp),d0
    fd4c:	|      move.l d0,-(sp)
    fd4e:	|      jsr 150d0 <trimStack>
    fd54:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fd56:	|      move.l (sp),d0
    fd58:	|      move.l d0,d0
    fd5a:	|      move.w d0,1c81c <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fd60:	|      move.w 1c81c <textPaletteIndex>,d0
    fd66:	|      cmpi.w #31,d0
    fd6a:	|  /-- bls.s fd84 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fd6c:	|  |   pea 198b5 <PutChar+0x1c5f>
    fd72:	|  |   jsr 171b4 <KPrintF>
    fd78:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fd7a:	|  |   clr.w 1c81c <textPaletteIndex>
		return BR_ERROR;
    fd80:	|  |   moveq #1,d0
    fd82:	+--|-- bra.s fd86 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fd84:	|  \-> moveq #2,d0
}
    fd86:	\----> addq.l #4,sp
    fd88:	       rts

0000fd8a <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fd8a:	moveq #2,d0
}
    fd8c:	rts

0000fd8e <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fd8e:	moveq #2,d0
}
    fd90:	rts

0000fd92 <builtIn_setFont>:


builtIn(setFont)
{
    fd92:	       lea -16(sp),sp
    fd96:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fd98:	       movea.l 28(sp),a0
    fd9c:	       move.l 24(a0),d0
    fda0:	       move.l d0,-(sp)
    fda2:	       pea 1 <_start+0x1>
    fda6:	       lea 12(sp),a0
    fdaa:	       move.l a0,-(sp)
    fdac:	       jsr 1474c <getValueType>
    fdb2:	       lea 12(sp),sp
    fdb6:	       tst.w d0
    fdb8:	   /-- bne.s fdc0 <builtIn_setFont+0x2e>
    fdba:	   |   moveq #1,d0
    fdbc:	/--|-- bra.w fe6e <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fdc0:	|  \-> moveq #24,d0
    fdc2:	|      add.l 28(sp),d0
    fdc6:	|      move.l d0,-(sp)
    fdc8:	|      jsr 150d0 <trimStack>
    fdce:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fdd0:	|      movea.l 28(sp),a0
    fdd4:	|      move.l 24(a0),d0
    fdd8:	|      move.l d0,-(sp)
    fdda:	|      jsr 14d22 <getTextFromAnyVar>
    fde0:	|      addq.l #4,sp
    fde2:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fde6:	|  /-- bne.s fdee <builtIn_setFont+0x5c>
    fde8:	|  |   moveq #1,d0
    fdea:	+--|-- bra.w fe6e <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fdee:	|  \-> moveq #24,d0
    fdf0:	|      add.l 28(sp),d0
    fdf4:	|      move.l d0,-(sp)
    fdf6:	|      jsr 150d0 <trimStack>
    fdfc:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fdfe:	|      movea.l 28(sp),a0
    fe02:	|      move.l 24(a0),d0
    fe06:	|      move.l d0,-(sp)
    fe08:	|      pea 5 <_start+0x5>
    fe0c:	|      lea 16(sp),a0
    fe10:	|      move.l a0,-(sp)
    fe12:	|      jsr 1474c <getValueType>
    fe18:	|      lea 12(sp),sp
    fe1c:	|      tst.w d0
    fe1e:	|  /-- bne.s fe24 <builtIn_setFont+0x92>
    fe20:	|  |   moveq #1,d0
    fe22:	+--|-- bra.s fe6e <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fe24:	|  \-> moveq #24,d0
    fe26:	|      add.l 28(sp),d0
    fe2a:	|      move.l d0,-(sp)
    fe2c:	|      jsr 150d0 <trimStack>
    fe32:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fe34:	|      move.l 4(sp),d1
    fe38:	|      move.l 8(sp),d0
    fe3c:	|      move.l d1,-(sp)
    fe3e:	|      move.l 20(sp),-(sp)
    fe42:	|      move.l d0,-(sp)
    fe44:	|      jsr 15584 <loadFont>
    fe4a:	|      lea 12(sp),sp
    fe4e:	|      tst.w d0
    fe50:	|  /-- bne.s fe56 <builtIn_setFont+0xc4>
    fe52:	|  |   moveq #1,d0
    fe54:	+--|-- bra.s fe6e <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fe56:	|  \-> move.l 16(sp),12(sp)
    fe5c:	|      move.l 1c902 <SysBase>,d0
    fe62:	|      movea.l d0,a6
    fe64:	|      movea.l 12(sp),a1
    fe68:	|      jsr -690(a6)

    return BR_CONTINUE;
    fe6c:	|      moveq #2,d0
}
    fe6e:	\----> movea.l (sp)+,a6
    fe70:	       lea 16(sp),sp
    fe74:	       rts

0000fe76 <builtIn_inFont>:

builtIn(inFont)
{
    fe76:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fe78:	       movea.l 12(sp),a0
    fe7c:	       move.l 24(a0),d0
    fe80:	       move.l d0,-(sp)
    fe82:	       jsr 14d22 <getTextFromAnyVar>
    fe88:	       addq.l #4,sp
    fe8a:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fe8c:	   /-- bne.s fe92 <builtIn_inFont+0x1c>
    fe8e:	   |   moveq #1,d0
    fe90:	/--|-- bra.s fec8 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fe92:	|  \-> moveq #24,d0
    fe94:	|      add.l 12(sp),d0
    fe98:	|      move.l d0,-(sp)
    fe9a:	|      jsr 150d0 <trimStack>
    fea0:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fea2:	|      move.l (sp),-(sp)
    fea4:	|      jsr 15572 <isInFont>
    feaa:	|      addq.l #4,sp
    feac:	|      movea.w d0,a0
    feae:	|      moveq #28,d0
    feb0:	|      add.l 12(sp),d0
    feb4:	|      move.l a0,-(sp)
    feb6:	|      pea 1 <_start+0x1>
    feba:	|      move.l d0,-(sp)
    febc:	|      jsr 1503e <setVariable>
    fec2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fec6:	|      moveq #2,d0
}
    fec8:	\----> addq.l #4,sp
    feca:	       rts

0000fecc <builtIn_pasteString>:

builtIn(pasteString)
{
    fecc:	       lea -16(sp),sp
    fed0:	       move.l a6,-(sp)
    fed2:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fed4:	       movea.l 32(sp),a0
    fed8:	       move.l 24(a0),d0
    fedc:	       move.l d0,-(sp)
    fede:	       jsr 14d22 <getTextFromAnyVar>
    fee4:	       addq.l #4,sp
    fee6:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    feea:	       moveq #24,d0
    feec:	       add.l 32(sp),d0
    fef0:	       move.l d0,-(sp)
    fef2:	       jsr 150d0 <trimStack>
    fef8:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fefa:	       movea.l 32(sp),a0
    fefe:	       move.l 24(a0),d0
    ff02:	       move.l d0,-(sp)
    ff04:	       pea 1 <_start+0x1>
    ff08:	       lea 20(sp),a0
    ff0c:	       move.l a0,-(sp)
    ff0e:	       jsr 1474c <getValueType>
    ff14:	       lea 12(sp),sp
    ff18:	       tst.w d0
    ff1a:	   /-- bne.s ff22 <builtIn_pasteString+0x56>
    ff1c:	   |   moveq #1,d0
    ff1e:	/--|-- bra.w ffc4 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff22:	|  \-> moveq #24,d0
    ff24:	|      add.l 32(sp),d0
    ff28:	|      move.l d0,-(sp)
    ff2a:	|      jsr 150d0 <trimStack>
    ff30:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff32:	|      movea.l 32(sp),a0
    ff36:	|      move.l 24(a0),d0
    ff3a:	|      move.l d0,-(sp)
    ff3c:	|      pea 1 <_start+0x1>
    ff40:	|      lea 16(sp),a0
    ff44:	|      move.l a0,-(sp)
    ff46:	|      jsr 1474c <getValueType>
    ff4c:	|      lea 12(sp),sp
    ff50:	|      tst.w d0
    ff52:	|  /-- bne.s ff58 <builtIn_pasteString+0x8c>
    ff54:	|  |   moveq #1,d0
    ff56:	+--|-- bra.s ffc4 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff58:	|  \-> moveq #24,d0
    ff5a:	|      add.l 32(sp),d0
    ff5e:	|      move.l d0,-(sp)
    ff60:	|      jsr 150d0 <trimStack>
    ff66:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ff68:	|      move.l 8(sp),d0
    ff6c:	|      cmpi.l #65535,d0
    ff72:	|  /-- bne.s ff92 <builtIn_pasteString+0xc6>
    ff74:	|  |   move.l 1c856 <winWidth>,d2
    ff7a:	|  |   move.l 20(sp),-(sp)
    ff7e:	|  |   jsr 15836 <stringWidth>
    ff84:	|  |   addq.l #4,sp
    ff86:	|  |   move.l d2,d1
    ff88:	|  |   sub.l d0,d1
    ff8a:	|  |   move.l d1,d0
    ff8c:	|  |   lsr.l #1,d0
    ff8e:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    ff92:	|  \-> move.l 12(sp),d1
    ff96:	|      move.l 8(sp),d0
    ff9a:	|      move.l d1,-(sp)
    ff9c:	|      move.l d0,-(sp)
    ff9e:	|      move.l 28(sp),-(sp)
    ffa2:	|      jsr 15758 <pasteStringToBackdrop>
    ffa8:	|      lea 12(sp),sp
    FreeVec(newText); 
    ffac:	|      move.l 20(sp),16(sp)
    ffb2:	|      move.l 1c902 <SysBase>,d0
    ffb8:	|      movea.l d0,a6
    ffba:	|      movea.l 16(sp),a1
    ffbe:	|      jsr -690(a6)
    return BR_CONTINUE;
    ffc2:	|      moveq #2,d0
}
    ffc4:	\----> move.l (sp)+,d2
    ffc6:	       movea.l (sp)+,a6
    ffc8:	       lea 16(sp),sp
    ffcc:	       rts

0000ffce <builtIn_anim>:

builtIn(anim)
{
    ffce:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    ffd2:	       moveq #1,d0
    ffd4:	       cmp.l 16(sp),d0
    ffd8:	   /-- blt.s ffee <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    ffda:	   |   pea 198df <PutChar+0x1c89>
    ffe0:	   |   jsr 171b4 <KPrintF>
    ffe6:	   |   addq.l #4,sp
		return BR_ERROR;
    ffe8:	   |   moveq #1,d0
    ffea:	/--|-- bra.w 1007c <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    ffee:	|  \-> moveq #24,d1
    fff0:	|      add.l 20(sp),d1
    fff4:	|      move.l 16(sp),d0
    fff8:	|      subq.l #1,d0
    fffa:	|      move.l d1,-(sp)
    fffc:	|      move.l d0,-(sp)
    fffe:	|      jsr 9650 <createPersonaAnim>
   10004:	|      addq.l #8,sp
   10006:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1000a:	|      movea.l 20(sp),a0
   1000e:	|      move.l 24(a0),d0
   10012:	|      move.l d0,-(sp)
   10014:	|      pea 5 <_start+0x5>
   10018:	|      lea 8(sp),a0
   1001c:	|      move.l a0,-(sp)
   1001e:	|      jsr 1474c <getValueType>
   10024:	|      lea 12(sp),sp
   10028:	|      tst.w d0
   1002a:	|  /-- bne.s 10030 <builtIn_anim+0x62>
   1002c:	|  |   moveq #1,d0
   1002e:	+--|-- bra.s 1007c <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10030:	|  \-> moveq #24,d0
   10032:	|      add.l 20(sp),d0
   10036:	|      move.l d0,-(sp)
   10038:	|      jsr 150d0 <trimStack>
   1003e:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10040:	|      move.l (sp),d0
   10042:	|      move.l d0,-(sp)
   10044:	|      jsr 15ed6 <loadBankForAnim>
   1004a:	|      addq.l #4,sp
   1004c:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10050:	|  /-- bne.s 10056 <builtIn_anim+0x88>
   10052:	|  |   moveq #1,d0
   10054:	+--|-- bra.s 1007c <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10056:	|  \-> move.l 4(sp),-(sp)
   1005a:	|      move.l 12(sp),-(sp)
   1005e:	|      jsr b4fa <setBankFile>
   10064:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10066:	|      moveq #28,d0
   10068:	|      add.l 20(sp),d0
   1006c:	|      move.l 8(sp),-(sp)
   10070:	|      move.l d0,-(sp)
   10072:	|      jsr 14ffa <newAnimationVariable>
   10078:	|      addq.l #8,sp
	return BR_CONTINUE;
   1007a:	|      moveq #2,d0
}
   1007c:	\----> lea 12(sp),sp
   10080:	       rts

00010082 <builtIn_costume>:

builtIn(costume)
{
   10082:	          lea -32(sp),sp
   10086:	          move.l a6,-(sp)
   10088:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   1008a:	          moveq #8,d0
   1008c:	          move.l d0,32(sp)
   10090:	          clr.l 28(sp)
   10094:	          move.l 1c902 <SysBase>,d0
   1009a:	          movea.l d0,a6
   1009c:	          move.l 32(sp),d0
   100a0:	          move.l 28(sp),d1
   100a4:	          jsr -684(a6)
   100a8:	          move.l d0,24(sp)
   100ac:	          move.l 24(sp),d0
   100b0:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   100b4:	      /-- bne.s 100bc <builtIn_costume+0x3a>
   100b6:	      |   moveq #1,d0
   100b8:	/-----|-- bra.w 101a4 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   100bc:	|     \-> move.l 44(sp),d0
   100c0:	|         pea 3 <_start+0x3>
   100c4:	|         move.l d0,-(sp)
   100c6:	|         jsr 17bbe <__divsi3>
   100cc:	|         addq.l #8,sp
   100ce:	|         movea.l 20(sp),a0
   100d2:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   100d6:	|         tst.l 44(sp)
   100da:	|     /-- beq.s 100f0 <builtIn_costume+0x6e>
   100dc:	|     |   movea.l 20(sp),a0
   100e0:	|     |   move.l 4(a0),d1
   100e4:	|     |   move.l d1,d0
   100e6:	|     |   add.l d0,d0
   100e8:	|     |   add.l d1,d0
   100ea:	|     |   cmp.l 44(sp),d0
   100ee:	|  /--|-- beq.s 10104 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   100f0:	|  |  \-> pea 19919 <PutChar+0x1cc3>
   100f6:	|  |      jsr 171b4 <KPrintF>
   100fc:	|  |      addq.l #4,sp
        return BR_ERROR;
   100fe:	|  |      moveq #1,d0
   10100:	+--|----- bra.w 101a4 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10104:	|  \----> move.l 44(sp),d0
   10108:	|         add.l d0,d0
   1010a:	|         add.l d0,d0
   1010c:	|         move.l d0,16(sp)
   10110:	|         clr.l 12(sp)
   10114:	|         move.l 1c902 <SysBase>,d0
   1011a:	|         movea.l d0,a6
   1011c:	|         move.l 16(sp),d0
   10120:	|         move.l 12(sp),d1
   10124:	|         jsr -684(a6)
   10128:	|         move.l d0,8(sp)
   1012c:	|         move.l 8(sp),d0
   10130:	|         movea.l 20(sp),a0
   10134:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10136:	|         movea.l 20(sp),a0
   1013a:	|         move.l (a0),d0
   1013c:	|     /-- bne.s 10142 <builtIn_costume+0xc0>
   1013e:	|     |   moveq #1,d0
   10140:	+-----|-- bra.s 101a4 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10142:	|     \-> move.l 44(sp),d0
   10146:	|         subq.l #1,d0
   10148:	|         move.l d0,36(sp)
   1014c:	|     /-- bra.s 10188 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1014e:	|  /--|-> movea.l 48(sp),a0
   10152:	|  |  |   move.l 24(a0),d0
   10156:	|  |  |   movea.l 20(sp),a0
   1015a:	|  |  |   movea.l (a0),a0
   1015c:	|  |  |   move.l 36(sp),d1
   10160:	|  |  |   add.l d1,d1
   10162:	|  |  |   add.l d1,d1
   10164:	|  |  |   lea (0,a0,d1.l),a2
   10168:	|  |  |   move.l d0,-(sp)
   1016a:	|  |  |   jsr 14c24 <getAnimationFromVar>
   10170:	|  |  |   addq.l #4,sp
   10172:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10174:	|  |  |   moveq #24,d0
   10176:	|  |  |   add.l 48(sp),d0
   1017a:	|  |  |   move.l d0,-(sp)
   1017c:	|  |  |   jsr 150d0 <trimStack>
   10182:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10184:	|  |  |   subq.l #1,36(sp)
   10188:	|  |  \-> tst.l 36(sp)
   1018c:	|  \----- bge.s 1014e <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1018e:	|         moveq #28,d0
   10190:	|         add.l 48(sp),d0
   10194:	|         move.l 20(sp),-(sp)
   10198:	|         move.l d0,-(sp)
   1019a:	|         jsr 1501c <newCostumeVariable>
   101a0:	|         addq.l #8,sp
    return BR_CONTINUE;
   101a2:	|         moveq #2,d0
}
   101a4:	\-------> movea.l (sp)+,a2
   101a6:	          movea.l (sp)+,a6
   101a8:	          lea 32(sp),sp
   101ac:	          rts

000101ae <builtIn_launch>:

builtIn(launch)
{
   101ae:	          lea -20(sp),sp
   101b2:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101b4:	          movea.l 32(sp),a0
   101b8:	          move.l 24(a0),d0
   101bc:	          move.l d0,-(sp)
   101be:	          jsr 14d22 <getTextFromAnyVar>
   101c4:	          addq.l #4,sp
   101c6:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   101ca:	      /-- bne.s 101d2 <builtIn_launch+0x24>
   101cc:	      |   moveq #1,d0
   101ce:	/-----|-- bra.w 10300 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   101d2:	|     \-> move.l 20(sp),-(sp)
   101d6:	|         jsr 2fe <encodeFilename>
   101dc:	|         addq.l #4,sp
   101de:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   101e2:	|         moveq #24,d0
   101e4:	|         add.l 32(sp),d0
   101e8:	|         move.l d0,-(sp)
   101ea:	|         jsr 150d0 <trimStack>
   101f0:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   101f2:	|         movea.l 20(sp),a0
   101f6:	|         move.b (a0),d0
   101f8:	|         cmpi.b #104,d0
   101fc:	|  /----- bne.s 10266 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   101fe:	|  |      movea.l 20(sp),a0
   10202:	|  |      addq.l #1,a0
   10204:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10206:	|  |      cmpi.b #116,d0
   1020a:	|  +----- bne.s 10266 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1020c:	|  |      movea.l 20(sp),a0
   10210:	|  |      addq.l #2,a0
   10212:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10214:	|  |      cmpi.b #116,d0
   10218:	|  +----- bne.s 10266 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   1021a:	|  |      movea.l 20(sp),a0
   1021e:	|  |      addq.l #3,a0
   10220:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10222:	|  |      cmpi.b #112,d0
   10226:	|  +----- bne.s 10266 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10228:	|  |      movea.l 20(sp),a0
   1022c:	|  |      addq.l #4,a0
   1022e:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10230:	|  |      cmpi.b #58,d0
   10234:	|  |  /-- beq.s 10252 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10236:	|  |  |   movea.l 20(sp),a0
   1023a:	|  |  |   addq.l #4,a0
   1023c:	|  |  |   move.b (a0),d0
   1023e:	|  |  |   cmpi.b #115,d0
   10242:	|  +--|-- bne.s 10266 <builtIn_launch+0xb8>
   10244:	|  |  |   movea.l 20(sp),a0
   10248:	|  |  |   addq.l #5,a0
   1024a:	|  |  |   move.b (a0),d0
   1024c:	|  |  |   cmpi.b #58,d0
   10250:	|  +--|-- bne.s 10266 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10252:	|  |  \-> move.l 20(sp),-(sp)
   10256:	|  |      jsr b8 <copyString>
   1025c:	|  |      addq.l #4,sp
   1025e:	|  |      move.l d0,1c9c4 <launchMe>
   10264:	|  |  /-- bra.s 102b8 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10266:	|  \--|-> move.l 1c86a <gamePath>,d0
   1026c:	|     |   pea 19964 <PutChar+0x1d0e>
   10272:	|     |   move.l d0,-(sp)
   10274:	|     |   jsr 13c78 <joinStrings>
   1027a:	|     |   addq.l #8,sp
   1027c:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10280:	|     |   move.l 16(sp),-(sp)
   10284:	|     |   move.l 16(sp),-(sp)
   10288:	|     |   jsr 13c78 <joinStrings>
   1028e:	|     |   addq.l #8,sp
   10290:	|     |   move.l d0,1c9c4 <launchMe>
        FreeVec(newText);
   10296:	|     |   move.l 16(sp),8(sp)
   1029c:	|     |   move.l 1c902 <SysBase>,d0
   102a2:	|     |   movea.l d0,a6
   102a4:	|     |   movea.l 8(sp),a1
   102a8:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   102ac:	|     |   move.l 1c9c4 <launchMe>,d0
   102b2:	|     +-- bne.s 102b8 <builtIn_launch+0x10a>
   102b4:	|     |   moveq #1,d0
   102b6:	+-----|-- bra.s 10300 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   102b8:	|     \-> move.l 20(sp),4(sp)
   102be:	|         move.l 1c902 <SysBase>,d0
   102c4:	|         movea.l d0,a6
   102c6:	|         movea.l 4(sp),a1
   102ca:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   102ce:	|         clr.l -(sp)
   102d0:	|         jsr 3fd8 <setGraphicsWindow>
   102d6:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   102d8:	|         moveq #28,d0
   102da:	|         add.l 32(sp),d0
   102de:	|         pea 1 <_start+0x1>
   102e2:	|         pea 1 <_start+0x1>
   102e6:	|         move.l d0,-(sp)
   102e8:	|         jsr 1503e <setVariable>
   102ee:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   102f2:	|         moveq #28,d0
   102f4:	|         add.l 32(sp),d0
   102f8:	|         move.l d0,1c9c8 <launchResult>

    return BR_KEEP_AND_PAUSE;
   102fe:	|         moveq #0,d0
}
   10300:	\-------> movea.l (sp)+,a6
   10302:	          lea 20(sp),sp
   10306:	          rts

00010308 <builtIn_pause>:

builtIn(pause)
{
   10308:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1030a:	       movea.l 12(sp),a0
   1030e:	       move.l 24(a0),d0
   10312:	       move.l d0,-(sp)
   10314:	       pea 1 <_start+0x1>
   10318:	       move.l sp,d0
   1031a:	       addq.l #8,d0
   1031c:	       move.l d0,-(sp)
   1031e:	       jsr 1474c <getValueType>
   10324:	       lea 12(sp),sp
   10328:	       tst.w d0
   1032a:	   /-- bne.s 10330 <builtIn_pause+0x28>
   1032c:	   |   moveq #1,d0
   1032e:	/--|-- bra.s 1035e <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10330:	|  \-> moveq #24,d0
   10332:	|      add.l 12(sp),d0
   10336:	|      move.l d0,-(sp)
   10338:	|      jsr 150d0 <trimStack>
   1033e:	|      addq.l #4,sp
	if (theTime > 0) {
   10340:	|      move.l (sp),d0
   10342:	|  /-- ble.s 1035c <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10344:	|  |   move.l (sp),d0
   10346:	|  |   subq.l #1,d0
   10348:	|  |   movea.l 12(sp),a0
   1034c:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10350:	|  |   movea.l 12(sp),a0
   10354:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10358:	|  |   moveq #0,d0
   1035a:	+--|-- bra.s 1035e <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1035c:	|  \-> moveq #2,d0
}
   1035e:	\----> addq.l #4,sp
   10360:	       rts

00010362 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10362:	jsr 4740 <completeTimers>
	return BR_CONTINUE;
   10368:	moveq #2,d0
}
   1036a:	rts

0001036c <builtIn_callEvent>:

builtIn(callEvent)
{
   1036c:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10370:	       movea.l 20(sp),a0
   10374:	       move.l 24(a0),d0
   10378:	       move.l d0,-(sp)
   1037a:	       pea 7 <_start+0x7>
   1037e:	       lea 8(sp),a0
   10382:	       move.l a0,-(sp)
   10384:	       jsr 1474c <getValueType>
   1038a:	       lea 12(sp),sp
   1038e:	       tst.w d0
   10390:	   /-- bne.s 10398 <builtIn_callEvent+0x2c>
   10392:	   |   moveq #1,d0
   10394:	/--|-- bra.w 1042e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10398:	|  \-> moveq #24,d0
   1039a:	|      add.l 20(sp),d0
   1039e:	|      move.l d0,-(sp)
   103a0:	|      jsr 150d0 <trimStack>
   103a6:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103a8:	|      movea.l 20(sp),a0
   103ac:	|      move.l 24(a0),d0
   103b0:	|      move.l d0,-(sp)
   103b2:	|      pea 7 <_start+0x7>
   103b6:	|      moveq #12,d0
   103b8:	|      add.l sp,d0
   103ba:	|      move.l d0,-(sp)
   103bc:	|      jsr 1474c <getValueType>
   103c2:	|      lea 12(sp),sp
   103c6:	|      tst.w d0
   103c8:	|  /-- bne.s 103ce <builtIn_callEvent+0x62>
   103ca:	|  |   moveq #1,d0
   103cc:	+--|-- bra.s 1042e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   103ce:	|  \-> moveq #24,d0
   103d0:	|      add.l 20(sp),d0
   103d4:	|      move.l d0,-(sp)
   103d6:	|      jsr 150d0 <trimStack>
   103dc:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   103de:	|      move.l (sp),d1
   103e0:	|      move.l 4(sp),d0
   103e4:	|      move.l d1,-(sp)
   103e6:	|      move.l d0,-(sp)
   103e8:	|      jsr d4ca <getCombinationFunction>
   103ee:	|      addq.l #8,sp
   103f0:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   103f4:	|  /-- beq.s 10414 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   103f6:	|  |   moveq #28,d0
   103f8:	|  |   add.l 20(sp),d0
   103fc:	|  |   move.l 8(sp),-(sp)
   10400:	|  |   pea 2 <_start+0x2>
   10404:	|  |   move.l d0,-(sp)
   10406:	|  |   jsr 1503e <setVariable>
   1040c:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10410:	|  |   moveq #4,d0
   10412:	+--|-- bra.s 1042e <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10414:	|  \-> moveq #28,d0
   10416:	|      add.l 20(sp),d0
   1041a:	|      clr.l -(sp)
   1041c:	|      pea 1 <_start+0x1>
   10420:	|      move.l d0,-(sp)
   10422:	|      jsr 1503e <setVariable>
   10428:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1042c:	|      moveq #2,d0
}
   1042e:	\----> lea 12(sp),sp
   10432:	       rts

00010434 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10434:	move.w #1,1c9d4 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1043c:	moveq #2,d0
}
   1043e:	rts

00010440 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10440:	moveq #24,d0
   10442:	add.l 8(sp),d0
   10446:	move.l d0,-(sp)
   10448:	jsr 150d0 <trimStack>
   1044e:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10450:	pea 19966 <PutChar+0x1d10>
   10456:	jsr 171b4 <KPrintF>
   1045c:	addq.l #4,sp
	return BR_CONTINUE;
   1045e:	moveq #2,d0
}
   10460:	rts

00010462 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10462:	pea 19966 <PutChar+0x1d10>
   10468:	jsr 171b4 <KPrintF>
   1046e:	addq.l #4,sp
	return BR_CONTINUE;
   10470:	moveq #2,d0
}
   10472:	rts

00010474 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10474:	pea 19966 <PutChar+0x1d10>
   1047a:	jsr 171b4 <KPrintF>
   10480:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10482:	moveq #2,d0
}
   10484:	rts

00010486 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10486:	pea 19966 <PutChar+0x1d10>
   1048c:	jsr 171b4 <KPrintF>
   10492:	addq.l #4,sp
	return BR_CONTINUE;
   10494:	moveq #2,d0
}
   10496:	rts

00010498 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10498:	pea 19966 <PutChar+0x1d10>
   1049e:	jsr 171b4 <KPrintF>
   104a4:	addq.l #4,sp
	return BR_CONTINUE;
   104a6:	moveq #2,d0
}
   104a8:	rts

000104aa <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104aa:	pea 19966 <PutChar+0x1d10>
   104b0:	jsr 171b4 <KPrintF>
   104b6:	addq.l #4,sp
	return BR_CONTINUE;
   104b8:	moveq #2,d0
}
   104ba:	rts

000104bc <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   104bc:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104c0:	       movea.l 20(sp),a0
   104c4:	       move.l 24(a0),d0
   104c8:	       move.l d0,-(sp)
   104ca:	       pea 1 <_start+0x1>
   104ce:	       moveq #16,d0
   104d0:	       add.l sp,d0
   104d2:	       move.l d0,-(sp)
   104d4:	       jsr 1474c <getValueType>
   104da:	       lea 12(sp),sp
   104de:	       tst.w d0
   104e0:	   /-- bne.s 104e8 <builtIn_startMusic+0x2c>
   104e2:	   |   moveq #1,d0
   104e4:	/--|-- bra.w 10588 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   104e8:	|  \-> moveq #24,d0
   104ea:	|      add.l 20(sp),d0
   104ee:	|      move.l d0,-(sp)
   104f0:	|      jsr 150d0 <trimStack>
   104f6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104f8:	|      movea.l 20(sp),a0
   104fc:	|      move.l 24(a0),d0
   10500:	|      move.l d0,-(sp)
   10502:	|      pea 1 <_start+0x1>
   10506:	|      moveq #12,d0
   10508:	|      add.l sp,d0
   1050a:	|      move.l d0,-(sp)
   1050c:	|      jsr 1474c <getValueType>
   10512:	|      lea 12(sp),sp
   10516:	|      tst.w d0
   10518:	|  /-- bne.s 1051e <builtIn_startMusic+0x62>
   1051a:	|  |   moveq #1,d0
   1051c:	+--|-- bra.s 10588 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1051e:	|  \-> moveq #24,d0
   10520:	|      add.l 20(sp),d0
   10524:	|      move.l d0,-(sp)
   10526:	|      jsr 150d0 <trimStack>
   1052c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1052e:	|      movea.l 20(sp),a0
   10532:	|      move.l 24(a0),d0
   10536:	|      move.l d0,-(sp)
   10538:	|      pea 5 <_start+0x5>
   1053c:	|      lea 8(sp),a0
   10540:	|      move.l a0,-(sp)
   10542:	|      jsr 1474c <getValueType>
   10548:	|      lea 12(sp),sp
   1054c:	|      tst.w d0
   1054e:	|  /-- bne.s 10554 <builtIn_startMusic+0x98>
   10550:	|  |   moveq #1,d0
   10552:	+--|-- bra.s 10588 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10554:	|  \-> moveq #24,d0
   10556:	|      add.l 20(sp),d0
   1055a:	|      move.l d0,-(sp)
   1055c:	|      jsr 150d0 <trimStack>
   10562:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10564:	|      movea.l 8(sp),a0
   10568:	|      move.l 4(sp),d1
   1056c:	|      move.l (sp),d0
   1056e:	|      move.l a0,-(sp)
   10570:	|      move.l d1,-(sp)
   10572:	|      move.l d0,-(sp)
   10574:	|      jsr d0d6 <playMOD>
   1057a:	|      lea 12(sp),sp
   1057e:	|      tst.w d0
   10580:	|  /-- bne.s 10586 <builtIn_startMusic+0xca>
   10582:	|  |   moveq #2,d0
   10584:	+--|-- bra.s 10588 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10586:	|  \-> moveq #2,d0
}
   10588:	\----> lea 12(sp),sp
   1058c:	       rts

0001058e <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1058e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10590:	       movea.l 12(sp),a0
   10594:	       move.l 24(a0),d0
   10598:	       move.l d0,-(sp)
   1059a:	       pea 1 <_start+0x1>
   1059e:	       move.l sp,d0
   105a0:	       addq.l #8,d0
   105a2:	       move.l d0,-(sp)
   105a4:	       jsr 1474c <getValueType>
   105aa:	       lea 12(sp),sp
   105ae:	       tst.w d0
   105b0:	   /-- bne.s 105b6 <builtIn_stopMusic+0x28>
   105b2:	   |   moveq #1,d0
   105b4:	/--|-- bra.s 105d4 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   105b6:	|  \-> moveq #24,d0
   105b8:	|      add.l 12(sp),d0
   105bc:	|      move.l d0,-(sp)
   105be:	|      jsr 150d0 <trimStack>
   105c4:	|      addq.l #4,sp
	stopMOD (v);
   105c6:	|      move.l (sp),d0
   105c8:	|      move.l d0,-(sp)
   105ca:	|      jsr d172 <stopMOD>
   105d0:	|      addq.l #4,sp
	return BR_CONTINUE;
   105d2:	|      moveq #2,d0
}
   105d4:	\----> addq.l #4,sp
   105d6:	       rts

000105d8 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   105d8:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105da:	       movea.l 16(sp),a0
   105de:	       move.l 24(a0),d0
   105e2:	       move.l d0,-(sp)
   105e4:	       pea 1 <_start+0x1>
   105e8:	       move.l sp,d0
   105ea:	       addq.l #8,d0
   105ec:	       move.l d0,-(sp)
   105ee:	       jsr 1474c <getValueType>
   105f4:	       lea 12(sp),sp
   105f8:	       tst.w d0
   105fa:	   /-- bne.s 10600 <builtIn_setMusicVolume+0x28>
   105fc:	   |   moveq #1,d0
   105fe:	/--|-- bra.s 1065a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10600:	|  \-> moveq #24,d0
   10602:	|      add.l 16(sp),d0
   10606:	|      move.l d0,-(sp)
   10608:	|      jsr 150d0 <trimStack>
   1060e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10610:	|      movea.l 16(sp),a0
   10614:	|      move.l 24(a0),d0
   10618:	|      move.l d0,-(sp)
   1061a:	|      pea 1 <_start+0x1>
   1061e:	|      moveq #12,d0
   10620:	|      add.l sp,d0
   10622:	|      move.l d0,-(sp)
   10624:	|      jsr 1474c <getValueType>
   1062a:	|      lea 12(sp),sp
   1062e:	|      tst.w d0
   10630:	|  /-- bne.s 10636 <builtIn_setMusicVolume+0x5e>
   10632:	|  |   moveq #1,d0
   10634:	+--|-- bra.s 1065a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10636:	|  \-> moveq #24,d0
   10638:	|      add.l 16(sp),d0
   1063c:	|      move.l d0,-(sp)
   1063e:	|      jsr 150d0 <trimStack>
   10644:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10646:	|      move.l (sp),d1
   10648:	|      move.l 4(sp),d0
   1064c:	|      move.l d1,-(sp)
   1064e:	|      move.l d0,-(sp)
   10650:	|      jsr d158 <setMusicVolume>
   10656:	|      addq.l #8,sp
	return BR_CONTINUE;
   10658:	|      moveq #2,d0
}
   1065a:	\----> addq.l #8,sp
   1065c:	       rts

0001065e <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1065e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10660:	       movea.l 12(sp),a0
   10664:	       move.l 24(a0),d0
   10668:	       move.l d0,-(sp)
   1066a:	       pea 1 <_start+0x1>
   1066e:	       move.l sp,d0
   10670:	       addq.l #8,d0
   10672:	       move.l d0,-(sp)
   10674:	       jsr 1474c <getValueType>
   1067a:	       lea 12(sp),sp
   1067e:	       tst.w d0
   10680:	   /-- bne.s 10686 <builtIn_setDefaultMusicVolume+0x28>
   10682:	   |   moveq #1,d0
   10684:	/--|-- bra.s 106a4 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10686:	|  \-> moveq #24,d0
   10688:	|      add.l 12(sp),d0
   1068c:	|      move.l d0,-(sp)
   1068e:	|      jsr 150d0 <trimStack>
   10694:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10696:	|      move.l (sp),d0
   10698:	|      move.l d0,-(sp)
   1069a:	|      jsr d13c <setDefaultMusicVolume>
   106a0:	|      addq.l #4,sp
	return BR_CONTINUE;
   106a2:	|      moveq #2,d0
}
   106a4:	\----> addq.l #4,sp
   106a6:	       rts

000106a8 <builtIn_playSound>:

builtIn(playSound)
{
   106a8:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106aa:	       movea.l 12(sp),a0
   106ae:	       move.l 24(a0),d0
   106b2:	       move.l d0,-(sp)
   106b4:	       pea 5 <_start+0x5>
   106b8:	       move.l sp,d0
   106ba:	       addq.l #8,d0
   106bc:	       move.l d0,-(sp)
   106be:	       jsr 1474c <getValueType>
   106c4:	       lea 12(sp),sp
   106c8:	       tst.w d0
   106ca:	   /-- bne.s 106d0 <builtIn_playSound+0x28>
   106cc:	   |   moveq #1,d0
   106ce:	/--|-- bra.s 106f8 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   106d0:	|  \-> moveq #24,d0
   106d2:	|      add.l 12(sp),d0
   106d6:	|      move.l d0,-(sp)
   106d8:	|      jsr 150d0 <trimStack>
   106de:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   106e0:	|      move.l (sp),d0
   106e2:	|      clr.l -(sp)
   106e4:	|      move.l d0,-(sp)
   106e6:	|      jsr d160 <startSound>
   106ec:	|      addq.l #8,sp
   106ee:	|      tst.w d0
   106f0:	|  /-- bne.s 106f6 <builtIn_playSound+0x4e>
   106f2:	|  |   moveq #2,d0
   106f4:	+--|-- bra.s 106f8 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   106f6:	|  \-> moveq #2,d0
}
   106f8:	\----> addq.l #4,sp
   106fa:	       rts

000106fc <builtIn_loopSound>:

builtIn(loopSound)
{
   106fc:	             lea -28(sp),sp
   10700:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10702:	             tst.l 36(sp)
   10706:	         /-- bgt.s 1071c <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10708:	         |   pea 19989 <PutChar+0x1d33>
   1070e:	         |   jsr 171b4 <KPrintF>
   10714:	         |   addq.l #4,sp
		return BR_ERROR;
   10716:	         |   moveq #1,d0
   10718:	/--------|-- bra.w 108d8 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1071c:	|        \-> moveq #1,d0
   1071e:	|            cmp.l 36(sp),d0
   10722:	|     /----- blt.s 1077e <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10724:	|     |      movea.l 40(sp),a0
   10728:	|     |      move.l 24(a0),d0
   1072c:	|     |      move.l d0,-(sp)
   1072e:	|     |      pea 5 <_start+0x5>
   10732:	|     |      lea 16(sp),a0
   10736:	|     |      move.l a0,-(sp)
   10738:	|     |      jsr 1474c <getValueType>
   1073e:	|     |      lea 12(sp),sp
   10742:	|     |      tst.w d0
   10744:	|     |  /-- bne.s 1074c <builtIn_loopSound+0x50>
   10746:	|     |  |   moveq #1,d0
   10748:	+-----|--|-- bra.w 108d8 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   1074c:	|     |  \-> moveq #24,d0
   1074e:	|     |      add.l 40(sp),d0
   10752:	|     |      move.l d0,-(sp)
   10754:	|     |      jsr 150d0 <trimStack>
   1075a:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   1075c:	|     |      move.l 8(sp),d0
   10760:	|     |      pea 1 <_start+0x1>
   10764:	|     |      move.l d0,-(sp)
   10766:	|     |      jsr d160 <startSound>
   1076c:	|     |      addq.l #8,sp
   1076e:	|     |      tst.w d0
   10770:	|     |  /-- bne.s 10778 <builtIn_loopSound+0x7c>
   10772:	|     |  |   moveq #2,d0
   10774:	+-----|--|-- bra.w 108d8 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10778:	|     |  \-> moveq #2,d0
   1077a:	+-----|----- bra.w 108d8 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1077e:	|     \----> moveq #2,d1
   10780:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10784:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10788:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1078c:	|            movea.l 40(sp),a0
   10790:	|            movea.l 24(a0),a0
   10794:	|            move.l (a0),d0
   10796:	|            moveq #5,d1
   10798:	|            cmp.l d0,d1
   1079a:	|  /-------- beq.w 10872 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1079e:	|  |         movea.l 40(sp),a0
   107a2:	|  |         move.l 24(a0),d0
   107a6:	|  |         move.l d0,-(sp)
   107a8:	|  |         pea 1 <_start+0x1>
   107ac:	|  |         lea 12(sp),a0
   107b0:	|  |         move.l a0,-(sp)
   107b2:	|  |         jsr 1474c <getValueType>
   107b8:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   107bc:	|  |         moveq #24,d0
   107be:	|  |         add.l 40(sp),d0
   107c2:	|  |         move.l d0,-(sp)
   107c4:	|  |         jsr 150d0 <trimStack>
   107ca:	|  |         addq.l #4,sp
			numParams--;
   107cc:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   107d0:	|  +-------- bra.w 10872 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   107d4:	|  |  /----> movea.l 40(sp),a0
   107d8:	|  |  |      move.l 24(a0),d0
   107dc:	|  |  |      move.l d0,-(sp)
   107de:	|  |  |      pea 5 <_start+0x5>
   107e2:	|  |  |      lea 16(sp),a0
   107e6:	|  |  |      move.l a0,-(sp)
   107e8:	|  |  |      jsr 1474c <getValueType>
   107ee:	|  |  |      lea 12(sp),sp
   107f2:	|  |  |      tst.w d0
   107f4:	|  |  |  /-- bne.s 1080a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   107f6:	|  |  |  |   pea 199c7 <line.c.05397aaf+0x5>
   107fc:	|  |  |  |   jsr 171b4 <KPrintF>
   10802:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10804:	|  |  |  |   moveq #1,d0
   10806:	+--|--|--|-- bra.w 108d8 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1080a:	|  |  |  \-> moveq #20,d0
   1080c:	|  |  |      move.l d0,20(sp)
   10810:	|  |  |      clr.l 16(sp)
   10814:	|  |  |      move.l 1c902 <SysBase>,d0
   1081a:	|  |  |      movea.l d0,a6
   1081c:	|  |  |      move.l 20(sp),d0
   10820:	|  |  |      move.l 16(sp),d1
   10824:	|  |  |      jsr -684(a6)
   10828:	|  |  |      move.l d0,12(sp)
   1082c:	|  |  |      move.l 12(sp),d0
   10830:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10834:	|  |  |  /-- bne.s 1083c <builtIn_loopSound+0x140>
   10836:	|  |  |  |   moveq #1,d0
   10838:	+--|--|--|-- bra.w 108d8 <builtIn_loopSound+0x1dc>

			s->next = old;
   1083c:	|  |  |  \-> movea.l 28(sp),a0
   10840:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10846:	|  |  |      movea.l 28(sp),a0
   1084a:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1084e:	|  |  |      move.l 8(sp),d0
   10852:	|  |  |      movea.l 28(sp),a0
   10856:	|  |  |      move.l d0,(a0)
			old = s;
   10858:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1085e:	|  |  |      moveq #24,d0
   10860:	|  |  |      add.l 40(sp),d0
   10864:	|  |  |      move.l d0,-(sp)
   10866:	|  |  |      jsr 150d0 <trimStack>
   1086c:	|  |  |      addq.l #4,sp
			numParams--;
   1086e:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10872:	|  \--|----> tst.l 36(sp)
   10876:	|     \----- bne.w 107d4 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1087a:	|        /-- bra.s 10886 <builtIn_loopSound+0x18a>
   1087c:	|     /--|-> movea.l 28(sp),a0
   10880:	|     |  |   move.l 4(a0),28(sp)
   10886:	|     |  \-> movea.l 28(sp),a0
   1088a:	|     |      move.l 4(a0),d0
   1088e:	|     \----- bne.s 1087c <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10890:	|            move.l 4(sp),d0
   10894:	|            moveq #1,d1
   10896:	|            cmp.l d0,d1
   10898:	|     /----- bge.s 108b0 <builtIn_loopSound+0x1b4>
			s->next = old;
   1089a:	|     |      movea.l 28(sp),a0
   1089e:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   108a4:	|     |      movea.l 24(sp),a0
   108a8:	|     |      move.l 28(sp),8(a0)
   108ae:	|     |  /-- bra.s 108c0 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   108b0:	|     \--|-> move.l 4(sp),d0
   108b4:	|        +-- beq.s 108c0 <builtIn_loopSound+0x1c4>
			s->next = s;
   108b6:	|        |   movea.l 28(sp),a0
   108ba:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   108c0:	|        \-> movea.l 24(sp),a0
   108c4:	|            moveq #-1,d0
   108c6:	|            move.l d0,16(a0)
		playSoundList(old);
   108ca:	|            move.l 24(sp),-(sp)
   108ce:	|            jsr d0da <playSoundList>
   108d4:	|            addq.l #4,sp
		return BR_CONTINUE;
   108d6:	|            moveq #2,d0
	}
}
   108d8:	\----------> movea.l (sp)+,a6
   108da:	             lea 28(sp),sp
   108de:	             rts

000108e0 <builtIn_stopSound>:

builtIn(stopSound)
{
   108e0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   108e2:	       movea.l 12(sp),a0
   108e6:	       move.l 24(a0),d0
   108ea:	       move.l d0,-(sp)
   108ec:	       pea 5 <_start+0x5>
   108f0:	       move.l sp,d0
   108f2:	       addq.l #8,d0
   108f4:	       move.l d0,-(sp)
   108f6:	       jsr 1474c <getValueType>
   108fc:	       lea 12(sp),sp
   10900:	       tst.w d0
   10902:	   /-- bne.s 10908 <builtIn_stopSound+0x28>
   10904:	   |   moveq #1,d0
   10906:	/--|-- bra.s 10926 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10908:	|  \-> moveq #24,d0
   1090a:	|      add.l 12(sp),d0
   1090e:	|      move.l d0,-(sp)
   10910:	|      jsr 150d0 <trimStack>
   10916:	|      addq.l #4,sp
	huntKillSound (v);
   10918:	|      move.l (sp),d0
   1091a:	|      move.l d0,-(sp)
   1091c:	|      jsr d0d2 <huntKillSound>
   10922:	|      addq.l #4,sp
	return BR_CONTINUE;
   10924:	|      moveq #2,d0
}
   10926:	\----> addq.l #4,sp
   10928:	       rts

0001092a <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1092a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1092c:	       movea.l 12(sp),a0
   10930:	       move.l 24(a0),d0
   10934:	       move.l d0,-(sp)
   10936:	       pea 1 <_start+0x1>
   1093a:	       move.l sp,d0
   1093c:	       addq.l #8,d0
   1093e:	       move.l d0,-(sp)
   10940:	       jsr 1474c <getValueType>
   10946:	       lea 12(sp),sp
   1094a:	       tst.w d0
   1094c:	   /-- bne.s 10952 <builtIn_setDefaultSoundVolume+0x28>
   1094e:	   |   moveq #1,d0
   10950:	/--|-- bra.s 10970 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10952:	|  \-> moveq #24,d0
   10954:	|      add.l 12(sp),d0
   10958:	|      move.l d0,-(sp)
   1095a:	|      jsr 150d0 <trimStack>
   10960:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10962:	|      move.l (sp),d0
   10964:	|      move.l d0,-(sp)
   10966:	|      jsr d148 <setDefaultSoundVolume>
   1096c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1096e:	|      moveq #2,d0
}
   10970:	\----> addq.l #4,sp
   10972:	       rts

00010974 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10974:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10976:	       movea.l 16(sp),a0
   1097a:	       move.l 24(a0),d0
   1097e:	       move.l d0,-(sp)
   10980:	       pea 1 <_start+0x1>
   10984:	       move.l sp,d0
   10986:	       addq.l #8,d0
   10988:	       move.l d0,-(sp)
   1098a:	       jsr 1474c <getValueType>
   10990:	       lea 12(sp),sp
   10994:	       tst.w d0
   10996:	   /-- bne.s 1099c <builtIn_setSoundVolume+0x28>
   10998:	   |   moveq #1,d0
   1099a:	/--|-- bra.s 109f6 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1099c:	|  \-> moveq #24,d0
   1099e:	|      add.l 16(sp),d0
   109a2:	|      move.l d0,-(sp)
   109a4:	|      jsr 150d0 <trimStack>
   109aa:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   109ac:	|      movea.l 16(sp),a0
   109b0:	|      move.l 24(a0),d0
   109b4:	|      move.l d0,-(sp)
   109b6:	|      pea 5 <_start+0x5>
   109ba:	|      moveq #12,d0
   109bc:	|      add.l sp,d0
   109be:	|      move.l d0,-(sp)
   109c0:	|      jsr 1474c <getValueType>
   109c6:	|      lea 12(sp),sp
   109ca:	|      tst.w d0
   109cc:	|  /-- bne.s 109d2 <builtIn_setSoundVolume+0x5e>
   109ce:	|  |   moveq #1,d0
   109d0:	+--|-- bra.s 109f6 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   109d2:	|  \-> moveq #24,d0
   109d4:	|      add.l 16(sp),d0
   109d8:	|      move.l d0,-(sp)
   109da:	|      jsr 150d0 <trimStack>
   109e0:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   109e2:	|      move.l (sp),d1
   109e4:	|      move.l 4(sp),d0
   109e8:	|      move.l d1,-(sp)
   109ea:	|      move.l d0,-(sp)
   109ec:	|      jsr d15c <setSoundVolume>
   109f2:	|      addq.l #8,sp
	return BR_CONTINUE;
   109f4:	|      moveq #2,d0
}
   109f6:	\----> addq.l #8,sp
   109f8:	       rts

000109fa <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   109fa:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109fe:	       movea.l 20(sp),a0
   10a02:	       move.l 24(a0),d0
   10a06:	       move.l d0,-(sp)
   10a08:	       pea 1 <_start+0x1>
   10a0c:	       moveq #12,d0
   10a0e:	       add.l sp,d0
   10a10:	       move.l d0,-(sp)
   10a12:	       jsr 1474c <getValueType>
   10a18:	       lea 12(sp),sp
   10a1c:	       tst.w d0
   10a1e:	   /-- bne.s 10a26 <builtIn_setSoundLoopPoints+0x2c>
   10a20:	   |   moveq #1,d0
   10a22:	/--|-- bra.w 10abe <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a26:	|  \-> moveq #24,d0
   10a28:	|      add.l 20(sp),d0
   10a2c:	|      move.l d0,-(sp)
   10a2e:	|      jsr 150d0 <trimStack>
   10a34:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a36:	|      movea.l 20(sp),a0
   10a3a:	|      move.l 24(a0),d0
   10a3e:	|      move.l d0,-(sp)
   10a40:	|      pea 1 <_start+0x1>
   10a44:	|      lea 8(sp),a0
   10a48:	|      move.l a0,-(sp)
   10a4a:	|      jsr 1474c <getValueType>
   10a50:	|      lea 12(sp),sp
   10a54:	|      tst.w d0
   10a56:	|  /-- bne.s 10a5c <builtIn_setSoundLoopPoints+0x62>
   10a58:	|  |   moveq #1,d0
   10a5a:	+--|-- bra.s 10abe <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a5c:	|  \-> moveq #24,d0
   10a5e:	|      add.l 20(sp),d0
   10a62:	|      move.l d0,-(sp)
   10a64:	|      jsr 150d0 <trimStack>
   10a6a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a6c:	|      movea.l 20(sp),a0
   10a70:	|      move.l 24(a0),d0
   10a74:	|      move.l d0,-(sp)
   10a76:	|      pea 5 <_start+0x5>
   10a7a:	|      moveq #16,d0
   10a7c:	|      add.l sp,d0
   10a7e:	|      move.l d0,-(sp)
   10a80:	|      jsr 1474c <getValueType>
   10a86:	|      lea 12(sp),sp
   10a8a:	|      tst.w d0
   10a8c:	|  /-- bne.s 10a92 <builtIn_setSoundLoopPoints+0x98>
   10a8e:	|  |   moveq #1,d0
   10a90:	+--|-- bra.s 10abe <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a92:	|  \-> moveq #24,d0
   10a94:	|      add.l 20(sp),d0
   10a98:	|      move.l d0,-(sp)
   10a9a:	|      jsr 150d0 <trimStack>
   10aa0:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10aa2:	|      movea.l 4(sp),a0
   10aa6:	|      move.l (sp),d1
   10aa8:	|      move.l 8(sp),d0
   10aac:	|      move.l a0,-(sp)
   10aae:	|      move.l d1,-(sp)
   10ab0:	|      move.l d0,-(sp)
   10ab2:	|      jsr d154 <setSoundLoop>
   10ab8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10abc:	|      moveq #2,d0
}
   10abe:	\----> lea 12(sp),sp
   10ac2:	       rts

00010ac4 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10ac4:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10ac6:	          movea.l 12(sp),a0
   10aca:	          movea.l 24(a0),a0
   10ace:	          move.l (a0),d0
   10ad0:	          moveq #5,d1
   10ad2:	          cmp.l d0,d1
   10ad4:	/-------- bne.s 10b18 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10ad6:	|         movea.l 12(sp),a0
   10ada:	|         move.l 24(a0),d0
   10ade:	|         move.l d0,-(sp)
   10ae0:	|         pea 5 <_start+0x5>
   10ae4:	|         move.l sp,d0
   10ae6:	|         addq.l #8,d0
   10ae8:	|         move.l d0,-(sp)
   10aea:	|         jsr 1474c <getValueType>
   10af0:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10af4:	|         moveq #24,d0
   10af6:	|         add.l 12(sp),d0
   10afa:	|         move.l d0,-(sp)
   10afc:	|         jsr 150d0 <trimStack>
   10b02:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b04:	|         move.l (sp),d0
   10b06:	|         move.l d0,-(sp)
   10b08:	|         jsr 1695e <setFloor>
   10b0e:	|         addq.l #4,sp
   10b10:	|         tst.w d0
   10b12:	|  /----- bne.s 10b2e <builtIn_setFloor+0x6a>
   10b14:	|  |      moveq #1,d0
   10b16:	|  |  /-- bra.s 10b30 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b18:	\--|--|-> moveq #24,d0
   10b1a:	   |  |   add.l 12(sp),d0
   10b1e:	   |  |   move.l d0,-(sp)
   10b20:	   |  |   jsr 150d0 <trimStack>
   10b26:	   |  |   addq.l #4,sp
		setFloorNull ();
   10b28:	   |  |   jsr 170d8 <setFloorNull>
	}
	return BR_CONTINUE;
   10b2e:	   \--|-> moveq #2,d0
}
   10b30:	      \-> addq.l #4,sp
   10b32:	          rts

00010b34 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10b34:	jsr 161f6 <drawFloor>
	return BR_CONTINUE;
   10b3a:	moveq #2,d0
}
   10b3c:	rts

00010b3e <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10b3e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b40:	          movea.l 12(sp),a0
   10b44:	          movea.l 24(a0),a0
   10b48:	          move.l (a0),d0
   10b4a:	          moveq #5,d1
   10b4c:	          cmp.l d0,d1
   10b4e:	/-------- bne.s 10b92 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b50:	|         movea.l 12(sp),a0
   10b54:	|         move.l 24(a0),d0
   10b58:	|         move.l d0,-(sp)
   10b5a:	|         pea 5 <_start+0x5>
   10b5e:	|         move.l sp,d0
   10b60:	|         addq.l #8,d0
   10b62:	|         move.l d0,-(sp)
   10b64:	|         jsr 1474c <getValueType>
   10b6a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b6e:	|         moveq #24,d0
   10b70:	|         add.l 12(sp),d0
   10b74:	|         move.l d0,-(sp)
   10b76:	|         jsr 150d0 <trimStack>
   10b7c:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10b7e:	|         move.l (sp),d0
   10b80:	|         move.l d0,-(sp)
   10b82:	|         jsr 8664 <setZBuffer>
   10b88:	|         addq.l #4,sp
   10b8a:	|         tst.w d0
   10b8c:	|  /----- bne.s 10ba8 <builtIn_setZBuffer+0x6a>
   10b8e:	|  |      moveq #1,d0
   10b90:	|  |  /-- bra.s 10baa <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b92:	\--|--|-> moveq #24,d0
   10b94:	   |  |   add.l 12(sp),d0
   10b98:	   |  |   move.l d0,-(sp)
   10b9a:	   |  |   jsr 150d0 <trimStack>
   10ba0:	   |  |   addq.l #4,sp
		killZBuffer ();
   10ba2:	   |  |   jsr 8618 <killZBuffer>
	}
	return BR_CONTINUE;
   10ba8:	   \--|-> moveq #2,d0
}
   10baa:	      \-> addq.l #4,sp
   10bac:	          rts

00010bae <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10bae:	pea 199fe <line.c.05397aaf+0x3c>
   10bb4:	jsr 171b4 <KPrintF>
   10bba:	addq.l #4,sp
	return BR_CONTINUE;
   10bbc:	moveq #2,d0
}
   10bbe:	rts

00010bc0 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bc0:	          movea.l 8(sp),a0
   10bc4:	          move.l 24(a0),d0
   10bc8:	          move.l d0,-(sp)
   10bca:	          pea 1 <_start+0x1>
   10bce:	          pea 1c9d0 <speechMode>
   10bd4:	          jsr 1474c <getValueType>
   10bda:	          lea 12(sp),sp
   10bde:	          tst.w d0
   10be0:	      /-- bne.s 10be6 <builtIn_setSpeechMode+0x26>
   10be2:	      |   moveq #1,d0
   10be4:	/-----|-- bra.s 10c1e <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10be6:	|     \-> moveq #24,d0
   10be8:	|         add.l 8(sp),d0
   10bec:	|         move.l d0,-(sp)
   10bee:	|         jsr 150d0 <trimStack>
   10bf4:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10bf6:	|         move.l 1c9d0 <speechMode>,d0
   10bfc:	|     /-- bmi.s 10c0a <builtIn_setSpeechMode+0x4a>
   10bfe:	|     |   move.l 1c9d0 <speechMode>,d0
   10c04:	|     |   moveq #2,d1
   10c06:	|     |   cmp.l d0,d1
   10c08:	|  /--|-- bge.s 10c1c <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c0a:	|  |  \-> pea 19a17 <line.c.05397aaf+0x55>
   10c10:	|  |      jsr 171b4 <KPrintF>
   10c16:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c18:	|  |      moveq #1,d0
   10c1a:	+--|----- bra.s 10c1e <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10c1c:	|  \----> moveq #2,d0
}
   10c1e:	\-------> rts

00010c20 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10c20:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10c22:	       jsr 7e20 <isThereAnySpeechGoingOn>
   10c28:	       move.l d0,(sp)
	if (i == -1) {
   10c2a:	       moveq #-1,d0
   10c2c:	       cmp.l (sp),d0
   10c2e:	/----- bne.s 10c4a <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10c30:	|      moveq #28,d0
   10c32:	|      add.l 12(sp),d0
   10c36:	|      clr.l -(sp)
   10c38:	|      pea 1 <_start+0x1>
   10c3c:	|      move.l d0,-(sp)
   10c3e:	|      jsr 1503e <setVariable>
   10c44:	|      lea 12(sp),sp
   10c48:	|  /-- bra.s 10c62 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10c4a:	\--|-> moveq #28,d0
   10c4c:	   |   add.l 12(sp),d0
   10c50:	   |   move.l (sp),-(sp)
   10c52:	   |   pea 7 <_start+0x7>
   10c56:	   |   move.l d0,-(sp)
   10c58:	   |   jsr 1503e <setVariable>
   10c5e:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10c62:	   \-> moveq #2,d0
}
   10c64:	       addq.l #4,sp
   10c66:	       rts

00010c68 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10c68:	jsr 60fa <killSpeechTimers>
	return BR_CONTINUE;
   10c6e:	moveq #2,d0
}
   10c70:	rts

00010c72 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10c72:	       move.l 1ca16 <overRegion>,d0
   10c78:	/----- beq.s 10ca2 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10c7a:	|      movea.l 1ca16 <overRegion>,a0
   10c80:	|      movea.l 28(a0),a0
   10c84:	|      move.l 4(a0),d1
   10c88:	|      moveq #28,d0
   10c8a:	|      add.l 8(sp),d0
   10c8e:	|      move.l d1,-(sp)
   10c90:	|      pea 7 <_start+0x7>
   10c94:	|      move.l d0,-(sp)
   10c96:	|      jsr 1503e <setVariable>
   10c9c:	|      lea 12(sp),sp
   10ca0:	|  /-- bra.s 10cba <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10ca2:	\--|-> moveq #28,d0
   10ca4:	   |   add.l 8(sp),d0
   10ca8:	   |   clr.l -(sp)
   10caa:	   |   pea 1 <_start+0x1>
   10cae:	   |   move.l d0,-(sp)
   10cb0:	   |   jsr 1503e <setVariable>
   10cb6:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10cba:	   \-> moveq #2,d0
}
   10cbc:	       rts

00010cbe <builtIn_rename>:

builtIn(rename)
{
   10cbe:	       lea -16(sp),sp
   10cc2:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10cc4:	       movea.l 28(sp),a0
   10cc8:	       move.l 24(a0),d0
   10ccc:	       move.l d0,-(sp)
   10cce:	       jsr 14d22 <getTextFromAnyVar>
   10cd4:	       addq.l #4,sp
   10cd6:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10cda:	   /-- bne.s 10ce0 <builtIn_rename+0x22>
   10cdc:	   |   moveq #1,d0
   10cde:	/--|-- bra.s 10d5a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ce0:	|  \-> moveq #24,d0
   10ce2:	|      add.l 28(sp),d0
   10ce6:	|      move.l d0,-(sp)
   10ce8:	|      jsr 150d0 <trimStack>
   10cee:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10cf0:	|      movea.l 28(sp),a0
   10cf4:	|      move.l 24(a0),d0
   10cf8:	|      move.l d0,-(sp)
   10cfa:	|      pea 7 <_start+0x7>
   10cfe:	|      lea 12(sp),a0
   10d02:	|      move.l a0,-(sp)
   10d04:	|      jsr 1474c <getValueType>
   10d0a:	|      lea 12(sp),sp
   10d0e:	|      tst.w d0
   10d10:	|  /-- bne.s 10d16 <builtIn_rename+0x58>
   10d12:	|  |   moveq #1,d0
   10d14:	+--|-- bra.s 10d5a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d16:	|  \-> moveq #24,d0
   10d18:	|      add.l 28(sp),d0
   10d1c:	|      move.l d0,-(sp)
   10d1e:	|      jsr 150d0 <trimStack>
   10d24:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10d26:	|      move.l 4(sp),d0
   10d2a:	|      move.l d0,-(sp)
   10d2c:	|      jsr d496 <findObjectType>
   10d32:	|      addq.l #4,sp
   10d34:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10d38:	|      movea.l 12(sp),a0
   10d3c:	|      move.l (a0),8(sp)
   10d40:	|      move.l 1c902 <SysBase>,d0
   10d46:	|      movea.l d0,a6
   10d48:	|      movea.l 8(sp),a1
   10d4c:	|      jsr -690(a6)
	o->screenName = newText;
   10d50:	|      movea.l 12(sp),a0
   10d54:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10d58:	|      moveq #2,d0
}
   10d5a:	\----> movea.l (sp)+,a6
   10d5c:	       lea 16(sp),sp
   10d60:	       rts

00010d62 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10d62:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d66:	          movea.l 20(sp),a0
   10d6a:	          move.l 24(a0),d0
   10d6e:	          move.l d0,-(sp)
   10d70:	          pea 7 <_start+0x7>
   10d74:	          lea 8(sp),a0
   10d78:	          move.l a0,-(sp)
   10d7a:	          jsr 1474c <getValueType>
   10d80:	          lea 12(sp),sp
   10d84:	          tst.w d0
   10d86:	      /-- bne.s 10d8e <builtIn_getObjectX+0x2c>
   10d88:	      |   moveq #1,d0
   10d8a:	/-----|-- bra.w 10e2a <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10d8e:	|     \-> moveq #24,d0
   10d90:	|         add.l 20(sp),d0
   10d94:	|         move.l d0,-(sp)
   10d96:	|         jsr 150d0 <trimStack>
   10d9c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10d9e:	|         move.l (sp),d0
   10da0:	|         move.l d0,-(sp)
   10da2:	|         jsr a594 <findPerson>
   10da8:	|         addq.l #4,sp
   10daa:	|         move.l d0,8(sp)
	if (pers) {
   10dae:	|     /-- beq.s 10ddc <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10db0:	|     |   movea.l 8(sp),a0
   10db4:	|     |   move.l (a0),d0
   10db6:	|     |   move.l d0,-(sp)
   10db8:	|     |   jsr 1757e <__fixsfsi>
   10dbe:	|     |   addq.l #4,sp
   10dc0:	|     |   move.l d0,d1
   10dc2:	|     |   moveq #28,d0
   10dc4:	|     |   add.l 20(sp),d0
   10dc8:	|     |   move.l d1,-(sp)
   10dca:	|     |   pea 1 <_start+0x1>
   10dce:	|     |   move.l d0,-(sp)
   10dd0:	|     |   jsr 1503e <setVariable>
   10dd6:	|     |   lea 12(sp),sp
   10dda:	|  /--|-- bra.s 10e28 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10ddc:	|  |  \-> move.l (sp),d0
   10dde:	|  |      move.l d0,-(sp)
   10de0:	|  |      jsr 15996 <getRegionForObject>
   10de6:	|  |      addq.l #4,sp
   10de8:	|  |      move.l d0,4(sp)
		if (la) {
   10dec:	|  |  /-- beq.s 10e10 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10dee:	|  |  |   movea.l 4(sp),a0
   10df2:	|  |  |   move.l 16(a0),d1
   10df6:	|  |  |   moveq #28,d0
   10df8:	|  |  |   add.l 20(sp),d0
   10dfc:	|  |  |   move.l d1,-(sp)
   10dfe:	|  |  |   pea 1 <_start+0x1>
   10e02:	|  |  |   move.l d0,-(sp)
   10e04:	|  |  |   jsr 1503e <setVariable>
   10e0a:	|  |  |   lea 12(sp),sp
   10e0e:	|  +--|-- bra.s 10e28 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e10:	|  |  \-> moveq #28,d0
   10e12:	|  |      add.l 20(sp),d0
   10e16:	|  |      clr.l -(sp)
   10e18:	|  |      pea 1 <_start+0x1>
   10e1c:	|  |      move.l d0,-(sp)
   10e1e:	|  |      jsr 1503e <setVariable>
   10e24:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10e28:	|  \----> moveq #2,d0
}
   10e2a:	\-------> lea 12(sp),sp
   10e2e:	          rts

00010e30 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10e30:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e34:	          movea.l 20(sp),a0
   10e38:	          move.l 24(a0),d0
   10e3c:	          move.l d0,-(sp)
   10e3e:	          pea 7 <_start+0x7>
   10e42:	          lea 8(sp),a0
   10e46:	          move.l a0,-(sp)
   10e48:	          jsr 1474c <getValueType>
   10e4e:	          lea 12(sp),sp
   10e52:	          tst.w d0
   10e54:	      /-- bne.s 10e5c <builtIn_getObjectY+0x2c>
   10e56:	      |   moveq #1,d0
   10e58:	/-----|-- bra.w 10efa <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10e5c:	|     \-> moveq #24,d0
   10e5e:	|         add.l 20(sp),d0
   10e62:	|         move.l d0,-(sp)
   10e64:	|         jsr 150d0 <trimStack>
   10e6a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e6c:	|         move.l (sp),d0
   10e6e:	|         move.l d0,-(sp)
   10e70:	|         jsr a594 <findPerson>
   10e76:	|         addq.l #4,sp
   10e78:	|         move.l d0,8(sp)
	if (pers) {
   10e7c:	|     /-- beq.s 10eac <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10e7e:	|     |   movea.l 8(sp),a0
   10e82:	|     |   move.l 4(a0),d0
   10e86:	|     |   move.l d0,-(sp)
   10e88:	|     |   jsr 1757e <__fixsfsi>
   10e8e:	|     |   addq.l #4,sp
   10e90:	|     |   move.l d0,d1
   10e92:	|     |   moveq #28,d0
   10e94:	|     |   add.l 20(sp),d0
   10e98:	|     |   move.l d1,-(sp)
   10e9a:	|     |   pea 1 <_start+0x1>
   10e9e:	|     |   move.l d0,-(sp)
   10ea0:	|     |   jsr 1503e <setVariable>
   10ea6:	|     |   lea 12(sp),sp
   10eaa:	|  /--|-- bra.s 10ef8 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10eac:	|  |  \-> move.l (sp),d0
   10eae:	|  |      move.l d0,-(sp)
   10eb0:	|  |      jsr 15996 <getRegionForObject>
   10eb6:	|  |      addq.l #4,sp
   10eb8:	|  |      move.l d0,4(sp)
		if (la) {
   10ebc:	|  |  /-- beq.s 10ee0 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10ebe:	|  |  |   movea.l 4(sp),a0
   10ec2:	|  |  |   move.l 20(a0),d1
   10ec6:	|  |  |   moveq #28,d0
   10ec8:	|  |  |   add.l 20(sp),d0
   10ecc:	|  |  |   move.l d1,-(sp)
   10ece:	|  |  |   pea 1 <_start+0x1>
   10ed2:	|  |  |   move.l d0,-(sp)
   10ed4:	|  |  |   jsr 1503e <setVariable>
   10eda:	|  |  |   lea 12(sp),sp
   10ede:	|  +--|-- bra.s 10ef8 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10ee0:	|  |  \-> moveq #28,d0
   10ee2:	|  |      add.l 20(sp),d0
   10ee6:	|  |      clr.l -(sp)
   10ee8:	|  |      pea 1 <_start+0x1>
   10eec:	|  |      move.l d0,-(sp)
   10eee:	|  |      jsr 1503e <setVariable>
   10ef4:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10ef8:	|  \----> moveq #2,d0
}
   10efa:	\-------> lea 12(sp),sp
   10efe:	          rts

00010f00 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f00:	       lea -32(sp),sp
   10f04:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f08:	       movea.l 56(sp),a0
   10f0c:	       move.l 24(a0),d0
   10f10:	       move.l d0,-(sp)
   10f12:	       pea 1 <_start+0x1>
   10f16:	       lea 28(sp),a0
   10f1a:	       move.l a0,-(sp)
   10f1c:	       jsr 1474c <getValueType>
   10f22:	       lea 12(sp),sp
   10f26:	       tst.w d0
   10f28:	   /-- bne.s 10f30 <builtIn_addScreenRegion+0x30>
   10f2a:	   |   moveq #1,d0
   10f2c:	/--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f30:	|  \-> moveq #24,d0
   10f32:	|      add.l 56(sp),d0
   10f36:	|      move.l d0,-(sp)
   10f38:	|      jsr 150d0 <trimStack>
   10f3e:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f40:	|      movea.l 56(sp),a0
   10f44:	|      move.l 24(a0),d0
   10f48:	|      move.l d0,-(sp)
   10f4a:	|      pea 1 <_start+0x1>
   10f4e:	|      moveq #48,d0
   10f50:	|      add.l sp,d0
   10f52:	|      move.l d0,-(sp)
   10f54:	|      jsr 1474c <getValueType>
   10f5a:	|      lea 12(sp),sp
   10f5e:	|      tst.w d0
   10f60:	|  /-- bne.s 10f68 <builtIn_addScreenRegion+0x68>
   10f62:	|  |   moveq #1,d0
   10f64:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f68:	|  \-> moveq #24,d0
   10f6a:	|      add.l 56(sp),d0
   10f6e:	|      move.l d0,-(sp)
   10f70:	|      jsr 150d0 <trimStack>
   10f76:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f78:	|      movea.l 56(sp),a0
   10f7c:	|      move.l 24(a0),d0
   10f80:	|      move.l d0,-(sp)
   10f82:	|      pea 1 <_start+0x1>
   10f86:	|      moveq #52,d0
   10f88:	|      add.l sp,d0
   10f8a:	|      move.l d0,-(sp)
   10f8c:	|      jsr 1474c <getValueType>
   10f92:	|      lea 12(sp),sp
   10f96:	|      tst.w d0
   10f98:	|  /-- bne.s 10fa0 <builtIn_addScreenRegion+0xa0>
   10f9a:	|  |   moveq #1,d0
   10f9c:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fa0:	|  \-> moveq #24,d0
   10fa2:	|      add.l 56(sp),d0
   10fa6:	|      move.l d0,-(sp)
   10fa8:	|      jsr 150d0 <trimStack>
   10fae:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb0:	|      movea.l 56(sp),a0
   10fb4:	|      move.l 24(a0),d0
   10fb8:	|      move.l d0,-(sp)
   10fba:	|      pea 1 <_start+0x1>
   10fbe:	|      lea 32(sp),a0
   10fc2:	|      move.l a0,-(sp)
   10fc4:	|      jsr 1474c <getValueType>
   10fca:	|      lea 12(sp),sp
   10fce:	|      tst.w d0
   10fd0:	|  /-- bne.s 10fd8 <builtIn_addScreenRegion+0xd8>
   10fd2:	|  |   moveq #1,d0
   10fd4:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fd8:	|  \-> moveq #24,d0
   10fda:	|      add.l 56(sp),d0
   10fde:	|      move.l d0,-(sp)
   10fe0:	|      jsr 150d0 <trimStack>
   10fe6:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fe8:	|      movea.l 56(sp),a0
   10fec:	|      move.l 24(a0),d0
   10ff0:	|      move.l d0,-(sp)
   10ff2:	|      pea 1 <_start+0x1>
   10ff6:	|      lea 36(sp),a0
   10ffa:	|      move.l a0,-(sp)
   10ffc:	|      jsr 1474c <getValueType>
   11002:	|      lea 12(sp),sp
   11006:	|      tst.w d0
   11008:	|  /-- bne.s 11010 <builtIn_addScreenRegion+0x110>
   1100a:	|  |   moveq #1,d0
   1100c:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11010:	|  \-> moveq #24,d0
   11012:	|      add.l 56(sp),d0
   11016:	|      move.l d0,-(sp)
   11018:	|      jsr 150d0 <trimStack>
   1101e:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11020:	|      movea.l 56(sp),a0
   11024:	|      move.l 24(a0),d0
   11028:	|      move.l d0,-(sp)
   1102a:	|      pea 1 <_start+0x1>
   1102e:	|      lea 40(sp),a0
   11032:	|      move.l a0,-(sp)
   11034:	|      jsr 1474c <getValueType>
   1103a:	|      lea 12(sp),sp
   1103e:	|      tst.w d0
   11040:	|  /-- bne.s 11048 <builtIn_addScreenRegion+0x148>
   11042:	|  |   moveq #1,d0
   11044:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11048:	|  \-> moveq #24,d0
   1104a:	|      add.l 56(sp),d0
   1104e:	|      move.l d0,-(sp)
   11050:	|      jsr 150d0 <trimStack>
   11056:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11058:	|      movea.l 56(sp),a0
   1105c:	|      move.l 24(a0),d0
   11060:	|      move.l d0,-(sp)
   11062:	|      pea 1 <_start+0x1>
   11066:	|      lea 44(sp),a0
   1106a:	|      move.l a0,-(sp)
   1106c:	|      jsr 1474c <getValueType>
   11072:	|      lea 12(sp),sp
   11076:	|      tst.w d0
   11078:	|  /-- bne.s 11080 <builtIn_addScreenRegion+0x180>
   1107a:	|  |   moveq #1,d0
   1107c:	+--|-- bra.w 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11080:	|  \-> moveq #24,d0
   11082:	|      add.l 56(sp),d0
   11086:	|      move.l d0,-(sp)
   11088:	|      jsr 150d0 <trimStack>
   1108e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11090:	|      movea.l 56(sp),a0
   11094:	|      move.l 24(a0),d0
   11098:	|      move.l d0,-(sp)
   1109a:	|      pea 7 <_start+0x7>
   1109e:	|      lea 24(sp),a0
   110a2:	|      move.l a0,-(sp)
   110a4:	|      jsr 1474c <getValueType>
   110aa:	|      lea 12(sp),sp
   110ae:	|      tst.w d0
   110b0:	|  /-- bne.s 110b6 <builtIn_addScreenRegion+0x1b6>
   110b2:	|  |   moveq #1,d0
   110b4:	+--|-- bra.s 1110a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110b6:	|  \-> moveq #24,d0
   110b8:	|      add.l 56(sp),d0
   110bc:	|      move.l d0,-(sp)
   110be:	|      jsr 150d0 <trimStack>
   110c4:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   110c6:	|      move.l 16(sp),d5
   110ca:	|      move.l 20(sp),d4
   110ce:	|      move.l 40(sp),d3
   110d2:	|      move.l 44(sp),d2
   110d6:	|      movea.l 24(sp),a1
   110da:	|      movea.l 28(sp),a0
   110de:	|      move.l 32(sp),d1
   110e2:	|      move.l 36(sp),d0
   110e6:	|      move.l d5,-(sp)
   110e8:	|      move.l d4,-(sp)
   110ea:	|      move.l d3,-(sp)
   110ec:	|      move.l d2,-(sp)
   110ee:	|      move.l a1,-(sp)
   110f0:	|      move.l a0,-(sp)
   110f2:	|      move.l d1,-(sp)
   110f4:	|      move.l d0,-(sp)
   110f6:	|      jsr 15850 <addScreenRegion>
   110fc:	|      lea 32(sp),sp
   11100:	|      tst.w d0
   11102:	|  /-- beq.s 11108 <builtIn_addScreenRegion+0x208>
   11104:	|  |   moveq #2,d0
   11106:	+--|-- bra.s 1110a <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11108:	|  \-> moveq #1,d0

}
   1110a:	\----> movem.l (sp)+,d2-d5
   1110e:	       lea 32(sp),sp
   11112:	       rts

00011114 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11114:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11116:	       movea.l 12(sp),a0
   1111a:	       move.l 24(a0),d0
   1111e:	       move.l d0,-(sp)
   11120:	       pea 7 <_start+0x7>
   11124:	       move.l sp,d0
   11126:	       addq.l #8,d0
   11128:	       move.l d0,-(sp)
   1112a:	       jsr 1474c <getValueType>
   11130:	       lea 12(sp),sp
   11134:	       tst.w d0
   11136:	   /-- bne.s 1113c <builtIn_removeScreenRegion+0x28>
   11138:	   |   moveq #1,d0
   1113a:	/--|-- bra.s 1115a <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   1113c:	|  \-> moveq #24,d0
   1113e:	|      add.l 12(sp),d0
   11142:	|      move.l d0,-(sp)
   11144:	|      jsr 150d0 <trimStack>
   1114a:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1114c:	|      move.l (sp),d0
   1114e:	|      move.l d0,-(sp)
   11150:	|      jsr 15b3e <removeScreenRegion>
   11156:	|      addq.l #4,sp
	return BR_CONTINUE;
   11158:	|      moveq #2,d0
}
   1115a:	\----> addq.l #4,sp
   1115c:	       rts

0001115e <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1115e:	jsr 15cc2 <showBoxes>
	return BR_CONTINUE;
   11164:	moveq #2,d0
}
   11166:	rts

00011168 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11168:	jsr 159c4 <killAllRegions>
	return BR_CONTINUE;
   1116e:	moveq #2,d0
}
   11170:	rts

00011172 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11172:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11176:	       movea.l 24(sp),a0
   1117a:	       move.l 24(a0),d0
   1117e:	       move.l d0,-(sp)
   11180:	       jsr 143f8 <getCostumeFromVar>
   11186:	       addq.l #4,sp
   11188:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1118c:	   /-- bne.s 11194 <builtIn_addCharacter+0x22>
   1118e:	   |   moveq #1,d0
   11190:	/--|-- bra.w 11270 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11194:	|  \-> moveq #24,d0
   11196:	|      add.l 24(sp),d0
   1119a:	|      move.l d0,-(sp)
   1119c:	|      jsr 150d0 <trimStack>
   111a2:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111a4:	|      movea.l 24(sp),a0
   111a8:	|      move.l 24(a0),d0
   111ac:	|      move.l d0,-(sp)
   111ae:	|      pea 1 <_start+0x1>
   111b2:	|      lea 12(sp),a0
   111b6:	|      move.l a0,-(sp)
   111b8:	|      jsr 1474c <getValueType>
   111be:	|      lea 12(sp),sp
   111c2:	|      tst.w d0
   111c4:	|  /-- bne.s 111cc <builtIn_addCharacter+0x5a>
   111c6:	|  |   moveq #1,d0
   111c8:	+--|-- bra.w 11270 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   111cc:	|  \-> moveq #24,d0
   111ce:	|      add.l 24(sp),d0
   111d2:	|      move.l d0,-(sp)
   111d4:	|      jsr 150d0 <trimStack>
   111da:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111dc:	|      movea.l 24(sp),a0
   111e0:	|      move.l 24(a0),d0
   111e4:	|      move.l d0,-(sp)
   111e6:	|      pea 1 <_start+0x1>
   111ea:	|      moveq #16,d0
   111ec:	|      add.l sp,d0
   111ee:	|      move.l d0,-(sp)
   111f0:	|      jsr 1474c <getValueType>
   111f6:	|      lea 12(sp),sp
   111fa:	|      tst.w d0
   111fc:	|  /-- bne.s 11202 <builtIn_addCharacter+0x90>
   111fe:	|  |   moveq #1,d0
   11200:	+--|-- bra.s 11270 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11202:	|  \-> moveq #24,d0
   11204:	|      add.l 24(sp),d0
   11208:	|      move.l d0,-(sp)
   1120a:	|      jsr 150d0 <trimStack>
   11210:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11212:	|      movea.l 24(sp),a0
   11216:	|      move.l 24(a0),d0
   1121a:	|      move.l d0,-(sp)
   1121c:	|      pea 7 <_start+0x7>
   11220:	|      lea 8(sp),a0
   11224:	|      move.l a0,-(sp)
   11226:	|      jsr 1474c <getValueType>
   1122c:	|      lea 12(sp),sp
   11230:	|      tst.w d0
   11232:	|  /-- bne.s 11238 <builtIn_addCharacter+0xc6>
   11234:	|  |   moveq #1,d0
   11236:	+--|-- bra.s 11270 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11238:	|  \-> moveq #24,d0
   1123a:	|      add.l 24(sp),d0
   1123e:	|      move.l d0,-(sp)
   11240:	|      jsr 150d0 <trimStack>
   11246:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11248:	|      movea.l (sp),a0
   1124a:	|      move.l 4(sp),d1
   1124e:	|      move.l 8(sp),d0
   11252:	|      move.l 12(sp),-(sp)
   11256:	|      move.l a0,-(sp)
   11258:	|      move.l d1,-(sp)
   1125a:	|      move.l d0,-(sp)
   1125c:	|      jsr 918e <addPerson>
   11262:	|      lea 16(sp),sp
   11266:	|      tst.w d0
   11268:	|  /-- beq.s 1126e <builtIn_addCharacter+0xfc>
   1126a:	|  |   moveq #2,d0
   1126c:	+--|-- bra.s 11270 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1126e:	|  \-> moveq #1,d0
}
   11270:	\----> lea 16(sp),sp
   11274:	       rts

00011276 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11276:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11278:	       movea.l 12(sp),a0
   1127c:	       move.l 24(a0),d0
   11280:	       move.l d0,-(sp)
   11282:	       pea 7 <_start+0x7>
   11286:	       move.l sp,d0
   11288:	       addq.l #8,d0
   1128a:	       move.l d0,-(sp)
   1128c:	       jsr 1474c <getValueType>
   11292:	       lea 12(sp),sp
   11296:	       tst.w d0
   11298:	   /-- bne.s 1129e <builtIn_hideCharacter+0x28>
   1129a:	   |   moveq #1,d0
   1129c:	/--|-- bra.s 112be <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1129e:	|  \-> moveq #24,d0
   112a0:	|      add.l 12(sp),d0
   112a4:	|      move.l d0,-(sp)
   112a6:	|      jsr 150d0 <trimStack>
   112ac:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   112ae:	|      move.l (sp),d0
   112b0:	|      move.l d0,-(sp)
   112b2:	|      clr.l -(sp)
   112b4:	|      jsr bbc8 <setShown>
   112ba:	|      addq.l #8,sp
	return BR_CONTINUE;
   112bc:	|      moveq #2,d0
}
   112be:	\----> addq.l #4,sp
   112c0:	       rts

000112c2 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   112c2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112c4:	       movea.l 12(sp),a0
   112c8:	       move.l 24(a0),d0
   112cc:	       move.l d0,-(sp)
   112ce:	       pea 7 <_start+0x7>
   112d2:	       move.l sp,d0
   112d4:	       addq.l #8,d0
   112d6:	       move.l d0,-(sp)
   112d8:	       jsr 1474c <getValueType>
   112de:	       lea 12(sp),sp
   112e2:	       tst.w d0
   112e4:	   /-- bne.s 112ea <builtIn_showCharacter+0x28>
   112e6:	   |   moveq #1,d0
   112e8:	/--|-- bra.s 1130c <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   112ea:	|  \-> moveq #24,d0
   112ec:	|      add.l 12(sp),d0
   112f0:	|      move.l d0,-(sp)
   112f2:	|      jsr 150d0 <trimStack>
   112f8:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   112fa:	|      move.l (sp),d0
   112fc:	|      move.l d0,-(sp)
   112fe:	|      pea 1 <_start+0x1>
   11302:	|      jsr bbc8 <setShown>
   11308:	|      addq.l #8,sp
	return BR_CONTINUE;
   1130a:	|      moveq #2,d0
}
   1130c:	\----> addq.l #4,sp
   1130e:	       rts

00011310 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11310:	jsr 60fa <killSpeechTimers>
	killMostPeople ();
   11316:	jsr aa00 <killMostPeople>
	return BR_CONTINUE;
   1131c:	moveq #2,d0
}
   1131e:	rts

00011320 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   11320:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11322:	       movea.l 16(sp),a0
   11326:	       move.l 24(a0),d0
   1132a:	       move.l d0,-(sp)
   1132c:	       pea 1 <_start+0x1>
   11330:	       move.l sp,d0
   11332:	       addq.l #8,d0
   11334:	       move.l d0,-(sp)
   11336:	       jsr 1474c <getValueType>
   1133c:	       lea 12(sp),sp
   11340:	       tst.w d0
   11342:	   /-- bne.s 11348 <builtIn_setCharacterDrawMode+0x28>
   11344:	   |   moveq #1,d0
   11346:	/--|-- bra.s 113a2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11348:	|  \-> moveq #24,d0
   1134a:	|      add.l 16(sp),d0
   1134e:	|      move.l d0,-(sp)
   11350:	|      jsr 150d0 <trimStack>
   11356:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11358:	|      movea.l 16(sp),a0
   1135c:	|      move.l 24(a0),d0
   11360:	|      move.l d0,-(sp)
   11362:	|      pea 7 <_start+0x7>
   11366:	|      moveq #12,d0
   11368:	|      add.l sp,d0
   1136a:	|      move.l d0,-(sp)
   1136c:	|      jsr 1474c <getValueType>
   11372:	|      lea 12(sp),sp
   11376:	|      tst.w d0
   11378:	|  /-- bne.s 1137e <builtIn_setCharacterDrawMode+0x5e>
   1137a:	|  |   moveq #1,d0
   1137c:	+--|-- bra.s 113a2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1137e:	|  \-> moveq #24,d0
   11380:	|      add.l 16(sp),d0
   11384:	|      move.l d0,-(sp)
   11386:	|      jsr 150d0 <trimStack>
   1138c:	|      addq.l #4,sp
	setDrawMode (di, obj);
   1138e:	|      move.l 4(sp),d1
   11392:	|      move.l (sp),d0
   11394:	|      move.l d1,-(sp)
   11396:	|      move.l d0,-(sp)
   11398:	|      jsr b506 <setDrawMode>
   1139e:	|      addq.l #8,sp
	return BR_CONTINUE;
   113a0:	|      moveq #2,d0
}
   113a2:	\----> addq.l #8,sp
   113a4:	       rts

000113a6 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   113a6:	pea 19a55 <line.c.05397aaf+0x93>
   113ac:	jsr 171b4 <KPrintF>
   113b2:	addq.l #4,sp
	return BR_CONTINUE;
   113b4:	moveq #2,d0
}
   113b6:	rts

000113b8 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   113b8:	pea 19a88 <line.c.05397aaf+0xc6>
   113be:	jsr 171b4 <KPrintF>
   113c4:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   113c6:	moveq #2,d0
}
   113c8:	rts

000113ca <builtIn_setScale>:

builtIn(setScale)
{
   113ca:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113cc:	       movea.l 16(sp),a0
   113d0:	       move.l 24(a0),d0
   113d4:	       move.l d0,-(sp)
   113d6:	       pea 1 <_start+0x1>
   113da:	       move.l sp,d0
   113dc:	       addq.l #8,d0
   113de:	       move.l d0,-(sp)
   113e0:	       jsr 1474c <getValueType>
   113e6:	       lea 12(sp),sp
   113ea:	       tst.w d0
   113ec:	   /-- bne.s 113f2 <builtIn_setScale+0x28>
   113ee:	   |   moveq #1,d0
   113f0:	/--|-- bra.s 11454 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   113f2:	|  \-> moveq #24,d0
   113f4:	|      add.l 16(sp),d0
   113f8:	|      move.l d0,-(sp)
   113fa:	|      jsr 150d0 <trimStack>
   11400:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11402:	|      movea.l 16(sp),a0
   11406:	|      move.l 24(a0),d0
   1140a:	|      move.l d0,-(sp)
   1140c:	|      pea 1 <_start+0x1>
   11410:	|      moveq #12,d0
   11412:	|      add.l sp,d0
   11414:	|      move.l d0,-(sp)
   11416:	|      jsr 1474c <getValueType>
   1141c:	|      lea 12(sp),sp
   11420:	|      tst.w d0
   11422:	|  /-- bne.s 11428 <builtIn_setScale+0x5e>
   11424:	|  |   moveq #1,d0
   11426:	+--|-- bra.s 11454 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11428:	|  \-> moveq #24,d0
   1142a:	|      add.l 16(sp),d0
   1142e:	|      move.l d0,-(sp)
   11430:	|      jsr 150d0 <trimStack>
   11436:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11438:	|      move.l (sp),d0
   1143a:	|      move.l d0,d0
   1143c:	|      movea.w d0,a1
   1143e:	|      move.l 4(sp),d0
   11442:	|      move.l d0,d0
   11444:	|      movea.w d0,a0
   11446:	|      move.l a1,-(sp)
   11448:	|      move.l a0,-(sp)
   1144a:	|      jsr bba0 <setScale>
   11450:	|      addq.l #8,sp
	return BR_CONTINUE;
   11452:	|      moveq #2,d0
}
   11454:	\----> addq.l #8,sp
   11456:	       rts

00011458 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11458:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1145a:	       movea.l 12(sp),a0
   1145e:	       move.l 24(a0),d0
   11462:	       move.l d0,-(sp)
   11464:	       pea 7 <_start+0x7>
   11468:	       move.l sp,d0
   1146a:	       addq.l #8,d0
   1146c:	       move.l d0,-(sp)
   1146e:	       jsr 1474c <getValueType>
   11474:	       lea 12(sp),sp
   11478:	       tst.w d0
   1147a:	   /-- bne.s 11480 <builtIn_stopCharacter+0x28>
   1147c:	   |   moveq #1,d0
   1147e:	/--|-- bra.s 114b8 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11480:	|  \-> moveq #24,d0
   11482:	|      add.l 12(sp),d0
   11486:	|      move.l d0,-(sp)
   11488:	|      jsr 150d0 <trimStack>
   1148e:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11490:	|      move.l (sp),d0
   11492:	|      move.l d0,-(sp)
   11494:	|      jsr bcd4 <stopPerson>
   1149a:	|      addq.l #4,sp
   1149c:	|      movea.w d0,a0
   1149e:	|      moveq #28,d0
   114a0:	|      add.l 12(sp),d0
   114a4:	|      move.l a0,-(sp)
   114a6:	|      pea 1 <_start+0x1>
   114aa:	|      move.l d0,-(sp)
   114ac:	|      jsr 1503e <setVariable>
   114b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114b6:	|      moveq #2,d0
}
   114b8:	\----> addq.l #4,sp
   114ba:	       rts

000114bc <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   114bc:	pea 19ac2 <line.c.05397aaf+0x100>
   114c2:	jsr 171b4 <KPrintF>
   114c8:	addq.l #4,sp
	return BR_CONTINUE;
   114ca:	moveq #2,d0
}
   114cc:	rts

000114ce <builtIn_animate>:

builtIn(animate)
{
   114ce:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   114d0:	       movea.l 16(sp),a0
   114d4:	       move.l 24(a0),d0
   114d8:	       move.l d0,-(sp)
   114da:	       jsr 14c24 <getAnimationFromVar>
   114e0:	       addq.l #4,sp
   114e2:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   114e6:	   /-- bne.s 114ec <builtIn_animate+0x1e>
   114e8:	   |   moveq #1,d0
   114ea:	/--|-- bra.s 1156a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   114ec:	|  \-> moveq #24,d0
   114ee:	|      add.l 16(sp),d0
   114f2:	|      move.l d0,-(sp)
   114f4:	|      jsr 150d0 <trimStack>
   114fa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114fc:	|      movea.l 16(sp),a0
   11500:	|      move.l 24(a0),d0
   11504:	|      move.l d0,-(sp)
   11506:	|      pea 7 <_start+0x7>
   1150a:	|      move.l sp,d0
   1150c:	|      addq.l #8,d0
   1150e:	|      move.l d0,-(sp)
   11510:	|      jsr 1474c <getValueType>
   11516:	|      lea 12(sp),sp
   1151a:	|      tst.w d0
   1151c:	|  /-- bne.s 11522 <builtIn_animate+0x54>
   1151e:	|  |   moveq #1,d0
   11520:	+--|-- bra.s 1156a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11522:	|  \-> moveq #24,d0
   11524:	|      add.l 16(sp),d0
   11528:	|      move.l d0,-(sp)
   1152a:	|      jsr 150d0 <trimStack>
   11530:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11532:	|      move.l (sp),d0
   11534:	|      move.l 4(sp),-(sp)
   11538:	|      move.l d0,-(sp)
   1153a:	|      jsr 9404 <animatePerson>
   11540:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11542:	|      move.l 4(sp),-(sp)
   11546:	|      jsr bd28 <timeForAnim>
   1154c:	|      addq.l #4,sp
   1154e:	|      move.l d0,d1
   11550:	|      moveq #28,d0
   11552:	|      add.l 16(sp),d0
   11556:	|      move.l d1,-(sp)
   11558:	|      pea 1 <_start+0x1>
   1155c:	|      move.l d0,-(sp)
   1155e:	|      jsr 1503e <setVariable>
   11564:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11568:	|      moveq #2,d0
}
   1156a:	\----> addq.l #8,sp
   1156c:	       rts

0001156e <builtIn_setCostume>:

builtIn(setCostume)
{
   1156e:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11570:	       movea.l 16(sp),a0
   11574:	       move.l 24(a0),d0
   11578:	       move.l d0,-(sp)
   1157a:	       jsr 143f8 <getCostumeFromVar>
   11580:	       addq.l #4,sp
   11582:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11586:	   /-- bne.s 1158c <builtIn_setCostume+0x1e>
   11588:	   |   moveq #1,d0
   1158a:	/--|-- bra.s 115e4 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1158c:	|  \-> moveq #24,d0
   1158e:	|      add.l 16(sp),d0
   11592:	|      move.l d0,-(sp)
   11594:	|      jsr 150d0 <trimStack>
   1159a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1159c:	|      movea.l 16(sp),a0
   115a0:	|      move.l 24(a0),d0
   115a4:	|      move.l d0,-(sp)
   115a6:	|      pea 7 <_start+0x7>
   115aa:	|      move.l sp,d0
   115ac:	|      addq.l #8,d0
   115ae:	|      move.l d0,-(sp)
   115b0:	|      jsr 1474c <getValueType>
   115b6:	|      lea 12(sp),sp
   115ba:	|      tst.w d0
   115bc:	|  /-- bne.s 115c2 <builtIn_setCostume+0x54>
   115be:	|  |   moveq #1,d0
   115c0:	+--|-- bra.s 115e4 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115c2:	|  \-> moveq #24,d0
   115c4:	|      add.l 16(sp),d0
   115c8:	|      move.l d0,-(sp)
   115ca:	|      jsr 150d0 <trimStack>
   115d0:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   115d2:	|      move.l (sp),d0
   115d4:	|      move.l 4(sp),-(sp)
   115d8:	|      move.l d0,-(sp)
   115da:	|      jsr 944e <animatePersonUsingPersona>
   115e0:	|      addq.l #8,sp
	return BR_CONTINUE;
   115e2:	|      moveq #2,d0
}
   115e4:	\----> addq.l #8,sp
   115e6:	       rts

000115e8 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   115e8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115ea:	       movea.l 16(sp),a0
   115ee:	       move.l 24(a0),d0
   115f2:	       move.l d0,-(sp)
   115f4:	       pea 1 <_start+0x1>
   115f8:	       move.l sp,d0
   115fa:	       addq.l #8,d0
   115fc:	       move.l d0,-(sp)
   115fe:	       jsr 1474c <getValueType>
   11604:	       lea 12(sp),sp
   11608:	       tst.w d0
   1160a:	   /-- bne.s 11610 <builtIn_floatCharacter+0x28>
   1160c:	   |   moveq #1,d0
   1160e:	/--|-- bra.s 11684 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11610:	|  \-> moveq #24,d0
   11612:	|      add.l 16(sp),d0
   11616:	|      move.l d0,-(sp)
   11618:	|      jsr 150d0 <trimStack>
   1161e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11620:	|      movea.l 16(sp),a0
   11624:	|      move.l 24(a0),d0
   11628:	|      move.l d0,-(sp)
   1162a:	|      pea 7 <_start+0x7>
   1162e:	|      moveq #12,d0
   11630:	|      add.l sp,d0
   11632:	|      move.l d0,-(sp)
   11634:	|      jsr 1474c <getValueType>
   1163a:	|      lea 12(sp),sp
   1163e:	|      tst.w d0
   11640:	|  /-- bne.s 11646 <builtIn_floatCharacter+0x5e>
   11642:	|  |   moveq #1,d0
   11644:	+--|-- bra.s 11684 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11646:	|  \-> moveq #24,d0
   11648:	|      add.l 16(sp),d0
   1164c:	|      move.l d0,-(sp)
   1164e:	|      jsr 150d0 <trimStack>
   11654:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11656:	|      move.l 4(sp),d1
   1165a:	|      move.l (sp),d0
   1165c:	|      move.l d1,-(sp)
   1165e:	|      move.l d0,-(sp)
   11660:	|      jsr a5c2 <floatCharacter>
   11666:	|      addq.l #8,sp
   11668:	|      movea.w d0,a0
   1166a:	|      moveq #28,d0
   1166c:	|      add.l 16(sp),d0
   11670:	|      move.l a0,-(sp)
   11672:	|      pea 1 <_start+0x1>
   11676:	|      move.l d0,-(sp)
   11678:	|      jsr 1503e <setVariable>
   1167e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11682:	|      moveq #2,d0
}
   11684:	\----> addq.l #8,sp
   11686:	       rts

00011688 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11688:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1168a:	       movea.l 16(sp),a0
   1168e:	       move.l 24(a0),d0
   11692:	       move.l d0,-(sp)
   11694:	       pea 1 <_start+0x1>
   11698:	       move.l sp,d0
   1169a:	       addq.l #8,d0
   1169c:	       move.l d0,-(sp)
   1169e:	       jsr 1474c <getValueType>
   116a4:	       lea 12(sp),sp
   116a8:	       tst.w d0
   116aa:	   /-- bne.s 116b0 <builtIn_setCharacterWalkSpeed+0x28>
   116ac:	   |   moveq #1,d0
   116ae:	/--|-- bra.s 11724 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116b0:	|  \-> moveq #24,d0
   116b2:	|      add.l 16(sp),d0
   116b6:	|      move.l d0,-(sp)
   116b8:	|      jsr 150d0 <trimStack>
   116be:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116c0:	|      movea.l 16(sp),a0
   116c4:	|      move.l 24(a0),d0
   116c8:	|      move.l d0,-(sp)
   116ca:	|      pea 7 <_start+0x7>
   116ce:	|      moveq #12,d0
   116d0:	|      add.l sp,d0
   116d2:	|      move.l d0,-(sp)
   116d4:	|      jsr 1474c <getValueType>
   116da:	|      lea 12(sp),sp
   116de:	|      tst.w d0
   116e0:	|  /-- bne.s 116e6 <builtIn_setCharacterWalkSpeed+0x5e>
   116e2:	|  |   moveq #1,d0
   116e4:	+--|-- bra.s 11724 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116e6:	|  \-> moveq #24,d0
   116e8:	|      add.l 16(sp),d0
   116ec:	|      move.l d0,-(sp)
   116ee:	|      jsr 150d0 <trimStack>
   116f4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   116f6:	|      move.l 4(sp),d1
   116fa:	|      move.l (sp),d0
   116fc:	|      move.l d1,-(sp)
   116fe:	|      move.l d0,-(sp)
   11700:	|      jsr bb3c <setCharacterWalkSpeed>
   11706:	|      addq.l #8,sp
   11708:	|      movea.w d0,a0
   1170a:	|      moveq #28,d0
   1170c:	|      add.l 16(sp),d0
   11710:	|      move.l a0,-(sp)
   11712:	|      pea 1 <_start+0x1>
   11716:	|      move.l d0,-(sp)
   11718:	|      jsr 1503e <setVariable>
   1171e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11722:	|      moveq #2,d0
}
   11724:	\----> addq.l #8,sp
   11726:	       rts

00011728 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11728:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1172a:	       movea.l 16(sp),a0
   1172e:	       move.l 24(a0),d0
   11732:	       move.l d0,-(sp)
   11734:	       pea 1 <_start+0x1>
   11738:	       move.l sp,d0
   1173a:	       addq.l #8,d0
   1173c:	       move.l d0,-(sp)
   1173e:	       jsr 1474c <getValueType>
   11744:	       lea 12(sp),sp
   11748:	       tst.w d0
   1174a:	   /-- bne.s 11750 <builtIn_turnCharacter+0x28>
   1174c:	   |   moveq #1,d0
   1174e:	/--|-- bra.s 117c4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11750:	|  \-> moveq #24,d0
   11752:	|      add.l 16(sp),d0
   11756:	|      move.l d0,-(sp)
   11758:	|      jsr 150d0 <trimStack>
   1175e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11760:	|      movea.l 16(sp),a0
   11764:	|      move.l 24(a0),d0
   11768:	|      move.l d0,-(sp)
   1176a:	|      pea 7 <_start+0x7>
   1176e:	|      moveq #12,d0
   11770:	|      add.l sp,d0
   11772:	|      move.l d0,-(sp)
   11774:	|      jsr 1474c <getValueType>
   1177a:	|      lea 12(sp),sp
   1177e:	|      tst.w d0
   11780:	|  /-- bne.s 11786 <builtIn_turnCharacter+0x5e>
   11782:	|  |   moveq #1,d0
   11784:	+--|-- bra.s 117c4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11786:	|  \-> moveq #24,d0
   11788:	|      add.l 16(sp),d0
   1178c:	|      move.l d0,-(sp)
   1178e:	|      jsr 150d0 <trimStack>
   11794:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11796:	|      move.l (sp),d1
   11798:	|      move.l 4(sp),d0
   1179c:	|      move.l d1,-(sp)
   1179e:	|      move.l d0,-(sp)
   117a0:	|      jsr bde0 <turnPersonToFace>
   117a6:	|      addq.l #8,sp
   117a8:	|      movea.w d0,a0
   117aa:	|      moveq #28,d0
   117ac:	|      add.l 16(sp),d0
   117b0:	|      move.l a0,-(sp)
   117b2:	|      pea 1 <_start+0x1>
   117b6:	|      move.l d0,-(sp)
   117b8:	|      jsr 1503e <setVariable>
   117be:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117c2:	|      moveq #2,d0
}
   117c4:	\----> addq.l #8,sp
   117c6:	       rts

000117c8 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   117c8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117ca:	       movea.l 16(sp),a0
   117ce:	       move.l 24(a0),d0
   117d2:	       move.l d0,-(sp)
   117d4:	       pea 1 <_start+0x1>
   117d8:	       move.l sp,d0
   117da:	       addq.l #8,d0
   117dc:	       move.l d0,-(sp)
   117de:	       jsr 1474c <getValueType>
   117e4:	       lea 12(sp),sp
   117e8:	       tst.w d0
   117ea:	   /-- bne.s 117f0 <builtIn_setCharacterExtra+0x28>
   117ec:	   |   moveq #1,d0
   117ee:	/--|-- bra.s 11864 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   117f0:	|  \-> moveq #24,d0
   117f2:	|      add.l 16(sp),d0
   117f6:	|      move.l d0,-(sp)
   117f8:	|      jsr 150d0 <trimStack>
   117fe:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11800:	|      movea.l 16(sp),a0
   11804:	|      move.l 24(a0),d0
   11808:	|      move.l d0,-(sp)
   1180a:	|      pea 7 <_start+0x7>
   1180e:	|      moveq #12,d0
   11810:	|      add.l sp,d0
   11812:	|      move.l d0,-(sp)
   11814:	|      jsr 1474c <getValueType>
   1181a:	|      lea 12(sp),sp
   1181e:	|      tst.w d0
   11820:	|  /-- bne.s 11826 <builtIn_setCharacterExtra+0x5e>
   11822:	|  |   moveq #1,d0
   11824:	+--|-- bra.s 11864 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11826:	|  \-> moveq #24,d0
   11828:	|      add.l 16(sp),d0
   1182c:	|      move.l d0,-(sp)
   1182e:	|      jsr 150d0 <trimStack>
   11834:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11836:	|      move.l (sp),d1
   11838:	|      move.l 4(sp),d0
   1183c:	|      move.l d1,-(sp)
   1183e:	|      move.l d0,-(sp)
   11840:	|      jsr bb6a <setPersonExtra>
   11846:	|      addq.l #8,sp
   11848:	|      movea.w d0,a0
   1184a:	|      moveq #28,d0
   1184c:	|      add.l 16(sp),d0
   11850:	|      move.l a0,-(sp)
   11852:	|      pea 1 <_start+0x1>
   11856:	|      move.l d0,-(sp)
   11858:	|      jsr 1503e <setVariable>
   1185e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11862:	|      moveq #2,d0
}
   11864:	\----> addq.l #8,sp
   11866:	       rts

00011868 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11868:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1186a:	       movea.l 12(sp),a0
   1186e:	       move.l 24(a0),d0
   11872:	       move.l d0,-(sp)
   11874:	       pea 7 <_start+0x7>
   11878:	       move.l sp,d0
   1187a:	       addq.l #8,d0
   1187c:	       move.l d0,-(sp)
   1187e:	       jsr 1474c <getValueType>
   11884:	       lea 12(sp),sp
   11888:	       tst.w d0
   1188a:	   /-- bne.s 11890 <builtIn_removeCharacter+0x28>
   1188c:	   |   moveq #1,d0
   1188e:	/--|-- bra.s 118ae <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11890:	|  \-> moveq #24,d0
   11892:	|      add.l 12(sp),d0
   11896:	|      move.l d0,-(sp)
   11898:	|      jsr 150d0 <trimStack>
   1189e:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   118a0:	|      move.l (sp),d0
   118a2:	|      move.l d0,-(sp)
   118a4:	|      jsr ad6a <removeOneCharacter>
   118aa:	|      addq.l #4,sp
	return BR_CONTINUE;
   118ac:	|      moveq #2,d0
}
   118ae:	\----> addq.l #4,sp
   118b0:	       rts

000118b2 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   118b2:	                lea -28(sp),sp
   118b6:	                move.l d2,-(sp)
   118b8:	                move.l 44(sp),d1
   118bc:	                move.l 48(sp),d0
   118c0:	                move.w d1,d1
   118c2:	                move.w d1,6(sp)
   118c6:	                move.w d0,d0
   118c8:	                move.w d0,4(sp)
	switch (numParams) {
   118cc:	                moveq #2,d0
   118ce:	                cmp.l 36(sp),d0
   118d2:	      /-------- beq.w 11a14 <moveChr+0x162>
   118d6:	      |         moveq #3,d0
   118d8:	      |         cmp.l 36(sp),d0
   118dc:	/-----|-------- bne.w 11b48 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118e0:	|     |         movea.l 40(sp),a0
   118e4:	|     |         move.l 24(a0),d0
   118e8:	|     |         move.l d0,-(sp)
   118ea:	|     |         pea 1 <_start+0x1>
   118ee:	|     |         lea 20(sp),a0
   118f2:	|     |         move.l a0,-(sp)
   118f4:	|     |         jsr 1474c <getValueType>
   118fa:	|     |         lea 12(sp),sp
   118fe:	|     |         tst.w d0
   11900:	|     |     /-- bne.s 11908 <moveChr+0x56>
   11902:	|     |     |   moveq #1,d0
   11904:	|  /--|-----|-- bra.w 11b58 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11908:	|  |  |     \-> moveq #24,d0
   1190a:	|  |  |         add.l 40(sp),d0
   1190e:	|  |  |         move.l d0,-(sp)
   11910:	|  |  |         jsr 150d0 <trimStack>
   11916:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11918:	|  |  |         movea.l 40(sp),a0
   1191c:	|  |  |         move.l 24(a0),d0
   11920:	|  |  |         move.l d0,-(sp)
   11922:	|  |  |         pea 1 <_start+0x1>
   11926:	|  |  |         lea 24(sp),a0
   1192a:	|  |  |         move.l a0,-(sp)
   1192c:	|  |  |         jsr 1474c <getValueType>
   11932:	|  |  |         lea 12(sp),sp
   11936:	|  |  |         tst.w d0
   11938:	|  |  |     /-- bne.s 11940 <moveChr+0x8e>
   1193a:	|  |  |     |   moveq #1,d0
   1193c:	|  +--|-----|-- bra.w 11b58 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11940:	|  |  |     \-> moveq #24,d0
   11942:	|  |  |         add.l 40(sp),d0
   11946:	|  |  |         move.l d0,-(sp)
   11948:	|  |  |         jsr 150d0 <trimStack>
   1194e:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11950:	|  |  |         movea.l 40(sp),a0
   11954:	|  |  |         move.l 24(a0),d0
   11958:	|  |  |         move.l d0,-(sp)
   1195a:	|  |  |         pea 7 <_start+0x7>
   1195e:	|  |  |         lea 16(sp),a0
   11962:	|  |  |         move.l a0,-(sp)
   11964:	|  |  |         jsr 1474c <getValueType>
   1196a:	|  |  |         lea 12(sp),sp
   1196e:	|  |  |         tst.w d0
   11970:	|  |  |     /-- bne.s 11978 <moveChr+0xc6>
   11972:	|  |  |     |   moveq #1,d0
   11974:	|  +--|-----|-- bra.w 11b58 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11978:	|  |  |     \-> moveq #24,d0
   1197a:	|  |  |         add.l 40(sp),d0
   1197e:	|  |  |         move.l d0,-(sp)
   11980:	|  |  |         jsr 150d0 <trimStack>
   11986:	|  |  |         addq.l #4,sp

			if (force) {
   11988:	|  |  |         tst.w 6(sp)
   1198c:	|  |  |     /-- beq.s 119bc <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1198e:	|  |  |     |   movea.l 8(sp),a0
   11992:	|  |  |     |   move.l 12(sp),d1
   11996:	|  |  |     |   move.l 16(sp),d0
   1199a:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d48>
   1199e:	|  |  |     |   move.l 44(sp),-(sp)
   119a2:	|  |  |     |   move.l a0,-(sp)
   119a4:	|  |  |     |   move.l d1,-(sp)
   119a6:	|  |  |     |   move.l d0,-(sp)
   119a8:	|  |  |     |   jsr a5e6 <forceWalkingPerson>
   119ae:	|  |  |     |   lea 20(sp),sp
   119b2:	|  |  |     |   tst.w d0
   119b4:	|  |  |  /--|-- beq.s 11a0e <moveChr+0x15c>
   119b6:	|  |  |  |  |   moveq #3,d0
   119b8:	|  +--|--|--|-- bra.w 11b58 <moveChr+0x2a6>
			} else if (immediate) {
   119bc:	|  |  |  |  \-> tst.w 4(sp)
   119c0:	|  |  |  |  /-- beq.s 119e0 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   119c2:	|  |  |  |  |   movea.l 8(sp),a0
   119c6:	|  |  |  |  |   move.l 12(sp),d1
   119ca:	|  |  |  |  |   move.l 16(sp),d0
   119ce:	|  |  |  |  |   move.l a0,-(sp)
   119d0:	|  |  |  |  |   move.l d1,-(sp)
   119d2:	|  |  |  |  |   move.l d0,-(sp)
   119d4:	|  |  |  |  |   jsr a8ee <jumpPerson>
   119da:	|  |  |  |  |   lea 12(sp),sp
   119de:	|  |  |  +--|-- bra.s 11a0e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   119e0:	|  |  |  |  \-> movea.l 8(sp),a0
   119e4:	|  |  |  |      move.l 12(sp),d1
   119e8:	|  |  |  |      move.l 16(sp),d0
   119ec:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d48>
   119f0:	|  |  |  |      move.l 44(sp),-(sp)
   119f4:	|  |  |  |      move.l a0,-(sp)
   119f6:	|  |  |  |      move.l d1,-(sp)
   119f8:	|  |  |  |      move.l d0,-(sp)
   119fa:	|  |  |  |      jsr aabe <makeWalkingPerson>
   11a00:	|  |  |  |      lea 20(sp),sp
   11a04:	|  |  |  |      tst.w d0
   11a06:	|  |  |  +----- beq.s 11a0e <moveChr+0x15c>
   11a08:	|  |  |  |      moveq #3,d0
   11a0a:	|  +--|--|----- bra.w 11b58 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a0e:	|  |  |  \----> moveq #2,d0
   11a10:	|  +--|-------- bra.w 11b58 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a14:	|  |  \-------> movea.l 40(sp),a0
   11a18:	|  |            move.l 24(a0),d0
   11a1c:	|  |            move.l d0,-(sp)
   11a1e:	|  |            pea 7 <_start+0x7>
   11a22:	|  |            moveq #32,d0
   11a24:	|  |            add.l sp,d0
   11a26:	|  |            move.l d0,-(sp)
   11a28:	|  |            jsr 1474c <getValueType>
   11a2e:	|  |            lea 12(sp),sp
   11a32:	|  |            tst.w d0
   11a34:	|  |        /-- bne.s 11a3c <moveChr+0x18a>
   11a36:	|  |        |   moveq #1,d0
   11a38:	|  +--------|-- bra.w 11b58 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a3c:	|  |        \-> moveq #24,d0
   11a3e:	|  |            add.l 40(sp),d0
   11a42:	|  |            move.l d0,-(sp)
   11a44:	|  |            jsr 150d0 <trimStack>
   11a4a:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a4c:	|  |            movea.l 40(sp),a0
   11a50:	|  |            move.l 24(a0),d0
   11a54:	|  |            move.l d0,-(sp)
   11a56:	|  |            pea 7 <_start+0x7>
   11a5a:	|  |            lea 28(sp),a0
   11a5e:	|  |            move.l a0,-(sp)
   11a60:	|  |            jsr 1474c <getValueType>
   11a66:	|  |            lea 12(sp),sp
   11a6a:	|  |            tst.w d0
   11a6c:	|  |        /-- bne.s 11a74 <moveChr+0x1c2>
   11a6e:	|  |        |   moveq #1,d0
   11a70:	|  +--------|-- bra.w 11b58 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a74:	|  |        \-> moveq #24,d0
   11a76:	|  |            add.l 40(sp),d0
   11a7a:	|  |            move.l d0,-(sp)
   11a7c:	|  |            jsr 150d0 <trimStack>
   11a82:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11a84:	|  |            move.l 24(sp),d0
   11a88:	|  |            move.l d0,-(sp)
   11a8a:	|  |            jsr 15996 <getRegionForObject>
   11a90:	|  |            addq.l #4,sp
   11a92:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11a96:	|  |        /-- bne.s 11a9e <moveChr+0x1ec>
   11a98:	|  |        |   moveq #2,d0
   11a9a:	|  +--------|-- bra.w 11b58 <moveChr+0x2a6>

			if (force)
   11a9e:	|  |        \-> tst.w 6(sp)
   11aa2:	|  |        /-- beq.s 11ade <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11aa4:	|  |        |   movea.l 28(sp),a0
   11aa8:	|  |        |   move.l 24(a0),d2
   11aac:	|  |        |   movea.l 20(sp),a1
   11ab0:	|  |        |   movea.l 28(sp),a0
   11ab4:	|  |        |   move.l 20(a0),d1
   11ab8:	|  |        |   movea.l 28(sp),a0
   11abc:	|  |        |   move.l 16(a0),d0
   11ac0:	|  |        |   move.l d2,-(sp)
   11ac2:	|  |        |   move.l 44(sp),-(sp)
   11ac6:	|  |        |   move.l a1,-(sp)
   11ac8:	|  |        |   move.l d1,-(sp)
   11aca:	|  |        |   move.l d0,-(sp)
   11acc:	|  |        |   jsr a5e6 <forceWalkingPerson>
   11ad2:	|  |        |   lea 20(sp),sp
   11ad6:	|  |        |   tst.w d0
   11ad8:	|  |     /--|-- beq.s 11b44 <moveChr+0x292>
   11ada:	|  |     |  |   moveq #3,d0
   11adc:	|  +-----|--|-- bra.s 11b58 <moveChr+0x2a6>
			}
			else if (immediate)
   11ade:	|  |     |  \-> tst.w 4(sp)
   11ae2:	|  |     |  /-- beq.s 11b0a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11ae4:	|  |     |  |   movea.l 20(sp),a1
   11ae8:	|  |     |  |   movea.l 28(sp),a0
   11aec:	|  |     |  |   move.l 20(a0),d1
   11af0:	|  |     |  |   movea.l 28(sp),a0
   11af4:	|  |     |  |   move.l 16(a0),d0
   11af8:	|  |     |  |   move.l a1,-(sp)
   11afa:	|  |     |  |   move.l d1,-(sp)
   11afc:	|  |     |  |   move.l d0,-(sp)
   11afe:	|  |     |  |   jsr a8ee <jumpPerson>
   11b04:	|  |     |  |   lea 12(sp),sp
   11b08:	|  |     +--|-- bra.s 11b44 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b0a:	|  |     |  \-> movea.l 28(sp),a0
   11b0e:	|  |     |      move.l 24(a0),d2
   11b12:	|  |     |      movea.l 20(sp),a1
   11b16:	|  |     |      movea.l 28(sp),a0
   11b1a:	|  |     |      move.l 20(a0),d1
   11b1e:	|  |     |      movea.l 28(sp),a0
   11b22:	|  |     |      move.l 16(a0),d0
   11b26:	|  |     |      move.l d2,-(sp)
   11b28:	|  |     |      move.l 44(sp),-(sp)
   11b2c:	|  |     |      move.l a1,-(sp)
   11b2e:	|  |     |      move.l d1,-(sp)
   11b30:	|  |     |      move.l d0,-(sp)
   11b32:	|  |     |      jsr aabe <makeWalkingPerson>
   11b38:	|  |     |      lea 20(sp),sp
   11b3c:	|  |     |      tst.w d0
   11b3e:	|  |     +----- beq.s 11b44 <moveChr+0x292>
   11b40:	|  |     |      moveq #3,d0
   11b42:	|  +-----|----- bra.s 11b58 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b44:	|  |     \----> moveq #2,d0
   11b46:	|  +----------- bra.s 11b58 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11b48:	\--|----------> pea 19ae0 <line.c.05397aaf+0x11e>
   11b4e:	   |            jsr 171b4 <KPrintF>
   11b54:	   |            addq.l #4,sp
			return BR_ERROR;
   11b56:	   |            moveq #1,d0
	}
}
   11b58:	   \----------> move.l (sp)+,d2
   11b5a:	                lea 28(sp),sp
   11b5e:	                rts

00011b60 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11b60:	clr.l -(sp)
   11b62:	clr.l -(sp)
   11b64:	move.l 16(sp),-(sp)
   11b68:	move.l 16(sp),-(sp)
   11b6c:	jsr 118b2 <moveChr>
   11b72:	lea 16(sp),sp
}
   11b76:	rts

00011b78 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11b78:	clr.l -(sp)
   11b7a:	pea 1 <_start+0x1>
   11b7e:	move.l 16(sp),-(sp)
   11b82:	move.l 16(sp),-(sp)
   11b86:	jsr 118b2 <moveChr>
   11b8c:	lea 16(sp),sp
}
   11b90:	rts

00011b92 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11b92:	pea 1 <_start+0x1>
   11b96:	clr.l -(sp)
   11b98:	move.l 16(sp),-(sp)
   11b9c:	move.l 16(sp),-(sp)
   11ba0:	jsr 118b2 <moveChr>
   11ba6:	lea 16(sp),sp
}
   11baa:	rts

00011bac <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11bac:	jsr 77f4 <clearStatusBar>
	return BR_CONTINUE;
   11bb2:	moveq #2,d0
}
   11bb4:	rts

00011bb6 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11bb6:	jsr 789c <killLastStatus>
	return BR_CONTINUE;
   11bbc:	moveq #2,d0
}
   11bbe:	rts

00011bc0 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11bc0:	jsr 778a <addStatusBar>
	return BR_CONTINUE;
   11bc6:	moveq #2,d0
}
   11bc8:	rts

00011bca <builtIn_statusText>:

builtIn(statusText)
{
   11bca:	       subq.l #8,sp
   11bcc:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11bce:	       movea.l 20(sp),a0
   11bd2:	       move.l 24(a0),d0
   11bd6:	       move.l d0,-(sp)
   11bd8:	       jsr 14d22 <getTextFromAnyVar>
   11bde:	       addq.l #4,sp
   11be0:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11be4:	   /-- bne.s 11bea <builtIn_statusText+0x20>
   11be6:	   |   moveq #1,d0
   11be8:	/--|-- bra.s 11c1e <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11bea:	|  \-> moveq #24,d0
   11bec:	|      add.l 20(sp),d0
   11bf0:	|      move.l d0,-(sp)
   11bf2:	|      jsr 150d0 <trimStack>
   11bf8:	|      addq.l #4,sp
	setStatusBar(newText);
   11bfa:	|      move.l 8(sp),-(sp)
   11bfe:	|      jsr 7b1c <setStatusBar>
   11c04:	|      addq.l #4,sp
	FreeVec(newText);
   11c06:	|      move.l 8(sp),4(sp)
   11c0c:	|      move.l 1c902 <SysBase>,d0
   11c12:	|      movea.l d0,a6
   11c14:	|      movea.l 4(sp),a1
   11c18:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c1c:	|      moveq #2,d0
}
   11c1e:	\----> movea.l (sp)+,a6
   11c20:	       addq.l #8,sp
   11c22:	       rts

00011c24 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11c24:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c26:	       movea.l 12(sp),a0
   11c2a:	       move.l 24(a0),d0
   11c2e:	       move.l d0,-(sp)
   11c30:	       pea 1 <_start+0x1>
   11c34:	       move.l sp,d0
   11c36:	       addq.l #8,d0
   11c38:	       move.l d0,-(sp)
   11c3a:	       jsr 1474c <getValueType>
   11c40:	       lea 12(sp),sp
   11c44:	       tst.w d0
   11c46:	   /-- bne.s 11c4c <builtIn_lightStatus+0x28>
   11c48:	   |   moveq #1,d0
   11c4a:	/--|-- bra.s 11c6a <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11c4c:	|  \-> moveq #24,d0
   11c4e:	|      add.l 12(sp),d0
   11c52:	|      move.l d0,-(sp)
   11c54:	|      jsr 150d0 <trimStack>
   11c5a:	|      addq.l #4,sp
	setLitStatus (val);
   11c5c:	|      move.l (sp),d0
   11c5e:	|      move.l d0,-(sp)
   11c60:	|      jsr 7b0c <setLitStatus>
   11c66:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c68:	|      moveq #2,d0
}
   11c6a:	\----> addq.l #4,sp
   11c6c:	       rts

00011c6e <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11c6e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c70:	       movea.l 16(sp),a0
   11c74:	       move.l 24(a0),d0
   11c78:	       move.l d0,-(sp)
   11c7a:	       pea 1 <_start+0x1>
   11c7e:	       move.l sp,d0
   11c80:	       addq.l #8,d0
   11c82:	       move.l d0,-(sp)
   11c84:	       jsr 1474c <getValueType>
   11c8a:	       lea 12(sp),sp
   11c8e:	       tst.w d0
   11c90:	   /-- bne.s 11c96 <builtIn_positionStatus+0x28>
   11c92:	   |   moveq #1,d0
   11c94:	/--|-- bra.s 11cf0 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11c96:	|  \-> moveq #24,d0
   11c98:	|      add.l 16(sp),d0
   11c9c:	|      move.l d0,-(sp)
   11c9e:	|      jsr 150d0 <trimStack>
   11ca4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca6:	|      movea.l 16(sp),a0
   11caa:	|      move.l 24(a0),d0
   11cae:	|      move.l d0,-(sp)
   11cb0:	|      pea 1 <_start+0x1>
   11cb4:	|      moveq #12,d0
   11cb6:	|      add.l sp,d0
   11cb8:	|      move.l d0,-(sp)
   11cba:	|      jsr 1474c <getValueType>
   11cc0:	|      lea 12(sp),sp
   11cc4:	|      tst.w d0
   11cc6:	|  /-- bne.s 11ccc <builtIn_positionStatus+0x5e>
   11cc8:	|  |   moveq #1,d0
   11cca:	+--|-- bra.s 11cf0 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11ccc:	|  \-> moveq #24,d0
   11cce:	|      add.l 16(sp),d0
   11cd2:	|      move.l d0,-(sp)
   11cd4:	|      jsr 150d0 <trimStack>
   11cda:	|      addq.l #4,sp
	positionStatus (x, y);
   11cdc:	|      move.l (sp),d1
   11cde:	|      move.l 4(sp),d0
   11ce2:	|      move.l d1,-(sp)
   11ce4:	|      move.l d0,-(sp)
   11ce6:	|      jsr 78fe <positionStatus>
   11cec:	|      addq.l #8,sp
	return BR_CONTINUE;
   11cee:	|      moveq #2,d0
}
   11cf0:	\----> addq.l #8,sp
   11cf2:	       rts

00011cf4 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11cf4:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cf6:	       movea.l 12(sp),a0
   11cfa:	       move.l 24(a0),d0
   11cfe:	       move.l d0,-(sp)
   11d00:	       pea 1 <_start+0x1>
   11d04:	       move.l sp,d0
   11d06:	       addq.l #8,d0
   11d08:	       move.l d0,-(sp)
   11d0a:	       jsr 1474c <getValueType>
   11d10:	       lea 12(sp),sp
   11d14:	       tst.w d0
   11d16:	   /-- bne.s 11d1c <builtIn_alignStatus+0x28>
   11d18:	   |   moveq #1,d0
   11d1a:	/--|-- bra.s 11d3c <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11d1c:	|  \-> moveq #24,d0
   11d1e:	|      add.l 12(sp),d0
   11d22:	|      move.l d0,-(sp)
   11d24:	|      jsr 150d0 <trimStack>
   11d2a:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11d2c:	|      move.l (sp),d0
   11d2e:	|      movea.l 1c288 <nowStatus>,a0
   11d34:	|      move.l d0,d0
   11d36:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11d3a:	|      moveq #2,d0
}
   11d3c:	\----> addq.l #4,sp
   11d3e:	       rts

00011d40 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11d40:	             tst.l 4(sp)
   11d44:	      /----- beq.s 11d50 <getFuncNumForCallback+0x10>
   11d46:	      |      moveq #1,d0
   11d48:	      |      cmp.l 4(sp),d0
   11d4c:	      |  /-- beq.s 11d56 <getFuncNumForCallback+0x16>
   11d4e:	   /--|--|-- bra.s 11d8c <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11d50:	   |  \--|-> clr.l 12(sp)
			break;
   11d54:	/--|-----|-- bra.s 11d9e <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11d56:	|  |     \-> movea.l 8(sp),a0
   11d5a:	|  |         move.l 24(a0),d0
   11d5e:	|  |         move.l d0,-(sp)
   11d60:	|  |         pea 2 <_start+0x2>
   11d64:	|  |         move.l 20(sp),-(sp)
   11d68:	|  |         jsr 1474c <getValueType>
   11d6e:	|  |         lea 12(sp),sp
   11d72:	|  |         tst.w d0
   11d74:	|  |     /-- bne.s 11d7a <getFuncNumForCallback+0x3a>
   11d76:	|  |     |   clr.w d0
   11d78:	|  |  /--|-- bra.s 11da0 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11d7a:	|  |  |  \-> moveq #24,d0
   11d7c:	|  |  |      add.l 8(sp),d0
   11d80:	|  |  |      move.l d0,-(sp)
   11d82:	|  |  |      jsr 150d0 <trimStack>
   11d88:	|  |  |      addq.l #4,sp
			break;
   11d8a:	+--|--|----- bra.s 11d9e <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11d8c:	|  \--|----> pea 19b16 <line.c.05397aaf+0x154>
   11d92:	|     |      jsr 171b4 <KPrintF>
   11d98:	|     |      addq.l #4,sp
			return FALSE;
   11d9a:	|     |      clr.w d0
   11d9c:	|     +----- bra.s 11da0 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11d9e:	\-----|----> moveq #1,d0
}
   11da0:	      \----> rts

00011da2 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11da2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11da4:	       move.l sp,d0
   11da6:	       move.l d0,-(sp)
   11da8:	       move.l 16(sp),-(sp)
   11dac:	       move.l 16(sp),-(sp)
   11db0:	       jsr 11d40 <getFuncNumForCallback>
   11db6:	       lea 12(sp),sp
   11dba:	       tst.w d0
   11dbc:	/----- beq.s 11dcc <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11dbe:	|      movea.l 1c27a <currentEvents>,a0
   11dc4:	|      move.l (sp),d0
   11dc6:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11dc8:	|      moveq #2,d0
   11dca:	|  /-- bra.s 11dce <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11dcc:	\--|-> moveq #1,d0
}
   11dce:	   \-> addq.l #4,sp
   11dd0:	       rts

00011dd2 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11dd2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dd4:	       move.l sp,d0
   11dd6:	       move.l d0,-(sp)
   11dd8:	       move.l 16(sp),-(sp)
   11ddc:	       move.l 16(sp),-(sp)
   11de0:	       jsr 11d40 <getFuncNumForCallback>
   11de6:	       lea 12(sp),sp
   11dea:	       tst.w d0
   11dec:	/----- beq.s 11dfe <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11dee:	|      movea.l 1c27a <currentEvents>,a0
   11df4:	|      move.l (sp),d0
   11df6:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11dfa:	|      moveq #2,d0
   11dfc:	|  /-- bra.s 11e00 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11dfe:	\--|-> moveq #1,d0
}
   11e00:	   \-> addq.l #4,sp
   11e02:	       rts

00011e04 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e04:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e06:	       move.l sp,d0
   11e08:	       move.l d0,-(sp)
   11e0a:	       move.l 16(sp),-(sp)
   11e0e:	       move.l 16(sp),-(sp)
   11e12:	       jsr 11d40 <getFuncNumForCallback>
   11e18:	       lea 12(sp),sp
   11e1c:	       tst.w d0
   11e1e:	/----- beq.s 11e30 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11e20:	|      movea.l 1c27a <currentEvents>,a0
   11e26:	|      move.l (sp),d0
   11e28:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11e2c:	|      moveq #2,d0
   11e2e:	|  /-- bra.s 11e32 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11e30:	\--|-> moveq #1,d0
}
   11e32:	   \-> addq.l #4,sp
   11e34:	       rts

00011e36 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11e36:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e38:	       move.l sp,d0
   11e3a:	       move.l d0,-(sp)
   11e3c:	       move.l 16(sp),-(sp)
   11e40:	       move.l 16(sp),-(sp)
   11e44:	       jsr 11d40 <getFuncNumForCallback>
   11e4a:	       lea 12(sp),sp
   11e4e:	       tst.w d0
   11e50:	/----- beq.s 11e62 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11e52:	|      movea.l 1c27a <currentEvents>,a0
   11e58:	|      move.l (sp),d0
   11e5a:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11e5e:	|      moveq #2,d0
   11e60:	|  /-- bra.s 11e64 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11e62:	\--|-> moveq #1,d0
}
   11e64:	   \-> addq.l #4,sp
   11e66:	       rts

00011e68 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11e68:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e6a:	       move.l sp,d0
   11e6c:	       move.l d0,-(sp)
   11e6e:	       move.l 16(sp),-(sp)
   11e72:	       move.l 16(sp),-(sp)
   11e76:	       jsr 11d40 <getFuncNumForCallback>
   11e7c:	       lea 12(sp),sp
   11e80:	       tst.w d0
   11e82:	/----- beq.s 11e94 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11e84:	|      movea.l 1c27a <currentEvents>,a0
   11e8a:	|      move.l (sp),d0
   11e8c:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11e90:	|      moveq #2,d0
   11e92:	|  /-- bra.s 11e96 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11e94:	\--|-> moveq #1,d0
}
   11e96:	   \-> addq.l #4,sp
   11e98:	       rts

00011e9a <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11e9a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e9c:	       move.l sp,d0
   11e9e:	       move.l d0,-(sp)
   11ea0:	       move.l 16(sp),-(sp)
   11ea4:	       move.l 16(sp),-(sp)
   11ea8:	       jsr 11d40 <getFuncNumForCallback>
   11eae:	       lea 12(sp),sp
   11eb2:	       tst.w d0
   11eb4:	/----- beq.s 11ec6 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11eb6:	|      movea.l 1c27a <currentEvents>,a0
   11ebc:	|      move.l (sp),d0
   11ebe:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11ec2:	|      moveq #2,d0
   11ec4:	|  /-- bra.s 11ec8 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11ec6:	\--|-> moveq #1,d0
}
   11ec8:	   \-> addq.l #4,sp
   11eca:	       rts

00011ecc <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11ecc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ece:	       move.l sp,d0
   11ed0:	       move.l d0,-(sp)
   11ed2:	       move.l 16(sp),-(sp)
   11ed6:	       move.l 16(sp),-(sp)
   11eda:	       jsr 11d40 <getFuncNumForCallback>
   11ee0:	       lea 12(sp),sp
   11ee4:	       tst.w d0
   11ee6:	/----- beq.s 11ef8 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11ee8:	|      movea.l 1c27a <currentEvents>,a0
   11eee:	|      move.l (sp),d0
   11ef0:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11ef4:	|      moveq #2,d0
   11ef6:	|  /-- bra.s 11efa <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11ef8:	\--|-> moveq #1,d0
}
   11efa:	   \-> addq.l #4,sp
   11efc:	       rts

00011efe <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11efe:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f00:	          move.l sp,d0
   11f02:	          move.l d0,-(sp)
   11f04:	          move.l 16(sp),-(sp)
   11f08:	          move.l 16(sp),-(sp)
   11f0c:	          jsr 11d40 <getFuncNumForCallback>
   11f12:	          lea 12(sp),sp
   11f16:	          tst.w d0
   11f18:	/-------- beq.s 11f44 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11f1a:	|         move.l 1c8d2 <noStack>,d1
   11f20:	|         move.l (sp),d0
   11f22:	|         pea 1 <_start+0x1>
   11f26:	|         move.l d1,-(sp)
   11f28:	|         clr.l -(sp)
   11f2a:	|         clr.l -(sp)
   11f2c:	|         move.l d0,-(sp)
   11f2e:	|         jsr 69ce <startNewFunctionNum>
   11f34:	|         lea 20(sp),sp
   11f38:	|         tst.l d0
   11f3a:	|     /-- bne.s 11f40 <builtIn_spawnSub+0x42>
   11f3c:	|     |   moveq #1,d0
   11f3e:	|  /--|-- bra.s 11f46 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11f40:	|  |  \-> moveq #2,d0
   11f42:	|  +----- bra.s 11f46 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11f44:	\--|----> moveq #1,d0
}
   11f46:	   \----> addq.l #4,sp
   11f48:	          rts

00011f4a <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11f4a:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f4c:	          move.l sp,d0
   11f4e:	          addq.l #4,d0
   11f50:	          move.l d0,-(sp)
   11f52:	          move.l 20(sp),-(sp)
   11f56:	          move.l 20(sp),-(sp)
   11f5a:	          jsr 11d40 <getFuncNumForCallback>
   11f60:	          lea 12(sp),sp
   11f64:	          tst.w d0
   11f66:	/-------- beq.s 11f9c <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11f68:	|         move.l 4(sp),d1
   11f6c:	|         move.l sp,d0
   11f6e:	|         addq.l #2,d0
   11f70:	|         move.l d0,-(sp)
   11f72:	|         move.l 20(sp),-(sp)
   11f76:	|         move.l d1,-(sp)
   11f78:	|         jsr 46f4 <cancelAFunction>
   11f7e:	|         lea 12(sp),sp
		if (killedMyself) {
   11f82:	|         move.w 2(sp),d0
   11f86:	|  /----- beq.s 11f98 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11f88:	|  |      move.l 16(sp),-(sp)
   11f8c:	|  |      jsr 4612 <abortFunction>
   11f92:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11f94:	|  |      moveq #5,d0
   11f96:	|  |  /-- bra.s 11f9e <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11f98:	|  \--|-> moveq #2,d0
   11f9a:	|     +-- bra.s 11f9e <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11f9c:	\-----|-> moveq #1,d0
}
   11f9e:	      \-> addq.l #8,sp
   11fa0:	          rts

00011fa2 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11fa2:	       subq.l #8,sp
   11fa4:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11fa6:	       movea.l 20(sp),a0
   11faa:	       move.l 24(a0),d0
   11fae:	       move.l d0,-(sp)
   11fb0:	       jsr 14d22 <getTextFromAnyVar>
   11fb6:	       addq.l #4,sp
   11fb8:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11fbc:	   /-- bne.s 11fc2 <builtIn_stringWidth+0x20>
   11fbe:	   |   moveq #1,d0
   11fc0:	/--|-- bra.s 12010 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11fc2:	|  \-> moveq #24,d0
   11fc4:	|      add.l 20(sp),d0
   11fc8:	|      move.l d0,-(sp)
   11fca:	|      jsr 150d0 <trimStack>
   11fd0:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11fd2:	|      move.l 8(sp),-(sp)
   11fd6:	|      jsr 15836 <stringWidth>
   11fdc:	|      addq.l #4,sp
   11fde:	|      move.l d0,d1
   11fe0:	|      moveq #28,d0
   11fe2:	|      add.l 20(sp),d0
   11fe6:	|      move.l d1,-(sp)
   11fe8:	|      pea 1 <_start+0x1>
   11fec:	|      move.l d0,-(sp)
   11fee:	|      jsr 1503e <setVariable>
   11ff4:	|      lea 12(sp),sp
	FreeVec(theText);
   11ff8:	|      move.l 8(sp),4(sp)
   11ffe:	|      move.l 1c902 <SysBase>,d0
   12004:	|      movea.l d0,a6
   12006:	|      movea.l 4(sp),a1
   1200a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1200e:	|      moveq #2,d0
}
   12010:	\----> movea.l (sp)+,a6
   12012:	       addq.l #8,sp
   12014:	       rts

00012016 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12016:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12018:	       movea.l 12(sp),a0
   1201c:	       move.l 24(a0),d0
   12020:	       move.l d0,-(sp)
   12022:	       pea 1 <_start+0x1>
   12026:	       move.l sp,d0
   12028:	       addq.l #8,d0
   1202a:	       move.l d0,-(sp)
   1202c:	       jsr 1474c <getValueType>
   12032:	       lea 12(sp),sp
   12036:	       tst.w d0
   12038:	   /-- bne.s 1203e <builtIn_hardScroll+0x28>
   1203a:	   |   moveq #1,d0
   1203c:	/--|-- bra.s 1205c <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1203e:	|  \-> moveq #24,d0
   12040:	|      add.l 12(sp),d0
   12044:	|      move.l d0,-(sp)
   12046:	|      jsr 150d0 <trimStack>
   1204c:	|      addq.l #4,sp
	hardScroll (v);
   1204e:	|      move.l (sp),d0
   12050:	|      move.l d0,-(sp)
   12052:	|      jsr d1e8 <hardScroll>
   12058:	|      addq.l #4,sp
	return BR_CONTINUE;
   1205a:	|      moveq #2,d0
}
   1205c:	\----> addq.l #4,sp
   1205e:	       rts

00012060 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   12060:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12062:	       movea.l 12(sp),a0
   12066:	       move.l 24(a0),d0
   1206a:	       move.l d0,-(sp)
   1206c:	       pea 7 <_start+0x7>
   12070:	       move.l sp,d0
   12072:	       addq.l #8,d0
   12074:	       move.l d0,-(sp)
   12076:	       jsr 1474c <getValueType>
   1207c:	       lea 12(sp),sp
   12080:	       tst.w d0
   12082:	   /-- bne.s 12088 <builtIn_isScreenRegion+0x28>
   12084:	   |   moveq #1,d0
   12086:	/--|-- bra.s 120c8 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12088:	|  \-> moveq #24,d0
   1208a:	|      add.l 12(sp),d0
   1208e:	|      move.l d0,-(sp)
   12090:	|      jsr 150d0 <trimStack>
   12096:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12098:	|      move.l (sp),d0
   1209a:	|      move.l d0,-(sp)
   1209c:	|      jsr 15996 <getRegionForObject>
   120a2:	|      addq.l #4,sp
   120a4:	|      tst.l d0
   120a6:	|      sne d0
   120a8:	|      neg.b d0
   120aa:	|      moveq #0,d1
   120ac:	|      move.b d0,d1
   120ae:	|      moveq #28,d0
   120b0:	|      add.l 12(sp),d0
   120b4:	|      move.l d1,-(sp)
   120b6:	|      pea 1 <_start+0x1>
   120ba:	|      move.l d0,-(sp)
   120bc:	|      jsr 1503e <setVariable>
   120c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   120c6:	|      moveq #2,d0
}
   120c8:	\----> addq.l #4,sp
   120ca:	       rts

000120cc <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   120cc:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120ce:	       movea.l 12(sp),a0
   120d2:	       move.l 24(a0),d0
   120d6:	       move.l d0,-(sp)
   120d8:	       pea 1 <_start+0x1>
   120dc:	       move.l sp,d0
   120de:	       addq.l #8,d0
   120e0:	       move.l d0,-(sp)
   120e2:	       jsr 1474c <getValueType>
   120e8:	       lea 12(sp),sp
   120ec:	       tst.w d0
   120ee:	   /-- bne.s 120f4 <builtIn_setSpeechSpeed+0x28>
   120f0:	   |   moveq #1,d0
   120f2:	/--|-- bra.s 12142 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   120f4:	|  \-> moveq #24,d0
   120f6:	|      add.l 12(sp),d0
   120fa:	|      move.l d0,-(sp)
   120fc:	|      jsr 150d0 <trimStack>
   12102:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12104:	|      move.l (sp),d0
   12106:	|      move.l d0,-(sp)
   12108:	|      jsr 175e6 <__floatsisf>
   1210e:	|      addq.l #4,sp
   12110:	|      move.l #1008981770,-(sp)
   12116:	|      move.l d0,-(sp)
   12118:	|      jsr 17698 <__mulsf3>
   1211e:	|      addq.l #8,sp
   12120:	|      move.l d0,1c28c <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12126:	|      moveq #28,d0
   12128:	|      add.l 12(sp),d0
   1212c:	|      pea 1 <_start+0x1>
   12130:	|      pea 1 <_start+0x1>
   12134:	|      move.l d0,-(sp)
   12136:	|      jsr 1503e <setVariable>
   1213c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12140:	|      moveq #2,d0
}
   12142:	\----> addq.l #4,sp
   12144:	       rts

00012146 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12146:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12148:	       movea.l 12(sp),a0
   1214c:	       move.l 24(a0),d0
   12150:	       move.l d0,-(sp)
   12152:	       pea 1 <_start+0x1>
   12156:	       move.l sp,d0
   12158:	       addq.l #8,d0
   1215a:	       move.l d0,-(sp)
   1215c:	       jsr 1474c <getValueType>
   12162:	       lea 12(sp),sp
   12166:	       tst.w d0
   12168:	   /-- bne.s 1216e <builtIn_setFontSpacing+0x28>
   1216a:	   |   moveq #1,d0
   1216c:	/--|-- bra.s 121a4 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1216e:	|  \-> move.l (sp),d0
   12170:	|      move.l d0,d0
   12172:	|      move.w d0,1c806 <fontSpace>
	trimStack (&fun -> stack);
   12178:	|      moveq #24,d0
   1217a:	|      add.l 12(sp),d0
   1217e:	|      move.l d0,-(sp)
   12180:	|      jsr 150d0 <trimStack>
   12186:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12188:	|      moveq #28,d0
   1218a:	|      add.l 12(sp),d0
   1218e:	|      pea 1 <_start+0x1>
   12192:	|      pea 1 <_start+0x1>
   12196:	|      move.l d0,-(sp)
   12198:	|      jsr 1503e <setVariable>
   1219e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121a2:	|      moveq #2,d0
}
   121a4:	\----> addq.l #4,sp
   121a6:	       rts

000121a8 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   121a8:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121aa:	          movea.l 12(sp),a0
   121ae:	          move.l 24(a0),d0
   121b2:	          move.l d0,-(sp)
   121b4:	          pea 1 <_start+0x1>
   121b8:	          move.l sp,d0
   121ba:	          addq.l #8,d0
   121bc:	          move.l d0,-(sp)
   121be:	          jsr 1474c <getValueType>
   121c4:	          lea 12(sp),sp
   121c8:	          tst.w d0
   121ca:	      /-- bne.s 121d0 <builtIn_transitionLevel+0x28>
   121cc:	      |   moveq #1,d0
   121ce:	/-----|-- bra.s 12224 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   121d0:	|     \-> moveq #24,d0
   121d2:	|         add.l 12(sp),d0
   121d6:	|         move.l d0,-(sp)
   121d8:	|         jsr 150d0 <trimStack>
   121de:	|         addq.l #4,sp

	if (number < 0)
   121e0:	|         move.l (sp),d0
   121e2:	|     /-- bpl.s 121ec <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   121e4:	|     |   clr.b 1c278 <brightnessLevel>
   121ea:	|  /--|-- bra.s 12208 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   121ec:	|  |  \-> move.l (sp),d0
   121ee:	|  |      cmpi.l #255,d0
   121f4:	|  |  /-- ble.s 121fe <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   121f6:	|  |  |   st 1c278 <brightnessLevel>
   121fc:	|  +--|-- bra.s 12208 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   121fe:	|  |  \-> move.l (sp),d0
   12200:	|  |      move.l d0,d0
   12202:	|  |      move.b d0,1c278 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12208:	|  \----> moveq #28,d0
   1220a:	|         add.l 12(sp),d0
   1220e:	|         pea 1 <_start+0x1>
   12212:	|         pea 1 <_start+0x1>
   12216:	|         move.l d0,-(sp)
   12218:	|         jsr 1503e <setVariable>
   1221e:	|         lea 12(sp),sp
	return BR_CONTINUE;
   12222:	|         moveq #2,d0
}
   12224:	\-------> addq.l #4,sp
   12226:	          rts

00012228 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12228:	movea.l 8(sp),a0
   1222c:	move.l 24(a0),d0
   12230:	move.l d0,-(sp)
   12232:	jsr 14c8c <getBoolean>
   12238:	addq.l #4,sp
   1223a:	move.w d0,1c8a2 <captureAllKeys>
	trimStack (&fun -> stack);
   12240:	moveq #24,d0
   12242:	add.l 8(sp),d0
   12246:	move.l d0,-(sp)
   12248:	jsr 150d0 <trimStack>
   1224e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12250:	move.w 1c8a2 <captureAllKeys>,d0
   12256:	movea.w d0,a0
   12258:	moveq #28,d0
   1225a:	add.l 8(sp),d0
   1225e:	move.l a0,-(sp)
   12260:	pea 1 <_start+0x1>
   12264:	move.l d0,-(sp)
   12266:	jsr 1503e <setVariable>
   1226c:	lea 12(sp),sp
	return BR_CONTINUE;
   12270:	moveq #2,d0
}
   12272:	rts

00012274 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12274:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12278:	       movea.l 20(sp),a0
   1227c:	       move.l 24(a0),d0
   12280:	       move.l d0,-(sp)
   12282:	       pea 1 <_start+0x1>
   12286:	       moveq #12,d0
   12288:	       add.l sp,d0
   1228a:	       move.l d0,-(sp)
   1228c:	       jsr 1474c <getValueType>
   12292:	       lea 12(sp),sp
   12296:	       tst.w d0
   12298:	   /-- bne.s 122a0 <builtIn_spinCharacter+0x2c>
   1229a:	   |   moveq #1,d0
   1229c:	/--|-- bra.w 12350 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   122a0:	|  \-> moveq #24,d0
   122a2:	|      add.l 20(sp),d0
   122a6:	|      move.l d0,-(sp)
   122a8:	|      jsr 150d0 <trimStack>
   122ae:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122b0:	|      movea.l 20(sp),a0
   122b4:	|      move.l 24(a0),d0
   122b8:	|      move.l d0,-(sp)
   122ba:	|      pea 7 <_start+0x7>
   122be:	|      lea 8(sp),a0
   122c2:	|      move.l a0,-(sp)
   122c4:	|      jsr 1474c <getValueType>
   122ca:	|      lea 12(sp),sp
   122ce:	|      tst.w d0
   122d0:	|  /-- bne.s 122d6 <builtIn_spinCharacter+0x62>
   122d2:	|  |   moveq #1,d0
   122d4:	+--|-- bra.s 12350 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   122d6:	|  \-> moveq #24,d0
   122d8:	|      add.l 20(sp),d0
   122dc:	|      move.l d0,-(sp)
   122de:	|      jsr 150d0 <trimStack>
   122e4:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122e6:	|      move.l (sp),d0
   122e8:	|      move.l d0,-(sp)
   122ea:	|      jsr a594 <findPerson>
   122f0:	|      addq.l #4,sp
   122f2:	|      move.l d0,8(sp)
	if (thisPerson) {
   122f6:	|  /-- beq.s 12336 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   122f8:	|  |   move.l 4(sp),d0
   122fc:	|  |   movea.l 8(sp),a0
   12300:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12304:	|  |   movea.l 8(sp),a0
   12308:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1230e:	|  |   movea.l 8(sp),a0
   12312:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12318:	|  |   moveq #28,d0
   1231a:	|  |   add.l 20(sp),d0
   1231e:	|  |   pea 1 <_start+0x1>
   12322:	|  |   pea 1 <_start+0x1>
   12326:	|  |   move.l d0,-(sp)
   12328:	|  |   jsr 1503e <setVariable>
   1232e:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   12332:	|  |   moveq #3,d0
   12334:	+--|-- bra.s 12350 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12336:	|  \-> moveq #28,d0
   12338:	|      add.l 20(sp),d0
   1233c:	|      clr.l -(sp)
   1233e:	|      pea 1 <_start+0x1>
   12342:	|      move.l d0,-(sp)
   12344:	|      jsr 1503e <setVariable>
   1234a:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1234e:	|      moveq #2,d0
	}
}
   12350:	\----> lea 12(sp),sp
   12354:	       rts

00012356 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12356:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12358:	          movea.l 16(sp),a0
   1235c:	          move.l 24(a0),d0
   12360:	          move.l d0,-(sp)
   12362:	          pea 7 <_start+0x7>
   12366:	          move.l sp,d0
   12368:	          addq.l #8,d0
   1236a:	          move.l d0,-(sp)
   1236c:	          jsr 1474c <getValueType>
   12372:	          lea 12(sp),sp
   12376:	          tst.w d0
   12378:	      /-- bne.s 1237e <builtIn_getCharacterDirection+0x28>
   1237a:	      |   moveq #1,d0
   1237c:	/-----|-- bra.s 123dc <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1237e:	|     \-> moveq #24,d0
   12380:	|         add.l 16(sp),d0
   12384:	|         move.l d0,-(sp)
   12386:	|         jsr 150d0 <trimStack>
   1238c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1238e:	|         move.l (sp),d0
   12390:	|         move.l d0,-(sp)
   12392:	|         jsr a594 <findPerson>
   12398:	|         addq.l #4,sp
   1239a:	|         move.l d0,4(sp)
	if (thisPerson) {
   1239e:	|  /----- beq.s 123c2 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   123a0:	|  |      movea.l 4(sp),a0
   123a4:	|  |      move.l 106(a0),d1
   123a8:	|  |      moveq #28,d0
   123aa:	|  |      add.l 16(sp),d0
   123ae:	|  |      move.l d1,-(sp)
   123b0:	|  |      pea 1 <_start+0x1>
   123b4:	|  |      move.l d0,-(sp)
   123b6:	|  |      jsr 1503e <setVariable>
   123bc:	|  |      lea 12(sp),sp
   123c0:	|  |  /-- bra.s 123da <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123c2:	|  \--|-> moveq #28,d0
   123c4:	|     |   add.l 16(sp),d0
   123c8:	|     |   clr.l -(sp)
   123ca:	|     |   pea 1 <_start+0x1>
   123ce:	|     |   move.l d0,-(sp)
   123d0:	|     |   jsr 1503e <setVariable>
   123d6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123da:	|     \-> moveq #2,d0
}
   123dc:	\-------> addq.l #8,sp
   123de:	          rts

000123e0 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   123e0:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123e2:	       movea.l 16(sp),a0
   123e6:	       move.l 24(a0),d0
   123ea:	       move.l d0,-(sp)
   123ec:	       pea 7 <_start+0x7>
   123f0:	       move.l sp,d0
   123f2:	       addq.l #8,d0
   123f4:	       move.l d0,-(sp)
   123f6:	       jsr 1474c <getValueType>
   123fc:	       lea 12(sp),sp
   12400:	       tst.w d0
   12402:	   /-- bne.s 12408 <builtIn_isCharacter+0x28>
   12404:	   |   moveq #1,d0
   12406:	/--|-- bra.s 1244a <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12408:	|  \-> moveq #24,d0
   1240a:	|      add.l 16(sp),d0
   1240e:	|      move.l d0,-(sp)
   12410:	|      jsr 150d0 <trimStack>
   12416:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12418:	|      move.l (sp),d0
   1241a:	|      move.l d0,-(sp)
   1241c:	|      jsr a594 <findPerson>
   12422:	|      addq.l #4,sp
   12424:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12428:	|      sne d0
   1242a:	|      neg.b d0
   1242c:	|      moveq #0,d1
   1242e:	|      move.b d0,d1
   12430:	|      moveq #28,d0
   12432:	|      add.l 16(sp),d0
   12436:	|      move.l d1,-(sp)
   12438:	|      pea 1 <_start+0x1>
   1243c:	|      move.l d0,-(sp)
   1243e:	|      jsr 1503e <setVariable>
   12444:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12448:	|      moveq #2,d0
}
   1244a:	\----> addq.l #8,sp
   1244c:	       rts

0001244e <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1244e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12450:	          movea.l 16(sp),a0
   12454:	          move.l 24(a0),d0
   12458:	          move.l d0,-(sp)
   1245a:	          pea 7 <_start+0x7>
   1245e:	          move.l sp,d0
   12460:	          addq.l #8,d0
   12462:	          move.l d0,-(sp)
   12464:	          jsr 1474c <getValueType>
   1246a:	          lea 12(sp),sp
   1246e:	          tst.w d0
   12470:	      /-- bne.s 12476 <builtIn_normalCharacter+0x28>
   12472:	      |   moveq #1,d0
   12474:	/-----|-- bra.s 124f2 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12476:	|     \-> moveq #24,d0
   12478:	|         add.l 16(sp),d0
   1247c:	|         move.l d0,-(sp)
   1247e:	|         jsr 150d0 <trimStack>
   12484:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12486:	|         move.l (sp),d0
   12488:	|         move.l d0,-(sp)
   1248a:	|         jsr a594 <findPerson>
   12490:	|         addq.l #4,sp
   12492:	|         move.l d0,4(sp)
	if (thisPerson)
   12496:	|  /----- beq.s 124d8 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12498:	|  |      movea.l 4(sp),a0
   1249c:	|  |      movea.l 80(a0),a0
   124a0:	|  |      move.l (a0),d1
   124a2:	|  |      movea.l 4(sp),a0
   124a6:	|  |      move.l 106(a0),d0
   124aa:	|  |      add.l d0,d0
   124ac:	|  |      add.l d0,d0
   124ae:	|  |      movea.l d1,a0
   124b0:	|  |      adda.l d0,a0
   124b2:	|  |      move.l (a0),d0
   124b4:	|  |      movea.l 4(sp),a0
   124b8:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   124bc:	|  |      moveq #28,d0
   124be:	|  |      add.l 16(sp),d0
   124c2:	|  |      pea 1 <_start+0x1>
   124c6:	|  |      pea 1 <_start+0x1>
   124ca:	|  |      move.l d0,-(sp)
   124cc:	|  |      jsr 1503e <setVariable>
   124d2:	|  |      lea 12(sp),sp
   124d6:	|  |  /-- bra.s 124f0 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124d8:	|  \--|-> moveq #28,d0
   124da:	|     |   add.l 16(sp),d0
   124de:	|     |   clr.l -(sp)
   124e0:	|     |   pea 1 <_start+0x1>
   124e4:	|     |   move.l d0,-(sp)
   124e6:	|     |   jsr 1503e <setVariable>
   124ec:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   124f0:	|     \-> moveq #2,d0
}
   124f2:	\-------> addq.l #8,sp
   124f4:	          rts

000124f6 <builtIn_isMoving>:

builtIn(isMoving)
{
   124f6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124f8:	          movea.l 16(sp),a0
   124fc:	          move.l 24(a0),d0
   12500:	          move.l d0,-(sp)
   12502:	          pea 7 <_start+0x7>
   12506:	          move.l sp,d0
   12508:	          addq.l #8,d0
   1250a:	          move.l d0,-(sp)
   1250c:	          jsr 1474c <getValueType>
   12512:	          lea 12(sp),sp
   12516:	          tst.w d0
   12518:	      /-- bne.s 1251e <builtIn_isMoving+0x28>
   1251a:	      |   moveq #1,d0
   1251c:	/-----|-- bra.s 1257e <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1251e:	|     \-> moveq #24,d0
   12520:	|         add.l 16(sp),d0
   12524:	|         move.l d0,-(sp)
   12526:	|         jsr 150d0 <trimStack>
   1252c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1252e:	|         move.l (sp),d0
   12530:	|         move.l d0,-(sp)
   12532:	|         jsr a594 <findPerson>
   12538:	|         addq.l #4,sp
   1253a:	|         move.l d0,4(sp)
	if (thisPerson)
   1253e:	|  /----- beq.s 12564 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12540:	|  |      movea.l 4(sp),a0
   12544:	|  |      move.w 64(a0),d0
   12548:	|  |      movea.w d0,a0
   1254a:	|  |      moveq #28,d0
   1254c:	|  |      add.l 16(sp),d0
   12550:	|  |      move.l a0,-(sp)
   12552:	|  |      pea 1 <_start+0x1>
   12556:	|  |      move.l d0,-(sp)
   12558:	|  |      jsr 1503e <setVariable>
   1255e:	|  |      lea 12(sp),sp
   12562:	|  |  /-- bra.s 1257c <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12564:	|  \--|-> moveq #28,d0
   12566:	|     |   add.l 16(sp),d0
   1256a:	|     |   clr.l -(sp)
   1256c:	|     |   pea 1 <_start+0x1>
   12570:	|     |   move.l d0,-(sp)
   12572:	|     |   jsr 1503e <setVariable>
   12578:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1257c:	|     \-> moveq #2,d0
}
   1257e:	\-------> addq.l #8,sp
   12580:	          rts

00012582 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12582:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12586:	          movea.l 20(sp),a0
   1258a:	          move.l 24(a0),d0
   1258e:	          move.l d0,-(sp)
   12590:	          pea 7 <_start+0x7>
   12594:	          lea 8(sp),a0
   12598:	          move.l a0,-(sp)
   1259a:	          jsr 1474c <getValueType>
   125a0:	          lea 12(sp),sp
   125a4:	          tst.w d0
   125a6:	      /-- bne.s 125ae <builtIn_fetchEvent+0x2c>
   125a8:	      |   moveq #1,d0
   125aa:	/-----|-- bra.w 12642 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   125ae:	|     \-> moveq #24,d0
   125b0:	|         add.l 20(sp),d0
   125b4:	|         move.l d0,-(sp)
   125b6:	|         jsr 150d0 <trimStack>
   125bc:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125be:	|         movea.l 20(sp),a0
   125c2:	|         move.l 24(a0),d0
   125c6:	|         move.l d0,-(sp)
   125c8:	|         pea 7 <_start+0x7>
   125cc:	|         moveq #12,d0
   125ce:	|         add.l sp,d0
   125d0:	|         move.l d0,-(sp)
   125d2:	|         jsr 1474c <getValueType>
   125d8:	|         lea 12(sp),sp
   125dc:	|         tst.w d0
   125de:	|     /-- bne.s 125e4 <builtIn_fetchEvent+0x62>
   125e0:	|     |   moveq #1,d0
   125e2:	+-----|-- bra.s 12642 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   125e4:	|     \-> moveq #24,d0
   125e6:	|         add.l 20(sp),d0
   125ea:	|         move.l d0,-(sp)
   125ec:	|         jsr 150d0 <trimStack>
   125f2:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   125f4:	|         move.l (sp),d1
   125f6:	|         move.l 4(sp),d0
   125fa:	|         move.l d1,-(sp)
   125fc:	|         move.l d0,-(sp)
   125fe:	|         jsr d4ca <getCombinationFunction>
   12604:	|         addq.l #8,sp
   12606:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1260a:	|  /----- beq.s 12628 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1260c:	|  |      moveq #28,d0
   1260e:	|  |      add.l 20(sp),d0
   12612:	|  |      move.l 8(sp),-(sp)
   12616:	|  |      pea 2 <_start+0x2>
   1261a:	|  |      move.l d0,-(sp)
   1261c:	|  |      jsr 1503e <setVariable>
   12622:	|  |      lea 12(sp),sp
   12626:	|  |  /-- bra.s 12640 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12628:	|  \--|-> moveq #28,d0
   1262a:	|     |   add.l 20(sp),d0
   1262e:	|     |   clr.l -(sp)
   12630:	|     |   pea 1 <_start+0x1>
   12634:	|     |   move.l d0,-(sp)
   12636:	|     |   jsr 1503e <setVariable>
   1263c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12640:	|     \-> moveq #2,d0
}
   12642:	\-------> lea 12(sp),sp
   12646:	          rts

00012648 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12648:	       lea -24(sp),sp
   1264c:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1264e:	       movea.l 36(sp),a0
   12652:	       move.l 24(a0),d0
   12656:	       move.l d0,-(sp)
   12658:	       jsr 14d22 <getTextFromAnyVar>
   1265e:	       addq.l #4,sp
   12660:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12664:	       moveq #24,d0
   12666:	       add.l 36(sp),d0
   1266a:	       move.l d0,-(sp)
   1266c:	       jsr 150d0 <trimStack>
   12672:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12674:	       move.l 24(sp),-(sp)
   12678:	       jsr 2fe <encodeFilename>
   1267e:	       addq.l #4,sp
   12680:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12684:	       move.l 24(sp),16(sp)
   1268a:	       move.l 1c902 <SysBase>,d0
   12690:	       movea.l d0,a6
   12692:	       movea.l 16(sp),a1
   12696:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1269a:	       move.l 20(sp),-(sp)
   1269e:	       jsr e282 <failSecurityCheck>
   126a4:	       addq.l #4,sp
   126a6:	       tst.w d0
   126a8:	   /-- beq.s 126ae <builtIn_deleteFile+0x66>
   126aa:	   |   moveq #1,d0
   126ac:	/--|-- bra.s 126fc <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   126ae:	|  \-> move.l 20(sp),12(sp)
   126b4:	|      move.l 1c90a <DOSBase>,d0
   126ba:	|      movea.l d0,a6
   126bc:	|      move.l 12(sp),d1
   126c0:	|      jsr -72(a6)
   126c4:	|      move.l d0,8(sp)
   126c8:	|      move.l 8(sp),d1
   126cc:	|      moveq #28,d0
   126ce:	|      add.l 36(sp),d0
   126d2:	|      move.l d1,-(sp)
   126d4:	|      pea 1 <_start+0x1>
   126d8:	|      move.l d0,-(sp)
   126da:	|      jsr 1503e <setVariable>
   126e0:	|      lea 12(sp),sp
    FreeVec(nam);
   126e4:	|      move.l 20(sp),4(sp)
   126ea:	|      move.l 1c902 <SysBase>,d0
   126f0:	|      movea.l d0,a6
   126f2:	|      movea.l 4(sp),a1
   126f6:	|      jsr -690(a6)

    return BR_CONTINUE;
   126fa:	|      moveq #2,d0
}
   126fc:	\----> movea.l (sp)+,a6
   126fe:	       lea 24(sp),sp
   12702:	       rts

00012704 <builtIn_renameFile>:

builtIn(renameFile)
{
   12704:	       lea -40(sp),sp
   12708:	       move.l a6,-(sp)
   1270a:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1270c:	       movea.l 56(sp),a0
   12710:	       move.l 24(a0),d0
   12714:	       move.l d0,-(sp)
   12716:	       jsr 14d22 <getTextFromAnyVar>
   1271c:	       addq.l #4,sp
   1271e:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12722:	       move.l 44(sp),-(sp)
   12726:	       jsr 2fe <encodeFilename>
   1272c:	       addq.l #4,sp
   1272e:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12732:	       moveq #24,d0
   12734:	       add.l 56(sp),d0
   12738:	       move.l d0,-(sp)
   1273a:	       jsr 150d0 <trimStack>
   12740:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12742:	       move.l 40(sp),-(sp)
   12746:	       jsr e282 <failSecurityCheck>
   1274c:	       addq.l #4,sp
   1274e:	       tst.w d0
   12750:	   /-- beq.s 12758 <builtIn_renameFile+0x54>
   12752:	   |   moveq #1,d0
   12754:	/--|-- bra.w 1283e <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12758:	|  \-> move.l 44(sp),36(sp)
   1275e:	|      move.l 1c902 <SysBase>,d0
   12764:	|      movea.l d0,a6
   12766:	|      movea.l 36(sp),a1
   1276a:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1276e:	|      movea.l 56(sp),a0
   12772:	|      move.l 24(a0),d0
   12776:	|      move.l d0,-(sp)
   12778:	|      jsr 14d22 <getTextFromAnyVar>
   1277e:	|      addq.l #4,sp
   12780:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12784:	|      move.l 44(sp),-(sp)
   12788:	|      jsr 2fe <encodeFilename>
   1278e:	|      addq.l #4,sp
   12790:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12794:	|      moveq #24,d0
   12796:	|      add.l 56(sp),d0
   1279a:	|      move.l d0,-(sp)
   1279c:	|      jsr 150d0 <trimStack>
   127a2:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   127a4:	|      move.l 32(sp),-(sp)
   127a8:	|      jsr e282 <failSecurityCheck>
   127ae:	|      addq.l #4,sp
   127b0:	|      tst.w d0
   127b2:	|  /-- beq.s 127ba <builtIn_renameFile+0xb6>
   127b4:	|  |   moveq #1,d0
   127b6:	+--|-- bra.w 1283e <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127ba:	|  \-> move.l 44(sp),28(sp)
   127c0:	|      move.l 1c902 <SysBase>,d0
   127c6:	|      movea.l d0,a6
   127c8:	|      movea.l 28(sp),a1
   127cc:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   127d0:	|      move.l 32(sp),24(sp)
   127d6:	|      move.l 40(sp),20(sp)
   127dc:	|      move.l 1c90a <DOSBase>,d0
   127e2:	|      movea.l d0,a6
   127e4:	|      move.l 24(sp),d1
   127e8:	|      move.l 20(sp),d2
   127ec:	|      jsr -78(a6)
   127f0:	|      move.l d0,16(sp)
   127f4:	|      move.l 16(sp),d1
   127f8:	|      moveq #28,d0
   127fa:	|      add.l 56(sp),d0
   127fe:	|      move.l d1,-(sp)
   12800:	|      pea 1 <_start+0x1>
   12804:	|      move.l d0,-(sp)
   12806:	|      jsr 1503e <setVariable>
   1280c:	|      lea 12(sp),sp
	FreeVec(nam);
   12810:	|      move.l 32(sp),12(sp)
   12816:	|      move.l 1c902 <SysBase>,d0
   1281c:	|      movea.l d0,a6
   1281e:	|      movea.l 12(sp),a1
   12822:	|      jsr -690(a6)
	FreeVec(newnam);
   12826:	|      move.l 40(sp),8(sp)
   1282c:	|      move.l 1c902 <SysBase>,d0
   12832:	|      movea.l d0,a6
   12834:	|      movea.l 8(sp),a1
   12838:	|      jsr -690(a6)

	return BR_CONTINUE;
   1283c:	|      moveq #2,d0
}
   1283e:	\----> move.l (sp)+,d2
   12840:	       movea.l (sp)+,a6
   12842:	       lea 40(sp),sp
   12846:	       rts

00012848 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12848:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1284a:	       movea.l 12(sp),a0
   1284e:	       move.l 24(a0),d0
   12852:	       move.l d0,-(sp)
   12854:	       pea 5 <_start+0x5>
   12858:	       move.l sp,d0
   1285a:	       addq.l #8,d0
   1285c:	       move.l d0,-(sp)
   1285e:	       jsr 1474c <getValueType>
   12864:	       lea 12(sp),sp
   12868:	       tst.w d0
   1286a:	   /-- bne.s 12870 <builtIn_cacheSound+0x28>
   1286c:	   |   moveq #1,d0
   1286e:	/--|-- bra.s 12898 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12870:	|  \-> moveq #24,d0
   12872:	|      add.l 12(sp),d0
   12876:	|      move.l d0,-(sp)
   12878:	|      jsr 150d0 <trimStack>
   1287e:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12880:	|      move.l (sp),d0
   12882:	|      move.l d0,-(sp)
   12884:	|      jsr d0ca <cacheSound>
   1288a:	|      addq.l #4,sp
   1288c:	|      moveq #-1,d1
   1288e:	|      cmp.l d0,d1
   12890:	|  /-- bne.s 12896 <builtIn_cacheSound+0x4e>
   12892:	|  |   moveq #1,d0
   12894:	+--|-- bra.s 12898 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12896:	|  \-> moveq #2,d0
}
   12898:	\----> addq.l #4,sp
   1289a:	       rts

0001289c <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1289c:	pea 19b2b <line.c.05397aaf+0x169>
   128a2:	jsr 171b4 <KPrintF>
   128a8:	addq.l #4,sp
	return BR_CONTINUE;
   128aa:	moveq #2,d0
}
   128ac:	rts

000128ae <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   128ae:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128b2:	          movea.l 20(sp),a0
   128b6:	          move.l 24(a0),d0
   128ba:	          move.l d0,-(sp)
   128bc:	          pea 1 <_start+0x1>
   128c0:	          moveq #12,d0
   128c2:	          add.l sp,d0
   128c4:	          move.l d0,-(sp)
   128c6:	          jsr 1474c <getValueType>
   128cc:	          lea 12(sp),sp
   128d0:	          tst.w d0
   128d2:	      /-- bne.s 128da <builtIn_setCharacterSpinSpeed+0x2c>
   128d4:	      |   moveq #1,d0
   128d6:	/-----|-- bra.w 12974 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   128da:	|     \-> moveq #24,d0
   128dc:	|         add.l 20(sp),d0
   128e0:	|         move.l d0,-(sp)
   128e2:	|         jsr 150d0 <trimStack>
   128e8:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128ea:	|         movea.l 20(sp),a0
   128ee:	|         move.l 24(a0),d0
   128f2:	|         move.l d0,-(sp)
   128f4:	|         pea 7 <_start+0x7>
   128f8:	|         lea 8(sp),a0
   128fc:	|         move.l a0,-(sp)
   128fe:	|         jsr 1474c <getValueType>
   12904:	|         lea 12(sp),sp
   12908:	|         tst.w d0
   1290a:	|     /-- bne.s 12910 <builtIn_setCharacterSpinSpeed+0x62>
   1290c:	|     |   moveq #1,d0
   1290e:	+-----|-- bra.s 12974 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12910:	|     \-> moveq #24,d0
   12912:	|         add.l 20(sp),d0
   12916:	|         move.l d0,-(sp)
   12918:	|         jsr 150d0 <trimStack>
   1291e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12920:	|         move.l (sp),d0
   12922:	|         move.l d0,-(sp)
   12924:	|         jsr a594 <findPerson>
   1292a:	|         addq.l #4,sp
   1292c:	|         move.l d0,8(sp)

	if (thisPerson) {
   12930:	|  /----- beq.s 1295a <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12932:	|  |      move.l 4(sp),d0
   12936:	|  |      movea.l 8(sp),a0
   1293a:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1293e:	|  |      moveq #28,d0
   12940:	|  |      add.l 20(sp),d0
   12944:	|  |      pea 1 <_start+0x1>
   12948:	|  |      pea 1 <_start+0x1>
   1294c:	|  |      move.l d0,-(sp)
   1294e:	|  |      jsr 1503e <setVariable>
   12954:	|  |      lea 12(sp),sp
   12958:	|  |  /-- bra.s 12972 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1295a:	|  \--|-> moveq #28,d0
   1295c:	|     |   add.l 20(sp),d0
   12960:	|     |   clr.l -(sp)
   12962:	|     |   pea 1 <_start+0x1>
   12966:	|     |   move.l d0,-(sp)
   12968:	|     |   jsr 1503e <setVariable>
   1296e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12972:	|     \-> moveq #2,d0
}
   12974:	\-------> lea 12(sp),sp
   12978:	          rts

0001297a <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1297a:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1297e:	          movea.l 20(sp),a0
   12982:	          move.l 24(a0),d0
   12986:	          move.l d0,-(sp)
   12988:	          pea 1 <_start+0x1>
   1298c:	          moveq #12,d0
   1298e:	          add.l sp,d0
   12990:	          move.l d0,-(sp)
   12992:	          jsr 1474c <getValueType>
   12998:	          lea 12(sp),sp
   1299c:	          tst.w d0
   1299e:	      /-- bne.s 129a6 <builtIn_setCharacterAngleOffset+0x2c>
   129a0:	      |   moveq #1,d0
   129a2:	/-----|-- bra.w 12a40 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   129a6:	|     \-> moveq #24,d0
   129a8:	|         add.l 20(sp),d0
   129ac:	|         move.l d0,-(sp)
   129ae:	|         jsr 150d0 <trimStack>
   129b4:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129b6:	|         movea.l 20(sp),a0
   129ba:	|         move.l 24(a0),d0
   129be:	|         move.l d0,-(sp)
   129c0:	|         pea 7 <_start+0x7>
   129c4:	|         lea 8(sp),a0
   129c8:	|         move.l a0,-(sp)
   129ca:	|         jsr 1474c <getValueType>
   129d0:	|         lea 12(sp),sp
   129d4:	|         tst.w d0
   129d6:	|     /-- bne.s 129dc <builtIn_setCharacterAngleOffset+0x62>
   129d8:	|     |   moveq #1,d0
   129da:	+-----|-- bra.s 12a40 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   129dc:	|     \-> moveq #24,d0
   129de:	|         add.l 20(sp),d0
   129e2:	|         move.l d0,-(sp)
   129e4:	|         jsr 150d0 <trimStack>
   129ea:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129ec:	|         move.l (sp),d0
   129ee:	|         move.l d0,-(sp)
   129f0:	|         jsr a594 <findPerson>
   129f6:	|         addq.l #4,sp
   129f8:	|         move.l d0,8(sp)

	if (thisPerson) {
   129fc:	|  /----- beq.s 12a26 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   129fe:	|  |      move.l 4(sp),d0
   12a02:	|  |      movea.l 8(sp),a0
   12a06:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a0a:	|  |      moveq #28,d0
   12a0c:	|  |      add.l 20(sp),d0
   12a10:	|  |      pea 1 <_start+0x1>
   12a14:	|  |      pea 1 <_start+0x1>
   12a18:	|  |      move.l d0,-(sp)
   12a1a:	|  |      jsr 1503e <setVariable>
   12a20:	|  |      lea 12(sp),sp
   12a24:	|  |  /-- bra.s 12a3e <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a26:	|  \--|-> moveq #28,d0
   12a28:	|     |   add.l 20(sp),d0
   12a2c:	|     |   clr.l -(sp)
   12a2e:	|     |   pea 1 <_start+0x1>
   12a32:	|     |   move.l d0,-(sp)
   12a34:	|     |   jsr 1503e <setVariable>
   12a3a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a3e:	|     \-> moveq #2,d0
}
   12a40:	\-------> lea 12(sp),sp
   12a44:	          rts

00012a46 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12a46:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a48:	       movea.l 12(sp),a0
   12a4c:	       move.l 24(a0),d0
   12a50:	       move.l d0,-(sp)
   12a52:	       pea 1 <_start+0x1>
   12a56:	       move.l sp,d0
   12a58:	       addq.l #8,d0
   12a5a:	       move.l d0,-(sp)
   12a5c:	       jsr 1474c <getValueType>
   12a62:	       lea 12(sp),sp
   12a66:	       tst.w d0
   12a68:	   /-- bne.s 12a6e <builtIn_transitionMode+0x28>
   12a6a:	   |   moveq #1,d0
   12a6c:	/--|-- bra.s 12aa4 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12a6e:	|  \-> move.l (sp),d0
   12a70:	|      move.l d0,d0
   12a72:	|      move.b d0,1c7dc <fadeMode>
	trimStack (&fun -> stack);
   12a78:	|      moveq #24,d0
   12a7a:	|      add.l 12(sp),d0
   12a7e:	|      move.l d0,-(sp)
   12a80:	|      jsr 150d0 <trimStack>
   12a86:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12a88:	|      moveq #28,d0
   12a8a:	|      add.l 12(sp),d0
   12a8e:	|      pea 1 <_start+0x1>
   12a92:	|      pea 1 <_start+0x1>
   12a96:	|      move.l d0,-(sp)
   12a98:	|      jsr 1503e <setVariable>
   12a9e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12aa2:	|      moveq #2,d0
}
   12aa4:	\----> addq.l #4,sp
   12aa6:	       rts

00012aa8 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12aa8:	moveq #24,d0
   12aaa:	add.l 8(sp),d0
   12aae:	move.l d0,-(sp)
   12ab0:	jsr 150d0 <trimStack>
   12ab6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12ab8:	moveq #28,d0
   12aba:	add.l 8(sp),d0
   12abe:	pea 1 <_start+0x1>
   12ac2:	pea 1 <_start+0x1>
   12ac6:	move.l d0,-(sp)
   12ac8:	jsr 1503e <setVariable>
   12ace:	lea 12(sp),sp
	return BR_CONTINUE;
   12ad2:	moveq #2,d0
}
   12ad4:	rts

00012ad6 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12ad6:	pea 19b55 <line.c.05397aaf+0x193>
   12adc:	jsr 171b4 <KPrintF>
   12ae2:	addq.l #4,sp
	return BR_CONTINUE;
   12ae4:	moveq #2,d0
}
   12ae6:	rts

00012ae8 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12ae8:	       lea -16(sp),sp
   12aec:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12aee:	       movea.l 28(sp),a0
   12af2:	       move.l 24(a0),d0
   12af6:	       move.l d0,-(sp)
   12af8:	       jsr 14d22 <getTextFromAnyVar>
   12afe:	       addq.l #4,sp
   12b00:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12b04:	   /-- bne.s 12b0c <builtIn_saveCustomData+0x24>
   12b06:	   |   moveq #1,d0
   12b08:	/--|-- bra.w 12bbe <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12b0c:	|  \-> move.l 16(sp),-(sp)
   12b10:	|      jsr 2fe <encodeFilename>
   12b16:	|      addq.l #4,sp
   12b18:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12b1c:	|      move.l 16(sp),8(sp)
   12b22:	|      move.l 1c902 <SysBase>,d0
   12b28:	|      movea.l d0,a6
   12b2a:	|      movea.l 8(sp),a1
   12b2e:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12b32:	|      move.l 12(sp),-(sp)
   12b36:	|      jsr e282 <failSecurityCheck>
   12b3c:	|      addq.l #4,sp
   12b3e:	|      tst.w d0
   12b40:	|  /-- beq.s 12b46 <builtIn_saveCustomData+0x5e>
   12b42:	|  |   moveq #1,d0
   12b44:	+--|-- bra.s 12bbe <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12b46:	|  \-> moveq #24,d0
   12b48:	|      add.l 28(sp),d0
   12b4c:	|      move.l d0,-(sp)
   12b4e:	|      jsr 150d0 <trimStack>
   12b54:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12b56:	|      movea.l 28(sp),a0
   12b5a:	|      movea.l 24(a0),a0
   12b5e:	|      move.l (a0),d0
   12b60:	|      moveq #6,d1
   12b62:	|      cmp.l d0,d1
   12b64:	|  /-- beq.s 12b78 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12b66:	|  |   pea 19b82 <line.c.05397aaf+0x1c0>
   12b6c:	|  |   jsr 171b4 <KPrintF>
   12b72:	|  |   addq.l #4,sp
		return BR_ERROR;
   12b74:	|  |   moveq #1,d0
   12b76:	+--|-- bra.s 12bbe <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12b78:	|  \-> movea.l 28(sp),a0
   12b7c:	|      move.l 24(a0),d0
   12b80:	|      move.l d0,-(sp)
   12b82:	|      move.l 16(sp),-(sp)
   12b86:	|      jsr ded2 <stackToFile>
   12b8c:	|      addq.l #8,sp
   12b8e:	|      tst.w d0
   12b90:	|  /-- bne.s 12b96 <builtIn_saveCustomData+0xae>
   12b92:	|  |   moveq #1,d0
   12b94:	+--|-- bra.s 12bbe <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12b96:	|  \-> moveq #24,d0
   12b98:	|      add.l 28(sp),d0
   12b9c:	|      move.l d0,-(sp)
   12b9e:	|      jsr 150d0 <trimStack>
   12ba4:	|      addq.l #4,sp
	FreeVec(fileName);
   12ba6:	|      move.l 12(sp),4(sp)
   12bac:	|      move.l 1c902 <SysBase>,d0
   12bb2:	|      movea.l d0,a6
   12bb4:	|      movea.l 4(sp),a1
   12bb8:	|      jsr -690(a6)
	return BR_CONTINUE;
   12bbc:	|      moveq #2,d0
}
   12bbe:	\----> movea.l (sp)+,a6
   12bc0:	       lea 16(sp),sp
   12bc4:	       rts

00012bc6 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12bc6:	       lea -28(sp),sp
   12bca:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12bcc:	       movea.l 40(sp),a0
   12bd0:	       move.l 24(a0),d0
   12bd4:	       move.l d0,-(sp)
   12bd6:	       jsr 14d22 <getTextFromAnyVar>
   12bdc:	       addq.l #4,sp
   12bde:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12be2:	   /-- bne.s 12bea <builtIn_loadCustomData+0x24>
   12be4:	   |   moveq #1,d0
   12be6:	/--|-- bra.w 12ce6 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12bea:	|  \-> move.l 28(sp),-(sp)
   12bee:	|      jsr 2fe <encodeFilename>
   12bf4:	|      addq.l #4,sp
   12bf6:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12bfa:	|      move.l 28(sp),20(sp)
   12c00:	|      move.l 1c902 <SysBase>,d0
   12c06:	|      movea.l d0,a6
   12c08:	|      movea.l 20(sp),a1
   12c0c:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12c10:	|      move.l 24(sp),-(sp)
   12c14:	|      jsr e282 <failSecurityCheck>
   12c1a:	|      addq.l #4,sp
   12c1c:	|      tst.w d0
   12c1e:	|  /-- beq.s 12c26 <builtIn_loadCustomData+0x60>
   12c20:	|  |   moveq #1,d0
   12c22:	+--|-- bra.w 12ce6 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12c26:	|  \-> moveq #24,d0
   12c28:	|      add.l 40(sp),d0
   12c2c:	|      move.l d0,-(sp)
   12c2e:	|      jsr 150d0 <trimStack>
   12c34:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12c36:	|      moveq #28,d0
   12c38:	|      add.l 40(sp),d0
   12c3c:	|      move.l d0,-(sp)
   12c3e:	|      jsr 1499a <unlinkVar>
   12c44:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12c46:	|      movea.l 40(sp),a0
   12c4a:	|      moveq #6,d0
   12c4c:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12c50:	|      moveq #12,d0
   12c52:	|      move.l d0,16(sp)
   12c56:	|      clr.l 12(sp)
   12c5a:	|      move.l 1c902 <SysBase>,d0
   12c60:	|      movea.l d0,a6
   12c62:	|      move.l 16(sp),d0
   12c66:	|      move.l 12(sp),d1
   12c6a:	|      jsr -684(a6)
   12c6e:	|      move.l d0,8(sp)
   12c72:	|      move.l 8(sp),d0
   12c76:	|      movea.l 40(sp),a0
   12c7a:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12c7e:	|      movea.l 40(sp),a0
   12c82:	|      move.l 32(a0),d0
   12c86:	|  /-- bne.s 12c8c <builtIn_loadCustomData+0xc6>
   12c88:	|  |   moveq #1,d0
   12c8a:	+--|-- bra.s 12ce6 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12c8c:	|  \-> movea.l 40(sp),a0
   12c90:	|      movea.l 32(a0),a0
   12c94:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12c96:	|      movea.l 40(sp),a0
   12c9a:	|      movea.l 32(a0),a0
   12c9e:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12ca2:	|      movea.l 40(sp),a0
   12ca6:	|      movea.l 32(a0),a0
   12caa:	|      moveq #1,d0
   12cac:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12cb0:	|      movea.l 40(sp),a0
   12cb4:	|      move.l 32(a0),d0
   12cb8:	|      move.l d0,-(sp)
   12cba:	|      move.l 28(sp),-(sp)
   12cbe:	|      jsr d90c <fileToStack>
   12cc4:	|      addq.l #8,sp
   12cc6:	|      tst.w d0
   12cc8:	|  /-- bne.s 12cce <builtIn_loadCustomData+0x108>
   12cca:	|  |   moveq #1,d0
   12ccc:	+--|-- bra.s 12ce6 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12cce:	|  \-> move.l 24(sp),4(sp)
   12cd4:	|      move.l 1c902 <SysBase>,d0
   12cda:	|      movea.l d0,a6
   12cdc:	|      movea.l 4(sp),a1
   12ce0:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ce4:	|      moveq #2,d0
}
   12ce6:	\----> movea.l (sp)+,a6
   12ce8:	       lea 28(sp),sp
   12cec:	       rts

00012cee <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12cee:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cf0:	       movea.l 12(sp),a0
   12cf4:	       move.l 24(a0),d0
   12cf8:	       move.l d0,-(sp)
   12cfa:	       pea 1 <_start+0x1>
   12cfe:	       move.l sp,d0
   12d00:	       addq.l #8,d0
   12d02:	       move.l d0,-(sp)
   12d04:	       jsr 1474c <getValueType>
   12d0a:	       lea 12(sp),sp
   12d0e:	       tst.w d0
   12d10:	   /-- bne.s 12d16 <builtIn_setCustomEncoding+0x28>
   12d12:	   |   moveq #1,d0
   12d14:	/--|-- bra.s 12d4c <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12d16:	|  \-> move.l (sp),d0
   12d18:	|      move.l d0,d0
   12d1a:	|      move.w d0,1c9ba <saveEncoding>
	trimStack (&fun -> stack);
   12d20:	|      moveq #24,d0
   12d22:	|      add.l 12(sp),d0
   12d26:	|      move.l d0,-(sp)
   12d28:	|      jsr 150d0 <trimStack>
   12d2e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12d30:	|      moveq #28,d0
   12d32:	|      add.l 12(sp),d0
   12d36:	|      pea 1 <_start+0x1>
   12d3a:	|      pea 1 <_start+0x1>
   12d3e:	|      move.l d0,-(sp)
   12d40:	|      jsr 1503e <setVariable>
   12d46:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12d4a:	|      moveq #2,d0
}
   12d4c:	\----> addq.l #4,sp
   12d4e:	       rts

00012d50 <builtIn_freeSound>:

builtIn(freeSound)
{
   12d50:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d52:	       movea.l 12(sp),a0
   12d56:	       move.l 24(a0),d0
   12d5a:	       move.l d0,-(sp)
   12d5c:	       pea 5 <_start+0x5>
   12d60:	       move.l sp,d0
   12d62:	       addq.l #8,d0
   12d64:	       move.l d0,-(sp)
   12d66:	       jsr 1474c <getValueType>
   12d6c:	       lea 12(sp),sp
   12d70:	       tst.w d0
   12d72:	   /-- bne.s 12d78 <builtIn_freeSound+0x28>
   12d74:	   |   moveq #1,d0
   12d76:	/--|-- bra.s 12d96 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12d78:	|  \-> moveq #24,d0
   12d7a:	|      add.l 12(sp),d0
   12d7e:	|      move.l d0,-(sp)
   12d80:	|      jsr 150d0 <trimStack>
   12d86:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12d88:	|      move.l (sp),d0
   12d8a:	|      move.l d0,-(sp)
   12d8c:	|      jsr d0ce <huntKillFreeSound>
   12d92:	|      addq.l #4,sp
	return BR_CONTINUE;
   12d94:	|      moveq #2,d0
}
   12d96:	\----> addq.l #4,sp
   12d98:	       rts

00012d9a <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12d9a:	       lea -12(sp),sp
   12d9e:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12da0:	       movea.l 24(sp),a0
   12da4:	       move.l 24(a0),d0
   12da8:	       move.l d0,-(sp)
   12daa:	       pea 1 <_start+0x1>
   12dae:	       moveq #16,d0
   12db0:	       add.l sp,d0
   12db2:	       move.l d0,-(sp)
   12db4:	       jsr 1474c <getValueType>
   12dba:	       lea 12(sp),sp
   12dbe:	       tst.w d0
   12dc0:	   /-- bne.s 12dc8 <builtIn_parallaxAdd+0x2e>
   12dc2:	   |   moveq #1,d0
   12dc4:	/--|-- bra.w 12e9c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12dc8:	|  \-> moveq #24,d0
   12dca:	|      add.l 24(sp),d0
   12dce:	|      move.l d0,-(sp)
   12dd0:	|      jsr 150d0 <trimStack>
   12dd6:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12dd8:	|      movea.l 24(sp),a0
   12ddc:	|      move.l 24(a0),d0
   12de0:	|      move.l d0,-(sp)
   12de2:	|      pea 1 <_start+0x1>
   12de6:	|      moveq #20,d0
   12de8:	|      add.l sp,d0
   12dea:	|      move.l d0,-(sp)
   12dec:	|      jsr 1474c <getValueType>
   12df2:	|      lea 12(sp),sp
   12df6:	|      tst.w d0
   12df8:	|  /-- bne.s 12e00 <builtIn_parallaxAdd+0x66>
   12dfa:	|  |   moveq #1,d0
   12dfc:	+--|-- bra.w 12e9c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e00:	|  \-> moveq #24,d0
   12e02:	|      add.l 24(sp),d0
   12e06:	|      move.l d0,-(sp)
   12e08:	|      jsr 150d0 <trimStack>
   12e0e:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e10:	|      movea.l 24(sp),a0
   12e14:	|      move.l 24(a0),d0
   12e18:	|      move.l d0,-(sp)
   12e1a:	|      pea 5 <_start+0x5>
   12e1e:	|      lea 12(sp),a0
   12e22:	|      move.l a0,-(sp)
   12e24:	|      jsr 1474c <getValueType>
   12e2a:	|      lea 12(sp),sp
   12e2e:	|      tst.w d0
   12e30:	|  /-- bne.s 12e36 <builtIn_parallaxAdd+0x9c>
   12e32:	|  |   moveq #1,d0
   12e34:	+--|-- bra.s 12e9c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e36:	|  \-> moveq #24,d0
   12e38:	|      add.l 24(sp),d0
   12e3c:	|      move.l d0,-(sp)
   12e3e:	|      jsr 150d0 <trimStack>
   12e44:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12e46:	|      move.l 8(sp),d0
   12e4a:	|      move.l d0,d0
   12e4c:	|      moveq #0,d2
   12e4e:	|      move.w d0,d2
   12e50:	|      move.l 12(sp),d0
   12e54:	|      move.l d0,d0
   12e56:	|      moveq #0,d1
   12e58:	|      move.w d0,d1
   12e5a:	|      move.l 4(sp),d0
   12e5e:	|      move.l d0,d0
   12e60:	|      move.w d0,d0
   12e62:	|      andi.l #65535,d0
   12e68:	|      move.l d2,-(sp)
   12e6a:	|      move.l d1,-(sp)
   12e6c:	|      move.l d0,-(sp)
   12e6e:	|      jsr d2ea <loadParallax>
   12e74:	|      lea 12(sp),sp
   12e78:	|      tst.w d0
   12e7a:	|  /-- bne.s 12e80 <builtIn_parallaxAdd+0xe6>
   12e7c:	|  |   moveq #1,d0
   12e7e:	+--|-- bra.s 12e9c <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12e80:	|  \-> moveq #28,d0
   12e82:	|      add.l 24(sp),d0
   12e86:	|      pea 1 <_start+0x1>
   12e8a:	|      pea 1 <_start+0x1>
   12e8e:	|      move.l d0,-(sp)
   12e90:	|      jsr 1503e <setVariable>
   12e96:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12e9a:	|      moveq #2,d0
}
   12e9c:	\----> move.l (sp)+,d2
   12e9e:	       lea 12(sp),sp
   12ea2:	       rts

00012ea4 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12ea4:	jsr d222 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12eaa:	moveq #28,d0
   12eac:	add.l 8(sp),d0
   12eb0:	pea 1 <_start+0x1>
   12eb4:	pea 1 <_start+0x1>
   12eb8:	move.l d0,-(sp)
   12eba:	jsr 1503e <setVariable>
   12ec0:	lea 12(sp),sp
	return BR_CONTINUE;
   12ec4:	moveq #2,d0
}
   12ec6:	rts

00012ec8 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12ec8:	pea 19ba0 <line.c.05397aaf+0x1de>
   12ece:	jsr 171b4 <KPrintF>
   12ed4:	addq.l #4,sp

	return BR_CONTINUE;
   12ed6:	moveq #2,d0
}
   12ed8:	rts

00012eda <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12eda:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12edc:	             movea.l 16(sp),a0
   12ee0:	             movea.l 24(a0),a0
   12ee4:	             move.l (a0),d0
   12ee6:	             moveq #1,d1
   12ee8:	             cmp.l d0,d1
   12eea:	      /----- beq.s 12f32 <builtIn_makeFastArray+0x58>
   12eec:	      |      moveq #6,d1
   12eee:	      |      cmp.l d0,d1
   12ef0:	/-----|----- bne.s 12f70 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12ef2:	|     |      movea.l 16(sp),a0
   12ef6:	|     |      movea.l 24(a0),a0
   12efa:	|     |      move.l 4(a0),d1
   12efe:	|     |      moveq #28,d0
   12f00:	|     |      add.l 16(sp),d0
   12f04:	|     |      move.l d1,-(sp)
   12f06:	|     |      move.l d0,-(sp)
   12f08:	|     |      jsr 147fe <makeFastArrayFromStack>
   12f0e:	|     |      addq.l #8,sp
   12f10:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12f14:	|     |      moveq #24,d0
   12f16:	|     |      add.l 16(sp),d0
   12f1a:	|     |      move.l d0,-(sp)
   12f1c:	|     |      jsr 150d0 <trimStack>
   12f22:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12f24:	|     |      tst.w 6(sp)
   12f28:	|     |  /-- beq.s 12f2e <builtIn_makeFastArray+0x54>
   12f2a:	|     |  |   moveq #2,d0
   12f2c:	|  /--|--|-- bra.s 12f82 <builtIn_makeFastArray+0xa8>
   12f2e:	|  |  |  \-> moveq #1,d0
   12f30:	|  +--|----- bra.s 12f82 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12f32:	|  |  \----> movea.l 16(sp),a0
   12f36:	|  |         movea.l 24(a0),a0
   12f3a:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12f40:	|  |         moveq #24,d0
   12f42:	|  |         add.l 16(sp),d0
   12f46:	|  |         move.l d0,-(sp)
   12f48:	|  |         jsr 150d0 <trimStack>
   12f4e:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12f50:	|  |         moveq #28,d0
   12f52:	|  |         add.l 16(sp),d0
   12f56:	|  |         move.l 2(sp),-(sp)
   12f5a:	|  |         move.l d0,-(sp)
   12f5c:	|  |         jsr 14868 <makeFastArraySize>
   12f62:	|  |         addq.l #8,sp
   12f64:	|  |         tst.w d0
   12f66:	|  |     /-- beq.s 12f6c <builtIn_makeFastArray+0x92>
   12f68:	|  |     |   moveq #2,d0
   12f6a:	|  +-----|-- bra.s 12f82 <builtIn_makeFastArray+0xa8>
   12f6c:	|  |     \-> moveq #1,d0
   12f6e:	|  +-------- bra.s 12f82 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12f70:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12f72:	   |         pea 19bc9 <line.c.05397aaf+0x207>
   12f78:	   |         jsr 171b4 <KPrintF>
   12f7e:	   |         addq.l #4,sp
	return BR_ERROR;
   12f80:	   |         moveq #1,d0
}
   12f82:	   \-------> addq.l #8,sp
   12f84:	             rts

00012f86 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12f86:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f88:	          movea.l 16(sp),a0
   12f8c:	          move.l 24(a0),d0
   12f90:	          move.l d0,-(sp)
   12f92:	          pea 7 <_start+0x7>
   12f96:	          move.l sp,d0
   12f98:	          addq.l #8,d0
   12f9a:	          move.l d0,-(sp)
   12f9c:	          jsr 1474c <getValueType>
   12fa2:	          lea 12(sp),sp
   12fa6:	          tst.w d0
   12fa8:	      /-- bne.s 12fae <builtIn_getCharacterScale+0x28>
   12faa:	      |   moveq #1,d0
   12fac:	/-----|-- bra.s 13028 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12fae:	|     \-> moveq #24,d0
   12fb0:	|         add.l 16(sp),d0
   12fb4:	|         move.l d0,-(sp)
   12fb6:	|         jsr 150d0 <trimStack>
   12fbc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12fbe:	|         move.l (sp),d0
   12fc0:	|         move.l d0,-(sp)
   12fc2:	|         jsr a594 <findPerson>
   12fc8:	|         addq.l #4,sp
   12fca:	|         move.l d0,4(sp)
	if (pers) {
   12fce:	|  /----- beq.s 1300e <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12fd0:	|  |      movea.l 4(sp),a0
   12fd4:	|  |      move.l 32(a0),d0
   12fd8:	|  |      move.l #1120403456,-(sp)
   12fde:	|  |      move.l d0,-(sp)
   12fe0:	|  |      jsr 17698 <__mulsf3>
   12fe6:	|  |      addq.l #8,sp
   12fe8:	|  |      move.l d0,-(sp)
   12fea:	|  |      jsr 1757e <__fixsfsi>
   12ff0:	|  |      addq.l #4,sp
   12ff2:	|  |      move.l d0,d1
   12ff4:	|  |      moveq #28,d0
   12ff6:	|  |      add.l 16(sp),d0
   12ffa:	|  |      move.l d1,-(sp)
   12ffc:	|  |      pea 1 <_start+0x1>
   13000:	|  |      move.l d0,-(sp)
   13002:	|  |      jsr 1503e <setVariable>
   13008:	|  |      lea 12(sp),sp
   1300c:	|  |  /-- bra.s 13026 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1300e:	|  \--|-> moveq #28,d0
   13010:	|     |   add.l 16(sp),d0
   13014:	|     |   clr.l -(sp)
   13016:	|     |   pea 1 <_start+0x1>
   1301a:	|     |   move.l d0,-(sp)
   1301c:	|     |   jsr 1503e <setVariable>
   13022:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13026:	|     \-> moveq #2,d0
}
   13028:	\-------> addq.l #8,sp
   1302a:	          rts

0001302c <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   1302c:	move.l 1c9de <gameSettings>,d0
   13032:	move.l d0,d1
   13034:	moveq #28,d0
   13036:	add.l 8(sp),d0
   1303a:	move.l d1,-(sp)
   1303c:	pea 1 <_start+0x1>
   13040:	move.l d0,-(sp)
   13042:	jsr 1503e <setVariable>
   13048:	lea 12(sp),sp
	return BR_CONTINUE;
   1304c:	moveq #2,d0
}
   1304e:	rts

00013050 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13050:	moveq #24,d0
   13052:	add.l 8(sp),d0
   13056:	move.l d0,-(sp)
   13058:	jsr 150d0 <trimStack>
   1305e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13060:	moveq #24,d0
   13062:	add.l 8(sp),d0
   13066:	move.l d0,-(sp)
   13068:	jsr 150d0 <trimStack>
   1306e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   13070:	moveq #28,d0
   13072:	add.l 8(sp),d0
   13076:	clr.l -(sp)
   13078:	pea 1 <_start+0x1>
   1307c:	move.l d0,-(sp)
   1307e:	jsr 1503e <setVariable>
   13084:	lea 12(sp),sp

	return BR_CONTINUE;
   13088:	moveq #2,d0

}
   1308a:	rts

0001308c <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1308c:	move.l 1c282 <lastFramesPerSecond>,d1
   13092:	moveq #28,d0
   13094:	add.l 8(sp),d0
   13098:	move.l d1,-(sp)
   1309a:	pea 1 <_start+0x1>
   1309e:	move.l d0,-(sp)
   130a0:	jsr 1503e <setVariable>
   130a6:	lea 12(sp),sp
	return BR_CONTINUE;
   130aa:	moveq #2,d0
}
   130ac:	rts

000130ae <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   130ae:	moveq #2,d0
}
   130b0:	rts

000130b2 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   130b2:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130b6:	          movea.l 60(sp),a0
   130ba:	          move.l 24(a0),d0
   130be:	          move.l d0,-(sp)
   130c0:	          pea 1 <_start+0x1>
   130c4:	          pea 1c818 <thumbHeight>
   130ca:	          jsr 1474c <getValueType>
   130d0:	          lea 12(sp),sp
   130d4:	          tst.w d0
   130d6:	      /-- bne.s 130de <builtIn_setThumbnailSize+0x2c>
   130d8:	      |   moveq #1,d0
   130da:	/-----|-- bra.w 1319a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   130de:	|     \-> moveq #24,d0
   130e0:	|         add.l 60(sp),d0
   130e4:	|         move.l d0,-(sp)
   130e6:	|         jsr 150d0 <trimStack>
   130ec:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130ee:	|         movea.l 60(sp),a0
   130f2:	|         move.l 24(a0),d0
   130f6:	|         move.l d0,-(sp)
   130f8:	|         pea 1 <_start+0x1>
   130fc:	|         pea 1c814 <thumbWidth>
   13102:	|         jsr 1474c <getValueType>
   13108:	|         lea 12(sp),sp
   1310c:	|         tst.w d0
   1310e:	|     /-- bne.s 13116 <builtIn_setThumbnailSize+0x64>
   13110:	|     |   moveq #1,d0
   13112:	+-----|-- bra.w 1319a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13116:	|     \-> moveq #24,d0
   13118:	|         add.l 60(sp),d0
   1311c:	|         move.l d0,-(sp)
   1311e:	|         jsr 150d0 <trimStack>
   13124:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13126:	|         move.l 1c814 <thumbWidth>,d0
   1312c:	|     /-- bmi.s 1315a <builtIn_setThumbnailSize+0xa8>
   1312e:	|     |   move.l 1c818 <thumbHeight>,d0
   13134:	|     +-- bmi.s 1315a <builtIn_setThumbnailSize+0xa8>
   13136:	|     |   move.l 1c814 <thumbWidth>,d0
   1313c:	|     |   move.l d0,d1
   1313e:	|     |   move.l 1c856 <winWidth>,d0
   13144:	|     |   cmp.l d1,d0
   13146:	|     +-- bcs.s 1315a <builtIn_setThumbnailSize+0xa8>
   13148:	|     |   move.l 1c818 <thumbHeight>,d0
   1314e:	|     |   move.l d0,d1
   13150:	|     |   move.l 1c85a <winHeight>,d0
   13156:	|     |   cmp.l d1,d0
   13158:	|  /--|-- bcc.s 13198 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1315a:	|  |  \-> move.l 1c818 <thumbHeight>,d1
   13160:	|  |      move.l 1c814 <thumbWidth>,d0
   13166:	|  |      move.l d1,-(sp)
   13168:	|  |      move.l d0,-(sp)
   1316a:	|  |      pea 19bf0 <line.c.05397aaf+0x22e>
   13170:	|  |      lea 14(sp),a0
   13174:	|  |      move.l a0,-(sp)
   13176:	|  |      jsr 13f56 <sprintf>
   1317c:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13180:	|  |      lea 2(sp),a0
   13184:	|  |      move.l a0,-(sp)
   13186:	|  |      pea 19bf8 <line.c.05397aaf+0x236>
   1318c:	|  |      jsr 171b4 <KPrintF>
   13192:	|  |      addq.l #8,sp
		return BR_ERROR;
   13194:	|  |      moveq #1,d0
   13196:	+--|----- bra.s 1319a <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13198:	|  \----> moveq #2,d0
}
   1319a:	\-------> lea 52(sp),sp
   1319e:	          rts

000131a0 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   131a0:	       lea -12(sp),sp
   131a4:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131a6:	       movea.l 24(sp),a0
   131aa:	       move.l 24(a0),d0
   131ae:	       move.l d0,-(sp)
   131b0:	       pea 1 <_start+0x1>
   131b4:	       lea 12(sp),a0
   131b8:	       move.l a0,-(sp)
   131ba:	       jsr 1474c <getValueType>
   131c0:	       lea 12(sp),sp
   131c4:	       tst.w d0
   131c6:	   /-- bne.s 131ce <builtIn_hasFlag+0x2e>
   131c8:	   |   moveq #1,d0
   131ca:	/--|-- bra.w 1325e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   131ce:	|  \-> moveq #24,d0
   131d0:	|      add.l 24(sp),d0
   131d4:	|      move.l d0,-(sp)
   131d6:	|      jsr 150d0 <trimStack>
   131dc:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   131de:	|      movea.l 24(sp),a0
   131e2:	|      move.l 24(a0),d0
   131e6:	|      move.l d0,-(sp)
   131e8:	|      pea 7 <_start+0x7>
   131ec:	|      moveq #16,d0
   131ee:	|      add.l sp,d0
   131f0:	|      move.l d0,-(sp)
   131f2:	|      jsr 1474c <getValueType>
   131f8:	|      lea 12(sp),sp
   131fc:	|      tst.w d0
   131fe:	|  /-- bne.s 13204 <builtIn_hasFlag+0x64>
   13200:	|  |   moveq #1,d0
   13202:	+--|-- bra.s 1325e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13204:	|  \-> moveq #24,d0
   13206:	|      add.l 24(sp),d0
   1320a:	|      move.l d0,-(sp)
   1320c:	|      jsr 150d0 <trimStack>
   13212:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13214:	|      move.l 8(sp),d0
   13218:	|      move.l d0,-(sp)
   1321a:	|      jsr d496 <findObjectType>
   13220:	|      addq.l #4,sp
   13222:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13226:	|  /-- bne.s 1322c <builtIn_hasFlag+0x8c>
   13228:	|  |   moveq #1,d0
   1322a:	+--|-- bra.s 1325e <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1322c:	|  \-> movea.l 12(sp),a0
   13230:	|      move.w 36(a0),d0
   13234:	|      moveq #0,d2
   13236:	|      move.w d0,d2
   13238:	|      move.l 4(sp),d1
   1323c:	|      moveq #1,d0
   1323e:	|      lsl.l d1,d0
   13240:	|      move.l d2,d1
   13242:	|      and.l d0,d1
   13244:	|      moveq #28,d0
   13246:	|      add.l 24(sp),d0
   1324a:	|      move.l d1,-(sp)
   1324c:	|      pea 1 <_start+0x1>
   13250:	|      move.l d0,-(sp)
   13252:	|      jsr 1503e <setVariable>
   13258:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1325c:	|      moveq #2,d0
}
   1325e:	\----> move.l (sp)+,d2
   13260:	       lea 12(sp),sp
   13264:	       rts

00013266 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13266:	       jsr d484 <snapshot>
   1326c:	       tst.w d0
   1326e:	/----- beq.s 13274 <builtIn_snapshotGrab+0xe>
   13270:	|      moveq #2,d0
   13272:	|  /-- bra.s 13276 <builtIn_snapshotGrab+0x10>
   13274:	\--|-> moveq #1,d0
}
   13276:	   \-> rts

00013278 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13278:	jsr d330 <nosnapshot>
	return BR_CONTINUE;
   1327e:	moveq #2,d0
}
   13280:	rts

00013282 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13282:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13284:	move.w 1c15e <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1328c:	movea.l 12(sp),a0
   13290:	move.l 24(a0),d0
   13294:	move.l d0,-(sp)
   13296:	jsr 14c8c <getBoolean>
   1329c:	addq.l #4,sp
   1329e:	move.w d0,1c15e <allowAnyFilename>
	trimStack (&fun -> stack);
   132a4:	moveq #24,d0
   132a6:	add.l 12(sp),d0
   132aa:	move.l d0,-(sp)
   132ac:	jsr 150d0 <trimStack>
   132b2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   132b4:	movea.w 2(sp),a0
   132b8:	moveq #28,d0
   132ba:	add.l 12(sp),d0
   132be:	move.l a0,-(sp)
   132c0:	pea 1 <_start+0x1>
   132c4:	move.l d0,-(sp)
   132c6:	jsr 1503e <setVariable>
   132cc:	lea 12(sp),sp
	return BR_CONTINUE;
   132d0:	moveq #2,d0
}
   132d2:	addq.l #4,sp
   132d4:	rts

000132d6 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   132d6:	moveq #24,d0
   132d8:	add.l 8(sp),d0
   132dc:	move.l d0,-(sp)
   132de:	jsr 150d0 <trimStack>
   132e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   132e6:	moveq #24,d0
   132e8:	add.l 8(sp),d0
   132ec:	move.l d0,-(sp)
   132ee:	jsr 150d0 <trimStack>
   132f4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   132f6:	moveq #28,d0
   132f8:	add.l 8(sp),d0
   132fc:	clr.l -(sp)
   132fe:	pea 1 <_start+0x1>
   13302:	move.l d0,-(sp)
   13304:	jsr 1503e <setVariable>
   1330a:	lea 12(sp),sp

	return BR_CONTINUE;
   1330e:	moveq #2,d0
}
   13310:	rts

00013312 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13312:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13314:	movea.l 12(sp),a0
   13318:	move.l 24(a0),d0
   1331c:	move.l d0,-(sp)
   1331e:	jsr 14d22 <getTextFromAnyVar>
   13324:	addq.l #4,sp
   13326:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13328:	moveq #24,d0
   1332a:	add.l 12(sp),d0
   1332e:	move.l d0,-(sp)
   13330:	jsr 150d0 <trimStack>
   13336:	addq.l #4,sp
	KPrintF (mess);
   13338:	move.l (sp),-(sp)
   1333a:	jsr 171b4 <KPrintF>
   13340:	addq.l #4,sp
	return BR_ERROR;
   13342:	moveq #1,d0
}
   13344:	addq.l #4,sp
   13346:	rts

00013348 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13348:	moveq #24,d0
   1334a:	add.l 8(sp),d0
   1334e:	move.l d0,-(sp)
   13350:	jsr 150d0 <trimStack>
   13356:	addq.l #4,sp
	trimStack (&fun -> stack);
   13358:	moveq #24,d0
   1335a:	add.l 8(sp),d0
   1335e:	move.l d0,-(sp)
   13360:	jsr 150d0 <trimStack>
   13366:	addq.l #4,sp
	trimStack (&fun -> stack);
   13368:	moveq #24,d0
   1336a:	add.l 8(sp),d0
   1336e:	move.l d0,-(sp)
   13370:	jsr 150d0 <trimStack>
   13376:	addq.l #4,sp
	trimStack (&fun -> stack);
   13378:	moveq #24,d0
   1337a:	add.l 8(sp),d0
   1337e:	move.l d0,-(sp)
   13380:	jsr 150d0 <trimStack>
   13386:	addq.l #4,sp

	return BR_CONTINUE;
   13388:	moveq #2,d0
}
   1338a:	rts

0001338c <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1338c:	moveq #24,d0
   1338e:	add.l 8(sp),d0
   13392:	move.l d0,-(sp)
   13394:	jsr 150d0 <trimStack>
   1339a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1339c:	moveq #24,d0
   1339e:	add.l 8(sp),d0
   133a2:	move.l d0,-(sp)
   133a4:	jsr 150d0 <trimStack>
   133aa:	addq.l #4,sp
	trimStack (&fun -> stack);
   133ac:	moveq #24,d0
   133ae:	add.l 8(sp),d0
   133b2:	move.l d0,-(sp)
   133b4:	jsr 150d0 <trimStack>
   133ba:	addq.l #4,sp

	return BR_CONTINUE;
   133bc:	moveq #2,d0

}
   133be:	rts

000133c0 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   133c0:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   133c2:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   133c8:	sne d0
   133ca:	neg.b d0
   133cc:	moveq #0,d1
   133ce:	move.b d0,d1
   133d0:	moveq #28,d0
   133d2:	add.l 12(sp),d0
   133d6:	move.l d1,-(sp)
   133d8:	pea 1 <_start+0x1>
   133dc:	move.l d0,-(sp)
   133de:	jsr 1503e <setVariable>
   133e4:	lea 12(sp),sp
	return BR_CONTINUE;
   133e8:	moveq #2,d0
}
   133ea:	addq.l #4,sp
   133ec:	rts

000133ee <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   133ee:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   133f0:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   133f6:	pea 19c0f <line.c.05397aaf+0x24d>
   133fc:	jsr 171b4 <KPrintF>
   13402:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13404:	tst.w 2(sp)
   13408:	sne d0
   1340a:	neg.b d0
   1340c:	moveq #0,d1
   1340e:	move.b d0,d1
   13410:	moveq #28,d0
   13412:	add.l 12(sp),d0
   13416:	move.l d1,-(sp)
   13418:	pea 1 <_start+0x1>
   1341c:	move.l d0,-(sp)
   1341e:	jsr 1503e <setVariable>
   13424:	lea 12(sp),sp
	return BR_CONTINUE;
   13428:	moveq #2,d0
}
   1342a:	addq.l #4,sp
   1342c:	rts

0001342e <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1342e:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13432:	             move.l 104(sp),d0
   13436:	             cmpi.l #166,d0
   1343c:	/----------- bhi.w 1351e <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13440:	|            move.l 104(sp),d0
   13444:	|            add.l d0,d0
   13446:	|            movea.l d0,a1
   13448:	|            adda.l d0,a1
   1344a:	|            lea 1c2a4 <paramNum>,a0
   13450:	|            move.l (0,a1,a0.l),d0
   13454:	|            moveq #-1,d1
   13456:	|            cmp.l d0,d1
   13458:	|  /-------- beq.w 134e6 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1345c:	|  |         move.l 104(sp),d0
   13460:	|  |         add.l d0,d0
   13462:	|  |         movea.l d0,a1
   13464:	|  |         adda.l d0,a1
   13466:	|  |         lea 1c2a4 <paramNum>,a0
   1346c:	|  |         move.l (0,a1,a0.l),d0
   13470:	|  |         cmp.l 108(sp),d0
   13474:	|  +-------- beq.s 134e6 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13476:	|  |         move.l 104(sp),d0
   1347a:	|  |         add.l d0,d0
   1347c:	|  |         movea.l d0,a1
   1347e:	|  |         adda.l d0,a1
   13480:	|  |         lea 1c2a4 <paramNum>,a0
   13486:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1348a:	|  |         moveq #1,d1
   1348c:	|  |         cmp.l d0,d1
   1348e:	|  |  /----- bne.s 13498 <callBuiltIn+0x6a>
   13490:	|  |  |      move.l #100651,d0
   13496:	|  |  |  /-- bra.s 1349e <callBuiltIn+0x70>
   13498:	|  |  \--|-> move.l #105541,d0
   1349e:	|  |     \-> move.l 104(sp),d1
   134a2:	|  |         add.l d1,d1
   134a4:	|  |         movea.l d1,a1
   134a6:	|  |         adda.l d1,a1
   134a8:	|  |         lea 1c2a4 <paramNum>,a0
   134ae:	|  |         move.l (0,a1,a0.l),d1
   134b2:	|  |         move.l d0,-(sp)
   134b4:	|  |         move.l d1,-(sp)
   134b6:	|  |         pea 19c47 <graphics.c.1c13408a+0x29>
   134bc:	|  |         lea 12(sp),a0
   134c0:	|  |         move.l a0,-(sp)
   134c2:	|  |         jsr 13f56 <sprintf>
   134c8:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   134cc:	|  |         movea.l sp,a0
   134ce:	|  |         move.l a0,-(sp)
   134d0:	|  |         jsr b8 <copyString>
   134d6:	|  |         addq.l #4,sp
   134d8:	|  |         move.l d0,-(sp)
   134da:	|  |         jsr 171b4 <KPrintF>
   134e0:	|  |         addq.l #4,sp
				return BR_ERROR;
   134e2:	|  |         moveq #1,d0
   134e4:	|  |     /-- bra.s 1352e <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   134e6:	|  \-----|-> move.l 104(sp),d0
   134ea:	|        |   add.l d0,d0
   134ec:	|        |   movea.l d0,a1
   134ee:	|        |   adda.l d0,a1
   134f0:	|        |   lea 1c540 <builtInFunctionArray>,a0
   134f6:	|        |   move.l (0,a1,a0.l),d0
   134fa:	+--------|-- beq.s 1351e <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   134fc:	|        |   move.l 104(sp),d0
   13500:	|        |   add.l d0,d0
   13502:	|        |   movea.l d0,a1
   13504:	|        |   adda.l d0,a1
   13506:	|        |   lea 1c540 <builtInFunctionArray>,a0
   1350c:	|        |   movea.l (0,a1,a0.l),a0
   13510:	|        |   move.l 112(sp),-(sp)
   13514:	|        |   move.l 112(sp),-(sp)
   13518:	|        |   jsr (a0)
   1351a:	|        |   addq.l #8,sp
   1351c:	|        +-- bra.s 1352e <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1351e:	\--------|-> pea 19c72 <graphics.c.1c13408a+0x54>
   13524:	         |   jsr 171b4 <KPrintF>
   1352a:	         |   addq.l #4,sp
	return BR_ERROR;
   1352c:	         |   moveq #1,d0
}
   1352e:	         \-> lea 100(sp),sp
   13532:	             rts

00013534 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13534:	          subq.l #8,sp
	int indexNum = -1;
   13536:	          moveq #-1,d0
   13538:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1353c:	          clr.l (sp)
   1353e:	   /----- bra.s 13564 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13540:	/--|----> move.l 1c9d6 <languageTable>,d1
   13546:	|  |      move.l (sp),d0
   13548:	|  |      add.l d0,d0
   1354a:	|  |      add.l d0,d0
   1354c:	|  |      movea.l d1,a0
   1354e:	|  |      adda.l d0,a0
   13550:	|  |      move.l (a0),d0
   13552:	|  |      move.l d0,d1
   13554:	|  |      move.l 1c9de <gameSettings>,d0
   1355a:	|  |      cmp.l d1,d0
   1355c:	|  |  /-- bne.s 13562 <getLanguageForFileB+0x2e>
   1355e:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13562:	|  |  \-> addq.l #1,(sp)
   13564:	|  \----> move.l 1c9e2 <gameSettings+0x4>,d0
   1356a:	|         cmp.l (sp),d0
   1356c:	\-------- bcc.s 13540 <getLanguageForFileB+0xc>
	}

	return indexNum;
   1356e:	          move.l 4(sp),d0
}
   13572:	          addq.l #8,sp
   13574:	          rts

00013576 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13576:	          lea -20(sp),sp
   1357a:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1357c:	          move.l 28(sp),-(sp)
   13580:	          jsr 13c38 <strlen>
   13586:	          addq.l #4,sp
   13588:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1358c:	          moveq #4,d0
   1358e:	          cmp.l 12(sp),d0
   13592:	      /-- bge.s 135b6 <getPrefsFilename+0x40>
   13594:	      |   move.l 12(sp),d0
   13598:	      |   subq.l #4,d0
   1359a:	      |   movea.l 28(sp),a0
   1359e:	      |   adda.l d0,a0
   135a0:	      |   move.b (a0),d0
   135a2:	      |   cmpi.b #46,d0
   135a6:	      +-- bne.s 135b6 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   135a8:	      |   move.l 12(sp),d0
   135ac:	      |   subq.l #4,d0
   135ae:	      |   movea.l 28(sp),a0
   135b2:	      |   adda.l d0,a0
   135b4:	      |   clr.b (a0)
	}

	char * f = filename;
   135b6:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   135bc:	          clr.l 20(sp)
   135c0:	   /----- bra.s 135e8 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   135c2:	/--|----> move.l 20(sp),d0
   135c6:	|  |      movea.l 28(sp),a0
   135ca:	|  |      adda.l d0,a0
   135cc:	|  |      move.b (a0),d0
   135ce:	|  |      cmpi.b #47,d0
   135d2:	|  |  /-- bne.s 135e4 <getPrefsFilename+0x6e>
   135d4:	|  |  |   move.l 20(sp),d0
   135d8:	|  |  |   addq.l #1,d0
   135da:	|  |  |   move.l 28(sp),d1
   135de:	|  |  |   add.l d0,d1
   135e0:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   135e4:	|  |  \-> addq.l #1,20(sp)
   135e8:	|  \----> move.l 20(sp),d0
   135ec:	|         cmp.l 12(sp),d0
   135f0:	\-------- blt.s 135c2 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   135f2:	          pea 19c9d <graphics.c.1c13408a+0x7f>
   135f8:	          move.l 20(sp),-(sp)
   135fc:	          jsr 13c78 <joinStrings>
   13602:	          addq.l #8,sp
   13604:	          move.l d0,8(sp)

	FreeVec(filename);
   13608:	          move.l 28(sp),4(sp)
   1360e:	          move.l 1c902 <SysBase>,d0
   13614:	          movea.l d0,a6
   13616:	          movea.l 4(sp),a1
   1361a:	          jsr -690(a6)
	filename = NULL;
   1361e:	          clr.l 28(sp)
	return joined;
   13622:	          move.l 8(sp),d0
}
   13626:	          movea.l (sp)+,a6
   13628:	          lea 20(sp),sp
   1362c:	          rts

0001362e <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1362e:	             lea -28(sp),sp
   13632:	             move.l a6,-(sp)
   13634:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13636:	             move.l 1c9e2 <gameSettings+0x4>,d0
   1363c:	             move.l d0,d1
   1363e:	             addq.l #1,d1
   13640:	             move.l d1,28(sp)
   13644:	             clr.l 24(sp)
   13648:	             move.l 1c902 <SysBase>,d0
   1364e:	             movea.l d0,a6
   13650:	             move.l 28(sp),d0
   13654:	             move.l 24(sp),d1
   13658:	             jsr -684(a6)
   1365c:	             move.l d0,20(sp)
   13660:	             move.l 20(sp),d0
   13664:	             move.l d0,1c9d6 <languageTable>
    if( languageTable == 0) {
   1366a:	             move.l 1c9d6 <languageTable>,d0
   13670:	         /-- bne.s 13680 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13672:	         |   pea 19ca2 <graphics.c.1c13408a+0x84>
   13678:	         |   jsr 171b4 <KPrintF>
   1367e:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13680:	         \-> move.l 1c9e2 <gameSettings+0x4>,d0
   13686:	             move.l d0,d1
   13688:	             addq.l #1,d1
   1368a:	             move.l d1,16(sp)
   1368e:	             clr.l 12(sp)
   13692:	             move.l 1c902 <SysBase>,d0
   13698:	             movea.l d0,a6
   1369a:	             move.l 16(sp),d0
   1369e:	             move.l 12(sp),d1
   136a2:	             jsr -684(a6)
   136a6:	             move.l d0,8(sp)
   136aa:	             move.l 8(sp),d0
   136ae:	             move.l d0,1c9da <languageName>
	if( languageName == 0) {
   136b4:	             move.l 1c9da <languageName>,d0
   136ba:	         /-- bne.s 136ca <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   136bc:	         |   pea 19cd8 <graphics.c.1c13408a+0xba>
   136c2:	         |   jsr 171b4 <KPrintF>
   136c8:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136ca:	         \-> clr.l 32(sp)
   136ce:	   /-------- bra.s 13746 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   136d0:	/--|-------> tst.l 32(sp)
   136d4:	|  |  /----- beq.s 136e4 <makeLanguageTable+0xb6>
   136d6:	|  |  |      move.l 40(sp),-(sp)
   136da:	|  |  |      jsr 6bc <get2bytes>
   136e0:	|  |  |      addq.l #4,sp
   136e2:	|  |  |  /-- bra.s 136e6 <makeLanguageTable+0xb8>
   136e4:	|  |  \--|-> moveq #0,d0
   136e6:	|  |     \-> movea.l 1c9d6 <languageTable>,a0
   136ec:	|  |         move.l 32(sp),d1
   136f0:	|  |         add.l d1,d1
   136f2:	|  |         add.l d1,d1
   136f4:	|  |         adda.l d1,a0
   136f6:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   136f8:	|  |         move.l 1c9da <languageName>,d1
   136fe:	|  |         move.l 32(sp),d0
   13702:	|  |         add.l d0,d0
   13704:	|  |         add.l d0,d0
   13706:	|  |         movea.l d1,a0
   13708:	|  |         adda.l d0,a0
   1370a:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1370c:	|  |         move.l 1c8ac <gameVersion>,d0
   13712:	|  |         cmpi.l #511,d0
   13718:	|  |     /-- ble.s 13742 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   1371a:	|  |     |   move.l 1c9e2 <gameSettings+0x4>,d0
   13720:	|  |     +-- beq.s 13742 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13722:	|  |     |   move.l 1c9da <languageName>,d1
   13728:	|  |     |   move.l 32(sp),d0
   1372c:	|  |     |   add.l d0,d0
   1372e:	|  |     |   add.l d0,d0
   13730:	|  |     |   movea.l d1,a2
   13732:	|  |     |   adda.l d0,a2
   13734:	|  |     |   move.l 40(sp),-(sp)
   13738:	|  |     |   jsr b02 <readString>
   1373e:	|  |     |   addq.l #4,sp
   13740:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13742:	|  |     \-> addq.l #1,32(sp)
   13746:	|  \-------> move.l 1c9e2 <gameSettings+0x4>,d0
   1374c:	|            cmp.l 32(sp),d0
   13750:	\----------- bcc.w 136d0 <makeLanguageTable+0xa2>
		}
	}
}
   13754:	             nop
   13756:	             nop
   13758:	             movea.l (sp)+,a2
   1375a:	             movea.l (sp)+,a6
   1375c:	             lea 28(sp),sp
   13760:	             rts

00013762 <readIniFile>:

void readIniFile (char * filename) {
   13762:	                      lea -564(sp),sp
   13766:	                      move.l a6,-(sp)
   13768:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1376a:	                      move.l 576(sp),-(sp)
   1376e:	                      jsr b8 <copyString>
   13774:	                      addq.l #4,sp
   13776:	                      move.l d0,-(sp)
   13778:	                      jsr 13576 <getPrefsFilename>
   1377e:	                      addq.l #4,sp
   13780:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13784:	                      move.l 562(sp),558(sp)
   1378a:	                      move.l #1005,554(sp)
   13792:	                      move.l 1c90a <DOSBase>,d0
   13798:	                      movea.l d0,a6
   1379a:	                      move.l 558(sp),d1
   1379e:	                      move.l 554(sp),d2
   137a2:	                      jsr -30(a6)
   137a6:	                      move.l d0,550(sp)
   137aa:	                      move.l 550(sp),d0
   137ae:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   137b2:	                      clr.l 1c9de <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   137b8:	                      move.w #1,1c9e6 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   137c0:	                      clr.l 1c9e8 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   137c6:	                      moveq #1,d0
   137c8:	                      move.l d0,1c9ec <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   137ce:	                      clr.w 1c9f0 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   137d4:	                      clr.w 1c9f2 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   137da:	                      clr.w 1c9f4 <gameSettings+0x16>

	FreeVec(langName);
   137e0:	                      move.l 562(sp),542(sp)
   137e6:	                      move.l 1c902 <SysBase>,d0
   137ec:	                      movea.l d0,a6
   137ee:	                      movea.l 542(sp),a1
   137f2:	                      jsr -690(a6)
	langName = NULL;
   137f6:	                      clr.l 562(sp)

	if (fp) {
   137fa:	                      tst.l 546(sp)
   137fe:	/-------------------- beq.w 13adc <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13802:	|                     move.l sp,d0
   13804:	|                     addi.l #265,d0
   1380a:	|                     move.l #257,d1
   13810:	|                     move.l d1,-(sp)
   13812:	|                     clr.l -(sp)
   13814:	|                     move.l d0,-(sp)
   13816:	|                     jsr 17138 <memset>
   1381c:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13820:	|                     move.l sp,d0
   13822:	|                     addq.l #8,d0
   13824:	|                     move.l #257,d1
   1382a:	|                     move.l d1,-(sp)
   1382c:	|                     clr.l -(sp)
   1382e:	|                     move.l d0,-(sp)
   13830:	|                     jsr 17138 <memset>
   13836:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1383a:	|                     clr.b 571(sp)
		char readChar = ' ';
   1383e:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13844:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1384a:	|                     clr.w 566(sp)
		LONG tmp = 0;
   1384e:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13852:	|  /----------------> move.l 546(sp),534(sp)
   13858:	|  |                  move.l 1c90a <DOSBase>,d0
   1385e:	|  |                  movea.l d0,a6
   13860:	|  |                  move.l 534(sp),d1
   13864:	|  |                  jsr -306(a6)
   13868:	|  |                  move.l d0,530(sp)
   1386c:	|  |                  move.l 530(sp),d0
   13870:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13874:	|  |                  moveq #-1,d1
   13876:	|  |                  cmp.l 538(sp),d1
   1387a:	|  |           /----- bne.s 13888 <readIniFile+0x126>
				readChar = '\n';
   1387c:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13882:	|  |           |      clr.w 568(sp)
   13886:	|  |           |  /-- bra.s 1388e <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13888:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1388e:	|  |              \-> move.b 570(sp),d0
   13892:	|  |                  ext.w d0
   13894:	|  |                  movea.w d0,a0
   13896:	|  |                  moveq #61,d0
   13898:	|  |                  cmp.l a0,d0
   1389a:	|  |     /----------- beq.w 13a44 <readIniFile+0x2e2>
   1389e:	|  |     |            moveq #61,d1
   138a0:	|  |     |            cmp.l a0,d1
   138a2:	|  |  /--|----------- blt.w 13a50 <readIniFile+0x2ee>
   138a6:	|  |  |  |            moveq #10,d0
   138a8:	|  |  |  |            cmp.l a0,d0
   138aa:	|  |  |  |        /-- beq.s 138b4 <readIniFile+0x152>
   138ac:	|  |  |  |        |   moveq #13,d1
   138ae:	|  |  |  |        |   cmp.l a0,d1
   138b0:	|  |  +--|--------|-- bne.w 13a50 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   138b4:	|  |  |  |        \-> tst.w 566(sp)
   138b8:	|  |  |  |     /----- beq.w 13a32 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   138bc:	|  |  |  |     |      pea 19d0c <graphics.c.1c13408a+0xee>
   138c2:	|  |  |  |     |      move.l sp,d0
   138c4:	|  |  |  |     |      addi.l #269,d0
   138ca:	|  |  |  |     |      move.l d0,-(sp)
   138cc:	|  |  |  |     |      jsr 13bf8 <strcmp>
   138d2:	|  |  |  |     |      addq.l #8,sp
   138d4:	|  |  |  |     |      tst.l d0
   138d6:	|  |  |  |     |  /-- bne.s 138f0 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   138d8:	|  |  |  |     |  |   move.l sp,d0
   138da:	|  |  |  |     |  |   addq.l #8,d0
   138dc:	|  |  |  |     |  |   move.l d0,-(sp)
   138de:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   138e4:	|  |  |  |     |  |   addq.l #4,sp
   138e6:	|  |  |  |     |  |   move.l d0,1c9de <gameSettings>
   138ec:	|  |  |  |     +--|-- bra.w 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   138f0:	|  |  |  |     |  \-> pea 19d15 <graphics.c.1c13408a+0xf7>
   138f6:	|  |  |  |     |      move.l sp,d0
   138f8:	|  |  |  |     |      addi.l #269,d0
   138fe:	|  |  |  |     |      move.l d0,-(sp)
   13900:	|  |  |  |     |      jsr 13bf8 <strcmp>
   13906:	|  |  |  |     |      addq.l #8,sp
   13908:	|  |  |  |     |      tst.l d0
   1390a:	|  |  |  |     |  /-- bne.s 13930 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1390c:	|  |  |  |     |  |   move.l sp,d0
   1390e:	|  |  |  |     |  |   addq.l #8,d0
   13910:	|  |  |  |     |  |   move.l d0,-(sp)
   13912:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   13918:	|  |  |  |     |  |   addq.l #4,sp
   1391a:	|  |  |  |     |  |   tst.l d0
   1391c:	|  |  |  |     |  |   seq d0
   1391e:	|  |  |  |     |  |   neg.b d0
   13920:	|  |  |  |     |  |   move.b d0,d0
   13922:	|  |  |  |     |  |   andi.w #255,d0
   13926:	|  |  |  |     |  |   move.w d0,1c9e6 <gameSettings+0x8>
   1392c:	|  |  |  |     +--|-- bra.w 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13930:	|  |  |  |     |  \-> pea 19d1c <graphics.c.1c13408a+0xfe>
   13936:	|  |  |  |     |      move.l sp,d0
   13938:	|  |  |  |     |      addi.l #269,d0
   1393e:	|  |  |  |     |      move.l d0,-(sp)
   13940:	|  |  |  |     |      jsr 13bf8 <strcmp>
   13946:	|  |  |  |     |      addq.l #8,sp
   13948:	|  |  |  |     |      tst.l d0
   1394a:	|  |  |  |     |  /-- bne.s 13964 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1394c:	|  |  |  |     |  |   move.l sp,d0
   1394e:	|  |  |  |     |  |   addq.l #8,d0
   13950:	|  |  |  |     |  |   move.l d0,-(sp)
   13952:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   13958:	|  |  |  |     |  |   addq.l #4,sp
   1395a:	|  |  |  |     |  |   move.l d0,1c9e8 <gameSettings+0xa>
   13960:	|  |  |  |     +--|-- bra.w 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13964:	|  |  |  |     |  \-> pea 19d24 <graphics.c.1c13408a+0x106>
   1396a:	|  |  |  |     |      move.l sp,d0
   1396c:	|  |  |  |     |      addi.l #269,d0
   13972:	|  |  |  |     |      move.l d0,-(sp)
   13974:	|  |  |  |     |      jsr 13bf8 <strcmp>
   1397a:	|  |  |  |     |      addq.l #8,sp
   1397c:	|  |  |  |     |      tst.l d0
   1397e:	|  |  |  |     |  /-- bne.s 13998 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13980:	|  |  |  |     |  |   move.l sp,d0
   13982:	|  |  |  |     |  |   addq.l #8,d0
   13984:	|  |  |  |     |  |   move.l d0,-(sp)
   13986:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   1398c:	|  |  |  |     |  |   addq.l #4,sp
   1398e:	|  |  |  |     |  |   move.l d0,1c9ec <gameSettings+0xe>
   13994:	|  |  |  |     +--|-- bra.w 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13998:	|  |  |  |     |  \-> pea 19d2e <graphics.c.1c13408a+0x110>
   1399e:	|  |  |  |     |      move.l sp,d0
   139a0:	|  |  |  |     |      addi.l #269,d0
   139a6:	|  |  |  |     |      move.l d0,-(sp)
   139a8:	|  |  |  |     |      jsr 13bf8 <strcmp>
   139ae:	|  |  |  |     |      addq.l #8,sp
   139b0:	|  |  |  |     |      tst.l d0
   139b2:	|  |  |  |     |  /-- bne.s 139cc <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   139b4:	|  |  |  |     |  |   move.l sp,d0
   139b6:	|  |  |  |     |  |   addq.l #8,d0
   139b8:	|  |  |  |     |  |   move.l d0,-(sp)
   139ba:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   139c0:	|  |  |  |     |  |   addq.l #4,sp
   139c2:	|  |  |  |     |  |   move.l d0,d0
   139c4:	|  |  |  |     |  |   move.w d0,1c9f0 <gameSettings+0x12>
   139ca:	|  |  |  |     +--|-- bra.s 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   139cc:	|  |  |  |     |  \-> pea 19d3a <graphics.c.1c13408a+0x11c>
   139d2:	|  |  |  |     |      move.l sp,d0
   139d4:	|  |  |  |     |      addi.l #269,d0
   139da:	|  |  |  |     |      move.l d0,-(sp)
   139dc:	|  |  |  |     |      jsr 13bf8 <strcmp>
   139e2:	|  |  |  |     |      addq.l #8,sp
   139e4:	|  |  |  |     |      tst.l d0
   139e6:	|  |  |  |     |  /-- bne.s 13a00 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   139e8:	|  |  |  |     |  |   move.l sp,d0
   139ea:	|  |  |  |     |  |   addq.l #8,d0
   139ec:	|  |  |  |     |  |   move.l d0,-(sp)
   139ee:	|  |  |  |     |  |   jsr 13ae8 <stringToInt>
   139f4:	|  |  |  |     |  |   addq.l #4,sp
   139f6:	|  |  |  |     |  |   move.l d0,d0
   139f8:	|  |  |  |     |  |   move.w d0,1c9f2 <gameSettings+0x14>
   139fe:	|  |  |  |     +--|-- bra.s 13a32 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a00:	|  |  |  |     |  \-> pea 19d48 <graphics.c.1c13408a+0x12a>
   13a06:	|  |  |  |     |      move.l sp,d0
   13a08:	|  |  |  |     |      addi.l #269,d0
   13a0e:	|  |  |  |     |      move.l d0,-(sp)
   13a10:	|  |  |  |     |      jsr 13bf8 <strcmp>
   13a16:	|  |  |  |     |      addq.l #8,sp
   13a18:	|  |  |  |     |      tst.l d0
   13a1a:	|  |  |  |     +----- bne.s 13a32 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13a1c:	|  |  |  |     |      move.l sp,d0
   13a1e:	|  |  |  |     |      addq.l #8,d0
   13a20:	|  |  |  |     |      move.l d0,-(sp)
   13a22:	|  |  |  |     |      jsr 13ae8 <stringToInt>
   13a28:	|  |  |  |     |      addq.l #4,sp
   13a2a:	|  |  |  |     |      move.l d0,d0
   13a2c:	|  |  |  |     |      move.w d0,1c9f4 <gameSettings+0x16>
					}
				}
				here = 0;
   13a32:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13a36:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13a3a:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13a3e:	|  |  |  |            clr.b 8(sp)
				break;
   13a42:	|  |  |  |  /-------- bra.s 13aba <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13a44:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13a4a:	|  |  |     |         clr.b 571(sp)
				break;
   13a4e:	|  |  |     +-------- bra.s 13aba <readIniFile+0x358>

				default:
				if (doingSecond) {
   13a50:	|  |  \-----|-------> tst.w 566(sp)
   13a54:	|  |        |  /----- beq.s 13a88 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13a56:	|  |        |  |      move.b 571(sp),d0
   13a5a:	|  |        |  |      move.b d0,d1
   13a5c:	|  |        |  |      addq.b #1,d1
   13a5e:	|  |        |  |      move.b d1,571(sp)
   13a62:	|  |        |  |      move.b d0,d0
   13a64:	|  |        |  |      andi.l #255,d0
   13a6a:	|  |        |  |      lea 572(sp),a0
   13a6e:	|  |        |  |      adda.l d0,a0
   13a70:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13a76:	|  |        |  |      moveq #0,d0
   13a78:	|  |        |  |      move.b 571(sp),d0
   13a7c:	|  |        |  |      lea 572(sp),a0
   13a80:	|  |        |  |      adda.l d0,a0
   13a82:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13a86:	|  |        |  |  /-- bra.s 13ab8 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13a88:	|  |        |  \--|-> move.b 571(sp),d0
   13a8c:	|  |        |     |   move.b d0,d1
   13a8e:	|  |        |     |   addq.b #1,d1
   13a90:	|  |        |     |   move.b d1,571(sp)
   13a94:	|  |        |     |   move.b d0,d0
   13a96:	|  |        |     |   andi.l #255,d0
   13a9c:	|  |        |     |   lea 572(sp),a0
   13aa0:	|  |        |     |   adda.l d0,a0
   13aa2:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13aa8:	|  |        |     |   moveq #0,d0
   13aaa:	|  |        |     |   move.b 571(sp),d0
   13aae:	|  |        |     |   lea 572(sp),a0
   13ab2:	|  |        |     |   adda.l d0,a0
   13ab4:	|  |        |     |   clr.b -307(a0)
				break;
   13ab8:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13aba:	|  |        \-------> tst.w 568(sp)
   13abe:	|  \----------------- bne.w 13852 <readIniFile+0xf0>

		Close(fp);
   13ac2:	|                     move.l 546(sp),526(sp)
   13ac8:	|                     move.l 1c90a <DOSBase>,d0
   13ace:	|                     movea.l d0,a6
   13ad0:	|                     move.l 526(sp),d1
   13ad4:	|                     jsr -36(a6)
   13ad8:	|                     move.l d0,522(sp)
	}
}
   13adc:	\-------------------> nop
   13ade:	                      move.l (sp)+,d2
   13ae0:	                      movea.l (sp)+,a6
   13ae2:	                      lea 564(sp),sp
   13ae6:	                      rts

00013ae8 <stringToInt>:

unsigned int stringToInt (char * s) {
   13ae8:	             subq.l #8,sp
	int i = 0;
   13aea:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13aee:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13af2:	/----------> movea.l 12(sp),a0
   13af6:	|            move.b (a0),d0
   13af8:	|            cmpi.b #47,d0
   13afc:	|        /-- ble.s 13b34 <stringToInt+0x4c>
   13afe:	|        |   movea.l 12(sp),a0
   13b02:	|        |   move.b (a0),d0
   13b04:	|        |   cmpi.b #57,d0
   13b08:	|        +-- bgt.s 13b34 <stringToInt+0x4c>
			i *= 10;
   13b0a:	|        |   move.l 4(sp),d1
   13b0e:	|        |   move.l d1,d0
   13b10:	|        |   add.l d0,d0
   13b12:	|        |   add.l d0,d0
   13b14:	|        |   add.l d1,d0
   13b16:	|        |   add.l d0,d0
   13b18:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13b1c:	|        |   movea.l 12(sp),a0
   13b20:	|        |   move.b (a0),d0
   13b22:	|        |   ext.w d0
   13b24:	|        |   movea.w d0,a0
   13b26:	|        |   moveq #-48,d0
   13b28:	|        |   add.l a0,d0
   13b2a:	|        |   add.l d0,4(sp)
			s ++;
   13b2e:	|        |   addq.l #1,12(sp)
   13b32:	|  /-----|-- bra.s 13b6c <stringToInt+0x84>
		} else if (*s == '-') {
   13b34:	|  |     \-> movea.l 12(sp),a0
   13b38:	|  |         move.b (a0),d0
   13b3a:	|  |         cmpi.b #45,d0
   13b3e:	|  |     /-- bne.s 13b58 <stringToInt+0x70>
			negative = ! negative;
   13b40:	|  |     |   tst.w 2(sp)
   13b44:	|  |     |   seq d0
   13b46:	|  |     |   neg.b d0
   13b48:	|  |     |   move.b d0,d0
   13b4a:	|  |     |   andi.w #255,d0
   13b4e:	|  |     |   move.w d0,2(sp)
			s++;
   13b52:	|  |     |   addq.l #1,12(sp)
   13b56:	+--|-----|-- bra.s 13af2 <stringToInt+0xa>
		} else {
			if (negative)
   13b58:	|  |     \-> tst.w 2(sp)
   13b5c:	|  |     /-- beq.s 13b66 <stringToInt+0x7e>
				return -i;
   13b5e:	|  |     |   move.l 4(sp),d0
   13b62:	|  |     |   neg.l d0
   13b64:	|  |  /--|-- bra.s 13b6e <stringToInt+0x86>
			return i;
   13b66:	|  |  |  \-> move.l 4(sp),d0
   13b6a:	|  |  +----- bra.s 13b6e <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13b6c:	\--\--|----X bra.s 13af2 <stringToInt+0xa>
		}
	}
   13b6e:	      \----> addq.l #8,sp
   13b70:	             rts

00013b72 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13b72:	    lea -28(sp),sp
   13b76:	    move.l a6,-(sp)
   13b78:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13b7a:	    pea 19d52 <graphics.c.1c13408a+0x134>
   13b80:	    jsr 171b4 <KPrintF>
   13b86:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13b88:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13b8c:	    move.l 40(sp),30(sp)
   13b92:	    move.l #1005,26(sp)
   13b9a:	    move.l 1c90a <DOSBase>,d0
   13ba0:	    movea.l d0,a6
   13ba2:	    move.l 30(sp),d1
   13ba6:	    move.l 26(sp),d2
   13baa:	    jsr -30(a6)
   13bae:	    move.l d0,22(sp)
   13bb2:	    move.l 22(sp),d0
   13bb6:	    move.l d0,18(sp)
	if (tester) {
   13bba:	/-- beq.s 13bea <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13bbc:	|   pea 19d6c <graphics.c.1c13408a+0x14e>
   13bc2:	|   jsr 171b4 <KPrintF>
   13bc8:	|   addq.l #4,sp
		retval = 1;
   13bca:	|   move.b #1,35(sp)
		Close(tester);
   13bd0:	|   move.l 18(sp),14(sp)
   13bd6:	|   move.l 1c90a <DOSBase>,d0
   13bdc:	|   movea.l d0,a6
   13bde:	|   move.l 14(sp),d1
   13be2:	|   jsr -36(a6)
   13be6:	|   move.l d0,10(sp)
	}
	return retval;
   13bea:	\-> move.b 35(sp),d0
   13bee:	    move.l (sp)+,d2
   13bf0:	    movea.l (sp)+,a6
   13bf2:	    lea 28(sp),sp
   13bf6:	    rts

00013bf8 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13bf8:	   /-- bra.s 13c02 <strcmp+0xa>
    {
        s1++;
   13bfa:	/--|-> addq.l #1,4(sp)
        s2++;
   13bfe:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c02:	|  \-> movea.l 4(sp),a0
   13c06:	|      move.b (a0),d0
   13c08:	|  /-- beq.s 13c1a <strcmp+0x22>
   13c0a:	|  |   movea.l 4(sp),a0
   13c0e:	|  |   move.b (a0),d1
   13c10:	|  |   movea.l 8(sp),a0
   13c14:	|  |   move.b (a0),d0
   13c16:	|  |   cmp.b d1,d0
   13c18:	\--|-- beq.s 13bfa <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13c1a:	   \-> movea.l 4(sp),a0
   13c1e:	       move.b (a0),d0
   13c20:	       moveq #0,d1
   13c22:	       move.b d0,d1
   13c24:	       movea.l 8(sp),a0
   13c28:	       move.b (a0),d0
   13c2a:	       move.b d0,d0
   13c2c:	       andi.l #255,d0
   13c32:	       sub.l d0,d1
   13c34:	       move.l d1,d0
}
   13c36:	       rts

00013c38 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13c38:	       subq.l #4,sp
	long unsigned int i = 0;
   13c3a:	       clr.l (sp)
	while(s[i]) i++; 
   13c3c:	   /-- bra.s 13c40 <strlen+0x8>
   13c3e:	/--|-> addq.l #1,(sp)
   13c40:	|  \-> movea.l 8(sp),a0
   13c44:	|      adda.l (sp),a0
   13c46:	|      move.b (a0),d0
   13c48:	\----- bne.s 13c3e <strlen+0x6>
	return(i);
   13c4a:	       move.l (sp),d0
}
   13c4c:	       addq.l #4,sp
   13c4e:	       rts

00013c50 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13c50:	    nop
   13c52:	/-> move.l 8(sp),d0
   13c56:	|   move.l d0,d1
   13c58:	|   addq.l #1,d1
   13c5a:	|   move.l d1,8(sp)
   13c5e:	|   movea.l 4(sp),a0
   13c62:	|   lea 1(a0),a1
   13c66:	|   move.l a1,4(sp)
   13c6a:	|   movea.l d0,a1
   13c6c:	|   move.b (a1),d0
   13c6e:	|   move.b d0,(a0)
   13c70:	|   move.b (a0),d0
   13c72:	\-- bne.s 13c52 <strcpy+0x2>
}
   13c74:	    nop
   13c76:	    rts

00013c78 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13c78:	    lea -20(sp),sp
   13c7c:	    move.l a6,-(sp)
   13c7e:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13c80:	    move.l 32(sp),-(sp)
   13c84:	    jsr 13c38 <strlen>
   13c8a:	    addq.l #4,sp
   13c8c:	    move.l d0,d2
   13c8e:	    move.l 36(sp),-(sp)
   13c92:	    jsr 13c38 <strlen>
   13c98:	    addq.l #4,sp
   13c9a:	    add.l d2,d0
   13c9c:	    move.l d0,d1
   13c9e:	    addq.l #1,d1
   13ca0:	    move.l d1,20(sp)
   13ca4:	    clr.l 16(sp)
   13ca8:	    move.l 1c902 <SysBase>,d0
   13cae:	    movea.l d0,a6
   13cb0:	    move.l 20(sp),d0
   13cb4:	    move.l 16(sp),d1
   13cb8:	    jsr -684(a6)
   13cbc:	    move.l d0,12(sp)
   13cc0:	    move.l 12(sp),d0
   13cc4:	    move.l d0,8(sp)
	char * t = newString;
   13cc8:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13cce:	    nop
   13cd0:	/-> move.l 32(sp),d0
   13cd4:	|   move.l d0,d1
   13cd6:	|   addq.l #1,d1
   13cd8:	|   move.l d1,32(sp)
   13cdc:	|   movea.l 24(sp),a0
   13ce0:	|   lea 1(a0),a1
   13ce4:	|   move.l a1,24(sp)
   13ce8:	|   movea.l d0,a1
   13cea:	|   move.b (a1),d0
   13cec:	|   move.b d0,(a0)
   13cee:	|   move.b (a0),d0
   13cf0:	\-- bne.s 13cd0 <joinStrings+0x58>
	t--;
   13cf2:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13cf6:	    nop
   13cf8:	/-> move.l 36(sp),d0
   13cfc:	|   move.l d0,d1
   13cfe:	|   addq.l #1,d1
   13d00:	|   move.l d1,36(sp)
   13d04:	|   movea.l 24(sp),a0
   13d08:	|   lea 1(a0),a1
   13d0c:	|   move.l a1,24(sp)
   13d10:	|   movea.l d0,a1
   13d12:	|   move.b (a1),d0
   13d14:	|   move.b d0,(a0)
   13d16:	|   move.b (a0),d0
   13d18:	\-- bne.s 13cf8 <joinStrings+0x80>

	return newString;
   13d1a:	    move.l 8(sp),d0
}
   13d1e:	    move.l (sp)+,d2
   13d20:	    movea.l (sp)+,a6
   13d22:	    lea 20(sp),sp
   13d26:	    rts

00013d28 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13d28:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13d2c:	       moveq #10,d0
   13d2e:	       cmp.l 28(sp),d0
   13d32:	   /-- bne.s 13d50 <itoa+0x28>
   13d34:	   |   tst.l 20(sp)
   13d38:	   +-- bge.s 13d50 <itoa+0x28>
        *str++ = '-';
   13d3a:	   |   move.l 24(sp),d0
   13d3e:	   |   move.l d0,d1
   13d40:	   |   addq.l #1,d1
   13d42:	   |   move.l d1,24(sp)
   13d46:	   |   movea.l d0,a0
   13d48:	   |   move.b #45,(a0)
        value *= -1;
   13d4c:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13d50:	   \-> move.l 24(sp),12(sp)
   13d56:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13d5c:	   /-> move.l 20(sp),d0
   13d60:	   |   move.l 28(sp),-(sp)
   13d64:	   |   move.l d0,-(sp)
   13d66:	   |   jsr 17bec <__modsi3>
   13d6c:	   |   addq.l #8,sp
   13d6e:	   |   movea.l d0,a1
   13d70:	   |   move.l 12(sp),d0
   13d74:	   |   move.l d0,d1
   13d76:	   |   addq.l #1,d1
   13d78:	   |   move.l d1,12(sp)
   13d7c:	   |   lea 19d84 <graphics.c.1c13408a+0x166>,a0
   13d82:	   |   move.b (0,a1,a0.l),d1
   13d86:	   |   movea.l d0,a0
   13d88:	   |   move.b d1,(a0)
        value /= base;
   13d8a:	   |   move.l 28(sp),-(sp)
   13d8e:	   |   move.l 24(sp),-(sp)
   13d92:	   |   jsr 17bbe <__divsi3>
   13d98:	   |   addq.l #8,sp
   13d9a:	   |   move.l d0,20(sp)
    } while (value);
   13d9e:	   \-- bne.s 13d5c <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13da0:	       move.l 12(sp),d0
   13da4:	       move.l d0,d1
   13da6:	       subq.l #1,d1
   13da8:	       move.l d1,12(sp)
   13dac:	       movea.l d0,a0
   13dae:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13db0:	       move.l 4(sp),8(sp)
   13db6:	   /-- bra.s 13ddc <itoa+0xb4>
        char temp = *low;
   13db8:	/--|-> movea.l 8(sp),a0
   13dbc:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13dc0:	|  |   movea.l 12(sp),a0
   13dc4:	|  |   move.b (a0),d0
   13dc6:	|  |   movea.l 8(sp),a0
   13dca:	|  |   move.b d0,(a0)
        *ptr = temp;
   13dcc:	|  |   movea.l 12(sp),a0
   13dd0:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13dd4:	|  |   addq.l #1,8(sp)
   13dd8:	|  |   subq.l #1,12(sp)
   13ddc:	|  \-> move.l 8(sp),d0
   13de0:	|      cmp.l 12(sp),d0
   13de4:	\----- bcs.s 13db8 <itoa+0x90>
    }
    return rc;
   13de6:	       move.l 4(sp),d0
}
   13dea:	       lea 16(sp),sp
   13dee:	       rts

00013df0 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13df0:	                            lea -40(sp),sp
   13df4:	                            move.l d2,-(sp)
    char* s = str;
   13df6:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13dfc:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e02:	   /----------------------- bra.w 13f36 <vsprintf2+0x146>
        if (*p == '%') {
   13e06:	/--|----------------------> movea.l 36(sp),a0
   13e0a:	|  |                        move.b (a0),d0
   13e0c:	|  |                        cmpi.b #37,d0
   13e10:	|  |  /-------------------- bne.w 13f1c <vsprintf2+0x12c>
            switch (*++p) {
   13e14:	|  |  |                     addq.l #1,36(sp)
   13e18:	|  |  |                     movea.l 36(sp),a0
   13e1c:	|  |  |                     move.b (a0),d0
   13e1e:	|  |  |                     ext.w d0
   13e20:	|  |  |                     movea.w d0,a0
   13e22:	|  |  |                     moveq #115,d0
   13e24:	|  |  |                     cmp.l a0,d0
   13e26:	|  |  |           /-------- beq.s 13e9e <vsprintf2+0xae>
   13e28:	|  |  |           |         moveq #115,d1
   13e2a:	|  |  |           |         cmp.l a0,d1
   13e2c:	|  |  |  /--------|-------- blt.w 13f04 <vsprintf2+0x114>
   13e30:	|  |  |  |        |         moveq #99,d2
   13e32:	|  |  |  |        |         cmp.l a0,d2
   13e34:	|  |  |  |  /-----|-------- beq.w 13edc <vsprintf2+0xec>
   13e38:	|  |  |  |  |     |         moveq #100,d0
   13e3a:	|  |  |  |  |     |         cmp.l a0,d0
   13e3c:	|  |  |  +--|-----|-------- bne.w 13f04 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13e40:	|  |  |  |  |     |         addq.l #4,56(sp)
   13e44:	|  |  |  |  |     |         movea.l 56(sp),a0
   13e48:	|  |  |  |  |     |         move.l (a0),d0
   13e4a:	|  |  |  |  |     |         move.l d0,d1
   13e4c:	|  |  |  |  |     |         subq.l #1,d1
   13e4e:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13e52:	|  |  |  |  |     |         pea a <_start+0xa>
   13e56:	|  |  |  |  |     |         lea 8(sp),a0
   13e5a:	|  |  |  |  |     |         move.l a0,-(sp)
   13e5c:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13e60:	|  |  |  |  |     |         jsr 13d28 <itoa>
   13e66:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13e6a:	|  |  |  |  |     |         lea 44(sp),a0
   13e6e:	|  |  |  |  |     |         lea -40(a0),a0
   13e72:	|  |  |  |  |     |         move.l a0,28(sp)
   13e76:	|  |  |  |  |     |     /-- bra.s 13e92 <vsprintf2+0xa2>
                        *s++ = *b;
   13e78:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13e7c:	|  |  |  |  |     |  |  |   move.l d0,d1
   13e7e:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13e80:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13e84:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13e88:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13e8a:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13e8c:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13e8e:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13e92:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13e96:	|  |  |  |  |     |  |      move.b (a0),d0
   13e98:	|  |  |  |  |     |  \----- bne.s 13e78 <vsprintf2+0x88>
                    }
                    break;
   13e9a:	|  |  |  |  |  /--|-------- bra.w 13f32 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13e9e:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13ea2:	|  |  |  |  |  |            movea.l 56(sp),a0
   13ea6:	|  |  |  |  |  |            move.l (a0),d0
   13ea8:	|  |  |  |  |  |            move.l d0,d1
   13eaa:	|  |  |  |  |  |            subq.l #1,d1
   13eac:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13eb0:	|  |  |  |  |  |        /-- bra.s 13ed2 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13eb2:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13eb6:	|  |  |  |  |  |     |  |   move.l d1,d2
   13eb8:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13eba:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13ebe:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13ec2:	|  |  |  |  |  |     |  |   move.l d0,d2
   13ec4:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ec6:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13eca:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13ecc:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13ece:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13ed0:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13ed2:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13ed6:	|  |  |  |  |  |     |      move.b (a0),d0
   13ed8:	|  |  |  |  |  |     \----- bne.s 13eb2 <vsprintf2+0xc2>
                    }
                    break;
   13eda:	|  |  |  |  |  +----------- bra.s 13f32 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13edc:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13ee0:	|  |  |  |     |            movea.l 56(sp),a0
   13ee4:	|  |  |  |     |            move.l (a0),d0
   13ee6:	|  |  |  |     |            move.l d0,d1
   13ee8:	|  |  |  |     |            subq.l #1,d1
   13eea:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13eee:	|  |  |  |     |            move.l 40(sp),d0
   13ef2:	|  |  |  |     |            move.l d0,d2
   13ef4:	|  |  |  |     |            addq.l #1,d2
   13ef6:	|  |  |  |     |            move.l d2,40(sp)
   13efa:	|  |  |  |     |            move.l 24(sp),d1
   13efe:	|  |  |  |     |            movea.l d0,a0
   13f00:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f02:	|  |  |  |     +----------- bra.s 13f32 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13f04:	|  |  |  \-----|----------> move.l 40(sp),d0
   13f08:	|  |  |        |            move.l d0,d1
   13f0a:	|  |  |        |            addq.l #1,d1
   13f0c:	|  |  |        |            move.l d1,40(sp)
   13f10:	|  |  |        |            movea.l 36(sp),a0
   13f14:	|  |  |        |            move.b (a0),d1
   13f16:	|  |  |        |            movea.l d0,a0
   13f18:	|  |  |        |            move.b d1,(a0)
                    break;
   13f1a:	|  |  |        +----------- bra.s 13f32 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13f1c:	|  |  \--------|----------> move.l 40(sp),d0
   13f20:	|  |           |            move.l d0,d1
   13f22:	|  |           |            addq.l #1,d1
   13f24:	|  |           |            move.l d1,40(sp)
   13f28:	|  |           |            movea.l 36(sp),a0
   13f2c:	|  |           |            move.b (a0),d1
   13f2e:	|  |           |            movea.l d0,a0
   13f30:	|  |           |            move.b d1,(a0)
        }
        p++;
   13f32:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13f36:	|  \----------------------> movea.l 36(sp),a0
   13f3a:	|                           move.b (a0),d0
   13f3c:	\-------------------------- bne.w 13e06 <vsprintf2+0x16>
    }
    *s = '\0';
   13f40:	                            movea.l 40(sp),a0
   13f44:	                            clr.b (a0)
    return s - str;
   13f46:	                            move.l 40(sp),d0
   13f4a:	                            sub.l 48(sp),d0
}
   13f4e:	                            move.l (sp)+,d2
   13f50:	                            lea 40(sp),sp
   13f54:	                            rts

00013f56 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13f56:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13f58:	moveq #16,d0
   13f5a:	add.l sp,d0
   13f5c:	move.l d0,d1
   13f5e:	addq.l #4,d1
   13f60:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13f64:	move.l 16(sp),d0
   13f68:	move.l 4(sp),-(sp)
   13f6c:	move.l d0,-(sp)
   13f6e:	move.l 20(sp),-(sp)
   13f72:	jsr 13df0 <vsprintf2>
   13f78:	lea 12(sp),sp
   13f7c:	move.l d0,(sp)
    va_end(args);
   13f7e:	clr.l 4(sp)

    return done;
   13f82:	move.l (sp),d0
}
   13f84:	addq.l #8,sp
   13f86:	rts

00013f88 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13f88:	       lea -20(sp),sp
   13f8c:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13f8e:	       moveq #12,d0
   13f90:	       move.l d0,20(sp)
   13f94:	       clr.l 16(sp)
   13f98:	       move.l 1c902 <SysBase>,d0
   13f9e:	       movea.l d0,a6
   13fa0:	       move.l 20(sp),d0
   13fa4:	       move.l 16(sp),d1
   13fa8:	       jsr -684(a6)
   13fac:	       move.l d0,12(sp)
   13fb0:	       move.l 12(sp),d0
   13fb4:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13fb8:	   /-- bne.s 13fbe <addVarToStack+0x36>
   13fba:	   |   clr.w d0
   13fbc:	/--|-- bra.s 14006 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13fbe:	|  \-> move.l 8(sp),d0
   13fc2:	|      move.l d0,-(sp)
   13fc4:	|      move.l 32(sp),-(sp)
   13fc8:	|      jsr 14aea <copyMain>
   13fce:	|      addq.l #8,sp
   13fd0:	|      tst.w d0
   13fd2:	|  /-- bne.s 13fee <addVarToStack+0x66>
        FreeVec(newStack);
   13fd4:	|  |   move.l 8(sp),4(sp)
   13fda:	|  |   move.l 1c902 <SysBase>,d0
   13fe0:	|  |   movea.l d0,a6
   13fe2:	|  |   movea.l 4(sp),a1
   13fe6:	|  |   jsr -690(a6)
        return FALSE;
   13fea:	|  |   clr.w d0
   13fec:	+--|-- bra.s 14006 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13fee:	|  \-> movea.l 32(sp),a0
   13ff2:	|      move.l (a0),d0
   13ff4:	|      movea.l 8(sp),a0
   13ff8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ffc:	|      movea.l 32(sp),a0
   14000:	|      move.l 8(sp),(a0)
    return TRUE;
   14004:	|      moveq #1,d0
}
   14006:	\----> movea.l (sp)+,a6
   14008:	       lea 20(sp),sp
   1400c:	       rts

0001400e <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1400e:	       lea -16(sp),sp
   14012:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14014:	       moveq #12,d0
   14016:	       move.l d0,16(sp)
   1401a:	       clr.l 12(sp)
   1401e:	       move.l 1c902 <SysBase>,d0
   14024:	       movea.l d0,a6
   14026:	       move.l 16(sp),d0
   1402a:	       move.l 12(sp),d1
   1402e:	       jsr -684(a6)
   14032:	       move.l d0,8(sp)
   14036:	       move.l 8(sp),d0
   1403a:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1403e:	   /-- bne.s 14044 <addVarToStackQuick+0x36>
   14040:	   |   clr.w d0
   14042:	/--|-- bra.s 1407a <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14044:	|  \-> move.l 4(sp),d0
   14048:	|      pea 8 <_start+0x8>
   1404c:	|      move.l 28(sp),-(sp)
   14050:	|      move.l d0,-(sp)
   14052:	|      jsr 17168 <memcpy>
   14058:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1405c:	|      movea.l 24(sp),a0
   14060:	|      clr.l (a0)

    newStack->next = *thisStack;
   14062:	|      movea.l 28(sp),a0
   14066:	|      move.l (a0),d0
   14068:	|      movea.l 4(sp),a0
   1406c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14070:	|      movea.l 28(sp),a0
   14074:	|      move.l 4(sp),(a0)
    return TRUE;
   14078:	|      moveq #1,d0
}
   1407a:	\----> movea.l (sp)+,a6
   1407c:	       lea 16(sp),sp
   14080:	       rts

00014082 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14082:	       lea -16(sp),sp
   14086:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14088:	       movea.l 24(sp),a0
   1408c:	       move.l (a0),d0
   1408e:	       moveq #1,d1
   14090:	       cmp.l d0,d1
   14092:	   /-- bne.s 140bc <addVariablesInSecond+0x3a>
   14094:	   |   movea.l 28(sp),a0
   14098:	   |   move.l (a0),d0
   1409a:	   |   moveq #1,d1
   1409c:	   |   cmp.l d0,d1
   1409e:	   +-- bne.s 140bc <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   140a0:	   |   movea.l 28(sp),a0
   140a4:	   |   move.l 4(a0),d1
   140a8:	   |   movea.l 24(sp),a0
   140ac:	   |   move.l 4(a0),d0
   140b0:	   |   add.l d1,d0
   140b2:	   |   movea.l 28(sp),a0
   140b6:	   |   move.l d0,4(a0)
   140ba:	/--|-- bra.s 14136 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   140bc:	|  \-> move.l 24(sp),-(sp)
   140c0:	|      jsr 14d22 <getTextFromAnyVar>
   140c6:	|      addq.l #4,sp
   140c8:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   140cc:	|      move.l 28(sp),-(sp)
   140d0:	|      jsr 14d22 <getTextFromAnyVar>
   140d6:	|      addq.l #4,sp
   140d8:	|      move.l d0,12(sp)

		unlinkVar(var2);
   140dc:	|      move.l 28(sp),-(sp)
   140e0:	|      jsr 1499a <unlinkVar>
   140e6:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   140e8:	|      move.l 12(sp),-(sp)
   140ec:	|      move.l 20(sp),-(sp)
   140f0:	|      jsr 13c78 <joinStrings>
   140f6:	|      addq.l #8,sp
   140f8:	|      movea.l 28(sp),a0
   140fc:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14100:	|      movea.l 28(sp),a0
   14104:	|      moveq #3,d0
   14106:	|      move.l d0,(a0)
		FreeVec(string1);
   14108:	|      move.l 16(sp),8(sp)
   1410e:	|      move.l 1c902 <SysBase>,d0
   14114:	|      movea.l d0,a6
   14116:	|      movea.l 8(sp),a1
   1411a:	|      jsr -690(a6)
		FreeVec(string2);
   1411e:	|      move.l 12(sp),4(sp)
   14124:	|      move.l 1c902 <SysBase>,d0
   1412a:	|      movea.l d0,a6
   1412c:	|      movea.l 4(sp),a1
   14130:	|      jsr -690(a6)
	}
}
   14134:	|      nop
   14136:	\----> nop
   14138:	       movea.l (sp)+,a6
   1413a:	       lea 16(sp),sp
   1413e:	       rts

00014140 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14140:	movea.l 8(sp),a0
   14144:	move.l 4(a0),-(sp)
   14148:	move.l (a0),-(sp)
   1414a:	movea.l 12(sp),a0
   1414e:	move.l 4(a0),-(sp)
   14152:	move.l (a0),-(sp)
   14154:	jsr 14176 <compareVars>
   1415a:	lea 16(sp),sp
   1415e:	move.l d0,-(sp)
   14160:	pea 1 <_start+0x1>
   14164:	move.l 16(sp),-(sp)
   14168:	jsr 1503e <setVariable>
   1416e:	lea 12(sp),sp
}
   14172:	nop
   14174:	rts

00014176 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14176:	       subq.l #4,sp
	int re = 0;
   14178:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1417a:	       move.l 8(sp),d1
   1417e:	       move.l 16(sp),d0
   14182:	       cmp.l d1,d0
   14184:	/----- bne.w 1424c <compareVars+0xd6>
		switch (var1.varType) {
   14188:	|      move.l 8(sp),d0
   1418c:	|      moveq #9,d1
   1418e:	|      cmp.l d0,d1
   14190:	|  /-- bcs.w 14234 <compareVars+0xbe>
   14194:	|  |   add.l d0,d0
   14196:	|  |   movea.l d0,a0
   14198:	|  |   adda.l #82340,a0
   1419e:	|  |   move.w (a0),d0
   141a0:	|  |   jmp (141a4 <compareVars+0x2e>,pc,d0.w)
   141a4:	|  |   ori.b #-112,(a4)
   141a8:	|  |   ori.l #5243024,(a0)
   141ae:	|  |   ori.l #7733392,(a0)
   141b4:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   141ba:	|  |   move.l d0,(sp)
			break;
   141bc:	+--|-- bra.w 1424c <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   141c0:	|  |   move.l 12(sp),d1
   141c4:	|  |   move.l 20(sp),d0
   141c8:	|  |   cmp.l d1,d0
   141ca:	|  |   seq d0
   141cc:	|  |   neg.b d0
   141ce:	|  |   move.b d0,d0
   141d0:	|  |   andi.l #255,d0
   141d6:	|  |   move.l d0,(sp)
			break;
   141d8:	+--|-- bra.s 1424c <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   141da:	|  |   move.l 12(sp),d1
   141de:	|  |   move.l 20(sp),d0
   141e2:	|  |   cmp.l d1,d0
   141e4:	|  |   seq d0
   141e6:	|  |   neg.b d0
   141e8:	|  |   move.b d0,d0
   141ea:	|  |   andi.l #255,d0
   141f0:	|  |   move.l d0,(sp)
			break;
   141f2:	+--|-- bra.s 1424c <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   141f4:	|  |   move.l 20(sp),d1
   141f8:	|  |   move.l 12(sp),d0
   141fc:	|  |   move.l d1,-(sp)
   141fe:	|  |   move.l d0,-(sp)
   14200:	|  |   jsr 13bf8 <strcmp>
   14206:	|  |   addq.l #8,sp
   14208:	|  |   tst.l d0
   1420a:	|  |   seq d0
   1420c:	|  |   neg.b d0
   1420e:	|  |   move.b d0,d0
   14210:	|  |   andi.l #255,d0
   14216:	|  |   move.l d0,(sp)
			break;
   14218:	+--|-- bra.s 1424c <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1421a:	|  |   move.l 12(sp),d1
   1421e:	|  |   move.l 20(sp),d0
   14222:	|  |   cmp.l d1,d0
   14224:	|  |   seq d0
   14226:	|  |   neg.b d0
   14228:	|  |   move.b d0,d0
   1422a:	|  |   andi.l #255,d0
   14230:	|  |   move.l d0,(sp)
			break;
   14232:	+--|-- bra.s 1424c <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14234:	|  \-> move.l 12(sp),d1
   14238:	|      move.l 20(sp),d0
   1423c:	|      cmp.l d1,d0
   1423e:	|      seq d0
   14240:	|      neg.b d0
   14242:	|      move.b d0,d0
   14244:	|      andi.l #255,d0
   1424a:	|      move.l d0,(sp)
		}
	}
	return re;
   1424c:	\----> move.l (sp),d0
}
   1424e:	       addq.l #4,sp
   14250:	       rts

00014252 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14252:	             lea -16(sp),sp
   14256:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14258:	             movea.l 28(sp),a0
   1425c:	             moveq #6,d0
   1425e:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14260:	             moveq #12,d0
   14262:	             move.l d0,12(sp)
   14266:	             clr.l 8(sp)
   1426a:	             move.l 1c902 <SysBase>,d0
   14270:	             movea.l d0,a6
   14272:	             move.l 12(sp),d0
   14276:	             move.l 8(sp),d1
   1427a:	             jsr -684(a6)
   1427e:	             move.l d0,4(sp)
   14282:	             move.l 4(sp),d0
   14286:	             movea.l 28(sp),a0
   1428a:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1428e:	             movea.l 28(sp),a0
   14292:	             move.l 4(a0),d0
   14296:	         /-- bne.s 1429e <copyStack+0x4c>
   14298:	         |   clr.w d0
   1429a:	/--------|-- bra.w 14320 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1429e:	|        \-> movea.l 28(sp),a0
   142a2:	|            movea.l 4(a0),a0
   142a6:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   142a8:	|            movea.l 28(sp),a0
   142ac:	|            movea.l 4(a0),a0
   142b0:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   142b4:	|            movea.l 28(sp),a0
   142b8:	|            movea.l 4(a0),a0
   142bc:	|            moveq #1,d0
   142be:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   142c2:	|            movea.l 24(sp),a0
   142c6:	|            movea.l 4(a0),a0
   142ca:	|            move.l (a0),16(sp)

	while (a) {
   142ce:	|     /----- bra.s 14318 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   142d0:	|  /--|----> movea.l 28(sp),a0
   142d4:	|  |  |      move.l 4(a0),d0
   142d8:	|  |  |      move.l d0,d1
   142da:	|  |  |      move.l 16(sp),d0
   142de:	|  |  |      move.l d1,-(sp)
   142e0:	|  |  |      move.l d0,-(sp)
   142e2:	|  |  |      jsr 13f88 <addVarToStack>
   142e8:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   142ea:	|  |  |      movea.l 28(sp),a0
   142ee:	|  |  |      movea.l 4(a0),a0
   142f2:	|  |  |      move.l 4(a0),d0
   142f6:	|  |  |  /-- bne.s 1430e <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   142f8:	|  |  |  |   movea.l 28(sp),a0
   142fc:	|  |  |  |   movea.l 4(a0),a1
   14300:	|  |  |  |   movea.l 28(sp),a0
   14304:	|  |  |  |   movea.l 4(a0),a0
   14308:	|  |  |  |   move.l (a1),d0
   1430a:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1430e:	|  |  |  \-> movea.l 16(sp),a0
   14312:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14318:	|  |  \----> tst.l 16(sp)
   1431c:	|  \-------- bne.s 142d0 <copyStack+0x7e>
	}

	return TRUE;
   1431e:	|            moveq #1,d0
}
   14320:	\----------> movea.l (sp)+,a6
   14322:	             lea 16(sp),sp
   14326:	             rts

00014328 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14328:	                lea -20(sp),sp
   1432c:	                move.l a6,-(sp)
   1432e:	                move.l 36(sp),d0
   14332:	                move.w d0,d0
   14334:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14338:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1433e:	                clr.l 16(sp)

    while (*huntVar) {
   14342:	   /----------- bra.s 143c0 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14344:	/--|----------> movea.l 20(sp),a0
   14348:	|  |            movea.l (a0),a0
   1434a:	|  |            movea.l 28(sp),a1
   1434e:	|  |            move.l 4(a1),-(sp)
   14352:	|  |            move.l (a1),-(sp)
   14354:	|  |            move.l 4(a0),-(sp)
   14358:	|  |            move.l (a0),-(sp)
   1435a:	|  |            jsr 14176 <compareVars>
   14360:	|  |            lea 16(sp),sp
   14364:	|  |            tst.l d0
   14366:	|  |  /-------- beq.s 143b2 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14368:	|  |  |         movea.l 20(sp),a0
   1436c:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14370:	|  |  |         movea.l 12(sp),a0
   14374:	|  |  |         move.l 8(a0),d0
   14378:	|  |  |         movea.l 20(sp),a0
   1437c:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1437e:	|  |  |         move.l 12(sp),d0
   14382:	|  |  |         move.l d0,-(sp)
   14384:	|  |  |         jsr 1499a <unlinkVar>
   1438a:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1438c:	|  |  |         move.l 12(sp),8(sp)
   14392:	|  |  |         move.l 1c902 <SysBase>,d0
   14398:	|  |  |         movea.l d0,a6
   1439a:	|  |  |         movea.l 8(sp),a1
   1439e:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   143a2:	|  |  |         tst.w 6(sp)
   143a6:	|  |  |     /-- bne.s 143ac <deleteVarFromStack+0x84>
   143a8:	|  |  |     |   moveq #1,d0
   143aa:	|  |  |  /--|-- bra.s 143ce <deleteVarFromStack+0xa6>
            reply++;
   143ac:	|  |  |  |  \-> addq.l #1,16(sp)
   143b0:	|  +--|--|----- bra.s 143c0 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   143b2:	|  |  \--|----> movea.l 20(sp),a0
   143b6:	|  |     |      move.l (a0),d0
   143b8:	|  |     |      move.l d0,d1
   143ba:	|  |     |      addq.l #8,d1
   143bc:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   143c0:	|  \-----|----> movea.l 20(sp),a0
   143c4:	|        |      move.l (a0),d0
   143c6:	\--------|----- bne.w 14344 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   143ca:	         |      move.l 16(sp),d0
}
   143ce:	         \----> movea.l (sp)+,a6
   143d0:	                lea 20(sp),sp
   143d4:	                rts

000143d6 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   143d6:	       movea.l 4(sp),a0
   143da:	       move.l 4(a0),d0
   143de:	       cmp.l 8(sp),d0
   143e2:	   /-- bhi.s 143e8 <fastArrayGetByIndex+0x12>
   143e4:	   |   moveq #0,d0
   143e6:	/--|-- bra.s 143f6 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   143e8:	|  \-> movea.l 4(sp),a0
   143ec:	|      move.l (a0),d1
   143ee:	|      move.l 8(sp),d0
   143f2:	|      lsl.l #3,d0
   143f4:	|      add.l d1,d0
}
   143f6:	\----> rts

000143f8 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   143f8:	                lea -32(sp),sp
   143fc:	                move.l a6,-(sp)
   143fe:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14400:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14404:	                movea.l 44(sp),a0
   14408:	                move.l (a0),d0
   1440a:	                moveq #8,d1
   1440c:	                cmp.l d0,d1
   1440e:	            /-- beq.s 1441c <getCostumeFromVar+0x24>
   14410:	            |   moveq #9,d1
   14412:	            |   cmp.l d0,d1
   14414:	   /--------|-- beq.w 144ca <getCostumeFromVar+0xd2>
   14418:	/--|--------|-- bra.w 144d4 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   1441c:	|  |        \-> moveq #8,d0
   1441e:	|  |            move.l d0,28(sp)
   14422:	|  |            clr.l 24(sp)
   14426:	|  |            move.l 1c902 <SysBase>,d0
   1442c:	|  |            movea.l d0,a6
   1442e:	|  |            move.l 28(sp),d0
   14432:	|  |            move.l 24(sp),d1
   14436:	|  |            jsr -684(a6)
   1443a:	|  |            move.l d0,20(sp)
   1443e:	|  |            move.l 20(sp),d0
   14442:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14446:	|  |        /-- bne.s 1444e <getCostumeFromVar+0x56>
   14448:	|  |        |   moveq #0,d0
   1444a:	|  |  /-----|-- bra.w 144fe <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1444e:	|  |  |     \-> movea.l 36(sp),a0
   14452:	|  |  |         moveq #1,d1
   14454:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14458:	|  |  |         moveq #12,d0
   1445a:	|  |  |         move.l d0,16(sp)
   1445e:	|  |  |         clr.l 12(sp)
   14462:	|  |  |         move.l 1c902 <SysBase>,d0
   14468:	|  |  |         movea.l d0,a6
   1446a:	|  |  |         move.l 16(sp),d0
   1446e:	|  |  |         move.l 12(sp),d1
   14472:	|  |  |         jsr -684(a6)
   14476:	|  |  |         move.l d0,8(sp)
   1447a:	|  |  |         move.l 8(sp),d0
   1447e:	|  |  |         movea.l 36(sp),a0
   14482:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14484:	|  |  |         movea.l 36(sp),a0
   14488:	|  |  |         move.l (a0),d0
   1448a:	|  |  |     /-- bne.s 14490 <getCostumeFromVar+0x98>
   1448c:	|  |  |     |   moveq #0,d0
   1448e:	|  |  +-----|-- bra.s 144fe <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14490:	|  |  |     \-> clr.l 32(sp)
   14494:	|  |  |     /-- bra.s 144c0 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14496:	|  |  |  /--|-> movea.l 44(sp),a0
   1449a:	|  |  |  |  |   move.l 4(a0),d0
   1449e:	|  |  |  |  |   movea.l 36(sp),a0
   144a2:	|  |  |  |  |   movea.l (a0),a0
   144a4:	|  |  |  |  |   move.l 32(sp),d1
   144a8:	|  |  |  |  |   add.l d1,d1
   144aa:	|  |  |  |  |   add.l d1,d1
   144ac:	|  |  |  |  |   lea (0,a0,d1.l),a2
   144b0:	|  |  |  |  |   move.l d0,-(sp)
   144b2:	|  |  |  |  |   jsr 94a6 <copyAnim>
   144b8:	|  |  |  |  |   addq.l #4,sp
   144ba:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   144bc:	|  |  |  |  |   addq.l #1,32(sp)
   144c0:	|  |  |  |  \-> moveq #2,d1
   144c2:	|  |  |  |      cmp.l 32(sp),d1
   144c6:	|  |  |  \----- bge.s 14496 <getCostumeFromVar+0x9e>
            }
            break;
   144c8:	|  |  |     /-- bra.s 144fa <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   144ca:	|  \--|-----|-> movea.l 44(sp),a0
   144ce:	|     |     |   move.l 4(a0),d0
   144d2:	|     +-----|-- bra.s 144fe <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   144d4:	\-----|-----|-> movea.l 44(sp),a0
   144d8:	      |     |   move.l (a0),d0
   144da:	      |     |   add.l d0,d0
   144dc:	      |     |   movea.l d0,a1
   144de:	      |     |   adda.l d0,a1
   144e0:	      |     |   lea 1c7de <typeName>,a0
   144e6:	      |     |   move.l (0,a1,a0.l),d0
   144ea:	      |     |   move.l d0,-(sp)
   144ec:	      |     |   pea 19df6 <graphics.c.1c13408a+0x1d8>
   144f2:	      |     |   jsr 171b4 <KPrintF>
   144f8:	      |     |   addq.l #8,sp
    }

    return p;
   144fa:	      |     \-> move.l 36(sp),d0
}
   144fe:	      \-------> movea.l (sp)+,a2
   14500:	                movea.l (sp)+,a6
   14502:	                lea 32(sp),sp
   14506:	                rts

00014508 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14508:	                lea -96(sp),sp
   1450c:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14510:	                move.l 116(sp),-(sp)
   14514:	                pea 19e2e <graphics.c.1c13408a+0x210>
   1451a:	                jsr 13c78 <joinStrings>
   14520:	                addq.l #8,sp
   14522:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14526:	            /-- bne.s 1452e <getSavedGamesStack+0x26>
   14528:	            |   clr.w d0
   1452a:	/-----------|-- bra.w 14742 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1452e:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14532:	|               move.l #106032,98(sp)
   1453a:	|               moveq #-2,d0
   1453c:	|               move.l d0,94(sp)
   14540:	|               move.l 1c90a <DOSBase>,d0
   14546:	|               movea.l d0,a6
   14548:	|               move.l 98(sp),d1
   1454c:	|               move.l 94(sp),d2
   14550:	|               jsr -84(a6)
   14554:	|               move.l d0,90(sp)
   14558:	|               move.l 90(sp),d0
   1455c:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14560:	|           /-- bne.s 14568 <getSavedGamesStack+0x60>
   14562:	|           |   clr.w d0
   14564:	+-----------|-- bra.w 14742 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14568:	|           \-> move.l #260,82(sp)
   14570:	|               move.l #65536,78(sp)
   14578:	|               move.l 1c902 <SysBase>,d0
   1457e:	|               movea.l d0,a6
   14580:	|               move.l 82(sp),d0
   14584:	|               move.l 78(sp),d1
   14588:	|               jsr -684(a6)
   1458c:	|               move.l d0,74(sp)
   14590:	|               move.l 74(sp),d0
   14594:	|               move.l d0,70(sp)
	if (!fib) {
   14598:	|           /-- bne.s 145b6 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1459a:	|           |   move.l 86(sp),22(sp)
   145a0:	|           |   move.l 1c90a <DOSBase>,d0
   145a6:	|           |   movea.l d0,a6
   145a8:	|           |   move.l 22(sp),d1
   145ac:	|           |   jsr -90(a6)
		return FALSE;
   145b0:	|           |   clr.w d0
   145b2:	+-----------|-- bra.w 14742 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   145b6:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   145ba:	|               move.l 86(sp),66(sp)
   145c0:	|               move.l 70(sp),62(sp)
   145c6:	|               move.l 1c90a <DOSBase>,d0
   145cc:	|               movea.l d0,a6
   145ce:	|               move.l 66(sp),d1
   145d2:	|               move.l 62(sp),d2
   145d6:	|               jsr -102(a6)
   145da:	|               move.l d0,58(sp)
   145de:	|               move.l 58(sp),d0
   145e2:	|  /----------- beq.w 146f6 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   145e6:	|  |        /-- bra.w 146c2 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   145ea:	|  |  /-----|-> move.l 70(sp),d2
   145ee:	|  |  |     |   addq.l #8,d2
   145f0:	|  |  |     |   move.l 70(sp),d0
   145f4:	|  |  |     |   addq.l #8,d0
   145f6:	|  |  |     |   move.l d0,-(sp)
   145f8:	|  |  |     |   jsr 13c38 <strlen>
   145fe:	|  |  |     |   addq.l #4,sp
   14600:	|  |  |     |   move.l d0,d3
   14602:	|  |  |     |   move.l 116(sp),-(sp)
   14606:	|  |  |     |   jsr 13c38 <strlen>
   1460c:	|  |  |     |   addq.l #4,sp
   1460e:	|  |  |     |   move.l d3,d1
   14610:	|  |  |     |   sub.l d0,d1
   14612:	|  |  |     |   move.l d2,d0
   14614:	|  |  |     |   add.l d1,d0
   14616:	|  |  |     |   move.l 116(sp),-(sp)
   1461a:	|  |  |     |   move.l d0,-(sp)
   1461c:	|  |  |     |   jsr 13bf8 <strcmp>
   14622:	|  |  |     |   addq.l #8,sp
   14624:	|  |  |     |   tst.l d0
   14626:	|  |  |     +-- bne.w 146c2 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1462a:	|  |  |     |   move.l 70(sp),d0
   1462e:	|  |  |     |   addq.l #8,d0
   14630:	|  |  |     |   move.l d0,-(sp)
   14632:	|  |  |     |   jsr 13c38 <strlen>
   14638:	|  |  |     |   addq.l #4,sp
   1463a:	|  |  |     |   move.l d0,d2
   1463c:	|  |  |     |   move.l 116(sp),-(sp)
   14640:	|  |  |     |   jsr 13c38 <strlen>
   14646:	|  |  |     |   addq.l #4,sp
   14648:	|  |  |     |   move.l d0,d1
   1464a:	|  |  |     |   move.l d2,d0
   1464c:	|  |  |     |   sub.l d1,d0
   1464e:	|  |  |     |   movea.l 70(sp),a0
   14652:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14656:	|  |  |     |   move.l 70(sp),d0
   1465a:	|  |  |     |   addq.l #8,d0
   1465c:	|  |  |     |   move.l d0,-(sp)
   1465e:	|  |  |     |   jsr 118 <decodeFilename>
   14664:	|  |  |     |   addq.l #4,sp
   14666:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1466a:	|  |  |     |   move.l 42(sp),-(sp)
   1466e:	|  |  |     |   lea 18(sp),a0
   14672:	|  |  |     |   move.l a0,-(sp)
   14674:	|  |  |     |   jsr 1496e <makeTextVar>
   1467a:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1467c:	|  |  |     |   move.l 42(sp),38(sp)
   14682:	|  |  |     |   move.l 1c902 <SysBase>,d0
   14688:	|  |  |     |   movea.l d0,a6
   1468a:	|  |  |     |   movea.l 38(sp),a1
   1468e:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14692:	|  |  |     |   move.l 112(sp),d0
   14696:	|  |  |     |   move.l d0,-(sp)
   14698:	|  |  |     |   lea 18(sp),a0
   1469c:	|  |  |     |   move.l a0,-(sp)
   1469e:	|  |  |     |   jsr 13f88 <addVarToStack>
   146a4:	|  |  |     |   addq.l #8,sp
   146a6:	|  |  |     |   tst.w d0
   146a8:	|  |  |  /--|-- beq.s 146fa <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   146aa:	|  |  |  |  |   movea.l 112(sp),a0
   146ae:	|  |  |  |  |   move.l 4(a0),d0
   146b2:	|  |  |  |  +-- bne.s 146c2 <getSavedGamesStack+0x1ba>
   146b4:	|  |  |  |  |   movea.l 112(sp),a0
   146b8:	|  |  |  |  |   move.l (a0),d0
   146ba:	|  |  |  |  |   movea.l 112(sp),a0
   146be:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   146c2:	|  |  |  |  \-> move.l 86(sp),54(sp)
   146c8:	|  |  |  |      move.l 70(sp),50(sp)
   146ce:	|  |  |  |      move.l 1c90a <DOSBase>,d0
   146d4:	|  |  |  |      movea.l d0,a6
   146d6:	|  |  |  |      move.l 54(sp),d1
   146da:	|  |  |  |      move.l 50(sp),d2
   146de:	|  |  |  |      jsr -108(a6)
   146e2:	|  |  |  |      move.l d0,46(sp)
   146e6:	|  |  |  |      move.l 46(sp),d0
   146ea:	|  |  \--|----- bne.w 145ea <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   146ee:	|  |     |      move.w #1,106(sp)
   146f4:	|  |     |  /-- bra.s 146fc <getSavedGamesStack+0x1f4>
	}

cleanup:
   146f6:	|  \-----|--|-> nop
   146f8:	|        |  +-- bra.s 146fc <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   146fa:	|        \--|-> nop
	FreeVec(fib);
   146fc:	|           \-> move.l 70(sp),34(sp)
   14702:	|               move.l 1c902 <SysBase>,d0
   14708:	|               movea.l d0,a6
   1470a:	|               movea.l 34(sp),a1
   1470e:	|               jsr -690(a6)
	UnLock(dirLock);
   14712:	|               move.l 86(sp),30(sp)
   14718:	|               move.l 1c90a <DOSBase>,d0
   1471e:	|               movea.l d0,a6
   14720:	|               move.l 30(sp),d1
   14724:	|               jsr -90(a6)
	FreeVec(pattern);
   14728:	|               move.l 102(sp),26(sp)
   1472e:	|               move.l 1c902 <SysBase>,d0
   14734:	|               movea.l d0,a6
   14736:	|               movea.l 26(sp),a1
   1473a:	|               jsr -690(a6)
	return result;
   1473e:	|               move.w 106(sp),d0
}
   14742:	\-------------> movem.l (sp)+,d2-d3/a6
   14746:	                lea 96(sp),sp
   1474a:	                rts

0001474c <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1474c:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1474e:	       movea.l 20(sp),a0
   14752:	       move.l (a0),d0
   14754:	       cmp.l 16(sp),d0
   14758:	/----- beq.s 147bc <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1475a:	|      move.l 16(sp),d0
   1475e:	|      add.l d0,d0
   14760:	|      movea.l d0,a1
   14762:	|      adda.l d0,a1
   14764:	|      lea 1c7de <typeName>,a0
   1476a:	|      move.l (0,a1,a0.l),d0
   1476e:	|      move.l d0,-(sp)
   14770:	|      pea 19e32 <graphics.c.1c13408a+0x214>
   14776:	|      jsr 13c78 <joinStrings>
   1477c:	|      addq.l #8,sp
   1477e:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14782:	|      movea.l 20(sp),a0
   14786:	|      move.l (a0),d0
   14788:	|      add.l d0,d0
   1478a:	|      movea.l d0,a1
   1478c:	|      adda.l d0,a1
   1478e:	|      lea 1c7de <typeName>,a0
   14794:	|      move.l (0,a1,a0.l),d0
   14798:	|      move.l d0,-(sp)
   1479a:	|      pea 19e74 <graphics.c.1c13408a+0x256>
   147a0:	|      jsr 13c78 <joinStrings>
   147a6:	|      addq.l #8,sp
   147a8:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   147aa:	|      move.l (sp),-(sp)
   147ac:	|      move.l 8(sp),-(sp)
   147b0:	|      jsr 171b4 <KPrintF>
   147b6:	|      addq.l #8,sp

		return FALSE;
   147b8:	|      clr.w d0
   147ba:	|  /-- bra.s 147cc <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   147bc:	\--|-> movea.l 20(sp),a0
   147c0:	   |   move.l 4(a0),d0
   147c4:	   |   movea.l 12(sp),a0
   147c8:	   |   move.l d0,(a0)
	return TRUE;
   147ca:	   |   moveq #1,d0
}
   147cc:	   \-> addq.l #8,sp
   147ce:	       rts

000147d0 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   147d0:	move.l 8(sp),-(sp)
   147d4:	jsr 6b78 <getNumberedString>
   147da:	addq.l #4,sp
   147dc:	move.l d0,-(sp)
   147de:	move.l 8(sp),-(sp)
   147e2:	jsr 1496e <makeTextVar>
   147e8:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   147ea:	movea.l 4(sp),a0
   147ee:	move.l 4(a0),d0
   147f2:	sne d0
   147f4:	neg.b d0
   147f6:	move.b d0,d0
   147f8:	andi.w #255,d0
}
   147fc:	rts

000147fe <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   147fe:	          subq.l #8,sp
    int size = stackSize(stacky);
   14800:	          move.l 16(sp),-(sp)
   14804:	          jsr 150ac <stackSize>
   1480a:	          addq.l #4,sp
   1480c:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14810:	          move.l 4(sp),-(sp)
   14814:	          move.l 16(sp),-(sp)
   14818:	          jsr 14868 <makeFastArraySize>
   1481e:	          addq.l #8,sp
   14820:	          tst.w d0
   14822:	      /-- bne.s 14828 <makeFastArrayFromStack+0x2a>
   14824:	      |   clr.w d0
   14826:	/-----|-- bra.s 14864 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14828:	|     \-> movea.l 16(sp),a0
   1482c:	|         move.l (a0),(sp)
    size = 0;
   1482e:	|         clr.l 4(sp)
    while (allV) {
   14832:	|     /-- bra.s 1485e <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14834:	|  /--|-> movea.l 12(sp),a0
   14838:	|  |  |   movea.l 4(a0),a0
   1483c:	|  |  |   move.l (a0),d1
   1483e:	|  |  |   move.l 4(sp),d0
   14842:	|  |  |   lsl.l #3,d0
   14844:	|  |  |   add.l d0,d1
   14846:	|  |  |   move.l (sp),d0
   14848:	|  |  |   move.l d1,-(sp)
   1484a:	|  |  |   move.l d0,-(sp)
   1484c:	|  |  |   jsr 14aea <copyMain>
   14852:	|  |  |   addq.l #8,sp
        size++;
   14854:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14858:	|  |  |   movea.l (sp),a0
   1485a:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   1485e:	|  |  \-> tst.l (sp)
   14860:	|  \----- bne.s 14834 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14862:	|         moveq #1,d0
}
   14864:	\-------> addq.l #8,sp
   14866:	          rts

00014868 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14868:	          lea -28(sp),sp
   1486c:	          move.l a6,-(sp)
    if (size < 0) {
   1486e:	          tst.l 40(sp)
   14872:	      /-- bge.s 14888 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14874:	      |   pea 19eb9 <graphics.c.1c13408a+0x29b>
   1487a:	      |   jsr 171b4 <KPrintF>
   14880:	      |   addq.l #4,sp
		return FALSE;
   14882:	      |   clr.w d0
   14884:	/-----|-- bra.w 14966 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14888:	|     \-> move.l 36(sp),-(sp)
   1488c:	|         jsr 1499a <unlinkVar>
   14892:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14894:	|         movea.l 36(sp),a0
   14898:	|         moveq #10,d0
   1489a:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1489c:	|         moveq #12,d0
   1489e:	|         move.l d0,24(sp)
   148a2:	|         clr.l 20(sp)
   148a6:	|         move.l 1c902 <SysBase>,d0
   148ac:	|         movea.l d0,a6
   148ae:	|         move.l 24(sp),d0
   148b2:	|         move.l 20(sp),d1
   148b6:	|         jsr -684(a6)
   148ba:	|         move.l d0,16(sp)
   148be:	|         move.l 16(sp),d0
   148c2:	|         movea.l 36(sp),a0
   148c6:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   148ca:	|         movea.l 36(sp),a0
   148ce:	|         move.l 4(a0),d0
   148d2:	|     /-- bne.s 148da <makeFastArraySize+0x72>
   148d4:	|     |   clr.w d0
   148d6:	+-----|-- bra.w 14966 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   148da:	|     \-> move.l 40(sp),d0
   148de:	|         lsl.l #3,d0
   148e0:	|         move.l d0,12(sp)
   148e4:	|         clr.l 8(sp)
   148e8:	|         move.l 1c902 <SysBase>,d0
   148ee:	|         movea.l d0,a6
   148f0:	|         move.l 12(sp),d0
   148f4:	|         move.l 8(sp),d1
   148f8:	|         jsr -684(a6)
   148fc:	|         move.l d0,4(sp)
   14900:	|         move.l 4(sp),d0
   14904:	|         movea.l 36(sp),a0
   14908:	|         movea.l 4(a0),a0
   1490c:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1490e:	|         movea.l 36(sp),a0
   14912:	|         movea.l 4(a0),a0
   14916:	|         move.l (a0),d0
   14918:	|     /-- bne.s 1491e <makeFastArraySize+0xb6>
   1491a:	|     |   clr.w d0
   1491c:	+-----|-- bra.s 14966 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1491e:	|     \-> clr.l 28(sp)
   14922:	|     /-- bra.s 1493e <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14924:	|  /--|-> movea.l 36(sp),a0
   14928:	|  |  |   movea.l 4(a0),a0
   1492c:	|  |  |   move.l (a0),d1
   1492e:	|  |  |   move.l 28(sp),d0
   14932:	|  |  |   lsl.l #3,d0
   14934:	|  |  |   movea.l d1,a0
   14936:	|  |  |   adda.l d0,a0
   14938:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1493a:	|  |  |   addq.l #1,28(sp)
   1493e:	|  |  \-> move.l 28(sp),d0
   14942:	|  |      cmp.l 40(sp),d0
   14946:	|  \----- blt.s 14924 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14948:	|         movea.l 36(sp),a0
   1494c:	|         movea.l 4(a0),a0
   14950:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14956:	|         movea.l 36(sp),a0
   1495a:	|         movea.l 4(a0),a0
   1495e:	|         moveq #1,d0
   14960:	|         move.l d0,8(a0)
    return TRUE;
   14964:	|         moveq #1,d0
}
   14966:	\-------> movea.l (sp)+,a6
   14968:	          lea 28(sp),sp
   1496c:	          rts

0001496e <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   1496e:	move.l 4(sp),-(sp)
   14972:	jsr 1499a <unlinkVar>
   14978:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1497a:	movea.l 4(sp),a0
   1497e:	moveq #3,d0
   14980:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14982:	move.l 8(sp),-(sp)
   14986:	jsr b8 <copyString>
   1498c:	addq.l #4,sp
   1498e:	movea.l 4(sp),a0
   14992:	move.l d0,4(a0)
}
   14996:	nop
   14998:	rts

0001499a <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1499a:	                      lea -16(sp),sp
   1499e:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   149a0:	                      movea.l 24(sp),a0
   149a4:	                      move.l (a0),d0
   149a6:	                      moveq #10,d1
   149a8:	                      cmp.l d0,d1
   149aa:	            /-------- beq.w 14a62 <unlinkVar+0xc8>
   149ae:	            |         moveq #10,d1
   149b0:	            |         cmp.l d0,d1
   149b2:	/-----------|-------- bcs.w 14ad6 <unlinkVar+0x13c>
   149b6:	|           |         moveq #8,d1
   149b8:	|           |         cmp.l d0,d1
   149ba:	|  /--------|-------- beq.w 14ac2 <unlinkVar+0x128>
   149be:	|  |        |         moveq #8,d1
   149c0:	|  |        |         cmp.l d0,d1
   149c2:	+--|--------|-------- bcs.w 14ad6 <unlinkVar+0x13c>
   149c6:	|  |        |         moveq #3,d1
   149c8:	|  |        |         cmp.l d0,d1
   149ca:	|  |        |     /-- beq.s 149d6 <unlinkVar+0x3c>
   149cc:	|  |        |     |   moveq #6,d1
   149ce:	|  |        |     |   cmp.l d0,d1
   149d0:	|  |        |  /--|-- beq.s 149fc <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   149d2:	+--|--------|--|--|-- bra.w 14ad6 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   149d6:	|  |        |  |  \-> movea.l 24(sp),a0
   149da:	|  |        |  |      move.l 4(a0),4(sp)
   149e0:	|  |        |  |      move.l 1c902 <SysBase>,d0
   149e6:	|  |        |  |      movea.l d0,a6
   149e8:	|  |        |  |      movea.l 4(sp),a1
   149ec:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   149f0:	|  |        |  |      movea.l 24(sp),a0
   149f4:	|  |        |  |      clr.l 4(a0)
		break;
   149f8:	|  |  /-----|--|----- bra.w 14ae0 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   149fc:	|  |  |     |  \----> movea.l 24(sp),a0
   14a00:	|  |  |     |         movea.l 4(a0),a0
   14a04:	|  |  |     |         move.l 8(a0),d0
   14a08:	|  |  |     |         subq.l #1,d0
   14a0a:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a0e:	|  |  |     |         movea.l 24(sp),a0
   14a12:	|  |  |     |         movea.l 4(a0),a0
   14a16:	|  |  |     |         move.l 8(a0),d0
   14a1a:	|  |  |  /--|-------- bgt.w 14ada <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14a1e:	|  |  |  |  |     /-- bra.s 14a32 <unlinkVar+0x98>
   14a20:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14a24:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14a28:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14a2a:	|  |  |  |  |  |  |   jsr 150d0 <trimStack>
   14a30:	|  |  |  |  |  |  |   addq.l #4,sp
   14a32:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14a36:	|  |  |  |  |  |      movea.l 4(a0),a0
   14a3a:	|  |  |  |  |  |      move.l (a0),d0
   14a3c:	|  |  |  |  |  \----- bne.s 14a20 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14a3e:	|  |  |  |  |         movea.l 24(sp),a0
   14a42:	|  |  |  |  |         move.l 4(a0),8(sp)
   14a48:	|  |  |  |  |         move.l 1c902 <SysBase>,d0
   14a4e:	|  |  |  |  |         movea.l d0,a6
   14a50:	|  |  |  |  |         movea.l 8(sp),a1
   14a54:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14a58:	|  |  |  |  |         movea.l 24(sp),a0
   14a5c:	|  |  |  |  |         clr.l 4(a0)
		break;
   14a60:	|  |  |  +--|-------- bra.s 14ada <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14a62:	|  |  |  |  \-------> movea.l 24(sp),a0
   14a66:	|  |  |  |            movea.l 4(a0),a0
   14a6a:	|  |  |  |            move.l 8(a0),d0
   14a6e:	|  |  |  |            subq.l #1,d0
   14a70:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a74:	|  |  |  |            movea.l 24(sp),a0
   14a78:	|  |  |  |            movea.l 4(a0),a0
   14a7c:	|  |  |  |            move.l 8(a0),d0
   14a80:	|  |  |  |        /-- bgt.s 14ade <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14a82:	|  |  |  |        |   movea.l 24(sp),a0
   14a86:	|  |  |  |        |   movea.l 4(a0),a0
   14a8a:	|  |  |  |        |   move.l (a0),16(sp)
   14a8e:	|  |  |  |        |   move.l 1c902 <SysBase>,d0
   14a94:	|  |  |  |        |   movea.l d0,a6
   14a96:	|  |  |  |        |   movea.l 16(sp),a1
   14a9a:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14a9e:	|  |  |  |        |   movea.l 24(sp),a0
   14aa2:	|  |  |  |        |   move.l 4(a0),12(sp)
   14aa8:	|  |  |  |        |   move.l 1c902 <SysBase>,d0
   14aae:	|  |  |  |        |   movea.l d0,a6
   14ab0:	|  |  |  |        |   movea.l 12(sp),a1
   14ab4:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14ab8:	|  |  |  |        |   movea.l 24(sp),a0
   14abc:	|  |  |  |        |   clr.l 4(a0)
		break;
   14ac0:	|  |  |  |        +-- bra.s 14ade <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14ac2:	|  \--|--|--------|-> movea.l 24(sp),a0
   14ac6:	|     |  |        |   move.l 4(a0),d0
   14aca:	|     |  |        |   move.l d0,-(sp)
   14acc:	|     |  |        |   jsr 9872 <deleteAnim>
   14ad2:	|     |  |        |   addq.l #4,sp
		break;
   14ad4:	|     +--|--------|-- bra.s 14ae0 <unlinkVar+0x146>
		break;
   14ad6:	\-----|--|--------|-> nop
   14ad8:	      +--|--------|-- bra.s 14ae0 <unlinkVar+0x146>
		break;
   14ada:	      |  \--------|-> nop
   14adc:	      +-----------|-- bra.s 14ae0 <unlinkVar+0x146>
		break;
   14ade:	      |           \-> nop
	}
}
   14ae0:	      \-------------> nop
   14ae2:	                      movea.l (sp)+,a6
   14ae4:	                      lea 16(sp),sp
   14ae8:	                      rts

00014aea <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14aea:	       movea.l 4(sp),a0
   14aee:	       move.l (a0),d0
   14af0:	       movea.l 8(sp),a0
   14af4:	       move.l d0,(a0)
	switch (to->varType) {
   14af6:	       movea.l 8(sp),a0
   14afa:	       move.l (a0),d0
   14afc:	       moveq #10,d1
   14afe:	       cmp.l d0,d1
   14b00:	/----- bcs.w 14bf2 <copyMain+0x108>
   14b04:	|      add.l d0,d0
   14b06:	|      movea.l d0,a0
   14b08:	|      adda.l #84756,a0
   14b0e:	|      move.w (a0),d0
   14b10:	|      jmp (14b14 <copyMain+0x2a>,pc,d0.w)
   14b14:	|      .short 0x00da
   14b16:	|      ori.b #22,(a6)
   14b1a:	|      ori.w #22,(a4)
   14b1e:	|      ori.b #-126,(a6)
   14b22:	|      ori.b #-68,(a6)
   14b26:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14b2e:	|      move.l 4(a0),d0
   14b32:	|      movea.l 8(sp),a0
   14b36:	|      move.l d0,4(a0)
		return TRUE;
   14b3a:	|      moveq #1,d0
   14b3c:	|  /-- bra.w 14c04 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14b40:	|  |   movea.l 4(sp),a0
   14b44:	|  |   move.l 4(a0),d0
   14b48:	|  |   movea.l 8(sp),a0
   14b4c:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14b50:	|  |   movea.l 8(sp),a0
   14b54:	|  |   movea.l 4(a0),a0
   14b58:	|  |   move.l 8(a0),d0
   14b5c:	|  |   addq.l #1,d0
   14b5e:	|  |   move.l d0,8(a0)
		return TRUE;
   14b62:	|  |   moveq #1,d0
   14b64:	|  +-- bra.w 14c04 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14b68:	|  |   movea.l 4(sp),a0
   14b6c:	|  |   move.l 4(a0),d0
   14b70:	|  |   move.l d0,-(sp)
   14b72:	|  |   jsr b8 <copyString>
   14b78:	|  |   addq.l #4,sp
   14b7a:	|  |   movea.l 8(sp),a0
   14b7e:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14b82:	|  |   movea.l 8(sp),a0
   14b86:	|  |   move.l 4(a0),d0
   14b8a:	|  |   sne d0
   14b8c:	|  |   neg.b d0
   14b8e:	|  |   move.b d0,d0
   14b90:	|  |   andi.w #255,d0
   14b94:	|  +-- bra.s 14c04 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14b96:	|  |   movea.l 4(sp),a0
   14b9a:	|  |   move.l 4(a0),d0
   14b9e:	|  |   movea.l 8(sp),a0
   14ba2:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14ba6:	|  |   movea.l 8(sp),a0
   14baa:	|  |   movea.l 4(a0),a0
   14bae:	|  |   move.l 8(a0),d0
   14bb2:	|  |   addq.l #1,d0
   14bb4:	|  |   move.l d0,8(a0)
		return TRUE;
   14bb8:	|  |   moveq #1,d0
   14bba:	|  +-- bra.s 14c04 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14bbc:	|  |   movea.l 4(sp),a0
   14bc0:	|  |   move.l 4(a0),d0
   14bc4:	|  |   movea.l 8(sp),a0
   14bc8:	|  |   move.l d0,4(a0)
		return TRUE;
   14bcc:	|  |   moveq #1,d0
   14bce:	|  +-- bra.s 14c04 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14bd0:	|  |   movea.l 4(sp),a0
   14bd4:	|  |   move.l 4(a0),d0
   14bd8:	|  |   move.l d0,-(sp)
   14bda:	|  |   jsr 94a6 <copyAnim>
   14be0:	|  |   addq.l #4,sp
   14be2:	|  |   movea.l 8(sp),a0
   14be6:	|  |   move.l d0,4(a0)
		return TRUE;
   14bea:	|  |   moveq #1,d0
   14bec:	|  +-- bra.s 14c04 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14bee:	|  |   moveq #1,d0
   14bf0:	|  +-- bra.s 14c04 <copyMain+0x11a>

		default:
		break;
   14bf2:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14bf4:	   |   pea 19f0a <graphics.c.1c13408a+0x2ec>
   14bfa:	   |   jsr 171b4 <KPrintF>
   14c00:	   |   addq.l #4,sp
	return FALSE;
   14c02:	   |   clr.w d0
}
   14c04:	   \-> rts

00014c06 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14c06:	move.l 8(sp),-(sp)
   14c0a:	jsr 1499a <unlinkVar>
   14c10:	addq.l #4,sp
	return copyMain(from, to);
   14c12:	move.l 8(sp),-(sp)
   14c16:	move.l 8(sp),-(sp)
   14c1a:	jsr 14aea <copyMain>
   14c20:	addq.l #8,sp
}
   14c22:	rts

00014c24 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14c24:	       movea.l 4(sp),a0
   14c28:	       move.l (a0),d0
   14c2a:	       moveq #8,d1
   14c2c:	       cmp.l d0,d1
   14c2e:	   /-- bne.s 14c44 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14c30:	   |   movea.l 4(sp),a0
   14c34:	   |   move.l 4(a0),d0
   14c38:	   |   move.l d0,-(sp)
   14c3a:	   |   jsr 94a6 <copyAnim>
   14c40:	   |   addq.l #4,sp
   14c42:	/--|-- bra.s 14c8a <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14c44:	|  \-> movea.l 4(sp),a0
   14c48:	|      move.l (a0),d0
   14c4a:	|      moveq #1,d1
   14c4c:	|      cmp.l d0,d1
   14c4e:	|  /-- bne.s 14c62 <getAnimationFromVar+0x3e>
   14c50:	|  |   movea.l 4(sp),a0
   14c54:	|  |   move.l 4(a0),d0
   14c58:	|  +-- bne.s 14c62 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14c5a:	|  |   jsr ac76 <makeNullAnim>
   14c60:	+--|-- bra.s 14c8a <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14c62:	|  \-> movea.l 4(sp),a0
   14c66:	|      move.l (a0),d0
   14c68:	|      add.l d0,d0
   14c6a:	|      movea.l d0,a1
   14c6c:	|      adda.l d0,a1
   14c6e:	|      lea 1c7de <typeName>,a0
   14c74:	|      move.l (0,a1,a0.l),d0
   14c78:	|      move.l d0,-(sp)
   14c7a:	|      pea 19df6 <graphics.c.1c13408a+0x1d8>
   14c80:	|      jsr 171b4 <KPrintF>
   14c86:	|      addq.l #8,sp
	return NULL;
   14c88:	|      moveq #0,d0
}
   14c8a:	\----> rts

00014c8c <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14c8c:	       movea.l 4(sp),a0
   14c90:	       move.l (a0),d0
   14c92:	       moveq #10,d1
   14c94:	       cmp.l d0,d1
   14c96:	/----- bcs.w 14d1c <getBoolean+0x90>
   14c9a:	|      add.l d0,d0
   14c9c:	|      movea.l d0,a0
   14c9e:	|      adda.l #85162,a0
   14ca4:	|      move.w (a0),d0
   14ca6:	|      jmp (14caa <getBoolean+0x1e>,pc,d0.w)
   14caa:	|      ori.b #26,(a6)
   14cae:	|      ori.w #68,(114,a2,d0.w)
   14cb4:	|      ori.w #46,(114,a2,d0.w)
   14cba:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14cc0:	|      clr.w d0
   14cc2:	|  /-- bra.s 14d20 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14cc4:	|  |   movea.l 4(sp),a0
   14cc8:	|  |   move.l 4(a0),d0
   14ccc:	|  |   sne d0
   14cce:	|  |   neg.b d0
   14cd0:	|  |   move.b d0,d0
   14cd2:	|  |   andi.w #255,d0
   14cd6:	|  +-- bra.s 14d20 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14cd8:	|  |   movea.l 4(sp),a0
   14cdc:	|  |   movea.l 4(a0),a0
   14ce0:	|  |   move.l (a0),d0
   14ce2:	|  |   sne d0
   14ce4:	|  |   neg.b d0
   14ce6:	|  |   move.b d0,d0
   14ce8:	|  |   andi.w #255,d0
   14cec:	|  +-- bra.s 14d20 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14cee:	|  |   movea.l 4(sp),a0
   14cf2:	|  |   movea.l 4(a0),a0
   14cf6:	|  |   move.b (a0),d0
   14cf8:	|  |   sne d0
   14cfa:	|  |   neg.b d0
   14cfc:	|  |   move.b d0,d0
   14cfe:	|  |   andi.w #255,d0
   14d02:	|  +-- bra.s 14d20 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14d04:	|  |   movea.l 4(sp),a0
   14d08:	|  |   movea.l 4(a0),a0
   14d0c:	|  |   move.l 4(a0),d0
   14d10:	|  |   sne d0
   14d12:	|  |   neg.b d0
   14d14:	|  |   move.b d0,d0
   14d16:	|  |   andi.w #255,d0
   14d1a:	|  +-- bra.s 14d20 <getBoolean+0x94>

		default:
		break;
   14d1c:	\--|-> nop
	}
	return TRUE;
   14d1e:	   |   moveq #1,d0
}
   14d20:	   \-> rts

00014d22 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14d22:	      /----------> lea -76(sp),sp
   14d26:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14d28:	      |            movea.l 84(sp),a0
   14d2c:	      |            move.l (a0),d0
   14d2e:	      |            moveq #10,d1
   14d30:	      |            cmp.l d0,d1
   14d32:	/-----|----------- bcs.w 14fd0 <getTextFromAnyVar+0x2ae>
   14d36:	|     |            add.l d0,d0
   14d38:	|     |            movea.l d0,a0
   14d3a:	|     |            adda.l #85318,a0
   14d40:	|     |            move.w (a0),d0
   14d42:	|     |            jmp (14d46 <getTextFromAnyVar+0x24>,pc,d0.w)
   14d46:	|     |            .short 0x028a
   14d48:	|     |            bset d0,(a0)+
   14d4a:	|     |            .short 0x028a
   14d4c:	|     |            ori.b #-118,(a6)
   14d50:	|     |            andi.b #8,ccr
   14d54:	|     |            andi.w #650,-(a0)
   14d58:	|     |            .short 0x028a
   14d5a:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14d60:	|     |            move.l 4(a0),d0
   14d64:	|     |            move.l d0,-(sp)
   14d66:	|     |            jsr b8 <copyString>
   14d6c:	|     |            addq.l #4,sp
   14d6e:	|  /--|----------- bra.w 14ff2 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14d72:	|  |  |            pea 19f1d <graphics.c.1c13408a+0x2ff>
   14d78:	|  |  |            jsr b8 <copyString>
   14d7e:	|  |  |            addq.l #4,sp
   14d80:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14d84:	|  |  |            clr.l 72(sp)
   14d88:	|  |  |     /----- bra.w 14e32 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14d8c:	|  |  |  /--|----> pea 19f23 <graphics.c.1c13408a+0x305>
   14d92:	|  |  |  |  |      move.l 80(sp),-(sp)
   14d96:	|  |  |  |  |      jsr 13c78 <joinStrings>
   14d9c:	|  |  |  |  |      addq.l #8,sp
   14d9e:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14da2:	|  |  |  |  |  /-- bne.s 14daa <getTextFromAnyVar+0x88>
   14da4:	|  |  |  |  |  |   moveq #0,d0
   14da6:	|  +--|--|--|--|-- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14daa:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14db0:	|  |  |  |  |      move.l 1c902 <SysBase>,d0
   14db6:	|  |  |  |  |      movea.l d0,a6
   14db8:	|  |  |  |  |      movea.l 56(sp),a1
   14dbc:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14dc0:	|  |  |  |  |      movea.l 84(sp),a0
   14dc4:	|  |  |  |  |      movea.l 4(a0),a0
   14dc8:	|  |  |  |  |      move.l (a0),d1
   14dca:	|  |  |  |  |      move.l 72(sp),d0
   14dce:	|  |  |  |  |      lsl.l #3,d0
   14dd0:	|  |  |  |  |      add.l d1,d0
   14dd2:	|  |  |  |  |      move.l d0,-(sp)
   14dd4:	|  |  +--|--|----- jsr 14d22 <getTextFromAnyVar>(pc)
   14dd8:	|  |  |  |  |      addq.l #4,sp
   14dda:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14dde:	|  |  |  |  |      move.l 52(sp),-(sp)
   14de2:	|  |  |  |  |      move.l 64(sp),-(sp)
   14de6:	|  |  |  |  |      jsr 13c78 <joinStrings>
   14dec:	|  |  |  |  |      addq.l #8,sp
   14dee:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14df2:	|  |  |  |  |  /-- bne.s 14dfa <getTextFromAnyVar+0xd8>
   14df4:	|  |  |  |  |  |   moveq #0,d0
   14df6:	|  +--|--|--|--|-- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14dfa:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14e00:	|  |  |  |  |      move.l 1c902 <SysBase>,d0
   14e06:	|  |  |  |  |      movea.l d0,a6
   14e08:	|  |  |  |  |      movea.l 48(sp),a1
   14e0c:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14e10:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14e14:	|  |  |  |  |      move.l 60(sp),44(sp)
   14e1a:	|  |  |  |  |      move.l 1c902 <SysBase>,d0
   14e20:	|  |  |  |  |      movea.l d0,a6
   14e22:	|  |  |  |  |      movea.l 44(sp),a1
   14e26:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14e2a:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e2e:	|  |  |  |  |      addq.l #1,72(sp)
   14e32:	|  |  |  |  \----> movea.l 84(sp),a0
   14e36:	|  |  |  |         movea.l 4(a0),a0
   14e3a:	|  |  |  |         move.l 4(a0),d0
   14e3e:	|  |  |  |         cmp.l 72(sp),d0
   14e42:	|  |  |  \-------- bgt.w 14d8c <getTextFromAnyVar+0x6a>
			}
			return builder;
   14e46:	|  |  |            move.l 76(sp),d0
   14e4a:	|  +--|----------- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14e4e:	|  |  |            pea 19f25 <graphics.c.1c13408a+0x307>
   14e54:	|  |  |            jsr b8 <copyString>
   14e5a:	|  |  |            addq.l #4,sp
   14e5c:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14e60:	|  |  |            movea.l 84(sp),a0
   14e64:	|  |  |            movea.l 4(a0),a0
   14e68:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14e6c:	|  |  |     /----- bra.w 14f0e <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14e70:	|  |  |  /--|----> pea 19f23 <graphics.c.1c13408a+0x305>
   14e76:	|  |  |  |  |      move.l 72(sp),-(sp)
   14e7a:	|  |  |  |  |      jsr 13c78 <joinStrings>
   14e80:	|  |  |  |  |      addq.l #8,sp
   14e82:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14e86:	|  |  |  |  |  /-- bne.s 14e8e <getTextFromAnyVar+0x16c>
   14e88:	|  |  |  |  |  |   moveq #0,d0
   14e8a:	|  +--|--|--|--|-- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e8e:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14e94:	|  |  |  |  |      move.l 1c902 <SysBase>,d0
   14e9a:	|  |  |  |  |      movea.l d0,a6
   14e9c:	|  |  |  |  |      movea.l 32(sp),a1
   14ea0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14ea4:	|  |  |  |  |      move.l 64(sp),d0
   14ea8:	|  |  |  |  |      move.l d0,-(sp)
   14eaa:	|  |  \--|--|----- jsr 14d22 <getTextFromAnyVar>(pc)
   14eae:	|  |     |  |      addq.l #4,sp
   14eb0:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14eb4:	|  |     |  |      move.l 28(sp),-(sp)
   14eb8:	|  |     |  |      move.l 40(sp),-(sp)
   14ebc:	|  |     |  |      jsr 13c78 <joinStrings>
   14ec2:	|  |     |  |      addq.l #8,sp
   14ec4:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14ec8:	|  |     |  |  /-- bne.s 14ed0 <getTextFromAnyVar+0x1ae>
   14eca:	|  |     |  |  |   moveq #0,d0
   14ecc:	|  +-----|--|--|-- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14ed0:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14ed6:	|  |     |  |      move.l 1c902 <SysBase>,d0
   14edc:	|  |     |  |      movea.l d0,a6
   14ede:	|  |     |  |      movea.l 24(sp),a1
   14ee2:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14ee6:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14eea:	|  |     |  |      move.l 36(sp),20(sp)
   14ef0:	|  |     |  |      move.l 1c902 <SysBase>,d0
   14ef6:	|  |     |  |      movea.l d0,a6
   14ef8:	|  |     |  |      movea.l 20(sp),a1
   14efc:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f00:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14f04:	|  |     |  |      movea.l 64(sp),a0
   14f08:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14f0e:	|  |     |  \----> tst.l 64(sp)
   14f12:	|  |     \-------- bne.w 14e70 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14f16:	|  |               move.l 68(sp),d0
   14f1a:	|  +-------------- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14f1e:	|  |               moveq #10,d0
   14f20:	|  |               move.l d0,16(sp)
   14f24:	|  |               clr.l 12(sp)
   14f28:	|  |               move.l 1c902 <SysBase>,d0
   14f2e:	|  |               movea.l d0,a6
   14f30:	|  |               move.l 16(sp),d0
   14f34:	|  |               move.l 12(sp),d1
   14f38:	|  |               jsr -684(a6)
   14f3c:	|  |               move.l d0,8(sp)
   14f40:	|  |               move.l 8(sp),d0
   14f44:	|  |               move.l d0,4(sp)
			if (! buff) {
   14f48:	|  |           /-- bne.s 14f5e <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14f4a:	|  |           |   pea 19f2c <graphics.c.1c13408a+0x30e>
   14f50:	|  |           |   jsr 171b4 <KPrintF>
   14f56:	|  |           |   addq.l #4,sp
				return NULL;
   14f58:	|  |           |   moveq #0,d0
   14f5a:	|  +-----------|-- bra.w 14ff2 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14f5e:	|  |           \-> movea.l 84(sp),a0
   14f62:	|  |               move.l 4(a0),d0
   14f66:	|  |               move.l d0,-(sp)
   14f68:	|  |               pea 19f56 <graphics.c.1c13408a+0x338>
   14f6e:	|  |               move.l 12(sp),-(sp)
   14f72:	|  |               jsr 13f56 <sprintf>
   14f78:	|  |               lea 12(sp),sp
			return buff;
   14f7c:	|  |               move.l 4(sp),d0
   14f80:	|  +-------------- bra.s 14ff2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14f82:	|  |               movea.l 84(sp),a0
   14f86:	|  |               move.l 4(a0),d0
   14f8a:	|  |               move.l d0,-(sp)
   14f8c:	|  |               jsr 3ff8 <resourceNameFromNum>
   14f92:	|  |               addq.l #4,sp
   14f94:	|  |               move.l d0,-(sp)
   14f96:	|  |               pea 1892b <PutChar+0xcd5>
   14f9c:	|  |               jsr 13c78 <joinStrings>
   14fa2:	|  |               addq.l #8,sp
   14fa4:	|  +-------------- bra.s 14ff2 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14fa6:	|  |               movea.l 84(sp),a0
   14faa:	|  |               move.l 4(a0),d0
   14fae:	|  |               move.l d0,-(sp)
   14fb0:	|  |               jsr d496 <findObjectType>
   14fb6:	|  |               addq.l #4,sp
   14fb8:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14fbc:	+--|-------------- beq.s 14fd0 <getTextFromAnyVar+0x2ae>
   14fbe:	|  |               movea.l 40(sp),a0
   14fc2:	|  |               move.l (a0),d0
   14fc4:	|  |               move.l d0,-(sp)
   14fc6:	|  |               jsr b8 <copyString>
   14fcc:	|  |               addq.l #4,sp
   14fce:	|  +-------------- bra.s 14ff2 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14fd0:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14fd2:	   |               movea.l 84(sp),a0
   14fd6:	   |               move.l (a0),d0
   14fd8:	   |               add.l d0,d0
   14fda:	   |               movea.l d0,a1
   14fdc:	   |               adda.l d0,a1
   14fde:	   |               lea 1c7de <typeName>,a0
   14fe4:	   |               move.l (0,a1,a0.l),d0
   14fe8:	   |               move.l d0,-(sp)
   14fea:	   |               jsr b8 <copyString>
   14ff0:	   |               addq.l #4,sp
}
   14ff2:	   \-------------> movea.l (sp)+,a6
   14ff4:	                   lea 76(sp),sp
   14ff8:	                   rts

00014ffa <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14ffa:	move.l 4(sp),-(sp)
   14ffe:	jsr 1499a <unlinkVar>
   15004:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15006:	movea.l 4(sp),a0
   1500a:	moveq #8,d0
   1500c:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1500e:	movea.l 4(sp),a0
   15012:	move.l 8(sp),4(a0)
}
   15018:	nop
   1501a:	rts

0001501c <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1501c:	move.l 4(sp),-(sp)
   15020:	jsr 1499a <unlinkVar>
   15026:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15028:	movea.l 4(sp),a0
   1502c:	moveq #9,d0
   1502e:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   15030:	movea.l 4(sp),a0
   15034:	move.l 8(sp),4(a0)
}
   1503a:	nop
   1503c:	rts

0001503e <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   1503e:	move.l 4(sp),-(sp)
   15042:	jsr 1499a <unlinkVar>
   15048:	addq.l #4,sp
	thisVar->varType = vT;
   1504a:	movea.l 4(sp),a0
   1504e:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   15052:	movea.l 4(sp),a0
   15056:	move.l 12(sp),4(a0)
}
   1505c:	nop
   1505e:	rts

00015060 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   15060:	      /-- bra.s 15072 <stackGetByIndex+0x12>
        vS = vS->next;
   15062:	/-----|-> movea.l 4(sp),a0
   15066:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1506c:	|     +-- bne.s 15072 <stackGetByIndex+0x12>
            return NULL;
   1506e:	|     |   moveq #0,d0
   15070:	|  /--|-- bra.s 15086 <stackGetByIndex+0x26>
    while (theIndex--) {
   15072:	|  |  \-> move.l 8(sp),d0
   15076:	|  |      move.l d0,d1
   15078:	|  |      subq.l #1,d1
   1507a:	|  |      move.l d1,8(sp)
   1507e:	|  |      tst.l d0
   15080:	\--|----- bne.s 15062 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15082:	   |      move.l 4(sp),d0
}
   15086:	   \----> rts

00015088 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15088:	          tst.l 4(sp)
   1508c:	      /-- bne.s 1509c <stackFindLast+0x14>
		return NULL;
   1508e:	      |   moveq #0,d0
   15090:	/-----|-- bra.s 150aa <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   15092:	|  /--|-> movea.l 4(sp),a0
   15096:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1509c:	|  |  \-> movea.l 4(sp),a0
   150a0:	|  |      move.l 8(a0),d0
   150a4:	|  \----- bne.s 15092 <stackFindLast+0xa>

	return hunt;
   150a6:	|         move.l 4(sp),d0
}
   150aa:	\-------> rts

000150ac <stackSize>:

int stackSize (const struct stackHandler * me) {
   150ac:	       subq.l #8,sp
	int r = 0;
   150ae:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   150b2:	       movea.l 12(sp),a0
   150b6:	       move.l (a0),(sp)
	while (a) {
   150b8:	   /-- bra.s 150c4 <stackSize+0x18>
		r ++;
   150ba:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   150be:	|  |   movea.l (sp),a0
   150c0:	|  |   move.l 8(a0),(sp)
	while (a) {
   150c4:	|  \-> tst.l (sp)
   150c6:	\----- bne.s 150ba <stackSize+0xe>
	}
	return r;
   150c8:	       move.l 4(sp),d0
}
   150cc:	       addq.l #8,sp
   150ce:	       rts

000150d0 <trimStack>:

void trimStack (struct variableStack ** stack) {
   150d0:	subq.l #8,sp
   150d2:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   150d4:	movea.l 16(sp),a0
   150d8:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   150dc:	movea.l 16(sp),a0
   150e0:	movea.l (a0),a0
   150e2:	move.l 8(a0),d0
   150e6:	movea.l 16(sp),a0
   150ea:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   150ec:	move.l 8(sp),d0
   150f0:	move.l d0,-(sp)
   150f2:	jsr 1499a <unlinkVar>
   150f8:	addq.l #4,sp
	FreeVec(killMe);
   150fa:	move.l 8(sp),4(sp)
   15100:	move.l 1c902 <SysBase>,d0
   15106:	movea.l d0,a6
   15108:	movea.l 4(sp),a1
   1510c:	jsr -690(a6)
   15110:	nop
   15112:	movea.l (sp)+,a6
   15114:	addq.l #8,sp
   15116:	rts

00015118 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15118:	       lea -52(sp),sp
   1511c:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1511e:	       pea 19f59 <graphics.c.1c13408a+0x33b>
   15124:	       jsr 171b4 <KPrintF>
   1512a:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   1512c:	       moveq #68,d0
   1512e:	       move.l d0,52(sp)
   15132:	       clr.l 48(sp)
   15136:	       move.l 1c902 <SysBase>,d0
   1513c:	       movea.l d0,a6
   1513e:	       move.l 52(sp),d0
   15142:	       move.l 48(sp),d1
   15146:	       jsr -684(a6)
   1514a:	       move.l d0,44(sp)
   1514e:	       move.l 44(sp),d0
   15152:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15156:	   /-- bne.s 1515e <freeze+0x46>
   15158:	   |   clr.w d0
   1515a:	/--|-- bra.w 152f0 <freeze+0x1d8>

	CstFreeze();
   1515e:	|  \-> jsr 1d3c <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15164:	|      move.l 1c99e <sceneWidth>,d0
   1516a:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1516e:	|      move.l 1c9a2 <sceneHeight>,d0
   15174:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15178:	|      move.l 1c99e <sceneWidth>,d0
   1517e:	|      movea.l 40(sp),a0
   15182:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15186:	|      move.l 1c9a2 <sceneHeight>,d0
   1518c:	|      movea.l 40(sp),a0
   15190:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15194:	|      move.l 1c9bc <cameraX>,d0
   1519a:	|      movea.l 40(sp),a0
   1519e:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   151a2:	|      move.l 1c9c0 <cameraY>,d0
   151a8:	|      movea.l 40(sp),a0
   151ac:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   151b0:	|      move.l 1c2a0 <cameraZoom>,d0
   151b6:	|      movea.l 40(sp),a0
   151ba:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   151be:	|      move.w #1,1c9aa <backdropExists>

	newFreezer -> allPeople = allPeople;
   151c6:	|      move.l 1c966 <allPeople>,d0
   151cc:	|      movea.l 40(sp),a0
   151d0:	|      move.l d0,(a0)
	allPeople = NULL;
   151d2:	|      clr.l 1c966 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   151d8:	|      moveq #42,d0
   151da:	|      move.l d0,28(sp)
   151de:	|      clr.l 24(sp)
   151e2:	|      move.l 1c902 <SysBase>,d0
   151e8:	|      movea.l d0,a6
   151ea:	|      move.l 28(sp),d0
   151ee:	|      move.l 24(sp),d1
   151f2:	|      jsr -684(a6)
   151f6:	|      move.l d0,20(sp)
   151fa:	|      move.l 20(sp),d0
   151fe:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15202:	|  /-- bne.s 1520a <freeze+0xf2>
   15204:	|  |   clr.w d0
   15206:	+--|-- bra.w 152f0 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   1520a:	|  \-> move.l 1ca12 <allScreenRegions>,d0
   15210:	|      movea.l 40(sp),a0
   15214:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15218:	|      clr.l 1ca12 <allScreenRegions>
	overRegion = NULL;
   1521e:	|      clr.l 1ca16 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15224:	|      move.l 1c808 <mouseCursorAnim>,d0
   1522a:	|      movea.l 40(sp),a0
   1522e:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   15232:	|      move.l 1c80c <mouseCursorFrameNum>,d0
   15238:	|      movea.l 40(sp),a0
   1523c:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15240:	|      jsr ac76 <makeNullAnim>
   15246:	|      move.l d0,1c808 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1524c:	|      clr.l 1c80c <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15252:	|      move.l 1c962 <zBuffer>,d0
   15258:	|      movea.l 40(sp),a0
   1525c:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15260:	|      clr.l 1c962 <zBuffer>

	newFreezer -> speech = speech;
   15266:	|      move.l 1c95e <speech>,d0
   1526c:	|      movea.l 40(sp),a0
   15270:	|      move.l d0,20(a0)
	initSpeech ();
   15274:	|      jsr 7da4 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1527a:	|      move.l 1c27a <currentEvents>,d0
   15280:	|      movea.l 40(sp),a0
   15284:	|      move.l d0,28(a0)
	currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15288:	|      moveq #28,d0
   1528a:	|      move.l d0,12(sp)
   1528e:	|      clr.l 8(sp)
   15292:	|      move.l 1c902 <SysBase>,d0
   15298:	|      movea.l d0,a6
   1529a:	|      move.l 12(sp),d0
   1529e:	|      move.l 8(sp),d1
   152a2:	|      jsr -684(a6)
   152a6:	|      move.l d0,4(sp)
   152aa:	|      move.l 4(sp),d0
   152ae:	|      move.l d0,1c27a <currentEvents>
	if (!currentEvents) return FALSE;
   152b4:	|      move.l 1c27a <currentEvents>,d0
   152ba:	|  /-- bne.s 152c0 <freeze+0x1a8>
   152bc:	|  |   clr.w d0
   152be:	+--|-- bra.s 152f0 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   152c0:	|  \-> move.l 1c27a <currentEvents>,d0
   152c6:	|      pea 1c <_start+0x1c>
   152ca:	|      clr.l -(sp)
   152cc:	|      move.l d0,-(sp)
   152ce:	|      jsr 17138 <memset>
   152d4:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   152d8:	|      move.l 1c9f6 <frozenStuff>,d0
   152de:	|      movea.l 40(sp),a0
   152e2:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   152e6:	|      move.l 40(sp),1c9f6 <frozenStuff>

	return TRUE;
   152ee:	|      moveq #1,d0
}
   152f0:	\----> movea.l (sp)+,a6
   152f2:	       lea 52(sp),sp
   152f6:	       rts

000152f8 <howFrozen>:

int howFrozen () {
   152f8:	       subq.l #8,sp
	int a = 0;
   152fa:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   152fe:	       move.l 1c9f6 <frozenStuff>,(sp)
	while (f) {
   15304:	   /-- bra.s 15310 <howFrozen+0x18>
		a ++;
   15306:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   1530a:	|  |   movea.l (sp),a0
   1530c:	|  |   move.l 64(a0),(sp)
	while (f) {
   15310:	|  \-> tst.l (sp)
   15312:	\----- bne.s 15306 <howFrozen+0xe>
	}
	return a;
   15314:	       move.l 4(sp),d0
}
   15318:	       addq.l #8,sp
   1531a:	       rts

0001531c <unfreeze>:

void unfreeze () {
   1531c:	       lea -16(sp),sp
   15320:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15322:	       move.l 1c9f6 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1532a:	       move.l 1c9f6 <frozenStuff>,d0
   15330:	/----- beq.w 15568 <unfreeze+0x24c>

	CstUnfreeze();
   15334:	|      jsr 3bf0 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1533a:	|      movea.l 1c9f6 <frozenStuff>,a0
   15340:	|      move.l 48(a0),d0
   15344:	|      move.l d0,1c99e <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1534a:	|      movea.l 1c9f6 <frozenStuff>,a0
   15350:	|      move.l 52(a0),d0
   15354:	|      move.l d0,1c9a2 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1535a:	|      movea.l 1c9f6 <frozenStuff>,a0
   15360:	|      move.l 40(a0),d0
   15364:	|      move.l d0,1c9bc <cameraX>
	cameraY = frozenStuff -> cameraY;
   1536a:	|      movea.l 1c9f6 <frozenStuff>,a0
   15370:	|      move.l 44(a0),d0
   15374:	|      move.l d0,1c9c0 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1537a:	|      move.l 1c8be <input+0xa>,d0
   15380:	|      move.l d0,-(sp)
   15382:	|      jsr 175e6 <__floatsisf>
   15388:	|      addq.l #4,sp
   1538a:	|      move.l d0,d1
   1538c:	|      move.l 1c2a0 <cameraZoom>,d0
   15392:	|      move.l d0,-(sp)
   15394:	|      move.l d1,-(sp)
   15396:	|      jsr 17698 <__mulsf3>
   1539c:	|      addq.l #8,sp
   1539e:	|      move.l d0,-(sp)
   153a0:	|      jsr 1757e <__fixsfsi>
   153a6:	|      addq.l #4,sp
   153a8:	|      move.l d0,1c8be <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   153ae:	|      move.l 1c8c2 <input+0xe>,d0
   153b4:	|      move.l d0,-(sp)
   153b6:	|      jsr 175e6 <__floatsisf>
   153bc:	|      addq.l #4,sp
   153be:	|      move.l d0,d1
   153c0:	|      move.l 1c2a0 <cameraZoom>,d0
   153c6:	|      move.l d0,-(sp)
   153c8:	|      move.l d1,-(sp)
   153ca:	|      jsr 17698 <__mulsf3>
   153d0:	|      addq.l #8,sp
   153d2:	|      move.l d0,-(sp)
   153d4:	|      jsr 1757e <__fixsfsi>
   153da:	|      addq.l #4,sp
   153dc:	|      move.l d0,1c8c2 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   153e2:	|      movea.l 1c9f6 <frozenStuff>,a0
   153e8:	|      move.l 56(a0),d0
   153ec:	|      move.l d0,1c2a0 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   153f2:	|      move.l 1c8be <input+0xa>,d0
   153f8:	|      move.l d0,-(sp)
   153fa:	|      jsr 175e6 <__floatsisf>
   15400:	|      addq.l #4,sp
   15402:	|      move.l d0,d1
   15404:	|      move.l 1c2a0 <cameraZoom>,d0
   1540a:	|      move.l d0,-(sp)
   1540c:	|      move.l d1,-(sp)
   1540e:	|      jsr 1749c <__divsf3>
   15414:	|      addq.l #8,sp
   15416:	|      move.l d0,-(sp)
   15418:	|      jsr 1757e <__fixsfsi>
   1541e:	|      addq.l #4,sp
   15420:	|      move.l d0,1c8be <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15426:	|      move.l 1c8c2 <input+0xe>,d0
   1542c:	|      move.l d0,-(sp)
   1542e:	|      jsr 175e6 <__floatsisf>
   15434:	|      addq.l #4,sp
   15436:	|      move.l d0,d1
   15438:	|      move.l 1c2a0 <cameraZoom>,d0
   1543e:	|      move.l d0,-(sp)
   15440:	|      move.l d1,-(sp)
   15442:	|      jsr 1749c <__divsf3>
   15448:	|      addq.l #8,sp
   1544a:	|      move.l d0,-(sp)
   1544c:	|      jsr 1757e <__fixsfsi>
   15452:	|      addq.l #4,sp
   15454:	|      move.l d0,1c8c2 <input+0xe>

	killAllPeople ();
   1545a:	|      jsr a97e <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15460:	|      movea.l 1c9f6 <frozenStuff>,a0
   15466:	|      move.l (a0),d0
   15468:	|      move.l d0,1c966 <allPeople>

	killAllRegions ();
   1546e:	|      jsr 159c4 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15474:	|      movea.l 1c9f6 <frozenStuff>,a0
   1547a:	|      move.l 4(a0),d0
   1547e:	|      move.l d0,1ca12 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15484:	|      move.l 1c808 <mouseCursorAnim>,d0
   1548a:	|      move.l d0,-(sp)
   1548c:	|      jsr 9872 <deleteAnim>
   15492:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15494:	|      movea.l 1c9f6 <frozenStuff>,a0
   1549a:	|      move.l 32(a0),d0
   1549e:	|      move.l d0,1c808 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   154a4:	|      movea.l 1c9f6 <frozenStuff>,a0
   154aa:	|      move.l 36(a0),d0
   154ae:	|      move.l d0,1c80c <mouseCursorFrameNum>

	killZBuffer ();
   154b4:	|      jsr 8618 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   154ba:	|      movea.l 1c9f6 <frozenStuff>,a0
   154c0:	|      move.l 60(a0),d0
   154c4:	|      move.l d0,1c962 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   154ca:	|      move.l 1c27a <currentEvents>,d0
   154d0:	|  /-- beq.s 154ea <unfreeze+0x1ce>
   154d2:	|  |   move.l 1c27a <currentEvents>,12(sp)
   154da:	|  |   move.l 1c902 <SysBase>,d0
   154e0:	|  |   movea.l d0,a6
   154e2:	|  |   movea.l 12(sp),a1
   154e6:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   154ea:	|  \-> movea.l 1c9f6 <frozenStuff>,a0
   154f0:	|      move.l 28(a0),d0
   154f4:	|      move.l d0,1c27a <currentEvents>

	killAllSpeech ();
   154fa:	|      jsr 7e3c <killAllSpeech>
	if (speech) FreeVec(speech);
   15500:	|      move.l 1c95e <speech>,d0
   15506:	|  /-- beq.s 15520 <unfreeze+0x204>
   15508:	|  |   move.l 1c95e <speech>,8(sp)
   15510:	|  |   move.l 1c902 <SysBase>,d0
   15516:	|  |   movea.l d0,a6
   15518:	|  |   movea.l 8(sp),a1
   1551c:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15520:	|  \-> movea.l 1c9f6 <frozenStuff>,a0
   15526:	|      move.l 20(a0),d0
   1552a:	|      move.l d0,1c95e <speech>

	frozenStuff = frozenStuff -> next;
   15530:	|      movea.l 1c9f6 <frozenStuff>,a0
   15536:	|      move.l 64(a0),d0
   1553a:	|      move.l d0,1c9f6 <frozenStuff>

	overRegion = NULL;
   15540:	|      clr.l 1ca16 <overRegion>
	if (killMe) FreeVec(killMe);
   15546:	|      tst.l 16(sp)
   1554a:	|  /-- beq.s 15562 <unfreeze+0x246>
   1554c:	|  |   move.l 16(sp),4(sp)
   15552:	|  |   move.l 1c902 <SysBase>,d0
   15558:	|  |   movea.l d0,a6
   1555a:	|  |   movea.l 4(sp),a1
   1555e:	|  |   jsr -690(a6)
	killMe = NULL;
   15562:	|  \-> clr.l 16(sp)
   15566:	|  /-- bra.s 1556a <unfreeze+0x24e>
	if (! frozenStuff) return;
   15568:	\--|-> nop
}
   1556a:	   \-> movea.l (sp)+,a6
   1556c:	       lea 16(sp),sp
   15570:	       rts

00015572 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15572:	pea 19f6b <graphics.c.1c13408a+0x34d>
   15578:	jsr 171b4 <KPrintF>
   1557e:	addq.l #4,sp
	return FALSE;
   15580:	clr.w d0
}
   15582:	rts

00015584 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15584:	          lea -32(sp),sp
   15588:	          move.l a6,-(sp)
   1558a:	          move.l d2,-(sp)
	unsigned int a = 0;
   1558c:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15590:	          move.l 1ca02 <fontOrderString>,d0
   15596:	      /-- beq.s 155b0 <loadFont+0x2c>
   15598:	      |   move.l 1ca02 <fontOrderString>,24(sp)
   155a0:	      |   move.l 1c902 <SysBase>,d0
   155a6:	      |   movea.l d0,a6
   155a8:	      |   movea.l 24(sp),a1
   155ac:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   155b0:	      \-> move.l 48(sp),-(sp)
   155b4:	          jsr b8 <copyString>
   155ba:	          addq.l #4,sp
   155bc:	          move.l d0,1ca02 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   155c2:	          move.l 1ca0e <theFont>,d0
   155c8:	      /-- beq.s 155da <loadFont+0x56>
   155ca:	      |   move.l 1ca0e <theFont>,d0
   155d0:	      |   move.l d0,-(sp)
   155d2:	      |   jsr 8956 <forgetSpriteBank>
   155d8:	      |   addq.l #4,sp
	theFont = NULL;
   155da:	      \-> clr.l 1ca0e <theFont>

	loadedFontNum = filenum;
   155e0:	          move.l 44(sp),1c9fe <loadedFontNum>

	fontTableSize = 0;
   155e8:	          clr.l 1ca0a <fontTableSize>
	char *tmp = charOrder;
   155ee:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   155f4:	   /----- bra.s 15630 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   155f6:	/--|----> movea.l 32(sp),a0
   155fa:	|  |      move.b (a0),d0
   155fc:	|  |      ext.w d0
   155fe:	|  |      movea.w d0,a0
   15600:	|  |      move.l 1ca0a <fontTableSize>,d0
   15606:	|  |      move.l d0,d0
   15608:	|  |      move.b d0,d0
   1560a:	|  |      andi.l #255,d0
   15610:	|  |      cmp.l a0,d0
   15612:	|  |  /-- bge.s 15624 <loadFont+0xa0>
   15614:	|  |  |   movea.l 32(sp),a0
   15618:	|  |  |   move.b (a0),d0
   1561a:	|  |  |   ext.w d0
   1561c:	|  |  |   movea.w d0,a0
   1561e:	|  |  |   move.l a0,1ca0a <fontTableSize>
		*tmp++;
   15624:	|  |  \-> move.l 32(sp),d0
   15628:	|  |      move.l d0,d1
   1562a:	|  |      addq.l #1,d1
   1562c:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15630:	|  \----> movea.l 32(sp),a0
   15634:	|         move.b (a0),d0
   15636:	\-------- bne.s 155f6 <loadFont+0x72>
	}
	fontTableSize++;
   15638:	          move.l 1ca0a <fontTableSize>,d0
   1563e:	          addq.l #1,d0
   15640:	          move.l d0,1ca0a <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15646:	          move.l 1ca06 <fontTable>,d0
   1564c:	      /-- beq.s 15666 <loadFont+0xe2>
   1564e:	      |   move.l 1ca06 <fontTable>,20(sp)
   15656:	      |   move.l 1c902 <SysBase>,d0
   1565c:	      |   movea.l d0,a6
   1565e:	      |   movea.l 20(sp),a1
   15662:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15666:	      \-> move.l 1ca0a <fontTableSize>,d0
   1566c:	          add.l d0,d0
   1566e:	          add.l d0,d0
   15670:	          move.l d0,16(sp)
   15674:	          clr.l 12(sp)
   15678:	          move.l 1c902 <SysBase>,d0
   1567e:	          movea.l d0,a6
   15680:	          move.l 16(sp),d0
   15684:	          move.l 12(sp),d1
   15688:	          jsr -684(a6)
   1568c:	          move.l d0,8(sp)
   15690:	          move.l 8(sp),d0
   15694:	          move.l d0,1ca06 <fontTable>
	if (!fontTable) return FALSE;
   1569a:	          move.l 1ca06 <fontTable>,d0
   156a0:	      /-- bne.s 156a8 <loadFont+0x124>
   156a2:	      |   clr.w d0
   156a4:	/-----|-- bra.w 1574e <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   156a8:	|     \-> clr.l 36(sp)
   156ac:	|     /-- bra.s 156c6 <loadFont+0x142>
		fontTable[a] = 0;
   156ae:	|  /--|-> move.l 1ca06 <fontTable>,d1
   156b4:	|  |  |   move.l 36(sp),d0
   156b8:	|  |  |   add.l d0,d0
   156ba:	|  |  |   add.l d0,d0
   156bc:	|  |  |   movea.l d1,a0
   156be:	|  |  |   adda.l d0,a0
   156c0:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   156c2:	|  |  |   addq.l #1,36(sp)
   156c6:	|  |  \-> move.l 1ca0a <fontTableSize>,d0
   156cc:	|  |      cmp.l 36(sp),d0
   156d0:	|  \----- bhi.s 156ae <loadFont+0x12a>
	}
	a = 0;
   156d2:	|         clr.l 36(sp)
	int i = 0;
   156d6:	|         clr.l 28(sp)
	tmp = charOrder;
   156da:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   156e0:	|     /-- bra.s 15710 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   156e2:	|  /--|-> move.l 1ca06 <fontTable>,d1
   156e8:	|  |  |   move.l 32(sp),d0
   156ec:	|  |  |   move.l d0,d2
   156ee:	|  |  |   addq.l #1,d2
   156f0:	|  |  |   move.l d2,32(sp)
   156f4:	|  |  |   movea.l d0,a0
   156f6:	|  |  |   move.b (a0),d0
   156f8:	|  |  |   ext.w d0
   156fa:	|  |  |   movea.w d0,a0
   156fc:	|  |  |   move.l a0,d0
   156fe:	|  |  |   add.l a0,d0
   15700:	|  |  |   add.l d0,d0
   15702:	|  |  |   movea.l d1,a0
   15704:	|  |  |   adda.l d0,a0
   15706:	|  |  |   move.l 28(sp),d0
   1570a:	|  |  |   move.l d0,(a0)
		i++;
   1570c:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15710:	|  |  \-> movea.l 32(sp),a0
   15714:	|  |      move.b (a0),d0
   15716:	|  \----- bne.s 156e2 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15718:	|         move.l 44(sp),-(sp)
   1571c:	|         jsr 15ed6 <loadBankForAnim>
   15722:	|         addq.l #4,sp
   15724:	|         move.l d0,1ca0e <theFont>
	if (!theFont) {
   1572a:	|         move.l 1ca0e <theFont>,d0
   15730:	|     /-- bne.s 15744 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15732:	|     |   pea 19f92 <graphics.c.1c13408a+0x374>
   15738:	|     |   jsr 171b4 <KPrintF>
   1573e:	|     |   addq.l #4,sp
		return FALSE;
   15740:	|     |   clr.w d0
   15742:	+-----|-- bra.s 1574e <loadFont+0x1ca>
	}
	fontHeight = h;
   15744:	|     \-> move.l 52(sp),1c9fa <fontHeight>
	return TRUE;
   1574c:	|         moveq #1,d0
}
   1574e:	\-------> move.l (sp)+,d2
   15750:	          movea.l (sp)+,a6
   15752:	          lea 32(sp),sp
   15756:	          rts

00015758 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15758:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1575c:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15760:	                move.l 1ca0a <fontTableSize>,d0
   15766:	/-------------- beq.w 1582e <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1576a:	|               move.w 1c806 <fontSpace>,d0
   15770:	|               asr.w #1,d0
   15772:	|               ext.l d0
   15774:	|               add.l d0,20(sp)
	char *tmp = theText;
   15778:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1577e:	|     /-------- bra.w 15822 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15782:	|  /--|-------> movea.l 1ca0e <theFont>,a0
   15788:	|  |  |         movea.l 16(a0),a0
   1578c:	|  |  |         movea.l 8(sp),a1
   15790:	|  |  |         move.b (a1),d0
   15792:	|  |  |         move.b d0,d0
   15794:	|  |  |         andi.l #255,d0
   1579a:	|  |  |         move.l 1ca0a <fontTableSize>,d1
   157a0:	|  |  |         cmp.l d0,d1
   157a2:	|  |  |  /----- bls.s 157ce <pasteStringToBackdrop+0x76>
   157a4:	|  |  |  |      move.l 1ca06 <fontTable>,d1
   157aa:	|  |  |  |      movea.l 8(sp),a1
   157ae:	|  |  |  |      move.b (a1),d0
   157b0:	|  |  |  |      move.b d0,d0
   157b2:	|  |  |  |      andi.l #255,d0
   157b8:	|  |  |  |      add.l d0,d0
   157ba:	|  |  |  |      add.l d0,d0
   157bc:	|  |  |  |      movea.l d1,a1
   157be:	|  |  |  |      adda.l d0,a1
   157c0:	|  |  |  |      move.l (a1),d1
   157c2:	|  |  |  |      move.l d1,d0
   157c4:	|  |  |  |      lsl.l #3,d0
   157c6:	|  |  |  |      sub.l d1,d0
   157c8:	|  |  |  |      add.l d0,d0
   157ca:	|  |  |  |      add.l d0,d0
   157cc:	|  |  |  |  /-- bra.s 157d0 <pasteStringToBackdrop+0x78>
   157ce:	|  |  |  \--|-> moveq #0,d0
   157d0:	|  |  |     \-> adda.l d0,a0
   157d2:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   157d4:	|  |  |         move.l 24(sp),d1
   157d8:	|  |  |         movea.l (sp),a0
   157da:	|  |  |         move.l 12(a0),d0
   157de:	|  |  |         move.l d0,d0
   157e0:	|  |  |         sub.w d0,d1
   157e2:	|  |  |         move.w d1,d0
   157e4:	|  |  |         movea.w d0,a1
   157e6:	|  |  |         move.l 20(sp),d1
   157ea:	|  |  |         movea.l (sp),a0
   157ec:	|  |  |         move.l 8(a0),d0
   157f0:	|  |  |         move.l d0,d0
   157f2:	|  |  |         sub.w d0,d1
   157f4:	|  |  |         move.w d1,d0
   157f6:	|  |  |         movea.w d0,a0
   157f8:	|  |  |         move.l a1,-(sp)
   157fa:	|  |  |         move.l a0,-(sp)
   157fc:	|  |  |         move.l 8(sp),-(sp)
   15800:	|  |  |         jsr 23de <CstPasteChar>
   15806:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1580a:	|  |  |         movea.l (sp),a0
   1580c:	|  |  |         move.l (a0),d1
   1580e:	|  |  |         move.w 1c806 <fontSpace>,d0
   15814:	|  |  |         movea.w d0,a0
   15816:	|  |  |         move.l d1,d0
   15818:	|  |  |         add.l a0,d0
   1581a:	|  |  |         add.l d0,20(sp)
		tmp++;
   1581e:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15822:	|  |  \-------> movea.l 8(sp),a0
   15826:	|  |            move.b (a0),d0
   15828:	|  \----------- bne.w 15782 <pasteStringToBackdrop+0x2a>
   1582c:	|           /-- bra.s 15830 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   1582e:	\-----------|-> nop
    }
}
   15830:	            \-> lea 12(sp),sp
   15834:	                rts

00015836 <stringWidth>:


int stringWidth (char * theText) {
   15836:	       subq.l #8,sp
	int a = 0;
   15838:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1583c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1583e:	       move.l 1ca0a <fontTableSize>,d0
   15844:	/----- bne.s 1584a <stringWidth+0x14>
   15846:	|      moveq #0,d0
   15848:	|  /-- bra.s 1584c <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1584a:	\--|-> move.l (sp),d0
}
   1584c:	   \-> addq.l #8,sp
   1584e:	       rts

00015850 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15850:	       lea -16(sp),sp
   15854:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15856:	       moveq #36,d0
   15858:	       move.l d0,16(sp)
   1585c:	       clr.l 12(sp)
   15860:	       move.l 1c902 <SysBase>,d0
   15866:	       movea.l d0,a6
   15868:	       move.l 16(sp),d0
   1586c:	       move.l 12(sp),d1
   15870:	       jsr -684(a6)
   15874:	       move.l d0,8(sp)
   15878:	       move.l 8(sp),d0
   1587c:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15880:	   /-- bne.s 15888 <addScreenRegion+0x38>
   15882:	   |   clr.w d0
   15884:	/--|-- bra.w 15908 <addScreenRegion+0xb8>
    newRegion->di = di;
   15888:	|  \-> movea.l 4(sp),a0
   1588c:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15892:	|      movea.l 4(sp),a0
   15896:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1589a:	|      movea.l 4(sp),a0
   1589e:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   158a4:	|      movea.l 4(sp),a0
   158a8:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   158ae:	|      movea.l 4(sp),a0
   158b2:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   158b8:	|      movea.l 4(sp),a0
   158bc:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   158c2:	|      movea.l 4(sp),a0
   158c6:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   158cc:	|      move.l 52(sp),-(sp)
   158d0:	|      jsr d586 <loadObjectType>
   158d6:	|      addq.l #4,sp
   158d8:	|      movea.l 4(sp),a0
   158dc:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   158e0:	|      move.l 1ca12 <allScreenRegions>,d0
   158e6:	|      movea.l 4(sp),a0
   158ea:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   158ee:	|      move.l 4(sp),1ca12 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   158f6:	|      movea.l 4(sp),a0
   158fa:	|      move.l 28(a0),d0
   158fe:	|      sne d0
   15900:	|      neg.b d0
   15902:	|      move.b d0,d0
   15904:	|      andi.w #255,d0
}
   15908:	\----> movea.l (sp)+,a6
   1590a:	       lea 16(sp),sp
   1590e:	       rts

00015910 <getOverRegion>:

void getOverRegion () {
   15910:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15912:	             move.l 1ca12 <allScreenRegions>,(sp)
	while (thisRegion) {
   15918:	   /-------- bra.s 15986 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1591a:	/--|-------> move.l 1c8be <input+0xa>,d0
   15920:	|  |         movea.l (sp),a0
   15922:	|  |         movea.l (a0),a0
   15924:	|  |         move.l 1c9bc <cameraX>,d1
   1592a:	|  |         suba.l d1,a0
   1592c:	|  |         cmpa.l d0,a0
   1592e:	|  |  /----- bgt.s 15980 <getOverRegion+0x70>
   15930:	|  |  |      move.l 1c8c2 <input+0xe>,d0
   15936:	|  |  |      movea.l (sp),a0
   15938:	|  |  |      movea.l 4(a0),a0
   1593c:	|  |  |      move.l 1c9c0 <cameraY>,d1
   15942:	|  |  |      suba.l d1,a0
   15944:	|  |  |      cmpa.l d0,a0
   15946:	|  |  +----- bgt.s 15980 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15948:	|  |  |      move.l 1c8be <input+0xa>,d0
   1594e:	|  |  |      movea.l (sp),a0
   15950:	|  |  |      movea.l 8(a0),a0
   15954:	|  |  |      move.l 1c9bc <cameraX>,d1
   1595a:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1595c:	|  |  |      cmpa.l d0,a0
   1595e:	|  |  +----- blt.s 15980 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15960:	|  |  |      move.l 1c8c2 <input+0xe>,d0
   15966:	|  |  |      movea.l (sp),a0
   15968:	|  |  |      movea.l 12(a0),a0
   1596c:	|  |  |      move.l 1c9c0 <cameraY>,d1
   15972:	|  |  |      suba.l d1,a0
   15974:	|  |  |      cmpa.l d0,a0
   15976:	|  |  +----- blt.s 15980 <getOverRegion+0x70>
			overRegion = thisRegion;
   15978:	|  |  |      move.l (sp),1ca16 <overRegion>
			return;
   1597e:	|  |  |  /-- bra.s 15992 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15980:	|  |  \--|-> movea.l (sp),a0
   15982:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15986:	|  \-----|-> tst.l (sp)
   15988:	\--------|-- bne.s 1591a <getOverRegion+0xa>
	}
	overRegion = NULL;
   1598a:	         |   clr.l 1ca16 <overRegion>
	return;
   15990:	         |   nop
}
   15992:	         \-> addq.l #4,sp
   15994:	             rts

00015996 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15996:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15998:	             move.l 1ca12 <allScreenRegions>,(sp)

	while (thisRegion) {
   1599e:	   /-------- bra.s 159ba <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   159a0:	/--|-------> movea.l (sp),a0
   159a2:	|  |         movea.l 28(a0),a0
   159a6:	|  |         move.l 4(a0),d0
   159aa:	|  |         cmp.l 8(sp),d0
   159ae:	|  |     /-- bne.s 159b4 <getRegionForObject+0x1e>
			return thisRegion;
   159b0:	|  |     |   move.l (sp),d0
   159b2:	|  |  /--|-- bra.s 159c0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   159b4:	|  |  |  \-> movea.l (sp),a0
   159b6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   159ba:	|  \--|----> tst.l (sp)
   159bc:	\-----|----- bne.s 159a0 <getRegionForObject+0xa>
	}

	return NULL;
   159be:	      |      moveq #0,d0
}
   159c0:	      \----> addq.l #4,sp
   159c2:	             rts

000159c4 <killAllRegions>:

void killAllRegions () {
   159c4:	       subq.l #8,sp
   159c6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   159c8:	   /-- bra.s 15a0a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   159ca:	/--|-> move.l 1ca12 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   159d2:	|  |   movea.l 1ca12 <allScreenRegions>,a0
   159d8:	|  |   move.l 32(a0),d0
   159dc:	|  |   move.l d0,1ca12 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   159e2:	|  |   movea.l 8(sp),a0
   159e6:	|  |   move.l 28(a0),d0
   159ea:	|  |   move.l d0,-(sp)
   159ec:	|  |   jsr d83e <removeObjectType>
   159f2:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   159f4:	|  |   move.l 8(sp),4(sp)
   159fa:	|  |   move.l 1c902 <SysBase>,d0
   15a00:	|  |   movea.l d0,a6
   15a02:	|  |   movea.l 4(sp),a1
   15a06:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15a0a:	|  \-> move.l 1ca12 <allScreenRegions>,d0
   15a10:	\----- bne.s 159ca <killAllRegions+0x6>
	}
	overRegion = NULL;
   15a12:	       clr.l 1ca16 <overRegion>
}
   15a18:	       nop
   15a1a:	       movea.l (sp)+,a6
   15a1c:	       addq.l #8,sp
   15a1e:	       rts

00015a20 <loadRegions>:

void loadRegions (BPTR fp) {
   15a20:	       lea -24(sp),sp
   15a24:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15a26:	       move.l 32(sp),-(sp)
   15a2a:	       jsr 6bc <get2bytes>
   15a30:	       addq.l #4,sp
   15a32:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15a36:	       move.l #117266,20(sp)

	while (numRegions --) {
   15a3e:	   /-- bra.w 15b1c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15a42:	/--|-> moveq #36,d0
   15a44:	|  |   move.l d0,16(sp)
   15a48:	|  |   clr.l 12(sp)
   15a4c:	|  |   move.l 1c902 <SysBase>,d0
   15a52:	|  |   movea.l d0,a6
   15a54:	|  |   move.l 16(sp),d0
   15a58:	|  |   move.l 12(sp),d1
   15a5c:	|  |   jsr -684(a6)
   15a60:	|  |   move.l d0,8(sp)
   15a64:	|  |   move.l 8(sp),d0
   15a68:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15a6c:	|  |   movea.l 20(sp),a0
   15a70:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15a74:	|  |   moveq #32,d1
   15a76:	|  |   add.l 4(sp),d1
   15a7a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15a7e:	|  |   move.l 32(sp),-(sp)
   15a82:	|  |   jsr 6bc <get2bytes>
   15a88:	|  |   addq.l #4,sp
   15a8a:	|  |   movea.l 4(sp),a0
   15a8e:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15a90:	|  |   move.l 32(sp),-(sp)
   15a94:	|  |   jsr 6bc <get2bytes>
   15a9a:	|  |   addq.l #4,sp
   15a9c:	|  |   movea.l 4(sp),a0
   15aa0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15aa4:	|  |   move.l 32(sp),-(sp)
   15aa8:	|  |   jsr 6bc <get2bytes>
   15aae:	|  |   addq.l #4,sp
   15ab0:	|  |   movea.l 4(sp),a0
   15ab4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15ab8:	|  |   move.l 32(sp),-(sp)
   15abc:	|  |   jsr 6bc <get2bytes>
   15ac2:	|  |   addq.l #4,sp
   15ac4:	|  |   movea.l 4(sp),a0
   15ac8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15acc:	|  |   move.l 32(sp),-(sp)
   15ad0:	|  |   jsr 6bc <get2bytes>
   15ad6:	|  |   addq.l #4,sp
   15ad8:	|  |   movea.l 4(sp),a0
   15adc:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15ae0:	|  |   move.l 32(sp),-(sp)
   15ae4:	|  |   jsr 6bc <get2bytes>
   15aea:	|  |   addq.l #4,sp
   15aec:	|  |   movea.l 4(sp),a0
   15af0:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15af4:	|  |   move.l 32(sp),-(sp)
   15af8:	|  |   jsr 6bc <get2bytes>
   15afe:	|  |   addq.l #4,sp
   15b00:	|  |   movea.l 4(sp),a0
   15b04:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15b08:	|  |   move.l 32(sp),-(sp)
   15b0c:	|  |   jsr d534 <loadObjectRef>
   15b12:	|  |   addq.l #4,sp
   15b14:	|  |   movea.l 4(sp),a0
   15b18:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15b1c:	|  \-> move.l 24(sp),d0
   15b20:	|      move.l d0,d1
   15b22:	|      subq.l #1,d1
   15b24:	|      move.l d1,24(sp)
   15b28:	|      tst.l d0
   15b2a:	\----- bne.w 15a42 <loadRegions+0x22>
	}
	* pointy = NULL;
   15b2e:	       movea.l 20(sp),a0
   15b32:	       clr.l (a0)
}
   15b34:	       nop
   15b36:	       movea.l (sp)+,a6
   15b38:	       lea 24(sp),sp
   15b3c:	       rts

00015b3e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15b3e:	             lea -12(sp),sp
   15b42:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15b44:	             move.l #117266,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15b4c:	   /-------- bra.s 15bc6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15b4e:	/--|-------> movea.l 12(sp),a0
   15b52:	|  |         movea.l (a0),a0
   15b54:	|  |         movea.l 28(a0),a0
   15b58:	|  |         move.l 4(a0),d0
   15b5c:	|  |         cmp.l 20(sp),d0
   15b60:	|  |  /----- bne.s 15bb8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15b62:	|  |  |      movea.l 12(sp),a0
   15b66:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15b6a:	|  |  |      movea.l 8(sp),a0
   15b6e:	|  |  |      move.l 32(a0),d0
   15b72:	|  |  |      movea.l 12(sp),a0
   15b76:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15b78:	|  |  |      movea.l 8(sp),a0
   15b7c:	|  |  |      move.l 28(a0),d0
   15b80:	|  |  |      move.l d0,-(sp)
   15b82:	|  |  |      jsr d83e <removeObjectType>
   15b88:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15b8a:	|  |  |      move.l 1ca16 <overRegion>,d0
   15b90:	|  |  |      cmp.l 8(sp),d0
   15b94:	|  |  |  /-- bne.s 15b9c <removeScreenRegion+0x5e>
   15b96:	|  |  |  |   clr.l 1ca16 <overRegion>
            FreeVec(killMe);
   15b9c:	|  |  |  \-> move.l 8(sp),4(sp)
   15ba2:	|  |  |      move.l 1c902 <SysBase>,d0
   15ba8:	|  |  |      movea.l d0,a6
   15baa:	|  |  |      movea.l 4(sp),a1
   15bae:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15bb2:	|  |  |      clr.l 8(sp)
   15bb6:	|  +--|----- bra.s 15bc6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15bb8:	|  |  \----> movea.l 12(sp),a0
   15bbc:	|  |         move.l (a0),d0
   15bbe:	|  |         moveq #32,d1
   15bc0:	|  |         add.l d0,d1
   15bc2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15bc6:	|  \-------> movea.l 12(sp),a0
   15bca:	|            move.l (a0),d0
   15bcc:	\----------- bne.s 15b4e <removeScreenRegion+0x10>
        }
    }
}
   15bce:	             nop
   15bd0:	             nop
   15bd2:	             movea.l (sp)+,a6
   15bd4:	             lea 12(sp),sp
   15bd8:	             rts

00015bda <saveRegions>:

void saveRegions (BPTR fp) {
   15bda:	       subq.l #8,sp
	int numRegions = 0;
   15bdc:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15be0:	       move.l 1ca12 <allScreenRegions>,(sp)
	while (thisRegion) {
   15be6:	   /-- bra.s 15bf2 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15be8:	/--|-> movea.l (sp),a0
   15bea:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15bee:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15bf2:	|  \-> tst.l (sp)
   15bf4:	\----- bne.s 15be8 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15bf6:	       move.l 12(sp),-(sp)
   15bfa:	       move.l 8(sp),-(sp)
   15bfe:	       jsr 8d0 <put2bytes>
   15c04:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15c06:	       move.l 1ca12 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c0c:	/----- bra.w 15cb4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15c10:	|  /-> movea.l (sp),a0
   15c12:	|  |   move.l (a0),d0
   15c14:	|  |   move.l 12(sp),-(sp)
   15c18:	|  |   move.l d0,-(sp)
   15c1a:	|  |   jsr 8d0 <put2bytes>
   15c20:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15c22:	|  |   movea.l (sp),a0
   15c24:	|  |   move.l 4(a0),d0
   15c28:	|  |   move.l 12(sp),-(sp)
   15c2c:	|  |   move.l d0,-(sp)
   15c2e:	|  |   jsr 8d0 <put2bytes>
   15c34:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15c36:	|  |   movea.l (sp),a0
   15c38:	|  |   move.l 8(a0),d0
   15c3c:	|  |   move.l 12(sp),-(sp)
   15c40:	|  |   move.l d0,-(sp)
   15c42:	|  |   jsr 8d0 <put2bytes>
   15c48:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15c4a:	|  |   movea.l (sp),a0
   15c4c:	|  |   move.l 12(a0),d0
   15c50:	|  |   move.l 12(sp),-(sp)
   15c54:	|  |   move.l d0,-(sp)
   15c56:	|  |   jsr 8d0 <put2bytes>
   15c5c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15c5e:	|  |   movea.l (sp),a0
   15c60:	|  |   move.l 16(a0),d0
   15c64:	|  |   move.l 12(sp),-(sp)
   15c68:	|  |   move.l d0,-(sp)
   15c6a:	|  |   jsr 8d0 <put2bytes>
   15c70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15c72:	|  |   movea.l (sp),a0
   15c74:	|  |   move.l 20(a0),d0
   15c78:	|  |   move.l 12(sp),-(sp)
   15c7c:	|  |   move.l d0,-(sp)
   15c7e:	|  |   jsr 8d0 <put2bytes>
   15c84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15c86:	|  |   movea.l (sp),a0
   15c88:	|  |   move.l 24(a0),d0
   15c8c:	|  |   move.l 12(sp),-(sp)
   15c90:	|  |   move.l d0,-(sp)
   15c92:	|  |   jsr 8d0 <put2bytes>
   15c98:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15c9a:	|  |   movea.l (sp),a0
   15c9c:	|  |   move.l 28(a0),d0
   15ca0:	|  |   move.l 12(sp),-(sp)
   15ca4:	|  |   move.l d0,-(sp)
   15ca6:	|  |   jsr d8de <saveObjectRef>
   15cac:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15cae:	|  |   movea.l (sp),a0
   15cb0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15cb4:	\--|-> tst.l (sp)
   15cb6:	   \-- bne.w 15c10 <saveRegions+0x36>
	}
}
   15cba:	       nop
   15cbc:	       nop
   15cbe:	       addq.l #8,sp
   15cc0:	       rts

00015cc2 <showBoxes>:

void showBoxes () {
   15cc2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15cc4:	       move.l 1ca12 <allScreenRegions>,(sp)

	while (huntRegion) {
   15cca:	/----- bra.w 15d66 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15cce:	|  /-> movea.l (sp),a0
   15cd0:	|  |   move.l 12(a0),d0
   15cd4:	|  |   movea.l d0,a1
   15cd6:	|  |   movea.l (sp),a0
   15cd8:	|  |   move.l 4(a0),d0
   15cdc:	|  |   move.l d0,d1
   15cde:	|  |   movea.l (sp),a0
   15ce0:	|  |   move.l (a0),d0
   15ce2:	|  |   move.l a1,-(sp)
   15ce4:	|  |   move.l d1,-(sp)
   15ce6:	|  |   move.l d0,-(sp)
   15ce8:	|  |   jsr d1c2 <drawVerticalLine>
   15cee:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15cf2:	|  |   movea.l (sp),a0
   15cf4:	|  |   move.l 12(a0),d0
   15cf8:	|  |   movea.l d0,a1
   15cfa:	|  |   movea.l (sp),a0
   15cfc:	|  |   move.l 4(a0),d0
   15d00:	|  |   move.l d0,d1
   15d02:	|  |   movea.l (sp),a0
   15d04:	|  |   move.l 8(a0),d0
   15d08:	|  |   move.l a1,-(sp)
   15d0a:	|  |   move.l d1,-(sp)
   15d0c:	|  |   move.l d0,-(sp)
   15d0e:	|  |   jsr d1c2 <drawVerticalLine>
   15d14:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15d18:	|  |   movea.l (sp),a0
   15d1a:	|  |   move.l 8(a0),d0
   15d1e:	|  |   movea.l d0,a1
   15d20:	|  |   movea.l (sp),a0
   15d22:	|  |   move.l 4(a0),d0
   15d26:	|  |   move.l d0,d1
   15d28:	|  |   movea.l (sp),a0
   15d2a:	|  |   move.l (a0),d0
   15d2c:	|  |   move.l a1,-(sp)
   15d2e:	|  |   move.l d1,-(sp)
   15d30:	|  |   move.l d0,-(sp)
   15d32:	|  |   jsr d19c <drawHorizontalLine>
   15d38:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15d3c:	|  |   movea.l (sp),a0
   15d3e:	|  |   move.l 8(a0),d0
   15d42:	|  |   movea.l d0,a1
   15d44:	|  |   movea.l (sp),a0
   15d46:	|  |   move.l 12(a0),d0
   15d4a:	|  |   move.l d0,d1
   15d4c:	|  |   movea.l (sp),a0
   15d4e:	|  |   move.l (a0),d0
   15d50:	|  |   move.l a1,-(sp)
   15d52:	|  |   move.l d1,-(sp)
   15d54:	|  |   move.l d0,-(sp)
   15d56:	|  |   jsr d19c <drawHorizontalLine>
   15d5c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15d60:	|  |   movea.l (sp),a0
   15d62:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15d66:	\--|-> tst.l (sp)
   15d68:	   \-- bne.w 15cce <showBoxes+0xc>
	}
   15d6c:	       nop
   15d6e:	       nop
   15d70:	       addq.l #4,sp
   15d72:	       rts

00015d74 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15d74:	       lea -88(sp),sp
   15d78:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15d7a:	       move.l 1c902 <SysBase>,d0
   15d80:	       movea.l d0,a6
   15d82:	       jsr -666(a6)
   15d86:	       move.l d0,88(sp)
   15d8a:	       move.l 88(sp),d0
   15d8e:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15d92:	       move.l 84(sp),80(sp)
   15d98:	       moveq #40,d0
   15d9a:	       move.l d0,76(sp)
   15d9e:	       move.l 1c902 <SysBase>,d0
   15da4:	       movea.l d0,a6
   15da6:	       movea.l 80(sp),a0
   15daa:	       move.l 76(sp),d0
   15dae:	       jsr -654(a6)
   15db2:	       move.l d0,72(sp)
   15db6:	       move.l 72(sp),d0
   15dba:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15dbe:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15dc4:	       move.l #106412,60(sp)
   15dcc:	       clr.l 56(sp)
   15dd0:	       move.l 64(sp),52(sp)
   15dd6:	       clr.l 48(sp)
   15dda:	       move.l 1c902 <SysBase>,d0
   15de0:	       movea.l d0,a6
   15de2:	       movea.l 60(sp),a0
   15de6:	       move.l 56(sp),d0
   15dea:	       movea.l 52(sp),a1
   15dee:	       move.l 48(sp),d1
   15df2:	       jsr -444(a6)
   15df6:	       move.b d0,47(sp)
   15dfa:	       move.b 47(sp),d0
   15dfe:	   /-- beq.s 15e14 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15e00:	   |   pea 19fb9 <graphics.c.1c13408a+0x39b>
   15e06:	   |   jsr 171b4 <KPrintF>
   15e0c:	   |   addq.l #4,sp
        return 0;
   15e0e:	   |   moveq #0,d0
   15e10:	/--|-- bra.w 15ece <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15e14:	|  \-> movea.l 64(sp),a0
   15e18:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15e1e:	|      lea 92(sp),a0
   15e22:	|      lea -86(a0),a0
   15e26:	|      move.l a0,38(sp)
   15e2a:	|      movea.l 42(sp),a6
   15e2e:	|      movea.l 38(sp),a0
   15e32:	|      jsr -60(a6)
   15e36:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15e3a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15e40:	|      move.l #1103515245,-(sp)
   15e46:	|      move.l 34(sp),-(sp)
   15e4a:	|      jsr 17b40 <__mulsi3>
   15e50:	|      addq.l #8,sp
   15e52:	|      addi.l #12345,d0
   15e58:	|      move.l d0,d1
   15e5a:	|      bclr #31,d1
   15e5e:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15e62:	|      move.l 30(sp),d0
   15e66:	|      pea 64 <_start+0x64>
   15e6a:	|      move.l d0,-(sp)
   15e6c:	|      jsr 17c1a <__umodsi3>
   15e72:	|      addq.l #8,sp
   15e74:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15e78:	|      move.l 26(sp),-(sp)
   15e7c:	|      pea 19fd6 <graphics.c.1c13408a+0x3b8>
   15e82:	|      jsr 171b4 <KPrintF>
   15e88:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15e8a:	|      move.l 64(sp),22(sp)
   15e90:	|      move.l 1c902 <SysBase>,d0
   15e96:	|      movea.l d0,a6
   15e98:	|      movea.l 22(sp),a1
   15e9c:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15ea0:	|      move.l 64(sp),18(sp)
   15ea6:	|      move.l 1c902 <SysBase>,d0
   15eac:	|      movea.l d0,a6
   15eae:	|      movea.l 18(sp),a0
   15eb2:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15eb6:	|      move.l 84(sp),14(sp)
   15ebc:	|      move.l 1c902 <SysBase>,d0
   15ec2:	|      movea.l d0,a6
   15ec4:	|      movea.l 14(sp),a0
   15ec8:	|      jsr -672(a6)
    return 0;
   15ecc:	|      moveq #0,d0
   15ece:	\----> movea.l (sp)+,a6
   15ed0:	       lea 88(sp),sp
   15ed4:	       rts

00015ed6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15ed6:	             lea -20(sp),sp
   15eda:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15edc:	             move.l 1ca1a <allLoadedBanks>,20(sp)
	while (returnMe) {
   15ee4:	      /----- bra.s 15f16 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15ee6:	   /--|----> movea.l 20(sp),a0
   15eea:	   |  |      move.l (a0),d0
   15eec:	   |  |      cmp.l 28(sp),d0
   15ef0:	   |  |  /-- bne.s 15f0c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15ef2:	   |  |  |   movea.l 20(sp),a0
   15ef6:	   |  |  |   move.l 4(a0),d0
   15efa:	   |  |  |   addq.l #1,d0
   15efc:	   |  |  |   movea.l 20(sp),a0
   15f00:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15f04:	   |  |  |   move.l 20(sp),d0
   15f08:	/--|--|--|-- bra.w 15fc6 <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   15f0c:	|  |  |  \-> movea.l 20(sp),a0
   15f10:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15f16:	|  |  \----> tst.l 20(sp)
   15f1a:	|  \-------- bne.s 15ee6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15f1c:	|            moveq #26,d0
   15f1e:	|            move.l d0,16(sp)
   15f22:	|            clr.l 12(sp)
   15f26:	|            move.l 1c902 <SysBase>,d0
   15f2c:	|            movea.l d0,a6
   15f2e:	|            move.l 16(sp),d0
   15f32:	|            move.l 12(sp),d1
   15f36:	|            jsr -684(a6)
   15f3a:	|            move.l d0,8(sp)
   15f3e:	|            move.l 8(sp),d0
   15f42:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15f46:	|     /----- beq.s 15fc4 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   15f48:	|     |      movea.l 20(sp),a0
   15f4c:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   15f50:	|     |      move.l 20(sp),d0
   15f54:	|     |      addq.l #8,d0
   15f56:	|     |      move.l d0,-(sp)
   15f58:	|     |      move.l 32(sp),-(sp)
   15f5c:	|     |      jsr 8a62 <loadSpriteBank>
   15f62:	|     |      addq.l #8,sp
   15f64:	|     |      tst.w d0
   15f66:	|     |  /-- beq.s 15f9c <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   15f68:	|     |  |   movea.l 20(sp),a0
   15f6c:	|     |  |   moveq #1,d0
   15f6e:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15f72:	|     |  |   move.l 1ca1a <allLoadedBanks>,d0
   15f78:	|     |  |   movea.l 20(sp),a0
   15f7c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15f80:	|     |  |   move.l 20(sp),1ca1a <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   15f88:	|     |  |   pea 19fe9 <graphics.c.1c13408a+0x3cb>
   15f8e:	|     |  |   jsr 171b4 <KPrintF>
   15f94:	|     |  |   addq.l #4,sp
			return returnMe;
   15f96:	|     |  |   move.l 20(sp),d0
   15f9a:	+-----|--|-- bra.s 15fc6 <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   15f9c:	|     |  \-> pea 1a016 <graphics.c.1c13408a+0x3f8>
   15fa2:	|     |      jsr 171b4 <KPrintF>
   15fa8:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   15faa:	|     |      move.l 20(sp),4(sp)
   15fb0:	|     |      move.l 1c902 <SysBase>,d0
   15fb6:	|     |      movea.l d0,a6
   15fb8:	|     |      movea.l 4(sp),a1
   15fbc:	|     |      jsr -690(a6)
			return NULL;
   15fc0:	|     |      moveq #0,d0
   15fc2:	+-----|----- bra.s 15fc6 <loadBankForAnim+0xf0>
		}
	} else return NULL;
   15fc4:	|     \----> moveq #0,d0
}
   15fc6:	\----------> movea.l (sp)+,a6
   15fc8:	             lea 20(sp),sp
   15fcc:	             rts

00015fce <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15fce:	       lea -60(sp),sp
   15fd2:	       move.l d3,-(sp)
   15fd4:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15fd6:	       move.l 88(sp),d0
   15fda:	       sub.l 80(sp),d0
   15fde:	       move.l d0,-(sp)
   15fe0:	       jsr 175a6 <__floatsidf>
   15fe6:	       addq.l #4,sp
   15fe8:	       move.l d0,32(sp)
   15fec:	       move.l d1,36(sp)
   15ff0:	       move.l 32(sp),60(sp)
   15ff6:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15ffc:	       move.l 92(sp),d0
   16000:	       sub.l 84(sp),d0
   16004:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16008:	       move.l 96(sp),d0
   1600c:	       sub.l 80(sp),d0
   16010:	       move.l d0,-(sp)
   16012:	       jsr 175a6 <__floatsidf>
   16018:	       addq.l #4,sp
   1601a:	       move.l 64(sp),-(sp)
   1601e:	       move.l 64(sp),-(sp)
   16022:	       move.l d1,-(sp)
   16024:	       move.l d0,-(sp)
   16026:	       jsr 17636 <__muldf3>
   1602c:	       lea 16(sp),sp
   16030:	       move.l d0,d2
   16032:	       move.l d1,d3
   16034:	       move.l 100(sp),d0
   16038:	       sub.l 84(sp),d0
   1603c:	       move.l 56(sp),-(sp)
   16040:	       move.l d0,-(sp)
   16042:	       jsr 17b40 <__mulsi3>
   16048:	       addq.l #8,sp
   1604a:	       move.l d0,-(sp)
   1604c:	       jsr 175a6 <__floatsidf>
   16052:	       addq.l #4,sp
   16054:	       move.l d1,-(sp)
   16056:	       move.l d0,-(sp)
   16058:	       move.l d3,-(sp)
   1605a:	       move.l d2,-(sp)
   1605c:	       jsr 173d8 <__adddf3>
   16062:	       lea 16(sp),sp
   16066:	       move.l d0,24(sp)
   1606a:	       move.l d1,28(sp)
   1606e:	       move.l 24(sp),48(sp)
   16074:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1607a:	       move.l 64(sp),-(sp)
   1607e:	       move.l 64(sp),-(sp)
   16082:	       move.l 72(sp),-(sp)
   16086:	       move.l 72(sp),-(sp)
   1608a:	       jsr 17636 <__muldf3>
   16090:	       lea 16(sp),sp
   16094:	       move.l d0,d2
   16096:	       move.l d1,d3
   16098:	       move.l 56(sp),-(sp)
   1609c:	       move.l 60(sp),-(sp)
   160a0:	       jsr 17b40 <__mulsi3>
   160a6:	       addq.l #8,sp
   160a8:	       move.l d0,-(sp)
   160aa:	       jsr 175a6 <__floatsidf>
   160b0:	       addq.l #4,sp
   160b2:	       move.l d1,-(sp)
   160b4:	       move.l d0,-(sp)
   160b6:	       move.l d3,-(sp)
   160b8:	       move.l d2,-(sp)
   160ba:	       jsr 173d8 <__adddf3>
   160c0:	       lea 16(sp),sp
   160c4:	       move.l d1,-(sp)
   160c6:	       move.l d0,-(sp)
   160c8:	       move.l 60(sp),-(sp)
   160cc:	       move.l 60(sp),-(sp)
   160d0:	       jsr 1743a <__divdf3>
   160d6:	       lea 16(sp),sp
   160da:	       move.l d0,16(sp)
   160de:	       move.l d1,20(sp)
   160e2:	       move.l 16(sp),48(sp)
   160e8:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   160ee:	       clr.l -(sp)
   160f0:	       clr.l -(sp)
   160f2:	       move.l 60(sp),-(sp)
   160f6:	       move.l 60(sp),-(sp)
   160fa:	       jsr 177be <__ltdf2>
   16100:	       lea 16(sp),sp
   16104:	       tst.l d0
   16106:	   /-- bge.s 1611c <closestPointOnLine+0x14e>
		*closestX = x1;
   16108:	   |   movea.l 72(sp),a0
   1610c:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16110:	   |   movea.l 76(sp),a0
   16114:	   |   move.l 84(sp),(a0)
   16118:	/--|-- bra.w 161ea <closestPointOnLine+0x21c>
	} else if (m > 1) {
   1611c:	|  \-> clr.l -(sp)
   1611e:	|      move.l #1072693248,-(sp)
   16124:	|      move.l 60(sp),-(sp)
   16128:	|      move.l 60(sp),-(sp)
   1612c:	|      jsr 17704 <__gtdf2>
   16132:	|      lea 16(sp),sp
   16136:	|      tst.l d0
   16138:	|  /-- ble.s 1614e <closestPointOnLine+0x180>
		*closestX = x2;
   1613a:	|  |   movea.l 72(sp),a0
   1613e:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   16142:	|  |   movea.l 76(sp),a0
   16146:	|  |   move.l 92(sp),(a0)
   1614a:	+--|-- bra.w 161ea <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   1614e:	|  \-> move.l 64(sp),-(sp)
   16152:	|      move.l 64(sp),-(sp)
   16156:	|      move.l 60(sp),-(sp)
   1615a:	|      move.l 60(sp),-(sp)
   1615e:	|      jsr 17636 <__muldf3>
   16164:	|      lea 16(sp),sp
   16168:	|      move.l d0,8(sp)
   1616c:	|      move.l d1,12(sp)
   16170:	|      move.l 8(sp),40(sp)
   16176:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1617c:	|      move.l 44(sp),-(sp)
   16180:	|      move.l 44(sp),-(sp)
   16184:	|      jsr 17548 <__fixdfsi>
   1618a:	|      addq.l #8,sp
   1618c:	|      movea.l 72(sp),a0
   16190:	|      move.l d0,(a0)
		*closestX += x1;
   16192:	|      movea.l 72(sp),a0
   16196:	|      move.l (a0),d0
   16198:	|      add.l 80(sp),d0
   1619c:	|      movea.l 72(sp),a0
   161a0:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   161a2:	|      move.l 56(sp),-(sp)
   161a6:	|      jsr 175a6 <__floatsidf>
   161ac:	|      addq.l #4,sp
   161ae:	|      move.l 52(sp),-(sp)
   161b2:	|      move.l 52(sp),-(sp)
   161b6:	|      move.l d1,-(sp)
   161b8:	|      move.l d0,-(sp)
   161ba:	|      jsr 17636 <__muldf3>
   161c0:	|      lea 16(sp),sp
   161c4:	|      move.l d1,-(sp)
   161c6:	|      move.l d0,-(sp)
   161c8:	|      jsr 17548 <__fixdfsi>
   161ce:	|      addq.l #8,sp
   161d0:	|      movea.l 76(sp),a0
   161d4:	|      move.l d0,(a0)
		*closestY += y1;
   161d6:	|      movea.l 76(sp),a0
   161da:	|      move.l (a0),d0
   161dc:	|      add.l 84(sp),d0
   161e0:	|      movea.l 76(sp),a0
   161e4:	|      move.l d0,(a0)
		return TRUE;
   161e6:	|      moveq #1,d0
   161e8:	|  /-- bra.s 161ec <closestPointOnLine+0x21e>
	}
	return FALSE;
   161ea:	\--|-> clr.w d0
}
   161ec:	   \-> move.l (sp)+,d2
   161ee:	       move.l (sp)+,d3
   161f0:	       lea 60(sp),sp
   161f4:	       rts

000161f6 <drawFloor>:

void drawFloor() {
   161f6:	                lea -12(sp),sp
   161fa:	                move.l d3,-(sp)
   161fc:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   161fe:	                clr.l 16(sp)
   16202:	   /----------- bra.w 16416 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16206:	/--|----------> movea.l 1ca1e <currentFloor>,a0
   1620c:	|  |            move.l 12(a0),d1
   16210:	|  |            move.l 16(sp),d0
   16214:	|  |            lsl.l #3,d0
   16216:	|  |            movea.l d1,a0
   16218:	|  |            adda.l d0,a0
   1621a:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1621e:	|  |            moveq #1,d0
   16220:	|  |            cmp.l 8(sp),d0
   16224:	|  |  /-------- bge.w 16412 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16228:	|  |  |         moveq #1,d0
   1622a:	|  |  |         move.l d0,12(sp)
   1622e:	|  |  |     /-- bra.w 16328 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   16232:	|  |  |  /--|-> movea.l 1ca1e <currentFloor>,a0
   16238:	|  |  |  |  |   move.l 4(a0),d1
   1623c:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16242:	|  |  |  |  |   movea.l 12(a0),a0
   16246:	|  |  |  |  |   move.l 16(sp),d0
   1624a:	|  |  |  |  |   lsl.l #3,d0
   1624c:	|  |  |  |  |   adda.l d0,a0
   1624e:	|  |  |  |  |   movea.l 4(a0),a0
   16252:	|  |  |  |  |   move.l 12(sp),d0
   16256:	|  |  |  |  |   add.l d0,d0
   16258:	|  |  |  |  |   add.l d0,d0
   1625a:	|  |  |  |  |   adda.l d0,a0
   1625c:	|  |  |  |  |   move.l (a0),d0
   1625e:	|  |  |  |  |   lsl.l #3,d0
   16260:	|  |  |  |  |   movea.l d1,a0
   16262:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16264:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16268:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   1626e:	|  |  |  |  |   move.l 4(a0),d1
   16272:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16278:	|  |  |  |  |   movea.l 12(a0),a0
   1627c:	|  |  |  |  |   move.l 16(sp),d0
   16280:	|  |  |  |  |   lsl.l #3,d0
   16282:	|  |  |  |  |   adda.l d0,a0
   16284:	|  |  |  |  |   movea.l 4(a0),a0
   16288:	|  |  |  |  |   move.l 12(sp),d0
   1628c:	|  |  |  |  |   add.l d0,d0
   1628e:	|  |  |  |  |   add.l d0,d0
   16290:	|  |  |  |  |   adda.l d0,a0
   16292:	|  |  |  |  |   move.l (a0),d0
   16294:	|  |  |  |  |   lsl.l #3,d0
   16296:	|  |  |  |  |   movea.l d1,a0
   16298:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1629a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1629c:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   162a2:	|  |  |  |  |   move.l 4(a0),d1
   162a6:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   162ac:	|  |  |  |  |   movea.l 12(a0),a0
   162b0:	|  |  |  |  |   move.l 16(sp),d0
   162b4:	|  |  |  |  |   lsl.l #3,d0
   162b6:	|  |  |  |  |   adda.l d0,a0
   162b8:	|  |  |  |  |   movea.l 4(a0),a0
   162bc:	|  |  |  |  |   move.l 12(sp),d0
   162c0:	|  |  |  |  |   addi.l #1073741823,d0
   162c6:	|  |  |  |  |   add.l d0,d0
   162c8:	|  |  |  |  |   add.l d0,d0
   162ca:	|  |  |  |  |   adda.l d0,a0
   162cc:	|  |  |  |  |   move.l (a0),d0
   162ce:	|  |  |  |  |   lsl.l #3,d0
   162d0:	|  |  |  |  |   movea.l d1,a0
   162d2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   162d4:	|  |  |  |  |   move.l 4(a0),d1
   162d8:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   162de:	|  |  |  |  |   move.l 4(a0),d3
   162e2:	|  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   162e8:	|  |  |  |  |   movea.l 12(a0),a0
   162ec:	|  |  |  |  |   move.l 16(sp),d0
   162f0:	|  |  |  |  |   lsl.l #3,d0
   162f2:	|  |  |  |  |   adda.l d0,a0
   162f4:	|  |  |  |  |   movea.l 4(a0),a0
   162f8:	|  |  |  |  |   move.l 12(sp),d0
   162fc:	|  |  |  |  |   addi.l #1073741823,d0
   16302:	|  |  |  |  |   add.l d0,d0
   16304:	|  |  |  |  |   add.l d0,d0
   16306:	|  |  |  |  |   adda.l d0,a0
   16308:	|  |  |  |  |   move.l (a0),d0
   1630a:	|  |  |  |  |   lsl.l #3,d0
   1630c:	|  |  |  |  |   movea.l d3,a0
   1630e:	|  |  |  |  |   adda.l d0,a0
   16310:	|  |  |  |  |   move.l (a0),d0
   16312:	|  |  |  |  |   move.l d2,-(sp)
   16314:	|  |  |  |  |   move.l a1,-(sp)
   16316:	|  |  |  |  |   move.l d1,-(sp)
   16318:	|  |  |  |  |   move.l d0,-(sp)
   1631a:	|  |  |  |  |   jsr 3d62 <drawLine>
   16320:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16324:	|  |  |  |  |   addq.l #1,12(sp)
   16328:	|  |  |  |  \-> move.l 12(sp),d0
   1632c:	|  |  |  |      cmp.l 8(sp),d0
   16330:	|  |  |  \----- blt.w 16232 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16334:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   1633a:	|  |  |         move.l 4(a0),d1
   1633e:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   16344:	|  |  |         movea.l 12(a0),a0
   16348:	|  |  |         move.l 16(sp),d0
   1634c:	|  |  |         lsl.l #3,d0
   1634e:	|  |  |         adda.l d0,a0
   16350:	|  |  |         movea.l 4(a0),a0
   16354:	|  |  |         move.l 8(sp),d0
   16358:	|  |  |         addi.l #1073741823,d0
   1635e:	|  |  |         add.l d0,d0
   16360:	|  |  |         add.l d0,d0
   16362:	|  |  |         adda.l d0,a0
   16364:	|  |  |         move.l (a0),d0
   16366:	|  |  |         lsl.l #3,d0
   16368:	|  |  |         movea.l d1,a0
   1636a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1636c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16370:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   16376:	|  |  |         move.l 4(a0),d1
   1637a:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   16380:	|  |  |         movea.l 12(a0),a0
   16384:	|  |  |         move.l 16(sp),d0
   16388:	|  |  |         lsl.l #3,d0
   1638a:	|  |  |         adda.l d0,a0
   1638c:	|  |  |         movea.l 4(a0),a0
   16390:	|  |  |         move.l 8(sp),d0
   16394:	|  |  |         addi.l #1073741823,d0
   1639a:	|  |  |         add.l d0,d0
   1639c:	|  |  |         add.l d0,d0
   1639e:	|  |  |         adda.l d0,a0
   163a0:	|  |  |         move.l (a0),d0
   163a2:	|  |  |         lsl.l #3,d0
   163a4:	|  |  |         movea.l d1,a0
   163a6:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   163a8:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   163aa:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   163b0:	|  |  |         move.l 4(a0),d1
   163b4:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   163ba:	|  |  |         movea.l 12(a0),a0
   163be:	|  |  |         move.l 16(sp),d0
   163c2:	|  |  |         lsl.l #3,d0
   163c4:	|  |  |         adda.l d0,a0
   163c6:	|  |  |         movea.l 4(a0),a0
   163ca:	|  |  |         move.l (a0),d0
   163cc:	|  |  |         lsl.l #3,d0
   163ce:	|  |  |         movea.l d1,a0
   163d0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   163d2:	|  |  |         move.l 4(a0),d1
   163d6:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   163dc:	|  |  |         move.l 4(a0),d3
   163e0:	|  |  |         movea.l 1ca1e <currentFloor>,a0
   163e6:	|  |  |         movea.l 12(a0),a0
   163ea:	|  |  |         move.l 16(sp),d0
   163ee:	|  |  |         lsl.l #3,d0
   163f0:	|  |  |         adda.l d0,a0
   163f2:	|  |  |         movea.l 4(a0),a0
   163f6:	|  |  |         move.l (a0),d0
   163f8:	|  |  |         lsl.l #3,d0
   163fa:	|  |  |         movea.l d3,a0
   163fc:	|  |  |         adda.l d0,a0
   163fe:	|  |  |         move.l (a0),d0
   16400:	|  |  |         move.l d2,-(sp)
   16402:	|  |  |         move.l a1,-(sp)
   16404:	|  |  |         move.l d1,-(sp)
   16406:	|  |  |         move.l d0,-(sp)
   16408:	|  |  |         jsr 3d62 <drawLine>
   1640e:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16412:	|  |  \-------> addq.l #1,16(sp)
   16416:	|  \----------> movea.l 1ca1e <currentFloor>,a0
   1641c:	|               move.l 8(a0),d0
   16420:	|               cmp.l 16(sp),d0
   16424:	\-------------- bgt.w 16206 <drawFloor+0x10>
        }
    }
}
   16428:	                nop
   1642a:	                nop
   1642c:	                move.l (sp)+,d2
   1642e:	                move.l (sp)+,d3
   16430:	                lea 12(sp),sp
   16434:	                rts

00016436 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16436:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1643a:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1643e:	                      clr.l 4(sp)
   16442:	   /----------------- bra.w 164d4 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16446:	/--|----------------> clr.l (sp)
   16448:	|  |     /----------- bra.s 164c4 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1644a:	|  |  /--|----------> movea.l 16(sp),a0
   1644e:	|  |  |  |            move.l 4(a0),d1
   16452:	|  |  |  |            move.l 4(sp),d0
   16456:	|  |  |  |            add.l d0,d0
   16458:	|  |  |  |            add.l d0,d0
   1645a:	|  |  |  |            movea.l d1,a0
   1645c:	|  |  |  |            adda.l d0,a0
   1645e:	|  |  |  |            move.l (a0),d1
   16460:	|  |  |  |            movea.l 20(sp),a0
   16464:	|  |  |  |            movea.l 4(a0),a0
   16468:	|  |  |  |            move.l (sp),d0
   1646a:	|  |  |  |            add.l d0,d0
   1646c:	|  |  |  |            add.l d0,d0
   1646e:	|  |  |  |            adda.l d0,a0
   16470:	|  |  |  |            move.l (a0),d0
   16472:	|  |  |  |            cmp.l d1,d0
   16474:	|  |  |  |  /-------- bne.s 164c2 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16476:	|  |  |  |  |         move.l 8(sp),d0
   1647a:	|  |  |  |  |         move.l d0,d1
   1647c:	|  |  |  |  |         addq.l #1,d1
   1647e:	|  |  |  |  |         move.l d1,8(sp)
   16482:	|  |  |  |  |         tst.l d0
   16484:	|  |  |  |  |     /-- beq.s 164a6 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16486:	|  |  |  |  |     |   movea.l 16(sp),a0
   1648a:	|  |  |  |  |     |   move.l 4(a0),d1
   1648e:	|  |  |  |  |     |   move.l 4(sp),d0
   16492:	|  |  |  |  |     |   add.l d0,d0
   16494:	|  |  |  |  |     |   add.l d0,d0
   16496:	|  |  |  |  |     |   movea.l d1,a0
   16498:	|  |  |  |  |     |   adda.l d0,a0
   1649a:	|  |  |  |  |     |   move.l (a0),d0
   1649c:	|  |  |  |  |     |   movea.l 28(sp),a0
   164a0:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   164a2:	|  |  |  |  |     |   moveq #1,d0
   164a4:	|  |  |  |  |  /--|-- bra.s 164e4 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   164a6:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   164aa:	|  |  |  |  |  |      move.l 4(a0),d1
   164ae:	|  |  |  |  |  |      move.l 4(sp),d0
   164b2:	|  |  |  |  |  |      add.l d0,d0
   164b4:	|  |  |  |  |  |      add.l d0,d0
   164b6:	|  |  |  |  |  |      movea.l d1,a0
   164b8:	|  |  |  |  |  |      adda.l d0,a0
   164ba:	|  |  |  |  |  |      move.l (a0),d0
   164bc:	|  |  |  |  |  |      movea.l 24(sp),a0
   164c0:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   164c2:	|  |  |  |  \--|----> addq.l #1,(sp)
   164c4:	|  |  |  \-----|----> movea.l 20(sp),a0
   164c8:	|  |  |        |      move.l (a0),d0
   164ca:	|  |  |        |      cmp.l (sp),d0
   164cc:	|  |  \--------|----- bgt.w 1644a <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   164d0:	|  |           |      addq.l #1,4(sp)
   164d4:	|  \-----------|----> movea.l 16(sp),a0
   164d8:	|              |      move.l (a0),d0
   164da:	|              |      cmp.l 4(sp),d0
   164de:	\--------------|----- bgt.w 16446 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   164e2:	               |      clr.w d0
}
   164e4:	               \----> lea 12(sp),sp
   164e8:	                      rts

000164ea <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   164ea:	movea.l 1ca1e <currentFloor>,a0
   164f0:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   164f4:	movea.l 1ca1e <currentFloor>,a0
   164fa:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   164fe:	movea.l 1ca1e <currentFloor>,a0
   16504:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16508:	movea.l 1ca1e <currentFloor>,a0
   1650e:	clr.l 16(a0)
}
   16512:	nop
   16514:	rts

00016516 <inFloor>:

int inFloor (int x, int y) {
   16516:	          subq.l #8,sp
	int i, r = -1;
   16518:	          moveq #-1,d0
   1651a:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1651c:	          clr.l 4(sp)
   16520:	   /----- bra.s 16554 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16522:	/--|----> movea.l 1ca1e <currentFloor>,a0
   16528:	|  |      move.l 12(a0),d1
   1652c:	|  |      move.l 4(sp),d0
   16530:	|  |      lsl.l #3,d0
   16532:	|  |      add.l d1,d0
   16534:	|  |      move.l 16(sp),-(sp)
   16538:	|  |      move.l 16(sp),-(sp)
   1653c:	|  |      move.l d0,-(sp)
   1653e:	|  |      jsr 16720 <pointInFloorPolygon>
   16544:	|  |      lea 12(sp),sp
   16548:	|  |      tst.w d0
   1654a:	|  |  /-- beq.s 16550 <inFloor+0x3a>
			r = i;
   1654c:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16550:	|  |  \-> addq.l #1,4(sp)
   16554:	|  \----> movea.l 1ca1e <currentFloor>,a0
   1655a:	|         move.l 8(a0),d0
   1655e:	|         cmp.l 4(sp),d0
   16562:	\-------- bgt.s 16522 <inFloor+0xc>

	return r;
   16564:	          move.l (sp),d0
}
   16566:	          addq.l #8,sp
   16568:	          rts

0001656a <initFloor>:

BOOL initFloor () {
   1656a:	       lea -12(sp),sp
   1656e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16570:	       moveq #20,d0
   16572:	       move.l d0,12(sp)
   16576:	       clr.l 8(sp)
   1657a:	       move.l 1c902 <SysBase>,d0
   16580:	       movea.l d0,a6
   16582:	       move.l 12(sp),d0
   16586:	       move.l 8(sp),d1
   1658a:	       jsr -684(a6)
   1658e:	       move.l d0,4(sp)
   16592:	       move.l 4(sp),d0
   16596:	       move.l d0,1ca1e <currentFloor>

    if(currentFloor == 0) {
   1659c:	       move.l 1ca1e <currentFloor>,d0
   165a2:	/----- bne.s 165b6 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   165a4:	|      pea 1a04f <newfatal.c.307beca7+0x31>
   165aa:	|      jsr 171b4 <KPrintF>
   165b0:	|      addq.l #4,sp
        return FALSE;
   165b2:	|      clr.w d0
   165b4:	|  /-- bra.s 165be <initFloor+0x54>
    }

	noFloor ();
   165b6:	\--|-> jsr 164ea <noFloor>
	return TRUE;
   165bc:	   |   moveq #1,d0
}
   165be:	   \-> movea.l (sp)+,a6
   165c0:	       lea 12(sp),sp
   165c4:	       rts

000165c6 <killFloor>:

void killFloor () {
   165c6:	       lea -24(sp),sp
   165ca:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   165cc:	       clr.l 24(sp)
   165d0:	   /-- bra.s 1662a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   165d2:	/--|-> movea.l 1ca1e <currentFloor>,a0
   165d8:	|  |   move.l 12(a0),d1
   165dc:	|  |   move.l 24(sp),d0
   165e0:	|  |   lsl.l #3,d0
   165e2:	|  |   movea.l d1,a0
   165e4:	|  |   adda.l d0,a0
   165e6:	|  |   move.l 4(a0),8(sp)
   165ec:	|  |   move.l 1c902 <SysBase>,d0
   165f2:	|  |   movea.l d0,a6
   165f4:	|  |   movea.l 8(sp),a1
   165f8:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   165fc:	|  |   movea.l 1ca1e <currentFloor>,a0
   16602:	|  |   move.l 16(a0),d1
   16606:	|  |   move.l 24(sp),d0
   1660a:	|  |   add.l d0,d0
   1660c:	|  |   add.l d0,d0
   1660e:	|  |   movea.l d1,a0
   16610:	|  |   adda.l d0,a0
   16612:	|  |   move.l (a0),4(sp)
   16616:	|  |   move.l 1c902 <SysBase>,d0
   1661c:	|  |   movea.l d0,a6
   1661e:	|  |   movea.l 4(sp),a1
   16622:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16626:	|  |   addq.l #1,24(sp)
   1662a:	|  \-> movea.l 1ca1e <currentFloor>,a0
   16630:	|      move.l 8(a0),d0
   16634:	|      cmp.l 24(sp),d0
   16638:	\----- bgt.s 165d2 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1663a:	       movea.l 1ca1e <currentFloor>,a0
   16640:	       move.l 12(a0),20(sp)
   16646:	       move.l 1c902 <SysBase>,d0
   1664c:	       movea.l d0,a6
   1664e:	       movea.l 20(sp),a1
   16652:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16656:	       movea.l 1ca1e <currentFloor>,a0
   1665c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16660:	       movea.l 1ca1e <currentFloor>,a0
   16666:	       move.l 4(a0),16(sp)
   1666c:	       move.l 1c902 <SysBase>,d0
   16672:	       movea.l d0,a6
   16674:	       movea.l 16(sp),a1
   16678:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1667c:	       movea.l 1ca1e <currentFloor>,a0
   16682:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16686:	       movea.l 1ca1e <currentFloor>,a0
   1668c:	       move.l 16(a0),12(sp)
   16692:	       move.l 1c902 <SysBase>,d0
   16698:	       movea.l d0,a6
   1669a:	       movea.l 12(sp),a1
   1669e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   166a2:	       movea.l 1ca1e <currentFloor>,a0
   166a8:	       clr.l 16(a0)
}
   166ac:	       nop
   166ae:	       movea.l (sp)+,a6
   166b0:	       lea 24(sp),sp
   166b4:	       rts

000166b6 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   166b6:	                   lea -12(sp),sp
	int sharedVertices = 0;
   166ba:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   166be:	                   clr.l 4(sp)
   166c2:	   /-------------- bra.s 1670e <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   166c4:	/--|-------------> clr.l (sp)
   166c6:	|  |     /-------- bra.s 16702 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   166c8:	|  |  /--|-------> move.l 20(sp),d1
   166cc:	|  |  |  |         move.l 4(sp),d0
   166d0:	|  |  |  |         add.l d0,d0
   166d2:	|  |  |  |         add.l d0,d0
   166d4:	|  |  |  |         movea.l d1,a0
   166d6:	|  |  |  |         adda.l d0,a0
   166d8:	|  |  |  |         move.l (a0),d1
   166da:	|  |  |  |         movea.l 28(sp),a0
   166de:	|  |  |  |         move.l (sp),d0
   166e0:	|  |  |  |         add.l d0,d0
   166e2:	|  |  |  |         add.l d0,d0
   166e4:	|  |  |  |         adda.l d0,a0
   166e6:	|  |  |  |         move.l (a0),d0
   166e8:	|  |  |  |         cmp.l d1,d0
   166ea:	|  |  |  |     /-- bne.s 16700 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   166ec:	|  |  |  |     |   move.l 8(sp),d0
   166f0:	|  |  |  |     |   move.l d0,d1
   166f2:	|  |  |  |     |   addq.l #1,d1
   166f4:	|  |  |  |     |   move.l d1,8(sp)
   166f8:	|  |  |  |     |   tst.l d0
   166fa:	|  |  |  |     +-- beq.s 16700 <polysShareSide+0x4a>
   166fc:	|  |  |  |     |   moveq #1,d0
   166fe:	|  |  |  |  /--|-- bra.s 1671a <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16700:	|  |  |  |  |  \-> addq.l #1,(sp)
   16702:	|  |  |  \--|----> move.l 24(sp),d0
   16706:	|  |  |     |      cmp.l (sp),d0
   16708:	|  |  \-----|----- bgt.s 166c8 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1670a:	|  |        |      addq.l #1,4(sp)
   1670e:	|  \--------|----> move.l 16(sp),d0
   16712:	|           |      cmp.l 4(sp),d0
   16716:	\-----------|----- bgt.s 166c4 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16718:	            |      clr.w d0
}
   1671a:	            \----> lea 12(sp),sp
   1671e:	                   rts

00016720 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16720:	             lea -28(sp),sp
   16724:	             move.l d3,-(sp)
   16726:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16728:	             clr.l 32(sp)
   1672c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16730:	             movea.l 40(sp),a0
   16734:	             move.l (a0),d0
   16736:	             move.l d0,d1
   16738:	             subq.l #1,d1
   1673a:	             move.l d1,28(sp)
   1673e:	   /-------- bra.w 16938 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16742:	/--|-------> movea.l 1ca1e <currentFloor>,a0
   16748:	|  |         move.l 4(a0),d1
   1674c:	|  |         movea.l 40(sp),a0
   16750:	|  |         movea.l 4(a0),a0
   16754:	|  |         move.l 32(sp),d0
   16758:	|  |         add.l d0,d0
   1675a:	|  |         add.l d0,d0
   1675c:	|  |         adda.l d0,a0
   1675e:	|  |         move.l (a0),d0
   16760:	|  |         lsl.l #3,d0
   16762:	|  |         movea.l d1,a0
   16764:	|  |         adda.l d0,a0
   16766:	|  |         move.l (a0),d0
   16768:	|  |         move.l d0,-(sp)
   1676a:	|  |         jsr 175e6 <__floatsisf>
   16770:	|  |         addq.l #4,sp
   16772:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16776:	|  |         movea.l 1ca1e <currentFloor>,a0
   1677c:	|  |         move.l 4(a0),d1
   16780:	|  |         movea.l 40(sp),a0
   16784:	|  |         movea.l 4(a0),a0
   16788:	|  |         move.l 32(sp),d0
   1678c:	|  |         add.l d0,d0
   1678e:	|  |         add.l d0,d0
   16790:	|  |         adda.l d0,a0
   16792:	|  |         move.l (a0),d0
   16794:	|  |         lsl.l #3,d0
   16796:	|  |         movea.l d1,a0
   16798:	|  |         adda.l d0,a0
   1679a:	|  |         move.l 4(a0),d0
   1679e:	|  |         move.l d0,-(sp)
   167a0:	|  |         jsr 175e6 <__floatsisf>
   167a6:	|  |         addq.l #4,sp
   167a8:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   167ac:	|  |         movea.l 1ca1e <currentFloor>,a0
   167b2:	|  |         move.l 4(a0),d1
   167b6:	|  |         movea.l 40(sp),a0
   167ba:	|  |         movea.l 4(a0),a0
   167be:	|  |         move.l 28(sp),d0
   167c2:	|  |         add.l d0,d0
   167c4:	|  |         add.l d0,d0
   167c6:	|  |         adda.l d0,a0
   167c8:	|  |         move.l (a0),d0
   167ca:	|  |         lsl.l #3,d0
   167cc:	|  |         movea.l d1,a0
   167ce:	|  |         adda.l d0,a0
   167d0:	|  |         move.l (a0),d0
   167d2:	|  |         move.l d0,-(sp)
   167d4:	|  |         jsr 175e6 <__floatsisf>
   167da:	|  |         addq.l #4,sp
   167dc:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   167e0:	|  |         movea.l 1ca1e <currentFloor>,a0
   167e6:	|  |         move.l 4(a0),d1
   167ea:	|  |         movea.l 40(sp),a0
   167ee:	|  |         movea.l 4(a0),a0
   167f2:	|  |         move.l 28(sp),d0
   167f6:	|  |         add.l d0,d0
   167f8:	|  |         add.l d0,d0
   167fa:	|  |         adda.l d0,a0
   167fc:	|  |         move.l (a0),d0
   167fe:	|  |         lsl.l #3,d0
   16800:	|  |         movea.l d1,a0
   16802:	|  |         adda.l d0,a0
   16804:	|  |         move.l 4(a0),d0
   16808:	|  |         move.l d0,-(sp)
   1680a:	|  |         jsr 175e6 <__floatsisf>
   16810:	|  |         addq.l #4,sp
   16812:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16816:	|  |         move.l 48(sp),-(sp)
   1681a:	|  |         jsr 175e6 <__floatsisf>
   16820:	|  |         addq.l #4,sp
   16822:	|  |         move.l d0,-(sp)
   16824:	|  |         move.l 20(sp),-(sp)
   16828:	|  |         jsr 17788 <__lesf2>
   1682e:	|  |         addq.l #8,sp
   16830:	|  |         tst.l d0
   16832:	|  |     /-- bgt.s 16852 <pointInFloorPolygon+0x132>
   16834:	|  |     |   move.l 48(sp),-(sp)
   16838:	|  |     |   jsr 175e6 <__floatsisf>
   1683e:	|  |     |   addq.l #4,sp
   16840:	|  |     |   move.l d0,-(sp)
   16842:	|  |     |   move.l 12(sp),-(sp)
   16846:	|  |     |   jsr 17752 <__gtsf2>
   1684c:	|  |     |   addq.l #8,sp
   1684e:	|  |     |   tst.l d0
   16850:	|  |  /--|-- bgt.s 16892 <pointInFloorPolygon+0x172>
   16852:	|  |  |  \-> move.l 48(sp),-(sp)
   16856:	|  |  |      jsr 175e6 <__floatsisf>
   1685c:	|  |  |      addq.l #4,sp
   1685e:	|  |  |      move.l d0,-(sp)
   16860:	|  |  |      move.l 12(sp),-(sp)
   16864:	|  |  |      jsr 17788 <__lesf2>
   1686a:	|  |  |      addq.l #8,sp
   1686c:	|  |  |      tst.l d0
   1686e:	|  |  |  /-- bgt.w 16928 <pointInFloorPolygon+0x208>
   16872:	|  |  |  |   move.l 48(sp),-(sp)
   16876:	|  |  |  |   jsr 175e6 <__floatsisf>
   1687c:	|  |  |  |   addq.l #4,sp
   1687e:	|  |  |  |   move.l d0,-(sp)
   16880:	|  |  |  |   move.l 20(sp),-(sp)
   16884:	|  |  |  |   jsr 17752 <__gtsf2>
   1688a:	|  |  |  |   addq.l #8,sp
   1688c:	|  |  |  |   tst.l d0
   1688e:	|  |  |  +-- ble.w 16928 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16892:	|  |  \--|-> move.l 44(sp),-(sp)
   16896:	|  |     |   jsr 175e6 <__floatsisf>
   1689c:	|  |     |   addq.l #4,sp
   1689e:	|  |     |   move.l d0,d3
   168a0:	|  |     |   move.l 20(sp),-(sp)
   168a4:	|  |     |   move.l 16(sp),-(sp)
   168a8:	|  |     |   jsr 178da <__subsf3>
   168ae:	|  |     |   addq.l #8,sp
   168b0:	|  |     |   move.l d0,d2
   168b2:	|  |     |   move.l 48(sp),-(sp)
   168b6:	|  |     |   jsr 175e6 <__floatsisf>
   168bc:	|  |     |   addq.l #4,sp
   168be:	|  |     |   move.l 16(sp),-(sp)
   168c2:	|  |     |   move.l d0,-(sp)
   168c4:	|  |     |   jsr 178da <__subsf3>
   168ca:	|  |     |   addq.l #8,sp
   168cc:	|  |     |   move.l d0,-(sp)
   168ce:	|  |     |   move.l d2,-(sp)
   168d0:	|  |     |   jsr 17698 <__mulsf3>
   168d6:	|  |     |   addq.l #8,sp
   168d8:	|  |     |   move.l d0,d2
   168da:	|  |     |   move.l 16(sp),-(sp)
   168de:	|  |     |   move.l 12(sp),-(sp)
   168e2:	|  |     |   jsr 178da <__subsf3>
   168e8:	|  |     |   addq.l #8,sp
   168ea:	|  |     |   move.l d0,-(sp)
   168ec:	|  |     |   move.l d2,-(sp)
   168ee:	|  |     |   jsr 1749c <__divsf3>
   168f4:	|  |     |   addq.l #8,sp
   168f6:	|  |     |   move.l 20(sp),-(sp)
   168fa:	|  |     |   move.l d0,-(sp)
   168fc:	|  |     |   jsr 173a2 <__addsf3>
   16902:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16904:	|  |     |   move.l d0,-(sp)
   16906:	|  |     |   move.l d3,-(sp)
   16908:	|  |     |   jsr 1780c <__ltsf2>
   1690e:	|  |     |   addq.l #8,sp
   16910:	|  |     |   tst.l d0
   16912:	|  |     +-- bge.s 16928 <pointInFloorPolygon+0x208>

			c = !c;
   16914:	|  |     |   tst.l 24(sp)
   16918:	|  |     |   seq d0
   1691a:	|  |     |   neg.b d0
   1691c:	|  |     |   move.b d0,d0
   1691e:	|  |     |   andi.l #255,d0
   16924:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16928:	|  |     \-> move.l 32(sp),d0
   1692c:	|  |         move.l d0,d1
   1692e:	|  |         addq.l #1,d1
   16930:	|  |         move.l d1,32(sp)
   16934:	|  |         move.l d0,28(sp)
   16938:	|  \-------> movea.l 40(sp),a0
   1693c:	|            move.l (a0),d0
   1693e:	|            cmp.l 32(sp),d0
   16942:	\----------- bgt.w 16742 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16946:	             tst.l 24(sp)
   1694a:	             sne d0
   1694c:	             neg.b d0
   1694e:	             move.b d0,d0
   16950:	             andi.w #255,d0
}
   16954:	             move.l (sp)+,d2
   16956:	             move.l (sp)+,d3
   16958:	             lea 28(sp),sp
   1695c:	             rts

0001695e <setFloor>:

BOOL setFloor (int fileNum) {
   1695e:	                               lea -132(sp),sp
   16962:	                               move.l a6,-(sp)
   16964:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16966:	                               jsr 165c6 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1696c:	                               move.l 144(sp),-(sp)
   16970:	                               jsr 6c76 <openFileFromNum>
   16976:	                               addq.l #4,sp
   16978:	                               tst.l d0
   1697a:	                           /-- bne.s 16982 <setFloor+0x24>
   1697c:	                           |   clr.w d0
   1697e:	/--------------------------|-- bra.w 170ce <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16982:	|                          \-> movea.l 1ca1e <currentFloor>,a0
   16988:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1698c:	|                              move.l 1c8ea <bigDataFile>,118(sp)
   16994:	|                              move.l 1c90a <DOSBase>,d0
   1699a:	|                              movea.l d0,a6
   1699c:	|                              move.l 118(sp),d1
   169a0:	|                              jsr -306(a6)
   169a4:	|                              move.l d0,114(sp)
   169a8:	|                              move.l 114(sp),d0
   169ac:	|                              movea.l 1ca1e <currentFloor>,a0
   169b2:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   169b6:	|                              movea.l 1ca1e <currentFloor>,a0
   169bc:	|                              move.l 8(a0),d0
   169c0:	|                              lsl.l #3,d0
   169c2:	|                              move.l d0,110(sp)
   169c6:	|                              clr.l 106(sp)
   169ca:	|                              move.l 1c902 <SysBase>,d0
   169d0:	|                              movea.l d0,a6
   169d2:	|                              move.l 110(sp),d0
   169d6:	|                              move.l 106(sp),d1
   169da:	|                              jsr -684(a6)
   169de:	|                              move.l d0,102(sp)
   169e2:	|                              move.l 102(sp),d0
   169e6:	|                              movea.l 1ca1e <currentFloor>,a0
   169ec:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   169f0:	|                              movea.l 1ca1e <currentFloor>,a0
   169f6:	|                              move.l 12(a0),d0
   169fa:	|                          /-- bne.s 16a10 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   169fc:	|                          |   pea 1a073 <newfatal.c.307beca7+0x55>
   16a02:	|                          |   jsr 171b4 <KPrintF>
   16a08:	|                          |   addq.l #4,sp
		return FALSE;
   16a0a:	|                          |   clr.w d0
   16a0c:	+--------------------------|-- bra.w 170ce <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a10:	|                          \-> clr.l 136(sp)
   16a14:	|                    /-------- bra.w 16b2c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16a18:	|                 /--|-------> move.l 1c8ea <bigDataFile>,26(sp)
   16a20:	|                 |  |         move.l 1c90a <DOSBase>,d0
   16a26:	|                 |  |         movea.l d0,a6
   16a28:	|                 |  |         move.l 26(sp),d1
   16a2c:	|                 |  |         jsr -306(a6)
   16a30:	|                 |  |         move.l d0,22(sp)
   16a34:	|                 |  |         move.l 22(sp),d1
   16a38:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16a3e:	|                 |  |         movea.l 12(a0),a0
   16a42:	|                 |  |         move.l 136(sp),d0
   16a46:	|                 |  |         lsl.l #3,d0
   16a48:	|                 |  |         adda.l d0,a0
   16a4a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16a4c:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16a52:	|                 |  |         move.l 12(a0),d1
   16a56:	|                 |  |         move.l 136(sp),d0
   16a5a:	|                 |  |         lsl.l #3,d0
   16a5c:	|                 |  |         movea.l d1,a0
   16a5e:	|                 |  |         adda.l d0,a0
   16a60:	|                 |  |         move.l (a0),d0
   16a62:	|                 |  |         add.l d0,d0
   16a64:	|                 |  |         add.l d0,d0
   16a66:	|                 |  |         move.l d0,18(sp)
   16a6a:	|                 |  |         clr.l 14(sp)
   16a6e:	|                 |  |         move.l 1c902 <SysBase>,d0
   16a74:	|                 |  |         movea.l d0,a6
   16a76:	|                 |  |         move.l 18(sp),d0
   16a7a:	|                 |  |         move.l 14(sp),d1
   16a7e:	|                 |  |         jsr -684(a6)
   16a82:	|                 |  |         move.l d0,10(sp)
   16a86:	|                 |  |         move.l 10(sp),d1
   16a8a:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16a90:	|                 |  |         movea.l 12(a0),a0
   16a94:	|                 |  |         move.l 136(sp),d0
   16a98:	|                 |  |         lsl.l #3,d0
   16a9a:	|                 |  |         adda.l d0,a0
   16a9c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16aa0:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16aa6:	|                 |  |         move.l 12(a0),d1
   16aaa:	|                 |  |         move.l 136(sp),d0
   16aae:	|                 |  |         lsl.l #3,d0
   16ab0:	|                 |  |         movea.l d1,a0
   16ab2:	|                 |  |         adda.l d0,a0
   16ab4:	|                 |  |         move.l 4(a0),d0
   16ab8:	|                 |  |     /-- bne.s 16ace <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16aba:	|                 |  |     |   pea 1a073 <newfatal.c.307beca7+0x55>
   16ac0:	|                 |  |     |   jsr 171b4 <KPrintF>
   16ac6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ac8:	|                 |  |     |   clr.w d0
   16aca:	+-----------------|--|-----|-- bra.w 170ce <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16ace:	|                 |  |     \-> clr.l 132(sp)
   16ad2:	|                 |  |     /-- bra.s 16b0c <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16ad4:	|                 |  |  /--|-> move.l 1c8ea <bigDataFile>,d1
   16ada:	|                 |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16ae0:	|                 |  |  |  |   movea.l 12(a0),a0
   16ae4:	|                 |  |  |  |   move.l 136(sp),d0
   16ae8:	|                 |  |  |  |   lsl.l #3,d0
   16aea:	|                 |  |  |  |   adda.l d0,a0
   16aec:	|                 |  |  |  |   movea.l 4(a0),a0
   16af0:	|                 |  |  |  |   move.l 132(sp),d0
   16af4:	|                 |  |  |  |   add.l d0,d0
   16af6:	|                 |  |  |  |   add.l d0,d0
   16af8:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16afc:	|                 |  |  |  |   move.l d1,-(sp)
   16afe:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16b04:	|                 |  |  |  |   addq.l #4,sp
   16b06:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b08:	|                 |  |  |  |   addq.l #1,132(sp)
   16b0c:	|                 |  |  |  \-> movea.l 1ca1e <currentFloor>,a0
   16b12:	|                 |  |  |      move.l 12(a0),d1
   16b16:	|                 |  |  |      move.l 136(sp),d0
   16b1a:	|                 |  |  |      lsl.l #3,d0
   16b1c:	|                 |  |  |      movea.l d1,a0
   16b1e:	|                 |  |  |      adda.l d0,a0
   16b20:	|                 |  |  |      move.l (a0),d0
   16b22:	|                 |  |  |      cmp.l 132(sp),d0
   16b26:	|                 |  |  \----- bgt.s 16ad4 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b28:	|                 |  |         addq.l #1,136(sp)
   16b2c:	|                 |  \-------> movea.l 1ca1e <currentFloor>,a0
   16b32:	|                 |            move.l 8(a0),d0
   16b36:	|                 |            cmp.l 136(sp),d0
   16b3a:	|                 \----------- bgt.w 16a18 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16b3e:	|                              move.l 1c8ea <bigDataFile>,d0
   16b44:	|                              move.l d0,-(sp)
   16b46:	|                              jsr 6bc <get2bytes>
   16b4c:	|                              addq.l #4,sp
   16b4e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16b52:	|                              move.l 136(sp),d0
   16b56:	|                              lsl.l #3,d0
   16b58:	|                              move.l d0,98(sp)
   16b5c:	|                              clr.l 94(sp)
   16b60:	|                              move.l 1c902 <SysBase>,d0
   16b66:	|                              movea.l d0,a6
   16b68:	|                              move.l 98(sp),d0
   16b6c:	|                              move.l 94(sp),d1
   16b70:	|                              jsr -684(a6)
   16b74:	|                              move.l d0,90(sp)
   16b78:	|                              move.l 90(sp),d0
   16b7c:	|                              movea.l 1ca1e <currentFloor>,a0
   16b82:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16b86:	|                              movea.l 1ca1e <currentFloor>,a0
   16b8c:	|                              move.l 4(a0),d0
   16b90:	|                          /-- bne.s 16ba6 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16b92:	|                          |   pea 1a073 <newfatal.c.307beca7+0x55>
   16b98:	|                          |   jsr 171b4 <KPrintF>
   16b9e:	|                          |   addq.l #4,sp
		return FALSE;
   16ba0:	|                          |   clr.w d0
   16ba2:	+--------------------------|-- bra.w 170ce <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16ba6:	|                          \-> clr.l 132(sp)
   16baa:	|                          /-- bra.s 16bfe <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16bac:	|                       /--|-> move.l 1c8ea <bigDataFile>,d1
   16bb2:	|                       |  |   movea.l 1ca1e <currentFloor>,a0
   16bb8:	|                       |  |   movea.l 4(a0),a0
   16bbc:	|                       |  |   move.l 132(sp),d0
   16bc0:	|                       |  |   lsl.l #3,d0
   16bc2:	|                       |  |   lea (0,a0,d0.l),a2
   16bc6:	|                       |  |   move.l d1,-(sp)
   16bc8:	|                       |  |   jsr 6bc <get2bytes>
   16bce:	|                       |  |   addq.l #4,sp
   16bd0:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16bd2:	|                       |  |   move.l 1c8ea <bigDataFile>,d1
   16bd8:	|                       |  |   movea.l 1ca1e <currentFloor>,a0
   16bde:	|                       |  |   movea.l 4(a0),a0
   16be2:	|                       |  |   move.l 132(sp),d0
   16be6:	|                       |  |   lsl.l #3,d0
   16be8:	|                       |  |   lea (0,a0,d0.l),a2
   16bec:	|                       |  |   move.l d1,-(sp)
   16bee:	|                       |  |   jsr 6bc <get2bytes>
   16bf4:	|                       |  |   addq.l #4,sp
   16bf6:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16bfa:	|                       |  |   addq.l #1,132(sp)
   16bfe:	|                       |  \-> move.l 132(sp),d0
   16c02:	|                       |      cmp.l 136(sp),d0
   16c06:	|                       \----- blt.s 16bac <setFloor+0x24e>
	}

	finishAccess ();
   16c08:	|                              jsr 6b6e <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c0e:	|                              movea.l 1ca1e <currentFloor>,a0
   16c14:	|                              move.l 8(a0),d0
   16c18:	|                              add.l d0,d0
   16c1a:	|                              add.l d0,d0
   16c1c:	|                              move.l d0,86(sp)
   16c20:	|                              clr.l 82(sp)
   16c24:	|                              move.l 1c902 <SysBase>,d0
   16c2a:	|                              movea.l d0,a6
   16c2c:	|                              move.l 86(sp),d0
   16c30:	|                              move.l 82(sp),d1
   16c34:	|                              jsr -684(a6)
   16c38:	|                              move.l d0,78(sp)
   16c3c:	|                              move.l 78(sp),d0
   16c40:	|                              movea.l 1ca1e <currentFloor>,a0
   16c46:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c4a:	|                              movea.l 1ca1e <currentFloor>,a0
   16c50:	|                              move.l 8(a0),d0
   16c54:	|                              add.l d0,d0
   16c56:	|                              add.l d0,d0
   16c58:	|                              move.l d0,74(sp)
   16c5c:	|                              clr.l 70(sp)
   16c60:	|                              move.l 1c902 <SysBase>,d0
   16c66:	|                              movea.l d0,a6
   16c68:	|                              move.l 74(sp),d0
   16c6c:	|                              move.l 70(sp),d1
   16c70:	|                              jsr -684(a6)
   16c74:	|                              move.l d0,66(sp)
   16c78:	|                              move.l 66(sp),d0
   16c7c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16c80:	|                              movea.l 1ca1e <currentFloor>,a0
   16c86:	|                              move.l 16(a0),d0
   16c8a:	|                          /-- bne.s 16ca0 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16c8c:	|                          |   pea 1a073 <newfatal.c.307beca7+0x55>
   16c92:	|                          |   jsr 171b4 <KPrintF>
   16c98:	|                          |   addq.l #4,sp
		return FALSE;
   16c9a:	|                          |   clr.w d0
   16c9c:	+--------------------------|-- bra.w 170ce <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ca0:	|                          \-> clr.l 136(sp)
   16ca4:	|                    /-------- bra.w 16dc8 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16ca8:	|                 /--|-------> movea.l 1ca1e <currentFloor>,a0
   16cae:	|                 |  |         move.l 8(a0),d0
   16cb2:	|                 |  |         add.l d0,d0
   16cb4:	|                 |  |         add.l d0,d0
   16cb6:	|                 |  |         move.l d0,50(sp)
   16cba:	|                 |  |         clr.l 46(sp)
   16cbe:	|                 |  |         move.l 1c902 <SysBase>,d0
   16cc4:	|                 |  |         movea.l d0,a6
   16cc6:	|                 |  |         move.l 50(sp),d0
   16cca:	|                 |  |         move.l 46(sp),d1
   16cce:	|                 |  |         jsr -684(a6)
   16cd2:	|                 |  |         move.l d0,42(sp)
   16cd6:	|                 |  |         move.l 42(sp),d0
   16cda:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16ce0:	|                 |  |         movea.l 16(a0),a0
   16ce4:	|                 |  |         move.l 136(sp),d1
   16ce8:	|                 |  |         add.l d1,d1
   16cea:	|                 |  |         add.l d1,d1
   16cec:	|                 |  |         adda.l d1,a0
   16cee:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16cf0:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16cf6:	|                 |  |         move.l 8(a0),d0
   16cfa:	|                 |  |         add.l d0,d0
   16cfc:	|                 |  |         add.l d0,d0
   16cfe:	|                 |  |         move.l d0,38(sp)
   16d02:	|                 |  |         clr.l 34(sp)
   16d06:	|                 |  |         move.l 1c902 <SysBase>,d0
   16d0c:	|                 |  |         movea.l d0,a6
   16d0e:	|                 |  |         move.l 38(sp),d0
   16d12:	|                 |  |         move.l 34(sp),d1
   16d16:	|                 |  |         jsr -684(a6)
   16d1a:	|                 |  |         move.l d0,30(sp)
   16d1e:	|                 |  |         move.l 30(sp),d1
   16d22:	|                 |  |         move.l 136(sp),d0
   16d26:	|                 |  |         add.l d0,d0
   16d28:	|                 |  |         add.l d0,d0
   16d2a:	|                 |  |         movea.l 62(sp),a0
   16d2e:	|                 |  |         adda.l d0,a0
   16d30:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16d32:	|                 |  |         movea.l 1ca1e <currentFloor>,a0
   16d38:	|                 |  |         move.l 16(a0),d1
   16d3c:	|                 |  |         move.l 136(sp),d0
   16d40:	|                 |  |         add.l d0,d0
   16d42:	|                 |  |         add.l d0,d0
   16d44:	|                 |  |         movea.l d1,a0
   16d46:	|                 |  |         adda.l d0,a0
   16d48:	|                 |  |         move.l (a0),d0
   16d4a:	|                 |  |     /-- bne.s 16d60 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16d4c:	|                 |  |     |   pea 1a073 <newfatal.c.307beca7+0x55>
   16d52:	|                 |  |     |   jsr 171b4 <KPrintF>
   16d58:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16d5a:	|                 |  |     |   clr.w d0
   16d5c:	+-----------------|--|-----|-- bra.w 170ce <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d60:	|                 |  |     \-> clr.l 132(sp)
   16d64:	|                 |  |     /-- bra.s 16db4 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16d66:	|                 |  |  /--|-> movea.l 1ca1e <currentFloor>,a0
   16d6c:	|                 |  |  |  |   move.l 16(a0),d1
   16d70:	|                 |  |  |  |   move.l 136(sp),d0
   16d74:	|                 |  |  |  |   add.l d0,d0
   16d76:	|                 |  |  |  |   add.l d0,d0
   16d78:	|                 |  |  |  |   movea.l d1,a0
   16d7a:	|                 |  |  |  |   adda.l d0,a0
   16d7c:	|                 |  |  |  |   move.l (a0),d1
   16d7e:	|                 |  |  |  |   move.l 132(sp),d0
   16d82:	|                 |  |  |  |   add.l d0,d0
   16d84:	|                 |  |  |  |   add.l d0,d0
   16d86:	|                 |  |  |  |   movea.l d1,a0
   16d88:	|                 |  |  |  |   adda.l d0,a0
   16d8a:	|                 |  |  |  |   moveq #-1,d1
   16d8c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16d8e:	|                 |  |  |  |   move.l 136(sp),d0
   16d92:	|                 |  |  |  |   add.l d0,d0
   16d94:	|                 |  |  |  |   add.l d0,d0
   16d96:	|                 |  |  |  |   movea.l 62(sp),a0
   16d9a:	|                 |  |  |  |   adda.l d0,a0
   16d9c:	|                 |  |  |  |   move.l (a0),d1
   16d9e:	|                 |  |  |  |   move.l 132(sp),d0
   16da2:	|                 |  |  |  |   add.l d0,d0
   16da4:	|                 |  |  |  |   add.l d0,d0
   16da6:	|                 |  |  |  |   movea.l d1,a0
   16da8:	|                 |  |  |  |   adda.l d0,a0
   16daa:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16db0:	|                 |  |  |  |   addq.l #1,132(sp)
   16db4:	|                 |  |  |  \-> movea.l 1ca1e <currentFloor>,a0
   16dba:	|                 |  |  |      move.l 8(a0),d0
   16dbe:	|                 |  |  |      cmp.l 132(sp),d0
   16dc2:	|                 |  |  \----- bgt.s 16d66 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dc4:	|                 |  |         addq.l #1,136(sp)
   16dc8:	|                 |  \-------> movea.l 1ca1e <currentFloor>,a0
   16dce:	|                 |            move.l 8(a0),d0
   16dd2:	|                 |            cmp.l 136(sp),d0
   16dd6:	|                 \----------- bgt.w 16ca8 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dda:	|                              clr.l 136(sp)
   16dde:	|              /-------------- bra.w 16ee4 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16de2:	|           /--|-------------> clr.l 132(sp)
   16de6:	|           |  |     /-------- bra.w 16ece <setFloor+0x570>
			if (i != j) {
   16dea:	|           |  |  /--|-------> move.l 136(sp),d0
   16dee:	|           |  |  |  |         cmp.l 132(sp),d0
   16df2:	|           |  |  |  |     /-- beq.w 16e84 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16df6:	|           |  |  |  |     |   movea.l 1ca1e <currentFloor>,a0
   16dfc:	|           |  |  |  |     |   move.l 12(a0),d1
   16e00:	|           |  |  |  |     |   move.l 132(sp),d0
   16e04:	|           |  |  |  |     |   lsl.l #3,d0
   16e06:	|           |  |  |  |     |   movea.l d1,a1
   16e08:	|           |  |  |  |     |   adda.l d0,a1
   16e0a:	|           |  |  |  |     |   movea.l 1ca1e <currentFloor>,a0
   16e10:	|           |  |  |  |     |   move.l 12(a0),d1
   16e14:	|           |  |  |  |     |   move.l 136(sp),d0
   16e18:	|           |  |  |  |     |   lsl.l #3,d0
   16e1a:	|           |  |  |  |     |   movea.l d1,a0
   16e1c:	|           |  |  |  |     |   adda.l d0,a0
   16e1e:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16e22:	|           |  |  |  |     |   move.l (a1),-(sp)
   16e24:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16e28:	|           |  |  |  |     |   move.l (a0),-(sp)
   16e2a:	|           |  |  |  |     |   jsr 166b6 <polysShareSide>
   16e30:	|           |  |  |  |     |   lea 16(sp),sp
   16e34:	|           |  |  |  |     |   tst.w d0
   16e36:	|           |  |  |  |  /--|-- beq.w 16eca <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16e3a:	|           |  |  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16e40:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16e44:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e48:	|           |  |  |  |  |  |   add.l d0,d0
   16e4a:	|           |  |  |  |  |  |   add.l d0,d0
   16e4c:	|           |  |  |  |  |  |   movea.l d1,a0
   16e4e:	|           |  |  |  |  |  |   adda.l d0,a0
   16e50:	|           |  |  |  |  |  |   move.l (a0),d1
   16e52:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e56:	|           |  |  |  |  |  |   add.l d0,d0
   16e58:	|           |  |  |  |  |  |   add.l d0,d0
   16e5a:	|           |  |  |  |  |  |   movea.l d1,a0
   16e5c:	|           |  |  |  |  |  |   adda.l d0,a0
   16e5e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16e62:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e66:	|           |  |  |  |  |  |   add.l d0,d0
   16e68:	|           |  |  |  |  |  |   add.l d0,d0
   16e6a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16e6e:	|           |  |  |  |  |  |   adda.l d0,a0
   16e70:	|           |  |  |  |  |  |   move.l (a0),d1
   16e72:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e76:	|           |  |  |  |  |  |   add.l d0,d0
   16e78:	|           |  |  |  |  |  |   add.l d0,d0
   16e7a:	|           |  |  |  |  |  |   movea.l d1,a0
   16e7c:	|           |  |  |  |  |  |   adda.l d0,a0
   16e7e:	|           |  |  |  |  |  |   moveq #1,d1
   16e80:	|           |  |  |  |  |  |   move.l d1,(a0)
   16e82:	|           |  |  |  |  +--|-- bra.s 16eca <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16e84:	|           |  |  |  |  |  \-> movea.l 1ca1e <currentFloor>,a0
   16e8a:	|           |  |  |  |  |      move.l 16(a0),d1
   16e8e:	|           |  |  |  |  |      move.l 136(sp),d0
   16e92:	|           |  |  |  |  |      add.l d0,d0
   16e94:	|           |  |  |  |  |      add.l d0,d0
   16e96:	|           |  |  |  |  |      movea.l d1,a0
   16e98:	|           |  |  |  |  |      adda.l d0,a0
   16e9a:	|           |  |  |  |  |      move.l (a0),d1
   16e9c:	|           |  |  |  |  |      move.l 132(sp),d0
   16ea0:	|           |  |  |  |  |      add.l d0,d0
   16ea2:	|           |  |  |  |  |      add.l d0,d0
   16ea4:	|           |  |  |  |  |      movea.l d1,a0
   16ea6:	|           |  |  |  |  |      adda.l d0,a0
   16ea8:	|           |  |  |  |  |      moveq #-2,d0
   16eaa:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16eac:	|           |  |  |  |  |      move.l 136(sp),d0
   16eb0:	|           |  |  |  |  |      add.l d0,d0
   16eb2:	|           |  |  |  |  |      add.l d0,d0
   16eb4:	|           |  |  |  |  |      movea.l 62(sp),a0
   16eb8:	|           |  |  |  |  |      adda.l d0,a0
   16eba:	|           |  |  |  |  |      move.l (a0),d1
   16ebc:	|           |  |  |  |  |      move.l 132(sp),d0
   16ec0:	|           |  |  |  |  |      add.l d0,d0
   16ec2:	|           |  |  |  |  |      add.l d0,d0
   16ec4:	|           |  |  |  |  |      movea.l d1,a0
   16ec6:	|           |  |  |  |  |      adda.l d0,a0
   16ec8:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16eca:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16ece:	|           |  |  |  \-------> movea.l 1ca1e <currentFloor>,a0
   16ed4:	|           |  |  |            move.l 8(a0),d0
   16ed8:	|           |  |  |            cmp.l 132(sp),d0
   16edc:	|           |  |  \----------- bgt.w 16dea <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ee0:	|           |  |               addq.l #1,136(sp)
   16ee4:	|           |  \-------------> movea.l 1ca1e <currentFloor>,a0
   16eea:	|           |                  move.l 8(a0),d0
   16eee:	|           |                  cmp.l 136(sp),d0
   16ef2:	|           \----------------- bgt.w 16de2 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16ef6:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16efa:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16efe:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f02:	|  |                           clr.l 136(sp)
   16f06:	|  |     /-------------------- bra.w 1705c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f0a:	|  |  /--|-------------------> clr.l 132(sp)
   16f0e:	|  |  |  |     /-------------- bra.w 17046 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16f12:	|  |  |  |  /--|-------------> movea.l 1ca1e <currentFloor>,a0
   16f18:	|  |  |  |  |  |               move.l 16(a0),d1
   16f1c:	|  |  |  |  |  |               move.l 136(sp),d0
   16f20:	|  |  |  |  |  |               add.l d0,d0
   16f22:	|  |  |  |  |  |               add.l d0,d0
   16f24:	|  |  |  |  |  |               movea.l d1,a0
   16f26:	|  |  |  |  |  |               adda.l d0,a0
   16f28:	|  |  |  |  |  |               move.l (a0),d1
   16f2a:	|  |  |  |  |  |               move.l 132(sp),d0
   16f2e:	|  |  |  |  |  |               add.l d0,d0
   16f30:	|  |  |  |  |  |               add.l d0,d0
   16f32:	|  |  |  |  |  |               movea.l d1,a0
   16f34:	|  |  |  |  |  |               adda.l d0,a0
   16f36:	|  |  |  |  |  |               move.l (a0),d0
   16f38:	|  |  |  |  |  |               moveq #-1,d1
   16f3a:	|  |  |  |  |  |               cmp.l d0,d1
   16f3c:	|  |  |  |  |  |  /----------- bne.w 17042 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f40:	|  |  |  |  |  |  |            clr.l 122(sp)
   16f44:	|  |  |  |  |  |  |     /----- bra.w 17030 <setFloor+0x6d2>
						if (d != i && d != j) {
   16f48:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16f4c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16f50:	|  |  |  |  |  |  |  |  |  /-- beq.w 1702c <setFloor+0x6ce>
   16f54:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16f58:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16f5c:	|  |  |  |  |  |  |  |  |  +-- beq.w 1702c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16f60:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16f66:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f6a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f76:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f78:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f7c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f80:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f82:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f84:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16f86:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16f8a:	|  |  |  |  |  |  |  |  |  +-- bne.w 1702c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16f8e:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16f94:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f98:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fa0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fa2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fa4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fa6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16faa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fb0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fb2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16fb4:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1702c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16fb6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16fba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fbc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fbe:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16fc2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fc4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fc6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16fca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fcc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fce:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fd0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fd2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16fd4:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16fd8:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1702c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16fda:	|  |  |  |  |  |  |  |  |  |   movea.l 1ca1e <currentFloor>,a0
   16fe0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16fe4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16fe8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fec:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fee:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ff0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ff2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16ff6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ff8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ffa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ffc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ffe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17002:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17006:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17008:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1700a:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1700e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17010:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17012:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17016:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17018:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1701a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1701c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1701e:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   17022:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17024:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   17026:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1702c:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   17030:	|  |  |  |  |  |  |  |  \----> movea.l 1ca1e <currentFloor>,a0
   17036:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1703a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1703e:	|  |  |  |  |  |  |  \-------- bgt.w 16f48 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17042:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   17046:	|  |  |  |  |  \-------------> movea.l 1ca1e <currentFloor>,a0
   1704c:	|  |  |  |  |                  move.l 8(a0),d0
   17050:	|  |  |  |  |                  cmp.l 132(sp),d0
   17054:	|  |  |  |  \----------------- bgt.w 16f12 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17058:	|  |  |  |                     addq.l #1,136(sp)
   1705c:	|  |  |  \-------------------> movea.l 1ca1e <currentFloor>,a0
   17062:	|  |  |                        move.l 8(a0),d0
   17066:	|  |  |                        cmp.l 136(sp),d0
   1706a:	|  |  \----------------------- bgt.w 16f0a <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1706e:	|  |                           tst.w 130(sp)
   17072:	|  \-------------------------- bne.w 16efa <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17076:	|                              clr.l 136(sp)
   1707a:	|                          /-- bra.s 170a2 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1707c:	|                       /--|-> move.l 136(sp),d0
   17080:	|                       |  |   add.l d0,d0
   17082:	|                       |  |   add.l d0,d0
   17084:	|                       |  |   movea.l 62(sp),a0
   17088:	|                       |  |   adda.l d0,a0
   1708a:	|                       |  |   move.l (a0),54(sp)
   1708e:	|                       |  |   move.l 1c902 <SysBase>,d0
   17094:	|                       |  |   movea.l d0,a6
   17096:	|                       |  |   movea.l 54(sp),a1
   1709a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1709e:	|                       |  |   addq.l #1,136(sp)
   170a2:	|                       |  \-> movea.l 1ca1e <currentFloor>,a0
   170a8:	|                       |      move.l 8(a0),d0
   170ac:	|                       |      cmp.l 136(sp),d0
   170b0:	|                       \----- bgt.s 1707c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   170b2:	|                              move.l 62(sp),58(sp)
   170b8:	|                              move.l 1c902 <SysBase>,d0
   170be:	|                              movea.l d0,a6
   170c0:	|                              movea.l 58(sp),a1
   170c4:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   170c8:	|                              clr.l 62(sp)

	return TRUE;
   170cc:	|                              moveq #1,d0
}
   170ce:	\----------------------------> movea.l (sp)+,a2
   170d0:	                               movea.l (sp)+,a6
   170d2:	                               lea 132(sp),sp
   170d6:	                               rts

000170d8 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   170d8:	jsr 165c6 <killFloor>
	noFloor ();
   170de:	jsr 164ea <noFloor>
   170e4:	nop
   170e6:	rts

000170e8 <WaitVbl>:
void WaitVbl() {
   170e8:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   170ea:	   /-> movea.l #14675972,a0
   170f0:	   |   move.l (a0),d0
   170f2:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   170f4:	   |   move.l (sp),d0
   170f6:	   |   andi.l #130816,d0
   170fc:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   170fe:	   |   move.l (sp),d0
   17100:	   |   cmpi.l #76800,d0
   17106:	   \-- beq.s 170ea <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17108:	/----> movea.l #14675972,a0
   1710e:	|      move.l (a0),d0
   17110:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17114:	|      move.l 4(sp),d0
   17118:	|      andi.l #130816,d0
   1711e:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17122:	|      move.l 4(sp),d0
   17126:	|      cmpi.l #76800,d0
   1712c:	|  /-- beq.s 17130 <WaitVbl+0x48>
	while (1) {
   1712e:	\--|-- bra.s 17108 <WaitVbl+0x20>
			break;
   17130:	   \-> nop
}
   17132:	       nop
   17134:	       addq.l #8,sp
   17136:	       rts

00017138 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17138:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1713a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1713e:	   /-- bra.s 17150 <memset+0x18>
		*ptr++ = val;
   17140:	/--|-> move.l (sp),d0
   17142:	|  |   move.l d0,d1
   17144:	|  |   addq.l #1,d1
   17146:	|  |   move.l d1,(sp)
   17148:	|  |   move.l 12(sp),d1
   1714c:	|  |   movea.l d0,a0
   1714e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17150:	|  \-> move.l 16(sp),d0
   17154:	|      move.l d0,d1
   17156:	|      subq.l #1,d1
   17158:	|      move.l d1,16(sp)
   1715c:	|      tst.l d0
   1715e:	\----- bne.s 17140 <memset+0x8>
	return dest;
   17160:	       move.l 8(sp),d0
}
   17164:	       addq.l #4,sp
   17166:	       rts

00017168 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17168:	       subq.l #8,sp
   1716a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1716c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17172:	       move.l 20(sp),4(sp)
	while(len--)
   17178:	   /-- bra.s 1719a <memcpy+0x32>
		*d++ = *s++;
   1717a:	/--|-> move.l 4(sp),d1
   1717e:	|  |   move.l d1,d0
   17180:	|  |   addq.l #1,d0
   17182:	|  |   move.l d0,4(sp)
   17186:	|  |   move.l 8(sp),d0
   1718a:	|  |   move.l d0,d2
   1718c:	|  |   addq.l #1,d2
   1718e:	|  |   move.l d2,8(sp)
   17192:	|  |   movea.l d1,a0
   17194:	|  |   move.b (a0),d1
   17196:	|  |   movea.l d0,a0
   17198:	|  |   move.b d1,(a0)
	while(len--)
   1719a:	|  \-> move.l 24(sp),d0
   1719e:	|      move.l d0,d1
   171a0:	|      subq.l #1,d1
   171a2:	|      move.l d1,24(sp)
   171a6:	|      tst.l d0
   171a8:	\----- bne.s 1717a <memcpy+0x12>
	return dest;
   171aa:	       move.l 16(sp),d0
}
   171ae:	       move.l (sp)+,d2
   171b0:	       addq.l #8,sp
   171b2:	       rts

000171b4 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   171b4:	       lea -128(sp),sp
   171b8:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   171bc:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4ca9>,d0
   171c2:	       cmpi.w #20153,d0
   171c6:	   /-- beq.s 171ea <KPrintF+0x36>
   171c8:	   |   cmpi.w #-24562,d0
   171cc:	   +-- beq.s 171ea <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   171ce:	   |   movea.l 1c902 <SysBase>,a6
   171d4:	   |   movea.l 144(sp),a0
   171d8:	   |   lea 148(sp),a1
   171dc:	   |   lea 17c48 <KPutCharX>,a2
   171e2:	   |   suba.l a3,a3
   171e4:	   |   jsr -522(a6)
}
   171e8:	/--|-- bra.s 17214 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   171ea:	|  \-> movea.l 1c902 <SysBase>,a6
   171f0:	|      movea.l 144(sp),a0
   171f4:	|      lea 148(sp),a1
   171f8:	|      lea 17c56 <PutChar>,a2
   171fe:	|      lea 12(sp),a3
   17202:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17206:	|      move.l a3,-(sp)
   17208:	|      pea 56 <_start+0x56>
   1720c:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4ca9>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17212:	|      addq.l #8,sp
}
   17214:	\----> movem.l (sp)+,a2-a3/a6
   17218:	       lea 128(sp),sp
   1721c:	       rts

0001721e <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1721e:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17220:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17226:	       movea.l (sp),a0
   17228:	       move.w (a0),d0
   1722a:	       cmpi.w #20153,d0
   1722e:	   /-- beq.s 1723a <debug_cmd+0x1c>
   17230:	   |   movea.l (sp),a0
   17232:	   |   move.w (a0),d0
   17234:	   |   cmpi.w #-24562,d0
   17238:	/--|-- bne.s 17258 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1723a:	|  \-> move.l 20(sp),-(sp)
   1723e:	|      move.l 20(sp),-(sp)
   17242:	|      move.l 20(sp),-(sp)
   17246:	|      move.l 20(sp),-(sp)
   1724a:	|      pea 58 <_start+0x58>
   1724e:	|      movea.l 20(sp),a0
   17252:	|      jsr (a0)
   17254:	|      lea 20(sp),sp
	}
}
   17258:	\----> nop
   1725a:	       addq.l #4,sp
   1725c:	       rts

0001725e <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1725e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17260:	   /-- bra.s 17282 <my_strncpy+0x24>
		*destination++ = *source++;
   17262:	/--|-> move.l 12(sp),d1
   17266:	|  |   move.l d1,d0
   17268:	|  |   addq.l #1,d0
   1726a:	|  |   move.l d0,12(sp)
   1726e:	|  |   move.l 8(sp),d0
   17272:	|  |   move.l d0,d2
   17274:	|  |   addq.l #1,d2
   17276:	|  |   move.l d2,8(sp)
   1727a:	|  |   movea.l d1,a0
   1727c:	|  |   move.b (a0),d1
   1727e:	|  |   movea.l d0,a0
   17280:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17282:	|  \-> movea.l 12(sp),a0
   17286:	|      move.b (a0),d0
   17288:	|  /-- beq.s 17290 <my_strncpy+0x32>
   1728a:	|  |   subq.l #1,16(sp)
   1728e:	\--|-- bne.s 17262 <my_strncpy+0x4>
	*destination = '\0';
   17290:	   \-> movea.l 8(sp),a0
   17294:	       clr.b (a0)
}
   17296:	       nop
   17298:	       move.l (sp)+,d2
   1729a:	       rts

0001729c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1729c:	    lea -60(sp),sp
   172a0:	    movea.l 72(sp),a1
   172a4:	    movea.l 76(sp),a0
   172a8:	    move.l 80(sp),d1
   172ac:	    move.l 84(sp),d0
   172b0:	    movea.w a1,a1
   172b2:	    move.w a1,8(sp)
   172b6:	    movea.w a0,a0
   172b8:	    move.w a0,6(sp)
   172bc:	    move.w d1,d1
   172be:	    move.w d1,4(sp)
   172c2:	    move.w d0,d0
   172c4:	    move.w d0,2(sp)
	struct debug_resource resource = {
   172c8:	    lea 10(sp),a0
   172cc:	    clr.l (a0)
   172ce:	    addq.l #4,a0
   172d0:	    clr.l (a0)
   172d2:	    addq.l #4,a0
   172d4:	    clr.l (a0)
   172d6:	    addq.l #4,a0
   172d8:	    clr.l (a0)
   172da:	    addq.l #4,a0
   172dc:	    clr.l (a0)
   172de:	    addq.l #4,a0
   172e0:	    clr.l (a0)
   172e2:	    addq.l #4,a0
   172e4:	    clr.l (a0)
   172e6:	    addq.l #4,a0
   172e8:	    clr.l (a0)
   172ea:	    addq.l #4,a0
   172ec:	    clr.l (a0)
   172ee:	    addq.l #4,a0
   172f0:	    clr.l (a0)
   172f2:	    addq.l #4,a0
   172f4:	    clr.l (a0)
   172f6:	    addq.l #4,a0
   172f8:	    clr.l (a0)
   172fa:	    addq.l #4,a0
   172fc:	    clr.w (a0)
   172fe:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17300:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17304:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17308:	    move.w 8(sp),d0
   1730c:	/-- bpl.s 17310 <debug_register_bitmap+0x74>
   1730e:	|   addq.w #7,d0
   17310:	\-> asr.w #3,d0
   17312:	    movea.w d0,a0
   17314:	    movea.w 6(sp),a1
   17318:	    move.l a1,-(sp)
   1731a:	    move.l a0,-(sp)
   1731c:	    jsr 17b40 <__mulsi3>
   17322:	    addq.l #8,sp
   17324:	    movea.w 4(sp),a0
   17328:	    move.l a0,-(sp)
   1732a:	    move.l d0,-(sp)
   1732c:	    jsr 17b40 <__mulsi3>
   17332:	    addq.l #8,sp
	struct debug_resource resource = {
   17334:	    move.l d0,14(sp)
   17338:	    move.w 2(sp),52(sp)
   1733e:	    move.w 8(sp),54(sp)
   17344:	    move.w 6(sp),56(sp)
   1734a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17350:	    moveq #0,d0
   17352:	    move.w 2(sp),d0
   17356:	    moveq #2,d1
   17358:	    and.l d1,d0
   1735a:	/-- beq.s 17366 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1735c:	|   move.l 14(sp),d0
   17360:	|   add.l d0,d0
   17362:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17366:	\-> pea 20 <_start+0x20>
   1736a:	    move.l 72(sp),-(sp)
   1736e:	    lea 18(sp),a0
   17372:	    move.l a0,d0
   17374:	    addq.l #8,d0
   17376:	    move.l d0,-(sp)
   17378:	    jsr 1725e <my_strncpy>
   1737e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17382:	    lea 10(sp),a0
   17386:	    clr.l -(sp)
   17388:	    clr.l -(sp)
   1738a:	    move.l a0,-(sp)
   1738c:	    pea 4 <_start+0x4>
   17390:	    jsr 1721e <debug_cmd>
   17396:	    lea 16(sp),sp
}
   1739a:	    nop
   1739c:	    lea 60(sp),sp
   173a0:	    rts

000173a2 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   173a2:	lea -12(sp),sp
   173a6:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   173a8:	move.l 20(sp),12(sp)
   173ae:	move.l 24(sp),8(sp)
   173b4:	move.l 1c912 <MathIeeeSingBasBase>,d0
   173ba:	movea.l d0,a6
   173bc:	move.l 12(sp),d0
   173c0:	move.l 8(sp),d1
   173c4:	jsr -66(a6)
   173c8:	move.l d0,4(sp)
   173cc:	move.l 4(sp),d0
}
   173d0:	movea.l (sp)+,a6
   173d2:	lea 12(sp),sp
   173d6:	rts

000173d8 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   173d8:	lea -32(sp),sp
   173dc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   173e0:	move.l 48(sp),36(sp)
   173e6:	move.l 52(sp),40(sp)
   173ec:	move.l 56(sp),28(sp)
   173f2:	move.l 60(sp),32(sp)
   173f8:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   173fe:	movea.l d0,a6
   17400:	move.l 36(sp),d0
   17404:	move.l 40(sp),d1
   17408:	move.l 28(sp),d2
   1740c:	move.l 32(sp),d3
   17410:	jsr -66(a6)
   17414:	move.l d0,12(sp)
   17418:	move.l d1,16(sp)
   1741c:	move.l 12(sp),20(sp)
   17422:	move.l 16(sp),24(sp)
   17428:	move.l 20(sp),d0
   1742c:	move.l 24(sp),d1
}
   17430:	movem.l (sp)+,d2-d3/a6
   17434:	lea 32(sp),sp
   17438:	rts

0001743a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1743a:	lea -32(sp),sp
   1743e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17442:	move.l 48(sp),36(sp)
   17448:	move.l 52(sp),40(sp)
   1744e:	move.l 56(sp),28(sp)
   17454:	move.l 60(sp),32(sp)
   1745a:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   17460:	movea.l d0,a6
   17462:	move.l 36(sp),d0
   17466:	move.l 40(sp),d1
   1746a:	move.l 28(sp),d2
   1746e:	move.l 32(sp),d3
   17472:	jsr -84(a6)
   17476:	move.l d0,12(sp)
   1747a:	move.l d1,16(sp)
   1747e:	move.l 12(sp),20(sp)
   17484:	move.l 16(sp),24(sp)
   1748a:	move.l 20(sp),d0
   1748e:	move.l 24(sp),d1
}
   17492:	movem.l (sp)+,d2-d3/a6
   17496:	lea 32(sp),sp
   1749a:	rts

0001749c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1749c:	lea -12(sp),sp
   174a0:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   174a2:	move.l 20(sp),12(sp)
   174a8:	move.l 24(sp),8(sp)
   174ae:	move.l 1c912 <MathIeeeSingBasBase>,d0
   174b4:	movea.l d0,a6
   174b6:	move.l 12(sp),d0
   174ba:	move.l 8(sp),d1
   174be:	jsr -84(a6)
   174c2:	move.l d0,4(sp)
   174c6:	move.l 4(sp),d0
}
   174ca:	movea.l (sp)+,a6
   174cc:	lea 12(sp),sp
   174d0:	rts

000174d2 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   174d2:	lea -12(sp),sp
   174d6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   174d8:	move.l 20(sp),12(sp)
   174de:	move.l 24(sp),8(sp)
   174e4:	move.l 1c912 <MathIeeeSingBasBase>,d0
   174ea:	movea.l d0,a6
   174ec:	move.l 12(sp),d0
   174f0:	move.l 8(sp),d1
   174f4:	jsr -42(a6)
   174f8:	move.l d0,4(sp)
   174fc:	move.l 4(sp),d0
}
   17500:	movea.l (sp)+,a6
   17502:	lea 12(sp),sp
   17506:	rts

00017508 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17508:	lea -20(sp),sp
   1750c:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1750e:	move.l 28(sp),20(sp)
   17514:	move.l 1c91e <MathIeeeDoubTransBase>,d0
   1751a:	movea.l d0,a6
   1751c:	move.l 20(sp),d0
   17520:	jsr -108(a6)
   17524:	move.l d0,4(sp)
   17528:	move.l d1,8(sp)
   1752c:	move.l 4(sp),12(sp)
   17532:	move.l 8(sp),16(sp)
   17538:	move.l 12(sp),d0
   1753c:	move.l 16(sp),d1
}
   17540:	movea.l (sp)+,a6
   17542:	lea 20(sp),sp
   17546:	rts

00017548 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17548:	lea -12(sp),sp
   1754c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1754e:	move.l 20(sp),8(sp)
   17554:	move.l 24(sp),12(sp)
   1755a:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   17560:	movea.l d0,a6
   17562:	move.l 8(sp),d0
   17566:	move.l 12(sp),d1
   1756a:	jsr -30(a6)
   1756e:	move.l d0,4(sp)
   17572:	move.l 4(sp),d0
}
   17576:	movea.l (sp)+,a6
   17578:	lea 12(sp),sp
   1757c:	rts

0001757e <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1757e:	subq.l #8,sp
   17580:	move.l a6,-(sp)
	return IEEESPFix(value);
   17582:	move.l 16(sp),8(sp)
   17588:	move.l 1c912 <MathIeeeSingBasBase>,d0
   1758e:	movea.l d0,a6
   17590:	move.l 8(sp),d0
   17594:	jsr -30(a6)
   17598:	move.l d0,4(sp)
   1759c:	move.l 4(sp),d0
}
   175a0:	movea.l (sp)+,a6
   175a2:	addq.l #8,sp
   175a4:	rts

000175a6 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   175a6:	lea -20(sp),sp
   175aa:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   175ac:	move.l 28(sp),20(sp)
   175b2:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   175b8:	movea.l d0,a6
   175ba:	move.l 20(sp),d0
   175be:	jsr -36(a6)
   175c2:	move.l d0,4(sp)
   175c6:	move.l d1,8(sp)
   175ca:	move.l 4(sp),12(sp)
   175d0:	move.l 8(sp),16(sp)
   175d6:	move.l 12(sp),d0
   175da:	move.l 16(sp),d1
}
   175de:	movea.l (sp)+,a6
   175e0:	lea 20(sp),sp
   175e4:	rts

000175e6 <__floatsisf>:

FLOAT __floatsisf(int i) {
   175e6:	subq.l #8,sp
   175e8:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   175ea:	move.l 16(sp),8(sp)
   175f0:	move.l 1c912 <MathIeeeSingBasBase>,d0
   175f6:	movea.l d0,a6
   175f8:	move.l 8(sp),d0
   175fc:	jsr -36(a6)
   17600:	move.l d0,4(sp)
   17604:	move.l 4(sp),d0
}
   17608:	movea.l (sp)+,a6
   1760a:	addq.l #8,sp
   1760c:	rts

0001760e <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1760e:	subq.l #8,sp
   17610:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17612:	move.l 16(sp),8(sp)
   17618:	move.l 1c912 <MathIeeeSingBasBase>,d0
   1761e:	movea.l d0,a6
   17620:	move.l 8(sp),d0
   17624:	jsr -36(a6)
   17628:	move.l d0,4(sp)
   1762c:	move.l 4(sp),d0
}
   17630:	movea.l (sp)+,a6
   17632:	addq.l #8,sp
   17634:	rts

00017636 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17636:	lea -32(sp),sp
   1763a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1763e:	move.l 48(sp),36(sp)
   17644:	move.l 52(sp),40(sp)
   1764a:	move.l 56(sp),28(sp)
   17650:	move.l 60(sp),32(sp)
   17656:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   1765c:	movea.l d0,a6
   1765e:	move.l 36(sp),d0
   17662:	move.l 40(sp),d1
   17666:	move.l 28(sp),d2
   1766a:	move.l 32(sp),d3
   1766e:	jsr -78(a6)
   17672:	move.l d0,12(sp)
   17676:	move.l d1,16(sp)
   1767a:	move.l 12(sp),20(sp)
   17680:	move.l 16(sp),24(sp)
   17686:	move.l 20(sp),d0
   1768a:	move.l 24(sp),d1
}
   1768e:	movem.l (sp)+,d2-d3/a6
   17692:	lea 32(sp),sp
   17696:	rts

00017698 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17698:	lea -12(sp),sp
   1769c:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1769e:	move.l 20(sp),12(sp)
   176a4:	move.l 24(sp),8(sp)
   176aa:	move.l 1c912 <MathIeeeSingBasBase>,d0
   176b0:	movea.l d0,a6
   176b2:	move.l 12(sp),d0
   176b6:	move.l 8(sp),d1
   176ba:	jsr -78(a6)
   176be:	move.l d0,4(sp)
   176c2:	move.l 4(sp),d0
}
   176c6:	movea.l (sp)+,a6
   176c8:	lea 12(sp),sp
   176cc:	rts

000176ce <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   176ce:	lea -12(sp),sp
   176d2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176d4:	move.l 20(sp),12(sp)
   176da:	move.l 24(sp),8(sp)
   176e0:	move.l 1c912 <MathIeeeSingBasBase>,d0
   176e6:	movea.l d0,a6
   176e8:	move.l 12(sp),d0
   176ec:	move.l 8(sp),d1
   176f0:	jsr -42(a6)
   176f4:	move.l d0,4(sp)
   176f8:	move.l 4(sp),d0
}
   176fc:	movea.l (sp)+,a6
   176fe:	lea 12(sp),sp
   17702:	rts

00017704 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17704:	lea -20(sp),sp
   17708:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1770c:	move.l 36(sp),24(sp)
   17712:	move.l 40(sp),28(sp)
   17718:	move.l 44(sp),16(sp)
   1771e:	move.l 48(sp),20(sp)
   17724:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   1772a:	movea.l d0,a6
   1772c:	move.l 24(sp),d0
   17730:	move.l 28(sp),d1
   17734:	move.l 16(sp),d2
   17738:	move.l 20(sp),d3
   1773c:	jsr -42(a6)
   17740:	move.l d0,12(sp)
   17744:	move.l 12(sp),d0
}
   17748:	movem.l (sp)+,d2-d3/a6
   1774c:	lea 20(sp),sp
   17750:	rts

00017752 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17752:	lea -12(sp),sp
   17756:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17758:	move.l 20(sp),12(sp)
   1775e:	move.l 24(sp),8(sp)
   17764:	move.l 1c912 <MathIeeeSingBasBase>,d0
   1776a:	movea.l d0,a6
   1776c:	move.l 12(sp),d0
   17770:	move.l 8(sp),d1
   17774:	jsr -42(a6)
   17778:	move.l d0,4(sp)
   1777c:	move.l 4(sp),d0
}
   17780:	movea.l (sp)+,a6
   17782:	lea 12(sp),sp
   17786:	rts

00017788 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17788:	lea -12(sp),sp
   1778c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1778e:	move.l 20(sp),12(sp)
   17794:	move.l 24(sp),8(sp)
   1779a:	move.l 1c912 <MathIeeeSingBasBase>,d0
   177a0:	movea.l d0,a6
   177a2:	move.l 12(sp),d0
   177a6:	move.l 8(sp),d1
   177aa:	jsr -42(a6)
   177ae:	move.l d0,4(sp)
   177b2:	move.l 4(sp),d0
}
   177b6:	movea.l (sp)+,a6
   177b8:	lea 12(sp),sp
   177bc:	rts

000177be <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   177be:	lea -20(sp),sp
   177c2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   177c6:	move.l 36(sp),24(sp)
   177cc:	move.l 40(sp),28(sp)
   177d2:	move.l 44(sp),16(sp)
   177d8:	move.l 48(sp),20(sp)
   177de:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   177e4:	movea.l d0,a6
   177e6:	move.l 24(sp),d0
   177ea:	move.l 28(sp),d1
   177ee:	move.l 16(sp),d2
   177f2:	move.l 20(sp),d3
   177f6:	jsr -42(a6)
   177fa:	move.l d0,12(sp)
   177fe:	move.l 12(sp),d0
}
   17802:	movem.l (sp)+,d2-d3/a6
   17806:	lea 20(sp),sp
   1780a:	rts

0001780c <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   1780c:	lea -12(sp),sp
   17810:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17812:	move.l 20(sp),12(sp)
   17818:	move.l 24(sp),8(sp)
   1781e:	move.l 1c912 <MathIeeeSingBasBase>,d0
   17824:	movea.l d0,a6
   17826:	move.l 12(sp),d0
   1782a:	move.l 8(sp),d1
   1782e:	jsr -42(a6)
   17832:	move.l d0,4(sp)
   17836:	move.l 4(sp),d0
}
   1783a:	movea.l (sp)+,a6
   1783c:	lea 12(sp),sp
   17840:	rts

00017842 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17842:	lea -12(sp),sp
   17846:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17848:	move.l 20(sp),12(sp)
   1784e:	move.l 24(sp),8(sp)
   17854:	move.l 1c912 <MathIeeeSingBasBase>,d0
   1785a:	movea.l d0,a6
   1785c:	move.l 12(sp),d0
   17860:	move.l 8(sp),d1
   17864:	jsr -42(a6)
   17868:	move.l d0,4(sp)
   1786c:	move.l 4(sp),d0
}
   17870:	movea.l (sp)+,a6
   17872:	lea 12(sp),sp
   17876:	rts

00017878 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17878:	lea -32(sp),sp
   1787c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17880:	move.l 48(sp),36(sp)
   17886:	move.l 52(sp),40(sp)
   1788c:	move.l 56(sp),28(sp)
   17892:	move.l 60(sp),32(sp)
   17898:	move.l 1c91a <MathIeeeDoubBasBase>,d0
   1789e:	movea.l d0,a6
   178a0:	move.l 36(sp),d0
   178a4:	move.l 40(sp),d1
   178a8:	move.l 28(sp),d2
   178ac:	move.l 32(sp),d3
   178b0:	jsr -72(a6)
   178b4:	move.l d0,12(sp)
   178b8:	move.l d1,16(sp)
   178bc:	move.l 12(sp),20(sp)
   178c2:	move.l 16(sp),24(sp)
   178c8:	move.l 20(sp),d0
   178cc:	move.l 24(sp),d1
}
   178d0:	movem.l (sp)+,d2-d3/a6
   178d4:	lea 32(sp),sp
   178d8:	rts

000178da <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   178da:	lea -12(sp),sp
   178de:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   178e0:	move.l 20(sp),12(sp)
   178e6:	move.l 24(sp),8(sp)
   178ec:	move.l 1c912 <MathIeeeSingBasBase>,d0
   178f2:	movea.l d0,a6
   178f4:	move.l 12(sp),d0
   178f8:	move.l 8(sp),d1
   178fc:	jsr -72(a6)
   17900:	move.l d0,4(sp)
   17904:	move.l 4(sp),d0
}
   17908:	movea.l (sp)+,a6
   1790a:	lea 12(sp),sp
   1790e:	rts

00017910 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17910:	lea -12(sp),sp
   17914:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17916:	move.l 20(sp),8(sp)
   1791c:	move.l 24(sp),12(sp)
   17922:	move.l 1c91e <MathIeeeDoubTransBase>,d0
   17928:	movea.l d0,a6
   1792a:	move.l 8(sp),d0
   1792e:	move.l 12(sp),d1
   17932:	jsr -102(a6)
   17936:	move.l d0,4(sp)
   1793a:	move.l 4(sp),d0
}
   1793e:	movea.l (sp)+,a6
   17940:	lea 12(sp),sp
   17944:	rts

00017946 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17946:	       lea -24(sp),sp
   1794a:	       move.l a6,-(sp)
    if (x > 0) {
   1794c:	       clr.l -(sp)
   1794e:	       move.l 40(sp),-(sp)
   17952:	       jsr 17752 <__gtsf2>
   17958:	       addq.l #8,sp
   1795a:	       tst.l d0
   1795c:	   /-- ble.s 1798e <atan2f+0x48>
        return IEEESPAtan(y / x);
   1795e:	   |   move.l 36(sp),-(sp)
   17962:	   |   move.l 36(sp),-(sp)
   17966:	   |   jsr 1749c <__divsf3>
   1796c:	   |   addq.l #8,sp
   1796e:	   |   move.l d0,8(sp)
   17972:	   |   move.l 1c916 <MathIeeeSingTransBase>,d0
   17978:	   |   movea.l d0,a6
   1797a:	   |   move.l 8(sp),d0
   1797e:	   |   jsr -30(a6)
   17982:	   |   move.l d0,4(sp)
   17986:	   |   move.l 4(sp),d0
   1798a:	/--|-- bra.w 17aee <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1798e:	|  \-> clr.l -(sp)
   17990:	|      move.l 40(sp),-(sp)
   17994:	|      jsr 1780c <__ltsf2>
   1799a:	|      addq.l #8,sp
   1799c:	|      tst.l d0
   1799e:	|  /-- bge.s 17a12 <atan2f+0xcc>
   179a0:	|  |   clr.l -(sp)
   179a2:	|  |   move.l 36(sp),-(sp)
   179a6:	|  |   jsr 176ce <__gesf2>
   179ac:	|  |   addq.l #8,sp
   179ae:	|  |   tst.l d0
   179b0:	|  +-- blt.s 17a12 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   179b2:	|  |   move.l 36(sp),-(sp)
   179b6:	|  |   move.l 36(sp),-(sp)
   179ba:	|  |   jsr 1749c <__divsf3>
   179c0:	|  |   addq.l #8,sp
   179c2:	|  |   move.l d0,24(sp)
   179c6:	|  |   move.l 1c916 <MathIeeeSingTransBase>,d0
   179cc:	|  |   movea.l d0,a6
   179ce:	|  |   move.l 24(sp),d0
   179d2:	|  |   jsr -30(a6)
   179d6:	|  |   move.l d0,20(sp)
   179da:	|  |   move.l 20(sp),d0
   179de:	|  |   move.l d0,-(sp)
   179e0:	|  |   jsr 17508 <__extendsfdf2>
   179e6:	|  |   addq.l #4,sp
   179e8:	|  |   move.l #1413754136,-(sp)
   179ee:	|  |   move.l #1074340347,-(sp)
   179f4:	|  |   move.l d1,-(sp)
   179f6:	|  |   move.l d0,-(sp)
   179f8:	|  |   jsr 173d8 <__adddf3>
   179fe:	|  |   lea 16(sp),sp
   17a02:	|  |   move.l d1,-(sp)
   17a04:	|  |   move.l d0,-(sp)
   17a06:	|  |   jsr 17910 <__truncdfsf2>
   17a0c:	|  |   addq.l #8,sp
   17a0e:	+--|-- bra.w 17aee <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17a12:	|  \-> clr.l -(sp)
   17a14:	|      move.l 40(sp),-(sp)
   17a18:	|      jsr 1780c <__ltsf2>
   17a1e:	|      addq.l #8,sp
   17a20:	|      tst.l d0
   17a22:	|  /-- bge.s 17a94 <atan2f+0x14e>
   17a24:	|  |   clr.l -(sp)
   17a26:	|  |   move.l 36(sp),-(sp)
   17a2a:	|  |   jsr 1780c <__ltsf2>
   17a30:	|  |   addq.l #8,sp
   17a32:	|  |   tst.l d0
   17a34:	|  +-- bge.s 17a94 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17a36:	|  |   move.l 36(sp),-(sp)
   17a3a:	|  |   move.l 36(sp),-(sp)
   17a3e:	|  |   jsr 1749c <__divsf3>
   17a44:	|  |   addq.l #8,sp
   17a46:	|  |   move.l d0,16(sp)
   17a4a:	|  |   move.l 1c916 <MathIeeeSingTransBase>,d0
   17a50:	|  |   movea.l d0,a6
   17a52:	|  |   move.l 16(sp),d0
   17a56:	|  |   jsr -30(a6)
   17a5a:	|  |   move.l d0,12(sp)
   17a5e:	|  |   move.l 12(sp),d0
   17a62:	|  |   move.l d0,-(sp)
   17a64:	|  |   jsr 17508 <__extendsfdf2>
   17a6a:	|  |   addq.l #4,sp
   17a6c:	|  |   move.l #1413754136,-(sp)
   17a72:	|  |   move.l #1074340347,-(sp)
   17a78:	|  |   move.l d1,-(sp)
   17a7a:	|  |   move.l d0,-(sp)
   17a7c:	|  |   jsr 17878 <__subdf3>
   17a82:	|  |   lea 16(sp),sp
   17a86:	|  |   move.l d1,-(sp)
   17a88:	|  |   move.l d0,-(sp)
   17a8a:	|  |   jsr 17910 <__truncdfsf2>
   17a90:	|  |   addq.l #8,sp
   17a92:	+--|-- bra.s 17aee <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17a94:	|  \-> clr.l -(sp)
   17a96:	|      move.l 40(sp),-(sp)
   17a9a:	|      jsr 174d2 <__eqsf2>
   17aa0:	|      addq.l #8,sp
   17aa2:	|      tst.l d0
   17aa4:	|  /-- bne.s 17ac0 <atan2f+0x17a>
   17aa6:	|  |   clr.l -(sp)
   17aa8:	|  |   move.l 36(sp),-(sp)
   17aac:	|  |   jsr 17752 <__gtsf2>
   17ab2:	|  |   addq.l #8,sp
   17ab4:	|  |   tst.l d0
   17ab6:	|  +-- ble.s 17ac0 <atan2f+0x17a>
        return PI / 2;
   17ab8:	|  |   move.l #1070141403,d0
   17abe:	+--|-- bra.s 17aee <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17ac0:	|  \-> clr.l -(sp)
   17ac2:	|      move.l 40(sp),-(sp)
   17ac6:	|      jsr 174d2 <__eqsf2>
   17acc:	|      addq.l #8,sp
   17ace:	|      tst.l d0
   17ad0:	|  /-- bne.s 17aec <atan2f+0x1a6>
   17ad2:	|  |   clr.l -(sp)
   17ad4:	|  |   move.l 36(sp),-(sp)
   17ad8:	|  |   jsr 1780c <__ltsf2>
   17ade:	|  |   addq.l #8,sp
   17ae0:	|  |   tst.l d0
   17ae2:	|  +-- bge.s 17aec <atan2f+0x1a6>
        return -PI / 2;
   17ae4:	|  |   move.l #-1077342245,d0
   17aea:	+--|-- bra.s 17aee <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17aec:	|  \-> moveq #0,d0
    }
}
   17aee:	\----> movea.l (sp)+,a6
   17af0:	       lea 24(sp),sp
   17af4:	       rts

00017af6 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17af6:	lea -24(sp),sp
   17afa:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17afc:	move.l 32(sp),20(sp)
   17b02:	move.l 36(sp),24(sp)
   17b08:	move.l 1c91e <MathIeeeDoubTransBase>,d0
   17b0e:	movea.l d0,a6
   17b10:	move.l 20(sp),d0
   17b14:	move.l 24(sp),d1
   17b18:	jsr -96(a6)
   17b1c:	move.l d0,4(sp)
   17b20:	move.l d1,8(sp)
   17b24:	move.l 4(sp),12(sp)
   17b2a:	move.l 8(sp),16(sp)
   17b30:	move.l 12(sp),d0
   17b34:	move.l 16(sp),d1
}
   17b38:	movea.l (sp)+,a6
   17b3a:	lea 24(sp),sp
   17b3e:	rts

00017b40 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17b40:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17b44:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b48:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17b4c:	mulu.w 8(sp),d1
	addw	d1, d0
   17b50:	add.w d1,d0
	swap	d0
   17b52:	swap d0
	clrw	d0
   17b54:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b56:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17b5a:	mulu.w 10(sp),d1
	addl	d1, d0
   17b5e:	add.l d1,d0
	rts
   17b60:	rts

00017b62 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17b62:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17b64:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17b68:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17b6c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17b72:	   /-- bcc.s 17b8a <__udivsi3+0x28>
	movel	d0, d2
   17b74:	   |   move.l d0,d2
	clrw	d2
   17b76:	   |   clr.w d2
	swap	d2
   17b78:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17b7a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17b7c:	   |   move.w d2,d0
	swap	d0
   17b7e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17b80:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17b84:	   |   divu.w d1,d2
	movew	d2, d0
   17b86:	   |   move.w d2,d0
	jra	6f
   17b88:	/--|-- bra.s 17bba <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17b8a:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17b8c:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17b8e:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17b90:	|  |   cmpi.l #65536,d1
	jcc	4b
   17b96:	|  \-- bcc.s 17b8c <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17b98:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17b9a:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17ba0:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17ba2:	|      mulu.w d0,d1
	swap	d2
   17ba4:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17ba6:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17ba8:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17baa:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17bac:	|  /-- bne.s 17bb8 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17bae:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17bb0:	|  +-- bcs.s 17bb8 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17bb2:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17bb6:	+--|-- bls.s 17bba <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17bb8:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17bba:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17bbc:	       rts

00017bbe <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17bbe:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17bc0:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17bc2:	    move.l 12(sp),d1
	jpl	1f
   17bc6:	/-- bpl.s 17bcc <__divsi3+0xe>
	negl	d1
   17bc8:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17bca:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17bcc:	\-> move.l 8(sp),d0
	jpl	2f
   17bd0:	/-- bpl.s 17bd6 <__divsi3+0x18>
	negl	d0
   17bd2:	|   neg.l d0
	negb	d2
   17bd4:	|   neg.b d2

2:	movel	d1, sp@-
   17bd6:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17bd8:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17bda:	    jsr 17b62 <__udivsi3>
	addql	#8, sp
   17be0:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17be2:	    tst.b d2
	jpl	3f
   17be4:	/-- bpl.s 17be8 <__divsi3+0x2a>
	negl	d0
   17be6:	|   neg.l d0

3:	movel	sp@+, d2
   17be8:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17bea:	    rts

00017bec <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17bec:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17bf0:	move.l 4(sp),d0
	movel	d1, sp@-
   17bf4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17bf6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17bf8:	jsr 17bbe <__divsi3>
	addql	#8, sp
   17bfe:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17c00:	move.l 8(sp),d1
	movel	d1, sp@-
   17c04:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c06:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17c08:	jsr 17b40 <__mulsi3>
	addql	#8, sp
   17c0e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c10:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c14:	sub.l d0,d1
	movel	d1, d0
   17c16:	move.l d1,d0
	rts
   17c18:	rts

00017c1a <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17c1a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17c1e:	move.l 4(sp),d0
	movel	d1, sp@-
   17c22:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c24:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17c26:	jsr 17b62 <__udivsi3>
	addql	#8, sp
   17c2c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17c2e:	move.l 8(sp),d1
	movel	d1, sp@-
   17c32:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c34:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17c36:	jsr 17b40 <__mulsi3>
	addql	#8, sp
   17c3c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c3e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c42:	sub.l d0,d1
	movel	d1, d0
   17c44:	move.l d1,d0
	rts
   17c46:	rts

00017c48 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17c48:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17c4a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17c4e:	jsr -516(a6)
    move.l (sp)+, a6
   17c52:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17c54:	rts

00017c56 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17c56:	move.b d0,(a3)+
	rts
   17c58:	rts
