
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115737,d0
       8:	       subi.l #115737,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c419 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115737,d0
      40:	       subi.l #115737,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c419 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7fe2 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115737,d0
      7e:	       subi.l #115737,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c419 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13d88 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cbca <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13da0 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c41a <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13d88 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cbca <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c41a <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13d88 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cbca <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17e22 <PutChar+0x4>
     35c:	|  |              |   jsr 1737c <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cbd2 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cbd2 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cbd2 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cbd2 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cbd2 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cbd2 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cbd2 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17e4c <PutChar+0x2e>
     834:	|   jsr 1737c <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cbd2 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17e68 <PutChar+0x4a>
     8a6:	|   jsr 1737c <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cbd2 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cbd2 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cbd2 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cbd2 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cbd2 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cbd2 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cbd2 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cbd2 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cbca <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cbd2 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13d88 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cbd2 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1cac4 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cb8a <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cb86 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1cac4 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 1410 <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1cac4 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9920 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1cac4 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cac8 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cacc <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2cac <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -20(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17e90 <PutChar+0x72>
     e1a:	          jsr 1737c <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1cae0 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17ea9 <PutChar+0x8b>
     e30:	      |   jsr 1737c <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w fe8 <CstBlankScreen+0x1da>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cada <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,12(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cbd6 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 36(sp),d0
     e5a:	|         sub.l 28(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,10(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 40(sp),d0
     e6c:	|         move.l 32(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,8(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 12(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 12(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 12(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 12(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 12(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 10(sp),d0
     eb0:	|         movea.l 12(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 12(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 12(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1cae0 <CstBackDrop>,d0
     ed2:	|         move.l d0,20(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 28(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 32(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,20(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 8(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 10(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,6(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 10(sp),d0
     f10:	|         muls.w 8(sp),d0
     f14:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17ed7 <PutChar+0xb9>
     f1e:	|         jsr 1737c <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 16(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 20(sp),d0
     f30:	|  |  |   movea.l 12(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 12(sp),a0
     f3c:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cbd6 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,20(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,16(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 16(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 17ef7 <PutChar+0xd9>
     f68:	|         jsr 1737c <KPrintF>
     f6e:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f70:	|         move.w #2,1caec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f78:	|         move.l 1cb1e <winWidth>,d0
     f7e:	|         lsr.l #4,d0
     f80:	|         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
     f86:	|         move.l a0,d1
     f88:	|         addq.l #2,d1
     f8a:	|         move.l d1,1cb02 <CstBackDropBufferApplyCursor>
     f90:	|         move.l d0,d0
     f92:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f94:	|         move.l 1cb22 <winHeight>,d0
     f9a:	|         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
     fa0:	|         move.l a0,d1
     fa2:	|         addq.l #2,d1
     fa4:	|         move.l d1,1cb02 <CstBackDropBufferApplyCursor>
     faa:	|         move.l d0,d0
     fac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fae:	|         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
     fb4:	|         move.l a0,d0
     fb6:	|         addq.l #2,d0
     fb8:	|         move.l d0,1cb02 <CstBackDropBufferApplyCursor>
     fbe:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fc0:	|         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
     fc6:	|         move.l a0,d0
     fc8:	|         addq.l #2,d0
     fca:	|         move.l d0,1cb02 <CstBackDropBufferApplyCursor>
     fd0:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
     fd2:	|         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
     fd8:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fda:	|         pea 17f17 <PutChar+0xf9>
     fe0:	|         jsr 1737c <KPrintF>
     fe6:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
     fe8:	'-------> movea.l (sp)+,a6
     fea:	          lea 20(sp),sp
     fee:	          rts

00000ff0 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     ff0:	       lea -52(sp),sp
     ff4:	       move.l a6,-(sp)
     ff6:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     ff8:	       move.l #400,32(sp)
    1000:	       moveq #2,d0
    1002:	       move.l d0,28(sp)
    1006:	       move.l 1cbca <SysBase>,d0
    100c:	       movea.l d0,a6
    100e:	       move.l 32(sp),d0
    1012:	       move.l 28(sp),d1
    1016:	       jsr -198(a6)
    101a:	       move.l d0,24(sp)
    101e:	       move.l 24(sp),d0
    1022:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1026:	   ,-- bne.s 1050 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1028:	   |   pea 28 <_start+0x28>
    102c:	   |   pea 17f2c <PutChar+0x10e>
    1032:	   |   jsr 1737c <KPrintF>
    1038:	   |   addq.l #8,sp
    Exit(1);
    103a:	   |   moveq #1,d1
    103c:	   |   move.l d1,16(sp)
    1040:	   |   move.l 1cbd2 <DOSBase>,d0
    1046:	   |   movea.l d0,a6
    1048:	   |   move.l 16(sp),d1
    104c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    1050:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1056:	       move.l 56(sp),1cb0e <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    105e:	       move.l #115740,52(sp)
  for(int i=0; i<16;i++)
    1066:	       clr.l 48(sp)
    106a:	   ,-- bra.s 1090 <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    106c:	,--|-> move.l 52(sp),d1
    1070:	|  |   move.l d1,d2
    1072:	|  |   addq.l #4,d2
    1074:	|  |   move.l d2,52(sp)
    1078:	|  |   move.l 56(sp),d0
    107c:	|  |   move.l d0,d2
    107e:	|  |   addq.l #4,d2
    1080:	|  |   move.l d2,56(sp)
    1084:	|  |   movea.l d1,a0
    1086:	|  |   move.l (a0),d1
    1088:	|  |   movea.l d0,a0
    108a:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    108c:	|  |   addq.l #1,48(sp)
    1090:	|  '-> moveq #15,d0
    1092:	|      cmp.l 48(sp),d0
    1096:	'----- bge.s 106c <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1098:	       move.l #115804,52(sp)

  for(int i=0; i<12;i++)
    10a0:	       clr.l 44(sp)
    10a4:	   ,-- bra.s 10ca <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    10a6:	,--|-> move.l 52(sp),d1
    10aa:	|  |   move.l d1,d2
    10ac:	|  |   addq.l #4,d2
    10ae:	|  |   move.l d2,52(sp)
    10b2:	|  |   move.l 56(sp),d0
    10b6:	|  |   move.l d0,d2
    10b8:	|  |   addq.l #4,d2
    10ba:	|  |   move.l d2,56(sp)
    10be:	|  |   movea.l d1,a0
    10c0:	|  |   move.l (a0),d1
    10c2:	|  |   movea.l d0,a0
    10c4:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10c6:	|  |   addq.l #1,44(sp)
    10ca:	|  '-> moveq #11,d0
    10cc:	|      cmp.l 44(sp),d0
    10d0:	'----- bge.s 10a6 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10d2:	       move.l #115852,52(sp)
  for(int i=0; i<10;i++)
    10da:	       clr.l 40(sp)
    10de:	   ,-- bra.s 1104 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10e0:	,--|-> move.l 52(sp),d1
    10e4:	|  |   move.l d1,d2
    10e6:	|  |   addq.l #4,d2
    10e8:	|  |   move.l d2,52(sp)
    10ec:	|  |   move.l 56(sp),d0
    10f0:	|  |   move.l d0,d2
    10f2:	|  |   addq.l #4,d2
    10f4:	|  |   move.l d2,56(sp)
    10f8:	|  |   movea.l d1,a0
    10fa:	|  |   move.l (a0),d1
    10fc:	|  |   movea.l d0,a0
    10fe:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1100:	|  |   addq.l #1,40(sp)
    1104:	|  '-> moveq #9,d0
    1106:	|      cmp.l 40(sp),d0
    110a:	'----- bge.s 10e0 <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    110c:	       move.l #115892,52(sp)
  CstClColor = (UWORD *) cl;
    1114:	       move.l 56(sp),1cb06 <CstClColor>
  for(int i=0; i<32;i++)
    111c:	       clr.l 36(sp)
    1120:	   ,-- bra.s 1146 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1122:	,--|-> move.l 52(sp),d1
    1126:	|  |   move.l d1,d2
    1128:	|  |   addq.l #4,d2
    112a:	|  |   move.l d2,52(sp)
    112e:	|  |   move.l 56(sp),d0
    1132:	|  |   move.l d0,d2
    1134:	|  |   addq.l #4,d2
    1136:	|  |   move.l d2,56(sp)
    113a:	|  |   movea.l d1,a0
    113c:	|  |   move.l (a0),d1
    113e:	|  |   movea.l d0,a0
    1140:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1142:	|  |   addq.l #1,36(sp)
    1146:	|  '-> moveq #31,d0
    1148:	|      cmp.l 36(sp),d0
    114c:	'----- bge.s 1122 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    114e:	       moveq #40,d1
    1150:	       cmp.l 64(sp),d1
    1154:	   ,-- bge.s 11b2 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1156:	   |   moveq #-40,d2
    1158:	   |   add.l 64(sp),d2
    115c:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1160:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1166:	   |   move.l 8(sp),d0
    116a:	   |   move.l d0,d1
    116c:	   |   addq.l #2,d1
    116e:	   |   move.l d1,8(sp)
    1172:	   |   movea.l d0,a0
    1174:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1178:	   |   move.l 8(sp),d0
    117c:	   |   move.l d0,d1
    117e:	   |   addq.l #2,d1
    1180:	   |   move.l d1,8(sp)
    1184:	   |   move.l 12(sp),d1
    1188:	   |   movea.l d0,a0
    118a:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    118c:	   |   move.l 8(sp),d0
    1190:	   |   move.l d0,d1
    1192:	   |   addq.l #2,d1
    1194:	   |   move.l d1,8(sp)
    1198:	   |   movea.l d0,a0
    119a:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    119e:	   |   move.l 8(sp),d0
    11a2:	   |   move.l d0,d1
    11a4:	   |   addq.l #2,d1
    11a6:	   |   move.l d1,8(sp)
    11aa:	   |   move.l 12(sp),d1
    11ae:	   |   movea.l d0,a0
    11b0:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    11b2:	   '-> move.l 56(sp),d0
    11b6:	       move.l d0,d1
    11b8:	       addq.l #4,d1
    11ba:	       move.l d1,56(sp)
    11be:	       moveq #-2,d2
    11c0:	       movea.l d0,a0
    11c2:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11c4:	       move.l 20(sp),d0
}
    11c8:	       move.l (sp)+,d2
    11ca:	       movea.l (sp)+,a6
    11cc:	       lea 52(sp),sp
    11d0:	       rts

000011d2 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11d2:	                lea -40(sp),sp
    11d6:	                move.l a6,-(sp)
    11d8:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11da:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11e2:	                pea 17f67 <PutChar+0x149>
    11e8:	                jsr 1737c <KPrintF>
    11ee:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11f0:	                move.l 1cafe <CstBackDropBufferApplyStart>,d0
    11f6:	                move.l d0,1cb02 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11fc:	                move.l 1cafe <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    1204:	                movea.l 44(sp),a0
    1208:	                move.w (a0),d0
    120a:	,-------------- beq.w 1404 <CstDisplayBackDrop+0x232>
    120e:	|               move.l 1caf2 <CstDrawBuffer>,d0
    1214:	+-------------- beq.w 1404 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1218:	|               move.l 1cbd6 <GfxBase>,d0
    121e:	|               movea.l d0,a6
    1220:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1224:	|               movea.l 16(sp),a0
    1228:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    122e:	|               movea.l 16(sp),a0
    1232:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1238:	|               movea.l 16(sp),a0
    123c:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1242:	|     ,-------- bra.w 13aa <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1246:	|  ,--|-------> move.l 44(sp),d0
    124a:	|  |  |         move.l d0,d1
    124c:	|  |  |         addq.l #2,d1
    124e:	|  |  |         move.l d1,44(sp)
    1252:	|  |  |         movea.l d0,a0
    1254:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1258:	|  |  |         move.l 44(sp),d0
    125c:	|  |  |         move.l d0,d1
    125e:	|  |  |         addq.l #2,d1
    1260:	|  |  |         move.l d1,44(sp)
    1264:	|  |  |         movea.l d0,a0
    1266:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    126a:	|  |  |         move.l 44(sp),d0
    126e:	|  |  |         move.l d0,d1
    1270:	|  |  |         addq.l #2,d1
    1272:	|  |  |         move.l d1,44(sp)
    1276:	|  |  |         movea.l d0,a0
    1278:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    127c:	|  |  |         move.l 44(sp),d0
    1280:	|  |  |         move.l d0,d1
    1282:	|  |  |         addq.l #2,d1
    1284:	|  |  |         move.l d1,44(sp)
    1288:	|  |  |         movea.l d0,a0
    128a:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    128e:	|  |  |         move.l 1cb1e <winWidth>,d0
    1294:	|  |  |         lsr.l #3,d0
    1296:	|  |  |         move.l d0,d1
    1298:	|  |  |         move.w 14(sp),d0
    129c:	|  |  |         add.w d0,d0
    129e:	|  |  |         sub.w d0,d1
    12a0:	|  |  |         movea.l 16(sp),a0
    12a4:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    12a8:	|  |  |         move.l 1cb1e <winWidth>,d0
    12ae:	|  |  |         lsr.l #3,d0
    12b0:	|  |  |         move.l d0,d1
    12b2:	|  |  |         move.w 14(sp),d0
    12b6:	|  |  |         add.w d0,d0
    12b8:	|  |  |         sub.w d0,d1
    12ba:	|  |  |         movea.l 16(sp),a0
    12be:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12c2:	|  |  |         moveq #0,d0
    12c4:	|  |  |         move.w 8(sp),d0
    12c8:	|  |  |         move.l 1cb1e <winWidth>,d1
    12ce:	|  |  |         move.l d1,-(sp)
    12d0:	|  |  |         move.l d0,-(sp)
    12d2:	|  |  |         jsr 17d08 <__mulsi3>
    12d8:	|  |  |         addq.l #8,sp
    12da:	|  |  |         move.l d0,d1
    12dc:	|  |  |         lsr.l #3,d1
    12de:	|  |  |         move.l 1cae0 <CstBackDrop>,d0
    12e4:	|  |  |         add.l d0,d1
    12e6:	|  |  |         moveq #0,d0
    12e8:	|  |  |         move.w 10(sp),d0
    12ec:	|  |  |         move.l d1,d2
    12ee:	|  |  |         add.l d0,d2
    12f0:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12f4:	|  |  |         moveq #0,d0
    12f6:	|  |  |         move.w 8(sp),d0
    12fa:	|  |  |         move.l 1cb1e <winWidth>,d1
    1300:	|  |  |         move.l d1,-(sp)
    1302:	|  |  |         move.l d0,-(sp)
    1304:	|  |  |         jsr 17d08 <__mulsi3>
    130a:	|  |  |         addq.l #8,sp
    130c:	|  |  |         move.l d0,d1
    130e:	|  |  |         lsr.l #3,d1
    1310:	|  |  |         move.l 1caf2 <CstDrawBuffer>,d0
    1316:	|  |  |         add.l d0,d1
    1318:	|  |  |         moveq #0,d0
    131a:	|  |  |         move.w 10(sp),d0
    131e:	|  |  |         move.l d1,d2
    1320:	|  |  |         add.l d0,d2
    1322:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1326:	|  |  |         clr.l 32(sp)
    132a:	|  |  |     ,-- bra.s 13a2 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    132c:	|  |  |  ,--|-> move.l 40(sp),d0
    1330:	|  |  |  |  |   movea.l 16(sp),a0
    1334:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1338:	|  |  |  |  |   move.l 36(sp),d0
    133c:	|  |  |  |  |   movea.l 16(sp),a0
    1340:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1344:	|  |  |  |  |   move.w 12(sp),d0
    1348:	|  |  |  |  |   lsl.w #6,d0
    134a:	|  |  |  |  |   add.w 14(sp),d0
    134e:	|  |  |  |  |   movea.l 16(sp),a0
    1352:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1356:	|  |  |  |  |   move.l 1cb1e <winWidth>,d0
    135c:	|  |  |  |  |   lsr.l #3,d0
    135e:	|  |  |  |  |   move.l 1cb22 <winHeight>,d1
    1364:	|  |  |  |  |   move.l d1,-(sp)
    1366:	|  |  |  |  |   move.l d0,-(sp)
    1368:	|  |  |  |  |   jsr 17d08 <__mulsi3>
    136e:	|  |  |  |  |   addq.l #8,sp
    1370:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1374:	|  |  |  |  |   move.l 1cb1e <winWidth>,d0
    137a:	|  |  |  |  |   lsr.l #3,d0
    137c:	|  |  |  |  |   move.l 1cb22 <winHeight>,d1
    1382:	|  |  |  |  |   move.l d1,-(sp)
    1384:	|  |  |  |  |   move.l d0,-(sp)
    1386:	|  |  |  |  |   jsr 17d08 <__mulsi3>
    138c:	|  |  |  |  |   addq.l #8,sp
    138e:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1392:	|  |  |  |  |   move.l 1cbd6 <GfxBase>,d0
    1398:	|  |  |  |  |   movea.l d0,a6
    139a:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    139e:	|  |  |  |  |   addq.l #1,32(sp)
    13a2:	|  |  |  |  '-> moveq #4,d0
    13a4:	|  |  |  |      cmp.l 32(sp),d0
    13a8:	|  |  |  '----- bge.s 132c <CstDisplayBackDrop+0x15a>
  while(*cursor)
    13aa:	|  |  '-------> movea.l 44(sp),a0
    13ae:	|  |            move.w (a0),d0
    13b0:	|  '----------- bne.w 1246 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    13b4:	|               move.l 1cb0a <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    13bc:	|               move.l 1cb06 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13c4:	|               clr.l 20(sp)
    13c8:	|           ,-- bra.s 13fa <CstDisplayBackDrop+0x228>
    *tmp++;
    13ca:	|        ,--|-> move.l 24(sp),d0
    13ce:	|        |  |   move.l d0,d1
    13d0:	|        |  |   addq.l #2,d1
    13d2:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13d6:	|        |  |   move.l 28(sp),d1
    13da:	|        |  |   move.l d1,d2
    13dc:	|        |  |   addq.l #2,d2
    13de:	|        |  |   move.l d2,28(sp)
    13e2:	|        |  |   move.l 24(sp),d0
    13e6:	|        |  |   move.l d0,d2
    13e8:	|        |  |   addq.l #2,d2
    13ea:	|        |  |   move.l d2,24(sp)
    13ee:	|        |  |   movea.l d1,a0
    13f0:	|        |  |   move.w (a0),d1
    13f2:	|        |  |   movea.l d0,a0
    13f4:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13f6:	|        |  |   addq.l #1,20(sp)
    13fa:	|        |  '-> moveq #31,d0
    13fc:	|        |      cmp.l 20(sp),d0
    1400:	|        '----- bge.s 13ca <CstDisplayBackDrop+0x1f8>
    1402:	|           ,-- bra.s 1406 <CstDisplayBackDrop+0x234>
    return;
    1404:	'-----------|-> nop
  }
}
    1406:	            '-> move.l (sp)+,d2
    1408:	                movea.l (sp)+,a6
    140a:	                lea 40(sp),sp
    140e:	                rts

00001410 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1410:	lea -20(sp),sp
    1414:	movea.l 24(sp),a0
    1418:	move.l 28(sp),d1
    141c:	move.l 32(sp),d0
    1420:	movea.w a0,a0
    1422:	move.w a0,4(sp)
    1426:	move.w d1,d1
    1428:	move.w d1,2(sp)
    142c:	move.w d0,d0
    142e:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1430:	move.w 2(sp),d0
    1434:	movea.l 36(sp),a0
    1438:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    143a:	move.w 4(sp),d0
    143e:	lsr.w #1,d0
    1440:	movea.l 36(sp),a0
    1444:	addq.l #1,a0
    1446:	move.l d0,d0
    1448:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    144a:	move.w 2(sp),d1
    144e:	move.w (sp),d0
    1450:	movea.l 36(sp),a0
    1454:	addq.l #2,a0
    1456:	add.b d1,d0
    1458:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    145a:	move.w 4(sp),d0
    145e:	andi.w #1,d0
    1462:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1466:	move.w 2(sp),d0
    146a:	add.w (sp),d0
    146c:	move.w d0,d0
    146e:	andi.l #65535,d0
    1474:	asr.l #7,d0
    1476:	move.l d0,d0
    1478:	move.w d0,d1
    147a:	andi.w #2,d1
    147e:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1482:	moveq #0,d0
    1484:	move.w 2(sp),d0
    1488:	asr.l #6,d0
    148a:	move.l d0,d0
    148c:	move.w d0,d1
    148e:	andi.w #4,d1
    1492:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1496:	move.w 18(sp),d1
    149a:	move.w 16(sp),d0
    149e:	add.b d0,d1
    14a0:	move.w 14(sp),d0
    14a4:	movea.l 36(sp),a0
    14a8:	addq.l #3,a0
    14aa:	add.b d1,d0
    14ac:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14ae:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14b4:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14ba:	move.l 10(sp),d0
    14be:	clr.w d0
    14c0:	swap d0
    14c2:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14c6:	move.l 1cb0e <CstClCursor>,d0
    14cc:	movea.l d0,a0
    14ce:	addq.l #2,a0
    14d0:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14d4:	move.l 1cb0e <CstClCursor>,d0
    14da:	movea.l d0,a0
    14dc:	addq.l #6,a0
    14de:	move.w 8(sp),(a0)

}
    14e2:	nop
    14e4:	lea 20(sp),sp
    14e8:	rts

000014ea <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14ea:	    move.w 1caec <CstApplyBackDropCounter>,d0
    14f0:	,-- beq.s 1506 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14f2:	|   jsr 11d2 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14f8:	|   move.w 1caec <CstApplyBackDropCounter>,d0
    14fe:	|   subq.w #1,d0
    1500:	|   move.w d0,1caec <CstApplyBackDropCounter>
  }    
}
    1506:	'-> nop
    1508:	    rts

0000150a <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    150a:	                                                             subq.l #8,sp
    150c:	                                                             movem.l d2-d7/a2-a6,-(sp)
    1510:	                                                             movea.l 56(sp),a3
    1514:	                                                             movea.l 60(sp),a2
    1518:	                                                             move.l 64(sp),d2
    151c:	                                                             move.l 68(sp),d7
    1520:	                                                             movea.w d2,a4
    1522:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1526:	                                                             clr.l -(sp)
    1528:	                                                             pea 1 <_start+0x1>
    152c:	                                                             movea.w 6(a3),a0
    1530:	                                                             move.l a0,-(sp)
    1532:	                                                             movea.w 2(a3),a0
    1536:	                                                             move.l a0,-(sp)
    1538:	                                                             pea 17f83 <PutChar+0x165>
    153e:	                                                             move.l 1cb12 <CstZBufferResult>,-(sp)
    1544:	                                                             lea 17464 <debug_register_bitmap>,a5
    154a:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    154c:	                                                             clr.l -(sp)
    154e:	                                                             pea 1 <_start+0x1>
    1552:	                                                             movea.w 6(a3),a0
    1556:	                                                             move.l a0,-(sp)
    1558:	                                                             move.w 2(a3),d0
    155c:	                                                             addi.w #16,d0
    1560:	                                                             movea.w d0,a0
    1562:	                                                             move.l a0,-(sp)
    1564:	                                                             pea 17f8e <PutChar+0x170>
    156a:	                                                             move.l 1cb16 <CstZBufferWork>,-(sp)
    1570:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    1572:	                                                             lea 48(sp),sp
    1576:	                                                             cmpa.w #0,a2
    157a:	,----------------------------------------------------------- beq.w 1a16 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    157e:	|                                                            move.w d2,48(sp)
    1582:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1584:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1588:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    158a:	|                       ,----------------------------------> move.w a5,d3
    158c:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    158e:	|                       |                                    andi.l #65535,d3
    1594:	|                       |                                    cmp.l 16(a2),d3
    1598:	|                       |  ,-------------------------------- bge.w 1732 <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    159c:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15a0:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15a4:	|                       |  |                                 move.w d6,d0
    15a6:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15aa:	|                       |  |                                 move.w 6(a2),d4
    15ae:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15b0:	|                       |  |                                 cmp.w a4,d6
    15b2:	|                    ,--|--|-------------------------------- bge.w 18aa <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15b6:	|                    |  |  |                                 cmp.w a4,d0
    15b8:	|        ,-----------|--|--|-------------------------------- ble.w 1730 <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15bc:	|        |           |  |  |                                 move.w 50(sp),d0
    15c0:	|        |           |  |  |                                 cmp.w d0,d5
    15c2:	|        |     ,-----|--|--|-------------------------------- blt.w 19f6 <CstDrawZBuffer+0x4ec>
    15c6:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15c8:	|        |     |     |  |  |                                 cmpa.l d3,a0
    15ca:	|        +-----|-----|--|--|-------------------------------- bge.w 1730 <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15ce:	|        |     |     |  |  |                                 move.w 48(sp),d0
    15d2:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15d4:	|        |     |     |  |  |                                 move.w d0,d6
    15d6:	|        |     |     |  |  |                                 andi.w #15,d6
    15da:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15dc:	|        |     |     |  |  |                                 tst.l d2
    15de:	|        |  ,--|-----|--|--|-------------------------------- blt.w 1752 <CstDrawZBuffer+0x248>
    15e2:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    15e4:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15e6:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
          custom->bltalwm = 0xffff;                      
    15ee:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
          custom->bltcon1 = 0;          
    15f6:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    15fe:	|        |  |  |  |  |  |  |                                 lea 1cbd6 <GfxBase>,a0
    1604:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1606:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1608:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    160a:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    160c:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    1612:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1616:	|        |  |  |  |  |  |  |                                 clr.w d0
    1618:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    161a:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 1792 <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    161e:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    1620:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1624:	|        |  |  |  |  |  |  |           |     |               move.l 1cb16 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    162e:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    1630:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    1632:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    1634:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1638:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    163a:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1640:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    1642:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    1644:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1ab0 <CstDrawZBuffer+0x5a6>
    1648:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    164a:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    164c:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
            custom->bltdmod = 0;                                                            
    1652:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    165a:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    165c:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    165e:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    1660:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    1662:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 17d2 <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1666:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    166a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    166c:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    166e:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    1670:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17d08 <__mulsi3>
    1676:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1678:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17e8 <CstDrawZBuffer+0x2de>
    167e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    1680:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    1682:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
        UWORD bltsize =  height*64+bytewidth/2;          
    1688:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    168a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    168c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    168e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
       
        WaitBlit();
    1694:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cbd6 <GfxBase>,a0
    169a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    169c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    16a0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
        custom->bltalwm = 0xffff;
    16a8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
        custom->bltamod = 2;
    16b0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
        custom->bltbmod = 0;
    16b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb39c5>
        custom->bltdmod = 0;
    16c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16c8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
        custom->bltcon1 = 0;        
    16d0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16d8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1cb16 <CstZBufferWork>,d0
    16de:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    16e0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16e6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16e8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16ec:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16ee:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 1872 <CstDrawZBuffer+0x368>
    16f2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16f4:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    16f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17d08 <__mulsi3>
    16fe:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    1700:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    1702:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1704:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1706:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1708:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    170c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
        custom->bltdpt = (APTR) CstZBufferResult;
    1712:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1cb12 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    171c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    171e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    1720:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    1722:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 1860 <CstDrawZBuffer+0x356>
    1726:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    172a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
      zbufferset = 1;
    1730:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    1732:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1736:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    173a:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 158a <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    173e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    1740:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1a16 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    1744:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1cb12 <CstZBufferResult>,d0

}
    174a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    174e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    1750:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    1752:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1754:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1756:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1758:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    175a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
          custom->bltalwm = 0xffff;                      
    1762:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
          custom->bltcon1 = 0;          
    176a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>
            WaitBlit();   
    1772:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cbd6 <GfxBase>,a0
    1778:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    177a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    177c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    177e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1780:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1786:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    178a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    178c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    178e:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 161e <CstDrawZBuffer+0x114>
            WaitBlit();         
    1792:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1796:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1cb16 <CstZBufferWork>,d0
    179c:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    179e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
            custom->bltcon0 = 4096 + 0x9f0;              
    17a4:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17ac:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    17ae:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    17b0:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ac8 <CstDrawZBuffer+0x5be>
    17b4:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    17b6:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    17b8:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
            custom->bltdmod = 2;                                                            
    17be:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17c6:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17ca:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    17cc:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    17ce:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1666 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17da:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17d08 <__mulsi3>
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 167e <CstDrawZBuffer+0x174>
    17e8:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17ec:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
        UWORD bltsize =  height*64+bytewidth/2;          
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17f8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17fa:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
        WaitBlit();
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cbd6 <GfxBase>,a0
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1808:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    180c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
        custom->bltalwm = 0xffff;
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
        custom->bltamod = 2;
    181c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
        custom->bltbmod = 0;
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb39c5>
        custom->bltdmod = 0;
    182c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
        custom->bltcon1 = 0;        
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1cb16 <CstZBufferWork>,d0
    184a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    184c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1852:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    185a:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16f2 <CstDrawZBuffer+0x1e8>
    185e:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 1872 <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1860:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    186e:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 1730 <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1872:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1874:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1876:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1878:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    187a:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17d08 <__mulsi3>
    1880:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    1882:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1884:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1886:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1888:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    188a:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    188e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
        custom->bltdpt = (APTR) CstZBufferResult;
    1894:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1cb12 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    189e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    18a0:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    18a4:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1726 <CstDrawZBuffer+0x21c>
    18a8:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 1860 <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18aa:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    18ae:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18b0:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    18b6:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    18b8:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    18ba:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    18bc:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 1730 <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18c0:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    18c4:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18c6:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19d2 <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18ca:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    18ce:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 1730 <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18d2:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    18d6:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    18d8:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    18da:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18dc:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    18e0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    18e4:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18e6:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1970 <CstDrawZBuffer+0x466>
    18ea:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18ec:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18ee:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18f0:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18f2:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    18f4:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1982 <CstDrawZBuffer+0x478>
            WaitBlit();  
    18f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cbd6 <GfxBase>,a0
    18fe:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    1900:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1904:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
            custom->bltalwm = 0xffff;          
    190c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
            custom->bltdpt = CstZBufferWork;        
    1914:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1cb16 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
            custom->bltcon1 = 0;               
    191e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1926:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    192a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    192c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    192e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 199a <CstDrawZBuffer+0x490>
    1930:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1932:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1934:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1936:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    193a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 19a8 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1940:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1942:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1944:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1948:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    194e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
              custom->bltdmod = 0;                                                            
    1954:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
              xdiffbyte += 2;                 
    195c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    195e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1960:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1962:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1968:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    196a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    196c:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 165a <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1970:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1972:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1974:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1976:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1978:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    197a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    197c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    197e:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 18f8 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1982:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17f98 <PutChar+0x17a>
    1988:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 1737c <KPrintF>
              return FALSE;
    198e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1990:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1992:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1996:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1998:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    199a:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    199c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    199e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    19a0:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    19a2:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    19a6:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 193c <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    19a8:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19b0:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
              custom->bltdmod = 0;                                                            
    19b6:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
              xdiffbyte += 2;                 
    19be:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    19c0:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    19c2:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19c4:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    19ce:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 165a <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19d2:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19d4:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19d6:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 1730 <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19da:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19de:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    19e0:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    19e2:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19e4:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19e8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19ec:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19ee:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18ea <CstDrawZBuffer+0x3e0>
    19f2:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1970 <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19f6:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    19fa:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 1730 <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    19fe:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1a02:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a04:	|  |  |     |     |     |  |                                 move.w d0,d6
    1a06:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1a0a:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a0c:	|  |  |     |     |     |  |                                 tst.l d2
    1a0e:	|  |  |     |     '-----|--|-------------------------------- bge.w 15e2 <CstDrawZBuffer+0xd8>
    1a12:	|  |  |     '-----------|--|-------------------------------- bra.w 1752 <CstDrawZBuffer+0x248>
    WaitBlit();
    1a16:	'--|--|-----------------|--|-------------------------------> movea.l 1cbd6 <GfxBase>,a6
    1a1c:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a20:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
    custom->bltalwm = 0xffff;
    1a28:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
    custom->bltamod = 0;
    1a30:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
    custom->bltbmod = 0;
    1a38:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb39c5>
    custom->bltcmod = 0;
    1a40:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb39c3>
    custom->bltdmod = 0;
    1a48:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a50:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
    custom->bltcon1 = 0;        
    1a58:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a60:	   |  |                 |  |                                 move.l (a3),d2
    1a62:	   |  |                 |  |                                 move.l 4(a3),d3
    1a66:	   |  |                 |  |                                 move.l d2,d0
    1a68:	   |  |                 |  |                       ,-------- bmi.w 1af0 <CstDrawZBuffer+0x5e6>
    1a6c:	   |  |                 |  |                       |         asr.l #3,d0
    1a6e:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a70:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a72:	   |  |                 |  |                       |         jsr 17d08 <__mulsi3>
    1a78:	   |  |                 |  |                       |         addq.l #8,sp
    1a7a:	   |  |                 |  |                       |         move.l d0,d1
    1a7c:	   |  |                 |  |                       |         add.l d0,d1
    1a7e:	   |  |                 |  |                       |         add.l d1,d1
    1a80:	   |  |                 |  |                       |         add.l d1,d0
    1a82:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a86:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a8c:	   |  |                 |  |                       |         move.l 1cb12 <CstZBufferResult>,d0
    1a92:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1a98:	   |  |                 |  |                       |         lsl.w #6,d3
    1a9a:	   |  |                 |  |                       |         tst.l d2
    1a9c:	   |  |                 |  |                    ,--|-------- blt.s 1ae0 <CstDrawZBuffer+0x5d6>
    1a9e:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1aa0:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1aa2:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
}
    1aa8:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1aac:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1aae:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ab0:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1ab2:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1ab4:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1ab6:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
            custom->bltdmod = 0;                                                            
    1abc:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
    1ac4:	      '-----------------|--|--------------------|--|--|--|-- bra.w 165a <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ac8:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1aca:	                           |                    |  |  |  |   asr.l #3,d1
    1acc:	                           |                    |  |  |  |   sub.w d2,d1
    1ace:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
            custom->bltdmod = 2;                                                            
    1ad4:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
    1adc:	                           '--------------------|--|--|--|-- bra.w 17c6 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ae0:	                                                >--|--|--|-> moveq #15,d1
    1ae2:	                                                |  |  |  |   add.l d1,d2
    1ae4:	                                                |  |  |  |   asr.l #4,d2
    1ae6:	                                                |  |  |  |   add.w d2,d3
    1ae8:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
  return CstZBufferResult;
    1aee:	                                                |  |  |  '-- bra.s 1aa8 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1af0:	                                                |  '--|----> addq.l #7,d0
    1af2:	                                                |     |      asr.l #3,d0
    1af4:	                                                |     |      move.l d3,-(sp)
    1af6:	                                                |     |      move.l d0,-(sp)
    1af8:	                                                |     |      jsr 17d08 <__mulsi3>
    1afe:	                                                |     |      addq.l #8,sp
    1b00:	                                                |     |      move.l d0,d1
    1b02:	                                                |     |      add.l d0,d1
    1b04:	                                                |     |      add.l d1,d1
    1b06:	                                                |     |      add.l d1,d0
    1b08:	                                                |     |      add.l 24(a3),d0
    1b0c:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b12:	                                                |     |      move.l 1cb12 <CstZBufferResult>,d0
    1b18:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b1e:	                                                |     |      lsl.w #6,d3
    1b20:	                                                |     |      tst.l d2
    1b22:	                                                |     '----- bge.w 1a9e <CstDrawZBuffer+0x594>
    1b26:	                                                '----------- bra.s 1ae0 <CstDrawZBuffer+0x5d6>

00001b28 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b28:	    lea -20(sp),sp
    1b2c:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b2e:	    move.l 1caf2 <CstDrawBuffer>,d0
    1b34:	,-- beq.s 1b4e <CstFreeBuffer+0x26>
    1b36:	|   move.l 1caf2 <CstDrawBuffer>,20(sp)
    1b3e:	|   move.l 1cbca <SysBase>,d0
    1b44:	|   movea.l d0,a6
    1b46:	|   movea.l 20(sp),a1
    1b4a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b4e:	'-> move.l 1caee <CstViewBuffer>,d0
    1b54:	,-- beq.s 1b6e <CstFreeBuffer+0x46>
    1b56:	|   move.l 1caee <CstViewBuffer>,16(sp)
    1b5e:	|   move.l 1cbca <SysBase>,d0
    1b64:	|   movea.l d0,a6
    1b66:	|   movea.l 16(sp),a1
    1b6a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b6e:	'-> move.l 1cae8 <CstCopperList>,d0
    1b74:	,-- beq.s 1b8e <CstFreeBuffer+0x66>
    1b76:	|   move.l 1cae8 <CstCopperList>,12(sp)
    1b7e:	|   move.l 1cbca <SysBase>,d0
    1b84:	|   movea.l d0,a6
    1b86:	|   movea.l 12(sp),a1
    1b8a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b8e:	'-> move.l 1cae0 <CstBackDrop>,d0
    1b94:	,-- beq.s 1bae <CstFreeBuffer+0x86>
    1b96:	|   move.l 1cae0 <CstBackDrop>,8(sp)
    1b9e:	|   move.l 1cbca <SysBase>,d0
    1ba4:	|   movea.l d0,a6
    1ba6:	|   movea.l 8(sp),a1
    1baa:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bae:	'-> move.l 1cae4 <CstBackDropBackup>,d0
    1bb4:	,-- beq.s 1bce <CstFreeBuffer+0xa6>
    1bb6:	|   move.l 1cae4 <CstBackDropBackup>,4(sp)
    1bbe:	|   move.l 1cbca <SysBase>,d0
    1bc4:	|   movea.l d0,a6
    1bc6:	|   movea.l 4(sp),a1
    1bca:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bce:	'-> clr.l 1caf2 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1bd4:	    clr.l 1caee <CstViewBuffer>
  CstCopperList = NULL;
    1bda:	    clr.l 1cae8 <CstCopperList>
  CstBackDrop = NULL;
    1be0:	    clr.l 1cae0 <CstBackDrop>

}
    1be6:	    nop
    1be8:	    movea.l (sp)+,a6
    1bea:	    lea 20(sp),sp
    1bee:	    rts

00001bf0 <CstFreeze>:



void CstFreeze( ) {
    1bf0:	       lea -36(sp),sp
    1bf4:	       move.l a6,-(sp)
    1bf6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1bf8:	       pea 17fe8 <PutChar+0x1ca>
    1bfe:	       jsr 1737c <KPrintF>
    1c04:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c06:	       move.l 1cb1e <winWidth>,d0
    1c0c:	       lsr.l #3,d0
    1c0e:	       move.l d0,d1
    1c10:	       move.l 1cb22 <winHeight>,d0
    1c16:	       move.l d0,d0
    1c18:	       muls.w d0,d1
    1c1a:	       move.w d1,d0
    1c1c:	       add.w d0,d0
    1c1e:	       add.w d0,d0
    1c20:	       move.w d0,d2
    1c22:	       add.w d1,d2
    1c24:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c28:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c30:	       moveq #0,d0
    1c32:	       move.w 26(sp),d0
    1c36:	       move.l d0,18(sp)
    1c3a:	       clr.l 14(sp)
    1c3e:	       move.l 1cbca <SysBase>,d0
    1c44:	       movea.l d0,a6
    1c46:	       move.l 18(sp),d0
    1c4a:	       move.l 14(sp),d1
    1c4e:	       jsr -684(a6)
    1c52:	       move.l d0,10(sp)
    1c56:	       move.l 10(sp),d0
    1c5a:	       move.l d0,1cae4 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c60:	       move.l 1cae4 <CstBackDropBackup>,d0
    1c66:	   ,-- bne.s 1c76 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c68:	   |   pea 1800f <PutChar+0x1f1>
    1c6e:	   |   jsr 1737c <KPrintF>
    1c74:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c76:	   '-> move.l 1cb22 <winHeight>,d0
    1c7c:	       move.l d0,d0
    1c7e:	       movea.w d0,a1
    1c80:	       move.l 1cb1e <winWidth>,d0
    1c86:	       move.l d0,d0
    1c88:	       movea.w d0,a0
    1c8a:	       move.l 1cae4 <CstBackDropBackup>,d0
    1c90:	       clr.l -(sp)
    1c92:	       pea 5 <_start+0x5>
    1c96:	       move.l a1,-(sp)
    1c98:	       move.l a0,-(sp)
    1c9a:	       pea 18047 <PutChar+0x229>
    1ca0:	       move.l d0,-(sp)
    1ca2:	       jsr 17464 <debug_register_bitmap>
    1ca8:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cac:	       move.l 1cae0 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cb4:	       move.l 1cae4 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cbc:	       clr.l 32(sp)
    1cc0:	   ,-- bra.s 1ce6 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1cc2:	,--|-> move.l 40(sp),d1
    1cc6:	|  |   move.l d1,d0
    1cc8:	|  |   addq.l #4,d0
    1cca:	|  |   move.l d0,40(sp)
    1cce:	|  |   move.l 36(sp),d0
    1cd2:	|  |   move.l d0,d2
    1cd4:	|  |   addq.l #4,d2
    1cd6:	|  |   move.l d2,36(sp)
    1cda:	|  |   movea.l d1,a0
    1cdc:	|  |   move.l (a0),d1
    1cde:	|  |   movea.l d0,a0
    1ce0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ce2:	|  |   addq.l #1,32(sp)
    1ce6:	|  '-> move.w 26(sp),d0
    1cea:	|      lsr.w #2,d0
    1cec:	|      move.w d0,d0
    1cee:	|      andi.l #65535,d0
    1cf4:	|      cmp.l 32(sp),d0
    1cf8:	'----- bgt.s 1cc2 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1cfa:	       move.l 1caee <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d02:	       move.l 1cae0 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d0a:	       clr.l 28(sp)
    1d0e:	   ,-- bra.s 1d34 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d10:	,--|-> move.l 40(sp),d1
    1d14:	|  |   move.l d1,d0
    1d16:	|  |   addq.l #4,d0
    1d18:	|  |   move.l d0,40(sp)
    1d1c:	|  |   move.l 36(sp),d0
    1d20:	|  |   move.l d0,d2
    1d22:	|  |   addq.l #4,d2
    1d24:	|  |   move.l d2,36(sp)
    1d28:	|  |   movea.l d1,a0
    1d2a:	|  |   move.l (a0),d1
    1d2c:	|  |   movea.l d0,a0
    1d2e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d30:	|  |   addq.l #1,28(sp)
    1d34:	|  '-> move.w 26(sp),d0
    1d38:	|      lsr.w #2,d0
    1d3a:	|      move.w d0,d0
    1d3c:	|      andi.l #65535,d0
    1d42:	|      cmp.l 28(sp),d0
    1d46:	'----- bgt.s 1d10 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d48:	       move.w #2,1caec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d50:	       move.l 1cb1e <winWidth>,d0
    1d56:	       lsr.l #4,d0
    1d58:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    1d5e:	       move.l a0,d1
    1d60:	       addq.l #2,d1
    1d62:	       move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    1d68:	       move.l d0,d0
    1d6a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d6c:	       move.l 1cb22 <winHeight>,d0
    1d72:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    1d78:	       move.l a0,d1
    1d7a:	       addq.l #2,d1
    1d7c:	       move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    1d82:	       move.l d0,d0
    1d84:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d86:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    1d8c:	       move.l a0,d0
    1d8e:	       addq.l #2,d0
    1d90:	       move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    1d96:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d98:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    1d9e:	       move.l a0,d0
    1da0:	       addq.l #2,d0
    1da2:	       move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    1da8:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    1daa:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    1db0:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1db2:	       pea 18056 <PutChar+0x238>
    1db8:	       jsr 1737c <KPrintF>
    1dbe:	       addq.l #4,sp

}  
    1dc0:	       nop
    1dc2:	       move.l (sp)+,d2
    1dc4:	       movea.l (sp)+,a6
    1dc6:	       lea 36(sp),sp
    1dca:	       rts

00001dcc <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1dcc:	             lea -172(sp),sp
    1dd0:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1dd4:	             pea 1806a <PutChar+0x24c>
    1dda:	             jsr 1737c <KPrintF>
    1de0:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1de2:	             move.l 192(sp),-(sp)
    1de6:	             jsr 6bc <get2bytes>
    1dec:	             addq.l #4,sp
    1dee:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1df2:	             move.l 192(sp),-(sp)
    1df6:	             jsr 6bc <get2bytes>
    1dfc:	             addq.l #4,sp
    1dfe:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1e02:	             move.w 162(sp),d0
    1e06:	             lsr.w #3,d0
    1e08:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e0c:	             move.w 158(sp),d0
    1e10:	             lsr.w #1,d0
    1e12:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e16:	             move.l 1cb1e <winWidth>,d0
    1e1c:	             lsr.l #3,d0
    1e1e:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e22:	             move.w 158(sp),d0
    1e26:	             muls.w 160(sp),d0
    1e2a:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e2e:	             move.w 152(sp),d1
    1e32:	             move.w d1,d0
    1e34:	             add.w d0,d0
    1e36:	             add.w d0,d0
    1e38:	             move.w d0,d2
    1e3a:	             add.w d1,d2
    1e3c:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e40:	             move.w 1cada <CstPaletteLoaded>,d0
    1e46:	,----------- bne.w 1ee0 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e4a:	|            move.w #384,148(sp)

    if(CstPalette) {
    1e50:	|            move.l 1cb0a <CstPalette>,d0
    1e56:	|        ,-- beq.s 1e70 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e58:	|        |   move.l 1cb0a <CstPalette>,144(sp)
    1e60:	|        |   move.l 1cbca <SysBase>,d0
    1e66:	|        |   movea.l d0,a6
    1e68:	|        |   movea.l 144(sp),a1
    1e6c:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e70:	|        '-> moveq #64,d0
    1e72:	|            move.l d0,140(sp)
    1e76:	|            clr.l 136(sp)
    1e7a:	|            move.l 1cbca <SysBase>,d0
    1e80:	|            movea.l d0,a6
    1e82:	|            move.l 140(sp),d0
    1e86:	|            move.l 136(sp),d1
    1e8a:	|            jsr -684(a6)
    1e8e:	|            move.l d0,132(sp)
    1e92:	|            move.l 132(sp),d0
    1e96:	|            move.l d0,1cb0a <CstPalette>
    CstPaletteLoaded = 1;
    1e9c:	|            move.w #1,1cada <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1ea4:	|            move.l 1cb0a <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eac:	|            clr.l 180(sp)
    1eb0:	|        ,-- bra.s 1ed6 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1eb2:	|     ,--|-> move.l 192(sp),-(sp)
    1eb6:	|     |  |   jsr 6bc <get2bytes>
    1ebc:	|     |  |   addq.l #4,sp
    1ebe:	|     |  |   move.l d0,d1
    1ec0:	|     |  |   move.l 184(sp),d0
    1ec4:	|     |  |   move.l d0,d2
    1ec6:	|     |  |   addq.l #2,d2
    1ec8:	|     |  |   move.l d2,184(sp)
    1ecc:	|     |  |   move.l d1,d1
    1ece:	|     |  |   movea.l d0,a0
    1ed0:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ed2:	|     |  |   addq.l #1,180(sp)
    1ed6:	|     |  '-> moveq #31,d0
    1ed8:	|     |      cmp.l 180(sp),d0
    1edc:	|     '----- bge.s 1eb2 <CstLoadBackdrop+0xe6>
    1ede:	|  ,-------- bra.s 1efe <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee0:	'--|-------> clr.l 176(sp)
    1ee4:	   |     ,-- bra.s 1ef6 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1ee6:	   |  ,--|-> move.l 192(sp),-(sp)
    1eea:	   |  |  |   jsr 6bc <get2bytes>
    1ef0:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ef2:	   |  |  |   addq.l #1,176(sp)
    1ef6:	   |  |  '-> moveq #31,d2
    1ef8:	   |  |      cmp.l 176(sp),d2
    1efc:	   |  '----- bge.s 1ee6 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1efe:	   '-------> moveq #0,d0
    1f00:	             move.w 150(sp),d0
    1f04:	             move.l d0,128(sp)
    1f08:	             moveq #2,d0
    1f0a:	             move.l d0,124(sp)
    1f0e:	             move.l 1cbca <SysBase>,d0
    1f14:	             movea.l d0,a6
    1f16:	             move.l 128(sp),d0
    1f1a:	             move.l 124(sp),d1
    1f1e:	             jsr -684(a6)
    1f22:	             move.l d0,120(sp)
    1f26:	             move.l 120(sp),d0
    1f2a:	             move.l d0,116(sp)
  if( !tmpbuffer)
    1f2e:	         ,-- bne.s 1f3e <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f30:	         |   pea 18099 <PutChar+0x27b>
    1f36:	         |   jsr 1737c <KPrintF>
    1f3c:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f3e:	         '-> moveq #0,d0
    1f40:	             move.w 152(sp),d0
    1f44:	             move.l d0,112(sp)
    1f48:	             moveq #2,d2
    1f4a:	             move.l d2,108(sp)
    1f4e:	             move.l 1cbca <SysBase>,d0
    1f54:	             movea.l d0,a6
    1f56:	             move.l 112(sp),d0
    1f5a:	             move.l 108(sp),d1
    1f5e:	             jsr -684(a6)
    1f62:	             move.l d0,104(sp)
    1f66:	             move.l 104(sp),d0
    1f6a:	             move.l d0,100(sp)
  if( !tmpmask)
    1f6e:	         ,-- bne.s 1f7e <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f70:	         |   pea 180cf <PutChar+0x2b1>
    1f76:	         |   jsr 1737c <KPrintF>
    1f7c:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f7e:	         '-> move.w 160(sp),d0
    1f82:	             movea.w d0,a1
    1f84:	             move.w 162(sp),d0
    1f88:	             movea.w d0,a0
    1f8a:	             clr.l -(sp)
    1f8c:	             pea 5 <_start+0x5>
    1f90:	             move.l a1,-(sp)
    1f92:	             move.l a0,-(sp)
    1f94:	             pea 18103 <PutChar+0x2e5>
    1f9a:	             move.l 136(sp),-(sp)
    1f9e:	             jsr 17464 <debug_register_bitmap>
    1fa4:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1fa8:	             move.w 160(sp),d0
    1fac:	             movea.w d0,a1
    1fae:	             move.w 162(sp),d0
    1fb2:	             movea.w d0,a0
    1fb4:	             clr.l -(sp)
    1fb6:	             pea 1 <_start+0x1>
    1fba:	             move.l a1,-(sp)
    1fbc:	             move.l a0,-(sp)
    1fbe:	             pea 18111 <PutChar+0x2f3>
    1fc4:	             move.l 136(sp),-(sp)
    1fc8:	             jsr 17464 <debug_register_bitmap>
    1fce:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fd2:	             move.l 192(sp),96(sp)
    1fd8:	             move.l 116(sp),92(sp)
    1fde:	             moveq #2,d0
    1fe0:	             move.l d0,88(sp)
    1fe4:	             move.w 150(sp),d0
    1fe8:	             lsr.w #1,d0
    1fea:	             move.w d0,d0
    1fec:	             andi.l #65535,d0
    1ff2:	             move.l d0,84(sp)
    1ff6:	             move.l 1cbd2 <DOSBase>,d0
    1ffc:	             movea.l d0,a6
    1ffe:	             move.l 96(sp),d1
    2002:	             move.l 92(sp),d2
    2006:	             move.l 88(sp),d3
    200a:	             move.l 84(sp),d4
    200e:	             jsr -324(a6)
    2012:	             move.l d0,80(sp)
    2016:	             move.l 80(sp),d0
    201a:	             move.w d0,78(sp)
  if(!count) {
    201e:	         ,-- bne.s 2032 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2020:	         |   pea 1811d <PutChar+0x2ff>
    2026:	         |   jsr 1737c <KPrintF>
    202c:	         |   addq.l #4,sp
    return;
    202e:	   ,-----|-- bra.w 2342 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2032:	   |     '-> move.l 192(sp),74(sp)
    2038:	   |         move.l 100(sp),70(sp)
    203e:	   |         moveq #2,d2
    2040:	   |         move.l d2,66(sp)
    2044:	   |         move.w 152(sp),d0
    2048:	   |         lsr.w #1,d0
    204a:	   |         move.w d0,d0
    204c:	   |         andi.l #65535,d0
    2052:	   |         move.l d0,62(sp)
    2056:	   |         move.l 1cbd2 <DOSBase>,d0
    205c:	   |         movea.l d0,a6
    205e:	   |         move.l 74(sp),d1
    2062:	   |         move.l 70(sp),d2
    2066:	   |         move.l 66(sp),d3
    206a:	   |         move.l 62(sp),d4
    206e:	   |         jsr -324(a6)
    2072:	   |         move.l d0,58(sp)
    2076:	   |         move.l 58(sp),d0
    207a:	   |         move.w d0,78(sp)
   

  if(!count) {
    207e:	   |     ,-- bne.s 2092 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2080:	   |     |   pea 1811d <PutChar+0x2ff>
    2086:	   |     |   jsr 1737c <KPrintF>
    208c:	   |     |   addq.l #4,sp
    return;
    208e:	   +-----|-- bra.w 2342 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2092:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    209a:	   |         move.l 1cae0 <CstBackDrop>,d0
    20a0:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    20a4:	   |         move.l 200(sp),d0
    20a8:	   |         move.w d0,d1
    20aa:	   |         muls.w 154(sp),d1
    20ae:	   |         move.l 196(sp),d0
    20b2:	   |     ,-- bpl.s 20b6 <CstLoadBackdrop+0x2ea>
    20b4:	   |     |   addq.l #7,d0
    20b6:	   |     '-> asr.l #3,d0
    20b8:	   |         move.l d0,d0
    20ba:	   |         movea.w d1,a0
    20bc:	   |         adda.w d0,a0
    20be:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    20c2:	   |         moveq #0,d0
    20c4:	   |         move.w 52(sp),d0
    20c8:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20cc:	   |         pea 18138 <PutChar+0x31a>
    20d2:	   |         jsr 1737c <KPrintF>
    20d8:	   |         addq.l #4,sp


  WaitBlit();
    20da:	   |         move.l 1cbd6 <GfxBase>,d0
    20e0:	   |         movea.l d0,a6
    20e2:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20e6:	   |         movea.l 54(sp),a0
    20ea:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    20f0:	   |         movea.l 54(sp),a0
    20f4:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    20fa:	   |         movea.l 54(sp),a0
    20fe:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2104:	   |         movea.l 54(sp),a0
    2108:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    210e:	   |         move.w 154(sp),d0
    2112:	   |         sub.w 158(sp),d0
    2116:	   |         movea.l 54(sp),a0
    211a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    211e:	   |         move.w 154(sp),d0
    2122:	   |         sub.w 158(sp),d0
    2126:	   |         movea.l 54(sp),a0
    212a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    212e:	   |         movea.l 54(sp),a0
    2132:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2138:	   |         movea.l 54(sp),a0
    213c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2142:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2148:	   |         clr.l 164(sp)
    214c:	   |     ,-- bra.s 21ba <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    214e:	   |  ,--|-> move.l 1cbd6 <GfxBase>,d0
    2154:	   |  |  |   movea.l d0,a6
    2156:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    215a:	   |  |  |   movea.l 54(sp),a0
    215e:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2164:	   |  |  |   move.l 168(sp),d0
    2168:	   |  |  |   movea.l 54(sp),a0
    216c:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2170:	   |  |  |   move.l 172(sp),d0
    2174:	   |  |  |   movea.l 54(sp),a0
    2178:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    217c:	   |  |  |   move.l 172(sp),d0
    2180:	   |  |  |   movea.l 54(sp),a0
    2184:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2188:	   |  |  |   move.w 160(sp),d0
    218c:	   |  |  |   lsl.w #6,d0
    218e:	   |  |  |   add.w 156(sp),d0
    2192:	   |  |  |   movea.l 54(sp),a0
    2196:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    219a:	   |  |  |   moveq #0,d0
    219c:	   |  |  |   move.w 152(sp),d0
    21a0:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    21a4:	   |  |  |   move.w 1cade <CstBackdropSizePlane>,d0
    21aa:	   |  |  |   move.w d0,d0
    21ac:	   |  |  |   andi.l #65535,d0
    21b2:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21b6:	   |  |  |   addq.l #1,164(sp)
    21ba:	   |  |  '-> moveq #4,d0
    21bc:	   |  |      cmp.l 164(sp),d0
    21c0:	   |  '----- bge.s 214e <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    21c2:	   |         move.l 1cbd6 <GfxBase>,d0
    21c8:	   |         movea.l d0,a6
    21ca:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21ce:	   |         pea 18157 <PutChar+0x339>
    21d4:	   |         jsr 1737c <KPrintF>
    21da:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21dc:	   |         move.l 116(sp),48(sp)
    21e2:	   |         move.l 1cbca <SysBase>,d0
    21e8:	   |         movea.l d0,a6
    21ea:	   |         movea.l 48(sp),a1
    21ee:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21f2:	   |         move.l 100(sp),44(sp)
    21f8:	   |         move.l 1cbca <SysBase>,d0
    21fe:	   |         movea.l d0,a6
    2200:	   |         movea.l 44(sp),a1
    2204:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2208:	   |         move.l 1cafa <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2210:	   |         moveq #20,d2
    2212:	   |         move.l d2,36(sp)
    2216:	   |         clr.l 32(sp)
    221a:	   |         move.l 1cbca <SysBase>,d0
    2220:	   |         movea.l d0,a6
    2222:	   |         move.l 36(sp),d0
    2226:	   |         move.l 32(sp),d1
    222a:	   |         jsr -684(a6)
    222e:	   |         move.l d0,28(sp)
    2232:	   |         move.l 28(sp),d0
    2236:	   |         move.l d0,1cafa <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    223c:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2242:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2248:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    224e:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    2250:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2256:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    225a:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2260:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2264:	   |         move.l 1cb1e <winWidth>,d0
    226a:	   |         lsr.l #4,d0
    226c:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2272:	   |         move.l d0,d0
    2274:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2278:	   |         move.l 1cb22 <winHeight>,d0
    227e:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2284:	   |         move.l d0,d0
    2286:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    228a:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2290:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    2294:	   |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    229a:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    229e:	   |         move.l 1caf6 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    22a6:	   |         moveq #20,d0
    22a8:	   |         move.l d0,24(sp)
    22ac:	   |         clr.l 20(sp)
    22b0:	   |         move.l 1cbca <SysBase>,d0
    22b6:	   |         movea.l d0,a6
    22b8:	   |         move.l 24(sp),d0
    22bc:	   |         move.l 20(sp),d1
    22c0:	   |         jsr -684(a6)
    22c4:	   |         move.l d0,16(sp)
    22c8:	   |         move.l 16(sp),d0
    22cc:	   |         move.l d0,1caf6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    22d2:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    22d8:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    22de:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    22e4:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    22e6:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    22ec:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    22f0:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    22f6:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    22fa:	   |         move.l 1cb1e <winWidth>,d0
    2300:	   |         lsr.l #4,d0
    2302:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    2308:	   |         move.l d0,d0
    230a:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    230e:	   |         move.l 1cb22 <winHeight>,d0
    2314:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    231a:	   |         move.l d0,d0
    231c:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    2320:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    2326:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    232a:	   |         movea.l 1caf6 <CstCleanupQueueViewBuffer>,a0
    2330:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2334:	   |         pea 18177 <PutChar+0x359>
    233a:	   |         jsr 1737c <KPrintF>
    2340:	   |         addq.l #4,sp

}
    2342:	   '-------> movem.l (sp)+,d2-d4/a6
    2346:	             lea 172(sp),sp
    234a:	             rts

0000234c <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    234c:	                lea -72(sp),sp
    2350:	                move.l a6,-(sp)
    2352:	                move.l d2,-(sp)
    2354:	                move.l 88(sp),d1
    2358:	                move.l 92(sp),d0
    235c:	                move.w d1,d1
    235e:	                move.w d1,10(sp)
    2362:	                move.w d0,d0
    2364:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2368:	                move.l #14675968,28(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    2370:	                clr.l 24(sp)
  CstApplyBackDropCounter = 2;
    2374:	                move.w #2,1caec <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    237c:	                move.l 1cae0 <CstBackDrop>,24(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2384:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2388:	                movea.l 84(sp),a0
    238c:	                move.l (a0),d0
    238e:	                movea.l d0,a0
    2390:	                cmpa.w #0,a0
    2394:	            ,-- bge.s 239a <CstPasteChar+0x4e>
    2396:	            |   lea 15(a0),a0
    239a:	            '-> move.l a0,d0
    239c:	                asr.l #4,d0
    239e:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    23a2:	            ,-- bne.s 23aa <CstPasteChar+0x5e>
    23a4:	            |   moveq #1,d0
    23a6:	            |   move.l d0,40(sp)

  if( y < 0) {
    23aa:	            '-> tst.w 8(sp)
    23ae:	         ,----- bge.s 23f8 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    23b0:	         |      movea.w 8(sp),a1
    23b4:	         |      movea.l 84(sp),a0
    23b8:	         |      move.l 4(a0),d0
    23bc:	         |      add.l a1,d0
    23be:	         |  ,-- bpl.s 23d2 <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23c0:	         |  |   pea 18191 <PutChar+0x373>
    23c6:	         |  |   jsr 1737c <KPrintF>
    23cc:	         |  |   addq.l #4,sp
      return;
    23ce:	,--------|--|-- bra.w 2a6e <CstPasteChar+0x722>
    }
    ystartdst = 0;
    23d2:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    23d6:	|        |      move.w 8(sp),d0
    23da:	|        |      ext.l d0
    23dc:	|        |      move.l d0,d1
    23de:	|        |      neg.l d1
    23e0:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    23e4:	|        |      movea.l 84(sp),a0
    23e8:	|        |      move.l 4(a0),d0
    23ec:	|        |      movea.w 8(sp),a0
    23f0:	|        |      add.l a0,d0
    23f2:	|        |      move.l d0,44(sp)
    23f6:	|     ,--|----- bra.s 246a <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    23f8:	|     |  '----> movea.w 8(sp),a1
    23fc:	|     |         movea.l 84(sp),a0
    2400:	|     |         move.l 4(a0),d0
    2404:	|     |         move.l a1,d1
    2406:	|     |         add.l d0,d1
    2408:	|     |         move.l 1cb22 <winHeight>,d0
    240e:	|     |         cmp.l d1,d0
    2410:	|     |  ,----- bge.s 2452 <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    2412:	|     |  |      movea.w 8(sp),a0
    2416:	|     |  |      move.l 1cb22 <winHeight>,d0
    241c:	|     |  |      cmp.l a0,d0
    241e:	|     |  |  ,-- bge.s 2432 <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2420:	|     |  |  |   pea 18191 <PutChar+0x373>
    2426:	|     |  |  |   jsr 1737c <KPrintF>
    242c:	|     |  |  |   addq.l #4,sp
      return;
    242e:	+-----|--|--|-- bra.w 2a6e <CstPasteChar+0x722>
    }
    ystartdst = y;
    2432:	|     |  |  '-> movea.w 8(sp),a0
    2436:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    243a:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    243e:	|     |  |      move.l 1cb22 <winHeight>,d0
    2444:	|     |  |      movea.w 8(sp),a0
    2448:	|     |  |      move.l d0,d1
    244a:	|     |  |      sub.l a0,d1
    244c:	|     |  |      move.l d1,44(sp)
    2450:	|     +--|----- bra.s 246a <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    2452:	|     |  '----> movea.w 8(sp),a0
    2456:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    245a:	|     |         clr.l 48(sp)
    blitheight = single->height;
    245e:	|     |         movea.l 84(sp),a0
    2462:	|     |         move.l 4(a0),d0
    2466:	|     |         move.l d0,44(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    246a:	|     '-------> tst.w 10(sp)
    246e:	|        ,----- bge.w 25d6 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    2472:	|        |      movea.w 10(sp),a1
    2476:	|        |      movea.l 84(sp),a0
    247a:	|        |      move.l (a0),d0
    247c:	|        |      add.l a1,d0
    247e:	|        |  ,-- bpl.s 2492 <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2480:	|        |  |   pea 18191 <PutChar+0x373>
    2486:	|        |  |   jsr 1737c <KPrintF>
    248c:	|        |  |   addq.l #4,sp
      return;
    248e:	+--------|--|-- bra.w 2a6e <CstPasteChar+0x722>

    }
    
    extrawords = 1;
    2492:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2498:	|        |      move.w 10(sp),d0
    249c:	|        |  ,-- bpl.s 24a2 <CstPasteChar+0x156>
    249e:	|        |  |   addi.w #15,d0
    24a2:	|        |  '-> asr.w #4,d0
    24a4:	|        |      neg.w d0
    24a6:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    24aa:	|        |      move.w 10(sp),d0
    24ae:	|        |      ext.l d0
    24b0:	|        |      neg.l d0
    24b2:	|        |      andi.l #-2147483633,d0
    24b8:	|        |  ,-- bpl.s 24c2 <CstPasteChar+0x176>
    24ba:	|        |  |   subq.l #1,d0
    24bc:	|        |  |   moveq #-16,d1
    24be:	|        |  |   or.l d1,d0
    24c0:	|        |  |   addq.l #1,d0
    24c2:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    24c6:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    24ca:	|        |      movea.l 84(sp),a0
    24ce:	|        |      move.l 24(a0),d0
    24d2:	|        |      move.l d0,d1
    24d4:	|        |      moveq #0,d0
    24d6:	|        |      move.w 76(sp),d0
    24da:	|        |      add.l d0,d0
    24dc:	|        |      move.l d1,d2
    24de:	|        |      add.l d0,d2
    24e0:	|        |      movea.l 84(sp),a0
    24e4:	|        |      move.l (a0),d0
    24e6:	|        |      move.l 48(sp),-(sp)
    24ea:	|        |      move.l d0,-(sp)
    24ec:	|        |      jsr 17d08 <__mulsi3>
    24f2:	|        |      addq.l #8,sp
    24f4:	|        |      lsr.l #3,d0
    24f6:	|        |      move.l d2,d1
    24f8:	|        |      add.l d0,d1
    24fa:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    24fe:	|        |      move.l 1cb1e <winWidth>,d0
    2504:	|        |      move.l 52(sp),-(sp)
    2508:	|        |      move.l d0,-(sp)
    250a:	|        |      jsr 17d08 <__mulsi3>
    2510:	|        |      addq.l #8,sp
    2512:	|        |      lsr.l #3,d0
    2514:	|        |      move.l 24(sp),d1
    2518:	|        |      add.l d1,d0
    251a:	|        |      move.l d0,d2
    251c:	|        |      subq.l #2,d2
    251e:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2522:	|        |      move.l 1cb1e <winWidth>,d0
    2528:	|        |      move.l 52(sp),-(sp)
    252c:	|        |      move.l d0,-(sp)
    252e:	|        |      jsr 17d08 <__mulsi3>
    2534:	|        |      addq.l #8,sp
    2536:	|        |      lsr.l #3,d0
    2538:	|        |      move.l 24(sp),d1
    253c:	|        |      add.l d1,d0
    253e:	|        |      move.l d0,d1
    2540:	|        |      subq.l #2,d1
    2542:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2546:	|        |      moveq #0,d0
    2548:	|        |      move.w 74(sp),d0
    254c:	|        |      moveq #16,d1
    254e:	|        |      sub.l d0,d1
    2550:	|        |      move.l d1,d0
    2552:	|        |      moveq #12,d2
    2554:	|        |      lsl.l d2,d0
    2556:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    255a:	|        |      movea.l 84(sp),a0
    255e:	|        |      move.l (a0),d0
    2560:	|        |      movea.l d0,a0
    2562:	|        |      cmpa.w #0,a0
    2566:	|        |  ,-- bge.s 256c <CstPasteChar+0x220>
    2568:	|        |  |   lea 15(a0),a0
    256c:	|        |  '-> move.l a0,d0
    256e:	|        |      asr.l #4,d0
    2570:	|        |      move.l d0,d0
    2572:	|        |      add.w 76(sp),d0
    2576:	|        |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    257c:	|        |      move.l a0,d1
    257e:	|        |      addq.l #2,d1
    2580:	|        |      move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    2586:	|        |      add.w 78(sp),d0
    258a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    258c:	|        |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2592:	|        |      move.l a0,d0
    2594:	|        |      addq.l #2,d0
    2596:	|        |      move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    259c:	|        |      move.l 44(sp),d0
    25a0:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    25a2:	|        |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    25a8:	|        |      move.l a0,d0
    25aa:	|        |      addq.l #2,d0
    25ac:	|        |      move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    25b2:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    25b4:	|        |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    25ba:	|        |      move.l a0,d0
    25bc:	|        |      addq.l #2,d0
    25be:	|        |      move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    25c4:	|        |      move.l 52(sp),d0
    25c8:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    25ca:	|        |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    25d0:	|        |      clr.w (a0)
    25d2:	|     ,--|----- bra.w 28d6 <CstPasteChar+0x58a>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    25d6:	|     |  '----> movea.w 10(sp),a1
    25da:	|     |         movea.l 84(sp),a0
    25de:	|     |         move.l (a0),d0
    25e0:	|     |         move.l a1,d1
    25e2:	|     |         add.l d0,d1
    25e4:	|     |         move.l 1cb1e <winWidth>,d0
    25ea:	|     |         cmp.l d1,d0
    25ec:	|     |  ,----- bge.w 277e <CstPasteChar+0x432>

    if(x - single->width > (int) winWidth)
    25f0:	|     |  |      movea.w 10(sp),a1
    25f4:	|     |  |      movea.l 84(sp),a0
    25f8:	|     |  |      move.l (a0),d0
    25fa:	|     |  |      move.l a1,d1
    25fc:	|     |  |      sub.l d0,d1
    25fe:	|     |  |      move.l 1cb1e <winWidth>,d0
    2604:	|     |  |      cmp.l d1,d0
    2606:	|     |  |  ,-- bge.s 261a <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2608:	|     |  |  |   pea 18191 <PutChar+0x373>
    260e:	|     |  |  |   jsr 1737c <KPrintF>
    2614:	|     |  |  |   addq.l #4,sp
      return;
    2616:	+-----|--|--|-- bra.w 2a6e <CstPasteChar+0x722>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    261a:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    261e:	|     |  |      movea.w 10(sp),a1
    2622:	|     |  |      movea.l 84(sp),a0
    2626:	|     |  |      move.l (a0),d0
    2628:	|     |  |      add.l a1,d0
    262a:	|     |  |      move.l d0,d1
    262c:	|     |  |      move.l 1cb1e <winWidth>,d0
    2632:	|     |  |      sub.l d0,d1
    2634:	|     |  |      move.l d1,d0
    2636:	|     |  |      lsr.l #4,d0
    2638:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    263c:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2640:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    2646:	|     |  |      movea.l 84(sp),a0
    264a:	|     |  |      move.l 24(a0),d0
    264e:	|     |  |      move.l d0,d2
    2650:	|     |  |      movea.l 84(sp),a0
    2654:	|     |  |      move.l (a0),d0
    2656:	|     |  |      move.l 48(sp),-(sp)
    265a:	|     |  |      move.l d0,-(sp)
    265c:	|     |  |      jsr 17d08 <__mulsi3>
    2662:	|     |  |      addq.l #8,sp
    2664:	|     |  |      lsr.l #3,d0
    2666:	|     |  |      move.l d2,d1
    2668:	|     |  |      add.l d0,d1
    266a:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    266e:	|     |  |      move.l 1cb1e <winWidth>,d0
    2674:	|     |  |      move.l 52(sp),-(sp)
    2678:	|     |  |      move.l d0,-(sp)
    267a:	|     |  |      jsr 17d08 <__mulsi3>
    2680:	|     |  |      addq.l #8,sp
    2682:	|     |  |      lsr.l #3,d0
    2684:	|     |  |      move.l 24(sp),d1
    2688:	|     |  |      add.l d0,d1
    268a:	|     |  |      move.w 10(sp),d0
    268e:	|     |  |  ,-- bpl.s 2694 <CstPasteChar+0x348>
    2690:	|     |  |  |   addi.w #15,d0
    2694:	|     |  |  '-> asr.w #4,d0
    2696:	|     |  |      movea.w d0,a0
    2698:	|     |  |      move.l a0,d0
    269a:	|     |  |      add.l a0,d0
    269c:	|     |  |      move.l d1,d2
    269e:	|     |  |      add.l d0,d2
    26a0:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26a4:	|     |  |      move.l 1cb1e <winWidth>,d0
    26aa:	|     |  |      move.l 52(sp),-(sp)
    26ae:	|     |  |      move.l d0,-(sp)
    26b0:	|     |  |      jsr 17d08 <__mulsi3>
    26b6:	|     |  |      addq.l #8,sp
    26b8:	|     |  |      lsr.l #3,d0
    26ba:	|     |  |      move.l 24(sp),d1
    26be:	|     |  |      add.l d0,d1
    26c0:	|     |  |      move.w 10(sp),d0
    26c4:	|     |  |  ,-- bpl.s 26ca <CstPasteChar+0x37e>
    26c6:	|     |  |  |   addi.w #15,d0
    26ca:	|     |  |  '-> asr.w #4,d0
    26cc:	|     |  |      movea.w d0,a0
    26ce:	|     |  |      move.l a0,d0
    26d0:	|     |  |      add.l a0,d0
    26d2:	|     |  |      move.l d1,d2
    26d4:	|     |  |      add.l d0,d2
    26d6:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    26da:	|     |  |      movea.l 84(sp),a0
    26de:	|     |  |      move.l (a0),d0
    26e0:	|     |  |      andi.l #-2147483633,d0
    26e6:	|     |  |  ,-- bpl.s 26f0 <CstPasteChar+0x3a4>
    26e8:	|     |  |  |   subq.l #1,d0
    26ea:	|     |  |  |   moveq #-16,d1
    26ec:	|     |  |  |   or.l d1,d0
    26ee:	|     |  |  |   addq.l #1,d0
    26f0:	|     |  |  '-> moveq #12,d2
    26f2:	|     |  |      lsl.l d2,d0
    26f4:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    26f8:	|     |  |      movea.l 84(sp),a0
    26fc:	|     |  |      move.l (a0),d0
    26fe:	|     |  |      movea.l d0,a0
    2700:	|     |  |      cmpa.w #0,a0
    2704:	|     |  |  ,-- bge.s 270a <CstPasteChar+0x3be>
    2706:	|     |  |  |   lea 15(a0),a0
    270a:	|     |  |  '-> move.l a0,d0
    270c:	|     |  |      asr.l #4,d0
    270e:	|     |  |      move.l d0,d0
    2710:	|     |  |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2716:	|     |  |      move.l a0,d1
    2718:	|     |  |      addq.l #2,d1
    271a:	|     |  |      move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    2720:	|     |  |      add.w 76(sp),d0
    2724:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2726:	|     |  |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    272c:	|     |  |      move.l a0,d0
    272e:	|     |  |      addq.l #2,d0
    2730:	|     |  |      move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    2736:	|     |  |      move.l 44(sp),d0
    273a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    273c:	|     |  |      move.w 10(sp),d0
    2740:	|     |  |  ,-- bpl.s 2746 <CstPasteChar+0x3fa>
    2742:	|     |  |  |   addi.w #15,d0
    2746:	|     |  |  '-> asr.w #4,d0
    2748:	|     |  |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    274e:	|     |  |      move.l a0,d1
    2750:	|     |  |      addq.l #2,d1
    2752:	|     |  |      move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    2758:	|     |  |      add.w d0,d0
    275a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    275c:	|     |  |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2762:	|     |  |      move.l a0,d0
    2764:	|     |  |      addq.l #2,d0
    2766:	|     |  |      move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    276c:	|     |  |      move.l 52(sp),d0
    2770:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    2772:	|     |  |      movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2778:	|     |  |      clr.w (a0)
    277a:	|     +--|----- bra.w 28d6 <CstPasteChar+0x58a>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    277e:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    2784:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2788:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    278c:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2790:	|     |         movea.l 84(sp),a0
    2794:	|     |         move.l 24(a0),d0
    2798:	|     |         move.l d0,d2
    279a:	|     |         movea.l 84(sp),a0
    279e:	|     |         move.l (a0),d0
    27a0:	|     |         movea.l d0,a0
    27a2:	|     |         cmpa.w #0,a0
    27a6:	|     |     ,-- bge.s 27ac <CstPasteChar+0x460>
    27a8:	|     |     |   lea 15(a0),a0
    27ac:	|     |     '-> move.l a0,d0
    27ae:	|     |         asr.l #4,d0
    27b0:	|     |         move.l 48(sp),-(sp)
    27b4:	|     |         move.l d0,-(sp)
    27b6:	|     |         jsr 17d08 <__mulsi3>
    27bc:	|     |         addq.l #8,sp
    27be:	|     |         add.l d0,d0
    27c0:	|     |         move.l d2,d1
    27c2:	|     |         add.l d0,d1
    27c4:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    27c8:	|     |         move.l 1cb1e <winWidth>,d0
    27ce:	|     |         move.l 52(sp),-(sp)
    27d2:	|     |         move.l d0,-(sp)
    27d4:	|     |         jsr 17d08 <__mulsi3>
    27da:	|     |         addq.l #8,sp
    27dc:	|     |         lsr.l #3,d0
    27de:	|     |         move.l 24(sp),d1
    27e2:	|     |         add.l d0,d1
    27e4:	|     |         move.w 10(sp),d0
    27e8:	|     |     ,-- bpl.s 27ee <CstPasteChar+0x4a2>
    27ea:	|     |     |   addi.w #15,d0
    27ee:	|     |     '-> asr.w #4,d0
    27f0:	|     |         movea.w d0,a0
    27f2:	|     |         move.l a0,d0
    27f4:	|     |         add.l a0,d0
    27f6:	|     |         move.l d1,d2
    27f8:	|     |         add.l d0,d2
    27fa:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    27fe:	|     |         move.l 1cb1e <winWidth>,d0
    2804:	|     |         move.l 52(sp),-(sp)
    2808:	|     |         move.l d0,-(sp)
    280a:	|     |         jsr 17d08 <__mulsi3>
    2810:	|     |         addq.l #8,sp
    2812:	|     |         lsr.l #3,d0
    2814:	|     |         move.l 24(sp),d1
    2818:	|     |         add.l d0,d1
    281a:	|     |         move.w 10(sp),d0
    281e:	|     |     ,-- bpl.s 2824 <CstPasteChar+0x4d8>
    2820:	|     |     |   addi.w #15,d0
    2824:	|     |     '-> asr.w #4,d0
    2826:	|     |         movea.w d0,a0
    2828:	|     |         move.l a0,d0
    282a:	|     |         add.l a0,d0
    282c:	|     |         move.l d1,d2
    282e:	|     |         add.l d0,d2
    2830:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2834:	|     |         move.w 10(sp),d0
    2838:	|     |         andi.w #-32753,d0
    283c:	|     |     ,-- bpl.s 2846 <CstPasteChar+0x4fa>
    283e:	|     |     |   subq.w #1,d0
    2840:	|     |     |   ori.w #-16,d0
    2844:	|     |     |   addq.w #1,d0
    2846:	|     |     '-> ext.l d0
    2848:	|     |         moveq #12,d1
    284a:	|     |         lsl.l d1,d0
    284c:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2850:	|     |         movea.l 84(sp),a0
    2854:	|     |         move.l (a0),d0
    2856:	|     |         movea.l d0,a0
    2858:	|     |         cmpa.w #0,a0
    285c:	|     |     ,-- bge.s 2862 <CstPasteChar+0x516>
    285e:	|     |     |   lea 15(a0),a0
    2862:	|     |     '-> move.l a0,d0
    2864:	|     |         asr.l #4,d0
    2866:	|     |         move.l d0,d0
    2868:	|     |         add.w 76(sp),d0
    286c:	|     |         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2872:	|     |         move.l a0,d1
    2874:	|     |         addq.l #2,d1
    2876:	|     |         move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    287c:	|     |         add.w 78(sp),d0
    2880:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2882:	|     |         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2888:	|     |         move.l a0,d0
    288a:	|     |         addq.l #2,d0
    288c:	|     |         move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    2892:	|     |         move.l 44(sp),d0
    2896:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2898:	|     |         move.w 10(sp),d0
    289c:	|     |     ,-- bpl.s 28a2 <CstPasteChar+0x556>
    289e:	|     |     |   addi.w #15,d0
    28a2:	|     |     '-> asr.w #4,d0
    28a4:	|     |         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    28aa:	|     |         move.l a0,d1
    28ac:	|     |         addq.l #2,d1
    28ae:	|     |         move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    28b4:	|     |         add.w d0,d0
    28b6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    28b8:	|     |         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    28be:	|     |         move.l a0,d0
    28c0:	|     |         addq.l #2,d0
    28c2:	|     |         move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    28c8:	|     |         move.l 52(sp),d0
    28cc:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    28ce:	|     |         movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    28d4:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    28d6:	|     '-------> moveq #0,d0
    28d8:	|               move.w 74(sp),d0
    28dc:	|               moveq #0,d1
    28de:	|               not.w d1
    28e0:	|               asr.l d0,d1
    28e2:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    28e6:	|               moveq #0,d1
    28e8:	|               move.w 76(sp),d1
    28ec:	|               moveq #0,d0
    28ee:	|               move.w 78(sp),d0
    28f2:	|               sub.l d0,d1
    28f4:	|               move.l d1,d0
    28f6:	|               add.w d0,d0
    28f8:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    28fc:	|               move.l 1cb1e <winWidth>,d0
    2902:	|               lsr.l #3,d0
    2904:	|               move.l d0,d2
    2906:	|               move.w 76(sp),d1
    290a:	|               sub.w 78(sp),d1
    290e:	|               move.l 40(sp),d0
    2912:	|               sub.w d0,d1
    2914:	|               move.w d1,d0
    2916:	|               add.w d1,d0
    2918:	|               add.w d2,d0
    291a:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    291e:	|               move.l 1cb1e <winWidth>,d0
    2924:	|               lsr.l #3,d0
    2926:	|               move.l d0,d2
    2928:	|               move.w 76(sp),d1
    292c:	|               sub.w 78(sp),d1
    2930:	|               move.l 40(sp),d0
    2934:	|               sub.w d0,d1
    2936:	|               move.w d1,d0
    2938:	|               add.w d1,d0
    293a:	|               add.w d2,d0
    293c:	|               move.w d0,16(sp)

  WaitBlit();
    2940:	|               move.l 1cbd6 <GfxBase>,d0
    2946:	|               movea.l d0,a6
    2948:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    294c:	|               movea.l 28(sp),a0
    2950:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2956:	|               movea.l 28(sp),a0
    295a:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2960:	|               move.w 20(sp),d0
    2964:	|               movea.l 28(sp),a0
    2968:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    296c:	|               move.w 18(sp),d0
    2970:	|               movea.l 28(sp),a0
    2974:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2978:	|               move.w 16(sp),d0
    297c:	|               movea.l 28(sp),a0
    2980:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2984:	|               move.l 1cb1e <winWidth>,d0
    298a:	|               lsr.l #3,d0
    298c:	|               move.l d0,d1
    298e:	|               move.l 1cb22 <winHeight>,d0
    2994:	|               move.l d0,d0
    2996:	|               move.w d1,d2
    2998:	|               muls.w d0,d2
    299a:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    299e:	|               move.w 1cad8 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    29a6:	|               move.w 38(sp),d0
    29aa:	|               andi.w #1,d0
    29ae:	|               move.w d0,12(sp)
  if(tmp2) {
    29b2:	|        ,----- beq.s 29bc <CstPasteChar+0x670>
    minterm = 0xbfa;
    29b4:	|        |      move.w #3066,36(sp)
    29ba:	|        |  ,-- bra.s 29c2 <CstPasteChar+0x676>
  } else {
    minterm = 0xb0a;
    29bc:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    29c2:	|           '-> clr.l 32(sp)
    29c6:	|     ,-------- bra.w 2a64 <CstPasteChar+0x718>
  {

    custom->bltcon0 = bltcon0 + minterm;
    29ca:	|  ,--|-------> move.l 56(sp),d0
    29ce:	|  |  |         add.w 36(sp),d0
    29d2:	|  |  |         movea.l 28(sp),a0
    29d6:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    29da:	|  |  |         move.l 68(sp),d0
    29de:	|  |  |         movea.l 28(sp),a0
    29e2:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    29e6:	|  |  |         move.l 64(sp),d0
    29ea:	|  |  |         movea.l 28(sp),a0
    29ee:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    29f2:	|  |  |         move.l 60(sp),d0
    29f6:	|  |  |         movea.l 28(sp),a0
    29fa:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    29fe:	|  |  |         move.l 44(sp),d0
    2a02:	|  |  |         lsl.w #6,d0
    2a04:	|  |  |         move.l 40(sp),d1
    2a08:	|  |  |         add.w d1,d0
    2a0a:	|  |  |         sub.w 76(sp),d0
    2a0e:	|  |  |         add.w 78(sp),d0
    2a12:	|  |  |         movea.l 28(sp),a0
    2a16:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2a1a:	|  |  |         moveq #0,d0
    2a1c:	|  |  |         move.w 14(sp),d0
    2a20:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2a24:	|  |  |         moveq #0,d0
    2a26:	|  |  |         move.w 14(sp),d0
    2a2a:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2a2e:	|  |  |         move.w 38(sp),d0
    2a32:	|  |  |         lsr.w #1,d0
    2a34:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2a38:	|  |  |         move.w 38(sp),d1
    2a3c:	|  |  |         andi.w #1,d1
    2a40:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2a44:	|  |  |  ,----- beq.s 2a4e <CstPasteChar+0x702>
      minterm = 0xbfa;
    2a46:	|  |  |  |      move.w #3066,36(sp)
    2a4c:	|  |  |  |  ,-- bra.s 2a54 <CstPasteChar+0x708>
    } else {
      minterm = 0xb0a;
    2a4e:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();     
    2a54:	|  |  |     '-> move.l 1cbd6 <GfxBase>,d0
    2a5a:	|  |  |         movea.l d0,a6
    2a5c:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a60:	|  |  |         addq.l #1,32(sp)
    2a64:	|  |  '-------> moveq #4,d2
    2a66:	|  |            cmp.l 32(sp),d2
    2a6a:	|  '----------- bge.w 29ca <CstPasteChar+0x67e>
  }   
  //custom->color[0] = 0x000;
}
    2a6e:	'-------------> move.l (sp)+,d2
    2a70:	                movea.l (sp)+,a6
    2a72:	                lea 72(sp),sp
    2a76:	                rts

00002a78 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2a78:	                   lea -24(sp),sp
    2a7c:	                   move.l a6,-(sp)
    2a7e:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2a80:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2a88:	                   move.l 1cafa <CstCleanupQueueDrawBuffer>,d0
    2a8e:	,----------------- beq.w 2ca0 <CstRestoreScreen+0x228>
    2a92:	|                  move.l 1caf2 <CstDrawBuffer>,d0
    2a98:	+----------------- beq.w 2ca0 <CstRestoreScreen+0x228>
    return;
  } 

  WaitBlit();
    2a9c:	|                  move.l 1cbd6 <GfxBase>,d0
    2aa2:	|                  movea.l d0,a6
    2aa4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2aa8:	|                  movea.l 16(sp),a0
    2aac:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2ab2:	|                  movea.l 16(sp),a0
    2ab6:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2abc:	|                  movea.l 16(sp),a0
    2ac0:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2ac6:	|     ,----------- bra.w 2c94 <CstRestoreScreen+0x21c>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2aca:	|  ,--|----------> movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2ad0:	|  |  |            move.l 4(a0),d0
    2ad4:	|  |  |     ,----- beq.s 2aea <CstRestoreScreen+0x72>
    2ad6:	|  |  |     |      movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2adc:	|  |  |     |      movea.l 4(a0),a0
    2ae0:	|  |  |     |      move.l 16(a0),d0
    2ae4:	|  |  |     |      moveq #2,d1
    2ae6:	|  |  |     |      cmp.l d0,d1
    2ae8:	|  |  |     |  ,-- bge.s 2af8 <CstRestoreScreen+0x80>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2aea:	|  |  |     '--|-> movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2af0:	|  |  |        |   move.l 4(a0),d0
    2af4:	|  |  |  ,-----|-- bne.w 2c62 <CstRestoreScreen+0x1ea>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2af8:	|  |  |  |     '-> move.l 1cb1e <winWidth>,d0
    2afe:	|  |  |  |         lsr.l #3,d0
    2b00:	|  |  |  |         move.l d0,d1
    2b02:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2b08:	|  |  |  |         move.w 8(a0),d0
    2b0c:	|  |  |  |         add.w d0,d0
    2b0e:	|  |  |  |         sub.w d0,d1
    2b10:	|  |  |  |         movea.l 16(sp),a0
    2b14:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b18:	|  |  |  |         move.l 1cb1e <winWidth>,d0
    2b1e:	|  |  |  |         lsr.l #3,d0
    2b20:	|  |  |  |         move.l d0,d1
    2b22:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2b28:	|  |  |  |         move.w 8(a0),d0
    2b2c:	|  |  |  |         add.w d0,d0
    2b2e:	|  |  |  |         sub.w d0,d1
    2b30:	|  |  |  |         movea.l 16(sp),a0
    2b34:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2b38:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2b3e:	|  |  |  |         move.w 14(a0),d0
    2b42:	|  |  |  |         move.w d0,d0
    2b44:	|  |  |  |         andi.l #65535,d0
    2b4a:	|  |  |  |         move.l 1cb1e <winWidth>,d1
    2b50:	|  |  |  |         move.l d1,-(sp)
    2b52:	|  |  |  |         move.l d0,-(sp)
    2b54:	|  |  |  |         jsr 17d08 <__mulsi3>
    2b5a:	|  |  |  |         addq.l #8,sp
    2b5c:	|  |  |  |         move.l d0,d1
    2b5e:	|  |  |  |         lsr.l #3,d1
    2b60:	|  |  |  |         move.l 1cae0 <CstBackDrop>,d0
    2b66:	|  |  |  |         add.l d0,d1
    2b68:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2b6e:	|  |  |  |         move.w 12(a0),d0
    2b72:	|  |  |  |         move.w d0,d0
    2b74:	|  |  |  |         andi.l #65535,d0
    2b7a:	|  |  |  |         move.l d1,d2
    2b7c:	|  |  |  |         add.l d0,d2
    2b7e:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2b82:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2b88:	|  |  |  |         move.w 14(a0),d0
    2b8c:	|  |  |  |         move.w d0,d0
    2b8e:	|  |  |  |         andi.l #65535,d0
    2b94:	|  |  |  |         move.l 1cb1e <winWidth>,d1
    2b9a:	|  |  |  |         move.l d1,-(sp)
    2b9c:	|  |  |  |         move.l d0,-(sp)
    2b9e:	|  |  |  |         jsr 17d08 <__mulsi3>
    2ba4:	|  |  |  |         addq.l #8,sp
    2ba6:	|  |  |  |         move.l d0,d1
    2ba8:	|  |  |  |         lsr.l #3,d1
    2baa:	|  |  |  |         move.l 1caf2 <CstDrawBuffer>,d0
    2bb0:	|  |  |  |         add.l d0,d1
    2bb2:	|  |  |  |         movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2bb8:	|  |  |  |         move.w 12(a0),d0
    2bbc:	|  |  |  |         move.w d0,d0
    2bbe:	|  |  |  |         andi.l #65535,d0
    2bc4:	|  |  |  |         move.l d1,d2
    2bc6:	|  |  |  |         add.l d0,d2
    2bc8:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bcc:	|  |  |  |         clr.l 20(sp)
    2bd0:	|  |  |  |     ,-- bra.w 2c58 <CstRestoreScreen+0x1e0>
      {
        custom->bltapt = (APTR) bltapt;
    2bd4:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2bd8:	|  |  |  |  |  |   movea.l 16(sp),a0
    2bdc:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2be0:	|  |  |  |  |  |   move.l 24(sp),d0
    2be4:	|  |  |  |  |  |   movea.l 16(sp),a0
    2be8:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2bec:	|  |  |  |  |  |   movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2bf2:	|  |  |  |  |  |   move.w 10(a0),d0
    2bf6:	|  |  |  |  |  |   lsl.w #6,d0
    2bf8:	|  |  |  |  |  |   movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2bfe:	|  |  |  |  |  |   move.w 8(a0),d1
    2c02:	|  |  |  |  |  |   add.w d1,d0
    2c04:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c08:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2c0c:	|  |  |  |  |  |   move.l 1cb1e <winWidth>,d0
    2c12:	|  |  |  |  |  |   lsr.l #3,d0
    2c14:	|  |  |  |  |  |   move.l 1cb22 <winHeight>,d1
    2c1a:	|  |  |  |  |  |   move.l d1,-(sp)
    2c1c:	|  |  |  |  |  |   move.l d0,-(sp)
    2c1e:	|  |  |  |  |  |   jsr 17d08 <__mulsi3>
    2c24:	|  |  |  |  |  |   addq.l #8,sp
    2c26:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2c2a:	|  |  |  |  |  |   move.l 1cb1e <winWidth>,d0
    2c30:	|  |  |  |  |  |   lsr.l #3,d0
    2c32:	|  |  |  |  |  |   move.l 1cb22 <winHeight>,d1
    2c38:	|  |  |  |  |  |   move.l d1,-(sp)
    2c3a:	|  |  |  |  |  |   move.l d0,-(sp)
    2c3c:	|  |  |  |  |  |   jsr 17d08 <__mulsi3>
    2c42:	|  |  |  |  |  |   addq.l #8,sp
    2c44:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2c48:	|  |  |  |  |  |   move.l 1cbd6 <GfxBase>,d0
    2c4e:	|  |  |  |  |  |   movea.l d0,a6
    2c50:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c54:	|  |  |  |  |  |   addq.l #1,20(sp)
    2c58:	|  |  |  |  |  '-> moveq #4,d0
    2c5a:	|  |  |  |  |      cmp.l 20(sp),d0
    2c5e:	|  |  |  |  '----- bge.w 2bd4 <CstRestoreScreen+0x15c>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2c62:	|  |  |  '-------> move.l 1cafa <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2c6a:	|  |  |            movea.l 1cafa <CstCleanupQueueDrawBuffer>,a0
    2c70:	|  |  |            move.l 16(a0),d0
    2c74:	|  |  |            move.l d0,1cafa <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2c7a:	|  |  |            move.l 12(sp),8(sp)
    2c80:	|  |  |            move.l 1cbca <SysBase>,d0
    2c86:	|  |  |            movea.l d0,a6
    2c88:	|  |  |            movea.l 8(sp),a1
    2c8c:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2c90:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2c94:	|  |  '----------> move.l 1cafa <CstCleanupQueueDrawBuffer>,d0
    2c9a:	|  '-------------- bne.w 2aca <CstRestoreScreen+0x52>
    2c9e:	|              ,-- bra.s 2ca2 <CstRestoreScreen+0x22a>
    return;
    2ca0:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2ca2:	               '-> move.l (sp)+,d2
    2ca4:	                   movea.l (sp)+,a6
    2ca6:	                   lea 24(sp),sp
    2caa:	                   rts

00002cac <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2cac:	                                                                               lea -44(sp),sp
    2cb0:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2cb4:	                                                                               movea.l 92(sp),a2
    2cb8:	                                                                               move.l 96(sp),80(sp)
    2cbe:	                                                                               move.l 100(sp),d4
    2cc2:	                                                                               move.l 104(sp),56(sp)
    2cc8:	                                                                               move.l 108(sp),d2
    2ccc:	                                                                               move.w d4,d3
    2cce:	                                                                               move.w 58(sp),d6
    2cd2:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2cd4:	                                                                               movea.w d6,a5
    2cd6:	                                                                               movea.w d4,a4
    2cd8:	                                                                               move.l a5,-(sp)
    2cda:	                                                                               move.l a4,-(sp)
    2cdc:	                                                                               move.l 1cc26 <zBuffer>,-(sp)
    2ce2:	                                                                               move.l a2,-(sp)
    2ce4:	                                                                               jsr 150a <CstDrawZBuffer>
    2cea:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2cec:	                                                                               lea 16(sp),sp
    2cf0:	                                                                               moveq #1,d0
    2cf2:	                                                                               cmp.w d2,d0
    2cf4:	                                                ,----------------------------- beq.w 3106 <CstScaleSprite+0x45a>
    2cf8:	                                                |                              moveq #2,d1
    2cfa:	                                                |                              cmp.w d2,d1
    2cfc:	                                                |                       ,----- beq.w 2fc0 <CstScaleSprite+0x314>
    2d00:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2d02:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2d06:	                                                |  |                    |      move.l a5,d0
    2d08:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2d0a:	                                                |  |                    |      tst.w d6
    2d0c:	                                                |  |           ,--------|----- blt.w 2fdc <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2d10:	                                                |  |           |  ,-----|----> movea.l 1cb22 <winHeight>,a0
    2d16:	                                                |  |           |  |     |      cmp.l a0,d0
    2d18:	                                                |  |  ,--------|--|-----|----- ble.w 3110 <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2d1c:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2d1e:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 31d2 <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2d22:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2d26:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2d28:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2d2c:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2d2e:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2d30:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2d32:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2d34:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2d36:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2ffc <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2d3a:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1cb1e <winWidth>,d3
    2d40:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2d42:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 311e <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2d46:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2d48:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2d4a:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 31d2 <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2d4e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2d50:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2d52:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2d54:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2d56:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17d08 <__mulsi3>,a4
    2d5c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2d5e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2d60:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2d64:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2d66:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2d68:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2d6a:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2d6c:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2d70:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2d74:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2d78:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2d7a:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2d7c:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2d7e:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2d80:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2d82:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2d84:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2d86:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2d88:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2d8a:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2d8c:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2d90:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2d92:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2d94:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2d9a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2d9c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2d9e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2da0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2da6:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2da8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2dac:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2db2:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2db4:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2db6:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2db8:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2dba:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2dbe:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2dc2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2dc4:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2dc6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2dc8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2dcc:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2dd0:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2dd2:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2dd4:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 34e6 <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2dd8:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    2dde:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2de0:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 358e <CstScaleSprite+0x8e2>
    2de4:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2de6:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2de8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2dea:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2df0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2df6:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 8(a0),a1
    2dfa:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1cb02 <CstBackDropBufferApplyCursor>
    2e00:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    2e06:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2e0a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2e10:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2e12:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2e14:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2e16:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2e18:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2e1a:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 33dc <CstScaleSprite+0x730>
    2e1e:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2e20:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2e22:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #117718,d3
    2e28:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e2a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e2c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2e30:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
  custom->bltalwm = bltalwm;
    2e38:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
  custom->bltamod = bltamod;
    2e3e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
  custom->bltbmod = bltbmod;
    2e44:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb39c5>
  custom->bltcmod = bltcmod;
    2e4a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb39c3>
  custom->bltdmod = bltdmod;
    2e50:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
  custom->bltcon0 = bltcon0;
    2e56:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
  custom->bltcon1 = bltcon1;  
    2e5e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2e66:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e68:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2e6c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2e6e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2e70:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2e72:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2e76:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2e7c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2e7e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1cb1e <winWidth>,d4
    2e84:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2e86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1cb24 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2e8c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2e92:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    2e98:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    2ea0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    2ea6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2eac:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2eae:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 32da <CstScaleSprite+0x62e>
    2eb2:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2eb4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2eb6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2eb8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2eba:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    2ec0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2ec4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2ec6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2ec8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2eca:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ecc:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ed0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2ed2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    2ed8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    2ede:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    2ee4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2eea:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2eec:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 331c <CstScaleSprite+0x670>
    2ef0:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2ef2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2ef4:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2ef6:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2ef8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    2efe:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2f00:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2f02:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f04:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f06:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f0a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2f0c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    2f12:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    2f18:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    2f1e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f24:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f26:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 335a <CstScaleSprite+0x6ae>
    2f2a:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f2c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2f2e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2f30:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2f32:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    2f38:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2f3a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2f3c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f3e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f40:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f44:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2f46:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    2f4c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    2f52:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    2f58:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f5e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f60:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3398 <CstScaleSprite+0x6ec>
    2f64:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f66:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2f68:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2f6a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2f6c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    2f72:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2f76:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2f78:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f7a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f7c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f80:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2f82:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    2f88:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    2f8e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    2f94:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f9a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f9c:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32b6 <CstScaleSprite+0x60a>
    2fa0:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    WaitBlit();
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1caec <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1cae0 <CstBackDrop>,a3
    if(y + single->height < 0) {
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2d10 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2fde:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 31d2 <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2d3a <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2ffe:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 31d2 <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cb1e <winWidth>,d3
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17d08 <__mulsi3>,a4
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 31e8 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 324e <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 8(a0),a1
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1cb02 <CstBackDropBufferApplyCursor>
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    30fe:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2e1e <CstScaleSprite+0x172>
    3102:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 33dc <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1caf2 <CstDrawBuffer>,a3
      break;
    310c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2d02 <CstScaleSprite+0x56>
    ystartdst = y;
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    311a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2d2e <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17d08 <__mulsi3>,a4
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    3128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    312e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    3138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    3140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3148:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    314e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    315c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    3166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    3172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    3174:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    3178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    317c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3476 <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    318a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    318c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 3554 <CstScaleSprite+0x8a8>
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    3192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    3194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    319c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    31a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 8(a0),a1
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1cb02 <CstBackDropBufferApplyCursor>
    31aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    31ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    31b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    31b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    31bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    31be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    31c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    31c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    31ca:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2e1e <CstScaleSprite+0x172>
    31ce:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 33dc <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    31d2:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98705,92(sp)
}
    31da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    31de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 1737c <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    31e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    31ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    31f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    31fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    3200:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    3204:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    3206:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    320a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    3212:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    3214:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    3216:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3218:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3228:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    322c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    3234:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    3236:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    323a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    323e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    3240:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    3242:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    3246:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    3248:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    324a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 30c4 <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    324e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1cafa <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3254:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1cbca <SysBase>,a6
    325a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    325c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    325e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    3262:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    3264:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1cafa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    326a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    326e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3270:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3276:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    327c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    327e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    3280:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 35c4 <CstScaleSprite+0x918>
    3284:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    3286:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    328a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    328c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3290:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3296:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    329a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    329e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1cb1e <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    32a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    32a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    32a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    32aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    32ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    32ae:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2e1e <CstScaleSprite+0x172>
    32b2:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 33dc <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32b6:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    32b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    32ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    32bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    32be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    32c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    32c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    WaitBlit();
    32c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    32ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    32cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    32d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    32d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    32d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32da:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    32dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    32de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    32e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    32e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    32e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    32e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    32ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    32f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    32f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    32f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    32f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    32f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    3304:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    330a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    3310:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3316:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    3318:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2ef0 <CstScaleSprite+0x244>
    331c:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    331e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3320:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    3322:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    3324:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    3326:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    3328:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    332e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3330:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3332:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    3334:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    3336:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    333a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    333c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    3342:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    3348:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    334e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3354:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    3356:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2f2a <CstScaleSprite+0x27e>
    335a:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    335c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    335e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3360:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    3362:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    3364:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    3366:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    336c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    336e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3370:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    3372:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    3374:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3378:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    337a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    3380:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    3386:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    338c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3392:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    3394:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2f64 <CstScaleSprite+0x2b8>
    3398:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    339a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    339c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    339e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    33a0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    33a2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    33a4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb39bb>
    bltbpt += bltbptplus;
    33aa:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    33ae:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    33b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    33b2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    33b4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33b8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33ba:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    33c0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    33c6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    33cc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    33d4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2fa0 <CstScaleSprite+0x2f4>
    33d8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 32b6 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33dc:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    33de:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    33e0:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    33e2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #117718,d3
    33e8:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    33ea:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    33ec:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    33f0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb39a7>
  custom->bltalwm = bltalwm;
    33f8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb39a9>
  custom->bltamod = bltamod;
    33fe:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb39c7>
  custom->bltbmod = bltbmod;
    3404:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb39c5>
  custom->bltcmod = bltcmod;
    340a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb39c3>
  custom->bltdmod = bltdmod;
    3410:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb39c9>
  custom->bltcon0 = bltcon0;
    3416:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb39a3>
  custom->bltcon1 = bltcon1;  
    341e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb39a5>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3426:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3428:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    342c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    342e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    3430:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3432:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    3436:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    343c:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    343e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1cb1e <winWidth>,d4
    3444:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    3446:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1cb24 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    344c:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    3452:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb39b3>
    custom->bltbpt = (APTR) bltbpt;
    3458:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb39af>
    custom->bltcpt = (APTR) bltcpt;
    3460:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb39ab>
    custom->bltdpt = (APTR) bltdpt;
    3466:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb39b7>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    346c:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    346e:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2eb2 <CstScaleSprite+0x206>
    3472:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 32da <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3476:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1cafa <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    347c:	|  |  |  |  |                                         |  |  |  |               movea.l 1cbca <SysBase>,a6
    3482:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    3484:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    3486:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    348a:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    348c:	|  |  |  |  |                                         |  |  |  |               move.l d0,1cafa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3492:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3496:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3498:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    349e:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    34a4:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    34a6:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    34a8:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 35ee <CstScaleSprite+0x942>
    34ac:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    34ae:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    34b0:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    34b4:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    34ba:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    34be:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34c2:	|  |  |  |  |                                         |  |  |  |     |         move.l 1cb1e <winWidth>,d3
    34c8:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    34ce:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34d2:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    34d4:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34d6:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    34d8:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    34da:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    34dc:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    34de:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2e1e <CstScaleSprite+0x172>
    34e2:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 33dc <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    34e6:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1cafa <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    34ec:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1cbca <SysBase>,a6
    34f2:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    34f4:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    34f6:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    34fa:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    34fc:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1cafa <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3502:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3506:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3508:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    350e:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3514:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    3516:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    3518:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3620 <CstScaleSprite+0x974>
    351c:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    351e:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    3520:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3524:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    352a:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3530:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3536:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1cb1e <winWidth>,d3
    353c:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3542:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3544:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    3546:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    3548:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    354a:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    354c:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2e1e <CstScaleSprite+0x172>
    3550:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 33dc <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3554:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    3556:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    3558:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    355a:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    355c:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    355e:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3564:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3568:	|  |                                                  |     |  |  |  |  |  |   lea 8(a0),a1
    356c:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1cb02 <CstBackDropBufferApplyCursor>
    3572:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3576:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    357a:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    3580:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3584:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3586:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3588:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    358a:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 31c2 <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    358e:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    3590:	|                                                           |  |  |  |  |  |   add.l d1,d0
    3592:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    3594:	|                                                           |  |  |  |  |  |   add.w d0,d2
    3596:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3598:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    359e:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    35a4:	|                                                           |  |  |  |  |  |   lea 8(a0),a1
    35a8:	|                                                           |  |  |  |  |  |   move.l a1,1cb02 <CstBackDropBufferApplyCursor>
    35ae:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    35b4:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    35b8:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    35be:	|                                                           |  |  |  |  |  |   clr.w d2
    35c0:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2e12 <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35c4:	                                                            |  '--|--|--|--|-> moveq #15,d0
    35c6:	                                                            |     |  |  |  |   add.l d1,d0
    35c8:	                                                            |     |  |  |  |   asr.l #4,d0
    35ca:	                                                            |     |  |  |  |   add.w 78(sp),d0
    35ce:	                                                            |     |  |  |  |   add.w d2,d0
    35d0:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    35d4:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    35da:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    35de:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35e2:	                                                            |     |  |  |  |   move.l 1cb1e <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    35e8:	                                                            |     |  |  |  |   suba.l a4,a4
    35ea:	                                                            '-----|--|--|--|-- bra.w 32a6 <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    35ee:	                                                                  |  '--|--|-> moveq #15,d0
    35f0:	                                                                  |     |  |   add.l d1,d0
    35f2:	                                                                  |     |  |   asr.l #4,d0
    35f4:	                                                                  |     |  |   addq.w #1,d0
    35f6:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    35fa:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3600:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3604:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3608:	                                                                  |     |  |   move.l 1cb1e <winWidth>,d3
    360e:	                                                                  |     |  |   move.w #-1,76(sp)
    3614:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3618:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    361a:	                                                                  |     |  |   clr.w d6
    361c:	                                                                  '-----|--|-- bra.w 34d6 <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3620:	                                                                        |  '-> moveq #15,d0
    3622:	                                                                        |      add.l d1,d0
    3624:	                                                                        |      asr.l #4,d0
    3626:	                                                                        |      add.w d0,d2
    3628:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    362c:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3632:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3638:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    363e:	                                                                        |      move.l 1cb1e <winWidth>,d3
    3644:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    364a:	                                                                        |      clr.w d2
    364c:	                                                                        '----- bra.w 3544 <CstScaleSprite+0x898>

00003650 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3650:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3652:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3658:	move.l 8(sp),d0
    365c:	movea.l (sp),a0
    365e:	move.l d0,128(a0)
}
    3662:	nop
    3664:	addq.l #4,sp
    3666:	rts

00003668 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3668:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    366c:	move.l 1caee <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3674:	move.l 1caf2 <CstDrawBuffer>,d0
    367a:	move.l d0,1caee <CstViewBuffer>
  CstDrawBuffer = tmp;
    3680:	move.l 16(sp),1caf2 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3688:	move.l 1caf6 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3690:	move.l 1cafa <CstCleanupQueueDrawBuffer>,d0
    3696:	move.l d0,1caf6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    369c:	move.l 12(sp),1cafa <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    36a4:	move.l 1cae8 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    36ac:	move.l 1caee <CstViewBuffer>,d0
    36b2:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    36b6:	move.l 4(sp),d0
    36ba:	clr.w d0
    36bc:	swap d0
    36be:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    36c2:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    36c6:	movea.w #118,a0
    36ca:	adda.l 8(sp),a0
    36ce:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    36d0:	movea.w #114,a0
    36d4:	adda.l 8(sp),a0
    36d8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    36dc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36e4:	move.l 4(sp),d0
    36e8:	clr.w d0
    36ea:	swap d0
    36ec:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36f0:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    36f4:	movea.w #126,a0
    36f8:	adda.l 8(sp),a0
    36fc:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    36fe:	movea.w #122,a0
    3702:	adda.l 8(sp),a0
    3706:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    370a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3712:	move.l 4(sp),d0
    3716:	clr.w d0
    3718:	swap d0
    371a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    371e:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3722:	movea.l 8(sp),a0
    3726:	lea 134(a0),a0
    372a:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    372c:	movea.l 8(sp),a0
    3730:	lea 130(a0),a0
    3734:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3738:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3740:	move.l 4(sp),d0
    3744:	clr.w d0
    3746:	swap d0
    3748:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    374c:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3750:	movea.l 8(sp),a0
    3754:	lea 142(a0),a0
    3758:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    375a:	movea.l 8(sp),a0
    375e:	lea 138(a0),a0
    3762:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3766:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    376e:	move.l 4(sp),d0
    3772:	clr.w d0
    3774:	swap d0
    3776:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    377a:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    377e:	movea.l 8(sp),a0
    3782:	lea 150(a0),a0
    3786:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3788:	movea.l 8(sp),a0
    378c:	lea 146(a0),a0
    3790:	move.w 2(sp),(a0)

}
    3794:	nop
    3796:	lea 20(sp),sp
    379a:	rts

0000379c <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    379c:	          lea -80(sp),sp
    37a0:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    37a2:	          pea 181c4 <PutChar+0x3a6>
    37a8:	          jsr 1737c <KPrintF>
    37ae:	          addq.l #4,sp

  width = width / 8;
    37b0:	          move.l 88(sp),d0
    37b4:	      ,-- bpl.s 37b8 <CstReserveBackdrop+0x1c>
    37b6:	      |   addq.l #7,d0
    37b8:	      '-> asr.l #3,d0
    37ba:	          move.l d0,88(sp)

  if( width < 40) 
    37be:	          moveq #39,d0
    37c0:	          cmp.l 88(sp),d0
    37c4:	      ,-- blt.s 37da <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    37c6:	      |   pea 181de <PutChar+0x3c0>
    37cc:	      |   jsr 1737c <KPrintF>
    37d2:	      |   addq.l #4,sp
    return FALSE;
    37d4:	      |   clr.w d0
    37d6:	,-----|-- bra.w 3b7c <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    37da:	|     '-> pea 1821c <PutChar+0x3fe>
    37e0:	|         jsr 1737c <KPrintF>
    37e6:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    37e8:	|         move.l 88(sp),-(sp)
    37ec:	|         jsr ff0 <CstCreateCopperlist>
    37f2:	|         addq.l #4,sp
    37f4:	|         move.l d0,1cae8 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    37fa:	|         pea 1823c <PutChar+0x41e>
    3800:	|         jsr 1737c <KPrintF>
    3806:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3808:	|         move.l 88(sp),d1
    380c:	|         move.l 92(sp),d0
    3810:	|         muls.w d1,d0
    3812:	|         move.w d0,1cade <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3818:	|         move.w 1cade <CstBackdropSizePlane>,d1
    381e:	|         move.w d1,d0
    3820:	|         add.w d0,d0
    3822:	|         add.w d0,d0
    3824:	|         add.w d1,d0
    3826:	|         move.w d0,1cadc <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    382c:	|         move.w 1cadc <CstBackdropSize>,d0
    3832:	|         move.w d0,d0
    3834:	|         andi.l #65535,d0
    383a:	|         move.l d0,72(sp)
    383e:	|         moveq #2,d1
    3840:	|         move.l d1,68(sp)
    3844:	|         move.l 1cbca <SysBase>,d0
    384a:	|         movea.l d0,a6
    384c:	|         move.l 72(sp),d0
    3850:	|         move.l 68(sp),d1
    3854:	|         jsr -684(a6)
    3858:	|         move.l d0,64(sp)
    385c:	|         move.l 64(sp),d0
    3860:	|         move.l d0,1cae0 <CstBackDrop>
  if( !CstBackDrop)
    3866:	|         move.l 1cae0 <CstBackDrop>,d0
    386c:	|     ,-- bne.s 3882 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    386e:	|     |   pea 18263 <PutChar+0x445>
    3874:	|     |   jsr 1737c <KPrintF>
    387a:	|     |   addq.l #4,sp
    return FALSE;  
    387c:	|     |   clr.w d0
    387e:	+-----|-- bra.w 3b7c <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3882:	|     '-> pea 1829b <PutChar+0x47d>
    3888:	|         jsr 1737c <KPrintF>
    388e:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3890:	|         move.l 1cae0 <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3898:	|         clr.l 76(sp)
    389c:	|     ,-- bra.s 38b2 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    389e:	|  ,--|-> move.l 80(sp),d0
    38a2:	|  |  |   move.l d0,d1
    38a4:	|  |  |   addq.l #4,d1
    38a6:	|  |  |   move.l d1,80(sp)
    38aa:	|  |  |   movea.l d0,a0
    38ac:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    38ae:	|  |  |   addq.l #1,76(sp)
    38b2:	|  |  '-> move.w 1cadc <CstBackdropSize>,d0
    38b8:	|  |      lsr.w #2,d0
    38ba:	|  |      move.w d0,d0
    38bc:	|  |      andi.l #65535,d0
    38c2:	|  |      cmp.l 76(sp),d0
    38c6:	|  '----- bgt.s 389e <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38c8:	|         move.w 1cadc <CstBackdropSize>,d0
    38ce:	|         move.w d0,d0
    38d0:	|         andi.l #65535,d0
    38d6:	|         move.l 88(sp),d1
    38da:	|         add.l d1,d1
    38dc:	|         add.l d1,d0
    38de:	|         move.l d0,60(sp)
    38e2:	|         moveq #2,d0
    38e4:	|         move.l d0,56(sp)
    38e8:	|         move.l 1cbca <SysBase>,d0
    38ee:	|         movea.l d0,a6
    38f0:	|         move.l 60(sp),d0
    38f4:	|         move.l 56(sp),d1
    38f8:	|         jsr -684(a6)
    38fc:	|         move.l d0,52(sp)
    3900:	|         move.l 52(sp),d0
    3904:	|         move.l d0,1caf2 <CstDrawBuffer>
  if( !CstDrawBuffer)
    390a:	|         move.l 1caf2 <CstDrawBuffer>,d0
    3910:	|     ,-- bne.s 3926 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3912:	|     |   pea 182c1 <PutChar+0x4a3>
    3918:	|     |   jsr 1737c <KPrintF>
    391e:	|     |   addq.l #4,sp
    return FALSE;  
    3920:	|     |   clr.w d0
    3922:	+-----|-- bra.w 3b7c <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3926:	|     '-> pea 182fb <PutChar+0x4dd>
    392c:	|         jsr 1737c <KPrintF>
    3932:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3934:	|         move.l #10000,48(sp)
    393c:	|         clr.l 44(sp)
    3940:	|         move.l 1cbca <SysBase>,d0
    3946:	|         movea.l d0,a6
    3948:	|         move.l 48(sp),d0
    394c:	|         move.l 44(sp),d1
    3950:	|         jsr -684(a6)
    3954:	|         move.l d0,40(sp)
    3958:	|         move.l 40(sp),d0
    395c:	|         move.l d0,1cafe <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3962:	|         move.l 1cafe <CstBackDropBufferApplyStart>,d0
    3968:	|     ,-- bne.s 397e <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    396a:	|     |   pea 18323 <PutChar+0x505>
    3970:	|     |   jsr 1737c <KPrintF>
    3976:	|     |   addq.l #4,sp
    return FALSE;  
    3978:	|     |   clr.w d0
    397a:	+-----|-- bra.w 3b7c <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    397e:	|     '-> move.l 1cafe <CstBackDropBufferApplyStart>,d0
    3984:	|         move.l d0,1cb02 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    398a:	|         movea.l 1cafe <CstBackDropBufferApplyStart>,a0
    3990:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3992:	|         movea.l 1cafe <CstBackDropBufferApplyStart>,a0
    3998:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    399a:	|         move.w 1cadc <CstBackdropSize>,d0
    39a0:	|         move.w d0,d0
    39a2:	|         andi.l #65535,d0
    39a8:	|         move.l 88(sp),d1
    39ac:	|         add.l d1,d1
    39ae:	|         add.l d1,d0
    39b0:	|         move.l d0,36(sp)
    39b4:	|         moveq #2,d1
    39b6:	|         move.l d1,32(sp)
    39ba:	|         move.l 1cbca <SysBase>,d0
    39c0:	|         movea.l d0,a6
    39c2:	|         move.l 36(sp),d0
    39c6:	|         move.l 32(sp),d1
    39ca:	|         jsr -684(a6)
    39ce:	|         move.l d0,28(sp)
    39d2:	|         move.l 28(sp),d0
    39d6:	|         move.l d0,1caee <CstViewBuffer>
  if( !CstViewBuffer)
    39dc:	|         move.l 1caee <CstViewBuffer>,d0
    39e2:	|     ,-- bne.s 39f8 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    39e4:	|     |   pea 1836e <PutChar+0x550>
    39ea:	|     |   jsr 1737c <KPrintF>
    39f0:	|     |   addq.l #4,sp
    return FALSE;  
    39f2:	|     |   clr.w d0
    39f4:	+-----|-- bra.w 3b7c <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    39f8:	|     '-> pea 183a8 <PutChar+0x58a>
    39fe:	|         jsr 1737c <KPrintF>
    3a04:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3a06:	|         move.l 1caf2 <CstDrawBuffer>,d1
    3a0c:	|         move.l 88(sp),d0
    3a10:	|     ,-- bpl.s 3a14 <CstReserveBackdrop+0x278>
    3a12:	|     |   addq.l #3,d0
    3a14:	|     '-> asr.l #2,d0
    3a16:	|         add.l d0,d0
    3a18:	|         add.l d0,d0
    3a1a:	|         add.l d1,d0
    3a1c:	|         move.l d0,1caf2 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3a22:	|         move.l 1caee <CstViewBuffer>,d1
    3a28:	|         move.l 88(sp),d0
    3a2c:	|     ,-- bpl.s 3a30 <CstReserveBackdrop+0x294>
    3a2e:	|     |   addq.l #3,d0
    3a30:	|     '-> asr.l #2,d0
    3a32:	|         add.l d0,d0
    3a34:	|         add.l d0,d0
    3a36:	|         add.l d1,d0
    3a38:	|         move.l d0,1caee <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3a3e:	|         move.l #5200,24(sp)
    3a46:	|         moveq #2,d0
    3a48:	|         move.l d0,20(sp)
    3a4c:	|         move.l 1cbca <SysBase>,d0
    3a52:	|         movea.l d0,a6
    3a54:	|         move.l 24(sp),d0
    3a58:	|         move.l 20(sp),d1
    3a5c:	|         jsr -684(a6)
    3a60:	|         move.l d0,16(sp)
    3a64:	|         move.l 16(sp),d0
    3a68:	|         move.l d0,1cb12 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3a6e:	|         move.l #5600,12(sp)
    3a76:	|         moveq #2,d1
    3a78:	|         move.l d1,8(sp)
    3a7c:	|         move.l 1cbca <SysBase>,d0
    3a82:	|         movea.l d0,a6
    3a84:	|         move.l 12(sp),d0
    3a88:	|         move.l 8(sp),d1
    3a8c:	|         jsr -684(a6)
    3a90:	|         move.l d0,4(sp)
    3a94:	|         move.l 4(sp),d0
    3a98:	|         move.l d0,1cb16 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3a9e:	|         move.l 1cae0 <CstBackDrop>,d0
    3aa4:	|         clr.l -(sp)
    3aa6:	|         pea 5 <_start+0x5>
    3aaa:	|         pea 100 <copyString+0x48>
    3aae:	|         pea 140 <decodeFilename+0x28>
    3ab2:	|         pea 183d0 <PutChar+0x5b2>
    3ab8:	|         move.l d0,-(sp)
    3aba:	|         jsr 17464 <debug_register_bitmap>
    3ac0:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3ac4:	|         move.l 92(sp),d0
    3ac8:	|         movea.w d0,a1
    3aca:	|         move.l 88(sp),d0
    3ace:	|         lsl.w #3,d0
    3ad0:	|         movea.w d0,a0
    3ad2:	|         move.l 1caf2 <CstDrawBuffer>,d0
    3ad8:	|         clr.l -(sp)
    3ada:	|         pea 5 <_start+0x5>
    3ade:	|         move.l a1,-(sp)
    3ae0:	|         move.l a0,-(sp)
    3ae2:	|         pea 183e0 <PutChar+0x5c2>
    3ae8:	|         move.l d0,-(sp)
    3aea:	|         jsr 17464 <debug_register_bitmap>
    3af0:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3af4:	|         move.l 92(sp),d0
    3af8:	|         movea.w d0,a1
    3afa:	|         move.l 88(sp),d0
    3afe:	|         lsl.w #3,d0
    3b00:	|         movea.w d0,a0
    3b02:	|         move.l 1caee <CstViewBuffer>,d0
    3b08:	|         clr.l -(sp)
    3b0a:	|         pea 5 <_start+0x5>
    3b0e:	|         move.l a1,-(sp)
    3b10:	|         move.l a0,-(sp)
    3b12:	|         pea 183ef <PutChar+0x5d1>
    3b18:	|         move.l d0,-(sp)
    3b1a:	|         jsr 17464 <debug_register_bitmap>
    3b20:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3b24:	|         move.l 1cae8 <CstCopperList>,d0
    3b2a:	|     ,-- beq.s 3b3c <CstReserveBackdrop+0x3a0>
    3b2c:	|     |   move.l 1caf2 <CstDrawBuffer>,d0
    3b32:	|     +-- beq.s 3b3c <CstReserveBackdrop+0x3a0>
    3b34:	|     |   move.l 1caee <CstViewBuffer>,d0
    3b3a:	|  ,--|-- bne.s 3b4e <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3b3c:	|  |  '-> pea 183fe <PutChar+0x5e0>
    3b42:	|  |      jsr 1737c <KPrintF>
    3b48:	|  |      addq.l #4,sp
    return FALSE;
    3b4a:	|  |      clr.w d0
    3b4c:	+--|----- bra.s 3b7c <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3b4e:	|  '----> pea 1842b <PutChar+0x60d>
    3b54:	|         jsr 1737c <KPrintF>
    3b5a:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3b5c:	|         move.l 1cae8 <CstCopperList>,d0
    3b62:	|         move.l d0,-(sp)
    3b64:	|         jsr 3650 <CstSetCl>
    3b6a:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3b6c:	|         pea 18452 <PutChar+0x634>
    3b72:	|         jsr 1737c <KPrintF>
    3b78:	|         addq.l #4,sp
  return TRUE;
    3b7a:	|         moveq #1,d0

}
    3b7c:	'-------> movea.l (sp)+,a6
    3b7e:	          lea 80(sp),sp
    3b82:	          rts

00003b84 <CstUnfreeze>:

void CstUnfreeze() {
    3b84:	       lea -24(sp),sp
    3b88:	       move.l a6,-(sp)
    3b8a:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3b8c:	       pea 18475 <PutChar+0x657>
    3b92:	       jsr 1737c <KPrintF>
    3b98:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3b9a:	       move.l 1cb1e <winWidth>,d0
    3ba0:	       lsr.l #3,d0
    3ba2:	       move.l d0,d1
    3ba4:	       move.l 1cb22 <winHeight>,d0
    3baa:	       move.l d0,d0
    3bac:	       muls.w d0,d1
    3bae:	       move.w d1,d0
    3bb0:	       add.w d0,d0
    3bb2:	       add.w d0,d0
    3bb4:	       move.w d0,d2
    3bb6:	       add.w d1,d2
    3bb8:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3bbc:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3bc4:	       move.l 1cb22 <winHeight>,d0
    3bca:	       move.l d0,d0
    3bcc:	       movea.w d0,a1
    3bce:	       move.l 1cb1e <winWidth>,d0
    3bd4:	       move.l d0,d0
    3bd6:	       movea.w d0,a0
    3bd8:	       move.l 1cae4 <CstBackDropBackup>,d0
    3bde:	       clr.l -(sp)
    3be0:	       pea 5 <_start+0x5>
    3be4:	       move.l a1,-(sp)
    3be6:	       move.l a0,-(sp)
    3be8:	       pea 18047 <PutChar+0x229>
    3bee:	       move.l d0,-(sp)
    3bf0:	       jsr 17464 <debug_register_bitmap>
    3bf6:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3bfa:	       move.l 1cae4 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3c02:	       move.l 1cae0 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3c0a:	       clr.l 20(sp)
    3c0e:	   ,-- bra.s 3c34 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3c10:	,--|-> move.l 28(sp),d1
    3c14:	|  |   move.l d1,d0
    3c16:	|  |   addq.l #4,d0
    3c18:	|  |   move.l d0,28(sp)
    3c1c:	|  |   move.l 24(sp),d0
    3c20:	|  |   move.l d0,d2
    3c22:	|  |   addq.l #4,d2
    3c24:	|  |   move.l d2,24(sp)
    3c28:	|  |   movea.l d1,a0
    3c2a:	|  |   move.l (a0),d1
    3c2c:	|  |   movea.l d0,a0
    3c2e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3c30:	|  |   addq.l #1,20(sp)
    3c34:	|  '-> move.w 18(sp),d0
    3c38:	|      lsr.w #2,d0
    3c3a:	|      move.w d0,d0
    3c3c:	|      andi.l #65535,d0
    3c42:	|      cmp.l 20(sp),d0
    3c46:	'----- bgt.s 3c10 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3c48:	       move.w #2,1caec <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3c50:	       move.l 1cb1e <winWidth>,d0
    3c56:	       lsr.l #4,d0
    3c58:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    3c5e:	       move.l a0,d1
    3c60:	       addq.l #2,d1
    3c62:	       move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    3c68:	       move.l d0,d0
    3c6a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3c6c:	       move.l 1cb22 <winHeight>,d0
    3c72:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    3c78:	       move.l a0,d1
    3c7a:	       addq.l #2,d1
    3c7c:	       move.l d1,1cb02 <CstBackDropBufferApplyCursor>
    3c82:	       move.l d0,d0
    3c84:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3c86:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    3c8c:	       move.l a0,d0
    3c8e:	       addq.l #2,d0
    3c90:	       move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    3c96:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3c98:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    3c9e:	       move.l a0,d0
    3ca0:	       addq.l #2,d0
    3ca2:	       move.l d0,1cb02 <CstBackDropBufferApplyCursor>
    3ca8:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    3caa:	       movea.l 1cb02 <CstBackDropBufferApplyCursor>,a0
    3cb0:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3cb2:	       move.l 1cae4 <CstBackDropBackup>,d0
    3cb8:	   ,-- beq.s 3ce0 <CstUnfreeze+0x15c>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3cba:	   |   pea 184a0 <PutChar+0x682>
    3cc0:	   |   jsr 1737c <KPrintF>
    3cc6:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3cc8:	   |   move.l 1cae4 <CstBackDropBackup>,10(sp)
    3cd0:	   |   move.l 1cbca <SysBase>,d0
    3cd6:	   |   movea.l d0,a6
    3cd8:	   |   movea.l 10(sp),a1
    3cdc:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3ce0:	   '-> pea 184c4 <PutChar+0x6a6>
    3ce6:	       jsr 1737c <KPrintF>
    3cec:	       addq.l #4,sp

}
    3cee:	       nop
    3cf0:	       move.l (sp)+,d2
    3cf2:	       movea.l (sp)+,a6
    3cf4:	       lea 24(sp),sp
    3cf8:	       rts

00003cfa <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3cfa:	       lea -28(sp),sp
    3cfe:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3d02:	       move.l 52(sp),-(sp)
    3d06:	       jsr 15986 <stringWidth>
    3d0c:	       addq.l #4,sp
    3d0e:	       asr.l #1,d0
    3d10:	       move.l d0,-(sp)
    3d12:	       jsr 177ae <__floatsisf>
    3d18:	       addq.l #4,sp
    3d1a:	       move.l d0,d1
    3d1c:	       move.l 1c55c <cameraZoom>,d0
    3d22:	       move.l d0,-(sp)
    3d24:	       move.l d1,-(sp)
    3d26:	       jsr 17664 <__divsf3>
    3d2c:	       addq.l #8,sp
    3d2e:	       move.l d0,-(sp)
    3d30:	       jsr 17746 <__fixsfsi>
    3d36:	       addq.l #4,sp
    3d38:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3d3c:	       move.l 56(sp),d0
    3d40:	       sub.l 44(sp),d0
    3d44:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3d48:	       move.l 56(sp),d0
    3d4c:	       add.l 44(sp),d0
    3d50:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3d54:	       moveq #12,d0
    3d56:	       move.l d0,32(sp)
    3d5a:	       clr.l 28(sp)
    3d5e:	       move.l 1cbca <SysBase>,d0
    3d64:	       movea.l d0,a6
    3d66:	       move.l 32(sp),d0
    3d6a:	       move.l 28(sp),d1
    3d6e:	       jsr -684(a6)
    3d72:	       move.l d0,24(sp)
    3d76:	       move.l 24(sp),d0
    3d7a:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3d7e:	       movea.l 1cb1a <speech>,a0
    3d84:	       move.l 4(a0),d0
    3d88:	       movea.l 20(sp),a0
    3d8c:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3d90:	       move.l 52(sp),-(sp)
    3d94:	       jsr b8 <copyString>
    3d9a:	       addq.l #4,sp
    3d9c:	       movea.l 20(sp),a0
    3da0:	       move.l d0,(a0)
	newLine -> x = xx1;
    3da2:	       movea.l 20(sp),a0
    3da6:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3dac:	       movea.l 1cb1a <speech>,a0
    3db2:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3db8:	       moveq #4,d0
    3dba:	       cmp.l 40(sp),d0
    3dbe:	   ,-- blt.s 3de0 <addSpeechLine+0xe6>
    3dc0:	   |   movea.l 60(sp),a0
    3dc4:	   |   move.l (a0),d1
    3dc6:	   |   moveq #5,d0
    3dc8:	   |   sub.l 40(sp),d0
    3dcc:	   |   cmp.l d1,d0
    3dce:	   +-- ble.s 3de0 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3dd0:	   |   moveq #5,d0
    3dd2:	   |   sub.l 40(sp),d0
    3dd6:	   |   movea.l 60(sp),a0
    3dda:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3ddc:	,--|-- bra.w 3f0c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3de0:	|  '-> move.l 36(sp),-(sp)
    3de4:	|      jsr 177ae <__floatsisf>
    3dea:	|      addq.l #4,sp
    3dec:	|      move.l d0,d2
    3dee:	|      move.l 1cb1e <winWidth>,d0
    3df4:	|      move.l d0,-(sp)
    3df6:	|      jsr 177d6 <__floatunsisf>
    3dfc:	|      addq.l #4,sp
    3dfe:	|      move.l d0,d1
    3e00:	|      move.l 1c55c <cameraZoom>,d0
    3e06:	|      move.l d0,-(sp)
    3e08:	|      move.l d1,-(sp)
    3e0a:	|      jsr 17664 <__divsf3>
    3e10:	|      addq.l #8,sp
    3e12:	|      move.l #1084227584,-(sp)
    3e18:	|      move.l d0,-(sp)
    3e1a:	|      jsr 17aa2 <__subsf3>
    3e20:	|      addq.l #8,sp
    3e22:	|      move.l d0,-(sp)
    3e24:	|      move.l d2,-(sp)
    3e26:	|      jsr 17896 <__gesf2>
    3e2c:	|      addq.l #8,sp
    3e2e:	|      tst.l d0
    3e30:	|  ,-- bge.s 3e36 <addSpeechLine+0x13c>
}
    3e32:	+--|-- bra.w 3f0c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3e36:	|  '-> movea.l 60(sp),a0
    3e3a:	|      move.l (a0),d0
    3e3c:	|      move.l d0,-(sp)
    3e3e:	|      jsr 177ae <__floatsisf>
    3e44:	|      addq.l #4,sp
    3e46:	|      move.l d0,-(sp)
    3e48:	|      jsr 176d0 <__extendsfdf2>
    3e4e:	|      addq.l #4,sp
    3e50:	|      move.l d0,d4
    3e52:	|      move.l d1,d5
    3e54:	|      move.l 1cb1e <winWidth>,d0
    3e5a:	|      move.l d0,-(sp)
    3e5c:	|      jsr 177d6 <__floatunsisf>
    3e62:	|      addq.l #4,sp
    3e64:	|      move.l d0,d1
    3e66:	|      move.l 1c55c <cameraZoom>,d0
    3e6c:	|      move.l d0,-(sp)
    3e6e:	|      move.l d1,-(sp)
    3e70:	|      jsr 17664 <__divsf3>
    3e76:	|      addq.l #8,sp
    3e78:	|      move.l d0,-(sp)
    3e7a:	|      jsr 176d0 <__extendsfdf2>
    3e80:	|      addq.l #4,sp
    3e82:	|      clr.l -(sp)
    3e84:	|      move.l #1075052544,-(sp)
    3e8a:	|      move.l d1,-(sp)
    3e8c:	|      move.l d0,-(sp)
    3e8e:	|      jsr 17a40 <__subdf3>
    3e94:	|      lea 16(sp),sp
    3e98:	|      move.l d0,d2
    3e9a:	|      move.l d1,d3
    3e9c:	|      move.l 36(sp),-(sp)
    3ea0:	|      jsr 1776e <__floatsidf>
    3ea6:	|      addq.l #4,sp
    3ea8:	|      move.l d1,-(sp)
    3eaa:	|      move.l d0,-(sp)
    3eac:	|      move.l d3,-(sp)
    3eae:	|      move.l d2,-(sp)
    3eb0:	|      jsr 17a40 <__subdf3>
    3eb6:	|      lea 16(sp),sp
    3eba:	|      move.l d1,-(sp)
    3ebc:	|      move.l d0,-(sp)
    3ebe:	|      move.l d5,-(sp)
    3ec0:	|      move.l d4,-(sp)
    3ec2:	|      jsr 178cc <__gtdf2>
    3ec8:	|      lea 16(sp),sp
    3ecc:	|      tst.l d0
    3ece:	|  ,-- bgt.s 3ed2 <addSpeechLine+0x1d8>
}
    3ed0:	+--|-- bra.s 3f0c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3ed2:	|  '-> move.l 1cb1e <winWidth>,d0
    3ed8:	|      move.l d0,-(sp)
    3eda:	|      jsr 177d6 <__floatunsisf>
    3ee0:	|      addq.l #4,sp
    3ee2:	|      move.l d0,d1
    3ee4:	|      move.l 1c55c <cameraZoom>,d0
    3eea:	|      move.l d0,-(sp)
    3eec:	|      move.l d1,-(sp)
    3eee:	|      jsr 17664 <__divsf3>
    3ef4:	|      addq.l #8,sp
    3ef6:	|      move.l d0,-(sp)
    3ef8:	|      jsr 17746 <__fixsfsi>
    3efe:	|      addq.l #4,sp
    3f00:	|      subq.l #5,d0
    3f02:	|      sub.l 36(sp),d0
    3f06:	|      movea.l 60(sp),a0
    3f0a:	|      move.l d0,(a0)
}
    3f0c:	'----> nop
    3f0e:	       movem.l (sp)+,d2-d5/a6
    3f12:	       lea 28(sp),sp
    3f16:	       rts

00003f18 <initSpeech>:


void initSpeech () {
    3f18:	       lea -12(sp),sp
    3f1c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3f1e:	       moveq #20,d0
    3f20:	       move.l d0,12(sp)
    3f24:	       clr.l 8(sp)
    3f28:	       move.l 1cbca <SysBase>,d0
    3f2e:	       movea.l d0,a6
    3f30:	       move.l 12(sp),d0
    3f34:	       move.l 8(sp),d1
    3f38:	       jsr -684(a6)
    3f3c:	       move.l d0,4(sp)
    3f40:	       move.l 4(sp),d0
    3f44:	       move.l d0,1cb1a <speech>
	if (speech) {
    3f4a:	       move.l 1cb1a <speech>,d0
    3f50:	,----- beq.s 3f7c <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3f52:	|      movea.l 1cb1a <speech>,a0
    3f58:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3f5a:	|      movea.l 1cb1a <speech>,a0
    3f60:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3f64:	|      movea.l 1cb1a <speech>,a0
    3f6a:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3f6e:	|      movea.l 1cb1a <speech>,a0
    3f74:	|      moveq #-1,d0
    3f76:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3f7a:	|  ,-- bra.s 3f8a <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3f7c:	'--|-> pea 184da <PutChar+0x6bc>
    3f82:	   |   jsr 1737c <KPrintF>
    3f88:	   |   addq.l #4,sp
}
    3f8a:	   '-> nop
    3f8c:	       movea.l (sp)+,a6
    3f8e:	       lea 12(sp),sp
    3f92:	       rts

00003f94 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3f94:	       movea.l 1cb1a <speech>,a0
    3f9a:	       move.l 4(a0),d0
    3f9e:	,----- beq.s 3fac <isThereAnySpeechGoingOn+0x18>
    3fa0:	|      movea.l 1cb1a <speech>,a0
    3fa6:	|      move.l 16(a0),d0
    3faa:	|  ,-- bra.s 3fae <isThereAnySpeechGoingOn+0x1a>
    3fac:	'--|-> moveq #-1,d0
}
    3fae:	   '-> rts

00003fb0 <killAllSpeech>:

void killAllSpeech () {
    3fb0:	       lea -12(sp),sp
    3fb4:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3fb6:	       movea.l 1cb1a <speech>,a0
    3fbc:	       move.l 12(a0),d0
    3fc0:	       moveq #-1,d1
    3fc2:	       cmp.l d0,d1
    3fc4:	   ,-- beq.s 3fd2 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3fc6:	   |   movea.l 1cb1a <speech>,a0
    3fcc:	   |   moveq #-1,d0
    3fce:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3fd2:	   '-> movea.l 1cb1a <speech>,a0
    3fd8:	       move.l (a0),d0
    3fda:	,----- beq.w 4066 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3fde:	|      movea.l 1cb1a <speech>,a0
    3fe4:	|      move.l (a0),d1
    3fe6:	|      lea -132(sp),sp
    3fea:	|      move.l sp,d0
    3fec:	|      movea.w #132,a0
    3ff0:	|      move.l a0,-(sp)
    3ff2:	|      move.l d1,-(sp)
    3ff4:	|      move.l d0,-(sp)
    3ff6:	|      jsr 17330 <memcpy>
    3ffc:	|      lea 12(sp),sp
    4000:	|      jsr ab82 <makeSilent>
    4006:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    400a:	|      movea.l 1cb1a <speech>,a0
    4010:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4012:	+----- bra.s 4066 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4014:	|  ,-> movea.l 1cb1a <speech>,a0
    401a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4020:	|  |   movea.l 1cb1a <speech>,a0
    4026:	|  |   movea.l 4(a0),a1
    402a:	|  |   movea.l 1cb1a <speech>,a0
    4030:	|  |   move.l 4(a1),d0
    4034:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4038:	|  |   movea.l 12(sp),a0
    403c:	|  |   move.l (a0),8(sp)
    4040:	|  |   move.l 1cbca <SysBase>,d0
    4046:	|  |   movea.l d0,a6
    4048:	|  |   movea.l 8(sp),a1
    404c:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4050:	|  |   move.l 12(sp),4(sp)
    4056:	|  |   move.l 1cbca <SysBase>,d0
    405c:	|  |   movea.l d0,a6
    405e:	|  |   movea.l 4(sp),a1
    4062:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4066:	'--|-> movea.l 1cb1a <speech>,a0
    406c:	   |   move.l 4(a0),d0
    4070:	   '-- bne.s 4014 <killAllSpeech+0x64>
	}
}
    4072:	       nop
    4074:	       nop
    4076:	       movea.l (sp)+,a6
    4078:	       lea 12(sp),sp
    407c:	       rts

0000407e <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    407e:	pea 2 <_start+0x2>
    4082:	move.l 8(sp),-(sp)
    4086:	jsr 41de <setFrames>
    408c:	addq.l #8,sp
}
    408e:	nop
    4090:	rts

00004092 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4092:	       lea -52(sp),sp
    4096:	       move.l a6,-(sp)
    4098:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    409a:	       movea.l 64(sp),a0
    409e:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    40a4:	       move.l 1c534 <speechSpeed>,d0
    40aa:	       move.l 68(sp),-(sp)
    40ae:	       move.l d0,-(sp)
    40b0:	       jsr a46 <putFloat>
    40b6:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    40b8:	       movea.l 64(sp),a0
    40bc:	       move.l 8(a0),d0
    40c0:	       move.l 68(sp),-(sp)
    40c4:	       move.l d0,-(sp)
    40c6:	       jsr 8d0 <put2bytes>
    40cc:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    40ce:	       movea.l 64(sp),a0
    40d2:	       move.l 16(a0),d0
    40d6:	       move.l 68(sp),-(sp)
    40da:	       move.l d0,-(sp)
    40dc:	       jsr 8d0 <put2bytes>
    40e2:	       addq.l #8,sp
		if (sS -> currentTalker) {
    40e4:	       movea.l 64(sp),a0
    40e8:	       move.l (a0),d0
    40ea:	   ,-- beq.s 412e <saveSpeech+0x9c>
			FPutC (fp, 1);
    40ec:	   |   move.l 68(sp),40(sp)
    40f2:	   |   moveq #1,d0
    40f4:	   |   move.l d0,36(sp)
    40f8:	   |   move.l 1cbd2 <DOSBase>,d0
    40fe:	   |   movea.l d0,a6
    4100:	   |   move.l 40(sp),d1
    4104:	   |   move.l 36(sp),d2
    4108:	   |   jsr -312(a6)
    410c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4110:	   |   movea.l 64(sp),a0
    4114:	   |   movea.l (a0),a0
    4116:	   |   movea.l 114(a0),a0
    411a:	   |   move.l 4(a0),d0
    411e:	   |   move.l 68(sp),-(sp)
    4122:	   |   move.l d0,-(sp)
    4124:	   |   jsr 8d0 <put2bytes>
    412a:	   |   addq.l #8,sp
    412c:	,--|-- bra.s 41aa <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    412e:	|  '-> move.l 68(sp),52(sp)
    4134:	|      clr.l 48(sp)
    4138:	|      move.l 1cbd2 <DOSBase>,d0
    413e:	|      movea.l d0,a6
    4140:	|      move.l 52(sp),d1
    4144:	|      move.l 48(sp),d2
    4148:	|      jsr -312(a6)
    414c:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4150:	+----- bra.s 41aa <saveSpeech+0x118>
			FPutC (fp, 1);
    4152:	|  ,-> move.l 68(sp),16(sp)
    4158:	|  |   moveq #1,d0
    415a:	|  |   move.l d0,12(sp)
    415e:	|  |   move.l 1cbd2 <DOSBase>,d0
    4164:	|  |   movea.l d0,a6
    4166:	|  |   move.l 16(sp),d1
    416a:	|  |   move.l 12(sp),d2
    416e:	|  |   jsr -312(a6)
    4172:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4176:	|  |   movea.l 56(sp),a0
    417a:	|  |   move.l (a0),d0
    417c:	|  |   move.l 68(sp),-(sp)
    4180:	|  |   move.l d0,-(sp)
    4182:	|  |   jsr bd8 <writeString>
    4188:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    418a:	|  |   movea.l 56(sp),a0
    418e:	|  |   move.l 8(a0),d0
    4192:	|  |   move.l 68(sp),-(sp)
    4196:	|  |   move.l d0,-(sp)
    4198:	|  |   jsr 8d0 <put2bytes>
    419e:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    41a0:	|  |   movea.l 56(sp),a0
    41a4:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    41aa:	'--|-> tst.l 56(sp)
    41ae:	   '-- bne.s 4152 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    41b0:	       move.l 68(sp),28(sp)
    41b6:	       clr.l 24(sp)
    41ba:	       move.l 1cbd2 <DOSBase>,d0
    41c0:	       movea.l d0,a6
    41c2:	       move.l 28(sp),d1
    41c6:	       move.l 24(sp),d2
    41ca:	       jsr -312(a6)
    41ce:	       move.l d0,20(sp)
}
    41d2:	       nop
    41d4:	       move.l (sp)+,d2
    41d6:	       movea.l (sp)+,a6
    41d8:	       lea 52(sp),sp
    41dc:	       rts

000041de <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    41de:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    41e0:	movea.l 8(sp),a0
    41e4:	movea.l 80(a0),a0
    41e8:	move.l (a0),d2
    41ea:	movea.l 8(sp),a0
    41ee:	movea.l 80(a0),a0
    41f2:	move.l 4(a0),d0
    41f6:	move.l 12(sp),-(sp)
    41fa:	move.l d0,-(sp)
    41fc:	jsr 17d08 <__mulsi3>
    4202:	addq.l #8,sp
    4204:	move.l d0,d1
    4206:	movea.l 8(sp),a0
    420a:	move.l 106(a0),d0
    420e:	add.l d1,d0
    4210:	add.l d0,d0
    4212:	add.l d0,d0
    4214:	movea.l d2,a0
    4216:	adda.l d0,a0
    4218:	move.l (a0),d0
    421a:	movea.l 8(sp),a0
    421e:	move.l d0,72(a0)
}
    4222:	nop
    4224:	move.l (sp)+,d2
    4226:	rts

00004228 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4228:	       lea -20(sp),sp
    422c:	       move.l d2,-(sp)
    422e:	       move.l 40(sp),d0
    4232:	       move.w d0,d0
    4234:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4238:	       movea.l 1cb1a <speech>,a0
    423e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4244:	       move.l 32(sp),-(sp)
    4248:	       jsr a642 <findPerson>
    424e:	       addq.l #4,sp
    4250:	       move.l d0,16(sp)
    if (thisPerson) {
    4254:	   ,-- beq.s 427a <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4256:	   |   movea.w 6(sp),a0
    425a:	   |   move.l a0,-(sp)
    425c:	   |   move.l 40(sp),-(sp)
    4260:	   |   move.l 24(sp),-(sp)
    4264:	   |   move.l 40(sp),-(sp)
    4268:	   |   jsr 4340 <wrapSpeechPerson>
    426e:	   |   lea 16(sp),sp
    4272:	   |   move.l d0,20(sp)
    4276:	,--|-- bra.w 4334 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    427a:	|  '-> move.l 32(sp),-(sp)
    427e:	|      jsr 15b5e <getRegionForObject>
    4284:	|      addq.l #4,sp
    4286:	|      move.l d0,12(sp)
        if (thisRegion) {
    428a:	|  ,-- beq.s 42f6 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    428c:	|  |   movea.l 12(sp),a0
    4290:	|  |   movea.l 28(a0),a0
    4294:	|  |   move.l 28(a0),d0
    4298:	|  |   movea.l 12(sp),a0
    429c:	|  |   movea.l 4(a0),a1
    42a0:	|  |   movea.l 12(sp),a0
    42a4:	|  |   movea.l 28(a0),a0
    42a8:	|  |   move.l 20(a0),d1
    42ac:	|  |   movea.l a1,a0
    42ae:	|  |   suba.l d1,a0
    42b0:	|  |   move.l 1cc84 <cameraY>,d1
    42b6:	|  |   movea.l a0,a1
    42b8:	|  |   suba.l d1,a1
    42ba:	|  |   movea.l 12(sp),a0
    42be:	|  |   move.l (a0),d2
    42c0:	|  |   movea.l 12(sp),a0
    42c4:	|  |   move.l 8(a0),d1
    42c8:	|  |   add.l d2,d1
    42ca:	|  |   move.l d1,d2
    42cc:	|  |   asr.l #1,d2
    42ce:	|  |   move.l 1cc80 <cameraX>,d1
    42d4:	|  |   movea.l d2,a0
    42d6:	|  |   suba.l d1,a0
    42d8:	|  |   move.l 36(sp),-(sp)
    42dc:	|  |   move.l d0,-(sp)
    42de:	|  |   move.l a1,-(sp)
    42e0:	|  |   move.l a0,-(sp)
    42e2:	|  |   move.l 44(sp),-(sp)
    42e6:	|  |   jsr 445e <wrapSpeechXY>
    42ec:	|  |   lea 20(sp),sp
    42f0:	|  |   move.l d0,20(sp)
    42f4:	+--|-- bra.s 4334 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    42f6:	|  '-> move.l 32(sp),-(sp)
    42fa:	|      jsr d5b0 <findObjectType>
    4300:	|      addq.l #4,sp
    4302:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4306:	|      movea.l 8(sp),a0
    430a:	|      move.l 28(a0),d1
    430e:	|      move.l 1cb1e <winWidth>,d0
    4314:	|      lsr.l #1,d0
    4316:	|      move.l 36(sp),-(sp)
    431a:	|      move.l d1,-(sp)
    431c:	|      pea a <_start+0xa>
    4320:	|      move.l d0,-(sp)
    4322:	|      move.l 44(sp),-(sp)
    4326:	|      jsr 445e <wrapSpeechXY>
    432c:	|      lea 20(sp),sp
    4330:	|      move.l d0,20(sp)
        }
    }
    return i;
    4334:	'----> move.l 20(sp),d0
}
    4338:	       move.l (sp)+,d2
    433a:	       lea 20(sp),sp
    433e:	       rts

00004340 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4340:	    subq.l #8,sp
    4342:	    movem.l d2-d4,-(sp)
    4346:	    move.l 36(sp),d0
    434a:	    move.w d0,d0
    434c:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4350:	    movea.l 28(sp),a0
    4354:	    movea.l 114(a0),a0
    4358:	    move.l 28(a0),d2
    435c:	    movea.l 28(sp),a0
    4360:	    move.l 4(a0),d3
    4364:	    move.l 1cc84 <cameraY>,d0
    436a:	    move.l d0,-(sp)
    436c:	    jsr 177ae <__floatsisf>
    4372:	    addq.l #4,sp
    4374:	    move.l d0,-(sp)
    4376:	    move.l d3,-(sp)
    4378:	    jsr 17aa2 <__subsf3>
    437e:	    addq.l #8,sp
    4380:	    move.l d0,d3
    4382:	    movea.l 28(sp),a0
    4386:	    move.l 32(a0),d4
    438a:	    movea.l 28(sp),a0
    438e:	    move.l 20(a0),d1
    4392:	    movea.l 28(sp),a0
    4396:	    move.l 24(a0),d0
    439a:	    sub.l d0,d1
    439c:	    move.l d1,-(sp)
    439e:	    jsr 177ae <__floatsisf>
    43a4:	    addq.l #4,sp
    43a6:	    move.l d0,-(sp)
    43a8:	    move.l d4,-(sp)
    43aa:	    jsr 17860 <__mulsf3>
    43b0:	    addq.l #8,sp
    43b2:	    move.l d0,-(sp)
    43b4:	    move.l d3,-(sp)
    43b6:	    jsr 17aa2 <__subsf3>
    43bc:	    addq.l #8,sp
    43be:	    move.l d0,d3
    43c0:	    movea.l 28(sp),a0
    43c4:	    movea.l 114(a0),a0
    43c8:	    move.l 20(a0),d0
    43cc:	    move.l d0,-(sp)
    43ce:	    jsr 177ae <__floatsisf>
    43d4:	    addq.l #4,sp
    43d6:	    move.l d0,-(sp)
    43d8:	    move.l d3,-(sp)
    43da:	    jsr 17aa2 <__subsf3>
    43e0:	    addq.l #8,sp
    43e2:	    move.l d0,-(sp)
    43e4:	    jsr 17746 <__fixsfsi>
    43ea:	    addq.l #4,sp
    43ec:	    move.l d0,d4
    43ee:	    movea.l 28(sp),a0
    43f2:	    move.l (a0),d3
    43f4:	    move.l 1cc80 <cameraX>,d0
    43fa:	    move.l d0,-(sp)
    43fc:	    jsr 177ae <__floatsisf>
    4402:	    addq.l #4,sp
    4404:	    move.l d0,-(sp)
    4406:	    move.l d3,-(sp)
    4408:	    jsr 17aa2 <__subsf3>
    440e:	    addq.l #8,sp
    4410:	    move.l d0,-(sp)
    4412:	    jsr 17746 <__fixsfsi>
    4418:	    addq.l #4,sp
    441a:	    move.l 32(sp),-(sp)
    441e:	    move.l d2,-(sp)
    4420:	    move.l d4,-(sp)
    4422:	    move.l d0,-(sp)
    4424:	    move.l 40(sp),-(sp)
    4428:	    jsr 445e <wrapSpeechXY>
    442e:	    lea 20(sp),sp
    4432:	    move.l d0,16(sp)
	if (animPerson) {
    4436:	    tst.w 14(sp)
    443a:	,-- beq.s 4452 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    443c:	|   move.l 28(sp),-(sp)
    4440:	|   jsr 407e <makeTalker>
    4446:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4448:	|   movea.l 1cb1a <speech>,a0
    444e:	|   move.l 28(sp),(a0)
	}
	return i;
    4452:	'-> move.l 16(sp),d0
}
    4456:	    movem.l (sp)+,d2-d4
    445a:	    addq.l #8,sp
    445c:	    rts

0000445e <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    445e:	                   lea -16(sp),sp
    4462:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4466:	                   clr.l 16(sp)
    killAllSpeech();
    446a:	                   jsr 3fb0 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4470:	                   move.l 36(sp),-(sp)
    4474:	                   jsr 13d88 <strlen>
    447a:	                   addq.l #4,sp
    447c:	                   movea.l d0,a0
    447e:	                   lea 20(a0),a0
    4482:	                   move.l a0,-(sp)
    4484:	                   jsr 177d6 <__floatunsisf>
    448a:	                   addq.l #4,sp
    448c:	                   move.l d0,d1
    448e:	                   move.l 1c534 <speechSpeed>,d0
    4494:	                   move.l d0,-(sp)
    4496:	                   move.l d1,-(sp)
    4498:	                   jsr 17860 <__mulsf3>
    449e:	                   addq.l #8,sp
    44a0:	                   move.l d0,-(sp)
    44a2:	                   jsr 17746 <__fixsfsi>
    44a8:	                   addq.l #4,sp
    44aa:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    44ae:	               ,-- bgt.s 44b6 <wrapSpeechXY+0x58>
    44b0:	               |   moveq #1,d0
    44b2:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    44b6:	               '-> moveq #-1,d1
    44b8:	                   cmp.l 52(sp),d1
    44bc:	               ,-- beq.s 44fc <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    44be:	               |   move.l 1cc94 <speechMode>,d0
    44c4:	               +-- ble.s 44fc <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    44c6:	               |   clr.l -(sp)
    44c8:	               |   move.l 56(sp),-(sp)
    44cc:	               |   jsr d270 <startSound>
    44d2:	               |   addq.l #8,sp
    44d4:	               |   tst.w d0
    44d6:	               +-- beq.s 44fc <wrapSpeechXY+0x9e>
                speechTime = -10;
    44d8:	               |   moveq #-10,d0
    44da:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    44de:	               |   movea.l 1cb1a <speech>,a0
    44e4:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    44ea:	               |   move.l 1cc94 <speechMode>,d0
    44f0:	               |   moveq #2,d1
    44f2:	               |   cmp.l d0,d1
    44f4:	               +-- bne.s 44fc <wrapSpeechXY+0x9e>
    44f6:	               |   moveq #-10,d0
    44f8:	,--------------|-- bra.w 4782 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    44fc:	|              '-> movea.l 1cb1a <speech>,a0
    4502:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4508:	|     ,----------- bra.w 45bc <wrapSpeechXY+0x15e>
        a = wrap;
    450c:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4512:	|  |  |        ,-- bra.s 4522 <wrapSpeechXY+0xc4>
            a--;
    4514:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4518:	|  |  |  |     +-- bne.s 4522 <wrapSpeechXY+0xc4>
                a = wrap;
    451a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4520:	|  |  |  |  ,--|-- bra.s 4534 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4522:	|  |  |  |  |  '-> move.l 28(sp),d0
    4526:	|  |  |  |  |      movea.l 36(sp),a0
    452a:	|  |  |  |  |      adda.l d0,a0
    452c:	|  |  |  |  |      move.b (a0),d0
    452e:	|  |  |  |  |      cmpi.b #32,d0
    4532:	|  |  |  '--|----- bne.s 4514 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4534:	|  |  |     '----> move.l 28(sp),d0
    4538:	|  |  |            movea.l 36(sp),a0
    453c:	|  |  |            adda.l d0,a0
    453e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4540:	|  |  |            lea 16(sp),a0
    4544:	|  |  |            move.l a0,-(sp)
    4546:	|  |  |            move.l 44(sp),-(sp)
    454a:	|  |  |            move.l 44(sp),-(sp)
    454e:	|  |  |            jsr 3cfa <addSpeechLine>
    4554:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4558:	|  |  |            move.l 28(sp),d0
    455c:	|  |  |            movea.l 36(sp),a0
    4560:	|  |  |            adda.l d0,a0
    4562:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4566:	|  |  |            move.l 28(sp),d0
    456a:	|  |  |            addq.l #1,d0
    456c:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4570:	|  |  |            move.l 44(sp),-(sp)
    4574:	|  |  |            jsr 177ae <__floatsisf>
    457a:	|  |  |            addq.l #4,sp
    457c:	|  |  |            move.l d0,d2
    457e:	|  |  |            move.l 1ccbe <fontHeight>,d0
    4584:	|  |  |            move.l d0,-(sp)
    4586:	|  |  |            jsr 177ae <__floatsisf>
    458c:	|  |  |            addq.l #4,sp
    458e:	|  |  |            move.l d0,d1
    4590:	|  |  |            move.l 1c55c <cameraZoom>,d0
    4596:	|  |  |            move.l d0,-(sp)
    4598:	|  |  |            move.l d1,-(sp)
    459a:	|  |  |            jsr 17664 <__divsf3>
    45a0:	|  |  |            addq.l #8,sp
    45a2:	|  |  |            move.l d0,-(sp)
    45a4:	|  |  |            move.l d2,-(sp)
    45a6:	|  |  |            jsr 17aa2 <__subsf3>
    45ac:	|  |  |            addq.l #8,sp
    45ae:	|  |  |            move.l d0,-(sp)
    45b0:	|  |  |            jsr 17746 <__fixsfsi>
    45b6:	|  |  |            addq.l #4,sp
    45b8:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    45bc:	|  |  '----------> move.l 36(sp),-(sp)
    45c0:	|  |               jsr 13d88 <strlen>
    45c6:	|  |               addq.l #4,sp
    45c8:	|  |               move.l d0,d1
    45ca:	|  |               move.l 48(sp),d0
    45ce:	|  |               cmp.l d1,d0
    45d0:	|  '-------------- bcs.w 450c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    45d4:	|                  lea 16(sp),a0
    45d8:	|                  move.l a0,-(sp)
    45da:	|                  move.l 44(sp),-(sp)
    45de:	|                  move.l 44(sp),-(sp)
    45e2:	|                  jsr 3cfa <addSpeechLine>
    45e8:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    45ec:	|                  move.l 44(sp),-(sp)
    45f0:	|                  jsr 177ae <__floatsisf>
    45f6:	|                  addq.l #4,sp
    45f8:	|                  move.l d0,d2
    45fa:	|                  move.l 1ccbe <fontHeight>,d0
    4600:	|                  move.l d0,-(sp)
    4602:	|                  jsr 177ae <__floatsisf>
    4608:	|                  addq.l #4,sp
    460a:	|                  move.l d0,d1
    460c:	|                  move.l 1c55c <cameraZoom>,d0
    4612:	|                  move.l d0,-(sp)
    4614:	|                  move.l d1,-(sp)
    4616:	|                  jsr 17664 <__divsf3>
    461c:	|                  addq.l #8,sp
    461e:	|                  move.l d0,-(sp)
    4620:	|                  move.l d2,-(sp)
    4622:	|                  jsr 17aa2 <__subsf3>
    4628:	|                  addq.l #8,sp
    462a:	|                  move.l d0,-(sp)
    462c:	|                  jsr 17746 <__fixsfsi>
    4632:	|                  addq.l #4,sp
    4634:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4638:	|              ,-- bpl.s 4656 <wrapSpeechXY+0x1f8>
    463a:	|              |   movea.l 1cb1a <speech>,a0
    4640:	|              |   move.l 8(a0),d0
    4644:	|              |   movea.l 1cb1a <speech>,a0
    464a:	|              |   sub.l 44(sp),d0
    464e:	|              |   move.l d0,8(a0)
    4652:	|           ,--|-- bra.w 4744 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4656:	|           |  '-> movea.l 1cb1a <speech>,a0
    465c:	|           |      move.l 8(a0),d0
    4660:	|           |      move.l d0,-(sp)
    4662:	|           |      jsr 177ae <__floatsisf>
    4668:	|           |      addq.l #4,sp
    466a:	|           |      move.l d0,d2
    466c:	|           |      move.l 1cc84 <cameraY>,d0
    4672:	|           |      move.l d0,-(sp)
    4674:	|           |      jsr 177ae <__floatsisf>
    467a:	|           |      addq.l #4,sp
    467c:	|           |      move.l d0,d3
    467e:	|           |      move.l 1cb22 <winHeight>,d4
    4684:	|           |      move.l 1ccbe <fontHeight>,d0
    468a:	|           |      pea 3 <_start+0x3>
    468e:	|           |      move.l d0,-(sp)
    4690:	|           |      jsr 17d86 <__divsi3>
    4696:	|           |      addq.l #8,sp
    4698:	|           |      move.l d4,d1
    469a:	|           |      sub.l d0,d1
    469c:	|           |      move.l d1,-(sp)
    469e:	|           |      jsr 177d6 <__floatunsisf>
    46a4:	|           |      addq.l #4,sp
    46a6:	|           |      move.l d0,d1
    46a8:	|           |      move.l 1c55c <cameraZoom>,d0
    46ae:	|           |      move.l d0,-(sp)
    46b0:	|           |      move.l d1,-(sp)
    46b2:	|           |      jsr 17664 <__divsf3>
    46b8:	|           |      addq.l #8,sp
    46ba:	|           |      move.l d0,-(sp)
    46bc:	|           |      move.l d3,-(sp)
    46be:	|           |      jsr 1756a <__addsf3>
    46c4:	|           |      addq.l #8,sp
    46c6:	|           |      move.l d0,-(sp)
    46c8:	|           |      move.l d2,-(sp)
    46ca:	|           |      jsr 1791a <__gtsf2>
    46d0:	|           |      addq.l #8,sp
    46d2:	|           |      tst.l d0
    46d4:	|           +----- ble.s 4744 <wrapSpeechXY+0x2e6>
    46d6:	|           |      move.l 1cc84 <cameraY>,d0
    46dc:	|           |      move.l d0,-(sp)
    46de:	|           |      jsr 177ae <__floatsisf>
    46e4:	|           |      addq.l #4,sp
    46e6:	|           |      move.l d0,d2
    46e8:	|           |      move.l 1cb22 <winHeight>,d3
    46ee:	|           |      move.l 1ccbe <fontHeight>,d0
    46f4:	|           |      pea 3 <_start+0x3>
    46f8:	|           |      move.l d0,-(sp)
    46fa:	|           |      jsr 17d86 <__divsi3>
    4700:	|           |      addq.l #8,sp
    4702:	|           |      move.l d3,d1
    4704:	|           |      sub.l d0,d1
    4706:	|           |      move.l d1,-(sp)
    4708:	|           |      jsr 177d6 <__floatunsisf>
    470e:	|           |      addq.l #4,sp
    4710:	|           |      move.l d0,d1
    4712:	|           |      move.l 1c55c <cameraZoom>,d0
    4718:	|           |      move.l d0,-(sp)
    471a:	|           |      move.l d1,-(sp)
    471c:	|           |      jsr 17664 <__divsf3>
    4722:	|           |      addq.l #8,sp
    4724:	|           |      move.l d0,-(sp)
    4726:	|           |      move.l d2,-(sp)
    4728:	|           |      jsr 1756a <__addsf3>
    472e:	|           |      addq.l #8,sp
    4730:	|           |      movea.l 1cb1a <speech>,a2
    4736:	|           |      move.l d0,-(sp)
    4738:	|           |      jsr 17746 <__fixsfsi>
    473e:	|           |      addq.l #4,sp
    4740:	|           |      move.l d0,8(a2)

    if (offset) {
    4744:	|           '----> move.l 16(sp),d0
    4748:	|        ,-------- beq.s 477e <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    474a:	|        |         movea.l 1cb1a <speech>,a0
    4750:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4756:	|        |     ,-- bra.s 4778 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4758:	|        |  ,--|-> movea.l 20(sp),a0
    475c:	|        |  |  |   move.l 8(a0),d1
    4760:	|        |  |  |   move.l 16(sp),d0
    4764:	|        |  |  |   add.l d1,d0
    4766:	|        |  |  |   movea.l 20(sp),a0
    476a:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    476e:	|        |  |  |   movea.l 20(sp),a0
    4772:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4778:	|        |  |  '-> tst.l 20(sp)
    477c:	|        |  '----- bne.s 4758 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    477e:	|        '-------> move.l 24(sp),d0
}
    4782:	'----------------> movem.l (sp)+,d2-d4/a2
    4786:	                   lea 16(sp),sp
    478a:	                   rts

0000478c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    478c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4790:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4794:	       tst.l 24(sp)
    4798:	   ,-- bge.s 479e <drawLine+0x12>
    479a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    479e:	   '-> tst.l 28(sp)
    47a2:	   ,-- bge.s 47a8 <drawLine+0x1c>
    47a4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    47a8:	   '-> tst.l 32(sp)
    47ac:	   ,-- bge.s 47b2 <drawLine+0x26>
    47ae:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    47b2:	   '-> tst.l 36(sp)
    47b6:	   ,-- bge.s 47bc <drawLine+0x30>
    47b8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    47bc:	   '-> move.l 1cc62 <sceneWidth>,d0
    47c2:	       cmp.l 24(sp),d0
    47c6:	   ,-- bge.s 47d6 <drawLine+0x4a>
    47c8:	   |   move.l 1cc62 <sceneWidth>,d0
    47ce:	   |   move.l d0,d1
    47d0:	   |   subq.l #1,d1
    47d2:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    47d6:	   '-> move.l 1cc62 <sceneWidth>,d0
    47dc:	       cmp.l 32(sp),d0
    47e0:	   ,-- bge.s 47f0 <drawLine+0x64>
    47e2:	   |   move.l 1cc62 <sceneWidth>,d0
    47e8:	   |   move.l d0,d1
    47ea:	   |   subq.l #1,d1
    47ec:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    47f0:	   '-> move.l 1cc66 <sceneHeight>,d0
    47f6:	       cmp.l 28(sp),d0
    47fa:	   ,-- bge.s 480a <drawLine+0x7e>
    47fc:	   |   move.l 1cc66 <sceneHeight>,d0
    4802:	   |   move.l d0,d1
    4804:	   |   subq.l #1,d1
    4806:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    480a:	   '-> move.l 1cc66 <sceneHeight>,d0
    4810:	       cmp.l 36(sp),d0
    4814:	   ,-- bge.s 4824 <drawLine+0x98>
    4816:	   |   move.l 1cc66 <sceneHeight>,d0
    481c:	   |   move.l d0,d1
    481e:	   |   subq.l #1,d1
    4820:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4824:	   '-> move.l 24(sp),d0
    4828:	       cmp.l 32(sp),d0
    482c:	,----- ble.s 4848 <drawLine+0xbc>
		x = x2; 
    482e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4834:	|      tst.w 10(sp)
    4838:	|      seq d0
    483a:	|      neg.b d0
    483c:	|      move.b d0,d0
    483e:	|      andi.w #255,d0
    4842:	|      move.w d0,10(sp)
    4846:	|  ,-- bra.s 484e <drawLine+0xc2>
	} else x = x1;
    4848:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    484e:	   '-> move.l 28(sp),d1
    4852:	       cmp.l 36(sp),d1
    4856:	,----- ble.s 4872 <drawLine+0xe6>
		y = y2; 
    4858:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    485e:	|      tst.w 10(sp)
    4862:	|      seq d0
    4864:	|      neg.b d0
    4866:	|      move.b d0,d0
    4868:	|      andi.w #255,d0
    486c:	|      move.w d0,10(sp)
    4870:	|  ,-- bra.s 4878 <drawLine+0xec>
	} else y = y1;	
    4872:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4878:	   '-> move.l 32(sp),d0
    487c:	       sub.l 24(sp),d0
    4880:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4884:	       move.l 6(sp),d0
    4888:	   ,-- bpl.s 488c <drawLine+0x100>
    488a:	   |   neg.l d0
    488c:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4890:	       move.l 36(sp),d1
    4894:	       sub.l 28(sp),d1
    4898:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    489c:	       move.l 2(sp),d0
    48a0:	   ,-- bpl.s 48a4 <drawLine+0x118>
    48a2:	   |   neg.l d0
    48a4:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    48a8:	       tst.l 6(sp)
    48ac:	   ,-- bne.s 48d0 <drawLine+0x144>
		diffX = 1;
    48ae:	   |   moveq #1,d0
    48b0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    48b4:	   |   move.l 1cc62 <sceneWidth>,d0
    48ba:	   |   subq.l #1,d0
    48bc:	   |   cmp.l 16(sp),d0
    48c0:	   +-- bne.s 48d0 <drawLine+0x144>
    48c2:	   |   move.l 1cc62 <sceneWidth>,d0
    48c8:	   |   move.l d0,d1
    48ca:	   |   subq.l #2,d1
    48cc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    48d0:	   '-> tst.l 2(sp)
    48d4:	   ,-- bne.s 48f8 <drawLine+0x16c>
		diffY = 1;
    48d6:	   |   moveq #1,d0
    48d8:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    48dc:	   |   move.l 1cc66 <sceneHeight>,d0
    48e2:	   |   subq.l #1,d0
    48e4:	   |   cmp.l 12(sp),d0
    48e8:	   +-- bne.s 48f8 <drawLine+0x16c>
    48ea:	   |   move.l 1cc66 <sceneHeight>,d0
    48f0:	   |   move.l d0,d1
    48f2:	   |   subq.l #2,d1
    48f4:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    48f8:	   '-> pea 18517 <PutChar+0x6f9>
    48fe:	       jsr 1737c <KPrintF>
    4904:	       addq.l #4,sp
	
}
    4906:	       nop
    4908:	       lea 20(sp),sp
    490c:	       rts

0000490e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    490e:	                      lea -24(sp),sp
    4912:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4914:	                      move.l 1cb26 <firstTexture>,d0
    491a:	,-------------------- beq.w 49f8 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    491e:	|                     clr.l 24(sp)
    4922:	|     ,-------------- bra.w 49ec <deleteTextures+0xde>
			BOOL found = FALSE;
    4926:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    492a:	|  |  |               move.l 1cb26 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4932:	|  |  |               movea.l 20(sp),a0
    4936:	|  |  |               move.l (a0),d1
    4938:	|  |  |               move.l 24(sp),d0
    493c:	|  |  |               add.l d0,d0
    493e:	|  |  |               add.l d0,d0
    4940:	|  |  |               movea.l 36(sp),a0
    4944:	|  |  |               adda.l d0,a0
    4946:	|  |  |               move.l (a0),d0
    4948:	|  |  |               cmp.l d1,d0
    494a:	|  |  |  ,----------- bne.w 49de <deleteTextures+0xd0>
				found = TRUE;
    494e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4954:	|  |  |  |            movea.l 20(sp),a0
    4958:	|  |  |  |            move.l 12(a0),d0
    495c:	|  |  |  |            move.l d0,1cb26 <firstTexture>
				FreeVec(list);
    4962:	|  |  |  |            move.l 20(sp),6(sp)
    4968:	|  |  |  |            move.l 1cbca <SysBase>,d0
    496e:	|  |  |  |            movea.l d0,a6
    4970:	|  |  |  |            movea.l 6(sp),a1
    4974:	|  |  |  |            jsr -690(a6)
				continue;
    4978:	|  |  |  |  ,-------- bra.s 49e8 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    497a:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    497e:	|  |  |  |  |  |      movea.l 12(a0),a0
    4982:	|  |  |  |  |  |      move.l (a0),d1
    4984:	|  |  |  |  |  |      move.l 24(sp),d0
    4988:	|  |  |  |  |  |      add.l d0,d0
    498a:	|  |  |  |  |  |      add.l d0,d0
    498c:	|  |  |  |  |  |      movea.l 36(sp),a0
    4990:	|  |  |  |  |  |      adda.l d0,a0
    4992:	|  |  |  |  |  |      move.l (a0),d0
    4994:	|  |  |  |  |  |      cmp.l d1,d0
    4996:	|  |  |  |  |  |  ,-- bne.s 49d4 <deleteTextures+0xc6>
					found = TRUE;
    4998:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    499e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    49a2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    49a8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    49ac:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    49b0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    49b4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    49b8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    49bc:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    49c2:	|  |  |  |  |  |  |   move.l 1cbca <SysBase>,d0
    49c8:	|  |  |  |  |  |  |   movea.l d0,a6
    49ca:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    49ce:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    49d2:	|  |  |  |  +--|--|-- bra.s 49e8 <deleteTextures+0xda>
				}
				list = list->next;
    49d4:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    49d8:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    49de:	|  |  |  '--|--|----> movea.l 20(sp),a0
    49e2:	|  |  |     |  |      move.l 12(a0),d0
    49e6:	|  |  |     |  '----- bne.s 497a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    49e8:	|  |  |     '-------> addq.l #1,24(sp)
    49ec:	|  |  '-------------> move.l 24(sp),d0
    49f0:	|  |                  cmp.l 32(sp),d0
    49f4:	|  '----------------- bcs.w 4926 <deleteTextures+0x18>
			}
		}
	}
}
    49f8:	'-------------------> nop
    49fa:	                      movea.l (sp)+,a6
    49fc:	                      lea 24(sp),sp
    4a00:	                      rts

00004a02 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4a02:	subq.l #4,sp
    4a04:	move.l 8(sp),d0
    4a08:	move.w d0,d0
    4a0a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4a0e:	pea 1853a <PutChar+0x71c>
    4a14:	jsr 1737c <KPrintF>
    4a1a:	addq.l #4,sp
}
    4a1c:	nop
    4a1e:	addq.l #4,sp
    4a20:	rts

00004a22 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4a22:	       moveq #-1,d0
    4a24:	       cmp.l 4(sp),d0
    4a28:	   ,-- bne.s 4a2e <resourceNameFromNum+0xc>
    4a2a:	   |   moveq #0,d0
    4a2c:	,--|-- bra.s 4a66 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4a2e:	|  '-> move.l 1cba6 <numResourceNames>,d0
    4a34:	|  ,-- bne.s 4a3e <resourceNameFromNum+0x1c>
    4a36:	|  |   move.l #99690,d0
    4a3c:	+--|-- bra.s 4a66 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4a3e:	|  '-> move.l 1cba6 <numResourceNames>,d0
    4a44:	|      cmp.l 4(sp),d0
    4a48:	|  ,-- ble.s 4a60 <resourceNameFromNum+0x3e>
    4a4a:	|  |   move.l 1cb5e <allResourceNames>,d1
    4a50:	|  |   move.l 4(sp),d0
    4a54:	|  |   add.l d0,d0
    4a56:	|  |   add.l d0,d0
    4a58:	|  |   movea.l d1,a0
    4a5a:	|  |   adda.l d0,a0
    4a5c:	|  |   move.l (a0),d0
    4a5e:	+--|-- bra.s 4a66 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4a60:	|  '-> move.l #99699,d0
    4a66:	'----> rts

00004a68 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4a68:	          lea -44(sp),sp
    4a6c:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4a70:	          move.l #320,1cb1e <winWidth>
    winHeight = 256;
    4a7a:	          move.l #256,1cb22 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4a84:	          tst.l 60(sp)
    4a88:	      ,-- bne.s 4aa0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4a8a:	      |   pea 18584 <PutChar+0x766>
    4a90:	      |   jsr b8 <copyString>
    4a96:	      |   addq.l #4,sp
    4a98:	      |   move.l d0,1cb36 <bundleFolder>
    4a9e:	   ,--|-- bra.s 4ab6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4aa0:	   |  '-> movea.l 64(sp),a0
    4aa4:	   |      move.l (a0),d0
    4aa6:	   |      move.l d0,-(sp)
    4aa8:	   |      jsr b8 <copyString>
    4aae:	   |      addq.l #4,sp
    4ab0:	   |      move.l d0,1cb36 <bundleFolder>
	}
    
	int lastSlash = -1;
    4ab6:	   '----> moveq #-1,d0
    4ab8:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4abc:	          clr.l 44(sp)
    4ac0:	   ,----- bra.s 4ae2 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4ac2:	,--|----> move.l 1cb36 <bundleFolder>,d1
    4ac8:	|  |      move.l 44(sp),d0
    4acc:	|  |      movea.l d1,a0
    4ace:	|  |      adda.l d0,a0
    4ad0:	|  |      move.b (a0),d0
    4ad2:	|  |      cmpi.b #47,d0
    4ad6:	|  |  ,-- bne.s 4ade <main_sludge+0x76>
    4ad8:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4ade:	|  |  '-> addq.l #1,44(sp)
    4ae2:	|  '----> move.l 1cb36 <bundleFolder>,d1
    4ae8:	|         move.l 44(sp),d0
    4aec:	|         movea.l d1,a0
    4aee:	|         adda.l d0,a0
    4af0:	|         move.b (a0),d0
    4af2:	'-------- bne.s 4ac2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4af4:	          move.l 1cb36 <bundleFolder>,d0
    4afa:	          move.l 48(sp),d1
    4afe:	          addq.l #1,d1
    4b00:	          movea.l d0,a0
    4b02:	          adda.l d1,a0
    4b04:	          clr.b (a0)

	if (argc > 1) {
    4b06:	          moveq #1,d0
    4b08:	          cmp.l 60(sp),d0
    4b0c:	      ,-- bge.s 4b28 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4b0e:	      |   move.l 60(sp),d0
    4b12:	      |   addi.l #1073741823,d0
    4b18:	      |   add.l d0,d0
    4b1a:	      |   add.l d0,d0
    4b1c:	      |   movea.l 64(sp),a0
    4b20:	      |   adda.l d0,a0
    4b22:	      |   move.l (a0),52(sp)
    4b26:	   ,--|-- bra.s 4b82 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4b28:	   |  '-> move.l 1cb36 <bundleFolder>,d0
    4b2e:	   |      pea 1858a <PutChar+0x76c>
    4b34:	   |      move.l d0,-(sp)
    4b36:	   |      jsr 13dc8 <joinStrings>
    4b3c:	   |      addq.l #8,sp
    4b3e:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4b42:	   |      move.l 52(sp),-(sp)
    4b46:	   |      jsr 13cc2 <fileExists>
    4b4c:	   |      addq.l #4,sp
    4b4e:	   |      tst.b d0
    4b50:	   +----- bne.s 4b82 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4b52:	   |      move.l 52(sp),40(sp)
    4b58:	   |      move.l 1cbca <SysBase>,d0
    4b5e:	   |      movea.l d0,a6
    4b60:	   |      movea.l 40(sp),a1
    4b64:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4b68:	   |      move.l 1cb36 <bundleFolder>,d0
    4b6e:	   |      pea 18597 <PutChar+0x779>
    4b74:	   |      move.l d0,-(sp)
    4b76:	   |      jsr 13dc8 <joinStrings>
    4b7c:	   |      addq.l #8,sp
    4b7e:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4b82:	   '----> pea 185a0 <PutChar+0x782>
    4b88:	          jsr 1737c <KPrintF>
    4b8e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4b90:	          move.l 52(sp),-(sp)
    4b94:	          jsr 13cc2 <fileExists>
    4b9a:	          addq.l #4,sp
    4b9c:	          tst.b d0
    4b9e:	      ,-- bne.s 4bf6 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ba0:	      |   move.l 1cbd2 <DOSBase>,d0
    4ba6:	      |   movea.l d0,a6
    4ba8:	      |   jsr -60(a6)
    4bac:	      |   move.l d0,28(sp)
    4bb0:	      |   move.l 28(sp),d0
    4bb4:	      |   move.l d0,24(sp)
    4bb8:	      |   move.l #99744,20(sp)
    4bc0:	      |   moveq #21,d0
    4bc2:	      |   move.l d0,16(sp)
    4bc6:	      |   move.l 1cbd2 <DOSBase>,d0
    4bcc:	      |   movea.l d0,a6
    4bce:	      |   move.l 24(sp),d1
    4bd2:	      |   move.l 20(sp),d2
    4bd6:	      |   move.l 16(sp),d3
    4bda:	      |   jsr -48(a6)
    4bde:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4be2:	      |   pea 185a0 <PutChar+0x782>
    4be8:	      |   jsr 1737c <KPrintF>
    4bee:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4bf0:	      |   moveq #0,d0
    4bf2:	,-----|-- bra.w 4df4 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4bf6:	|     '-> pea 185b6 <PutChar+0x798>
    4bfc:	|         jsr 1737c <KPrintF>
    4c02:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4c04:	|         move.l 52(sp),-(sp)
    4c08:	|         jsr 4dfe <setGameFilePath>
    4c0e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4c10:	|         move.l 52(sp),-(sp)
    4c14:	|         jsr 6348 <initSludge>
    4c1a:	|         addq.l #4,sp
    4c1c:	|         tst.w d0
    4c1e:	|     ,-- bne.s 4c26 <main_sludge+0x1be>
    4c20:	|     |   moveq #0,d0
    4c22:	+-----|-- bra.w 4df4 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4c26:	|     '-> move.l 1cb1e <winWidth>,d0
    4c2c:	|         cmpi.l #320,d0
    4c32:	|     ,-- bne.s 4c42 <main_sludge+0x1da>
    4c34:	|     |   move.l 1cb22 <winHeight>,d0
    4c3a:	|     |   cmpi.l #256,d0
    4c40:	|  ,--|-- beq.s 4c64 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4c42:	|  |  '-> pea 185c7 <PutChar+0x7a9>
    4c48:	|  |      jsr 1737c <KPrintF>
    4c4e:	|  |      addq.l #4,sp
		winWidth = 320;
    4c50:	|  |      move.l #320,1cb1e <winWidth>
		winHeight = 256;
    4c5a:	|  |      move.l #256,1cb22 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4c64:	|  '----> pea 18644 <PutChar+0x826>
    4c6a:	|         jsr 1737c <KPrintF>
    4c70:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4c72:	|         move.l 1cb22 <winHeight>,d0
    4c78:	|         move.l d0,d1
    4c7a:	|         move.l 1cb1e <winWidth>,d0
    4c80:	|         move.l d1,-(sp)
    4c82:	|         move.l d0,-(sp)
    4c84:	|         jsr d48e <resizeBackdrop>
    4c8a:	|         addq.l #8,sp
    4c8c:	|         tst.w d0
    4c8e:	|     ,-- bne.s 4ca4 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4c90:	|     |   pea 18657 <PutChar+0x839>
    4c96:	|     |   jsr 1737c <KPrintF>
    4c9c:	|     |   addq.l #4,sp
		return FALSE;
    4c9e:	|     |   moveq #0,d0
    4ca0:	+-----|-- bra.w 4df4 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4ca4:	|     '-> pea 1867d <PutChar+0x85f>
    4caa:	|         jsr 1737c <KPrintF>
    4cb0:	|         addq.l #4,sp
	if (! initPeople ())
    4cb2:	|         jsr a9a8 <initPeople>
    4cb8:	|         tst.w d0
    4cba:	|     ,-- bne.s 4cd0 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4cbc:	|     |   pea 1868a <PutChar+0x86c>
    4cc2:	|     |   jsr 1737c <KPrintF>
    4cc8:	|     |   addq.l #4,sp
		return FALSE;
    4cca:	|     |   moveq #0,d0
    4ccc:	+-----|-- bra.w 4df4 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4cd0:	|     '-> pea 186ab <PutChar+0x88d>
    4cd6:	|         jsr 1737c <KPrintF>
    4cdc:	|         addq.l #4,sp
	if (! initFloor ())
    4cde:	|         jsr 16732 <initFloor>
    4ce4:	|         tst.w d0
    4ce6:	|     ,-- bne.s 4cfc <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4ce8:	|     |   pea 186b7 <PutChar+0x899>
    4cee:	|     |   jsr 1737c <KPrintF>
    4cf4:	|     |   addq.l #4,sp
		
		return FALSE;
    4cf6:	|     |   moveq #0,d0
    4cf8:	+-----|-- bra.w 4df4 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4cfc:	|     '-> pea 186d7 <PutChar+0x8b9>
    4d02:	|         jsr 1737c <KPrintF>
    4d08:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4d0a:	|         jsr d64a <initObjectTypes>
    4d10:	|         tst.w d0
    4d12:	|     ,-- bne.s 4d28 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4d14:	|     |   pea 186e8 <PutChar+0x8ca>
    4d1a:	|     |   jsr 1737c <KPrintF>
    4d20:	|     |   addq.l #4,sp
		return FALSE;
    4d22:	|     |   moveq #0,d0
    4d24:	+-----|-- bra.w 4df4 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4d28:	|     '-> pea 1870e <PutChar+0x8f0>
    4d2e:	|         jsr 1737c <KPrintF>
    4d34:	|         addq.l #4,sp
	initSpeech ();
    4d36:	|         jsr 3f18 <initSpeech>
	KPrintF("Init status bar\n");
    4d3c:	|         pea 1871b <PutChar+0x8fd>
    4d42:	|         jsr 1737c <KPrintF>
    4d48:	|         addq.l #4,sp
	initStatusBar ();
    4d4a:	|         jsr 83a8 <initStatusBar>

	KPrintF("Get numbered string\n");
    4d50:	|         pea 1872c <PutChar+0x90e>
    4d56:	|         jsr 1737c <KPrintF>
    4d5c:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4d5e:	|         pea 1 <_start+0x1>
    4d62:	|         jsr 76b2 <getNumberedString>
    4d68:	|         addq.l #4,sp
    4d6a:	|         move.l d0,1cb2e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4d70:	|         pea 18741 <PutChar+0x923>
    4d76:	|         jsr 1737c <KPrintF>
    4d7c:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4d7e:	|         move.l 1cb9a <noStack>,d0
    4d84:	|         pea 1 <_start+0x1>
    4d88:	|         move.l d0,-(sp)
    4d8a:	|         clr.l -(sp)
    4d8c:	|         clr.l -(sp)
    4d8e:	|         clr.l -(sp)
    4d90:	|         jsr 750a <startNewFunctionNum>
    4d96:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4d9a:	|         pea 18759 <PutChar+0x93b>
    4da0:	|         jsr 1737c <KPrintF>
    4da6:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4da8:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4db0:	|         clr.l 1cb3a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4db6:	|     ,-- bra.s 4dd6 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4db8:	|  ,--|-> jsr 738a <sludgeDisplay>
		CsiCheckInput();
    4dbe:	|  |  |   jsr cfac <CsiCheckInput>
		walkAllPeople();
    4dc4:	|  |  |   jsr bf66 <walkAllPeople>
		handleInput();
    4dca:	|  |  |   jsr 60e2 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4dd0:	|  |  |   jsr 172b0 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4dd6:	|  |  '-> move.l 1cb3a <weAreDoneSoQuit>,d0
    4ddc:	|  '----- beq.s 4db8 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4dde:	|         move.l 52(sp),32(sp)
    4de4:	|         move.l 1cbca <SysBase>,d0
    4dea:	|         movea.l d0,a6
    4dec:	|         movea.l 32(sp),a1
    4df0:	|         jsr -690(a6)
}
    4df4:	'-------> movem.l (sp)+,d2-d3/a6
    4df8:	          lea 44(sp),sp
    4dfc:	          rts

00004dfe <setGameFilePath>:

void setGameFilePath (char * f) {
    4dfe:	          lea -1104(sp),sp
    4e02:	          move.l a6,-(sp)
    4e04:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4e06:	          move.l #1112,d0
    4e0c:	          add.l sp,d0
    4e0e:	          addi.l #-1102,d0
    4e14:	          move.l d0,1100(sp)
    4e18:	          move.l #998,1096(sp)
    4e20:	          move.l 1cbd2 <DOSBase>,d0
    4e26:	          movea.l d0,a6
    4e28:	          move.l 1100(sp),d1
    4e2c:	          move.l 1096(sp),d2
    4e30:	          jsr -564(a6)
    4e34:	          move.w d0,1094(sp)
    4e38:	          move.w 1094(sp),d0
    4e3c:	      ,-- bne.s 4e4c <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4e3e:	      |   pea 1876c <PutChar+0x94e>
    4e44:	      |   jsr 1737c <KPrintF>
    4e4a:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4e4c:	      '-> moveq #-1,d0
    4e4e:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4e52:	          clr.l 1104(sp)
    4e56:	   ,----- bra.s 4e74 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4e58:	,--|----> move.l 1104(sp),d0
    4e5c:	|  |      movea.l 1116(sp),a0
    4e60:	|  |      adda.l d0,a0
    4e62:	|  |      move.b (a0),d0
    4e64:	|  |      cmpi.b #47,d0
    4e68:	|  |  ,-- bne.s 4e70 <setGameFilePath+0x72>
    4e6a:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4e70:	|  |  '-> addq.l #1,1104(sp)
    4e74:	|  '----> move.l 1104(sp),d0
    4e78:	|         movea.l 1116(sp),a0
    4e7c:	|         adda.l d0,a0
    4e7e:	|         move.b (a0),d0
    4e80:	'-------- bne.s 4e58 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4e82:	          moveq #-1,d0
    4e84:	          cmp.l 1108(sp),d0
    4e88:	   ,----- beq.s 4f02 <setGameFilePath+0x104>
		f[got] = 0;	
    4e8a:	   |      move.l 1108(sp),d0
    4e8e:	   |      movea.l 1116(sp),a0
    4e92:	   |      adda.l d0,a0
    4e94:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4e96:	   |      move.l 1116(sp),1090(sp)
    4e9c:	   |      moveq #-2,d0
    4e9e:	   |      move.l d0,1086(sp)
    4ea2:	   |      move.l 1cbd2 <DOSBase>,d0
    4ea8:	   |      movea.l d0,a6
    4eaa:	   |      move.l 1090(sp),d1
    4eae:	   |      move.l 1086(sp),d2
    4eb2:	   |      jsr -84(a6)
    4eb6:	   |      move.l d0,1082(sp)
    4eba:	   |      move.l 1082(sp),d0
    4ebe:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4ec2:	   |      move.l 1078(sp),1074(sp)
    4ec8:	   |      move.l 1cbd2 <DOSBase>,d0
    4ece:	   |      movea.l d0,a6
    4ed0:	   |      move.l 1074(sp),d1
    4ed4:	   |      jsr -126(a6)
    4ed8:	   |      move.l d0,1070(sp)
    4edc:	   |      move.l 1070(sp),d0
    4ee0:	   |  ,-- bne.s 4ef4 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4ee2:	   |  |   move.l 1116(sp),-(sp)
    4ee6:	   |  |   pea 18792 <PutChar+0x974>
    4eec:	   |  |   jsr 1737c <KPrintF>
    4ef2:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4ef4:	   |  '-> move.l 1108(sp),d0
    4ef8:	   |      movea.l 1116(sp),a0
    4efc:	   |      adda.l d0,a0
    4efe:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4f02:	   '----> move.l #400,1066(sp)
    4f0a:	          clr.l 1062(sp)
    4f0e:	          move.l 1cbca <SysBase>,d0
    4f14:	          movea.l d0,a6
    4f16:	          move.l 1066(sp),d0
    4f1a:	          move.l 1062(sp),d1
    4f1e:	          jsr -684(a6)
    4f22:	          move.l d0,1058(sp)
    4f26:	          move.l 1058(sp),d0
    4f2a:	          move.l d0,1cb32 <gamePath>
	if (gamePath==0) {
    4f30:	          move.l 1cb32 <gamePath>,d0
    4f36:	      ,-- bne.s 4f4a <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4f38:	      |   pea 187c5 <PutChar+0x9a7>
    4f3e:	      |   jsr 1737c <KPrintF>
    4f44:	      |   addq.l #4,sp
    4f46:	   ,--|-- bra.w 5032 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4f4a:	   |  '-> move.l 1cb32 <gamePath>,1054(sp)
    4f52:	   |      moveq #-2,d0
    4f54:	   |      move.l d0,1050(sp)
    4f58:	   |      move.l 1cbd2 <DOSBase>,d0
    4f5e:	   |      movea.l d0,a6
    4f60:	   |      move.l 1054(sp),d1
    4f64:	   |      move.l 1050(sp),d2
    4f68:	   |      jsr -84(a6)
    4f6c:	   |      move.l d0,1046(sp)
    4f70:	   |      move.l 1046(sp),d0
    4f74:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4f78:	   |      move.l 1042(sp),1038(sp)
    4f7e:	   |      move.l 1cbd2 <DOSBase>,d0
    4f84:	   |      movea.l d0,a6
    4f86:	   |      move.l 1038(sp),d1
    4f8a:	   |      jsr -126(a6)
    4f8e:	   |      move.l d0,1034(sp)
    4f92:	   |      move.l 1034(sp),d0
    4f96:	   |  ,-- bne.s 4fa6 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4f98:	   |  |   pea 18800 <PutChar+0x9e2>
    4f9e:	   |  |   jsr 1737c <KPrintF>
    4fa4:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4fa6:	   |  '-> move.l #1112,d0
    4fac:	   |      add.l sp,d0
    4fae:	   |      addi.l #-1102,d0
    4fb4:	   |      move.l d0,1030(sp)
    4fb8:	   |      moveq #-2,d0
    4fba:	   |      move.l d0,1026(sp)
    4fbe:	   |      move.l 1cbd2 <DOSBase>,d0
    4fc4:	   |      movea.l d0,a6
    4fc6:	   |      move.l 1030(sp),d1
    4fca:	   |      move.l 1026(sp),d2
    4fce:	   |      jsr -84(a6)
    4fd2:	   |      move.l d0,1022(sp)
    4fd6:	   |      move.l 1022(sp),d0
    4fda:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4fde:	   |      move.l 1042(sp),1018(sp)
    4fe4:	   |      move.l 1cbd2 <DOSBase>,d0
    4fea:	   |      movea.l d0,a6
    4fec:	   |      move.l 1018(sp),d1
    4ff0:	   |      jsr -126(a6)
    4ff4:	   |      move.l d0,1014(sp)
    4ff8:	   |      move.l 1014(sp),d0
    4ffc:	   |  ,-- bne.s 5012 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4ffe:	   |  |   moveq #10,d0
    5000:	   |  |   add.l sp,d0
    5002:	   |  |   move.l d0,-(sp)
    5004:	   |  |   pea 1882c <PutChar+0xa0e>
    500a:	   |  |   jsr 1737c <KPrintF>
    5010:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    5012:	   |  '-> move.l 1cb32 <gamePath>,d0
    5018:	   +----- beq.s 5032 <setGameFilePath+0x234>
    501a:	   |      move.l 1cb32 <gamePath>,1010(sp)
    5022:	   |      move.l 1cbca <SysBase>,d0
    5028:	   |      movea.l d0,a6
    502a:	   |      movea.l 1010(sp),a1
    502e:	   |      jsr -690(a6)
}
    5032:	   '----> move.l (sp)+,d2
    5034:	          movea.l (sp)+,a6
    5036:	          lea 1104(sp),sp
    503a:	          rts

0000503c <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    503c:	,-------> lea -16(sp),sp
    5040:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    5042:	|         move.l 24(sp),d0
    5046:	|         move.l d0,-(sp)
    5048:	|         pea 18934 <PutChar+0xb16>
    504e:	|         jsr 1737c <KPrintF>
    5054:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    5056:	|         move.l 24(sp),-(sp)
    505a:	|         jsr 7106 <pauseFunction>
    5060:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    5062:	|     ,-- bra.s 5074 <abortFunction+0x38>
    5064:	|  ,--|-> moveq #24,d0
    5066:	|  |  |   add.l 24(sp),d0
    506a:	|  |  |   move.l d0,-(sp)
    506c:	|  |  |   jsr 15220 <trimStack>
    5072:	|  |  |   addq.l #4,sp
    5074:	|  |  '-> movea.l 24(sp),a0
    5078:	|  |      move.l 24(a0),d0
    507c:	|  '----- bne.s 5064 <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    507e:	|         movea.l 24(sp),a0
    5082:	|         move.l 4(a0),12(sp)
    5088:	|         move.l 1cbca <SysBase>,d0
    508e:	|         movea.l d0,a6
    5090:	|         movea.l 12(sp),a1
    5094:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5098:	|         clr.l 16(sp)
    509c:	|     ,-- bra.s 50bc <abortFunction+0x80>
    509e:	|  ,--|-> movea.l 24(sp),a0
    50a2:	|  |  |   move.l 20(a0),d1
    50a6:	|  |  |   move.l 16(sp),d0
    50aa:	|  |  |   lsl.l #3,d0
    50ac:	|  |  |   add.l d1,d0
    50ae:	|  |  |   move.l d0,-(sp)
    50b0:	|  |  |   jsr 14aea <unlinkVar>
    50b6:	|  |  |   addq.l #4,sp
    50b8:	|  |  |   addq.l #1,16(sp)
    50bc:	|  |  '-> movea.l 24(sp),a0
    50c0:	|  |      move.l 8(a0),d0
    50c4:	|  |      cmp.l 16(sp),d0
    50c8:	|  '----- bgt.s 509e <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    50ca:	|         movea.l 24(sp),a0
    50ce:	|         move.l 8(a0),d0
    50d2:	|     ,-- ble.s 50ee <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    50d4:	|     |   movea.l 24(sp),a0
    50d8:	|     |   move.l 20(a0),8(sp)
    50de:	|     |   move.l 1cbca <SysBase>,d0
    50e4:	|     |   movea.l d0,a6
    50e6:	|     |   movea.l 8(sp),a1
    50ea:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    50ee:	|     '-> moveq #28,d0
    50f0:	|         add.l 24(sp),d0
    50f4:	|         move.l d0,-(sp)
    50f6:	|         jsr 14aea <unlinkVar>
    50fc:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    50fe:	|         movea.l 24(sp),a0
    5102:	|         move.l 40(a0),d0
    5106:	|     ,-- beq.s 5118 <abortFunction+0xdc>
    5108:	|     |   movea.l 24(sp),a0
    510c:	|     |   move.l 40(a0),d0
    5110:	|     |   move.l d0,-(sp)
    5112:	'-----|-- jsr 503c <abortFunction>(pc)
    5116:	      |   addq.l #4,sp
	FreeVec(fun);
    5118:	      '-> move.l 24(sp),4(sp)
    511e:	          move.l 1cbca <SysBase>,d0
    5124:	          movea.l d0,a6
    5126:	          movea.l 4(sp),a1
    512a:	          jsr -690(a6)
	fun = NULL;
    512e:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    5132:	          pea 1894e <PutChar+0xb30>
    5138:	          jsr 1737c <KPrintF>
    513e:	          addq.l #4,sp
}
    5140:	          nop
    5142:	          movea.l (sp)+,a6
    5144:	          lea 16(sp),sp
    5148:	          rts

0000514a <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    514a:	          subq.l #8,sp
	int n = 0;
    514c:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5150:	          movea.l 20(sp),a0
    5154:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5156:	          move.l 1cb62 <allRunningFunctions>,(sp)
	while (fun) {
    515c:	   ,----- bra.s 518a <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    515e:	,--|----> movea.l (sp),a0
    5160:	|  |      move.l (a0),d0
    5162:	|  |      cmp.l 12(sp),d0
    5166:	|  |  ,-- bne.s 5184 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5168:	|  |  |   movea.l (sp),a0
    516a:	|  |  |   move.w #1,54(a0)
			n++;
    5170:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5174:	|  |  |   move.l (sp),d0
    5176:	|  |  |   cmp.l 16(sp),d0
    517a:	|  |  +-- bne.s 5184 <cancelAFunction+0x3a>
    517c:	|  |  |   movea.l 20(sp),a0
    5180:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5184:	|  |  '-> movea.l (sp),a0
    5186:	|  |      move.l 44(a0),(sp)
	while (fun) {
    518a:	|  '----> tst.l (sp)
    518c:	'-------- bne.s 515e <cancelAFunction+0x14>
	}
	return n;
    518e:	          move.l 4(sp),d0
}
    5192:	          addq.l #8,sp
    5194:	          rts

00005196 <completeTimers>:


void completeTimers () {
    5196:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5198:	          move.l 1cb62 <allRunningFunctions>,(sp)

	while (thisFunction) {
    519e:	   ,----- bra.s 51b4 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    51a0:	,--|----> movea.l (sp),a0
    51a2:	|  |      move.b 56(a0),d0
    51a6:	|  |  ,-- bne.s 51ae <completeTimers+0x18>
    51a8:	|  |  |   movea.l (sp),a0
    51aa:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    51ae:	|  |  '-> movea.l (sp),a0
    51b0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    51b4:	|  '----> tst.l (sp)
    51b6:	'-------- bne.s 51a0 <completeTimers+0xa>
	}
}
    51b8:	          nop
    51ba:	          nop
    51bc:	          addq.l #4,sp
    51be:	          rts

000051c0 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    51c0:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    51c4:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    51ca:	                                                             movea.l 80(sp),a0
    51ce:	                                                             move.w 54(a0),d0
    51d2:	,----------------------------------------------------------- beq.w 6060 <continueFunction+0xea0>
		abortFunction (fun);
    51d6:	|                                                            move.l 80(sp),-(sp)
    51da:	|                                                            jsr 503c <abortFunction>
    51e0:	|                                                            addq.l #4,sp
		return TRUE;
    51e2:	|                                                            moveq #1,d0
    51e4:	|  ,-------------------------------------------------------- bra.w 606a <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    51e8:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    51ee:	|  |  |                                                      movea.l 80(sp),a0
    51f2:	|  |  |                                                      move.l 4(a0),d1
    51f6:	|  |  |                                                      movea.l 80(sp),a0
    51fa:	|  |  |                                                      move.l 36(a0),d0
    51fe:	|  |  |                                                      lsl.l #3,d0
    5200:	|  |  |                                                      movea.l d1,a0
    5202:	|  |  |                                                      adda.l d0,a0
    5204:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    520a:	|  |  |                                                      movea.l 80(sp),a0
    520e:	|  |  |                                                      move.l 4(a0),d1
    5212:	|  |  |                                                      movea.l 80(sp),a0
    5216:	|  |  |                                                      move.l 36(a0),d0
    521a:	|  |  |                                                      lsl.l #3,d0
    521c:	|  |  |                                                      movea.l d1,a0
    521e:	|  |  |                                                      adda.l d0,a0
    5220:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5224:	|  |  |                                                      moveq #41,d0
    5226:	|  |  |                                                      cmp.l 64(sp),d0
    522a:	|  |  |  ,-------------------------------------------------- bcs.w 6014 <continueFunction+0xe54>
    522e:	|  |  |  |                                                   move.l 64(sp),d0
    5232:	|  |  |  |                                                   add.l d0,d0
    5234:	|  |  |  |                                                   movea.l d0,a0
    5236:	|  |  |  |                                                   adda.l #21058,a0
    523c:	|  |  |  |                                                   move.w (a0),d0
    523e:	|  |  |  |                                                   jmp (5242 <continueFunction+0x82>,pc,d0.w)
    5242:	|  |  |  |                                                   bset d6,(a2)
    5244:	|  |  |  |                                                   ori.w #2670,(a4)
    5248:	|  |  |  |                                                   eori.w #2416,d6
    524c:	|  |  |  |                                                   bchg d4,d2
    524e:	|  |  |  |                                                   bclr d4,(a4)+
    5250:	|  |  |  |                                                   andi.l #181013194,d4
    5256:	|  |  |  |                                                   .short 0x0aca
    5258:	|  |  |  |                                                   .short 0x0aca
    525a:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    5262:	|  |  |  |                                                   .short 0x0aca
    5264:	|  |  |  |                                                   andi.w #906,-(a4)
    5268:	|  |  |  |                                                   bchg d1,196(a2)
    526c:	|  |  |  |                                                   bset d1,580(a4)
    5270:	|  |  |  |                                                   bclr d1,2576(a2)
    5274:	|  |  |  |                                                   andi.b #-56,2762(a2)
    527a:	|  |  |  |                                                   .short 0x0aca
    527c:	|  |  |  |                                                   eori.l #63572682,d0
    5282:	|  |  |  |                                                   .short 0x0aca
    5284:	|  |  |  |                                                   bchg d3,-(a2)
    5286:	|  |  |  |                                                   bchg #-36,(a2)
    528a:	|  |  |  |                                                   .short 0x08cc
    528c:	|  |  |  |                                                   addi.b #14,1038(a0)
    5292:	|  |  |  |                                                   .short 0x040e
    5294:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5298:	|  |  |  |                                                   ori.w #8232,(a0)
    529c:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    52a2:	|  |  |  |                                                   ori.w #12136,(a0)
    52a6:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    52ac:	|  |  |  |                                                   ori.w #12328,(a0)
    52b0:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    52b6:	|  |  |  |                                                   add.l 44(sp),d1
    52ba:	|  |  |  |                                                   moveq #28,d0
    52bc:	|  |  |  |                                                   add.l 80(sp),d0
    52c0:	|  |  |  |                                                   move.l d1,-(sp)
    52c2:	|  |  |  |                                                   move.l d0,-(sp)
    52c4:	|  |  |  |                                                   jsr 14d56 <copyVariable>
    52ca:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    52cc:	|  |  |  |                                                   move.l 80(sp),-(sp)
    52d0:	|  |  |  |                                                   jsr 6070 <finishFunction>
    52d6:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    52d8:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    52de:	|  |  |  |                                                   move.l 80(sp),-(sp)
    52e2:	|  |  |  |                                                   jsr 71ae <restartFunction>
    52e8:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    52ea:	|  |  |  |  ,----------------------------------------------- bra.w 6048 <continueFunction+0xe88>
				finishFunction (fun);
    52ee:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    52f2:	|  |  |  |  |                                                jsr 6070 <finishFunction>
    52f8:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    52fa:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    52fe:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    5302:	|  |  |  |  +----------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5306:	|  |  |  |  |                                                movea.l 80(sp),a0
    530a:	|  |  |  |  |                                                move.l 28(a0),d0
    530e:	|  |  |  |  |                                                moveq #2,d1
    5310:	|  |  |  |  |                                                cmp.l d0,d1
    5312:	|  |  |  |  |                                            ,-- beq.s 531e <continueFunction+0x15e>
    5314:	|  |  |  |  |                                            |   moveq #4,d1
    5316:	|  |  |  |  |                                            |   cmp.l d0,d1
    5318:	|  |  |  |  |                                         ,--|-- beq.s 536c <continueFunction+0x1ac>
    531a:	|  |  |  |  |                                ,--------|--|-- bra.w 5454 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    531e:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    5322:	|  |  |  |  |                                |        |      jsr 7106 <pauseFunction>
    5328:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    532a:	|  |  |  |  |                                |        |      moveq #24,d0
    532c:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5330:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    5334:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5338:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    533c:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    533e:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    5342:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    5346:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5348:	|  |  |  |  |                                |        |      jsr 750a <startNewFunctionNum>
    534e:	|  |  |  |  |                                |        |      lea 20(sp),sp
    5352:	|  |  |  |  |                                |        |      tst.l d0
    5354:	|  |  |  |  |                                |        |  ,-- bne.s 535c <continueFunction+0x19c>
    5356:	|  |  |  |  |                                |        |  |   clr.w d0
    5358:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 606a <continueFunction+0xeaa>
				fun = allRunningFunctions;
    535c:	|  |  |  |  |                                |        |  '-> move.l 1cb62 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5364:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5368:	|  |  |  |  |                                |  ,-----|----- bra.w 5468 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    536c:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    5370:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    5374:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5378:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    537c:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    537e:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    5380:	|  |  |  |  |                                |  |            jsr 1357e <callBuiltIn>
    5386:	|  |  |  |  |                                |  |            lea 12(sp),sp
    538a:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    538e:	|  |  |  |  |                                |  |            moveq #5,d0
    5390:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    5394:	|  |  |  |  |                                |  |  ,-------- bcs.w 5450 <continueFunction+0x290>
    5398:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    539c:	|  |  |  |  |                                |  |  |         add.l d0,d0
    539e:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    53a0:	|  |  |  |  |                                |  |  |         adda.l #21420,a0
    53a6:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    53a8:	|  |  |  |  |                                |  |  |         jmp (53ac <continueFunction+0x1ec>,pc,d0.w)
    53ac:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    53b2:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    53b6:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    53bc:	|  |  |  |  |                                |  |  |         or.w d4,-(a6)
    53be:	|  |  |  |  |                                |  |  |         jsr 1737c <KPrintF>
    53c4:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    53c6:	|  |  |  |  |                                |  |  |         clr.w d0
    53c8:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 606a <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    53cc:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    53d0:	|  |  |  |  |                                |  |  |         jsr 7106 <pauseFunction>
    53d6:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    53d8:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    53dc:	|  |  |  |  |                                |  |  |  ,----- bra.s 5452 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    53de:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    53e2:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    53e6:	|  |  |  |  |                                |  |  |  +----- bra.s 5452 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    53e8:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    53ec:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    53f2:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    53f4:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    53f8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    53fc:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5400:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5402:	|  |  |  |  |                                |  |  |  |      jsr 1518e <setVariable>
    5408:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    540c:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5410:	|  |  |  |  |                                |  |  |  |      jsr 7106 <pauseFunction>
    5416:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5418:	|  |  |  |  |                                |  |  |  |      move.l 1cb9a <noStack>,d1
    541e:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    5422:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5424:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5426:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    542a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    542c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    542e:	|  |  |  |  |                                |  |  |  |      jsr 750a <startNewFunctionNum>
    5434:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5438:	|  |  |  |  |                                |  |  |  |      tst.l d0
    543a:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 5442 <continueFunction+0x282>
    543c:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    543e:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 606a <continueFunction+0xeaa>
							fun = allRunningFunctions;
    5442:	|  |  |  |  |                                |  |  |  |  '-> move.l 1cb62 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    544a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    544e:	|  |  |  |  |                                |  |  |  +----- bra.s 5452 <continueFunction+0x292>

						default:
						break;
    5450:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    5452:	|  |  |  |  |                                |  +-----'----X bra.s 5468 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    5454:	|  |  |  |  |                                '--|----------> pea 189b1 <PutChar+0xb93>
    545a:	|  |  |  |  |                                   |            jsr 1737c <KPrintF>
    5460:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    5462:	|  |  |  |  |                                   |            clr.w d0
    5464:	|  +--|--|--|-----------------------------------|----------- bra.w 606a <continueFunction+0xeaa>
			}
			break;
    5468:	|  |  |  |  +-----------------------------------'----------X bra.w 6048 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    546c:	|  |  |  |  |                                                moveq #28,d0
    546e:	|  |  |  |  |                                                add.l 80(sp),d0
    5472:	|  |  |  |  |                                                clr.l -(sp)
    5474:	|  |  |  |  |                                                clr.l -(sp)
    5476:	|  |  |  |  |                                                move.l d0,-(sp)
    5478:	|  |  |  |  |                                                jsr 1518e <setVariable>
    547e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5482:	|  |  |  |  +----------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5486:	|  |  |  |  |                                                move.l 68(sp),d1
    548a:	|  |  |  |  |                                                moveq #28,d0
    548c:	|  |  |  |  |                                                add.l 80(sp),d0
    5490:	|  |  |  |  |                                                move.l d1,-(sp)
    5492:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5496:	|  |  |  |  |                                                move.l d0,-(sp)
    5498:	|  |  |  |  |                                                jsr 1518e <setVariable>
    549e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    54a2:	|  |  |  |  +----------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    54a6:	|  |  |  |  |                                                move.l 68(sp),d1
    54aa:	|  |  |  |  |                                                moveq #28,d0
    54ac:	|  |  |  |  |                                                add.l 80(sp),d0
    54b0:	|  |  |  |  |                                                move.l d1,-(sp)
    54b2:	|  |  |  |  |                                                pea 1 <_start+0x1>
    54b6:	|  |  |  |  |                                                move.l d0,-(sp)
    54b8:	|  |  |  |  |                                                jsr 1518e <setVariable>
    54be:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    54c2:	|  |  |  |  +----------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    54c6:	|  |  |  |  |                                                moveq #28,d0
    54c8:	|  |  |  |  |                                                add.l 80(sp),d0
    54cc:	|  |  |  |  |                                                movea.l 80(sp),a0
    54d0:	|  |  |  |  |                                                movea.l 20(a0),a0
    54d4:	|  |  |  |  |                                                move.l 68(sp),d1
    54d8:	|  |  |  |  |                                                lsl.l #3,d1
    54da:	|  |  |  |  |                                                add.l a0,d1
    54dc:	|  |  |  |  |                                                move.l d0,-(sp)
    54de:	|  |  |  |  |                                                move.l d1,-(sp)
    54e0:	|  |  |  |  |                                                jsr 14d56 <copyVariable>
    54e6:	|  |  |  |  |                                                addq.l #8,sp
    54e8:	|  |  |  |  |                                                tst.w d0
    54ea:	|  |  |  |  |  ,-------------------------------------------- bne.w 6026 <continueFunction+0xe66>
    54ee:	|  |  |  |  |  |                                             clr.w d0
    54f0:	|  +--|--|--|--|-------------------------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    54f4:	|  |  |  |  |  |                                             moveq #28,d0
    54f6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54fa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54fc:	|  |  |  |  |  |                                             jsr 14ddc <getBoolean>
    5502:	|  |  |  |  |  |                                             addq.l #4,sp
    5504:	|  |  |  |  |  |                                             tst.w d0
    5506:	|  |  |  |  |  |                                      ,----- beq.s 5522 <continueFunction+0x362>
    5508:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    550c:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5510:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5512:	|  |  |  |  |  |                                      |      jsr 14ddc <getBoolean>
    5518:	|  |  |  |  |  |                                      |      addq.l #4,sp
    551a:	|  |  |  |  |  |                                      |      tst.w d0
    551c:	|  |  |  |  |  |                                      +----- beq.s 5522 <continueFunction+0x362>
    551e:	|  |  |  |  |  |                                      |      moveq #1,d0
    5520:	|  |  |  |  |  |                                      |  ,-- bra.s 5524 <continueFunction+0x364>
    5522:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5524:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5526:	|  |  |  |  |  |                                             add.l 80(sp),d1
    552a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    552c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5530:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5532:	|  |  |  |  |  |                                             jsr 1518e <setVariable>
    5538:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    553c:	|  |  |  |  |  |                                             moveq #24,d0
    553e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5542:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5544:	|  |  |  |  |  |                                             jsr 15220 <trimStack>
    554a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    554c:	|  |  |  |  +--|-------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5550:	|  |  |  |  |  |                                             moveq #28,d0
    5552:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5556:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5558:	|  |  |  |  |  |                                             jsr 14ddc <getBoolean>
    555e:	|  |  |  |  |  |                                             addq.l #4,sp
    5560:	|  |  |  |  |  |                                             tst.w d0
    5562:	|  |  |  |  |  |                                         ,-- bne.s 557a <continueFunction+0x3ba>
    5564:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5568:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    556c:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    556e:	|  |  |  |  |  |                                         |   jsr 14ddc <getBoolean>
    5574:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5576:	|  |  |  |  |  |                                         |   tst.w d0
    5578:	|  |  |  |  |  |                                      ,--|-- beq.s 557e <continueFunction+0x3be>
    557a:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    557c:	|  |  |  |  |  |                                      |  ,-- bra.s 5580 <continueFunction+0x3c0>
    557e:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5580:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5582:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5586:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5588:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    558c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    558e:	|  |  |  |  |  |                                             jsr 1518e <setVariable>
    5594:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5598:	|  |  |  |  |  |                                             moveq #24,d0
    559a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    559e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    55a0:	|  |  |  |  |  |                                             jsr 15220 <trimStack>
    55a6:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    55a8:	|  |  |  |  +--|-------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    55ac:	|  |  |  |  |  |                                             move.l 68(sp),d1
    55b0:	|  |  |  |  |  |                                             moveq #28,d0
    55b2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    55b6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    55b8:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    55bc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    55be:	|  |  |  |  |  |                                             jsr 1518e <setVariable>
    55c4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    55c8:	|  |  |  |  +--|-------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    55cc:	|  |  |  |  |  |                                             move.l 68(sp),d1
    55d0:	|  |  |  |  |  |                                             moveq #28,d0
    55d2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    55d6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    55d8:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    55dc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    55de:	|  |  |  |  |  |                                             jsr 1518e <setVariable>
    55e4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    55e8:	|  |  |  |  +--|-------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    55ec:	|  |  |  |  |  |                                             move.l 68(sp),d1
    55f0:	|  |  |  |  |  |                                             moveq #28,d0
    55f2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    55f6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    55f8:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    55fc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    55fe:	|  |  |  |  |  |                                             jsr 1518e <setVariable>
    5604:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5608:	|  |  |  |  +--|-------------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    560c:	|  |  |  |  |  |                                             move.l 1cb2a <dialogValue>,d0
    5612:	|  |  |  |  |  |                                             moveq #1,d1
    5614:	|  |  |  |  |  |                                             cmp.l d0,d1
    5616:	|  |  |  |  |  |  ,----------------------------------------- beq.w 602a <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    561a:	|  |  |  |  |  |  |                                          pea 189c6 <PutChar+0xba8>
    5620:	|  |  |  |  |  |  |                                          jsr 1737c <KPrintF>
    5626:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5628:	|  |  |  |  |  |  |                                          clr.w d0
    562a:	|  +--|--|--|--|--|----------------------------------------- bra.w 606a <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    562e:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    5632:	|  |  |  |  |  |  |                                          moveq #28,d0
    5634:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5638:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    563a:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    563c:	|  |  |  |  |  |  |                                          jsr 14920 <loadStringToVar>
    5642:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5644:	|  |  |  |  |  |  |                                          tst.w d0
    5646:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 602e <continueFunction+0xe6e>
					return FALSE;
    564a:	|  |  |  |  |  |  |  |                                       clr.w d0
    564c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5650:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5654:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5658:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    565a:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    565c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    565e:	|  |  |  |  |  |  |  |                                ,----- beq.s 56bc <continueFunction+0x4fc>
    5660:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5662:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5664:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5850 <continueFunction+0x690>
    5668:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    566a:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5676 <continueFunction+0x4b6>
    566c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    566e:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5670:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 56bc <continueFunction+0x4fc>
    5672:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5850 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5676:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5678:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    567c:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 56a8 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    567e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5680:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5684:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5686:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5688:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    568a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1518e <setVariable>
    5690:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5694:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5696:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    569a:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    569c:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15220 <trimStack>
    56a2:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    56a4:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5866 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    56a8:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18a07 <PutChar+0xbe9>
    56ae:	|  |  |  |  |  |  |  |              |  |              |      jsr 1737c <KPrintF>
    56b4:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    56b6:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    56b8:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 606a <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    56bc:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    56c0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    56c4:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    56c8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    56ca:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56e0 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    56cc:	|  |  |  |  |  |  |  |              |  |                 |   pea 18a43 <PutChar+0xc25>
    56d2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1737c <KPrintF>
    56d8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    56da:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    56dc:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 606a <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    56e0:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    56e2:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    56e6:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    56e8:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    56ec:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    56f0:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    56f2:	|  |  |  |  |  |  |  |              |  |                     jsr 1489c <getValueType>
    56f8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    56fc:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    56fe:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5706 <continueFunction+0x546>
    5700:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5702:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 606a <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5706:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    570a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    570e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5710:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5712:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5714:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5736 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5716:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    571a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    571c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5720:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5724:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5728:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    572a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    572c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14526 <fastArrayGetByIndex>
    5732:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5734:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5756 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5736:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    573a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    573c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5740:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5744:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5748:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    574a:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    574c:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    574e:	|  |  |  |  |  |  |  |              |  |              |      jsr 151b0 <stackGetByIndex>
    5754:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5756:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    575a:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    575c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5760:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5762:	|  |  |  |  |  |  |  |              |  |                     jsr 15220 <trimStack>
    5768:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    576a:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    576e:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 578a <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5770:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5772:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5776:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5778:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    577a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    577c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1518e <setVariable>
    5782:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5786:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5864 <continueFunction+0x6a4>
						switch (com) {
    578a:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    578c:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5790:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 579e <continueFunction+0x5de>
    5792:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5794:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5798:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 57e8 <continueFunction+0x628>
    579a:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5830 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    579e:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    57a2:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    57a6:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    57aa:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    57ac:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1489c <getValueType>
    57b2:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    57b6:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    57b8:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 57c0 <continueFunction+0x600>
    57ba:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    57bc:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 584a <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    57c0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    57c2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    57c4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    57c8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    57ca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    57ce:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    57d0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1518e <setVariable>
    57d6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    57da:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    57dc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    57de:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    57e2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    57e6:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 584e <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    57e8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    57ec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    57f0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    57f4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    57f6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1489c <getValueType>
    57fc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5800:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5802:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5808 <continueFunction+0x648>
    5804:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5806:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 584a <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5808:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    580a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    580c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5810:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5812:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5816:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5818:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1518e <setVariable>
    581e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5822:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5824:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5826:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    582a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    582e:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 584e <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5830:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5832:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5836:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5838:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    583c:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14d56 <copyVariable>
    5842:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5844:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5846:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5864 <continueFunction+0x6a4>
    5848:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    584a:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 606a <continueFunction+0xeaa>
				break;
    584e:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5864 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5850:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18a61 <PutChar+0xc43>
    5856:	|  |  |  |  |  |  |  |                 |  |                  jsr 1737c <KPrintF>
    585c:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    585e:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5860:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 606a <continueFunction+0xeaa>
				break;
    5864:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5866:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6048 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    586a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    586e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5872:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5874:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5876:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5878:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5886 <continueFunction+0x6c6>
    587a:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    587c:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    587e:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5932 <continueFunction+0x772>
    5882:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5990 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5886:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    588a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    588e:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5892:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5894:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 58aa <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5896:	|  |  |  |  |  |  |  |                             |  |  |   pea 18a43 <PutChar+0xc25>
    589c:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1737c <KPrintF>
    58a2:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    58a4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    58a6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 606a <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    58aa:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    58ac:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    58b0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    58b2:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    58b6:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    58ba:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    58bc:	|  |  |  |  |  |  |  |                             |  |      jsr 1489c <getValueType>
    58c2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    58c6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    58c8:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 58d0 <continueFunction+0x710>
    58ca:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    58cc:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 606a <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    58d0:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    58d4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    58d8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    58dc:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    58de:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    58e2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    58e4:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    58e8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    58ec:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    58f0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    58f2:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    58f4:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    58f6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    58f8:	|  |  |  |  |  |  |  |                             |  |      jsr 73b6 <stackSetByIndex>
    58fe:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5902:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5904:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 590c <continueFunction+0x74c>
						return FALSE;
    5906:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5908:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 606a <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    590c:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    590e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5912:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5914:	|  |  |  |  |  |  |  |                             |  |      jsr 15220 <trimStack>
    591a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    591c:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    591e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5922:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5924:	|  |  |  |  |  |  |  |                             |  |      jsr 15220 <trimStack>
    592a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    592c:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    592e:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6048 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5932:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5934:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5938:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    593a:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    593e:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5942:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5944:	|  |  |  |  |  |  |  |                             |         jsr 1489c <getValueType>
    594a:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    594e:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5950:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5958 <continueFunction+0x798>
    5952:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5954:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 606a <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5958:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    595c:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    595e:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5962:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5966:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    596a:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    596c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    596e:	|  |  |  |  |  |  |  |                             |         jsr 14526 <fastArrayGetByIndex>
    5974:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5976:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    597a:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 598a <continueFunction+0x7ca>
    597c:	|  |  |  |  |  |  |  |                             |     |   pea 18a85 <PutChar+0xc67>
    5982:	|  |  |  |  |  |  |  |                             |     |   jsr 1737c <KPrintF>
    5988:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    598a:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    598c:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 606a <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5990:	|  |  |  |  |  |  |  |                             '-------> pea 18a61 <PutChar+0xc43>
    5996:	|  |  |  |  |  |  |  |                                       jsr 1737c <KPrintF>
    599c:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    599e:	|  |  |  |  |  |  |  |                                       clr.w d0
    59a0:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 606a <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    59a4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    59a8:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    59ac:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59b0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59b2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    59b4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59b6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59ba:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    59be:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    59c0:	|  |  |  |  |  |  |  |                                       jsr 1489c <getValueType>
    59c6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    59ca:	|  |  |  |  |  |  |  |                                       tst.w d0
    59cc:	|  |  |  |  |  |  |  |                                   ,-- bne.s 59d4 <continueFunction+0x814>
    59ce:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    59d0:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 606a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    59d4:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    59d8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    59da:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    59de:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59e0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59e4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59e6:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    59ec:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    59f0:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    59f4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    59f6:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    59f8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    59fc:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5a00:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a04:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a06:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a08:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a0a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a0e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a10:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5a16:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a1a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5a1e:	|  |  |  |  |  |  |  |                                       move.l 1cb78 <globalVars>,d1
    5a24:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a28:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a2a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a2c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a2e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a32:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5a36:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a38:	|  |  |  |  |  |  |  |                                       jsr 1489c <getValueType>
    5a3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5a42:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a44:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a4c <continueFunction+0x88c>
    5a46:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a48:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 606a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a4c:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5a50:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a52:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a56:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a58:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a5c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a5e:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5a64:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5a68:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5a6c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a6e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5a70:	|  |  |  |  |  |  |  |                                       movea.l 1cb78 <globalVars>,a0
    5a76:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a7a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a7c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a7e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a84:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a86:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5a8c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a90:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5a94:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a98:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5a9c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5aa0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5aa2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5aa4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5aa6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5aaa:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5aae:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5ab0:	|  |  |  |  |  |  |  |                                       jsr 1489c <getValueType>
    5ab6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5aba:	|  |  |  |  |  |  |  |                                       tst.w d0
    5abc:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5ac4 <continueFunction+0x904>
    5abe:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5ac0:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 606a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5ac4:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5ac8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5aca:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ace:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ad0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ad4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ad6:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5adc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5ae0:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5ae4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5ae6:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5ae8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5aec:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5af0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5af4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5af6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5af8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5afa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5afe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b00:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5b06:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5b0a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5b0e:	|  |  |  |  |  |  |  |                                       move.l 1cb78 <globalVars>,d1
    5b14:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b18:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b1a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5b1c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b1e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b22:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5b26:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5b28:	|  |  |  |  |  |  |  |                                       jsr 1489c <getValueType>
    5b2e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5b32:	|  |  |  |  |  |  |  |                                       tst.w d0
    5b34:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5b3c <continueFunction+0x97c>
    5b36:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5b38:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 606a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5b3c:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5b40:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5b42:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5b46:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b48:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b4c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b4e:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5b54:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5b58:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5b5c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5b5e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5b60:	|  |  |  |  |  |  |  |                                       movea.l 1cb78 <globalVars>,a0
    5b66:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b6a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b6c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5b6e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b70:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b74:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b76:	|  |  |  |  |  |  |  |                                       jsr 1518e <setVariable>
    5b7c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5b80:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5b84:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b88:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5b8c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b90:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b92:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5b94:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5b96:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5b9a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b9c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b9e:	|  |  |  |  |  |  |  |                                       jsr 14d56 <copyVariable>
    5ba4:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5ba6:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ba8:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 6032 <continueFunction+0xe72>
    5bac:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5bae:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5bb2:	|  |  |  |  |  |  |  |  |                                    move.l 1cb78 <globalVars>,d1
    5bb8:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5bbc:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5bbe:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5bc0:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5bc2:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5bc6:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5bc8:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5bca:	|  |  |  |  |  |  |  |  |                                    jsr 14d56 <copyVariable>
    5bd0:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5bd2:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5bd4:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6036 <continueFunction+0xe76>
    5bd8:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5bda:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5bde:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5be0:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5be4:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cb78 <globalVars>,a0
    5bea:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5bee:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5bf0:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5bf2:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5bf4:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5bf6:	|  |  |  |  |  |  |  |  |  |                                 jsr 14d56 <copyVariable>
    5bfc:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5bfe:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5c00:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 603a <continueFunction+0xe7a>
    5c04:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5c06:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5c0a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5c0c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5c10:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5c12:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5c16:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5c18:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5c1a:	|  |  |  |  |  |  |  |  |  |  |                              jsr 140d8 <addVarToStack>
    5c20:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5c22:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5c24:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 603e <continueFunction+0xe7e>
    5c28:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5c2a:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5c2e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5c30:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5c34:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5c36:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5c3a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5c3e:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1415e <addVarToStackQuick>
    5c44:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5c46:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 6042 <continueFunction+0xe82>
    5c4c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5c4e:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 606a <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5c52:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5c54:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5c58:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14ddc <getBoolean>
    5c60:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5c62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5c64:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5c66:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5c68:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5c72:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5c74:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5c78:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1518e <setVariable>
    5c80:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5c84:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5c88:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5c90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14ddc <getBoolean>
    5c96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5c98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6046 <continueFunction+0xe86>
				advanceNow = FALSE;
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6046 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5cb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5cbe:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6048 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5cce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1489c <getValueType>
    5cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5ce0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5ce8 <continueFunction+0xb28>
    5ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5ce4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 606a <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1518e <setVariable>
    5d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5d08:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6048 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5ffe <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5d9a <continueFunction+0xbda>
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5de4 <continueFunction+0xc24>
    5d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5d3e <continueFunction+0xb7e>
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5d6c <continueFunction+0xbac>
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5de4 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5d44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 141d2 <addVariablesInSecond>
    5d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15220 <trimStack>
    5d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 6012 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5d6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14290 <compareVariablesInSecond>
    5d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15220 <trimStack>
    5d94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 6012 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5d9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14290 <compareVariablesInSecond>
    5db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15220 <trimStack>
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 6012 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1489c <getValueType>
    5dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5e0c <continueFunction+0xc4c>
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5e08:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 606a <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1489c <getValueType>
    5e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5e32 <continueFunction+0xc72>
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5e2e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 606a <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15220 <trimStack>
    5e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 6010 <continueFunction+0xe50>
    5e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24160,a0
    5e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5e60 <continueFunction+0xca0>,pc,d0.w)
    5e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d08 <__mulsi3>
    5ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6012 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6012 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17db4 <__modsi3>
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6012 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d86 <__divsi3>
    5f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6012 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6012 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6012 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6012 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1518e <setVariable>
    5ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6012 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18aa6 <PutChar+0xc88>
    6004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1737c <KPrintF>
    600a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    600c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    600e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 606a <continueFunction+0xeaa>
						break;
    6010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    6012:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6048 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    6014:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18abe <PutChar+0xca0>
    601a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1737c <KPrintF>
    6020:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    6022:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    6024:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 606a <continueFunction+0xeaa>
			break;
    6026:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6028:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    602a:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    602c:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    602e:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    6030:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    6032:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    6034:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    6036:	|  |  |     |              '--|--|--|--|-------------------> nop
    6038:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    603a:	|  |  |     |                 '--|--|--|-------------------> nop
    603c:	|  |  |     +--------------------|--|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    603e:	|  |  |     |                    '--|--|-------------------> nop
    6040:	|  |  |     +-----------------------|--|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    6042:	|  |  |     |                       '--|-------------------> nop
    6044:	|  |  |     +--------------------------|-------------------- bra.s 6048 <continueFunction+0xe88>
			break;
    6046:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6048:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    604c:	+--|--|----------------------------------------------------- beq.s 6060 <continueFunction+0xea0>
    604e:	|  |  |                                                      movea.l 80(sp),a0
    6052:	|  |  |                                                      move.l 36(a0),d0
    6056:	|  |  |                                                      addq.l #1,d0
    6058:	|  |  |                                                      movea.l 80(sp),a0
    605c:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    6060:	'--|--|----------------------------------------------------> tst.w 74(sp)
    6064:	   |  '----------------------------------------------------- bne.w 51e8 <continueFunction+0x28>

	}
	return TRUE;
    6068:	   |                                                         moveq #1,d0
}
    606a:	   '-------------------------------------------------------> lea 76(sp),sp
    606e:	                                                             rts

00006070 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    6070:	    move.l 4(sp),d0
    6074:	    move.l d0,-(sp)
    6076:	    pea 18aea <PutChar+0xccc>
    607c:	    jsr 1737c <KPrintF>
    6082:	    addq.l #8,sp

	pauseFunction (fun);
    6084:	    move.l 4(sp),-(sp)
    6088:	    jsr 7106 <pauseFunction>
    608e:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    6090:	    movea.l 1c53a <currentEvents>,a0
    6096:	    move.l 20(a0),d0
    609a:	    cmp.l 4(sp),d0
    609e:	,-- beq.s 60ac <finishFunction+0x3c>
		unloadFunction (fun);
    60a0:	|   move.l 4(sp),-(sp)
    60a4:	|   jsr 75b6 <unloadFunction>
    60aa:	|   addq.l #4,sp
	}	
}
    60ac:	'-> nop
    60ae:	    rts

000060b0 <freezeSubs>:

void freezeSubs () {
    60b0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    60b2:	          move.l 1cb62 <allRunningFunctions>,(sp)

	while (thisFunction) {
    60b8:	   ,----- bra.s 60d6 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    60ba:	,--|----> movea.l (sp),a0
    60bc:	|  |      move.w 52(a0),d0
    60c0:	|  |  ,-- bne.s 60d0 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    60c2:	|  |  |   movea.l (sp),a0
    60c4:	|  |  |   move.b 56(a0),d0
    60c8:	|  |  |   addq.b #1,d0
    60ca:	|  |  |   movea.l (sp),a0
    60cc:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    60d0:	|  |  '-> movea.l (sp),a0
    60d2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    60d6:	|  '----> tst.l (sp)
    60d8:	'-------- bne.s 60ba <freezeSubs+0xa>
	}
}
    60da:	          nop
    60dc:	          nop
    60de:	          addq.l #4,sp
    60e0:	          rts

000060e2 <handleInput>:

BOOL handleInput () {
    60e2:	             lea -16(sp),sp
    60e6:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    60e8:	             move.l 1ccda <overRegion>,d0
    60ee:	         ,-- bne.s 60f6 <handleInput+0x14>
    60f0:	         |   jsr 15ad8 <getOverRegion>

	if (input.justMoved) {
    60f6:	         '-> move.w 1cb80 <input+0x4>,d0
    60fc:	         ,-- beq.s 613a <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    60fe:	         |   movea.l 1c53a <currentEvents>,a0
    6104:	         |   move.l 16(a0),d0
    6108:	         +-- beq.s 613a <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    610a:	         |   move.l 1cb9a <noStack>,d1
    6110:	         |   movea.l 1c53a <currentEvents>,a0
    6116:	         |   move.l 16(a0),d0
    611a:	         |   pea 1 <_start+0x1>
    611e:	         |   move.l d1,-(sp)
    6120:	         |   clr.l -(sp)
    6122:	         |   clr.l -(sp)
    6124:	         |   move.l d0,-(sp)
    6126:	         |   jsr 750a <startNewFunctionNum>
    612c:	         |   lea 20(sp),sp
    6130:	         |   tst.l d0
    6132:	         +-- bne.s 613a <handleInput+0x58>
    6134:	         |   clr.w d0
    6136:	,--------|-- bra.w 6340 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    613a:	|        '-> clr.w 1cb80 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6140:	|            move.l 1cb92 <lastRegion>,d1
    6146:	|            move.l 1ccda <overRegion>,d0
    614c:	|            cmp.l d1,d0
    614e:	|  ,-------- beq.w 6226 <handleInput+0x144>
    6152:	|  |         movea.l 1c53a <currentEvents>,a0
    6158:	|  |         move.l 20(a0),d0
    615c:	|  +-------- beq.w 6226 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6160:	|  |         moveq #12,d0
    6162:	|  |         move.l d0,16(sp)
    6166:	|  |         clr.l 12(sp)
    616a:	|  |         move.l 1cbca <SysBase>,d0
    6170:	|  |         movea.l d0,a6
    6172:	|  |         move.l 16(sp),d0
    6176:	|  |         move.l 12(sp),d1
    617a:	|  |         jsr -684(a6)
    617e:	|  |         move.l d0,8(sp)
    6182:	|  |         move.l 8(sp),d0
    6186:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    618a:	|  |         move.l 4(sp),d0
    618e:	|  |     ,-- bne.s 61a4 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    6190:	|  |     |   pea 18b05 <PutChar+0xce7>
    6196:	|  |     |   jsr 1737c <KPrintF>
    619c:	|  |     |   addq.l #4,sp
			return FALSE;
    619e:	|  |     |   clr.w d0
    61a0:	+--|-----|-- bra.w 6340 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    61a4:	|  |     '-> movea.l 4(sp),a0
    61a8:	|  |         clr.l (a0)
		if (overRegion) {
    61aa:	|  |         move.l 1ccda <overRegion>,d0
    61b0:	|  |  ,----- beq.s 61d8 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    61b2:	|  |  |      movea.l 1ccda <overRegion>,a0
    61b8:	|  |  |      movea.l 28(a0),a0
    61bc:	|  |  |      move.l 4(a0),d1
    61c0:	|  |  |      move.l 4(sp),d0
    61c4:	|  |  |      move.l d1,-(sp)
    61c6:	|  |  |      pea 7 <_start+0x7>
    61ca:	|  |  |      move.l d0,-(sp)
    61cc:	|  |  |      jsr 1518e <setVariable>
    61d2:	|  |  |      lea 12(sp),sp
    61d6:	|  |  |  ,-- bra.s 61ee <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    61d8:	|  |  '--|-> move.l 4(sp),d0
    61dc:	|  |     |   clr.l -(sp)
    61de:	|  |     |   pea 1 <_start+0x1>
    61e2:	|  |     |   move.l d0,-(sp)
    61e4:	|  |     |   jsr 1518e <setVariable>
    61ea:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    61ee:	|  |     '-> movea.l 4(sp),a0
    61f2:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    61f6:	|  |         movea.l 1c53a <currentEvents>,a0
    61fc:	|  |         move.l 20(a0),d0
    6200:	|  |         pea 1 <_start+0x1>
    6204:	|  |         lea 8(sp),a0
    6208:	|  |         move.l a0,-(sp)
    620a:	|  |         clr.l -(sp)
    620c:	|  |         pea 1 <_start+0x1>
    6210:	|  |         move.l d0,-(sp)
    6212:	|  |         jsr 73fa <startNewFunctionLoaded>
    6218:	|  |         lea 20(sp),sp
    621c:	|  |         tst.l d0
    621e:	|  +-------- bne.s 6226 <handleInput+0x144>
    6220:	|  |         clr.w d0
    6222:	+--|-------- bra.w 6340 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6226:	|  '-------> move.w 1cb82 <input+0x6>,d0
    622c:	|        ,-- beq.s 626a <handleInput+0x188>
    622e:	|        |   movea.l 1c53a <currentEvents>,a0
    6234:	|        |   move.l 4(a0),d0
    6238:	|        +-- beq.s 626a <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    623a:	|        |   move.l 1cb9a <noStack>,d1
    6240:	|        |   movea.l 1c53a <currentEvents>,a0
    6246:	|        |   move.l 4(a0),d0
    624a:	|        |   pea 1 <_start+0x1>
    624e:	|        |   move.l d1,-(sp)
    6250:	|        |   clr.l -(sp)
    6252:	|        |   clr.l -(sp)
    6254:	|        |   move.l d0,-(sp)
    6256:	|        |   jsr 750a <startNewFunctionNum>
    625c:	|        |   lea 20(sp),sp
    6260:	|        |   tst.l d0
    6262:	|        +-- bne.s 626a <handleInput+0x188>
    6264:	|        |   clr.w d0
    6266:	+--------|-- bra.w 6340 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    626a:	|        '-> move.w 1cb84 <input+0x8>,d0
    6270:	|        ,-- beq.s 62ae <handleInput+0x1cc>
    6272:	|        |   movea.l 1c53a <currentEvents>,a0
    6278:	|        |   move.l 12(a0),d0
    627c:	|        +-- beq.s 62ae <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    627e:	|        |   move.l 1cb9a <noStack>,d1
    6284:	|        |   movea.l 1c53a <currentEvents>,a0
    628a:	|        |   move.l 12(a0),d0
    628e:	|        |   pea 1 <_start+0x1>
    6292:	|        |   move.l d1,-(sp)
    6294:	|        |   clr.l -(sp)
    6296:	|        |   clr.l -(sp)
    6298:	|        |   move.l d0,-(sp)
    629a:	|        |   jsr 750a <startNewFunctionNum>
    62a0:	|        |   lea 20(sp),sp
    62a4:	|        |   tst.l d0
    62a6:	|        +-- bne.s 62ae <handleInput+0x1cc>
    62a8:	|        |   clr.w d0
    62aa:	+--------|-- bra.w 6340 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    62ae:	|        '-> move.w 1cb7c <input>,d0
    62b4:	|        ,-- beq.s 62ec <handleInput+0x20a>
    62b6:	|        |   movea.l 1c53a <currentEvents>,a0
    62bc:	|        |   move.l (a0),d0
    62be:	|        +-- beq.s 62ec <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    62c0:	|        |   move.l 1cb9a <noStack>,d1
    62c6:	|        |   movea.l 1c53a <currentEvents>,a0
    62cc:	|        |   move.l (a0),d0
    62ce:	|        |   pea 1 <_start+0x1>
    62d2:	|        |   move.l d1,-(sp)
    62d4:	|        |   clr.l -(sp)
    62d6:	|        |   clr.l -(sp)
    62d8:	|        |   move.l d0,-(sp)
    62da:	|        |   jsr 750a <startNewFunctionNum>
    62e0:	|        |   lea 20(sp),sp
    62e4:	|        |   tst.l d0
    62e6:	|        +-- bne.s 62ec <handleInput+0x20a>
    62e8:	|        |   clr.w d0
    62ea:	+--------|-- bra.s 6340 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    62ec:	|        '-> move.w 1cb7e <input+0x2>,d0
    62f2:	|        ,-- beq.s 632e <handleInput+0x24c>
    62f4:	|        |   movea.l 1c53a <currentEvents>,a0
    62fa:	|        |   move.l 8(a0),d0
    62fe:	|        +-- beq.s 632e <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6300:	|        |   move.l 1cb9a <noStack>,d1
    6306:	|        |   movea.l 1c53a <currentEvents>,a0
    630c:	|        |   move.l 8(a0),d0
    6310:	|        |   pea 1 <_start+0x1>
    6314:	|        |   move.l d1,-(sp)
    6316:	|        |   clr.l -(sp)
    6318:	|        |   clr.l -(sp)
    631a:	|        |   move.l d0,-(sp)
    631c:	|        |   jsr 750a <startNewFunctionNum>
    6322:	|        |   lea 20(sp),sp
    6326:	|        |   tst.l d0
    6328:	|        +-- bne.s 632e <handleInput+0x24c>
    632a:	|        |   clr.w d0
    632c:	+--------|-- bra.s 6340 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    632e:	|        '-> move.l 1ccda <overRegion>,d0
    6334:	|            move.l d0,1cb92 <lastRegion>
	return runSludge ();
    633a:	|            jsr 71c8 <runSludge>
}
    6340:	'----------> movea.l (sp)+,a6
    6342:	             lea 16(sp),sp
    6346:	             rts

00006348 <initSludge>:

BOOL initSludge (char * filename) {
    6348:	             lea -292(sp),sp
    634c:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6350:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    6354:	             jsr ad86 <makeNullAnim>
    635a:	             move.l d0,1cac4 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6360:	             pea 1cb74 <gameVersion>
    6366:	             pea 18b3b <PutChar+0xd1d>
    636c:	             pea 45 <_start+0x45>
    6370:	             pea 47 <_start+0x47>
    6374:	             move.l 332(sp),-(sp)
    6378:	             jsr 6d96 <openAndVerify>
    637e:	             lea 20(sp),sp
    6382:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6386:	         ,-- bne.s 638e <initSludge+0x46>
    6388:	         |   clr.w d0
    638a:	,--------|-- bra.w 6ab6 <initSludge+0x76e>
	if (FGetC (fp)) {
    638e:	|        '-> move.l 288(sp),284(sp)
    6394:	|            move.l 1cbd2 <DOSBase>,d0
    639a:	|            movea.l d0,a6
    639c:	|            move.l 284(sp),d1
    63a0:	|            jsr -306(a6)
    63a4:	|            move.l d0,280(sp)
    63a8:	|            move.l 280(sp),d0
    63ac:	|  ,-------- beq.w 6556 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    63b0:	|  |         move.l 288(sp),-(sp)
    63b4:	|  |         jsr 6bc <get2bytes>
    63ba:	|  |         addq.l #4,sp
    63bc:	|  |         move.l d0,1cb9e <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    63c2:	|  |         move.l 1cb9e <numBIFNames>,d0
    63c8:	|  |         move.l d0,276(sp)
    63cc:	|  |         clr.l 272(sp)
    63d0:	|  |         move.l 1cbca <SysBase>,d0
    63d6:	|  |         movea.l d0,a6
    63d8:	|  |         move.l 276(sp),d0
    63dc:	|  |         move.l 272(sp),d1
    63e0:	|  |         jsr -684(a6)
    63e4:	|  |         move.l d0,268(sp)
    63e8:	|  |         move.l 268(sp),d0
    63ec:	|  |         move.l d0,1cb5a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    63f2:	|  |         move.l 1cb5a <allBIFNames>,d0
    63f8:	|  |     ,-- bne.s 6400 <initSludge+0xb8>
    63fa:	|  |     |   clr.w d0
    63fc:	+--|-----|-- bra.w 6ab6 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6400:	|  |     '-> clr.l 304(sp)
    6404:	|  |     ,-- bra.s 642a <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6406:	|  |  ,--|-> move.l 1cb5a <allBIFNames>,d1
    640c:	|  |  |  |   move.l 304(sp),d0
    6410:	|  |  |  |   add.l d0,d0
    6412:	|  |  |  |   add.l d0,d0
    6414:	|  |  |  |   movea.l d1,a2
    6416:	|  |  |  |   adda.l d0,a2
    6418:	|  |  |  |   move.l 288(sp),-(sp)
    641c:	|  |  |  |   jsr b02 <readString>
    6422:	|  |  |  |   addq.l #4,sp
    6424:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6426:	|  |  |  |   addq.l #1,304(sp)
    642a:	|  |  |  '-> move.l 1cb9e <numBIFNames>,d0
    6430:	|  |  |      cmp.l 304(sp),d0
    6434:	|  |  '----- bgt.s 6406 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    6436:	|  |         move.l 288(sp),-(sp)
    643a:	|  |         jsr 6bc <get2bytes>
    6440:	|  |         addq.l #4,sp
    6442:	|  |         move.l d0,1cbaa <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6448:	|  |         move.l 1cbaa <numUserFunc>,d0
    644e:	|  |         move.l d0,264(sp)
    6452:	|  |         clr.l 260(sp)
    6456:	|  |         move.l 1cbca <SysBase>,d0
    645c:	|  |         movea.l d0,a6
    645e:	|  |         move.l 264(sp),d0
    6462:	|  |         move.l 260(sp),d1
    6466:	|  |         jsr -684(a6)
    646a:	|  |         move.l d0,256(sp)
    646e:	|  |         move.l 256(sp),d0
    6472:	|  |         move.l d0,1cb66 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6478:	|  |         move.l 1cb66 <allUserFunc>,d0
    647e:	|  |     ,-- bne.s 6486 <initSludge+0x13e>
    6480:	|  |     |   clr.w d0
    6482:	+--|-----|-- bra.w 6ab6 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6486:	|  |     '-> clr.l 300(sp)
    648a:	|  |     ,-- bra.s 64b0 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    648c:	|  |  ,--|-> move.l 1cb66 <allUserFunc>,d1
    6492:	|  |  |  |   move.l 300(sp),d0
    6496:	|  |  |  |   add.l d0,d0
    6498:	|  |  |  |   add.l d0,d0
    649a:	|  |  |  |   movea.l d1,a2
    649c:	|  |  |  |   adda.l d0,a2
    649e:	|  |  |  |   move.l 288(sp),-(sp)
    64a2:	|  |  |  |   jsr b02 <readString>
    64a8:	|  |  |  |   addq.l #4,sp
    64aa:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    64ac:	|  |  |  |   addq.l #1,300(sp)
    64b0:	|  |  |  '-> move.l 1cbaa <numUserFunc>,d0
    64b6:	|  |  |      cmp.l 300(sp),d0
    64ba:	|  |  '----- bgt.s 648c <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    64bc:	|  |         move.l 1cb74 <gameVersion>,d0
    64c2:	|  |         cmpi.l #258,d0
    64c8:	|  +-------- ble.w 6556 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    64cc:	|  |         move.l 288(sp),-(sp)
    64d0:	|  |         jsr 6bc <get2bytes>
    64d6:	|  |         addq.l #4,sp
    64d8:	|  |         move.l d0,1cba6 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    64de:	|  |         move.l 1cba6 <numResourceNames>,d0
    64e4:	|  |         add.l d0,d0
    64e6:	|  |         add.l d0,d0
    64e8:	|  |         move.l d0,252(sp)
    64ec:	|  |         clr.l 248(sp)
    64f0:	|  |         move.l 1cbca <SysBase>,d0
    64f6:	|  |         movea.l d0,a6
    64f8:	|  |         move.l 252(sp),d0
    64fc:	|  |         move.l 248(sp),d1
    6500:	|  |         jsr -684(a6)
    6504:	|  |         move.l d0,244(sp)
    6508:	|  |         move.l 244(sp),d0
    650c:	|  |         move.l d0,1cb5e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6512:	|  |         move.l 1cb5e <allResourceNames>,d0
    6518:	|  |     ,-- bne.s 6520 <initSludge+0x1d8>
    651a:	|  |     |   clr.w d0
    651c:	+--|-----|-- bra.w 6ab6 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6520:	|  |     '-> clr.l 296(sp)
    6524:	|  |     ,-- bra.s 654a <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6526:	|  |  ,--|-> move.l 1cb5e <allResourceNames>,d1
    652c:	|  |  |  |   move.l 296(sp),d0
    6530:	|  |  |  |   add.l d0,d0
    6532:	|  |  |  |   add.l d0,d0
    6534:	|  |  |  |   movea.l d1,a2
    6536:	|  |  |  |   adda.l d0,a2
    6538:	|  |  |  |   move.l 288(sp),-(sp)
    653c:	|  |  |  |   jsr b02 <readString>
    6542:	|  |  |  |   addq.l #4,sp
    6544:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6546:	|  |  |  |   addq.l #1,296(sp)
    654a:	|  |  |  '-> move.l 1cba6 <numResourceNames>,d0
    6550:	|  |  |      cmp.l 296(sp),d0
    6554:	|  |  '----- bgt.s 6526 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6556:	|  '-------> move.l #129,1cb86 <input+0xa>
	input.mouseY = 100;
    6560:	|            moveq #100,d0
    6562:	|            move.l d0,1cb8a <input+0xe>
	winWidth = get2bytes (fp);
    6568:	|            move.l 288(sp),-(sp)
    656c:	|            jsr 6bc <get2bytes>
    6572:	|            addq.l #4,sp
    6574:	|            move.l d0,1cb1e <winWidth>
	winHeight = get2bytes (fp);
    657a:	|            move.l 288(sp),-(sp)
    657e:	|            jsr 6bc <get2bytes>
    6584:	|            addq.l #4,sp
    6586:	|            move.l d0,1cb22 <winHeight>
	specialSettings = FGetC (fp);
    658c:	|            move.l 288(sp),240(sp)
    6592:	|            move.l 1cbd2 <DOSBase>,d0
    6598:	|            movea.l d0,a6
    659a:	|            move.l 240(sp),d1
    659e:	|            jsr -306(a6)
    65a2:	|            move.l d0,236(sp)
    65a6:	|            move.l 236(sp),d0
    65aa:	|            move.l d0,1cbae <specialSettings>

	desiredfps = 1000/FGetC (fp);
    65b0:	|            move.l 288(sp),232(sp)
    65b6:	|            move.l 1cbd2 <DOSBase>,d0
    65bc:	|            movea.l d0,a6
    65be:	|            move.l 232(sp),d1
    65c2:	|            jsr -306(a6)
    65c6:	|            move.l d0,228(sp)
    65ca:	|            move.l 228(sp),d0
    65ce:	|            move.l d0,-(sp)
    65d0:	|            pea 3e8 <encodeFilename+0xea>
    65d4:	|            jsr 17d86 <__divsi3>
    65da:	|            addq.l #8,sp
    65dc:	|            move.l d0,1c54c <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    65e2:	|            move.l 288(sp),-(sp)
    65e6:	|            jsr b02 <readString>
    65ec:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    65ee:	|            move.l 288(sp),224(sp)
    65f4:	|            move.l #117612,220(sp)
    65fc:	|            moveq #8,d1
    65fe:	|            move.l d1,216(sp)
    6602:	|            moveq #1,d0
    6604:	|            move.l d0,212(sp)
    6608:	|            move.l 1cbd2 <DOSBase>,d0
    660e:	|            movea.l d0,a6
    6610:	|            move.l 224(sp),d1
    6614:	|            move.l 220(sp),d2
    6618:	|            move.l 216(sp),d3
    661c:	|            move.l 212(sp),d4
    6620:	|            jsr -324(a6)
    6624:	|            move.l d0,208(sp)
    6628:	|            move.l 208(sp),d0
    662c:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6630:	|            moveq #1,d1
    6632:	|            cmp.l 204(sp),d1
    6636:	|        ,-- beq.s 6646 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6638:	|        |   pea 18b74 <PutChar+0xd56>
    663e:	|        |   jsr 1737c <KPrintF>
    6644:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6646:	|        '-> move.l 1cb74 <gameVersion>,d0
    664c:	|            cmpi.l #258,d0
    6652:	|        ,-- ble.s 6662 <initSludge+0x31a>
    6654:	|        |   move.l 288(sp),-(sp)
    6658:	|        |   jsr b02 <readString>
    665e:	|        |   addq.l #4,sp
    6660:	|     ,--|-- bra.s 6676 <initSludge+0x32e>
    6662:	|     |  '-> pea 18b92 <PutChar+0xd74>
    6668:	|     |      pea 18b92 <PutChar+0xd74>
    666e:	|     |      jsr 13dc8 <joinStrings>
    6674:	|     |      addq.l #8,sp
    6676:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    667a:	|            move.l 1cb74 <gameVersion>,d0
    6680:	|            cmpi.l #258,d0
    6686:	|     ,----- ble.s 66a8 <initSludge+0x360>
    6688:	|     |      move.l 288(sp),196(sp)
    668e:	|     |      move.l 1cbd2 <DOSBase>,d0
    6694:	|     |      movea.l d0,a6
    6696:	|     |      move.l 196(sp),d1
    669a:	|     |      jsr -306(a6)
    669e:	|     |      move.l d0,192(sp)
    66a2:	|     |      move.l 192(sp),d0
    66a6:	|     |  ,-- bra.s 66aa <initSludge+0x362>
    66a8:	|     '--|-> moveq #0,d0
    66aa:	|        '-> move.l d0,1cca6 <gameSettings+0x4>
	makeLanguageTable (fp);
    66b0:	|            move.l 288(sp),-(sp)
    66b4:	|            jsr 1377e <makeLanguageTable>
    66ba:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    66bc:	|            move.l 1cb74 <gameVersion>,d0
    66c2:	|            cmpi.l #261,d0
    66c8:	|        ,-- ble.s 6716 <initSludge+0x3ce>
	{
		FGetC(fp);
    66ca:	|        |   move.l 288(sp),188(sp)
    66d0:	|        |   move.l 1cbd2 <DOSBase>,d0
    66d6:	|        |   movea.l d0,a6
    66d8:	|        |   move.l 188(sp),d1
    66dc:	|        |   jsr -306(a6)
    66e0:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    66e4:	|        |   move.l 288(sp),180(sp)
    66ea:	|        |   move.l 1cbd2 <DOSBase>,d0
    66f0:	|        |   movea.l d0,a6
    66f2:	|        |   move.l 180(sp),d1
    66f6:	|        |   jsr -306(a6)
    66fa:	|        |   move.l d0,176(sp)
		getFloat (fp);
    66fe:	|        |   move.l 288(sp),-(sp)
    6702:	|        |   jsr 7d8 <getFloat>
    6708:	|        |   addq.l #4,sp
		getFloat (fp);
    670a:	|        |   move.l 288(sp),-(sp)
    670e:	|        |   jsr 7d8 <getFloat>
    6714:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6716:	|        '-> move.l 288(sp),-(sp)
    671a:	|            jsr b02 <readString>
    6720:	|            addq.l #4,sp
    6722:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6726:	|            pea 18b93 <PutChar+0xd75>
    672c:	|            move.l 176(sp),-(sp)
    6730:	|            jsr 13d48 <strcmp>
    6736:	|            addq.l #8,sp
    6738:	|            tst.l d0
    673a:	|        ,-- beq.s 6742 <initSludge+0x3fa>
		return FALSE;
    673c:	|        |   clr.w d0
    673e:	+--------|-- bra.w 6ab6 <initSludge+0x76e>
	}
	FreeVec( checker);
    6742:	|        '-> move.l 172(sp),168(sp)
    6748:	|            move.l 1cbca <SysBase>,d0
    674e:	|            movea.l d0,a6
    6750:	|            movea.l 168(sp),a1
    6754:	|            jsr -690(a6)
	checker = NULL;
    6758:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    675c:	|            move.l 288(sp),164(sp)
    6762:	|            move.l 1cbd2 <DOSBase>,d0
    6768:	|            movea.l d0,a6
    676a:	|            move.l 164(sp),d1
    676e:	|            jsr -306(a6)
    6772:	|            move.l d0,160(sp)
    6776:	|            move.l 160(sp),d0
    677a:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    677e:	|            moveq #0,d0
    6780:	|            move.b 159(sp),d0
    6784:	|            moveq #1,d1
    6786:	|            and.l d1,d0
    6788:	|        ,-- beq.s 67e0 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    678a:	|        |   move.l 1cbd2 <DOSBase>,d0
    6790:	|        |   movea.l d0,a6
    6792:	|        |   jsr -60(a6)
    6796:	|        |   move.l d0,38(sp)
    679a:	|        |   move.l 38(sp),d0
    679e:	|        |   move.l d0,34(sp)
    67a2:	|        |   move.l #101275,30(sp)
    67aa:	|        |   moveq #54,d0
    67ac:	|        |   move.l d0,26(sp)
    67b0:	|        |   move.l 1cbd2 <DOSBase>,d0
    67b6:	|        |   movea.l d0,a6
    67b8:	|        |   move.l 34(sp),d1
    67bc:	|        |   move.l 30(sp),d2
    67c0:	|        |   move.l 26(sp),d3
    67c4:	|        |   jsr -48(a6)
    67c8:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    67cc:	|        |   pea 18bd2 <PutChar+0xdb4>
    67d2:	|        |   jsr 1737c <KPrintF>
    67d8:	|        |   addq.l #4,sp
		return FALSE;
    67da:	|        |   clr.w d0
    67dc:	+--------|-- bra.w 6ab6 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    67e0:	|        '-> move.l 288(sp),-(sp)
    67e4:	|            jsr 6bc <get2bytes>
    67ea:	|            addq.l #4,sp
    67ec:	|            move.l d0,1cba2 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    67f2:	|            move.l 1cba2 <numGlobals>,d0
    67f8:	|            lsl.l #3,d0
    67fa:	|            move.l d0,154(sp)
    67fe:	|            clr.l 150(sp)
    6802:	|            move.l 1cbca <SysBase>,d0
    6808:	|            movea.l d0,a6
    680a:	|            move.l 154(sp),d0
    680e:	|            move.l 150(sp),d1
    6812:	|            jsr -684(a6)
    6816:	|            move.l d0,146(sp)
    681a:	|            move.l 146(sp),d0
    681e:	|            move.l d0,1cb78 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6824:	|            move.l 1cb78 <globalVars>,d0
    682a:	|        ,-- bne.s 6848 <initSludge+0x500>
    682c:	|        |   move.l 1cba2 <numGlobals>,d0
    6832:	|        +-- ble.s 6848 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6834:	|        |   pea 18c0a <PutChar+0xdec>
    683a:	|        |   jsr 1737c <KPrintF>
    6840:	|        |   addq.l #4,sp
		return FALSE;
    6842:	|        |   clr.w d0
    6844:	+--------|-- bra.w 6ab6 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6848:	|        '-> clr.l 308(sp)
    684c:	|        ,-- bra.s 6864 <initSludge+0x51c>
    684e:	|     ,--|-> move.l 1cb78 <globalVars>,d1
    6854:	|     |  |   move.l 308(sp),d0
    6858:	|     |  |   lsl.l #3,d0
    685a:	|     |  |   movea.l d1,a0
    685c:	|     |  |   adda.l d0,a0
    685e:	|     |  |   clr.l (a0)
    6860:	|     |  |   addq.l #1,308(sp)
    6864:	|     |  '-> move.l 1cba2 <numGlobals>,d0
    686a:	|     |      cmp.l 308(sp),d0
    686e:	|     '----- bgt.s 684e <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6870:	|            move.l 1cca6 <gameSettings+0x4>,d0
    6876:	|            clr.l -(sp)
    6878:	|            move.l d0,-(sp)
    687a:	|            move.l 296(sp),-(sp)
    687e:	|            jsr 79f8 <setFileIndices>
    6884:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6888:	|            pea 1 <_start+0x1>
    688c:	|            jsr 76b2 <getNumberedString>
    6892:	|            addq.l #4,sp
    6894:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6898:	|            move.l 142(sp),-(sp)
    689c:	|            jsr 2fe <encodeFilename>
    68a2:	|            addq.l #4,sp
    68a4:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    68a8:	|            move.l 142(sp),134(sp)
    68ae:	|            move.l 1cbca <SysBase>,d0
    68b4:	|            movea.l d0,a6
    68b6:	|            movea.l 134(sp),a1
    68ba:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    68be:	|            move.l 138(sp),130(sp)
    68c4:	|            move.l 1cbd2 <DOSBase>,d0
    68ca:	|            movea.l d0,a6
    68cc:	|            move.l 130(sp),d1
    68d0:	|            jsr -120(a6)
    68d4:	|            move.l d0,126(sp)
    68d8:	|            move.l 126(sp),d0
    68dc:	|            move.l d0,292(sp)
	if(lock == 0) {
    68e0:	|        ,-- bne.s 690e <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    68e2:	|        |   move.l 138(sp),122(sp)
    68e8:	|        |   moveq #-2,d1
    68ea:	|        |   move.l d1,118(sp)
    68ee:	|        |   move.l 1cbd2 <DOSBase>,d0
    68f4:	|        |   movea.l d0,a6
    68f6:	|        |   move.l 122(sp),d1
    68fa:	|        |   move.l 118(sp),d2
    68fe:	|        |   jsr -84(a6)
    6902:	|        |   move.l d0,114(sp)
    6906:	|        |   move.l 114(sp),d0
    690a:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    690e:	|        '-> move.l 292(sp),110(sp)
    6914:	|            move.l 1cbd2 <DOSBase>,d0
    691a:	|            movea.l d0,a6
    691c:	|            move.l 110(sp),d1
    6920:	|            jsr -126(a6)
    6924:	|            move.l d0,106(sp)
    6928:	|            move.l 106(sp),d0
    692c:	|        ,-- bne.s 6988 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    692e:	|        |   move.l 138(sp),-(sp)
    6932:	|        |   pea 18c3d <PutChar+0xe1f>
    6938:	|        |   jsr 1737c <KPrintF>
    693e:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6940:	|        |   move.l 1cbd2 <DOSBase>,d0
    6946:	|        |   movea.l d0,a6
    6948:	|        |   jsr -60(a6)
    694c:	|        |   move.l d0,58(sp)
    6950:	|        |   move.l 58(sp),d0
    6954:	|        |   move.l d0,54(sp)
    6958:	|        |   move.l #101482,50(sp)
    6960:	|        |   moveq #40,d0
    6962:	|        |   move.l d0,46(sp)
    6966:	|        |   move.l 1cbd2 <DOSBase>,d0
    696c:	|        |   movea.l d0,a6
    696e:	|        |   move.l 54(sp),d1
    6972:	|        |   move.l 50(sp),d2
    6976:	|        |   move.l 46(sp),d3
    697a:	|        |   jsr -48(a6)
    697e:	|        |   move.l d0,42(sp)
		return FALSE;
    6982:	|        |   clr.w d0
    6984:	+--------|-- bra.w 6ab6 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6988:	|        '-> move.l 138(sp),102(sp)
    698e:	|            move.l 1cbca <SysBase>,d0
    6994:	|            movea.l d0,a6
    6996:	|            movea.l 102(sp),a1
    699a:	|            jsr -690(a6)

	readIniFile (filename);
    699e:	|            move.l 316(sp),-(sp)
    69a2:	|            jsr 138b2 <readIniFile>
    69a8:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    69aa:	|            jsr 13684 <getLanguageForFileB>
    69b0:	|            move.l d0,1c53e <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    69b6:	|            move.l 1c53e <languageNum>,d0
    69bc:	|        ,-- bpl.s 69cc <initSludge+0x684>
    69be:	|        |   pea 18c93 <PutChar+0xe75>
    69c4:	|        |   jsr 1737c <KPrintF>
    69ca:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    69cc:	|        '-> move.l 1c53e <languageNum>,d0
    69d2:	|            move.l d0,d1
    69d4:	|            move.l 1cca6 <gameSettings+0x4>,d0
    69da:	|            move.l d1,-(sp)
    69dc:	|            move.l d0,-(sp)
    69de:	|            clr.l -(sp)
    69e0:	|            jsr 79f8 <setFileIndices>
    69e6:	|            lea 12(sp),sp

	if (dataFol[0]) {
    69ea:	|            movea.l 200(sp),a0
    69ee:	|            move.b (a0),d0
    69f0:	|     ,----- beq.w 6a9a <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    69f4:	|     |      move.l 200(sp),-(sp)
    69f8:	|     |      jsr 2fe <encodeFilename>
    69fe:	|     |      addq.l #4,sp
    6a00:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6a04:	|     |      move.l 98(sp),94(sp)
    6a0a:	|     |      move.l 1cbd2 <DOSBase>,d0
    6a10:	|     |      movea.l d0,a6
    6a12:	|     |      move.l 94(sp),d1
    6a16:	|     |      jsr -120(a6)
    6a1a:	|     |      move.l d0,90(sp)
    6a1e:	|     |      move.l 90(sp),d0
    6a22:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6a26:	|     |  ,-- bne.s 6a54 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6a28:	|     |  |   move.l 98(sp),86(sp)
    6a2e:	|     |  |   moveq #-2,d1
    6a30:	|     |  |   move.l d1,82(sp)
    6a34:	|     |  |   move.l 1cbd2 <DOSBase>,d0
    6a3a:	|     |  |   movea.l d0,a6
    6a3c:	|     |  |   move.l 86(sp),d1
    6a40:	|     |  |   move.l 82(sp),d2
    6a44:	|     |  |   jsr -84(a6)
    6a48:	|     |  |   move.l d0,78(sp)
    6a4c:	|     |  |   move.l 78(sp),d0
    6a50:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6a54:	|     |  '-> move.l 292(sp),74(sp)
    6a5a:	|     |      move.l 1cbd2 <DOSBase>,d0
    6a60:	|     |      movea.l d0,a6
    6a62:	|     |      move.l 74(sp),d1
    6a66:	|     |      jsr -126(a6)
    6a6a:	|     |      move.l d0,70(sp)
    6a6e:	|     |      move.l 70(sp),d0
    6a72:	|     |  ,-- bne.s 6a84 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6a74:	|     |  |   move.l 1cbd2 <DOSBase>,d0
    6a7a:	|     |  |   movea.l d0,a6
    6a7c:	|     |  |   jsr -60(a6)
    6a80:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6a84:	|     |  '-> move.l 98(sp),62(sp)
    6a8a:	|     |      move.l 1cbca <SysBase>,d0
    6a90:	|     |      movea.l d0,a6
    6a92:	|     |      movea.l 62(sp),a1
    6a96:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6a9a:	|     '----> movea.l 1cb22 <winHeight>,a0
    6aa0:	|            lea -15(a0),a0
    6aa4:	|            move.l a0,d0
    6aa6:	|            move.l d0,-(sp)
    6aa8:	|            pea a <_start+0xa>
    6aac:	|            jsr 843e <positionStatus>
    6ab2:	|            addq.l #8,sp

	return TRUE;
    6ab4:	|            moveq #1,d0
}
    6ab6:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6aba:	             lea 292(sp),sp
    6abe:	             rts

00006ac0 <killSpeechTimers>:

void killSpeechTimers () {
    6ac0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6ac2:	          move.l 1cb62 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6ac8:	   ,----- bra.s 6af4 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6aca:	,--|----> movea.l (sp),a0
    6acc:	|  |      move.b 56(a0),d0
    6ad0:	|  |  ,-- bne.s 6aee <killSpeechTimers+0x2e>
    6ad2:	|  |  |   movea.l (sp),a0
    6ad4:	|  |  |   move.w 50(a0),d0
    6ad8:	|  |  +-- beq.s 6aee <killSpeechTimers+0x2e>
    6ada:	|  |  |   movea.l (sp),a0
    6adc:	|  |  |   move.l 12(a0),d0
    6ae0:	|  |  +-- beq.s 6aee <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6ae2:	|  |  |   movea.l (sp),a0
    6ae4:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6ae8:	|  |  |   movea.l (sp),a0
    6aea:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6aee:	|  |  '-> movea.l (sp),a0
    6af0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6af4:	|  '----> tst.l (sp)
    6af6:	'-------- bne.s 6aca <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6af8:	          jsr 3fb0 <killAllSpeech>
}
    6afe:	          nop
    6b00:	          addq.l #4,sp
    6b02:	          rts

00006b04 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6b04:	             lea -52(sp),sp
    6b08:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6b0a:	             movea.l 60(sp),a0
    6b0e:	             move.l (a0),d0
    6b10:	             move.l d0,-(sp)
    6b12:	             jsr 7938 <openSubSlice>
    6b18:	             addq.l #4,sp
    6b1a:	             tst.w d0
    6b1c:	         ,-- bne.s 6b24 <loadFunctionCode+0x20>
    6b1e:	         |   clr.w d0
    6b20:	,--------|-- bra.w 6cee <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6b24:	|        '-> move.l 1cbb2 <bigDataFile>,44(sp)
    6b2c:	|            move.l 1cbd2 <DOSBase>,d0
    6b32:	|            movea.l d0,a6
    6b34:	|            move.l 44(sp),d1
    6b38:	|            jsr -306(a6)
    6b3c:	|            move.l d0,40(sp)
    6b40:	|            move.l 40(sp),d0
    6b44:	|            move.l d0,d0
    6b46:	|            movea.l 60(sp),a0
    6b4a:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6b4e:	|            move.l 1cbb2 <bigDataFile>,d0
    6b54:	|            move.l d0,-(sp)
    6b56:	|            jsr 6bc <get2bytes>
    6b5c:	|            addq.l #4,sp
    6b5e:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6b62:	|            move.l 1cbb2 <bigDataFile>,d0
    6b68:	|            move.l d0,-(sp)
    6b6a:	|            jsr 6bc <get2bytes>
    6b70:	|            addq.l #4,sp
    6b72:	|            movea.l 60(sp),a0
    6b76:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6b7a:	|            move.l 1cbb2 <bigDataFile>,d0
    6b80:	|            move.l d0,-(sp)
    6b82:	|            jsr 6bc <get2bytes>
    6b88:	|            addq.l #4,sp
    6b8a:	|            movea.l 60(sp),a0
    6b8e:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6b92:	|            move.l 36(sp),d0
    6b96:	|            lsl.l #3,d0
    6b98:	|            move.l d0,32(sp)
    6b9c:	|            clr.l 28(sp)
    6ba0:	|            move.l 1cbca <SysBase>,d0
    6ba6:	|            movea.l d0,a6
    6ba8:	|            move.l 32(sp),d0
    6bac:	|            move.l 28(sp),d1
    6bb0:	|            jsr -684(a6)
    6bb4:	|            move.l d0,24(sp)
    6bb8:	|            move.l 24(sp),d0
    6bbc:	|            movea.l 60(sp),a0
    6bc0:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6bc4:	|            movea.l 60(sp),a0
    6bc8:	|            move.l 4(a0),d0
    6bcc:	|        ,-- bne.s 6be2 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6bce:	|        |   pea 18cbe <PutChar+0xea0>
    6bd4:	|        |   jsr 1737c <KPrintF>
    6bda:	|        |   addq.l #4,sp
		return FALSE;
    6bdc:	|        |   clr.w d0
    6bde:	+--------|-- bra.w 6cee <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6be2:	|        '-> clr.l 52(sp)
    6be6:	|        ,-- bra.s 6c48 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6be8:	|     ,--|-> move.l 1cbb2 <bigDataFile>,8(sp)
    6bf0:	|     |  |   move.l 1cbd2 <DOSBase>,d0
    6bf6:	|     |  |   movea.l d0,a6
    6bf8:	|     |  |   move.l 8(sp),d1
    6bfc:	|     |  |   jsr -306(a6)
    6c00:	|     |  |   move.l d0,4(sp)
    6c04:	|     |  |   move.l 4(sp),d1
    6c08:	|     |  |   movea.l 60(sp),a0
    6c0c:	|     |  |   movea.l 4(a0),a0
    6c10:	|     |  |   move.l 52(sp),d0
    6c14:	|     |  |   lsl.l #3,d0
    6c16:	|     |  |   adda.l d0,a0
    6c18:	|     |  |   move.l d1,d0
    6c1a:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6c1c:	|     |  |   move.l 1cbb2 <bigDataFile>,d0
    6c22:	|     |  |   move.l d0,-(sp)
    6c24:	|     |  |   jsr 6bc <get2bytes>
    6c2a:	|     |  |   addq.l #4,sp
    6c2c:	|     |  |   move.l d0,d1
    6c2e:	|     |  |   movea.l 60(sp),a0
    6c32:	|     |  |   movea.l 4(a0),a0
    6c36:	|     |  |   move.l 52(sp),d0
    6c3a:	|     |  |   lsl.l #3,d0
    6c3c:	|     |  |   adda.l d0,a0
    6c3e:	|     |  |   move.l d1,d0
    6c40:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6c44:	|     |  |   addq.l #1,52(sp)
    6c48:	|     |  '-> move.l 52(sp),d0
    6c4c:	|     |      cmp.l 36(sp),d0
    6c50:	|     '----- bcs.s 6be8 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6c52:	|            jsr 76a8 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6c58:	|            movea.l 60(sp),a0
    6c5c:	|            move.l 8(a0),d0
    6c60:	|  ,-------- ble.w 6ce4 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6c64:	|  |         movea.l 60(sp),a0
    6c68:	|  |         move.l 8(a0),d0
    6c6c:	|  |         lsl.l #3,d0
    6c6e:	|  |         move.l d0,20(sp)
    6c72:	|  |         clr.l 16(sp)
    6c76:	|  |         move.l 1cbca <SysBase>,d0
    6c7c:	|  |         movea.l d0,a6
    6c7e:	|  |         move.l 20(sp),d0
    6c82:	|  |         move.l 16(sp),d1
    6c86:	|  |         jsr -684(a6)
    6c8a:	|  |         move.l d0,12(sp)
    6c8e:	|  |         move.l 12(sp),d0
    6c92:	|  |         movea.l 60(sp),a0
    6c96:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6c9a:	|  |         movea.l 60(sp),a0
    6c9e:	|  |         move.l 20(a0),d0
    6ca2:	|  |     ,-- bne.s 6cb6 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6ca4:	|  |     |   pea 18cbe <PutChar+0xea0>
    6caa:	|  |     |   jsr 1737c <KPrintF>
    6cb0:	|  |     |   addq.l #4,sp
			return FALSE;
    6cb2:	|  |     |   clr.w d0
    6cb4:	+--|-----|-- bra.s 6cee <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6cb6:	|  |     '-> clr.l 48(sp)
    6cba:	|  |     ,-- bra.s 6cd4 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6cbc:	|  |  ,--|-> movea.l 60(sp),a0
    6cc0:	|  |  |  |   move.l 20(a0),d1
    6cc4:	|  |  |  |   move.l 48(sp),d0
    6cc8:	|  |  |  |   lsl.l #3,d0
    6cca:	|  |  |  |   movea.l d1,a0
    6ccc:	|  |  |  |   adda.l d0,a0
    6cce:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6cd0:	|  |  |  |   addq.l #1,48(sp)
    6cd4:	|  |  |  '-> movea.l 60(sp),a0
    6cd8:	|  |  |      move.l 8(a0),d0
    6cdc:	|  |  |      cmp.l 48(sp),d0
    6ce0:	|  |  '----- bgt.s 6cbc <loadFunctionCode+0x1b8>
    6ce2:	|  |     ,-- bra.s 6cec <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6ce4:	|  '-----|-> movea.l 60(sp),a0
    6ce8:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6cec:	|        '-> moveq #1,d0
}
    6cee:	'----------> movea.l (sp)+,a6
    6cf0:	             lea 52(sp),sp
    6cf4:	             rts

00006cf6 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6cf6:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6cf8:	movea.l 1c53a <currentEvents>,a2
    6cfe:	move.l 8(sp),-(sp)
    6d02:	jsr 6bc <get2bytes>
    6d08:	addq.l #4,sp
    6d0a:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6d0c:	movea.l 1c53a <currentEvents>,a2
    6d12:	move.l 8(sp),-(sp)
    6d16:	jsr 6bc <get2bytes>
    6d1c:	addq.l #4,sp
    6d1e:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6d22:	movea.l 1c53a <currentEvents>,a2
    6d28:	move.l 8(sp),-(sp)
    6d2c:	jsr 6bc <get2bytes>
    6d32:	addq.l #4,sp
    6d34:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6d38:	movea.l 1c53a <currentEvents>,a2
    6d3e:	move.l 8(sp),-(sp)
    6d42:	jsr 6bc <get2bytes>
    6d48:	addq.l #4,sp
    6d4a:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6d4e:	movea.l 1c53a <currentEvents>,a2
    6d54:	move.l 8(sp),-(sp)
    6d58:	jsr 6bc <get2bytes>
    6d5e:	addq.l #4,sp
    6d60:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    6d64:	move.l 8(sp),-(sp)
    6d68:	jsr 718 <get4bytes>
    6d6e:	addq.l #4,sp
    6d70:	movea.l 1c53a <currentEvents>,a0
    6d76:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6d7a:	movea.l 1c53a <currentEvents>,a2
    6d80:	move.l 8(sp),-(sp)
    6d84:	jsr 6bc <get2bytes>
    6d8a:	addq.l #4,sp
    6d8c:	move.l d0,24(a2)
}
    6d90:	nop
    6d92:	movea.l (sp)+,a2
    6d94:	rts

00006d96 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6d96:	       lea -312(sp),sp
    6d9a:	       movem.l d2-d3/a6,-(sp)
    6d9e:	       move.l 332(sp),d1
    6da2:	       move.l 336(sp),d0
    6da6:	       move.b d1,d1
    6da8:	       move.b d1,16(sp)
    6dac:	       move.b d0,d0
    6dae:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6db2:	       move.l 328(sp),318(sp)
    6db8:	       move.l #1005,314(sp)
    6dc0:	       move.l 1cbd2 <DOSBase>,d0
    6dc6:	       movea.l d0,a6
    6dc8:	       move.l 318(sp),d1
    6dcc:	       move.l 314(sp),d2
    6dd0:	       jsr -30(a6)
    6dd4:	       move.l d0,310(sp)
    6dd8:	       move.l 310(sp),d0
    6ddc:	       move.l d0,306(sp)

	if (! fp) {
    6de0:	   ,-- bne.s 6e3c <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6de2:	   |   move.l 1cbd2 <DOSBase>,d0
    6de8:	   |   movea.l d0,a6
    6dea:	   |   jsr -60(a6)
    6dee:	   |   move.l d0,154(sp)
    6df2:	   |   move.l 154(sp),d0
    6df6:	   |   move.l d0,150(sp)
    6dfa:	   |   move.l #101607,146(sp)
    6e02:	   |   moveq #31,d0
    6e04:	   |   move.l d0,142(sp)
    6e08:	   |   move.l 1cbd2 <DOSBase>,d0
    6e0e:	   |   movea.l d0,a6
    6e10:	   |   move.l 150(sp),d1
    6e14:	   |   move.l 146(sp),d2
    6e18:	   |   move.l 142(sp),d3
    6e1c:	   |   jsr -48(a6)
    6e20:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6e24:	   |   move.l 328(sp),-(sp)
    6e28:	   |   pea 18d07 <PutChar+0xee9>
    6e2e:	   |   jsr 1737c <KPrintF>
    6e34:	   |   addq.l #8,sp
		return NULL;
    6e36:	   |   moveq #0,d0
    6e38:	,--|-- bra.w 70fc <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6e3c:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6e40:	|      move.l 306(sp),302(sp)
    6e46:	|      move.l 1cbd2 <DOSBase>,d0
    6e4c:	|      movea.l d0,a6
    6e4e:	|      move.l 302(sp),d1
    6e52:	|      jsr -306(a6)
    6e56:	|      move.l d0,298(sp)
    6e5a:	|      move.l 298(sp),d0
    6e5e:	|      moveq #83,d1
    6e60:	|      cmp.l d0,d1
    6e62:	|  ,-- beq.s 6e6a <openAndVerify+0xd4>
    6e64:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6e6a:	|  '-> move.l 306(sp),294(sp)
    6e70:	|      move.l 1cbd2 <DOSBase>,d0
    6e76:	|      movea.l d0,a6
    6e78:	|      move.l 294(sp),d1
    6e7c:	|      jsr -306(a6)
    6e80:	|      move.l d0,290(sp)
    6e84:	|      move.l 290(sp),d0
    6e88:	|      moveq #76,d1
    6e8a:	|      cmp.l d0,d1
    6e8c:	|  ,-- beq.s 6e94 <openAndVerify+0xfe>
    6e8e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6e94:	|  '-> move.l 306(sp),286(sp)
    6e9a:	|      move.l 1cbd2 <DOSBase>,d0
    6ea0:	|      movea.l d0,a6
    6ea2:	|      move.l 286(sp),d1
    6ea6:	|      jsr -306(a6)
    6eaa:	|      move.l d0,282(sp)
    6eae:	|      move.l 282(sp),d0
    6eb2:	|      moveq #85,d1
    6eb4:	|      cmp.l d0,d1
    6eb6:	|  ,-- beq.s 6ebe <openAndVerify+0x128>
    6eb8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6ebe:	|  '-> move.l 306(sp),278(sp)
    6ec4:	|      move.l 1cbd2 <DOSBase>,d0
    6eca:	|      movea.l d0,a6
    6ecc:	|      move.l 278(sp),d1
    6ed0:	|      jsr -306(a6)
    6ed4:	|      move.l d0,274(sp)
    6ed8:	|      move.l 274(sp),d0
    6edc:	|      moveq #68,d1
    6ede:	|      cmp.l d0,d1
    6ee0:	|  ,-- beq.s 6ee8 <openAndVerify+0x152>
    6ee2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6ee8:	|  '-> move.l 306(sp),270(sp)
    6eee:	|      move.l 1cbd2 <DOSBase>,d0
    6ef4:	|      movea.l d0,a6
    6ef6:	|      move.l 270(sp),d1
    6efa:	|      jsr -306(a6)
    6efe:	|      move.l d0,266(sp)
    6f02:	|      move.l 266(sp),d1
    6f06:	|      move.b 16(sp),d0
    6f0a:	|      ext.w d0
    6f0c:	|      movea.w d0,a0
    6f0e:	|      cmpa.l d1,a0
    6f10:	|  ,-- beq.s 6f18 <openAndVerify+0x182>
    6f12:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6f18:	|  '-> move.l 306(sp),262(sp)
    6f1e:	|      move.l 1cbd2 <DOSBase>,d0
    6f24:	|      movea.l d0,a6
    6f26:	|      move.l 262(sp),d1
    6f2a:	|      jsr -306(a6)
    6f2e:	|      move.l d0,258(sp)
    6f32:	|      move.l 258(sp),d1
    6f36:	|      move.b 14(sp),d0
    6f3a:	|      ext.w d0
    6f3c:	|      movea.w d0,a0
    6f3e:	|      cmpa.l d1,a0
    6f40:	|  ,-- beq.s 6f48 <openAndVerify+0x1b2>
    6f42:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6f48:	|  '-> tst.w 322(sp)
    6f4c:	|  ,-- beq.s 6fa4 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6f4e:	|  |   move.l 1cbd2 <DOSBase>,d0
    6f54:	|  |   movea.l d0,a6
    6f56:	|  |   jsr -60(a6)
    6f5a:	|  |   move.l d0,174(sp)
    6f5e:	|  |   move.l 174(sp),d0
    6f62:	|  |   move.l d0,170(sp)
    6f66:	|  |   move.l #101670,166(sp)
    6f6e:	|  |   moveq #31,d0
    6f70:	|  |   move.l d0,162(sp)
    6f74:	|  |   move.l 1cbd2 <DOSBase>,d0
    6f7a:	|  |   movea.l d0,a6
    6f7c:	|  |   move.l 170(sp),d1
    6f80:	|  |   move.l 166(sp),d2
    6f84:	|  |   move.l 162(sp),d3
    6f88:	|  |   jsr -48(a6)
    6f8c:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6f90:	|  |   pea 18d26 <PutChar+0xf08>
    6f96:	|  |   jsr 1737c <KPrintF>
    6f9c:	|  |   addq.l #4,sp
		return NULL;
    6f9e:	|  |   moveq #0,d0
    6fa0:	+--|-- bra.w 70fc <openAndVerify+0x366>
	}
	FGetC (fp);
    6fa4:	|  '-> move.l 306(sp),254(sp)
    6faa:	|      move.l 1cbd2 <DOSBase>,d0
    6fb0:	|      movea.l d0,a6
    6fb2:	|      move.l 254(sp),d1
    6fb6:	|      jsr -306(a6)
    6fba:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6fbe:	|      nop
    6fc0:	|  ,-> move.l 306(sp),246(sp)
    6fc6:	|  |   move.l 1cbd2 <DOSBase>,d0
    6fcc:	|  |   movea.l d0,a6
    6fce:	|  |   move.l 246(sp),d1
    6fd2:	|  |   jsr -306(a6)
    6fd6:	|  |   move.l d0,242(sp)
    6fda:	|  |   move.l 242(sp),d0
    6fde:	|  '-- bne.s 6fc0 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6fe0:	|      move.l 306(sp),238(sp)
    6fe6:	|      move.l 1cbd2 <DOSBase>,d0
    6fec:	|      movea.l d0,a6
    6fee:	|      move.l 238(sp),d1
    6ff2:	|      jsr -306(a6)
    6ff6:	|      move.l d0,234(sp)
    6ffa:	|      move.l 234(sp),d0
    6ffe:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    7002:	|      move.l 306(sp),226(sp)
    7008:	|      move.l 1cbd2 <DOSBase>,d0
    700e:	|      movea.l d0,a6
    7010:	|      move.l 226(sp),d1
    7014:	|      jsr -306(a6)
    7018:	|      move.l d0,222(sp)
    701c:	|      move.l 222(sp),d0
    7020:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    7024:	|      move.l 230(sp),d0
    7028:	|      lsl.l #8,d0
    702a:	|      add.l 218(sp),d0
    702e:	|      movea.l 344(sp),a0
    7032:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    7034:	|      movea.l 344(sp),a0
    7038:	|      move.l (a0),d0
    703a:	|      cmpi.l #514,d0
    7040:	|  ,-- ble.s 7096 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    7042:	|  |   move.l 1cbd2 <DOSBase>,d0
    7048:	|  |   movea.l d0,a6
    704a:	|  |   jsr -60(a6)
    704e:	|  |   move.l d0,194(sp)
    7052:	|  |   move.l 194(sp),d0
    7056:	|  |   move.l d0,190(sp)
    705a:	|  |   move.l #101697,186(sp)
    7062:	|  |   moveq #100,d1
    7064:	|  |   move.l d1,182(sp)
    7068:	|  |   move.l 1cbd2 <DOSBase>,d0
    706e:	|  |   movea.l d0,a6
    7070:	|  |   move.l 190(sp),d1
    7074:	|  |   move.l 186(sp),d2
    7078:	|  |   move.l 182(sp),d3
    707c:	|  |   jsr -48(a6)
    7080:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7084:	|  |   pea 18d41 <PutChar+0xf23>
    708a:	|  |   jsr 1737c <KPrintF>
    7090:	|  |   addq.l #4,sp
		return NULL;
    7092:	|  |   moveq #0,d0
    7094:	+--|-- bra.s 70fc <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7096:	|  '-> movea.l 344(sp),a0
    709a:	|      move.l (a0),d0
    709c:	|      cmpi.l #257,d0
    70a2:	|  ,-- bgt.s 70f8 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    70a4:	|  |   move.l 1cbd2 <DOSBase>,d0
    70aa:	|  |   movea.l d0,a6
    70ac:	|  |   jsr -60(a6)
    70b0:	|  |   move.l d0,214(sp)
    70b4:	|  |   move.l 214(sp),d0
    70b8:	|  |   move.l d0,210(sp)
    70bc:	|  |   move.l #101766,206(sp)
    70c4:	|  |   moveq #100,d0
    70c6:	|  |   move.l d0,202(sp)
    70ca:	|  |   move.l 1cbd2 <DOSBase>,d0
    70d0:	|  |   movea.l d0,a6
    70d2:	|  |   move.l 210(sp),d1
    70d6:	|  |   move.l 206(sp),d2
    70da:	|  |   move.l 202(sp),d3
    70de:	|  |   jsr -48(a6)
    70e2:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    70e6:	|  |   pea 18d86 <PutChar+0xf68>
    70ec:	|  |   jsr 1737c <KPrintF>
    70f2:	|  |   addq.l #4,sp
		return NULL;
    70f4:	|  |   moveq #0,d0
    70f6:	+--|-- bra.s 70fc <openAndVerify+0x366>
	}
	return fp;
    70f8:	|  '-> move.l 306(sp),d0
}
    70fc:	'----> movem.l (sp)+,d2-d3/a6
    7100:	       lea 312(sp),sp
    7104:	       rts

00007106 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    7106:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7108:	          move.l #117602,(sp)
	while (* huntAndDestroy) {
    710e:	   ,----- bra.s 713a <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    7110:	,--|----> movea.l (sp),a0
    7112:	|  |      move.l (a0),d0
    7114:	|  |      cmp.l 8(sp),d0
    7118:	|  |  ,-- bne.s 7130 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    711a:	|  |  |   movea.l (sp),a0
    711c:	|  |  |   movea.l (a0),a0
    711e:	|  |  |   move.l 44(a0),d0
    7122:	|  |  |   movea.l (sp),a0
    7124:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7126:	|  |  |   movea.l 8(sp),a0
    712a:	|  |  |   clr.l 44(a0)
    712e:	|  +--|-- bra.s 713a <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7130:	|  |  '-> movea.l (sp),a0
    7132:	|  |      move.l (a0),d0
    7134:	|  |      moveq #44,d1
    7136:	|  |      add.l d0,d1
    7138:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    713a:	|  '----> movea.l (sp),a0
    713c:	|         move.l (a0),d0
    713e:	'-------- bne.s 7110 <pauseFunction+0xa>
		}
	}
}
    7140:	          nop
    7142:	          nop
    7144:	          addq.l #4,sp
    7146:	          rts

00007148 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7148:	       lea -16(sp),sp
    714c:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    714e:	       moveq #58,d0
    7150:	       move.l d0,16(sp)
    7154:	       clr.l 12(sp)
    7158:	       move.l 1cbca <SysBase>,d0
    715e:	       movea.l d0,a6
    7160:	       move.l 16(sp),d0
    7164:	       move.l 12(sp),d1
    7168:	       jsr -684(a6)
    716c:	       move.l d0,8(sp)
    7170:	       move.l 8(sp),d0
    7174:	       move.l d0,4(sp)
	if(!newFunc) {
    7178:	   ,-- bne.s 718c <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    717a:	   |   pea 18dcd <PutChar+0xfaf>
    7180:	   |   jsr 1737c <KPrintF>
    7186:	   |   addq.l #4,sp
		return 0;
    7188:	   |   moveq #0,d0
    718a:	,--|-- bra.s 71a6 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    718c:	|  '-> move.l 24(sp),d0
    7190:	|      movea.l 4(sp),a0
    7194:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7196:	|      move.l 4(sp),-(sp)
    719a:	|      jsr 6b04 <loadFunctionCode>
    71a0:	|      addq.l #4,sp

	return newFunc;
    71a2:	|      move.l 4(sp),d0
}
    71a6:	'----> movea.l (sp)+,a6
    71a8:	       lea 16(sp),sp
    71ac:	       rts

000071ae <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    71ae:	move.l 1cb62 <allRunningFunctions>,d0
    71b4:	movea.l 4(sp),a0
    71b8:	move.l d0,44(a0)
	allRunningFunctions = fun;
    71bc:	move.l 4(sp),1cb62 <allRunningFunctions>
}
    71c4:	nop
    71c6:	rts

000071c8 <runSludge>:

BOOL runSludge () {
    71c8:	                   lea -12(sp),sp
    71cc:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    71ce:	                   move.l 1cb62 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    71d6:	      ,----------- bra.s 7252 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    71d8:	   ,--|----------> movea.l 12(sp),a0
    71dc:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    71e2:	   |  |            movea.l 12(sp),a0
    71e6:	   |  |            move.b 56(a0),d0
    71ea:	   |  |  ,-------- bne.s 724c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    71ec:	   |  |  |         movea.l 12(sp),a0
    71f0:	   |  |  |         move.l 12(a0),d0
    71f4:	   |  |  |  ,----- beq.s 721e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    71f6:	   |  |  |  |      movea.l 12(sp),a0
    71fa:	   |  |  |  |      move.l 12(a0),d0
    71fe:	   |  |  |  |  ,-- bpl.s 720a <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7200:	   |  |  |  |  |   movea.l 12(sp),a0
    7204:	   |  |  |  |  |   clr.l 12(a0)
    7208:	   |  |  +--|--|-- bra.s 724c <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    720a:	   |  |  |  |  '-> movea.l 12(sp),a0
    720e:	   |  |  |  |      move.l 12(a0),d0
    7212:	   |  |  |  |      subq.l #1,d0
				} else if (
    7214:	   |  |  |  |      movea.l 12(sp),a0
    7218:	   |  |  |  |      move.l d0,12(a0)
    721c:	   |  |  +--|----- bra.s 724c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    721e:	   |  |  |  '----> movea.l 12(sp),a0
    7222:	   |  |  |         move.w 50(a0),d0
    7226:	   |  |  |     ,-- beq.s 7236 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7228:	   |  |  |     |   movea.l 12(sp),a0
    722c:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7230:	   |  |  |     |   jsr 3fb0 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7236:	   |  |  |     '-> move.l 12(sp),-(sp)
    723a:	   |  |  |         jsr 51c0 <continueFunction>
    7240:	   |  |  |         addq.l #4,sp
    7242:	   |  |  |         tst.w d0
    7244:	   |  |  +-------- bne.s 724c <runSludge+0x84>
					return FALSE;
    7246:	   |  |  |         clr.w d0
    7248:	,--|--|--|-------- bra.w 72d8 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    724c:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    7252:	|  |  '----------> tst.l 12(sp)
    7256:	|  '-------------- bne.s 71d8 <runSludge+0x10>
	}

	if (loadNow) {
    7258:	|                  move.l 1cb96 <loadNow>,d0
    725e:	|        ,-------- beq.s 72d6 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7260:	|        |         movea.l 1cb96 <loadNow>,a0
    7266:	|        |         move.b (a0),d0
    7268:	|        |         cmpi.b #58,d0
    726c:	|        |  ,----- bne.s 72a0 <runSludge+0xd8>
			saveGame (loadNow + 1);
    726e:	|        |  |      move.l 1cb96 <loadNow>,d0
    7274:	|        |  |      addq.l #1,d0
    7276:	|        |  |      move.l d0,-(sp)
    7278:	|        |  |      jsr c7dc <saveGame>
    727e:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7280:	|        |  |      movea.l 1cc90 <saverFunc>,a0
    7286:	|        |  |      lea 28(a0),a0
    728a:	|        |  |      pea 1 <_start+0x1>
    728e:	|        |  |      pea 1 <_start+0x1>
    7292:	|        |  |      move.l a0,-(sp)
    7294:	|        |  |      jsr 1518e <setVariable>
    729a:	|        |  |      lea 12(sp),sp
    729e:	|        |  |  ,-- bra.s 72b8 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    72a0:	|        |  '--|-> move.l 1cb96 <loadNow>,d0
    72a6:	|        |     |   move.l d0,-(sp)
    72a8:	|        |     |   jsr c324 <loadGame>
    72ae:	|        |     |   addq.l #4,sp
    72b0:	|        |     |   tst.w d0
    72b2:	|        |     +-- bne.s 72b8 <runSludge+0xf0>
    72b4:	|        |     |   clr.w d0
    72b6:	+--------|-----|-- bra.s 72d8 <runSludge+0x110>
		}
		FreeVec(loadNow);
    72b8:	|        |     '-> move.l 1cb96 <loadNow>,8(sp)
    72c0:	|        |         move.l 1cbca <SysBase>,d0
    72c6:	|        |         movea.l d0,a6
    72c8:	|        |         movea.l 8(sp),a1
    72cc:	|        |         jsr -690(a6)
		loadNow = NULL;
    72d0:	|        |         clr.l 1cb96 <loadNow>
	}

	return TRUE;
    72d6:	|        '-------> moveq #1,d0
}
    72d8:	'----------------> movea.l (sp)+,a6
    72da:	                   lea 12(sp),sp
    72de:	                   rts

000072e0 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    72e0:	movea.l 1c53a <currentEvents>,a0
    72e6:	move.l (a0),d0
    72e8:	move.l 4(sp),-(sp)
    72ec:	move.l d0,-(sp)
    72ee:	jsr 8d0 <put2bytes>
    72f4:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    72f6:	movea.l 1c53a <currentEvents>,a0
    72fc:	move.l 4(a0),d0
    7300:	move.l 4(sp),-(sp)
    7304:	move.l d0,-(sp)
    7306:	jsr 8d0 <put2bytes>
    730c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    730e:	movea.l 1c53a <currentEvents>,a0
    7314:	move.l 8(a0),d0
    7318:	move.l 4(sp),-(sp)
    731c:	move.l d0,-(sp)
    731e:	jsr 8d0 <put2bytes>
    7324:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7326:	movea.l 1c53a <currentEvents>,a0
    732c:	move.l 12(a0),d0
    7330:	move.l 4(sp),-(sp)
    7334:	move.l d0,-(sp)
    7336:	jsr 8d0 <put2bytes>
    733c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    733e:	movea.l 1c53a <currentEvents>,a0
    7344:	move.l 16(a0),d0
    7348:	move.l 4(sp),-(sp)
    734c:	move.l d0,-(sp)
    734e:	jsr 8d0 <put2bytes>
    7354:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7356:	movea.l 1c53a <currentEvents>,a0
    735c:	move.l 20(a0),d0
    7360:	move.l 4(sp),-(sp)
    7364:	move.l d0,-(sp)
    7366:	jsr 958 <put4bytes>
    736c:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    736e:	movea.l 1c53a <currentEvents>,a0
    7374:	move.l 24(a0),d0
    7378:	move.l 4(sp),-(sp)
    737c:	move.l d0,-(sp)
    737e:	jsr 8d0 <put2bytes>
    7384:	addq.l #8,sp
}
    7386:	nop
    7388:	rts

0000738a <sludgeDisplay>:

void sludgeDisplay () {					
    738a:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    738c:	move.l #14675968,(sp)
	displayCursor();
    7392:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7398:	jsr 14ea <CstDrawBackdrop>
	CstRestoreScreen();
    739e:	jsr 2a78 <CstRestoreScreen>
	drawPeople();
    73a4:	jsr a05e <drawPeople>
	CstSwapBuffer();
    73aa:	jsr 3668 <CstSwapBuffer>
}
    73b0:	nop
    73b2:	addq.l #4,sp
    73b4:	rts

000073b6 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    73b6:	      ,-- bra.s 73d6 <stackSetByIndex+0x20>
		vS = vS->next;
    73b8:	,-----|-> movea.l 4(sp),a0
    73bc:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    73c2:	|     +-- bne.s 73d6 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    73c4:	|     |   pea 18df6 <PutChar+0xfd8>
    73ca:	|     |   jsr 1737c <KPrintF>
    73d0:	|     |   addq.l #4,sp
			return FALSE;
    73d2:	|     |   clr.w d0
    73d4:	|  ,--|-- bra.s 73f8 <stackSetByIndex+0x42>
	while (theIndex--) {
    73d6:	|  |  '-> move.l 8(sp),d0
    73da:	|  |      move.l d0,d1
    73dc:	|  |      subq.l #1,d1
    73de:	|  |      move.l d1,8(sp)
    73e2:	|  |      tst.l d0
    73e4:	'--|----- bne.s 73b8 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    73e6:	   |      move.l 4(sp),d0
    73ea:	   |      move.l d0,-(sp)
    73ec:	   |      move.l 16(sp),-(sp)
    73f0:	   |      jsr 14d56 <copyVariable>
    73f6:	   |      addq.l #8,sp
}
    73f8:	   '----> rts

000073fa <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    73fa:	             subq.l #8,sp
    73fc:	             move.l 28(sp),d0
    7400:	             move.w d0,d0
    7402:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7406:	             movea.l 12(sp),a0
    740a:	             move.l 16(a0),d1
    740e:	             move.l 16(sp),d0
    7412:	             cmp.l d1,d0
    7414:	         ,-- beq.s 742a <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7416:	         |   pea 18e0f <PutChar+0xff1>
    741c:	         |   jsr 1737c <KPrintF>
    7422:	         |   addq.l #4,sp
		return NULL; 
    7424:	         |   moveq #0,d0
    7426:	,--------|-- bra.w 7506 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    742a:	|        '-> movea.l 12(sp),a0
    742e:	|            move.l 16(a0),d1
    7432:	|            movea.l 12(sp),a0
    7436:	|            move.l 8(a0),d0
    743a:	|            cmp.l d1,d0
    743c:	|  ,-------- bge.s 74a6 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    743e:	|  |         pea 18e2b <PutChar+0x100d>
    7444:	|  |         jsr 1737c <KPrintF>
    744a:	|  |         addq.l #4,sp
		return NULL; 
    744c:	|  |         moveq #0,d0
    744e:	+--|-------- bra.w 7506 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7452:	|  |  ,----> movea.l 24(sp),a0
    7456:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    745a:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    745e:	|  |  |      movea.l 24(sp),a0
    7462:	|  |  |      move.l (a0),d0
    7464:	|  |  |  ,-- bne.s 747a <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7466:	|  |  |  |   pea 18e55 <PutChar+0x1037>
    746c:	|  |  |  |   jsr 1737c <KPrintF>
    7472:	|  |  |  |   addq.l #4,sp
			return NULL;
    7474:	|  |  |  |   moveq #0,d0
    7476:	+--|--|--|-- bra.w 7506 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    747a:	|  |  |  '-> movea.l 12(sp),a0
    747e:	|  |  |      move.l 20(a0),d1
    7482:	|  |  |      move.l 16(sp),d0
    7486:	|  |  |      lsl.l #3,d0
    7488:	|  |  |      add.l d0,d1
    748a:	|  |  |      move.l 4(sp),d0
    748e:	|  |  |      move.l d1,-(sp)
    7490:	|  |  |      move.l d0,-(sp)
    7492:	|  |  |      jsr 14d56 <copyVariable>
    7498:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    749a:	|  |  |      move.l 24(sp),-(sp)
    749e:	|  |  |      jsr 15220 <trimStack>
    74a4:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    74a6:	|  '--|----> tst.l 16(sp)
    74aa:	|     '----- bne.s 7452 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    74ac:	|            movea.l 12(sp),a0
    74b0:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    74b4:	|            movea.l 12(sp),a0
    74b8:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    74bc:	|            movea.l 12(sp),a0
    74c0:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    74c6:	|            movea.l 12(sp),a0
    74ca:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    74d0:	|            movea.l 12(sp),a0
    74d4:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    74d8:	|            movea.l 12(sp),a0
    74dc:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    74e0:	|            movea.l 12(sp),a0
    74e4:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    74e8:	|            movea.l 12(sp),a0
    74ec:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    74f0:	|            movea.l 12(sp),a0
    74f4:	|            clr.l 28(a0)

	restartFunction (newFunc);
    74f8:	|            move.l 12(sp),-(sp)
    74fc:	|            jsr 71ae <restartFunction>
    7502:	|            addq.l #4,sp
	return 1;
    7504:	|            moveq #1,d0
}
    7506:	'----------> addq.l #8,sp
    7508:	             rts

0000750a <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    750a:	       lea -24(sp),sp
    750e:	       move.l a6,-(sp)
    7510:	       move.l 48(sp),d0
    7514:	       move.w d0,d0
    7516:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    751a:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7522:	       moveq #58,d0
    7524:	       move.l d0,20(sp)
    7528:	       clr.l 16(sp)
    752c:	       move.l 1cbca <SysBase>,d0
    7532:	       movea.l d0,a6
    7534:	       move.l 20(sp),d0
    7538:	       move.l 16(sp),d1
    753c:	       jsr -684(a6)
    7540:	       move.l d0,12(sp)
    7544:	       move.l 12(sp),d0
    7548:	       move.l d0,8(sp)
	if(!newFunc) {
    754c:	   ,-- bne.s 7560 <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    754e:	   |   pea 18dcd <PutChar+0xfaf>
    7554:	   |   jsr 1737c <KPrintF>
    755a:	   |   addq.l #4,sp
		return 0;
    755c:	   |   moveq #0,d0
    755e:	,--|-- bra.s 75ae <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    7560:	|  '-> cmpi.l #145,32(sp)
    7568:	|  ,-- bne.s 7578 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    756a:	|  |   pea 18ea0 <PutChar+0x1082>
    7570:	|  |   jsr 1737c <KPrintF>
    7576:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    7578:	|  '-> move.l 32(sp),d0
    757c:	|      movea.l 8(sp),a0
    7580:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7582:	|      move.l 8(sp),-(sp)
    7586:	|      jsr 6b04 <loadFunctionCode>
    758c:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    758e:	|      movea.w 6(sp),a0
    7592:	|      move.l a0,-(sp)
    7594:	|      move.l 48(sp),-(sp)
    7598:	|      move.l 48(sp),-(sp)
    759c:	|      move.l 48(sp),-(sp)
    75a0:	|      move.l 24(sp),-(sp)
    75a4:	|      jsr 73fa <startNewFunctionLoaded>
    75aa:	|      lea 20(sp),sp
}
    75ae:	'----> movea.l (sp)+,a6
    75b0:	       lea 24(sp),sp
    75b4:	       rts

000075b6 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    75b6:	             lea -12(sp),sp
    75ba:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    75bc:	             movea.l 1c53a <currentEvents>,a0
    75c2:	             move.l 20(a0),d0
    75c6:	             cmp.l 20(sp),d0
    75ca:	,----------- beq.w 766c <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    75ce:	|            movea.l 20(sp),a0
    75d2:	|            move.l 24(a0),d0
    75d6:	|        ,-- beq.s 75ea <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    75d8:	|        |   pea 18ebe <PutChar+0x10a0>
    75de:	|        |   jsr 1737c <KPrintF>
    75e4:	|        |   addq.l #4,sp
		return;
    75e6:	|  ,-----|-- bra.w 766e <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    75ea:	|  |     '-> movea.l 20(sp),a0
    75ee:	|  |         move.l 4(a0),8(sp)
    75f4:	|  |         move.l 1cbca <SysBase>,d0
    75fa:	|  |         movea.l d0,a6
    75fc:	|  |         movea.l 8(sp),a1
    7600:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7604:	|  |         clr.l 12(sp)
    7608:	|  |     ,-- bra.s 7628 <unloadFunction+0x72>
    760a:	|  |  ,--|-> movea.l 20(sp),a0
    760e:	|  |  |  |   move.l 20(a0),d1
    7612:	|  |  |  |   move.l 12(sp),d0
    7616:	|  |  |  |   lsl.l #3,d0
    7618:	|  |  |  |   add.l d1,d0
    761a:	|  |  |  |   move.l d0,-(sp)
    761c:	|  |  |  |   jsr 14aea <unlinkVar>
    7622:	|  |  |  |   addq.l #4,sp
    7624:	|  |  |  |   addq.l #1,12(sp)
    7628:	|  |  |  '-> movea.l 20(sp),a0
    762c:	|  |  |      move.l 8(a0),d0
    7630:	|  |  |      cmp.l 12(sp),d0
    7634:	|  |  '----- bgt.s 760a <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    7636:	|  |         movea.l 20(sp),a0
    763a:	|  |         move.l 8(a0),d0
    763e:	|  |     ,-- ble.s 765a <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7640:	|  |     |   movea.l 20(sp),a0
    7644:	|  |     |   move.l 20(a0),4(sp)
    764a:	|  |     |   move.l 1cbca <SysBase>,d0
    7650:	|  |     |   movea.l d0,a6
    7652:	|  |     |   movea.l 4(sp),a1
    7656:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    765a:	|  |     '-> moveq #28,d0
    765c:	|  |         add.l 20(sp),d0
    7660:	|  |         move.l d0,-(sp)
    7662:	|  |         jsr 14aea <unlinkVar>
    7668:	|  |         addq.l #4,sp
    766a:	|  +-------- bra.s 766e <unloadFunction+0xb8>
		return;
    766c:	'--|-------> nop
}
    766e:	   '-------> movea.l (sp)+,a6
    7670:	             lea 12(sp),sp
    7674:	             rts

00007676 <unfreezeSubs>:

void unfreezeSubs () {
    7676:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7678:	          move.l 1cb62 <allRunningFunctions>,(sp)

	while (thisFunction) {
    767e:	   ,----- bra.s 769c <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7680:	,--|----> movea.l (sp),a0
    7682:	|  |      move.b 56(a0),d0
    7686:	|  |  ,-- beq.s 7696 <unfreezeSubs+0x20>
    7688:	|  |  |   movea.l (sp),a0
    768a:	|  |  |   move.b 56(a0),d0
    768e:	|  |  |   subq.b #1,d0
    7690:	|  |  |   movea.l (sp),a0
    7692:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7696:	|  |  '-> movea.l (sp),a0
    7698:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    769c:	|  '----> tst.l (sp)
    769e:	'-------- bne.s 7680 <unfreezeSubs+0xa>
	}
}
    76a0:	          nop
    76a2:	          nop
    76a4:	          addq.l #4,sp
    76a6:	          rts

000076a8 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    76a8:	clr.w 1c546 <sliceBusy>
}
    76ae:	nop
    76b0:	rts

000076b2 <getNumberedString>:

char * getNumberedString (int value) {
    76b2:	       lea -56(sp),sp
    76b6:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    76ba:	       move.w 1c546 <sliceBusy>,d0
    76c0:	   ,-- beq.s 770a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    76c2:	   |   move.l 1cbd2 <DOSBase>,d0
    76c8:	   |   movea.l d0,a6
    76ca:	   |   jsr -60(a6)
    76ce:	   |   move.l d0,28(sp)
    76d2:	   |   move.l 28(sp),d0
    76d6:	   |   move.l d0,24(sp)
    76da:	   |   move.l #102116,20(sp)
    76e2:	   |   moveq #76,d0
    76e4:	   |   move.l d0,16(sp)
    76e8:	   |   move.l 1cbd2 <DOSBase>,d0
    76ee:	   |   movea.l d0,a6
    76f0:	   |   move.l 24(sp),d1
    76f4:	   |   move.l 20(sp),d2
    76f8:	   |   move.l 16(sp),d3
    76fc:	   |   jsr -48(a6)
    7700:	   |   move.l d0,12(sp)
		return NULL;
    7704:	   |   moveq #0,d0
    7706:	,--|-- bra.w 77a6 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    770a:	|  '-> move.l 1cbb2 <bigDataFile>,64(sp)
    7712:	|      move.l 72(sp),d0
    7716:	|      add.l d0,d0
    7718:	|      add.l d0,d0
    771a:	|      move.l d0,d1
    771c:	|      move.l 1cbbe <startOfTextIndex>,d0
    7722:	|      add.l d1,d0
    7724:	|      move.l d0,60(sp)
    7728:	|      moveq #-1,d0
    772a:	|      move.l d0,56(sp)
    772e:	|      move.l 1cbd2 <DOSBase>,d0
    7734:	|      movea.l d0,a6
    7736:	|      move.l 64(sp),d1
    773a:	|      move.l 60(sp),d2
    773e:	|      move.l 56(sp),d3
    7742:	|      jsr -66(a6)
    7746:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    774a:	|      move.l 1cbb2 <bigDataFile>,d0
    7750:	|      move.l d0,-(sp)
    7752:	|      jsr 718 <get4bytes>
    7758:	|      addq.l #4,sp
    775a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    775e:	|      move.l 1cbb2 <bigDataFile>,48(sp)
    7766:	|      move.l 72(sp),44(sp)
    776c:	|      moveq #-1,d0
    776e:	|      move.l d0,40(sp)
    7772:	|      move.l 1cbd2 <DOSBase>,d0
    7778:	|      movea.l d0,a6
    777a:	|      move.l 48(sp),d1
    777e:	|      move.l 44(sp),d2
    7782:	|      move.l 40(sp),d3
    7786:	|      jsr -66(a6)
    778a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    778e:	|      move.l 1cbb2 <bigDataFile>,d0
    7794:	|      move.l d0,-(sp)
    7796:	|      jsr b02 <readString>
    779c:	|      addq.l #4,sp
    779e:	|      move.l d0,32(sp)
	
	return s;
    77a2:	|      move.l 32(sp),d0
}
    77a6:	'----> movem.l (sp)+,d2-d3/a6
    77aa:	       lea 56(sp),sp
    77ae:	       rts

000077b0 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    77b0:	       lea -32(sp),sp
    77b4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    77b8:	       move.w 1c546 <sliceBusy>,d0
    77be:	   ,-- beq.s 77da <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    77c0:	   |   pea 18f31 <PutChar+0x1113>
    77c6:	   |   pea 18f4f <PutChar+0x1131>
    77cc:	   |   jsr 1737c <KPrintF>
    77d2:	   |   addq.l #8,sp
		return 0;
    77d4:	   |   moveq #0,d0
    77d6:	,--|-- bra.w 786e <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    77da:	|  '-> move.l 1cbb2 <bigDataFile>,40(sp)
    77e2:	|      move.l 48(sp),d0
    77e6:	|      add.l d0,d0
    77e8:	|      add.l d0,d0
    77ea:	|      move.l d0,d1
    77ec:	|      move.l 1cbba <startOfDataIndex>,d0
    77f2:	|      add.l d1,d0
    77f4:	|      move.l d0,36(sp)
    77f8:	|      moveq #-1,d0
    77fa:	|      move.l d0,32(sp)
    77fe:	|      move.l 1cbd2 <DOSBase>,d0
    7804:	|      movea.l d0,a6
    7806:	|      move.l 40(sp),d1
    780a:	|      move.l 36(sp),d2
    780e:	|      move.l 32(sp),d3
    7812:	|      jsr -66(a6)
    7816:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    781a:	|      move.l 1cbb2 <bigDataFile>,24(sp)
    7822:	|      move.l 1cbb2 <bigDataFile>,d0
    7828:	|      move.l d0,-(sp)
    782a:	|      jsr 718 <get4bytes>
    7830:	|      addq.l #4,sp
    7832:	|      move.l d0,20(sp)
    7836:	|      clr.l 16(sp)
    783a:	|      move.l 1cbd2 <DOSBase>,d0
    7840:	|      movea.l d0,a6
    7842:	|      move.l 24(sp),d1
    7846:	|      move.l 20(sp),d2
    784a:	|      move.l 16(sp),d3
    784e:	|      jsr -66(a6)
    7852:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7856:	|      move.w #1,1c546 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    785e:	|      move.l 1cbb2 <bigDataFile>,d0
    7864:	|      move.l d0,-(sp)
    7866:	|      jsr 718 <get4bytes>
    786c:	|      addq.l #4,sp
}
    786e:	'----> movem.l (sp)+,d2-d3/a6
    7872:	       lea 32(sp),sp
    7876:	       rts

00007878 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7878:	       lea -32(sp),sp
    787c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7880:	       move.w 1c546 <sliceBusy>,d0
    7886:	   ,-- beq.s 78a2 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7888:	   |   pea 18f31 <PutChar+0x1113>
    788e:	   |   pea 18f4f <PutChar+0x1131>
    7894:	   |   jsr 1737c <KPrintF>
    789a:	   |   addq.l #8,sp
        return FALSE;
    789c:	   |   clr.w d0
    789e:	,--|-- bra.w 792e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    78a2:	|  '-> move.l 1cbb2 <bigDataFile>,40(sp)
    78aa:	|      move.l 48(sp),d0
    78ae:	|      add.l d0,d0
    78b0:	|      add.l d0,d0
    78b2:	|      move.l d0,d1
    78b4:	|      move.l 1cbc6 <startOfObjectIndex>,d0
    78ba:	|      add.l d1,d0
    78bc:	|      move.l d0,36(sp)
    78c0:	|      moveq #-1,d0
    78c2:	|      move.l d0,32(sp)
    78c6:	|      move.l 1cbd2 <DOSBase>,d0
    78cc:	|      movea.l d0,a6
    78ce:	|      move.l 40(sp),d1
    78d2:	|      move.l 36(sp),d2
    78d6:	|      move.l 32(sp),d3
    78da:	|      jsr -66(a6)
    78de:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    78e2:	|      move.l 1cbb2 <bigDataFile>,24(sp)
    78ea:	|      move.l 1cbb2 <bigDataFile>,d0
    78f0:	|      move.l d0,-(sp)
    78f2:	|      jsr 718 <get4bytes>
    78f8:	|      addq.l #4,sp
    78fa:	|      move.l d0,20(sp)
    78fe:	|      moveq #-1,d0
    7900:	|      move.l d0,16(sp)
    7904:	|      move.l 1cbd2 <DOSBase>,d0
    790a:	|      movea.l d0,a6
    790c:	|      move.l 24(sp),d1
    7910:	|      move.l 20(sp),d2
    7914:	|      move.l 16(sp),d3
    7918:	|      jsr -66(a6)
    791c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7920:	|      move.w #1,1c546 <sliceBusy>
    7928:	|      move.w 1c546 <sliceBusy>,d0
}
    792e:	'----> movem.l (sp)+,d2-d3/a6
    7932:	       lea 32(sp),sp
    7936:	       rts

00007938 <openSubSlice>:

BOOL openSubSlice (int num) {
    7938:	       lea -32(sp),sp
    793c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7940:	       move.w 1c546 <sliceBusy>,d0
    7946:	   ,-- beq.s 7962 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7948:	   |   pea 18f31 <PutChar+0x1113>
    794e:	   |   pea 18f4f <PutChar+0x1131>
    7954:	   |   jsr 1737c <KPrintF>
    795a:	   |   addq.l #8,sp
		return FALSE;
    795c:	   |   clr.w d0
    795e:	,--|-- bra.w 79ee <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7962:	|  '-> move.l 1cbb2 <bigDataFile>,40(sp)
    796a:	|      move.l 48(sp),d0
    796e:	|      add.l d0,d0
    7970:	|      add.l d0,d0
    7972:	|      move.l d0,d1
    7974:	|      move.l 1cbc2 <startOfSubIndex>,d0
    797a:	|      add.l d1,d0
    797c:	|      move.l d0,36(sp)
    7980:	|      moveq #-1,d0
    7982:	|      move.l d0,32(sp)
    7986:	|      move.l 1cbd2 <DOSBase>,d0
    798c:	|      movea.l d0,a6
    798e:	|      move.l 40(sp),d1
    7992:	|      move.l 36(sp),d2
    7996:	|      move.l 32(sp),d3
    799a:	|      jsr -66(a6)
    799e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    79a2:	|      move.l 1cbb2 <bigDataFile>,24(sp)
    79aa:	|      move.l 1cbb2 <bigDataFile>,d0
    79b0:	|      move.l d0,-(sp)
    79b2:	|      jsr 718 <get4bytes>
    79b8:	|      addq.l #4,sp
    79ba:	|      move.l d0,20(sp)
    79be:	|      moveq #-1,d0
    79c0:	|      move.l d0,16(sp)
    79c4:	|      move.l 1cbd2 <DOSBase>,d0
    79ca:	|      movea.l d0,a6
    79cc:	|      move.l 24(sp),d1
    79d0:	|      move.l 20(sp),d2
    79d4:	|      move.l 16(sp),d3
    79d8:	|      jsr -66(a6)
    79dc:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    79e0:	|      move.w #1,1c546 <sliceBusy>
    79e8:	|      move.w 1c546 <sliceBusy>,d0
}
    79ee:	'----> movem.l (sp)+,d2-d3/a6
    79f2:	       lea 32(sp),sp
    79f6:	       rts

000079f8 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    79f8:	       lea -180(sp),sp
    79fc:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7a00:	       tst.l 196(sp)
    7a04:	,----- beq.s 7a44 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7a06:	|      move.l 196(sp),1cbb2 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7a0e:	|      move.l 196(sp),168(sp)
    7a14:	|      clr.l 164(sp)
    7a18:	|      clr.l 160(sp)
    7a1c:	|      move.l 1cbd2 <DOSBase>,d0
    7a22:	|      movea.l d0,a6
    7a24:	|      move.l 168(sp),d1
    7a28:	|      move.l 164(sp),d2
    7a2c:	|      move.l 160(sp),d3
    7a30:	|      jsr -66(a6)
    7a34:	|      move.l d0,156(sp)
    7a38:	|      move.l 156(sp),d0
    7a3c:	|      move.l d0,1cbb6 <startIndex>
    7a42:	|  ,-- bra.s 7a7e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7a44:	'--|-> move.l 1cbb2 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7a4c:	   |   move.l 196(sp),184(sp)
    7a52:	   |   move.l 1cbb6 <startIndex>,d0
    7a58:	   |   move.l d0,180(sp)
    7a5c:	   |   moveq #-1,d0
    7a5e:	   |   move.l d0,176(sp)
    7a62:	   |   move.l 1cbd2 <DOSBase>,d0
    7a68:	   |   movea.l d0,a6
    7a6a:	   |   move.l 184(sp),d1
    7a6e:	   |   move.l 180(sp),d2
    7a72:	   |   move.l 176(sp),d3
    7a76:	   |   jsr -66(a6)
    7a7a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7a7e:	   '-> clr.w 1c546 <sliceBusy>

	if (skipBefore > numLanguages) {
    7a84:	       move.l 204(sp),d0
    7a88:	       cmp.l 200(sp),d0
    7a8c:	   ,-- bls.s 7aa0 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7a8e:	   |   pea 18f69 <PutChar+0x114b>
    7a94:	   |   jsr 1737c <KPrintF>
    7a9a:	   |   addq.l #4,sp
		skipBefore = 0;
    7a9c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7aa0:	   '-> move.l 200(sp),d0
    7aa4:	       sub.l 204(sp),d0
    7aa8:	       move.l d0,188(sp)
	while (skipBefore) {
    7aac:	   ,-- bra.s 7aea <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7aae:	,--|-> move.l 196(sp),24(sp)
    7ab4:	|  |   move.l 196(sp),-(sp)
    7ab8:	|  |   jsr 718 <get4bytes>
    7abe:	|  |   addq.l #4,sp
    7ac0:	|  |   move.l d0,20(sp)
    7ac4:	|  |   moveq #-1,d0
    7ac6:	|  |   move.l d0,16(sp)
    7aca:	|  |   move.l 1cbd2 <DOSBase>,d0
    7ad0:	|  |   movea.l d0,a6
    7ad2:	|  |   move.l 24(sp),d1
    7ad6:	|  |   move.l 20(sp),d2
    7ada:	|  |   move.l 16(sp),d3
    7ade:	|  |   jsr -66(a6)
    7ae2:	|  |   move.l d0,12(sp)
		skipBefore --;
    7ae6:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7aea:	|  '-> tst.l 204(sp)
    7aee:	'----- bne.s 7aae <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7af0:	       move.l 196(sp),152(sp)
    7af6:	       clr.l 148(sp)
    7afa:	       clr.l 144(sp)
    7afe:	       move.l 1cbd2 <DOSBase>,d0
    7b04:	       movea.l d0,a6
    7b06:	       move.l 152(sp),d1
    7b0a:	       move.l 148(sp),d2
    7b0e:	       move.l 144(sp),d3
    7b12:	       jsr -66(a6)
    7b16:	       move.l d0,140(sp)
    7b1a:	       move.l 140(sp),d0
    7b1e:	       addq.l #4,d0
    7b20:	       move.l d0,1cbbe <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7b26:	       move.l 196(sp),136(sp)
    7b2c:	       move.l 196(sp),-(sp)
    7b30:	       jsr 718 <get4bytes>
    7b36:	       addq.l #4,sp
    7b38:	       move.l d0,132(sp)
    7b3c:	       moveq #-1,d0
    7b3e:	       move.l d0,128(sp)
    7b42:	       move.l 1cbd2 <DOSBase>,d0
    7b48:	       movea.l d0,a6
    7b4a:	       move.l 136(sp),d1
    7b4e:	       move.l 132(sp),d2
    7b52:	       move.l 128(sp),d3
    7b56:	       jsr -66(a6)
    7b5a:	       move.l d0,124(sp)

	while (skipAfter) {
    7b5e:	   ,-- bra.s 7b9c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7b60:	,--|-> move.l 196(sp),40(sp)
    7b66:	|  |   move.l 196(sp),-(sp)
    7b6a:	|  |   jsr 718 <get4bytes>
    7b70:	|  |   addq.l #4,sp
    7b72:	|  |   move.l d0,36(sp)
    7b76:	|  |   moveq #-1,d0
    7b78:	|  |   move.l d0,32(sp)
    7b7c:	|  |   move.l 1cbd2 <DOSBase>,d0
    7b82:	|  |   movea.l d0,a6
    7b84:	|  |   move.l 40(sp),d1
    7b88:	|  |   move.l 36(sp),d2
    7b8c:	|  |   move.l 32(sp),d3
    7b90:	|  |   jsr -66(a6)
    7b94:	|  |   move.l d0,28(sp)
		skipAfter --;
    7b98:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7b9c:	|  '-> tst.l 188(sp)
    7ba0:	'----- bne.s 7b60 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7ba2:	       move.l 196(sp),120(sp)
    7ba8:	       clr.l 116(sp)
    7bac:	       clr.l 112(sp)
    7bb0:	       move.l 1cbd2 <DOSBase>,d0
    7bb6:	       movea.l d0,a6
    7bb8:	       move.l 120(sp),d1
    7bbc:	       move.l 116(sp),d2
    7bc0:	       move.l 112(sp),d3
    7bc4:	       jsr -66(a6)
    7bc8:	       move.l d0,108(sp)
    7bcc:	       move.l 108(sp),d0
    7bd0:	       addq.l #4,d0
    7bd2:	       move.l d0,1cbc2 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7bd8:	       move.l 196(sp),104(sp)
    7bde:	       move.l 196(sp),-(sp)
    7be2:	       jsr 718 <get4bytes>
    7be8:	       addq.l #4,sp
    7bea:	       move.l d0,100(sp)
    7bee:	       clr.l 96(sp)
    7bf2:	       move.l 1cbd2 <DOSBase>,d0
    7bf8:	       movea.l d0,a6
    7bfa:	       move.l 104(sp),d1
    7bfe:	       move.l 100(sp),d2
    7c02:	       move.l 96(sp),d3
    7c06:	       jsr -66(a6)
    7c0a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7c0e:	       move.l 196(sp),88(sp)
    7c14:	       clr.l 84(sp)
    7c18:	       clr.l 80(sp)
    7c1c:	       move.l 1cbd2 <DOSBase>,d0
    7c22:	       movea.l d0,a6
    7c24:	       move.l 88(sp),d1
    7c28:	       move.l 84(sp),d2
    7c2c:	       move.l 80(sp),d3
    7c30:	       jsr -66(a6)
    7c34:	       move.l d0,76(sp)
    7c38:	       move.l 76(sp),d0
    7c3c:	       addq.l #4,d0
    7c3e:	       move.l d0,1cbc6 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7c44:	       move.l 196(sp),72(sp)
    7c4a:	       move.l 196(sp),-(sp)
    7c4e:	       jsr 718 <get4bytes>
    7c54:	       addq.l #4,sp
    7c56:	       move.l d0,68(sp)
    7c5a:	       clr.l 64(sp)
    7c5e:	       move.l 1cbd2 <DOSBase>,d0
    7c64:	       movea.l d0,a6
    7c66:	       move.l 72(sp),d1
    7c6a:	       move.l 68(sp),d2
    7c6e:	       move.l 64(sp),d3
    7c72:	       jsr -66(a6)
    7c76:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7c7a:	       move.l 196(sp),56(sp)
    7c80:	       clr.l 52(sp)
    7c84:	       clr.l 48(sp)
    7c88:	       move.l 1cbd2 <DOSBase>,d0
    7c8e:	       movea.l d0,a6
    7c90:	       move.l 56(sp),d1
    7c94:	       move.l 52(sp),d2
    7c98:	       move.l 48(sp),d3
    7c9c:	       jsr -66(a6)
    7ca0:	       move.l d0,44(sp)
    7ca4:	       move.l 44(sp),d0
    7ca8:	       move.l d0,1cbba <startOfDataIndex>
    7cae:	       nop
    7cb0:	       movem.l (sp)+,d2-d3/a6
    7cb4:	       lea 180(sp),sp
    7cb8:	       rts

00007cba <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7cba:	    lea -20(sp),sp
    7cbe:	    move.l a6,-(sp)
    7cc0:	    move.l d7,-(sp)
	APTR vbr = 0;
    7cc2:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7cc6:	    move.w #20090,10(sp)
    7ccc:	    move.w #2049,12(sp)
    7cd2:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7cd8:	    movea.l 1cbca <SysBase>,a0
    7cde:	    move.w 296(a0),d0
    7ce2:	    move.w d0,d0
    7ce4:	    andi.l #65535,d0
    7cea:	    moveq #1,d1
    7cec:	    and.l d1,d0
    7cee:	,-- beq.s 7d1c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7cf0:	|   lea 28(sp),a0
    7cf4:	|   lea -18(a0),a0
    7cf8:	|   move.l a0,20(sp)
    7cfc:	|   move.l 1cbca <SysBase>,d0
    7d02:	|   movea.l d0,a6
    7d04:	|   move.l 20(sp),d7
    7d08:	|   exg d7,a5
    7d0a:	|   jsr -30(a6)
    7d0e:	|   exg d7,a5
    7d10:	|   move.l d0,16(sp)
    7d14:	|   move.l 16(sp),d0
    7d18:	|   move.l d0,24(sp)

	return vbr;
    7d1c:	'-> move.l 24(sp),d0
}
    7d20:	    move.l (sp)+,d7
    7d22:	    movea.l (sp)+,a6
    7d24:	    lea 20(sp),sp
    7d28:	    rts

00007d2a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7d2a:	movea.l 1cbf0 <VBR>,a0
    7d30:	lea 108(a0),a0
    7d34:	move.l 4(sp),(a0)
}
    7d38:	nop
    7d3a:	rts

00007d3c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7d3c:	movea.l 1cbf0 <VBR>,a0
    7d42:	move.l 108(a0),d0
}
    7d46:	rts

00007d48 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7d48:	       subq.l #8,sp
    7d4a:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7d4c:	       pea 18fb2 <PutChar+0x1194>
    7d52:	       jsr 1737c <KPrintF>
    7d58:	       addq.l #4,sp
	Forbid();
    7d5a:	       move.l 1cbca <SysBase>,d0
    7d60:	       movea.l d0,a6
    7d62:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7d66:	       pea 18fca <PutChar+0x11ac>
    7d6c:	       jsr 1737c <KPrintF>
    7d72:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7d74:	       movea.l 1cbce <custom>,a0
    7d7a:	       move.w 16(a0),d0
    7d7e:	       move.w d0,1cbee <SystemADKCON>
	SystemInts=custom->intenar;
    7d84:	       movea.l 1cbce <custom>,a0
    7d8a:	       move.w 28(a0),d0
    7d8e:	       move.w d0,1cbea <SystemInts>
	SystemDMA=custom->dmaconr;
    7d94:	       movea.l 1cbce <custom>,a0
    7d9a:	       move.w 2(a0),d0
    7d9e:	       move.w d0,1cbec <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7da4:	       movea.l 1cbd6 <GfxBase>,a0
    7daa:	       move.l 34(a0),d0
    7dae:	       move.l d0,1cbf8 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7db4:	       pea 18fe8 <PutChar+0x11ca>
    7dba:	       jsr 1737c <KPrintF>
    7dc0:	       addq.l #4,sp
	LoadView(0);
    7dc2:	       clr.l 4(sp)
    7dc6:	       move.l 1cbd6 <GfxBase>,d0
    7dcc:	       movea.l d0,a6
    7dce:	       movea.l 4(sp),a1
    7dd2:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7dd6:	       pea 18ffe <PutChar+0x11e0>
    7ddc:	       jsr 1737c <KPrintF>
    7de2:	       addq.l #4,sp
	WaitTOF();
    7de4:	       move.l 1cbd6 <GfxBase>,d0
    7dea:	       movea.l d0,a6
    7dec:	       jsr -270(a6)
	WaitTOF();
    7df0:	       move.l 1cbd6 <GfxBase>,d0
    7df6:	       movea.l d0,a6
    7df8:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7dfc:	       pea 19013 <PutChar+0x11f5>
    7e02:	       jsr 1737c <KPrintF>
    7e08:	       addq.l #4,sp
	WaitVbl();
    7e0a:	       jsr 172b0 <WaitVbl>
	WaitVbl();
    7e10:	       jsr 172b0 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7e16:	       pea 19028 <PutChar+0x120a>
    7e1c:	       jsr 1737c <KPrintF>
    7e22:	       addq.l #4,sp
	OwnBlitter();
    7e24:	       move.l 1cbd6 <GfxBase>,d0
    7e2a:	       movea.l d0,a6
    7e2c:	       jsr -456(a6)
	WaitBlit();	
    7e30:	       move.l 1cbd6 <GfxBase>,d0
    7e36:	       movea.l d0,a6
    7e38:	       jsr -228(a6)
	Disable();
    7e3c:	       move.l 1cbca <SysBase>,d0
    7e42:	       movea.l d0,a6
    7e44:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7e48:	       pea 19049 <PutChar+0x122b>
    7e4e:	       jsr 1737c <KPrintF>
    7e54:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7e56:	       movea.l 1cbce <custom>,a0
    7e5c:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7e62:	       pea 19060 <PutChar+0x1242>
    7e68:	       jsr 1737c <KPrintF>
    7e6e:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7e70:	       clr.l 8(sp)
    7e74:	   ,-- bra.s 7e92 <TakeSystem+0x14a>
		custom->color[a]=0;
    7e76:	,--|-> movea.l 1cbce <custom>,a0
    7e7c:	|  |   move.l 8(sp),d0
    7e80:	|  |   addi.l #192,d0
    7e86:	|  |   add.l d0,d0
    7e88:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7e8e:	|  |   addq.l #1,8(sp)
    7e92:	|  '-> moveq #31,d0
    7e94:	|      cmp.l 8(sp),d0
    7e98:	'----- bge.s 7e76 <TakeSystem+0x12e>

	WaitVbl();
    7e9a:	       jsr 172b0 <WaitVbl>
	WaitVbl();
    7ea0:	       jsr 172b0 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7ea6:	       pea 19085 <PutChar+0x1267>
    7eac:	       jsr 1737c <KPrintF>
    7eb2:	       addq.l #4,sp
	VBR=GetVBR();
    7eb4:	       jsr 7cba <GetVBR>
    7eba:	       move.l d0,1cbf0 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7ec0:	       jsr 7d3c <GetInterruptHandler>
    7ec6:	       move.l d0,1cbf4 <SystemIrq>
}
    7ecc:	       nop
    7ece:	       movea.l (sp)+,a6
    7ed0:	       addq.l #8,sp
    7ed2:	       rts

00007ed4 <FreeSystem>:

void FreeSystem() { 
    7ed4:	subq.l #4,sp
    7ed6:	move.l a6,-(sp)
	WaitVbl();
    7ed8:	jsr 172b0 <WaitVbl>
	WaitBlit();
    7ede:	move.l 1cbd6 <GfxBase>,d0
    7ee4:	movea.l d0,a6
    7ee6:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7eea:	movea.l 1cbce <custom>,a0
    7ef0:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7ef6:	movea.l 1cbce <custom>,a0
    7efc:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7f02:	movea.l 1cbce <custom>,a0
    7f08:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7f0e:	move.l 1cbf4 <SystemIrq>,d0
    7f14:	move.l d0,-(sp)
    7f16:	jsr 7d2a <SetInterruptHandler>
    7f1c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7f1e:	movea.l 1cbd6 <GfxBase>,a0
    7f24:	move.l 38(a0),d0
    7f28:	movea.l 1cbce <custom>,a0
    7f2e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7f32:	movea.l 1cbd6 <GfxBase>,a0
    7f38:	move.l 50(a0),d0
    7f3c:	movea.l 1cbce <custom>,a0
    7f42:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7f46:	movea.l 1cbce <custom>,a0
    7f4c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7f52:	move.w 1cbec <SystemDMA>,d0
    7f58:	movea.l 1cbce <custom>,a0
    7f5e:	ori.w #-32768,d0
    7f62:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7f66:	move.w 1cbee <SystemADKCON>,d0
    7f6c:	movea.l 1cbce <custom>,a0
    7f72:	ori.w #-32768,d0
    7f76:	move.w d0,158(a0)

	WaitBlit();	
    7f7a:	move.l 1cbd6 <GfxBase>,d0
    7f80:	movea.l d0,a6
    7f82:	jsr -228(a6)
	DisownBlitter();
    7f86:	move.l 1cbd6 <GfxBase>,d0
    7f8c:	movea.l d0,a6
    7f8e:	jsr -462(a6)
	Enable();
    7f92:	move.l 1cbca <SysBase>,d0
    7f98:	movea.l d0,a6
    7f9a:	jsr -126(a6)

	LoadView(ActiView);
    7f9e:	move.l 1cbf8 <ActiView>,4(sp)
    7fa6:	move.l 1cbd6 <GfxBase>,d0
    7fac:	movea.l d0,a6
    7fae:	movea.l 4(sp),a1
    7fb2:	jsr -222(a6)
	WaitTOF();
    7fb6:	move.l 1cbd6 <GfxBase>,d0
    7fbc:	movea.l d0,a6
    7fbe:	jsr -270(a6)
	WaitTOF();
    7fc2:	move.l 1cbd6 <GfxBase>,d0
    7fc8:	movea.l d0,a6
    7fca:	jsr -270(a6)

	Permit();
    7fce:	move.l 1cbca <SysBase>,d0
    7fd4:	movea.l d0,a6
    7fd6:	jsr -138(a6)
}
    7fda:	nop
    7fdc:	movea.l (sp)+,a6
    7fde:	addq.l #4,sp
    7fe0:	rts

00007fe2 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7fe2:	       lea -132(sp),sp
    7fe6:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7fea:	       clr.l 140(sp)
    7fee:	   ,-- bra.s 7ff4 <main+0x12>
    7ff0:	,--|-> addq.l #1,140(sp)
    7ff4:	|  '-> cmpi.l #999,140(sp)
    7ffc:	'----- ble.s 7ff0 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7ffe:	       movea.w #4,a0
    8002:	       move.l (a0),d0
    8004:	       move.l d0,1cbca <SysBase>
	custom = (struct Custom*)0xdff000;	
    800a:	       move.l #14675968,1cbce <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    8014:	       move.l #102569,136(sp)
    801c:	       clr.l 132(sp)
    8020:	       move.l 1cbca <SysBase>,d0
    8026:	       movea.l d0,a6
    8028:	       movea.l 136(sp),a1
    802c:	       move.l 132(sp),d0
    8030:	       jsr -552(a6)
    8034:	       move.l d0,128(sp)
    8038:	       move.l 128(sp),d0
    803c:	       move.l d0,1cbd6 <GfxBase>
	if (!GfxBase)
    8042:	       move.l 1cbd6 <GfxBase>,d0
    8048:	   ,-- bne.s 805e <main+0x7c>
		Exit(0);
    804a:	   |   clr.l 124(sp)
    804e:	   |   move.l 1cbd2 <DOSBase>,d0
    8054:	   |   movea.l d0,a6
    8056:	   |   move.l 124(sp),d1
    805a:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    805e:	   '-> move.l #102586,120(sp)
    8066:	       clr.l 116(sp)
    806a:	       move.l 1cbca <SysBase>,d0
    8070:	       movea.l d0,a6
    8072:	       movea.l 120(sp),a1
    8076:	       move.l 116(sp),d0
    807a:	       jsr -552(a6)
    807e:	       move.l d0,112(sp)
    8082:	       move.l 112(sp),d0
    8086:	       move.l d0,1cbd2 <DOSBase>
	if (!DOSBase)
    808c:	       move.l 1cbd2 <DOSBase>,d0
    8092:	   ,-- bne.s 80a8 <main+0xc6>
		Exit(0);
    8094:	   |   clr.l 108(sp)
    8098:	   |   move.l 1cbd2 <DOSBase>,d0
    809e:	   |   movea.l d0,a6
    80a0:	   |   move.l 108(sp),d1
    80a4:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    80a8:	   '-> move.l #102598,104(sp)
    80b0:	       clr.l 100(sp)
    80b4:	       move.l 1cbca <SysBase>,d0
    80ba:	       movea.l d0,a6
    80bc:	       movea.l 104(sp),a1
    80c0:	       move.l 100(sp),d0
    80c4:	       jsr -552(a6)
    80c8:	       move.l d0,96(sp)
    80cc:	       move.l 96(sp),d0
    80d0:	       move.l d0,1cbda <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    80d6:	       move.l 1cbda <MathIeeeSingBasBase>,d0
    80dc:	   ,-- bne.s 80f2 <main+0x110>
		Exit(0);	
    80de:	   |   clr.l 92(sp)
    80e2:	   |   move.l 1cbd2 <DOSBase>,d0
    80e8:	   |   movea.l d0,a6
    80ea:	   |   move.l 92(sp),d1
    80ee:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    80f2:	   '-> move.l #102622,88(sp)
    80fa:	       clr.l 84(sp)
    80fe:	       move.l 1cbca <SysBase>,d0
    8104:	       movea.l d0,a6
    8106:	       movea.l 88(sp),a1
    810a:	       move.l 84(sp),d0
    810e:	       jsr -552(a6)
    8112:	       move.l d0,80(sp)
    8116:	       move.l 80(sp),d0
    811a:	       move.l d0,1cbde <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    8120:	       move.l 1cbde <MathIeeeSingTransBase>,d0
    8126:	   ,-- bne.s 813c <main+0x15a>
		Exit(0);
    8128:	   |   clr.l 76(sp)
    812c:	   |   move.l 1cbd2 <DOSBase>,d0
    8132:	   |   movea.l d0,a6
    8134:	   |   move.l 76(sp),d1
    8138:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    813c:	   '-> move.l #102648,72(sp)
    8144:	       clr.l 68(sp)
    8148:	       move.l 1cbca <SysBase>,d0
    814e:	       movea.l d0,a6
    8150:	       movea.l 72(sp),a1
    8154:	       move.l 68(sp),d0
    8158:	       jsr -552(a6)
    815c:	       move.l d0,64(sp)
    8160:	       move.l 64(sp),d0
    8164:	       move.l d0,1cbe6 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    816a:	       move.l 1cbe6 <MathIeeeDoubTransBase>,d0
    8170:	   ,-- bne.s 8186 <main+0x1a4>
		Exit(0);
    8172:	   |   clr.l 60(sp)
    8176:	   |   move.l 1cbd2 <DOSBase>,d0
    817c:	   |   movea.l d0,a6
    817e:	   |   move.l 60(sp),d1
    8182:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8186:	   '-> move.l #102674,56(sp)
    818e:	       clr.l 52(sp)
    8192:	       move.l 1cbca <SysBase>,d0
    8198:	       movea.l d0,a6
    819a:	       movea.l 56(sp),a1
    819e:	       move.l 52(sp),d0
    81a2:	       jsr -552(a6)
    81a6:	       move.l d0,48(sp)
    81aa:	       move.l 48(sp),d0
    81ae:	       move.l d0,1cbe2 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    81b4:	       move.l 1cbe2 <MathIeeeDoubBasBase>,d0
    81ba:	   ,-- bne.s 81d0 <main+0x1ee>
		Exit(0);
    81bc:	   |   clr.l 44(sp)
    81c0:	   |   move.l 1cbd2 <DOSBase>,d0
    81c6:	   |   movea.l d0,a6
    81c8:	   |   move.l 44(sp),d1
    81cc:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    81d0:	   '-> pea 1912a <PutChar+0x130c>
    81d6:	       jsr 1737c <KPrintF>
    81dc:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    81de:	       move.l 1cbd2 <DOSBase>,d0
    81e4:	       movea.l d0,a6
    81e6:	       jsr -60(a6)
    81ea:	       move.l d0,40(sp)
    81ee:	       move.l 40(sp),d0
    81f2:	       move.l d0,36(sp)
    81f6:	       move.l #102730,32(sp)
    81fe:	       moveq #25,d0
    8200:	       move.l d0,28(sp)
    8204:	       move.l 1cbd2 <DOSBase>,d0
    820a:	       movea.l d0,a6
    820c:	       move.l 36(sp),d1
    8210:	       move.l 32(sp),d2
    8214:	       move.l 28(sp),d3
    8218:	       jsr -48(a6)
    821c:	       move.l d0,24(sp)
	Delay(50);
    8220:	       moveq #50,d0
    8222:	       move.l d0,20(sp)
    8226:	       move.l 1cbd2 <DOSBase>,d0
    822c:	       movea.l d0,a6
    822e:	       move.l 20(sp),d1
    8232:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8236:	       pea 19163 <PutChar+0x1345>
    823c:	       jsr 1737c <KPrintF>
    8242:	       addq.l #4,sp
	TakeSystem();
    8244:	       jsr 7d48 <TakeSystem>
	KPrintF("System Taken\n");
    824a:	       pea 19172 <PutChar+0x1354>
    8250:	       jsr 1737c <KPrintF>
    8256:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8258:	       movea.l 1cbce <custom>,a0
    825e:	       move.w #-30721,150(a0)
	WaitVbl();
    8264:	       jsr 172b0 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    826a:	       pea 19180 <PutChar+0x1362>
    8270:	       jsr 1737c <KPrintF>
    8276:	       addq.l #4,sp
	main_sludge(argc, argv);	
    8278:	       move.l 152(sp),-(sp)
    827c:	       move.l 152(sp),-(sp)
    8280:	       jsr 4a68 <main_sludge>
    8286:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8288:	       jsr 7ed4 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    828e:	       move.l 1cbd2 <DOSBase>,16(sp)
    8296:	       move.l 1cbca <SysBase>,d0
    829c:	       movea.l d0,a6
    829e:	       movea.l 16(sp),a1
    82a2:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    82a6:	       move.l 1cbd6 <GfxBase>,12(sp)
    82ae:	       move.l 1cbca <SysBase>,d0
    82b4:	       movea.l d0,a6
    82b6:	       movea.l 12(sp),a1
    82ba:	       jsr -414(a6)
    82be:	       moveq #0,d0
}
    82c0:	       movem.l (sp)+,d2-d3/a6
    82c4:	       lea 132(sp),sp
    82c8:	       rts

000082ca <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    82ca:	    lea -16(sp),sp
    82ce:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    82d0:	    moveq #8,d0
    82d2:	    move.l d0,16(sp)
    82d6:	    clr.l 12(sp)
    82da:	    move.l 1cbca <SysBase>,d0
    82e0:	    movea.l d0,a6
    82e2:	    move.l 16(sp),d0
    82e6:	    move.l 12(sp),d1
    82ea:	    jsr -684(a6)
    82ee:	    move.l d0,8(sp)
    82f2:	    move.l 8(sp),d0
    82f6:	    move.l d0,4(sp)
	if (!newStat) {
    82fa:	,-- bne.s 832a <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    82fc:	|   movea.l 1c548 <nowStatus>,a0
    8302:	|   move.l (a0),d0
    8304:	|   movea.l 4(sp),a0
    8308:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    830c:	|   pea 18b92 <PutChar+0xd74>
    8312:	|   jsr b8 <copyString>
    8318:	|   addq.l #4,sp
    831a:	|   movea.l 4(sp),a0
    831e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8320:	|   movea.l 1c548 <nowStatus>,a0
    8326:	|   move.l 4(sp),(a0)
	}
}
    832a:	'-> nop
    832c:	    movea.l (sp)+,a6
    832e:	    lea 16(sp),sp
    8332:	    rts

00008334 <clearStatusBar>:

void clearStatusBar () {
    8334:	       lea -16(sp),sp
    8338:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    833a:	       movea.l 1c548 <nowStatus>,a0
    8340:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8344:	       movea.l 1c548 <nowStatus>,a0
    834a:	       moveq #-1,d0
    834c:	       move.l d0,6(a0)
	while (stat) {
    8350:	   ,-- bra.s 8390 <clearStatusBar+0x5c>
		kill = stat;
    8352:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8358:	|  |   movea.l 16(sp),a0
    835c:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8362:	|  |   movea.l 12(sp),a0
    8366:	|  |   move.l (a0),8(sp)
    836a:	|  |   move.l 1cbca <SysBase>,d0
    8370:	|  |   movea.l d0,a6
    8372:	|  |   movea.l 8(sp),a1
    8376:	|  |   jsr -690(a6)
		FreeVec(kill);
    837a:	|  |   move.l 12(sp),4(sp)
    8380:	|  |   move.l 1cbca <SysBase>,d0
    8386:	|  |   movea.l d0,a6
    8388:	|  |   movea.l 4(sp),a1
    838c:	|  |   jsr -690(a6)
	while (stat) {
    8390:	|  '-> tst.l 16(sp)
    8394:	'----- bne.s 8352 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8396:	       movea.l 1c548 <nowStatus>,a0
    839c:	       clr.l (a0)
}
    839e:	       nop
    83a0:	       movea.l (sp)+,a6
    83a2:	       lea 16(sp),sp
    83a6:	       rts

000083a8 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    83a8:	clr.l 1cbfc <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    83ae:	move.w #-1,1cc00 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    83b6:	moveq #-1,d0
    83b8:	move.l d0,1cc02 <mainStatus+0x6>
	mainStatus.statusX = 10;
    83be:	moveq #10,d0
    83c0:	move.l d0,1cc06 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    83c6:	movea.l 1cb22 <winHeight>,a0
    83cc:	lea -15(a0),a0
    83d0:	move.l a0,d0
    83d2:	move.l d0,1cc0a <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    83d8:	nop
    83da:	rts

000083dc <killLastStatus>:

void killLastStatus () {
    83dc:	    lea -12(sp),sp
    83e0:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    83e2:	    movea.l 1c548 <nowStatus>,a0
    83e8:	    move.l (a0),d0
    83ea:	,-- beq.s 8434 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    83ec:	|   movea.l 1c548 <nowStatus>,a0
    83f2:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    83f6:	|   movea.l 1c548 <nowStatus>,a0
    83fc:	|   movea.l 12(sp),a1
    8400:	|   move.l 4(a1),d0
    8404:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8406:	|   movea.l 12(sp),a0
    840a:	|   move.l (a0),8(sp)
    840e:	|   move.l 1cbca <SysBase>,d0
    8414:	|   movea.l d0,a6
    8416:	|   movea.l 8(sp),a1
    841a:	|   jsr -690(a6)
		FreeVec(kill);
    841e:	|   move.l 12(sp),4(sp)
    8424:	|   move.l 1cbca <SysBase>,d0
    842a:	|   movea.l d0,a6
    842c:	|   movea.l 4(sp),a1
    8430:	|   jsr -690(a6)
	}
}
    8434:	'-> nop
    8436:	    movea.l (sp)+,a6
    8438:	    lea 12(sp),sp
    843c:	    rts

0000843e <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    843e:	movea.l 1c548 <nowStatus>,a0
    8444:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    844a:	movea.l 1c548 <nowStatus>,a0
    8450:	move.l 8(sp),14(a0)
}
    8456:	nop
    8458:	rts

0000845a <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    845a:	       lea -100(sp),sp
    845e:	       move.l a6,-(sp)
    8460:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8462:	       movea.l 1c548 <nowStatus>,a0
    8468:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    846c:	       movea.l 1c548 <nowStatus>,a0
    8472:	       move.w 4(a0),d0
    8476:	       move.w d0,d0
    8478:	       andi.l #65535,d0
    847e:	       move.l 112(sp),-(sp)
    8482:	       move.l d0,-(sp)
    8484:	       jsr 8d0 <put2bytes>
    848a:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    848c:	       movea.l 1c548 <nowStatus>,a0
    8492:	       move.l 6(a0),d0
    8496:	       move.l d0,d0
    8498:	       movea.w d0,a0
    849a:	       move.l 112(sp),-(sp)
    849e:	       move.l a0,-(sp)
    84a0:	       jsr a9c <putSigned>
    84a6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    84a8:	       movea.l 1c548 <nowStatus>,a0
    84ae:	       move.l 10(a0),d0
    84b2:	       move.l 112(sp),-(sp)
    84b6:	       move.l d0,-(sp)
    84b8:	       jsr 8d0 <put2bytes>
    84be:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    84c0:	       movea.l 1c548 <nowStatus>,a0
    84c6:	       move.l 14(a0),d0
    84ca:	       move.l 112(sp),-(sp)
    84ce:	       move.l d0,-(sp)
    84d0:	       jsr 8d0 <put2bytes>
    84d6:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    84d8:	       move.l 112(sp),100(sp)
    84de:	       movea.l 1c548 <nowStatus>,a0
    84e4:	       move.l 18(a0),96(sp)
    84ea:	       move.l 1cbd2 <DOSBase>,d0
    84f0:	       movea.l d0,a6
    84f2:	       move.l 100(sp),d1
    84f6:	       move.l 96(sp),d2
    84fa:	       jsr -312(a6)
    84fe:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8502:	       move.l 112(sp),88(sp)
    8508:	       movea.l 1c548 <nowStatus>,a0
    850e:	       move.l 22(a0),84(sp)
    8514:	       move.l 1cbd2 <DOSBase>,d0
    851a:	       movea.l d0,a6
    851c:	       move.l 88(sp),d1
    8520:	       move.l 84(sp),d2
    8524:	       jsr -312(a6)
    8528:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    852c:	       move.l 112(sp),76(sp)
    8532:	       movea.l 1c548 <nowStatus>,a0
    8538:	       move.l 26(a0),72(sp)
    853e:	       move.l 1cbd2 <DOSBase>,d0
    8544:	       movea.l d0,a6
    8546:	       move.l 76(sp),d1
    854a:	       move.l 72(sp),d2
    854e:	       jsr -312(a6)
    8552:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8556:	       move.l 112(sp),64(sp)
    855c:	       movea.l 1c548 <nowStatus>,a0
    8562:	       move.l 30(a0),60(sp)
    8568:	       move.l 1cbd2 <DOSBase>,d0
    856e:	       movea.l d0,a6
    8570:	       move.l 64(sp),d1
    8574:	       move.l 60(sp),d2
    8578:	       jsr -312(a6)
    857c:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8580:	       move.l 112(sp),52(sp)
    8586:	       movea.l 1c548 <nowStatus>,a0
    858c:	       move.l 34(a0),48(sp)
    8592:	       move.l 1cbd2 <DOSBase>,d0
    8598:	       movea.l d0,a6
    859a:	       move.l 52(sp),d1
    859e:	       move.l 48(sp),d2
    85a2:	       jsr -312(a6)
    85a6:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    85aa:	       move.l 112(sp),40(sp)
    85b0:	       movea.l 1c548 <nowStatus>,a0
    85b6:	       move.l 38(a0),36(sp)
    85bc:	       move.l 1cbd2 <DOSBase>,d0
    85c2:	       movea.l d0,a6
    85c4:	       move.l 40(sp),d1
    85c8:	       move.l 36(sp),d2
    85cc:	       jsr -312(a6)
    85d0:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    85d4:	   ,-- bra.s 8618 <saveStatusBars+0x1be>
		FPutC (fp,1);
    85d6:	,--|-> move.l 112(sp),16(sp)
    85dc:	|  |   moveq #1,d0
    85de:	|  |   move.l d0,12(sp)
    85e2:	|  |   move.l 1cbd2 <DOSBase>,d0
    85e8:	|  |   movea.l d0,a6
    85ea:	|  |   move.l 16(sp),d1
    85ee:	|  |   move.l 12(sp),d2
    85f2:	|  |   jsr -312(a6)
    85f6:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    85fa:	|  |   movea.l 104(sp),a0
    85fe:	|  |   move.l (a0),d0
    8600:	|  |   move.l 112(sp),-(sp)
    8604:	|  |   move.l d0,-(sp)
    8606:	|  |   jsr bd8 <writeString>
    860c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    860e:	|  |   movea.l 104(sp),a0
    8612:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8618:	|  '-> tst.l 104(sp)
    861c:	'----- bne.s 85d6 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    861e:	       move.l 112(sp),28(sp)
    8624:	       clr.l 24(sp)
    8628:	       move.l 1cbd2 <DOSBase>,d0
    862e:	       movea.l d0,a6
    8630:	       move.l 28(sp),d1
    8634:	       move.l 24(sp),d2
    8638:	       jsr -312(a6)
    863c:	       move.l d0,20(sp)
}
    8640:	       nop
    8642:	       move.l (sp)+,d2
    8644:	       movea.l (sp)+,a6
    8646:	       lea 100(sp),sp
    864a:	       rts

0000864c <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    864c:	movea.l 1c548 <nowStatus>,a0
    8652:	move.l 4(sp),6(a0)
}
    8658:	nop
    865a:	rts

0000865c <setStatusBar>:

void setStatusBar (char * txt) {
    865c:	    subq.l #4,sp
    865e:	    move.l a6,-(sp)
    8660:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8662:	    movea.l 1c548 <nowStatus>,a0
    8668:	    move.l (a0),d0
    866a:	,-- beq.s 869e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    866c:	|   movea.l 1c548 <nowStatus>,a0
    8672:	|   movea.l (a0),a0
    8674:	|   move.l (a0),8(sp)
    8678:	|   move.l 1cbca <SysBase>,d0
    867e:	|   movea.l d0,a6
    8680:	|   movea.l 8(sp),a1
    8684:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8688:	|   movea.l 1c548 <nowStatus>,a0
    868e:	|   movea.l (a0),a2
    8690:	|   move.l 16(sp),-(sp)
    8694:	|   jsr b8 <copyString>
    869a:	|   addq.l #4,sp
    869c:	|   move.l d0,(a2)
	}
}
    869e:	'-> nop
    86a0:	    movea.l (sp)+,a2
    86a2:	    movea.l (sp)+,a6
    86a4:	    addq.l #4,sp
    86a6:	    rts

000086a8 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    86a8:	       movea.l 1c548 <nowStatus>,a0
    86ae:	       move.l (a0),d0
    86b0:	,----- beq.s 86be <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    86b2:	|      movea.l 1c548 <nowStatus>,a0
    86b8:	|      movea.l (a0),a0
    86ba:	|      move.l (a0),d0
    86bc:	|  ,-- bra.s 86c4 <statusBarText+0x1c>
	} else {
		return "";
    86be:	'--|-> move.l #101266,d0
	}
    86c4:	   '-> rts

000086c6 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    86c6:	       lea -12(sp),sp
    86ca:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    86cc:	       move.l 1cc26 <zBuffer>,12(sp)

	while(zbuffercursor) {
    86d4:	   ,-- bra.s 86fc <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    86d6:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    86dc:	|  |   movea.l 12(sp),a0
    86e0:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    86e6:	|  |   move.l 8(sp),4(sp)
    86ec:	|  |   move.l 1cbca <SysBase>,d0
    86f2:	|  |   movea.l d0,a6
    86f4:	|  |   movea.l 4(sp),a1
    86f8:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    86fc:	|  '-> tst.l 12(sp)
    8700:	'----- bne.s 86d6 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8702:	       clr.l 1cc26 <zBuffer>
}
    8708:	       nop
    870a:	       movea.l (sp)+,a6
    870c:	       lea 12(sp),sp
    8710:	       rts

00008712 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8712:	                lea -304(sp),sp
    8716:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    871a:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    871e:	                jsr 86c6 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8724:	                move.l 328(sp),d0
    8728:	                move.l d0,-(sp)
    872a:	                jsr 77b0 <openFileFromNum>
    8730:	                addq.l #4,sp
    8732:	                tst.l d0
    8734:	            ,-- bne.s 873c <setZBuffer+0x2a>
    8736:	            |   clr.w d0
    8738:	,-----------|-- bra.w 89fa <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    873c:	|           '-> move.l 1cbb2 <bigDataFile>,310(sp)
    8744:	|               move.l 1cbd2 <DOSBase>,d0
    874a:	|               movea.l d0,a6
    874c:	|               move.l 310(sp),d1
    8750:	|               jsr -306(a6)
    8754:	|               move.l d0,306(sp)
    8758:	|               move.l 306(sp),d0
    875c:	|               moveq #97,d1
    875e:	|               cmp.l d0,d1
    8760:	|        ,----- bne.s 87d4 <setZBuffer+0xc2>
    8762:	|        |      move.l 1cbb2 <bigDataFile>,302(sp)
    876a:	|        |      move.l 1cbd2 <DOSBase>,d0
    8770:	|        |      movea.l d0,a6
    8772:	|        |      move.l 302(sp),d1
    8776:	|        |      jsr -306(a6)
    877a:	|        |      move.l d0,298(sp)
    877e:	|        |      move.l 298(sp),d0
    8782:	|        |      moveq #115,d1
    8784:	|        |      cmp.l d0,d1
    8786:	|        +----- bne.s 87d4 <setZBuffer+0xc2>
    8788:	|        |      move.l 1cbb2 <bigDataFile>,294(sp)
    8790:	|        |      move.l 1cbd2 <DOSBase>,d0
    8796:	|        |      movea.l d0,a6
    8798:	|        |      move.l 294(sp),d1
    879c:	|        |      jsr -306(a6)
    87a0:	|        |      move.l d0,290(sp)
    87a4:	|        |      move.l 290(sp),d0
    87a8:	|        |      moveq #122,d1
    87aa:	|        |      cmp.l d0,d1
    87ac:	|        +----- bne.s 87d4 <setZBuffer+0xc2>
    87ae:	|        |      move.l 1cbb2 <bigDataFile>,286(sp)
    87b6:	|        |      move.l 1cbd2 <DOSBase>,d0
    87bc:	|        |      movea.l d0,a6
    87be:	|        |      move.l 286(sp),d1
    87c2:	|        |      jsr -306(a6)
    87c6:	|        |      move.l d0,282(sp)
    87ca:	|        |      move.l 282(sp),d0
    87ce:	|        |      moveq #98,d1
    87d0:	|        |      cmp.l d0,d1
    87d2:	|        |  ,-- beq.s 87e8 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    87d4:	|        '--|-> pea 191bd <PutChar+0x139f>
    87da:	|           |   jsr 1737c <KPrintF>
    87e0:	|           |   addq.l #4,sp
		 return FALSE;
    87e2:	|           |   clr.w d0
    87e4:	+-----------|-- bra.w 89fa <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    87e8:	|           '-> move.l 1cbb2 <bigDataFile>,278(sp)
    87f0:	|               move.l 1cbd2 <DOSBase>,d0
    87f6:	|               movea.l d0,a6
    87f8:	|               move.l 278(sp),d1
    87fc:	|               jsr -306(a6)
    8800:	|               move.l d0,274(sp)
    8804:	|               move.l 274(sp),d0
    8808:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    880c:	|               moveq #28,d0
    880e:	|               move.l d0,270(sp)
    8812:	|               clr.l 266(sp)
    8816:	|               move.l 1cbca <SysBase>,d0
    881c:	|               movea.l d0,a6
    881e:	|               move.l 270(sp),d0
    8822:	|               move.l 266(sp),d1
    8826:	|               jsr -684(a6)
    882a:	|               move.l d0,262(sp)
    882e:	|               move.l 262(sp),d0
    8832:	|               move.l d0,1cc26 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8838:	|               move.l 1cc26 <zBuffer>,318(sp)

	while(numelements--)
    8840:	|     ,-------- bra.w 89e0 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8844:	|  ,--|-------> move.l 1cbb2 <bigDataFile>,d0
    884a:	|  |  |         move.l d0,-(sp)
    884c:	|  |  |         jsr 6bc <get2bytes>
    8852:	|  |  |         addq.l #4,sp
    8854:	|  |  |         movea.l 318(sp),a0
    8858:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    885a:	|  |  |         move.l 1cbb2 <bigDataFile>,d0
    8860:	|  |  |         move.l d0,-(sp)
    8862:	|  |  |         jsr 6bc <get2bytes>
    8868:	|  |  |         addq.l #4,sp
    886a:	|  |  |         movea.l 318(sp),a0
    886e:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8872:	|  |  |         move.l 1cbb2 <bigDataFile>,d0
    8878:	|  |  |         move.l d0,-(sp)
    887a:	|  |  |         jsr 6bc <get2bytes>
    8880:	|  |  |         addq.l #4,sp
    8882:	|  |  |         movea.l 318(sp),a0
    8886:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    888a:	|  |  |         move.l 1cbb2 <bigDataFile>,d0
    8890:	|  |  |         move.l d0,-(sp)
    8892:	|  |  |         jsr 6bc <get2bytes>
    8898:	|  |  |         addq.l #4,sp
    889a:	|  |  |         movea.l 318(sp),a0
    889e:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    88a2:	|  |  |         move.l 1cbb2 <bigDataFile>,d0
    88a8:	|  |  |         move.l d0,-(sp)
    88aa:	|  |  |         jsr 6bc <get2bytes>
    88b0:	|  |  |         addq.l #4,sp
    88b2:	|  |  |         movea.l 318(sp),a0
    88b6:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    88ba:	|  |  |         movea.l 318(sp),a0
    88be:	|  |  |         move.l (a0),d0
    88c0:	|  |  |         movea.l 318(sp),a0
    88c4:	|  |  |         move.l 4(a0),d1
    88c8:	|  |  |         move.l d1,-(sp)
    88ca:	|  |  |         move.l d0,-(sp)
    88cc:	|  |  |         jsr 17d08 <__mulsi3>
    88d2:	|  |  |         addq.l #8,sp
    88d4:	|  |  |         tst.l d0
    88d6:	|  |  |     ,-- bge.s 88da <setZBuffer+0x1c8>
    88d8:	|  |  |     |   addq.l #7,d0
    88da:	|  |  |     '-> asr.l #3,d0
    88dc:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    88e0:	|  |  |         moveq #0,d0
    88e2:	|  |  |         move.w 260(sp),d0
    88e6:	|  |  |         move.l d0,256(sp)
    88ea:	|  |  |         moveq #2,d1
    88ec:	|  |  |         move.l d1,252(sp)
    88f0:	|  |  |         move.l 1cbca <SysBase>,d0
    88f6:	|  |  |         movea.l d0,a6
    88f8:	|  |  |         move.l 256(sp),d0
    88fc:	|  |  |         move.l 252(sp),d1
    8900:	|  |  |         jsr -684(a6)
    8904:	|  |  |         move.l d0,248(sp)
    8908:	|  |  |         move.l 248(sp),d0
    890c:	|  |  |         movea.l 318(sp),a0
    8910:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8914:	|  |  |         move.l 1cbb2 <bigDataFile>,244(sp)
    891c:	|  |  |         movea.l 318(sp),a0
    8920:	|  |  |         move.l 20(a0),240(sp)
    8926:	|  |  |         moveq #1,d0
    8928:	|  |  |         move.l d0,236(sp)
    892c:	|  |  |         moveq #0,d0
    892e:	|  |  |         move.w 260(sp),d0
    8932:	|  |  |         move.l d0,232(sp)
    8936:	|  |  |         move.l 1cbd2 <DOSBase>,d0
    893c:	|  |  |         movea.l d0,a6
    893e:	|  |  |         move.l 244(sp),d1
    8942:	|  |  |         move.l 240(sp),d2
    8946:	|  |  |         move.l 236(sp),d3
    894a:	|  |  |         move.l 232(sp),d4
    894e:	|  |  |         jsr -324(a6)
    8952:	|  |  |         move.l d0,228(sp)
    8956:	|  |  |         move.l 228(sp),d0
    895a:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    895e:	|  |  |         tst.w 322(sp)
    8962:	|  |  |  ,----- beq.s 899e <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8964:	|  |  |  |      moveq #28,d1
    8966:	|  |  |  |      move.l d1,222(sp)
    896a:	|  |  |  |      clr.l 218(sp)
    896e:	|  |  |  |      move.l 1cbca <SysBase>,d0
    8974:	|  |  |  |      movea.l d0,a6
    8976:	|  |  |  |      move.l 222(sp),d0
    897a:	|  |  |  |      move.l 218(sp),d1
    897e:	|  |  |  |      jsr -684(a6)
    8982:	|  |  |  |      move.l d0,214(sp)
    8986:	|  |  |  |      move.l 214(sp),d0
    898a:	|  |  |  |      movea.l 318(sp),a0
    898e:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8992:	|  |  |  |      movea.l 318(sp),a0
    8996:	|  |  |  |      move.l 24(a0),318(sp)
    899c:	|  |  |  |  ,-- bra.s 89a6 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    899e:	|  |  |  '--|-> movea.l 318(sp),a0
    89a2:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    89a6:	|  |  |     '-> movea.l 318(sp),a0
    89aa:	|  |  |         move.l 4(a0),d0
    89ae:	|  |  |         move.l d0,d0
    89b0:	|  |  |         movea.w d0,a1
    89b2:	|  |  |         movea.l 318(sp),a0
    89b6:	|  |  |         move.l (a0),d0
    89b8:	|  |  |         move.l d0,d0
    89ba:	|  |  |         movea.w d0,a0
    89bc:	|  |  |         movea.l 318(sp),a2
    89c0:	|  |  |         move.l 20(a2),d0
    89c4:	|  |  |         clr.l -(sp)
    89c6:	|  |  |         pea 1 <_start+0x1>
    89ca:	|  |  |         move.l a1,-(sp)
    89cc:	|  |  |         move.l a0,-(sp)
    89ce:	|  |  |         pea 191d1 <PutChar+0x13b3>
    89d4:	|  |  |         move.l d0,-(sp)
    89d6:	|  |  |         jsr 17464 <debug_register_bitmap>
    89dc:	|  |  |         lea 24(sp),sp
	while(numelements--)
    89e0:	|  |  '-------> move.w 322(sp),d0
    89e4:	|  |            move.w d0,d1
    89e6:	|  |            subq.w #1,d1
    89e8:	|  |            move.w d1,322(sp)
    89ec:	|  |            tst.w d0
    89ee:	|  '----------- bne.w 8844 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    89f2:	|               jsr 76a8 <finishAccess>
	
	return TRUE;
    89f8:	|               moveq #1,d0
}
    89fa:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    89fe:	                lea 304(sp),sp
    8a02:	                rts

00008a04 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8a04:	          lea -32(sp),sp
    8a08:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8a0a:	          move.l 40(sp),d0
    8a0e:	          addq.l #8,d0
    8a10:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8a14:	          clr.l 32(sp)
    8a18:	   ,----- bra.s 8a5e <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8a1a:	,--|----> movea.l 24(sp),a0
    8a1e:	|  |      movea.l 8(a0),a0
    8a22:	|  |      move.l 32(sp),d1
    8a26:	|  |      move.l d1,d0
    8a28:	|  |      lsl.l #3,d0
    8a2a:	|  |      sub.l d1,d0
    8a2c:	|  |      add.l d0,d0
    8a2e:	|  |      add.l d0,d0
    8a30:	|  |      adda.l d0,a0
    8a32:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8a36:	|  |      movea.l 8(sp),a0
    8a3a:	|  |      move.l 24(a0),d0
    8a3e:	|  |  ,-- beq.s 8a5a <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8a40:	|  |  |   movea.l 8(sp),a0
    8a44:	|  |  |   move.l 24(a0),4(sp)
    8a4a:	|  |  |   move.l 1cbca <SysBase>,d0
    8a50:	|  |  |   movea.l d0,a6
    8a52:	|  |  |   movea.l 4(sp),a1
    8a56:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8a5a:	|  |  '-> addq.l #1,32(sp)
    8a5e:	|  '----> movea.l 24(sp),a0
    8a62:	|         move.l (a0),d0
    8a64:	|         cmp.l 32(sp),d0
    8a68:	'-------- bgt.s 8a1a <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8a6a:	          movea.l 24(sp),a0
    8a6e:	          move.l 8(a0),20(sp)
    8a74:	          move.l 1cbca <SysBase>,d0
    8a7a:	          movea.l d0,a6
    8a7c:	          movea.l 20(sp),a1
    8a80:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8a84:	          move.l 1ccde <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8a8c:	      ,-- bra.s 8a98 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8a8e:	   ,--|-> movea.l 28(sp),a0
    8a92:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8a98:	   |  '-> movea.l 28(sp),a0
    8a9c:	   |      movea.l 22(a0),a0
    8aa0:	   |      move.l (a0),d1
    8aa2:	   |      movea.l 40(sp),a0
    8aa6:	   |      move.l (a0),d0
    8aa8:	   |      cmp.l d1,d0
    8aaa:	   |  ,-- beq.s 8ab2 <forgetSpriteBank+0xae>
    8aac:	   |  |   tst.l 28(sp)
    8ab0:	   '--|-- bne.s 8a8e <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8ab2:	      '-> tst.l 28(sp)
    8ab6:	   ,----- beq.s 8ae0 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8ab8:	   |      movea.l 40(sp),a0
    8abc:	   |      move.l 22(a0),d0
    8ac0:	   |      movea.l 28(sp),a0
    8ac4:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8ac8:	   |      move.l 40(sp),12(sp)
    8ace:	   |      move.l 1cbca <SysBase>,d0
    8ad4:	   |      movea.l d0,a6
    8ad6:	   |      movea.l 12(sp),a1
    8ada:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8ade:	   |  ,-- bra.s 8b06 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8ae0:	   '--|-> movea.l 1ccde <allLoadedBanks>,a0
    8ae6:	      |   move.l 22(a0),d0
    8aea:	      |   move.l d0,1ccde <allLoadedBanks>
		FreeVec( forgetme);
    8af0:	      |   move.l 40(sp),16(sp)
    8af6:	      |   move.l 1cbca <SysBase>,d0
    8afc:	      |   movea.l d0,a6
    8afe:	      |   movea.l 16(sp),a1
    8b02:	      |   jsr -690(a6)
}
    8b06:	      '-> nop
    8b08:	          movea.l (sp)+,a6
    8b0a:	          lea 32(sp),sp
    8b0e:	          rts

00008b10 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8b10:	                      lea -84(sp),sp
    8b14:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8b18:	                      pea 191dd <PutChar+0x13bf>
    8b1e:	                      jsr 1737c <KPrintF>
    8b24:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8b26:	                      clr.l 94(sp)
    8b2a:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8b2e:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8b32:	                      move.l 108(sp),-(sp)
    8b36:	                      jsr 77b0 <openFileFromNum>
    8b3c:	                      addq.l #4,sp
    8b3e:	                      tst.l d0
    8b40:	                  ,-- bne.s 8b56 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8b42:	                  |   pea 191f7 <PutChar+0x13d9>
    8b48:	                  |   jsr 1737c <KPrintF>
    8b4e:	                  |   addq.l #4,sp
		return FALSE;
    8b50:	                  |   clr.w d0
    8b52:	,-----------------|-- bra.w 8f4a <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8b56:	|                 '-> move.l 1cbb2 <bigDataFile>,d0
    8b5c:	|                     move.l d0,-(sp)
    8b5e:	|                     jsr 6bc <get2bytes>
    8b64:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8b66:	|                     move.l 1cbb2 <bigDataFile>,82(sp)
    8b6e:	|                     move.l 1cbd2 <DOSBase>,d0
    8b74:	|                     movea.l d0,a6
    8b76:	|                     move.l 82(sp),d1
    8b7a:	|                     jsr -306(a6)
    8b7e:	|                     move.l d0,78(sp)
    8b82:	|                     move.l 78(sp),d0
    8b86:	|                     movea.l 112(sp),a0
    8b8a:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8b8e:	|                     move.l 1cbb2 <bigDataFile>,d0
    8b94:	|                     move.l d0,-(sp)
    8b96:	|                     jsr 6bc <get2bytes>
    8b9c:	|                     addq.l #4,sp
    8b9e:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8ba2:	|                 ,-- bgt.s 8bb8 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8ba4:	|                 |   pea 19225 <PutChar+0x1407>
    8baa:	|                 |   jsr 1737c <KPrintF>
    8bb0:	|                 |   addq.l #4,sp
		return FALSE;
    8bb2:	|                 |   clr.w d0
    8bb4:	+-----------------|-- bra.w 8f4a <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8bb8:	|                 '-> movea.l 112(sp),a0
    8bbc:	|                     move.l 4(a0),d0
    8bc0:	|                     moveq #3,d1
    8bc2:	|                     cmp.l d0,d1
    8bc4:	|                 ,-- bne.s 8bd2 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8bc6:	|                 |   movea.l 112(sp),a0
    8bca:	|                 |   move.w #1,12(a0)
    8bd0:	|              ,--|-- bra.s 8bf4 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8bd2:	|              |  '-> movea.l 112(sp),a0
    8bd6:	|              |      move.l 4(a0),d0
    8bda:	|              |      moveq #3,d1
    8bdc:	|              |      cmp.l d0,d1
    8bde:	|              +----- bge.s 8bf4 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8be0:	|              |      pea 19265 <PutChar+0x1447>
    8be6:	|              |      jsr 1737c <KPrintF>
    8bec:	|              |      addq.l #4,sp
		return FALSE;
    8bee:	|              |      clr.w d0
    8bf0:	+--------------|----- bra.w 8f4a <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8bf4:	|              '----> movea.l 112(sp),a0
    8bf8:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8bfc:	|                     move.l 74(sp),d1
    8c00:	|                     move.l d1,d0
    8c02:	|                     lsl.l #3,d0
    8c04:	|                     sub.l d1,d0
    8c06:	|                     add.l d0,d0
    8c08:	|                     add.l d0,d0
    8c0a:	|                     move.l d0,70(sp)
    8c0e:	|                     clr.l 66(sp)
    8c12:	|                     move.l 1cbca <SysBase>,d0
    8c18:	|                     movea.l d0,a6
    8c1a:	|                     move.l 70(sp),d0
    8c1e:	|                     move.l 66(sp),d1
    8c22:	|                     jsr -684(a6)
    8c26:	|                     move.l d0,62(sp)
    8c2a:	|                     move.l 62(sp),d0
    8c2e:	|                     movea.l 112(sp),a0
    8c32:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8c36:	|                     movea.l 112(sp),a0
    8c3a:	|                     move.l 8(a0),d0
    8c3e:	|                 ,-- bne.s 8c46 <loadSpriteBank+0x136>
    8c40:	|                 |   clr.w d0
    8c42:	+-----------------|-- bra.w 8f4a <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8c46:	|                 '-> moveq #1,d0
    8c48:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8c4c:	|                     clr.l 100(sp)
    8c50:	|     ,-------------- bra.w 8f28 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8c54:	|  ,--|-------------> move.l 1cbb2 <bigDataFile>,d0
    8c5a:	|  |  |               move.l d0,-(sp)
    8c5c:	|  |  |               jsr 6bc <get2bytes>
    8c62:	|  |  |               addq.l #4,sp
    8c64:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8c68:	|  |  |               movea.l 112(sp),a0
    8c6c:	|  |  |               movea.l 8(a0),a0
    8c70:	|  |  |               move.l 100(sp),d1
    8c74:	|  |  |               move.l d1,d0
    8c76:	|  |  |               lsl.l #3,d0
    8c78:	|  |  |               sub.l d1,d0
    8c7a:	|  |  |               add.l d0,d0
    8c7c:	|  |  |               add.l d0,d0
    8c7e:	|  |  |               adda.l d0,a0
    8c80:	|  |  |               moveq #0,d0
    8c82:	|  |  |               move.w 60(sp),d0
    8c86:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8c88:	|  |  |               movea.l 1cbb2 <bigDataFile>,a1
    8c8e:	|  |  |               movea.l 112(sp),a0
    8c92:	|  |  |               movea.l 8(a0),a0
    8c96:	|  |  |               move.l 100(sp),d1
    8c9a:	|  |  |               move.l d1,d0
    8c9c:	|  |  |               lsl.l #3,d0
    8c9e:	|  |  |               sub.l d1,d0
    8ca0:	|  |  |               add.l d0,d0
    8ca2:	|  |  |               add.l d0,d0
    8ca4:	|  |  |               lea (0,a0,d0.l),a2
    8ca8:	|  |  |               move.l a1,-(sp)
    8caa:	|  |  |               jsr 6bc <get2bytes>
    8cb0:	|  |  |               addq.l #4,sp
    8cb2:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8cb6:	|  |  |               movea.l 1cbb2 <bigDataFile>,a1
    8cbc:	|  |  |               movea.l 112(sp),a0
    8cc0:	|  |  |               movea.l 8(a0),a0
    8cc4:	|  |  |               move.l 100(sp),d1
    8cc8:	|  |  |               move.l d1,d0
    8cca:	|  |  |               lsl.l #3,d0
    8ccc:	|  |  |               sub.l d1,d0
    8cce:	|  |  |               add.l d0,d0
    8cd0:	|  |  |               add.l d0,d0
    8cd2:	|  |  |               lea (0,a0,d0.l),a2
    8cd6:	|  |  |               move.l a1,-(sp)
    8cd8:	|  |  |               jsr 6bc <get2bytes>
    8cde:	|  |  |               addq.l #4,sp
    8ce0:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8ce4:	|  |  |               movea.l 1cbb2 <bigDataFile>,a1
    8cea:	|  |  |               movea.l 112(sp),a0
    8cee:	|  |  |               movea.l 8(a0),a0
    8cf2:	|  |  |               move.l 100(sp),d1
    8cf6:	|  |  |               move.l d1,d0
    8cf8:	|  |  |               lsl.l #3,d0
    8cfa:	|  |  |               sub.l d1,d0
    8cfc:	|  |  |               add.l d0,d0
    8cfe:	|  |  |               add.l d0,d0
    8d00:	|  |  |               lea (0,a0,d0.l),a2
    8d04:	|  |  |               move.l a1,-(sp)
    8d06:	|  |  |               jsr 6bc <get2bytes>
    8d0c:	|  |  |               addq.l #4,sp
    8d0e:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8d12:	|  |  |               movea.l 112(sp),a0
    8d16:	|  |  |               move.l 4(a0),d0
    8d1a:	|  |  |               moveq #3,d1
    8d1c:	|  |  |               cmp.l d0,d1
    8d1e:	|  |  |     ,-------- beq.w 8dba <loadSpriteBank+0x2aa>
    8d22:	|  |  |     |         moveq #3,d1
    8d24:	|  |  |     |         cmp.l d0,d1
    8d26:	|  |  |  ,--|-------- blt.w 8e60 <loadSpriteBank+0x350>
    8d2a:	|  |  |  |  |         moveq #1,d1
    8d2c:	|  |  |  |  |         cmp.l d0,d1
    8d2e:	|  |  |  |  |     ,-- beq.s 8d3a <loadSpriteBank+0x22a>
    8d30:	|  |  |  |  |     |   moveq #2,d1
    8d32:	|  |  |  |  |     |   cmp.l d0,d1
    8d34:	|  |  |  |  |  ,--|-- beq.s 8d66 <loadSpriteBank+0x256>
    8d36:	|  |  |  +--|--|--|-- bra.w 8e60 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8d3a:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8d3e:	|  |  |  |  |  |      movea.l 8(a0),a0
    8d42:	|  |  |  |  |  |      move.l 100(sp),d1
    8d46:	|  |  |  |  |  |      move.l d1,d0
    8d48:	|  |  |  |  |  |      lsl.l #3,d0
    8d4a:	|  |  |  |  |  |      sub.l d1,d0
    8d4c:	|  |  |  |  |  |      add.l d0,d0
    8d4e:	|  |  |  |  |  |      add.l d0,d0
    8d50:	|  |  |  |  |  |      adda.l d0,a0
    8d52:	|  |  |  |  |  |      move.l 4(a0),d0
    8d56:	|  |  |  |  |  |      addq.l #2,d0
    8d58:	|  |  |  |  |  |      move.l d0,d0
    8d5a:	|  |  |  |  |  |      add.w d0,d0
    8d5c:	|  |  |  |  |  |      add.w d0,d0
    8d5e:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8d62:	|  |  |  +--|--|----- bra.w 8e60 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8d66:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8d6a:	|  |  |  |  |         movea.l 8(a0),a0
    8d6e:	|  |  |  |  |         move.l 100(sp),d1
    8d72:	|  |  |  |  |         move.l d1,d0
    8d74:	|  |  |  |  |         lsl.l #3,d0
    8d76:	|  |  |  |  |         sub.l d1,d0
    8d78:	|  |  |  |  |         add.l d0,d0
    8d7a:	|  |  |  |  |         add.l d0,d0
    8d7c:	|  |  |  |  |         adda.l d0,a0
    8d7e:	|  |  |  |  |         move.l (a0),d0
    8d80:	|  |  |  |  |     ,-- bpl.s 8d84 <loadSpriteBank+0x274>
    8d82:	|  |  |  |  |     |   addq.l #7,d0
    8d84:	|  |  |  |  |     '-> asr.l #3,d0
    8d86:	|  |  |  |  |         move.l d0,d2
    8d88:	|  |  |  |  |         movea.l 112(sp),a0
    8d8c:	|  |  |  |  |         movea.l 8(a0),a0
    8d90:	|  |  |  |  |         move.l 100(sp),d1
    8d94:	|  |  |  |  |         move.l d1,d0
    8d96:	|  |  |  |  |         lsl.l #3,d0
    8d98:	|  |  |  |  |         sub.l d1,d0
    8d9a:	|  |  |  |  |         add.l d0,d0
    8d9c:	|  |  |  |  |         add.l d0,d0
    8d9e:	|  |  |  |  |         adda.l d0,a0
    8da0:	|  |  |  |  |         move.l 4(a0),d0
    8da4:	|  |  |  |  |         move.l d0,d0
    8da6:	|  |  |  |  |         move.w d2,d1
    8da8:	|  |  |  |  |         muls.w d0,d1
    8daa:	|  |  |  |  |         move.w d1,d0
    8dac:	|  |  |  |  |         add.w d0,d0
    8dae:	|  |  |  |  |         add.w d1,d0
    8db0:	|  |  |  |  |         add.w d0,d0
    8db2:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8db6:	|  |  |  +--|-------- bra.w 8e60 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8dba:	|  |  |  |  '-------> movea.l 112(sp),a0
    8dbe:	|  |  |  |            movea.l 8(a0),a0
    8dc2:	|  |  |  |            move.l 100(sp),d1
    8dc6:	|  |  |  |            move.l d1,d0
    8dc8:	|  |  |  |            lsl.l #3,d0
    8dca:	|  |  |  |            sub.l d1,d0
    8dcc:	|  |  |  |            add.l d0,d0
    8dce:	|  |  |  |            add.l d0,d0
    8dd0:	|  |  |  |            adda.l d0,a0
    8dd2:	|  |  |  |            move.l (a0),d0
    8dd4:	|  |  |  |            andi.l #-2147483633,d0
    8dda:	|  |  |  |        ,-- bpl.s 8de4 <loadSpriteBank+0x2d4>
    8ddc:	|  |  |  |        |   subq.l #1,d0
    8dde:	|  |  |  |        |   moveq #-16,d1
    8de0:	|  |  |  |        |   or.l d1,d0
    8de2:	|  |  |  |        |   addq.l #1,d0
    8de4:	|  |  |  |        '-> tst.l d0
    8de6:	|  |  |  |     ,----- ble.s 8dec <loadSpriteBank+0x2dc>
    8de8:	|  |  |  |     |      moveq #2,d0
    8dea:	|  |  |  |     |  ,-- bra.s 8dee <loadSpriteBank+0x2de>
    8dec:	|  |  |  |     '--|-> clr.w d0
    8dee:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8df2:	|  |  |  |            movea.l 112(sp),a0
    8df6:	|  |  |  |            movea.l 8(a0),a0
    8dfa:	|  |  |  |            move.l 100(sp),d1
    8dfe:	|  |  |  |            move.l d1,d0
    8e00:	|  |  |  |            lsl.l #3,d0
    8e02:	|  |  |  |            sub.l d1,d0
    8e04:	|  |  |  |            add.l d0,d0
    8e06:	|  |  |  |            add.l d0,d0
    8e08:	|  |  |  |            adda.l d0,a0
    8e0a:	|  |  |  |            move.l (a0),d0
    8e0c:	|  |  |  |            movea.l d0,a0
    8e0e:	|  |  |  |            cmpa.w #0,a0
    8e12:	|  |  |  |        ,-- bge.s 8e18 <loadSpriteBank+0x308>
    8e14:	|  |  |  |        |   lea 15(a0),a0
    8e18:	|  |  |  |        '-> move.l a0,d0
    8e1a:	|  |  |  |            asr.l #4,d0
    8e1c:	|  |  |  |            add.l d0,d0
    8e1e:	|  |  |  |            move.l d0,d1
    8e20:	|  |  |  |            moveq #0,d0
    8e22:	|  |  |  |            move.w 58(sp),d0
    8e26:	|  |  |  |            add.l d1,d0
    8e28:	|  |  |  |            move.l d0,d2
    8e2a:	|  |  |  |            movea.l 112(sp),a0
    8e2e:	|  |  |  |            movea.l 8(a0),a0
    8e32:	|  |  |  |            move.l 100(sp),d1
    8e36:	|  |  |  |            move.l d1,d0
    8e38:	|  |  |  |            lsl.l #3,d0
    8e3a:	|  |  |  |            sub.l d1,d0
    8e3c:	|  |  |  |            add.l d0,d0
    8e3e:	|  |  |  |            add.l d0,d0
    8e40:	|  |  |  |            adda.l d0,a0
    8e42:	|  |  |  |            move.l 4(a0),d0
    8e46:	|  |  |  |            move.l d0,d0
    8e48:	|  |  |  |            move.w d2,d1
    8e4a:	|  |  |  |            muls.w d0,d1
    8e4c:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8e50:	|  |  |  |            cmpi.w #100,98(sp)
    8e56:	|  |  |  |        ,-- bls.s 8e5e <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8e58:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8e5e:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8e60:	|  |  |  '----------> moveq #0,d0
    8e62:	|  |  |               move.w 98(sp),d0
    8e66:	|  |  |               add.l d0,d0
    8e68:	|  |  |               move.l d0,52(sp)
    8e6c:	|  |  |               moveq #2,d0
    8e6e:	|  |  |               move.l d0,48(sp)
    8e72:	|  |  |               move.l 1cbca <SysBase>,d0
    8e78:	|  |  |               movea.l d0,a6
    8e7a:	|  |  |               move.l 52(sp),d0
    8e7e:	|  |  |               move.l 48(sp),d1
    8e82:	|  |  |               jsr -684(a6)
    8e86:	|  |  |               move.l d0,44(sp)
    8e8a:	|  |  |               movea.l 44(sp),a1
    8e8e:	|  |  |               movea.l 112(sp),a0
    8e92:	|  |  |               movea.l 8(a0),a0
    8e96:	|  |  |               move.l 100(sp),d1
    8e9a:	|  |  |               move.l d1,d0
    8e9c:	|  |  |               lsl.l #3,d0
    8e9e:	|  |  |               sub.l d1,d0
    8ea0:	|  |  |               add.l d0,d0
    8ea2:	|  |  |               add.l d0,d0
    8ea4:	|  |  |               adda.l d0,a0
    8ea6:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8eaa:	|  |  |               move.l 1cbb2 <bigDataFile>,40(sp)
    8eb2:	|  |  |               movea.l 112(sp),a0
    8eb6:	|  |  |               movea.l 8(a0),a0
    8eba:	|  |  |               move.l 100(sp),d1
    8ebe:	|  |  |               move.l d1,d0
    8ec0:	|  |  |               lsl.l #3,d0
    8ec2:	|  |  |               sub.l d1,d0
    8ec4:	|  |  |               add.l d0,d0
    8ec6:	|  |  |               add.l d0,d0
    8ec8:	|  |  |               adda.l d0,a0
    8eca:	|  |  |               move.l 24(a0),36(sp)
    8ed0:	|  |  |               moveq #2,d1
    8ed2:	|  |  |               move.l d1,32(sp)
    8ed6:	|  |  |               move.w 98(sp),d0
    8eda:	|  |  |               lsr.w #1,d0
    8edc:	|  |  |               move.w d0,d0
    8ede:	|  |  |               andi.l #65535,d0
    8ee4:	|  |  |               move.l d0,28(sp)
    8ee8:	|  |  |               move.l 1cbd2 <DOSBase>,d0
    8eee:	|  |  |               movea.l d0,a6
    8ef0:	|  |  |               move.l 40(sp),d1
    8ef4:	|  |  |               move.l 36(sp),d2
    8ef8:	|  |  |               move.l 32(sp),d3
    8efc:	|  |  |               move.l 28(sp),d4
    8f00:	|  |  |               jsr -324(a6)
    8f04:	|  |  |               move.l d0,24(sp)
    8f08:	|  |  |               move.l 24(sp),d0
    8f0c:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8f10:	|  |  |           ,-- bne.s 8f24 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8f12:	|  |  |           |   pea 1929a <PutChar+0x147c>
    8f18:	|  |  |           |   jsr 1737c <KPrintF>
    8f1e:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8f20:	|  |  |           |   clr.w d0
    8f22:	+--|--|-----------|-- bra.s 8f4a <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8f24:	|  |  |           '-> addq.l #1,100(sp)
    8f28:	|  |  '-------------> move.l 100(sp),d0
    8f2c:	|  |                  cmp.l 74(sp),d0
    8f30:	|  '----------------- blt.w 8c54 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8f34:	|                     jsr 76a8 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8f3a:	|                     pea 192cd <PutChar+0x14af>
    8f40:	|                     jsr 1737c <KPrintF>
    8f46:	|                     addq.l #4,sp
	return TRUE;
    8f48:	|                     moveq #1,d0
}
    8f4a:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8f4e:	                      lea 84(sp),sp
    8f52:	                      rts

00008f54 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8f54:	                   lea -16(sp),sp
    8f58:	                   move.l d2,-(sp)
    8f5a:	                   move.l 32(sp),d0
    8f5e:	                   move.w d0,d0
    8f60:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8f64:	                   movea.l 28(sp),a0
    8f68:	                   move.l (a0),d2
    8f6a:	                   movea.l 24(sp),a0
    8f6e:	                   move.l 8(a0),d0
    8f72:	                   move.l d0,-(sp)
    8f74:	                   jsr 177ae <__floatsisf>
    8f7a:	                   addq.l #4,sp
    8f7c:	                   move.l d0,-(sp)
    8f7e:	                   move.l d2,-(sp)
    8f80:	                   jsr 17aa2 <__subsf3>
    8f86:	                   addq.l #8,sp
    8f88:	                   move.l d0,-(sp)
    8f8a:	                   jsr 17746 <__fixsfsi>
    8f90:	                   addq.l #4,sp
    8f92:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8f96:	                   movea.l 28(sp),a0
    8f9a:	                   move.l 4(a0),d2
    8f9e:	                   movea.l 24(sp),a0
    8fa2:	                   move.l 12(a0),d0
    8fa6:	                   move.l d0,-(sp)
    8fa8:	                   jsr 177ae <__floatsisf>
    8fae:	                   addq.l #4,sp
    8fb0:	                   move.l d0,-(sp)
    8fb2:	                   move.l d2,-(sp)
    8fb4:	                   jsr 17aa2 <__subsf3>
    8fba:	                   addq.l #8,sp
    8fbc:	                   move.l d0,-(sp)
    8fbe:	                   jsr 17746 <__fixsfsi>
    8fc4:	                   addq.l #4,sp
    8fc6:	                   move.w d0,8(sp)

	if( x < 0)
    8fca:	                   tst.w 18(sp)
    8fce:	               ,-- bge.s 9002 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8fd0:	               |   movea.l 28(sp),a0
    8fd4:	               |   move.l (a0),d2
    8fd6:	               |   movea.l 24(sp),a0
    8fda:	               |   move.l 8(a0),d0
    8fde:	               |   move.l d0,-(sp)
    8fe0:	               |   jsr 177ae <__floatsisf>
    8fe6:	               |   addq.l #4,sp
    8fe8:	               |   move.l d0,-(sp)
    8fea:	               |   move.l d2,-(sp)
    8fec:	               |   jsr 17aa2 <__subsf3>
    8ff2:	               |   addq.l #8,sp
    8ff4:	               |   move.l d0,-(sp)
    8ff6:	               |   jsr 17746 <__fixsfsi>
    8ffc:	               |   addq.l #4,sp
    8ffe:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    9002:	               '-> movea.w 8(sp),a1
    9006:	                   movea.w 18(sp),a0
    900a:	                   pea 1 <_start+0x1>
    900e:	                   move.l a1,-(sp)
    9010:	                   move.l a0,-(sp)
    9012:	                   move.l 40(sp),-(sp)
    9016:	                   move.l 40(sp),-(sp)
    901a:	                   jsr 2cac <CstScaleSprite>
    9020:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9024:	                   movea.l 28(sp),a0
    9028:	                   move.l 118(a0),d0
    902c:	                   moveq #8,d1
    902e:	                   and.l d1,d0
    9030:	   ,-------------- beq.w 90fc <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9034:	   |               movea.l 24(sp),a0
    9038:	   |               move.l 8(a0),d0
    903c:	   |  ,----------- bpl.s 9078 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    903e:	   |  |            move.w 18(sp),d0
    9042:	   |  |            tst.w 6(sp)
    9046:	   |  |     ,----- beq.s 9060 <scaleSprite+0x10c>
    9048:	   |  |     |      movea.l 24(sp),a0
    904c:	   |  |     |      move.l (a0),d1
    904e:	   |  |     |      move.l d1,d2
    9050:	   |  |     |      movea.l 24(sp),a0
    9054:	   |  |     |      move.l 8(a0),d1
    9058:	   |  |     |      move.l d1,d1
    905a:	   |  |     |      movea.w d2,a0
    905c:	   |  |     |      suba.w d1,a0
    905e:	   |  |     |  ,-- bra.s 906e <scaleSprite+0x11a>
    9060:	   |  |     '--|-> movea.l 24(sp),a0
    9064:	   |  |        |   move.l 8(a0),d1
    9068:	   |  |        |   move.l d1,d1
    906a:	   |  |        |   movea.w d1,a0
    906c:	   |  |        |   addq.w #1,a0
    906e:	   |  |        '-> move.w d0,d1
    9070:	   |  |            sub.w a0,d1
    9072:	   |  |            move.w d1,16(sp)
    9076:	   |  |  ,-------- bra.s 90b0 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9078:	   |  '--|-------> move.w 18(sp),d1
    907c:	   |     |         tst.w 6(sp)
    9080:	   |     |  ,----- beq.s 909e <scaleSprite+0x14a>
    9082:	   |     |  |      movea.l 24(sp),a0
    9086:	   |     |  |      move.l (a0),d0
    9088:	   |     |  |      move.l d0,d2
    908a:	   |     |  |      movea.l 24(sp),a0
    908e:	   |     |  |      move.l 8(a0),d0
    9092:	   |     |  |      move.l d0,d0
    9094:	   |     |  |      movea.w d2,a0
    9096:	   |     |  |      suba.w d0,a0
    9098:	   |     |  |      move.w a0,d0
    909a:	   |     |  |      subq.w #1,d0
    909c:	   |     |  |  ,-- bra.s 90a8 <scaleSprite+0x154>
    909e:	   |     |  '--|-> movea.l 24(sp),a0
    90a2:	   |     |     |   move.l 8(a0),d0
    90a6:	   |     |     |   move.l d0,d0
    90a8:	   |     |     '-> movea.w d1,a0
    90aa:	   |     |         suba.w d0,a0
    90ac:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90b0:	   |     '-------> movea.l 28(sp),a0
    90b4:	   |               move.l 24(a0),d0
    90b8:	   |               move.l d0,d1
    90ba:	   |               movea.l 24(sp),a0
    90be:	   |               move.l 12(a0),d0
    90c2:	   |               move.l d0,d0
    90c4:	   |               sub.w d0,d1
    90c6:	   |               move.w 8(sp),d0
    90ca:	   |               movea.w d1,a0
    90cc:	   |               adda.w d0,a0
    90ce:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    90d2:	   |               movea.l 24(sp),a0
    90d6:	   |               move.l (a0),d0
    90d8:	   |               move.l d0,d0
    90da:	   |               move.w 16(sp),d1
    90de:	   |               add.w d0,d1
    90e0:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    90e4:	   |               movea.l 24(sp),a0
    90e8:	   |               move.l 4(a0),d0
    90ec:	   |               move.l d0,d0
    90ee:	   |               movea.w 14(sp),a0
    90f2:	   |               adda.w d0,a0
    90f4:	   |               move.w a0,10(sp)
    90f8:	,--|-------------- bra.w 91e4 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    90fc:	|  '-------------> move.w 18(sp),d1
    9100:	|                  move.l 1cc80 <cameraX>,d0
    9106:	|                  move.l d0,d0
    9108:	|                  sub.w d0,d1
    910a:	|                  move.w d1,18(sp)
		y -= cameraY;
    910e:	|                  move.w 8(sp),d1
    9112:	|                  move.l 1cc84 <cameraY>,d0
    9118:	|                  move.l d0,d0
    911a:	|                  sub.w d0,d1
    911c:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9120:	|                  movea.l 24(sp),a0
    9124:	|                  move.l 8(a0),d0
    9128:	|     ,----------- bpl.s 9164 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    912a:	|     |            move.w 18(sp),d0
    912e:	|     |            tst.w 6(sp)
    9132:	|     |     ,----- beq.s 914c <scaleSprite+0x1f8>
    9134:	|     |     |      movea.l 24(sp),a0
    9138:	|     |     |      move.l (a0),d1
    913a:	|     |     |      move.l d1,d2
    913c:	|     |     |      movea.l 24(sp),a0
    9140:	|     |     |      move.l 8(a0),d1
    9144:	|     |     |      move.l d1,d1
    9146:	|     |     |      movea.w d2,a0
    9148:	|     |     |      suba.w d1,a0
    914a:	|     |     |  ,-- bra.s 915a <scaleSprite+0x206>
    914c:	|     |     '--|-> movea.l 24(sp),a0
    9150:	|     |        |   move.l 8(a0),d1
    9154:	|     |        |   move.l d1,d1
    9156:	|     |        |   movea.w d1,a0
    9158:	|     |        |   addq.w #1,a0
    915a:	|     |        '-> move.w d0,d1
    915c:	|     |            sub.w a0,d1
    915e:	|     |            move.w d1,16(sp)
    9162:	|     |  ,-------- bra.s 919c <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9164:	|     '--|-------> move.w 18(sp),d1
    9168:	|        |         tst.w 6(sp)
    916c:	|        |  ,----- beq.s 918a <scaleSprite+0x236>
    916e:	|        |  |      movea.l 24(sp),a0
    9172:	|        |  |      move.l (a0),d0
    9174:	|        |  |      move.l d0,d2
    9176:	|        |  |      movea.l 24(sp),a0
    917a:	|        |  |      move.l 8(a0),d0
    917e:	|        |  |      move.l d0,d0
    9180:	|        |  |      movea.w d2,a0
    9182:	|        |  |      suba.w d0,a0
    9184:	|        |  |      move.w a0,d0
    9186:	|        |  |      subq.w #1,d0
    9188:	|        |  |  ,-- bra.s 9194 <scaleSprite+0x240>
    918a:	|        |  '--|-> movea.l 24(sp),a0
    918e:	|        |     |   move.l 8(a0),d0
    9192:	|        |     |   move.l d0,d0
    9194:	|        |     '-> movea.w d1,a0
    9196:	|        |         suba.w d0,a0
    9198:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    919c:	|        '-------> movea.l 28(sp),a0
    91a0:	|                  move.l 24(a0),d0
    91a4:	|                  move.l d0,d1
    91a6:	|                  movea.l 24(sp),a0
    91aa:	|                  move.l 12(a0),d0
    91ae:	|                  move.l d0,d0
    91b0:	|                  sub.w d0,d1
    91b2:	|                  move.w 8(sp),d0
    91b6:	|                  movea.w d1,a0
    91b8:	|                  adda.w d0,a0
    91ba:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    91be:	|                  movea.l 24(sp),a0
    91c2:	|                  move.l (a0),d0
    91c4:	|                  move.l d0,d0
    91c6:	|                  move.w 16(sp),d1
    91ca:	|                  add.w d0,d1
    91cc:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    91d0:	|                  movea.l 24(sp),a0
    91d4:	|                  move.l 4(a0),d0
    91d8:	|                  move.l d0,d0
    91da:	|                  movea.w 14(sp),a0
    91de:	|                  adda.w d0,a0
    91e0:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    91e4:	'----------------> move.l 1cb86 <input+0xa>,d1
    91ea:	                   moveq #0,d0
    91ec:	                   move.w 16(sp),d0
    91f0:	                   cmp.l d1,d0
    91f2:	            ,----- bgt.s 9228 <scaleSprite+0x2d4>
    91f4:	            |      move.l 1cb86 <input+0xa>,d1
    91fa:	            |      moveq #0,d0
    91fc:	            |      move.w 12(sp),d0
    9200:	            |      cmp.l d1,d0
    9202:	            +----- blt.s 9228 <scaleSprite+0x2d4>
    9204:	            |      move.l 1cb8a <input+0xe>,d1
    920a:	            |      moveq #0,d0
    920c:	            |      move.w 14(sp),d0
    9210:	            |      cmp.l d1,d0
    9212:	            +----- bgt.s 9228 <scaleSprite+0x2d4>
    9214:	            |      move.l 1cb8a <input+0xe>,d1
    921a:	            |      moveq #0,d0
    921c:	            |      move.w 10(sp),d0
    9220:	            |      cmp.l d1,d0
    9222:	            +----- blt.s 9228 <scaleSprite+0x2d4>
		return TRUE;
    9224:	            |      moveq #1,d0
    9226:	            |  ,-- bra.s 922a <scaleSprite+0x2d6>
	}
	return FALSE;
    9228:	            '--|-> clr.w d0
    922a:	               '-> move.l (sp)+,d2
    922c:	                   lea 16(sp),sp
    9230:	                   rts

00009232 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9232:	    move.l 4(sp),d0
    9236:	,-- bpl.s 923a <TF_abs+0x8>
    9238:	|   neg.l d0
}
    923a:	'-> rts

0000923c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    923c:	             lea -28(sp),sp
    9240:	             move.l a6,-(sp)
    9242:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9244:	             move.l #132,28(sp)
    924c:	             clr.l 24(sp)
    9250:	             move.l 1cbca <SysBase>,d0
    9256:	             movea.l d0,a6
    9258:	             move.l 28(sp),d0
    925c:	             move.l 24(sp),d1
    9260:	             jsr -684(a6)
    9264:	             move.l d0,20(sp)
    9268:	             move.l 20(sp),d0
    926c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9270:	         ,-- bne.s 9278 <addPerson+0x3c>
    9272:	         |   clr.w d0
    9274:	,--------|-- bra.w 94a8 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9278:	|        '-> move.l 48(sp),-(sp)
    927c:	|            jsr d6a0 <loadObjectType>
    9282:	|            addq.l #4,sp
    9284:	|            movea.l 16(sp),a0
    9288:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    928c:	|            movea.l 16(sp),a0
    9290:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9298:	|            movea.l 16(sp),a0
    929c:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    92a0:	|            movea.l 16(sp),a0
    92a4:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    92a8:	|            move.l 44(sp),-(sp)
    92ac:	|            jsr 177ae <__floatsisf>
    92b2:	|            addq.l #4,sp
    92b4:	|            move.l d0,d2
    92b6:	|            move.l 40(sp),-(sp)
    92ba:	|            jsr 177ae <__floatsisf>
    92c0:	|            addq.l #4,sp
    92c2:	|            move.l d2,-(sp)
    92c4:	|            move.l d0,-(sp)
    92c6:	|            move.l 24(sp),-(sp)
    92ca:	|            jsr adec <moveAndScale>
    92d0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    92d4:	|            movea.l 16(sp),a0
    92d8:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    92dc:	|            movea.l 16(sp),a0
    92e0:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    92e6:	|            movea.l 16(sp),a0
    92ea:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    92f0:	|            movea.l 16(sp),a0
    92f4:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    92f8:	|            movea.l 16(sp),a0
    92fc:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9300:	|            movea.l 16(sp),a0
    9304:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    930a:	|            movea.l 16(sp),a0
    930e:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9312:	|            movea.l 16(sp),a0
    9316:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    931e:	|            movea.l 16(sp),a0
    9322:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    932a:	|            movea.l 16(sp),a0
    932e:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9332:	|            movea.l 16(sp),a0
    9336:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    933a:	|            movea.l 16(sp),a0
    933e:	|            movea.l 114(a0),a0
    9342:	|            move.l 24(a0),d0
    9346:	|            movea.l 16(sp),a0
    934a:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    934e:	|            movea.l 16(sp),a0
    9352:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9356:	|            movea.l 16(sp),a0
    935a:	|            movea.l 114(a0),a0
    935e:	|            move.l 32(a0),d0
    9362:	|            movea.l 16(sp),a0
    9366:	|            move.l d0,122(a0)
    newPerson->r = 0;
    936a:	|            movea.l 16(sp),a0
    936e:	|            clr.b 126(a0)
    newPerson->g = 0;
    9372:	|            movea.l 16(sp),a0
    9376:	|            clr.b 127(a0)
    newPerson->b = 0;
    937a:	|            movea.l 16(sp),a0
    937e:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9382:	|            movea.l 16(sp),a0
    9386:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    938a:	|            movea.l 16(sp),a0
    938e:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9392:	|            movea.l 16(sp),a0
    9396:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    939c:	|            clr.l -(sp)
    939e:	|            move.l 20(sp),-(sp)
    93a2:	|            jsr 41de <setFrames>
    93a8:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    93aa:	|            movea.l 52(sp),a0
    93ae:	|            movea.l (a0),a0
    93b0:	|            movea.l (a0),a0
    93b2:	|            movea.l 4(a0),a0
    93b6:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    93ba:	|     ,----- bpl.s 93c4 <addPerson+0x188>
    93bc:	|     |      move.l 12(sp),d0
    93c0:	|     |      neg.l d0
    93c2:	|     |  ,-- bra.s 93c6 <addPerson+0x18a>
    93c4:	|     '--|-> moveq #1,d0
    93c6:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    93ca:	|            movea.l 52(sp),a0
    93ce:	|            movea.l (a0),a0
    93d0:	|            movea.l (a0),a0
    93d2:	|            movea.l (a0),a0
    93d4:	|            move.l 8(a0),d0
    93d8:	|            cmp.l 8(sp),d0
    93dc:	|     ,----- bgt.s 940e <addPerson+0x1d2>
        if (fNumSigned < 0) {
    93de:	|     |      tst.l 12(sp)
    93e2:	|     |  ,-- bge.s 93f0 <addPerson+0x1b4>
            newPerson->height = 5;
    93e4:	|     |  |   movea.l 16(sp),a0
    93e8:	|     |  |   moveq #5,d0
    93ea:	|     |  |   move.l d0,20(a0)
    93ee:	|  ,--|--|-- bra.s 943a <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    93f0:	|  |  |  '-> movea.l 52(sp),a0
    93f4:	|  |  |      movea.l (a0),a0
    93f6:	|  |  |      movea.l (a0),a0
    93f8:	|  |  |      movea.l (a0),a0
    93fa:	|  |  |      movea.l 16(a0),a0
    93fe:	|  |  |      move.l 12(a0),d0
    9402:	|  |  |      addq.l #5,d0
    9404:	|  |  |      movea.l 16(sp),a0
    9408:	|  |  |      move.l d0,20(a0)
    940c:	|  +--|----- bra.s 943a <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    940e:	|  |  '----> movea.l 52(sp),a0
    9412:	|  |         movea.l (a0),a0
    9414:	|  |         movea.l (a0),a0
    9416:	|  |         movea.l (a0),a0
    9418:	|  |         movea.l 16(a0),a0
    941c:	|  |         move.l 8(sp),d1
    9420:	|  |         move.l d1,d0
    9422:	|  |         lsl.l #3,d0
    9424:	|  |         sub.l d1,d0
    9426:	|  |         add.l d0,d0
    9428:	|  |         add.l d0,d0
    942a:	|  |         adda.l d0,a0
    942c:	|  |         move.l 12(a0),d0
    9430:	|  |         addq.l #5,d0
    9432:	|  |         movea.l 16(sp),a0
    9436:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    943a:	|  '-------> move.l #117802,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9442:	|        ,-- bra.s 9452 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9444:	|     ,--|-> movea.l 32(sp),a0
    9448:	|     |  |   move.l (a0),d0
    944a:	|     |  |   moveq #36,d1
    944c:	|     |  |   add.l d0,d1
    944e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9452:	|     |  '-> movea.l 32(sp),a0
    9456:	|     |      move.l (a0),d0
    9458:	|     |  ,-- beq.s 9480 <addPerson+0x244>
    945a:	|     |  |   movea.l 32(sp),a0
    945e:	|     |  |   movea.l (a0),a0
    9460:	|     |  |   move.l 4(a0),d2
    9464:	|     |  |   move.l 44(sp),-(sp)
    9468:	|     |  |   jsr 177ae <__floatsisf>
    946e:	|     |  |   addq.l #4,sp
    9470:	|     |  |   move.l d0,-(sp)
    9472:	|     |  |   move.l d2,-(sp)
    9474:	|     |  |   jsr 179d4 <__ltsf2>
    947a:	|     |  |   addq.l #8,sp
    947c:	|     |  |   tst.l d0
    947e:	|     '--|-- blt.s 9444 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9480:	|        '-> movea.l 32(sp),a0
    9484:	|            move.l (a0),d0
    9486:	|            movea.l 16(sp),a0
    948a:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    948e:	|            movea.l 32(sp),a0
    9492:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9496:	|            movea.l 16(sp),a0
    949a:	|            move.l 114(a0),d0
    949e:	|            sne d0
    94a0:	|            neg.b d0
    94a2:	|            move.b d0,d0
    94a4:	|            andi.w #255,d0
}
    94a8:	'----------> move.l (sp)+,d2
    94aa:	             movea.l (sp)+,a6
    94ac:	             lea 28(sp),sp
    94b0:	             rts

000094b2 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    94b2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94b4:	       move.l 8(sp),-(sp)
    94b8:	       jsr a642 <findPerson>
    94be:	       addq.l #4,sp
    94c0:	       move.l d0,(sp)
    if (moveMe) {
    94c2:	,----- beq.s 94f6 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    94c4:	|      movea.l (sp),a0
    94c6:	|      move.l 68(a0),d0
    94ca:	|  ,-- beq.s 94dc <animatePerson+0x2a>
    94cc:	|  |   movea.l (sp),a0
    94ce:	|  |   move.l 68(a0),d0
    94d2:	|  |   move.l d0,-(sp)
    94d4:	|  |   jsr 503c <abortFunction>
    94da:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    94dc:	|  '-> movea.l (sp),a0
    94de:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    94e2:	|      movea.l (sp),a0
    94e4:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    94e8:	|      movea.l (sp),a0
    94ea:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    94ee:	|      movea.l (sp),a0
    94f0:	|      move.l 12(sp),72(a0)
    }
}
    94f6:	'----> nop
    94f8:	       addq.l #4,sp
    94fa:	       rts

000094fc <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    94fc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94fe:	       move.l 8(sp),-(sp)
    9502:	       jsr a642 <findPerson>
    9508:	       addq.l #4,sp
    950a:	       move.l d0,(sp)
    if (moveMe) {
    950c:	,----- beq.s 954e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    950e:	|      movea.l (sp),a0
    9510:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9514:	|      movea.l (sp),a0
    9516:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    951c:	|      move.l (sp),-(sp)
    951e:	|      jsr af7a <rethinkAngle>
    9524:	|      addq.l #4,sp
        if (moveMe->walking) {
    9526:	|      movea.l (sp),a0
    9528:	|      move.w 64(a0),d0
    952c:	|  ,-- beq.s 9540 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    952e:	|  |   pea 1 <_start+0x1>
    9532:	|  |   move.l 4(sp),-(sp)
    9536:	|  |   jsr 41de <setFrames>
    953c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    953e:	+--|-- bra.s 954e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9540:	|  '-> clr.l -(sp)
    9542:	|      move.l 4(sp),-(sp)
    9546:	|      jsr 41de <setFrames>
    954c:	|      addq.l #8,sp
}
    954e:	'----> nop
    9550:	       addq.l #4,sp
    9552:	       rts

00009554 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9554:	             lea -36(sp),sp
    9558:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    955a:	             movea.l 44(sp),a0
    955e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9564:	             moveq #12,d0
    9566:	             move.l d0,28(sp)
    956a:	             clr.l 24(sp)
    956e:	             move.l 1cbca <SysBase>,d0
    9574:	             movea.l d0,a6
    9576:	             move.l 28(sp),d0
    957a:	             move.l 24(sp),d1
    957e:	             jsr -684(a6)
    9582:	             move.l d0,20(sp)
    9586:	             move.l 20(sp),d0
    958a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    958e:	         ,-- bne.s 95a4 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9590:	         |   pea 192e7 <PutChar+0x14c9>
    9596:	         |   jsr 1737c <KPrintF>
    959c:	         |   addq.l #4,sp
		return NULL;
    959e:	         |   moveq #0,d0
    95a0:	,--------|-- bra.w 96f6 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    95a4:	|        '-> movea.l 44(sp),a0
    95a8:	|            move.l (a0),d0
    95aa:	|            movea.l 16(sp),a0
    95ae:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    95b0:	|            movea.l 16(sp),a0
    95b4:	|            movea.l (a0),a0
    95b6:	|            move.l 4(a0),d0
    95ba:	|            addq.l #1,d0
    95bc:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95c0:	|            movea.l 16(sp),a0
    95c4:	|            move.l 32(sp),8(a0)

	if (num) {
    95ca:	|  ,-------- beq.w 96ea <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    95ce:	|  |         move.l 32(sp),d1
    95d2:	|  |         move.l d1,d0
    95d4:	|  |         add.l d0,d0
    95d6:	|  |         add.l d1,d0
    95d8:	|  |         add.l d0,d0
    95da:	|  |         add.l d0,d0
    95dc:	|  |         move.l d0,12(sp)
    95e0:	|  |         clr.l 8(sp)
    95e4:	|  |         move.l 1cbca <SysBase>,d0
    95ea:	|  |         movea.l d0,a6
    95ec:	|  |         move.l 12(sp),d0
    95f0:	|  |         move.l 8(sp),d1
    95f4:	|  |         jsr -684(a6)
    95f8:	|  |         move.l d0,4(sp)
    95fc:	|  |         move.l 4(sp),d0
    9600:	|  |         movea.l 16(sp),a0
    9604:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9608:	|  |         movea.l 16(sp),a0
    960c:	|  |         move.l 4(a0),d0
    9610:	|  |     ,-- bne.s 9626 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9612:	|  |     |   pea 192e7 <PutChar+0x14c9>
    9618:	|  |     |   jsr 1737c <KPrintF>
    961e:	|  |     |   addq.l #4,sp
			return NULL;
    9620:	|  |     |   moveq #0,d0
    9622:	+--|-----|-- bra.w 96f6 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9626:	|  |     '-> clr.l 36(sp)
    962a:	|  |     ,-- bra.w 96dc <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    962e:	|  |  ,--|-> movea.l 44(sp),a0
    9632:	|  |  |  |   movea.l 4(a0),a0
    9636:	|  |  |  |   move.l 36(sp),d1
    963a:	|  |  |  |   move.l d1,d0
    963c:	|  |  |  |   add.l d0,d0
    963e:	|  |  |  |   add.l d1,d0
    9640:	|  |  |  |   add.l d0,d0
    9642:	|  |  |  |   add.l d0,d0
    9644:	|  |  |  |   lea (0,a0,d0.l),a1
    9648:	|  |  |  |   movea.l 16(sp),a0
    964c:	|  |  |  |   movea.l 4(a0),a0
    9650:	|  |  |  |   move.l 36(sp),d1
    9654:	|  |  |  |   move.l d1,d0
    9656:	|  |  |  |   add.l d0,d0
    9658:	|  |  |  |   add.l d1,d0
    965a:	|  |  |  |   add.l d0,d0
    965c:	|  |  |  |   add.l d0,d0
    965e:	|  |  |  |   adda.l d0,a0
    9660:	|  |  |  |   move.l (a1),d0
    9662:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9664:	|  |  |  |   movea.l 44(sp),a0
    9668:	|  |  |  |   movea.l 4(a0),a0
    966c:	|  |  |  |   move.l 36(sp),d1
    9670:	|  |  |  |   move.l d1,d0
    9672:	|  |  |  |   add.l d0,d0
    9674:	|  |  |  |   add.l d1,d0
    9676:	|  |  |  |   add.l d0,d0
    9678:	|  |  |  |   add.l d0,d0
    967a:	|  |  |  |   lea (0,a0,d0.l),a1
    967e:	|  |  |  |   movea.l 16(sp),a0
    9682:	|  |  |  |   movea.l 4(a0),a0
    9686:	|  |  |  |   move.l 36(sp),d1
    968a:	|  |  |  |   move.l d1,d0
    968c:	|  |  |  |   add.l d0,d0
    968e:	|  |  |  |   add.l d1,d0
    9690:	|  |  |  |   add.l d0,d0
    9692:	|  |  |  |   add.l d0,d0
    9694:	|  |  |  |   adda.l d0,a0
    9696:	|  |  |  |   move.l 4(a1),d0
    969a:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    969e:	|  |  |  |   movea.l 44(sp),a0
    96a2:	|  |  |  |   movea.l 4(a0),a0
    96a6:	|  |  |  |   move.l 36(sp),d1
    96aa:	|  |  |  |   move.l d1,d0
    96ac:	|  |  |  |   add.l d0,d0
    96ae:	|  |  |  |   add.l d1,d0
    96b0:	|  |  |  |   add.l d0,d0
    96b2:	|  |  |  |   add.l d0,d0
    96b4:	|  |  |  |   lea (0,a0,d0.l),a1
    96b8:	|  |  |  |   movea.l 16(sp),a0
    96bc:	|  |  |  |   movea.l 4(a0),a0
    96c0:	|  |  |  |   move.l 36(sp),d1
    96c4:	|  |  |  |   move.l d1,d0
    96c6:	|  |  |  |   add.l d0,d0
    96c8:	|  |  |  |   add.l d1,d0
    96ca:	|  |  |  |   add.l d0,d0
    96cc:	|  |  |  |   add.l d0,d0
    96ce:	|  |  |  |   adda.l d0,a0
    96d0:	|  |  |  |   move.l 8(a1),d0
    96d4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    96d8:	|  |  |  |   addq.l #1,36(sp)
    96dc:	|  |  |  '-> move.l 36(sp),d0
    96e0:	|  |  |      cmp.l 32(sp),d0
    96e4:	|  |  '----- blt.w 962e <copyAnim+0xda>
    96e8:	|  |     ,-- bra.s 96f2 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    96ea:	|  '-----|-> movea.l 16(sp),a0
    96ee:	|        |   clr.l 4(a0)
	}

	return newAnim;
    96f2:	|        '-> move.l 16(sp),d0
}
    96f6:	'----------> movea.l (sp)+,a6
    96f8:	             lea 36(sp),sp
    96fc:	             rts

000096fe <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    96fe:	                lea -44(sp),sp
    9702:	                move.l a6,-(sp)
    9704:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9706:	                moveq #12,d0
    9708:	                move.l d0,40(sp)
    970c:	                clr.l 36(sp)
    9710:	                move.l 1cbca <SysBase>,d0
    9716:	                movea.l d0,a6
    9718:	                move.l 40(sp),d0
    971c:	                move.l 36(sp),d1
    9720:	                jsr -684(a6)
    9724:	                move.l d0,32(sp)
    9728:	                move.l 32(sp),d0
    972c:	                move.l d0,28(sp)
	if( !newP) {
    9730:	            ,-- bne.s 9746 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9732:	            |   pea 19308 <PutChar+0x14ea>
    9738:	            |   jsr 1737c <KPrintF>
    973e:	            |   addq.l #4,sp
		return NULL;
    9740:	            |   moveq #0,d0
    9742:	,-----------|-- bra.w 9916 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9746:	|           '-> movea.l 28(sp),a0
    974a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9750:	|               move.l 56(sp),d1
    9754:	|               move.l d1,d0
    9756:	|               add.l d0,d0
    9758:	|               add.l d1,d0
    975a:	|               add.l d0,d0
    975c:	|               add.l d0,d0
    975e:	|               move.l d0,24(sp)
    9762:	|               clr.l 20(sp)
    9766:	|               move.l 1cbca <SysBase>,d0
    976c:	|               movea.l d0,a6
    976e:	|               move.l 24(sp),d0
    9772:	|               move.l 20(sp),d1
    9776:	|               jsr -684(a6)
    977a:	|               move.l d0,16(sp)
    977e:	|               move.l 16(sp),d0
    9782:	|               movea.l 28(sp),a0
    9786:	|               move.l d0,4(a0)
	if( !newP->frames) {
    978a:	|               movea.l 28(sp),a0
    978e:	|               move.l 4(a0),d0
    9792:	|           ,-- bne.s 97a8 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9794:	|           |   pea 19308 <PutChar+0x14ea>
    979a:	|           |   jsr 1737c <KPrintF>
    97a0:	|           |   addq.l #4,sp
		return NULL;
    97a2:	|           |   moveq #0,d0
    97a4:	+-----------|-- bra.w 9916 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    97a8:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    97ae:	|               movea.l 60(sp),a0
    97b2:	|               move.l (a0),44(sp)
	while (a) {
    97b6:	|     ,-------- bra.w 990a <createPersonaAnim+0x20c>
		a --;
    97ba:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97be:	|  |  |         movea.l 28(sp),a0
    97c2:	|  |  |         movea.l 4(a0),a0
    97c6:	|  |  |         move.l 48(sp),d1
    97ca:	|  |  |         move.l d1,d0
    97cc:	|  |  |         add.l d0,d0
    97ce:	|  |  |         add.l d1,d0
    97d0:	|  |  |         add.l d0,d0
    97d2:	|  |  |         add.l d0,d0
    97d4:	|  |  |         adda.l d0,a0
    97d6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    97da:	|  |  |         movea.l 44(sp),a0
    97de:	|  |  |         move.l (a0),d0
    97e0:	|  |  |         moveq #5,d1
    97e2:	|  |  |         cmp.l d0,d1
    97e4:	|  |  |     ,-- bne.s 9810 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    97e6:	|  |  |     |   movea.l 28(sp),a0
    97ea:	|  |  |     |   movea.l 4(a0),a0
    97ee:	|  |  |     |   move.l 48(sp),d1
    97f2:	|  |  |     |   move.l d1,d0
    97f4:	|  |  |     |   add.l d0,d0
    97f6:	|  |  |     |   add.l d1,d0
    97f8:	|  |  |     |   add.l d0,d0
    97fa:	|  |  |     |   add.l d0,d0
    97fc:	|  |  |     |   lea (0,a0,d0.l),a1
    9800:	|  |  |     |   movea.l 44(sp),a0
    9804:	|  |  |     |   move.l 4(a0),d0
    9808:	|  |  |     |   move.l d0,8(a1)
    980c:	|  |  |  ,--|-- bra.w 98b8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9810:	|  |  |  |  '-> movea.l 44(sp),a0
    9814:	|  |  |  |      move.l (a0),d0
    9816:	|  |  |  |      moveq #2,d1
    9818:	|  |  |  |      cmp.l d0,d1
    981a:	|  |  |  |  ,-- bne.s 9846 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    981c:	|  |  |  |  |   movea.l 44(sp),a0
    9820:	|  |  |  |  |   move.l 4(a0),d2
    9824:	|  |  |  |  |   movea.l 28(sp),a0
    9828:	|  |  |  |  |   movea.l 4(a0),a0
    982c:	|  |  |  |  |   move.l 48(sp),d1
    9830:	|  |  |  |  |   move.l d1,d0
    9832:	|  |  |  |  |   add.l d0,d0
    9834:	|  |  |  |  |   add.l d1,d0
    9836:	|  |  |  |  |   add.l d0,d0
    9838:	|  |  |  |  |   add.l d0,d0
    983a:	|  |  |  |  |   adda.l d0,a0
    983c:	|  |  |  |  |   move.l d2,d0
    983e:	|  |  |  |  |   neg.l d0
    9840:	|  |  |  |  |   move.l d0,8(a0)
    9844:	|  |  |  +--|-- bra.s 98b8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9846:	|  |  |  |  '-> movea.l 44(sp),a0
    984a:	|  |  |  |      move.l (a0),d0
    984c:	|  |  |  |      moveq #6,d1
    984e:	|  |  |  |      cmp.l d0,d1
    9850:	|  |  |  |  ,-- bne.s 9898 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9852:	|  |  |  |  |   movea.l 44(sp),a0
    9856:	|  |  |  |  |   movea.l 4(a0),a0
    985a:	|  |  |  |  |   move.l (a0),d0
    985c:	|  |  |  |  |   move.l d0,-(sp)
    985e:	|  |  |  |  |   pea 1 <_start+0x1>
    9862:	|  |  |  |  |   lea 20(sp),a0
    9866:	|  |  |  |  |   move.l a0,-(sp)
    9868:	|  |  |  |  |   jsr 1489c <getValueType>
    986e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9872:	|  |  |  |  |   movea.l 44(sp),a0
    9876:	|  |  |  |  |   movea.l 4(a0),a0
    987a:	|  |  |  |  |   movea.l (a0),a0
    987c:	|  |  |  |  |   move.l 8(a0),d0
    9880:	|  |  |  |  |   move.l d0,-(sp)
    9882:	|  |  |  |  |   pea 1 <_start+0x1>
    9886:	|  |  |  |  |   lea 16(sp),a0
    988a:	|  |  |  |  |   move.l a0,-(sp)
    988c:	|  |  |  |  |   jsr 1489c <getValueType>
    9892:	|  |  |  |  |   lea 12(sp),sp
    9896:	|  |  |  +--|-- bra.s 98b8 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9898:	|  |  |  |  '-> move.l 44(sp),d0
    989c:	|  |  |  |      move.l d0,-(sp)
    989e:	|  |  |  |      pea 1 <_start+0x1>
    98a2:	|  |  |  |      lea 20(sp),a0
    98a6:	|  |  |  |      move.l a0,-(sp)
    98a8:	|  |  |  |      jsr 1489c <getValueType>
    98ae:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    98b2:	|  |  |  |      moveq #1,d0
    98b4:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    98b8:	|  |  |  '----> move.l 60(sp),-(sp)
    98bc:	|  |  |         jsr 15220 <trimStack>
    98c2:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    98c4:	|  |  |         movea.l 28(sp),a0
    98c8:	|  |  |         movea.l 4(a0),a0
    98cc:	|  |  |         move.l 48(sp),d1
    98d0:	|  |  |         move.l d1,d0
    98d2:	|  |  |         add.l d0,d0
    98d4:	|  |  |         add.l d1,d0
    98d6:	|  |  |         add.l d0,d0
    98d8:	|  |  |         add.l d0,d0
    98da:	|  |  |         adda.l d0,a0
    98dc:	|  |  |         move.l 12(sp),d0
    98e0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    98e2:	|  |  |         movea.l 28(sp),a0
    98e6:	|  |  |         movea.l 4(a0),a0
    98ea:	|  |  |         move.l 48(sp),d1
    98ee:	|  |  |         move.l d1,d0
    98f0:	|  |  |         add.l d0,d0
    98f2:	|  |  |         add.l d1,d0
    98f4:	|  |  |         add.l d0,d0
    98f6:	|  |  |         add.l d0,d0
    98f8:	|  |  |         adda.l d0,a0
    98fa:	|  |  |         move.l 8(sp),d0
    98fe:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9902:	|  |  |         movea.l 60(sp),a0
    9906:	|  |  |         move.l (a0),44(sp)
	while (a) {
    990a:	|  |  '-------> tst.l 48(sp)
    990e:	|  '----------- bne.w 97ba <createPersonaAnim+0xbc>
	}

	return newP;
    9912:	|               move.l 28(sp),d0
}
    9916:	'-------------> move.l (sp)+,d2
    9918:	                movea.l (sp)+,a6
    991a:	                lea 44(sp),sp
    991e:	                rts

00009920 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9920:	       lea -12(sp),sp
    9924:	       move.l a6,-(sp)

	if(orig->theSprites)
    9926:	       movea.l 20(sp),a0
    992a:	       move.l (a0),d0
    992c:	   ,-- beq.s 9956 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    992e:	   |   movea.l 20(sp),a0
    9932:	   |   movea.l (a0),a0
    9934:	   |   move.l 4(a0),d0
    9938:	   |   subq.l #1,d0
    993a:	   |   move.l d0,4(a0)
    993e:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9944:	   +-- bne.s 9956 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9946:	   |   movea.l 20(sp),a0
    994a:	   |   move.l (a0),d0
    994c:	   |   move.l d0,-(sp)
    994e:	   |   jsr 8a04 <forgetSpriteBank>
    9954:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9956:	   '-> tst.l 20(sp)
    995a:	,----- beq.s 999a <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    995c:	|      movea.l 20(sp),a0
    9960:	|      move.l 8(a0),d0
    9964:	|  ,-- beq.s 9980 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9966:	|  |   movea.l 20(sp),a0
    996a:	|  |   move.l 4(a0),8(sp)
    9970:	|  |   move.l 1cbca <SysBase>,d0
    9976:	|  |   movea.l d0,a6
    9978:	|  |   movea.l 8(sp),a1
    997c:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9980:	|  '-> move.l 20(sp),4(sp)
    9986:	|      move.l 1cbca <SysBase>,d0
    998c:	|      movea.l d0,a6
    998e:	|      movea.l 4(sp),a1
    9992:	|      jsr -690(a6)
		orig = NULL;
    9996:	|      clr.l 20(sp)
	}	
	
}
    999a:	'----> nop
    999c:	       movea.l (sp)+,a6
    999e:	       lea 12(sp),sp
    99a2:	       rts

000099a4 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    99a4:	          lea -124(sp),sp
    99a8:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    99ac:	          movea.l 152(sp),a0
    99b0:	          move.l 56(a0),d1
    99b4:	          movea.l 152(sp),a0
    99b8:	          move.l 60(a0),d0
    99bc:	          cmp.l d1,d0
    99be:	      ,-- bne.s 99ee <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99c0:	      |   movea.l 152(sp),a0
    99c4:	      |   moveq #-1,d0
    99c6:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    99ca:	      |   movea.l 152(sp),a0
    99ce:	      |   move.l 40(a0),d0
    99d2:	      |   movea.l 152(sp),a0
    99d6:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    99da:	      |   movea.l 152(sp),a0
    99de:	      |   move.l 44(a0),d0
    99e2:	      |   movea.l 152(sp),a0
    99e6:	      |   move.l d0,52(a0)
    99ea:	   ,--|-- bra.w 9f54 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    99ee:	   |  '-> movea.l 1cce2 <currentFloor>,a0
    99f4:	   |      move.l 16(a0),d1
    99f8:	   |      movea.l 152(sp),a0
    99fc:	   |      move.l 56(a0),d0
    9a00:	   |      add.l d0,d0
    9a02:	   |      add.l d0,d0
    9a04:	   |      movea.l d1,a0
    9a06:	   |      adda.l d0,a0
    9a08:	   |      move.l (a0),d1
    9a0a:	   |      movea.l 152(sp),a0
    9a0e:	   |      move.l 60(a0),d0
    9a12:	   |      add.l d0,d0
    9a14:	   |      add.l d0,d0
    9a16:	   |      movea.l d1,a0
    9a18:	   |      adda.l d0,a0
    9a1a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a1e:	   |      moveq #-1,d0
    9a20:	   |      cmp.l 144(sp),d0
    9a24:	   |  ,-- bne.s 9a2c <doBorderStuff+0x88>
    9a26:	   |  |   clr.w d0
    9a28:	,--|--|-- bra.w a054 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a2c:	|  |  '-> movea.l 1cce2 <currentFloor>,a0
    9a32:	|  |      move.l 12(a0),d1
    9a36:	|  |      move.l 144(sp),d0
    9a3a:	|  |      lsl.l #3,d0
    9a3c:	|  |      add.l d0,d1
    9a3e:	|  |      movea.l 1cce2 <currentFloor>,a0
    9a44:	|  |      movea.l 12(a0),a1
    9a48:	|  |      movea.l 152(sp),a0
    9a4c:	|  |      move.l 56(a0),d0
    9a50:	|  |      lsl.l #3,d0
    9a52:	|  |      add.l a1,d0
    9a54:	|  |      lea 40(sp),a0
    9a58:	|  |      move.l a0,-(sp)
    9a5a:	|  |      lea 48(sp),a0
    9a5e:	|  |      move.l a0,-(sp)
    9a60:	|  |      move.l d1,-(sp)
    9a62:	|  |      move.l d0,-(sp)
    9a64:	|  |      jsr 165e2 <getMatchingCorners>
    9a6a:	|  |      lea 16(sp),sp
    9a6e:	|  |      tst.w d0
    9a70:	|  |  ,-- bne.s 9a86 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9a72:	|  |  |   pea 19332 <PutChar+0x1514>
    9a78:	|  |  |   jsr 1737c <KPrintF>
    9a7e:	|  |  |   addq.l #4,sp
            return FALSE;
    9a80:	|  |  |   clr.w d0
    9a82:	+--|--|-- bra.w a054 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9a86:	|  |  '-> movea.l 152(sp),a0
    9a8a:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9a90:	|  |      movea.l 152(sp),a0
    9a94:	|  |      move.l (a0),d0
    9a96:	|  |      move.l d0,-(sp)
    9a98:	|  |      jsr 17746 <__fixsfsi>
    9a9e:	|  |      addq.l #4,sp
    9aa0:	|  |      move.l d0,140(sp)
    9aa4:	|  |      movea.l 152(sp),a0
    9aa8:	|  |      move.l 4(a0),d0
    9aac:	|  |      move.l d0,-(sp)
    9aae:	|  |      jsr 17746 <__fixsfsi>
    9ab4:	|  |      addq.l #4,sp
    9ab6:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9aba:	|  |      movea.l 152(sp),a0
    9abe:	|  |      move.l 40(a0),132(sp)
    9ac4:	|  |      movea.l 152(sp),a0
    9ac8:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ace:	|  |      movea.l 1cce2 <currentFloor>,a0
    9ad4:	|  |      move.l 4(a0),d1
    9ad8:	|  |      move.l 44(sp),d0
    9adc:	|  |      lsl.l #3,d0
    9ade:	|  |      movea.l d1,a0
    9ae0:	|  |      adda.l d0,a0
    9ae2:	|  |      move.l (a0),124(sp)
    9ae6:	|  |      movea.l 1cce2 <currentFloor>,a0
    9aec:	|  |      move.l 4(a0),d1
    9af0:	|  |      move.l 44(sp),d0
    9af4:	|  |      lsl.l #3,d0
    9af6:	|  |      movea.l d1,a0
    9af8:	|  |      adda.l d0,a0
    9afa:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9b00:	|  |      movea.l 1cce2 <currentFloor>,a0
    9b06:	|  |      move.l 4(a0),d1
    9b0a:	|  |      move.l 40(sp),d0
    9b0e:	|  |      lsl.l #3,d0
    9b10:	|  |      movea.l d1,a0
    9b12:	|  |      adda.l d0,a0
    9b14:	|  |      move.l (a0),116(sp)
    9b18:	|  |      movea.l 1cce2 <currentFloor>,a0
    9b1e:	|  |      move.l 4(a0),d1
    9b22:	|  |      move.l 40(sp),d0
    9b26:	|  |      lsl.l #3,d0
    9b28:	|  |      movea.l d1,a0
    9b2a:	|  |      adda.l d0,a0
    9b2c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b32:	|  |      move.l 140(sp),d0
    9b36:	|  |      sub.l 132(sp),d0
    9b3a:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b3e:	|  |      move.l 136(sp),d0
    9b42:	|  |      sub.l 128(sp),d0
    9b46:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b4a:	|  |      move.l 116(sp),d0
    9b4e:	|  |      sub.l 124(sp),d0
    9b52:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b56:	|  |      move.l 112(sp),d0
    9b5a:	|  |      sub.l 120(sp),d0
    9b5e:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9b62:	|  |      move.l 124(sp),d0
    9b66:	|  |      sub.l 140(sp),d0
    9b6a:	|  |      move.l 104(sp),-(sp)
    9b6e:	|  |      move.l d0,-(sp)
    9b70:	|  |      jsr 17d08 <__mulsi3>
    9b76:	|  |      addq.l #8,sp
    9b78:	|  |      move.l d0,d2
    9b7a:	|  |      move.l 120(sp),d0
    9b7e:	|  |      sub.l 136(sp),d0
    9b82:	|  |      move.l 108(sp),-(sp)
    9b86:	|  |      move.l d0,-(sp)
    9b88:	|  |      jsr 17d08 <__mulsi3>
    9b8e:	|  |      addq.l #8,sp
    9b90:	|  |      move.l d2,d1
    9b92:	|  |      sub.l d0,d1
    9b94:	|  |      move.l d1,-(sp)
    9b96:	|  |      jsr 1776e <__floatsidf>
    9b9c:	|  |      addq.l #4,sp
    9b9e:	|  |      move.l d0,32(sp)
    9ba2:	|  |      move.l d1,36(sp)
    9ba6:	|  |      move.l 32(sp),88(sp)
    9bac:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9bb2:	|  |      move.l 96(sp),-(sp)
    9bb6:	|  |      move.l 112(sp),-(sp)
    9bba:	|  |      jsr 17d08 <__mulsi3>
    9bc0:	|  |      addq.l #8,sp
    9bc2:	|  |      move.l d0,d2
    9bc4:	|  |      move.l 100(sp),-(sp)
    9bc8:	|  |      move.l 108(sp),-(sp)
    9bcc:	|  |      jsr 17d08 <__mulsi3>
    9bd2:	|  |      addq.l #8,sp
    9bd4:	|  |      move.l d2,d1
    9bd6:	|  |      sub.l d0,d1
    9bd8:	|  |      move.l d1,-(sp)
    9bda:	|  |      jsr 1776e <__floatsidf>
    9be0:	|  |      addq.l #4,sp
    9be2:	|  |      move.l d1,-(sp)
    9be4:	|  |      move.l d0,-(sp)
    9be6:	|  |      move.l 100(sp),-(sp)
    9bea:	|  |      move.l 100(sp),-(sp)
    9bee:	|  |      jsr 17602 <__divdf3>
    9bf4:	|  |      lea 16(sp),sp
    9bf8:	|  |      move.l d0,24(sp)
    9bfc:	|  |      move.l d1,28(sp)
    9c00:	|  |      move.l 24(sp),88(sp)
    9c06:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9c0c:	|  |      clr.l -(sp)
    9c0e:	|  |      clr.l -(sp)
    9c10:	|  |      move.l 100(sp),-(sp)
    9c14:	|  |      move.l 100(sp),-(sp)
    9c18:	|  |      jsr 178cc <__gtdf2>
    9c1e:	|  |      lea 16(sp),sp
    9c22:	|  |      tst.l d0
    9c24:	|  |  ,-- ble.w 9cfc <doBorderStuff+0x358>
    9c28:	|  |  |   clr.l -(sp)
    9c2a:	|  |  |   move.l #1072693248,-(sp)
    9c30:	|  |  |   move.l 100(sp),-(sp)
    9c34:	|  |  |   move.l 100(sp),-(sp)
    9c38:	|  |  |   jsr 17986 <__ltdf2>
    9c3e:	|  |  |   lea 16(sp),sp
    9c42:	|  |  |   tst.l d0
    9c44:	|  |  +-- bge.w 9cfc <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c48:	|  |  |   move.l 124(sp),-(sp)
    9c4c:	|  |  |   jsr 1776e <__floatsidf>
    9c52:	|  |  |   addq.l #4,sp
    9c54:	|  |  |   move.l d0,d2
    9c56:	|  |  |   move.l d1,d3
    9c58:	|  |  |   move.l 100(sp),-(sp)
    9c5c:	|  |  |   jsr 1776e <__floatsidf>
    9c62:	|  |  |   addq.l #4,sp
    9c64:	|  |  |   move.l 92(sp),-(sp)
    9c68:	|  |  |   move.l 92(sp),-(sp)
    9c6c:	|  |  |   move.l d1,-(sp)
    9c6e:	|  |  |   move.l d0,-(sp)
    9c70:	|  |  |   jsr 177fe <__muldf3>
    9c76:	|  |  |   lea 16(sp),sp
    9c7a:	|  |  |   move.l d1,-(sp)
    9c7c:	|  |  |   move.l d0,-(sp)
    9c7e:	|  |  |   move.l d3,-(sp)
    9c80:	|  |  |   move.l d2,-(sp)
    9c82:	|  |  |   jsr 175a0 <__adddf3>
    9c88:	|  |  |   lea 16(sp),sp
    9c8c:	|  |  |   move.l d1,-(sp)
    9c8e:	|  |  |   move.l d0,-(sp)
    9c90:	|  |  |   jsr 17710 <__fixdfsi>
    9c96:	|  |  |   addq.l #8,sp
    9c98:	|  |  |   movea.l 152(sp),a0
    9c9c:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9ca0:	|  |  |   move.l 120(sp),-(sp)
    9ca4:	|  |  |   jsr 1776e <__floatsidf>
    9caa:	|  |  |   addq.l #4,sp
    9cac:	|  |  |   move.l d0,d2
    9cae:	|  |  |   move.l d1,d3
    9cb0:	|  |  |   move.l 96(sp),-(sp)
    9cb4:	|  |  |   jsr 1776e <__floatsidf>
    9cba:	|  |  |   addq.l #4,sp
    9cbc:	|  |  |   move.l 92(sp),-(sp)
    9cc0:	|  |  |   move.l 92(sp),-(sp)
    9cc4:	|  |  |   move.l d1,-(sp)
    9cc6:	|  |  |   move.l d0,-(sp)
    9cc8:	|  |  |   jsr 177fe <__muldf3>
    9cce:	|  |  |   lea 16(sp),sp
    9cd2:	|  |  |   move.l d1,-(sp)
    9cd4:	|  |  |   move.l d0,-(sp)
    9cd6:	|  |  |   move.l d3,-(sp)
    9cd8:	|  |  |   move.l d2,-(sp)
    9cda:	|  |  |   jsr 175a0 <__adddf3>
    9ce0:	|  |  |   lea 16(sp),sp
    9ce4:	|  |  |   move.l d1,-(sp)
    9ce6:	|  |  |   move.l d0,-(sp)
    9ce8:	|  |  |   jsr 17710 <__fixdfsi>
    9cee:	|  |  |   addq.l #8,sp
    9cf0:	|  |  |   movea.l 152(sp),a0
    9cf4:	|  |  |   move.l d0,52(a0)
    9cf8:	|  +--|-- bra.w 9f54 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9cfc:	|  |  '-> move.l 140(sp),d0
    9d00:	|  |      sub.l 124(sp),d0
    9d04:	|  |      move.l d0,84(sp)
    9d08:	|  |      move.l 140(sp),d0
    9d0c:	|  |      sub.l 116(sp),d0
    9d10:	|  |      move.l d0,80(sp)
    9d14:	|  |      move.l 132(sp),d0
    9d18:	|  |      sub.l 124(sp),d0
    9d1c:	|  |      move.l d0,76(sp)
    9d20:	|  |      move.l 132(sp),d0
    9d24:	|  |      sub.l 116(sp),d0
    9d28:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d2c:	|  |      move.l 136(sp),d0
    9d30:	|  |      sub.l 120(sp),d0
    9d34:	|  |      move.l d0,68(sp)
    9d38:	|  |      move.l 136(sp),d0
    9d3c:	|  |      sub.l 112(sp),d0
    9d40:	|  |      move.l d0,64(sp)
    9d44:	|  |      move.l 128(sp),d0
    9d48:	|  |      sub.l 120(sp),d0
    9d4c:	|  |      move.l d0,60(sp)
    9d50:	|  |      move.l 128(sp),d0
    9d54:	|  |      sub.l 112(sp),d0
    9d58:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d5c:	|  |      move.l 84(sp),-(sp)
    9d60:	|  |      move.l 88(sp),-(sp)
    9d64:	|  |      jsr 17d08 <__mulsi3>
    9d6a:	|  |      addq.l #8,sp
    9d6c:	|  |      move.l d0,84(sp)
    9d70:	|  |      move.l 80(sp),-(sp)
    9d74:	|  |      move.l 84(sp),-(sp)
    9d78:	|  |      jsr 17d08 <__mulsi3>
    9d7e:	|  |      addq.l #8,sp
    9d80:	|  |      move.l d0,80(sp)
    9d84:	|  |      move.l 76(sp),-(sp)
    9d88:	|  |      move.l 80(sp),-(sp)
    9d8c:	|  |      jsr 17d08 <__mulsi3>
    9d92:	|  |      addq.l #8,sp
    9d94:	|  |      move.l d0,76(sp)
    9d98:	|  |      move.l 72(sp),-(sp)
    9d9c:	|  |      move.l 76(sp),-(sp)
    9da0:	|  |      jsr 17d08 <__mulsi3>
    9da6:	|  |      addq.l #8,sp
    9da8:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9dac:	|  |      move.l 68(sp),-(sp)
    9db0:	|  |      move.l 72(sp),-(sp)
    9db4:	|  |      jsr 17d08 <__mulsi3>
    9dba:	|  |      addq.l #8,sp
    9dbc:	|  |      move.l d0,68(sp)
    9dc0:	|  |      move.l 64(sp),-(sp)
    9dc4:	|  |      move.l 68(sp),-(sp)
    9dc8:	|  |      jsr 17d08 <__mulsi3>
    9dce:	|  |      addq.l #8,sp
    9dd0:	|  |      move.l d0,64(sp)
    9dd4:	|  |      move.l 60(sp),-(sp)
    9dd8:	|  |      move.l 64(sp),-(sp)
    9ddc:	|  |      jsr 17d08 <__mulsi3>
    9de2:	|  |      addq.l #8,sp
    9de4:	|  |      move.l d0,60(sp)
    9de8:	|  |      move.l 56(sp),-(sp)
    9dec:	|  |      move.l 60(sp),-(sp)
    9df0:	|  |      jsr 17d08 <__mulsi3>
    9df6:	|  |      addq.l #8,sp
    9df8:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9dfc:	|  |      move.l 84(sp),-(sp)
    9e00:	|  |      jsr 1776e <__floatsidf>
    9e06:	|  |      addq.l #4,sp
    9e08:	|  |      move.l d0,d2
    9e0a:	|  |      move.l d1,d3
    9e0c:	|  |      move.l 68(sp),-(sp)
    9e10:	|  |      jsr 1776e <__floatsidf>
    9e16:	|  |      addq.l #4,sp
    9e18:	|  |      move.l d1,-(sp)
    9e1a:	|  |      move.l d0,-(sp)
    9e1c:	|  |      move.l d3,-(sp)
    9e1e:	|  |      move.l d2,-(sp)
    9e20:	|  |      jsr 175a0 <__adddf3>
    9e26:	|  |      lea 16(sp),sp
    9e2a:	|  |      move.l d1,-(sp)
    9e2c:	|  |      move.l d0,-(sp)
    9e2e:	|  |      jsr 17cbe <sqrt>
    9e34:	|  |      addq.l #8,sp
    9e36:	|  |      move.l d0,d2
    9e38:	|  |      move.l d1,d3
    9e3a:	|  |      move.l 76(sp),-(sp)
    9e3e:	|  |      jsr 1776e <__floatsidf>
    9e44:	|  |      addq.l #4,sp
    9e46:	|  |      move.l d0,d4
    9e48:	|  |      move.l d1,d5
    9e4a:	|  |      move.l 60(sp),-(sp)
    9e4e:	|  |      jsr 1776e <__floatsidf>
    9e54:	|  |      addq.l #4,sp
    9e56:	|  |      move.l d1,-(sp)
    9e58:	|  |      move.l d0,-(sp)
    9e5a:	|  |      move.l d5,-(sp)
    9e5c:	|  |      move.l d4,-(sp)
    9e5e:	|  |      jsr 175a0 <__adddf3>
    9e64:	|  |      lea 16(sp),sp
    9e68:	|  |      move.l d1,-(sp)
    9e6a:	|  |      move.l d0,-(sp)
    9e6c:	|  |      jsr 17cbe <sqrt>
    9e72:	|  |      addq.l #8,sp
    9e74:	|  |      move.l d1,-(sp)
    9e76:	|  |      move.l d0,-(sp)
    9e78:	|  |      move.l d3,-(sp)
    9e7a:	|  |      move.l d2,-(sp)
    9e7c:	|  |      jsr 175a0 <__adddf3>
    9e82:	|  |      lea 16(sp),sp
    9e86:	|  |      move.l d0,d2
    9e88:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9e8a:	|  |      move.l 80(sp),-(sp)
    9e8e:	|  |      jsr 1776e <__floatsidf>
    9e94:	|  |      addq.l #4,sp
    9e96:	|  |      move.l d0,d4
    9e98:	|  |      move.l d1,d5
    9e9a:	|  |      move.l 64(sp),-(sp)
    9e9e:	|  |      jsr 1776e <__floatsidf>
    9ea4:	|  |      addq.l #4,sp
    9ea6:	|  |      move.l d1,-(sp)
    9ea8:	|  |      move.l d0,-(sp)
    9eaa:	|  |      move.l d5,-(sp)
    9eac:	|  |      move.l d4,-(sp)
    9eae:	|  |      jsr 175a0 <__adddf3>
    9eb4:	|  |      lea 16(sp),sp
    9eb8:	|  |      move.l d1,-(sp)
    9eba:	|  |      move.l d0,-(sp)
    9ebc:	|  |      jsr 17cbe <sqrt>
    9ec2:	|  |      addq.l #8,sp
    9ec4:	|  |      move.l d0,d4
    9ec6:	|  |      move.l d1,d5
    9ec8:	|  |      move.l 72(sp),-(sp)
    9ecc:	|  |      jsr 1776e <__floatsidf>
    9ed2:	|  |      addq.l #4,sp
    9ed4:	|  |      move.l d0,d6
    9ed6:	|  |      move.l d1,d7
    9ed8:	|  |      move.l 56(sp),-(sp)
    9edc:	|  |      jsr 1776e <__floatsidf>
    9ee2:	|  |      addq.l #4,sp
    9ee4:	|  |      move.l d1,-(sp)
    9ee6:	|  |      move.l d0,-(sp)
    9ee8:	|  |      move.l d7,-(sp)
    9eea:	|  |      move.l d6,-(sp)
    9eec:	|  |      jsr 175a0 <__adddf3>
    9ef2:	|  |      lea 16(sp),sp
    9ef6:	|  |      move.l d1,-(sp)
    9ef8:	|  |      move.l d0,-(sp)
    9efa:	|  |      jsr 17cbe <sqrt>
    9f00:	|  |      addq.l #8,sp
    9f02:	|  |      move.l d1,-(sp)
    9f04:	|  |      move.l d0,-(sp)
    9f06:	|  |      move.l d5,-(sp)
    9f08:	|  |      move.l d4,-(sp)
    9f0a:	|  |      jsr 175a0 <__adddf3>
    9f10:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f14:	|  |      move.l d1,-(sp)
    9f16:	|  |      move.l d0,-(sp)
    9f18:	|  |      move.l d3,-(sp)
    9f1a:	|  |      move.l d2,-(sp)
    9f1c:	|  |      jsr 17986 <__ltdf2>
    9f22:	|  |      lea 16(sp),sp
    9f26:	|  |      tst.l d0
    9f28:	|  |  ,-- bge.s 9f40 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f2a:	|  |  |   movea.l 152(sp),a0
    9f2e:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f34:	|  |  |   movea.l 152(sp),a0
    9f38:	|  |  |   move.l 120(sp),52(a0)
    9f3e:	|  +--|-- bra.s 9f54 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f40:	|  |  '-> movea.l 152(sp),a0
    9f44:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f4a:	|  |      movea.l 152(sp),a0
    9f4e:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f54:	|  '----> movea.l 152(sp),a0
    9f58:	|         move.l 52(a0),d0
    9f5c:	|         move.l d0,-(sp)
    9f5e:	|         jsr 177ae <__floatsisf>
    9f64:	|         addq.l #4,sp
    9f66:	|         move.l d0,d1
    9f68:	|         movea.l 152(sp),a0
    9f6c:	|         move.l 4(a0),d0
    9f70:	|         move.l d0,-(sp)
    9f72:	|         move.l d1,-(sp)
    9f74:	|         jsr 17aa2 <__subsf3>
    9f7a:	|         addq.l #8,sp
    9f7c:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9f80:	|         movea.l 152(sp),a0
    9f84:	|         move.l (a0),d2
    9f86:	|         movea.l 152(sp),a0
    9f8a:	|         move.l 48(a0),d0
    9f8e:	|         move.l d0,-(sp)
    9f90:	|         jsr 177ae <__floatsisf>
    9f96:	|         addq.l #4,sp
    9f98:	|         move.l d0,-(sp)
    9f9a:	|         move.l d2,-(sp)
    9f9c:	|         jsr 17aa2 <__subsf3>
    9fa2:	|         addq.l #8,sp
    9fa4:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9fa8:	|         clr.l -(sp)
    9faa:	|         move.l 52(sp),-(sp)
    9fae:	|         jsr 17a0a <__nesf2>
    9fb4:	|         addq.l #8,sp
    9fb6:	|         tst.l d0
    9fb8:	|     ,-- bne.s 9fcc <doBorderStuff+0x628>
    9fba:	|     |   clr.l -(sp)
    9fbc:	|     |   move.l 56(sp),-(sp)
    9fc0:	|     |   jsr 17a0a <__nesf2>
    9fc6:	|     |   addq.l #8,sp
    9fc8:	|     |   tst.l d0
    9fca:	|  ,--|-- beq.s a042 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9fcc:	|  |  '-> move.l 52(sp),d0
    9fd0:	|  |      move.l d0,-(sp)
    9fd2:	|  |      move.l d0,-(sp)
    9fd4:	|  |      jsr 1756a <__addsf3>
    9fda:	|  |      addq.l #8,sp
    9fdc:	|  |      move.l d0,-(sp)
    9fde:	|  |      move.l 52(sp),-(sp)
    9fe2:	|  |      jsr 17b0e <atan2f>
    9fe8:	|  |      addq.l #8,sp
    9fea:	|  |      move.l d0,-(sp)
    9fec:	|  |      jsr 176d0 <__extendsfdf2>
    9ff2:	|  |      addq.l #4,sp
    9ff4:	|  |      move.l #-1540411785,-(sp)
    9ffa:	|  |      move.l #1078765033,-(sp)
    a000:	|  |      move.l d1,-(sp)
    a002:	|  |      move.l d0,-(sp)
    a004:	|  |      jsr 177fe <__muldf3>
    a00a:	|  |      lea 16(sp),sp
    a00e:	|  |      clr.l -(sp)
    a010:	|  |      move.l #1080459264,-(sp)
    a016:	|  |      move.l d1,-(sp)
    a018:	|  |      move.l d0,-(sp)
    a01a:	|  |      jsr 175a0 <__adddf3>
    a020:	|  |      lea 16(sp),sp
    a024:	|  |      move.l d1,-(sp)
    a026:	|  |      move.l d0,-(sp)
    a028:	|  |      jsr 17710 <__fixdfsi>
    a02e:	|  |      addq.l #8,sp
    a030:	|  |      movea.l 152(sp),a0
    a034:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a038:	|  |      movea.l 152(sp),a0
    a03c:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a042:	|  '----> pea 1 <_start+0x1>
    a046:	|         move.l 156(sp),-(sp)
    a04a:	|         jsr 41de <setFrames>
    a050:	|         addq.l #8,sp
    return TRUE;
    a052:	|         moveq #1,d0
}
    a054:	'-------> movem.l (sp)+,d2-d7
    a058:	          lea 124(sp),sp
    a05c:	          rts

0000a05e <drawPeople>:

void drawPeople () {
    a05e:	                   lea -24(sp),sp
    a062:	                   move.l d2,-(sp)

	shufflePeople ();
    a064:	                   jsr bb5c <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a06a:	                   move.l 1cc2a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a072:	                   clr.l 20(sp)
	overRegion = NULL;
    a076:	                   clr.l 1ccda <overRegion>

	while (thisPerson) {
    a07c:	   ,-------------- bra.w a62e <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a080:	,--|-------------> movea.l 24(sp),a0
    a084:	|  |               move.w 104(a0),d0
    a088:	|  |  ,----------- beq.w a3e2 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a08c:	|  |  |            movea.l 24(sp),a0
    a090:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a096:	|  |  |            movea.l 24(sp),a0
    a09a:	|  |  |            move.l 76(a0),d0
    a09e:	|  |  |            cmp.l 20(sp),d0
    a0a2:	|  |  |  ,-------- beq.w a270 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a0a6:	|  |  |  |         movea.l 24(sp),a0
    a0aa:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a0ae:	|  |  |  |         movea.l 24(sp),a0
    a0b2:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a0b8:	|  |  |  |         movea.l 24(sp),a0
    a0bc:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0c0:	|  |  |  |         movea.l 20(sp),a0
    a0c4:	|  |  |  |         movea.l 4(a0),a0
    a0c8:	|  |  |  |         move.l 4(a0),d0
    a0cc:	|  |  |  |         movea.l 24(sp),a0
    a0d0:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a0d4:	|  |  |  |         movea.l 20(sp),a0
    a0d8:	|  |  |  |         movea.l 4(a0),a1
    a0dc:	|  |  |  |         movea.l 24(sp),a0
    a0e0:	|  |  |  |         move.l 84(a0),d0
    a0e4:	|  |  |  |         move.l d0,d1
    a0e6:	|  |  |  |         move.l d1,d0
    a0e8:	|  |  |  |         add.l d0,d0
    a0ea:	|  |  |  |         add.l d1,d0
    a0ec:	|  |  |  |         add.l d0,d0
    a0ee:	|  |  |  |         add.l d0,d0
    a0f0:	|  |  |  |         lea (0,a1,d0.l),a0
    a0f4:	|  |  |  |         move.l 8(a0),d0
    a0f8:	|  |  |  |     ,-- ble.w a19a <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a0fc:	|  |  |  |     |   movea.l 20(sp),a0
    a100:	|  |  |  |     |   movea.l 4(a0),a1
    a104:	|  |  |  |     |   movea.l 24(sp),a0
    a108:	|  |  |  |     |   move.l 84(a0),d0
    a10c:	|  |  |  |     |   move.l d0,d1
    a10e:	|  |  |  |     |   move.l d1,d0
    a110:	|  |  |  |     |   add.l d0,d0
    a112:	|  |  |  |     |   add.l d1,d0
    a114:	|  |  |  |     |   add.l d0,d0
    a116:	|  |  |  |     |   add.l d0,d0
    a118:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a11c:	|  |  |  |     |   move.l 8(a0),d0
    a120:	|  |  |  |     |   clr.l -(sp)
    a122:	|  |  |  |     |   move.l d0,-(sp)
    a124:	|  |  |  |     |   jsr d270 <startSound>
    a12a:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a12c:	|  |  |  |     |   movea.l 24(sp),a0
    a130:	|  |  |  |     |   move.l 84(a0),d0
    a134:	|  |  |  |     |   addq.l #1,d0
    a136:	|  |  |  |     |   movea.l 24(sp),a0
    a13a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a13e:	|  |  |  |     |   movea.l 24(sp),a0
    a142:	|  |  |  |     |   move.l 84(a0),d0
    a146:	|  |  |  |     |   movea.l 24(sp),a0
    a14a:	|  |  |  |     |   movea.l 72(a0),a0
    a14e:	|  |  |  |     |   move.l 8(a0),d1
    a152:	|  |  |  |     |   move.l d1,-(sp)
    a154:	|  |  |  |     |   move.l d0,-(sp)
    a156:	|  |  |  |     |   jsr 17db4 <__modsi3>
    a15c:	|  |  |  |     |   addq.l #8,sp
    a15e:	|  |  |  |     |   movea.l 24(sp),a0
    a162:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a166:	|  |  |  |     |   movea.l 24(sp),a0
    a16a:	|  |  |  |     |   movea.l 72(a0),a0
    a16e:	|  |  |  |     |   movea.l 4(a0),a1
    a172:	|  |  |  |     |   movea.l 24(sp),a0
    a176:	|  |  |  |     |   move.l 84(a0),d0
    a17a:	|  |  |  |     |   move.l d0,d1
    a17c:	|  |  |  |     |   move.l d1,d0
    a17e:	|  |  |  |     |   add.l d0,d0
    a180:	|  |  |  |     |   add.l d1,d0
    a182:	|  |  |  |     |   add.l d0,d0
    a184:	|  |  |  |     |   add.l d0,d0
    a186:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a18a:	|  |  |  |     |   move.l 4(a0),d0
    a18e:	|  |  |  |     |   movea.l 24(sp),a0
    a192:	|  |  |  |     |   move.l d0,88(a0)
    a196:	|  |  |  |  ,--|-- bra.w a2d8 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a19a:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a19e:	|  |  |  |  |      movea.l 4(a0),a1
    a1a2:	|  |  |  |  |      movea.l 24(sp),a0
    a1a6:	|  |  |  |  |      move.l 84(a0),d0
    a1aa:	|  |  |  |  |      move.l d0,d1
    a1ac:	|  |  |  |  |      move.l d1,d0
    a1ae:	|  |  |  |  |      add.l d0,d0
    a1b0:	|  |  |  |  |      add.l d1,d0
    a1b2:	|  |  |  |  |      add.l d0,d0
    a1b4:	|  |  |  |  |      add.l d0,d0
    a1b6:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1ba:	|  |  |  |  |      move.l 8(a0),d0
    a1be:	|  |  |  |  +----- beq.w a2d8 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a1c2:	|  |  |  |  |      movea.l 1cb9a <noStack>,a1
    a1c8:	|  |  |  |  |      movea.l 20(sp),a0
    a1cc:	|  |  |  |  |      move.l 4(a0),d2
    a1d0:	|  |  |  |  |      movea.l 24(sp),a0
    a1d4:	|  |  |  |  |      move.l 84(a0),d0
    a1d8:	|  |  |  |  |      move.l d0,d1
    a1da:	|  |  |  |  |      move.l d1,d0
    a1dc:	|  |  |  |  |      add.l d0,d0
    a1de:	|  |  |  |  |      add.l d1,d0
    a1e0:	|  |  |  |  |      add.l d0,d0
    a1e2:	|  |  |  |  |      add.l d0,d0
    a1e4:	|  |  |  |  |      movea.l d2,a0
    a1e6:	|  |  |  |  |      adda.l d0,a0
    a1e8:	|  |  |  |  |      move.l 8(a0),d0
    a1ec:	|  |  |  |  |      neg.l d0
    a1ee:	|  |  |  |  |      pea 1 <_start+0x1>
    a1f2:	|  |  |  |  |      move.l a1,-(sp)
    a1f4:	|  |  |  |  |      clr.l -(sp)
    a1f6:	|  |  |  |  |      clr.l -(sp)
    a1f8:	|  |  |  |  |      move.l d0,-(sp)
    a1fa:	|  |  |  |  |      jsr 750a <startNewFunctionNum>
    a200:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a204:	|  |  |  |  |      movea.l 24(sp),a0
    a208:	|  |  |  |  |      move.l 84(a0),d0
    a20c:	|  |  |  |  |      addq.l #1,d0
    a20e:	|  |  |  |  |      movea.l 24(sp),a0
    a212:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a216:	|  |  |  |  |      movea.l 24(sp),a0
    a21a:	|  |  |  |  |      move.l 84(a0),d0
    a21e:	|  |  |  |  |      movea.l 24(sp),a0
    a222:	|  |  |  |  |      movea.l 72(a0),a0
    a226:	|  |  |  |  |      move.l 8(a0),d1
    a22a:	|  |  |  |  |      move.l d1,-(sp)
    a22c:	|  |  |  |  |      move.l d0,-(sp)
    a22e:	|  |  |  |  |      jsr 17db4 <__modsi3>
    a234:	|  |  |  |  |      addq.l #8,sp
    a236:	|  |  |  |  |      movea.l 24(sp),a0
    a23a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a23e:	|  |  |  |  |      movea.l 24(sp),a0
    a242:	|  |  |  |  |      movea.l 72(a0),a0
    a246:	|  |  |  |  |      movea.l 4(a0),a1
    a24a:	|  |  |  |  |      movea.l 24(sp),a0
    a24e:	|  |  |  |  |      move.l 84(a0),d0
    a252:	|  |  |  |  |      move.l d0,d1
    a254:	|  |  |  |  |      move.l d1,d0
    a256:	|  |  |  |  |      add.l d0,d0
    a258:	|  |  |  |  |      add.l d1,d0
    a25a:	|  |  |  |  |      add.l d0,d0
    a25c:	|  |  |  |  |      add.l d0,d0
    a25e:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a262:	|  |  |  |  |      move.l 4(a0),d0
    a266:	|  |  |  |  |      movea.l 24(sp),a0
    a26a:	|  |  |  |  |      move.l d0,88(a0)
    a26e:	|  |  |  |  +----- bra.s a2d8 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a270:	|  |  |  '--|----> movea.l 24(sp),a0
    a274:	|  |  |     |      move.l (a0),d0
    a276:	|  |  |     |      movea.l 24(sp),a0
    a27a:	|  |  |     |      move.l 8(a0),d1
    a27e:	|  |  |     |      move.l d1,-(sp)
    a280:	|  |  |     |      move.l d0,-(sp)
    a282:	|  |  |     |      jsr 1769a <__eqsf2>
    a288:	|  |  |     |      addq.l #8,sp
    a28a:	|  |  |     |      tst.l d0
    a28c:	|  |  |     |  ,-- bne.s a2d0 <drawPeople+0x272>
    a28e:	|  |  |     |  |   movea.l 24(sp),a0
    a292:	|  |  |     |  |   move.l 4(a0),d0
    a296:	|  |  |     |  |   movea.l 24(sp),a0
    a29a:	|  |  |     |  |   move.l 12(a0),d1
    a29e:	|  |  |     |  |   move.l d1,-(sp)
    a2a0:	|  |  |     |  |   move.l d0,-(sp)
    a2a2:	|  |  |     |  |   jsr 1769a <__eqsf2>
    a2a8:	|  |  |     |  |   addq.l #8,sp
    a2aa:	|  |  |     |  |   tst.l d0
    a2ac:	|  |  |     |  +-- bne.s a2d0 <drawPeople+0x272>
    a2ae:	|  |  |     |  |   movea.l 20(sp),a0
    a2b2:	|  |  |     |  |   move.l 8(a0),d0
    a2b6:	|  |  |     |  |   moveq #1,d1
    a2b8:	|  |  |     |  |   cmp.l d0,d1
    a2ba:	|  |  |     |  +-- bne.s a2d0 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2bc:	|  |  |     |  |   movea.l 24(sp),a0
    a2c0:	|  |  |     |  |   move.l 16(a0),d0
    a2c4:	|  |  |     |  |   addq.l #1,d0
    a2c6:	|  |  |     |  |   movea.l 24(sp),a0
    a2ca:	|  |  |     |  |   move.l d0,16(a0)
    a2ce:	|  |  |     +--|-- bra.s a2d8 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a2d0:	|  |  |     |  '-> movea.l 24(sp),a0
    a2d4:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a2d8:	|  |  |     '----> movea.l 24(sp),a0
    a2dc:	|  |  |            move.l (a0),d0
    a2de:	|  |  |            movea.l 24(sp),a0
    a2e2:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a2e6:	|  |  |            movea.l 24(sp),a0
    a2ea:	|  |  |            move.l 4(a0),d0
    a2ee:	|  |  |            movea.l 24(sp),a0
    a2f2:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a2f6:	|  |  |            movea.l 20(sp),a0
    a2fa:	|  |  |            movea.l 4(a0),a1
    a2fe:	|  |  |            movea.l 24(sp),a0
    a302:	|  |  |            move.l 84(a0),d0
    a306:	|  |  |            move.l d0,d1
    a308:	|  |  |            move.l d1,d0
    a30a:	|  |  |            add.l d0,d0
    a30c:	|  |  |            add.l d1,d0
    a30e:	|  |  |            add.l d0,d0
    a310:	|  |  |            add.l d0,d0
    a312:	|  |  |            lea (0,a1,d0.l),a0
    a316:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a31a:	|  |  |            move.l 8(sp),d0
    a31e:	|  |  |            add.l d0,d0
    a320:	|  |  |            subx.l d0,d0
    a322:	|  |  |            neg.l d0
    a324:	|  |  |            move.b d0,d0
    a326:	|  |  |            move.b d0,d0
    a328:	|  |  |            andi.l #255,d0
    a32e:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a332:	|  |  |            move.l 8(sp),-(sp)
    a336:	|  |  |            jsr 9232 <TF_abs>
    a33c:	|  |  |            addq.l #4,sp
    a33e:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a342:	|  |  |            movea.l 20(sp),a0
    a346:	|  |  |            movea.l (a0),a0
    a348:	|  |  |            move.l 8(a0),d0
    a34c:	|  |  |            cmp.l 12(sp),d0
    a350:	|  |  |        ,-- bgt.s a360 <drawPeople+0x302>
				fNum = 0;
    a352:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a356:	|  |  |        |   moveq #2,d0
    a358:	|  |  |        |   sub.l 16(sp),d0
    a35c:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a360:	|  |  |        '-> moveq #2,d1
    a362:	|  |  |            cmp.l 16(sp),d1
    a366:	|  |  +----------- beq.s a3e2 <drawPeople+0x384>
				BOOL r = FALSE;
    a368:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a36c:	|  |  |            move.l 16(sp),d0
    a370:	|  |  |            movea.w d0,a0
    a372:	|  |  |            movea.l 20(sp),a1
    a376:	|  |  |            movea.l (a1),a1
    a378:	|  |  |            movea.l 16(a1),a1
    a37c:	|  |  |            move.l 12(sp),d1
    a380:	|  |  |            move.l d1,d0
    a382:	|  |  |            lsl.l #3,d0
    a384:	|  |  |            sub.l d1,d0
    a386:	|  |  |            add.l d0,d0
    a388:	|  |  |            add.l d0,d0
    a38a:	|  |  |            add.l a1,d0
    a38c:	|  |  |            move.l a0,-(sp)
    a38e:	|  |  |            move.l 28(sp),-(sp)
    a392:	|  |  |            move.l d0,-(sp)
    a394:	|  |  |            jsr 8f54 <scaleSprite>
    a39a:	|  |  |            lea 12(sp),sp
    a39e:	|  |  |            move.w d0,6(sp)
				if (r) {
    a3a2:	|  |  +----------- beq.s a3e2 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a3a4:	|  |  |            movea.l 24(sp),a0
    a3a8:	|  |  |            movea.l 114(a0),a0
    a3ac:	|  |  |            movea.l (a0),a0
    a3ae:	|  |  |            move.b (a0),d0
    a3b0:	|  |  +----------- beq.s a3e2 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a3b2:	|  |  |            move.l 1cc4a <personRegion+0x1c>,d1
    a3b8:	|  |  |            movea.l 24(sp),a0
    a3bc:	|  |  |            move.l 114(a0),d0
    a3c0:	|  |  |            cmp.l d1,d0
    a3c2:	|  |  |        ,-- beq.s a3ca <drawPeople+0x36c>
    a3c4:	|  |  |        |   clr.l 1cb92 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a3ca:	|  |  |        '-> movea.l 24(sp),a0
    a3ce:	|  |  |            move.l 114(a0),d0
    a3d2:	|  |  |            move.l d0,1cc4a <personRegion+0x1c>
						overRegion = & personRegion;
    a3d8:	|  |  |            move.l #117806,1ccda <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a3e2:	|  |  '----------> movea.l 24(sp),a0
    a3e6:	|  |               move.l 88(a0),d0
    a3ea:	|  |               subq.l #1,d0
    a3ec:	|  |               movea.l 24(sp),a0
    a3f0:	|  |               move.l d0,88(a0)
    a3f4:	|  |               movea.l 24(sp),a0
    a3f8:	|  |               move.l 88(a0),d0
    a3fc:	|  |        ,----- bne.w a624 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a400:	|  |        |      movea.l 24(sp),a0
    a404:	|  |        |      move.l 84(a0),d0
    a408:	|  |        |      addq.l #1,d0
    a40a:	|  |        |      movea.l 24(sp),a0
    a40e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a412:	|  |        |      movea.l 24(sp),a0
    a416:	|  |        |      move.l 84(a0),d0
    a41a:	|  |        |      movea.l 24(sp),a0
    a41e:	|  |        |      movea.l 72(a0),a0
    a422:	|  |        |      move.l 8(a0),d1
    a426:	|  |        |      move.l d1,-(sp)
    a428:	|  |        |      move.l d0,-(sp)
    a42a:	|  |        |      jsr 17db4 <__modsi3>
    a430:	|  |        |      addq.l #8,sp
    a432:	|  |        |      movea.l 24(sp),a0
    a436:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a43a:	|  |        |      movea.l 24(sp),a0
    a43e:	|  |        |      movea.l 72(a0),a0
    a442:	|  |        |      movea.l 4(a0),a1
    a446:	|  |        |      movea.l 24(sp),a0
    a44a:	|  |        |      move.l 84(a0),d0
    a44e:	|  |        |      move.l d0,d1
    a450:	|  |        |      move.l d1,d0
    a452:	|  |        |      add.l d0,d0
    a454:	|  |        |      add.l d1,d0
    a456:	|  |        |      add.l d0,d0
    a458:	|  |        |      add.l d0,d0
    a45a:	|  |        |      lea (0,a1,d0.l),a0
    a45e:	|  |        |      move.l 4(a0),d0
    a462:	|  |        |      movea.l 24(sp),a0
    a466:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a46a:	|  |        |      movea.l 24(sp),a0
    a46e:	|  |        |      move.w 104(a0),d0
    a472:	|  |        +----- beq.w a624 <drawPeople+0x5c6>
    a476:	|  |        |      tst.l 20(sp)
    a47a:	|  |        +----- beq.w a624 <drawPeople+0x5c6>
    a47e:	|  |        |      movea.l 20(sp),a0
    a482:	|  |        |      move.l 4(a0),d0
    a486:	|  |        +----- beq.w a624 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a48a:	|  |        |      movea.l 20(sp),a0
    a48e:	|  |        |      movea.l 4(a0),a1
    a492:	|  |        |      movea.l 24(sp),a0
    a496:	|  |        |      move.l 84(a0),d0
    a49a:	|  |        |      move.l d0,d1
    a49c:	|  |        |      move.l d1,d0
    a49e:	|  |        |      add.l d0,d0
    a4a0:	|  |        |      add.l d1,d0
    a4a2:	|  |        |      add.l d0,d0
    a4a4:	|  |        |      add.l d0,d0
    a4a6:	|  |        |      lea (0,a1,d0.l),a0
    a4aa:	|  |        |      move.l 8(a0),d0
    a4ae:	|  |        |  ,-- ble.w a550 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a4b2:	|  |        |  |   movea.l 20(sp),a0
    a4b6:	|  |        |  |   movea.l 4(a0),a1
    a4ba:	|  |        |  |   movea.l 24(sp),a0
    a4be:	|  |        |  |   move.l 84(a0),d0
    a4c2:	|  |        |  |   move.l d0,d1
    a4c4:	|  |        |  |   move.l d1,d0
    a4c6:	|  |        |  |   add.l d0,d0
    a4c8:	|  |        |  |   add.l d1,d0
    a4ca:	|  |        |  |   add.l d0,d0
    a4cc:	|  |        |  |   add.l d0,d0
    a4ce:	|  |        |  |   lea (0,a1,d0.l),a0
    a4d2:	|  |        |  |   move.l 8(a0),d0
    a4d6:	|  |        |  |   clr.l -(sp)
    a4d8:	|  |        |  |   move.l d0,-(sp)
    a4da:	|  |        |  |   jsr d270 <startSound>
    a4e0:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a4e2:	|  |        |  |   movea.l 24(sp),a0
    a4e6:	|  |        |  |   move.l 84(a0),d0
    a4ea:	|  |        |  |   addq.l #1,d0
    a4ec:	|  |        |  |   movea.l 24(sp),a0
    a4f0:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4f4:	|  |        |  |   movea.l 24(sp),a0
    a4f8:	|  |        |  |   move.l 84(a0),d0
    a4fc:	|  |        |  |   movea.l 24(sp),a0
    a500:	|  |        |  |   movea.l 72(a0),a0
    a504:	|  |        |  |   move.l 8(a0),d1
    a508:	|  |        |  |   move.l d1,-(sp)
    a50a:	|  |        |  |   move.l d0,-(sp)
    a50c:	|  |        |  |   jsr 17db4 <__modsi3>
    a512:	|  |        |  |   addq.l #8,sp
    a514:	|  |        |  |   movea.l 24(sp),a0
    a518:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a51c:	|  |        |  |   movea.l 24(sp),a0
    a520:	|  |        |  |   movea.l 72(a0),a0
    a524:	|  |        |  |   movea.l 4(a0),a1
    a528:	|  |        |  |   movea.l 24(sp),a0
    a52c:	|  |        |  |   move.l 84(a0),d0
    a530:	|  |        |  |   move.l d0,d1
    a532:	|  |        |  |   move.l d1,d0
    a534:	|  |        |  |   add.l d0,d0
    a536:	|  |        |  |   add.l d1,d0
    a538:	|  |        |  |   add.l d0,d0
    a53a:	|  |        |  |   add.l d0,d0
    a53c:	|  |        |  |   lea (0,a1,d0.l),a0
    a540:	|  |        |  |   move.l 4(a0),d0
    a544:	|  |        |  |   movea.l 24(sp),a0
    a548:	|  |        |  |   move.l d0,88(a0)
    a54c:	|  |        +--|-- bra.w a624 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a550:	|  |        |  '-> movea.l 20(sp),a0
    a554:	|  |        |      movea.l 4(a0),a1
    a558:	|  |        |      movea.l 24(sp),a0
    a55c:	|  |        |      move.l 84(a0),d0
    a560:	|  |        |      move.l d0,d1
    a562:	|  |        |      move.l d1,d0
    a564:	|  |        |      add.l d0,d0
    a566:	|  |        |      add.l d1,d0
    a568:	|  |        |      add.l d0,d0
    a56a:	|  |        |      add.l d0,d0
    a56c:	|  |        |      lea (0,a1,d0.l),a0
    a570:	|  |        |      move.l 8(a0),d0
    a574:	|  |        +----- beq.w a624 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a578:	|  |        |      movea.l 1cb9a <noStack>,a1
    a57e:	|  |        |      movea.l 20(sp),a0
    a582:	|  |        |      move.l 4(a0),d2
    a586:	|  |        |      movea.l 24(sp),a0
    a58a:	|  |        |      move.l 84(a0),d0
    a58e:	|  |        |      move.l d0,d1
    a590:	|  |        |      move.l d1,d0
    a592:	|  |        |      add.l d0,d0
    a594:	|  |        |      add.l d1,d0
    a596:	|  |        |      add.l d0,d0
    a598:	|  |        |      add.l d0,d0
    a59a:	|  |        |      movea.l d2,a0
    a59c:	|  |        |      adda.l d0,a0
    a59e:	|  |        |      move.l 8(a0),d0
    a5a2:	|  |        |      neg.l d0
    a5a4:	|  |        |      pea 1 <_start+0x1>
    a5a8:	|  |        |      move.l a1,-(sp)
    a5aa:	|  |        |      clr.l -(sp)
    a5ac:	|  |        |      clr.l -(sp)
    a5ae:	|  |        |      move.l d0,-(sp)
    a5b0:	|  |        |      jsr 750a <startNewFunctionNum>
    a5b6:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a5ba:	|  |        |      movea.l 24(sp),a0
    a5be:	|  |        |      move.l 84(a0),d0
    a5c2:	|  |        |      addq.l #1,d0
    a5c4:	|  |        |      movea.l 24(sp),a0
    a5c8:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5cc:	|  |        |      movea.l 24(sp),a0
    a5d0:	|  |        |      move.l 84(a0),d0
    a5d4:	|  |        |      movea.l 24(sp),a0
    a5d8:	|  |        |      movea.l 72(a0),a0
    a5dc:	|  |        |      move.l 8(a0),d1
    a5e0:	|  |        |      move.l d1,-(sp)
    a5e2:	|  |        |      move.l d0,-(sp)
    a5e4:	|  |        |      jsr 17db4 <__modsi3>
    a5ea:	|  |        |      addq.l #8,sp
    a5ec:	|  |        |      movea.l 24(sp),a0
    a5f0:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5f4:	|  |        |      movea.l 24(sp),a0
    a5f8:	|  |        |      movea.l 72(a0),a0
    a5fc:	|  |        |      movea.l 4(a0),a1
    a600:	|  |        |      movea.l 24(sp),a0
    a604:	|  |        |      move.l 84(a0),d0
    a608:	|  |        |      move.l d0,d1
    a60a:	|  |        |      move.l d1,d0
    a60c:	|  |        |      add.l d0,d0
    a60e:	|  |        |      add.l d1,d0
    a610:	|  |        |      add.l d0,d0
    a612:	|  |        |      add.l d0,d0
    a614:	|  |        |      lea (0,a1,d0.l),a0
    a618:	|  |        |      move.l 4(a0),d0
    a61c:	|  |        |      movea.l 24(sp),a0
    a620:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a624:	|  |        '----> movea.l 24(sp),a0
    a628:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a62e:	|  '-------------> tst.l 24(sp)
    a632:	'----------------- bne.w a080 <drawPeople+0x22>
	}
}
    a636:	                   nop
    a638:	                   nop
    a63a:	                   move.l (sp)+,d2
    a63c:	                   lea 24(sp),sp
    a640:	                   rts

0000a642 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a642:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a644:	          pea 1934a <PutChar+0x152c>
    a64a:	          jsr 1737c <KPrintF>
    a650:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a652:	          move.l 1cc2a <allPeople>,(sp)
	while (thisPerson) {
    a658:	      ,-- bra.s a670 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a65a:	,-----|-> movea.l (sp),a0
    a65c:	|     |   movea.l 114(a0),a0
    a660:	|     |   move.l 4(a0),d0
    a664:	|     |   cmp.l 8(sp),d0
    a668:	|  ,--|-- beq.s a676 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a66a:	|  |  |   movea.l (sp),a0
    a66c:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a670:	|  |  '-> tst.l (sp)
    a672:	'--|----- bne.s a65a <findPerson+0x18>
    a674:	   |  ,-- bra.s a678 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a676:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a678:	      '-> pea 1935e <PutChar+0x1540>
    a67e:	          jsr 1737c <KPrintF>
    a684:	          addq.l #4,sp
	return thisPerson;
    a686:	          move.l (sp),d0
}
    a688:	          addq.l #4,sp
    a68a:	          rts

0000a68c <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a68c:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a68e:	       move.l 12(sp),-(sp)
    a692:	       jsr a642 <findPerson>
    a698:	       addq.l #4,sp
    a69a:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a69c:	   ,-- bne.s a6a2 <floatCharacter+0x16>
    a69e:	   |   clr.w d0
    a6a0:	,--|-- bra.s a6ac <floatCharacter+0x20>
	moveMe -> floaty = f;
    a6a2:	|  '-> movea.l (sp),a0
    a6a4:	|      move.l 8(sp),24(a0)
	return TRUE;
    a6aa:	|      moveq #1,d0
}
    a6ac:	'----> addq.l #4,sp
    a6ae:	       rts

0000a6b0 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a6b0:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a6b2:	          tst.l 8(sp)
    a6b6:	      ,-- bne.s a6c4 <forceWalkingPerson+0x14>
    a6b8:	      |   tst.l 12(sp)
    a6bc:	      +-- bne.s a6c4 <forceWalkingPerson+0x14>
    a6be:	      |   clr.w d0
    a6c0:	,-----|-- bra.w a756 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6c4:	|     '-> move.l 16(sp),-(sp)
    a6c8:	|         jsr a642 <findPerson>
    a6ce:	|         addq.l #4,sp
    a6d0:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a6d2:	|     ,-- bne.s a6d8 <forceWalkingPerson+0x28>
    a6d4:	|     |   clr.w d0
    a6d6:	+-----|-- bra.s a756 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6d8:	|     '-> movea.l (sp),a0
    a6da:	|         move.l 68(a0),d0
    a6de:	|     ,-- beq.s a6f0 <forceWalkingPerson+0x40>
    a6e0:	|     |   movea.l (sp),a0
    a6e2:	|     |   move.l 68(a0),d0
    a6e6:	|     |   move.l d0,-(sp)
    a6e8:	|     |   jsr 503c <abortFunction>
    a6ee:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a6f0:	|     '-> movea.l (sp),a0
    a6f2:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a6f8:	|         movea.l (sp),a0
    a6fa:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a6fe:	|         movea.l (sp),a0
    a700:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a706:	|         movea.l (sp),a0
    a708:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a70e:	|         movea.l (sp),a0
    a710:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a716:	|         movea.l (sp),a0
    a718:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a71c:	|         movea.l (sp),a0
    a71e:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a722:	|         move.l (sp),-(sp)
    a724:	|         jsr 99a4 <doBorderStuff>
    a72a:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a72c:	|         pea 1 <_start+0x1>
    a730:	|         move.l 4(sp),-(sp)
    a734:	|         jsr bfea <walkMe>
    a73a:	|         addq.l #8,sp
    a73c:	|         tst.w d0
    a73e:	|     ,-- bne.s a748 <forceWalkingPerson+0x98>
    a740:	|     |   movea.l (sp),a0
    a742:	|     |   move.w 66(a0),d0
    a746:	|  ,--|-- beq.s a754 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a748:	|  |  '-> movea.l (sp),a0
    a74a:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a750:	|  |      moveq #1,d0
    a752:	+--|----- bra.s a756 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a754:	|  '----> clr.w d0
    }
}
    a756:	'-------> addq.l #4,sp
    a758:	          rts

0000a75a <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a75a:	                lea -56(sp),sp
    a75e:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a760:	                pea 19373 <PutChar+0x1555>
    a766:	                jsr 1737c <KPrintF>
    a76c:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a76e:	                move.l #320,56(sp)
    a776:	                move.l #200,52(sp)
    a77e:	                moveq #-1,d0
    a780:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a784:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a78c:	                clr.l 44(sp)
    a790:	   ,----------- bra.w a968 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a794:	,--|----------> movea.l 1cce2 <currentFloor>,a0
    a79a:	|  |            move.l 12(a0),d1
    a79e:	|  |            move.l 44(sp),d0
    a7a2:	|  |            lsl.l #3,d0
    a7a4:	|  |            movea.l d1,a0
    a7a6:	|  |            adda.l d0,a0
    a7a8:	|  |            move.l (a0),d0
    a7aa:	|  |            move.l d0,d1
    a7ac:	|  |            subq.l #1,d1
    a7ae:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a7b2:	|  |            clr.l 40(sp)
    a7b6:	|  |     ,----- bra.w a946 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a7ba:	|  |  ,--|----> movea.l 1cce2 <currentFloor>,a0
    a7c0:	|  |  |  |      move.l 4(a0),d1
    a7c4:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a7ca:	|  |  |  |      movea.l 12(a0),a0
    a7ce:	|  |  |  |      move.l 44(sp),d0
    a7d2:	|  |  |  |      lsl.l #3,d0
    a7d4:	|  |  |  |      adda.l d0,a0
    a7d6:	|  |  |  |      movea.l 4(a0),a0
    a7da:	|  |  |  |      move.l 40(sp),d0
    a7de:	|  |  |  |      add.l d0,d0
    a7e0:	|  |  |  |      add.l d0,d0
    a7e2:	|  |  |  |      adda.l d0,a0
    a7e4:	|  |  |  |      move.l (a0),d0
    a7e6:	|  |  |  |      lsl.l #3,d0
    a7e8:	|  |  |  |      movea.l d1,a0
    a7ea:	|  |  |  |      adda.l d0,a0
    a7ec:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a7f0:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a7f6:	|  |  |  |      move.l 4(a0),d1
    a7fa:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a800:	|  |  |  |      movea.l 12(a0),a0
    a804:	|  |  |  |      move.l 44(sp),d0
    a808:	|  |  |  |      lsl.l #3,d0
    a80a:	|  |  |  |      adda.l d0,a0
    a80c:	|  |  |  |      movea.l 4(a0),a0
    a810:	|  |  |  |      move.l 40(sp),d0
    a814:	|  |  |  |      add.l d0,d0
    a816:	|  |  |  |      add.l d0,d0
    a818:	|  |  |  |      adda.l d0,a0
    a81a:	|  |  |  |      move.l (a0),d0
    a81c:	|  |  |  |      lsl.l #3,d0
    a81e:	|  |  |  |      movea.l d1,a0
    a820:	|  |  |  |      adda.l d0,a0
    a822:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a828:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a82e:	|  |  |  |      move.l 4(a0),d1
    a832:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a838:	|  |  |  |      movea.l 12(a0),a0
    a83c:	|  |  |  |      move.l 44(sp),d0
    a840:	|  |  |  |      lsl.l #3,d0
    a842:	|  |  |  |      adda.l d0,a0
    a844:	|  |  |  |      movea.l 4(a0),a0
    a848:	|  |  |  |      move.l 36(sp),d0
    a84c:	|  |  |  |      add.l d0,d0
    a84e:	|  |  |  |      add.l d0,d0
    a850:	|  |  |  |      adda.l d0,a0
    a852:	|  |  |  |      move.l (a0),d0
    a854:	|  |  |  |      lsl.l #3,d0
    a856:	|  |  |  |      movea.l d1,a0
    a858:	|  |  |  |      adda.l d0,a0
    a85a:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a85e:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a864:	|  |  |  |      move.l 4(a0),d1
    a868:	|  |  |  |      movea.l 1cce2 <currentFloor>,a0
    a86e:	|  |  |  |      movea.l 12(a0),a0
    a872:	|  |  |  |      move.l 44(sp),d0
    a876:	|  |  |  |      lsl.l #3,d0
    a878:	|  |  |  |      adda.l d0,a0
    a87a:	|  |  |  |      movea.l 4(a0),a0
    a87e:	|  |  |  |      move.l 36(sp),d0
    a882:	|  |  |  |      add.l d0,d0
    a884:	|  |  |  |      add.l d0,d0
    a886:	|  |  |  |      adda.l d0,a0
    a888:	|  |  |  |      move.l (a0),d0
    a88a:	|  |  |  |      lsl.l #3,d0
    a88c:	|  |  |  |      movea.l d1,a0
    a88e:	|  |  |  |      adda.l d0,a0
    a890:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a896:	|  |  |  |      movea.l 68(sp),a0
    a89a:	|  |  |  |      move.l (a0),d1
    a89c:	|  |  |  |      movea.l 64(sp),a0
    a8a0:	|  |  |  |      move.l (a0),d0
    a8a2:	|  |  |  |      move.l d1,-(sp)
    a8a4:	|  |  |  |      move.l d0,-(sp)
    a8a6:	|  |  |  |      move.l 24(sp),-(sp)
    a8aa:	|  |  |  |      move.l 32(sp),-(sp)
    a8ae:	|  |  |  |      move.l 40(sp),-(sp)
    a8b2:	|  |  |  |      move.l 48(sp),-(sp)
    a8b6:	|  |  |  |      lea 28(sp),a0
    a8ba:	|  |  |  |      move.l a0,-(sp)
    a8bc:	|  |  |  |      lea 36(sp),a0
    a8c0:	|  |  |  |      move.l a0,-(sp)
    a8c2:	|  |  |  |      jsr 1617a <closestPointOnLine>
    a8c8:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a8cc:	|  |  |  |      movea.l 64(sp),a0
    a8d0:	|  |  |  |      move.l (a0),d0
    a8d2:	|  |  |  |      move.l 8(sp),d1
    a8d6:	|  |  |  |      move.l d0,d2
    a8d8:	|  |  |  |      sub.l d1,d2
    a8da:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a8de:	|  |  |  |      movea.l 68(sp),a0
    a8e2:	|  |  |  |      move.l (a0),d0
    a8e4:	|  |  |  |      move.l 4(sp),d1
    a8e8:	|  |  |  |      move.l d0,d2
    a8ea:	|  |  |  |      sub.l d1,d2
    a8ec:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a8f0:	|  |  |  |      move.l 28(sp),-(sp)
    a8f4:	|  |  |  |      move.l 32(sp),-(sp)
    a8f8:	|  |  |  |      jsr 17d08 <__mulsi3>
    a8fe:	|  |  |  |      addq.l #8,sp
    a900:	|  |  |  |      move.l d0,d2
    a902:	|  |  |  |      move.l 24(sp),-(sp)
    a906:	|  |  |  |      move.l 28(sp),-(sp)
    a90a:	|  |  |  |      jsr 17d08 <__mulsi3>
    a910:	|  |  |  |      addq.l #8,sp
    a912:	|  |  |  |      move.l d2,d1
    a914:	|  |  |  |      add.l d0,d1
    a916:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a91a:	|  |  |  |      move.l 12(sp),d2
    a91e:	|  |  |  |      cmp.l 32(sp),d2
    a922:	|  |  |  |  ,-- bge.s a93c <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    a924:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a92a:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a930:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a936:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a93c:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a942:	|  |  |  |      addq.l #1,40(sp)
    a946:	|  |  |  '----> movea.l 1cce2 <currentFloor>,a0
    a94c:	|  |  |         move.l 12(a0),d1
    a950:	|  |  |         move.l 44(sp),d0
    a954:	|  |  |         lsl.l #3,d0
    a956:	|  |  |         movea.l d1,a0
    a958:	|  |  |         adda.l d0,a0
    a95a:	|  |  |         move.l (a0),d0
    a95c:	|  |  |         cmp.l 40(sp),d0
    a960:	|  |  '-------- bgt.w a7ba <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a964:	|  |            addq.l #1,44(sp)
    a968:	|  '----------> movea.l 1cce2 <currentFloor>,a0
    a96e:	|               move.l 8(a0),d0
    a972:	|               cmp.l 44(sp),d0
    a976:	'-------------- bgt.w a794 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    a97a:	                moveq #-1,d0
    a97c:	                cmp.l 48(sp),d0
    a980:	            ,-- bne.s a986 <handleClosestPoint+0x22c>
    a982:	            |   clr.w d0
    a984:	         ,--|-- bra.s a9a0 <handleClosestPoint+0x246>
	*setX = gotX;
    a986:	         |  '-> movea.l 64(sp),a0
    a98a:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a98e:	         |      movea.l 68(sp),a0
    a992:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a996:	         |      movea.l 72(sp),a0
    a99a:	         |      move.l 48(sp),(a0)

	return TRUE;
    a99e:	         |      moveq #1,d0
}
    a9a0:	         '----> move.l (sp)+,d2
    a9a2:	                lea 56(sp),sp
    a9a6:	                rts

0000a9a8 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a9a8:	clr.l 1cc3e <personRegion+0x10>
	personRegion.sY = 0;
    a9ae:	clr.l 1cc42 <personRegion+0x14>
	personRegion.di = -1;
    a9b4:	moveq #-1,d0
    a9b6:	move.l d0,1cc46 <personRegion+0x18>
	allScreenRegions = NULL;
    a9bc:	clr.l 1ccd6 <allScreenRegions>

	return TRUE;
    a9c2:	moveq #1,d0
}
    a9c4:	rts

0000a9c6 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a9c6:	          subq.l #4,sp
    a9c8:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a9ca:	          tst.l 12(sp)
    a9ce:	      ,-- bne.s a9d6 <jumpPerson+0x10>
    a9d0:	      |   tst.l 16(sp)
    a9d4:	,-----|-- beq.s aa4a <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9d6:	|     '-> move.l 20(sp),-(sp)
    a9da:	|         jsr a642 <findPerson>
    a9e0:	|         addq.l #4,sp
    a9e2:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9e6:	|  ,----- beq.s aa4e <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9e8:	|  |      movea.l 4(sp),a0
    a9ec:	|  |      move.l 68(a0),d0
    a9f0:	|  |  ,-- beq.s aa04 <jumpPerson+0x3e>
    a9f2:	|  |  |   movea.l 4(sp),a0
    a9f6:	|  |  |   move.l 68(a0),d0
    a9fa:	|  |  |   move.l d0,-(sp)
    a9fc:	|  |  |   jsr 503c <abortFunction>
    aa02:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aa04:	|  |  '-> movea.l 4(sp),a0
    aa08:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aa0c:	|  |      movea.l 4(sp),a0
    aa10:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    aa14:	|  |      movea.l 4(sp),a0
    aa18:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    aa1c:	|  |      move.l 16(sp),-(sp)
    aa20:	|  |      jsr 177ae <__floatsisf>
    aa26:	|  |      addq.l #4,sp
    aa28:	|  |      move.l d0,d2
    aa2a:	|  |      move.l 12(sp),-(sp)
    aa2e:	|  |      jsr 177ae <__floatsisf>
    aa34:	|  |      addq.l #4,sp
    aa36:	|  |      move.l d2,-(sp)
    aa38:	|  |      move.l d0,-(sp)
    aa3a:	|  |      move.l 12(sp),-(sp)
    aa3e:	|  |      jsr adec <moveAndScale>
    aa44:	|  |      lea 12(sp),sp
    aa48:	|  |  ,-- bra.s aa50 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa4a:	'--|--|-> nop
    aa4c:	   |  +-- bra.s aa50 <jumpPerson+0x8a>
    if (!moveMe) return;
    aa4e:	   '--|-> nop
}
    aa50:	      '-> move.l (sp)+,d2
    aa52:	          addq.l #4,sp
    aa54:	          rts

0000aa56 <killAllPeople>:


void killAllPeople () {
    aa56:	          subq.l #8,sp
    aa58:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa5a:	   ,----- bra.s aac6 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa5c:	,--|----> movea.l 1cc2a <allPeople>,a0
    aa62:	|  |      move.l 68(a0),d0
    aa66:	|  |  ,-- beq.s aa7c <killAllPeople+0x26>
    aa68:	|  |  |   movea.l 1cc2a <allPeople>,a0
    aa6e:	|  |  |   move.l 68(a0),d0
    aa72:	|  |  |   move.l d0,-(sp)
    aa74:	|  |  |   jsr 503c <abortFunction>
    aa7a:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa7c:	|  |  '-> movea.l 1cc2a <allPeople>,a0
    aa82:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa86:	|  |      move.l 1cc2a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aa8e:	|  |      movea.l 1cc2a <allPeople>,a0
    aa94:	|  |      move.l 36(a0),d0
    aa98:	|  |      move.l d0,1cc2a <allPeople>
		removeObjectType (killPeople -> thisType);
    aa9e:	|  |      movea.l 8(sp),a0
    aaa2:	|  |      move.l 114(a0),d0
    aaa6:	|  |      move.l d0,-(sp)
    aaa8:	|  |      jsr d958 <removeObjectType>
    aaae:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aab0:	|  |      move.l 8(sp),4(sp)
    aab6:	|  |      move.l 1cbca <SysBase>,d0
    aabc:	|  |      movea.l d0,a6
    aabe:	|  |      movea.l 4(sp),a1
    aac2:	|  |      jsr -690(a6)
	while (allPeople) {
    aac6:	|  '----> move.l 1cc2a <allPeople>,d0
    aacc:	'-------- bne.s aa5c <killAllPeople+0x6>
	}
}
    aace:	          nop
    aad0:	          nop
    aad2:	          movea.l (sp)+,a6
    aad4:	          addq.l #8,sp
    aad6:	          rts

0000aad8 <killMostPeople>:

void killMostPeople() {
    aad8:	          lea -12(sp),sp
    aadc:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aade:	          move.l #117802,12(sp)

    while (*lookyHere) {
    aae6:	   ,----- bra.w ab6c <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aaea:	,--|----> movea.l 12(sp),a0
    aaee:	|  |      movea.l (a0),a0
    aaf0:	|  |      move.l 118(a0),d0
    aaf4:	|  |      moveq #32,d1
    aaf6:	|  |      and.l d1,d0
    aaf8:	|  |  ,-- beq.s ab0a <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aafa:	|  |  |   movea.l 12(sp),a0
    aafe:	|  |  |   move.l (a0),d0
    ab00:	|  |  |   moveq #36,d1
    ab02:	|  |  |   add.l d0,d1
    ab04:	|  |  |   move.l d1,12(sp)
    ab08:	|  +--|-- bra.s ab6c <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    ab0a:	|  |  '-> movea.l 12(sp),a0
    ab0e:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    ab12:	|  |      movea.l 8(sp),a0
    ab16:	|  |      move.l 36(a0),d0
    ab1a:	|  |      movea.l 12(sp),a0
    ab1e:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ab20:	|  |      movea.l 8(sp),a0
    ab24:	|  |      move.l 68(a0),d0
    ab28:	|  |  ,-- beq.s ab3c <killMostPeople+0x64>
    ab2a:	|  |  |   movea.l 8(sp),a0
    ab2e:	|  |  |   move.l 68(a0),d0
    ab32:	|  |  |   move.l d0,-(sp)
    ab34:	|  |  |   jsr 503c <abortFunction>
    ab3a:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ab3c:	|  |  '-> movea.l 8(sp),a0
    ab40:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ab44:	|  |      movea.l 8(sp),a0
    ab48:	|  |      move.l 114(a0),d0
    ab4c:	|  |      move.l d0,-(sp)
    ab4e:	|  |      jsr d958 <removeObjectType>
    ab54:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab56:	|  |      move.l 8(sp),4(sp)
    ab5c:	|  |      move.l 1cbca <SysBase>,d0
    ab62:	|  |      movea.l d0,a6
    ab64:	|  |      movea.l 4(sp),a1
    ab68:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab6c:	|  '----> movea.l 12(sp),a0
    ab70:	|         move.l (a0),d0
    ab72:	'-------- bne.w aaea <killMostPeople+0x12>
        }
    }
}
    ab76:	          nop
    ab78:	          nop
    ab7a:	          movea.l (sp)+,a6
    ab7c:	          lea 12(sp),sp
    ab80:	          rts

0000ab82 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab82:	clr.l -(sp)
    ab84:	move.l sp,d0
    ab86:	addq.l #8,d0
    ab88:	move.l d0,-(sp)
    ab8a:	jsr 41de <setFrames>
    ab90:	addq.l #8,sp
}
    ab92:	nop
    ab94:	rts

0000ab96 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab96:	          lea -12(sp),sp
    ab9a:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    ab9c:	          pea 193f7 <PutChar+0x15d9>
    aba2:	          jsr 1737c <KPrintF>
    aba8:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    abaa:	          tst.l 20(sp)
    abae:	      ,-- bne.s abbc <makeWalkingPerson+0x26>
    abb0:	      |   tst.l 24(sp)
    abb4:	      +-- bne.s abbc <makeWalkingPerson+0x26>
    abb6:	      |   clr.w d0
    abb8:	,-----|-- bra.w ad7e <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    abbc:	|     '-> movea.l 1cce2 <currentFloor>,a0
    abc2:	|         move.l 8(a0),d0
    abc6:	|     ,-- bne.s abce <makeWalkingPerson+0x38>
    abc8:	|     |   clr.w d0
    abca:	+-----|-- bra.w ad7e <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    abce:	|     '-> move.l 28(sp),d0
    abd2:	|         move.l d0,-(sp)
    abd4:	|         jsr a642 <findPerson>
    abda:	|         addq.l #4,sp
    abdc:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    abe0:	|     ,-- bne.s abfc <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    abe2:	|     |   move.l 28(sp),d0
    abe6:	|     |   move.l d0,-(sp)
    abe8:	|     |   pea 19412 <PutChar+0x15f4>
    abee:	|     |   jsr 1737c <KPrintF>
    abf4:	|     |   addq.l #8,sp
		return FALSE;
    abf6:	|     |   clr.w d0
    abf8:	+-----|-- bra.w ad7e <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    abfc:	|     '-> movea.l 12(sp),a0
    ac00:	|         move.l 68(a0),d0
    ac04:	|     ,-- beq.s ac18 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    ac06:	|     |   movea.l 12(sp),a0
    ac0a:	|     |   move.l 68(a0),d0
    ac0e:	|     |   move.l d0,-(sp)
    ac10:	|     |   jsr 503c <abortFunction>
    ac16:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    ac18:	|     '-> movea.l 12(sp),a0
    ac1c:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    ac20:	|         movea.l 12(sp),a0
    ac24:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ac2a:	|         movea.l 12(sp),a0
    ac2e:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ac34:	|         movea.l 12(sp),a0
    ac38:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ac3e:	|         movea.l 12(sp),a0
    ac42:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ac48:	|         move.l 24(sp),-(sp)
    ac4c:	|         move.l 24(sp),-(sp)
    ac50:	|         jsr 166c2 <inFloor>
    ac56:	|         addq.l #8,sp
    ac58:	|         movea.l 12(sp),a0
    ac5c:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ac60:	|         movea.l 12(sp),a0
    ac64:	|         move.l 60(a0),d0
    ac68:	|         moveq #-1,d1
    ac6a:	|         cmp.l d0,d1
    ac6c:	|     ,-- bne.s ac9c <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac6e:	|     |   movea.w #60,a0
    ac72:	|     |   adda.l 12(sp),a0
    ac76:	|     |   moveq #44,d1
    ac78:	|     |   add.l 12(sp),d1
    ac7c:	|     |   moveq #40,d0
    ac7e:	|     |   add.l 12(sp),d0
    ac82:	|     |   move.l a0,-(sp)
    ac84:	|     |   move.l d1,-(sp)
    ac86:	|     |   move.l d0,-(sp)
    ac88:	|     |   jsr a75a <handleClosestPoint>
    ac8e:	|     |   lea 12(sp),sp
    ac92:	|     |   tst.w d0
    ac94:	|     +-- bne.s ac9c <makeWalkingPerson+0x106>
    ac96:	|     |   clr.w d0
    ac98:	+-----|-- bra.w ad7e <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac9c:	|     '-> movea.l 12(sp),a0
    aca0:	|         move.l 4(a0),d0
    aca4:	|         move.l d0,-(sp)
    aca6:	|         jsr 17746 <__fixsfsi>
    acac:	|         addq.l #4,sp
    acae:	|         move.l d0,d2
    acb0:	|         movea.l 12(sp),a0
    acb4:	|         move.l (a0),d0
    acb6:	|         move.l d0,-(sp)
    acb8:	|         jsr 17746 <__fixsfsi>
    acbe:	|         addq.l #4,sp
    acc0:	|         move.l d2,-(sp)
    acc2:	|         move.l d0,-(sp)
    acc4:	|         jsr 166c2 <inFloor>
    acca:	|         addq.l #8,sp
    accc:	|         movea.l 12(sp),a0
    acd0:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    acd4:	|         movea.l 12(sp),a0
    acd8:	|         move.l 56(a0),d0
    acdc:	|         moveq #-1,d1
    acde:	|         cmp.l d0,d1
    ace0:	|     ,-- bne.s ad32 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ace2:	|     |   movea.l 12(sp),a0
    ace6:	|     |   move.l (a0),d0
    ace8:	|     |   move.l d0,-(sp)
    acea:	|     |   jsr 17746 <__fixsfsi>
    acf0:	|     |   addq.l #4,sp
    acf2:	|     |   move.l d0,8(sp)
    acf6:	|     |   movea.l 12(sp),a0
    acfa:	|     |   move.l 4(a0),d0
    acfe:	|     |   move.l d0,-(sp)
    ad00:	|     |   jsr 17746 <__fixsfsi>
    ad06:	|     |   addq.l #4,sp
    ad08:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ad0c:	|     |   moveq #56,d0
    ad0e:	|     |   add.l 12(sp),d0
    ad12:	|     |   move.l d0,-(sp)
    ad14:	|     |   lea 8(sp),a0
    ad18:	|     |   move.l a0,-(sp)
    ad1a:	|     |   moveq #16,d0
    ad1c:	|     |   add.l sp,d0
    ad1e:	|     |   move.l d0,-(sp)
    ad20:	|     |   jsr a75a <handleClosestPoint>
    ad26:	|     |   lea 12(sp),sp
    ad2a:	|     |   tst.w d0
    ad2c:	|     +-- bne.s ad32 <makeWalkingPerson+0x19c>
    ad2e:	|     |   clr.w d0
    ad30:	+-----|-- bra.s ad7e <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    ad32:	|     '-> move.l 12(sp),-(sp)
    ad36:	|         jsr 99a4 <doBorderStuff>
    ad3c:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ad3e:	|         clr.l -(sp)
    ad40:	|         move.l 16(sp),-(sp)
    ad44:	|         jsr bfea <walkMe>
    ad4a:	|         addq.l #8,sp
    ad4c:	|         tst.w d0
    ad4e:	|     ,-- bne.s ad5a <makeWalkingPerson+0x1c4>
    ad50:	|     |   movea.l 12(sp),a0
    ad54:	|     |   move.w 66(a0),d0
    ad58:	|  ,--|-- beq.s ad7c <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    ad5a:	|  |  '-> lea 28(sp),a0
    ad5e:	|  |      move.l a0,-(sp)
    ad60:	|  |      pea 1943b <PutChar+0x161d>
    ad66:	|  |      jsr 1737c <KPrintF>
    ad6c:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    ad6e:	|  |      movea.l 12(sp),a0
    ad72:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ad78:	|  |      moveq #1,d0
    ad7a:	+--|----- bra.s ad7e <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    ad7c:	|  '----> clr.w d0
	}
}
    ad7e:	'-------> move.l (sp)+,d2
    ad80:	          lea 12(sp),sp
    ad84:	          rts

0000ad86 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad86:	       lea -16(sp),sp
    ad8a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad8c:	       moveq #12,d0
    ad8e:	       move.l d0,16(sp)
    ad92:	       clr.l 12(sp)
    ad96:	       move.l 1cbca <SysBase>,d0
    ad9c:	       movea.l d0,a6
    ad9e:	       move.l 16(sp),d0
    ada2:	       move.l 12(sp),d1
    ada6:	       jsr -684(a6)
    adaa:	       move.l d0,8(sp)
    adae:	       move.l 8(sp),d0
    adb2:	       move.l d0,4(sp)
    if(newAnim == 0) {
    adb6:	   ,-- bne.s adca <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    adb8:	   |   pea 1946e <PutChar+0x1650>
    adbe:	   |   jsr 1737c <KPrintF>
    adc4:	   |   addq.l #4,sp
        return NULL;    
    adc6:	   |   moveq #0,d0
    adc8:	,--|-- bra.s ade4 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    adca:	|  '-> movea.l 4(sp),a0
    adce:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    add0:	|      movea.l 4(sp),a0
    add4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    add8:	|      movea.l 4(sp),a0
    addc:	|      clr.l 4(a0)
	return newAnim;
    ade0:	|      move.l 4(sp),d0
}
    ade4:	'----> movea.l (sp)+,a6
    ade6:	       lea 16(sp),sp
    adea:	       rts

0000adec <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    adec:	    move.l d2,-(sp)
	me->x = x;
    adee:	    movea.l 8(sp),a0
    adf2:	    move.l 12(sp),(a0)
	me->y = y;
    adf6:	    movea.l 8(sp),a0
    adfa:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ae00:	    movea.l 8(sp),a0
    ae04:	    clr.l 8(a0)
	me->oldy = 0;
    ae08:	    movea.l 8(sp),a0
    ae0c:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ae10:	    movea.l 8(sp),a0
    ae14:	    move.l 118(a0),d0
    ae18:	    moveq #2,d1
    ae1a:	    and.l d1,d0
    ae1c:	,-- bne.s ae74 <moveAndScale+0x88>
    ae1e:	|   move.w 1c552 <scaleDivide>,d0
    ae24:	+-- beq.s ae74 <moveAndScale+0x88>
    ae26:	|   movea.l 8(sp),a0
    ae2a:	|   move.l 4(a0),d2
    ae2e:	|   move.w 1c550 <scaleHorizon>,d0
    ae34:	|   movea.w d0,a0
    ae36:	|   move.l a0,-(sp)
    ae38:	|   jsr 177ae <__floatsisf>
    ae3e:	|   addq.l #4,sp
    ae40:	|   move.l d0,-(sp)
    ae42:	|   move.l d2,-(sp)
    ae44:	|   jsr 17aa2 <__subsf3>
    ae4a:	|   addq.l #8,sp
    ae4c:	|   move.l d0,d2
    ae4e:	|   move.w 1c552 <scaleDivide>,d0
    ae54:	|   movea.w d0,a0
    ae56:	|   move.l a0,-(sp)
    ae58:	|   jsr 177ae <__floatsisf>
    ae5e:	|   addq.l #4,sp
    ae60:	|   move.l d0,-(sp)
    ae62:	|   move.l d2,-(sp)
    ae64:	|   jsr 17664 <__divsf3>
    ae6a:	|   addq.l #8,sp
    ae6c:	|   movea.l 8(sp),a0
    ae70:	|   move.l d0,32(a0)
}
    ae74:	'-> nop
    ae76:	    move.l (sp)+,d2
    ae78:	    rts

0000ae7a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ae7a:	          lea -16(sp),sp
    ae7e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae80:	          move.l 24(sp),-(sp)
    ae84:	          jsr a642 <findPerson>
    ae8a:	          addq.l #4,sp
    ae8c:	          move.l d0,8(sp)

    if (p) {
    ae90:	,-------- beq.w af70 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae94:	|         move.l 1ccda <overRegion>,d0
    ae9a:	|         cmpi.l #117806,d0
    aea0:	|     ,-- bne.s aebe <removeOneCharacter+0x44>
    aea2:	|     |   movea.l 1ccda <overRegion>,a0
    aea8:	|     |   move.l 28(a0),d1
    aeac:	|     |   movea.l 8(sp),a0
    aeb0:	|     |   move.l 114(a0),d0
    aeb4:	|     |   cmp.l d1,d0
    aeb6:	|     +-- bne.s aebe <removeOneCharacter+0x44>
            overRegion = NULL;
    aeb8:	|     |   clr.l 1ccda <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    aebe:	|     '-> movea.l 8(sp),a0
    aec2:	|         move.l 68(a0),d0
    aec6:	|     ,-- beq.s aeda <removeOneCharacter+0x60>
    aec8:	|     |   movea.l 8(sp),a0
    aecc:	|     |   move.l 68(a0),d0
    aed0:	|     |   move.l d0,-(sp)
    aed2:	|     |   jsr 503c <abortFunction>
    aed8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    aeda:	|     '-> movea.l 8(sp),a0
    aede:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    aee2:	|         clr.l 12(sp)
    aee6:	|     ,-- bra.s af0e <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    aee8:	|  ,--|-> movea.l 8(sp),a0
    aeec:	|  |  |   movea.l 80(a0),a0
    aef0:	|  |  |   move.l (a0),d1
    aef2:	|  |  |   move.l 12(sp),d0
    aef6:	|  |  |   add.l d0,d0
    aef8:	|  |  |   add.l d0,d0
    aefa:	|  |  |   movea.l d1,a0
    aefc:	|  |  |   adda.l d0,a0
    aefe:	|  |  |   move.l (a0),d0
    af00:	|  |  |   move.l d0,-(sp)
    af02:	|  |  |   jsr 9920 <deleteAnim>
    af08:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    af0a:	|  |  |   addq.l #1,12(sp)
    af0e:	|  |  '-> moveq #2,d0
    af10:	|  |      cmp.l 12(sp),d0
    af14:	|  '----- bge.s aee8 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    af16:	|         move.l #117802,16(sp)
    af1e:	|     ,-- bra.s af2e <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    af20:	|  ,--|-> movea.l 16(sp),a0
    af24:	|  |  |   move.l (a0),d0
    af26:	|  |  |   moveq #36,d1
    af28:	|  |  |   add.l d0,d1
    af2a:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    af2e:	|  |  '-> movea.l 16(sp),a0
    af32:	|  |      move.l (a0),d0
    af34:	|  |      cmp.l 8(sp),d0
    af38:	|  '----- bne.s af20 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    af3a:	|         movea.l 8(sp),a0
    af3e:	|         move.l 36(a0),d0
    af42:	|         movea.l 16(sp),a0
    af46:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    af48:	|         movea.l 8(sp),a0
    af4c:	|         move.l 114(a0),d0
    af50:	|         move.l d0,-(sp)
    af52:	|         jsr d958 <removeObjectType>
    af58:	|         addq.l #4,sp
        FreeVec(p);
    af5a:	|         move.l 8(sp),4(sp)
    af60:	|         move.l 1cbca <SysBase>,d0
    af66:	|         movea.l d0,a6
    af68:	|         movea.l 4(sp),a1
    af6c:	|         jsr -690(a6)
		
    }
}
    af70:	'-------> nop
    af72:	          movea.l (sp)+,a6
    af74:	          lea 16(sp),sp
    af78:	          rts

0000af7a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    af7a:	       subq.l #8,sp
    af7c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af7e:	       movea.l 16(sp),a0
    af82:	       movea.l 80(a0),a0
    af86:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af8c:	       movea.l 16(sp),a0
    af90:	       move.l 92(a0),d2
    af94:	       move.l 4(sp),-(sp)
    af98:	       pea b4 <_start+0xb4>
    af9c:	       jsr 17d86 <__divsi3>
    afa2:	       addq.l #8,sp
    afa4:	       add.l d2,d0
    afa6:	       move.l d0,d1
    afa8:	       addi.l #180,d1
    afae:	       movea.l 16(sp),a0
    afb2:	       move.l 100(a0),d0
    afb6:	       move.l d1,d2
    afb8:	       add.l d0,d2
    afba:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    afbe:	   ,-- bra.s afc8 <rethinkAngle+0x4e>
    afc0:	,--|-> addi.l #-360,8(sp)
    afc8:	|  '-> cmpi.l #359,8(sp)
    afd0:	'----- bgt.s afc0 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    afd2:	       move.l 4(sp),-(sp)
    afd6:	       move.l 12(sp),-(sp)
    afda:	       jsr 17d08 <__mulsi3>
    afe0:	       addq.l #8,sp
    afe2:	       pea 168 <decodeFilename+0x50>
    afe6:	       move.l d0,-(sp)
    afe8:	       jsr 17d86 <__divsi3>
    afee:	       addq.l #8,sp
    aff0:	       movea.l 16(sp),a0
    aff4:	       move.l d0,106(a0)
}
    aff8:	       nop
    affa:	       move.l (sp)+,d2
    affc:	       addq.l #8,sp
    affe:	       rts

0000b000 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b000:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b002:	          movea.l 8(sp),a0
    b006:	          move.l 8(a0),d0
    b00a:	          move.l 12(sp),-(sp)
    b00e:	          move.l d0,-(sp)
    b010:	          jsr 8d0 <put2bytes>
    b016:	          addq.l #8,sp
	if (p -> numFrames) {
    b018:	          movea.l 8(sp),a0
    b01c:	          move.l 8(a0),d0
    b020:	,-------- beq.w b0c4 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b024:	|         movea.l 8(sp),a0
    b028:	|         movea.l (a0),a0
    b02a:	|         move.l (a0),d0
    b02c:	|         move.l 12(sp),-(sp)
    b030:	|         move.l d0,-(sp)
    b032:	|         jsr 958 <put4bytes>
    b038:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b03a:	|         clr.l (sp)
    b03c:	|     ,-- bra.s b0b6 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b03e:	|  ,--|-> movea.l 8(sp),a0
    b042:	|  |  |   movea.l 4(a0),a0
    b046:	|  |  |   move.l (sp),d1
    b048:	|  |  |   move.l d1,d0
    b04a:	|  |  |   add.l d0,d0
    b04c:	|  |  |   add.l d1,d0
    b04e:	|  |  |   add.l d0,d0
    b050:	|  |  |   add.l d0,d0
    b052:	|  |  |   adda.l d0,a0
    b054:	|  |  |   move.l (a0),d0
    b056:	|  |  |   move.l 12(sp),-(sp)
    b05a:	|  |  |   move.l d0,-(sp)
    b05c:	|  |  |   jsr 958 <put4bytes>
    b062:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b064:	|  |  |   movea.l 8(sp),a0
    b068:	|  |  |   movea.l 4(a0),a0
    b06c:	|  |  |   move.l (sp),d1
    b06e:	|  |  |   move.l d1,d0
    b070:	|  |  |   add.l d0,d0
    b072:	|  |  |   add.l d1,d0
    b074:	|  |  |   add.l d0,d0
    b076:	|  |  |   add.l d0,d0
    b078:	|  |  |   adda.l d0,a0
    b07a:	|  |  |   move.l 4(a0),d0
    b07e:	|  |  |   move.l 12(sp),-(sp)
    b082:	|  |  |   move.l d0,-(sp)
    b084:	|  |  |   jsr 958 <put4bytes>
    b08a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b08c:	|  |  |   movea.l 8(sp),a0
    b090:	|  |  |   movea.l 4(a0),a0
    b094:	|  |  |   move.l (sp),d1
    b096:	|  |  |   move.l d1,d0
    b098:	|  |  |   add.l d0,d0
    b09a:	|  |  |   add.l d1,d0
    b09c:	|  |  |   add.l d0,d0
    b09e:	|  |  |   add.l d0,d0
    b0a0:	|  |  |   adda.l d0,a0
    b0a2:	|  |  |   move.l 8(a0),d0
    b0a6:	|  |  |   move.l 12(sp),-(sp)
    b0aa:	|  |  |   move.l d0,-(sp)
    b0ac:	|  |  |   jsr 958 <put4bytes>
    b0b2:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b0b4:	|  |  |   addq.l #1,(sp)
    b0b6:	|  |  '-> movea.l 8(sp),a0
    b0ba:	|  |      move.l 8(a0),d0
    b0be:	|  |      cmp.l (sp),d0
    b0c0:	|  '----- bgt.w b03e <saveAnim+0x3e>
		}
	}
	return TRUE;
    b0c4:	'-------> moveq #1,d0
}
    b0c6:	          addq.l #4,sp
    b0c8:	          rts

0000b0ca <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b0ca:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b0cc:	             movea.l 8(sp),a0
    b0d0:	             move.l 4(a0),d0
    b0d4:	             move.l 12(sp),-(sp)
    b0d8:	             move.l d0,-(sp)
    b0da:	             jsr 8d0 <put2bytes>
    b0e0:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0e2:	             clr.l (sp)
    b0e4:	   ,-------- bra.s b110 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b0e6:	,--|-------> movea.l 8(sp),a0
    b0ea:	|  |         move.l (a0),d1
    b0ec:	|  |         move.l (sp),d0
    b0ee:	|  |         add.l d0,d0
    b0f0:	|  |         add.l d0,d0
    b0f2:	|  |         movea.l d1,a0
    b0f4:	|  |         adda.l d0,a0
    b0f6:	|  |         move.l (a0),d0
    b0f8:	|  |         move.l 12(sp),-(sp)
    b0fc:	|  |         move.l d0,-(sp)
    b0fe:	|  |         jsr b000 <saveAnim>
    b104:	|  |         addq.l #8,sp
    b106:	|  |         tst.w d0
    b108:	|  |     ,-- bne.s b10e <saveCostume+0x44>
    b10a:	|  |     |   clr.w d0
    b10c:	|  |  ,--|-- bra.s b124 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b10e:	|  |  |  '-> addq.l #1,(sp)
    b110:	|  '--|----> movea.l 8(sp),a0
    b114:	|     |      move.l 4(a0),d1
    b118:	|     |      move.l d1,d0
    b11a:	|     |      add.l d0,d0
    b11c:	|     |      add.l d1,d0
    b11e:	|     |      cmp.l (sp),d0
    b120:	'-----|----- bgt.s b0e6 <saveCostume+0x1c>
	}

	return TRUE;
    b122:	      |      moveq #1,d0
}
    b124:	      '----> addq.l #4,sp
    b126:	             rts

0000b128 <savePeople>:

BOOL savePeople (BPTR fp) {
    b128:	             lea -144(sp),sp
    b12c:	             move.l a6,-(sp)
    b12e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b130:	             move.l 1cc2a <allPeople>,148(sp)
	int countPeople = 0, a;
    b138:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b13c:	             move.w 1c550 <scaleHorizon>,d0
    b142:	             movea.w d0,a0
    b144:	             move.l 156(sp),-(sp)
    b148:	             move.l a0,-(sp)
    b14a:	             jsr a9c <putSigned>
    b150:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b152:	             move.w 1c552 <scaleDivide>,d0
    b158:	             movea.w d0,a0
    b15a:	             move.l 156(sp),-(sp)
    b15e:	             move.l a0,-(sp)
    b160:	             jsr a9c <putSigned>
    b166:	             addq.l #8,sp

	while (me) {
    b168:	         ,-- bra.s b178 <savePeople+0x50>
		countPeople ++;
    b16a:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b16e:	      |  |   movea.l 148(sp),a0
    b172:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b178:	      |  '-> tst.l 148(sp)
    b17c:	      '----- bne.s b16a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b17e:	             move.l 156(sp),-(sp)
    b182:	             move.l 148(sp),-(sp)
    b186:	             jsr 8d0 <put2bytes>
    b18c:	             addq.l #8,sp

	me = allPeople;
    b18e:	             move.l 1cc2a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b196:	             clr.l 140(sp)
    b19a:	   ,-------- bra.w b5f2 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b19e:	,--|-------> movea.l 148(sp),a0
    b1a2:	|  |         move.l (a0),d0
    b1a4:	|  |         move.l 156(sp),-(sp)
    b1a8:	|  |         move.l d0,-(sp)
    b1aa:	|  |         jsr a46 <putFloat>
    b1b0:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b1b2:	|  |         movea.l 148(sp),a0
    b1b6:	|  |         move.l 4(a0),d0
    b1ba:	|  |         move.l 156(sp),-(sp)
    b1be:	|  |         move.l d0,-(sp)
    b1c0:	|  |         jsr a46 <putFloat>
    b1c6:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b1c8:	|  |         movea.l 148(sp),a0
    b1cc:	|  |         move.l 80(a0),d0
    b1d0:	|  |         move.l 156(sp),-(sp)
    b1d4:	|  |         move.l d0,-(sp)
    b1d6:	|  |         jsr b0ca <saveCostume>
    b1dc:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b1de:	|  |         movea.l 148(sp),a0
    b1e2:	|  |         move.l 72(a0),d0
    b1e6:	|  |         move.l 156(sp),-(sp)
    b1ea:	|  |         move.l d0,-(sp)
    b1ec:	|  |         jsr b000 <saveAnim>
    b1f2:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b1f4:	|  |         move.l 156(sp),136(sp)
    b1fa:	|  |         movea.l 148(sp),a0
    b1fe:	|  |         move.l 72(a0),d1
    b202:	|  |         movea.l 148(sp),a0
    b206:	|  |         move.l 76(a0),d0
    b20a:	|  |         cmp.l d1,d0
    b20c:	|  |         seq d0
    b20e:	|  |         neg.b d0
    b210:	|  |         move.b d0,d0
    b212:	|  |         andi.l #255,d0
    b218:	|  |         move.l d0,132(sp)
    b21c:	|  |         move.l 1cbd2 <DOSBase>,d0
    b222:	|  |         movea.l d0,a6
    b224:	|  |         move.l 136(sp),d1
    b228:	|  |         move.l 132(sp),d2
    b22c:	|  |         jsr -312(a6)
    b230:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b234:	|  |         movea.l 148(sp),a0
    b238:	|  |         move.l 32(a0),d0
    b23c:	|  |         move.l 156(sp),-(sp)
    b240:	|  |         move.l d0,-(sp)
    b242:	|  |         jsr a46 <putFloat>
    b248:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b24a:	|  |         movea.l 148(sp),a0
    b24e:	|  |         move.l 118(a0),d0
    b252:	|  |         move.l 156(sp),-(sp)
    b256:	|  |         move.l d0,-(sp)
    b258:	|  |         jsr 8d0 <put2bytes>
    b25e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b260:	|  |         movea.l 148(sp),a0
    b264:	|  |         move.l 20(a0),d0
    b268:	|  |         move.l 156(sp),-(sp)
    b26c:	|  |         move.l d0,-(sp)
    b26e:	|  |         jsr 8d0 <put2bytes>
    b274:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b276:	|  |         movea.l 148(sp),a0
    b27a:	|  |         move.l 40(a0),d0
    b27e:	|  |         move.l 156(sp),-(sp)
    b282:	|  |         move.l d0,-(sp)
    b284:	|  |         jsr 8d0 <put2bytes>
    b28a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b28c:	|  |         movea.l 148(sp),a0
    b290:	|  |         move.l 44(a0),d0
    b294:	|  |         move.l 156(sp),-(sp)
    b298:	|  |         move.l d0,-(sp)
    b29a:	|  |         jsr 8d0 <put2bytes>
    b2a0:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b2a2:	|  |         movea.l 148(sp),a0
    b2a6:	|  |         move.l 48(a0),d0
    b2aa:	|  |         move.l 156(sp),-(sp)
    b2ae:	|  |         move.l d0,-(sp)
    b2b0:	|  |         jsr 8d0 <put2bytes>
    b2b6:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b2b8:	|  |         movea.l 148(sp),a0
    b2bc:	|  |         move.l 52(a0),d0
    b2c0:	|  |         move.l 156(sp),-(sp)
    b2c4:	|  |         move.l d0,-(sp)
    b2c6:	|  |         jsr 8d0 <put2bytes>
    b2cc:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b2ce:	|  |         movea.l 148(sp),a0
    b2d2:	|  |         move.l 84(a0),d0
    b2d6:	|  |         move.l 156(sp),-(sp)
    b2da:	|  |         move.l d0,-(sp)
    b2dc:	|  |         jsr 8d0 <put2bytes>
    b2e2:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b2e4:	|  |         movea.l 148(sp),a0
    b2e8:	|  |         move.l 88(a0),d0
    b2ec:	|  |         move.l 156(sp),-(sp)
    b2f0:	|  |         move.l d0,-(sp)
    b2f2:	|  |         jsr 8d0 <put2bytes>
    b2f8:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b2fa:	|  |         movea.l 148(sp),a0
    b2fe:	|  |         move.l 28(a0),d0
    b302:	|  |         move.l 156(sp),-(sp)
    b306:	|  |         move.l d0,-(sp)
    b308:	|  |         jsr 8d0 <put2bytes>
    b30e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b310:	|  |         movea.l 148(sp),a0
    b314:	|  |         move.l 122(a0),d0
    b318:	|  |         move.l 156(sp),-(sp)
    b31c:	|  |         move.l d0,-(sp)
    b31e:	|  |         jsr 8d0 <put2bytes>
    b324:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b326:	|  |         movea.l 148(sp),a0
    b32a:	|  |         move.l 24(a0),d0
    b32e:	|  |         move.l d0,d0
    b330:	|  |         movea.w d0,a0
    b332:	|  |         move.l 156(sp),-(sp)
    b336:	|  |         move.l a0,-(sp)
    b338:	|  |         jsr a9c <putSigned>
    b33e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b340:	|  |         move.l 156(sp),124(sp)
    b346:	|  |         movea.l 148(sp),a0
    b34a:	|  |         move.w 104(a0),d0
    b34e:	|  |         movea.w d0,a0
    b350:	|  |         move.l a0,120(sp)
    b354:	|  |         move.l 1cbd2 <DOSBase>,d0
    b35a:	|  |         movea.l d0,a6
    b35c:	|  |         move.l 124(sp),d1
    b360:	|  |         move.l 120(sp),d2
    b364:	|  |         jsr -312(a6)
    b368:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b36c:	|  |         move.l 156(sp),112(sp)
    b372:	|  |         movea.l 148(sp),a0
    b376:	|  |         move.w 64(a0),d0
    b37a:	|  |         movea.w d0,a0
    b37c:	|  |         move.l a0,108(sp)
    b380:	|  |         move.l 1cbd2 <DOSBase>,d0
    b386:	|  |         movea.l d0,a6
    b388:	|  |         move.l 112(sp),d1
    b38c:	|  |         move.l 108(sp),d2
    b390:	|  |         jsr -312(a6)
    b394:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b398:	|  |         move.l 156(sp),100(sp)
    b39e:	|  |         movea.l 148(sp),a0
    b3a2:	|  |         move.w 66(a0),d0
    b3a6:	|  |         movea.w d0,a0
    b3a8:	|  |         move.l a0,96(sp)
    b3ac:	|  |         move.l 1cbd2 <DOSBase>,d0
    b3b2:	|  |         movea.l d0,a6
    b3b4:	|  |         move.l 100(sp),d1
    b3b8:	|  |         move.l 96(sp),d2
    b3bc:	|  |         jsr -312(a6)
    b3c0:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b3c4:	|  |         movea.l 148(sp),a0
    b3c8:	|  |         move.l 68(a0),d0
    b3cc:	|  |  ,----- beq.s b40a <savePeople+0x2e2>
			FPutC (fp, 1);
    b3ce:	|  |  |      move.l 156(sp),76(sp)
    b3d4:	|  |  |      moveq #1,d0
    b3d6:	|  |  |      move.l d0,72(sp)
    b3da:	|  |  |      move.l 1cbd2 <DOSBase>,d0
    b3e0:	|  |  |      movea.l d0,a6
    b3e2:	|  |  |      move.l 76(sp),d1
    b3e6:	|  |  |      move.l 72(sp),d2
    b3ea:	|  |  |      jsr -312(a6)
    b3ee:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b3f2:	|  |  |      movea.l 148(sp),a0
    b3f6:	|  |  |      move.l 68(a0),d0
    b3fa:	|  |  |      move.l 156(sp),-(sp)
    b3fe:	|  |  |      move.l d0,-(sp)
    b400:	|  |  |      jsr c624 <saveFunction>
    b406:	|  |  |      addq.l #8,sp
    b408:	|  |  |  ,-- bra.s b42e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b40a:	|  |  '--|-> move.l 156(sp),88(sp)
    b410:	|  |     |   moveq #1,d0
    b412:	|  |     |   move.l d0,84(sp)
    b416:	|  |     |   move.l 1cbd2 <DOSBase>,d0
    b41c:	|  |     |   movea.l d0,a6
    b41e:	|  |     |   move.l 88(sp),d1
    b422:	|  |     |   move.l 84(sp),d2
    b426:	|  |     |   jsr -312(a6)
    b42a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b42e:	|  |     '-> movea.l 148(sp),a0
    b432:	|  |         move.l 106(a0),d0
    b436:	|  |         move.l 156(sp),-(sp)
    b43a:	|  |         move.l d0,-(sp)
    b43c:	|  |         jsr 8d0 <put2bytes>
    b442:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b444:	|  |         movea.l 148(sp),a0
    b448:	|  |         move.l 92(a0),d0
    b44c:	|  |         move.l 156(sp),-(sp)
    b450:	|  |         move.l d0,-(sp)
    b452:	|  |         jsr 8d0 <put2bytes>
    b458:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b45a:	|  |         movea.l 148(sp),a0
    b45e:	|  |         move.l 100(a0),d0
    b462:	|  |         move.l 156(sp),-(sp)
    b466:	|  |         move.l d0,-(sp)
    b468:	|  |         jsr 8d0 <put2bytes>
    b46e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b470:	|  |         movea.l 148(sp),a0
    b474:	|  |         move.l 96(a0),d0
    b478:	|  |         move.l 156(sp),-(sp)
    b47c:	|  |         move.l d0,-(sp)
    b47e:	|  |         jsr 8d0 <put2bytes>
    b484:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b486:	|  |         movea.l 148(sp),a0
    b48a:	|  |         move.l 110(a0),d0
    b48e:	|  |         move.l d0,d0
    b490:	|  |         movea.w d0,a0
    b492:	|  |         move.l 156(sp),-(sp)
    b496:	|  |         move.l a0,-(sp)
    b498:	|  |         jsr a9c <putSigned>
    b49e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b4a0:	|  |         movea.l 148(sp),a0
    b4a4:	|  |         move.l 56(a0),d0
    b4a8:	|  |         move.l d0,d0
    b4aa:	|  |         movea.w d0,a0
    b4ac:	|  |         move.l 156(sp),-(sp)
    b4b0:	|  |         move.l a0,-(sp)
    b4b2:	|  |         jsr a9c <putSigned>
    b4b8:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b4ba:	|  |         movea.l 148(sp),a0
    b4be:	|  |         move.l 60(a0),d0
    b4c2:	|  |         move.l d0,d0
    b4c4:	|  |         movea.w d0,a0
    b4c6:	|  |         move.l 156(sp),-(sp)
    b4ca:	|  |         move.l a0,-(sp)
    b4cc:	|  |         jsr a9c <putSigned>
    b4d2:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b4d4:	|  |         move.l 156(sp),64(sp)
    b4da:	|  |         movea.l 148(sp),a0
    b4de:	|  |         move.b 126(a0),d0
    b4e2:	|  |         move.b d0,d0
    b4e4:	|  |         andi.l #255,d0
    b4ea:	|  |         move.l d0,60(sp)
    b4ee:	|  |         move.l 1cbd2 <DOSBase>,d0
    b4f4:	|  |         movea.l d0,a6
    b4f6:	|  |         move.l 64(sp),d1
    b4fa:	|  |         move.l 60(sp),d2
    b4fe:	|  |         jsr -312(a6)
    b502:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b506:	|  |         move.l 156(sp),52(sp)
    b50c:	|  |         movea.l 148(sp),a0
    b510:	|  |         move.b 127(a0),d0
    b514:	|  |         move.b d0,d0
    b516:	|  |         andi.l #255,d0
    b51c:	|  |         move.l d0,48(sp)
    b520:	|  |         move.l 1cbd2 <DOSBase>,d0
    b526:	|  |         movea.l d0,a6
    b528:	|  |         move.l 52(sp),d1
    b52c:	|  |         move.l 48(sp),d2
    b530:	|  |         jsr -312(a6)
    b534:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b538:	|  |         move.l 156(sp),40(sp)
    b53e:	|  |         movea.l 148(sp),a0
    b542:	|  |         move.b 128(a0),d0
    b546:	|  |         move.b d0,d0
    b548:	|  |         andi.l #255,d0
    b54e:	|  |         move.l d0,36(sp)
    b552:	|  |         move.l 1cbd2 <DOSBase>,d0
    b558:	|  |         movea.l d0,a6
    b55a:	|  |         move.l 40(sp),d1
    b55e:	|  |         move.l 36(sp),d2
    b562:	|  |         jsr -312(a6)
    b566:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b56a:	|  |         move.l 156(sp),28(sp)
    b570:	|  |         movea.l 148(sp),a0
    b574:	|  |         move.b 129(a0),d0
    b578:	|  |         move.b d0,d0
    b57a:	|  |         andi.l #255,d0
    b580:	|  |         move.l d0,24(sp)
    b584:	|  |         move.l 1cbd2 <DOSBase>,d0
    b58a:	|  |         movea.l d0,a6
    b58c:	|  |         move.l 28(sp),d1
    b590:	|  |         move.l 24(sp),d2
    b594:	|  |         jsr -312(a6)
    b598:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b59c:	|  |         move.l 156(sp),16(sp)
    b5a2:	|  |         movea.l 148(sp),a0
    b5a6:	|  |         move.b 130(a0),d0
    b5aa:	|  |         move.b d0,d0
    b5ac:	|  |         andi.l #255,d0
    b5b2:	|  |         move.l d0,12(sp)
    b5b6:	|  |         move.l 1cbd2 <DOSBase>,d0
    b5bc:	|  |         movea.l d0,a6
    b5be:	|  |         move.l 16(sp),d1
    b5c2:	|  |         move.l 12(sp),d2
    b5c6:	|  |         jsr -312(a6)
    b5ca:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b5ce:	|  |         movea.l 148(sp),a0
    b5d2:	|  |         move.l 114(a0),d0
    b5d6:	|  |         move.l 156(sp),-(sp)
    b5da:	|  |         move.l d0,-(sp)
    b5dc:	|  |         jsr d9f8 <saveObjectRef>
    b5e2:	|  |         addq.l #8,sp

		me = me -> next;
    b5e4:	|  |         movea.l 148(sp),a0
    b5e8:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b5ee:	|  |         addq.l #1,140(sp)
    b5f2:	|  '-------> movea.l 140(sp),a0
    b5f6:	|            cmpa.l 144(sp),a0
    b5fa:	'----------- blt.w b19e <savePeople+0x76>
	}
	return TRUE;
    b5fe:	             moveq #1,d0
}
    b600:	             move.l (sp)+,d2
    b602:	             movea.l (sp)+,a6
    b604:	             lea 144(sp),sp
    b608:	             rts

0000b60a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b60a:	movea.l 4(sp),a0
    b60e:	move.l 8(sp),(a0)
}
    b612:	nop
    b614:	rts

0000b616 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b616:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b618:	       move.l 12(sp),-(sp)
    b61c:	       jsr a642 <findPerson>
    b622:	       addq.l #4,sp
    b624:	       move.l d0,(sp)
	if (! moveMe) return;
    b626:	,----- beq.s b63a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b628:	|      move.l 8(sp),-(sp)
    b62c:	|      move.l 4(sp),-(sp)
    b630:	|      jsr b640 <setMyDrawMode>
    b636:	|      addq.l #8,sp
    b638:	|  ,-- bra.s b63c <setDrawMode+0x26>
	if (! moveMe) return;
    b63a:	'--|-> nop
}
    b63c:	   '-> addq.l #4,sp
    b63e:	       rts

0000b640 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b640:	       moveq #19,d0
    b642:	       cmp.l 8(sp),d0
    b646:	,----- bcs.w bb1e <setMyDrawMode+0x4de>
    b64a:	|      move.l 8(sp),d0
    b64e:	|      add.l d0,d0
    b650:	|      movea.l d0,a0
    b652:	|      adda.l #46686,a0
    b658:	|      move.w (a0),d0
    b65a:	|      jmp (b65e <setMyDrawMode+0x1e>,pc,d0.w)
    b65e:	|      .short 0x04c0
    b660:	|      ori.l #6684712,-(a4)
    b666:	|      btst d0,-(a0)
    b668:	|      bchg d0,(a6)+
    b66a:	|      bclr d0,(a4)+
    b66c:	|      bset d0,(a2)+
    b66e:	|      andi.b #84,(a6)
    b672:	|      andi.l #55575312,(a2)
    b678:	|      .short 0x02d0
    b67a:	|      bclr d1,(a0)
    b67c:	|      .short 0x044a
    b67e:	|      .short 0x040c
    b680:	|      movep.l d1,1158(a6)
    b684:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b686:	|      movea.l 4(sp),a0
    b68a:	|      clr.b 128(a0)
    b68e:	|      movea.l 4(sp),a0
    b692:	|      move.b 128(a0),d0
    b696:	|      movea.l 4(sp),a0
    b69a:	|      move.b d0,127(a0)
    b69e:	|      movea.l 4(sp),a0
    b6a2:	|      move.b 127(a0),d0
    b6a6:	|      movea.l 4(sp),a0
    b6aa:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6ae:	|      movea.l 4(sp),a0
    b6b2:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b6b6:	|      movea.l 4(sp),a0
    b6ba:	|      move.b #64,130(a0)
			break;
    b6c0:	|  ,-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6c4:	|  |   movea.l 4(sp),a0
    b6c8:	|  |   clr.b 128(a0)
    b6cc:	|  |   movea.l 4(sp),a0
    b6d0:	|  |   move.b 128(a0),d0
    b6d4:	|  |   movea.l 4(sp),a0
    b6d8:	|  |   move.b d0,127(a0)
    b6dc:	|  |   movea.l 4(sp),a0
    b6e0:	|  |   move.b 127(a0),d0
    b6e4:	|  |   movea.l 4(sp),a0
    b6e8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6ec:	|  |   movea.l 4(sp),a0
    b6f0:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b6f4:	|  |   movea.l 4(sp),a0
    b6f8:	|  |   move.b #-128,130(a0)
			break;
    b6fe:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b702:	|  |   movea.l 4(sp),a0
    b706:	|  |   clr.b 128(a0)
    b70a:	|  |   movea.l 4(sp),a0
    b70e:	|  |   move.b 128(a0),d0
    b712:	|  |   movea.l 4(sp),a0
    b716:	|  |   move.b d0,127(a0)
    b71a:	|  |   movea.l 4(sp),a0
    b71e:	|  |   move.b 127(a0),d0
    b722:	|  |   movea.l 4(sp),a0
    b726:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b72a:	|  |   movea.l 4(sp),a0
    b72e:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   move.b #-64,130(a0)
			break;
    b73c:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   clr.b 128(a0)
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   move.b 128(a0),d0
    b750:	|  |   movea.l 4(sp),a0
    b754:	|  |   move.b d0,127(a0)
    b758:	|  |   movea.l 4(sp),a0
    b75c:	|  |   move.b 127(a0),d0
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b #-2,130(a0)
			break;
    b77a:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   clr.b 128(a0)
    b786:	|  |   movea.l 4(sp),a0
    b78a:	|  |   move.b 128(a0),d0
    b78e:	|  |   movea.l 4(sp),a0
    b792:	|  |   move.b d0,127(a0)
    b796:	|  |   movea.l 4(sp),a0
    b79a:	|  |   move.b 127(a0),d0
    b79e:	|  |   movea.l 4(sp),a0
    b7a2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b7a6:	|  |   movea.l 4(sp),a0
    b7aa:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b7b0:	|  |   movea.l 4(sp),a0
    b7b4:	|  |   clr.b 130(a0)
			break;
    b7b8:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7bc:	|  |   movea.l 4(sp),a0
    b7c0:	|  |   clr.b 128(a0)
    b7c4:	|  |   movea.l 4(sp),a0
    b7c8:	|  |   move.b 128(a0),d0
    b7cc:	|  |   movea.l 4(sp),a0
    b7d0:	|  |   move.b d0,127(a0)
    b7d4:	|  |   movea.l 4(sp),a0
    b7d8:	|  |   move.b 127(a0),d0
    b7dc:	|  |   movea.l 4(sp),a0
    b7e0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b7e4:	|  |   movea.l 4(sp),a0
    b7e8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b7ee:	|  |   movea.l 4(sp),a0
    b7f2:	|  |   clr.b 130(a0)
			break;
    b7f6:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   clr.b 128(a0)
    b802:	|  |   movea.l 4(sp),a0
    b806:	|  |   move.b 128(a0),d0
    b80a:	|  |   movea.l 4(sp),a0
    b80e:	|  |   move.b d0,127(a0)
    b812:	|  |   movea.l 4(sp),a0
    b816:	|  |   move.b 127(a0),d0
    b81a:	|  |   movea.l 4(sp),a0
    b81e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b822:	|  |   movea.l 4(sp),a0
    b826:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b82c:	|  |   movea.l 4(sp),a0
    b830:	|  |   clr.b 130(a0)
			break;
    b834:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b838:	|  |   movea.l 4(sp),a0
    b83c:	|  |   clr.b 128(a0)
    b840:	|  |   movea.l 4(sp),a0
    b844:	|  |   move.b 128(a0),d0
    b848:	|  |   movea.l 4(sp),a0
    b84c:	|  |   move.b d0,127(a0)
    b850:	|  |   movea.l 4(sp),a0
    b854:	|  |   move.b 127(a0),d0
    b858:	|  |   movea.l 4(sp),a0
    b85c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   clr.b 130(a0)
			break;
    b870:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b874:	|  |   movea.l 4(sp),a0
    b878:	|  |   clr.b 128(a0)
    b87c:	|  |   movea.l 4(sp),a0
    b880:	|  |   move.b 128(a0),d0
    b884:	|  |   movea.l 4(sp),a0
    b888:	|  |   move.b d0,127(a0)
    b88c:	|  |   movea.l 4(sp),a0
    b890:	|  |   move.b 127(a0),d0
    b894:	|  |   movea.l 4(sp),a0
    b898:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b8a4:	|  |   movea.l 4(sp),a0
    b8a8:	|  |   move.b #64,130(a0)
			break;
    b8ae:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8b2:	|  |   movea.l 4(sp),a0
    b8b6:	|  |   clr.b 128(a0)
    b8ba:	|  |   movea.l 4(sp),a0
    b8be:	|  |   move.b 128(a0),d0
    b8c2:	|  |   movea.l 4(sp),a0
    b8c6:	|  |   move.b d0,127(a0)
    b8ca:	|  |   movea.l 4(sp),a0
    b8ce:	|  |   move.b 127(a0),d0
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8da:	|  |   movea.l 4(sp),a0
    b8de:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b8e2:	|  |   movea.l 4(sp),a0
    b8e6:	|  |   move.b #-128,130(a0)
			break;
    b8ec:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   clr.b 128(a0)
    b8f8:	|  |   movea.l 4(sp),a0
    b8fc:	|  |   move.b 128(a0),d0
    b900:	|  |   movea.l 4(sp),a0
    b904:	|  |   move.b d0,127(a0)
    b908:	|  |   movea.l 4(sp),a0
    b90c:	|  |   move.b 127(a0),d0
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b918:	|  |   movea.l 4(sp),a0
    b91c:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b920:	|  |   movea.l 4(sp),a0
    b924:	|  |   move.b #-64,130(a0)
			break;
    b92a:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b92e:	|  |   movea.l 4(sp),a0
    b932:	|  |   move.b #-128,128(a0)
    b938:	|  |   movea.l 4(sp),a0
    b93c:	|  |   move.b 128(a0),d0
    b940:	|  |   movea.l 4(sp),a0
    b944:	|  |   move.b d0,127(a0)
    b948:	|  |   movea.l 4(sp),a0
    b94c:	|  |   move.b 127(a0),d0
    b950:	|  |   movea.l 4(sp),a0
    b954:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b958:	|  |   movea.l 4(sp),a0
    b95c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b962:	|  |   movea.l 4(sp),a0
    b966:	|  |   clr.b 130(a0)
			break;
    b96a:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b96e:	|  |   movea.l 4(sp),a0
    b972:	|  |   move.b #-128,128(a0)
    b978:	|  |   movea.l 4(sp),a0
    b97c:	|  |   move.b 128(a0),d0
    b980:	|  |   movea.l 4(sp),a0
    b984:	|  |   move.b d0,127(a0)
    b988:	|  |   movea.l 4(sp),a0
    b98c:	|  |   move.b 127(a0),d0
    b990:	|  |   movea.l 4(sp),a0
    b994:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b998:	|  |   movea.l 4(sp),a0
    b99c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   clr.b 130(a0)
			break;
    b9aa:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9ae:	|  |   movea.l 4(sp),a0
    b9b2:	|  |   move.b #-128,128(a0)
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   move.b 128(a0),d0
    b9c0:	|  |   movea.l 4(sp),a0
    b9c4:	|  |   move.b d0,127(a0)
    b9c8:	|  |   movea.l 4(sp),a0
    b9cc:	|  |   move.b 127(a0),d0
    b9d0:	|  |   movea.l 4(sp),a0
    b9d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b9d8:	|  |   movea.l 4(sp),a0
    b9dc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b9e2:	|  |   movea.l 4(sp),a0
    b9e6:	|  |   clr.b 130(a0)
			break;
    b9ea:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9ee:	|  |   movea.l 4(sp),a0
    b9f2:	|  |   move.b #-128,128(a0)
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b 128(a0),d0
    ba00:	|  |   movea.l 4(sp),a0
    ba04:	|  |   move.b d0,127(a0)
    ba08:	|  |   movea.l 4(sp),a0
    ba0c:	|  |   move.b 127(a0),d0
    ba10:	|  |   movea.l 4(sp),a0
    ba14:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba18:	|  |   movea.l 4(sp),a0
    ba1c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba20:	|  |   movea.l 4(sp),a0
    ba24:	|  |   clr.b 130(a0)
			break;
    ba28:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba2c:	|  |   movea.l 4(sp),a0
    ba30:	|  |   st 128(a0)
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   move.b 128(a0),d0
    ba3c:	|  |   movea.l 4(sp),a0
    ba40:	|  |   move.b d0,127(a0)
    ba44:	|  |   movea.l 4(sp),a0
    ba48:	|  |   move.b 127(a0),d0
    ba4c:	|  |   movea.l 4(sp),a0
    ba50:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba54:	|  |   movea.l 4(sp),a0
    ba58:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba5e:	|  |   movea.l 4(sp),a0
    ba62:	|  |   clr.b 130(a0)
			break;
    ba66:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba6a:	|  |   movea.l 4(sp),a0
    ba6e:	|  |   st 128(a0)
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   move.b 128(a0),d0
    ba7a:	|  |   movea.l 4(sp),a0
    ba7e:	|  |   move.b d0,127(a0)
    ba82:	|  |   movea.l 4(sp),a0
    ba86:	|  |   move.b 127(a0),d0
    ba8a:	|  |   movea.l 4(sp),a0
    ba8e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba92:	|  |   movea.l 4(sp),a0
    ba96:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba9c:	|  |   movea.l 4(sp),a0
    baa0:	|  |   clr.b 130(a0)
			break;
    baa4:	|  +-- bra.w bb58 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    baa8:	|  |   movea.l 4(sp),a0
    baac:	|  |   st 128(a0)
    bab0:	|  |   movea.l 4(sp),a0
    bab4:	|  |   move.b 128(a0),d0
    bab8:	|  |   movea.l 4(sp),a0
    babc:	|  |   move.b d0,127(a0)
    bac0:	|  |   movea.l 4(sp),a0
    bac4:	|  |   move.b 127(a0),d0
    bac8:	|  |   movea.l 4(sp),a0
    bacc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bad0:	|  |   movea.l 4(sp),a0
    bad4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bada:	|  |   movea.l 4(sp),a0
    bade:	|  |   clr.b 130(a0)
			break;
    bae2:	|  +-- bra.s bb58 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bae4:	|  |   movea.l 4(sp),a0
    bae8:	|  |   st 128(a0)
    baec:	|  |   movea.l 4(sp),a0
    baf0:	|  |   move.b 128(a0),d0
    baf4:	|  |   movea.l 4(sp),a0
    baf8:	|  |   move.b d0,127(a0)
    bafc:	|  |   movea.l 4(sp),a0
    bb00:	|  |   move.b 127(a0),d0
    bb04:	|  |   movea.l 4(sp),a0
    bb08:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb0c:	|  |   movea.l 4(sp),a0
    bb10:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bb14:	|  |   movea.l 4(sp),a0
    bb18:	|  |   clr.b 130(a0)
			break;
    bb1c:	|  +-- bra.s bb58 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb1e:	'--|-> movea.l 4(sp),a0
    bb22:	   |   clr.b 128(a0)
    bb26:	   |   movea.l 4(sp),a0
    bb2a:	   |   move.b 128(a0),d0
    bb2e:	   |   movea.l 4(sp),a0
    bb32:	   |   move.b d0,127(a0)
    bb36:	   |   movea.l 4(sp),a0
    bb3a:	   |   move.b 127(a0),d0
    bb3e:	   |   movea.l 4(sp),a0
    bb42:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bb46:	   |   movea.l 4(sp),a0
    bb4a:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bb4e:	   |   movea.l 4(sp),a0
    bb52:	   |   clr.b 130(a0)
			break;
    bb56:	   |   nop
	}
}
    bb58:	   '-> nop
    bb5a:	       rts

0000bb5c <shufflePeople>:

void shufflePeople () {
    bb5c:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bb60:	             move.l #117802,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bb68:	             move.l 1cc2a <allPeople>,d0
    bb6e:	,----------- beq.w bc44 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bb72:	|     ,----- bra.w bc34 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bb76:	|  ,--|----> movea.l 16(sp),a0
    bb7a:	|  |  |      movea.l (a0),a0
    bb7c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb82:	|  |  |      movea.l 16(sp),a0
    bb86:	|  |  |      movea.l (a0),a0
    bb88:	|  |  |      move.l 118(a0),d0
    bb8c:	|  |  |      moveq #1,d1
    bb8e:	|  |  |      and.l d1,d0
    bb90:	|  |  |  ,-- beq.s bba8 <shufflePeople+0x4c>
    bb92:	|  |  |  |   move.l #1148846080,-(sp)
    bb98:	|  |  |  |   move.l 16(sp),-(sp)
    bb9c:	|  |  |  |   jsr 1756a <__addsf3>
    bba2:	|  |  |  |   addq.l #8,sp
    bba4:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bba8:	|  |  |  '-> movea.l 16(sp),a0
    bbac:	|  |  |      movea.l (a0),a0
    bbae:	|  |  |      movea.l 36(a0),a0
    bbb2:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bbb8:	|  |  |      movea.l 16(sp),a0
    bbbc:	|  |  |      movea.l (a0),a0
    bbbe:	|  |  |      movea.l 36(a0),a0
    bbc2:	|  |  |      move.l 118(a0),d0
    bbc6:	|  |  |      moveq #1,d1
    bbc8:	|  |  |      and.l d1,d0
    bbca:	|  |  |  ,-- beq.s bbe2 <shufflePeople+0x86>
    bbcc:	|  |  |  |   move.l #1148846080,-(sp)
    bbd2:	|  |  |  |   move.l 12(sp),-(sp)
    bbd6:	|  |  |  |   jsr 1756a <__addsf3>
    bbdc:	|  |  |  |   addq.l #8,sp
    bbde:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bbe2:	|  |  |  '-> move.l 8(sp),-(sp)
    bbe6:	|  |  |      move.l 16(sp),-(sp)
    bbea:	|  |  |      jsr 1791a <__gtsf2>
    bbf0:	|  |  |      addq.l #8,sp
    bbf2:	|  |  |      tst.l d0
    bbf4:	|  |  |  ,-- ble.s bc26 <shufflePeople+0xca>
			A = (*thisReference);
    bbf6:	|  |  |  |   movea.l 16(sp),a0
    bbfa:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bbfe:	|  |  |  |   movea.l 16(sp),a0
    bc02:	|  |  |  |   movea.l (a0),a0
    bc04:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bc08:	|  |  |  |   movea.l (sp),a0
    bc0a:	|  |  |  |   move.l 36(a0),d0
    bc0e:	|  |  |  |   movea.l 4(sp),a0
    bc12:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bc16:	|  |  |  |   movea.l (sp),a0
    bc18:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bc1e:	|  |  |  |   movea.l 16(sp),a0
    bc22:	|  |  |  |   move.l (sp),(a0)
    bc24:	|  |  +--|-- bra.s bc34 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bc26:	|  |  |  '-> movea.l 16(sp),a0
    bc2a:	|  |  |      move.l (a0),d0
    bc2c:	|  |  |      moveq #36,d1
    bc2e:	|  |  |      add.l d0,d1
    bc30:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bc34:	|  |  '----> movea.l 16(sp),a0
    bc38:	|  |         movea.l (a0),a0
    bc3a:	|  |         move.l 36(a0),d0
    bc3e:	|  '-------- bne.w bb76 <shufflePeople+0x1a>
    bc42:	|        ,-- bra.s bc46 <shufflePeople+0xea>
	if (!allPeople) return;
    bc44:	'--------|-> nop
		}
	}
}
    bc46:	         '-> lea 20(sp),sp
    bc4a:	             rts

0000bc4c <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bc4c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bc4e:	       tst.l 8(sp)
    bc52:	   ,-- bgt.s bc58 <setCharacterWalkSpeed+0xc>
    bc54:	   |   clr.w d0
    bc56:	,--|-- bra.s bc76 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bc58:	|  '-> move.l 12(sp),-(sp)
    bc5c:	|      jsr a642 <findPerson>
    bc62:	|      addq.l #4,sp
    bc64:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bc66:	|  ,-- bne.s bc6c <setCharacterWalkSpeed+0x20>
    bc68:	|  |   clr.w d0
    bc6a:	+--|-- bra.s bc76 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bc6c:	|  '-> movea.l (sp),a0
    bc6e:	|      move.l 8(sp),28(a0)
	return TRUE;
    bc74:	|      moveq #1,d0
}
    bc76:	'----> addq.l #4,sp
    bc78:	       rts

0000bc7a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bc7a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc7c:	       move.l 8(sp),-(sp)
    bc80:	       jsr a642 <findPerson>
    bc86:	       addq.l #4,sp
    bc88:	       move.l d0,(sp)
    if (thisPerson) {
    bc8a:	,----- beq.s bcaa <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc8c:	|      movea.l (sp),a0
    bc8e:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc94:	|      moveq #2,d0
    bc96:	|      and.l 12(sp),d0
    bc9a:	|  ,-- beq.s bca6 <setPersonExtra+0x2c>
    bc9c:	|  |   movea.l (sp),a0
    bc9e:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bca6:	|  '-> moveq #1,d0
    bca8:	|  ,-- bra.s bcac <setPersonExtra+0x32>
    }
    return FALSE;
    bcaa:	'--|-> clr.w d0
}
    bcac:	   '-> addq.l #4,sp
    bcae:	       rts

0000bcb0 <setScale>:


void setScale (short int h, short int d) {
    bcb0:	subq.l #4,sp
    bcb2:	move.l 8(sp),d1
    bcb6:	move.l 12(sp),d0
    bcba:	move.w d1,d1
    bcbc:	move.w d1,2(sp)
    bcc0:	move.w d0,d0
    bcc2:	move.w d0,(sp)
	scaleHorizon = h;
    bcc4:	move.w 2(sp),1c550 <scaleHorizon>
	scaleDivide = d;
    bccc:	move.w (sp),1c552 <scaleDivide>
}
    bcd2:	nop
    bcd4:	addq.l #4,sp
    bcd6:	rts

0000bcd8 <setShown>:

void setShown (BOOL h, int ob) {
    bcd8:	    subq.l #8,sp
    bcda:	    move.l 12(sp),d0
    bcde:	    move.w d0,d0
    bce0:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bce4:	    move.l 16(sp),-(sp)
    bce8:	    jsr a642 <findPerson>
    bcee:	    addq.l #4,sp
    bcf0:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bcf4:	,-- beq.s bd00 <setShown+0x28>
    bcf6:	|   movea.l 4(sp),a0
    bcfa:	|   move.w 2(sp),104(a0)
}
    bd00:	'-> nop
    bd02:	    addq.l #8,sp
    bd04:	    rts

0000bd06 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bd06:	       subq.l #8,sp
    bd08:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bd0a:	       movea.l 16(sp),a0
    bd0e:	       move.l 92(a0),d0
    bd12:	       move.l d0,d1
    bd14:	       addi.l #360,d1
    bd1a:	       movea.l 16(sp),a0
    bd1e:	       move.l 96(a0),d0
    bd22:	       move.l d1,d2
    bd24:	       sub.l d0,d2
    bd26:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bd2a:	       movea.l 16(sp),a0
    bd2e:	       move.l 122(a0),d0
    bd32:	   ,-- beq.s bd3e <spinStep+0x38>
    bd34:	   |   movea.l 16(sp),a0
    bd38:	   |   move.l 122(a0),d0
    bd3c:	,--|-- bra.s bd58 <spinStep+0x52>
    bd3e:	|  '-> movea.l 16(sp),a0
    bd42:	|      movea.l 80(a0),a0
    bd46:	|      move.l 4(a0),d0
    bd4a:	|      move.l d0,-(sp)
    bd4c:	|      pea 168 <decodeFilename+0x50>
    bd50:	|      jsr 17d86 <__divsi3>
    bd56:	|      addq.l #8,sp
    bd58:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bd5c:	   ,-- bra.s bd66 <spinStep+0x60>
		diff -= 360;
    bd5e:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bd66:	|  '-> cmpi.l #180,8(sp)
    bd6e:	'----- bgt.s bd5e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bd70:	       move.l 8(sp),d0
    bd74:	       cmp.l 4(sp),d0
    bd78:	   ,-- blt.s bd96 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bd7a:	   |   movea.l 16(sp),a0
    bd7e:	   |   move.l 92(a0),d0
    bd82:	   |   sub.l 4(sp),d0
    bd86:	   |   move.l d0,-(sp)
    bd88:	   |   move.l 20(sp),-(sp)
    bd8c:	   |   jsr be76 <turnMeAngle>
    bd92:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd94:	,--|-- bra.s bddc <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd96:	|  '-> move.l 4(sp),d0
    bd9a:	|      neg.l d0
    bd9c:	|      cmp.l 8(sp),d0
    bda0:	|  ,-- blt.s bdbe <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bda2:	|  |   movea.l 16(sp),a0
    bda6:	|  |   move.l 92(a0),d0
    bdaa:	|  |   add.l 4(sp),d0
    bdae:	|  |   move.l d0,-(sp)
    bdb0:	|  |   move.l 20(sp),-(sp)
    bdb4:	|  |   jsr be76 <turnMeAngle>
    bdba:	|  |   addq.l #8,sp
}
    bdbc:	+--|-- bra.s bddc <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bdbe:	|  '-> movea.l 16(sp),a0
    bdc2:	|      move.l 96(a0),d0
    bdc6:	|      move.l d0,-(sp)
    bdc8:	|      move.l 20(sp),-(sp)
    bdcc:	|      jsr be76 <turnMeAngle>
    bdd2:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bdd4:	|      movea.l 16(sp),a0
    bdd8:	|      clr.w 66(a0)
}
    bddc:	'----> nop
    bdde:	       move.l (sp)+,d2
    bde0:	       addq.l #8,sp
    bde2:	       rts

0000bde4 <stopPerson>:


BOOL stopPerson (int o) {
    bde4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bde6:	       move.l 8(sp),-(sp)
    bdea:	       jsr a642 <findPerson>
    bdf0:	       addq.l #4,sp
    bdf2:	       move.l d0,(sp)
    if (moveMe)
    bdf4:	,----- beq.s be32 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bdf6:	|      movea.l (sp),a0
    bdf8:	|      move.l 68(a0),d0
    bdfc:	+----- beq.s be32 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bdfe:	|      movea.l (sp),a0
    be00:	|      move.l 68(a0),d0
    be04:	|      move.l d0,-(sp)
    be06:	|      jsr 503c <abortFunction>
    be0c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    be0e:	|      movea.l (sp),a0
    be10:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    be14:	|      movea.l (sp),a0
    be16:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    be1a:	|      movea.l (sp),a0
    be1c:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    be20:	|      clr.l -(sp)
    be22:	|      move.l 4(sp),-(sp)
    be26:	|      jsr 41de <setFrames>
    be2c:	|      addq.l #8,sp
            return TRUE;
    be2e:	|      moveq #1,d0
    be30:	|  ,-- bra.s be34 <stopPerson+0x50>
        }
    return FALSE;
    be32:	'--|-> clr.w d0
}
    be34:	   '-> addq.l #4,sp
    be36:	       rts

0000be38 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    be38:	       subq.l #8,sp
	int total = 0;
    be3a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be3e:	       clr.l (sp)
    be40:	   ,-- bra.s be62 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    be42:	,--|-> movea.l 12(sp),a0
    be46:	|  |   movea.l 4(a0),a0
    be4a:	|  |   move.l (sp),d1
    be4c:	|  |   move.l d1,d0
    be4e:	|  |   add.l d0,d0
    be50:	|  |   add.l d1,d0
    be52:	|  |   add.l d0,d0
    be54:	|  |   add.l d0,d0
    be56:	|  |   adda.l d0,a0
    be58:	|  |   move.l 4(a0),d0
    be5c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be60:	|  |   addq.l #1,(sp)
    be62:	|  '-> movea.l 12(sp),a0
    be66:	|      move.l 8(a0),d0
    be6a:	|      cmp.l (sp),d0
    be6c:	'----- bgt.s be42 <timeForAnim+0xa>
	}
	return total;
    be6e:	       move.l 4(sp),d0
}
    be72:	       addq.l #8,sp
    be74:	       rts

0000be76 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    be76:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    be78:	       movea.l 8(sp),a0
    be7c:	       movea.l 80(a0),a0
    be80:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be84:	       movea.l 8(sp),a0
    be88:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be8e:	       move.l (sp),-(sp)
    be90:	       pea b4 <_start+0xb4>
    be94:	       jsr 17d86 <__divsi3>
    be9a:	       addq.l #8,sp
    be9c:	       move.l d0,d1
    be9e:	       addi.l #180,d1
    bea4:	       movea.l 8(sp),a0
    bea8:	       move.l 100(a0),d0
    beac:	       add.l d1,d0
    beae:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    beb2:	   ,-- bra.s bebc <turnMeAngle+0x46>
    beb4:	,--|-> addi.l #-360,12(sp)
    bebc:	|  '-> cmpi.l #359,12(sp)
    bec4:	'----- bgt.s beb4 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bec6:	       move.l (sp),-(sp)
    bec8:	       move.l 16(sp),-(sp)
    becc:	       jsr 17d08 <__mulsi3>
    bed2:	       addq.l #8,sp
    bed4:	       pea 168 <decodeFilename+0x50>
    bed8:	       move.l d0,-(sp)
    beda:	       jsr 17d86 <__divsi3>
    bee0:	       addq.l #8,sp
    bee2:	       movea.l 8(sp),a0
    bee6:	       move.l d0,106(a0)
}
    beea:	       nop
    beec:	       addq.l #4,sp
    beee:	       rts

0000bef0 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bef0:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bef2:	          move.l 8(sp),-(sp)
    bef6:	          jsr a642 <findPerson>
    befc:	          addq.l #4,sp
    befe:	          move.l d0,(sp)
    if (thisPerson) {
    bf00:	,-------- beq.s bf60 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bf02:	|         movea.l (sp),a0
    bf04:	|         move.l 68(a0),d0
    bf08:	|     ,-- beq.s bf1a <turnPersonToFace+0x2a>
    bf0a:	|     |   movea.l (sp),a0
    bf0c:	|     |   move.l 68(a0),d0
    bf10:	|     |   move.l d0,-(sp)
    bf12:	|     |   jsr 503c <abortFunction>
    bf18:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bf1a:	|     '-> movea.l (sp),a0
    bf1c:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bf20:	|         movea.l (sp),a0
    bf22:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bf26:	|         movea.l (sp),a0
    bf28:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bf2c:	|         move.l 12(sp),-(sp)
    bf30:	|         move.l 4(sp),-(sp)
    bf34:	|         jsr be76 <turnMeAngle>
    bf3a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bf3c:	|         movea.l 1cb1a <speech>,a0
    bf42:	|         move.l (a0),d0
    bf44:	|         cmp.l (sp),d0
    bf46:	|  ,----- bne.s bf4c <turnPersonToFace+0x5c>
    bf48:	|  |      moveq #2,d0
    bf4a:	|  |  ,-- bra.s bf4e <turnPersonToFace+0x5e>
    bf4c:	|  '--|-> moveq #0,d0
    bf4e:	|     '-> move.l d0,-(sp)
    bf50:	|         move.l 4(sp),-(sp)
    bf54:	|         jsr 41de <setFrames>
    bf5a:	|         addq.l #8,sp
        return TRUE;
    bf5c:	|         moveq #1,d0
    bf5e:	|     ,-- bra.s bf62 <turnPersonToFace+0x72>
    }
    return FALSE;
    bf60:	'-----|-> clr.w d0
}
    bf62:	      '-> addq.l #4,sp
    bf64:	          rts

0000bf66 <walkAllPeople>:

void walkAllPeople() {
    bf66:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bf68:	             move.l 1cc2a <allPeople>,(sp)

	while (thisPerson) {
    bf6e:	   ,-------- bra.s bfde <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bf70:	,--|-------> movea.l (sp),a0
    bf72:	|  |         move.w 64(a0),d0
    bf76:	|  |     ,-- beq.s bf8a <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bf78:	|  |     |   pea 1 <_start+0x1>
    bf7c:	|  |     |   move.l 4(sp),-(sp)
    bf80:	|  |     |   jsr bfea <walkMe>
    bf86:	|  |     |   addq.l #8,sp
    bf88:	|  |  ,--|-- bra.s bfaa <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bf8a:	|  |  |  '-> movea.l (sp),a0
    bf8c:	|  |  |      move.w 66(a0),d0
    bf90:	|  |  +----- beq.s bfaa <walkAllPeople+0x44>
			spinStep(thisPerson);
    bf92:	|  |  |      move.l (sp),-(sp)
    bf94:	|  |  |      jsr bd06 <spinStep>
    bf9a:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bf9c:	|  |  |      clr.l -(sp)
    bf9e:	|  |  |      move.l 4(sp),-(sp)
    bfa2:	|  |  |      jsr 41de <setFrames>
    bfa8:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bfaa:	|  |  '----> movea.l (sp),a0
    bfac:	|  |         move.w 64(a0),d0
    bfb0:	|  |     ,-- bne.s bfd8 <walkAllPeople+0x72>
    bfb2:	|  |     |   movea.l (sp),a0
    bfb4:	|  |     |   move.w 66(a0),d0
    bfb8:	|  |     +-- bne.s bfd8 <walkAllPeople+0x72>
    bfba:	|  |     |   movea.l (sp),a0
    bfbc:	|  |     |   move.l 68(a0),d0
    bfc0:	|  |     +-- beq.s bfd8 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bfc2:	|  |     |   movea.l (sp),a0
    bfc4:	|  |     |   move.l 68(a0),d0
    bfc8:	|  |     |   move.l d0,-(sp)
    bfca:	|  |     |   jsr 71ae <restartFunction>
    bfd0:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bfd2:	|  |     |   movea.l (sp),a0
    bfd4:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bfd8:	|  |     '-> movea.l (sp),a0
    bfda:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bfde:	|  '-------> tst.l (sp)
    bfe0:	'----------- bne.s bf70 <walkAllPeople+0xa>
	}
}
    bfe2:	             nop
    bfe4:	             nop
    bfe6:	             addq.l #4,sp
    bfe8:	             rts

0000bfea <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bfea:	                lea -20(sp),sp
    bfee:	                move.l d3,-(sp)
    bff0:	                move.l d2,-(sp)
    bff2:	                move.l 36(sp),d0
    bff6:	                move.w d0,d0
    bff8:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bffc:	                cmpi.w #-1,10(sp)
    c002:	,-------------- bne.s c00a <walkMe+0x20>
    c004:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c00a:	>-------------> movea.l 32(sp),a0
    c00e:	|               move.l 48(a0),d0
    c012:	|               move.l d0,-(sp)
    c014:	|               jsr 177ae <__floatsisf>
    c01a:	|               addq.l #4,sp
    c01c:	|               move.l d0,d1
    c01e:	|               movea.l 32(sp),a0
    c022:	|               move.l (a0),d0
    c024:	|               move.l d0,-(sp)
    c026:	|               move.l d1,-(sp)
    c028:	|               jsr 17aa2 <__subsf3>
    c02e:	|               addq.l #8,sp
    c030:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c034:	|               movea.l 32(sp),a0
    c038:	|               move.l 52(a0),d0
    c03c:	|               move.l d0,-(sp)
    c03e:	|               jsr 177ae <__floatsisf>
    c044:	|               addq.l #4,sp
    c046:	|               move.l d0,d1
    c048:	|               movea.l 32(sp),a0
    c04c:	|               move.l 4(a0),d0
    c050:	|               move.l d0,-(sp)
    c052:	|               move.l d1,-(sp)
    c054:	|               jsr 17aa2 <__subsf3>
    c05a:	|               addq.l #8,sp
    c05c:	|               move.l d0,-(sp)
    c05e:	|               move.l d0,-(sp)
    c060:	|               jsr 1756a <__addsf3>
    c066:	|               addq.l #8,sp
    c068:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c06c:	|               movea.l 32(sp),a0
    c070:	|               move.l 32(a0),d2
    c074:	|               movea.l 32(sp),a0
    c078:	|               move.l 28(a0),d0
    c07c:	|               move.l d0,-(sp)
    c07e:	|               jsr 177ae <__floatsisf>
    c084:	|               addq.l #4,sp
    c086:	|               move.l d0,-(sp)
    c088:	|               move.l d2,-(sp)
    c08a:	|               jsr 17860 <__mulsf3>
    c090:	|               addq.l #8,sp
    c092:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c096:	|               move.l 24(sp),-(sp)
    c09a:	|               jsr 176d0 <__extendsfdf2>
    c0a0:	|               addq.l #4,sp
    c0a2:	|               move.l #-1717986918,-(sp)
    c0a8:	|               move.l #1070176665,-(sp)
    c0ae:	|               move.l d1,-(sp)
    c0b0:	|               move.l d0,-(sp)
    c0b2:	|               jsr 17986 <__ltdf2>
    c0b8:	|               lea 16(sp),sp
    c0bc:	|               tst.l d0
    c0be:	|           ,-- bge.s c0c8 <walkMe+0xde>
    c0c0:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c0c8:	|           '-> move.l 20(sp),-(sp)
    c0cc:	|               jsr 17746 <__fixsfsi>
    c0d2:	|               addq.l #4,sp
    c0d4:	|               move.l d0,-(sp)
    c0d6:	|               jsr 9232 <TF_abs>
    c0dc:	|               addq.l #4,sp
    c0de:	|               move.l d0,d2
    c0e0:	|               move.l 16(sp),-(sp)
    c0e4:	|               jsr 17746 <__fixsfsi>
    c0ea:	|               addq.l #4,sp
    c0ec:	|               move.l d0,-(sp)
    c0ee:	|               jsr 9232 <TF_abs>
    c0f4:	|               addq.l #4,sp
    c0f6:	|               cmp.l d2,d0
    c0f8:	|        ,----- bgt.s c11c <walkMe+0x132>
    c0fa:	|        |      move.l 20(sp),-(sp)
    c0fe:	|        |      jsr 17746 <__fixsfsi>
    c104:	|        |      addq.l #4,sp
    c106:	|        |      move.l d0,-(sp)
    c108:	|        |      jsr 9232 <TF_abs>
    c10e:	|        |      addq.l #4,sp
    c110:	|        |      move.l d0,-(sp)
    c112:	|        |      jsr 177ae <__floatsisf>
    c118:	|        |      addq.l #4,sp
    c11a:	|        |  ,-- bra.s c13c <walkMe+0x152>
    c11c:	|        '--|-> move.l 16(sp),-(sp)
    c120:	|           |   jsr 17746 <__fixsfsi>
    c126:	|           |   addq.l #4,sp
    c128:	|           |   move.l d0,-(sp)
    c12a:	|           |   jsr 9232 <TF_abs>
    c130:	|           |   addq.l #4,sp
    c132:	|           |   move.l d0,-(sp)
    c134:	|           |   jsr 177ae <__floatsisf>
    c13a:	|           |   addq.l #4,sp
    c13c:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c140:	|               move.l 12(sp),-(sp)
    c144:	|               jsr 17746 <__fixsfsi>
    c14a:	|               addq.l #4,sp
    c14c:	|               move.l d0,-(sp)
    c14e:	|               jsr 9232 <TF_abs>
    c154:	|               addq.l #4,sp
    c156:	|               move.l d0,-(sp)
    c158:	|               jsr 177ae <__floatsisf>
    c15e:	|               addq.l #4,sp
    c160:	|               move.l d0,-(sp)
    c162:	|               move.l 28(sp),-(sp)
    c166:	|               jsr 179d4 <__ltsf2>
    c16c:	|               addq.l #8,sp
    c16e:	|               tst.l d0
    c170:	|        ,----- bge.w c222 <walkMe+0x238>
			if (thisPerson->spinning) {
    c174:	|        |      movea.l 32(sp),a0
    c178:	|        |      move.w 66(a0),d0
    c17c:	|        |  ,-- beq.s c19a <walkMe+0x1b0>
				spinStep(thisPerson);
    c17e:	|        |  |   move.l 32(sp),-(sp)
    c182:	|        |  |   jsr bd06 <spinStep>
    c188:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c18a:	|        |  |   pea 1 <_start+0x1>
    c18e:	|        |  |   move.l 36(sp),-(sp)
    c192:	|        |  |   jsr 41de <setFrames>
    c198:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c19a:	|        |  '-> move.l 24(sp),-(sp)
    c19e:	|        |      move.l 16(sp),-(sp)
    c1a2:	|        |      jsr 17664 <__divsf3>
    c1a8:	|        |      addq.l #8,sp
    c1aa:	|        |      move.l d0,24(sp)
			if (move)
    c1ae:	|        |      tst.w 10(sp)
    c1b2:	|        |  ,-- beq.s c21c <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c1b4:	|        |  |   movea.l 32(sp),a0
    c1b8:	|        |  |   move.l 4(a0),d2
    c1bc:	|        |  |   move.l 24(sp),d0
    c1c0:	|        |  |   move.l d0,-(sp)
    c1c2:	|        |  |   move.l d0,-(sp)
    c1c4:	|        |  |   jsr 1756a <__addsf3>
    c1ca:	|        |  |   addq.l #8,sp
    c1cc:	|        |  |   move.l d0,-(sp)
    c1ce:	|        |  |   move.l 20(sp),-(sp)
    c1d2:	|        |  |   jsr 17664 <__divsf3>
    c1d8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c1da:	|        |  |   move.l d0,-(sp)
    c1dc:	|        |  |   move.l d2,-(sp)
    c1de:	|        |  |   jsr 1756a <__addsf3>
    c1e4:	|        |  |   addq.l #8,sp
    c1e6:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c1e8:	|        |  |   movea.l 32(sp),a0
    c1ec:	|        |  |   move.l (a0),d3
    c1ee:	|        |  |   move.l 24(sp),-(sp)
    c1f2:	|        |  |   move.l 24(sp),-(sp)
    c1f6:	|        |  |   jsr 17664 <__divsf3>
    c1fc:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c1fe:	|        |  |   move.l d0,-(sp)
    c200:	|        |  |   move.l d3,-(sp)
    c202:	|        |  |   jsr 1756a <__addsf3>
    c208:	|        |  |   addq.l #8,sp
    c20a:	|        |  |   move.l d2,-(sp)
    c20c:	|        |  |   move.l d0,-(sp)
    c20e:	|        |  |   move.l 40(sp),-(sp)
    c212:	|        |  |   jsr adec <moveAndScale>
    c218:	|        |  |   lea 12(sp),sp
			return TRUE;
    c21c:	|        |  '-> moveq #1,d0
    c21e:	|  ,-----|----- bra.w c2d0 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c222:	|  |     '----> movea.l 32(sp),a0
    c226:	|  |            move.l 56(a0),d0
    c22a:	|  |            moveq #-1,d1
    c22c:	|  |            cmp.l d0,d1
    c22e:	|  |        ,-- bne.s c266 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c230:	|  |        |   movea.l 32(sp),a0
    c234:	|  |        |   move.l 110(a0),d0
    c238:	|  |        |   moveq #-1,d1
    c23a:	|  |        |   cmp.l d0,d1
    c23c:	|  |  ,-----|-- beq.s c27a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c23e:	|  |  |     |   movea.l 32(sp),a0
    c242:	|  |  |     |   move.l 110(a0),d0
    c246:	|  |  |     |   movea.l 32(sp),a0
    c24a:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c24e:	|  |  |     |   movea.l 32(sp),a0
    c252:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c258:	|  |  |     |   move.l 32(sp),-(sp)
    c25c:	|  |  |     |   jsr bd06 <spinStep>
    c262:	|  |  |     |   addq.l #4,sp
			}
			break;
    c264:	|  |  +-----|-- bra.s c27a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c266:	|  |  |     '-> move.l 32(sp),-(sp)
    c26a:	|  |  |         jsr 99a4 <doBorderStuff>
    c270:	|  |  |         addq.l #4,sp
    c272:	|  |  |         tst.w d0
    c274:	|  |  |  ,----- beq.s c27e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c276:	'--|--|--|----- bra.w c00a <walkMe+0x20>
			break;
    c27a:	   |  '--|----> nop
    c27c:	   |     |  ,-- bra.s c280 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c27e:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c280:	   |        '-> movea.l 32(sp),a0
    c284:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c288:	   |            clr.l -(sp)
    c28a:	   |            move.l 36(sp),-(sp)
    c28e:	   |            jsr 41de <setFrames>
    c294:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c296:	   |            movea.l 32(sp),a0
    c29a:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c29e:	   |            move.l d0,-(sp)
    c2a0:	   |            jsr 177ae <__floatsisf>
    c2a6:	   |            addq.l #4,sp
    c2a8:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c2aa:	   |            movea.l 32(sp),a0
    c2ae:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c2b2:	   |            move.l d0,-(sp)
    c2b4:	   |            jsr 177ae <__floatsisf>
    c2ba:	   |            addq.l #4,sp
    c2bc:	   |            move.l d2,-(sp)
    c2be:	   |            move.l d0,-(sp)
    c2c0:	   |            move.l 40(sp),-(sp)
    c2c4:	   |            jsr adec <moveAndScale>
    c2ca:	   |            lea 12(sp),sp
	return FALSE;
    c2ce:	   |            clr.w d0
}
    c2d0:	   '----------> move.l (sp)+,d2
    c2d2:	                move.l (sp)+,d3
    c2d4:	                lea 20(sp),sp
    c2d8:	                rts

0000c2da <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c2da:	       subq.l #8,sp
    c2dc:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c2de:	   ,-- bra.s c30e <clearStackLib+0x34>
		k = stackLib;
    c2e0:	,--|-> move.l 1cc56 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c2e8:	|  |   movea.l 1cc56 <stackLib>,a0
    c2ee:	|  |   move.l 4(a0),d0
    c2f2:	|  |   move.l d0,1cc56 <stackLib>
		FreeVec(k);
    c2f8:	|  |   move.l 8(sp),4(sp)
    c2fe:	|  |   move.l 1cbca <SysBase>,d0
    c304:	|  |   movea.l d0,a6
    c306:	|  |   movea.l 4(sp),a1
    c30a:	|  |   jsr -690(a6)
	while (stackLib) {
    c30e:	|  '-> move.l 1cc56 <stackLib>,d0
    c314:	'----- bne.s c2e0 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c316:	       clr.l 1cc52 <stackLibTotal>
}
    c31c:	       nop
    c31e:	       movea.l (sp)+,a6
    c320:	       addq.l #8,sp
    c322:	       rts

0000c324 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c324:	          lea -128(sp),sp
    c328:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c32c:	      ,-- bra.s c33e <loadGame+0x1a>
    c32e:	   ,--|-> move.l 1cb62 <allRunningFunctions>,d0
    c334:	   |  |   move.l d0,-(sp)
    c336:	   |  |   jsr 6070 <finishFunction>
    c33c:	   |  |   addq.l #4,sp
    c33e:	   |  '-> move.l 1cb62 <allRunningFunctions>,d0
    c344:	   '----- bne.s c32e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c346:	          pea 1cc5a <ssgVersion>
    c34c:	          pea 194b7 <PutChar+0x1699>
    c352:	          pea 41 <_start+0x41>
    c356:	          pea 53 <_start+0x53>
    c35a:	          move.l 160(sp),-(sp)
    c35e:	          jsr 6d96 <openAndVerify>
    c364:	          lea 20(sp),sp
    c368:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c36c:	      ,-- bne.s c374 <loadGame+0x50>
    c36e:	      |   clr.w d0
    c370:	,-----|-- bra.w c61a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c374:	|     '-> move.l 112(sp),108(sp)
    c37a:	|         lea 140(sp),a0
    c37e:	|         lea -126(a0),a0
    c382:	|         move.l a0,120(sp)
    c386:	|         moveq #8,d0
    c388:	|         move.l d0,116(sp)
    c38c:	|         move.l 1cbd2 <DOSBase>,d0
    c392:	|         movea.l d0,a6
    c394:	|         move.l 108(sp),d1
    c398:	|         move.l 120(sp),d2
    c39c:	|         move.l 116(sp),d3
    c3a0:	|         jsr -42(a6)
    c3a4:	|         move.l d0,132(sp)
    c3a8:	|         move.l 132(sp),d0
    c3ac:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c3b0:	|         moveq #8,d0
    c3b2:	|         cmp.l 128(sp),d0
    c3b6:	|     ,-- beq.s c3c6 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c3b8:	|     |   pea 194d8 <PutChar+0x16ba>
    c3be:	|     |   jsr 1737c <KPrintF>
    c3c4:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c3c6:	|     '-> move.l 14(sp),d1
    c3ca:	|         move.l 1cb6c <fileTime>,d0
    c3d0:	|         cmp.l d1,d0
    c3d2:	|     ,-- bne.s c3e2 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c3d4:	|     |   move.l 18(sp),d1
    c3d8:	|     |   move.l 1cb70 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c3de:	|     |   cmp.l d1,d0
    c3e0:	|  ,--|-- beq.s c402 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c3e2:	|  |  '-> move.l 144(sp),-(sp)
    c3e6:	|  |      pea 194f4 <PutChar+0x16d6>
    c3ec:	|  |      pea 195bb <PutChar+0x179d>
    c3f2:	|  |      jsr 1737c <KPrintF>
    c3f8:	|  |      lea 12(sp),sp
		return FALSE; 
    c3fc:	|  |      clr.w d0
    c3fe:	+--|----- bra.w c61a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c402:	|  '----> move.l 112(sp),124(sp)
    c408:	|         move.l 1cbd2 <DOSBase>,d0
    c40e:	|         movea.l d0,a6
    c410:	|         move.l 124(sp),d1
    c414:	|         jsr -306(a6)
    c418:	|         move.l d0,136(sp)
    c41c:	|         move.l 136(sp),d0
    c420:	|         move.l d0,d0
    c422:	|         move.w d0,1c41a <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c428:	|         move.l 112(sp),100(sp)
    c42e:	|         move.l 1cbd2 <DOSBase>,d0
    c434:	|         movea.l d0,a6
    c436:	|         move.l 100(sp),d1
    c43a:	|         jsr -306(a6)
    c43e:	|         move.l d0,96(sp)
    c442:	|         move.l 96(sp),d0
    c446:	|         move.l d0,d0
    c448:	|         move.w d0,1cb6a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c44e:	|         move.l 112(sp),92(sp)
    c454:	|         move.l 1cbd2 <DOSBase>,d0
    c45a:	|         movea.l d0,a6
    c45c:	|         move.l 92(sp),d1
    c460:	|         jsr -306(a6)
    c464:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c468:	|         move.l 112(sp),84(sp)
    c46e:	|         move.l 1cbd2 <DOSBase>,d0
    c474:	|         movea.l d0,a6
    c476:	|         move.l 84(sp),d1
    c47a:	|         jsr -306(a6)
    c47e:	|         move.l d0,80(sp)
    c482:	|         move.l 80(sp),d0
    c486:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c48a:	|     ,-- beq.s c4be <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c48c:	|     |   move.l 112(sp),-(sp)
    c490:	|     |   jsr 6bc <get2bytes>
    c496:	|     |   addq.l #4,sp
    c498:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c49c:	|     |   move.l 112(sp),-(sp)
    c4a0:	|     |   jsr 6bc <get2bytes>
    c4a6:	|     |   addq.l #4,sp
    c4a8:	|     |   move.l d0,1ccbe <fontHeight>
		charOrder = readString(fp);		
    c4ae:	|     |   move.l 112(sp),-(sp)
    c4b2:	|     |   jsr b02 <readString>
    c4b8:	|     |   addq.l #4,sp
    c4ba:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c4be:	|     '-> move.l 104(sp),70(sp)
    c4c4:	|         move.l 1cbca <SysBase>,d0
    c4ca:	|         movea.l d0,a6
    c4cc:	|         movea.l 70(sp),a1
    c4d0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c4d4:	|         move.l 112(sp),-(sp)
    c4d8:	|         jsr 854 <getSigned>
    c4de:	|         addq.l #4,sp
    c4e0:	|         move.w d0,1cac2 <fontSpace>

	killAllPeople ();
    c4e6:	|         jsr aa56 <killAllPeople>
	killAllRegions ();
    c4ec:	|         jsr 15b8c <killAllRegions>

	int camerX = get2bytes (fp);
    c4f2:	|         move.l 112(sp),-(sp)
    c4f6:	|         jsr 6bc <get2bytes>
    c4fc:	|         addq.l #4,sp
    c4fe:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c502:	|         move.l 112(sp),-(sp)
    c506:	|         jsr 6bc <get2bytes>
    c50c:	|         addq.l #4,sp
    c50e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c512:	|         move.l 112(sp),-(sp)
    c516:	|         jsr 7d8 <getFloat>
    c51c:	|         addq.l #4,sp
    c51e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c522:	|         move.l 112(sp),54(sp)
    c528:	|         move.l 1cbd2 <DOSBase>,d0
    c52e:	|         movea.l d0,a6
    c530:	|         move.l 54(sp),d1
    c534:	|         jsr -306(a6)
    c538:	|         move.l d0,50(sp)
    c53c:	|         move.l 50(sp),d0
    c540:	|         move.l d0,d0
    c542:	|         move.b d0,1c538 <brightnessLevel>

	loadHandlers (fp);
    c548:	|         move.l 112(sp),-(sp)
    c54c:	|         jsr 6cf6 <loadHandlers>
    c552:	|         addq.l #4,sp
	loadRegions (fp);
    c554:	|         move.l 112(sp),-(sp)
    c558:	|         jsr 15be8 <loadRegions>
    c55e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c560:	|         moveq #12,d0
    c562:	|         move.l d0,46(sp)
    c566:	|         clr.l 42(sp)
    c56a:	|         move.l 1cbca <SysBase>,d0
    c570:	|         movea.l d0,a6
    c572:	|         move.l 46(sp),d0
    c576:	|         move.l 42(sp),d1
    c57a:	|         jsr -684(a6)
    c57e:	|         move.l d0,38(sp)
    c582:	|         move.l 38(sp),d0
    c586:	|         move.l d0,1cac4 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c58c:	|         move.l 1cac4 <mouseCursorAnim>,d0
    c592:	|     ,-- bne.s c5a6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c594:	|     |   pea 195c5 <PutChar+0x17a7>
    c59a:	|     |   jsr 1737c <KPrintF>
    c5a0:	|     |   addq.l #4,sp
		return FALSE;
    c5a2:	|     |   clr.w d0
    c5a4:	+-----|-- bra.s c61a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c5a6:	|     '-> jsr d44a <nosnapshot>
	if (FGetC (fp)) {
    c5ac:	|         move.l 112(sp),34(sp)
    c5b2:	|         move.l 1cbd2 <DOSBase>,d0
    c5b8:	|         movea.l d0,a6
    c5ba:	|         move.l 34(sp),d1
    c5be:	|         jsr -306(a6)
    c5c2:	|         move.l d0,30(sp)
    c5c6:	|         move.l 30(sp),d0
    c5ca:	|     ,-- beq.s c5e0 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c5cc:	|     |   move.l 112(sp),-(sp)
    c5d0:	|     |   jsr d4ca <restoreSnapshot>
    c5d6:	|     |   addq.l #4,sp
    c5d8:	|     |   tst.w d0
    c5da:	|     +-- bne.s c5e0 <loadGame+0x2bc>
    c5dc:	|     |   clr.w d0
    c5de:	+-----|-- bra.s c61a <loadGame+0x2f6>
	}

	Close (fp);
    c5e0:	|     '-> move.l 112(sp),26(sp)
    c5e6:	|         move.l 1cbd2 <DOSBase>,d0
    c5ec:	|         movea.l d0,a6
    c5ee:	|         move.l 26(sp),d1
    c5f2:	|         jsr -36(a6)
    c5f6:	|         move.l d0,22(sp)
	clearStackLib ();
    c5fa:	|         jsr c2da <clearStackLib>

	cameraX = camerX;
    c600:	|         move.l 66(sp),1cc80 <cameraX>
	cameraY = camerY;
    c608:	|         move.l 62(sp),1cc84 <cameraY>
	cameraZoom = camerZ;
    c610:	|         move.l 58(sp),1c55c <cameraZoom>

	return TRUE;
    c618:	|         moveq #1,d0
}
    c61a:	'-------> movem.l (sp)+,d2-d3/a6
    c61e:	          lea 128(sp),sp
    c622:	          rts

0000c624 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c624:	   ,-> lea -64(sp),sp
    c628:	   |   move.l a6,-(sp)
    c62a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c62c:	   |   movea.l 76(sp),a0
    c630:	   |   move.l (a0),d0
    c632:	   |   move.l 80(sp),-(sp)
    c636:	   |   move.l d0,-(sp)
    c638:	   |   jsr 8d0 <put2bytes>
    c63e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c640:	   |   movea.l 76(sp),a0
    c644:	   |   move.l 40(a0),d0
    c648:	,--|-- beq.s c684 <saveFunction+0x60>
		FPutC (fp, 1);
    c64a:	|  |   move.l 80(sp),52(sp)
    c650:	|  |   moveq #1,d0
    c652:	|  |   move.l d0,48(sp)
    c656:	|  |   move.l 1cbd2 <DOSBase>,d0
    c65c:	|  |   movea.l d0,a6
    c65e:	|  |   move.l 52(sp),d1
    c662:	|  |   move.l 48(sp),d2
    c666:	|  |   jsr -312(a6)
    c66a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c66e:	|  |   movea.l 76(sp),a0
    c672:	|  |   move.l 40(a0),d0
    c676:	|  |   move.l 80(sp),-(sp)
    c67a:	|  |   move.l d0,-(sp)
    c67c:	|  '-- jsr c624 <saveFunction>(pc)
    c680:	|      addq.l #8,sp
    c682:	|  ,-- bra.s c6a6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c684:	'--|-> move.l 80(sp),64(sp)
    c68a:	   |   clr.l 60(sp)
    c68e:	   |   move.l 1cbd2 <DOSBase>,d0
    c694:	   |   movea.l d0,a6
    c696:	   |   move.l 64(sp),d1
    c69a:	   |   move.l 60(sp),d2
    c69e:	   |   jsr -312(a6)
    c6a2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c6a6:	   '-> movea.l 76(sp),a0
    c6aa:	       move.l 12(a0),d0
    c6ae:	       move.l 80(sp),-(sp)
    c6b2:	       move.l d0,-(sp)
    c6b4:	       jsr 958 <put4bytes>
    c6ba:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c6bc:	       movea.l 76(sp),a0
    c6c0:	       move.l 36(a0),d0
    c6c4:	       move.l 80(sp),-(sp)
    c6c8:	       move.l d0,-(sp)
    c6ca:	       jsr 8d0 <put2bytes>
    c6d0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c6d2:	       move.l 80(sp),40(sp)
    c6d8:	       movea.l 76(sp),a0
    c6dc:	       move.w 54(a0),d0
    c6e0:	       movea.w d0,a0
    c6e2:	       move.l a0,36(sp)
    c6e6:	       move.l 1cbd2 <DOSBase>,d0
    c6ec:	       movea.l d0,a6
    c6ee:	       move.l 40(sp),d1
    c6f2:	       move.l 36(sp),d2
    c6f6:	       jsr -312(a6)
    c6fa:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c6fe:	       move.l 80(sp),28(sp)
    c704:	       movea.l 76(sp),a0
    c708:	       move.w 48(a0),d0
    c70c:	       movea.w d0,a0
    c70e:	       move.l a0,24(sp)
    c712:	       move.l 1cbd2 <DOSBase>,d0
    c718:	       movea.l d0,a6
    c71a:	       move.l 28(sp),d1
    c71e:	       move.l 24(sp),d2
    c722:	       jsr -312(a6)
    c726:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c72a:	       move.l 80(sp),16(sp)
    c730:	       movea.l 76(sp),a0
    c734:	       move.w 50(a0),d0
    c738:	       movea.w d0,a0
    c73a:	       move.l a0,12(sp)
    c73e:	       move.l 1cbd2 <DOSBase>,d0
    c744:	       movea.l d0,a6
    c746:	       move.l 16(sp),d1
    c74a:	       move.l 12(sp),d2
    c74e:	       jsr -312(a6)
    c752:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c756:	       moveq #28,d0
    c758:	       add.l 76(sp),d0
    c75c:	       move.l 80(sp),-(sp)
    c760:	       move.l d0,-(sp)
    c762:	       jsr ce7c <saveVariable>
    c768:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c76a:	       movea.l 76(sp),a0
    c76e:	       move.b 56(a0),d0
    c772:	   ,-- beq.s c782 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c774:	   |   pea 195e6 <PutChar+0x17c8>
    c77a:	   |   jsr 1737c <KPrintF>
    c780:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c782:	   '-> movea.l 76(sp),a0
    c786:	       move.l 24(a0),d0
    c78a:	       move.l 80(sp),-(sp)
    c78e:	       move.l d0,-(sp)
    c790:	       jsr ccf0 <saveStack>
    c796:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c798:	       clr.l 68(sp)
    c79c:	   ,-- bra.s c7c0 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c79e:	,--|-> movea.l 76(sp),a0
    c7a2:	|  |   move.l 20(a0),d1
    c7a6:	|  |   move.l 68(sp),d0
    c7aa:	|  |   lsl.l #3,d0
    c7ac:	|  |   add.l d1,d0
    c7ae:	|  |   move.l 80(sp),-(sp)
    c7b2:	|  |   move.l d0,-(sp)
    c7b4:	|  |   jsr ce7c <saveVariable>
    c7ba:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c7bc:	|  |   addq.l #1,68(sp)
    c7c0:	|  '-> movea.l 76(sp),a0
    c7c4:	|      move.l 8(a0),d0
    c7c8:	|      cmp.l 68(sp),d0
    c7cc:	'----- bgt.s c79e <saveFunction+0x17a>
	}
}
    c7ce:	       nop
    c7d0:	       nop
    c7d2:	       move.l (sp)+,d2
    c7d4:	       movea.l (sp)+,a6
    c7d6:	       lea 64(sp),sp
    c7da:	       rts

0000c7dc <saveGame>:

BOOL saveGame (char * fname) {
    c7dc:	          lea -248(sp),sp
    c7e0:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c7e4:	          move.l 264(sp),244(sp)
    c7ea:	          move.l #1006,240(sp)
    c7f2:	          move.l 1cbd2 <DOSBase>,d0
    c7f8:	          movea.l d0,a6
    c7fa:	          move.l 244(sp),d1
    c7fe:	          move.l 240(sp),d2
    c802:	          jsr -30(a6)
    c806:	          move.l d0,236(sp)
    c80a:	          move.l 236(sp),d0
    c80e:	          move.l d0,232(sp)
	if (fp == NULL) {
    c812:	      ,-- bne.s c828 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c814:	      |   pea 19608 <PutChar+0x17ea>
    c81a:	      |   jsr 1737c <KPrintF>
    c820:	      |   addq.l #4,sp
		return FALSE;
    c822:	      |   clr.w d0
    c824:	,-----|-- bra.w cce6 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c828:	|     '-> move.l 232(sp),228(sp)
    c82e:	|         move.l #103973,224(sp)
    c836:	|         moveq #6,d0
    c838:	|         move.l d0,220(sp)
    c83c:	|         move.l 1cbd2 <DOSBase>,d0
    c842:	|         movea.l d0,a6
    c844:	|         move.l 228(sp),d1
    c848:	|         move.l 224(sp),d2
    c84c:	|         move.l 220(sp),d3
    c850:	|         jsr -48(a6)
    c854:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c858:	|         move.l 232(sp),212(sp)
    c85e:	|         clr.l 208(sp)
    c862:	|         move.l 1cbd2 <DOSBase>,d0
    c868:	|         movea.l d0,a6
    c86a:	|         move.l 212(sp),d1
    c86e:	|         move.l 208(sp),d2
    c872:	|         jsr -312(a6)
    c876:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c87a:	|         move.l 232(sp),200(sp)
    c880:	|         clr.l 196(sp)
    c884:	|         move.l 1cbd2 <DOSBase>,d0
    c88a:	|         movea.l d0,a6
    c88c:	|         move.l 200(sp),d1
    c890:	|         move.l 196(sp),d2
    c894:	|         jsr -312(a6)
    c898:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c89c:	|         move.l 232(sp),188(sp)
    c8a2:	|         moveq #2,d0
    c8a4:	|         move.l d0,184(sp)
    c8a8:	|         move.l 1cbd2 <DOSBase>,d0
    c8ae:	|         movea.l d0,a6
    c8b0:	|         move.l 188(sp),d1
    c8b4:	|         move.l 184(sp),d2
    c8b8:	|         jsr -312(a6)
    c8bc:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c8c0:	|         move.l 232(sp),176(sp)
    c8c6:	|         moveq #2,d0
    c8c8:	|         move.l d0,172(sp)
    c8cc:	|         move.l 1cbd2 <DOSBase>,d0
    c8d2:	|         movea.l d0,a6
    c8d4:	|         move.l 176(sp),d1
    c8d8:	|         move.l 172(sp),d2
    c8dc:	|         jsr -312(a6)
    c8e0:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c8e4:	|         move.l 232(sp),164(sp)
    c8ea:	|         move.l #117612,160(sp)
    c8f2:	|         moveq #8,d0
    c8f4:	|         move.l d0,156(sp)
    c8f8:	|         move.l 1cbd2 <DOSBase>,d0
    c8fe:	|         movea.l d0,a6
    c900:	|         move.l 164(sp),d1
    c904:	|         move.l 160(sp),d2
    c908:	|         move.l 156(sp),d3
    c90c:	|         jsr -48(a6)
    c910:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c914:	|         move.l 232(sp),148(sp)
    c91a:	|         move.w 1c41a <allowAnyFilename>,d0
    c920:	|         movea.w d0,a0
    c922:	|         move.l a0,144(sp)
    c926:	|         move.l 1cbd2 <DOSBase>,d0
    c92c:	|         movea.l d0,a6
    c92e:	|         move.l 148(sp),d1
    c932:	|         move.l 144(sp),d2
    c936:	|         jsr -312(a6)
    c93a:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c93e:	|         move.l 232(sp),136(sp)
    c944:	|         move.w 1cb6a <captureAllKeys>,d0
    c94a:	|         movea.w d0,a0
    c94c:	|         move.l a0,132(sp)
    c950:	|         move.l 1cbd2 <DOSBase>,d0
    c956:	|         movea.l d0,a6
    c958:	|         move.l 136(sp),d1
    c95c:	|         move.l 132(sp),d2
    c960:	|         jsr -312(a6)
    c964:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c968:	|         move.l 232(sp),124(sp)
    c96e:	|         moveq #1,d0
    c970:	|         move.l d0,120(sp)
    c974:	|         move.l 1cbd2 <DOSBase>,d0
    c97a:	|         movea.l d0,a6
    c97c:	|         move.l 124(sp),d1
    c980:	|         move.l 120(sp),d2
    c984:	|         jsr -312(a6)
    c988:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c98c:	|         move.l 232(sp),112(sp)
    c992:	|         move.l 1ccce <fontTableSize>,d0
    c998:	|         sgt d0
    c99a:	|         neg.b d0
    c99c:	|         move.b d0,d0
    c99e:	|         andi.l #255,d0
    c9a4:	|         move.l d0,108(sp)
    c9a8:	|         move.l 1cbd2 <DOSBase>,d0
    c9ae:	|         movea.l d0,a6
    c9b0:	|         move.l 112(sp),d1
    c9b4:	|         move.l 108(sp),d2
    c9b8:	|         jsr -312(a6)
    c9bc:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c9c0:	|         move.l 1ccce <fontTableSize>,d0
    c9c6:	|     ,-- ble.s ca04 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c9c8:	|     |   move.l 1ccc2 <loadedFontNum>,d0
    c9ce:	|     |   move.l 232(sp),-(sp)
    c9d2:	|     |   move.l d0,-(sp)
    c9d4:	|     |   jsr 8d0 <put2bytes>
    c9da:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c9dc:	|     |   move.l 1ccbe <fontHeight>,d0
    c9e2:	|     |   move.l 232(sp),-(sp)
    c9e6:	|     |   move.l d0,-(sp)
    c9e8:	|     |   jsr 8d0 <put2bytes>
    c9ee:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c9f0:	|     |   move.l 1ccc6 <fontOrderString>,d0
    c9f6:	|     |   move.l 232(sp),-(sp)
    c9fa:	|     |   move.l d0,-(sp)
    c9fc:	|     |   jsr bd8 <writeString>
    ca02:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ca04:	|     '-> move.w 1cac2 <fontSpace>,d0
    ca0a:	|         movea.w d0,a0
    ca0c:	|         move.l 232(sp),-(sp)
    ca10:	|         move.l a0,-(sp)
    ca12:	|         jsr a9c <putSigned>
    ca18:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ca1a:	|         move.l 1cc80 <cameraX>,d0
    ca20:	|         move.l 232(sp),-(sp)
    ca24:	|         move.l d0,-(sp)
    ca26:	|         jsr 8d0 <put2bytes>
    ca2c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    ca2e:	|         move.l 1cc84 <cameraY>,d0
    ca34:	|         move.l 232(sp),-(sp)
    ca38:	|         move.l d0,-(sp)
    ca3a:	|         jsr 8d0 <put2bytes>
    ca40:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    ca42:	|         move.l 1c55c <cameraZoom>,d0
    ca48:	|         move.l 232(sp),-(sp)
    ca4c:	|         move.l d0,-(sp)
    ca4e:	|         jsr a46 <putFloat>
    ca54:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    ca56:	|         move.l 232(sp),100(sp)
    ca5c:	|         move.b 1c538 <brightnessLevel>,d0
    ca62:	|         move.b d0,d0
    ca64:	|         andi.l #255,d0
    ca6a:	|         move.l d0,96(sp)
    ca6e:	|         move.l 1cbd2 <DOSBase>,d0
    ca74:	|         movea.l d0,a6
    ca76:	|         move.l 100(sp),d1
    ca7a:	|         move.l 96(sp),d2
    ca7e:	|         jsr -312(a6)
    ca82:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    ca86:	|         move.l 232(sp),-(sp)
    ca8a:	|         jsr 72e0 <saveHandlers>
    ca90:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    ca92:	|         move.l 232(sp),-(sp)
    ca96:	|         jsr 15da2 <saveRegions>
    ca9c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ca9e:	|         move.l 1cac4 <mouseCursorAnim>,d0
    caa4:	|         move.l 232(sp),-(sp)
    caa8:	|         move.l d0,-(sp)
    caaa:	|         jsr b000 <saveAnim>
    cab0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cab2:	|         move.l 1cac8 <mouseCursorFrameNum>,d0
    cab8:	|         move.l 232(sp),-(sp)
    cabc:	|         move.l d0,-(sp)
    cabe:	|         jsr 8d0 <put2bytes>
    cac4:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cac6:	|         move.l 1cb62 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cace:	|         clr.l 248(sp)
	while (thisFunction) {
    cad2:	|     ,-- bra.s cae2 <saveGame+0x306>
		countFunctions ++;
    cad4:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cad8:	|  |  |   movea.l 252(sp),a0
    cadc:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cae2:	|  |  '-> tst.l 252(sp)
    cae6:	|  '----- bne.s cad4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cae8:	|         move.l 232(sp),-(sp)
    caec:	|         move.l 252(sp),-(sp)
    caf0:	|         jsr 8d0 <put2bytes>
    caf6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    caf8:	|         move.l 1cb62 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cb00:	|     ,-- bra.s cb1c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cb02:	|  ,--|-> move.l 232(sp),-(sp)
    cb06:	|  |  |   move.l 256(sp),-(sp)
    cb0a:	|  |  |   jsr c624 <saveFunction>
    cb10:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cb12:	|  |  |   movea.l 252(sp),a0
    cb16:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cb1c:	|  |  '-> tst.l 252(sp)
    cb20:	|  '----- bne.s cb02 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cb22:	|         clr.l 256(sp)
    cb26:	|     ,-- bra.s cb48 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cb28:	|  ,--|-> move.l 1cb78 <globalVars>,d1
    cb2e:	|  |  |   move.l 256(sp),d0
    cb32:	|  |  |   lsl.l #3,d0
    cb34:	|  |  |   add.l d1,d0
    cb36:	|  |  |   move.l 232(sp),-(sp)
    cb3a:	|  |  |   move.l d0,-(sp)
    cb3c:	|  |  |   jsr ce7c <saveVariable>
    cb42:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cb44:	|  |  |   addq.l #1,256(sp)
    cb48:	|  |  '-> move.l 1cba2 <numGlobals>,d0
    cb4e:	|  |      cmp.l 256(sp),d0
    cb52:	|  '----- bgt.s cb28 <saveGame+0x34c>
	}

	savePeople (fp);
    cb54:	|         move.l 232(sp),-(sp)
    cb58:	|         jsr b128 <savePeople>
    cb5e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cb60:	|         movea.l 1cce2 <currentFloor>,a0
    cb66:	|         move.l 8(a0),d0
    cb6a:	|  ,----- beq.s cba8 <saveGame+0x3cc>
		FPutC (fp, 1);
    cb6c:	|  |      move.l 232(sp),76(sp)
    cb72:	|  |      moveq #1,d0
    cb74:	|  |      move.l d0,72(sp)
    cb78:	|  |      move.l 1cbd2 <DOSBase>,d0
    cb7e:	|  |      movea.l d0,a6
    cb80:	|  |      move.l 76(sp),d1
    cb84:	|  |      move.l 72(sp),d2
    cb88:	|  |      jsr -312(a6)
    cb8c:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cb90:	|  |      movea.l 1cce2 <currentFloor>,a0
    cb96:	|  |      move.l (a0),d0
    cb98:	|  |      move.l 232(sp),-(sp)
    cb9c:	|  |      move.l d0,-(sp)
    cb9e:	|  |      jsr 8d0 <put2bytes>
    cba4:	|  |      addq.l #8,sp
    cba6:	|  |  ,-- bra.s cbca <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cba8:	|  '--|-> move.l 232(sp),88(sp)
    cbae:	|     |   clr.l 84(sp)
    cbb2:	|     |   move.l 1cbd2 <DOSBase>,d0
    cbb8:	|     |   movea.l d0,a6
    cbba:	|     |   move.l 88(sp),d1
    cbbe:	|     |   move.l 84(sp),d2
    cbc2:	|     |   jsr -312(a6)
    cbc6:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cbca:	|     '-> move.l 232(sp),64(sp)
    cbd0:	|         move.l 1cc94 <speechMode>,60(sp)
    cbd8:	|         move.l 1cbd2 <DOSBase>,d0
    cbde:	|         movea.l d0,a6
    cbe0:	|         move.l 64(sp),d1
    cbe4:	|         move.l 60(sp),d2
    cbe8:	|         jsr -312(a6)
    cbec:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cbf0:	|         move.b 1ca98 <fadeMode>,d0
    cbf6:	|         move.b d0,d0
    cbf8:	|         andi.l #255,d0
    cbfe:	|         move.l d0,52(sp)
    cc02:	|         move.l 232(sp),48(sp)
    cc08:	|         move.l 1cbd2 <DOSBase>,d0
    cc0e:	|         movea.l d0,a6
    cc10:	|         move.l 52(sp),d1
    cc14:	|         move.l 48(sp),d2
    cc18:	|         jsr -312(a6)
    cc1c:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cc20:	|         move.l 1cb1a <speech>,d0
    cc26:	|         move.l 232(sp),-(sp)
    cc2a:	|         move.l d0,-(sp)
    cc2c:	|         jsr 4092 <saveSpeech>
    cc32:	|         addq.l #8,sp
	saveStatusBars (fp);
    cc34:	|         move.l 232(sp),-(sp)
    cc38:	|         jsr 845a <saveStatusBars>
    cc3e:	|         addq.l #4,sp
	saveSounds (fp);
    cc40:	|         move.l 232(sp),-(sp)
    cc44:	|         jsr d1ee <saveSounds>
    cc4a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cc4c:	|         move.w 1cc7e <saveEncoding>,d0
    cc52:	|         move.w d0,d0
    cc54:	|         andi.l #65535,d0
    cc5a:	|         move.l 232(sp),-(sp)
    cc5e:	|         move.l d0,-(sp)
    cc60:	|         jsr 8d0 <put2bytes>
    cc66:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cc68:	|         move.l 1cc70 <parallaxStuff>,d0
    cc6e:	|         move.l 232(sp),-(sp)
    cc72:	|         move.l d0,-(sp)
    cc74:	|         jsr d4f0 <saveParallaxRecursive>
    cc7a:	|         addq.l #8,sp
	FPutC (fp, 0);
    cc7c:	|         move.l 232(sp),40(sp)
    cc82:	|         clr.l 36(sp)
    cc86:	|         move.l 1cbd2 <DOSBase>,d0
    cc8c:	|         movea.l d0,a6
    cc8e:	|         move.l 40(sp),d1
    cc92:	|         move.l 36(sp),d2
    cc96:	|         jsr -312(a6)
    cc9a:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cc9e:	|         move.l 232(sp),28(sp)
    cca4:	|         move.l 1c53e <languageNum>,24(sp)
    ccac:	|         move.l 1cbd2 <DOSBase>,d0
    ccb2:	|         movea.l d0,a6
    ccb4:	|         move.l 28(sp),d1
    ccb8:	|         move.l 24(sp),d2
    ccbc:	|         jsr -312(a6)
    ccc0:	|         move.l d0,20(sp)

	Close(fp);
    ccc4:	|         move.l 232(sp),16(sp)
    ccca:	|         move.l 1cbd2 <DOSBase>,d0
    ccd0:	|         movea.l d0,a6
    ccd2:	|         move.l 16(sp),d1
    ccd6:	|         jsr -36(a6)
    ccda:	|         move.l d0,12(sp)
	clearStackLib ();
    ccde:	|         jsr c2da <clearStackLib>
	return TRUE;
    cce4:	|         moveq #1,d0
}
    cce6:	'-------> movem.l (sp)+,d2-d3/a6
    ccea:	          lea 248(sp),sp
    ccee:	          rts

0000ccf0 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    ccf0:	       lea -12(sp),sp
	int elements = 0;
    ccf4:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    ccf8:	       move.l 16(sp),(sp)
	while (search) {
    ccfc:	   ,-- bra.s cd08 <saveStack+0x18>
		elements ++;
    ccfe:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cd02:	|  |   movea.l (sp),a0
    cd04:	|  |   move.l 8(a0),(sp)
	while (search) {
    cd08:	|  '-> tst.l (sp)
    cd0a:	'----- bne.s ccfe <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cd0c:	       move.l 20(sp),-(sp)
    cd10:	       move.l 12(sp),-(sp)
    cd14:	       jsr 8d0 <put2bytes>
    cd1a:	       addq.l #8,sp
	search = vs;
    cd1c:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cd20:	       clr.l 4(sp)
    cd24:	   ,-- bra.s cd40 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cd26:	,--|-> move.l (sp),d0
    cd28:	|  |   move.l 20(sp),-(sp)
    cd2c:	|  |   move.l d0,-(sp)
    cd2e:	|  |   jsr ce7c <saveVariable>
    cd34:	|  |   addq.l #8,sp
		search = search -> next;
    cd36:	|  |   movea.l (sp),a0
    cd38:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cd3c:	|  |   addq.l #1,4(sp)
    cd40:	|  '-> move.l 4(sp),d0
    cd44:	|      cmp.l 8(sp),d0
    cd48:	'----- blt.s cd26 <saveStack+0x36>
	}
}
    cd4a:	       nop
    cd4c:	       nop
    cd4e:	       lea 12(sp),sp
    cd52:	       rts

0000cd54 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cd54:	             lea -44(sp),sp
    cd58:	             move.l a6,-(sp)
    cd5a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cd5c:	             move.l 1cc56 <stackLib>,48(sp)
	int a = 0;
    cd64:	             clr.l 44(sp)
	while (s) {
    cd68:	      ,----- bra.s cdc6 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cd6a:	   ,--|----> movea.l 48(sp),a0
    cd6e:	   |  |      move.l (a0),d0
    cd70:	   |  |      cmp.l 56(sp),d0
    cd74:	   |  |  ,-- bne.s cdb8 <saveStackRef+0x64>
			FPutC (fp, 1);
    cd76:	   |  |  |   move.l 60(sp),16(sp)
    cd7c:	   |  |  |   moveq #1,d0
    cd7e:	   |  |  |   move.l d0,12(sp)
    cd82:	   |  |  |   move.l 1cbd2 <DOSBase>,d0
    cd88:	   |  |  |   movea.l d0,a6
    cd8a:	   |  |  |   move.l 16(sp),d1
    cd8e:	   |  |  |   move.l 12(sp),d2
    cd92:	   |  |  |   jsr -312(a6)
    cd96:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cd9a:	   |  |  |   move.l 1cc52 <stackLibTotal>,d0
    cda0:	   |  |  |   sub.l 44(sp),d0
    cda4:	   |  |  |   move.l 60(sp),-(sp)
    cda8:	   |  |  |   move.l d0,-(sp)
    cdaa:	   |  |  |   jsr 8d0 <put2bytes>
    cdb0:	   |  |  |   addq.l #8,sp
			return TRUE;
    cdb2:	   |  |  |   moveq #1,d0
    cdb4:	,--|--|--|-- bra.w ce72 <saveStackRef+0x11e>
		}
		s = s -> next;
    cdb8:	|  |  |  '-> movea.l 48(sp),a0
    cdbc:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cdc2:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cdc6:	|  |  '----> tst.l 48(sp)
    cdca:	|  '-------- bne.s cd6a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cdcc:	|            move.l 60(sp),40(sp)
    cdd2:	|            clr.l 36(sp)
    cdd6:	|            move.l 1cbd2 <DOSBase>,d0
    cddc:	|            movea.l d0,a6
    cdde:	|            move.l 40(sp),d1
    cde2:	|            move.l 36(sp),d2
    cde6:	|            jsr -312(a6)
    cdea:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cdee:	|            movea.l 56(sp),a0
    cdf2:	|            move.l (a0),d0
    cdf4:	|            move.l 60(sp),-(sp)
    cdf8:	|            move.l d0,-(sp)
    cdfa:	|            jsr ccf0 <saveStack>
    ce00:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    ce02:	|            moveq #8,d0
    ce04:	|            move.l d0,28(sp)
    ce08:	|            clr.l 24(sp)
    ce0c:	|            move.l 1cbca <SysBase>,d0
    ce12:	|            movea.l d0,a6
    ce14:	|            move.l 28(sp),d0
    ce18:	|            move.l 24(sp),d1
    ce1c:	|            jsr -684(a6)
    ce20:	|            move.l d0,20(sp)
    ce24:	|            move.l 20(sp),d0
    ce28:	|            move.l d0,48(sp)
	stackLibTotal ++;
    ce2c:	|            move.l 1cc52 <stackLibTotal>,d0
    ce32:	|            addq.l #1,d0
    ce34:	|            move.l d0,1cc52 <stackLibTotal>
	if (! s) {
    ce3a:	|            tst.l 48(sp)
    ce3e:	|        ,-- bne.s ce52 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    ce40:	|        |   pea 19654 <PutChar+0x1836>
    ce46:	|        |   jsr 1737c <KPrintF>
    ce4c:	|        |   addq.l #4,sp
		return FALSE;
    ce4e:	|        |   clr.w d0
    ce50:	+--------|-- bra.s ce72 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    ce52:	|        '-> move.l 1cc56 <stackLib>,d0
    ce58:	|            movea.l 48(sp),a0
    ce5c:	|            move.l d0,4(a0)
	s -> stack = vs;
    ce60:	|            movea.l 48(sp),a0
    ce64:	|            move.l 56(sp),(a0)
	stackLib = s;
    ce68:	|            move.l 48(sp),1cc56 <stackLib>
	return TRUE;
    ce70:	|            moveq #1,d0
}
    ce72:	'----------> move.l (sp)+,d2
    ce74:	             movea.l (sp)+,a6
    ce76:	             lea 44(sp),sp
    ce7a:	             rts

0000ce7c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    ce7c:	          lea -12(sp),sp
    ce80:	          move.l a6,-(sp)
    ce82:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    ce84:	          move.l 28(sp),16(sp)
    ce8a:	          movea.l 24(sp),a0
    ce8e:	          move.l (a0),d0
    ce90:	          move.l d0,12(sp)
    ce94:	          move.l 1cbd2 <DOSBase>,d0
    ce9a:	          movea.l d0,a6
    ce9c:	          move.l 16(sp),d1
    cea0:	          move.l 12(sp),d2
    cea4:	          jsr -312(a6)
    cea8:	          move.l d0,8(sp)
	switch (from -> varType) {
    ceac:	          movea.l 24(sp),a0
    ceb0:	          move.l (a0),d0
    ceb2:	          moveq #9,d1
    ceb4:	          cmp.l d0,d1
    ceb6:	      ,-- bcs.w cf66 <saveVariable+0xea>
    ceba:	      |   add.l d0,d0
    cebc:	      |   movea.l d0,a0
    cebe:	      |   adda.l #52938,a0
    cec4:	      |   move.w (a0),d0
    cec6:	      |   jmp (ceca <saveVariable+0x4e>,pc,d0.w)
    ceca:	      |   ori.l #1310740,(a0)+
    ced0:	      |   ori.b #20,(20,a0,d0.w)
    ced6:	      |   .short 0x004c
    ced8:	      |   ori.b #126,(a4)
    cedc:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cee0:	      |   ori.b #40,(a0)+
    cee4:	      |   ori.b #47,d4
    cee8:	      |   ori.b #0,(a4)+
    ceec:	      |   jsr 958 <put4bytes>
    cef2:	      |   addq.l #8,sp
		return TRUE;
    cef4:	      |   moveq #1,d0
    cef6:	,-----|-- bra.w cfa2 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cefa:	|     |   movea.l 24(sp),a0
    cefe:	|     |   move.l 4(a0),d0
    cf02:	|     |   move.l 28(sp),-(sp)
    cf06:	|     |   move.l d0,-(sp)
    cf08:	|     |   jsr bd8 <writeString>
    cf0e:	|     |   addq.l #8,sp
		return TRUE;
    cf10:	|     |   moveq #1,d0
    cf12:	+-----|-- bra.w cfa2 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cf16:	|     |   movea.l 24(sp),a0
    cf1a:	|     |   move.l 4(a0),d0
    cf1e:	|     |   move.l 28(sp),-(sp)
    cf22:	|     |   move.l d0,-(sp)
    cf24:	|     |   jsr cd54 <saveStackRef>
    cf2a:	|     |   addq.l #8,sp
    cf2c:	+-----|-- bra.s cfa2 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cf2e:	|     |   movea.l 24(sp),a0
    cf32:	|     |   move.l 4(a0),d0
    cf36:	|     |   move.l 28(sp),-(sp)
    cf3a:	|     |   move.l d0,-(sp)
    cf3c:	|     |   jsr b0ca <saveCostume>
    cf42:	|     |   addq.l #8,sp
		return FALSE;
    cf44:	|     |   clr.w d0
    cf46:	+-----|-- bra.s cfa2 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cf48:	|     |   movea.l 24(sp),a0
    cf4c:	|     |   move.l 4(a0),d0
    cf50:	|     |   move.l 28(sp),-(sp)
    cf54:	|     |   move.l d0,-(sp)
    cf56:	|     |   jsr b000 <saveAnim>
    cf5c:	|     |   addq.l #8,sp
		return FALSE;
    cf5e:	|     |   clr.w d0
    cf60:	+-----|-- bra.s cfa2 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cf62:	|     |   clr.w d0
    cf64:	+-----|-- bra.s cfa2 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cf66:	|     '-> movea.l 24(sp),a0
    cf6a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf6c:	|         moveq #10,d1
    cf6e:	|         cmp.l d0,d1
    cf70:	|  ,----- bcs.s cf8a <saveVariable+0x10e>
						typeName[from->varType] :
    cf72:	|  |      movea.l 24(sp),a0
    cf76:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf78:	|  |      add.l d0,d0
    cf7a:	|  |      movea.l d0,a1
    cf7c:	|  |      adda.l d0,a1
    cf7e:	|  |      lea 1ca9a <typeName>,a0
    cf84:	|  |      move.l (0,a1,a0.l),d0
    cf88:	|  |  ,-- bra.s cf90 <saveVariable+0x114>
    cf8a:	|  '--|-> move.l #104057,d0
    cf90:	|     '-> move.l d0,-(sp)
    cf92:	|         pea 19680 <PutChar+0x1862>
    cf98:	|         jsr 1737c <KPrintF>
    cf9e:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cfa0:	|         moveq #1,d0
    cfa2:	'-------> move.l (sp)+,d2
    cfa4:	          movea.l (sp)+,a6
    cfa6:	          lea 12(sp),sp
    cfaa:	          rts

0000cfac <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cfac:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cfb0:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cfb8:	          movea.l 4(sp),a0
    cfbc:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cfc2:	          movea.l 4(sp),a0
    cfc6:	          move.w 10(a0),d0
    cfca:	          lsr.w #8,d0
    cfcc:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cfd0:	          movea.l 4(sp),a0
    cfd4:	          move.w 10(a0),d0
    cfd8:	          move.b d0,(sp)

    if(counterx_new)
    cfda:	,-------- beq.w d080 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cfde:	|         clr.w d1
    cfe0:	|         move.b (sp),d1
    cfe2:	|         move.w 1cc5e <counterx_old>,d0
    cfe8:	|         sub.w d0,d1
    cfea:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cfee:	|         cmpi.w #128,10(sp)
    cff4:	|     ,-- blt.s d00c <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cff6:	|     |   move.w #1,1cb80 <input+0x4>
            counterx_diff -= 256;    
    cffe:	|     |   move.w 10(sp),d0
    d002:	|     |   addi.w #-256,d0
    d006:	|     |   move.w d0,10(sp)
    d00a:	|  ,--|-- bra.s d038 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d00c:	|  |  '-> cmpi.w #-129,10(sp)
    d012:	|  |  ,-- bgt.s d02a <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d014:	|  |  |   move.w 10(sp),d0
    d018:	|  |  |   addi.w #256,d0
    d01c:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d020:	|  |  |   move.w #1,1cb80 <input+0x4>
    d028:	|  +--|-- bra.s d038 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d02a:	|  |  '-> tst.w 10(sp)
    d02e:	|  +----- beq.s d038 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d030:	|  |      move.w #1,1cb80 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d038:	|  '----> move.l 1cb86 <input+0xa>,d0
    d03e:	|         movea.w 10(sp),a0
    d042:	|         add.l a0,d0
    d044:	|         move.l d0,1cb86 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d04a:	|         move.l 1cb86 <input+0xa>,d1
    d050:	|         move.l 1cb1e <winWidth>,d0
    d056:	|         cmp.l d1,d0
    d058:	|     ,-- bge.s d068 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d05a:	|     |   move.l 1cb1e <winWidth>,d0
    d060:	|     |   move.l d0,1cb86 <input+0xa>
    d066:	|  ,--|-- bra.s d076 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d068:	|  |  '-> move.l 1cb86 <input+0xa>,d0
    d06e:	|  +----- bpl.s d076 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d070:	|  |      clr.l 1cb86 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d076:	|  '----> clr.w d0
    d078:	|         move.b (sp),d0
    d07a:	|         move.w d0,1cc5e <counterx_old>
    }    

    if(countery_new)
    d080:	'-------> tst.b 1(sp)
    d084:	,-------- beq.w d12e <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d088:	|         clr.w d1
    d08a:	|         move.b 1(sp),d1
    d08e:	|         move.w 1cc60 <countery_old>,d0
    d094:	|         sub.w d0,d1
    d096:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d09a:	|         cmpi.w #128,8(sp)
    d0a0:	|     ,-- blt.s d0b8 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d0a2:	|     |   move.w #1,1cb80 <input+0x4>
            countery_diff -= 256;    
    d0aa:	|     |   move.w 8(sp),d0
    d0ae:	|     |   addi.w #-256,d0
    d0b2:	|     |   move.w d0,8(sp)
    d0b6:	|  ,--|-- bra.s d0e4 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d0b8:	|  |  '-> cmpi.w #-129,8(sp)
    d0be:	|  |  ,-- bgt.s d0d6 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d0c0:	|  |  |   move.w #1,1cb80 <input+0x4>
            countery_diff += 256;
    d0c8:	|  |  |   move.w 8(sp),d0
    d0cc:	|  |  |   addi.w #256,d0
    d0d0:	|  |  |   move.w d0,8(sp)
    d0d4:	|  +--|-- bra.s d0e4 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d0d6:	|  |  '-> tst.w 8(sp)
    d0da:	|  +----- beq.s d0e4 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d0dc:	|  |      move.w #1,1cb80 <input+0x4>
        }

        input.mouseY += countery_diff;
    d0e4:	|  '----> move.l 1cb8a <input+0xe>,d0
    d0ea:	|         movea.w 8(sp),a0
    d0ee:	|         add.l a0,d0
    d0f0:	|         move.l d0,1cb8a <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d0f6:	|         move.l 1cb8a <input+0xe>,d1
    d0fc:	|         move.l 1cb22 <winHeight>,d0
    d102:	|         cmp.l d1,d0
    d104:	|     ,-- bge.s d114 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d106:	|     |   move.l 1cb22 <winHeight>,d0
    d10c:	|     |   move.l d0,1cb8a <input+0xe>
    d112:	|  ,--|-- bra.s d122 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d114:	|  |  '-> move.l 1cb8a <input+0xe>,d0
    d11a:	|  +----- bpl.s d122 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d11c:	|  |      clr.l 1cb8a <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d122:	|  '----> clr.w d0
    d124:	|         move.b 1(sp),d0
    d128:	|         move.w d0,1cc60 <countery_old>
    } 

    input.leftRelease = FALSE;
    d12e:	'-------> clr.w 1cb82 <input+0x6>
    input.rightRelease = FALSE;
    d134:	          clr.w 1cb84 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d13a:	          move.w 1cb7c <input>,d0
    d140:	      ,-- beq.s d166 <CsiCheckInput+0x1ba>
    d142:	      |   movea.l #12574721,a0
    d148:	      |   move.b (a0),d0
    d14a:	      |   move.b d0,d0
    d14c:	      |   andi.l #255,d0
    d152:	      |   moveq #64,d1
    d154:	      |   and.l d1,d0
    d156:	      +-- beq.s d166 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d158:	      |   clr.w 1cb7c <input>
        input.leftRelease = TRUE;
    d15e:	      |   move.w #1,1cb82 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d166:	      '-> move.w 1cb7e <input+0x2>,d0
    d16c:	      ,-- beq.s d194 <CsiCheckInput+0x1e8>
    d16e:	      |   movea.l #14675990,a0
    d174:	      |   move.w (a0),d0
    d176:	      |   move.w d0,d0
    d178:	      |   andi.l #65535,d0
    d17e:	      |   andi.l #1024,d0
    d184:	      +-- beq.s d194 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d186:	      |   clr.w 1cb7e <input+0x2>
        input.rightRelease = TRUE;
    d18c:	      |   move.w #1,1cb84 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d194:	      '-> movea.l #12574721,a0
    d19a:	          move.b (a0),d0
    d19c:	          move.b d0,d0
    d19e:	          andi.l #255,d0
    d1a4:	          moveq #64,d1
    d1a6:	          and.l d1,d0
    d1a8:	      ,-- bne.s d1b2 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d1aa:	      |   move.w #1,1cb7c <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d1b2:	      '-> movea.l #14675990,a0
    d1b8:	          move.w (a0),d0
    d1ba:	          move.w d0,d0
    d1bc:	          andi.l #65535,d0
    d1c2:	          andi.l #1024,d0
    d1c8:	      ,-- bne.s d1d2 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d1ca:	      |   move.w #1,1cb7e <input+0x2>
    }

    d1d2:	      '-> nop
    d1d4:	          lea 12(sp),sp
    d1d8:	          rts

0000d1da <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d1da:	moveq #0,d0
}
    d1dc:	rts

0000d1de <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d1de:	nop
    d1e0:	rts

0000d1e2 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d1e2:	nop
    d1e4:	rts

0000d1e6 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d1e6:	moveq #1,d0
}
    d1e8:	rts

0000d1ea <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d1ea:	nop
    d1ec:	rts

0000d1ee <saveSounds>:

void saveSounds (BPTR fp) {
    d1ee:	lea -12(sp),sp
    d1f2:	move.l a6,-(sp)
    d1f4:	move.l d2,-(sp)
	FPutC (fp,0);
    d1f6:	move.l 24(sp),16(sp)
    d1fc:	clr.l 12(sp)
    d200:	move.l 1cbd2 <DOSBase>,d0
    d206:	movea.l d0,a6
    d208:	move.l 16(sp),d1
    d20c:	move.l 12(sp),d2
    d210:	jsr -312(a6)
    d214:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d218:	move.l 1c558 <defSoundVol>,d0
    d21e:	move.l 24(sp),-(sp)
    d222:	move.l d0,-(sp)
    d224:	jsr 8d0 <put2bytes>
    d22a:	addq.l #8,sp
	put2bytes (defVol, fp);
    d22c:	move.l 1c554 <defVol>,d0
    d232:	move.l 24(sp),-(sp)
    d236:	move.l d0,-(sp)
    d238:	jsr 8d0 <put2bytes>
    d23e:	addq.l #8,sp
}
    d240:	nop
    d242:	move.l (sp)+,d2
    d244:	movea.l (sp)+,a6
    d246:	lea 12(sp),sp
    d24a:	rts

0000d24c <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d24c:	move.l 4(sp),1c554 <defVol>
}
    d254:	nop
    d256:	rts

0000d258 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d258:	move.l 4(sp),1c558 <defSoundVol>
}
    d260:	nop
    d262:	rts

0000d264 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d264:	nop
    d266:	rts

0000d268 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d268:	nop
    d26a:	rts

0000d26c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d26c:	nop
    d26e:	rts

0000d270 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d270:	subq.l #4,sp
    d272:	move.l 12(sp),d0
    d276:	move.w d0,d0
    d278:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d27c:	moveq #1,d0
}
    d27e:	addq.l #4,sp
    d280:	rts

0000d282 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d282:	nop
    d284:	rts

0000d286 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d286:	move.l 16(sp),-(sp)
    d28a:	move.l 16(sp),-(sp)
    d28e:	move.l 16(sp),-(sp)
    d292:	move.l 16(sp),-(sp)
    d296:	jsr e0e <CstBlankScreen>
    d29c:	lea 16(sp),sp
}
    d2a0:	nop
    d2a2:	rts

0000d2a4 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d2a4:	pea 196a3 <PutChar+0x1885>
    d2aa:	jsr 1737c <KPrintF>
    d2b0:	addq.l #4,sp
}
    d2b2:	nop
    d2b4:	rts

0000d2b6 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d2b6:	movea.l 8(sp),a1
    d2ba:	movea.l 12(sp),a0
    d2be:	move.l 8(sp),d1
    d2c2:	move.l 4(sp),d0
    d2c6:	move.l a1,-(sp)
    d2c8:	move.l a0,-(sp)
    d2ca:	move.l d1,-(sp)
    d2cc:	move.l d0,-(sp)
    d2ce:	jsr 478c <drawLine>
    d2d4:	lea 16(sp),sp
}
    d2d8:	nop
    d2da:	rts

0000d2dc <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d2dc:	movea.l 12(sp),a1
    d2e0:	movea.l 4(sp),a0
    d2e4:	move.l 8(sp),d1
    d2e8:	move.l 4(sp),d0
    d2ec:	move.l a1,-(sp)
    d2ee:	move.l a0,-(sp)
    d2f0:	move.l d1,-(sp)
    d2f2:	move.l d0,-(sp)
    d2f4:	jsr 478c <drawLine>
    d2fa:	lea 16(sp),sp
}
    d2fe:	nop
    d300:	rts

0000d302 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d302:	pea 196dc <PutChar+0x18be>
    d308:	jsr 1737c <KPrintF>
    d30e:	addq.l #4,sp
}
    d310:	nop
    d312:	rts

0000d314 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d314:	jsr 1b28 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d31a:	pea 1cc6a <backdropTextureName>
    d320:	pea 1 <_start+0x1>
    d324:	jsr 490e <deleteTextures>
    d32a:	addq.l #8,sp
	backdropTextureName = 0;
    d32c:	clr.l 1cc6a <backdropTextureName>
	backdropExists = FALSE;
    d332:	clr.w 1cc6e <backdropExists>
}
    d338:	nop
    d33a:	rts

0000d33c <killParallax>:

void killParallax () {
    d33c:	          lea -12(sp),sp
    d340:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d342:	   ,----- bra.s d3ae <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d344:	,--|----> move.l 1cc70 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d34c:	|  |      movea.l 12(sp),a0
    d350:	|  |      move.l 42(a0),d0
    d354:	|  |      move.l d0,1cc70 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d35a:	|  |      move.l 12(sp),d0
    d35e:	|  |      addq.l #4,d0
    d360:	|  |      move.l d0,-(sp)
    d362:	|  |      pea 1 <_start+0x1>
    d366:	|  |      jsr 490e <deleteTextures>
    d36c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d36e:	|  |      movea.l 12(sp),a0
    d372:	|  |      move.l (a0),d0
    d374:	|  |  ,-- beq.s d38e <killParallax+0x52>
    d376:	|  |  |   movea.l 12(sp),a0
    d37a:	|  |  |   move.l (a0),8(sp)
    d37e:	|  |  |   move.l 1cbca <SysBase>,d0
    d384:	|  |  |   movea.l d0,a6
    d386:	|  |  |   movea.l 8(sp),a1
    d38a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d38e:	|  |  '-> tst.l 12(sp)
    d392:	|  |  ,-- beq.s d3aa <killParallax+0x6e>
    d394:	|  |  |   move.l 12(sp),4(sp)
    d39a:	|  |  |   move.l 1cbca <SysBase>,d0
    d3a0:	|  |  |   movea.l d0,a6
    d3a2:	|  |  |   movea.l 4(sp),a1
    d3a6:	|  |  |   jsr -690(a6)
		k = NULL;
    d3aa:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d3ae:	|  '----> move.l 1cc70 <parallaxStuff>,d0
    d3b4:	'-------- bne.s d344 <killParallax+0x8>
	}
}
    d3b6:	          nop
    d3b8:	          nop
    d3ba:	          movea.l (sp)+,a6
    d3bc:	          lea 12(sp),sp
    d3c0:	          rts

0000d3c2 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d3c2:	       move.l 4(sp),-(sp)
    d3c6:	       jsr 77b0 <openFileFromNum>
    d3cc:	       addq.l #4,sp
    d3ce:	       tst.l d0
    d3d0:	   ,-- bne.s d3e2 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d3d2:	   |   pea 196fd <PutChar+0x18df>
    d3d8:	   |   jsr 1737c <KPrintF>
    d3de:	   |   addq.l #4,sp
		return;
    d3e0:	,--|-- bra.s d402 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d3e2:	|  '-> move.l 1cbb2 <bigDataFile>,d0
    d3e8:	|      move.l 12(sp),-(sp)
    d3ec:	|      move.l 12(sp),-(sp)
    d3f0:	|      move.l d0,-(sp)
    d3f2:	|      jsr 1dcc <CstLoadBackdrop>
    d3f8:	|      lea 12(sp),sp
	finishAccess ();
    d3fc:	|      jsr 76a8 <finishAccess>
	
}
    d402:	'----> rts

0000d404 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d404:	subq.l #8,sp
    d406:	movea.l 12(sp),a0
    d40a:	move.l 16(sp),d1
    d40e:	move.l 20(sp),d0
    d412:	movea.w a0,a0
    d414:	move.w a0,6(sp)
    d418:	move.w d1,d1
    d41a:	move.w d1,4(sp)
    d41e:	move.w d0,d0
    d420:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d424:	pea 1974c <PutChar+0x192e>
    d42a:	jsr 1737c <KPrintF>
    d430:	addq.l #4,sp

}
    d432:	nop
    d434:	addq.l #8,sp
    d436:	rts

0000d438 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d438:	pea 1976f <PutChar+0x1951>
    d43e:	jsr 1737c <KPrintF>
    d444:	addq.l #4,sp
}
    d446:	nop
    d448:	rts

0000d44a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d44a:	pea 1cc74 <snapshotTextureName>
    d450:	pea 1 <_start+0x1>
    d454:	jsr 490e <deleteTextures>
    d45a:	addq.l #8,sp
	snapshotTextureName = 0;
    d45c:	clr.l 1cc74 <snapshotTextureName>
}
    d462:	nop
    d464:	rts

0000d466 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d466:	clr.l 1cc80 <cameraX>
	cameraY = 0;
    d46c:	clr.l 1cc84 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d472:	move.l 1cc66 <sceneHeight>,d0
    d478:	move.l d0,d1
    d47a:	move.l 1cc62 <sceneWidth>,d0
    d480:	move.l d1,-(sp)
    d482:	move.l d0,-(sp)
    d484:	jsr 379c <CstReserveBackdrop>
    d48a:	addq.l #8,sp
}
    d48c:	rts

0000d48e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d48e:	jsr d314 <killBackDrop>
	killParallax ();
    d494:	jsr d33c <killParallax>
	killZBuffer ();
    d49a:	jsr 86c6 <killZBuffer>
	sceneWidth = x;
    d4a0:	move.l 4(sp),d0
    d4a4:	move.l d0,1cc62 <sceneWidth>
	sceneHeight = y;
    d4aa:	move.l 8(sp),d0
    d4ae:	move.l d0,1cc66 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d4b4:	pea 197a8 <PutChar+0x198a>
    d4ba:	jsr 1737c <KPrintF>
    d4c0:	addq.l #4,sp
	return reserveBackdrop();
    d4c2:	jsr d466 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d4c8:	rts

0000d4ca <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d4ca:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d4cc:	move.l 12(sp),-(sp)
    d4d0:	jsr 6bc <get2bytes>
    d4d6:	addq.l #4,sp
    d4d8:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d4dc:	move.l 12(sp),-(sp)
    d4e0:	jsr 6bc <get2bytes>
    d4e6:	addq.l #4,sp
    d4e8:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d4ea:	moveq #1,d0
}
    d4ec:	addq.l #8,sp
    d4ee:	rts

0000d4f0 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d4f0:	   ,-> lea -12(sp),sp
    d4f4:	   |   move.l a6,-(sp)
    d4f6:	   |   move.l d2,-(sp)
	if (me) {
    d4f8:	   |   tst.l 24(sp)
    d4fc:	,--|-- beq.w d592 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d500:	|  |   movea.l 24(sp),a0
    d504:	|  |   move.l 42(a0),d0
    d508:	|  |   move.l 28(sp),-(sp)
    d50c:	|  |   move.l d0,-(sp)
    d50e:	|  '-- jsr d4f0 <saveParallaxRecursive>(pc)
    d512:	|      addq.l #8,sp
		FPutC (fp, 1);
    d514:	|      move.l 28(sp),16(sp)
    d51a:	|      moveq #1,d0
    d51c:	|      move.l d0,12(sp)
    d520:	|      move.l 1cbd2 <DOSBase>,d0
    d526:	|      movea.l d0,a6
    d528:	|      move.l 16(sp),d1
    d52c:	|      move.l 12(sp),d2
    d530:	|      jsr -312(a6)
    d534:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d538:	|      movea.l 24(sp),a0
    d53c:	|      move.w 28(a0),d0
    d540:	|      move.w d0,d0
    d542:	|      andi.l #65535,d0
    d548:	|      move.l 28(sp),-(sp)
    d54c:	|      move.l d0,-(sp)
    d54e:	|      jsr 8d0 <put2bytes>
    d554:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d556:	|      movea.l 24(sp),a0
    d55a:	|      move.w 30(a0),d0
    d55e:	|      move.w d0,d0
    d560:	|      andi.l #65535,d0
    d566:	|      move.l 28(sp),-(sp)
    d56a:	|      move.l d0,-(sp)
    d56c:	|      jsr 8d0 <put2bytes>
    d572:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d574:	|      movea.l 24(sp),a0
    d578:	|      move.w 32(a0),d0
    d57c:	|      move.w d0,d0
    d57e:	|      andi.l #65535,d0
    d584:	|      move.l 28(sp),-(sp)
    d588:	|      move.l d0,-(sp)
    d58a:	|      jsr 8d0 <put2bytes>
    d590:	|      addq.l #8,sp
	}
}
    d592:	'----> nop
    d594:	       move.l (sp)+,d2
    d596:	       movea.l (sp)+,a6
    d598:	       lea 12(sp),sp
    d59c:	       rts

0000d59e <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d59e:	pea 197cf <PutChar+0x19b1>
    d5a4:	jsr 1737c <KPrintF>
    d5aa:	addq.l #4,sp
	return TRUE;
    d5ac:	moveq #1,d0
    d5ae:	rts

0000d5b0 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d5b0:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d5b2:	             move.l 1cc78 <allObjectTypes>,(sp)

	while (huntType) {
    d5b8:	      ,----- bra.s d5d0 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d5ba:	   ,--|----> movea.l (sp),a0
    d5bc:	   |  |      move.l 4(a0),d0
    d5c0:	   |  |      cmp.l 8(sp),d0
    d5c4:	   |  |  ,-- bne.s d5ca <findObjectType+0x1a>
    d5c6:	   |  |  |   move.l (sp),d0
    d5c8:	,--|--|--|-- bra.s d5e0 <findObjectType+0x30>
		huntType = huntType -> next;
    d5ca:	|  |  |  '-> movea.l (sp),a0
    d5cc:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d5d0:	|  |  '----> tst.l (sp)
    d5d2:	|  '-------- bne.s d5ba <findObjectType+0xa>
	}

	return loadObjectType (i);
    d5d4:	|            move.l 8(sp),-(sp)
    d5d8:	|            jsr d6a0 <loadObjectType>
    d5de:	|            addq.l #4,sp
}
    d5e0:	'----------> addq.l #4,sp
    d5e2:	             rts

0000d5e4 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d5e4:	             lea -12(sp),sp
	int i, num = 0;
    d5e8:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d5ec:	             move.l 20(sp),-(sp)
    d5f0:	             jsr d5b0 <findObjectType>
    d5f6:	             addq.l #4,sp
    d5f8:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d5fa:	             clr.l 8(sp)
    d5fe:	   ,-------- bra.s d634 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d600:	,--|-------> movea.l (sp),a0
    d602:	|  |         move.l 38(a0),d1
    d606:	|  |         move.l 8(sp),d0
    d60a:	|  |         lsl.l #3,d0
    d60c:	|  |         movea.l d1,a0
    d60e:	|  |         adda.l d0,a0
    d610:	|  |         move.l (a0),d0
    d612:	|  |         cmp.l 16(sp),d0
    d616:	|  |  ,----- bne.s d630 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d618:	|  |  |      movea.l (sp),a0
    d61a:	|  |  |      move.l 38(a0),d1
    d61e:	|  |  |      move.l 8(sp),d0
    d622:	|  |  |      lsl.l #3,d0
    d624:	|  |  |      movea.l d1,a0
    d626:	|  |  |      adda.l d0,a0
    d628:	|  |  |      move.l 4(a0),4(sp)
			break;
    d62e:	|  |  |  ,-- bra.s d640 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d630:	|  |  '--|-> addq.l #1,8(sp)
    d634:	|  '-----|-> movea.l (sp),a0
    d636:	|        |   move.l 16(a0),d0
    d63a:	|        |   cmp.l 8(sp),d0
    d63e:	'--------|-- bgt.s d600 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d640:	         '-> move.l 4(sp),d0
}
    d644:	             lea 12(sp),sp
    d648:	             rts

0000d64a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d64a:	moveq #1,d0
}
    d64c:	rts

0000d64e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d64e:	subq.l #8,sp
    d650:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d652:	move.l 16(sp),-(sp)
    d656:	jsr 6bc <get2bytes>
    d65c:	addq.l #4,sp
    d65e:	move.l d0,-(sp)
    d660:	jsr d6a0 <loadObjectType>
    d666:	addq.l #4,sp
    d668:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d66c:	movea.l 8(sp),a0
    d670:	move.l (a0),4(sp)
    d674:	move.l 1cbca <SysBase>,d0
    d67a:	movea.l d0,a6
    d67c:	movea.l 4(sp),a1
    d680:	jsr -690(a6)
	r -> screenName = readString (fp);
    d684:	move.l 16(sp),-(sp)
    d688:	jsr b02 <readString>
    d68e:	addq.l #4,sp
    d690:	movea.l 8(sp),a0
    d694:	move.l d0,(a0)
	return r;
    d696:	move.l 8(sp),d0
}
    d69a:	movea.l (sp)+,a6
    d69c:	addq.l #8,sp
    d69e:	rts

0000d6a0 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d6a0:	          lea -84(sp),sp
    d6a4:	          move.l a6,-(sp)
    d6a6:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d6a8:	          moveq #42,d0
    d6aa:	          move.l d0,84(sp)
    d6ae:	          clr.l 80(sp)
    d6b2:	          move.l 1cbca <SysBase>,d0
    d6b8:	          movea.l d0,a6
    d6ba:	          move.l 84(sp),d0
    d6be:	          move.l 80(sp),d1
    d6c2:	          jsr -684(a6)
    d6c6:	          move.l d0,76(sp)
    d6ca:	          move.l 76(sp),d0
    d6ce:	          move.l d0,72(sp)

    if (newType) {
    d6d2:	,-------- beq.w d94c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d6d6:	|         move.l 96(sp),-(sp)
    d6da:	|         jsr 7878 <openObjectSlice>
    d6e0:	|         addq.l #4,sp
    d6e2:	|         tst.w d0
    d6e4:	+-------- beq.w d94c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d6e8:	|         move.l 1cbb2 <bigDataFile>,d0
    d6ee:	|         move.l d0,-(sp)
    d6f0:	|         jsr 6bc <get2bytes>
    d6f6:	|         addq.l #4,sp
    d6f8:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d6fc:	|         move.l 1cbb2 <bigDataFile>,64(sp)
    d704:	|         move.l 1cbd2 <DOSBase>,d0
    d70a:	|         movea.l d0,a6
    d70c:	|         move.l 64(sp),d1
    d710:	|         jsr -306(a6)
    d714:	|         move.l d0,60(sp)
    d718:	|         move.l 60(sp),d0
    d71c:	|         move.l d0,d0
    d71e:	|         movea.l 72(sp),a0
    d722:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d726:	|         move.l 1cbb2 <bigDataFile>,56(sp)
    d72e:	|         move.l 1cbd2 <DOSBase>,d0
    d734:	|         movea.l d0,a6
    d736:	|         move.l 56(sp),d1
    d73a:	|         jsr -306(a6)
    d73e:	|         move.l d0,52(sp)
    d742:	|         move.l 52(sp),d0
    d746:	|         move.l d0,d0
    d748:	|         movea.l 72(sp),a0
    d74c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d750:	|         move.l 1cbb2 <bigDataFile>,48(sp)
    d758:	|         move.l 1cbd2 <DOSBase>,d0
    d75e:	|         movea.l d0,a6
    d760:	|         move.l 48(sp),d1
    d764:	|         jsr -306(a6)
    d768:	|         move.l d0,44(sp)
    d76c:	|         move.l 44(sp),d0
    d770:	|         move.l d0,d0
    d772:	|         movea.l 72(sp),a0
    d776:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d77a:	|         move.l 1cbb2 <bigDataFile>,40(sp)
    d782:	|         move.l 1cbd2 <DOSBase>,d0
    d788:	|         movea.l d0,a6
    d78a:	|         move.l 40(sp),d1
    d78e:	|         jsr -306(a6)
    d792:	|         move.l d0,36(sp)
    d796:	|         move.l 36(sp),d0
    d79a:	|         movea.l 72(sp),a0
    d79e:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d7a2:	|         move.l 1cbb2 <bigDataFile>,32(sp)
    d7aa:	|         move.l 1cbd2 <DOSBase>,d0
    d7b0:	|         movea.l d0,a6
    d7b2:	|         move.l 32(sp),d1
    d7b6:	|         jsr -306(a6)
    d7ba:	|         move.l d0,28(sp)
    d7be:	|         move.l 28(sp),d0
    d7c2:	|         movea.l 72(sp),a0
    d7c6:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d7ca:	|         move.l 1cbb2 <bigDataFile>,d0
    d7d0:	|         move.l d0,-(sp)
    d7d2:	|         jsr 718 <get4bytes>
    d7d8:	|         addq.l #4,sp
    d7da:	|         movea.l 72(sp),a0
    d7de:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d7e2:	|         move.l 1cbb2 <bigDataFile>,d0
    d7e8:	|         move.l d0,-(sp)
    d7ea:	|         jsr 6bc <get2bytes>
    d7f0:	|         addq.l #4,sp
    d7f2:	|         movea.l 72(sp),a0
    d7f6:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d7fa:	|         move.l 1cbb2 <bigDataFile>,24(sp)
    d802:	|         move.l 1cbd2 <DOSBase>,d0
    d808:	|         movea.l d0,a6
    d80a:	|         move.l 24(sp),d1
    d80e:	|         jsr -306(a6)
    d812:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d816:	|         move.l 1cbb2 <bigDataFile>,d0
    d81c:	|         move.l d0,-(sp)
    d81e:	|         jsr 7d8 <getFloat>
    d824:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d826:	|         move.l 1cbb2 <bigDataFile>,d0
    d82c:	|         move.l d0,-(sp)
    d82e:	|         jsr 7d8 <getFloat>
    d834:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d836:	|         move.l 1cbb2 <bigDataFile>,d0
    d83c:	|         move.l d0,-(sp)
    d83e:	|         jsr 6bc <get2bytes>
    d844:	|         addq.l #4,sp
    d846:	|         move.l d0,d0
    d848:	|         movea.l 72(sp),a0
    d84c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d850:	|         move.l 1cbb2 <bigDataFile>,d0
    d856:	|         move.l d0,-(sp)
    d858:	|         jsr 6bc <get2bytes>
    d85e:	|         addq.l #4,sp
    d860:	|         movea.l 72(sp),a0
    d864:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d868:	|         movea.l 72(sp),a0
    d86c:	|         move.l 16(a0),d0
    d870:	|  ,----- beq.s d8a2 <loadObjectType+0x202>
    d872:	|  |      movea.l 72(sp),a0
    d876:	|  |      move.l 16(a0),d0
    d87a:	|  |      lsl.l #3,d0
    d87c:	|  |      move.l d0,16(sp)
    d880:	|  |      clr.l 12(sp)
    d884:	|  |      move.l 1cbca <SysBase>,d0
    d88a:	|  |      movea.l d0,a6
    d88c:	|  |      move.l 16(sp),d0
    d890:	|  |      move.l 12(sp),d1
    d894:	|  |      jsr -684(a6)
    d898:	|  |      move.l d0,8(sp)
    d89c:	|  |      move.l 8(sp),d0
    d8a0:	|  |  ,-- bra.s d8a4 <loadObjectType+0x204>
    d8a2:	|  '--|-> moveq #0,d0
    d8a4:	|     '-> movea.l 72(sp),a0
    d8a8:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d8ac:	|         clr.l 88(sp)
    d8b0:	|     ,-- bra.s d900 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d8b2:	|  ,--|-> move.l 1cbb2 <bigDataFile>,d1
    d8b8:	|  |  |   movea.l 72(sp),a0
    d8bc:	|  |  |   movea.l 38(a0),a0
    d8c0:	|  |  |   move.l 88(sp),d0
    d8c4:	|  |  |   lsl.l #3,d0
    d8c6:	|  |  |   lea (0,a0,d0.l),a2
    d8ca:	|  |  |   move.l d1,-(sp)
    d8cc:	|  |  |   jsr 6bc <get2bytes>
    d8d2:	|  |  |   addq.l #4,sp
    d8d4:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d8d6:	|  |  |   move.l 1cbb2 <bigDataFile>,d1
    d8dc:	|  |  |   movea.l 72(sp),a0
    d8e0:	|  |  |   movea.l 38(a0),a0
    d8e4:	|  |  |   move.l 88(sp),d0
    d8e8:	|  |  |   lsl.l #3,d0
    d8ea:	|  |  |   lea (0,a0,d0.l),a2
    d8ee:	|  |  |   move.l d1,-(sp)
    d8f0:	|  |  |   jsr 6bc <get2bytes>
    d8f6:	|  |  |   addq.l #4,sp
    d8f8:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d8fc:	|  |  |   addq.l #1,88(sp)
    d900:	|  |  '-> movea.l 72(sp),a0
    d904:	|  |      move.l 16(a0),d0
    d908:	|  |      cmp.l 88(sp),d0
    d90c:	|  '----- bgt.s d8b2 <loadObjectType+0x212>
            }
            finishAccess();
    d90e:	|         jsr 76a8 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d914:	|         move.l 68(sp),-(sp)
    d918:	|         jsr 76b2 <getNumberedString>
    d91e:	|         addq.l #4,sp
    d920:	|         movea.l 72(sp),a0
    d924:	|         move.l d0,(a0)
            newType->objectNum = i;
    d926:	|         movea.l 72(sp),a0
    d92a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d930:	|         move.l 1cc78 <allObjectTypes>,d0
    d936:	|         movea.l 72(sp),a0
    d93a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d93e:	|         move.l 72(sp),1cc78 <allObjectTypes>
            return newType;
    d946:	|         move.l 72(sp),d0
    d94a:	|     ,-- bra.s d94e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d94c:	'-----|-> moveq #0,d0
}
    d94e:	      '-> movea.l (sp)+,a2
    d950:	          movea.l (sp)+,a6
    d952:	          lea 84(sp),sp
    d956:	          rts

0000d958 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d958:	             lea -16(sp),sp
    d95c:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d95e:	             move.l #117880,16(sp)

	while (* huntRegion) {
    d966:	   ,-------- bra.s d9da <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d968:	,--|-------> movea.l 16(sp),a0
    d96c:	|  |         move.l (a0),d0
    d96e:	|  |         cmp.l 24(sp),d0
    d972:	|  |  ,----- bne.s d9cc <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d974:	|  |  |      movea.l 24(sp),a0
    d978:	|  |  |      move.l 8(a0),d0
    d97c:	|  |  |      movea.l 16(sp),a0
    d980:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d982:	|  |  |      movea.l 24(sp),a0
    d986:	|  |  |      move.l 38(a0),12(sp)
    d98c:	|  |  |      move.l 1cbca <SysBase>,d0
    d992:	|  |  |      movea.l d0,a6
    d994:	|  |  |      movea.l 12(sp),a1
    d998:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d99c:	|  |  |      movea.l 24(sp),a0
    d9a0:	|  |  |      move.l (a0),8(sp)
    d9a4:	|  |  |      move.l 1cbca <SysBase>,d0
    d9aa:	|  |  |      movea.l d0,a6
    d9ac:	|  |  |      movea.l 8(sp),a1
    d9b0:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d9b4:	|  |  |      move.l 24(sp),4(sp)
    d9ba:	|  |  |      move.l 1cbca <SysBase>,d0
    d9c0:	|  |  |      movea.l d0,a6
    d9c2:	|  |  |      movea.l 4(sp),a1
    d9c6:	|  |  |      jsr -690(a6)
			return;
    d9ca:	|  |  |  ,-- bra.s d9f0 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d9cc:	|  |  '--|-> movea.l 16(sp),a0
    d9d0:	|  |     |   move.l (a0),d0
    d9d2:	|  |     |   move.l d0,d1
    d9d4:	|  |     |   addq.l #8,d1
    d9d6:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d9da:	|  '-----|-> movea.l 16(sp),a0
    d9de:	|        |   move.l (a0),d0
    d9e0:	'--------|-- bne.s d968 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d9e2:	         |   pea 197f6 <PutChar+0x19d8>
    d9e8:	         |   jsr 1737c <KPrintF>
    d9ee:	         |   addq.l #4,sp
}
    d9f0:	         '-> movea.l (sp)+,a6
    d9f2:	             lea 16(sp),sp
    d9f6:	             rts

0000d9f8 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d9f8:	movea.l 4(sp),a0
    d9fc:	move.l 4(a0),d0
    da00:	move.l 8(sp),-(sp)
    da04:	move.l d0,-(sp)
    da06:	jsr 8d0 <put2bytes>
    da0c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    da0e:	movea.l 4(sp),a0
    da12:	move.l (a0),d0
    da14:	move.l 8(sp),-(sp)
    da18:	move.l d0,-(sp)
    da1a:	jsr bd8 <writeString>
    da20:	addq.l #8,sp
    da22:	nop
    da24:	rts

0000da26 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    da26:	                         lea -112(sp),sp
    da2a:	                         move.l a6,-(sp)
    da2c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    da2e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    da32:	                         move.w 1cc7e <saveEncoding>,d0
    da38:	                  ,----- beq.s da42 <fileToStack+0x1c>
    da3a:	                  |      move.l #104476,d0
    da40:	                  |  ,-- bra.s da48 <fileToStack+0x22>
    da42:	                  '--|-> move.l #104502,d0
    da48:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    da4c:	                         move.l 124(sp),112(sp)
    da52:	                         move.l #1005,108(sp)
    da5a:	                         move.l 1cbd2 <DOSBase>,d0
    da60:	                         movea.l d0,a6
    da62:	                         move.l 112(sp),d1
    da66:	                         move.l 108(sp),d2
    da6a:	                         jsr -30(a6)
    da6e:	                         move.l d0,104(sp)
    da72:	                         move.l 104(sp),d0
    da76:	                         move.l d0,100(sp)
    if (!fp) {
    da7a:	                     ,-- bne.s da94 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    da7c:	                     |   move.l 124(sp),-(sp)
    da80:	                     |   pea 1984d <PutChar+0x1a2f>
    da86:	                     |   jsr 1737c <KPrintF>
    da8c:	                     |   addq.l #8,sp
        return FALSE;
    da8e:	                     |   clr.w d0
    da90:	,--------------------|-- bra.w dd8a <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    da94:	|                    '-> move.w 1cc7e <saveEncoding>,d0
    da9a:	|                        move.l d0,d0
    da9c:	|                        move.b d0,1cc7c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    daa2:	|                        move.w 1cc7e <saveEncoding>,d0
    daa8:	|                        lsr.w #8,d0
    daaa:	|                        move.l d0,d0
    daac:	|                        move.b d0,1cc7d <encode2>

    while (*checker) {
    dab2:	|                 ,----- bra.s db16 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dab4:	|              ,--|----> move.l 100(sp),30(sp)
    daba:	|              |  |      move.l 1cbd2 <DOSBase>,d0
    dac0:	|              |  |      movea.l d0,a6
    dac2:	|              |  |      move.l 30(sp),d1
    dac6:	|              |  |      jsr -306(a6)
    daca:	|              |  |      move.l d0,26(sp)
    dace:	|              |  |      move.l 26(sp),d1
    dad2:	|              |  |      movea.l 116(sp),a0
    dad6:	|              |  |      move.b (a0),d0
    dad8:	|              |  |      ext.w d0
    dada:	|              |  |      movea.w d0,a0
    dadc:	|              |  |      cmpa.l d1,a0
    dade:	|              |  |  ,-- beq.s db12 <fileToStack+0xec>
            Close(fp);
    dae0:	|              |  |  |   move.l 100(sp),22(sp)
    dae6:	|              |  |  |   move.l 1cbd2 <DOSBase>,d0
    daec:	|              |  |  |   movea.l d0,a6
    daee:	|              |  |  |   move.l 22(sp),d1
    daf2:	|              |  |  |   jsr -36(a6)
    daf6:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    dafa:	|              |  |  |   move.l 124(sp),-(sp)
    dafe:	|              |  |  |   pea 1985a <PutChar+0x1a3c>
    db04:	|              |  |  |   jsr 1737c <KPrintF>
    db0a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    db0c:	|              |  |  |   clr.w d0
    db0e:	+--------------|--|--|-- bra.w dd8a <fileToStack+0x364>
        }
        checker++;
    db12:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    db16:	|              |  '----> movea.l 116(sp),a0
    db1a:	|              |         move.b (a0),d0
    db1c:	|              '-------- bne.s dab4 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    db1e:	|                        move.w 1cc7e <saveEncoding>,d0
    db24:	|  ,-------------------- beq.s db98 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    db26:	|  |                     move.l 100(sp),-(sp)
    db2a:	|  |                     jsr dd94 <readStringEncoded>
    db30:	|  |                     addq.l #4,sp
    db32:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    db36:	|  |                     pea 1989b <PutChar+0x1a7d>
    db3c:	|  |                     move.l 100(sp),-(sp)
    db40:	|  |                     jsr 13d48 <strcmp>
    db46:	|  |                     addq.l #8,sp
    db48:	|  |                     tst.l d0
    db4a:	|  |                 ,-- beq.s db7e <fileToStack+0x158>
            Close(fp);
    db4c:	|  |                 |   move.l 100(sp),88(sp)
    db52:	|  |                 |   move.l 1cbd2 <DOSBase>,d0
    db58:	|  |                 |   movea.l d0,a6
    db5a:	|  |                 |   move.l 88(sp),d1
    db5e:	|  |                 |   jsr -36(a6)
    db62:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    db66:	|  |                 |   move.l 124(sp),-(sp)
    db6a:	|  |                 |   pea 198aa <PutChar+0x1a8c>
    db70:	|  |                 |   jsr 1737c <KPrintF>
    db76:	|  |                 |   addq.l #8,sp
            return FALSE;
    db78:	|  |                 |   clr.w d0
    db7a:	+--|-----------------|-- bra.w dd8a <fileToStack+0x364>
        }
        FreeVec(checker);
    db7e:	|  |                 '-> move.l 96(sp),92(sp)
    db84:	|  |                     move.l 1cbca <SysBase>,d0
    db8a:	|  |                     movea.l d0,a6
    db8c:	|  |                     movea.l 92(sp),a1
    db90:	|  |                     jsr -690(a6)
        checker = NULL;
    db94:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    db98:	|  >-------------------> move.w 1cc7e <saveEncoding>,d0
    db9e:	|  |     ,-------------- beq.w dcd2 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dba2:	|  |     |               move.l 100(sp),76(sp)
    dba8:	|  |     |               move.l 1cbd2 <DOSBase>,d0
    dbae:	|  |     |               movea.l d0,a6
    dbb0:	|  |     |               move.l 76(sp),d1
    dbb4:	|  |     |               jsr -306(a6)
    dbb8:	|  |     |               move.l d0,72(sp)
    dbbc:	|  |     |               move.l 72(sp),d0
    dbc0:	|  |     |               move.b 1cc7c <encode1>,d1
    dbc6:	|  |     |               ext.w d1
    dbc8:	|  |     |               ext.l d1
    dbca:	|  |     |               move.l d0,d2
    dbcc:	|  |     |               eor.l d1,d2
    dbce:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dbd2:	|  |     |               moveq #-1,d0
    dbd4:	|  |     |               cmp.l 68(sp),d0
    dbd8:	|  |  ,--|-------------- beq.w dd68 <fileToStack+0x342>

            char i = (char) tmp;
    dbdc:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dbe2:	|  |  |  |               move.b 67(sp),d0
    dbe6:	|  |  |  |               ext.w d0
    dbe8:	|  |  |  |               movea.w d0,a0
    dbea:	|  |  |  |               moveq #2,d2
    dbec:	|  |  |  |               cmp.l a0,d2
    dbee:	|  |  |  |     ,-------- beq.s dc6a <fileToStack+0x244>
    dbf0:	|  |  |  |     |         moveq #2,d0
    dbf2:	|  |  |  |     |         cmp.l a0,d0
    dbf4:	|  |  |  |  ,--|-------- blt.w dca0 <fileToStack+0x27a>
    dbf8:	|  |  |  |  |  |         cmpa.w #0,a0
    dbfc:	|  |  |  |  |  |     ,-- beq.s dc08 <fileToStack+0x1e2>
    dbfe:	|  |  |  |  |  |     |   moveq #1,d2
    dc00:	|  |  |  |  |  |     |   cmp.l a0,d2
    dc02:	|  |  |  |  |  |  ,--|-- beq.s dc44 <fileToStack+0x21e>
    dc04:	|  |  |  |  +--|--|--|-- bra.w dca0 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dc08:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    dc0c:	|  |  |  |  |  |  |      jsr dd94 <readStringEncoded>
    dc12:	|  |  |  |  |  |  |      addq.l #4,sp
    dc14:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dc18:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dc1c:	|  |  |  |  |  |  |      lea 14(sp),a0
    dc20:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dc22:	|  |  |  |  |  |  |      jsr 14abe <makeTextVar>
    dc28:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dc2a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dc30:	|  |  |  |  |  |  |      move.l 1cbca <SysBase>,d0
    dc36:	|  |  |  |  |  |  |      movea.l d0,a6
    dc38:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dc3c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dc40:	|  |  |  |  |  |  |  ,-- bra.w dcf8 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dc44:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    dc48:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dc4e:	|  |  |  |  |  |     |   addq.l #4,sp
    dc50:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dc52:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dc56:	|  |  |  |  |  |     |   lea 18(sp),a0
    dc5a:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dc5c:	|  |  |  |  |  |     |   jsr 1518e <setVariable>
    dc62:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dc66:	|  |  |  |  |  |     +-- bra.w dcf8 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dc6a:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    dc70:	|  |  |  |  |        |   move.l 1cbd2 <DOSBase>,d0
    dc76:	|  |  |  |  |        |   movea.l d0,a6
    dc78:	|  |  |  |  |        |   move.l 62(sp),d1
    dc7c:	|  |  |  |  |        |   jsr -306(a6)
    dc80:	|  |  |  |  |        |   move.l d0,58(sp)
    dc84:	|  |  |  |  |        |   move.l 58(sp),d0
    dc88:	|  |  |  |  |        |   move.l d0,-(sp)
    dc8a:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dc8e:	|  |  |  |  |        |   lea 18(sp),a0
    dc92:	|  |  |  |  |        |   move.l a0,-(sp)
    dc94:	|  |  |  |  |        |   jsr 1518e <setVariable>
    dc9a:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dc9e:	|  |  |  |  |        +-- bra.s dcf8 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dca0:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    dca4:	|  |  |  |           |   pea 1992c <PutChar+0x1b0e>
    dcaa:	|  |  |  |           |   jsr 1737c <KPrintF>
    dcb0:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dcb2:	|  |  |  |           |   move.l 100(sp),46(sp)
    dcb8:	|  |  |  |           |   move.l 1cbd2 <DOSBase>,d0
    dcbe:	|  |  |  |           |   movea.l d0,a6
    dcc0:	|  |  |  |           |   move.l 46(sp),d1
    dcc4:	|  |  |  |           |   jsr -36(a6)
    dcc8:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dccc:	|  |  |  |           |   clr.w d0
    dcce:	+--|--|--|-----------|-- bra.w dd8a <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dcd2:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    dcd6:	|  |  |              |   jsr de5a <readTextPlain>
    dcdc:	|  |  |              |   addq.l #4,sp
    dcde:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dce2:	|  |  |        ,-----|-- beq.w dd6c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dce6:	|  |  |        |     |   move.l 80(sp),-(sp)
    dcea:	|  |  |        |     |   lea 14(sp),a0
    dcee:	|  |  |        |     |   move.l a0,-(sp)
    dcf0:	|  |  |        |     |   jsr 14abe <makeTextVar>
    dcf6:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dcf8:	|  |  |        |     '-> movea.l 128(sp),a0
    dcfc:	|  |  |        |         move.l (a0),d0
    dcfe:	|  |  |        |  ,----- bne.s dd2e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dd00:	|  |  |        |  |      move.l 128(sp),d0
    dd04:	|  |  |        |  |      move.l d0,-(sp)
    dd06:	|  |  |        |  |      lea 14(sp),a0
    dd0a:	|  |  |        |  |      move.l a0,-(sp)
    dd0c:	|  |  |        |  |      jsr 1415e <addVarToStackQuick>
    dd12:	|  |  |        |  |      addq.l #8,sp
    dd14:	|  |  |        |  |      tst.w d0
    dd16:	|  |  |        |  |  ,-- bne.s dd1c <fileToStack+0x2f6>
    dd18:	|  |  |        |  |  |   clr.w d0
    dd1a:	+--|--|--------|--|--|-- bra.s dd8a <fileToStack+0x364>
            sH->last = sH->first;
    dd1c:	|  |  |        |  |  '-> movea.l 128(sp),a0
    dd20:	|  |  |        |  |      move.l (a0),d0
    dd22:	|  |  |        |  |      movea.l 128(sp),a0
    dd26:	|  |  |        |  |      move.l d0,4(a0)
    dd2a:	|  +--|--------|--|----- bra.w db98 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dd2e:	|  |  |        |  '----> movea.l 128(sp),a0
    dd32:	|  |  |        |         move.l 4(a0),d0
    dd36:	|  |  |        |         addq.l #8,d0
    dd38:	|  |  |        |         move.l d0,-(sp)
    dd3a:	|  |  |        |         lea 14(sp),a0
    dd3e:	|  |  |        |         move.l a0,-(sp)
    dd40:	|  |  |        |         jsr 1415e <addVarToStackQuick>
    dd46:	|  |  |        |         addq.l #8,sp
    dd48:	|  |  |        |         tst.w d0
    dd4a:	|  |  |        |     ,-- bne.s dd50 <fileToStack+0x32a>
    dd4c:	|  |  |        |     |   clr.w d0
    dd4e:	+--|--|--------|-----|-- bra.s dd8a <fileToStack+0x364>
            sH->last = sH->last->next;
    dd50:	|  |  |        |     '-> movea.l 128(sp),a0
    dd54:	|  |  |        |         movea.l 4(a0),a0
    dd58:	|  |  |        |         move.l 8(a0),d0
    dd5c:	|  |  |        |         movea.l 128(sp),a0
    dd60:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dd64:	|  '--|--------|-------- bra.w db98 <fileToStack+0x172>
            if (tmp == -1) break;
    dd68:	|     '--------|-------> nop
    dd6a:	|              |     ,-- bra.s dd6e <fileToStack+0x348>
            if (!line) break;
    dd6c:	|              '-----|-> nop
        }
    }
    Close(fp);
    dd6e:	|                    '-> move.l 100(sp),38(sp)
    dd74:	|                        move.l 1cbd2 <DOSBase>,d0
    dd7a:	|                        movea.l d0,a6
    dd7c:	|                        move.l 38(sp),d1
    dd80:	|                        jsr -36(a6)
    dd84:	|                        move.l d0,34(sp)
    return TRUE;
    dd88:	|                        moveq #1,d0
}
    dd8a:	'----------------------> move.l (sp)+,d2
    dd8c:	                         movea.l (sp)+,a6
    dd8e:	                         lea 112(sp),sp
    dd92:	                         rts

0000dd94 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dd94:	          lea -32(sp),sp
    dd98:	          move.l a6,-(sp)
    dd9a:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dd9c:	          move.l 44(sp),-(sp)
    dda0:	          jsr 6bc <get2bytes>
    dda6:	          addq.l #4,sp
    dda8:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    ddac:	          move.l 32(sp),d0
    ddb0:	          addq.l #1,d0
    ddb2:	          move.l d0,28(sp)
    ddb6:	          clr.l 24(sp)
    ddba:	          move.l 1cbca <SysBase>,d0
    ddc0:	          movea.l d0,a6
    ddc2:	          move.l 28(sp),d0
    ddc6:	          move.l 24(sp),d1
    ddca:	          jsr -684(a6)
    ddce:	          move.l d0,20(sp)
    ddd2:	          move.l 20(sp),d0
    ddd6:	          move.l d0,16(sp)
    if (!s) return NULL;
    ddda:	      ,-- bne.s dde0 <readStringEncoded+0x4c>
    dddc:	      |   moveq #0,d0
    ddde:	,-----|-- bra.s de50 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dde0:	|     '-> clr.l 36(sp)
    dde4:	|     ,-- bra.s de36 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dde6:	|  ,--|-> move.l 44(sp),12(sp)
    ddec:	|  |  |   move.l 1cbd2 <DOSBase>,d0
    ddf2:	|  |  |   movea.l d0,a6
    ddf4:	|  |  |   move.l 12(sp),d1
    ddf8:	|  |  |   jsr -306(a6)
    ddfc:	|  |  |   move.l d0,8(sp)
    de00:	|  |  |   move.l 8(sp),d0
    de04:	|  |  |   move.l d0,d1
    de06:	|  |  |   move.b 1cc7c <encode1>,d2
    de0c:	|  |  |   move.l 36(sp),d0
    de10:	|  |  |   movea.l 16(sp),a0
    de14:	|  |  |   adda.l d0,a0
    de16:	|  |  |   move.b d1,d0
    de18:	|  |  |   eor.b d2,d0
    de1a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    de1c:	|  |  |   move.b 1cc7c <encode1>,d0
    de22:	|  |  |   move.b d0,d1
    de24:	|  |  |   move.b 1cc7d <encode2>,d0
    de2a:	|  |  |   add.b d1,d0
    de2c:	|  |  |   move.b d0,1cc7c <encode1>
    for (a = 0; a < len; a++) {
    de32:	|  |  |   addq.l #1,36(sp)
    de36:	|  |  '-> move.l 36(sp),d0
    de3a:	|  |      cmp.l 32(sp),d0
    de3e:	|  '----- blt.s dde6 <readStringEncoded+0x52>
    }
    s[len] = 0;
    de40:	|         move.l 32(sp),d0
    de44:	|         movea.l 16(sp),a0
    de48:	|         adda.l d0,a0
    de4a:	|         clr.b (a0)
    return s;
    de4c:	|         move.l 16(sp),d0
}
    de50:	'-------> move.l (sp)+,d2
    de52:	          movea.l (sp)+,a6
    de54:	          lea 32(sp),sp
    de58:	          rts

0000de5a <readTextPlain>:

char *readTextPlain(BPTR fp) {
    de5a:	             lea -104(sp),sp
    de5e:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    de62:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    de66:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    de6c:	             move.l 124(sp),106(sp)
    de72:	             clr.l 102(sp)
    de76:	             clr.l 98(sp)
    de7a:	             move.l 1cbd2 <DOSBase>,d0
    de80:	             movea.l d0,a6
    de82:	             move.l 106(sp),d1
    de86:	             move.l 102(sp),d2
    de8a:	             move.l 98(sp),d3
    de8e:	             jsr -66(a6)
    de92:	             move.l d0,94(sp)
    de96:	             move.l 94(sp),d0
    de9a:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    de9e:	   ,-------- bra.s dee2 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dea0:	,--|-------> move.l 124(sp),22(sp)
    dea6:	|  |         move.l 1cbd2 <DOSBase>,d0
    deac:	|  |         movea.l d0,a6
    deae:	|  |         move.l 22(sp),d1
    deb2:	|  |         jsr -306(a6)
    deb6:	|  |         move.l d0,18(sp)
    deba:	|  |         move.l 18(sp),d0
    debe:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dec2:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dec8:	|  |         cmpi.b #10,17(sp)
    dece:	|  |  ,----- beq.s ded8 <readTextPlain+0x7e>
    ded0:	|  |  |      moveq #-1,d0
    ded2:	|  |  |      cmp.l 110(sp),d0
    ded6:	|  |  |  ,-- bne.s dede <readTextPlain+0x84>
            keepGoing = FALSE;
    ded8:	|  |  '--|-> clr.w 114(sp)
    dedc:	|  +-----|-- bra.s dee2 <readTextPlain+0x88>
        } else {
            stringSize++;
    dede:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    dee2:	|  '-------> tst.w 114(sp)
    dee6:	'----------- bne.s dea0 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dee8:	             tst.l 116(sp)
    deec:	         ,-- bne.s defc <readTextPlain+0xa2>
    deee:	         |   moveq #-1,d0
    def0:	         |   cmp.l 110(sp),d0
    def4:	         +-- bne.s defc <readTextPlain+0xa2>
        return NULL;
    def6:	         |   moveq #0,d0
    def8:	      ,--|-- bra.w dfe2 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    defc:	      |  '-> move.l 124(sp),86(sp)
    df02:	      |      move.l 90(sp),82(sp)
    df08:	      |      moveq #-1,d0
    df0a:	      |      move.l d0,78(sp)
    df0e:	      |      move.l 1cbd2 <DOSBase>,d0
    df14:	      |      movea.l d0,a6
    df16:	      |      move.l 86(sp),d1
    df1a:	      |      move.l 82(sp),d2
    df1e:	      |      move.l 78(sp),d3
    df22:	      |      jsr -66(a6)
    df26:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    df2a:	      |      move.l 116(sp),d0
    df2e:	      |      addq.l #1,d0
    df30:	      |      move.l d0,70(sp)
    df34:	      |      clr.l 66(sp)
    df38:	      |      move.l 1cbca <SysBase>,d0
    df3e:	      |      movea.l d0,a6
    df40:	      |      move.l 70(sp),d0
    df44:	      |      move.l 66(sp),d1
    df48:	      |      jsr -684(a6)
    df4c:	      |      move.l d0,62(sp)
    df50:	      |      move.l 62(sp),d0
    df54:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    df58:	      |  ,-- bne.s df60 <readTextPlain+0x106>
    df5a:	      |  |   moveq #0,d0
    df5c:	      +--|-- bra.w dfe2 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    df60:	      |  '-> move.l 124(sp),54(sp)
    df66:	      |      move.l 58(sp),50(sp)
    df6c:	      |      moveq #1,d0
    df6e:	      |      move.l d0,46(sp)
    df72:	      |      move.l 116(sp),42(sp)
    df78:	      |      move.l 1cbd2 <DOSBase>,d0
    df7e:	      |      movea.l d0,a6
    df80:	      |      move.l 54(sp),d1
    df84:	      |      move.l 50(sp),d2
    df88:	      |      move.l 46(sp),d3
    df8c:	      |      move.l 42(sp),d4
    df90:	      |      jsr -324(a6)
    df94:	      |      move.l d0,38(sp)
    df98:	      |      move.l 38(sp),d0
    df9c:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dfa0:	      |      move.l 34(sp),d0
    dfa4:	      |      cmp.l 116(sp),d0
    dfa8:	      |  ,-- beq.s dfb8 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dfaa:	      |  |   pea 19961 <PutChar+0x1b43>
    dfb0:	      |  |   jsr 1737c <KPrintF>
    dfb6:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dfb8:	      |  '-> move.l 124(sp),30(sp)
    dfbe:	      |      move.l 1cbd2 <DOSBase>,d0
    dfc4:	      |      movea.l d0,a6
    dfc6:	      |      move.l 30(sp),d1
    dfca:	      |      jsr -306(a6)
    dfce:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dfd2:	      |      move.l 116(sp),d0
    dfd6:	      |      movea.l 58(sp),a0
    dfda:	      |      adda.l d0,a0
    dfdc:	      |      clr.b (a0)
    }

    return reply;
    dfde:	      |      move.l 58(sp),d0
}
    dfe2:	      '----> movem.l (sp)+,d2-d4/a6
    dfe6:	             lea 104(sp),sp
    dfea:	             rts

0000dfec <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    dfec:	                      lea -144(sp),sp
    dff0:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    dff4:	                      move.l 160(sp),148(sp)
    dffa:	                      move.l #1006,144(sp)
    e002:	                      move.l 1cbd2 <DOSBase>,d0
    e008:	                      movea.l d0,a6
    e00a:	                      move.l 148(sp),d1
    e00e:	                      move.l 144(sp),d2
    e012:	                      jsr -30(a6)
    e016:	                      move.l d0,140(sp)
    e01a:	                      move.l 140(sp),d0
    e01e:	                      move.l d0,136(sp)

    if (!fp) {
    e022:	                  ,-- bne.s e03c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e024:	                  |   move.l 160(sp),-(sp)
    e028:	                  |   pea 19982 <PutChar+0x1b64>
    e02e:	                  |   jsr 1737c <KPrintF>
    e034:	                  |   addq.l #8,sp
        return FALSE;
    e036:	                  |   clr.w d0
    e038:	,-----------------|-- bra.w e2f8 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e03c:	|                 '-> movea.l 164(sp),a0
    e040:	|                     movea.l 4(a0),a0
    e044:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e048:	|                     move.w 1cc7e <saveEncoding>,d0
    e04e:	|                     move.l d0,d0
    e050:	|                     move.b d0,1cc7c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e056:	|                     move.w 1cc7e <saveEncoding>,d0
    e05c:	|                     lsr.w #8,d0
    e05e:	|                     move.l d0,d0
    e060:	|                     move.b d0,1cc7d <encode2>

    if (saveEncoding) {
    e066:	|                     move.w 1cc7e <saveEncoding>,d0
    e06c:	|                 ,-- beq.s e0be <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e06e:	|                 |   move.l 136(sp),116(sp)
    e074:	|                 |   move.l #104476,112(sp)
    e07c:	|                 |   moveq #99,d0
    e07e:	|                 |   not.b d0
    e080:	|                 |   add.l sp,d0
    e082:	|                 |   addi.l #-144,d0
    e088:	|                 |   move.l d0,108(sp)
    e08c:	|                 |   move.l 1cbd2 <DOSBase>,d0
    e092:	|                 |   movea.l d0,a6
    e094:	|                 |   move.l 116(sp),d1
    e098:	|                 |   move.l 112(sp),d2
    e09c:	|                 |   move.l 108(sp),d3
    e0a0:	|                 |   jsr -354(a6)
    e0a4:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e0a8:	|                 |   move.l 136(sp),-(sp)
    e0ac:	|                 |   pea 1989b <PutChar+0x1a7d>
    e0b2:	|                 |   jsr e302 <writeStringEncoded>
    e0b8:	|                 |   addq.l #8,sp
    e0ba:	|  ,--------------|-- bra.w e2d0 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e0be:	|  |              '-> move.l 136(sp),132(sp)
    e0c4:	|  |                  move.l #104502,128(sp)
    e0cc:	|  |                  moveq #99,d1
    e0ce:	|  |                  not.b d1
    e0d0:	|  |                  add.l sp,d1
    e0d2:	|  |                  addi.l #-144,d1
    e0d8:	|  |                  move.l d1,124(sp)
    e0dc:	|  |                  move.l 1cbd2 <DOSBase>,d0
    e0e2:	|  |                  movea.l d0,a6
    e0e4:	|  |                  move.l 132(sp),d1
    e0e8:	|  |                  move.l 128(sp),d2
    e0ec:	|  |                  move.l 124(sp),d3
    e0f0:	|  |                  jsr -354(a6)
    e0f4:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e0f8:	|  +----------------- bra.w e2d0 <stackToFile+0x2e4>
        if (saveEncoding) {
    e0fc:	|  |  ,-------------> move.w 1cc7e <saveEncoding>,d0
    e102:	|  |  |     ,-------- beq.w e254 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e106:	|  |  |     |         movea.l 152(sp),a0
    e10a:	|  |  |     |         move.l (a0),d0
    e10c:	|  |  |     |         moveq #1,d1
    e10e:	|  |  |     |         cmp.l d0,d1
    e110:	|  |  |     |     ,-- beq.s e160 <stackToFile+0x174>
    e112:	|  |  |     |     |   moveq #3,d1
    e114:	|  |  |     |     |   cmp.l d0,d1
    e116:	|  |  |     |  ,--|-- bne.w e222 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e11a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e120:	|  |  |     |  |  |   move.b 1cc7c <encode1>,d0
    e126:	|  |  |     |  |  |   ext.w d0
    e128:	|  |  |     |  |  |   movea.w d0,a0
    e12a:	|  |  |     |  |  |   move.l a0,72(sp)
    e12e:	|  |  |     |  |  |   move.l 1cbd2 <DOSBase>,d0
    e134:	|  |  |     |  |  |   movea.l d0,a6
    e136:	|  |  |     |  |  |   move.l 76(sp),d1
    e13a:	|  |  |     |  |  |   move.l 72(sp),d2
    e13e:	|  |  |     |  |  |   jsr -312(a6)
    e142:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e146:	|  |  |     |  |  |   movea.l 152(sp),a0
    e14a:	|  |  |     |  |  |   move.l 4(a0),d0
    e14e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e152:	|  |  |     |  |  |   move.l d0,-(sp)
    e154:	|  |  |     |  |  |   jsr e302 <writeStringEncoded>
    e15a:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e15c:	|  |  |  ,--|--|--|-- bra.w e2c6 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e160:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e164:	|  |  |  |  |  |      move.l 4(a0),d0
    e168:	|  |  |  |  |  |  ,-- bmi.s e1d8 <stackToFile+0x1ec>
    e16a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e16e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e172:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e178:	|  |  |  |  |  |  +-- bgt.s e1d8 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e17a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e180:	|  |  |  |  |  |  |   move.b 1cc7c <encode1>,d0
    e186:	|  |  |  |  |  |  |   eori.b #2,d0
    e18a:	|  |  |  |  |  |  |   ext.w d0
    e18c:	|  |  |  |  |  |  |   movea.w d0,a0
    e18e:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e192:	|  |  |  |  |  |  |   move.l 1cbd2 <DOSBase>,d0
    e198:	|  |  |  |  |  |  |   movea.l d0,a6
    e19a:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e19e:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e1a2:	|  |  |  |  |  |  |   jsr -312(a6)
    e1a6:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e1aa:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e1b0:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e1b4:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e1ba:	|  |  |  |  |  |  |   move.l 1cbd2 <DOSBase>,d0
    e1c0:	|  |  |  |  |  |  |   movea.l d0,a6
    e1c2:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e1c6:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e1ca:	|  |  |  |  |  |  |   jsr -312(a6)
    e1ce:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e1d2:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e1d4:	|  |  |  +--|--|--|-- bra.w e2c6 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e1d8:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e1de:	|  |  |  |  |  |      move.b 1cc7c <encode1>,d0
    e1e4:	|  |  |  |  |  |      eori.b #1,d0
    e1e8:	|  |  |  |  |  |      ext.w d0
    e1ea:	|  |  |  |  |  |      movea.w d0,a0
    e1ec:	|  |  |  |  |  |      move.l a0,36(sp)
    e1f0:	|  |  |  |  |  |      move.l 1cbd2 <DOSBase>,d0
    e1f6:	|  |  |  |  |  |      movea.l d0,a6
    e1f8:	|  |  |  |  |  |      move.l 40(sp),d1
    e1fc:	|  |  |  |  |  |      move.l 36(sp),d2
    e200:	|  |  |  |  |  |      jsr -312(a6)
    e204:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e208:	|  |  |  |  |  |      movea.l 152(sp),a0
    e20c:	|  |  |  |  |  |      move.l 4(a0),d0
    e210:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e214:	|  |  |  |  |  |      move.l d0,-(sp)
    e216:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e21c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e21e:	|  |  |  +--|--|----- bra.w e2c6 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e222:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e226:	|  |  |  |  |         pea 19994 <PutChar+0x1b76>
    e22c:	|  |  |  |  |         jsr 1737c <KPrintF>
    e232:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e234:	|  |  |  |  |         move.l 136(sp),28(sp)
    e23a:	|  |  |  |  |         move.l 1cbd2 <DOSBase>,d0
    e240:	|  |  |  |  |         movea.l d0,a6
    e242:	|  |  |  |  |         move.l 28(sp),d1
    e246:	|  |  |  |  |         jsr -36(a6)
    e24a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e24e:	|  |  |  |  |         clr.w d0
    e250:	+--|--|--|--|-------- bra.w e2f8 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e254:	|  |  |  |  '-------> move.l 152(sp),d0
    e258:	|  |  |  |            move.l d0,-(sp)
    e25a:	|  |  |  |            jsr 14e72 <getTextFromAnyVar>
    e260:	|  |  |  |            addq.l #4,sp
    e262:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e266:	|  |  |  |     ,----- beq.s e2da <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e268:	|  |  |  |     |      movea.l 100(sp),a0
    e26c:	|  |  |  |     |      move.b (a0),d0
    e26e:	|  |  |  |     |      ext.w d0
    e270:	|  |  |  |     |      movea.w d0,a0
    e272:	|  |  |  |     |      move.l a0,12(sp)
    e276:	|  |  |  |     |      move.l 136(sp),96(sp)
    e27c:	|  |  |  |     |      move.l #104944,92(sp)
    e284:	|  |  |  |     |      moveq #99,d0
    e286:	|  |  |  |     |      not.b d0
    e288:	|  |  |  |     |      add.l sp,d0
    e28a:	|  |  |  |     |      addi.l #-144,d0
    e290:	|  |  |  |     |      move.l d0,88(sp)
    e294:	|  |  |  |     |      move.l 1cbd2 <DOSBase>,d0
    e29a:	|  |  |  |     |      movea.l d0,a6
    e29c:	|  |  |  |     |      move.l 96(sp),d1
    e2a0:	|  |  |  |     |      move.l 92(sp),d2
    e2a4:	|  |  |  |     |      move.l 88(sp),d3
    e2a8:	|  |  |  |     |      jsr -354(a6)
    e2ac:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e2b0:	|  |  |  |     |      move.l 100(sp),80(sp)
    e2b6:	|  |  |  |     |      move.l 1cbca <SysBase>,d0
    e2bc:	|  |  |  |     |      movea.l d0,a6
    e2be:	|  |  |  |     |      movea.l 80(sp),a1
    e2c2:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e2c6:	|  |  |  '-----|----> movea.l 152(sp),a0
    e2ca:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e2d0:	|  '--|--------|----> tst.l 152(sp)
    e2d4:	|     '--------|----- bne.w e0fc <stackToFile+0x110>
    e2d8:	|              |  ,-- bra.s e2dc <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e2da:	|              '--|-> nop
    }
    Close(fp);
    e2dc:	|                 '-> move.l 136(sp),20(sp)
    e2e2:	|                     move.l 1cbd2 <DOSBase>,d0
    e2e8:	|                     movea.l d0,a6
    e2ea:	|                     move.l 20(sp),d1
    e2ee:	|                     jsr -36(a6)
    e2f2:	|                     move.l d0,16(sp)
    return TRUE;
    e2f6:	|                     moveq #1,d0
}
    e2f8:	'-------------------> movem.l (sp)+,d2-d3/a6
    e2fc:	                      lea 144(sp),sp
    e300:	                      rts

0000e302 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e302:	       lea -20(sp),sp
    e306:	       move.l a6,-(sp)
    e308:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e30a:	       move.l 32(sp),-(sp)
    e30e:	       jsr 13d88 <strlen>
    e314:	       addq.l #4,sp
    e316:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e31a:	       move.l 36(sp),-(sp)
    e31e:	       move.l 24(sp),-(sp)
    e322:	       jsr 8d0 <put2bytes>
    e328:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e32a:	       clr.l 24(sp)
    e32e:	   ,-- bra.s e384 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e330:	,--|-> move.l 36(sp),16(sp)
    e336:	|  |   move.l 24(sp),d0
    e33a:	|  |   movea.l 32(sp),a0
    e33e:	|  |   adda.l d0,a0
    e340:	|  |   move.b (a0),d1
    e342:	|  |   move.b 1cc7c <encode1>,d0
    e348:	|  |   eor.b d1,d0
    e34a:	|  |   ext.w d0
    e34c:	|  |   movea.w d0,a0
    e34e:	|  |   move.l a0,12(sp)
    e352:	|  |   move.l 1cbd2 <DOSBase>,d0
    e358:	|  |   movea.l d0,a6
    e35a:	|  |   move.l 16(sp),d1
    e35e:	|  |   move.l 12(sp),d2
    e362:	|  |   jsr -312(a6)
    e366:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e36a:	|  |   move.b 1cc7c <encode1>,d0
    e370:	|  |   move.b d0,d1
    e372:	|  |   move.b 1cc7d <encode2>,d0
    e378:	|  |   add.b d1,d0
    e37a:	|  |   move.b d0,1cc7c <encode1>
	for (a = 0; a < len; a ++) {
    e380:	|  |   addq.l #1,24(sp)
    e384:	|  '-> move.l 24(sp),d0
    e388:	|      cmp.l 20(sp),d0
    e38c:	'----- blt.s e330 <writeStringEncoded+0x2e>
	}
}
    e38e:	       nop
    e390:	       nop
    e392:	       move.l (sp)+,d2
    e394:	       movea.l (sp)+,a6
    e396:	       lea 20(sp),sp
    e39a:	       rts

0000e39c <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e39c:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e39e:	                   tst.l 8(sp)
    e3a2:	               ,-- bne.s e3a8 <failSecurityCheck+0xc>
    e3a4:	               |   moveq #1,d0
    e3a6:	,--------------|-- bra.s e426 <failSecurityCheck+0x8a>

	int a = 0;
    e3a8:	|              '-> clr.l (sp)

	while (fn[a]) {
    e3aa:	|     ,----------- bra.s e418 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e3ac:	|  ,--|----------> move.l (sp),d0
    e3ae:	|  |  |            movea.l 8(sp),a0
    e3b2:	|  |  |            adda.l d0,a0
    e3b4:	|  |  |            move.b (a0),d0
    e3b6:	|  |  |            ext.w d0
    e3b8:	|  |  |            movea.w d0,a0
    e3ba:	|  |  |            moveq #124,d0
    e3bc:	|  |  |            cmp.l a0,d0
    e3be:	|  |  |     ,----- beq.s e400 <failSecurityCheck+0x64>
    e3c0:	|  |  |     |      moveq #124,d1
    e3c2:	|  |  |     |      cmp.l a0,d1
    e3c4:	|  |  |  ,--|----- blt.s e416 <failSecurityCheck+0x7a>
    e3c6:	|  |  |  |  |      moveq #92,d0
    e3c8:	|  |  |  |  |      cmp.l a0,d0
    e3ca:	|  |  |  |  +----- beq.s e400 <failSecurityCheck+0x64>
    e3cc:	|  |  |  |  |      moveq #92,d1
    e3ce:	|  |  |  |  |      cmp.l a0,d1
    e3d0:	|  |  |  +--|----- blt.s e416 <failSecurityCheck+0x7a>
    e3d2:	|  |  |  |  |      moveq #60,d0
    e3d4:	|  |  |  |  |      cmp.l a0,d0
    e3d6:	|  |  |  |  |  ,-- blt.s e3f6 <failSecurityCheck+0x5a>
    e3d8:	|  |  |  |  |  |   moveq #34,d1
    e3da:	|  |  |  |  |  |   cmp.l a0,d1
    e3dc:	|  |  |  +--|--|-- bgt.s e416 <failSecurityCheck+0x7a>
    e3de:	|  |  |  |  |  |   moveq #-34,d1
    e3e0:	|  |  |  |  |  |   add.l a0,d1
    e3e2:	|  |  |  |  |  |   move.l #83894529,d0
    e3e8:	|  |  |  |  |  |   lsr.l d1,d0
    e3ea:	|  |  |  |  |  |   moveq #1,d1
    e3ec:	|  |  |  |  |  |   and.l d1,d0
    e3ee:	|  |  |  |  |  |   sne d0
    e3f0:	|  |  |  |  |  |   neg.b d0
    e3f2:	|  |  |  |  +--|-- bne.s e400 <failSecurityCheck+0x64>
    e3f4:	|  |  |  +--|--|-- bra.s e416 <failSecurityCheck+0x7a>
    e3f6:	|  |  |  |  |  '-> lea -62(a0),a0
    e3fa:	|  |  |  |  |      moveq #1,d0
    e3fc:	|  |  |  |  |      cmp.l a0,d0
    e3fe:	|  |  |  +--|----- bcs.s e416 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e400:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e404:	|  |  |  |         pea 199f4 <PutChar+0x1bd6>
    e40a:	|  |  |  |         jsr 1737c <KPrintF>
    e410:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e412:	|  |  |  |         moveq #1,d0
    e414:	+--|--|--|-------- bra.s e426 <failSecurityCheck+0x8a>
		}
		a++;
    e416:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e418:	|  |  '----------> move.l (sp),d0
    e41a:	|  |               movea.l 8(sp),a0
    e41e:	|  |               adda.l d0,a0
    e420:	|  |               move.b (a0),d0
    e422:	|  '-------------- bne.s e3ac <failSecurityCheck+0x10>
	}
	return FALSE;
    e424:	|                  clr.w d0
}
    e426:	'----------------> addq.l #4,sp
    e428:	                   rts

0000e42a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e42a:	             lea -24(sp),sp
    e42e:	             move.l a6,-(sp)
    e430:	             move.l 40(sp),d0
    e434:	             move.w d0,d0
    e436:	             move.w d0,6(sp)
	int fileNum = -1;
    e43a:	             moveq #-1,d0
    e43c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e440:	             jsr 6ac0 <killSpeechTimers>

	switch (numParams) {
    e446:	             moveq #2,d0
    e448:	             cmp.l 32(sp),d0
    e44c:	      ,----- beq.s e490 <sayCore+0x66>
    e44e:	      |      moveq #3,d0
    e450:	      |      cmp.l 32(sp),d0
    e454:	,-----|----- bne.w e572 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e458:	|     |      movea.l 36(sp),a0
    e45c:	|     |      move.l 24(a0),d0
    e460:	|     |      move.l d0,-(sp)
    e462:	|     |      pea 5 <_start+0x5>
    e466:	|     |      lea 20(sp),a0
    e46a:	|     |      move.l a0,-(sp)
    e46c:	|     |      jsr 1489c <getValueType>
    e472:	|     |      lea 12(sp),sp
    e476:	|     |      tst.w d0
    e478:	|     |  ,-- bne.s e480 <sayCore+0x56>
    e47a:	|     |  |   moveq #1,d0
    e47c:	|  ,--|--|-- bra.w e582 <sayCore+0x158>
			trimStack (&fun -> stack);
    e480:	|  |  |  '-> moveq #24,d0
    e482:	|  |  |      add.l 36(sp),d0
    e486:	|  |  |      move.l d0,-(sp)
    e488:	|  |  |      jsr 15220 <trimStack>
    e48e:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e490:	|  |  '----> movea.l 36(sp),a0
    e494:	|  |         move.l 24(a0),d0
    e498:	|  |         move.l d0,-(sp)
    e49a:	|  |         jsr 14e72 <getTextFromAnyVar>
    e4a0:	|  |         addq.l #4,sp
    e4a2:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e4a6:	|  |     ,-- bne.s e4ae <sayCore+0x84>
    e4a8:	|  |     |   moveq #1,d0
    e4aa:	|  +-----|-- bra.w e582 <sayCore+0x158>
			trimStack (&fun -> stack);
    e4ae:	|  |     '-> moveq #24,d0
    e4b0:	|  |         add.l 36(sp),d0
    e4b4:	|  |         move.l d0,-(sp)
    e4b6:	|  |         jsr 15220 <trimStack>
    e4bc:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e4be:	|  |         movea.l 36(sp),a0
    e4c2:	|  |         move.l 24(a0),d0
    e4c6:	|  |         move.l d0,-(sp)
    e4c8:	|  |         pea 7 <_start+0x7>
    e4cc:	|  |         lea 16(sp),a0
    e4d0:	|  |         move.l a0,-(sp)
    e4d2:	|  |         jsr 1489c <getValueType>
    e4d8:	|  |         lea 12(sp),sp
    e4dc:	|  |         tst.w d0
    e4de:	|  |     ,-- bne.s e4e6 <sayCore+0xbc>
    e4e0:	|  |     |   moveq #1,d0
    e4e2:	|  +-----|-- bra.w e582 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e4e6:	|  |     '-> movea.l 36(sp),a0
    e4ea:	|  |         move.l 24(a0),d0
    e4ee:	|  |         move.l d0,-(sp)
    e4f0:	|  |         pea 7 <_start+0x7>
    e4f4:	|  |         lea 16(sp),a0
    e4f8:	|  |         move.l a0,-(sp)
    e4fa:	|  |         jsr 1489c <getValueType>
    e500:	|  |         lea 12(sp),sp
    e504:	|  |         tst.w d0
    e506:	|  |     ,-- bne.s e50c <sayCore+0xe2>
    e508:	|  |     |   moveq #1,d0
    e50a:	|  +-----|-- bra.s e582 <sayCore+0x158>
			trimStack (&fun -> stack);
    e50c:	|  |     '-> moveq #24,d0
    e50e:	|  |         add.l 36(sp),d0
    e512:	|  |         move.l d0,-(sp)
    e514:	|  |         jsr 15220 <trimStack>
    e51a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e51c:	|  |         movea.w 6(sp),a0
    e520:	|  |         move.l 12(sp),d1
    e524:	|  |         move.l 8(sp),d0
    e528:	|  |         move.l a0,-(sp)
    e52a:	|  |         move.l d1,-(sp)
    e52c:	|  |         move.l d0,-(sp)
    e52e:	|  |         move.l 36(sp),-(sp)
    e532:	|  |         jsr 4228 <wrapSpeech>
    e538:	|  |         lea 16(sp),sp
    e53c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e540:	|  |         movea.l 36(sp),a0
    e544:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e54a:	|  |         movea.l 36(sp),a0
    e54e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e554:	|  |         move.l 24(sp),16(sp)
    e55a:	|  |         move.l 1cbca <SysBase>,d0
    e560:	|  |         movea.l d0,a6
    e562:	|  |         movea.l 16(sp),a1
    e566:	|  |         jsr -690(a6)
			newText = NULL;
    e56a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e56e:	|  |         moveq #0,d0
    e570:	|  +-------- bra.s e582 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e572:	'--|-------> pea 19a7a <PutChar+0x1c5c>
    e578:	   |         jsr 1737c <KPrintF>
    e57e:	   |         addq.l #4,sp
	return BR_ERROR;
    e580:	   |         moveq #1,d0
}
    e582:	   '-------> movea.l (sp)+,a6
    e584:	             lea 24(sp),sp
    e588:	             rts

0000e58a <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e58a:	pea 1 <_start+0x1>
    e58e:	move.l 12(sp),-(sp)
    e592:	move.l 12(sp),-(sp)
    e596:	jsr e42a <sayCore>
    e59c:	lea 12(sp),sp
}
    e5a0:	rts

0000e5a2 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e5a2:	clr.l -(sp)
    e5a4:	move.l 12(sp),-(sp)
    e5a8:	move.l 12(sp),-(sp)
    e5ac:	jsr e42a <sayCore>
    e5b2:	lea 12(sp),sp
}
    e5b6:	rts

0000e5b8 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e5b8:	jsr 15268 <freeze>
	freezeSubs (); 
    e5be:	jsr 60b0 <freezeSubs>
	fun -> freezerLevel = 0;
    e5c4:	movea.l 8(sp),a0
    e5c8:	clr.b 56(a0)
	return BR_CONTINUE;
    e5cc:	moveq #2,d0
}
    e5ce:	rts

0000e5d0 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e5d0:	jsr 1546c <unfreeze>
	unfreezeSubs (); 
    e5d6:	jsr 7676 <unfreezeSubs>
	return BR_CONTINUE;
    e5dc:	moveq #2,d0
}
    e5de:	rts

0000e5e0 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e5e0:	jsr 15448 <howFrozen>
    e5e6:	move.l d0,d1
    e5e8:	moveq #28,d0
    e5ea:	add.l 8(sp),d0
    e5ee:	move.l d1,-(sp)
    e5f0:	pea 1 <_start+0x1>
    e5f4:	move.l d0,-(sp)
    e5f6:	jsr 1518e <setVariable>
    e5fc:	lea 12(sp),sp
	return BR_CONTINUE; 
    e600:	moveq #2,d0
}
    e602:	rts

0000e604 <builtIn_setCursor>:

builtIn(setCursor)
{
    e604:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e606:	movea.l 12(sp),a0
    e60a:	move.l 24(a0),d0
    e60e:	move.l d0,-(sp)
    e610:	jsr 14d74 <getAnimationFromVar>
    e616:	addq.l #4,sp
    e618:	move.l d0,(sp)
	pickAnimCursor (aa);
    e61a:	move.l (sp),-(sp)
    e61c:	jsr d6c <pickAnimCursor>
    e622:	addq.l #4,sp
	trimStack (&fun -> stack);
    e624:	moveq #24,d0
    e626:	add.l 12(sp),d0
    e62a:	move.l d0,-(sp)
    e62c:	jsr 15220 <trimStack>
    e632:	addq.l #4,sp
	return BR_CONTINUE;
    e634:	moveq #2,d0
}
    e636:	addq.l #4,sp
    e638:	rts

0000e63a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e63a:	move.l 1cb86 <input+0xa>,d1
    e640:	move.l 1cc80 <cameraX>,d0
    e646:	add.l d0,d1
    e648:	moveq #28,d0
    e64a:	add.l 8(sp),d0
    e64e:	move.l d1,-(sp)
    e650:	pea 1 <_start+0x1>
    e654:	move.l d0,-(sp)
    e656:	jsr 1518e <setVariable>
    e65c:	lea 12(sp),sp
	return BR_CONTINUE;
    e660:	moveq #2,d0
}
    e662:	rts

0000e664 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e664:	move.l 1cb8a <input+0xe>,d1
    e66a:	move.l 1cc84 <cameraY>,d0
    e670:	add.l d0,d1
    e672:	moveq #28,d0
    e674:	add.l 8(sp),d0
    e678:	move.l d1,-(sp)
    e67a:	pea 1 <_start+0x1>
    e67e:	move.l d0,-(sp)
    e680:	jsr 1518e <setVariable>
    e686:	lea 12(sp),sp
	return BR_CONTINUE;
    e68a:	moveq #2,d0
}
    e68c:	rts

0000e68e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e68e:	move.l 1cb86 <input+0xa>,d0
    e694:	move.l d0,-(sp)
    e696:	jsr 177ae <__floatsisf>
    e69c:	addq.l #4,sp
    e69e:	move.l d0,d1
    e6a0:	move.l 1c55c <cameraZoom>,d0
    e6a6:	move.l d0,-(sp)
    e6a8:	move.l d1,-(sp)
    e6aa:	jsr 17860 <__mulsf3>
    e6b0:	addq.l #8,sp
    e6b2:	move.l d0,-(sp)
    e6b4:	jsr 17746 <__fixsfsi>
    e6ba:	addq.l #4,sp
    e6bc:	move.l d0,d1
    e6be:	moveq #28,d0
    e6c0:	add.l 8(sp),d0
    e6c4:	move.l d1,-(sp)
    e6c6:	pea 1 <_start+0x1>
    e6ca:	move.l d0,-(sp)
    e6cc:	jsr 1518e <setVariable>
    e6d2:	lea 12(sp),sp
	return BR_CONTINUE;
    e6d6:	moveq #2,d0
}
    e6d8:	rts

0000e6da <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e6da:	move.l 1cb8a <input+0xe>,d0
    e6e0:	move.l d0,-(sp)
    e6e2:	jsr 177ae <__floatsisf>
    e6e8:	addq.l #4,sp
    e6ea:	move.l d0,d1
    e6ec:	move.l 1c55c <cameraZoom>,d0
    e6f2:	move.l d0,-(sp)
    e6f4:	move.l d1,-(sp)
    e6f6:	jsr 17860 <__mulsf3>
    e6fc:	addq.l #8,sp
    e6fe:	move.l d0,-(sp)
    e700:	jsr 17746 <__fixsfsi>
    e706:	addq.l #4,sp
    e708:	move.l d0,d1
    e70a:	moveq #28,d0
    e70c:	add.l 8(sp),d0
    e710:	move.l d1,-(sp)
    e712:	pea 1 <_start+0x1>
    e716:	move.l d0,-(sp)
    e718:	jsr 1518e <setVariable>
    e71e:	lea 12(sp),sp
	return BR_CONTINUE;
    e722:	moveq #2,d0
}
    e724:	rts

0000e726 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e726:	jsr 86a8 <statusBarText>
    e72c:	move.l d0,d1
    e72e:	moveq #28,d0
    e730:	add.l 8(sp),d0
    e734:	move.l d1,-(sp)
    e736:	move.l d0,-(sp)
    e738:	jsr 14abe <makeTextVar>
    e73e:	addq.l #8,sp
	return BR_CONTINUE;
    e740:	moveq #2,d0
}
    e742:	rts

0000e744 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e744:	       lea -20(sp),sp
    e748:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e74a:	       movea.l 32(sp),a0
    e74e:	       move.l 24(a0),d0
    e752:	       move.l d0,-(sp)
    e754:	       jsr 14e72 <getTextFromAnyVar>
    e75a:	       addq.l #4,sp
    e75c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e760:	   ,-- bne.s e768 <builtIn_getMatchingFiles+0x24>
    e762:	   |   moveq #1,d0
    e764:	,--|-- bra.w e82a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e768:	|  '-> moveq #24,d0
    e76a:	|      add.l 32(sp),d0
    e76e:	|      move.l d0,-(sp)
    e770:	|      jsr 15220 <trimStack>
    e776:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e778:	|      moveq #28,d0
    e77a:	|      add.l 32(sp),d0
    e77e:	|      move.l d0,-(sp)
    e780:	|      jsr 14aea <unlinkVar>
    e786:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e788:	|      movea.l 32(sp),a0
    e78c:	|      moveq #6,d0
    e78e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e792:	|      moveq #12,d0
    e794:	|      move.l d0,16(sp)
    e798:	|      clr.l 12(sp)
    e79c:	|      move.l 1cbca <SysBase>,d0
    e7a2:	|      movea.l d0,a6
    e7a4:	|      move.l 16(sp),d0
    e7a8:	|      move.l 12(sp),d1
    e7ac:	|      jsr -684(a6)
    e7b0:	|      move.l d0,8(sp)
    e7b4:	|      move.l 8(sp),d0
    e7b8:	|      movea.l 32(sp),a0
    e7bc:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e7c0:	|      moveq #32,d0
    e7c2:	|      add.l 32(sp),d0
    e7c6:	|  ,-- bne.s e7cc <builtIn_getMatchingFiles+0x88>
    e7c8:	|  |   moveq #1,d0
    e7ca:	+--|-- bra.s e82a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e7cc:	|  '-> movea.l 32(sp),a0
    e7d0:	|      movea.l 32(a0),a0
    e7d4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e7d6:	|      movea.l 32(sp),a0
    e7da:	|      movea.l 32(a0),a0
    e7de:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e7e2:	|      movea.l 32(sp),a0
    e7e6:	|      movea.l 32(a0),a0
    e7ea:	|      moveq #1,d0
    e7ec:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e7f0:	|      movea.l 32(sp),a0
    e7f4:	|      move.l 32(a0),d0
    e7f8:	|      move.l 20(sp),-(sp)
    e7fc:	|      move.l d0,-(sp)
    e7fe:	|      jsr 14658 <getSavedGamesStack>
    e804:	|      addq.l #8,sp
    e806:	|      tst.w d0
    e808:	|  ,-- bne.s e80e <builtIn_getMatchingFiles+0xca>
    e80a:	|  |   moveq #1,d0
    e80c:	+--|-- bra.s e82a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e80e:	|  '-> move.l 20(sp),4(sp)
    e814:	|      move.l 1cbca <SysBase>,d0
    e81a:	|      movea.l d0,a6
    e81c:	|      movea.l 4(sp),a1
    e820:	|      jsr -690(a6)
	newText = NULL;
    e824:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e828:	|      moveq #2,d0
}
    e82a:	'----> movea.l (sp)+,a6
    e82c:	       lea 20(sp),sp
    e830:	       rts

0000e832 <builtIn_saveGame>:

builtIn(saveGame)
{
    e832:	       lea -12(sp),sp
    e836:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e838:	       movea.l 24(sp),a0
    e83c:	       move.l 24(a0),d0
    e840:	       move.l d0,-(sp)
    e842:	       jsr 14e72 <getTextFromAnyVar>
    e848:	       addq.l #4,sp
    e84a:	       move.l d0,1cb96 <loadNow>
    trimStack(&fun->stack);
    e850:	       moveq #24,d0
    e852:	       add.l 24(sp),d0
    e856:	       move.l d0,-(sp)
    e858:	       jsr 15220 <trimStack>
    e85e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e860:	       move.l 1cb96 <loadNow>,d0
    e866:	       move.l d0,-(sp)
    e868:	       jsr 2fe <encodeFilename>
    e86e:	       addq.l #4,sp
    e870:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e874:	       move.l 1cb96 <loadNow>,8(sp)
    e87c:	       move.l 1cbca <SysBase>,d0
    e882:	       movea.l d0,a6
    e884:	       movea.l 8(sp),a1
    e888:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e88c:	       move.l 12(sp),-(sp)
    e890:	       jsr e39c <failSecurityCheck>
    e896:	       addq.l #4,sp
    e898:	       tst.w d0
    e89a:	   ,-- beq.s e8a0 <builtIn_saveGame+0x6e>
    e89c:	   |   moveq #1,d0
    e89e:	,--|-- bra.s e8f0 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e8a0:	|  '-> move.l 12(sp),-(sp)
    e8a4:	|      pea 19aa8 <PutChar+0x1c8a>
    e8aa:	|      jsr 13dc8 <joinStrings>
    e8b0:	|      addq.l #8,sp
    e8b2:	|      move.l d0,1cb96 <loadNow>
    FreeVec(aaaaa);
    e8b8:	|      move.l 12(sp),4(sp)
    e8be:	|      move.l 1cbca <SysBase>,d0
    e8c4:	|      movea.l d0,a6
    e8c6:	|      movea.l 4(sp),a1
    e8ca:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e8ce:	|      moveq #28,d0
    e8d0:	|      add.l 24(sp),d0
    e8d4:	|      clr.l -(sp)
    e8d6:	|      pea 1 <_start+0x1>
    e8da:	|      move.l d0,-(sp)
    e8dc:	|      jsr 1518e <setVariable>
    e8e2:	|      lea 12(sp),sp
    saverFunc = fun;
    e8e6:	|      move.l 24(sp),1cc90 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e8ee:	|      moveq #0,d0
}
    e8f0:	'----> movea.l (sp)+,a6
    e8f2:	       lea 12(sp),sp
    e8f6:	       rts

0000e8f8 <builtIn_fileExists>:

builtIn(fileExists)
{
    e8f8:	       lea -36(sp),sp
    e8fc:	       move.l a6,-(sp)
    e8fe:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e900:	       movea.l 52(sp),a0
    e904:	       move.l 24(a0),d0
    e908:	       move.l d0,-(sp)
    e90a:	       jsr 14e72 <getTextFromAnyVar>
    e910:	       addq.l #4,sp
    e912:	       move.l d0,1cb96 <loadNow>
    trimStack(&fun->stack);
    e918:	       moveq #24,d0
    e91a:	       add.l 52(sp),d0
    e91e:	       move.l d0,-(sp)
    e920:	       jsr 15220 <trimStack>
    e926:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e928:	       move.l 1cb96 <loadNow>,d0
    e92e:	       move.l d0,-(sp)
    e930:	       jsr 2fe <encodeFilename>
    e936:	       addq.l #4,sp
    e938:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e93c:	       move.l 1cb96 <loadNow>,36(sp)
    e944:	       move.l 1cbca <SysBase>,d0
    e94a:	       movea.l d0,a6
    e94c:	       movea.l 36(sp),a1
    e950:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e954:	       move.l 40(sp),-(sp)
    e958:	       jsr e39c <failSecurityCheck>
    e95e:	       addq.l #4,sp
    e960:	       tst.w d0
    e962:	   ,-- beq.s e96a <builtIn_fileExists+0x72>
    e964:	   |   moveq #1,d0
    e966:	,--|-- bra.w ea0a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e96a:	|  '-> move.l 40(sp),32(sp)
    e970:	|      move.l #1005,28(sp)
    e978:	|      move.l 1cbd2 <DOSBase>,d0
    e97e:	|      movea.l d0,a6
    e980:	|      move.l 32(sp),d1
    e984:	|      move.l 28(sp),d2
    e988:	|      jsr -30(a6)
    e98c:	|      move.l d0,24(sp)
    e990:	|      move.l 24(sp),d0
    e994:	|      move.l d0,20(sp)
    if (!fp) {        
    e998:	|  ,-- bne.s e9a8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e99a:	|  |   pea 19aaa <PutChar+0x1c8c>
    e9a0:	|  |   jsr 1737c <KPrintF>
    e9a6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e9a8:	|  '-> tst.l 20(sp)
    e9ac:	|      sne d0
    e9ae:	|      neg.b d0
    e9b0:	|      moveq #0,d1
    e9b2:	|      move.b d0,d1
    e9b4:	|      moveq #28,d0
    e9b6:	|      add.l 52(sp),d0
    e9ba:	|      move.l d1,-(sp)
    e9bc:	|      pea 1 <_start+0x1>
    e9c0:	|      move.l d0,-(sp)
    e9c2:	|      jsr 1518e <setVariable>
    e9c8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e9cc:	|      tst.l 20(sp)
    e9d0:	|  ,-- beq.s e9ec <builtIn_fileExists+0xf4>
    e9d2:	|  |   move.l 20(sp),16(sp)
    e9d8:	|  |   move.l 1cbd2 <DOSBase>,d0
    e9de:	|  |   movea.l d0,a6
    e9e0:	|  |   move.l 16(sp),d1
    e9e4:	|  |   jsr -36(a6)
    e9e8:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e9ec:	|  '-> move.l 40(sp),8(sp)
    e9f2:	|      move.l 1cbca <SysBase>,d0
    e9f8:	|      movea.l d0,a6
    e9fa:	|      movea.l 8(sp),a1
    e9fe:	|      jsr -690(a6)
    loadNow = NULL;
    ea02:	|      clr.l 1cb96 <loadNow>
    return BR_CONTINUE;
    ea08:	|      moveq #2,d0
}
    ea0a:	'----> move.l (sp)+,d2
    ea0c:	       movea.l (sp)+,a6
    ea0e:	       lea 36(sp),sp
    ea12:	       rts

0000ea14 <builtIn_loadGame>:

builtIn(loadGame)
{
    ea14:	       lea -36(sp),sp
    ea18:	       move.l a6,-(sp)
    ea1a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ea1c:	       movea.l 52(sp),a0
    ea20:	       move.l 24(a0),d0
    ea24:	       move.l d0,-(sp)
    ea26:	       jsr 14e72 <getTextFromAnyVar>
    ea2c:	       addq.l #4,sp
    ea2e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ea32:	       moveq #24,d0
    ea34:	       add.l 52(sp),d0
    ea38:	       move.l d0,-(sp)
    ea3a:	       jsr 15220 <trimStack>
    ea40:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ea42:	       move.l 40(sp),-(sp)
    ea46:	       jsr 2fe <encodeFilename>
    ea4c:	       addq.l #4,sp
    ea4e:	       move.l d0,1cb96 <loadNow>
    FreeVec(aaaaa);
    ea54:	       move.l 40(sp),36(sp)
    ea5a:	       move.l 1cbca <SysBase>,d0
    ea60:	       movea.l d0,a6
    ea62:	       movea.l 36(sp),a1
    ea66:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ea6a:	       move.l 1cb96 <loadNow>,d0
    ea70:	       move.l d0,-(sp)
    ea72:	       jsr e39c <failSecurityCheck>
    ea78:	       addq.l #4,sp
    ea7a:	       tst.w d0
    ea7c:	   ,-- beq.s ea82 <builtIn_loadGame+0x6e>
    ea7e:	   |   moveq #1,d0
    ea80:	,--|-- bra.s eaf2 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ea82:	|  '-> move.l 1cb96 <loadNow>,32(sp)
    ea8a:	|      move.l #1005,28(sp)
    ea92:	|      move.l 1cbd2 <DOSBase>,d0
    ea98:	|      movea.l d0,a6
    ea9a:	|      move.l 32(sp),d1
    ea9e:	|      move.l 28(sp),d2
    eaa2:	|      jsr -30(a6)
    eaa6:	|      move.l d0,24(sp)
    eaaa:	|      move.l 24(sp),d0
    eaae:	|      move.l d0,20(sp)
    if (fp) {
    eab2:	|  ,-- beq.s ead2 <builtIn_loadGame+0xbe>
        Close(fp);
    eab4:	|  |   move.l 20(sp),12(sp)
    eaba:	|  |   move.l 1cbd2 <DOSBase>,d0
    eac0:	|  |   movea.l d0,a6
    eac2:	|  |   move.l 12(sp),d1
    eac6:	|  |   jsr -36(a6)
    eaca:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eace:	|  |   moveq #0,d0
    ead0:	+--|-- bra.s eaf2 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ead2:	|  '-> move.l 1cb96 <loadNow>,16(sp)
    eada:	|      move.l 1cbca <SysBase>,d0
    eae0:	|      movea.l d0,a6
    eae2:	|      movea.l 16(sp),a1
    eae6:	|      jsr -690(a6)
    loadNow = NULL;
    eaea:	|      clr.l 1cb96 <loadNow>
    return BR_CONTINUE;
    eaf0:	|      moveq #2,d0
}
    eaf2:	'----> move.l (sp)+,d2
    eaf4:	       movea.l (sp)+,a6
    eaf6:	       lea 36(sp),sp
    eafa:	       rts

0000eafc <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    eafc:	move.l 1cc66 <sceneHeight>,d0
    eb02:	move.l d0,d1
    eb04:	move.l 1cc62 <sceneWidth>,d0
    eb0a:	move.l d1,-(sp)
    eb0c:	move.l d0,-(sp)
    eb0e:	clr.l -(sp)
    eb10:	clr.l -(sp)
    eb12:	jsr d286 <blankScreen>
    eb18:	lea 16(sp),sp
	return BR_CONTINUE;
    eb1c:	moveq #2,d0
}
    eb1e:	rts

0000eb20 <builtIn_blankArea>:

builtIn(blankArea)
{
    eb20:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb24:	       movea.l 24(sp),a0
    eb28:	       move.l 24(a0),d0
    eb2c:	       move.l d0,-(sp)
    eb2e:	       pea 1 <_start+0x1>
    eb32:	       lea 8(sp),a0
    eb36:	       move.l a0,-(sp)
    eb38:	       jsr 1489c <getValueType>
    eb3e:	       lea 12(sp),sp
    eb42:	       tst.w d0
    eb44:	   ,-- bne.s eb4c <builtIn_blankArea+0x2c>
    eb46:	   |   moveq #1,d0
    eb48:	,--|-- bra.w ec22 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb4c:	|  '-> moveq #24,d0
    eb4e:	|      add.l 24(sp),d0
    eb52:	|      move.l d0,-(sp)
    eb54:	|      jsr 15220 <trimStack>
    eb5a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb5c:	|      movea.l 24(sp),a0
    eb60:	|      move.l 24(a0),d0
    eb64:	|      move.l d0,-(sp)
    eb66:	|      pea 1 <_start+0x1>
    eb6a:	|      lea 12(sp),a0
    eb6e:	|      move.l a0,-(sp)
    eb70:	|      jsr 1489c <getValueType>
    eb76:	|      lea 12(sp),sp
    eb7a:	|      tst.w d0
    eb7c:	|  ,-- bne.s eb84 <builtIn_blankArea+0x64>
    eb7e:	|  |   moveq #1,d0
    eb80:	+--|-- bra.w ec22 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb84:	|  '-> moveq #24,d0
    eb86:	|      add.l 24(sp),d0
    eb8a:	|      move.l d0,-(sp)
    eb8c:	|      jsr 15220 <trimStack>
    eb92:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb94:	|      movea.l 24(sp),a0
    eb98:	|      move.l 24(a0),d0
    eb9c:	|      move.l d0,-(sp)
    eb9e:	|      pea 1 <_start+0x1>
    eba2:	|      moveq #16,d0
    eba4:	|      add.l sp,d0
    eba6:	|      move.l d0,-(sp)
    eba8:	|      jsr 1489c <getValueType>
    ebae:	|      lea 12(sp),sp
    ebb2:	|      tst.w d0
    ebb4:	|  ,-- bne.s ebba <builtIn_blankArea+0x9a>
    ebb6:	|  |   moveq #1,d0
    ebb8:	+--|-- bra.s ec22 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebba:	|  '-> moveq #24,d0
    ebbc:	|      add.l 24(sp),d0
    ebc0:	|      move.l d0,-(sp)
    ebc2:	|      jsr 15220 <trimStack>
    ebc8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebca:	|      movea.l 24(sp),a0
    ebce:	|      move.l 24(a0),d0
    ebd2:	|      move.l d0,-(sp)
    ebd4:	|      pea 1 <_start+0x1>
    ebd8:	|      moveq #20,d0
    ebda:	|      add.l sp,d0
    ebdc:	|      move.l d0,-(sp)
    ebde:	|      jsr 1489c <getValueType>
    ebe4:	|      lea 12(sp),sp
    ebe8:	|      tst.w d0
    ebea:	|  ,-- bne.s ebf0 <builtIn_blankArea+0xd0>
    ebec:	|  |   moveq #1,d0
    ebee:	+--|-- bra.s ec22 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebf0:	|  '-> moveq #24,d0
    ebf2:	|      add.l 24(sp),d0
    ebf6:	|      move.l d0,-(sp)
    ebf8:	|      jsr 15220 <trimStack>
    ebfe:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ec00:	|      movea.l (sp),a1
    ec02:	|      movea.l 4(sp),a0
    ec06:	|      move.l 8(sp),d1
    ec0a:	|      move.l 12(sp),d0
    ec0e:	|      move.l a1,-(sp)
    ec10:	|      move.l a0,-(sp)
    ec12:	|      move.l d1,-(sp)
    ec14:	|      move.l d0,-(sp)
    ec16:	|      jsr d286 <blankScreen>
    ec1c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ec20:	|      moveq #2,d0
}
    ec22:	'----> lea 16(sp),sp
    ec26:	       rts

0000ec28 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ec28:	jsr d2a4 <darkScreen>
	return BR_CONTINUE;
    ec2e:	moveq #2,d0
}
    ec30:	rts

0000ec32 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ec32:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec36:	       movea.l 20(sp),a0
    ec3a:	       move.l 24(a0),d0
    ec3e:	       move.l d0,-(sp)
    ec40:	       pea 1 <_start+0x1>
    ec44:	       lea 8(sp),a0
    ec48:	       move.l a0,-(sp)
    ec4a:	       jsr 1489c <getValueType>
    ec50:	       lea 12(sp),sp
    ec54:	       tst.w d0
    ec56:	   ,-- bne.s ec5e <builtIn_addOverlay+0x2c>
    ec58:	   |   moveq #1,d0
    ec5a:	,--|-- bra.w ecf6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec5e:	|  '-> moveq #24,d0
    ec60:	|      add.l 20(sp),d0
    ec64:	|      move.l d0,-(sp)
    ec66:	|      jsr 15220 <trimStack>
    ec6c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec6e:	|      movea.l 20(sp),a0
    ec72:	|      move.l 24(a0),d0
    ec76:	|      move.l d0,-(sp)
    ec78:	|      pea 1 <_start+0x1>
    ec7c:	|      moveq #12,d0
    ec7e:	|      add.l sp,d0
    ec80:	|      move.l d0,-(sp)
    ec82:	|      jsr 1489c <getValueType>
    ec88:	|      lea 12(sp),sp
    ec8c:	|      tst.w d0
    ec8e:	|  ,-- bne.s ec94 <builtIn_addOverlay+0x62>
    ec90:	|  |   moveq #1,d0
    ec92:	+--|-- bra.s ecf6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec94:	|  '-> moveq #24,d0
    ec96:	|      add.l 20(sp),d0
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr 15220 <trimStack>
    eca2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eca4:	|      movea.l 20(sp),a0
    eca8:	|      move.l 24(a0),d0
    ecac:	|      move.l d0,-(sp)
    ecae:	|      pea 5 <_start+0x5>
    ecb2:	|      moveq #16,d0
    ecb4:	|      add.l sp,d0
    ecb6:	|      move.l d0,-(sp)
    ecb8:	|      jsr 1489c <getValueType>
    ecbe:	|      lea 12(sp),sp
    ecc2:	|      tst.w d0
    ecc4:	|  ,-- bne.s ecca <builtIn_addOverlay+0x98>
    ecc6:	|  |   moveq #1,d0
    ecc8:	+--|-- bra.s ecf6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ecca:	|  '-> moveq #24,d0
    eccc:	|      add.l 20(sp),d0
    ecd0:	|      move.l d0,-(sp)
    ecd2:	|      jsr 15220 <trimStack>
    ecd8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ecda:	|      movea.l (sp),a0
    ecdc:	|      move.l 4(sp),d1
    ece0:	|      move.l 8(sp),d0
    ece4:	|      move.l a0,-(sp)
    ece6:	|      move.l d1,-(sp)
    ece8:	|      move.l d0,-(sp)
    ecea:	|      jsr d3c2 <loadBackDrop>
    ecf0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ecf4:	|      moveq #2,d0
}
    ecf6:	'----> lea 12(sp),sp
    ecfa:	       rts

0000ecfc <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ecfc:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed00:	       movea.l 20(sp),a0
    ed04:	       move.l 24(a0),d0
    ed08:	       move.l d0,-(sp)
    ed0a:	       pea 1 <_start+0x1>
    ed0e:	       lea 8(sp),a0
    ed12:	       move.l a0,-(sp)
    ed14:	       jsr 1489c <getValueType>
    ed1a:	       lea 12(sp),sp
    ed1e:	       tst.w d0
    ed20:	   ,-- bne.s ed28 <builtIn_mixOverlay+0x2c>
    ed22:	   |   moveq #1,d0
    ed24:	,--|-- bra.w edc0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed28:	|  '-> moveq #24,d0
    ed2a:	|      add.l 20(sp),d0
    ed2e:	|      move.l d0,-(sp)
    ed30:	|      jsr 15220 <trimStack>
    ed36:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed38:	|      movea.l 20(sp),a0
    ed3c:	|      move.l 24(a0),d0
    ed40:	|      move.l d0,-(sp)
    ed42:	|      pea 1 <_start+0x1>
    ed46:	|      moveq #12,d0
    ed48:	|      add.l sp,d0
    ed4a:	|      move.l d0,-(sp)
    ed4c:	|      jsr 1489c <getValueType>
    ed52:	|      lea 12(sp),sp
    ed56:	|      tst.w d0
    ed58:	|  ,-- bne.s ed5e <builtIn_mixOverlay+0x62>
    ed5a:	|  |   moveq #1,d0
    ed5c:	+--|-- bra.s edc0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed5e:	|  '-> moveq #24,d0
    ed60:	|      add.l 20(sp),d0
    ed64:	|      move.l d0,-(sp)
    ed66:	|      jsr 15220 <trimStack>
    ed6c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed6e:	|      movea.l 20(sp),a0
    ed72:	|      move.l 24(a0),d0
    ed76:	|      move.l d0,-(sp)
    ed78:	|      pea 5 <_start+0x5>
    ed7c:	|      moveq #16,d0
    ed7e:	|      add.l sp,d0
    ed80:	|      move.l d0,-(sp)
    ed82:	|      jsr 1489c <getValueType>
    ed88:	|      lea 12(sp),sp
    ed8c:	|      tst.w d0
    ed8e:	|  ,-- bne.s ed94 <builtIn_mixOverlay+0x98>
    ed90:	|  |   moveq #1,d0
    ed92:	+--|-- bra.s edc0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed94:	|  '-> moveq #24,d0
    ed96:	|      add.l 20(sp),d0
    ed9a:	|      move.l d0,-(sp)
    ed9c:	|      jsr 15220 <trimStack>
    eda2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eda4:	|      movea.l (sp),a0
    eda6:	|      move.l 4(sp),d1
    edaa:	|      move.l 8(sp),d0
    edae:	|      move.l a0,-(sp)
    edb0:	|      move.l d1,-(sp)
    edb2:	|      move.l d0,-(sp)
    edb4:	|      jsr d438 <mixBackDrop>
    edba:	|      lea 12(sp),sp
	return BR_CONTINUE;
    edbe:	|      moveq #2,d0
}
    edc0:	'----> lea 12(sp),sp
    edc4:	       rts

0000edc6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    edc6:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edca:	       movea.l 20(sp),a0
    edce:	       move.l 24(a0),d0
    edd2:	       move.l d0,-(sp)
    edd4:	       pea 1 <_start+0x1>
    edd8:	       lea 8(sp),a0
    eddc:	       move.l a0,-(sp)
    edde:	       jsr 1489c <getValueType>
    ede4:	       lea 12(sp),sp
    ede8:	       tst.w d0
    edea:	   ,-- bne.s edf2 <builtIn_pasteImage+0x2c>
    edec:	   |   moveq #1,d0
    edee:	,--|-- bra.w ee82 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    edf2:	|  '-> moveq #24,d0
    edf4:	|      add.l 20(sp),d0
    edf8:	|      move.l d0,-(sp)
    edfa:	|      jsr 15220 <trimStack>
    ee00:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee02:	|      movea.l 20(sp),a0
    ee06:	|      move.l 24(a0),d0
    ee0a:	|      move.l d0,-(sp)
    ee0c:	|      pea 1 <_start+0x1>
    ee10:	|      moveq #12,d0
    ee12:	|      add.l sp,d0
    ee14:	|      move.l d0,-(sp)
    ee16:	|      jsr 1489c <getValueType>
    ee1c:	|      lea 12(sp),sp
    ee20:	|      tst.w d0
    ee22:	|  ,-- bne.s ee28 <builtIn_pasteImage+0x62>
    ee24:	|  |   moveq #1,d0
    ee26:	+--|-- bra.s ee82 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ee28:	|  '-> moveq #24,d0
    ee2a:	|      add.l 20(sp),d0
    ee2e:	|      move.l d0,-(sp)
    ee30:	|      jsr 15220 <trimStack>
    ee36:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ee38:	|      movea.l 20(sp),a0
    ee3c:	|      move.l 24(a0),d0
    ee40:	|      move.l d0,-(sp)
    ee42:	|      jsr 14d74 <getAnimationFromVar>
    ee48:	|      addq.l #4,sp
    ee4a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ee4e:	|      moveq #24,d0
    ee50:	|      add.l 20(sp),d0
    ee54:	|      move.l d0,-(sp)
    ee56:	|      jsr 15220 <trimStack>
    ee5c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ee5e:	|      tst.l 8(sp)
    ee62:	|  ,-- bne.s ee68 <builtIn_pasteImage+0xa2>
    ee64:	|  |   moveq #2,d0
    ee66:	+--|-- bra.s ee82 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ee68:	|  '-> move.l (sp),d1
    ee6a:	|      move.l 4(sp),d0
    ee6e:	|      move.l 8(sp),-(sp)
    ee72:	|      move.l d1,-(sp)
    ee74:	|      move.l d0,-(sp)
    ee76:	|      jsr d94 <pasteCursor>
    ee7c:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    ee80:	|      moveq #2,d0
}
    ee82:	'----> lea 12(sp),sp
    ee86:	       rts

0000ee88 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ee88:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee8a:	       movea.l 16(sp),a0
    ee8e:	       move.l 24(a0),d0
    ee92:	       move.l d0,-(sp)
    ee94:	       pea 1 <_start+0x1>
    ee98:	       move.l sp,d0
    ee9a:	       addq.l #8,d0
    ee9c:	       move.l d0,-(sp)
    ee9e:	       jsr 1489c <getValueType>
    eea4:	       lea 12(sp),sp
    eea8:	       tst.w d0
    eeaa:	   ,-- bne.s eeb2 <builtIn_setSceneDimensions+0x2a>
    eeac:	   |   moveq #1,d0
    eeae:	,--|-- bra.w ef3a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eeb2:	|  '-> moveq #24,d0
    eeb4:	|      add.l 16(sp),d0
    eeb8:	|      move.l d0,-(sp)
    eeba:	|      jsr 15220 <trimStack>
    eec0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eec2:	|      movea.l 16(sp),a0
    eec6:	|      move.l 24(a0),d0
    eeca:	|      move.l d0,-(sp)
    eecc:	|      pea 1 <_start+0x1>
    eed0:	|      moveq #12,d0
    eed2:	|      add.l sp,d0
    eed4:	|      move.l d0,-(sp)
    eed6:	|      jsr 1489c <getValueType>
    eedc:	|      lea 12(sp),sp
    eee0:	|      tst.w d0
    eee2:	|  ,-- bne.s eee8 <builtIn_setSceneDimensions+0x60>
    eee4:	|  |   moveq #1,d0
    eee6:	+--|-- bra.s ef3a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eee8:	|  '-> moveq #24,d0
    eeea:	|      add.l 16(sp),d0
    eeee:	|      move.l d0,-(sp)
    eef0:	|      jsr 15220 <trimStack>
    eef6:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    eef8:	|      move.l (sp),d1
    eefa:	|      move.l 4(sp),d0
    eefe:	|      move.l d1,-(sp)
    ef00:	|      move.l d0,-(sp)
    ef02:	|      jsr d48e <resizeBackdrop>
    ef08:	|      addq.l #8,sp
    ef0a:	|      tst.w d0
    ef0c:	|  ,-- beq.s ef2a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ef0e:	|  |   move.l (sp),d1
    ef10:	|  |   move.l 4(sp),d0
    ef14:	|  |   move.l d1,-(sp)
    ef16:	|  |   move.l d0,-(sp)
    ef18:	|  |   clr.l -(sp)
    ef1a:	|  |   clr.l -(sp)
    ef1c:	|  |   jsr d286 <blankScreen>
    ef22:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ef26:	|  |   moveq #2,d0
    ef28:	+--|-- bra.s ef3a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ef2a:	|  '-> pea 19ac8 <PutChar+0x1caa>
    ef30:	|      jsr 1737c <KPrintF>
    ef36:	|      addq.l #4,sp
	return BR_ERROR;
    ef38:	|      moveq #1,d0
}
    ef3a:	'----> addq.l #8,sp
    ef3c:	       rts

0000ef3e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ef3e:	          move.l d3,-(sp)
    ef40:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef42:	          movea.l 16(sp),a0
    ef46:	          move.l 24(a0),d0
    ef4a:	          move.l d0,-(sp)
    ef4c:	          pea 1 <_start+0x1>
    ef50:	          pea 1cc84 <cameraY>
    ef56:	          jsr 1489c <getValueType>
    ef5c:	          lea 12(sp),sp
    ef60:	          tst.w d0
    ef62:	      ,-- bne.s ef6a <builtIn_aimCamera+0x2c>
    ef64:	      |   moveq #1,d0
    ef66:	,-----|-- bra.w f1ec <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef6a:	|     '-> moveq #24,d0
    ef6c:	|         add.l 16(sp),d0
    ef70:	|         move.l d0,-(sp)
    ef72:	|         jsr 15220 <trimStack>
    ef78:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef7a:	|         movea.l 16(sp),a0
    ef7e:	|         move.l 24(a0),d0
    ef82:	|         move.l d0,-(sp)
    ef84:	|         pea 1 <_start+0x1>
    ef88:	|         pea 1cc80 <cameraX>
    ef8e:	|         jsr 1489c <getValueType>
    ef94:	|         lea 12(sp),sp
    ef98:	|         tst.w d0
    ef9a:	|     ,-- bne.s efa2 <builtIn_aimCamera+0x64>
    ef9c:	|     |   moveq #1,d0
    ef9e:	+-----|-- bra.w f1ec <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    efa2:	|     '-> moveq #24,d0
    efa4:	|         add.l 16(sp),d0
    efa8:	|         move.l d0,-(sp)
    efaa:	|         jsr 15220 <trimStack>
    efb0:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    efb2:	|         move.l 1cc80 <cameraX>,d0
    efb8:	|         move.l d0,-(sp)
    efba:	|         jsr 177ae <__floatsisf>
    efc0:	|         addq.l #4,sp
    efc2:	|         move.l d0,d2
    efc4:	|         move.l 1cb1e <winWidth>,d0
    efca:	|         lsr.l #1,d0
    efcc:	|         move.l d0,-(sp)
    efce:	|         jsr 177d6 <__floatunsisf>
    efd4:	|         addq.l #4,sp
    efd6:	|         move.l d0,d1
    efd8:	|         move.l 1c55c <cameraZoom>,d0
    efde:	|         move.l d0,-(sp)
    efe0:	|         move.l d1,-(sp)
    efe2:	|         jsr 17664 <__divsf3>
    efe8:	|         addq.l #8,sp
    efea:	|         move.l d0,-(sp)
    efec:	|         move.l d2,-(sp)
    efee:	|         jsr 17aa2 <__subsf3>
    eff4:	|         addq.l #8,sp
    eff6:	|         move.l d0,-(sp)
    eff8:	|         jsr 17746 <__fixsfsi>
    effe:	|         addq.l #4,sp
    f000:	|         move.l d0,1cc80 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f006:	|         move.l 1cc84 <cameraY>,d0
    f00c:	|         move.l d0,-(sp)
    f00e:	|         jsr 177ae <__floatsisf>
    f014:	|         addq.l #4,sp
    f016:	|         move.l d0,d2
    f018:	|         move.l 1cb22 <winHeight>,d0
    f01e:	|         lsr.l #1,d0
    f020:	|         move.l d0,-(sp)
    f022:	|         jsr 177d6 <__floatunsisf>
    f028:	|         addq.l #4,sp
    f02a:	|         move.l d0,d1
    f02c:	|         move.l 1c55c <cameraZoom>,d0
    f032:	|         move.l d0,-(sp)
    f034:	|         move.l d1,-(sp)
    f036:	|         jsr 17664 <__divsf3>
    f03c:	|         addq.l #8,sp
    f03e:	|         move.l d0,-(sp)
    f040:	|         move.l d2,-(sp)
    f042:	|         jsr 17aa2 <__subsf3>
    f048:	|         addq.l #8,sp
    f04a:	|         move.l d0,-(sp)
    f04c:	|         jsr 17746 <__fixsfsi>
    f052:	|         addq.l #4,sp
    f054:	|         move.l d0,1cc84 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f05a:	|         move.l 1cc80 <cameraX>,d0
    f060:	|     ,-- bpl.s f06c <builtIn_aimCamera+0x12e>
    f062:	|     |   clr.l 1cc80 <cameraX>
    f068:	|  ,--|-- bra.w f122 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f06c:	|  |  '-> move.l 1cc80 <cameraX>,d0
    f072:	|  |      move.l d0,-(sp)
    f074:	|  |      jsr 177ae <__floatsisf>
    f07a:	|  |      addq.l #4,sp
    f07c:	|  |      move.l d0,d2
    f07e:	|  |      move.l 1cc62 <sceneWidth>,d0
    f084:	|  |      move.l d0,-(sp)
    f086:	|  |      jsr 177d6 <__floatunsisf>
    f08c:	|  |      addq.l #4,sp
    f08e:	|  |      move.l d0,d3
    f090:	|  |      move.l 1cb1e <winWidth>,d0
    f096:	|  |      move.l d0,-(sp)
    f098:	|  |      jsr 177d6 <__floatunsisf>
    f09e:	|  |      addq.l #4,sp
    f0a0:	|  |      move.l d0,d1
    f0a2:	|  |      move.l 1c55c <cameraZoom>,d0
    f0a8:	|  |      move.l d0,-(sp)
    f0aa:	|  |      move.l d1,-(sp)
    f0ac:	|  |      jsr 17664 <__divsf3>
    f0b2:	|  |      addq.l #8,sp
    f0b4:	|  |      move.l d0,-(sp)
    f0b6:	|  |      move.l d3,-(sp)
    f0b8:	|  |      jsr 17aa2 <__subsf3>
    f0be:	|  |      addq.l #8,sp
    f0c0:	|  |      move.l d0,-(sp)
    f0c2:	|  |      move.l d2,-(sp)
    f0c4:	|  |      jsr 1791a <__gtsf2>
    f0ca:	|  |      addq.l #8,sp
    f0cc:	|  |      tst.l d0
    f0ce:	|  +----- ble.s f122 <builtIn_aimCamera+0x1e4>
    f0d0:	|  |      move.l 1cc62 <sceneWidth>,d0
    f0d6:	|  |      move.l d0,-(sp)
    f0d8:	|  |      jsr 177d6 <__floatunsisf>
    f0de:	|  |      addq.l #4,sp
    f0e0:	|  |      move.l d0,d2
    f0e2:	|  |      move.l 1cb1e <winWidth>,d0
    f0e8:	|  |      move.l d0,-(sp)
    f0ea:	|  |      jsr 177d6 <__floatunsisf>
    f0f0:	|  |      addq.l #4,sp
    f0f2:	|  |      move.l d0,d1
    f0f4:	|  |      move.l 1c55c <cameraZoom>,d0
    f0fa:	|  |      move.l d0,-(sp)
    f0fc:	|  |      move.l d1,-(sp)
    f0fe:	|  |      jsr 17664 <__divsf3>
    f104:	|  |      addq.l #8,sp
    f106:	|  |      move.l d0,-(sp)
    f108:	|  |      move.l d2,-(sp)
    f10a:	|  |      jsr 17aa2 <__subsf3>
    f110:	|  |      addq.l #8,sp
    f112:	|  |      move.l d0,-(sp)
    f114:	|  |      jsr 17746 <__fixsfsi>
    f11a:	|  |      addq.l #4,sp
    f11c:	|  |      move.l d0,1cc80 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f122:	|  '----> move.l 1cc84 <cameraY>,d0
    f128:	|     ,-- bpl.s f134 <builtIn_aimCamera+0x1f6>
    f12a:	|     |   clr.l 1cc84 <cameraY>
    f130:	|  ,--|-- bra.w f1ea <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f134:	|  |  '-> move.l 1cc84 <cameraY>,d0
    f13a:	|  |      move.l d0,-(sp)
    f13c:	|  |      jsr 177ae <__floatsisf>
    f142:	|  |      addq.l #4,sp
    f144:	|  |      move.l d0,d2
    f146:	|  |      move.l 1cc66 <sceneHeight>,d0
    f14c:	|  |      move.l d0,-(sp)
    f14e:	|  |      jsr 177d6 <__floatunsisf>
    f154:	|  |      addq.l #4,sp
    f156:	|  |      move.l d0,d3
    f158:	|  |      move.l 1cb22 <winHeight>,d0
    f15e:	|  |      move.l d0,-(sp)
    f160:	|  |      jsr 177d6 <__floatunsisf>
    f166:	|  |      addq.l #4,sp
    f168:	|  |      move.l d0,d1
    f16a:	|  |      move.l 1c55c <cameraZoom>,d0
    f170:	|  |      move.l d0,-(sp)
    f172:	|  |      move.l d1,-(sp)
    f174:	|  |      jsr 17664 <__divsf3>
    f17a:	|  |      addq.l #8,sp
    f17c:	|  |      move.l d0,-(sp)
    f17e:	|  |      move.l d3,-(sp)
    f180:	|  |      jsr 17aa2 <__subsf3>
    f186:	|  |      addq.l #8,sp
    f188:	|  |      move.l d0,-(sp)
    f18a:	|  |      move.l d2,-(sp)
    f18c:	|  |      jsr 1791a <__gtsf2>
    f192:	|  |      addq.l #8,sp
    f194:	|  |      tst.l d0
    f196:	|  +----- ble.s f1ea <builtIn_aimCamera+0x2ac>
    f198:	|  |      move.l 1cc66 <sceneHeight>,d0
    f19e:	|  |      move.l d0,-(sp)
    f1a0:	|  |      jsr 177d6 <__floatunsisf>
    f1a6:	|  |      addq.l #4,sp
    f1a8:	|  |      move.l d0,d2
    f1aa:	|  |      move.l 1cb22 <winHeight>,d0
    f1b0:	|  |      move.l d0,-(sp)
    f1b2:	|  |      jsr 177d6 <__floatunsisf>
    f1b8:	|  |      addq.l #4,sp
    f1ba:	|  |      move.l d0,d1
    f1bc:	|  |      move.l 1c55c <cameraZoom>,d0
    f1c2:	|  |      move.l d0,-(sp)
    f1c4:	|  |      move.l d1,-(sp)
    f1c6:	|  |      jsr 17664 <__divsf3>
    f1cc:	|  |      addq.l #8,sp
    f1ce:	|  |      move.l d0,-(sp)
    f1d0:	|  |      move.l d2,-(sp)
    f1d2:	|  |      jsr 17aa2 <__subsf3>
    f1d8:	|  |      addq.l #8,sp
    f1da:	|  |      move.l d0,-(sp)
    f1dc:	|  |      jsr 17746 <__fixsfsi>
    f1e2:	|  |      addq.l #4,sp
    f1e4:	|  |      move.l d0,1cc84 <cameraY>
	return BR_CONTINUE;
    f1ea:	|  '----> moveq #2,d0
}
    f1ec:	'-------> move.l (sp)+,d2
    f1ee:	          move.l (sp)+,d3
    f1f0:	          rts

0000f1f2 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f1f2:	       subq.l #4,sp
    f1f4:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1f6:	       movea.l 16(sp),a0
    f1fa:	       move.l 24(a0),d0
    f1fe:	       move.l d0,-(sp)
    f200:	       pea 1 <_start+0x1>
    f204:	       moveq #12,d0
    f206:	       add.l sp,d0
    f208:	       move.l d0,-(sp)
    f20a:	       jsr 1489c <getValueType>
    f210:	       lea 12(sp),sp
    f214:	       tst.w d0
    f216:	   ,-- bne.s f21e <builtIn_zoomCamera+0x2c>
    f218:	   |   moveq #1,d0
    f21a:	,--|-- bra.w f418 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f21e:	|  '-> moveq #24,d0
    f220:	|      add.l 16(sp),d0
    f224:	|      move.l d0,-(sp)
    f226:	|      jsr 15220 <trimStack>
    f22c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f22e:	|      move.l 1cb86 <input+0xa>,d0
    f234:	|      move.l d0,-(sp)
    f236:	|      jsr 177ae <__floatsisf>
    f23c:	|      addq.l #4,sp
    f23e:	|      move.l d0,d1
    f240:	|      move.l 1c55c <cameraZoom>,d0
    f246:	|      move.l d0,-(sp)
    f248:	|      move.l d1,-(sp)
    f24a:	|      jsr 17860 <__mulsf3>
    f250:	|      addq.l #8,sp
    f252:	|      move.l d0,-(sp)
    f254:	|      jsr 17746 <__fixsfsi>
    f25a:	|      addq.l #4,sp
    f25c:	|      move.l d0,1cb86 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f262:	|      move.l 1cb8a <input+0xe>,d0
    f268:	|      move.l d0,-(sp)
    f26a:	|      jsr 177ae <__floatsisf>
    f270:	|      addq.l #4,sp
    f272:	|      move.l d0,d1
    f274:	|      move.l 1c55c <cameraZoom>,d0
    f27a:	|      move.l d0,-(sp)
    f27c:	|      move.l d1,-(sp)
    f27e:	|      jsr 17860 <__mulsf3>
    f284:	|      addq.l #8,sp
    f286:	|      move.l d0,-(sp)
    f288:	|      jsr 17746 <__fixsfsi>
    f28e:	|      addq.l #4,sp
    f290:	|      move.l d0,1cb8a <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f296:	|      move.l 4(sp),d0
    f29a:	|      move.l d0,-(sp)
    f29c:	|      jsr 177ae <__floatsisf>
    f2a2:	|      addq.l #4,sp
    f2a4:	|      move.l #1008981770,-(sp)
    f2aa:	|      move.l d0,-(sp)
    f2ac:	|      jsr 17860 <__mulsf3>
    f2b2:	|      addq.l #8,sp
    f2b4:	|      move.l d0,1c55c <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f2ba:	|      move.l 1cb1e <winWidth>,d0
    f2c0:	|      move.l d0,-(sp)
    f2c2:	|      jsr 177d6 <__floatunsisf>
    f2c8:	|      addq.l #4,sp
    f2ca:	|      move.l d0,d1
    f2cc:	|      move.l 1c55c <cameraZoom>,d0
    f2d2:	|      move.l d0,-(sp)
    f2d4:	|      move.l d1,-(sp)
    f2d6:	|      jsr 17664 <__divsf3>
    f2dc:	|      addq.l #8,sp
    f2de:	|      move.l d0,d2
    f2e0:	|      move.l 1cc62 <sceneWidth>,d0
    f2e6:	|      move.l d0,-(sp)
    f2e8:	|      jsr 177d6 <__floatunsisf>
    f2ee:	|      addq.l #4,sp
    f2f0:	|      move.l d0,-(sp)
    f2f2:	|      move.l d2,-(sp)
    f2f4:	|      jsr 1791a <__gtsf2>
    f2fa:	|      addq.l #8,sp
    f2fc:	|      tst.l d0
    f2fe:	|  ,-- ble.s f334 <builtIn_zoomCamera+0x142>
    f300:	|  |   move.l 1cb1e <winWidth>,d0
    f306:	|  |   move.l d0,-(sp)
    f308:	|  |   jsr 177d6 <__floatunsisf>
    f30e:	|  |   addq.l #4,sp
    f310:	|  |   move.l d0,d2
    f312:	|  |   move.l 1cc62 <sceneWidth>,d0
    f318:	|  |   move.l d0,-(sp)
    f31a:	|  |   jsr 177d6 <__floatunsisf>
    f320:	|  |   addq.l #4,sp
    f322:	|  |   move.l d0,-(sp)
    f324:	|  |   move.l d2,-(sp)
    f326:	|  |   jsr 17664 <__divsf3>
    f32c:	|  |   addq.l #8,sp
    f32e:	|  |   move.l d0,1c55c <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f334:	|  '-> move.l 1cb22 <winHeight>,d0
    f33a:	|      move.l d0,-(sp)
    f33c:	|      jsr 177d6 <__floatunsisf>
    f342:	|      addq.l #4,sp
    f344:	|      move.l d0,d1
    f346:	|      move.l 1c55c <cameraZoom>,d0
    f34c:	|      move.l d0,-(sp)
    f34e:	|      move.l d1,-(sp)
    f350:	|      jsr 17664 <__divsf3>
    f356:	|      addq.l #8,sp
    f358:	|      move.l d0,d2
    f35a:	|      move.l 1cc66 <sceneHeight>,d0
    f360:	|      move.l d0,-(sp)
    f362:	|      jsr 177d6 <__floatunsisf>
    f368:	|      addq.l #4,sp
    f36a:	|      move.l d0,-(sp)
    f36c:	|      move.l d2,-(sp)
    f36e:	|      jsr 1791a <__gtsf2>
    f374:	|      addq.l #8,sp
    f376:	|      tst.l d0
    f378:	|  ,-- ble.s f3ae <builtIn_zoomCamera+0x1bc>
    f37a:	|  |   move.l 1cb22 <winHeight>,d0
    f380:	|  |   move.l d0,-(sp)
    f382:	|  |   jsr 177d6 <__floatunsisf>
    f388:	|  |   addq.l #4,sp
    f38a:	|  |   move.l d0,d2
    f38c:	|  |   move.l 1cc66 <sceneHeight>,d0
    f392:	|  |   move.l d0,-(sp)
    f394:	|  |   jsr 177d6 <__floatunsisf>
    f39a:	|  |   addq.l #4,sp
    f39c:	|  |   move.l d0,-(sp)
    f39e:	|  |   move.l d2,-(sp)
    f3a0:	|  |   jsr 17664 <__divsf3>
    f3a6:	|  |   addq.l #8,sp
    f3a8:	|  |   move.l d0,1c55c <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f3ae:	|  '-> move.l 1cb86 <input+0xa>,d0
    f3b4:	|      move.l d0,-(sp)
    f3b6:	|      jsr 177ae <__floatsisf>
    f3bc:	|      addq.l #4,sp
    f3be:	|      move.l d0,d1
    f3c0:	|      move.l 1c55c <cameraZoom>,d0
    f3c6:	|      move.l d0,-(sp)
    f3c8:	|      move.l d1,-(sp)
    f3ca:	|      jsr 17664 <__divsf3>
    f3d0:	|      addq.l #8,sp
    f3d2:	|      move.l d0,-(sp)
    f3d4:	|      jsr 17746 <__fixsfsi>
    f3da:	|      addq.l #4,sp
    f3dc:	|      move.l d0,1cb86 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f3e2:	|      move.l 1cb8a <input+0xe>,d0
    f3e8:	|      move.l d0,-(sp)
    f3ea:	|      jsr 177ae <__floatsisf>
    f3f0:	|      addq.l #4,sp
    f3f2:	|      move.l d0,d1
    f3f4:	|      move.l 1c55c <cameraZoom>,d0
    f3fa:	|      move.l d0,-(sp)
    f3fc:	|      move.l d1,-(sp)
    f3fe:	|      jsr 17664 <__divsf3>
    f404:	|      addq.l #8,sp
    f406:	|      move.l d0,-(sp)
    f408:	|      jsr 17746 <__fixsfsi>
    f40e:	|      addq.l #4,sp
    f410:	|      move.l d0,1cb8a <input+0xe>

	return BR_CONTINUE;
    f416:	|      moveq #2,d0
}
    f418:	'----> move.l (sp)+,d2
    f41a:	       addq.l #4,sp
    f41c:	       rts

0000f41e <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f41e:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f420:	             tst.l 8(sp)
    f424:	         ,-- bne.s f438 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f426:	         |   pea 19aed <PutChar+0x1ccf>
    f42c:	         |   jsr 1737c <KPrintF>
    f432:	         |   addq.l #4,sp
		return BR_ERROR;
    f434:	         |   moveq #1,d0
    f436:	,--------|-- bra.s f498 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f438:	|        '-> jsr 15f3c <rand>
    f43e:	|            move.l d0,d1
    f440:	|            move.l 8(sp),d0
    f444:	|            move.l d0,-(sp)
    f446:	|            move.l d1,-(sp)
    f448:	|            jsr 17de2 <__umodsi3>
    f44e:	|            addq.l #8,sp
    f450:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f452:	|     ,----- bra.s f486 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f454:	|  ,--|----> move.l (sp),d0
    f456:	|  |  |      cmp.l 8(sp),d0
    f45a:	|  |  |  ,-- bne.s f476 <builtIn_pickOne+0x58>
    f45c:	|  |  |  |   moveq #28,d0
    f45e:	|  |  |  |   add.l 12(sp),d0
    f462:	|  |  |  |   movea.l 12(sp),a0
    f466:	|  |  |  |   move.l 24(a0),d1
    f46a:	|  |  |  |   move.l d0,-(sp)
    f46c:	|  |  |  |   move.l d1,-(sp)
    f46e:	|  |  |  |   jsr 14d56 <copyVariable>
    f474:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f476:	|  |  |  '-> moveq #24,d0
    f478:	|  |  |      add.l 12(sp),d0
    f47c:	|  |  |      move.l d0,-(sp)
    f47e:	|  |  |      jsr 15220 <trimStack>
    f484:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f486:	|  |  '----> move.l 8(sp),d0
    f48a:	|  |         move.l d0,d1
    f48c:	|  |         subq.l #1,d1
    f48e:	|  |         move.l d1,8(sp)
    f492:	|  |         tst.l d0
    f494:	|  '-------- bne.s f454 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f496:	|            moveq #2,d0
}
    f498:	'----------> addq.l #4,sp
    f49a:	             rts

0000f49c <builtIn_substring>:

builtIn(substring)
{
    f49c:	       lea -40(sp),sp
    f4a0:	       move.l a6,-(sp)
    f4a2:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f4a4:	       movea.l 56(sp),a0
    f4a8:	       move.l 24(a0),d0
    f4ac:	       move.l d0,-(sp)
    f4ae:	       pea 1 <_start+0x1>
    f4b2:	       lea 16(sp),a0
    f4b6:	       move.l a0,-(sp)
    f4b8:	       jsr 1489c <getValueType>
    f4be:	       lea 12(sp),sp
    f4c2:	       tst.w d0
    f4c4:	   ,-- bne.s f4cc <builtIn_substring+0x30>
    f4c6:	   |   moveq #1,d0
    f4c8:	,--|-- bra.w f644 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f4cc:	|  '-> moveq #24,d0
    f4ce:	|      add.l 56(sp),d0
    f4d2:	|      move.l d0,-(sp)
    f4d4:	|      jsr 15220 <trimStack>
    f4da:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f4dc:	|      movea.l 56(sp),a0
    f4e0:	|      move.l 24(a0),d0
    f4e4:	|      move.l d0,-(sp)
    f4e6:	|      pea 1 <_start+0x1>
    f4ea:	|      lea 20(sp),a0
    f4ee:	|      move.l a0,-(sp)
    f4f0:	|      jsr 1489c <getValueType>
    f4f6:	|      lea 12(sp),sp
    f4fa:	|      tst.w d0
    f4fc:	|  ,-- bne.s f504 <builtIn_substring+0x68>
    f4fe:	|  |   moveq #1,d0
    f500:	+--|-- bra.w f644 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f504:	|  '-> moveq #24,d0
    f506:	|      add.l 56(sp),d0
    f50a:	|      move.l d0,-(sp)
    f50c:	|      jsr 15220 <trimStack>
    f512:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f514:	|      movea.l 56(sp),a0
    f518:	|      move.l 24(a0),d0
    f51c:	|      move.l d0,-(sp)
    f51e:	|      jsr 14e72 <getTextFromAnyVar>
    f524:	|      addq.l #4,sp
    f526:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f52a:	|      moveq #24,d0
    f52c:	|      add.l 56(sp),d0
    f530:	|      move.l d0,-(sp)
    f532:	|      jsr 15220 <trimStack>
    f538:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f53a:	|      move.l 44(sp),-(sp)
    f53e:	|      jsr 13d88 <strlen>
    f544:	|      addq.l #4,sp
    f546:	|      move.l d0,d1
    f548:	|      move.l 12(sp),d0
    f54c:	|      movea.l d0,a0
    f54e:	|      move.l 8(sp),d0
    f552:	|      add.l a0,d0
    f554:	|      cmp.l d1,d0
    f556:	|  ,-- bls.s f58c <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f558:	|  |   move.l 44(sp),-(sp)
    f55c:	|  |   jsr 13d88 <strlen>
    f562:	|  |   addq.l #4,sp
    f564:	|  |   move.l d0,d1
    f566:	|  |   move.l 12(sp),d0
    f56a:	|  |   sub.l d0,d1
    f56c:	|  |   move.l d1,d0
    f56e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f572:	|  |   move.l 44(sp),-(sp)
    f576:	|  |   jsr 13d88 <strlen>
    f57c:	|  |   addq.l #4,sp
    f57e:	|  |   move.l d0,d1
    f580:	|  |   move.l 12(sp),d0
    f584:	|  |   cmp.l d1,d0
    f586:	|  +-- bls.s f58c <builtIn_substring+0xf0>
            start = 0;
    f588:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f58c:	|  '-> move.l 8(sp),d0
    f590:	|  ,-- bpl.s f596 <builtIn_substring+0xfa>
        length = 0;
    f592:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f596:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f59c:	|      move.l 12(sp),d1
    f5a0:	|      move.l 8(sp),d0
    f5a4:	|      move.l d1,d2
    f5a6:	|      add.l d0,d2
    f5a8:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f5ac:	|      move.l 36(sp),d0
    f5b0:	|      sub.l 40(sp),d0
    f5b4:	|      addq.l #1,d0
    f5b6:	|      move.l d0,32(sp)
    f5ba:	|      clr.l 28(sp)
    f5be:	|      move.l 1cbca <SysBase>,d0
    f5c4:	|      movea.l d0,a6
    f5c6:	|      move.l 32(sp),d0
    f5ca:	|      move.l 28(sp),d1
    f5ce:	|      jsr -684(a6)
    f5d2:	|      move.l d0,24(sp)
    f5d6:	|      move.l 24(sp),d0
    f5da:	|      move.l d0,20(sp)
    if (!newString) {
    f5de:	|  ,-- bne.s f5e4 <builtIn_substring+0x148>
        return BR_ERROR;
    f5e0:	|  |   moveq #1,d0
    f5e2:	+--|-- bra.s f644 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f5e4:	|  '-> move.l 36(sp),d0
    f5e8:	|      sub.l 40(sp),d0
    f5ec:	|      move.l d0,d1
    f5ee:	|      move.l 40(sp),d0
    f5f2:	|      add.l 44(sp),d0
    f5f6:	|      move.l d1,-(sp)
    f5f8:	|      move.l d0,-(sp)
    f5fa:	|      move.l 28(sp),-(sp)
    f5fe:	|      jsr 17330 <memcpy>
    f604:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f608:	|      move.l 36(sp),d0
    f60c:	|      sub.l 40(sp),d0
    f610:	|      movea.l 20(sp),a0
    f614:	|      adda.l d0,a0
    f616:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f618:	|      moveq #28,d0
    f61a:	|      add.l 56(sp),d0
    f61e:	|      move.l 20(sp),-(sp)
    f622:	|      move.l d0,-(sp)
    f624:	|      jsr 14abe <makeTextVar>
    f62a:	|      addq.l #8,sp
    FreeVec(newString);
    f62c:	|      move.l 20(sp),16(sp)
    f632:	|      move.l 1cbca <SysBase>,d0
    f638:	|      movea.l d0,a6
    f63a:	|      movea.l 16(sp),a1
    f63e:	|      jsr -690(a6)
    return BR_CONTINUE;
    f642:	|      moveq #2,d0
}
    f644:	'----> move.l (sp)+,d2
    f646:	       movea.l (sp)+,a6
    f648:	       lea 40(sp),sp
    f64c:	       rts

0000f64e <builtIn_stringLength>:

builtIn(stringLength)
{
    f64e:	subq.l #8,sp
    f650:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f652:	movea.l 20(sp),a0
    f656:	move.l 24(a0),d0
    f65a:	move.l d0,-(sp)
    f65c:	jsr 14e72 <getTextFromAnyVar>
    f662:	addq.l #4,sp
    f664:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f668:	moveq #24,d0
    f66a:	add.l 20(sp),d0
    f66e:	move.l d0,-(sp)
    f670:	jsr 15220 <trimStack>
    f676:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f678:	move.l 8(sp),-(sp)
    f67c:	jsr 13d88 <strlen>
    f682:	addq.l #4,sp
    f684:	move.l d0,d1
    f686:	moveq #28,d0
    f688:	add.l 20(sp),d0
    f68c:	move.l d1,-(sp)
    f68e:	pea 1 <_start+0x1>
    f692:	move.l d0,-(sp)
    f694:	jsr 1518e <setVariable>
    f69a:	lea 12(sp),sp
	FreeVec(newText);
    f69e:	move.l 8(sp),4(sp)
    f6a4:	move.l 1cbca <SysBase>,d0
    f6aa:	movea.l d0,a6
    f6ac:	movea.l 4(sp),a1
    f6b0:	jsr -690(a6)
	return BR_CONTINUE;
    f6b4:	moveq #2,d0
}
    f6b6:	movea.l (sp)+,a6
    f6b8:	addq.l #8,sp
    f6ba:	rts

0000f6bc <builtIn_newStack>:

builtIn(newStack)
{
    f6bc:	             lea -12(sp),sp
    f6c0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f6c2:	             moveq #28,d0
    f6c4:	             add.l 24(sp),d0
    f6c8:	             move.l d0,-(sp)
    f6ca:	             jsr 14aea <unlinkVar>
    f6d0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f6d2:	             movea.l 24(sp),a0
    f6d6:	             moveq #6,d0
    f6d8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f6dc:	             moveq #12,d1
    f6de:	             move.l d1,12(sp)
    f6e2:	             clr.l 8(sp)
    f6e6:	             move.l 1cbca <SysBase>,d0
    f6ec:	             movea.l d0,a6
    f6ee:	             move.l 12(sp),d0
    f6f2:	             move.l 8(sp),d1
    f6f6:	             jsr -684(a6)
    f6fa:	             move.l d0,4(sp)
    f6fe:	             move.l 4(sp),d0
    f702:	             movea.l 24(sp),a0
    f706:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f70a:	             movea.l 24(sp),a0
    f70e:	             move.l 32(a0),d0
    f712:	         ,-- bne.s f71a <builtIn_newStack+0x5e>
    f714:	         |   moveq #1,d0
    f716:	,--------|-- bra.w f7ac <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f71a:	|        '-> movea.l 24(sp),a0
    f71e:	|            movea.l 32(a0),a0
    f722:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f724:	|            movea.l 24(sp),a0
    f728:	|            movea.l 32(a0),a0
    f72c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f730:	|            movea.l 24(sp),a0
    f734:	|            movea.l 32(a0),a0
    f738:	|            moveq #1,d0
    f73a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f73e:	|     ,----- bra.s f79a <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f740:	|  ,--|----> movea.l 24(sp),a0
    f744:	|  |  |      move.l 32(a0),d0
    f748:	|  |  |      move.l d0,d1
    f74a:	|  |  |      movea.l 24(sp),a0
    f74e:	|  |  |      move.l 24(a0),d0
    f752:	|  |  |      move.l d1,-(sp)
    f754:	|  |  |      move.l d0,-(sp)
    f756:	|  |  |      jsr 140d8 <addVarToStack>
    f75c:	|  |  |      addq.l #8,sp
    f75e:	|  |  |      tst.w d0
    f760:	|  |  |  ,-- bne.s f766 <builtIn_newStack+0xaa>
    f762:	|  |  |  |   moveq #1,d0
    f764:	+--|--|--|-- bra.s f7ac <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f766:	|  |  |  '-> movea.l 24(sp),a0
    f76a:	|  |  |      movea.l 32(a0),a0
    f76e:	|  |  |      move.l 4(a0),d0
    f772:	|  |  |  ,-- bne.s f78a <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f774:	|  |  |  |   movea.l 24(sp),a0
    f778:	|  |  |  |   movea.l 32(a0),a1
    f77c:	|  |  |  |   movea.l 24(sp),a0
    f780:	|  |  |  |   movea.l 32(a0),a0
    f784:	|  |  |  |   move.l (a1),d0
    f786:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f78a:	|  |  |  '-> moveq #24,d0
    f78c:	|  |  |      add.l 24(sp),d0
    f790:	|  |  |      move.l d0,-(sp)
    f792:	|  |  |      jsr 15220 <trimStack>
    f798:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f79a:	|  |  '----> move.l 20(sp),d0
    f79e:	|  |         move.l d0,d1
    f7a0:	|  |         subq.l #1,d1
    f7a2:	|  |         move.l d1,20(sp)
    f7a6:	|  |         tst.l d0
    f7a8:	|  '-------- bne.s f740 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f7aa:	|            moveq #2,d0
}
    f7ac:	'----------> movea.l (sp)+,a6
    f7ae:	             lea 12(sp),sp
    f7b2:	             rts

0000f7b4 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f7b4:	          movea.l 8(sp),a0
    f7b8:	          movea.l 24(a0),a0
    f7bc:	          move.l (a0),d0
    f7be:	          moveq #6,d1
    f7c0:	          cmp.l d0,d1
    f7c2:	      ,-- beq.s f7de <builtIn_stackSize+0x2a>
    f7c4:	      |   moveq #10,d1
    f7c6:	      |   cmp.l d0,d1
    f7c8:	   ,--|-- beq.s f822 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f7ca:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f7cc:	   |  |   pea 19b20 <PutChar+0x1d02>
    f7d2:	   |  |   jsr 1737c <KPrintF>
    f7d8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f7da:	   |  |   moveq #1,d0
    f7dc:	,--|--|-- bra.s f85c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f7de:	|  |  '-> movea.l 8(sp),a0
    f7e2:	|  |      movea.l 24(a0),a0
    f7e6:	|  |      move.l 4(a0),d0
    f7ea:	|  |      move.l d0,-(sp)
    f7ec:	|  |      jsr 151fc <stackSize>
    f7f2:	|  |      addq.l #4,sp
    f7f4:	|  |      move.l d0,d1
    f7f6:	|  |      moveq #28,d0
    f7f8:	|  |      add.l 8(sp),d0
    f7fc:	|  |      move.l d1,-(sp)
    f7fe:	|  |      pea 1 <_start+0x1>
    f802:	|  |      move.l d0,-(sp)
    f804:	|  |      jsr 1518e <setVariable>
    f80a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f80e:	|  |      moveq #24,d0
    f810:	|  |      add.l 8(sp),d0
    f814:	|  |      move.l d0,-(sp)
    f816:	|  |      jsr 15220 <trimStack>
    f81c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f81e:	|  |      moveq #2,d0
    f820:	+--|----- bra.s f85c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f822:	|  '----> movea.l 8(sp),a0
    f826:	|         movea.l 24(a0),a0
    f82a:	|         movea.l 4(a0),a0
    f82e:	|         move.l 4(a0),d1
    f832:	|         moveq #28,d0
    f834:	|         add.l 8(sp),d0
    f838:	|         move.l d1,-(sp)
    f83a:	|         pea 1 <_start+0x1>
    f83e:	|         move.l d0,-(sp)
    f840:	|         jsr 1518e <setVariable>
    f846:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f84a:	|         moveq #24,d0
    f84c:	|         add.l 8(sp),d0
    f850:	|         move.l d0,-(sp)
    f852:	|         jsr 15220 <trimStack>
    f858:	|         addq.l #4,sp
			return BR_CONTINUE;
    f85a:	|         moveq #2,d0
}
    f85c:	'-------> rts

0000f85e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f85e:	       movea.l 8(sp),a0
    f862:	       movea.l 24(a0),a0
    f866:	       move.l (a0),d0
    f868:	       moveq #6,d1
    f86a:	       cmp.l d0,d1
    f86c:	   ,-- beq.s f880 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f86e:	   |   pea 19b49 <PutChar+0x1d2b>
    f874:	   |   jsr 1737c <KPrintF>
    f87a:	   |   addq.l #4,sp
		return BR_ERROR;
    f87c:	   |   moveq #1,d0
    f87e:	,--|-- bra.s f8b4 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f880:	|  '-> moveq #28,d0
    f882:	|      add.l 8(sp),d0
    f886:	|      movea.l 8(sp),a0
    f88a:	|      move.l 24(a0),d1
    f88e:	|      move.l d0,-(sp)
    f890:	|      move.l d1,-(sp)
    f892:	|      jsr 143a2 <copyStack>
    f898:	|      addq.l #8,sp
    f89a:	|      tst.w d0
    f89c:	|  ,-- bne.s f8a2 <builtIn_copyStack+0x44>
    f89e:	|  |   moveq #1,d0
    f8a0:	+--|-- bra.s f8b4 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f8a2:	|  '-> moveq #24,d0
    f8a4:	|      add.l 8(sp),d0
    f8a8:	|      move.l d0,-(sp)
    f8aa:	|      jsr 15220 <trimStack>
    f8b0:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8b2:	|      moveq #2,d0
}
    f8b4:	'----> rts

0000f8b6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8b6:	       movea.l 8(sp),a0
    f8ba:	       movea.l 24(a0),a0
    f8be:	       movea.l 8(a0),a0
    f8c2:	       move.l (a0),d0
    f8c4:	       moveq #6,d1
    f8c6:	       cmp.l d0,d1
    f8c8:	   ,-- beq.s f8de <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f8ca:	   |   pea 19b62 <PutChar+0x1d44>
    f8d0:	   |   jsr 1737c <KPrintF>
    f8d6:	   |   addq.l #4,sp
		return BR_ERROR;
    f8d8:	   |   moveq #1,d0
    f8da:	,--|-- bra.w f96c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f8de:	|  '-> movea.l 8(sp),a0
    f8e2:	|      movea.l 24(a0),a0
    f8e6:	|      movea.l 8(a0),a0
    f8ea:	|      move.l 4(a0),d0
    f8ee:	|      move.l d0,d1
    f8f0:	|      movea.l 8(sp),a0
    f8f4:	|      move.l 24(a0),d0
    f8f8:	|      move.l d1,-(sp)
    f8fa:	|      move.l d0,-(sp)
    f8fc:	|      jsr 140d8 <addVarToStack>
    f902:	|      addq.l #8,sp
    f904:	|      tst.w d0
    f906:	|  ,-- bne.s f90c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f908:	|  |   moveq #1,d0
    f90a:	+--|-- bra.s f96c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f90c:	|  '-> movea.l 8(sp),a0
    f910:	|      movea.l 24(a0),a0
    f914:	|      movea.l 8(a0),a0
    f918:	|      movea.l 4(a0),a0
    f91c:	|      movea.l (a0),a0
    f91e:	|      move.l 8(a0),d0
    f922:	|  ,-- bne.s f94a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f924:	|  |   movea.l 8(sp),a0
    f928:	|  |   movea.l 24(a0),a0
    f92c:	|  |   movea.l 8(a0),a0
    f930:	|  |   movea.l 4(a0),a1
    f934:	|  |   movea.l 8(sp),a0
    f938:	|  |   movea.l 24(a0),a0
    f93c:	|  |   movea.l 8(a0),a0
    f940:	|  |   movea.l 4(a0),a0
    f944:	|  |   move.l (a1),d0
    f946:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f94a:	|  '-> moveq #24,d0
    f94c:	|      add.l 8(sp),d0
    f950:	|      move.l d0,-(sp)
    f952:	|      jsr 15220 <trimStack>
    f958:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f95a:	|      moveq #24,d0
    f95c:	|      add.l 8(sp),d0
    f960:	|      move.l d0,-(sp)
    f962:	|      jsr 15220 <trimStack>
    f968:	|      addq.l #4,sp
	return BR_CONTINUE;
    f96a:	|      moveq #2,d0
}
    f96c:	'----> rts

0000f96e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f96e:	             movea.l 8(sp),a0
    f972:	             movea.l 24(a0),a0
    f976:	             movea.l 8(a0),a0
    f97a:	             move.l (a0),d0
    f97c:	             moveq #6,d1
    f97e:	             cmp.l d0,d1
    f980:	         ,-- beq.s f996 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f982:	         |   pea 19b62 <PutChar+0x1d44>
    f988:	         |   jsr 1737c <KPrintF>
    f98e:	         |   addq.l #4,sp
		return BR_ERROR;
    f990:	         |   moveq #1,d0
    f992:	,--------|-- bra.w fa84 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f996:	|        '-> movea.l 8(sp),a0
    f99a:	|            movea.l 24(a0),a0
    f99e:	|            movea.l 8(a0),a0
    f9a2:	|            movea.l 4(a0),a0
    f9a6:	|            move.l (a0),d0
    f9a8:	|     ,----- bne.s fa02 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f9aa:	|     |      movea.l 8(sp),a0
    f9ae:	|     |      movea.l 24(a0),a0
    f9b2:	|     |      movea.l 8(a0),a0
    f9b6:	|     |      move.l 4(a0),d0
    f9ba:	|     |      move.l d0,d1
    f9bc:	|     |      movea.l 8(sp),a0
    f9c0:	|     |      move.l 24(a0),d0
    f9c4:	|     |      move.l d1,-(sp)
    f9c6:	|     |      move.l d0,-(sp)
    f9c8:	|     |      jsr 140d8 <addVarToStack>
    f9ce:	|     |      addq.l #8,sp
    f9d0:	|     |      tst.w d0
    f9d2:	|     |  ,-- bne.s f9da <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f9d4:	|     |  |   moveq #1,d0
    f9d6:	+-----|--|-- bra.w fa84 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f9da:	|     |  '-> movea.l 8(sp),a0
    f9de:	|     |      movea.l 24(a0),a0
    f9e2:	|     |      movea.l 8(a0),a0
    f9e6:	|     |      movea.l 4(a0),a1
    f9ea:	|     |      movea.l 8(sp),a0
    f9ee:	|     |      movea.l 24(a0),a0
    f9f2:	|     |      movea.l 8(a0),a0
    f9f6:	|     |      movea.l 4(a0),a0
    f9fa:	|     |      move.l (a1),d0
    f9fc:	|     |      move.l d0,4(a0)
    fa00:	|  ,--|----- bra.s fa62 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fa02:	|  |  '----> movea.l 8(sp),a0
    fa06:	|  |         movea.l 24(a0),a0
    fa0a:	|  |         movea.l 8(a0),a0
    fa0e:	|  |         movea.l 4(a0),a0
    fa12:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fa16:	|  |         move.l d0,d1
    fa18:	|  |         addq.l #8,d1
    fa1a:	|  |         movea.l 8(sp),a0
    fa1e:	|  |         move.l 24(a0),d0
    fa22:	|  |         move.l d1,-(sp)
    fa24:	|  |         move.l d0,-(sp)
    fa26:	|  |         jsr 140d8 <addVarToStack>
    fa2c:	|  |         addq.l #8,sp
    fa2e:	|  |         tst.w d0
    fa30:	|  |     ,-- bne.s fa36 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fa32:	|  |     |   moveq #1,d0
    fa34:	+--|-----|-- bra.s fa84 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fa36:	|  |     '-> movea.l 8(sp),a0
    fa3a:	|  |         movea.l 24(a0),a0
    fa3e:	|  |         movea.l 8(a0),a0
    fa42:	|  |         movea.l 4(a0),a0
    fa46:	|  |         movea.l 4(a0),a1
    fa4a:	|  |         movea.l 8(sp),a0
    fa4e:	|  |         movea.l 24(a0),a0
    fa52:	|  |         movea.l 8(a0),a0
    fa56:	|  |         movea.l 4(a0),a0
    fa5a:	|  |         move.l 8(a1),d0
    fa5e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fa62:	|  '-------> moveq #24,d0
    fa64:	|            add.l 8(sp),d0
    fa68:	|            move.l d0,-(sp)
    fa6a:	|            jsr 15220 <trimStack>
    fa70:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fa72:	|            moveq #24,d0
    fa74:	|            add.l 8(sp),d0
    fa78:	|            move.l d0,-(sp)
    fa7a:	|            jsr 15220 <trimStack>
    fa80:	|            addq.l #4,sp
	return BR_CONTINUE;
    fa82:	|            moveq #2,d0
}
    fa84:	'----------> rts

0000fa86 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fa86:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa88:	       movea.l 12(sp),a0
    fa8c:	       movea.l 24(a0),a0
    fa90:	       movea.l 8(a0),a0
    fa94:	       move.l (a0),d0
    fa96:	       moveq #6,d1
    fa98:	       cmp.l d0,d1
    fa9a:	   ,-- beq.s fab0 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa9c:	   |   pea 19b49 <PutChar+0x1d2b>
    faa2:	   |   jsr 1737c <KPrintF>
    faa8:	   |   addq.l #4,sp
		return BR_ERROR;
    faaa:	   |   moveq #1,d0
    faac:	,--|-- bra.w fb46 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fab0:	|  '-> movea.l 12(sp),a0
    fab4:	|      movea.l 24(a0),a0
    fab8:	|      movea.l 8(a0),a0
    fabc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fac0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fac2:	|      movea.l 12(sp),a0
    fac6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    faca:	|      clr.l -(sp)
    facc:	|      move.l d1,-(sp)
    face:	|      move.l d0,-(sp)
    fad0:	|      jsr 14478 <deleteVarFromStack>
    fad6:	|      lea 12(sp),sp
    fada:	|      move.l d0,d1
    fadc:	|      moveq #28,d0
    fade:	|      add.l 12(sp),d0
    fae2:	|      move.l d1,-(sp)
    fae4:	|      pea 1 <_start+0x1>
    fae8:	|      move.l d0,-(sp)
    faea:	|      jsr 1518e <setVariable>
    faf0:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    faf4:	|      movea.l 12(sp),a0
    faf8:	|      movea.l 24(a0),a0
    fafc:	|      movea.l 8(a0),a0
    fb00:	|      movea.l 4(a0),a0
    fb04:	|      move.l (a0),d0
    fb06:	|      movea.l 12(sp),a0
    fb0a:	|      movea.l 24(a0),a0
    fb0e:	|      movea.l 8(a0),a0
    fb12:	|      movea.l 4(a0),a2
    fb16:	|      move.l d0,-(sp)
    fb18:	|      jsr 151d8 <stackFindLast>
    fb1e:	|      addq.l #4,sp
    fb20:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb24:	|      moveq #24,d0
    fb26:	|      add.l 12(sp),d0
    fb2a:	|      move.l d0,-(sp)
    fb2c:	|      jsr 15220 <trimStack>
    fb32:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb34:	|      moveq #24,d0
    fb36:	|      add.l 12(sp),d0
    fb3a:	|      move.l d0,-(sp)
    fb3c:	|      jsr 15220 <trimStack>
    fb42:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb44:	|      moveq #2,d0
}
    fb46:	'----> movea.l (sp)+,a2
    fb48:	       rts

0000fb4a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fb4a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb4c:	       movea.l 12(sp),a0
    fb50:	       movea.l 24(a0),a0
    fb54:	       movea.l 8(a0),a0
    fb58:	       move.l (a0),d0
    fb5a:	       moveq #6,d1
    fb5c:	       cmp.l d0,d1
    fb5e:	   ,-- beq.s fb74 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb60:	   |   pea 19b49 <PutChar+0x1d2b>
    fb66:	   |   jsr 1737c <KPrintF>
    fb6c:	   |   addq.l #4,sp
		return BR_ERROR;
    fb6e:	   |   moveq #1,d0
    fb70:	,--|-- bra.w fc0c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fb74:	|  '-> movea.l 12(sp),a0
    fb78:	|      movea.l 24(a0),a0
    fb7c:	|      movea.l 8(a0),a0
    fb80:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb84:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb86:	|      movea.l 12(sp),a0
    fb8a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb8e:	|      pea 1 <_start+0x1>
    fb92:	|      move.l d1,-(sp)
    fb94:	|      move.l d0,-(sp)
    fb96:	|      jsr 14478 <deleteVarFromStack>
    fb9c:	|      lea 12(sp),sp
    fba0:	|      move.l d0,d1
    fba2:	|      moveq #28,d0
    fba4:	|      add.l 12(sp),d0
    fba8:	|      move.l d1,-(sp)
    fbaa:	|      pea 1 <_start+0x1>
    fbae:	|      move.l d0,-(sp)
    fbb0:	|      jsr 1518e <setVariable>
    fbb6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fbba:	|      movea.l 12(sp),a0
    fbbe:	|      movea.l 24(a0),a0
    fbc2:	|      movea.l 8(a0),a0
    fbc6:	|      movea.l 4(a0),a0
    fbca:	|      move.l (a0),d0
    fbcc:	|      movea.l 12(sp),a0
    fbd0:	|      movea.l 24(a0),a0
    fbd4:	|      movea.l 8(a0),a0
    fbd8:	|      movea.l 4(a0),a2
    fbdc:	|      move.l d0,-(sp)
    fbde:	|      jsr 151d8 <stackFindLast>
    fbe4:	|      addq.l #4,sp
    fbe6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fbea:	|      moveq #24,d0
    fbec:	|      add.l 12(sp),d0
    fbf0:	|      move.l d0,-(sp)
    fbf2:	|      jsr 15220 <trimStack>
    fbf8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbfa:	|      moveq #24,d0
    fbfc:	|      add.l 12(sp),d0
    fc00:	|      move.l d0,-(sp)
    fc02:	|      jsr 15220 <trimStack>
    fc08:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc0a:	|      moveq #2,d0
} 
    fc0c:	'----> movea.l (sp)+,a2
    fc0e:	       rts

0000fc10 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc10:	       movea.l 8(sp),a0
    fc14:	       movea.l 24(a0),a0
    fc18:	       move.l (a0),d0
    fc1a:	       moveq #6,d1
    fc1c:	       cmp.l d0,d1
    fc1e:	   ,-- beq.s fc32 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc20:	   |   pea 19b49 <PutChar+0x1d2b>
    fc26:	   |   jsr 1737c <KPrintF>
    fc2c:	   |   addq.l #4,sp
		return BR_ERROR;
    fc2e:	   |   moveq #1,d0
    fc30:	,--|-- bra.s fc9c <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc32:	|  '-> movea.l 8(sp),a0
    fc36:	|      movea.l 24(a0),a0
    fc3a:	|      movea.l 4(a0),a0
    fc3e:	|      move.l (a0),d0
    fc40:	|  ,-- bne.s fc54 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fc42:	|  |   pea 19b7a <PutChar+0x1d5c>
    fc48:	|  |   jsr 1737c <KPrintF>
    fc4e:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc50:	|  |   moveq #1,d0
    fc52:	+--|-- bra.s fc9c <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc54:	|  '-> moveq #28,d0
    fc56:	|      add.l 8(sp),d0
    fc5a:	|      movea.l 8(sp),a0
    fc5e:	|      movea.l 24(a0),a0
    fc62:	|      movea.l 4(a0),a0
    fc66:	|      move.l (a0),d1
    fc68:	|      move.l d0,-(sp)
    fc6a:	|      move.l d1,-(sp)
    fc6c:	|      jsr 14d56 <copyVariable>
    fc72:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fc74:	|      movea.l 8(sp),a0
    fc78:	|      movea.l 24(a0),a0
    fc7c:	|      move.l 4(a0),d0
    fc80:	|      move.l d0,-(sp)
    fc82:	|      jsr 15220 <trimStack>
    fc88:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc8a:	|      moveq #24,d0
    fc8c:	|      add.l 8(sp),d0
    fc90:	|      move.l d0,-(sp)
    fc92:	|      jsr 15220 <trimStack>
    fc98:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc9a:	|      moveq #2,d0
}
    fc9c:	'----> rts

0000fc9e <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc9e:	       movea.l 8(sp),a0
    fca2:	       movea.l 24(a0),a0
    fca6:	       move.l (a0),d0
    fca8:	       moveq #6,d1
    fcaa:	       cmp.l d0,d1
    fcac:	   ,-- beq.s fcc0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcae:	   |   pea 19b49 <PutChar+0x1d2b>
    fcb4:	   |   jsr 1737c <KPrintF>
    fcba:	   |   addq.l #4,sp
		return BR_ERROR;
    fcbc:	   |   moveq #1,d0
    fcbe:	,--|-- bra.s fd14 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcc0:	|  '-> movea.l 8(sp),a0
    fcc4:	|      movea.l 24(a0),a0
    fcc8:	|      movea.l 4(a0),a0
    fccc:	|      move.l (a0),d0
    fcce:	|  ,-- bne.s fce2 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fcd0:	|  |   pea 19b7a <PutChar+0x1d5c>
    fcd6:	|  |   jsr 1737c <KPrintF>
    fcdc:	|  |   addq.l #4,sp
		return BR_ERROR;
    fcde:	|  |   moveq #1,d0
    fce0:	+--|-- bra.s fd14 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fce2:	|  '-> moveq #28,d0
    fce4:	|      add.l 8(sp),d0
    fce8:	|      movea.l 8(sp),a0
    fcec:	|      movea.l 24(a0),a0
    fcf0:	|      movea.l 4(a0),a0
    fcf4:	|      move.l (a0),d1
    fcf6:	|      move.l d0,-(sp)
    fcf8:	|      move.l d1,-(sp)
    fcfa:	|      jsr 14d56 <copyVariable>
    fd00:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd02:	|      moveq #24,d0
    fd04:	|      add.l 8(sp),d0
    fd08:	|      move.l d0,-(sp)
    fd0a:	|      jsr 15220 <trimStack>
    fd10:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd12:	|      moveq #2,d0
}
    fd14:	'----> rts

0000fd16 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd16:	       movea.l 8(sp),a0
    fd1a:	       movea.l 24(a0),a0
    fd1e:	       move.l (a0),d0
    fd20:	       moveq #6,d1
    fd22:	       cmp.l d0,d1
    fd24:	   ,-- beq.s fd38 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd26:	   |   pea 19b49 <PutChar+0x1d2b>
    fd2c:	   |   jsr 1737c <KPrintF>
    fd32:	   |   addq.l #4,sp
		return BR_ERROR;
    fd34:	   |   moveq #1,d0
    fd36:	,--|-- bra.s fd8e <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd38:	|  '-> movea.l 8(sp),a0
    fd3c:	|      movea.l 24(a0),a0
    fd40:	|      movea.l 4(a0),a0
    fd44:	|      move.l (a0),d0
    fd46:	|  ,-- bne.s fd5a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fd48:	|  |   pea 19b7a <PutChar+0x1d5c>
    fd4e:	|  |   jsr 1737c <KPrintF>
    fd54:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd56:	|  |   moveq #1,d0
    fd58:	+--|-- bra.s fd8e <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fd5a:	|  '-> moveq #28,d0
    fd5c:	|      add.l 8(sp),d0
    fd60:	|      movea.l 8(sp),a0
    fd64:	|      movea.l 24(a0),a0
    fd68:	|      movea.l 4(a0),a0
    fd6c:	|      move.l 4(a0),d1
    fd70:	|      move.l d0,-(sp)
    fd72:	|      move.l d1,-(sp)
    fd74:	|      jsr 14d56 <copyVariable>
    fd7a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd7c:	|      moveq #24,d0
    fd7e:	|      add.l 8(sp),d0
    fd82:	|      move.l d0,-(sp)
    fd84:	|      jsr 15220 <trimStack>
    fd8a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd8c:	|      moveq #2,d0
}
    fd8e:	'----> rts

0000fd90 <builtIn_random>:

builtIn(random)
{
    fd90:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fd92:	       movea.l 12(sp),a0
    fd96:	       move.l 24(a0),d0
    fd9a:	       move.l d0,-(sp)
    fd9c:	       pea 1 <_start+0x1>
    fda0:	       move.l sp,d0
    fda2:	       addq.l #8,d0
    fda4:	       move.l d0,-(sp)
    fda6:	       jsr 1489c <getValueType>
    fdac:	       lea 12(sp),sp
    fdb0:	       tst.w d0
    fdb2:	   ,-- bne.s fdb8 <builtIn_random+0x28>
		return BR_ERROR;
    fdb4:	   |   moveq #1,d0
    fdb6:	,--|-- bra.s fe02 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fdb8:	|  '-> moveq #24,d0
    fdba:	|      add.l 12(sp),d0
    fdbe:	|      move.l d0,-(sp)
    fdc0:	|      jsr 15220 <trimStack>
    fdc6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fdc8:	|      move.l (sp),d0
    fdca:	|  ,-- bgt.s fdd0 <builtIn_random+0x40>
    fdcc:	|  |   moveq #1,d0
    fdce:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fdd0:	|  '-> jsr 15f3c <rand>
    fdd6:	|      move.l d0,d1
    fdd8:	|      move.l (sp),d0
    fdda:	|      move.l d0,-(sp)
    fddc:	|      move.l d1,-(sp)
    fdde:	|      jsr 17de2 <__umodsi3>
    fde4:	|      addq.l #8,sp
    fde6:	|      move.l d0,d1
    fde8:	|      moveq #28,d0
    fdea:	|      add.l 12(sp),d0
    fdee:	|      move.l d1,-(sp)
    fdf0:	|      pea 1 <_start+0x1>
    fdf4:	|      move.l d0,-(sp)
    fdf6:	|      jsr 1518e <setVariable>
    fdfc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fe00:	|      moveq #2,d0
}
    fe02:	'----> addq.l #4,sp
    fe04:	       rts

0000fe06 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fe06:	nop
    fe08:	rts

0000fe0a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fe0a:	moveq #2,d0
}
    fe0c:	rts

0000fe0e <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fe0e:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fe10:	       movea.l 12(sp),a0
    fe14:	       move.l 24(a0),d0
    fe18:	       move.l d0,-(sp)
    fe1a:	       pea 1 <_start+0x1>
    fe1e:	       move.l sp,d0
    fe20:	       addq.l #8,d0
    fe22:	       move.l d0,-(sp)
    fe24:	       jsr 1489c <getValueType>
    fe2a:	       lea 12(sp),sp
    fe2e:	       tst.w d0
    fe30:	   ,-- bne.s fe44 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fe32:	   |   pea 19b8d <PutChar+0x1d6f>
    fe38:	   |   jsr 1737c <KPrintF>
    fe3e:	   |   addq.l #4,sp
		return BR_ERROR;
    fe40:	   |   moveq #1,d0
    fe42:	,--|-- bra.s fe84 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fe44:	|  '-> moveq #24,d0
    fe46:	|      add.l 12(sp),d0
    fe4a:	|      move.l d0,-(sp)
    fe4c:	|      jsr 15220 <trimStack>
    fe52:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fe54:	|      move.l (sp),d0
    fe56:	|      move.l d0,d0
    fe58:	|      move.w d0,1cad8 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fe5e:	|      move.w 1cad8 <textPaletteIndex>,d0
    fe64:	|      cmpi.w #31,d0
    fe68:	|  ,-- bls.s fe82 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fe6a:	|  |   pea 19bb4 <PutChar+0x1d96>
    fe70:	|  |   jsr 1737c <KPrintF>
    fe76:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fe78:	|  |   clr.w 1cad8 <textPaletteIndex>
		return BR_ERROR;
    fe7e:	|  |   moveq #1,d0
    fe80:	+--|-- bra.s fe84 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fe82:	|  '-> moveq #2,d0
}
    fe84:	'----> addq.l #4,sp
    fe86:	       rts

0000fe88 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe88:	moveq #2,d0
}
    fe8a:	rts

0000fe8c <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe8c:	moveq #2,d0
}
    fe8e:	rts

0000fe90 <builtIn_setFont>:


builtIn(setFont)
{
    fe90:	       lea -16(sp),sp
    fe94:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe96:	       movea.l 28(sp),a0
    fe9a:	       move.l 24(a0),d0
    fe9e:	       move.l d0,-(sp)
    fea0:	       pea 1 <_start+0x1>
    fea4:	       lea 12(sp),a0
    fea8:	       move.l a0,-(sp)
    feaa:	       jsr 1489c <getValueType>
    feb0:	       lea 12(sp),sp
    feb4:	       tst.w d0
    feb6:	   ,-- bne.s febe <builtIn_setFont+0x2e>
    feb8:	   |   moveq #1,d0
    feba:	,--|-- bra.w ff6c <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    febe:	|  '-> moveq #24,d0
    fec0:	|      add.l 28(sp),d0
    fec4:	|      move.l d0,-(sp)
    fec6:	|      jsr 15220 <trimStack>
    fecc:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fece:	|      movea.l 28(sp),a0
    fed2:	|      move.l 24(a0),d0
    fed6:	|      move.l d0,-(sp)
    fed8:	|      jsr 14e72 <getTextFromAnyVar>
    fede:	|      addq.l #4,sp
    fee0:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fee4:	|  ,-- bne.s feec <builtIn_setFont+0x5c>
    fee6:	|  |   moveq #1,d0
    fee8:	+--|-- bra.w ff6c <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    feec:	|  '-> moveq #24,d0
    feee:	|      add.l 28(sp),d0
    fef2:	|      move.l d0,-(sp)
    fef4:	|      jsr 15220 <trimStack>
    fefa:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fefc:	|      movea.l 28(sp),a0
    ff00:	|      move.l 24(a0),d0
    ff04:	|      move.l d0,-(sp)
    ff06:	|      pea 5 <_start+0x5>
    ff0a:	|      lea 16(sp),a0
    ff0e:	|      move.l a0,-(sp)
    ff10:	|      jsr 1489c <getValueType>
    ff16:	|      lea 12(sp),sp
    ff1a:	|      tst.w d0
    ff1c:	|  ,-- bne.s ff22 <builtIn_setFont+0x92>
    ff1e:	|  |   moveq #1,d0
    ff20:	+--|-- bra.s ff6c <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ff22:	|  '-> moveq #24,d0
    ff24:	|      add.l 28(sp),d0
    ff28:	|      move.l d0,-(sp)
    ff2a:	|      jsr 15220 <trimStack>
    ff30:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ff32:	|      move.l 4(sp),d1
    ff36:	|      move.l 8(sp),d0
    ff3a:	|      move.l d1,-(sp)
    ff3c:	|      move.l 20(sp),-(sp)
    ff40:	|      move.l d0,-(sp)
    ff42:	|      jsr 156d4 <loadFont>
    ff48:	|      lea 12(sp),sp
    ff4c:	|      tst.w d0
    ff4e:	|  ,-- bne.s ff54 <builtIn_setFont+0xc4>
    ff50:	|  |   moveq #1,d0
    ff52:	+--|-- bra.s ff6c <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ff54:	|  '-> move.l 16(sp),12(sp)
    ff5a:	|      move.l 1cbca <SysBase>,d0
    ff60:	|      movea.l d0,a6
    ff62:	|      movea.l 12(sp),a1
    ff66:	|      jsr -690(a6)

    return BR_CONTINUE;
    ff6a:	|      moveq #2,d0
}
    ff6c:	'----> movea.l (sp)+,a6
    ff6e:	       lea 16(sp),sp
    ff72:	       rts

0000ff74 <builtIn_inFont>:

builtIn(inFont)
{
    ff74:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ff76:	       movea.l 12(sp),a0
    ff7a:	       move.l 24(a0),d0
    ff7e:	       move.l d0,-(sp)
    ff80:	       jsr 14e72 <getTextFromAnyVar>
    ff86:	       addq.l #4,sp
    ff88:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ff8a:	   ,-- bne.s ff90 <builtIn_inFont+0x1c>
    ff8c:	   |   moveq #1,d0
    ff8e:	,--|-- bra.s ffc6 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ff90:	|  '-> moveq #24,d0
    ff92:	|      add.l 12(sp),d0
    ff96:	|      move.l d0,-(sp)
    ff98:	|      jsr 15220 <trimStack>
    ff9e:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ffa0:	|      move.l (sp),-(sp)
    ffa2:	|      jsr 156c2 <isInFont>
    ffa8:	|      addq.l #4,sp
    ffaa:	|      movea.w d0,a0
    ffac:	|      moveq #28,d0
    ffae:	|      add.l 12(sp),d0
    ffb2:	|      move.l a0,-(sp)
    ffb4:	|      pea 1 <_start+0x1>
    ffb8:	|      move.l d0,-(sp)
    ffba:	|      jsr 1518e <setVariable>
    ffc0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ffc4:	|      moveq #2,d0
}
    ffc6:	'----> addq.l #4,sp
    ffc8:	       rts

0000ffca <builtIn_pasteString>:

builtIn(pasteString)
{
    ffca:	       lea -16(sp),sp
    ffce:	       move.l a6,-(sp)
    ffd0:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ffd2:	       movea.l 32(sp),a0
    ffd6:	       move.l 24(a0),d0
    ffda:	       move.l d0,-(sp)
    ffdc:	       jsr 14e72 <getTextFromAnyVar>
    ffe2:	       addq.l #4,sp
    ffe4:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ffe8:	       moveq #24,d0
    ffea:	       add.l 32(sp),d0
    ffee:	       move.l d0,-(sp)
    fff0:	       jsr 15220 <trimStack>
    fff6:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fff8:	       movea.l 32(sp),a0
    fffc:	       move.l 24(a0),d0
   10000:	       move.l d0,-(sp)
   10002:	       pea 1 <_start+0x1>
   10006:	       lea 20(sp),a0
   1000a:	       move.l a0,-(sp)
   1000c:	       jsr 1489c <getValueType>
   10012:	       lea 12(sp),sp
   10016:	       tst.w d0
   10018:	   ,-- bne.s 10020 <builtIn_pasteString+0x56>
   1001a:	   |   moveq #1,d0
   1001c:	,--|-- bra.w 100c2 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10020:	|  '-> moveq #24,d0
   10022:	|      add.l 32(sp),d0
   10026:	|      move.l d0,-(sp)
   10028:	|      jsr 15220 <trimStack>
   1002e:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10030:	|      movea.l 32(sp),a0
   10034:	|      move.l 24(a0),d0
   10038:	|      move.l d0,-(sp)
   1003a:	|      pea 1 <_start+0x1>
   1003e:	|      lea 16(sp),a0
   10042:	|      move.l a0,-(sp)
   10044:	|      jsr 1489c <getValueType>
   1004a:	|      lea 12(sp),sp
   1004e:	|      tst.w d0
   10050:	|  ,-- bne.s 10056 <builtIn_pasteString+0x8c>
   10052:	|  |   moveq #1,d0
   10054:	+--|-- bra.s 100c2 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10056:	|  '-> moveq #24,d0
   10058:	|      add.l 32(sp),d0
   1005c:	|      move.l d0,-(sp)
   1005e:	|      jsr 15220 <trimStack>
   10064:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10066:	|      move.l 8(sp),d0
   1006a:	|      cmpi.l #65535,d0
   10070:	|  ,-- bne.s 10090 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   10072:	|  |   move.l 1cb1e <winWidth>,d2
   10078:	|  |   move.l 20(sp),-(sp)
   1007c:	|  |   jsr 15986 <stringWidth>
   10082:	|  |   addq.l #4,sp
   10084:	|  |   move.l d2,d1
   10086:	|  |   sub.l d0,d1
   10088:	|  |   move.l d1,d0
   1008a:	|  |   lsr.l #1,d0
   1008c:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10090:	|  '-> move.l 12(sp),d1
   10094:	|      move.l 8(sp),d0
   10098:	|      move.l d1,-(sp)
   1009a:	|      move.l d0,-(sp)
   1009c:	|      move.l 28(sp),-(sp)
   100a0:	|      jsr 158a8 <pasteStringToBackdrop>
   100a6:	|      lea 12(sp),sp
    FreeVec(newText); 
   100aa:	|      move.l 20(sp),16(sp)
   100b0:	|      move.l 1cbca <SysBase>,d0
   100b6:	|      movea.l d0,a6
   100b8:	|      movea.l 16(sp),a1
   100bc:	|      jsr -690(a6)
    return BR_CONTINUE;
   100c0:	|      moveq #2,d0
}
   100c2:	'----> move.l (sp)+,d2
   100c4:	       movea.l (sp)+,a6
   100c6:	       lea 16(sp),sp
   100ca:	       rts

000100cc <builtIn_anim>:

builtIn(anim)
{
   100cc:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   100d0:	       moveq #1,d0
   100d2:	       cmp.l 16(sp),d0
   100d6:	   ,-- blt.s 100ec <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   100d8:	   |   pea 19bde <PutChar+0x1dc0>
   100de:	   |   jsr 1737c <KPrintF>
   100e4:	   |   addq.l #4,sp
		return BR_ERROR;
   100e6:	   |   moveq #1,d0
   100e8:	,--|-- bra.w 1017a <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   100ec:	|  '-> moveq #24,d1
   100ee:	|      add.l 20(sp),d1
   100f2:	|      move.l 16(sp),d0
   100f6:	|      subq.l #1,d0
   100f8:	|      move.l d1,-(sp)
   100fa:	|      move.l d0,-(sp)
   100fc:	|      jsr 96fe <createPersonaAnim>
   10102:	|      addq.l #8,sp
   10104:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10108:	|      movea.l 20(sp),a0
   1010c:	|      move.l 24(a0),d0
   10110:	|      move.l d0,-(sp)
   10112:	|      pea 5 <_start+0x5>
   10116:	|      lea 8(sp),a0
   1011a:	|      move.l a0,-(sp)
   1011c:	|      jsr 1489c <getValueType>
   10122:	|      lea 12(sp),sp
   10126:	|      tst.w d0
   10128:	|  ,-- bne.s 1012e <builtIn_anim+0x62>
   1012a:	|  |   moveq #1,d0
   1012c:	+--|-- bra.s 1017a <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   1012e:	|  '-> moveq #24,d0
   10130:	|      add.l 20(sp),d0
   10134:	|      move.l d0,-(sp)
   10136:	|      jsr 15220 <trimStack>
   1013c:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   1013e:	|      move.l (sp),d0
   10140:	|      move.l d0,-(sp)
   10142:	|      jsr 1609e <loadBankForAnim>
   10148:	|      addq.l #4,sp
   1014a:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1014e:	|  ,-- bne.s 10154 <builtIn_anim+0x88>
   10150:	|  |   moveq #1,d0
   10152:	+--|-- bra.s 1017a <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10154:	|  '-> move.l 4(sp),-(sp)
   10158:	|      move.l 12(sp),-(sp)
   1015c:	|      jsr b60a <setBankFile>
   10162:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10164:	|      moveq #28,d0
   10166:	|      add.l 20(sp),d0
   1016a:	|      move.l 8(sp),-(sp)
   1016e:	|      move.l d0,-(sp)
   10170:	|      jsr 1514a <newAnimationVariable>
   10176:	|      addq.l #8,sp
	return BR_CONTINUE;
   10178:	|      moveq #2,d0
}
   1017a:	'----> lea 12(sp),sp
   1017e:	       rts

00010180 <builtIn_costume>:

builtIn(costume)
{
   10180:	          lea -32(sp),sp
   10184:	          move.l a6,-(sp)
   10186:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10188:	          moveq #8,d0
   1018a:	          move.l d0,32(sp)
   1018e:	          clr.l 28(sp)
   10192:	          move.l 1cbca <SysBase>,d0
   10198:	          movea.l d0,a6
   1019a:	          move.l 32(sp),d0
   1019e:	          move.l 28(sp),d1
   101a2:	          jsr -684(a6)
   101a6:	          move.l d0,24(sp)
   101aa:	          move.l 24(sp),d0
   101ae:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   101b2:	      ,-- bne.s 101ba <builtIn_costume+0x3a>
   101b4:	      |   moveq #1,d0
   101b6:	,-----|-- bra.w 102a2 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   101ba:	|     '-> move.l 44(sp),d0
   101be:	|         pea 3 <_start+0x3>
   101c2:	|         move.l d0,-(sp)
   101c4:	|         jsr 17d86 <__divsi3>
   101ca:	|         addq.l #8,sp
   101cc:	|         movea.l 20(sp),a0
   101d0:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   101d4:	|         tst.l 44(sp)
   101d8:	|     ,-- beq.s 101ee <builtIn_costume+0x6e>
   101da:	|     |   movea.l 20(sp),a0
   101de:	|     |   move.l 4(a0),d1
   101e2:	|     |   move.l d1,d0
   101e4:	|     |   add.l d0,d0
   101e6:	|     |   add.l d1,d0
   101e8:	|     |   cmp.l 44(sp),d0
   101ec:	|  ,--|-- beq.s 10202 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   101ee:	|  |  '-> pea 19c18 <PutChar+0x1dfa>
   101f4:	|  |      jsr 1737c <KPrintF>
   101fa:	|  |      addq.l #4,sp
        return BR_ERROR;
   101fc:	|  |      moveq #1,d0
   101fe:	+--|----- bra.w 102a2 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10202:	|  '----> move.l 44(sp),d0
   10206:	|         add.l d0,d0
   10208:	|         add.l d0,d0
   1020a:	|         move.l d0,16(sp)
   1020e:	|         clr.l 12(sp)
   10212:	|         move.l 1cbca <SysBase>,d0
   10218:	|         movea.l d0,a6
   1021a:	|         move.l 16(sp),d0
   1021e:	|         move.l 12(sp),d1
   10222:	|         jsr -684(a6)
   10226:	|         move.l d0,8(sp)
   1022a:	|         move.l 8(sp),d0
   1022e:	|         movea.l 20(sp),a0
   10232:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10234:	|         movea.l 20(sp),a0
   10238:	|         move.l (a0),d0
   1023a:	|     ,-- bne.s 10240 <builtIn_costume+0xc0>
   1023c:	|     |   moveq #1,d0
   1023e:	+-----|-- bra.s 102a2 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10240:	|     '-> move.l 44(sp),d0
   10244:	|         subq.l #1,d0
   10246:	|         move.l d0,36(sp)
   1024a:	|     ,-- bra.s 10286 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1024c:	|  ,--|-> movea.l 48(sp),a0
   10250:	|  |  |   move.l 24(a0),d0
   10254:	|  |  |   movea.l 20(sp),a0
   10258:	|  |  |   movea.l (a0),a0
   1025a:	|  |  |   move.l 36(sp),d1
   1025e:	|  |  |   add.l d1,d1
   10260:	|  |  |   add.l d1,d1
   10262:	|  |  |   lea (0,a0,d1.l),a2
   10266:	|  |  |   move.l d0,-(sp)
   10268:	|  |  |   jsr 14d74 <getAnimationFromVar>
   1026e:	|  |  |   addq.l #4,sp
   10270:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10272:	|  |  |   moveq #24,d0
   10274:	|  |  |   add.l 48(sp),d0
   10278:	|  |  |   move.l d0,-(sp)
   1027a:	|  |  |   jsr 15220 <trimStack>
   10280:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10282:	|  |  |   subq.l #1,36(sp)
   10286:	|  |  '-> tst.l 36(sp)
   1028a:	|  '----- bge.s 1024c <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1028c:	|         moveq #28,d0
   1028e:	|         add.l 48(sp),d0
   10292:	|         move.l 20(sp),-(sp)
   10296:	|         move.l d0,-(sp)
   10298:	|         jsr 1516c <newCostumeVariable>
   1029e:	|         addq.l #8,sp
    return BR_CONTINUE;
   102a0:	|         moveq #2,d0
}
   102a2:	'-------> movea.l (sp)+,a2
   102a4:	          movea.l (sp)+,a6
   102a6:	          lea 32(sp),sp
   102aa:	          rts

000102ac <builtIn_launch>:

builtIn(launch)
{
   102ac:	          lea -20(sp),sp
   102b0:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   102b2:	          movea.l 32(sp),a0
   102b6:	          move.l 24(a0),d0
   102ba:	          move.l d0,-(sp)
   102bc:	          jsr 14e72 <getTextFromAnyVar>
   102c2:	          addq.l #4,sp
   102c4:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   102c8:	      ,-- bne.s 102d0 <builtIn_launch+0x24>
   102ca:	      |   moveq #1,d0
   102cc:	,-----|-- bra.w 103fe <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   102d0:	|     '-> move.l 20(sp),-(sp)
   102d4:	|         jsr 2fe <encodeFilename>
   102da:	|         addq.l #4,sp
   102dc:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   102e0:	|         moveq #24,d0
   102e2:	|         add.l 32(sp),d0
   102e6:	|         move.l d0,-(sp)
   102e8:	|         jsr 15220 <trimStack>
   102ee:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   102f0:	|         movea.l 20(sp),a0
   102f4:	|         move.b (a0),d0
   102f6:	|         cmpi.b #104,d0
   102fa:	|  ,----- bne.s 10364 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   102fc:	|  |      movea.l 20(sp),a0
   10300:	|  |      addq.l #1,a0
   10302:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10304:	|  |      cmpi.b #116,d0
   10308:	|  +----- bne.s 10364 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1030a:	|  |      movea.l 20(sp),a0
   1030e:	|  |      addq.l #2,a0
   10310:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10312:	|  |      cmpi.b #116,d0
   10316:	|  +----- bne.s 10364 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10318:	|  |      movea.l 20(sp),a0
   1031c:	|  |      addq.l #3,a0
   1031e:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10320:	|  |      cmpi.b #112,d0
   10324:	|  +----- bne.s 10364 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10326:	|  |      movea.l 20(sp),a0
   1032a:	|  |      addq.l #4,a0
   1032c:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1032e:	|  |      cmpi.b #58,d0
   10332:	|  |  ,-- beq.s 10350 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10334:	|  |  |   movea.l 20(sp),a0
   10338:	|  |  |   addq.l #4,a0
   1033a:	|  |  |   move.b (a0),d0
   1033c:	|  |  |   cmpi.b #115,d0
   10340:	|  +--|-- bne.s 10364 <builtIn_launch+0xb8>
   10342:	|  |  |   movea.l 20(sp),a0
   10346:	|  |  |   addq.l #5,a0
   10348:	|  |  |   move.b (a0),d0
   1034a:	|  |  |   cmpi.b #58,d0
   1034e:	|  +--|-- bne.s 10364 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10350:	|  |  '-> move.l 20(sp),-(sp)
   10354:	|  |      jsr b8 <copyString>
   1035a:	|  |      addq.l #4,sp
   1035c:	|  |      move.l d0,1cc88 <launchMe>
   10362:	|  |  ,-- bra.s 103b6 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10364:	|  '--|-> move.l 1cb32 <gamePath>,d0
   1036a:	|     |   pea 19c63 <PutChar+0x1e45>
   10370:	|     |   move.l d0,-(sp)
   10372:	|     |   jsr 13dc8 <joinStrings>
   10378:	|     |   addq.l #8,sp
   1037a:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1037e:	|     |   move.l 16(sp),-(sp)
   10382:	|     |   move.l 16(sp),-(sp)
   10386:	|     |   jsr 13dc8 <joinStrings>
   1038c:	|     |   addq.l #8,sp
   1038e:	|     |   move.l d0,1cc88 <launchMe>
        FreeVec(newText);
   10394:	|     |   move.l 16(sp),8(sp)
   1039a:	|     |   move.l 1cbca <SysBase>,d0
   103a0:	|     |   movea.l d0,a6
   103a2:	|     |   movea.l 8(sp),a1
   103a6:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   103aa:	|     |   move.l 1cc88 <launchMe>,d0
   103b0:	|     +-- bne.s 103b6 <builtIn_launch+0x10a>
   103b2:	|     |   moveq #1,d0
   103b4:	+-----|-- bra.s 103fe <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   103b6:	|     '-> move.l 20(sp),4(sp)
   103bc:	|         move.l 1cbca <SysBase>,d0
   103c2:	|         movea.l d0,a6
   103c4:	|         movea.l 4(sp),a1
   103c8:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   103cc:	|         clr.l -(sp)
   103ce:	|         jsr 4a02 <setGraphicsWindow>
   103d4:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   103d6:	|         moveq #28,d0
   103d8:	|         add.l 32(sp),d0
   103dc:	|         pea 1 <_start+0x1>
   103e0:	|         pea 1 <_start+0x1>
   103e4:	|         move.l d0,-(sp)
   103e6:	|         jsr 1518e <setVariable>
   103ec:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   103f0:	|         moveq #28,d0
   103f2:	|         add.l 32(sp),d0
   103f6:	|         move.l d0,1cc8c <launchResult>

    return BR_KEEP_AND_PAUSE;
   103fc:	|         moveq #0,d0
}
   103fe:	'-------> movea.l (sp)+,a6
   10400:	          lea 20(sp),sp
   10404:	          rts

00010406 <builtIn_pause>:

builtIn(pause)
{
   10406:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10408:	       movea.l 12(sp),a0
   1040c:	       move.l 24(a0),d0
   10410:	       move.l d0,-(sp)
   10412:	       pea 1 <_start+0x1>
   10416:	       move.l sp,d0
   10418:	       addq.l #8,d0
   1041a:	       move.l d0,-(sp)
   1041c:	       jsr 1489c <getValueType>
   10422:	       lea 12(sp),sp
   10426:	       tst.w d0
   10428:	   ,-- bne.s 1042e <builtIn_pause+0x28>
   1042a:	   |   moveq #1,d0
   1042c:	,--|-- bra.s 1045c <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1042e:	|  '-> moveq #24,d0
   10430:	|      add.l 12(sp),d0
   10434:	|      move.l d0,-(sp)
   10436:	|      jsr 15220 <trimStack>
   1043c:	|      addq.l #4,sp
	if (theTime > 0) {
   1043e:	|      move.l (sp),d0
   10440:	|  ,-- ble.s 1045a <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10442:	|  |   move.l (sp),d0
   10444:	|  |   subq.l #1,d0
   10446:	|  |   movea.l 12(sp),a0
   1044a:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1044e:	|  |   movea.l 12(sp),a0
   10452:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10456:	|  |   moveq #0,d0
   10458:	+--|-- bra.s 1045c <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1045a:	|  '-> moveq #2,d0
}
   1045c:	'----> addq.l #4,sp
   1045e:	       rts

00010460 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10460:	jsr 5196 <completeTimers>
	return BR_CONTINUE;
   10466:	moveq #2,d0
}
   10468:	rts

0001046a <builtIn_callEvent>:

builtIn(callEvent)
{
   1046a:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1046e:	       movea.l 20(sp),a0
   10472:	       move.l 24(a0),d0
   10476:	       move.l d0,-(sp)
   10478:	       pea 7 <_start+0x7>
   1047c:	       lea 8(sp),a0
   10480:	       move.l a0,-(sp)
   10482:	       jsr 1489c <getValueType>
   10488:	       lea 12(sp),sp
   1048c:	       tst.w d0
   1048e:	   ,-- bne.s 10496 <builtIn_callEvent+0x2c>
   10490:	   |   moveq #1,d0
   10492:	,--|-- bra.w 1052c <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10496:	|  '-> moveq #24,d0
   10498:	|      add.l 20(sp),d0
   1049c:	|      move.l d0,-(sp)
   1049e:	|      jsr 15220 <trimStack>
   104a4:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104a6:	|      movea.l 20(sp),a0
   104aa:	|      move.l 24(a0),d0
   104ae:	|      move.l d0,-(sp)
   104b0:	|      pea 7 <_start+0x7>
   104b4:	|      moveq #12,d0
   104b6:	|      add.l sp,d0
   104b8:	|      move.l d0,-(sp)
   104ba:	|      jsr 1489c <getValueType>
   104c0:	|      lea 12(sp),sp
   104c4:	|      tst.w d0
   104c6:	|  ,-- bne.s 104cc <builtIn_callEvent+0x62>
   104c8:	|  |   moveq #1,d0
   104ca:	+--|-- bra.s 1052c <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   104cc:	|  '-> moveq #24,d0
   104ce:	|      add.l 20(sp),d0
   104d2:	|      move.l d0,-(sp)
   104d4:	|      jsr 15220 <trimStack>
   104da:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   104dc:	|      move.l (sp),d1
   104de:	|      move.l 4(sp),d0
   104e2:	|      move.l d1,-(sp)
   104e4:	|      move.l d0,-(sp)
   104e6:	|      jsr d5e4 <getCombinationFunction>
   104ec:	|      addq.l #8,sp
   104ee:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   104f2:	|  ,-- beq.s 10512 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   104f4:	|  |   moveq #28,d0
   104f6:	|  |   add.l 20(sp),d0
   104fa:	|  |   move.l 8(sp),-(sp)
   104fe:	|  |   pea 2 <_start+0x2>
   10502:	|  |   move.l d0,-(sp)
   10504:	|  |   jsr 1518e <setVariable>
   1050a:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1050e:	|  |   moveq #4,d0
   10510:	+--|-- bra.s 1052c <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10512:	|  '-> moveq #28,d0
   10514:	|      add.l 20(sp),d0
   10518:	|      clr.l -(sp)
   1051a:	|      pea 1 <_start+0x1>
   1051e:	|      move.l d0,-(sp)
   10520:	|      jsr 1518e <setVariable>
   10526:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1052a:	|      moveq #2,d0
}
   1052c:	'----> lea 12(sp),sp
   10530:	       rts

00010532 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10532:	move.w #1,1cc98 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1053a:	moveq #2,d0
}
   1053c:	rts

0001053e <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1053e:	moveq #24,d0
   10540:	add.l 8(sp),d0
   10544:	move.l d0,-(sp)
   10546:	jsr 15220 <trimStack>
   1054c:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1054e:	pea 19c65 <PutChar+0x1e47>
   10554:	jsr 1737c <KPrintF>
   1055a:	addq.l #4,sp
	return BR_CONTINUE;
   1055c:	moveq #2,d0
}
   1055e:	rts

00010560 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10560:	pea 19c65 <PutChar+0x1e47>
   10566:	jsr 1737c <KPrintF>
   1056c:	addq.l #4,sp
	return BR_CONTINUE;
   1056e:	moveq #2,d0
}
   10570:	rts

00010572 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10572:	pea 19c65 <PutChar+0x1e47>
   10578:	jsr 1737c <KPrintF>
   1057e:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10580:	moveq #2,d0
}
   10582:	rts

00010584 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10584:	pea 19c65 <PutChar+0x1e47>
   1058a:	jsr 1737c <KPrintF>
   10590:	addq.l #4,sp
	return BR_CONTINUE;
   10592:	moveq #2,d0
}
   10594:	rts

00010596 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10596:	pea 19c65 <PutChar+0x1e47>
   1059c:	jsr 1737c <KPrintF>
   105a2:	addq.l #4,sp
	return BR_CONTINUE;
   105a4:	moveq #2,d0
}
   105a6:	rts

000105a8 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   105a8:	pea 19c65 <PutChar+0x1e47>
   105ae:	jsr 1737c <KPrintF>
   105b4:	addq.l #4,sp
	return BR_CONTINUE;
   105b6:	moveq #2,d0
}
   105b8:	rts

000105ba <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   105ba:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105be:	       movea.l 20(sp),a0
   105c2:	       move.l 24(a0),d0
   105c6:	       move.l d0,-(sp)
   105c8:	       pea 1 <_start+0x1>
   105cc:	       moveq #16,d0
   105ce:	       add.l sp,d0
   105d0:	       move.l d0,-(sp)
   105d2:	       jsr 1489c <getValueType>
   105d8:	       lea 12(sp),sp
   105dc:	       tst.w d0
   105de:	   ,-- bne.s 105e6 <builtIn_startMusic+0x2c>
   105e0:	   |   moveq #1,d0
   105e2:	,--|-- bra.w 10686 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105e6:	|  '-> moveq #24,d0
   105e8:	|      add.l 20(sp),d0
   105ec:	|      move.l d0,-(sp)
   105ee:	|      jsr 15220 <trimStack>
   105f4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105f6:	|      movea.l 20(sp),a0
   105fa:	|      move.l 24(a0),d0
   105fe:	|      move.l d0,-(sp)
   10600:	|      pea 1 <_start+0x1>
   10604:	|      moveq #12,d0
   10606:	|      add.l sp,d0
   10608:	|      move.l d0,-(sp)
   1060a:	|      jsr 1489c <getValueType>
   10610:	|      lea 12(sp),sp
   10614:	|      tst.w d0
   10616:	|  ,-- bne.s 1061c <builtIn_startMusic+0x62>
   10618:	|  |   moveq #1,d0
   1061a:	+--|-- bra.s 10686 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1061c:	|  '-> moveq #24,d0
   1061e:	|      add.l 20(sp),d0
   10622:	|      move.l d0,-(sp)
   10624:	|      jsr 15220 <trimStack>
   1062a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1062c:	|      movea.l 20(sp),a0
   10630:	|      move.l 24(a0),d0
   10634:	|      move.l d0,-(sp)
   10636:	|      pea 5 <_start+0x5>
   1063a:	|      lea 8(sp),a0
   1063e:	|      move.l a0,-(sp)
   10640:	|      jsr 1489c <getValueType>
   10646:	|      lea 12(sp),sp
   1064a:	|      tst.w d0
   1064c:	|  ,-- bne.s 10652 <builtIn_startMusic+0x98>
   1064e:	|  |   moveq #1,d0
   10650:	+--|-- bra.s 10686 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10652:	|  '-> moveq #24,d0
   10654:	|      add.l 20(sp),d0
   10658:	|      move.l d0,-(sp)
   1065a:	|      jsr 15220 <trimStack>
   10660:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10662:	|      movea.l 8(sp),a0
   10666:	|      move.l 4(sp),d1
   1066a:	|      move.l (sp),d0
   1066c:	|      move.l a0,-(sp)
   1066e:	|      move.l d1,-(sp)
   10670:	|      move.l d0,-(sp)
   10672:	|      jsr d1e6 <playMOD>
   10678:	|      lea 12(sp),sp
   1067c:	|      tst.w d0
   1067e:	|  ,-- bne.s 10684 <builtIn_startMusic+0xca>
   10680:	|  |   moveq #2,d0
   10682:	+--|-- bra.s 10686 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10684:	|  '-> moveq #2,d0
}
   10686:	'----> lea 12(sp),sp
   1068a:	       rts

0001068c <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1068c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1068e:	       movea.l 12(sp),a0
   10692:	       move.l 24(a0),d0
   10696:	       move.l d0,-(sp)
   10698:	       pea 1 <_start+0x1>
   1069c:	       move.l sp,d0
   1069e:	       addq.l #8,d0
   106a0:	       move.l d0,-(sp)
   106a2:	       jsr 1489c <getValueType>
   106a8:	       lea 12(sp),sp
   106ac:	       tst.w d0
   106ae:	   ,-- bne.s 106b4 <builtIn_stopMusic+0x28>
   106b0:	   |   moveq #1,d0
   106b2:	,--|-- bra.s 106d2 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   106b4:	|  '-> moveq #24,d0
   106b6:	|      add.l 12(sp),d0
   106ba:	|      move.l d0,-(sp)
   106bc:	|      jsr 15220 <trimStack>
   106c2:	|      addq.l #4,sp
	stopMOD (v);
   106c4:	|      move.l (sp),d0
   106c6:	|      move.l d0,-(sp)
   106c8:	|      jsr d282 <stopMOD>
   106ce:	|      addq.l #4,sp
	return BR_CONTINUE;
   106d0:	|      moveq #2,d0
}
   106d2:	'----> addq.l #4,sp
   106d4:	       rts

000106d6 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   106d6:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106d8:	       movea.l 16(sp),a0
   106dc:	       move.l 24(a0),d0
   106e0:	       move.l d0,-(sp)
   106e2:	       pea 1 <_start+0x1>
   106e6:	       move.l sp,d0
   106e8:	       addq.l #8,d0
   106ea:	       move.l d0,-(sp)
   106ec:	       jsr 1489c <getValueType>
   106f2:	       lea 12(sp),sp
   106f6:	       tst.w d0
   106f8:	   ,-- bne.s 106fe <builtIn_setMusicVolume+0x28>
   106fa:	   |   moveq #1,d0
   106fc:	,--|-- bra.s 10758 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106fe:	|  '-> moveq #24,d0
   10700:	|      add.l 16(sp),d0
   10704:	|      move.l d0,-(sp)
   10706:	|      jsr 15220 <trimStack>
   1070c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1070e:	|      movea.l 16(sp),a0
   10712:	|      move.l 24(a0),d0
   10716:	|      move.l d0,-(sp)
   10718:	|      pea 1 <_start+0x1>
   1071c:	|      moveq #12,d0
   1071e:	|      add.l sp,d0
   10720:	|      move.l d0,-(sp)
   10722:	|      jsr 1489c <getValueType>
   10728:	|      lea 12(sp),sp
   1072c:	|      tst.w d0
   1072e:	|  ,-- bne.s 10734 <builtIn_setMusicVolume+0x5e>
   10730:	|  |   moveq #1,d0
   10732:	+--|-- bra.s 10758 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10734:	|  '-> moveq #24,d0
   10736:	|      add.l 16(sp),d0
   1073a:	|      move.l d0,-(sp)
   1073c:	|      jsr 15220 <trimStack>
   10742:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10744:	|      move.l (sp),d1
   10746:	|      move.l 4(sp),d0
   1074a:	|      move.l d1,-(sp)
   1074c:	|      move.l d0,-(sp)
   1074e:	|      jsr d268 <setMusicVolume>
   10754:	|      addq.l #8,sp
	return BR_CONTINUE;
   10756:	|      moveq #2,d0
}
   10758:	'----> addq.l #8,sp
   1075a:	       rts

0001075c <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1075c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1075e:	       movea.l 12(sp),a0
   10762:	       move.l 24(a0),d0
   10766:	       move.l d0,-(sp)
   10768:	       pea 1 <_start+0x1>
   1076c:	       move.l sp,d0
   1076e:	       addq.l #8,d0
   10770:	       move.l d0,-(sp)
   10772:	       jsr 1489c <getValueType>
   10778:	       lea 12(sp),sp
   1077c:	       tst.w d0
   1077e:	   ,-- bne.s 10784 <builtIn_setDefaultMusicVolume+0x28>
   10780:	   |   moveq #1,d0
   10782:	,--|-- bra.s 107a2 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10784:	|  '-> moveq #24,d0
   10786:	|      add.l 12(sp),d0
   1078a:	|      move.l d0,-(sp)
   1078c:	|      jsr 15220 <trimStack>
   10792:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10794:	|      move.l (sp),d0
   10796:	|      move.l d0,-(sp)
   10798:	|      jsr d24c <setDefaultMusicVolume>
   1079e:	|      addq.l #4,sp
	return BR_CONTINUE;
   107a0:	|      moveq #2,d0
}
   107a2:	'----> addq.l #4,sp
   107a4:	       rts

000107a6 <builtIn_playSound>:

builtIn(playSound)
{
   107a6:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a8:	       movea.l 12(sp),a0
   107ac:	       move.l 24(a0),d0
   107b0:	       move.l d0,-(sp)
   107b2:	       pea 5 <_start+0x5>
   107b6:	       move.l sp,d0
   107b8:	       addq.l #8,d0
   107ba:	       move.l d0,-(sp)
   107bc:	       jsr 1489c <getValueType>
   107c2:	       lea 12(sp),sp
   107c6:	       tst.w d0
   107c8:	   ,-- bne.s 107ce <builtIn_playSound+0x28>
   107ca:	   |   moveq #1,d0
   107cc:	,--|-- bra.s 107f6 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   107ce:	|  '-> moveq #24,d0
   107d0:	|      add.l 12(sp),d0
   107d4:	|      move.l d0,-(sp)
   107d6:	|      jsr 15220 <trimStack>
   107dc:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   107de:	|      move.l (sp),d0
   107e0:	|      clr.l -(sp)
   107e2:	|      move.l d0,-(sp)
   107e4:	|      jsr d270 <startSound>
   107ea:	|      addq.l #8,sp
   107ec:	|      tst.w d0
   107ee:	|  ,-- bne.s 107f4 <builtIn_playSound+0x4e>
   107f0:	|  |   moveq #2,d0
   107f2:	+--|-- bra.s 107f6 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   107f4:	|  '-> moveq #2,d0
}
   107f6:	'----> addq.l #4,sp
   107f8:	       rts

000107fa <builtIn_loopSound>:

builtIn(loopSound)
{
   107fa:	             lea -28(sp),sp
   107fe:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10800:	             tst.l 36(sp)
   10804:	         ,-- bgt.s 1081a <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10806:	         |   pea 19c88 <talk.c.490538ff+0x1d>
   1080c:	         |   jsr 1737c <KPrintF>
   10812:	         |   addq.l #4,sp
		return BR_ERROR;
   10814:	         |   moveq #1,d0
   10816:	,--------|-- bra.w 109d6 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1081a:	|        '-> moveq #1,d0
   1081c:	|            cmp.l 36(sp),d0
   10820:	|     ,----- blt.s 1087c <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10822:	|     |      movea.l 40(sp),a0
   10826:	|     |      move.l 24(a0),d0
   1082a:	|     |      move.l d0,-(sp)
   1082c:	|     |      pea 5 <_start+0x5>
   10830:	|     |      lea 16(sp),a0
   10834:	|     |      move.l a0,-(sp)
   10836:	|     |      jsr 1489c <getValueType>
   1083c:	|     |      lea 12(sp),sp
   10840:	|     |      tst.w d0
   10842:	|     |  ,-- bne.s 1084a <builtIn_loopSound+0x50>
   10844:	|     |  |   moveq #1,d0
   10846:	+-----|--|-- bra.w 109d6 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   1084a:	|     |  '-> moveq #24,d0
   1084c:	|     |      add.l 40(sp),d0
   10850:	|     |      move.l d0,-(sp)
   10852:	|     |      jsr 15220 <trimStack>
   10858:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   1085a:	|     |      move.l 8(sp),d0
   1085e:	|     |      pea 1 <_start+0x1>
   10862:	|     |      move.l d0,-(sp)
   10864:	|     |      jsr d270 <startSound>
   1086a:	|     |      addq.l #8,sp
   1086c:	|     |      tst.w d0
   1086e:	|     |  ,-- bne.s 10876 <builtIn_loopSound+0x7c>
   10870:	|     |  |   moveq #2,d0
   10872:	+-----|--|-- bra.w 109d6 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10876:	|     |  '-> moveq #2,d0
   10878:	+-----|----- bra.w 109d6 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1087c:	|     '----> moveq #2,d1
   1087e:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10882:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10886:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1088a:	|            movea.l 40(sp),a0
   1088e:	|            movea.l 24(a0),a0
   10892:	|            move.l (a0),d0
   10894:	|            moveq #5,d1
   10896:	|            cmp.l d0,d1
   10898:	|  ,-------- beq.w 10970 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1089c:	|  |         movea.l 40(sp),a0
   108a0:	|  |         move.l 24(a0),d0
   108a4:	|  |         move.l d0,-(sp)
   108a6:	|  |         pea 1 <_start+0x1>
   108aa:	|  |         lea 12(sp),a0
   108ae:	|  |         move.l a0,-(sp)
   108b0:	|  |         jsr 1489c <getValueType>
   108b6:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   108ba:	|  |         moveq #24,d0
   108bc:	|  |         add.l 40(sp),d0
   108c0:	|  |         move.l d0,-(sp)
   108c2:	|  |         jsr 15220 <trimStack>
   108c8:	|  |         addq.l #4,sp
			numParams--;
   108ca:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   108ce:	|  +-------- bra.w 10970 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   108d2:	|  |  ,----> movea.l 40(sp),a0
   108d6:	|  |  |      move.l 24(a0),d0
   108da:	|  |  |      move.l d0,-(sp)
   108dc:	|  |  |      pea 5 <_start+0x5>
   108e0:	|  |  |      lea 16(sp),a0
   108e4:	|  |  |      move.l a0,-(sp)
   108e6:	|  |  |      jsr 1489c <getValueType>
   108ec:	|  |  |      lea 12(sp),sp
   108f0:	|  |  |      tst.w d0
   108f2:	|  |  |  ,-- bne.s 10908 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   108f4:	|  |  |  |   pea 19cc6 <talk.c.490538ff+0x5b>
   108fa:	|  |  |  |   jsr 1737c <KPrintF>
   10900:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10902:	|  |  |  |   moveq #1,d0
   10904:	+--|--|--|-- bra.w 109d6 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10908:	|  |  |  '-> moveq #20,d0
   1090a:	|  |  |      move.l d0,20(sp)
   1090e:	|  |  |      clr.l 16(sp)
   10912:	|  |  |      move.l 1cbca <SysBase>,d0
   10918:	|  |  |      movea.l d0,a6
   1091a:	|  |  |      move.l 20(sp),d0
   1091e:	|  |  |      move.l 16(sp),d1
   10922:	|  |  |      jsr -684(a6)
   10926:	|  |  |      move.l d0,12(sp)
   1092a:	|  |  |      move.l 12(sp),d0
   1092e:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10932:	|  |  |  ,-- bne.s 1093a <builtIn_loopSound+0x140>
   10934:	|  |  |  |   moveq #1,d0
   10936:	+--|--|--|-- bra.w 109d6 <builtIn_loopSound+0x1dc>

			s->next = old;
   1093a:	|  |  |  '-> movea.l 28(sp),a0
   1093e:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10944:	|  |  |      movea.l 28(sp),a0
   10948:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1094c:	|  |  |      move.l 8(sp),d0
   10950:	|  |  |      movea.l 28(sp),a0
   10954:	|  |  |      move.l d0,(a0)
			old = s;
   10956:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1095c:	|  |  |      moveq #24,d0
   1095e:	|  |  |      add.l 40(sp),d0
   10962:	|  |  |      move.l d0,-(sp)
   10964:	|  |  |      jsr 15220 <trimStack>
   1096a:	|  |  |      addq.l #4,sp
			numParams--;
   1096c:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10970:	|  '--|----> tst.l 36(sp)
   10974:	|     '----- bne.w 108d2 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10978:	|        ,-- bra.s 10984 <builtIn_loopSound+0x18a>
   1097a:	|     ,--|-> movea.l 28(sp),a0
   1097e:	|     |  |   move.l 4(a0),28(sp)
   10984:	|     |  '-> movea.l 28(sp),a0
   10988:	|     |      move.l 4(a0),d0
   1098c:	|     '----- bne.s 1097a <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   1098e:	|            move.l 4(sp),d0
   10992:	|            moveq #1,d1
   10994:	|            cmp.l d0,d1
   10996:	|     ,----- bge.s 109ae <builtIn_loopSound+0x1b4>
			s->next = old;
   10998:	|     |      movea.l 28(sp),a0
   1099c:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   109a2:	|     |      movea.l 24(sp),a0
   109a6:	|     |      move.l 28(sp),8(a0)
   109ac:	|     |  ,-- bra.s 109be <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   109ae:	|     '--|-> move.l 4(sp),d0
   109b2:	|        +-- beq.s 109be <builtIn_loopSound+0x1c4>
			s->next = s;
   109b4:	|        |   movea.l 28(sp),a0
   109b8:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   109be:	|        '-> movea.l 24(sp),a0
   109c2:	|            moveq #-1,d0
   109c4:	|            move.l d0,16(a0)
		playSoundList(old);
   109c8:	|            move.l 24(sp),-(sp)
   109cc:	|            jsr d1ea <playSoundList>
   109d2:	|            addq.l #4,sp
		return BR_CONTINUE;
   109d4:	|            moveq #2,d0
	}
}
   109d6:	'----------> movea.l (sp)+,a6
   109d8:	             lea 28(sp),sp
   109dc:	             rts

000109de <builtIn_stopSound>:

builtIn(stopSound)
{
   109de:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   109e0:	       movea.l 12(sp),a0
   109e4:	       move.l 24(a0),d0
   109e8:	       move.l d0,-(sp)
   109ea:	       pea 5 <_start+0x5>
   109ee:	       move.l sp,d0
   109f0:	       addq.l #8,d0
   109f2:	       move.l d0,-(sp)
   109f4:	       jsr 1489c <getValueType>
   109fa:	       lea 12(sp),sp
   109fe:	       tst.w d0
   10a00:	   ,-- bne.s 10a06 <builtIn_stopSound+0x28>
   10a02:	   |   moveq #1,d0
   10a04:	,--|-- bra.s 10a24 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10a06:	|  '-> moveq #24,d0
   10a08:	|      add.l 12(sp),d0
   10a0c:	|      move.l d0,-(sp)
   10a0e:	|      jsr 15220 <trimStack>
   10a14:	|      addq.l #4,sp
	huntKillSound (v);
   10a16:	|      move.l (sp),d0
   10a18:	|      move.l d0,-(sp)
   10a1a:	|      jsr d1e2 <huntKillSound>
   10a20:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a22:	|      moveq #2,d0
}
   10a24:	'----> addq.l #4,sp
   10a26:	       rts

00010a28 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10a28:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a2a:	       movea.l 12(sp),a0
   10a2e:	       move.l 24(a0),d0
   10a32:	       move.l d0,-(sp)
   10a34:	       pea 1 <_start+0x1>
   10a38:	       move.l sp,d0
   10a3a:	       addq.l #8,d0
   10a3c:	       move.l d0,-(sp)
   10a3e:	       jsr 1489c <getValueType>
   10a44:	       lea 12(sp),sp
   10a48:	       tst.w d0
   10a4a:	   ,-- bne.s 10a50 <builtIn_setDefaultSoundVolume+0x28>
   10a4c:	   |   moveq #1,d0
   10a4e:	,--|-- bra.s 10a6e <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10a50:	|  '-> moveq #24,d0
   10a52:	|      add.l 12(sp),d0
   10a56:	|      move.l d0,-(sp)
   10a58:	|      jsr 15220 <trimStack>
   10a5e:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10a60:	|      move.l (sp),d0
   10a62:	|      move.l d0,-(sp)
   10a64:	|      jsr d258 <setDefaultSoundVolume>
   10a6a:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a6c:	|      moveq #2,d0
}
   10a6e:	'----> addq.l #4,sp
   10a70:	       rts

00010a72 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10a72:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a74:	       movea.l 16(sp),a0
   10a78:	       move.l 24(a0),d0
   10a7c:	       move.l d0,-(sp)
   10a7e:	       pea 1 <_start+0x1>
   10a82:	       move.l sp,d0
   10a84:	       addq.l #8,d0
   10a86:	       move.l d0,-(sp)
   10a88:	       jsr 1489c <getValueType>
   10a8e:	       lea 12(sp),sp
   10a92:	       tst.w d0
   10a94:	   ,-- bne.s 10a9a <builtIn_setSoundVolume+0x28>
   10a96:	   |   moveq #1,d0
   10a98:	,--|-- bra.s 10af4 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a9a:	|  '-> moveq #24,d0
   10a9c:	|      add.l 16(sp),d0
   10aa0:	|      move.l d0,-(sp)
   10aa2:	|      jsr 15220 <trimStack>
   10aa8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10aaa:	|      movea.l 16(sp),a0
   10aae:	|      move.l 24(a0),d0
   10ab2:	|      move.l d0,-(sp)
   10ab4:	|      pea 5 <_start+0x5>
   10ab8:	|      moveq #12,d0
   10aba:	|      add.l sp,d0
   10abc:	|      move.l d0,-(sp)
   10abe:	|      jsr 1489c <getValueType>
   10ac4:	|      lea 12(sp),sp
   10ac8:	|      tst.w d0
   10aca:	|  ,-- bne.s 10ad0 <builtIn_setSoundVolume+0x5e>
   10acc:	|  |   moveq #1,d0
   10ace:	+--|-- bra.s 10af4 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10ad0:	|  '-> moveq #24,d0
   10ad2:	|      add.l 16(sp),d0
   10ad6:	|      move.l d0,-(sp)
   10ad8:	|      jsr 15220 <trimStack>
   10ade:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10ae0:	|      move.l (sp),d1
   10ae2:	|      move.l 4(sp),d0
   10ae6:	|      move.l d1,-(sp)
   10ae8:	|      move.l d0,-(sp)
   10aea:	|      jsr d26c <setSoundVolume>
   10af0:	|      addq.l #8,sp
	return BR_CONTINUE;
   10af2:	|      moveq #2,d0
}
   10af4:	'----> addq.l #8,sp
   10af6:	       rts

00010af8 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10af8:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10afc:	       movea.l 20(sp),a0
   10b00:	       move.l 24(a0),d0
   10b04:	       move.l d0,-(sp)
   10b06:	       pea 1 <_start+0x1>
   10b0a:	       moveq #12,d0
   10b0c:	       add.l sp,d0
   10b0e:	       move.l d0,-(sp)
   10b10:	       jsr 1489c <getValueType>
   10b16:	       lea 12(sp),sp
   10b1a:	       tst.w d0
   10b1c:	   ,-- bne.s 10b24 <builtIn_setSoundLoopPoints+0x2c>
   10b1e:	   |   moveq #1,d0
   10b20:	,--|-- bra.w 10bbc <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b24:	|  '-> moveq #24,d0
   10b26:	|      add.l 20(sp),d0
   10b2a:	|      move.l d0,-(sp)
   10b2c:	|      jsr 15220 <trimStack>
   10b32:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b34:	|      movea.l 20(sp),a0
   10b38:	|      move.l 24(a0),d0
   10b3c:	|      move.l d0,-(sp)
   10b3e:	|      pea 1 <_start+0x1>
   10b42:	|      lea 8(sp),a0
   10b46:	|      move.l a0,-(sp)
   10b48:	|      jsr 1489c <getValueType>
   10b4e:	|      lea 12(sp),sp
   10b52:	|      tst.w d0
   10b54:	|  ,-- bne.s 10b5a <builtIn_setSoundLoopPoints+0x62>
   10b56:	|  |   moveq #1,d0
   10b58:	+--|-- bra.s 10bbc <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b5a:	|  '-> moveq #24,d0
   10b5c:	|      add.l 20(sp),d0
   10b60:	|      move.l d0,-(sp)
   10b62:	|      jsr 15220 <trimStack>
   10b68:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b6a:	|      movea.l 20(sp),a0
   10b6e:	|      move.l 24(a0),d0
   10b72:	|      move.l d0,-(sp)
   10b74:	|      pea 5 <_start+0x5>
   10b78:	|      moveq #16,d0
   10b7a:	|      add.l sp,d0
   10b7c:	|      move.l d0,-(sp)
   10b7e:	|      jsr 1489c <getValueType>
   10b84:	|      lea 12(sp),sp
   10b88:	|      tst.w d0
   10b8a:	|  ,-- bne.s 10b90 <builtIn_setSoundLoopPoints+0x98>
   10b8c:	|  |   moveq #1,d0
   10b8e:	+--|-- bra.s 10bbc <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b90:	|  '-> moveq #24,d0
   10b92:	|      add.l 20(sp),d0
   10b96:	|      move.l d0,-(sp)
   10b98:	|      jsr 15220 <trimStack>
   10b9e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10ba0:	|      movea.l 4(sp),a0
   10ba4:	|      move.l (sp),d1
   10ba6:	|      move.l 8(sp),d0
   10baa:	|      move.l a0,-(sp)
   10bac:	|      move.l d1,-(sp)
   10bae:	|      move.l d0,-(sp)
   10bb0:	|      jsr d264 <setSoundLoop>
   10bb6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10bba:	|      moveq #2,d0
}
   10bbc:	'----> lea 12(sp),sp
   10bc0:	       rts

00010bc2 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10bc2:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10bc4:	          movea.l 12(sp),a0
   10bc8:	          movea.l 24(a0),a0
   10bcc:	          move.l (a0),d0
   10bce:	          moveq #5,d1
   10bd0:	          cmp.l d0,d1
   10bd2:	,-------- bne.s 10c16 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10bd4:	|         movea.l 12(sp),a0
   10bd8:	|         move.l 24(a0),d0
   10bdc:	|         move.l d0,-(sp)
   10bde:	|         pea 5 <_start+0x5>
   10be2:	|         move.l sp,d0
   10be4:	|         addq.l #8,d0
   10be6:	|         move.l d0,-(sp)
   10be8:	|         jsr 1489c <getValueType>
   10bee:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10bf2:	|         moveq #24,d0
   10bf4:	|         add.l 12(sp),d0
   10bf8:	|         move.l d0,-(sp)
   10bfa:	|         jsr 15220 <trimStack>
   10c00:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10c02:	|         move.l (sp),d0
   10c04:	|         move.l d0,-(sp)
   10c06:	|         jsr 16b26 <setFloor>
   10c0c:	|         addq.l #4,sp
   10c0e:	|         tst.w d0
   10c10:	|  ,----- bne.s 10c2c <builtIn_setFloor+0x6a>
   10c12:	|  |      moveq #1,d0
   10c14:	|  |  ,-- bra.s 10c2e <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c16:	'--|--|-> moveq #24,d0
   10c18:	   |  |   add.l 12(sp),d0
   10c1c:	   |  |   move.l d0,-(sp)
   10c1e:	   |  |   jsr 15220 <trimStack>
   10c24:	   |  |   addq.l #4,sp
		setFloorNull ();
   10c26:	   |  |   jsr 172a0 <setFloorNull>
	}
	return BR_CONTINUE;
   10c2c:	   '--|-> moveq #2,d0
}
   10c2e:	      '-> addq.l #4,sp
   10c30:	          rts

00010c32 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10c32:	jsr 163a2 <drawFloor>
	return BR_CONTINUE;
   10c38:	moveq #2,d0
}
   10c3a:	rts

00010c3c <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10c3c:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10c3e:	          movea.l 12(sp),a0
   10c42:	          movea.l 24(a0),a0
   10c46:	          move.l (a0),d0
   10c48:	          moveq #5,d1
   10c4a:	          cmp.l d0,d1
   10c4c:	,-------- bne.s 10c90 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10c4e:	|         movea.l 12(sp),a0
   10c52:	|         move.l 24(a0),d0
   10c56:	|         move.l d0,-(sp)
   10c58:	|         pea 5 <_start+0x5>
   10c5c:	|         move.l sp,d0
   10c5e:	|         addq.l #8,d0
   10c60:	|         move.l d0,-(sp)
   10c62:	|         jsr 1489c <getValueType>
   10c68:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10c6c:	|         moveq #24,d0
   10c6e:	|         add.l 12(sp),d0
   10c72:	|         move.l d0,-(sp)
   10c74:	|         jsr 15220 <trimStack>
   10c7a:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10c7c:	|         move.l (sp),d0
   10c7e:	|         move.l d0,-(sp)
   10c80:	|         jsr 8712 <setZBuffer>
   10c86:	|         addq.l #4,sp
   10c88:	|         tst.w d0
   10c8a:	|  ,----- bne.s 10ca6 <builtIn_setZBuffer+0x6a>
   10c8c:	|  |      moveq #1,d0
   10c8e:	|  |  ,-- bra.s 10ca8 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c90:	'--|--|-> moveq #24,d0
   10c92:	   |  |   add.l 12(sp),d0
   10c96:	   |  |   move.l d0,-(sp)
   10c98:	   |  |   jsr 15220 <trimStack>
   10c9e:	   |  |   addq.l #4,sp
		killZBuffer ();
   10ca0:	   |  |   jsr 86c6 <killZBuffer>
	}
	return BR_CONTINUE;
   10ca6:	   '--|-> moveq #2,d0
}
   10ca8:	      '-> addq.l #4,sp
   10caa:	          rts

00010cac <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10cac:	pea 19cfd <talk.c.490538ff+0x92>
   10cb2:	jsr 1737c <KPrintF>
   10cb8:	addq.l #4,sp
	return BR_CONTINUE;
   10cba:	moveq #2,d0
}
   10cbc:	rts

00010cbe <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cbe:	          movea.l 8(sp),a0
   10cc2:	          move.l 24(a0),d0
   10cc6:	          move.l d0,-(sp)
   10cc8:	          pea 1 <_start+0x1>
   10ccc:	          pea 1cc94 <speechMode>
   10cd2:	          jsr 1489c <getValueType>
   10cd8:	          lea 12(sp),sp
   10cdc:	          tst.w d0
   10cde:	      ,-- bne.s 10ce4 <builtIn_setSpeechMode+0x26>
   10ce0:	      |   moveq #1,d0
   10ce2:	,-----|-- bra.s 10d1c <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10ce4:	|     '-> moveq #24,d0
   10ce6:	|         add.l 8(sp),d0
   10cea:	|         move.l d0,-(sp)
   10cec:	|         jsr 15220 <trimStack>
   10cf2:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10cf4:	|         move.l 1cc94 <speechMode>,d0
   10cfa:	|     ,-- bmi.s 10d08 <builtIn_setSpeechMode+0x4a>
   10cfc:	|     |   move.l 1cc94 <speechMode>,d0
   10d02:	|     |   moveq #2,d1
   10d04:	|     |   cmp.l d0,d1
   10d06:	|  ,--|-- bge.s 10d1a <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10d08:	|  |  '-> pea 19d16 <talk.c.490538ff+0xab>
   10d0e:	|  |      jsr 1737c <KPrintF>
   10d14:	|  |      addq.l #4,sp
		return BR_ERROR;
   10d16:	|  |      moveq #1,d0
   10d18:	+--|----- bra.s 10d1c <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10d1a:	|  '----> moveq #2,d0
}
   10d1c:	'-------> rts

00010d1e <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10d1e:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10d20:	       jsr 3f94 <isThereAnySpeechGoingOn>
   10d26:	       move.l d0,(sp)
	if (i == -1) {
   10d28:	       moveq #-1,d0
   10d2a:	       cmp.l (sp),d0
   10d2c:	,----- bne.s 10d48 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10d2e:	|      moveq #28,d0
   10d30:	|      add.l 12(sp),d0
   10d34:	|      clr.l -(sp)
   10d36:	|      pea 1 <_start+0x1>
   10d3a:	|      move.l d0,-(sp)
   10d3c:	|      jsr 1518e <setVariable>
   10d42:	|      lea 12(sp),sp
   10d46:	|  ,-- bra.s 10d60 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10d48:	'--|-> moveq #28,d0
   10d4a:	   |   add.l 12(sp),d0
   10d4e:	   |   move.l (sp),-(sp)
   10d50:	   |   pea 7 <_start+0x7>
   10d54:	   |   move.l d0,-(sp)
   10d56:	   |   jsr 1518e <setVariable>
   10d5c:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10d60:	   '-> moveq #2,d0
}
   10d62:	       addq.l #4,sp
   10d64:	       rts

00010d66 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10d66:	jsr 6ac0 <killSpeechTimers>
	return BR_CONTINUE;
   10d6c:	moveq #2,d0
}
   10d6e:	rts

00010d70 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10d70:	       move.l 1ccda <overRegion>,d0
   10d76:	,----- beq.s 10da0 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10d78:	|      movea.l 1ccda <overRegion>,a0
   10d7e:	|      movea.l 28(a0),a0
   10d82:	|      move.l 4(a0),d1
   10d86:	|      moveq #28,d0
   10d88:	|      add.l 8(sp),d0
   10d8c:	|      move.l d1,-(sp)
   10d8e:	|      pea 7 <_start+0x7>
   10d92:	|      move.l d0,-(sp)
   10d94:	|      jsr 1518e <setVariable>
   10d9a:	|      lea 12(sp),sp
   10d9e:	|  ,-- bra.s 10db8 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10da0:	'--|-> moveq #28,d0
   10da2:	   |   add.l 8(sp),d0
   10da6:	   |   clr.l -(sp)
   10da8:	   |   pea 1 <_start+0x1>
   10dac:	   |   move.l d0,-(sp)
   10dae:	   |   jsr 1518e <setVariable>
   10db4:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10db8:	   '-> moveq #2,d0
}
   10dba:	       rts

00010dbc <builtIn_rename>:

builtIn(rename)
{
   10dbc:	       lea -16(sp),sp
   10dc0:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10dc2:	       movea.l 28(sp),a0
   10dc6:	       move.l 24(a0),d0
   10dca:	       move.l d0,-(sp)
   10dcc:	       jsr 14e72 <getTextFromAnyVar>
   10dd2:	       addq.l #4,sp
   10dd4:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10dd8:	   ,-- bne.s 10dde <builtIn_rename+0x22>
   10dda:	   |   moveq #1,d0
   10ddc:	,--|-- bra.s 10e58 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10dde:	|  '-> moveq #24,d0
   10de0:	|      add.l 28(sp),d0
   10de4:	|      move.l d0,-(sp)
   10de6:	|      jsr 15220 <trimStack>
   10dec:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10dee:	|      movea.l 28(sp),a0
   10df2:	|      move.l 24(a0),d0
   10df6:	|      move.l d0,-(sp)
   10df8:	|      pea 7 <_start+0x7>
   10dfc:	|      lea 12(sp),a0
   10e00:	|      move.l a0,-(sp)
   10e02:	|      jsr 1489c <getValueType>
   10e08:	|      lea 12(sp),sp
   10e0c:	|      tst.w d0
   10e0e:	|  ,-- bne.s 10e14 <builtIn_rename+0x58>
   10e10:	|  |   moveq #1,d0
   10e12:	+--|-- bra.s 10e58 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10e14:	|  '-> moveq #24,d0
   10e16:	|      add.l 28(sp),d0
   10e1a:	|      move.l d0,-(sp)
   10e1c:	|      jsr 15220 <trimStack>
   10e22:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10e24:	|      move.l 4(sp),d0
   10e28:	|      move.l d0,-(sp)
   10e2a:	|      jsr d5b0 <findObjectType>
   10e30:	|      addq.l #4,sp
   10e32:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10e36:	|      movea.l 12(sp),a0
   10e3a:	|      move.l (a0),8(sp)
   10e3e:	|      move.l 1cbca <SysBase>,d0
   10e44:	|      movea.l d0,a6
   10e46:	|      movea.l 8(sp),a1
   10e4a:	|      jsr -690(a6)
	o->screenName = newText;
   10e4e:	|      movea.l 12(sp),a0
   10e52:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10e56:	|      moveq #2,d0
}
   10e58:	'----> movea.l (sp)+,a6
   10e5a:	       lea 16(sp),sp
   10e5e:	       rts

00010e60 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10e60:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e64:	          movea.l 20(sp),a0
   10e68:	          move.l 24(a0),d0
   10e6c:	          move.l d0,-(sp)
   10e6e:	          pea 7 <_start+0x7>
   10e72:	          lea 8(sp),a0
   10e76:	          move.l a0,-(sp)
   10e78:	          jsr 1489c <getValueType>
   10e7e:	          lea 12(sp),sp
   10e82:	          tst.w d0
   10e84:	      ,-- bne.s 10e8c <builtIn_getObjectX+0x2c>
   10e86:	      |   moveq #1,d0
   10e88:	,-----|-- bra.w 10f28 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10e8c:	|     '-> moveq #24,d0
   10e8e:	|         add.l 20(sp),d0
   10e92:	|         move.l d0,-(sp)
   10e94:	|         jsr 15220 <trimStack>
   10e9a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e9c:	|         move.l (sp),d0
   10e9e:	|         move.l d0,-(sp)
   10ea0:	|         jsr a642 <findPerson>
   10ea6:	|         addq.l #4,sp
   10ea8:	|         move.l d0,8(sp)
	if (pers) {
   10eac:	|     ,-- beq.s 10eda <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10eae:	|     |   movea.l 8(sp),a0
   10eb2:	|     |   move.l (a0),d0
   10eb4:	|     |   move.l d0,-(sp)
   10eb6:	|     |   jsr 17746 <__fixsfsi>
   10ebc:	|     |   addq.l #4,sp
   10ebe:	|     |   move.l d0,d1
   10ec0:	|     |   moveq #28,d0
   10ec2:	|     |   add.l 20(sp),d0
   10ec6:	|     |   move.l d1,-(sp)
   10ec8:	|     |   pea 1 <_start+0x1>
   10ecc:	|     |   move.l d0,-(sp)
   10ece:	|     |   jsr 1518e <setVariable>
   10ed4:	|     |   lea 12(sp),sp
   10ed8:	|  ,--|-- bra.s 10f26 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10eda:	|  |  '-> move.l (sp),d0
   10edc:	|  |      move.l d0,-(sp)
   10ede:	|  |      jsr 15b5e <getRegionForObject>
   10ee4:	|  |      addq.l #4,sp
   10ee6:	|  |      move.l d0,4(sp)
		if (la) {
   10eea:	|  |  ,-- beq.s 10f0e <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10eec:	|  |  |   movea.l 4(sp),a0
   10ef0:	|  |  |   move.l 16(a0),d1
   10ef4:	|  |  |   moveq #28,d0
   10ef6:	|  |  |   add.l 20(sp),d0
   10efa:	|  |  |   move.l d1,-(sp)
   10efc:	|  |  |   pea 1 <_start+0x1>
   10f00:	|  |  |   move.l d0,-(sp)
   10f02:	|  |  |   jsr 1518e <setVariable>
   10f08:	|  |  |   lea 12(sp),sp
   10f0c:	|  +--|-- bra.s 10f26 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f0e:	|  |  '-> moveq #28,d0
   10f10:	|  |      add.l 20(sp),d0
   10f14:	|  |      clr.l -(sp)
   10f16:	|  |      pea 1 <_start+0x1>
   10f1a:	|  |      move.l d0,-(sp)
   10f1c:	|  |      jsr 1518e <setVariable>
   10f22:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f26:	|  '----> moveq #2,d0
}
   10f28:	'-------> lea 12(sp),sp
   10f2c:	          rts

00010f2e <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10f2e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f32:	          movea.l 20(sp),a0
   10f36:	          move.l 24(a0),d0
   10f3a:	          move.l d0,-(sp)
   10f3c:	          pea 7 <_start+0x7>
   10f40:	          lea 8(sp),a0
   10f44:	          move.l a0,-(sp)
   10f46:	          jsr 1489c <getValueType>
   10f4c:	          lea 12(sp),sp
   10f50:	          tst.w d0
   10f52:	      ,-- bne.s 10f5a <builtIn_getObjectY+0x2c>
   10f54:	      |   moveq #1,d0
   10f56:	,-----|-- bra.w 10ff8 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10f5a:	|     '-> moveq #24,d0
   10f5c:	|         add.l 20(sp),d0
   10f60:	|         move.l d0,-(sp)
   10f62:	|         jsr 15220 <trimStack>
   10f68:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f6a:	|         move.l (sp),d0
   10f6c:	|         move.l d0,-(sp)
   10f6e:	|         jsr a642 <findPerson>
   10f74:	|         addq.l #4,sp
   10f76:	|         move.l d0,8(sp)
	if (pers) {
   10f7a:	|     ,-- beq.s 10faa <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10f7c:	|     |   movea.l 8(sp),a0
   10f80:	|     |   move.l 4(a0),d0
   10f84:	|     |   move.l d0,-(sp)
   10f86:	|     |   jsr 17746 <__fixsfsi>
   10f8c:	|     |   addq.l #4,sp
   10f8e:	|     |   move.l d0,d1
   10f90:	|     |   moveq #28,d0
   10f92:	|     |   add.l 20(sp),d0
   10f96:	|     |   move.l d1,-(sp)
   10f98:	|     |   pea 1 <_start+0x1>
   10f9c:	|     |   move.l d0,-(sp)
   10f9e:	|     |   jsr 1518e <setVariable>
   10fa4:	|     |   lea 12(sp),sp
   10fa8:	|  ,--|-- bra.s 10ff6 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10faa:	|  |  '-> move.l (sp),d0
   10fac:	|  |      move.l d0,-(sp)
   10fae:	|  |      jsr 15b5e <getRegionForObject>
   10fb4:	|  |      addq.l #4,sp
   10fb6:	|  |      move.l d0,4(sp)
		if (la) {
   10fba:	|  |  ,-- beq.s 10fde <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10fbc:	|  |  |   movea.l 4(sp),a0
   10fc0:	|  |  |   move.l 20(a0),d1
   10fc4:	|  |  |   moveq #28,d0
   10fc6:	|  |  |   add.l 20(sp),d0
   10fca:	|  |  |   move.l d1,-(sp)
   10fcc:	|  |  |   pea 1 <_start+0x1>
   10fd0:	|  |  |   move.l d0,-(sp)
   10fd2:	|  |  |   jsr 1518e <setVariable>
   10fd8:	|  |  |   lea 12(sp),sp
   10fdc:	|  +--|-- bra.s 10ff6 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10fde:	|  |  '-> moveq #28,d0
   10fe0:	|  |      add.l 20(sp),d0
   10fe4:	|  |      clr.l -(sp)
   10fe6:	|  |      pea 1 <_start+0x1>
   10fea:	|  |      move.l d0,-(sp)
   10fec:	|  |      jsr 1518e <setVariable>
   10ff2:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10ff6:	|  '----> moveq #2,d0
}
   10ff8:	'-------> lea 12(sp),sp
   10ffc:	          rts

00010ffe <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10ffe:	       lea -32(sp),sp
   11002:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11006:	       movea.l 56(sp),a0
   1100a:	       move.l 24(a0),d0
   1100e:	       move.l d0,-(sp)
   11010:	       pea 1 <_start+0x1>
   11014:	       lea 28(sp),a0
   11018:	       move.l a0,-(sp)
   1101a:	       jsr 1489c <getValueType>
   11020:	       lea 12(sp),sp
   11024:	       tst.w d0
   11026:	   ,-- bne.s 1102e <builtIn_addScreenRegion+0x30>
   11028:	   |   moveq #1,d0
   1102a:	,--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1102e:	|  '-> moveq #24,d0
   11030:	|      add.l 56(sp),d0
   11034:	|      move.l d0,-(sp)
   11036:	|      jsr 15220 <trimStack>
   1103c:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1103e:	|      movea.l 56(sp),a0
   11042:	|      move.l 24(a0),d0
   11046:	|      move.l d0,-(sp)
   11048:	|      pea 1 <_start+0x1>
   1104c:	|      moveq #48,d0
   1104e:	|      add.l sp,d0
   11050:	|      move.l d0,-(sp)
   11052:	|      jsr 1489c <getValueType>
   11058:	|      lea 12(sp),sp
   1105c:	|      tst.w d0
   1105e:	|  ,-- bne.s 11066 <builtIn_addScreenRegion+0x68>
   11060:	|  |   moveq #1,d0
   11062:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11066:	|  '-> moveq #24,d0
   11068:	|      add.l 56(sp),d0
   1106c:	|      move.l d0,-(sp)
   1106e:	|      jsr 15220 <trimStack>
   11074:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11076:	|      movea.l 56(sp),a0
   1107a:	|      move.l 24(a0),d0
   1107e:	|      move.l d0,-(sp)
   11080:	|      pea 1 <_start+0x1>
   11084:	|      moveq #52,d0
   11086:	|      add.l sp,d0
   11088:	|      move.l d0,-(sp)
   1108a:	|      jsr 1489c <getValueType>
   11090:	|      lea 12(sp),sp
   11094:	|      tst.w d0
   11096:	|  ,-- bne.s 1109e <builtIn_addScreenRegion+0xa0>
   11098:	|  |   moveq #1,d0
   1109a:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1109e:	|  '-> moveq #24,d0
   110a0:	|      add.l 56(sp),d0
   110a4:	|      move.l d0,-(sp)
   110a6:	|      jsr 15220 <trimStack>
   110ac:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110ae:	|      movea.l 56(sp),a0
   110b2:	|      move.l 24(a0),d0
   110b6:	|      move.l d0,-(sp)
   110b8:	|      pea 1 <_start+0x1>
   110bc:	|      lea 32(sp),a0
   110c0:	|      move.l a0,-(sp)
   110c2:	|      jsr 1489c <getValueType>
   110c8:	|      lea 12(sp),sp
   110cc:	|      tst.w d0
   110ce:	|  ,-- bne.s 110d6 <builtIn_addScreenRegion+0xd8>
   110d0:	|  |   moveq #1,d0
   110d2:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110d6:	|  '-> moveq #24,d0
   110d8:	|      add.l 56(sp),d0
   110dc:	|      move.l d0,-(sp)
   110de:	|      jsr 15220 <trimStack>
   110e4:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110e6:	|      movea.l 56(sp),a0
   110ea:	|      move.l 24(a0),d0
   110ee:	|      move.l d0,-(sp)
   110f0:	|      pea 1 <_start+0x1>
   110f4:	|      lea 36(sp),a0
   110f8:	|      move.l a0,-(sp)
   110fa:	|      jsr 1489c <getValueType>
   11100:	|      lea 12(sp),sp
   11104:	|      tst.w d0
   11106:	|  ,-- bne.s 1110e <builtIn_addScreenRegion+0x110>
   11108:	|  |   moveq #1,d0
   1110a:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1110e:	|  '-> moveq #24,d0
   11110:	|      add.l 56(sp),d0
   11114:	|      move.l d0,-(sp)
   11116:	|      jsr 15220 <trimStack>
   1111c:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1111e:	|      movea.l 56(sp),a0
   11122:	|      move.l 24(a0),d0
   11126:	|      move.l d0,-(sp)
   11128:	|      pea 1 <_start+0x1>
   1112c:	|      lea 40(sp),a0
   11130:	|      move.l a0,-(sp)
   11132:	|      jsr 1489c <getValueType>
   11138:	|      lea 12(sp),sp
   1113c:	|      tst.w d0
   1113e:	|  ,-- bne.s 11146 <builtIn_addScreenRegion+0x148>
   11140:	|  |   moveq #1,d0
   11142:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11146:	|  '-> moveq #24,d0
   11148:	|      add.l 56(sp),d0
   1114c:	|      move.l d0,-(sp)
   1114e:	|      jsr 15220 <trimStack>
   11154:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11156:	|      movea.l 56(sp),a0
   1115a:	|      move.l 24(a0),d0
   1115e:	|      move.l d0,-(sp)
   11160:	|      pea 1 <_start+0x1>
   11164:	|      lea 44(sp),a0
   11168:	|      move.l a0,-(sp)
   1116a:	|      jsr 1489c <getValueType>
   11170:	|      lea 12(sp),sp
   11174:	|      tst.w d0
   11176:	|  ,-- bne.s 1117e <builtIn_addScreenRegion+0x180>
   11178:	|  |   moveq #1,d0
   1117a:	+--|-- bra.w 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1117e:	|  '-> moveq #24,d0
   11180:	|      add.l 56(sp),d0
   11184:	|      move.l d0,-(sp)
   11186:	|      jsr 15220 <trimStack>
   1118c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1118e:	|      movea.l 56(sp),a0
   11192:	|      move.l 24(a0),d0
   11196:	|      move.l d0,-(sp)
   11198:	|      pea 7 <_start+0x7>
   1119c:	|      lea 24(sp),a0
   111a0:	|      move.l a0,-(sp)
   111a2:	|      jsr 1489c <getValueType>
   111a8:	|      lea 12(sp),sp
   111ac:	|      tst.w d0
   111ae:	|  ,-- bne.s 111b4 <builtIn_addScreenRegion+0x1b6>
   111b0:	|  |   moveq #1,d0
   111b2:	+--|-- bra.s 11208 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111b4:	|  '-> moveq #24,d0
   111b6:	|      add.l 56(sp),d0
   111ba:	|      move.l d0,-(sp)
   111bc:	|      jsr 15220 <trimStack>
   111c2:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   111c4:	|      move.l 16(sp),d5
   111c8:	|      move.l 20(sp),d4
   111cc:	|      move.l 40(sp),d3
   111d0:	|      move.l 44(sp),d2
   111d4:	|      movea.l 24(sp),a1
   111d8:	|      movea.l 28(sp),a0
   111dc:	|      move.l 32(sp),d1
   111e0:	|      move.l 36(sp),d0
   111e4:	|      move.l d5,-(sp)
   111e6:	|      move.l d4,-(sp)
   111e8:	|      move.l d3,-(sp)
   111ea:	|      move.l d2,-(sp)
   111ec:	|      move.l a1,-(sp)
   111ee:	|      move.l a0,-(sp)
   111f0:	|      move.l d1,-(sp)
   111f2:	|      move.l d0,-(sp)
   111f4:	|      jsr 15a18 <addScreenRegion>
   111fa:	|      lea 32(sp),sp
   111fe:	|      tst.w d0
   11200:	|  ,-- beq.s 11206 <builtIn_addScreenRegion+0x208>
   11202:	|  |   moveq #2,d0
   11204:	+--|-- bra.s 11208 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11206:	|  '-> moveq #1,d0

}
   11208:	'----> movem.l (sp)+,d2-d5
   1120c:	       lea 32(sp),sp
   11210:	       rts

00011212 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11212:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11214:	       movea.l 12(sp),a0
   11218:	       move.l 24(a0),d0
   1121c:	       move.l d0,-(sp)
   1121e:	       pea 7 <_start+0x7>
   11222:	       move.l sp,d0
   11224:	       addq.l #8,d0
   11226:	       move.l d0,-(sp)
   11228:	       jsr 1489c <getValueType>
   1122e:	       lea 12(sp),sp
   11232:	       tst.w d0
   11234:	   ,-- bne.s 1123a <builtIn_removeScreenRegion+0x28>
   11236:	   |   moveq #1,d0
   11238:	,--|-- bra.s 11258 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   1123a:	|  '-> moveq #24,d0
   1123c:	|      add.l 12(sp),d0
   11240:	|      move.l d0,-(sp)
   11242:	|      jsr 15220 <trimStack>
   11248:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1124a:	|      move.l (sp),d0
   1124c:	|      move.l d0,-(sp)
   1124e:	|      jsr 15d06 <removeScreenRegion>
   11254:	|      addq.l #4,sp
	return BR_CONTINUE;
   11256:	|      moveq #2,d0
}
   11258:	'----> addq.l #4,sp
   1125a:	       rts

0001125c <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1125c:	jsr 15e8a <showBoxes>
	return BR_CONTINUE;
   11262:	moveq #2,d0
}
   11264:	rts

00011266 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11266:	jsr 15b8c <killAllRegions>
	return BR_CONTINUE;
   1126c:	moveq #2,d0
}
   1126e:	rts

00011270 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11270:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11274:	       movea.l 24(sp),a0
   11278:	       move.l 24(a0),d0
   1127c:	       move.l d0,-(sp)
   1127e:	       jsr 14548 <getCostumeFromVar>
   11284:	       addq.l #4,sp
   11286:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1128a:	   ,-- bne.s 11292 <builtIn_addCharacter+0x22>
   1128c:	   |   moveq #1,d0
   1128e:	,--|-- bra.w 1136e <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11292:	|  '-> moveq #24,d0
   11294:	|      add.l 24(sp),d0
   11298:	|      move.l d0,-(sp)
   1129a:	|      jsr 15220 <trimStack>
   112a0:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112a2:	|      movea.l 24(sp),a0
   112a6:	|      move.l 24(a0),d0
   112aa:	|      move.l d0,-(sp)
   112ac:	|      pea 1 <_start+0x1>
   112b0:	|      lea 12(sp),a0
   112b4:	|      move.l a0,-(sp)
   112b6:	|      jsr 1489c <getValueType>
   112bc:	|      lea 12(sp),sp
   112c0:	|      tst.w d0
   112c2:	|  ,-- bne.s 112ca <builtIn_addCharacter+0x5a>
   112c4:	|  |   moveq #1,d0
   112c6:	+--|-- bra.w 1136e <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112ca:	|  '-> moveq #24,d0
   112cc:	|      add.l 24(sp),d0
   112d0:	|      move.l d0,-(sp)
   112d2:	|      jsr 15220 <trimStack>
   112d8:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112da:	|      movea.l 24(sp),a0
   112de:	|      move.l 24(a0),d0
   112e2:	|      move.l d0,-(sp)
   112e4:	|      pea 1 <_start+0x1>
   112e8:	|      moveq #16,d0
   112ea:	|      add.l sp,d0
   112ec:	|      move.l d0,-(sp)
   112ee:	|      jsr 1489c <getValueType>
   112f4:	|      lea 12(sp),sp
   112f8:	|      tst.w d0
   112fa:	|  ,-- bne.s 11300 <builtIn_addCharacter+0x90>
   112fc:	|  |   moveq #1,d0
   112fe:	+--|-- bra.s 1136e <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11300:	|  '-> moveq #24,d0
   11302:	|      add.l 24(sp),d0
   11306:	|      move.l d0,-(sp)
   11308:	|      jsr 15220 <trimStack>
   1130e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11310:	|      movea.l 24(sp),a0
   11314:	|      move.l 24(a0),d0
   11318:	|      move.l d0,-(sp)
   1131a:	|      pea 7 <_start+0x7>
   1131e:	|      lea 8(sp),a0
   11322:	|      move.l a0,-(sp)
   11324:	|      jsr 1489c <getValueType>
   1132a:	|      lea 12(sp),sp
   1132e:	|      tst.w d0
   11330:	|  ,-- bne.s 11336 <builtIn_addCharacter+0xc6>
   11332:	|  |   moveq #1,d0
   11334:	+--|-- bra.s 1136e <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11336:	|  '-> moveq #24,d0
   11338:	|      add.l 24(sp),d0
   1133c:	|      move.l d0,-(sp)
   1133e:	|      jsr 15220 <trimStack>
   11344:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11346:	|      movea.l (sp),a0
   11348:	|      move.l 4(sp),d1
   1134c:	|      move.l 8(sp),d0
   11350:	|      move.l 12(sp),-(sp)
   11354:	|      move.l a0,-(sp)
   11356:	|      move.l d1,-(sp)
   11358:	|      move.l d0,-(sp)
   1135a:	|      jsr 923c <addPerson>
   11360:	|      lea 16(sp),sp
   11364:	|      tst.w d0
   11366:	|  ,-- beq.s 1136c <builtIn_addCharacter+0xfc>
   11368:	|  |   moveq #2,d0
   1136a:	+--|-- bra.s 1136e <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1136c:	|  '-> moveq #1,d0
}
   1136e:	'----> lea 16(sp),sp
   11372:	       rts

00011374 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11374:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11376:	       movea.l 12(sp),a0
   1137a:	       move.l 24(a0),d0
   1137e:	       move.l d0,-(sp)
   11380:	       pea 7 <_start+0x7>
   11384:	       move.l sp,d0
   11386:	       addq.l #8,d0
   11388:	       move.l d0,-(sp)
   1138a:	       jsr 1489c <getValueType>
   11390:	       lea 12(sp),sp
   11394:	       tst.w d0
   11396:	   ,-- bne.s 1139c <builtIn_hideCharacter+0x28>
   11398:	   |   moveq #1,d0
   1139a:	,--|-- bra.s 113bc <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1139c:	|  '-> moveq #24,d0
   1139e:	|      add.l 12(sp),d0
   113a2:	|      move.l d0,-(sp)
   113a4:	|      jsr 15220 <trimStack>
   113aa:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   113ac:	|      move.l (sp),d0
   113ae:	|      move.l d0,-(sp)
   113b0:	|      clr.l -(sp)
   113b2:	|      jsr bcd8 <setShown>
   113b8:	|      addq.l #8,sp
	return BR_CONTINUE;
   113ba:	|      moveq #2,d0
}
   113bc:	'----> addq.l #4,sp
   113be:	       rts

000113c0 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   113c0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113c2:	       movea.l 12(sp),a0
   113c6:	       move.l 24(a0),d0
   113ca:	       move.l d0,-(sp)
   113cc:	       pea 7 <_start+0x7>
   113d0:	       move.l sp,d0
   113d2:	       addq.l #8,d0
   113d4:	       move.l d0,-(sp)
   113d6:	       jsr 1489c <getValueType>
   113dc:	       lea 12(sp),sp
   113e0:	       tst.w d0
   113e2:	   ,-- bne.s 113e8 <builtIn_showCharacter+0x28>
   113e4:	   |   moveq #1,d0
   113e6:	,--|-- bra.s 1140a <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   113e8:	|  '-> moveq #24,d0
   113ea:	|      add.l 12(sp),d0
   113ee:	|      move.l d0,-(sp)
   113f0:	|      jsr 15220 <trimStack>
   113f6:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   113f8:	|      move.l (sp),d0
   113fa:	|      move.l d0,-(sp)
   113fc:	|      pea 1 <_start+0x1>
   11400:	|      jsr bcd8 <setShown>
   11406:	|      addq.l #8,sp
	return BR_CONTINUE;
   11408:	|      moveq #2,d0
}
   1140a:	'----> addq.l #4,sp
   1140c:	       rts

0001140e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1140e:	jsr 6ac0 <killSpeechTimers>
	killMostPeople ();
   11414:	jsr aad8 <killMostPeople>
	return BR_CONTINUE;
   1141a:	moveq #2,d0
}
   1141c:	rts

0001141e <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1141e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11420:	       movea.l 16(sp),a0
   11424:	       move.l 24(a0),d0
   11428:	       move.l d0,-(sp)
   1142a:	       pea 1 <_start+0x1>
   1142e:	       move.l sp,d0
   11430:	       addq.l #8,d0
   11432:	       move.l d0,-(sp)
   11434:	       jsr 1489c <getValueType>
   1143a:	       lea 12(sp),sp
   1143e:	       tst.w d0
   11440:	   ,-- bne.s 11446 <builtIn_setCharacterDrawMode+0x28>
   11442:	   |   moveq #1,d0
   11444:	,--|-- bra.s 114a0 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11446:	|  '-> moveq #24,d0
   11448:	|      add.l 16(sp),d0
   1144c:	|      move.l d0,-(sp)
   1144e:	|      jsr 15220 <trimStack>
   11454:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11456:	|      movea.l 16(sp),a0
   1145a:	|      move.l 24(a0),d0
   1145e:	|      move.l d0,-(sp)
   11460:	|      pea 7 <_start+0x7>
   11464:	|      moveq #12,d0
   11466:	|      add.l sp,d0
   11468:	|      move.l d0,-(sp)
   1146a:	|      jsr 1489c <getValueType>
   11470:	|      lea 12(sp),sp
   11474:	|      tst.w d0
   11476:	|  ,-- bne.s 1147c <builtIn_setCharacterDrawMode+0x5e>
   11478:	|  |   moveq #1,d0
   1147a:	+--|-- bra.s 114a0 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1147c:	|  '-> moveq #24,d0
   1147e:	|      add.l 16(sp),d0
   11482:	|      move.l d0,-(sp)
   11484:	|      jsr 15220 <trimStack>
   1148a:	|      addq.l #4,sp
	setDrawMode (di, obj);
   1148c:	|      move.l 4(sp),d1
   11490:	|      move.l (sp),d0
   11492:	|      move.l d1,-(sp)
   11494:	|      move.l d0,-(sp)
   11496:	|      jsr b616 <setDrawMode>
   1149c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1149e:	|      moveq #2,d0
}
   114a0:	'----> addq.l #8,sp
   114a2:	       rts

000114a4 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   114a4:	pea 19d54 <talk.c.490538ff+0xe9>
   114aa:	jsr 1737c <KPrintF>
   114b0:	addq.l #4,sp
	return BR_CONTINUE;
   114b2:	moveq #2,d0
}
   114b4:	rts

000114b6 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   114b6:	pea 19d87 <talk.c.490538ff+0x11c>
   114bc:	jsr 1737c <KPrintF>
   114c2:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   114c4:	moveq #2,d0
}
   114c6:	rts

000114c8 <builtIn_setScale>:

builtIn(setScale)
{
   114c8:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114ca:	       movea.l 16(sp),a0
   114ce:	       move.l 24(a0),d0
   114d2:	       move.l d0,-(sp)
   114d4:	       pea 1 <_start+0x1>
   114d8:	       move.l sp,d0
   114da:	       addq.l #8,d0
   114dc:	       move.l d0,-(sp)
   114de:	       jsr 1489c <getValueType>
   114e4:	       lea 12(sp),sp
   114e8:	       tst.w d0
   114ea:	   ,-- bne.s 114f0 <builtIn_setScale+0x28>
   114ec:	   |   moveq #1,d0
   114ee:	,--|-- bra.s 11552 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   114f0:	|  '-> moveq #24,d0
   114f2:	|      add.l 16(sp),d0
   114f6:	|      move.l d0,-(sp)
   114f8:	|      jsr 15220 <trimStack>
   114fe:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11500:	|      movea.l 16(sp),a0
   11504:	|      move.l 24(a0),d0
   11508:	|      move.l d0,-(sp)
   1150a:	|      pea 1 <_start+0x1>
   1150e:	|      moveq #12,d0
   11510:	|      add.l sp,d0
   11512:	|      move.l d0,-(sp)
   11514:	|      jsr 1489c <getValueType>
   1151a:	|      lea 12(sp),sp
   1151e:	|      tst.w d0
   11520:	|  ,-- bne.s 11526 <builtIn_setScale+0x5e>
   11522:	|  |   moveq #1,d0
   11524:	+--|-- bra.s 11552 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11526:	|  '-> moveq #24,d0
   11528:	|      add.l 16(sp),d0
   1152c:	|      move.l d0,-(sp)
   1152e:	|      jsr 15220 <trimStack>
   11534:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11536:	|      move.l (sp),d0
   11538:	|      move.l d0,d0
   1153a:	|      movea.w d0,a1
   1153c:	|      move.l 4(sp),d0
   11540:	|      move.l d0,d0
   11542:	|      movea.w d0,a0
   11544:	|      move.l a1,-(sp)
   11546:	|      move.l a0,-(sp)
   11548:	|      jsr bcb0 <setScale>
   1154e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11550:	|      moveq #2,d0
}
   11552:	'----> addq.l #8,sp
   11554:	       rts

00011556 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11556:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11558:	       movea.l 12(sp),a0
   1155c:	       move.l 24(a0),d0
   11560:	       move.l d0,-(sp)
   11562:	       pea 7 <_start+0x7>
   11566:	       move.l sp,d0
   11568:	       addq.l #8,d0
   1156a:	       move.l d0,-(sp)
   1156c:	       jsr 1489c <getValueType>
   11572:	       lea 12(sp),sp
   11576:	       tst.w d0
   11578:	   ,-- bne.s 1157e <builtIn_stopCharacter+0x28>
   1157a:	   |   moveq #1,d0
   1157c:	,--|-- bra.s 115b6 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1157e:	|  '-> moveq #24,d0
   11580:	|      add.l 12(sp),d0
   11584:	|      move.l d0,-(sp)
   11586:	|      jsr 15220 <trimStack>
   1158c:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1158e:	|      move.l (sp),d0
   11590:	|      move.l d0,-(sp)
   11592:	|      jsr bde4 <stopPerson>
   11598:	|      addq.l #4,sp
   1159a:	|      movea.w d0,a0
   1159c:	|      moveq #28,d0
   1159e:	|      add.l 12(sp),d0
   115a2:	|      move.l a0,-(sp)
   115a4:	|      pea 1 <_start+0x1>
   115a8:	|      move.l d0,-(sp)
   115aa:	|      jsr 1518e <setVariable>
   115b0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115b4:	|      moveq #2,d0
}
   115b6:	'----> addq.l #4,sp
   115b8:	       rts

000115ba <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   115ba:	pea 19dc1 <talk.c.490538ff+0x156>
   115c0:	jsr 1737c <KPrintF>
   115c6:	addq.l #4,sp
	return BR_CONTINUE;
   115c8:	moveq #2,d0
}
   115ca:	rts

000115cc <builtIn_animate>:

builtIn(animate)
{
   115cc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   115ce:	       movea.l 16(sp),a0
   115d2:	       move.l 24(a0),d0
   115d6:	       move.l d0,-(sp)
   115d8:	       jsr 14d74 <getAnimationFromVar>
   115de:	       addq.l #4,sp
   115e0:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   115e4:	   ,-- bne.s 115ea <builtIn_animate+0x1e>
   115e6:	   |   moveq #1,d0
   115e8:	,--|-- bra.s 11668 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   115ea:	|  '-> moveq #24,d0
   115ec:	|      add.l 16(sp),d0
   115f0:	|      move.l d0,-(sp)
   115f2:	|      jsr 15220 <trimStack>
   115f8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115fa:	|      movea.l 16(sp),a0
   115fe:	|      move.l 24(a0),d0
   11602:	|      move.l d0,-(sp)
   11604:	|      pea 7 <_start+0x7>
   11608:	|      move.l sp,d0
   1160a:	|      addq.l #8,d0
   1160c:	|      move.l d0,-(sp)
   1160e:	|      jsr 1489c <getValueType>
   11614:	|      lea 12(sp),sp
   11618:	|      tst.w d0
   1161a:	|  ,-- bne.s 11620 <builtIn_animate+0x54>
   1161c:	|  |   moveq #1,d0
   1161e:	+--|-- bra.s 11668 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11620:	|  '-> moveq #24,d0
   11622:	|      add.l 16(sp),d0
   11626:	|      move.l d0,-(sp)
   11628:	|      jsr 15220 <trimStack>
   1162e:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11630:	|      move.l (sp),d0
   11632:	|      move.l 4(sp),-(sp)
   11636:	|      move.l d0,-(sp)
   11638:	|      jsr 94b2 <animatePerson>
   1163e:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11640:	|      move.l 4(sp),-(sp)
   11644:	|      jsr be38 <timeForAnim>
   1164a:	|      addq.l #4,sp
   1164c:	|      move.l d0,d1
   1164e:	|      moveq #28,d0
   11650:	|      add.l 16(sp),d0
   11654:	|      move.l d1,-(sp)
   11656:	|      pea 1 <_start+0x1>
   1165a:	|      move.l d0,-(sp)
   1165c:	|      jsr 1518e <setVariable>
   11662:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11666:	|      moveq #2,d0
}
   11668:	'----> addq.l #8,sp
   1166a:	       rts

0001166c <builtIn_setCostume>:

builtIn(setCostume)
{
   1166c:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1166e:	       movea.l 16(sp),a0
   11672:	       move.l 24(a0),d0
   11676:	       move.l d0,-(sp)
   11678:	       jsr 14548 <getCostumeFromVar>
   1167e:	       addq.l #4,sp
   11680:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11684:	   ,-- bne.s 1168a <builtIn_setCostume+0x1e>
   11686:	   |   moveq #1,d0
   11688:	,--|-- bra.s 116e2 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1168a:	|  '-> moveq #24,d0
   1168c:	|      add.l 16(sp),d0
   11690:	|      move.l d0,-(sp)
   11692:	|      jsr 15220 <trimStack>
   11698:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1169a:	|      movea.l 16(sp),a0
   1169e:	|      move.l 24(a0),d0
   116a2:	|      move.l d0,-(sp)
   116a4:	|      pea 7 <_start+0x7>
   116a8:	|      move.l sp,d0
   116aa:	|      addq.l #8,d0
   116ac:	|      move.l d0,-(sp)
   116ae:	|      jsr 1489c <getValueType>
   116b4:	|      lea 12(sp),sp
   116b8:	|      tst.w d0
   116ba:	|  ,-- bne.s 116c0 <builtIn_setCostume+0x54>
   116bc:	|  |   moveq #1,d0
   116be:	+--|-- bra.s 116e2 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   116c0:	|  '-> moveq #24,d0
   116c2:	|      add.l 16(sp),d0
   116c6:	|      move.l d0,-(sp)
   116c8:	|      jsr 15220 <trimStack>
   116ce:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   116d0:	|      move.l (sp),d0
   116d2:	|      move.l 4(sp),-(sp)
   116d6:	|      move.l d0,-(sp)
   116d8:	|      jsr 94fc <animatePersonUsingPersona>
   116de:	|      addq.l #8,sp
	return BR_CONTINUE;
   116e0:	|      moveq #2,d0
}
   116e2:	'----> addq.l #8,sp
   116e4:	       rts

000116e6 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   116e6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116e8:	       movea.l 16(sp),a0
   116ec:	       move.l 24(a0),d0
   116f0:	       move.l d0,-(sp)
   116f2:	       pea 1 <_start+0x1>
   116f6:	       move.l sp,d0
   116f8:	       addq.l #8,d0
   116fa:	       move.l d0,-(sp)
   116fc:	       jsr 1489c <getValueType>
   11702:	       lea 12(sp),sp
   11706:	       tst.w d0
   11708:	   ,-- bne.s 1170e <builtIn_floatCharacter+0x28>
   1170a:	   |   moveq #1,d0
   1170c:	,--|-- bra.s 11782 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1170e:	|  '-> moveq #24,d0
   11710:	|      add.l 16(sp),d0
   11714:	|      move.l d0,-(sp)
   11716:	|      jsr 15220 <trimStack>
   1171c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1171e:	|      movea.l 16(sp),a0
   11722:	|      move.l 24(a0),d0
   11726:	|      move.l d0,-(sp)
   11728:	|      pea 7 <_start+0x7>
   1172c:	|      moveq #12,d0
   1172e:	|      add.l sp,d0
   11730:	|      move.l d0,-(sp)
   11732:	|      jsr 1489c <getValueType>
   11738:	|      lea 12(sp),sp
   1173c:	|      tst.w d0
   1173e:	|  ,-- bne.s 11744 <builtIn_floatCharacter+0x5e>
   11740:	|  |   moveq #1,d0
   11742:	+--|-- bra.s 11782 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11744:	|  '-> moveq #24,d0
   11746:	|      add.l 16(sp),d0
   1174a:	|      move.l d0,-(sp)
   1174c:	|      jsr 15220 <trimStack>
   11752:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11754:	|      move.l 4(sp),d1
   11758:	|      move.l (sp),d0
   1175a:	|      move.l d1,-(sp)
   1175c:	|      move.l d0,-(sp)
   1175e:	|      jsr a68c <floatCharacter>
   11764:	|      addq.l #8,sp
   11766:	|      movea.w d0,a0
   11768:	|      moveq #28,d0
   1176a:	|      add.l 16(sp),d0
   1176e:	|      move.l a0,-(sp)
   11770:	|      pea 1 <_start+0x1>
   11774:	|      move.l d0,-(sp)
   11776:	|      jsr 1518e <setVariable>
   1177c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11780:	|      moveq #2,d0
}
   11782:	'----> addq.l #8,sp
   11784:	       rts

00011786 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11786:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11788:	       movea.l 16(sp),a0
   1178c:	       move.l 24(a0),d0
   11790:	       move.l d0,-(sp)
   11792:	       pea 1 <_start+0x1>
   11796:	       move.l sp,d0
   11798:	       addq.l #8,d0
   1179a:	       move.l d0,-(sp)
   1179c:	       jsr 1489c <getValueType>
   117a2:	       lea 12(sp),sp
   117a6:	       tst.w d0
   117a8:	   ,-- bne.s 117ae <builtIn_setCharacterWalkSpeed+0x28>
   117aa:	   |   moveq #1,d0
   117ac:	,--|-- bra.s 11822 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   117ae:	|  '-> moveq #24,d0
   117b0:	|      add.l 16(sp),d0
   117b4:	|      move.l d0,-(sp)
   117b6:	|      jsr 15220 <trimStack>
   117bc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117be:	|      movea.l 16(sp),a0
   117c2:	|      move.l 24(a0),d0
   117c6:	|      move.l d0,-(sp)
   117c8:	|      pea 7 <_start+0x7>
   117cc:	|      moveq #12,d0
   117ce:	|      add.l sp,d0
   117d0:	|      move.l d0,-(sp)
   117d2:	|      jsr 1489c <getValueType>
   117d8:	|      lea 12(sp),sp
   117dc:	|      tst.w d0
   117de:	|  ,-- bne.s 117e4 <builtIn_setCharacterWalkSpeed+0x5e>
   117e0:	|  |   moveq #1,d0
   117e2:	+--|-- bra.s 11822 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   117e4:	|  '-> moveq #24,d0
   117e6:	|      add.l 16(sp),d0
   117ea:	|      move.l d0,-(sp)
   117ec:	|      jsr 15220 <trimStack>
   117f2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   117f4:	|      move.l 4(sp),d1
   117f8:	|      move.l (sp),d0
   117fa:	|      move.l d1,-(sp)
   117fc:	|      move.l d0,-(sp)
   117fe:	|      jsr bc4c <setCharacterWalkSpeed>
   11804:	|      addq.l #8,sp
   11806:	|      movea.w d0,a0
   11808:	|      moveq #28,d0
   1180a:	|      add.l 16(sp),d0
   1180e:	|      move.l a0,-(sp)
   11810:	|      pea 1 <_start+0x1>
   11814:	|      move.l d0,-(sp)
   11816:	|      jsr 1518e <setVariable>
   1181c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11820:	|      moveq #2,d0
}
   11822:	'----> addq.l #8,sp
   11824:	       rts

00011826 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11826:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11828:	       movea.l 16(sp),a0
   1182c:	       move.l 24(a0),d0
   11830:	       move.l d0,-(sp)
   11832:	       pea 1 <_start+0x1>
   11836:	       move.l sp,d0
   11838:	       addq.l #8,d0
   1183a:	       move.l d0,-(sp)
   1183c:	       jsr 1489c <getValueType>
   11842:	       lea 12(sp),sp
   11846:	       tst.w d0
   11848:	   ,-- bne.s 1184e <builtIn_turnCharacter+0x28>
   1184a:	   |   moveq #1,d0
   1184c:	,--|-- bra.s 118c2 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1184e:	|  '-> moveq #24,d0
   11850:	|      add.l 16(sp),d0
   11854:	|      move.l d0,-(sp)
   11856:	|      jsr 15220 <trimStack>
   1185c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1185e:	|      movea.l 16(sp),a0
   11862:	|      move.l 24(a0),d0
   11866:	|      move.l d0,-(sp)
   11868:	|      pea 7 <_start+0x7>
   1186c:	|      moveq #12,d0
   1186e:	|      add.l sp,d0
   11870:	|      move.l d0,-(sp)
   11872:	|      jsr 1489c <getValueType>
   11878:	|      lea 12(sp),sp
   1187c:	|      tst.w d0
   1187e:	|  ,-- bne.s 11884 <builtIn_turnCharacter+0x5e>
   11880:	|  |   moveq #1,d0
   11882:	+--|-- bra.s 118c2 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11884:	|  '-> moveq #24,d0
   11886:	|      add.l 16(sp),d0
   1188a:	|      move.l d0,-(sp)
   1188c:	|      jsr 15220 <trimStack>
   11892:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11894:	|      move.l (sp),d1
   11896:	|      move.l 4(sp),d0
   1189a:	|      move.l d1,-(sp)
   1189c:	|      move.l d0,-(sp)
   1189e:	|      jsr bef0 <turnPersonToFace>
   118a4:	|      addq.l #8,sp
   118a6:	|      movea.w d0,a0
   118a8:	|      moveq #28,d0
   118aa:	|      add.l 16(sp),d0
   118ae:	|      move.l a0,-(sp)
   118b0:	|      pea 1 <_start+0x1>
   118b4:	|      move.l d0,-(sp)
   118b6:	|      jsr 1518e <setVariable>
   118bc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118c0:	|      moveq #2,d0
}
   118c2:	'----> addq.l #8,sp
   118c4:	       rts

000118c6 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   118c6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118c8:	       movea.l 16(sp),a0
   118cc:	       move.l 24(a0),d0
   118d0:	       move.l d0,-(sp)
   118d2:	       pea 1 <_start+0x1>
   118d6:	       move.l sp,d0
   118d8:	       addq.l #8,d0
   118da:	       move.l d0,-(sp)
   118dc:	       jsr 1489c <getValueType>
   118e2:	       lea 12(sp),sp
   118e6:	       tst.w d0
   118e8:	   ,-- bne.s 118ee <builtIn_setCharacterExtra+0x28>
   118ea:	   |   moveq #1,d0
   118ec:	,--|-- bra.s 11962 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   118ee:	|  '-> moveq #24,d0
   118f0:	|      add.l 16(sp),d0
   118f4:	|      move.l d0,-(sp)
   118f6:	|      jsr 15220 <trimStack>
   118fc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118fe:	|      movea.l 16(sp),a0
   11902:	|      move.l 24(a0),d0
   11906:	|      move.l d0,-(sp)
   11908:	|      pea 7 <_start+0x7>
   1190c:	|      moveq #12,d0
   1190e:	|      add.l sp,d0
   11910:	|      move.l d0,-(sp)
   11912:	|      jsr 1489c <getValueType>
   11918:	|      lea 12(sp),sp
   1191c:	|      tst.w d0
   1191e:	|  ,-- bne.s 11924 <builtIn_setCharacterExtra+0x5e>
   11920:	|  |   moveq #1,d0
   11922:	+--|-- bra.s 11962 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11924:	|  '-> moveq #24,d0
   11926:	|      add.l 16(sp),d0
   1192a:	|      move.l d0,-(sp)
   1192c:	|      jsr 15220 <trimStack>
   11932:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11934:	|      move.l (sp),d1
   11936:	|      move.l 4(sp),d0
   1193a:	|      move.l d1,-(sp)
   1193c:	|      move.l d0,-(sp)
   1193e:	|      jsr bc7a <setPersonExtra>
   11944:	|      addq.l #8,sp
   11946:	|      movea.w d0,a0
   11948:	|      moveq #28,d0
   1194a:	|      add.l 16(sp),d0
   1194e:	|      move.l a0,-(sp)
   11950:	|      pea 1 <_start+0x1>
   11954:	|      move.l d0,-(sp)
   11956:	|      jsr 1518e <setVariable>
   1195c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11960:	|      moveq #2,d0
}
   11962:	'----> addq.l #8,sp
   11964:	       rts

00011966 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11966:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11968:	       movea.l 12(sp),a0
   1196c:	       move.l 24(a0),d0
   11970:	       move.l d0,-(sp)
   11972:	       pea 7 <_start+0x7>
   11976:	       move.l sp,d0
   11978:	       addq.l #8,d0
   1197a:	       move.l d0,-(sp)
   1197c:	       jsr 1489c <getValueType>
   11982:	       lea 12(sp),sp
   11986:	       tst.w d0
   11988:	   ,-- bne.s 1198e <builtIn_removeCharacter+0x28>
   1198a:	   |   moveq #1,d0
   1198c:	,--|-- bra.s 119ac <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   1198e:	|  '-> moveq #24,d0
   11990:	|      add.l 12(sp),d0
   11994:	|      move.l d0,-(sp)
   11996:	|      jsr 15220 <trimStack>
   1199c:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1199e:	|      move.l (sp),d0
   119a0:	|      move.l d0,-(sp)
   119a2:	|      jsr ae7a <removeOneCharacter>
   119a8:	|      addq.l #4,sp
	return BR_CONTINUE;
   119aa:	|      moveq #2,d0
}
   119ac:	'----> addq.l #4,sp
   119ae:	       rts

000119b0 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   119b0:	                lea -28(sp),sp
   119b4:	                move.l d2,-(sp)
   119b6:	                move.l 44(sp),d1
   119ba:	                move.l 48(sp),d0
   119be:	                move.w d1,d1
   119c0:	                move.w d1,6(sp)
   119c4:	                move.w d0,d0
   119c6:	                move.w d0,4(sp)
	switch (numParams) {
   119ca:	                moveq #2,d0
   119cc:	                cmp.l 36(sp),d0
   119d0:	      ,-------- beq.w 11b12 <moveChr+0x162>
   119d4:	      |         moveq #3,d0
   119d6:	      |         cmp.l 36(sp),d0
   119da:	,-----|-------- bne.w 11c46 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119de:	|     |         movea.l 40(sp),a0
   119e2:	|     |         move.l 24(a0),d0
   119e6:	|     |         move.l d0,-(sp)
   119e8:	|     |         pea 1 <_start+0x1>
   119ec:	|     |         lea 20(sp),a0
   119f0:	|     |         move.l a0,-(sp)
   119f2:	|     |         jsr 1489c <getValueType>
   119f8:	|     |         lea 12(sp),sp
   119fc:	|     |         tst.w d0
   119fe:	|     |     ,-- bne.s 11a06 <moveChr+0x56>
   11a00:	|     |     |   moveq #1,d0
   11a02:	|  ,--|-----|-- bra.w 11c56 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a06:	|  |  |     '-> moveq #24,d0
   11a08:	|  |  |         add.l 40(sp),d0
   11a0c:	|  |  |         move.l d0,-(sp)
   11a0e:	|  |  |         jsr 15220 <trimStack>
   11a14:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a16:	|  |  |         movea.l 40(sp),a0
   11a1a:	|  |  |         move.l 24(a0),d0
   11a1e:	|  |  |         move.l d0,-(sp)
   11a20:	|  |  |         pea 1 <_start+0x1>
   11a24:	|  |  |         lea 24(sp),a0
   11a28:	|  |  |         move.l a0,-(sp)
   11a2a:	|  |  |         jsr 1489c <getValueType>
   11a30:	|  |  |         lea 12(sp),sp
   11a34:	|  |  |         tst.w d0
   11a36:	|  |  |     ,-- bne.s 11a3e <moveChr+0x8e>
   11a38:	|  |  |     |   moveq #1,d0
   11a3a:	|  +--|-----|-- bra.w 11c56 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a3e:	|  |  |     '-> moveq #24,d0
   11a40:	|  |  |         add.l 40(sp),d0
   11a44:	|  |  |         move.l d0,-(sp)
   11a46:	|  |  |         jsr 15220 <trimStack>
   11a4c:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a4e:	|  |  |         movea.l 40(sp),a0
   11a52:	|  |  |         move.l 24(a0),d0
   11a56:	|  |  |         move.l d0,-(sp)
   11a58:	|  |  |         pea 7 <_start+0x7>
   11a5c:	|  |  |         lea 16(sp),a0
   11a60:	|  |  |         move.l a0,-(sp)
   11a62:	|  |  |         jsr 1489c <getValueType>
   11a68:	|  |  |         lea 12(sp),sp
   11a6c:	|  |  |         tst.w d0
   11a6e:	|  |  |     ,-- bne.s 11a76 <moveChr+0xc6>
   11a70:	|  |  |     |   moveq #1,d0
   11a72:	|  +--|-----|-- bra.w 11c56 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a76:	|  |  |     '-> moveq #24,d0
   11a78:	|  |  |         add.l 40(sp),d0
   11a7c:	|  |  |         move.l d0,-(sp)
   11a7e:	|  |  |         jsr 15220 <trimStack>
   11a84:	|  |  |         addq.l #4,sp

			if (force) {
   11a86:	|  |  |         tst.w 6(sp)
   11a8a:	|  |  |     ,-- beq.s 11aba <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a8c:	|  |  |     |   movea.l 8(sp),a0
   11a90:	|  |  |     |   move.l 12(sp),d1
   11a94:	|  |  |     |   move.l 16(sp),d0
   11a98:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4962>
   11a9c:	|  |  |     |   move.l 44(sp),-(sp)
   11aa0:	|  |  |     |   move.l a0,-(sp)
   11aa2:	|  |  |     |   move.l d1,-(sp)
   11aa4:	|  |  |     |   move.l d0,-(sp)
   11aa6:	|  |  |     |   jsr a6b0 <forceWalkingPerson>
   11aac:	|  |  |     |   lea 20(sp),sp
   11ab0:	|  |  |     |   tst.w d0
   11ab2:	|  |  |  ,--|-- beq.s 11b0c <moveChr+0x15c>
   11ab4:	|  |  |  |  |   moveq #3,d0
   11ab6:	|  +--|--|--|-- bra.w 11c56 <moveChr+0x2a6>
			} else if (immediate) {
   11aba:	|  |  |  |  '-> tst.w 4(sp)
   11abe:	|  |  |  |  ,-- beq.s 11ade <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11ac0:	|  |  |  |  |   movea.l 8(sp),a0
   11ac4:	|  |  |  |  |   move.l 12(sp),d1
   11ac8:	|  |  |  |  |   move.l 16(sp),d0
   11acc:	|  |  |  |  |   move.l a0,-(sp)
   11ace:	|  |  |  |  |   move.l d1,-(sp)
   11ad0:	|  |  |  |  |   move.l d0,-(sp)
   11ad2:	|  |  |  |  |   jsr a9c6 <jumpPerson>
   11ad8:	|  |  |  |  |   lea 12(sp),sp
   11adc:	|  |  |  +--|-- bra.s 11b0c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11ade:	|  |  |  |  '-> movea.l 8(sp),a0
   11ae2:	|  |  |  |      move.l 12(sp),d1
   11ae6:	|  |  |  |      move.l 16(sp),d0
   11aea:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4962>
   11aee:	|  |  |  |      move.l 44(sp),-(sp)
   11af2:	|  |  |  |      move.l a0,-(sp)
   11af4:	|  |  |  |      move.l d1,-(sp)
   11af6:	|  |  |  |      move.l d0,-(sp)
   11af8:	|  |  |  |      jsr ab96 <makeWalkingPerson>
   11afe:	|  |  |  |      lea 20(sp),sp
   11b02:	|  |  |  |      tst.w d0
   11b04:	|  |  |  +----- beq.s 11b0c <moveChr+0x15c>
   11b06:	|  |  |  |      moveq #3,d0
   11b08:	|  +--|--|----- bra.w 11c56 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b0c:	|  |  |  '----> moveq #2,d0
   11b0e:	|  +--|-------- bra.w 11c56 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b12:	|  |  '-------> movea.l 40(sp),a0
   11b16:	|  |            move.l 24(a0),d0
   11b1a:	|  |            move.l d0,-(sp)
   11b1c:	|  |            pea 7 <_start+0x7>
   11b20:	|  |            moveq #32,d0
   11b22:	|  |            add.l sp,d0
   11b24:	|  |            move.l d0,-(sp)
   11b26:	|  |            jsr 1489c <getValueType>
   11b2c:	|  |            lea 12(sp),sp
   11b30:	|  |            tst.w d0
   11b32:	|  |        ,-- bne.s 11b3a <moveChr+0x18a>
   11b34:	|  |        |   moveq #1,d0
   11b36:	|  +--------|-- bra.w 11c56 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b3a:	|  |        '-> moveq #24,d0
   11b3c:	|  |            add.l 40(sp),d0
   11b40:	|  |            move.l d0,-(sp)
   11b42:	|  |            jsr 15220 <trimStack>
   11b48:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b4a:	|  |            movea.l 40(sp),a0
   11b4e:	|  |            move.l 24(a0),d0
   11b52:	|  |            move.l d0,-(sp)
   11b54:	|  |            pea 7 <_start+0x7>
   11b58:	|  |            lea 28(sp),a0
   11b5c:	|  |            move.l a0,-(sp)
   11b5e:	|  |            jsr 1489c <getValueType>
   11b64:	|  |            lea 12(sp),sp
   11b68:	|  |            tst.w d0
   11b6a:	|  |        ,-- bne.s 11b72 <moveChr+0x1c2>
   11b6c:	|  |        |   moveq #1,d0
   11b6e:	|  +--------|-- bra.w 11c56 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b72:	|  |        '-> moveq #24,d0
   11b74:	|  |            add.l 40(sp),d0
   11b78:	|  |            move.l d0,-(sp)
   11b7a:	|  |            jsr 15220 <trimStack>
   11b80:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11b82:	|  |            move.l 24(sp),d0
   11b86:	|  |            move.l d0,-(sp)
   11b88:	|  |            jsr 15b5e <getRegionForObject>
   11b8e:	|  |            addq.l #4,sp
   11b90:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11b94:	|  |        ,-- bne.s 11b9c <moveChr+0x1ec>
   11b96:	|  |        |   moveq #2,d0
   11b98:	|  +--------|-- bra.w 11c56 <moveChr+0x2a6>

			if (force)
   11b9c:	|  |        '-> tst.w 6(sp)
   11ba0:	|  |        ,-- beq.s 11bdc <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ba2:	|  |        |   movea.l 28(sp),a0
   11ba6:	|  |        |   move.l 24(a0),d2
   11baa:	|  |        |   movea.l 20(sp),a1
   11bae:	|  |        |   movea.l 28(sp),a0
   11bb2:	|  |        |   move.l 20(a0),d1
   11bb6:	|  |        |   movea.l 28(sp),a0
   11bba:	|  |        |   move.l 16(a0),d0
   11bbe:	|  |        |   move.l d2,-(sp)
   11bc0:	|  |        |   move.l 44(sp),-(sp)
   11bc4:	|  |        |   move.l a1,-(sp)
   11bc6:	|  |        |   move.l d1,-(sp)
   11bc8:	|  |        |   move.l d0,-(sp)
   11bca:	|  |        |   jsr a6b0 <forceWalkingPerson>
   11bd0:	|  |        |   lea 20(sp),sp
   11bd4:	|  |        |   tst.w d0
   11bd6:	|  |     ,--|-- beq.s 11c42 <moveChr+0x292>
   11bd8:	|  |     |  |   moveq #3,d0
   11bda:	|  +-----|--|-- bra.s 11c56 <moveChr+0x2a6>
			}
			else if (immediate)
   11bdc:	|  |     |  '-> tst.w 4(sp)
   11be0:	|  |     |  ,-- beq.s 11c08 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11be2:	|  |     |  |   movea.l 20(sp),a1
   11be6:	|  |     |  |   movea.l 28(sp),a0
   11bea:	|  |     |  |   move.l 20(a0),d1
   11bee:	|  |     |  |   movea.l 28(sp),a0
   11bf2:	|  |     |  |   move.l 16(a0),d0
   11bf6:	|  |     |  |   move.l a1,-(sp)
   11bf8:	|  |     |  |   move.l d1,-(sp)
   11bfa:	|  |     |  |   move.l d0,-(sp)
   11bfc:	|  |     |  |   jsr a9c6 <jumpPerson>
   11c02:	|  |     |  |   lea 12(sp),sp
   11c06:	|  |     +--|-- bra.s 11c42 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c08:	|  |     |  '-> movea.l 28(sp),a0
   11c0c:	|  |     |      move.l 24(a0),d2
   11c10:	|  |     |      movea.l 20(sp),a1
   11c14:	|  |     |      movea.l 28(sp),a0
   11c18:	|  |     |      move.l 20(a0),d1
   11c1c:	|  |     |      movea.l 28(sp),a0
   11c20:	|  |     |      move.l 16(a0),d0
   11c24:	|  |     |      move.l d2,-(sp)
   11c26:	|  |     |      move.l 44(sp),-(sp)
   11c2a:	|  |     |      move.l a1,-(sp)
   11c2c:	|  |     |      move.l d1,-(sp)
   11c2e:	|  |     |      move.l d0,-(sp)
   11c30:	|  |     |      jsr ab96 <makeWalkingPerson>
   11c36:	|  |     |      lea 20(sp),sp
   11c3a:	|  |     |      tst.w d0
   11c3c:	|  |     +----- beq.s 11c42 <moveChr+0x292>
   11c3e:	|  |     |      moveq #3,d0
   11c40:	|  +-----|----- bra.s 11c56 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11c42:	|  |     '----> moveq #2,d0
   11c44:	|  +----------- bra.s 11c56 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11c46:	'--|----------> pea 19ddf <talk.c.490538ff+0x174>
   11c4c:	   |            jsr 1737c <KPrintF>
   11c52:	   |            addq.l #4,sp
			return BR_ERROR;
   11c54:	   |            moveq #1,d0
	}
}
   11c56:	   '----------> move.l (sp)+,d2
   11c58:	                lea 28(sp),sp
   11c5c:	                rts

00011c5e <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11c5e:	clr.l -(sp)
   11c60:	clr.l -(sp)
   11c62:	move.l 16(sp),-(sp)
   11c66:	move.l 16(sp),-(sp)
   11c6a:	jsr 119b0 <moveChr>
   11c70:	lea 16(sp),sp
}
   11c74:	rts

00011c76 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11c76:	clr.l -(sp)
   11c78:	pea 1 <_start+0x1>
   11c7c:	move.l 16(sp),-(sp)
   11c80:	move.l 16(sp),-(sp)
   11c84:	jsr 119b0 <moveChr>
   11c8a:	lea 16(sp),sp
}
   11c8e:	rts

00011c90 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11c90:	pea 1 <_start+0x1>
   11c94:	clr.l -(sp)
   11c96:	move.l 16(sp),-(sp)
   11c9a:	move.l 16(sp),-(sp)
   11c9e:	jsr 119b0 <moveChr>
   11ca4:	lea 16(sp),sp
}
   11ca8:	rts

00011caa <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11caa:	jsr 8334 <clearStatusBar>
	return BR_CONTINUE;
   11cb0:	moveq #2,d0
}
   11cb2:	rts

00011cb4 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11cb4:	jsr 83dc <killLastStatus>
	return BR_CONTINUE;
   11cba:	moveq #2,d0
}
   11cbc:	rts

00011cbe <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11cbe:	jsr 82ca <addStatusBar>
	return BR_CONTINUE;
   11cc4:	moveq #2,d0
}
   11cc6:	rts

00011cc8 <builtIn_statusText>:

builtIn(statusText)
{
   11cc8:	       subq.l #8,sp
   11cca:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11ccc:	       movea.l 20(sp),a0
   11cd0:	       move.l 24(a0),d0
   11cd4:	       move.l d0,-(sp)
   11cd6:	       jsr 14e72 <getTextFromAnyVar>
   11cdc:	       addq.l #4,sp
   11cde:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11ce2:	   ,-- bne.s 11ce8 <builtIn_statusText+0x20>
   11ce4:	   |   moveq #1,d0
   11ce6:	,--|-- bra.s 11d1c <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11ce8:	|  '-> moveq #24,d0
   11cea:	|      add.l 20(sp),d0
   11cee:	|      move.l d0,-(sp)
   11cf0:	|      jsr 15220 <trimStack>
   11cf6:	|      addq.l #4,sp
	setStatusBar(newText);
   11cf8:	|      move.l 8(sp),-(sp)
   11cfc:	|      jsr 865c <setStatusBar>
   11d02:	|      addq.l #4,sp
	FreeVec(newText);
   11d04:	|      move.l 8(sp),4(sp)
   11d0a:	|      move.l 1cbca <SysBase>,d0
   11d10:	|      movea.l d0,a6
   11d12:	|      movea.l 4(sp),a1
   11d16:	|      jsr -690(a6)
	return BR_CONTINUE;
   11d1a:	|      moveq #2,d0
}
   11d1c:	'----> movea.l (sp)+,a6
   11d1e:	       addq.l #8,sp
   11d20:	       rts

00011d22 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11d22:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d24:	       movea.l 12(sp),a0
   11d28:	       move.l 24(a0),d0
   11d2c:	       move.l d0,-(sp)
   11d2e:	       pea 1 <_start+0x1>
   11d32:	       move.l sp,d0
   11d34:	       addq.l #8,d0
   11d36:	       move.l d0,-(sp)
   11d38:	       jsr 1489c <getValueType>
   11d3e:	       lea 12(sp),sp
   11d42:	       tst.w d0
   11d44:	   ,-- bne.s 11d4a <builtIn_lightStatus+0x28>
   11d46:	   |   moveq #1,d0
   11d48:	,--|-- bra.s 11d68 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11d4a:	|  '-> moveq #24,d0
   11d4c:	|      add.l 12(sp),d0
   11d50:	|      move.l d0,-(sp)
   11d52:	|      jsr 15220 <trimStack>
   11d58:	|      addq.l #4,sp
	setLitStatus (val);
   11d5a:	|      move.l (sp),d0
   11d5c:	|      move.l d0,-(sp)
   11d5e:	|      jsr 864c <setLitStatus>
   11d64:	|      addq.l #4,sp
	return BR_CONTINUE;
   11d66:	|      moveq #2,d0
}
   11d68:	'----> addq.l #4,sp
   11d6a:	       rts

00011d6c <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11d6c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d6e:	       movea.l 16(sp),a0
   11d72:	       move.l 24(a0),d0
   11d76:	       move.l d0,-(sp)
   11d78:	       pea 1 <_start+0x1>
   11d7c:	       move.l sp,d0
   11d7e:	       addq.l #8,d0
   11d80:	       move.l d0,-(sp)
   11d82:	       jsr 1489c <getValueType>
   11d88:	       lea 12(sp),sp
   11d8c:	       tst.w d0
   11d8e:	   ,-- bne.s 11d94 <builtIn_positionStatus+0x28>
   11d90:	   |   moveq #1,d0
   11d92:	,--|-- bra.s 11dee <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d94:	|  '-> moveq #24,d0
   11d96:	|      add.l 16(sp),d0
   11d9a:	|      move.l d0,-(sp)
   11d9c:	|      jsr 15220 <trimStack>
   11da2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11da4:	|      movea.l 16(sp),a0
   11da8:	|      move.l 24(a0),d0
   11dac:	|      move.l d0,-(sp)
   11dae:	|      pea 1 <_start+0x1>
   11db2:	|      moveq #12,d0
   11db4:	|      add.l sp,d0
   11db6:	|      move.l d0,-(sp)
   11db8:	|      jsr 1489c <getValueType>
   11dbe:	|      lea 12(sp),sp
   11dc2:	|      tst.w d0
   11dc4:	|  ,-- bne.s 11dca <builtIn_positionStatus+0x5e>
   11dc6:	|  |   moveq #1,d0
   11dc8:	+--|-- bra.s 11dee <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11dca:	|  '-> moveq #24,d0
   11dcc:	|      add.l 16(sp),d0
   11dd0:	|      move.l d0,-(sp)
   11dd2:	|      jsr 15220 <trimStack>
   11dd8:	|      addq.l #4,sp
	positionStatus (x, y);
   11dda:	|      move.l (sp),d1
   11ddc:	|      move.l 4(sp),d0
   11de0:	|      move.l d1,-(sp)
   11de2:	|      move.l d0,-(sp)
   11de4:	|      jsr 843e <positionStatus>
   11dea:	|      addq.l #8,sp
	return BR_CONTINUE;
   11dec:	|      moveq #2,d0
}
   11dee:	'----> addq.l #8,sp
   11df0:	       rts

00011df2 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11df2:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11df4:	       movea.l 12(sp),a0
   11df8:	       move.l 24(a0),d0
   11dfc:	       move.l d0,-(sp)
   11dfe:	       pea 1 <_start+0x1>
   11e02:	       move.l sp,d0
   11e04:	       addq.l #8,d0
   11e06:	       move.l d0,-(sp)
   11e08:	       jsr 1489c <getValueType>
   11e0e:	       lea 12(sp),sp
   11e12:	       tst.w d0
   11e14:	   ,-- bne.s 11e1a <builtIn_alignStatus+0x28>
   11e16:	   |   moveq #1,d0
   11e18:	,--|-- bra.s 11e3a <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11e1a:	|  '-> moveq #24,d0
   11e1c:	|      add.l 12(sp),d0
   11e20:	|      move.l d0,-(sp)
   11e22:	|      jsr 15220 <trimStack>
   11e28:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11e2a:	|      move.l (sp),d0
   11e2c:	|      movea.l 1c548 <nowStatus>,a0
   11e32:	|      move.l d0,d0
   11e34:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11e38:	|      moveq #2,d0
}
   11e3a:	'----> addq.l #4,sp
   11e3c:	       rts

00011e3e <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11e3e:	             tst.l 4(sp)
   11e42:	      ,----- beq.s 11e4e <getFuncNumForCallback+0x10>
   11e44:	      |      moveq #1,d0
   11e46:	      |      cmp.l 4(sp),d0
   11e4a:	      |  ,-- beq.s 11e54 <getFuncNumForCallback+0x16>
   11e4c:	   ,--|--|-- bra.s 11e8a <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11e4e:	   |  '--|-> clr.l 12(sp)
			break;
   11e52:	,--|-----|-- bra.s 11e9c <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11e54:	|  |     '-> movea.l 8(sp),a0
   11e58:	|  |         move.l 24(a0),d0
   11e5c:	|  |         move.l d0,-(sp)
   11e5e:	|  |         pea 2 <_start+0x2>
   11e62:	|  |         move.l 20(sp),-(sp)
   11e66:	|  |         jsr 1489c <getValueType>
   11e6c:	|  |         lea 12(sp),sp
   11e70:	|  |         tst.w d0
   11e72:	|  |     ,-- bne.s 11e78 <getFuncNumForCallback+0x3a>
   11e74:	|  |     |   clr.w d0
   11e76:	|  |  ,--|-- bra.s 11e9e <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11e78:	|  |  |  '-> moveq #24,d0
   11e7a:	|  |  |      add.l 8(sp),d0
   11e7e:	|  |  |      move.l d0,-(sp)
   11e80:	|  |  |      jsr 15220 <trimStack>
   11e86:	|  |  |      addq.l #4,sp
			break;
   11e88:	+--|--|----- bra.s 11e9c <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11e8a:	|  '--|----> pea 19e15 <talk.c.490538ff+0x1aa>
   11e90:	|     |      jsr 1737c <KPrintF>
   11e96:	|     |      addq.l #4,sp
			return FALSE;
   11e98:	|     |      clr.w d0
   11e9a:	|     +----- bra.s 11e9e <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11e9c:	'-----|----> moveq #1,d0
}
   11e9e:	      '----> rts

00011ea0 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11ea0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ea2:	       move.l sp,d0
   11ea4:	       move.l d0,-(sp)
   11ea6:	       move.l 16(sp),-(sp)
   11eaa:	       move.l 16(sp),-(sp)
   11eae:	       jsr 11e3e <getFuncNumForCallback>
   11eb4:	       lea 12(sp),sp
   11eb8:	       tst.w d0
   11eba:	,----- beq.s 11eca <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11ebc:	|      movea.l 1c53a <currentEvents>,a0
   11ec2:	|      move.l (sp),d0
   11ec4:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11ec6:	|      moveq #2,d0
   11ec8:	|  ,-- bra.s 11ecc <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11eca:	'--|-> moveq #1,d0
}
   11ecc:	   '-> addq.l #4,sp
   11ece:	       rts

00011ed0 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11ed0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ed2:	       move.l sp,d0
   11ed4:	       move.l d0,-(sp)
   11ed6:	       move.l 16(sp),-(sp)
   11eda:	       move.l 16(sp),-(sp)
   11ede:	       jsr 11e3e <getFuncNumForCallback>
   11ee4:	       lea 12(sp),sp
   11ee8:	       tst.w d0
   11eea:	,----- beq.s 11efc <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11eec:	|      movea.l 1c53a <currentEvents>,a0
   11ef2:	|      move.l (sp),d0
   11ef4:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11ef8:	|      moveq #2,d0
   11efa:	|  ,-- bra.s 11efe <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11efc:	'--|-> moveq #1,d0
}
   11efe:	   '-> addq.l #4,sp
   11f00:	       rts

00011f02 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11f02:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f04:	       move.l sp,d0
   11f06:	       move.l d0,-(sp)
   11f08:	       move.l 16(sp),-(sp)
   11f0c:	       move.l 16(sp),-(sp)
   11f10:	       jsr 11e3e <getFuncNumForCallback>
   11f16:	       lea 12(sp),sp
   11f1a:	       tst.w d0
   11f1c:	,----- beq.s 11f2e <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11f1e:	|      movea.l 1c53a <currentEvents>,a0
   11f24:	|      move.l (sp),d0
   11f26:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11f2a:	|      moveq #2,d0
   11f2c:	|  ,-- bra.s 11f30 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11f2e:	'--|-> moveq #1,d0
}
   11f30:	   '-> addq.l #4,sp
   11f32:	       rts

00011f34 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11f34:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f36:	       move.l sp,d0
   11f38:	       move.l d0,-(sp)
   11f3a:	       move.l 16(sp),-(sp)
   11f3e:	       move.l 16(sp),-(sp)
   11f42:	       jsr 11e3e <getFuncNumForCallback>
   11f48:	       lea 12(sp),sp
   11f4c:	       tst.w d0
   11f4e:	,----- beq.s 11f60 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11f50:	|      movea.l 1c53a <currentEvents>,a0
   11f56:	|      move.l (sp),d0
   11f58:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11f5c:	|      moveq #2,d0
   11f5e:	|  ,-- bra.s 11f62 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11f60:	'--|-> moveq #1,d0
}
   11f62:	   '-> addq.l #4,sp
   11f64:	       rts

00011f66 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11f66:	          subq.l #8,sp
   11f68:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f6a:	          move.l sp,d0
   11f6c:	          addq.l #4,d0
   11f6e:	          move.l d0,-(sp)
   11f70:	          move.l 24(sp),-(sp)
   11f74:	          move.l 24(sp),-(sp)
   11f78:	          jsr 11e3e <getFuncNumForCallback>
   11f7e:	          lea 12(sp),sp
   11f82:	          tst.w d0
   11f84:	,-------- beq.s 11fe2 <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   11f86:	|         movea.l 1c53a <currentEvents>,a0
   11f8c:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   11f92:	|         move.l 4(sp),d0
   11f96:	|  ,----- beq.s 11fb2 <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   11f98:	|  |      move.l 4(sp),d0
   11f9c:	|  |      movea.l 1c53a <currentEvents>,a2
   11fa2:	|  |      move.l d0,-(sp)
   11fa4:	|  |      jsr 7148 <preloadNewFunctionNum>
   11faa:	|  |      addq.l #4,sp
   11fac:	|  |      move.l d0,20(a2)
   11fb0:	|  |  ,-- bra.s 11fbc <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   11fb2:	|  '--|-> movea.l 1c53a <currentEvents>,a0
   11fb8:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   11fbc:	|     '-> tst.l 8(sp)
   11fc0:	|     ,-- beq.s 11fde <builtIn_onFocusChange+0x78>
   11fc2:	|     |   movea.l 1c53a <currentEvents>,a0
   11fc8:	|     |   move.l 20(a0),d0
   11fcc:	|     |   cmp.l 8(sp),d0
   11fd0:	|     +-- beq.s 11fde <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   11fd2:	|     |   move.l 8(sp),-(sp)
   11fd6:	|     |   jsr 75b6 <unloadFunction>
   11fdc:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   11fde:	|     '-> moveq #2,d0
   11fe0:	|     ,-- bra.s 11fe4 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   11fe2:	'-----|-> moveq #1,d0
}
   11fe4:	      '-> movea.l (sp)+,a2
   11fe6:	          addq.l #8,sp
   11fe8:	          rts

00011fea <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11fea:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fec:	       move.l sp,d0
   11fee:	       move.l d0,-(sp)
   11ff0:	       move.l 16(sp),-(sp)
   11ff4:	       move.l 16(sp),-(sp)
   11ff8:	       jsr 11e3e <getFuncNumForCallback>
   11ffe:	       lea 12(sp),sp
   12002:	       tst.w d0
   12004:	,----- beq.s 12016 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12006:	|      movea.l 1c53a <currentEvents>,a0
   1200c:	|      move.l (sp),d0
   1200e:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   12012:	|      moveq #2,d0
   12014:	|  ,-- bra.s 12018 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12016:	'--|-> moveq #1,d0
}
   12018:	   '-> addq.l #4,sp
   1201a:	       rts

0001201c <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1201c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1201e:	       move.l sp,d0
   12020:	       move.l d0,-(sp)
   12022:	       move.l 16(sp),-(sp)
   12026:	       move.l 16(sp),-(sp)
   1202a:	       jsr 11e3e <getFuncNumForCallback>
   12030:	       lea 12(sp),sp
   12034:	       tst.w d0
   12036:	,----- beq.s 12048 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12038:	|      movea.l 1c53a <currentEvents>,a0
   1203e:	|      move.l (sp),d0
   12040:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12044:	|      moveq #2,d0
   12046:	|  ,-- bra.s 1204a <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12048:	'--|-> moveq #1,d0
}
   1204a:	   '-> addq.l #4,sp
   1204c:	       rts

0001204e <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1204e:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12050:	          move.l sp,d0
   12052:	          move.l d0,-(sp)
   12054:	          move.l 16(sp),-(sp)
   12058:	          move.l 16(sp),-(sp)
   1205c:	          jsr 11e3e <getFuncNumForCallback>
   12062:	          lea 12(sp),sp
   12066:	          tst.w d0
   12068:	,-------- beq.s 12094 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   1206a:	|         move.l 1cb9a <noStack>,d1
   12070:	|         move.l (sp),d0
   12072:	|         pea 1 <_start+0x1>
   12076:	|         move.l d1,-(sp)
   12078:	|         clr.l -(sp)
   1207a:	|         clr.l -(sp)
   1207c:	|         move.l d0,-(sp)
   1207e:	|         jsr 750a <startNewFunctionNum>
   12084:	|         lea 20(sp),sp
   12088:	|         tst.l d0
   1208a:	|     ,-- bne.s 12090 <builtIn_spawnSub+0x42>
   1208c:	|     |   moveq #1,d0
   1208e:	|  ,--|-- bra.s 12096 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   12090:	|  |  '-> moveq #2,d0
   12092:	|  +----- bra.s 12096 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   12094:	'--|----> moveq #1,d0
}
   12096:	   '----> addq.l #4,sp
   12098:	          rts

0001209a <builtIn_cancelSub>:

builtIn (cancelSub)
{
   1209a:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1209c:	          move.l sp,d0
   1209e:	          addq.l #4,d0
   120a0:	          move.l d0,-(sp)
   120a2:	          move.l 20(sp),-(sp)
   120a6:	          move.l 20(sp),-(sp)
   120aa:	          jsr 11e3e <getFuncNumForCallback>
   120b0:	          lea 12(sp),sp
   120b4:	          tst.w d0
   120b6:	,-------- beq.s 120ec <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   120b8:	|         move.l 4(sp),d1
   120bc:	|         move.l sp,d0
   120be:	|         addq.l #2,d0
   120c0:	|         move.l d0,-(sp)
   120c2:	|         move.l 20(sp),-(sp)
   120c6:	|         move.l d1,-(sp)
   120c8:	|         jsr 514a <cancelAFunction>
   120ce:	|         lea 12(sp),sp
		if (killedMyself) {
   120d2:	|         move.w 2(sp),d0
   120d6:	|  ,----- beq.s 120e8 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   120d8:	|  |      move.l 16(sp),-(sp)
   120dc:	|  |      jsr 503c <abortFunction>
   120e2:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   120e4:	|  |      moveq #5,d0
   120e6:	|  |  ,-- bra.s 120ee <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   120e8:	|  '--|-> moveq #2,d0
   120ea:	|     +-- bra.s 120ee <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   120ec:	'-----|-> moveq #1,d0
}
   120ee:	      '-> addq.l #8,sp
   120f0:	          rts

000120f2 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   120f2:	       subq.l #8,sp
   120f4:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   120f6:	       movea.l 20(sp),a0
   120fa:	       move.l 24(a0),d0
   120fe:	       move.l d0,-(sp)
   12100:	       jsr 14e72 <getTextFromAnyVar>
   12106:	       addq.l #4,sp
   12108:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1210c:	   ,-- bne.s 12112 <builtIn_stringWidth+0x20>
   1210e:	   |   moveq #1,d0
   12110:	,--|-- bra.s 12160 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   12112:	|  '-> moveq #24,d0
   12114:	|      add.l 20(sp),d0
   12118:	|      move.l d0,-(sp)
   1211a:	|      jsr 15220 <trimStack>
   12120:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   12122:	|      move.l 8(sp),-(sp)
   12126:	|      jsr 15986 <stringWidth>
   1212c:	|      addq.l #4,sp
   1212e:	|      move.l d0,d1
   12130:	|      moveq #28,d0
   12132:	|      add.l 20(sp),d0
   12136:	|      move.l d1,-(sp)
   12138:	|      pea 1 <_start+0x1>
   1213c:	|      move.l d0,-(sp)
   1213e:	|      jsr 1518e <setVariable>
   12144:	|      lea 12(sp),sp
	FreeVec(theText);
   12148:	|      move.l 8(sp),4(sp)
   1214e:	|      move.l 1cbca <SysBase>,d0
   12154:	|      movea.l d0,a6
   12156:	|      movea.l 4(sp),a1
   1215a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1215e:	|      moveq #2,d0
}
   12160:	'----> movea.l (sp)+,a6
   12162:	       addq.l #8,sp
   12164:	       rts

00012166 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12166:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12168:	       movea.l 12(sp),a0
   1216c:	       move.l 24(a0),d0
   12170:	       move.l d0,-(sp)
   12172:	       pea 1 <_start+0x1>
   12176:	       move.l sp,d0
   12178:	       addq.l #8,d0
   1217a:	       move.l d0,-(sp)
   1217c:	       jsr 1489c <getValueType>
   12182:	       lea 12(sp),sp
   12186:	       tst.w d0
   12188:	   ,-- bne.s 1218e <builtIn_hardScroll+0x28>
   1218a:	   |   moveq #1,d0
   1218c:	,--|-- bra.s 121ac <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1218e:	|  '-> moveq #24,d0
   12190:	|      add.l 12(sp),d0
   12194:	|      move.l d0,-(sp)
   12196:	|      jsr 15220 <trimStack>
   1219c:	|      addq.l #4,sp
	hardScroll (v);
   1219e:	|      move.l (sp),d0
   121a0:	|      move.l d0,-(sp)
   121a2:	|      jsr d302 <hardScroll>
   121a8:	|      addq.l #4,sp
	return BR_CONTINUE;
   121aa:	|      moveq #2,d0
}
   121ac:	'----> addq.l #4,sp
   121ae:	       rts

000121b0 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   121b0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121b2:	       movea.l 12(sp),a0
   121b6:	       move.l 24(a0),d0
   121ba:	       move.l d0,-(sp)
   121bc:	       pea 7 <_start+0x7>
   121c0:	       move.l sp,d0
   121c2:	       addq.l #8,d0
   121c4:	       move.l d0,-(sp)
   121c6:	       jsr 1489c <getValueType>
   121cc:	       lea 12(sp),sp
   121d0:	       tst.w d0
   121d2:	   ,-- bne.s 121d8 <builtIn_isScreenRegion+0x28>
   121d4:	   |   moveq #1,d0
   121d6:	,--|-- bra.s 12218 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   121d8:	|  '-> moveq #24,d0
   121da:	|      add.l 12(sp),d0
   121de:	|      move.l d0,-(sp)
   121e0:	|      jsr 15220 <trimStack>
   121e6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   121e8:	|      move.l (sp),d0
   121ea:	|      move.l d0,-(sp)
   121ec:	|      jsr 15b5e <getRegionForObject>
   121f2:	|      addq.l #4,sp
   121f4:	|      tst.l d0
   121f6:	|      sne d0
   121f8:	|      neg.b d0
   121fa:	|      moveq #0,d1
   121fc:	|      move.b d0,d1
   121fe:	|      moveq #28,d0
   12200:	|      add.l 12(sp),d0
   12204:	|      move.l d1,-(sp)
   12206:	|      pea 1 <_start+0x1>
   1220a:	|      move.l d0,-(sp)
   1220c:	|      jsr 1518e <setVariable>
   12212:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12216:	|      moveq #2,d0
}
   12218:	'----> addq.l #4,sp
   1221a:	       rts

0001221c <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1221c:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1221e:	       movea.l 12(sp),a0
   12222:	       move.l 24(a0),d0
   12226:	       move.l d0,-(sp)
   12228:	       pea 1 <_start+0x1>
   1222c:	       move.l sp,d0
   1222e:	       addq.l #8,d0
   12230:	       move.l d0,-(sp)
   12232:	       jsr 1489c <getValueType>
   12238:	       lea 12(sp),sp
   1223c:	       tst.w d0
   1223e:	   ,-- bne.s 12244 <builtIn_setSpeechSpeed+0x28>
   12240:	   |   moveq #1,d0
   12242:	,--|-- bra.s 12292 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12244:	|  '-> moveq #24,d0
   12246:	|      add.l 12(sp),d0
   1224a:	|      move.l d0,-(sp)
   1224c:	|      jsr 15220 <trimStack>
   12252:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12254:	|      move.l (sp),d0
   12256:	|      move.l d0,-(sp)
   12258:	|      jsr 177ae <__floatsisf>
   1225e:	|      addq.l #4,sp
   12260:	|      move.l #1008981770,-(sp)
   12266:	|      move.l d0,-(sp)
   12268:	|      jsr 17860 <__mulsf3>
   1226e:	|      addq.l #8,sp
   12270:	|      move.l d0,1c534 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12276:	|      moveq #28,d0
   12278:	|      add.l 12(sp),d0
   1227c:	|      pea 1 <_start+0x1>
   12280:	|      pea 1 <_start+0x1>
   12284:	|      move.l d0,-(sp)
   12286:	|      jsr 1518e <setVariable>
   1228c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12290:	|      moveq #2,d0
}
   12292:	'----> addq.l #4,sp
   12294:	       rts

00012296 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12296:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12298:	       movea.l 12(sp),a0
   1229c:	       move.l 24(a0),d0
   122a0:	       move.l d0,-(sp)
   122a2:	       pea 1 <_start+0x1>
   122a6:	       move.l sp,d0
   122a8:	       addq.l #8,d0
   122aa:	       move.l d0,-(sp)
   122ac:	       jsr 1489c <getValueType>
   122b2:	       lea 12(sp),sp
   122b6:	       tst.w d0
   122b8:	   ,-- bne.s 122be <builtIn_setFontSpacing+0x28>
   122ba:	   |   moveq #1,d0
   122bc:	,--|-- bra.s 122f4 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   122be:	|  '-> move.l (sp),d0
   122c0:	|      move.l d0,d0
   122c2:	|      move.w d0,1cac2 <fontSpace>
	trimStack (&fun -> stack);
   122c8:	|      moveq #24,d0
   122ca:	|      add.l 12(sp),d0
   122ce:	|      move.l d0,-(sp)
   122d0:	|      jsr 15220 <trimStack>
   122d6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   122d8:	|      moveq #28,d0
   122da:	|      add.l 12(sp),d0
   122de:	|      pea 1 <_start+0x1>
   122e2:	|      pea 1 <_start+0x1>
   122e6:	|      move.l d0,-(sp)
   122e8:	|      jsr 1518e <setVariable>
   122ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122f2:	|      moveq #2,d0
}
   122f4:	'----> addq.l #4,sp
   122f6:	       rts

000122f8 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   122f8:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122fa:	          movea.l 12(sp),a0
   122fe:	          move.l 24(a0),d0
   12302:	          move.l d0,-(sp)
   12304:	          pea 1 <_start+0x1>
   12308:	          move.l sp,d0
   1230a:	          addq.l #8,d0
   1230c:	          move.l d0,-(sp)
   1230e:	          jsr 1489c <getValueType>
   12314:	          lea 12(sp),sp
   12318:	          tst.w d0
   1231a:	      ,-- bne.s 12320 <builtIn_transitionLevel+0x28>
   1231c:	      |   moveq #1,d0
   1231e:	,-----|-- bra.s 12374 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12320:	|     '-> moveq #24,d0
   12322:	|         add.l 12(sp),d0
   12326:	|         move.l d0,-(sp)
   12328:	|         jsr 15220 <trimStack>
   1232e:	|         addq.l #4,sp

	if (number < 0)
   12330:	|         move.l (sp),d0
   12332:	|     ,-- bpl.s 1233c <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12334:	|     |   clr.b 1c538 <brightnessLevel>
   1233a:	|  ,--|-- bra.s 12358 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1233c:	|  |  '-> move.l (sp),d0
   1233e:	|  |      cmpi.l #255,d0
   12344:	|  |  ,-- ble.s 1234e <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12346:	|  |  |   st 1c538 <brightnessLevel>
   1234c:	|  +--|-- bra.s 12358 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1234e:	|  |  '-> move.l (sp),d0
   12350:	|  |      move.l d0,d0
   12352:	|  |      move.b d0,1c538 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12358:	|  '----> moveq #28,d0
   1235a:	|         add.l 12(sp),d0
   1235e:	|         pea 1 <_start+0x1>
   12362:	|         pea 1 <_start+0x1>
   12366:	|         move.l d0,-(sp)
   12368:	|         jsr 1518e <setVariable>
   1236e:	|         lea 12(sp),sp
	return BR_CONTINUE;
   12372:	|         moveq #2,d0
}
   12374:	'-------> addq.l #4,sp
   12376:	          rts

00012378 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12378:	movea.l 8(sp),a0
   1237c:	move.l 24(a0),d0
   12380:	move.l d0,-(sp)
   12382:	jsr 14ddc <getBoolean>
   12388:	addq.l #4,sp
   1238a:	move.w d0,1cb6a <captureAllKeys>
	trimStack (&fun -> stack);
   12390:	moveq #24,d0
   12392:	add.l 8(sp),d0
   12396:	move.l d0,-(sp)
   12398:	jsr 15220 <trimStack>
   1239e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   123a0:	move.w 1cb6a <captureAllKeys>,d0
   123a6:	movea.w d0,a0
   123a8:	moveq #28,d0
   123aa:	add.l 8(sp),d0
   123ae:	move.l a0,-(sp)
   123b0:	pea 1 <_start+0x1>
   123b4:	move.l d0,-(sp)
   123b6:	jsr 1518e <setVariable>
   123bc:	lea 12(sp),sp
	return BR_CONTINUE;
   123c0:	moveq #2,d0
}
   123c2:	rts

000123c4 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   123c4:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123c8:	       movea.l 20(sp),a0
   123cc:	       move.l 24(a0),d0
   123d0:	       move.l d0,-(sp)
   123d2:	       pea 1 <_start+0x1>
   123d6:	       moveq #12,d0
   123d8:	       add.l sp,d0
   123da:	       move.l d0,-(sp)
   123dc:	       jsr 1489c <getValueType>
   123e2:	       lea 12(sp),sp
   123e6:	       tst.w d0
   123e8:	   ,-- bne.s 123f0 <builtIn_spinCharacter+0x2c>
   123ea:	   |   moveq #1,d0
   123ec:	,--|-- bra.w 124a0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   123f0:	|  '-> moveq #24,d0
   123f2:	|      add.l 20(sp),d0
   123f6:	|      move.l d0,-(sp)
   123f8:	|      jsr 15220 <trimStack>
   123fe:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12400:	|      movea.l 20(sp),a0
   12404:	|      move.l 24(a0),d0
   12408:	|      move.l d0,-(sp)
   1240a:	|      pea 7 <_start+0x7>
   1240e:	|      lea 8(sp),a0
   12412:	|      move.l a0,-(sp)
   12414:	|      jsr 1489c <getValueType>
   1241a:	|      lea 12(sp),sp
   1241e:	|      tst.w d0
   12420:	|  ,-- bne.s 12426 <builtIn_spinCharacter+0x62>
   12422:	|  |   moveq #1,d0
   12424:	+--|-- bra.s 124a0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12426:	|  '-> moveq #24,d0
   12428:	|      add.l 20(sp),d0
   1242c:	|      move.l d0,-(sp)
   1242e:	|      jsr 15220 <trimStack>
   12434:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12436:	|      move.l (sp),d0
   12438:	|      move.l d0,-(sp)
   1243a:	|      jsr a642 <findPerson>
   12440:	|      addq.l #4,sp
   12442:	|      move.l d0,8(sp)
	if (thisPerson) {
   12446:	|  ,-- beq.s 12486 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12448:	|  |   move.l 4(sp),d0
   1244c:	|  |   movea.l 8(sp),a0
   12450:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12454:	|  |   movea.l 8(sp),a0
   12458:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1245e:	|  |   movea.l 8(sp),a0
   12462:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12468:	|  |   moveq #28,d0
   1246a:	|  |   add.l 20(sp),d0
   1246e:	|  |   pea 1 <_start+0x1>
   12472:	|  |   pea 1 <_start+0x1>
   12476:	|  |   move.l d0,-(sp)
   12478:	|  |   jsr 1518e <setVariable>
   1247e:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   12482:	|  |   moveq #3,d0
   12484:	+--|-- bra.s 124a0 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12486:	|  '-> moveq #28,d0
   12488:	|      add.l 20(sp),d0
   1248c:	|      clr.l -(sp)
   1248e:	|      pea 1 <_start+0x1>
   12492:	|      move.l d0,-(sp)
   12494:	|      jsr 1518e <setVariable>
   1249a:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1249e:	|      moveq #2,d0
	}
}
   124a0:	'----> lea 12(sp),sp
   124a4:	       rts

000124a6 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   124a6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124a8:	          movea.l 16(sp),a0
   124ac:	          move.l 24(a0),d0
   124b0:	          move.l d0,-(sp)
   124b2:	          pea 7 <_start+0x7>
   124b6:	          move.l sp,d0
   124b8:	          addq.l #8,d0
   124ba:	          move.l d0,-(sp)
   124bc:	          jsr 1489c <getValueType>
   124c2:	          lea 12(sp),sp
   124c6:	          tst.w d0
   124c8:	      ,-- bne.s 124ce <builtIn_getCharacterDirection+0x28>
   124ca:	      |   moveq #1,d0
   124cc:	,-----|-- bra.s 1252c <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   124ce:	|     '-> moveq #24,d0
   124d0:	|         add.l 16(sp),d0
   124d4:	|         move.l d0,-(sp)
   124d6:	|         jsr 15220 <trimStack>
   124dc:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124de:	|         move.l (sp),d0
   124e0:	|         move.l d0,-(sp)
   124e2:	|         jsr a642 <findPerson>
   124e8:	|         addq.l #4,sp
   124ea:	|         move.l d0,4(sp)
	if (thisPerson) {
   124ee:	|  ,----- beq.s 12512 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   124f0:	|  |      movea.l 4(sp),a0
   124f4:	|  |      move.l 106(a0),d1
   124f8:	|  |      moveq #28,d0
   124fa:	|  |      add.l 16(sp),d0
   124fe:	|  |      move.l d1,-(sp)
   12500:	|  |      pea 1 <_start+0x1>
   12504:	|  |      move.l d0,-(sp)
   12506:	|  |      jsr 1518e <setVariable>
   1250c:	|  |      lea 12(sp),sp
   12510:	|  |  ,-- bra.s 1252a <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12512:	|  '--|-> moveq #28,d0
   12514:	|     |   add.l 16(sp),d0
   12518:	|     |   clr.l -(sp)
   1251a:	|     |   pea 1 <_start+0x1>
   1251e:	|     |   move.l d0,-(sp)
   12520:	|     |   jsr 1518e <setVariable>
   12526:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1252a:	|     '-> moveq #2,d0
}
   1252c:	'-------> addq.l #8,sp
   1252e:	          rts

00012530 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12530:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12532:	       movea.l 16(sp),a0
   12536:	       move.l 24(a0),d0
   1253a:	       move.l d0,-(sp)
   1253c:	       pea 7 <_start+0x7>
   12540:	       move.l sp,d0
   12542:	       addq.l #8,d0
   12544:	       move.l d0,-(sp)
   12546:	       jsr 1489c <getValueType>
   1254c:	       lea 12(sp),sp
   12550:	       tst.w d0
   12552:	   ,-- bne.s 12558 <builtIn_isCharacter+0x28>
   12554:	   |   moveq #1,d0
   12556:	,--|-- bra.s 1259a <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12558:	|  '-> moveq #24,d0
   1255a:	|      add.l 16(sp),d0
   1255e:	|      move.l d0,-(sp)
   12560:	|      jsr 15220 <trimStack>
   12566:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12568:	|      move.l (sp),d0
   1256a:	|      move.l d0,-(sp)
   1256c:	|      jsr a642 <findPerson>
   12572:	|      addq.l #4,sp
   12574:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12578:	|      sne d0
   1257a:	|      neg.b d0
   1257c:	|      moveq #0,d1
   1257e:	|      move.b d0,d1
   12580:	|      moveq #28,d0
   12582:	|      add.l 16(sp),d0
   12586:	|      move.l d1,-(sp)
   12588:	|      pea 1 <_start+0x1>
   1258c:	|      move.l d0,-(sp)
   1258e:	|      jsr 1518e <setVariable>
   12594:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12598:	|      moveq #2,d0
}
   1259a:	'----> addq.l #8,sp
   1259c:	       rts

0001259e <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1259e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125a0:	          movea.l 16(sp),a0
   125a4:	          move.l 24(a0),d0
   125a8:	          move.l d0,-(sp)
   125aa:	          pea 7 <_start+0x7>
   125ae:	          move.l sp,d0
   125b0:	          addq.l #8,d0
   125b2:	          move.l d0,-(sp)
   125b4:	          jsr 1489c <getValueType>
   125ba:	          lea 12(sp),sp
   125be:	          tst.w d0
   125c0:	      ,-- bne.s 125c6 <builtIn_normalCharacter+0x28>
   125c2:	      |   moveq #1,d0
   125c4:	,-----|-- bra.s 12642 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   125c6:	|     '-> moveq #24,d0
   125c8:	|         add.l 16(sp),d0
   125cc:	|         move.l d0,-(sp)
   125ce:	|         jsr 15220 <trimStack>
   125d4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125d6:	|         move.l (sp),d0
   125d8:	|         move.l d0,-(sp)
   125da:	|         jsr a642 <findPerson>
   125e0:	|         addq.l #4,sp
   125e2:	|         move.l d0,4(sp)
	if (thisPerson)
   125e6:	|  ,----- beq.s 12628 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   125e8:	|  |      movea.l 4(sp),a0
   125ec:	|  |      movea.l 80(a0),a0
   125f0:	|  |      move.l (a0),d1
   125f2:	|  |      movea.l 4(sp),a0
   125f6:	|  |      move.l 106(a0),d0
   125fa:	|  |      add.l d0,d0
   125fc:	|  |      add.l d0,d0
   125fe:	|  |      movea.l d1,a0
   12600:	|  |      adda.l d0,a0
   12602:	|  |      move.l (a0),d0
   12604:	|  |      movea.l 4(sp),a0
   12608:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1260c:	|  |      moveq #28,d0
   1260e:	|  |      add.l 16(sp),d0
   12612:	|  |      pea 1 <_start+0x1>
   12616:	|  |      pea 1 <_start+0x1>
   1261a:	|  |      move.l d0,-(sp)
   1261c:	|  |      jsr 1518e <setVariable>
   12622:	|  |      lea 12(sp),sp
   12626:	|  |  ,-- bra.s 12640 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12628:	|  '--|-> moveq #28,d0
   1262a:	|     |   add.l 16(sp),d0
   1262e:	|     |   clr.l -(sp)
   12630:	|     |   pea 1 <_start+0x1>
   12634:	|     |   move.l d0,-(sp)
   12636:	|     |   jsr 1518e <setVariable>
   1263c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12640:	|     '-> moveq #2,d0
}
   12642:	'-------> addq.l #8,sp
   12644:	          rts

00012646 <builtIn_isMoving>:

builtIn(isMoving)
{
   12646:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12648:	          movea.l 16(sp),a0
   1264c:	          move.l 24(a0),d0
   12650:	          move.l d0,-(sp)
   12652:	          pea 7 <_start+0x7>
   12656:	          move.l sp,d0
   12658:	          addq.l #8,d0
   1265a:	          move.l d0,-(sp)
   1265c:	          jsr 1489c <getValueType>
   12662:	          lea 12(sp),sp
   12666:	          tst.w d0
   12668:	      ,-- bne.s 1266e <builtIn_isMoving+0x28>
   1266a:	      |   moveq #1,d0
   1266c:	,-----|-- bra.s 126ce <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1266e:	|     '-> moveq #24,d0
   12670:	|         add.l 16(sp),d0
   12674:	|         move.l d0,-(sp)
   12676:	|         jsr 15220 <trimStack>
   1267c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1267e:	|         move.l (sp),d0
   12680:	|         move.l d0,-(sp)
   12682:	|         jsr a642 <findPerson>
   12688:	|         addq.l #4,sp
   1268a:	|         move.l d0,4(sp)
	if (thisPerson)
   1268e:	|  ,----- beq.s 126b4 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12690:	|  |      movea.l 4(sp),a0
   12694:	|  |      move.w 64(a0),d0
   12698:	|  |      movea.w d0,a0
   1269a:	|  |      moveq #28,d0
   1269c:	|  |      add.l 16(sp),d0
   126a0:	|  |      move.l a0,-(sp)
   126a2:	|  |      pea 1 <_start+0x1>
   126a6:	|  |      move.l d0,-(sp)
   126a8:	|  |      jsr 1518e <setVariable>
   126ae:	|  |      lea 12(sp),sp
   126b2:	|  |  ,-- bra.s 126cc <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126b4:	|  '--|-> moveq #28,d0
   126b6:	|     |   add.l 16(sp),d0
   126ba:	|     |   clr.l -(sp)
   126bc:	|     |   pea 1 <_start+0x1>
   126c0:	|     |   move.l d0,-(sp)
   126c2:	|     |   jsr 1518e <setVariable>
   126c8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126cc:	|     '-> moveq #2,d0
}
   126ce:	'-------> addq.l #8,sp
   126d0:	          rts

000126d2 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   126d2:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126d6:	          movea.l 20(sp),a0
   126da:	          move.l 24(a0),d0
   126de:	          move.l d0,-(sp)
   126e0:	          pea 7 <_start+0x7>
   126e4:	          lea 8(sp),a0
   126e8:	          move.l a0,-(sp)
   126ea:	          jsr 1489c <getValueType>
   126f0:	          lea 12(sp),sp
   126f4:	          tst.w d0
   126f6:	      ,-- bne.s 126fe <builtIn_fetchEvent+0x2c>
   126f8:	      |   moveq #1,d0
   126fa:	,-----|-- bra.w 12792 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   126fe:	|     '-> moveq #24,d0
   12700:	|         add.l 20(sp),d0
   12704:	|         move.l d0,-(sp)
   12706:	|         jsr 15220 <trimStack>
   1270c:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1270e:	|         movea.l 20(sp),a0
   12712:	|         move.l 24(a0),d0
   12716:	|         move.l d0,-(sp)
   12718:	|         pea 7 <_start+0x7>
   1271c:	|         moveq #12,d0
   1271e:	|         add.l sp,d0
   12720:	|         move.l d0,-(sp)
   12722:	|         jsr 1489c <getValueType>
   12728:	|         lea 12(sp),sp
   1272c:	|         tst.w d0
   1272e:	|     ,-- bne.s 12734 <builtIn_fetchEvent+0x62>
   12730:	|     |   moveq #1,d0
   12732:	+-----|-- bra.s 12792 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12734:	|     '-> moveq #24,d0
   12736:	|         add.l 20(sp),d0
   1273a:	|         move.l d0,-(sp)
   1273c:	|         jsr 15220 <trimStack>
   12742:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12744:	|         move.l (sp),d1
   12746:	|         move.l 4(sp),d0
   1274a:	|         move.l d1,-(sp)
   1274c:	|         move.l d0,-(sp)
   1274e:	|         jsr d5e4 <getCombinationFunction>
   12754:	|         addq.l #8,sp
   12756:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1275a:	|  ,----- beq.s 12778 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1275c:	|  |      moveq #28,d0
   1275e:	|  |      add.l 20(sp),d0
   12762:	|  |      move.l 8(sp),-(sp)
   12766:	|  |      pea 2 <_start+0x2>
   1276a:	|  |      move.l d0,-(sp)
   1276c:	|  |      jsr 1518e <setVariable>
   12772:	|  |      lea 12(sp),sp
   12776:	|  |  ,-- bra.s 12790 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12778:	|  '--|-> moveq #28,d0
   1277a:	|     |   add.l 20(sp),d0
   1277e:	|     |   clr.l -(sp)
   12780:	|     |   pea 1 <_start+0x1>
   12784:	|     |   move.l d0,-(sp)
   12786:	|     |   jsr 1518e <setVariable>
   1278c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12790:	|     '-> moveq #2,d0
}
   12792:	'-------> lea 12(sp),sp
   12796:	          rts

00012798 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12798:	       lea -24(sp),sp
   1279c:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1279e:	       movea.l 36(sp),a0
   127a2:	       move.l 24(a0),d0
   127a6:	       move.l d0,-(sp)
   127a8:	       jsr 14e72 <getTextFromAnyVar>
   127ae:	       addq.l #4,sp
   127b0:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   127b4:	       moveq #24,d0
   127b6:	       add.l 36(sp),d0
   127ba:	       move.l d0,-(sp)
   127bc:	       jsr 15220 <trimStack>
   127c2:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   127c4:	       move.l 24(sp),-(sp)
   127c8:	       jsr 2fe <encodeFilename>
   127ce:	       addq.l #4,sp
   127d0:	       move.l d0,20(sp)
    FreeVec(namNormal);
   127d4:	       move.l 24(sp),16(sp)
   127da:	       move.l 1cbca <SysBase>,d0
   127e0:	       movea.l d0,a6
   127e2:	       movea.l 16(sp),a1
   127e6:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   127ea:	       move.l 20(sp),-(sp)
   127ee:	       jsr e39c <failSecurityCheck>
   127f4:	       addq.l #4,sp
   127f6:	       tst.w d0
   127f8:	   ,-- beq.s 127fe <builtIn_deleteFile+0x66>
   127fa:	   |   moveq #1,d0
   127fc:	,--|-- bra.s 1284c <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   127fe:	|  '-> move.l 20(sp),12(sp)
   12804:	|      move.l 1cbd2 <DOSBase>,d0
   1280a:	|      movea.l d0,a6
   1280c:	|      move.l 12(sp),d1
   12810:	|      jsr -72(a6)
   12814:	|      move.l d0,8(sp)
   12818:	|      move.l 8(sp),d1
   1281c:	|      moveq #28,d0
   1281e:	|      add.l 36(sp),d0
   12822:	|      move.l d1,-(sp)
   12824:	|      pea 1 <_start+0x1>
   12828:	|      move.l d0,-(sp)
   1282a:	|      jsr 1518e <setVariable>
   12830:	|      lea 12(sp),sp
    FreeVec(nam);
   12834:	|      move.l 20(sp),4(sp)
   1283a:	|      move.l 1cbca <SysBase>,d0
   12840:	|      movea.l d0,a6
   12842:	|      movea.l 4(sp),a1
   12846:	|      jsr -690(a6)

    return BR_CONTINUE;
   1284a:	|      moveq #2,d0
}
   1284c:	'----> movea.l (sp)+,a6
   1284e:	       lea 24(sp),sp
   12852:	       rts

00012854 <builtIn_renameFile>:

builtIn(renameFile)
{
   12854:	       lea -40(sp),sp
   12858:	       move.l a6,-(sp)
   1285a:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1285c:	       movea.l 56(sp),a0
   12860:	       move.l 24(a0),d0
   12864:	       move.l d0,-(sp)
   12866:	       jsr 14e72 <getTextFromAnyVar>
   1286c:	       addq.l #4,sp
   1286e:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12872:	       move.l 44(sp),-(sp)
   12876:	       jsr 2fe <encodeFilename>
   1287c:	       addq.l #4,sp
   1287e:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12882:	       moveq #24,d0
   12884:	       add.l 56(sp),d0
   12888:	       move.l d0,-(sp)
   1288a:	       jsr 15220 <trimStack>
   12890:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12892:	       move.l 40(sp),-(sp)
   12896:	       jsr e39c <failSecurityCheck>
   1289c:	       addq.l #4,sp
   1289e:	       tst.w d0
   128a0:	   ,-- beq.s 128a8 <builtIn_renameFile+0x54>
   128a2:	   |   moveq #1,d0
   128a4:	,--|-- bra.w 1298e <builtIn_renameFile+0x13a>
	FreeVec(temp);
   128a8:	|  '-> move.l 44(sp),36(sp)
   128ae:	|      move.l 1cbca <SysBase>,d0
   128b4:	|      movea.l d0,a6
   128b6:	|      movea.l 36(sp),a1
   128ba:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   128be:	|      movea.l 56(sp),a0
   128c2:	|      move.l 24(a0),d0
   128c6:	|      move.l d0,-(sp)
   128c8:	|      jsr 14e72 <getTextFromAnyVar>
   128ce:	|      addq.l #4,sp
   128d0:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   128d4:	|      move.l 44(sp),-(sp)
   128d8:	|      jsr 2fe <encodeFilename>
   128de:	|      addq.l #4,sp
   128e0:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   128e4:	|      moveq #24,d0
   128e6:	|      add.l 56(sp),d0
   128ea:	|      move.l d0,-(sp)
   128ec:	|      jsr 15220 <trimStack>
   128f2:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   128f4:	|      move.l 32(sp),-(sp)
   128f8:	|      jsr e39c <failSecurityCheck>
   128fe:	|      addq.l #4,sp
   12900:	|      tst.w d0
   12902:	|  ,-- beq.s 1290a <builtIn_renameFile+0xb6>
   12904:	|  |   moveq #1,d0
   12906:	+--|-- bra.w 1298e <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1290a:	|  '-> move.l 44(sp),28(sp)
   12910:	|      move.l 1cbca <SysBase>,d0
   12916:	|      movea.l d0,a6
   12918:	|      movea.l 28(sp),a1
   1291c:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12920:	|      move.l 32(sp),24(sp)
   12926:	|      move.l 40(sp),20(sp)
   1292c:	|      move.l 1cbd2 <DOSBase>,d0
   12932:	|      movea.l d0,a6
   12934:	|      move.l 24(sp),d1
   12938:	|      move.l 20(sp),d2
   1293c:	|      jsr -78(a6)
   12940:	|      move.l d0,16(sp)
   12944:	|      move.l 16(sp),d1
   12948:	|      moveq #28,d0
   1294a:	|      add.l 56(sp),d0
   1294e:	|      move.l d1,-(sp)
   12950:	|      pea 1 <_start+0x1>
   12954:	|      move.l d0,-(sp)
   12956:	|      jsr 1518e <setVariable>
   1295c:	|      lea 12(sp),sp
	FreeVec(nam);
   12960:	|      move.l 32(sp),12(sp)
   12966:	|      move.l 1cbca <SysBase>,d0
   1296c:	|      movea.l d0,a6
   1296e:	|      movea.l 12(sp),a1
   12972:	|      jsr -690(a6)
	FreeVec(newnam);
   12976:	|      move.l 40(sp),8(sp)
   1297c:	|      move.l 1cbca <SysBase>,d0
   12982:	|      movea.l d0,a6
   12984:	|      movea.l 8(sp),a1
   12988:	|      jsr -690(a6)

	return BR_CONTINUE;
   1298c:	|      moveq #2,d0
}
   1298e:	'----> move.l (sp)+,d2
   12990:	       movea.l (sp)+,a6
   12992:	       lea 40(sp),sp
   12996:	       rts

00012998 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12998:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1299a:	       movea.l 12(sp),a0
   1299e:	       move.l 24(a0),d0
   129a2:	       move.l d0,-(sp)
   129a4:	       pea 5 <_start+0x5>
   129a8:	       move.l sp,d0
   129aa:	       addq.l #8,d0
   129ac:	       move.l d0,-(sp)
   129ae:	       jsr 1489c <getValueType>
   129b4:	       lea 12(sp),sp
   129b8:	       tst.w d0
   129ba:	   ,-- bne.s 129c0 <builtIn_cacheSound+0x28>
   129bc:	   |   moveq #1,d0
   129be:	,--|-- bra.s 129e8 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   129c0:	|  '-> moveq #24,d0
   129c2:	|      add.l 12(sp),d0
   129c6:	|      move.l d0,-(sp)
   129c8:	|      jsr 15220 <trimStack>
   129ce:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   129d0:	|      move.l (sp),d0
   129d2:	|      move.l d0,-(sp)
   129d4:	|      jsr d1da <cacheSound>
   129da:	|      addq.l #4,sp
   129dc:	|      moveq #-1,d1
   129de:	|      cmp.l d0,d1
   129e0:	|  ,-- bne.s 129e6 <builtIn_cacheSound+0x4e>
   129e2:	|  |   moveq #1,d0
   129e4:	+--|-- bra.s 129e8 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   129e6:	|  '-> moveq #2,d0
}
   129e8:	'----> addq.l #4,sp
   129ea:	       rts

000129ec <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   129ec:	pea 19e2a <talk.c.490538ff+0x1bf>
   129f2:	jsr 1737c <KPrintF>
   129f8:	addq.l #4,sp
	return BR_CONTINUE;
   129fa:	moveq #2,d0
}
   129fc:	rts

000129fe <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   129fe:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a02:	          movea.l 20(sp),a0
   12a06:	          move.l 24(a0),d0
   12a0a:	          move.l d0,-(sp)
   12a0c:	          pea 1 <_start+0x1>
   12a10:	          moveq #12,d0
   12a12:	          add.l sp,d0
   12a14:	          move.l d0,-(sp)
   12a16:	          jsr 1489c <getValueType>
   12a1c:	          lea 12(sp),sp
   12a20:	          tst.w d0
   12a22:	      ,-- bne.s 12a2a <builtIn_setCharacterSpinSpeed+0x2c>
   12a24:	      |   moveq #1,d0
   12a26:	,-----|-- bra.w 12ac4 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a2a:	|     '-> moveq #24,d0
   12a2c:	|         add.l 20(sp),d0
   12a30:	|         move.l d0,-(sp)
   12a32:	|         jsr 15220 <trimStack>
   12a38:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a3a:	|         movea.l 20(sp),a0
   12a3e:	|         move.l 24(a0),d0
   12a42:	|         move.l d0,-(sp)
   12a44:	|         pea 7 <_start+0x7>
   12a48:	|         lea 8(sp),a0
   12a4c:	|         move.l a0,-(sp)
   12a4e:	|         jsr 1489c <getValueType>
   12a54:	|         lea 12(sp),sp
   12a58:	|         tst.w d0
   12a5a:	|     ,-- bne.s 12a60 <builtIn_setCharacterSpinSpeed+0x62>
   12a5c:	|     |   moveq #1,d0
   12a5e:	+-----|-- bra.s 12ac4 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a60:	|     '-> moveq #24,d0
   12a62:	|         add.l 20(sp),d0
   12a66:	|         move.l d0,-(sp)
   12a68:	|         jsr 15220 <trimStack>
   12a6e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a70:	|         move.l (sp),d0
   12a72:	|         move.l d0,-(sp)
   12a74:	|         jsr a642 <findPerson>
   12a7a:	|         addq.l #4,sp
   12a7c:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a80:	|  ,----- beq.s 12aaa <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12a82:	|  |      move.l 4(sp),d0
   12a86:	|  |      movea.l 8(sp),a0
   12a8a:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a8e:	|  |      moveq #28,d0
   12a90:	|  |      add.l 20(sp),d0
   12a94:	|  |      pea 1 <_start+0x1>
   12a98:	|  |      pea 1 <_start+0x1>
   12a9c:	|  |      move.l d0,-(sp)
   12a9e:	|  |      jsr 1518e <setVariable>
   12aa4:	|  |      lea 12(sp),sp
   12aa8:	|  |  ,-- bra.s 12ac2 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12aaa:	|  '--|-> moveq #28,d0
   12aac:	|     |   add.l 20(sp),d0
   12ab0:	|     |   clr.l -(sp)
   12ab2:	|     |   pea 1 <_start+0x1>
   12ab6:	|     |   move.l d0,-(sp)
   12ab8:	|     |   jsr 1518e <setVariable>
   12abe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ac2:	|     '-> moveq #2,d0
}
   12ac4:	'-------> lea 12(sp),sp
   12ac8:	          rts

00012aca <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12aca:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ace:	          movea.l 20(sp),a0
   12ad2:	          move.l 24(a0),d0
   12ad6:	          move.l d0,-(sp)
   12ad8:	          pea 1 <_start+0x1>
   12adc:	          moveq #12,d0
   12ade:	          add.l sp,d0
   12ae0:	          move.l d0,-(sp)
   12ae2:	          jsr 1489c <getValueType>
   12ae8:	          lea 12(sp),sp
   12aec:	          tst.w d0
   12aee:	      ,-- bne.s 12af6 <builtIn_setCharacterAngleOffset+0x2c>
   12af0:	      |   moveq #1,d0
   12af2:	,-----|-- bra.w 12b90 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12af6:	|     '-> moveq #24,d0
   12af8:	|         add.l 20(sp),d0
   12afc:	|         move.l d0,-(sp)
   12afe:	|         jsr 15220 <trimStack>
   12b04:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b06:	|         movea.l 20(sp),a0
   12b0a:	|         move.l 24(a0),d0
   12b0e:	|         move.l d0,-(sp)
   12b10:	|         pea 7 <_start+0x7>
   12b14:	|         lea 8(sp),a0
   12b18:	|         move.l a0,-(sp)
   12b1a:	|         jsr 1489c <getValueType>
   12b20:	|         lea 12(sp),sp
   12b24:	|         tst.w d0
   12b26:	|     ,-- bne.s 12b2c <builtIn_setCharacterAngleOffset+0x62>
   12b28:	|     |   moveq #1,d0
   12b2a:	+-----|-- bra.s 12b90 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b2c:	|     '-> moveq #24,d0
   12b2e:	|         add.l 20(sp),d0
   12b32:	|         move.l d0,-(sp)
   12b34:	|         jsr 15220 <trimStack>
   12b3a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12b3c:	|         move.l (sp),d0
   12b3e:	|         move.l d0,-(sp)
   12b40:	|         jsr a642 <findPerson>
   12b46:	|         addq.l #4,sp
   12b48:	|         move.l d0,8(sp)

	if (thisPerson) {
   12b4c:	|  ,----- beq.s 12b76 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12b4e:	|  |      move.l 4(sp),d0
   12b52:	|  |      movea.l 8(sp),a0
   12b56:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12b5a:	|  |      moveq #28,d0
   12b5c:	|  |      add.l 20(sp),d0
   12b60:	|  |      pea 1 <_start+0x1>
   12b64:	|  |      pea 1 <_start+0x1>
   12b68:	|  |      move.l d0,-(sp)
   12b6a:	|  |      jsr 1518e <setVariable>
   12b70:	|  |      lea 12(sp),sp
   12b74:	|  |  ,-- bra.s 12b8e <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b76:	|  '--|-> moveq #28,d0
   12b78:	|     |   add.l 20(sp),d0
   12b7c:	|     |   clr.l -(sp)
   12b7e:	|     |   pea 1 <_start+0x1>
   12b82:	|     |   move.l d0,-(sp)
   12b84:	|     |   jsr 1518e <setVariable>
   12b8a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b8e:	|     '-> moveq #2,d0
}
   12b90:	'-------> lea 12(sp),sp
   12b94:	          rts

00012b96 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12b96:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b98:	       movea.l 12(sp),a0
   12b9c:	       move.l 24(a0),d0
   12ba0:	       move.l d0,-(sp)
   12ba2:	       pea 1 <_start+0x1>
   12ba6:	       move.l sp,d0
   12ba8:	       addq.l #8,d0
   12baa:	       move.l d0,-(sp)
   12bac:	       jsr 1489c <getValueType>
   12bb2:	       lea 12(sp),sp
   12bb6:	       tst.w d0
   12bb8:	   ,-- bne.s 12bbe <builtIn_transitionMode+0x28>
   12bba:	   |   moveq #1,d0
   12bbc:	,--|-- bra.s 12bf4 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12bbe:	|  '-> move.l (sp),d0
   12bc0:	|      move.l d0,d0
   12bc2:	|      move.b d0,1ca98 <fadeMode>
	trimStack (&fun -> stack);
   12bc8:	|      moveq #24,d0
   12bca:	|      add.l 12(sp),d0
   12bce:	|      move.l d0,-(sp)
   12bd0:	|      jsr 15220 <trimStack>
   12bd6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bd8:	|      moveq #28,d0
   12bda:	|      add.l 12(sp),d0
   12bde:	|      pea 1 <_start+0x1>
   12be2:	|      pea 1 <_start+0x1>
   12be6:	|      move.l d0,-(sp)
   12be8:	|      jsr 1518e <setVariable>
   12bee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12bf2:	|      moveq #2,d0
}
   12bf4:	'----> addq.l #4,sp
   12bf6:	       rts

00012bf8 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12bf8:	moveq #24,d0
   12bfa:	add.l 8(sp),d0
   12bfe:	move.l d0,-(sp)
   12c00:	jsr 15220 <trimStack>
   12c06:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12c08:	moveq #28,d0
   12c0a:	add.l 8(sp),d0
   12c0e:	pea 1 <_start+0x1>
   12c12:	pea 1 <_start+0x1>
   12c16:	move.l d0,-(sp)
   12c18:	jsr 1518e <setVariable>
   12c1e:	lea 12(sp),sp
	return BR_CONTINUE;
   12c22:	moveq #2,d0
}
   12c24:	rts

00012c26 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12c26:	pea 19e54 <talk.c.490538ff+0x1e9>
   12c2c:	jsr 1737c <KPrintF>
   12c32:	addq.l #4,sp
	return BR_CONTINUE;
   12c34:	moveq #2,d0
}
   12c36:	rts

00012c38 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12c38:	       lea -16(sp),sp
   12c3c:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12c3e:	       movea.l 28(sp),a0
   12c42:	       move.l 24(a0),d0
   12c46:	       move.l d0,-(sp)
   12c48:	       jsr 14e72 <getTextFromAnyVar>
   12c4e:	       addq.l #4,sp
   12c50:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12c54:	   ,-- bne.s 12c5c <builtIn_saveCustomData+0x24>
   12c56:	   |   moveq #1,d0
   12c58:	,--|-- bra.w 12d0e <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12c5c:	|  '-> move.l 16(sp),-(sp)
   12c60:	|      jsr 2fe <encodeFilename>
   12c66:	|      addq.l #4,sp
   12c68:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12c6c:	|      move.l 16(sp),8(sp)
   12c72:	|      move.l 1cbca <SysBase>,d0
   12c78:	|      movea.l d0,a6
   12c7a:	|      movea.l 8(sp),a1
   12c7e:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12c82:	|      move.l 12(sp),-(sp)
   12c86:	|      jsr e39c <failSecurityCheck>
   12c8c:	|      addq.l #4,sp
   12c8e:	|      tst.w d0
   12c90:	|  ,-- beq.s 12c96 <builtIn_saveCustomData+0x5e>
   12c92:	|  |   moveq #1,d0
   12c94:	+--|-- bra.s 12d0e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c96:	|  '-> moveq #24,d0
   12c98:	|      add.l 28(sp),d0
   12c9c:	|      move.l d0,-(sp)
   12c9e:	|      jsr 15220 <trimStack>
   12ca4:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12ca6:	|      movea.l 28(sp),a0
   12caa:	|      movea.l 24(a0),a0
   12cae:	|      move.l (a0),d0
   12cb0:	|      moveq #6,d1
   12cb2:	|      cmp.l d0,d1
   12cb4:	|  ,-- beq.s 12cc8 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12cb6:	|  |   pea 19e81 <talk.c.490538ff+0x216>
   12cbc:	|  |   jsr 1737c <KPrintF>
   12cc2:	|  |   addq.l #4,sp
		return BR_ERROR;
   12cc4:	|  |   moveq #1,d0
   12cc6:	+--|-- bra.s 12d0e <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12cc8:	|  '-> movea.l 28(sp),a0
   12ccc:	|      move.l 24(a0),d0
   12cd0:	|      move.l d0,-(sp)
   12cd2:	|      move.l 16(sp),-(sp)
   12cd6:	|      jsr dfec <stackToFile>
   12cdc:	|      addq.l #8,sp
   12cde:	|      tst.w d0
   12ce0:	|  ,-- bne.s 12ce6 <builtIn_saveCustomData+0xae>
   12ce2:	|  |   moveq #1,d0
   12ce4:	+--|-- bra.s 12d0e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12ce6:	|  '-> moveq #24,d0
   12ce8:	|      add.l 28(sp),d0
   12cec:	|      move.l d0,-(sp)
   12cee:	|      jsr 15220 <trimStack>
   12cf4:	|      addq.l #4,sp
	FreeVec(fileName);
   12cf6:	|      move.l 12(sp),4(sp)
   12cfc:	|      move.l 1cbca <SysBase>,d0
   12d02:	|      movea.l d0,a6
   12d04:	|      movea.l 4(sp),a1
   12d08:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d0c:	|      moveq #2,d0
}
   12d0e:	'----> movea.l (sp)+,a6
   12d10:	       lea 16(sp),sp
   12d14:	       rts

00012d16 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12d16:	       lea -28(sp),sp
   12d1a:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12d1c:	       movea.l 40(sp),a0
   12d20:	       move.l 24(a0),d0
   12d24:	       move.l d0,-(sp)
   12d26:	       jsr 14e72 <getTextFromAnyVar>
   12d2c:	       addq.l #4,sp
   12d2e:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12d32:	   ,-- bne.s 12d3a <builtIn_loadCustomData+0x24>
   12d34:	   |   moveq #1,d0
   12d36:	,--|-- bra.w 12e36 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12d3a:	|  '-> move.l 28(sp),-(sp)
   12d3e:	|      jsr 2fe <encodeFilename>
   12d44:	|      addq.l #4,sp
   12d46:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12d4a:	|      move.l 28(sp),20(sp)
   12d50:	|      move.l 1cbca <SysBase>,d0
   12d56:	|      movea.l d0,a6
   12d58:	|      movea.l 20(sp),a1
   12d5c:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12d60:	|      move.l 24(sp),-(sp)
   12d64:	|      jsr e39c <failSecurityCheck>
   12d6a:	|      addq.l #4,sp
   12d6c:	|      tst.w d0
   12d6e:	|  ,-- beq.s 12d76 <builtIn_loadCustomData+0x60>
   12d70:	|  |   moveq #1,d0
   12d72:	+--|-- bra.w 12e36 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12d76:	|  '-> moveq #24,d0
   12d78:	|      add.l 40(sp),d0
   12d7c:	|      move.l d0,-(sp)
   12d7e:	|      jsr 15220 <trimStack>
   12d84:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12d86:	|      moveq #28,d0
   12d88:	|      add.l 40(sp),d0
   12d8c:	|      move.l d0,-(sp)
   12d8e:	|      jsr 14aea <unlinkVar>
   12d94:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12d96:	|      movea.l 40(sp),a0
   12d9a:	|      moveq #6,d0
   12d9c:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12da0:	|      moveq #12,d0
   12da2:	|      move.l d0,16(sp)
   12da6:	|      clr.l 12(sp)
   12daa:	|      move.l 1cbca <SysBase>,d0
   12db0:	|      movea.l d0,a6
   12db2:	|      move.l 16(sp),d0
   12db6:	|      move.l 12(sp),d1
   12dba:	|      jsr -684(a6)
   12dbe:	|      move.l d0,8(sp)
   12dc2:	|      move.l 8(sp),d0
   12dc6:	|      movea.l 40(sp),a0
   12dca:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12dce:	|      movea.l 40(sp),a0
   12dd2:	|      move.l 32(a0),d0
   12dd6:	|  ,-- bne.s 12ddc <builtIn_loadCustomData+0xc6>
   12dd8:	|  |   moveq #1,d0
   12dda:	+--|-- bra.s 12e36 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12ddc:	|  '-> movea.l 40(sp),a0
   12de0:	|      movea.l 32(a0),a0
   12de4:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12de6:	|      movea.l 40(sp),a0
   12dea:	|      movea.l 32(a0),a0
   12dee:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12df2:	|      movea.l 40(sp),a0
   12df6:	|      movea.l 32(a0),a0
   12dfa:	|      moveq #1,d0
   12dfc:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12e00:	|      movea.l 40(sp),a0
   12e04:	|      move.l 32(a0),d0
   12e08:	|      move.l d0,-(sp)
   12e0a:	|      move.l 28(sp),-(sp)
   12e0e:	|      jsr da26 <fileToStack>
   12e14:	|      addq.l #8,sp
   12e16:	|      tst.w d0
   12e18:	|  ,-- bne.s 12e1e <builtIn_loadCustomData+0x108>
   12e1a:	|  |   moveq #1,d0
   12e1c:	+--|-- bra.s 12e36 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12e1e:	|  '-> move.l 24(sp),4(sp)
   12e24:	|      move.l 1cbca <SysBase>,d0
   12e2a:	|      movea.l d0,a6
   12e2c:	|      movea.l 4(sp),a1
   12e30:	|      jsr -690(a6)
	return BR_CONTINUE;
   12e34:	|      moveq #2,d0
}
   12e36:	'----> movea.l (sp)+,a6
   12e38:	       lea 28(sp),sp
   12e3c:	       rts

00012e3e <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12e3e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e40:	       movea.l 12(sp),a0
   12e44:	       move.l 24(a0),d0
   12e48:	       move.l d0,-(sp)
   12e4a:	       pea 1 <_start+0x1>
   12e4e:	       move.l sp,d0
   12e50:	       addq.l #8,d0
   12e52:	       move.l d0,-(sp)
   12e54:	       jsr 1489c <getValueType>
   12e5a:	       lea 12(sp),sp
   12e5e:	       tst.w d0
   12e60:	   ,-- bne.s 12e66 <builtIn_setCustomEncoding+0x28>
   12e62:	   |   moveq #1,d0
   12e64:	,--|-- bra.s 12e9c <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12e66:	|  '-> move.l (sp),d0
   12e68:	|      move.l d0,d0
   12e6a:	|      move.w d0,1cc7e <saveEncoding>
	trimStack (&fun -> stack);
   12e70:	|      moveq #24,d0
   12e72:	|      add.l 12(sp),d0
   12e76:	|      move.l d0,-(sp)
   12e78:	|      jsr 15220 <trimStack>
   12e7e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12e80:	|      moveq #28,d0
   12e82:	|      add.l 12(sp),d0
   12e86:	|      pea 1 <_start+0x1>
   12e8a:	|      pea 1 <_start+0x1>
   12e8e:	|      move.l d0,-(sp)
   12e90:	|      jsr 1518e <setVariable>
   12e96:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12e9a:	|      moveq #2,d0
}
   12e9c:	'----> addq.l #4,sp
   12e9e:	       rts

00012ea0 <builtIn_freeSound>:

builtIn(freeSound)
{
   12ea0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ea2:	       movea.l 12(sp),a0
   12ea6:	       move.l 24(a0),d0
   12eaa:	       move.l d0,-(sp)
   12eac:	       pea 5 <_start+0x5>
   12eb0:	       move.l sp,d0
   12eb2:	       addq.l #8,d0
   12eb4:	       move.l d0,-(sp)
   12eb6:	       jsr 1489c <getValueType>
   12ebc:	       lea 12(sp),sp
   12ec0:	       tst.w d0
   12ec2:	   ,-- bne.s 12ec8 <builtIn_freeSound+0x28>
   12ec4:	   |   moveq #1,d0
   12ec6:	,--|-- bra.s 12ee6 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12ec8:	|  '-> moveq #24,d0
   12eca:	|      add.l 12(sp),d0
   12ece:	|      move.l d0,-(sp)
   12ed0:	|      jsr 15220 <trimStack>
   12ed6:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12ed8:	|      move.l (sp),d0
   12eda:	|      move.l d0,-(sp)
   12edc:	|      jsr d1de <huntKillFreeSound>
   12ee2:	|      addq.l #4,sp
	return BR_CONTINUE;
   12ee4:	|      moveq #2,d0
}
   12ee6:	'----> addq.l #4,sp
   12ee8:	       rts

00012eea <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12eea:	       lea -12(sp),sp
   12eee:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ef0:	       movea.l 24(sp),a0
   12ef4:	       move.l 24(a0),d0
   12ef8:	       move.l d0,-(sp)
   12efa:	       pea 1 <_start+0x1>
   12efe:	       moveq #16,d0
   12f00:	       add.l sp,d0
   12f02:	       move.l d0,-(sp)
   12f04:	       jsr 1489c <getValueType>
   12f0a:	       lea 12(sp),sp
   12f0e:	       tst.w d0
   12f10:	   ,-- bne.s 12f18 <builtIn_parallaxAdd+0x2e>
   12f12:	   |   moveq #1,d0
   12f14:	,--|-- bra.w 12fec <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f18:	|  '-> moveq #24,d0
   12f1a:	|      add.l 24(sp),d0
   12f1e:	|      move.l d0,-(sp)
   12f20:	|      jsr 15220 <trimStack>
   12f26:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f28:	|      movea.l 24(sp),a0
   12f2c:	|      move.l 24(a0),d0
   12f30:	|      move.l d0,-(sp)
   12f32:	|      pea 1 <_start+0x1>
   12f36:	|      moveq #20,d0
   12f38:	|      add.l sp,d0
   12f3a:	|      move.l d0,-(sp)
   12f3c:	|      jsr 1489c <getValueType>
   12f42:	|      lea 12(sp),sp
   12f46:	|      tst.w d0
   12f48:	|  ,-- bne.s 12f50 <builtIn_parallaxAdd+0x66>
   12f4a:	|  |   moveq #1,d0
   12f4c:	+--|-- bra.w 12fec <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f50:	|  '-> moveq #24,d0
   12f52:	|      add.l 24(sp),d0
   12f56:	|      move.l d0,-(sp)
   12f58:	|      jsr 15220 <trimStack>
   12f5e:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f60:	|      movea.l 24(sp),a0
   12f64:	|      move.l 24(a0),d0
   12f68:	|      move.l d0,-(sp)
   12f6a:	|      pea 5 <_start+0x5>
   12f6e:	|      lea 12(sp),a0
   12f72:	|      move.l a0,-(sp)
   12f74:	|      jsr 1489c <getValueType>
   12f7a:	|      lea 12(sp),sp
   12f7e:	|      tst.w d0
   12f80:	|  ,-- bne.s 12f86 <builtIn_parallaxAdd+0x9c>
   12f82:	|  |   moveq #1,d0
   12f84:	+--|-- bra.s 12fec <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f86:	|  '-> moveq #24,d0
   12f88:	|      add.l 24(sp),d0
   12f8c:	|      move.l d0,-(sp)
   12f8e:	|      jsr 15220 <trimStack>
   12f94:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12f96:	|      move.l 8(sp),d0
   12f9a:	|      move.l d0,d0
   12f9c:	|      moveq #0,d2
   12f9e:	|      move.w d0,d2
   12fa0:	|      move.l 12(sp),d0
   12fa4:	|      move.l d0,d0
   12fa6:	|      moveq #0,d1
   12fa8:	|      move.w d0,d1
   12faa:	|      move.l 4(sp),d0
   12fae:	|      move.l d0,d0
   12fb0:	|      move.w d0,d0
   12fb2:	|      andi.l #65535,d0
   12fb8:	|      move.l d2,-(sp)
   12fba:	|      move.l d1,-(sp)
   12fbc:	|      move.l d0,-(sp)
   12fbe:	|      jsr d404 <loadParallax>
   12fc4:	|      lea 12(sp),sp
   12fc8:	|      tst.w d0
   12fca:	|  ,-- bne.s 12fd0 <builtIn_parallaxAdd+0xe6>
   12fcc:	|  |   moveq #1,d0
   12fce:	+--|-- bra.s 12fec <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12fd0:	|  '-> moveq #28,d0
   12fd2:	|      add.l 24(sp),d0
   12fd6:	|      pea 1 <_start+0x1>
   12fda:	|      pea 1 <_start+0x1>
   12fde:	|      move.l d0,-(sp)
   12fe0:	|      jsr 1518e <setVariable>
   12fe6:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12fea:	|      moveq #2,d0
}
   12fec:	'----> move.l (sp)+,d2
   12fee:	       lea 12(sp),sp
   12ff2:	       rts

00012ff4 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12ff4:	jsr d33c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12ffa:	moveq #28,d0
   12ffc:	add.l 8(sp),d0
   13000:	pea 1 <_start+0x1>
   13004:	pea 1 <_start+0x1>
   13008:	move.l d0,-(sp)
   1300a:	jsr 1518e <setVariable>
   13010:	lea 12(sp),sp
	return BR_CONTINUE;
   13014:	moveq #2,d0
}
   13016:	rts

00013018 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13018:	pea 19e9f <talk.c.490538ff+0x234>
   1301e:	jsr 1737c <KPrintF>
   13024:	addq.l #4,sp

	return BR_CONTINUE;
   13026:	moveq #2,d0
}
   13028:	rts

0001302a <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   1302a:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1302c:	             movea.l 16(sp),a0
   13030:	             movea.l 24(a0),a0
   13034:	             move.l (a0),d0
   13036:	             moveq #1,d1
   13038:	             cmp.l d0,d1
   1303a:	      ,----- beq.s 13082 <builtIn_makeFastArray+0x58>
   1303c:	      |      moveq #6,d1
   1303e:	      |      cmp.l d0,d1
   13040:	,-----|----- bne.s 130c0 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   13042:	|     |      movea.l 16(sp),a0
   13046:	|     |      movea.l 24(a0),a0
   1304a:	|     |      move.l 4(a0),d1
   1304e:	|     |      moveq #28,d0
   13050:	|     |      add.l 16(sp),d0
   13054:	|     |      move.l d1,-(sp)
   13056:	|     |      move.l d0,-(sp)
   13058:	|     |      jsr 1494e <makeFastArrayFromStack>
   1305e:	|     |      addq.l #8,sp
   13060:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13064:	|     |      moveq #24,d0
   13066:	|     |      add.l 16(sp),d0
   1306a:	|     |      move.l d0,-(sp)
   1306c:	|     |      jsr 15220 <trimStack>
   13072:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   13074:	|     |      tst.w 6(sp)
   13078:	|     |  ,-- beq.s 1307e <builtIn_makeFastArray+0x54>
   1307a:	|     |  |   moveq #2,d0
   1307c:	|  ,--|--|-- bra.s 130d2 <builtIn_makeFastArray+0xa8>
   1307e:	|  |  |  '-> moveq #1,d0
   13080:	|  +--|----- bra.s 130d2 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   13082:	|  |  '----> movea.l 16(sp),a0
   13086:	|  |         movea.l 24(a0),a0
   1308a:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   13090:	|  |         moveq #24,d0
   13092:	|  |         add.l 16(sp),d0
   13096:	|  |         move.l d0,-(sp)
   13098:	|  |         jsr 15220 <trimStack>
   1309e:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   130a0:	|  |         moveq #28,d0
   130a2:	|  |         add.l 16(sp),d0
   130a6:	|  |         move.l 2(sp),-(sp)
   130aa:	|  |         move.l d0,-(sp)
   130ac:	|  |         jsr 149b8 <makeFastArraySize>
   130b2:	|  |         addq.l #8,sp
   130b4:	|  |         tst.w d0
   130b6:	|  |     ,-- beq.s 130bc <builtIn_makeFastArray+0x92>
   130b8:	|  |     |   moveq #2,d0
   130ba:	|  +-----|-- bra.s 130d2 <builtIn_makeFastArray+0xa8>
   130bc:	|  |     '-> moveq #1,d0
   130be:	|  +-------- bra.s 130d2 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   130c0:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   130c2:	   |         pea 19ec8 <talk.c.490538ff+0x25d>
   130c8:	   |         jsr 1737c <KPrintF>
   130ce:	   |         addq.l #4,sp
	return BR_ERROR;
   130d0:	   |         moveq #1,d0
}
   130d2:	   '-------> addq.l #8,sp
   130d4:	             rts

000130d6 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   130d6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130d8:	          movea.l 16(sp),a0
   130dc:	          move.l 24(a0),d0
   130e0:	          move.l d0,-(sp)
   130e2:	          pea 7 <_start+0x7>
   130e6:	          move.l sp,d0
   130e8:	          addq.l #8,d0
   130ea:	          move.l d0,-(sp)
   130ec:	          jsr 1489c <getValueType>
   130f2:	          lea 12(sp),sp
   130f6:	          tst.w d0
   130f8:	      ,-- bne.s 130fe <builtIn_getCharacterScale+0x28>
   130fa:	      |   moveq #1,d0
   130fc:	,-----|-- bra.s 13178 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   130fe:	|     '-> moveq #24,d0
   13100:	|         add.l 16(sp),d0
   13104:	|         move.l d0,-(sp)
   13106:	|         jsr 15220 <trimStack>
   1310c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1310e:	|         move.l (sp),d0
   13110:	|         move.l d0,-(sp)
   13112:	|         jsr a642 <findPerson>
   13118:	|         addq.l #4,sp
   1311a:	|         move.l d0,4(sp)
	if (pers) {
   1311e:	|  ,----- beq.s 1315e <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13120:	|  |      movea.l 4(sp),a0
   13124:	|  |      move.l 32(a0),d0
   13128:	|  |      move.l #1120403456,-(sp)
   1312e:	|  |      move.l d0,-(sp)
   13130:	|  |      jsr 17860 <__mulsf3>
   13136:	|  |      addq.l #8,sp
   13138:	|  |      move.l d0,-(sp)
   1313a:	|  |      jsr 17746 <__fixsfsi>
   13140:	|  |      addq.l #4,sp
   13142:	|  |      move.l d0,d1
   13144:	|  |      moveq #28,d0
   13146:	|  |      add.l 16(sp),d0
   1314a:	|  |      move.l d1,-(sp)
   1314c:	|  |      pea 1 <_start+0x1>
   13150:	|  |      move.l d0,-(sp)
   13152:	|  |      jsr 1518e <setVariable>
   13158:	|  |      lea 12(sp),sp
   1315c:	|  |  ,-- bra.s 13176 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1315e:	|  '--|-> moveq #28,d0
   13160:	|     |   add.l 16(sp),d0
   13164:	|     |   clr.l -(sp)
   13166:	|     |   pea 1 <_start+0x1>
   1316a:	|     |   move.l d0,-(sp)
   1316c:	|     |   jsr 1518e <setVariable>
   13172:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13176:	|     '-> moveq #2,d0
}
   13178:	'-------> addq.l #8,sp
   1317a:	          rts

0001317c <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   1317c:	move.l 1cca2 <gameSettings>,d0
   13182:	move.l d0,d1
   13184:	moveq #28,d0
   13186:	add.l 8(sp),d0
   1318a:	move.l d1,-(sp)
   1318c:	pea 1 <_start+0x1>
   13190:	move.l d0,-(sp)
   13192:	jsr 1518e <setVariable>
   13198:	lea 12(sp),sp
	return BR_CONTINUE;
   1319c:	moveq #2,d0
}
   1319e:	rts

000131a0 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   131a0:	moveq #24,d0
   131a2:	add.l 8(sp),d0
   131a6:	move.l d0,-(sp)
   131a8:	jsr 15220 <trimStack>
   131ae:	addq.l #4,sp
	trimStack (&fun -> stack);
   131b0:	moveq #24,d0
   131b2:	add.l 8(sp),d0
   131b6:	move.l d0,-(sp)
   131b8:	jsr 15220 <trimStack>
   131be:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   131c0:	moveq #28,d0
   131c2:	add.l 8(sp),d0
   131c6:	clr.l -(sp)
   131c8:	pea 1 <_start+0x1>
   131cc:	move.l d0,-(sp)
   131ce:	jsr 1518e <setVariable>
   131d4:	lea 12(sp),sp

	return BR_CONTINUE;
   131d8:	moveq #2,d0

}
   131da:	rts

000131dc <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   131dc:	move.l 1c542 <lastFramesPerSecond>,d1
   131e2:	moveq #28,d0
   131e4:	add.l 8(sp),d0
   131e8:	move.l d1,-(sp)
   131ea:	pea 1 <_start+0x1>
   131ee:	move.l d0,-(sp)
   131f0:	jsr 1518e <setVariable>
   131f6:	lea 12(sp),sp
	return BR_CONTINUE;
   131fa:	moveq #2,d0
}
   131fc:	rts

000131fe <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   131fe:	moveq #2,d0
}
   13200:	rts

00013202 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   13202:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13206:	          movea.l 60(sp),a0
   1320a:	          move.l 24(a0),d0
   1320e:	          move.l d0,-(sp)
   13210:	          pea 1 <_start+0x1>
   13214:	          pea 1cad4 <thumbHeight>
   1321a:	          jsr 1489c <getValueType>
   13220:	          lea 12(sp),sp
   13224:	          tst.w d0
   13226:	      ,-- bne.s 1322e <builtIn_setThumbnailSize+0x2c>
   13228:	      |   moveq #1,d0
   1322a:	,-----|-- bra.w 132ea <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1322e:	|     '-> moveq #24,d0
   13230:	|         add.l 60(sp),d0
   13234:	|         move.l d0,-(sp)
   13236:	|         jsr 15220 <trimStack>
   1323c:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1323e:	|         movea.l 60(sp),a0
   13242:	|         move.l 24(a0),d0
   13246:	|         move.l d0,-(sp)
   13248:	|         pea 1 <_start+0x1>
   1324c:	|         pea 1cad0 <thumbWidth>
   13252:	|         jsr 1489c <getValueType>
   13258:	|         lea 12(sp),sp
   1325c:	|         tst.w d0
   1325e:	|     ,-- bne.s 13266 <builtIn_setThumbnailSize+0x64>
   13260:	|     |   moveq #1,d0
   13262:	+-----|-- bra.w 132ea <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13266:	|     '-> moveq #24,d0
   13268:	|         add.l 60(sp),d0
   1326c:	|         move.l d0,-(sp)
   1326e:	|         jsr 15220 <trimStack>
   13274:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13276:	|         move.l 1cad0 <thumbWidth>,d0
   1327c:	|     ,-- bmi.s 132aa <builtIn_setThumbnailSize+0xa8>
   1327e:	|     |   move.l 1cad4 <thumbHeight>,d0
   13284:	|     +-- bmi.s 132aa <builtIn_setThumbnailSize+0xa8>
   13286:	|     |   move.l 1cad0 <thumbWidth>,d0
   1328c:	|     |   move.l d0,d1
   1328e:	|     |   move.l 1cb1e <winWidth>,d0
   13294:	|     |   cmp.l d1,d0
   13296:	|     +-- bcs.s 132aa <builtIn_setThumbnailSize+0xa8>
   13298:	|     |   move.l 1cad4 <thumbHeight>,d0
   1329e:	|     |   move.l d0,d1
   132a0:	|     |   move.l 1cb22 <winHeight>,d0
   132a6:	|     |   cmp.l d1,d0
   132a8:	|  ,--|-- bcc.s 132e8 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   132aa:	|  |  '-> move.l 1cad4 <thumbHeight>,d1
   132b0:	|  |      move.l 1cad0 <thumbWidth>,d0
   132b6:	|  |      move.l d1,-(sp)
   132b8:	|  |      move.l d0,-(sp)
   132ba:	|  |      pea 19eef <talk.c.490538ff+0x284>
   132c0:	|  |      lea 14(sp),a0
   132c4:	|  |      move.l a0,-(sp)
   132c6:	|  |      jsr 140a6 <sprintf>
   132cc:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   132d0:	|  |      lea 2(sp),a0
   132d4:	|  |      move.l a0,-(sp)
   132d6:	|  |      pea 19ef7 <talk.c.490538ff+0x28c>
   132dc:	|  |      jsr 1737c <KPrintF>
   132e2:	|  |      addq.l #8,sp
		return BR_ERROR;
   132e4:	|  |      moveq #1,d0
   132e6:	+--|----- bra.s 132ea <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   132e8:	|  '----> moveq #2,d0
}
   132ea:	'-------> lea 52(sp),sp
   132ee:	          rts

000132f0 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   132f0:	       lea -12(sp),sp
   132f4:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   132f6:	       movea.l 24(sp),a0
   132fa:	       move.l 24(a0),d0
   132fe:	       move.l d0,-(sp)
   13300:	       pea 1 <_start+0x1>
   13304:	       lea 12(sp),a0
   13308:	       move.l a0,-(sp)
   1330a:	       jsr 1489c <getValueType>
   13310:	       lea 12(sp),sp
   13314:	       tst.w d0
   13316:	   ,-- bne.s 1331e <builtIn_hasFlag+0x2e>
   13318:	   |   moveq #1,d0
   1331a:	,--|-- bra.w 133ae <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1331e:	|  '-> moveq #24,d0
   13320:	|      add.l 24(sp),d0
   13324:	|      move.l d0,-(sp)
   13326:	|      jsr 15220 <trimStack>
   1332c:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1332e:	|      movea.l 24(sp),a0
   13332:	|      move.l 24(a0),d0
   13336:	|      move.l d0,-(sp)
   13338:	|      pea 7 <_start+0x7>
   1333c:	|      moveq #16,d0
   1333e:	|      add.l sp,d0
   13340:	|      move.l d0,-(sp)
   13342:	|      jsr 1489c <getValueType>
   13348:	|      lea 12(sp),sp
   1334c:	|      tst.w d0
   1334e:	|  ,-- bne.s 13354 <builtIn_hasFlag+0x64>
   13350:	|  |   moveq #1,d0
   13352:	+--|-- bra.s 133ae <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13354:	|  '-> moveq #24,d0
   13356:	|      add.l 24(sp),d0
   1335a:	|      move.l d0,-(sp)
   1335c:	|      jsr 15220 <trimStack>
   13362:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13364:	|      move.l 8(sp),d0
   13368:	|      move.l d0,-(sp)
   1336a:	|      jsr d5b0 <findObjectType>
   13370:	|      addq.l #4,sp
   13372:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13376:	|  ,-- bne.s 1337c <builtIn_hasFlag+0x8c>
   13378:	|  |   moveq #1,d0
   1337a:	+--|-- bra.s 133ae <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1337c:	|  '-> movea.l 12(sp),a0
   13380:	|      move.w 36(a0),d0
   13384:	|      moveq #0,d2
   13386:	|      move.w d0,d2
   13388:	|      move.l 4(sp),d1
   1338c:	|      moveq #1,d0
   1338e:	|      lsl.l d1,d0
   13390:	|      move.l d2,d1
   13392:	|      and.l d0,d1
   13394:	|      moveq #28,d0
   13396:	|      add.l 24(sp),d0
   1339a:	|      move.l d1,-(sp)
   1339c:	|      pea 1 <_start+0x1>
   133a0:	|      move.l d0,-(sp)
   133a2:	|      jsr 1518e <setVariable>
   133a8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   133ac:	|      moveq #2,d0
}
   133ae:	'----> move.l (sp)+,d2
   133b0:	       lea 12(sp),sp
   133b4:	       rts

000133b6 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   133b6:	       jsr d59e <snapshot>
   133bc:	       tst.w d0
   133be:	,----- beq.s 133c4 <builtIn_snapshotGrab+0xe>
   133c0:	|      moveq #2,d0
   133c2:	|  ,-- bra.s 133c6 <builtIn_snapshotGrab+0x10>
   133c4:	'--|-> moveq #1,d0
}
   133c6:	   '-> rts

000133c8 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   133c8:	jsr d44a <nosnapshot>
	return BR_CONTINUE;
   133ce:	moveq #2,d0
}
   133d0:	rts

000133d2 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   133d2:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   133d4:	move.w 1c41a <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   133dc:	movea.l 12(sp),a0
   133e0:	move.l 24(a0),d0
   133e4:	move.l d0,-(sp)
   133e6:	jsr 14ddc <getBoolean>
   133ec:	addq.l #4,sp
   133ee:	move.w d0,1c41a <allowAnyFilename>
	trimStack (&fun -> stack);
   133f4:	moveq #24,d0
   133f6:	add.l 12(sp),d0
   133fa:	move.l d0,-(sp)
   133fc:	jsr 15220 <trimStack>
   13402:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13404:	movea.w 2(sp),a0
   13408:	moveq #28,d0
   1340a:	add.l 12(sp),d0
   1340e:	move.l a0,-(sp)
   13410:	pea 1 <_start+0x1>
   13414:	move.l d0,-(sp)
   13416:	jsr 1518e <setVariable>
   1341c:	lea 12(sp),sp
	return BR_CONTINUE;
   13420:	moveq #2,d0
}
   13422:	addq.l #4,sp
   13424:	rts

00013426 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13426:	moveq #24,d0
   13428:	add.l 8(sp),d0
   1342c:	move.l d0,-(sp)
   1342e:	jsr 15220 <trimStack>
   13434:	addq.l #4,sp
	trimStack (&fun -> stack);
   13436:	moveq #24,d0
   13438:	add.l 8(sp),d0
   1343c:	move.l d0,-(sp)
   1343e:	jsr 15220 <trimStack>
   13444:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13446:	moveq #28,d0
   13448:	add.l 8(sp),d0
   1344c:	clr.l -(sp)
   1344e:	pea 1 <_start+0x1>
   13452:	move.l d0,-(sp)
   13454:	jsr 1518e <setVariable>
   1345a:	lea 12(sp),sp

	return BR_CONTINUE;
   1345e:	moveq #2,d0
}
   13460:	rts

00013462 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13462:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13464:	movea.l 12(sp),a0
   13468:	move.l 24(a0),d0
   1346c:	move.l d0,-(sp)
   1346e:	jsr 14e72 <getTextFromAnyVar>
   13474:	addq.l #4,sp
   13476:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13478:	moveq #24,d0
   1347a:	add.l 12(sp),d0
   1347e:	move.l d0,-(sp)
   13480:	jsr 15220 <trimStack>
   13486:	addq.l #4,sp
	KPrintF (mess);
   13488:	move.l (sp),-(sp)
   1348a:	jsr 1737c <KPrintF>
   13490:	addq.l #4,sp
	return BR_ERROR;
   13492:	moveq #1,d0
}
   13494:	addq.l #4,sp
   13496:	rts

00013498 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13498:	moveq #24,d0
   1349a:	add.l 8(sp),d0
   1349e:	move.l d0,-(sp)
   134a0:	jsr 15220 <trimStack>
   134a6:	addq.l #4,sp
	trimStack (&fun -> stack);
   134a8:	moveq #24,d0
   134aa:	add.l 8(sp),d0
   134ae:	move.l d0,-(sp)
   134b0:	jsr 15220 <trimStack>
   134b6:	addq.l #4,sp
	trimStack (&fun -> stack);
   134b8:	moveq #24,d0
   134ba:	add.l 8(sp),d0
   134be:	move.l d0,-(sp)
   134c0:	jsr 15220 <trimStack>
   134c6:	addq.l #4,sp
	trimStack (&fun -> stack);
   134c8:	moveq #24,d0
   134ca:	add.l 8(sp),d0
   134ce:	move.l d0,-(sp)
   134d0:	jsr 15220 <trimStack>
   134d6:	addq.l #4,sp

	return BR_CONTINUE;
   134d8:	moveq #2,d0
}
   134da:	rts

000134dc <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   134dc:	moveq #24,d0
   134de:	add.l 8(sp),d0
   134e2:	move.l d0,-(sp)
   134e4:	jsr 15220 <trimStack>
   134ea:	addq.l #4,sp
	trimStack (&fun -> stack);
   134ec:	moveq #24,d0
   134ee:	add.l 8(sp),d0
   134f2:	move.l d0,-(sp)
   134f4:	jsr 15220 <trimStack>
   134fa:	addq.l #4,sp
	trimStack (&fun -> stack);
   134fc:	moveq #24,d0
   134fe:	add.l 8(sp),d0
   13502:	move.l d0,-(sp)
   13504:	jsr 15220 <trimStack>
   1350a:	addq.l #4,sp

	return BR_CONTINUE;
   1350c:	moveq #2,d0

}
   1350e:	rts

00013510 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13510:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13512:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13518:	sne d0
   1351a:	neg.b d0
   1351c:	moveq #0,d1
   1351e:	move.b d0,d1
   13520:	moveq #28,d0
   13522:	add.l 12(sp),d0
   13526:	move.l d1,-(sp)
   13528:	pea 1 <_start+0x1>
   1352c:	move.l d0,-(sp)
   1352e:	jsr 1518e <setVariable>
   13534:	lea 12(sp),sp
	return BR_CONTINUE;
   13538:	moveq #2,d0
}
   1353a:	addq.l #4,sp
   1353c:	rts

0001353e <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1353e:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13540:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13546:	pea 19f0e <talk.c.490538ff+0x2a3>
   1354c:	jsr 1737c <KPrintF>
   13552:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13554:	tst.w 2(sp)
   13558:	sne d0
   1355a:	neg.b d0
   1355c:	moveq #0,d1
   1355e:	move.b d0,d1
   13560:	moveq #28,d0
   13562:	add.l 12(sp),d0
   13566:	move.l d1,-(sp)
   13568:	pea 1 <_start+0x1>
   1356c:	move.l d0,-(sp)
   1356e:	jsr 1518e <setVariable>
   13574:	lea 12(sp),sp
	return BR_CONTINUE;
   13578:	moveq #2,d0
}
   1357a:	addq.l #4,sp
   1357c:	rts

0001357e <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1357e:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13582:	             move.l 104(sp),d0
   13586:	             cmpi.l #166,d0
   1358c:	,----------- bhi.w 1366e <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13590:	|            move.l 104(sp),d0
   13594:	|            add.l d0,d0
   13596:	|            movea.l d0,a1
   13598:	|            adda.l d0,a1
   1359a:	|            lea 1c560 <paramNum>,a0
   135a0:	|            move.l (0,a1,a0.l),d0
   135a4:	|            moveq #-1,d1
   135a6:	|            cmp.l d0,d1
   135a8:	|  ,-------- beq.w 13636 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   135ac:	|  |         move.l 104(sp),d0
   135b0:	|  |         add.l d0,d0
   135b2:	|  |         movea.l d0,a1
   135b4:	|  |         adda.l d0,a1
   135b6:	|  |         lea 1c560 <paramNum>,a0
   135bc:	|  |         move.l (0,a1,a0.l),d0
   135c0:	|  |         cmp.l 108(sp),d0
   135c4:	|  +-------- beq.s 13636 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   135c6:	|  |         move.l 104(sp),d0
   135ca:	|  |         add.l d0,d0
   135cc:	|  |         movea.l d0,a1
   135ce:	|  |         adda.l d0,a1
   135d0:	|  |         lea 1c560 <paramNum>,a0
   135d6:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   135da:	|  |         moveq #1,d1
   135dc:	|  |         cmp.l d0,d1
   135de:	|  |  ,----- bne.s 135e8 <callBuiltIn+0x6a>
   135e0:	|  |  |      move.l #101266,d0
   135e6:	|  |  |  ,-- bra.s 135ee <callBuiltIn+0x70>
   135e8:	|  |  '--|-> move.l #106308,d0
   135ee:	|  |     '-> move.l 104(sp),d1
   135f2:	|  |         add.l d1,d1
   135f4:	|  |         movea.l d1,a1
   135f6:	|  |         adda.l d1,a1
   135f8:	|  |         lea 1c560 <paramNum>,a0
   135fe:	|  |         move.l (0,a1,a0.l),d1
   13602:	|  |         move.l d0,-(sp)
   13604:	|  |         move.l d1,-(sp)
   13606:	|  |         pea 19f46 <talk.c.490538ff+0x2db>
   1360c:	|  |         lea 12(sp),a0
   13610:	|  |         move.l a0,-(sp)
   13612:	|  |         jsr 140a6 <sprintf>
   13618:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1361c:	|  |         movea.l sp,a0
   1361e:	|  |         move.l a0,-(sp)
   13620:	|  |         jsr b8 <copyString>
   13626:	|  |         addq.l #4,sp
   13628:	|  |         move.l d0,-(sp)
   1362a:	|  |         jsr 1737c <KPrintF>
   13630:	|  |         addq.l #4,sp
				return BR_ERROR;
   13632:	|  |         moveq #1,d0
   13634:	|  |     ,-- bra.s 1367e <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13636:	|  '-----|-> move.l 104(sp),d0
   1363a:	|        |   add.l d0,d0
   1363c:	|        |   movea.l d0,a1
   1363e:	|        |   adda.l d0,a1
   13640:	|        |   lea 1c7fc <builtInFunctionArray>,a0
   13646:	|        |   move.l (0,a1,a0.l),d0
   1364a:	+--------|-- beq.s 1366e <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1364c:	|        |   move.l 104(sp),d0
   13650:	|        |   add.l d0,d0
   13652:	|        |   movea.l d0,a1
   13654:	|        |   adda.l d0,a1
   13656:	|        |   lea 1c7fc <builtInFunctionArray>,a0
   1365c:	|        |   movea.l (0,a1,a0.l),a0
   13660:	|        |   move.l 112(sp),-(sp)
   13664:	|        |   move.l 112(sp),-(sp)
   13668:	|        |   jsr (a0)
   1366a:	|        |   addq.l #8,sp
   1366c:	|        +-- bra.s 1367e <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1366e:	'--------|-> pea 19f71 <talk.c.490538ff+0x306>
   13674:	         |   jsr 1737c <KPrintF>
   1367a:	         |   addq.l #4,sp
	return BR_ERROR;
   1367c:	         |   moveq #1,d0
}
   1367e:	         '-> lea 100(sp),sp
   13682:	             rts

00013684 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13684:	          subq.l #8,sp
	int indexNum = -1;
   13686:	          moveq #-1,d0
   13688:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1368c:	          clr.l (sp)
   1368e:	   ,----- bra.s 136b4 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13690:	,--|----> move.l 1cc9a <languageTable>,d1
   13696:	|  |      move.l (sp),d0
   13698:	|  |      add.l d0,d0
   1369a:	|  |      add.l d0,d0
   1369c:	|  |      movea.l d1,a0
   1369e:	|  |      adda.l d0,a0
   136a0:	|  |      move.l (a0),d0
   136a2:	|  |      move.l d0,d1
   136a4:	|  |      move.l 1cca2 <gameSettings>,d0
   136aa:	|  |      cmp.l d1,d0
   136ac:	|  |  ,-- bne.s 136b2 <getLanguageForFileB+0x2e>
   136ae:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136b2:	|  |  '-> addq.l #1,(sp)
   136b4:	|  '----> move.l 1cca6 <gameSettings+0x4>,d0
   136ba:	|         cmp.l (sp),d0
   136bc:	'-------- bcc.s 13690 <getLanguageForFileB+0xc>
	}

	return indexNum;
   136be:	          move.l 4(sp),d0
}
   136c2:	          addq.l #8,sp
   136c4:	          rts

000136c6 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   136c6:	          lea -20(sp),sp
   136ca:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   136cc:	          move.l 28(sp),-(sp)
   136d0:	          jsr 13d88 <strlen>
   136d6:	          addq.l #4,sp
   136d8:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   136dc:	          moveq #4,d0
   136de:	          cmp.l 12(sp),d0
   136e2:	      ,-- bge.s 13706 <getPrefsFilename+0x40>
   136e4:	      |   move.l 12(sp),d0
   136e8:	      |   subq.l #4,d0
   136ea:	      |   movea.l 28(sp),a0
   136ee:	      |   adda.l d0,a0
   136f0:	      |   move.b (a0),d0
   136f2:	      |   cmpi.b #46,d0
   136f6:	      +-- bne.s 13706 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   136f8:	      |   move.l 12(sp),d0
   136fc:	      |   subq.l #4,d0
   136fe:	      |   movea.l 28(sp),a0
   13702:	      |   adda.l d0,a0
   13704:	      |   clr.b (a0)
	}

	char * f = filename;
   13706:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1370c:	          clr.l 20(sp)
   13710:	   ,----- bra.s 13738 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13712:	,--|----> move.l 20(sp),d0
   13716:	|  |      movea.l 28(sp),a0
   1371a:	|  |      adda.l d0,a0
   1371c:	|  |      move.b (a0),d0
   1371e:	|  |      cmpi.b #47,d0
   13722:	|  |  ,-- bne.s 13734 <getPrefsFilename+0x6e>
   13724:	|  |  |   move.l 20(sp),d0
   13728:	|  |  |   addq.l #1,d0
   1372a:	|  |  |   move.l 28(sp),d1
   1372e:	|  |  |   add.l d0,d1
   13730:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13734:	|  |  '-> addq.l #1,20(sp)
   13738:	|  '----> move.l 20(sp),d0
   1373c:	|         cmp.l 12(sp),d0
   13740:	'-------- blt.s 13712 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13742:	          pea 19f9c <talk.c.490538ff+0x331>
   13748:	          move.l 20(sp),-(sp)
   1374c:	          jsr 13dc8 <joinStrings>
   13752:	          addq.l #8,sp
   13754:	          move.l d0,8(sp)

	FreeVec(filename);
   13758:	          move.l 28(sp),4(sp)
   1375e:	          move.l 1cbca <SysBase>,d0
   13764:	          movea.l d0,a6
   13766:	          movea.l 4(sp),a1
   1376a:	          jsr -690(a6)
	filename = NULL;
   1376e:	          clr.l 28(sp)
	return joined;
   13772:	          move.l 8(sp),d0
}
   13776:	          movea.l (sp)+,a6
   13778:	          lea 20(sp),sp
   1377c:	          rts

0001377e <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1377e:	             lea -28(sp),sp
   13782:	             move.l a6,-(sp)
   13784:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13786:	             move.l 1cca6 <gameSettings+0x4>,d0
   1378c:	             move.l d0,d1
   1378e:	             addq.l #1,d1
   13790:	             move.l d1,28(sp)
   13794:	             clr.l 24(sp)
   13798:	             move.l 1cbca <SysBase>,d0
   1379e:	             movea.l d0,a6
   137a0:	             move.l 28(sp),d0
   137a4:	             move.l 24(sp),d1
   137a8:	             jsr -684(a6)
   137ac:	             move.l d0,20(sp)
   137b0:	             move.l 20(sp),d0
   137b4:	             move.l d0,1cc9a <languageTable>
    if( languageTable == 0) {
   137ba:	             move.l 1cc9a <languageTable>,d0
   137c0:	         ,-- bne.s 137d0 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   137c2:	         |   pea 19fa1 <talk.c.490538ff+0x336>
   137c8:	         |   jsr 1737c <KPrintF>
   137ce:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   137d0:	         '-> move.l 1cca6 <gameSettings+0x4>,d0
   137d6:	             move.l d0,d1
   137d8:	             addq.l #1,d1
   137da:	             move.l d1,16(sp)
   137de:	             clr.l 12(sp)
   137e2:	             move.l 1cbca <SysBase>,d0
   137e8:	             movea.l d0,a6
   137ea:	             move.l 16(sp),d0
   137ee:	             move.l 12(sp),d1
   137f2:	             jsr -684(a6)
   137f6:	             move.l d0,8(sp)
   137fa:	             move.l 8(sp),d0
   137fe:	             move.l d0,1cc9e <languageName>
	if( languageName == 0) {
   13804:	             move.l 1cc9e <languageName>,d0
   1380a:	         ,-- bne.s 1381a <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1380c:	         |   pea 19fd7 <talk.c.490538ff+0x36c>
   13812:	         |   jsr 1737c <KPrintF>
   13818:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1381a:	         '-> clr.l 32(sp)
   1381e:	   ,-------- bra.s 13896 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13820:	,--|-------> tst.l 32(sp)
   13824:	|  |  ,----- beq.s 13834 <makeLanguageTable+0xb6>
   13826:	|  |  |      move.l 40(sp),-(sp)
   1382a:	|  |  |      jsr 6bc <get2bytes>
   13830:	|  |  |      addq.l #4,sp
   13832:	|  |  |  ,-- bra.s 13836 <makeLanguageTable+0xb8>
   13834:	|  |  '--|-> moveq #0,d0
   13836:	|  |     '-> movea.l 1cc9a <languageTable>,a0
   1383c:	|  |         move.l 32(sp),d1
   13840:	|  |         add.l d1,d1
   13842:	|  |         add.l d1,d1
   13844:	|  |         adda.l d1,a0
   13846:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13848:	|  |         move.l 1cc9e <languageName>,d1
   1384e:	|  |         move.l 32(sp),d0
   13852:	|  |         add.l d0,d0
   13854:	|  |         add.l d0,d0
   13856:	|  |         movea.l d1,a0
   13858:	|  |         adda.l d0,a0
   1385a:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1385c:	|  |         move.l 1cb74 <gameVersion>,d0
   13862:	|  |         cmpi.l #511,d0
   13868:	|  |     ,-- ble.s 13892 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   1386a:	|  |     |   move.l 1cca6 <gameSettings+0x4>,d0
   13870:	|  |     +-- beq.s 13892 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13872:	|  |     |   move.l 1cc9e <languageName>,d1
   13878:	|  |     |   move.l 32(sp),d0
   1387c:	|  |     |   add.l d0,d0
   1387e:	|  |     |   add.l d0,d0
   13880:	|  |     |   movea.l d1,a2
   13882:	|  |     |   adda.l d0,a2
   13884:	|  |     |   move.l 40(sp),-(sp)
   13888:	|  |     |   jsr b02 <readString>
   1388e:	|  |     |   addq.l #4,sp
   13890:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13892:	|  |     '-> addq.l #1,32(sp)
   13896:	|  '-------> move.l 1cca6 <gameSettings+0x4>,d0
   1389c:	|            cmp.l 32(sp),d0
   138a0:	'----------- bcc.w 13820 <makeLanguageTable+0xa2>
		}
	}
}
   138a4:	             nop
   138a6:	             nop
   138a8:	             movea.l (sp)+,a2
   138aa:	             movea.l (sp)+,a6
   138ac:	             lea 28(sp),sp
   138b0:	             rts

000138b2 <readIniFile>:

void readIniFile (char * filename) {
   138b2:	                      lea -564(sp),sp
   138b6:	                      move.l a6,-(sp)
   138b8:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   138ba:	                      move.l 576(sp),-(sp)
   138be:	                      jsr b8 <copyString>
   138c4:	                      addq.l #4,sp
   138c6:	                      move.l d0,-(sp)
   138c8:	                      jsr 136c6 <getPrefsFilename>
   138ce:	                      addq.l #4,sp
   138d0:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   138d4:	                      move.l 562(sp),558(sp)
   138da:	                      move.l #1005,554(sp)
   138e2:	                      move.l 1cbd2 <DOSBase>,d0
   138e8:	                      movea.l d0,a6
   138ea:	                      move.l 558(sp),d1
   138ee:	                      move.l 554(sp),d2
   138f2:	                      jsr -30(a6)
   138f6:	                      move.l d0,550(sp)
   138fa:	                      move.l 550(sp),d0
   138fe:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13902:	                      clr.l 1cca2 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13908:	                      move.w #1,1ccaa <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13910:	                      clr.l 1ccac <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13916:	                      moveq #1,d0
   13918:	                      move.l d0,1ccb0 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1391e:	                      clr.w 1ccb4 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13924:	                      clr.w 1ccb6 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1392a:	                      clr.w 1ccb8 <gameSettings+0x16>

	FreeVec(langName);
   13930:	                      move.l 562(sp),542(sp)
   13936:	                      move.l 1cbca <SysBase>,d0
   1393c:	                      movea.l d0,a6
   1393e:	                      movea.l 542(sp),a1
   13942:	                      jsr -690(a6)
	langName = NULL;
   13946:	                      clr.l 562(sp)

	if (fp) {
   1394a:	                      tst.l 546(sp)
   1394e:	,-------------------- beq.w 13c2c <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13952:	|                     move.l sp,d0
   13954:	|                     addi.l #265,d0
   1395a:	|                     move.l #257,d1
   13960:	|                     move.l d1,-(sp)
   13962:	|                     clr.l -(sp)
   13964:	|                     move.l d0,-(sp)
   13966:	|                     jsr 17300 <memset>
   1396c:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13970:	|                     move.l sp,d0
   13972:	|                     addq.l #8,d0
   13974:	|                     move.l #257,d1
   1397a:	|                     move.l d1,-(sp)
   1397c:	|                     clr.l -(sp)
   1397e:	|                     move.l d0,-(sp)
   13980:	|                     jsr 17300 <memset>
   13986:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1398a:	|                     clr.b 571(sp)
		char readChar = ' ';
   1398e:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13994:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1399a:	|                     clr.w 566(sp)
		LONG tmp = 0;
   1399e:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   139a2:	|  ,----------------> move.l 546(sp),534(sp)
   139a8:	|  |                  move.l 1cbd2 <DOSBase>,d0
   139ae:	|  |                  movea.l d0,a6
   139b0:	|  |                  move.l 534(sp),d1
   139b4:	|  |                  jsr -306(a6)
   139b8:	|  |                  move.l d0,530(sp)
   139bc:	|  |                  move.l 530(sp),d0
   139c0:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   139c4:	|  |                  moveq #-1,d1
   139c6:	|  |                  cmp.l 538(sp),d1
   139ca:	|  |           ,----- bne.s 139d8 <readIniFile+0x126>
				readChar = '\n';
   139cc:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   139d2:	|  |           |      clr.w 568(sp)
   139d6:	|  |           |  ,-- bra.s 139de <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   139d8:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   139de:	|  |              '-> move.b 570(sp),d0
   139e2:	|  |                  ext.w d0
   139e4:	|  |                  movea.w d0,a0
   139e6:	|  |                  moveq #61,d0
   139e8:	|  |                  cmp.l a0,d0
   139ea:	|  |     ,----------- beq.w 13b94 <readIniFile+0x2e2>
   139ee:	|  |     |            moveq #61,d1
   139f0:	|  |     |            cmp.l a0,d1
   139f2:	|  |  ,--|----------- blt.w 13ba0 <readIniFile+0x2ee>
   139f6:	|  |  |  |            moveq #10,d0
   139f8:	|  |  |  |            cmp.l a0,d0
   139fa:	|  |  |  |        ,-- beq.s 13a04 <readIniFile+0x152>
   139fc:	|  |  |  |        |   moveq #13,d1
   139fe:	|  |  |  |        |   cmp.l a0,d1
   13a00:	|  |  +--|--------|-- bne.w 13ba0 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13a04:	|  |  |  |        '-> tst.w 566(sp)
   13a08:	|  |  |  |     ,----- beq.w 13b82 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13a0c:	|  |  |  |     |      pea 1a00b <talk.c.490538ff+0x3a0>
   13a12:	|  |  |  |     |      move.l sp,d0
   13a14:	|  |  |  |     |      addi.l #269,d0
   13a1a:	|  |  |  |     |      move.l d0,-(sp)
   13a1c:	|  |  |  |     |      jsr 13d48 <strcmp>
   13a22:	|  |  |  |     |      addq.l #8,sp
   13a24:	|  |  |  |     |      tst.l d0
   13a26:	|  |  |  |     |  ,-- bne.s 13a40 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13a28:	|  |  |  |     |  |   move.l sp,d0
   13a2a:	|  |  |  |     |  |   addq.l #8,d0
   13a2c:	|  |  |  |     |  |   move.l d0,-(sp)
   13a2e:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13a34:	|  |  |  |     |  |   addq.l #4,sp
   13a36:	|  |  |  |     |  |   move.l d0,1cca2 <gameSettings>
   13a3c:	|  |  |  |     +--|-- bra.w 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13a40:	|  |  |  |     |  '-> pea 1a014 <talk.c.490538ff+0x3a9>
   13a46:	|  |  |  |     |      move.l sp,d0
   13a48:	|  |  |  |     |      addi.l #269,d0
   13a4e:	|  |  |  |     |      move.l d0,-(sp)
   13a50:	|  |  |  |     |      jsr 13d48 <strcmp>
   13a56:	|  |  |  |     |      addq.l #8,sp
   13a58:	|  |  |  |     |      tst.l d0
   13a5a:	|  |  |  |     |  ,-- bne.s 13a80 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13a5c:	|  |  |  |     |  |   move.l sp,d0
   13a5e:	|  |  |  |     |  |   addq.l #8,d0
   13a60:	|  |  |  |     |  |   move.l d0,-(sp)
   13a62:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13a68:	|  |  |  |     |  |   addq.l #4,sp
   13a6a:	|  |  |  |     |  |   tst.l d0
   13a6c:	|  |  |  |     |  |   seq d0
   13a6e:	|  |  |  |     |  |   neg.b d0
   13a70:	|  |  |  |     |  |   move.b d0,d0
   13a72:	|  |  |  |     |  |   andi.w #255,d0
   13a76:	|  |  |  |     |  |   move.w d0,1ccaa <gameSettings+0x8>
   13a7c:	|  |  |  |     +--|-- bra.w 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13a80:	|  |  |  |     |  '-> pea 1a01b <talk.c.490538ff+0x3b0>
   13a86:	|  |  |  |     |      move.l sp,d0
   13a88:	|  |  |  |     |      addi.l #269,d0
   13a8e:	|  |  |  |     |      move.l d0,-(sp)
   13a90:	|  |  |  |     |      jsr 13d48 <strcmp>
   13a96:	|  |  |  |     |      addq.l #8,sp
   13a98:	|  |  |  |     |      tst.l d0
   13a9a:	|  |  |  |     |  ,-- bne.s 13ab4 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13a9c:	|  |  |  |     |  |   move.l sp,d0
   13a9e:	|  |  |  |     |  |   addq.l #8,d0
   13aa0:	|  |  |  |     |  |   move.l d0,-(sp)
   13aa2:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13aa8:	|  |  |  |     |  |   addq.l #4,sp
   13aaa:	|  |  |  |     |  |   move.l d0,1ccac <gameSettings+0xa>
   13ab0:	|  |  |  |     +--|-- bra.w 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13ab4:	|  |  |  |     |  '-> pea 1a023 <talk.c.490538ff+0x3b8>
   13aba:	|  |  |  |     |      move.l sp,d0
   13abc:	|  |  |  |     |      addi.l #269,d0
   13ac2:	|  |  |  |     |      move.l d0,-(sp)
   13ac4:	|  |  |  |     |      jsr 13d48 <strcmp>
   13aca:	|  |  |  |     |      addq.l #8,sp
   13acc:	|  |  |  |     |      tst.l d0
   13ace:	|  |  |  |     |  ,-- bne.s 13ae8 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13ad0:	|  |  |  |     |  |   move.l sp,d0
   13ad2:	|  |  |  |     |  |   addq.l #8,d0
   13ad4:	|  |  |  |     |  |   move.l d0,-(sp)
   13ad6:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13adc:	|  |  |  |     |  |   addq.l #4,sp
   13ade:	|  |  |  |     |  |   move.l d0,1ccb0 <gameSettings+0xe>
   13ae4:	|  |  |  |     +--|-- bra.w 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13ae8:	|  |  |  |     |  '-> pea 1a02d <talk.c.490538ff+0x3c2>
   13aee:	|  |  |  |     |      move.l sp,d0
   13af0:	|  |  |  |     |      addi.l #269,d0
   13af6:	|  |  |  |     |      move.l d0,-(sp)
   13af8:	|  |  |  |     |      jsr 13d48 <strcmp>
   13afe:	|  |  |  |     |      addq.l #8,sp
   13b00:	|  |  |  |     |      tst.l d0
   13b02:	|  |  |  |     |  ,-- bne.s 13b1c <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13b04:	|  |  |  |     |  |   move.l sp,d0
   13b06:	|  |  |  |     |  |   addq.l #8,d0
   13b08:	|  |  |  |     |  |   move.l d0,-(sp)
   13b0a:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13b10:	|  |  |  |     |  |   addq.l #4,sp
   13b12:	|  |  |  |     |  |   move.l d0,d0
   13b14:	|  |  |  |     |  |   move.w d0,1ccb4 <gameSettings+0x12>
   13b1a:	|  |  |  |     +--|-- bra.s 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13b1c:	|  |  |  |     |  '-> pea 1a039 <talk.c.490538ff+0x3ce>
   13b22:	|  |  |  |     |      move.l sp,d0
   13b24:	|  |  |  |     |      addi.l #269,d0
   13b2a:	|  |  |  |     |      move.l d0,-(sp)
   13b2c:	|  |  |  |     |      jsr 13d48 <strcmp>
   13b32:	|  |  |  |     |      addq.l #8,sp
   13b34:	|  |  |  |     |      tst.l d0
   13b36:	|  |  |  |     |  ,-- bne.s 13b50 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13b38:	|  |  |  |     |  |   move.l sp,d0
   13b3a:	|  |  |  |     |  |   addq.l #8,d0
   13b3c:	|  |  |  |     |  |   move.l d0,-(sp)
   13b3e:	|  |  |  |     |  |   jsr 13c38 <stringToInt>
   13b44:	|  |  |  |     |  |   addq.l #4,sp
   13b46:	|  |  |  |     |  |   move.l d0,d0
   13b48:	|  |  |  |     |  |   move.w d0,1ccb6 <gameSettings+0x14>
   13b4e:	|  |  |  |     +--|-- bra.s 13b82 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13b50:	|  |  |  |     |  '-> pea 1a047 <talk.c.490538ff+0x3dc>
   13b56:	|  |  |  |     |      move.l sp,d0
   13b58:	|  |  |  |     |      addi.l #269,d0
   13b5e:	|  |  |  |     |      move.l d0,-(sp)
   13b60:	|  |  |  |     |      jsr 13d48 <strcmp>
   13b66:	|  |  |  |     |      addq.l #8,sp
   13b68:	|  |  |  |     |      tst.l d0
   13b6a:	|  |  |  |     +----- bne.s 13b82 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13b6c:	|  |  |  |     |      move.l sp,d0
   13b6e:	|  |  |  |     |      addq.l #8,d0
   13b70:	|  |  |  |     |      move.l d0,-(sp)
   13b72:	|  |  |  |     |      jsr 13c38 <stringToInt>
   13b78:	|  |  |  |     |      addq.l #4,sp
   13b7a:	|  |  |  |     |      move.l d0,d0
   13b7c:	|  |  |  |     |      move.w d0,1ccb8 <gameSettings+0x16>
					}
				}
				here = 0;
   13b82:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13b86:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13b8a:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13b8e:	|  |  |  |            clr.b 8(sp)
				break;
   13b92:	|  |  |  |  ,-------- bra.s 13c0a <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13b94:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13b9a:	|  |  |     |         clr.b 571(sp)
				break;
   13b9e:	|  |  |     +-------- bra.s 13c0a <readIniFile+0x358>

				default:
				if (doingSecond) {
   13ba0:	|  |  '-----|-------> tst.w 566(sp)
   13ba4:	|  |        |  ,----- beq.s 13bd8 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13ba6:	|  |        |  |      move.b 571(sp),d0
   13baa:	|  |        |  |      move.b d0,d1
   13bac:	|  |        |  |      addq.b #1,d1
   13bae:	|  |        |  |      move.b d1,571(sp)
   13bb2:	|  |        |  |      move.b d0,d0
   13bb4:	|  |        |  |      andi.l #255,d0
   13bba:	|  |        |  |      lea 572(sp),a0
   13bbe:	|  |        |  |      adda.l d0,a0
   13bc0:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13bc6:	|  |        |  |      moveq #0,d0
   13bc8:	|  |        |  |      move.b 571(sp),d0
   13bcc:	|  |        |  |      lea 572(sp),a0
   13bd0:	|  |        |  |      adda.l d0,a0
   13bd2:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13bd6:	|  |        |  |  ,-- bra.s 13c08 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13bd8:	|  |        |  '--|-> move.b 571(sp),d0
   13bdc:	|  |        |     |   move.b d0,d1
   13bde:	|  |        |     |   addq.b #1,d1
   13be0:	|  |        |     |   move.b d1,571(sp)
   13be4:	|  |        |     |   move.b d0,d0
   13be6:	|  |        |     |   andi.l #255,d0
   13bec:	|  |        |     |   lea 572(sp),a0
   13bf0:	|  |        |     |   adda.l d0,a0
   13bf2:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13bf8:	|  |        |     |   moveq #0,d0
   13bfa:	|  |        |     |   move.b 571(sp),d0
   13bfe:	|  |        |     |   lea 572(sp),a0
   13c02:	|  |        |     |   adda.l d0,a0
   13c04:	|  |        |     |   clr.b -307(a0)
				break;
   13c08:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13c0a:	|  |        '-------> tst.w 568(sp)
   13c0e:	|  '----------------- bne.w 139a2 <readIniFile+0xf0>

		Close(fp);
   13c12:	|                     move.l 546(sp),526(sp)
   13c18:	|                     move.l 1cbd2 <DOSBase>,d0
   13c1e:	|                     movea.l d0,a6
   13c20:	|                     move.l 526(sp),d1
   13c24:	|                     jsr -36(a6)
   13c28:	|                     move.l d0,522(sp)
	}
}
   13c2c:	'-------------------> nop
   13c2e:	                      move.l (sp)+,d2
   13c30:	                      movea.l (sp)+,a6
   13c32:	                      lea 564(sp),sp
   13c36:	                      rts

00013c38 <stringToInt>:

unsigned int stringToInt (char * s) {
   13c38:	             subq.l #8,sp
	int i = 0;
   13c3a:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13c3e:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13c42:	,----------> movea.l 12(sp),a0
   13c46:	|            move.b (a0),d0
   13c48:	|            cmpi.b #47,d0
   13c4c:	|        ,-- ble.s 13c84 <stringToInt+0x4c>
   13c4e:	|        |   movea.l 12(sp),a0
   13c52:	|        |   move.b (a0),d0
   13c54:	|        |   cmpi.b #57,d0
   13c58:	|        +-- bgt.s 13c84 <stringToInt+0x4c>
			i *= 10;
   13c5a:	|        |   move.l 4(sp),d1
   13c5e:	|        |   move.l d1,d0
   13c60:	|        |   add.l d0,d0
   13c62:	|        |   add.l d0,d0
   13c64:	|        |   add.l d1,d0
   13c66:	|        |   add.l d0,d0
   13c68:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13c6c:	|        |   movea.l 12(sp),a0
   13c70:	|        |   move.b (a0),d0
   13c72:	|        |   ext.w d0
   13c74:	|        |   movea.w d0,a0
   13c76:	|        |   moveq #-48,d0
   13c78:	|        |   add.l a0,d0
   13c7a:	|        |   add.l d0,4(sp)
			s ++;
   13c7e:	|        |   addq.l #1,12(sp)
   13c82:	|  ,-----|-- bra.s 13cbc <stringToInt+0x84>
		} else if (*s == '-') {
   13c84:	|  |     '-> movea.l 12(sp),a0
   13c88:	|  |         move.b (a0),d0
   13c8a:	|  |         cmpi.b #45,d0
   13c8e:	|  |     ,-- bne.s 13ca8 <stringToInt+0x70>
			negative = ! negative;
   13c90:	|  |     |   tst.w 2(sp)
   13c94:	|  |     |   seq d0
   13c96:	|  |     |   neg.b d0
   13c98:	|  |     |   move.b d0,d0
   13c9a:	|  |     |   andi.w #255,d0
   13c9e:	|  |     |   move.w d0,2(sp)
			s++;
   13ca2:	|  |     |   addq.l #1,12(sp)
   13ca6:	+--|-----|-- bra.s 13c42 <stringToInt+0xa>
		} else {
			if (negative)
   13ca8:	|  |     '-> tst.w 2(sp)
   13cac:	|  |     ,-- beq.s 13cb6 <stringToInt+0x7e>
				return -i;
   13cae:	|  |     |   move.l 4(sp),d0
   13cb2:	|  |     |   neg.l d0
   13cb4:	|  |  ,--|-- bra.s 13cbe <stringToInt+0x86>
			return i;
   13cb6:	|  |  |  '-> move.l 4(sp),d0
   13cba:	|  |  +----- bra.s 13cbe <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13cbc:	'--'--|----X bra.s 13c42 <stringToInt+0xa>
		}
	}
   13cbe:	      '----> addq.l #8,sp
   13cc0:	             rts

00013cc2 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13cc2:	    lea -28(sp),sp
   13cc6:	    move.l a6,-(sp)
   13cc8:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13cca:	    pea 1a051 <talk.c.490538ff+0x3e6>
   13cd0:	    jsr 1737c <KPrintF>
   13cd6:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13cd8:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13cdc:	    move.l 40(sp),30(sp)
   13ce2:	    move.l #1005,26(sp)
   13cea:	    move.l 1cbd2 <DOSBase>,d0
   13cf0:	    movea.l d0,a6
   13cf2:	    move.l 30(sp),d1
   13cf6:	    move.l 26(sp),d2
   13cfa:	    jsr -30(a6)
   13cfe:	    move.l d0,22(sp)
   13d02:	    move.l 22(sp),d0
   13d06:	    move.l d0,18(sp)
	if (tester) {
   13d0a:	,-- beq.s 13d3a <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13d0c:	|   pea 1a06b <talk.c.490538ff+0x400>
   13d12:	|   jsr 1737c <KPrintF>
   13d18:	|   addq.l #4,sp
		retval = 1;
   13d1a:	|   move.b #1,35(sp)
		Close(tester);
   13d20:	|   move.l 18(sp),14(sp)
   13d26:	|   move.l 1cbd2 <DOSBase>,d0
   13d2c:	|   movea.l d0,a6
   13d2e:	|   move.l 14(sp),d1
   13d32:	|   jsr -36(a6)
   13d36:	|   move.l d0,10(sp)
	}
	return retval;
   13d3a:	'-> move.b 35(sp),d0
   13d3e:	    move.l (sp)+,d2
   13d40:	    movea.l (sp)+,a6
   13d42:	    lea 28(sp),sp
   13d46:	    rts

00013d48 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13d48:	   ,-- bra.s 13d52 <strcmp+0xa>
    {
        s1++;
   13d4a:	,--|-> addq.l #1,4(sp)
        s2++;
   13d4e:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13d52:	|  '-> movea.l 4(sp),a0
   13d56:	|      move.b (a0),d0
   13d58:	|  ,-- beq.s 13d6a <strcmp+0x22>
   13d5a:	|  |   movea.l 4(sp),a0
   13d5e:	|  |   move.b (a0),d1
   13d60:	|  |   movea.l 8(sp),a0
   13d64:	|  |   move.b (a0),d0
   13d66:	|  |   cmp.b d1,d0
   13d68:	'--|-- beq.s 13d4a <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13d6a:	   '-> movea.l 4(sp),a0
   13d6e:	       move.b (a0),d0
   13d70:	       moveq #0,d1
   13d72:	       move.b d0,d1
   13d74:	       movea.l 8(sp),a0
   13d78:	       move.b (a0),d0
   13d7a:	       move.b d0,d0
   13d7c:	       andi.l #255,d0
   13d82:	       sub.l d0,d1
   13d84:	       move.l d1,d0
}
   13d86:	       rts

00013d88 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13d88:	       subq.l #4,sp
	long unsigned int i = 0;
   13d8a:	       clr.l (sp)
	while(s[i]) i++; 
   13d8c:	   ,-- bra.s 13d90 <strlen+0x8>
   13d8e:	,--|-> addq.l #1,(sp)
   13d90:	|  '-> movea.l 8(sp),a0
   13d94:	|      adda.l (sp),a0
   13d96:	|      move.b (a0),d0
   13d98:	'----- bne.s 13d8e <strlen+0x6>
	return(i);
   13d9a:	       move.l (sp),d0
}
   13d9c:	       addq.l #4,sp
   13d9e:	       rts

00013da0 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13da0:	    nop
   13da2:	,-> move.l 8(sp),d0
   13da6:	|   move.l d0,d1
   13da8:	|   addq.l #1,d1
   13daa:	|   move.l d1,8(sp)
   13dae:	|   movea.l 4(sp),a0
   13db2:	|   lea 1(a0),a1
   13db6:	|   move.l a1,4(sp)
   13dba:	|   movea.l d0,a1
   13dbc:	|   move.b (a1),d0
   13dbe:	|   move.b d0,(a0)
   13dc0:	|   move.b (a0),d0
   13dc2:	'-- bne.s 13da2 <strcpy+0x2>
}
   13dc4:	    nop
   13dc6:	    rts

00013dc8 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13dc8:	    lea -20(sp),sp
   13dcc:	    move.l a6,-(sp)
   13dce:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13dd0:	    move.l 32(sp),-(sp)
   13dd4:	    jsr 13d88 <strlen>
   13dda:	    addq.l #4,sp
   13ddc:	    move.l d0,d2
   13dde:	    move.l 36(sp),-(sp)
   13de2:	    jsr 13d88 <strlen>
   13de8:	    addq.l #4,sp
   13dea:	    add.l d2,d0
   13dec:	    move.l d0,d1
   13dee:	    addq.l #1,d1
   13df0:	    move.l d1,20(sp)
   13df4:	    clr.l 16(sp)
   13df8:	    move.l 1cbca <SysBase>,d0
   13dfe:	    movea.l d0,a6
   13e00:	    move.l 20(sp),d0
   13e04:	    move.l 16(sp),d1
   13e08:	    jsr -684(a6)
   13e0c:	    move.l d0,12(sp)
   13e10:	    move.l 12(sp),d0
   13e14:	    move.l d0,8(sp)
	char * t = newString;
   13e18:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13e1e:	    nop
   13e20:	,-> move.l 32(sp),d0
   13e24:	|   move.l d0,d1
   13e26:	|   addq.l #1,d1
   13e28:	|   move.l d1,32(sp)
   13e2c:	|   movea.l 24(sp),a0
   13e30:	|   lea 1(a0),a1
   13e34:	|   move.l a1,24(sp)
   13e38:	|   movea.l d0,a1
   13e3a:	|   move.b (a1),d0
   13e3c:	|   move.b d0,(a0)
   13e3e:	|   move.b (a0),d0
   13e40:	'-- bne.s 13e20 <joinStrings+0x58>
	t--;
   13e42:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13e46:	    nop
   13e48:	,-> move.l 36(sp),d0
   13e4c:	|   move.l d0,d1
   13e4e:	|   addq.l #1,d1
   13e50:	|   move.l d1,36(sp)
   13e54:	|   movea.l 24(sp),a0
   13e58:	|   lea 1(a0),a1
   13e5c:	|   move.l a1,24(sp)
   13e60:	|   movea.l d0,a1
   13e62:	|   move.b (a1),d0
   13e64:	|   move.b d0,(a0)
   13e66:	|   move.b (a0),d0
   13e68:	'-- bne.s 13e48 <joinStrings+0x80>

	return newString;
   13e6a:	    move.l 8(sp),d0
}
   13e6e:	    move.l (sp)+,d2
   13e70:	    movea.l (sp)+,a6
   13e72:	    lea 20(sp),sp
   13e76:	    rts

00013e78 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13e78:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13e7c:	       moveq #10,d0
   13e7e:	       cmp.l 28(sp),d0
   13e82:	   ,-- bne.s 13ea0 <itoa+0x28>
   13e84:	   |   tst.l 20(sp)
   13e88:	   +-- bge.s 13ea0 <itoa+0x28>
        *str++ = '-';
   13e8a:	   |   move.l 24(sp),d0
   13e8e:	   |   move.l d0,d1
   13e90:	   |   addq.l #1,d1
   13e92:	   |   move.l d1,24(sp)
   13e96:	   |   movea.l d0,a0
   13e98:	   |   move.b #45,(a0)
        value *= -1;
   13e9c:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13ea0:	   '-> move.l 24(sp),12(sp)
   13ea6:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13eac:	   ,-> move.l 20(sp),d0
   13eb0:	   |   move.l 28(sp),-(sp)
   13eb4:	   |   move.l d0,-(sp)
   13eb6:	   |   jsr 17db4 <__modsi3>
   13ebc:	   |   addq.l #8,sp
   13ebe:	   |   movea.l d0,a1
   13ec0:	   |   move.l 12(sp),d0
   13ec4:	   |   move.l d0,d1
   13ec6:	   |   addq.l #1,d1
   13ec8:	   |   move.l d1,12(sp)
   13ecc:	   |   lea 1a083 <talk.c.490538ff+0x418>,a0
   13ed2:	   |   move.b (0,a1,a0.l),d1
   13ed6:	   |   movea.l d0,a0
   13ed8:	   |   move.b d1,(a0)
        value /= base;
   13eda:	   |   move.l 28(sp),-(sp)
   13ede:	   |   move.l 24(sp),-(sp)
   13ee2:	   |   jsr 17d86 <__divsi3>
   13ee8:	   |   addq.l #8,sp
   13eea:	   |   move.l d0,20(sp)
    } while (value);
   13eee:	   '-- bne.s 13eac <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13ef0:	       move.l 12(sp),d0
   13ef4:	       move.l d0,d1
   13ef6:	       subq.l #1,d1
   13ef8:	       move.l d1,12(sp)
   13efc:	       movea.l d0,a0
   13efe:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13f00:	       move.l 4(sp),8(sp)
   13f06:	   ,-- bra.s 13f2c <itoa+0xb4>
        char temp = *low;
   13f08:	,--|-> movea.l 8(sp),a0
   13f0c:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13f10:	|  |   movea.l 12(sp),a0
   13f14:	|  |   move.b (a0),d0
   13f16:	|  |   movea.l 8(sp),a0
   13f1a:	|  |   move.b d0,(a0)
        *ptr = temp;
   13f1c:	|  |   movea.l 12(sp),a0
   13f20:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13f24:	|  |   addq.l #1,8(sp)
   13f28:	|  |   subq.l #1,12(sp)
   13f2c:	|  '-> move.l 8(sp),d0
   13f30:	|      cmp.l 12(sp),d0
   13f34:	'----- bcs.s 13f08 <itoa+0x90>
    }
    return rc;
   13f36:	       move.l 4(sp),d0
}
   13f3a:	       lea 16(sp),sp
   13f3e:	       rts

00013f40 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13f40:	                            lea -40(sp),sp
   13f44:	                            move.l d2,-(sp)
    char* s = str;
   13f46:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13f4c:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13f52:	   ,----------------------- bra.w 14086 <vsprintf2+0x146>
        if (*p == '%') {
   13f56:	,--|----------------------> movea.l 36(sp),a0
   13f5a:	|  |                        move.b (a0),d0
   13f5c:	|  |                        cmpi.b #37,d0
   13f60:	|  |  ,-------------------- bne.w 1406c <vsprintf2+0x12c>
            switch (*++p) {
   13f64:	|  |  |                     addq.l #1,36(sp)
   13f68:	|  |  |                     movea.l 36(sp),a0
   13f6c:	|  |  |                     move.b (a0),d0
   13f6e:	|  |  |                     ext.w d0
   13f70:	|  |  |                     movea.w d0,a0
   13f72:	|  |  |                     moveq #115,d0
   13f74:	|  |  |                     cmp.l a0,d0
   13f76:	|  |  |           ,-------- beq.s 13fee <vsprintf2+0xae>
   13f78:	|  |  |           |         moveq #115,d1
   13f7a:	|  |  |           |         cmp.l a0,d1
   13f7c:	|  |  |  ,--------|-------- blt.w 14054 <vsprintf2+0x114>
   13f80:	|  |  |  |        |         moveq #99,d2
   13f82:	|  |  |  |        |         cmp.l a0,d2
   13f84:	|  |  |  |  ,-----|-------- beq.w 1402c <vsprintf2+0xec>
   13f88:	|  |  |  |  |     |         moveq #100,d0
   13f8a:	|  |  |  |  |     |         cmp.l a0,d0
   13f8c:	|  |  |  +--|-----|-------- bne.w 14054 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13f90:	|  |  |  |  |     |         addq.l #4,56(sp)
   13f94:	|  |  |  |  |     |         movea.l 56(sp),a0
   13f98:	|  |  |  |  |     |         move.l (a0),d0
   13f9a:	|  |  |  |  |     |         move.l d0,d1
   13f9c:	|  |  |  |  |     |         subq.l #1,d1
   13f9e:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13fa2:	|  |  |  |  |     |         pea a <_start+0xa>
   13fa6:	|  |  |  |  |     |         lea 8(sp),a0
   13faa:	|  |  |  |  |     |         move.l a0,-(sp)
   13fac:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13fb0:	|  |  |  |  |     |         jsr 13e78 <itoa>
   13fb6:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13fba:	|  |  |  |  |     |         lea 44(sp),a0
   13fbe:	|  |  |  |  |     |         lea -40(a0),a0
   13fc2:	|  |  |  |  |     |         move.l a0,28(sp)
   13fc6:	|  |  |  |  |     |     ,-- bra.s 13fe2 <vsprintf2+0xa2>
                        *s++ = *b;
   13fc8:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13fcc:	|  |  |  |  |     |  |  |   move.l d0,d1
   13fce:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13fd0:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13fd4:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13fd8:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13fda:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13fdc:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13fde:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13fe2:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13fe6:	|  |  |  |  |     |  |      move.b (a0),d0
   13fe8:	|  |  |  |  |     |  '----- bne.s 13fc8 <vsprintf2+0x88>
                    }
                    break;
   13fea:	|  |  |  |  |  ,--|-------- bra.w 14082 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13fee:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13ff2:	|  |  |  |  |  |            movea.l 56(sp),a0
   13ff6:	|  |  |  |  |  |            move.l (a0),d0
   13ff8:	|  |  |  |  |  |            move.l d0,d1
   13ffa:	|  |  |  |  |  |            subq.l #1,d1
   13ffc:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   14000:	|  |  |  |  |  |        ,-- bra.s 14022 <vsprintf2+0xe2>
                        *s++ = *sval++;
   14002:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   14006:	|  |  |  |  |  |     |  |   move.l d1,d2
   14008:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1400a:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1400e:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   14012:	|  |  |  |  |  |     |  |   move.l d0,d2
   14014:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14016:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1401a:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1401c:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1401e:	|  |  |  |  |  |     |  |   movea.l d0,a0
   14020:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   14022:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   14026:	|  |  |  |  |  |     |      move.b (a0),d0
   14028:	|  |  |  |  |  |     '----- bne.s 14002 <vsprintf2+0xc2>
                    }
                    break;
   1402a:	|  |  |  |  |  +----------- bra.s 14082 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1402c:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   14030:	|  |  |  |     |            movea.l 56(sp),a0
   14034:	|  |  |  |     |            move.l (a0),d0
   14036:	|  |  |  |     |            move.l d0,d1
   14038:	|  |  |  |     |            subq.l #1,d1
   1403a:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1403e:	|  |  |  |     |            move.l 40(sp),d0
   14042:	|  |  |  |     |            move.l d0,d2
   14044:	|  |  |  |     |            addq.l #1,d2
   14046:	|  |  |  |     |            move.l d2,40(sp)
   1404a:	|  |  |  |     |            move.l 24(sp),d1
   1404e:	|  |  |  |     |            movea.l d0,a0
   14050:	|  |  |  |     |            move.b d1,(a0)
                    break;
   14052:	|  |  |  |     +----------- bra.s 14082 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14054:	|  |  |  '-----|----------> move.l 40(sp),d0
   14058:	|  |  |        |            move.l d0,d1
   1405a:	|  |  |        |            addq.l #1,d1
   1405c:	|  |  |        |            move.l d1,40(sp)
   14060:	|  |  |        |            movea.l 36(sp),a0
   14064:	|  |  |        |            move.b (a0),d1
   14066:	|  |  |        |            movea.l d0,a0
   14068:	|  |  |        |            move.b d1,(a0)
                    break;
   1406a:	|  |  |        +----------- bra.s 14082 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1406c:	|  |  '--------|----------> move.l 40(sp),d0
   14070:	|  |           |            move.l d0,d1
   14072:	|  |           |            addq.l #1,d1
   14074:	|  |           |            move.l d1,40(sp)
   14078:	|  |           |            movea.l 36(sp),a0
   1407c:	|  |           |            move.b (a0),d1
   1407e:	|  |           |            movea.l d0,a0
   14080:	|  |           |            move.b d1,(a0)
        }
        p++;
   14082:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   14086:	|  '----------------------> movea.l 36(sp),a0
   1408a:	|                           move.b (a0),d0
   1408c:	'-------------------------- bne.w 13f56 <vsprintf2+0x16>
    }
    *s = '\0';
   14090:	                            movea.l 40(sp),a0
   14094:	                            clr.b (a0)
    return s - str;
   14096:	                            move.l 40(sp),d0
   1409a:	                            sub.l 48(sp),d0
}
   1409e:	                            move.l (sp)+,d2
   140a0:	                            lea 40(sp),sp
   140a4:	                            rts

000140a6 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   140a6:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   140a8:	moveq #16,d0
   140aa:	add.l sp,d0
   140ac:	move.l d0,d1
   140ae:	addq.l #4,d1
   140b0:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   140b4:	move.l 16(sp),d0
   140b8:	move.l 4(sp),-(sp)
   140bc:	move.l d0,-(sp)
   140be:	move.l 20(sp),-(sp)
   140c2:	jsr 13f40 <vsprintf2>
   140c8:	lea 12(sp),sp
   140cc:	move.l d0,(sp)
    va_end(args);
   140ce:	clr.l 4(sp)

    return done;
   140d2:	move.l (sp),d0
}
   140d4:	addq.l #8,sp
   140d6:	rts

000140d8 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   140d8:	       lea -20(sp),sp
   140dc:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   140de:	       moveq #12,d0
   140e0:	       move.l d0,20(sp)
   140e4:	       clr.l 16(sp)
   140e8:	       move.l 1cbca <SysBase>,d0
   140ee:	       movea.l d0,a6
   140f0:	       move.l 20(sp),d0
   140f4:	       move.l 16(sp),d1
   140f8:	       jsr -684(a6)
   140fc:	       move.l d0,12(sp)
   14100:	       move.l 12(sp),d0
   14104:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14108:	   ,-- bne.s 1410e <addVarToStack+0x36>
   1410a:	   |   clr.w d0
   1410c:	,--|-- bra.s 14156 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1410e:	|  '-> move.l 8(sp),d0
   14112:	|      move.l d0,-(sp)
   14114:	|      move.l 32(sp),-(sp)
   14118:	|      jsr 14c3a <copyMain>
   1411e:	|      addq.l #8,sp
   14120:	|      tst.w d0
   14122:	|  ,-- bne.s 1413e <addVarToStack+0x66>
        FreeVec(newStack);
   14124:	|  |   move.l 8(sp),4(sp)
   1412a:	|  |   move.l 1cbca <SysBase>,d0
   14130:	|  |   movea.l d0,a6
   14132:	|  |   movea.l 4(sp),a1
   14136:	|  |   jsr -690(a6)
        return FALSE;
   1413a:	|  |   clr.w d0
   1413c:	+--|-- bra.s 14156 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1413e:	|  '-> movea.l 32(sp),a0
   14142:	|      move.l (a0),d0
   14144:	|      movea.l 8(sp),a0
   14148:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1414c:	|      movea.l 32(sp),a0
   14150:	|      move.l 8(sp),(a0)
    return TRUE;
   14154:	|      moveq #1,d0
}
   14156:	'----> movea.l (sp)+,a6
   14158:	       lea 20(sp),sp
   1415c:	       rts

0001415e <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1415e:	       lea -16(sp),sp
   14162:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14164:	       moveq #12,d0
   14166:	       move.l d0,16(sp)
   1416a:	       clr.l 12(sp)
   1416e:	       move.l 1cbca <SysBase>,d0
   14174:	       movea.l d0,a6
   14176:	       move.l 16(sp),d0
   1417a:	       move.l 12(sp),d1
   1417e:	       jsr -684(a6)
   14182:	       move.l d0,8(sp)
   14186:	       move.l 8(sp),d0
   1418a:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1418e:	   ,-- bne.s 14194 <addVarToStackQuick+0x36>
   14190:	   |   clr.w d0
   14192:	,--|-- bra.s 141ca <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14194:	|  '-> move.l 4(sp),d0
   14198:	|      pea 8 <_start+0x8>
   1419c:	|      move.l 28(sp),-(sp)
   141a0:	|      move.l d0,-(sp)
   141a2:	|      jsr 17330 <memcpy>
   141a8:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   141ac:	|      movea.l 24(sp),a0
   141b0:	|      clr.l (a0)

    newStack->next = *thisStack;
   141b2:	|      movea.l 28(sp),a0
   141b6:	|      move.l (a0),d0
   141b8:	|      movea.l 4(sp),a0
   141bc:	|      move.l d0,8(a0)
    *thisStack = newStack;
   141c0:	|      movea.l 28(sp),a0
   141c4:	|      move.l 4(sp),(a0)
    return TRUE;
   141c8:	|      moveq #1,d0
}
   141ca:	'----> movea.l (sp)+,a6
   141cc:	       lea 16(sp),sp
   141d0:	       rts

000141d2 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   141d2:	       lea -16(sp),sp
   141d6:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   141d8:	       movea.l 24(sp),a0
   141dc:	       move.l (a0),d0
   141de:	       moveq #1,d1
   141e0:	       cmp.l d0,d1
   141e2:	   ,-- bne.s 1420c <addVariablesInSecond+0x3a>
   141e4:	   |   movea.l 28(sp),a0
   141e8:	   |   move.l (a0),d0
   141ea:	   |   moveq #1,d1
   141ec:	   |   cmp.l d0,d1
   141ee:	   +-- bne.s 1420c <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   141f0:	   |   movea.l 28(sp),a0
   141f4:	   |   move.l 4(a0),d1
   141f8:	   |   movea.l 24(sp),a0
   141fc:	   |   move.l 4(a0),d0
   14200:	   |   add.l d1,d0
   14202:	   |   movea.l 28(sp),a0
   14206:	   |   move.l d0,4(a0)
   1420a:	,--|-- bra.s 14286 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1420c:	|  '-> move.l 24(sp),-(sp)
   14210:	|      jsr 14e72 <getTextFromAnyVar>
   14216:	|      addq.l #4,sp
   14218:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1421c:	|      move.l 28(sp),-(sp)
   14220:	|      jsr 14e72 <getTextFromAnyVar>
   14226:	|      addq.l #4,sp
   14228:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1422c:	|      move.l 28(sp),-(sp)
   14230:	|      jsr 14aea <unlinkVar>
   14236:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14238:	|      move.l 12(sp),-(sp)
   1423c:	|      move.l 20(sp),-(sp)
   14240:	|      jsr 13dc8 <joinStrings>
   14246:	|      addq.l #8,sp
   14248:	|      movea.l 28(sp),a0
   1424c:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14250:	|      movea.l 28(sp),a0
   14254:	|      moveq #3,d0
   14256:	|      move.l d0,(a0)
		FreeVec(string1);
   14258:	|      move.l 16(sp),8(sp)
   1425e:	|      move.l 1cbca <SysBase>,d0
   14264:	|      movea.l d0,a6
   14266:	|      movea.l 8(sp),a1
   1426a:	|      jsr -690(a6)
		FreeVec(string2);
   1426e:	|      move.l 12(sp),4(sp)
   14274:	|      move.l 1cbca <SysBase>,d0
   1427a:	|      movea.l d0,a6
   1427c:	|      movea.l 4(sp),a1
   14280:	|      jsr -690(a6)
	}
}
   14284:	|      nop
   14286:	'----> nop
   14288:	       movea.l (sp)+,a6
   1428a:	       lea 16(sp),sp
   1428e:	       rts

00014290 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14290:	movea.l 8(sp),a0
   14294:	move.l 4(a0),-(sp)
   14298:	move.l (a0),-(sp)
   1429a:	movea.l 12(sp),a0
   1429e:	move.l 4(a0),-(sp)
   142a2:	move.l (a0),-(sp)
   142a4:	jsr 142c6 <compareVars>
   142aa:	lea 16(sp),sp
   142ae:	move.l d0,-(sp)
   142b0:	pea 1 <_start+0x1>
   142b4:	move.l 16(sp),-(sp)
   142b8:	jsr 1518e <setVariable>
   142be:	lea 12(sp),sp
}
   142c2:	nop
   142c4:	rts

000142c6 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   142c6:	       subq.l #4,sp
	int re = 0;
   142c8:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   142ca:	       move.l 8(sp),d1
   142ce:	       move.l 16(sp),d0
   142d2:	       cmp.l d1,d0
   142d4:	,----- bne.w 1439c <compareVars+0xd6>
		switch (var1.varType) {
   142d8:	|      move.l 8(sp),d0
   142dc:	|      moveq #9,d1
   142de:	|      cmp.l d0,d1
   142e0:	|  ,-- bcs.w 14384 <compareVars+0xbe>
   142e4:	|  |   add.l d0,d0
   142e6:	|  |   movea.l d0,a0
   142e8:	|  |   adda.l #82676,a0
   142ee:	|  |   move.w (a0),d0
   142f0:	|  |   jmp (142f4 <compareVars+0x2e>,pc,d0.w)
   142f4:	|  |   ori.b #-112,(a4)
   142f8:	|  |   ori.l #5243024,(a0)
   142fe:	|  |   ori.l #7733392,(a0)
   14304:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1430a:	|  |   move.l d0,(sp)
			break;
   1430c:	+--|-- bra.w 1439c <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14310:	|  |   move.l 12(sp),d1
   14314:	|  |   move.l 20(sp),d0
   14318:	|  |   cmp.l d1,d0
   1431a:	|  |   seq d0
   1431c:	|  |   neg.b d0
   1431e:	|  |   move.b d0,d0
   14320:	|  |   andi.l #255,d0
   14326:	|  |   move.l d0,(sp)
			break;
   14328:	+--|-- bra.s 1439c <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1432a:	|  |   move.l 12(sp),d1
   1432e:	|  |   move.l 20(sp),d0
   14332:	|  |   cmp.l d1,d0
   14334:	|  |   seq d0
   14336:	|  |   neg.b d0
   14338:	|  |   move.b d0,d0
   1433a:	|  |   andi.l #255,d0
   14340:	|  |   move.l d0,(sp)
			break;
   14342:	+--|-- bra.s 1439c <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14344:	|  |   move.l 20(sp),d1
   14348:	|  |   move.l 12(sp),d0
   1434c:	|  |   move.l d1,-(sp)
   1434e:	|  |   move.l d0,-(sp)
   14350:	|  |   jsr 13d48 <strcmp>
   14356:	|  |   addq.l #8,sp
   14358:	|  |   tst.l d0
   1435a:	|  |   seq d0
   1435c:	|  |   neg.b d0
   1435e:	|  |   move.b d0,d0
   14360:	|  |   andi.l #255,d0
   14366:	|  |   move.l d0,(sp)
			break;
   14368:	+--|-- bra.s 1439c <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1436a:	|  |   move.l 12(sp),d1
   1436e:	|  |   move.l 20(sp),d0
   14372:	|  |   cmp.l d1,d0
   14374:	|  |   seq d0
   14376:	|  |   neg.b d0
   14378:	|  |   move.b d0,d0
   1437a:	|  |   andi.l #255,d0
   14380:	|  |   move.l d0,(sp)
			break;
   14382:	+--|-- bra.s 1439c <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14384:	|  '-> move.l 12(sp),d1
   14388:	|      move.l 20(sp),d0
   1438c:	|      cmp.l d1,d0
   1438e:	|      seq d0
   14390:	|      neg.b d0
   14392:	|      move.b d0,d0
   14394:	|      andi.l #255,d0
   1439a:	|      move.l d0,(sp)
		}
	}
	return re;
   1439c:	'----> move.l (sp),d0
}
   1439e:	       addq.l #4,sp
   143a0:	       rts

000143a2 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   143a2:	             lea -16(sp),sp
   143a6:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   143a8:	             movea.l 28(sp),a0
   143ac:	             moveq #6,d0
   143ae:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   143b0:	             moveq #12,d0
   143b2:	             move.l d0,12(sp)
   143b6:	             clr.l 8(sp)
   143ba:	             move.l 1cbca <SysBase>,d0
   143c0:	             movea.l d0,a6
   143c2:	             move.l 12(sp),d0
   143c6:	             move.l 8(sp),d1
   143ca:	             jsr -684(a6)
   143ce:	             move.l d0,4(sp)
   143d2:	             move.l 4(sp),d0
   143d6:	             movea.l 28(sp),a0
   143da:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   143de:	             movea.l 28(sp),a0
   143e2:	             move.l 4(a0),d0
   143e6:	         ,-- bne.s 143ee <copyStack+0x4c>
   143e8:	         |   clr.w d0
   143ea:	,--------|-- bra.w 14470 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   143ee:	|        '-> movea.l 28(sp),a0
   143f2:	|            movea.l 4(a0),a0
   143f6:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   143f8:	|            movea.l 28(sp),a0
   143fc:	|            movea.l 4(a0),a0
   14400:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14404:	|            movea.l 28(sp),a0
   14408:	|            movea.l 4(a0),a0
   1440c:	|            moveq #1,d0
   1440e:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14412:	|            movea.l 24(sp),a0
   14416:	|            movea.l 4(a0),a0
   1441a:	|            move.l (a0),16(sp)

	while (a) {
   1441e:	|     ,----- bra.s 14468 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14420:	|  ,--|----> movea.l 28(sp),a0
   14424:	|  |  |      move.l 4(a0),d0
   14428:	|  |  |      move.l d0,d1
   1442a:	|  |  |      move.l 16(sp),d0
   1442e:	|  |  |      move.l d1,-(sp)
   14430:	|  |  |      move.l d0,-(sp)
   14432:	|  |  |      jsr 140d8 <addVarToStack>
   14438:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1443a:	|  |  |      movea.l 28(sp),a0
   1443e:	|  |  |      movea.l 4(a0),a0
   14442:	|  |  |      move.l 4(a0),d0
   14446:	|  |  |  ,-- bne.s 1445e <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14448:	|  |  |  |   movea.l 28(sp),a0
   1444c:	|  |  |  |   movea.l 4(a0),a1
   14450:	|  |  |  |   movea.l 28(sp),a0
   14454:	|  |  |  |   movea.l 4(a0),a0
   14458:	|  |  |  |   move.l (a1),d0
   1445a:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1445e:	|  |  |  '-> movea.l 16(sp),a0
   14462:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14468:	|  |  '----> tst.l 16(sp)
   1446c:	|  '-------- bne.s 14420 <copyStack+0x7e>
	}

	return TRUE;
   1446e:	|            moveq #1,d0
}
   14470:	'----------> movea.l (sp)+,a6
   14472:	             lea 16(sp),sp
   14476:	             rts

00014478 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14478:	                lea -20(sp),sp
   1447c:	                move.l a6,-(sp)
   1447e:	                move.l 36(sp),d0
   14482:	                move.w d0,d0
   14484:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14488:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1448e:	                clr.l 16(sp)

    while (*huntVar) {
   14492:	   ,----------- bra.s 14510 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14494:	,--|----------> movea.l 20(sp),a0
   14498:	|  |            movea.l (a0),a0
   1449a:	|  |            movea.l 28(sp),a1
   1449e:	|  |            move.l 4(a1),-(sp)
   144a2:	|  |            move.l (a1),-(sp)
   144a4:	|  |            move.l 4(a0),-(sp)
   144a8:	|  |            move.l (a0),-(sp)
   144aa:	|  |            jsr 142c6 <compareVars>
   144b0:	|  |            lea 16(sp),sp
   144b4:	|  |            tst.l d0
   144b6:	|  |  ,-------- beq.s 14502 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   144b8:	|  |  |         movea.l 20(sp),a0
   144bc:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   144c0:	|  |  |         movea.l 12(sp),a0
   144c4:	|  |  |         move.l 8(a0),d0
   144c8:	|  |  |         movea.l 20(sp),a0
   144cc:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   144ce:	|  |  |         move.l 12(sp),d0
   144d2:	|  |  |         move.l d0,-(sp)
   144d4:	|  |  |         jsr 14aea <unlinkVar>
   144da:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   144dc:	|  |  |         move.l 12(sp),8(sp)
   144e2:	|  |  |         move.l 1cbca <SysBase>,d0
   144e8:	|  |  |         movea.l d0,a6
   144ea:	|  |  |         movea.l 8(sp),a1
   144ee:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   144f2:	|  |  |         tst.w 6(sp)
   144f6:	|  |  |     ,-- bne.s 144fc <deleteVarFromStack+0x84>
   144f8:	|  |  |     |   moveq #1,d0
   144fa:	|  |  |  ,--|-- bra.s 1451e <deleteVarFromStack+0xa6>
            reply++;
   144fc:	|  |  |  |  '-> addq.l #1,16(sp)
   14500:	|  +--|--|----- bra.s 14510 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14502:	|  |  '--|----> movea.l 20(sp),a0
   14506:	|  |     |      move.l (a0),d0
   14508:	|  |     |      move.l d0,d1
   1450a:	|  |     |      addq.l #8,d1
   1450c:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14510:	|  '-----|----> movea.l 20(sp),a0
   14514:	|        |      move.l (a0),d0
   14516:	'--------|----- bne.w 14494 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1451a:	         |      move.l 16(sp),d0
}
   1451e:	         '----> movea.l (sp)+,a6
   14520:	                lea 20(sp),sp
   14524:	                rts

00014526 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14526:	       movea.l 4(sp),a0
   1452a:	       move.l 4(a0),d0
   1452e:	       cmp.l 8(sp),d0
   14532:	   ,-- bhi.s 14538 <fastArrayGetByIndex+0x12>
   14534:	   |   moveq #0,d0
   14536:	,--|-- bra.s 14546 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14538:	|  '-> movea.l 4(sp),a0
   1453c:	|      move.l (a0),d1
   1453e:	|      move.l 8(sp),d0
   14542:	|      lsl.l #3,d0
   14544:	|      add.l d1,d0
}
   14546:	'----> rts

00014548 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14548:	                lea -32(sp),sp
   1454c:	                move.l a6,-(sp)
   1454e:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14550:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14554:	                movea.l 44(sp),a0
   14558:	                move.l (a0),d0
   1455a:	                moveq #8,d1
   1455c:	                cmp.l d0,d1
   1455e:	            ,-- beq.s 1456c <getCostumeFromVar+0x24>
   14560:	            |   moveq #9,d1
   14562:	            |   cmp.l d0,d1
   14564:	   ,--------|-- beq.w 1461a <getCostumeFromVar+0xd2>
   14568:	,--|--------|-- bra.w 14624 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   1456c:	|  |        '-> moveq #8,d0
   1456e:	|  |            move.l d0,28(sp)
   14572:	|  |            clr.l 24(sp)
   14576:	|  |            move.l 1cbca <SysBase>,d0
   1457c:	|  |            movea.l d0,a6
   1457e:	|  |            move.l 28(sp),d0
   14582:	|  |            move.l 24(sp),d1
   14586:	|  |            jsr -684(a6)
   1458a:	|  |            move.l d0,20(sp)
   1458e:	|  |            move.l 20(sp),d0
   14592:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14596:	|  |        ,-- bne.s 1459e <getCostumeFromVar+0x56>
   14598:	|  |        |   moveq #0,d0
   1459a:	|  |  ,-----|-- bra.w 1464e <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1459e:	|  |  |     '-> movea.l 36(sp),a0
   145a2:	|  |  |         moveq #1,d1
   145a4:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   145a8:	|  |  |         moveq #12,d0
   145aa:	|  |  |         move.l d0,16(sp)
   145ae:	|  |  |         clr.l 12(sp)
   145b2:	|  |  |         move.l 1cbca <SysBase>,d0
   145b8:	|  |  |         movea.l d0,a6
   145ba:	|  |  |         move.l 16(sp),d0
   145be:	|  |  |         move.l 12(sp),d1
   145c2:	|  |  |         jsr -684(a6)
   145c6:	|  |  |         move.l d0,8(sp)
   145ca:	|  |  |         move.l 8(sp),d0
   145ce:	|  |  |         movea.l 36(sp),a0
   145d2:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   145d4:	|  |  |         movea.l 36(sp),a0
   145d8:	|  |  |         move.l (a0),d0
   145da:	|  |  |     ,-- bne.s 145e0 <getCostumeFromVar+0x98>
   145dc:	|  |  |     |   moveq #0,d0
   145de:	|  |  +-----|-- bra.s 1464e <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   145e0:	|  |  |     '-> clr.l 32(sp)
   145e4:	|  |  |     ,-- bra.s 14610 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   145e6:	|  |  |  ,--|-> movea.l 44(sp),a0
   145ea:	|  |  |  |  |   move.l 4(a0),d0
   145ee:	|  |  |  |  |   movea.l 36(sp),a0
   145f2:	|  |  |  |  |   movea.l (a0),a0
   145f4:	|  |  |  |  |   move.l 32(sp),d1
   145f8:	|  |  |  |  |   add.l d1,d1
   145fa:	|  |  |  |  |   add.l d1,d1
   145fc:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14600:	|  |  |  |  |   move.l d0,-(sp)
   14602:	|  |  |  |  |   jsr 9554 <copyAnim>
   14608:	|  |  |  |  |   addq.l #4,sp
   1460a:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1460c:	|  |  |  |  |   addq.l #1,32(sp)
   14610:	|  |  |  |  '-> moveq #2,d1
   14612:	|  |  |  |      cmp.l 32(sp),d1
   14616:	|  |  |  '----- bge.s 145e6 <getCostumeFromVar+0x9e>
            }
            break;
   14618:	|  |  |     ,-- bra.s 1464a <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1461a:	|  '--|-----|-> movea.l 44(sp),a0
   1461e:	|     |     |   move.l 4(a0),d0
   14622:	|     +-----|-- bra.s 1464e <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14624:	'-----|-----|-> movea.l 44(sp),a0
   14628:	      |     |   move.l (a0),d0
   1462a:	      |     |   add.l d0,d0
   1462c:	      |     |   movea.l d0,a1
   1462e:	      |     |   adda.l d0,a1
   14630:	      |     |   lea 1ca9a <typeName>,a0
   14636:	      |     |   move.l (0,a1,a0.l),d0
   1463a:	      |     |   move.l d0,-(sp)
   1463c:	      |     |   pea 1a0f5 <talk.c.490538ff+0x48a>
   14642:	      |     |   jsr 1737c <KPrintF>
   14648:	      |     |   addq.l #8,sp
    }

    return p;
   1464a:	      |     '-> move.l 36(sp),d0
}
   1464e:	      '-------> movea.l (sp)+,a2
   14650:	                movea.l (sp)+,a6
   14652:	                lea 32(sp),sp
   14656:	                rts

00014658 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14658:	                lea -96(sp),sp
   1465c:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14660:	                move.l 116(sp),-(sp)
   14664:	                pea 1a12d <talk.c.490538ff+0x4c2>
   1466a:	                jsr 13dc8 <joinStrings>
   14670:	                addq.l #8,sp
   14672:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14676:	            ,-- bne.s 1467e <getSavedGamesStack+0x26>
   14678:	            |   clr.w d0
   1467a:	,-----------|-- bra.w 14892 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1467e:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14682:	|               move.l #106799,98(sp)
   1468a:	|               moveq #-2,d0
   1468c:	|               move.l d0,94(sp)
   14690:	|               move.l 1cbd2 <DOSBase>,d0
   14696:	|               movea.l d0,a6
   14698:	|               move.l 98(sp),d1
   1469c:	|               move.l 94(sp),d2
   146a0:	|               jsr -84(a6)
   146a4:	|               move.l d0,90(sp)
   146a8:	|               move.l 90(sp),d0
   146ac:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   146b0:	|           ,-- bne.s 146b8 <getSavedGamesStack+0x60>
   146b2:	|           |   clr.w d0
   146b4:	+-----------|-- bra.w 14892 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   146b8:	|           '-> move.l #260,82(sp)
   146c0:	|               move.l #65536,78(sp)
   146c8:	|               move.l 1cbca <SysBase>,d0
   146ce:	|               movea.l d0,a6
   146d0:	|               move.l 82(sp),d0
   146d4:	|               move.l 78(sp),d1
   146d8:	|               jsr -684(a6)
   146dc:	|               move.l d0,74(sp)
   146e0:	|               move.l 74(sp),d0
   146e4:	|               move.l d0,70(sp)
	if (!fib) {
   146e8:	|           ,-- bne.s 14706 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   146ea:	|           |   move.l 86(sp),22(sp)
   146f0:	|           |   move.l 1cbd2 <DOSBase>,d0
   146f6:	|           |   movea.l d0,a6
   146f8:	|           |   move.l 22(sp),d1
   146fc:	|           |   jsr -90(a6)
		return FALSE;
   14700:	|           |   clr.w d0
   14702:	+-----------|-- bra.w 14892 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14706:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1470a:	|               move.l 86(sp),66(sp)
   14710:	|               move.l 70(sp),62(sp)
   14716:	|               move.l 1cbd2 <DOSBase>,d0
   1471c:	|               movea.l d0,a6
   1471e:	|               move.l 66(sp),d1
   14722:	|               move.l 62(sp),d2
   14726:	|               jsr -102(a6)
   1472a:	|               move.l d0,58(sp)
   1472e:	|               move.l 58(sp),d0
   14732:	|  ,----------- beq.w 14846 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14736:	|  |        ,-- bra.w 14812 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1473a:	|  |  ,-----|-> move.l 70(sp),d2
   1473e:	|  |  |     |   addq.l #8,d2
   14740:	|  |  |     |   move.l 70(sp),d0
   14744:	|  |  |     |   addq.l #8,d0
   14746:	|  |  |     |   move.l d0,-(sp)
   14748:	|  |  |     |   jsr 13d88 <strlen>
   1474e:	|  |  |     |   addq.l #4,sp
   14750:	|  |  |     |   move.l d0,d3
   14752:	|  |  |     |   move.l 116(sp),-(sp)
   14756:	|  |  |     |   jsr 13d88 <strlen>
   1475c:	|  |  |     |   addq.l #4,sp
   1475e:	|  |  |     |   move.l d3,d1
   14760:	|  |  |     |   sub.l d0,d1
   14762:	|  |  |     |   move.l d2,d0
   14764:	|  |  |     |   add.l d1,d0
   14766:	|  |  |     |   move.l 116(sp),-(sp)
   1476a:	|  |  |     |   move.l d0,-(sp)
   1476c:	|  |  |     |   jsr 13d48 <strcmp>
   14772:	|  |  |     |   addq.l #8,sp
   14774:	|  |  |     |   tst.l d0
   14776:	|  |  |     +-- bne.w 14812 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1477a:	|  |  |     |   move.l 70(sp),d0
   1477e:	|  |  |     |   addq.l #8,d0
   14780:	|  |  |     |   move.l d0,-(sp)
   14782:	|  |  |     |   jsr 13d88 <strlen>
   14788:	|  |  |     |   addq.l #4,sp
   1478a:	|  |  |     |   move.l d0,d2
   1478c:	|  |  |     |   move.l 116(sp),-(sp)
   14790:	|  |  |     |   jsr 13d88 <strlen>
   14796:	|  |  |     |   addq.l #4,sp
   14798:	|  |  |     |   move.l d0,d1
   1479a:	|  |  |     |   move.l d2,d0
   1479c:	|  |  |     |   sub.l d1,d0
   1479e:	|  |  |     |   movea.l 70(sp),a0
   147a2:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   147a6:	|  |  |     |   move.l 70(sp),d0
   147aa:	|  |  |     |   addq.l #8,d0
   147ac:	|  |  |     |   move.l d0,-(sp)
   147ae:	|  |  |     |   jsr 118 <decodeFilename>
   147b4:	|  |  |     |   addq.l #4,sp
   147b6:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   147ba:	|  |  |     |   move.l 42(sp),-(sp)
   147be:	|  |  |     |   lea 18(sp),a0
   147c2:	|  |  |     |   move.l a0,-(sp)
   147c4:	|  |  |     |   jsr 14abe <makeTextVar>
   147ca:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   147cc:	|  |  |     |   move.l 42(sp),38(sp)
   147d2:	|  |  |     |   move.l 1cbca <SysBase>,d0
   147d8:	|  |  |     |   movea.l d0,a6
   147da:	|  |  |     |   movea.l 38(sp),a1
   147de:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   147e2:	|  |  |     |   move.l 112(sp),d0
   147e6:	|  |  |     |   move.l d0,-(sp)
   147e8:	|  |  |     |   lea 18(sp),a0
   147ec:	|  |  |     |   move.l a0,-(sp)
   147ee:	|  |  |     |   jsr 140d8 <addVarToStack>
   147f4:	|  |  |     |   addq.l #8,sp
   147f6:	|  |  |     |   tst.w d0
   147f8:	|  |  |  ,--|-- beq.s 1484a <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   147fa:	|  |  |  |  |   movea.l 112(sp),a0
   147fe:	|  |  |  |  |   move.l 4(a0),d0
   14802:	|  |  |  |  +-- bne.s 14812 <getSavedGamesStack+0x1ba>
   14804:	|  |  |  |  |   movea.l 112(sp),a0
   14808:	|  |  |  |  |   move.l (a0),d0
   1480a:	|  |  |  |  |   movea.l 112(sp),a0
   1480e:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14812:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14818:	|  |  |  |      move.l 70(sp),50(sp)
   1481e:	|  |  |  |      move.l 1cbd2 <DOSBase>,d0
   14824:	|  |  |  |      movea.l d0,a6
   14826:	|  |  |  |      move.l 54(sp),d1
   1482a:	|  |  |  |      move.l 50(sp),d2
   1482e:	|  |  |  |      jsr -108(a6)
   14832:	|  |  |  |      move.l d0,46(sp)
   14836:	|  |  |  |      move.l 46(sp),d0
   1483a:	|  |  '--|----- bne.w 1473a <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1483e:	|  |     |      move.w #1,106(sp)
   14844:	|  |     |  ,-- bra.s 1484c <getSavedGamesStack+0x1f4>
	}

cleanup:
   14846:	|  '-----|--|-> nop
   14848:	|        |  +-- bra.s 1484c <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1484a:	|        '--|-> nop
	FreeVec(fib);
   1484c:	|           '-> move.l 70(sp),34(sp)
   14852:	|               move.l 1cbca <SysBase>,d0
   14858:	|               movea.l d0,a6
   1485a:	|               movea.l 34(sp),a1
   1485e:	|               jsr -690(a6)
	UnLock(dirLock);
   14862:	|               move.l 86(sp),30(sp)
   14868:	|               move.l 1cbd2 <DOSBase>,d0
   1486e:	|               movea.l d0,a6
   14870:	|               move.l 30(sp),d1
   14874:	|               jsr -90(a6)
	FreeVec(pattern);
   14878:	|               move.l 102(sp),26(sp)
   1487e:	|               move.l 1cbca <SysBase>,d0
   14884:	|               movea.l d0,a6
   14886:	|               movea.l 26(sp),a1
   1488a:	|               jsr -690(a6)
	return result;
   1488e:	|               move.w 106(sp),d0
}
   14892:	'-------------> movem.l (sp)+,d2-d3/a6
   14896:	                lea 96(sp),sp
   1489a:	                rts

0001489c <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1489c:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1489e:	       movea.l 20(sp),a0
   148a2:	       move.l (a0),d0
   148a4:	       cmp.l 16(sp),d0
   148a8:	,----- beq.s 1490c <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   148aa:	|      move.l 16(sp),d0
   148ae:	|      add.l d0,d0
   148b0:	|      movea.l d0,a1
   148b2:	|      adda.l d0,a1
   148b4:	|      lea 1ca9a <typeName>,a0
   148ba:	|      move.l (0,a1,a0.l),d0
   148be:	|      move.l d0,-(sp)
   148c0:	|      pea 1a131 <talk.c.490538ff+0x4c6>
   148c6:	|      jsr 13dc8 <joinStrings>
   148cc:	|      addq.l #8,sp
   148ce:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   148d2:	|      movea.l 20(sp),a0
   148d6:	|      move.l (a0),d0
   148d8:	|      add.l d0,d0
   148da:	|      movea.l d0,a1
   148dc:	|      adda.l d0,a1
   148de:	|      lea 1ca9a <typeName>,a0
   148e4:	|      move.l (0,a1,a0.l),d0
   148e8:	|      move.l d0,-(sp)
   148ea:	|      pea 1a173 <talk.c.490538ff+0x508>
   148f0:	|      jsr 13dc8 <joinStrings>
   148f6:	|      addq.l #8,sp
   148f8:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   148fa:	|      move.l (sp),-(sp)
   148fc:	|      move.l 8(sp),-(sp)
   14900:	|      jsr 1737c <KPrintF>
   14906:	|      addq.l #8,sp

		return FALSE;
   14908:	|      clr.w d0
   1490a:	|  ,-- bra.s 1491c <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1490c:	'--|-> movea.l 20(sp),a0
   14910:	   |   move.l 4(a0),d0
   14914:	   |   movea.l 12(sp),a0
   14918:	   |   move.l d0,(a0)
	return TRUE;
   1491a:	   |   moveq #1,d0
}
   1491c:	   '-> addq.l #8,sp
   1491e:	       rts

00014920 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14920:	move.l 8(sp),-(sp)
   14924:	jsr 76b2 <getNumberedString>
   1492a:	addq.l #4,sp
   1492c:	move.l d0,-(sp)
   1492e:	move.l 8(sp),-(sp)
   14932:	jsr 14abe <makeTextVar>
   14938:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1493a:	movea.l 4(sp),a0
   1493e:	move.l 4(a0),d0
   14942:	sne d0
   14944:	neg.b d0
   14946:	move.b d0,d0
   14948:	andi.w #255,d0
}
   1494c:	rts

0001494e <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1494e:	          subq.l #8,sp
    int size = stackSize(stacky);
   14950:	          move.l 16(sp),-(sp)
   14954:	          jsr 151fc <stackSize>
   1495a:	          addq.l #4,sp
   1495c:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14960:	          move.l 4(sp),-(sp)
   14964:	          move.l 16(sp),-(sp)
   14968:	          jsr 149b8 <makeFastArraySize>
   1496e:	          addq.l #8,sp
   14970:	          tst.w d0
   14972:	      ,-- bne.s 14978 <makeFastArrayFromStack+0x2a>
   14974:	      |   clr.w d0
   14976:	,-----|-- bra.s 149b4 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14978:	|     '-> movea.l 16(sp),a0
   1497c:	|         move.l (a0),(sp)
    size = 0;
   1497e:	|         clr.l 4(sp)
    while (allV) {
   14982:	|     ,-- bra.s 149ae <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14984:	|  ,--|-> movea.l 12(sp),a0
   14988:	|  |  |   movea.l 4(a0),a0
   1498c:	|  |  |   move.l (a0),d1
   1498e:	|  |  |   move.l 4(sp),d0
   14992:	|  |  |   lsl.l #3,d0
   14994:	|  |  |   add.l d0,d1
   14996:	|  |  |   move.l (sp),d0
   14998:	|  |  |   move.l d1,-(sp)
   1499a:	|  |  |   move.l d0,-(sp)
   1499c:	|  |  |   jsr 14c3a <copyMain>
   149a2:	|  |  |   addq.l #8,sp
        size++;
   149a4:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   149a8:	|  |  |   movea.l (sp),a0
   149aa:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   149ae:	|  |  '-> tst.l (sp)
   149b0:	|  '----- bne.s 14984 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   149b2:	|         moveq #1,d0
}
   149b4:	'-------> addq.l #8,sp
   149b6:	          rts

000149b8 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   149b8:	          lea -28(sp),sp
   149bc:	          move.l a6,-(sp)
    if (size < 0) {
   149be:	          tst.l 40(sp)
   149c2:	      ,-- bge.s 149d8 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   149c4:	      |   pea 1a1b8 <talk.c.490538ff+0x54d>
   149ca:	      |   jsr 1737c <KPrintF>
   149d0:	      |   addq.l #4,sp
		return FALSE;
   149d2:	      |   clr.w d0
   149d4:	,-----|-- bra.w 14ab6 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   149d8:	|     '-> move.l 36(sp),-(sp)
   149dc:	|         jsr 14aea <unlinkVar>
   149e2:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   149e4:	|         movea.l 36(sp),a0
   149e8:	|         moveq #10,d0
   149ea:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   149ec:	|         moveq #12,d0
   149ee:	|         move.l d0,24(sp)
   149f2:	|         clr.l 20(sp)
   149f6:	|         move.l 1cbca <SysBase>,d0
   149fc:	|         movea.l d0,a6
   149fe:	|         move.l 24(sp),d0
   14a02:	|         move.l 20(sp),d1
   14a06:	|         jsr -684(a6)
   14a0a:	|         move.l d0,16(sp)
   14a0e:	|         move.l 16(sp),d0
   14a12:	|         movea.l 36(sp),a0
   14a16:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14a1a:	|         movea.l 36(sp),a0
   14a1e:	|         move.l 4(a0),d0
   14a22:	|     ,-- bne.s 14a2a <makeFastArraySize+0x72>
   14a24:	|     |   clr.w d0
   14a26:	+-----|-- bra.w 14ab6 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14a2a:	|     '-> move.l 40(sp),d0
   14a2e:	|         lsl.l #3,d0
   14a30:	|         move.l d0,12(sp)
   14a34:	|         clr.l 8(sp)
   14a38:	|         move.l 1cbca <SysBase>,d0
   14a3e:	|         movea.l d0,a6
   14a40:	|         move.l 12(sp),d0
   14a44:	|         move.l 8(sp),d1
   14a48:	|         jsr -684(a6)
   14a4c:	|         move.l d0,4(sp)
   14a50:	|         move.l 4(sp),d0
   14a54:	|         movea.l 36(sp),a0
   14a58:	|         movea.l 4(a0),a0
   14a5c:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14a5e:	|         movea.l 36(sp),a0
   14a62:	|         movea.l 4(a0),a0
   14a66:	|         move.l (a0),d0
   14a68:	|     ,-- bne.s 14a6e <makeFastArraySize+0xb6>
   14a6a:	|     |   clr.w d0
   14a6c:	+-----|-- bra.s 14ab6 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14a6e:	|     '-> clr.l 28(sp)
   14a72:	|     ,-- bra.s 14a8e <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14a74:	|  ,--|-> movea.l 36(sp),a0
   14a78:	|  |  |   movea.l 4(a0),a0
   14a7c:	|  |  |   move.l (a0),d1
   14a7e:	|  |  |   move.l 28(sp),d0
   14a82:	|  |  |   lsl.l #3,d0
   14a84:	|  |  |   movea.l d1,a0
   14a86:	|  |  |   adda.l d0,a0
   14a88:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14a8a:	|  |  |   addq.l #1,28(sp)
   14a8e:	|  |  '-> move.l 28(sp),d0
   14a92:	|  |      cmp.l 40(sp),d0
   14a96:	|  '----- blt.s 14a74 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14a98:	|         movea.l 36(sp),a0
   14a9c:	|         movea.l 4(a0),a0
   14aa0:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14aa6:	|         movea.l 36(sp),a0
   14aaa:	|         movea.l 4(a0),a0
   14aae:	|         moveq #1,d0
   14ab0:	|         move.l d0,8(a0)
    return TRUE;
   14ab4:	|         moveq #1,d0
}
   14ab6:	'-------> movea.l (sp)+,a6
   14ab8:	          lea 28(sp),sp
   14abc:	          rts

00014abe <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14abe:	move.l 4(sp),-(sp)
   14ac2:	jsr 14aea <unlinkVar>
   14ac8:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14aca:	movea.l 4(sp),a0
   14ace:	moveq #3,d0
   14ad0:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14ad2:	move.l 8(sp),-(sp)
   14ad6:	jsr b8 <copyString>
   14adc:	addq.l #4,sp
   14ade:	movea.l 4(sp),a0
   14ae2:	move.l d0,4(a0)
}
   14ae6:	nop
   14ae8:	rts

00014aea <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14aea:	                      lea -16(sp),sp
   14aee:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14af0:	                      movea.l 24(sp),a0
   14af4:	                      move.l (a0),d0
   14af6:	                      moveq #10,d1
   14af8:	                      cmp.l d0,d1
   14afa:	            ,-------- beq.w 14bb2 <unlinkVar+0xc8>
   14afe:	            |         moveq #10,d1
   14b00:	            |         cmp.l d0,d1
   14b02:	,-----------|-------- bcs.w 14c26 <unlinkVar+0x13c>
   14b06:	|           |         moveq #8,d1
   14b08:	|           |         cmp.l d0,d1
   14b0a:	|  ,--------|-------- beq.w 14c12 <unlinkVar+0x128>
   14b0e:	|  |        |         moveq #8,d1
   14b10:	|  |        |         cmp.l d0,d1
   14b12:	+--|--------|-------- bcs.w 14c26 <unlinkVar+0x13c>
   14b16:	|  |        |         moveq #3,d1
   14b18:	|  |        |         cmp.l d0,d1
   14b1a:	|  |        |     ,-- beq.s 14b26 <unlinkVar+0x3c>
   14b1c:	|  |        |     |   moveq #6,d1
   14b1e:	|  |        |     |   cmp.l d0,d1
   14b20:	|  |        |  ,--|-- beq.s 14b4c <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14b22:	+--|--------|--|--|-- bra.w 14c26 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14b26:	|  |        |  |  '-> movea.l 24(sp),a0
   14b2a:	|  |        |  |      move.l 4(a0),4(sp)
   14b30:	|  |        |  |      move.l 1cbca <SysBase>,d0
   14b36:	|  |        |  |      movea.l d0,a6
   14b38:	|  |        |  |      movea.l 4(sp),a1
   14b3c:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14b40:	|  |        |  |      movea.l 24(sp),a0
   14b44:	|  |        |  |      clr.l 4(a0)
		break;
   14b48:	|  |  ,-----|--|----- bra.w 14c30 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14b4c:	|  |  |     |  '----> movea.l 24(sp),a0
   14b50:	|  |  |     |         movea.l 4(a0),a0
   14b54:	|  |  |     |         move.l 8(a0),d0
   14b58:	|  |  |     |         subq.l #1,d0
   14b5a:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b5e:	|  |  |     |         movea.l 24(sp),a0
   14b62:	|  |  |     |         movea.l 4(a0),a0
   14b66:	|  |  |     |         move.l 8(a0),d0
   14b6a:	|  |  |  ,--|-------- bgt.w 14c2a <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14b6e:	|  |  |  |  |     ,-- bra.s 14b82 <unlinkVar+0x98>
   14b70:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14b74:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14b78:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14b7a:	|  |  |  |  |  |  |   jsr 15220 <trimStack>
   14b80:	|  |  |  |  |  |  |   addq.l #4,sp
   14b82:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14b86:	|  |  |  |  |  |      movea.l 4(a0),a0
   14b8a:	|  |  |  |  |  |      move.l (a0),d0
   14b8c:	|  |  |  |  |  '----- bne.s 14b70 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14b8e:	|  |  |  |  |         movea.l 24(sp),a0
   14b92:	|  |  |  |  |         move.l 4(a0),8(sp)
   14b98:	|  |  |  |  |         move.l 1cbca <SysBase>,d0
   14b9e:	|  |  |  |  |         movea.l d0,a6
   14ba0:	|  |  |  |  |         movea.l 8(sp),a1
   14ba4:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14ba8:	|  |  |  |  |         movea.l 24(sp),a0
   14bac:	|  |  |  |  |         clr.l 4(a0)
		break;
   14bb0:	|  |  |  +--|-------- bra.s 14c2a <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14bb2:	|  |  |  |  '-------> movea.l 24(sp),a0
   14bb6:	|  |  |  |            movea.l 4(a0),a0
   14bba:	|  |  |  |            move.l 8(a0),d0
   14bbe:	|  |  |  |            subq.l #1,d0
   14bc0:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14bc4:	|  |  |  |            movea.l 24(sp),a0
   14bc8:	|  |  |  |            movea.l 4(a0),a0
   14bcc:	|  |  |  |            move.l 8(a0),d0
   14bd0:	|  |  |  |        ,-- bgt.s 14c2e <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14bd2:	|  |  |  |        |   movea.l 24(sp),a0
   14bd6:	|  |  |  |        |   movea.l 4(a0),a0
   14bda:	|  |  |  |        |   move.l (a0),16(sp)
   14bde:	|  |  |  |        |   move.l 1cbca <SysBase>,d0
   14be4:	|  |  |  |        |   movea.l d0,a6
   14be6:	|  |  |  |        |   movea.l 16(sp),a1
   14bea:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14bee:	|  |  |  |        |   movea.l 24(sp),a0
   14bf2:	|  |  |  |        |   move.l 4(a0),12(sp)
   14bf8:	|  |  |  |        |   move.l 1cbca <SysBase>,d0
   14bfe:	|  |  |  |        |   movea.l d0,a6
   14c00:	|  |  |  |        |   movea.l 12(sp),a1
   14c04:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14c08:	|  |  |  |        |   movea.l 24(sp),a0
   14c0c:	|  |  |  |        |   clr.l 4(a0)
		break;
   14c10:	|  |  |  |        +-- bra.s 14c2e <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14c12:	|  '--|--|--------|-> movea.l 24(sp),a0
   14c16:	|     |  |        |   move.l 4(a0),d0
   14c1a:	|     |  |        |   move.l d0,-(sp)
   14c1c:	|     |  |        |   jsr 9920 <deleteAnim>
   14c22:	|     |  |        |   addq.l #4,sp
		break;
   14c24:	|     +--|--------|-- bra.s 14c30 <unlinkVar+0x146>
		break;
   14c26:	'-----|--|--------|-> nop
   14c28:	      +--|--------|-- bra.s 14c30 <unlinkVar+0x146>
		break;
   14c2a:	      |  '--------|-> nop
   14c2c:	      +-----------|-- bra.s 14c30 <unlinkVar+0x146>
		break;
   14c2e:	      |           '-> nop
	}
}
   14c30:	      '-------------> nop
   14c32:	                      movea.l (sp)+,a6
   14c34:	                      lea 16(sp),sp
   14c38:	                      rts

00014c3a <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14c3a:	       movea.l 4(sp),a0
   14c3e:	       move.l (a0),d0
   14c40:	       movea.l 8(sp),a0
   14c44:	       move.l d0,(a0)
	switch (to->varType) {
   14c46:	       movea.l 8(sp),a0
   14c4a:	       move.l (a0),d0
   14c4c:	       moveq #10,d1
   14c4e:	       cmp.l d0,d1
   14c50:	,----- bcs.w 14d42 <copyMain+0x108>
   14c54:	|      add.l d0,d0
   14c56:	|      movea.l d0,a0
   14c58:	|      adda.l #85092,a0
   14c5e:	|      move.w (a0),d0
   14c60:	|      jmp (14c64 <copyMain+0x2a>,pc,d0.w)
   14c64:	|      .short 0x00da
   14c66:	|      ori.b #22,(a6)
   14c6a:	|      ori.w #22,(a4)
   14c6e:	|      ori.b #-126,(a6)
   14c72:	|      ori.b #-68,(a6)
   14c76:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14c7e:	|      move.l 4(a0),d0
   14c82:	|      movea.l 8(sp),a0
   14c86:	|      move.l d0,4(a0)
		return TRUE;
   14c8a:	|      moveq #1,d0
   14c8c:	|  ,-- bra.w 14d54 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14c90:	|  |   movea.l 4(sp),a0
   14c94:	|  |   move.l 4(a0),d0
   14c98:	|  |   movea.l 8(sp),a0
   14c9c:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14ca0:	|  |   movea.l 8(sp),a0
   14ca4:	|  |   movea.l 4(a0),a0
   14ca8:	|  |   move.l 8(a0),d0
   14cac:	|  |   addq.l #1,d0
   14cae:	|  |   move.l d0,8(a0)
		return TRUE;
   14cb2:	|  |   moveq #1,d0
   14cb4:	|  +-- bra.w 14d54 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14cb8:	|  |   movea.l 4(sp),a0
   14cbc:	|  |   move.l 4(a0),d0
   14cc0:	|  |   move.l d0,-(sp)
   14cc2:	|  |   jsr b8 <copyString>
   14cc8:	|  |   addq.l #4,sp
   14cca:	|  |   movea.l 8(sp),a0
   14cce:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14cd2:	|  |   movea.l 8(sp),a0
   14cd6:	|  |   move.l 4(a0),d0
   14cda:	|  |   sne d0
   14cdc:	|  |   neg.b d0
   14cde:	|  |   move.b d0,d0
   14ce0:	|  |   andi.w #255,d0
   14ce4:	|  +-- bra.s 14d54 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14ce6:	|  |   movea.l 4(sp),a0
   14cea:	|  |   move.l 4(a0),d0
   14cee:	|  |   movea.l 8(sp),a0
   14cf2:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14cf6:	|  |   movea.l 8(sp),a0
   14cfa:	|  |   movea.l 4(a0),a0
   14cfe:	|  |   move.l 8(a0),d0
   14d02:	|  |   addq.l #1,d0
   14d04:	|  |   move.l d0,8(a0)
		return TRUE;
   14d08:	|  |   moveq #1,d0
   14d0a:	|  +-- bra.s 14d54 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14d0c:	|  |   movea.l 4(sp),a0
   14d10:	|  |   move.l 4(a0),d0
   14d14:	|  |   movea.l 8(sp),a0
   14d18:	|  |   move.l d0,4(a0)
		return TRUE;
   14d1c:	|  |   moveq #1,d0
   14d1e:	|  +-- bra.s 14d54 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14d20:	|  |   movea.l 4(sp),a0
   14d24:	|  |   move.l 4(a0),d0
   14d28:	|  |   move.l d0,-(sp)
   14d2a:	|  |   jsr 9554 <copyAnim>
   14d30:	|  |   addq.l #4,sp
   14d32:	|  |   movea.l 8(sp),a0
   14d36:	|  |   move.l d0,4(a0)
		return TRUE;
   14d3a:	|  |   moveq #1,d0
   14d3c:	|  +-- bra.s 14d54 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14d3e:	|  |   moveq #1,d0
   14d40:	|  +-- bra.s 14d54 <copyMain+0x11a>

		default:
		break;
   14d42:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14d44:	   |   pea 1a209 <talk.c.490538ff+0x59e>
   14d4a:	   |   jsr 1737c <KPrintF>
   14d50:	   |   addq.l #4,sp
	return FALSE;
   14d52:	   |   clr.w d0
}
   14d54:	   '-> rts

00014d56 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14d56:	move.l 8(sp),-(sp)
   14d5a:	jsr 14aea <unlinkVar>
   14d60:	addq.l #4,sp
	return copyMain(from, to);
   14d62:	move.l 8(sp),-(sp)
   14d66:	move.l 8(sp),-(sp)
   14d6a:	jsr 14c3a <copyMain>
   14d70:	addq.l #8,sp
}
   14d72:	rts

00014d74 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14d74:	       movea.l 4(sp),a0
   14d78:	       move.l (a0),d0
   14d7a:	       moveq #8,d1
   14d7c:	       cmp.l d0,d1
   14d7e:	   ,-- bne.s 14d94 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14d80:	   |   movea.l 4(sp),a0
   14d84:	   |   move.l 4(a0),d0
   14d88:	   |   move.l d0,-(sp)
   14d8a:	   |   jsr 9554 <copyAnim>
   14d90:	   |   addq.l #4,sp
   14d92:	,--|-- bra.s 14dda <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14d94:	|  '-> movea.l 4(sp),a0
   14d98:	|      move.l (a0),d0
   14d9a:	|      moveq #1,d1
   14d9c:	|      cmp.l d0,d1
   14d9e:	|  ,-- bne.s 14db2 <getAnimationFromVar+0x3e>
   14da0:	|  |   movea.l 4(sp),a0
   14da4:	|  |   move.l 4(a0),d0
   14da8:	|  +-- bne.s 14db2 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14daa:	|  |   jsr ad86 <makeNullAnim>
   14db0:	+--|-- bra.s 14dda <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14db2:	|  '-> movea.l 4(sp),a0
   14db6:	|      move.l (a0),d0
   14db8:	|      add.l d0,d0
   14dba:	|      movea.l d0,a1
   14dbc:	|      adda.l d0,a1
   14dbe:	|      lea 1ca9a <typeName>,a0
   14dc4:	|      move.l (0,a1,a0.l),d0
   14dc8:	|      move.l d0,-(sp)
   14dca:	|      pea 1a0f5 <talk.c.490538ff+0x48a>
   14dd0:	|      jsr 1737c <KPrintF>
   14dd6:	|      addq.l #8,sp
	return NULL;
   14dd8:	|      moveq #0,d0
}
   14dda:	'----> rts

00014ddc <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14ddc:	       movea.l 4(sp),a0
   14de0:	       move.l (a0),d0
   14de2:	       moveq #10,d1
   14de4:	       cmp.l d0,d1
   14de6:	,----- bcs.w 14e6c <getBoolean+0x90>
   14dea:	|      add.l d0,d0
   14dec:	|      movea.l d0,a0
   14dee:	|      adda.l #85498,a0
   14df4:	|      move.w (a0),d0
   14df6:	|      jmp (14dfa <getBoolean+0x1e>,pc,d0.w)
   14dfa:	|      ori.b #26,(a6)
   14dfe:	|      ori.w #68,(114,a2,d0.w)
   14e04:	|      ori.w #46,(114,a2,d0.w)
   14e0a:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14e10:	|      clr.w d0
   14e12:	|  ,-- bra.s 14e70 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14e14:	|  |   movea.l 4(sp),a0
   14e18:	|  |   move.l 4(a0),d0
   14e1c:	|  |   sne d0
   14e1e:	|  |   neg.b d0
   14e20:	|  |   move.b d0,d0
   14e22:	|  |   andi.w #255,d0
   14e26:	|  +-- bra.s 14e70 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14e28:	|  |   movea.l 4(sp),a0
   14e2c:	|  |   movea.l 4(a0),a0
   14e30:	|  |   move.l (a0),d0
   14e32:	|  |   sne d0
   14e34:	|  |   neg.b d0
   14e36:	|  |   move.b d0,d0
   14e38:	|  |   andi.w #255,d0
   14e3c:	|  +-- bra.s 14e70 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14e3e:	|  |   movea.l 4(sp),a0
   14e42:	|  |   movea.l 4(a0),a0
   14e46:	|  |   move.b (a0),d0
   14e48:	|  |   sne d0
   14e4a:	|  |   neg.b d0
   14e4c:	|  |   move.b d0,d0
   14e4e:	|  |   andi.w #255,d0
   14e52:	|  +-- bra.s 14e70 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14e54:	|  |   movea.l 4(sp),a0
   14e58:	|  |   movea.l 4(a0),a0
   14e5c:	|  |   move.l 4(a0),d0
   14e60:	|  |   sne d0
   14e62:	|  |   neg.b d0
   14e64:	|  |   move.b d0,d0
   14e66:	|  |   andi.w #255,d0
   14e6a:	|  +-- bra.s 14e70 <getBoolean+0x94>

		default:
		break;
   14e6c:	'--|-> nop
	}
	return TRUE;
   14e6e:	   |   moveq #1,d0
}
   14e70:	   '-> rts

00014e72 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14e72:	      ,----------> lea -76(sp),sp
   14e76:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14e78:	      |            movea.l 84(sp),a0
   14e7c:	      |            move.l (a0),d0
   14e7e:	      |            moveq #10,d1
   14e80:	      |            cmp.l d0,d1
   14e82:	,-----|----------- bcs.w 15120 <getTextFromAnyVar+0x2ae>
   14e86:	|     |            add.l d0,d0
   14e88:	|     |            movea.l d0,a0
   14e8a:	|     |            adda.l #85654,a0
   14e90:	|     |            move.w (a0),d0
   14e92:	|     |            jmp (14e96 <getTextFromAnyVar+0x24>,pc,d0.w)
   14e96:	|     |            .short 0x028a
   14e98:	|     |            bset d0,(a0)+
   14e9a:	|     |            .short 0x028a
   14e9c:	|     |            ori.b #-118,(a6)
   14ea0:	|     |            andi.b #8,ccr
   14ea4:	|     |            andi.w #650,-(a0)
   14ea8:	|     |            .short 0x028a
   14eaa:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14eb0:	|     |            move.l 4(a0),d0
   14eb4:	|     |            move.l d0,-(sp)
   14eb6:	|     |            jsr b8 <copyString>
   14ebc:	|     |            addq.l #4,sp
   14ebe:	|  ,--|----------- bra.w 15142 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14ec2:	|  |  |            pea 1a21c <talk.c.490538ff+0x5b1>
   14ec8:	|  |  |            jsr b8 <copyString>
   14ece:	|  |  |            addq.l #4,sp
   14ed0:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14ed4:	|  |  |            clr.l 72(sp)
   14ed8:	|  |  |     ,----- bra.w 14f82 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14edc:	|  |  |  ,--|----> pea 1a222 <talk.c.490538ff+0x5b7>
   14ee2:	|  |  |  |  |      move.l 80(sp),-(sp)
   14ee6:	|  |  |  |  |      jsr 13dc8 <joinStrings>
   14eec:	|  |  |  |  |      addq.l #8,sp
   14eee:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14ef2:	|  |  |  |  |  ,-- bne.s 14efa <getTextFromAnyVar+0x88>
   14ef4:	|  |  |  |  |  |   moveq #0,d0
   14ef6:	|  +--|--|--|--|-- bra.w 15142 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14efa:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14f00:	|  |  |  |  |      move.l 1cbca <SysBase>,d0
   14f06:	|  |  |  |  |      movea.l d0,a6
   14f08:	|  |  |  |  |      movea.l 56(sp),a1
   14f0c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14f10:	|  |  |  |  |      movea.l 84(sp),a0
   14f14:	|  |  |  |  |      movea.l 4(a0),a0
   14f18:	|  |  |  |  |      move.l (a0),d1
   14f1a:	|  |  |  |  |      move.l 72(sp),d0
   14f1e:	|  |  |  |  |      lsl.l #3,d0
   14f20:	|  |  |  |  |      add.l d1,d0
   14f22:	|  |  |  |  |      move.l d0,-(sp)
   14f24:	|  |  +--|--|----- jsr 14e72 <getTextFromAnyVar>(pc)
   14f28:	|  |  |  |  |      addq.l #4,sp
   14f2a:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14f2e:	|  |  |  |  |      move.l 52(sp),-(sp)
   14f32:	|  |  |  |  |      move.l 64(sp),-(sp)
   14f36:	|  |  |  |  |      jsr 13dc8 <joinStrings>
   14f3c:	|  |  |  |  |      addq.l #8,sp
   14f3e:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14f42:	|  |  |  |  |  ,-- bne.s 14f4a <getTextFromAnyVar+0xd8>
   14f44:	|  |  |  |  |  |   moveq #0,d0
   14f46:	|  +--|--|--|--|-- bra.w 15142 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f4a:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14f50:	|  |  |  |  |      move.l 1cbca <SysBase>,d0
   14f56:	|  |  |  |  |      movea.l d0,a6
   14f58:	|  |  |  |  |      movea.l 48(sp),a1
   14f5c:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14f60:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14f64:	|  |  |  |  |      move.l 60(sp),44(sp)
   14f6a:	|  |  |  |  |      move.l 1cbca <SysBase>,d0
   14f70:	|  |  |  |  |      movea.l d0,a6
   14f72:	|  |  |  |  |      movea.l 44(sp),a1
   14f76:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14f7a:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14f7e:	|  |  |  |  |      addq.l #1,72(sp)
   14f82:	|  |  |  |  '----> movea.l 84(sp),a0
   14f86:	|  |  |  |         movea.l 4(a0),a0
   14f8a:	|  |  |  |         move.l 4(a0),d0
   14f8e:	|  |  |  |         cmp.l 72(sp),d0
   14f92:	|  |  |  '-------- bgt.w 14edc <getTextFromAnyVar+0x6a>
			}
			return builder;
   14f96:	|  |  |            move.l 76(sp),d0
   14f9a:	|  +--|----------- bra.w 15142 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14f9e:	|  |  |            pea 1a224 <talk.c.490538ff+0x5b9>
   14fa4:	|  |  |            jsr b8 <copyString>
   14faa:	|  |  |            addq.l #4,sp
   14fac:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14fb0:	|  |  |            movea.l 84(sp),a0
   14fb4:	|  |  |            movea.l 4(a0),a0
   14fb8:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14fbc:	|  |  |     ,----- bra.w 1505e <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14fc0:	|  |  |  ,--|----> pea 1a222 <talk.c.490538ff+0x5b7>
   14fc6:	|  |  |  |  |      move.l 72(sp),-(sp)
   14fca:	|  |  |  |  |      jsr 13dc8 <joinStrings>
   14fd0:	|  |  |  |  |      addq.l #8,sp
   14fd2:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14fd6:	|  |  |  |  |  ,-- bne.s 14fde <getTextFromAnyVar+0x16c>
   14fd8:	|  |  |  |  |  |   moveq #0,d0
   14fda:	|  +--|--|--|--|-- bra.w 15142 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14fde:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14fe4:	|  |  |  |  |      move.l 1cbca <SysBase>,d0
   14fea:	|  |  |  |  |      movea.l d0,a6
   14fec:	|  |  |  |  |      movea.l 32(sp),a1
   14ff0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14ff4:	|  |  |  |  |      move.l 64(sp),d0
   14ff8:	|  |  |  |  |      move.l d0,-(sp)
   14ffa:	|  |  '--|--|----- jsr 14e72 <getTextFromAnyVar>(pc)
   14ffe:	|  |     |  |      addq.l #4,sp
   15000:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   15004:	|  |     |  |      move.l 28(sp),-(sp)
   15008:	|  |     |  |      move.l 40(sp),-(sp)
   1500c:	|  |     |  |      jsr 13dc8 <joinStrings>
   15012:	|  |     |  |      addq.l #8,sp
   15014:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15018:	|  |     |  |  ,-- bne.s 15020 <getTextFromAnyVar+0x1ae>
   1501a:	|  |     |  |  |   moveq #0,d0
   1501c:	|  +-----|--|--|-- bra.w 15142 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15020:	|  |     |  |  '-> move.l 28(sp),24(sp)
   15026:	|  |     |  |      move.l 1cbca <SysBase>,d0
   1502c:	|  |     |  |      movea.l d0,a6
   1502e:	|  |     |  |      movea.l 24(sp),a1
   15032:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15036:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1503a:	|  |     |  |      move.l 36(sp),20(sp)
   15040:	|  |     |  |      move.l 1cbca <SysBase>,d0
   15046:	|  |     |  |      movea.l d0,a6
   15048:	|  |     |  |      movea.l 20(sp),a1
   1504c:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   15050:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15054:	|  |     |  |      movea.l 64(sp),a0
   15058:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1505e:	|  |     |  '----> tst.l 64(sp)
   15062:	|  |     '-------- bne.w 14fc0 <getTextFromAnyVar+0x14e>
			}
			return builder;
   15066:	|  |               move.l 68(sp),d0
   1506a:	|  +-------------- bra.w 15142 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1506e:	|  |               moveq #10,d0
   15070:	|  |               move.l d0,16(sp)
   15074:	|  |               clr.l 12(sp)
   15078:	|  |               move.l 1cbca <SysBase>,d0
   1507e:	|  |               movea.l d0,a6
   15080:	|  |               move.l 16(sp),d0
   15084:	|  |               move.l 12(sp),d1
   15088:	|  |               jsr -684(a6)
   1508c:	|  |               move.l d0,8(sp)
   15090:	|  |               move.l 8(sp),d0
   15094:	|  |               move.l d0,4(sp)
			if (! buff) {
   15098:	|  |           ,-- bne.s 150ae <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1509a:	|  |           |   pea 1a22b <talk.c.490538ff+0x5c0>
   150a0:	|  |           |   jsr 1737c <KPrintF>
   150a6:	|  |           |   addq.l #4,sp
				return NULL;
   150a8:	|  |           |   moveq #0,d0
   150aa:	|  +-----------|-- bra.w 15142 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   150ae:	|  |           '-> movea.l 84(sp),a0
   150b2:	|  |               move.l 4(a0),d0
   150b6:	|  |               move.l d0,-(sp)
   150b8:	|  |               pea 1a255 <talk.c.490538ff+0x5ea>
   150be:	|  |               move.l 12(sp),-(sp)
   150c2:	|  |               jsr 140a6 <sprintf>
   150c8:	|  |               lea 12(sp),sp
			return buff;
   150cc:	|  |               move.l 4(sp),d0
   150d0:	|  +-------------- bra.s 15142 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   150d2:	|  |               movea.l 84(sp),a0
   150d6:	|  |               move.l 4(a0),d0
   150da:	|  |               move.l d0,-(sp)
   150dc:	|  |               jsr 4a22 <resourceNameFromNum>
   150e2:	|  |               addq.l #4,sp
   150e4:	|  |               move.l d0,-(sp)
   150e6:	|  |               pea 18b92 <PutChar+0xd74>
   150ec:	|  |               jsr 13dc8 <joinStrings>
   150f2:	|  |               addq.l #8,sp
   150f4:	|  +-------------- bra.s 15142 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   150f6:	|  |               movea.l 84(sp),a0
   150fa:	|  |               move.l 4(a0),d0
   150fe:	|  |               move.l d0,-(sp)
   15100:	|  |               jsr d5b0 <findObjectType>
   15106:	|  |               addq.l #4,sp
   15108:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1510c:	+--|-------------- beq.s 15120 <getTextFromAnyVar+0x2ae>
   1510e:	|  |               movea.l 40(sp),a0
   15112:	|  |               move.l (a0),d0
   15114:	|  |               move.l d0,-(sp)
   15116:	|  |               jsr b8 <copyString>
   1511c:	|  |               addq.l #4,sp
   1511e:	|  +-------------- bra.s 15142 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15120:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   15122:	   |               movea.l 84(sp),a0
   15126:	   |               move.l (a0),d0
   15128:	   |               add.l d0,d0
   1512a:	   |               movea.l d0,a1
   1512c:	   |               adda.l d0,a1
   1512e:	   |               lea 1ca9a <typeName>,a0
   15134:	   |               move.l (0,a1,a0.l),d0
   15138:	   |               move.l d0,-(sp)
   1513a:	   |               jsr b8 <copyString>
   15140:	   |               addq.l #4,sp
}
   15142:	   '-------------> movea.l (sp)+,a6
   15144:	                   lea 76(sp),sp
   15148:	                   rts

0001514a <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1514a:	move.l 4(sp),-(sp)
   1514e:	jsr 14aea <unlinkVar>
   15154:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15156:	movea.l 4(sp),a0
   1515a:	moveq #8,d0
   1515c:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1515e:	movea.l 4(sp),a0
   15162:	move.l 8(sp),4(a0)
}
   15168:	nop
   1516a:	rts

0001516c <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1516c:	move.l 4(sp),-(sp)
   15170:	jsr 14aea <unlinkVar>
   15176:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15178:	movea.l 4(sp),a0
   1517c:	moveq #9,d0
   1517e:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   15180:	movea.l 4(sp),a0
   15184:	move.l 8(sp),4(a0)
}
   1518a:	nop
   1518c:	rts

0001518e <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   1518e:	move.l 4(sp),-(sp)
   15192:	jsr 14aea <unlinkVar>
   15198:	addq.l #4,sp
   1519a:	movea.l 4(sp),a0
   1519e:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   151a2:	movea.l 4(sp),a0
   151a6:	move.l 12(sp),4(a0)
   151ac:	nop
   151ae:	rts

000151b0 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   151b0:	      ,-- bra.s 151c2 <stackGetByIndex+0x12>
        vS = vS->next;
   151b2:	,-----|-> movea.l 4(sp),a0
   151b6:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   151bc:	|     +-- bne.s 151c2 <stackGetByIndex+0x12>
            return NULL;
   151be:	|     |   moveq #0,d0
   151c0:	|  ,--|-- bra.s 151d6 <stackGetByIndex+0x26>
    while (theIndex--) {
   151c2:	|  |  '-> move.l 8(sp),d0
   151c6:	|  |      move.l d0,d1
   151c8:	|  |      subq.l #1,d1
   151ca:	|  |      move.l d1,8(sp)
   151ce:	|  |      tst.l d0
   151d0:	'--|----- bne.s 151b2 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   151d2:	   |      move.l 4(sp),d0
}
   151d6:	   '----> rts

000151d8 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   151d8:	          tst.l 4(sp)
   151dc:	      ,-- bne.s 151ec <stackFindLast+0x14>
		return NULL;
   151de:	      |   moveq #0,d0
   151e0:	,-----|-- bra.s 151fa <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   151e2:	|  ,--|-> movea.l 4(sp),a0
   151e6:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   151ec:	|  |  '-> movea.l 4(sp),a0
   151f0:	|  |      move.l 8(a0),d0
   151f4:	|  '----- bne.s 151e2 <stackFindLast+0xa>

	return hunt;
   151f6:	|         move.l 4(sp),d0
}
   151fa:	'-------> rts

000151fc <stackSize>:

int stackSize (const struct stackHandler * me) {
   151fc:	       subq.l #8,sp
	int r = 0;
   151fe:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   15202:	       movea.l 12(sp),a0
   15206:	       move.l (a0),(sp)
	while (a) {
   15208:	   ,-- bra.s 15214 <stackSize+0x18>
		r ++;
   1520a:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   1520e:	|  |   movea.l (sp),a0
   15210:	|  |   move.l 8(a0),(sp)
	while (a) {
   15214:	|  '-> tst.l (sp)
   15216:	'----- bne.s 1520a <stackSize+0xe>
	}
	return r;
   15218:	       move.l 4(sp),d0
}
   1521c:	       addq.l #8,sp
   1521e:	       rts

00015220 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15220:	subq.l #8,sp
   15222:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15224:	movea.l 16(sp),a0
   15228:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1522c:	movea.l 16(sp),a0
   15230:	movea.l (a0),a0
   15232:	move.l 8(a0),d0
   15236:	movea.l 16(sp),a0
   1523a:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1523c:	move.l 8(sp),d0
   15240:	move.l d0,-(sp)
   15242:	jsr 14aea <unlinkVar>
   15248:	addq.l #4,sp
	FreeVec(killMe);
   1524a:	move.l 8(sp),4(sp)
   15250:	move.l 1cbca <SysBase>,d0
   15256:	movea.l d0,a6
   15258:	movea.l 4(sp),a1
   1525c:	jsr -690(a6)
   15260:	nop
   15262:	movea.l (sp)+,a6
   15264:	addq.l #8,sp
   15266:	rts

00015268 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15268:	       lea -52(sp),sp
   1526c:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1526e:	       pea 1a258 <talk.c.490538ff+0x5ed>
   15274:	       jsr 1737c <KPrintF>
   1527a:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   1527c:	       moveq #68,d0
   1527e:	       move.l d0,52(sp)
   15282:	       clr.l 48(sp)
   15286:	       move.l 1cbca <SysBase>,d0
   1528c:	       movea.l d0,a6
   1528e:	       move.l 52(sp),d0
   15292:	       move.l 48(sp),d1
   15296:	       jsr -684(a6)
   1529a:	       move.l d0,44(sp)
   1529e:	       move.l 44(sp),d0
   152a2:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   152a6:	   ,-- bne.s 152ae <freeze+0x46>
   152a8:	   |   clr.w d0
   152aa:	,--|-- bra.w 15440 <freeze+0x1d8>

	CstFreeze();
   152ae:	|  '-> jsr 1bf0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   152b4:	|      move.l 1cc62 <sceneWidth>,d0
   152ba:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   152be:	|      move.l 1cc66 <sceneHeight>,d0
   152c4:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   152c8:	|      move.l 1cc62 <sceneWidth>,d0
   152ce:	|      movea.l 40(sp),a0
   152d2:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   152d6:	|      move.l 1cc66 <sceneHeight>,d0
   152dc:	|      movea.l 40(sp),a0
   152e0:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   152e4:	|      move.l 1cc80 <cameraX>,d0
   152ea:	|      movea.l 40(sp),a0
   152ee:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   152f2:	|      move.l 1cc84 <cameraY>,d0
   152f8:	|      movea.l 40(sp),a0
   152fc:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15300:	|      move.l 1c55c <cameraZoom>,d0
   15306:	|      movea.l 40(sp),a0
   1530a:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1530e:	|      move.w #1,1cc6e <backdropExists>

	newFreezer -> allPeople = allPeople;
   15316:	|      move.l 1cc2a <allPeople>,d0
   1531c:	|      movea.l 40(sp),a0
   15320:	|      move.l d0,(a0)
	allPeople = NULL;
   15322:	|      clr.l 1cc2a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15328:	|      moveq #42,d0
   1532a:	|      move.l d0,28(sp)
   1532e:	|      clr.l 24(sp)
   15332:	|      move.l 1cbca <SysBase>,d0
   15338:	|      movea.l d0,a6
   1533a:	|      move.l 28(sp),d0
   1533e:	|      move.l 24(sp),d1
   15342:	|      jsr -684(a6)
   15346:	|      move.l d0,20(sp)
   1534a:	|      move.l 20(sp),d0
   1534e:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15352:	|  ,-- bne.s 1535a <freeze+0xf2>
   15354:	|  |   clr.w d0
   15356:	+--|-- bra.w 15440 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   1535a:	|  '-> move.l 1ccd6 <allScreenRegions>,d0
   15360:	|      movea.l 40(sp),a0
   15364:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15368:	|      clr.l 1ccd6 <allScreenRegions>
	overRegion = NULL;
   1536e:	|      clr.l 1ccda <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15374:	|      move.l 1cac4 <mouseCursorAnim>,d0
   1537a:	|      movea.l 40(sp),a0
   1537e:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   15382:	|      move.l 1cac8 <mouseCursorFrameNum>,d0
   15388:	|      movea.l 40(sp),a0
   1538c:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15390:	|      jsr ad86 <makeNullAnim>
   15396:	|      move.l d0,1cac4 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1539c:	|      clr.l 1cac8 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   153a2:	|      move.l 1cc26 <zBuffer>,d0
   153a8:	|      movea.l 40(sp),a0
   153ac:	|      move.l d0,60(a0)
	zBuffer = NULL;
   153b0:	|      clr.l 1cc26 <zBuffer>

	newFreezer -> speech = speech;
   153b6:	|      move.l 1cb1a <speech>,d0
   153bc:	|      movea.l 40(sp),a0
   153c0:	|      move.l d0,20(a0)
	initSpeech ();
   153c4:	|      jsr 3f18 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   153ca:	|      move.l 1c53a <currentEvents>,d0
   153d0:	|      movea.l 40(sp),a0
   153d4:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   153d8:	|      moveq #28,d0
   153da:	|      move.l d0,12(sp)
   153de:	|      clr.l 8(sp)
   153e2:	|      move.l 1cbca <SysBase>,d0
   153e8:	|      movea.l d0,a6
   153ea:	|      move.l 12(sp),d0
   153ee:	|      move.l 8(sp),d1
   153f2:	|      jsr -684(a6)
   153f6:	|      move.l d0,4(sp)
   153fa:	|      move.l 4(sp),d0
   153fe:	|      move.l d0,1c53a <currentEvents>
	if (!currentEvents) return FALSE;
   15404:	|      move.l 1c53a <currentEvents>,d0
   1540a:	|  ,-- bne.s 15410 <freeze+0x1a8>
   1540c:	|  |   clr.w d0
   1540e:	+--|-- bra.s 15440 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15410:	|  '-> move.l 1c53a <currentEvents>,d0
   15416:	|      pea 1c <_start+0x1c>
   1541a:	|      clr.l -(sp)
   1541c:	|      move.l d0,-(sp)
   1541e:	|      jsr 17300 <memset>
   15424:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15428:	|      move.l 1ccba <frozenStuff>,d0
   1542e:	|      movea.l 40(sp),a0
   15432:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15436:	|      move.l 40(sp),1ccba <frozenStuff>

	return TRUE;
   1543e:	|      moveq #1,d0
}
   15440:	'----> movea.l (sp)+,a6
   15442:	       lea 52(sp),sp
   15446:	       rts

00015448 <howFrozen>:

int howFrozen () {
   15448:	       subq.l #8,sp
	int a = 0;
   1544a:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1544e:	       move.l 1ccba <frozenStuff>,(sp)
	while (f) {
   15454:	   ,-- bra.s 15460 <howFrozen+0x18>
		a ++;
   15456:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   1545a:	|  |   movea.l (sp),a0
   1545c:	|  |   move.l 64(a0),(sp)
	while (f) {
   15460:	|  '-> tst.l (sp)
   15462:	'----- bne.s 15456 <howFrozen+0xe>
	}
	return a;
   15464:	       move.l 4(sp),d0
}
   15468:	       addq.l #8,sp
   1546a:	       rts

0001546c <unfreeze>:

void unfreeze () {
   1546c:	       lea -16(sp),sp
   15470:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15472:	       move.l 1ccba <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1547a:	       move.l 1ccba <frozenStuff>,d0
   15480:	,----- beq.w 156b8 <unfreeze+0x24c>

	CstUnfreeze();
   15484:	|      jsr 3b84 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1548a:	|      movea.l 1ccba <frozenStuff>,a0
   15490:	|      move.l 48(a0),d0
   15494:	|      move.l d0,1cc62 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1549a:	|      movea.l 1ccba <frozenStuff>,a0
   154a0:	|      move.l 52(a0),d0
   154a4:	|      move.l d0,1cc66 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   154aa:	|      movea.l 1ccba <frozenStuff>,a0
   154b0:	|      move.l 40(a0),d0
   154b4:	|      move.l d0,1cc80 <cameraX>
	cameraY = frozenStuff -> cameraY;
   154ba:	|      movea.l 1ccba <frozenStuff>,a0
   154c0:	|      move.l 44(a0),d0
   154c4:	|      move.l d0,1cc84 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   154ca:	|      move.l 1cb86 <input+0xa>,d0
   154d0:	|      move.l d0,-(sp)
   154d2:	|      jsr 177ae <__floatsisf>
   154d8:	|      addq.l #4,sp
   154da:	|      move.l d0,d1
   154dc:	|      move.l 1c55c <cameraZoom>,d0
   154e2:	|      move.l d0,-(sp)
   154e4:	|      move.l d1,-(sp)
   154e6:	|      jsr 17860 <__mulsf3>
   154ec:	|      addq.l #8,sp
   154ee:	|      move.l d0,-(sp)
   154f0:	|      jsr 17746 <__fixsfsi>
   154f6:	|      addq.l #4,sp
   154f8:	|      move.l d0,1cb86 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   154fe:	|      move.l 1cb8a <input+0xe>,d0
   15504:	|      move.l d0,-(sp)
   15506:	|      jsr 177ae <__floatsisf>
   1550c:	|      addq.l #4,sp
   1550e:	|      move.l d0,d1
   15510:	|      move.l 1c55c <cameraZoom>,d0
   15516:	|      move.l d0,-(sp)
   15518:	|      move.l d1,-(sp)
   1551a:	|      jsr 17860 <__mulsf3>
   15520:	|      addq.l #8,sp
   15522:	|      move.l d0,-(sp)
   15524:	|      jsr 17746 <__fixsfsi>
   1552a:	|      addq.l #4,sp
   1552c:	|      move.l d0,1cb8a <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15532:	|      movea.l 1ccba <frozenStuff>,a0
   15538:	|      move.l 56(a0),d0
   1553c:	|      move.l d0,1c55c <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15542:	|      move.l 1cb86 <input+0xa>,d0
   15548:	|      move.l d0,-(sp)
   1554a:	|      jsr 177ae <__floatsisf>
   15550:	|      addq.l #4,sp
   15552:	|      move.l d0,d1
   15554:	|      move.l 1c55c <cameraZoom>,d0
   1555a:	|      move.l d0,-(sp)
   1555c:	|      move.l d1,-(sp)
   1555e:	|      jsr 17664 <__divsf3>
   15564:	|      addq.l #8,sp
   15566:	|      move.l d0,-(sp)
   15568:	|      jsr 17746 <__fixsfsi>
   1556e:	|      addq.l #4,sp
   15570:	|      move.l d0,1cb86 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15576:	|      move.l 1cb8a <input+0xe>,d0
   1557c:	|      move.l d0,-(sp)
   1557e:	|      jsr 177ae <__floatsisf>
   15584:	|      addq.l #4,sp
   15586:	|      move.l d0,d1
   15588:	|      move.l 1c55c <cameraZoom>,d0
   1558e:	|      move.l d0,-(sp)
   15590:	|      move.l d1,-(sp)
   15592:	|      jsr 17664 <__divsf3>
   15598:	|      addq.l #8,sp
   1559a:	|      move.l d0,-(sp)
   1559c:	|      jsr 17746 <__fixsfsi>
   155a2:	|      addq.l #4,sp
   155a4:	|      move.l d0,1cb8a <input+0xe>

	killAllPeople ();
   155aa:	|      jsr aa56 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   155b0:	|      movea.l 1ccba <frozenStuff>,a0
   155b6:	|      move.l (a0),d0
   155b8:	|      move.l d0,1cc2a <allPeople>

	killAllRegions ();
   155be:	|      jsr 15b8c <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   155c4:	|      movea.l 1ccba <frozenStuff>,a0
   155ca:	|      move.l 4(a0),d0
   155ce:	|      move.l d0,1ccd6 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   155d4:	|      move.l 1cac4 <mouseCursorAnim>,d0
   155da:	|      move.l d0,-(sp)
   155dc:	|      jsr 9920 <deleteAnim>
   155e2:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   155e4:	|      movea.l 1ccba <frozenStuff>,a0
   155ea:	|      move.l 32(a0),d0
   155ee:	|      move.l d0,1cac4 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   155f4:	|      movea.l 1ccba <frozenStuff>,a0
   155fa:	|      move.l 36(a0),d0
   155fe:	|      move.l d0,1cac8 <mouseCursorFrameNum>

	killZBuffer ();
   15604:	|      jsr 86c6 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1560a:	|      movea.l 1ccba <frozenStuff>,a0
   15610:	|      move.l 60(a0),d0
   15614:	|      move.l d0,1cc26 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1561a:	|      move.l 1c53a <currentEvents>,d0
   15620:	|  ,-- beq.s 1563a <unfreeze+0x1ce>
   15622:	|  |   move.l 1c53a <currentEvents>,12(sp)
   1562a:	|  |   move.l 1cbca <SysBase>,d0
   15630:	|  |   movea.l d0,a6
   15632:	|  |   movea.l 12(sp),a1
   15636:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1563a:	|  '-> movea.l 1ccba <frozenStuff>,a0
   15640:	|      move.l 28(a0),d0
   15644:	|      move.l d0,1c53a <currentEvents>

	killAllSpeech ();
   1564a:	|      jsr 3fb0 <killAllSpeech>
	if (speech) FreeVec(speech);
   15650:	|      move.l 1cb1a <speech>,d0
   15656:	|  ,-- beq.s 15670 <unfreeze+0x204>
   15658:	|  |   move.l 1cb1a <speech>,8(sp)
   15660:	|  |   move.l 1cbca <SysBase>,d0
   15666:	|  |   movea.l d0,a6
   15668:	|  |   movea.l 8(sp),a1
   1566c:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15670:	|  '-> movea.l 1ccba <frozenStuff>,a0
   15676:	|      move.l 20(a0),d0
   1567a:	|      move.l d0,1cb1a <speech>

	frozenStuff = frozenStuff -> next;
   15680:	|      movea.l 1ccba <frozenStuff>,a0
   15686:	|      move.l 64(a0),d0
   1568a:	|      move.l d0,1ccba <frozenStuff>

	overRegion = NULL;
   15690:	|      clr.l 1ccda <overRegion>
	if (killMe) FreeVec(killMe);
   15696:	|      tst.l 16(sp)
   1569a:	|  ,-- beq.s 156b2 <unfreeze+0x246>
   1569c:	|  |   move.l 16(sp),4(sp)
   156a2:	|  |   move.l 1cbca <SysBase>,d0
   156a8:	|  |   movea.l d0,a6
   156aa:	|  |   movea.l 4(sp),a1
   156ae:	|  |   jsr -690(a6)
	killMe = NULL;
   156b2:	|  '-> clr.l 16(sp)
   156b6:	|  ,-- bra.s 156ba <unfreeze+0x24e>
	if (! frozenStuff) return;
   156b8:	'--|-> nop
}
   156ba:	   '-> movea.l (sp)+,a6
   156bc:	       lea 16(sp),sp
   156c0:	       rts

000156c2 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   156c2:	pea 1a26a <talk.c.490538ff+0x5ff>
   156c8:	jsr 1737c <KPrintF>
   156ce:	addq.l #4,sp
	return FALSE;
   156d0:	clr.w d0
}
   156d2:	rts

000156d4 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   156d4:	          lea -32(sp),sp
   156d8:	          move.l a6,-(sp)
   156da:	          move.l d2,-(sp)
	unsigned int a = 0;
   156dc:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   156e0:	          move.l 1ccc6 <fontOrderString>,d0
   156e6:	      ,-- beq.s 15700 <loadFont+0x2c>
   156e8:	      |   move.l 1ccc6 <fontOrderString>,24(sp)
   156f0:	      |   move.l 1cbca <SysBase>,d0
   156f6:	      |   movea.l d0,a6
   156f8:	      |   movea.l 24(sp),a1
   156fc:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15700:	      '-> move.l 48(sp),-(sp)
   15704:	          jsr b8 <copyString>
   1570a:	          addq.l #4,sp
   1570c:	          move.l d0,1ccc6 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15712:	          move.l 1ccd2 <theFont>,d0
   15718:	      ,-- beq.s 1572a <loadFont+0x56>
   1571a:	      |   move.l 1ccd2 <theFont>,d0
   15720:	      |   move.l d0,-(sp)
   15722:	      |   jsr 8a04 <forgetSpriteBank>
   15728:	      |   addq.l #4,sp
	theFont = NULL;
   1572a:	      '-> clr.l 1ccd2 <theFont>

	loadedFontNum = filenum;
   15730:	          move.l 44(sp),1ccc2 <loadedFontNum>

	fontTableSize = 0;
   15738:	          clr.l 1ccce <fontTableSize>
	char *tmp = charOrder;
   1573e:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15744:	   ,----- bra.s 15780 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15746:	,--|----> movea.l 32(sp),a0
   1574a:	|  |      move.b (a0),d0
   1574c:	|  |      ext.w d0
   1574e:	|  |      movea.w d0,a0
   15750:	|  |      move.l 1ccce <fontTableSize>,d0
   15756:	|  |      move.l d0,d0
   15758:	|  |      move.b d0,d0
   1575a:	|  |      andi.l #255,d0
   15760:	|  |      cmp.l a0,d0
   15762:	|  |  ,-- bge.s 15774 <loadFont+0xa0>
   15764:	|  |  |   movea.l 32(sp),a0
   15768:	|  |  |   move.b (a0),d0
   1576a:	|  |  |   ext.w d0
   1576c:	|  |  |   movea.w d0,a0
   1576e:	|  |  |   move.l a0,1ccce <fontTableSize>
		*tmp++;
   15774:	|  |  '-> move.l 32(sp),d0
   15778:	|  |      move.l d0,d1
   1577a:	|  |      addq.l #1,d1
   1577c:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15780:	|  '----> movea.l 32(sp),a0
   15784:	|         move.b (a0),d0
   15786:	'-------- bne.s 15746 <loadFont+0x72>
	}
	fontTableSize++;
   15788:	          move.l 1ccce <fontTableSize>,d0
   1578e:	          addq.l #1,d0
   15790:	          move.l d0,1ccce <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15796:	          move.l 1ccca <fontTable>,d0
   1579c:	      ,-- beq.s 157b6 <loadFont+0xe2>
   1579e:	      |   move.l 1ccca <fontTable>,20(sp)
   157a6:	      |   move.l 1cbca <SysBase>,d0
   157ac:	      |   movea.l d0,a6
   157ae:	      |   movea.l 20(sp),a1
   157b2:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   157b6:	      '-> move.l 1ccce <fontTableSize>,d0
   157bc:	          add.l d0,d0
   157be:	          add.l d0,d0
   157c0:	          move.l d0,16(sp)
   157c4:	          clr.l 12(sp)
   157c8:	          move.l 1cbca <SysBase>,d0
   157ce:	          movea.l d0,a6
   157d0:	          move.l 16(sp),d0
   157d4:	          move.l 12(sp),d1
   157d8:	          jsr -684(a6)
   157dc:	          move.l d0,8(sp)
   157e0:	          move.l 8(sp),d0
   157e4:	          move.l d0,1ccca <fontTable>
	if (!fontTable) return FALSE;
   157ea:	          move.l 1ccca <fontTable>,d0
   157f0:	      ,-- bne.s 157f8 <loadFont+0x124>
   157f2:	      |   clr.w d0
   157f4:	,-----|-- bra.w 1589e <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   157f8:	|     '-> clr.l 36(sp)
   157fc:	|     ,-- bra.s 15816 <loadFont+0x142>
		fontTable[a] = 0;
   157fe:	|  ,--|-> move.l 1ccca <fontTable>,d1
   15804:	|  |  |   move.l 36(sp),d0
   15808:	|  |  |   add.l d0,d0
   1580a:	|  |  |   add.l d0,d0
   1580c:	|  |  |   movea.l d1,a0
   1580e:	|  |  |   adda.l d0,a0
   15810:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15812:	|  |  |   addq.l #1,36(sp)
   15816:	|  |  '-> move.l 1ccce <fontTableSize>,d0
   1581c:	|  |      cmp.l 36(sp),d0
   15820:	|  '----- bhi.s 157fe <loadFont+0x12a>
	}
	a = 0;
   15822:	|         clr.l 36(sp)
	int i = 0;
   15826:	|         clr.l 28(sp)
	tmp = charOrder;
   1582a:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15830:	|     ,-- bra.s 15860 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15832:	|  ,--|-> move.l 1ccca <fontTable>,d1
   15838:	|  |  |   move.l 32(sp),d0
   1583c:	|  |  |   move.l d0,d2
   1583e:	|  |  |   addq.l #1,d2
   15840:	|  |  |   move.l d2,32(sp)
   15844:	|  |  |   movea.l d0,a0
   15846:	|  |  |   move.b (a0),d0
   15848:	|  |  |   ext.w d0
   1584a:	|  |  |   movea.w d0,a0
   1584c:	|  |  |   move.l a0,d0
   1584e:	|  |  |   add.l a0,d0
   15850:	|  |  |   add.l d0,d0
   15852:	|  |  |   movea.l d1,a0
   15854:	|  |  |   adda.l d0,a0
   15856:	|  |  |   move.l 28(sp),d0
   1585a:	|  |  |   move.l d0,(a0)
		i++;
   1585c:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15860:	|  |  '-> movea.l 32(sp),a0
   15864:	|  |      move.b (a0),d0
   15866:	|  '----- bne.s 15832 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15868:	|         move.l 44(sp),-(sp)
   1586c:	|         jsr 1609e <loadBankForAnim>
   15872:	|         addq.l #4,sp
   15874:	|         move.l d0,1ccd2 <theFont>
	if (!theFont) {
   1587a:	|         move.l 1ccd2 <theFont>,d0
   15880:	|     ,-- bne.s 15894 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15882:	|     |   pea 1a291 <talk.c.490538ff+0x626>
   15888:	|     |   jsr 1737c <KPrintF>
   1588e:	|     |   addq.l #4,sp
		return FALSE;
   15890:	|     |   clr.w d0
   15892:	+-----|-- bra.s 1589e <loadFont+0x1ca>
	}
	fontHeight = h;
   15894:	|     '-> move.l 52(sp),1ccbe <fontHeight>
	return TRUE;
   1589c:	|         moveq #1,d0
}
   1589e:	'-------> move.l (sp)+,d2
   158a0:	          movea.l (sp)+,a6
   158a2:	          lea 32(sp),sp
   158a6:	          rts

000158a8 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   158a8:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   158ac:	                clr.l 4(sp)

    if (!fontTableSize) return;
   158b0:	                move.l 1ccce <fontTableSize>,d0
   158b6:	,-------------- beq.w 1597e <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   158ba:	|               move.w 1cac2 <fontSpace>,d0
   158c0:	|               asr.w #1,d0
   158c2:	|               ext.l d0
   158c4:	|               add.l d0,20(sp)
	char *tmp = theText;
   158c8:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   158ce:	|     ,-------- bra.w 15972 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   158d2:	|  ,--|-------> movea.l 1ccd2 <theFont>,a0
   158d8:	|  |  |         movea.l 16(a0),a0
   158dc:	|  |  |         movea.l 8(sp),a1
   158e0:	|  |  |         move.b (a1),d0
   158e2:	|  |  |         move.b d0,d0
   158e4:	|  |  |         andi.l #255,d0
   158ea:	|  |  |         move.l 1ccce <fontTableSize>,d1
   158f0:	|  |  |         cmp.l d0,d1
   158f2:	|  |  |  ,----- bls.s 1591e <pasteStringToBackdrop+0x76>
   158f4:	|  |  |  |      move.l 1ccca <fontTable>,d1
   158fa:	|  |  |  |      movea.l 8(sp),a1
   158fe:	|  |  |  |      move.b (a1),d0
   15900:	|  |  |  |      move.b d0,d0
   15902:	|  |  |  |      andi.l #255,d0
   15908:	|  |  |  |      add.l d0,d0
   1590a:	|  |  |  |      add.l d0,d0
   1590c:	|  |  |  |      movea.l d1,a1
   1590e:	|  |  |  |      adda.l d0,a1
   15910:	|  |  |  |      move.l (a1),d1
   15912:	|  |  |  |      move.l d1,d0
   15914:	|  |  |  |      lsl.l #3,d0
   15916:	|  |  |  |      sub.l d1,d0
   15918:	|  |  |  |      add.l d0,d0
   1591a:	|  |  |  |      add.l d0,d0
   1591c:	|  |  |  |  ,-- bra.s 15920 <pasteStringToBackdrop+0x78>
   1591e:	|  |  |  '--|-> moveq #0,d0
   15920:	|  |  |     '-> adda.l d0,a0
   15922:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15924:	|  |  |         move.l 24(sp),d1
   15928:	|  |  |         movea.l (sp),a0
   1592a:	|  |  |         move.l 12(a0),d0
   1592e:	|  |  |         move.l d0,d0
   15930:	|  |  |         sub.w d0,d1
   15932:	|  |  |         move.w d1,d0
   15934:	|  |  |         movea.w d0,a1
   15936:	|  |  |         move.l 20(sp),d1
   1593a:	|  |  |         movea.l (sp),a0
   1593c:	|  |  |         move.l 8(a0),d0
   15940:	|  |  |         move.l d0,d0
   15942:	|  |  |         sub.w d0,d1
   15944:	|  |  |         move.w d1,d0
   15946:	|  |  |         movea.w d0,a0
   15948:	|  |  |         move.l a1,-(sp)
   1594a:	|  |  |         move.l a0,-(sp)
   1594c:	|  |  |         move.l 8(sp),-(sp)
   15950:	|  |  |         jsr 234c <CstPasteChar>
   15956:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1595a:	|  |  |         movea.l (sp),a0
   1595c:	|  |  |         move.l (a0),d1
   1595e:	|  |  |         move.w 1cac2 <fontSpace>,d0
   15964:	|  |  |         movea.w d0,a0
   15966:	|  |  |         move.l d1,d0
   15968:	|  |  |         add.l a0,d0
   1596a:	|  |  |         add.l d0,20(sp)
		tmp++;
   1596e:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15972:	|  |  '-------> movea.l 8(sp),a0
   15976:	|  |            move.b (a0),d0
   15978:	|  '----------- bne.w 158d2 <pasteStringToBackdrop+0x2a>
   1597c:	|           ,-- bra.s 15980 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   1597e:	'-----------|-> nop
    }
}
   15980:	            '-> lea 12(sp),sp
   15984:	                rts

00015986 <stringWidth>:


int stringWidth (char * theText) {
   15986:	                lea -16(sp),sp
	int a = 0;
   1598a:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1598e:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15992:	                move.l 1ccce <fontTableSize>,d0
   15998:	            ,-- bne.s 1599e <stringWidth+0x18>
   1599a:	            |   moveq #0,d0
   1599c:	,-----------|-- bra.s 15a12 <stringWidth+0x8c>

	char *tmp = theText;
   1599e:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   159a4:	|     ,-------- bra.s 15a06 <stringWidth+0x80>
        c = *tmp++;
   159a6:	|  ,--|-------> move.l 8(sp),d0
   159aa:	|  |  |         move.l d0,d1
   159ac:	|  |  |         addq.l #1,d1
   159ae:	|  |  |         move.l d1,8(sp)
   159b2:	|  |  |         movea.l d0,a0
   159b4:	|  |  |         move.b (a0),d0
   159b6:	|  |  |         ext.w d0
   159b8:	|  |  |         movea.w d0,a0
   159ba:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   159bc:	|  |  |         movea.l 1ccd2 <theFont>,a0
   159c2:	|  |  |         movea.l 16(a0),a1
   159c6:	|  |  |         move.l 1ccce <fontTableSize>,d0
   159cc:	|  |  |         cmp.l (sp),d0
   159ce:	|  |  |  ,----- bls.s 159ee <stringWidth+0x68>
   159d0:	|  |  |  |      move.l 1ccca <fontTable>,d1
   159d6:	|  |  |  |      move.l (sp),d0
   159d8:	|  |  |  |      add.l d0,d0
   159da:	|  |  |  |      add.l d0,d0
   159dc:	|  |  |  |      movea.l d1,a0
   159de:	|  |  |  |      adda.l d0,a0
   159e0:	|  |  |  |      move.l (a0),d1
   159e2:	|  |  |  |      move.l d1,d0
   159e4:	|  |  |  |      lsl.l #3,d0
   159e6:	|  |  |  |      sub.l d1,d0
   159e8:	|  |  |  |      add.l d0,d0
   159ea:	|  |  |  |      add.l d0,d0
   159ec:	|  |  |  |  ,-- bra.s 159f0 <stringWidth+0x6a>
   159ee:	|  |  |  '--|-> moveq #0,d0
   159f0:	|  |  |     '-> lea (0,a1,d0.l),a0
   159f4:	|  |  |         move.l (a0),d1
   159f6:	|  |  |         move.w 1cac2 <fontSpace>,d0
   159fc:	|  |  |         movea.w d0,a0
   159fe:	|  |  |         move.l d1,d0
   15a00:	|  |  |         add.l a0,d0
   15a02:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15a06:	|  |  '-------> movea.l 8(sp),a0
   15a0a:	|  |            move.b (a0),d0
   15a0c:	|  '----------- bne.s 159a6 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15a0e:	|               move.l 12(sp),d0
}
   15a12:	'-------------> lea 16(sp),sp
   15a16:	                rts

00015a18 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15a18:	       lea -16(sp),sp
   15a1c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15a1e:	       moveq #36,d0
   15a20:	       move.l d0,16(sp)
   15a24:	       clr.l 12(sp)
   15a28:	       move.l 1cbca <SysBase>,d0
   15a2e:	       movea.l d0,a6
   15a30:	       move.l 16(sp),d0
   15a34:	       move.l 12(sp),d1
   15a38:	       jsr -684(a6)
   15a3c:	       move.l d0,8(sp)
   15a40:	       move.l 8(sp),d0
   15a44:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15a48:	   ,-- bne.s 15a50 <addScreenRegion+0x38>
   15a4a:	   |   clr.w d0
   15a4c:	,--|-- bra.w 15ad0 <addScreenRegion+0xb8>
    newRegion->di = di;
   15a50:	|  '-> movea.l 4(sp),a0
   15a54:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15a5a:	|      movea.l 4(sp),a0
   15a5e:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15a62:	|      movea.l 4(sp),a0
   15a66:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15a6c:	|      movea.l 4(sp),a0
   15a70:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15a76:	|      movea.l 4(sp),a0
   15a7a:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15a80:	|      movea.l 4(sp),a0
   15a84:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15a8a:	|      movea.l 4(sp),a0
   15a8e:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15a94:	|      move.l 52(sp),-(sp)
   15a98:	|      jsr d6a0 <loadObjectType>
   15a9e:	|      addq.l #4,sp
   15aa0:	|      movea.l 4(sp),a0
   15aa4:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15aa8:	|      move.l 1ccd6 <allScreenRegions>,d0
   15aae:	|      movea.l 4(sp),a0
   15ab2:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15ab6:	|      move.l 4(sp),1ccd6 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15abe:	|      movea.l 4(sp),a0
   15ac2:	|      move.l 28(a0),d0
   15ac6:	|      sne d0
   15ac8:	|      neg.b d0
   15aca:	|      move.b d0,d0
   15acc:	|      andi.w #255,d0
}
   15ad0:	'----> movea.l (sp)+,a6
   15ad2:	       lea 16(sp),sp
   15ad6:	       rts

00015ad8 <getOverRegion>:

void getOverRegion () {
   15ad8:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15ada:	             move.l 1ccd6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15ae0:	   ,-------- bra.s 15b4e <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15ae2:	,--|-------> move.l 1cb86 <input+0xa>,d0
   15ae8:	|  |         movea.l (sp),a0
   15aea:	|  |         movea.l (a0),a0
   15aec:	|  |         move.l 1cc80 <cameraX>,d1
   15af2:	|  |         suba.l d1,a0
   15af4:	|  |         cmpa.l d0,a0
   15af6:	|  |  ,----- bgt.s 15b48 <getOverRegion+0x70>
   15af8:	|  |  |      move.l 1cb8a <input+0xe>,d0
   15afe:	|  |  |      movea.l (sp),a0
   15b00:	|  |  |      movea.l 4(a0),a0
   15b04:	|  |  |      move.l 1cc84 <cameraY>,d1
   15b0a:	|  |  |      suba.l d1,a0
   15b0c:	|  |  |      cmpa.l d0,a0
   15b0e:	|  |  +----- bgt.s 15b48 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15b10:	|  |  |      move.l 1cb86 <input+0xa>,d0
   15b16:	|  |  |      movea.l (sp),a0
   15b18:	|  |  |      movea.l 8(a0),a0
   15b1c:	|  |  |      move.l 1cc80 <cameraX>,d1
   15b22:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15b24:	|  |  |      cmpa.l d0,a0
   15b26:	|  |  +----- blt.s 15b48 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15b28:	|  |  |      move.l 1cb8a <input+0xe>,d0
   15b2e:	|  |  |      movea.l (sp),a0
   15b30:	|  |  |      movea.l 12(a0),a0
   15b34:	|  |  |      move.l 1cc84 <cameraY>,d1
   15b3a:	|  |  |      suba.l d1,a0
   15b3c:	|  |  |      cmpa.l d0,a0
   15b3e:	|  |  +----- blt.s 15b48 <getOverRegion+0x70>
			overRegion = thisRegion;
   15b40:	|  |  |      move.l (sp),1ccda <overRegion>
			return;
   15b46:	|  |  |  ,-- bra.s 15b5a <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15b48:	|  |  '--|-> movea.l (sp),a0
   15b4a:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15b4e:	|  '-----|-> tst.l (sp)
   15b50:	'--------|-- bne.s 15ae2 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15b52:	         |   clr.l 1ccda <overRegion>
	return;
   15b58:	         |   nop
}
   15b5a:	         '-> addq.l #4,sp
   15b5c:	             rts

00015b5e <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15b5e:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15b60:	             move.l 1ccd6 <allScreenRegions>,(sp)

	while (thisRegion) {
   15b66:	   ,-------- bra.s 15b82 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15b68:	,--|-------> movea.l (sp),a0
   15b6a:	|  |         movea.l 28(a0),a0
   15b6e:	|  |         move.l 4(a0),d0
   15b72:	|  |         cmp.l 8(sp),d0
   15b76:	|  |     ,-- bne.s 15b7c <getRegionForObject+0x1e>
			return thisRegion;
   15b78:	|  |     |   move.l (sp),d0
   15b7a:	|  |  ,--|-- bra.s 15b88 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15b7c:	|  |  |  '-> movea.l (sp),a0
   15b7e:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15b82:	|  '--|----> tst.l (sp)
   15b84:	'-----|----- bne.s 15b68 <getRegionForObject+0xa>
	}

	return NULL;
   15b86:	      |      moveq #0,d0
}
   15b88:	      '----> addq.l #4,sp
   15b8a:	             rts

00015b8c <killAllRegions>:

void killAllRegions () {
   15b8c:	       subq.l #8,sp
   15b8e:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15b90:	   ,-- bra.s 15bd2 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15b92:	,--|-> move.l 1ccd6 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15b9a:	|  |   movea.l 1ccd6 <allScreenRegions>,a0
   15ba0:	|  |   move.l 32(a0),d0
   15ba4:	|  |   move.l d0,1ccd6 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15baa:	|  |   movea.l 8(sp),a0
   15bae:	|  |   move.l 28(a0),d0
   15bb2:	|  |   move.l d0,-(sp)
   15bb4:	|  |   jsr d958 <removeObjectType>
   15bba:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15bbc:	|  |   move.l 8(sp),4(sp)
   15bc2:	|  |   move.l 1cbca <SysBase>,d0
   15bc8:	|  |   movea.l d0,a6
   15bca:	|  |   movea.l 4(sp),a1
   15bce:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15bd2:	|  '-> move.l 1ccd6 <allScreenRegions>,d0
   15bd8:	'----- bne.s 15b92 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15bda:	       clr.l 1ccda <overRegion>
}
   15be0:	       nop
   15be2:	       movea.l (sp)+,a6
   15be4:	       addq.l #8,sp
   15be6:	       rts

00015be8 <loadRegions>:

void loadRegions (BPTR fp) {
   15be8:	       lea -24(sp),sp
   15bec:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15bee:	       move.l 32(sp),-(sp)
   15bf2:	       jsr 6bc <get2bytes>
   15bf8:	       addq.l #4,sp
   15bfa:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15bfe:	       move.l #117974,20(sp)

	while (numRegions --) {
   15c06:	   ,-- bra.w 15ce4 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15c0a:	,--|-> moveq #36,d0
   15c0c:	|  |   move.l d0,16(sp)
   15c10:	|  |   clr.l 12(sp)
   15c14:	|  |   move.l 1cbca <SysBase>,d0
   15c1a:	|  |   movea.l d0,a6
   15c1c:	|  |   move.l 16(sp),d0
   15c20:	|  |   move.l 12(sp),d1
   15c24:	|  |   jsr -684(a6)
   15c28:	|  |   move.l d0,8(sp)
   15c2c:	|  |   move.l 8(sp),d0
   15c30:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15c34:	|  |   movea.l 20(sp),a0
   15c38:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15c3c:	|  |   moveq #32,d1
   15c3e:	|  |   add.l 4(sp),d1
   15c42:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15c46:	|  |   move.l 32(sp),-(sp)
   15c4a:	|  |   jsr 6bc <get2bytes>
   15c50:	|  |   addq.l #4,sp
   15c52:	|  |   movea.l 4(sp),a0
   15c56:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15c58:	|  |   move.l 32(sp),-(sp)
   15c5c:	|  |   jsr 6bc <get2bytes>
   15c62:	|  |   addq.l #4,sp
   15c64:	|  |   movea.l 4(sp),a0
   15c68:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15c6c:	|  |   move.l 32(sp),-(sp)
   15c70:	|  |   jsr 6bc <get2bytes>
   15c76:	|  |   addq.l #4,sp
   15c78:	|  |   movea.l 4(sp),a0
   15c7c:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15c80:	|  |   move.l 32(sp),-(sp)
   15c84:	|  |   jsr 6bc <get2bytes>
   15c8a:	|  |   addq.l #4,sp
   15c8c:	|  |   movea.l 4(sp),a0
   15c90:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15c94:	|  |   move.l 32(sp),-(sp)
   15c98:	|  |   jsr 6bc <get2bytes>
   15c9e:	|  |   addq.l #4,sp
   15ca0:	|  |   movea.l 4(sp),a0
   15ca4:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15ca8:	|  |   move.l 32(sp),-(sp)
   15cac:	|  |   jsr 6bc <get2bytes>
   15cb2:	|  |   addq.l #4,sp
   15cb4:	|  |   movea.l 4(sp),a0
   15cb8:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15cbc:	|  |   move.l 32(sp),-(sp)
   15cc0:	|  |   jsr 6bc <get2bytes>
   15cc6:	|  |   addq.l #4,sp
   15cc8:	|  |   movea.l 4(sp),a0
   15ccc:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15cd0:	|  |   move.l 32(sp),-(sp)
   15cd4:	|  |   jsr d64e <loadObjectRef>
   15cda:	|  |   addq.l #4,sp
   15cdc:	|  |   movea.l 4(sp),a0
   15ce0:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15ce4:	|  '-> move.l 24(sp),d0
   15ce8:	|      move.l d0,d1
   15cea:	|      subq.l #1,d1
   15cec:	|      move.l d1,24(sp)
   15cf0:	|      tst.l d0
   15cf2:	'----- bne.w 15c0a <loadRegions+0x22>
	}
	* pointy = NULL;
   15cf6:	       movea.l 20(sp),a0
   15cfa:	       clr.l (a0)
}
   15cfc:	       nop
   15cfe:	       movea.l (sp)+,a6
   15d00:	       lea 24(sp),sp
   15d04:	       rts

00015d06 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15d06:	             lea -12(sp),sp
   15d0a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15d0c:	             move.l #117974,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15d14:	   ,-------- bra.s 15d8e <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15d16:	,--|-------> movea.l 12(sp),a0
   15d1a:	|  |         movea.l (a0),a0
   15d1c:	|  |         movea.l 28(a0),a0
   15d20:	|  |         move.l 4(a0),d0
   15d24:	|  |         cmp.l 20(sp),d0
   15d28:	|  |  ,----- bne.s 15d80 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15d2a:	|  |  |      movea.l 12(sp),a0
   15d2e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15d32:	|  |  |      movea.l 8(sp),a0
   15d36:	|  |  |      move.l 32(a0),d0
   15d3a:	|  |  |      movea.l 12(sp),a0
   15d3e:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15d40:	|  |  |      movea.l 8(sp),a0
   15d44:	|  |  |      move.l 28(a0),d0
   15d48:	|  |  |      move.l d0,-(sp)
   15d4a:	|  |  |      jsr d958 <removeObjectType>
   15d50:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15d52:	|  |  |      move.l 1ccda <overRegion>,d0
   15d58:	|  |  |      cmp.l 8(sp),d0
   15d5c:	|  |  |  ,-- bne.s 15d64 <removeScreenRegion+0x5e>
   15d5e:	|  |  |  |   clr.l 1ccda <overRegion>
            FreeVec(killMe);
   15d64:	|  |  |  '-> move.l 8(sp),4(sp)
   15d6a:	|  |  |      move.l 1cbca <SysBase>,d0
   15d70:	|  |  |      movea.l d0,a6
   15d72:	|  |  |      movea.l 4(sp),a1
   15d76:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15d7a:	|  |  |      clr.l 8(sp)
   15d7e:	|  +--|----- bra.s 15d8e <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15d80:	|  |  '----> movea.l 12(sp),a0
   15d84:	|  |         move.l (a0),d0
   15d86:	|  |         moveq #32,d1
   15d88:	|  |         add.l d0,d1
   15d8a:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15d8e:	|  '-------> movea.l 12(sp),a0
   15d92:	|            move.l (a0),d0
   15d94:	'----------- bne.s 15d16 <removeScreenRegion+0x10>
        }
    }
}
   15d96:	             nop
   15d98:	             nop
   15d9a:	             movea.l (sp)+,a6
   15d9c:	             lea 12(sp),sp
   15da0:	             rts

00015da2 <saveRegions>:

void saveRegions (BPTR fp) {
   15da2:	       subq.l #8,sp
	int numRegions = 0;
   15da4:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15da8:	       move.l 1ccd6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15dae:	   ,-- bra.s 15dba <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15db0:	,--|-> movea.l (sp),a0
   15db2:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15db6:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15dba:	|  '-> tst.l (sp)
   15dbc:	'----- bne.s 15db0 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15dbe:	       move.l 12(sp),-(sp)
   15dc2:	       move.l 8(sp),-(sp)
   15dc6:	       jsr 8d0 <put2bytes>
   15dcc:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15dce:	       move.l 1ccd6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15dd4:	,----- bra.w 15e7c <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15dd8:	|  ,-> movea.l (sp),a0
   15dda:	|  |   move.l (a0),d0
   15ddc:	|  |   move.l 12(sp),-(sp)
   15de0:	|  |   move.l d0,-(sp)
   15de2:	|  |   jsr 8d0 <put2bytes>
   15de8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15dea:	|  |   movea.l (sp),a0
   15dec:	|  |   move.l 4(a0),d0
   15df0:	|  |   move.l 12(sp),-(sp)
   15df4:	|  |   move.l d0,-(sp)
   15df6:	|  |   jsr 8d0 <put2bytes>
   15dfc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15dfe:	|  |   movea.l (sp),a0
   15e00:	|  |   move.l 8(a0),d0
   15e04:	|  |   move.l 12(sp),-(sp)
   15e08:	|  |   move.l d0,-(sp)
   15e0a:	|  |   jsr 8d0 <put2bytes>
   15e10:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15e12:	|  |   movea.l (sp),a0
   15e14:	|  |   move.l 12(a0),d0
   15e18:	|  |   move.l 12(sp),-(sp)
   15e1c:	|  |   move.l d0,-(sp)
   15e1e:	|  |   jsr 8d0 <put2bytes>
   15e24:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15e26:	|  |   movea.l (sp),a0
   15e28:	|  |   move.l 16(a0),d0
   15e2c:	|  |   move.l 12(sp),-(sp)
   15e30:	|  |   move.l d0,-(sp)
   15e32:	|  |   jsr 8d0 <put2bytes>
   15e38:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15e3a:	|  |   movea.l (sp),a0
   15e3c:	|  |   move.l 20(a0),d0
   15e40:	|  |   move.l 12(sp),-(sp)
   15e44:	|  |   move.l d0,-(sp)
   15e46:	|  |   jsr 8d0 <put2bytes>
   15e4c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15e4e:	|  |   movea.l (sp),a0
   15e50:	|  |   move.l 24(a0),d0
   15e54:	|  |   move.l 12(sp),-(sp)
   15e58:	|  |   move.l d0,-(sp)
   15e5a:	|  |   jsr 8d0 <put2bytes>
   15e60:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15e62:	|  |   movea.l (sp),a0
   15e64:	|  |   move.l 28(a0),d0
   15e68:	|  |   move.l 12(sp),-(sp)
   15e6c:	|  |   move.l d0,-(sp)
   15e6e:	|  |   jsr d9f8 <saveObjectRef>
   15e74:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15e76:	|  |   movea.l (sp),a0
   15e78:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15e7c:	'--|-> tst.l (sp)
   15e7e:	   '-- bne.w 15dd8 <saveRegions+0x36>
	}
}
   15e82:	       nop
   15e84:	       nop
   15e86:	       addq.l #8,sp
   15e88:	       rts

00015e8a <showBoxes>:

void showBoxes () {
   15e8a:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15e8c:	       move.l 1ccd6 <allScreenRegions>,(sp)

	while (huntRegion) {
   15e92:	,----- bra.w 15f2e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15e96:	|  ,-> movea.l (sp),a0
   15e98:	|  |   move.l 12(a0),d0
   15e9c:	|  |   movea.l d0,a1
   15e9e:	|  |   movea.l (sp),a0
   15ea0:	|  |   move.l 4(a0),d0
   15ea4:	|  |   move.l d0,d1
   15ea6:	|  |   movea.l (sp),a0
   15ea8:	|  |   move.l (a0),d0
   15eaa:	|  |   move.l a1,-(sp)
   15eac:	|  |   move.l d1,-(sp)
   15eae:	|  |   move.l d0,-(sp)
   15eb0:	|  |   jsr d2dc <drawVerticalLine>
   15eb6:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15eba:	|  |   movea.l (sp),a0
   15ebc:	|  |   move.l 12(a0),d0
   15ec0:	|  |   movea.l d0,a1
   15ec2:	|  |   movea.l (sp),a0
   15ec4:	|  |   move.l 4(a0),d0
   15ec8:	|  |   move.l d0,d1
   15eca:	|  |   movea.l (sp),a0
   15ecc:	|  |   move.l 8(a0),d0
   15ed0:	|  |   move.l a1,-(sp)
   15ed2:	|  |   move.l d1,-(sp)
   15ed4:	|  |   move.l d0,-(sp)
   15ed6:	|  |   jsr d2dc <drawVerticalLine>
   15edc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15ee0:	|  |   movea.l (sp),a0
   15ee2:	|  |   move.l 8(a0),d0
   15ee6:	|  |   movea.l d0,a1
   15ee8:	|  |   movea.l (sp),a0
   15eea:	|  |   move.l 4(a0),d0
   15eee:	|  |   move.l d0,d1
   15ef0:	|  |   movea.l (sp),a0
   15ef2:	|  |   move.l (a0),d0
   15ef4:	|  |   move.l a1,-(sp)
   15ef6:	|  |   move.l d1,-(sp)
   15ef8:	|  |   move.l d0,-(sp)
   15efa:	|  |   jsr d2b6 <drawHorizontalLine>
   15f00:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15f04:	|  |   movea.l (sp),a0
   15f06:	|  |   move.l 8(a0),d0
   15f0a:	|  |   movea.l d0,a1
   15f0c:	|  |   movea.l (sp),a0
   15f0e:	|  |   move.l 12(a0),d0
   15f12:	|  |   move.l d0,d1
   15f14:	|  |   movea.l (sp),a0
   15f16:	|  |   move.l (a0),d0
   15f18:	|  |   move.l a1,-(sp)
   15f1a:	|  |   move.l d1,-(sp)
   15f1c:	|  |   move.l d0,-(sp)
   15f1e:	|  |   jsr d2b6 <drawHorizontalLine>
   15f24:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15f28:	|  |   movea.l (sp),a0
   15f2a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15f2e:	'--|-> tst.l (sp)
   15f30:	   '-- bne.w 15e96 <showBoxes+0xc>
	}
   15f34:	       nop
   15f36:	       nop
   15f38:	       addq.l #4,sp
   15f3a:	       rts

00015f3c <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15f3c:	       lea -88(sp),sp
   15f40:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15f42:	       move.l 1cbca <SysBase>,d0
   15f48:	       movea.l d0,a6
   15f4a:	       jsr -666(a6)
   15f4e:	       move.l d0,88(sp)
   15f52:	       move.l 88(sp),d0
   15f56:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15f5a:	       move.l 84(sp),80(sp)
   15f60:	       moveq #40,d0
   15f62:	       move.l d0,76(sp)
   15f66:	       move.l 1cbca <SysBase>,d0
   15f6c:	       movea.l d0,a6
   15f6e:	       movea.l 80(sp),a0
   15f72:	       move.l 76(sp),d0
   15f76:	       jsr -654(a6)
   15f7a:	       move.l d0,72(sp)
   15f7e:	       move.l 72(sp),d0
   15f82:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15f86:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15f8c:	       move.l #107179,60(sp)
   15f94:	       clr.l 56(sp)
   15f98:	       move.l 64(sp),52(sp)
   15f9e:	       clr.l 48(sp)
   15fa2:	       move.l 1cbca <SysBase>,d0
   15fa8:	       movea.l d0,a6
   15faa:	       movea.l 60(sp),a0
   15fae:	       move.l 56(sp),d0
   15fb2:	       movea.l 52(sp),a1
   15fb6:	       move.l 48(sp),d1
   15fba:	       jsr -444(a6)
   15fbe:	       move.b d0,47(sp)
   15fc2:	       move.b 47(sp),d0
   15fc6:	   ,-- beq.s 15fdc <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15fc8:	   |   pea 1a2b8 <talk.c.490538ff+0x64d>
   15fce:	   |   jsr 1737c <KPrintF>
   15fd4:	   |   addq.l #4,sp
        return 0;
   15fd6:	   |   moveq #0,d0
   15fd8:	,--|-- bra.w 16096 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15fdc:	|  '-> movea.l 64(sp),a0
   15fe0:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15fe6:	|      lea 92(sp),a0
   15fea:	|      lea -86(a0),a0
   15fee:	|      move.l a0,38(sp)
   15ff2:	|      movea.l 42(sp),a6
   15ff6:	|      movea.l 38(sp),a0
   15ffa:	|      jsr -60(a6)
   15ffe:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   16002:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   16008:	|      move.l #1103515245,-(sp)
   1600e:	|      move.l 34(sp),-(sp)
   16012:	|      jsr 17d08 <__mulsi3>
   16018:	|      addq.l #8,sp
   1601a:	|      addi.l #12345,d0
   16020:	|      move.l d0,d1
   16022:	|      bclr #31,d1
   16026:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1602a:	|      move.l 30(sp),d0
   1602e:	|      pea 64 <_start+0x64>
   16032:	|      move.l d0,-(sp)
   16034:	|      jsr 17de2 <__umodsi3>
   1603a:	|      addq.l #8,sp
   1603c:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   16040:	|      move.l 26(sp),-(sp)
   16044:	|      pea 1a2d5 <talk.c.490538ff+0x66a>
   1604a:	|      jsr 1737c <KPrintF>
   16050:	|      addq.l #8,sp

    CloseDevice(ioreq);
   16052:	|      move.l 64(sp),22(sp)
   16058:	|      move.l 1cbca <SysBase>,d0
   1605e:	|      movea.l d0,a6
   16060:	|      movea.l 22(sp),a1
   16064:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16068:	|      move.l 64(sp),18(sp)
   1606e:	|      move.l 1cbca <SysBase>,d0
   16074:	|      movea.l d0,a6
   16076:	|      movea.l 18(sp),a0
   1607a:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   1607e:	|      move.l 84(sp),14(sp)
   16084:	|      move.l 1cbca <SysBase>,d0
   1608a:	|      movea.l d0,a6
   1608c:	|      movea.l 14(sp),a0
   16090:	|      jsr -672(a6)
    return 0;
   16094:	|      moveq #0,d0
   16096:	'----> movea.l (sp)+,a6
   16098:	       lea 88(sp),sp
   1609c:	       rts

0001609e <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1609e:	             lea -20(sp),sp
   160a2:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   160a4:	             move.l 1ccde <allLoadedBanks>,20(sp)
	while (returnMe) {
   160ac:	      ,----- bra.s 160de <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   160ae:	   ,--|----> movea.l 20(sp),a0
   160b2:	   |  |      move.l (a0),d0
   160b4:	   |  |      cmp.l 28(sp),d0
   160b8:	   |  |  ,-- bne.s 160d4 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   160ba:	   |  |  |   movea.l 20(sp),a0
   160be:	   |  |  |   move.l 4(a0),d0
   160c2:	   |  |  |   addq.l #1,d0
   160c4:	   |  |  |   movea.l 20(sp),a0
   160c8:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   160cc:	   |  |  |   move.l 20(sp),d0
   160d0:	,--|--|--|-- bra.w 16172 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   160d4:	|  |  |  '-> movea.l 20(sp),a0
   160d8:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   160de:	|  |  '----> tst.l 20(sp)
   160e2:	|  '-------- bne.s 160ae <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   160e4:	|            moveq #26,d0
   160e6:	|            move.l d0,16(sp)
   160ea:	|            clr.l 12(sp)
   160ee:	|            move.l 1cbca <SysBase>,d0
   160f4:	|            movea.l d0,a6
   160f6:	|            move.l 16(sp),d0
   160fa:	|            move.l 12(sp),d1
   160fe:	|            jsr -684(a6)
   16102:	|            move.l d0,8(sp)
   16106:	|            move.l 8(sp),d0
   1610a:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1610e:	|     ,----- beq.s 16170 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   16110:	|     |      movea.l 20(sp),a0
   16114:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   16118:	|     |      move.l 20(sp),d0
   1611c:	|     |      addq.l #8,d0
   1611e:	|     |      move.l d0,-(sp)
   16120:	|     |      move.l 32(sp),-(sp)
   16124:	|     |      jsr 8b10 <loadSpriteBank>
   1612a:	|     |      addq.l #8,sp
   1612c:	|     |      tst.w d0
   1612e:	|     |  ,-- beq.s 16156 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   16130:	|     |  |   movea.l 20(sp),a0
   16134:	|     |  |   moveq #1,d0
   16136:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   1613a:	|     |  |   move.l 1ccde <allLoadedBanks>,d0
   16140:	|     |  |   movea.l 20(sp),a0
   16144:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16148:	|     |  |   move.l 20(sp),1ccde <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   16150:	|     |  |   move.l 20(sp),d0
   16154:	+-----|--|-- bra.s 16172 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16156:	|     |  '-> move.l 20(sp),4(sp)
   1615c:	|     |      move.l 1cbca <SysBase>,d0
   16162:	|     |      movea.l d0,a6
   16164:	|     |      movea.l 4(sp),a1
   16168:	|     |      jsr -690(a6)
			return NULL;
   1616c:	|     |      moveq #0,d0
   1616e:	+-----|----- bra.s 16172 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   16170:	|     '----> moveq #0,d0
}
   16172:	'----------> movea.l (sp)+,a6
   16174:	             lea 20(sp),sp
   16178:	             rts

0001617a <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1617a:	       lea -60(sp),sp
   1617e:	       move.l d3,-(sp)
   16180:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16182:	       move.l 88(sp),d0
   16186:	       sub.l 80(sp),d0
   1618a:	       move.l d0,-(sp)
   1618c:	       jsr 1776e <__floatsidf>
   16192:	       addq.l #4,sp
   16194:	       move.l d0,32(sp)
   16198:	       move.l d1,36(sp)
   1619c:	       move.l 32(sp),60(sp)
   161a2:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   161a8:	       move.l 92(sp),d0
   161ac:	       sub.l 84(sp),d0
   161b0:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   161b4:	       move.l 96(sp),d0
   161b8:	       sub.l 80(sp),d0
   161bc:	       move.l d0,-(sp)
   161be:	       jsr 1776e <__floatsidf>
   161c4:	       addq.l #4,sp
   161c6:	       move.l 64(sp),-(sp)
   161ca:	       move.l 64(sp),-(sp)
   161ce:	       move.l d1,-(sp)
   161d0:	       move.l d0,-(sp)
   161d2:	       jsr 177fe <__muldf3>
   161d8:	       lea 16(sp),sp
   161dc:	       move.l d0,d2
   161de:	       move.l d1,d3
   161e0:	       move.l 100(sp),d0
   161e4:	       sub.l 84(sp),d0
   161e8:	       move.l 56(sp),-(sp)
   161ec:	       move.l d0,-(sp)
   161ee:	       jsr 17d08 <__mulsi3>
   161f4:	       addq.l #8,sp
   161f6:	       move.l d0,-(sp)
   161f8:	       jsr 1776e <__floatsidf>
   161fe:	       addq.l #4,sp
   16200:	       move.l d1,-(sp)
   16202:	       move.l d0,-(sp)
   16204:	       move.l d3,-(sp)
   16206:	       move.l d2,-(sp)
   16208:	       jsr 175a0 <__adddf3>
   1620e:	       lea 16(sp),sp
   16212:	       move.l d0,24(sp)
   16216:	       move.l d1,28(sp)
   1621a:	       move.l 24(sp),48(sp)
   16220:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16226:	       move.l 64(sp),-(sp)
   1622a:	       move.l 64(sp),-(sp)
   1622e:	       move.l 72(sp),-(sp)
   16232:	       move.l 72(sp),-(sp)
   16236:	       jsr 177fe <__muldf3>
   1623c:	       lea 16(sp),sp
   16240:	       move.l d0,d2
   16242:	       move.l d1,d3
   16244:	       move.l 56(sp),-(sp)
   16248:	       move.l 60(sp),-(sp)
   1624c:	       jsr 17d08 <__mulsi3>
   16252:	       addq.l #8,sp
   16254:	       move.l d0,-(sp)
   16256:	       jsr 1776e <__floatsidf>
   1625c:	       addq.l #4,sp
   1625e:	       move.l d1,-(sp)
   16260:	       move.l d0,-(sp)
   16262:	       move.l d3,-(sp)
   16264:	       move.l d2,-(sp)
   16266:	       jsr 175a0 <__adddf3>
   1626c:	       lea 16(sp),sp
   16270:	       move.l d1,-(sp)
   16272:	       move.l d0,-(sp)
   16274:	       move.l 60(sp),-(sp)
   16278:	       move.l 60(sp),-(sp)
   1627c:	       jsr 17602 <__divdf3>
   16282:	       lea 16(sp),sp
   16286:	       move.l d0,16(sp)
   1628a:	       move.l d1,20(sp)
   1628e:	       move.l 16(sp),48(sp)
   16294:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1629a:	       clr.l -(sp)
   1629c:	       clr.l -(sp)
   1629e:	       move.l 60(sp),-(sp)
   162a2:	       move.l 60(sp),-(sp)
   162a6:	       jsr 17986 <__ltdf2>
   162ac:	       lea 16(sp),sp
   162b0:	       tst.l d0
   162b2:	   ,-- bge.s 162c8 <closestPointOnLine+0x14e>
		*closestX = x1;
   162b4:	   |   movea.l 72(sp),a0
   162b8:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   162bc:	   |   movea.l 76(sp),a0
   162c0:	   |   move.l 84(sp),(a0)
   162c4:	,--|-- bra.w 16396 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   162c8:	|  '-> clr.l -(sp)
   162ca:	|      move.l #1072693248,-(sp)
   162d0:	|      move.l 60(sp),-(sp)
   162d4:	|      move.l 60(sp),-(sp)
   162d8:	|      jsr 178cc <__gtdf2>
   162de:	|      lea 16(sp),sp
   162e2:	|      tst.l d0
   162e4:	|  ,-- ble.s 162fa <closestPointOnLine+0x180>
		*closestX = x2;
   162e6:	|  |   movea.l 72(sp),a0
   162ea:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   162ee:	|  |   movea.l 76(sp),a0
   162f2:	|  |   move.l 92(sp),(a0)
   162f6:	+--|-- bra.w 16396 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   162fa:	|  '-> move.l 64(sp),-(sp)
   162fe:	|      move.l 64(sp),-(sp)
   16302:	|      move.l 60(sp),-(sp)
   16306:	|      move.l 60(sp),-(sp)
   1630a:	|      jsr 177fe <__muldf3>
   16310:	|      lea 16(sp),sp
   16314:	|      move.l d0,8(sp)
   16318:	|      move.l d1,12(sp)
   1631c:	|      move.l 8(sp),40(sp)
   16322:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16328:	|      move.l 44(sp),-(sp)
   1632c:	|      move.l 44(sp),-(sp)
   16330:	|      jsr 17710 <__fixdfsi>
   16336:	|      addq.l #8,sp
   16338:	|      movea.l 72(sp),a0
   1633c:	|      move.l d0,(a0)
		*closestX += x1;
   1633e:	|      movea.l 72(sp),a0
   16342:	|      move.l (a0),d0
   16344:	|      add.l 80(sp),d0
   16348:	|      movea.l 72(sp),a0
   1634c:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1634e:	|      move.l 56(sp),-(sp)
   16352:	|      jsr 1776e <__floatsidf>
   16358:	|      addq.l #4,sp
   1635a:	|      move.l 52(sp),-(sp)
   1635e:	|      move.l 52(sp),-(sp)
   16362:	|      move.l d1,-(sp)
   16364:	|      move.l d0,-(sp)
   16366:	|      jsr 177fe <__muldf3>
   1636c:	|      lea 16(sp),sp
   16370:	|      move.l d1,-(sp)
   16372:	|      move.l d0,-(sp)
   16374:	|      jsr 17710 <__fixdfsi>
   1637a:	|      addq.l #8,sp
   1637c:	|      movea.l 76(sp),a0
   16380:	|      move.l d0,(a0)
		*closestY += y1;
   16382:	|      movea.l 76(sp),a0
   16386:	|      move.l (a0),d0
   16388:	|      add.l 84(sp),d0
   1638c:	|      movea.l 76(sp),a0
   16390:	|      move.l d0,(a0)
		return TRUE;
   16392:	|      moveq #1,d0
   16394:	|  ,-- bra.s 16398 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16396:	'--|-> clr.w d0
}
   16398:	   '-> move.l (sp)+,d2
   1639a:	       move.l (sp)+,d3
   1639c:	       lea 60(sp),sp
   163a0:	       rts

000163a2 <drawFloor>:

void drawFloor() {
   163a2:	                lea -12(sp),sp
   163a6:	                move.l d3,-(sp)
   163a8:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   163aa:	                clr.l 16(sp)
   163ae:	   ,----------- bra.w 165c2 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   163b2:	,--|----------> movea.l 1cce2 <currentFloor>,a0
   163b8:	|  |            move.l 12(a0),d1
   163bc:	|  |            move.l 16(sp),d0
   163c0:	|  |            lsl.l #3,d0
   163c2:	|  |            movea.l d1,a0
   163c4:	|  |            adda.l d0,a0
   163c6:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   163ca:	|  |            moveq #1,d0
   163cc:	|  |            cmp.l 8(sp),d0
   163d0:	|  |  ,-------- bge.w 165be <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   163d4:	|  |  |         moveq #1,d0
   163d6:	|  |  |         move.l d0,12(sp)
   163da:	|  |  |     ,-- bra.w 164d4 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   163de:	|  |  |  ,--|-> movea.l 1cce2 <currentFloor>,a0
   163e4:	|  |  |  |  |   move.l 4(a0),d1
   163e8:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   163ee:	|  |  |  |  |   movea.l 12(a0),a0
   163f2:	|  |  |  |  |   move.l 16(sp),d0
   163f6:	|  |  |  |  |   lsl.l #3,d0
   163f8:	|  |  |  |  |   adda.l d0,a0
   163fa:	|  |  |  |  |   movea.l 4(a0),a0
   163fe:	|  |  |  |  |   move.l 12(sp),d0
   16402:	|  |  |  |  |   add.l d0,d0
   16404:	|  |  |  |  |   add.l d0,d0
   16406:	|  |  |  |  |   adda.l d0,a0
   16408:	|  |  |  |  |   move.l (a0),d0
   1640a:	|  |  |  |  |   lsl.l #3,d0
   1640c:	|  |  |  |  |   movea.l d1,a0
   1640e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16410:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16414:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   1641a:	|  |  |  |  |   move.l 4(a0),d1
   1641e:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   16424:	|  |  |  |  |   movea.l 12(a0),a0
   16428:	|  |  |  |  |   move.l 16(sp),d0
   1642c:	|  |  |  |  |   lsl.l #3,d0
   1642e:	|  |  |  |  |   adda.l d0,a0
   16430:	|  |  |  |  |   movea.l 4(a0),a0
   16434:	|  |  |  |  |   move.l 12(sp),d0
   16438:	|  |  |  |  |   add.l d0,d0
   1643a:	|  |  |  |  |   add.l d0,d0
   1643c:	|  |  |  |  |   adda.l d0,a0
   1643e:	|  |  |  |  |   move.l (a0),d0
   16440:	|  |  |  |  |   lsl.l #3,d0
   16442:	|  |  |  |  |   movea.l d1,a0
   16444:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16446:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16448:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   1644e:	|  |  |  |  |   move.l 4(a0),d1
   16452:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   16458:	|  |  |  |  |   movea.l 12(a0),a0
   1645c:	|  |  |  |  |   move.l 16(sp),d0
   16460:	|  |  |  |  |   lsl.l #3,d0
   16462:	|  |  |  |  |   adda.l d0,a0
   16464:	|  |  |  |  |   movea.l 4(a0),a0
   16468:	|  |  |  |  |   move.l 12(sp),d0
   1646c:	|  |  |  |  |   addi.l #1073741823,d0
   16472:	|  |  |  |  |   add.l d0,d0
   16474:	|  |  |  |  |   add.l d0,d0
   16476:	|  |  |  |  |   adda.l d0,a0
   16478:	|  |  |  |  |   move.l (a0),d0
   1647a:	|  |  |  |  |   lsl.l #3,d0
   1647c:	|  |  |  |  |   movea.l d1,a0
   1647e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16480:	|  |  |  |  |   move.l 4(a0),d1
   16484:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   1648a:	|  |  |  |  |   move.l 4(a0),d3
   1648e:	|  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   16494:	|  |  |  |  |   movea.l 12(a0),a0
   16498:	|  |  |  |  |   move.l 16(sp),d0
   1649c:	|  |  |  |  |   lsl.l #3,d0
   1649e:	|  |  |  |  |   adda.l d0,a0
   164a0:	|  |  |  |  |   movea.l 4(a0),a0
   164a4:	|  |  |  |  |   move.l 12(sp),d0
   164a8:	|  |  |  |  |   addi.l #1073741823,d0
   164ae:	|  |  |  |  |   add.l d0,d0
   164b0:	|  |  |  |  |   add.l d0,d0
   164b2:	|  |  |  |  |   adda.l d0,a0
   164b4:	|  |  |  |  |   move.l (a0),d0
   164b6:	|  |  |  |  |   lsl.l #3,d0
   164b8:	|  |  |  |  |   movea.l d3,a0
   164ba:	|  |  |  |  |   adda.l d0,a0
   164bc:	|  |  |  |  |   move.l (a0),d0
   164be:	|  |  |  |  |   move.l d2,-(sp)
   164c0:	|  |  |  |  |   move.l a1,-(sp)
   164c2:	|  |  |  |  |   move.l d1,-(sp)
   164c4:	|  |  |  |  |   move.l d0,-(sp)
   164c6:	|  |  |  |  |   jsr 478c <drawLine>
   164cc:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   164d0:	|  |  |  |  |   addq.l #1,12(sp)
   164d4:	|  |  |  |  '-> move.l 12(sp),d0
   164d8:	|  |  |  |      cmp.l 8(sp),d0
   164dc:	|  |  |  '----- blt.w 163de <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   164e0:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   164e6:	|  |  |         move.l 4(a0),d1
   164ea:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   164f0:	|  |  |         movea.l 12(a0),a0
   164f4:	|  |  |         move.l 16(sp),d0
   164f8:	|  |  |         lsl.l #3,d0
   164fa:	|  |  |         adda.l d0,a0
   164fc:	|  |  |         movea.l 4(a0),a0
   16500:	|  |  |         move.l 8(sp),d0
   16504:	|  |  |         addi.l #1073741823,d0
   1650a:	|  |  |         add.l d0,d0
   1650c:	|  |  |         add.l d0,d0
   1650e:	|  |  |         adda.l d0,a0
   16510:	|  |  |         move.l (a0),d0
   16512:	|  |  |         lsl.l #3,d0
   16514:	|  |  |         movea.l d1,a0
   16516:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16518:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1651c:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   16522:	|  |  |         move.l 4(a0),d1
   16526:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   1652c:	|  |  |         movea.l 12(a0),a0
   16530:	|  |  |         move.l 16(sp),d0
   16534:	|  |  |         lsl.l #3,d0
   16536:	|  |  |         adda.l d0,a0
   16538:	|  |  |         movea.l 4(a0),a0
   1653c:	|  |  |         move.l 8(sp),d0
   16540:	|  |  |         addi.l #1073741823,d0
   16546:	|  |  |         add.l d0,d0
   16548:	|  |  |         add.l d0,d0
   1654a:	|  |  |         adda.l d0,a0
   1654c:	|  |  |         move.l (a0),d0
   1654e:	|  |  |         lsl.l #3,d0
   16550:	|  |  |         movea.l d1,a0
   16552:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16554:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16556:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   1655c:	|  |  |         move.l 4(a0),d1
   16560:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   16566:	|  |  |         movea.l 12(a0),a0
   1656a:	|  |  |         move.l 16(sp),d0
   1656e:	|  |  |         lsl.l #3,d0
   16570:	|  |  |         adda.l d0,a0
   16572:	|  |  |         movea.l 4(a0),a0
   16576:	|  |  |         move.l (a0),d0
   16578:	|  |  |         lsl.l #3,d0
   1657a:	|  |  |         movea.l d1,a0
   1657c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1657e:	|  |  |         move.l 4(a0),d1
   16582:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   16588:	|  |  |         move.l 4(a0),d3
   1658c:	|  |  |         movea.l 1cce2 <currentFloor>,a0
   16592:	|  |  |         movea.l 12(a0),a0
   16596:	|  |  |         move.l 16(sp),d0
   1659a:	|  |  |         lsl.l #3,d0
   1659c:	|  |  |         adda.l d0,a0
   1659e:	|  |  |         movea.l 4(a0),a0
   165a2:	|  |  |         move.l (a0),d0
   165a4:	|  |  |         lsl.l #3,d0
   165a6:	|  |  |         movea.l d3,a0
   165a8:	|  |  |         adda.l d0,a0
   165aa:	|  |  |         move.l (a0),d0
   165ac:	|  |  |         move.l d2,-(sp)
   165ae:	|  |  |         move.l a1,-(sp)
   165b0:	|  |  |         move.l d1,-(sp)
   165b2:	|  |  |         move.l d0,-(sp)
   165b4:	|  |  |         jsr 478c <drawLine>
   165ba:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   165be:	|  |  '-------> addq.l #1,16(sp)
   165c2:	|  '----------> movea.l 1cce2 <currentFloor>,a0
   165c8:	|               move.l 8(a0),d0
   165cc:	|               cmp.l 16(sp),d0
   165d0:	'-------------- bgt.w 163b2 <drawFloor+0x10>
        }
    }
}
   165d4:	                nop
   165d6:	                nop
   165d8:	                move.l (sp)+,d2
   165da:	                move.l (sp)+,d3
   165dc:	                lea 12(sp),sp
   165e0:	                rts

000165e2 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   165e2:	                      lea -12(sp),sp
    int sharedVertices = 0;
   165e6:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   165ea:	                      clr.l 4(sp)
   165ee:	   ,----------------- bra.w 16680 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   165f2:	,--|----------------> clr.l (sp)
   165f4:	|  |     ,----------- bra.s 16670 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   165f6:	|  |  ,--|----------> movea.l 16(sp),a0
   165fa:	|  |  |  |            move.l 4(a0),d1
   165fe:	|  |  |  |            move.l 4(sp),d0
   16602:	|  |  |  |            add.l d0,d0
   16604:	|  |  |  |            add.l d0,d0
   16606:	|  |  |  |            movea.l d1,a0
   16608:	|  |  |  |            adda.l d0,a0
   1660a:	|  |  |  |            move.l (a0),d1
   1660c:	|  |  |  |            movea.l 20(sp),a0
   16610:	|  |  |  |            movea.l 4(a0),a0
   16614:	|  |  |  |            move.l (sp),d0
   16616:	|  |  |  |            add.l d0,d0
   16618:	|  |  |  |            add.l d0,d0
   1661a:	|  |  |  |            adda.l d0,a0
   1661c:	|  |  |  |            move.l (a0),d0
   1661e:	|  |  |  |            cmp.l d1,d0
   16620:	|  |  |  |  ,-------- bne.s 1666e <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16622:	|  |  |  |  |         move.l 8(sp),d0
   16626:	|  |  |  |  |         move.l d0,d1
   16628:	|  |  |  |  |         addq.l #1,d1
   1662a:	|  |  |  |  |         move.l d1,8(sp)
   1662e:	|  |  |  |  |         tst.l d0
   16630:	|  |  |  |  |     ,-- beq.s 16652 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16632:	|  |  |  |  |     |   movea.l 16(sp),a0
   16636:	|  |  |  |  |     |   move.l 4(a0),d1
   1663a:	|  |  |  |  |     |   move.l 4(sp),d0
   1663e:	|  |  |  |  |     |   add.l d0,d0
   16640:	|  |  |  |  |     |   add.l d0,d0
   16642:	|  |  |  |  |     |   movea.l d1,a0
   16644:	|  |  |  |  |     |   adda.l d0,a0
   16646:	|  |  |  |  |     |   move.l (a0),d0
   16648:	|  |  |  |  |     |   movea.l 28(sp),a0
   1664c:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1664e:	|  |  |  |  |     |   moveq #1,d0
   16650:	|  |  |  |  |  ,--|-- bra.s 16690 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16652:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16656:	|  |  |  |  |  |      move.l 4(a0),d1
   1665a:	|  |  |  |  |  |      move.l 4(sp),d0
   1665e:	|  |  |  |  |  |      add.l d0,d0
   16660:	|  |  |  |  |  |      add.l d0,d0
   16662:	|  |  |  |  |  |      movea.l d1,a0
   16664:	|  |  |  |  |  |      adda.l d0,a0
   16666:	|  |  |  |  |  |      move.l (a0),d0
   16668:	|  |  |  |  |  |      movea.l 24(sp),a0
   1666c:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1666e:	|  |  |  |  '--|----> addq.l #1,(sp)
   16670:	|  |  |  '-----|----> movea.l 20(sp),a0
   16674:	|  |  |        |      move.l (a0),d0
   16676:	|  |  |        |      cmp.l (sp),d0
   16678:	|  |  '--------|----- bgt.w 165f6 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   1667c:	|  |           |      addq.l #1,4(sp)
   16680:	|  '-----------|----> movea.l 16(sp),a0
   16684:	|              |      move.l (a0),d0
   16686:	|              |      cmp.l 4(sp),d0
   1668a:	'--------------|----- bgt.w 165f2 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1668e:	               |      clr.w d0
}
   16690:	               '----> lea 12(sp),sp
   16694:	                      rts

00016696 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16696:	movea.l 1cce2 <currentFloor>,a0
   1669c:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   166a0:	movea.l 1cce2 <currentFloor>,a0
   166a6:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   166aa:	movea.l 1cce2 <currentFloor>,a0
   166b0:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   166b4:	movea.l 1cce2 <currentFloor>,a0
   166ba:	clr.l 16(a0)
}
   166be:	nop
   166c0:	rts

000166c2 <inFloor>:

int inFloor (int x, int y) {
   166c2:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   166c4:	          pea 1a2e8 <talk.c.490538ff+0x67d>
   166ca:	          jsr 1737c <KPrintF>
   166d0:	          addq.l #4,sp
	int i, r = -1;
   166d2:	          moveq #-1,d0
   166d4:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   166d6:	          clr.l 4(sp)
   166da:	   ,----- bra.s 1670e <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   166dc:	,--|----> movea.l 1cce2 <currentFloor>,a0
   166e2:	|  |      move.l 12(a0),d1
   166e6:	|  |      move.l 4(sp),d0
   166ea:	|  |      lsl.l #3,d0
   166ec:	|  |      add.l d1,d0
   166ee:	|  |      move.l 16(sp),-(sp)
   166f2:	|  |      move.l 16(sp),-(sp)
   166f6:	|  |      move.l d0,-(sp)
   166f8:	|  |      jsr 168e8 <pointInFloorPolygon>
   166fe:	|  |      lea 12(sp),sp
   16702:	|  |      tst.w d0
   16704:	|  |  ,-- beq.s 1670a <inFloor+0x48>
			r = i;
   16706:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1670a:	|  |  '-> addq.l #1,4(sp)
   1670e:	|  '----> movea.l 1cce2 <currentFloor>,a0
   16714:	|         move.l 8(a0),d0
   16718:	|         cmp.l 4(sp),d0
   1671c:	'-------- bgt.s 166dc <inFloor+0x1a>

	KPrintF("infloor finished\n");
   1671e:	          pea 1a2f9 <talk.c.490538ff+0x68e>
   16724:	          jsr 1737c <KPrintF>
   1672a:	          addq.l #4,sp
	return r;
   1672c:	          move.l (sp),d0
}
   1672e:	          addq.l #8,sp
   16730:	          rts

00016732 <initFloor>:

BOOL initFloor () {
   16732:	       lea -12(sp),sp
   16736:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16738:	       moveq #20,d0
   1673a:	       move.l d0,12(sp)
   1673e:	       clr.l 8(sp)
   16742:	       move.l 1cbca <SysBase>,d0
   16748:	       movea.l d0,a6
   1674a:	       move.l 12(sp),d0
   1674e:	       move.l 8(sp),d1
   16752:	       jsr -684(a6)
   16756:	       move.l d0,4(sp)
   1675a:	       move.l 4(sp),d0
   1675e:	       move.l d0,1cce2 <currentFloor>

    if(currentFloor == 0) {
   16764:	       move.l 1cce2 <currentFloor>,d0
   1676a:	,----- bne.s 1677e <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1676c:	|      pea 1a30b <talk.c.490538ff+0x6a0>
   16772:	|      jsr 1737c <KPrintF>
   16778:	|      addq.l #4,sp
        return FALSE;
   1677a:	|      clr.w d0
   1677c:	|  ,-- bra.s 16786 <initFloor+0x54>
    }

	noFloor ();
   1677e:	'--|-> jsr 16696 <noFloor>
	return TRUE;
   16784:	   |   moveq #1,d0
}
   16786:	   '-> movea.l (sp)+,a6
   16788:	       lea 12(sp),sp
   1678c:	       rts

0001678e <killFloor>:

void killFloor () {
   1678e:	       lea -24(sp),sp
   16792:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16794:	       clr.l 24(sp)
   16798:	   ,-- bra.s 167f2 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1679a:	,--|-> movea.l 1cce2 <currentFloor>,a0
   167a0:	|  |   move.l 12(a0),d1
   167a4:	|  |   move.l 24(sp),d0
   167a8:	|  |   lsl.l #3,d0
   167aa:	|  |   movea.l d1,a0
   167ac:	|  |   adda.l d0,a0
   167ae:	|  |   move.l 4(a0),8(sp)
   167b4:	|  |   move.l 1cbca <SysBase>,d0
   167ba:	|  |   movea.l d0,a6
   167bc:	|  |   movea.l 8(sp),a1
   167c0:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   167c4:	|  |   movea.l 1cce2 <currentFloor>,a0
   167ca:	|  |   move.l 16(a0),d1
   167ce:	|  |   move.l 24(sp),d0
   167d2:	|  |   add.l d0,d0
   167d4:	|  |   add.l d0,d0
   167d6:	|  |   movea.l d1,a0
   167d8:	|  |   adda.l d0,a0
   167da:	|  |   move.l (a0),4(sp)
   167de:	|  |   move.l 1cbca <SysBase>,d0
   167e4:	|  |   movea.l d0,a6
   167e6:	|  |   movea.l 4(sp),a1
   167ea:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   167ee:	|  |   addq.l #1,24(sp)
   167f2:	|  '-> movea.l 1cce2 <currentFloor>,a0
   167f8:	|      move.l 8(a0),d0
   167fc:	|      cmp.l 24(sp),d0
   16800:	'----- bgt.s 1679a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16802:	       movea.l 1cce2 <currentFloor>,a0
   16808:	       move.l 12(a0),20(sp)
   1680e:	       move.l 1cbca <SysBase>,d0
   16814:	       movea.l d0,a6
   16816:	       movea.l 20(sp),a1
   1681a:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1681e:	       movea.l 1cce2 <currentFloor>,a0
   16824:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16828:	       movea.l 1cce2 <currentFloor>,a0
   1682e:	       move.l 4(a0),16(sp)
   16834:	       move.l 1cbca <SysBase>,d0
   1683a:	       movea.l d0,a6
   1683c:	       movea.l 16(sp),a1
   16840:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16844:	       movea.l 1cce2 <currentFloor>,a0
   1684a:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1684e:	       movea.l 1cce2 <currentFloor>,a0
   16854:	       move.l 16(a0),12(sp)
   1685a:	       move.l 1cbca <SysBase>,d0
   16860:	       movea.l d0,a6
   16862:	       movea.l 12(sp),a1
   16866:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1686a:	       movea.l 1cce2 <currentFloor>,a0
   16870:	       clr.l 16(a0)
}
   16874:	       nop
   16876:	       movea.l (sp)+,a6
   16878:	       lea 24(sp),sp
   1687c:	       rts

0001687e <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1687e:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16882:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16886:	                   clr.l 4(sp)
   1688a:	   ,-------------- bra.s 168d6 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1688c:	,--|-------------> clr.l (sp)
   1688e:	|  |     ,-------- bra.s 168ca <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16890:	|  |  ,--|-------> move.l 20(sp),d1
   16894:	|  |  |  |         move.l 4(sp),d0
   16898:	|  |  |  |         add.l d0,d0
   1689a:	|  |  |  |         add.l d0,d0
   1689c:	|  |  |  |         movea.l d1,a0
   1689e:	|  |  |  |         adda.l d0,a0
   168a0:	|  |  |  |         move.l (a0),d1
   168a2:	|  |  |  |         movea.l 28(sp),a0
   168a6:	|  |  |  |         move.l (sp),d0
   168a8:	|  |  |  |         add.l d0,d0
   168aa:	|  |  |  |         add.l d0,d0
   168ac:	|  |  |  |         adda.l d0,a0
   168ae:	|  |  |  |         move.l (a0),d0
   168b0:	|  |  |  |         cmp.l d1,d0
   168b2:	|  |  |  |     ,-- bne.s 168c8 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   168b4:	|  |  |  |     |   move.l 8(sp),d0
   168b8:	|  |  |  |     |   move.l d0,d1
   168ba:	|  |  |  |     |   addq.l #1,d1
   168bc:	|  |  |  |     |   move.l d1,8(sp)
   168c0:	|  |  |  |     |   tst.l d0
   168c2:	|  |  |  |     +-- beq.s 168c8 <polysShareSide+0x4a>
   168c4:	|  |  |  |     |   moveq #1,d0
   168c6:	|  |  |  |  ,--|-- bra.s 168e2 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   168c8:	|  |  |  |  |  '-> addq.l #1,(sp)
   168ca:	|  |  |  '--|----> move.l 24(sp),d0
   168ce:	|  |  |     |      cmp.l (sp),d0
   168d0:	|  |  '-----|----- bgt.s 16890 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   168d2:	|  |        |      addq.l #1,4(sp)
   168d6:	|  '--------|----> move.l 16(sp),d0
   168da:	|           |      cmp.l 4(sp),d0
   168de:	'-----------|----- bgt.s 1688c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   168e0:	            |      clr.w d0
}
   168e2:	            '----> lea 12(sp),sp
   168e6:	                   rts

000168e8 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   168e8:	             lea -28(sp),sp
   168ec:	             move.l d3,-(sp)
   168ee:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   168f0:	             clr.l 32(sp)
   168f4:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   168f8:	             movea.l 40(sp),a0
   168fc:	             move.l (a0),d0
   168fe:	             move.l d0,d1
   16900:	             subq.l #1,d1
   16902:	             move.l d1,28(sp)
   16906:	   ,-------- bra.w 16b00 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1690a:	,--|-------> movea.l 1cce2 <currentFloor>,a0
   16910:	|  |         move.l 4(a0),d1
   16914:	|  |         movea.l 40(sp),a0
   16918:	|  |         movea.l 4(a0),a0
   1691c:	|  |         move.l 32(sp),d0
   16920:	|  |         add.l d0,d0
   16922:	|  |         add.l d0,d0
   16924:	|  |         adda.l d0,a0
   16926:	|  |         move.l (a0),d0
   16928:	|  |         lsl.l #3,d0
   1692a:	|  |         movea.l d1,a0
   1692c:	|  |         adda.l d0,a0
   1692e:	|  |         move.l (a0),d0
   16930:	|  |         move.l d0,-(sp)
   16932:	|  |         jsr 177ae <__floatsisf>
   16938:	|  |         addq.l #4,sp
   1693a:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1693e:	|  |         movea.l 1cce2 <currentFloor>,a0
   16944:	|  |         move.l 4(a0),d1
   16948:	|  |         movea.l 40(sp),a0
   1694c:	|  |         movea.l 4(a0),a0
   16950:	|  |         move.l 32(sp),d0
   16954:	|  |         add.l d0,d0
   16956:	|  |         add.l d0,d0
   16958:	|  |         adda.l d0,a0
   1695a:	|  |         move.l (a0),d0
   1695c:	|  |         lsl.l #3,d0
   1695e:	|  |         movea.l d1,a0
   16960:	|  |         adda.l d0,a0
   16962:	|  |         move.l 4(a0),d0
   16966:	|  |         move.l d0,-(sp)
   16968:	|  |         jsr 177ae <__floatsisf>
   1696e:	|  |         addq.l #4,sp
   16970:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16974:	|  |         movea.l 1cce2 <currentFloor>,a0
   1697a:	|  |         move.l 4(a0),d1
   1697e:	|  |         movea.l 40(sp),a0
   16982:	|  |         movea.l 4(a0),a0
   16986:	|  |         move.l 28(sp),d0
   1698a:	|  |         add.l d0,d0
   1698c:	|  |         add.l d0,d0
   1698e:	|  |         adda.l d0,a0
   16990:	|  |         move.l (a0),d0
   16992:	|  |         lsl.l #3,d0
   16994:	|  |         movea.l d1,a0
   16996:	|  |         adda.l d0,a0
   16998:	|  |         move.l (a0),d0
   1699a:	|  |         move.l d0,-(sp)
   1699c:	|  |         jsr 177ae <__floatsisf>
   169a2:	|  |         addq.l #4,sp
   169a4:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   169a8:	|  |         movea.l 1cce2 <currentFloor>,a0
   169ae:	|  |         move.l 4(a0),d1
   169b2:	|  |         movea.l 40(sp),a0
   169b6:	|  |         movea.l 4(a0),a0
   169ba:	|  |         move.l 28(sp),d0
   169be:	|  |         add.l d0,d0
   169c0:	|  |         add.l d0,d0
   169c2:	|  |         adda.l d0,a0
   169c4:	|  |         move.l (a0),d0
   169c6:	|  |         lsl.l #3,d0
   169c8:	|  |         movea.l d1,a0
   169ca:	|  |         adda.l d0,a0
   169cc:	|  |         move.l 4(a0),d0
   169d0:	|  |         move.l d0,-(sp)
   169d2:	|  |         jsr 177ae <__floatsisf>
   169d8:	|  |         addq.l #4,sp
   169da:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   169de:	|  |         move.l 48(sp),-(sp)
   169e2:	|  |         jsr 177ae <__floatsisf>
   169e8:	|  |         addq.l #4,sp
   169ea:	|  |         move.l d0,-(sp)
   169ec:	|  |         move.l 20(sp),-(sp)
   169f0:	|  |         jsr 17950 <__lesf2>
   169f6:	|  |         addq.l #8,sp
   169f8:	|  |         tst.l d0
   169fa:	|  |     ,-- bgt.s 16a1a <pointInFloorPolygon+0x132>
   169fc:	|  |     |   move.l 48(sp),-(sp)
   16a00:	|  |     |   jsr 177ae <__floatsisf>
   16a06:	|  |     |   addq.l #4,sp
   16a08:	|  |     |   move.l d0,-(sp)
   16a0a:	|  |     |   move.l 12(sp),-(sp)
   16a0e:	|  |     |   jsr 1791a <__gtsf2>
   16a14:	|  |     |   addq.l #8,sp
   16a16:	|  |     |   tst.l d0
   16a18:	|  |  ,--|-- bgt.s 16a5a <pointInFloorPolygon+0x172>
   16a1a:	|  |  |  '-> move.l 48(sp),-(sp)
   16a1e:	|  |  |      jsr 177ae <__floatsisf>
   16a24:	|  |  |      addq.l #4,sp
   16a26:	|  |  |      move.l d0,-(sp)
   16a28:	|  |  |      move.l 12(sp),-(sp)
   16a2c:	|  |  |      jsr 17950 <__lesf2>
   16a32:	|  |  |      addq.l #8,sp
   16a34:	|  |  |      tst.l d0
   16a36:	|  |  |  ,-- bgt.w 16af0 <pointInFloorPolygon+0x208>
   16a3a:	|  |  |  |   move.l 48(sp),-(sp)
   16a3e:	|  |  |  |   jsr 177ae <__floatsisf>
   16a44:	|  |  |  |   addq.l #4,sp
   16a46:	|  |  |  |   move.l d0,-(sp)
   16a48:	|  |  |  |   move.l 20(sp),-(sp)
   16a4c:	|  |  |  |   jsr 1791a <__gtsf2>
   16a52:	|  |  |  |   addq.l #8,sp
   16a54:	|  |  |  |   tst.l d0
   16a56:	|  |  |  +-- ble.w 16af0 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16a5a:	|  |  '--|-> move.l 44(sp),-(sp)
   16a5e:	|  |     |   jsr 177ae <__floatsisf>
   16a64:	|  |     |   addq.l #4,sp
   16a66:	|  |     |   move.l d0,d3
   16a68:	|  |     |   move.l 20(sp),-(sp)
   16a6c:	|  |     |   move.l 16(sp),-(sp)
   16a70:	|  |     |   jsr 17aa2 <__subsf3>
   16a76:	|  |     |   addq.l #8,sp
   16a78:	|  |     |   move.l d0,d2
   16a7a:	|  |     |   move.l 48(sp),-(sp)
   16a7e:	|  |     |   jsr 177ae <__floatsisf>
   16a84:	|  |     |   addq.l #4,sp
   16a86:	|  |     |   move.l 16(sp),-(sp)
   16a8a:	|  |     |   move.l d0,-(sp)
   16a8c:	|  |     |   jsr 17aa2 <__subsf3>
   16a92:	|  |     |   addq.l #8,sp
   16a94:	|  |     |   move.l d0,-(sp)
   16a96:	|  |     |   move.l d2,-(sp)
   16a98:	|  |     |   jsr 17860 <__mulsf3>
   16a9e:	|  |     |   addq.l #8,sp
   16aa0:	|  |     |   move.l d0,d2
   16aa2:	|  |     |   move.l 16(sp),-(sp)
   16aa6:	|  |     |   move.l 12(sp),-(sp)
   16aaa:	|  |     |   jsr 17aa2 <__subsf3>
   16ab0:	|  |     |   addq.l #8,sp
   16ab2:	|  |     |   move.l d0,-(sp)
   16ab4:	|  |     |   move.l d2,-(sp)
   16ab6:	|  |     |   jsr 17664 <__divsf3>
   16abc:	|  |     |   addq.l #8,sp
   16abe:	|  |     |   move.l 20(sp),-(sp)
   16ac2:	|  |     |   move.l d0,-(sp)
   16ac4:	|  |     |   jsr 1756a <__addsf3>
   16aca:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16acc:	|  |     |   move.l d0,-(sp)
   16ace:	|  |     |   move.l d3,-(sp)
   16ad0:	|  |     |   jsr 179d4 <__ltsf2>
   16ad6:	|  |     |   addq.l #8,sp
   16ad8:	|  |     |   tst.l d0
   16ada:	|  |     +-- bge.s 16af0 <pointInFloorPolygon+0x208>

			c = !c;
   16adc:	|  |     |   tst.l 24(sp)
   16ae0:	|  |     |   seq d0
   16ae2:	|  |     |   neg.b d0
   16ae4:	|  |     |   move.b d0,d0
   16ae6:	|  |     |   andi.l #255,d0
   16aec:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16af0:	|  |     '-> move.l 32(sp),d0
   16af4:	|  |         move.l d0,d1
   16af6:	|  |         addq.l #1,d1
   16af8:	|  |         move.l d1,32(sp)
   16afc:	|  |         move.l d0,28(sp)
   16b00:	|  '-------> movea.l 40(sp),a0
   16b04:	|            move.l (a0),d0
   16b06:	|            cmp.l 32(sp),d0
   16b0a:	'----------- bgt.w 1690a <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16b0e:	             tst.l 24(sp)
   16b12:	             sne d0
   16b14:	             neg.b d0
   16b16:	             move.b d0,d0
   16b18:	             andi.w #255,d0
}
   16b1c:	             move.l (sp)+,d2
   16b1e:	             move.l (sp)+,d3
   16b20:	             lea 28(sp),sp
   16b24:	             rts

00016b26 <setFloor>:

BOOL setFloor (int fileNum) {
   16b26:	                               lea -132(sp),sp
   16b2a:	                               move.l a6,-(sp)
   16b2c:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16b2e:	                               jsr 1678e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16b34:	                               move.l 144(sp),-(sp)
   16b38:	                               jsr 77b0 <openFileFromNum>
   16b3e:	                               addq.l #4,sp
   16b40:	                               tst.l d0
   16b42:	                           ,-- bne.s 16b4a <setFloor+0x24>
   16b44:	                           |   clr.w d0
   16b46:	,--------------------------|-- bra.w 17296 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16b4a:	|                          '-> movea.l 1cce2 <currentFloor>,a0
   16b50:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16b54:	|                              move.l 1cbb2 <bigDataFile>,118(sp)
   16b5c:	|                              move.l 1cbd2 <DOSBase>,d0
   16b62:	|                              movea.l d0,a6
   16b64:	|                              move.l 118(sp),d1
   16b68:	|                              jsr -306(a6)
   16b6c:	|                              move.l d0,114(sp)
   16b70:	|                              move.l 114(sp),d0
   16b74:	|                              movea.l 1cce2 <currentFloor>,a0
   16b7a:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16b7e:	|                              movea.l 1cce2 <currentFloor>,a0
   16b84:	|                              move.l 8(a0),d0
   16b88:	|                              lsl.l #3,d0
   16b8a:	|                              move.l d0,110(sp)
   16b8e:	|                              clr.l 106(sp)
   16b92:	|                              move.l 1cbca <SysBase>,d0
   16b98:	|                              movea.l d0,a6
   16b9a:	|                              move.l 110(sp),d0
   16b9e:	|                              move.l 106(sp),d1
   16ba2:	|                              jsr -684(a6)
   16ba6:	|                              move.l d0,102(sp)
   16baa:	|                              move.l 102(sp),d0
   16bae:	|                              movea.l 1cce2 <currentFloor>,a0
   16bb4:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16bb8:	|                              movea.l 1cce2 <currentFloor>,a0
   16bbe:	|                              move.l 12(a0),d0
   16bc2:	|                          ,-- bne.s 16bd8 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16bc4:	|                          |   pea 1a32f <talk.c.490538ff+0x6c4>
   16bca:	|                          |   jsr 1737c <KPrintF>
   16bd0:	|                          |   addq.l #4,sp
		return FALSE;
   16bd2:	|                          |   clr.w d0
   16bd4:	+--------------------------|-- bra.w 17296 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bd8:	|                          '-> clr.l 136(sp)
   16bdc:	|                    ,-------- bra.w 16cf4 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16be0:	|                 ,--|-------> move.l 1cbb2 <bigDataFile>,26(sp)
   16be8:	|                 |  |         move.l 1cbd2 <DOSBase>,d0
   16bee:	|                 |  |         movea.l d0,a6
   16bf0:	|                 |  |         move.l 26(sp),d1
   16bf4:	|                 |  |         jsr -306(a6)
   16bf8:	|                 |  |         move.l d0,22(sp)
   16bfc:	|                 |  |         move.l 22(sp),d1
   16c00:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16c06:	|                 |  |         movea.l 12(a0),a0
   16c0a:	|                 |  |         move.l 136(sp),d0
   16c0e:	|                 |  |         lsl.l #3,d0
   16c10:	|                 |  |         adda.l d0,a0
   16c12:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16c14:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16c1a:	|                 |  |         move.l 12(a0),d1
   16c1e:	|                 |  |         move.l 136(sp),d0
   16c22:	|                 |  |         lsl.l #3,d0
   16c24:	|                 |  |         movea.l d1,a0
   16c26:	|                 |  |         adda.l d0,a0
   16c28:	|                 |  |         move.l (a0),d0
   16c2a:	|                 |  |         add.l d0,d0
   16c2c:	|                 |  |         add.l d0,d0
   16c2e:	|                 |  |         move.l d0,18(sp)
   16c32:	|                 |  |         clr.l 14(sp)
   16c36:	|                 |  |         move.l 1cbca <SysBase>,d0
   16c3c:	|                 |  |         movea.l d0,a6
   16c3e:	|                 |  |         move.l 18(sp),d0
   16c42:	|                 |  |         move.l 14(sp),d1
   16c46:	|                 |  |         jsr -684(a6)
   16c4a:	|                 |  |         move.l d0,10(sp)
   16c4e:	|                 |  |         move.l 10(sp),d1
   16c52:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16c58:	|                 |  |         movea.l 12(a0),a0
   16c5c:	|                 |  |         move.l 136(sp),d0
   16c60:	|                 |  |         lsl.l #3,d0
   16c62:	|                 |  |         adda.l d0,a0
   16c64:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16c68:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16c6e:	|                 |  |         move.l 12(a0),d1
   16c72:	|                 |  |         move.l 136(sp),d0
   16c76:	|                 |  |         lsl.l #3,d0
   16c78:	|                 |  |         movea.l d1,a0
   16c7a:	|                 |  |         adda.l d0,a0
   16c7c:	|                 |  |         move.l 4(a0),d0
   16c80:	|                 |  |     ,-- bne.s 16c96 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16c82:	|                 |  |     |   pea 1a32f <talk.c.490538ff+0x6c4>
   16c88:	|                 |  |     |   jsr 1737c <KPrintF>
   16c8e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16c90:	|                 |  |     |   clr.w d0
   16c92:	+-----------------|--|-----|-- bra.w 17296 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16c96:	|                 |  |     '-> clr.l 132(sp)
   16c9a:	|                 |  |     ,-- bra.s 16cd4 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16c9c:	|                 |  |  ,--|-> move.l 1cbb2 <bigDataFile>,d1
   16ca2:	|                 |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   16ca8:	|                 |  |  |  |   movea.l 12(a0),a0
   16cac:	|                 |  |  |  |   move.l 136(sp),d0
   16cb0:	|                 |  |  |  |   lsl.l #3,d0
   16cb2:	|                 |  |  |  |   adda.l d0,a0
   16cb4:	|                 |  |  |  |   movea.l 4(a0),a0
   16cb8:	|                 |  |  |  |   move.l 132(sp),d0
   16cbc:	|                 |  |  |  |   add.l d0,d0
   16cbe:	|                 |  |  |  |   add.l d0,d0
   16cc0:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16cc4:	|                 |  |  |  |   move.l d1,-(sp)
   16cc6:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16ccc:	|                 |  |  |  |   addq.l #4,sp
   16cce:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16cd0:	|                 |  |  |  |   addq.l #1,132(sp)
   16cd4:	|                 |  |  |  '-> movea.l 1cce2 <currentFloor>,a0
   16cda:	|                 |  |  |      move.l 12(a0),d1
   16cde:	|                 |  |  |      move.l 136(sp),d0
   16ce2:	|                 |  |  |      lsl.l #3,d0
   16ce4:	|                 |  |  |      movea.l d1,a0
   16ce6:	|                 |  |  |      adda.l d0,a0
   16ce8:	|                 |  |  |      move.l (a0),d0
   16cea:	|                 |  |  |      cmp.l 132(sp),d0
   16cee:	|                 |  |  '----- bgt.s 16c9c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cf0:	|                 |  |         addq.l #1,136(sp)
   16cf4:	|                 |  '-------> movea.l 1cce2 <currentFloor>,a0
   16cfa:	|                 |            move.l 8(a0),d0
   16cfe:	|                 |            cmp.l 136(sp),d0
   16d02:	|                 '----------- bgt.w 16be0 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16d06:	|                              move.l 1cbb2 <bigDataFile>,d0
   16d0c:	|                              move.l d0,-(sp)
   16d0e:	|                              jsr 6bc <get2bytes>
   16d14:	|                              addq.l #4,sp
   16d16:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16d1a:	|                              move.l 136(sp),d0
   16d1e:	|                              lsl.l #3,d0
   16d20:	|                              move.l d0,98(sp)
   16d24:	|                              clr.l 94(sp)
   16d28:	|                              move.l 1cbca <SysBase>,d0
   16d2e:	|                              movea.l d0,a6
   16d30:	|                              move.l 98(sp),d0
   16d34:	|                              move.l 94(sp),d1
   16d38:	|                              jsr -684(a6)
   16d3c:	|                              move.l d0,90(sp)
   16d40:	|                              move.l 90(sp),d0
   16d44:	|                              movea.l 1cce2 <currentFloor>,a0
   16d4a:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16d4e:	|                              movea.l 1cce2 <currentFloor>,a0
   16d54:	|                              move.l 4(a0),d0
   16d58:	|                          ,-- bne.s 16d6e <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16d5a:	|                          |   pea 1a32f <talk.c.490538ff+0x6c4>
   16d60:	|                          |   jsr 1737c <KPrintF>
   16d66:	|                          |   addq.l #4,sp
		return FALSE;
   16d68:	|                          |   clr.w d0
   16d6a:	+--------------------------|-- bra.w 17296 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16d6e:	|                          '-> clr.l 132(sp)
   16d72:	|                          ,-- bra.s 16dc6 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16d74:	|                       ,--|-> move.l 1cbb2 <bigDataFile>,d1
   16d7a:	|                       |  |   movea.l 1cce2 <currentFloor>,a0
   16d80:	|                       |  |   movea.l 4(a0),a0
   16d84:	|                       |  |   move.l 132(sp),d0
   16d88:	|                       |  |   lsl.l #3,d0
   16d8a:	|                       |  |   lea (0,a0,d0.l),a2
   16d8e:	|                       |  |   move.l d1,-(sp)
   16d90:	|                       |  |   jsr 6bc <get2bytes>
   16d96:	|                       |  |   addq.l #4,sp
   16d98:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16d9a:	|                       |  |   move.l 1cbb2 <bigDataFile>,d1
   16da0:	|                       |  |   movea.l 1cce2 <currentFloor>,a0
   16da6:	|                       |  |   movea.l 4(a0),a0
   16daa:	|                       |  |   move.l 132(sp),d0
   16dae:	|                       |  |   lsl.l #3,d0
   16db0:	|                       |  |   lea (0,a0,d0.l),a2
   16db4:	|                       |  |   move.l d1,-(sp)
   16db6:	|                       |  |   jsr 6bc <get2bytes>
   16dbc:	|                       |  |   addq.l #4,sp
   16dbe:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16dc2:	|                       |  |   addq.l #1,132(sp)
   16dc6:	|                       |  '-> move.l 132(sp),d0
   16dca:	|                       |      cmp.l 136(sp),d0
   16dce:	|                       '----- blt.s 16d74 <setFloor+0x24e>
	}

	finishAccess ();
   16dd0:	|                              jsr 76a8 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16dd6:	|                              movea.l 1cce2 <currentFloor>,a0
   16ddc:	|                              move.l 8(a0),d0
   16de0:	|                              add.l d0,d0
   16de2:	|                              add.l d0,d0
   16de4:	|                              move.l d0,86(sp)
   16de8:	|                              clr.l 82(sp)
   16dec:	|                              move.l 1cbca <SysBase>,d0
   16df2:	|                              movea.l d0,a6
   16df4:	|                              move.l 86(sp),d0
   16df8:	|                              move.l 82(sp),d1
   16dfc:	|                              jsr -684(a6)
   16e00:	|                              move.l d0,78(sp)
   16e04:	|                              move.l 78(sp),d0
   16e08:	|                              movea.l 1cce2 <currentFloor>,a0
   16e0e:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16e12:	|                              movea.l 1cce2 <currentFloor>,a0
   16e18:	|                              move.l 8(a0),d0
   16e1c:	|                              add.l d0,d0
   16e1e:	|                              add.l d0,d0
   16e20:	|                              move.l d0,74(sp)
   16e24:	|                              clr.l 70(sp)
   16e28:	|                              move.l 1cbca <SysBase>,d0
   16e2e:	|                              movea.l d0,a6
   16e30:	|                              move.l 74(sp),d0
   16e34:	|                              move.l 70(sp),d1
   16e38:	|                              jsr -684(a6)
   16e3c:	|                              move.l d0,66(sp)
   16e40:	|                              move.l 66(sp),d0
   16e44:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16e48:	|                              movea.l 1cce2 <currentFloor>,a0
   16e4e:	|                              move.l 16(a0),d0
   16e52:	|                          ,-- bne.s 16e68 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16e54:	|                          |   pea 1a32f <talk.c.490538ff+0x6c4>
   16e5a:	|                          |   jsr 1737c <KPrintF>
   16e60:	|                          |   addq.l #4,sp
		return FALSE;
   16e62:	|                          |   clr.w d0
   16e64:	+--------------------------|-- bra.w 17296 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e68:	|                          '-> clr.l 136(sp)
   16e6c:	|                    ,-------- bra.w 16f90 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16e70:	|                 ,--|-------> movea.l 1cce2 <currentFloor>,a0
   16e76:	|                 |  |         move.l 8(a0),d0
   16e7a:	|                 |  |         add.l d0,d0
   16e7c:	|                 |  |         add.l d0,d0
   16e7e:	|                 |  |         move.l d0,50(sp)
   16e82:	|                 |  |         clr.l 46(sp)
   16e86:	|                 |  |         move.l 1cbca <SysBase>,d0
   16e8c:	|                 |  |         movea.l d0,a6
   16e8e:	|                 |  |         move.l 50(sp),d0
   16e92:	|                 |  |         move.l 46(sp),d1
   16e96:	|                 |  |         jsr -684(a6)
   16e9a:	|                 |  |         move.l d0,42(sp)
   16e9e:	|                 |  |         move.l 42(sp),d0
   16ea2:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16ea8:	|                 |  |         movea.l 16(a0),a0
   16eac:	|                 |  |         move.l 136(sp),d1
   16eb0:	|                 |  |         add.l d1,d1
   16eb2:	|                 |  |         add.l d1,d1
   16eb4:	|                 |  |         adda.l d1,a0
   16eb6:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16eb8:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16ebe:	|                 |  |         move.l 8(a0),d0
   16ec2:	|                 |  |         add.l d0,d0
   16ec4:	|                 |  |         add.l d0,d0
   16ec6:	|                 |  |         move.l d0,38(sp)
   16eca:	|                 |  |         clr.l 34(sp)
   16ece:	|                 |  |         move.l 1cbca <SysBase>,d0
   16ed4:	|                 |  |         movea.l d0,a6
   16ed6:	|                 |  |         move.l 38(sp),d0
   16eda:	|                 |  |         move.l 34(sp),d1
   16ede:	|                 |  |         jsr -684(a6)
   16ee2:	|                 |  |         move.l d0,30(sp)
   16ee6:	|                 |  |         move.l 30(sp),d1
   16eea:	|                 |  |         move.l 136(sp),d0
   16eee:	|                 |  |         add.l d0,d0
   16ef0:	|                 |  |         add.l d0,d0
   16ef2:	|                 |  |         movea.l 62(sp),a0
   16ef6:	|                 |  |         adda.l d0,a0
   16ef8:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16efa:	|                 |  |         movea.l 1cce2 <currentFloor>,a0
   16f00:	|                 |  |         move.l 16(a0),d1
   16f04:	|                 |  |         move.l 136(sp),d0
   16f08:	|                 |  |         add.l d0,d0
   16f0a:	|                 |  |         add.l d0,d0
   16f0c:	|                 |  |         movea.l d1,a0
   16f0e:	|                 |  |         adda.l d0,a0
   16f10:	|                 |  |         move.l (a0),d0
   16f12:	|                 |  |     ,-- bne.s 16f28 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16f14:	|                 |  |     |   pea 1a32f <talk.c.490538ff+0x6c4>
   16f1a:	|                 |  |     |   jsr 1737c <KPrintF>
   16f20:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16f22:	|                 |  |     |   clr.w d0
   16f24:	+-----------------|--|-----|-- bra.w 17296 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f28:	|                 |  |     '-> clr.l 132(sp)
   16f2c:	|                 |  |     ,-- bra.s 16f7c <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16f2e:	|                 |  |  ,--|-> movea.l 1cce2 <currentFloor>,a0
   16f34:	|                 |  |  |  |   move.l 16(a0),d1
   16f38:	|                 |  |  |  |   move.l 136(sp),d0
   16f3c:	|                 |  |  |  |   add.l d0,d0
   16f3e:	|                 |  |  |  |   add.l d0,d0
   16f40:	|                 |  |  |  |   movea.l d1,a0
   16f42:	|                 |  |  |  |   adda.l d0,a0
   16f44:	|                 |  |  |  |   move.l (a0),d1
   16f46:	|                 |  |  |  |   move.l 132(sp),d0
   16f4a:	|                 |  |  |  |   add.l d0,d0
   16f4c:	|                 |  |  |  |   add.l d0,d0
   16f4e:	|                 |  |  |  |   movea.l d1,a0
   16f50:	|                 |  |  |  |   adda.l d0,a0
   16f52:	|                 |  |  |  |   moveq #-1,d1
   16f54:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16f56:	|                 |  |  |  |   move.l 136(sp),d0
   16f5a:	|                 |  |  |  |   add.l d0,d0
   16f5c:	|                 |  |  |  |   add.l d0,d0
   16f5e:	|                 |  |  |  |   movea.l 62(sp),a0
   16f62:	|                 |  |  |  |   adda.l d0,a0
   16f64:	|                 |  |  |  |   move.l (a0),d1
   16f66:	|                 |  |  |  |   move.l 132(sp),d0
   16f6a:	|                 |  |  |  |   add.l d0,d0
   16f6c:	|                 |  |  |  |   add.l d0,d0
   16f6e:	|                 |  |  |  |   movea.l d1,a0
   16f70:	|                 |  |  |  |   adda.l d0,a0
   16f72:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f78:	|                 |  |  |  |   addq.l #1,132(sp)
   16f7c:	|                 |  |  |  '-> movea.l 1cce2 <currentFloor>,a0
   16f82:	|                 |  |  |      move.l 8(a0),d0
   16f86:	|                 |  |  |      cmp.l 132(sp),d0
   16f8a:	|                 |  |  '----- bgt.s 16f2e <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f8c:	|                 |  |         addq.l #1,136(sp)
   16f90:	|                 |  '-------> movea.l 1cce2 <currentFloor>,a0
   16f96:	|                 |            move.l 8(a0),d0
   16f9a:	|                 |            cmp.l 136(sp),d0
   16f9e:	|                 '----------- bgt.w 16e70 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fa2:	|                              clr.l 136(sp)
   16fa6:	|              ,-------------- bra.w 170ac <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16faa:	|           ,--|-------------> clr.l 132(sp)
   16fae:	|           |  |     ,-------- bra.w 17096 <setFloor+0x570>
			if (i != j) {
   16fb2:	|           |  |  ,--|-------> move.l 136(sp),d0
   16fb6:	|           |  |  |  |         cmp.l 132(sp),d0
   16fba:	|           |  |  |  |     ,-- beq.w 1704c <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16fbe:	|           |  |  |  |     |   movea.l 1cce2 <currentFloor>,a0
   16fc4:	|           |  |  |  |     |   move.l 12(a0),d1
   16fc8:	|           |  |  |  |     |   move.l 132(sp),d0
   16fcc:	|           |  |  |  |     |   lsl.l #3,d0
   16fce:	|           |  |  |  |     |   movea.l d1,a1
   16fd0:	|           |  |  |  |     |   adda.l d0,a1
   16fd2:	|           |  |  |  |     |   movea.l 1cce2 <currentFloor>,a0
   16fd8:	|           |  |  |  |     |   move.l 12(a0),d1
   16fdc:	|           |  |  |  |     |   move.l 136(sp),d0
   16fe0:	|           |  |  |  |     |   lsl.l #3,d0
   16fe2:	|           |  |  |  |     |   movea.l d1,a0
   16fe4:	|           |  |  |  |     |   adda.l d0,a0
   16fe6:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16fea:	|           |  |  |  |     |   move.l (a1),-(sp)
   16fec:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16ff0:	|           |  |  |  |     |   move.l (a0),-(sp)
   16ff2:	|           |  |  |  |     |   jsr 1687e <polysShareSide>
   16ff8:	|           |  |  |  |     |   lea 16(sp),sp
   16ffc:	|           |  |  |  |     |   tst.w d0
   16ffe:	|           |  |  |  |  ,--|-- beq.w 17092 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   17002:	|           |  |  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   17008:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1700c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   17010:	|           |  |  |  |  |  |   add.l d0,d0
   17012:	|           |  |  |  |  |  |   add.l d0,d0
   17014:	|           |  |  |  |  |  |   movea.l d1,a0
   17016:	|           |  |  |  |  |  |   adda.l d0,a0
   17018:	|           |  |  |  |  |  |   move.l (a0),d1
   1701a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1701e:	|           |  |  |  |  |  |   add.l d0,d0
   17020:	|           |  |  |  |  |  |   add.l d0,d0
   17022:	|           |  |  |  |  |  |   movea.l d1,a0
   17024:	|           |  |  |  |  |  |   adda.l d0,a0
   17026:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1702a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1702e:	|           |  |  |  |  |  |   add.l d0,d0
   17030:	|           |  |  |  |  |  |   add.l d0,d0
   17032:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17036:	|           |  |  |  |  |  |   adda.l d0,a0
   17038:	|           |  |  |  |  |  |   move.l (a0),d1
   1703a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1703e:	|           |  |  |  |  |  |   add.l d0,d0
   17040:	|           |  |  |  |  |  |   add.l d0,d0
   17042:	|           |  |  |  |  |  |   movea.l d1,a0
   17044:	|           |  |  |  |  |  |   adda.l d0,a0
   17046:	|           |  |  |  |  |  |   moveq #1,d1
   17048:	|           |  |  |  |  |  |   move.l d1,(a0)
   1704a:	|           |  |  |  |  +--|-- bra.s 17092 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1704c:	|           |  |  |  |  |  '-> movea.l 1cce2 <currentFloor>,a0
   17052:	|           |  |  |  |  |      move.l 16(a0),d1
   17056:	|           |  |  |  |  |      move.l 136(sp),d0
   1705a:	|           |  |  |  |  |      add.l d0,d0
   1705c:	|           |  |  |  |  |      add.l d0,d0
   1705e:	|           |  |  |  |  |      movea.l d1,a0
   17060:	|           |  |  |  |  |      adda.l d0,a0
   17062:	|           |  |  |  |  |      move.l (a0),d1
   17064:	|           |  |  |  |  |      move.l 132(sp),d0
   17068:	|           |  |  |  |  |      add.l d0,d0
   1706a:	|           |  |  |  |  |      add.l d0,d0
   1706c:	|           |  |  |  |  |      movea.l d1,a0
   1706e:	|           |  |  |  |  |      adda.l d0,a0
   17070:	|           |  |  |  |  |      moveq #-2,d0
   17072:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17074:	|           |  |  |  |  |      move.l 136(sp),d0
   17078:	|           |  |  |  |  |      add.l d0,d0
   1707a:	|           |  |  |  |  |      add.l d0,d0
   1707c:	|           |  |  |  |  |      movea.l 62(sp),a0
   17080:	|           |  |  |  |  |      adda.l d0,a0
   17082:	|           |  |  |  |  |      move.l (a0),d1
   17084:	|           |  |  |  |  |      move.l 132(sp),d0
   17088:	|           |  |  |  |  |      add.l d0,d0
   1708a:	|           |  |  |  |  |      add.l d0,d0
   1708c:	|           |  |  |  |  |      movea.l d1,a0
   1708e:	|           |  |  |  |  |      adda.l d0,a0
   17090:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17092:	|           |  |  |  |  '----> addq.l #1,132(sp)
   17096:	|           |  |  |  '-------> movea.l 1cce2 <currentFloor>,a0
   1709c:	|           |  |  |            move.l 8(a0),d0
   170a0:	|           |  |  |            cmp.l 132(sp),d0
   170a4:	|           |  |  '----------- bgt.w 16fb2 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170a8:	|           |  |               addq.l #1,136(sp)
   170ac:	|           |  '-------------> movea.l 1cce2 <currentFloor>,a0
   170b2:	|           |                  move.l 8(a0),d0
   170b6:	|           |                  cmp.l 136(sp),d0
   170ba:	|           '----------------- bgt.w 16faa <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   170be:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   170c2:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   170c6:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170ca:	|  |                           clr.l 136(sp)
   170ce:	|  |     ,-------------------- bra.w 17224 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170d2:	|  |  ,--|-------------------> clr.l 132(sp)
   170d6:	|  |  |  |     ,-------------- bra.w 1720e <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   170da:	|  |  |  |  ,--|-------------> movea.l 1cce2 <currentFloor>,a0
   170e0:	|  |  |  |  |  |               move.l 16(a0),d1
   170e4:	|  |  |  |  |  |               move.l 136(sp),d0
   170e8:	|  |  |  |  |  |               add.l d0,d0
   170ea:	|  |  |  |  |  |               add.l d0,d0
   170ec:	|  |  |  |  |  |               movea.l d1,a0
   170ee:	|  |  |  |  |  |               adda.l d0,a0
   170f0:	|  |  |  |  |  |               move.l (a0),d1
   170f2:	|  |  |  |  |  |               move.l 132(sp),d0
   170f6:	|  |  |  |  |  |               add.l d0,d0
   170f8:	|  |  |  |  |  |               add.l d0,d0
   170fa:	|  |  |  |  |  |               movea.l d1,a0
   170fc:	|  |  |  |  |  |               adda.l d0,a0
   170fe:	|  |  |  |  |  |               move.l (a0),d0
   17100:	|  |  |  |  |  |               moveq #-1,d1
   17102:	|  |  |  |  |  |               cmp.l d0,d1
   17104:	|  |  |  |  |  |  ,----------- bne.w 1720a <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17108:	|  |  |  |  |  |  |            clr.l 122(sp)
   1710c:	|  |  |  |  |  |  |     ,----- bra.w 171f8 <setFloor+0x6d2>
						if (d != i && d != j) {
   17110:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   17114:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17118:	|  |  |  |  |  |  |  |  |  ,-- beq.w 171f4 <setFloor+0x6ce>
   1711c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   17120:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17124:	|  |  |  |  |  |  |  |  |  +-- beq.w 171f4 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17128:	|  |  |  |  |  |  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   1712e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17132:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17136:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17138:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1713a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1713c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1713e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17140:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17144:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17146:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17148:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1714a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1714c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1714e:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17152:	|  |  |  |  |  |  |  |  |  +-- bne.w 171f4 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17156:	|  |  |  |  |  |  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   1715c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17160:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17164:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17166:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17168:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1716a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1716c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1716e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17172:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17174:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17176:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17178:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1717a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1717c:	|  |  |  |  |  |  |  |  |  +-- bmi.s 171f4 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1717e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17182:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17184:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17186:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1718a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1718c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1718e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17192:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17194:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17196:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17198:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1719a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1719c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   171a0:	|  |  |  |  |  |  |  |  |  +-- bgt.s 171f4 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   171a2:	|  |  |  |  |  |  |  |  |  |   movea.l 1cce2 <currentFloor>,a0
   171a8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   171ac:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   171b0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171b2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171b4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171b6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171b8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   171ba:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   171be:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171c2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171c4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171c6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   171ca:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   171ce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171d0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171d2:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   171d6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171d8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   171da:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   171de:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171e2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171e4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171e6:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   171ea:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   171ec:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   171ee:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   171f4:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   171f8:	|  |  |  |  |  |  |  |  '----> movea.l 1cce2 <currentFloor>,a0
   171fe:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   17202:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17206:	|  |  |  |  |  |  |  '-------- bgt.w 17110 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1720a:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   1720e:	|  |  |  |  |  '-------------> movea.l 1cce2 <currentFloor>,a0
   17214:	|  |  |  |  |                  move.l 8(a0),d0
   17218:	|  |  |  |  |                  cmp.l 132(sp),d0
   1721c:	|  |  |  |  '----------------- bgt.w 170da <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17220:	|  |  |  |                     addq.l #1,136(sp)
   17224:	|  |  |  '-------------------> movea.l 1cce2 <currentFloor>,a0
   1722a:	|  |  |                        move.l 8(a0),d0
   1722e:	|  |  |                        cmp.l 136(sp),d0
   17232:	|  |  '----------------------- bgt.w 170d2 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17236:	|  |                           tst.w 130(sp)
   1723a:	|  '-------------------------- bne.w 170c2 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1723e:	|                              clr.l 136(sp)
   17242:	|                          ,-- bra.s 1726a <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17244:	|                       ,--|-> move.l 136(sp),d0
   17248:	|                       |  |   add.l d0,d0
   1724a:	|                       |  |   add.l d0,d0
   1724c:	|                       |  |   movea.l 62(sp),a0
   17250:	|                       |  |   adda.l d0,a0
   17252:	|                       |  |   move.l (a0),54(sp)
   17256:	|                       |  |   move.l 1cbca <SysBase>,d0
   1725c:	|                       |  |   movea.l d0,a6
   1725e:	|                       |  |   movea.l 54(sp),a1
   17262:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17266:	|                       |  |   addq.l #1,136(sp)
   1726a:	|                       |  '-> movea.l 1cce2 <currentFloor>,a0
   17270:	|                       |      move.l 8(a0),d0
   17274:	|                       |      cmp.l 136(sp),d0
   17278:	|                       '----- bgt.s 17244 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   1727a:	|                              move.l 62(sp),58(sp)
   17280:	|                              move.l 1cbca <SysBase>,d0
   17286:	|                              movea.l d0,a6
   17288:	|                              movea.l 58(sp),a1
   1728c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   17290:	|                              clr.l 62(sp)

	return TRUE;
   17294:	|                              moveq #1,d0
}
   17296:	'----------------------------> movea.l (sp)+,a2
   17298:	                               movea.l (sp)+,a6
   1729a:	                               lea 132(sp),sp
   1729e:	                               rts

000172a0 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   172a0:	jsr 1678e <killFloor>
	noFloor ();
   172a6:	jsr 16696 <noFloor>
   172ac:	nop
   172ae:	rts

000172b0 <WaitVbl>:
void WaitVbl() {
   172b0:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   172b2:	   ,-> movea.l #14675972,a0
   172b8:	   |   move.l (a0),d0
   172ba:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   172bc:	   |   move.l (sp),d0
   172be:	   |   andi.l #130816,d0
   172c4:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   172c6:	   |   move.l (sp),d0
   172c8:	   |   cmpi.l #76800,d0
   172ce:	   '-- beq.s 172b2 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   172d0:	,----> movea.l #14675972,a0
   172d6:	|      move.l (a0),d0
   172d8:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   172dc:	|      move.l 4(sp),d0
   172e0:	|      andi.l #130816,d0
   172e6:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   172ea:	|      move.l 4(sp),d0
   172ee:	|      cmpi.l #76800,d0
   172f4:	|  ,-- beq.s 172f8 <WaitVbl+0x48>
	while (1) {
   172f6:	'--|-- bra.s 172d0 <WaitVbl+0x20>
			break;
   172f8:	   '-> nop
}
   172fa:	       nop
   172fc:	       addq.l #8,sp
   172fe:	       rts

00017300 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17300:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17302:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17306:	   ,-- bra.s 17318 <memset+0x18>
		*ptr++ = val;
   17308:	,--|-> move.l (sp),d0
   1730a:	|  |   move.l d0,d1
   1730c:	|  |   addq.l #1,d1
   1730e:	|  |   move.l d1,(sp)
   17310:	|  |   move.l 12(sp),d1
   17314:	|  |   movea.l d0,a0
   17316:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17318:	|  '-> move.l 16(sp),d0
   1731c:	|      move.l d0,d1
   1731e:	|      subq.l #1,d1
   17320:	|      move.l d1,16(sp)
   17324:	|      tst.l d0
   17326:	'----- bne.s 17308 <memset+0x8>
	return dest;
   17328:	       move.l 8(sp),d0
}
   1732c:	       addq.l #4,sp
   1732e:	       rts

00017330 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17330:	       subq.l #8,sp
   17332:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17334:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   1733a:	       move.l 20(sp),4(sp)
	while(len--)
   17340:	   ,-- bra.s 17362 <memcpy+0x32>
		*d++ = *s++;
   17342:	,--|-> move.l 4(sp),d1
   17346:	|  |   move.l d1,d0
   17348:	|  |   addq.l #1,d0
   1734a:	|  |   move.l d0,4(sp)
   1734e:	|  |   move.l 8(sp),d0
   17352:	|  |   move.l d0,d2
   17354:	|  |   addq.l #1,d2
   17356:	|  |   move.l d2,8(sp)
   1735a:	|  |   movea.l d1,a0
   1735c:	|  |   move.b (a0),d1
   1735e:	|  |   movea.l d0,a0
   17360:	|  |   move.b d1,(a0)
	while(len--)
   17362:	|  '-> move.l 24(sp),d0
   17366:	|      move.l d0,d1
   17368:	|      subq.l #1,d1
   1736a:	|      move.l d1,24(sp)
   1736e:	|      tst.l d0
   17370:	'----- bne.s 17342 <memcpy+0x12>
	return dest;
   17372:	       move.l 16(sp),d0
}
   17376:	       move.l (sp)+,d2
   17378:	       addq.l #8,sp
   1737a:	       rts

0001737c <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1737c:	       lea -128(sp),sp
   17380:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17384:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec48c3>,d0
   1738a:	       cmpi.w #20153,d0
   1738e:	   ,-- beq.s 173b2 <KPrintF+0x36>
   17390:	   |   cmpi.w #-24562,d0
   17394:	   +-- beq.s 173b2 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17396:	   |   movea.l 1cbca <SysBase>,a6
   1739c:	   |   movea.l 144(sp),a0
   173a0:	   |   lea 148(sp),a1
   173a4:	   |   lea 17e10 <KPutCharX>,a2
   173aa:	   |   suba.l a3,a3
   173ac:	   |   jsr -522(a6)
}
   173b0:	,--|-- bra.s 173dc <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   173b2:	|  '-> movea.l 1cbca <SysBase>,a6
   173b8:	|      movea.l 144(sp),a0
   173bc:	|      lea 148(sp),a1
   173c0:	|      lea 17e1e <PutChar>,a2
   173c6:	|      lea 12(sp),a3
   173ca:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   173ce:	|      move.l a3,-(sp)
   173d0:	|      pea 56 <_start+0x56>
   173d4:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec48c3>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   173da:	|      addq.l #8,sp
}
   173dc:	'----> movem.l (sp)+,a2-a3/a6
   173e0:	       lea 128(sp),sp
   173e4:	       rts

000173e6 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   173e6:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   173e8:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   173ee:	       movea.l (sp),a0
   173f0:	       move.w (a0),d0
   173f2:	       cmpi.w #20153,d0
   173f6:	   ,-- beq.s 17402 <debug_cmd+0x1c>
   173f8:	   |   movea.l (sp),a0
   173fa:	   |   move.w (a0),d0
   173fc:	   |   cmpi.w #-24562,d0
   17400:	,--|-- bne.s 17420 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17402:	|  '-> move.l 20(sp),-(sp)
   17406:	|      move.l 20(sp),-(sp)
   1740a:	|      move.l 20(sp),-(sp)
   1740e:	|      move.l 20(sp),-(sp)
   17412:	|      pea 58 <_start+0x58>
   17416:	|      movea.l 20(sp),a0
   1741a:	|      jsr (a0)
   1741c:	|      lea 20(sp),sp
	}
}
   17420:	'----> nop
   17422:	       addq.l #4,sp
   17424:	       rts

00017426 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17426:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17428:	   ,-- bra.s 1744a <my_strncpy+0x24>
		*destination++ = *source++;
   1742a:	,--|-> move.l 12(sp),d1
   1742e:	|  |   move.l d1,d0
   17430:	|  |   addq.l #1,d0
   17432:	|  |   move.l d0,12(sp)
   17436:	|  |   move.l 8(sp),d0
   1743a:	|  |   move.l d0,d2
   1743c:	|  |   addq.l #1,d2
   1743e:	|  |   move.l d2,8(sp)
   17442:	|  |   movea.l d1,a0
   17444:	|  |   move.b (a0),d1
   17446:	|  |   movea.l d0,a0
   17448:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1744a:	|  '-> movea.l 12(sp),a0
   1744e:	|      move.b (a0),d0
   17450:	|  ,-- beq.s 17458 <my_strncpy+0x32>
   17452:	|  |   subq.l #1,16(sp)
   17456:	'--|-- bne.s 1742a <my_strncpy+0x4>
	*destination = '\0';
   17458:	   '-> movea.l 8(sp),a0
   1745c:	       clr.b (a0)
}
   1745e:	       nop
   17460:	       move.l (sp)+,d2
   17462:	       rts

00017464 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17464:	    lea -60(sp),sp
   17468:	    movea.l 72(sp),a1
   1746c:	    movea.l 76(sp),a0
   17470:	    move.l 80(sp),d1
   17474:	    move.l 84(sp),d0
   17478:	    movea.w a1,a1
   1747a:	    move.w a1,8(sp)
   1747e:	    movea.w a0,a0
   17480:	    move.w a0,6(sp)
   17484:	    move.w d1,d1
   17486:	    move.w d1,4(sp)
   1748a:	    move.w d0,d0
   1748c:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17490:	    lea 10(sp),a0
   17494:	    clr.l (a0)
   17496:	    addq.l #4,a0
   17498:	    clr.l (a0)
   1749a:	    addq.l #4,a0
   1749c:	    clr.l (a0)
   1749e:	    addq.l #4,a0
   174a0:	    clr.l (a0)
   174a2:	    addq.l #4,a0
   174a4:	    clr.l (a0)
   174a6:	    addq.l #4,a0
   174a8:	    clr.l (a0)
   174aa:	    addq.l #4,a0
   174ac:	    clr.l (a0)
   174ae:	    addq.l #4,a0
   174b0:	    clr.l (a0)
   174b2:	    addq.l #4,a0
   174b4:	    clr.l (a0)
   174b6:	    addq.l #4,a0
   174b8:	    clr.l (a0)
   174ba:	    addq.l #4,a0
   174bc:	    clr.l (a0)
   174be:	    addq.l #4,a0
   174c0:	    clr.l (a0)
   174c2:	    addq.l #4,a0
   174c4:	    clr.w (a0)
   174c6:	    addq.l #2,a0
		.address = (unsigned int)addr,
   174c8:	    move.l 64(sp),d0
	struct debug_resource resource = {
   174cc:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   174d0:	    move.w 8(sp),d0
   174d4:	,-- bpl.s 174d8 <debug_register_bitmap+0x74>
   174d6:	|   addq.w #7,d0
   174d8:	'-> asr.w #3,d0
   174da:	    movea.w d0,a0
   174dc:	    movea.w 6(sp),a1
   174e0:	    move.l a1,-(sp)
   174e2:	    move.l a0,-(sp)
   174e4:	    jsr 17d08 <__mulsi3>
   174ea:	    addq.l #8,sp
   174ec:	    movea.w 4(sp),a0
   174f0:	    move.l a0,-(sp)
   174f2:	    move.l d0,-(sp)
   174f4:	    jsr 17d08 <__mulsi3>
   174fa:	    addq.l #8,sp
	struct debug_resource resource = {
   174fc:	    move.l d0,14(sp)
   17500:	    move.w 2(sp),52(sp)
   17506:	    move.w 8(sp),54(sp)
   1750c:	    move.w 6(sp),56(sp)
   17512:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17518:	    moveq #0,d0
   1751a:	    move.w 2(sp),d0
   1751e:	    moveq #2,d1
   17520:	    and.l d1,d0
   17522:	,-- beq.s 1752e <debug_register_bitmap+0xca>
		resource.size *= 2;
   17524:	|   move.l 14(sp),d0
   17528:	|   add.l d0,d0
   1752a:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1752e:	'-> pea 20 <_start+0x20>
   17532:	    move.l 72(sp),-(sp)
   17536:	    lea 18(sp),a0
   1753a:	    move.l a0,d0
   1753c:	    addq.l #8,d0
   1753e:	    move.l d0,-(sp)
   17540:	    jsr 17426 <my_strncpy>
   17546:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1754a:	    lea 10(sp),a0
   1754e:	    clr.l -(sp)
   17550:	    clr.l -(sp)
   17552:	    move.l a0,-(sp)
   17554:	    pea 4 <_start+0x4>
   17558:	    jsr 173e6 <debug_cmd>
   1755e:	    lea 16(sp),sp
}
   17562:	    nop
   17564:	    lea 60(sp),sp
   17568:	    rts

0001756a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1756a:	lea -12(sp),sp
   1756e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17570:	move.l 20(sp),12(sp)
   17576:	move.l 24(sp),8(sp)
   1757c:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17582:	movea.l d0,a6
   17584:	move.l 12(sp),d0
   17588:	move.l 8(sp),d1
   1758c:	jsr -66(a6)
   17590:	move.l d0,4(sp)
   17594:	move.l 4(sp),d0
}
   17598:	movea.l (sp)+,a6
   1759a:	lea 12(sp),sp
   1759e:	rts

000175a0 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   175a0:	lea -32(sp),sp
   175a4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   175a8:	move.l 48(sp),36(sp)
   175ae:	move.l 52(sp),40(sp)
   175b4:	move.l 56(sp),28(sp)
   175ba:	move.l 60(sp),32(sp)
   175c0:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   175c6:	movea.l d0,a6
   175c8:	move.l 36(sp),d0
   175cc:	move.l 40(sp),d1
   175d0:	move.l 28(sp),d2
   175d4:	move.l 32(sp),d3
   175d8:	jsr -66(a6)
   175dc:	move.l d0,12(sp)
   175e0:	move.l d1,16(sp)
   175e4:	move.l 12(sp),20(sp)
   175ea:	move.l 16(sp),24(sp)
   175f0:	move.l 20(sp),d0
   175f4:	move.l 24(sp),d1
}
   175f8:	movem.l (sp)+,d2-d3/a6
   175fc:	lea 32(sp),sp
   17600:	rts

00017602 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17602:	lea -32(sp),sp
   17606:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1760a:	move.l 48(sp),36(sp)
   17610:	move.l 52(sp),40(sp)
   17616:	move.l 56(sp),28(sp)
   1761c:	move.l 60(sp),32(sp)
   17622:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   17628:	movea.l d0,a6
   1762a:	move.l 36(sp),d0
   1762e:	move.l 40(sp),d1
   17632:	move.l 28(sp),d2
   17636:	move.l 32(sp),d3
   1763a:	jsr -84(a6)
   1763e:	move.l d0,12(sp)
   17642:	move.l d1,16(sp)
   17646:	move.l 12(sp),20(sp)
   1764c:	move.l 16(sp),24(sp)
   17652:	move.l 20(sp),d0
   17656:	move.l 24(sp),d1
}
   1765a:	movem.l (sp)+,d2-d3/a6
   1765e:	lea 32(sp),sp
   17662:	rts

00017664 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17664:	lea -12(sp),sp
   17668:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1766a:	move.l 20(sp),12(sp)
   17670:	move.l 24(sp),8(sp)
   17676:	move.l 1cbda <MathIeeeSingBasBase>,d0
   1767c:	movea.l d0,a6
   1767e:	move.l 12(sp),d0
   17682:	move.l 8(sp),d1
   17686:	jsr -84(a6)
   1768a:	move.l d0,4(sp)
   1768e:	move.l 4(sp),d0
}
   17692:	movea.l (sp)+,a6
   17694:	lea 12(sp),sp
   17698:	rts

0001769a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1769a:	lea -12(sp),sp
   1769e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176a0:	move.l 20(sp),12(sp)
   176a6:	move.l 24(sp),8(sp)
   176ac:	move.l 1cbda <MathIeeeSingBasBase>,d0
   176b2:	movea.l d0,a6
   176b4:	move.l 12(sp),d0
   176b8:	move.l 8(sp),d1
   176bc:	jsr -42(a6)
   176c0:	move.l d0,4(sp)
   176c4:	move.l 4(sp),d0
}
   176c8:	movea.l (sp)+,a6
   176ca:	lea 12(sp),sp
   176ce:	rts

000176d0 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   176d0:	lea -20(sp),sp
   176d4:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   176d6:	move.l 28(sp),20(sp)
   176dc:	move.l 1cbe6 <MathIeeeDoubTransBase>,d0
   176e2:	movea.l d0,a6
   176e4:	move.l 20(sp),d0
   176e8:	jsr -108(a6)
   176ec:	move.l d0,4(sp)
   176f0:	move.l d1,8(sp)
   176f4:	move.l 4(sp),12(sp)
   176fa:	move.l 8(sp),16(sp)
   17700:	move.l 12(sp),d0
   17704:	move.l 16(sp),d1
}
   17708:	movea.l (sp)+,a6
   1770a:	lea 20(sp),sp
   1770e:	rts

00017710 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17710:	lea -12(sp),sp
   17714:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17716:	move.l 20(sp),8(sp)
   1771c:	move.l 24(sp),12(sp)
   17722:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   17728:	movea.l d0,a6
   1772a:	move.l 8(sp),d0
   1772e:	move.l 12(sp),d1
   17732:	jsr -30(a6)
   17736:	move.l d0,4(sp)
   1773a:	move.l 4(sp),d0
}
   1773e:	movea.l (sp)+,a6
   17740:	lea 12(sp),sp
   17744:	rts

00017746 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17746:	subq.l #8,sp
   17748:	move.l a6,-(sp)
	return IEEESPFix(value);
   1774a:	move.l 16(sp),8(sp)
   17750:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17756:	movea.l d0,a6
   17758:	move.l 8(sp),d0
   1775c:	jsr -30(a6)
   17760:	move.l d0,4(sp)
   17764:	move.l 4(sp),d0
}
   17768:	movea.l (sp)+,a6
   1776a:	addq.l #8,sp
   1776c:	rts

0001776e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1776e:	lea -20(sp),sp
   17772:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17774:	move.l 28(sp),20(sp)
   1777a:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   17780:	movea.l d0,a6
   17782:	move.l 20(sp),d0
   17786:	jsr -36(a6)
   1778a:	move.l d0,4(sp)
   1778e:	move.l d1,8(sp)
   17792:	move.l 4(sp),12(sp)
   17798:	move.l 8(sp),16(sp)
   1779e:	move.l 12(sp),d0
   177a2:	move.l 16(sp),d1
}
   177a6:	movea.l (sp)+,a6
   177a8:	lea 20(sp),sp
   177ac:	rts

000177ae <__floatsisf>:

FLOAT __floatsisf(int i) {
   177ae:	subq.l #8,sp
   177b0:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   177b2:	move.l 16(sp),8(sp)
   177b8:	move.l 1cbda <MathIeeeSingBasBase>,d0
   177be:	movea.l d0,a6
   177c0:	move.l 8(sp),d0
   177c4:	jsr -36(a6)
   177c8:	move.l d0,4(sp)
   177cc:	move.l 4(sp),d0
}
   177d0:	movea.l (sp)+,a6
   177d2:	addq.l #8,sp
   177d4:	rts

000177d6 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   177d6:	subq.l #8,sp
   177d8:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   177da:	move.l 16(sp),8(sp)
   177e0:	move.l 1cbda <MathIeeeSingBasBase>,d0
   177e6:	movea.l d0,a6
   177e8:	move.l 8(sp),d0
   177ec:	jsr -36(a6)
   177f0:	move.l d0,4(sp)
   177f4:	move.l 4(sp),d0
}
   177f8:	movea.l (sp)+,a6
   177fa:	addq.l #8,sp
   177fc:	rts

000177fe <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   177fe:	lea -32(sp),sp
   17802:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17806:	move.l 48(sp),36(sp)
   1780c:	move.l 52(sp),40(sp)
   17812:	move.l 56(sp),28(sp)
   17818:	move.l 60(sp),32(sp)
   1781e:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   17824:	movea.l d0,a6
   17826:	move.l 36(sp),d0
   1782a:	move.l 40(sp),d1
   1782e:	move.l 28(sp),d2
   17832:	move.l 32(sp),d3
   17836:	jsr -78(a6)
   1783a:	move.l d0,12(sp)
   1783e:	move.l d1,16(sp)
   17842:	move.l 12(sp),20(sp)
   17848:	move.l 16(sp),24(sp)
   1784e:	move.l 20(sp),d0
   17852:	move.l 24(sp),d1
}
   17856:	movem.l (sp)+,d2-d3/a6
   1785a:	lea 32(sp),sp
   1785e:	rts

00017860 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17860:	lea -12(sp),sp
   17864:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17866:	move.l 20(sp),12(sp)
   1786c:	move.l 24(sp),8(sp)
   17872:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17878:	movea.l d0,a6
   1787a:	move.l 12(sp),d0
   1787e:	move.l 8(sp),d1
   17882:	jsr -78(a6)
   17886:	move.l d0,4(sp)
   1788a:	move.l 4(sp),d0
}
   1788e:	movea.l (sp)+,a6
   17890:	lea 12(sp),sp
   17894:	rts

00017896 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17896:	lea -12(sp),sp
   1789a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1789c:	move.l 20(sp),12(sp)
   178a2:	move.l 24(sp),8(sp)
   178a8:	move.l 1cbda <MathIeeeSingBasBase>,d0
   178ae:	movea.l d0,a6
   178b0:	move.l 12(sp),d0
   178b4:	move.l 8(sp),d1
   178b8:	jsr -42(a6)
   178bc:	move.l d0,4(sp)
   178c0:	move.l 4(sp),d0
}
   178c4:	movea.l (sp)+,a6
   178c6:	lea 12(sp),sp
   178ca:	rts

000178cc <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   178cc:	lea -20(sp),sp
   178d0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   178d4:	move.l 36(sp),24(sp)
   178da:	move.l 40(sp),28(sp)
   178e0:	move.l 44(sp),16(sp)
   178e6:	move.l 48(sp),20(sp)
   178ec:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   178f2:	movea.l d0,a6
   178f4:	move.l 24(sp),d0
   178f8:	move.l 28(sp),d1
   178fc:	move.l 16(sp),d2
   17900:	move.l 20(sp),d3
   17904:	jsr -42(a6)
   17908:	move.l d0,12(sp)
   1790c:	move.l 12(sp),d0
}
   17910:	movem.l (sp)+,d2-d3/a6
   17914:	lea 20(sp),sp
   17918:	rts

0001791a <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1791a:	lea -12(sp),sp
   1791e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17920:	move.l 20(sp),12(sp)
   17926:	move.l 24(sp),8(sp)
   1792c:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17932:	movea.l d0,a6
   17934:	move.l 12(sp),d0
   17938:	move.l 8(sp),d1
   1793c:	jsr -42(a6)
   17940:	move.l d0,4(sp)
   17944:	move.l 4(sp),d0
}
   17948:	movea.l (sp)+,a6
   1794a:	lea 12(sp),sp
   1794e:	rts

00017950 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17950:	lea -12(sp),sp
   17954:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17956:	move.l 20(sp),12(sp)
   1795c:	move.l 24(sp),8(sp)
   17962:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17968:	movea.l d0,a6
   1796a:	move.l 12(sp),d0
   1796e:	move.l 8(sp),d1
   17972:	jsr -42(a6)
   17976:	move.l d0,4(sp)
   1797a:	move.l 4(sp),d0
}
   1797e:	movea.l (sp)+,a6
   17980:	lea 12(sp),sp
   17984:	rts

00017986 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17986:	lea -20(sp),sp
   1798a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1798e:	move.l 36(sp),24(sp)
   17994:	move.l 40(sp),28(sp)
   1799a:	move.l 44(sp),16(sp)
   179a0:	move.l 48(sp),20(sp)
   179a6:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   179ac:	movea.l d0,a6
   179ae:	move.l 24(sp),d0
   179b2:	move.l 28(sp),d1
   179b6:	move.l 16(sp),d2
   179ba:	move.l 20(sp),d3
   179be:	jsr -42(a6)
   179c2:	move.l d0,12(sp)
   179c6:	move.l 12(sp),d0
}
   179ca:	movem.l (sp)+,d2-d3/a6
   179ce:	lea 20(sp),sp
   179d2:	rts

000179d4 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   179d4:	lea -12(sp),sp
   179d8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179da:	move.l 20(sp),12(sp)
   179e0:	move.l 24(sp),8(sp)
   179e6:	move.l 1cbda <MathIeeeSingBasBase>,d0
   179ec:	movea.l d0,a6
   179ee:	move.l 12(sp),d0
   179f2:	move.l 8(sp),d1
   179f6:	jsr -42(a6)
   179fa:	move.l d0,4(sp)
   179fe:	move.l 4(sp),d0
}
   17a02:	movea.l (sp)+,a6
   17a04:	lea 12(sp),sp
   17a08:	rts

00017a0a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17a0a:	lea -12(sp),sp
   17a0e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17a10:	move.l 20(sp),12(sp)
   17a16:	move.l 24(sp),8(sp)
   17a1c:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17a22:	movea.l d0,a6
   17a24:	move.l 12(sp),d0
   17a28:	move.l 8(sp),d1
   17a2c:	jsr -42(a6)
   17a30:	move.l d0,4(sp)
   17a34:	move.l 4(sp),d0
}
   17a38:	movea.l (sp)+,a6
   17a3a:	lea 12(sp),sp
   17a3e:	rts

00017a40 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17a40:	lea -32(sp),sp
   17a44:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17a48:	move.l 48(sp),36(sp)
   17a4e:	move.l 52(sp),40(sp)
   17a54:	move.l 56(sp),28(sp)
   17a5a:	move.l 60(sp),32(sp)
   17a60:	move.l 1cbe2 <MathIeeeDoubBasBase>,d0
   17a66:	movea.l d0,a6
   17a68:	move.l 36(sp),d0
   17a6c:	move.l 40(sp),d1
   17a70:	move.l 28(sp),d2
   17a74:	move.l 32(sp),d3
   17a78:	jsr -72(a6)
   17a7c:	move.l d0,12(sp)
   17a80:	move.l d1,16(sp)
   17a84:	move.l 12(sp),20(sp)
   17a8a:	move.l 16(sp),24(sp)
   17a90:	move.l 20(sp),d0
   17a94:	move.l 24(sp),d1
}
   17a98:	movem.l (sp)+,d2-d3/a6
   17a9c:	lea 32(sp),sp
   17aa0:	rts

00017aa2 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17aa2:	lea -12(sp),sp
   17aa6:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17aa8:	move.l 20(sp),12(sp)
   17aae:	move.l 24(sp),8(sp)
   17ab4:	move.l 1cbda <MathIeeeSingBasBase>,d0
   17aba:	movea.l d0,a6
   17abc:	move.l 12(sp),d0
   17ac0:	move.l 8(sp),d1
   17ac4:	jsr -72(a6)
   17ac8:	move.l d0,4(sp)
   17acc:	move.l 4(sp),d0
}
   17ad0:	movea.l (sp)+,a6
   17ad2:	lea 12(sp),sp
   17ad6:	rts

00017ad8 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17ad8:	lea -12(sp),sp
   17adc:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17ade:	move.l 20(sp),8(sp)
   17ae4:	move.l 24(sp),12(sp)
   17aea:	move.l 1cbe6 <MathIeeeDoubTransBase>,d0
   17af0:	movea.l d0,a6
   17af2:	move.l 8(sp),d0
   17af6:	move.l 12(sp),d1
   17afa:	jsr -102(a6)
   17afe:	move.l d0,4(sp)
   17b02:	move.l 4(sp),d0
}
   17b06:	movea.l (sp)+,a6
   17b08:	lea 12(sp),sp
   17b0c:	rts

00017b0e <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17b0e:	       lea -24(sp),sp
   17b12:	       move.l a6,-(sp)
    if (x > 0) {
   17b14:	       clr.l -(sp)
   17b16:	       move.l 40(sp),-(sp)
   17b1a:	       jsr 1791a <__gtsf2>
   17b20:	       addq.l #8,sp
   17b22:	       tst.l d0
   17b24:	   ,-- ble.s 17b56 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17b26:	   |   move.l 36(sp),-(sp)
   17b2a:	   |   move.l 36(sp),-(sp)
   17b2e:	   |   jsr 17664 <__divsf3>
   17b34:	   |   addq.l #8,sp
   17b36:	   |   move.l d0,8(sp)
   17b3a:	   |   move.l 1cbde <MathIeeeSingTransBase>,d0
   17b40:	   |   movea.l d0,a6
   17b42:	   |   move.l 8(sp),d0
   17b46:	   |   jsr -30(a6)
   17b4a:	   |   move.l d0,4(sp)
   17b4e:	   |   move.l 4(sp),d0
   17b52:	,--|-- bra.w 17cb6 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17b56:	|  '-> clr.l -(sp)
   17b58:	|      move.l 40(sp),-(sp)
   17b5c:	|      jsr 179d4 <__ltsf2>
   17b62:	|      addq.l #8,sp
   17b64:	|      tst.l d0
   17b66:	|  ,-- bge.s 17bda <atan2f+0xcc>
   17b68:	|  |   clr.l -(sp)
   17b6a:	|  |   move.l 36(sp),-(sp)
   17b6e:	|  |   jsr 17896 <__gesf2>
   17b74:	|  |   addq.l #8,sp
   17b76:	|  |   tst.l d0
   17b78:	|  +-- blt.s 17bda <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17b7a:	|  |   move.l 36(sp),-(sp)
   17b7e:	|  |   move.l 36(sp),-(sp)
   17b82:	|  |   jsr 17664 <__divsf3>
   17b88:	|  |   addq.l #8,sp
   17b8a:	|  |   move.l d0,24(sp)
   17b8e:	|  |   move.l 1cbde <MathIeeeSingTransBase>,d0
   17b94:	|  |   movea.l d0,a6
   17b96:	|  |   move.l 24(sp),d0
   17b9a:	|  |   jsr -30(a6)
   17b9e:	|  |   move.l d0,20(sp)
   17ba2:	|  |   move.l 20(sp),d0
   17ba6:	|  |   move.l d0,-(sp)
   17ba8:	|  |   jsr 176d0 <__extendsfdf2>
   17bae:	|  |   addq.l #4,sp
   17bb0:	|  |   move.l #1413754136,-(sp)
   17bb6:	|  |   move.l #1074340347,-(sp)
   17bbc:	|  |   move.l d1,-(sp)
   17bbe:	|  |   move.l d0,-(sp)
   17bc0:	|  |   jsr 175a0 <__adddf3>
   17bc6:	|  |   lea 16(sp),sp
   17bca:	|  |   move.l d1,-(sp)
   17bcc:	|  |   move.l d0,-(sp)
   17bce:	|  |   jsr 17ad8 <__truncdfsf2>
   17bd4:	|  |   addq.l #8,sp
   17bd6:	+--|-- bra.w 17cb6 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17bda:	|  '-> clr.l -(sp)
   17bdc:	|      move.l 40(sp),-(sp)
   17be0:	|      jsr 179d4 <__ltsf2>
   17be6:	|      addq.l #8,sp
   17be8:	|      tst.l d0
   17bea:	|  ,-- bge.s 17c5c <atan2f+0x14e>
   17bec:	|  |   clr.l -(sp)
   17bee:	|  |   move.l 36(sp),-(sp)
   17bf2:	|  |   jsr 179d4 <__ltsf2>
   17bf8:	|  |   addq.l #8,sp
   17bfa:	|  |   tst.l d0
   17bfc:	|  +-- bge.s 17c5c <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17bfe:	|  |   move.l 36(sp),-(sp)
   17c02:	|  |   move.l 36(sp),-(sp)
   17c06:	|  |   jsr 17664 <__divsf3>
   17c0c:	|  |   addq.l #8,sp
   17c0e:	|  |   move.l d0,16(sp)
   17c12:	|  |   move.l 1cbde <MathIeeeSingTransBase>,d0
   17c18:	|  |   movea.l d0,a6
   17c1a:	|  |   move.l 16(sp),d0
   17c1e:	|  |   jsr -30(a6)
   17c22:	|  |   move.l d0,12(sp)
   17c26:	|  |   move.l 12(sp),d0
   17c2a:	|  |   move.l d0,-(sp)
   17c2c:	|  |   jsr 176d0 <__extendsfdf2>
   17c32:	|  |   addq.l #4,sp
   17c34:	|  |   move.l #1413754136,-(sp)
   17c3a:	|  |   move.l #1074340347,-(sp)
   17c40:	|  |   move.l d1,-(sp)
   17c42:	|  |   move.l d0,-(sp)
   17c44:	|  |   jsr 17a40 <__subdf3>
   17c4a:	|  |   lea 16(sp),sp
   17c4e:	|  |   move.l d1,-(sp)
   17c50:	|  |   move.l d0,-(sp)
   17c52:	|  |   jsr 17ad8 <__truncdfsf2>
   17c58:	|  |   addq.l #8,sp
   17c5a:	+--|-- bra.s 17cb6 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17c5c:	|  '-> clr.l -(sp)
   17c5e:	|      move.l 40(sp),-(sp)
   17c62:	|      jsr 1769a <__eqsf2>
   17c68:	|      addq.l #8,sp
   17c6a:	|      tst.l d0
   17c6c:	|  ,-- bne.s 17c88 <atan2f+0x17a>
   17c6e:	|  |   clr.l -(sp)
   17c70:	|  |   move.l 36(sp),-(sp)
   17c74:	|  |   jsr 1791a <__gtsf2>
   17c7a:	|  |   addq.l #8,sp
   17c7c:	|  |   tst.l d0
   17c7e:	|  +-- ble.s 17c88 <atan2f+0x17a>
        return PI / 2;
   17c80:	|  |   move.l #1070141403,d0
   17c86:	+--|-- bra.s 17cb6 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17c88:	|  '-> clr.l -(sp)
   17c8a:	|      move.l 40(sp),-(sp)
   17c8e:	|      jsr 1769a <__eqsf2>
   17c94:	|      addq.l #8,sp
   17c96:	|      tst.l d0
   17c98:	|  ,-- bne.s 17cb4 <atan2f+0x1a6>
   17c9a:	|  |   clr.l -(sp)
   17c9c:	|  |   move.l 36(sp),-(sp)
   17ca0:	|  |   jsr 179d4 <__ltsf2>
   17ca6:	|  |   addq.l #8,sp
   17ca8:	|  |   tst.l d0
   17caa:	|  +-- bge.s 17cb4 <atan2f+0x1a6>
        return -PI / 2;
   17cac:	|  |   move.l #-1077342245,d0
   17cb2:	+--|-- bra.s 17cb6 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17cb4:	|  '-> moveq #0,d0
    }
}
   17cb6:	'----> movea.l (sp)+,a6
   17cb8:	       lea 24(sp),sp
   17cbc:	       rts

00017cbe <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17cbe:	lea -24(sp),sp
   17cc2:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17cc4:	move.l 32(sp),20(sp)
   17cca:	move.l 36(sp),24(sp)
   17cd0:	move.l 1cbe6 <MathIeeeDoubTransBase>,d0
   17cd6:	movea.l d0,a6
   17cd8:	move.l 20(sp),d0
   17cdc:	move.l 24(sp),d1
   17ce0:	jsr -96(a6)
   17ce4:	move.l d0,4(sp)
   17ce8:	move.l d1,8(sp)
   17cec:	move.l 4(sp),12(sp)
   17cf2:	move.l 8(sp),16(sp)
   17cf8:	move.l 12(sp),d0
   17cfc:	move.l 16(sp),d1
}
   17d00:	movea.l (sp)+,a6
   17d02:	lea 24(sp),sp
   17d06:	rts

00017d08 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17d08:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17d0c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17d10:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17d14:	mulu.w 8(sp),d1
	addw	d1, d0
   17d18:	add.w d1,d0
	swap	d0
   17d1a:	swap d0
	clrw	d0
   17d1c:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17d1e:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17d22:	mulu.w 10(sp),d1
	addl	d1, d0
   17d26:	add.l d1,d0
	rts
   17d28:	rts

00017d2a <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17d2a:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17d2c:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17d30:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17d34:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17d3a:	   ,-- bcc.s 17d52 <__udivsi3+0x28>
	movel	d0, d2
   17d3c:	   |   move.l d0,d2
	clrw	d2
   17d3e:	   |   clr.w d2
	swap	d2
   17d40:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17d42:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17d44:	   |   move.w d2,d0
	swap	d0
   17d46:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17d48:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17d4c:	   |   divu.w d1,d2
	movew	d2, d0
   17d4e:	   |   move.w d2,d0
	jra	6f
   17d50:	,--|-- bra.s 17d82 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17d52:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17d54:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17d56:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17d58:	|  |   cmpi.l #65536,d1
	jcc	4b
   17d5e:	|  '-- bcc.s 17d54 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17d60:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17d62:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17d68:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17d6a:	|      mulu.w d0,d1
	swap	d2
   17d6c:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17d6e:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17d70:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17d72:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17d74:	|  ,-- bne.s 17d80 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17d76:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17d78:	|  +-- bcs.s 17d80 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17d7a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17d7e:	+--|-- bls.s 17d82 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17d80:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17d82:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d84:	       rts

00017d86 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17d86:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17d88:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17d8a:	    move.l 12(sp),d1
	jpl	1f
   17d8e:	,-- bpl.s 17d94 <__divsi3+0xe>
	negl	d1
   17d90:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17d92:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17d94:	'-> move.l 8(sp),d0
	jpl	2f
   17d98:	,-- bpl.s 17d9e <__divsi3+0x18>
	negl	d0
   17d9a:	|   neg.l d0
	negb	d2
   17d9c:	|   neg.b d2

2:	movel	d1, sp@-
   17d9e:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17da0:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17da2:	    jsr 17d2a <__udivsi3>
	addql	#8, sp
   17da8:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17daa:	    tst.b d2
	jpl	3f
   17dac:	,-- bpl.s 17db0 <__divsi3+0x2a>
	negl	d0
   17dae:	|   neg.l d0

3:	movel	sp@+, d2
   17db0:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17db2:	    rts

00017db4 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17db4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17db8:	move.l 4(sp),d0
	movel	d1, sp@-
   17dbc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dbe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17dc0:	jsr 17d86 <__divsi3>
	addql	#8, sp
   17dc6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17dc8:	move.l 8(sp),d1
	movel	d1, sp@-
   17dcc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dce:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17dd0:	jsr 17d08 <__mulsi3>
	addql	#8, sp
   17dd6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17dd8:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17ddc:	sub.l d0,d1
	movel	d1, d0
   17dde:	move.l d1,d0
	rts
   17de0:	rts

00017de2 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17de2:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17de6:	move.l 4(sp),d0
	movel	d1, sp@-
   17dea:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dec:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17dee:	jsr 17d2a <__udivsi3>
	addql	#8, sp
   17df4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17df6:	move.l 8(sp),d1
	movel	d1, sp@-
   17dfa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dfc:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17dfe:	jsr 17d08 <__mulsi3>
	addql	#8, sp
   17e04:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17e06:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17e0a:	sub.l d0,d1
	movel	d1, d0
   17e0c:	move.l d1,d0
	rts
   17e0e:	rts

00017e10 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17e10:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17e12:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17e16:	jsr -516(a6)
    move.l (sp)+, a6
   17e1a:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17e1c:	rts

00017e1e <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17e1e:	move.b d0,(a3)+
	rts
   17e20:	rts
