
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #100702,d0
       8:	       subi.l #100702,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1895e <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #100702,d0
      40:	       subi.l #100702,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1895e <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 509a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #100702,d0
      7e:	       subi.l #100702,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1895e <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1124a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 190e8 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 11262 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1895e <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1124a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 190e8 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1895e <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1124a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 190e8 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1487e <PutChar+0x4>
     35c:	|  |              |   jsr 13da6 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 190f0 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 190f0 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 190f0 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 190f0 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 190f0 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 190f0 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 190f0 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 148a8 <cursors.c.412ac4f3+0x20>
     834:	|   jsr 13da6 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 190f0 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 148c4 <cursors.c.412ac4f3+0x3c>
     8a6:	|   jsr 13da6 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 190f0 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 190f0 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 190f0 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 190f0 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 190f0 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 190f0 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 190f0 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 190f0 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 190e8 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 190f0 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1124a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 190f0 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 190e8 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 190e8 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #84204,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 190e8 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 148f9 <cursors.c.412ac4f3+0x71>
     cea:	   |   jsr 13da6 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 14764 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 1483e <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 14916 <cursors.c.412ac4f3+0x8e>
     d66:	|      jsr 13da6 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 190e8 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 190e8 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 190e8 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19008 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 71ea <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19008 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 1900c <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19010 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 14929 <cursors.c.412ac4f3+0xa1>
     de8:	jsr 13da6 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -24(sp),sp
     df8:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     dfa:	             move.l 19038 <CstPalette>,d0
     e00:	         /-- beq.s e1a <CstBlankScreen+0x26>
     e02:	         |   move.l 19038 <CstPalette>,12(sp)
     e0a:	         |   move.l 190e8 <SysBase>,d0
     e10:	         |   movea.l d0,a6
     e12:	         |   movea.l 12(sp),a1
     e16:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e1a:	         \-> clr.w 1901c <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e20:	             move.l #14675968,8(sp)

  width /= 16;
     e28:	             move.l 32(sp),d0
     e2c:	             movea.l d0,a0
     e2e:	             cmpa.w #0,a0
     e32:	         /-- bge.s e38 <CstBlankScreen+0x44>
     e34:	         |   lea 15(a0),a0
     e38:	         \-> move.l a0,d0
     e3a:	             asr.l #4,d0
     e3c:	             move.l d0,32(sp)

  WaitBlit();
     e40:	             move.l 190f4 <GfxBase>,d0
     e46:	             movea.l d0,a6
     e48:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e4c:	             clr.l 24(sp)
     e50:	   /-------- bra.w f2a <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     e54:	/--|-------> movea.l 8(sp),a0
     e58:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e5e:	|  |         movea.l 8(sp),a0
     e62:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e68:	|  |         movea.l 8(sp),a0
     e6c:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e72:	|  |         movea.l 8(sp),a0
     e76:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e7c:	|  |         movea.l 8(sp),a0
     e80:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e86:	|  |         movea.l 8(sp),a0
     e8a:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e90:	|  |         movea.l 8(sp),a0
     e94:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e9a:	|  |         movea.l 8(sp),a0
     e9e:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ea4:	|  |         move.l 19030 <CstDrawBuffer>,d0
     eaa:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     eae:	|  |         move.l 36(sp),d0
     eb2:	|  |         lsl.w #6,d0
     eb4:	|  |         move.l 32(sp),d1
     eb8:	|  |         movea.w d0,a0
     eba:	|  |         adda.w d1,a0
     ebc:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     ec0:	|  |         move.l 32(sp),d1
     ec4:	|  |         move.l 36(sp),d0
     ec8:	|  |         muls.w d1,d0
     eca:	|  |         add.w d0,d0
     ecc:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     ed0:	|  |         clr.l 16(sp)
     ed4:	|  |     /-- bra.s f06 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     ed6:	|  |  /--|-> move.l 20(sp),d0
     eda:	|  |  |  |   movea.l 8(sp),a0
     ede:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ee2:	|  |  |  |   movea.l 8(sp),a0
     ee6:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     eec:	|  |  |  |   move.l 190f4 <GfxBase>,d0
     ef2:	|  |  |  |   movea.l d0,a6
     ef4:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ef8:	|  |  |  |   moveq #0,d0
     efa:	|  |  |  |   move.w 4(sp),d0
     efe:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f02:	|  |  |  |   addq.l #1,16(sp)
     f06:	|  |  |  \-> moveq #4,d0
     f08:	|  |  |      cmp.l 16(sp),d0
     f0c:	|  |  \----- bge.s ed6 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f0e:	|  |         move.l 190f4 <GfxBase>,d0
     f14:	|  |         movea.l d0,a6
     f16:	|  |         jsr -228(a6)
    WaitVbl();
     f1a:	|  |         jsr 13cda <WaitVbl>
    CstSwapBuffer();
     f20:	|  |         jsr 1872 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f26:	|  |         addq.l #1,24(sp)
     f2a:	|  \-------> moveq #1,d0
     f2c:	|            cmp.l 24(sp),d0
     f30:	\----------- bge.w e54 <CstBlankScreen+0x60>
  }

}
     f34:	             nop
     f36:	             nop
     f38:	             movea.l (sp)+,a6
     f3a:	             lea 24(sp),sp
     f3e:	             rts

00000f40 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f40:	       lea -52(sp),sp
     f44:	       move.l a6,-(sp)
     f46:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f48:	       move.l #400,32(sp)
     f50:	       moveq #2,d0
     f52:	       move.l d0,28(sp)
     f56:	       move.l 190e8 <SysBase>,d0
     f5c:	       movea.l d0,a6
     f5e:	       move.l 32(sp),d0
     f62:	       move.l 28(sp),d1
     f66:	       jsr -198(a6)
     f6a:	       move.l d0,24(sp)
     f6e:	       move.l 24(sp),d0
     f72:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f76:	   /-- bne.s fa0 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f78:	   |   pea 28 <_start+0x28>
     f7c:	   |   pea 14962 <cursors.c.412ac4f3+0xda>
     f82:	   |   jsr 13da6 <KPrintF>
     f88:	   |   addq.l #8,sp
    Exit(1);
     f8a:	   |   moveq #1,d1
     f8c:	   |   move.l d1,16(sp)
     f90:	   |   move.l 190f0 <DOSBase>,d0
     f96:	   |   movea.l d0,a6
     f98:	   |   move.l 16(sp),d1
     f9c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fa0:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     fa6:	       move.l #100704,52(sp)
  for(int i=0; i<16;i++)
     fae:	       clr.l 48(sp)
     fb2:	   /-- bra.s fd8 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     fb4:	/--|-> move.l 52(sp),d1
     fb8:	|  |   move.l d1,d2
     fba:	|  |   addq.l #4,d2
     fbc:	|  |   move.l d2,52(sp)
     fc0:	|  |   move.l 56(sp),d0
     fc4:	|  |   move.l d0,d2
     fc6:	|  |   addq.l #4,d2
     fc8:	|  |   move.l d2,56(sp)
     fcc:	|  |   movea.l d1,a0
     fce:	|  |   move.l (a0),d1
     fd0:	|  |   movea.l d0,a0
     fd2:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fd4:	|  |   addq.l #1,48(sp)
     fd8:	|  \-> moveq #15,d0
     fda:	|      cmp.l 48(sp),d0
     fde:	\----- bge.s fb4 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fe0:	       move.l #100768,52(sp)

  for(int i=0; i<12;i++)
     fe8:	       clr.l 44(sp)
     fec:	   /-- bra.s 1012 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fee:	/--|-> move.l 52(sp),d1
     ff2:	|  |   move.l d1,d2
     ff4:	|  |   addq.l #4,d2
     ff6:	|  |   move.l d2,52(sp)
     ffa:	|  |   move.l 56(sp),d0
     ffe:	|  |   move.l d0,d2
    1000:	|  |   addq.l #4,d2
    1002:	|  |   move.l d2,56(sp)
    1006:	|  |   movea.l d1,a0
    1008:	|  |   move.l (a0),d1
    100a:	|  |   movea.l d0,a0
    100c:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    100e:	|  |   addq.l #1,44(sp)
    1012:	|  \-> moveq #11,d0
    1014:	|      cmp.l 44(sp),d0
    1018:	\----- bge.s fee <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    101a:	       move.l #100816,52(sp)
  for(int i=0; i<10;i++)
    1022:	       clr.l 40(sp)
    1026:	   /-- bra.s 104c <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1028:	/--|-> move.l 52(sp),d1
    102c:	|  |   move.l d1,d2
    102e:	|  |   addq.l #4,d2
    1030:	|  |   move.l d2,52(sp)
    1034:	|  |   move.l 56(sp),d0
    1038:	|  |   move.l d0,d2
    103a:	|  |   addq.l #4,d2
    103c:	|  |   move.l d2,56(sp)
    1040:	|  |   movea.l d1,a0
    1042:	|  |   move.l (a0),d1
    1044:	|  |   movea.l d0,a0
    1046:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1048:	|  |   addq.l #1,40(sp)
    104c:	|  \-> moveq #9,d0
    104e:	|      cmp.l 40(sp),d0
    1052:	\----- bge.s 1028 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    1054:	       move.l #100856,52(sp)
  CstClColor = (UWORD *) cl;
    105c:	       move.l 56(sp),19034 <CstClColor>
  for(int i=0; i<32;i++)
    1064:	       clr.l 36(sp)
    1068:	   /-- bra.s 108e <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    106a:	/--|-> move.l 52(sp),d1
    106e:	|  |   move.l d1,d2
    1070:	|  |   addq.l #4,d2
    1072:	|  |   move.l d2,52(sp)
    1076:	|  |   move.l 56(sp),d0
    107a:	|  |   move.l d0,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,56(sp)
    1082:	|  |   movea.l d1,a0
    1084:	|  |   move.l (a0),d1
    1086:	|  |   movea.l d0,a0
    1088:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    108a:	|  |   addq.l #1,36(sp)
    108e:	|  \-> moveq #31,d0
    1090:	|      cmp.l 36(sp),d0
    1094:	\----- bge.s 106a <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1096:	       moveq #40,d1
    1098:	       cmp.l 64(sp),d1
    109c:	   /-- bge.s 10fa <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    109e:	   |   moveq #-40,d2
    10a0:	   |   add.l 64(sp),d2
    10a4:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10a8:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #264,(a0)
    *cw++ = tmp;
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10d4:	   |   move.l 8(sp),d0
    10d8:	   |   move.l d0,d1
    10da:	   |   addq.l #2,d1
    10dc:	   |   move.l d1,8(sp)
    10e0:	   |   movea.l d0,a0
    10e2:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10e6:	   |   move.l 8(sp),d0
    10ea:	   |   move.l d0,d1
    10ec:	   |   addq.l #2,d1
    10ee:	   |   move.l d1,8(sp)
    10f2:	   |   move.l 12(sp),d1
    10f6:	   |   movea.l d0,a0
    10f8:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10fa:	   \-> move.l 56(sp),d0
    10fe:	       move.l d0,d1
    1100:	       addq.l #4,d1
    1102:	       move.l d1,56(sp)
    1106:	       moveq #-2,d2
    1108:	       movea.l d0,a0
    110a:	       move.l d2,(a0)
  return (UWORD *) retval;  
    110c:	       move.l 20(sp),d0
}
    1110:	       move.l (sp)+,d2
    1112:	       movea.l (sp)+,a6
    1114:	       lea 52(sp),sp
    1118:	       rts

0000111a <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    111a:	       lea -28(sp),sp
    111e:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    1120:	       move.l 19022 <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1128:	       move.l 19030 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	       clr.l 20(sp)
    1134:	   /-- bra.s 115a <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1136:	/--|-> move.l 28(sp),d1
    113a:	|  |   move.l d1,d0
    113c:	|  |   addq.l #4,d0
    113e:	|  |   move.l d0,28(sp)
    1142:	|  |   move.l 24(sp),d0
    1146:	|  |   move.l d0,d2
    1148:	|  |   addq.l #4,d2
    114a:	|  |   move.l d2,24(sp)
    114e:	|  |   movea.l d1,a0
    1150:	|  |   move.l (a0),d1
    1152:	|  |   movea.l d0,a0
    1154:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1156:	|  |   addq.l #1,20(sp)
    115a:	|  \-> move.w 1901e <CstBackdropSize>,d0
    1160:	|      lsr.w #2,d0
    1162:	|      move.w d0,d0
    1164:	|      andi.l #65535,d0
    116a:	|      cmp.l 20(sp),d0
    116e:	\----- bgt.s 1136 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    1170:	       move.l 19034 <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1178:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    117e:	       move.l 19038 <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1186:	       clr.l 6(sp)
    118a:	   /-- bra.s 11c6 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    118c:	/--|-> move.l 16(sp),d0
    1190:	|  |   move.l d0,d1
    1192:	|  |   addq.l #2,d1
    1194:	|  |   move.l d1,16(sp)
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w 14(sp),(a0)
    reg +=2;
    119e:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    11a2:	|  |   move.l 10(sp),d1
    11a6:	|  |   move.l d1,d0
    11a8:	|  |   addq.l #2,d0
    11aa:	|  |   move.l d0,10(sp)
    11ae:	|  |   move.l 16(sp),d0
    11b2:	|  |   move.l d0,d2
    11b4:	|  |   addq.l #2,d2
    11b6:	|  |   move.l d2,16(sp)
    11ba:	|  |   movea.l d1,a0
    11bc:	|  |   move.w (a0),d1
    11be:	|  |   movea.l d0,a0
    11c0:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11c2:	|  |   addq.l #1,6(sp)
    11c6:	|  \-> moveq #31,d0
    11c8:	|      cmp.l 6(sp),d0
    11cc:	\----- bge.s 118c <CstDisplayBackDrop+0x72>
  }
}
    11ce:	       nop
    11d0:	       nop
    11d2:	       move.l (sp)+,d2
    11d4:	       lea 28(sp),sp
    11d8:	       rts

000011da <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    11da:	    move.w 1902a <CstApplyBackDropCounter>,d0
    11e0:	/-- ble.s 11f6 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    11e2:	|   jsr 111a <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    11e8:	|   move.w 1902a <CstApplyBackDropCounter>,d0
    11ee:	|   subq.w #1,d0
    11f0:	|   move.w d0,1902a <CstApplyBackDropCounter>
  }    
}
    11f6:	\-> nop
    11f8:	    rts

000011fa <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11fa:	             lea -140(sp),sp
    11fe:	             movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    1202:	             pea 1499d <cursors.c.412ac4f3+0x115>
    1208:	             jsr 13da6 <KPrintF>
    120e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1210:	             move.l 160(sp),-(sp)
    1214:	             jsr 6bc <get2bytes>
    121a:	             addq.l #4,sp
    121c:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    1220:	             move.l 160(sp),-(sp)
    1224:	             jsr 6bc <get2bytes>
    122a:	             addq.l #4,sp
    122c:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    1230:	             move.w 130(sp),d0
    1234:	             lsr.w #3,d0
    1236:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    123a:	             move.w 126(sp),d0
    123e:	             lsr.w #1,d0
    1240:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1244:	             move.l 1903c <winWidth>,d0
    124a:	             lsr.l #3,d0
    124c:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1250:	             move.w 126(sp),d0
    1254:	             muls.w 128(sp),d0
    1258:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    125c:	             move.w 120(sp),d1
    1260:	             move.w d1,d0
    1262:	             add.w d0,d0
    1264:	             add.w d0,d0
    1266:	             move.w d0,d2
    1268:	             add.w d1,d2
    126a:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    126e:	             move.w 1901c <CstPaletteLoaded>,d0
    1274:	/----------- bne.s 12ec <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    1276:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    127c:	|            moveq #64,d0
    127e:	|            move.l d0,112(sp)
    1282:	|            clr.l 108(sp)
    1286:	|            move.l 190e8 <SysBase>,d0
    128c:	|            movea.l d0,a6
    128e:	|            move.l 112(sp),d0
    1292:	|            move.l 108(sp),d1
    1296:	|            jsr -684(a6)
    129a:	|            move.l d0,104(sp)
    129e:	|            move.l 104(sp),d0
    12a2:	|            move.l d0,19038 <CstPalette>
    CstPaletteLoaded = 1;
    12a8:	|            move.w #1,1901c <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    12b0:	|            move.l 19038 <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12b8:	|            clr.l 148(sp)
    12bc:	|        /-- bra.s 12e2 <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    12be:	|     /--|-> move.l 160(sp),-(sp)
    12c2:	|     |  |   jsr 6bc <get2bytes>
    12c8:	|     |  |   addq.l #4,sp
    12ca:	|     |  |   move.l d0,d1
    12cc:	|     |  |   move.l 152(sp),d0
    12d0:	|     |  |   move.l d0,d2
    12d2:	|     |  |   addq.l #2,d2
    12d4:	|     |  |   move.l d2,152(sp)
    12d8:	|     |  |   move.l d1,d1
    12da:	|     |  |   movea.l d0,a0
    12dc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12de:	|     |  |   addq.l #1,148(sp)
    12e2:	|     |  \-> moveq #31,d0
    12e4:	|     |      cmp.l 148(sp),d0
    12e8:	|     \----- bge.s 12be <CstLoadBackdrop+0xc4>
    12ea:	|  /-------- bra.s 130a <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12ec:	\--|-------> clr.l 144(sp)
    12f0:	   |     /-- bra.s 1302 <CstLoadBackdrop+0x108>
      get2bytes(fp);
    12f2:	   |  /--|-> move.l 160(sp),-(sp)
    12f6:	   |  |  |   jsr 6bc <get2bytes>
    12fc:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12fe:	   |  |  |   addq.l #1,144(sp)
    1302:	   |  |  \-> moveq #31,d2
    1304:	   |  |      cmp.l 144(sp),d2
    1308:	   |  \----- bge.s 12f2 <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    130a:	   \-------> moveq #0,d0
    130c:	             move.w 118(sp),d0
    1310:	             move.l d0,100(sp)
    1314:	             moveq #2,d0
    1316:	             move.l d0,96(sp)
    131a:	             move.l 190e8 <SysBase>,d0
    1320:	             movea.l d0,a6
    1322:	             move.l 100(sp),d0
    1326:	             move.l 96(sp),d1
    132a:	             jsr -684(a6)
    132e:	             move.l d0,92(sp)
    1332:	             move.l 92(sp),d0
    1336:	             move.l d0,88(sp)
   UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    133a:	             moveq #0,d0
    133c:	             move.w 120(sp),d0
    1340:	             move.l d0,84(sp)
    1344:	             moveq #2,d2
    1346:	             move.l d2,80(sp)
    134a:	             move.l 190e8 <SysBase>,d0
    1350:	             movea.l d0,a6
    1352:	             move.l 84(sp),d0
    1356:	             move.l 80(sp),d1
    135a:	             jsr -684(a6)
    135e:	             move.l d0,76(sp)
    1362:	             move.l 76(sp),d0
    1366:	             move.l d0,72(sp)

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    136a:	             move.w 128(sp),d0
    136e:	             movea.w d0,a1
    1370:	             move.w 130(sp),d0
    1374:	             movea.w d0,a0
    1376:	             clr.l -(sp)
    1378:	             pea 5 <_start+0x5>
    137c:	             move.l a1,-(sp)
    137e:	             move.l a0,-(sp)
    1380:	             pea 149cc <cursors.c.412ac4f3+0x144>
    1386:	             move.l 108(sp),-(sp)
    138a:	             jsr 13e8e <debug_register_bitmap>
    1390:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1394:	             move.w 128(sp),d0
    1398:	             movea.w d0,a1
    139a:	             move.w 130(sp),d0
    139e:	             movea.w d0,a0
    13a0:	             clr.l -(sp)
    13a2:	             pea 1 <_start+0x1>
    13a6:	             move.l a1,-(sp)
    13a8:	             move.l a0,-(sp)
    13aa:	             pea 149da <cursors.c.412ac4f3+0x152>
    13b0:	             move.l 108(sp),-(sp)
    13b4:	             jsr 13e8e <debug_register_bitmap>
    13ba:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    13be:	             move.l 160(sp),68(sp)
    13c4:	             move.l 88(sp),64(sp)
    13ca:	             moveq #2,d0
    13cc:	             move.l d0,60(sp)
    13d0:	             move.w 118(sp),d0
    13d4:	             lsr.w #1,d0
    13d6:	             move.w d0,d0
    13d8:	             andi.l #65535,d0
    13de:	             move.l d0,56(sp)
    13e2:	             move.l 190f0 <DOSBase>,d0
    13e8:	             movea.l d0,a6
    13ea:	             move.l 68(sp),d1
    13ee:	             move.l 64(sp),d2
    13f2:	             move.l 60(sp),d3
    13f6:	             move.l 56(sp),d4
    13fa:	             jsr -324(a6)
    13fe:	             move.l d0,52(sp)
    1402:	             move.l 52(sp),d0
    1406:	             move.w d0,50(sp)
  if(!count) {
    140a:	         /-- bne.s 141e <CstLoadBackdrop+0x224>
    KPrintF("Error while reading stream");
    140c:	         |   pea 149e6 <cursors.c.412ac4f3+0x15e>
    1412:	         |   jsr 13da6 <KPrintF>
    1418:	         |   addq.l #4,sp
    return;
    141a:	   /-----|-- bra.w 15fe <CstLoadBackdrop+0x404>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    141e:	   |     \-> move.l 160(sp),46(sp)
    1424:	   |         move.l 72(sp),42(sp)
    142a:	   |         moveq #2,d2
    142c:	   |         move.l d2,38(sp)
    1430:	   |         move.w 120(sp),d0
    1434:	   |         lsr.w #1,d0
    1436:	   |         move.w d0,d0
    1438:	   |         andi.l #65535,d0
    143e:	   |         move.l d0,34(sp)
    1442:	   |         move.l 190f0 <DOSBase>,d0
    1448:	   |         movea.l d0,a6
    144a:	   |         move.l 46(sp),d1
    144e:	   |         move.l 42(sp),d2
    1452:	   |         move.l 38(sp),d3
    1456:	   |         move.l 34(sp),d4
    145a:	   |         jsr -324(a6)
    145e:	   |         move.l d0,30(sp)
    1462:	   |         move.l 30(sp),d0
    1466:	   |         move.w d0,50(sp)
   

  if(!count) {
    146a:	   |     /-- bne.s 147e <CstLoadBackdrop+0x284>
    KPrintF("Error while reading stream");
    146c:	   |     |   pea 149e6 <cursors.c.412ac4f3+0x15e>
    1472:	   |     |   jsr 13da6 <KPrintF>
    1478:	   |     |   addq.l #4,sp
    return;
    147a:	   +-----|-- bra.w 15fe <CstLoadBackdrop+0x404>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    147e:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1486:	   |         move.l 19022 <CstBackDrop>,d0
    148c:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1490:	   |         move.l 168(sp),d0
    1494:	   |         move.w d0,d1
    1496:	   |         muls.w 122(sp),d1
    149a:	   |         move.l 164(sp),d0
    149e:	   |     /-- bpl.s 14a2 <CstLoadBackdrop+0x2a8>
    14a0:	   |     |   addq.l #7,d0
    14a2:	   |     \-> asr.l #3,d0
    14a4:	   |         move.l d0,d0
    14a6:	   |         movea.w d1,a0
    14a8:	   |         adda.w d0,a0
    14aa:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    14ae:	   |         moveq #0,d0
    14b0:	   |         move.w 24(sp),d0
    14b4:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    14b8:	   |         pea 14a01 <cursors.c.412ac4f3+0x179>
    14be:	   |         jsr 13da6 <KPrintF>
    14c4:	   |         addq.l #4,sp


  WaitBlit();
    14c6:	   |         move.l 190f4 <GfxBase>,d0
    14cc:	   |         movea.l d0,a6
    14ce:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    14d2:	   |         movea.l 26(sp),a0
    14d6:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    14dc:	   |         movea.l 26(sp),a0
    14e0:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    14e6:	   |         movea.l 26(sp),a0
    14ea:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    14f0:	   |         movea.l 26(sp),a0
    14f4:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    14fa:	   |         move.w 122(sp),d0
    14fe:	   |         sub.w 126(sp),d0
    1502:	   |         movea.l 26(sp),a0
    1506:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    150a:	   |         move.w 122(sp),d0
    150e:	   |         sub.w 126(sp),d0
    1512:	   |         movea.l 26(sp),a0
    1516:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    151a:	   |         movea.l 26(sp),a0
    151e:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1524:	   |         movea.l 26(sp),a0
    1528:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    152e:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1534:	   |         clr.l 132(sp)
    1538:	   |     /-- bra.s 159a <CstLoadBackdrop+0x3a0>
  {    
    custom->bltapt = (APTR) tmpmask;
    153a:	   |  /--|-> movea.l 26(sp),a0
    153e:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1544:	   |  |  |   move.l 136(sp),d0
    1548:	   |  |  |   movea.l 26(sp),a0
    154c:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1550:	   |  |  |   move.l 140(sp),d0
    1554:	   |  |  |   movea.l 26(sp),a0
    1558:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    155c:	   |  |  |   move.l 140(sp),d0
    1560:	   |  |  |   movea.l 26(sp),a0
    1564:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1568:	   |  |  |   move.w 128(sp),d0
    156c:	   |  |  |   lsl.w #6,d0
    156e:	   |  |  |   add.w 124(sp),d0
    1572:	   |  |  |   movea.l 26(sp),a0
    1576:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    157a:	   |  |  |   moveq #0,d0
    157c:	   |  |  |   move.w 120(sp),d0
    1580:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    1584:	   |  |  |   move.w 19020 <CstBackdropSizePlane>,d0
    158a:	   |  |  |   move.w d0,d0
    158c:	   |  |  |   andi.l #65535,d0
    1592:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1596:	   |  |  |   addq.l #1,132(sp)
    159a:	   |  |  \-> moveq #4,d0
    159c:	   |  |      cmp.l 132(sp),d0
    15a0:	   |  \----- bge.s 153a <CstLoadBackdrop+0x340>
  }    

  WaitBlit();
    15a2:	   |         move.l 190f4 <GfxBase>,d0
    15a8:	   |         movea.l d0,a6
    15aa:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    15ae:	   |         pea 14a20 <cursors.c.412ac4f3+0x198>
    15b4:	   |         jsr 13da6 <KPrintF>
    15ba:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    15bc:	   |         move.l 88(sp),20(sp)
    15c2:	   |         move.l 190e8 <SysBase>,d0
    15c8:	   |         movea.l d0,a6
    15ca:	   |         movea.l 20(sp),a1
    15ce:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    15d2:	   |         move.l 72(sp),16(sp)
    15d8:	   |         move.l 190e8 <SysBase>,d0
    15de:	   |         movea.l d0,a6
    15e0:	   |         movea.l 16(sp),a1
    15e4:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    15e8:	   |         move.w #2,1902a <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    15f0:	   |         pea 14a40 <cursors.c.412ac4f3+0x1b8>
    15f6:	   |         jsr 13da6 <KPrintF>
    15fc:	   |         addq.l #4,sp

}
    15fe:	   \-------> movem.l (sp)+,d2-d4/a6
    1602:	             lea 140(sp),sp
    1606:	             rts

00001608 <CstScaleSprite>:

ULONG test = 0;

void CstScaleSprite( struct sprite *single, UWORD x, UWORD y)
{
    1608:	       lea -36(sp),sp
    160c:	       move.l a6,-(sp)
    160e:	       move.l d2,-(sp)
    1610:	       move.l 52(sp),d1
    1614:	       move.l 56(sp),d0
    1618:	       move.w d1,d1
    161a:	       move.w d1,10(sp)
    161e:	       move.w d0,d0
    1620:	       move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1624:	       move.l #14675968,24(sp)

  WaitBlit();
    162c:	       move.l 190f4 <GfxBase>,d0
    1632:	       movea.l d0,a6
    1634:	       jsr -228(a6)

  UWORD wordx = x >> 3; //Get Bytes
    1638:	       move.w 10(sp),d0
    163c:	       lsr.w #3,d0
    163e:	       move.w d0,22(sp)
  UWORD modwordx = x - (wordx << 3);
    1642:	       move.w 22(sp),d0
    1646:	       lsl.w #3,d0
    1648:	       move.w 10(sp),d1
    164c:	       sub.w d0,d1
    164e:	       move.w d1,20(sp)
  UWORD bltwidthsprite = (single->width >> 4);
    1652:	       movea.l 48(sp),a0
    1656:	       move.l (a0),d0
    1658:	       asr.l #4,d0
    165a:	       move.w d0,18(sp)
  UWORD widthbytesbackdrop = winWidth >> 3;
    165e:	       move.l 1903c <winWidth>,d0
    1664:	       lsr.l #3,d0
    1666:	       move.w d0,16(sp)

  bltwidthsprite += 1; //Extra word needs to be written because of shift
    166a:	       addq.w #1,18(sp)
  custom->bltafwm = 0xffff;
    166e:	       movea.l 24(sp),a0
    1672:	       move.w #-1,68(a0)
  custom->bltalwm = 0x0; //Mask out Last Word of Achannel
    1678:	       movea.l 24(sp),a0
    167c:	       move.w #0,70(a0)
  custom->bltamod = -2; //Word is used for next line instead     
    1682:	       movea.l 24(sp),a0
    1686:	       move.w #-2,100(a0)
  custom->bltbmod = -2; //Word is used for next line instead   
    168c:	       movea.l 24(sp),a0
    1690:	       move.w #-2,98(a0)
  custom->bltcmod = widthbytesbackdrop - bltwidthsprite*2;
    1696:	       move.w 18(sp),d0
    169a:	       add.w d0,d0
    169c:	       move.w d0,d1
    169e:	       move.w 16(sp),d0
    16a2:	       sub.w d1,d0
    16a4:	       movea.l 24(sp),a0
    16a8:	       move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - bltwidthsprite*2;   
    16ac:	       move.w 18(sp),d0
    16b0:	       add.w d0,d0
    16b2:	       move.w d0,d1
    16b4:	       move.w 16(sp),d0
    16b8:	       sub.w d1,d0
    16ba:	       movea.l 24(sp),a0
    16be:	       move.w d0,102(a0)


  custom->bltcon0 = 0xfca + (modwordx << 12); // Cookie Cut and Shift of Mask
    16c2:	       move.w 20(sp),d0
    16c6:	       moveq #12,d2
    16c8:	       lsl.w d2,d0
    16ca:	       addi.w #4042,d0
    16ce:	       movea.l 24(sp),a0
    16d2:	       move.w d0,64(a0)
  custom->bltcon1 = (modwordx << 12);
    16d6:	       move.w 20(sp),d0
    16da:	       moveq #12,d1
    16dc:	       lsl.w d1,d0
    16de:	       movea.l 24(sp),a0
    16e2:	       move.w d0,66(a0)

  ULONG bltapt = ((ULONG) single->data) + (single->width >> 3)*single->height*5;
    16e6:	       movea.l 48(sp),a0
    16ea:	       move.l 24(a0),d0
    16ee:	       move.l d0,d2
    16f0:	       movea.l 48(sp),a0
    16f4:	       move.l (a0),d0
    16f6:	       asr.l #3,d0
    16f8:	       movea.l 48(sp),a0
    16fc:	       move.l 4(a0),d1
    1700:	       move.l d1,-(sp)
    1702:	       move.l d0,-(sp)
    1704:	       jsr 14764 <__mulsi3>
    170a:	       addq.l #8,sp
    170c:	       move.l d0,d1
    170e:	       move.l d1,d0
    1710:	       add.l d0,d0
    1712:	       add.l d0,d0
    1714:	       add.l d1,d0
    1716:	       move.l d2,d1
    1718:	       add.l d0,d1
    171a:	       move.l d1,12(sp)
  ULONG bltbpt =  (ULONG) single->data;
    171e:	       movea.l 48(sp),a0
    1722:	       move.l 24(a0),d0
    1726:	       move.l d0,40(sp)
  ULONG bltcpt = ((ULONG) CstBackDrop) + y*widthbytesbackdrop + wordx;
    172a:	       moveq #0,d0
    172c:	       move.w 8(sp),d0
    1730:	       moveq #0,d1
    1732:	       move.w 16(sp),d1
    1736:	       move.l d1,-(sp)
    1738:	       move.l d0,-(sp)
    173a:	       jsr 14764 <__mulsi3>
    1740:	       addq.l #8,sp
    1742:	       move.l d0,d1
    1744:	       move.l 19022 <CstBackDrop>,d0
    174a:	       add.l d0,d1
    174c:	       moveq #0,d0
    174e:	       move.w 22(sp),d0
    1752:	       move.l d1,d2
    1754:	       add.l d0,d2
    1756:	       move.l d2,36(sp)
  ULONG bltdpt = ((ULONG) CstDrawBuffer) + y*widthbytesbackdrop + wordx;
    175a:	       moveq #0,d0
    175c:	       move.w 8(sp),d0
    1760:	       moveq #0,d1
    1762:	       move.w 16(sp),d1
    1766:	       move.l d1,-(sp)
    1768:	       move.l d0,-(sp)
    176a:	       jsr 14764 <__mulsi3>
    1770:	       addq.l #8,sp
    1772:	       move.l d0,d1
    1774:	       move.l 19030 <CstDrawBuffer>,d0
    177a:	       add.l d0,d1
    177c:	       moveq #0,d0
    177e:	       move.w 22(sp),d0
    1782:	       move.l d1,d2
    1784:	       add.l d0,d2
    1786:	       move.l d2,32(sp)
 
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    178a:	       clr.l 28(sp)
    178e:	   /-- bra.w 1842 <CstScaleSprite+0x23a>
  {
    custom->bltapt = (APTR) bltapt;
    1792:	/--|-> move.l 12(sp),d0
    1796:	|  |   movea.l 24(sp),a0
    179a:	|  |   move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    179e:	|  |   move.l 40(sp),d0
    17a2:	|  |   movea.l 24(sp),a0
    17a6:	|  |   move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    17aa:	|  |   move.l 36(sp),d0
    17ae:	|  |   movea.l 24(sp),a0
    17b2:	|  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    17b6:	|  |   move.l 32(sp),d0
    17ba:	|  |   movea.l 24(sp),a0
    17be:	|  |   move.l d0,84(a0)
    custom->bltsize = (single->height << 6) + bltwidthsprite;
    17c2:	|  |   movea.l 48(sp),a0
    17c6:	|  |   move.l 4(a0),d0
    17ca:	|  |   move.l d0,d0
    17cc:	|  |   lsl.w #6,d0
    17ce:	|  |   add.w 18(sp),d0
    17d2:	|  |   movea.l 24(sp),a0
    17d6:	|  |   move.w d0,88(a0)
    bltbpt += (single->width >> 3)*single->height;
    17da:	|  |   movea.l 48(sp),a0
    17de:	|  |   move.l (a0),d0
    17e0:	|  |   asr.l #3,d0
    17e2:	|  |   movea.l 48(sp),a0
    17e6:	|  |   move.l 4(a0),d1
    17ea:	|  |   move.l d1,-(sp)
    17ec:	|  |   move.l d0,-(sp)
    17ee:	|  |   jsr 14764 <__mulsi3>
    17f4:	|  |   addq.l #8,sp
    17f6:	|  |   add.l d0,40(sp)
    bltcpt += widthbytesbackdrop*winHeight;
    17fa:	|  |   moveq #0,d0
    17fc:	|  |   move.w 16(sp),d0
    1800:	|  |   move.l 19040 <winHeight>,d1
    1806:	|  |   move.l d1,-(sp)
    1808:	|  |   move.l d0,-(sp)
    180a:	|  |   jsr 14764 <__mulsi3>
    1810:	|  |   addq.l #8,sp
    1812:	|  |   add.l d0,36(sp)
    bltdpt += widthbytesbackdrop*winHeight;
    1816:	|  |   moveq #0,d0
    1818:	|  |   move.w 16(sp),d0
    181c:	|  |   move.l 19040 <winHeight>,d1
    1822:	|  |   move.l d1,-(sp)
    1824:	|  |   move.l d0,-(sp)
    1826:	|  |   jsr 14764 <__mulsi3>
    182c:	|  |   addq.l #8,sp
    182e:	|  |   add.l d0,32(sp)
    WaitBlit();
    1832:	|  |   move.l 190f4 <GfxBase>,d0
    1838:	|  |   movea.l d0,a6
    183a:	|  |   jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    183e:	|  |   addq.l #1,28(sp)
    1842:	|  \-> moveq #4,d0
    1844:	|      cmp.l 28(sp),d0
    1848:	\----- bge.w 1792 <CstScaleSprite+0x18a>
  } 
}
    184c:	       nop
    184e:	       nop
    1850:	       move.l (sp)+,d2
    1852:	       movea.l (sp)+,a6
    1854:	       lea 36(sp),sp
    1858:	       rts

0000185a <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    185a:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    185c:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    1862:	move.l 8(sp),d0
    1866:	movea.l (sp),a0
    1868:	move.l d0,128(a0)
}
    186c:	nop
    186e:	addq.l #4,sp
    1870:	rts

00001872 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    1872:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    1876:	move.l 1902c <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    187e:	move.l 19030 <CstDrawBuffer>,d0
    1884:	move.l d0,1902c <CstViewBuffer>
  CstDrawBuffer = tmp;
    188a:	move.l 12(sp),19030 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    1892:	move.l 19026 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    189a:	move.l 1902c <CstViewBuffer>,d0
    18a0:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    18a4:	move.l 4(sp),d0
    18a8:	clr.w d0
    18aa:	swap d0
    18ac:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    18b0:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    18b4:	movea.w #118,a0
    18b8:	adda.l 8(sp),a0
    18bc:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    18be:	movea.w #114,a0
    18c2:	adda.l 8(sp),a0
    18c6:	move.w 2(sp),(a0)

  ptr +=  40*256;
    18ca:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    18d2:	move.l 4(sp),d0
    18d6:	clr.w d0
    18d8:	swap d0
    18da:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    18de:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    18e2:	movea.w #126,a0
    18e6:	adda.l 8(sp),a0
    18ea:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    18ec:	movea.w #122,a0
    18f0:	adda.l 8(sp),a0
    18f4:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    18f8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1900:	move.l 4(sp),d0
    1904:	clr.w d0
    1906:	swap d0
    1908:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    190c:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1910:	movea.l 8(sp),a0
    1914:	lea 134(a0),a0
    1918:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    191a:	movea.l 8(sp),a0
    191e:	lea 130(a0),a0
    1922:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1926:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    192e:	move.l 4(sp),d0
    1932:	clr.w d0
    1934:	swap d0
    1936:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    193a:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    193e:	movea.l 8(sp),a0
    1942:	lea 142(a0),a0
    1946:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    1948:	movea.l 8(sp),a0
    194c:	lea 138(a0),a0
    1950:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1954:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    195c:	move.l 4(sp),d0
    1960:	clr.w d0
    1962:	swap d0
    1964:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1968:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    196c:	movea.l 8(sp),a0
    1970:	lea 150(a0),a0
    1974:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    1976:	movea.l 8(sp),a0
    197a:	lea 146(a0),a0
    197e:	move.w 2(sp),(a0)

}
    1982:	nop
    1984:	lea 16(sp),sp
    1988:	rts

0000198a <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    198a:	          lea -44(sp),sp
    198e:	          move.l a6,-(sp)

  width = width / 8;
    1990:	          move.l 52(sp),d0
    1994:	      /-- bpl.s 1998 <CstReserveBackdrop+0xe>
    1996:	      |   addq.l #7,d0
    1998:	      \-> asr.l #3,d0
    199a:	          move.l d0,52(sp)

  if( width < 40) 
    199e:	          moveq #39,d0
    19a0:	          cmp.l 52(sp),d0
    19a4:	      /-- blt.s 19ba <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    19a6:	      |   pea 14a5a <cursors.c.412ac4f3+0x1d2>
    19ac:	      |   jsr 13da6 <KPrintF>
    19b2:	      |   addq.l #4,sp
    return FALSE;
    19b4:	      |   clr.w d0
    19b6:	/-----|-- bra.w 1bb4 <CstReserveBackdrop+0x22a>
  }  

  CstCopperList = CstCreateCopperlist( width);
    19ba:	|     \-> move.l 52(sp),-(sp)
    19be:	|         jsr f40 <CstCreateCopperlist>
    19c4:	|         addq.l #4,sp
    19c6:	|         move.l d0,19026 <CstCopperList>
  CstBackdropSizePlane = width*height;
    19cc:	|         move.l 52(sp),d1
    19d0:	|         move.l 56(sp),d0
    19d4:	|         muls.w d1,d0
    19d6:	|         move.w d0,19020 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    19dc:	|         move.w 19020 <CstBackdropSizePlane>,d1
    19e2:	|         move.w d1,d0
    19e4:	|         add.w d0,d0
    19e6:	|         add.w d0,d0
    19e8:	|         add.w d1,d0
    19ea:	|         move.w d0,1901e <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    19f0:	|         move.w 1901e <CstBackdropSize>,d0
    19f6:	|         move.w d0,d0
    19f8:	|         andi.l #65535,d0
    19fe:	|         move.l d0,36(sp)
    1a02:	|         moveq #2,d1
    1a04:	|         move.l d1,32(sp)
    1a08:	|         move.l 190e8 <SysBase>,d0
    1a0e:	|         movea.l d0,a6
    1a10:	|         move.l 36(sp),d0
    1a14:	|         move.l 32(sp),d1
    1a18:	|         jsr -684(a6)
    1a1c:	|         move.l d0,28(sp)
    1a20:	|         move.l 28(sp),d0
    1a24:	|         move.l d0,19022 <CstBackDrop>
  if( !CstBackDrop)
    1a2a:	|         move.l 19022 <CstBackDrop>,d0
    1a30:	|     /-- bne.s 1a46 <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    1a32:	|     |   pea 14a98 <cursors.c.412ac4f3+0x210>
    1a38:	|     |   jsr 13da6 <KPrintF>
    1a3e:	|     |   addq.l #4,sp
    return FALSE;  
    1a40:	|     |   clr.w d0
    1a42:	+-----|-- bra.w 1bb4 <CstReserveBackdrop+0x22a>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    1a46:	|     \-> move.l 19022 <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1a4e:	|         clr.l 40(sp)
    1a52:	|     /-- bra.s 1a68 <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    1a54:	|  /--|-> move.l 44(sp),d0
    1a58:	|  |  |   move.l d0,d1
    1a5a:	|  |  |   addq.l #4,d1
    1a5c:	|  |  |   move.l d1,44(sp)
    1a60:	|  |  |   movea.l d0,a0
    1a62:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1a64:	|  |  |   addq.l #1,40(sp)
    1a68:	|  |  \-> move.w 1901e <CstBackdropSize>,d0
    1a6e:	|  |      lsr.w #2,d0
    1a70:	|  |      move.w d0,d0
    1a72:	|  |      andi.l #65535,d0
    1a78:	|  |      cmp.l 40(sp),d0
    1a7c:	|  \----- bgt.s 1a54 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1a7e:	|         move.w 1901e <CstBackdropSize>,d0
    1a84:	|         move.w d0,d0
    1a86:	|         andi.l #65535,d0
    1a8c:	|         move.l d0,24(sp)
    1a90:	|         moveq #2,d0
    1a92:	|         move.l d0,20(sp)
    1a96:	|         move.l 190e8 <SysBase>,d0
    1a9c:	|         movea.l d0,a6
    1a9e:	|         move.l 24(sp),d0
    1aa2:	|         move.l 20(sp),d1
    1aa6:	|         jsr -684(a6)
    1aaa:	|         move.l d0,16(sp)
    1aae:	|         move.l 16(sp),d0
    1ab2:	|         move.l d0,19030 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1ab8:	|         move.w 1901e <CstBackdropSize>,d0
    1abe:	|         move.w d0,d0
    1ac0:	|         andi.l #65535,d0
    1ac6:	|         move.l d0,12(sp)
    1aca:	|         moveq #2,d1
    1acc:	|         move.l d1,8(sp)
    1ad0:	|         move.l 190e8 <SysBase>,d0
    1ad6:	|         movea.l d0,a6
    1ad8:	|         move.l 12(sp),d0
    1adc:	|         move.l 8(sp),d1
    1ae0:	|         jsr -684(a6)
    1ae4:	|         move.l d0,4(sp)
    1ae8:	|         move.l 4(sp),d0
    1aec:	|         move.l d0,1902c <CstViewBuffer>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    1af2:	|         move.l 19022 <CstBackDrop>,d0
    1af8:	|         clr.l -(sp)
    1afa:	|         pea 5 <_start+0x5>
    1afe:	|         pea 100 <copyString+0x48>
    1b02:	|         pea 140 <decodeFilename+0x28>
    1b06:	|         pea 14ad0 <cursors.c.412ac4f3+0x248>
    1b0c:	|         move.l d0,-(sp)
    1b0e:	|         jsr 13e8e <debug_register_bitmap>
    1b14:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    1b18:	|         move.l 56(sp),d0
    1b1c:	|         movea.w d0,a1
    1b1e:	|         move.l 52(sp),d0
    1b22:	|         lsl.w #3,d0
    1b24:	|         movea.w d0,a0
    1b26:	|         move.l 19030 <CstDrawBuffer>,d0
    1b2c:	|         clr.l -(sp)
    1b2e:	|         pea 5 <_start+0x5>
    1b32:	|         move.l a1,-(sp)
    1b34:	|         move.l a0,-(sp)
    1b36:	|         pea 14ae0 <cursors.c.412ac4f3+0x258>
    1b3c:	|         move.l d0,-(sp)
    1b3e:	|         jsr 13e8e <debug_register_bitmap>
    1b44:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    1b48:	|         move.l 56(sp),d0
    1b4c:	|         movea.w d0,a1
    1b4e:	|         move.l 52(sp),d0
    1b52:	|         lsl.w #3,d0
    1b54:	|         movea.w d0,a0
    1b56:	|         move.l 1902c <CstViewBuffer>,d0
    1b5c:	|         clr.l -(sp)
    1b5e:	|         pea 5 <_start+0x5>
    1b62:	|         move.l a1,-(sp)
    1b64:	|         move.l a0,-(sp)
    1b66:	|         pea 14aef <cursors.c.412ac4f3+0x267>
    1b6c:	|         move.l d0,-(sp)
    1b6e:	|         jsr 13e8e <debug_register_bitmap>
    1b74:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1b78:	|         move.l 19026 <CstCopperList>,d0
    1b7e:	|     /-- beq.s 1b90 <CstReserveBackdrop+0x206>
    1b80:	|     |   move.l 19030 <CstDrawBuffer>,d0
    1b86:	|     +-- beq.s 1b90 <CstReserveBackdrop+0x206>
    1b88:	|     |   move.l 1902c <CstViewBuffer>,d0
    1b8e:	|  /--|-- bne.s 1ba2 <CstReserveBackdrop+0x218>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1b90:	|  |  \-> pea 14afe <cursors.c.412ac4f3+0x276>
    1b96:	|  |      jsr 13da6 <KPrintF>
    1b9c:	|  |      addq.l #4,sp
    return FALSE;
    1b9e:	|  |      clr.w d0
    1ba0:	+--|----- bra.s 1bb4 <CstReserveBackdrop+0x22a>
  }

  CstSetCl( CstCopperList);
    1ba2:	|  \----> move.l 19026 <CstCopperList>,d0
    1ba8:	|         move.l d0,-(sp)
    1baa:	|         jsr 185a <CstSetCl>
    1bb0:	|         addq.l #4,sp
  return TRUE;
    1bb2:	|         moveq #1,d0

}
    1bb4:	\-------> movea.l (sp)+,a6
    1bb6:	          lea 44(sp),sp
    1bba:	          rts

00001bbc <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1bbc:	    lea -12(sp),sp
    1bc0:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1bc2:	    move.l 19030 <CstDrawBuffer>,d0
    1bc8:	/-- beq.s 1be2 <CstFreeBuffer+0x26>
    1bca:	|   move.l 19030 <CstDrawBuffer>,12(sp)
    1bd2:	|   move.l 190e8 <SysBase>,d0
    1bd8:	|   movea.l d0,a6
    1bda:	|   movea.l 12(sp),a1
    1bde:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1be2:	\-> move.l 1902c <CstViewBuffer>,d0
    1be8:	/-- beq.s 1c02 <CstFreeBuffer+0x46>
    1bea:	|   move.l 1902c <CstViewBuffer>,8(sp)
    1bf2:	|   move.l 190e8 <SysBase>,d0
    1bf8:	|   movea.l d0,a6
    1bfa:	|   movea.l 8(sp),a1
    1bfe:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c02:	\-> move.l 19026 <CstCopperList>,d0
    1c08:	/-- beq.s 1c22 <CstFreeBuffer+0x66>
    1c0a:	|   move.l 19026 <CstCopperList>,4(sp)
    1c12:	|   move.l 190e8 <SysBase>,d0
    1c18:	|   movea.l d0,a6
    1c1a:	|   movea.l 4(sp),a1
    1c1e:	|   jsr -690(a6)
}
    1c22:	\-> nop
    1c24:	    movea.l (sp)+,a6
    1c26:	    lea 12(sp),sp
    1c2a:	    rts

00001c2c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    1c2c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    1c30:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    1c34:	       tst.l 24(sp)
    1c38:	   /-- bge.s 1c3e <drawLine+0x12>
    1c3a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    1c3e:	   \-> tst.l 28(sp)
    1c42:	   /-- bge.s 1c48 <drawLine+0x1c>
    1c44:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    1c48:	   \-> tst.l 32(sp)
    1c4c:	   /-- bge.s 1c52 <drawLine+0x26>
    1c4e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    1c52:	   \-> tst.l 36(sp)
    1c56:	   /-- bge.s 1c5c <drawLine+0x30>
    1c58:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    1c5c:	   \-> move.l 191d8 <sceneWidth>,d0
    1c62:	       cmp.l 24(sp),d0
    1c66:	   /-- bge.s 1c76 <drawLine+0x4a>
    1c68:	   |   move.l 191d8 <sceneWidth>,d0
    1c6e:	   |   move.l d0,d1
    1c70:	   |   subq.l #1,d1
    1c72:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    1c76:	   \-> move.l 191d8 <sceneWidth>,d0
    1c7c:	       cmp.l 32(sp),d0
    1c80:	   /-- bge.s 1c90 <drawLine+0x64>
    1c82:	   |   move.l 191d8 <sceneWidth>,d0
    1c88:	   |   move.l d0,d1
    1c8a:	   |   subq.l #1,d1
    1c8c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    1c90:	   \-> move.l 191dc <sceneHeight>,d0
    1c96:	       cmp.l 28(sp),d0
    1c9a:	   /-- bge.s 1caa <drawLine+0x7e>
    1c9c:	   |   move.l 191dc <sceneHeight>,d0
    1ca2:	   |   move.l d0,d1
    1ca4:	   |   subq.l #1,d1
    1ca6:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1caa:	   \-> move.l 191dc <sceneHeight>,d0
    1cb0:	       cmp.l 36(sp),d0
    1cb4:	   /-- bge.s 1cc4 <drawLine+0x98>
    1cb6:	   |   move.l 191dc <sceneHeight>,d0
    1cbc:	   |   move.l d0,d1
    1cbe:	   |   subq.l #1,d1
    1cc0:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    1cc4:	   \-> move.l 24(sp),d0
    1cc8:	       cmp.l 32(sp),d0
    1ccc:	/----- ble.s 1ce8 <drawLine+0xbc>
		x = x2; 
    1cce:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    1cd4:	|      tst.w 10(sp)
    1cd8:	|      seq d0
    1cda:	|      neg.b d0
    1cdc:	|      move.b d0,d0
    1cde:	|      andi.w #255,d0
    1ce2:	|      move.w d0,10(sp)
    1ce6:	|  /-- bra.s 1cee <drawLine+0xc2>
	} else x = x1;
    1ce8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    1cee:	   \-> move.l 28(sp),d1
    1cf2:	       cmp.l 36(sp),d1
    1cf6:	/----- ble.s 1d12 <drawLine+0xe6>
		y = y2; 
    1cf8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    1cfe:	|      tst.w 10(sp)
    1d02:	|      seq d0
    1d04:	|      neg.b d0
    1d06:	|      move.b d0,d0
    1d08:	|      andi.w #255,d0
    1d0c:	|      move.w d0,10(sp)
    1d10:	|  /-- bra.s 1d18 <drawLine+0xec>
	} else y = y1;	
    1d12:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    1d18:	   \-> move.l 32(sp),d0
    1d1c:	       sub.l 24(sp),d0
    1d20:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    1d24:	       move.l 6(sp),d0
    1d28:	   /-- bpl.s 1d2c <drawLine+0x100>
    1d2a:	   |   neg.l d0
    1d2c:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    1d30:	       move.l 36(sp),d1
    1d34:	       sub.l 28(sp),d1
    1d38:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    1d3c:	       move.l 2(sp),d0
    1d40:	   /-- bpl.s 1d44 <drawLine+0x118>
    1d42:	   |   neg.l d0
    1d44:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    1d48:	       tst.l 6(sp)
    1d4c:	   /-- bne.s 1d70 <drawLine+0x144>
		diffX = 1;
    1d4e:	   |   moveq #1,d0
    1d50:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1d54:	   |   move.l 191d8 <sceneWidth>,d0
    1d5a:	   |   subq.l #1,d0
    1d5c:	   |   cmp.l 16(sp),d0
    1d60:	   +-- bne.s 1d70 <drawLine+0x144>
    1d62:	   |   move.l 191d8 <sceneWidth>,d0
    1d68:	   |   move.l d0,d1
    1d6a:	   |   subq.l #2,d1
    1d6c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1d70:	   \-> tst.l 2(sp)
    1d74:	   /-- bne.s 1d98 <drawLine+0x16c>
		diffY = 1;
    1d76:	   |   moveq #1,d0
    1d78:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1d7c:	   |   move.l 191dc <sceneHeight>,d0
    1d82:	   |   subq.l #1,d0
    1d84:	   |   cmp.l 12(sp),d0
    1d88:	   +-- bne.s 1d98 <drawLine+0x16c>
    1d8a:	   |   move.l 191dc <sceneHeight>,d0
    1d90:	   |   move.l d0,d1
    1d92:	   |   subq.l #2,d1
    1d94:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1d98:	   \-> pea 14b2b <cursors.c.412ac4f3+0x2a3>
    1d9e:	       jsr 13da6 <KPrintF>
    1da4:	       addq.l #4,sp
	
}
    1da6:	       nop
    1da8:	       lea 20(sp),sp
    1dac:	       rts

00001dae <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1dae:	                      lea -24(sp),sp
    1db2:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1db4:	                      move.l 19044 <firstTexture>,d0
    1dba:	/-------------------- beq.w 1e98 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1dbe:	|                     clr.l 24(sp)
    1dc2:	|     /-------------- bra.w 1e8c <deleteTextures+0xde>
			BOOL found = FALSE;
    1dc6:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1dca:	|  |  |               move.l 19044 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    1dd2:	|  |  |               movea.l 20(sp),a0
    1dd6:	|  |  |               move.l (a0),d1
    1dd8:	|  |  |               move.l 24(sp),d0
    1ddc:	|  |  |               add.l d0,d0
    1dde:	|  |  |               add.l d0,d0
    1de0:	|  |  |               movea.l 36(sp),a0
    1de4:	|  |  |               adda.l d0,a0
    1de6:	|  |  |               move.l (a0),d0
    1de8:	|  |  |               cmp.l d1,d0
    1dea:	|  |  |  /----------- bne.w 1e7e <deleteTextures+0xd0>
				found = TRUE;
    1dee:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    1df4:	|  |  |  |            movea.l 20(sp),a0
    1df8:	|  |  |  |            move.l 12(a0),d0
    1dfc:	|  |  |  |            move.l d0,19044 <firstTexture>
				FreeVec(list);
    1e02:	|  |  |  |            move.l 20(sp),6(sp)
    1e08:	|  |  |  |            move.l 190e8 <SysBase>,d0
    1e0e:	|  |  |  |            movea.l d0,a6
    1e10:	|  |  |  |            movea.l 6(sp),a1
    1e14:	|  |  |  |            jsr -690(a6)
				continue;
    1e18:	|  |  |  |  /-------- bra.s 1e88 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1e1a:	|  |  |  |  |  /----> movea.l 20(sp),a0
    1e1e:	|  |  |  |  |  |      movea.l 12(a0),a0
    1e22:	|  |  |  |  |  |      move.l (a0),d1
    1e24:	|  |  |  |  |  |      move.l 24(sp),d0
    1e28:	|  |  |  |  |  |      add.l d0,d0
    1e2a:	|  |  |  |  |  |      add.l d0,d0
    1e2c:	|  |  |  |  |  |      movea.l 36(sp),a0
    1e30:	|  |  |  |  |  |      adda.l d0,a0
    1e32:	|  |  |  |  |  |      move.l (a0),d0
    1e34:	|  |  |  |  |  |      cmp.l d1,d0
    1e36:	|  |  |  |  |  |  /-- bne.s 1e74 <deleteTextures+0xc6>
					found = TRUE;
    1e38:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1e3e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e42:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1e48:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e4c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1e50:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1e54:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e58:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1e5c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1e62:	|  |  |  |  |  |  |   move.l 190e8 <SysBase>,d0
    1e68:	|  |  |  |  |  |  |   movea.l d0,a6
    1e6a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1e6e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1e72:	|  |  |  |  +--|--|-- bra.s 1e88 <deleteTextures+0xda>
				}
				list = list->next;
    1e74:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1e78:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1e7e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1e82:	|  |  |     |  |      move.l 12(a0),d0
    1e86:	|  |  |     |  \----- bne.s 1e1a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1e88:	|  |  |     \-------> addq.l #1,24(sp)
    1e8c:	|  |  \-------------> move.l 24(sp),d0
    1e90:	|  |                  cmp.l 32(sp),d0
    1e94:	|  \----------------- bcs.w 1dc6 <deleteTextures+0x18>
			}
		}
	}
}
    1e98:	\-------------------> nop
    1e9a:	                      movea.l (sp)+,a6
    1e9c:	                      lea 24(sp),sp
    1ea0:	                      rts

00001ea2 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1ea2:	subq.l #4,sp
    1ea4:	move.l 8(sp),d0
    1ea8:	move.w d0,d0
    1eaa:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1eae:	pea 14b4e <cursors.c.412ac4f3+0x2c6>
    1eb4:	jsr 13da6 <KPrintF>
    1eba:	addq.l #4,sp
}
    1ebc:	nop
    1ebe:	addq.l #4,sp
    1ec0:	rts

00001ec2 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1ec2:	       moveq #-1,d0
    1ec4:	       cmp.l 4(sp),d0
    1ec8:	   /-- bne.s 1ece <resourceNameFromNum+0xc>
    1eca:	   |   moveq #0,d0
    1ecc:	/--|-- bra.s 1f06 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1ece:	|  \-> move.l 190c4 <numResourceNames>,d0
    1ed4:	|  /-- bne.s 1ede <resourceNameFromNum+0x1c>
    1ed6:	|  |   move.l #84862,d0
    1edc:	+--|-- bra.s 1f06 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1ede:	|  \-> move.l 190c4 <numResourceNames>,d0
    1ee4:	|      cmp.l 4(sp),d0
    1ee8:	|  /-- ble.s 1f00 <resourceNameFromNum+0x3e>
    1eea:	|  |   move.l 1907c <allResourceNames>,d1
    1ef0:	|  |   move.l 4(sp),d0
    1ef4:	|  |   add.l d0,d0
    1ef6:	|  |   add.l d0,d0
    1ef8:	|  |   movea.l d1,a0
    1efa:	|  |   adda.l d0,a0
    1efc:	|  |   move.l (a0),d0
    1efe:	+--|-- bra.s 1f06 <resourceNameFromNum+0x44>
	return "Unknown resource";
    1f00:	|  \-> move.l #84871,d0
    1f06:	\----> rts

00001f08 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    1f08:	          lea -40(sp),sp
    1f0c:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    1f10:	          move.l #320,1903c <winWidth>
    winHeight = 256;
    1f1a:	          move.l #256,19040 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1f24:	          tst.l 56(sp)
    1f28:	      /-- bne.s 1f40 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1f2a:	      |   pea 14b98 <cursors.c.412ac4f3+0x310>
    1f30:	      |   jsr b8 <copyString>
    1f36:	      |   addq.l #4,sp
    1f38:	      |   move.l d0,19054 <bundleFolder>
    1f3e:	   /--|-- bra.s 1f56 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1f40:	   |  \-> movea.l 60(sp),a0
    1f44:	   |      move.l (a0),d0
    1f46:	   |      move.l d0,-(sp)
    1f48:	   |      jsr b8 <copyString>
    1f4e:	   |      addq.l #4,sp
    1f50:	   |      move.l d0,19054 <bundleFolder>
	}
    
	int lastSlash = -1;
    1f56:	   \----> moveq #-1,d0
    1f58:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1f5c:	          clr.l 40(sp)
    1f60:	   /----- bra.s 1f82 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1f62:	/--|----> move.l 19054 <bundleFolder>,d1
    1f68:	|  |      move.l 40(sp),d0
    1f6c:	|  |      movea.l d1,a0
    1f6e:	|  |      adda.l d0,a0
    1f70:	|  |      move.b (a0),d0
    1f72:	|  |      cmpi.b #47,d0
    1f76:	|  |  /-- bne.s 1f7e <main_sludge+0x76>
    1f78:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1f7e:	|  |  \-> addq.l #1,40(sp)
    1f82:	|  \----> move.l 19054 <bundleFolder>,d1
    1f88:	|         move.l 40(sp),d0
    1f8c:	|         movea.l d1,a0
    1f8e:	|         adda.l d0,a0
    1f90:	|         move.b (a0),d0
    1f92:	\-------- bne.s 1f62 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1f94:	          move.l 19054 <bundleFolder>,d0
    1f9a:	          move.l 44(sp),d1
    1f9e:	          addq.l #1,d1
    1fa0:	          movea.l d0,a0
    1fa2:	          adda.l d1,a0
    1fa4:	          clr.b (a0)

	if (argc > 1) {
    1fa6:	          moveq #1,d0
    1fa8:	          cmp.l 56(sp),d0
    1fac:	      /-- bge.s 1fc8 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1fae:	      |   move.l 56(sp),d0
    1fb2:	      |   addi.l #1073741823,d0
    1fb8:	      |   add.l d0,d0
    1fba:	      |   add.l d0,d0
    1fbc:	      |   movea.l 60(sp),a0
    1fc0:	      |   adda.l d0,a0
    1fc2:	      |   move.l (a0),48(sp)
    1fc6:	   /--|-- bra.s 2022 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1fc8:	   |  \-> move.l 19054 <bundleFolder>,d0
    1fce:	   |      pea 14b9e <cursors.c.412ac4f3+0x316>
    1fd4:	   |      move.l d0,-(sp)
    1fd6:	   |      jsr 1128a <joinStrings>
    1fdc:	   |      addq.l #8,sp
    1fde:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1fe2:	   |      move.l 48(sp),-(sp)
    1fe6:	   |      jsr 11184 <fileExists>
    1fec:	   |      addq.l #4,sp
    1fee:	   |      tst.b d0
    1ff0:	   +----- bne.s 2022 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    1ff2:	   |      move.l 48(sp),36(sp)
    1ff8:	   |      move.l 190e8 <SysBase>,d0
    1ffe:	   |      movea.l d0,a6
    2000:	   |      movea.l 36(sp),a1
    2004:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    2008:	   |      move.l 19054 <bundleFolder>,d0
    200e:	   |      pea 14bab <thumbnail.c.7eb31449+0x6>
    2014:	   |      move.l d0,-(sp)
    2016:	   |      jsr 1128a <joinStrings>
    201c:	   |      addq.l #8,sp
    201e:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    2022:	   \----> pea 14bb4 <thumbnail.c.7eb31449+0xf>
    2028:	          jsr 13da6 <KPrintF>
    202e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    2030:	          move.l 48(sp),-(sp)
    2034:	          jsr 11184 <fileExists>
    203a:	          addq.l #4,sp
    203c:	          tst.b d0
    203e:	      /-- bne.s 2096 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    2040:	      |   move.l 190f0 <DOSBase>,d0
    2046:	      |   movea.l d0,a6
    2048:	      |   jsr -60(a6)
    204c:	      |   move.l d0,28(sp)
    2050:	      |   move.l 28(sp),d0
    2054:	      |   move.l d0,24(sp)
    2058:	      |   move.l #84916,20(sp)
    2060:	      |   moveq #21,d0
    2062:	      |   move.l d0,16(sp)
    2066:	      |   move.l 190f0 <DOSBase>,d0
    206c:	      |   movea.l d0,a6
    206e:	      |   move.l 24(sp),d1
    2072:	      |   move.l 20(sp),d2
    2076:	      |   move.l 16(sp),d3
    207a:	      |   jsr -48(a6)
    207e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    2082:	      |   pea 14bb4 <thumbnail.c.7eb31449+0xf>
    2088:	      |   jsr 13da6 <KPrintF>
    208e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    2090:	      |   moveq #0,d0
    2092:	/-----|-- bra.w 2280 <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    2096:	|     \-> pea 14bca <thumbnail.c.7eb31449+0x25>
    209c:	|         jsr 13da6 <KPrintF>
    20a2:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    20a4:	|         move.l 48(sp),-(sp)
    20a8:	|         jsr 228a <setGameFilePath>
    20ae:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    20b0:	|         move.l 48(sp),-(sp)
    20b4:	|         jsr 35be <initSludge>
    20ba:	|         addq.l #4,sp
    20bc:	|         tst.w d0
    20be:	|     /-- bne.s 20c6 <main_sludge+0x1be>
    20c0:	|     |   moveq #0,d0
    20c2:	+-----|-- bra.w 2280 <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    20c6:	|     \-> move.l 1903c <winWidth>,d0
    20cc:	|         cmpi.l #320,d0
    20d2:	|     /-- bne.s 20e2 <main_sludge+0x1da>
    20d4:	|     |   move.l 19040 <winHeight>,d0
    20da:	|     |   cmpi.l #256,d0
    20e0:	|  /--|-- beq.s 2104 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    20e2:	|  |  \-> pea 14bdb <thumbnail.c.7eb31449+0x36>
    20e8:	|  |      jsr 13da6 <KPrintF>
    20ee:	|  |      addq.l #4,sp
		winWidth = 320;
    20f0:	|  |      move.l #320,1903c <winWidth>
		winHeight = 256;
    20fa:	|  |      move.l #256,19040 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    2104:	|  \----> pea 14c58 <thumbnail.c.7eb31449+0xb3>
    210a:	|         jsr 13da6 <KPrintF>
    2110:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    2112:	|         move.l 19040 <winHeight>,d0
    2118:	|         move.l d0,d1
    211a:	|         move.l 1903c <winWidth>,d0
    2120:	|         move.l d1,-(sp)
    2122:	|         move.l d0,-(sp)
    2124:	|         jsr aa72 <resizeBackdrop>
    212a:	|         addq.l #8,sp
    212c:	|         tst.w d0
    212e:	|     /-- bne.s 2144 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    2130:	|     |   pea 14c6b <thumbnail.c.7eb31449+0xc6>
    2136:	|     |   jsr 13da6 <KPrintF>
    213c:	|     |   addq.l #4,sp
		return FALSE;
    213e:	|     |   moveq #0,d0
    2140:	+-----|-- bra.w 2280 <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    2144:	|     \-> pea 14c91 <thumbnail.c.7eb31449+0xec>
    214a:	|         jsr 13da6 <KPrintF>
    2150:	|         addq.l #4,sp
	if (! initPeople ())
    2152:	|         jsr 8184 <initPeople>
    2158:	|         tst.w d0
    215a:	|     /-- bne.s 2170 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    215c:	|     |   pea 14c9e <thumbnail.c.7eb31449+0xf9>
    2162:	|     |   jsr 13da6 <KPrintF>
    2168:	|     |   addq.l #4,sp
		return FALSE;
    216a:	|     |   moveq #0,d0
    216c:	+-----|-- bra.w 2280 <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    2170:	|     \-> pea 14cbf <thumbnail.c.7eb31449+0x11a>
    2176:	|         jsr 13da6 <KPrintF>
    217c:	|         addq.l #4,sp
	if (! initFloor ())
    217e:	|         jsr 1315c <initFloor>
    2184:	|         tst.w d0
    2186:	|     /-- bne.s 219c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    2188:	|     |   pea 14ccb <thumbnail.c.7eb31449+0x126>
    218e:	|     |   jsr 13da6 <KPrintF>
    2194:	|     |   addq.l #4,sp
		
		return FALSE;
    2196:	|     |   moveq #0,d0
    2198:	+-----|-- bra.w 2280 <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    219c:	|     \-> pea 14ceb <custom.c.177df80b+0x12>
    21a2:	|         jsr 13da6 <KPrintF>
    21a8:	|         addq.l #4,sp
	if (! initObjectTypes ())
    21aa:	|         jsr ac2e <initObjectTypes>
    21b0:	|         tst.w d0
    21b2:	|     /-- bne.s 21c8 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    21b4:	|     |   pea 14cfc <custom.c.177df80b+0x23>
    21ba:	|     |   jsr 13da6 <KPrintF>
    21c0:	|     |   addq.l #4,sp
		return FALSE;
    21c2:	|     |   moveq #0,d0
    21c4:	+-----|-- bra.w 2280 <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    21c8:	|     \-> pea 14d22 <custom.c.177df80b+0x49>
    21ce:	|         jsr 13da6 <KPrintF>
    21d4:	|         addq.l #4,sp
	initSpeech ();
    21d6:	|         jsr 5988 <initSpeech>
	KPrintF("Init status bar\n");
    21dc:	|         pea 14d2f <custom.c.177df80b+0x56>
    21e2:	|         jsr 13da6 <KPrintF>
    21e8:	|         addq.l #4,sp
	initStatusBar ();
    21ea:	|         jsr 544c <initStatusBar>

	KPrintF("Get numbered string\n");
    21f0:	|         pea 14d40 <custom.c.177df80b+0x67>
    21f6:	|         jsr 13da6 <KPrintF>
    21fc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    21fe:	|         pea 1 <_start+0x1>
    2202:	|         jsr 476a <getNumberedString>
    2208:	|         addq.l #4,sp
    220a:	|         move.l d0,1904c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    2210:	|         pea 14d55 <custom.c.177df80b+0x7c>
    2216:	|         jsr 13da6 <KPrintF>
    221c:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    221e:	|         move.l 190b8 <noStack>,d0
    2224:	|         pea 1 <_start+0x1>
    2228:	|         move.l d0,-(sp)
    222a:	|         clr.l -(sp)
    222c:	|         clr.l -(sp)
    222e:	|         clr.l -(sp)
    2230:	|         jsr 45f2 <startNewFunctionNum>
    2236:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    223a:	|         pea 14d6d <custom.c.177df80b+0x94>
    2240:	|         jsr 13da6 <KPrintF>
    2246:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    2248:	|         clr.l 19058 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    224e:	|     /-- bra.s 2262 <main_sludge+0x35a>
		sludgeDisplay ();
    2250:	|  /--|-> jsr 4598 <sludgeDisplay>
		handleInput();
    2256:	|  |  |   jsr 35b6 <handleInput>
		WaitVbl();
    225c:	|  |  |   jsr 13cda <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    2262:	|  |  \-> move.l 19058 <weAreDoneSoQuit>,d0
    2268:	|  \----- beq.s 2250 <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    226a:	|         move.l 48(sp),32(sp)
    2270:	|         move.l 190e8 <SysBase>,d0
    2276:	|         movea.l d0,a6
    2278:	|         movea.l 32(sp),a1
    227c:	|         jsr -690(a6)
}
    2280:	\-------> movem.l (sp)+,d2-d3/a6
    2284:	          lea 40(sp),sp
    2288:	          rts

0000228a <setGameFilePath>:

void setGameFilePath (char * f) {
    228a:	          lea -1104(sp),sp
    228e:	          move.l a6,-(sp)
    2290:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    2292:	          move.l #1112,d0
    2298:	          add.l sp,d0
    229a:	          addi.l #-1102,d0
    22a0:	          move.l d0,1100(sp)
    22a4:	          move.l #998,1096(sp)
    22ac:	          move.l 190f0 <DOSBase>,d0
    22b2:	          movea.l d0,a6
    22b4:	          move.l 1100(sp),d1
    22b8:	          move.l 1096(sp),d2
    22bc:	          jsr -564(a6)
    22c0:	          move.w d0,1094(sp)
    22c4:	          move.w 1094(sp),d0
    22c8:	      /-- bne.s 22d8 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    22ca:	      |   pea 14d80 <custom.c.177df80b+0xa7>
    22d0:	      |   jsr 13da6 <KPrintF>
    22d6:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    22d8:	      \-> moveq #-1,d0
    22da:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    22de:	          clr.l 1104(sp)
    22e2:	   /----- bra.s 2300 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    22e4:	/--|----> move.l 1104(sp),d0
    22e8:	|  |      movea.l 1116(sp),a0
    22ec:	|  |      adda.l d0,a0
    22ee:	|  |      move.b (a0),d0
    22f0:	|  |      cmpi.b #47,d0
    22f4:	|  |  /-- bne.s 22fc <setGameFilePath+0x72>
    22f6:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    22fc:	|  |  \-> addq.l #1,1104(sp)
    2300:	|  \----> move.l 1104(sp),d0
    2304:	|         movea.l 1116(sp),a0
    2308:	|         adda.l d0,a0
    230a:	|         move.b (a0),d0
    230c:	\-------- bne.s 22e4 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    230e:	          moveq #-1,d0
    2310:	          cmp.l 1108(sp),d0
    2314:	   /----- beq.s 238e <setGameFilePath+0x104>
		f[got] = 0;	
    2316:	   |      move.l 1108(sp),d0
    231a:	   |      movea.l 1116(sp),a0
    231e:	   |      adda.l d0,a0
    2320:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2322:	   |      move.l 1116(sp),1090(sp)
    2328:	   |      moveq #-2,d0
    232a:	   |      move.l d0,1086(sp)
    232e:	   |      move.l 190f0 <DOSBase>,d0
    2334:	   |      movea.l d0,a6
    2336:	   |      move.l 1090(sp),d1
    233a:	   |      move.l 1086(sp),d2
    233e:	   |      jsr -84(a6)
    2342:	   |      move.l d0,1082(sp)
    2346:	   |      move.l 1082(sp),d0
    234a:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    234e:	   |      move.l 1078(sp),1074(sp)
    2354:	   |      move.l 190f0 <DOSBase>,d0
    235a:	   |      movea.l d0,a6
    235c:	   |      move.l 1074(sp),d1
    2360:	   |      jsr -126(a6)
    2364:	   |      move.l d0,1070(sp)
    2368:	   |      move.l 1070(sp),d0
    236c:	   |  /-- bne.s 2380 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    236e:	   |  |   move.l 1116(sp),-(sp)
    2372:	   |  |   pea 14da6 <custom.c.177df80b+0xcd>
    2378:	   |  |   jsr 13da6 <KPrintF>
    237e:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    2380:	   |  \-> move.l 1108(sp),d0
    2384:	   |      movea.l 1116(sp),a0
    2388:	   |      adda.l d0,a0
    238a:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    238e:	   \----> move.l #400,1066(sp)
    2396:	          clr.l 1062(sp)
    239a:	          move.l 190e8 <SysBase>,d0
    23a0:	          movea.l d0,a6
    23a2:	          move.l 1066(sp),d0
    23a6:	          move.l 1062(sp),d1
    23aa:	          jsr -684(a6)
    23ae:	          move.l d0,1058(sp)
    23b2:	          move.l 1058(sp),d0
    23b6:	          move.l d0,19050 <gamePath>
	if (gamePath==0) {
    23bc:	          move.l 19050 <gamePath>,d0
    23c2:	      /-- bne.s 23d6 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    23c4:	      |   pea 14dd9 <custom.c.177df80b+0x100>
    23ca:	      |   jsr 13da6 <KPrintF>
    23d0:	      |   addq.l #4,sp
    23d2:	   /--|-- bra.w 24be <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    23d6:	   |  \-> move.l 19050 <gamePath>,1054(sp)
    23de:	   |      moveq #-2,d0
    23e0:	   |      move.l d0,1050(sp)
    23e4:	   |      move.l 190f0 <DOSBase>,d0
    23ea:	   |      movea.l d0,a6
    23ec:	   |      move.l 1054(sp),d1
    23f0:	   |      move.l 1050(sp),d2
    23f4:	   |      jsr -84(a6)
    23f8:	   |      move.l d0,1046(sp)
    23fc:	   |      move.l 1046(sp),d0
    2400:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2404:	   |      move.l 1042(sp),1038(sp)
    240a:	   |      move.l 190f0 <DOSBase>,d0
    2410:	   |      movea.l d0,a6
    2412:	   |      move.l 1038(sp),d1
    2416:	   |      jsr -126(a6)
    241a:	   |      move.l d0,1034(sp)
    241e:	   |      move.l 1034(sp),d0
    2422:	   |  /-- bne.s 2432 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2424:	   |  |   pea 14e14 <custom.c.177df80b+0x13b>
    242a:	   |  |   jsr 13da6 <KPrintF>
    2430:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2432:	   |  \-> move.l #1112,d0
    2438:	   |      add.l sp,d0
    243a:	   |      addi.l #-1102,d0
    2440:	   |      move.l d0,1030(sp)
    2444:	   |      moveq #-2,d0
    2446:	   |      move.l d0,1026(sp)
    244a:	   |      move.l 190f0 <DOSBase>,d0
    2450:	   |      movea.l d0,a6
    2452:	   |      move.l 1030(sp),d1
    2456:	   |      move.l 1026(sp),d2
    245a:	   |      jsr -84(a6)
    245e:	   |      move.l d0,1022(sp)
    2462:	   |      move.l 1022(sp),d0
    2466:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    246a:	   |      move.l 1042(sp),1018(sp)
    2470:	   |      move.l 190f0 <DOSBase>,d0
    2476:	   |      movea.l d0,a6
    2478:	   |      move.l 1018(sp),d1
    247c:	   |      jsr -126(a6)
    2480:	   |      move.l d0,1014(sp)
    2484:	   |      move.l 1014(sp),d0
    2488:	   |  /-- bne.s 249e <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    248a:	   |  |   moveq #10,d0
    248c:	   |  |   add.l sp,d0
    248e:	   |  |   move.l d0,-(sp)
    2490:	   |  |   pea 14e40 <custom.c.177df80b+0x167>
    2496:	   |  |   jsr 13da6 <KPrintF>
    249c:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    249e:	   |  \-> move.l 19050 <gamePath>,d0
    24a4:	   +----- beq.s 24be <setGameFilePath+0x234>
    24a6:	   |      move.l 19050 <gamePath>,1010(sp)
    24ae:	   |      move.l 190e8 <SysBase>,d0
    24b4:	   |      movea.l d0,a6
    24b6:	   |      movea.l 1010(sp),a1
    24ba:	   |      jsr -690(a6)
}
    24be:	   \----> move.l (sp)+,d2
    24c0:	          movea.l (sp)+,a6
    24c2:	          lea 1104(sp),sp
    24c6:	          rts

000024c8 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    24c8:	/-------> lea -16(sp),sp
    24cc:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    24ce:	|         move.l 24(sp),-(sp)
    24d2:	|         jsr 437a <pauseFunction>
    24d8:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    24da:	|     /-- bra.s 24ec <abortFunction+0x24>
    24dc:	|  /--|-> moveq #24,d0
    24de:	|  |  |   add.l 24(sp),d0
    24e2:	|  |  |   move.l d0,-(sp)
    24e4:	|  |  |   jsr 126e2 <trimStack>
    24ea:	|  |  |   addq.l #4,sp
    24ec:	|  |  \-> movea.l 24(sp),a0
    24f0:	|  |      move.l 24(a0),d0
    24f4:	|  \----- bne.s 24dc <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    24f6:	|         movea.l 24(sp),a0
    24fa:	|         move.l 4(a0),12(sp)
    2500:	|         move.l 190e8 <SysBase>,d0
    2506:	|         movea.l d0,a6
    2508:	|         movea.l 12(sp),a1
    250c:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2510:	|         clr.l 16(sp)
    2514:	|     /-- bra.s 2534 <abortFunction+0x6c>
    2516:	|  /--|-> movea.l 24(sp),a0
    251a:	|  |  |   move.l 20(a0),d1
    251e:	|  |  |   move.l 16(sp),d0
    2522:	|  |  |   lsl.l #3,d0
    2524:	|  |  |   add.l d1,d0
    2526:	|  |  |   move.l d0,-(sp)
    2528:	|  |  |   jsr 11fac <unlinkVar>
    252e:	|  |  |   addq.l #4,sp
    2530:	|  |  |   addq.l #1,16(sp)
    2534:	|  |  \-> movea.l 24(sp),a0
    2538:	|  |      move.l 8(a0),d0
    253c:	|  |      cmp.l 16(sp),d0
    2540:	|  \----- bgt.s 2516 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2542:	|         movea.l 24(sp),a0
    2546:	|         move.l 20(a0),8(sp)
    254c:	|         move.l 190e8 <SysBase>,d0
    2552:	|         movea.l d0,a6
    2554:	|         movea.l 8(sp),a1
    2558:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    255c:	|         moveq #28,d0
    255e:	|         add.l 24(sp),d0
    2562:	|         move.l d0,-(sp)
    2564:	|         jsr 11fac <unlinkVar>
    256a:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    256c:	|         movea.l 24(sp),a0
    2570:	|         move.l 40(a0),d0
    2574:	|     /-- beq.s 2586 <abortFunction+0xbe>
    2576:	|     |   movea.l 24(sp),a0
    257a:	|     |   move.l 40(a0),d0
    257e:	|     |   move.l d0,-(sp)
    2580:	\-----|-- jsr 24c8 <abortFunction>(pc)
    2584:	      |   addq.l #4,sp
	FreeVec(fun);
    2586:	      \-> move.l 24(sp),4(sp)
    258c:	          move.l 190e8 <SysBase>,d0
    2592:	          movea.l d0,a6
    2594:	          movea.l 4(sp),a1
    2598:	          jsr -690(a6)
	fun = NULL;
    259c:	          clr.l 24(sp)
}
    25a0:	          nop
    25a2:	          movea.l (sp)+,a6
    25a4:	          lea 16(sp),sp
    25a8:	          rts

000025aa <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    25aa:	          subq.l #8,sp
	int n = 0;
    25ac:	          clr.l 4(sp)
	*killedMyself = FALSE;
    25b0:	          movea.l 20(sp),a0
    25b4:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    25b6:	          move.l 19080 <allRunningFunctions>,(sp)
	while (fun) {
    25bc:	   /----- bra.s 25ea <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    25be:	/--|----> movea.l (sp),a0
    25c0:	|  |      move.l (a0),d0
    25c2:	|  |      cmp.l 12(sp),d0
    25c6:	|  |  /-- bne.s 25e4 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    25c8:	|  |  |   movea.l (sp),a0
    25ca:	|  |  |   move.w #1,54(a0)
			n++;
    25d0:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    25d4:	|  |  |   move.l (sp),d0
    25d6:	|  |  |   cmp.l 16(sp),d0
    25da:	|  |  +-- bne.s 25e4 <cancelAFunction+0x3a>
    25dc:	|  |  |   movea.l 20(sp),a0
    25e0:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    25e4:	|  |  \-> movea.l (sp),a0
    25e6:	|  |      move.l 44(a0),(sp)
	while (fun) {
    25ea:	|  \----> tst.l (sp)
    25ec:	\-------- bne.s 25be <cancelAFunction+0x14>
	}
	return n;
    25ee:	          move.l 4(sp),d0
}
    25f2:	          addq.l #8,sp
    25f4:	          rts

000025f6 <completeTimers>:


void completeTimers () {
    25f6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    25f8:	          move.l 19080 <allRunningFunctions>,(sp)

	while (thisFunction) {
    25fe:	   /----- bra.s 2614 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2600:	/--|----> movea.l (sp),a0
    2602:	|  |      move.b 56(a0),d0
    2606:	|  |  /-- bne.s 260e <completeTimers+0x18>
    2608:	|  |  |   movea.l (sp),a0
    260a:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    260e:	|  |  \-> movea.l (sp),a0
    2610:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2614:	|  \----> tst.l (sp)
    2616:	\-------- bne.s 2600 <completeTimers+0xa>
	}
}
    2618:	          nop
    261a:	          nop
    261c:	          addq.l #4,sp
    261e:	          rts

00002620 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2620:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2624:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    262a:	                                                             movea.l 80(sp),a0
    262e:	                                                             move.w 54(a0),d0
    2632:	/----------------------------------------------------------- beq.w 34d2 <continueFunction+0xeb2>
		abortFunction (fun);
    2636:	|                                                            move.l 80(sp),-(sp)
    263a:	|                                                            jsr 24c8 <abortFunction>
    2640:	|                                                            addq.l #4,sp
		return TRUE;
    2642:	|                                                            moveq #1,d0
    2644:	|  /-------------------------------------------------------- bra.w 34dc <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2648:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    264e:	|  |  |                                                      movea.l 80(sp),a0
    2652:	|  |  |                                                      move.l 4(a0),d1
    2656:	|  |  |                                                      movea.l 80(sp),a0
    265a:	|  |  |                                                      move.l 36(a0),d0
    265e:	|  |  |                                                      lsl.l #3,d0
    2660:	|  |  |                                                      movea.l d1,a0
    2662:	|  |  |                                                      adda.l d0,a0
    2664:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    266a:	|  |  |                                                      movea.l 80(sp),a0
    266e:	|  |  |                                                      move.l 4(a0),d1
    2672:	|  |  |                                                      movea.l 80(sp),a0
    2676:	|  |  |                                                      move.l 36(a0),d0
    267a:	|  |  |                                                      lsl.l #3,d0
    267c:	|  |  |                                                      movea.l d1,a0
    267e:	|  |  |                                                      adda.l d0,a0
    2680:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2684:	|  |  |                                                      move.l 64(sp),-(sp)
    2688:	|  |  |                                                      pea 14f48 <custom.c.177df80b+0x26f>
    268e:	|  |  |                                                      jsr 13da6 <KPrintF>
    2694:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2696:	|  |  |                                                      moveq #41,d0
    2698:	|  |  |                                                      cmp.l 64(sp),d0
    269c:	|  |  |  /-------------------------------------------------- bcs.w 3486 <continueFunction+0xe66>
    26a0:	|  |  |  |                                                   move.l 64(sp),d0
    26a4:	|  |  |  |                                                   add.l d0,d0
    26a6:	|  |  |  |                                                   movea.l d0,a0
    26a8:	|  |  |  |                                                   adda.l #9908,a0
    26ae:	|  |  |  |                                                   move.w (a0),d0
    26b0:	|  |  |  |                                                   jmp (26b4 <continueFunction+0x94>,pc,d0.w)
    26b4:	|  |  |  |                                                   bset d6,(a2)
    26b6:	|  |  |  |                                                   ori.w #2670,(a4)
    26ba:	|  |  |  |                                                   eori.w #2416,d6
    26be:	|  |  |  |                                                   bchg d4,d2
    26c0:	|  |  |  |                                                   bclr d4,(a4)+
    26c2:	|  |  |  |                                                   andi.l #181013194,d4
    26c8:	|  |  |  |                                                   .short 0x0aca
    26ca:	|  |  |  |                                                   .short 0x0aca
    26cc:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    26d4:	|  |  |  |                                                   .short 0x0aca
    26d6:	|  |  |  |                                                   andi.w #906,-(a4)
    26da:	|  |  |  |                                                   bchg d1,196(a2)
    26de:	|  |  |  |                                                   bset d1,580(a4)
    26e2:	|  |  |  |                                                   bclr d1,2576(a2)
    26e6:	|  |  |  |                                                   andi.b #-56,2762(a2)
    26ec:	|  |  |  |                                                   .short 0x0aca
    26ee:	|  |  |  |                                                   eori.l #63572682,d0
    26f4:	|  |  |  |                                                   .short 0x0aca
    26f6:	|  |  |  |                                                   bchg d3,-(a2)
    26f8:	|  |  |  |                                                   bchg #-36,(a2)
    26fc:	|  |  |  |                                                   .short 0x08cc
    26fe:	|  |  |  |                                                   addi.b #14,1038(a0)
    2704:	|  |  |  |                                                   .short 0x040e
    2706:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    270a:	|  |  |  |                                                   ori.w #8232,(a0)
    270e:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2714:	|  |  |  |                                                   ori.w #12136,(a0)
    2718:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    271e:	|  |  |  |                                                   ori.w #12328,(a0)
    2722:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    2728:	|  |  |  |                                                   add.l 44(sp),d1
    272c:	|  |  |  |                                                   moveq #28,d0
    272e:	|  |  |  |                                                   add.l 80(sp),d0
    2732:	|  |  |  |                                                   move.l d1,-(sp)
    2734:	|  |  |  |                                                   move.l d0,-(sp)
    2736:	|  |  |  |                                                   jsr 12218 <copyVariable>
    273c:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    273e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2742:	|  |  |  |                                                   jsr 34e2 <finishFunction>
    2748:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    274a:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2750:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2754:	|  |  |  |                                                   jsr 43bc <restartFunction>
    275a:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    275c:	|  |  |  |  /----------------------------------------------- bra.w 34ba <continueFunction+0xe9a>
				finishFunction (fun);
    2760:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    2764:	|  |  |  |  |                                                jsr 34e2 <finishFunction>
    276a:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    276c:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    2770:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    2774:	|  |  |  |  +----------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2778:	|  |  |  |  |                                                movea.l 80(sp),a0
    277c:	|  |  |  |  |                                                move.l 28(a0),d0
    2780:	|  |  |  |  |                                                moveq #2,d1
    2782:	|  |  |  |  |                                                cmp.l d0,d1
    2784:	|  |  |  |  |                                            /-- beq.s 2790 <continueFunction+0x170>
    2786:	|  |  |  |  |                                            |   moveq #4,d1
    2788:	|  |  |  |  |                                            |   cmp.l d0,d1
    278a:	|  |  |  |  |                                         /--|-- beq.s 27de <continueFunction+0x1be>
    278c:	|  |  |  |  |                                /--------|--|-- bra.w 28c6 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    2790:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2794:	|  |  |  |  |                                |        |      jsr 437a <pauseFunction>
    279a:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    279c:	|  |  |  |  |                                |        |      moveq #24,d0
    279e:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    27a2:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    27a6:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    27aa:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    27ae:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    27b0:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    27b4:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    27b8:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    27ba:	|  |  |  |  |                                |        |      jsr 45f2 <startNewFunctionNum>
    27c0:	|  |  |  |  |                                |        |      lea 20(sp),sp
    27c4:	|  |  |  |  |                                |        |      tst.l d0
    27c6:	|  |  |  |  |                                |        |  /-- bne.s 27ce <continueFunction+0x1ae>
    27c8:	|  |  |  |  |                                |        |  |   clr.w d0
    27ca:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 34dc <continueFunction+0xebc>
				fun = allRunningFunctions;
    27ce:	|  |  |  |  |                                |        |  \-> move.l 19080 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    27d6:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    27da:	|  |  |  |  |                                |  /-----|----- bra.w 28da <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    27de:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    27e2:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    27e6:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    27ea:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    27ee:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    27f0:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    27f2:	|  |  |  |  |                                |  |            jsr 10a40 <callBuiltIn>
    27f8:	|  |  |  |  |                                |  |            lea 12(sp),sp
    27fc:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2800:	|  |  |  |  |                                |  |            moveq #5,d0
    2802:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2806:	|  |  |  |  |                                |  |  /-------- bcs.w 28c2 <continueFunction+0x2a2>
    280a:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    280e:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2810:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2812:	|  |  |  |  |                                |  |  |         adda.l #10270,a0
    2818:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    281a:	|  |  |  |  |                                |  |  |         jmp (281e <continueFunction+0x1fe>,pc,d0.w)
    281e:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    2824:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    2828:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    282e:	|  |  |  |  |                                |  |  |         .short 0x4f5c
    2830:	|  |  |  |  |                                |  |  |         jsr 13da6 <KPrintF>
    2836:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    2838:	|  |  |  |  |                                |  |  |         clr.w d0
    283a:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 34dc <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    283e:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    2842:	|  |  |  |  |                                |  |  |         jsr 437a <pauseFunction>
    2848:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    284a:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    284e:	|  |  |  |  |                                |  |  |  /----- bra.s 28c4 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2850:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    2854:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    2858:	|  |  |  |  |                                |  |  |  +----- bra.s 28c4 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    285a:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    285e:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    2864:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    2866:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    286a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    286e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2872:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2874:	|  |  |  |  |                                |  |  |  |      jsr 12650 <setVariable>
    287a:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    287e:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    2882:	|  |  |  |  |                                |  |  |  |      jsr 437a <pauseFunction>
    2888:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    288a:	|  |  |  |  |                                |  |  |  |      move.l 190b8 <noStack>,d1
    2890:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2894:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2896:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2898:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    289c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    289e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    28a0:	|  |  |  |  |                                |  |  |  |      jsr 45f2 <startNewFunctionNum>
    28a6:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    28aa:	|  |  |  |  |                                |  |  |  |      tst.l d0
    28ac:	|  |  |  |  |                                |  |  |  |  /-- bne.s 28b4 <continueFunction+0x294>
    28ae:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    28b0:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 34dc <continueFunction+0xebc>
							fun = allRunningFunctions;
    28b4:	|  |  |  |  |                                |  |  |  |  \-> move.l 19080 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    28bc:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    28c0:	|  |  |  |  |                                |  |  |  +----- bra.s 28c4 <continueFunction+0x2a4>

						default:
						break;
    28c2:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    28c4:	|  |  |  |  |                                |  +-----\----X bra.s 28da <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    28c6:	|  |  |  |  |                                \--|----------> pea 14fa7 <custom.c.177df80b+0x2ce>
    28cc:	|  |  |  |  |                                   |            jsr 13da6 <KPrintF>
    28d2:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    28d4:	|  |  |  |  |                                   |            clr.w d0
    28d6:	|  +--|--|--|-----------------------------------|----------- bra.w 34dc <continueFunction+0xebc>
			}
			break;
    28da:	|  |  |  |  +-----------------------------------\----------X bra.w 34ba <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    28de:	|  |  |  |  |                                                moveq #28,d0
    28e0:	|  |  |  |  |                                                add.l 80(sp),d0
    28e4:	|  |  |  |  |                                                clr.l -(sp)
    28e6:	|  |  |  |  |                                                clr.l -(sp)
    28e8:	|  |  |  |  |                                                move.l d0,-(sp)
    28ea:	|  |  |  |  |                                                jsr 12650 <setVariable>
    28f0:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    28f4:	|  |  |  |  +----------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    28f8:	|  |  |  |  |                                                move.l 68(sp),d1
    28fc:	|  |  |  |  |                                                moveq #28,d0
    28fe:	|  |  |  |  |                                                add.l 80(sp),d0
    2902:	|  |  |  |  |                                                move.l d1,-(sp)
    2904:	|  |  |  |  |                                                pea 5 <_start+0x5>
    2908:	|  |  |  |  |                                                move.l d0,-(sp)
    290a:	|  |  |  |  |                                                jsr 12650 <setVariable>
    2910:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2914:	|  |  |  |  +----------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    2918:	|  |  |  |  |                                                move.l 68(sp),d1
    291c:	|  |  |  |  |                                                moveq #28,d0
    291e:	|  |  |  |  |                                                add.l 80(sp),d0
    2922:	|  |  |  |  |                                                move.l d1,-(sp)
    2924:	|  |  |  |  |                                                pea 1 <_start+0x1>
    2928:	|  |  |  |  |                                                move.l d0,-(sp)
    292a:	|  |  |  |  |                                                jsr 12650 <setVariable>
    2930:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2934:	|  |  |  |  +----------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    2938:	|  |  |  |  |                                                moveq #28,d0
    293a:	|  |  |  |  |                                                add.l 80(sp),d0
    293e:	|  |  |  |  |                                                movea.l 80(sp),a0
    2942:	|  |  |  |  |                                                movea.l 20(a0),a0
    2946:	|  |  |  |  |                                                move.l 68(sp),d1
    294a:	|  |  |  |  |                                                lsl.l #3,d1
    294c:	|  |  |  |  |                                                add.l a0,d1
    294e:	|  |  |  |  |                                                move.l d0,-(sp)
    2950:	|  |  |  |  |                                                move.l d1,-(sp)
    2952:	|  |  |  |  |                                                jsr 12218 <copyVariable>
    2958:	|  |  |  |  |                                                addq.l #8,sp
    295a:	|  |  |  |  |                                                tst.w d0
    295c:	|  |  |  |  |  /-------------------------------------------- bne.w 3498 <continueFunction+0xe78>
    2960:	|  |  |  |  |  |                                             clr.w d0
    2962:	|  +--|--|--|--|-------------------------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    2966:	|  |  |  |  |  |                                             moveq #28,d0
    2968:	|  |  |  |  |  |                                             add.l 80(sp),d0
    296c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    296e:	|  |  |  |  |  |                                             jsr 1229e <getBoolean>
    2974:	|  |  |  |  |  |                                             addq.l #4,sp
    2976:	|  |  |  |  |  |                                             tst.w d0
    2978:	|  |  |  |  |  |                                      /----- beq.s 2994 <continueFunction+0x374>
    297a:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    297e:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    2982:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2984:	|  |  |  |  |  |                                      |      jsr 1229e <getBoolean>
    298a:	|  |  |  |  |  |                                      |      addq.l #4,sp
    298c:	|  |  |  |  |  |                                      |      tst.w d0
    298e:	|  |  |  |  |  |                                      +----- beq.s 2994 <continueFunction+0x374>
    2990:	|  |  |  |  |  |                                      |      moveq #1,d0
    2992:	|  |  |  |  |  |                                      |  /-- bra.s 2996 <continueFunction+0x376>
    2994:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2996:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2998:	|  |  |  |  |  |                                             add.l 80(sp),d1
    299c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    299e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    29a2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    29a4:	|  |  |  |  |  |                                             jsr 12650 <setVariable>
    29aa:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    29ae:	|  |  |  |  |  |                                             moveq #24,d0
    29b0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29b4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29b6:	|  |  |  |  |  |                                             jsr 126e2 <trimStack>
    29bc:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    29be:	|  |  |  |  +--|-------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    29c2:	|  |  |  |  |  |                                             moveq #28,d0
    29c4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29c8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29ca:	|  |  |  |  |  |                                             jsr 1229e <getBoolean>
    29d0:	|  |  |  |  |  |                                             addq.l #4,sp
    29d2:	|  |  |  |  |  |                                             tst.w d0
    29d4:	|  |  |  |  |  |                                         /-- bne.s 29ec <continueFunction+0x3cc>
    29d6:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    29da:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    29de:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    29e0:	|  |  |  |  |  |                                         |   jsr 1229e <getBoolean>
    29e6:	|  |  |  |  |  |                                         |   addq.l #4,sp
    29e8:	|  |  |  |  |  |                                         |   tst.w d0
    29ea:	|  |  |  |  |  |                                      /--|-- beq.s 29f0 <continueFunction+0x3d0>
    29ec:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    29ee:	|  |  |  |  |  |                                      |  /-- bra.s 29f2 <continueFunction+0x3d2>
    29f0:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    29f2:	|  |  |  |  |  |                                         \-> moveq #28,d1
    29f4:	|  |  |  |  |  |                                             add.l 80(sp),d1
    29f8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29fa:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    29fe:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a00:	|  |  |  |  |  |                                             jsr 12650 <setVariable>
    2a06:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2a0a:	|  |  |  |  |  |                                             moveq #24,d0
    2a0c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a10:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a12:	|  |  |  |  |  |                                             jsr 126e2 <trimStack>
    2a18:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2a1a:	|  |  |  |  +--|-------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2a1e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a22:	|  |  |  |  |  |                                             moveq #28,d0
    2a24:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a28:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a2a:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2a2e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a30:	|  |  |  |  |  |                                             jsr 12650 <setVariable>
    2a36:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a3a:	|  |  |  |  +--|-------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2a3e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a42:	|  |  |  |  |  |                                             moveq #28,d0
    2a44:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a48:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a4a:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2a4e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a50:	|  |  |  |  |  |                                             jsr 12650 <setVariable>
    2a56:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a5a:	|  |  |  |  +--|-------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2a5e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a62:	|  |  |  |  |  |                                             moveq #28,d0
    2a64:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a68:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a6a:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2a6e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a70:	|  |  |  |  |  |                                             jsr 12650 <setVariable>
    2a76:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a7a:	|  |  |  |  +--|-------------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2a7e:	|  |  |  |  |  |                                             move.l 19048 <dialogValue>,d0
    2a84:	|  |  |  |  |  |                                             moveq #1,d1
    2a86:	|  |  |  |  |  |                                             cmp.l d0,d1
    2a88:	|  |  |  |  |  |  /----------------------------------------- beq.w 349c <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    2a8c:	|  |  |  |  |  |  |                                          pea 14fbc <custom.c.177df80b+0x2e3>
    2a92:	|  |  |  |  |  |  |                                          jsr 13da6 <KPrintF>
    2a98:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2a9a:	|  |  |  |  |  |  |                                          clr.w d0
    2a9c:	|  +--|--|--|--|--|----------------------------------------- bra.w 34dc <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2aa0:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2aa4:	|  |  |  |  |  |  |                                          moveq #28,d0
    2aa6:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2aaa:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2aac:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2aae:	|  |  |  |  |  |  |                                          jsr 11de2 <loadStringToVar>
    2ab4:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2ab6:	|  |  |  |  |  |  |                                          tst.w d0
    2ab8:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 34a0 <continueFunction+0xe80>
					return FALSE;
    2abc:	|  |  |  |  |  |  |  |                                       clr.w d0
    2abe:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2ac2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ac6:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2aca:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2acc:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2ace:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2ad0:	|  |  |  |  |  |  |  |                                /----- beq.s 2b2e <continueFunction+0x50e>
    2ad2:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2ad4:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2ad6:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2cc2 <continueFunction+0x6a2>
    2ada:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2adc:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2ae8 <continueFunction+0x4c8>
    2ade:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2ae0:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2ae2:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2b2e <continueFunction+0x50e>
    2ae4:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2cc2 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2ae8:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2aea:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2aee:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2b1a <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2af0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2af2:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2af6:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2af8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2afa:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2afc:	|  |  |  |  |  |  |  |              |                 |  |   jsr 12650 <setVariable>
    2b02:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2b06:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2b08:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2b0c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2b0e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 126e2 <trimStack>
    2b14:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2b16:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2cd8 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2b1a:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 14ffd <custom.c.177df80b+0x324>
    2b20:	|  |  |  |  |  |  |  |              |  |              |      jsr 13da6 <KPrintF>
    2b26:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2b28:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2b2a:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 34dc <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2b2e:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2b32:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2b36:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2b3a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2b3c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b52 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2b3e:	|  |  |  |  |  |  |  |              |  |                 |   pea 15039 <custom.c.177df80b+0x360>
    2b44:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13da6 <KPrintF>
    2b4a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2b4c:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2b4e:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 34dc <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2b52:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2b54:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2b58:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2b5a:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2b5e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2b62:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2b64:	|  |  |  |  |  |  |  |              |  |                     jsr 11d5e <getValueType>
    2b6a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2b6e:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2b70:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b78 <continueFunction+0x558>
    2b72:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2b74:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 34dc <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2b78:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2b7c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2b80:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2b82:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2b84:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2b86:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2ba8 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2b88:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2b8c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2b8e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2b92:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2b96:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2b9a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2b9c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2b9e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 119e8 <fastArrayGetByIndex>
    2ba4:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2ba6:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2bc8 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2ba8:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2bac:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2bae:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2bb2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2bb6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2bba:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2bbc:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2bbe:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2bc0:	|  |  |  |  |  |  |  |              |  |              |      jsr 12672 <stackGetByIndex>
    2bc6:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2bc8:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2bcc:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2bce:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2bd2:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2bd4:	|  |  |  |  |  |  |  |              |  |                     jsr 126e2 <trimStack>
    2bda:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2bdc:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2be0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2bfc <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2be2:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2be4:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2be8:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2bea:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2bec:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2bee:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12650 <setVariable>
    2bf4:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2bf8:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2cd6 <continueFunction+0x6b6>
    2bfc:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2bfe:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2c02:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2c10 <continueFunction+0x5f0>
    2c04:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2c06:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2c0a:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2c5a <continueFunction+0x63a>
    2c0c:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2ca2 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2c10:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2c14:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2c18:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2c1c:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2c1e:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 11d5e <getValueType>
    2c24:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2c28:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2c2a:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2c32 <continueFunction+0x612>
    2c2c:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2c2e:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2cbc <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2c32:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2c34:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2c36:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2c3a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2c3c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2c40:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2c42:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 12650 <setVariable>
    2c48:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2c4c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2c4e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2c50:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2c54:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2c58:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2cc0 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2c5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2c5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2c62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2c66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2c68:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 11d5e <getValueType>
    2c6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2c72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2c74:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2c7a <continueFunction+0x65a>
    2c76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2c78:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2cbc <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2c7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2c7c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2c7e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    2c82:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2c84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2c88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2c8a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 12650 <setVariable>
    2c90:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2c94:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2c96:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2c98:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2c9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    2ca0:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2cc0 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    2ca2:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2ca4:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2ca8:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2caa:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2cae:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 12218 <copyVariable>
    2cb4:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2cb6:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2cb8:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2cd6 <continueFunction+0x6b6>
    2cba:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2cbc:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 34dc <continueFunction+0xebc>
				break;
    2cc0:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2cd6 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2cc2:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 15057 <custom.c.177df80b+0x37e>
    2cc8:	|  |  |  |  |  |  |  |                 |  |                  jsr 13da6 <KPrintF>
    2cce:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2cd0:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2cd2:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 34dc <continueFunction+0xebc>
				break;
    2cd6:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2cd8:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 34ba <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2cdc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ce0:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2ce4:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2ce6:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2ce8:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2cea:	|  |  |  |  |  |  |  |                                   /-- beq.s 2cf8 <continueFunction+0x6d8>
    2cec:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2cee:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2cf0:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2da4 <continueFunction+0x784>
    2cf4:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2e02 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2cf8:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2cfc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d00:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2d04:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2d06:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d1c <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2d08:	|  |  |  |  |  |  |  |                             |  |  |   pea 15039 <custom.c.177df80b+0x360>
    2d0e:	|  |  |  |  |  |  |  |                             |  |  |   jsr 13da6 <KPrintF>
    2d14:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2d16:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d18:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34dc <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2d1c:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2d1e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d22:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d24:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2d28:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2d2c:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2d2e:	|  |  |  |  |  |  |  |                             |  |      jsr 11d5e <getValueType>
    2d34:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2d38:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2d3a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d42 <continueFunction+0x722>
    2d3c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d3e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34dc <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2d42:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2d46:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d4a:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2d4e:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2d50:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2d54:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2d56:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2d5a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d5e:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2d62:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2d64:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2d66:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2d68:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d6a:	|  |  |  |  |  |  |  |                             |  |      jsr 45ae <stackSetByIndex>
    2d70:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2d74:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2d76:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d7e <continueFunction+0x75e>
						return FALSE;
    2d78:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d7a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34dc <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2d7e:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2d80:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d84:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d86:	|  |  |  |  |  |  |  |                             |  |      jsr 126e2 <trimStack>
    2d8c:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2d8e:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2d90:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d94:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d96:	|  |  |  |  |  |  |  |                             |  |      jsr 126e2 <trimStack>
    2d9c:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2d9e:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2da0:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 34ba <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2da4:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2da6:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2daa:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2dac:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2db0:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2db4:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2db6:	|  |  |  |  |  |  |  |                             |         jsr 11d5e <getValueType>
    2dbc:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2dc0:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2dc2:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2dca <continueFunction+0x7aa>
    2dc4:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2dc6:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 34dc <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2dca:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2dce:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2dd0:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2dd4:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2dd8:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2ddc:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2dde:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2de0:	|  |  |  |  |  |  |  |                             |         jsr 119e8 <fastArrayGetByIndex>
    2de6:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2de8:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2dec:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2dfc <continueFunction+0x7dc>
    2dee:	|  |  |  |  |  |  |  |                             |     |   pea 1507b <custom.c.177df80b+0x3a2>
    2df4:	|  |  |  |  |  |  |  |                             |     |   jsr 13da6 <KPrintF>
    2dfa:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2dfc:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2dfe:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 34dc <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2e02:	|  |  |  |  |  |  |  |                             \-------> pea 15057 <custom.c.177df80b+0x37e>
    2e08:	|  |  |  |  |  |  |  |                                       jsr 13da6 <KPrintF>
    2e0e:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2e10:	|  |  |  |  |  |  |  |                                       clr.w d0
    2e12:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 34dc <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2e16:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e1a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2e1e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e22:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e24:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2e26:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e28:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e2c:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2e30:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2e32:	|  |  |  |  |  |  |  |                                       jsr 11d5e <getValueType>
    2e38:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2e3c:	|  |  |  |  |  |  |  |                                       tst.w d0
    2e3e:	|  |  |  |  |  |  |  |                                   /-- bne.s 2e46 <continueFunction+0x826>
    2e40:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2e42:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34dc <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2e46:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2e4a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2e4c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2e50:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e52:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e56:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e58:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2e5e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2e62:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2e66:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2e68:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2e6a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e6e:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2e72:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e76:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e78:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2e7a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e7c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e82:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2e88:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2e8c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2e90:	|  |  |  |  |  |  |  |                                       move.l 19096 <globalVars>,d1
    2e96:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e9a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e9c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2e9e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ea0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ea4:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2ea8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2eaa:	|  |  |  |  |  |  |  |                                       jsr 11d5e <getValueType>
    2eb0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2eb4:	|  |  |  |  |  |  |  |                                       tst.w d0
    2eb6:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ebe <continueFunction+0x89e>
    2eb8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2eba:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34dc <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ebe:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2ec2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2ec4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2ec8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2eca:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ece:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ed0:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2ed6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2eda:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2ede:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2ee0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2ee2:	|  |  |  |  |  |  |  |                                       movea.l 19096 <globalVars>,a0
    2ee8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2eec:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2eee:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2ef0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ef2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ef6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ef8:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2efe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f02:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2f06:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f0a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2f0e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f12:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f14:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f16:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f18:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f1c:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2f20:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2f22:	|  |  |  |  |  |  |  |                                       jsr 11d5e <getValueType>
    2f28:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2f2c:	|  |  |  |  |  |  |  |                                       tst.w d0
    2f2e:	|  |  |  |  |  |  |  |                                   /-- bne.s 2f36 <continueFunction+0x916>
    2f30:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2f32:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34dc <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2f36:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2f3a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2f3c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2f40:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f42:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f46:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f48:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2f4e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2f52:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2f56:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2f58:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2f5a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f5e:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2f62:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f66:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f68:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2f6a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f6c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f70:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f72:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2f78:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f7c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2f80:	|  |  |  |  |  |  |  |                                       move.l 19096 <globalVars>,d1
    2f86:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f8a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f8c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f94:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2f98:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2f9a:	|  |  |  |  |  |  |  |                                       jsr 11d5e <getValueType>
    2fa0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2fa4:	|  |  |  |  |  |  |  |                                       tst.w d0
    2fa6:	|  |  |  |  |  |  |  |                                   /-- bne.s 2fae <continueFunction+0x98e>
    2fa8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2faa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34dc <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2fae:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2fb2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2fb4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2fb8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2fba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fbe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2fc0:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2fc6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2fca:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2fce:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2fd0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2fd2:	|  |  |  |  |  |  |  |                                       movea.l 19096 <globalVars>,a0
    2fd8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2fdc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2fde:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2fe0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2fe2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fe6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2fe8:	|  |  |  |  |  |  |  |                                       jsr 12650 <setVariable>
    2fee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2ff2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2ff6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ffa:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2ffe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3002:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3004:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    3006:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3008:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    300c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    300e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3010:	|  |  |  |  |  |  |  |                                       jsr 12218 <copyVariable>
    3016:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    3018:	|  |  |  |  |  |  |  |                                       tst.w d0
    301a:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 34a4 <continueFunction+0xe84>
    301e:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    3020:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    3024:	|  |  |  |  |  |  |  |  |                                    move.l 19096 <globalVars>,d1
    302a:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    302e:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    3030:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    3032:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    3034:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    3038:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    303a:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    303c:	|  |  |  |  |  |  |  |  |                                    jsr 12218 <copyVariable>
    3042:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    3044:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    3046:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 34a8 <continueFunction+0xe88>
    304a:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    304c:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    3050:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    3052:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    3056:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19096 <globalVars>,a0
    305c:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    3060:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    3062:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    3064:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    3066:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    3068:	|  |  |  |  |  |  |  |  |  |                                 jsr 12218 <copyVariable>
    306e:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    3070:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    3072:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 34ac <continueFunction+0xe8c>
    3076:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    3078:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    307c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    307e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    3082:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    3084:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    3088:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    308a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    308c:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1159a <addVarToStack>
    3092:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    3094:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    3096:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 34b0 <continueFunction+0xe90>
    309a:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    309c:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 11620 <addVarToStackQuick>
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 34b4 <continueFunction+0xe94>
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    30c0:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 34dc <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1229e <getBoolean>
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 12650 <setVariable>
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    30f6:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3100:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3102:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1229e <getBoolean>
    3108:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    310c:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 34b8 <continueFunction+0xe98>
				advanceNow = FALSE;
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 34b8 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    3130:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 34ba <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    313a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 11d5e <getValueType>
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 315a <continueFunction+0xb3a>
    3154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    3156:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 34dc <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    3160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    316a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    316e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 12650 <setVariable>
    3176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    317a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 34ba <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    3186:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 3470 <continueFunction+0xe50>
    318a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    318c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 320c <continueFunction+0xbec>
    3192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    3194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 3256 <continueFunction+0xc36>
    319c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    319e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    31a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 31b0 <continueFunction+0xb90>
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    31aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 31de <continueFunction+0xbbe>
    31ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 3256 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    31b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    31ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    31be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    31c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    31c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11694 <addVariablesInSecond>
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    31ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    31cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    31d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 126e2 <trimStack>
    31d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    31da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3484 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    31de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    31e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    31e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    31e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    31ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    31ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    31f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11752 <compareVariablesInSecond>
    31f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    31f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    31fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    31fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 126e2 <trimStack>
    3206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3484 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    320e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    321a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    321c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    321e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11752 <compareVariablesInSecond>
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    3226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    322c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    322e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 126e2 <trimStack>
    3234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    3236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    323a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    3242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    3244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    324a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    324e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    3252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3484 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    3256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    325a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    325e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    3268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    326a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11d5e <getValueType>
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 327e <continueFunction+0xc5e>
    3278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    327a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 34dc <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    3280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    328e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11d5e <getValueType>
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 32a4 <continueFunction+0xc84>
    329e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    32a0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 34dc <continueFunction+0xebc>
					trimStack (&fun -> stack);
    32a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    32ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 126e2 <trimStack>
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    32ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    32be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 3482 <continueFunction+0xe62>
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    32c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #13010,a0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    32ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (32d2 <continueFunction+0xcb2>,pc,d0.w)
    32d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    32e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    32e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    330a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    330c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14764 <__mulsi3>
    3314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    331e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3484 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    334a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    334c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    3352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3484 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    335e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14810 <__modsi3>
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    336e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    337c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    337e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3484 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    338c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 147e2 <__divsi3>
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    33a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3484 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    33be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    33c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    33c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    33ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    33cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    33ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    33d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3484 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    33ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    33f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    33f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    33fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    33fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    340c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3484 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    341c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    342a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    342c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3484 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    345c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    345e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12650 <setVariable>
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3484 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1509c <custom.c.177df80b+0x3c3>
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 13da6 <KPrintF>
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    3480:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 34dc <continueFunction+0xebc>
						break;
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3484:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 34ba <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3486:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 150b4 <custom.c.177df80b+0x3db>
    348c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 13da6 <KPrintF>
    3492:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3494:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3496:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 34dc <continueFunction+0xebc>
			break;
    3498:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    349a:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    349c:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    349e:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34a0:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    34a2:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34a4:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    34a6:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34a8:	|  |  |     |              \--|--|--|--|-------------------> nop
    34aa:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34ac:	|  |  |     |                 \--|--|--|-------------------> nop
    34ae:	|  |  |     +--------------------|--|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34b0:	|  |  |     |                    \--|--|-------------------> nop
    34b2:	|  |  |     +-----------------------|--|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34b4:	|  |  |     |                       \--|-------------------> nop
    34b6:	|  |  |     +--------------------------|-------------------- bra.s 34ba <continueFunction+0xe9a>
			break;
    34b8:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    34ba:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    34be:	+--|--|----------------------------------------------------- beq.s 34d2 <continueFunction+0xeb2>
    34c0:	|  |  |                                                      movea.l 80(sp),a0
    34c4:	|  |  |                                                      move.l 36(a0),d0
    34c8:	|  |  |                                                      addq.l #1,d0
    34ca:	|  |  |                                                      movea.l 80(sp),a0
    34ce:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    34d2:	\--|--|----------------------------------------------------> tst.w 74(sp)
    34d6:	   |  \----------------------------------------------------- bne.w 2648 <continueFunction+0x28>

	}
	return TRUE;
    34da:	   |                                                         moveq #1,d0
}
    34dc:	   \-------------------------------------------------------> lea 76(sp),sp
    34e0:	                                                             rts

000034e2 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    34e2:	       lea -16(sp),sp
    34e6:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    34e8:	       move.l 24(sp),-(sp)
    34ec:	       jsr 437a <pauseFunction>
    34f2:	       addq.l #4,sp
	if (fun -> stack) 
    34f4:	       movea.l 24(sp),a0
    34f8:	       move.l 24(a0),d0
    34fc:	   /-- beq.s 3512 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    34fe:	   |   pea 150e0 <custom.c.177df80b+0x407>
    3504:	   |   pea 1510d <custom.c.177df80b+0x434>
    350a:	   |   jsr 13da6 <KPrintF>
    3510:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3512:	   \-> movea.l 24(sp),a0
    3516:	       move.l 4(a0),12(sp)
    351c:	       move.l 190e8 <SysBase>,d0
    3522:	       movea.l d0,a6
    3524:	       movea.l 12(sp),a1
    3528:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    352c:	       clr.l 16(sp)
    3530:	   /-- bra.s 3550 <finishFunction+0x6e>
    3532:	/--|-> movea.l 24(sp),a0
    3536:	|  |   move.l 20(a0),d1
    353a:	|  |   move.l 16(sp),d0
    353e:	|  |   lsl.l #3,d0
    3540:	|  |   add.l d1,d0
    3542:	|  |   move.l d0,-(sp)
    3544:	|  |   jsr 11fac <unlinkVar>
    354a:	|  |   addq.l #4,sp
    354c:	|  |   addq.l #1,16(sp)
    3550:	|  \-> movea.l 24(sp),a0
    3554:	|      move.l 8(a0),d0
    3558:	|      cmp.l 16(sp),d0
    355c:	\----- bgt.s 3532 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    355e:	       movea.l 24(sp),a0
    3562:	       move.l 8(a0),d0
    3566:	   /-- ble.s 3582 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    3568:	   |   movea.l 24(sp),a0
    356c:	   |   move.l 20(a0),8(sp)
    3572:	   |   move.l 190e8 <SysBase>,d0
    3578:	   |   movea.l d0,a6
    357a:	   |   movea.l 8(sp),a1
    357e:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    3582:	   \-> moveq #28,d0
    3584:	       add.l 24(sp),d0
    3588:	       move.l d0,-(sp)
    358a:	       jsr 11fac <unlinkVar>
    3590:	       addq.l #4,sp
	FreeVec(fun);
    3592:	       move.l 24(sp),4(sp)
    3598:	       move.l 190e8 <SysBase>,d0
    359e:	       movea.l d0,a6
    35a0:	       movea.l 4(sp),a1
    35a4:	       jsr -690(a6)
	fun = NULL;
    35a8:	       clr.l 24(sp)
}
    35ac:	       nop
    35ae:	       movea.l (sp)+,a6
    35b0:	       lea 16(sp),sp
    35b4:	       rts

000035b6 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    35b6:	jsr 43d6 <runSludge>
}
    35bc:	rts

000035be <initSludge>:

BOOL initSludge (char * filename) {
    35be:	             lea -296(sp),sp
    35c2:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    35c6:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    35ca:	             jsr 852a <makeNullAnim>
    35d0:	             move.l d0,19008 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    35d6:	             pea 19092 <gameVersion>
    35dc:	             pea 1511d <custom.c.177df80b+0x444>
    35e2:	             pea 45 <_start+0x45>
    35e6:	             pea 47 <_start+0x47>
    35ea:	             move.l 336(sp),-(sp)
    35ee:	             jsr 400a <openAndVerify>
    35f4:	             lea 20(sp),sp
    35f8:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    35fc:	         /-- bne.s 3604 <initSludge+0x46>
    35fe:	         |   clr.w d0
    3600:	/--------|-- bra.w 3d2a <initSludge+0x76c>
	if (FGetC (fp)) {
    3604:	|        \-> move.l 292(sp),288(sp)
    360a:	|            move.l 190f0 <DOSBase>,d0
    3610:	|            movea.l d0,a6
    3612:	|            move.l 288(sp),d1
    3616:	|            jsr -306(a6)
    361a:	|            move.l d0,284(sp)
    361e:	|            move.l 284(sp),d0
    3622:	|  /-------- beq.w 37c8 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3626:	|  |         move.l 292(sp),-(sp)
    362a:	|  |         jsr 6bc <get2bytes>
    3630:	|  |         addq.l #4,sp
    3632:	|  |         move.l d0,190bc <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3638:	|  |         move.l 190bc <numBIFNames>,d0
    363e:	|  |         move.l d0,280(sp)
    3642:	|  |         clr.l 276(sp)
    3646:	|  |         move.l 190e8 <SysBase>,d0
    364c:	|  |         movea.l d0,a6
    364e:	|  |         move.l 280(sp),d0
    3652:	|  |         move.l 276(sp),d1
    3656:	|  |         jsr -684(a6)
    365a:	|  |         move.l d0,272(sp)
    365e:	|  |         move.l 272(sp),d0
    3662:	|  |         move.l d0,19078 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3668:	|  |         move.l 19078 <allBIFNames>,d0
    366e:	|  |     /-- bne.s 3676 <initSludge+0xb8>
    3670:	|  |     |   clr.w d0
    3672:	+--|-----|-- bra.w 3d2a <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3676:	|  |     \-> clr.l 308(sp)
    367a:	|  |     /-- bra.s 36a0 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    367c:	|  |  /--|-> move.l 19078 <allBIFNames>,d1
    3682:	|  |  |  |   move.l 308(sp),d0
    3686:	|  |  |  |   add.l d0,d0
    3688:	|  |  |  |   add.l d0,d0
    368a:	|  |  |  |   movea.l d1,a2
    368c:	|  |  |  |   adda.l d0,a2
    368e:	|  |  |  |   move.l 292(sp),-(sp)
    3692:	|  |  |  |   jsr b02 <readString>
    3698:	|  |  |  |   addq.l #4,sp
    369a:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    369c:	|  |  |  |   addq.l #1,308(sp)
    36a0:	|  |  |  \-> move.l 190bc <numBIFNames>,d0
    36a6:	|  |  |      cmp.l 308(sp),d0
    36aa:	|  |  \----- bgt.s 367c <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    36ac:	|  |         move.l 292(sp),-(sp)
    36b0:	|  |         jsr 6bc <get2bytes>
    36b6:	|  |         addq.l #4,sp
    36b8:	|  |         move.l d0,190c8 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    36be:	|  |         move.l 190c8 <numUserFunc>,d0
    36c4:	|  |         move.l d0,268(sp)
    36c8:	|  |         clr.l 264(sp)
    36cc:	|  |         move.l 190e8 <SysBase>,d0
    36d2:	|  |         movea.l d0,a6
    36d4:	|  |         move.l 268(sp),d0
    36d8:	|  |         move.l 264(sp),d1
    36dc:	|  |         jsr -684(a6)
    36e0:	|  |         move.l d0,260(sp)
    36e4:	|  |         move.l 260(sp),d0
    36e8:	|  |         move.l d0,19084 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    36ee:	|  |         move.l 19084 <allUserFunc>,d0
    36f4:	|  |     /-- bne.s 36fc <initSludge+0x13e>
    36f6:	|  |     |   clr.w d0
    36f8:	+--|-----|-- bra.w 3d2a <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    36fc:	|  |     \-> clr.l 304(sp)
    3700:	|  |     /-- bra.s 3726 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3702:	|  |  /--|-> move.l 19084 <allUserFunc>,d1
    3708:	|  |  |  |   move.l 304(sp),d0
    370c:	|  |  |  |   add.l d0,d0
    370e:	|  |  |  |   add.l d0,d0
    3710:	|  |  |  |   movea.l d1,a2
    3712:	|  |  |  |   adda.l d0,a2
    3714:	|  |  |  |   move.l 292(sp),-(sp)
    3718:	|  |  |  |   jsr b02 <readString>
    371e:	|  |  |  |   addq.l #4,sp
    3720:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3722:	|  |  |  |   addq.l #1,304(sp)
    3726:	|  |  |  \-> move.l 190c8 <numUserFunc>,d0
    372c:	|  |  |      cmp.l 304(sp),d0
    3730:	|  |  \----- bgt.s 3702 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3732:	|  |         move.l 19092 <gameVersion>,d0
    3738:	|  |         cmpi.l #258,d0
    373e:	|  +-------- ble.w 37c8 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    3742:	|  |         move.l 292(sp),-(sp)
    3746:	|  |         jsr 6bc <get2bytes>
    374c:	|  |         addq.l #4,sp
    374e:	|  |         move.l d0,190c4 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    3754:	|  |         move.l 190c4 <numResourceNames>,d0
    375a:	|  |         move.l d0,256(sp)
    375e:	|  |         clr.l 252(sp)
    3762:	|  |         move.l 190e8 <SysBase>,d0
    3768:	|  |         movea.l d0,a6
    376a:	|  |         move.l 256(sp),d0
    376e:	|  |         move.l 252(sp),d1
    3772:	|  |         jsr -684(a6)
    3776:	|  |         move.l d0,248(sp)
    377a:	|  |         move.l 248(sp),d0
    377e:	|  |         move.l d0,1907c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3784:	|  |         move.l 1907c <allResourceNames>,d0
    378a:	|  |     /-- bne.s 3792 <initSludge+0x1d4>
    378c:	|  |     |   clr.w d0
    378e:	+--|-----|-- bra.w 3d2a <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    3792:	|  |     \-> clr.l 300(sp)
    3796:	|  |     /-- bra.s 37bc <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3798:	|  |  /--|-> move.l 1907c <allResourceNames>,d1
    379e:	|  |  |  |   move.l 300(sp),d0
    37a2:	|  |  |  |   add.l d0,d0
    37a4:	|  |  |  |   add.l d0,d0
    37a6:	|  |  |  |   movea.l d1,a2
    37a8:	|  |  |  |   adda.l d0,a2
    37aa:	|  |  |  |   move.l 292(sp),-(sp)
    37ae:	|  |  |  |   jsr b02 <readString>
    37b4:	|  |  |  |   addq.l #4,sp
    37b6:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    37b8:	|  |  |  |   addq.l #1,300(sp)
    37bc:	|  |  |  \-> move.l 190c4 <numResourceNames>,d0
    37c2:	|  |  |      cmp.l 300(sp),d0
    37c6:	|  |  \----- bgt.s 3798 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    37c8:	|  \-------> move.l 292(sp),-(sp)
    37cc:	|            jsr 6bc <get2bytes>
    37d2:	|            addq.l #4,sp
    37d4:	|            move.l d0,1903c <winWidth>
	winHeight = get2bytes (fp);
    37da:	|            move.l 292(sp),-(sp)
    37de:	|            jsr 6bc <get2bytes>
    37e4:	|            addq.l #4,sp
    37e6:	|            move.l d0,19040 <winHeight>
	specialSettings = FGetC (fp);
    37ec:	|            move.l 292(sp),244(sp)
    37f2:	|            move.l 190f0 <DOSBase>,d0
    37f8:	|            movea.l d0,a6
    37fa:	|            move.l 244(sp),d1
    37fe:	|            jsr -306(a6)
    3802:	|            move.l d0,240(sp)
    3806:	|            move.l 240(sp),d0
    380a:	|            move.l d0,190cc <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3810:	|            move.l 292(sp),236(sp)
    3816:	|            move.l 190f0 <DOSBase>,d0
    381c:	|            movea.l d0,a6
    381e:	|            move.l 236(sp),d1
    3822:	|            jsr -306(a6)
    3826:	|            move.l d0,232(sp)
    382a:	|            move.l 232(sp),d0
    382e:	|            move.l d0,-(sp)
    3830:	|            pea 3e8 <encodeFilename+0xea>
    3834:	|            jsr 147e2 <__divsi3>
    383a:	|            addq.l #8,sp
    383c:	|            move.l d0,18a90 <desiredfps>

	FreeVec(readString (fp));
    3842:	|            move.l 292(sp),-(sp)
    3846:	|            jsr b02 <readString>
    384c:	|            addq.l #4,sp
    384e:	|            move.l d0,228(sp)
    3852:	|            move.l 190e8 <SysBase>,d0
    3858:	|            movea.l d0,a6
    385a:	|            movea.l 228(sp),a1
    385e:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    3862:	|            move.l 292(sp),224(sp)
    3868:	|            move.l #102538,220(sp)
    3870:	|            moveq #8,d0
    3872:	|            move.l d0,216(sp)
    3876:	|            moveq #1,d1
    3878:	|            move.l d1,212(sp)
    387c:	|            move.l 190f0 <DOSBase>,d0
    3882:	|            movea.l d0,a6
    3884:	|            move.l 224(sp),d1
    3888:	|            move.l 220(sp),d2
    388c:	|            move.l 216(sp),d3
    3890:	|            move.l 212(sp),d4
    3894:	|            jsr -324(a6)
    3898:	|            move.l d0,208(sp)
    389c:	|            move.l 208(sp),d0
    38a0:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    38a4:	|            moveq #1,d0
    38a6:	|            cmp.l 204(sp),d0
    38aa:	|        /-- beq.s 38ba <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    38ac:	|        |   pea 15156 <custom.c.177df80b+0x47d>
    38b2:	|        |   jsr 13da6 <KPrintF>
    38b8:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    38ba:	|        \-> move.l 19092 <gameVersion>,d0
    38c0:	|            cmpi.l #258,d0
    38c6:	|        /-- ble.s 38d6 <initSludge+0x318>
    38c8:	|        |   move.l 292(sp),-(sp)
    38cc:	|        |   jsr b02 <readString>
    38d2:	|        |   addq.l #4,sp
    38d4:	|     /--|-- bra.s 38ea <initSludge+0x32c>
    38d6:	|     |  \-> pea 15174 <custom.c.177df80b+0x49b>
    38dc:	|     |      pea 15174 <custom.c.177df80b+0x49b>
    38e2:	|     |      jsr 1128a <joinStrings>
    38e8:	|     |      addq.l #8,sp
    38ea:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    38ee:	|            move.l 19092 <gameVersion>,d0
    38f4:	|            cmpi.l #258,d0
    38fa:	|     /----- ble.s 391c <initSludge+0x35e>
    38fc:	|     |      move.l 292(sp),196(sp)
    3902:	|     |      move.l 190f0 <DOSBase>,d0
    3908:	|     |      movea.l d0,a6
    390a:	|     |      move.l 196(sp),d1
    390e:	|     |      jsr -306(a6)
    3912:	|     |      move.l d0,192(sp)
    3916:	|     |      move.l 192(sp),d0
    391a:	|     |  /-- bra.s 391e <initSludge+0x360>
    391c:	|     \--|-> moveq #0,d0
    391e:	|        \-> move.l d0,1921c <gameSettings+0x4>
	makeLanguageTable (fp);
    3924:	|            move.l 292(sp),-(sp)
    3928:	|            jsr 10c40 <makeLanguageTable>
    392e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    3930:	|            move.l 19092 <gameVersion>,d0
    3936:	|            cmpi.l #261,d0
    393c:	|        /-- ble.s 398a <initSludge+0x3cc>
	{
		FGetC(fp);
    393e:	|        |   move.l 292(sp),188(sp)
    3944:	|        |   move.l 190f0 <DOSBase>,d0
    394a:	|        |   movea.l d0,a6
    394c:	|        |   move.l 188(sp),d1
    3950:	|        |   jsr -306(a6)
    3954:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3958:	|        |   move.l 292(sp),180(sp)
    395e:	|        |   move.l 190f0 <DOSBase>,d0
    3964:	|        |   movea.l d0,a6
    3966:	|        |   move.l 180(sp),d1
    396a:	|        |   jsr -306(a6)
    396e:	|        |   move.l d0,176(sp)
		getFloat (fp);
    3972:	|        |   move.l 292(sp),-(sp)
    3976:	|        |   jsr 7d8 <getFloat>
    397c:	|        |   addq.l #4,sp
		getFloat (fp);
    397e:	|        |   move.l 292(sp),-(sp)
    3982:	|        |   jsr 7d8 <getFloat>
    3988:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    398a:	|        \-> move.l 292(sp),-(sp)
    398e:	|            jsr b02 <readString>
    3994:	|            addq.l #4,sp
    3996:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    399a:	|            pea 15175 <custom.c.177df80b+0x49c>
    39a0:	|            move.l 176(sp),-(sp)
    39a4:	|            jsr 1120a <strcmp>
    39aa:	|            addq.l #8,sp
    39ac:	|            tst.l d0
    39ae:	|        /-- beq.s 39b6 <initSludge+0x3f8>
		return FALSE;
    39b0:	|        |   clr.w d0
    39b2:	+--------|-- bra.w 3d2a <initSludge+0x76c>
	}
	FreeVec( checker);
    39b6:	|        \-> move.l 172(sp),168(sp)
    39bc:	|            move.l 190e8 <SysBase>,d0
    39c2:	|            movea.l d0,a6
    39c4:	|            movea.l 168(sp),a1
    39c8:	|            jsr -690(a6)
	checker = NULL;
    39cc:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    39d0:	|            move.l 292(sp),164(sp)
    39d6:	|            move.l 190f0 <DOSBase>,d0
    39dc:	|            movea.l d0,a6
    39de:	|            move.l 164(sp),d1
    39e2:	|            jsr -306(a6)
    39e6:	|            move.l d0,160(sp)
    39ea:	|            move.l 160(sp),d0
    39ee:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    39f2:	|            moveq #0,d0
    39f4:	|            move.b 159(sp),d0
    39f8:	|            moveq #1,d1
    39fa:	|            and.l d1,d0
    39fc:	|        /-- beq.s 3a54 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    39fe:	|        |   move.l 190f0 <DOSBase>,d0
    3a04:	|        |   movea.l d0,a6
    3a06:	|        |   jsr -60(a6)
    3a0a:	|        |   move.l d0,38(sp)
    3a0e:	|        |   move.l 38(sp),d0
    3a12:	|        |   move.l d0,34(sp)
    3a16:	|        |   move.l #86397,30(sp)
    3a1e:	|        |   moveq #54,d0
    3a20:	|        |   move.l d0,26(sp)
    3a24:	|        |   move.l 190f0 <DOSBase>,d0
    3a2a:	|        |   movea.l d0,a6
    3a2c:	|        |   move.l 34(sp),d1
    3a30:	|        |   move.l 30(sp),d2
    3a34:	|        |   move.l 26(sp),d3
    3a38:	|        |   jsr -48(a6)
    3a3c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3a40:	|        |   pea 151b4 <custom.c.177df80b+0x4db>
    3a46:	|        |   jsr 13da6 <KPrintF>
    3a4c:	|        |   addq.l #4,sp
		return FALSE;
    3a4e:	|        |   clr.w d0
    3a50:	+--------|-- bra.w 3d2a <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    3a54:	|        \-> move.l 292(sp),-(sp)
    3a58:	|            jsr 6bc <get2bytes>
    3a5e:	|            addq.l #4,sp
    3a60:	|            move.l d0,190c0 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3a66:	|            move.l 190c0 <numGlobals>,d0
    3a6c:	|            lsl.l #3,d0
    3a6e:	|            move.l d0,154(sp)
    3a72:	|            clr.l 150(sp)
    3a76:	|            move.l 190e8 <SysBase>,d0
    3a7c:	|            movea.l d0,a6
    3a7e:	|            move.l 154(sp),d0
    3a82:	|            move.l 150(sp),d1
    3a86:	|            jsr -684(a6)
    3a8a:	|            move.l d0,146(sp)
    3a8e:	|            move.l 146(sp),d0
    3a92:	|            move.l d0,19096 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3a98:	|            move.l 19096 <globalVars>,d0
    3a9e:	|        /-- bne.s 3abc <initSludge+0x4fe>
    3aa0:	|        |   move.l 190c0 <numGlobals>,d0
    3aa6:	|        +-- ble.s 3abc <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3aa8:	|        |   pea 151ec <custom.c.177df80b+0x513>
    3aae:	|        |   jsr 13da6 <KPrintF>
    3ab4:	|        |   addq.l #4,sp
		return FALSE;
    3ab6:	|        |   clr.w d0
    3ab8:	+--------|-- bra.w 3d2a <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3abc:	|        \-> clr.l 312(sp)
    3ac0:	|        /-- bra.s 3ad8 <initSludge+0x51a>
    3ac2:	|     /--|-> move.l 19096 <globalVars>,d1
    3ac8:	|     |  |   move.l 312(sp),d0
    3acc:	|     |  |   lsl.l #3,d0
    3ace:	|     |  |   movea.l d1,a0
    3ad0:	|     |  |   adda.l d0,a0
    3ad2:	|     |  |   clr.l (a0)
    3ad4:	|     |  |   addq.l #1,312(sp)
    3ad8:	|     |  \-> move.l 190c0 <numGlobals>,d0
    3ade:	|     |      cmp.l 312(sp),d0
    3ae2:	|     \----- bgt.s 3ac2 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3ae4:	|            move.l 1921c <gameSettings+0x4>,d0
    3aea:	|            clr.l -(sp)
    3aec:	|            move.l d0,-(sp)
    3aee:	|            move.l 300(sp),-(sp)
    3af2:	|            jsr 4ab0 <setFileIndices>
    3af8:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3afc:	|            pea 1 <_start+0x1>
    3b00:	|            jsr 476a <getNumberedString>
    3b06:	|            addq.l #4,sp
    3b08:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3b0c:	|            move.l 142(sp),-(sp)
    3b10:	|            jsr 2fe <encodeFilename>
    3b16:	|            addq.l #4,sp
    3b18:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3b1c:	|            move.l 142(sp),134(sp)
    3b22:	|            move.l 190e8 <SysBase>,d0
    3b28:	|            movea.l d0,a6
    3b2a:	|            movea.l 134(sp),a1
    3b2e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3b32:	|            move.l 138(sp),130(sp)
    3b38:	|            move.l 190f0 <DOSBase>,d0
    3b3e:	|            movea.l d0,a6
    3b40:	|            move.l 130(sp),d1
    3b44:	|            jsr -120(a6)
    3b48:	|            move.l d0,126(sp)
    3b4c:	|            move.l 126(sp),d0
    3b50:	|            move.l d0,296(sp)
	if(lock == 0) {
    3b54:	|        /-- bne.s 3b82 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3b56:	|        |   move.l 138(sp),122(sp)
    3b5c:	|        |   moveq #-2,d1
    3b5e:	|        |   move.l d1,118(sp)
    3b62:	|        |   move.l 190f0 <DOSBase>,d0
    3b68:	|        |   movea.l d0,a6
    3b6a:	|        |   move.l 122(sp),d1
    3b6e:	|        |   move.l 118(sp),d2
    3b72:	|        |   jsr -84(a6)
    3b76:	|        |   move.l d0,114(sp)
    3b7a:	|        |   move.l 114(sp),d0
    3b7e:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3b82:	|        \-> move.l 296(sp),110(sp)
    3b88:	|            move.l 190f0 <DOSBase>,d0
    3b8e:	|            movea.l d0,a6
    3b90:	|            move.l 110(sp),d1
    3b94:	|            jsr -126(a6)
    3b98:	|            move.l d0,106(sp)
    3b9c:	|            move.l 106(sp),d0
    3ba0:	|        /-- bne.s 3bfc <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3ba2:	|        |   move.l 138(sp),-(sp)
    3ba6:	|        |   pea 1521f <custom.c.177df80b+0x546>
    3bac:	|        |   jsr 13da6 <KPrintF>
    3bb2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3bb4:	|        |   move.l 190f0 <DOSBase>,d0
    3bba:	|        |   movea.l d0,a6
    3bbc:	|        |   jsr -60(a6)
    3bc0:	|        |   move.l d0,58(sp)
    3bc4:	|        |   move.l 58(sp),d0
    3bc8:	|        |   move.l d0,54(sp)
    3bcc:	|        |   move.l #86604,50(sp)
    3bd4:	|        |   moveq #40,d0
    3bd6:	|        |   move.l d0,46(sp)
    3bda:	|        |   move.l 190f0 <DOSBase>,d0
    3be0:	|        |   movea.l d0,a6
    3be2:	|        |   move.l 54(sp),d1
    3be6:	|        |   move.l 50(sp),d2
    3bea:	|        |   move.l 46(sp),d3
    3bee:	|        |   jsr -48(a6)
    3bf2:	|        |   move.l d0,42(sp)
		return FALSE;
    3bf6:	|        |   clr.w d0
    3bf8:	+--------|-- bra.w 3d2a <initSludge+0x76c>
	}

	FreeVec(gameName);
    3bfc:	|        \-> move.l 138(sp),102(sp)
    3c02:	|            move.l 190e8 <SysBase>,d0
    3c08:	|            movea.l d0,a6
    3c0a:	|            movea.l 102(sp),a1
    3c0e:	|            jsr -690(a6)

	readIniFile (filename);
    3c12:	|            move.l 320(sp),-(sp)
    3c16:	|            jsr 10d74 <readIniFile>
    3c1c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3c1e:	|            jsr 10b46 <getLanguageForFileB>
    3c24:	|            move.l d0,18a7e <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3c2a:	|            move.l 18a7e <languageNum>,d0
    3c30:	|        /-- bpl.s 3c40 <initSludge+0x682>
    3c32:	|        |   pea 15275 <custom.c.177df80b+0x59c>
    3c38:	|        |   jsr 13da6 <KPrintF>
    3c3e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3c40:	|        \-> move.l 18a7e <languageNum>,d0
    3c46:	|            move.l d0,d1
    3c48:	|            move.l 1921c <gameSettings+0x4>,d0
    3c4e:	|            move.l d1,-(sp)
    3c50:	|            move.l d0,-(sp)
    3c52:	|            clr.l -(sp)
    3c54:	|            jsr 4ab0 <setFileIndices>
    3c5a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3c5e:	|            movea.l 200(sp),a0
    3c62:	|            move.b (a0),d0
    3c64:	|     /----- beq.w 3d0e <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    3c68:	|     |      move.l 200(sp),-(sp)
    3c6c:	|     |      jsr 2fe <encodeFilename>
    3c72:	|     |      addq.l #4,sp
    3c74:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3c78:	|     |      move.l 98(sp),94(sp)
    3c7e:	|     |      move.l 190f0 <DOSBase>,d0
    3c84:	|     |      movea.l d0,a6
    3c86:	|     |      move.l 94(sp),d1
    3c8a:	|     |      jsr -120(a6)
    3c8e:	|     |      move.l d0,90(sp)
    3c92:	|     |      move.l 90(sp),d0
    3c96:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3c9a:	|     |  /-- bne.s 3cc8 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    3c9c:	|     |  |   move.l 98(sp),86(sp)
    3ca2:	|     |  |   moveq #-2,d1
    3ca4:	|     |  |   move.l d1,82(sp)
    3ca8:	|     |  |   move.l 190f0 <DOSBase>,d0
    3cae:	|     |  |   movea.l d0,a6
    3cb0:	|     |  |   move.l 86(sp),d1
    3cb4:	|     |  |   move.l 82(sp),d2
    3cb8:	|     |  |   jsr -84(a6)
    3cbc:	|     |  |   move.l d0,78(sp)
    3cc0:	|     |  |   move.l 78(sp),d0
    3cc4:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3cc8:	|     |  \-> move.l 296(sp),74(sp)
    3cce:	|     |      move.l 190f0 <DOSBase>,d0
    3cd4:	|     |      movea.l d0,a6
    3cd6:	|     |      move.l 74(sp),d1
    3cda:	|     |      jsr -126(a6)
    3cde:	|     |      move.l d0,70(sp)
    3ce2:	|     |      move.l 70(sp),d0
    3ce6:	|     |  /-- bne.s 3cf8 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3ce8:	|     |  |   move.l 190f0 <DOSBase>,d0
    3cee:	|     |  |   movea.l d0,a6
    3cf0:	|     |  |   jsr -60(a6)
    3cf4:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3cf8:	|     |  \-> move.l 98(sp),62(sp)
    3cfe:	|     |      move.l 190e8 <SysBase>,d0
    3d04:	|     |      movea.l d0,a6
    3d06:	|     |      movea.l 62(sp),a1
    3d0a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3d0e:	|     \----> movea.l 19040 <winHeight>,a0
    3d14:	|            lea -15(a0),a0
    3d18:	|            move.l a0,d0
    3d1a:	|            move.l d0,-(sp)
    3d1c:	|            pea a <_start+0xa>
    3d20:	|            jsr 54e2 <positionStatus>
    3d26:	|            addq.l #8,sp

	return TRUE;
    3d28:	|            moveq #1,d0
}
    3d2a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3d2e:	             lea 296(sp),sp
    3d32:	             rts

00003d34 <killSpeechTimers>:

void killSpeechTimers () {
    3d34:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3d36:	          move.l 19080 <allRunningFunctions>,(sp)

	while (thisFunction) {
    3d3c:	   /----- bra.s 3d68 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3d3e:	/--|----> movea.l (sp),a0
    3d40:	|  |      move.b 56(a0),d0
    3d44:	|  |  /-- bne.s 3d62 <killSpeechTimers+0x2e>
    3d46:	|  |  |   movea.l (sp),a0
    3d48:	|  |  |   move.w 50(a0),d0
    3d4c:	|  |  +-- beq.s 3d62 <killSpeechTimers+0x2e>
    3d4e:	|  |  |   movea.l (sp),a0
    3d50:	|  |  |   move.l 12(a0),d0
    3d54:	|  |  +-- beq.s 3d62 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3d56:	|  |  |   movea.l (sp),a0
    3d58:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3d5c:	|  |  |   movea.l (sp),a0
    3d5e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3d62:	|  |  \-> movea.l (sp),a0
    3d64:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3d68:	|  \----> tst.l (sp)
    3d6a:	\-------- bne.s 3d3e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3d6c:	          jsr 5a20 <killAllSpeech>
}
    3d72:	          nop
    3d74:	          addq.l #4,sp
    3d76:	          rts

00003d78 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3d78:	             lea -52(sp),sp
    3d7c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3d7e:	             movea.l 60(sp),a0
    3d82:	             move.l (a0),d0
    3d84:	             move.l d0,-(sp)
    3d86:	             jsr 49f0 <openSubSlice>
    3d8c:	             addq.l #4,sp
    3d8e:	             tst.w d0
    3d90:	         /-- bne.s 3d98 <loadFunctionCode+0x20>
    3d92:	         |   clr.w d0
    3d94:	/--------|-- bra.w 3f62 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3d98:	|        \-> move.l 190d0 <bigDataFile>,44(sp)
    3da0:	|            move.l 190f0 <DOSBase>,d0
    3da6:	|            movea.l d0,a6
    3da8:	|            move.l 44(sp),d1
    3dac:	|            jsr -306(a6)
    3db0:	|            move.l d0,40(sp)
    3db4:	|            move.l 40(sp),d0
    3db8:	|            move.l d0,d0
    3dba:	|            movea.l 60(sp),a0
    3dbe:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3dc2:	|            move.l 190d0 <bigDataFile>,d0
    3dc8:	|            move.l d0,-(sp)
    3dca:	|            jsr 6bc <get2bytes>
    3dd0:	|            addq.l #4,sp
    3dd2:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3dd6:	|            move.l 190d0 <bigDataFile>,d0
    3ddc:	|            move.l d0,-(sp)
    3dde:	|            jsr 6bc <get2bytes>
    3de4:	|            addq.l #4,sp
    3de6:	|            movea.l 60(sp),a0
    3dea:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3dee:	|            move.l 190d0 <bigDataFile>,d0
    3df4:	|            move.l d0,-(sp)
    3df6:	|            jsr 6bc <get2bytes>
    3dfc:	|            addq.l #4,sp
    3dfe:	|            movea.l 60(sp),a0
    3e02:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3e06:	|            move.l 36(sp),d0
    3e0a:	|            lsl.l #3,d0
    3e0c:	|            move.l d0,32(sp)
    3e10:	|            clr.l 28(sp)
    3e14:	|            move.l 190e8 <SysBase>,d0
    3e1a:	|            movea.l d0,a6
    3e1c:	|            move.l 32(sp),d0
    3e20:	|            move.l 28(sp),d1
    3e24:	|            jsr -684(a6)
    3e28:	|            move.l d0,24(sp)
    3e2c:	|            move.l 24(sp),d0
    3e30:	|            movea.l 60(sp),a0
    3e34:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3e38:	|            movea.l 60(sp),a0
    3e3c:	|            move.l 4(a0),d0
    3e40:	|        /-- bne.s 3e56 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3e42:	|        |   pea 152a0 <custom.c.177df80b+0x5c7>
    3e48:	|        |   jsr 13da6 <KPrintF>
    3e4e:	|        |   addq.l #4,sp
		return FALSE;
    3e50:	|        |   clr.w d0
    3e52:	+--------|-- bra.w 3f62 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3e56:	|        \-> clr.l 52(sp)
    3e5a:	|        /-- bra.s 3ebc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3e5c:	|     /--|-> move.l 190d0 <bigDataFile>,8(sp)
    3e64:	|     |  |   move.l 190f0 <DOSBase>,d0
    3e6a:	|     |  |   movea.l d0,a6
    3e6c:	|     |  |   move.l 8(sp),d1
    3e70:	|     |  |   jsr -306(a6)
    3e74:	|     |  |   move.l d0,4(sp)
    3e78:	|     |  |   move.l 4(sp),d1
    3e7c:	|     |  |   movea.l 60(sp),a0
    3e80:	|     |  |   movea.l 4(a0),a0
    3e84:	|     |  |   move.l 52(sp),d0
    3e88:	|     |  |   lsl.l #3,d0
    3e8a:	|     |  |   adda.l d0,a0
    3e8c:	|     |  |   move.l d1,d0
    3e8e:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3e90:	|     |  |   move.l 190d0 <bigDataFile>,d0
    3e96:	|     |  |   move.l d0,-(sp)
    3e98:	|     |  |   jsr 6bc <get2bytes>
    3e9e:	|     |  |   addq.l #4,sp
    3ea0:	|     |  |   move.l d0,d1
    3ea2:	|     |  |   movea.l 60(sp),a0
    3ea6:	|     |  |   movea.l 4(a0),a0
    3eaa:	|     |  |   move.l 52(sp),d0
    3eae:	|     |  |   lsl.l #3,d0
    3eb0:	|     |  |   adda.l d0,a0
    3eb2:	|     |  |   move.l d1,d0
    3eb4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3eb8:	|     |  |   addq.l #1,52(sp)
    3ebc:	|     |  \-> move.l 52(sp),d0
    3ec0:	|     |      cmp.l 36(sp),d0
    3ec4:	|     \----- bcs.s 3e5c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3ec6:	|            jsr 4760 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3ecc:	|            movea.l 60(sp),a0
    3ed0:	|            move.l 8(a0),d0
    3ed4:	|  /-------- ble.w 3f58 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3ed8:	|  |         movea.l 60(sp),a0
    3edc:	|  |         move.l 8(a0),d0
    3ee0:	|  |         lsl.l #3,d0
    3ee2:	|  |         move.l d0,20(sp)
    3ee6:	|  |         clr.l 16(sp)
    3eea:	|  |         move.l 190e8 <SysBase>,d0
    3ef0:	|  |         movea.l d0,a6
    3ef2:	|  |         move.l 20(sp),d0
    3ef6:	|  |         move.l 16(sp),d1
    3efa:	|  |         jsr -684(a6)
    3efe:	|  |         move.l d0,12(sp)
    3f02:	|  |         move.l 12(sp),d0
    3f06:	|  |         movea.l 60(sp),a0
    3f0a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3f0e:	|  |         movea.l 60(sp),a0
    3f12:	|  |         move.l 20(a0),d0
    3f16:	|  |     /-- bne.s 3f2a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3f18:	|  |     |   pea 152a0 <custom.c.177df80b+0x5c7>
    3f1e:	|  |     |   jsr 13da6 <KPrintF>
    3f24:	|  |     |   addq.l #4,sp
			return FALSE;
    3f26:	|  |     |   clr.w d0
    3f28:	+--|-----|-- bra.s 3f62 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3f2a:	|  |     \-> clr.l 48(sp)
    3f2e:	|  |     /-- bra.s 3f48 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3f30:	|  |  /--|-> movea.l 60(sp),a0
    3f34:	|  |  |  |   move.l 20(a0),d1
    3f38:	|  |  |  |   move.l 48(sp),d0
    3f3c:	|  |  |  |   lsl.l #3,d0
    3f3e:	|  |  |  |   movea.l d1,a0
    3f40:	|  |  |  |   adda.l d0,a0
    3f42:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3f44:	|  |  |  |   addq.l #1,48(sp)
    3f48:	|  |  |  \-> movea.l 60(sp),a0
    3f4c:	|  |  |      move.l 8(a0),d0
    3f50:	|  |  |      cmp.l 48(sp),d0
    3f54:	|  |  \----- bgt.s 3f30 <loadFunctionCode+0x1b8>
    3f56:	|  |     /-- bra.s 3f60 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3f58:	|  \-----|-> movea.l 60(sp),a0
    3f5c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3f60:	|        \-> moveq #1,d0
}
    3f62:	\----------> movea.l (sp)+,a6
    3f64:	             lea 52(sp),sp
    3f68:	             rts

00003f6a <loadHandlers>:

void loadHandlers (BPTR fp) {
    3f6a:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3f6c:	movea.l 18a7a <currentEvents>,a2
    3f72:	move.l 8(sp),-(sp)
    3f76:	jsr 6bc <get2bytes>
    3f7c:	addq.l #4,sp
    3f7e:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3f80:	movea.l 18a7a <currentEvents>,a2
    3f86:	move.l 8(sp),-(sp)
    3f8a:	jsr 6bc <get2bytes>
    3f90:	addq.l #4,sp
    3f92:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3f96:	movea.l 18a7a <currentEvents>,a2
    3f9c:	move.l 8(sp),-(sp)
    3fa0:	jsr 6bc <get2bytes>
    3fa6:	addq.l #4,sp
    3fa8:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3fac:	movea.l 18a7a <currentEvents>,a2
    3fb2:	move.l 8(sp),-(sp)
    3fb6:	jsr 6bc <get2bytes>
    3fbc:	addq.l #4,sp
    3fbe:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3fc2:	movea.l 18a7a <currentEvents>,a2
    3fc8:	move.l 8(sp),-(sp)
    3fcc:	jsr 6bc <get2bytes>
    3fd2:	addq.l #4,sp
    3fd4:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3fd8:	movea.l 18a7a <currentEvents>,a2
    3fde:	move.l 8(sp),-(sp)
    3fe2:	jsr 6bc <get2bytes>
    3fe8:	addq.l #4,sp
    3fea:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3fee:	movea.l 18a7a <currentEvents>,a2
    3ff4:	move.l 8(sp),-(sp)
    3ff8:	jsr 6bc <get2bytes>
    3ffe:	addq.l #4,sp
    4000:	move.l d0,24(a2)
}
    4004:	nop
    4006:	movea.l (sp)+,a2
    4008:	rts

0000400a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    400a:	       lea -312(sp),sp
    400e:	       movem.l d2-d3/a6,-(sp)
    4012:	       move.l 332(sp),d1
    4016:	       move.l 336(sp),d0
    401a:	       move.b d1,d1
    401c:	       move.b d1,16(sp)
    4020:	       move.b d0,d0
    4022:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    4026:	       move.l 328(sp),318(sp)
    402c:	       move.l #1005,314(sp)
    4034:	       move.l 190f0 <DOSBase>,d0
    403a:	       movea.l d0,a6
    403c:	       move.l 318(sp),d1
    4040:	       move.l 314(sp),d2
    4044:	       jsr -30(a6)
    4048:	       move.l d0,310(sp)
    404c:	       move.l 310(sp),d0
    4050:	       move.l d0,306(sp)

	if (! fp) {
    4054:	   /-- bne.s 40b0 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    4056:	   |   move.l 190f0 <DOSBase>,d0
    405c:	   |   movea.l d0,a6
    405e:	   |   jsr -60(a6)
    4062:	   |   move.l d0,154(sp)
    4066:	   |   move.l 154(sp),d0
    406a:	   |   move.l d0,150(sp)
    406e:	   |   move.l #86729,146(sp)
    4076:	   |   moveq #31,d0
    4078:	   |   move.l d0,142(sp)
    407c:	   |   move.l 190f0 <DOSBase>,d0
    4082:	   |   movea.l d0,a6
    4084:	   |   move.l 150(sp),d1
    4088:	   |   move.l 146(sp),d2
    408c:	   |   move.l 142(sp),d3
    4090:	   |   jsr -48(a6)
    4094:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    4098:	   |   move.l 328(sp),-(sp)
    409c:	   |   pea 152e9 <custom.c.177df80b+0x610>
    40a2:	   |   jsr 13da6 <KPrintF>
    40a8:	   |   addq.l #8,sp
		return NULL;
    40aa:	   |   moveq #0,d0
    40ac:	/--|-- bra.w 4370 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    40b0:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    40b4:	|      move.l 306(sp),302(sp)
    40ba:	|      move.l 190f0 <DOSBase>,d0
    40c0:	|      movea.l d0,a6
    40c2:	|      move.l 302(sp),d1
    40c6:	|      jsr -306(a6)
    40ca:	|      move.l d0,298(sp)
    40ce:	|      move.l 298(sp),d0
    40d2:	|      moveq #83,d1
    40d4:	|      cmp.l d0,d1
    40d6:	|  /-- beq.s 40de <openAndVerify+0xd4>
    40d8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    40de:	|  \-> move.l 306(sp),294(sp)
    40e4:	|      move.l 190f0 <DOSBase>,d0
    40ea:	|      movea.l d0,a6
    40ec:	|      move.l 294(sp),d1
    40f0:	|      jsr -306(a6)
    40f4:	|      move.l d0,290(sp)
    40f8:	|      move.l 290(sp),d0
    40fc:	|      moveq #76,d1
    40fe:	|      cmp.l d0,d1
    4100:	|  /-- beq.s 4108 <openAndVerify+0xfe>
    4102:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    4108:	|  \-> move.l 306(sp),286(sp)
    410e:	|      move.l 190f0 <DOSBase>,d0
    4114:	|      movea.l d0,a6
    4116:	|      move.l 286(sp),d1
    411a:	|      jsr -306(a6)
    411e:	|      move.l d0,282(sp)
    4122:	|      move.l 282(sp),d0
    4126:	|      moveq #85,d1
    4128:	|      cmp.l d0,d1
    412a:	|  /-- beq.s 4132 <openAndVerify+0x128>
    412c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    4132:	|  \-> move.l 306(sp),278(sp)
    4138:	|      move.l 190f0 <DOSBase>,d0
    413e:	|      movea.l d0,a6
    4140:	|      move.l 278(sp),d1
    4144:	|      jsr -306(a6)
    4148:	|      move.l d0,274(sp)
    414c:	|      move.l 274(sp),d0
    4150:	|      moveq #68,d1
    4152:	|      cmp.l d0,d1
    4154:	|  /-- beq.s 415c <openAndVerify+0x152>
    4156:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    415c:	|  \-> move.l 306(sp),270(sp)
    4162:	|      move.l 190f0 <DOSBase>,d0
    4168:	|      movea.l d0,a6
    416a:	|      move.l 270(sp),d1
    416e:	|      jsr -306(a6)
    4172:	|      move.l d0,266(sp)
    4176:	|      move.l 266(sp),d1
    417a:	|      move.b 16(sp),d0
    417e:	|      ext.w d0
    4180:	|      movea.w d0,a0
    4182:	|      cmpa.l d1,a0
    4184:	|  /-- beq.s 418c <openAndVerify+0x182>
    4186:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    418c:	|  \-> move.l 306(sp),262(sp)
    4192:	|      move.l 190f0 <DOSBase>,d0
    4198:	|      movea.l d0,a6
    419a:	|      move.l 262(sp),d1
    419e:	|      jsr -306(a6)
    41a2:	|      move.l d0,258(sp)
    41a6:	|      move.l 258(sp),d1
    41aa:	|      move.b 14(sp),d0
    41ae:	|      ext.w d0
    41b0:	|      movea.w d0,a0
    41b2:	|      cmpa.l d1,a0
    41b4:	|  /-- beq.s 41bc <openAndVerify+0x1b2>
    41b6:	|  |   move.w #1,322(sp)
	if (headerBad) {
    41bc:	|  \-> tst.w 322(sp)
    41c0:	|  /-- beq.s 4218 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    41c2:	|  |   move.l 190f0 <DOSBase>,d0
    41c8:	|  |   movea.l d0,a6
    41ca:	|  |   jsr -60(a6)
    41ce:	|  |   move.l d0,174(sp)
    41d2:	|  |   move.l 174(sp),d0
    41d6:	|  |   move.l d0,170(sp)
    41da:	|  |   move.l #86792,166(sp)
    41e2:	|  |   moveq #31,d0
    41e4:	|  |   move.l d0,162(sp)
    41e8:	|  |   move.l 190f0 <DOSBase>,d0
    41ee:	|  |   movea.l d0,a6
    41f0:	|  |   move.l 170(sp),d1
    41f4:	|  |   move.l 166(sp),d2
    41f8:	|  |   move.l 162(sp),d3
    41fc:	|  |   jsr -48(a6)
    4200:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4204:	|  |   pea 15308 <custom.c.177df80b+0x62f>
    420a:	|  |   jsr 13da6 <KPrintF>
    4210:	|  |   addq.l #4,sp
		return NULL;
    4212:	|  |   moveq #0,d0
    4214:	+--|-- bra.w 4370 <openAndVerify+0x366>
	}
	FGetC (fp);
    4218:	|  \-> move.l 306(sp),254(sp)
    421e:	|      move.l 190f0 <DOSBase>,d0
    4224:	|      movea.l d0,a6
    4226:	|      move.l 254(sp),d1
    422a:	|      jsr -306(a6)
    422e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    4232:	|      nop
    4234:	|  /-> move.l 306(sp),246(sp)
    423a:	|  |   move.l 190f0 <DOSBase>,d0
    4240:	|  |   movea.l d0,a6
    4242:	|  |   move.l 246(sp),d1
    4246:	|  |   jsr -306(a6)
    424a:	|  |   move.l d0,242(sp)
    424e:	|  |   move.l 242(sp),d0
    4252:	|  \-- bne.s 4234 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    4254:	|      move.l 306(sp),238(sp)
    425a:	|      move.l 190f0 <DOSBase>,d0
    4260:	|      movea.l d0,a6
    4262:	|      move.l 238(sp),d1
    4266:	|      jsr -306(a6)
    426a:	|      move.l d0,234(sp)
    426e:	|      move.l 234(sp),d0
    4272:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    4276:	|      move.l 306(sp),226(sp)
    427c:	|      move.l 190f0 <DOSBase>,d0
    4282:	|      movea.l d0,a6
    4284:	|      move.l 226(sp),d1
    4288:	|      jsr -306(a6)
    428c:	|      move.l d0,222(sp)
    4290:	|      move.l 222(sp),d0
    4294:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    4298:	|      move.l 230(sp),d0
    429c:	|      lsl.l #8,d0
    429e:	|      add.l 218(sp),d0
    42a2:	|      movea.l 344(sp),a0
    42a6:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    42a8:	|      movea.l 344(sp),a0
    42ac:	|      move.l (a0),d0
    42ae:	|      cmpi.l #514,d0
    42b4:	|  /-- ble.s 430a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    42b6:	|  |   move.l 190f0 <DOSBase>,d0
    42bc:	|  |   movea.l d0,a6
    42be:	|  |   jsr -60(a6)
    42c2:	|  |   move.l d0,194(sp)
    42c6:	|  |   move.l 194(sp),d0
    42ca:	|  |   move.l d0,190(sp)
    42ce:	|  |   move.l #86819,186(sp)
    42d6:	|  |   moveq #100,d1
    42d8:	|  |   move.l d1,182(sp)
    42dc:	|  |   move.l 190f0 <DOSBase>,d0
    42e2:	|  |   movea.l d0,a6
    42e4:	|  |   move.l 190(sp),d1
    42e8:	|  |   move.l 186(sp),d2
    42ec:	|  |   move.l 182(sp),d3
    42f0:	|  |   jsr -48(a6)
    42f4:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    42f8:	|  |   pea 15323 <custom.c.177df80b+0x64a>
    42fe:	|  |   jsr 13da6 <KPrintF>
    4304:	|  |   addq.l #4,sp
		return NULL;
    4306:	|  |   moveq #0,d0
    4308:	+--|-- bra.s 4370 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    430a:	|  \-> movea.l 344(sp),a0
    430e:	|      move.l (a0),d0
    4310:	|      cmpi.l #257,d0
    4316:	|  /-- bgt.s 436c <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    4318:	|  |   move.l 190f0 <DOSBase>,d0
    431e:	|  |   movea.l d0,a6
    4320:	|  |   jsr -60(a6)
    4324:	|  |   move.l d0,214(sp)
    4328:	|  |   move.l 214(sp),d0
    432c:	|  |   move.l d0,210(sp)
    4330:	|  |   move.l #86888,206(sp)
    4338:	|  |   moveq #100,d0
    433a:	|  |   move.l d0,202(sp)
    433e:	|  |   move.l 190f0 <DOSBase>,d0
    4344:	|  |   movea.l d0,a6
    4346:	|  |   move.l 210(sp),d1
    434a:	|  |   move.l 206(sp),d2
    434e:	|  |   move.l 202(sp),d3
    4352:	|  |   jsr -48(a6)
    4356:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    435a:	|  |   pea 15368 <custom.c.177df80b+0x68f>
    4360:	|  |   jsr 13da6 <KPrintF>
    4366:	|  |   addq.l #4,sp
		return NULL;
    4368:	|  |   moveq #0,d0
    436a:	+--|-- bra.s 4370 <openAndVerify+0x366>
	}
	return fp;
    436c:	|  \-> move.l 306(sp),d0
}
    4370:	\----> movem.l (sp)+,d2-d3/a6
    4374:	       lea 312(sp),sp
    4378:	       rts

0000437a <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    437a:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    437c:	          move.l #102528,(sp)
	while (* huntAndDestroy) {
    4382:	   /----- bra.s 43ae <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4384:	/--|----> movea.l (sp),a0
    4386:	|  |      move.l (a0),d0
    4388:	|  |      cmp.l 8(sp),d0
    438c:	|  |  /-- bne.s 43a4 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    438e:	|  |  |   movea.l (sp),a0
    4390:	|  |  |   movea.l (a0),a0
    4392:	|  |  |   move.l 44(a0),d0
    4396:	|  |  |   movea.l (sp),a0
    4398:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    439a:	|  |  |   movea.l 8(sp),a0
    439e:	|  |  |   clr.l 44(a0)
    43a2:	|  +--|-- bra.s 43ae <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    43a4:	|  |  \-> movea.l (sp),a0
    43a6:	|  |      move.l (a0),d0
    43a8:	|  |      moveq #44,d1
    43aa:	|  |      add.l d0,d1
    43ac:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    43ae:	|  \----> movea.l (sp),a0
    43b0:	|         move.l (a0),d0
    43b2:	\-------- bne.s 4384 <pauseFunction+0xa>
		}
	}
}
    43b4:	          nop
    43b6:	          nop
    43b8:	          addq.l #4,sp
    43ba:	          rts

000043bc <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    43bc:	move.l 19080 <allRunningFunctions>,d0
    43c2:	movea.l 4(sp),a0
    43c6:	move.l d0,44(a0)
	allRunningFunctions = fun;
    43ca:	move.l 4(sp),19080 <allRunningFunctions>
}
    43d2:	nop
    43d4:	rts

000043d6 <runSludge>:

BOOL runSludge () {
    43d6:	                   lea -12(sp),sp
    43da:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    43dc:	                   move.l 19080 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    43e4:	      /----------- bra.s 4460 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    43e6:	   /--|----------> movea.l 12(sp),a0
    43ea:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    43f0:	   |  |            movea.l 12(sp),a0
    43f4:	   |  |            move.b 56(a0),d0
    43f8:	   |  |  /-------- bne.s 445a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    43fa:	   |  |  |         movea.l 12(sp),a0
    43fe:	   |  |  |         move.l 12(a0),d0
    4402:	   |  |  |  /----- beq.s 442c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4404:	   |  |  |  |      movea.l 12(sp),a0
    4408:	   |  |  |  |      move.l 12(a0),d0
    440c:	   |  |  |  |  /-- bpl.s 4418 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    440e:	   |  |  |  |  |   movea.l 12(sp),a0
    4412:	   |  |  |  |  |   clr.l 12(a0)
    4416:	   |  |  +--|--|-- bra.s 445a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4418:	   |  |  |  |  \-> movea.l 12(sp),a0
    441c:	   |  |  |  |      move.l 12(a0),d0
    4420:	   |  |  |  |      subq.l #1,d0
    4422:	   |  |  |  |      movea.l 12(sp),a0
    4426:	   |  |  |  |      move.l d0,12(a0)
    442a:	   |  |  +--|----- bra.s 445a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    442c:	   |  |  |  \----> movea.l 12(sp),a0
    4430:	   |  |  |         move.w 50(a0),d0
    4434:	   |  |  |     /-- beq.s 4444 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4436:	   |  |  |     |   movea.l 12(sp),a0
    443a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    443e:	   |  |  |     |   jsr 5a20 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4444:	   |  |  |     \-> move.l 12(sp),-(sp)
    4448:	   |  |  |         jsr 2620 <continueFunction>
    444e:	   |  |  |         addq.l #4,sp
    4450:	   |  |  |         tst.w d0
    4452:	   |  |  +-------- bne.s 445a <runSludge+0x84>
					return FALSE;
    4454:	   |  |  |         clr.w d0
    4456:	/--|--|--|-------- bra.w 44e6 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    445a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    4460:	|  |  \----------> tst.l 12(sp)
    4464:	|  \-------------- bne.s 43e6 <runSludge+0x10>
	}

	if (loadNow) {
    4466:	|                  move.l 190b4 <loadNow>,d0
    446c:	|        /-------- beq.s 44e4 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    446e:	|        |         movea.l 190b4 <loadNow>,a0
    4474:	|        |         move.b (a0),d0
    4476:	|        |         cmpi.b #58,d0
    447a:	|        |  /----- bne.s 44ae <runSludge+0xd8>
			saveGame (loadNow + 1);
    447c:	|        |  |      move.l 190b4 <loadNow>,d0
    4482:	|        |  |      addq.l #1,d0
    4484:	|        |  |      move.l d0,-(sp)
    4486:	|        |  |      jsr 9fa0 <saveGame>
    448c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    448e:	|        |  |      movea.l 19206 <saverFunc>,a0
    4494:	|        |  |      lea 28(a0),a0
    4498:	|        |  |      pea 1 <_start+0x1>
    449c:	|        |  |      pea 1 <_start+0x1>
    44a0:	|        |  |      move.l a0,-(sp)
    44a2:	|        |  |      jsr 12650 <setVariable>
    44a8:	|        |  |      lea 12(sp),sp
    44ac:	|        |  |  /-- bra.s 44c6 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    44ae:	|        |  \--|-> move.l 190b4 <loadNow>,d0
    44b4:	|        |     |   move.l d0,-(sp)
    44b6:	|        |     |   jsr 9ae8 <loadGame>
    44bc:	|        |     |   addq.l #4,sp
    44be:	|        |     |   tst.w d0
    44c0:	|        |     +-- bne.s 44c6 <runSludge+0xf0>
    44c2:	|        |     |   clr.w d0
    44c4:	+--------|-----|-- bra.s 44e6 <runSludge+0x110>
		}
		FreeVec(loadNow);
    44c6:	|        |     \-> move.l 190b4 <loadNow>,8(sp)
    44ce:	|        |         move.l 190e8 <SysBase>,d0
    44d4:	|        |         movea.l d0,a6
    44d6:	|        |         movea.l 8(sp),a1
    44da:	|        |         jsr -690(a6)
		loadNow = NULL;
    44de:	|        |         clr.l 190b4 <loadNow>
	}

	return TRUE;
    44e4:	|        \-------> moveq #1,d0
}
    44e6:	\----------------> movea.l (sp)+,a6
    44e8:	                   lea 12(sp),sp
    44ec:	                   rts

000044ee <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    44ee:	movea.l 18a7a <currentEvents>,a0
    44f4:	move.l (a0),d0
    44f6:	move.l 4(sp),-(sp)
    44fa:	move.l d0,-(sp)
    44fc:	jsr 8d0 <put2bytes>
    4502:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4504:	movea.l 18a7a <currentEvents>,a0
    450a:	move.l 4(a0),d0
    450e:	move.l 4(sp),-(sp)
    4512:	move.l d0,-(sp)
    4514:	jsr 8d0 <put2bytes>
    451a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    451c:	movea.l 18a7a <currentEvents>,a0
    4522:	move.l 8(a0),d0
    4526:	move.l 4(sp),-(sp)
    452a:	move.l d0,-(sp)
    452c:	jsr 8d0 <put2bytes>
    4532:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4534:	movea.l 18a7a <currentEvents>,a0
    453a:	move.l 12(a0),d0
    453e:	move.l 4(sp),-(sp)
    4542:	move.l d0,-(sp)
    4544:	jsr 8d0 <put2bytes>
    454a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    454c:	movea.l 18a7a <currentEvents>,a0
    4552:	move.l 16(a0),d0
    4556:	move.l 4(sp),-(sp)
    455a:	move.l d0,-(sp)
    455c:	jsr 8d0 <put2bytes>
    4562:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    4564:	movea.l 18a7a <currentEvents>,a0
    456a:	move.l 20(a0),d0
    456e:	move.l 4(sp),-(sp)
    4572:	move.l d0,-(sp)
    4574:	jsr 8d0 <put2bytes>
    457a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    457c:	movea.l 18a7a <currentEvents>,a0
    4582:	move.l 24(a0),d0
    4586:	move.l 4(sp),-(sp)
    458a:	move.l d0,-(sp)
    458c:	jsr 8d0 <put2bytes>
    4592:	addq.l #8,sp
}
    4594:	nop
    4596:	rts

00004598 <sludgeDisplay>:

void sludgeDisplay () {	
	CstDrawBackdrop();
    4598:	jsr 11da <CstDrawBackdrop>
	drawPeople();
    459e:	jsr 78f4 <drawPeople>
	CstSwapBuffer();
    45a4:	jsr 1872 <CstSwapBuffer>
}
    45aa:	nop
    45ac:	rts

000045ae <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    45ae:	      /-- bra.s 45ce <stackSetByIndex+0x20>
		vS = vS->next;
    45b0:	/-----|-> movea.l 4(sp),a0
    45b4:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    45ba:	|     +-- bne.s 45ce <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    45bc:	|     |   pea 153af <custom.c.177df80b+0x6d6>
    45c2:	|     |   jsr 13da6 <KPrintF>
    45c8:	|     |   addq.l #4,sp
			return FALSE;
    45ca:	|     |   clr.w d0
    45cc:	|  /--|-- bra.s 45f0 <stackSetByIndex+0x42>
	while (theIndex--) {
    45ce:	|  |  \-> move.l 8(sp),d0
    45d2:	|  |      move.l d0,d1
    45d4:	|  |      subq.l #1,d1
    45d6:	|  |      move.l d1,8(sp)
    45da:	|  |      tst.l d0
    45dc:	\--|----- bne.s 45b0 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    45de:	   |      move.l 4(sp),d0
    45e2:	   |      move.l d0,-(sp)
    45e4:	   |      move.l 16(sp),-(sp)
    45e8:	   |      jsr 12218 <copyVariable>
    45ee:	   |      addq.l #8,sp
}
    45f0:	   \----> rts

000045f2 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    45f2:	             lea -24(sp),sp
    45f6:	             move.l a6,-(sp)
    45f8:	             move.l 48(sp),d0
    45fc:	             move.w d0,d0
    45fe:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4602:	             moveq #58,d0
    4604:	             move.l d0,24(sp)
    4608:	             clr.l 20(sp)
    460c:	             move.l 190e8 <SysBase>,d0
    4612:	             movea.l d0,a6
    4614:	             move.l 24(sp),d0
    4618:	             move.l 20(sp),d1
    461c:	             jsr -684(a6)
    4620:	             move.l d0,16(sp)
    4624:	             move.l 16(sp),d0
    4628:	             move.l d0,12(sp)
	if(!newFunc) {
    462c:	         /-- bne.s 4642 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    462e:	         |   pea 153c8 <custom.c.177df80b+0x6ef>
    4634:	         |   jsr 13da6 <KPrintF>
    463a:	         |   addq.l #4,sp
		return 0;
    463c:	         |   moveq #0,d0
    463e:	/--------|-- bra.w 4758 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4642:	|        \-> move.l 32(sp),d0
    4646:	|            movea.l 12(sp),a0
    464a:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    464c:	|            move.l 12(sp),-(sp)
    4650:	|            jsr 3d78 <loadFunctionCode>
    4656:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    4658:	|            movea.l 12(sp),a0
    465c:	|            move.l 16(a0),d1
    4660:	|            move.l 36(sp),d0
    4664:	|            cmp.l d1,d0
    4666:	|        /-- beq.s 467c <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    4668:	|        |   pea 153f1 <custom.c.177df80b+0x718>
    466e:	|        |   jsr 13da6 <KPrintF>
    4674:	|        |   addq.l #4,sp
		return NULL; 
    4676:	|        |   moveq #0,d0
    4678:	+--------|-- bra.w 4758 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    467c:	|        \-> movea.l 12(sp),a0
    4680:	|            move.l 16(a0),d1
    4684:	|            movea.l 12(sp),a0
    4688:	|            move.l 8(a0),d0
    468c:	|            cmp.l d1,d0
    468e:	|  /-------- bge.s 46f8 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4690:	|  |         pea 1540d <custom.c.177df80b+0x734>
    4696:	|  |         jsr 13da6 <KPrintF>
    469c:	|  |         addq.l #4,sp
		return NULL; 
    469e:	|  |         moveq #0,d0
    46a0:	+--|-------- bra.w 4758 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    46a4:	|  |  /----> movea.l 44(sp),a0
    46a8:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    46ac:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    46b0:	|  |  |      movea.l 44(sp),a0
    46b4:	|  |  |      move.l (a0),d0
    46b6:	|  |  |  /-- bne.s 46cc <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    46b8:	|  |  |  |   pea 15437 <custom.c.177df80b+0x75e>
    46be:	|  |  |  |   jsr 13da6 <KPrintF>
    46c4:	|  |  |  |   addq.l #4,sp
			return NULL;
    46c6:	|  |  |  |   moveq #0,d0
    46c8:	+--|--|--|-- bra.w 4758 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    46cc:	|  |  |  \-> movea.l 12(sp),a0
    46d0:	|  |  |      move.l 20(a0),d1
    46d4:	|  |  |      move.l 36(sp),d0
    46d8:	|  |  |      lsl.l #3,d0
    46da:	|  |  |      add.l d0,d1
    46dc:	|  |  |      move.l 8(sp),d0
    46e0:	|  |  |      move.l d1,-(sp)
    46e2:	|  |  |      move.l d0,-(sp)
    46e4:	|  |  |      jsr 12218 <copyVariable>
    46ea:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    46ec:	|  |  |      move.l 44(sp),-(sp)
    46f0:	|  |  |      jsr 126e2 <trimStack>
    46f6:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    46f8:	|  \--|----> tst.l 36(sp)
    46fc:	|     \----- bne.s 46a4 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    46fe:	|            movea.l 12(sp),a0
    4702:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4706:	|            movea.l 12(sp),a0
    470a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    470e:	|            movea.l 12(sp),a0
    4712:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4718:	|            movea.l 12(sp),a0
    471c:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4722:	|            movea.l 12(sp),a0
    4726:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    472a:	|            movea.l 12(sp),a0
    472e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4732:	|            movea.l 12(sp),a0
    4736:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    473a:	|            movea.l 12(sp),a0
    473e:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    4742:	|            movea.l 12(sp),a0
    4746:	|            clr.l 28(a0)

	restartFunction (newFunc);
    474a:	|            move.l 12(sp),-(sp)
    474e:	|            jsr 43bc <restartFunction>
    4754:	|            addq.l #4,sp
	return 1;
    4756:	|            moveq #1,d0
}
    4758:	\----------> movea.l (sp)+,a6
    475a:	             lea 24(sp),sp
    475e:	             rts

00004760 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    4760:	clr.w 18a86 <sliceBusy>
}
    4766:	nop
    4768:	rts

0000476a <getNumberedString>:

char * getNumberedString (int value) {
    476a:	       lea -56(sp),sp
    476e:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4772:	       move.w 18a86 <sliceBusy>,d0
    4778:	   /-- beq.s 47c2 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    477a:	   |   move.l 190f0 <DOSBase>,d0
    4780:	   |   movea.l d0,a6
    4782:	   |   jsr -60(a6)
    4786:	   |   move.l d0,28(sp)
    478a:	   |   move.l 28(sp),d0
    478e:	   |   move.l d0,24(sp)
    4792:	   |   move.l #87170,20(sp)
    479a:	   |   moveq #76,d0
    479c:	   |   move.l d0,16(sp)
    47a0:	   |   move.l 190f0 <DOSBase>,d0
    47a6:	   |   movea.l d0,a6
    47a8:	   |   move.l 24(sp),d1
    47ac:	   |   move.l 20(sp),d2
    47b0:	   |   move.l 16(sp),d3
    47b4:	   |   jsr -48(a6)
    47b8:	   |   move.l d0,12(sp)
		return NULL;
    47bc:	   |   moveq #0,d0
    47be:	/--|-- bra.w 485e <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    47c2:	|  \-> move.l 190d0 <bigDataFile>,64(sp)
    47ca:	|      move.l 72(sp),d0
    47ce:	|      add.l d0,d0
    47d0:	|      add.l d0,d0
    47d2:	|      move.l d0,d1
    47d4:	|      move.l 190dc <startOfTextIndex>,d0
    47da:	|      add.l d1,d0
    47dc:	|      move.l d0,60(sp)
    47e0:	|      moveq #-1,d0
    47e2:	|      move.l d0,56(sp)
    47e6:	|      move.l 190f0 <DOSBase>,d0
    47ec:	|      movea.l d0,a6
    47ee:	|      move.l 64(sp),d1
    47f2:	|      move.l 60(sp),d2
    47f6:	|      move.l 56(sp),d3
    47fa:	|      jsr -66(a6)
    47fe:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4802:	|      move.l 190d0 <bigDataFile>,d0
    4808:	|      move.l d0,-(sp)
    480a:	|      jsr 718 <get4bytes>
    4810:	|      addq.l #4,sp
    4812:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4816:	|      move.l 190d0 <bigDataFile>,48(sp)
    481e:	|      move.l 72(sp),44(sp)
    4824:	|      moveq #-1,d0
    4826:	|      move.l d0,40(sp)
    482a:	|      move.l 190f0 <DOSBase>,d0
    4830:	|      movea.l d0,a6
    4832:	|      move.l 48(sp),d1
    4836:	|      move.l 44(sp),d2
    483a:	|      move.l 40(sp),d3
    483e:	|      jsr -66(a6)
    4842:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    4846:	|      move.l 190d0 <bigDataFile>,d0
    484c:	|      move.l d0,-(sp)
    484e:	|      jsr b02 <readString>
    4854:	|      addq.l #4,sp
    4856:	|      move.l d0,32(sp)
	
	return s;
    485a:	|      move.l 32(sp),d0
}
    485e:	\----> movem.l (sp)+,d2-d3/a6
    4862:	       lea 56(sp),sp
    4866:	       rts

00004868 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    4868:	       lea -32(sp),sp
    486c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    4870:	       move.w 18a86 <sliceBusy>,d0
    4876:	   /-- beq.s 4892 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4878:	   |   pea 154cf <custom.c.177df80b+0x7f6>
    487e:	   |   pea 154ed <custom.c.177df80b+0x814>
    4884:	   |   jsr 13da6 <KPrintF>
    488a:	   |   addq.l #8,sp
		return 0;
    488c:	   |   moveq #0,d0
    488e:	/--|-- bra.w 4926 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4892:	|  \-> move.l 190d0 <bigDataFile>,40(sp)
    489a:	|      move.l 48(sp),d0
    489e:	|      add.l d0,d0
    48a0:	|      add.l d0,d0
    48a2:	|      move.l d0,d1
    48a4:	|      move.l 190d8 <startOfDataIndex>,d0
    48aa:	|      add.l d1,d0
    48ac:	|      move.l d0,36(sp)
    48b0:	|      moveq #-1,d0
    48b2:	|      move.l d0,32(sp)
    48b6:	|      move.l 190f0 <DOSBase>,d0
    48bc:	|      movea.l d0,a6
    48be:	|      move.l 40(sp),d1
    48c2:	|      move.l 36(sp),d2
    48c6:	|      move.l 32(sp),d3
    48ca:	|      jsr -66(a6)
    48ce:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    48d2:	|      move.l 190d0 <bigDataFile>,24(sp)
    48da:	|      move.l 190d0 <bigDataFile>,d0
    48e0:	|      move.l d0,-(sp)
    48e2:	|      jsr 718 <get4bytes>
    48e8:	|      addq.l #4,sp
    48ea:	|      move.l d0,20(sp)
    48ee:	|      clr.l 16(sp)
    48f2:	|      move.l 190f0 <DOSBase>,d0
    48f8:	|      movea.l d0,a6
    48fa:	|      move.l 24(sp),d1
    48fe:	|      move.l 20(sp),d2
    4902:	|      move.l 16(sp),d3
    4906:	|      jsr -66(a6)
    490a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    490e:	|      move.w #1,18a86 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4916:	|      move.l 190d0 <bigDataFile>,d0
    491c:	|      move.l d0,-(sp)
    491e:	|      jsr 718 <get4bytes>
    4924:	|      addq.l #4,sp
}
    4926:	\----> movem.l (sp)+,d2-d3/a6
    492a:	       lea 32(sp),sp
    492e:	       rts

00004930 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    4930:	       lea -32(sp),sp
    4934:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    4938:	       move.w 18a86 <sliceBusy>,d0
    493e:	   /-- beq.s 495a <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    4940:	   |   pea 154cf <custom.c.177df80b+0x7f6>
    4946:	   |   pea 154ed <custom.c.177df80b+0x814>
    494c:	   |   jsr 13da6 <KPrintF>
    4952:	   |   addq.l #8,sp
        return FALSE;
    4954:	   |   clr.w d0
    4956:	/--|-- bra.w 49e6 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    495a:	|  \-> move.l 190d0 <bigDataFile>,40(sp)
    4962:	|      move.l 48(sp),d0
    4966:	|      add.l d0,d0
    4968:	|      add.l d0,d0
    496a:	|      move.l d0,d1
    496c:	|      move.l 190e4 <startOfObjectIndex>,d0
    4972:	|      add.l d1,d0
    4974:	|      move.l d0,36(sp)
    4978:	|      moveq #-1,d0
    497a:	|      move.l d0,32(sp)
    497e:	|      move.l 190f0 <DOSBase>,d0
    4984:	|      movea.l d0,a6
    4986:	|      move.l 40(sp),d1
    498a:	|      move.l 36(sp),d2
    498e:	|      move.l 32(sp),d3
    4992:	|      jsr -66(a6)
    4996:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    499a:	|      move.l 190d0 <bigDataFile>,24(sp)
    49a2:	|      move.l 190d0 <bigDataFile>,d0
    49a8:	|      move.l d0,-(sp)
    49aa:	|      jsr 718 <get4bytes>
    49b0:	|      addq.l #4,sp
    49b2:	|      move.l d0,20(sp)
    49b6:	|      moveq #-1,d0
    49b8:	|      move.l d0,16(sp)
    49bc:	|      move.l 190f0 <DOSBase>,d0
    49c2:	|      movea.l d0,a6
    49c4:	|      move.l 24(sp),d1
    49c8:	|      move.l 20(sp),d2
    49cc:	|      move.l 16(sp),d3
    49d0:	|      jsr -66(a6)
    49d4:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    49d8:	|      move.w #1,18a86 <sliceBusy>
    49e0:	|      move.w 18a86 <sliceBusy>,d0
}
    49e6:	\----> movem.l (sp)+,d2-d3/a6
    49ea:	       lea 32(sp),sp
    49ee:	       rts

000049f0 <openSubSlice>:

BOOL openSubSlice (int num) {
    49f0:	       lea -32(sp),sp
    49f4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    49f8:	       move.w 18a86 <sliceBusy>,d0
    49fe:	   /-- beq.s 4a1a <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4a00:	   |   pea 154cf <custom.c.177df80b+0x7f6>
    4a06:	   |   pea 154ed <custom.c.177df80b+0x814>
    4a0c:	   |   jsr 13da6 <KPrintF>
    4a12:	   |   addq.l #8,sp
		return FALSE;
    4a14:	   |   clr.w d0
    4a16:	/--|-- bra.w 4aa6 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4a1a:	|  \-> move.l 190d0 <bigDataFile>,40(sp)
    4a22:	|      move.l 48(sp),d0
    4a26:	|      add.l d0,d0
    4a28:	|      add.l d0,d0
    4a2a:	|      move.l d0,d1
    4a2c:	|      move.l 190e0 <startOfSubIndex>,d0
    4a32:	|      add.l d1,d0
    4a34:	|      move.l d0,36(sp)
    4a38:	|      moveq #-1,d0
    4a3a:	|      move.l d0,32(sp)
    4a3e:	|      move.l 190f0 <DOSBase>,d0
    4a44:	|      movea.l d0,a6
    4a46:	|      move.l 40(sp),d1
    4a4a:	|      move.l 36(sp),d2
    4a4e:	|      move.l 32(sp),d3
    4a52:	|      jsr -66(a6)
    4a56:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4a5a:	|      move.l 190d0 <bigDataFile>,24(sp)
    4a62:	|      move.l 190d0 <bigDataFile>,d0
    4a68:	|      move.l d0,-(sp)
    4a6a:	|      jsr 718 <get4bytes>
    4a70:	|      addq.l #4,sp
    4a72:	|      move.l d0,20(sp)
    4a76:	|      moveq #-1,d0
    4a78:	|      move.l d0,16(sp)
    4a7c:	|      move.l 190f0 <DOSBase>,d0
    4a82:	|      movea.l d0,a6
    4a84:	|      move.l 24(sp),d1
    4a88:	|      move.l 20(sp),d2
    4a8c:	|      move.l 16(sp),d3
    4a90:	|      jsr -66(a6)
    4a94:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4a98:	|      move.w #1,18a86 <sliceBusy>
    4aa0:	|      move.w 18a86 <sliceBusy>,d0
}
    4aa6:	\----> movem.l (sp)+,d2-d3/a6
    4aaa:	       lea 32(sp),sp
    4aae:	       rts

00004ab0 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4ab0:	       lea -180(sp),sp
    4ab4:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4ab8:	       tst.l 196(sp)
    4abc:	/----- beq.s 4afc <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4abe:	|      move.l 196(sp),190d0 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4ac6:	|      move.l 196(sp),168(sp)
    4acc:	|      clr.l 164(sp)
    4ad0:	|      clr.l 160(sp)
    4ad4:	|      move.l 190f0 <DOSBase>,d0
    4ada:	|      movea.l d0,a6
    4adc:	|      move.l 168(sp),d1
    4ae0:	|      move.l 164(sp),d2
    4ae4:	|      move.l 160(sp),d3
    4ae8:	|      jsr -66(a6)
    4aec:	|      move.l d0,156(sp)
    4af0:	|      move.l 156(sp),d0
    4af4:	|      move.l d0,190d4 <startIndex>
    4afa:	|  /-- bra.s 4b36 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4afc:	\--|-> move.l 190d0 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4b04:	   |   move.l 196(sp),184(sp)
    4b0a:	   |   move.l 190d4 <startIndex>,d0
    4b10:	   |   move.l d0,180(sp)
    4b14:	   |   moveq #-1,d0
    4b16:	   |   move.l d0,176(sp)
    4b1a:	   |   move.l 190f0 <DOSBase>,d0
    4b20:	   |   movea.l d0,a6
    4b22:	   |   move.l 184(sp),d1
    4b26:	   |   move.l 180(sp),d2
    4b2a:	   |   move.l 176(sp),d3
    4b2e:	   |   jsr -66(a6)
    4b32:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4b36:	   \-> clr.w 18a86 <sliceBusy>

	if (skipBefore > numLanguages) {
    4b3c:	       move.l 204(sp),d0
    4b40:	       cmp.l 200(sp),d0
    4b44:	   /-- bls.s 4b58 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4b46:	   |   pea 15507 <custom.c.177df80b+0x82e>
    4b4c:	   |   jsr 13da6 <KPrintF>
    4b52:	   |   addq.l #4,sp
		skipBefore = 0;
    4b54:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4b58:	   \-> move.l 200(sp),d0
    4b5c:	       sub.l 204(sp),d0
    4b60:	       move.l d0,188(sp)
	while (skipBefore) {
    4b64:	   /-- bra.s 4ba2 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4b66:	/--|-> move.l 196(sp),24(sp)
    4b6c:	|  |   move.l 196(sp),-(sp)
    4b70:	|  |   jsr 718 <get4bytes>
    4b76:	|  |   addq.l #4,sp
    4b78:	|  |   move.l d0,20(sp)
    4b7c:	|  |   moveq #-1,d0
    4b7e:	|  |   move.l d0,16(sp)
    4b82:	|  |   move.l 190f0 <DOSBase>,d0
    4b88:	|  |   movea.l d0,a6
    4b8a:	|  |   move.l 24(sp),d1
    4b8e:	|  |   move.l 20(sp),d2
    4b92:	|  |   move.l 16(sp),d3
    4b96:	|  |   jsr -66(a6)
    4b9a:	|  |   move.l d0,12(sp)
		skipBefore --;
    4b9e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4ba2:	|  \-> tst.l 204(sp)
    4ba6:	\----- bne.s 4b66 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4ba8:	       move.l 196(sp),152(sp)
    4bae:	       clr.l 148(sp)
    4bb2:	       clr.l 144(sp)
    4bb6:	       move.l 190f0 <DOSBase>,d0
    4bbc:	       movea.l d0,a6
    4bbe:	       move.l 152(sp),d1
    4bc2:	       move.l 148(sp),d2
    4bc6:	       move.l 144(sp),d3
    4bca:	       jsr -66(a6)
    4bce:	       move.l d0,140(sp)
    4bd2:	       move.l 140(sp),d0
    4bd6:	       addq.l #4,d0
    4bd8:	       move.l d0,190dc <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4bde:	       move.l 196(sp),136(sp)
    4be4:	       move.l 196(sp),-(sp)
    4be8:	       jsr 718 <get4bytes>
    4bee:	       addq.l #4,sp
    4bf0:	       move.l d0,132(sp)
    4bf4:	       moveq #-1,d0
    4bf6:	       move.l d0,128(sp)
    4bfa:	       move.l 190f0 <DOSBase>,d0
    4c00:	       movea.l d0,a6
    4c02:	       move.l 136(sp),d1
    4c06:	       move.l 132(sp),d2
    4c0a:	       move.l 128(sp),d3
    4c0e:	       jsr -66(a6)
    4c12:	       move.l d0,124(sp)

	while (skipAfter) {
    4c16:	   /-- bra.s 4c54 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4c18:	/--|-> move.l 196(sp),40(sp)
    4c1e:	|  |   move.l 196(sp),-(sp)
    4c22:	|  |   jsr 718 <get4bytes>
    4c28:	|  |   addq.l #4,sp
    4c2a:	|  |   move.l d0,36(sp)
    4c2e:	|  |   moveq #-1,d0
    4c30:	|  |   move.l d0,32(sp)
    4c34:	|  |   move.l 190f0 <DOSBase>,d0
    4c3a:	|  |   movea.l d0,a6
    4c3c:	|  |   move.l 40(sp),d1
    4c40:	|  |   move.l 36(sp),d2
    4c44:	|  |   move.l 32(sp),d3
    4c48:	|  |   jsr -66(a6)
    4c4c:	|  |   move.l d0,28(sp)
		skipAfter --;
    4c50:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4c54:	|  \-> tst.l 188(sp)
    4c58:	\----- bne.s 4c18 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4c5a:	       move.l 196(sp),120(sp)
    4c60:	       clr.l 116(sp)
    4c64:	       clr.l 112(sp)
    4c68:	       move.l 190f0 <DOSBase>,d0
    4c6e:	       movea.l d0,a6
    4c70:	       move.l 120(sp),d1
    4c74:	       move.l 116(sp),d2
    4c78:	       move.l 112(sp),d3
    4c7c:	       jsr -66(a6)
    4c80:	       move.l d0,108(sp)
    4c84:	       move.l 108(sp),d0
    4c88:	       addq.l #4,d0
    4c8a:	       move.l d0,190e0 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4c90:	       move.l 196(sp),104(sp)
    4c96:	       move.l 196(sp),-(sp)
    4c9a:	       jsr 718 <get4bytes>
    4ca0:	       addq.l #4,sp
    4ca2:	       move.l d0,100(sp)
    4ca6:	       clr.l 96(sp)
    4caa:	       move.l 190f0 <DOSBase>,d0
    4cb0:	       movea.l d0,a6
    4cb2:	       move.l 104(sp),d1
    4cb6:	       move.l 100(sp),d2
    4cba:	       move.l 96(sp),d3
    4cbe:	       jsr -66(a6)
    4cc2:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4cc6:	       move.l 196(sp),88(sp)
    4ccc:	       clr.l 84(sp)
    4cd0:	       clr.l 80(sp)
    4cd4:	       move.l 190f0 <DOSBase>,d0
    4cda:	       movea.l d0,a6
    4cdc:	       move.l 88(sp),d1
    4ce0:	       move.l 84(sp),d2
    4ce4:	       move.l 80(sp),d3
    4ce8:	       jsr -66(a6)
    4cec:	       move.l d0,76(sp)
    4cf0:	       move.l 76(sp),d0
    4cf4:	       addq.l #4,d0
    4cf6:	       move.l d0,190e4 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4cfc:	       move.l 196(sp),72(sp)
    4d02:	       move.l 196(sp),-(sp)
    4d06:	       jsr 718 <get4bytes>
    4d0c:	       addq.l #4,sp
    4d0e:	       move.l d0,68(sp)
    4d12:	       clr.l 64(sp)
    4d16:	       move.l 190f0 <DOSBase>,d0
    4d1c:	       movea.l d0,a6
    4d1e:	       move.l 72(sp),d1
    4d22:	       move.l 68(sp),d2
    4d26:	       move.l 64(sp),d3
    4d2a:	       jsr -66(a6)
    4d2e:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4d32:	       move.l 196(sp),56(sp)
    4d38:	       clr.l 52(sp)
    4d3c:	       clr.l 48(sp)
    4d40:	       move.l 190f0 <DOSBase>,d0
    4d46:	       movea.l d0,a6
    4d48:	       move.l 56(sp),d1
    4d4c:	       move.l 52(sp),d2
    4d50:	       move.l 48(sp),d3
    4d54:	       jsr -66(a6)
    4d58:	       move.l d0,44(sp)
    4d5c:	       move.l 44(sp),d0
    4d60:	       move.l d0,190d8 <startOfDataIndex>
    4d66:	       nop
    4d68:	       movem.l (sp)+,d2-d3/a6
    4d6c:	       lea 180(sp),sp
    4d70:	       rts

00004d72 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4d72:	    lea -20(sp),sp
    4d76:	    move.l a6,-(sp)
    4d78:	    move.l d7,-(sp)
	APTR vbr = 0;
    4d7a:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4d7e:	    move.w #20090,10(sp)
    4d84:	    move.w #2049,12(sp)
    4d8a:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4d90:	    movea.l 190e8 <SysBase>,a0
    4d96:	    move.w 296(a0),d0
    4d9a:	    move.w d0,d0
    4d9c:	    andi.l #65535,d0
    4da2:	    moveq #1,d1
    4da4:	    and.l d1,d0
    4da6:	/-- beq.s 4dd4 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4da8:	|   lea 28(sp),a0
    4dac:	|   lea -18(a0),a0
    4db0:	|   move.l a0,20(sp)
    4db4:	|   move.l 190e8 <SysBase>,d0
    4dba:	|   movea.l d0,a6
    4dbc:	|   move.l 20(sp),d7
    4dc0:	|   exg d7,a5
    4dc2:	|   jsr -30(a6)
    4dc6:	|   exg d7,a5
    4dc8:	|   move.l d0,16(sp)
    4dcc:	|   move.l 16(sp),d0
    4dd0:	|   move.l d0,24(sp)

	return vbr;
    4dd4:	\-> move.l 24(sp),d0
}
    4dd8:	    move.l (sp)+,d7
    4dda:	    movea.l (sp)+,a6
    4ddc:	    lea 20(sp),sp
    4de0:	    rts

00004de2 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4de2:	movea.l 1910e <VBR>,a0
    4de8:	lea 108(a0),a0
    4dec:	move.l 4(sp),(a0)
}
    4df0:	nop
    4df2:	rts

00004df4 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4df4:	movea.l 1910e <VBR>,a0
    4dfa:	move.l 108(a0),d0
}
    4dfe:	rts

00004e00 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4e00:	       subq.l #8,sp
    4e02:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    4e04:	       pea 15550 <custom.c.177df80b+0x877>
    4e0a:	       jsr 13da6 <KPrintF>
    4e10:	       addq.l #4,sp
	Forbid();
    4e12:	       move.l 190e8 <SysBase>,d0
    4e18:	       movea.l d0,a6
    4e1a:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    4e1e:	       pea 15568 <custom.c.177df80b+0x88f>
    4e24:	       jsr 13da6 <KPrintF>
    4e2a:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    4e2c:	       movea.l 190ec <custom>,a0
    4e32:	       move.w 16(a0),d0
    4e36:	       move.w d0,1910c <SystemADKCON>
	SystemInts=custom->intenar;
    4e3c:	       movea.l 190ec <custom>,a0
    4e42:	       move.w 28(a0),d0
    4e46:	       move.w d0,19108 <SystemInts>
	SystemDMA=custom->dmaconr;
    4e4c:	       movea.l 190ec <custom>,a0
    4e52:	       move.w 2(a0),d0
    4e56:	       move.w d0,1910a <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4e5c:	       movea.l 190f4 <GfxBase>,a0
    4e62:	       move.l 34(a0),d0
    4e66:	       move.l d0,19116 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    4e6c:	       pea 15586 <custom.c.177df80b+0x8ad>
    4e72:	       jsr 13da6 <KPrintF>
    4e78:	       addq.l #4,sp
	LoadView(0);
    4e7a:	       clr.l 4(sp)
    4e7e:	       move.l 190f4 <GfxBase>,d0
    4e84:	       movea.l d0,a6
    4e86:	       movea.l 4(sp),a1
    4e8a:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    4e8e:	       pea 1559c <custom.c.177df80b+0x8c3>
    4e94:	       jsr 13da6 <KPrintF>
    4e9a:	       addq.l #4,sp
	WaitTOF();
    4e9c:	       move.l 190f4 <GfxBase>,d0
    4ea2:	       movea.l d0,a6
    4ea4:	       jsr -270(a6)
	WaitTOF();
    4ea8:	       move.l 190f4 <GfxBase>,d0
    4eae:	       movea.l d0,a6
    4eb0:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    4eb4:	       pea 155b1 <custom.c.177df80b+0x8d8>
    4eba:	       jsr 13da6 <KPrintF>
    4ec0:	       addq.l #4,sp
	WaitVbl();
    4ec2:	       jsr 13cda <WaitVbl>
	WaitVbl();
    4ec8:	       jsr 13cda <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    4ece:	       pea 155c6 <custom.c.177df80b+0x8ed>
    4ed4:	       jsr 13da6 <KPrintF>
    4eda:	       addq.l #4,sp
	OwnBlitter();
    4edc:	       move.l 190f4 <GfxBase>,d0
    4ee2:	       movea.l d0,a6
    4ee4:	       jsr -456(a6)
	WaitBlit();	
    4ee8:	       move.l 190f4 <GfxBase>,d0
    4eee:	       movea.l d0,a6
    4ef0:	       jsr -228(a6)
	Disable();
    4ef4:	       move.l 190e8 <SysBase>,d0
    4efa:	       movea.l d0,a6
    4efc:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    4f00:	       pea 155e7 <custom.c.177df80b+0x90e>
    4f06:	       jsr 13da6 <KPrintF>
    4f0c:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    4f0e:	       movea.l 190ec <custom>,a0
    4f14:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    4f1a:	       pea 155fe <custom.c.177df80b+0x925>
    4f20:	       jsr 13da6 <KPrintF>
    4f26:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    4f28:	       clr.l 8(sp)
    4f2c:	   /-- bra.s 4f4a <TakeSystem+0x14a>
		custom->color[a]=0;
    4f2e:	/--|-> movea.l 190ec <custom>,a0
    4f34:	|  |   move.l 8(sp),d0
    4f38:	|  |   addi.l #192,d0
    4f3e:	|  |   add.l d0,d0
    4f40:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4f46:	|  |   addq.l #1,8(sp)
    4f4a:	|  \-> moveq #31,d0
    4f4c:	|      cmp.l 8(sp),d0
    4f50:	\----- bge.s 4f2e <TakeSystem+0x12e>

	WaitVbl();
    4f52:	       jsr 13cda <WaitVbl>
	WaitVbl();
    4f58:	       jsr 13cda <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    4f5e:	       pea 15623 <custom.c.177df80b+0x94a>
    4f64:	       jsr 13da6 <KPrintF>
    4f6a:	       addq.l #4,sp
	VBR=GetVBR();
    4f6c:	       jsr 4d72 <GetVBR>
    4f72:	       move.l d0,1910e <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4f78:	       jsr 4df4 <GetInterruptHandler>
    4f7e:	       move.l d0,19112 <SystemIrq>
}
    4f84:	       nop
    4f86:	       movea.l (sp)+,a6
    4f88:	       addq.l #8,sp
    4f8a:	       rts

00004f8c <FreeSystem>:

void FreeSystem() { 
    4f8c:	subq.l #4,sp
    4f8e:	move.l a6,-(sp)
	WaitVbl();
    4f90:	jsr 13cda <WaitVbl>
	WaitBlit();
    4f96:	move.l 190f4 <GfxBase>,d0
    4f9c:	movea.l d0,a6
    4f9e:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4fa2:	movea.l 190ec <custom>,a0
    4fa8:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4fae:	movea.l 190ec <custom>,a0
    4fb4:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4fba:	movea.l 190ec <custom>,a0
    4fc0:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4fc6:	move.l 19112 <SystemIrq>,d0
    4fcc:	move.l d0,-(sp)
    4fce:	jsr 4de2 <SetInterruptHandler>
    4fd4:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4fd6:	movea.l 190f4 <GfxBase>,a0
    4fdc:	move.l 38(a0),d0
    4fe0:	movea.l 190ec <custom>,a0
    4fe6:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4fea:	movea.l 190f4 <GfxBase>,a0
    4ff0:	move.l 50(a0),d0
    4ff4:	movea.l 190ec <custom>,a0
    4ffa:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4ffe:	movea.l 190ec <custom>,a0
    5004:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    500a:	move.w 1910a <SystemDMA>,d0
    5010:	movea.l 190ec <custom>,a0
    5016:	ori.w #-32768,d0
    501a:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    501e:	move.w 1910c <SystemADKCON>,d0
    5024:	movea.l 190ec <custom>,a0
    502a:	ori.w #-32768,d0
    502e:	move.w d0,158(a0)

	WaitBlit();	
    5032:	move.l 190f4 <GfxBase>,d0
    5038:	movea.l d0,a6
    503a:	jsr -228(a6)
	DisownBlitter();
    503e:	move.l 190f4 <GfxBase>,d0
    5044:	movea.l d0,a6
    5046:	jsr -462(a6)
	Enable();
    504a:	move.l 190e8 <SysBase>,d0
    5050:	movea.l d0,a6
    5052:	jsr -126(a6)

	LoadView(ActiView);
    5056:	move.l 19116 <ActiView>,4(sp)
    505e:	move.l 190f4 <GfxBase>,d0
    5064:	movea.l d0,a6
    5066:	movea.l 4(sp),a1
    506a:	jsr -222(a6)
	WaitTOF();
    506e:	move.l 190f4 <GfxBase>,d0
    5074:	movea.l d0,a6
    5076:	jsr -270(a6)
	WaitTOF();
    507a:	move.l 190f4 <GfxBase>,d0
    5080:	movea.l d0,a6
    5082:	jsr -270(a6)

	Permit();
    5086:	move.l 190e8 <SysBase>,d0
    508c:	movea.l d0,a6
    508e:	jsr -138(a6)
}
    5092:	nop
    5094:	movea.l (sp)+,a6
    5096:	addq.l #4,sp
    5098:	rts

0000509a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    509a:	    lea -128(sp),sp
    509e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    50a2:	    movea.w #4,a0
    50a6:	    move.l (a0),d0
    50a8:	    move.l d0,190e8 <SysBase>
	custom = (struct Custom*)0xdff000;	
    50ae:	    move.l #14675968,190ec <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    50b8:	    move.l #87623,136(sp)
    50c0:	    clr.l 132(sp)
    50c4:	    move.l 190e8 <SysBase>,d0
    50ca:	    movea.l d0,a6
    50cc:	    movea.l 136(sp),a1
    50d0:	    move.l 132(sp),d0
    50d4:	    jsr -552(a6)
    50d8:	    move.l d0,128(sp)
    50dc:	    move.l 128(sp),d0
    50e0:	    move.l d0,190f4 <GfxBase>
	if (!GfxBase)
    50e6:	    move.l 190f4 <GfxBase>,d0
    50ec:	/-- bne.s 5102 <main+0x68>
		Exit(0);
    50ee:	|   clr.l 124(sp)
    50f2:	|   move.l 190f0 <DOSBase>,d0
    50f8:	|   movea.l d0,a6
    50fa:	|   move.l 124(sp),d1
    50fe:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5102:	\-> move.l #87640,120(sp)
    510a:	    clr.l 116(sp)
    510e:	    move.l 190e8 <SysBase>,d0
    5114:	    movea.l d0,a6
    5116:	    movea.l 120(sp),a1
    511a:	    move.l 116(sp),d0
    511e:	    jsr -552(a6)
    5122:	    move.l d0,112(sp)
    5126:	    move.l 112(sp),d0
    512a:	    move.l d0,190f0 <DOSBase>
	if (!DOSBase)
    5130:	    move.l 190f0 <DOSBase>,d0
    5136:	/-- bne.s 514c <main+0xb2>
		Exit(0);
    5138:	|   clr.l 108(sp)
    513c:	|   move.l 190f0 <DOSBase>,d0
    5142:	|   movea.l d0,a6
    5144:	|   move.l 108(sp),d1
    5148:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    514c:	\-> move.l #87652,104(sp)
    5154:	    clr.l 100(sp)
    5158:	    move.l 190e8 <SysBase>,d0
    515e:	    movea.l d0,a6
    5160:	    movea.l 104(sp),a1
    5164:	    move.l 100(sp),d0
    5168:	    jsr -552(a6)
    516c:	    move.l d0,96(sp)
    5170:	    move.l 96(sp),d0
    5174:	    move.l d0,190f8 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    517a:	    move.l 190f8 <MathIeeeSingBasBase>,d0
    5180:	/-- bne.s 5196 <main+0xfc>
		Exit(0);	
    5182:	|   clr.l 92(sp)
    5186:	|   move.l 190f0 <DOSBase>,d0
    518c:	|   movea.l d0,a6
    518e:	|   move.l 92(sp),d1
    5192:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    5196:	\-> move.l #87676,88(sp)
    519e:	    clr.l 84(sp)
    51a2:	    move.l 190e8 <SysBase>,d0
    51a8:	    movea.l d0,a6
    51aa:	    movea.l 88(sp),a1
    51ae:	    move.l 84(sp),d0
    51b2:	    jsr -552(a6)
    51b6:	    move.l d0,80(sp)
    51ba:	    move.l 80(sp),d0
    51be:	    move.l d0,190fc <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    51c4:	    move.l 190fc <MathIeeeSingTransBase>,d0
    51ca:	/-- bne.s 51e0 <main+0x146>
		Exit(0);
    51cc:	|   clr.l 76(sp)
    51d0:	|   move.l 190f0 <DOSBase>,d0
    51d6:	|   movea.l d0,a6
    51d8:	|   move.l 76(sp),d1
    51dc:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    51e0:	\-> move.l #87702,72(sp)
    51e8:	    clr.l 68(sp)
    51ec:	    move.l 190e8 <SysBase>,d0
    51f2:	    movea.l d0,a6
    51f4:	    movea.l 72(sp),a1
    51f8:	    move.l 68(sp),d0
    51fc:	    jsr -552(a6)
    5200:	    move.l d0,64(sp)
    5204:	    move.l 64(sp),d0
    5208:	    move.l d0,19104 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    520e:	    move.l 19104 <MathIeeeDoubTransBase>,d0
    5214:	/-- bne.s 522a <main+0x190>
		Exit(0);
    5216:	|   clr.l 60(sp)
    521a:	|   move.l 190f0 <DOSBase>,d0
    5220:	|   movea.l d0,a6
    5222:	|   move.l 60(sp),d1
    5226:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    522a:	\-> move.l #87728,56(sp)
    5232:	    clr.l 52(sp)
    5236:	    move.l 190e8 <SysBase>,d0
    523c:	    movea.l d0,a6
    523e:	    movea.l 56(sp),a1
    5242:	    move.l 52(sp),d0
    5246:	    jsr -552(a6)
    524a:	    move.l d0,48(sp)
    524e:	    move.l 48(sp),d0
    5252:	    move.l d0,19100 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    5258:	    move.l 19100 <MathIeeeDoubBasBase>,d0
    525e:	/-- bne.s 5274 <main+0x1da>
		Exit(0);
    5260:	|   clr.l 44(sp)
    5264:	|   move.l 190f0 <DOSBase>,d0
    526a:	|   movea.l d0,a6
    526c:	|   move.l 44(sp),d1
    5270:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    5274:	\-> pea 156c8 <custom.c.177df80b+0x9ef>
    527a:	    jsr 13da6 <KPrintF>
    5280:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    5282:	    move.l 190f0 <DOSBase>,d0
    5288:	    movea.l d0,a6
    528a:	    jsr -60(a6)
    528e:	    move.l d0,40(sp)
    5292:	    move.l 40(sp),d0
    5296:	    move.l d0,36(sp)
    529a:	    move.l #87780,32(sp)
    52a2:	    moveq #15,d0
    52a4:	    move.l d0,28(sp)
    52a8:	    move.l 190f0 <DOSBase>,d0
    52ae:	    movea.l d0,a6
    52b0:	    move.l 36(sp),d1
    52b4:	    move.l 32(sp),d2
    52b8:	    move.l 28(sp),d3
    52bc:	    jsr -48(a6)
    52c0:	    move.l d0,24(sp)
	Delay(50);
    52c4:	    moveq #50,d0
    52c6:	    move.l d0,20(sp)
    52ca:	    move.l 190f0 <DOSBase>,d0
    52d0:	    movea.l d0,a6
    52d2:	    move.l 20(sp),d1
    52d6:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    52da:	    pea 156f4 <custom.c.177df80b+0xa1b>
    52e0:	    jsr 13da6 <KPrintF>
    52e6:	    addq.l #4,sp
	TakeSystem();
    52e8:	    jsr 4e00 <TakeSystem>
	KPrintF("System Taken\n");
    52ee:	    pea 15703 <custom.c.177df80b+0xa2a>
    52f4:	    jsr 13da6 <KPrintF>
    52fa:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    52fc:	    movea.l 190ec <custom>,a0
    5302:	    move.w #-30721,150(a0)
	WaitVbl();
    5308:	    jsr 13cda <WaitVbl>

	KPrintF("Starting main_sludge\n");
    530e:	    pea 15711 <custom.c.177df80b+0xa38>
    5314:	    jsr 13da6 <KPrintF>
    531a:	    addq.l #4,sp
	main_sludge(argc, argv);	
    531c:	    move.l 148(sp),-(sp)
    5320:	    move.l 148(sp),-(sp)
    5324:	    jsr 1f08 <main_sludge>
    532a:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    532c:	    jsr 4f8c <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5332:	    move.l 190f0 <DOSBase>,16(sp)
    533a:	    move.l 190e8 <SysBase>,d0
    5340:	    movea.l d0,a6
    5342:	    movea.l 16(sp),a1
    5346:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    534a:	    move.l 190f4 <GfxBase>,12(sp)
    5352:	    move.l 190e8 <SysBase>,d0
    5358:	    movea.l d0,a6
    535a:	    movea.l 12(sp),a1
    535e:	    jsr -414(a6)
    5362:	    moveq #0,d0
}
    5364:	    movem.l (sp)+,d2-d3/a6
    5368:	    lea 128(sp),sp
    536c:	    rts

0000536e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    536e:	    lea -16(sp),sp
    5372:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    5374:	    moveq #8,d0
    5376:	    move.l d0,16(sp)
    537a:	    clr.l 12(sp)
    537e:	    move.l 190e8 <SysBase>,d0
    5384:	    movea.l d0,a6
    5386:	    move.l 16(sp),d0
    538a:	    move.l 12(sp),d1
    538e:	    jsr -684(a6)
    5392:	    move.l d0,8(sp)
    5396:	    move.l 8(sp),d0
    539a:	    move.l d0,4(sp)
	if (!newStat) {
    539e:	/-- bne.s 53ce <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    53a0:	|   movea.l 18a88 <nowStatus>,a0
    53a6:	|   move.l (a0),d0
    53a8:	|   movea.l 4(sp),a0
    53ac:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    53b0:	|   pea 15174 <custom.c.177df80b+0x49b>
    53b6:	|   jsr b8 <copyString>
    53bc:	|   addq.l #4,sp
    53be:	|   movea.l 4(sp),a0
    53c2:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    53c4:	|   movea.l 18a88 <nowStatus>,a0
    53ca:	|   move.l 4(sp),(a0)
	}
}
    53ce:	\-> nop
    53d0:	    movea.l (sp)+,a6
    53d2:	    lea 16(sp),sp
    53d6:	    rts

000053d8 <clearStatusBar>:

void clearStatusBar () {
    53d8:	       lea -16(sp),sp
    53dc:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    53de:	       movea.l 18a88 <nowStatus>,a0
    53e4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    53e8:	       movea.l 18a88 <nowStatus>,a0
    53ee:	       moveq #-1,d0
    53f0:	       move.l d0,6(a0)
	while (stat) {
    53f4:	   /-- bra.s 5434 <clearStatusBar+0x5c>
		kill = stat;
    53f6:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    53fc:	|  |   movea.l 16(sp),a0
    5400:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5406:	|  |   movea.l 12(sp),a0
    540a:	|  |   move.l (a0),8(sp)
    540e:	|  |   move.l 190e8 <SysBase>,d0
    5414:	|  |   movea.l d0,a6
    5416:	|  |   movea.l 8(sp),a1
    541a:	|  |   jsr -690(a6)
		FreeVec(kill);
    541e:	|  |   move.l 12(sp),4(sp)
    5424:	|  |   move.l 190e8 <SysBase>,d0
    542a:	|  |   movea.l d0,a6
    542c:	|  |   movea.l 4(sp),a1
    5430:	|  |   jsr -690(a6)
	while (stat) {
    5434:	|  \-> tst.l 16(sp)
    5438:	\----- bne.s 53f6 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    543a:	       movea.l 18a88 <nowStatus>,a0
    5440:	       clr.l (a0)
}
    5442:	       nop
    5444:	       movea.l (sp)+,a6
    5446:	       lea 16(sp),sp
    544a:	       rts

0000544c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    544c:	clr.l 1911a <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5452:	move.w #-1,1911e <mainStatus+0x4>
	mainStatus.litStatus = -1;
    545a:	moveq #-1,d0
    545c:	move.l d0,19120 <mainStatus+0x6>
	mainStatus.statusX = 10;
    5462:	moveq #10,d0
    5464:	move.l d0,19124 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    546a:	movea.l 19040 <winHeight>,a0
    5470:	lea -15(a0),a0
    5474:	move.l a0,d0
    5476:	move.l d0,19128 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    547c:	nop
    547e:	rts

00005480 <killLastStatus>:

void killLastStatus () {
    5480:	    lea -12(sp),sp
    5484:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    5486:	    movea.l 18a88 <nowStatus>,a0
    548c:	    move.l (a0),d0
    548e:	/-- beq.s 54d8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    5490:	|   movea.l 18a88 <nowStatus>,a0
    5496:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    549a:	|   movea.l 18a88 <nowStatus>,a0
    54a0:	|   movea.l 12(sp),a1
    54a4:	|   move.l 4(a1),d0
    54a8:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    54aa:	|   movea.l 12(sp),a0
    54ae:	|   move.l (a0),8(sp)
    54b2:	|   move.l 190e8 <SysBase>,d0
    54b8:	|   movea.l d0,a6
    54ba:	|   movea.l 8(sp),a1
    54be:	|   jsr -690(a6)
		FreeVec(kill);
    54c2:	|   move.l 12(sp),4(sp)
    54c8:	|   move.l 190e8 <SysBase>,d0
    54ce:	|   movea.l d0,a6
    54d0:	|   movea.l 4(sp),a1
    54d4:	|   jsr -690(a6)
	}
}
    54d8:	\-> nop
    54da:	    movea.l (sp)+,a6
    54dc:	    lea 12(sp),sp
    54e0:	    rts

000054e2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    54e2:	movea.l 18a88 <nowStatus>,a0
    54e8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    54ee:	movea.l 18a88 <nowStatus>,a0
    54f4:	move.l 8(sp),14(a0)
}
    54fa:	nop
    54fc:	rts

000054fe <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    54fe:	       lea -100(sp),sp
    5502:	       move.l a6,-(sp)
    5504:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5506:	       movea.l 18a88 <nowStatus>,a0
    550c:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5510:	       movea.l 18a88 <nowStatus>,a0
    5516:	       move.w 4(a0),d0
    551a:	       move.w d0,d0
    551c:	       andi.l #65535,d0
    5522:	       move.l 112(sp),-(sp)
    5526:	       move.l d0,-(sp)
    5528:	       jsr 8d0 <put2bytes>
    552e:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5530:	       movea.l 18a88 <nowStatus>,a0
    5536:	       move.l 6(a0),d0
    553a:	       move.l d0,d0
    553c:	       movea.w d0,a0
    553e:	       move.l 112(sp),-(sp)
    5542:	       move.l a0,-(sp)
    5544:	       jsr a9c <putSigned>
    554a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    554c:	       movea.l 18a88 <nowStatus>,a0
    5552:	       move.l 10(a0),d0
    5556:	       move.l 112(sp),-(sp)
    555a:	       move.l d0,-(sp)
    555c:	       jsr 8d0 <put2bytes>
    5562:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    5564:	       movea.l 18a88 <nowStatus>,a0
    556a:	       move.l 14(a0),d0
    556e:	       move.l 112(sp),-(sp)
    5572:	       move.l d0,-(sp)
    5574:	       jsr 8d0 <put2bytes>
    557a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    557c:	       move.l 112(sp),100(sp)
    5582:	       movea.l 18a88 <nowStatus>,a0
    5588:	       move.l 18(a0),96(sp)
    558e:	       move.l 190f0 <DOSBase>,d0
    5594:	       movea.l d0,a6
    5596:	       move.l 100(sp),d1
    559a:	       move.l 96(sp),d2
    559e:	       jsr -312(a6)
    55a2:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    55a6:	       move.l 112(sp),88(sp)
    55ac:	       movea.l 18a88 <nowStatus>,a0
    55b2:	       move.l 22(a0),84(sp)
    55b8:	       move.l 190f0 <DOSBase>,d0
    55be:	       movea.l d0,a6
    55c0:	       move.l 88(sp),d1
    55c4:	       move.l 84(sp),d2
    55c8:	       jsr -312(a6)
    55cc:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    55d0:	       move.l 112(sp),76(sp)
    55d6:	       movea.l 18a88 <nowStatus>,a0
    55dc:	       move.l 26(a0),72(sp)
    55e2:	       move.l 190f0 <DOSBase>,d0
    55e8:	       movea.l d0,a6
    55ea:	       move.l 76(sp),d1
    55ee:	       move.l 72(sp),d2
    55f2:	       jsr -312(a6)
    55f6:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    55fa:	       move.l 112(sp),64(sp)
    5600:	       movea.l 18a88 <nowStatus>,a0
    5606:	       move.l 30(a0),60(sp)
    560c:	       move.l 190f0 <DOSBase>,d0
    5612:	       movea.l d0,a6
    5614:	       move.l 64(sp),d1
    5618:	       move.l 60(sp),d2
    561c:	       jsr -312(a6)
    5620:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5624:	       move.l 112(sp),52(sp)
    562a:	       movea.l 18a88 <nowStatus>,a0
    5630:	       move.l 34(a0),48(sp)
    5636:	       move.l 190f0 <DOSBase>,d0
    563c:	       movea.l d0,a6
    563e:	       move.l 52(sp),d1
    5642:	       move.l 48(sp),d2
    5646:	       jsr -312(a6)
    564a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    564e:	       move.l 112(sp),40(sp)
    5654:	       movea.l 18a88 <nowStatus>,a0
    565a:	       move.l 38(a0),36(sp)
    5660:	       move.l 190f0 <DOSBase>,d0
    5666:	       movea.l d0,a6
    5668:	       move.l 40(sp),d1
    566c:	       move.l 36(sp),d2
    5670:	       jsr -312(a6)
    5674:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    5678:	   /-- bra.s 56bc <saveStatusBars+0x1be>
		FPutC (fp,1);
    567a:	/--|-> move.l 112(sp),16(sp)
    5680:	|  |   moveq #1,d0
    5682:	|  |   move.l d0,12(sp)
    5686:	|  |   move.l 190f0 <DOSBase>,d0
    568c:	|  |   movea.l d0,a6
    568e:	|  |   move.l 16(sp),d1
    5692:	|  |   move.l 12(sp),d2
    5696:	|  |   jsr -312(a6)
    569a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    569e:	|  |   movea.l 104(sp),a0
    56a2:	|  |   move.l (a0),d0
    56a4:	|  |   move.l 112(sp),-(sp)
    56a8:	|  |   move.l d0,-(sp)
    56aa:	|  |   jsr bd8 <writeString>
    56b0:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    56b2:	|  |   movea.l 104(sp),a0
    56b6:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    56bc:	|  \-> tst.l 104(sp)
    56c0:	\----- bne.s 567a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    56c2:	       move.l 112(sp),28(sp)
    56c8:	       clr.l 24(sp)
    56cc:	       move.l 190f0 <DOSBase>,d0
    56d2:	       movea.l d0,a6
    56d4:	       move.l 28(sp),d1
    56d8:	       move.l 24(sp),d2
    56dc:	       jsr -312(a6)
    56e0:	       move.l d0,20(sp)
}
    56e4:	       nop
    56e6:	       move.l (sp)+,d2
    56e8:	       movea.l (sp)+,a6
    56ea:	       lea 100(sp),sp
    56ee:	       rts

000056f0 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    56f0:	movea.l 18a88 <nowStatus>,a0
    56f6:	move.l 4(sp),6(a0)
}
    56fc:	nop
    56fe:	rts

00005700 <setStatusBar>:

void setStatusBar (char * txt) {
    5700:	    subq.l #4,sp
    5702:	    move.l a6,-(sp)
    5704:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5706:	    movea.l 18a88 <nowStatus>,a0
    570c:	    move.l (a0),d0
    570e:	/-- beq.s 5742 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5710:	|   movea.l 18a88 <nowStatus>,a0
    5716:	|   movea.l (a0),a0
    5718:	|   move.l (a0),8(sp)
    571c:	|   move.l 190e8 <SysBase>,d0
    5722:	|   movea.l d0,a6
    5724:	|   movea.l 8(sp),a1
    5728:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    572c:	|   movea.l 18a88 <nowStatus>,a0
    5732:	|   movea.l (a0),a2
    5734:	|   move.l 16(sp),-(sp)
    5738:	|   jsr b8 <copyString>
    573e:	|   addq.l #4,sp
    5740:	|   move.l d0,(a2)
	}
}
    5742:	\-> nop
    5744:	    movea.l (sp)+,a2
    5746:	    movea.l (sp)+,a6
    5748:	    addq.l #4,sp
    574a:	    rts

0000574c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    574c:	       movea.l 18a88 <nowStatus>,a0
    5752:	       move.l (a0),d0
    5754:	/----- beq.s 5762 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    5756:	|      movea.l 18a88 <nowStatus>,a0
    575c:	|      movea.l (a0),a0
    575e:	|      move.l (a0),d0
    5760:	|  /-- bra.s 5768 <statusBarText+0x1c>
	} else {
		return "";
    5762:	\--|-> move.l #86388,d0
	}
    5768:	   \-> rts

0000576a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    576a:	       lea -28(sp),sp
    576e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5772:	       move.l 52(sp),-(sp)
    5776:	       jsr 1273c <stringWidth>
    577c:	       addq.l #4,sp
    577e:	       asr.l #1,d0
    5780:	       move.l d0,-(sp)
    5782:	       jsr 141e2 <__floatsisf>
    5788:	       addq.l #4,sp
    578a:	       move.l d0,d1
    578c:	       move.l 18aa0 <cameraZoom>,d0
    5792:	       move.l d0,-(sp)
    5794:	       move.l d1,-(sp)
    5796:	       jsr 1408e <__divsf3>
    579c:	       addq.l #8,sp
    579e:	       move.l d0,-(sp)
    57a0:	       jsr 1417a <__fixsfsi>
    57a6:	       addq.l #4,sp
    57a8:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    57ac:	       move.l 56(sp),d0
    57b0:	       sub.l 44(sp),d0
    57b4:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    57b8:	       move.l 56(sp),d0
    57bc:	       add.l 44(sp),d0
    57c0:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    57c4:	       moveq #12,d0
    57c6:	       move.l d0,32(sp)
    57ca:	       clr.l 28(sp)
    57ce:	       move.l 190e8 <SysBase>,d0
    57d4:	       movea.l d0,a6
    57d6:	       move.l 32(sp),d0
    57da:	       move.l 28(sp),d1
    57de:	       jsr -684(a6)
    57e2:	       move.l d0,24(sp)
    57e6:	       move.l 24(sp),d0
    57ea:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    57ee:	       movea.l 19144 <speech>,a0
    57f4:	       move.l 4(a0),d0
    57f8:	       movea.l 20(sp),a0
    57fc:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5800:	       move.l 52(sp),-(sp)
    5804:	       jsr b8 <copyString>
    580a:	       addq.l #4,sp
    580c:	       movea.l 20(sp),a0
    5810:	       move.l d0,(a0)
	newLine -> x = xx1;
    5812:	       movea.l 20(sp),a0
    5816:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    581c:	       movea.l 19144 <speech>,a0
    5822:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    5828:	       moveq #4,d0
    582a:	       cmp.l 40(sp),d0
    582e:	   /-- blt.s 5850 <addSpeechLine+0xe6>
    5830:	   |   movea.l 60(sp),a0
    5834:	   |   move.l (a0),d1
    5836:	   |   moveq #5,d0
    5838:	   |   sub.l 40(sp),d0
    583c:	   |   cmp.l d1,d0
    583e:	   +-- ble.s 5850 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5840:	   |   moveq #5,d0
    5842:	   |   sub.l 40(sp),d0
    5846:	   |   movea.l 60(sp),a0
    584a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    584c:	/--|-- bra.w 597c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5850:	|  \-> move.l 36(sp),-(sp)
    5854:	|      jsr 141e2 <__floatsisf>
    585a:	|      addq.l #4,sp
    585c:	|      move.l d0,d2
    585e:	|      move.l 1903c <winWidth>,d0
    5864:	|      move.l d0,-(sp)
    5866:	|      jsr 1420a <__floatunsisf>
    586c:	|      addq.l #4,sp
    586e:	|      move.l d0,d1
    5870:	|      move.l 18aa0 <cameraZoom>,d0
    5876:	|      move.l d0,-(sp)
    5878:	|      move.l d1,-(sp)
    587a:	|      jsr 1408e <__divsf3>
    5880:	|      addq.l #8,sp
    5882:	|      move.l #1084227584,-(sp)
    5888:	|      move.l d0,-(sp)
    588a:	|      jsr 144d6 <__subsf3>
    5890:	|      addq.l #8,sp
    5892:	|      move.l d0,-(sp)
    5894:	|      move.l d2,-(sp)
    5896:	|      jsr 142ca <__gesf2>
    589c:	|      addq.l #8,sp
    589e:	|      tst.l d0
    58a0:	|  /-- bge.s 58a6 <addSpeechLine+0x13c>
}
    58a2:	+--|-- bra.w 597c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    58a6:	|  \-> movea.l 60(sp),a0
    58aa:	|      move.l (a0),d0
    58ac:	|      move.l d0,-(sp)
    58ae:	|      jsr 141e2 <__floatsisf>
    58b4:	|      addq.l #4,sp
    58b6:	|      move.l d0,-(sp)
    58b8:	|      jsr 140fa <__extendsfdf2>
    58be:	|      addq.l #4,sp
    58c0:	|      move.l d0,d4
    58c2:	|      move.l d1,d5
    58c4:	|      move.l 1903c <winWidth>,d0
    58ca:	|      move.l d0,-(sp)
    58cc:	|      jsr 1420a <__floatunsisf>
    58d2:	|      addq.l #4,sp
    58d4:	|      move.l d0,d1
    58d6:	|      move.l 18aa0 <cameraZoom>,d0
    58dc:	|      move.l d0,-(sp)
    58de:	|      move.l d1,-(sp)
    58e0:	|      jsr 1408e <__divsf3>
    58e6:	|      addq.l #8,sp
    58e8:	|      move.l d0,-(sp)
    58ea:	|      jsr 140fa <__extendsfdf2>
    58f0:	|      addq.l #4,sp
    58f2:	|      clr.l -(sp)
    58f4:	|      move.l #1075052544,-(sp)
    58fa:	|      move.l d1,-(sp)
    58fc:	|      move.l d0,-(sp)
    58fe:	|      jsr 14474 <__subdf3>
    5904:	|      lea 16(sp),sp
    5908:	|      move.l d0,d2
    590a:	|      move.l d1,d3
    590c:	|      move.l 36(sp),-(sp)
    5910:	|      jsr 141a2 <__floatsidf>
    5916:	|      addq.l #4,sp
    5918:	|      move.l d1,-(sp)
    591a:	|      move.l d0,-(sp)
    591c:	|      move.l d3,-(sp)
    591e:	|      move.l d2,-(sp)
    5920:	|      jsr 14474 <__subdf3>
    5926:	|      lea 16(sp),sp
    592a:	|      move.l d1,-(sp)
    592c:	|      move.l d0,-(sp)
    592e:	|      move.l d5,-(sp)
    5930:	|      move.l d4,-(sp)
    5932:	|      jsr 14300 <__gtdf2>
    5938:	|      lea 16(sp),sp
    593c:	|      tst.l d0
    593e:	|  /-- bgt.s 5942 <addSpeechLine+0x1d8>
}
    5940:	+--|-- bra.s 597c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5942:	|  \-> move.l 1903c <winWidth>,d0
    5948:	|      move.l d0,-(sp)
    594a:	|      jsr 1420a <__floatunsisf>
    5950:	|      addq.l #4,sp
    5952:	|      move.l d0,d1
    5954:	|      move.l 18aa0 <cameraZoom>,d0
    595a:	|      move.l d0,-(sp)
    595c:	|      move.l d1,-(sp)
    595e:	|      jsr 1408e <__divsf3>
    5964:	|      addq.l #8,sp
    5966:	|      move.l d0,-(sp)
    5968:	|      jsr 1417a <__fixsfsi>
    596e:	|      addq.l #4,sp
    5970:	|      subq.l #5,d0
    5972:	|      sub.l 36(sp),d0
    5976:	|      movea.l 60(sp),a0
    597a:	|      move.l d0,(a0)
}
    597c:	\----> nop
    597e:	       movem.l (sp)+,d2-d5/a6
    5982:	       lea 28(sp),sp
    5986:	       rts

00005988 <initSpeech>:


void initSpeech () {
    5988:	       lea -12(sp),sp
    598c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    598e:	       moveq #20,d0
    5990:	       move.l d0,12(sp)
    5994:	       clr.l 8(sp)
    5998:	       move.l 190e8 <SysBase>,d0
    599e:	       movea.l d0,a6
    59a0:	       move.l 12(sp),d0
    59a4:	       move.l 8(sp),d1
    59a8:	       jsr -684(a6)
    59ac:	       move.l d0,4(sp)
    59b0:	       move.l 4(sp),d0
    59b4:	       move.l d0,19144 <speech>
	if (speech) {
    59ba:	       move.l 19144 <speech>,d0
    59c0:	/----- beq.s 59ec <initSpeech+0x64>
		speech -> currentTalker = NULL;
    59c2:	|      movea.l 19144 <speech>,a0
    59c8:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    59ca:	|      movea.l 19144 <speech>,a0
    59d0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    59d4:	|      movea.l 19144 <speech>,a0
    59da:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    59de:	|      movea.l 19144 <speech>,a0
    59e4:	|      moveq #-1,d0
    59e6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    59ea:	|  /-- bra.s 59fa <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    59ec:	\--|-> pea 1574e <custom.c.177df80b+0xa75>
    59f2:	   |   jsr 13da6 <KPrintF>
    59f8:	   |   addq.l #4,sp
}
    59fa:	   \-> nop
    59fc:	       movea.l (sp)+,a6
    59fe:	       lea 12(sp),sp
    5a02:	       rts

00005a04 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5a04:	       movea.l 19144 <speech>,a0
    5a0a:	       move.l 4(a0),d0
    5a0e:	/----- beq.s 5a1c <isThereAnySpeechGoingOn+0x18>
    5a10:	|      movea.l 19144 <speech>,a0
    5a16:	|      move.l 16(a0),d0
    5a1a:	|  /-- bra.s 5a1e <isThereAnySpeechGoingOn+0x1a>
    5a1c:	\--|-> moveq #-1,d0
}
    5a1e:	   \-> rts

00005a20 <killAllSpeech>:

void killAllSpeech () {
    5a20:	       lea -12(sp),sp
    5a24:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5a26:	       movea.l 19144 <speech>,a0
    5a2c:	       move.l 12(a0),d0
    5a30:	       moveq #-1,d1
    5a32:	       cmp.l d0,d1
    5a34:	   /-- beq.s 5a42 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5a36:	   |   movea.l 19144 <speech>,a0
    5a3c:	   |   moveq #-1,d0
    5a3e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5a42:	   \-> movea.l 19144 <speech>,a0
    5a48:	       move.l (a0),d0
    5a4a:	/----- beq.w 5ad6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5a4e:	|      movea.l 19144 <speech>,a0
    5a54:	|      move.l (a0),d0
    5a56:	|      lea -120(sp),sp
    5a5a:	|      move.l sp,d1
    5a5c:	|      movea.l d0,a0
    5a5e:	|      moveq #120,d0
    5a60:	|      move.l d0,-(sp)
    5a62:	|      move.l a0,-(sp)
    5a64:	|      move.l d1,-(sp)
    5a66:	|      jsr 13d5a <memcpy>
    5a6c:	|      lea 12(sp),sp
    5a70:	|      jsr 835e <makeSilent>
    5a76:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5a7a:	|      movea.l 19144 <speech>,a0
    5a80:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5a82:	+----- bra.s 5ad6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5a84:	|  /-> movea.l 19144 <speech>,a0
    5a8a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5a90:	|  |   movea.l 19144 <speech>,a0
    5a96:	|  |   movea.l 4(a0),a1
    5a9a:	|  |   movea.l 19144 <speech>,a0
    5aa0:	|  |   move.l 4(a1),d0
    5aa4:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5aa8:	|  |   movea.l 12(sp),a0
    5aac:	|  |   move.l (a0),8(sp)
    5ab0:	|  |   move.l 190e8 <SysBase>,d0
    5ab6:	|  |   movea.l d0,a6
    5ab8:	|  |   movea.l 8(sp),a1
    5abc:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5ac0:	|  |   move.l 12(sp),4(sp)
    5ac6:	|  |   move.l 190e8 <SysBase>,d0
    5acc:	|  |   movea.l d0,a6
    5ace:	|  |   movea.l 4(sp),a1
    5ad2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5ad6:	\--|-> movea.l 19144 <speech>,a0
    5adc:	   |   move.l 4(a0),d0
    5ae0:	   \-- bne.s 5a84 <killAllSpeech+0x64>
	}
}
    5ae2:	       nop
    5ae4:	       nop
    5ae6:	       movea.l (sp)+,a6
    5ae8:	       lea 12(sp),sp
    5aec:	       rts

00005aee <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5aee:	pea 2 <_start+0x2>
    5af2:	move.l 8(sp),-(sp)
    5af6:	jsr 5c4e <setFrames>
    5afc:	addq.l #8,sp
}
    5afe:	nop
    5b00:	rts

00005b02 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5b02:	       lea -52(sp),sp
    5b06:	       move.l a6,-(sp)
    5b08:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5b0a:	       movea.l 64(sp),a0
    5b0e:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5b14:	       move.l 18a8c <speechSpeed>,d0
    5b1a:	       move.l 68(sp),-(sp)
    5b1e:	       move.l d0,-(sp)
    5b20:	       jsr a46 <putFloat>
    5b26:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5b28:	       movea.l 64(sp),a0
    5b2c:	       move.l 8(a0),d0
    5b30:	       move.l 68(sp),-(sp)
    5b34:	       move.l d0,-(sp)
    5b36:	       jsr 8d0 <put2bytes>
    5b3c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5b3e:	       movea.l 64(sp),a0
    5b42:	       move.l 16(a0),d0
    5b46:	       move.l 68(sp),-(sp)
    5b4a:	       move.l d0,-(sp)
    5b4c:	       jsr 8d0 <put2bytes>
    5b52:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5b54:	       movea.l 64(sp),a0
    5b58:	       move.l (a0),d0
    5b5a:	   /-- beq.s 5b9e <saveSpeech+0x9c>
			FPutC (fp, 1);
    5b5c:	   |   move.l 68(sp),40(sp)
    5b62:	   |   moveq #1,d0
    5b64:	   |   move.l d0,36(sp)
    5b68:	   |   move.l 190f0 <DOSBase>,d0
    5b6e:	   |   movea.l d0,a6
    5b70:	   |   move.l 40(sp),d1
    5b74:	   |   move.l 36(sp),d2
    5b78:	   |   jsr -312(a6)
    5b7c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5b80:	   |   movea.l 64(sp),a0
    5b84:	   |   movea.l (a0),a0
    5b86:	   |   movea.l 102(a0),a0
    5b8a:	   |   move.l 4(a0),d0
    5b8e:	   |   move.l 68(sp),-(sp)
    5b92:	   |   move.l d0,-(sp)
    5b94:	   |   jsr 8d0 <put2bytes>
    5b9a:	   |   addq.l #8,sp
    5b9c:	/--|-- bra.s 5c1a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5b9e:	|  \-> move.l 68(sp),52(sp)
    5ba4:	|      clr.l 48(sp)
    5ba8:	|      move.l 190f0 <DOSBase>,d0
    5bae:	|      movea.l d0,a6
    5bb0:	|      move.l 52(sp),d1
    5bb4:	|      move.l 48(sp),d2
    5bb8:	|      jsr -312(a6)
    5bbc:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5bc0:	+----- bra.s 5c1a <saveSpeech+0x118>
			FPutC (fp, 1);
    5bc2:	|  /-> move.l 68(sp),16(sp)
    5bc8:	|  |   moveq #1,d0
    5bca:	|  |   move.l d0,12(sp)
    5bce:	|  |   move.l 190f0 <DOSBase>,d0
    5bd4:	|  |   movea.l d0,a6
    5bd6:	|  |   move.l 16(sp),d1
    5bda:	|  |   move.l 12(sp),d2
    5bde:	|  |   jsr -312(a6)
    5be2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5be6:	|  |   movea.l 56(sp),a0
    5bea:	|  |   move.l (a0),d0
    5bec:	|  |   move.l 68(sp),-(sp)
    5bf0:	|  |   move.l d0,-(sp)
    5bf2:	|  |   jsr bd8 <writeString>
    5bf8:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    5bfa:	|  |   movea.l 56(sp),a0
    5bfe:	|  |   move.l 8(a0),d0
    5c02:	|  |   move.l 68(sp),-(sp)
    5c06:	|  |   move.l d0,-(sp)
    5c08:	|  |   jsr 8d0 <put2bytes>
    5c0e:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5c10:	|  |   movea.l 56(sp),a0
    5c14:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5c1a:	\--|-> tst.l 56(sp)
    5c1e:	   \-- bne.s 5bc2 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5c20:	       move.l 68(sp),28(sp)
    5c26:	       clr.l 24(sp)
    5c2a:	       move.l 190f0 <DOSBase>,d0
    5c30:	       movea.l d0,a6
    5c32:	       move.l 28(sp),d1
    5c36:	       move.l 24(sp),d2
    5c3a:	       jsr -312(a6)
    5c3e:	       move.l d0,20(sp)
}
    5c42:	       nop
    5c44:	       move.l (sp)+,d2
    5c46:	       movea.l (sp)+,a6
    5c48:	       lea 52(sp),sp
    5c4c:	       rts

00005c4e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5c4e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5c50:	movea.l 8(sp),a0
    5c54:	movea.l 68(a0),a0
    5c58:	move.l (a0),d2
    5c5a:	movea.l 8(sp),a0
    5c5e:	movea.l 68(a0),a0
    5c62:	move.l 4(a0),d0
    5c66:	move.l 12(sp),-(sp)
    5c6a:	move.l d0,-(sp)
    5c6c:	jsr 14764 <__mulsi3>
    5c72:	addq.l #8,sp
    5c74:	move.l d0,d1
    5c76:	movea.l 8(sp),a0
    5c7a:	move.l 94(a0),d0
    5c7e:	add.l d1,d0
    5c80:	add.l d0,d0
    5c82:	add.l d0,d0
    5c84:	movea.l d2,a0
    5c86:	adda.l d0,a0
    5c88:	move.l (a0),d0
    5c8a:	movea.l 8(sp),a0
    5c8e:	move.l d0,60(a0)
}
    5c92:	nop
    5c94:	move.l (sp)+,d2
    5c96:	rts

00005c98 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5c98:	       lea -20(sp),sp
    5c9c:	       move.l d2,-(sp)
    5c9e:	       move.l 40(sp),d0
    5ca2:	       move.w d0,d0
    5ca4:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5ca8:	       movea.l 19144 <speech>,a0
    5cae:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5cb4:	       move.l 32(sp),-(sp)
    5cb8:	       jsr 7e48 <findPerson>
    5cbe:	       addq.l #4,sp
    5cc0:	       move.l d0,16(sp)
    if (thisPerson) {
    5cc4:	   /-- beq.s 5cea <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5cc6:	   |   movea.w 6(sp),a0
    5cca:	   |   move.l a0,-(sp)
    5ccc:	   |   move.l 40(sp),-(sp)
    5cd0:	   |   move.l 24(sp),-(sp)
    5cd4:	   |   move.l 40(sp),-(sp)
    5cd8:	   |   jsr 5db0 <wrapSpeechPerson>
    5cde:	   |   lea 16(sp),sp
    5ce2:	   |   move.l d0,20(sp)
    5ce6:	/--|-- bra.w 5da4 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5cea:	|  \-> move.l 32(sp),-(sp)
    5cee:	|      jsr 12828 <getRegionForObject>
    5cf4:	|      addq.l #4,sp
    5cf6:	|      move.l d0,12(sp)
        if (thisRegion) {
    5cfa:	|  /-- beq.s 5d66 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5cfc:	|  |   movea.l 12(sp),a0
    5d00:	|  |   movea.l 28(a0),a0
    5d04:	|  |   move.l 28(a0),d0
    5d08:	|  |   movea.l 12(sp),a0
    5d0c:	|  |   movea.l 4(a0),a1
    5d10:	|  |   movea.l 12(sp),a0
    5d14:	|  |   movea.l 28(a0),a0
    5d18:	|  |   move.l 20(a0),d1
    5d1c:	|  |   movea.l a1,a0
    5d1e:	|  |   suba.l d1,a0
    5d20:	|  |   move.l 191fa <cameraY>,d1
    5d26:	|  |   movea.l a0,a1
    5d28:	|  |   suba.l d1,a1
    5d2a:	|  |   movea.l 12(sp),a0
    5d2e:	|  |   move.l (a0),d2
    5d30:	|  |   movea.l 12(sp),a0
    5d34:	|  |   move.l 8(a0),d1
    5d38:	|  |   add.l d2,d1
    5d3a:	|  |   move.l d1,d2
    5d3c:	|  |   asr.l #1,d2
    5d3e:	|  |   move.l 191f6 <cameraX>,d1
    5d44:	|  |   movea.l d2,a0
    5d46:	|  |   suba.l d1,a0
    5d48:	|  |   move.l 36(sp),-(sp)
    5d4c:	|  |   move.l d0,-(sp)
    5d4e:	|  |   move.l a1,-(sp)
    5d50:	|  |   move.l a0,-(sp)
    5d52:	|  |   move.l 44(sp),-(sp)
    5d56:	|  |   jsr 5ece <wrapSpeechXY>
    5d5c:	|  |   lea 20(sp),sp
    5d60:	|  |   move.l d0,20(sp)
    5d64:	+--|-- bra.s 5da4 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5d66:	|  \-> move.l 32(sp),-(sp)
    5d6a:	|      jsr ab94 <findObjectType>
    5d70:	|      addq.l #4,sp
    5d72:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5d76:	|      movea.l 8(sp),a0
    5d7a:	|      move.l 28(a0),d1
    5d7e:	|      move.l 1903c <winWidth>,d0
    5d84:	|      lsr.l #1,d0
    5d86:	|      move.l 36(sp),-(sp)
    5d8a:	|      move.l d1,-(sp)
    5d8c:	|      pea a <_start+0xa>
    5d90:	|      move.l d0,-(sp)
    5d92:	|      move.l 44(sp),-(sp)
    5d96:	|      jsr 5ece <wrapSpeechXY>
    5d9c:	|      lea 20(sp),sp
    5da0:	|      move.l d0,20(sp)
        }
    }
    return i;
    5da4:	\----> move.l 20(sp),d0
}
    5da8:	       move.l (sp)+,d2
    5daa:	       lea 20(sp),sp
    5dae:	       rts

00005db0 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5db0:	    subq.l #8,sp
    5db2:	    movem.l d2-d4,-(sp)
    5db6:	    move.l 36(sp),d0
    5dba:	    move.w d0,d0
    5dbc:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5dc0:	    movea.l 28(sp),a0
    5dc4:	    movea.l 102(a0),a0
    5dc8:	    move.l 28(a0),d2
    5dcc:	    movea.l 28(sp),a0
    5dd0:	    move.l 4(a0),d3
    5dd4:	    move.l 191fa <cameraY>,d0
    5dda:	    move.l d0,-(sp)
    5ddc:	    jsr 141e2 <__floatsisf>
    5de2:	    addq.l #4,sp
    5de4:	    move.l d0,-(sp)
    5de6:	    move.l d3,-(sp)
    5de8:	    jsr 144d6 <__subsf3>
    5dee:	    addq.l #8,sp
    5df0:	    move.l d0,d3
    5df2:	    movea.l 28(sp),a0
    5df6:	    move.l 20(a0),d4
    5dfa:	    movea.l 28(sp),a0
    5dfe:	    move.l 8(a0),d1
    5e02:	    movea.l 28(sp),a0
    5e06:	    move.l 12(a0),d0
    5e0a:	    sub.l d0,d1
    5e0c:	    move.l d1,-(sp)
    5e0e:	    jsr 141e2 <__floatsisf>
    5e14:	    addq.l #4,sp
    5e16:	    move.l d0,-(sp)
    5e18:	    move.l d4,-(sp)
    5e1a:	    jsr 14294 <__mulsf3>
    5e20:	    addq.l #8,sp
    5e22:	    move.l d0,-(sp)
    5e24:	    move.l d3,-(sp)
    5e26:	    jsr 144d6 <__subsf3>
    5e2c:	    addq.l #8,sp
    5e2e:	    move.l d0,d3
    5e30:	    movea.l 28(sp),a0
    5e34:	    movea.l 102(a0),a0
    5e38:	    move.l 20(a0),d0
    5e3c:	    move.l d0,-(sp)
    5e3e:	    jsr 141e2 <__floatsisf>
    5e44:	    addq.l #4,sp
    5e46:	    move.l d0,-(sp)
    5e48:	    move.l d3,-(sp)
    5e4a:	    jsr 144d6 <__subsf3>
    5e50:	    addq.l #8,sp
    5e52:	    move.l d0,-(sp)
    5e54:	    jsr 1417a <__fixsfsi>
    5e5a:	    addq.l #4,sp
    5e5c:	    move.l d0,d4
    5e5e:	    movea.l 28(sp),a0
    5e62:	    move.l (a0),d3
    5e64:	    move.l 191f6 <cameraX>,d0
    5e6a:	    move.l d0,-(sp)
    5e6c:	    jsr 141e2 <__floatsisf>
    5e72:	    addq.l #4,sp
    5e74:	    move.l d0,-(sp)
    5e76:	    move.l d3,-(sp)
    5e78:	    jsr 144d6 <__subsf3>
    5e7e:	    addq.l #8,sp
    5e80:	    move.l d0,-(sp)
    5e82:	    jsr 1417a <__fixsfsi>
    5e88:	    addq.l #4,sp
    5e8a:	    move.l 32(sp),-(sp)
    5e8e:	    move.l d2,-(sp)
    5e90:	    move.l d4,-(sp)
    5e92:	    move.l d0,-(sp)
    5e94:	    move.l 40(sp),-(sp)
    5e98:	    jsr 5ece <wrapSpeechXY>
    5e9e:	    lea 20(sp),sp
    5ea2:	    move.l d0,16(sp)
	if (animPerson) {
    5ea6:	    tst.w 14(sp)
    5eaa:	/-- beq.s 5ec2 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5eac:	|   move.l 28(sp),-(sp)
    5eb0:	|   jsr 5aee <makeTalker>
    5eb6:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5eb8:	|   movea.l 19144 <speech>,a0
    5ebe:	|   move.l 28(sp),(a0)
	}
	return i;
    5ec2:	\-> move.l 16(sp),d0
}
    5ec6:	    movem.l (sp)+,d2-d4
    5eca:	    addq.l #8,sp
    5ecc:	    rts

00005ece <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5ece:	                   lea -16(sp),sp
    5ed2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5ed6:	                   clr.l 16(sp)
    killAllSpeech();
    5eda:	                   jsr 5a20 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5ee0:	                   move.l 36(sp),-(sp)
    5ee4:	                   jsr 1124a <strlen>
    5eea:	                   addq.l #4,sp
    5eec:	                   movea.l d0,a0
    5eee:	                   lea 20(a0),a0
    5ef2:	                   move.l a0,-(sp)
    5ef4:	                   jsr 1420a <__floatunsisf>
    5efa:	                   addq.l #4,sp
    5efc:	                   move.l d0,d1
    5efe:	                   move.l 18a8c <speechSpeed>,d0
    5f04:	                   move.l d0,-(sp)
    5f06:	                   move.l d1,-(sp)
    5f08:	                   jsr 14294 <__mulsf3>
    5f0e:	                   addq.l #8,sp
    5f10:	                   move.l d0,-(sp)
    5f12:	                   jsr 1417a <__fixsfsi>
    5f18:	                   addq.l #4,sp
    5f1a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5f1e:	               /-- bgt.s 5f26 <wrapSpeechXY+0x58>
    5f20:	               |   moveq #1,d0
    5f22:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5f26:	               \-> moveq #-1,d1
    5f28:	                   cmp.l 52(sp),d1
    5f2c:	               /-- beq.s 5f6c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5f2e:	               |   move.l 1920a <speechMode>,d0
    5f34:	               +-- ble.s 5f6c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5f36:	               |   clr.l -(sp)
    5f38:	               |   move.l 56(sp),-(sp)
    5f3c:	               |   jsr a86a <startSound>
    5f42:	               |   addq.l #8,sp
    5f44:	               |   tst.w d0
    5f46:	               +-- beq.s 5f6c <wrapSpeechXY+0x9e>
                speechTime = -10;
    5f48:	               |   moveq #-10,d0
    5f4a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5f4e:	               |   movea.l 19144 <speech>,a0
    5f54:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5f5a:	               |   move.l 1920a <speechMode>,d0
    5f60:	               |   moveq #2,d1
    5f62:	               |   cmp.l d0,d1
    5f64:	               +-- bne.s 5f6c <wrapSpeechXY+0x9e>
    5f66:	               |   moveq #-10,d0
    5f68:	/--------------|-- bra.w 61f2 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5f6c:	|              \-> movea.l 19144 <speech>,a0
    5f72:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5f78:	|     /----------- bra.w 602c <wrapSpeechXY+0x15e>
        a = wrap;
    5f7c:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5f82:	|  |  |        /-- bra.s 5f92 <wrapSpeechXY+0xc4>
            a--;
    5f84:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5f88:	|  |  |  |     +-- bne.s 5f92 <wrapSpeechXY+0xc4>
                a = wrap;
    5f8a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5f90:	|  |  |  |  /--|-- bra.s 5fa4 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5f92:	|  |  |  |  |  \-> move.l 28(sp),d0
    5f96:	|  |  |  |  |      movea.l 36(sp),a0
    5f9a:	|  |  |  |  |      adda.l d0,a0
    5f9c:	|  |  |  |  |      move.b (a0),d0
    5f9e:	|  |  |  |  |      cmpi.b #32,d0
    5fa2:	|  |  |  \--|----- bne.s 5f84 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5fa4:	|  |  |     \----> move.l 28(sp),d0
    5fa8:	|  |  |            movea.l 36(sp),a0
    5fac:	|  |  |            adda.l d0,a0
    5fae:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5fb0:	|  |  |            lea 16(sp),a0
    5fb4:	|  |  |            move.l a0,-(sp)
    5fb6:	|  |  |            move.l 44(sp),-(sp)
    5fba:	|  |  |            move.l 44(sp),-(sp)
    5fbe:	|  |  |            jsr 576a <addSpeechLine>
    5fc4:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5fc8:	|  |  |            move.l 28(sp),d0
    5fcc:	|  |  |            movea.l 36(sp),a0
    5fd0:	|  |  |            adda.l d0,a0
    5fd2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5fd6:	|  |  |            move.l 28(sp),d0
    5fda:	|  |  |            addq.l #1,d0
    5fdc:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5fe0:	|  |  |            move.l 44(sp),-(sp)
    5fe4:	|  |  |            jsr 141e2 <__floatsisf>
    5fea:	|  |  |            addq.l #4,sp
    5fec:	|  |  |            move.l d0,d2
    5fee:	|  |  |            move.l 19230 <fontHeight>,d0
    5ff4:	|  |  |            move.l d0,-(sp)
    5ff6:	|  |  |            jsr 141e2 <__floatsisf>
    5ffc:	|  |  |            addq.l #4,sp
    5ffe:	|  |  |            move.l d0,d1
    6000:	|  |  |            move.l 18aa0 <cameraZoom>,d0
    6006:	|  |  |            move.l d0,-(sp)
    6008:	|  |  |            move.l d1,-(sp)
    600a:	|  |  |            jsr 1408e <__divsf3>
    6010:	|  |  |            addq.l #8,sp
    6012:	|  |  |            move.l d0,-(sp)
    6014:	|  |  |            move.l d2,-(sp)
    6016:	|  |  |            jsr 144d6 <__subsf3>
    601c:	|  |  |            addq.l #8,sp
    601e:	|  |  |            move.l d0,-(sp)
    6020:	|  |  |            jsr 1417a <__fixsfsi>
    6026:	|  |  |            addq.l #4,sp
    6028:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    602c:	|  |  \----------> move.l 36(sp),-(sp)
    6030:	|  |               jsr 1124a <strlen>
    6036:	|  |               addq.l #4,sp
    6038:	|  |               move.l d0,d1
    603a:	|  |               move.l 48(sp),d0
    603e:	|  |               cmp.l d1,d0
    6040:	|  \-------------- bcs.w 5f7c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6044:	|                  lea 16(sp),a0
    6048:	|                  move.l a0,-(sp)
    604a:	|                  move.l 44(sp),-(sp)
    604e:	|                  move.l 44(sp),-(sp)
    6052:	|                  jsr 576a <addSpeechLine>
    6058:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    605c:	|                  move.l 44(sp),-(sp)
    6060:	|                  jsr 141e2 <__floatsisf>
    6066:	|                  addq.l #4,sp
    6068:	|                  move.l d0,d2
    606a:	|                  move.l 19230 <fontHeight>,d0
    6070:	|                  move.l d0,-(sp)
    6072:	|                  jsr 141e2 <__floatsisf>
    6078:	|                  addq.l #4,sp
    607a:	|                  move.l d0,d1
    607c:	|                  move.l 18aa0 <cameraZoom>,d0
    6082:	|                  move.l d0,-(sp)
    6084:	|                  move.l d1,-(sp)
    6086:	|                  jsr 1408e <__divsf3>
    608c:	|                  addq.l #8,sp
    608e:	|                  move.l d0,-(sp)
    6090:	|                  move.l d2,-(sp)
    6092:	|                  jsr 144d6 <__subsf3>
    6098:	|                  addq.l #8,sp
    609a:	|                  move.l d0,-(sp)
    609c:	|                  jsr 1417a <__fixsfsi>
    60a2:	|                  addq.l #4,sp
    60a4:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    60a8:	|              /-- bpl.s 60c6 <wrapSpeechXY+0x1f8>
    60aa:	|              |   movea.l 19144 <speech>,a0
    60b0:	|              |   move.l 8(a0),d0
    60b4:	|              |   movea.l 19144 <speech>,a0
    60ba:	|              |   sub.l 44(sp),d0
    60be:	|              |   move.l d0,8(a0)
    60c2:	|           /--|-- bra.w 61b4 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    60c6:	|           |  \-> movea.l 19144 <speech>,a0
    60cc:	|           |      move.l 8(a0),d0
    60d0:	|           |      move.l d0,-(sp)
    60d2:	|           |      jsr 141e2 <__floatsisf>
    60d8:	|           |      addq.l #4,sp
    60da:	|           |      move.l d0,d2
    60dc:	|           |      move.l 191fa <cameraY>,d0
    60e2:	|           |      move.l d0,-(sp)
    60e4:	|           |      jsr 141e2 <__floatsisf>
    60ea:	|           |      addq.l #4,sp
    60ec:	|           |      move.l d0,d3
    60ee:	|           |      move.l 19040 <winHeight>,d4
    60f4:	|           |      move.l 19230 <fontHeight>,d0
    60fa:	|           |      pea 3 <_start+0x3>
    60fe:	|           |      move.l d0,-(sp)
    6100:	|           |      jsr 147e2 <__divsi3>
    6106:	|           |      addq.l #8,sp
    6108:	|           |      move.l d4,d1
    610a:	|           |      sub.l d0,d1
    610c:	|           |      move.l d1,-(sp)
    610e:	|           |      jsr 1420a <__floatunsisf>
    6114:	|           |      addq.l #4,sp
    6116:	|           |      move.l d0,d1
    6118:	|           |      move.l 18aa0 <cameraZoom>,d0
    611e:	|           |      move.l d0,-(sp)
    6120:	|           |      move.l d1,-(sp)
    6122:	|           |      jsr 1408e <__divsf3>
    6128:	|           |      addq.l #8,sp
    612a:	|           |      move.l d0,-(sp)
    612c:	|           |      move.l d3,-(sp)
    612e:	|           |      jsr 13f94 <__addsf3>
    6134:	|           |      addq.l #8,sp
    6136:	|           |      move.l d0,-(sp)
    6138:	|           |      move.l d2,-(sp)
    613a:	|           |      jsr 1434e <__gtsf2>
    6140:	|           |      addq.l #8,sp
    6142:	|           |      tst.l d0
    6144:	|           +----- ble.s 61b4 <wrapSpeechXY+0x2e6>
    6146:	|           |      move.l 191fa <cameraY>,d0
    614c:	|           |      move.l d0,-(sp)
    614e:	|           |      jsr 141e2 <__floatsisf>
    6154:	|           |      addq.l #4,sp
    6156:	|           |      move.l d0,d2
    6158:	|           |      move.l 19040 <winHeight>,d3
    615e:	|           |      move.l 19230 <fontHeight>,d0
    6164:	|           |      pea 3 <_start+0x3>
    6168:	|           |      move.l d0,-(sp)
    616a:	|           |      jsr 147e2 <__divsi3>
    6170:	|           |      addq.l #8,sp
    6172:	|           |      move.l d3,d1
    6174:	|           |      sub.l d0,d1
    6176:	|           |      move.l d1,-(sp)
    6178:	|           |      jsr 1420a <__floatunsisf>
    617e:	|           |      addq.l #4,sp
    6180:	|           |      move.l d0,d1
    6182:	|           |      move.l 18aa0 <cameraZoom>,d0
    6188:	|           |      move.l d0,-(sp)
    618a:	|           |      move.l d1,-(sp)
    618c:	|           |      jsr 1408e <__divsf3>
    6192:	|           |      addq.l #8,sp
    6194:	|           |      move.l d0,-(sp)
    6196:	|           |      move.l d2,-(sp)
    6198:	|           |      jsr 13f94 <__addsf3>
    619e:	|           |      addq.l #8,sp
    61a0:	|           |      movea.l 19144 <speech>,a2
    61a6:	|           |      move.l d0,-(sp)
    61a8:	|           |      jsr 1417a <__fixsfsi>
    61ae:	|           |      addq.l #4,sp
    61b0:	|           |      move.l d0,8(a2)

    if (offset) {
    61b4:	|           \----> move.l 16(sp),d0
    61b8:	|        /-------- beq.s 61ee <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    61ba:	|        |         movea.l 19144 <speech>,a0
    61c0:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    61c6:	|        |     /-- bra.s 61e8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    61c8:	|        |  /--|-> movea.l 20(sp),a0
    61cc:	|        |  |  |   move.l 8(a0),d1
    61d0:	|        |  |  |   move.l 16(sp),d0
    61d4:	|        |  |  |   add.l d1,d0
    61d6:	|        |  |  |   movea.l 20(sp),a0
    61da:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    61de:	|        |  |  |   movea.l 20(sp),a0
    61e2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    61e8:	|        |  |  \-> tst.l 20(sp)
    61ec:	|        |  \----- bne.s 61c8 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    61ee:	|        \-------> move.l 24(sp),d0
}
    61f2:	\----------------> movem.l (sp)+,d2-d4/a2
    61f6:	                   lea 16(sp),sp
    61fa:	                   rts

000061fc <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    61fc:	    subq.l #4,sp
    61fe:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    6200:	    move.l 19198 <zBuffer+0x50>,d0
    6206:	/-- beq.s 623e <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    6208:	|   pea 1919c <zBuffer+0x54>
    620e:	|   pea 1 <_start+0x1>
    6212:	|   jsr 1dae <deleteTextures>
    6218:	|   addq.l #8,sp
		zBuffer.texName = 0;
    621a:	|   clr.l 1919c <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    6220:	|   move.l 19198 <zBuffer+0x50>,4(sp)
    6228:	|   move.l 190e8 <SysBase>,d0
    622e:	|   movea.l d0,a6
    6230:	|   movea.l 4(sp),a1
    6234:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    6238:	|   clr.l 19198 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    623e:	\-> clr.l 19150 <zBuffer+0x8>
	zBuffer.originalNum =0;
    6244:	    clr.l 19194 <zBuffer+0x4c>
}
    624a:	    nop
    624c:	    movea.l (sp)+,a6
    624e:	    addq.l #4,sp
    6250:	    rts

00006252 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    6252:	                         lea -528(sp),sp
    6256:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    625a:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    625e:	                         jsr 61fc <killZBuffer>

	zBuffer.originalNum = y;
    6264:	                         move.l 544(sp),d0
    6268:	                         move.l d0,19194 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    626e:	                         move.l 544(sp),d0
    6272:	                         move.l d0,-(sp)
    6274:	                         jsr 4868 <openFileFromNum>
    627a:	                         addq.l #4,sp
    627c:	                         tst.l d0
    627e:	                     /-- bne.s 6286 <setZBuffer+0x34>
    6280:	                     |   clr.w d0
    6282:	/--------------------|-- bra.w 6664 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    6286:	|                    \-> move.l 190d0 <bigDataFile>,524(sp)
    628e:	|                        move.l 190f0 <DOSBase>,d0
    6294:	|                        movea.l d0,a6
    6296:	|                        move.l 524(sp),d1
    629a:	|                        jsr -306(a6)
    629e:	|                        move.l d0,520(sp)
    62a2:	|                        move.l 520(sp),d0
    62a6:	|                        moveq #83,d1
    62a8:	|                        cmp.l d0,d1
    62aa:	|                    /-- beq.s 630c <setZBuffer+0xba>
    62ac:	|                    |   move.l 190d0 <bigDataFile>,516(sp)
    62b4:	|                    |   move.l 190f0 <DOSBase>,d0
    62ba:	|                    |   movea.l d0,a6
    62bc:	|                    |   move.l 516(sp),d1
    62c0:	|                    |   jsr -306(a6)
    62c4:	|                    |   move.l d0,512(sp)
    62c8:	|                    |   move.l 512(sp),d0
    62cc:	|                    |   moveq #122,d1
    62ce:	|                    |   cmp.l d0,d1
    62d0:	|                    +-- beq.s 630c <setZBuffer+0xba>
    62d2:	|                    |   move.l 190d0 <bigDataFile>,508(sp)
    62da:	|                    |   move.l 190f0 <DOSBase>,d0
    62e0:	|                    |   movea.l d0,a6
    62e2:	|                    |   move.l 508(sp),d1
    62e6:	|                    |   jsr -306(a6)
    62ea:	|                    |   move.l d0,504(sp)
    62ee:	|                    |   move.l 504(sp),d0
    62f2:	|                    |   moveq #98,d1
    62f4:	|                    |   cmp.l d0,d1
    62f6:	|                    +-- beq.s 630c <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    62f8:	|                    |   pea 1578b <custom.c.177df80b+0xab2>
    62fe:	|                    |   jsr 13da6 <KPrintF>
    6304:	|                    |   addq.l #4,sp
		 return FALSE;
    6306:	|                    |   clr.w d0
    6308:	+--------------------|-- bra.w 6664 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    630c:	|                    \-> move.l 190d0 <bigDataFile>,500(sp)
    6314:	|                        move.l 190f0 <DOSBase>,d0
    631a:	|                        movea.l d0,a6
    631c:	|                        move.l 500(sp),d1
    6320:	|                        jsr -306(a6)
    6324:	|                        move.l d0,496(sp)
    6328:	|                        move.l 496(sp),d0
    632c:	|                    /-- beq.s 6336 <setZBuffer+0xe4>
    632e:	|                    |   moveq #1,d1
    6330:	|                    |   cmp.l d0,d1
    6332:	|                 /--|-- beq.s 634c <setZBuffer+0xfa>
    6334:	|              /--|--|-- bra.s 637a <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    6336:	|              |  |  \-> move.l #640,19148 <zBuffer>
		zBuffer.height = 480;
    6340:	|              |  |      move.l #480,1914c <zBuffer+0x4>
		break;
    634a:	|              |  |  /-- bra.s 638e <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    634c:	|              |  \--|-> move.l 190d0 <bigDataFile>,d0
    6352:	|              |     |   move.l d0,-(sp)
    6354:	|              |     |   jsr 6bc <get2bytes>
    635a:	|              |     |   addq.l #4,sp
    635c:	|              |     |   move.l d0,19148 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    6362:	|              |     |   move.l 190d0 <bigDataFile>,d0
    6368:	|              |     |   move.l d0,-(sp)
    636a:	|              |     |   jsr 6bc <get2bytes>
    6370:	|              |     |   addq.l #4,sp
    6372:	|              |     |   move.l d0,1914c <zBuffer+0x4>
		break;
    6378:	|              |     +-- bra.s 638e <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    637a:	|              \-----|-> pea 1579f <custom.c.177df80b+0xac6>
    6380:	|                    |   jsr 13da6 <KPrintF>
    6386:	|                    |   addq.l #4,sp
		return FALSE;
    6388:	|                    |   clr.w d0
    638a:	+--------------------|-- bra.w 6664 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    638e:	|                    \-> move.l 19148 <zBuffer>,d0
    6394:	|                        move.l d0,d1
    6396:	|                        move.l 191d8 <sceneWidth>,d0
    639c:	|                        cmp.l d1,d0
    639e:	|                    /-- bne.s 63b2 <setZBuffer+0x160>
    63a0:	|                    |   move.l 1914c <zBuffer+0x4>,d0
    63a6:	|                    |   move.l d0,d1
    63a8:	|                    |   move.l 191dc <sceneHeight>,d0
    63ae:	|                    |   cmp.l d1,d0
    63b0:	|                 /--|-- beq.s 6402 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    63b2:	|                 |  \-> movea.l 191dc <sceneHeight>,a1
    63b8:	|                 |      movea.l 191d8 <sceneWidth>,a0
    63be:	|                 |      move.l 1914c <zBuffer+0x4>,d1
    63c4:	|                 |      move.l 19148 <zBuffer>,d0
    63ca:	|                 |      move.l a1,-(sp)
    63cc:	|                 |      move.l a0,-(sp)
    63ce:	|                 |      move.l d1,-(sp)
    63d0:	|                 |      move.l d0,-(sp)
    63d2:	|                 |      pea 157eb <custom.c.177df80b+0xb12>
    63d8:	|                 |      moveq #32,d0
    63da:	|                 |      add.l sp,d0
    63dc:	|                 |      move.l d0,-(sp)
    63de:	|                 |      jsr 11568 <sprintf>
    63e4:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    63e8:	|                 |      moveq #12,d0
    63ea:	|                 |      add.l sp,d0
    63ec:	|                 |      move.l d0,-(sp)
    63ee:	|                 |      pea 15806 <custom.c.177df80b+0xb2d>
    63f4:	|                 |      jsr 13da6 <KPrintF>
    63fa:	|                 |      addq.l #8,sp
		return FALSE;
    63fc:	|                 |      clr.w d0
    63fe:	+-----------------|----- bra.w 6664 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6402:	|                 \----> move.l 190d0 <bigDataFile>,492(sp)
    640a:	|                        move.l 190f0 <DOSBase>,d0
    6410:	|                        movea.l d0,a6
    6412:	|                        move.l 492(sp),d1
    6416:	|                        jsr -306(a6)
    641a:	|                        move.l d0,488(sp)
    641e:	|                        move.l 488(sp),d0
    6422:	|                        move.l d0,19150 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6428:	|                        clr.l 544(sp)
    642c:	|                    /-- bra.s 6458 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    642e:	|                 /--|-> move.l 190d0 <bigDataFile>,d0
    6434:	|                 |  |   move.l d0,-(sp)
    6436:	|                 |  |   jsr 6bc <get2bytes>
    643c:	|                 |  |   addq.l #4,sp
    643e:	|                 |  |   move.l 544(sp),d1
    6442:	|                 |  |   add.l d1,d1
    6444:	|                 |  |   add.l d1,d1
    6446:	|                 |  |   lea 540(sp),a0
    644a:	|                 |  |   add.l a0,d1
    644c:	|                 |  |   movea.l d1,a0
    644e:	|                 |  |   lea -144(a0),a0
    6452:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6454:	|                 |  |   addq.l #1,544(sp)
    6458:	|                 |  \-> move.l 19150 <zBuffer+0x8>,d0
    645e:	|                 |      cmp.l 544(sp),d0
    6462:	|                 \----- bhi.s 642e <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    6464:	|                        move.l 19150 <zBuffer+0x8>,d0
    646a:	|                        move.l d0,-(sp)
    646c:	|                        move.l sp,d0
    646e:	|                        addi.l #336,d0
    6474:	|                        move.l d0,-(sp)
    6476:	|                        move.l sp,d0
    6478:	|                        addi.l #404,d0
    647e:	|                        move.l d0,-(sp)
    6480:	|                        jsr 666e <sortZPal>
    6486:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    648a:	|                        clr.l 544(sp)
    648e:	|                    /-- bra.s 6506 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    6490:	|                 /--|-> move.l 544(sp),d0
    6494:	|                 |  |   add.l d0,d0
    6496:	|                 |  |   add.l d0,d0
    6498:	|                 |  |   move.l #540,d1
    649e:	|                 |  |   add.l sp,d1
    64a0:	|                 |  |   add.l d1,d0
    64a2:	|                 |  |   movea.l d0,a0
    64a4:	|                 |  |   lea -208(a0),a0
    64a8:	|                 |  |   move.l (a0),d0
    64aa:	|                 |  |   add.l d0,d0
    64ac:	|                 |  |   add.l d0,d0
    64ae:	|                 |  |   lea 540(sp),a0
    64b2:	|                 |  |   add.l a0,d0
    64b4:	|                 |  |   movea.l d0,a0
    64b6:	|                 |  |   lea -144(a0),a0
    64ba:	|                 |  |   move.l (a0),d0
    64bc:	|                 |  |   move.l 544(sp),d1
    64c0:	|                 |  |   addq.l #3,d1
    64c2:	|                 |  |   add.l d1,d1
    64c4:	|                 |  |   movea.l d1,a1
    64c6:	|                 |  |   adda.l d1,a1
    64c8:	|                 |  |   lea 19148 <zBuffer>,a0
    64ce:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    64d2:	|                 |  |   move.l 544(sp),d0
    64d6:	|                 |  |   add.l d0,d0
    64d8:	|                 |  |   add.l d0,d0
    64da:	|                 |  |   move.l #540,d1
    64e0:	|                 |  |   add.l sp,d1
    64e2:	|                 |  |   add.l d1,d0
    64e4:	|                 |  |   movea.l d0,a0
    64e6:	|                 |  |   lea -208(a0),a0
    64ea:	|                 |  |   move.l (a0),d1
    64ec:	|                 |  |   move.l 544(sp),d0
    64f0:	|                 |  |   add.l d1,d1
    64f2:	|                 |  |   add.l d1,d1
    64f4:	|                 |  |   lea 540(sp),a0
    64f8:	|                 |  |   add.l a0,d1
    64fa:	|                 |  |   movea.l d1,a0
    64fc:	|                 |  |   lea -272(a0),a0
    6500:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6502:	|                 |  |   addq.l #1,544(sp)
    6506:	|                 |  \-> move.l 19150 <zBuffer+0x8>,d0
    650c:	|                 |      cmp.l 544(sp),d0
    6510:	|                 \----- bhi.w 6490 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6514:	|                        move.l 191d8 <sceneWidth>,d0
    651a:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    651e:	|                        move.l 191dc <sceneHeight>,d0
    6524:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    6528:	|                        move.l 484(sp),-(sp)
    652c:	|                        move.l 484(sp),-(sp)
    6530:	|                        jsr 14764 <__mulsi3>
    6536:	|                        addq.l #8,sp
    6538:	|                        move.l d0,476(sp)
    653c:	|                        clr.l 472(sp)
    6540:	|                        move.l 190e8 <SysBase>,d0
    6546:	|                        movea.l d0,a6
    6548:	|                        move.l 476(sp),d0
    654c:	|                        move.l 472(sp),d1
    6550:	|                        jsr -684(a6)
    6554:	|                        move.l d0,468(sp)
    6558:	|                        move.l 468(sp),d0
    655c:	|                        move.l d0,19198 <zBuffer+0x50>
	if (!zBuffer.tex) {
    6562:	|                        move.l 19198 <zBuffer+0x50>,d0
    6568:	|                    /-- bne.s 657e <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    656a:	|                    |   pea 15843 <custom.c.177df80b+0xb6a>
    6570:	|                    |   jsr 13da6 <KPrintF>
    6576:	|                    |   addq.l #4,sp
		return FALSE;
    6578:	|                    |   clr.w d0
    657a:	+--------------------|-- bra.w 6664 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    657e:	|                    \-> clr.l 544(sp)
    6582:	|     /----------------- bra.w 664e <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6586:	|  /--|----------------> clr.l 536(sp)
    658a:	|  |  |     /----------- bra.w 663a <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    658e:	|  |  |  /--|----------> tst.l 528(sp)
    6592:	|  |  |  |  |  /-------- bne.s 65f0 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    6594:	|  |  |  |  |  |         move.l 190d0 <bigDataFile>,464(sp)
    659c:	|  |  |  |  |  |         move.l 190f0 <DOSBase>,d0
    65a2:	|  |  |  |  |  |         movea.l d0,a6
    65a4:	|  |  |  |  |  |         move.l 464(sp),d1
    65a8:	|  |  |  |  |  |         jsr -306(a6)
    65ac:	|  |  |  |  |  |         move.l d0,460(sp)
    65b0:	|  |  |  |  |  |         move.l 460(sp),d0
    65b4:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    65b8:	|  |  |  |  |  |         move.l 532(sp),d0
    65bc:	|  |  |  |  |  |         asr.l #4,d0
    65be:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    65c2:	|  |  |  |  |  |         moveq #15,d0
    65c4:	|  |  |  |  |  |         cmp.l 528(sp),d0
    65c8:	|  |  |  |  |  |  /----- bne.s 65e6 <setZBuffer+0x394>
    65ca:	|  |  |  |  |  |  |      move.l 190d0 <bigDataFile>,d0
    65d0:	|  |  |  |  |  |  |      move.l d0,-(sp)
    65d2:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    65d8:	|  |  |  |  |  |  |      addq.l #4,sp
    65da:	|  |  |  |  |  |  |      movea.l d0,a0
    65dc:	|  |  |  |  |  |  |      lea 16(a0),a0
    65e0:	|  |  |  |  |  |  |      move.l a0,528(sp)
    65e4:	|  |  |  |  |  |  |  /-- bra.s 65ea <setZBuffer+0x398>
				else stillToGo ++;
    65e6:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    65ea:	|  |  |  |  |  |     \-> moveq #15,d1
    65ec:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    65f0:	|  |  |  |  |  \-------> move.l 532(sp),d0
    65f4:	|  |  |  |  |            add.l d0,d0
    65f6:	|  |  |  |  |            add.l d0,d0
    65f8:	|  |  |  |  |            lea 540(sp),a0
    65fc:	|  |  |  |  |            add.l a0,d0
    65fe:	|  |  |  |  |            movea.l d0,a0
    6600:	|  |  |  |  |            lea -272(a0),a0
    6604:	|  |  |  |  |            move.l (a0),d0
    6606:	|  |  |  |  |            move.l d0,d2
    6608:	|  |  |  |  |            move.l 19198 <zBuffer+0x50>,d3
    660e:	|  |  |  |  |            move.l 484(sp),d0
    6612:	|  |  |  |  |            move.l 544(sp),-(sp)
    6616:	|  |  |  |  |            move.l d0,-(sp)
    6618:	|  |  |  |  |            jsr 14764 <__mulsi3>
    661e:	|  |  |  |  |            addq.l #8,sp
    6620:	|  |  |  |  |            move.l d0,d1
    6622:	|  |  |  |  |            move.l 536(sp),d0
    6626:	|  |  |  |  |            add.l d1,d0
    6628:	|  |  |  |  |            movea.l d3,a0
    662a:	|  |  |  |  |            adda.l d0,a0
    662c:	|  |  |  |  |            move.b d2,d0
    662e:	|  |  |  |  |            lsl.b #4,d0
    6630:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    6632:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6636:	|  |  |  |  |            addq.l #1,536(sp)
    663a:	|  |  |  |  \----------> move.l 536(sp),d1
    663e:	|  |  |  |               move.l 191d8 <sceneWidth>,d0
    6644:	|  |  |  |               cmp.l d1,d0
    6646:	|  |  |  \-------------- bhi.w 658e <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    664a:	|  |  |                  addq.l #1,544(sp)
    664e:	|  |  \----------------> move.l 191dc <sceneHeight>,d0
    6654:	|  |                     cmp.l 544(sp),d0
    6658:	|  \-------------------- bhi.w 6586 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    665c:	|                        jsr 4760 <finishAccess>
	
	return TRUE;
    6662:	|                        moveq #1,d0
}
    6664:	\----------------------> movem.l (sp)+,d2-d3/a6
    6668:	                         lea 528(sp),sp
    666c:	                         rts

0000666e <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    666e:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    6670:	             clr.l 4(sp)
    6674:	         /-- bra.s 668c <sortZPal+0x1e>
		newpal[i] = i;
    6676:	      /--|-> move.l 4(sp),d0
    667a:	      |  |   add.l d0,d0
    667c:	      |  |   add.l d0,d0
    667e:	      |  |   movea.l 16(sp),a0
    6682:	      |  |   adda.l d0,a0
    6684:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    6688:	      |  |   addq.l #1,4(sp)
    668c:	      |  \-> move.l 4(sp),d0
    6690:	      |      cmp.l 20(sp),d0
    6694:	      \----- blt.s 6676 <sortZPal+0x8>
	}

	if (size < 2) return;		
    6696:	             moveq #1,d0
    6698:	             cmp.l 20(sp),d0
    669c:	/----------- bge.w 674e <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    66a0:	|            moveq #1,d0
    66a2:	|            move.l d0,4(sp)
    66a6:	|     /----- bra.w 6740 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    66aa:	|  /--|----> move.l 4(sp),d0
    66ae:	|  |  |      add.l d0,d0
    66b0:	|  |  |      add.l d0,d0
    66b2:	|  |  |      movea.l 16(sp),a0
    66b6:	|  |  |      adda.l d0,a0
    66b8:	|  |  |      move.l (a0),d0
    66ba:	|  |  |      add.l d0,d0
    66bc:	|  |  |      add.l d0,d0
    66be:	|  |  |      movea.l 12(sp),a0
    66c2:	|  |  |      adda.l d0,a0
    66c4:	|  |  |      move.l (a0),d1
    66c6:	|  |  |      move.l 4(sp),d0
    66ca:	|  |  |      addi.l #1073741823,d0
    66d0:	|  |  |      add.l d0,d0
    66d2:	|  |  |      add.l d0,d0
    66d4:	|  |  |      movea.l 16(sp),a0
    66d8:	|  |  |      adda.l d0,a0
    66da:	|  |  |      move.l (a0),d0
    66dc:	|  |  |      add.l d0,d0
    66de:	|  |  |      add.l d0,d0
    66e0:	|  |  |      movea.l 12(sp),a0
    66e4:	|  |  |      adda.l d0,a0
    66e6:	|  |  |      move.l (a0),d0
    66e8:	|  |  |      cmp.l d1,d0
    66ea:	|  |  |  /-- ble.s 673c <sortZPal+0xce>
			tmp = newpal[i];
    66ec:	|  |  |  |   move.l 4(sp),d0
    66f0:	|  |  |  |   add.l d0,d0
    66f2:	|  |  |  |   add.l d0,d0
    66f4:	|  |  |  |   movea.l 16(sp),a0
    66f8:	|  |  |  |   adda.l d0,a0
    66fa:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    66fc:	|  |  |  |   move.l 4(sp),d0
    6700:	|  |  |  |   addi.l #1073741823,d0
    6706:	|  |  |  |   add.l d0,d0
    6708:	|  |  |  |   add.l d0,d0
    670a:	|  |  |  |   movea.l 16(sp),a1
    670e:	|  |  |  |   adda.l d0,a1
    6710:	|  |  |  |   move.l 4(sp),d0
    6714:	|  |  |  |   add.l d0,d0
    6716:	|  |  |  |   add.l d0,d0
    6718:	|  |  |  |   movea.l 16(sp),a0
    671c:	|  |  |  |   adda.l d0,a0
    671e:	|  |  |  |   move.l (a1),d0
    6720:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    6722:	|  |  |  |   move.l 4(sp),d0
    6726:	|  |  |  |   addi.l #1073741823,d0
    672c:	|  |  |  |   add.l d0,d0
    672e:	|  |  |  |   add.l d0,d0
    6730:	|  |  |  |   movea.l 16(sp),a0
    6734:	|  |  |  |   adda.l d0,a0
    6736:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    6738:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    673c:	|  |  |  \-> addq.l #1,4(sp)
    6740:	|  |  \----> move.l 4(sp),d0
    6744:	|  |         cmp.l 20(sp),d0
    6748:	|  \-------- blt.w 66aa <sortZPal+0x3c>
    674c:	|        /-- bra.s 6750 <sortZPal+0xe2>
	if (size < 2) return;		
    674e:	\--------|-> nop
		}
	}
    6750:	         \-> addq.l #8,sp
    6752:	             rts

00006754 <loadSpriteBank>:
#include "sprites.h"
#include "fileset.h"
#include "moreio.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    6754:	             lea -84(sp),sp
    6758:	             movem.l d2-d4/a2/a6,-(sp)
    675c:	             move.l 116(sp),d0
    6760:	             move.w d0,d0
    6762:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    6766:	             clr.l 96(sp)
    676a:	             clr.l 92(sp)
    676e:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    6772:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    6776:	             move.l 108(sp),-(sp)
    677a:	             jsr 4868 <openFileFromNum>
    6780:	             addq.l #4,sp
    6782:	             tst.l d0
    6784:	         /-- bne.s 679a <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    6786:	         |   pea 15866 <custom.c.177df80b+0xb8d>
    678c:	         |   jsr 13da6 <KPrintF>
    6792:	         |   addq.l #4,sp
		return FALSE;
    6794:	         |   clr.w d0
    6796:	/--------|-- bra.w 6a60 <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    679a:	|        \-> movea.l 112(sp),a0
    679e:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    67a4:	|            move.l 190d0 <bigDataFile>,d0
    67aa:	|            move.l d0,-(sp)
    67ac:	|            jsr 6bc <get2bytes>
    67b2:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    67b4:	|            move.l 190d0 <bigDataFile>,80(sp)
    67bc:	|            move.l 190f0 <DOSBase>,d0
    67c2:	|            movea.l d0,a6
    67c4:	|            move.l 80(sp),d1
    67c8:	|            jsr -306(a6)
    67cc:	|            move.l d0,76(sp)
    67d0:	|            move.l 76(sp),d0
    67d4:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    67d8:	|            move.l 190d0 <bigDataFile>,d0
    67de:	|            move.l d0,-(sp)
    67e0:	|            jsr 6bc <get2bytes>
    67e6:	|            addq.l #4,sp
    67e8:	|            move.l d0,72(sp)

	if (total <= 0) {
    67ec:	|        /-- bgt.s 6802 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    67ee:	|        |   pea 15894 <custom.c.177df80b+0xbbb>
    67f4:	|        |   jsr 13da6 <KPrintF>
    67fa:	|        |   addq.l #4,sp
		return FALSE;
    67fc:	|        |   clr.w d0
    67fe:	+--------|-- bra.w 6a60 <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    6802:	|        \-> moveq #3,d0
    6804:	|            cmp.l 96(sp),d0
    6808:	|        /-- bge.s 681e <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    680a:	|        |   pea 158d4 <custom.c.177df80b+0xbfb>
    6810:	|        |   jsr 13da6 <KPrintF>
    6816:	|        |   addq.l #4,sp
		return FALSE;
    6818:	|        |   clr.w d0
    681a:	+--------|-- bra.w 6a60 <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    681e:	|        \-> movea.l 112(sp),a0
    6822:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    6826:	|            move.l 72(sp),d1
    682a:	|            move.l d1,d0
    682c:	|            lsl.l #3,d0
    682e:	|            sub.l d1,d0
    6830:	|            add.l d0,d0
    6832:	|            add.l d0,d0
    6834:	|            move.l d0,68(sp)
    6838:	|            clr.l 64(sp)
    683c:	|            move.l 190e8 <SysBase>,d0
    6842:	|            movea.l d0,a6
    6844:	|            move.l 68(sp),d0
    6848:	|            move.l 64(sp),d1
    684c:	|            jsr -684(a6)
    6850:	|            move.l d0,60(sp)
    6854:	|            move.l 60(sp),d0
    6858:	|            movea.l 112(sp),a0
    685c:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    6860:	|            movea.l 112(sp),a0
    6864:	|            move.l 8(a0),d0
    6868:	|        /-- bne.s 6870 <loadSpriteBank+0x11c>
    686a:	|        |   clr.w d0
    686c:	+--------|-- bra.w 6a60 <loadSpriteBank+0x30c>
	
	startIndex = 1;
    6870:	|        \-> moveq #1,d0
    6872:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    6876:	|            clr.l 100(sp)
    687a:	|     /----- bra.w 6a4c <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    687e:	|  /--|----> movea.l 190d0 <bigDataFile>,a1
    6884:	|  |  |      movea.l 112(sp),a0
    6888:	|  |  |      movea.l 8(a0),a0
    688c:	|  |  |      move.l 100(sp),d1
    6890:	|  |  |      move.l d1,d0
    6892:	|  |  |      lsl.l #3,d0
    6894:	|  |  |      sub.l d1,d0
    6896:	|  |  |      add.l d0,d0
    6898:	|  |  |      add.l d0,d0
    689a:	|  |  |      lea (0,a0,d0.l),a2
    689e:	|  |  |      move.l a1,-(sp)
    68a0:	|  |  |      jsr 6bc <get2bytes>
    68a6:	|  |  |      addq.l #4,sp
    68a8:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    68aa:	|  |  |      movea.l 190d0 <bigDataFile>,a1
    68b0:	|  |  |      movea.l 112(sp),a0
    68b4:	|  |  |      movea.l 8(a0),a0
    68b8:	|  |  |      move.l 100(sp),d1
    68bc:	|  |  |      move.l d1,d0
    68be:	|  |  |      lsl.l #3,d0
    68c0:	|  |  |      sub.l d1,d0
    68c2:	|  |  |      add.l d0,d0
    68c4:	|  |  |      add.l d0,d0
    68c6:	|  |  |      lea (0,a0,d0.l),a2
    68ca:	|  |  |      move.l a1,-(sp)
    68cc:	|  |  |      jsr 6bc <get2bytes>
    68d2:	|  |  |      addq.l #4,sp
    68d4:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    68d8:	|  |  |      movea.l 190d0 <bigDataFile>,a1
    68de:	|  |  |      movea.l 112(sp),a0
    68e2:	|  |  |      movea.l 8(a0),a0
    68e6:	|  |  |      move.l 100(sp),d1
    68ea:	|  |  |      move.l d1,d0
    68ec:	|  |  |      lsl.l #3,d0
    68ee:	|  |  |      sub.l d1,d0
    68f0:	|  |  |      add.l d0,d0
    68f2:	|  |  |      add.l d0,d0
    68f4:	|  |  |      lea (0,a0,d0.l),a2
    68f8:	|  |  |      move.l a1,-(sp)
    68fa:	|  |  |      jsr 6bc <get2bytes>
    6900:	|  |  |      addq.l #4,sp
    6902:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    6906:	|  |  |      movea.l 190d0 <bigDataFile>,a1
    690c:	|  |  |      movea.l 112(sp),a0
    6910:	|  |  |      movea.l 8(a0),a0
    6914:	|  |  |      move.l 100(sp),d1
    6918:	|  |  |      move.l d1,d0
    691a:	|  |  |      lsl.l #3,d0
    691c:	|  |  |      sub.l d1,d0
    691e:	|  |  |      add.l d0,d0
    6920:	|  |  |      add.l d0,d0
    6922:	|  |  |      lea (0,a0,d0.l),a2
    6926:	|  |  |      move.l a1,-(sp)
    6928:	|  |  |      jsr 6bc <get2bytes>
    692e:	|  |  |      addq.l #4,sp
    6930:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    6934:	|  |  |      movea.l 112(sp),a0
    6938:	|  |  |      movea.l 8(a0),a0
    693c:	|  |  |      move.l 100(sp),d1
    6940:	|  |  |      move.l d1,d0
    6942:	|  |  |      lsl.l #3,d0
    6944:	|  |  |      sub.l d1,d0
    6946:	|  |  |      add.l d0,d0
    6948:	|  |  |      add.l d0,d0
    694a:	|  |  |      adda.l d0,a0
    694c:	|  |  |      move.l (a0),d0
    694e:	|  |  |  /-- bpl.s 6952 <loadSpriteBank+0x1fe>
    6950:	|  |  |  |   addq.l #7,d0
    6952:	|  |  |  \-> asr.l #3,d0
    6954:	|  |  |      move.l d0,d2
    6956:	|  |  |      movea.l 112(sp),a0
    695a:	|  |  |      movea.l 8(a0),a0
    695e:	|  |  |      move.l 100(sp),d1
    6962:	|  |  |      move.l d1,d0
    6964:	|  |  |      lsl.l #3,d0
    6966:	|  |  |      sub.l d1,d0
    6968:	|  |  |      add.l d0,d0
    696a:	|  |  |      add.l d0,d0
    696c:	|  |  |      adda.l d0,a0
    696e:	|  |  |      move.l 4(a0),d0
    6972:	|  |  |      move.l d0,d0
    6974:	|  |  |      move.w d2,d1
    6976:	|  |  |      muls.w d0,d1
    6978:	|  |  |      move.w d1,d0
    697a:	|  |  |      add.w d0,d0
    697c:	|  |  |      add.w d1,d0
    697e:	|  |  |      add.w d0,d0
    6980:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    6984:	|  |  |      moveq #0,d0
    6986:	|  |  |      move.w 58(sp),d0
    698a:	|  |  |      add.l d0,d0
    698c:	|  |  |      move.l d0,54(sp)
    6990:	|  |  |      moveq #2,d0
    6992:	|  |  |      move.l d0,50(sp)
    6996:	|  |  |      move.l 190e8 <SysBase>,d0
    699c:	|  |  |      movea.l d0,a6
    699e:	|  |  |      move.l 54(sp),d0
    69a2:	|  |  |      move.l 50(sp),d1
    69a6:	|  |  |      jsr -684(a6)
    69aa:	|  |  |      move.l d0,46(sp)
    69ae:	|  |  |      movea.l 46(sp),a1
    69b2:	|  |  |      movea.l 112(sp),a0
    69b6:	|  |  |      movea.l 8(a0),a0
    69ba:	|  |  |      move.l 100(sp),d1
    69be:	|  |  |      move.l d1,d0
    69c0:	|  |  |      lsl.l #3,d0
    69c2:	|  |  |      sub.l d1,d0
    69c4:	|  |  |      add.l d0,d0
    69c6:	|  |  |      add.l d0,d0
    69c8:	|  |  |      adda.l d0,a0
    69ca:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    69ce:	|  |  |      move.l 190d0 <bigDataFile>,42(sp)
    69d6:	|  |  |      movea.l 112(sp),a0
    69da:	|  |  |      movea.l 8(a0),a0
    69de:	|  |  |      move.l 100(sp),d1
    69e2:	|  |  |      move.l d1,d0
    69e4:	|  |  |      lsl.l #3,d0
    69e6:	|  |  |      sub.l d1,d0
    69e8:	|  |  |      add.l d0,d0
    69ea:	|  |  |      add.l d0,d0
    69ec:	|  |  |      adda.l d0,a0
    69ee:	|  |  |      move.l 24(a0),38(sp)
    69f4:	|  |  |      moveq #2,d0
    69f6:	|  |  |      move.l d0,34(sp)
    69fa:	|  |  |      move.w 58(sp),d0
    69fe:	|  |  |      lsr.w #1,d0
    6a00:	|  |  |      move.w d0,d0
    6a02:	|  |  |      andi.l #65535,d0
    6a08:	|  |  |      move.l d0,30(sp)
    6a0c:	|  |  |      move.l 190f0 <DOSBase>,d0
    6a12:	|  |  |      movea.l d0,a6
    6a14:	|  |  |      move.l 42(sp),d1
    6a18:	|  |  |      move.l 38(sp),d2
    6a1c:	|  |  |      move.l 34(sp),d3
    6a20:	|  |  |      move.l 30(sp),d4
    6a24:	|  |  |      jsr -324(a6)
    6a28:	|  |  |      move.l d0,26(sp)
    6a2c:	|  |  |      move.l 26(sp),d0
    6a30:	|  |  |      move.w d0,24(sp)
		if (!count) {
    6a34:	|  |  |  /-- bne.s 6a48 <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    6a36:	|  |  |  |   pea 15909 <custom.c.177df80b+0xc30>
    6a3c:	|  |  |  |   jsr 13da6 <KPrintF>
    6a42:	|  |  |  |   addq.l #4,sp
			return FALSE;
    6a44:	|  |  |  |   clr.w d0
    6a46:	+--|--|--|-- bra.s 6a60 <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    6a48:	|  |  |  \-> addq.l #1,100(sp)
    6a4c:	|  |  \----> move.l 100(sp),d0
    6a50:	|  |         cmp.l 72(sp),d0
    6a54:	|  \-------- blt.w 687e <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    6a58:	|            jsr 4760 <finishAccess>

	return TRUE;
    6a5e:	|            moveq #1,d0
}
    6a60:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6a64:	             lea 84(sp),sp
    6a68:	             rts

00006a6a <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    6a6a:	subq.l #8,sp
    6a6c:	move.l d2,-(sp)
    6a6e:	move.l 24(sp),d0
    6a72:	move.w d0,d0
    6a74:	move.w d0,6(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    6a78:	movea.l 20(sp),a0
    6a7c:	move.l (a0),d0
    6a7e:	move.l d0,-(sp)
    6a80:	jsr 14542 <__fixunssfsi>
    6a86:	addq.l #4,sp
    6a88:	move.l d0,d0
    6a8a:	movea.l 16(sp),a0
    6a8e:	move.l 8(a0),d1
    6a92:	move.l d1,d1
    6a94:	movea.w d0,a0
    6a96:	suba.w d1,a0
    6a98:	move.w a0,10(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    6a9c:	movea.l 20(sp),a0
    6aa0:	move.l 4(a0),d0
    6aa4:	move.l d0,-(sp)
    6aa6:	jsr 14542 <__fixunssfsi>
    6aac:	addq.l #4,sp
    6aae:	move.l d0,d0
    6ab0:	movea.l 16(sp),a0
    6ab4:	move.l 12(a0),d1
    6ab8:	move.l d1,d1
    6aba:	movea.w d0,a0
    6abc:	suba.w d1,a0
    6abe:	move.w a0,8(sp)

	CstScaleSprite( single, (UWORD) thisPerson->x, (UWORD) thisPerson->y);
    6ac2:	movea.l 20(sp),a0
    6ac6:	move.l 4(a0),d0
    6aca:	move.l d0,-(sp)
    6acc:	jsr 14542 <__fixunssfsi>
    6ad2:	addq.l #4,sp
    6ad4:	move.l d0,d0
    6ad6:	moveq #0,d2
    6ad8:	move.w d0,d2
    6ada:	movea.l 20(sp),a0
    6ade:	move.l (a0),d0
    6ae0:	move.l d0,-(sp)
    6ae2:	jsr 14542 <__fixunssfsi>
    6ae8:	addq.l #4,sp
    6aea:	move.l d0,d0
    6aec:	move.w d0,d0
    6aee:	andi.l #65535,d0
    6af4:	move.l d2,-(sp)
    6af6:	move.l d0,-(sp)
    6af8:	move.l 24(sp),-(sp)
    6afc:	jsr 1608 <CstScaleSprite>
    6b02:	lea 12(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    6b06:	nop
    6b08:	move.l (sp)+,d2
    6b0a:	addq.l #8,sp
    6b0c:	rts

00006b0e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    6b0e:	    move.l 4(sp),d0
    6b12:	/-- bpl.s 6b16 <TF_abs+0x8>
    6b14:	|   neg.l d0
}
    6b16:	\-> rts

00006b18 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    6b18:	             lea -28(sp),sp
    6b1c:	             move.l a6,-(sp)
    6b1e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6b20:	             moveq #120,d0
    6b22:	             move.l d0,28(sp)
    6b26:	             clr.l 24(sp)
    6b2a:	             move.l 190e8 <SysBase>,d0
    6b30:	             movea.l d0,a6
    6b32:	             move.l 28(sp),d0
    6b36:	             move.l 24(sp),d1
    6b3a:	             jsr -684(a6)
    6b3e:	             move.l d0,20(sp)
    6b42:	             move.l 20(sp),d0
    6b46:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    6b4a:	         /-- bne.s 6b52 <addPerson+0x3a>
    6b4c:	         |   clr.w d0
    6b4e:	/--------|-- bra.w 6d82 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    6b52:	|        \-> move.l 48(sp),-(sp)
    6b56:	|            jsr ac84 <loadObjectType>
    6b5c:	|            addq.l #4,sp
    6b5e:	|            movea.l 16(sp),a0
    6b62:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    6b66:	|            movea.l 16(sp),a0
    6b6a:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    6b72:	|            movea.l 16(sp),a0
    6b76:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    6b7a:	|            movea.l 16(sp),a0
    6b7e:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    6b82:	|            move.l 44(sp),-(sp)
    6b86:	|            jsr 141e2 <__floatsisf>
    6b8c:	|            addq.l #4,sp
    6b8e:	|            move.l d0,d2
    6b90:	|            move.l 40(sp),-(sp)
    6b94:	|            jsr 141e2 <__floatsisf>
    6b9a:	|            addq.l #4,sp
    6b9c:	|            move.l d2,-(sp)
    6b9e:	|            move.l d0,-(sp)
    6ba0:	|            move.l 24(sp),-(sp)
    6ba4:	|            jsr 8590 <moveAndScale>
    6baa:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6bae:	|            movea.l 16(sp),a0
    6bb2:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    6bb6:	|            movea.l 16(sp),a0
    6bba:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6bc0:	|            movea.l 16(sp),a0
    6bc4:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    6bca:	|            movea.l 16(sp),a0
    6bce:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    6bd2:	|            movea.l 16(sp),a0
    6bd6:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    6bda:	|            movea.l 16(sp),a0
    6bde:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    6be4:	|            movea.l 16(sp),a0
    6be8:	|            clr.l 94(a0)
    newPerson->angle = 180;
    6bec:	|            movea.l 16(sp),a0
    6bf0:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    6bf8:	|            movea.l 16(sp),a0
    6bfc:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    6c04:	|            movea.l 16(sp),a0
    6c08:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    6c0c:	|            movea.l 16(sp),a0
    6c10:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    6c14:	|            movea.l 16(sp),a0
    6c18:	|            movea.l 102(a0),a0
    6c1c:	|            move.l 24(a0),d0
    6c20:	|            movea.l 16(sp),a0
    6c24:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    6c28:	|            movea.l 16(sp),a0
    6c2c:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    6c30:	|            movea.l 16(sp),a0
    6c34:	|            movea.l 102(a0),a0
    6c38:	|            move.l 32(a0),d0
    6c3c:	|            movea.l 16(sp),a0
    6c40:	|            move.l d0,110(a0)
    newPerson->r = 0;
    6c44:	|            movea.l 16(sp),a0
    6c48:	|            clr.b 114(a0)
    newPerson->g = 0;
    6c4c:	|            movea.l 16(sp),a0
    6c50:	|            clr.b 115(a0)
    newPerson->b = 0;
    6c54:	|            movea.l 16(sp),a0
    6c58:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    6c5c:	|            movea.l 16(sp),a0
    6c60:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    6c64:	|            movea.l 16(sp),a0
    6c68:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    6c6c:	|            movea.l 16(sp),a0
    6c70:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    6c76:	|            clr.l -(sp)
    6c78:	|            move.l 20(sp),-(sp)
    6c7c:	|            jsr 5c4e <setFrames>
    6c82:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    6c84:	|            movea.l 52(sp),a0
    6c88:	|            movea.l (a0),a0
    6c8a:	|            movea.l (a0),a0
    6c8c:	|            movea.l 4(a0),a0
    6c90:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    6c94:	|     /----- bpl.s 6c9e <addPerson+0x186>
    6c96:	|     |      move.l 12(sp),d0
    6c9a:	|     |      neg.l d0
    6c9c:	|     |  /-- bra.s 6ca0 <addPerson+0x188>
    6c9e:	|     \--|-> moveq #1,d0
    6ca0:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    6ca4:	|            movea.l 52(sp),a0
    6ca8:	|            movea.l (a0),a0
    6caa:	|            movea.l (a0),a0
    6cac:	|            movea.l (a0),a0
    6cae:	|            move.l 8(a0),d0
    6cb2:	|            cmp.l 8(sp),d0
    6cb6:	|     /----- bgt.s 6ce8 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    6cb8:	|     |      tst.l 12(sp)
    6cbc:	|     |  /-- bge.s 6cca <addPerson+0x1b2>
            newPerson->height = 5;
    6cbe:	|     |  |   movea.l 16(sp),a0
    6cc2:	|     |  |   moveq #5,d1
    6cc4:	|     |  |   move.l d1,8(a0)
    6cc8:	|  /--|--|-- bra.s 6d14 <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    6cca:	|  |  |  \-> movea.l 52(sp),a0
    6cce:	|  |  |      movea.l (a0),a0
    6cd0:	|  |  |      movea.l (a0),a0
    6cd2:	|  |  |      movea.l (a0),a0
    6cd4:	|  |  |      movea.l 16(a0),a0
    6cd8:	|  |  |      move.l 12(a0),d0
    6cdc:	|  |  |      addq.l #5,d0
    6cde:	|  |  |      movea.l 16(sp),a0
    6ce2:	|  |  |      move.l d0,8(a0)
    6ce6:	|  +--|----- bra.s 6d14 <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    6ce8:	|  |  \----> movea.l 52(sp),a0
    6cec:	|  |         movea.l (a0),a0
    6cee:	|  |         movea.l (a0),a0
    6cf0:	|  |         movea.l (a0),a0
    6cf2:	|  |         movea.l 16(a0),a0
    6cf6:	|  |         move.l 8(sp),d1
    6cfa:	|  |         move.l d1,d0
    6cfc:	|  |         lsl.l #3,d0
    6cfe:	|  |         sub.l d1,d0
    6d00:	|  |         add.l d0,d0
    6d02:	|  |         add.l d0,d0
    6d04:	|  |         adda.l d0,a0
    6d06:	|  |         move.l 12(a0),d0
    6d0a:	|  |         addq.l #5,d0
    6d0c:	|  |         movea.l 16(sp),a0
    6d10:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    6d14:	|  \-------> move.l #102816,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6d1c:	|        /-- bra.s 6d2c <addPerson+0x214>
        changethat = &((*changethat)->next);
    6d1e:	|     /--|-> movea.l 32(sp),a0
    6d22:	|     |  |   move.l (a0),d0
    6d24:	|     |  |   moveq #24,d1
    6d26:	|     |  |   add.l d0,d1
    6d28:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6d2c:	|     |  \-> movea.l 32(sp),a0
    6d30:	|     |      move.l (a0),d0
    6d32:	|     |  /-- beq.s 6d5a <addPerson+0x242>
    6d34:	|     |  |   movea.l 32(sp),a0
    6d38:	|     |  |   movea.l (a0),a0
    6d3a:	|     |  |   move.l 4(a0),d2
    6d3e:	|     |  |   move.l 44(sp),-(sp)
    6d42:	|     |  |   jsr 141e2 <__floatsisf>
    6d48:	|     |  |   addq.l #4,sp
    6d4a:	|     |  |   move.l d0,-(sp)
    6d4c:	|     |  |   move.l d2,-(sp)
    6d4e:	|     |  |   jsr 14408 <__ltsf2>
    6d54:	|     |  |   addq.l #8,sp
    6d56:	|     |  |   tst.l d0
    6d58:	|     \--|-- blt.s 6d1e <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    6d5a:	|        \-> movea.l 32(sp),a0
    6d5e:	|            move.l (a0),d0
    6d60:	|            movea.l 16(sp),a0
    6d64:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    6d68:	|            movea.l 32(sp),a0
    6d6c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6d70:	|            movea.l 16(sp),a0
    6d74:	|            move.l 102(a0),d0
    6d78:	|            sne d0
    6d7a:	|            neg.b d0
    6d7c:	|            move.b d0,d0
    6d7e:	|            andi.w #255,d0
}
    6d82:	\----------> move.l (sp)+,d2
    6d84:	             movea.l (sp)+,a6
    6d86:	             lea 28(sp),sp
    6d8a:	             rts

00006d8c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    6d8c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6d8e:	       move.l 8(sp),-(sp)
    6d92:	       jsr 7e48 <findPerson>
    6d98:	       addq.l #4,sp
    6d9a:	       move.l d0,(sp)
    if (moveMe) {
    6d9c:	/----- beq.s 6dd0 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    6d9e:	|      movea.l (sp),a0
    6da0:	|      move.l 56(a0),d0
    6da4:	|  /-- beq.s 6db6 <animatePerson+0x2a>
    6da6:	|  |   movea.l (sp),a0
    6da8:	|  |   move.l 56(a0),d0
    6dac:	|  |   move.l d0,-(sp)
    6dae:	|  |   jsr 24c8 <abortFunction>
    6db4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    6db6:	|  \-> movea.l (sp),a0
    6db8:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    6dbc:	|      movea.l (sp),a0
    6dbe:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    6dc2:	|      movea.l (sp),a0
    6dc4:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    6dc8:	|      movea.l (sp),a0
    6dca:	|      move.l 12(sp),60(a0)
    }
}
    6dd0:	\----> nop
    6dd2:	       addq.l #4,sp
    6dd4:	       rts

00006dd6 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    6dd6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6dd8:	       move.l 8(sp),-(sp)
    6ddc:	       jsr 7e48 <findPerson>
    6de2:	       addq.l #4,sp
    6de4:	       move.l d0,(sp)
    if (moveMe) {
    6de6:	/----- beq.s 6e28 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    6de8:	|      movea.l (sp),a0
    6dea:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    6dee:	|      movea.l (sp),a0
    6df0:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    6df6:	|      move.l (sp),-(sp)
    6df8:	|      jsr 86da <rethinkAngle>
    6dfe:	|      addq.l #4,sp
        if (moveMe->walking) {
    6e00:	|      movea.l (sp),a0
    6e02:	|      move.w 52(a0),d0
    6e06:	|  /-- beq.s 6e1a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    6e08:	|  |   pea 1 <_start+0x1>
    6e0c:	|  |   move.l 4(sp),-(sp)
    6e10:	|  |   jsr 5c4e <setFrames>
    6e16:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    6e18:	+--|-- bra.s 6e28 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    6e1a:	|  \-> clr.l -(sp)
    6e1c:	|      move.l 4(sp),-(sp)
    6e20:	|      jsr 5c4e <setFrames>
    6e26:	|      addq.l #8,sp
}
    6e28:	\----> nop
    6e2a:	       addq.l #4,sp
    6e2c:	       rts

00006e2e <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6e2e:	             lea -36(sp),sp
    6e32:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6e34:	             movea.l 44(sp),a0
    6e38:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6e3e:	             moveq #12,d0
    6e40:	             move.l d0,28(sp)
    6e44:	             clr.l 24(sp)
    6e48:	             move.l 190e8 <SysBase>,d0
    6e4e:	             movea.l d0,a6
    6e50:	             move.l 28(sp),d0
    6e54:	             move.l 24(sp),d1
    6e58:	             jsr -684(a6)
    6e5c:	             move.l d0,20(sp)
    6e60:	             move.l 20(sp),d0
    6e64:	             move.l d0,16(sp)
	if (!(newAnim)) {
    6e68:	         /-- bne.s 6e7e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    6e6a:	         |   pea 1593c <custom.c.177df80b+0xc63>
    6e70:	         |   jsr 13da6 <KPrintF>
    6e76:	         |   addq.l #4,sp
		return NULL;
    6e78:	         |   moveq #0,d0
    6e7a:	/--------|-- bra.w 6fc0 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    6e7e:	|        \-> movea.l 44(sp),a0
    6e82:	|            move.l (a0),d0
    6e84:	|            movea.l 16(sp),a0
    6e88:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    6e8a:	|            movea.l 16(sp),a0
    6e8e:	|            move.l 32(sp),8(a0)

	if (num) {
    6e94:	|  /-------- beq.w 6fb4 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    6e98:	|  |         move.l 32(sp),d1
    6e9c:	|  |         move.l d1,d0
    6e9e:	|  |         add.l d0,d0
    6ea0:	|  |         add.l d1,d0
    6ea2:	|  |         add.l d0,d0
    6ea4:	|  |         add.l d0,d0
    6ea6:	|  |         move.l d0,12(sp)
    6eaa:	|  |         clr.l 8(sp)
    6eae:	|  |         move.l 190e8 <SysBase>,d0
    6eb4:	|  |         movea.l d0,a6
    6eb6:	|  |         move.l 12(sp),d0
    6eba:	|  |         move.l 8(sp),d1
    6ebe:	|  |         jsr -684(a6)
    6ec2:	|  |         move.l d0,4(sp)
    6ec6:	|  |         move.l 4(sp),d0
    6eca:	|  |         movea.l 16(sp),a0
    6ece:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    6ed2:	|  |         movea.l 16(sp),a0
    6ed6:	|  |         move.l 4(a0),d0
    6eda:	|  |     /-- bne.s 6ef0 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    6edc:	|  |     |   pea 1593c <custom.c.177df80b+0xc63>
    6ee2:	|  |     |   jsr 13da6 <KPrintF>
    6ee8:	|  |     |   addq.l #4,sp
			return NULL;
    6eea:	|  |     |   moveq #0,d0
    6eec:	+--|-----|-- bra.w 6fc0 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    6ef0:	|  |     \-> clr.l 36(sp)
    6ef4:	|  |     /-- bra.w 6fa6 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    6ef8:	|  |  /--|-> movea.l 44(sp),a0
    6efc:	|  |  |  |   movea.l 4(a0),a0
    6f00:	|  |  |  |   move.l 36(sp),d1
    6f04:	|  |  |  |   move.l d1,d0
    6f06:	|  |  |  |   add.l d0,d0
    6f08:	|  |  |  |   add.l d1,d0
    6f0a:	|  |  |  |   add.l d0,d0
    6f0c:	|  |  |  |   add.l d0,d0
    6f0e:	|  |  |  |   lea (0,a0,d0.l),a1
    6f12:	|  |  |  |   movea.l 16(sp),a0
    6f16:	|  |  |  |   movea.l 4(a0),a0
    6f1a:	|  |  |  |   move.l 36(sp),d1
    6f1e:	|  |  |  |   move.l d1,d0
    6f20:	|  |  |  |   add.l d0,d0
    6f22:	|  |  |  |   add.l d1,d0
    6f24:	|  |  |  |   add.l d0,d0
    6f26:	|  |  |  |   add.l d0,d0
    6f28:	|  |  |  |   adda.l d0,a0
    6f2a:	|  |  |  |   move.l (a1),d0
    6f2c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6f2e:	|  |  |  |   movea.l 44(sp),a0
    6f32:	|  |  |  |   movea.l 4(a0),a0
    6f36:	|  |  |  |   move.l 36(sp),d1
    6f3a:	|  |  |  |   move.l d1,d0
    6f3c:	|  |  |  |   add.l d0,d0
    6f3e:	|  |  |  |   add.l d1,d0
    6f40:	|  |  |  |   add.l d0,d0
    6f42:	|  |  |  |   add.l d0,d0
    6f44:	|  |  |  |   lea (0,a0,d0.l),a1
    6f48:	|  |  |  |   movea.l 16(sp),a0
    6f4c:	|  |  |  |   movea.l 4(a0),a0
    6f50:	|  |  |  |   move.l 36(sp),d1
    6f54:	|  |  |  |   move.l d1,d0
    6f56:	|  |  |  |   add.l d0,d0
    6f58:	|  |  |  |   add.l d1,d0
    6f5a:	|  |  |  |   add.l d0,d0
    6f5c:	|  |  |  |   add.l d0,d0
    6f5e:	|  |  |  |   adda.l d0,a0
    6f60:	|  |  |  |   move.l 4(a1),d0
    6f64:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    6f68:	|  |  |  |   movea.l 44(sp),a0
    6f6c:	|  |  |  |   movea.l 4(a0),a0
    6f70:	|  |  |  |   move.l 36(sp),d1
    6f74:	|  |  |  |   move.l d1,d0
    6f76:	|  |  |  |   add.l d0,d0
    6f78:	|  |  |  |   add.l d1,d0
    6f7a:	|  |  |  |   add.l d0,d0
    6f7c:	|  |  |  |   add.l d0,d0
    6f7e:	|  |  |  |   lea (0,a0,d0.l),a1
    6f82:	|  |  |  |   movea.l 16(sp),a0
    6f86:	|  |  |  |   movea.l 4(a0),a0
    6f8a:	|  |  |  |   move.l 36(sp),d1
    6f8e:	|  |  |  |   move.l d1,d0
    6f90:	|  |  |  |   add.l d0,d0
    6f92:	|  |  |  |   add.l d1,d0
    6f94:	|  |  |  |   add.l d0,d0
    6f96:	|  |  |  |   add.l d0,d0
    6f98:	|  |  |  |   adda.l d0,a0
    6f9a:	|  |  |  |   move.l 8(a1),d0
    6f9e:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6fa2:	|  |  |  |   addq.l #1,36(sp)
    6fa6:	|  |  |  \-> move.l 36(sp),d0
    6faa:	|  |  |      cmp.l 32(sp),d0
    6fae:	|  |  \----- blt.w 6ef8 <copyAnim+0xca>
    6fb2:	|  |     /-- bra.s 6fbc <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6fb4:	|  \-----|-> movea.l 16(sp),a0
    6fb8:	|        |   clr.l 4(a0)
	}

	return newAnim;
    6fbc:	|        \-> move.l 16(sp),d0
}
    6fc0:	\----------> movea.l (sp)+,a6
    6fc2:	             lea 36(sp),sp
    6fc6:	             rts

00006fc8 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    6fc8:	                lea -44(sp),sp
    6fcc:	                move.l a6,-(sp)
    6fce:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    6fd0:	                moveq #12,d0
    6fd2:	                move.l d0,40(sp)
    6fd6:	                clr.l 36(sp)
    6fda:	                move.l 190e8 <SysBase>,d0
    6fe0:	                movea.l d0,a6
    6fe2:	                move.l 40(sp),d0
    6fe6:	                move.l 36(sp),d1
    6fea:	                jsr -684(a6)
    6fee:	                move.l d0,32(sp)
    6ff2:	                move.l 32(sp),d0
    6ff6:	                move.l d0,28(sp)
	if( !newP) {
    6ffa:	            /-- bne.s 7010 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6ffc:	            |   pea 1595d <custom.c.177df80b+0xc84>
    7002:	            |   jsr 13da6 <KPrintF>
    7008:	            |   addq.l #4,sp
		return NULL;
    700a:	            |   moveq #0,d0
    700c:	/-----------|-- bra.w 71e0 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    7010:	|           \-> movea.l 28(sp),a0
    7014:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    701a:	|               move.l 56(sp),d1
    701e:	|               move.l d1,d0
    7020:	|               add.l d0,d0
    7022:	|               add.l d1,d0
    7024:	|               add.l d0,d0
    7026:	|               add.l d0,d0
    7028:	|               move.l d0,24(sp)
    702c:	|               clr.l 20(sp)
    7030:	|               move.l 190e8 <SysBase>,d0
    7036:	|               movea.l d0,a6
    7038:	|               move.l 24(sp),d0
    703c:	|               move.l 20(sp),d1
    7040:	|               jsr -684(a6)
    7044:	|               move.l d0,16(sp)
    7048:	|               move.l 16(sp),d0
    704c:	|               movea.l 28(sp),a0
    7050:	|               move.l d0,4(a0)
	if( !newP->frames) {
    7054:	|               movea.l 28(sp),a0
    7058:	|               move.l 4(a0),d0
    705c:	|           /-- bne.s 7072 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    705e:	|           |   pea 1595d <custom.c.177df80b+0xc84>
    7064:	|           |   jsr 13da6 <KPrintF>
    706a:	|           |   addq.l #4,sp
		return NULL;
    706c:	|           |   moveq #0,d0
    706e:	+-----------|-- bra.w 71e0 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    7072:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    7078:	|               movea.l 60(sp),a0
    707c:	|               move.l (a0),44(sp)
	while (a) {
    7080:	|     /-------- bra.w 71d4 <createPersonaAnim+0x20c>
		a --;
    7084:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    7088:	|  |  |         movea.l 28(sp),a0
    708c:	|  |  |         movea.l 4(a0),a0
    7090:	|  |  |         move.l 48(sp),d1
    7094:	|  |  |         move.l d1,d0
    7096:	|  |  |         add.l d0,d0
    7098:	|  |  |         add.l d1,d0
    709a:	|  |  |         add.l d0,d0
    709c:	|  |  |         add.l d0,d0
    709e:	|  |  |         adda.l d0,a0
    70a0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    70a4:	|  |  |         movea.l 44(sp),a0
    70a8:	|  |  |         move.l (a0),d0
    70aa:	|  |  |         moveq #5,d1
    70ac:	|  |  |         cmp.l d0,d1
    70ae:	|  |  |     /-- bne.s 70da <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    70b0:	|  |  |     |   movea.l 28(sp),a0
    70b4:	|  |  |     |   movea.l 4(a0),a0
    70b8:	|  |  |     |   move.l 48(sp),d1
    70bc:	|  |  |     |   move.l d1,d0
    70be:	|  |  |     |   add.l d0,d0
    70c0:	|  |  |     |   add.l d1,d0
    70c2:	|  |  |     |   add.l d0,d0
    70c4:	|  |  |     |   add.l d0,d0
    70c6:	|  |  |     |   lea (0,a0,d0.l),a1
    70ca:	|  |  |     |   movea.l 44(sp),a0
    70ce:	|  |  |     |   move.l 4(a0),d0
    70d2:	|  |  |     |   move.l d0,8(a1)
    70d6:	|  |  |  /--|-- bra.w 7182 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    70da:	|  |  |  |  \-> movea.l 44(sp),a0
    70de:	|  |  |  |      move.l (a0),d0
    70e0:	|  |  |  |      moveq #2,d1
    70e2:	|  |  |  |      cmp.l d0,d1
    70e4:	|  |  |  |  /-- bne.s 7110 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    70e6:	|  |  |  |  |   movea.l 44(sp),a0
    70ea:	|  |  |  |  |   move.l 4(a0),d2
    70ee:	|  |  |  |  |   movea.l 28(sp),a0
    70f2:	|  |  |  |  |   movea.l 4(a0),a0
    70f6:	|  |  |  |  |   move.l 48(sp),d1
    70fa:	|  |  |  |  |   move.l d1,d0
    70fc:	|  |  |  |  |   add.l d0,d0
    70fe:	|  |  |  |  |   add.l d1,d0
    7100:	|  |  |  |  |   add.l d0,d0
    7102:	|  |  |  |  |   add.l d0,d0
    7104:	|  |  |  |  |   adda.l d0,a0
    7106:	|  |  |  |  |   move.l d2,d0
    7108:	|  |  |  |  |   neg.l d0
    710a:	|  |  |  |  |   move.l d0,8(a0)
    710e:	|  |  |  +--|-- bra.s 7182 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    7110:	|  |  |  |  \-> movea.l 44(sp),a0
    7114:	|  |  |  |      move.l (a0),d0
    7116:	|  |  |  |      moveq #6,d1
    7118:	|  |  |  |      cmp.l d0,d1
    711a:	|  |  |  |  /-- bne.s 7162 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    711c:	|  |  |  |  |   movea.l 44(sp),a0
    7120:	|  |  |  |  |   movea.l 4(a0),a0
    7124:	|  |  |  |  |   move.l (a0),d0
    7126:	|  |  |  |  |   move.l d0,-(sp)
    7128:	|  |  |  |  |   pea 1 <_start+0x1>
    712c:	|  |  |  |  |   lea 20(sp),a0
    7130:	|  |  |  |  |   move.l a0,-(sp)
    7132:	|  |  |  |  |   jsr 11d5e <getValueType>
    7138:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    713c:	|  |  |  |  |   movea.l 44(sp),a0
    7140:	|  |  |  |  |   movea.l 4(a0),a0
    7144:	|  |  |  |  |   movea.l (a0),a0
    7146:	|  |  |  |  |   move.l 8(a0),d0
    714a:	|  |  |  |  |   move.l d0,-(sp)
    714c:	|  |  |  |  |   pea 1 <_start+0x1>
    7150:	|  |  |  |  |   lea 16(sp),a0
    7154:	|  |  |  |  |   move.l a0,-(sp)
    7156:	|  |  |  |  |   jsr 11d5e <getValueType>
    715c:	|  |  |  |  |   lea 12(sp),sp
    7160:	|  |  |  +--|-- bra.s 7182 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    7162:	|  |  |  |  \-> move.l 44(sp),d0
    7166:	|  |  |  |      move.l d0,-(sp)
    7168:	|  |  |  |      pea 1 <_start+0x1>
    716c:	|  |  |  |      lea 20(sp),a0
    7170:	|  |  |  |      move.l a0,-(sp)
    7172:	|  |  |  |      jsr 11d5e <getValueType>
    7178:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    717c:	|  |  |  |      moveq #1,d0
    717e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    7182:	|  |  |  \----> move.l 60(sp),-(sp)
    7186:	|  |  |         jsr 126e2 <trimStack>
    718c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    718e:	|  |  |         movea.l 28(sp),a0
    7192:	|  |  |         movea.l 4(a0),a0
    7196:	|  |  |         move.l 48(sp),d1
    719a:	|  |  |         move.l d1,d0
    719c:	|  |  |         add.l d0,d0
    719e:	|  |  |         add.l d1,d0
    71a0:	|  |  |         add.l d0,d0
    71a2:	|  |  |         add.l d0,d0
    71a4:	|  |  |         adda.l d0,a0
    71a6:	|  |  |         move.l 12(sp),d0
    71aa:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    71ac:	|  |  |         movea.l 28(sp),a0
    71b0:	|  |  |         movea.l 4(a0),a0
    71b4:	|  |  |         move.l 48(sp),d1
    71b8:	|  |  |         move.l d1,d0
    71ba:	|  |  |         add.l d0,d0
    71bc:	|  |  |         add.l d1,d0
    71be:	|  |  |         add.l d0,d0
    71c0:	|  |  |         add.l d0,d0
    71c2:	|  |  |         adda.l d0,a0
    71c4:	|  |  |         move.l 8(sp),d0
    71c8:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    71cc:	|  |  |         movea.l 60(sp),a0
    71d0:	|  |  |         move.l (a0),44(sp)
	while (a) {
    71d4:	|  |  \-------> tst.l 48(sp)
    71d8:	|  \----------- bne.w 7084 <createPersonaAnim+0xbc>
	}

	return newP;
    71dc:	|               move.l 28(sp),d0
}
    71e0:	\-------------> move.l (sp)+,d2
    71e2:	                movea.l (sp)+,a6
    71e4:	                lea 44(sp),sp
    71e8:	                rts

000071ea <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    71ea:	       subq.l #8,sp
    71ec:	       move.l a6,-(sp)

	if (orig)
    71ee:	       tst.l 16(sp)
    71f2:	/----- beq.s 7232 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    71f4:	|      movea.l 16(sp),a0
    71f8:	|      move.l 8(a0),d0
    71fc:	|  /-- beq.s 7218 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    71fe:	|  |   movea.l 16(sp),a0
    7202:	|  |   move.l 4(a0),8(sp)
    7208:	|  |   move.l 190e8 <SysBase>,d0
    720e:	|  |   movea.l d0,a6
    7210:	|  |   movea.l 8(sp),a1
    7214:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    7218:	|  \-> move.l 16(sp),4(sp)
    721e:	|      move.l 190e8 <SysBase>,d0
    7224:	|      movea.l d0,a6
    7226:	|      movea.l 4(sp),a1
    722a:	|      jsr -690(a6)
		orig = NULL;
    722e:	|      clr.l 16(sp)
	}
}
    7232:	\----> nop
    7234:	       movea.l (sp)+,a6
    7236:	       addq.l #8,sp
    7238:	       rts

0000723a <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    723a:	          lea -124(sp),sp
    723e:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    7242:	          movea.l 152(sp),a0
    7246:	          move.l 44(a0),d1
    724a:	          movea.l 152(sp),a0
    724e:	          move.l 48(a0),d0
    7252:	          cmp.l d1,d0
    7254:	      /-- bne.s 7284 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    7256:	      |   movea.l 152(sp),a0
    725a:	      |   moveq #-1,d0
    725c:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    7260:	      |   movea.l 152(sp),a0
    7264:	      |   move.l 28(a0),d0
    7268:	      |   movea.l 152(sp),a0
    726c:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    7270:	      |   movea.l 152(sp),a0
    7274:	      |   move.l 32(a0),d0
    7278:	      |   movea.l 152(sp),a0
    727c:	      |   move.l d0,40(a0)
    7280:	   /--|-- bra.w 77ea <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    7284:	   |  \-> movea.l 19248 <currentFloor>,a0
    728a:	   |      move.l 16(a0),d1
    728e:	   |      movea.l 152(sp),a0
    7292:	   |      move.l 44(a0),d0
    7296:	   |      add.l d0,d0
    7298:	   |      add.l d0,d0
    729a:	   |      movea.l d1,a0
    729c:	   |      adda.l d0,a0
    729e:	   |      move.l (a0),d1
    72a0:	   |      movea.l 152(sp),a0
    72a4:	   |      move.l 48(a0),d0
    72a8:	   |      add.l d0,d0
    72aa:	   |      add.l d0,d0
    72ac:	   |      movea.l d1,a0
    72ae:	   |      adda.l d0,a0
    72b0:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    72b4:	   |      moveq #-1,d0
    72b6:	   |      cmp.l 144(sp),d0
    72ba:	   |  /-- bne.s 72c2 <doBorderStuff+0x88>
    72bc:	   |  |   clr.w d0
    72be:	/--|--|-- bra.w 78ea <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    72c2:	|  |  \-> movea.l 19248 <currentFloor>,a0
    72c8:	|  |      move.l 12(a0),d1
    72cc:	|  |      move.l 144(sp),d0
    72d0:	|  |      lsl.l #3,d0
    72d2:	|  |      add.l d0,d1
    72d4:	|  |      movea.l 19248 <currentFloor>,a0
    72da:	|  |      movea.l 12(a0),a1
    72de:	|  |      movea.l 152(sp),a0
    72e2:	|  |      move.l 44(a0),d0
    72e6:	|  |      lsl.l #3,d0
    72e8:	|  |      add.l a1,d0
    72ea:	|  |      lea 40(sp),a0
    72ee:	|  |      move.l a0,-(sp)
    72f0:	|  |      lea 48(sp),a0
    72f4:	|  |      move.l a0,-(sp)
    72f6:	|  |      move.l d1,-(sp)
    72f8:	|  |      move.l d0,-(sp)
    72fa:	|  |      jsr 13028 <getMatchingCorners>
    7300:	|  |      lea 16(sp),sp
    7304:	|  |      tst.w d0
    7306:	|  |  /-- bne.s 731c <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    7308:	|  |  |   pea 15987 <custom.c.177df80b+0xcae>
    730e:	|  |  |   jsr 13da6 <KPrintF>
    7314:	|  |  |   addq.l #4,sp
            return FALSE;
    7316:	|  |  |   clr.w d0
    7318:	+--|--|-- bra.w 78ea <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    731c:	|  |  \-> movea.l 152(sp),a0
    7320:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    7326:	|  |      movea.l 152(sp),a0
    732a:	|  |      move.l (a0),d0
    732c:	|  |      move.l d0,-(sp)
    732e:	|  |      jsr 1417a <__fixsfsi>
    7334:	|  |      addq.l #4,sp
    7336:	|  |      move.l d0,140(sp)
    733a:	|  |      movea.l 152(sp),a0
    733e:	|  |      move.l 4(a0),d0
    7342:	|  |      move.l d0,-(sp)
    7344:	|  |      jsr 1417a <__fixsfsi>
    734a:	|  |      addq.l #4,sp
    734c:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    7350:	|  |      movea.l 152(sp),a0
    7354:	|  |      move.l 28(a0),132(sp)
    735a:	|  |      movea.l 152(sp),a0
    735e:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    7364:	|  |      movea.l 19248 <currentFloor>,a0
    736a:	|  |      move.l 4(a0),d1
    736e:	|  |      move.l 44(sp),d0
    7372:	|  |      lsl.l #3,d0
    7374:	|  |      movea.l d1,a0
    7376:	|  |      adda.l d0,a0
    7378:	|  |      move.l (a0),124(sp)
    737c:	|  |      movea.l 19248 <currentFloor>,a0
    7382:	|  |      move.l 4(a0),d1
    7386:	|  |      move.l 44(sp),d0
    738a:	|  |      lsl.l #3,d0
    738c:	|  |      movea.l d1,a0
    738e:	|  |      adda.l d0,a0
    7390:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    7396:	|  |      movea.l 19248 <currentFloor>,a0
    739c:	|  |      move.l 4(a0),d1
    73a0:	|  |      move.l 40(sp),d0
    73a4:	|  |      lsl.l #3,d0
    73a6:	|  |      movea.l d1,a0
    73a8:	|  |      adda.l d0,a0
    73aa:	|  |      move.l (a0),116(sp)
    73ae:	|  |      movea.l 19248 <currentFloor>,a0
    73b4:	|  |      move.l 4(a0),d1
    73b8:	|  |      move.l 40(sp),d0
    73bc:	|  |      lsl.l #3,d0
    73be:	|  |      movea.l d1,a0
    73c0:	|  |      adda.l d0,a0
    73c2:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    73c8:	|  |      move.l 140(sp),d0
    73cc:	|  |      sub.l 132(sp),d0
    73d0:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    73d4:	|  |      move.l 136(sp),d0
    73d8:	|  |      sub.l 128(sp),d0
    73dc:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    73e0:	|  |      move.l 116(sp),d0
    73e4:	|  |      sub.l 124(sp),d0
    73e8:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    73ec:	|  |      move.l 112(sp),d0
    73f0:	|  |      sub.l 120(sp),d0
    73f4:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    73f8:	|  |      move.l 124(sp),d0
    73fc:	|  |      sub.l 140(sp),d0
    7400:	|  |      move.l 104(sp),-(sp)
    7404:	|  |      move.l d0,-(sp)
    7406:	|  |      jsr 14764 <__mulsi3>
    740c:	|  |      addq.l #8,sp
    740e:	|  |      move.l d0,d2
    7410:	|  |      move.l 120(sp),d0
    7414:	|  |      sub.l 136(sp),d0
    7418:	|  |      move.l 108(sp),-(sp)
    741c:	|  |      move.l d0,-(sp)
    741e:	|  |      jsr 14764 <__mulsi3>
    7424:	|  |      addq.l #8,sp
    7426:	|  |      move.l d2,d1
    7428:	|  |      sub.l d0,d1
    742a:	|  |      move.l d1,-(sp)
    742c:	|  |      jsr 141a2 <__floatsidf>
    7432:	|  |      addq.l #4,sp
    7434:	|  |      move.l d0,32(sp)
    7438:	|  |      move.l d1,36(sp)
    743c:	|  |      move.l 32(sp),88(sp)
    7442:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    7448:	|  |      move.l 96(sp),-(sp)
    744c:	|  |      move.l 112(sp),-(sp)
    7450:	|  |      jsr 14764 <__mulsi3>
    7456:	|  |      addq.l #8,sp
    7458:	|  |      move.l d0,d2
    745a:	|  |      move.l 100(sp),-(sp)
    745e:	|  |      move.l 108(sp),-(sp)
    7462:	|  |      jsr 14764 <__mulsi3>
    7468:	|  |      addq.l #8,sp
    746a:	|  |      move.l d2,d1
    746c:	|  |      sub.l d0,d1
    746e:	|  |      move.l d1,-(sp)
    7470:	|  |      jsr 141a2 <__floatsidf>
    7476:	|  |      addq.l #4,sp
    7478:	|  |      move.l d1,-(sp)
    747a:	|  |      move.l d0,-(sp)
    747c:	|  |      move.l 100(sp),-(sp)
    7480:	|  |      move.l 100(sp),-(sp)
    7484:	|  |      jsr 1402c <__divdf3>
    748a:	|  |      lea 16(sp),sp
    748e:	|  |      move.l d0,24(sp)
    7492:	|  |      move.l d1,28(sp)
    7496:	|  |      move.l 24(sp),88(sp)
    749c:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    74a2:	|  |      clr.l -(sp)
    74a4:	|  |      clr.l -(sp)
    74a6:	|  |      move.l 100(sp),-(sp)
    74aa:	|  |      move.l 100(sp),-(sp)
    74ae:	|  |      jsr 14300 <__gtdf2>
    74b4:	|  |      lea 16(sp),sp
    74b8:	|  |      tst.l d0
    74ba:	|  |  /-- ble.w 7592 <doBorderStuff+0x358>
    74be:	|  |  |   clr.l -(sp)
    74c0:	|  |  |   move.l #1072693248,-(sp)
    74c6:	|  |  |   move.l 100(sp),-(sp)
    74ca:	|  |  |   move.l 100(sp),-(sp)
    74ce:	|  |  |   jsr 143ba <__ltdf2>
    74d4:	|  |  |   lea 16(sp),sp
    74d8:	|  |  |   tst.l d0
    74da:	|  |  +-- bge.w 7592 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    74de:	|  |  |   move.l 124(sp),-(sp)
    74e2:	|  |  |   jsr 141a2 <__floatsidf>
    74e8:	|  |  |   addq.l #4,sp
    74ea:	|  |  |   move.l d0,d2
    74ec:	|  |  |   move.l d1,d3
    74ee:	|  |  |   move.l 100(sp),-(sp)
    74f2:	|  |  |   jsr 141a2 <__floatsidf>
    74f8:	|  |  |   addq.l #4,sp
    74fa:	|  |  |   move.l 92(sp),-(sp)
    74fe:	|  |  |   move.l 92(sp),-(sp)
    7502:	|  |  |   move.l d1,-(sp)
    7504:	|  |  |   move.l d0,-(sp)
    7506:	|  |  |   jsr 14232 <__muldf3>
    750c:	|  |  |   lea 16(sp),sp
    7510:	|  |  |   move.l d1,-(sp)
    7512:	|  |  |   move.l d0,-(sp)
    7514:	|  |  |   move.l d3,-(sp)
    7516:	|  |  |   move.l d2,-(sp)
    7518:	|  |  |   jsr 13fca <__adddf3>
    751e:	|  |  |   lea 16(sp),sp
    7522:	|  |  |   move.l d1,-(sp)
    7524:	|  |  |   move.l d0,-(sp)
    7526:	|  |  |   jsr 1413a <__fixdfsi>
    752c:	|  |  |   addq.l #8,sp
    752e:	|  |  |   movea.l 152(sp),a0
    7532:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    7536:	|  |  |   move.l 120(sp),-(sp)
    753a:	|  |  |   jsr 141a2 <__floatsidf>
    7540:	|  |  |   addq.l #4,sp
    7542:	|  |  |   move.l d0,d2
    7544:	|  |  |   move.l d1,d3
    7546:	|  |  |   move.l 96(sp),-(sp)
    754a:	|  |  |   jsr 141a2 <__floatsidf>
    7550:	|  |  |   addq.l #4,sp
    7552:	|  |  |   move.l 92(sp),-(sp)
    7556:	|  |  |   move.l 92(sp),-(sp)
    755a:	|  |  |   move.l d1,-(sp)
    755c:	|  |  |   move.l d0,-(sp)
    755e:	|  |  |   jsr 14232 <__muldf3>
    7564:	|  |  |   lea 16(sp),sp
    7568:	|  |  |   move.l d1,-(sp)
    756a:	|  |  |   move.l d0,-(sp)
    756c:	|  |  |   move.l d3,-(sp)
    756e:	|  |  |   move.l d2,-(sp)
    7570:	|  |  |   jsr 13fca <__adddf3>
    7576:	|  |  |   lea 16(sp),sp
    757a:	|  |  |   move.l d1,-(sp)
    757c:	|  |  |   move.l d0,-(sp)
    757e:	|  |  |   jsr 1413a <__fixdfsi>
    7584:	|  |  |   addq.l #8,sp
    7586:	|  |  |   movea.l 152(sp),a0
    758a:	|  |  |   move.l d0,40(a0)
    758e:	|  +--|-- bra.w 77ea <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    7592:	|  |  \-> move.l 140(sp),d0
    7596:	|  |      sub.l 124(sp),d0
    759a:	|  |      move.l d0,84(sp)
    759e:	|  |      move.l 140(sp),d0
    75a2:	|  |      sub.l 116(sp),d0
    75a6:	|  |      move.l d0,80(sp)
    75aa:	|  |      move.l 132(sp),d0
    75ae:	|  |      sub.l 124(sp),d0
    75b2:	|  |      move.l d0,76(sp)
    75b6:	|  |      move.l 132(sp),d0
    75ba:	|  |      sub.l 116(sp),d0
    75be:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    75c2:	|  |      move.l 136(sp),d0
    75c6:	|  |      sub.l 120(sp),d0
    75ca:	|  |      move.l d0,68(sp)
    75ce:	|  |      move.l 136(sp),d0
    75d2:	|  |      sub.l 112(sp),d0
    75d6:	|  |      move.l d0,64(sp)
    75da:	|  |      move.l 128(sp),d0
    75de:	|  |      sub.l 120(sp),d0
    75e2:	|  |      move.l d0,60(sp)
    75e6:	|  |      move.l 128(sp),d0
    75ea:	|  |      sub.l 112(sp),d0
    75ee:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    75f2:	|  |      move.l 84(sp),-(sp)
    75f6:	|  |      move.l 88(sp),-(sp)
    75fa:	|  |      jsr 14764 <__mulsi3>
    7600:	|  |      addq.l #8,sp
    7602:	|  |      move.l d0,84(sp)
    7606:	|  |      move.l 80(sp),-(sp)
    760a:	|  |      move.l 84(sp),-(sp)
    760e:	|  |      jsr 14764 <__mulsi3>
    7614:	|  |      addq.l #8,sp
    7616:	|  |      move.l d0,80(sp)
    761a:	|  |      move.l 76(sp),-(sp)
    761e:	|  |      move.l 80(sp),-(sp)
    7622:	|  |      jsr 14764 <__mulsi3>
    7628:	|  |      addq.l #8,sp
    762a:	|  |      move.l d0,76(sp)
    762e:	|  |      move.l 72(sp),-(sp)
    7632:	|  |      move.l 76(sp),-(sp)
    7636:	|  |      jsr 14764 <__mulsi3>
    763c:	|  |      addq.l #8,sp
    763e:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    7642:	|  |      move.l 68(sp),-(sp)
    7646:	|  |      move.l 72(sp),-(sp)
    764a:	|  |      jsr 14764 <__mulsi3>
    7650:	|  |      addq.l #8,sp
    7652:	|  |      move.l d0,68(sp)
    7656:	|  |      move.l 64(sp),-(sp)
    765a:	|  |      move.l 68(sp),-(sp)
    765e:	|  |      jsr 14764 <__mulsi3>
    7664:	|  |      addq.l #8,sp
    7666:	|  |      move.l d0,64(sp)
    766a:	|  |      move.l 60(sp),-(sp)
    766e:	|  |      move.l 64(sp),-(sp)
    7672:	|  |      jsr 14764 <__mulsi3>
    7678:	|  |      addq.l #8,sp
    767a:	|  |      move.l d0,60(sp)
    767e:	|  |      move.l 56(sp),-(sp)
    7682:	|  |      move.l 60(sp),-(sp)
    7686:	|  |      jsr 14764 <__mulsi3>
    768c:	|  |      addq.l #8,sp
    768e:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    7692:	|  |      move.l 84(sp),-(sp)
    7696:	|  |      jsr 141a2 <__floatsidf>
    769c:	|  |      addq.l #4,sp
    769e:	|  |      move.l d0,d2
    76a0:	|  |      move.l d1,d3
    76a2:	|  |      move.l 68(sp),-(sp)
    76a6:	|  |      jsr 141a2 <__floatsidf>
    76ac:	|  |      addq.l #4,sp
    76ae:	|  |      move.l d1,-(sp)
    76b0:	|  |      move.l d0,-(sp)
    76b2:	|  |      move.l d3,-(sp)
    76b4:	|  |      move.l d2,-(sp)
    76b6:	|  |      jsr 13fca <__adddf3>
    76bc:	|  |      lea 16(sp),sp
    76c0:	|  |      move.l d1,-(sp)
    76c2:	|  |      move.l d0,-(sp)
    76c4:	|  |      jsr 1471a <sqrt>
    76ca:	|  |      addq.l #8,sp
    76cc:	|  |      move.l d0,d2
    76ce:	|  |      move.l d1,d3
    76d0:	|  |      move.l 76(sp),-(sp)
    76d4:	|  |      jsr 141a2 <__floatsidf>
    76da:	|  |      addq.l #4,sp
    76dc:	|  |      move.l d0,d4
    76de:	|  |      move.l d1,d5
    76e0:	|  |      move.l 60(sp),-(sp)
    76e4:	|  |      jsr 141a2 <__floatsidf>
    76ea:	|  |      addq.l #4,sp
    76ec:	|  |      move.l d1,-(sp)
    76ee:	|  |      move.l d0,-(sp)
    76f0:	|  |      move.l d5,-(sp)
    76f2:	|  |      move.l d4,-(sp)
    76f4:	|  |      jsr 13fca <__adddf3>
    76fa:	|  |      lea 16(sp),sp
    76fe:	|  |      move.l d1,-(sp)
    7700:	|  |      move.l d0,-(sp)
    7702:	|  |      jsr 1471a <sqrt>
    7708:	|  |      addq.l #8,sp
    770a:	|  |      move.l d1,-(sp)
    770c:	|  |      move.l d0,-(sp)
    770e:	|  |      move.l d3,-(sp)
    7710:	|  |      move.l d2,-(sp)
    7712:	|  |      jsr 13fca <__adddf3>
    7718:	|  |      lea 16(sp),sp
    771c:	|  |      move.l d0,d2
    771e:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    7720:	|  |      move.l 80(sp),-(sp)
    7724:	|  |      jsr 141a2 <__floatsidf>
    772a:	|  |      addq.l #4,sp
    772c:	|  |      move.l d0,d4
    772e:	|  |      move.l d1,d5
    7730:	|  |      move.l 64(sp),-(sp)
    7734:	|  |      jsr 141a2 <__floatsidf>
    773a:	|  |      addq.l #4,sp
    773c:	|  |      move.l d1,-(sp)
    773e:	|  |      move.l d0,-(sp)
    7740:	|  |      move.l d5,-(sp)
    7742:	|  |      move.l d4,-(sp)
    7744:	|  |      jsr 13fca <__adddf3>
    774a:	|  |      lea 16(sp),sp
    774e:	|  |      move.l d1,-(sp)
    7750:	|  |      move.l d0,-(sp)
    7752:	|  |      jsr 1471a <sqrt>
    7758:	|  |      addq.l #8,sp
    775a:	|  |      move.l d0,d4
    775c:	|  |      move.l d1,d5
    775e:	|  |      move.l 72(sp),-(sp)
    7762:	|  |      jsr 141a2 <__floatsidf>
    7768:	|  |      addq.l #4,sp
    776a:	|  |      move.l d0,d6
    776c:	|  |      move.l d1,d7
    776e:	|  |      move.l 56(sp),-(sp)
    7772:	|  |      jsr 141a2 <__floatsidf>
    7778:	|  |      addq.l #4,sp
    777a:	|  |      move.l d1,-(sp)
    777c:	|  |      move.l d0,-(sp)
    777e:	|  |      move.l d7,-(sp)
    7780:	|  |      move.l d6,-(sp)
    7782:	|  |      jsr 13fca <__adddf3>
    7788:	|  |      lea 16(sp),sp
    778c:	|  |      move.l d1,-(sp)
    778e:	|  |      move.l d0,-(sp)
    7790:	|  |      jsr 1471a <sqrt>
    7796:	|  |      addq.l #8,sp
    7798:	|  |      move.l d1,-(sp)
    779a:	|  |      move.l d0,-(sp)
    779c:	|  |      move.l d5,-(sp)
    779e:	|  |      move.l d4,-(sp)
    77a0:	|  |      jsr 13fca <__adddf3>
    77a6:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    77aa:	|  |      move.l d1,-(sp)
    77ac:	|  |      move.l d0,-(sp)
    77ae:	|  |      move.l d3,-(sp)
    77b0:	|  |      move.l d2,-(sp)
    77b2:	|  |      jsr 143ba <__ltdf2>
    77b8:	|  |      lea 16(sp),sp
    77bc:	|  |      tst.l d0
    77be:	|  |  /-- bge.s 77d6 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    77c0:	|  |  |   movea.l 152(sp),a0
    77c4:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    77ca:	|  |  |   movea.l 152(sp),a0
    77ce:	|  |  |   move.l 120(sp),40(a0)
    77d4:	|  +--|-- bra.s 77ea <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    77d6:	|  |  \-> movea.l 152(sp),a0
    77da:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    77e0:	|  |      movea.l 152(sp),a0
    77e4:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    77ea:	|  \----> movea.l 152(sp),a0
    77ee:	|         move.l 40(a0),d0
    77f2:	|         move.l d0,-(sp)
    77f4:	|         jsr 141e2 <__floatsisf>
    77fa:	|         addq.l #4,sp
    77fc:	|         move.l d0,d1
    77fe:	|         movea.l 152(sp),a0
    7802:	|         move.l 4(a0),d0
    7806:	|         move.l d0,-(sp)
    7808:	|         move.l d1,-(sp)
    780a:	|         jsr 144d6 <__subsf3>
    7810:	|         addq.l #8,sp
    7812:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    7816:	|         movea.l 152(sp),a0
    781a:	|         move.l (a0),d2
    781c:	|         movea.l 152(sp),a0
    7820:	|         move.l 36(a0),d0
    7824:	|         move.l d0,-(sp)
    7826:	|         jsr 141e2 <__floatsisf>
    782c:	|         addq.l #4,sp
    782e:	|         move.l d0,-(sp)
    7830:	|         move.l d2,-(sp)
    7832:	|         jsr 144d6 <__subsf3>
    7838:	|         addq.l #8,sp
    783a:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    783e:	|         clr.l -(sp)
    7840:	|         move.l 52(sp),-(sp)
    7844:	|         jsr 1443e <__nesf2>
    784a:	|         addq.l #8,sp
    784c:	|         tst.l d0
    784e:	|     /-- bne.s 7862 <doBorderStuff+0x628>
    7850:	|     |   clr.l -(sp)
    7852:	|     |   move.l 56(sp),-(sp)
    7856:	|     |   jsr 1443e <__nesf2>
    785c:	|     |   addq.l #8,sp
    785e:	|     |   tst.l d0
    7860:	|  /--|-- beq.s 78d8 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    7862:	|  |  \-> move.l 52(sp),d0
    7866:	|  |      move.l d0,-(sp)
    7868:	|  |      move.l d0,-(sp)
    786a:	|  |      jsr 13f94 <__addsf3>
    7870:	|  |      addq.l #8,sp
    7872:	|  |      move.l d0,-(sp)
    7874:	|  |      move.l 52(sp),-(sp)
    7878:	|  |      jsr 1456a <atan2f>
    787e:	|  |      addq.l #8,sp
    7880:	|  |      move.l d0,-(sp)
    7882:	|  |      jsr 140fa <__extendsfdf2>
    7888:	|  |      addq.l #4,sp
    788a:	|  |      move.l #-1540411785,-(sp)
    7890:	|  |      move.l #1078765033,-(sp)
    7896:	|  |      move.l d1,-(sp)
    7898:	|  |      move.l d0,-(sp)
    789a:	|  |      jsr 14232 <__muldf3>
    78a0:	|  |      lea 16(sp),sp
    78a4:	|  |      clr.l -(sp)
    78a6:	|  |      move.l #1080459264,-(sp)
    78ac:	|  |      move.l d1,-(sp)
    78ae:	|  |      move.l d0,-(sp)
    78b0:	|  |      jsr 13fca <__adddf3>
    78b6:	|  |      lea 16(sp),sp
    78ba:	|  |      move.l d1,-(sp)
    78bc:	|  |      move.l d0,-(sp)
    78be:	|  |      jsr 1413a <__fixdfsi>
    78c4:	|  |      addq.l #8,sp
    78c6:	|  |      movea.l 152(sp),a0
    78ca:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    78ce:	|  |      movea.l 152(sp),a0
    78d2:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    78d8:	|  \----> pea 1 <_start+0x1>
    78dc:	|         move.l 156(sp),-(sp)
    78e0:	|         jsr 5c4e <setFrames>
    78e6:	|         addq.l #8,sp
    return TRUE;
    78e8:	|         moveq #1,d0
}
    78ea:	\-------> movem.l (sp)+,d2-d7
    78ee:	          lea 124(sp),sp
    78f2:	          rts

000078f4 <drawPeople>:

void drawPeople () {
    78f4:	                lea -24(sp),sp
    78f8:	                move.l d2,-(sp)
	shufflePeople ();
    78fa:	                jsr 92bc <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    7900:	                move.l 191a0 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    7908:	                clr.l 20(sp)
	overRegion = NULL;
    790c:	                clr.l 19244 <overRegion>

	while (thisPerson) {
    7912:	   /----------- bra.w 7e34 <drawPeople+0x540>
		if (thisPerson -> show) {
    7916:	/--|----------> movea.l 24(sp),a0
    791a:	|  |            move.w 92(a0),d0
    791e:	|  |  /-------- beq.w 7be8 <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    7922:	|  |  |         movea.l 24(sp),a0
    7926:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    792c:	|  |  |         movea.l 24(sp),a0
    7930:	|  |  |         move.l 64(a0),d0
    7934:	|  |  |         cmp.l 20(sp),d0
    7938:	|  |  |  /----- beq.w 7afc <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    793c:	|  |  |  |      movea.l 24(sp),a0
    7940:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    7946:	|  |  |  |      movea.l 24(sp),a0
    794a:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    794e:	|  |  |  |      movea.l 20(sp),a0
    7952:	|  |  |  |      movea.l 4(a0),a0
    7956:	|  |  |  |      move.l 4(a0),d0
    795a:	|  |  |  |      movea.l 24(sp),a0
    795e:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7962:	|  |  |  |      movea.l 20(sp),a0
    7966:	|  |  |  |      movea.l 4(a0),a1
    796a:	|  |  |  |      movea.l 24(sp),a0
    796e:	|  |  |  |      move.l 72(a0),d0
    7972:	|  |  |  |      move.l d0,d1
    7974:	|  |  |  |      move.l d1,d0
    7976:	|  |  |  |      add.l d0,d0
    7978:	|  |  |  |      add.l d1,d0
    797a:	|  |  |  |      add.l d0,d0
    797c:	|  |  |  |      add.l d0,d0
    797e:	|  |  |  |      lea (0,a1,d0.l),a0
    7982:	|  |  |  |      move.l 8(a0),d0
    7986:	|  |  |  |  /-- ble.w 7a28 <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    798a:	|  |  |  |  |   movea.l 20(sp),a0
    798e:	|  |  |  |  |   movea.l 4(a0),a1
    7992:	|  |  |  |  |   movea.l 24(sp),a0
    7996:	|  |  |  |  |   move.l 72(a0),d0
    799a:	|  |  |  |  |   move.l d0,d1
    799c:	|  |  |  |  |   move.l d1,d0
    799e:	|  |  |  |  |   add.l d0,d0
    79a0:	|  |  |  |  |   add.l d1,d0
    79a2:	|  |  |  |  |   add.l d0,d0
    79a4:	|  |  |  |  |   add.l d0,d0
    79a6:	|  |  |  |  |   lea (0,a1,d0.l),a0
    79aa:	|  |  |  |  |   move.l 8(a0),d0
    79ae:	|  |  |  |  |   clr.l -(sp)
    79b0:	|  |  |  |  |   move.l d0,-(sp)
    79b2:	|  |  |  |  |   jsr a86a <startSound>
    79b8:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    79ba:	|  |  |  |  |   movea.l 24(sp),a0
    79be:	|  |  |  |  |   move.l 72(a0),d0
    79c2:	|  |  |  |  |   addq.l #1,d0
    79c4:	|  |  |  |  |   movea.l 24(sp),a0
    79c8:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    79cc:	|  |  |  |  |   movea.l 24(sp),a0
    79d0:	|  |  |  |  |   move.l 72(a0),d0
    79d4:	|  |  |  |  |   movea.l 24(sp),a0
    79d8:	|  |  |  |  |   movea.l 60(a0),a0
    79dc:	|  |  |  |  |   move.l 8(a0),d1
    79e0:	|  |  |  |  |   move.l d1,-(sp)
    79e2:	|  |  |  |  |   move.l d0,-(sp)
    79e4:	|  |  |  |  |   jsr 14810 <__modsi3>
    79ea:	|  |  |  |  |   addq.l #8,sp
    79ec:	|  |  |  |  |   movea.l 24(sp),a0
    79f0:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    79f4:	|  |  |  |  |   movea.l 24(sp),a0
    79f8:	|  |  |  |  |   movea.l 60(a0),a0
    79fc:	|  |  |  |  |   movea.l 4(a0),a1
    7a00:	|  |  |  |  |   movea.l 24(sp),a0
    7a04:	|  |  |  |  |   move.l 72(a0),d0
    7a08:	|  |  |  |  |   move.l d0,d1
    7a0a:	|  |  |  |  |   move.l d1,d0
    7a0c:	|  |  |  |  |   add.l d0,d0
    7a0e:	|  |  |  |  |   add.l d1,d0
    7a10:	|  |  |  |  |   add.l d0,d0
    7a12:	|  |  |  |  |   add.l d0,d0
    7a14:	|  |  |  |  |   lea (0,a1,d0.l),a0
    7a18:	|  |  |  |  |   move.l 4(a0),d0
    7a1c:	|  |  |  |  |   movea.l 24(sp),a0
    7a20:	|  |  |  |  |   move.l d0,76(a0)
    7a24:	|  |  |  +--|-- bra.w 7afc <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    7a28:	|  |  |  |  \-> movea.l 20(sp),a0
    7a2c:	|  |  |  |      movea.l 4(a0),a1
    7a30:	|  |  |  |      movea.l 24(sp),a0
    7a34:	|  |  |  |      move.l 72(a0),d0
    7a38:	|  |  |  |      move.l d0,d1
    7a3a:	|  |  |  |      move.l d1,d0
    7a3c:	|  |  |  |      add.l d0,d0
    7a3e:	|  |  |  |      add.l d1,d0
    7a40:	|  |  |  |      add.l d0,d0
    7a42:	|  |  |  |      add.l d0,d0
    7a44:	|  |  |  |      lea (0,a1,d0.l),a0
    7a48:	|  |  |  |      move.l 8(a0),d0
    7a4c:	|  |  |  +----- beq.w 7afc <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7a50:	|  |  |  |      movea.l 190b8 <noStack>,a1
    7a56:	|  |  |  |      movea.l 20(sp),a0
    7a5a:	|  |  |  |      move.l 4(a0),d2
    7a5e:	|  |  |  |      movea.l 24(sp),a0
    7a62:	|  |  |  |      move.l 72(a0),d0
    7a66:	|  |  |  |      move.l d0,d1
    7a68:	|  |  |  |      move.l d1,d0
    7a6a:	|  |  |  |      add.l d0,d0
    7a6c:	|  |  |  |      add.l d1,d0
    7a6e:	|  |  |  |      add.l d0,d0
    7a70:	|  |  |  |      add.l d0,d0
    7a72:	|  |  |  |      movea.l d2,a0
    7a74:	|  |  |  |      adda.l d0,a0
    7a76:	|  |  |  |      move.l 8(a0),d0
    7a7a:	|  |  |  |      neg.l d0
    7a7c:	|  |  |  |      pea 1 <_start+0x1>
    7a80:	|  |  |  |      move.l a1,-(sp)
    7a82:	|  |  |  |      clr.l -(sp)
    7a84:	|  |  |  |      clr.l -(sp)
    7a86:	|  |  |  |      move.l d0,-(sp)
    7a88:	|  |  |  |      jsr 45f2 <startNewFunctionNum>
    7a8e:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7a92:	|  |  |  |      movea.l 24(sp),a0
    7a96:	|  |  |  |      move.l 72(a0),d0
    7a9a:	|  |  |  |      addq.l #1,d0
    7a9c:	|  |  |  |      movea.l 24(sp),a0
    7aa0:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7aa4:	|  |  |  |      movea.l 24(sp),a0
    7aa8:	|  |  |  |      move.l 72(a0),d0
    7aac:	|  |  |  |      movea.l 24(sp),a0
    7ab0:	|  |  |  |      movea.l 60(a0),a0
    7ab4:	|  |  |  |      move.l 8(a0),d1
    7ab8:	|  |  |  |      move.l d1,-(sp)
    7aba:	|  |  |  |      move.l d0,-(sp)
    7abc:	|  |  |  |      jsr 14810 <__modsi3>
    7ac2:	|  |  |  |      addq.l #8,sp
    7ac4:	|  |  |  |      movea.l 24(sp),a0
    7ac8:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7acc:	|  |  |  |      movea.l 24(sp),a0
    7ad0:	|  |  |  |      movea.l 60(a0),a0
    7ad4:	|  |  |  |      movea.l 4(a0),a1
    7ad8:	|  |  |  |      movea.l 24(sp),a0
    7adc:	|  |  |  |      move.l 72(a0),d0
    7ae0:	|  |  |  |      move.l d0,d1
    7ae2:	|  |  |  |      move.l d1,d0
    7ae4:	|  |  |  |      add.l d0,d0
    7ae6:	|  |  |  |      add.l d1,d0
    7ae8:	|  |  |  |      add.l d0,d0
    7aea:	|  |  |  |      add.l d0,d0
    7aec:	|  |  |  |      lea (0,a1,d0.l),a0
    7af0:	|  |  |  |      move.l 4(a0),d0
    7af4:	|  |  |  |      movea.l 24(sp),a0
    7af8:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    7afc:	|  |  |  \----> movea.l 20(sp),a0
    7b00:	|  |  |         movea.l 4(a0),a1
    7b04:	|  |  |         movea.l 24(sp),a0
    7b08:	|  |  |         move.l 72(a0),d0
    7b0c:	|  |  |         move.l d0,d1
    7b0e:	|  |  |         move.l d1,d0
    7b10:	|  |  |         add.l d0,d0
    7b12:	|  |  |         add.l d1,d0
    7b14:	|  |  |         add.l d0,d0
    7b16:	|  |  |         add.l d0,d0
    7b18:	|  |  |         lea (0,a1,d0.l),a0
    7b1c:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    7b20:	|  |  |         move.l 8(sp),d0
    7b24:	|  |  |         add.l d0,d0
    7b26:	|  |  |         subx.l d0,d0
    7b28:	|  |  |         neg.l d0
    7b2a:	|  |  |         move.b d0,d0
    7b2c:	|  |  |         move.b d0,d0
    7b2e:	|  |  |         andi.l #255,d0
    7b34:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    7b38:	|  |  |         move.l 8(sp),-(sp)
    7b3c:	|  |  |         jsr 6b0e <TF_abs>
    7b42:	|  |  |         addq.l #4,sp
    7b44:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    7b48:	|  |  |         movea.l 20(sp),a0
    7b4c:	|  |  |         movea.l (a0),a0
    7b4e:	|  |  |         move.l 8(a0),d0
    7b52:	|  |  |         cmp.l 12(sp),d0
    7b56:	|  |  |     /-- bgt.s 7b66 <drawPeople+0x272>
				fNum = 0;
    7b58:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    7b5c:	|  |  |     |   moveq #2,d0
    7b5e:	|  |  |     |   sub.l 16(sp),d0
    7b62:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    7b66:	|  |  |     \-> moveq #2,d0
    7b68:	|  |  |         cmp.l 16(sp),d0
    7b6c:	|  |  +-------- beq.s 7be8 <drawPeople+0x2f4>
				BOOL r = FALSE;
    7b6e:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    7b72:	|  |  |         move.l 16(sp),d0
    7b76:	|  |  |         movea.w d0,a0
    7b78:	|  |  |         movea.l 20(sp),a1
    7b7c:	|  |  |         movea.l (a1),a1
    7b7e:	|  |  |         movea.l 16(a1),a1
    7b82:	|  |  |         move.l 12(sp),d1
    7b86:	|  |  |         move.l d1,d0
    7b88:	|  |  |         lsl.l #3,d0
    7b8a:	|  |  |         sub.l d1,d0
    7b8c:	|  |  |         add.l d0,d0
    7b8e:	|  |  |         add.l d0,d0
    7b90:	|  |  |         add.l a1,d0
    7b92:	|  |  |         move.l a0,-(sp)
    7b94:	|  |  |         move.l 28(sp),-(sp)
    7b98:	|  |  |         move.l d0,-(sp)
    7b9a:	|  |  |         jsr 6a6a <scaleSprite>
    7ba0:	|  |  |         lea 12(sp),sp
    7ba4:	|  |  |         move.w d0,6(sp)
				if (r) {
    7ba8:	|  |  +-------- beq.s 7be8 <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    7baa:	|  |  |         movea.l 24(sp),a0
    7bae:	|  |  |         movea.l 102(a0),a0
    7bb2:	|  |  |         movea.l (a0),a0
    7bb4:	|  |  |         move.b (a0),d0
    7bb6:	|  |  +-------- beq.s 7be8 <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    7bb8:	|  |  |         move.l 191c0 <personRegion+0x1c>,d1
    7bbe:	|  |  |         movea.l 24(sp),a0
    7bc2:	|  |  |         move.l 102(a0),d0
    7bc6:	|  |  |         cmp.l d1,d0
    7bc8:	|  |  |     /-- beq.s 7bd0 <drawPeople+0x2dc>
    7bca:	|  |  |     |   clr.l 190b0 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    7bd0:	|  |  |     \-> movea.l 24(sp),a0
    7bd4:	|  |  |         move.l 102(a0),d0
    7bd8:	|  |  |         move.l d0,191c0 <personRegion+0x1c>
						overRegion = & personRegion;
    7bde:	|  |  |         move.l #102820,19244 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    7be8:	|  |  \-------> movea.l 24(sp),a0
    7bec:	|  |            move.l 76(a0),d0
    7bf0:	|  |            subq.l #1,d0
    7bf2:	|  |            movea.l 24(sp),a0
    7bf6:	|  |            move.l d0,76(a0)
    7bfa:	|  |            movea.l 24(sp),a0
    7bfe:	|  |            move.l 76(a0),d0
    7c02:	|  |     /----- bne.w 7e2a <drawPeople+0x536>
			thisPerson -> frameNum ++;
    7c06:	|  |     |      movea.l 24(sp),a0
    7c0a:	|  |     |      move.l 72(a0),d0
    7c0e:	|  |     |      addq.l #1,d0
    7c10:	|  |     |      movea.l 24(sp),a0
    7c14:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7c18:	|  |     |      movea.l 24(sp),a0
    7c1c:	|  |     |      move.l 72(a0),d0
    7c20:	|  |     |      movea.l 24(sp),a0
    7c24:	|  |     |      movea.l 60(a0),a0
    7c28:	|  |     |      move.l 8(a0),d1
    7c2c:	|  |     |      move.l d1,-(sp)
    7c2e:	|  |     |      move.l d0,-(sp)
    7c30:	|  |     |      jsr 14810 <__modsi3>
    7c36:	|  |     |      addq.l #8,sp
    7c38:	|  |     |      movea.l 24(sp),a0
    7c3c:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7c40:	|  |     |      movea.l 24(sp),a0
    7c44:	|  |     |      movea.l 60(a0),a0
    7c48:	|  |     |      movea.l 4(a0),a1
    7c4c:	|  |     |      movea.l 24(sp),a0
    7c50:	|  |     |      move.l 72(a0),d0
    7c54:	|  |     |      move.l d0,d1
    7c56:	|  |     |      move.l d1,d0
    7c58:	|  |     |      add.l d0,d0
    7c5a:	|  |     |      add.l d1,d0
    7c5c:	|  |     |      add.l d0,d0
    7c5e:	|  |     |      add.l d0,d0
    7c60:	|  |     |      lea (0,a1,d0.l),a0
    7c64:	|  |     |      move.l 4(a0),d0
    7c68:	|  |     |      movea.l 24(sp),a0
    7c6c:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    7c70:	|  |     |      movea.l 24(sp),a0
    7c74:	|  |     |      move.w 92(a0),d0
    7c78:	|  |     +----- beq.w 7e2a <drawPeople+0x536>
    7c7c:	|  |     |      tst.l 20(sp)
    7c80:	|  |     +----- beq.w 7e2a <drawPeople+0x536>
    7c84:	|  |     |      movea.l 20(sp),a0
    7c88:	|  |     |      move.l 4(a0),d0
    7c8c:	|  |     +----- beq.w 7e2a <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7c90:	|  |     |      movea.l 20(sp),a0
    7c94:	|  |     |      movea.l 4(a0),a1
    7c98:	|  |     |      movea.l 24(sp),a0
    7c9c:	|  |     |      move.l 72(a0),d0
    7ca0:	|  |     |      move.l d0,d1
    7ca2:	|  |     |      move.l d1,d0
    7ca4:	|  |     |      add.l d0,d0
    7ca6:	|  |     |      add.l d1,d0
    7ca8:	|  |     |      add.l d0,d0
    7caa:	|  |     |      add.l d0,d0
    7cac:	|  |     |      lea (0,a1,d0.l),a0
    7cb0:	|  |     |      move.l 8(a0),d0
    7cb4:	|  |     |  /-- ble.w 7d56 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    7cb8:	|  |     |  |   movea.l 20(sp),a0
    7cbc:	|  |     |  |   movea.l 4(a0),a1
    7cc0:	|  |     |  |   movea.l 24(sp),a0
    7cc4:	|  |     |  |   move.l 72(a0),d0
    7cc8:	|  |     |  |   move.l d0,d1
    7cca:	|  |     |  |   move.l d1,d0
    7ccc:	|  |     |  |   add.l d0,d0
    7cce:	|  |     |  |   add.l d1,d0
    7cd0:	|  |     |  |   add.l d0,d0
    7cd2:	|  |     |  |   add.l d0,d0
    7cd4:	|  |     |  |   lea (0,a1,d0.l),a0
    7cd8:	|  |     |  |   move.l 8(a0),d0
    7cdc:	|  |     |  |   clr.l -(sp)
    7cde:	|  |     |  |   move.l d0,-(sp)
    7ce0:	|  |     |  |   jsr a86a <startSound>
    7ce6:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    7ce8:	|  |     |  |   movea.l 24(sp),a0
    7cec:	|  |     |  |   move.l 72(a0),d0
    7cf0:	|  |     |  |   addq.l #1,d0
    7cf2:	|  |     |  |   movea.l 24(sp),a0
    7cf6:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7cfa:	|  |     |  |   movea.l 24(sp),a0
    7cfe:	|  |     |  |   move.l 72(a0),d0
    7d02:	|  |     |  |   movea.l 24(sp),a0
    7d06:	|  |     |  |   movea.l 60(a0),a0
    7d0a:	|  |     |  |   move.l 8(a0),d1
    7d0e:	|  |     |  |   move.l d1,-(sp)
    7d10:	|  |     |  |   move.l d0,-(sp)
    7d12:	|  |     |  |   jsr 14810 <__modsi3>
    7d18:	|  |     |  |   addq.l #8,sp
    7d1a:	|  |     |  |   movea.l 24(sp),a0
    7d1e:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7d22:	|  |     |  |   movea.l 24(sp),a0
    7d26:	|  |     |  |   movea.l 60(a0),a0
    7d2a:	|  |     |  |   movea.l 4(a0),a1
    7d2e:	|  |     |  |   movea.l 24(sp),a0
    7d32:	|  |     |  |   move.l 72(a0),d0
    7d36:	|  |     |  |   move.l d0,d1
    7d38:	|  |     |  |   move.l d1,d0
    7d3a:	|  |     |  |   add.l d0,d0
    7d3c:	|  |     |  |   add.l d1,d0
    7d3e:	|  |     |  |   add.l d0,d0
    7d40:	|  |     |  |   add.l d0,d0
    7d42:	|  |     |  |   lea (0,a1,d0.l),a0
    7d46:	|  |     |  |   move.l 4(a0),d0
    7d4a:	|  |     |  |   movea.l 24(sp),a0
    7d4e:	|  |     |  |   move.l d0,76(a0)
    7d52:	|  |     +--|-- bra.w 7e2a <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    7d56:	|  |     |  \-> movea.l 20(sp),a0
    7d5a:	|  |     |      movea.l 4(a0),a1
    7d5e:	|  |     |      movea.l 24(sp),a0
    7d62:	|  |     |      move.l 72(a0),d0
    7d66:	|  |     |      move.l d0,d1
    7d68:	|  |     |      move.l d1,d0
    7d6a:	|  |     |      add.l d0,d0
    7d6c:	|  |     |      add.l d1,d0
    7d6e:	|  |     |      add.l d0,d0
    7d70:	|  |     |      add.l d0,d0
    7d72:	|  |     |      lea (0,a1,d0.l),a0
    7d76:	|  |     |      move.l 8(a0),d0
    7d7a:	|  |     +----- beq.w 7e2a <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7d7e:	|  |     |      movea.l 190b8 <noStack>,a1
    7d84:	|  |     |      movea.l 20(sp),a0
    7d88:	|  |     |      move.l 4(a0),d2
    7d8c:	|  |     |      movea.l 24(sp),a0
    7d90:	|  |     |      move.l 72(a0),d0
    7d94:	|  |     |      move.l d0,d1
    7d96:	|  |     |      move.l d1,d0
    7d98:	|  |     |      add.l d0,d0
    7d9a:	|  |     |      add.l d1,d0
    7d9c:	|  |     |      add.l d0,d0
    7d9e:	|  |     |      add.l d0,d0
    7da0:	|  |     |      movea.l d2,a0
    7da2:	|  |     |      adda.l d0,a0
    7da4:	|  |     |      move.l 8(a0),d0
    7da8:	|  |     |      neg.l d0
    7daa:	|  |     |      pea 1 <_start+0x1>
    7dae:	|  |     |      move.l a1,-(sp)
    7db0:	|  |     |      clr.l -(sp)
    7db2:	|  |     |      clr.l -(sp)
    7db4:	|  |     |      move.l d0,-(sp)
    7db6:	|  |     |      jsr 45f2 <startNewFunctionNum>
    7dbc:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7dc0:	|  |     |      movea.l 24(sp),a0
    7dc4:	|  |     |      move.l 72(a0),d0
    7dc8:	|  |     |      addq.l #1,d0
    7dca:	|  |     |      movea.l 24(sp),a0
    7dce:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7dd2:	|  |     |      movea.l 24(sp),a0
    7dd6:	|  |     |      move.l 72(a0),d0
    7dda:	|  |     |      movea.l 24(sp),a0
    7dde:	|  |     |      movea.l 60(a0),a0
    7de2:	|  |     |      move.l 8(a0),d1
    7de6:	|  |     |      move.l d1,-(sp)
    7de8:	|  |     |      move.l d0,-(sp)
    7dea:	|  |     |      jsr 14810 <__modsi3>
    7df0:	|  |     |      addq.l #8,sp
    7df2:	|  |     |      movea.l 24(sp),a0
    7df6:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7dfa:	|  |     |      movea.l 24(sp),a0
    7dfe:	|  |     |      movea.l 60(a0),a0
    7e02:	|  |     |      movea.l 4(a0),a1
    7e06:	|  |     |      movea.l 24(sp),a0
    7e0a:	|  |     |      move.l 72(a0),d0
    7e0e:	|  |     |      move.l d0,d1
    7e10:	|  |     |      move.l d1,d0
    7e12:	|  |     |      add.l d0,d0
    7e14:	|  |     |      add.l d1,d0
    7e16:	|  |     |      add.l d0,d0
    7e18:	|  |     |      add.l d0,d0
    7e1a:	|  |     |      lea (0,a1,d0.l),a0
    7e1e:	|  |     |      move.l 4(a0),d0
    7e22:	|  |     |      movea.l 24(sp),a0
    7e26:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    7e2a:	|  |     \----> movea.l 24(sp),a0
    7e2e:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    7e34:	|  \----------> tst.l 24(sp)
    7e38:	\-------------- bne.w 7916 <drawPeople+0x22>
	}
}
    7e3c:	                nop
    7e3e:	                nop
    7e40:	                move.l (sp)+,d2
    7e42:	                lea 24(sp),sp
    7e46:	                rts

00007e48 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    7e48:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    7e4a:	          move.l 191a0 <allPeople>,(sp)
	while (thisPerson) {
    7e50:	      /-- bra.s 7e68 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    7e52:	/-----|-> movea.l (sp),a0
    7e54:	|     |   movea.l 102(a0),a0
    7e58:	|     |   move.l 4(a0),d0
    7e5c:	|     |   cmp.l 8(sp),d0
    7e60:	|  /--|-- beq.s 7e6e <findPerson+0x26>
		thisPerson = thisPerson -> next;
    7e62:	|  |  |   movea.l (sp),a0
    7e64:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    7e68:	|  |  \-> tst.l (sp)
    7e6a:	\--|----- bne.s 7e52 <findPerson+0xa>
    7e6c:	   |  /-- bra.s 7e70 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    7e6e:	   \--|-> nop
	}
	return thisPerson;
    7e70:	      \-> move.l (sp),d0
}
    7e72:	          addq.l #4,sp
    7e74:	          rts

00007e76 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    7e76:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    7e78:	       move.l 12(sp),-(sp)
    7e7c:	       jsr 7e48 <findPerson>
    7e82:	       addq.l #4,sp
    7e84:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    7e86:	   /-- bne.s 7e8c <floatCharacter+0x16>
    7e88:	   |   clr.w d0
    7e8a:	/--|-- bra.s 7e96 <floatCharacter+0x20>
	moveMe -> floaty = f;
    7e8c:	|  \-> movea.l (sp),a0
    7e8e:	|      move.l 8(sp),12(a0)
	return TRUE;
    7e94:	|      moveq #1,d0
}
    7e96:	\----> addq.l #4,sp
    7e98:	       rts

00007e9a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7e9a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    7e9c:	          tst.l 8(sp)
    7ea0:	      /-- bne.s 7eae <forceWalkingPerson+0x14>
    7ea2:	      |   tst.l 12(sp)
    7ea6:	      +-- bne.s 7eae <forceWalkingPerson+0x14>
    7ea8:	      |   clr.w d0
    7eaa:	/-----|-- bra.w 7f40 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    7eae:	|     \-> move.l 16(sp),-(sp)
    7eb2:	|         jsr 7e48 <findPerson>
    7eb8:	|         addq.l #4,sp
    7eba:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    7ebc:	|     /-- bne.s 7ec2 <forceWalkingPerson+0x28>
    7ebe:	|     |   clr.w d0
    7ec0:	+-----|-- bra.s 7f40 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7ec2:	|     \-> movea.l (sp),a0
    7ec4:	|         move.l 56(a0),d0
    7ec8:	|     /-- beq.s 7eda <forceWalkingPerson+0x40>
    7eca:	|     |   movea.l (sp),a0
    7ecc:	|     |   move.l 56(a0),d0
    7ed0:	|     |   move.l d0,-(sp)
    7ed2:	|     |   jsr 24c8 <abortFunction>
    7ed8:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    7eda:	|     \-> movea.l (sp),a0
    7edc:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    7ee2:	|         movea.l (sp),a0
    7ee4:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    7ee8:	|         movea.l (sp),a0
    7eea:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    7ef0:	|         movea.l (sp),a0
    7ef2:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    7ef8:	|         movea.l (sp),a0
    7efa:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    7f00:	|         movea.l (sp),a0
    7f02:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7f06:	|         movea.l (sp),a0
    7f08:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    7f0c:	|         move.l (sp),-(sp)
    7f0e:	|         jsr 723a <doBorderStuff>
    7f14:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    7f16:	|         pea 1 <_start+0x1>
    7f1a:	|         move.l 4(sp),-(sp)
    7f1e:	|         jsr 96c6 <walkMe>
    7f24:	|         addq.l #8,sp
    7f26:	|         tst.w d0
    7f28:	|     /-- bne.s 7f32 <forceWalkingPerson+0x98>
    7f2a:	|     |   movea.l (sp),a0
    7f2c:	|     |   move.w 54(a0),d0
    7f30:	|  /--|-- beq.s 7f3e <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    7f32:	|  |  \-> movea.l (sp),a0
    7f34:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    7f3a:	|  |      moveq #1,d0
    7f3c:	+--|----- bra.s 7f40 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    7f3e:	|  \----> clr.w d0
    }
}
    7f40:	\-------> addq.l #4,sp
    7f42:	          rts

00007f44 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    7f44:	                lea -56(sp),sp
    7f48:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    7f4a:	                move.l #320,56(sp)
    7f52:	                move.l #200,52(sp)
    7f5a:	                moveq #-1,d0
    7f5c:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    7f60:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7f68:	                clr.l 44(sp)
    7f6c:	   /----------- bra.w 8144 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    7f70:	/--|----------> movea.l 19248 <currentFloor>,a0
    7f76:	|  |            move.l 12(a0),d1
    7f7a:	|  |            move.l 44(sp),d0
    7f7e:	|  |            lsl.l #3,d0
    7f80:	|  |            movea.l d1,a0
    7f82:	|  |            adda.l d0,a0
    7f84:	|  |            move.l (a0),d0
    7f86:	|  |            move.l d0,d1
    7f88:	|  |            subq.l #1,d1
    7f8a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7f8e:	|  |            clr.l 40(sp)
    7f92:	|  |     /----- bra.w 8122 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    7f96:	|  |  /--|----> movea.l 19248 <currentFloor>,a0
    7f9c:	|  |  |  |      move.l 4(a0),d1
    7fa0:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    7fa6:	|  |  |  |      movea.l 12(a0),a0
    7faa:	|  |  |  |      move.l 44(sp),d0
    7fae:	|  |  |  |      lsl.l #3,d0
    7fb0:	|  |  |  |      adda.l d0,a0
    7fb2:	|  |  |  |      movea.l 4(a0),a0
    7fb6:	|  |  |  |      move.l 40(sp),d0
    7fba:	|  |  |  |      add.l d0,d0
    7fbc:	|  |  |  |      add.l d0,d0
    7fbe:	|  |  |  |      adda.l d0,a0
    7fc0:	|  |  |  |      move.l (a0),d0
    7fc2:	|  |  |  |      lsl.l #3,d0
    7fc4:	|  |  |  |      movea.l d1,a0
    7fc6:	|  |  |  |      adda.l d0,a0
    7fc8:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    7fcc:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    7fd2:	|  |  |  |      move.l 4(a0),d1
    7fd6:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    7fdc:	|  |  |  |      movea.l 12(a0),a0
    7fe0:	|  |  |  |      move.l 44(sp),d0
    7fe4:	|  |  |  |      lsl.l #3,d0
    7fe6:	|  |  |  |      adda.l d0,a0
    7fe8:	|  |  |  |      movea.l 4(a0),a0
    7fec:	|  |  |  |      move.l 40(sp),d0
    7ff0:	|  |  |  |      add.l d0,d0
    7ff2:	|  |  |  |      add.l d0,d0
    7ff4:	|  |  |  |      adda.l d0,a0
    7ff6:	|  |  |  |      move.l (a0),d0
    7ff8:	|  |  |  |      lsl.l #3,d0
    7ffa:	|  |  |  |      movea.l d1,a0
    7ffc:	|  |  |  |      adda.l d0,a0
    7ffe:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    8004:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    800a:	|  |  |  |      move.l 4(a0),d1
    800e:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    8014:	|  |  |  |      movea.l 12(a0),a0
    8018:	|  |  |  |      move.l 44(sp),d0
    801c:	|  |  |  |      lsl.l #3,d0
    801e:	|  |  |  |      adda.l d0,a0
    8020:	|  |  |  |      movea.l 4(a0),a0
    8024:	|  |  |  |      move.l 36(sp),d0
    8028:	|  |  |  |      add.l d0,d0
    802a:	|  |  |  |      add.l d0,d0
    802c:	|  |  |  |      adda.l d0,a0
    802e:	|  |  |  |      move.l (a0),d0
    8030:	|  |  |  |      lsl.l #3,d0
    8032:	|  |  |  |      movea.l d1,a0
    8034:	|  |  |  |      adda.l d0,a0
    8036:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    803a:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    8040:	|  |  |  |      move.l 4(a0),d1
    8044:	|  |  |  |      movea.l 19248 <currentFloor>,a0
    804a:	|  |  |  |      movea.l 12(a0),a0
    804e:	|  |  |  |      move.l 44(sp),d0
    8052:	|  |  |  |      lsl.l #3,d0
    8054:	|  |  |  |      adda.l d0,a0
    8056:	|  |  |  |      movea.l 4(a0),a0
    805a:	|  |  |  |      move.l 36(sp),d0
    805e:	|  |  |  |      add.l d0,d0
    8060:	|  |  |  |      add.l d0,d0
    8062:	|  |  |  |      adda.l d0,a0
    8064:	|  |  |  |      move.l (a0),d0
    8066:	|  |  |  |      lsl.l #3,d0
    8068:	|  |  |  |      movea.l d1,a0
    806a:	|  |  |  |      adda.l d0,a0
    806c:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    8072:	|  |  |  |      movea.l 68(sp),a0
    8076:	|  |  |  |      move.l (a0),d1
    8078:	|  |  |  |      movea.l 64(sp),a0
    807c:	|  |  |  |      move.l (a0),d0
    807e:	|  |  |  |      move.l d1,-(sp)
    8080:	|  |  |  |      move.l d0,-(sp)
    8082:	|  |  |  |      move.l 24(sp),-(sp)
    8086:	|  |  |  |      move.l 32(sp),-(sp)
    808a:	|  |  |  |      move.l 40(sp),-(sp)
    808e:	|  |  |  |      move.l 48(sp),-(sp)
    8092:	|  |  |  |      lea 28(sp),a0
    8096:	|  |  |  |      move.l a0,-(sp)
    8098:	|  |  |  |      lea 36(sp),a0
    809c:	|  |  |  |      move.l a0,-(sp)
    809e:	|  |  |  |      jsr 12c06 <closestPointOnLine>
    80a4:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    80a8:	|  |  |  |      movea.l 64(sp),a0
    80ac:	|  |  |  |      move.l (a0),d0
    80ae:	|  |  |  |      move.l 8(sp),d1
    80b2:	|  |  |  |      move.l d0,d2
    80b4:	|  |  |  |      sub.l d1,d2
    80b6:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    80ba:	|  |  |  |      movea.l 68(sp),a0
    80be:	|  |  |  |      move.l (a0),d0
    80c0:	|  |  |  |      move.l 4(sp),d1
    80c4:	|  |  |  |      move.l d0,d2
    80c6:	|  |  |  |      sub.l d1,d2
    80c8:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    80cc:	|  |  |  |      move.l 28(sp),-(sp)
    80d0:	|  |  |  |      move.l 32(sp),-(sp)
    80d4:	|  |  |  |      jsr 14764 <__mulsi3>
    80da:	|  |  |  |      addq.l #8,sp
    80dc:	|  |  |  |      move.l d0,d2
    80de:	|  |  |  |      move.l 24(sp),-(sp)
    80e2:	|  |  |  |      move.l 28(sp),-(sp)
    80e6:	|  |  |  |      jsr 14764 <__mulsi3>
    80ec:	|  |  |  |      addq.l #8,sp
    80ee:	|  |  |  |      move.l d2,d1
    80f0:	|  |  |  |      add.l d0,d1
    80f2:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    80f6:	|  |  |  |      move.l 12(sp),d2
    80fa:	|  |  |  |      cmp.l 32(sp),d2
    80fe:	|  |  |  |  /-- bge.s 8118 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    8100:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    8106:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    810c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    8112:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    8118:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    811e:	|  |  |  |      addq.l #1,40(sp)
    8122:	|  |  |  \----> movea.l 19248 <currentFloor>,a0
    8128:	|  |  |         move.l 12(a0),d1
    812c:	|  |  |         move.l 44(sp),d0
    8130:	|  |  |         lsl.l #3,d0
    8132:	|  |  |         movea.l d1,a0
    8134:	|  |  |         adda.l d0,a0
    8136:	|  |  |         move.l (a0),d0
    8138:	|  |  |         cmp.l 40(sp),d0
    813c:	|  |  \-------- bgt.w 7f96 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    8140:	|  |            addq.l #1,44(sp)
    8144:	|  \----------> movea.l 19248 <currentFloor>,a0
    814a:	|               move.l 8(a0),d0
    814e:	|               cmp.l 44(sp),d0
    8152:	\-------------- bgt.w 7f70 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    8156:	                moveq #-1,d0
    8158:	                cmp.l 48(sp),d0
    815c:	            /-- bne.s 8162 <handleClosestPoint+0x21e>
    815e:	            |   clr.w d0
    8160:	         /--|-- bra.s 817c <handleClosestPoint+0x238>
	*setX = gotX;
    8162:	         |  \-> movea.l 64(sp),a0
    8166:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    816a:	         |      movea.l 68(sp),a0
    816e:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    8172:	         |      movea.l 72(sp),a0
    8176:	         |      move.l 48(sp),(a0)

	return TRUE;
    817a:	         |      moveq #1,d0
}
    817c:	         \----> move.l (sp)+,d2
    817e:	                lea 56(sp),sp
    8182:	                rts

00008184 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    8184:	clr.l 191b4 <personRegion+0x10>
	personRegion.sY = 0;
    818a:	clr.l 191b8 <personRegion+0x14>
	personRegion.di = -1;
    8190:	moveq #-1,d0
    8192:	move.l d0,191bc <personRegion+0x18>
	allScreenRegions = NULL;
    8198:	clr.l 19240 <allScreenRegions>

	return TRUE;
    819e:	moveq #1,d0
}
    81a0:	rts

000081a2 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    81a2:	          subq.l #4,sp
    81a4:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    81a6:	          tst.l 12(sp)
    81aa:	      /-- bne.s 81b2 <jumpPerson+0x10>
    81ac:	      |   tst.l 16(sp)
    81b0:	/-----|-- beq.s 8226 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    81b2:	|     \-> move.l 20(sp),-(sp)
    81b6:	|         jsr 7e48 <findPerson>
    81bc:	|         addq.l #4,sp
    81be:	|         move.l d0,4(sp)
    if (!moveMe) return;
    81c2:	|  /----- beq.s 822a <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    81c4:	|  |      movea.l 4(sp),a0
    81c8:	|  |      move.l 56(a0),d0
    81cc:	|  |  /-- beq.s 81e0 <jumpPerson+0x3e>
    81ce:	|  |  |   movea.l 4(sp),a0
    81d2:	|  |  |   move.l 56(a0),d0
    81d6:	|  |  |   move.l d0,-(sp)
    81d8:	|  |  |   jsr 24c8 <abortFunction>
    81de:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    81e0:	|  |  \-> movea.l 4(sp),a0
    81e4:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    81e8:	|  |      movea.l 4(sp),a0
    81ec:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    81f0:	|  |      movea.l 4(sp),a0
    81f4:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    81f8:	|  |      move.l 16(sp),-(sp)
    81fc:	|  |      jsr 141e2 <__floatsisf>
    8202:	|  |      addq.l #4,sp
    8204:	|  |      move.l d0,d2
    8206:	|  |      move.l 12(sp),-(sp)
    820a:	|  |      jsr 141e2 <__floatsisf>
    8210:	|  |      addq.l #4,sp
    8212:	|  |      move.l d2,-(sp)
    8214:	|  |      move.l d0,-(sp)
    8216:	|  |      move.l 12(sp),-(sp)
    821a:	|  |      jsr 8590 <moveAndScale>
    8220:	|  |      lea 12(sp),sp
    8224:	|  |  /-- bra.s 822c <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    8226:	\--|--|-> nop
    8228:	   |  +-- bra.s 822c <jumpPerson+0x8a>
    if (!moveMe) return;
    822a:	   \--|-> nop
}
    822c:	      \-> move.l (sp)+,d2
    822e:	          addq.l #4,sp
    8230:	          rts

00008232 <killAllPeople>:


void killAllPeople () {
    8232:	          subq.l #8,sp
    8234:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    8236:	   /----- bra.s 82a2 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    8238:	/--|----> movea.l 191a0 <allPeople>,a0
    823e:	|  |      move.l 56(a0),d0
    8242:	|  |  /-- beq.s 8258 <killAllPeople+0x26>
    8244:	|  |  |   movea.l 191a0 <allPeople>,a0
    824a:	|  |  |   move.l 56(a0),d0
    824e:	|  |  |   move.l d0,-(sp)
    8250:	|  |  |   jsr 24c8 <abortFunction>
    8256:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    8258:	|  |  \-> movea.l 191a0 <allPeople>,a0
    825e:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    8262:	|  |      move.l 191a0 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    826a:	|  |      movea.l 191a0 <allPeople>,a0
    8270:	|  |      move.l 24(a0),d0
    8274:	|  |      move.l d0,191a0 <allPeople>
		removeObjectType (killPeople -> thisType);
    827a:	|  |      movea.l 8(sp),a0
    827e:	|  |      move.l 102(a0),d0
    8282:	|  |      move.l d0,-(sp)
    8284:	|  |      jsr af3c <removeObjectType>
    828a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    828c:	|  |      move.l 8(sp),4(sp)
    8292:	|  |      move.l 190e8 <SysBase>,d0
    8298:	|  |      movea.l d0,a6
    829a:	|  |      movea.l 4(sp),a1
    829e:	|  |      jsr -690(a6)
	while (allPeople) {
    82a2:	|  \----> move.l 191a0 <allPeople>,d0
    82a8:	\-------- bne.s 8238 <killAllPeople+0x6>
	}
}
    82aa:	          nop
    82ac:	          nop
    82ae:	          movea.l (sp)+,a6
    82b0:	          addq.l #8,sp
    82b2:	          rts

000082b4 <killMostPeople>:

void killMostPeople() {
    82b4:	          lea -12(sp),sp
    82b8:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    82ba:	          move.l #102816,12(sp)

    while (*lookyHere) {
    82c2:	   /----- bra.w 8348 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    82c6:	/--|----> movea.l 12(sp),a0
    82ca:	|  |      movea.l (a0),a0
    82cc:	|  |      move.l 106(a0),d0
    82d0:	|  |      moveq #32,d1
    82d2:	|  |      and.l d1,d0
    82d4:	|  |  /-- beq.s 82e6 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    82d6:	|  |  |   movea.l 12(sp),a0
    82da:	|  |  |   move.l (a0),d0
    82dc:	|  |  |   moveq #24,d1
    82de:	|  |  |   add.l d0,d1
    82e0:	|  |  |   move.l d1,12(sp)
    82e4:	|  +--|-- bra.s 8348 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    82e6:	|  |  \-> movea.l 12(sp),a0
    82ea:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    82ee:	|  |      movea.l 8(sp),a0
    82f2:	|  |      move.l 24(a0),d0
    82f6:	|  |      movea.l 12(sp),a0
    82fa:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    82fc:	|  |      movea.l 8(sp),a0
    8300:	|  |      move.l 56(a0),d0
    8304:	|  |  /-- beq.s 8318 <killMostPeople+0x64>
    8306:	|  |  |   movea.l 8(sp),a0
    830a:	|  |  |   move.l 56(a0),d0
    830e:	|  |  |   move.l d0,-(sp)
    8310:	|  |  |   jsr 24c8 <abortFunction>
    8316:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    8318:	|  |  \-> movea.l 8(sp),a0
    831c:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    8320:	|  |      movea.l 8(sp),a0
    8324:	|  |      move.l 102(a0),d0
    8328:	|  |      move.l d0,-(sp)
    832a:	|  |      jsr af3c <removeObjectType>
    8330:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    8332:	|  |      move.l 8(sp),4(sp)
    8338:	|  |      move.l 190e8 <SysBase>,d0
    833e:	|  |      movea.l d0,a6
    8340:	|  |      movea.l 4(sp),a1
    8344:	|  |      jsr -690(a6)
    while (*lookyHere) {
    8348:	|  \----> movea.l 12(sp),a0
    834c:	|         move.l (a0),d0
    834e:	\-------- bne.w 82c6 <killMostPeople+0x12>
        }
    }
}
    8352:	          nop
    8354:	          nop
    8356:	          movea.l (sp)+,a6
    8358:	          lea 12(sp),sp
    835c:	          rts

0000835e <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    835e:	clr.l -(sp)
    8360:	move.l sp,d0
    8362:	addq.l #8,d0
    8364:	move.l d0,-(sp)
    8366:	jsr 5c4e <setFrames>
    836c:	addq.l #8,sp
}
    836e:	nop
    8370:	rts

00008372 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    8372:	          lea -12(sp),sp
    8376:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    8378:	          tst.l 20(sp)
    837c:	      /-- bne.s 838a <makeWalkingPerson+0x18>
    837e:	      |   tst.l 24(sp)
    8382:	      +-- bne.s 838a <makeWalkingPerson+0x18>
    8384:	      |   clr.w d0
    8386:	/-----|-- bra.w 8522 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    838a:	|     \-> movea.l 19248 <currentFloor>,a0
    8390:	|         move.l 8(a0),d0
    8394:	|     /-- bne.s 839c <makeWalkingPerson+0x2a>
    8396:	|     |   clr.w d0
    8398:	+-----|-- bra.w 8522 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    839c:	|     \-> move.l 28(sp),-(sp)
    83a0:	|         jsr 7e48 <findPerson>
    83a6:	|         addq.l #4,sp
    83a8:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    83ac:	|     /-- bne.s 83b4 <makeWalkingPerson+0x42>
    83ae:	|     |   clr.w d0
    83b0:	+-----|-- bra.w 8522 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    83b4:	|     \-> movea.l 12(sp),a0
    83b8:	|         move.l 56(a0),d0
    83bc:	|     /-- beq.s 83d0 <makeWalkingPerson+0x5e>
    83be:	|     |   movea.l 12(sp),a0
    83c2:	|     |   move.l 56(a0),d0
    83c6:	|     |   move.l d0,-(sp)
    83c8:	|     |   jsr 24c8 <abortFunction>
    83ce:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    83d0:	|     \-> movea.l 12(sp),a0
    83d4:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    83d8:	|         movea.l 12(sp),a0
    83dc:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    83e2:	|         movea.l 12(sp),a0
    83e6:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    83ec:	|         movea.l 12(sp),a0
    83f0:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    83f6:	|         movea.l 12(sp),a0
    83fa:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    8400:	|         move.l 24(sp),-(sp)
    8404:	|         move.l 24(sp),-(sp)
    8408:	|         jsr 13108 <inFloor>
    840e:	|         addq.l #8,sp
    8410:	|         movea.l 12(sp),a0
    8414:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    8418:	|         movea.l 12(sp),a0
    841c:	|         move.l 48(a0),d0
    8420:	|         moveq #-1,d1
    8422:	|         cmp.l d0,d1
    8424:	|     /-- bne.s 8454 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    8426:	|     |   movea.w #48,a0
    842a:	|     |   adda.l 12(sp),a0
    842e:	|     |   moveq #32,d1
    8430:	|     |   add.l 12(sp),d1
    8434:	|     |   moveq #28,d0
    8436:	|     |   add.l 12(sp),d0
    843a:	|     |   move.l a0,-(sp)
    843c:	|     |   move.l d1,-(sp)
    843e:	|     |   move.l d0,-(sp)
    8440:	|     |   jsr 7f44 <handleClosestPoint>
    8446:	|     |   lea 12(sp),sp
    844a:	|     |   tst.w d0
    844c:	|     +-- bne.s 8454 <makeWalkingPerson+0xe2>
    844e:	|     |   clr.w d0
    8450:	+-----|-- bra.w 8522 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    8454:	|     \-> movea.l 12(sp),a0
    8458:	|         move.l 4(a0),d0
    845c:	|         move.l d0,-(sp)
    845e:	|         jsr 1417a <__fixsfsi>
    8464:	|         addq.l #4,sp
    8466:	|         move.l d0,d2
    8468:	|         movea.l 12(sp),a0
    846c:	|         move.l (a0),d0
    846e:	|         move.l d0,-(sp)
    8470:	|         jsr 1417a <__fixsfsi>
    8476:	|         addq.l #4,sp
    8478:	|         move.l d2,-(sp)
    847a:	|         move.l d0,-(sp)
    847c:	|         jsr 13108 <inFloor>
    8482:	|         addq.l #8,sp
    8484:	|         movea.l 12(sp),a0
    8488:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    848c:	|         movea.l 12(sp),a0
    8490:	|         move.l 44(a0),d0
    8494:	|         moveq #-1,d1
    8496:	|         cmp.l d0,d1
    8498:	|     /-- bne.s 84ea <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    849a:	|     |   movea.l 12(sp),a0
    849e:	|     |   move.l (a0),d0
    84a0:	|     |   move.l d0,-(sp)
    84a2:	|     |   jsr 1417a <__fixsfsi>
    84a8:	|     |   addq.l #4,sp
    84aa:	|     |   move.l d0,8(sp)
    84ae:	|     |   movea.l 12(sp),a0
    84b2:	|     |   move.l 4(a0),d0
    84b6:	|     |   move.l d0,-(sp)
    84b8:	|     |   jsr 1417a <__fixsfsi>
    84be:	|     |   addq.l #4,sp
    84c0:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    84c4:	|     |   moveq #44,d0
    84c6:	|     |   add.l 12(sp),d0
    84ca:	|     |   move.l d0,-(sp)
    84cc:	|     |   lea 8(sp),a0
    84d0:	|     |   move.l a0,-(sp)
    84d2:	|     |   moveq #16,d0
    84d4:	|     |   add.l sp,d0
    84d6:	|     |   move.l d0,-(sp)
    84d8:	|     |   jsr 7f44 <handleClosestPoint>
    84de:	|     |   lea 12(sp),sp
    84e2:	|     |   tst.w d0
    84e4:	|     +-- bne.s 84ea <makeWalkingPerson+0x178>
    84e6:	|     |   clr.w d0
    84e8:	+-----|-- bra.s 8522 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    84ea:	|     \-> move.l 12(sp),-(sp)
    84ee:	|         jsr 723a <doBorderStuff>
    84f4:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    84f6:	|         clr.l -(sp)
    84f8:	|         move.l 16(sp),-(sp)
    84fc:	|         jsr 96c6 <walkMe>
    8502:	|         addq.l #8,sp
    8504:	|         tst.w d0
    8506:	|     /-- bne.s 8512 <makeWalkingPerson+0x1a0>
    8508:	|     |   movea.l 12(sp),a0
    850c:	|     |   move.w 54(a0),d0
    8510:	|  /--|-- beq.s 8520 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    8512:	|  |  \-> movea.l 12(sp),a0
    8516:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    851c:	|  |      moveq #1,d0
    851e:	+--|----- bra.s 8522 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    8520:	|  \----> clr.w d0
	}
}
    8522:	\-------> move.l (sp)+,d2
    8524:	          lea 12(sp),sp
    8528:	          rts

0000852a <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    852a:	       lea -16(sp),sp
    852e:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    8530:	       moveq #12,d0
    8532:	       move.l d0,16(sp)
    8536:	       clr.l 12(sp)
    853a:	       move.l 190e8 <SysBase>,d0
    8540:	       movea.l d0,a6
    8542:	       move.l 16(sp),d0
    8546:	       move.l 12(sp),d1
    854a:	       jsr -684(a6)
    854e:	       move.l d0,8(sp)
    8552:	       move.l 8(sp),d0
    8556:	       move.l d0,4(sp)
    if(newAnim == 0) {
    855a:	   /-- bne.s 856e <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    855c:	   |   pea 15a07 <custom.c.177df80b+0xd2e>
    8562:	   |   jsr 13da6 <KPrintF>
    8568:	   |   addq.l #4,sp
        return NULL;    
    856a:	   |   moveq #0,d0
    856c:	/--|-- bra.s 8588 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    856e:	|  \-> movea.l 4(sp),a0
    8572:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    8574:	|      movea.l 4(sp),a0
    8578:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    857c:	|      movea.l 4(sp),a0
    8580:	|      clr.l 4(a0)
	return newAnim;
    8584:	|      move.l 4(sp),d0
}
    8588:	\----> movea.l (sp)+,a6
    858a:	       lea 16(sp),sp
    858e:	       rts

00008590 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    8590:	    move.l d2,-(sp)
	me->x = x;
    8592:	    movea.l 8(sp),a0
    8596:	    move.l 12(sp),(a0)
	me->y = y;
    859a:	    movea.l 8(sp),a0
    859e:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    85a4:	    movea.l 8(sp),a0
    85a8:	    move.l 106(a0),d0
    85ac:	    moveq #2,d1
    85ae:	    and.l d1,d0
    85b0:	/-- bne.s 8608 <moveAndScale+0x78>
    85b2:	|   move.w 18a96 <scaleDivide>,d0
    85b8:	+-- beq.s 8608 <moveAndScale+0x78>
    85ba:	|   movea.l 8(sp),a0
    85be:	|   move.l 4(a0),d2
    85c2:	|   move.w 18a94 <scaleHorizon>,d0
    85c8:	|   movea.w d0,a0
    85ca:	|   move.l a0,-(sp)
    85cc:	|   jsr 141e2 <__floatsisf>
    85d2:	|   addq.l #4,sp
    85d4:	|   move.l d0,-(sp)
    85d6:	|   move.l d2,-(sp)
    85d8:	|   jsr 144d6 <__subsf3>
    85de:	|   addq.l #8,sp
    85e0:	|   move.l d0,d2
    85e2:	|   move.w 18a96 <scaleDivide>,d0
    85e8:	|   movea.w d0,a0
    85ea:	|   move.l a0,-(sp)
    85ec:	|   jsr 141e2 <__floatsisf>
    85f2:	|   addq.l #4,sp
    85f4:	|   move.l d0,-(sp)
    85f6:	|   move.l d2,-(sp)
    85f8:	|   jsr 1408e <__divsf3>
    85fe:	|   addq.l #8,sp
    8600:	|   movea.l 8(sp),a0
    8604:	|   move.l d0,20(a0)
}
    8608:	\-> nop
    860a:	    move.l (sp)+,d2
    860c:	    rts

0000860e <removeOneCharacter>:

void removeOneCharacter (int i) {
    860e:	          lea -12(sp),sp
    8612:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    8614:	          move.l 20(sp),-(sp)
    8618:	          jsr 7e48 <findPerson>
    861e:	          addq.l #4,sp
    8620:	          move.l d0,8(sp)

    if (p) {
    8624:	/-------- beq.w 86d0 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    8628:	|         move.l 19244 <overRegion>,d0
    862e:	|         cmpi.l #102820,d0
    8634:	|     /-- bne.s 8652 <removeOneCharacter+0x44>
    8636:	|     |   movea.l 19244 <overRegion>,a0
    863c:	|     |   move.l 28(a0),d1
    8640:	|     |   movea.l 8(sp),a0
    8644:	|     |   move.l 102(a0),d0
    8648:	|     |   cmp.l d1,d0
    864a:	|     +-- bne.s 8652 <removeOneCharacter+0x44>
            overRegion = NULL;
    864c:	|     |   clr.l 19244 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    8652:	|     \-> movea.l 8(sp),a0
    8656:	|         move.l 56(a0),d0
    865a:	|     /-- beq.s 866e <removeOneCharacter+0x60>
    865c:	|     |   movea.l 8(sp),a0
    8660:	|     |   move.l 56(a0),d0
    8664:	|     |   move.l d0,-(sp)
    8666:	|     |   jsr 24c8 <abortFunction>
    866c:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    866e:	|     \-> movea.l 8(sp),a0
    8672:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    8676:	|         move.l #102816,12(sp)
    867e:	|     /-- bra.s 868e <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    8680:	|  /--|-> movea.l 12(sp),a0
    8684:	|  |  |   move.l (a0),d0
    8686:	|  |  |   moveq #24,d1
    8688:	|  |  |   add.l d0,d1
    868a:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    868e:	|  |  \-> movea.l 12(sp),a0
    8692:	|  |      move.l (a0),d0
    8694:	|  |      cmp.l 8(sp),d0
    8698:	|  \----- bne.s 8680 <removeOneCharacter+0x72>

        *killPeople = p->next;
    869a:	|         movea.l 8(sp),a0
    869e:	|         move.l 24(a0),d0
    86a2:	|         movea.l 12(sp),a0
    86a6:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    86a8:	|         movea.l 8(sp),a0
    86ac:	|         move.l 102(a0),d0
    86b0:	|         move.l d0,-(sp)
    86b2:	|         jsr af3c <removeObjectType>
    86b8:	|         addq.l #4,sp
        FreeVec(p);
    86ba:	|         move.l 8(sp),4(sp)
    86c0:	|         move.l 190e8 <SysBase>,d0
    86c6:	|         movea.l d0,a6
    86c8:	|         movea.l 4(sp),a1
    86cc:	|         jsr -690(a6)
    }
}
    86d0:	\-------> nop
    86d2:	          movea.l (sp)+,a6
    86d4:	          lea 12(sp),sp
    86d8:	          rts

000086da <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    86da:	       subq.l #8,sp
    86dc:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    86de:	       movea.l 16(sp),a0
    86e2:	       movea.l 68(a0),a0
    86e6:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    86ec:	       movea.l 16(sp),a0
    86f0:	       move.l 80(a0),d2
    86f4:	       move.l 4(sp),-(sp)
    86f8:	       pea b4 <_start+0xb4>
    86fc:	       jsr 147e2 <__divsi3>
    8702:	       addq.l #8,sp
    8704:	       add.l d2,d0
    8706:	       move.l d0,d1
    8708:	       addi.l #180,d1
    870e:	       movea.l 16(sp),a0
    8712:	       move.l 88(a0),d0
    8716:	       move.l d1,d2
    8718:	       add.l d0,d2
    871a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    871e:	   /-- bra.s 8728 <rethinkAngle+0x4e>
    8720:	/--|-> addi.l #-360,8(sp)
    8728:	|  \-> cmpi.l #359,8(sp)
    8730:	\----- bgt.s 8720 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    8732:	       move.l 4(sp),-(sp)
    8736:	       move.l 12(sp),-(sp)
    873a:	       jsr 14764 <__mulsi3>
    8740:	       addq.l #8,sp
    8742:	       pea 168 <decodeFilename+0x50>
    8746:	       move.l d0,-(sp)
    8748:	       jsr 147e2 <__divsi3>
    874e:	       addq.l #8,sp
    8750:	       movea.l 16(sp),a0
    8754:	       move.l d0,94(a0)
}
    8758:	       nop
    875a:	       move.l (sp)+,d2
    875c:	       addq.l #8,sp
    875e:	       rts

00008760 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    8760:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    8762:	          movea.l 8(sp),a0
    8766:	          move.l 8(a0),d0
    876a:	          move.l 12(sp),-(sp)
    876e:	          move.l d0,-(sp)
    8770:	          jsr 8d0 <put2bytes>
    8776:	          addq.l #8,sp
	if (p -> numFrames) {
    8778:	          movea.l 8(sp),a0
    877c:	          move.l 8(a0),d0
    8780:	/-------- beq.w 8824 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    8784:	|         movea.l 8(sp),a0
    8788:	|         movea.l (a0),a0
    878a:	|         move.l (a0),d0
    878c:	|         move.l 12(sp),-(sp)
    8790:	|         move.l d0,-(sp)
    8792:	|         jsr 958 <put4bytes>
    8798:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    879a:	|         clr.l (sp)
    879c:	|     /-- bra.s 8816 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    879e:	|  /--|-> movea.l 8(sp),a0
    87a2:	|  |  |   movea.l 4(a0),a0
    87a6:	|  |  |   move.l (sp),d1
    87a8:	|  |  |   move.l d1,d0
    87aa:	|  |  |   add.l d0,d0
    87ac:	|  |  |   add.l d1,d0
    87ae:	|  |  |   add.l d0,d0
    87b0:	|  |  |   add.l d0,d0
    87b2:	|  |  |   adda.l d0,a0
    87b4:	|  |  |   move.l (a0),d0
    87b6:	|  |  |   move.l 12(sp),-(sp)
    87ba:	|  |  |   move.l d0,-(sp)
    87bc:	|  |  |   jsr 958 <put4bytes>
    87c2:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    87c4:	|  |  |   movea.l 8(sp),a0
    87c8:	|  |  |   movea.l 4(a0),a0
    87cc:	|  |  |   move.l (sp),d1
    87ce:	|  |  |   move.l d1,d0
    87d0:	|  |  |   add.l d0,d0
    87d2:	|  |  |   add.l d1,d0
    87d4:	|  |  |   add.l d0,d0
    87d6:	|  |  |   add.l d0,d0
    87d8:	|  |  |   adda.l d0,a0
    87da:	|  |  |   move.l 4(a0),d0
    87de:	|  |  |   move.l 12(sp),-(sp)
    87e2:	|  |  |   move.l d0,-(sp)
    87e4:	|  |  |   jsr 958 <put4bytes>
    87ea:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    87ec:	|  |  |   movea.l 8(sp),a0
    87f0:	|  |  |   movea.l 4(a0),a0
    87f4:	|  |  |   move.l (sp),d1
    87f6:	|  |  |   move.l d1,d0
    87f8:	|  |  |   add.l d0,d0
    87fa:	|  |  |   add.l d1,d0
    87fc:	|  |  |   add.l d0,d0
    87fe:	|  |  |   add.l d0,d0
    8800:	|  |  |   adda.l d0,a0
    8802:	|  |  |   move.l 8(a0),d0
    8806:	|  |  |   move.l 12(sp),-(sp)
    880a:	|  |  |   move.l d0,-(sp)
    880c:	|  |  |   jsr 958 <put4bytes>
    8812:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    8814:	|  |  |   addq.l #1,(sp)
    8816:	|  |  \-> movea.l 8(sp),a0
    881a:	|  |      move.l 8(a0),d0
    881e:	|  |      cmp.l (sp),d0
    8820:	|  \----- bgt.w 879e <saveAnim+0x3e>
		}
	}
	return TRUE;
    8824:	\-------> moveq #1,d0
}
    8826:	          addq.l #4,sp
    8828:	          rts

0000882a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    882a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    882c:	             movea.l 8(sp),a0
    8830:	             move.l 4(a0),d0
    8834:	             move.l 12(sp),-(sp)
    8838:	             move.l d0,-(sp)
    883a:	             jsr 8d0 <put2bytes>
    8840:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8842:	             clr.l (sp)
    8844:	   /-------- bra.s 8870 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    8846:	/--|-------> movea.l 8(sp),a0
    884a:	|  |         move.l (a0),d1
    884c:	|  |         move.l (sp),d0
    884e:	|  |         add.l d0,d0
    8850:	|  |         add.l d0,d0
    8852:	|  |         movea.l d1,a0
    8854:	|  |         adda.l d0,a0
    8856:	|  |         move.l (a0),d0
    8858:	|  |         move.l 12(sp),-(sp)
    885c:	|  |         move.l d0,-(sp)
    885e:	|  |         jsr 8760 <saveAnim>
    8864:	|  |         addq.l #8,sp
    8866:	|  |         tst.w d0
    8868:	|  |     /-- bne.s 886e <saveCostume+0x44>
    886a:	|  |     |   clr.w d0
    886c:	|  |  /--|-- bra.s 8884 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    886e:	|  |  |  \-> addq.l #1,(sp)
    8870:	|  \--|----> movea.l 8(sp),a0
    8874:	|     |      move.l 4(a0),d1
    8878:	|     |      move.l d1,d0
    887a:	|     |      add.l d0,d0
    887c:	|     |      add.l d1,d0
    887e:	|     |      cmp.l (sp),d0
    8880:	\-----|----- bgt.s 8846 <saveCostume+0x1c>
	}

	return TRUE;
    8882:	      |      moveq #1,d0
}
    8884:	      \----> addq.l #4,sp
    8886:	             rts

00008888 <savePeople>:

BOOL savePeople (BPTR fp) {
    8888:	             lea -144(sp),sp
    888c:	             move.l a6,-(sp)
    888e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    8890:	             move.l 191a0 <allPeople>,148(sp)
	int countPeople = 0, a;
    8898:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    889c:	             move.w 18a94 <scaleHorizon>,d0
    88a2:	             movea.w d0,a0
    88a4:	             move.l 156(sp),-(sp)
    88a8:	             move.l a0,-(sp)
    88aa:	             jsr a9c <putSigned>
    88b0:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    88b2:	             move.w 18a96 <scaleDivide>,d0
    88b8:	             movea.w d0,a0
    88ba:	             move.l 156(sp),-(sp)
    88be:	             move.l a0,-(sp)
    88c0:	             jsr a9c <putSigned>
    88c6:	             addq.l #8,sp

	while (me) {
    88c8:	         /-- bra.s 88d8 <savePeople+0x50>
		countPeople ++;
    88ca:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    88ce:	      |  |   movea.l 148(sp),a0
    88d2:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    88d8:	      |  \-> tst.l 148(sp)
    88dc:	      \----- bne.s 88ca <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    88de:	             move.l 156(sp),-(sp)
    88e2:	             move.l 148(sp),-(sp)
    88e6:	             jsr 8d0 <put2bytes>
    88ec:	             addq.l #8,sp

	me = allPeople;
    88ee:	             move.l 191a0 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    88f6:	             clr.l 140(sp)
    88fa:	   /-------- bra.w 8d52 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    88fe:	/--|-------> movea.l 148(sp),a0
    8902:	|  |         move.l (a0),d0
    8904:	|  |         move.l 156(sp),-(sp)
    8908:	|  |         move.l d0,-(sp)
    890a:	|  |         jsr a46 <putFloat>
    8910:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    8912:	|  |         movea.l 148(sp),a0
    8916:	|  |         move.l 4(a0),d0
    891a:	|  |         move.l 156(sp),-(sp)
    891e:	|  |         move.l d0,-(sp)
    8920:	|  |         jsr a46 <putFloat>
    8926:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    8928:	|  |         movea.l 148(sp),a0
    892c:	|  |         move.l 68(a0),d0
    8930:	|  |         move.l 156(sp),-(sp)
    8934:	|  |         move.l d0,-(sp)
    8936:	|  |         jsr 882a <saveCostume>
    893c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    893e:	|  |         movea.l 148(sp),a0
    8942:	|  |         move.l 60(a0),d0
    8946:	|  |         move.l 156(sp),-(sp)
    894a:	|  |         move.l d0,-(sp)
    894c:	|  |         jsr 8760 <saveAnim>
    8952:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    8954:	|  |         move.l 156(sp),136(sp)
    895a:	|  |         movea.l 148(sp),a0
    895e:	|  |         move.l 60(a0),d1
    8962:	|  |         movea.l 148(sp),a0
    8966:	|  |         move.l 64(a0),d0
    896a:	|  |         cmp.l d1,d0
    896c:	|  |         seq d0
    896e:	|  |         neg.b d0
    8970:	|  |         move.b d0,d0
    8972:	|  |         andi.l #255,d0
    8978:	|  |         move.l d0,132(sp)
    897c:	|  |         move.l 190f0 <DOSBase>,d0
    8982:	|  |         movea.l d0,a6
    8984:	|  |         move.l 136(sp),d1
    8988:	|  |         move.l 132(sp),d2
    898c:	|  |         jsr -312(a6)
    8990:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    8994:	|  |         movea.l 148(sp),a0
    8998:	|  |         move.l 20(a0),d0
    899c:	|  |         move.l 156(sp),-(sp)
    89a0:	|  |         move.l d0,-(sp)
    89a2:	|  |         jsr a46 <putFloat>
    89a8:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    89aa:	|  |         movea.l 148(sp),a0
    89ae:	|  |         move.l 106(a0),d0
    89b2:	|  |         move.l 156(sp),-(sp)
    89b6:	|  |         move.l d0,-(sp)
    89b8:	|  |         jsr 8d0 <put2bytes>
    89be:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    89c0:	|  |         movea.l 148(sp),a0
    89c4:	|  |         move.l 8(a0),d0
    89c8:	|  |         move.l 156(sp),-(sp)
    89cc:	|  |         move.l d0,-(sp)
    89ce:	|  |         jsr 8d0 <put2bytes>
    89d4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    89d6:	|  |         movea.l 148(sp),a0
    89da:	|  |         move.l 28(a0),d0
    89de:	|  |         move.l 156(sp),-(sp)
    89e2:	|  |         move.l d0,-(sp)
    89e4:	|  |         jsr 8d0 <put2bytes>
    89ea:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    89ec:	|  |         movea.l 148(sp),a0
    89f0:	|  |         move.l 32(a0),d0
    89f4:	|  |         move.l 156(sp),-(sp)
    89f8:	|  |         move.l d0,-(sp)
    89fa:	|  |         jsr 8d0 <put2bytes>
    8a00:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    8a02:	|  |         movea.l 148(sp),a0
    8a06:	|  |         move.l 36(a0),d0
    8a0a:	|  |         move.l 156(sp),-(sp)
    8a0e:	|  |         move.l d0,-(sp)
    8a10:	|  |         jsr 8d0 <put2bytes>
    8a16:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    8a18:	|  |         movea.l 148(sp),a0
    8a1c:	|  |         move.l 40(a0),d0
    8a20:	|  |         move.l 156(sp),-(sp)
    8a24:	|  |         move.l d0,-(sp)
    8a26:	|  |         jsr 8d0 <put2bytes>
    8a2c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    8a2e:	|  |         movea.l 148(sp),a0
    8a32:	|  |         move.l 72(a0),d0
    8a36:	|  |         move.l 156(sp),-(sp)
    8a3a:	|  |         move.l d0,-(sp)
    8a3c:	|  |         jsr 8d0 <put2bytes>
    8a42:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    8a44:	|  |         movea.l 148(sp),a0
    8a48:	|  |         move.l 76(a0),d0
    8a4c:	|  |         move.l 156(sp),-(sp)
    8a50:	|  |         move.l d0,-(sp)
    8a52:	|  |         jsr 8d0 <put2bytes>
    8a58:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    8a5a:	|  |         movea.l 148(sp),a0
    8a5e:	|  |         move.l 16(a0),d0
    8a62:	|  |         move.l 156(sp),-(sp)
    8a66:	|  |         move.l d0,-(sp)
    8a68:	|  |         jsr 8d0 <put2bytes>
    8a6e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    8a70:	|  |         movea.l 148(sp),a0
    8a74:	|  |         move.l 110(a0),d0
    8a78:	|  |         move.l 156(sp),-(sp)
    8a7c:	|  |         move.l d0,-(sp)
    8a7e:	|  |         jsr 8d0 <put2bytes>
    8a84:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    8a86:	|  |         movea.l 148(sp),a0
    8a8a:	|  |         move.l 12(a0),d0
    8a8e:	|  |         move.l d0,d0
    8a90:	|  |         movea.w d0,a0
    8a92:	|  |         move.l 156(sp),-(sp)
    8a96:	|  |         move.l a0,-(sp)
    8a98:	|  |         jsr a9c <putSigned>
    8a9e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    8aa0:	|  |         move.l 156(sp),124(sp)
    8aa6:	|  |         movea.l 148(sp),a0
    8aaa:	|  |         move.w 92(a0),d0
    8aae:	|  |         movea.w d0,a0
    8ab0:	|  |         move.l a0,120(sp)
    8ab4:	|  |         move.l 190f0 <DOSBase>,d0
    8aba:	|  |         movea.l d0,a6
    8abc:	|  |         move.l 124(sp),d1
    8ac0:	|  |         move.l 120(sp),d2
    8ac4:	|  |         jsr -312(a6)
    8ac8:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    8acc:	|  |         move.l 156(sp),112(sp)
    8ad2:	|  |         movea.l 148(sp),a0
    8ad6:	|  |         move.w 52(a0),d0
    8ada:	|  |         movea.w d0,a0
    8adc:	|  |         move.l a0,108(sp)
    8ae0:	|  |         move.l 190f0 <DOSBase>,d0
    8ae6:	|  |         movea.l d0,a6
    8ae8:	|  |         move.l 112(sp),d1
    8aec:	|  |         move.l 108(sp),d2
    8af0:	|  |         jsr -312(a6)
    8af4:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    8af8:	|  |         move.l 156(sp),100(sp)
    8afe:	|  |         movea.l 148(sp),a0
    8b02:	|  |         move.w 54(a0),d0
    8b06:	|  |         movea.w d0,a0
    8b08:	|  |         move.l a0,96(sp)
    8b0c:	|  |         move.l 190f0 <DOSBase>,d0
    8b12:	|  |         movea.l d0,a6
    8b14:	|  |         move.l 100(sp),d1
    8b18:	|  |         move.l 96(sp),d2
    8b1c:	|  |         jsr -312(a6)
    8b20:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    8b24:	|  |         movea.l 148(sp),a0
    8b28:	|  |         move.l 56(a0),d0
    8b2c:	|  |  /----- beq.s 8b6a <savePeople+0x2e2>
			FPutC (fp, 1);
    8b2e:	|  |  |      move.l 156(sp),76(sp)
    8b34:	|  |  |      moveq #1,d0
    8b36:	|  |  |      move.l d0,72(sp)
    8b3a:	|  |  |      move.l 190f0 <DOSBase>,d0
    8b40:	|  |  |      movea.l d0,a6
    8b42:	|  |  |      move.l 76(sp),d1
    8b46:	|  |  |      move.l 72(sp),d2
    8b4a:	|  |  |      jsr -312(a6)
    8b4e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    8b52:	|  |  |      movea.l 148(sp),a0
    8b56:	|  |  |      move.l 56(a0),d0
    8b5a:	|  |  |      move.l 156(sp),-(sp)
    8b5e:	|  |  |      move.l d0,-(sp)
    8b60:	|  |  |      jsr 9de8 <saveFunction>
    8b66:	|  |  |      addq.l #8,sp
    8b68:	|  |  |  /-- bra.s 8b8e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    8b6a:	|  |  \--|-> move.l 156(sp),88(sp)
    8b70:	|  |     |   moveq #1,d0
    8b72:	|  |     |   move.l d0,84(sp)
    8b76:	|  |     |   move.l 190f0 <DOSBase>,d0
    8b7c:	|  |     |   movea.l d0,a6
    8b7e:	|  |     |   move.l 88(sp),d1
    8b82:	|  |     |   move.l 84(sp),d2
    8b86:	|  |     |   jsr -312(a6)
    8b8a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    8b8e:	|  |     \-> movea.l 148(sp),a0
    8b92:	|  |         move.l 94(a0),d0
    8b96:	|  |         move.l 156(sp),-(sp)
    8b9a:	|  |         move.l d0,-(sp)
    8b9c:	|  |         jsr 8d0 <put2bytes>
    8ba2:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    8ba4:	|  |         movea.l 148(sp),a0
    8ba8:	|  |         move.l 80(a0),d0
    8bac:	|  |         move.l 156(sp),-(sp)
    8bb0:	|  |         move.l d0,-(sp)
    8bb2:	|  |         jsr 8d0 <put2bytes>
    8bb8:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    8bba:	|  |         movea.l 148(sp),a0
    8bbe:	|  |         move.l 88(a0),d0
    8bc2:	|  |         move.l 156(sp),-(sp)
    8bc6:	|  |         move.l d0,-(sp)
    8bc8:	|  |         jsr 8d0 <put2bytes>
    8bce:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    8bd0:	|  |         movea.l 148(sp),a0
    8bd4:	|  |         move.l 84(a0),d0
    8bd8:	|  |         move.l 156(sp),-(sp)
    8bdc:	|  |         move.l d0,-(sp)
    8bde:	|  |         jsr 8d0 <put2bytes>
    8be4:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    8be6:	|  |         movea.l 148(sp),a0
    8bea:	|  |         move.l 98(a0),d0
    8bee:	|  |         move.l d0,d0
    8bf0:	|  |         movea.w d0,a0
    8bf2:	|  |         move.l 156(sp),-(sp)
    8bf6:	|  |         move.l a0,-(sp)
    8bf8:	|  |         jsr a9c <putSigned>
    8bfe:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    8c00:	|  |         movea.l 148(sp),a0
    8c04:	|  |         move.l 44(a0),d0
    8c08:	|  |         move.l d0,d0
    8c0a:	|  |         movea.w d0,a0
    8c0c:	|  |         move.l 156(sp),-(sp)
    8c10:	|  |         move.l a0,-(sp)
    8c12:	|  |         jsr a9c <putSigned>
    8c18:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    8c1a:	|  |         movea.l 148(sp),a0
    8c1e:	|  |         move.l 48(a0),d0
    8c22:	|  |         move.l d0,d0
    8c24:	|  |         movea.w d0,a0
    8c26:	|  |         move.l 156(sp),-(sp)
    8c2a:	|  |         move.l a0,-(sp)
    8c2c:	|  |         jsr a9c <putSigned>
    8c32:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    8c34:	|  |         move.l 156(sp),64(sp)
    8c3a:	|  |         movea.l 148(sp),a0
    8c3e:	|  |         move.b 114(a0),d0
    8c42:	|  |         move.b d0,d0
    8c44:	|  |         andi.l #255,d0
    8c4a:	|  |         move.l d0,60(sp)
    8c4e:	|  |         move.l 190f0 <DOSBase>,d0
    8c54:	|  |         movea.l d0,a6
    8c56:	|  |         move.l 64(sp),d1
    8c5a:	|  |         move.l 60(sp),d2
    8c5e:	|  |         jsr -312(a6)
    8c62:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    8c66:	|  |         move.l 156(sp),52(sp)
    8c6c:	|  |         movea.l 148(sp),a0
    8c70:	|  |         move.b 115(a0),d0
    8c74:	|  |         move.b d0,d0
    8c76:	|  |         andi.l #255,d0
    8c7c:	|  |         move.l d0,48(sp)
    8c80:	|  |         move.l 190f0 <DOSBase>,d0
    8c86:	|  |         movea.l d0,a6
    8c88:	|  |         move.l 52(sp),d1
    8c8c:	|  |         move.l 48(sp),d2
    8c90:	|  |         jsr -312(a6)
    8c94:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    8c98:	|  |         move.l 156(sp),40(sp)
    8c9e:	|  |         movea.l 148(sp),a0
    8ca2:	|  |         move.b 116(a0),d0
    8ca6:	|  |         move.b d0,d0
    8ca8:	|  |         andi.l #255,d0
    8cae:	|  |         move.l d0,36(sp)
    8cb2:	|  |         move.l 190f0 <DOSBase>,d0
    8cb8:	|  |         movea.l d0,a6
    8cba:	|  |         move.l 40(sp),d1
    8cbe:	|  |         move.l 36(sp),d2
    8cc2:	|  |         jsr -312(a6)
    8cc6:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    8cca:	|  |         move.l 156(sp),28(sp)
    8cd0:	|  |         movea.l 148(sp),a0
    8cd4:	|  |         move.b 117(a0),d0
    8cd8:	|  |         move.b d0,d0
    8cda:	|  |         andi.l #255,d0
    8ce0:	|  |         move.l d0,24(sp)
    8ce4:	|  |         move.l 190f0 <DOSBase>,d0
    8cea:	|  |         movea.l d0,a6
    8cec:	|  |         move.l 28(sp),d1
    8cf0:	|  |         move.l 24(sp),d2
    8cf4:	|  |         jsr -312(a6)
    8cf8:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    8cfc:	|  |         move.l 156(sp),16(sp)
    8d02:	|  |         movea.l 148(sp),a0
    8d06:	|  |         move.b 118(a0),d0
    8d0a:	|  |         move.b d0,d0
    8d0c:	|  |         andi.l #255,d0
    8d12:	|  |         move.l d0,12(sp)
    8d16:	|  |         move.l 190f0 <DOSBase>,d0
    8d1c:	|  |         movea.l d0,a6
    8d1e:	|  |         move.l 16(sp),d1
    8d22:	|  |         move.l 12(sp),d2
    8d26:	|  |         jsr -312(a6)
    8d2a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    8d2e:	|  |         movea.l 148(sp),a0
    8d32:	|  |         move.l 102(a0),d0
    8d36:	|  |         move.l 156(sp),-(sp)
    8d3a:	|  |         move.l d0,-(sp)
    8d3c:	|  |         jsr afdc <saveObjectRef>
    8d42:	|  |         addq.l #8,sp

		me = me -> next;
    8d44:	|  |         movea.l 148(sp),a0
    8d48:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    8d4e:	|  |         addq.l #1,140(sp)
    8d52:	|  \-------> movea.l 140(sp),a0
    8d56:	|            cmpa.l 144(sp),a0
    8d5a:	\----------- blt.w 88fe <savePeople+0x76>
	}
	return TRUE;
    8d5e:	             moveq #1,d0
}
    8d60:	             move.l (sp)+,d2
    8d62:	             movea.l (sp)+,a6
    8d64:	             lea 144(sp),sp
    8d68:	             rts

00008d6a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    8d6a:	movea.l 4(sp),a0
    8d6e:	move.l 8(sp),(a0)
}
    8d72:	nop
    8d74:	rts

00008d76 <setDrawMode>:


void setDrawMode (int h, int ob) {
    8d76:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    8d78:	       move.l 12(sp),-(sp)
    8d7c:	       jsr 7e48 <findPerson>
    8d82:	       addq.l #4,sp
    8d84:	       move.l d0,(sp)
	if (! moveMe) return;
    8d86:	/----- beq.s 8d9a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    8d88:	|      move.l 8(sp),-(sp)
    8d8c:	|      move.l 4(sp),-(sp)
    8d90:	|      jsr 8da0 <setMyDrawMode>
    8d96:	|      addq.l #8,sp
    8d98:	|  /-- bra.s 8d9c <setDrawMode+0x26>
	if (! moveMe) return;
    8d9a:	\--|-> nop
}
    8d9c:	   \-> addq.l #4,sp
    8d9e:	       rts

00008da0 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    8da0:	       moveq #19,d0
    8da2:	       cmp.l 8(sp),d0
    8da6:	/----- bcs.w 927e <setMyDrawMode+0x4de>
    8daa:	|      move.l 8(sp),d0
    8dae:	|      add.l d0,d0
    8db0:	|      movea.l d0,a0
    8db2:	|      adda.l #36286,a0
    8db8:	|      move.w (a0),d0
    8dba:	|      jmp (8dbe <setMyDrawMode+0x1e>,pc,d0.w)
    8dbe:	|      .short 0x04c0
    8dc0:	|      ori.l #6684712,-(a4)
    8dc6:	|      btst d0,-(a0)
    8dc8:	|      bchg d0,(a6)+
    8dca:	|      bclr d0,(a4)+
    8dcc:	|      bset d0,(a2)+
    8dce:	|      andi.b #84,(a6)
    8dd2:	|      andi.l #55575312,(a2)
    8dd8:	|      .short 0x02d0
    8dda:	|      bclr d1,(a0)
    8ddc:	|      .short 0x044a
    8dde:	|      .short 0x040c
    8de0:	|      movep.l d1,1158(a6)
    8de4:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8de6:	|      movea.l 4(sp),a0
    8dea:	|      clr.b 116(a0)
    8dee:	|      movea.l 4(sp),a0
    8df2:	|      move.b 116(a0),d0
    8df6:	|      movea.l 4(sp),a0
    8dfa:	|      move.b d0,115(a0)
    8dfe:	|      movea.l 4(sp),a0
    8e02:	|      move.b 115(a0),d0
    8e06:	|      movea.l 4(sp),a0
    8e0a:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e0e:	|      movea.l 4(sp),a0
    8e12:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    8e16:	|      movea.l 4(sp),a0
    8e1a:	|      move.b #64,118(a0)
			break;
    8e20:	|  /-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8e24:	|  |   movea.l 4(sp),a0
    8e28:	|  |   clr.b 116(a0)
    8e2c:	|  |   movea.l 4(sp),a0
    8e30:	|  |   move.b 116(a0),d0
    8e34:	|  |   movea.l 4(sp),a0
    8e38:	|  |   move.b d0,115(a0)
    8e3c:	|  |   movea.l 4(sp),a0
    8e40:	|  |   move.b 115(a0),d0
    8e44:	|  |   movea.l 4(sp),a0
    8e48:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e4c:	|  |   movea.l 4(sp),a0
    8e50:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    8e54:	|  |   movea.l 4(sp),a0
    8e58:	|  |   move.b #-128,118(a0)
			break;
    8e5e:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8e62:	|  |   movea.l 4(sp),a0
    8e66:	|  |   clr.b 116(a0)
    8e6a:	|  |   movea.l 4(sp),a0
    8e6e:	|  |   move.b 116(a0),d0
    8e72:	|  |   movea.l 4(sp),a0
    8e76:	|  |   move.b d0,115(a0)
    8e7a:	|  |   movea.l 4(sp),a0
    8e7e:	|  |   move.b 115(a0),d0
    8e82:	|  |   movea.l 4(sp),a0
    8e86:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e8a:	|  |   movea.l 4(sp),a0
    8e8e:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    8e92:	|  |   movea.l 4(sp),a0
    8e96:	|  |   move.b #-64,118(a0)
			break;
    8e9c:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8ea0:	|  |   movea.l 4(sp),a0
    8ea4:	|  |   clr.b 116(a0)
    8ea8:	|  |   movea.l 4(sp),a0
    8eac:	|  |   move.b 116(a0),d0
    8eb0:	|  |   movea.l 4(sp),a0
    8eb4:	|  |   move.b d0,115(a0)
    8eb8:	|  |   movea.l 4(sp),a0
    8ebc:	|  |   move.b 115(a0),d0
    8ec0:	|  |   movea.l 4(sp),a0
    8ec4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8ec8:	|  |   movea.l 4(sp),a0
    8ecc:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    8ed0:	|  |   movea.l 4(sp),a0
    8ed4:	|  |   move.b #-2,118(a0)
			break;
    8eda:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8ede:	|  |   movea.l 4(sp),a0
    8ee2:	|  |   clr.b 116(a0)
    8ee6:	|  |   movea.l 4(sp),a0
    8eea:	|  |   move.b 116(a0),d0
    8eee:	|  |   movea.l 4(sp),a0
    8ef2:	|  |   move.b d0,115(a0)
    8ef6:	|  |   movea.l 4(sp),a0
    8efa:	|  |   move.b 115(a0),d0
    8efe:	|  |   movea.l 4(sp),a0
    8f02:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8f06:	|  |   movea.l 4(sp),a0
    8f0a:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8f10:	|  |   movea.l 4(sp),a0
    8f14:	|  |   clr.b 118(a0)
			break;
    8f18:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f1c:	|  |   movea.l 4(sp),a0
    8f20:	|  |   clr.b 116(a0)
    8f24:	|  |   movea.l 4(sp),a0
    8f28:	|  |   move.b 116(a0),d0
    8f2c:	|  |   movea.l 4(sp),a0
    8f30:	|  |   move.b d0,115(a0)
    8f34:	|  |   movea.l 4(sp),a0
    8f38:	|  |   move.b 115(a0),d0
    8f3c:	|  |   movea.l 4(sp),a0
    8f40:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8f44:	|  |   movea.l 4(sp),a0
    8f48:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8f4e:	|  |   movea.l 4(sp),a0
    8f52:	|  |   clr.b 118(a0)
			break;
    8f56:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f5a:	|  |   movea.l 4(sp),a0
    8f5e:	|  |   clr.b 116(a0)
    8f62:	|  |   movea.l 4(sp),a0
    8f66:	|  |   move.b 116(a0),d0
    8f6a:	|  |   movea.l 4(sp),a0
    8f6e:	|  |   move.b d0,115(a0)
    8f72:	|  |   movea.l 4(sp),a0
    8f76:	|  |   move.b 115(a0),d0
    8f7a:	|  |   movea.l 4(sp),a0
    8f7e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8f82:	|  |   movea.l 4(sp),a0
    8f86:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8f8c:	|  |   movea.l 4(sp),a0
    8f90:	|  |   clr.b 118(a0)
			break;
    8f94:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f98:	|  |   movea.l 4(sp),a0
    8f9c:	|  |   clr.b 116(a0)
    8fa0:	|  |   movea.l 4(sp),a0
    8fa4:	|  |   move.b 116(a0),d0
    8fa8:	|  |   movea.l 4(sp),a0
    8fac:	|  |   move.b d0,115(a0)
    8fb0:	|  |   movea.l 4(sp),a0
    8fb4:	|  |   move.b 115(a0),d0
    8fb8:	|  |   movea.l 4(sp),a0
    8fbc:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8fc0:	|  |   movea.l 4(sp),a0
    8fc4:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8fc8:	|  |   movea.l 4(sp),a0
    8fcc:	|  |   clr.b 118(a0)
			break;
    8fd0:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8fd4:	|  |   movea.l 4(sp),a0
    8fd8:	|  |   clr.b 116(a0)
    8fdc:	|  |   movea.l 4(sp),a0
    8fe0:	|  |   move.b 116(a0),d0
    8fe4:	|  |   movea.l 4(sp),a0
    8fe8:	|  |   move.b d0,115(a0)
    8fec:	|  |   movea.l 4(sp),a0
    8ff0:	|  |   move.b 115(a0),d0
    8ff4:	|  |   movea.l 4(sp),a0
    8ff8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8ffc:	|  |   movea.l 4(sp),a0
    9000:	|  |   st 117(a0)
			moveMe->transparency = 64;
    9004:	|  |   movea.l 4(sp),a0
    9008:	|  |   move.b #64,118(a0)
			break;
    900e:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9012:	|  |   movea.l 4(sp),a0
    9016:	|  |   clr.b 116(a0)
    901a:	|  |   movea.l 4(sp),a0
    901e:	|  |   move.b 116(a0),d0
    9022:	|  |   movea.l 4(sp),a0
    9026:	|  |   move.b d0,115(a0)
    902a:	|  |   movea.l 4(sp),a0
    902e:	|  |   move.b 115(a0),d0
    9032:	|  |   movea.l 4(sp),a0
    9036:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    903a:	|  |   movea.l 4(sp),a0
    903e:	|  |   st 117(a0)
			moveMe->transparency = 128;
    9042:	|  |   movea.l 4(sp),a0
    9046:	|  |   move.b #-128,118(a0)
			break;
    904c:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9050:	|  |   movea.l 4(sp),a0
    9054:	|  |   clr.b 116(a0)
    9058:	|  |   movea.l 4(sp),a0
    905c:	|  |   move.b 116(a0),d0
    9060:	|  |   movea.l 4(sp),a0
    9064:	|  |   move.b d0,115(a0)
    9068:	|  |   movea.l 4(sp),a0
    906c:	|  |   move.b 115(a0),d0
    9070:	|  |   movea.l 4(sp),a0
    9074:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9078:	|  |   movea.l 4(sp),a0
    907c:	|  |   st 117(a0)
			moveMe->transparency = 192;
    9080:	|  |   movea.l 4(sp),a0
    9084:	|  |   move.b #-64,118(a0)
			break;
    908a:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    908e:	|  |   movea.l 4(sp),a0
    9092:	|  |   move.b #-128,116(a0)
    9098:	|  |   movea.l 4(sp),a0
    909c:	|  |   move.b 116(a0),d0
    90a0:	|  |   movea.l 4(sp),a0
    90a4:	|  |   move.b d0,115(a0)
    90a8:	|  |   movea.l 4(sp),a0
    90ac:	|  |   move.b 115(a0),d0
    90b0:	|  |   movea.l 4(sp),a0
    90b4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    90b8:	|  |   movea.l 4(sp),a0
    90bc:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    90c2:	|  |   movea.l 4(sp),a0
    90c6:	|  |   clr.b 118(a0)
			break;
    90ca:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    90ce:	|  |   movea.l 4(sp),a0
    90d2:	|  |   move.b #-128,116(a0)
    90d8:	|  |   movea.l 4(sp),a0
    90dc:	|  |   move.b 116(a0),d0
    90e0:	|  |   movea.l 4(sp),a0
    90e4:	|  |   move.b d0,115(a0)
    90e8:	|  |   movea.l 4(sp),a0
    90ec:	|  |   move.b 115(a0),d0
    90f0:	|  |   movea.l 4(sp),a0
    90f4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    90f8:	|  |   movea.l 4(sp),a0
    90fc:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9102:	|  |   movea.l 4(sp),a0
    9106:	|  |   clr.b 118(a0)
			break;
    910a:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    910e:	|  |   movea.l 4(sp),a0
    9112:	|  |   move.b #-128,116(a0)
    9118:	|  |   movea.l 4(sp),a0
    911c:	|  |   move.b 116(a0),d0
    9120:	|  |   movea.l 4(sp),a0
    9124:	|  |   move.b d0,115(a0)
    9128:	|  |   movea.l 4(sp),a0
    912c:	|  |   move.b 115(a0),d0
    9130:	|  |   movea.l 4(sp),a0
    9134:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9138:	|  |   movea.l 4(sp),a0
    913c:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9142:	|  |   movea.l 4(sp),a0
    9146:	|  |   clr.b 118(a0)
			break;
    914a:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    914e:	|  |   movea.l 4(sp),a0
    9152:	|  |   move.b #-128,116(a0)
    9158:	|  |   movea.l 4(sp),a0
    915c:	|  |   move.b 116(a0),d0
    9160:	|  |   movea.l 4(sp),a0
    9164:	|  |   move.b d0,115(a0)
    9168:	|  |   movea.l 4(sp),a0
    916c:	|  |   move.b 115(a0),d0
    9170:	|  |   movea.l 4(sp),a0
    9174:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9178:	|  |   movea.l 4(sp),a0
    917c:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9180:	|  |   movea.l 4(sp),a0
    9184:	|  |   clr.b 118(a0)
			break;
    9188:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    918c:	|  |   movea.l 4(sp),a0
    9190:	|  |   st 116(a0)
    9194:	|  |   movea.l 4(sp),a0
    9198:	|  |   move.b 116(a0),d0
    919c:	|  |   movea.l 4(sp),a0
    91a0:	|  |   move.b d0,115(a0)
    91a4:	|  |   movea.l 4(sp),a0
    91a8:	|  |   move.b 115(a0),d0
    91ac:	|  |   movea.l 4(sp),a0
    91b0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    91b4:	|  |   movea.l 4(sp),a0
    91b8:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    91be:	|  |   movea.l 4(sp),a0
    91c2:	|  |   clr.b 118(a0)
			break;
    91c6:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    91ca:	|  |   movea.l 4(sp),a0
    91ce:	|  |   st 116(a0)
    91d2:	|  |   movea.l 4(sp),a0
    91d6:	|  |   move.b 116(a0),d0
    91da:	|  |   movea.l 4(sp),a0
    91de:	|  |   move.b d0,115(a0)
    91e2:	|  |   movea.l 4(sp),a0
    91e6:	|  |   move.b 115(a0),d0
    91ea:	|  |   movea.l 4(sp),a0
    91ee:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    91f2:	|  |   movea.l 4(sp),a0
    91f6:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    91fc:	|  |   movea.l 4(sp),a0
    9200:	|  |   clr.b 118(a0)
			break;
    9204:	|  +-- bra.w 92b8 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9208:	|  |   movea.l 4(sp),a0
    920c:	|  |   st 116(a0)
    9210:	|  |   movea.l 4(sp),a0
    9214:	|  |   move.b 116(a0),d0
    9218:	|  |   movea.l 4(sp),a0
    921c:	|  |   move.b d0,115(a0)
    9220:	|  |   movea.l 4(sp),a0
    9224:	|  |   move.b 115(a0),d0
    9228:	|  |   movea.l 4(sp),a0
    922c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9230:	|  |   movea.l 4(sp),a0
    9234:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    923a:	|  |   movea.l 4(sp),a0
    923e:	|  |   clr.b 118(a0)
			break;
    9242:	|  +-- bra.s 92b8 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9244:	|  |   movea.l 4(sp),a0
    9248:	|  |   st 116(a0)
    924c:	|  |   movea.l 4(sp),a0
    9250:	|  |   move.b 116(a0),d0
    9254:	|  |   movea.l 4(sp),a0
    9258:	|  |   move.b d0,115(a0)
    925c:	|  |   movea.l 4(sp),a0
    9260:	|  |   move.b 115(a0),d0
    9264:	|  |   movea.l 4(sp),a0
    9268:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    926c:	|  |   movea.l 4(sp),a0
    9270:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9274:	|  |   movea.l 4(sp),a0
    9278:	|  |   clr.b 118(a0)
			break;
    927c:	|  +-- bra.s 92b8 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    927e:	\--|-> movea.l 4(sp),a0
    9282:	   |   clr.b 116(a0)
    9286:	   |   movea.l 4(sp),a0
    928a:	   |   move.b 116(a0),d0
    928e:	   |   movea.l 4(sp),a0
    9292:	   |   move.b d0,115(a0)
    9296:	   |   movea.l 4(sp),a0
    929a:	   |   move.b 115(a0),d0
    929e:	   |   movea.l 4(sp),a0
    92a2:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    92a6:	   |   movea.l 4(sp),a0
    92aa:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    92ae:	   |   movea.l 4(sp),a0
    92b2:	   |   clr.b 118(a0)
			break;
    92b6:	   |   nop
	}
}
    92b8:	   \-> nop
    92ba:	       rts

000092bc <shufflePeople>:

void shufflePeople () {
    92bc:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    92c0:	             move.l #102816,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    92c8:	             move.l 191a0 <allPeople>,d0
    92ce:	/----------- beq.w 93a4 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    92d2:	|     /----- bra.w 9394 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    92d6:	|  /--|----> movea.l 16(sp),a0
    92da:	|  |  |      movea.l (a0),a0
    92dc:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    92e2:	|  |  |      movea.l 16(sp),a0
    92e6:	|  |  |      movea.l (a0),a0
    92e8:	|  |  |      move.l 106(a0),d0
    92ec:	|  |  |      moveq #1,d1
    92ee:	|  |  |      and.l d1,d0
    92f0:	|  |  |  /-- beq.s 9308 <shufflePeople+0x4c>
    92f2:	|  |  |  |   move.l #1148846080,-(sp)
    92f8:	|  |  |  |   move.l 16(sp),-(sp)
    92fc:	|  |  |  |   jsr 13f94 <__addsf3>
    9302:	|  |  |  |   addq.l #8,sp
    9304:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    9308:	|  |  |  \-> movea.l 16(sp),a0
    930c:	|  |  |      movea.l (a0),a0
    930e:	|  |  |      movea.l 24(a0),a0
    9312:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    9318:	|  |  |      movea.l 16(sp),a0
    931c:	|  |  |      movea.l (a0),a0
    931e:	|  |  |      movea.l 24(a0),a0
    9322:	|  |  |      move.l 106(a0),d0
    9326:	|  |  |      moveq #1,d1
    9328:	|  |  |      and.l d1,d0
    932a:	|  |  |  /-- beq.s 9342 <shufflePeople+0x86>
    932c:	|  |  |  |   move.l #1148846080,-(sp)
    9332:	|  |  |  |   move.l 12(sp),-(sp)
    9336:	|  |  |  |   jsr 13f94 <__addsf3>
    933c:	|  |  |  |   addq.l #8,sp
    933e:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    9342:	|  |  |  \-> move.l 8(sp),-(sp)
    9346:	|  |  |      move.l 16(sp),-(sp)
    934a:	|  |  |      jsr 1434e <__gtsf2>
    9350:	|  |  |      addq.l #8,sp
    9352:	|  |  |      tst.l d0
    9354:	|  |  |  /-- ble.s 9386 <shufflePeople+0xca>
			A = (*thisReference);
    9356:	|  |  |  |   movea.l 16(sp),a0
    935a:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    935e:	|  |  |  |   movea.l 16(sp),a0
    9362:	|  |  |  |   movea.l (a0),a0
    9364:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    9368:	|  |  |  |   movea.l (sp),a0
    936a:	|  |  |  |   move.l 24(a0),d0
    936e:	|  |  |  |   movea.l 4(sp),a0
    9372:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    9376:	|  |  |  |   movea.l (sp),a0
    9378:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    937e:	|  |  |  |   movea.l 16(sp),a0
    9382:	|  |  |  |   move.l (sp),(a0)
    9384:	|  |  +--|-- bra.s 9394 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    9386:	|  |  |  \-> movea.l 16(sp),a0
    938a:	|  |  |      move.l (a0),d0
    938c:	|  |  |      moveq #24,d1
    938e:	|  |  |      add.l d0,d1
    9390:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    9394:	|  |  \----> movea.l 16(sp),a0
    9398:	|  |         movea.l (a0),a0
    939a:	|  |         move.l 24(a0),d0
    939e:	|  \-------- bne.w 92d6 <shufflePeople+0x1a>
    93a2:	|        /-- bra.s 93a6 <shufflePeople+0xea>
	if (!allPeople) return;
    93a4:	\--------|-> nop
		}
	}
}
    93a6:	         \-> lea 20(sp),sp
    93aa:	             rts

000093ac <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    93ac:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    93ae:	       tst.l 8(sp)
    93b2:	   /-- bgt.s 93b8 <setCharacterWalkSpeed+0xc>
    93b4:	   |   clr.w d0
    93b6:	/--|-- bra.s 93d6 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    93b8:	|  \-> move.l 12(sp),-(sp)
    93bc:	|      jsr 7e48 <findPerson>
    93c2:	|      addq.l #4,sp
    93c4:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    93c6:	|  /-- bne.s 93cc <setCharacterWalkSpeed+0x20>
    93c8:	|  |   clr.w d0
    93ca:	+--|-- bra.s 93d6 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    93cc:	|  \-> movea.l (sp),a0
    93ce:	|      move.l 8(sp),16(a0)
	return TRUE;
    93d4:	|      moveq #1,d0
}
    93d6:	\----> addq.l #4,sp
    93d8:	       rts

000093da <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    93da:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    93dc:	       move.l 8(sp),-(sp)
    93e0:	       jsr 7e48 <findPerson>
    93e6:	       addq.l #4,sp
    93e8:	       move.l d0,(sp)
    if (thisPerson) {
    93ea:	/----- beq.s 940a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    93ec:	|      movea.l (sp),a0
    93ee:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    93f4:	|      moveq #2,d0
    93f6:	|      and.l 12(sp),d0
    93fa:	|  /-- beq.s 9406 <setPersonExtra+0x2c>
    93fc:	|  |   movea.l (sp),a0
    93fe:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    9406:	|  \-> moveq #1,d0
    9408:	|  /-- bra.s 940c <setPersonExtra+0x32>
    }
    return FALSE;
    940a:	\--|-> clr.w d0
}
    940c:	   \-> addq.l #4,sp
    940e:	       rts

00009410 <setScale>:


void setScale (short int h, short int d) {
    9410:	subq.l #4,sp
    9412:	move.l 8(sp),d1
    9416:	move.l 12(sp),d0
    941a:	move.w d1,d1
    941c:	move.w d1,2(sp)
    9420:	move.w d0,d0
    9422:	move.w d0,(sp)
	scaleHorizon = h;
    9424:	move.w 2(sp),18a94 <scaleHorizon>
	scaleDivide = d;
    942c:	move.w (sp),18a96 <scaleDivide>
}
    9432:	nop
    9434:	addq.l #4,sp
    9436:	rts

00009438 <setShown>:

void setShown (BOOL h, int ob) {
    9438:	    subq.l #8,sp
    943a:	    move.l 12(sp),d0
    943e:	    move.w d0,d0
    9440:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    9444:	    move.l 16(sp),-(sp)
    9448:	    jsr 7e48 <findPerson>
    944e:	    addq.l #4,sp
    9450:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    9454:	/-- beq.s 9460 <setShown+0x28>
    9456:	|   movea.l 4(sp),a0
    945a:	|   move.w 2(sp),92(a0)
}
    9460:	\-> nop
    9462:	    addq.l #8,sp
    9464:	    rts

00009466 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    9466:	       subq.l #8,sp
    9468:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    946a:	       movea.l 16(sp),a0
    946e:	       move.l 80(a0),d0
    9472:	       move.l d0,d1
    9474:	       addi.l #360,d1
    947a:	       movea.l 16(sp),a0
    947e:	       move.l 84(a0),d0
    9482:	       move.l d1,d2
    9484:	       sub.l d0,d2
    9486:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    948a:	       movea.l 16(sp),a0
    948e:	       move.l 110(a0),d0
    9492:	   /-- beq.s 949e <spinStep+0x38>
    9494:	   |   movea.l 16(sp),a0
    9498:	   |   move.l 110(a0),d0
    949c:	/--|-- bra.s 94b8 <spinStep+0x52>
    949e:	|  \-> movea.l 16(sp),a0
    94a2:	|      movea.l 68(a0),a0
    94a6:	|      move.l 4(a0),d0
    94aa:	|      move.l d0,-(sp)
    94ac:	|      pea 168 <decodeFilename+0x50>
    94b0:	|      jsr 147e2 <__divsi3>
    94b6:	|      addq.l #8,sp
    94b8:	\----> move.l d0,4(sp)
	while (diff > 180) {
    94bc:	   /-- bra.s 94c6 <spinStep+0x60>
		diff -= 360;
    94be:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    94c6:	|  \-> cmpi.l #180,8(sp)
    94ce:	\----- bgt.s 94be <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    94d0:	       move.l 8(sp),d0
    94d4:	       cmp.l 4(sp),d0
    94d8:	   /-- blt.s 94f6 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    94da:	   |   movea.l 16(sp),a0
    94de:	   |   move.l 80(a0),d0
    94e2:	   |   sub.l 4(sp),d0
    94e6:	   |   move.l d0,-(sp)
    94e8:	   |   move.l 20(sp),-(sp)
    94ec:	   |   jsr 95d6 <turnMeAngle>
    94f2:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    94f4:	/--|-- bra.s 953c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    94f6:	|  \-> move.l 4(sp),d0
    94fa:	|      neg.l d0
    94fc:	|      cmp.l 8(sp),d0
    9500:	|  /-- blt.s 951e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    9502:	|  |   movea.l 16(sp),a0
    9506:	|  |   move.l 80(a0),d0
    950a:	|  |   add.l 4(sp),d0
    950e:	|  |   move.l d0,-(sp)
    9510:	|  |   move.l 20(sp),-(sp)
    9514:	|  |   jsr 95d6 <turnMeAngle>
    951a:	|  |   addq.l #8,sp
}
    951c:	+--|-- bra.s 953c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    951e:	|  \-> movea.l 16(sp),a0
    9522:	|      move.l 84(a0),d0
    9526:	|      move.l d0,-(sp)
    9528:	|      move.l 20(sp),-(sp)
    952c:	|      jsr 95d6 <turnMeAngle>
    9532:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    9534:	|      movea.l 16(sp),a0
    9538:	|      clr.w 54(a0)
}
    953c:	\----> nop
    953e:	       move.l (sp)+,d2
    9540:	       addq.l #8,sp
    9542:	       rts

00009544 <stopPerson>:


BOOL stopPerson (int o) {
    9544:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    9546:	       move.l 8(sp),-(sp)
    954a:	       jsr 7e48 <findPerson>
    9550:	       addq.l #4,sp
    9552:	       move.l d0,(sp)
    if (moveMe)
    9554:	/----- beq.s 9592 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    9556:	|      movea.l (sp),a0
    9558:	|      move.l 56(a0),d0
    955c:	+----- beq.s 9592 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    955e:	|      movea.l (sp),a0
    9560:	|      move.l 56(a0),d0
    9564:	|      move.l d0,-(sp)
    9566:	|      jsr 24c8 <abortFunction>
    956c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    956e:	|      movea.l (sp),a0
    9570:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    9574:	|      movea.l (sp),a0
    9576:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    957a:	|      movea.l (sp),a0
    957c:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    9580:	|      clr.l -(sp)
    9582:	|      move.l 4(sp),-(sp)
    9586:	|      jsr 5c4e <setFrames>
    958c:	|      addq.l #8,sp
            return TRUE;
    958e:	|      moveq #1,d0
    9590:	|  /-- bra.s 9594 <stopPerson+0x50>
        }
    return FALSE;
    9592:	\--|-> clr.w d0
}
    9594:	   \-> addq.l #4,sp
    9596:	       rts

00009598 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    9598:	       subq.l #8,sp
	int total = 0;
    959a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    959e:	       clr.l (sp)
    95a0:	   /-- bra.s 95c2 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    95a2:	/--|-> movea.l 12(sp),a0
    95a6:	|  |   movea.l 4(a0),a0
    95aa:	|  |   move.l (sp),d1
    95ac:	|  |   move.l d1,d0
    95ae:	|  |   add.l d0,d0
    95b0:	|  |   add.l d1,d0
    95b2:	|  |   add.l d0,d0
    95b4:	|  |   add.l d0,d0
    95b6:	|  |   adda.l d0,a0
    95b8:	|  |   move.l 4(a0),d0
    95bc:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    95c0:	|  |   addq.l #1,(sp)
    95c2:	|  \-> movea.l 12(sp),a0
    95c6:	|      move.l 8(a0),d0
    95ca:	|      cmp.l (sp),d0
    95cc:	\----- bgt.s 95a2 <timeForAnim+0xa>
	}
	return total;
    95ce:	       move.l 4(sp),d0
}
    95d2:	       addq.l #8,sp
    95d4:	       rts

000095d6 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    95d6:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    95d8:	       movea.l 8(sp),a0
    95dc:	       movea.l 68(a0),a0
    95e0:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    95e4:	       movea.l 8(sp),a0
    95e8:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    95ee:	       move.l (sp),-(sp)
    95f0:	       pea b4 <_start+0xb4>
    95f4:	       jsr 147e2 <__divsi3>
    95fa:	       addq.l #8,sp
    95fc:	       move.l d0,d1
    95fe:	       addi.l #180,d1
    9604:	       movea.l 8(sp),a0
    9608:	       move.l 88(a0),d0
    960c:	       add.l d1,d0
    960e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    9612:	   /-- bra.s 961c <turnMeAngle+0x46>
    9614:	/--|-> addi.l #-360,12(sp)
    961c:	|  \-> cmpi.l #359,12(sp)
    9624:	\----- bgt.s 9614 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    9626:	       move.l (sp),-(sp)
    9628:	       move.l 16(sp),-(sp)
    962c:	       jsr 14764 <__mulsi3>
    9632:	       addq.l #8,sp
    9634:	       pea 168 <decodeFilename+0x50>
    9638:	       move.l d0,-(sp)
    963a:	       jsr 147e2 <__divsi3>
    9640:	       addq.l #8,sp
    9642:	       movea.l 8(sp),a0
    9646:	       move.l d0,94(a0)
}
    964a:	       nop
    964c:	       addq.l #4,sp
    964e:	       rts

00009650 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    9650:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9652:	          move.l 8(sp),-(sp)
    9656:	          jsr 7e48 <findPerson>
    965c:	          addq.l #4,sp
    965e:	          move.l d0,(sp)
    if (thisPerson) {
    9660:	/-------- beq.s 96c0 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    9662:	|         movea.l (sp),a0
    9664:	|         move.l 56(a0),d0
    9668:	|     /-- beq.s 967a <turnPersonToFace+0x2a>
    966a:	|     |   movea.l (sp),a0
    966c:	|     |   move.l 56(a0),d0
    9670:	|     |   move.l d0,-(sp)
    9672:	|     |   jsr 24c8 <abortFunction>
    9678:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    967a:	|     \-> movea.l (sp),a0
    967c:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    9680:	|         movea.l (sp),a0
    9682:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    9686:	|         movea.l (sp),a0
    9688:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    968c:	|         move.l 12(sp),-(sp)
    9690:	|         move.l 4(sp),-(sp)
    9694:	|         jsr 95d6 <turnMeAngle>
    969a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    969c:	|         movea.l 19144 <speech>,a0
    96a2:	|         move.l (a0),d0
    96a4:	|         cmp.l (sp),d0
    96a6:	|  /----- bne.s 96ac <turnPersonToFace+0x5c>
    96a8:	|  |      moveq #2,d0
    96aa:	|  |  /-- bra.s 96ae <turnPersonToFace+0x5e>
    96ac:	|  \--|-> moveq #0,d0
    96ae:	|     \-> move.l d0,-(sp)
    96b0:	|         move.l 4(sp),-(sp)
    96b4:	|         jsr 5c4e <setFrames>
    96ba:	|         addq.l #8,sp
        return TRUE;
    96bc:	|         moveq #1,d0
    96be:	|     /-- bra.s 96c2 <turnPersonToFace+0x72>
    }
    return FALSE;
    96c0:	\-----|-> clr.w d0
}
    96c2:	      \-> addq.l #4,sp
    96c4:	          rts

000096c6 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    96c6:	                lea -20(sp),sp
    96ca:	                move.l d3,-(sp)
    96cc:	                move.l d2,-(sp)
    96ce:	                move.l 36(sp),d0
    96d2:	                move.w d0,d0
    96d4:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    96d8:	                cmpi.w #-1,10(sp)
    96de:	/-------------- bne.s 96e6 <walkMe+0x20>
    96e0:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    96e6:	>-------------> movea.l 32(sp),a0
    96ea:	|               move.l 36(a0),d0
    96ee:	|               move.l d0,-(sp)
    96f0:	|               jsr 141e2 <__floatsisf>
    96f6:	|               addq.l #4,sp
    96f8:	|               move.l d0,d1
    96fa:	|               movea.l 32(sp),a0
    96fe:	|               move.l (a0),d0
    9700:	|               move.l d0,-(sp)
    9702:	|               move.l d1,-(sp)
    9704:	|               jsr 144d6 <__subsf3>
    970a:	|               addq.l #8,sp
    970c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    9710:	|               movea.l 32(sp),a0
    9714:	|               move.l 40(a0),d0
    9718:	|               move.l d0,-(sp)
    971a:	|               jsr 141e2 <__floatsisf>
    9720:	|               addq.l #4,sp
    9722:	|               move.l d0,d1
    9724:	|               movea.l 32(sp),a0
    9728:	|               move.l 4(a0),d0
    972c:	|               move.l d0,-(sp)
    972e:	|               move.l d1,-(sp)
    9730:	|               jsr 144d6 <__subsf3>
    9736:	|               addq.l #8,sp
    9738:	|               move.l d0,-(sp)
    973a:	|               move.l d0,-(sp)
    973c:	|               jsr 13f94 <__addsf3>
    9742:	|               addq.l #8,sp
    9744:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    9748:	|               movea.l 32(sp),a0
    974c:	|               move.l 20(a0),d2
    9750:	|               movea.l 32(sp),a0
    9754:	|               move.l 16(a0),d0
    9758:	|               move.l d0,-(sp)
    975a:	|               jsr 141e2 <__floatsisf>
    9760:	|               addq.l #4,sp
    9762:	|               move.l d0,-(sp)
    9764:	|               move.l d2,-(sp)
    9766:	|               jsr 14294 <__mulsf3>
    976c:	|               addq.l #8,sp
    976e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    9772:	|               move.l 24(sp),-(sp)
    9776:	|               jsr 140fa <__extendsfdf2>
    977c:	|               addq.l #4,sp
    977e:	|               move.l #-1717986918,-(sp)
    9784:	|               move.l #1070176665,-(sp)
    978a:	|               move.l d1,-(sp)
    978c:	|               move.l d0,-(sp)
    978e:	|               jsr 143ba <__ltdf2>
    9794:	|               lea 16(sp),sp
    9798:	|               tst.l d0
    979a:	|           /-- bge.s 97a4 <walkMe+0xde>
    979c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    97a4:	|           \-> move.l 20(sp),-(sp)
    97a8:	|               jsr 1417a <__fixsfsi>
    97ae:	|               addq.l #4,sp
    97b0:	|               move.l d0,-(sp)
    97b2:	|               jsr 6b0e <TF_abs>
    97b8:	|               addq.l #4,sp
    97ba:	|               move.l d0,d2
    97bc:	|               move.l 16(sp),-(sp)
    97c0:	|               jsr 1417a <__fixsfsi>
    97c6:	|               addq.l #4,sp
    97c8:	|               move.l d0,-(sp)
    97ca:	|               jsr 6b0e <TF_abs>
    97d0:	|               addq.l #4,sp
    97d2:	|               cmp.l d2,d0
    97d4:	|        /----- bgt.s 97f8 <walkMe+0x132>
    97d6:	|        |      move.l 20(sp),-(sp)
    97da:	|        |      jsr 1417a <__fixsfsi>
    97e0:	|        |      addq.l #4,sp
    97e2:	|        |      move.l d0,-(sp)
    97e4:	|        |      jsr 6b0e <TF_abs>
    97ea:	|        |      addq.l #4,sp
    97ec:	|        |      move.l d0,-(sp)
    97ee:	|        |      jsr 141e2 <__floatsisf>
    97f4:	|        |      addq.l #4,sp
    97f6:	|        |  /-- bra.s 9818 <walkMe+0x152>
    97f8:	|        \--|-> move.l 16(sp),-(sp)
    97fc:	|           |   jsr 1417a <__fixsfsi>
    9802:	|           |   addq.l #4,sp
    9804:	|           |   move.l d0,-(sp)
    9806:	|           |   jsr 6b0e <TF_abs>
    980c:	|           |   addq.l #4,sp
    980e:	|           |   move.l d0,-(sp)
    9810:	|           |   jsr 141e2 <__floatsisf>
    9816:	|           |   addq.l #4,sp
    9818:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    981c:	|               move.l 12(sp),-(sp)
    9820:	|               jsr 1417a <__fixsfsi>
    9826:	|               addq.l #4,sp
    9828:	|               move.l d0,-(sp)
    982a:	|               jsr 6b0e <TF_abs>
    9830:	|               addq.l #4,sp
    9832:	|               move.l d0,-(sp)
    9834:	|               jsr 141e2 <__floatsisf>
    983a:	|               addq.l #4,sp
    983c:	|               move.l d0,-(sp)
    983e:	|               move.l 28(sp),-(sp)
    9842:	|               jsr 14408 <__ltsf2>
    9848:	|               addq.l #8,sp
    984a:	|               tst.l d0
    984c:	|        /----- bge.w 98fe <walkMe+0x238>
			if (thisPerson->spinning) {
    9850:	|        |      movea.l 32(sp),a0
    9854:	|        |      move.w 54(a0),d0
    9858:	|        |  /-- beq.s 9876 <walkMe+0x1b0>
				spinStep(thisPerson);
    985a:	|        |  |   move.l 32(sp),-(sp)
    985e:	|        |  |   jsr 9466 <spinStep>
    9864:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    9866:	|        |  |   pea 1 <_start+0x1>
    986a:	|        |  |   move.l 36(sp),-(sp)
    986e:	|        |  |   jsr 5c4e <setFrames>
    9874:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    9876:	|        |  \-> move.l 24(sp),-(sp)
    987a:	|        |      move.l 16(sp),-(sp)
    987e:	|        |      jsr 1408e <__divsf3>
    9884:	|        |      addq.l #8,sp
    9886:	|        |      move.l d0,24(sp)
			if (move)
    988a:	|        |      tst.w 10(sp)
    988e:	|        |  /-- beq.s 98f8 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    9890:	|        |  |   movea.l 32(sp),a0
    9894:	|        |  |   move.l 4(a0),d2
    9898:	|        |  |   move.l 24(sp),d0
    989c:	|        |  |   move.l d0,-(sp)
    989e:	|        |  |   move.l d0,-(sp)
    98a0:	|        |  |   jsr 13f94 <__addsf3>
    98a6:	|        |  |   addq.l #8,sp
    98a8:	|        |  |   move.l d0,-(sp)
    98aa:	|        |  |   move.l 20(sp),-(sp)
    98ae:	|        |  |   jsr 1408e <__divsf3>
    98b4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    98b6:	|        |  |   move.l d0,-(sp)
    98b8:	|        |  |   move.l d2,-(sp)
    98ba:	|        |  |   jsr 13f94 <__addsf3>
    98c0:	|        |  |   addq.l #8,sp
    98c2:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    98c4:	|        |  |   movea.l 32(sp),a0
    98c8:	|        |  |   move.l (a0),d3
    98ca:	|        |  |   move.l 24(sp),-(sp)
    98ce:	|        |  |   move.l 24(sp),-(sp)
    98d2:	|        |  |   jsr 1408e <__divsf3>
    98d8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    98da:	|        |  |   move.l d0,-(sp)
    98dc:	|        |  |   move.l d3,-(sp)
    98de:	|        |  |   jsr 13f94 <__addsf3>
    98e4:	|        |  |   addq.l #8,sp
    98e6:	|        |  |   move.l d2,-(sp)
    98e8:	|        |  |   move.l d0,-(sp)
    98ea:	|        |  |   move.l 40(sp),-(sp)
    98ee:	|        |  |   jsr 8590 <moveAndScale>
    98f4:	|        |  |   lea 12(sp),sp
			return TRUE;
    98f8:	|        |  \-> moveq #1,d0
    98fa:	|  /-----|----- bra.w 99ac <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    98fe:	|  |     \----> movea.l 32(sp),a0
    9902:	|  |            move.l 44(a0),d0
    9906:	|  |            moveq #-1,d1
    9908:	|  |            cmp.l d0,d1
    990a:	|  |        /-- bne.s 9942 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    990c:	|  |        |   movea.l 32(sp),a0
    9910:	|  |        |   move.l 98(a0),d0
    9914:	|  |        |   moveq #-1,d1
    9916:	|  |        |   cmp.l d0,d1
    9918:	|  |  /-----|-- beq.s 9956 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    991a:	|  |  |     |   movea.l 32(sp),a0
    991e:	|  |  |     |   move.l 98(a0),d0
    9922:	|  |  |     |   movea.l 32(sp),a0
    9926:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    992a:	|  |  |     |   movea.l 32(sp),a0
    992e:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    9934:	|  |  |     |   move.l 32(sp),-(sp)
    9938:	|  |  |     |   jsr 9466 <spinStep>
    993e:	|  |  |     |   addq.l #4,sp
			}
			break;
    9940:	|  |  +-----|-- bra.s 9956 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    9942:	|  |  |     \-> move.l 32(sp),-(sp)
    9946:	|  |  |         jsr 723a <doBorderStuff>
    994c:	|  |  |         addq.l #4,sp
    994e:	|  |  |         tst.w d0
    9950:	|  |  |  /----- beq.s 995a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    9952:	\--|--|--|----- bra.w 96e6 <walkMe+0x20>
			break;
    9956:	   |  \--|----> nop
    9958:	   |     |  /-- bra.s 995c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    995a:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    995c:	   |        \-> movea.l 32(sp),a0
    9960:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    9964:	   |            clr.l -(sp)
    9966:	   |            move.l 36(sp),-(sp)
    996a:	   |            jsr 5c4e <setFrames>
    9970:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    9972:	   |            movea.l 32(sp),a0
    9976:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    997a:	   |            move.l d0,-(sp)
    997c:	   |            jsr 141e2 <__floatsisf>
    9982:	   |            addq.l #4,sp
    9984:	   |            move.l d0,d2
				 thisPerson->walkToX,
    9986:	   |            movea.l 32(sp),a0
    998a:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    998e:	   |            move.l d0,-(sp)
    9990:	   |            jsr 141e2 <__floatsisf>
    9996:	   |            addq.l #4,sp
    9998:	   |            move.l d2,-(sp)
    999a:	   |            move.l d0,-(sp)
    999c:	   |            move.l 40(sp),-(sp)
    99a0:	   |            jsr 8590 <moveAndScale>
    99a6:	   |            lea 12(sp),sp
	return FALSE;
    99aa:	   |            clr.w d0
}
    99ac:	   \----------> move.l (sp)+,d2
    99ae:	                move.l (sp)+,d3
    99b0:	                lea 20(sp),sp
    99b4:	                rts

000099b6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    99b6:	             lea -20(sp),sp
    99ba:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    99bc:	             move.l 191c8 <allLoadedBanks>,20(sp)
	while (returnMe) {
    99c4:	      /----- bra.s 99e4 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    99c6:	   /--|----> movea.l 20(sp),a0
    99ca:	   |  |      move.l (a0),d0
    99cc:	   |  |      cmp.l 28(sp),d0
    99d0:	   |  |  /-- bne.s 99da <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    99d2:	   |  |  |   move.l 20(sp),d0
    99d6:	/--|--|--|-- bra.w 9a96 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    99da:	|  |  |  \-> movea.l 20(sp),a0
    99de:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    99e4:	|  |  \----> tst.l 20(sp)
    99e8:	|  \-------- bne.s 99c6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    99ea:	|            moveq #26,d0
    99ec:	|            move.l d0,16(sp)
    99f0:	|            clr.l 12(sp)
    99f4:	|            move.l 190e8 <SysBase>,d0
    99fa:	|            movea.l d0,a6
    99fc:	|            move.l 16(sp),d0
    9a00:	|            move.l 12(sp),d1
    9a04:	|            jsr -684(a6)
    9a08:	|            move.l d0,8(sp)
    9a0c:	|            move.l 8(sp),d0
    9a10:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    9a14:	|     /----- beq.s 9a94 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    9a16:	|     |      movea.l 20(sp),a0
    9a1a:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    9a1e:	|     |      move.l 20(sp),d0
    9a22:	|     |      addq.l #8,d0
    9a24:	|     |      clr.l -(sp)
    9a26:	|     |      move.l d0,-(sp)
    9a28:	|     |      move.l 36(sp),-(sp)
    9a2c:	|     |      jsr 6754 <loadSpriteBank>
    9a32:	|     |      lea 12(sp),sp
    9a36:	|     |      tst.w d0
    9a38:	|     |  /-- beq.s 9a6c <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    9a3a:	|     |  |   movea.l 20(sp),a0
    9a3e:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    9a42:	|     |  |   move.l 191c8 <allLoadedBanks>,d0
    9a48:	|     |  |   movea.l 20(sp),a0
    9a4c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    9a50:	|     |  |   move.l 20(sp),191c8 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    9a58:	|     |  |   pea 15a2b <custom.c.177df80b+0xd52>
    9a5e:	|     |  |   jsr 13da6 <KPrintF>
    9a64:	|     |  |   addq.l #4,sp
			return returnMe;
    9a66:	|     |  |   move.l 20(sp),d0
    9a6a:	+-----|--|-- bra.s 9a96 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    9a6c:	|     |  \-> pea 15a58 <custom.c.177df80b+0xd7f>
    9a72:	|     |      jsr 13da6 <KPrintF>
    9a78:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    9a7a:	|     |      move.l 20(sp),4(sp)
    9a80:	|     |      move.l 190e8 <SysBase>,d0
    9a86:	|     |      movea.l d0,a6
    9a88:	|     |      movea.l 4(sp),a1
    9a8c:	|     |      jsr -690(a6)
			return NULL;
    9a90:	|     |      moveq #0,d0
    9a92:	+-----|----- bra.s 9a96 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    9a94:	|     \----> moveq #0,d0
}
    9a96:	\----------> movea.l (sp)+,a6
    9a98:	             lea 20(sp),sp
    9a9c:	             rts

00009a9e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    9a9e:	       subq.l #8,sp
    9aa0:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    9aa2:	   /-- bra.s 9ad2 <clearStackLib+0x34>
		k = stackLib;
    9aa4:	/--|-> move.l 191d0 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    9aac:	|  |   movea.l 191d0 <stackLib>,a0
    9ab2:	|  |   move.l 4(a0),d0
    9ab6:	|  |   move.l d0,191d0 <stackLib>
		FreeVec(k);
    9abc:	|  |   move.l 8(sp),4(sp)
    9ac2:	|  |   move.l 190e8 <SysBase>,d0
    9ac8:	|  |   movea.l d0,a6
    9aca:	|  |   movea.l 4(sp),a1
    9ace:	|  |   jsr -690(a6)
	while (stackLib) {
    9ad2:	|  \-> move.l 191d0 <stackLib>,d0
    9ad8:	\----- bne.s 9aa4 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    9ada:	       clr.l 191cc <stackLibTotal>
}
    9ae0:	       nop
    9ae2:	       movea.l (sp)+,a6
    9ae4:	       addq.l #8,sp
    9ae6:	       rts

00009ae8 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    9ae8:	          lea -128(sp),sp
    9aec:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    9af0:	      /-- bra.s 9b02 <loadGame+0x1a>
    9af2:	   /--|-> move.l 19080 <allRunningFunctions>,d0
    9af8:	   |  |   move.l d0,-(sp)
    9afa:	   |  |   jsr 34e2 <finishFunction>
    9b00:	   |  |   addq.l #4,sp
    9b02:	   |  \-> move.l 19080 <allRunningFunctions>,d0
    9b08:	   \----- bne.s 9af2 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    9b0a:	          pea 191d4 <ssgVersion>
    9b10:	          pea 15ab6 <custom.c.177df80b+0xddd>
    9b16:	          pea 41 <_start+0x41>
    9b1a:	          pea 53 <_start+0x53>
    9b1e:	          move.l 160(sp),-(sp)
    9b22:	          jsr 400a <openAndVerify>
    9b28:	          lea 20(sp),sp
    9b2c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    9b30:	      /-- bne.s 9b38 <loadGame+0x50>
    9b32:	      |   clr.w d0
    9b34:	/-----|-- bra.w 9dde <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    9b38:	|     \-> move.l 112(sp),108(sp)
    9b3e:	|         lea 140(sp),a0
    9b42:	|         lea -126(a0),a0
    9b46:	|         move.l a0,120(sp)
    9b4a:	|         moveq #8,d0
    9b4c:	|         move.l d0,116(sp)
    9b50:	|         move.l 190f0 <DOSBase>,d0
    9b56:	|         movea.l d0,a6
    9b58:	|         move.l 108(sp),d1
    9b5c:	|         move.l 120(sp),d2
    9b60:	|         move.l 116(sp),d3
    9b64:	|         jsr -42(a6)
    9b68:	|         move.l d0,132(sp)
    9b6c:	|         move.l 132(sp),d0
    9b70:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    9b74:	|         moveq #8,d0
    9b76:	|         cmp.l 128(sp),d0
    9b7a:	|     /-- beq.s 9b8a <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    9b7c:	|     |   pea 15ad7 <custom.c.177df80b+0xdfe>
    9b82:	|     |   jsr 13da6 <KPrintF>
    9b88:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9b8a:	|     \-> move.l 14(sp),d1
    9b8e:	|         move.l 1908a <fileTime>,d0
    9b94:	|         cmp.l d1,d0
    9b96:	|     /-- bne.s 9ba6 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    9b98:	|     |   move.l 18(sp),d1
    9b9c:	|     |   move.l 1908e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9ba2:	|     |   cmp.l d1,d0
    9ba4:	|  /--|-- beq.s 9bc6 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    9ba6:	|  |  \-> move.l 144(sp),-(sp)
    9baa:	|  |      pea 15af3 <custom.c.177df80b+0xe1a>
    9bb0:	|  |      pea 15bba <custom.c.177df80b+0xee1>
    9bb6:	|  |      jsr 13da6 <KPrintF>
    9bbc:	|  |      lea 12(sp),sp
		return FALSE; 
    9bc0:	|  |      clr.w d0
    9bc2:	+--|----- bra.w 9dde <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    9bc6:	|  \----> move.l 112(sp),124(sp)
    9bcc:	|         move.l 190f0 <DOSBase>,d0
    9bd2:	|         movea.l d0,a6
    9bd4:	|         move.l 124(sp),d1
    9bd8:	|         jsr -306(a6)
    9bdc:	|         move.l d0,136(sp)
    9be0:	|         move.l 136(sp),d0
    9be4:	|         move.l d0,d0
    9be6:	|         move.w d0,1895e <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    9bec:	|         move.l 112(sp),100(sp)
    9bf2:	|         move.l 190f0 <DOSBase>,d0
    9bf8:	|         movea.l d0,a6
    9bfa:	|         move.l 100(sp),d1
    9bfe:	|         jsr -306(a6)
    9c02:	|         move.l d0,96(sp)
    9c06:	|         move.l 96(sp),d0
    9c0a:	|         move.l d0,d0
    9c0c:	|         move.w d0,19088 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    9c12:	|         move.l 112(sp),92(sp)
    9c18:	|         move.l 190f0 <DOSBase>,d0
    9c1e:	|         movea.l d0,a6
    9c20:	|         move.l 92(sp),d1
    9c24:	|         jsr -306(a6)
    9c28:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    9c2c:	|         move.l 112(sp),84(sp)
    9c32:	|         move.l 190f0 <DOSBase>,d0
    9c38:	|         movea.l d0,a6
    9c3a:	|         move.l 84(sp),d1
    9c3e:	|         jsr -306(a6)
    9c42:	|         move.l d0,80(sp)
    9c46:	|         move.l 80(sp),d0
    9c4a:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    9c4e:	|     /-- beq.s 9c82 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    9c50:	|     |   move.l 112(sp),-(sp)
    9c54:	|     |   jsr 6bc <get2bytes>
    9c5a:	|     |   addq.l #4,sp
    9c5c:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    9c60:	|     |   move.l 112(sp),-(sp)
    9c64:	|     |   jsr 6bc <get2bytes>
    9c6a:	|     |   addq.l #4,sp
    9c6c:	|     |   move.l d0,19230 <fontHeight>
		charOrder = readString(fp);		
    9c72:	|     |   move.l 112(sp),-(sp)
    9c76:	|     |   jsr b02 <readString>
    9c7c:	|     |   addq.l #4,sp
    9c7e:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    9c82:	|     \-> move.l 104(sp),70(sp)
    9c88:	|         move.l 190e8 <SysBase>,d0
    9c8e:	|         movea.l d0,a6
    9c90:	|         movea.l 70(sp),a1
    9c94:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    9c98:	|         move.l 112(sp),-(sp)
    9c9c:	|         jsr 854 <getSigned>
    9ca2:	|         addq.l #4,sp
    9ca4:	|         move.w d0,19006 <fontSpace>

	killAllPeople ();
    9caa:	|         jsr 8232 <killAllPeople>
	killAllRegions ();
    9cb0:	|         jsr 12856 <killAllRegions>

	int camerX = get2bytes (fp);
    9cb6:	|         move.l 112(sp),-(sp)
    9cba:	|         jsr 6bc <get2bytes>
    9cc0:	|         addq.l #4,sp
    9cc2:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    9cc6:	|         move.l 112(sp),-(sp)
    9cca:	|         jsr 6bc <get2bytes>
    9cd0:	|         addq.l #4,sp
    9cd2:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    9cd6:	|         move.l 112(sp),-(sp)
    9cda:	|         jsr 7d8 <getFloat>
    9ce0:	|         addq.l #4,sp
    9ce2:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    9ce6:	|         move.l 112(sp),54(sp)
    9cec:	|         move.l 190f0 <DOSBase>,d0
    9cf2:	|         movea.l d0,a6
    9cf4:	|         move.l 54(sp),d1
    9cf8:	|         jsr -306(a6)
    9cfc:	|         move.l d0,50(sp)
    9d00:	|         move.l 50(sp),d0
    9d04:	|         move.l d0,d0
    9d06:	|         move.b d0,18a78 <brightnessLevel>

	loadHandlers (fp);
    9d0c:	|         move.l 112(sp),-(sp)
    9d10:	|         jsr 3f6a <loadHandlers>
    9d16:	|         addq.l #4,sp
	loadRegions (fp);
    9d18:	|         move.l 112(sp),-(sp)
    9d1c:	|         jsr 128b2 <loadRegions>
    9d22:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    9d24:	|         moveq #12,d0
    9d26:	|         move.l d0,46(sp)
    9d2a:	|         clr.l 42(sp)
    9d2e:	|         move.l 190e8 <SysBase>,d0
    9d34:	|         movea.l d0,a6
    9d36:	|         move.l 46(sp),d0
    9d3a:	|         move.l 42(sp),d1
    9d3e:	|         jsr -684(a6)
    9d42:	|         move.l d0,38(sp)
    9d46:	|         move.l 38(sp),d0
    9d4a:	|         move.l d0,19008 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    9d50:	|         move.l 19008 <mouseCursorAnim>,d0
    9d56:	|     /-- bne.s 9d6a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    9d58:	|     |   pea 15bc4 <custom.c.177df80b+0xeeb>
    9d5e:	|     |   jsr 13da6 <KPrintF>
    9d64:	|     |   addq.l #4,sp
		return FALSE;
    9d66:	|     |   clr.w d0
    9d68:	+-----|-- bra.s 9dde <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    9d6a:	|     \-> jsr aa3a <nosnapshot>
	if (FGetC (fp)) {
    9d70:	|         move.l 112(sp),34(sp)
    9d76:	|         move.l 190f0 <DOSBase>,d0
    9d7c:	|         movea.l d0,a6
    9d7e:	|         move.l 34(sp),d1
    9d82:	|         jsr -306(a6)
    9d86:	|         move.l d0,30(sp)
    9d8a:	|         move.l 30(sp),d0
    9d8e:	|     /-- beq.s 9da4 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    9d90:	|     |   move.l 112(sp),-(sp)
    9d94:	|     |   jsr aaae <restoreSnapshot>
    9d9a:	|     |   addq.l #4,sp
    9d9c:	|     |   tst.w d0
    9d9e:	|     +-- bne.s 9da4 <loadGame+0x2bc>
    9da0:	|     |   clr.w d0
    9da2:	+-----|-- bra.s 9dde <loadGame+0x2f6>
	}

	Close (fp);
    9da4:	|     \-> move.l 112(sp),26(sp)
    9daa:	|         move.l 190f0 <DOSBase>,d0
    9db0:	|         movea.l d0,a6
    9db2:	|         move.l 26(sp),d1
    9db6:	|         jsr -36(a6)
    9dba:	|         move.l d0,22(sp)
	clearStackLib ();
    9dbe:	|         jsr 9a9e <clearStackLib>

	cameraX = camerX;
    9dc4:	|         move.l 66(sp),191f6 <cameraX>
	cameraY = camerY;
    9dcc:	|         move.l 62(sp),191fa <cameraY>
	cameraZoom = camerZ;
    9dd4:	|         move.l 58(sp),18aa0 <cameraZoom>

	return TRUE;
    9ddc:	|         moveq #1,d0
}
    9dde:	\-------> movem.l (sp)+,d2-d3/a6
    9de2:	          lea 128(sp),sp
    9de6:	          rts

00009de8 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    9de8:	   /-> lea -64(sp),sp
    9dec:	   |   move.l a6,-(sp)
    9dee:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    9df0:	   |   movea.l 76(sp),a0
    9df4:	   |   move.l (a0),d0
    9df6:	   |   move.l 80(sp),-(sp)
    9dfa:	   |   move.l d0,-(sp)
    9dfc:	   |   jsr 8d0 <put2bytes>
    9e02:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    9e04:	   |   movea.l 76(sp),a0
    9e08:	   |   move.l 40(a0),d0
    9e0c:	/--|-- beq.s 9e48 <saveFunction+0x60>
		FPutC (fp, 1);
    9e0e:	|  |   move.l 80(sp),52(sp)
    9e14:	|  |   moveq #1,d0
    9e16:	|  |   move.l d0,48(sp)
    9e1a:	|  |   move.l 190f0 <DOSBase>,d0
    9e20:	|  |   movea.l d0,a6
    9e22:	|  |   move.l 52(sp),d1
    9e26:	|  |   move.l 48(sp),d2
    9e2a:	|  |   jsr -312(a6)
    9e2e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    9e32:	|  |   movea.l 76(sp),a0
    9e36:	|  |   move.l 40(a0),d0
    9e3a:	|  |   move.l 80(sp),-(sp)
    9e3e:	|  |   move.l d0,-(sp)
    9e40:	|  \-- jsr 9de8 <saveFunction>(pc)
    9e44:	|      addq.l #8,sp
    9e46:	|  /-- bra.s 9e6a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    9e48:	\--|-> move.l 80(sp),64(sp)
    9e4e:	   |   clr.l 60(sp)
    9e52:	   |   move.l 190f0 <DOSBase>,d0
    9e58:	   |   movea.l d0,a6
    9e5a:	   |   move.l 64(sp),d1
    9e5e:	   |   move.l 60(sp),d2
    9e62:	   |   jsr -312(a6)
    9e66:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    9e6a:	   \-> movea.l 76(sp),a0
    9e6e:	       move.l 12(a0),d0
    9e72:	       move.l 80(sp),-(sp)
    9e76:	       move.l d0,-(sp)
    9e78:	       jsr 958 <put4bytes>
    9e7e:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    9e80:	       movea.l 76(sp),a0
    9e84:	       move.l 36(a0),d0
    9e88:	       move.l 80(sp),-(sp)
    9e8c:	       move.l d0,-(sp)
    9e8e:	       jsr 8d0 <put2bytes>
    9e94:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    9e96:	       move.l 80(sp),40(sp)
    9e9c:	       movea.l 76(sp),a0
    9ea0:	       move.w 54(a0),d0
    9ea4:	       movea.w d0,a0
    9ea6:	       move.l a0,36(sp)
    9eaa:	       move.l 190f0 <DOSBase>,d0
    9eb0:	       movea.l d0,a6
    9eb2:	       move.l 40(sp),d1
    9eb6:	       move.l 36(sp),d2
    9eba:	       jsr -312(a6)
    9ebe:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    9ec2:	       move.l 80(sp),28(sp)
    9ec8:	       movea.l 76(sp),a0
    9ecc:	       move.w 48(a0),d0
    9ed0:	       movea.w d0,a0
    9ed2:	       move.l a0,24(sp)
    9ed6:	       move.l 190f0 <DOSBase>,d0
    9edc:	       movea.l d0,a6
    9ede:	       move.l 28(sp),d1
    9ee2:	       move.l 24(sp),d2
    9ee6:	       jsr -312(a6)
    9eea:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    9eee:	       move.l 80(sp),16(sp)
    9ef4:	       movea.l 76(sp),a0
    9ef8:	       move.w 50(a0),d0
    9efc:	       movea.w d0,a0
    9efe:	       move.l a0,12(sp)
    9f02:	       move.l 190f0 <DOSBase>,d0
    9f08:	       movea.l d0,a6
    9f0a:	       move.l 16(sp),d1
    9f0e:	       move.l 12(sp),d2
    9f12:	       jsr -312(a6)
    9f16:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    9f1a:	       moveq #28,d0
    9f1c:	       add.l 76(sp),d0
    9f20:	       move.l 80(sp),-(sp)
    9f24:	       move.l d0,-(sp)
    9f26:	       jsr a6a4 <saveVariable>
    9f2c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    9f2e:	       movea.l 76(sp),a0
    9f32:	       move.b 56(a0),d0
    9f36:	   /-- beq.s 9f46 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    9f38:	   |   pea 15be5 <custom.c.177df80b+0xf0c>
    9f3e:	   |   jsr 13da6 <KPrintF>
    9f44:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    9f46:	   \-> movea.l 76(sp),a0
    9f4a:	       move.l 24(a0),d0
    9f4e:	       move.l 80(sp),-(sp)
    9f52:	       move.l d0,-(sp)
    9f54:	       jsr a518 <saveStack>
    9f5a:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9f5c:	       clr.l 68(sp)
    9f60:	   /-- bra.s 9f84 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    9f62:	/--|-> movea.l 76(sp),a0
    9f66:	|  |   move.l 20(a0),d1
    9f6a:	|  |   move.l 68(sp),d0
    9f6e:	|  |   lsl.l #3,d0
    9f70:	|  |   add.l d1,d0
    9f72:	|  |   move.l 80(sp),-(sp)
    9f76:	|  |   move.l d0,-(sp)
    9f78:	|  |   jsr a6a4 <saveVariable>
    9f7e:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9f80:	|  |   addq.l #1,68(sp)
    9f84:	|  \-> movea.l 76(sp),a0
    9f88:	|      move.l 8(a0),d0
    9f8c:	|      cmp.l 68(sp),d0
    9f90:	\----- bgt.s 9f62 <saveFunction+0x17a>
	}
}
    9f92:	       nop
    9f94:	       nop
    9f96:	       move.l (sp)+,d2
    9f98:	       movea.l (sp)+,a6
    9f9a:	       lea 64(sp),sp
    9f9e:	       rts

00009fa0 <saveGame>:

BOOL saveGame (char * fname) {
    9fa0:	          lea -272(sp),sp
    9fa4:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    9fa8:	          move.l 288(sp),268(sp)
    9fae:	          move.l #1006,264(sp)
    9fb6:	          move.l 190f0 <DOSBase>,d0
    9fbc:	          movea.l d0,a6
    9fbe:	          move.l 268(sp),d1
    9fc2:	          move.l 264(sp),d2
    9fc6:	          jsr -30(a6)
    9fca:	          move.l d0,260(sp)
    9fce:	          move.l 260(sp),d0
    9fd2:	          move.l d0,256(sp)
	if (fp == NULL) {
    9fd6:	      /-- bne.s 9fec <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    9fd8:	      |   pea 15c07 <custom.c.177df80b+0xf2e>
    9fde:	      |   jsr 13da6 <KPrintF>
    9fe4:	      |   addq.l #4,sp
		return FALSE;
    9fe6:	      |   clr.w d0
    9fe8:	/-----|-- bra.w a50e <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    9fec:	|     \-> move.l 256(sp),252(sp)
    9ff2:	|         move.l #89124,248(sp)
    9ffa:	|         moveq #6,d0
    9ffc:	|         move.l d0,244(sp)
    a000:	|         move.l 190f0 <DOSBase>,d0
    a006:	|         movea.l d0,a6
    a008:	|         move.l 252(sp),d1
    a00c:	|         move.l 248(sp),d2
    a010:	|         move.l 244(sp),d3
    a014:	|         jsr -48(a6)
    a018:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    a01c:	|         move.l 256(sp),236(sp)
    a022:	|         clr.l 232(sp)
    a026:	|         move.l 190f0 <DOSBase>,d0
    a02c:	|         movea.l d0,a6
    a02e:	|         move.l 236(sp),d1
    a032:	|         move.l 232(sp),d2
    a036:	|         jsr -312(a6)
    a03a:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    a03e:	|         move.l 256(sp),224(sp)
    a044:	|         clr.l 220(sp)
    a048:	|         move.l 190f0 <DOSBase>,d0
    a04e:	|         movea.l d0,a6
    a050:	|         move.l 224(sp),d1
    a054:	|         move.l 220(sp),d2
    a058:	|         jsr -312(a6)
    a05c:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    a060:	|         move.l 256(sp),212(sp)
    a066:	|         moveq #2,d0
    a068:	|         move.l d0,208(sp)
    a06c:	|         move.l 190f0 <DOSBase>,d0
    a072:	|         movea.l d0,a6
    a074:	|         move.l 212(sp),d1
    a078:	|         move.l 208(sp),d2
    a07c:	|         jsr -312(a6)
    a080:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    a084:	|         move.l 256(sp),200(sp)
    a08a:	|         moveq #2,d0
    a08c:	|         move.l d0,196(sp)
    a090:	|         move.l 190f0 <DOSBase>,d0
    a096:	|         movea.l d0,a6
    a098:	|         move.l 200(sp),d1
    a09c:	|         move.l 196(sp),d2
    a0a0:	|         jsr -312(a6)
    a0a4:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    a0a8:	|         move.l 256(sp),188(sp)
    a0ae:	|         move.l #102538,184(sp)
    a0b6:	|         moveq #8,d0
    a0b8:	|         move.l d0,180(sp)
    a0bc:	|         move.l 190f0 <DOSBase>,d0
    a0c2:	|         movea.l d0,a6
    a0c4:	|         move.l 188(sp),d1
    a0c8:	|         move.l 184(sp),d2
    a0cc:	|         move.l 180(sp),d3
    a0d0:	|         jsr -48(a6)
    a0d4:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    a0d8:	|         move.l 256(sp),172(sp)
    a0de:	|         move.w 1895e <allowAnyFilename>,d0
    a0e4:	|         movea.w d0,a0
    a0e6:	|         move.l a0,168(sp)
    a0ea:	|         move.l 190f0 <DOSBase>,d0
    a0f0:	|         movea.l d0,a6
    a0f2:	|         move.l 172(sp),d1
    a0f6:	|         move.l 168(sp),d2
    a0fa:	|         jsr -312(a6)
    a0fe:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    a102:	|         move.l 256(sp),160(sp)
    a108:	|         move.w 19088 <captureAllKeys>,d0
    a10e:	|         movea.w d0,a0
    a110:	|         move.l a0,156(sp)
    a114:	|         move.l 190f0 <DOSBase>,d0
    a11a:	|         movea.l d0,a6
    a11c:	|         move.l 160(sp),d1
    a120:	|         move.l 156(sp),d2
    a124:	|         jsr -312(a6)
    a128:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    a12c:	|         move.l 256(sp),148(sp)
    a132:	|         moveq #1,d0
    a134:	|         move.l d0,144(sp)
    a138:	|         move.l 190f0 <DOSBase>,d0
    a13e:	|         movea.l d0,a6
    a140:	|         move.l 148(sp),d1
    a144:	|         move.l 144(sp),d2
    a148:	|         jsr -312(a6)
    a14c:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    a150:	|         move.l 256(sp),136(sp)
    a156:	|         move.l 1923c <fontTableSize>,d0
    a15c:	|         sgt d0
    a15e:	|         neg.b d0
    a160:	|         move.b d0,d0
    a162:	|         andi.l #255,d0
    a168:	|         move.l d0,132(sp)
    a16c:	|         move.l 190f0 <DOSBase>,d0
    a172:	|         movea.l d0,a6
    a174:	|         move.l 136(sp),d1
    a178:	|         move.l 132(sp),d2
    a17c:	|         jsr -312(a6)
    a180:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    a184:	|         move.l 1923c <fontTableSize>,d0
    a18a:	|     /-- ble.s a1c8 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    a18c:	|     |   move.l 19234 <loadedFontNum>,d0
    a192:	|     |   move.l 256(sp),-(sp)
    a196:	|     |   move.l d0,-(sp)
    a198:	|     |   jsr 8d0 <put2bytes>
    a19e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    a1a0:	|     |   move.l 19230 <fontHeight>,d0
    a1a6:	|     |   move.l 256(sp),-(sp)
    a1aa:	|     |   move.l d0,-(sp)
    a1ac:	|     |   jsr 8d0 <put2bytes>
    a1b2:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    a1b4:	|     |   move.l 19238 <fontOrderString>,d0
    a1ba:	|     |   move.l 256(sp),-(sp)
    a1be:	|     |   move.l d0,-(sp)
    a1c0:	|     |   jsr bd8 <writeString>
    a1c6:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    a1c8:	|     \-> move.w 19006 <fontSpace>,d0
    a1ce:	|         movea.w d0,a0
    a1d0:	|         move.l 256(sp),-(sp)
    a1d4:	|         move.l a0,-(sp)
    a1d6:	|         jsr a9c <putSigned>
    a1dc:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    a1de:	|         move.l 191f6 <cameraX>,d0
    a1e4:	|         move.l 256(sp),-(sp)
    a1e8:	|         move.l d0,-(sp)
    a1ea:	|         jsr 8d0 <put2bytes>
    a1f0:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    a1f2:	|         move.l 191fa <cameraY>,d0
    a1f8:	|         move.l 256(sp),-(sp)
    a1fc:	|         move.l d0,-(sp)
    a1fe:	|         jsr 8d0 <put2bytes>
    a204:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    a206:	|         move.l 18aa0 <cameraZoom>,d0
    a20c:	|         move.l 256(sp),-(sp)
    a210:	|         move.l d0,-(sp)
    a212:	|         jsr a46 <putFloat>
    a218:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    a21a:	|         move.l 256(sp),124(sp)
    a220:	|         move.b 18a78 <brightnessLevel>,d0
    a226:	|         move.b d0,d0
    a228:	|         andi.l #255,d0
    a22e:	|         move.l d0,120(sp)
    a232:	|         move.l 190f0 <DOSBase>,d0
    a238:	|         movea.l d0,a6
    a23a:	|         move.l 124(sp),d1
    a23e:	|         move.l 120(sp),d2
    a242:	|         jsr -312(a6)
    a246:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    a24a:	|         move.l 256(sp),-(sp)
    a24e:	|         jsr 44ee <saveHandlers>
    a254:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    a256:	|         move.l 256(sp),-(sp)
    a25a:	|         jsr 12a6c <saveRegions>
    a260:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    a262:	|         move.l 19008 <mouseCursorAnim>,d0
    a268:	|         move.l 256(sp),-(sp)
    a26c:	|         move.l d0,-(sp)
    a26e:	|         jsr 8760 <saveAnim>
    a274:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    a276:	|         move.l 1900c <mouseCursorFrameNum>,d0
    a27c:	|         move.l 256(sp),-(sp)
    a280:	|         move.l d0,-(sp)
    a282:	|         jsr 8d0 <put2bytes>
    a288:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    a28a:	|         move.l 19080 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    a292:	|         clr.l 272(sp)
	while (thisFunction) {
    a296:	|     /-- bra.s a2a6 <saveGame+0x306>
		countFunctions ++;
    a298:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    a29c:	|  |  |   movea.l 276(sp),a0
    a2a0:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a2a6:	|  |  \-> tst.l 276(sp)
    a2aa:	|  \----- bne.s a298 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    a2ac:	|         move.l 256(sp),-(sp)
    a2b0:	|         move.l 276(sp),-(sp)
    a2b4:	|         jsr 8d0 <put2bytes>
    a2ba:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    a2bc:	|         move.l 19080 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    a2c4:	|     /-- bra.s a2e0 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    a2c6:	|  /--|-> move.l 256(sp),-(sp)
    a2ca:	|  |  |   move.l 280(sp),-(sp)
    a2ce:	|  |  |   jsr 9de8 <saveFunction>
    a2d4:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    a2d6:	|  |  |   movea.l 276(sp),a0
    a2da:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a2e0:	|  |  \-> tst.l 276(sp)
    a2e4:	|  \----- bne.s a2c6 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    a2e6:	|         clr.l 280(sp)
    a2ea:	|     /-- bra.s a30c <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    a2ec:	|  /--|-> move.l 19096 <globalVars>,d1
    a2f2:	|  |  |   move.l 280(sp),d0
    a2f6:	|  |  |   lsl.l #3,d0
    a2f8:	|  |  |   add.l d1,d0
    a2fa:	|  |  |   move.l 256(sp),-(sp)
    a2fe:	|  |  |   move.l d0,-(sp)
    a300:	|  |  |   jsr a6a4 <saveVariable>
    a306:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    a308:	|  |  |   addq.l #1,280(sp)
    a30c:	|  |  \-> move.l 190c0 <numGlobals>,d0
    a312:	|  |      cmp.l 280(sp),d0
    a316:	|  \----- bgt.s a2ec <saveGame+0x34c>
	}

	savePeople (fp);
    a318:	|         move.l 256(sp),-(sp)
    a31c:	|         jsr 8888 <savePeople>
    a322:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    a324:	|         movea.l 19248 <currentFloor>,a0
    a32a:	|         move.l 8(a0),d0
    a32e:	|  /----- beq.s a36c <saveGame+0x3cc>
		FPutC (fp, 1);
    a330:	|  |      move.l 256(sp),100(sp)
    a336:	|  |      moveq #1,d0
    a338:	|  |      move.l d0,96(sp)
    a33c:	|  |      move.l 190f0 <DOSBase>,d0
    a342:	|  |      movea.l d0,a6
    a344:	|  |      move.l 100(sp),d1
    a348:	|  |      move.l 96(sp),d2
    a34c:	|  |      jsr -312(a6)
    a350:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    a354:	|  |      movea.l 19248 <currentFloor>,a0
    a35a:	|  |      move.l (a0),d0
    a35c:	|  |      move.l 256(sp),-(sp)
    a360:	|  |      move.l d0,-(sp)
    a362:	|  |      jsr 8d0 <put2bytes>
    a368:	|  |      addq.l #8,sp
    a36a:	|  |  /-- bra.s a38e <saveGame+0x3ee>
	} else FPutC (fp, 0);
    a36c:	|  \--|-> move.l 256(sp),112(sp)
    a372:	|     |   clr.l 108(sp)
    a376:	|     |   move.l 190f0 <DOSBase>,d0
    a37c:	|     |   movea.l d0,a6
    a37e:	|     |   move.l 112(sp),d1
    a382:	|     |   move.l 108(sp),d2
    a386:	|     |   jsr -312(a6)
    a38a:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    a38e:	|     \-> move.l 19198 <zBuffer+0x50>,d0
    a394:	|  /----- beq.s a3d0 <saveGame+0x430>
		FPutC (fp, 1);
    a396:	|  |      move.l 256(sp),76(sp)
    a39c:	|  |      moveq #1,d0
    a39e:	|  |      move.l d0,72(sp)
    a3a2:	|  |      move.l 190f0 <DOSBase>,d0
    a3a8:	|  |      movea.l d0,a6
    a3aa:	|  |      move.l 76(sp),d1
    a3ae:	|  |      move.l 72(sp),d2
    a3b2:	|  |      jsr -312(a6)
    a3b6:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    a3ba:	|  |      move.l 19194 <zBuffer+0x4c>,d0
    a3c0:	|  |      move.l 256(sp),-(sp)
    a3c4:	|  |      move.l d0,-(sp)
    a3c6:	|  |      jsr 8d0 <put2bytes>
    a3cc:	|  |      addq.l #8,sp
    a3ce:	|  |  /-- bra.s a3f2 <saveGame+0x452>
	} else FPutC (fp,0);
    a3d0:	|  \--|-> move.l 256(sp),88(sp)
    a3d6:	|     |   clr.l 84(sp)
    a3da:	|     |   move.l 190f0 <DOSBase>,d0
    a3e0:	|     |   movea.l d0,a6
    a3e2:	|     |   move.l 88(sp),d1
    a3e6:	|     |   move.l 84(sp),d2
    a3ea:	|     |   jsr -312(a6)
    a3ee:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    a3f2:	|     \-> move.l 256(sp),64(sp)
    a3f8:	|         move.l 1920a <speechMode>,60(sp)
    a400:	|         move.l 190f0 <DOSBase>,d0
    a406:	|         movea.l d0,a6
    a408:	|         move.l 64(sp),d1
    a40c:	|         move.l 60(sp),d2
    a410:	|         jsr -312(a6)
    a414:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    a418:	|         move.b 18fdc <fadeMode>,d0
    a41e:	|         move.b d0,d0
    a420:	|         andi.l #255,d0
    a426:	|         move.l d0,52(sp)
    a42a:	|         move.l 256(sp),48(sp)
    a430:	|         move.l 190f0 <DOSBase>,d0
    a436:	|         movea.l d0,a6
    a438:	|         move.l 52(sp),d1
    a43c:	|         move.l 48(sp),d2
    a440:	|         jsr -312(a6)
    a444:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    a448:	|         move.l 19144 <speech>,d0
    a44e:	|         move.l 256(sp),-(sp)
    a452:	|         move.l d0,-(sp)
    a454:	|         jsr 5b02 <saveSpeech>
    a45a:	|         addq.l #8,sp
	saveStatusBars (fp);
    a45c:	|         move.l 256(sp),-(sp)
    a460:	|         jsr 54fe <saveStatusBars>
    a466:	|         addq.l #4,sp
	saveSounds (fp);
    a468:	|         move.l 256(sp),-(sp)
    a46c:	|         jsr a7e8 <saveSounds>
    a472:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    a474:	|         move.w 191f4 <saveEncoding>,d0
    a47a:	|         move.w d0,d0
    a47c:	|         andi.l #65535,d0
    a482:	|         move.l 256(sp),-(sp)
    a486:	|         move.l d0,-(sp)
    a488:	|         jsr 8d0 <put2bytes>
    a48e:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    a490:	|         move.l 191e6 <parallaxStuff>,d0
    a496:	|         move.l 256(sp),-(sp)
    a49a:	|         move.l d0,-(sp)
    a49c:	|         jsr aad4 <saveParallaxRecursive>
    a4a2:	|         addq.l #8,sp
	FPutC (fp, 0);
    a4a4:	|         move.l 256(sp),40(sp)
    a4aa:	|         clr.l 36(sp)
    a4ae:	|         move.l 190f0 <DOSBase>,d0
    a4b4:	|         movea.l d0,a6
    a4b6:	|         move.l 40(sp),d1
    a4ba:	|         move.l 36(sp),d2
    a4be:	|         jsr -312(a6)
    a4c2:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    a4c6:	|         move.l 256(sp),28(sp)
    a4cc:	|         move.l 18a7e <languageNum>,24(sp)
    a4d4:	|         move.l 190f0 <DOSBase>,d0
    a4da:	|         movea.l d0,a6
    a4dc:	|         move.l 28(sp),d1
    a4e0:	|         move.l 24(sp),d2
    a4e4:	|         jsr -312(a6)
    a4e8:	|         move.l d0,20(sp)

	Close(fp);
    a4ec:	|         move.l 256(sp),16(sp)
    a4f2:	|         move.l 190f0 <DOSBase>,d0
    a4f8:	|         movea.l d0,a6
    a4fa:	|         move.l 16(sp),d1
    a4fe:	|         jsr -36(a6)
    a502:	|         move.l d0,12(sp)
	clearStackLib ();
    a506:	|         jsr 9a9e <clearStackLib>
	return TRUE;
    a50c:	|         moveq #1,d0
}
    a50e:	\-------> movem.l (sp)+,d2-d3/a6
    a512:	          lea 272(sp),sp
    a516:	          rts

0000a518 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    a518:	       lea -12(sp),sp
	int elements = 0;
    a51c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    a520:	       move.l 16(sp),(sp)
	while (search) {
    a524:	   /-- bra.s a530 <saveStack+0x18>
		elements ++;
    a526:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    a52a:	|  |   movea.l (sp),a0
    a52c:	|  |   move.l 8(a0),(sp)
	while (search) {
    a530:	|  \-> tst.l (sp)
    a532:	\----- bne.s a526 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    a534:	       move.l 20(sp),-(sp)
    a538:	       move.l 12(sp),-(sp)
    a53c:	       jsr 8d0 <put2bytes>
    a542:	       addq.l #8,sp
	search = vs;
    a544:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    a548:	       clr.l 4(sp)
    a54c:	   /-- bra.s a568 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    a54e:	/--|-> move.l (sp),d0
    a550:	|  |   move.l 20(sp),-(sp)
    a554:	|  |   move.l d0,-(sp)
    a556:	|  |   jsr a6a4 <saveVariable>
    a55c:	|  |   addq.l #8,sp
		search = search -> next;
    a55e:	|  |   movea.l (sp),a0
    a560:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    a564:	|  |   addq.l #1,4(sp)
    a568:	|  \-> move.l 4(sp),d0
    a56c:	|      cmp.l 8(sp),d0
    a570:	\----- blt.s a54e <saveStack+0x36>
	}
}
    a572:	       nop
    a574:	       nop
    a576:	       lea 12(sp),sp
    a57a:	       rts

0000a57c <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    a57c:	             lea -44(sp),sp
    a580:	             move.l a6,-(sp)
    a582:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    a584:	             move.l 191d0 <stackLib>,48(sp)
	int a = 0;
    a58c:	             clr.l 44(sp)
	while (s) {
    a590:	      /----- bra.s a5ee <saveStackRef+0x72>
		if (s -> stack == vs) {
    a592:	   /--|----> movea.l 48(sp),a0
    a596:	   |  |      move.l (a0),d0
    a598:	   |  |      cmp.l 56(sp),d0
    a59c:	   |  |  /-- bne.s a5e0 <saveStackRef+0x64>
			FPutC (fp, 1);
    a59e:	   |  |  |   move.l 60(sp),16(sp)
    a5a4:	   |  |  |   moveq #1,d0
    a5a6:	   |  |  |   move.l d0,12(sp)
    a5aa:	   |  |  |   move.l 190f0 <DOSBase>,d0
    a5b0:	   |  |  |   movea.l d0,a6
    a5b2:	   |  |  |   move.l 16(sp),d1
    a5b6:	   |  |  |   move.l 12(sp),d2
    a5ba:	   |  |  |   jsr -312(a6)
    a5be:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    a5c2:	   |  |  |   move.l 191cc <stackLibTotal>,d0
    a5c8:	   |  |  |   sub.l 44(sp),d0
    a5cc:	   |  |  |   move.l 60(sp),-(sp)
    a5d0:	   |  |  |   move.l d0,-(sp)
    a5d2:	   |  |  |   jsr 8d0 <put2bytes>
    a5d8:	   |  |  |   addq.l #8,sp
			return TRUE;
    a5da:	   |  |  |   moveq #1,d0
    a5dc:	/--|--|--|-- bra.w a69a <saveStackRef+0x11e>
		}
		s = s -> next;
    a5e0:	|  |  |  \-> movea.l 48(sp),a0
    a5e4:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    a5ea:	|  |  |      addq.l #1,44(sp)
	while (s) {
    a5ee:	|  |  \----> tst.l 48(sp)
    a5f2:	|  \-------- bne.s a592 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    a5f4:	|            move.l 60(sp),40(sp)
    a5fa:	|            clr.l 36(sp)
    a5fe:	|            move.l 190f0 <DOSBase>,d0
    a604:	|            movea.l d0,a6
    a606:	|            move.l 40(sp),d1
    a60a:	|            move.l 36(sp),d2
    a60e:	|            jsr -312(a6)
    a612:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    a616:	|            movea.l 56(sp),a0
    a61a:	|            move.l (a0),d0
    a61c:	|            move.l 60(sp),-(sp)
    a620:	|            move.l d0,-(sp)
    a622:	|            jsr a518 <saveStack>
    a628:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    a62a:	|            moveq #8,d0
    a62c:	|            move.l d0,28(sp)
    a630:	|            clr.l 24(sp)
    a634:	|            move.l 190e8 <SysBase>,d0
    a63a:	|            movea.l d0,a6
    a63c:	|            move.l 28(sp),d0
    a640:	|            move.l 24(sp),d1
    a644:	|            jsr -684(a6)
    a648:	|            move.l d0,20(sp)
    a64c:	|            move.l 20(sp),d0
    a650:	|            move.l d0,48(sp)
	stackLibTotal ++;
    a654:	|            move.l 191cc <stackLibTotal>,d0
    a65a:	|            addq.l #1,d0
    a65c:	|            move.l d0,191cc <stackLibTotal>
	if (! s) {
    a662:	|            tst.l 48(sp)
    a666:	|        /-- bne.s a67a <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    a668:	|        |   pea 15c53 <custom.c.177df80b+0xf7a>
    a66e:	|        |   jsr 13da6 <KPrintF>
    a674:	|        |   addq.l #4,sp
		return FALSE;
    a676:	|        |   clr.w d0
    a678:	+--------|-- bra.s a69a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    a67a:	|        \-> move.l 191d0 <stackLib>,d0
    a680:	|            movea.l 48(sp),a0
    a684:	|            move.l d0,4(a0)
	s -> stack = vs;
    a688:	|            movea.l 48(sp),a0
    a68c:	|            move.l 56(sp),(a0)
	stackLib = s;
    a690:	|            move.l 48(sp),191d0 <stackLib>
	return TRUE;
    a698:	|            moveq #1,d0
}
    a69a:	\----------> move.l (sp)+,d2
    a69c:	             movea.l (sp)+,a6
    a69e:	             lea 44(sp),sp
    a6a2:	             rts

0000a6a4 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    a6a4:	          lea -12(sp),sp
    a6a8:	          move.l a6,-(sp)
    a6aa:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    a6ac:	          move.l 28(sp),16(sp)
    a6b2:	          movea.l 24(sp),a0
    a6b6:	          move.l (a0),d0
    a6b8:	          move.l d0,12(sp)
    a6bc:	          move.l 190f0 <DOSBase>,d0
    a6c2:	          movea.l d0,a6
    a6c4:	          move.l 16(sp),d1
    a6c8:	          move.l 12(sp),d2
    a6cc:	          jsr -312(a6)
    a6d0:	          move.l d0,8(sp)
	switch (from -> varType) {
    a6d4:	          movea.l 24(sp),a0
    a6d8:	          move.l (a0),d0
    a6da:	          moveq #9,d1
    a6dc:	          cmp.l d0,d1
    a6de:	      /-- bcs.w a78e <saveVariable+0xea>
    a6e2:	      |   add.l d0,d0
    a6e4:	      |   movea.l d0,a0
    a6e6:	      |   adda.l #42738,a0
    a6ec:	      |   move.w (a0),d0
    a6ee:	      |   jmp (a6f2 <saveVariable+0x4e>,pc,d0.w)
    a6f2:	      |   ori.l #1310740,(a0)+
    a6f8:	      |   ori.b #20,(20,a0,d0.w)
    a6fe:	      |   .short 0x004c
    a700:	      |   ori.b #126,(a4)
    a704:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    a708:	      |   ori.b #40,(a0)+
    a70c:	      |   ori.b #47,d4
    a710:	      |   ori.b #0,(a4)+
    a714:	      |   jsr 958 <put4bytes>
    a71a:	      |   addq.l #8,sp
		return TRUE;
    a71c:	      |   moveq #1,d0
    a71e:	/-----|-- bra.w a7ca <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    a722:	|     |   movea.l 24(sp),a0
    a726:	|     |   move.l 4(a0),d0
    a72a:	|     |   move.l 28(sp),-(sp)
    a72e:	|     |   move.l d0,-(sp)
    a730:	|     |   jsr bd8 <writeString>
    a736:	|     |   addq.l #8,sp
		return TRUE;
    a738:	|     |   moveq #1,d0
    a73a:	+-----|-- bra.w a7ca <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    a73e:	|     |   movea.l 24(sp),a0
    a742:	|     |   move.l 4(a0),d0
    a746:	|     |   move.l 28(sp),-(sp)
    a74a:	|     |   move.l d0,-(sp)
    a74c:	|     |   jsr a57c <saveStackRef>
    a752:	|     |   addq.l #8,sp
    a754:	+-----|-- bra.s a7ca <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    a756:	|     |   movea.l 24(sp),a0
    a75a:	|     |   move.l 4(a0),d0
    a75e:	|     |   move.l 28(sp),-(sp)
    a762:	|     |   move.l d0,-(sp)
    a764:	|     |   jsr 882a <saveCostume>
    a76a:	|     |   addq.l #8,sp
		return FALSE;
    a76c:	|     |   clr.w d0
    a76e:	+-----|-- bra.s a7ca <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    a770:	|     |   movea.l 24(sp),a0
    a774:	|     |   move.l 4(a0),d0
    a778:	|     |   move.l 28(sp),-(sp)
    a77c:	|     |   move.l d0,-(sp)
    a77e:	|     |   jsr 8760 <saveAnim>
    a784:	|     |   addq.l #8,sp
		return FALSE;
    a786:	|     |   clr.w d0
    a788:	+-----|-- bra.s a7ca <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    a78a:	|     |   clr.w d0
    a78c:	+-----|-- bra.s a7ca <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    a78e:	|     \-> movea.l 24(sp),a0
    a792:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a794:	|         moveq #10,d1
    a796:	|         cmp.l d0,d1
    a798:	|  /----- bcs.s a7b2 <saveVariable+0x10e>
						typeName[from->varType] :
    a79a:	|  |      movea.l 24(sp),a0
    a79e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a7a0:	|  |      add.l d0,d0
    a7a2:	|  |      movea.l d0,a1
    a7a4:	|  |      adda.l d0,a1
    a7a6:	|  |      lea 18fde <typeName>,a0
    a7ac:	|  |      move.l (0,a1,a0.l),d0
    a7b0:	|  |  /-- bra.s a7b8 <saveVariable+0x114>
    a7b2:	|  \--|-> move.l #89208,d0
    a7b8:	|     \-> move.l d0,-(sp)
    a7ba:	|         pea 15c7f <custom.c.177df80b+0xfa6>
    a7c0:	|         jsr 13da6 <KPrintF>
    a7c6:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    a7c8:	|         moveq #1,d0
    a7ca:	\-------> move.l (sp)+,d2
    a7cc:	          movea.l (sp)+,a6
    a7ce:	          lea 12(sp),sp
    a7d2:	          rts

0000a7d4 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    a7d4:	moveq #0,d0
}
    a7d6:	rts

0000a7d8 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    a7d8:	nop
    a7da:	rts

0000a7dc <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    a7dc:	nop
    a7de:	rts

0000a7e0 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    a7e0:	moveq #1,d0
}
    a7e2:	rts

0000a7e4 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    a7e4:	nop
    a7e6:	rts

0000a7e8 <saveSounds>:

void saveSounds (BPTR fp) {
    a7e8:	lea -12(sp),sp
    a7ec:	move.l a6,-(sp)
    a7ee:	move.l d2,-(sp)
	FPutC (fp,0);
    a7f0:	move.l 24(sp),16(sp)
    a7f6:	clr.l 12(sp)
    a7fa:	move.l 190f0 <DOSBase>,d0
    a800:	movea.l d0,a6
    a802:	move.l 16(sp),d1
    a806:	move.l 12(sp),d2
    a80a:	jsr -312(a6)
    a80e:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    a812:	move.l 18a9c <defSoundVol>,d0
    a818:	move.l 24(sp),-(sp)
    a81c:	move.l d0,-(sp)
    a81e:	jsr 8d0 <put2bytes>
    a824:	addq.l #8,sp
	put2bytes (defVol, fp);
    a826:	move.l 18a98 <defVol>,d0
    a82c:	move.l 24(sp),-(sp)
    a830:	move.l d0,-(sp)
    a832:	jsr 8d0 <put2bytes>
    a838:	addq.l #8,sp
}
    a83a:	nop
    a83c:	move.l (sp)+,d2
    a83e:	movea.l (sp)+,a6
    a840:	lea 12(sp),sp
    a844:	rts

0000a846 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    a846:	move.l 4(sp),18a98 <defVol>
}
    a84e:	nop
    a850:	rts

0000a852 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    a852:	move.l 4(sp),18a9c <defSoundVol>
}
    a85a:	nop
    a85c:	rts

0000a85e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    a85e:	nop
    a860:	rts

0000a862 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    a862:	nop
    a864:	rts

0000a866 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    a866:	nop
    a868:	rts

0000a86a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    a86a:	subq.l #4,sp
    a86c:	move.l 12(sp),d0
    a870:	move.w d0,d0
    a872:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    a876:	moveq #1,d0
}
    a878:	addq.l #4,sp
    a87a:	rts

0000a87c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    a87c:	nop
    a87e:	rts

0000a880 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    a880:	move.l 16(sp),-(sp)
    a884:	move.l 16(sp),-(sp)
    a888:	jsr df4 <CstBlankScreen>
    a88e:	addq.l #8,sp
}
    a890:	nop
    a892:	rts

0000a894 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    a894:	pea 15ca2 <custom.c.177df80b+0xfc9>
    a89a:	jsr 13da6 <KPrintF>
    a8a0:	addq.l #4,sp
}
    a8a2:	nop
    a8a4:	rts

0000a8a6 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    a8a6:	movea.l 8(sp),a1
    a8aa:	movea.l 12(sp),a0
    a8ae:	move.l 8(sp),d1
    a8b2:	move.l 4(sp),d0
    a8b6:	move.l a1,-(sp)
    a8b8:	move.l a0,-(sp)
    a8ba:	move.l d1,-(sp)
    a8bc:	move.l d0,-(sp)
    a8be:	jsr 1c2c <drawLine>
    a8c4:	lea 16(sp),sp
}
    a8c8:	nop
    a8ca:	rts

0000a8cc <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    a8cc:	movea.l 12(sp),a1
    a8d0:	movea.l 4(sp),a0
    a8d4:	move.l 8(sp),d1
    a8d8:	move.l 4(sp),d0
    a8dc:	move.l a1,-(sp)
    a8de:	move.l a0,-(sp)
    a8e0:	move.l d1,-(sp)
    a8e2:	move.l d0,-(sp)
    a8e4:	jsr 1c2c <drawLine>
    a8ea:	lea 16(sp),sp
}
    a8ee:	nop
    a8f0:	rts

0000a8f2 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    a8f2:	pea 15cdb <custom.c.177df80b+0x1002>
    a8f8:	jsr 13da6 <KPrintF>
    a8fe:	addq.l #4,sp
}
    a900:	nop
    a902:	rts

0000a904 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    a904:	jsr 1bbc <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    a90a:	pea 191e0 <backdropTextureName>
    a910:	pea 1 <_start+0x1>
    a914:	jsr 1dae <deleteTextures>
    a91a:	addq.l #8,sp
	backdropTextureName = 0;
    a91c:	clr.l 191e0 <backdropTextureName>
	backdropExists = FALSE;
    a922:	clr.w 191e4 <backdropExists>
}
    a928:	nop
    a92a:	rts

0000a92c <killParallax>:

void killParallax () {
    a92c:	          lea -12(sp),sp
    a930:	          move.l a6,-(sp)
	while (parallaxStuff) {
    a932:	   /----- bra.s a99e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    a934:	/--|----> move.l 191e6 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    a93c:	|  |      movea.l 12(sp),a0
    a940:	|  |      move.l 42(a0),d0
    a944:	|  |      move.l d0,191e6 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    a94a:	|  |      move.l 12(sp),d0
    a94e:	|  |      addq.l #4,d0
    a950:	|  |      move.l d0,-(sp)
    a952:	|  |      pea 1 <_start+0x1>
    a956:	|  |      jsr 1dae <deleteTextures>
    a95c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    a95e:	|  |      movea.l 12(sp),a0
    a962:	|  |      move.l (a0),d0
    a964:	|  |  /-- beq.s a97e <killParallax+0x52>
    a966:	|  |  |   movea.l 12(sp),a0
    a96a:	|  |  |   move.l (a0),8(sp)
    a96e:	|  |  |   move.l 190e8 <SysBase>,d0
    a974:	|  |  |   movea.l d0,a6
    a976:	|  |  |   movea.l 8(sp),a1
    a97a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    a97e:	|  |  \-> tst.l 12(sp)
    a982:	|  |  /-- beq.s a99a <killParallax+0x6e>
    a984:	|  |  |   move.l 12(sp),4(sp)
    a98a:	|  |  |   move.l 190e8 <SysBase>,d0
    a990:	|  |  |   movea.l d0,a6
    a992:	|  |  |   movea.l 4(sp),a1
    a996:	|  |  |   jsr -690(a6)
		k = NULL;
    a99a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    a99e:	|  \----> move.l 191e6 <parallaxStuff>,d0
    a9a4:	\-------- bne.s a934 <killParallax+0x8>
	}
}
    a9a6:	          nop
    a9a8:	          nop
    a9aa:	          movea.l (sp)+,a6
    a9ac:	          lea 12(sp),sp
    a9b0:	          rts

0000a9b2 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    a9b2:	       move.l 4(sp),-(sp)
    a9b6:	       jsr 4868 <openFileFromNum>
    a9bc:	       addq.l #4,sp
    a9be:	       tst.l d0
    a9c0:	   /-- bne.s a9d2 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    a9c2:	   |   pea 15cfc <custom.c.177df80b+0x1023>
    a9c8:	   |   jsr 13da6 <KPrintF>
    a9ce:	   |   addq.l #4,sp
		return;
    a9d0:	/--|-- bra.s a9f2 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    a9d2:	|  \-> move.l 190d0 <bigDataFile>,d0
    a9d8:	|      move.l 12(sp),-(sp)
    a9dc:	|      move.l 12(sp),-(sp)
    a9e0:	|      move.l d0,-(sp)
    a9e2:	|      jsr 11fa <CstLoadBackdrop>
    a9e8:	|      lea 12(sp),sp
	finishAccess ();
    a9ec:	|      jsr 4760 <finishAccess>
	
}
    a9f2:	\----> rts

0000a9f4 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    a9f4:	subq.l #8,sp
    a9f6:	movea.l 12(sp),a0
    a9fa:	move.l 16(sp),d1
    a9fe:	move.l 20(sp),d0
    aa02:	movea.w a0,a0
    aa04:	move.w a0,6(sp)
    aa08:	move.w d1,d1
    aa0a:	move.w d1,4(sp)
    aa0e:	move.w d0,d0
    aa10:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    aa14:	pea 15d4b <custom.c.177df80b+0x1072>
    aa1a:	jsr 13da6 <KPrintF>
    aa20:	addq.l #4,sp

}
    aa22:	nop
    aa24:	addq.l #8,sp
    aa26:	rts

0000aa28 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    aa28:	pea 15d6e <custom.c.177df80b+0x1095>
    aa2e:	jsr 13da6 <KPrintF>
    aa34:	addq.l #4,sp
}
    aa36:	nop
    aa38:	rts

0000aa3a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    aa3a:	pea 191ea <snapshotTextureName>
    aa40:	pea 1 <_start+0x1>
    aa44:	jsr 1dae <deleteTextures>
    aa4a:	addq.l #8,sp
	snapshotTextureName = 0;
    aa4c:	clr.l 191ea <snapshotTextureName>
}
    aa52:	nop
    aa54:	rts

0000aa56 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    aa56:	move.l 191dc <sceneHeight>,d0
    aa5c:	move.l d0,d1
    aa5e:	move.l 191d8 <sceneWidth>,d0
    aa64:	move.l d1,-(sp)
    aa66:	move.l d0,-(sp)
    aa68:	jsr 198a <CstReserveBackdrop>
    aa6e:	addq.l #8,sp
}
    aa70:	rts

0000aa72 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    aa72:	jsr a904 <killBackDrop>
	killParallax ();
    aa78:	jsr a92c <killParallax>
	killZBuffer ();
    aa7e:	jsr 61fc <killZBuffer>
	sceneWidth = x;
    aa84:	move.l 4(sp),d0
    aa88:	move.l d0,191d8 <sceneWidth>
	sceneHeight = y;
    aa8e:	move.l 8(sp),d0
    aa92:	move.l d0,191dc <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    aa98:	pea 15da7 <custom.c.177df80b+0x10ce>
    aa9e:	jsr 13da6 <KPrintF>
    aaa4:	addq.l #4,sp
	return reserveBackdrop();
    aaa6:	jsr aa56 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    aaac:	rts

0000aaae <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    aaae:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    aab0:	move.l 12(sp),-(sp)
    aab4:	jsr 6bc <get2bytes>
    aaba:	addq.l #4,sp
    aabc:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    aac0:	move.l 12(sp),-(sp)
    aac4:	jsr 6bc <get2bytes>
    aaca:	addq.l #4,sp
    aacc:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    aace:	moveq #1,d0
}
    aad0:	addq.l #8,sp
    aad2:	rts

0000aad4 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    aad4:	   /-> lea -12(sp),sp
    aad8:	   |   move.l a6,-(sp)
    aada:	   |   move.l d2,-(sp)
	if (me) {
    aadc:	   |   tst.l 24(sp)
    aae0:	/--|-- beq.w ab76 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    aae4:	|  |   movea.l 24(sp),a0
    aae8:	|  |   move.l 42(a0),d0
    aaec:	|  |   move.l 28(sp),-(sp)
    aaf0:	|  |   move.l d0,-(sp)
    aaf2:	|  \-- jsr aad4 <saveParallaxRecursive>(pc)
    aaf6:	|      addq.l #8,sp
		FPutC (fp, 1);
    aaf8:	|      move.l 28(sp),16(sp)
    aafe:	|      moveq #1,d0
    ab00:	|      move.l d0,12(sp)
    ab04:	|      move.l 190f0 <DOSBase>,d0
    ab0a:	|      movea.l d0,a6
    ab0c:	|      move.l 16(sp),d1
    ab10:	|      move.l 12(sp),d2
    ab14:	|      jsr -312(a6)
    ab18:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    ab1c:	|      movea.l 24(sp),a0
    ab20:	|      move.w 28(a0),d0
    ab24:	|      move.w d0,d0
    ab26:	|      andi.l #65535,d0
    ab2c:	|      move.l 28(sp),-(sp)
    ab30:	|      move.l d0,-(sp)
    ab32:	|      jsr 8d0 <put2bytes>
    ab38:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    ab3a:	|      movea.l 24(sp),a0
    ab3e:	|      move.w 30(a0),d0
    ab42:	|      move.w d0,d0
    ab44:	|      andi.l #65535,d0
    ab4a:	|      move.l 28(sp),-(sp)
    ab4e:	|      move.l d0,-(sp)
    ab50:	|      jsr 8d0 <put2bytes>
    ab56:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    ab58:	|      movea.l 24(sp),a0
    ab5c:	|      move.w 32(a0),d0
    ab60:	|      move.w d0,d0
    ab62:	|      andi.l #65535,d0
    ab68:	|      move.l 28(sp),-(sp)
    ab6c:	|      move.l d0,-(sp)
    ab6e:	|      jsr 8d0 <put2bytes>
    ab74:	|      addq.l #8,sp
	}
}
    ab76:	\----> nop
    ab78:	       move.l (sp)+,d2
    ab7a:	       movea.l (sp)+,a6
    ab7c:	       lea 12(sp),sp
    ab80:	       rts

0000ab82 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    ab82:	pea 15dce <custom.c.177df80b+0x10f5>
    ab88:	jsr 13da6 <KPrintF>
    ab8e:	addq.l #4,sp
	return TRUE;
    ab90:	moveq #1,d0
    ab92:	rts

0000ab94 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    ab94:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    ab96:	             move.l 191ee <allObjectTypes>,(sp)

	while (huntType) {
    ab9c:	      /----- bra.s abb4 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    ab9e:	   /--|----> movea.l (sp),a0
    aba0:	   |  |      move.l 4(a0),d0
    aba4:	   |  |      cmp.l 8(sp),d0
    aba8:	   |  |  /-- bne.s abae <findObjectType+0x1a>
    abaa:	   |  |  |   move.l (sp),d0
    abac:	/--|--|--|-- bra.s abc4 <findObjectType+0x30>
		huntType = huntType -> next;
    abae:	|  |  |  \-> movea.l (sp),a0
    abb0:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    abb4:	|  |  \----> tst.l (sp)
    abb6:	|  \-------- bne.s ab9e <findObjectType+0xa>
	}

	return loadObjectType (i);
    abb8:	|            move.l 8(sp),-(sp)
    abbc:	|            jsr ac84 <loadObjectType>
    abc2:	|            addq.l #4,sp
}
    abc4:	\----------> addq.l #4,sp
    abc6:	             rts

0000abc8 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    abc8:	             lea -12(sp),sp
	int i, num = 0;
    abcc:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    abd0:	             move.l 20(sp),-(sp)
    abd4:	             jsr ab94 <findObjectType>
    abda:	             addq.l #4,sp
    abdc:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    abde:	             clr.l 8(sp)
    abe2:	   /-------- bra.s ac18 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    abe4:	/--|-------> movea.l (sp),a0
    abe6:	|  |         move.l 38(a0),d1
    abea:	|  |         move.l 8(sp),d0
    abee:	|  |         lsl.l #3,d0
    abf0:	|  |         movea.l d1,a0
    abf2:	|  |         adda.l d0,a0
    abf4:	|  |         move.l (a0),d0
    abf6:	|  |         cmp.l 16(sp),d0
    abfa:	|  |  /----- bne.s ac14 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    abfc:	|  |  |      movea.l (sp),a0
    abfe:	|  |  |      move.l 38(a0),d1
    ac02:	|  |  |      move.l 8(sp),d0
    ac06:	|  |  |      lsl.l #3,d0
    ac08:	|  |  |      movea.l d1,a0
    ac0a:	|  |  |      adda.l d0,a0
    ac0c:	|  |  |      move.l 4(a0),4(sp)
			break;
    ac12:	|  |  |  /-- bra.s ac24 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    ac14:	|  |  \--|-> addq.l #1,8(sp)
    ac18:	|  \-----|-> movea.l (sp),a0
    ac1a:	|        |   move.l 16(a0),d0
    ac1e:	|        |   cmp.l 8(sp),d0
    ac22:	\--------|-- bgt.s abe4 <getCombinationFunction+0x1c>
		}
	}

	return num;
    ac24:	         \-> move.l 4(sp),d0
}
    ac28:	             lea 12(sp),sp
    ac2c:	             rts

0000ac2e <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    ac2e:	moveq #1,d0
}
    ac30:	rts

0000ac32 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    ac32:	subq.l #8,sp
    ac34:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    ac36:	move.l 16(sp),-(sp)
    ac3a:	jsr 6bc <get2bytes>
    ac40:	addq.l #4,sp
    ac42:	move.l d0,-(sp)
    ac44:	jsr ac84 <loadObjectType>
    ac4a:	addq.l #4,sp
    ac4c:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    ac50:	movea.l 8(sp),a0
    ac54:	move.l (a0),4(sp)
    ac58:	move.l 190e8 <SysBase>,d0
    ac5e:	movea.l d0,a6
    ac60:	movea.l 4(sp),a1
    ac64:	jsr -690(a6)
	r -> screenName = readString (fp);
    ac68:	move.l 16(sp),-(sp)
    ac6c:	jsr b02 <readString>
    ac72:	addq.l #4,sp
    ac74:	movea.l 8(sp),a0
    ac78:	move.l d0,(a0)
	return r;
    ac7a:	move.l 8(sp),d0
}
    ac7e:	movea.l (sp)+,a6
    ac80:	addq.l #8,sp
    ac82:	rts

0000ac84 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    ac84:	          lea -84(sp),sp
    ac88:	          move.l a6,-(sp)
    ac8a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    ac8c:	          moveq #42,d0
    ac8e:	          move.l d0,84(sp)
    ac92:	          clr.l 80(sp)
    ac96:	          move.l 190e8 <SysBase>,d0
    ac9c:	          movea.l d0,a6
    ac9e:	          move.l 84(sp),d0
    aca2:	          move.l 80(sp),d1
    aca6:	          jsr -684(a6)
    acaa:	          move.l d0,76(sp)
    acae:	          move.l 76(sp),d0
    acb2:	          move.l d0,72(sp)

    if (newType) {
    acb6:	/-------- beq.w af30 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    acba:	|         move.l 96(sp),-(sp)
    acbe:	|         jsr 4930 <openObjectSlice>
    acc4:	|         addq.l #4,sp
    acc6:	|         tst.w d0
    acc8:	+-------- beq.w af30 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    accc:	|         move.l 190d0 <bigDataFile>,d0
    acd2:	|         move.l d0,-(sp)
    acd4:	|         jsr 6bc <get2bytes>
    acda:	|         addq.l #4,sp
    acdc:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    ace0:	|         move.l 190d0 <bigDataFile>,64(sp)
    ace8:	|         move.l 190f0 <DOSBase>,d0
    acee:	|         movea.l d0,a6
    acf0:	|         move.l 64(sp),d1
    acf4:	|         jsr -306(a6)
    acf8:	|         move.l d0,60(sp)
    acfc:	|         move.l 60(sp),d0
    ad00:	|         move.l d0,d0
    ad02:	|         movea.l 72(sp),a0
    ad06:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    ad0a:	|         move.l 190d0 <bigDataFile>,56(sp)
    ad12:	|         move.l 190f0 <DOSBase>,d0
    ad18:	|         movea.l d0,a6
    ad1a:	|         move.l 56(sp),d1
    ad1e:	|         jsr -306(a6)
    ad22:	|         move.l d0,52(sp)
    ad26:	|         move.l 52(sp),d0
    ad2a:	|         move.l d0,d0
    ad2c:	|         movea.l 72(sp),a0
    ad30:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    ad34:	|         move.l 190d0 <bigDataFile>,48(sp)
    ad3c:	|         move.l 190f0 <DOSBase>,d0
    ad42:	|         movea.l d0,a6
    ad44:	|         move.l 48(sp),d1
    ad48:	|         jsr -306(a6)
    ad4c:	|         move.l d0,44(sp)
    ad50:	|         move.l 44(sp),d0
    ad54:	|         move.l d0,d0
    ad56:	|         movea.l 72(sp),a0
    ad5a:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    ad5e:	|         move.l 190d0 <bigDataFile>,40(sp)
    ad66:	|         move.l 190f0 <DOSBase>,d0
    ad6c:	|         movea.l d0,a6
    ad6e:	|         move.l 40(sp),d1
    ad72:	|         jsr -306(a6)
    ad76:	|         move.l d0,36(sp)
    ad7a:	|         move.l 36(sp),d0
    ad7e:	|         movea.l 72(sp),a0
    ad82:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    ad86:	|         move.l 190d0 <bigDataFile>,32(sp)
    ad8e:	|         move.l 190f0 <DOSBase>,d0
    ad94:	|         movea.l d0,a6
    ad96:	|         move.l 32(sp),d1
    ad9a:	|         jsr -306(a6)
    ad9e:	|         move.l d0,28(sp)
    ada2:	|         move.l 28(sp),d0
    ada6:	|         movea.l 72(sp),a0
    adaa:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    adae:	|         move.l 190d0 <bigDataFile>,d0
    adb4:	|         move.l d0,-(sp)
    adb6:	|         jsr 718 <get4bytes>
    adbc:	|         addq.l #4,sp
    adbe:	|         movea.l 72(sp),a0
    adc2:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    adc6:	|         move.l 190d0 <bigDataFile>,d0
    adcc:	|         move.l d0,-(sp)
    adce:	|         jsr 6bc <get2bytes>
    add4:	|         addq.l #4,sp
    add6:	|         movea.l 72(sp),a0
    adda:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    adde:	|         move.l 190d0 <bigDataFile>,24(sp)
    ade6:	|         move.l 190f0 <DOSBase>,d0
    adec:	|         movea.l d0,a6
    adee:	|         move.l 24(sp),d1
    adf2:	|         jsr -306(a6)
    adf6:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    adfa:	|         move.l 190d0 <bigDataFile>,d0
    ae00:	|         move.l d0,-(sp)
    ae02:	|         jsr 7d8 <getFloat>
    ae08:	|         addq.l #4,sp
            getFloat(bigDataFile);
    ae0a:	|         move.l 190d0 <bigDataFile>,d0
    ae10:	|         move.l d0,-(sp)
    ae12:	|         jsr 7d8 <getFloat>
    ae18:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    ae1a:	|         move.l 190d0 <bigDataFile>,d0
    ae20:	|         move.l d0,-(sp)
    ae22:	|         jsr 6bc <get2bytes>
    ae28:	|         addq.l #4,sp
    ae2a:	|         move.l d0,d0
    ae2c:	|         movea.l 72(sp),a0
    ae30:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    ae34:	|         move.l 190d0 <bigDataFile>,d0
    ae3a:	|         move.l d0,-(sp)
    ae3c:	|         jsr 6bc <get2bytes>
    ae42:	|         addq.l #4,sp
    ae44:	|         movea.l 72(sp),a0
    ae48:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    ae4c:	|         movea.l 72(sp),a0
    ae50:	|         move.l 16(a0),d0
    ae54:	|  /----- beq.s ae86 <loadObjectType+0x202>
    ae56:	|  |      movea.l 72(sp),a0
    ae5a:	|  |      move.l 16(a0),d0
    ae5e:	|  |      lsl.l #3,d0
    ae60:	|  |      move.l d0,16(sp)
    ae64:	|  |      clr.l 12(sp)
    ae68:	|  |      move.l 190e8 <SysBase>,d0
    ae6e:	|  |      movea.l d0,a6
    ae70:	|  |      move.l 16(sp),d0
    ae74:	|  |      move.l 12(sp),d1
    ae78:	|  |      jsr -684(a6)
    ae7c:	|  |      move.l d0,8(sp)
    ae80:	|  |      move.l 8(sp),d0
    ae84:	|  |  /-- bra.s ae88 <loadObjectType+0x204>
    ae86:	|  \--|-> moveq #0,d0
    ae88:	|     \-> movea.l 72(sp),a0
    ae8c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    ae90:	|         clr.l 88(sp)
    ae94:	|     /-- bra.s aee4 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    ae96:	|  /--|-> move.l 190d0 <bigDataFile>,d1
    ae9c:	|  |  |   movea.l 72(sp),a0
    aea0:	|  |  |   movea.l 38(a0),a0
    aea4:	|  |  |   move.l 88(sp),d0
    aea8:	|  |  |   lsl.l #3,d0
    aeaa:	|  |  |   lea (0,a0,d0.l),a2
    aeae:	|  |  |   move.l d1,-(sp)
    aeb0:	|  |  |   jsr 6bc <get2bytes>
    aeb6:	|  |  |   addq.l #4,sp
    aeb8:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    aeba:	|  |  |   move.l 190d0 <bigDataFile>,d1
    aec0:	|  |  |   movea.l 72(sp),a0
    aec4:	|  |  |   movea.l 38(a0),a0
    aec8:	|  |  |   move.l 88(sp),d0
    aecc:	|  |  |   lsl.l #3,d0
    aece:	|  |  |   lea (0,a0,d0.l),a2
    aed2:	|  |  |   move.l d1,-(sp)
    aed4:	|  |  |   jsr 6bc <get2bytes>
    aeda:	|  |  |   addq.l #4,sp
    aedc:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    aee0:	|  |  |   addq.l #1,88(sp)
    aee4:	|  |  \-> movea.l 72(sp),a0
    aee8:	|  |      move.l 16(a0),d0
    aeec:	|  |      cmp.l 88(sp),d0
    aef0:	|  \----- bgt.s ae96 <loadObjectType+0x212>
            }
            finishAccess();
    aef2:	|         jsr 4760 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    aef8:	|         move.l 68(sp),-(sp)
    aefc:	|         jsr 476a <getNumberedString>
    af02:	|         addq.l #4,sp
    af04:	|         movea.l 72(sp),a0
    af08:	|         move.l d0,(a0)
            newType->objectNum = i;
    af0a:	|         movea.l 72(sp),a0
    af0e:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    af14:	|         move.l 191ee <allObjectTypes>,d0
    af1a:	|         movea.l 72(sp),a0
    af1e:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    af22:	|         move.l 72(sp),191ee <allObjectTypes>
            return newType;
    af2a:	|         move.l 72(sp),d0
    af2e:	|     /-- bra.s af32 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    af30:	\-----|-> moveq #0,d0
}
    af32:	      \-> movea.l (sp)+,a2
    af34:	          movea.l (sp)+,a6
    af36:	          lea 84(sp),sp
    af3a:	          rts

0000af3c <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    af3c:	             lea -16(sp),sp
    af40:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    af42:	             move.l #102894,16(sp)

	while (* huntRegion) {
    af4a:	   /-------- bra.s afbe <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    af4c:	/--|-------> movea.l 16(sp),a0
    af50:	|  |         move.l (a0),d0
    af52:	|  |         cmp.l 24(sp),d0
    af56:	|  |  /----- bne.s afb0 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    af58:	|  |  |      movea.l 24(sp),a0
    af5c:	|  |  |      move.l 8(a0),d0
    af60:	|  |  |      movea.l 16(sp),a0
    af64:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    af66:	|  |  |      movea.l 24(sp),a0
    af6a:	|  |  |      move.l 38(a0),12(sp)
    af70:	|  |  |      move.l 190e8 <SysBase>,d0
    af76:	|  |  |      movea.l d0,a6
    af78:	|  |  |      movea.l 12(sp),a1
    af7c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    af80:	|  |  |      movea.l 24(sp),a0
    af84:	|  |  |      move.l (a0),8(sp)
    af88:	|  |  |      move.l 190e8 <SysBase>,d0
    af8e:	|  |  |      movea.l d0,a6
    af90:	|  |  |      movea.l 8(sp),a1
    af94:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    af98:	|  |  |      move.l 24(sp),4(sp)
    af9e:	|  |  |      move.l 190e8 <SysBase>,d0
    afa4:	|  |  |      movea.l d0,a6
    afa6:	|  |  |      movea.l 4(sp),a1
    afaa:	|  |  |      jsr -690(a6)
			return;
    afae:	|  |  |  /-- bra.s afd4 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    afb0:	|  |  \--|-> movea.l 16(sp),a0
    afb4:	|  |     |   move.l (a0),d0
    afb6:	|  |     |   move.l d0,d1
    afb8:	|  |     |   addq.l #8,d1
    afba:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    afbe:	|  \-----|-> movea.l 16(sp),a0
    afc2:	|        |   move.l (a0),d0
    afc4:	\--------|-- bne.s af4c <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    afc6:	         |   pea 15df5 <custom.c.177df80b+0x111c>
    afcc:	         |   jsr 13da6 <KPrintF>
    afd2:	         |   addq.l #4,sp
}
    afd4:	         \-> movea.l (sp)+,a6
    afd6:	             lea 16(sp),sp
    afda:	             rts

0000afdc <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    afdc:	movea.l 4(sp),a0
    afe0:	move.l 4(a0),d0
    afe4:	move.l 8(sp),-(sp)
    afe8:	move.l d0,-(sp)
    afea:	jsr 8d0 <put2bytes>
    aff0:	addq.l #8,sp
	writeString (r -> screenName, fp);
    aff2:	movea.l 4(sp),a0
    aff6:	move.l (a0),d0
    aff8:	move.l 8(sp),-(sp)
    affc:	move.l d0,-(sp)
    affe:	jsr bd8 <writeString>
    b004:	addq.l #8,sp
    b006:	nop
    b008:	rts

0000b00a <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    b00a:	                         lea -112(sp),sp
    b00e:	                         move.l a6,-(sp)
    b010:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    b012:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    b016:	                         move.w 191f4 <saveEncoding>,d0
    b01c:	                  /----- beq.s b026 <fileToStack+0x1c>
    b01e:	                  |      move.l #89627,d0
    b024:	                  |  /-- bra.s b02c <fileToStack+0x22>
    b026:	                  \--|-> move.l #89653,d0
    b02c:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    b030:	                         move.l 124(sp),112(sp)
    b036:	                         move.l #1005,108(sp)
    b03e:	                         move.l 190f0 <DOSBase>,d0
    b044:	                         movea.l d0,a6
    b046:	                         move.l 112(sp),d1
    b04a:	                         move.l 108(sp),d2
    b04e:	                         jsr -30(a6)
    b052:	                         move.l d0,104(sp)
    b056:	                         move.l 104(sp),d0
    b05a:	                         move.l d0,100(sp)
    if (!fp) {
    b05e:	                     /-- bne.s b078 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    b060:	                     |   move.l 124(sp),-(sp)
    b064:	                     |   pea 15e4c <custom.c.177df80b+0x1173>
    b06a:	                     |   jsr 13da6 <KPrintF>
    b070:	                     |   addq.l #8,sp
        return FALSE;
    b072:	                     |   clr.w d0
    b074:	/--------------------|-- bra.w b36e <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    b078:	|                    \-> move.w 191f4 <saveEncoding>,d0
    b07e:	|                        move.l d0,d0
    b080:	|                        move.b d0,191f2 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    b086:	|                        move.w 191f4 <saveEncoding>,d0
    b08c:	|                        lsr.w #8,d0
    b08e:	|                        move.l d0,d0
    b090:	|                        move.b d0,191f3 <encode2>

    while (*checker) {
    b096:	|                 /----- bra.s b0fa <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    b098:	|              /--|----> move.l 100(sp),30(sp)
    b09e:	|              |  |      move.l 190f0 <DOSBase>,d0
    b0a4:	|              |  |      movea.l d0,a6
    b0a6:	|              |  |      move.l 30(sp),d1
    b0aa:	|              |  |      jsr -306(a6)
    b0ae:	|              |  |      move.l d0,26(sp)
    b0b2:	|              |  |      move.l 26(sp),d1
    b0b6:	|              |  |      movea.l 116(sp),a0
    b0ba:	|              |  |      move.b (a0),d0
    b0bc:	|              |  |      ext.w d0
    b0be:	|              |  |      movea.w d0,a0
    b0c0:	|              |  |      cmpa.l d1,a0
    b0c2:	|              |  |  /-- beq.s b0f6 <fileToStack+0xec>
            Close(fp);
    b0c4:	|              |  |  |   move.l 100(sp),22(sp)
    b0ca:	|              |  |  |   move.l 190f0 <DOSBase>,d0
    b0d0:	|              |  |  |   movea.l d0,a6
    b0d2:	|              |  |  |   move.l 22(sp),d1
    b0d6:	|              |  |  |   jsr -36(a6)
    b0da:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    b0de:	|              |  |  |   move.l 124(sp),-(sp)
    b0e2:	|              |  |  |   pea 15e59 <custom.c.177df80b+0x1180>
    b0e8:	|              |  |  |   jsr 13da6 <KPrintF>
    b0ee:	|              |  |  |   addq.l #8,sp
            return FALSE;
    b0f0:	|              |  |  |   clr.w d0
    b0f2:	+--------------|--|--|-- bra.w b36e <fileToStack+0x364>
        }
        checker++;
    b0f6:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    b0fa:	|              |  \----> movea.l 116(sp),a0
    b0fe:	|              |         move.b (a0),d0
    b100:	|              \-------- bne.s b098 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    b102:	|                        move.w 191f4 <saveEncoding>,d0
    b108:	|  /-------------------- beq.s b17c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    b10a:	|  |                     move.l 100(sp),-(sp)
    b10e:	|  |                     jsr b378 <readStringEncoded>
    b114:	|  |                     addq.l #4,sp
    b116:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    b11a:	|  |                     pea 15e9a <custom.c.177df80b+0x11c1>
    b120:	|  |                     move.l 100(sp),-(sp)
    b124:	|  |                     jsr 1120a <strcmp>
    b12a:	|  |                     addq.l #8,sp
    b12c:	|  |                     tst.l d0
    b12e:	|  |                 /-- beq.s b162 <fileToStack+0x158>
            Close(fp);
    b130:	|  |                 |   move.l 100(sp),88(sp)
    b136:	|  |                 |   move.l 190f0 <DOSBase>,d0
    b13c:	|  |                 |   movea.l d0,a6
    b13e:	|  |                 |   move.l 88(sp),d1
    b142:	|  |                 |   jsr -36(a6)
    b146:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    b14a:	|  |                 |   move.l 124(sp),-(sp)
    b14e:	|  |                 |   pea 15ea9 <custom.c.177df80b+0x11d0>
    b154:	|  |                 |   jsr 13da6 <KPrintF>
    b15a:	|  |                 |   addq.l #8,sp
            return FALSE;
    b15c:	|  |                 |   clr.w d0
    b15e:	+--|-----------------|-- bra.w b36e <fileToStack+0x364>
        }
        FreeVec(checker);
    b162:	|  |                 \-> move.l 96(sp),92(sp)
    b168:	|  |                     move.l 190e8 <SysBase>,d0
    b16e:	|  |                     movea.l d0,a6
    b170:	|  |                     movea.l 92(sp),a1
    b174:	|  |                     jsr -690(a6)
        checker = NULL;
    b178:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    b17c:	|  >-------------------> move.w 191f4 <saveEncoding>,d0
    b182:	|  |     /-------------- beq.w b2b6 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    b186:	|  |     |               move.l 100(sp),76(sp)
    b18c:	|  |     |               move.l 190f0 <DOSBase>,d0
    b192:	|  |     |               movea.l d0,a6
    b194:	|  |     |               move.l 76(sp),d1
    b198:	|  |     |               jsr -306(a6)
    b19c:	|  |     |               move.l d0,72(sp)
    b1a0:	|  |     |               move.l 72(sp),d0
    b1a4:	|  |     |               move.b 191f2 <encode1>,d1
    b1aa:	|  |     |               ext.w d1
    b1ac:	|  |     |               ext.l d1
    b1ae:	|  |     |               move.l d0,d2
    b1b0:	|  |     |               eor.l d1,d2
    b1b2:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    b1b6:	|  |     |               moveq #-1,d0
    b1b8:	|  |     |               cmp.l 68(sp),d0
    b1bc:	|  |  /--|-------------- beq.w b34c <fileToStack+0x342>

            char i = (char) tmp;
    b1c0:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    b1c6:	|  |  |  |               move.b 67(sp),d0
    b1ca:	|  |  |  |               ext.w d0
    b1cc:	|  |  |  |               movea.w d0,a0
    b1ce:	|  |  |  |               moveq #2,d2
    b1d0:	|  |  |  |               cmp.l a0,d2
    b1d2:	|  |  |  |     /-------- beq.s b24e <fileToStack+0x244>
    b1d4:	|  |  |  |     |         moveq #2,d0
    b1d6:	|  |  |  |     |         cmp.l a0,d0
    b1d8:	|  |  |  |  /--|-------- blt.w b284 <fileToStack+0x27a>
    b1dc:	|  |  |  |  |  |         cmpa.w #0,a0
    b1e0:	|  |  |  |  |  |     /-- beq.s b1ec <fileToStack+0x1e2>
    b1e2:	|  |  |  |  |  |     |   moveq #1,d2
    b1e4:	|  |  |  |  |  |     |   cmp.l a0,d2
    b1e6:	|  |  |  |  |  |  /--|-- beq.s b228 <fileToStack+0x21e>
    b1e8:	|  |  |  |  +--|--|--|-- bra.w b284 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    b1ec:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    b1f0:	|  |  |  |  |  |  |      jsr b378 <readStringEncoded>
    b1f6:	|  |  |  |  |  |  |      addq.l #4,sp
    b1f8:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    b1fc:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    b200:	|  |  |  |  |  |  |      lea 14(sp),a0
    b204:	|  |  |  |  |  |  |      move.l a0,-(sp)
    b206:	|  |  |  |  |  |  |      jsr 11f80 <makeTextVar>
    b20c:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    b20e:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    b214:	|  |  |  |  |  |  |      move.l 190e8 <SysBase>,d0
    b21a:	|  |  |  |  |  |  |      movea.l d0,a6
    b21c:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    b220:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    b224:	|  |  |  |  |  |  |  /-- bra.w b2dc <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    b228:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    b22c:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    b232:	|  |  |  |  |  |     |   addq.l #4,sp
    b234:	|  |  |  |  |  |     |   move.l d0,-(sp)
    b236:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    b23a:	|  |  |  |  |  |     |   lea 18(sp),a0
    b23e:	|  |  |  |  |  |     |   move.l a0,-(sp)
    b240:	|  |  |  |  |  |     |   jsr 12650 <setVariable>
    b246:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    b24a:	|  |  |  |  |  |     +-- bra.w b2dc <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    b24e:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    b254:	|  |  |  |  |        |   move.l 190f0 <DOSBase>,d0
    b25a:	|  |  |  |  |        |   movea.l d0,a6
    b25c:	|  |  |  |  |        |   move.l 62(sp),d1
    b260:	|  |  |  |  |        |   jsr -306(a6)
    b264:	|  |  |  |  |        |   move.l d0,58(sp)
    b268:	|  |  |  |  |        |   move.l 58(sp),d0
    b26c:	|  |  |  |  |        |   move.l d0,-(sp)
    b26e:	|  |  |  |  |        |   pea 1 <_start+0x1>
    b272:	|  |  |  |  |        |   lea 18(sp),a0
    b276:	|  |  |  |  |        |   move.l a0,-(sp)
    b278:	|  |  |  |  |        |   jsr 12650 <setVariable>
    b27e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    b282:	|  |  |  |  |        +-- bra.s b2dc <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    b284:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    b288:	|  |  |  |           |   pea 15f2b <custom.c.177df80b+0x1252>
    b28e:	|  |  |  |           |   jsr 13da6 <KPrintF>
    b294:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    b296:	|  |  |  |           |   move.l 100(sp),46(sp)
    b29c:	|  |  |  |           |   move.l 190f0 <DOSBase>,d0
    b2a2:	|  |  |  |           |   movea.l d0,a6
    b2a4:	|  |  |  |           |   move.l 46(sp),d1
    b2a8:	|  |  |  |           |   jsr -36(a6)
    b2ac:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    b2b0:	|  |  |  |           |   clr.w d0
    b2b2:	+--|--|--|-----------|-- bra.w b36e <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    b2b6:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    b2ba:	|  |  |              |   jsr b43e <readTextPlain>
    b2c0:	|  |  |              |   addq.l #4,sp
    b2c2:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    b2c6:	|  |  |        /-----|-- beq.w b350 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    b2ca:	|  |  |        |     |   move.l 80(sp),-(sp)
    b2ce:	|  |  |        |     |   lea 14(sp),a0
    b2d2:	|  |  |        |     |   move.l a0,-(sp)
    b2d4:	|  |  |        |     |   jsr 11f80 <makeTextVar>
    b2da:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    b2dc:	|  |  |        |     \-> movea.l 128(sp),a0
    b2e0:	|  |  |        |         move.l (a0),d0
    b2e2:	|  |  |        |  /----- bne.s b312 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    b2e4:	|  |  |        |  |      move.l 128(sp),d0
    b2e8:	|  |  |        |  |      move.l d0,-(sp)
    b2ea:	|  |  |        |  |      lea 14(sp),a0
    b2ee:	|  |  |        |  |      move.l a0,-(sp)
    b2f0:	|  |  |        |  |      jsr 11620 <addVarToStackQuick>
    b2f6:	|  |  |        |  |      addq.l #8,sp
    b2f8:	|  |  |        |  |      tst.w d0
    b2fa:	|  |  |        |  |  /-- bne.s b300 <fileToStack+0x2f6>
    b2fc:	|  |  |        |  |  |   clr.w d0
    b2fe:	+--|--|--------|--|--|-- bra.s b36e <fileToStack+0x364>
            sH->last = sH->first;
    b300:	|  |  |        |  |  \-> movea.l 128(sp),a0
    b304:	|  |  |        |  |      move.l (a0),d0
    b306:	|  |  |        |  |      movea.l 128(sp),a0
    b30a:	|  |  |        |  |      move.l d0,4(a0)
    b30e:	|  +--|--------|--|----- bra.w b17c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    b312:	|  |  |        |  \----> movea.l 128(sp),a0
    b316:	|  |  |        |         move.l 4(a0),d0
    b31a:	|  |  |        |         addq.l #8,d0
    b31c:	|  |  |        |         move.l d0,-(sp)
    b31e:	|  |  |        |         lea 14(sp),a0
    b322:	|  |  |        |         move.l a0,-(sp)
    b324:	|  |  |        |         jsr 11620 <addVarToStackQuick>
    b32a:	|  |  |        |         addq.l #8,sp
    b32c:	|  |  |        |         tst.w d0
    b32e:	|  |  |        |     /-- bne.s b334 <fileToStack+0x32a>
    b330:	|  |  |        |     |   clr.w d0
    b332:	+--|--|--------|-----|-- bra.s b36e <fileToStack+0x364>
            sH->last = sH->last->next;
    b334:	|  |  |        |     \-> movea.l 128(sp),a0
    b338:	|  |  |        |         movea.l 4(a0),a0
    b33c:	|  |  |        |         move.l 8(a0),d0
    b340:	|  |  |        |         movea.l 128(sp),a0
    b344:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    b348:	|  \--|--------|-------- bra.w b17c <fileToStack+0x172>
            if (tmp == -1) break;
    b34c:	|     \--------|-------> nop
    b34e:	|              |     /-- bra.s b352 <fileToStack+0x348>
            if (!line) break;
    b350:	|              \-----|-> nop
        }
    }
    Close(fp);
    b352:	|                    \-> move.l 100(sp),38(sp)
    b358:	|                        move.l 190f0 <DOSBase>,d0
    b35e:	|                        movea.l d0,a6
    b360:	|                        move.l 38(sp),d1
    b364:	|                        jsr -36(a6)
    b368:	|                        move.l d0,34(sp)
    return TRUE;
    b36c:	|                        moveq #1,d0
}
    b36e:	\----------------------> move.l (sp)+,d2
    b370:	                         movea.l (sp)+,a6
    b372:	                         lea 112(sp),sp
    b376:	                         rts

0000b378 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    b378:	          lea -32(sp),sp
    b37c:	          move.l a6,-(sp)
    b37e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    b380:	          move.l 44(sp),-(sp)
    b384:	          jsr 6bc <get2bytes>
    b38a:	          addq.l #4,sp
    b38c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    b390:	          move.l 32(sp),d0
    b394:	          addq.l #1,d0
    b396:	          move.l d0,28(sp)
    b39a:	          clr.l 24(sp)
    b39e:	          move.l 190e8 <SysBase>,d0
    b3a4:	          movea.l d0,a6
    b3a6:	          move.l 28(sp),d0
    b3aa:	          move.l 24(sp),d1
    b3ae:	          jsr -684(a6)
    b3b2:	          move.l d0,20(sp)
    b3b6:	          move.l 20(sp),d0
    b3ba:	          move.l d0,16(sp)
    if (!s) return NULL;
    b3be:	      /-- bne.s b3c4 <readStringEncoded+0x4c>
    b3c0:	      |   moveq #0,d0
    b3c2:	/-----|-- bra.s b434 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    b3c4:	|     \-> clr.l 36(sp)
    b3c8:	|     /-- bra.s b41a <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    b3ca:	|  /--|-> move.l 44(sp),12(sp)
    b3d0:	|  |  |   move.l 190f0 <DOSBase>,d0
    b3d6:	|  |  |   movea.l d0,a6
    b3d8:	|  |  |   move.l 12(sp),d1
    b3dc:	|  |  |   jsr -306(a6)
    b3e0:	|  |  |   move.l d0,8(sp)
    b3e4:	|  |  |   move.l 8(sp),d0
    b3e8:	|  |  |   move.l d0,d1
    b3ea:	|  |  |   move.b 191f2 <encode1>,d2
    b3f0:	|  |  |   move.l 36(sp),d0
    b3f4:	|  |  |   movea.l 16(sp),a0
    b3f8:	|  |  |   adda.l d0,a0
    b3fa:	|  |  |   move.b d1,d0
    b3fc:	|  |  |   eor.b d2,d0
    b3fe:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    b400:	|  |  |   move.b 191f2 <encode1>,d0
    b406:	|  |  |   move.b d0,d1
    b408:	|  |  |   move.b 191f3 <encode2>,d0
    b40e:	|  |  |   add.b d1,d0
    b410:	|  |  |   move.b d0,191f2 <encode1>
    for (a = 0; a < len; a++) {
    b416:	|  |  |   addq.l #1,36(sp)
    b41a:	|  |  \-> move.l 36(sp),d0
    b41e:	|  |      cmp.l 32(sp),d0
    b422:	|  \----- blt.s b3ca <readStringEncoded+0x52>
    }
    s[len] = 0;
    b424:	|         move.l 32(sp),d0
    b428:	|         movea.l 16(sp),a0
    b42c:	|         adda.l d0,a0
    b42e:	|         clr.b (a0)
    return s;
    b430:	|         move.l 16(sp),d0
}
    b434:	\-------> move.l (sp)+,d2
    b436:	          movea.l (sp)+,a6
    b438:	          lea 32(sp),sp
    b43c:	          rts

0000b43e <readTextPlain>:

char *readTextPlain(BPTR fp) {
    b43e:	             lea -104(sp),sp
    b442:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    b446:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    b44a:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    b450:	             move.l 124(sp),106(sp)
    b456:	             clr.l 102(sp)
    b45a:	             clr.l 98(sp)
    b45e:	             move.l 190f0 <DOSBase>,d0
    b464:	             movea.l d0,a6
    b466:	             move.l 106(sp),d1
    b46a:	             move.l 102(sp),d2
    b46e:	             move.l 98(sp),d3
    b472:	             jsr -66(a6)
    b476:	             move.l d0,94(sp)
    b47a:	             move.l 94(sp),d0
    b47e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    b482:	   /-------- bra.s b4c6 <readTextPlain+0x88>
        tmp = FGetC(fp);
    b484:	/--|-------> move.l 124(sp),22(sp)
    b48a:	|  |         move.l 190f0 <DOSBase>,d0
    b490:	|  |         movea.l d0,a6
    b492:	|  |         move.l 22(sp),d1
    b496:	|  |         jsr -306(a6)
    b49a:	|  |         move.l d0,18(sp)
    b49e:	|  |         move.l 18(sp),d0
    b4a2:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    b4a6:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    b4ac:	|  |         cmpi.b #10,17(sp)
    b4b2:	|  |  /----- beq.s b4bc <readTextPlain+0x7e>
    b4b4:	|  |  |      moveq #-1,d0
    b4b6:	|  |  |      cmp.l 110(sp),d0
    b4ba:	|  |  |  /-- bne.s b4c2 <readTextPlain+0x84>
            keepGoing = FALSE;
    b4bc:	|  |  \--|-> clr.w 114(sp)
    b4c0:	|  +-----|-- bra.s b4c6 <readTextPlain+0x88>
        } else {
            stringSize++;
    b4c2:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    b4c6:	|  \-------> tst.w 114(sp)
    b4ca:	\----------- bne.s b484 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    b4cc:	             tst.l 116(sp)
    b4d0:	         /-- bne.s b4e0 <readTextPlain+0xa2>
    b4d2:	         |   moveq #-1,d0
    b4d4:	         |   cmp.l 110(sp),d0
    b4d8:	         +-- bne.s b4e0 <readTextPlain+0xa2>
        return NULL;
    b4da:	         |   moveq #0,d0
    b4dc:	      /--|-- bra.w b5c6 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    b4e0:	      |  \-> move.l 124(sp),86(sp)
    b4e6:	      |      move.l 90(sp),82(sp)
    b4ec:	      |      moveq #-1,d0
    b4ee:	      |      move.l d0,78(sp)
    b4f2:	      |      move.l 190f0 <DOSBase>,d0
    b4f8:	      |      movea.l d0,a6
    b4fa:	      |      move.l 86(sp),d1
    b4fe:	      |      move.l 82(sp),d2
    b502:	      |      move.l 78(sp),d3
    b506:	      |      jsr -66(a6)
    b50a:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    b50e:	      |      move.l 116(sp),d0
    b512:	      |      addq.l #1,d0
    b514:	      |      move.l d0,70(sp)
    b518:	      |      clr.l 66(sp)
    b51c:	      |      move.l 190e8 <SysBase>,d0
    b522:	      |      movea.l d0,a6
    b524:	      |      move.l 70(sp),d0
    b528:	      |      move.l 66(sp),d1
    b52c:	      |      jsr -684(a6)
    b530:	      |      move.l d0,62(sp)
    b534:	      |      move.l 62(sp),d0
    b538:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    b53c:	      |  /-- bne.s b544 <readTextPlain+0x106>
    b53e:	      |  |   moveq #0,d0
    b540:	      +--|-- bra.w b5c6 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    b544:	      |  \-> move.l 124(sp),54(sp)
    b54a:	      |      move.l 58(sp),50(sp)
    b550:	      |      moveq #1,d0
    b552:	      |      move.l d0,46(sp)
    b556:	      |      move.l 116(sp),42(sp)
    b55c:	      |      move.l 190f0 <DOSBase>,d0
    b562:	      |      movea.l d0,a6
    b564:	      |      move.l 54(sp),d1
    b568:	      |      move.l 50(sp),d2
    b56c:	      |      move.l 46(sp),d3
    b570:	      |      move.l 42(sp),d4
    b574:	      |      jsr -324(a6)
    b578:	      |      move.l d0,38(sp)
    b57c:	      |      move.l 38(sp),d0
    b580:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    b584:	      |      move.l 34(sp),d0
    b588:	      |      cmp.l 116(sp),d0
    b58c:	      |  /-- beq.s b59c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    b58e:	      |  |   pea 15f60 <custom.c.177df80b+0x1287>
    b594:	      |  |   jsr 13da6 <KPrintF>
    b59a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    b59c:	      |  \-> move.l 124(sp),30(sp)
    b5a2:	      |      move.l 190f0 <DOSBase>,d0
    b5a8:	      |      movea.l d0,a6
    b5aa:	      |      move.l 30(sp),d1
    b5ae:	      |      jsr -306(a6)
    b5b2:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    b5b6:	      |      move.l 116(sp),d0
    b5ba:	      |      movea.l 58(sp),a0
    b5be:	      |      adda.l d0,a0
    b5c0:	      |      clr.b (a0)
    }

    return reply;
    b5c2:	      |      move.l 58(sp),d0
}
    b5c6:	      \----> movem.l (sp)+,d2-d4/a6
    b5ca:	             lea 104(sp),sp
    b5ce:	             rts

0000b5d0 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    b5d0:	                      lea -144(sp),sp
    b5d4:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    b5d8:	                      move.l 160(sp),148(sp)
    b5de:	                      move.l #1006,144(sp)
    b5e6:	                      move.l 190f0 <DOSBase>,d0
    b5ec:	                      movea.l d0,a6
    b5ee:	                      move.l 148(sp),d1
    b5f2:	                      move.l 144(sp),d2
    b5f6:	                      jsr -30(a6)
    b5fa:	                      move.l d0,140(sp)
    b5fe:	                      move.l 140(sp),d0
    b602:	                      move.l d0,136(sp)

    if (!fp) {
    b606:	                  /-- bne.s b620 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    b608:	                  |   move.l 160(sp),-(sp)
    b60c:	                  |   pea 15f81 <custom.c.177df80b+0x12a8>
    b612:	                  |   jsr 13da6 <KPrintF>
    b618:	                  |   addq.l #8,sp
        return FALSE;
    b61a:	                  |   clr.w d0
    b61c:	/-----------------|-- bra.w b8dc <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    b620:	|                 \-> movea.l 164(sp),a0
    b624:	|                     movea.l 4(a0),a0
    b628:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    b62c:	|                     move.w 191f4 <saveEncoding>,d0
    b632:	|                     move.l d0,d0
    b634:	|                     move.b d0,191f2 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    b63a:	|                     move.w 191f4 <saveEncoding>,d0
    b640:	|                     lsr.w #8,d0
    b642:	|                     move.l d0,d0
    b644:	|                     move.b d0,191f3 <encode2>

    if (saveEncoding) {
    b64a:	|                     move.w 191f4 <saveEncoding>,d0
    b650:	|                 /-- beq.s b6a2 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    b652:	|                 |   move.l 136(sp),116(sp)
    b658:	|                 |   move.l #89627,112(sp)
    b660:	|                 |   moveq #99,d0
    b662:	|                 |   not.b d0
    b664:	|                 |   add.l sp,d0
    b666:	|                 |   addi.l #-144,d0
    b66c:	|                 |   move.l d0,108(sp)
    b670:	|                 |   move.l 190f0 <DOSBase>,d0
    b676:	|                 |   movea.l d0,a6
    b678:	|                 |   move.l 116(sp),d1
    b67c:	|                 |   move.l 112(sp),d2
    b680:	|                 |   move.l 108(sp),d3
    b684:	|                 |   jsr -354(a6)
    b688:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    b68c:	|                 |   move.l 136(sp),-(sp)
    b690:	|                 |   pea 15e9a <custom.c.177df80b+0x11c1>
    b696:	|                 |   jsr b8e6 <writeStringEncoded>
    b69c:	|                 |   addq.l #8,sp
    b69e:	|  /--------------|-- bra.w b8b4 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    b6a2:	|  |              \-> move.l 136(sp),132(sp)
    b6a8:	|  |                  move.l #89653,128(sp)
    b6b0:	|  |                  moveq #99,d1
    b6b2:	|  |                  not.b d1
    b6b4:	|  |                  add.l sp,d1
    b6b6:	|  |                  addi.l #-144,d1
    b6bc:	|  |                  move.l d1,124(sp)
    b6c0:	|  |                  move.l 190f0 <DOSBase>,d0
    b6c6:	|  |                  movea.l d0,a6
    b6c8:	|  |                  move.l 132(sp),d1
    b6cc:	|  |                  move.l 128(sp),d2
    b6d0:	|  |                  move.l 124(sp),d3
    b6d4:	|  |                  jsr -354(a6)
    b6d8:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    b6dc:	|  +----------------- bra.w b8b4 <stackToFile+0x2e4>
        if (saveEncoding) {
    b6e0:	|  |  /-------------> move.w 191f4 <saveEncoding>,d0
    b6e6:	|  |  |     /-------- beq.w b838 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    b6ea:	|  |  |     |         movea.l 152(sp),a0
    b6ee:	|  |  |     |         move.l (a0),d0
    b6f0:	|  |  |     |         moveq #1,d1
    b6f2:	|  |  |     |         cmp.l d0,d1
    b6f4:	|  |  |     |     /-- beq.s b744 <stackToFile+0x174>
    b6f6:	|  |  |     |     |   moveq #3,d1
    b6f8:	|  |  |     |     |   cmp.l d0,d1
    b6fa:	|  |  |     |  /--|-- bne.w b806 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    b6fe:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    b704:	|  |  |     |  |  |   move.b 191f2 <encode1>,d0
    b70a:	|  |  |     |  |  |   ext.w d0
    b70c:	|  |  |     |  |  |   movea.w d0,a0
    b70e:	|  |  |     |  |  |   move.l a0,72(sp)
    b712:	|  |  |     |  |  |   move.l 190f0 <DOSBase>,d0
    b718:	|  |  |     |  |  |   movea.l d0,a6
    b71a:	|  |  |     |  |  |   move.l 76(sp),d1
    b71e:	|  |  |     |  |  |   move.l 72(sp),d2
    b722:	|  |  |     |  |  |   jsr -312(a6)
    b726:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    b72a:	|  |  |     |  |  |   movea.l 152(sp),a0
    b72e:	|  |  |     |  |  |   move.l 4(a0),d0
    b732:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    b736:	|  |  |     |  |  |   move.l d0,-(sp)
    b738:	|  |  |     |  |  |   jsr b8e6 <writeStringEncoded>
    b73e:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    b740:	|  |  |  /--|--|--|-- bra.w b8aa <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    b744:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    b748:	|  |  |  |  |  |      move.l 4(a0),d0
    b74c:	|  |  |  |  |  |  /-- bmi.s b7bc <stackToFile+0x1ec>
    b74e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b752:	|  |  |  |  |  |  |   move.l 4(a0),d0
    b756:	|  |  |  |  |  |  |   cmpi.l #255,d0
    b75c:	|  |  |  |  |  |  +-- bgt.s b7bc <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    b75e:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    b764:	|  |  |  |  |  |  |   move.b 191f2 <encode1>,d0
    b76a:	|  |  |  |  |  |  |   eori.b #2,d0
    b76e:	|  |  |  |  |  |  |   ext.w d0
    b770:	|  |  |  |  |  |  |   movea.w d0,a0
    b772:	|  |  |  |  |  |  |   move.l a0,60(sp)
    b776:	|  |  |  |  |  |  |   move.l 190f0 <DOSBase>,d0
    b77c:	|  |  |  |  |  |  |   movea.l d0,a6
    b77e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    b782:	|  |  |  |  |  |  |   move.l 60(sp),d2
    b786:	|  |  |  |  |  |  |   jsr -312(a6)
    b78a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    b78e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    b794:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b798:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    b79e:	|  |  |  |  |  |  |   move.l 190f0 <DOSBase>,d0
    b7a4:	|  |  |  |  |  |  |   movea.l d0,a6
    b7a6:	|  |  |  |  |  |  |   move.l 52(sp),d1
    b7aa:	|  |  |  |  |  |  |   move.l 48(sp),d2
    b7ae:	|  |  |  |  |  |  |   jsr -312(a6)
    b7b2:	|  |  |  |  |  |  |   move.l d0,44(sp)
    b7b6:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    b7b8:	|  |  |  +--|--|--|-- bra.w b8aa <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    b7bc:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    b7c2:	|  |  |  |  |  |      move.b 191f2 <encode1>,d0
    b7c8:	|  |  |  |  |  |      eori.b #1,d0
    b7cc:	|  |  |  |  |  |      ext.w d0
    b7ce:	|  |  |  |  |  |      movea.w d0,a0
    b7d0:	|  |  |  |  |  |      move.l a0,36(sp)
    b7d4:	|  |  |  |  |  |      move.l 190f0 <DOSBase>,d0
    b7da:	|  |  |  |  |  |      movea.l d0,a6
    b7dc:	|  |  |  |  |  |      move.l 40(sp),d1
    b7e0:	|  |  |  |  |  |      move.l 36(sp),d2
    b7e4:	|  |  |  |  |  |      jsr -312(a6)
    b7e8:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    b7ec:	|  |  |  |  |  |      movea.l 152(sp),a0
    b7f0:	|  |  |  |  |  |      move.l 4(a0),d0
    b7f4:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    b7f8:	|  |  |  |  |  |      move.l d0,-(sp)
    b7fa:	|  |  |  |  |  |      jsr 958 <put4bytes>
    b800:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    b802:	|  |  |  +--|--|----- bra.w b8aa <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    b806:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    b80a:	|  |  |  |  |         pea 15f93 <custom.c.177df80b+0x12ba>
    b810:	|  |  |  |  |         jsr 13da6 <KPrintF>
    b816:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    b818:	|  |  |  |  |         move.l 136(sp),28(sp)
    b81e:	|  |  |  |  |         move.l 190f0 <DOSBase>,d0
    b824:	|  |  |  |  |         movea.l d0,a6
    b826:	|  |  |  |  |         move.l 28(sp),d1
    b82a:	|  |  |  |  |         jsr -36(a6)
    b82e:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    b832:	|  |  |  |  |         clr.w d0
    b834:	+--|--|--|--|-------- bra.w b8dc <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    b838:	|  |  |  |  \-------> move.l 152(sp),d0
    b83c:	|  |  |  |            move.l d0,-(sp)
    b83e:	|  |  |  |            jsr 12334 <getTextFromAnyVar>
    b844:	|  |  |  |            addq.l #4,sp
    b846:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    b84a:	|  |  |  |     /----- beq.s b8be <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    b84c:	|  |  |  |     |      movea.l 100(sp),a0
    b850:	|  |  |  |     |      move.b (a0),d0
    b852:	|  |  |  |     |      ext.w d0
    b854:	|  |  |  |     |      movea.w d0,a0
    b856:	|  |  |  |     |      move.l a0,12(sp)
    b85a:	|  |  |  |     |      move.l 136(sp),96(sp)
    b860:	|  |  |  |     |      move.l #90095,92(sp)
    b868:	|  |  |  |     |      moveq #99,d0
    b86a:	|  |  |  |     |      not.b d0
    b86c:	|  |  |  |     |      add.l sp,d0
    b86e:	|  |  |  |     |      addi.l #-144,d0
    b874:	|  |  |  |     |      move.l d0,88(sp)
    b878:	|  |  |  |     |      move.l 190f0 <DOSBase>,d0
    b87e:	|  |  |  |     |      movea.l d0,a6
    b880:	|  |  |  |     |      move.l 96(sp),d1
    b884:	|  |  |  |     |      move.l 92(sp),d2
    b888:	|  |  |  |     |      move.l 88(sp),d3
    b88c:	|  |  |  |     |      jsr -354(a6)
    b890:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    b894:	|  |  |  |     |      move.l 100(sp),80(sp)
    b89a:	|  |  |  |     |      move.l 190e8 <SysBase>,d0
    b8a0:	|  |  |  |     |      movea.l d0,a6
    b8a2:	|  |  |  |     |      movea.l 80(sp),a1
    b8a6:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    b8aa:	|  |  |  \-----|----> movea.l 152(sp),a0
    b8ae:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    b8b4:	|  \--|--------|----> tst.l 152(sp)
    b8b8:	|     \--------|----- bne.w b6e0 <stackToFile+0x110>
    b8bc:	|              |  /-- bra.s b8c0 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    b8be:	|              \--|-> nop
    }
    Close(fp);
    b8c0:	|                 \-> move.l 136(sp),20(sp)
    b8c6:	|                     move.l 190f0 <DOSBase>,d0
    b8cc:	|                     movea.l d0,a6
    b8ce:	|                     move.l 20(sp),d1
    b8d2:	|                     jsr -36(a6)
    b8d6:	|                     move.l d0,16(sp)
    return TRUE;
    b8da:	|                     moveq #1,d0
}
    b8dc:	\-------------------> movem.l (sp)+,d2-d3/a6
    b8e0:	                      lea 144(sp),sp
    b8e4:	                      rts

0000b8e6 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    b8e6:	       lea -20(sp),sp
    b8ea:	       move.l a6,-(sp)
    b8ec:	       move.l d2,-(sp)
	int a, len = strlen (s);
    b8ee:	       move.l 32(sp),-(sp)
    b8f2:	       jsr 1124a <strlen>
    b8f8:	       addq.l #4,sp
    b8fa:	       move.l d0,20(sp)

	put2bytes (len, fp);
    b8fe:	       move.l 36(sp),-(sp)
    b902:	       move.l 24(sp),-(sp)
    b906:	       jsr 8d0 <put2bytes>
    b90c:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    b90e:	       clr.l 24(sp)
    b912:	   /-- bra.s b968 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    b914:	/--|-> move.l 36(sp),16(sp)
    b91a:	|  |   move.l 24(sp),d0
    b91e:	|  |   movea.l 32(sp),a0
    b922:	|  |   adda.l d0,a0
    b924:	|  |   move.b (a0),d1
    b926:	|  |   move.b 191f2 <encode1>,d0
    b92c:	|  |   eor.b d1,d0
    b92e:	|  |   ext.w d0
    b930:	|  |   movea.w d0,a0
    b932:	|  |   move.l a0,12(sp)
    b936:	|  |   move.l 190f0 <DOSBase>,d0
    b93c:	|  |   movea.l d0,a6
    b93e:	|  |   move.l 16(sp),d1
    b942:	|  |   move.l 12(sp),d2
    b946:	|  |   jsr -312(a6)
    b94a:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    b94e:	|  |   move.b 191f2 <encode1>,d0
    b954:	|  |   move.b d0,d1
    b956:	|  |   move.b 191f3 <encode2>,d0
    b95c:	|  |   add.b d1,d0
    b95e:	|  |   move.b d0,191f2 <encode1>
	for (a = 0; a < len; a ++) {
    b964:	|  |   addq.l #1,24(sp)
    b968:	|  \-> move.l 24(sp),d0
    b96c:	|      cmp.l 20(sp),d0
    b970:	\----- blt.s b914 <writeStringEncoded+0x2e>
	}
}
    b972:	       nop
    b974:	       nop
    b976:	       move.l (sp)+,d2
    b978:	       movea.l (sp)+,a6
    b97a:	       lea 20(sp),sp
    b97e:	       rts

0000b980 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    b980:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    b982:	                   tst.l 8(sp)
    b986:	               /-- bne.s b98c <failSecurityCheck+0xc>
    b988:	               |   moveq #1,d0
    b98a:	/--------------|-- bra.s ba0a <failSecurityCheck+0x8a>

	int a = 0;
    b98c:	|              \-> clr.l (sp)

	while (fn[a]) {
    b98e:	|     /----------- bra.s b9fc <failSecurityCheck+0x7c>
		switch (fn[a]) {
    b990:	|  /--|----------> move.l (sp),d0
    b992:	|  |  |            movea.l 8(sp),a0
    b996:	|  |  |            adda.l d0,a0
    b998:	|  |  |            move.b (a0),d0
    b99a:	|  |  |            ext.w d0
    b99c:	|  |  |            movea.w d0,a0
    b99e:	|  |  |            moveq #124,d0
    b9a0:	|  |  |            cmp.l a0,d0
    b9a2:	|  |  |     /----- beq.s b9e4 <failSecurityCheck+0x64>
    b9a4:	|  |  |     |      moveq #124,d1
    b9a6:	|  |  |     |      cmp.l a0,d1
    b9a8:	|  |  |  /--|----- blt.s b9fa <failSecurityCheck+0x7a>
    b9aa:	|  |  |  |  |      moveq #92,d0
    b9ac:	|  |  |  |  |      cmp.l a0,d0
    b9ae:	|  |  |  |  +----- beq.s b9e4 <failSecurityCheck+0x64>
    b9b0:	|  |  |  |  |      moveq #92,d1
    b9b2:	|  |  |  |  |      cmp.l a0,d1
    b9b4:	|  |  |  +--|----- blt.s b9fa <failSecurityCheck+0x7a>
    b9b6:	|  |  |  |  |      moveq #60,d0
    b9b8:	|  |  |  |  |      cmp.l a0,d0
    b9ba:	|  |  |  |  |  /-- blt.s b9da <failSecurityCheck+0x5a>
    b9bc:	|  |  |  |  |  |   moveq #34,d1
    b9be:	|  |  |  |  |  |   cmp.l a0,d1
    b9c0:	|  |  |  +--|--|-- bgt.s b9fa <failSecurityCheck+0x7a>
    b9c2:	|  |  |  |  |  |   moveq #-34,d1
    b9c4:	|  |  |  |  |  |   add.l a0,d1
    b9c6:	|  |  |  |  |  |   move.l #83894529,d0
    b9cc:	|  |  |  |  |  |   lsr.l d1,d0
    b9ce:	|  |  |  |  |  |   moveq #1,d1
    b9d0:	|  |  |  |  |  |   and.l d1,d0
    b9d2:	|  |  |  |  |  |   sne d0
    b9d4:	|  |  |  |  |  |   neg.b d0
    b9d6:	|  |  |  |  +--|-- bne.s b9e4 <failSecurityCheck+0x64>
    b9d8:	|  |  |  +--|--|-- bra.s b9fa <failSecurityCheck+0x7a>
    b9da:	|  |  |  |  |  \-> lea -62(a0),a0
    b9de:	|  |  |  |  |      moveq #1,d0
    b9e0:	|  |  |  |  |      cmp.l a0,d0
    b9e2:	|  |  |  +--|----- bcs.s b9fa <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    b9e4:	|  |  |  |  \----> move.l 8(sp),-(sp)
    b9e8:	|  |  |  |         pea 15ff3 <custom.c.177df80b+0x131a>
    b9ee:	|  |  |  |         jsr 13da6 <KPrintF>
    b9f4:	|  |  |  |         addq.l #8,sp
				return TRUE;
    b9f6:	|  |  |  |         moveq #1,d0
    b9f8:	+--|--|--|-------- bra.s ba0a <failSecurityCheck+0x8a>
		}
		a++;
    b9fa:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    b9fc:	|  |  \----------> move.l (sp),d0
    b9fe:	|  |               movea.l 8(sp),a0
    ba02:	|  |               adda.l d0,a0
    ba04:	|  |               move.b (a0),d0
    ba06:	|  \-------------- bne.s b990 <failSecurityCheck+0x10>
	}
	return FALSE;
    ba08:	|                  clr.w d0
}
    ba0a:	\----------------> addq.l #4,sp
    ba0c:	                   rts

0000ba0e <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ba0e:	             lea -24(sp),sp
    ba12:	             move.l a6,-(sp)
    ba14:	             move.l 40(sp),d0
    ba18:	             move.w d0,d0
    ba1a:	             move.w d0,6(sp)
	int fileNum = -1;
    ba1e:	             moveq #-1,d0
    ba20:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ba24:	             jsr 3d34 <killSpeechTimers>

	switch (numParams) {
    ba2a:	             moveq #2,d0
    ba2c:	             cmp.l 32(sp),d0
    ba30:	      /----- beq.s ba74 <sayCore+0x66>
    ba32:	      |      moveq #3,d0
    ba34:	      |      cmp.l 32(sp),d0
    ba38:	/-----|----- bne.w bb56 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ba3c:	|     |      movea.l 36(sp),a0
    ba40:	|     |      move.l 24(a0),d0
    ba44:	|     |      move.l d0,-(sp)
    ba46:	|     |      pea 5 <_start+0x5>
    ba4a:	|     |      lea 20(sp),a0
    ba4e:	|     |      move.l a0,-(sp)
    ba50:	|     |      jsr 11d5e <getValueType>
    ba56:	|     |      lea 12(sp),sp
    ba5a:	|     |      tst.w d0
    ba5c:	|     |  /-- bne.s ba64 <sayCore+0x56>
    ba5e:	|     |  |   moveq #1,d0
    ba60:	|  /--|--|-- bra.w bb66 <sayCore+0x158>
			trimStack (&fun -> stack);
    ba64:	|  |  |  \-> moveq #24,d0
    ba66:	|  |  |      add.l 36(sp),d0
    ba6a:	|  |  |      move.l d0,-(sp)
    ba6c:	|  |  |      jsr 126e2 <trimStack>
    ba72:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ba74:	|  |  \----> movea.l 36(sp),a0
    ba78:	|  |         move.l 24(a0),d0
    ba7c:	|  |         move.l d0,-(sp)
    ba7e:	|  |         jsr 12334 <getTextFromAnyVar>
    ba84:	|  |         addq.l #4,sp
    ba86:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ba8a:	|  |     /-- bne.s ba92 <sayCore+0x84>
    ba8c:	|  |     |   moveq #1,d0
    ba8e:	|  +-----|-- bra.w bb66 <sayCore+0x158>
			trimStack (&fun -> stack);
    ba92:	|  |     \-> moveq #24,d0
    ba94:	|  |         add.l 36(sp),d0
    ba98:	|  |         move.l d0,-(sp)
    ba9a:	|  |         jsr 126e2 <trimStack>
    baa0:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    baa2:	|  |         movea.l 36(sp),a0
    baa6:	|  |         move.l 24(a0),d0
    baaa:	|  |         move.l d0,-(sp)
    baac:	|  |         pea 7 <_start+0x7>
    bab0:	|  |         lea 16(sp),a0
    bab4:	|  |         move.l a0,-(sp)
    bab6:	|  |         jsr 11d5e <getValueType>
    babc:	|  |         lea 12(sp),sp
    bac0:	|  |         tst.w d0
    bac2:	|  |     /-- bne.s baca <sayCore+0xbc>
    bac4:	|  |     |   moveq #1,d0
    bac6:	|  +-----|-- bra.w bb66 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    baca:	|  |     \-> movea.l 36(sp),a0
    bace:	|  |         move.l 24(a0),d0
    bad2:	|  |         move.l d0,-(sp)
    bad4:	|  |         pea 7 <_start+0x7>
    bad8:	|  |         lea 16(sp),a0
    badc:	|  |         move.l a0,-(sp)
    bade:	|  |         jsr 11d5e <getValueType>
    bae4:	|  |         lea 12(sp),sp
    bae8:	|  |         tst.w d0
    baea:	|  |     /-- bne.s baf0 <sayCore+0xe2>
    baec:	|  |     |   moveq #1,d0
    baee:	|  +-----|-- bra.s bb66 <sayCore+0x158>
			trimStack (&fun -> stack);
    baf0:	|  |     \-> moveq #24,d0
    baf2:	|  |         add.l 36(sp),d0
    baf6:	|  |         move.l d0,-(sp)
    baf8:	|  |         jsr 126e2 <trimStack>
    bafe:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    bb00:	|  |         movea.w 6(sp),a0
    bb04:	|  |         move.l 12(sp),d1
    bb08:	|  |         move.l 8(sp),d0
    bb0c:	|  |         move.l a0,-(sp)
    bb0e:	|  |         move.l d1,-(sp)
    bb10:	|  |         move.l d0,-(sp)
    bb12:	|  |         move.l 36(sp),-(sp)
    bb16:	|  |         jsr 5c98 <wrapSpeech>
    bb1c:	|  |         lea 16(sp),sp
    bb20:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    bb24:	|  |         movea.l 36(sp),a0
    bb28:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    bb2e:	|  |         movea.l 36(sp),a0
    bb32:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    bb38:	|  |         move.l 24(sp),16(sp)
    bb3e:	|  |         move.l 190e8 <SysBase>,d0
    bb44:	|  |         movea.l d0,a6
    bb46:	|  |         movea.l 16(sp),a1
    bb4a:	|  |         jsr -690(a6)
			newText = NULL;
    bb4e:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    bb52:	|  |         moveq #0,d0
    bb54:	|  +-------- bra.s bb66 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    bb56:	\--|-------> pea 16079 <custom.c.177df80b+0x13a0>
    bb5c:	   |         jsr 13da6 <KPrintF>
    bb62:	   |         addq.l #4,sp
	return BR_ERROR;
    bb64:	   |         moveq #1,d0
}
    bb66:	   \-------> movea.l (sp)+,a6
    bb68:	             lea 24(sp),sp
    bb6c:	             rts

0000bb6e <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    bb6e:	pea 1 <_start+0x1>
    bb72:	move.l 12(sp),-(sp)
    bb76:	move.l 12(sp),-(sp)
    bb7a:	jsr ba0e <sayCore>
    bb80:	lea 12(sp),sp
}
    bb84:	rts

0000bb86 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    bb86:	clr.l -(sp)
    bb88:	move.l 12(sp),-(sp)
    bb8c:	move.l 12(sp),-(sp)
    bb90:	jsr ba0e <sayCore>
    bb96:	lea 12(sp),sp
}
    bb9a:	rts

0000bb9c <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    bb9c:	moveq #2,d0
}
    bb9e:	rts

0000bba0 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    bba0:	moveq #2,d0
}
    bba2:	rts

0000bba4 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    bba4:	nop
    bba6:	rts

0000bba8 <builtIn_setCursor>:

builtIn(setCursor)
{
    bba8:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    bbaa:	movea.l 12(sp),a0
    bbae:	move.l 24(a0),d0
    bbb2:	move.l d0,-(sp)
    bbb4:	jsr 12236 <getAnimationFromVar>
    bbba:	addq.l #4,sp
    bbbc:	move.l d0,(sp)
	pickAnimCursor (aa);
    bbbe:	move.l (sp),-(sp)
    bbc0:	jsr dba <pickAnimCursor>
    bbc6:	addq.l #4,sp
	trimStack (&fun -> stack);
    bbc8:	moveq #24,d0
    bbca:	add.l 12(sp),d0
    bbce:	move.l d0,-(sp)
    bbd0:	jsr 126e2 <trimStack>
    bbd6:	addq.l #4,sp
	return BR_CONTINUE;
    bbd8:	moveq #2,d0
}
    bbda:	addq.l #4,sp
    bbdc:	rts

0000bbde <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    bbde:	move.l 190a4 <input+0xa>,d1
    bbe4:	move.l 191f6 <cameraX>,d0
    bbea:	add.l d0,d1
    bbec:	moveq #28,d0
    bbee:	add.l 8(sp),d0
    bbf2:	move.l d1,-(sp)
    bbf4:	pea 1 <_start+0x1>
    bbf8:	move.l d0,-(sp)
    bbfa:	jsr 12650 <setVariable>
    bc00:	lea 12(sp),sp
	return BR_CONTINUE;
    bc04:	moveq #2,d0
}
    bc06:	rts

0000bc08 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    bc08:	move.l 190a8 <input+0xe>,d1
    bc0e:	move.l 191fa <cameraY>,d0
    bc14:	add.l d0,d1
    bc16:	moveq #28,d0
    bc18:	add.l 8(sp),d0
    bc1c:	move.l d1,-(sp)
    bc1e:	pea 1 <_start+0x1>
    bc22:	move.l d0,-(sp)
    bc24:	jsr 12650 <setVariable>
    bc2a:	lea 12(sp),sp
	return BR_CONTINUE;
    bc2e:	moveq #2,d0
}
    bc30:	rts

0000bc32 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    bc32:	move.l 190a4 <input+0xa>,d0
    bc38:	move.l d0,-(sp)
    bc3a:	jsr 141e2 <__floatsisf>
    bc40:	addq.l #4,sp
    bc42:	move.l d0,d1
    bc44:	move.l 18aa0 <cameraZoom>,d0
    bc4a:	move.l d0,-(sp)
    bc4c:	move.l d1,-(sp)
    bc4e:	jsr 14294 <__mulsf3>
    bc54:	addq.l #8,sp
    bc56:	move.l d0,-(sp)
    bc58:	jsr 1417a <__fixsfsi>
    bc5e:	addq.l #4,sp
    bc60:	move.l d0,d1
    bc62:	moveq #28,d0
    bc64:	add.l 8(sp),d0
    bc68:	move.l d1,-(sp)
    bc6a:	pea 1 <_start+0x1>
    bc6e:	move.l d0,-(sp)
    bc70:	jsr 12650 <setVariable>
    bc76:	lea 12(sp),sp
	return BR_CONTINUE;
    bc7a:	moveq #2,d0
}
    bc7c:	rts

0000bc7e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    bc7e:	move.l 190a8 <input+0xe>,d0
    bc84:	move.l d0,-(sp)
    bc86:	jsr 141e2 <__floatsisf>
    bc8c:	addq.l #4,sp
    bc8e:	move.l d0,d1
    bc90:	move.l 18aa0 <cameraZoom>,d0
    bc96:	move.l d0,-(sp)
    bc98:	move.l d1,-(sp)
    bc9a:	jsr 14294 <__mulsf3>
    bca0:	addq.l #8,sp
    bca2:	move.l d0,-(sp)
    bca4:	jsr 1417a <__fixsfsi>
    bcaa:	addq.l #4,sp
    bcac:	move.l d0,d1
    bcae:	moveq #28,d0
    bcb0:	add.l 8(sp),d0
    bcb4:	move.l d1,-(sp)
    bcb6:	pea 1 <_start+0x1>
    bcba:	move.l d0,-(sp)
    bcbc:	jsr 12650 <setVariable>
    bcc2:	lea 12(sp),sp
	return BR_CONTINUE;
    bcc6:	moveq #2,d0
}
    bcc8:	rts

0000bcca <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    bcca:	jsr 574c <statusBarText>
    bcd0:	move.l d0,d1
    bcd2:	moveq #28,d0
    bcd4:	add.l 8(sp),d0
    bcd8:	move.l d1,-(sp)
    bcda:	move.l d0,-(sp)
    bcdc:	jsr 11f80 <makeTextVar>
    bce2:	addq.l #8,sp
	return BR_CONTINUE;
    bce4:	moveq #2,d0
}
    bce6:	rts

0000bce8 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    bce8:	       lea -20(sp),sp
    bcec:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    bcee:	       movea.l 32(sp),a0
    bcf2:	       move.l 24(a0),d0
    bcf6:	       move.l d0,-(sp)
    bcf8:	       jsr 12334 <getTextFromAnyVar>
    bcfe:	       addq.l #4,sp
    bd00:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    bd04:	   /-- bne.s bd0c <builtIn_getMatchingFiles+0x24>
    bd06:	   |   moveq #1,d0
    bd08:	/--|-- bra.w bdce <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    bd0c:	|  \-> moveq #24,d0
    bd0e:	|      add.l 32(sp),d0
    bd12:	|      move.l d0,-(sp)
    bd14:	|      jsr 126e2 <trimStack>
    bd1a:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    bd1c:	|      moveq #28,d0
    bd1e:	|      add.l 32(sp),d0
    bd22:	|      move.l d0,-(sp)
    bd24:	|      jsr 11fac <unlinkVar>
    bd2a:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    bd2c:	|      movea.l 32(sp),a0
    bd30:	|      moveq #6,d0
    bd32:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    bd36:	|      moveq #12,d0
    bd38:	|      move.l d0,16(sp)
    bd3c:	|      clr.l 12(sp)
    bd40:	|      move.l 190e8 <SysBase>,d0
    bd46:	|      movea.l d0,a6
    bd48:	|      move.l 16(sp),d0
    bd4c:	|      move.l 12(sp),d1
    bd50:	|      jsr -684(a6)
    bd54:	|      move.l d0,8(sp)
    bd58:	|      move.l 8(sp),d0
    bd5c:	|      movea.l 32(sp),a0
    bd60:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    bd64:	|      moveq #32,d0
    bd66:	|      add.l 32(sp),d0
    bd6a:	|  /-- bne.s bd70 <builtIn_getMatchingFiles+0x88>
    bd6c:	|  |   moveq #1,d0
    bd6e:	+--|-- bra.s bdce <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    bd70:	|  \-> movea.l 32(sp),a0
    bd74:	|      movea.l 32(a0),a0
    bd78:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    bd7a:	|      movea.l 32(sp),a0
    bd7e:	|      movea.l 32(a0),a0
    bd82:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    bd86:	|      movea.l 32(sp),a0
    bd8a:	|      movea.l 32(a0),a0
    bd8e:	|      moveq #1,d0
    bd90:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    bd94:	|      movea.l 32(sp),a0
    bd98:	|      move.l 32(a0),d0
    bd9c:	|      move.l 20(sp),-(sp)
    bda0:	|      move.l d0,-(sp)
    bda2:	|      jsr 11b1a <getSavedGamesStack>
    bda8:	|      addq.l #8,sp
    bdaa:	|      tst.w d0
    bdac:	|  /-- bne.s bdb2 <builtIn_getMatchingFiles+0xca>
    bdae:	|  |   moveq #1,d0
    bdb0:	+--|-- bra.s bdce <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    bdb2:	|  \-> move.l 20(sp),4(sp)
    bdb8:	|      move.l 190e8 <SysBase>,d0
    bdbe:	|      movea.l d0,a6
    bdc0:	|      movea.l 4(sp),a1
    bdc4:	|      jsr -690(a6)
	newText = NULL;
    bdc8:	|      clr.l 20(sp)
	return BR_CONTINUE;
    bdcc:	|      moveq #2,d0
}
    bdce:	\----> movea.l (sp)+,a6
    bdd0:	       lea 20(sp),sp
    bdd4:	       rts

0000bdd6 <builtIn_saveGame>:

builtIn(saveGame)
{
    bdd6:	       lea -12(sp),sp
    bdda:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    bddc:	       movea.l 24(sp),a0
    bde0:	       move.l 24(a0),d0
    bde4:	       move.l d0,-(sp)
    bde6:	       jsr 12334 <getTextFromAnyVar>
    bdec:	       addq.l #4,sp
    bdee:	       move.l d0,190b4 <loadNow>
    trimStack(&fun->stack);
    bdf4:	       moveq #24,d0
    bdf6:	       add.l 24(sp),d0
    bdfa:	       move.l d0,-(sp)
    bdfc:	       jsr 126e2 <trimStack>
    be02:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    be04:	       move.l 190b4 <loadNow>,d0
    be0a:	       move.l d0,-(sp)
    be0c:	       jsr 2fe <encodeFilename>
    be12:	       addq.l #4,sp
    be14:	       move.l d0,12(sp)
    FreeVec(loadNow);
    be18:	       move.l 190b4 <loadNow>,8(sp)
    be20:	       move.l 190e8 <SysBase>,d0
    be26:	       movea.l d0,a6
    be28:	       movea.l 8(sp),a1
    be2c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    be30:	       move.l 12(sp),-(sp)
    be34:	       jsr b980 <failSecurityCheck>
    be3a:	       addq.l #4,sp
    be3c:	       tst.w d0
    be3e:	   /-- beq.s be44 <builtIn_saveGame+0x6e>
    be40:	   |   moveq #1,d0
    be42:	/--|-- bra.s be94 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    be44:	|  \-> move.l 12(sp),-(sp)
    be48:	|      pea 160a7 <custom.c.177df80b+0x13ce>
    be4e:	|      jsr 1128a <joinStrings>
    be54:	|      addq.l #8,sp
    be56:	|      move.l d0,190b4 <loadNow>
    FreeVec(aaaaa);
    be5c:	|      move.l 12(sp),4(sp)
    be62:	|      move.l 190e8 <SysBase>,d0
    be68:	|      movea.l d0,a6
    be6a:	|      movea.l 4(sp),a1
    be6e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    be72:	|      moveq #28,d0
    be74:	|      add.l 24(sp),d0
    be78:	|      clr.l -(sp)
    be7a:	|      pea 1 <_start+0x1>
    be7e:	|      move.l d0,-(sp)
    be80:	|      jsr 12650 <setVariable>
    be86:	|      lea 12(sp),sp
    saverFunc = fun;
    be8a:	|      move.l 24(sp),19206 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    be92:	|      moveq #0,d0
}
    be94:	\----> movea.l (sp)+,a6
    be96:	       lea 12(sp),sp
    be9a:	       rts

0000be9c <builtIn_fileExists>:

builtIn(fileExists)
{
    be9c:	       lea -36(sp),sp
    bea0:	       move.l a6,-(sp)
    bea2:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    bea4:	       movea.l 52(sp),a0
    bea8:	       move.l 24(a0),d0
    beac:	       move.l d0,-(sp)
    beae:	       jsr 12334 <getTextFromAnyVar>
    beb4:	       addq.l #4,sp
    beb6:	       move.l d0,190b4 <loadNow>
    trimStack(&fun->stack);
    bebc:	       moveq #24,d0
    bebe:	       add.l 52(sp),d0
    bec2:	       move.l d0,-(sp)
    bec4:	       jsr 126e2 <trimStack>
    beca:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    becc:	       move.l 190b4 <loadNow>,d0
    bed2:	       move.l d0,-(sp)
    bed4:	       jsr 2fe <encodeFilename>
    beda:	       addq.l #4,sp
    bedc:	       move.l d0,40(sp)
    FreeVec(loadNow);
    bee0:	       move.l 190b4 <loadNow>,36(sp)
    bee8:	       move.l 190e8 <SysBase>,d0
    beee:	       movea.l d0,a6
    bef0:	       movea.l 36(sp),a1
    bef4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    bef8:	       move.l 40(sp),-(sp)
    befc:	       jsr b980 <failSecurityCheck>
    bf02:	       addq.l #4,sp
    bf04:	       tst.w d0
    bf06:	   /-- beq.s bf0e <builtIn_fileExists+0x72>
    bf08:	   |   moveq #1,d0
    bf0a:	/--|-- bra.w bfae <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    bf0e:	|  \-> move.l 40(sp),32(sp)
    bf14:	|      move.l #1005,28(sp)
    bf1c:	|      move.l 190f0 <DOSBase>,d0
    bf22:	|      movea.l d0,a6
    bf24:	|      move.l 32(sp),d1
    bf28:	|      move.l 28(sp),d2
    bf2c:	|      jsr -30(a6)
    bf30:	|      move.l d0,24(sp)
    bf34:	|      move.l 24(sp),d0
    bf38:	|      move.l d0,20(sp)
    if (!fp) {        
    bf3c:	|  /-- bne.s bf4c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    bf3e:	|  |   pea 160a9 <custom.c.177df80b+0x13d0>
    bf44:	|  |   jsr 13da6 <KPrintF>
    bf4a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    bf4c:	|  \-> tst.l 20(sp)
    bf50:	|      sne d0
    bf52:	|      neg.b d0
    bf54:	|      moveq #0,d1
    bf56:	|      move.b d0,d1
    bf58:	|      moveq #28,d0
    bf5a:	|      add.l 52(sp),d0
    bf5e:	|      move.l d1,-(sp)
    bf60:	|      pea 1 <_start+0x1>
    bf64:	|      move.l d0,-(sp)
    bf66:	|      jsr 12650 <setVariable>
    bf6c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    bf70:	|      tst.l 20(sp)
    bf74:	|  /-- beq.s bf90 <builtIn_fileExists+0xf4>
    bf76:	|  |   move.l 20(sp),16(sp)
    bf7c:	|  |   move.l 190f0 <DOSBase>,d0
    bf82:	|  |   movea.l d0,a6
    bf84:	|  |   move.l 16(sp),d1
    bf88:	|  |   jsr -36(a6)
    bf8c:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    bf90:	|  \-> move.l 40(sp),8(sp)
    bf96:	|      move.l 190e8 <SysBase>,d0
    bf9c:	|      movea.l d0,a6
    bf9e:	|      movea.l 8(sp),a1
    bfa2:	|      jsr -690(a6)
    loadNow = NULL;
    bfa6:	|      clr.l 190b4 <loadNow>
    return BR_CONTINUE;
    bfac:	|      moveq #2,d0
}
    bfae:	\----> move.l (sp)+,d2
    bfb0:	       movea.l (sp)+,a6
    bfb2:	       lea 36(sp),sp
    bfb6:	       rts

0000bfb8 <builtIn_loadGame>:

builtIn(loadGame)
{
    bfb8:	       lea -36(sp),sp
    bfbc:	       move.l a6,-(sp)
    bfbe:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    bfc0:	       movea.l 52(sp),a0
    bfc4:	       move.l 24(a0),d0
    bfc8:	       move.l d0,-(sp)
    bfca:	       jsr 12334 <getTextFromAnyVar>
    bfd0:	       addq.l #4,sp
    bfd2:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    bfd6:	       moveq #24,d0
    bfd8:	       add.l 52(sp),d0
    bfdc:	       move.l d0,-(sp)
    bfde:	       jsr 126e2 <trimStack>
    bfe4:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    bfe6:	       move.l 40(sp),-(sp)
    bfea:	       jsr 2fe <encodeFilename>
    bff0:	       addq.l #4,sp
    bff2:	       move.l d0,190b4 <loadNow>
    FreeVec(aaaaa);
    bff8:	       move.l 40(sp),36(sp)
    bffe:	       move.l 190e8 <SysBase>,d0
    c004:	       movea.l d0,a6
    c006:	       movea.l 36(sp),a1
    c00a:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    c00e:	       move.l 190b4 <loadNow>,d0
    c014:	       move.l d0,-(sp)
    c016:	       jsr b980 <failSecurityCheck>
    c01c:	       addq.l #4,sp
    c01e:	       tst.w d0
    c020:	   /-- beq.s c026 <builtIn_loadGame+0x6e>
    c022:	   |   moveq #1,d0
    c024:	/--|-- bra.s c096 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    c026:	|  \-> move.l 190b4 <loadNow>,32(sp)
    c02e:	|      move.l #1005,28(sp)
    c036:	|      move.l 190f0 <DOSBase>,d0
    c03c:	|      movea.l d0,a6
    c03e:	|      move.l 32(sp),d1
    c042:	|      move.l 28(sp),d2
    c046:	|      jsr -30(a6)
    c04a:	|      move.l d0,24(sp)
    c04e:	|      move.l 24(sp),d0
    c052:	|      move.l d0,20(sp)
    if (fp) {
    c056:	|  /-- beq.s c076 <builtIn_loadGame+0xbe>
        Close(fp);
    c058:	|  |   move.l 20(sp),12(sp)
    c05e:	|  |   move.l 190f0 <DOSBase>,d0
    c064:	|  |   movea.l d0,a6
    c066:	|  |   move.l 12(sp),d1
    c06a:	|  |   jsr -36(a6)
    c06e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    c072:	|  |   moveq #0,d0
    c074:	+--|-- bra.s c096 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    c076:	|  \-> move.l 190b4 <loadNow>,16(sp)
    c07e:	|      move.l 190e8 <SysBase>,d0
    c084:	|      movea.l d0,a6
    c086:	|      movea.l 16(sp),a1
    c08a:	|      jsr -690(a6)
    loadNow = NULL;
    c08e:	|      clr.l 190b4 <loadNow>
    return BR_CONTINUE;
    c094:	|      moveq #2,d0
}
    c096:	\----> move.l (sp)+,d2
    c098:	       movea.l (sp)+,a6
    c09a:	       lea 36(sp),sp
    c09e:	       rts

0000c0a0 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    c0a0:	move.l 191dc <sceneHeight>,d0
    c0a6:	move.l d0,d1
    c0a8:	move.l 191d8 <sceneWidth>,d0
    c0ae:	move.l d1,-(sp)
    c0b0:	move.l d0,-(sp)
    c0b2:	clr.l -(sp)
    c0b4:	clr.l -(sp)
    c0b6:	jsr a880 <blankScreen>
    c0bc:	lea 16(sp),sp
	return BR_CONTINUE;
    c0c0:	moveq #2,d0
}
    c0c2:	rts

0000c0c4 <builtIn_blankArea>:

builtIn(blankArea)
{
    c0c4:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c0c8:	       movea.l 24(sp),a0
    c0cc:	       move.l 24(a0),d0
    c0d0:	       move.l d0,-(sp)
    c0d2:	       pea 1 <_start+0x1>
    c0d6:	       lea 8(sp),a0
    c0da:	       move.l a0,-(sp)
    c0dc:	       jsr 11d5e <getValueType>
    c0e2:	       lea 12(sp),sp
    c0e6:	       tst.w d0
    c0e8:	   /-- bne.s c0f0 <builtIn_blankArea+0x2c>
    c0ea:	   |   moveq #1,d0
    c0ec:	/--|-- bra.w c1c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c0f0:	|  \-> moveq #24,d0
    c0f2:	|      add.l 24(sp),d0
    c0f6:	|      move.l d0,-(sp)
    c0f8:	|      jsr 126e2 <trimStack>
    c0fe:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c100:	|      movea.l 24(sp),a0
    c104:	|      move.l 24(a0),d0
    c108:	|      move.l d0,-(sp)
    c10a:	|      pea 1 <_start+0x1>
    c10e:	|      lea 12(sp),a0
    c112:	|      move.l a0,-(sp)
    c114:	|      jsr 11d5e <getValueType>
    c11a:	|      lea 12(sp),sp
    c11e:	|      tst.w d0
    c120:	|  /-- bne.s c128 <builtIn_blankArea+0x64>
    c122:	|  |   moveq #1,d0
    c124:	+--|-- bra.w c1c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c128:	|  \-> moveq #24,d0
    c12a:	|      add.l 24(sp),d0
    c12e:	|      move.l d0,-(sp)
    c130:	|      jsr 126e2 <trimStack>
    c136:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c138:	|      movea.l 24(sp),a0
    c13c:	|      move.l 24(a0),d0
    c140:	|      move.l d0,-(sp)
    c142:	|      pea 1 <_start+0x1>
    c146:	|      moveq #16,d0
    c148:	|      add.l sp,d0
    c14a:	|      move.l d0,-(sp)
    c14c:	|      jsr 11d5e <getValueType>
    c152:	|      lea 12(sp),sp
    c156:	|      tst.w d0
    c158:	|  /-- bne.s c15e <builtIn_blankArea+0x9a>
    c15a:	|  |   moveq #1,d0
    c15c:	+--|-- bra.s c1c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c15e:	|  \-> moveq #24,d0
    c160:	|      add.l 24(sp),d0
    c164:	|      move.l d0,-(sp)
    c166:	|      jsr 126e2 <trimStack>
    c16c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c16e:	|      movea.l 24(sp),a0
    c172:	|      move.l 24(a0),d0
    c176:	|      move.l d0,-(sp)
    c178:	|      pea 1 <_start+0x1>
    c17c:	|      moveq #20,d0
    c17e:	|      add.l sp,d0
    c180:	|      move.l d0,-(sp)
    c182:	|      jsr 11d5e <getValueType>
    c188:	|      lea 12(sp),sp
    c18c:	|      tst.w d0
    c18e:	|  /-- bne.s c194 <builtIn_blankArea+0xd0>
    c190:	|  |   moveq #1,d0
    c192:	+--|-- bra.s c1c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c194:	|  \-> moveq #24,d0
    c196:	|      add.l 24(sp),d0
    c19a:	|      move.l d0,-(sp)
    c19c:	|      jsr 126e2 <trimStack>
    c1a2:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    c1a4:	|      movea.l (sp),a1
    c1a6:	|      movea.l 4(sp),a0
    c1aa:	|      move.l 8(sp),d1
    c1ae:	|      move.l 12(sp),d0
    c1b2:	|      move.l a1,-(sp)
    c1b4:	|      move.l a0,-(sp)
    c1b6:	|      move.l d1,-(sp)
    c1b8:	|      move.l d0,-(sp)
    c1ba:	|      jsr a880 <blankScreen>
    c1c0:	|      lea 16(sp),sp
	return BR_CONTINUE;
    c1c4:	|      moveq #2,d0
}
    c1c6:	\----> lea 16(sp),sp
    c1ca:	       rts

0000c1cc <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    c1cc:	jsr a894 <darkScreen>
	return BR_CONTINUE;
    c1d2:	moveq #2,d0
}
    c1d4:	rts

0000c1d6 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    c1d6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1da:	       movea.l 20(sp),a0
    c1de:	       move.l 24(a0),d0
    c1e2:	       move.l d0,-(sp)
    c1e4:	       pea 1 <_start+0x1>
    c1e8:	       lea 8(sp),a0
    c1ec:	       move.l a0,-(sp)
    c1ee:	       jsr 11d5e <getValueType>
    c1f4:	       lea 12(sp),sp
    c1f8:	       tst.w d0
    c1fa:	   /-- bne.s c202 <builtIn_addOverlay+0x2c>
    c1fc:	   |   moveq #1,d0
    c1fe:	/--|-- bra.w c29a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c202:	|  \-> moveq #24,d0
    c204:	|      add.l 20(sp),d0
    c208:	|      move.l d0,-(sp)
    c20a:	|      jsr 126e2 <trimStack>
    c210:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c212:	|      movea.l 20(sp),a0
    c216:	|      move.l 24(a0),d0
    c21a:	|      move.l d0,-(sp)
    c21c:	|      pea 1 <_start+0x1>
    c220:	|      moveq #12,d0
    c222:	|      add.l sp,d0
    c224:	|      move.l d0,-(sp)
    c226:	|      jsr 11d5e <getValueType>
    c22c:	|      lea 12(sp),sp
    c230:	|      tst.w d0
    c232:	|  /-- bne.s c238 <builtIn_addOverlay+0x62>
    c234:	|  |   moveq #1,d0
    c236:	+--|-- bra.s c29a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c238:	|  \-> moveq #24,d0
    c23a:	|      add.l 20(sp),d0
    c23e:	|      move.l d0,-(sp)
    c240:	|      jsr 126e2 <trimStack>
    c246:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c248:	|      movea.l 20(sp),a0
    c24c:	|      move.l 24(a0),d0
    c250:	|      move.l d0,-(sp)
    c252:	|      pea 5 <_start+0x5>
    c256:	|      moveq #16,d0
    c258:	|      add.l sp,d0
    c25a:	|      move.l d0,-(sp)
    c25c:	|      jsr 11d5e <getValueType>
    c262:	|      lea 12(sp),sp
    c266:	|      tst.w d0
    c268:	|  /-- bne.s c26e <builtIn_addOverlay+0x98>
    c26a:	|  |   moveq #1,d0
    c26c:	+--|-- bra.s c29a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c26e:	|  \-> moveq #24,d0
    c270:	|      add.l 20(sp),d0
    c274:	|      move.l d0,-(sp)
    c276:	|      jsr 126e2 <trimStack>
    c27c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    c27e:	|      movea.l (sp),a0
    c280:	|      move.l 4(sp),d1
    c284:	|      move.l 8(sp),d0
    c288:	|      move.l a0,-(sp)
    c28a:	|      move.l d1,-(sp)
    c28c:	|      move.l d0,-(sp)
    c28e:	|      jsr a9b2 <loadBackDrop>
    c294:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c298:	|      moveq #2,d0
}
    c29a:	\----> lea 12(sp),sp
    c29e:	       rts

0000c2a0 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    c2a0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2a4:	       movea.l 20(sp),a0
    c2a8:	       move.l 24(a0),d0
    c2ac:	       move.l d0,-(sp)
    c2ae:	       pea 1 <_start+0x1>
    c2b2:	       lea 8(sp),a0
    c2b6:	       move.l a0,-(sp)
    c2b8:	       jsr 11d5e <getValueType>
    c2be:	       lea 12(sp),sp
    c2c2:	       tst.w d0
    c2c4:	   /-- bne.s c2cc <builtIn_mixOverlay+0x2c>
    c2c6:	   |   moveq #1,d0
    c2c8:	/--|-- bra.w c364 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c2cc:	|  \-> moveq #24,d0
    c2ce:	|      add.l 20(sp),d0
    c2d2:	|      move.l d0,-(sp)
    c2d4:	|      jsr 126e2 <trimStack>
    c2da:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2dc:	|      movea.l 20(sp),a0
    c2e0:	|      move.l 24(a0),d0
    c2e4:	|      move.l d0,-(sp)
    c2e6:	|      pea 1 <_start+0x1>
    c2ea:	|      moveq #12,d0
    c2ec:	|      add.l sp,d0
    c2ee:	|      move.l d0,-(sp)
    c2f0:	|      jsr 11d5e <getValueType>
    c2f6:	|      lea 12(sp),sp
    c2fa:	|      tst.w d0
    c2fc:	|  /-- bne.s c302 <builtIn_mixOverlay+0x62>
    c2fe:	|  |   moveq #1,d0
    c300:	+--|-- bra.s c364 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c302:	|  \-> moveq #24,d0
    c304:	|      add.l 20(sp),d0
    c308:	|      move.l d0,-(sp)
    c30a:	|      jsr 126e2 <trimStack>
    c310:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c312:	|      movea.l 20(sp),a0
    c316:	|      move.l 24(a0),d0
    c31a:	|      move.l d0,-(sp)
    c31c:	|      pea 5 <_start+0x5>
    c320:	|      moveq #16,d0
    c322:	|      add.l sp,d0
    c324:	|      move.l d0,-(sp)
    c326:	|      jsr 11d5e <getValueType>
    c32c:	|      lea 12(sp),sp
    c330:	|      tst.w d0
    c332:	|  /-- bne.s c338 <builtIn_mixOverlay+0x98>
    c334:	|  |   moveq #1,d0
    c336:	+--|-- bra.s c364 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c338:	|  \-> moveq #24,d0
    c33a:	|      add.l 20(sp),d0
    c33e:	|      move.l d0,-(sp)
    c340:	|      jsr 126e2 <trimStack>
    c346:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    c348:	|      movea.l (sp),a0
    c34a:	|      move.l 4(sp),d1
    c34e:	|      move.l 8(sp),d0
    c352:	|      move.l a0,-(sp)
    c354:	|      move.l d1,-(sp)
    c356:	|      move.l d0,-(sp)
    c358:	|      jsr aa28 <mixBackDrop>
    c35e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c362:	|      moveq #2,d0
}
    c364:	\----> lea 12(sp),sp
    c368:	       rts

0000c36a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    c36a:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c36e:	       movea.l 20(sp),a0
    c372:	       move.l 24(a0),d0
    c376:	       move.l d0,-(sp)
    c378:	       pea 1 <_start+0x1>
    c37c:	       lea 8(sp),a0
    c380:	       move.l a0,-(sp)
    c382:	       jsr 11d5e <getValueType>
    c388:	       lea 12(sp),sp
    c38c:	       tst.w d0
    c38e:	   /-- bne.s c396 <builtIn_pasteImage+0x2c>
    c390:	   |   moveq #1,d0
    c392:	/--|-- bra.w c426 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c396:	|  \-> moveq #24,d0
    c398:	|      add.l 20(sp),d0
    c39c:	|      move.l d0,-(sp)
    c39e:	|      jsr 126e2 <trimStack>
    c3a4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c3a6:	|      movea.l 20(sp),a0
    c3aa:	|      move.l 24(a0),d0
    c3ae:	|      move.l d0,-(sp)
    c3b0:	|      pea 1 <_start+0x1>
    c3b4:	|      moveq #12,d0
    c3b6:	|      add.l sp,d0
    c3b8:	|      move.l d0,-(sp)
    c3ba:	|      jsr 11d5e <getValueType>
    c3c0:	|      lea 12(sp),sp
    c3c4:	|      tst.w d0
    c3c6:	|  /-- bne.s c3cc <builtIn_pasteImage+0x62>
    c3c8:	|  |   moveq #1,d0
    c3ca:	+--|-- bra.s c426 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c3cc:	|  \-> moveq #24,d0
    c3ce:	|      add.l 20(sp),d0
    c3d2:	|      move.l d0,-(sp)
    c3d4:	|      jsr 126e2 <trimStack>
    c3da:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    c3dc:	|      movea.l 20(sp),a0
    c3e0:	|      move.l 24(a0),d0
    c3e4:	|      move.l d0,-(sp)
    c3e6:	|      jsr 12236 <getAnimationFromVar>
    c3ec:	|      addq.l #4,sp
    c3ee:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    c3f2:	|      moveq #24,d0
    c3f4:	|      add.l 20(sp),d0
    c3f8:	|      move.l d0,-(sp)
    c3fa:	|      jsr 126e2 <trimStack>
    c400:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    c402:	|      tst.l 8(sp)
    c406:	|  /-- bne.s c40c <builtIn_pasteImage+0xa2>
    c408:	|  |   moveq #2,d0
    c40a:	+--|-- bra.s c426 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    c40c:	|  \-> move.l (sp),d1
    c40e:	|      move.l 4(sp),d0
    c412:	|      move.l 8(sp),-(sp)
    c416:	|      move.l d1,-(sp)
    c418:	|      move.l d0,-(sp)
    c41a:	|      jsr de2 <pasteCursor>
    c420:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c424:	|      moveq #2,d0
}
    c426:	\----> lea 12(sp),sp
    c42a:	       rts

0000c42c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    c42c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c42e:	       movea.l 16(sp),a0
    c432:	       move.l 24(a0),d0
    c436:	       move.l d0,-(sp)
    c438:	       pea 1 <_start+0x1>
    c43c:	       move.l sp,d0
    c43e:	       addq.l #8,d0
    c440:	       move.l d0,-(sp)
    c442:	       jsr 11d5e <getValueType>
    c448:	       lea 12(sp),sp
    c44c:	       tst.w d0
    c44e:	   /-- bne.s c456 <builtIn_setSceneDimensions+0x2a>
    c450:	   |   moveq #1,d0
    c452:	/--|-- bra.w c4de <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c456:	|  \-> moveq #24,d0
    c458:	|      add.l 16(sp),d0
    c45c:	|      move.l d0,-(sp)
    c45e:	|      jsr 126e2 <trimStack>
    c464:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c466:	|      movea.l 16(sp),a0
    c46a:	|      move.l 24(a0),d0
    c46e:	|      move.l d0,-(sp)
    c470:	|      pea 1 <_start+0x1>
    c474:	|      moveq #12,d0
    c476:	|      add.l sp,d0
    c478:	|      move.l d0,-(sp)
    c47a:	|      jsr 11d5e <getValueType>
    c480:	|      lea 12(sp),sp
    c484:	|      tst.w d0
    c486:	|  /-- bne.s c48c <builtIn_setSceneDimensions+0x60>
    c488:	|  |   moveq #1,d0
    c48a:	+--|-- bra.s c4de <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c48c:	|  \-> moveq #24,d0
    c48e:	|      add.l 16(sp),d0
    c492:	|      move.l d0,-(sp)
    c494:	|      jsr 126e2 <trimStack>
    c49a:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    c49c:	|      move.l (sp),d1
    c49e:	|      move.l 4(sp),d0
    c4a2:	|      move.l d1,-(sp)
    c4a4:	|      move.l d0,-(sp)
    c4a6:	|      jsr aa72 <resizeBackdrop>
    c4ac:	|      addq.l #8,sp
    c4ae:	|      tst.w d0
    c4b0:	|  /-- beq.s c4ce <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    c4b2:	|  |   move.l (sp),d1
    c4b4:	|  |   move.l 4(sp),d0
    c4b8:	|  |   move.l d1,-(sp)
    c4ba:	|  |   move.l d0,-(sp)
    c4bc:	|  |   clr.l -(sp)
    c4be:	|  |   clr.l -(sp)
    c4c0:	|  |   jsr a880 <blankScreen>
    c4c6:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    c4ca:	|  |   moveq #2,d0
    c4cc:	+--|-- bra.s c4de <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    c4ce:	|  \-> pea 160c7 <custom.c.177df80b+0x13ee>
    c4d4:	|      jsr 13da6 <KPrintF>
    c4da:	|      addq.l #4,sp
	return BR_ERROR;
    c4dc:	|      moveq #1,d0
}
    c4de:	\----> addq.l #8,sp
    c4e0:	       rts

0000c4e2 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    c4e2:	          move.l d3,-(sp)
    c4e4:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c4e6:	          movea.l 16(sp),a0
    c4ea:	          move.l 24(a0),d0
    c4ee:	          move.l d0,-(sp)
    c4f0:	          pea 1 <_start+0x1>
    c4f4:	          pea 191fa <cameraY>
    c4fa:	          jsr 11d5e <getValueType>
    c500:	          lea 12(sp),sp
    c504:	          tst.w d0
    c506:	      /-- bne.s c50e <builtIn_aimCamera+0x2c>
    c508:	      |   moveq #1,d0
    c50a:	/-----|-- bra.w c790 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c50e:	|     \-> moveq #24,d0
    c510:	|         add.l 16(sp),d0
    c514:	|         move.l d0,-(sp)
    c516:	|         jsr 126e2 <trimStack>
    c51c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c51e:	|         movea.l 16(sp),a0
    c522:	|         move.l 24(a0),d0
    c526:	|         move.l d0,-(sp)
    c528:	|         pea 1 <_start+0x1>
    c52c:	|         pea 191f6 <cameraX>
    c532:	|         jsr 11d5e <getValueType>
    c538:	|         lea 12(sp),sp
    c53c:	|         tst.w d0
    c53e:	|     /-- bne.s c546 <builtIn_aimCamera+0x64>
    c540:	|     |   moveq #1,d0
    c542:	+-----|-- bra.w c790 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c546:	|     \-> moveq #24,d0
    c548:	|         add.l 16(sp),d0
    c54c:	|         move.l d0,-(sp)
    c54e:	|         jsr 126e2 <trimStack>
    c554:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    c556:	|         move.l 191f6 <cameraX>,d0
    c55c:	|         move.l d0,-(sp)
    c55e:	|         jsr 141e2 <__floatsisf>
    c564:	|         addq.l #4,sp
    c566:	|         move.l d0,d2
    c568:	|         move.l 1903c <winWidth>,d0
    c56e:	|         lsr.l #1,d0
    c570:	|         move.l d0,-(sp)
    c572:	|         jsr 1420a <__floatunsisf>
    c578:	|         addq.l #4,sp
    c57a:	|         move.l d0,d1
    c57c:	|         move.l 18aa0 <cameraZoom>,d0
    c582:	|         move.l d0,-(sp)
    c584:	|         move.l d1,-(sp)
    c586:	|         jsr 1408e <__divsf3>
    c58c:	|         addq.l #8,sp
    c58e:	|         move.l d0,-(sp)
    c590:	|         move.l d2,-(sp)
    c592:	|         jsr 144d6 <__subsf3>
    c598:	|         addq.l #8,sp
    c59a:	|         move.l d0,-(sp)
    c59c:	|         jsr 1417a <__fixsfsi>
    c5a2:	|         addq.l #4,sp
    c5a4:	|         move.l d0,191f6 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    c5aa:	|         move.l 191fa <cameraY>,d0
    c5b0:	|         move.l d0,-(sp)
    c5b2:	|         jsr 141e2 <__floatsisf>
    c5b8:	|         addq.l #4,sp
    c5ba:	|         move.l d0,d2
    c5bc:	|         move.l 19040 <winHeight>,d0
    c5c2:	|         lsr.l #1,d0
    c5c4:	|         move.l d0,-(sp)
    c5c6:	|         jsr 1420a <__floatunsisf>
    c5cc:	|         addq.l #4,sp
    c5ce:	|         move.l d0,d1
    c5d0:	|         move.l 18aa0 <cameraZoom>,d0
    c5d6:	|         move.l d0,-(sp)
    c5d8:	|         move.l d1,-(sp)
    c5da:	|         jsr 1408e <__divsf3>
    c5e0:	|         addq.l #8,sp
    c5e2:	|         move.l d0,-(sp)
    c5e4:	|         move.l d2,-(sp)
    c5e6:	|         jsr 144d6 <__subsf3>
    c5ec:	|         addq.l #8,sp
    c5ee:	|         move.l d0,-(sp)
    c5f0:	|         jsr 1417a <__fixsfsi>
    c5f6:	|         addq.l #4,sp
    c5f8:	|         move.l d0,191fa <cameraY>

	if (cameraX < 0) cameraX = 0;
    c5fe:	|         move.l 191f6 <cameraX>,d0
    c604:	|     /-- bpl.s c610 <builtIn_aimCamera+0x12e>
    c606:	|     |   clr.l 191f6 <cameraX>
    c60c:	|  /--|-- bra.w c6c6 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    c610:	|  |  \-> move.l 191f6 <cameraX>,d0
    c616:	|  |      move.l d0,-(sp)
    c618:	|  |      jsr 141e2 <__floatsisf>
    c61e:	|  |      addq.l #4,sp
    c620:	|  |      move.l d0,d2
    c622:	|  |      move.l 191d8 <sceneWidth>,d0
    c628:	|  |      move.l d0,-(sp)
    c62a:	|  |      jsr 1420a <__floatunsisf>
    c630:	|  |      addq.l #4,sp
    c632:	|  |      move.l d0,d3
    c634:	|  |      move.l 1903c <winWidth>,d0
    c63a:	|  |      move.l d0,-(sp)
    c63c:	|  |      jsr 1420a <__floatunsisf>
    c642:	|  |      addq.l #4,sp
    c644:	|  |      move.l d0,d1
    c646:	|  |      move.l 18aa0 <cameraZoom>,d0
    c64c:	|  |      move.l d0,-(sp)
    c64e:	|  |      move.l d1,-(sp)
    c650:	|  |      jsr 1408e <__divsf3>
    c656:	|  |      addq.l #8,sp
    c658:	|  |      move.l d0,-(sp)
    c65a:	|  |      move.l d3,-(sp)
    c65c:	|  |      jsr 144d6 <__subsf3>
    c662:	|  |      addq.l #8,sp
    c664:	|  |      move.l d0,-(sp)
    c666:	|  |      move.l d2,-(sp)
    c668:	|  |      jsr 1434e <__gtsf2>
    c66e:	|  |      addq.l #8,sp
    c670:	|  |      tst.l d0
    c672:	|  +----- ble.s c6c6 <builtIn_aimCamera+0x1e4>
    c674:	|  |      move.l 191d8 <sceneWidth>,d0
    c67a:	|  |      move.l d0,-(sp)
    c67c:	|  |      jsr 1420a <__floatunsisf>
    c682:	|  |      addq.l #4,sp
    c684:	|  |      move.l d0,d2
    c686:	|  |      move.l 1903c <winWidth>,d0
    c68c:	|  |      move.l d0,-(sp)
    c68e:	|  |      jsr 1420a <__floatunsisf>
    c694:	|  |      addq.l #4,sp
    c696:	|  |      move.l d0,d1
    c698:	|  |      move.l 18aa0 <cameraZoom>,d0
    c69e:	|  |      move.l d0,-(sp)
    c6a0:	|  |      move.l d1,-(sp)
    c6a2:	|  |      jsr 1408e <__divsf3>
    c6a8:	|  |      addq.l #8,sp
    c6aa:	|  |      move.l d0,-(sp)
    c6ac:	|  |      move.l d2,-(sp)
    c6ae:	|  |      jsr 144d6 <__subsf3>
    c6b4:	|  |      addq.l #8,sp
    c6b6:	|  |      move.l d0,-(sp)
    c6b8:	|  |      jsr 1417a <__fixsfsi>
    c6be:	|  |      addq.l #4,sp
    c6c0:	|  |      move.l d0,191f6 <cameraX>
	if (cameraY < 0) cameraY = 0;
    c6c6:	|  \----> move.l 191fa <cameraY>,d0
    c6cc:	|     /-- bpl.s c6d8 <builtIn_aimCamera+0x1f6>
    c6ce:	|     |   clr.l 191fa <cameraY>
    c6d4:	|  /--|-- bra.w c78e <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    c6d8:	|  |  \-> move.l 191fa <cameraY>,d0
    c6de:	|  |      move.l d0,-(sp)
    c6e0:	|  |      jsr 141e2 <__floatsisf>
    c6e6:	|  |      addq.l #4,sp
    c6e8:	|  |      move.l d0,d2
    c6ea:	|  |      move.l 191dc <sceneHeight>,d0
    c6f0:	|  |      move.l d0,-(sp)
    c6f2:	|  |      jsr 1420a <__floatunsisf>
    c6f8:	|  |      addq.l #4,sp
    c6fa:	|  |      move.l d0,d3
    c6fc:	|  |      move.l 19040 <winHeight>,d0
    c702:	|  |      move.l d0,-(sp)
    c704:	|  |      jsr 1420a <__floatunsisf>
    c70a:	|  |      addq.l #4,sp
    c70c:	|  |      move.l d0,d1
    c70e:	|  |      move.l 18aa0 <cameraZoom>,d0
    c714:	|  |      move.l d0,-(sp)
    c716:	|  |      move.l d1,-(sp)
    c718:	|  |      jsr 1408e <__divsf3>
    c71e:	|  |      addq.l #8,sp
    c720:	|  |      move.l d0,-(sp)
    c722:	|  |      move.l d3,-(sp)
    c724:	|  |      jsr 144d6 <__subsf3>
    c72a:	|  |      addq.l #8,sp
    c72c:	|  |      move.l d0,-(sp)
    c72e:	|  |      move.l d2,-(sp)
    c730:	|  |      jsr 1434e <__gtsf2>
    c736:	|  |      addq.l #8,sp
    c738:	|  |      tst.l d0
    c73a:	|  +----- ble.s c78e <builtIn_aimCamera+0x2ac>
    c73c:	|  |      move.l 191dc <sceneHeight>,d0
    c742:	|  |      move.l d0,-(sp)
    c744:	|  |      jsr 1420a <__floatunsisf>
    c74a:	|  |      addq.l #4,sp
    c74c:	|  |      move.l d0,d2
    c74e:	|  |      move.l 19040 <winHeight>,d0
    c754:	|  |      move.l d0,-(sp)
    c756:	|  |      jsr 1420a <__floatunsisf>
    c75c:	|  |      addq.l #4,sp
    c75e:	|  |      move.l d0,d1
    c760:	|  |      move.l 18aa0 <cameraZoom>,d0
    c766:	|  |      move.l d0,-(sp)
    c768:	|  |      move.l d1,-(sp)
    c76a:	|  |      jsr 1408e <__divsf3>
    c770:	|  |      addq.l #8,sp
    c772:	|  |      move.l d0,-(sp)
    c774:	|  |      move.l d2,-(sp)
    c776:	|  |      jsr 144d6 <__subsf3>
    c77c:	|  |      addq.l #8,sp
    c77e:	|  |      move.l d0,-(sp)
    c780:	|  |      jsr 1417a <__fixsfsi>
    c786:	|  |      addq.l #4,sp
    c788:	|  |      move.l d0,191fa <cameraY>
	return BR_CONTINUE;
    c78e:	|  \----> moveq #2,d0
}
    c790:	\-------> move.l (sp)+,d2
    c792:	          move.l (sp)+,d3
    c794:	          rts

0000c796 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    c796:	       subq.l #4,sp
    c798:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c79a:	       movea.l 16(sp),a0
    c79e:	       move.l 24(a0),d0
    c7a2:	       move.l d0,-(sp)
    c7a4:	       pea 1 <_start+0x1>
    c7a8:	       moveq #12,d0
    c7aa:	       add.l sp,d0
    c7ac:	       move.l d0,-(sp)
    c7ae:	       jsr 11d5e <getValueType>
    c7b4:	       lea 12(sp),sp
    c7b8:	       tst.w d0
    c7ba:	   /-- bne.s c7c2 <builtIn_zoomCamera+0x2c>
    c7bc:	   |   moveq #1,d0
    c7be:	/--|-- bra.w c9bc <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    c7c2:	|  \-> moveq #24,d0
    c7c4:	|      add.l 16(sp),d0
    c7c8:	|      move.l d0,-(sp)
    c7ca:	|      jsr 126e2 <trimStack>
    c7d0:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    c7d2:	|      move.l 190a4 <input+0xa>,d0
    c7d8:	|      move.l d0,-(sp)
    c7da:	|      jsr 141e2 <__floatsisf>
    c7e0:	|      addq.l #4,sp
    c7e2:	|      move.l d0,d1
    c7e4:	|      move.l 18aa0 <cameraZoom>,d0
    c7ea:	|      move.l d0,-(sp)
    c7ec:	|      move.l d1,-(sp)
    c7ee:	|      jsr 14294 <__mulsf3>
    c7f4:	|      addq.l #8,sp
    c7f6:	|      move.l d0,-(sp)
    c7f8:	|      jsr 1417a <__fixsfsi>
    c7fe:	|      addq.l #4,sp
    c800:	|      move.l d0,190a4 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    c806:	|      move.l 190a8 <input+0xe>,d0
    c80c:	|      move.l d0,-(sp)
    c80e:	|      jsr 141e2 <__floatsisf>
    c814:	|      addq.l #4,sp
    c816:	|      move.l d0,d1
    c818:	|      move.l 18aa0 <cameraZoom>,d0
    c81e:	|      move.l d0,-(sp)
    c820:	|      move.l d1,-(sp)
    c822:	|      jsr 14294 <__mulsf3>
    c828:	|      addq.l #8,sp
    c82a:	|      move.l d0,-(sp)
    c82c:	|      jsr 1417a <__fixsfsi>
    c832:	|      addq.l #4,sp
    c834:	|      move.l d0,190a8 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    c83a:	|      move.l 4(sp),d0
    c83e:	|      move.l d0,-(sp)
    c840:	|      jsr 141e2 <__floatsisf>
    c846:	|      addq.l #4,sp
    c848:	|      move.l #1008981770,-(sp)
    c84e:	|      move.l d0,-(sp)
    c850:	|      jsr 14294 <__mulsf3>
    c856:	|      addq.l #8,sp
    c858:	|      move.l d0,18aa0 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    c85e:	|      move.l 1903c <winWidth>,d0
    c864:	|      move.l d0,-(sp)
    c866:	|      jsr 1420a <__floatunsisf>
    c86c:	|      addq.l #4,sp
    c86e:	|      move.l d0,d1
    c870:	|      move.l 18aa0 <cameraZoom>,d0
    c876:	|      move.l d0,-(sp)
    c878:	|      move.l d1,-(sp)
    c87a:	|      jsr 1408e <__divsf3>
    c880:	|      addq.l #8,sp
    c882:	|      move.l d0,d2
    c884:	|      move.l 191d8 <sceneWidth>,d0
    c88a:	|      move.l d0,-(sp)
    c88c:	|      jsr 1420a <__floatunsisf>
    c892:	|      addq.l #4,sp
    c894:	|      move.l d0,-(sp)
    c896:	|      move.l d2,-(sp)
    c898:	|      jsr 1434e <__gtsf2>
    c89e:	|      addq.l #8,sp
    c8a0:	|      tst.l d0
    c8a2:	|  /-- ble.s c8d8 <builtIn_zoomCamera+0x142>
    c8a4:	|  |   move.l 1903c <winWidth>,d0
    c8aa:	|  |   move.l d0,-(sp)
    c8ac:	|  |   jsr 1420a <__floatunsisf>
    c8b2:	|  |   addq.l #4,sp
    c8b4:	|  |   move.l d0,d2
    c8b6:	|  |   move.l 191d8 <sceneWidth>,d0
    c8bc:	|  |   move.l d0,-(sp)
    c8be:	|  |   jsr 1420a <__floatunsisf>
    c8c4:	|  |   addq.l #4,sp
    c8c6:	|  |   move.l d0,-(sp)
    c8c8:	|  |   move.l d2,-(sp)
    c8ca:	|  |   jsr 1408e <__divsf3>
    c8d0:	|  |   addq.l #8,sp
    c8d2:	|  |   move.l d0,18aa0 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    c8d8:	|  \-> move.l 19040 <winHeight>,d0
    c8de:	|      move.l d0,-(sp)
    c8e0:	|      jsr 1420a <__floatunsisf>
    c8e6:	|      addq.l #4,sp
    c8e8:	|      move.l d0,d1
    c8ea:	|      move.l 18aa0 <cameraZoom>,d0
    c8f0:	|      move.l d0,-(sp)
    c8f2:	|      move.l d1,-(sp)
    c8f4:	|      jsr 1408e <__divsf3>
    c8fa:	|      addq.l #8,sp
    c8fc:	|      move.l d0,d2
    c8fe:	|      move.l 191dc <sceneHeight>,d0
    c904:	|      move.l d0,-(sp)
    c906:	|      jsr 1420a <__floatunsisf>
    c90c:	|      addq.l #4,sp
    c90e:	|      move.l d0,-(sp)
    c910:	|      move.l d2,-(sp)
    c912:	|      jsr 1434e <__gtsf2>
    c918:	|      addq.l #8,sp
    c91a:	|      tst.l d0
    c91c:	|  /-- ble.s c952 <builtIn_zoomCamera+0x1bc>
    c91e:	|  |   move.l 19040 <winHeight>,d0
    c924:	|  |   move.l d0,-(sp)
    c926:	|  |   jsr 1420a <__floatunsisf>
    c92c:	|  |   addq.l #4,sp
    c92e:	|  |   move.l d0,d2
    c930:	|  |   move.l 191dc <sceneHeight>,d0
    c936:	|  |   move.l d0,-(sp)
    c938:	|  |   jsr 1420a <__floatunsisf>
    c93e:	|  |   addq.l #4,sp
    c940:	|  |   move.l d0,-(sp)
    c942:	|  |   move.l d2,-(sp)
    c944:	|  |   jsr 1408e <__divsf3>
    c94a:	|  |   addq.l #8,sp
    c94c:	|  |   move.l d0,18aa0 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    c952:	|  \-> move.l 190a4 <input+0xa>,d0
    c958:	|      move.l d0,-(sp)
    c95a:	|      jsr 141e2 <__floatsisf>
    c960:	|      addq.l #4,sp
    c962:	|      move.l d0,d1
    c964:	|      move.l 18aa0 <cameraZoom>,d0
    c96a:	|      move.l d0,-(sp)
    c96c:	|      move.l d1,-(sp)
    c96e:	|      jsr 1408e <__divsf3>
    c974:	|      addq.l #8,sp
    c976:	|      move.l d0,-(sp)
    c978:	|      jsr 1417a <__fixsfsi>
    c97e:	|      addq.l #4,sp
    c980:	|      move.l d0,190a4 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    c986:	|      move.l 190a8 <input+0xe>,d0
    c98c:	|      move.l d0,-(sp)
    c98e:	|      jsr 141e2 <__floatsisf>
    c994:	|      addq.l #4,sp
    c996:	|      move.l d0,d1
    c998:	|      move.l 18aa0 <cameraZoom>,d0
    c99e:	|      move.l d0,-(sp)
    c9a0:	|      move.l d1,-(sp)
    c9a2:	|      jsr 1408e <__divsf3>
    c9a8:	|      addq.l #8,sp
    c9aa:	|      move.l d0,-(sp)
    c9ac:	|      jsr 1417a <__fixsfsi>
    c9b2:	|      addq.l #4,sp
    c9b4:	|      move.l d0,190a8 <input+0xe>

	return BR_CONTINUE;
    c9ba:	|      moveq #2,d0
}
    c9bc:	\----> move.l (sp)+,d2
    c9be:	       addq.l #4,sp
    c9c0:	       rts

0000c9c2 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    c9c2:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    c9c4:	             tst.l 8(sp)
    c9c8:	         /-- bne.s c9dc <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    c9ca:	         |   pea 160ec <custom.c.177df80b+0x1413>
    c9d0:	         |   jsr 13da6 <KPrintF>
    c9d6:	         |   addq.l #4,sp
		return BR_ERROR;
    c9d8:	         |   moveq #1,d0
    c9da:	/--------|-- bra.s ca3c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    c9dc:	|        \-> jsr c58 <rand>
    c9e2:	|            move.l d0,d1
    c9e4:	|            move.l 8(sp),d0
    c9e8:	|            move.l d0,-(sp)
    c9ea:	|            move.l d1,-(sp)
    c9ec:	|            jsr 1483e <__umodsi3>
    c9f2:	|            addq.l #8,sp
    c9f4:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    c9f6:	|     /----- bra.s ca2a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    c9f8:	|  /--|----> move.l (sp),d0
    c9fa:	|  |  |      cmp.l 8(sp),d0
    c9fe:	|  |  |  /-- bne.s ca1a <builtIn_pickOne+0x58>
    ca00:	|  |  |  |   moveq #28,d0
    ca02:	|  |  |  |   add.l 12(sp),d0
    ca06:	|  |  |  |   movea.l 12(sp),a0
    ca0a:	|  |  |  |   move.l 24(a0),d1
    ca0e:	|  |  |  |   move.l d0,-(sp)
    ca10:	|  |  |  |   move.l d1,-(sp)
    ca12:	|  |  |  |   jsr 12218 <copyVariable>
    ca18:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ca1a:	|  |  |  \-> moveq #24,d0
    ca1c:	|  |  |      add.l 12(sp),d0
    ca20:	|  |  |      move.l d0,-(sp)
    ca22:	|  |  |      jsr 126e2 <trimStack>
    ca28:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ca2a:	|  |  \----> move.l 8(sp),d0
    ca2e:	|  |         move.l d0,d1
    ca30:	|  |         subq.l #1,d1
    ca32:	|  |         move.l d1,8(sp)
    ca36:	|  |         tst.l d0
    ca38:	|  \-------- bne.s c9f8 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    ca3a:	|            moveq #2,d0
}
    ca3c:	\----------> addq.l #4,sp
    ca3e:	             rts

0000ca40 <builtIn_substring>:

builtIn(substring)
{
    ca40:	       lea -40(sp),sp
    ca44:	       move.l a6,-(sp)
    ca46:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ca48:	       movea.l 56(sp),a0
    ca4c:	       move.l 24(a0),d0
    ca50:	       move.l d0,-(sp)
    ca52:	       pea 1 <_start+0x1>
    ca56:	       lea 16(sp),a0
    ca5a:	       move.l a0,-(sp)
    ca5c:	       jsr 11d5e <getValueType>
    ca62:	       lea 12(sp),sp
    ca66:	       tst.w d0
    ca68:	   /-- bne.s ca70 <builtIn_substring+0x30>
    ca6a:	   |   moveq #1,d0
    ca6c:	/--|-- bra.w cbe8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ca70:	|  \-> moveq #24,d0
    ca72:	|      add.l 56(sp),d0
    ca76:	|      move.l d0,-(sp)
    ca78:	|      jsr 126e2 <trimStack>
    ca7e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ca80:	|      movea.l 56(sp),a0
    ca84:	|      move.l 24(a0),d0
    ca88:	|      move.l d0,-(sp)
    ca8a:	|      pea 1 <_start+0x1>
    ca8e:	|      lea 20(sp),a0
    ca92:	|      move.l a0,-(sp)
    ca94:	|      jsr 11d5e <getValueType>
    ca9a:	|      lea 12(sp),sp
    ca9e:	|      tst.w d0
    caa0:	|  /-- bne.s caa8 <builtIn_substring+0x68>
    caa2:	|  |   moveq #1,d0
    caa4:	+--|-- bra.w cbe8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    caa8:	|  \-> moveq #24,d0
    caaa:	|      add.l 56(sp),d0
    caae:	|      move.l d0,-(sp)
    cab0:	|      jsr 126e2 <trimStack>
    cab6:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    cab8:	|      movea.l 56(sp),a0
    cabc:	|      move.l 24(a0),d0
    cac0:	|      move.l d0,-(sp)
    cac2:	|      jsr 12334 <getTextFromAnyVar>
    cac8:	|      addq.l #4,sp
    caca:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    cace:	|      moveq #24,d0
    cad0:	|      add.l 56(sp),d0
    cad4:	|      move.l d0,-(sp)
    cad6:	|      jsr 126e2 <trimStack>
    cadc:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    cade:	|      move.l 44(sp),-(sp)
    cae2:	|      jsr 1124a <strlen>
    cae8:	|      addq.l #4,sp
    caea:	|      move.l d0,d1
    caec:	|      move.l 12(sp),d0
    caf0:	|      movea.l d0,a0
    caf2:	|      move.l 8(sp),d0
    caf6:	|      add.l a0,d0
    caf8:	|      cmp.l d1,d0
    cafa:	|  /-- bls.s cb30 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    cafc:	|  |   move.l 44(sp),-(sp)
    cb00:	|  |   jsr 1124a <strlen>
    cb06:	|  |   addq.l #4,sp
    cb08:	|  |   move.l d0,d1
    cb0a:	|  |   move.l 12(sp),d0
    cb0e:	|  |   sub.l d0,d1
    cb10:	|  |   move.l d1,d0
    cb12:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    cb16:	|  |   move.l 44(sp),-(sp)
    cb1a:	|  |   jsr 1124a <strlen>
    cb20:	|  |   addq.l #4,sp
    cb22:	|  |   move.l d0,d1
    cb24:	|  |   move.l 12(sp),d0
    cb28:	|  |   cmp.l d1,d0
    cb2a:	|  +-- bls.s cb30 <builtIn_substring+0xf0>
            start = 0;
    cb2c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    cb30:	|  \-> move.l 8(sp),d0
    cb34:	|  /-- bpl.s cb3a <builtIn_substring+0xfa>
        length = 0;
    cb36:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    cb3a:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    cb40:	|      move.l 12(sp),d1
    cb44:	|      move.l 8(sp),d0
    cb48:	|      move.l d1,d2
    cb4a:	|      add.l d0,d2
    cb4c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    cb50:	|      move.l 36(sp),d0
    cb54:	|      sub.l 40(sp),d0
    cb58:	|      addq.l #1,d0
    cb5a:	|      move.l d0,32(sp)
    cb5e:	|      clr.l 28(sp)
    cb62:	|      move.l 190e8 <SysBase>,d0
    cb68:	|      movea.l d0,a6
    cb6a:	|      move.l 32(sp),d0
    cb6e:	|      move.l 28(sp),d1
    cb72:	|      jsr -684(a6)
    cb76:	|      move.l d0,24(sp)
    cb7a:	|      move.l 24(sp),d0
    cb7e:	|      move.l d0,20(sp)
    if (!newString) {
    cb82:	|  /-- bne.s cb88 <builtIn_substring+0x148>
        return BR_ERROR;
    cb84:	|  |   moveq #1,d0
    cb86:	+--|-- bra.s cbe8 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    cb88:	|  \-> move.l 36(sp),d0
    cb8c:	|      sub.l 40(sp),d0
    cb90:	|      move.l d0,d1
    cb92:	|      move.l 40(sp),d0
    cb96:	|      add.l 44(sp),d0
    cb9a:	|      move.l d1,-(sp)
    cb9c:	|      move.l d0,-(sp)
    cb9e:	|      move.l 28(sp),-(sp)
    cba2:	|      jsr 13d5a <memcpy>
    cba8:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    cbac:	|      move.l 36(sp),d0
    cbb0:	|      sub.l 40(sp),d0
    cbb4:	|      movea.l 20(sp),a0
    cbb8:	|      adda.l d0,a0
    cbba:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    cbbc:	|      moveq #28,d0
    cbbe:	|      add.l 56(sp),d0
    cbc2:	|      move.l 20(sp),-(sp)
    cbc6:	|      move.l d0,-(sp)
    cbc8:	|      jsr 11f80 <makeTextVar>
    cbce:	|      addq.l #8,sp
    FreeVec(newString);
    cbd0:	|      move.l 20(sp),16(sp)
    cbd6:	|      move.l 190e8 <SysBase>,d0
    cbdc:	|      movea.l d0,a6
    cbde:	|      movea.l 16(sp),a1
    cbe2:	|      jsr -690(a6)
    return BR_CONTINUE;
    cbe6:	|      moveq #2,d0
}
    cbe8:	\----> move.l (sp)+,d2
    cbea:	       movea.l (sp)+,a6
    cbec:	       lea 40(sp),sp
    cbf0:	       rts

0000cbf2 <builtIn_stringLength>:

builtIn(stringLength)
{
    cbf2:	subq.l #8,sp
    cbf4:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    cbf6:	movea.l 20(sp),a0
    cbfa:	move.l 24(a0),d0
    cbfe:	move.l d0,-(sp)
    cc00:	jsr 12334 <getTextFromAnyVar>
    cc06:	addq.l #4,sp
    cc08:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    cc0c:	moveq #24,d0
    cc0e:	add.l 20(sp),d0
    cc12:	move.l d0,-(sp)
    cc14:	jsr 126e2 <trimStack>
    cc1a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    cc1c:	move.l 8(sp),-(sp)
    cc20:	jsr 1124a <strlen>
    cc26:	addq.l #4,sp
    cc28:	move.l d0,d1
    cc2a:	moveq #28,d0
    cc2c:	add.l 20(sp),d0
    cc30:	move.l d1,-(sp)
    cc32:	pea 1 <_start+0x1>
    cc36:	move.l d0,-(sp)
    cc38:	jsr 12650 <setVariable>
    cc3e:	lea 12(sp),sp
	FreeVec(newText);
    cc42:	move.l 8(sp),4(sp)
    cc48:	move.l 190e8 <SysBase>,d0
    cc4e:	movea.l d0,a6
    cc50:	movea.l 4(sp),a1
    cc54:	jsr -690(a6)
	return BR_CONTINUE;
    cc58:	moveq #2,d0
}
    cc5a:	movea.l (sp)+,a6
    cc5c:	addq.l #8,sp
    cc5e:	rts

0000cc60 <builtIn_newStack>:

builtIn(newStack)
{
    cc60:	             lea -12(sp),sp
    cc64:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    cc66:	             moveq #28,d0
    cc68:	             add.l 24(sp),d0
    cc6c:	             move.l d0,-(sp)
    cc6e:	             jsr 11fac <unlinkVar>
    cc74:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    cc76:	             movea.l 24(sp),a0
    cc7a:	             moveq #6,d0
    cc7c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    cc80:	             moveq #12,d1
    cc82:	             move.l d1,12(sp)
    cc86:	             clr.l 8(sp)
    cc8a:	             move.l 190e8 <SysBase>,d0
    cc90:	             movea.l d0,a6
    cc92:	             move.l 12(sp),d0
    cc96:	             move.l 8(sp),d1
    cc9a:	             jsr -684(a6)
    cc9e:	             move.l d0,4(sp)
    cca2:	             move.l 4(sp),d0
    cca6:	             movea.l 24(sp),a0
    ccaa:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    ccae:	             movea.l 24(sp),a0
    ccb2:	             move.l 32(a0),d0
    ccb6:	         /-- bne.s ccbe <builtIn_newStack+0x5e>
    ccb8:	         |   moveq #1,d0
    ccba:	/--------|-- bra.w cd50 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    ccbe:	|        \-> movea.l 24(sp),a0
    ccc2:	|            movea.l 32(a0),a0
    ccc6:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    ccc8:	|            movea.l 24(sp),a0
    cccc:	|            movea.l 32(a0),a0
    ccd0:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    ccd4:	|            movea.l 24(sp),a0
    ccd8:	|            movea.l 32(a0),a0
    ccdc:	|            moveq #1,d0
    ccde:	|            move.l d0,8(a0)
    
    while (numParams--) {
    cce2:	|     /----- bra.s cd3e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    cce4:	|  /--|----> movea.l 24(sp),a0
    cce8:	|  |  |      move.l 32(a0),d0
    ccec:	|  |  |      move.l d0,d1
    ccee:	|  |  |      movea.l 24(sp),a0
    ccf2:	|  |  |      move.l 24(a0),d0
    ccf6:	|  |  |      move.l d1,-(sp)
    ccf8:	|  |  |      move.l d0,-(sp)
    ccfa:	|  |  |      jsr 1159a <addVarToStack>
    cd00:	|  |  |      addq.l #8,sp
    cd02:	|  |  |      tst.w d0
    cd04:	|  |  |  /-- bne.s cd0a <builtIn_newStack+0xaa>
    cd06:	|  |  |  |   moveq #1,d0
    cd08:	+--|--|--|-- bra.s cd50 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    cd0a:	|  |  |  \-> movea.l 24(sp),a0
    cd0e:	|  |  |      movea.l 32(a0),a0
    cd12:	|  |  |      move.l 4(a0),d0
    cd16:	|  |  |  /-- bne.s cd2e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    cd18:	|  |  |  |   movea.l 24(sp),a0
    cd1c:	|  |  |  |   movea.l 32(a0),a1
    cd20:	|  |  |  |   movea.l 24(sp),a0
    cd24:	|  |  |  |   movea.l 32(a0),a0
    cd28:	|  |  |  |   move.l (a1),d0
    cd2a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    cd2e:	|  |  |  \-> moveq #24,d0
    cd30:	|  |  |      add.l 24(sp),d0
    cd34:	|  |  |      move.l d0,-(sp)
    cd36:	|  |  |      jsr 126e2 <trimStack>
    cd3c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    cd3e:	|  |  \----> move.l 20(sp),d0
    cd42:	|  |         move.l d0,d1
    cd44:	|  |         subq.l #1,d1
    cd46:	|  |         move.l d1,20(sp)
    cd4a:	|  |         tst.l d0
    cd4c:	|  \-------- bne.s cce4 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    cd4e:	|            moveq #2,d0
}
    cd50:	\----------> movea.l (sp)+,a6
    cd52:	             lea 12(sp),sp
    cd56:	             rts

0000cd58 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    cd58:	          movea.l 8(sp),a0
    cd5c:	          movea.l 24(a0),a0
    cd60:	          move.l (a0),d0
    cd62:	          moveq #6,d1
    cd64:	          cmp.l d0,d1
    cd66:	      /-- beq.s cd82 <builtIn_stackSize+0x2a>
    cd68:	      |   moveq #10,d1
    cd6a:	      |   cmp.l d0,d1
    cd6c:	   /--|-- beq.s cdc6 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    cd6e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    cd70:	   |  |   pea 1611f <custom.c.177df80b+0x1446>
    cd76:	   |  |   jsr 13da6 <KPrintF>
    cd7c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    cd7e:	   |  |   moveq #1,d0
    cd80:	/--|--|-- bra.s ce00 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    cd82:	|  |  \-> movea.l 8(sp),a0
    cd86:	|  |      movea.l 24(a0),a0
    cd8a:	|  |      move.l 4(a0),d0
    cd8e:	|  |      move.l d0,-(sp)
    cd90:	|  |      jsr 126be <stackSize>
    cd96:	|  |      addq.l #4,sp
    cd98:	|  |      move.l d0,d1
    cd9a:	|  |      moveq #28,d0
    cd9c:	|  |      add.l 8(sp),d0
    cda0:	|  |      move.l d1,-(sp)
    cda2:	|  |      pea 1 <_start+0x1>
    cda6:	|  |      move.l d0,-(sp)
    cda8:	|  |      jsr 12650 <setVariable>
    cdae:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    cdb2:	|  |      moveq #24,d0
    cdb4:	|  |      add.l 8(sp),d0
    cdb8:	|  |      move.l d0,-(sp)
    cdba:	|  |      jsr 126e2 <trimStack>
    cdc0:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    cdc2:	|  |      moveq #2,d0
    cdc4:	+--|----- bra.s ce00 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    cdc6:	|  \----> movea.l 8(sp),a0
    cdca:	|         movea.l 24(a0),a0
    cdce:	|         movea.l 4(a0),a0
    cdd2:	|         move.l 4(a0),d1
    cdd6:	|         moveq #28,d0
    cdd8:	|         add.l 8(sp),d0
    cddc:	|         move.l d1,-(sp)
    cdde:	|         pea 1 <_start+0x1>
    cde2:	|         move.l d0,-(sp)
    cde4:	|         jsr 12650 <setVariable>
    cdea:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    cdee:	|         moveq #24,d0
    cdf0:	|         add.l 8(sp),d0
    cdf4:	|         move.l d0,-(sp)
    cdf6:	|         jsr 126e2 <trimStack>
    cdfc:	|         addq.l #4,sp
			return BR_CONTINUE;
    cdfe:	|         moveq #2,d0
}
    ce00:	\-------> rts

0000ce02 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ce02:	       movea.l 8(sp),a0
    ce06:	       movea.l 24(a0),a0
    ce0a:	       move.l (a0),d0
    ce0c:	       moveq #6,d1
    ce0e:	       cmp.l d0,d1
    ce10:	   /-- beq.s ce24 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ce12:	   |   pea 16148 <custom.c.177df80b+0x146f>
    ce18:	   |   jsr 13da6 <KPrintF>
    ce1e:	   |   addq.l #4,sp
		return BR_ERROR;
    ce20:	   |   moveq #1,d0
    ce22:	/--|-- bra.s ce58 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    ce24:	|  \-> moveq #28,d0
    ce26:	|      add.l 8(sp),d0
    ce2a:	|      movea.l 8(sp),a0
    ce2e:	|      move.l 24(a0),d1
    ce32:	|      move.l d0,-(sp)
    ce34:	|      move.l d1,-(sp)
    ce36:	|      jsr 11864 <copyStack>
    ce3c:	|      addq.l #8,sp
    ce3e:	|      tst.w d0
    ce40:	|  /-- bne.s ce46 <builtIn_copyStack+0x44>
    ce42:	|  |   moveq #1,d0
    ce44:	+--|-- bra.s ce58 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    ce46:	|  \-> moveq #24,d0
    ce48:	|      add.l 8(sp),d0
    ce4c:	|      move.l d0,-(sp)
    ce4e:	|      jsr 126e2 <trimStack>
    ce54:	|      addq.l #4,sp
	return BR_CONTINUE;
    ce56:	|      moveq #2,d0
}
    ce58:	\----> rts

0000ce5a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ce5a:	       movea.l 8(sp),a0
    ce5e:	       movea.l 24(a0),a0
    ce62:	       movea.l 8(a0),a0
    ce66:	       move.l (a0),d0
    ce68:	       moveq #6,d1
    ce6a:	       cmp.l d0,d1
    ce6c:	   /-- beq.s ce82 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    ce6e:	   |   pea 16161 <custom.c.177df80b+0x1488>
    ce74:	   |   jsr 13da6 <KPrintF>
    ce7a:	   |   addq.l #4,sp
		return BR_ERROR;
    ce7c:	   |   moveq #1,d0
    ce7e:	/--|-- bra.w cf10 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ce82:	|  \-> movea.l 8(sp),a0
    ce86:	|      movea.l 24(a0),a0
    ce8a:	|      movea.l 8(a0),a0
    ce8e:	|      move.l 4(a0),d0
    ce92:	|      move.l d0,d1
    ce94:	|      movea.l 8(sp),a0
    ce98:	|      move.l 24(a0),d0
    ce9c:	|      move.l d1,-(sp)
    ce9e:	|      move.l d0,-(sp)
    cea0:	|      jsr 1159a <addVarToStack>
    cea6:	|      addq.l #8,sp
    cea8:	|      tst.w d0
    ceaa:	|  /-- bne.s ceb0 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    ceac:	|  |   moveq #1,d0
    ceae:	+--|-- bra.s cf10 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    ceb0:	|  \-> movea.l 8(sp),a0
    ceb4:	|      movea.l 24(a0),a0
    ceb8:	|      movea.l 8(a0),a0
    cebc:	|      movea.l 4(a0),a0
    cec0:	|      movea.l (a0),a0
    cec2:	|      move.l 8(a0),d0
    cec6:	|  /-- bne.s ceee <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    cec8:	|  |   movea.l 8(sp),a0
    cecc:	|  |   movea.l 24(a0),a0
    ced0:	|  |   movea.l 8(a0),a0
    ced4:	|  |   movea.l 4(a0),a1
    ced8:	|  |   movea.l 8(sp),a0
    cedc:	|  |   movea.l 24(a0),a0
    cee0:	|  |   movea.l 8(a0),a0
    cee4:	|  |   movea.l 4(a0),a0
    cee8:	|  |   move.l (a1),d0
    ceea:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    ceee:	|  \-> moveq #24,d0
    cef0:	|      add.l 8(sp),d0
    cef4:	|      move.l d0,-(sp)
    cef6:	|      jsr 126e2 <trimStack>
    cefc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    cefe:	|      moveq #24,d0
    cf00:	|      add.l 8(sp),d0
    cf04:	|      move.l d0,-(sp)
    cf06:	|      jsr 126e2 <trimStack>
    cf0c:	|      addq.l #4,sp
	return BR_CONTINUE;
    cf0e:	|      moveq #2,d0
}
    cf10:	\----> rts

0000cf12 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    cf12:	             movea.l 8(sp),a0
    cf16:	             movea.l 24(a0),a0
    cf1a:	             movea.l 8(a0),a0
    cf1e:	             move.l (a0),d0
    cf20:	             moveq #6,d1
    cf22:	             cmp.l d0,d1
    cf24:	         /-- beq.s cf3a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    cf26:	         |   pea 16161 <custom.c.177df80b+0x1488>
    cf2c:	         |   jsr 13da6 <KPrintF>
    cf32:	         |   addq.l #4,sp
		return BR_ERROR;
    cf34:	         |   moveq #1,d0
    cf36:	/--------|-- bra.w d028 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    cf3a:	|        \-> movea.l 8(sp),a0
    cf3e:	|            movea.l 24(a0),a0
    cf42:	|            movea.l 8(a0),a0
    cf46:	|            movea.l 4(a0),a0
    cf4a:	|            move.l (a0),d0
    cf4c:	|     /----- bne.s cfa6 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    cf4e:	|     |      movea.l 8(sp),a0
    cf52:	|     |      movea.l 24(a0),a0
    cf56:	|     |      movea.l 8(a0),a0
    cf5a:	|     |      move.l 4(a0),d0
    cf5e:	|     |      move.l d0,d1
    cf60:	|     |      movea.l 8(sp),a0
    cf64:	|     |      move.l 24(a0),d0
    cf68:	|     |      move.l d1,-(sp)
    cf6a:	|     |      move.l d0,-(sp)
    cf6c:	|     |      jsr 1159a <addVarToStack>
    cf72:	|     |      addq.l #8,sp
    cf74:	|     |      tst.w d0
    cf76:	|     |  /-- bne.s cf7e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    cf78:	|     |  |   moveq #1,d0
    cf7a:	+-----|--|-- bra.w d028 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    cf7e:	|     |  \-> movea.l 8(sp),a0
    cf82:	|     |      movea.l 24(a0),a0
    cf86:	|     |      movea.l 8(a0),a0
    cf8a:	|     |      movea.l 4(a0),a1
    cf8e:	|     |      movea.l 8(sp),a0
    cf92:	|     |      movea.l 24(a0),a0
    cf96:	|     |      movea.l 8(a0),a0
    cf9a:	|     |      movea.l 4(a0),a0
    cf9e:	|     |      move.l (a1),d0
    cfa0:	|     |      move.l d0,4(a0)
    cfa4:	|  /--|----- bra.s d006 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    cfa6:	|  |  \----> movea.l 8(sp),a0
    cfaa:	|  |         movea.l 24(a0),a0
    cfae:	|  |         movea.l 8(a0),a0
    cfb2:	|  |         movea.l 4(a0),a0
    cfb6:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    cfba:	|  |         move.l d0,d1
    cfbc:	|  |         addq.l #8,d1
    cfbe:	|  |         movea.l 8(sp),a0
    cfc2:	|  |         move.l 24(a0),d0
    cfc6:	|  |         move.l d1,-(sp)
    cfc8:	|  |         move.l d0,-(sp)
    cfca:	|  |         jsr 1159a <addVarToStack>
    cfd0:	|  |         addq.l #8,sp
    cfd2:	|  |         tst.w d0
    cfd4:	|  |     /-- bne.s cfda <builtIn_enqueue+0xc8>
			return BR_ERROR;
    cfd6:	|  |     |   moveq #1,d0
    cfd8:	+--|-----|-- bra.s d028 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    cfda:	|  |     \-> movea.l 8(sp),a0
    cfde:	|  |         movea.l 24(a0),a0
    cfe2:	|  |         movea.l 8(a0),a0
    cfe6:	|  |         movea.l 4(a0),a0
    cfea:	|  |         movea.l 4(a0),a1
    cfee:	|  |         movea.l 8(sp),a0
    cff2:	|  |         movea.l 24(a0),a0
    cff6:	|  |         movea.l 8(a0),a0
    cffa:	|  |         movea.l 4(a0),a0
    cffe:	|  |         move.l 8(a1),d0
    d002:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    d006:	|  \-------> moveq #24,d0
    d008:	|            add.l 8(sp),d0
    d00c:	|            move.l d0,-(sp)
    d00e:	|            jsr 126e2 <trimStack>
    d014:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    d016:	|            moveq #24,d0
    d018:	|            add.l 8(sp),d0
    d01c:	|            move.l d0,-(sp)
    d01e:	|            jsr 126e2 <trimStack>
    d024:	|            addq.l #4,sp
	return BR_CONTINUE;
    d026:	|            moveq #2,d0
}
    d028:	\----------> rts

0000d02a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    d02a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d02c:	       movea.l 12(sp),a0
    d030:	       movea.l 24(a0),a0
    d034:	       movea.l 8(a0),a0
    d038:	       move.l (a0),d0
    d03a:	       moveq #6,d1
    d03c:	       cmp.l d0,d1
    d03e:	   /-- beq.s d054 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d040:	   |   pea 16148 <custom.c.177df80b+0x146f>
    d046:	   |   jsr 13da6 <KPrintF>
    d04c:	   |   addq.l #4,sp
		return BR_ERROR;
    d04e:	   |   moveq #1,d0
    d050:	/--|-- bra.w d0ea <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    d054:	|  \-> movea.l 12(sp),a0
    d058:	|      movea.l 24(a0),a0
    d05c:	|      movea.l 8(a0),a0
    d060:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d064:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d066:	|      movea.l 12(sp),a0
    d06a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d06e:	|      clr.l -(sp)
    d070:	|      move.l d1,-(sp)
    d072:	|      move.l d0,-(sp)
    d074:	|      jsr 1193a <deleteVarFromStack>
    d07a:	|      lea 12(sp),sp
    d07e:	|      move.l d0,d1
    d080:	|      moveq #28,d0
    d082:	|      add.l 12(sp),d0
    d086:	|      move.l d1,-(sp)
    d088:	|      pea 1 <_start+0x1>
    d08c:	|      move.l d0,-(sp)
    d08e:	|      jsr 12650 <setVariable>
    d094:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d098:	|      movea.l 12(sp),a0
    d09c:	|      movea.l 24(a0),a0
    d0a0:	|      movea.l 8(a0),a0
    d0a4:	|      movea.l 4(a0),a0
    d0a8:	|      move.l (a0),d0
    d0aa:	|      movea.l 12(sp),a0
    d0ae:	|      movea.l 24(a0),a0
    d0b2:	|      movea.l 8(a0),a0
    d0b6:	|      movea.l 4(a0),a2
    d0ba:	|      move.l d0,-(sp)
    d0bc:	|      jsr 1269a <stackFindLast>
    d0c2:	|      addq.l #4,sp
    d0c4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d0c8:	|      moveq #24,d0
    d0ca:	|      add.l 12(sp),d0
    d0ce:	|      move.l d0,-(sp)
    d0d0:	|      jsr 126e2 <trimStack>
    d0d6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d0d8:	|      moveq #24,d0
    d0da:	|      add.l 12(sp),d0
    d0de:	|      move.l d0,-(sp)
    d0e0:	|      jsr 126e2 <trimStack>
    d0e6:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0e8:	|      moveq #2,d0
}
    d0ea:	\----> movea.l (sp)+,a2
    d0ec:	       rts

0000d0ee <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    d0ee:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d0f0:	       movea.l 12(sp),a0
    d0f4:	       movea.l 24(a0),a0
    d0f8:	       movea.l 8(a0),a0
    d0fc:	       move.l (a0),d0
    d0fe:	       moveq #6,d1
    d100:	       cmp.l d0,d1
    d102:	   /-- beq.s d118 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d104:	   |   pea 16148 <custom.c.177df80b+0x146f>
    d10a:	   |   jsr 13da6 <KPrintF>
    d110:	   |   addq.l #4,sp
		return BR_ERROR;
    d112:	   |   moveq #1,d0
    d114:	/--|-- bra.w d1b0 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    d118:	|  \-> movea.l 12(sp),a0
    d11c:	|      movea.l 24(a0),a0
    d120:	|      movea.l 8(a0),a0
    d124:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d128:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d12a:	|      movea.l 12(sp),a0
    d12e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d132:	|      pea 1 <_start+0x1>
    d136:	|      move.l d1,-(sp)
    d138:	|      move.l d0,-(sp)
    d13a:	|      jsr 1193a <deleteVarFromStack>
    d140:	|      lea 12(sp),sp
    d144:	|      move.l d0,d1
    d146:	|      moveq #28,d0
    d148:	|      add.l 12(sp),d0
    d14c:	|      move.l d1,-(sp)
    d14e:	|      pea 1 <_start+0x1>
    d152:	|      move.l d0,-(sp)
    d154:	|      jsr 12650 <setVariable>
    d15a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d15e:	|      movea.l 12(sp),a0
    d162:	|      movea.l 24(a0),a0
    d166:	|      movea.l 8(a0),a0
    d16a:	|      movea.l 4(a0),a0
    d16e:	|      move.l (a0),d0
    d170:	|      movea.l 12(sp),a0
    d174:	|      movea.l 24(a0),a0
    d178:	|      movea.l 8(a0),a0
    d17c:	|      movea.l 4(a0),a2
    d180:	|      move.l d0,-(sp)
    d182:	|      jsr 1269a <stackFindLast>
    d188:	|      addq.l #4,sp
    d18a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d18e:	|      moveq #24,d0
    d190:	|      add.l 12(sp),d0
    d194:	|      move.l d0,-(sp)
    d196:	|      jsr 126e2 <trimStack>
    d19c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d19e:	|      moveq #24,d0
    d1a0:	|      add.l 12(sp),d0
    d1a4:	|      move.l d0,-(sp)
    d1a6:	|      jsr 126e2 <trimStack>
    d1ac:	|      addq.l #4,sp
	return BR_CONTINUE;
    d1ae:	|      moveq #2,d0
}
    d1b0:	\----> movea.l (sp)+,a2
    d1b2:	       rts

0000d1b4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d1b4:	       movea.l 8(sp),a0
    d1b8:	       movea.l 24(a0),a0
    d1bc:	       move.l (a0),d0
    d1be:	       moveq #6,d1
    d1c0:	       cmp.l d0,d1
    d1c2:	   /-- beq.s d1d6 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    d1c4:	   |   pea 16148 <custom.c.177df80b+0x146f>
    d1ca:	   |   jsr 13da6 <KPrintF>
    d1d0:	   |   addq.l #4,sp
		return BR_ERROR;
    d1d2:	   |   moveq #1,d0
    d1d4:	/--|-- bra.s d240 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d1d6:	|  \-> movea.l 8(sp),a0
    d1da:	|      movea.l 24(a0),a0
    d1de:	|      movea.l 4(a0),a0
    d1e2:	|      move.l (a0),d0
    d1e4:	|  /-- bne.s d1f8 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    d1e6:	|  |   pea 16179 <custom.c.177df80b+0x14a0>
    d1ec:	|  |   jsr 13da6 <KPrintF>
    d1f2:	|  |   addq.l #4,sp
		return BR_ERROR;
    d1f4:	|  |   moveq #1,d0
    d1f6:	+--|-- bra.s d240 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d1f8:	|  \-> moveq #28,d0
    d1fa:	|      add.l 8(sp),d0
    d1fe:	|      movea.l 8(sp),a0
    d202:	|      movea.l 24(a0),a0
    d206:	|      movea.l 4(a0),a0
    d20a:	|      move.l (a0),d1
    d20c:	|      move.l d0,-(sp)
    d20e:	|      move.l d1,-(sp)
    d210:	|      jsr 12218 <copyVariable>
    d216:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    d218:	|      movea.l 8(sp),a0
    d21c:	|      movea.l 24(a0),a0
    d220:	|      move.l 4(a0),d0
    d224:	|      move.l d0,-(sp)
    d226:	|      jsr 126e2 <trimStack>
    d22c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d22e:	|      moveq #24,d0
    d230:	|      add.l 8(sp),d0
    d234:	|      move.l d0,-(sp)
    d236:	|      jsr 126e2 <trimStack>
    d23c:	|      addq.l #4,sp
	return BR_CONTINUE;
    d23e:	|      moveq #2,d0
}
    d240:	\----> rts

0000d242 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d242:	       movea.l 8(sp),a0
    d246:	       movea.l 24(a0),a0
    d24a:	       move.l (a0),d0
    d24c:	       moveq #6,d1
    d24e:	       cmp.l d0,d1
    d250:	   /-- beq.s d264 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    d252:	   |   pea 16148 <custom.c.177df80b+0x146f>
    d258:	   |   jsr 13da6 <KPrintF>
    d25e:	   |   addq.l #4,sp
		return BR_ERROR;
    d260:	   |   moveq #1,d0
    d262:	/--|-- bra.s d2b8 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d264:	|  \-> movea.l 8(sp),a0
    d268:	|      movea.l 24(a0),a0
    d26c:	|      movea.l 4(a0),a0
    d270:	|      move.l (a0),d0
    d272:	|  /-- bne.s d286 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    d274:	|  |   pea 16179 <custom.c.177df80b+0x14a0>
    d27a:	|  |   jsr 13da6 <KPrintF>
    d280:	|  |   addq.l #4,sp
		return BR_ERROR;
    d282:	|  |   moveq #1,d0
    d284:	+--|-- bra.s d2b8 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d286:	|  \-> moveq #28,d0
    d288:	|      add.l 8(sp),d0
    d28c:	|      movea.l 8(sp),a0
    d290:	|      movea.l 24(a0),a0
    d294:	|      movea.l 4(a0),a0
    d298:	|      move.l (a0),d1
    d29a:	|      move.l d0,-(sp)
    d29c:	|      move.l d1,-(sp)
    d29e:	|      jsr 12218 <copyVariable>
    d2a4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d2a6:	|      moveq #24,d0
    d2a8:	|      add.l 8(sp),d0
    d2ac:	|      move.l d0,-(sp)
    d2ae:	|      jsr 126e2 <trimStack>
    d2b4:	|      addq.l #4,sp
	return BR_CONTINUE;
    d2b6:	|      moveq #2,d0
}
    d2b8:	\----> rts

0000d2ba <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d2ba:	       movea.l 8(sp),a0
    d2be:	       movea.l 24(a0),a0
    d2c2:	       move.l (a0),d0
    d2c4:	       moveq #6,d1
    d2c6:	       cmp.l d0,d1
    d2c8:	   /-- beq.s d2dc <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    d2ca:	   |   pea 16148 <custom.c.177df80b+0x146f>
    d2d0:	   |   jsr 13da6 <KPrintF>
    d2d6:	   |   addq.l #4,sp
		return BR_ERROR;
    d2d8:	   |   moveq #1,d0
    d2da:	/--|-- bra.s d332 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d2dc:	|  \-> movea.l 8(sp),a0
    d2e0:	|      movea.l 24(a0),a0
    d2e4:	|      movea.l 4(a0),a0
    d2e8:	|      move.l (a0),d0
    d2ea:	|  /-- bne.s d2fe <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    d2ec:	|  |   pea 16179 <custom.c.177df80b+0x14a0>
    d2f2:	|  |   jsr 13da6 <KPrintF>
    d2f8:	|  |   addq.l #4,sp
		return BR_ERROR;
    d2fa:	|  |   moveq #1,d0
    d2fc:	+--|-- bra.s d332 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    d2fe:	|  \-> moveq #28,d0
    d300:	|      add.l 8(sp),d0
    d304:	|      movea.l 8(sp),a0
    d308:	|      movea.l 24(a0),a0
    d30c:	|      movea.l 4(a0),a0
    d310:	|      move.l 4(a0),d1
    d314:	|      move.l d0,-(sp)
    d316:	|      move.l d1,-(sp)
    d318:	|      jsr 12218 <copyVariable>
    d31e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d320:	|      moveq #24,d0
    d322:	|      add.l 8(sp),d0
    d326:	|      move.l d0,-(sp)
    d328:	|      jsr 126e2 <trimStack>
    d32e:	|      addq.l #4,sp
	return BR_CONTINUE;
    d330:	|      moveq #2,d0
}
    d332:	\----> rts

0000d334 <builtIn_random>:

builtIn(random)
{
    d334:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    d336:	       movea.l 12(sp),a0
    d33a:	       move.l 24(a0),d0
    d33e:	       move.l d0,-(sp)
    d340:	       pea 1 <_start+0x1>
    d344:	       move.l sp,d0
    d346:	       addq.l #8,d0
    d348:	       move.l d0,-(sp)
    d34a:	       jsr 11d5e <getValueType>
    d350:	       lea 12(sp),sp
    d354:	       tst.w d0
    d356:	   /-- bne.s d35c <builtIn_random+0x28>
		return BR_ERROR;
    d358:	   |   moveq #1,d0
    d35a:	/--|-- bra.s d3a6 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    d35c:	|  \-> moveq #24,d0
    d35e:	|      add.l 12(sp),d0
    d362:	|      move.l d0,-(sp)
    d364:	|      jsr 126e2 <trimStack>
    d36a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    d36c:	|      move.l (sp),d0
    d36e:	|  /-- bgt.s d374 <builtIn_random+0x40>
    d370:	|  |   moveq #1,d0
    d372:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    d374:	|  \-> jsr c58 <rand>
    d37a:	|      move.l d0,d1
    d37c:	|      move.l (sp),d0
    d37e:	|      move.l d0,-(sp)
    d380:	|      move.l d1,-(sp)
    d382:	|      jsr 1483e <__umodsi3>
    d388:	|      addq.l #8,sp
    d38a:	|      move.l d0,d1
    d38c:	|      moveq #28,d0
    d38e:	|      add.l 12(sp),d0
    d392:	|      move.l d1,-(sp)
    d394:	|      pea 1 <_start+0x1>
    d398:	|      move.l d0,-(sp)
    d39a:	|      jsr 12650 <setVariable>
    d3a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d3a4:	|      moveq #2,d0
}
    d3a6:	\----> addq.l #4,sp
    d3a8:	       rts

0000d3aa <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    d3aa:	nop
    d3ac:	rts

0000d3ae <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    d3ae:	moveq #2,d0
}
    d3b0:	rts

0000d3b2 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    d3b2:	moveq #2,d0
}
    d3b4:	rts

0000d3b6 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d3b6:	moveq #2,d0
}
    d3b8:	rts

0000d3ba <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d3ba:	moveq #2,d0
}
    d3bc:	rts

0000d3be <builtIn_setFont>:


builtIn(setFont)
{
    d3be:	       lea -16(sp),sp
    d3c2:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d3c4:	       movea.l 28(sp),a0
    d3c8:	       move.l 24(a0),d0
    d3cc:	       move.l d0,-(sp)
    d3ce:	       pea 1 <_start+0x1>
    d3d2:	       lea 12(sp),a0
    d3d6:	       move.l a0,-(sp)
    d3d8:	       jsr 11d5e <getValueType>
    d3de:	       lea 12(sp),sp
    d3e2:	       tst.w d0
    d3e4:	   /-- bne.s d3ec <builtIn_setFont+0x2e>
    d3e6:	   |   moveq #1,d0
    d3e8:	/--|-- bra.w d49a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    d3ec:	|  \-> moveq #24,d0
    d3ee:	|      add.l 28(sp),d0
    d3f2:	|      move.l d0,-(sp)
    d3f4:	|      jsr 126e2 <trimStack>
    d3fa:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d3fc:	|      movea.l 28(sp),a0
    d400:	|      move.l 24(a0),d0
    d404:	|      move.l d0,-(sp)
    d406:	|      jsr 12334 <getTextFromAnyVar>
    d40c:	|      addq.l #4,sp
    d40e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    d412:	|  /-- bne.s d41a <builtIn_setFont+0x5c>
    d414:	|  |   moveq #1,d0
    d416:	+--|-- bra.w d49a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    d41a:	|  \-> moveq #24,d0
    d41c:	|      add.l 28(sp),d0
    d420:	|      move.l d0,-(sp)
    d422:	|      jsr 126e2 <trimStack>
    d428:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    d42a:	|      movea.l 28(sp),a0
    d42e:	|      move.l 24(a0),d0
    d432:	|      move.l d0,-(sp)
    d434:	|      pea 5 <_start+0x5>
    d438:	|      lea 16(sp),a0
    d43c:	|      move.l a0,-(sp)
    d43e:	|      jsr 11d5e <getValueType>
    d444:	|      lea 12(sp),sp
    d448:	|      tst.w d0
    d44a:	|  /-- bne.s d450 <builtIn_setFont+0x92>
    d44c:	|  |   moveq #1,d0
    d44e:	+--|-- bra.s d49a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    d450:	|  \-> moveq #24,d0
    d452:	|      add.l 28(sp),d0
    d456:	|      move.l d0,-(sp)
    d458:	|      jsr 126e2 <trimStack>
    d45e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    d460:	|      move.l 4(sp),d1
    d464:	|      move.l 8(sp),d0
    d468:	|      move.l d1,-(sp)
    d46a:	|      move.l 20(sp),-(sp)
    d46e:	|      move.l d0,-(sp)
    d470:	|      jsr 12756 <loadFont>
    d476:	|      lea 12(sp),sp
    d47a:	|      tst.w d0
    d47c:	|  /-- bne.s d482 <builtIn_setFont+0xc4>
    d47e:	|  |   moveq #1,d0
    d480:	+--|-- bra.s d49a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    d482:	|  \-> move.l 16(sp),12(sp)
    d488:	|      move.l 190e8 <SysBase>,d0
    d48e:	|      movea.l d0,a6
    d490:	|      movea.l 12(sp),a1
    d494:	|      jsr -690(a6)

    return BR_CONTINUE;
    d498:	|      moveq #2,d0
}
    d49a:	\----> movea.l (sp)+,a6
    d49c:	       lea 16(sp),sp
    d4a0:	       rts

0000d4a2 <builtIn_inFont>:

builtIn(inFont)
{
    d4a2:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d4a4:	       movea.l 12(sp),a0
    d4a8:	       move.l 24(a0),d0
    d4ac:	       move.l d0,-(sp)
    d4ae:	       jsr 12334 <getTextFromAnyVar>
    d4b4:	       addq.l #4,sp
    d4b6:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    d4b8:	   /-- bne.s d4be <builtIn_inFont+0x1c>
    d4ba:	   |   moveq #1,d0
    d4bc:	/--|-- bra.s d4f4 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    d4be:	|  \-> moveq #24,d0
    d4c0:	|      add.l 12(sp),d0
    d4c4:	|      move.l d0,-(sp)
    d4c6:	|      jsr 126e2 <trimStack>
    d4cc:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    d4ce:	|      move.l (sp),-(sp)
    d4d0:	|      jsr 1272a <isInFont>
    d4d6:	|      addq.l #4,sp
    d4d8:	|      movea.w d0,a0
    d4da:	|      moveq #28,d0
    d4dc:	|      add.l 12(sp),d0
    d4e0:	|      move.l a0,-(sp)
    d4e2:	|      pea 1 <_start+0x1>
    d4e6:	|      move.l d0,-(sp)
    d4e8:	|      jsr 12650 <setVariable>
    d4ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d4f2:	|      moveq #2,d0
}
    d4f4:	\----> addq.l #4,sp
    d4f6:	       rts

0000d4f8 <builtIn_pasteString>:

builtIn(pasteString)
{
    d4f8:	       lea -16(sp),sp
    d4fc:	       move.l a6,-(sp)
    d4fe:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d500:	       movea.l 32(sp),a0
    d504:	       move.l 24(a0),d0
    d508:	       move.l d0,-(sp)
    d50a:	       jsr 12334 <getTextFromAnyVar>
    d510:	       addq.l #4,sp
    d512:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    d516:	       moveq #24,d0
    d518:	       add.l 32(sp),d0
    d51c:	       move.l d0,-(sp)
    d51e:	       jsr 126e2 <trimStack>
    d524:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d526:	       movea.l 32(sp),a0
    d52a:	       move.l 24(a0),d0
    d52e:	       move.l d0,-(sp)
    d530:	       pea 1 <_start+0x1>
    d534:	       lea 20(sp),a0
    d538:	       move.l a0,-(sp)
    d53a:	       jsr 11d5e <getValueType>
    d540:	       lea 12(sp),sp
    d544:	       tst.w d0
    d546:	   /-- bne.s d54e <builtIn_pasteString+0x56>
    d548:	   |   moveq #1,d0
    d54a:	/--|-- bra.w d5d6 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d54e:	|  \-> moveq #24,d0
    d550:	|      add.l 32(sp),d0
    d554:	|      move.l d0,-(sp)
    d556:	|      jsr 126e2 <trimStack>
    d55c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d55e:	|      movea.l 32(sp),a0
    d562:	|      move.l 24(a0),d0
    d566:	|      move.l d0,-(sp)
    d568:	|      pea 1 <_start+0x1>
    d56c:	|      lea 16(sp),a0
    d570:	|      move.l a0,-(sp)
    d572:	|      jsr 11d5e <getValueType>
    d578:	|      lea 12(sp),sp
    d57c:	|      tst.w d0
    d57e:	|  /-- bne.s d584 <builtIn_pasteString+0x8c>
    d580:	|  |   moveq #1,d0
    d582:	+--|-- bra.s d5d6 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d584:	|  \-> moveq #24,d0
    d586:	|      add.l 32(sp),d0
    d58a:	|      move.l d0,-(sp)
    d58c:	|      jsr 126e2 <trimStack>
    d592:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    d594:	|      move.l 8(sp),d0
    d598:	|      cmpi.l #65535,d0
    d59e:	|  /-- bne.s d5be <builtIn_pasteString+0xc6>
    d5a0:	|  |   move.l 1903c <winWidth>,d2
    d5a6:	|  |   move.l 20(sp),-(sp)
    d5aa:	|  |   jsr 1273c <stringWidth>
    d5b0:	|  |   addq.l #4,sp
    d5b2:	|  |   move.l d2,d1
    d5b4:	|  |   sub.l d0,d1
    d5b6:	|  |   move.l d1,d0
    d5b8:	|  |   lsr.l #1,d0
    d5ba:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    d5be:	|  \-> move.l 20(sp),16(sp)
    d5c4:	|      move.l 190e8 <SysBase>,d0
    d5ca:	|      movea.l d0,a6
    d5cc:	|      movea.l 16(sp),a1
    d5d0:	|      jsr -690(a6)
    return BR_CONTINUE;
    d5d4:	|      moveq #2,d0
}
    d5d6:	\----> move.l (sp)+,d2
    d5d8:	       movea.l (sp)+,a6
    d5da:	       lea 16(sp),sp
    d5de:	       rts

0000d5e0 <builtIn_anim>:

builtIn(anim)
{
    d5e0:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    d5e4:	       moveq #1,d0
    d5e6:	       cmp.l 16(sp),d0
    d5ea:	   /-- blt.s d600 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    d5ec:	   |   pea 1618c <custom.c.177df80b+0x14b3>
    d5f2:	   |   jsr 13da6 <KPrintF>
    d5f8:	   |   addq.l #4,sp
		return BR_ERROR;
    d5fa:	   |   moveq #1,d0
    d5fc:	/--|-- bra.w d68e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    d600:	|  \-> moveq #24,d1
    d602:	|      add.l 20(sp),d1
    d606:	|      move.l 16(sp),d0
    d60a:	|      subq.l #1,d0
    d60c:	|      move.l d1,-(sp)
    d60e:	|      move.l d0,-(sp)
    d610:	|      jsr 6fc8 <createPersonaAnim>
    d616:	|      addq.l #8,sp
    d618:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d61c:	|      movea.l 20(sp),a0
    d620:	|      move.l 24(a0),d0
    d624:	|      move.l d0,-(sp)
    d626:	|      pea 5 <_start+0x5>
    d62a:	|      lea 8(sp),a0
    d62e:	|      move.l a0,-(sp)
    d630:	|      jsr 11d5e <getValueType>
    d636:	|      lea 12(sp),sp
    d63a:	|      tst.w d0
    d63c:	|  /-- bne.s d642 <builtIn_anim+0x62>
    d63e:	|  |   moveq #1,d0
    d640:	+--|-- bra.s d68e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    d642:	|  \-> moveq #24,d0
    d644:	|      add.l 20(sp),d0
    d648:	|      move.l d0,-(sp)
    d64a:	|      jsr 126e2 <trimStack>
    d650:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    d652:	|      move.l (sp),d0
    d654:	|      move.l d0,-(sp)
    d656:	|      jsr 99b6 <loadBankForAnim>
    d65c:	|      addq.l #4,sp
    d65e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    d662:	|  /-- bne.s d668 <builtIn_anim+0x88>
    d664:	|  |   moveq #1,d0
    d666:	+--|-- bra.s d68e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    d668:	|  \-> move.l 4(sp),-(sp)
    d66c:	|      move.l 12(sp),-(sp)
    d670:	|      jsr 8d6a <setBankFile>
    d676:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    d678:	|      moveq #28,d0
    d67a:	|      add.l 20(sp),d0
    d67e:	|      move.l 8(sp),-(sp)
    d682:	|      move.l d0,-(sp)
    d684:	|      jsr 1260c <newAnimationVariable>
    d68a:	|      addq.l #8,sp
	return BR_CONTINUE;
    d68c:	|      moveq #2,d0
}
    d68e:	\----> lea 12(sp),sp
    d692:	       rts

0000d694 <builtIn_costume>:

builtIn(costume)
{
    d694:	          lea -32(sp),sp
    d698:	          move.l a6,-(sp)
    d69a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    d69c:	          moveq #8,d0
    d69e:	          move.l d0,32(sp)
    d6a2:	          clr.l 28(sp)
    d6a6:	          move.l 190e8 <SysBase>,d0
    d6ac:	          movea.l d0,a6
    d6ae:	          move.l 32(sp),d0
    d6b2:	          move.l 28(sp),d1
    d6b6:	          jsr -684(a6)
    d6ba:	          move.l d0,24(sp)
    d6be:	          move.l 24(sp),d0
    d6c2:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    d6c6:	      /-- bne.s d6ce <builtIn_costume+0x3a>
    d6c8:	      |   moveq #1,d0
    d6ca:	/-----|-- bra.w d7b6 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    d6ce:	|     \-> move.l 44(sp),d0
    d6d2:	|         pea 3 <_start+0x3>
    d6d6:	|         move.l d0,-(sp)
    d6d8:	|         jsr 147e2 <__divsi3>
    d6de:	|         addq.l #8,sp
    d6e0:	|         movea.l 20(sp),a0
    d6e4:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    d6e8:	|         tst.l 44(sp)
    d6ec:	|     /-- beq.s d702 <builtIn_costume+0x6e>
    d6ee:	|     |   movea.l 20(sp),a0
    d6f2:	|     |   move.l 4(a0),d1
    d6f6:	|     |   move.l d1,d0
    d6f8:	|     |   add.l d0,d0
    d6fa:	|     |   add.l d1,d0
    d6fc:	|     |   cmp.l 44(sp),d0
    d700:	|  /--|-- beq.s d716 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    d702:	|  |  \-> pea 161c6 <custom.c.177df80b+0x14ed>
    d708:	|  |      jsr 13da6 <KPrintF>
    d70e:	|  |      addq.l #4,sp
        return BR_ERROR;
    d710:	|  |      moveq #1,d0
    d712:	+--|----- bra.w d7b6 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    d716:	|  \----> move.l 44(sp),d0
    d71a:	|         add.l d0,d0
    d71c:	|         add.l d0,d0
    d71e:	|         move.l d0,16(sp)
    d722:	|         clr.l 12(sp)
    d726:	|         move.l 190e8 <SysBase>,d0
    d72c:	|         movea.l d0,a6
    d72e:	|         move.l 16(sp),d0
    d732:	|         move.l 12(sp),d1
    d736:	|         jsr -684(a6)
    d73a:	|         move.l d0,8(sp)
    d73e:	|         move.l 8(sp),d0
    d742:	|         movea.l 20(sp),a0
    d746:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    d748:	|         movea.l 20(sp),a0
    d74c:	|         move.l (a0),d0
    d74e:	|     /-- bne.s d754 <builtIn_costume+0xc0>
    d750:	|     |   moveq #1,d0
    d752:	+-----|-- bra.s d7b6 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    d754:	|     \-> move.l 44(sp),d0
    d758:	|         subq.l #1,d0
    d75a:	|         move.l d0,36(sp)
    d75e:	|     /-- bra.s d79a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    d760:	|  /--|-> movea.l 48(sp),a0
    d764:	|  |  |   move.l 24(a0),d0
    d768:	|  |  |   movea.l 20(sp),a0
    d76c:	|  |  |   movea.l (a0),a0
    d76e:	|  |  |   move.l 36(sp),d1
    d772:	|  |  |   add.l d1,d1
    d774:	|  |  |   add.l d1,d1
    d776:	|  |  |   lea (0,a0,d1.l),a2
    d77a:	|  |  |   move.l d0,-(sp)
    d77c:	|  |  |   jsr 12236 <getAnimationFromVar>
    d782:	|  |  |   addq.l #4,sp
    d784:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    d786:	|  |  |   moveq #24,d0
    d788:	|  |  |   add.l 48(sp),d0
    d78c:	|  |  |   move.l d0,-(sp)
    d78e:	|  |  |   jsr 126e2 <trimStack>
    d794:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    d796:	|  |  |   subq.l #1,36(sp)
    d79a:	|  |  \-> tst.l 36(sp)
    d79e:	|  \----- bge.s d760 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    d7a0:	|         moveq #28,d0
    d7a2:	|         add.l 48(sp),d0
    d7a6:	|         move.l 20(sp),-(sp)
    d7aa:	|         move.l d0,-(sp)
    d7ac:	|         jsr 1262e <newCostumeVariable>
    d7b2:	|         addq.l #8,sp
    return BR_CONTINUE;
    d7b4:	|         moveq #2,d0
}
    d7b6:	\-------> movea.l (sp)+,a2
    d7b8:	          movea.l (sp)+,a6
    d7ba:	          lea 32(sp),sp
    d7be:	          rts

0000d7c0 <builtIn_launch>:

builtIn(launch)
{
    d7c0:	          lea -20(sp),sp
    d7c4:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    d7c6:	          movea.l 32(sp),a0
    d7ca:	          move.l 24(a0),d0
    d7ce:	          move.l d0,-(sp)
    d7d0:	          jsr 12334 <getTextFromAnyVar>
    d7d6:	          addq.l #4,sp
    d7d8:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    d7dc:	      /-- bne.s d7e4 <builtIn_launch+0x24>
    d7de:	      |   moveq #1,d0
    d7e0:	/-----|-- bra.w d912 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    d7e4:	|     \-> move.l 20(sp),-(sp)
    d7e8:	|         jsr 2fe <encodeFilename>
    d7ee:	|         addq.l #4,sp
    d7f0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    d7f4:	|         moveq #24,d0
    d7f6:	|         add.l 32(sp),d0
    d7fa:	|         move.l d0,-(sp)
    d7fc:	|         jsr 126e2 <trimStack>
    d802:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    d804:	|         movea.l 20(sp),a0
    d808:	|         move.b (a0),d0
    d80a:	|         cmpi.b #104,d0
    d80e:	|  /----- bne.s d878 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    d810:	|  |      movea.l 20(sp),a0
    d814:	|  |      addq.l #1,a0
    d816:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    d818:	|  |      cmpi.b #116,d0
    d81c:	|  +----- bne.s d878 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    d81e:	|  |      movea.l 20(sp),a0
    d822:	|  |      addq.l #2,a0
    d824:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    d826:	|  |      cmpi.b #116,d0
    d82a:	|  +----- bne.s d878 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    d82c:	|  |      movea.l 20(sp),a0
    d830:	|  |      addq.l #3,a0
    d832:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    d834:	|  |      cmpi.b #112,d0
    d838:	|  +----- bne.s d878 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d83a:	|  |      movea.l 20(sp),a0
    d83e:	|  |      addq.l #4,a0
    d840:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    d842:	|  |      cmpi.b #58,d0
    d846:	|  |  /-- beq.s d864 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d848:	|  |  |   movea.l 20(sp),a0
    d84c:	|  |  |   addq.l #4,a0
    d84e:	|  |  |   move.b (a0),d0
    d850:	|  |  |   cmpi.b #115,d0
    d854:	|  +--|-- bne.s d878 <builtIn_launch+0xb8>
    d856:	|  |  |   movea.l 20(sp),a0
    d85a:	|  |  |   addq.l #5,a0
    d85c:	|  |  |   move.b (a0),d0
    d85e:	|  |  |   cmpi.b #58,d0
    d862:	|  +--|-- bne.s d878 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    d864:	|  |  \-> move.l 20(sp),-(sp)
    d868:	|  |      jsr b8 <copyString>
    d86e:	|  |      addq.l #4,sp
    d870:	|  |      move.l d0,191fe <launchMe>
    d876:	|  |  /-- bra.s d8ca <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    d878:	|  \--|-> move.l 19050 <gamePath>,d0
    d87e:	|     |   pea 16211 <custom.c.177df80b+0x1538>
    d884:	|     |   move.l d0,-(sp)
    d886:	|     |   jsr 1128a <joinStrings>
    d88c:	|     |   addq.l #8,sp
    d88e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    d892:	|     |   move.l 16(sp),-(sp)
    d896:	|     |   move.l 16(sp),-(sp)
    d89a:	|     |   jsr 1128a <joinStrings>
    d8a0:	|     |   addq.l #8,sp
    d8a2:	|     |   move.l d0,191fe <launchMe>
        FreeVec(newText);
    d8a8:	|     |   move.l 16(sp),8(sp)
    d8ae:	|     |   move.l 190e8 <SysBase>,d0
    d8b4:	|     |   movea.l d0,a6
    d8b6:	|     |   movea.l 8(sp),a1
    d8ba:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    d8be:	|     |   move.l 191fe <launchMe>,d0
    d8c4:	|     +-- bne.s d8ca <builtIn_launch+0x10a>
    d8c6:	|     |   moveq #1,d0
    d8c8:	+-----|-- bra.s d912 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    d8ca:	|     \-> move.l 20(sp),4(sp)
    d8d0:	|         move.l 190e8 <SysBase>,d0
    d8d6:	|         movea.l d0,a6
    d8d8:	|         movea.l 4(sp),a1
    d8dc:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    d8e0:	|         clr.l -(sp)
    d8e2:	|         jsr 1ea2 <setGraphicsWindow>
    d8e8:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    d8ea:	|         moveq #28,d0
    d8ec:	|         add.l 32(sp),d0
    d8f0:	|         pea 1 <_start+0x1>
    d8f4:	|         pea 1 <_start+0x1>
    d8f8:	|         move.l d0,-(sp)
    d8fa:	|         jsr 12650 <setVariable>
    d900:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    d904:	|         moveq #28,d0
    d906:	|         add.l 32(sp),d0
    d90a:	|         move.l d0,19202 <launchResult>

    return BR_KEEP_AND_PAUSE;
    d910:	|         moveq #0,d0
}
    d912:	\-------> movea.l (sp)+,a6
    d914:	          lea 20(sp),sp
    d918:	          rts

0000d91a <builtIn_pause>:

builtIn(pause)
{
    d91a:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d91c:	       movea.l 12(sp),a0
    d920:	       move.l 24(a0),d0
    d924:	       move.l d0,-(sp)
    d926:	       pea 1 <_start+0x1>
    d92a:	       move.l sp,d0
    d92c:	       addq.l #8,d0
    d92e:	       move.l d0,-(sp)
    d930:	       jsr 11d5e <getValueType>
    d936:	       lea 12(sp),sp
    d93a:	       tst.w d0
    d93c:	   /-- bne.s d942 <builtIn_pause+0x28>
    d93e:	   |   moveq #1,d0
    d940:	/--|-- bra.s d970 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    d942:	|  \-> moveq #24,d0
    d944:	|      add.l 12(sp),d0
    d948:	|      move.l d0,-(sp)
    d94a:	|      jsr 126e2 <trimStack>
    d950:	|      addq.l #4,sp
	if (theTime > 0) {
    d952:	|      move.l (sp),d0
    d954:	|  /-- ble.s d96e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    d956:	|  |   move.l (sp),d0
    d958:	|  |   subq.l #1,d0
    d95a:	|  |   movea.l 12(sp),a0
    d95e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    d962:	|  |   movea.l 12(sp),a0
    d966:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    d96a:	|  |   moveq #0,d0
    d96c:	+--|-- bra.s d970 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    d96e:	|  \-> moveq #2,d0
}
    d970:	\----> addq.l #4,sp
    d972:	       rts

0000d974 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    d974:	jsr 25f6 <completeTimers>
	return BR_CONTINUE;
    d97a:	moveq #2,d0
}
    d97c:	rts

0000d97e <builtIn_callEvent>:

builtIn(callEvent)
{
    d97e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d982:	       movea.l 20(sp),a0
    d986:	       move.l 24(a0),d0
    d98a:	       move.l d0,-(sp)
    d98c:	       pea 7 <_start+0x7>
    d990:	       lea 8(sp),a0
    d994:	       move.l a0,-(sp)
    d996:	       jsr 11d5e <getValueType>
    d99c:	       lea 12(sp),sp
    d9a0:	       tst.w d0
    d9a2:	   /-- bne.s d9aa <builtIn_callEvent+0x2c>
    d9a4:	   |   moveq #1,d0
    d9a6:	/--|-- bra.w da40 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d9aa:	|  \-> moveq #24,d0
    d9ac:	|      add.l 20(sp),d0
    d9b0:	|      move.l d0,-(sp)
    d9b2:	|      jsr 126e2 <trimStack>
    d9b8:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9ba:	|      movea.l 20(sp),a0
    d9be:	|      move.l 24(a0),d0
    d9c2:	|      move.l d0,-(sp)
    d9c4:	|      pea 7 <_start+0x7>
    d9c8:	|      moveq #12,d0
    d9ca:	|      add.l sp,d0
    d9cc:	|      move.l d0,-(sp)
    d9ce:	|      jsr 11d5e <getValueType>
    d9d4:	|      lea 12(sp),sp
    d9d8:	|      tst.w d0
    d9da:	|  /-- bne.s d9e0 <builtIn_callEvent+0x62>
    d9dc:	|  |   moveq #1,d0
    d9de:	+--|-- bra.s da40 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d9e0:	|  \-> moveq #24,d0
    d9e2:	|      add.l 20(sp),d0
    d9e6:	|      move.l d0,-(sp)
    d9e8:	|      jsr 126e2 <trimStack>
    d9ee:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    d9f0:	|      move.l (sp),d1
    d9f2:	|      move.l 4(sp),d0
    d9f6:	|      move.l d1,-(sp)
    d9f8:	|      move.l d0,-(sp)
    d9fa:	|      jsr abc8 <getCombinationFunction>
    da00:	|      addq.l #8,sp
    da02:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    da06:	|  /-- beq.s da26 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    da08:	|  |   moveq #28,d0
    da0a:	|  |   add.l 20(sp),d0
    da0e:	|  |   move.l 8(sp),-(sp)
    da12:	|  |   pea 2 <_start+0x2>
    da16:	|  |   move.l d0,-(sp)
    da18:	|  |   jsr 12650 <setVariable>
    da1e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    da22:	|  |   moveq #4,d0
    da24:	+--|-- bra.s da40 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    da26:	|  \-> moveq #28,d0
    da28:	|      add.l 20(sp),d0
    da2c:	|      clr.l -(sp)
    da2e:	|      pea 1 <_start+0x1>
    da32:	|      move.l d0,-(sp)
    da34:	|      jsr 12650 <setVariable>
    da3a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da3e:	|      moveq #2,d0
}
    da40:	\----> lea 12(sp),sp
    da44:	       rts

0000da46 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    da46:	move.w #1,1920e <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    da4e:	moveq #2,d0
}
    da50:	rts

0000da52 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    da52:	moveq #24,d0
    da54:	add.l 8(sp),d0
    da58:	move.l d0,-(sp)
    da5a:	jsr 126e2 <trimStack>
    da60:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    da62:	pea 16213 <custom.c.177df80b+0x153a>
    da68:	jsr 13da6 <KPrintF>
    da6e:	addq.l #4,sp
	return BR_CONTINUE;
    da70:	moveq #2,d0
}
    da72:	rts

0000da74 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    da74:	pea 16213 <custom.c.177df80b+0x153a>
    da7a:	jsr 13da6 <KPrintF>
    da80:	addq.l #4,sp
	return BR_CONTINUE;
    da82:	moveq #2,d0
}
    da84:	rts

0000da86 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    da86:	pea 16213 <custom.c.177df80b+0x153a>
    da8c:	jsr 13da6 <KPrintF>
    da92:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    da94:	moveq #2,d0
}
    da96:	rts

0000da98 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    da98:	pea 16213 <custom.c.177df80b+0x153a>
    da9e:	jsr 13da6 <KPrintF>
    daa4:	addq.l #4,sp
	return BR_CONTINUE;
    daa6:	moveq #2,d0
}
    daa8:	rts

0000daaa <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    daaa:	pea 16213 <custom.c.177df80b+0x153a>
    dab0:	jsr 13da6 <KPrintF>
    dab6:	addq.l #4,sp
	return BR_CONTINUE;
    dab8:	moveq #2,d0
}
    daba:	rts

0000dabc <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    dabc:	pea 16213 <custom.c.177df80b+0x153a>
    dac2:	jsr 13da6 <KPrintF>
    dac8:	addq.l #4,sp
	return BR_CONTINUE;
    daca:	moveq #2,d0
}
    dacc:	rts

0000dace <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    dace:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dad2:	       movea.l 20(sp),a0
    dad6:	       move.l 24(a0),d0
    dada:	       move.l d0,-(sp)
    dadc:	       pea 1 <_start+0x1>
    dae0:	       moveq #16,d0
    dae2:	       add.l sp,d0
    dae4:	       move.l d0,-(sp)
    dae6:	       jsr 11d5e <getValueType>
    daec:	       lea 12(sp),sp
    daf0:	       tst.w d0
    daf2:	   /-- bne.s dafa <builtIn_startMusic+0x2c>
    daf4:	   |   moveq #1,d0
    daf6:	/--|-- bra.w db9a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    dafa:	|  \-> moveq #24,d0
    dafc:	|      add.l 20(sp),d0
    db00:	|      move.l d0,-(sp)
    db02:	|      jsr 126e2 <trimStack>
    db08:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db0a:	|      movea.l 20(sp),a0
    db0e:	|      move.l 24(a0),d0
    db12:	|      move.l d0,-(sp)
    db14:	|      pea 1 <_start+0x1>
    db18:	|      moveq #12,d0
    db1a:	|      add.l sp,d0
    db1c:	|      move.l d0,-(sp)
    db1e:	|      jsr 11d5e <getValueType>
    db24:	|      lea 12(sp),sp
    db28:	|      tst.w d0
    db2a:	|  /-- bne.s db30 <builtIn_startMusic+0x62>
    db2c:	|  |   moveq #1,d0
    db2e:	+--|-- bra.s db9a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    db30:	|  \-> moveq #24,d0
    db32:	|      add.l 20(sp),d0
    db36:	|      move.l d0,-(sp)
    db38:	|      jsr 126e2 <trimStack>
    db3e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    db40:	|      movea.l 20(sp),a0
    db44:	|      move.l 24(a0),d0
    db48:	|      move.l d0,-(sp)
    db4a:	|      pea 5 <_start+0x5>
    db4e:	|      lea 8(sp),a0
    db52:	|      move.l a0,-(sp)
    db54:	|      jsr 11d5e <getValueType>
    db5a:	|      lea 12(sp),sp
    db5e:	|      tst.w d0
    db60:	|  /-- bne.s db66 <builtIn_startMusic+0x98>
    db62:	|  |   moveq #1,d0
    db64:	+--|-- bra.s db9a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    db66:	|  \-> moveq #24,d0
    db68:	|      add.l 20(sp),d0
    db6c:	|      move.l d0,-(sp)
    db6e:	|      jsr 126e2 <trimStack>
    db74:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    db76:	|      movea.l 8(sp),a0
    db7a:	|      move.l 4(sp),d1
    db7e:	|      move.l (sp),d0
    db80:	|      move.l a0,-(sp)
    db82:	|      move.l d1,-(sp)
    db84:	|      move.l d0,-(sp)
    db86:	|      jsr a7e0 <playMOD>
    db8c:	|      lea 12(sp),sp
    db90:	|      tst.w d0
    db92:	|  /-- bne.s db98 <builtIn_startMusic+0xca>
    db94:	|  |   moveq #2,d0
    db96:	+--|-- bra.s db9a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    db98:	|  \-> moveq #2,d0
}
    db9a:	\----> lea 12(sp),sp
    db9e:	       rts

0000dba0 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    dba0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dba2:	       movea.l 12(sp),a0
    dba6:	       move.l 24(a0),d0
    dbaa:	       move.l d0,-(sp)
    dbac:	       pea 1 <_start+0x1>
    dbb0:	       move.l sp,d0
    dbb2:	       addq.l #8,d0
    dbb4:	       move.l d0,-(sp)
    dbb6:	       jsr 11d5e <getValueType>
    dbbc:	       lea 12(sp),sp
    dbc0:	       tst.w d0
    dbc2:	   /-- bne.s dbc8 <builtIn_stopMusic+0x28>
    dbc4:	   |   moveq #1,d0
    dbc6:	/--|-- bra.s dbe6 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    dbc8:	|  \-> moveq #24,d0
    dbca:	|      add.l 12(sp),d0
    dbce:	|      move.l d0,-(sp)
    dbd0:	|      jsr 126e2 <trimStack>
    dbd6:	|      addq.l #4,sp
	stopMOD (v);
    dbd8:	|      move.l (sp),d0
    dbda:	|      move.l d0,-(sp)
    dbdc:	|      jsr a87c <stopMOD>
    dbe2:	|      addq.l #4,sp
	return BR_CONTINUE;
    dbe4:	|      moveq #2,d0
}
    dbe6:	\----> addq.l #4,sp
    dbe8:	       rts

0000dbea <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    dbea:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbec:	       movea.l 16(sp),a0
    dbf0:	       move.l 24(a0),d0
    dbf4:	       move.l d0,-(sp)
    dbf6:	       pea 1 <_start+0x1>
    dbfa:	       move.l sp,d0
    dbfc:	       addq.l #8,d0
    dbfe:	       move.l d0,-(sp)
    dc00:	       jsr 11d5e <getValueType>
    dc06:	       lea 12(sp),sp
    dc0a:	       tst.w d0
    dc0c:	   /-- bne.s dc12 <builtIn_setMusicVolume+0x28>
    dc0e:	   |   moveq #1,d0
    dc10:	/--|-- bra.s dc6c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    dc12:	|  \-> moveq #24,d0
    dc14:	|      add.l 16(sp),d0
    dc18:	|      move.l d0,-(sp)
    dc1a:	|      jsr 126e2 <trimStack>
    dc20:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc22:	|      movea.l 16(sp),a0
    dc26:	|      move.l 24(a0),d0
    dc2a:	|      move.l d0,-(sp)
    dc2c:	|      pea 1 <_start+0x1>
    dc30:	|      moveq #12,d0
    dc32:	|      add.l sp,d0
    dc34:	|      move.l d0,-(sp)
    dc36:	|      jsr 11d5e <getValueType>
    dc3c:	|      lea 12(sp),sp
    dc40:	|      tst.w d0
    dc42:	|  /-- bne.s dc48 <builtIn_setMusicVolume+0x5e>
    dc44:	|  |   moveq #1,d0
    dc46:	+--|-- bra.s dc6c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    dc48:	|  \-> moveq #24,d0
    dc4a:	|      add.l 16(sp),d0
    dc4e:	|      move.l d0,-(sp)
    dc50:	|      jsr 126e2 <trimStack>
    dc56:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    dc58:	|      move.l (sp),d1
    dc5a:	|      move.l 4(sp),d0
    dc5e:	|      move.l d1,-(sp)
    dc60:	|      move.l d0,-(sp)
    dc62:	|      jsr a862 <setMusicVolume>
    dc68:	|      addq.l #8,sp
	return BR_CONTINUE;
    dc6a:	|      moveq #2,d0
}
    dc6c:	\----> addq.l #8,sp
    dc6e:	       rts

0000dc70 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    dc70:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc72:	       movea.l 12(sp),a0
    dc76:	       move.l 24(a0),d0
    dc7a:	       move.l d0,-(sp)
    dc7c:	       pea 1 <_start+0x1>
    dc80:	       move.l sp,d0
    dc82:	       addq.l #8,d0
    dc84:	       move.l d0,-(sp)
    dc86:	       jsr 11d5e <getValueType>
    dc8c:	       lea 12(sp),sp
    dc90:	       tst.w d0
    dc92:	   /-- bne.s dc98 <builtIn_setDefaultMusicVolume+0x28>
    dc94:	   |   moveq #1,d0
    dc96:	/--|-- bra.s dcb6 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    dc98:	|  \-> moveq #24,d0
    dc9a:	|      add.l 12(sp),d0
    dc9e:	|      move.l d0,-(sp)
    dca0:	|      jsr 126e2 <trimStack>
    dca6:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    dca8:	|      move.l (sp),d0
    dcaa:	|      move.l d0,-(sp)
    dcac:	|      jsr a846 <setDefaultMusicVolume>
    dcb2:	|      addq.l #4,sp
	return BR_CONTINUE;
    dcb4:	|      moveq #2,d0
}
    dcb6:	\----> addq.l #4,sp
    dcb8:	       rts

0000dcba <builtIn_playSound>:

builtIn(playSound)
{
    dcba:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dcbc:	       movea.l 12(sp),a0
    dcc0:	       move.l 24(a0),d0
    dcc4:	       move.l d0,-(sp)
    dcc6:	       pea 5 <_start+0x5>
    dcca:	       move.l sp,d0
    dccc:	       addq.l #8,d0
    dcce:	       move.l d0,-(sp)
    dcd0:	       jsr 11d5e <getValueType>
    dcd6:	       lea 12(sp),sp
    dcda:	       tst.w d0
    dcdc:	   /-- bne.s dce2 <builtIn_playSound+0x28>
    dcde:	   |   moveq #1,d0
    dce0:	/--|-- bra.s dd0a <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    dce2:	|  \-> moveq #24,d0
    dce4:	|      add.l 12(sp),d0
    dce8:	|      move.l d0,-(sp)
    dcea:	|      jsr 126e2 <trimStack>
    dcf0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    dcf2:	|      move.l (sp),d0
    dcf4:	|      clr.l -(sp)
    dcf6:	|      move.l d0,-(sp)
    dcf8:	|      jsr a86a <startSound>
    dcfe:	|      addq.l #8,sp
    dd00:	|      tst.w d0
    dd02:	|  /-- bne.s dd08 <builtIn_playSound+0x4e>
    dd04:	|  |   moveq #2,d0
    dd06:	+--|-- bra.s dd0a <builtIn_playSound+0x50>
	return BR_CONTINUE;
    dd08:	|  \-> moveq #2,d0
}
    dd0a:	\----> addq.l #4,sp
    dd0c:	       rts

0000dd0e <builtIn_loopSound>:

builtIn(loopSound)
{
    dd0e:	             lea -28(sp),sp
    dd12:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    dd14:	             tst.l 36(sp)
    dd18:	         /-- bgt.s dd2e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    dd1a:	         |   pea 16236 <custom.c.177df80b+0x155d>
    dd20:	         |   jsr 13da6 <KPrintF>
    dd26:	         |   addq.l #4,sp
		return BR_ERROR;
    dd28:	         |   moveq #1,d0
    dd2a:	/--------|-- bra.w deea <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    dd2e:	|        \-> moveq #1,d0
    dd30:	|            cmp.l 36(sp),d0
    dd34:	|     /----- blt.s dd90 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    dd36:	|     |      movea.l 40(sp),a0
    dd3a:	|     |      move.l 24(a0),d0
    dd3e:	|     |      move.l d0,-(sp)
    dd40:	|     |      pea 5 <_start+0x5>
    dd44:	|     |      lea 16(sp),a0
    dd48:	|     |      move.l a0,-(sp)
    dd4a:	|     |      jsr 11d5e <getValueType>
    dd50:	|     |      lea 12(sp),sp
    dd54:	|     |      tst.w d0
    dd56:	|     |  /-- bne.s dd5e <builtIn_loopSound+0x50>
    dd58:	|     |  |   moveq #1,d0
    dd5a:	+-----|--|-- bra.w deea <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    dd5e:	|     |  \-> moveq #24,d0
    dd60:	|     |      add.l 40(sp),d0
    dd64:	|     |      move.l d0,-(sp)
    dd66:	|     |      jsr 126e2 <trimStack>
    dd6c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    dd6e:	|     |      move.l 8(sp),d0
    dd72:	|     |      pea 1 <_start+0x1>
    dd76:	|     |      move.l d0,-(sp)
    dd78:	|     |      jsr a86a <startSound>
    dd7e:	|     |      addq.l #8,sp
    dd80:	|     |      tst.w d0
    dd82:	|     |  /-- bne.s dd8a <builtIn_loopSound+0x7c>
    dd84:	|     |  |   moveq #2,d0
    dd86:	+-----|--|-- bra.w deea <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    dd8a:	|     |  \-> moveq #2,d0
    dd8c:	+-----|----- bra.w deea <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    dd90:	|     \----> moveq #2,d1
    dd92:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    dd96:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    dd9a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    dd9e:	|            movea.l 40(sp),a0
    dda2:	|            movea.l 24(a0),a0
    dda6:	|            move.l (a0),d0
    dda8:	|            moveq #5,d1
    ddaa:	|            cmp.l d0,d1
    ddac:	|  /-------- beq.w de84 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    ddb0:	|  |         movea.l 40(sp),a0
    ddb4:	|  |         move.l 24(a0),d0
    ddb8:	|  |         move.l d0,-(sp)
    ddba:	|  |         pea 1 <_start+0x1>
    ddbe:	|  |         lea 12(sp),a0
    ddc2:	|  |         move.l a0,-(sp)
    ddc4:	|  |         jsr 11d5e <getValueType>
    ddca:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    ddce:	|  |         moveq #24,d0
    ddd0:	|  |         add.l 40(sp),d0
    ddd4:	|  |         move.l d0,-(sp)
    ddd6:	|  |         jsr 126e2 <trimStack>
    dddc:	|  |         addq.l #4,sp
			numParams--;
    ddde:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    dde2:	|  +-------- bra.w de84 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    dde6:	|  |  /----> movea.l 40(sp),a0
    ddea:	|  |  |      move.l 24(a0),d0
    ddee:	|  |  |      move.l d0,-(sp)
    ddf0:	|  |  |      pea 5 <_start+0x5>
    ddf4:	|  |  |      lea 16(sp),a0
    ddf8:	|  |  |      move.l a0,-(sp)
    ddfa:	|  |  |      jsr 11d5e <getValueType>
    de00:	|  |  |      lea 12(sp),sp
    de04:	|  |  |      tst.w d0
    de06:	|  |  |  /-- bne.s de1c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    de08:	|  |  |  |   pea 16274 <custom.c.177df80b+0x159b>
    de0e:	|  |  |  |   jsr 13da6 <KPrintF>
    de14:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    de16:	|  |  |  |   moveq #1,d0
    de18:	+--|--|--|-- bra.w deea <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    de1c:	|  |  |  \-> moveq #20,d0
    de1e:	|  |  |      move.l d0,20(sp)
    de22:	|  |  |      clr.l 16(sp)
    de26:	|  |  |      move.l 190e8 <SysBase>,d0
    de2c:	|  |  |      movea.l d0,a6
    de2e:	|  |  |      move.l 20(sp),d0
    de32:	|  |  |      move.l 16(sp),d1
    de36:	|  |  |      jsr -684(a6)
    de3a:	|  |  |      move.l d0,12(sp)
    de3e:	|  |  |      move.l 12(sp),d0
    de42:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    de46:	|  |  |  /-- bne.s de4e <builtIn_loopSound+0x140>
    de48:	|  |  |  |   moveq #1,d0
    de4a:	+--|--|--|-- bra.w deea <builtIn_loopSound+0x1dc>

			s->next = old;
    de4e:	|  |  |  \-> movea.l 28(sp),a0
    de52:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    de58:	|  |  |      movea.l 28(sp),a0
    de5c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    de60:	|  |  |      move.l 8(sp),d0
    de64:	|  |  |      movea.l 28(sp),a0
    de68:	|  |  |      move.l d0,(a0)
			old = s;
    de6a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    de70:	|  |  |      moveq #24,d0
    de72:	|  |  |      add.l 40(sp),d0
    de76:	|  |  |      move.l d0,-(sp)
    de78:	|  |  |      jsr 126e2 <trimStack>
    de7e:	|  |  |      addq.l #4,sp
			numParams--;
    de80:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    de84:	|  \--|----> tst.l 36(sp)
    de88:	|     \----- bne.w dde6 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    de8c:	|        /-- bra.s de98 <builtIn_loopSound+0x18a>
    de8e:	|     /--|-> movea.l 28(sp),a0
    de92:	|     |  |   move.l 4(a0),28(sp)
    de98:	|     |  \-> movea.l 28(sp),a0
    de9c:	|     |      move.l 4(a0),d0
    dea0:	|     \----- bne.s de8e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    dea2:	|            move.l 4(sp),d0
    dea6:	|            moveq #1,d1
    dea8:	|            cmp.l d0,d1
    deaa:	|     /----- bge.s dec2 <builtIn_loopSound+0x1b4>
			s->next = old;
    deac:	|     |      movea.l 28(sp),a0
    deb0:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    deb6:	|     |      movea.l 24(sp),a0
    deba:	|     |      move.l 28(sp),8(a0)
    dec0:	|     |  /-- bra.s ded2 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    dec2:	|     \--|-> move.l 4(sp),d0
    dec6:	|        +-- beq.s ded2 <builtIn_loopSound+0x1c4>
			s->next = s;
    dec8:	|        |   movea.l 28(sp),a0
    decc:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    ded2:	|        \-> movea.l 24(sp),a0
    ded6:	|            moveq #-1,d0
    ded8:	|            move.l d0,16(a0)
		playSoundList(old);
    dedc:	|            move.l 24(sp),-(sp)
    dee0:	|            jsr a7e4 <playSoundList>
    dee6:	|            addq.l #4,sp
		return BR_CONTINUE;
    dee8:	|            moveq #2,d0
	}
}
    deea:	\----------> movea.l (sp)+,a6
    deec:	             lea 28(sp),sp
    def0:	             rts

0000def2 <builtIn_stopSound>:

builtIn(stopSound)
{
    def2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    def4:	       movea.l 12(sp),a0
    def8:	       move.l 24(a0),d0
    defc:	       move.l d0,-(sp)
    defe:	       pea 5 <_start+0x5>
    df02:	       move.l sp,d0
    df04:	       addq.l #8,d0
    df06:	       move.l d0,-(sp)
    df08:	       jsr 11d5e <getValueType>
    df0e:	       lea 12(sp),sp
    df12:	       tst.w d0
    df14:	   /-- bne.s df1a <builtIn_stopSound+0x28>
    df16:	   |   moveq #1,d0
    df18:	/--|-- bra.s df38 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    df1a:	|  \-> moveq #24,d0
    df1c:	|      add.l 12(sp),d0
    df20:	|      move.l d0,-(sp)
    df22:	|      jsr 126e2 <trimStack>
    df28:	|      addq.l #4,sp
	huntKillSound (v);
    df2a:	|      move.l (sp),d0
    df2c:	|      move.l d0,-(sp)
    df2e:	|      jsr a7dc <huntKillSound>
    df34:	|      addq.l #4,sp
	return BR_CONTINUE;
    df36:	|      moveq #2,d0
}
    df38:	\----> addq.l #4,sp
    df3a:	       rts

0000df3c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    df3c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df3e:	       movea.l 12(sp),a0
    df42:	       move.l 24(a0),d0
    df46:	       move.l d0,-(sp)
    df48:	       pea 1 <_start+0x1>
    df4c:	       move.l sp,d0
    df4e:	       addq.l #8,d0
    df50:	       move.l d0,-(sp)
    df52:	       jsr 11d5e <getValueType>
    df58:	       lea 12(sp),sp
    df5c:	       tst.w d0
    df5e:	   /-- bne.s df64 <builtIn_setDefaultSoundVolume+0x28>
    df60:	   |   moveq #1,d0
    df62:	/--|-- bra.s df82 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    df64:	|  \-> moveq #24,d0
    df66:	|      add.l 12(sp),d0
    df6a:	|      move.l d0,-(sp)
    df6c:	|      jsr 126e2 <trimStack>
    df72:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    df74:	|      move.l (sp),d0
    df76:	|      move.l d0,-(sp)
    df78:	|      jsr a852 <setDefaultSoundVolume>
    df7e:	|      addq.l #4,sp
	return BR_CONTINUE;
    df80:	|      moveq #2,d0
}
    df82:	\----> addq.l #4,sp
    df84:	       rts

0000df86 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    df86:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df88:	       movea.l 16(sp),a0
    df8c:	       move.l 24(a0),d0
    df90:	       move.l d0,-(sp)
    df92:	       pea 1 <_start+0x1>
    df96:	       move.l sp,d0
    df98:	       addq.l #8,d0
    df9a:	       move.l d0,-(sp)
    df9c:	       jsr 11d5e <getValueType>
    dfa2:	       lea 12(sp),sp
    dfa6:	       tst.w d0
    dfa8:	   /-- bne.s dfae <builtIn_setSoundVolume+0x28>
    dfaa:	   |   moveq #1,d0
    dfac:	/--|-- bra.s e008 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dfae:	|  \-> moveq #24,d0
    dfb0:	|      add.l 16(sp),d0
    dfb4:	|      move.l d0,-(sp)
    dfb6:	|      jsr 126e2 <trimStack>
    dfbc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dfbe:	|      movea.l 16(sp),a0
    dfc2:	|      move.l 24(a0),d0
    dfc6:	|      move.l d0,-(sp)
    dfc8:	|      pea 5 <_start+0x5>
    dfcc:	|      moveq #12,d0
    dfce:	|      add.l sp,d0
    dfd0:	|      move.l d0,-(sp)
    dfd2:	|      jsr 11d5e <getValueType>
    dfd8:	|      lea 12(sp),sp
    dfdc:	|      tst.w d0
    dfde:	|  /-- bne.s dfe4 <builtIn_setSoundVolume+0x5e>
    dfe0:	|  |   moveq #1,d0
    dfe2:	+--|-- bra.s e008 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dfe4:	|  \-> moveq #24,d0
    dfe6:	|      add.l 16(sp),d0
    dfea:	|      move.l d0,-(sp)
    dfec:	|      jsr 126e2 <trimStack>
    dff2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    dff4:	|      move.l (sp),d1
    dff6:	|      move.l 4(sp),d0
    dffa:	|      move.l d1,-(sp)
    dffc:	|      move.l d0,-(sp)
    dffe:	|      jsr a866 <setSoundVolume>
    e004:	|      addq.l #8,sp
	return BR_CONTINUE;
    e006:	|      moveq #2,d0
}
    e008:	\----> addq.l #8,sp
    e00a:	       rts

0000e00c <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    e00c:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e010:	       movea.l 20(sp),a0
    e014:	       move.l 24(a0),d0
    e018:	       move.l d0,-(sp)
    e01a:	       pea 1 <_start+0x1>
    e01e:	       moveq #12,d0
    e020:	       add.l sp,d0
    e022:	       move.l d0,-(sp)
    e024:	       jsr 11d5e <getValueType>
    e02a:	       lea 12(sp),sp
    e02e:	       tst.w d0
    e030:	   /-- bne.s e038 <builtIn_setSoundLoopPoints+0x2c>
    e032:	   |   moveq #1,d0
    e034:	/--|-- bra.w e0d0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e038:	|  \-> moveq #24,d0
    e03a:	|      add.l 20(sp),d0
    e03e:	|      move.l d0,-(sp)
    e040:	|      jsr 126e2 <trimStack>
    e046:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e048:	|      movea.l 20(sp),a0
    e04c:	|      move.l 24(a0),d0
    e050:	|      move.l d0,-(sp)
    e052:	|      pea 1 <_start+0x1>
    e056:	|      lea 8(sp),a0
    e05a:	|      move.l a0,-(sp)
    e05c:	|      jsr 11d5e <getValueType>
    e062:	|      lea 12(sp),sp
    e066:	|      tst.w d0
    e068:	|  /-- bne.s e06e <builtIn_setSoundLoopPoints+0x62>
    e06a:	|  |   moveq #1,d0
    e06c:	+--|-- bra.s e0d0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e06e:	|  \-> moveq #24,d0
    e070:	|      add.l 20(sp),d0
    e074:	|      move.l d0,-(sp)
    e076:	|      jsr 126e2 <trimStack>
    e07c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e07e:	|      movea.l 20(sp),a0
    e082:	|      move.l 24(a0),d0
    e086:	|      move.l d0,-(sp)
    e088:	|      pea 5 <_start+0x5>
    e08c:	|      moveq #16,d0
    e08e:	|      add.l sp,d0
    e090:	|      move.l d0,-(sp)
    e092:	|      jsr 11d5e <getValueType>
    e098:	|      lea 12(sp),sp
    e09c:	|      tst.w d0
    e09e:	|  /-- bne.s e0a4 <builtIn_setSoundLoopPoints+0x98>
    e0a0:	|  |   moveq #1,d0
    e0a2:	+--|-- bra.s e0d0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e0a4:	|  \-> moveq #24,d0
    e0a6:	|      add.l 20(sp),d0
    e0aa:	|      move.l d0,-(sp)
    e0ac:	|      jsr 126e2 <trimStack>
    e0b2:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    e0b4:	|      movea.l 4(sp),a0
    e0b8:	|      move.l (sp),d1
    e0ba:	|      move.l 8(sp),d0
    e0be:	|      move.l a0,-(sp)
    e0c0:	|      move.l d1,-(sp)
    e0c2:	|      move.l d0,-(sp)
    e0c4:	|      jsr a85e <setSoundLoop>
    e0ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e0ce:	|      moveq #2,d0
}
    e0d0:	\----> lea 12(sp),sp
    e0d4:	       rts

0000e0d6 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    e0d6:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e0d8:	          movea.l 12(sp),a0
    e0dc:	          movea.l 24(a0),a0
    e0e0:	          move.l (a0),d0
    e0e2:	          moveq #5,d1
    e0e4:	          cmp.l d0,d1
    e0e6:	/-------- bne.s e12a <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e0e8:	|         movea.l 12(sp),a0
    e0ec:	|         move.l 24(a0),d0
    e0f0:	|         move.l d0,-(sp)
    e0f2:	|         pea 5 <_start+0x5>
    e0f6:	|         move.l sp,d0
    e0f8:	|         addq.l #8,d0
    e0fa:	|         move.l d0,-(sp)
    e0fc:	|         jsr 11d5e <getValueType>
    e102:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e106:	|         moveq #24,d0
    e108:	|         add.l 12(sp),d0
    e10c:	|         move.l d0,-(sp)
    e10e:	|         jsr 126e2 <trimStack>
    e114:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    e116:	|         move.l (sp),d0
    e118:	|         move.l d0,-(sp)
    e11a:	|         jsr 13550 <setFloor>
    e120:	|         addq.l #4,sp
    e122:	|         tst.w d0
    e124:	|  /----- bne.s e140 <builtIn_setFloor+0x6a>
    e126:	|  |      moveq #1,d0
    e128:	|  |  /-- bra.s e142 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    e12a:	\--|--|-> moveq #24,d0
    e12c:	   |  |   add.l 12(sp),d0
    e130:	   |  |   move.l d0,-(sp)
    e132:	   |  |   jsr 126e2 <trimStack>
    e138:	   |  |   addq.l #4,sp
		setFloorNull ();
    e13a:	   |  |   jsr 13cca <setFloorNull>
	}
	return BR_CONTINUE;
    e140:	   \--|-> moveq #2,d0
}
    e142:	      \-> addq.l #4,sp
    e144:	          rts

0000e146 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    e146:	jsr 12de8 <drawFloor>
	return BR_CONTINUE;
    e14c:	moveq #2,d0
}
    e14e:	rts

0000e150 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    e150:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e152:	          movea.l 12(sp),a0
    e156:	          movea.l 24(a0),a0
    e15a:	          move.l (a0),d0
    e15c:	          moveq #5,d1
    e15e:	          cmp.l d0,d1
    e160:	/-------- bne.s e1a4 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e162:	|         movea.l 12(sp),a0
    e166:	|         move.l 24(a0),d0
    e16a:	|         move.l d0,-(sp)
    e16c:	|         pea 5 <_start+0x5>
    e170:	|         move.l sp,d0
    e172:	|         addq.l #8,d0
    e174:	|         move.l d0,-(sp)
    e176:	|         jsr 11d5e <getValueType>
    e17c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e180:	|         moveq #24,d0
    e182:	|         add.l 12(sp),d0
    e186:	|         move.l d0,-(sp)
    e188:	|         jsr 126e2 <trimStack>
    e18e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    e190:	|         move.l (sp),d0
    e192:	|         move.l d0,-(sp)
    e194:	|         jsr 6252 <setZBuffer>
    e19a:	|         addq.l #4,sp
    e19c:	|         tst.w d0
    e19e:	|  /----- bne.s e1ba <builtIn_setZBuffer+0x6a>
    e1a0:	|  |      moveq #1,d0
    e1a2:	|  |  /-- bra.s e1bc <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    e1a4:	\--|--|-> moveq #24,d0
    e1a6:	   |  |   add.l 12(sp),d0
    e1aa:	   |  |   move.l d0,-(sp)
    e1ac:	   |  |   jsr 126e2 <trimStack>
    e1b2:	   |  |   addq.l #4,sp
		killZBuffer ();
    e1b4:	   |  |   jsr 61fc <killZBuffer>
	}
	return BR_CONTINUE;
    e1ba:	   \--|-> moveq #2,d0
}
    e1bc:	      \-> addq.l #4,sp
    e1be:	          rts

0000e1c0 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    e1c0:	pea 162ab <custom.c.177df80b+0x15d2>
    e1c6:	jsr 13da6 <KPrintF>
    e1cc:	addq.l #4,sp
	return BR_CONTINUE;
    e1ce:	moveq #2,d0
}
    e1d0:	rts

0000e1d2 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1d2:	          movea.l 8(sp),a0
    e1d6:	          move.l 24(a0),d0
    e1da:	          move.l d0,-(sp)
    e1dc:	          pea 1 <_start+0x1>
    e1e0:	          pea 1920a <speechMode>
    e1e6:	          jsr 11d5e <getValueType>
    e1ec:	          lea 12(sp),sp
    e1f0:	          tst.w d0
    e1f2:	      /-- bne.s e1f8 <builtIn_setSpeechMode+0x26>
    e1f4:	      |   moveq #1,d0
    e1f6:	/-----|-- bra.s e230 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    e1f8:	|     \-> moveq #24,d0
    e1fa:	|         add.l 8(sp),d0
    e1fe:	|         move.l d0,-(sp)
    e200:	|         jsr 126e2 <trimStack>
    e206:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    e208:	|         move.l 1920a <speechMode>,d0
    e20e:	|     /-- bmi.s e21c <builtIn_setSpeechMode+0x4a>
    e210:	|     |   move.l 1920a <speechMode>,d0
    e216:	|     |   moveq #2,d1
    e218:	|     |   cmp.l d0,d1
    e21a:	|  /--|-- bge.s e22e <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    e21c:	|  |  \-> pea 162c4 <custom.c.177df80b+0x15eb>
    e222:	|  |      jsr 13da6 <KPrintF>
    e228:	|  |      addq.l #4,sp
		return BR_ERROR;
    e22a:	|  |      moveq #1,d0
    e22c:	+--|----- bra.s e230 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    e22e:	|  \----> moveq #2,d0
}
    e230:	\-------> rts

0000e232 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    e232:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    e234:	       jsr 5a04 <isThereAnySpeechGoingOn>
    e23a:	       move.l d0,(sp)
	if (i == -1) {
    e23c:	       moveq #-1,d0
    e23e:	       cmp.l (sp),d0
    e240:	/----- bne.s e25c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    e242:	|      moveq #28,d0
    e244:	|      add.l 12(sp),d0
    e248:	|      clr.l -(sp)
    e24a:	|      pea 1 <_start+0x1>
    e24e:	|      move.l d0,-(sp)
    e250:	|      jsr 12650 <setVariable>
    e256:	|      lea 12(sp),sp
    e25a:	|  /-- bra.s e274 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    e25c:	\--|-> moveq #28,d0
    e25e:	   |   add.l 12(sp),d0
    e262:	   |   move.l (sp),-(sp)
    e264:	   |   pea 7 <_start+0x7>
    e268:	   |   move.l d0,-(sp)
    e26a:	   |   jsr 12650 <setVariable>
    e270:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e274:	   \-> moveq #2,d0
}
    e276:	       addq.l #4,sp
    e278:	       rts

0000e27a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    e27a:	jsr 3d34 <killSpeechTimers>
	return BR_CONTINUE;
    e280:	moveq #2,d0
}
    e282:	rts

0000e284 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    e284:	       move.l 19244 <overRegion>,d0
    e28a:	/----- beq.s e2b4 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    e28c:	|      movea.l 19244 <overRegion>,a0
    e292:	|      movea.l 28(a0),a0
    e296:	|      move.l 4(a0),d1
    e29a:	|      moveq #28,d0
    e29c:	|      add.l 8(sp),d0
    e2a0:	|      move.l d1,-(sp)
    e2a2:	|      pea 7 <_start+0x7>
    e2a6:	|      move.l d0,-(sp)
    e2a8:	|      jsr 12650 <setVariable>
    e2ae:	|      lea 12(sp),sp
    e2b2:	|  /-- bra.s e2cc <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    e2b4:	\--|-> moveq #28,d0
    e2b6:	   |   add.l 8(sp),d0
    e2ba:	   |   clr.l -(sp)
    e2bc:	   |   pea 1 <_start+0x1>
    e2c0:	   |   move.l d0,-(sp)
    e2c2:	   |   jsr 12650 <setVariable>
    e2c8:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    e2cc:	   \-> moveq #2,d0
}
    e2ce:	       rts

0000e2d0 <builtIn_rename>:

builtIn(rename)
{
    e2d0:	       lea -16(sp),sp
    e2d4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e2d6:	       movea.l 28(sp),a0
    e2da:	       move.l 24(a0),d0
    e2de:	       move.l d0,-(sp)
    e2e0:	       jsr 12334 <getTextFromAnyVar>
    e2e6:	       addq.l #4,sp
    e2e8:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    e2ec:	   /-- bne.s e2f2 <builtIn_rename+0x22>
    e2ee:	   |   moveq #1,d0
    e2f0:	/--|-- bra.s e36c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e2f2:	|  \-> moveq #24,d0
    e2f4:	|      add.l 28(sp),d0
    e2f8:	|      move.l d0,-(sp)
    e2fa:	|      jsr 126e2 <trimStack>
    e300:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    e302:	|      movea.l 28(sp),a0
    e306:	|      move.l 24(a0),d0
    e30a:	|      move.l d0,-(sp)
    e30c:	|      pea 7 <_start+0x7>
    e310:	|      lea 12(sp),a0
    e314:	|      move.l a0,-(sp)
    e316:	|      jsr 11d5e <getValueType>
    e31c:	|      lea 12(sp),sp
    e320:	|      tst.w d0
    e322:	|  /-- bne.s e328 <builtIn_rename+0x58>
    e324:	|  |   moveq #1,d0
    e326:	+--|-- bra.s e36c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e328:	|  \-> moveq #24,d0
    e32a:	|      add.l 28(sp),d0
    e32e:	|      move.l d0,-(sp)
    e330:	|      jsr 126e2 <trimStack>
    e336:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    e338:	|      move.l 4(sp),d0
    e33c:	|      move.l d0,-(sp)
    e33e:	|      jsr ab94 <findObjectType>
    e344:	|      addq.l #4,sp
    e346:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    e34a:	|      movea.l 12(sp),a0
    e34e:	|      move.l (a0),8(sp)
    e352:	|      move.l 190e8 <SysBase>,d0
    e358:	|      movea.l d0,a6
    e35a:	|      movea.l 8(sp),a1
    e35e:	|      jsr -690(a6)
	o->screenName = newText;
    e362:	|      movea.l 12(sp),a0
    e366:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    e36a:	|      moveq #2,d0
}
    e36c:	\----> movea.l (sp)+,a6
    e36e:	       lea 16(sp),sp
    e372:	       rts

0000e374 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    e374:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e378:	          movea.l 20(sp),a0
    e37c:	          move.l 24(a0),d0
    e380:	          move.l d0,-(sp)
    e382:	          pea 7 <_start+0x7>
    e386:	          lea 8(sp),a0
    e38a:	          move.l a0,-(sp)
    e38c:	          jsr 11d5e <getValueType>
    e392:	          lea 12(sp),sp
    e396:	          tst.w d0
    e398:	      /-- bne.s e3a0 <builtIn_getObjectX+0x2c>
    e39a:	      |   moveq #1,d0
    e39c:	/-----|-- bra.w e43c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    e3a0:	|     \-> moveq #24,d0
    e3a2:	|         add.l 20(sp),d0
    e3a6:	|         move.l d0,-(sp)
    e3a8:	|         jsr 126e2 <trimStack>
    e3ae:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e3b0:	|         move.l (sp),d0
    e3b2:	|         move.l d0,-(sp)
    e3b4:	|         jsr 7e48 <findPerson>
    e3ba:	|         addq.l #4,sp
    e3bc:	|         move.l d0,8(sp)
	if (pers) {
    e3c0:	|     /-- beq.s e3ee <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    e3c2:	|     |   movea.l 8(sp),a0
    e3c6:	|     |   move.l (a0),d0
    e3c8:	|     |   move.l d0,-(sp)
    e3ca:	|     |   jsr 1417a <__fixsfsi>
    e3d0:	|     |   addq.l #4,sp
    e3d2:	|     |   move.l d0,d1
    e3d4:	|     |   moveq #28,d0
    e3d6:	|     |   add.l 20(sp),d0
    e3da:	|     |   move.l d1,-(sp)
    e3dc:	|     |   pea 1 <_start+0x1>
    e3e0:	|     |   move.l d0,-(sp)
    e3e2:	|     |   jsr 12650 <setVariable>
    e3e8:	|     |   lea 12(sp),sp
    e3ec:	|  /--|-- bra.s e43a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e3ee:	|  |  \-> move.l (sp),d0
    e3f0:	|  |      move.l d0,-(sp)
    e3f2:	|  |      jsr 12828 <getRegionForObject>
    e3f8:	|  |      addq.l #4,sp
    e3fa:	|  |      move.l d0,4(sp)
		if (la) {
    e3fe:	|  |  /-- beq.s e422 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    e400:	|  |  |   movea.l 4(sp),a0
    e404:	|  |  |   move.l 16(a0),d1
    e408:	|  |  |   moveq #28,d0
    e40a:	|  |  |   add.l 20(sp),d0
    e40e:	|  |  |   move.l d1,-(sp)
    e410:	|  |  |   pea 1 <_start+0x1>
    e414:	|  |  |   move.l d0,-(sp)
    e416:	|  |  |   jsr 12650 <setVariable>
    e41c:	|  |  |   lea 12(sp),sp
    e420:	|  +--|-- bra.s e43a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e422:	|  |  \-> moveq #28,d0
    e424:	|  |      add.l 20(sp),d0
    e428:	|  |      clr.l -(sp)
    e42a:	|  |      pea 1 <_start+0x1>
    e42e:	|  |      move.l d0,-(sp)
    e430:	|  |      jsr 12650 <setVariable>
    e436:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e43a:	|  \----> moveq #2,d0
}
    e43c:	\-------> lea 12(sp),sp
    e440:	          rts

0000e442 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    e442:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e446:	          movea.l 20(sp),a0
    e44a:	          move.l 24(a0),d0
    e44e:	          move.l d0,-(sp)
    e450:	          pea 7 <_start+0x7>
    e454:	          lea 8(sp),a0
    e458:	          move.l a0,-(sp)
    e45a:	          jsr 11d5e <getValueType>
    e460:	          lea 12(sp),sp
    e464:	          tst.w d0
    e466:	      /-- bne.s e46e <builtIn_getObjectY+0x2c>
    e468:	      |   moveq #1,d0
    e46a:	/-----|-- bra.w e50c <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    e46e:	|     \-> moveq #24,d0
    e470:	|         add.l 20(sp),d0
    e474:	|         move.l d0,-(sp)
    e476:	|         jsr 126e2 <trimStack>
    e47c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e47e:	|         move.l (sp),d0
    e480:	|         move.l d0,-(sp)
    e482:	|         jsr 7e48 <findPerson>
    e488:	|         addq.l #4,sp
    e48a:	|         move.l d0,8(sp)
	if (pers) {
    e48e:	|     /-- beq.s e4be <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    e490:	|     |   movea.l 8(sp),a0
    e494:	|     |   move.l 4(a0),d0
    e498:	|     |   move.l d0,-(sp)
    e49a:	|     |   jsr 1417a <__fixsfsi>
    e4a0:	|     |   addq.l #4,sp
    e4a2:	|     |   move.l d0,d1
    e4a4:	|     |   moveq #28,d0
    e4a6:	|     |   add.l 20(sp),d0
    e4aa:	|     |   move.l d1,-(sp)
    e4ac:	|     |   pea 1 <_start+0x1>
    e4b0:	|     |   move.l d0,-(sp)
    e4b2:	|     |   jsr 12650 <setVariable>
    e4b8:	|     |   lea 12(sp),sp
    e4bc:	|  /--|-- bra.s e50a <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e4be:	|  |  \-> move.l (sp),d0
    e4c0:	|  |      move.l d0,-(sp)
    e4c2:	|  |      jsr 12828 <getRegionForObject>
    e4c8:	|  |      addq.l #4,sp
    e4ca:	|  |      move.l d0,4(sp)
		if (la) {
    e4ce:	|  |  /-- beq.s e4f2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    e4d0:	|  |  |   movea.l 4(sp),a0
    e4d4:	|  |  |   move.l 20(a0),d1
    e4d8:	|  |  |   moveq #28,d0
    e4da:	|  |  |   add.l 20(sp),d0
    e4de:	|  |  |   move.l d1,-(sp)
    e4e0:	|  |  |   pea 1 <_start+0x1>
    e4e4:	|  |  |   move.l d0,-(sp)
    e4e6:	|  |  |   jsr 12650 <setVariable>
    e4ec:	|  |  |   lea 12(sp),sp
    e4f0:	|  +--|-- bra.s e50a <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e4f2:	|  |  \-> moveq #28,d0
    e4f4:	|  |      add.l 20(sp),d0
    e4f8:	|  |      clr.l -(sp)
    e4fa:	|  |      pea 1 <_start+0x1>
    e4fe:	|  |      move.l d0,-(sp)
    e500:	|  |      jsr 12650 <setVariable>
    e506:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e50a:	|  \----> moveq #2,d0
}
    e50c:	\-------> lea 12(sp),sp
    e510:	          rts

0000e512 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    e512:	       lea -32(sp),sp
    e516:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e51a:	       movea.l 56(sp),a0
    e51e:	       move.l 24(a0),d0
    e522:	       move.l d0,-(sp)
    e524:	       pea 1 <_start+0x1>
    e528:	       lea 28(sp),a0
    e52c:	       move.l a0,-(sp)
    e52e:	       jsr 11d5e <getValueType>
    e534:	       lea 12(sp),sp
    e538:	       tst.w d0
    e53a:	   /-- bne.s e542 <builtIn_addScreenRegion+0x30>
    e53c:	   |   moveq #1,d0
    e53e:	/--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e542:	|  \-> moveq #24,d0
    e544:	|      add.l 56(sp),d0
    e548:	|      move.l d0,-(sp)
    e54a:	|      jsr 126e2 <trimStack>
    e550:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e552:	|      movea.l 56(sp),a0
    e556:	|      move.l 24(a0),d0
    e55a:	|      move.l d0,-(sp)
    e55c:	|      pea 1 <_start+0x1>
    e560:	|      moveq #48,d0
    e562:	|      add.l sp,d0
    e564:	|      move.l d0,-(sp)
    e566:	|      jsr 11d5e <getValueType>
    e56c:	|      lea 12(sp),sp
    e570:	|      tst.w d0
    e572:	|  /-- bne.s e57a <builtIn_addScreenRegion+0x68>
    e574:	|  |   moveq #1,d0
    e576:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e57a:	|  \-> moveq #24,d0
    e57c:	|      add.l 56(sp),d0
    e580:	|      move.l d0,-(sp)
    e582:	|      jsr 126e2 <trimStack>
    e588:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e58a:	|      movea.l 56(sp),a0
    e58e:	|      move.l 24(a0),d0
    e592:	|      move.l d0,-(sp)
    e594:	|      pea 1 <_start+0x1>
    e598:	|      moveq #52,d0
    e59a:	|      add.l sp,d0
    e59c:	|      move.l d0,-(sp)
    e59e:	|      jsr 11d5e <getValueType>
    e5a4:	|      lea 12(sp),sp
    e5a8:	|      tst.w d0
    e5aa:	|  /-- bne.s e5b2 <builtIn_addScreenRegion+0xa0>
    e5ac:	|  |   moveq #1,d0
    e5ae:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e5b2:	|  \-> moveq #24,d0
    e5b4:	|      add.l 56(sp),d0
    e5b8:	|      move.l d0,-(sp)
    e5ba:	|      jsr 126e2 <trimStack>
    e5c0:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5c2:	|      movea.l 56(sp),a0
    e5c6:	|      move.l 24(a0),d0
    e5ca:	|      move.l d0,-(sp)
    e5cc:	|      pea 1 <_start+0x1>
    e5d0:	|      lea 32(sp),a0
    e5d4:	|      move.l a0,-(sp)
    e5d6:	|      jsr 11d5e <getValueType>
    e5dc:	|      lea 12(sp),sp
    e5e0:	|      tst.w d0
    e5e2:	|  /-- bne.s e5ea <builtIn_addScreenRegion+0xd8>
    e5e4:	|  |   moveq #1,d0
    e5e6:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e5ea:	|  \-> moveq #24,d0
    e5ec:	|      add.l 56(sp),d0
    e5f0:	|      move.l d0,-(sp)
    e5f2:	|      jsr 126e2 <trimStack>
    e5f8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5fa:	|      movea.l 56(sp),a0
    e5fe:	|      move.l 24(a0),d0
    e602:	|      move.l d0,-(sp)
    e604:	|      pea 1 <_start+0x1>
    e608:	|      lea 36(sp),a0
    e60c:	|      move.l a0,-(sp)
    e60e:	|      jsr 11d5e <getValueType>
    e614:	|      lea 12(sp),sp
    e618:	|      tst.w d0
    e61a:	|  /-- bne.s e622 <builtIn_addScreenRegion+0x110>
    e61c:	|  |   moveq #1,d0
    e61e:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e622:	|  \-> moveq #24,d0
    e624:	|      add.l 56(sp),d0
    e628:	|      move.l d0,-(sp)
    e62a:	|      jsr 126e2 <trimStack>
    e630:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e632:	|      movea.l 56(sp),a0
    e636:	|      move.l 24(a0),d0
    e63a:	|      move.l d0,-(sp)
    e63c:	|      pea 1 <_start+0x1>
    e640:	|      lea 40(sp),a0
    e644:	|      move.l a0,-(sp)
    e646:	|      jsr 11d5e <getValueType>
    e64c:	|      lea 12(sp),sp
    e650:	|      tst.w d0
    e652:	|  /-- bne.s e65a <builtIn_addScreenRegion+0x148>
    e654:	|  |   moveq #1,d0
    e656:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e65a:	|  \-> moveq #24,d0
    e65c:	|      add.l 56(sp),d0
    e660:	|      move.l d0,-(sp)
    e662:	|      jsr 126e2 <trimStack>
    e668:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e66a:	|      movea.l 56(sp),a0
    e66e:	|      move.l 24(a0),d0
    e672:	|      move.l d0,-(sp)
    e674:	|      pea 1 <_start+0x1>
    e678:	|      lea 44(sp),a0
    e67c:	|      move.l a0,-(sp)
    e67e:	|      jsr 11d5e <getValueType>
    e684:	|      lea 12(sp),sp
    e688:	|      tst.w d0
    e68a:	|  /-- bne.s e692 <builtIn_addScreenRegion+0x180>
    e68c:	|  |   moveq #1,d0
    e68e:	+--|-- bra.w e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e692:	|  \-> moveq #24,d0
    e694:	|      add.l 56(sp),d0
    e698:	|      move.l d0,-(sp)
    e69a:	|      jsr 126e2 <trimStack>
    e6a0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6a2:	|      movea.l 56(sp),a0
    e6a6:	|      move.l 24(a0),d0
    e6aa:	|      move.l d0,-(sp)
    e6ac:	|      pea 7 <_start+0x7>
    e6b0:	|      lea 24(sp),a0
    e6b4:	|      move.l a0,-(sp)
    e6b6:	|      jsr 11d5e <getValueType>
    e6bc:	|      lea 12(sp),sp
    e6c0:	|      tst.w d0
    e6c2:	|  /-- bne.s e6c8 <builtIn_addScreenRegion+0x1b6>
    e6c4:	|  |   moveq #1,d0
    e6c6:	+--|-- bra.s e71c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e6c8:	|  \-> moveq #24,d0
    e6ca:	|      add.l 56(sp),d0
    e6ce:	|      move.l d0,-(sp)
    e6d0:	|      jsr 126e2 <trimStack>
    e6d6:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    e6d8:	|      move.l 16(sp),d5
    e6dc:	|      move.l 20(sp),d4
    e6e0:	|      move.l 40(sp),d3
    e6e4:	|      move.l 44(sp),d2
    e6e8:	|      movea.l 24(sp),a1
    e6ec:	|      movea.l 28(sp),a0
    e6f0:	|      move.l 32(sp),d1
    e6f4:	|      move.l 36(sp),d0
    e6f8:	|      move.l d5,-(sp)
    e6fa:	|      move.l d4,-(sp)
    e6fc:	|      move.l d3,-(sp)
    e6fe:	|      move.l d2,-(sp)
    e700:	|      move.l a1,-(sp)
    e702:	|      move.l a0,-(sp)
    e704:	|      move.l d1,-(sp)
    e706:	|      move.l d0,-(sp)
    e708:	|      jsr 12768 <addScreenRegion>
    e70e:	|      lea 32(sp),sp
    e712:	|      tst.w d0
    e714:	|  /-- beq.s e71a <builtIn_addScreenRegion+0x208>
    e716:	|  |   moveq #2,d0
    e718:	+--|-- bra.s e71c <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    e71a:	|  \-> moveq #1,d0

}
    e71c:	\----> movem.l (sp)+,d2-d5
    e720:	       lea 32(sp),sp
    e724:	       rts

0000e726 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    e726:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e728:	       movea.l 12(sp),a0
    e72c:	       move.l 24(a0),d0
    e730:	       move.l d0,-(sp)
    e732:	       pea 7 <_start+0x7>
    e736:	       move.l sp,d0
    e738:	       addq.l #8,d0
    e73a:	       move.l d0,-(sp)
    e73c:	       jsr 11d5e <getValueType>
    e742:	       lea 12(sp),sp
    e746:	       tst.w d0
    e748:	   /-- bne.s e74e <builtIn_removeScreenRegion+0x28>
    e74a:	   |   moveq #1,d0
    e74c:	/--|-- bra.s e76c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    e74e:	|  \-> moveq #24,d0
    e750:	|      add.l 12(sp),d0
    e754:	|      move.l d0,-(sp)
    e756:	|      jsr 126e2 <trimStack>
    e75c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    e75e:	|      move.l (sp),d0
    e760:	|      move.l d0,-(sp)
    e762:	|      jsr 129d0 <removeScreenRegion>
    e768:	|      addq.l #4,sp
	return BR_CONTINUE;
    e76a:	|      moveq #2,d0
}
    e76c:	\----> addq.l #4,sp
    e76e:	       rts

0000e770 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    e770:	jsr 12b54 <showBoxes>
	return BR_CONTINUE;
    e776:	moveq #2,d0
}
    e778:	rts

0000e77a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    e77a:	jsr 12856 <killAllRegions>
	return BR_CONTINUE;
    e780:	moveq #2,d0
}
    e782:	rts

0000e784 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    e784:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    e788:	       movea.l 24(sp),a0
    e78c:	       move.l 24(a0),d0
    e790:	       move.l d0,-(sp)
    e792:	       jsr 11a0a <getCostumeFromVar>
    e798:	       addq.l #4,sp
    e79a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    e79e:	   /-- bne.s e7a6 <builtIn_addCharacter+0x22>
    e7a0:	   |   moveq #1,d0
    e7a2:	/--|-- bra.w e882 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    e7a6:	|  \-> moveq #24,d0
    e7a8:	|      add.l 24(sp),d0
    e7ac:	|      move.l d0,-(sp)
    e7ae:	|      jsr 126e2 <trimStack>
    e7b4:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7b6:	|      movea.l 24(sp),a0
    e7ba:	|      move.l 24(a0),d0
    e7be:	|      move.l d0,-(sp)
    e7c0:	|      pea 1 <_start+0x1>
    e7c4:	|      lea 12(sp),a0
    e7c8:	|      move.l a0,-(sp)
    e7ca:	|      jsr 11d5e <getValueType>
    e7d0:	|      lea 12(sp),sp
    e7d4:	|      tst.w d0
    e7d6:	|  /-- bne.s e7de <builtIn_addCharacter+0x5a>
    e7d8:	|  |   moveq #1,d0
    e7da:	+--|-- bra.w e882 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e7de:	|  \-> moveq #24,d0
    e7e0:	|      add.l 24(sp),d0
    e7e4:	|      move.l d0,-(sp)
    e7e6:	|      jsr 126e2 <trimStack>
    e7ec:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7ee:	|      movea.l 24(sp),a0
    e7f2:	|      move.l 24(a0),d0
    e7f6:	|      move.l d0,-(sp)
    e7f8:	|      pea 1 <_start+0x1>
    e7fc:	|      moveq #16,d0
    e7fe:	|      add.l sp,d0
    e800:	|      move.l d0,-(sp)
    e802:	|      jsr 11d5e <getValueType>
    e808:	|      lea 12(sp),sp
    e80c:	|      tst.w d0
    e80e:	|  /-- bne.s e814 <builtIn_addCharacter+0x90>
    e810:	|  |   moveq #1,d0
    e812:	+--|-- bra.s e882 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e814:	|  \-> moveq #24,d0
    e816:	|      add.l 24(sp),d0
    e81a:	|      move.l d0,-(sp)
    e81c:	|      jsr 126e2 <trimStack>
    e822:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e824:	|      movea.l 24(sp),a0
    e828:	|      move.l 24(a0),d0
    e82c:	|      move.l d0,-(sp)
    e82e:	|      pea 7 <_start+0x7>
    e832:	|      lea 8(sp),a0
    e836:	|      move.l a0,-(sp)
    e838:	|      jsr 11d5e <getValueType>
    e83e:	|      lea 12(sp),sp
    e842:	|      tst.w d0
    e844:	|  /-- bne.s e84a <builtIn_addCharacter+0xc6>
    e846:	|  |   moveq #1,d0
    e848:	+--|-- bra.s e882 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e84a:	|  \-> moveq #24,d0
    e84c:	|      add.l 24(sp),d0
    e850:	|      move.l d0,-(sp)
    e852:	|      jsr 126e2 <trimStack>
    e858:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    e85a:	|      movea.l (sp),a0
    e85c:	|      move.l 4(sp),d1
    e860:	|      move.l 8(sp),d0
    e864:	|      move.l 12(sp),-(sp)
    e868:	|      move.l a0,-(sp)
    e86a:	|      move.l d1,-(sp)
    e86c:	|      move.l d0,-(sp)
    e86e:	|      jsr 6b18 <addPerson>
    e874:	|      lea 16(sp),sp
    e878:	|      tst.w d0
    e87a:	|  /-- beq.s e880 <builtIn_addCharacter+0xfc>
    e87c:	|  |   moveq #2,d0
    e87e:	+--|-- bra.s e882 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    e880:	|  \-> moveq #1,d0
}
    e882:	\----> lea 16(sp),sp
    e886:	       rts

0000e888 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    e888:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e88a:	       movea.l 12(sp),a0
    e88e:	       move.l 24(a0),d0
    e892:	       move.l d0,-(sp)
    e894:	       pea 7 <_start+0x7>
    e898:	       move.l sp,d0
    e89a:	       addq.l #8,d0
    e89c:	       move.l d0,-(sp)
    e89e:	       jsr 11d5e <getValueType>
    e8a4:	       lea 12(sp),sp
    e8a8:	       tst.w d0
    e8aa:	   /-- bne.s e8b0 <builtIn_hideCharacter+0x28>
    e8ac:	   |   moveq #1,d0
    e8ae:	/--|-- bra.s e8d0 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    e8b0:	|  \-> moveq #24,d0
    e8b2:	|      add.l 12(sp),d0
    e8b6:	|      move.l d0,-(sp)
    e8b8:	|      jsr 126e2 <trimStack>
    e8be:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    e8c0:	|      move.l (sp),d0
    e8c2:	|      move.l d0,-(sp)
    e8c4:	|      clr.l -(sp)
    e8c6:	|      jsr 9438 <setShown>
    e8cc:	|      addq.l #8,sp
	return BR_CONTINUE;
    e8ce:	|      moveq #2,d0
}
    e8d0:	\----> addq.l #4,sp
    e8d2:	       rts

0000e8d4 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    e8d4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e8d6:	       movea.l 12(sp),a0
    e8da:	       move.l 24(a0),d0
    e8de:	       move.l d0,-(sp)
    e8e0:	       pea 7 <_start+0x7>
    e8e4:	       move.l sp,d0
    e8e6:	       addq.l #8,d0
    e8e8:	       move.l d0,-(sp)
    e8ea:	       jsr 11d5e <getValueType>
    e8f0:	       lea 12(sp),sp
    e8f4:	       tst.w d0
    e8f6:	   /-- bne.s e8fc <builtIn_showCharacter+0x28>
    e8f8:	   |   moveq #1,d0
    e8fa:	/--|-- bra.s e91e <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    e8fc:	|  \-> moveq #24,d0
    e8fe:	|      add.l 12(sp),d0
    e902:	|      move.l d0,-(sp)
    e904:	|      jsr 126e2 <trimStack>
    e90a:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    e90c:	|      move.l (sp),d0
    e90e:	|      move.l d0,-(sp)
    e910:	|      pea 1 <_start+0x1>
    e914:	|      jsr 9438 <setShown>
    e91a:	|      addq.l #8,sp
	return BR_CONTINUE;
    e91c:	|      moveq #2,d0
}
    e91e:	\----> addq.l #4,sp
    e920:	       rts

0000e922 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    e922:	jsr 3d34 <killSpeechTimers>
	killMostPeople ();
    e928:	jsr 82b4 <killMostPeople>
	return BR_CONTINUE;
    e92e:	moveq #2,d0
}
    e930:	rts

0000e932 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    e932:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e934:	       movea.l 16(sp),a0
    e938:	       move.l 24(a0),d0
    e93c:	       move.l d0,-(sp)
    e93e:	       pea 1 <_start+0x1>
    e942:	       move.l sp,d0
    e944:	       addq.l #8,d0
    e946:	       move.l d0,-(sp)
    e948:	       jsr 11d5e <getValueType>
    e94e:	       lea 12(sp),sp
    e952:	       tst.w d0
    e954:	   /-- bne.s e95a <builtIn_setCharacterDrawMode+0x28>
    e956:	   |   moveq #1,d0
    e958:	/--|-- bra.s e9b4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e95a:	|  \-> moveq #24,d0
    e95c:	|      add.l 16(sp),d0
    e960:	|      move.l d0,-(sp)
    e962:	|      jsr 126e2 <trimStack>
    e968:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e96a:	|      movea.l 16(sp),a0
    e96e:	|      move.l 24(a0),d0
    e972:	|      move.l d0,-(sp)
    e974:	|      pea 7 <_start+0x7>
    e978:	|      moveq #12,d0
    e97a:	|      add.l sp,d0
    e97c:	|      move.l d0,-(sp)
    e97e:	|      jsr 11d5e <getValueType>
    e984:	|      lea 12(sp),sp
    e988:	|      tst.w d0
    e98a:	|  /-- bne.s e990 <builtIn_setCharacterDrawMode+0x5e>
    e98c:	|  |   moveq #1,d0
    e98e:	+--|-- bra.s e9b4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e990:	|  \-> moveq #24,d0
    e992:	|      add.l 16(sp),d0
    e996:	|      move.l d0,-(sp)
    e998:	|      jsr 126e2 <trimStack>
    e99e:	|      addq.l #4,sp
	setDrawMode (di, obj);
    e9a0:	|      move.l 4(sp),d1
    e9a4:	|      move.l (sp),d0
    e9a6:	|      move.l d1,-(sp)
    e9a8:	|      move.l d0,-(sp)
    e9aa:	|      jsr 8d76 <setDrawMode>
    e9b0:	|      addq.l #8,sp
	return BR_CONTINUE;
    e9b2:	|      moveq #2,d0
}
    e9b4:	\----> addq.l #8,sp
    e9b6:	       rts

0000e9b8 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    e9b8:	pea 16302 <custom.c.177df80b+0x1629>
    e9be:	jsr 13da6 <KPrintF>
    e9c4:	addq.l #4,sp
	return BR_CONTINUE;
    e9c6:	moveq #2,d0
}
    e9c8:	rts

0000e9ca <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    e9ca:	pea 16335 <custom.c.177df80b+0x165c>
    e9d0:	jsr 13da6 <KPrintF>
    e9d6:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    e9d8:	moveq #2,d0
}
    e9da:	rts

0000e9dc <builtIn_setScale>:

builtIn(setScale)
{
    e9dc:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9de:	       movea.l 16(sp),a0
    e9e2:	       move.l 24(a0),d0
    e9e6:	       move.l d0,-(sp)
    e9e8:	       pea 1 <_start+0x1>
    e9ec:	       move.l sp,d0
    e9ee:	       addq.l #8,d0
    e9f0:	       move.l d0,-(sp)
    e9f2:	       jsr 11d5e <getValueType>
    e9f8:	       lea 12(sp),sp
    e9fc:	       tst.w d0
    e9fe:	   /-- bne.s ea04 <builtIn_setScale+0x28>
    ea00:	   |   moveq #1,d0
    ea02:	/--|-- bra.s ea66 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ea04:	|  \-> moveq #24,d0
    ea06:	|      add.l 16(sp),d0
    ea0a:	|      move.l d0,-(sp)
    ea0c:	|      jsr 126e2 <trimStack>
    ea12:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea14:	|      movea.l 16(sp),a0
    ea18:	|      move.l 24(a0),d0
    ea1c:	|      move.l d0,-(sp)
    ea1e:	|      pea 1 <_start+0x1>
    ea22:	|      moveq #12,d0
    ea24:	|      add.l sp,d0
    ea26:	|      move.l d0,-(sp)
    ea28:	|      jsr 11d5e <getValueType>
    ea2e:	|      lea 12(sp),sp
    ea32:	|      tst.w d0
    ea34:	|  /-- bne.s ea3a <builtIn_setScale+0x5e>
    ea36:	|  |   moveq #1,d0
    ea38:	+--|-- bra.s ea66 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ea3a:	|  \-> moveq #24,d0
    ea3c:	|      add.l 16(sp),d0
    ea40:	|      move.l d0,-(sp)
    ea42:	|      jsr 126e2 <trimStack>
    ea48:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    ea4a:	|      move.l (sp),d0
    ea4c:	|      move.l d0,d0
    ea4e:	|      movea.w d0,a1
    ea50:	|      move.l 4(sp),d0
    ea54:	|      move.l d0,d0
    ea56:	|      movea.w d0,a0
    ea58:	|      move.l a1,-(sp)
    ea5a:	|      move.l a0,-(sp)
    ea5c:	|      jsr 9410 <setScale>
    ea62:	|      addq.l #8,sp
	return BR_CONTINUE;
    ea64:	|      moveq #2,d0
}
    ea66:	\----> addq.l #8,sp
    ea68:	       rts

0000ea6a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    ea6a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6c:	       movea.l 12(sp),a0
    ea70:	       move.l 24(a0),d0
    ea74:	       move.l d0,-(sp)
    ea76:	       pea 7 <_start+0x7>
    ea7a:	       move.l sp,d0
    ea7c:	       addq.l #8,d0
    ea7e:	       move.l d0,-(sp)
    ea80:	       jsr 11d5e <getValueType>
    ea86:	       lea 12(sp),sp
    ea8a:	       tst.w d0
    ea8c:	   /-- bne.s ea92 <builtIn_stopCharacter+0x28>
    ea8e:	   |   moveq #1,d0
    ea90:	/--|-- bra.s eaca <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    ea92:	|  \-> moveq #24,d0
    ea94:	|      add.l 12(sp),d0
    ea98:	|      move.l d0,-(sp)
    ea9a:	|      jsr 126e2 <trimStack>
    eaa0:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    eaa2:	|      move.l (sp),d0
    eaa4:	|      move.l d0,-(sp)
    eaa6:	|      jsr 9544 <stopPerson>
    eaac:	|      addq.l #4,sp
    eaae:	|      movea.w d0,a0
    eab0:	|      moveq #28,d0
    eab2:	|      add.l 12(sp),d0
    eab6:	|      move.l a0,-(sp)
    eab8:	|      pea 1 <_start+0x1>
    eabc:	|      move.l d0,-(sp)
    eabe:	|      jsr 12650 <setVariable>
    eac4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eac8:	|      moveq #2,d0
}
    eaca:	\----> addq.l #4,sp
    eacc:	       rts

0000eace <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    eace:	pea 1636f <custom.c.177df80b+0x1696>
    ead4:	jsr 13da6 <KPrintF>
    eada:	addq.l #4,sp
	return BR_CONTINUE;
    eadc:	moveq #2,d0
}
    eade:	rts

0000eae0 <builtIn_animate>:

builtIn(animate)
{
    eae0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eae2:	       movea.l 16(sp),a0
    eae6:	       move.l 24(a0),d0
    eaea:	       move.l d0,-(sp)
    eaec:	       jsr 12236 <getAnimationFromVar>
    eaf2:	       addq.l #4,sp
    eaf4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    eaf8:	   /-- bne.s eafe <builtIn_animate+0x1e>
    eafa:	   |   moveq #1,d0
    eafc:	/--|-- bra.s eb7c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    eafe:	|  \-> moveq #24,d0
    eb00:	|      add.l 16(sp),d0
    eb04:	|      move.l d0,-(sp)
    eb06:	|      jsr 126e2 <trimStack>
    eb0c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb0e:	|      movea.l 16(sp),a0
    eb12:	|      move.l 24(a0),d0
    eb16:	|      move.l d0,-(sp)
    eb18:	|      pea 7 <_start+0x7>
    eb1c:	|      move.l sp,d0
    eb1e:	|      addq.l #8,d0
    eb20:	|      move.l d0,-(sp)
    eb22:	|      jsr 11d5e <getValueType>
    eb28:	|      lea 12(sp),sp
    eb2c:	|      tst.w d0
    eb2e:	|  /-- bne.s eb34 <builtIn_animate+0x54>
    eb30:	|  |   moveq #1,d0
    eb32:	+--|-- bra.s eb7c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    eb34:	|  \-> moveq #24,d0
    eb36:	|      add.l 16(sp),d0
    eb3a:	|      move.l d0,-(sp)
    eb3c:	|      jsr 126e2 <trimStack>
    eb42:	|      addq.l #4,sp
	animatePerson (obj, pp);
    eb44:	|      move.l (sp),d0
    eb46:	|      move.l 4(sp),-(sp)
    eb4a:	|      move.l d0,-(sp)
    eb4c:	|      jsr 6d8c <animatePerson>
    eb52:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    eb54:	|      move.l 4(sp),-(sp)
    eb58:	|      jsr 9598 <timeForAnim>
    eb5e:	|      addq.l #4,sp
    eb60:	|      move.l d0,d1
    eb62:	|      moveq #28,d0
    eb64:	|      add.l 16(sp),d0
    eb68:	|      move.l d1,-(sp)
    eb6a:	|      pea 1 <_start+0x1>
    eb6e:	|      move.l d0,-(sp)
    eb70:	|      jsr 12650 <setVariable>
    eb76:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb7a:	|      moveq #2,d0
}
    eb7c:	\----> addq.l #8,sp
    eb7e:	       rts

0000eb80 <builtIn_setCostume>:

builtIn(setCostume)
{
    eb80:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    eb82:	       movea.l 16(sp),a0
    eb86:	       move.l 24(a0),d0
    eb8a:	       move.l d0,-(sp)
    eb8c:	       jsr 11a0a <getCostumeFromVar>
    eb92:	       addq.l #4,sp
    eb94:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    eb98:	   /-- bne.s eb9e <builtIn_setCostume+0x1e>
    eb9a:	   |   moveq #1,d0
    eb9c:	/--|-- bra.s ebf6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    eb9e:	|  \-> moveq #24,d0
    eba0:	|      add.l 16(sp),d0
    eba4:	|      move.l d0,-(sp)
    eba6:	|      jsr 126e2 <trimStack>
    ebac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ebae:	|      movea.l 16(sp),a0
    ebb2:	|      move.l 24(a0),d0
    ebb6:	|      move.l d0,-(sp)
    ebb8:	|      pea 7 <_start+0x7>
    ebbc:	|      move.l sp,d0
    ebbe:	|      addq.l #8,d0
    ebc0:	|      move.l d0,-(sp)
    ebc2:	|      jsr 11d5e <getValueType>
    ebc8:	|      lea 12(sp),sp
    ebcc:	|      tst.w d0
    ebce:	|  /-- bne.s ebd4 <builtIn_setCostume+0x54>
    ebd0:	|  |   moveq #1,d0
    ebd2:	+--|-- bra.s ebf6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    ebd4:	|  \-> moveq #24,d0
    ebd6:	|      add.l 16(sp),d0
    ebda:	|      move.l d0,-(sp)
    ebdc:	|      jsr 126e2 <trimStack>
    ebe2:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    ebe4:	|      move.l (sp),d0
    ebe6:	|      move.l 4(sp),-(sp)
    ebea:	|      move.l d0,-(sp)
    ebec:	|      jsr 6dd6 <animatePersonUsingPersona>
    ebf2:	|      addq.l #8,sp
	return BR_CONTINUE;
    ebf4:	|      moveq #2,d0
}
    ebf6:	\----> addq.l #8,sp
    ebf8:	       rts

0000ebfa <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    ebfa:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebfc:	       movea.l 16(sp),a0
    ec00:	       move.l 24(a0),d0
    ec04:	       move.l d0,-(sp)
    ec06:	       pea 1 <_start+0x1>
    ec0a:	       move.l sp,d0
    ec0c:	       addq.l #8,d0
    ec0e:	       move.l d0,-(sp)
    ec10:	       jsr 11d5e <getValueType>
    ec16:	       lea 12(sp),sp
    ec1a:	       tst.w d0
    ec1c:	   /-- bne.s ec22 <builtIn_floatCharacter+0x28>
    ec1e:	   |   moveq #1,d0
    ec20:	/--|-- bra.s ec96 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ec22:	|  \-> moveq #24,d0
    ec24:	|      add.l 16(sp),d0
    ec28:	|      move.l d0,-(sp)
    ec2a:	|      jsr 126e2 <trimStack>
    ec30:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec32:	|      movea.l 16(sp),a0
    ec36:	|      move.l 24(a0),d0
    ec3a:	|      move.l d0,-(sp)
    ec3c:	|      pea 7 <_start+0x7>
    ec40:	|      moveq #12,d0
    ec42:	|      add.l sp,d0
    ec44:	|      move.l d0,-(sp)
    ec46:	|      jsr 11d5e <getValueType>
    ec4c:	|      lea 12(sp),sp
    ec50:	|      tst.w d0
    ec52:	|  /-- bne.s ec58 <builtIn_floatCharacter+0x5e>
    ec54:	|  |   moveq #1,d0
    ec56:	+--|-- bra.s ec96 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ec58:	|  \-> moveq #24,d0
    ec5a:	|      add.l 16(sp),d0
    ec5e:	|      move.l d0,-(sp)
    ec60:	|      jsr 126e2 <trimStack>
    ec66:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    ec68:	|      move.l 4(sp),d1
    ec6c:	|      move.l (sp),d0
    ec6e:	|      move.l d1,-(sp)
    ec70:	|      move.l d0,-(sp)
    ec72:	|      jsr 7e76 <floatCharacter>
    ec78:	|      addq.l #8,sp
    ec7a:	|      movea.w d0,a0
    ec7c:	|      moveq #28,d0
    ec7e:	|      add.l 16(sp),d0
    ec82:	|      move.l a0,-(sp)
    ec84:	|      pea 1 <_start+0x1>
    ec88:	|      move.l d0,-(sp)
    ec8a:	|      jsr 12650 <setVariable>
    ec90:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec94:	|      moveq #2,d0
}
    ec96:	\----> addq.l #8,sp
    ec98:	       rts

0000ec9a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    ec9a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec9c:	       movea.l 16(sp),a0
    eca0:	       move.l 24(a0),d0
    eca4:	       move.l d0,-(sp)
    eca6:	       pea 1 <_start+0x1>
    ecaa:	       move.l sp,d0
    ecac:	       addq.l #8,d0
    ecae:	       move.l d0,-(sp)
    ecb0:	       jsr 11d5e <getValueType>
    ecb6:	       lea 12(sp),sp
    ecba:	       tst.w d0
    ecbc:	   /-- bne.s ecc2 <builtIn_setCharacterWalkSpeed+0x28>
    ecbe:	   |   moveq #1,d0
    ecc0:	/--|-- bra.s ed36 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    ecc2:	|  \-> moveq #24,d0
    ecc4:	|      add.l 16(sp),d0
    ecc8:	|      move.l d0,-(sp)
    ecca:	|      jsr 126e2 <trimStack>
    ecd0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecd2:	|      movea.l 16(sp),a0
    ecd6:	|      move.l 24(a0),d0
    ecda:	|      move.l d0,-(sp)
    ecdc:	|      pea 7 <_start+0x7>
    ece0:	|      moveq #12,d0
    ece2:	|      add.l sp,d0
    ece4:	|      move.l d0,-(sp)
    ece6:	|      jsr 11d5e <getValueType>
    ecec:	|      lea 12(sp),sp
    ecf0:	|      tst.w d0
    ecf2:	|  /-- bne.s ecf8 <builtIn_setCharacterWalkSpeed+0x5e>
    ecf4:	|  |   moveq #1,d0
    ecf6:	+--|-- bra.s ed36 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    ecf8:	|  \-> moveq #24,d0
    ecfa:	|      add.l 16(sp),d0
    ecfe:	|      move.l d0,-(sp)
    ed00:	|      jsr 126e2 <trimStack>
    ed06:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    ed08:	|      move.l 4(sp),d1
    ed0c:	|      move.l (sp),d0
    ed0e:	|      move.l d1,-(sp)
    ed10:	|      move.l d0,-(sp)
    ed12:	|      jsr 93ac <setCharacterWalkSpeed>
    ed18:	|      addq.l #8,sp
    ed1a:	|      movea.w d0,a0
    ed1c:	|      moveq #28,d0
    ed1e:	|      add.l 16(sp),d0
    ed22:	|      move.l a0,-(sp)
    ed24:	|      pea 1 <_start+0x1>
    ed28:	|      move.l d0,-(sp)
    ed2a:	|      jsr 12650 <setVariable>
    ed30:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed34:	|      moveq #2,d0
}
    ed36:	\----> addq.l #8,sp
    ed38:	       rts

0000ed3a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    ed3a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed3c:	       movea.l 16(sp),a0
    ed40:	       move.l 24(a0),d0
    ed44:	       move.l d0,-(sp)
    ed46:	       pea 1 <_start+0x1>
    ed4a:	       move.l sp,d0
    ed4c:	       addq.l #8,d0
    ed4e:	       move.l d0,-(sp)
    ed50:	       jsr 11d5e <getValueType>
    ed56:	       lea 12(sp),sp
    ed5a:	       tst.w d0
    ed5c:	   /-- bne.s ed62 <builtIn_turnCharacter+0x28>
    ed5e:	   |   moveq #1,d0
    ed60:	/--|-- bra.s edd6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ed62:	|  \-> moveq #24,d0
    ed64:	|      add.l 16(sp),d0
    ed68:	|      move.l d0,-(sp)
    ed6a:	|      jsr 126e2 <trimStack>
    ed70:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed72:	|      movea.l 16(sp),a0
    ed76:	|      move.l 24(a0),d0
    ed7a:	|      move.l d0,-(sp)
    ed7c:	|      pea 7 <_start+0x7>
    ed80:	|      moveq #12,d0
    ed82:	|      add.l sp,d0
    ed84:	|      move.l d0,-(sp)
    ed86:	|      jsr 11d5e <getValueType>
    ed8c:	|      lea 12(sp),sp
    ed90:	|      tst.w d0
    ed92:	|  /-- bne.s ed98 <builtIn_turnCharacter+0x5e>
    ed94:	|  |   moveq #1,d0
    ed96:	+--|-- bra.s edd6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ed98:	|  \-> moveq #24,d0
    ed9a:	|      add.l 16(sp),d0
    ed9e:	|      move.l d0,-(sp)
    eda0:	|      jsr 126e2 <trimStack>
    eda6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    eda8:	|      move.l (sp),d1
    edaa:	|      move.l 4(sp),d0
    edae:	|      move.l d1,-(sp)
    edb0:	|      move.l d0,-(sp)
    edb2:	|      jsr 9650 <turnPersonToFace>
    edb8:	|      addq.l #8,sp
    edba:	|      movea.w d0,a0
    edbc:	|      moveq #28,d0
    edbe:	|      add.l 16(sp),d0
    edc2:	|      move.l a0,-(sp)
    edc4:	|      pea 1 <_start+0x1>
    edc8:	|      move.l d0,-(sp)
    edca:	|      jsr 12650 <setVariable>
    edd0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    edd4:	|      moveq #2,d0
}
    edd6:	\----> addq.l #8,sp
    edd8:	       rts

0000edda <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    edda:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eddc:	       movea.l 16(sp),a0
    ede0:	       move.l 24(a0),d0
    ede4:	       move.l d0,-(sp)
    ede6:	       pea 1 <_start+0x1>
    edea:	       move.l sp,d0
    edec:	       addq.l #8,d0
    edee:	       move.l d0,-(sp)
    edf0:	       jsr 11d5e <getValueType>
    edf6:	       lea 12(sp),sp
    edfa:	       tst.w d0
    edfc:	   /-- bne.s ee02 <builtIn_setCharacterExtra+0x28>
    edfe:	   |   moveq #1,d0
    ee00:	/--|-- bra.s ee76 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    ee02:	|  \-> moveq #24,d0
    ee04:	|      add.l 16(sp),d0
    ee08:	|      move.l d0,-(sp)
    ee0a:	|      jsr 126e2 <trimStack>
    ee10:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee12:	|      movea.l 16(sp),a0
    ee16:	|      move.l 24(a0),d0
    ee1a:	|      move.l d0,-(sp)
    ee1c:	|      pea 7 <_start+0x7>
    ee20:	|      moveq #12,d0
    ee22:	|      add.l sp,d0
    ee24:	|      move.l d0,-(sp)
    ee26:	|      jsr 11d5e <getValueType>
    ee2c:	|      lea 12(sp),sp
    ee30:	|      tst.w d0
    ee32:	|  /-- bne.s ee38 <builtIn_setCharacterExtra+0x5e>
    ee34:	|  |   moveq #1,d0
    ee36:	+--|-- bra.s ee76 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    ee38:	|  \-> moveq #24,d0
    ee3a:	|      add.l 16(sp),d0
    ee3e:	|      move.l d0,-(sp)
    ee40:	|      jsr 126e2 <trimStack>
    ee46:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    ee48:	|      move.l (sp),d1
    ee4a:	|      move.l 4(sp),d0
    ee4e:	|      move.l d1,-(sp)
    ee50:	|      move.l d0,-(sp)
    ee52:	|      jsr 93da <setPersonExtra>
    ee58:	|      addq.l #8,sp
    ee5a:	|      movea.w d0,a0
    ee5c:	|      moveq #28,d0
    ee5e:	|      add.l 16(sp),d0
    ee62:	|      move.l a0,-(sp)
    ee64:	|      pea 1 <_start+0x1>
    ee68:	|      move.l d0,-(sp)
    ee6a:	|      jsr 12650 <setVariable>
    ee70:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee74:	|      moveq #2,d0
}
    ee76:	\----> addq.l #8,sp
    ee78:	       rts

0000ee7a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    ee7a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee7c:	       movea.l 12(sp),a0
    ee80:	       move.l 24(a0),d0
    ee84:	       move.l d0,-(sp)
    ee86:	       pea 7 <_start+0x7>
    ee8a:	       move.l sp,d0
    ee8c:	       addq.l #8,d0
    ee8e:	       move.l d0,-(sp)
    ee90:	       jsr 11d5e <getValueType>
    ee96:	       lea 12(sp),sp
    ee9a:	       tst.w d0
    ee9c:	   /-- bne.s eea2 <builtIn_removeCharacter+0x28>
    ee9e:	   |   moveq #1,d0
    eea0:	/--|-- bra.s eec0 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    eea2:	|  \-> moveq #24,d0
    eea4:	|      add.l 12(sp),d0
    eea8:	|      move.l d0,-(sp)
    eeaa:	|      jsr 126e2 <trimStack>
    eeb0:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    eeb2:	|      move.l (sp),d0
    eeb4:	|      move.l d0,-(sp)
    eeb6:	|      jsr 860e <removeOneCharacter>
    eebc:	|      addq.l #4,sp
	return BR_CONTINUE;
    eebe:	|      moveq #2,d0
}
    eec0:	\----> addq.l #4,sp
    eec2:	       rts

0000eec4 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    eec4:	                lea -28(sp),sp
    eec8:	                move.l d2,-(sp)
    eeca:	                move.l 44(sp),d1
    eece:	                move.l 48(sp),d0
    eed2:	                move.w d1,d1
    eed4:	                move.w d1,6(sp)
    eed8:	                move.w d0,d0
    eeda:	                move.w d0,4(sp)
	switch (numParams) {
    eede:	                moveq #2,d0
    eee0:	                cmp.l 36(sp),d0
    eee4:	      /-------- beq.w f026 <moveChr+0x162>
    eee8:	      |         moveq #3,d0
    eeea:	      |         cmp.l 36(sp),d0
    eeee:	/-----|-------- bne.w f15a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eef2:	|     |         movea.l 40(sp),a0
    eef6:	|     |         move.l 24(a0),d0
    eefa:	|     |         move.l d0,-(sp)
    eefc:	|     |         pea 1 <_start+0x1>
    ef00:	|     |         lea 20(sp),a0
    ef04:	|     |         move.l a0,-(sp)
    ef06:	|     |         jsr 11d5e <getValueType>
    ef0c:	|     |         lea 12(sp),sp
    ef10:	|     |         tst.w d0
    ef12:	|     |     /-- bne.s ef1a <moveChr+0x56>
    ef14:	|     |     |   moveq #1,d0
    ef16:	|  /--|-----|-- bra.w f16a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef1a:	|  |  |     \-> moveq #24,d0
    ef1c:	|  |  |         add.l 40(sp),d0
    ef20:	|  |  |         move.l d0,-(sp)
    ef22:	|  |  |         jsr 126e2 <trimStack>
    ef28:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef2a:	|  |  |         movea.l 40(sp),a0
    ef2e:	|  |  |         move.l 24(a0),d0
    ef32:	|  |  |         move.l d0,-(sp)
    ef34:	|  |  |         pea 1 <_start+0x1>
    ef38:	|  |  |         lea 24(sp),a0
    ef3c:	|  |  |         move.l a0,-(sp)
    ef3e:	|  |  |         jsr 11d5e <getValueType>
    ef44:	|  |  |         lea 12(sp),sp
    ef48:	|  |  |         tst.w d0
    ef4a:	|  |  |     /-- bne.s ef52 <moveChr+0x8e>
    ef4c:	|  |  |     |   moveq #1,d0
    ef4e:	|  +--|-----|-- bra.w f16a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef52:	|  |  |     \-> moveq #24,d0
    ef54:	|  |  |         add.l 40(sp),d0
    ef58:	|  |  |         move.l d0,-(sp)
    ef5a:	|  |  |         jsr 126e2 <trimStack>
    ef60:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef62:	|  |  |         movea.l 40(sp),a0
    ef66:	|  |  |         move.l 24(a0),d0
    ef6a:	|  |  |         move.l d0,-(sp)
    ef6c:	|  |  |         pea 7 <_start+0x7>
    ef70:	|  |  |         lea 16(sp),a0
    ef74:	|  |  |         move.l a0,-(sp)
    ef76:	|  |  |         jsr 11d5e <getValueType>
    ef7c:	|  |  |         lea 12(sp),sp
    ef80:	|  |  |         tst.w d0
    ef82:	|  |  |     /-- bne.s ef8a <moveChr+0xc6>
    ef84:	|  |  |     |   moveq #1,d0
    ef86:	|  +--|-----|-- bra.w f16a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef8a:	|  |  |     \-> moveq #24,d0
    ef8c:	|  |  |         add.l 40(sp),d0
    ef90:	|  |  |         move.l d0,-(sp)
    ef92:	|  |  |         jsr 126e2 <trimStack>
    ef98:	|  |  |         addq.l #4,sp

			if (force) {
    ef9a:	|  |  |         tst.w 6(sp)
    ef9e:	|  |  |     /-- beq.s efce <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    efa0:	|  |  |     |   movea.l 8(sp),a0
    efa4:	|  |  |     |   move.l 12(sp),d1
    efa8:	|  |  |     |   move.l 16(sp),d0
    efac:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd14d>
    efb0:	|  |  |     |   move.l 44(sp),-(sp)
    efb4:	|  |  |     |   move.l a0,-(sp)
    efb6:	|  |  |     |   move.l d1,-(sp)
    efb8:	|  |  |     |   move.l d0,-(sp)
    efba:	|  |  |     |   jsr 7e9a <forceWalkingPerson>
    efc0:	|  |  |     |   lea 20(sp),sp
    efc4:	|  |  |     |   tst.w d0
    efc6:	|  |  |  /--|-- beq.s f020 <moveChr+0x15c>
    efc8:	|  |  |  |  |   moveq #3,d0
    efca:	|  +--|--|--|-- bra.w f16a <moveChr+0x2a6>
			} else if (immediate) {
    efce:	|  |  |  |  \-> tst.w 4(sp)
    efd2:	|  |  |  |  /-- beq.s eff2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    efd4:	|  |  |  |  |   movea.l 8(sp),a0
    efd8:	|  |  |  |  |   move.l 12(sp),d1
    efdc:	|  |  |  |  |   move.l 16(sp),d0
    efe0:	|  |  |  |  |   move.l a0,-(sp)
    efe2:	|  |  |  |  |   move.l d1,-(sp)
    efe4:	|  |  |  |  |   move.l d0,-(sp)
    efe6:	|  |  |  |  |   jsr 81a2 <jumpPerson>
    efec:	|  |  |  |  |   lea 12(sp),sp
    eff0:	|  |  |  +--|-- bra.s f020 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    eff2:	|  |  |  |  \-> movea.l 8(sp),a0
    eff6:	|  |  |  |      move.l 12(sp),d1
    effa:	|  |  |  |      move.l 16(sp),d0
    effe:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd14d>
    f002:	|  |  |  |      move.l 44(sp),-(sp)
    f006:	|  |  |  |      move.l a0,-(sp)
    f008:	|  |  |  |      move.l d1,-(sp)
    f00a:	|  |  |  |      move.l d0,-(sp)
    f00c:	|  |  |  |      jsr 8372 <makeWalkingPerson>
    f012:	|  |  |  |      lea 20(sp),sp
    f016:	|  |  |  |      tst.w d0
    f018:	|  |  |  +----- beq.s f020 <moveChr+0x15c>
    f01a:	|  |  |  |      moveq #3,d0
    f01c:	|  +--|--|----- bra.w f16a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f020:	|  |  |  \----> moveq #2,d0
    f022:	|  +--|-------- bra.w f16a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f026:	|  |  \-------> movea.l 40(sp),a0
    f02a:	|  |            move.l 24(a0),d0
    f02e:	|  |            move.l d0,-(sp)
    f030:	|  |            pea 7 <_start+0x7>
    f034:	|  |            moveq #32,d0
    f036:	|  |            add.l sp,d0
    f038:	|  |            move.l d0,-(sp)
    f03a:	|  |            jsr 11d5e <getValueType>
    f040:	|  |            lea 12(sp),sp
    f044:	|  |            tst.w d0
    f046:	|  |        /-- bne.s f04e <moveChr+0x18a>
    f048:	|  |        |   moveq #1,d0
    f04a:	|  +--------|-- bra.w f16a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f04e:	|  |        \-> moveq #24,d0
    f050:	|  |            add.l 40(sp),d0
    f054:	|  |            move.l d0,-(sp)
    f056:	|  |            jsr 126e2 <trimStack>
    f05c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f05e:	|  |            movea.l 40(sp),a0
    f062:	|  |            move.l 24(a0),d0
    f066:	|  |            move.l d0,-(sp)
    f068:	|  |            pea 7 <_start+0x7>
    f06c:	|  |            lea 28(sp),a0
    f070:	|  |            move.l a0,-(sp)
    f072:	|  |            jsr 11d5e <getValueType>
    f078:	|  |            lea 12(sp),sp
    f07c:	|  |            tst.w d0
    f07e:	|  |        /-- bne.s f086 <moveChr+0x1c2>
    f080:	|  |        |   moveq #1,d0
    f082:	|  +--------|-- bra.w f16a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f086:	|  |        \-> moveq #24,d0
    f088:	|  |            add.l 40(sp),d0
    f08c:	|  |            move.l d0,-(sp)
    f08e:	|  |            jsr 126e2 <trimStack>
    f094:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    f096:	|  |            move.l 24(sp),d0
    f09a:	|  |            move.l d0,-(sp)
    f09c:	|  |            jsr 12828 <getRegionForObject>
    f0a2:	|  |            addq.l #4,sp
    f0a4:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    f0a8:	|  |        /-- bne.s f0b0 <moveChr+0x1ec>
    f0aa:	|  |        |   moveq #2,d0
    f0ac:	|  +--------|-- bra.w f16a <moveChr+0x2a6>

			if (force)
    f0b0:	|  |        \-> tst.w 6(sp)
    f0b4:	|  |        /-- beq.s f0f0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f0b6:	|  |        |   movea.l 28(sp),a0
    f0ba:	|  |        |   move.l 24(a0),d2
    f0be:	|  |        |   movea.l 20(sp),a1
    f0c2:	|  |        |   movea.l 28(sp),a0
    f0c6:	|  |        |   move.l 20(a0),d1
    f0ca:	|  |        |   movea.l 28(sp),a0
    f0ce:	|  |        |   move.l 16(a0),d0
    f0d2:	|  |        |   move.l d2,-(sp)
    f0d4:	|  |        |   move.l 44(sp),-(sp)
    f0d8:	|  |        |   move.l a1,-(sp)
    f0da:	|  |        |   move.l d1,-(sp)
    f0dc:	|  |        |   move.l d0,-(sp)
    f0de:	|  |        |   jsr 7e9a <forceWalkingPerson>
    f0e4:	|  |        |   lea 20(sp),sp
    f0e8:	|  |        |   tst.w d0
    f0ea:	|  |     /--|-- beq.s f156 <moveChr+0x292>
    f0ec:	|  |     |  |   moveq #3,d0
    f0ee:	|  +-----|--|-- bra.s f16a <moveChr+0x2a6>
			}
			else if (immediate)
    f0f0:	|  |     |  \-> tst.w 4(sp)
    f0f4:	|  |     |  /-- beq.s f11c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    f0f6:	|  |     |  |   movea.l 20(sp),a1
    f0fa:	|  |     |  |   movea.l 28(sp),a0
    f0fe:	|  |     |  |   move.l 20(a0),d1
    f102:	|  |     |  |   movea.l 28(sp),a0
    f106:	|  |     |  |   move.l 16(a0),d0
    f10a:	|  |     |  |   move.l a1,-(sp)
    f10c:	|  |     |  |   move.l d1,-(sp)
    f10e:	|  |     |  |   move.l d0,-(sp)
    f110:	|  |     |  |   jsr 81a2 <jumpPerson>
    f116:	|  |     |  |   lea 12(sp),sp
    f11a:	|  |     +--|-- bra.s f156 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f11c:	|  |     |  \-> movea.l 28(sp),a0
    f120:	|  |     |      move.l 24(a0),d2
    f124:	|  |     |      movea.l 20(sp),a1
    f128:	|  |     |      movea.l 28(sp),a0
    f12c:	|  |     |      move.l 20(a0),d1
    f130:	|  |     |      movea.l 28(sp),a0
    f134:	|  |     |      move.l 16(a0),d0
    f138:	|  |     |      move.l d2,-(sp)
    f13a:	|  |     |      move.l 44(sp),-(sp)
    f13e:	|  |     |      move.l a1,-(sp)
    f140:	|  |     |      move.l d1,-(sp)
    f142:	|  |     |      move.l d0,-(sp)
    f144:	|  |     |      jsr 8372 <makeWalkingPerson>
    f14a:	|  |     |      lea 20(sp),sp
    f14e:	|  |     |      tst.w d0
    f150:	|  |     +----- beq.s f156 <moveChr+0x292>
    f152:	|  |     |      moveq #3,d0
    f154:	|  +-----|----- bra.s f16a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f156:	|  |     \----> moveq #2,d0
    f158:	|  +----------- bra.s f16a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    f15a:	\--|----------> pea 1638d <custom.c.177df80b+0x16b4>
    f160:	   |            jsr 13da6 <KPrintF>
    f166:	   |            addq.l #4,sp
			return BR_ERROR;
    f168:	   |            moveq #1,d0
	}
}
    f16a:	   \----------> move.l (sp)+,d2
    f16c:	                lea 28(sp),sp
    f170:	                rts

0000f172 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    f172:	clr.l -(sp)
    f174:	clr.l -(sp)
    f176:	move.l 16(sp),-(sp)
    f17a:	move.l 16(sp),-(sp)
    f17e:	jsr eec4 <moveChr>
    f184:	lea 16(sp),sp
}
    f188:	rts

0000f18a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    f18a:	clr.l -(sp)
    f18c:	pea 1 <_start+0x1>
    f190:	move.l 16(sp),-(sp)
    f194:	move.l 16(sp),-(sp)
    f198:	jsr eec4 <moveChr>
    f19e:	lea 16(sp),sp
}
    f1a2:	rts

0000f1a4 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    f1a4:	pea 1 <_start+0x1>
    f1a8:	clr.l -(sp)
    f1aa:	move.l 16(sp),-(sp)
    f1ae:	move.l 16(sp),-(sp)
    f1b2:	jsr eec4 <moveChr>
    f1b8:	lea 16(sp),sp
}
    f1bc:	rts

0000f1be <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    f1be:	jsr 53d8 <clearStatusBar>
	return BR_CONTINUE;
    f1c4:	moveq #2,d0
}
    f1c6:	rts

0000f1c8 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    f1c8:	jsr 5480 <killLastStatus>
	return BR_CONTINUE;
    f1ce:	moveq #2,d0
}
    f1d0:	rts

0000f1d2 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    f1d2:	jsr 536e <addStatusBar>
	return BR_CONTINUE;
    f1d8:	moveq #2,d0
}
    f1da:	rts

0000f1dc <builtIn_statusText>:

builtIn(statusText)
{
    f1dc:	       subq.l #8,sp
    f1de:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f1e0:	       movea.l 20(sp),a0
    f1e4:	       move.l 24(a0),d0
    f1e8:	       move.l d0,-(sp)
    f1ea:	       jsr 12334 <getTextFromAnyVar>
    f1f0:	       addq.l #4,sp
    f1f2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    f1f6:	   /-- bne.s f1fc <builtIn_statusText+0x20>
    f1f8:	   |   moveq #1,d0
    f1fa:	/--|-- bra.s f230 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    f1fc:	|  \-> moveq #24,d0
    f1fe:	|      add.l 20(sp),d0
    f202:	|      move.l d0,-(sp)
    f204:	|      jsr 126e2 <trimStack>
    f20a:	|      addq.l #4,sp
	setStatusBar(newText);
    f20c:	|      move.l 8(sp),-(sp)
    f210:	|      jsr 5700 <setStatusBar>
    f216:	|      addq.l #4,sp
	FreeVec(newText);
    f218:	|      move.l 8(sp),4(sp)
    f21e:	|      move.l 190e8 <SysBase>,d0
    f224:	|      movea.l d0,a6
    f226:	|      movea.l 4(sp),a1
    f22a:	|      jsr -690(a6)
	return BR_CONTINUE;
    f22e:	|      moveq #2,d0
}
    f230:	\----> movea.l (sp)+,a6
    f232:	       addq.l #8,sp
    f234:	       rts

0000f236 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    f236:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f238:	       movea.l 12(sp),a0
    f23c:	       move.l 24(a0),d0
    f240:	       move.l d0,-(sp)
    f242:	       pea 1 <_start+0x1>
    f246:	       move.l sp,d0
    f248:	       addq.l #8,d0
    f24a:	       move.l d0,-(sp)
    f24c:	       jsr 11d5e <getValueType>
    f252:	       lea 12(sp),sp
    f256:	       tst.w d0
    f258:	   /-- bne.s f25e <builtIn_lightStatus+0x28>
    f25a:	   |   moveq #1,d0
    f25c:	/--|-- bra.s f27c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    f25e:	|  \-> moveq #24,d0
    f260:	|      add.l 12(sp),d0
    f264:	|      move.l d0,-(sp)
    f266:	|      jsr 126e2 <trimStack>
    f26c:	|      addq.l #4,sp
	setLitStatus (val);
    f26e:	|      move.l (sp),d0
    f270:	|      move.l d0,-(sp)
    f272:	|      jsr 56f0 <setLitStatus>
    f278:	|      addq.l #4,sp
	return BR_CONTINUE;
    f27a:	|      moveq #2,d0
}
    f27c:	\----> addq.l #4,sp
    f27e:	       rts

0000f280 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    f280:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f282:	       movea.l 16(sp),a0
    f286:	       move.l 24(a0),d0
    f28a:	       move.l d0,-(sp)
    f28c:	       pea 1 <_start+0x1>
    f290:	       move.l sp,d0
    f292:	       addq.l #8,d0
    f294:	       move.l d0,-(sp)
    f296:	       jsr 11d5e <getValueType>
    f29c:	       lea 12(sp),sp
    f2a0:	       tst.w d0
    f2a2:	   /-- bne.s f2a8 <builtIn_positionStatus+0x28>
    f2a4:	   |   moveq #1,d0
    f2a6:	/--|-- bra.s f302 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f2a8:	|  \-> moveq #24,d0
    f2aa:	|      add.l 16(sp),d0
    f2ae:	|      move.l d0,-(sp)
    f2b0:	|      jsr 126e2 <trimStack>
    f2b6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2b8:	|      movea.l 16(sp),a0
    f2bc:	|      move.l 24(a0),d0
    f2c0:	|      move.l d0,-(sp)
    f2c2:	|      pea 1 <_start+0x1>
    f2c6:	|      moveq #12,d0
    f2c8:	|      add.l sp,d0
    f2ca:	|      move.l d0,-(sp)
    f2cc:	|      jsr 11d5e <getValueType>
    f2d2:	|      lea 12(sp),sp
    f2d6:	|      tst.w d0
    f2d8:	|  /-- bne.s f2de <builtIn_positionStatus+0x5e>
    f2da:	|  |   moveq #1,d0
    f2dc:	+--|-- bra.s f302 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f2de:	|  \-> moveq #24,d0
    f2e0:	|      add.l 16(sp),d0
    f2e4:	|      move.l d0,-(sp)
    f2e6:	|      jsr 126e2 <trimStack>
    f2ec:	|      addq.l #4,sp
	positionStatus (x, y);
    f2ee:	|      move.l (sp),d1
    f2f0:	|      move.l 4(sp),d0
    f2f4:	|      move.l d1,-(sp)
    f2f6:	|      move.l d0,-(sp)
    f2f8:	|      jsr 54e2 <positionStatus>
    f2fe:	|      addq.l #8,sp
	return BR_CONTINUE;
    f300:	|      moveq #2,d0
}
    f302:	\----> addq.l #8,sp
    f304:	       rts

0000f306 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    f306:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f308:	       movea.l 12(sp),a0
    f30c:	       move.l 24(a0),d0
    f310:	       move.l d0,-(sp)
    f312:	       pea 1 <_start+0x1>
    f316:	       move.l sp,d0
    f318:	       addq.l #8,d0
    f31a:	       move.l d0,-(sp)
    f31c:	       jsr 11d5e <getValueType>
    f322:	       lea 12(sp),sp
    f326:	       tst.w d0
    f328:	   /-- bne.s f32e <builtIn_alignStatus+0x28>
    f32a:	   |   moveq #1,d0
    f32c:	/--|-- bra.s f34e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    f32e:	|  \-> moveq #24,d0
    f330:	|      add.l 12(sp),d0
    f334:	|      move.l d0,-(sp)
    f336:	|      jsr 126e2 <trimStack>
    f33c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    f33e:	|      move.l (sp),d0
    f340:	|      movea.l 18a88 <nowStatus>,a0
    f346:	|      move.l d0,d0
    f348:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    f34c:	|      moveq #2,d0
}
    f34e:	\----> addq.l #4,sp
    f350:	       rts

0000f352 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    f352:	             tst.l 4(sp)
    f356:	      /----- beq.s f362 <getFuncNumForCallback+0x10>
    f358:	      |      moveq #1,d0
    f35a:	      |      cmp.l 4(sp),d0
    f35e:	      |  /-- beq.s f368 <getFuncNumForCallback+0x16>
    f360:	   /--|--|-- bra.s f39e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    f362:	   |  \--|-> clr.l 12(sp)
			break;
    f366:	/--|-----|-- bra.s f3b0 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    f368:	|  |     \-> movea.l 8(sp),a0
    f36c:	|  |         move.l 24(a0),d0
    f370:	|  |         move.l d0,-(sp)
    f372:	|  |         pea 2 <_start+0x2>
    f376:	|  |         move.l 20(sp),-(sp)
    f37a:	|  |         jsr 11d5e <getValueType>
    f380:	|  |         lea 12(sp),sp
    f384:	|  |         tst.w d0
    f386:	|  |     /-- bne.s f38c <getFuncNumForCallback+0x3a>
    f388:	|  |     |   clr.w d0
    f38a:	|  |  /--|-- bra.s f3b2 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    f38c:	|  |  |  \-> moveq #24,d0
    f38e:	|  |  |      add.l 8(sp),d0
    f392:	|  |  |      move.l d0,-(sp)
    f394:	|  |  |      jsr 126e2 <trimStack>
    f39a:	|  |  |      addq.l #4,sp
			break;
    f39c:	+--|--|----- bra.s f3b0 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    f39e:	|  \--|----> pea 163c3 <custom.c.177df80b+0x16ea>
    f3a4:	|     |      jsr 13da6 <KPrintF>
    f3aa:	|     |      addq.l #4,sp
			return FALSE;
    f3ac:	|     |      clr.w d0
    f3ae:	|     +----- bra.s f3b2 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    f3b0:	\-----|----> moveq #1,d0
}
    f3b2:	      \----> rts

0000f3b4 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    f3b4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f3b6:	       move.l sp,d0
    f3b8:	       move.l d0,-(sp)
    f3ba:	       move.l 16(sp),-(sp)
    f3be:	       move.l 16(sp),-(sp)
    f3c2:	       jsr f352 <getFuncNumForCallback>
    f3c8:	       lea 12(sp),sp
    f3cc:	       tst.w d0
    f3ce:	/----- beq.s f3de <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    f3d0:	|      movea.l 18a7a <currentEvents>,a0
    f3d6:	|      move.l (sp),d0
    f3d8:	|      move.l d0,(a0)
		return BR_CONTINUE;
    f3da:	|      moveq #2,d0
    f3dc:	|  /-- bra.s f3e0 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    f3de:	\--|-> moveq #1,d0
}
    f3e0:	   \-> addq.l #4,sp
    f3e2:	       rts

0000f3e4 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    f3e4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f3e6:	       move.l sp,d0
    f3e8:	       move.l d0,-(sp)
    f3ea:	       move.l 16(sp),-(sp)
    f3ee:	       move.l 16(sp),-(sp)
    f3f2:	       jsr f352 <getFuncNumForCallback>
    f3f8:	       lea 12(sp),sp
    f3fc:	       tst.w d0
    f3fe:	/----- beq.s f410 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    f400:	|      movea.l 18a7a <currentEvents>,a0
    f406:	|      move.l (sp),d0
    f408:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    f40c:	|      moveq #2,d0
    f40e:	|  /-- bra.s f412 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    f410:	\--|-> moveq #1,d0
}
    f412:	   \-> addq.l #4,sp
    f414:	       rts

0000f416 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    f416:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f418:	       move.l sp,d0
    f41a:	       move.l d0,-(sp)
    f41c:	       move.l 16(sp),-(sp)
    f420:	       move.l 16(sp),-(sp)
    f424:	       jsr f352 <getFuncNumForCallback>
    f42a:	       lea 12(sp),sp
    f42e:	       tst.w d0
    f430:	/----- beq.s f442 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    f432:	|      movea.l 18a7a <currentEvents>,a0
    f438:	|      move.l (sp),d0
    f43a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    f43e:	|      moveq #2,d0
    f440:	|  /-- bra.s f444 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    f442:	\--|-> moveq #1,d0
}
    f444:	   \-> addq.l #4,sp
    f446:	       rts

0000f448 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    f448:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f44a:	       move.l sp,d0
    f44c:	       move.l d0,-(sp)
    f44e:	       move.l 16(sp),-(sp)
    f452:	       move.l 16(sp),-(sp)
    f456:	       jsr f352 <getFuncNumForCallback>
    f45c:	       lea 12(sp),sp
    f460:	       tst.w d0
    f462:	/----- beq.s f474 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    f464:	|      movea.l 18a7a <currentEvents>,a0
    f46a:	|      move.l (sp),d0
    f46c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    f470:	|      moveq #2,d0
    f472:	|  /-- bra.s f476 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    f474:	\--|-> moveq #1,d0
}
    f476:	   \-> addq.l #4,sp
    f478:	       rts

0000f47a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    f47a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f47c:	       move.l sp,d0
    f47e:	       move.l d0,-(sp)
    f480:	       move.l 16(sp),-(sp)
    f484:	       move.l 16(sp),-(sp)
    f488:	       jsr f352 <getFuncNumForCallback>
    f48e:	       lea 12(sp),sp
    f492:	       tst.w d0
    f494:	/----- beq.s f4a6 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    f496:	|      movea.l 18a7a <currentEvents>,a0
    f49c:	|      move.l (sp),d0
    f49e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    f4a2:	|      moveq #2,d0
    f4a4:	|  /-- bra.s f4a8 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    f4a6:	\--|-> moveq #1,d0
}
    f4a8:	   \-> addq.l #4,sp
    f4aa:	       rts

0000f4ac <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    f4ac:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f4ae:	       move.l sp,d0
    f4b0:	       move.l d0,-(sp)
    f4b2:	       move.l 16(sp),-(sp)
    f4b6:	       move.l 16(sp),-(sp)
    f4ba:	       jsr f352 <getFuncNumForCallback>
    f4c0:	       lea 12(sp),sp
    f4c4:	       tst.w d0
    f4c6:	/----- beq.s f4d8 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    f4c8:	|      movea.l 18a7a <currentEvents>,a0
    f4ce:	|      move.l (sp),d0
    f4d0:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    f4d4:	|      moveq #2,d0
    f4d6:	|  /-- bra.s f4da <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    f4d8:	\--|-> moveq #1,d0
}
    f4da:	   \-> addq.l #4,sp
    f4dc:	       rts

0000f4de <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    f4de:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f4e0:	       move.l sp,d0
    f4e2:	       move.l d0,-(sp)
    f4e4:	       move.l 16(sp),-(sp)
    f4e8:	       move.l 16(sp),-(sp)
    f4ec:	       jsr f352 <getFuncNumForCallback>
    f4f2:	       lea 12(sp),sp
    f4f6:	       tst.w d0
    f4f8:	/----- beq.s f50a <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    f4fa:	|      movea.l 18a7a <currentEvents>,a0
    f500:	|      move.l (sp),d0
    f502:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    f506:	|      moveq #2,d0
    f508:	|  /-- bra.s f50c <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    f50a:	\--|-> moveq #1,d0
}
    f50c:	   \-> addq.l #4,sp
    f50e:	       rts

0000f510 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    f510:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f512:	          move.l sp,d0
    f514:	          move.l d0,-(sp)
    f516:	          move.l 16(sp),-(sp)
    f51a:	          move.l 16(sp),-(sp)
    f51e:	          jsr f352 <getFuncNumForCallback>
    f524:	          lea 12(sp),sp
    f528:	          tst.w d0
    f52a:	/-------- beq.s f556 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    f52c:	|         move.l 190b8 <noStack>,d1
    f532:	|         move.l (sp),d0
    f534:	|         pea 1 <_start+0x1>
    f538:	|         move.l d1,-(sp)
    f53a:	|         clr.l -(sp)
    f53c:	|         clr.l -(sp)
    f53e:	|         move.l d0,-(sp)
    f540:	|         jsr 45f2 <startNewFunctionNum>
    f546:	|         lea 20(sp),sp
    f54a:	|         tst.l d0
    f54c:	|     /-- bne.s f552 <builtIn_spawnSub+0x42>
    f54e:	|     |   moveq #1,d0
    f550:	|  /--|-- bra.s f558 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    f552:	|  |  \-> moveq #2,d0
    f554:	|  +----- bra.s f558 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    f556:	\--|----> moveq #1,d0
}
    f558:	   \----> addq.l #4,sp
    f55a:	          rts

0000f55c <builtIn_cancelSub>:

builtIn (cancelSub)
{
    f55c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f55e:	          move.l sp,d0
    f560:	          addq.l #4,d0
    f562:	          move.l d0,-(sp)
    f564:	          move.l 20(sp),-(sp)
    f568:	          move.l 20(sp),-(sp)
    f56c:	          jsr f352 <getFuncNumForCallback>
    f572:	          lea 12(sp),sp
    f576:	          tst.w d0
    f578:	/-------- beq.s f5ae <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    f57a:	|         move.l 4(sp),d1
    f57e:	|         move.l sp,d0
    f580:	|         addq.l #2,d0
    f582:	|         move.l d0,-(sp)
    f584:	|         move.l 20(sp),-(sp)
    f588:	|         move.l d1,-(sp)
    f58a:	|         jsr 25aa <cancelAFunction>
    f590:	|         lea 12(sp),sp
		if (killedMyself) {
    f594:	|         move.w 2(sp),d0
    f598:	|  /----- beq.s f5aa <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    f59a:	|  |      move.l 16(sp),-(sp)
    f59e:	|  |      jsr 24c8 <abortFunction>
    f5a4:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    f5a6:	|  |      moveq #5,d0
    f5a8:	|  |  /-- bra.s f5b0 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    f5aa:	|  \--|-> moveq #2,d0
    f5ac:	|     +-- bra.s f5b0 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    f5ae:	\-----|-> moveq #1,d0
}
    f5b0:	      \-> addq.l #8,sp
    f5b2:	          rts

0000f5b4 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    f5b4:	       subq.l #8,sp
    f5b6:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    f5b8:	       movea.l 20(sp),a0
    f5bc:	       move.l 24(a0),d0
    f5c0:	       move.l d0,-(sp)
    f5c2:	       jsr 12334 <getTextFromAnyVar>
    f5c8:	       addq.l #4,sp
    f5ca:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    f5ce:	   /-- bne.s f5d4 <builtIn_stringWidth+0x20>
    f5d0:	   |   moveq #1,d0
    f5d2:	/--|-- bra.s f622 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    f5d4:	|  \-> moveq #24,d0
    f5d6:	|      add.l 20(sp),d0
    f5da:	|      move.l d0,-(sp)
    f5dc:	|      jsr 126e2 <trimStack>
    f5e2:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    f5e4:	|      move.l 8(sp),-(sp)
    f5e8:	|      jsr 1273c <stringWidth>
    f5ee:	|      addq.l #4,sp
    f5f0:	|      move.l d0,d1
    f5f2:	|      moveq #28,d0
    f5f4:	|      add.l 20(sp),d0
    f5f8:	|      move.l d1,-(sp)
    f5fa:	|      pea 1 <_start+0x1>
    f5fe:	|      move.l d0,-(sp)
    f600:	|      jsr 12650 <setVariable>
    f606:	|      lea 12(sp),sp
	FreeVec(theText);
    f60a:	|      move.l 8(sp),4(sp)
    f610:	|      move.l 190e8 <SysBase>,d0
    f616:	|      movea.l d0,a6
    f618:	|      movea.l 4(sp),a1
    f61c:	|      jsr -690(a6)
	return BR_CONTINUE;
    f620:	|      moveq #2,d0
}
    f622:	\----> movea.l (sp)+,a6
    f624:	       addq.l #8,sp
    f626:	       rts

0000f628 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    f628:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f62a:	       movea.l 12(sp),a0
    f62e:	       move.l 24(a0),d0
    f632:	       move.l d0,-(sp)
    f634:	       pea 1 <_start+0x1>
    f638:	       move.l sp,d0
    f63a:	       addq.l #8,d0
    f63c:	       move.l d0,-(sp)
    f63e:	       jsr 11d5e <getValueType>
    f644:	       lea 12(sp),sp
    f648:	       tst.w d0
    f64a:	   /-- bne.s f650 <builtIn_hardScroll+0x28>
    f64c:	   |   moveq #1,d0
    f64e:	/--|-- bra.s f66e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    f650:	|  \-> moveq #24,d0
    f652:	|      add.l 12(sp),d0
    f656:	|      move.l d0,-(sp)
    f658:	|      jsr 126e2 <trimStack>
    f65e:	|      addq.l #4,sp
	hardScroll (v);
    f660:	|      move.l (sp),d0
    f662:	|      move.l d0,-(sp)
    f664:	|      jsr a8f2 <hardScroll>
    f66a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f66c:	|      moveq #2,d0
}
    f66e:	\----> addq.l #4,sp
    f670:	       rts

0000f672 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    f672:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f674:	       movea.l 12(sp),a0
    f678:	       move.l 24(a0),d0
    f67c:	       move.l d0,-(sp)
    f67e:	       pea 7 <_start+0x7>
    f682:	       move.l sp,d0
    f684:	       addq.l #8,d0
    f686:	       move.l d0,-(sp)
    f688:	       jsr 11d5e <getValueType>
    f68e:	       lea 12(sp),sp
    f692:	       tst.w d0
    f694:	   /-- bne.s f69a <builtIn_isScreenRegion+0x28>
    f696:	   |   moveq #1,d0
    f698:	/--|-- bra.s f6da <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    f69a:	|  \-> moveq #24,d0
    f69c:	|      add.l 12(sp),d0
    f6a0:	|      move.l d0,-(sp)
    f6a2:	|      jsr 126e2 <trimStack>
    f6a8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    f6aa:	|      move.l (sp),d0
    f6ac:	|      move.l d0,-(sp)
    f6ae:	|      jsr 12828 <getRegionForObject>
    f6b4:	|      addq.l #4,sp
    f6b6:	|      tst.l d0
    f6b8:	|      sne d0
    f6ba:	|      neg.b d0
    f6bc:	|      moveq #0,d1
    f6be:	|      move.b d0,d1
    f6c0:	|      moveq #28,d0
    f6c2:	|      add.l 12(sp),d0
    f6c6:	|      move.l d1,-(sp)
    f6c8:	|      pea 1 <_start+0x1>
    f6cc:	|      move.l d0,-(sp)
    f6ce:	|      jsr 12650 <setVariable>
    f6d4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f6d8:	|      moveq #2,d0
}
    f6da:	\----> addq.l #4,sp
    f6dc:	       rts

0000f6de <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    f6de:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6e0:	       movea.l 12(sp),a0
    f6e4:	       move.l 24(a0),d0
    f6e8:	       move.l d0,-(sp)
    f6ea:	       pea 1 <_start+0x1>
    f6ee:	       move.l sp,d0
    f6f0:	       addq.l #8,d0
    f6f2:	       move.l d0,-(sp)
    f6f4:	       jsr 11d5e <getValueType>
    f6fa:	       lea 12(sp),sp
    f6fe:	       tst.w d0
    f700:	   /-- bne.s f706 <builtIn_setSpeechSpeed+0x28>
    f702:	   |   moveq #1,d0
    f704:	/--|-- bra.s f754 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    f706:	|  \-> moveq #24,d0
    f708:	|      add.l 12(sp),d0
    f70c:	|      move.l d0,-(sp)
    f70e:	|      jsr 126e2 <trimStack>
    f714:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    f716:	|      move.l (sp),d0
    f718:	|      move.l d0,-(sp)
    f71a:	|      jsr 141e2 <__floatsisf>
    f720:	|      addq.l #4,sp
    f722:	|      move.l #1008981770,-(sp)
    f728:	|      move.l d0,-(sp)
    f72a:	|      jsr 14294 <__mulsf3>
    f730:	|      addq.l #8,sp
    f732:	|      move.l d0,18a8c <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    f738:	|      moveq #28,d0
    f73a:	|      add.l 12(sp),d0
    f73e:	|      pea 1 <_start+0x1>
    f742:	|      pea 1 <_start+0x1>
    f746:	|      move.l d0,-(sp)
    f748:	|      jsr 12650 <setVariable>
    f74e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f752:	|      moveq #2,d0
}
    f754:	\----> addq.l #4,sp
    f756:	       rts

0000f758 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    f758:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f75a:	       movea.l 12(sp),a0
    f75e:	       move.l 24(a0),d0
    f762:	       move.l d0,-(sp)
    f764:	       pea 1 <_start+0x1>
    f768:	       move.l sp,d0
    f76a:	       addq.l #8,d0
    f76c:	       move.l d0,-(sp)
    f76e:	       jsr 11d5e <getValueType>
    f774:	       lea 12(sp),sp
    f778:	       tst.w d0
    f77a:	   /-- bne.s f780 <builtIn_setFontSpacing+0x28>
    f77c:	   |   moveq #1,d0
    f77e:	/--|-- bra.s f7b6 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    f780:	|  \-> move.l (sp),d0
    f782:	|      move.l d0,d0
    f784:	|      move.w d0,19006 <fontSpace>
	trimStack (&fun -> stack);
    f78a:	|      moveq #24,d0
    f78c:	|      add.l 12(sp),d0
    f790:	|      move.l d0,-(sp)
    f792:	|      jsr 126e2 <trimStack>
    f798:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f79a:	|      moveq #28,d0
    f79c:	|      add.l 12(sp),d0
    f7a0:	|      pea 1 <_start+0x1>
    f7a4:	|      pea 1 <_start+0x1>
    f7a8:	|      move.l d0,-(sp)
    f7aa:	|      jsr 12650 <setVariable>
    f7b0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f7b4:	|      moveq #2,d0
}
    f7b6:	\----> addq.l #4,sp
    f7b8:	       rts

0000f7ba <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    f7ba:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7bc:	          movea.l 12(sp),a0
    f7c0:	          move.l 24(a0),d0
    f7c4:	          move.l d0,-(sp)
    f7c6:	          pea 1 <_start+0x1>
    f7ca:	          move.l sp,d0
    f7cc:	          addq.l #8,d0
    f7ce:	          move.l d0,-(sp)
    f7d0:	          jsr 11d5e <getValueType>
    f7d6:	          lea 12(sp),sp
    f7da:	          tst.w d0
    f7dc:	      /-- bne.s f7e2 <builtIn_transitionLevel+0x28>
    f7de:	      |   moveq #1,d0
    f7e0:	/-----|-- bra.s f836 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    f7e2:	|     \-> moveq #24,d0
    f7e4:	|         add.l 12(sp),d0
    f7e8:	|         move.l d0,-(sp)
    f7ea:	|         jsr 126e2 <trimStack>
    f7f0:	|         addq.l #4,sp

	if (number < 0)
    f7f2:	|         move.l (sp),d0
    f7f4:	|     /-- bpl.s f7fe <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    f7f6:	|     |   clr.b 18a78 <brightnessLevel>
    f7fc:	|  /--|-- bra.s f81a <builtIn_transitionLevel+0x60>
	else if (number > 255)
    f7fe:	|  |  \-> move.l (sp),d0
    f800:	|  |      cmpi.l #255,d0
    f806:	|  |  /-- ble.s f810 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    f808:	|  |  |   st 18a78 <brightnessLevel>
    f80e:	|  +--|-- bra.s f81a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    f810:	|  |  \-> move.l (sp),d0
    f812:	|  |      move.l d0,d0
    f814:	|  |      move.b d0,18a78 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    f81a:	|  \----> moveq #28,d0
    f81c:	|         add.l 12(sp),d0
    f820:	|         pea 1 <_start+0x1>
    f824:	|         pea 1 <_start+0x1>
    f828:	|         move.l d0,-(sp)
    f82a:	|         jsr 12650 <setVariable>
    f830:	|         lea 12(sp),sp
	return BR_CONTINUE;
    f834:	|         moveq #2,d0
}
    f836:	\-------> addq.l #4,sp
    f838:	          rts

0000f83a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    f83a:	movea.l 8(sp),a0
    f83e:	move.l 24(a0),d0
    f842:	move.l d0,-(sp)
    f844:	jsr 1229e <getBoolean>
    f84a:	addq.l #4,sp
    f84c:	move.w d0,19088 <captureAllKeys>
	trimStack (&fun -> stack);
    f852:	moveq #24,d0
    f854:	add.l 8(sp),d0
    f858:	move.l d0,-(sp)
    f85a:	jsr 126e2 <trimStack>
    f860:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    f862:	move.w 19088 <captureAllKeys>,d0
    f868:	movea.w d0,a0
    f86a:	moveq #28,d0
    f86c:	add.l 8(sp),d0
    f870:	move.l a0,-(sp)
    f872:	pea 1 <_start+0x1>
    f876:	move.l d0,-(sp)
    f878:	jsr 12650 <setVariable>
    f87e:	lea 12(sp),sp
	return BR_CONTINUE;
    f882:	moveq #2,d0
}
    f884:	rts

0000f886 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    f886:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f88a:	       movea.l 20(sp),a0
    f88e:	       move.l 24(a0),d0
    f892:	       move.l d0,-(sp)
    f894:	       pea 1 <_start+0x1>
    f898:	       moveq #12,d0
    f89a:	       add.l sp,d0
    f89c:	       move.l d0,-(sp)
    f89e:	       jsr 11d5e <getValueType>
    f8a4:	       lea 12(sp),sp
    f8a8:	       tst.w d0
    f8aa:	   /-- bne.s f8b2 <builtIn_spinCharacter+0x2c>
    f8ac:	   |   moveq #1,d0
    f8ae:	/--|-- bra.w f962 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f8b2:	|  \-> moveq #24,d0
    f8b4:	|      add.l 20(sp),d0
    f8b8:	|      move.l d0,-(sp)
    f8ba:	|      jsr 126e2 <trimStack>
    f8c0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8c2:	|      movea.l 20(sp),a0
    f8c6:	|      move.l 24(a0),d0
    f8ca:	|      move.l d0,-(sp)
    f8cc:	|      pea 7 <_start+0x7>
    f8d0:	|      lea 8(sp),a0
    f8d4:	|      move.l a0,-(sp)
    f8d6:	|      jsr 11d5e <getValueType>
    f8dc:	|      lea 12(sp),sp
    f8e0:	|      tst.w d0
    f8e2:	|  /-- bne.s f8e8 <builtIn_spinCharacter+0x62>
    f8e4:	|  |   moveq #1,d0
    f8e6:	+--|-- bra.s f962 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f8e8:	|  \-> moveq #24,d0
    f8ea:	|      add.l 20(sp),d0
    f8ee:	|      move.l d0,-(sp)
    f8f0:	|      jsr 126e2 <trimStack>
    f8f6:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f8f8:	|      move.l (sp),d0
    f8fa:	|      move.l d0,-(sp)
    f8fc:	|      jsr 7e48 <findPerson>
    f902:	|      addq.l #4,sp
    f904:	|      move.l d0,8(sp)
	if (thisPerson) {
    f908:	|  /-- beq.s f948 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    f90a:	|  |   move.l 4(sp),d0
    f90e:	|  |   movea.l 8(sp),a0
    f912:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    f916:	|  |   movea.l 8(sp),a0
    f91a:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    f920:	|  |   movea.l 8(sp),a0
    f924:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f92a:	|  |   moveq #28,d0
    f92c:	|  |   add.l 20(sp),d0
    f930:	|  |   pea 1 <_start+0x1>
    f934:	|  |   pea 1 <_start+0x1>
    f938:	|  |   move.l d0,-(sp)
    f93a:	|  |   jsr 12650 <setVariable>
    f940:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    f944:	|  |   moveq #3,d0
    f946:	+--|-- bra.s f962 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f948:	|  \-> moveq #28,d0
    f94a:	|      add.l 20(sp),d0
    f94e:	|      clr.l -(sp)
    f950:	|      pea 1 <_start+0x1>
    f954:	|      move.l d0,-(sp)
    f956:	|      jsr 12650 <setVariable>
    f95c:	|      lea 12(sp),sp
		return BR_CONTINUE;
    f960:	|      moveq #2,d0
	}
}
    f962:	\----> lea 12(sp),sp
    f966:	       rts

0000f968 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    f968:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f96a:	          movea.l 16(sp),a0
    f96e:	          move.l 24(a0),d0
    f972:	          move.l d0,-(sp)
    f974:	          pea 7 <_start+0x7>
    f978:	          move.l sp,d0
    f97a:	          addq.l #8,d0
    f97c:	          move.l d0,-(sp)
    f97e:	          jsr 11d5e <getValueType>
    f984:	          lea 12(sp),sp
    f988:	          tst.w d0
    f98a:	      /-- bne.s f990 <builtIn_getCharacterDirection+0x28>
    f98c:	      |   moveq #1,d0
    f98e:	/-----|-- bra.s f9ee <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    f990:	|     \-> moveq #24,d0
    f992:	|         add.l 16(sp),d0
    f996:	|         move.l d0,-(sp)
    f998:	|         jsr 126e2 <trimStack>
    f99e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f9a0:	|         move.l (sp),d0
    f9a2:	|         move.l d0,-(sp)
    f9a4:	|         jsr 7e48 <findPerson>
    f9aa:	|         addq.l #4,sp
    f9ac:	|         move.l d0,4(sp)
	if (thisPerson) {
    f9b0:	|  /----- beq.s f9d4 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    f9b2:	|  |      movea.l 4(sp),a0
    f9b6:	|  |      move.l 94(a0),d1
    f9ba:	|  |      moveq #28,d0
    f9bc:	|  |      add.l 16(sp),d0
    f9c0:	|  |      move.l d1,-(sp)
    f9c2:	|  |      pea 1 <_start+0x1>
    f9c6:	|  |      move.l d0,-(sp)
    f9c8:	|  |      jsr 12650 <setVariable>
    f9ce:	|  |      lea 12(sp),sp
    f9d2:	|  |  /-- bra.s f9ec <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f9d4:	|  \--|-> moveq #28,d0
    f9d6:	|     |   add.l 16(sp),d0
    f9da:	|     |   clr.l -(sp)
    f9dc:	|     |   pea 1 <_start+0x1>
    f9e0:	|     |   move.l d0,-(sp)
    f9e2:	|     |   jsr 12650 <setVariable>
    f9e8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f9ec:	|     \-> moveq #2,d0
}
    f9ee:	\-------> addq.l #8,sp
    f9f0:	          rts

0000f9f2 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    f9f2:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f9f4:	       movea.l 16(sp),a0
    f9f8:	       move.l 24(a0),d0
    f9fc:	       move.l d0,-(sp)
    f9fe:	       pea 7 <_start+0x7>
    fa02:	       move.l sp,d0
    fa04:	       addq.l #8,d0
    fa06:	       move.l d0,-(sp)
    fa08:	       jsr 11d5e <getValueType>
    fa0e:	       lea 12(sp),sp
    fa12:	       tst.w d0
    fa14:	   /-- bne.s fa1a <builtIn_isCharacter+0x28>
    fa16:	   |   moveq #1,d0
    fa18:	/--|-- bra.s fa5c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    fa1a:	|  \-> moveq #24,d0
    fa1c:	|      add.l 16(sp),d0
    fa20:	|      move.l d0,-(sp)
    fa22:	|      jsr 126e2 <trimStack>
    fa28:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fa2a:	|      move.l (sp),d0
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      jsr 7e48 <findPerson>
    fa34:	|      addq.l #4,sp
    fa36:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    fa3a:	|      sne d0
    fa3c:	|      neg.b d0
    fa3e:	|      moveq #0,d1
    fa40:	|      move.b d0,d1
    fa42:	|      moveq #28,d0
    fa44:	|      add.l 16(sp),d0
    fa48:	|      move.l d1,-(sp)
    fa4a:	|      pea 1 <_start+0x1>
    fa4e:	|      move.l d0,-(sp)
    fa50:	|      jsr 12650 <setVariable>
    fa56:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fa5a:	|      moveq #2,d0
}
    fa5c:	\----> addq.l #8,sp
    fa5e:	       rts

0000fa60 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    fa60:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa62:	          movea.l 16(sp),a0
    fa66:	          move.l 24(a0),d0
    fa6a:	          move.l d0,-(sp)
    fa6c:	          pea 7 <_start+0x7>
    fa70:	          move.l sp,d0
    fa72:	          addq.l #8,d0
    fa74:	          move.l d0,-(sp)
    fa76:	          jsr 11d5e <getValueType>
    fa7c:	          lea 12(sp),sp
    fa80:	          tst.w d0
    fa82:	      /-- bne.s fa88 <builtIn_normalCharacter+0x28>
    fa84:	      |   moveq #1,d0
    fa86:	/-----|-- bra.s fb04 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    fa88:	|     \-> moveq #24,d0
    fa8a:	|         add.l 16(sp),d0
    fa8e:	|         move.l d0,-(sp)
    fa90:	|         jsr 126e2 <trimStack>
    fa96:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fa98:	|         move.l (sp),d0
    fa9a:	|         move.l d0,-(sp)
    fa9c:	|         jsr 7e48 <findPerson>
    faa2:	|         addq.l #4,sp
    faa4:	|         move.l d0,4(sp)
	if (thisPerson)
    faa8:	|  /----- beq.s faea <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    faaa:	|  |      movea.l 4(sp),a0
    faae:	|  |      movea.l 68(a0),a0
    fab2:	|  |      move.l (a0),d1
    fab4:	|  |      movea.l 4(sp),a0
    fab8:	|  |      move.l 94(a0),d0
    fabc:	|  |      add.l d0,d0
    fabe:	|  |      add.l d0,d0
    fac0:	|  |      movea.l d1,a0
    fac2:	|  |      adda.l d0,a0
    fac4:	|  |      move.l (a0),d0
    fac6:	|  |      movea.l 4(sp),a0
    faca:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    face:	|  |      moveq #28,d0
    fad0:	|  |      add.l 16(sp),d0
    fad4:	|  |      pea 1 <_start+0x1>
    fad8:	|  |      pea 1 <_start+0x1>
    fadc:	|  |      move.l d0,-(sp)
    fade:	|  |      jsr 12650 <setVariable>
    fae4:	|  |      lea 12(sp),sp
    fae8:	|  |  /-- bra.s fb02 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    faea:	|  \--|-> moveq #28,d0
    faec:	|     |   add.l 16(sp),d0
    faf0:	|     |   clr.l -(sp)
    faf2:	|     |   pea 1 <_start+0x1>
    faf6:	|     |   move.l d0,-(sp)
    faf8:	|     |   jsr 12650 <setVariable>
    fafe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fb02:	|     \-> moveq #2,d0
}
    fb04:	\-------> addq.l #8,sp
    fb06:	          rts

0000fb08 <builtIn_isMoving>:

builtIn(isMoving)
{
    fb08:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb0a:	          movea.l 16(sp),a0
    fb0e:	          move.l 24(a0),d0
    fb12:	          move.l d0,-(sp)
    fb14:	          pea 7 <_start+0x7>
    fb18:	          move.l sp,d0
    fb1a:	          addq.l #8,d0
    fb1c:	          move.l d0,-(sp)
    fb1e:	          jsr 11d5e <getValueType>
    fb24:	          lea 12(sp),sp
    fb28:	          tst.w d0
    fb2a:	      /-- bne.s fb30 <builtIn_isMoving+0x28>
    fb2c:	      |   moveq #1,d0
    fb2e:	/-----|-- bra.s fb90 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    fb30:	|     \-> moveq #24,d0
    fb32:	|         add.l 16(sp),d0
    fb36:	|         move.l d0,-(sp)
    fb38:	|         jsr 126e2 <trimStack>
    fb3e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fb40:	|         move.l (sp),d0
    fb42:	|         move.l d0,-(sp)
    fb44:	|         jsr 7e48 <findPerson>
    fb4a:	|         addq.l #4,sp
    fb4c:	|         move.l d0,4(sp)
	if (thisPerson)
    fb50:	|  /----- beq.s fb76 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    fb52:	|  |      movea.l 4(sp),a0
    fb56:	|  |      move.w 52(a0),d0
    fb5a:	|  |      movea.w d0,a0
    fb5c:	|  |      moveq #28,d0
    fb5e:	|  |      add.l 16(sp),d0
    fb62:	|  |      move.l a0,-(sp)
    fb64:	|  |      pea 1 <_start+0x1>
    fb68:	|  |      move.l d0,-(sp)
    fb6a:	|  |      jsr 12650 <setVariable>
    fb70:	|  |      lea 12(sp),sp
    fb74:	|  |  /-- bra.s fb8e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fb76:	|  \--|-> moveq #28,d0
    fb78:	|     |   add.l 16(sp),d0
    fb7c:	|     |   clr.l -(sp)
    fb7e:	|     |   pea 1 <_start+0x1>
    fb82:	|     |   move.l d0,-(sp)
    fb84:	|     |   jsr 12650 <setVariable>
    fb8a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fb8e:	|     \-> moveq #2,d0
}
    fb90:	\-------> addq.l #8,sp
    fb92:	          rts

0000fb94 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    fb94:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb98:	          movea.l 20(sp),a0
    fb9c:	          move.l 24(a0),d0
    fba0:	          move.l d0,-(sp)
    fba2:	          pea 7 <_start+0x7>
    fba6:	          lea 8(sp),a0
    fbaa:	          move.l a0,-(sp)
    fbac:	          jsr 11d5e <getValueType>
    fbb2:	          lea 12(sp),sp
    fbb6:	          tst.w d0
    fbb8:	      /-- bne.s fbc0 <builtIn_fetchEvent+0x2c>
    fbba:	      |   moveq #1,d0
    fbbc:	/-----|-- bra.w fc54 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    fbc0:	|     \-> moveq #24,d0
    fbc2:	|         add.l 20(sp),d0
    fbc6:	|         move.l d0,-(sp)
    fbc8:	|         jsr 126e2 <trimStack>
    fbce:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbd0:	|         movea.l 20(sp),a0
    fbd4:	|         move.l 24(a0),d0
    fbd8:	|         move.l d0,-(sp)
    fbda:	|         pea 7 <_start+0x7>
    fbde:	|         moveq #12,d0
    fbe0:	|         add.l sp,d0
    fbe2:	|         move.l d0,-(sp)
    fbe4:	|         jsr 11d5e <getValueType>
    fbea:	|         lea 12(sp),sp
    fbee:	|         tst.w d0
    fbf0:	|     /-- bne.s fbf6 <builtIn_fetchEvent+0x62>
    fbf2:	|     |   moveq #1,d0
    fbf4:	+-----|-- bra.s fc54 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    fbf6:	|     \-> moveq #24,d0
    fbf8:	|         add.l 20(sp),d0
    fbfc:	|         move.l d0,-(sp)
    fbfe:	|         jsr 126e2 <trimStack>
    fc04:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    fc06:	|         move.l (sp),d1
    fc08:	|         move.l 4(sp),d0
    fc0c:	|         move.l d1,-(sp)
    fc0e:	|         move.l d0,-(sp)
    fc10:	|         jsr abc8 <getCombinationFunction>
    fc16:	|         addq.l #8,sp
    fc18:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    fc1c:	|  /----- beq.s fc3a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    fc1e:	|  |      moveq #28,d0
    fc20:	|  |      add.l 20(sp),d0
    fc24:	|  |      move.l 8(sp),-(sp)
    fc28:	|  |      pea 2 <_start+0x2>
    fc2c:	|  |      move.l d0,-(sp)
    fc2e:	|  |      jsr 12650 <setVariable>
    fc34:	|  |      lea 12(sp),sp
    fc38:	|  |  /-- bra.s fc52 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fc3a:	|  \--|-> moveq #28,d0
    fc3c:	|     |   add.l 20(sp),d0
    fc40:	|     |   clr.l -(sp)
    fc42:	|     |   pea 1 <_start+0x1>
    fc46:	|     |   move.l d0,-(sp)
    fc48:	|     |   jsr 12650 <setVariable>
    fc4e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fc52:	|     \-> moveq #2,d0
}
    fc54:	\-------> lea 12(sp),sp
    fc58:	          rts

0000fc5a <builtIn_deleteFile>:

builtIn(deleteFile)
{
    fc5a:	       lea -24(sp),sp
    fc5e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    fc60:	       movea.l 36(sp),a0
    fc64:	       move.l 24(a0),d0
    fc68:	       move.l d0,-(sp)
    fc6a:	       jsr 12334 <getTextFromAnyVar>
    fc70:	       addq.l #4,sp
    fc72:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    fc76:	       moveq #24,d0
    fc78:	       add.l 36(sp),d0
    fc7c:	       move.l d0,-(sp)
    fc7e:	       jsr 126e2 <trimStack>
    fc84:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    fc86:	       move.l 24(sp),-(sp)
    fc8a:	       jsr 2fe <encodeFilename>
    fc90:	       addq.l #4,sp
    fc92:	       move.l d0,20(sp)
    FreeVec(namNormal);
    fc96:	       move.l 24(sp),16(sp)
    fc9c:	       move.l 190e8 <SysBase>,d0
    fca2:	       movea.l d0,a6
    fca4:	       movea.l 16(sp),a1
    fca8:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    fcac:	       move.l 20(sp),-(sp)
    fcb0:	       jsr b980 <failSecurityCheck>
    fcb6:	       addq.l #4,sp
    fcb8:	       tst.w d0
    fcba:	   /-- beq.s fcc0 <builtIn_deleteFile+0x66>
    fcbc:	   |   moveq #1,d0
    fcbe:	/--|-- bra.s fd0e <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    fcc0:	|  \-> move.l 20(sp),12(sp)
    fcc6:	|      move.l 190f0 <DOSBase>,d0
    fccc:	|      movea.l d0,a6
    fcce:	|      move.l 12(sp),d1
    fcd2:	|      jsr -72(a6)
    fcd6:	|      move.l d0,8(sp)
    fcda:	|      move.l 8(sp),d1
    fcde:	|      moveq #28,d0
    fce0:	|      add.l 36(sp),d0
    fce4:	|      move.l d1,-(sp)
    fce6:	|      pea 1 <_start+0x1>
    fcea:	|      move.l d0,-(sp)
    fcec:	|      jsr 12650 <setVariable>
    fcf2:	|      lea 12(sp),sp
    FreeVec(nam);
    fcf6:	|      move.l 20(sp),4(sp)
    fcfc:	|      move.l 190e8 <SysBase>,d0
    fd02:	|      movea.l d0,a6
    fd04:	|      movea.l 4(sp),a1
    fd08:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd0c:	|      moveq #2,d0
}
    fd0e:	\----> movea.l (sp)+,a6
    fd10:	       lea 24(sp),sp
    fd14:	       rts

0000fd16 <builtIn_renameFile>:

builtIn(renameFile)
{
    fd16:	       lea -40(sp),sp
    fd1a:	       move.l a6,-(sp)
    fd1c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    fd1e:	       movea.l 56(sp),a0
    fd22:	       move.l 24(a0),d0
    fd26:	       move.l d0,-(sp)
    fd28:	       jsr 12334 <getTextFromAnyVar>
    fd2e:	       addq.l #4,sp
    fd30:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    fd34:	       move.l 44(sp),-(sp)
    fd38:	       jsr 2fe <encodeFilename>
    fd3e:	       addq.l #4,sp
    fd40:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    fd44:	       moveq #24,d0
    fd46:	       add.l 56(sp),d0
    fd4a:	       move.l d0,-(sp)
    fd4c:	       jsr 126e2 <trimStack>
    fd52:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    fd54:	       move.l 40(sp),-(sp)
    fd58:	       jsr b980 <failSecurityCheck>
    fd5e:	       addq.l #4,sp
    fd60:	       tst.w d0
    fd62:	   /-- beq.s fd6a <builtIn_renameFile+0x54>
    fd64:	   |   moveq #1,d0
    fd66:	/--|-- bra.w fe50 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fd6a:	|  \-> move.l 44(sp),36(sp)
    fd70:	|      move.l 190e8 <SysBase>,d0
    fd76:	|      movea.l d0,a6
    fd78:	|      movea.l 36(sp),a1
    fd7c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    fd80:	|      movea.l 56(sp),a0
    fd84:	|      move.l 24(a0),d0
    fd88:	|      move.l d0,-(sp)
    fd8a:	|      jsr 12334 <getTextFromAnyVar>
    fd90:	|      addq.l #4,sp
    fd92:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    fd96:	|      move.l 44(sp),-(sp)
    fd9a:	|      jsr 2fe <encodeFilename>
    fda0:	|      addq.l #4,sp
    fda2:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    fda6:	|      moveq #24,d0
    fda8:	|      add.l 56(sp),d0
    fdac:	|      move.l d0,-(sp)
    fdae:	|      jsr 126e2 <trimStack>
    fdb4:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    fdb6:	|      move.l 32(sp),-(sp)
    fdba:	|      jsr b980 <failSecurityCheck>
    fdc0:	|      addq.l #4,sp
    fdc2:	|      tst.w d0
    fdc4:	|  /-- beq.s fdcc <builtIn_renameFile+0xb6>
    fdc6:	|  |   moveq #1,d0
    fdc8:	+--|-- bra.w fe50 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fdcc:	|  \-> move.l 44(sp),28(sp)
    fdd2:	|      move.l 190e8 <SysBase>,d0
    fdd8:	|      movea.l d0,a6
    fdda:	|      movea.l 28(sp),a1
    fdde:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    fde2:	|      move.l 32(sp),24(sp)
    fde8:	|      move.l 40(sp),20(sp)
    fdee:	|      move.l 190f0 <DOSBase>,d0
    fdf4:	|      movea.l d0,a6
    fdf6:	|      move.l 24(sp),d1
    fdfa:	|      move.l 20(sp),d2
    fdfe:	|      jsr -78(a6)
    fe02:	|      move.l d0,16(sp)
    fe06:	|      move.l 16(sp),d1
    fe0a:	|      moveq #28,d0
    fe0c:	|      add.l 56(sp),d0
    fe10:	|      move.l d1,-(sp)
    fe12:	|      pea 1 <_start+0x1>
    fe16:	|      move.l d0,-(sp)
    fe18:	|      jsr 12650 <setVariable>
    fe1e:	|      lea 12(sp),sp
	FreeVec(nam);
    fe22:	|      move.l 32(sp),12(sp)
    fe28:	|      move.l 190e8 <SysBase>,d0
    fe2e:	|      movea.l d0,a6
    fe30:	|      movea.l 12(sp),a1
    fe34:	|      jsr -690(a6)
	FreeVec(newnam);
    fe38:	|      move.l 40(sp),8(sp)
    fe3e:	|      move.l 190e8 <SysBase>,d0
    fe44:	|      movea.l d0,a6
    fe46:	|      movea.l 8(sp),a1
    fe4a:	|      jsr -690(a6)

	return BR_CONTINUE;
    fe4e:	|      moveq #2,d0
}
    fe50:	\----> move.l (sp)+,d2
    fe52:	       movea.l (sp)+,a6
    fe54:	       lea 40(sp),sp
    fe58:	       rts

0000fe5a <builtIn_cacheSound>:

builtIn(cacheSound)
{
    fe5a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe5c:	       movea.l 12(sp),a0
    fe60:	       move.l 24(a0),d0
    fe64:	       move.l d0,-(sp)
    fe66:	       pea 5 <_start+0x5>
    fe6a:	       move.l sp,d0
    fe6c:	       addq.l #8,d0
    fe6e:	       move.l d0,-(sp)
    fe70:	       jsr 11d5e <getValueType>
    fe76:	       lea 12(sp),sp
    fe7a:	       tst.w d0
    fe7c:	   /-- bne.s fe82 <builtIn_cacheSound+0x28>
    fe7e:	   |   moveq #1,d0
    fe80:	/--|-- bra.s feaa <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    fe82:	|  \-> moveq #24,d0
    fe84:	|      add.l 12(sp),d0
    fe88:	|      move.l d0,-(sp)
    fe8a:	|      jsr 126e2 <trimStack>
    fe90:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    fe92:	|      move.l (sp),d0
    fe94:	|      move.l d0,-(sp)
    fe96:	|      jsr a7d4 <cacheSound>
    fe9c:	|      addq.l #4,sp
    fe9e:	|      moveq #-1,d1
    fea0:	|      cmp.l d0,d1
    fea2:	|  /-- bne.s fea8 <builtIn_cacheSound+0x4e>
    fea4:	|  |   moveq #1,d0
    fea6:	+--|-- bra.s feaa <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    fea8:	|  \-> moveq #2,d0
}
    feaa:	\----> addq.l #4,sp
    feac:	       rts

0000feae <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    feae:	pea 163d8 <custom.c.177df80b+0x16ff>
    feb4:	jsr 13da6 <KPrintF>
    feba:	addq.l #4,sp
	return BR_CONTINUE;
    febc:	moveq #2,d0
}
    febe:	rts

0000fec0 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    fec0:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fec4:	          movea.l 20(sp),a0
    fec8:	          move.l 24(a0),d0
    fecc:	          move.l d0,-(sp)
    fece:	          pea 1 <_start+0x1>
    fed2:	          moveq #12,d0
    fed4:	          add.l sp,d0
    fed6:	          move.l d0,-(sp)
    fed8:	          jsr 11d5e <getValueType>
    fede:	          lea 12(sp),sp
    fee2:	          tst.w d0
    fee4:	      /-- bne.s feec <builtIn_setCharacterSpinSpeed+0x2c>
    fee6:	      |   moveq #1,d0
    fee8:	/-----|-- bra.w ff86 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    feec:	|     \-> moveq #24,d0
    feee:	|         add.l 20(sp),d0
    fef2:	|         move.l d0,-(sp)
    fef4:	|         jsr 126e2 <trimStack>
    fefa:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fefc:	|         movea.l 20(sp),a0
    ff00:	|         move.l 24(a0),d0
    ff04:	|         move.l d0,-(sp)
    ff06:	|         pea 7 <_start+0x7>
    ff0a:	|         lea 8(sp),a0
    ff0e:	|         move.l a0,-(sp)
    ff10:	|         jsr 11d5e <getValueType>
    ff16:	|         lea 12(sp),sp
    ff1a:	|         tst.w d0
    ff1c:	|     /-- bne.s ff22 <builtIn_setCharacterSpinSpeed+0x62>
    ff1e:	|     |   moveq #1,d0
    ff20:	+-----|-- bra.s ff86 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    ff22:	|     \-> moveq #24,d0
    ff24:	|         add.l 20(sp),d0
    ff28:	|         move.l d0,-(sp)
    ff2a:	|         jsr 126e2 <trimStack>
    ff30:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    ff32:	|         move.l (sp),d0
    ff34:	|         move.l d0,-(sp)
    ff36:	|         jsr 7e48 <findPerson>
    ff3c:	|         addq.l #4,sp
    ff3e:	|         move.l d0,8(sp)

	if (thisPerson) {
    ff42:	|  /----- beq.s ff6c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    ff44:	|  |      move.l 4(sp),d0
    ff48:	|  |      movea.l 8(sp),a0
    ff4c:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ff50:	|  |      moveq #28,d0
    ff52:	|  |      add.l 20(sp),d0
    ff56:	|  |      pea 1 <_start+0x1>
    ff5a:	|  |      pea 1 <_start+0x1>
    ff5e:	|  |      move.l d0,-(sp)
    ff60:	|  |      jsr 12650 <setVariable>
    ff66:	|  |      lea 12(sp),sp
    ff6a:	|  |  /-- bra.s ff84 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ff6c:	|  \--|-> moveq #28,d0
    ff6e:	|     |   add.l 20(sp),d0
    ff72:	|     |   clr.l -(sp)
    ff74:	|     |   pea 1 <_start+0x1>
    ff78:	|     |   move.l d0,-(sp)
    ff7a:	|     |   jsr 12650 <setVariable>
    ff80:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ff84:	|     \-> moveq #2,d0
}
    ff86:	\-------> lea 12(sp),sp
    ff8a:	          rts

0000ff8c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    ff8c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff90:	          movea.l 20(sp),a0
    ff94:	          move.l 24(a0),d0
    ff98:	          move.l d0,-(sp)
    ff9a:	          pea 1 <_start+0x1>
    ff9e:	          moveq #12,d0
    ffa0:	          add.l sp,d0
    ffa2:	          move.l d0,-(sp)
    ffa4:	          jsr 11d5e <getValueType>
    ffaa:	          lea 12(sp),sp
    ffae:	          tst.w d0
    ffb0:	      /-- bne.s ffb8 <builtIn_setCharacterAngleOffset+0x2c>
    ffb2:	      |   moveq #1,d0
    ffb4:	/-----|-- bra.w 10052 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    ffb8:	|     \-> moveq #24,d0
    ffba:	|         add.l 20(sp),d0
    ffbe:	|         move.l d0,-(sp)
    ffc0:	|         jsr 126e2 <trimStack>
    ffc6:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ffc8:	|         movea.l 20(sp),a0
    ffcc:	|         move.l 24(a0),d0
    ffd0:	|         move.l d0,-(sp)
    ffd2:	|         pea 7 <_start+0x7>
    ffd6:	|         lea 8(sp),a0
    ffda:	|         move.l a0,-(sp)
    ffdc:	|         jsr 11d5e <getValueType>
    ffe2:	|         lea 12(sp),sp
    ffe6:	|         tst.w d0
    ffe8:	|     /-- bne.s ffee <builtIn_setCharacterAngleOffset+0x62>
    ffea:	|     |   moveq #1,d0
    ffec:	+-----|-- bra.s 10052 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    ffee:	|     \-> moveq #24,d0
    fff0:	|         add.l 20(sp),d0
    fff4:	|         move.l d0,-(sp)
    fff6:	|         jsr 126e2 <trimStack>
    fffc:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    fffe:	|         move.l (sp),d0
   10000:	|         move.l d0,-(sp)
   10002:	|         jsr 7e48 <findPerson>
   10008:	|         addq.l #4,sp
   1000a:	|         move.l d0,8(sp)

	if (thisPerson) {
   1000e:	|  /----- beq.s 10038 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   10010:	|  |      move.l 4(sp),d0
   10014:	|  |      movea.l 8(sp),a0
   10018:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1001c:	|  |      moveq #28,d0
   1001e:	|  |      add.l 20(sp),d0
   10022:	|  |      pea 1 <_start+0x1>
   10026:	|  |      pea 1 <_start+0x1>
   1002a:	|  |      move.l d0,-(sp)
   1002c:	|  |      jsr 12650 <setVariable>
   10032:	|  |      lea 12(sp),sp
   10036:	|  |  /-- bra.s 10050 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10038:	|  \--|-> moveq #28,d0
   1003a:	|     |   add.l 20(sp),d0
   1003e:	|     |   clr.l -(sp)
   10040:	|     |   pea 1 <_start+0x1>
   10044:	|     |   move.l d0,-(sp)
   10046:	|     |   jsr 12650 <setVariable>
   1004c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10050:	|     \-> moveq #2,d0
}
   10052:	\-------> lea 12(sp),sp
   10056:	          rts

00010058 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   10058:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1005a:	       movea.l 12(sp),a0
   1005e:	       move.l 24(a0),d0
   10062:	       move.l d0,-(sp)
   10064:	       pea 1 <_start+0x1>
   10068:	       move.l sp,d0
   1006a:	       addq.l #8,d0
   1006c:	       move.l d0,-(sp)
   1006e:	       jsr 11d5e <getValueType>
   10074:	       lea 12(sp),sp
   10078:	       tst.w d0
   1007a:	   /-- bne.s 10080 <builtIn_transitionMode+0x28>
   1007c:	   |   moveq #1,d0
   1007e:	/--|-- bra.s 100b6 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   10080:	|  \-> move.l (sp),d0
   10082:	|      move.l d0,d0
   10084:	|      move.b d0,18fdc <fadeMode>
	trimStack (&fun -> stack);
   1008a:	|      moveq #24,d0
   1008c:	|      add.l 12(sp),d0
   10090:	|      move.l d0,-(sp)
   10092:	|      jsr 126e2 <trimStack>
   10098:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1009a:	|      moveq #28,d0
   1009c:	|      add.l 12(sp),d0
   100a0:	|      pea 1 <_start+0x1>
   100a4:	|      pea 1 <_start+0x1>
   100a8:	|      move.l d0,-(sp)
   100aa:	|      jsr 12650 <setVariable>
   100b0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   100b4:	|      moveq #2,d0
}
   100b6:	\----> addq.l #4,sp
   100b8:	       rts

000100ba <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   100ba:	moveq #24,d0
   100bc:	add.l 8(sp),d0
   100c0:	move.l d0,-(sp)
   100c2:	jsr 126e2 <trimStack>
   100c8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   100ca:	moveq #28,d0
   100cc:	add.l 8(sp),d0
   100d0:	pea 1 <_start+0x1>
   100d4:	pea 1 <_start+0x1>
   100d8:	move.l d0,-(sp)
   100da:	jsr 12650 <setVariable>
   100e0:	lea 12(sp),sp
	return BR_CONTINUE;
   100e4:	moveq #2,d0
}
   100e6:	rts

000100e8 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   100e8:	pea 16402 <custom.c.177df80b+0x1729>
   100ee:	jsr 13da6 <KPrintF>
   100f4:	addq.l #4,sp
	return BR_CONTINUE;
   100f6:	moveq #2,d0
}
   100f8:	rts

000100fa <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   100fa:	       lea -16(sp),sp
   100fe:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   10100:	       movea.l 28(sp),a0
   10104:	       move.l 24(a0),d0
   10108:	       move.l d0,-(sp)
   1010a:	       jsr 12334 <getTextFromAnyVar>
   10110:	       addq.l #4,sp
   10112:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   10116:	   /-- bne.s 1011e <builtIn_saveCustomData+0x24>
   10118:	   |   moveq #1,d0
   1011a:	/--|-- bra.w 101d0 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   1011e:	|  \-> move.l 16(sp),-(sp)
   10122:	|      jsr 2fe <encodeFilename>
   10128:	|      addq.l #4,sp
   1012a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   1012e:	|      move.l 16(sp),8(sp)
   10134:	|      move.l 190e8 <SysBase>,d0
   1013a:	|      movea.l d0,a6
   1013c:	|      movea.l 8(sp),a1
   10140:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   10144:	|      move.l 12(sp),-(sp)
   10148:	|      jsr b980 <failSecurityCheck>
   1014e:	|      addq.l #4,sp
   10150:	|      tst.w d0
   10152:	|  /-- beq.s 10158 <builtIn_saveCustomData+0x5e>
   10154:	|  |   moveq #1,d0
   10156:	+--|-- bra.s 101d0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10158:	|  \-> moveq #24,d0
   1015a:	|      add.l 28(sp),d0
   1015e:	|      move.l d0,-(sp)
   10160:	|      jsr 126e2 <trimStack>
   10166:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   10168:	|      movea.l 28(sp),a0
   1016c:	|      movea.l 24(a0),a0
   10170:	|      move.l (a0),d0
   10172:	|      moveq #6,d1
   10174:	|      cmp.l d0,d1
   10176:	|  /-- beq.s 1018a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   10178:	|  |   pea 1642f <custom.c.177df80b+0x1756>
   1017e:	|  |   jsr 13da6 <KPrintF>
   10184:	|  |   addq.l #4,sp
		return BR_ERROR;
   10186:	|  |   moveq #1,d0
   10188:	+--|-- bra.s 101d0 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   1018a:	|  \-> movea.l 28(sp),a0
   1018e:	|      move.l 24(a0),d0
   10192:	|      move.l d0,-(sp)
   10194:	|      move.l 16(sp),-(sp)
   10198:	|      jsr b5d0 <stackToFile>
   1019e:	|      addq.l #8,sp
   101a0:	|      tst.w d0
   101a2:	|  /-- bne.s 101a8 <builtIn_saveCustomData+0xae>
   101a4:	|  |   moveq #1,d0
   101a6:	+--|-- bra.s 101d0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   101a8:	|  \-> moveq #24,d0
   101aa:	|      add.l 28(sp),d0
   101ae:	|      move.l d0,-(sp)
   101b0:	|      jsr 126e2 <trimStack>
   101b6:	|      addq.l #4,sp
	FreeVec(fileName);
   101b8:	|      move.l 12(sp),4(sp)
   101be:	|      move.l 190e8 <SysBase>,d0
   101c4:	|      movea.l d0,a6
   101c6:	|      movea.l 4(sp),a1
   101ca:	|      jsr -690(a6)
	return BR_CONTINUE;
   101ce:	|      moveq #2,d0
}
   101d0:	\----> movea.l (sp)+,a6
   101d2:	       lea 16(sp),sp
   101d6:	       rts

000101d8 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   101d8:	       lea -28(sp),sp
   101dc:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101de:	       movea.l 40(sp),a0
   101e2:	       move.l 24(a0),d0
   101e6:	       move.l d0,-(sp)
   101e8:	       jsr 12334 <getTextFromAnyVar>
   101ee:	       addq.l #4,sp
   101f0:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   101f4:	   /-- bne.s 101fc <builtIn_loadCustomData+0x24>
   101f6:	   |   moveq #1,d0
   101f8:	/--|-- bra.w 102f8 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   101fc:	|  \-> move.l 28(sp),-(sp)
   10200:	|      jsr 2fe <encodeFilename>
   10206:	|      addq.l #4,sp
   10208:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1020c:	|      move.l 28(sp),20(sp)
   10212:	|      move.l 190e8 <SysBase>,d0
   10218:	|      movea.l d0,a6
   1021a:	|      movea.l 20(sp),a1
   1021e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   10222:	|      move.l 24(sp),-(sp)
   10226:	|      jsr b980 <failSecurityCheck>
   1022c:	|      addq.l #4,sp
   1022e:	|      tst.w d0
   10230:	|  /-- beq.s 10238 <builtIn_loadCustomData+0x60>
   10232:	|  |   moveq #1,d0
   10234:	+--|-- bra.w 102f8 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   10238:	|  \-> moveq #24,d0
   1023a:	|      add.l 40(sp),d0
   1023e:	|      move.l d0,-(sp)
   10240:	|      jsr 126e2 <trimStack>
   10246:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   10248:	|      moveq #28,d0
   1024a:	|      add.l 40(sp),d0
   1024e:	|      move.l d0,-(sp)
   10250:	|      jsr 11fac <unlinkVar>
   10256:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   10258:	|      movea.l 40(sp),a0
   1025c:	|      moveq #6,d0
   1025e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10262:	|      moveq #12,d0
   10264:	|      move.l d0,16(sp)
   10268:	|      clr.l 12(sp)
   1026c:	|      move.l 190e8 <SysBase>,d0
   10272:	|      movea.l d0,a6
   10274:	|      move.l 16(sp),d0
   10278:	|      move.l 12(sp),d1
   1027c:	|      jsr -684(a6)
   10280:	|      move.l d0,8(sp)
   10284:	|      move.l 8(sp),d0
   10288:	|      movea.l 40(sp),a0
   1028c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   10290:	|      movea.l 40(sp),a0
   10294:	|      move.l 32(a0),d0
   10298:	|  /-- bne.s 1029e <builtIn_loadCustomData+0xc6>
   1029a:	|  |   moveq #1,d0
   1029c:	+--|-- bra.s 102f8 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   1029e:	|  \-> movea.l 40(sp),a0
   102a2:	|      movea.l 32(a0),a0
   102a6:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   102a8:	|      movea.l 40(sp),a0
   102ac:	|      movea.l 32(a0),a0
   102b0:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   102b4:	|      movea.l 40(sp),a0
   102b8:	|      movea.l 32(a0),a0
   102bc:	|      moveq #1,d0
   102be:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   102c2:	|      movea.l 40(sp),a0
   102c6:	|      move.l 32(a0),d0
   102ca:	|      move.l d0,-(sp)
   102cc:	|      move.l 28(sp),-(sp)
   102d0:	|      jsr b00a <fileToStack>
   102d6:	|      addq.l #8,sp
   102d8:	|      tst.w d0
   102da:	|  /-- bne.s 102e0 <builtIn_loadCustomData+0x108>
   102dc:	|  |   moveq #1,d0
   102de:	+--|-- bra.s 102f8 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   102e0:	|  \-> move.l 24(sp),4(sp)
   102e6:	|      move.l 190e8 <SysBase>,d0
   102ec:	|      movea.l d0,a6
   102ee:	|      movea.l 4(sp),a1
   102f2:	|      jsr -690(a6)
	return BR_CONTINUE;
   102f6:	|      moveq #2,d0
}
   102f8:	\----> movea.l (sp)+,a6
   102fa:	       lea 28(sp),sp
   102fe:	       rts

00010300 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   10300:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10302:	       movea.l 12(sp),a0
   10306:	       move.l 24(a0),d0
   1030a:	       move.l d0,-(sp)
   1030c:	       pea 1 <_start+0x1>
   10310:	       move.l sp,d0
   10312:	       addq.l #8,d0
   10314:	       move.l d0,-(sp)
   10316:	       jsr 11d5e <getValueType>
   1031c:	       lea 12(sp),sp
   10320:	       tst.w d0
   10322:	   /-- bne.s 10328 <builtIn_setCustomEncoding+0x28>
   10324:	   |   moveq #1,d0
   10326:	/--|-- bra.s 1035e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   10328:	|  \-> move.l (sp),d0
   1032a:	|      move.l d0,d0
   1032c:	|      move.w d0,191f4 <saveEncoding>
	trimStack (&fun -> stack);
   10332:	|      moveq #24,d0
   10334:	|      add.l 12(sp),d0
   10338:	|      move.l d0,-(sp)
   1033a:	|      jsr 126e2 <trimStack>
   10340:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10342:	|      moveq #28,d0
   10344:	|      add.l 12(sp),d0
   10348:	|      pea 1 <_start+0x1>
   1034c:	|      pea 1 <_start+0x1>
   10350:	|      move.l d0,-(sp)
   10352:	|      jsr 12650 <setVariable>
   10358:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1035c:	|      moveq #2,d0
}
   1035e:	\----> addq.l #4,sp
   10360:	       rts

00010362 <builtIn_freeSound>:

builtIn(freeSound)
{
   10362:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10364:	       movea.l 12(sp),a0
   10368:	       move.l 24(a0),d0
   1036c:	       move.l d0,-(sp)
   1036e:	       pea 5 <_start+0x5>
   10372:	       move.l sp,d0
   10374:	       addq.l #8,d0
   10376:	       move.l d0,-(sp)
   10378:	       jsr 11d5e <getValueType>
   1037e:	       lea 12(sp),sp
   10382:	       tst.w d0
   10384:	   /-- bne.s 1038a <builtIn_freeSound+0x28>
   10386:	   |   moveq #1,d0
   10388:	/--|-- bra.s 103a8 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1038a:	|  \-> moveq #24,d0
   1038c:	|      add.l 12(sp),d0
   10390:	|      move.l d0,-(sp)
   10392:	|      jsr 126e2 <trimStack>
   10398:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1039a:	|      move.l (sp),d0
   1039c:	|      move.l d0,-(sp)
   1039e:	|      jsr a7d8 <huntKillFreeSound>
   103a4:	|      addq.l #4,sp
	return BR_CONTINUE;
   103a6:	|      moveq #2,d0
}
   103a8:	\----> addq.l #4,sp
   103aa:	       rts

000103ac <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   103ac:	       lea -12(sp),sp
   103b0:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103b2:	       movea.l 24(sp),a0
   103b6:	       move.l 24(a0),d0
   103ba:	       move.l d0,-(sp)
   103bc:	       pea 1 <_start+0x1>
   103c0:	       moveq #16,d0
   103c2:	       add.l sp,d0
   103c4:	       move.l d0,-(sp)
   103c6:	       jsr 11d5e <getValueType>
   103cc:	       lea 12(sp),sp
   103d0:	       tst.w d0
   103d2:	   /-- bne.s 103da <builtIn_parallaxAdd+0x2e>
   103d4:	   |   moveq #1,d0
   103d6:	/--|-- bra.w 104ae <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   103da:	|  \-> moveq #24,d0
   103dc:	|      add.l 24(sp),d0
   103e0:	|      move.l d0,-(sp)
   103e2:	|      jsr 126e2 <trimStack>
   103e8:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103ea:	|      movea.l 24(sp),a0
   103ee:	|      move.l 24(a0),d0
   103f2:	|      move.l d0,-(sp)
   103f4:	|      pea 1 <_start+0x1>
   103f8:	|      moveq #20,d0
   103fa:	|      add.l sp,d0
   103fc:	|      move.l d0,-(sp)
   103fe:	|      jsr 11d5e <getValueType>
   10404:	|      lea 12(sp),sp
   10408:	|      tst.w d0
   1040a:	|  /-- bne.s 10412 <builtIn_parallaxAdd+0x66>
   1040c:	|  |   moveq #1,d0
   1040e:	+--|-- bra.w 104ae <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10412:	|  \-> moveq #24,d0
   10414:	|      add.l 24(sp),d0
   10418:	|      move.l d0,-(sp)
   1041a:	|      jsr 126e2 <trimStack>
   10420:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10422:	|      movea.l 24(sp),a0
   10426:	|      move.l 24(a0),d0
   1042a:	|      move.l d0,-(sp)
   1042c:	|      pea 5 <_start+0x5>
   10430:	|      lea 12(sp),a0
   10434:	|      move.l a0,-(sp)
   10436:	|      jsr 11d5e <getValueType>
   1043c:	|      lea 12(sp),sp
   10440:	|      tst.w d0
   10442:	|  /-- bne.s 10448 <builtIn_parallaxAdd+0x9c>
   10444:	|  |   moveq #1,d0
   10446:	+--|-- bra.s 104ae <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10448:	|  \-> moveq #24,d0
   1044a:	|      add.l 24(sp),d0
   1044e:	|      move.l d0,-(sp)
   10450:	|      jsr 126e2 <trimStack>
   10456:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   10458:	|      move.l 8(sp),d0
   1045c:	|      move.l d0,d0
   1045e:	|      moveq #0,d2
   10460:	|      move.w d0,d2
   10462:	|      move.l 12(sp),d0
   10466:	|      move.l d0,d0
   10468:	|      moveq #0,d1
   1046a:	|      move.w d0,d1
   1046c:	|      move.l 4(sp),d0
   10470:	|      move.l d0,d0
   10472:	|      move.w d0,d0
   10474:	|      andi.l #65535,d0
   1047a:	|      move.l d2,-(sp)
   1047c:	|      move.l d1,-(sp)
   1047e:	|      move.l d0,-(sp)
   10480:	|      jsr a9f4 <loadParallax>
   10486:	|      lea 12(sp),sp
   1048a:	|      tst.w d0
   1048c:	|  /-- bne.s 10492 <builtIn_parallaxAdd+0xe6>
   1048e:	|  |   moveq #1,d0
   10490:	+--|-- bra.s 104ae <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   10492:	|  \-> moveq #28,d0
   10494:	|      add.l 24(sp),d0
   10498:	|      pea 1 <_start+0x1>
   1049c:	|      pea 1 <_start+0x1>
   104a0:	|      move.l d0,-(sp)
   104a2:	|      jsr 12650 <setVariable>
   104a8:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   104ac:	|      moveq #2,d0
}
   104ae:	\----> move.l (sp)+,d2
   104b0:	       lea 12(sp),sp
   104b4:	       rts

000104b6 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   104b6:	jsr a92c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   104bc:	moveq #28,d0
   104be:	add.l 8(sp),d0
   104c2:	pea 1 <_start+0x1>
   104c6:	pea 1 <_start+0x1>
   104ca:	move.l d0,-(sp)
   104cc:	jsr 12650 <setVariable>
   104d2:	lea 12(sp),sp
	return BR_CONTINUE;
   104d6:	moveq #2,d0
}
   104d8:	rts

000104da <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   104da:	pea 1644d <custom.c.177df80b+0x1774>
   104e0:	jsr 13da6 <KPrintF>
   104e6:	addq.l #4,sp

	return BR_CONTINUE;
   104e8:	moveq #2,d0
}
   104ea:	rts

000104ec <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   104ec:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   104ee:	             movea.l 16(sp),a0
   104f2:	             movea.l 24(a0),a0
   104f6:	             move.l (a0),d0
   104f8:	             moveq #1,d1
   104fa:	             cmp.l d0,d1
   104fc:	      /----- beq.s 10544 <builtIn_makeFastArray+0x58>
   104fe:	      |      moveq #6,d1
   10500:	      |      cmp.l d0,d1
   10502:	/-----|----- bne.s 10582 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   10504:	|     |      movea.l 16(sp),a0
   10508:	|     |      movea.l 24(a0),a0
   1050c:	|     |      move.l 4(a0),d1
   10510:	|     |      moveq #28,d0
   10512:	|     |      add.l 16(sp),d0
   10516:	|     |      move.l d1,-(sp)
   10518:	|     |      move.l d0,-(sp)
   1051a:	|     |      jsr 11e10 <makeFastArrayFromStack>
   10520:	|     |      addq.l #8,sp
   10522:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   10526:	|     |      moveq #24,d0
   10528:	|     |      add.l 16(sp),d0
   1052c:	|     |      move.l d0,-(sp)
   1052e:	|     |      jsr 126e2 <trimStack>
   10534:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   10536:	|     |      tst.w 6(sp)
   1053a:	|     |  /-- beq.s 10540 <builtIn_makeFastArray+0x54>
   1053c:	|     |  |   moveq #2,d0
   1053e:	|  /--|--|-- bra.s 10594 <builtIn_makeFastArray+0xa8>
   10540:	|  |  |  \-> moveq #1,d0
   10542:	|  +--|----- bra.s 10594 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   10544:	|  |  \----> movea.l 16(sp),a0
   10548:	|  |         movea.l 24(a0),a0
   1054c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   10552:	|  |         moveq #24,d0
   10554:	|  |         add.l 16(sp),d0
   10558:	|  |         move.l d0,-(sp)
   1055a:	|  |         jsr 126e2 <trimStack>
   10560:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   10562:	|  |         moveq #28,d0
   10564:	|  |         add.l 16(sp),d0
   10568:	|  |         move.l 2(sp),-(sp)
   1056c:	|  |         move.l d0,-(sp)
   1056e:	|  |         jsr 11e7a <makeFastArraySize>
   10574:	|  |         addq.l #8,sp
   10576:	|  |         tst.w d0
   10578:	|  |     /-- beq.s 1057e <builtIn_makeFastArray+0x92>
   1057a:	|  |     |   moveq #2,d0
   1057c:	|  +-----|-- bra.s 10594 <builtIn_makeFastArray+0xa8>
   1057e:	|  |     \-> moveq #1,d0
   10580:	|  +-------- bra.s 10594 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   10582:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   10584:	   |         pea 16476 <custom.c.177df80b+0x179d>
   1058a:	   |         jsr 13da6 <KPrintF>
   10590:	   |         addq.l #4,sp
	return BR_ERROR;
   10592:	   |         moveq #1,d0
}
   10594:	   \-------> addq.l #8,sp
   10596:	             rts

00010598 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   10598:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1059a:	          movea.l 16(sp),a0
   1059e:	          move.l 24(a0),d0
   105a2:	          move.l d0,-(sp)
   105a4:	          pea 7 <_start+0x7>
   105a8:	          move.l sp,d0
   105aa:	          addq.l #8,d0
   105ac:	          move.l d0,-(sp)
   105ae:	          jsr 11d5e <getValueType>
   105b4:	          lea 12(sp),sp
   105b8:	          tst.w d0
   105ba:	      /-- bne.s 105c0 <builtIn_getCharacterScale+0x28>
   105bc:	      |   moveq #1,d0
   105be:	/-----|-- bra.s 1063a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   105c0:	|     \-> moveq #24,d0
   105c2:	|         add.l 16(sp),d0
   105c6:	|         move.l d0,-(sp)
   105c8:	|         jsr 126e2 <trimStack>
   105ce:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   105d0:	|         move.l (sp),d0
   105d2:	|         move.l d0,-(sp)
   105d4:	|         jsr 7e48 <findPerson>
   105da:	|         addq.l #4,sp
   105dc:	|         move.l d0,4(sp)
	if (pers) {
   105e0:	|  /----- beq.s 10620 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   105e2:	|  |      movea.l 4(sp),a0
   105e6:	|  |      move.l 20(a0),d0
   105ea:	|  |      move.l #1120403456,-(sp)
   105f0:	|  |      move.l d0,-(sp)
   105f2:	|  |      jsr 14294 <__mulsf3>
   105f8:	|  |      addq.l #8,sp
   105fa:	|  |      move.l d0,-(sp)
   105fc:	|  |      jsr 1417a <__fixsfsi>
   10602:	|  |      addq.l #4,sp
   10604:	|  |      move.l d0,d1
   10606:	|  |      moveq #28,d0
   10608:	|  |      add.l 16(sp),d0
   1060c:	|  |      move.l d1,-(sp)
   1060e:	|  |      pea 1 <_start+0x1>
   10612:	|  |      move.l d0,-(sp)
   10614:	|  |      jsr 12650 <setVariable>
   1061a:	|  |      lea 12(sp),sp
   1061e:	|  |  /-- bra.s 10638 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10620:	|  \--|-> moveq #28,d0
   10622:	|     |   add.l 16(sp),d0
   10626:	|     |   clr.l -(sp)
   10628:	|     |   pea 1 <_start+0x1>
   1062c:	|     |   move.l d0,-(sp)
   1062e:	|     |   jsr 12650 <setVariable>
   10634:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10638:	|     \-> moveq #2,d0
}
   1063a:	\-------> addq.l #8,sp
   1063c:	          rts

0001063e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   1063e:	move.l 19218 <gameSettings>,d0
   10644:	move.l d0,d1
   10646:	moveq #28,d0
   10648:	add.l 8(sp),d0
   1064c:	move.l d1,-(sp)
   1064e:	pea 1 <_start+0x1>
   10652:	move.l d0,-(sp)
   10654:	jsr 12650 <setVariable>
   1065a:	lea 12(sp),sp
	return BR_CONTINUE;
   1065e:	moveq #2,d0
}
   10660:	rts

00010662 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10662:	moveq #24,d0
   10664:	add.l 8(sp),d0
   10668:	move.l d0,-(sp)
   1066a:	jsr 126e2 <trimStack>
   10670:	addq.l #4,sp
	trimStack (&fun -> stack);
   10672:	moveq #24,d0
   10674:	add.l 8(sp),d0
   10678:	move.l d0,-(sp)
   1067a:	jsr 126e2 <trimStack>
   10680:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   10682:	moveq #28,d0
   10684:	add.l 8(sp),d0
   10688:	clr.l -(sp)
   1068a:	pea 1 <_start+0x1>
   1068e:	move.l d0,-(sp)
   10690:	jsr 12650 <setVariable>
   10696:	lea 12(sp),sp

	return BR_CONTINUE;
   1069a:	moveq #2,d0

}
   1069c:	rts

0001069e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1069e:	move.l 18a82 <lastFramesPerSecond>,d1
   106a4:	moveq #28,d0
   106a6:	add.l 8(sp),d0
   106aa:	move.l d1,-(sp)
   106ac:	pea 1 <_start+0x1>
   106b0:	move.l d0,-(sp)
   106b2:	jsr 12650 <setVariable>
   106b8:	lea 12(sp),sp
	return BR_CONTINUE;
   106bc:	moveq #2,d0
}
   106be:	rts

000106c0 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   106c0:	moveq #2,d0
}
   106c2:	rts

000106c4 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   106c4:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106c8:	          movea.l 60(sp),a0
   106cc:	          move.l 24(a0),d0
   106d0:	          move.l d0,-(sp)
   106d2:	          pea 1 <_start+0x1>
   106d6:	          pea 19018 <thumbHeight>
   106dc:	          jsr 11d5e <getValueType>
   106e2:	          lea 12(sp),sp
   106e6:	          tst.w d0
   106e8:	      /-- bne.s 106f0 <builtIn_setThumbnailSize+0x2c>
   106ea:	      |   moveq #1,d0
   106ec:	/-----|-- bra.w 107ac <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   106f0:	|     \-> moveq #24,d0
   106f2:	|         add.l 60(sp),d0
   106f6:	|         move.l d0,-(sp)
   106f8:	|         jsr 126e2 <trimStack>
   106fe:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10700:	|         movea.l 60(sp),a0
   10704:	|         move.l 24(a0),d0
   10708:	|         move.l d0,-(sp)
   1070a:	|         pea 1 <_start+0x1>
   1070e:	|         pea 19014 <thumbWidth>
   10714:	|         jsr 11d5e <getValueType>
   1071a:	|         lea 12(sp),sp
   1071e:	|         tst.w d0
   10720:	|     /-- bne.s 10728 <builtIn_setThumbnailSize+0x64>
   10722:	|     |   moveq #1,d0
   10724:	+-----|-- bra.w 107ac <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   10728:	|     \-> moveq #24,d0
   1072a:	|         add.l 60(sp),d0
   1072e:	|         move.l d0,-(sp)
   10730:	|         jsr 126e2 <trimStack>
   10736:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   10738:	|         move.l 19014 <thumbWidth>,d0
   1073e:	|     /-- bmi.s 1076c <builtIn_setThumbnailSize+0xa8>
   10740:	|     |   move.l 19018 <thumbHeight>,d0
   10746:	|     +-- bmi.s 1076c <builtIn_setThumbnailSize+0xa8>
   10748:	|     |   move.l 19014 <thumbWidth>,d0
   1074e:	|     |   move.l d0,d1
   10750:	|     |   move.l 1903c <winWidth>,d0
   10756:	|     |   cmp.l d1,d0
   10758:	|     +-- bcs.s 1076c <builtIn_setThumbnailSize+0xa8>
   1075a:	|     |   move.l 19018 <thumbHeight>,d0
   10760:	|     |   move.l d0,d1
   10762:	|     |   move.l 19040 <winHeight>,d0
   10768:	|     |   cmp.l d1,d0
   1076a:	|  /--|-- bcc.s 107aa <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1076c:	|  |  \-> move.l 19018 <thumbHeight>,d1
   10772:	|  |      move.l 19014 <thumbWidth>,d0
   10778:	|  |      move.l d1,-(sp)
   1077a:	|  |      move.l d0,-(sp)
   1077c:	|  |      pea 1649d <custom.c.177df80b+0x17c4>
   10782:	|  |      lea 14(sp),a0
   10786:	|  |      move.l a0,-(sp)
   10788:	|  |      jsr 11568 <sprintf>
   1078e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   10792:	|  |      lea 2(sp),a0
   10796:	|  |      move.l a0,-(sp)
   10798:	|  |      pea 164a5 <custom.c.177df80b+0x17cc>
   1079e:	|  |      jsr 13da6 <KPrintF>
   107a4:	|  |      addq.l #8,sp
		return BR_ERROR;
   107a6:	|  |      moveq #1,d0
   107a8:	+--|----- bra.s 107ac <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   107aa:	|  \----> moveq #2,d0
}
   107ac:	\-------> lea 52(sp),sp
   107b0:	          rts

000107b2 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   107b2:	       lea -12(sp),sp
   107b6:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107b8:	       movea.l 24(sp),a0
   107bc:	       move.l 24(a0),d0
   107c0:	       move.l d0,-(sp)
   107c2:	       pea 1 <_start+0x1>
   107c6:	       lea 12(sp),a0
   107ca:	       move.l a0,-(sp)
   107cc:	       jsr 11d5e <getValueType>
   107d2:	       lea 12(sp),sp
   107d6:	       tst.w d0
   107d8:	   /-- bne.s 107e0 <builtIn_hasFlag+0x2e>
   107da:	   |   moveq #1,d0
   107dc:	/--|-- bra.w 10870 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   107e0:	|  \-> moveq #24,d0
   107e2:	|      add.l 24(sp),d0
   107e6:	|      move.l d0,-(sp)
   107e8:	|      jsr 126e2 <trimStack>
   107ee:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107f0:	|      movea.l 24(sp),a0
   107f4:	|      move.l 24(a0),d0
   107f8:	|      move.l d0,-(sp)
   107fa:	|      pea 7 <_start+0x7>
   107fe:	|      moveq #16,d0
   10800:	|      add.l sp,d0
   10802:	|      move.l d0,-(sp)
   10804:	|      jsr 11d5e <getValueType>
   1080a:	|      lea 12(sp),sp
   1080e:	|      tst.w d0
   10810:	|  /-- bne.s 10816 <builtIn_hasFlag+0x64>
   10812:	|  |   moveq #1,d0
   10814:	+--|-- bra.s 10870 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   10816:	|  \-> moveq #24,d0
   10818:	|      add.l 24(sp),d0
   1081c:	|      move.l d0,-(sp)
   1081e:	|      jsr 126e2 <trimStack>
   10824:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   10826:	|      move.l 8(sp),d0
   1082a:	|      move.l d0,-(sp)
   1082c:	|      jsr ab94 <findObjectType>
   10832:	|      addq.l #4,sp
   10834:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   10838:	|  /-- bne.s 1083e <builtIn_hasFlag+0x8c>
   1083a:	|  |   moveq #1,d0
   1083c:	+--|-- bra.s 10870 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1083e:	|  \-> movea.l 12(sp),a0
   10842:	|      move.w 36(a0),d0
   10846:	|      moveq #0,d2
   10848:	|      move.w d0,d2
   1084a:	|      move.l 4(sp),d1
   1084e:	|      moveq #1,d0
   10850:	|      lsl.l d1,d0
   10852:	|      move.l d2,d1
   10854:	|      and.l d0,d1
   10856:	|      moveq #28,d0
   10858:	|      add.l 24(sp),d0
   1085c:	|      move.l d1,-(sp)
   1085e:	|      pea 1 <_start+0x1>
   10862:	|      move.l d0,-(sp)
   10864:	|      jsr 12650 <setVariable>
   1086a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1086e:	|      moveq #2,d0
}
   10870:	\----> move.l (sp)+,d2
   10872:	       lea 12(sp),sp
   10876:	       rts

00010878 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   10878:	       jsr ab82 <snapshot>
   1087e:	       tst.w d0
   10880:	/----- beq.s 10886 <builtIn_snapshotGrab+0xe>
   10882:	|      moveq #2,d0
   10884:	|  /-- bra.s 10888 <builtIn_snapshotGrab+0x10>
   10886:	\--|-> moveq #1,d0
}
   10888:	   \-> rts

0001088a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1088a:	jsr aa3a <nosnapshot>
	return BR_CONTINUE;
   10890:	moveq #2,d0
}
   10892:	rts

00010894 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   10894:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   10896:	move.w 1895e <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1089e:	movea.l 12(sp),a0
   108a2:	move.l 24(a0),d0
   108a6:	move.l d0,-(sp)
   108a8:	jsr 1229e <getBoolean>
   108ae:	addq.l #4,sp
   108b0:	move.w d0,1895e <allowAnyFilename>
	trimStack (&fun -> stack);
   108b6:	moveq #24,d0
   108b8:	add.l 12(sp),d0
   108bc:	move.l d0,-(sp)
   108be:	jsr 126e2 <trimStack>
   108c4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   108c6:	movea.w 2(sp),a0
   108ca:	moveq #28,d0
   108cc:	add.l 12(sp),d0
   108d0:	move.l a0,-(sp)
   108d2:	pea 1 <_start+0x1>
   108d6:	move.l d0,-(sp)
   108d8:	jsr 12650 <setVariable>
   108de:	lea 12(sp),sp
	return BR_CONTINUE;
   108e2:	moveq #2,d0
}
   108e4:	addq.l #4,sp
   108e6:	rts

000108e8 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   108e8:	moveq #24,d0
   108ea:	add.l 8(sp),d0
   108ee:	move.l d0,-(sp)
   108f0:	jsr 126e2 <trimStack>
   108f6:	addq.l #4,sp
	trimStack (&fun -> stack);
   108f8:	moveq #24,d0
   108fa:	add.l 8(sp),d0
   108fe:	move.l d0,-(sp)
   10900:	jsr 126e2 <trimStack>
   10906:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   10908:	moveq #28,d0
   1090a:	add.l 8(sp),d0
   1090e:	clr.l -(sp)
   10910:	pea 1 <_start+0x1>
   10914:	move.l d0,-(sp)
   10916:	jsr 12650 <setVariable>
   1091c:	lea 12(sp),sp

	return BR_CONTINUE;
   10920:	moveq #2,d0
}
   10922:	rts

00010924 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   10924:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   10926:	movea.l 12(sp),a0
   1092a:	move.l 24(a0),d0
   1092e:	move.l d0,-(sp)
   10930:	jsr 12334 <getTextFromAnyVar>
   10936:	addq.l #4,sp
   10938:	move.l d0,(sp)
	trimStack (&fun -> stack);
   1093a:	moveq #24,d0
   1093c:	add.l 12(sp),d0
   10940:	move.l d0,-(sp)
   10942:	jsr 126e2 <trimStack>
   10948:	addq.l #4,sp
	KPrintF (mess);
   1094a:	move.l (sp),-(sp)
   1094c:	jsr 13da6 <KPrintF>
   10952:	addq.l #4,sp
	return BR_ERROR;
   10954:	moveq #1,d0
}
   10956:	addq.l #4,sp
   10958:	rts

0001095a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1095a:	moveq #24,d0
   1095c:	add.l 8(sp),d0
   10960:	move.l d0,-(sp)
   10962:	jsr 126e2 <trimStack>
   10968:	addq.l #4,sp
	trimStack (&fun -> stack);
   1096a:	moveq #24,d0
   1096c:	add.l 8(sp),d0
   10970:	move.l d0,-(sp)
   10972:	jsr 126e2 <trimStack>
   10978:	addq.l #4,sp
	trimStack (&fun -> stack);
   1097a:	moveq #24,d0
   1097c:	add.l 8(sp),d0
   10980:	move.l d0,-(sp)
   10982:	jsr 126e2 <trimStack>
   10988:	addq.l #4,sp
	trimStack (&fun -> stack);
   1098a:	moveq #24,d0
   1098c:	add.l 8(sp),d0
   10990:	move.l d0,-(sp)
   10992:	jsr 126e2 <trimStack>
   10998:	addq.l #4,sp

	return BR_CONTINUE;
   1099a:	moveq #2,d0
}
   1099c:	rts

0001099e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1099e:	moveq #24,d0
   109a0:	add.l 8(sp),d0
   109a4:	move.l d0,-(sp)
   109a6:	jsr 126e2 <trimStack>
   109ac:	addq.l #4,sp
	trimStack (&fun -> stack);
   109ae:	moveq #24,d0
   109b0:	add.l 8(sp),d0
   109b4:	move.l d0,-(sp)
   109b6:	jsr 126e2 <trimStack>
   109bc:	addq.l #4,sp
	trimStack (&fun -> stack);
   109be:	moveq #24,d0
   109c0:	add.l 8(sp),d0
   109c4:	move.l d0,-(sp)
   109c6:	jsr 126e2 <trimStack>
   109cc:	addq.l #4,sp

	return BR_CONTINUE;
   109ce:	moveq #2,d0

}
   109d0:	rts

000109d2 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   109d2:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   109d4:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   109da:	sne d0
   109dc:	neg.b d0
   109de:	moveq #0,d1
   109e0:	move.b d0,d1
   109e2:	moveq #28,d0
   109e4:	add.l 12(sp),d0
   109e8:	move.l d1,-(sp)
   109ea:	pea 1 <_start+0x1>
   109ee:	move.l d0,-(sp)
   109f0:	jsr 12650 <setVariable>
   109f6:	lea 12(sp),sp
	return BR_CONTINUE;
   109fa:	moveq #2,d0
}
   109fc:	addq.l #4,sp
   109fe:	rts

00010a00 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   10a00:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   10a02:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   10a08:	pea 164bc <custom.c.177df80b+0x17e3>
   10a0e:	jsr 13da6 <KPrintF>
   10a14:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   10a16:	tst.w 2(sp)
   10a1a:	sne d0
   10a1c:	neg.b d0
   10a1e:	moveq #0,d1
   10a20:	move.b d0,d1
   10a22:	moveq #28,d0
   10a24:	add.l 12(sp),d0
   10a28:	move.l d1,-(sp)
   10a2a:	pea 1 <_start+0x1>
   10a2e:	move.l d0,-(sp)
   10a30:	jsr 12650 <setVariable>
   10a36:	lea 12(sp),sp
	return BR_CONTINUE;
   10a3a:	moveq #2,d0
}
   10a3c:	addq.l #4,sp
   10a3e:	rts

00010a40 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   10a40:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   10a44:	             move.l 104(sp),d0
   10a48:	             cmpi.l #166,d0
   10a4e:	/----------- bhi.w 10b30 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   10a52:	|            move.l 104(sp),d0
   10a56:	|            add.l d0,d0
   10a58:	|            movea.l d0,a1
   10a5a:	|            adda.l d0,a1
   10a5c:	|            lea 18aa4 <paramNum>,a0
   10a62:	|            move.l (0,a1,a0.l),d0
   10a66:	|            moveq #-1,d1
   10a68:	|            cmp.l d0,d1
   10a6a:	|  /-------- beq.w 10af8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   10a6e:	|  |         move.l 104(sp),d0
   10a72:	|  |         add.l d0,d0
   10a74:	|  |         movea.l d0,a1
   10a76:	|  |         adda.l d0,a1
   10a78:	|  |         lea 18aa4 <paramNum>,a0
   10a7e:	|  |         move.l (0,a1,a0.l),d0
   10a82:	|  |         cmp.l 108(sp),d0
   10a86:	|  +-------- beq.s 10af8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   10a88:	|  |         move.l 104(sp),d0
   10a8c:	|  |         add.l d0,d0
   10a8e:	|  |         movea.l d0,a1
   10a90:	|  |         adda.l d0,a1
   10a92:	|  |         lea 18aa4 <paramNum>,a0
   10a98:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   10a9c:	|  |         moveq #1,d1
   10a9e:	|  |         cmp.l d0,d1
   10aa0:	|  |  /----- bne.s 10aaa <callBuiltIn+0x6a>
   10aa2:	|  |  |      move.l #86388,d0
   10aa8:	|  |  |  /-- bra.s 10ab0 <callBuiltIn+0x70>
   10aaa:	|  |  \--|-> move.l #91378,d0
   10ab0:	|  |     \-> move.l 104(sp),d1
   10ab4:	|  |         add.l d1,d1
   10ab6:	|  |         movea.l d1,a1
   10ab8:	|  |         adda.l d1,a1
   10aba:	|  |         lea 18aa4 <paramNum>,a0
   10ac0:	|  |         move.l (0,a1,a0.l),d1
   10ac4:	|  |         move.l d0,-(sp)
   10ac6:	|  |         move.l d1,-(sp)
   10ac8:	|  |         pea 164f4 <custom.c.177df80b+0x181b>
   10ace:	|  |         lea 12(sp),a0
   10ad2:	|  |         move.l a0,-(sp)
   10ad4:	|  |         jsr 11568 <sprintf>
   10ada:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   10ade:	|  |         movea.l sp,a0
   10ae0:	|  |         move.l a0,-(sp)
   10ae2:	|  |         jsr b8 <copyString>
   10ae8:	|  |         addq.l #4,sp
   10aea:	|  |         move.l d0,-(sp)
   10aec:	|  |         jsr 13da6 <KPrintF>
   10af2:	|  |         addq.l #4,sp
				return BR_ERROR;
   10af4:	|  |         moveq #1,d0
   10af6:	|  |     /-- bra.s 10b40 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   10af8:	|  \-----|-> move.l 104(sp),d0
   10afc:	|        |   add.l d0,d0
   10afe:	|        |   movea.l d0,a1
   10b00:	|        |   adda.l d0,a1
   10b02:	|        |   lea 18d40 <builtInFunctionArray>,a0
   10b08:	|        |   move.l (0,a1,a0.l),d0
   10b0c:	+--------|-- beq.s 10b30 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   10b0e:	|        |   move.l 104(sp),d0
   10b12:	|        |   add.l d0,d0
   10b14:	|        |   movea.l d0,a1
   10b16:	|        |   adda.l d0,a1
   10b18:	|        |   lea 18d40 <builtInFunctionArray>,a0
   10b1e:	|        |   movea.l (0,a1,a0.l),a0
   10b22:	|        |   move.l 112(sp),-(sp)
   10b26:	|        |   move.l 112(sp),-(sp)
   10b2a:	|        |   jsr (a0)
   10b2c:	|        |   addq.l #8,sp
   10b2e:	|        +-- bra.s 10b40 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   10b30:	\--------|-> pea 1651f <custom.c.177df80b+0x1846>
   10b36:	         |   jsr 13da6 <KPrintF>
   10b3c:	         |   addq.l #4,sp
	return BR_ERROR;
   10b3e:	         |   moveq #1,d0
}
   10b40:	         \-> lea 100(sp),sp
   10b44:	             rts

00010b46 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   10b46:	          subq.l #8,sp
	int indexNum = -1;
   10b48:	          moveq #-1,d0
   10b4a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10b4e:	          clr.l (sp)
   10b50:	   /----- bra.s 10b76 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   10b52:	/--|----> move.l 19210 <languageTable>,d1
   10b58:	|  |      move.l (sp),d0
   10b5a:	|  |      add.l d0,d0
   10b5c:	|  |      add.l d0,d0
   10b5e:	|  |      movea.l d1,a0
   10b60:	|  |      adda.l d0,a0
   10b62:	|  |      move.l (a0),d0
   10b64:	|  |      move.l d0,d1
   10b66:	|  |      move.l 19218 <gameSettings>,d0
   10b6c:	|  |      cmp.l d1,d0
   10b6e:	|  |  /-- bne.s 10b74 <getLanguageForFileB+0x2e>
   10b70:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10b74:	|  |  \-> addq.l #1,(sp)
   10b76:	|  \----> move.l 1921c <gameSettings+0x4>,d0
   10b7c:	|         cmp.l (sp),d0
   10b7e:	\-------- bcc.s 10b52 <getLanguageForFileB+0xc>
	}

	return indexNum;
   10b80:	          move.l 4(sp),d0
}
   10b84:	          addq.l #8,sp
   10b86:	          rts

00010b88 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   10b88:	          lea -20(sp),sp
   10b8c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   10b8e:	          move.l 28(sp),-(sp)
   10b92:	          jsr 1124a <strlen>
   10b98:	          addq.l #4,sp
   10b9a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   10b9e:	          moveq #4,d0
   10ba0:	          cmp.l 12(sp),d0
   10ba4:	      /-- bge.s 10bc8 <getPrefsFilename+0x40>
   10ba6:	      |   move.l 12(sp),d0
   10baa:	      |   subq.l #4,d0
   10bac:	      |   movea.l 28(sp),a0
   10bb0:	      |   adda.l d0,a0
   10bb2:	      |   move.b (a0),d0
   10bb4:	      |   cmpi.b #46,d0
   10bb8:	      +-- bne.s 10bc8 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   10bba:	      |   move.l 12(sp),d0
   10bbe:	      |   subq.l #4,d0
   10bc0:	      |   movea.l 28(sp),a0
   10bc4:	      |   adda.l d0,a0
   10bc6:	      |   clr.b (a0)
	}

	char * f = filename;
   10bc8:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   10bce:	          clr.l 20(sp)
   10bd2:	   /----- bra.s 10bfa <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   10bd4:	/--|----> move.l 20(sp),d0
   10bd8:	|  |      movea.l 28(sp),a0
   10bdc:	|  |      adda.l d0,a0
   10bde:	|  |      move.b (a0),d0
   10be0:	|  |      cmpi.b #47,d0
   10be4:	|  |  /-- bne.s 10bf6 <getPrefsFilename+0x6e>
   10be6:	|  |  |   move.l 20(sp),d0
   10bea:	|  |  |   addq.l #1,d0
   10bec:	|  |  |   move.l 28(sp),d1
   10bf0:	|  |  |   add.l d0,d1
   10bf2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   10bf6:	|  |  \-> addq.l #1,20(sp)
   10bfa:	|  \----> move.l 20(sp),d0
   10bfe:	|         cmp.l 12(sp),d0
   10c02:	\-------- blt.s 10bd4 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   10c04:	          pea 1654a <custom.c.177df80b+0x1871>
   10c0a:	          move.l 20(sp),-(sp)
   10c0e:	          jsr 1128a <joinStrings>
   10c14:	          addq.l #8,sp
   10c16:	          move.l d0,8(sp)

	FreeVec(filename);
   10c1a:	          move.l 28(sp),4(sp)
   10c20:	          move.l 190e8 <SysBase>,d0
   10c26:	          movea.l d0,a6
   10c28:	          movea.l 4(sp),a1
   10c2c:	          jsr -690(a6)
	filename = NULL;
   10c30:	          clr.l 28(sp)
	return joined;
   10c34:	          move.l 8(sp),d0
}
   10c38:	          movea.l (sp)+,a6
   10c3a:	          lea 20(sp),sp
   10c3e:	          rts

00010c40 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   10c40:	             lea -28(sp),sp
   10c44:	             move.l a6,-(sp)
   10c46:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   10c48:	             move.l 1921c <gameSettings+0x4>,d0
   10c4e:	             move.l d0,d1
   10c50:	             addq.l #1,d1
   10c52:	             move.l d1,28(sp)
   10c56:	             clr.l 24(sp)
   10c5a:	             move.l 190e8 <SysBase>,d0
   10c60:	             movea.l d0,a6
   10c62:	             move.l 28(sp),d0
   10c66:	             move.l 24(sp),d1
   10c6a:	             jsr -684(a6)
   10c6e:	             move.l d0,20(sp)
   10c72:	             move.l 20(sp),d0
   10c76:	             move.l d0,19210 <languageTable>
    if( languageTable == 0) {
   10c7c:	             move.l 19210 <languageTable>,d0
   10c82:	         /-- bne.s 10c92 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   10c84:	         |   pea 1654f <custom.c.177df80b+0x1876>
   10c8a:	         |   jsr 13da6 <KPrintF>
   10c90:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   10c92:	         \-> move.l 1921c <gameSettings+0x4>,d0
   10c98:	             move.l d0,d1
   10c9a:	             addq.l #1,d1
   10c9c:	             move.l d1,16(sp)
   10ca0:	             clr.l 12(sp)
   10ca4:	             move.l 190e8 <SysBase>,d0
   10caa:	             movea.l d0,a6
   10cac:	             move.l 16(sp),d0
   10cb0:	             move.l 12(sp),d1
   10cb4:	             jsr -684(a6)
   10cb8:	             move.l d0,8(sp)
   10cbc:	             move.l 8(sp),d0
   10cc0:	             move.l d0,19214 <languageName>
	if( languageName == 0) {
   10cc6:	             move.l 19214 <languageName>,d0
   10ccc:	         /-- bne.s 10cdc <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   10cce:	         |   pea 16585 <custom.c.177df80b+0x18ac>
   10cd4:	         |   jsr 13da6 <KPrintF>
   10cda:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10cdc:	         \-> clr.l 32(sp)
   10ce0:	   /-------- bra.s 10d58 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   10ce2:	/--|-------> tst.l 32(sp)
   10ce6:	|  |  /----- beq.s 10cf6 <makeLanguageTable+0xb6>
   10ce8:	|  |  |      move.l 40(sp),-(sp)
   10cec:	|  |  |      jsr 6bc <get2bytes>
   10cf2:	|  |  |      addq.l #4,sp
   10cf4:	|  |  |  /-- bra.s 10cf8 <makeLanguageTable+0xb8>
   10cf6:	|  |  \--|-> moveq #0,d0
   10cf8:	|  |     \-> movea.l 19210 <languageTable>,a0
   10cfe:	|  |         move.l 32(sp),d1
   10d02:	|  |         add.l d1,d1
   10d04:	|  |         add.l d1,d1
   10d06:	|  |         adda.l d1,a0
   10d08:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   10d0a:	|  |         move.l 19214 <languageName>,d1
   10d10:	|  |         move.l 32(sp),d0
   10d14:	|  |         add.l d0,d0
   10d16:	|  |         add.l d0,d0
   10d18:	|  |         movea.l d1,a0
   10d1a:	|  |         adda.l d0,a0
   10d1c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   10d1e:	|  |         move.l 19092 <gameVersion>,d0
   10d24:	|  |         cmpi.l #511,d0
   10d2a:	|  |     /-- ble.s 10d54 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   10d2c:	|  |     |   move.l 1921c <gameSettings+0x4>,d0
   10d32:	|  |     +-- beq.s 10d54 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   10d34:	|  |     |   move.l 19214 <languageName>,d1
   10d3a:	|  |     |   move.l 32(sp),d0
   10d3e:	|  |     |   add.l d0,d0
   10d40:	|  |     |   add.l d0,d0
   10d42:	|  |     |   movea.l d1,a2
   10d44:	|  |     |   adda.l d0,a2
   10d46:	|  |     |   move.l 40(sp),-(sp)
   10d4a:	|  |     |   jsr b02 <readString>
   10d50:	|  |     |   addq.l #4,sp
   10d52:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10d54:	|  |     \-> addq.l #1,32(sp)
   10d58:	|  \-------> move.l 1921c <gameSettings+0x4>,d0
   10d5e:	|            cmp.l 32(sp),d0
   10d62:	\----------- bcc.w 10ce2 <makeLanguageTable+0xa2>
		}
	}
}
   10d66:	             nop
   10d68:	             nop
   10d6a:	             movea.l (sp)+,a2
   10d6c:	             movea.l (sp)+,a6
   10d6e:	             lea 28(sp),sp
   10d72:	             rts

00010d74 <readIniFile>:

void readIniFile (char * filename) {
   10d74:	                      lea -564(sp),sp
   10d78:	                      move.l a6,-(sp)
   10d7a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   10d7c:	                      move.l 576(sp),-(sp)
   10d80:	                      jsr b8 <copyString>
   10d86:	                      addq.l #4,sp
   10d88:	                      move.l d0,-(sp)
   10d8a:	                      jsr 10b88 <getPrefsFilename>
   10d90:	                      addq.l #4,sp
   10d92:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   10d96:	                      move.l 562(sp),558(sp)
   10d9c:	                      move.l #1005,554(sp)
   10da4:	                      move.l 190f0 <DOSBase>,d0
   10daa:	                      movea.l d0,a6
   10dac:	                      move.l 558(sp),d1
   10db0:	                      move.l 554(sp),d2
   10db4:	                      jsr -30(a6)
   10db8:	                      move.l d0,550(sp)
   10dbc:	                      move.l 550(sp),d0
   10dc0:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   10dc4:	                      clr.l 19218 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   10dca:	                      move.w #1,19220 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   10dd2:	                      clr.l 19222 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   10dd8:	                      moveq #1,d0
   10dda:	                      move.l d0,19226 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   10de0:	                      clr.w 1922a <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   10de6:	                      clr.w 1922c <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   10dec:	                      clr.w 1922e <gameSettings+0x16>

	FreeVec(langName);
   10df2:	                      move.l 562(sp),542(sp)
   10df8:	                      move.l 190e8 <SysBase>,d0
   10dfe:	                      movea.l d0,a6
   10e00:	                      movea.l 542(sp),a1
   10e04:	                      jsr -690(a6)
	langName = NULL;
   10e08:	                      clr.l 562(sp)

	if (fp) {
   10e0c:	                      tst.l 546(sp)
   10e10:	/-------------------- beq.w 110ee <readIniFile+0x37a>
		char lineSoFar[257] = "";
   10e14:	|                     move.l sp,d0
   10e16:	|                     addi.l #265,d0
   10e1c:	|                     move.l #257,d1
   10e22:	|                     move.l d1,-(sp)
   10e24:	|                     clr.l -(sp)
   10e26:	|                     move.l d0,-(sp)
   10e28:	|                     jsr 13d2a <memset>
   10e2e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   10e32:	|                     move.l sp,d0
   10e34:	|                     addq.l #8,d0
   10e36:	|                     move.l #257,d1
   10e3c:	|                     move.l d1,-(sp)
   10e3e:	|                     clr.l -(sp)
   10e40:	|                     move.l d0,-(sp)
   10e42:	|                     jsr 13d2a <memset>
   10e48:	|                     lea 12(sp),sp
		unsigned char here = 0;
   10e4c:	|                     clr.b 571(sp)
		char readChar = ' ';
   10e50:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   10e56:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   10e5c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   10e60:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   10e64:	|  /----------------> move.l 546(sp),534(sp)
   10e6a:	|  |                  move.l 190f0 <DOSBase>,d0
   10e70:	|  |                  movea.l d0,a6
   10e72:	|  |                  move.l 534(sp),d1
   10e76:	|  |                  jsr -306(a6)
   10e7a:	|  |                  move.l d0,530(sp)
   10e7e:	|  |                  move.l 530(sp),d0
   10e82:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   10e86:	|  |                  moveq #-1,d1
   10e88:	|  |                  cmp.l 538(sp),d1
   10e8c:	|  |           /----- bne.s 10e9a <readIniFile+0x126>
				readChar = '\n';
   10e8e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   10e94:	|  |           |      clr.w 568(sp)
   10e98:	|  |           |  /-- bra.s 10ea0 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   10e9a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   10ea0:	|  |              \-> move.b 570(sp),d0
   10ea4:	|  |                  ext.w d0
   10ea6:	|  |                  movea.w d0,a0
   10ea8:	|  |                  moveq #61,d0
   10eaa:	|  |                  cmp.l a0,d0
   10eac:	|  |     /----------- beq.w 11056 <readIniFile+0x2e2>
   10eb0:	|  |     |            moveq #61,d1
   10eb2:	|  |     |            cmp.l a0,d1
   10eb4:	|  |  /--|----------- blt.w 11062 <readIniFile+0x2ee>
   10eb8:	|  |  |  |            moveq #10,d0
   10eba:	|  |  |  |            cmp.l a0,d0
   10ebc:	|  |  |  |        /-- beq.s 10ec6 <readIniFile+0x152>
   10ebe:	|  |  |  |        |   moveq #13,d1
   10ec0:	|  |  |  |        |   cmp.l a0,d1
   10ec2:	|  |  +--|--------|-- bne.w 11062 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10ec6:	|  |  |  |        \-> tst.w 566(sp)
   10eca:	|  |  |  |     /----- beq.w 11044 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   10ece:	|  |  |  |     |      pea 165b9 <custom.c.177df80b+0x18e0>
   10ed4:	|  |  |  |     |      move.l sp,d0
   10ed6:	|  |  |  |     |      addi.l #269,d0
   10edc:	|  |  |  |     |      move.l d0,-(sp)
   10ede:	|  |  |  |     |      jsr 1120a <strcmp>
   10ee4:	|  |  |  |     |      addq.l #8,sp
   10ee6:	|  |  |  |     |      tst.l d0
   10ee8:	|  |  |  |     |  /-- bne.s 10f02 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   10eea:	|  |  |  |     |  |   move.l sp,d0
   10eec:	|  |  |  |     |  |   addq.l #8,d0
   10eee:	|  |  |  |     |  |   move.l d0,-(sp)
   10ef0:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   10ef6:	|  |  |  |     |  |   addq.l #4,sp
   10ef8:	|  |  |  |     |  |   move.l d0,19218 <gameSettings>
   10efe:	|  |  |  |     +--|-- bra.w 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   10f02:	|  |  |  |     |  \-> pea 165c2 <custom.c.177df80b+0x18e9>
   10f08:	|  |  |  |     |      move.l sp,d0
   10f0a:	|  |  |  |     |      addi.l #269,d0
   10f10:	|  |  |  |     |      move.l d0,-(sp)
   10f12:	|  |  |  |     |      jsr 1120a <strcmp>
   10f18:	|  |  |  |     |      addq.l #8,sp
   10f1a:	|  |  |  |     |      tst.l d0
   10f1c:	|  |  |  |     |  /-- bne.s 10f42 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   10f1e:	|  |  |  |     |  |   move.l sp,d0
   10f20:	|  |  |  |     |  |   addq.l #8,d0
   10f22:	|  |  |  |     |  |   move.l d0,-(sp)
   10f24:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   10f2a:	|  |  |  |     |  |   addq.l #4,sp
   10f2c:	|  |  |  |     |  |   tst.l d0
   10f2e:	|  |  |  |     |  |   seq d0
   10f30:	|  |  |  |     |  |   neg.b d0
   10f32:	|  |  |  |     |  |   move.b d0,d0
   10f34:	|  |  |  |     |  |   andi.w #255,d0
   10f38:	|  |  |  |     |  |   move.w d0,19220 <gameSettings+0x8>
   10f3e:	|  |  |  |     +--|-- bra.w 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   10f42:	|  |  |  |     |  \-> pea 165c9 <custom.c.177df80b+0x18f0>
   10f48:	|  |  |  |     |      move.l sp,d0
   10f4a:	|  |  |  |     |      addi.l #269,d0
   10f50:	|  |  |  |     |      move.l d0,-(sp)
   10f52:	|  |  |  |     |      jsr 1120a <strcmp>
   10f58:	|  |  |  |     |      addq.l #8,sp
   10f5a:	|  |  |  |     |      tst.l d0
   10f5c:	|  |  |  |     |  /-- bne.s 10f76 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   10f5e:	|  |  |  |     |  |   move.l sp,d0
   10f60:	|  |  |  |     |  |   addq.l #8,d0
   10f62:	|  |  |  |     |  |   move.l d0,-(sp)
   10f64:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   10f6a:	|  |  |  |     |  |   addq.l #4,sp
   10f6c:	|  |  |  |     |  |   move.l d0,19222 <gameSettings+0xa>
   10f72:	|  |  |  |     +--|-- bra.w 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   10f76:	|  |  |  |     |  \-> pea 165d1 <custom.c.177df80b+0x18f8>
   10f7c:	|  |  |  |     |      move.l sp,d0
   10f7e:	|  |  |  |     |      addi.l #269,d0
   10f84:	|  |  |  |     |      move.l d0,-(sp)
   10f86:	|  |  |  |     |      jsr 1120a <strcmp>
   10f8c:	|  |  |  |     |      addq.l #8,sp
   10f8e:	|  |  |  |     |      tst.l d0
   10f90:	|  |  |  |     |  /-- bne.s 10faa <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10f92:	|  |  |  |     |  |   move.l sp,d0
   10f94:	|  |  |  |     |  |   addq.l #8,d0
   10f96:	|  |  |  |     |  |   move.l d0,-(sp)
   10f98:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   10f9e:	|  |  |  |     |  |   addq.l #4,sp
   10fa0:	|  |  |  |     |  |   move.l d0,19226 <gameSettings+0xe>
   10fa6:	|  |  |  |     +--|-- bra.w 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   10faa:	|  |  |  |     |  \-> pea 165db <custom.c.177df80b+0x1902>
   10fb0:	|  |  |  |     |      move.l sp,d0
   10fb2:	|  |  |  |     |      addi.l #269,d0
   10fb8:	|  |  |  |     |      move.l d0,-(sp)
   10fba:	|  |  |  |     |      jsr 1120a <strcmp>
   10fc0:	|  |  |  |     |      addq.l #8,sp
   10fc2:	|  |  |  |     |      tst.l d0
   10fc4:	|  |  |  |     |  /-- bne.s 10fde <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10fc6:	|  |  |  |     |  |   move.l sp,d0
   10fc8:	|  |  |  |     |  |   addq.l #8,d0
   10fca:	|  |  |  |     |  |   move.l d0,-(sp)
   10fcc:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   10fd2:	|  |  |  |     |  |   addq.l #4,sp
   10fd4:	|  |  |  |     |  |   move.l d0,d0
   10fd6:	|  |  |  |     |  |   move.w d0,1922a <gameSettings+0x12>
   10fdc:	|  |  |  |     +--|-- bra.s 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   10fde:	|  |  |  |     |  \-> pea 165e7 <custom.c.177df80b+0x190e>
   10fe4:	|  |  |  |     |      move.l sp,d0
   10fe6:	|  |  |  |     |      addi.l #269,d0
   10fec:	|  |  |  |     |      move.l d0,-(sp)
   10fee:	|  |  |  |     |      jsr 1120a <strcmp>
   10ff4:	|  |  |  |     |      addq.l #8,sp
   10ff6:	|  |  |  |     |      tst.l d0
   10ff8:	|  |  |  |     |  /-- bne.s 11012 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   10ffa:	|  |  |  |     |  |   move.l sp,d0
   10ffc:	|  |  |  |     |  |   addq.l #8,d0
   10ffe:	|  |  |  |     |  |   move.l d0,-(sp)
   11000:	|  |  |  |     |  |   jsr 110fa <stringToInt>
   11006:	|  |  |  |     |  |   addq.l #4,sp
   11008:	|  |  |  |     |  |   move.l d0,d0
   1100a:	|  |  |  |     |  |   move.w d0,1922c <gameSettings+0x14>
   11010:	|  |  |  |     +--|-- bra.s 11044 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   11012:	|  |  |  |     |  \-> pea 165f5 <custom.c.177df80b+0x191c>
   11018:	|  |  |  |     |      move.l sp,d0
   1101a:	|  |  |  |     |      addi.l #269,d0
   11020:	|  |  |  |     |      move.l d0,-(sp)
   11022:	|  |  |  |     |      jsr 1120a <strcmp>
   11028:	|  |  |  |     |      addq.l #8,sp
   1102a:	|  |  |  |     |      tst.l d0
   1102c:	|  |  |  |     +----- bne.s 11044 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   1102e:	|  |  |  |     |      move.l sp,d0
   11030:	|  |  |  |     |      addq.l #8,d0
   11032:	|  |  |  |     |      move.l d0,-(sp)
   11034:	|  |  |  |     |      jsr 110fa <stringToInt>
   1103a:	|  |  |  |     |      addq.l #4,sp
   1103c:	|  |  |  |     |      move.l d0,d0
   1103e:	|  |  |  |     |      move.w d0,1922e <gameSettings+0x16>
					}
				}
				here = 0;
   11044:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   11048:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1104c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   11050:	|  |  |  |            clr.b 8(sp)
				break;
   11054:	|  |  |  |  /-------- bra.s 110cc <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   11056:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1105c:	|  |  |     |         clr.b 571(sp)
				break;
   11060:	|  |  |     +-------- bra.s 110cc <readIniFile+0x358>

				default:
				if (doingSecond) {
   11062:	|  |  \-----|-------> tst.w 566(sp)
   11066:	|  |        |  /----- beq.s 1109a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   11068:	|  |        |  |      move.b 571(sp),d0
   1106c:	|  |        |  |      move.b d0,d1
   1106e:	|  |        |  |      addq.b #1,d1
   11070:	|  |        |  |      move.b d1,571(sp)
   11074:	|  |        |  |      move.b d0,d0
   11076:	|  |        |  |      andi.l #255,d0
   1107c:	|  |        |  |      lea 572(sp),a0
   11080:	|  |        |  |      adda.l d0,a0
   11082:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   11088:	|  |        |  |      moveq #0,d0
   1108a:	|  |        |  |      move.b 571(sp),d0
   1108e:	|  |        |  |      lea 572(sp),a0
   11092:	|  |        |  |      adda.l d0,a0
   11094:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   11098:	|  |        |  |  /-- bra.s 110ca <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1109a:	|  |        |  \--|-> move.b 571(sp),d0
   1109e:	|  |        |     |   move.b d0,d1
   110a0:	|  |        |     |   addq.b #1,d1
   110a2:	|  |        |     |   move.b d1,571(sp)
   110a6:	|  |        |     |   move.b d0,d0
   110a8:	|  |        |     |   andi.l #255,d0
   110ae:	|  |        |     |   lea 572(sp),a0
   110b2:	|  |        |     |   adda.l d0,a0
   110b4:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   110ba:	|  |        |     |   moveq #0,d0
   110bc:	|  |        |     |   move.b 571(sp),d0
   110c0:	|  |        |     |   lea 572(sp),a0
   110c4:	|  |        |     |   adda.l d0,a0
   110c6:	|  |        |     |   clr.b -307(a0)
				break;
   110ca:	|  |        |     \-> nop
			}
		} while (keepGoing);
   110cc:	|  |        \-------> tst.w 568(sp)
   110d0:	|  \----------------- bne.w 10e64 <readIniFile+0xf0>

		Close(fp);
   110d4:	|                     move.l 546(sp),526(sp)
   110da:	|                     move.l 190f0 <DOSBase>,d0
   110e0:	|                     movea.l d0,a6
   110e2:	|                     move.l 526(sp),d1
   110e6:	|                     jsr -36(a6)
   110ea:	|                     move.l d0,522(sp)
	}
}
   110ee:	\-------------------> nop
   110f0:	                      move.l (sp)+,d2
   110f2:	                      movea.l (sp)+,a6
   110f4:	                      lea 564(sp),sp
   110f8:	                      rts

000110fa <stringToInt>:

unsigned int stringToInt (char * s) {
   110fa:	             subq.l #8,sp
	int i = 0;
   110fc:	             clr.l 4(sp)
	BOOL negative = FALSE;
   11100:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   11104:	/----------> movea.l 12(sp),a0
   11108:	|            move.b (a0),d0
   1110a:	|            cmpi.b #47,d0
   1110e:	|        /-- ble.s 11146 <stringToInt+0x4c>
   11110:	|        |   movea.l 12(sp),a0
   11114:	|        |   move.b (a0),d0
   11116:	|        |   cmpi.b #57,d0
   1111a:	|        +-- bgt.s 11146 <stringToInt+0x4c>
			i *= 10;
   1111c:	|        |   move.l 4(sp),d1
   11120:	|        |   move.l d1,d0
   11122:	|        |   add.l d0,d0
   11124:	|        |   add.l d0,d0
   11126:	|        |   add.l d1,d0
   11128:	|        |   add.l d0,d0
   1112a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   1112e:	|        |   movea.l 12(sp),a0
   11132:	|        |   move.b (a0),d0
   11134:	|        |   ext.w d0
   11136:	|        |   movea.w d0,a0
   11138:	|        |   moveq #-48,d0
   1113a:	|        |   add.l a0,d0
   1113c:	|        |   add.l d0,4(sp)
			s ++;
   11140:	|        |   addq.l #1,12(sp)
   11144:	|  /-----|-- bra.s 1117e <stringToInt+0x84>
		} else if (*s == '-') {
   11146:	|  |     \-> movea.l 12(sp),a0
   1114a:	|  |         move.b (a0),d0
   1114c:	|  |         cmpi.b #45,d0
   11150:	|  |     /-- bne.s 1116a <stringToInt+0x70>
			negative = ! negative;
   11152:	|  |     |   tst.w 2(sp)
   11156:	|  |     |   seq d0
   11158:	|  |     |   neg.b d0
   1115a:	|  |     |   move.b d0,d0
   1115c:	|  |     |   andi.w #255,d0
   11160:	|  |     |   move.w d0,2(sp)
			s++;
   11164:	|  |     |   addq.l #1,12(sp)
   11168:	+--|-----|-- bra.s 11104 <stringToInt+0xa>
		} else {
			if (negative)
   1116a:	|  |     \-> tst.w 2(sp)
   1116e:	|  |     /-- beq.s 11178 <stringToInt+0x7e>
				return -i;
   11170:	|  |     |   move.l 4(sp),d0
   11174:	|  |     |   neg.l d0
   11176:	|  |  /--|-- bra.s 11180 <stringToInt+0x86>
			return i;
   11178:	|  |  |  \-> move.l 4(sp),d0
   1117c:	|  |  +----- bra.s 11180 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   1117e:	\--\--|----X bra.s 11104 <stringToInt+0xa>
		}
	}
   11180:	      \----> addq.l #8,sp
   11182:	             rts

00011184 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   11184:	    lea -28(sp),sp
   11188:	    move.l a6,-(sp)
   1118a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1118c:	    pea 165ff <custom.c.177df80b+0x1926>
   11192:	    jsr 13da6 <KPrintF>
   11198:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1119a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1119e:	    move.l 40(sp),30(sp)
   111a4:	    move.l #1005,26(sp)
   111ac:	    move.l 190f0 <DOSBase>,d0
   111b2:	    movea.l d0,a6
   111b4:	    move.l 30(sp),d1
   111b8:	    move.l 26(sp),d2
   111bc:	    jsr -30(a6)
   111c0:	    move.l d0,22(sp)
   111c4:	    move.l 22(sp),d0
   111c8:	    move.l d0,18(sp)
	if (tester) {
   111cc:	/-- beq.s 111fc <fileExists+0x78>
		KPrintF("fileexists: File exists");
   111ce:	|   pea 16619 <custom.c.177df80b+0x1940>
   111d4:	|   jsr 13da6 <KPrintF>
   111da:	|   addq.l #4,sp
		retval = 1;
   111dc:	|   move.b #1,35(sp)
		Close(tester);
   111e2:	|   move.l 18(sp),14(sp)
   111e8:	|   move.l 190f0 <DOSBase>,d0
   111ee:	|   movea.l d0,a6
   111f0:	|   move.l 14(sp),d1
   111f4:	|   jsr -36(a6)
   111f8:	|   move.l d0,10(sp)
	}
	return retval;
   111fc:	\-> move.b 35(sp),d0
   11200:	    move.l (sp)+,d2
   11202:	    movea.l (sp)+,a6
   11204:	    lea 28(sp),sp
   11208:	    rts

0001120a <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1120a:	   /-- bra.s 11214 <strcmp+0xa>
    {
        s1++;
   1120c:	/--|-> addq.l #1,4(sp)
        s2++;
   11210:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   11214:	|  \-> movea.l 4(sp),a0
   11218:	|      move.b (a0),d0
   1121a:	|  /-- beq.s 1122c <strcmp+0x22>
   1121c:	|  |   movea.l 4(sp),a0
   11220:	|  |   move.b (a0),d1
   11222:	|  |   movea.l 8(sp),a0
   11226:	|  |   move.b (a0),d0
   11228:	|  |   cmp.b d1,d0
   1122a:	\--|-- beq.s 1120c <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1122c:	   \-> movea.l 4(sp),a0
   11230:	       move.b (a0),d0
   11232:	       moveq #0,d1
   11234:	       move.b d0,d1
   11236:	       movea.l 8(sp),a0
   1123a:	       move.b (a0),d0
   1123c:	       move.b d0,d0
   1123e:	       andi.l #255,d0
   11244:	       sub.l d0,d1
   11246:	       move.l d1,d0
}
   11248:	       rts

0001124a <strlen>:

long unsigned int strlen (const char *s) 
{  
   1124a:	       subq.l #4,sp
	long unsigned int i = 0;
   1124c:	       clr.l (sp)
	while(s[i]) i++; 
   1124e:	   /-- bra.s 11252 <strlen+0x8>
   11250:	/--|-> addq.l #1,(sp)
   11252:	|  \-> movea.l 8(sp),a0
   11256:	|      adda.l (sp),a0
   11258:	|      move.b (a0),d0
   1125a:	\----- bne.s 11250 <strlen+0x6>
	return(i);
   1125c:	       move.l (sp),d0
}
   1125e:	       addq.l #4,sp
   11260:	       rts

00011262 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   11262:	    nop
   11264:	/-> move.l 8(sp),d0
   11268:	|   move.l d0,d1
   1126a:	|   addq.l #1,d1
   1126c:	|   move.l d1,8(sp)
   11270:	|   movea.l 4(sp),a0
   11274:	|   lea 1(a0),a1
   11278:	|   move.l a1,4(sp)
   1127c:	|   movea.l d0,a1
   1127e:	|   move.b (a1),d0
   11280:	|   move.b d0,(a0)
   11282:	|   move.b (a0),d0
   11284:	\-- bne.s 11264 <strcpy+0x2>
}
   11286:	    nop
   11288:	    rts

0001128a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   1128a:	    lea -20(sp),sp
   1128e:	    move.l a6,-(sp)
   11290:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   11292:	    move.l 32(sp),-(sp)
   11296:	    jsr 1124a <strlen>
   1129c:	    addq.l #4,sp
   1129e:	    move.l d0,d2
   112a0:	    move.l 36(sp),-(sp)
   112a4:	    jsr 1124a <strlen>
   112aa:	    addq.l #4,sp
   112ac:	    add.l d2,d0
   112ae:	    move.l d0,d1
   112b0:	    addq.l #1,d1
   112b2:	    move.l d1,20(sp)
   112b6:	    clr.l 16(sp)
   112ba:	    move.l 190e8 <SysBase>,d0
   112c0:	    movea.l d0,a6
   112c2:	    move.l 20(sp),d0
   112c6:	    move.l 16(sp),d1
   112ca:	    jsr -684(a6)
   112ce:	    move.l d0,12(sp)
   112d2:	    move.l 12(sp),d0
   112d6:	    move.l d0,8(sp)
	char * t = newString;
   112da:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   112e0:	    nop
   112e2:	/-> move.l 32(sp),d0
   112e6:	|   move.l d0,d1
   112e8:	|   addq.l #1,d1
   112ea:	|   move.l d1,32(sp)
   112ee:	|   movea.l 24(sp),a0
   112f2:	|   lea 1(a0),a1
   112f6:	|   move.l a1,24(sp)
   112fa:	|   movea.l d0,a1
   112fc:	|   move.b (a1),d0
   112fe:	|   move.b d0,(a0)
   11300:	|   move.b (a0),d0
   11302:	\-- bne.s 112e2 <joinStrings+0x58>
	t--;
   11304:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   11308:	    nop
   1130a:	/-> move.l 36(sp),d0
   1130e:	|   move.l d0,d1
   11310:	|   addq.l #1,d1
   11312:	|   move.l d1,36(sp)
   11316:	|   movea.l 24(sp),a0
   1131a:	|   lea 1(a0),a1
   1131e:	|   move.l a1,24(sp)
   11322:	|   movea.l d0,a1
   11324:	|   move.b (a1),d0
   11326:	|   move.b d0,(a0)
   11328:	|   move.b (a0),d0
   1132a:	\-- bne.s 1130a <joinStrings+0x80>

	return newString;
   1132c:	    move.l 8(sp),d0
}
   11330:	    move.l (sp)+,d2
   11332:	    movea.l (sp)+,a6
   11334:	    lea 20(sp),sp
   11338:	    rts

0001133a <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1133a:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   1133e:	       moveq #10,d0
   11340:	       cmp.l 28(sp),d0
   11344:	   /-- bne.s 11362 <itoa+0x28>
   11346:	   |   tst.l 20(sp)
   1134a:	   +-- bge.s 11362 <itoa+0x28>
        *str++ = '-';
   1134c:	   |   move.l 24(sp),d0
   11350:	   |   move.l d0,d1
   11352:	   |   addq.l #1,d1
   11354:	   |   move.l d1,24(sp)
   11358:	   |   movea.l d0,a0
   1135a:	   |   move.b #45,(a0)
        value *= -1;
   1135e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   11362:	   \-> move.l 24(sp),12(sp)
   11368:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   1136e:	   /-> move.l 20(sp),d0
   11372:	   |   move.l 28(sp),-(sp)
   11376:	   |   move.l d0,-(sp)
   11378:	   |   jsr 14810 <__modsi3>
   1137e:	   |   addq.l #8,sp
   11380:	   |   movea.l d0,a1
   11382:	   |   move.l 12(sp),d0
   11386:	   |   move.l d0,d1
   11388:	   |   addq.l #1,d1
   1138a:	   |   move.l d1,12(sp)
   1138e:	   |   lea 16631 <custom.c.177df80b+0x1958>,a0
   11394:	   |   move.b (0,a1,a0.l),d1
   11398:	   |   movea.l d0,a0
   1139a:	   |   move.b d1,(a0)
        value /= base;
   1139c:	   |   move.l 28(sp),-(sp)
   113a0:	   |   move.l 24(sp),-(sp)
   113a4:	   |   jsr 147e2 <__divsi3>
   113aa:	   |   addq.l #8,sp
   113ac:	   |   move.l d0,20(sp)
    } while (value);
   113b0:	   \-- bne.s 1136e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   113b2:	       move.l 12(sp),d0
   113b6:	       move.l d0,d1
   113b8:	       subq.l #1,d1
   113ba:	       move.l d1,12(sp)
   113be:	       movea.l d0,a0
   113c0:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   113c2:	       move.l 4(sp),8(sp)
   113c8:	   /-- bra.s 113ee <itoa+0xb4>
        char temp = *low;
   113ca:	/--|-> movea.l 8(sp),a0
   113ce:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   113d2:	|  |   movea.l 12(sp),a0
   113d6:	|  |   move.b (a0),d0
   113d8:	|  |   movea.l 8(sp),a0
   113dc:	|  |   move.b d0,(a0)
        *ptr = temp;
   113de:	|  |   movea.l 12(sp),a0
   113e2:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   113e6:	|  |   addq.l #1,8(sp)
   113ea:	|  |   subq.l #1,12(sp)
   113ee:	|  \-> move.l 8(sp),d0
   113f2:	|      cmp.l 12(sp),d0
   113f6:	\----- bcs.s 113ca <itoa+0x90>
    }
    return rc;
   113f8:	       move.l 4(sp),d0
}
   113fc:	       lea 16(sp),sp
   11400:	       rts

00011402 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   11402:	                            lea -40(sp),sp
   11406:	                            move.l d2,-(sp)
    char* s = str;
   11408:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1140e:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   11414:	   /----------------------- bra.w 11548 <vsprintf2+0x146>
        if (*p == '%') {
   11418:	/--|----------------------> movea.l 36(sp),a0
   1141c:	|  |                        move.b (a0),d0
   1141e:	|  |                        cmpi.b #37,d0
   11422:	|  |  /-------------------- bne.w 1152e <vsprintf2+0x12c>
            switch (*++p) {
   11426:	|  |  |                     addq.l #1,36(sp)
   1142a:	|  |  |                     movea.l 36(sp),a0
   1142e:	|  |  |                     move.b (a0),d0
   11430:	|  |  |                     ext.w d0
   11432:	|  |  |                     movea.w d0,a0
   11434:	|  |  |                     moveq #115,d0
   11436:	|  |  |                     cmp.l a0,d0
   11438:	|  |  |           /-------- beq.s 114b0 <vsprintf2+0xae>
   1143a:	|  |  |           |         moveq #115,d1
   1143c:	|  |  |           |         cmp.l a0,d1
   1143e:	|  |  |  /--------|-------- blt.w 11516 <vsprintf2+0x114>
   11442:	|  |  |  |        |         moveq #99,d2
   11444:	|  |  |  |        |         cmp.l a0,d2
   11446:	|  |  |  |  /-----|-------- beq.w 114ee <vsprintf2+0xec>
   1144a:	|  |  |  |  |     |         moveq #100,d0
   1144c:	|  |  |  |  |     |         cmp.l a0,d0
   1144e:	|  |  |  +--|-----|-------- bne.w 11516 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   11452:	|  |  |  |  |     |         addq.l #4,56(sp)
   11456:	|  |  |  |  |     |         movea.l 56(sp),a0
   1145a:	|  |  |  |  |     |         move.l (a0),d0
   1145c:	|  |  |  |  |     |         move.l d0,d1
   1145e:	|  |  |  |  |     |         subq.l #1,d1
   11460:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   11464:	|  |  |  |  |     |         pea a <_start+0xa>
   11468:	|  |  |  |  |     |         lea 8(sp),a0
   1146c:	|  |  |  |  |     |         move.l a0,-(sp)
   1146e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   11472:	|  |  |  |  |     |         jsr 1133a <itoa>
   11478:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1147c:	|  |  |  |  |     |         lea 44(sp),a0
   11480:	|  |  |  |  |     |         lea -40(a0),a0
   11484:	|  |  |  |  |     |         move.l a0,28(sp)
   11488:	|  |  |  |  |     |     /-- bra.s 114a4 <vsprintf2+0xa2>
                        *s++ = *b;
   1148a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   1148e:	|  |  |  |  |     |  |  |   move.l d0,d1
   11490:	|  |  |  |  |     |  |  |   addq.l #1,d1
   11492:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   11496:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1149a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1149c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1149e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   114a0:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   114a4:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   114a8:	|  |  |  |  |     |  |      move.b (a0),d0
   114aa:	|  |  |  |  |     |  \----- bne.s 1148a <vsprintf2+0x88>
                    }
                    break;
   114ac:	|  |  |  |  |  /--|-------- bra.w 11544 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   114b0:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   114b4:	|  |  |  |  |  |            movea.l 56(sp),a0
   114b8:	|  |  |  |  |  |            move.l (a0),d0
   114ba:	|  |  |  |  |  |            move.l d0,d1
   114bc:	|  |  |  |  |  |            subq.l #1,d1
   114be:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   114c2:	|  |  |  |  |  |        /-- bra.s 114e4 <vsprintf2+0xe2>
                        *s++ = *sval++;
   114c4:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   114c8:	|  |  |  |  |  |     |  |   move.l d1,d2
   114ca:	|  |  |  |  |  |     |  |   addq.l #1,d2
   114cc:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   114d0:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   114d4:	|  |  |  |  |  |     |  |   move.l d0,d2
   114d6:	|  |  |  |  |  |     |  |   addq.l #1,d2
   114d8:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   114dc:	|  |  |  |  |  |     |  |   movea.l d1,a0
   114de:	|  |  |  |  |  |     |  |   move.b (a0),d1
   114e0:	|  |  |  |  |  |     |  |   movea.l d0,a0
   114e2:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   114e4:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   114e8:	|  |  |  |  |  |     |      move.b (a0),d0
   114ea:	|  |  |  |  |  |     \----- bne.s 114c4 <vsprintf2+0xc2>
                    }
                    break;
   114ec:	|  |  |  |  |  +----------- bra.s 11544 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   114ee:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   114f2:	|  |  |  |     |            movea.l 56(sp),a0
   114f6:	|  |  |  |     |            move.l (a0),d0
   114f8:	|  |  |  |     |            move.l d0,d1
   114fa:	|  |  |  |     |            subq.l #1,d1
   114fc:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   11500:	|  |  |  |     |            move.l 40(sp),d0
   11504:	|  |  |  |     |            move.l d0,d2
   11506:	|  |  |  |     |            addq.l #1,d2
   11508:	|  |  |  |     |            move.l d2,40(sp)
   1150c:	|  |  |  |     |            move.l 24(sp),d1
   11510:	|  |  |  |     |            movea.l d0,a0
   11512:	|  |  |  |     |            move.b d1,(a0)
                    break;
   11514:	|  |  |  |     +----------- bra.s 11544 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   11516:	|  |  |  \-----|----------> move.l 40(sp),d0
   1151a:	|  |  |        |            move.l d0,d1
   1151c:	|  |  |        |            addq.l #1,d1
   1151e:	|  |  |        |            move.l d1,40(sp)
   11522:	|  |  |        |            movea.l 36(sp),a0
   11526:	|  |  |        |            move.b (a0),d1
   11528:	|  |  |        |            movea.l d0,a0
   1152a:	|  |  |        |            move.b d1,(a0)
                    break;
   1152c:	|  |  |        +----------- bra.s 11544 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1152e:	|  |  \--------|----------> move.l 40(sp),d0
   11532:	|  |           |            move.l d0,d1
   11534:	|  |           |            addq.l #1,d1
   11536:	|  |           |            move.l d1,40(sp)
   1153a:	|  |           |            movea.l 36(sp),a0
   1153e:	|  |           |            move.b (a0),d1
   11540:	|  |           |            movea.l d0,a0
   11542:	|  |           |            move.b d1,(a0)
        }
        p++;
   11544:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   11548:	|  \----------------------> movea.l 36(sp),a0
   1154c:	|                           move.b (a0),d0
   1154e:	\-------------------------- bne.w 11418 <vsprintf2+0x16>
    }
    *s = '\0';
   11552:	                            movea.l 40(sp),a0
   11556:	                            clr.b (a0)
    return s - str;
   11558:	                            move.l 40(sp),d0
   1155c:	                            sub.l 48(sp),d0
}
   11560:	                            move.l (sp)+,d2
   11562:	                            lea 40(sp),sp
   11566:	                            rts

00011568 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   11568:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1156a:	moveq #16,d0
   1156c:	add.l sp,d0
   1156e:	move.l d0,d1
   11570:	addq.l #4,d1
   11572:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   11576:	move.l 16(sp),d0
   1157a:	move.l 4(sp),-(sp)
   1157e:	move.l d0,-(sp)
   11580:	move.l 20(sp),-(sp)
   11584:	jsr 11402 <vsprintf2>
   1158a:	lea 12(sp),sp
   1158e:	move.l d0,(sp)
    va_end(args);
   11590:	clr.l 4(sp)

    return done;
   11594:	move.l (sp),d0
}
   11596:	addq.l #8,sp
   11598:	rts

0001159a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1159a:	       lea -20(sp),sp
   1159e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   115a0:	       moveq #12,d0
   115a2:	       move.l d0,20(sp)
   115a6:	       clr.l 16(sp)
   115aa:	       move.l 190e8 <SysBase>,d0
   115b0:	       movea.l d0,a6
   115b2:	       move.l 20(sp),d0
   115b6:	       move.l 16(sp),d1
   115ba:	       jsr -684(a6)
   115be:	       move.l d0,12(sp)
   115c2:	       move.l 12(sp),d0
   115c6:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   115ca:	   /-- bne.s 115d0 <addVarToStack+0x36>
   115cc:	   |   clr.w d0
   115ce:	/--|-- bra.s 11618 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   115d0:	|  \-> move.l 8(sp),d0
   115d4:	|      move.l d0,-(sp)
   115d6:	|      move.l 32(sp),-(sp)
   115da:	|      jsr 120fc <copyMain>
   115e0:	|      addq.l #8,sp
   115e2:	|      tst.w d0
   115e4:	|  /-- bne.s 11600 <addVarToStack+0x66>
        FreeVec(newStack);
   115e6:	|  |   move.l 8(sp),4(sp)
   115ec:	|  |   move.l 190e8 <SysBase>,d0
   115f2:	|  |   movea.l d0,a6
   115f4:	|  |   movea.l 4(sp),a1
   115f8:	|  |   jsr -690(a6)
        return FALSE;
   115fc:	|  |   clr.w d0
   115fe:	+--|-- bra.s 11618 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   11600:	|  \-> movea.l 32(sp),a0
   11604:	|      move.l (a0),d0
   11606:	|      movea.l 8(sp),a0
   1160a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1160e:	|      movea.l 32(sp),a0
   11612:	|      move.l 8(sp),(a0)
    return TRUE;
   11616:	|      moveq #1,d0
}
   11618:	\----> movea.l (sp)+,a6
   1161a:	       lea 20(sp),sp
   1161e:	       rts

00011620 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   11620:	       lea -16(sp),sp
   11624:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   11626:	       moveq #12,d0
   11628:	       move.l d0,16(sp)
   1162c:	       clr.l 12(sp)
   11630:	       move.l 190e8 <SysBase>,d0
   11636:	       movea.l d0,a6
   11638:	       move.l 16(sp),d0
   1163c:	       move.l 12(sp),d1
   11640:	       jsr -684(a6)
   11644:	       move.l d0,8(sp)
   11648:	       move.l 8(sp),d0
   1164c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   11650:	   /-- bne.s 11656 <addVarToStackQuick+0x36>
   11652:	   |   clr.w d0
   11654:	/--|-- bra.s 1168c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   11656:	|  \-> move.l 4(sp),d0
   1165a:	|      pea 8 <_start+0x8>
   1165e:	|      move.l 28(sp),-(sp)
   11662:	|      move.l d0,-(sp)
   11664:	|      jsr 13d5a <memcpy>
   1166a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1166e:	|      movea.l 24(sp),a0
   11672:	|      clr.l (a0)

    newStack->next = *thisStack;
   11674:	|      movea.l 28(sp),a0
   11678:	|      move.l (a0),d0
   1167a:	|      movea.l 4(sp),a0
   1167e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11682:	|      movea.l 28(sp),a0
   11686:	|      move.l 4(sp),(a0)
    return TRUE;
   1168a:	|      moveq #1,d0
}
   1168c:	\----> movea.l (sp)+,a6
   1168e:	       lea 16(sp),sp
   11692:	       rts

00011694 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   11694:	       lea -16(sp),sp
   11698:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1169a:	       movea.l 24(sp),a0
   1169e:	       move.l (a0),d0
   116a0:	       moveq #1,d1
   116a2:	       cmp.l d0,d1
   116a4:	   /-- bne.s 116ce <addVariablesInSecond+0x3a>
   116a6:	   |   movea.l 28(sp),a0
   116aa:	   |   move.l (a0),d0
   116ac:	   |   moveq #1,d1
   116ae:	   |   cmp.l d0,d1
   116b0:	   +-- bne.s 116ce <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   116b2:	   |   movea.l 28(sp),a0
   116b6:	   |   move.l 4(a0),d1
   116ba:	   |   movea.l 24(sp),a0
   116be:	   |   move.l 4(a0),d0
   116c2:	   |   add.l d1,d0
   116c4:	   |   movea.l 28(sp),a0
   116c8:	   |   move.l d0,4(a0)
   116cc:	/--|-- bra.s 11748 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   116ce:	|  \-> move.l 24(sp),-(sp)
   116d2:	|      jsr 12334 <getTextFromAnyVar>
   116d8:	|      addq.l #4,sp
   116da:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   116de:	|      move.l 28(sp),-(sp)
   116e2:	|      jsr 12334 <getTextFromAnyVar>
   116e8:	|      addq.l #4,sp
   116ea:	|      move.l d0,12(sp)

		unlinkVar(var2);
   116ee:	|      move.l 28(sp),-(sp)
   116f2:	|      jsr 11fac <unlinkVar>
   116f8:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   116fa:	|      move.l 12(sp),-(sp)
   116fe:	|      move.l 20(sp),-(sp)
   11702:	|      jsr 1128a <joinStrings>
   11708:	|      addq.l #8,sp
   1170a:	|      movea.l 28(sp),a0
   1170e:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   11712:	|      movea.l 28(sp),a0
   11716:	|      moveq #3,d0
   11718:	|      move.l d0,(a0)
		FreeVec(string1);
   1171a:	|      move.l 16(sp),8(sp)
   11720:	|      move.l 190e8 <SysBase>,d0
   11726:	|      movea.l d0,a6
   11728:	|      movea.l 8(sp),a1
   1172c:	|      jsr -690(a6)
		FreeVec(string2);
   11730:	|      move.l 12(sp),4(sp)
   11736:	|      move.l 190e8 <SysBase>,d0
   1173c:	|      movea.l d0,a6
   1173e:	|      movea.l 4(sp),a1
   11742:	|      jsr -690(a6)
	}
}
   11746:	|      nop
   11748:	\----> nop
   1174a:	       movea.l (sp)+,a6
   1174c:	       lea 16(sp),sp
   11750:	       rts

00011752 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   11752:	movea.l 8(sp),a0
   11756:	move.l 4(a0),-(sp)
   1175a:	move.l (a0),-(sp)
   1175c:	movea.l 12(sp),a0
   11760:	move.l 4(a0),-(sp)
   11764:	move.l (a0),-(sp)
   11766:	jsr 11788 <compareVars>
   1176c:	lea 16(sp),sp
   11770:	move.l d0,-(sp)
   11772:	pea 1 <_start+0x1>
   11776:	move.l 16(sp),-(sp)
   1177a:	jsr 12650 <setVariable>
   11780:	lea 12(sp),sp
}
   11784:	nop
   11786:	rts

00011788 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   11788:	       subq.l #4,sp
	int re = 0;
   1178a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1178c:	       move.l 8(sp),d1
   11790:	       move.l 16(sp),d0
   11794:	       cmp.l d1,d0
   11796:	/----- bne.w 1185e <compareVars+0xd6>
		switch (var1.varType) {
   1179a:	|      move.l 8(sp),d0
   1179e:	|      moveq #9,d1
   117a0:	|      cmp.l d0,d1
   117a2:	|  /-- bcs.w 11846 <compareVars+0xbe>
   117a6:	|  |   add.l d0,d0
   117a8:	|  |   movea.l d0,a0
   117aa:	|  |   adda.l #71606,a0
   117b0:	|  |   move.w (a0),d0
   117b2:	|  |   jmp (117b6 <compareVars+0x2e>,pc,d0.w)
   117b6:	|  |   ori.b #-112,(a4)
   117ba:	|  |   ori.l #5243024,(a0)
   117c0:	|  |   ori.l #7733392,(a0)
   117c6:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   117cc:	|  |   move.l d0,(sp)
			break;
   117ce:	+--|-- bra.w 1185e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   117d2:	|  |   move.l 12(sp),d1
   117d6:	|  |   move.l 20(sp),d0
   117da:	|  |   cmp.l d1,d0
   117dc:	|  |   seq d0
   117de:	|  |   neg.b d0
   117e0:	|  |   move.b d0,d0
   117e2:	|  |   andi.l #255,d0
   117e8:	|  |   move.l d0,(sp)
			break;
   117ea:	+--|-- bra.s 1185e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   117ec:	|  |   move.l 12(sp),d1
   117f0:	|  |   move.l 20(sp),d0
   117f4:	|  |   cmp.l d1,d0
   117f6:	|  |   seq d0
   117f8:	|  |   neg.b d0
   117fa:	|  |   move.b d0,d0
   117fc:	|  |   andi.l #255,d0
   11802:	|  |   move.l d0,(sp)
			break;
   11804:	+--|-- bra.s 1185e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   11806:	|  |   move.l 20(sp),d1
   1180a:	|  |   move.l 12(sp),d0
   1180e:	|  |   move.l d1,-(sp)
   11810:	|  |   move.l d0,-(sp)
   11812:	|  |   jsr 1120a <strcmp>
   11818:	|  |   addq.l #8,sp
   1181a:	|  |   tst.l d0
   1181c:	|  |   seq d0
   1181e:	|  |   neg.b d0
   11820:	|  |   move.b d0,d0
   11822:	|  |   andi.l #255,d0
   11828:	|  |   move.l d0,(sp)
			break;
   1182a:	+--|-- bra.s 1185e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1182c:	|  |   move.l 12(sp),d1
   11830:	|  |   move.l 20(sp),d0
   11834:	|  |   cmp.l d1,d0
   11836:	|  |   seq d0
   11838:	|  |   neg.b d0
   1183a:	|  |   move.b d0,d0
   1183c:	|  |   andi.l #255,d0
   11842:	|  |   move.l d0,(sp)
			break;
   11844:	+--|-- bra.s 1185e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   11846:	|  \-> move.l 12(sp),d1
   1184a:	|      move.l 20(sp),d0
   1184e:	|      cmp.l d1,d0
   11850:	|      seq d0
   11852:	|      neg.b d0
   11854:	|      move.b d0,d0
   11856:	|      andi.l #255,d0
   1185c:	|      move.l d0,(sp)
		}
	}
	return re;
   1185e:	\----> move.l (sp),d0
}
   11860:	       addq.l #4,sp
   11862:	       rts

00011864 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   11864:	             lea -16(sp),sp
   11868:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1186a:	             movea.l 28(sp),a0
   1186e:	             moveq #6,d0
   11870:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11872:	             moveq #12,d0
   11874:	             move.l d0,12(sp)
   11878:	             clr.l 8(sp)
   1187c:	             move.l 190e8 <SysBase>,d0
   11882:	             movea.l d0,a6
   11884:	             move.l 12(sp),d0
   11888:	             move.l 8(sp),d1
   1188c:	             jsr -684(a6)
   11890:	             move.l d0,4(sp)
   11894:	             move.l 4(sp),d0
   11898:	             movea.l 28(sp),a0
   1189c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   118a0:	             movea.l 28(sp),a0
   118a4:	             move.l 4(a0),d0
   118a8:	         /-- bne.s 118b0 <copyStack+0x4c>
   118aa:	         |   clr.w d0
   118ac:	/--------|-- bra.w 11932 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   118b0:	|        \-> movea.l 28(sp),a0
   118b4:	|            movea.l 4(a0),a0
   118b8:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   118ba:	|            movea.l 28(sp),a0
   118be:	|            movea.l 4(a0),a0
   118c2:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   118c6:	|            movea.l 28(sp),a0
   118ca:	|            movea.l 4(a0),a0
   118ce:	|            moveq #1,d0
   118d0:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   118d4:	|            movea.l 24(sp),a0
   118d8:	|            movea.l 4(a0),a0
   118dc:	|            move.l (a0),16(sp)

	while (a) {
   118e0:	|     /----- bra.s 1192a <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   118e2:	|  /--|----> movea.l 28(sp),a0
   118e6:	|  |  |      move.l 4(a0),d0
   118ea:	|  |  |      move.l d0,d1
   118ec:	|  |  |      move.l 16(sp),d0
   118f0:	|  |  |      move.l d1,-(sp)
   118f2:	|  |  |      move.l d0,-(sp)
   118f4:	|  |  |      jsr 1159a <addVarToStack>
   118fa:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   118fc:	|  |  |      movea.l 28(sp),a0
   11900:	|  |  |      movea.l 4(a0),a0
   11904:	|  |  |      move.l 4(a0),d0
   11908:	|  |  |  /-- bne.s 11920 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1190a:	|  |  |  |   movea.l 28(sp),a0
   1190e:	|  |  |  |   movea.l 4(a0),a1
   11912:	|  |  |  |   movea.l 28(sp),a0
   11916:	|  |  |  |   movea.l 4(a0),a0
   1191a:	|  |  |  |   move.l (a1),d0
   1191c:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   11920:	|  |  |  \-> movea.l 16(sp),a0
   11924:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1192a:	|  |  \----> tst.l 16(sp)
   1192e:	|  \-------- bne.s 118e2 <copyStack+0x7e>
	}

	return TRUE;
   11930:	|            moveq #1,d0
}
   11932:	\----------> movea.l (sp)+,a6
   11934:	             lea 16(sp),sp
   11938:	             rts

0001193a <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1193a:	                lea -20(sp),sp
   1193e:	                move.l a6,-(sp)
   11940:	                move.l 36(sp),d0
   11944:	                move.w d0,d0
   11946:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1194a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   11950:	                clr.l 16(sp)

    while (*huntVar) {
   11954:	   /----------- bra.s 119d2 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   11956:	/--|----------> movea.l 20(sp),a0
   1195a:	|  |            movea.l (a0),a0
   1195c:	|  |            movea.l 28(sp),a1
   11960:	|  |            move.l 4(a1),-(sp)
   11964:	|  |            move.l (a1),-(sp)
   11966:	|  |            move.l 4(a0),-(sp)
   1196a:	|  |            move.l (a0),-(sp)
   1196c:	|  |            jsr 11788 <compareVars>
   11972:	|  |            lea 16(sp),sp
   11976:	|  |            tst.l d0
   11978:	|  |  /-------- beq.s 119c4 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1197a:	|  |  |         movea.l 20(sp),a0
   1197e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   11982:	|  |  |         movea.l 12(sp),a0
   11986:	|  |  |         move.l 8(a0),d0
   1198a:	|  |  |         movea.l 20(sp),a0
   1198e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   11990:	|  |  |         move.l 12(sp),d0
   11994:	|  |  |         move.l d0,-(sp)
   11996:	|  |  |         jsr 11fac <unlinkVar>
   1199c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1199e:	|  |  |         move.l 12(sp),8(sp)
   119a4:	|  |  |         move.l 190e8 <SysBase>,d0
   119aa:	|  |  |         movea.l d0,a6
   119ac:	|  |  |         movea.l 8(sp),a1
   119b0:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   119b4:	|  |  |         tst.w 6(sp)
   119b8:	|  |  |     /-- bne.s 119be <deleteVarFromStack+0x84>
   119ba:	|  |  |     |   moveq #1,d0
   119bc:	|  |  |  /--|-- bra.s 119e0 <deleteVarFromStack+0xa6>
            reply++;
   119be:	|  |  |  |  \-> addq.l #1,16(sp)
   119c2:	|  +--|--|----- bra.s 119d2 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   119c4:	|  |  \--|----> movea.l 20(sp),a0
   119c8:	|  |     |      move.l (a0),d0
   119ca:	|  |     |      move.l d0,d1
   119cc:	|  |     |      addq.l #8,d1
   119ce:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   119d2:	|  \-----|----> movea.l 20(sp),a0
   119d6:	|        |      move.l (a0),d0
   119d8:	\--------|----- bne.w 11956 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   119dc:	         |      move.l 16(sp),d0
}
   119e0:	         \----> movea.l (sp)+,a6
   119e2:	                lea 20(sp),sp
   119e6:	                rts

000119e8 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   119e8:	       movea.l 4(sp),a0
   119ec:	       move.l 4(a0),d0
   119f0:	       cmp.l 8(sp),d0
   119f4:	   /-- bhi.s 119fa <fastArrayGetByIndex+0x12>
   119f6:	   |   moveq #0,d0
   119f8:	/--|-- bra.s 11a08 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   119fa:	|  \-> movea.l 4(sp),a0
   119fe:	|      move.l (a0),d1
   11a00:	|      move.l 8(sp),d0
   11a04:	|      lsl.l #3,d0
   11a06:	|      add.l d1,d0
}
   11a08:	\----> rts

00011a0a <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   11a0a:	                lea -32(sp),sp
   11a0e:	                move.l a6,-(sp)
   11a10:	                move.l a2,-(sp)
    struct persona *p = NULL;
   11a12:	                clr.l 36(sp)

    switch (thisVar->varType) {
   11a16:	                movea.l 44(sp),a0
   11a1a:	                move.l (a0),d0
   11a1c:	                moveq #8,d1
   11a1e:	                cmp.l d0,d1
   11a20:	            /-- beq.s 11a2e <getCostumeFromVar+0x24>
   11a22:	            |   moveq #9,d1
   11a24:	            |   cmp.l d0,d1
   11a26:	   /--------|-- beq.w 11adc <getCostumeFromVar+0xd2>
   11a2a:	/--|--------|-- bra.w 11ae6 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   11a2e:	|  |        \-> moveq #8,d0
   11a30:	|  |            move.l d0,28(sp)
   11a34:	|  |            clr.l 24(sp)
   11a38:	|  |            move.l 190e8 <SysBase>,d0
   11a3e:	|  |            movea.l d0,a6
   11a40:	|  |            move.l 28(sp),d0
   11a44:	|  |            move.l 24(sp),d1
   11a48:	|  |            jsr -684(a6)
   11a4c:	|  |            move.l d0,20(sp)
   11a50:	|  |            move.l 20(sp),d0
   11a54:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   11a58:	|  |        /-- bne.s 11a60 <getCostumeFromVar+0x56>
   11a5a:	|  |        |   moveq #0,d0
   11a5c:	|  |  /-----|-- bra.w 11b10 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   11a60:	|  |  |     \-> movea.l 36(sp),a0
   11a64:	|  |  |         moveq #1,d1
   11a66:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   11a6a:	|  |  |         moveq #12,d0
   11a6c:	|  |  |         move.l d0,16(sp)
   11a70:	|  |  |         clr.l 12(sp)
   11a74:	|  |  |         move.l 190e8 <SysBase>,d0
   11a7a:	|  |  |         movea.l d0,a6
   11a7c:	|  |  |         move.l 16(sp),d0
   11a80:	|  |  |         move.l 12(sp),d1
   11a84:	|  |  |         jsr -684(a6)
   11a88:	|  |  |         move.l d0,8(sp)
   11a8c:	|  |  |         move.l 8(sp),d0
   11a90:	|  |  |         movea.l 36(sp),a0
   11a94:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   11a96:	|  |  |         movea.l 36(sp),a0
   11a9a:	|  |  |         move.l (a0),d0
   11a9c:	|  |  |     /-- bne.s 11aa2 <getCostumeFromVar+0x98>
   11a9e:	|  |  |     |   moveq #0,d0
   11aa0:	|  |  +-----|-- bra.s 11b10 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   11aa2:	|  |  |     \-> clr.l 32(sp)
   11aa6:	|  |  |     /-- bra.s 11ad2 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   11aa8:	|  |  |  /--|-> movea.l 44(sp),a0
   11aac:	|  |  |  |  |   move.l 4(a0),d0
   11ab0:	|  |  |  |  |   movea.l 36(sp),a0
   11ab4:	|  |  |  |  |   movea.l (a0),a0
   11ab6:	|  |  |  |  |   move.l 32(sp),d1
   11aba:	|  |  |  |  |   add.l d1,d1
   11abc:	|  |  |  |  |   add.l d1,d1
   11abe:	|  |  |  |  |   lea (0,a0,d1.l),a2
   11ac2:	|  |  |  |  |   move.l d0,-(sp)
   11ac4:	|  |  |  |  |   jsr 6e2e <copyAnim>
   11aca:	|  |  |  |  |   addq.l #4,sp
   11acc:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   11ace:	|  |  |  |  |   addq.l #1,32(sp)
   11ad2:	|  |  |  |  \-> moveq #2,d1
   11ad4:	|  |  |  |      cmp.l 32(sp),d1
   11ad8:	|  |  |  \----- bge.s 11aa8 <getCostumeFromVar+0x9e>
            }
            break;
   11ada:	|  |  |     /-- bra.s 11b0c <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   11adc:	|  \--|-----|-> movea.l 44(sp),a0
   11ae0:	|     |     |   move.l 4(a0),d0
   11ae4:	|     +-----|-- bra.s 11b10 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11ae6:	\-----|-----|-> movea.l 44(sp),a0
   11aea:	      |     |   move.l (a0),d0
   11aec:	      |     |   add.l d0,d0
   11aee:	      |     |   movea.l d0,a1
   11af0:	      |     |   adda.l d0,a1
   11af2:	      |     |   lea 18fde <typeName>,a0
   11af8:	      |     |   move.l (0,a1,a0.l),d0
   11afc:	      |     |   move.l d0,-(sp)
   11afe:	      |     |   pea 166a3 <custom.c.177df80b+0x19ca>
   11b04:	      |     |   jsr 13da6 <KPrintF>
   11b0a:	      |     |   addq.l #8,sp
    }

    return p;
   11b0c:	      |     \-> move.l 36(sp),d0
}
   11b10:	      \-------> movea.l (sp)+,a2
   11b12:	                movea.l (sp)+,a6
   11b14:	                lea 32(sp),sp
   11b18:	                rts

00011b1a <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   11b1a:	                lea -96(sp),sp
   11b1e:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   11b22:	                move.l 116(sp),-(sp)
   11b26:	                pea 166db <custom.c.177df80b+0x1a02>
   11b2c:	                jsr 1128a <joinStrings>
   11b32:	                addq.l #8,sp
   11b34:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   11b38:	            /-- bne.s 11b40 <getSavedGamesStack+0x26>
   11b3a:	            |   clr.w d0
   11b3c:	/-----------|-- bra.w 11d54 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   11b40:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   11b44:	|               move.l #91869,98(sp)
   11b4c:	|               moveq #-2,d0
   11b4e:	|               move.l d0,94(sp)
   11b52:	|               move.l 190f0 <DOSBase>,d0
   11b58:	|               movea.l d0,a6
   11b5a:	|               move.l 98(sp),d1
   11b5e:	|               move.l 94(sp),d2
   11b62:	|               jsr -84(a6)
   11b66:	|               move.l d0,90(sp)
   11b6a:	|               move.l 90(sp),d0
   11b6e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   11b72:	|           /-- bne.s 11b7a <getSavedGamesStack+0x60>
   11b74:	|           |   clr.w d0
   11b76:	+-----------|-- bra.w 11d54 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   11b7a:	|           \-> move.l #260,82(sp)
   11b82:	|               move.l #65536,78(sp)
   11b8a:	|               move.l 190e8 <SysBase>,d0
   11b90:	|               movea.l d0,a6
   11b92:	|               move.l 82(sp),d0
   11b96:	|               move.l 78(sp),d1
   11b9a:	|               jsr -684(a6)
   11b9e:	|               move.l d0,74(sp)
   11ba2:	|               move.l 74(sp),d0
   11ba6:	|               move.l d0,70(sp)
	if (!fib) {
   11baa:	|           /-- bne.s 11bc8 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   11bac:	|           |   move.l 86(sp),22(sp)
   11bb2:	|           |   move.l 190f0 <DOSBase>,d0
   11bb8:	|           |   movea.l d0,a6
   11bba:	|           |   move.l 22(sp),d1
   11bbe:	|           |   jsr -90(a6)
		return FALSE;
   11bc2:	|           |   clr.w d0
   11bc4:	+-----------|-- bra.w 11d54 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   11bc8:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   11bcc:	|               move.l 86(sp),66(sp)
   11bd2:	|               move.l 70(sp),62(sp)
   11bd8:	|               move.l 190f0 <DOSBase>,d0
   11bde:	|               movea.l d0,a6
   11be0:	|               move.l 66(sp),d1
   11be4:	|               move.l 62(sp),d2
   11be8:	|               jsr -102(a6)
   11bec:	|               move.l d0,58(sp)
   11bf0:	|               move.l 58(sp),d0
   11bf4:	|  /----------- beq.w 11d08 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   11bf8:	|  |        /-- bra.w 11cd4 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   11bfc:	|  |  /-----|-> move.l 70(sp),d2
   11c00:	|  |  |     |   addq.l #8,d2
   11c02:	|  |  |     |   move.l 70(sp),d0
   11c06:	|  |  |     |   addq.l #8,d0
   11c08:	|  |  |     |   move.l d0,-(sp)
   11c0a:	|  |  |     |   jsr 1124a <strlen>
   11c10:	|  |  |     |   addq.l #4,sp
   11c12:	|  |  |     |   move.l d0,d3
   11c14:	|  |  |     |   move.l 116(sp),-(sp)
   11c18:	|  |  |     |   jsr 1124a <strlen>
   11c1e:	|  |  |     |   addq.l #4,sp
   11c20:	|  |  |     |   move.l d3,d1
   11c22:	|  |  |     |   sub.l d0,d1
   11c24:	|  |  |     |   move.l d2,d0
   11c26:	|  |  |     |   add.l d1,d0
   11c28:	|  |  |     |   move.l 116(sp),-(sp)
   11c2c:	|  |  |     |   move.l d0,-(sp)
   11c2e:	|  |  |     |   jsr 1120a <strcmp>
   11c34:	|  |  |     |   addq.l #8,sp
   11c36:	|  |  |     |   tst.l d0
   11c38:	|  |  |     +-- bne.w 11cd4 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   11c3c:	|  |  |     |   move.l 70(sp),d0
   11c40:	|  |  |     |   addq.l #8,d0
   11c42:	|  |  |     |   move.l d0,-(sp)
   11c44:	|  |  |     |   jsr 1124a <strlen>
   11c4a:	|  |  |     |   addq.l #4,sp
   11c4c:	|  |  |     |   move.l d0,d2
   11c4e:	|  |  |     |   move.l 116(sp),-(sp)
   11c52:	|  |  |     |   jsr 1124a <strlen>
   11c58:	|  |  |     |   addq.l #4,sp
   11c5a:	|  |  |     |   move.l d0,d1
   11c5c:	|  |  |     |   move.l d2,d0
   11c5e:	|  |  |     |   sub.l d1,d0
   11c60:	|  |  |     |   movea.l 70(sp),a0
   11c64:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   11c68:	|  |  |     |   move.l 70(sp),d0
   11c6c:	|  |  |     |   addq.l #8,d0
   11c6e:	|  |  |     |   move.l d0,-(sp)
   11c70:	|  |  |     |   jsr 118 <decodeFilename>
   11c76:	|  |  |     |   addq.l #4,sp
   11c78:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   11c7c:	|  |  |     |   move.l 42(sp),-(sp)
   11c80:	|  |  |     |   lea 18(sp),a0
   11c84:	|  |  |     |   move.l a0,-(sp)
   11c86:	|  |  |     |   jsr 11f80 <makeTextVar>
   11c8c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   11c8e:	|  |  |     |   move.l 42(sp),38(sp)
   11c94:	|  |  |     |   move.l 190e8 <SysBase>,d0
   11c9a:	|  |  |     |   movea.l d0,a6
   11c9c:	|  |  |     |   movea.l 38(sp),a1
   11ca0:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   11ca4:	|  |  |     |   move.l 112(sp),d0
   11ca8:	|  |  |     |   move.l d0,-(sp)
   11caa:	|  |  |     |   lea 18(sp),a0
   11cae:	|  |  |     |   move.l a0,-(sp)
   11cb0:	|  |  |     |   jsr 1159a <addVarToStack>
   11cb6:	|  |  |     |   addq.l #8,sp
   11cb8:	|  |  |     |   tst.w d0
   11cba:	|  |  |  /--|-- beq.s 11d0c <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   11cbc:	|  |  |  |  |   movea.l 112(sp),a0
   11cc0:	|  |  |  |  |   move.l 4(a0),d0
   11cc4:	|  |  |  |  +-- bne.s 11cd4 <getSavedGamesStack+0x1ba>
   11cc6:	|  |  |  |  |   movea.l 112(sp),a0
   11cca:	|  |  |  |  |   move.l (a0),d0
   11ccc:	|  |  |  |  |   movea.l 112(sp),a0
   11cd0:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   11cd4:	|  |  |  |  \-> move.l 86(sp),54(sp)
   11cda:	|  |  |  |      move.l 70(sp),50(sp)
   11ce0:	|  |  |  |      move.l 190f0 <DOSBase>,d0
   11ce6:	|  |  |  |      movea.l d0,a6
   11ce8:	|  |  |  |      move.l 54(sp),d1
   11cec:	|  |  |  |      move.l 50(sp),d2
   11cf0:	|  |  |  |      jsr -108(a6)
   11cf4:	|  |  |  |      move.l d0,46(sp)
   11cf8:	|  |  |  |      move.l 46(sp),d0
   11cfc:	|  |  \--|----- bne.w 11bfc <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   11d00:	|  |     |      move.w #1,106(sp)
   11d06:	|  |     |  /-- bra.s 11d0e <getSavedGamesStack+0x1f4>
	}

cleanup:
   11d08:	|  \-----|--|-> nop
   11d0a:	|        |  +-- bra.s 11d0e <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   11d0c:	|        \--|-> nop
	FreeVec(fib);
   11d0e:	|           \-> move.l 70(sp),34(sp)
   11d14:	|               move.l 190e8 <SysBase>,d0
   11d1a:	|               movea.l d0,a6
   11d1c:	|               movea.l 34(sp),a1
   11d20:	|               jsr -690(a6)
	UnLock(dirLock);
   11d24:	|               move.l 86(sp),30(sp)
   11d2a:	|               move.l 190f0 <DOSBase>,d0
   11d30:	|               movea.l d0,a6
   11d32:	|               move.l 30(sp),d1
   11d36:	|               jsr -90(a6)
	FreeVec(pattern);
   11d3a:	|               move.l 102(sp),26(sp)
   11d40:	|               move.l 190e8 <SysBase>,d0
   11d46:	|               movea.l d0,a6
   11d48:	|               movea.l 26(sp),a1
   11d4c:	|               jsr -690(a6)
	return result;
   11d50:	|               move.w 106(sp),d0
}
   11d54:	\-------------> movem.l (sp)+,d2-d3/a6
   11d58:	                lea 96(sp),sp
   11d5c:	                rts

00011d5e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   11d5e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   11d60:	       movea.l 20(sp),a0
   11d64:	       move.l (a0),d0
   11d66:	       cmp.l 16(sp),d0
   11d6a:	/----- beq.s 11dce <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   11d6c:	|      move.l 16(sp),d0
   11d70:	|      add.l d0,d0
   11d72:	|      movea.l d0,a1
   11d74:	|      adda.l d0,a1
   11d76:	|      lea 18fde <typeName>,a0
   11d7c:	|      move.l (0,a1,a0.l),d0
   11d80:	|      move.l d0,-(sp)
   11d82:	|      pea 166df <custom.c.177df80b+0x1a06>
   11d88:	|      jsr 1128a <joinStrings>
   11d8e:	|      addq.l #8,sp
   11d90:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   11d94:	|      movea.l 20(sp),a0
   11d98:	|      move.l (a0),d0
   11d9a:	|      add.l d0,d0
   11d9c:	|      movea.l d0,a1
   11d9e:	|      adda.l d0,a1
   11da0:	|      lea 18fde <typeName>,a0
   11da6:	|      move.l (0,a1,a0.l),d0
   11daa:	|      move.l d0,-(sp)
   11dac:	|      pea 16721 <custom.c.177df80b+0x1a48>
   11db2:	|      jsr 1128a <joinStrings>
   11db8:	|      addq.l #8,sp
   11dba:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   11dbc:	|      move.l (sp),-(sp)
   11dbe:	|      move.l 8(sp),-(sp)
   11dc2:	|      jsr 13da6 <KPrintF>
   11dc8:	|      addq.l #8,sp

		return FALSE;
   11dca:	|      clr.w d0
   11dcc:	|  /-- bra.s 11dde <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   11dce:	\--|-> movea.l 20(sp),a0
   11dd2:	   |   move.l 4(a0),d0
   11dd6:	   |   movea.l 12(sp),a0
   11dda:	   |   move.l d0,(a0)
	return TRUE;
   11ddc:	   |   moveq #1,d0
}
   11dde:	   \-> addq.l #8,sp
   11de0:	       rts

00011de2 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   11de2:	move.l 8(sp),-(sp)
   11de6:	jsr 476a <getNumberedString>
   11dec:	addq.l #4,sp
   11dee:	move.l d0,-(sp)
   11df0:	move.l 8(sp),-(sp)
   11df4:	jsr 11f80 <makeTextVar>
   11dfa:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   11dfc:	movea.l 4(sp),a0
   11e00:	move.l 4(a0),d0
   11e04:	sne d0
   11e06:	neg.b d0
   11e08:	move.b d0,d0
   11e0a:	andi.w #255,d0
}
   11e0e:	rts

00011e10 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   11e10:	          subq.l #8,sp
    int size = stackSize(stacky);
   11e12:	          move.l 16(sp),-(sp)
   11e16:	          jsr 126be <stackSize>
   11e1c:	          addq.l #4,sp
   11e1e:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   11e22:	          move.l 4(sp),-(sp)
   11e26:	          move.l 16(sp),-(sp)
   11e2a:	          jsr 11e7a <makeFastArraySize>
   11e30:	          addq.l #8,sp
   11e32:	          tst.w d0
   11e34:	      /-- bne.s 11e3a <makeFastArrayFromStack+0x2a>
   11e36:	      |   clr.w d0
   11e38:	/-----|-- bra.s 11e76 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   11e3a:	|     \-> movea.l 16(sp),a0
   11e3e:	|         move.l (a0),(sp)
    size = 0;
   11e40:	|         clr.l 4(sp)
    while (allV) {
   11e44:	|     /-- bra.s 11e70 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   11e46:	|  /--|-> movea.l 12(sp),a0
   11e4a:	|  |  |   movea.l 4(a0),a0
   11e4e:	|  |  |   move.l (a0),d1
   11e50:	|  |  |   move.l 4(sp),d0
   11e54:	|  |  |   lsl.l #3,d0
   11e56:	|  |  |   add.l d0,d1
   11e58:	|  |  |   move.l (sp),d0
   11e5a:	|  |  |   move.l d1,-(sp)
   11e5c:	|  |  |   move.l d0,-(sp)
   11e5e:	|  |  |   jsr 120fc <copyMain>
   11e64:	|  |  |   addq.l #8,sp
        size++;
   11e66:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   11e6a:	|  |  |   movea.l (sp),a0
   11e6c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   11e70:	|  |  \-> tst.l (sp)
   11e72:	|  \----- bne.s 11e46 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   11e74:	|         moveq #1,d0
}
   11e76:	\-------> addq.l #8,sp
   11e78:	          rts

00011e7a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   11e7a:	          lea -28(sp),sp
   11e7e:	          move.l a6,-(sp)
    if (size < 0) {
   11e80:	          tst.l 40(sp)
   11e84:	      /-- bge.s 11e9a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   11e86:	      |   pea 16766 <custom.c.177df80b+0x1a8d>
   11e8c:	      |   jsr 13da6 <KPrintF>
   11e92:	      |   addq.l #4,sp
		return FALSE;
   11e94:	      |   clr.w d0
   11e96:	/-----|-- bra.w 11f78 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   11e9a:	|     \-> move.l 36(sp),-(sp)
   11e9e:	|         jsr 11fac <unlinkVar>
   11ea4:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   11ea6:	|         movea.l 36(sp),a0
   11eaa:	|         moveq #10,d0
   11eac:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   11eae:	|         moveq #12,d0
   11eb0:	|         move.l d0,24(sp)
   11eb4:	|         clr.l 20(sp)
   11eb8:	|         move.l 190e8 <SysBase>,d0
   11ebe:	|         movea.l d0,a6
   11ec0:	|         move.l 24(sp),d0
   11ec4:	|         move.l 20(sp),d1
   11ec8:	|         jsr -684(a6)
   11ecc:	|         move.l d0,16(sp)
   11ed0:	|         move.l 16(sp),d0
   11ed4:	|         movea.l 36(sp),a0
   11ed8:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   11edc:	|         movea.l 36(sp),a0
   11ee0:	|         move.l 4(a0),d0
   11ee4:	|     /-- bne.s 11eec <makeFastArraySize+0x72>
   11ee6:	|     |   clr.w d0
   11ee8:	+-----|-- bra.w 11f78 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   11eec:	|     \-> move.l 40(sp),d0
   11ef0:	|         lsl.l #3,d0
   11ef2:	|         move.l d0,12(sp)
   11ef6:	|         clr.l 8(sp)
   11efa:	|         move.l 190e8 <SysBase>,d0
   11f00:	|         movea.l d0,a6
   11f02:	|         move.l 12(sp),d0
   11f06:	|         move.l 8(sp),d1
   11f0a:	|         jsr -684(a6)
   11f0e:	|         move.l d0,4(sp)
   11f12:	|         move.l 4(sp),d0
   11f16:	|         movea.l 36(sp),a0
   11f1a:	|         movea.l 4(a0),a0
   11f1e:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   11f20:	|         movea.l 36(sp),a0
   11f24:	|         movea.l 4(a0),a0
   11f28:	|         move.l (a0),d0
   11f2a:	|     /-- bne.s 11f30 <makeFastArraySize+0xb6>
   11f2c:	|     |   clr.w d0
   11f2e:	+-----|-- bra.s 11f78 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   11f30:	|     \-> clr.l 28(sp)
   11f34:	|     /-- bra.s 11f50 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   11f36:	|  /--|-> movea.l 36(sp),a0
   11f3a:	|  |  |   movea.l 4(a0),a0
   11f3e:	|  |  |   move.l (a0),d1
   11f40:	|  |  |   move.l 28(sp),d0
   11f44:	|  |  |   lsl.l #3,d0
   11f46:	|  |  |   movea.l d1,a0
   11f48:	|  |  |   adda.l d0,a0
   11f4a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   11f4c:	|  |  |   addq.l #1,28(sp)
   11f50:	|  |  \-> move.l 28(sp),d0
   11f54:	|  |      cmp.l 40(sp),d0
   11f58:	|  \----- blt.s 11f36 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   11f5a:	|         movea.l 36(sp),a0
   11f5e:	|         movea.l 4(a0),a0
   11f62:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   11f68:	|         movea.l 36(sp),a0
   11f6c:	|         movea.l 4(a0),a0
   11f70:	|         moveq #1,d0
   11f72:	|         move.l d0,8(a0)
    return TRUE;
   11f76:	|         moveq #1,d0
}
   11f78:	\-------> movea.l (sp)+,a6
   11f7a:	          lea 28(sp),sp
   11f7e:	          rts

00011f80 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   11f80:	move.l 4(sp),-(sp)
   11f84:	jsr 11fac <unlinkVar>
   11f8a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   11f8c:	movea.l 4(sp),a0
   11f90:	moveq #3,d0
   11f92:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   11f94:	move.l 8(sp),-(sp)
   11f98:	jsr b8 <copyString>
   11f9e:	addq.l #4,sp
   11fa0:	movea.l 4(sp),a0
   11fa4:	move.l d0,4(a0)
}
   11fa8:	nop
   11faa:	rts

00011fac <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   11fac:	                      lea -16(sp),sp
   11fb0:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11fb2:	                      movea.l 24(sp),a0
   11fb6:	                      move.l (a0),d0
   11fb8:	                      moveq #10,d1
   11fba:	                      cmp.l d0,d1
   11fbc:	            /-------- beq.w 12074 <unlinkVar+0xc8>
   11fc0:	            |         moveq #10,d1
   11fc2:	            |         cmp.l d0,d1
   11fc4:	/-----------|-------- bcs.w 120e8 <unlinkVar+0x13c>
   11fc8:	|           |         moveq #8,d1
   11fca:	|           |         cmp.l d0,d1
   11fcc:	|  /--------|-------- beq.w 120d4 <unlinkVar+0x128>
   11fd0:	|  |        |         moveq #8,d1
   11fd2:	|  |        |         cmp.l d0,d1
   11fd4:	+--|--------|-------- bcs.w 120e8 <unlinkVar+0x13c>
   11fd8:	|  |        |         moveq #3,d1
   11fda:	|  |        |         cmp.l d0,d1
   11fdc:	|  |        |     /-- beq.s 11fe8 <unlinkVar+0x3c>
   11fde:	|  |        |     |   moveq #6,d1
   11fe0:	|  |        |     |   cmp.l d0,d1
   11fe2:	|  |        |  /--|-- beq.s 1200e <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11fe4:	+--|--------|--|--|-- bra.w 120e8 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   11fe8:	|  |        |  |  \-> movea.l 24(sp),a0
   11fec:	|  |        |  |      move.l 4(a0),4(sp)
   11ff2:	|  |        |  |      move.l 190e8 <SysBase>,d0
   11ff8:	|  |        |  |      movea.l d0,a6
   11ffa:	|  |        |  |      movea.l 4(sp),a1
   11ffe:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   12002:	|  |        |  |      movea.l 24(sp),a0
   12006:	|  |        |  |      clr.l 4(a0)
		break;
   1200a:	|  |  /-----|--|----- bra.w 120f2 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1200e:	|  |  |     |  \----> movea.l 24(sp),a0
   12012:	|  |  |     |         movea.l 4(a0),a0
   12016:	|  |  |     |         move.l 8(a0),d0
   1201a:	|  |  |     |         subq.l #1,d0
   1201c:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12020:	|  |  |     |         movea.l 24(sp),a0
   12024:	|  |  |     |         movea.l 4(a0),a0
   12028:	|  |  |     |         move.l 8(a0),d0
   1202c:	|  |  |  /--|-------- bgt.w 120ec <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   12030:	|  |  |  |  |     /-- bra.s 12044 <unlinkVar+0x98>
   12032:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   12036:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1203a:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1203c:	|  |  |  |  |  |  |   jsr 126e2 <trimStack>
   12042:	|  |  |  |  |  |  |   addq.l #4,sp
   12044:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   12048:	|  |  |  |  |  |      movea.l 4(a0),a0
   1204c:	|  |  |  |  |  |      move.l (a0),d0
   1204e:	|  |  |  |  |  \----- bne.s 12032 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   12050:	|  |  |  |  |         movea.l 24(sp),a0
   12054:	|  |  |  |  |         move.l 4(a0),8(sp)
   1205a:	|  |  |  |  |         move.l 190e8 <SysBase>,d0
   12060:	|  |  |  |  |         movea.l d0,a6
   12062:	|  |  |  |  |         movea.l 8(sp),a1
   12066:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1206a:	|  |  |  |  |         movea.l 24(sp),a0
   1206e:	|  |  |  |  |         clr.l 4(a0)
		break;
   12072:	|  |  |  +--|-------- bra.s 120ec <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   12074:	|  |  |  |  \-------> movea.l 24(sp),a0
   12078:	|  |  |  |            movea.l 4(a0),a0
   1207c:	|  |  |  |            move.l 8(a0),d0
   12080:	|  |  |  |            subq.l #1,d0
   12082:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12086:	|  |  |  |            movea.l 24(sp),a0
   1208a:	|  |  |  |            movea.l 4(a0),a0
   1208e:	|  |  |  |            move.l 8(a0),d0
   12092:	|  |  |  |        /-- bgt.s 120f0 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   12094:	|  |  |  |        |   movea.l 24(sp),a0
   12098:	|  |  |  |        |   movea.l 4(a0),a0
   1209c:	|  |  |  |        |   move.l (a0),16(sp)
   120a0:	|  |  |  |        |   move.l 190e8 <SysBase>,d0
   120a6:	|  |  |  |        |   movea.l d0,a6
   120a8:	|  |  |  |        |   movea.l 16(sp),a1
   120ac:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   120b0:	|  |  |  |        |   movea.l 24(sp),a0
   120b4:	|  |  |  |        |   move.l 4(a0),12(sp)
   120ba:	|  |  |  |        |   move.l 190e8 <SysBase>,d0
   120c0:	|  |  |  |        |   movea.l d0,a6
   120c2:	|  |  |  |        |   movea.l 12(sp),a1
   120c6:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   120ca:	|  |  |  |        |   movea.l 24(sp),a0
   120ce:	|  |  |  |        |   clr.l 4(a0)
		break;
   120d2:	|  |  |  |        +-- bra.s 120f0 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   120d4:	|  \--|--|--------|-> movea.l 24(sp),a0
   120d8:	|     |  |        |   move.l 4(a0),d0
   120dc:	|     |  |        |   move.l d0,-(sp)
   120de:	|     |  |        |   jsr 71ea <deleteAnim>
   120e4:	|     |  |        |   addq.l #4,sp
		break;
   120e6:	|     +--|--------|-- bra.s 120f2 <unlinkVar+0x146>
		break;
   120e8:	\-----|--|--------|-> nop
   120ea:	      +--|--------|-- bra.s 120f2 <unlinkVar+0x146>
		break;
   120ec:	      |  \--------|-> nop
   120ee:	      +-----------|-- bra.s 120f2 <unlinkVar+0x146>
		break;
   120f0:	      |           \-> nop
	}
}
   120f2:	      \-------------> nop
   120f4:	                      movea.l (sp)+,a6
   120f6:	                      lea 16(sp),sp
   120fa:	                      rts

000120fc <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   120fc:	       movea.l 4(sp),a0
   12100:	       move.l (a0),d0
   12102:	       movea.l 8(sp),a0
   12106:	       move.l d0,(a0)
	switch (to->varType) {
   12108:	       movea.l 8(sp),a0
   1210c:	       move.l (a0),d0
   1210e:	       moveq #10,d1
   12110:	       cmp.l d0,d1
   12112:	/----- bcs.w 12204 <copyMain+0x108>
   12116:	|      add.l d0,d0
   12118:	|      movea.l d0,a0
   1211a:	|      adda.l #74022,a0
   12120:	|      move.w (a0),d0
   12122:	|      jmp (12126 <copyMain+0x2a>,pc,d0.w)
   12126:	|      .short 0x00da
   12128:	|      ori.b #22,(a6)
   1212c:	|      ori.w #22,(a4)
   12130:	|      ori.b #-126,(a6)
   12134:	|      ori.b #-68,(a6)
   12138:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   12140:	|      move.l 4(a0),d0
   12144:	|      movea.l 8(sp),a0
   12148:	|      move.l d0,4(a0)
		return TRUE;
   1214c:	|      moveq #1,d0
   1214e:	|  /-- bra.w 12216 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   12152:	|  |   movea.l 4(sp),a0
   12156:	|  |   move.l 4(a0),d0
   1215a:	|  |   movea.l 8(sp),a0
   1215e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   12162:	|  |   movea.l 8(sp),a0
   12166:	|  |   movea.l 4(a0),a0
   1216a:	|  |   move.l 8(a0),d0
   1216e:	|  |   addq.l #1,d0
   12170:	|  |   move.l d0,8(a0)
		return TRUE;
   12174:	|  |   moveq #1,d0
   12176:	|  +-- bra.w 12216 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1217a:	|  |   movea.l 4(sp),a0
   1217e:	|  |   move.l 4(a0),d0
   12182:	|  |   move.l d0,-(sp)
   12184:	|  |   jsr b8 <copyString>
   1218a:	|  |   addq.l #4,sp
   1218c:	|  |   movea.l 8(sp),a0
   12190:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   12194:	|  |   movea.l 8(sp),a0
   12198:	|  |   move.l 4(a0),d0
   1219c:	|  |   sne d0
   1219e:	|  |   neg.b d0
   121a0:	|  |   move.b d0,d0
   121a2:	|  |   andi.w #255,d0
   121a6:	|  +-- bra.s 12216 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   121a8:	|  |   movea.l 4(sp),a0
   121ac:	|  |   move.l 4(a0),d0
   121b0:	|  |   movea.l 8(sp),a0
   121b4:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   121b8:	|  |   movea.l 8(sp),a0
   121bc:	|  |   movea.l 4(a0),a0
   121c0:	|  |   move.l 8(a0),d0
   121c4:	|  |   addq.l #1,d0
   121c6:	|  |   move.l d0,8(a0)
		return TRUE;
   121ca:	|  |   moveq #1,d0
   121cc:	|  +-- bra.s 12216 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   121ce:	|  |   movea.l 4(sp),a0
   121d2:	|  |   move.l 4(a0),d0
   121d6:	|  |   movea.l 8(sp),a0
   121da:	|  |   move.l d0,4(a0)
		return TRUE;
   121de:	|  |   moveq #1,d0
   121e0:	|  +-- bra.s 12216 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   121e2:	|  |   movea.l 4(sp),a0
   121e6:	|  |   move.l 4(a0),d0
   121ea:	|  |   move.l d0,-(sp)
   121ec:	|  |   jsr 6e2e <copyAnim>
   121f2:	|  |   addq.l #4,sp
   121f4:	|  |   movea.l 8(sp),a0
   121f8:	|  |   move.l d0,4(a0)
		return TRUE;
   121fc:	|  |   moveq #1,d0
   121fe:	|  +-- bra.s 12216 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   12200:	|  |   moveq #1,d0
   12202:	|  +-- bra.s 12216 <copyMain+0x11a>

		default:
		break;
   12204:	\--|-> nop
	}
	KPrintF("Unknown value type");
   12206:	   |   pea 167b7 <custom.c.177df80b+0x1ade>
   1220c:	   |   jsr 13da6 <KPrintF>
   12212:	   |   addq.l #4,sp
	return FALSE;
   12214:	   |   clr.w d0
}
   12216:	   \-> rts

00012218 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   12218:	move.l 8(sp),-(sp)
   1221c:	jsr 11fac <unlinkVar>
   12222:	addq.l #4,sp
	return copyMain(from, to);
   12224:	move.l 8(sp),-(sp)
   12228:	move.l 8(sp),-(sp)
   1222c:	jsr 120fc <copyMain>
   12232:	addq.l #8,sp
}
   12234:	rts

00012236 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   12236:	       movea.l 4(sp),a0
   1223a:	       move.l (a0),d0
   1223c:	       moveq #8,d1
   1223e:	       cmp.l d0,d1
   12240:	   /-- bne.s 12256 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   12242:	   |   movea.l 4(sp),a0
   12246:	   |   move.l 4(a0),d0
   1224a:	   |   move.l d0,-(sp)
   1224c:	   |   jsr 6e2e <copyAnim>
   12252:	   |   addq.l #4,sp
   12254:	/--|-- bra.s 1229c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   12256:	|  \-> movea.l 4(sp),a0
   1225a:	|      move.l (a0),d0
   1225c:	|      moveq #1,d1
   1225e:	|      cmp.l d0,d1
   12260:	|  /-- bne.s 12274 <getAnimationFromVar+0x3e>
   12262:	|  |   movea.l 4(sp),a0
   12266:	|  |   move.l 4(a0),d0
   1226a:	|  +-- bne.s 12274 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   1226c:	|  |   jsr 852a <makeNullAnim>
   12272:	+--|-- bra.s 1229c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12274:	|  \-> movea.l 4(sp),a0
   12278:	|      move.l (a0),d0
   1227a:	|      add.l d0,d0
   1227c:	|      movea.l d0,a1
   1227e:	|      adda.l d0,a1
   12280:	|      lea 18fde <typeName>,a0
   12286:	|      move.l (0,a1,a0.l),d0
   1228a:	|      move.l d0,-(sp)
   1228c:	|      pea 166a3 <custom.c.177df80b+0x19ca>
   12292:	|      jsr 13da6 <KPrintF>
   12298:	|      addq.l #8,sp
	return NULL;
   1229a:	|      moveq #0,d0
}
   1229c:	\----> rts

0001229e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1229e:	       movea.l 4(sp),a0
   122a2:	       move.l (a0),d0
   122a4:	       moveq #10,d1
   122a6:	       cmp.l d0,d1
   122a8:	/----- bcs.w 1232e <getBoolean+0x90>
   122ac:	|      add.l d0,d0
   122ae:	|      movea.l d0,a0
   122b0:	|      adda.l #74428,a0
   122b6:	|      move.w (a0),d0
   122b8:	|      jmp (122bc <getBoolean+0x1e>,pc,d0.w)
   122bc:	|      ori.b #26,(a6)
   122c0:	|      ori.w #68,(114,a2,d0.w)
   122c6:	|      ori.w #46,(114,a2,d0.w)
   122cc:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   122d2:	|      clr.w d0
   122d4:	|  /-- bra.s 12332 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   122d6:	|  |   movea.l 4(sp),a0
   122da:	|  |   move.l 4(a0),d0
   122de:	|  |   sne d0
   122e0:	|  |   neg.b d0
   122e2:	|  |   move.b d0,d0
   122e4:	|  |   andi.w #255,d0
   122e8:	|  +-- bra.s 12332 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   122ea:	|  |   movea.l 4(sp),a0
   122ee:	|  |   movea.l 4(a0),a0
   122f2:	|  |   move.l (a0),d0
   122f4:	|  |   sne d0
   122f6:	|  |   neg.b d0
   122f8:	|  |   move.b d0,d0
   122fa:	|  |   andi.w #255,d0
   122fe:	|  +-- bra.s 12332 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   12300:	|  |   movea.l 4(sp),a0
   12304:	|  |   movea.l 4(a0),a0
   12308:	|  |   move.b (a0),d0
   1230a:	|  |   sne d0
   1230c:	|  |   neg.b d0
   1230e:	|  |   move.b d0,d0
   12310:	|  |   andi.w #255,d0
   12314:	|  +-- bra.s 12332 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   12316:	|  |   movea.l 4(sp),a0
   1231a:	|  |   movea.l 4(a0),a0
   1231e:	|  |   move.l 4(a0),d0
   12322:	|  |   sne d0
   12324:	|  |   neg.b d0
   12326:	|  |   move.b d0,d0
   12328:	|  |   andi.w #255,d0
   1232c:	|  +-- bra.s 12332 <getBoolean+0x94>

		default:
		break;
   1232e:	\--|-> nop
	}
	return TRUE;
   12330:	   |   moveq #1,d0
}
   12332:	   \-> rts

00012334 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   12334:	      /----------> lea -76(sp),sp
   12338:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1233a:	      |            movea.l 84(sp),a0
   1233e:	      |            move.l (a0),d0
   12340:	      |            moveq #10,d1
   12342:	      |            cmp.l d0,d1
   12344:	/-----|----------- bcs.w 125e2 <getTextFromAnyVar+0x2ae>
   12348:	|     |            add.l d0,d0
   1234a:	|     |            movea.l d0,a0
   1234c:	|     |            adda.l #74584,a0
   12352:	|     |            move.w (a0),d0
   12354:	|     |            jmp (12358 <getTextFromAnyVar+0x24>,pc,d0.w)
   12358:	|     |            .short 0x028a
   1235a:	|     |            bset d0,(a0)+
   1235c:	|     |            .short 0x028a
   1235e:	|     |            ori.b #-118,(a6)
   12362:	|     |            andi.b #8,ccr
   12366:	|     |            andi.w #650,-(a0)
   1236a:	|     |            .short 0x028a
   1236c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   12372:	|     |            move.l 4(a0),d0
   12376:	|     |            move.l d0,-(sp)
   12378:	|     |            jsr b8 <copyString>
   1237e:	|     |            addq.l #4,sp
   12380:	|  /--|----------- bra.w 12604 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   12384:	|  |  |            pea 167ca <custom.c.177df80b+0x1af1>
   1238a:	|  |  |            jsr b8 <copyString>
   12390:	|  |  |            addq.l #4,sp
   12392:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   12396:	|  |  |            clr.l 72(sp)
   1239a:	|  |  |     /----- bra.w 12444 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1239e:	|  |  |  /--|----> pea 167d0 <custom.c.177df80b+0x1af7>
   123a4:	|  |  |  |  |      move.l 80(sp),-(sp)
   123a8:	|  |  |  |  |      jsr 1128a <joinStrings>
   123ae:	|  |  |  |  |      addq.l #8,sp
   123b0:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   123b4:	|  |  |  |  |  /-- bne.s 123bc <getTextFromAnyVar+0x88>
   123b6:	|  |  |  |  |  |   moveq #0,d0
   123b8:	|  +--|--|--|--|-- bra.w 12604 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   123bc:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   123c2:	|  |  |  |  |      move.l 190e8 <SysBase>,d0
   123c8:	|  |  |  |  |      movea.l d0,a6
   123ca:	|  |  |  |  |      movea.l 56(sp),a1
   123ce:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   123d2:	|  |  |  |  |      movea.l 84(sp),a0
   123d6:	|  |  |  |  |      movea.l 4(a0),a0
   123da:	|  |  |  |  |      move.l (a0),d1
   123dc:	|  |  |  |  |      move.l 72(sp),d0
   123e0:	|  |  |  |  |      lsl.l #3,d0
   123e2:	|  |  |  |  |      add.l d1,d0
   123e4:	|  |  |  |  |      move.l d0,-(sp)
   123e6:	|  |  +--|--|----- jsr 12334 <getTextFromAnyVar>(pc)
   123ea:	|  |  |  |  |      addq.l #4,sp
   123ec:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   123f0:	|  |  |  |  |      move.l 52(sp),-(sp)
   123f4:	|  |  |  |  |      move.l 64(sp),-(sp)
   123f8:	|  |  |  |  |      jsr 1128a <joinStrings>
   123fe:	|  |  |  |  |      addq.l #8,sp
   12400:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   12404:	|  |  |  |  |  /-- bne.s 1240c <getTextFromAnyVar+0xd8>
   12406:	|  |  |  |  |  |   moveq #0,d0
   12408:	|  +--|--|--|--|-- bra.w 12604 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1240c:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   12412:	|  |  |  |  |      move.l 190e8 <SysBase>,d0
   12418:	|  |  |  |  |      movea.l d0,a6
   1241a:	|  |  |  |  |      movea.l 48(sp),a1
   1241e:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   12422:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   12426:	|  |  |  |  |      move.l 60(sp),44(sp)
   1242c:	|  |  |  |  |      move.l 190e8 <SysBase>,d0
   12432:	|  |  |  |  |      movea.l d0,a6
   12434:	|  |  |  |  |      movea.l 44(sp),a1
   12438:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1243c:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   12440:	|  |  |  |  |      addq.l #1,72(sp)
   12444:	|  |  |  |  \----> movea.l 84(sp),a0
   12448:	|  |  |  |         movea.l 4(a0),a0
   1244c:	|  |  |  |         move.l 4(a0),d0
   12450:	|  |  |  |         cmp.l 72(sp),d0
   12454:	|  |  |  \-------- bgt.w 1239e <getTextFromAnyVar+0x6a>
			}
			return builder;
   12458:	|  |  |            move.l 76(sp),d0
   1245c:	|  +--|----------- bra.w 12604 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   12460:	|  |  |            pea 167d2 <custom.c.177df80b+0x1af9>
   12466:	|  |  |            jsr b8 <copyString>
   1246c:	|  |  |            addq.l #4,sp
   1246e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   12472:	|  |  |            movea.l 84(sp),a0
   12476:	|  |  |            movea.l 4(a0),a0
   1247a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1247e:	|  |  |     /----- bra.w 12520 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   12482:	|  |  |  /--|----> pea 167d0 <custom.c.177df80b+0x1af7>
   12488:	|  |  |  |  |      move.l 72(sp),-(sp)
   1248c:	|  |  |  |  |      jsr 1128a <joinStrings>
   12492:	|  |  |  |  |      addq.l #8,sp
   12494:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   12498:	|  |  |  |  |  /-- bne.s 124a0 <getTextFromAnyVar+0x16c>
   1249a:	|  |  |  |  |  |   moveq #0,d0
   1249c:	|  +--|--|--|--|-- bra.w 12604 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   124a0:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   124a6:	|  |  |  |  |      move.l 190e8 <SysBase>,d0
   124ac:	|  |  |  |  |      movea.l d0,a6
   124ae:	|  |  |  |  |      movea.l 32(sp),a1
   124b2:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   124b6:	|  |  |  |  |      move.l 64(sp),d0
   124ba:	|  |  |  |  |      move.l d0,-(sp)
   124bc:	|  |  \--|--|----- jsr 12334 <getTextFromAnyVar>(pc)
   124c0:	|  |     |  |      addq.l #4,sp
   124c2:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   124c6:	|  |     |  |      move.l 28(sp),-(sp)
   124ca:	|  |     |  |      move.l 40(sp),-(sp)
   124ce:	|  |     |  |      jsr 1128a <joinStrings>
   124d4:	|  |     |  |      addq.l #8,sp
   124d6:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   124da:	|  |     |  |  /-- bne.s 124e2 <getTextFromAnyVar+0x1ae>
   124dc:	|  |     |  |  |   moveq #0,d0
   124de:	|  +-----|--|--|-- bra.w 12604 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   124e2:	|  |     |  |  \-> move.l 28(sp),24(sp)
   124e8:	|  |     |  |      move.l 190e8 <SysBase>,d0
   124ee:	|  |     |  |      movea.l d0,a6
   124f0:	|  |     |  |      movea.l 24(sp),a1
   124f4:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   124f8:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   124fc:	|  |     |  |      move.l 36(sp),20(sp)
   12502:	|  |     |  |      move.l 190e8 <SysBase>,d0
   12508:	|  |     |  |      movea.l d0,a6
   1250a:	|  |     |  |      movea.l 20(sp),a1
   1250e:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   12512:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   12516:	|  |     |  |      movea.l 64(sp),a0
   1251a:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   12520:	|  |     |  \----> tst.l 64(sp)
   12524:	|  |     \-------- bne.w 12482 <getTextFromAnyVar+0x14e>
			}
			return builder;
   12528:	|  |               move.l 68(sp),d0
   1252c:	|  +-------------- bra.w 12604 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   12530:	|  |               moveq #10,d0
   12532:	|  |               move.l d0,16(sp)
   12536:	|  |               clr.l 12(sp)
   1253a:	|  |               move.l 190e8 <SysBase>,d0
   12540:	|  |               movea.l d0,a6
   12542:	|  |               move.l 16(sp),d0
   12546:	|  |               move.l 12(sp),d1
   1254a:	|  |               jsr -684(a6)
   1254e:	|  |               move.l d0,8(sp)
   12552:	|  |               move.l 8(sp),d0
   12556:	|  |               move.l d0,4(sp)
			if (! buff) {
   1255a:	|  |           /-- bne.s 12570 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1255c:	|  |           |   pea 167d9 <custom.c.177df80b+0x1b00>
   12562:	|  |           |   jsr 13da6 <KPrintF>
   12568:	|  |           |   addq.l #4,sp
				return NULL;
   1256a:	|  |           |   moveq #0,d0
   1256c:	|  +-----------|-- bra.w 12604 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   12570:	|  |           \-> movea.l 84(sp),a0
   12574:	|  |               move.l 4(a0),d0
   12578:	|  |               move.l d0,-(sp)
   1257a:	|  |               pea 16803 <custom.c.177df80b+0x1b2a>
   12580:	|  |               move.l 12(sp),-(sp)
   12584:	|  |               jsr 11568 <sprintf>
   1258a:	|  |               lea 12(sp),sp
			return buff;
   1258e:	|  |               move.l 4(sp),d0
   12592:	|  +-------------- bra.s 12604 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   12594:	|  |               movea.l 84(sp),a0
   12598:	|  |               move.l 4(a0),d0
   1259c:	|  |               move.l d0,-(sp)
   1259e:	|  |               jsr 1ec2 <resourceNameFromNum>
   125a4:	|  |               addq.l #4,sp
   125a6:	|  |               move.l d0,-(sp)
   125a8:	|  |               pea 15174 <custom.c.177df80b+0x49b>
   125ae:	|  |               jsr 1128a <joinStrings>
   125b4:	|  |               addq.l #8,sp
   125b6:	|  +-------------- bra.s 12604 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   125b8:	|  |               movea.l 84(sp),a0
   125bc:	|  |               move.l 4(a0),d0
   125c0:	|  |               move.l d0,-(sp)
   125c2:	|  |               jsr ab94 <findObjectType>
   125c8:	|  |               addq.l #4,sp
   125ca:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   125ce:	+--|-------------- beq.s 125e2 <getTextFromAnyVar+0x2ae>
   125d0:	|  |               movea.l 40(sp),a0
   125d4:	|  |               move.l (a0),d0
   125d6:	|  |               move.l d0,-(sp)
   125d8:	|  |               jsr b8 <copyString>
   125de:	|  |               addq.l #4,sp
   125e0:	|  +-------------- bra.s 12604 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   125e2:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   125e4:	   |               movea.l 84(sp),a0
   125e8:	   |               move.l (a0),d0
   125ea:	   |               add.l d0,d0
   125ec:	   |               movea.l d0,a1
   125ee:	   |               adda.l d0,a1
   125f0:	   |               lea 18fde <typeName>,a0
   125f6:	   |               move.l (0,a1,a0.l),d0
   125fa:	   |               move.l d0,-(sp)
   125fc:	   |               jsr b8 <copyString>
   12602:	   |               addq.l #4,sp
}
   12604:	   \-------------> movea.l (sp)+,a6
   12606:	                   lea 76(sp),sp
   1260a:	                   rts

0001260c <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1260c:	move.l 4(sp),-(sp)
   12610:	jsr 11fac <unlinkVar>
   12616:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   12618:	movea.l 4(sp),a0
   1261c:	moveq #8,d0
   1261e:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   12620:	movea.l 4(sp),a0
   12624:	move.l 8(sp),4(a0)
}
   1262a:	nop
   1262c:	rts

0001262e <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1262e:	move.l 4(sp),-(sp)
   12632:	jsr 11fac <unlinkVar>
   12638:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1263a:	movea.l 4(sp),a0
   1263e:	moveq #9,d0
   12640:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   12642:	movea.l 4(sp),a0
   12646:	move.l 8(sp),4(a0)
}
   1264c:	nop
   1264e:	rts

00012650 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   12650:	move.l 4(sp),-(sp)
   12654:	jsr 11fac <unlinkVar>
   1265a:	addq.l #4,sp
	thisVar->varType = vT;
   1265c:	movea.l 4(sp),a0
   12660:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   12664:	movea.l 4(sp),a0
   12668:	move.l 12(sp),4(a0)
}
   1266e:	nop
   12670:	rts

00012672 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   12672:	      /-- bra.s 12684 <stackGetByIndex+0x12>
        vS = vS->next;
   12674:	/-----|-> movea.l 4(sp),a0
   12678:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1267e:	|     +-- bne.s 12684 <stackGetByIndex+0x12>
            return NULL;
   12680:	|     |   moveq #0,d0
   12682:	|  /--|-- bra.s 12698 <stackGetByIndex+0x26>
    while (theIndex--) {
   12684:	|  |  \-> move.l 8(sp),d0
   12688:	|  |      move.l d0,d1
   1268a:	|  |      subq.l #1,d1
   1268c:	|  |      move.l d1,8(sp)
   12690:	|  |      tst.l d0
   12692:	\--|----- bne.s 12674 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   12694:	   |      move.l 4(sp),d0
}
   12698:	   \----> rts

0001269a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1269a:	          tst.l 4(sp)
   1269e:	      /-- bne.s 126ae <stackFindLast+0x14>
		return NULL;
   126a0:	      |   moveq #0,d0
   126a2:	/-----|-- bra.s 126bc <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   126a4:	|  /--|-> movea.l 4(sp),a0
   126a8:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   126ae:	|  |  \-> movea.l 4(sp),a0
   126b2:	|  |      move.l 8(a0),d0
   126b6:	|  \----- bne.s 126a4 <stackFindLast+0xa>

	return hunt;
   126b8:	|         move.l 4(sp),d0
}
   126bc:	\-------> rts

000126be <stackSize>:

int stackSize (const struct stackHandler * me) {
   126be:	       subq.l #8,sp
	int r = 0;
   126c0:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   126c4:	       movea.l 12(sp),a0
   126c8:	       move.l (a0),(sp)
	while (a) {
   126ca:	   /-- bra.s 126d6 <stackSize+0x18>
		r ++;
   126cc:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   126d0:	|  |   movea.l (sp),a0
   126d2:	|  |   move.l 8(a0),(sp)
	while (a) {
   126d6:	|  \-> tst.l (sp)
   126d8:	\----- bne.s 126cc <stackSize+0xe>
	}
	return r;
   126da:	       move.l 4(sp),d0
}
   126de:	       addq.l #8,sp
   126e0:	       rts

000126e2 <trimStack>:

void trimStack (struct variableStack ** stack) {
   126e2:	subq.l #8,sp
   126e4:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   126e6:	movea.l 16(sp),a0
   126ea:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   126ee:	movea.l 16(sp),a0
   126f2:	movea.l (a0),a0
   126f4:	move.l 8(a0),d0
   126f8:	movea.l 16(sp),a0
   126fc:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   126fe:	move.l 8(sp),d0
   12702:	move.l d0,-(sp)
   12704:	jsr 11fac <unlinkVar>
   1270a:	addq.l #4,sp
	FreeVec(killMe);
   1270c:	move.l 8(sp),4(sp)
   12712:	move.l 190e8 <SysBase>,d0
   12718:	movea.l d0,a6
   1271a:	movea.l 4(sp),a1
   1271e:	jsr -690(a6)
   12722:	nop
   12724:	movea.l (sp)+,a6
   12726:	addq.l #8,sp
   12728:	rts

0001272a <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1272a:	pea 16806 <custom.c.177df80b+0x1b2d>
   12730:	jsr 13da6 <KPrintF>
   12736:	addq.l #4,sp
	return FALSE;
   12738:	clr.w d0
}
   1273a:	rts

0001273c <stringWidth>:

int stringWidth (char * theText) {
   1273c:	       subq.l #8,sp
	int a = 0;
   1273e:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   12742:	       clr.l (sp)

	if (! fontTableSize) return 0;
   12744:	       move.l 1923c <fontTableSize>,d0
   1274a:	/----- bne.s 12750 <stringWidth+0x14>
   1274c:	|      moveq #0,d0
   1274e:	|  /-- bra.s 12752 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   12750:	\--|-> move.l (sp),d0
}
   12752:	   \-> addq.l #8,sp
   12754:	       rts

00012756 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   12756:	pea 1682d <custom.c.177df80b+0x1b54>
   1275c:	jsr 13da6 <KPrintF>
   12762:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   12764:	moveq #1,d0
}
   12766:	rts

00012768 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   12768:	       lea -16(sp),sp
   1276c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   1276e:	       moveq #36,d0
   12770:	       move.l d0,16(sp)
   12774:	       clr.l 12(sp)
   12778:	       move.l 190e8 <SysBase>,d0
   1277e:	       movea.l d0,a6
   12780:	       move.l 16(sp),d0
   12784:	       move.l 12(sp),d1
   12788:	       jsr -684(a6)
   1278c:	       move.l d0,8(sp)
   12790:	       move.l 8(sp),d0
   12794:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   12798:	   /-- bne.s 127a0 <addScreenRegion+0x38>
   1279a:	   |   clr.w d0
   1279c:	/--|-- bra.w 12820 <addScreenRegion+0xb8>
    newRegion->di = di;
   127a0:	|  \-> movea.l 4(sp),a0
   127a4:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   127aa:	|      movea.l 4(sp),a0
   127ae:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   127b2:	|      movea.l 4(sp),a0
   127b6:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   127bc:	|      movea.l 4(sp),a0
   127c0:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   127c6:	|      movea.l 4(sp),a0
   127ca:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   127d0:	|      movea.l 4(sp),a0
   127d4:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   127da:	|      movea.l 4(sp),a0
   127de:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   127e4:	|      move.l 52(sp),-(sp)
   127e8:	|      jsr ac84 <loadObjectType>
   127ee:	|      addq.l #4,sp
   127f0:	|      movea.l 4(sp),a0
   127f4:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   127f8:	|      move.l 19240 <allScreenRegions>,d0
   127fe:	|      movea.l 4(sp),a0
   12802:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   12806:	|      move.l 4(sp),19240 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1280e:	|      movea.l 4(sp),a0
   12812:	|      move.l 28(a0),d0
   12816:	|      sne d0
   12818:	|      neg.b d0
   1281a:	|      move.b d0,d0
   1281c:	|      andi.w #255,d0
}
   12820:	\----> movea.l (sp)+,a6
   12822:	       lea 16(sp),sp
   12826:	       rts

00012828 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   12828:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1282a:	             move.l 19240 <allScreenRegions>,(sp)

	while (thisRegion) {
   12830:	   /-------- bra.s 1284c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   12832:	/--|-------> movea.l (sp),a0
   12834:	|  |         movea.l 28(a0),a0
   12838:	|  |         move.l 4(a0),d0
   1283c:	|  |         cmp.l 8(sp),d0
   12840:	|  |     /-- bne.s 12846 <getRegionForObject+0x1e>
			return thisRegion;
   12842:	|  |     |   move.l (sp),d0
   12844:	|  |  /--|-- bra.s 12852 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   12846:	|  |  |  \-> movea.l (sp),a0
   12848:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1284c:	|  \--|----> tst.l (sp)
   1284e:	\-----|----- bne.s 12832 <getRegionForObject+0xa>
	}

	return NULL;
   12850:	      |      moveq #0,d0
}
   12852:	      \----> addq.l #4,sp
   12854:	             rts

00012856 <killAllRegions>:

void killAllRegions () {
   12856:	       subq.l #8,sp
   12858:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1285a:	   /-- bra.s 1289c <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1285c:	/--|-> move.l 19240 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   12864:	|  |   movea.l 19240 <allScreenRegions>,a0
   1286a:	|  |   move.l 32(a0),d0
   1286e:	|  |   move.l d0,19240 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   12874:	|  |   movea.l 8(sp),a0
   12878:	|  |   move.l 28(a0),d0
   1287c:	|  |   move.l d0,-(sp)
   1287e:	|  |   jsr af3c <removeObjectType>
   12884:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   12886:	|  |   move.l 8(sp),4(sp)
   1288c:	|  |   move.l 190e8 <SysBase>,d0
   12892:	|  |   movea.l d0,a6
   12894:	|  |   movea.l 4(sp),a1
   12898:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1289c:	|  \-> move.l 19240 <allScreenRegions>,d0
   128a2:	\----- bne.s 1285c <killAllRegions+0x6>
	}
	overRegion = NULL;
   128a4:	       clr.l 19244 <overRegion>
}
   128aa:	       nop
   128ac:	       movea.l (sp)+,a6
   128ae:	       addq.l #8,sp
   128b0:	       rts

000128b2 <loadRegions>:

void loadRegions (BPTR fp) {
   128b2:	       lea -24(sp),sp
   128b6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   128b8:	       move.l 32(sp),-(sp)
   128bc:	       jsr 6bc <get2bytes>
   128c2:	       addq.l #4,sp
   128c4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   128c8:	       move.l #102976,20(sp)

	while (numRegions --) {
   128d0:	   /-- bra.w 129ae <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   128d4:	/--|-> moveq #36,d0
   128d6:	|  |   move.l d0,16(sp)
   128da:	|  |   clr.l 12(sp)
   128de:	|  |   move.l 190e8 <SysBase>,d0
   128e4:	|  |   movea.l d0,a6
   128e6:	|  |   move.l 16(sp),d0
   128ea:	|  |   move.l 12(sp),d1
   128ee:	|  |   jsr -684(a6)
   128f2:	|  |   move.l d0,8(sp)
   128f6:	|  |   move.l 8(sp),d0
   128fa:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   128fe:	|  |   movea.l 20(sp),a0
   12902:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   12906:	|  |   moveq #32,d1
   12908:	|  |   add.l 4(sp),d1
   1290c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   12910:	|  |   move.l 32(sp),-(sp)
   12914:	|  |   jsr 6bc <get2bytes>
   1291a:	|  |   addq.l #4,sp
   1291c:	|  |   movea.l 4(sp),a0
   12920:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   12922:	|  |   move.l 32(sp),-(sp)
   12926:	|  |   jsr 6bc <get2bytes>
   1292c:	|  |   addq.l #4,sp
   1292e:	|  |   movea.l 4(sp),a0
   12932:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   12936:	|  |   move.l 32(sp),-(sp)
   1293a:	|  |   jsr 6bc <get2bytes>
   12940:	|  |   addq.l #4,sp
   12942:	|  |   movea.l 4(sp),a0
   12946:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1294a:	|  |   move.l 32(sp),-(sp)
   1294e:	|  |   jsr 6bc <get2bytes>
   12954:	|  |   addq.l #4,sp
   12956:	|  |   movea.l 4(sp),a0
   1295a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1295e:	|  |   move.l 32(sp),-(sp)
   12962:	|  |   jsr 6bc <get2bytes>
   12968:	|  |   addq.l #4,sp
   1296a:	|  |   movea.l 4(sp),a0
   1296e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   12972:	|  |   move.l 32(sp),-(sp)
   12976:	|  |   jsr 6bc <get2bytes>
   1297c:	|  |   addq.l #4,sp
   1297e:	|  |   movea.l 4(sp),a0
   12982:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   12986:	|  |   move.l 32(sp),-(sp)
   1298a:	|  |   jsr 6bc <get2bytes>
   12990:	|  |   addq.l #4,sp
   12992:	|  |   movea.l 4(sp),a0
   12996:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1299a:	|  |   move.l 32(sp),-(sp)
   1299e:	|  |   jsr ac32 <loadObjectRef>
   129a4:	|  |   addq.l #4,sp
   129a6:	|  |   movea.l 4(sp),a0
   129aa:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   129ae:	|  \-> move.l 24(sp),d0
   129b2:	|      move.l d0,d1
   129b4:	|      subq.l #1,d1
   129b6:	|      move.l d1,24(sp)
   129ba:	|      tst.l d0
   129bc:	\----- bne.w 128d4 <loadRegions+0x22>
	}
	* pointy = NULL;
   129c0:	       movea.l 20(sp),a0
   129c4:	       clr.l (a0)
}
   129c6:	       nop
   129c8:	       movea.l (sp)+,a6
   129ca:	       lea 24(sp),sp
   129ce:	       rts

000129d0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   129d0:	             lea -12(sp),sp
   129d4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   129d6:	             move.l #102976,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   129de:	   /-------- bra.s 12a58 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   129e0:	/--|-------> movea.l 12(sp),a0
   129e4:	|  |         movea.l (a0),a0
   129e6:	|  |         movea.l 28(a0),a0
   129ea:	|  |         move.l 4(a0),d0
   129ee:	|  |         cmp.l 20(sp),d0
   129f2:	|  |  /----- bne.s 12a4a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   129f4:	|  |  |      movea.l 12(sp),a0
   129f8:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   129fc:	|  |  |      movea.l 8(sp),a0
   12a00:	|  |  |      move.l 32(a0),d0
   12a04:	|  |  |      movea.l 12(sp),a0
   12a08:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   12a0a:	|  |  |      movea.l 8(sp),a0
   12a0e:	|  |  |      move.l 28(a0),d0
   12a12:	|  |  |      move.l d0,-(sp)
   12a14:	|  |  |      jsr af3c <removeObjectType>
   12a1a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   12a1c:	|  |  |      move.l 19244 <overRegion>,d0
   12a22:	|  |  |      cmp.l 8(sp),d0
   12a26:	|  |  |  /-- bne.s 12a2e <removeScreenRegion+0x5e>
   12a28:	|  |  |  |   clr.l 19244 <overRegion>
            FreeVec(killMe);
   12a2e:	|  |  |  \-> move.l 8(sp),4(sp)
   12a34:	|  |  |      move.l 190e8 <SysBase>,d0
   12a3a:	|  |  |      movea.l d0,a6
   12a3c:	|  |  |      movea.l 4(sp),a1
   12a40:	|  |  |      jsr -690(a6)
            killMe = NULL;
   12a44:	|  |  |      clr.l 8(sp)
   12a48:	|  +--|----- bra.s 12a58 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   12a4a:	|  |  \----> movea.l 12(sp),a0
   12a4e:	|  |         move.l (a0),d0
   12a50:	|  |         moveq #32,d1
   12a52:	|  |         add.l d0,d1
   12a54:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   12a58:	|  \-------> movea.l 12(sp),a0
   12a5c:	|            move.l (a0),d0
   12a5e:	\----------- bne.s 129e0 <removeScreenRegion+0x10>
        }
    }
}
   12a60:	             nop
   12a62:	             nop
   12a64:	             movea.l (sp)+,a6
   12a66:	             lea 12(sp),sp
   12a6a:	             rts

00012a6c <saveRegions>:

void saveRegions (BPTR fp) {
   12a6c:	       subq.l #8,sp
	int numRegions = 0;
   12a6e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   12a72:	       move.l 19240 <allScreenRegions>,(sp)
	while (thisRegion) {
   12a78:	   /-- bra.s 12a84 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   12a7a:	/--|-> movea.l (sp),a0
   12a7c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   12a80:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   12a84:	|  \-> tst.l (sp)
   12a86:	\----- bne.s 12a7a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   12a88:	       move.l 12(sp),-(sp)
   12a8c:	       move.l 8(sp),-(sp)
   12a90:	       jsr 8d0 <put2bytes>
   12a96:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   12a98:	       move.l 19240 <allScreenRegions>,(sp)
	while (thisRegion) {
   12a9e:	/----- bra.w 12b46 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   12aa2:	|  /-> movea.l (sp),a0
   12aa4:	|  |   move.l (a0),d0
   12aa6:	|  |   move.l 12(sp),-(sp)
   12aaa:	|  |   move.l d0,-(sp)
   12aac:	|  |   jsr 8d0 <put2bytes>
   12ab2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   12ab4:	|  |   movea.l (sp),a0
   12ab6:	|  |   move.l 4(a0),d0
   12aba:	|  |   move.l 12(sp),-(sp)
   12abe:	|  |   move.l d0,-(sp)
   12ac0:	|  |   jsr 8d0 <put2bytes>
   12ac6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   12ac8:	|  |   movea.l (sp),a0
   12aca:	|  |   move.l 8(a0),d0
   12ace:	|  |   move.l 12(sp),-(sp)
   12ad2:	|  |   move.l d0,-(sp)
   12ad4:	|  |   jsr 8d0 <put2bytes>
   12ada:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   12adc:	|  |   movea.l (sp),a0
   12ade:	|  |   move.l 12(a0),d0
   12ae2:	|  |   move.l 12(sp),-(sp)
   12ae6:	|  |   move.l d0,-(sp)
   12ae8:	|  |   jsr 8d0 <put2bytes>
   12aee:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   12af0:	|  |   movea.l (sp),a0
   12af2:	|  |   move.l 16(a0),d0
   12af6:	|  |   move.l 12(sp),-(sp)
   12afa:	|  |   move.l d0,-(sp)
   12afc:	|  |   jsr 8d0 <put2bytes>
   12b02:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   12b04:	|  |   movea.l (sp),a0
   12b06:	|  |   move.l 20(a0),d0
   12b0a:	|  |   move.l 12(sp),-(sp)
   12b0e:	|  |   move.l d0,-(sp)
   12b10:	|  |   jsr 8d0 <put2bytes>
   12b16:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   12b18:	|  |   movea.l (sp),a0
   12b1a:	|  |   move.l 24(a0),d0
   12b1e:	|  |   move.l 12(sp),-(sp)
   12b22:	|  |   move.l d0,-(sp)
   12b24:	|  |   jsr 8d0 <put2bytes>
   12b2a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   12b2c:	|  |   movea.l (sp),a0
   12b2e:	|  |   move.l 28(a0),d0
   12b32:	|  |   move.l 12(sp),-(sp)
   12b36:	|  |   move.l d0,-(sp)
   12b38:	|  |   jsr afdc <saveObjectRef>
   12b3e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   12b40:	|  |   movea.l (sp),a0
   12b42:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   12b46:	\--|-> tst.l (sp)
   12b48:	   \-- bne.w 12aa2 <saveRegions+0x36>
	}
}
   12b4c:	       nop
   12b4e:	       nop
   12b50:	       addq.l #8,sp
   12b52:	       rts

00012b54 <showBoxes>:

void showBoxes () {
   12b54:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   12b56:	       move.l 19240 <allScreenRegions>,(sp)

	while (huntRegion) {
   12b5c:	/----- bra.w 12bf8 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   12b60:	|  /-> movea.l (sp),a0
   12b62:	|  |   move.l 12(a0),d0
   12b66:	|  |   movea.l d0,a1
   12b68:	|  |   movea.l (sp),a0
   12b6a:	|  |   move.l 4(a0),d0
   12b6e:	|  |   move.l d0,d1
   12b70:	|  |   movea.l (sp),a0
   12b72:	|  |   move.l (a0),d0
   12b74:	|  |   move.l a1,-(sp)
   12b76:	|  |   move.l d1,-(sp)
   12b78:	|  |   move.l d0,-(sp)
   12b7a:	|  |   jsr a8cc <drawVerticalLine>
   12b80:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   12b84:	|  |   movea.l (sp),a0
   12b86:	|  |   move.l 12(a0),d0
   12b8a:	|  |   movea.l d0,a1
   12b8c:	|  |   movea.l (sp),a0
   12b8e:	|  |   move.l 4(a0),d0
   12b92:	|  |   move.l d0,d1
   12b94:	|  |   movea.l (sp),a0
   12b96:	|  |   move.l 8(a0),d0
   12b9a:	|  |   move.l a1,-(sp)
   12b9c:	|  |   move.l d1,-(sp)
   12b9e:	|  |   move.l d0,-(sp)
   12ba0:	|  |   jsr a8cc <drawVerticalLine>
   12ba6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   12baa:	|  |   movea.l (sp),a0
   12bac:	|  |   move.l 8(a0),d0
   12bb0:	|  |   movea.l d0,a1
   12bb2:	|  |   movea.l (sp),a0
   12bb4:	|  |   move.l 4(a0),d0
   12bb8:	|  |   move.l d0,d1
   12bba:	|  |   movea.l (sp),a0
   12bbc:	|  |   move.l (a0),d0
   12bbe:	|  |   move.l a1,-(sp)
   12bc0:	|  |   move.l d1,-(sp)
   12bc2:	|  |   move.l d0,-(sp)
   12bc4:	|  |   jsr a8a6 <drawHorizontalLine>
   12bca:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   12bce:	|  |   movea.l (sp),a0
   12bd0:	|  |   move.l 8(a0),d0
   12bd4:	|  |   movea.l d0,a1
   12bd6:	|  |   movea.l (sp),a0
   12bd8:	|  |   move.l 12(a0),d0
   12bdc:	|  |   move.l d0,d1
   12bde:	|  |   movea.l (sp),a0
   12be0:	|  |   move.l (a0),d0
   12be2:	|  |   move.l a1,-(sp)
   12be4:	|  |   move.l d1,-(sp)
   12be6:	|  |   move.l d0,-(sp)
   12be8:	|  |   jsr a8a6 <drawHorizontalLine>
   12bee:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   12bf2:	|  |   movea.l (sp),a0
   12bf4:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   12bf8:	\--|-> tst.l (sp)
   12bfa:	   \-- bne.w 12b60 <showBoxes+0xc>
	}
   12bfe:	       nop
   12c00:	       nop
   12c02:	       addq.l #4,sp
   12c04:	       rts

00012c06 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   12c06:	       lea -32(sp),sp
   12c0a:	       move.l d3,-(sp)
   12c0c:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   12c0e:	       move.l 60(sp),d0
   12c12:	       sub.l 52(sp),d0
   12c16:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   12c1a:	       move.l 64(sp),d0
   12c1e:	       sub.l 56(sp),d0
   12c22:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   12c26:	       move.l 68(sp),d0
   12c2a:	       sub.l 52(sp),d0
   12c2e:	       move.l 36(sp),-(sp)
   12c32:	       move.l d0,-(sp)
   12c34:	       jsr 14764 <__mulsi3>
   12c3a:	       addq.l #8,sp
   12c3c:	       move.l d0,d2
   12c3e:	       move.l 72(sp),d0
   12c42:	       sub.l 56(sp),d0
   12c46:	       move.l 32(sp),-(sp)
   12c4a:	       move.l d0,-(sp)
   12c4c:	       jsr 14764 <__mulsi3>
   12c52:	       addq.l #8,sp
   12c54:	       add.l d2,d0
   12c56:	       move.l d0,-(sp)
   12c58:	       jsr 141a2 <__floatsidf>
   12c5e:	       addq.l #4,sp
   12c60:	       move.l d0,16(sp)
   12c64:	       move.l d1,20(sp)
   12c68:	       move.l 16(sp),24(sp)
   12c6e:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   12c74:	       move.l 36(sp),-(sp)
   12c78:	       move.l 40(sp),-(sp)
   12c7c:	       jsr 14764 <__mulsi3>
   12c82:	       addq.l #8,sp
   12c84:	       move.l d0,d2
   12c86:	       move.l 32(sp),-(sp)
   12c8a:	       move.l 36(sp),-(sp)
   12c8e:	       jsr 14764 <__mulsi3>
   12c94:	       addq.l #8,sp
   12c96:	       add.l d2,d0
   12c98:	       move.l d0,-(sp)
   12c9a:	       jsr 141a2 <__floatsidf>
   12ca0:	       addq.l #4,sp
   12ca2:	       move.l d1,-(sp)
   12ca4:	       move.l d0,-(sp)
   12ca6:	       move.l 36(sp),-(sp)
   12caa:	       move.l 36(sp),-(sp)
   12cae:	       jsr 1402c <__divdf3>
   12cb4:	       lea 16(sp),sp
   12cb8:	       move.l d0,8(sp)
   12cbc:	       move.l d1,12(sp)
   12cc0:	       move.l 8(sp),24(sp)
   12cc6:	       move.l 12(sp),28(sp)

	if (m < 0) {
   12ccc:	       clr.l -(sp)
   12cce:	       clr.l -(sp)
   12cd0:	       move.l 36(sp),-(sp)
   12cd4:	       move.l 36(sp),-(sp)
   12cd8:	       jsr 143ba <__ltdf2>
   12cde:	       lea 16(sp),sp
   12ce2:	       tst.l d0
   12ce4:	   /-- bge.s 12cfa <closestPointOnLine+0xf4>
		*closestX = x1;
   12ce6:	   |   movea.l 44(sp),a0
   12cea:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   12cee:	   |   movea.l 48(sp),a0
   12cf2:	   |   move.l 56(sp),(a0)
   12cf6:	/--|-- bra.w 12ddc <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   12cfa:	|  \-> clr.l -(sp)
   12cfc:	|      move.l #1072693248,-(sp)
   12d02:	|      move.l 36(sp),-(sp)
   12d06:	|      move.l 36(sp),-(sp)
   12d0a:	|      jsr 14300 <__gtdf2>
   12d10:	|      lea 16(sp),sp
   12d14:	|      tst.l d0
   12d16:	|  /-- ble.s 12d2c <closestPointOnLine+0x126>
		*closestX = x2;
   12d18:	|  |   movea.l 44(sp),a0
   12d1c:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   12d20:	|  |   movea.l 48(sp),a0
   12d24:	|  |   move.l 64(sp),(a0)
   12d28:	+--|-- bra.w 12ddc <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   12d2c:	|  \-> move.l 52(sp),-(sp)
   12d30:	|      jsr 141a2 <__floatsidf>
   12d36:	|      addq.l #4,sp
   12d38:	|      move.l d0,d2
   12d3a:	|      move.l d1,d3
   12d3c:	|      move.l 36(sp),-(sp)
   12d40:	|      jsr 141a2 <__floatsidf>
   12d46:	|      addq.l #4,sp
   12d48:	|      move.l 28(sp),-(sp)
   12d4c:	|      move.l 28(sp),-(sp)
   12d50:	|      move.l d1,-(sp)
   12d52:	|      move.l d0,-(sp)
   12d54:	|      jsr 14232 <__muldf3>
   12d5a:	|      lea 16(sp),sp
   12d5e:	|      move.l d1,-(sp)
   12d60:	|      move.l d0,-(sp)
   12d62:	|      move.l d3,-(sp)
   12d64:	|      move.l d2,-(sp)
   12d66:	|      jsr 13fca <__adddf3>
   12d6c:	|      lea 16(sp),sp
   12d70:	|      move.l d1,-(sp)
   12d72:	|      move.l d0,-(sp)
   12d74:	|      jsr 1413a <__fixdfsi>
   12d7a:	|      addq.l #8,sp
   12d7c:	|      movea.l 44(sp),a0
   12d80:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   12d82:	|      move.l 56(sp),-(sp)
   12d86:	|      jsr 141a2 <__floatsidf>
   12d8c:	|      addq.l #4,sp
   12d8e:	|      move.l d0,d2
   12d90:	|      move.l d1,d3
   12d92:	|      move.l 32(sp),-(sp)
   12d96:	|      jsr 141a2 <__floatsidf>
   12d9c:	|      addq.l #4,sp
   12d9e:	|      move.l 28(sp),-(sp)
   12da2:	|      move.l 28(sp),-(sp)
   12da6:	|      move.l d1,-(sp)
   12da8:	|      move.l d0,-(sp)
   12daa:	|      jsr 14232 <__muldf3>
   12db0:	|      lea 16(sp),sp
   12db4:	|      move.l d1,-(sp)
   12db6:	|      move.l d0,-(sp)
   12db8:	|      move.l d3,-(sp)
   12dba:	|      move.l d2,-(sp)
   12dbc:	|      jsr 13fca <__adddf3>
   12dc2:	|      lea 16(sp),sp
   12dc6:	|      move.l d1,-(sp)
   12dc8:	|      move.l d0,-(sp)
   12dca:	|      jsr 1413a <__fixdfsi>
   12dd0:	|      addq.l #8,sp
   12dd2:	|      movea.l 48(sp),a0
   12dd6:	|      move.l d0,(a0)
		return TRUE;
   12dd8:	|      moveq #1,d0
   12dda:	|  /-- bra.s 12dde <closestPointOnLine+0x1d8>
	}
	return FALSE;
   12ddc:	\--|-> clr.w d0
}
   12dde:	   \-> move.l (sp)+,d2
   12de0:	       move.l (sp)+,d3
   12de2:	       lea 32(sp),sp
   12de6:	       rts

00012de8 <drawFloor>:

void drawFloor() {
   12de8:	                lea -12(sp),sp
   12dec:	                move.l d3,-(sp)
   12dee:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12df0:	                clr.l 16(sp)
   12df4:	   /----------- bra.w 13008 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   12df8:	/--|----------> movea.l 19248 <currentFloor>,a0
   12dfe:	|  |            move.l 12(a0),d1
   12e02:	|  |            move.l 16(sp),d0
   12e06:	|  |            lsl.l #3,d0
   12e08:	|  |            movea.l d1,a0
   12e0a:	|  |            adda.l d0,a0
   12e0c:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   12e10:	|  |            moveq #1,d0
   12e12:	|  |            cmp.l 8(sp),d0
   12e16:	|  |  /-------- bge.w 13004 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   12e1a:	|  |  |         moveq #1,d0
   12e1c:	|  |  |         move.l d0,12(sp)
   12e20:	|  |  |     /-- bra.w 12f1a <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   12e24:	|  |  |  /--|-> movea.l 19248 <currentFloor>,a0
   12e2a:	|  |  |  |  |   move.l 4(a0),d1
   12e2e:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12e34:	|  |  |  |  |   movea.l 12(a0),a0
   12e38:	|  |  |  |  |   move.l 16(sp),d0
   12e3c:	|  |  |  |  |   lsl.l #3,d0
   12e3e:	|  |  |  |  |   adda.l d0,a0
   12e40:	|  |  |  |  |   movea.l 4(a0),a0
   12e44:	|  |  |  |  |   move.l 12(sp),d0
   12e48:	|  |  |  |  |   add.l d0,d0
   12e4a:	|  |  |  |  |   add.l d0,d0
   12e4c:	|  |  |  |  |   adda.l d0,a0
   12e4e:	|  |  |  |  |   move.l (a0),d0
   12e50:	|  |  |  |  |   lsl.l #3,d0
   12e52:	|  |  |  |  |   movea.l d1,a0
   12e54:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12e56:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   12e5a:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12e60:	|  |  |  |  |   move.l 4(a0),d1
   12e64:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12e6a:	|  |  |  |  |   movea.l 12(a0),a0
   12e6e:	|  |  |  |  |   move.l 16(sp),d0
   12e72:	|  |  |  |  |   lsl.l #3,d0
   12e74:	|  |  |  |  |   adda.l d0,a0
   12e76:	|  |  |  |  |   movea.l 4(a0),a0
   12e7a:	|  |  |  |  |   move.l 12(sp),d0
   12e7e:	|  |  |  |  |   add.l d0,d0
   12e80:	|  |  |  |  |   add.l d0,d0
   12e82:	|  |  |  |  |   adda.l d0,a0
   12e84:	|  |  |  |  |   move.l (a0),d0
   12e86:	|  |  |  |  |   lsl.l #3,d0
   12e88:	|  |  |  |  |   movea.l d1,a0
   12e8a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12e8c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   12e8e:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12e94:	|  |  |  |  |   move.l 4(a0),d1
   12e98:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12e9e:	|  |  |  |  |   movea.l 12(a0),a0
   12ea2:	|  |  |  |  |   move.l 16(sp),d0
   12ea6:	|  |  |  |  |   lsl.l #3,d0
   12ea8:	|  |  |  |  |   adda.l d0,a0
   12eaa:	|  |  |  |  |   movea.l 4(a0),a0
   12eae:	|  |  |  |  |   move.l 12(sp),d0
   12eb2:	|  |  |  |  |   addi.l #1073741823,d0
   12eb8:	|  |  |  |  |   add.l d0,d0
   12eba:	|  |  |  |  |   add.l d0,d0
   12ebc:	|  |  |  |  |   adda.l d0,a0
   12ebe:	|  |  |  |  |   move.l (a0),d0
   12ec0:	|  |  |  |  |   lsl.l #3,d0
   12ec2:	|  |  |  |  |   movea.l d1,a0
   12ec4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12ec6:	|  |  |  |  |   move.l 4(a0),d1
   12eca:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12ed0:	|  |  |  |  |   move.l 4(a0),d3
   12ed4:	|  |  |  |  |   movea.l 19248 <currentFloor>,a0
   12eda:	|  |  |  |  |   movea.l 12(a0),a0
   12ede:	|  |  |  |  |   move.l 16(sp),d0
   12ee2:	|  |  |  |  |   lsl.l #3,d0
   12ee4:	|  |  |  |  |   adda.l d0,a0
   12ee6:	|  |  |  |  |   movea.l 4(a0),a0
   12eea:	|  |  |  |  |   move.l 12(sp),d0
   12eee:	|  |  |  |  |   addi.l #1073741823,d0
   12ef4:	|  |  |  |  |   add.l d0,d0
   12ef6:	|  |  |  |  |   add.l d0,d0
   12ef8:	|  |  |  |  |   adda.l d0,a0
   12efa:	|  |  |  |  |   move.l (a0),d0
   12efc:	|  |  |  |  |   lsl.l #3,d0
   12efe:	|  |  |  |  |   movea.l d3,a0
   12f00:	|  |  |  |  |   adda.l d0,a0
   12f02:	|  |  |  |  |   move.l (a0),d0
   12f04:	|  |  |  |  |   move.l d2,-(sp)
   12f06:	|  |  |  |  |   move.l a1,-(sp)
   12f08:	|  |  |  |  |   move.l d1,-(sp)
   12f0a:	|  |  |  |  |   move.l d0,-(sp)
   12f0c:	|  |  |  |  |   jsr 1c2c <drawLine>
   12f12:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   12f16:	|  |  |  |  |   addq.l #1,12(sp)
   12f1a:	|  |  |  |  \-> move.l 12(sp),d0
   12f1e:	|  |  |  |      cmp.l 8(sp),d0
   12f22:	|  |  |  \----- blt.w 12e24 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   12f26:	|  |  |         movea.l 19248 <currentFloor>,a0
   12f2c:	|  |  |         move.l 4(a0),d1
   12f30:	|  |  |         movea.l 19248 <currentFloor>,a0
   12f36:	|  |  |         movea.l 12(a0),a0
   12f3a:	|  |  |         move.l 16(sp),d0
   12f3e:	|  |  |         lsl.l #3,d0
   12f40:	|  |  |         adda.l d0,a0
   12f42:	|  |  |         movea.l 4(a0),a0
   12f46:	|  |  |         move.l 8(sp),d0
   12f4a:	|  |  |         addi.l #1073741823,d0
   12f50:	|  |  |         add.l d0,d0
   12f52:	|  |  |         add.l d0,d0
   12f54:	|  |  |         adda.l d0,a0
   12f56:	|  |  |         move.l (a0),d0
   12f58:	|  |  |         lsl.l #3,d0
   12f5a:	|  |  |         movea.l d1,a0
   12f5c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12f5e:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   12f62:	|  |  |         movea.l 19248 <currentFloor>,a0
   12f68:	|  |  |         move.l 4(a0),d1
   12f6c:	|  |  |         movea.l 19248 <currentFloor>,a0
   12f72:	|  |  |         movea.l 12(a0),a0
   12f76:	|  |  |         move.l 16(sp),d0
   12f7a:	|  |  |         lsl.l #3,d0
   12f7c:	|  |  |         adda.l d0,a0
   12f7e:	|  |  |         movea.l 4(a0),a0
   12f82:	|  |  |         move.l 8(sp),d0
   12f86:	|  |  |         addi.l #1073741823,d0
   12f8c:	|  |  |         add.l d0,d0
   12f8e:	|  |  |         add.l d0,d0
   12f90:	|  |  |         adda.l d0,a0
   12f92:	|  |  |         move.l (a0),d0
   12f94:	|  |  |         lsl.l #3,d0
   12f96:	|  |  |         movea.l d1,a0
   12f98:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12f9a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   12f9c:	|  |  |         movea.l 19248 <currentFloor>,a0
   12fa2:	|  |  |         move.l 4(a0),d1
   12fa6:	|  |  |         movea.l 19248 <currentFloor>,a0
   12fac:	|  |  |         movea.l 12(a0),a0
   12fb0:	|  |  |         move.l 16(sp),d0
   12fb4:	|  |  |         lsl.l #3,d0
   12fb6:	|  |  |         adda.l d0,a0
   12fb8:	|  |  |         movea.l 4(a0),a0
   12fbc:	|  |  |         move.l (a0),d0
   12fbe:	|  |  |         lsl.l #3,d0
   12fc0:	|  |  |         movea.l d1,a0
   12fc2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12fc4:	|  |  |         move.l 4(a0),d1
   12fc8:	|  |  |         movea.l 19248 <currentFloor>,a0
   12fce:	|  |  |         move.l 4(a0),d3
   12fd2:	|  |  |         movea.l 19248 <currentFloor>,a0
   12fd8:	|  |  |         movea.l 12(a0),a0
   12fdc:	|  |  |         move.l 16(sp),d0
   12fe0:	|  |  |         lsl.l #3,d0
   12fe2:	|  |  |         adda.l d0,a0
   12fe4:	|  |  |         movea.l 4(a0),a0
   12fe8:	|  |  |         move.l (a0),d0
   12fea:	|  |  |         lsl.l #3,d0
   12fec:	|  |  |         movea.l d3,a0
   12fee:	|  |  |         adda.l d0,a0
   12ff0:	|  |  |         move.l (a0),d0
   12ff2:	|  |  |         move.l d2,-(sp)
   12ff4:	|  |  |         move.l a1,-(sp)
   12ff6:	|  |  |         move.l d1,-(sp)
   12ff8:	|  |  |         move.l d0,-(sp)
   12ffa:	|  |  |         jsr 1c2c <drawLine>
   13000:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13004:	|  |  \-------> addq.l #1,16(sp)
   13008:	|  \----------> movea.l 19248 <currentFloor>,a0
   1300e:	|               move.l 8(a0),d0
   13012:	|               cmp.l 16(sp),d0
   13016:	\-------------- bgt.w 12df8 <drawFloor+0x10>
        }
    }
}
   1301a:	                nop
   1301c:	                nop
   1301e:	                move.l (sp)+,d2
   13020:	                move.l (sp)+,d3
   13022:	                lea 12(sp),sp
   13026:	                rts

00013028 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   13028:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1302c:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   13030:	                      clr.l 4(sp)
   13034:	   /----------------- bra.w 130c6 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   13038:	/--|----------------> clr.l (sp)
   1303a:	|  |     /----------- bra.s 130b6 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1303c:	|  |  /--|----------> movea.l 16(sp),a0
   13040:	|  |  |  |            move.l 4(a0),d1
   13044:	|  |  |  |            move.l 4(sp),d0
   13048:	|  |  |  |            add.l d0,d0
   1304a:	|  |  |  |            add.l d0,d0
   1304c:	|  |  |  |            movea.l d1,a0
   1304e:	|  |  |  |            adda.l d0,a0
   13050:	|  |  |  |            move.l (a0),d1
   13052:	|  |  |  |            movea.l 20(sp),a0
   13056:	|  |  |  |            movea.l 4(a0),a0
   1305a:	|  |  |  |            move.l (sp),d0
   1305c:	|  |  |  |            add.l d0,d0
   1305e:	|  |  |  |            add.l d0,d0
   13060:	|  |  |  |            adda.l d0,a0
   13062:	|  |  |  |            move.l (a0),d0
   13064:	|  |  |  |            cmp.l d1,d0
   13066:	|  |  |  |  /-------- bne.s 130b4 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   13068:	|  |  |  |  |         move.l 8(sp),d0
   1306c:	|  |  |  |  |         move.l d0,d1
   1306e:	|  |  |  |  |         addq.l #1,d1
   13070:	|  |  |  |  |         move.l d1,8(sp)
   13074:	|  |  |  |  |         tst.l d0
   13076:	|  |  |  |  |     /-- beq.s 13098 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   13078:	|  |  |  |  |     |   movea.l 16(sp),a0
   1307c:	|  |  |  |  |     |   move.l 4(a0),d1
   13080:	|  |  |  |  |     |   move.l 4(sp),d0
   13084:	|  |  |  |  |     |   add.l d0,d0
   13086:	|  |  |  |  |     |   add.l d0,d0
   13088:	|  |  |  |  |     |   movea.l d1,a0
   1308a:	|  |  |  |  |     |   adda.l d0,a0
   1308c:	|  |  |  |  |     |   move.l (a0),d0
   1308e:	|  |  |  |  |     |   movea.l 28(sp),a0
   13092:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   13094:	|  |  |  |  |     |   moveq #1,d0
   13096:	|  |  |  |  |  /--|-- bra.s 130d6 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   13098:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1309c:	|  |  |  |  |  |      move.l 4(a0),d1
   130a0:	|  |  |  |  |  |      move.l 4(sp),d0
   130a4:	|  |  |  |  |  |      add.l d0,d0
   130a6:	|  |  |  |  |  |      add.l d0,d0
   130a8:	|  |  |  |  |  |      movea.l d1,a0
   130aa:	|  |  |  |  |  |      adda.l d0,a0
   130ac:	|  |  |  |  |  |      move.l (a0),d0
   130ae:	|  |  |  |  |  |      movea.l 24(sp),a0
   130b2:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   130b4:	|  |  |  |  \--|----> addq.l #1,(sp)
   130b6:	|  |  |  \-----|----> movea.l 20(sp),a0
   130ba:	|  |  |        |      move.l (a0),d0
   130bc:	|  |  |        |      cmp.l (sp),d0
   130be:	|  |  \--------|----- bgt.w 1303c <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   130c2:	|  |           |      addq.l #1,4(sp)
   130c6:	|  \-----------|----> movea.l 16(sp),a0
   130ca:	|              |      move.l (a0),d0
   130cc:	|              |      cmp.l 4(sp),d0
   130d0:	\--------------|----- bgt.w 13038 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   130d4:	               |      clr.w d0
}
   130d6:	               \----> lea 12(sp),sp
   130da:	                      rts

000130dc <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   130dc:	movea.l 19248 <currentFloor>,a0
   130e2:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   130e6:	movea.l 19248 <currentFloor>,a0
   130ec:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   130f0:	movea.l 19248 <currentFloor>,a0
   130f6:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   130fa:	movea.l 19248 <currentFloor>,a0
   13100:	clr.l 16(a0)
}
   13104:	nop
   13106:	rts

00013108 <inFloor>:

int inFloor (int x, int y) {
   13108:	          subq.l #8,sp
	int i, r = -1;
   1310a:	          moveq #-1,d0
   1310c:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1310e:	          clr.l 4(sp)
   13112:	   /----- bra.s 13146 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   13114:	/--|----> movea.l 19248 <currentFloor>,a0
   1311a:	|  |      move.l 12(a0),d1
   1311e:	|  |      move.l 4(sp),d0
   13122:	|  |      lsl.l #3,d0
   13124:	|  |      add.l d1,d0
   13126:	|  |      move.l 16(sp),-(sp)
   1312a:	|  |      move.l 16(sp),-(sp)
   1312e:	|  |      move.l d0,-(sp)
   13130:	|  |      jsr 13312 <pointInFloorPolygon>
   13136:	|  |      lea 12(sp),sp
   1313a:	|  |      tst.w d0
   1313c:	|  |  /-- beq.s 13142 <inFloor+0x3a>
			r = i;
   1313e:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13142:	|  |  \-> addq.l #1,4(sp)
   13146:	|  \----> movea.l 19248 <currentFloor>,a0
   1314c:	|         move.l 8(a0),d0
   13150:	|         cmp.l 4(sp),d0
   13154:	\-------- bgt.s 13114 <inFloor+0xc>

	return r;
   13156:	          move.l (sp),d0
}
   13158:	          addq.l #8,sp
   1315a:	          rts

0001315c <initFloor>:

BOOL initFloor () {
   1315c:	       lea -12(sp),sp
   13160:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   13162:	       moveq #20,d0
   13164:	       move.l d0,12(sp)
   13168:	       clr.l 8(sp)
   1316c:	       move.l 190e8 <SysBase>,d0
   13172:	       movea.l d0,a6
   13174:	       move.l 12(sp),d0
   13178:	       move.l 8(sp),d1
   1317c:	       jsr -684(a6)
   13180:	       move.l d0,4(sp)
   13184:	       move.l 4(sp),d0
   13188:	       move.l d0,19248 <currentFloor>

    if(currentFloor == 0) {
   1318e:	       move.l 19248 <currentFloor>,d0
   13194:	/----- bne.s 131a8 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   13196:	|      pea 16850 <custom.c.177df80b+0x1b77>
   1319c:	|      jsr 13da6 <KPrintF>
   131a2:	|      addq.l #4,sp
        return FALSE;
   131a4:	|      clr.w d0
   131a6:	|  /-- bra.s 131b0 <initFloor+0x54>
    }

	noFloor ();
   131a8:	\--|-> jsr 130dc <noFloor>
	return TRUE;
   131ae:	   |   moveq #1,d0
}
   131b0:	   \-> movea.l (sp)+,a6
   131b2:	       lea 12(sp),sp
   131b6:	       rts

000131b8 <killFloor>:

void killFloor () {
   131b8:	       lea -24(sp),sp
   131bc:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   131be:	       clr.l 24(sp)
   131c2:	   /-- bra.s 1321c <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   131c4:	/--|-> movea.l 19248 <currentFloor>,a0
   131ca:	|  |   move.l 12(a0),d1
   131ce:	|  |   move.l 24(sp),d0
   131d2:	|  |   lsl.l #3,d0
   131d4:	|  |   movea.l d1,a0
   131d6:	|  |   adda.l d0,a0
   131d8:	|  |   move.l 4(a0),8(sp)
   131de:	|  |   move.l 190e8 <SysBase>,d0
   131e4:	|  |   movea.l d0,a6
   131e6:	|  |   movea.l 8(sp),a1
   131ea:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   131ee:	|  |   movea.l 19248 <currentFloor>,a0
   131f4:	|  |   move.l 16(a0),d1
   131f8:	|  |   move.l 24(sp),d0
   131fc:	|  |   add.l d0,d0
   131fe:	|  |   add.l d0,d0
   13200:	|  |   movea.l d1,a0
   13202:	|  |   adda.l d0,a0
   13204:	|  |   move.l (a0),4(sp)
   13208:	|  |   move.l 190e8 <SysBase>,d0
   1320e:	|  |   movea.l d0,a6
   13210:	|  |   movea.l 4(sp),a1
   13214:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13218:	|  |   addq.l #1,24(sp)
   1321c:	|  \-> movea.l 19248 <currentFloor>,a0
   13222:	|      move.l 8(a0),d0
   13226:	|      cmp.l 24(sp),d0
   1322a:	\----- bgt.s 131c4 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1322c:	       movea.l 19248 <currentFloor>,a0
   13232:	       move.l 12(a0),20(sp)
   13238:	       move.l 190e8 <SysBase>,d0
   1323e:	       movea.l d0,a6
   13240:	       movea.l 20(sp),a1
   13244:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   13248:	       movea.l 19248 <currentFloor>,a0
   1324e:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   13252:	       movea.l 19248 <currentFloor>,a0
   13258:	       move.l 4(a0),16(sp)
   1325e:	       move.l 190e8 <SysBase>,d0
   13264:	       movea.l d0,a6
   13266:	       movea.l 16(sp),a1
   1326a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1326e:	       movea.l 19248 <currentFloor>,a0
   13274:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   13278:	       movea.l 19248 <currentFloor>,a0
   1327e:	       move.l 16(a0),12(sp)
   13284:	       move.l 190e8 <SysBase>,d0
   1328a:	       movea.l d0,a6
   1328c:	       movea.l 12(sp),a1
   13290:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   13294:	       movea.l 19248 <currentFloor>,a0
   1329a:	       clr.l 16(a0)
}
   1329e:	       nop
   132a0:	       movea.l (sp)+,a6
   132a2:	       lea 24(sp),sp
   132a6:	       rts

000132a8 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   132a8:	                   lea -12(sp),sp
	int sharedVertices = 0;
   132ac:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   132b0:	                   clr.l 4(sp)
   132b4:	   /-------------- bra.s 13300 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   132b6:	/--|-------------> clr.l (sp)
   132b8:	|  |     /-------- bra.s 132f4 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   132ba:	|  |  /--|-------> move.l 20(sp),d1
   132be:	|  |  |  |         move.l 4(sp),d0
   132c2:	|  |  |  |         add.l d0,d0
   132c4:	|  |  |  |         add.l d0,d0
   132c6:	|  |  |  |         movea.l d1,a0
   132c8:	|  |  |  |         adda.l d0,a0
   132ca:	|  |  |  |         move.l (a0),d1
   132cc:	|  |  |  |         movea.l 28(sp),a0
   132d0:	|  |  |  |         move.l (sp),d0
   132d2:	|  |  |  |         add.l d0,d0
   132d4:	|  |  |  |         add.l d0,d0
   132d6:	|  |  |  |         adda.l d0,a0
   132d8:	|  |  |  |         move.l (a0),d0
   132da:	|  |  |  |         cmp.l d1,d0
   132dc:	|  |  |  |     /-- bne.s 132f2 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   132de:	|  |  |  |     |   move.l 8(sp),d0
   132e2:	|  |  |  |     |   move.l d0,d1
   132e4:	|  |  |  |     |   addq.l #1,d1
   132e6:	|  |  |  |     |   move.l d1,8(sp)
   132ea:	|  |  |  |     |   tst.l d0
   132ec:	|  |  |  |     +-- beq.s 132f2 <polysShareSide+0x4a>
   132ee:	|  |  |  |     |   moveq #1,d0
   132f0:	|  |  |  |  /--|-- bra.s 1330c <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   132f2:	|  |  |  |  |  \-> addq.l #1,(sp)
   132f4:	|  |  |  \--|----> move.l 24(sp),d0
   132f8:	|  |  |     |      cmp.l (sp),d0
   132fa:	|  |  \-----|----- bgt.s 132ba <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   132fc:	|  |        |      addq.l #1,4(sp)
   13300:	|  \--------|----> move.l 16(sp),d0
   13304:	|           |      cmp.l 4(sp),d0
   13308:	\-----------|----- bgt.s 132b6 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1330a:	            |      clr.w d0
}
   1330c:	            \----> lea 12(sp),sp
   13310:	                   rts

00013312 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   13312:	             lea -28(sp),sp
   13316:	             move.l d3,-(sp)
   13318:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1331a:	             clr.l 32(sp)
   1331e:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   13322:	             movea.l 40(sp),a0
   13326:	             move.l (a0),d0
   13328:	             move.l d0,d1
   1332a:	             subq.l #1,d1
   1332c:	             move.l d1,28(sp)
   13330:	   /-------- bra.w 1352a <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   13334:	/--|-------> movea.l 19248 <currentFloor>,a0
   1333a:	|  |         move.l 4(a0),d1
   1333e:	|  |         movea.l 40(sp),a0
   13342:	|  |         movea.l 4(a0),a0
   13346:	|  |         move.l 32(sp),d0
   1334a:	|  |         add.l d0,d0
   1334c:	|  |         add.l d0,d0
   1334e:	|  |         adda.l d0,a0
   13350:	|  |         move.l (a0),d0
   13352:	|  |         lsl.l #3,d0
   13354:	|  |         movea.l d1,a0
   13356:	|  |         adda.l d0,a0
   13358:	|  |         move.l (a0),d0
   1335a:	|  |         move.l d0,-(sp)
   1335c:	|  |         jsr 141e2 <__floatsisf>
   13362:	|  |         addq.l #4,sp
   13364:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   13368:	|  |         movea.l 19248 <currentFloor>,a0
   1336e:	|  |         move.l 4(a0),d1
   13372:	|  |         movea.l 40(sp),a0
   13376:	|  |         movea.l 4(a0),a0
   1337a:	|  |         move.l 32(sp),d0
   1337e:	|  |         add.l d0,d0
   13380:	|  |         add.l d0,d0
   13382:	|  |         adda.l d0,a0
   13384:	|  |         move.l (a0),d0
   13386:	|  |         lsl.l #3,d0
   13388:	|  |         movea.l d1,a0
   1338a:	|  |         adda.l d0,a0
   1338c:	|  |         move.l 4(a0),d0
   13390:	|  |         move.l d0,-(sp)
   13392:	|  |         jsr 141e2 <__floatsisf>
   13398:	|  |         addq.l #4,sp
   1339a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1339e:	|  |         movea.l 19248 <currentFloor>,a0
   133a4:	|  |         move.l 4(a0),d1
   133a8:	|  |         movea.l 40(sp),a0
   133ac:	|  |         movea.l 4(a0),a0
   133b0:	|  |         move.l 28(sp),d0
   133b4:	|  |         add.l d0,d0
   133b6:	|  |         add.l d0,d0
   133b8:	|  |         adda.l d0,a0
   133ba:	|  |         move.l (a0),d0
   133bc:	|  |         lsl.l #3,d0
   133be:	|  |         movea.l d1,a0
   133c0:	|  |         adda.l d0,a0
   133c2:	|  |         move.l (a0),d0
   133c4:	|  |         move.l d0,-(sp)
   133c6:	|  |         jsr 141e2 <__floatsisf>
   133cc:	|  |         addq.l #4,sp
   133ce:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   133d2:	|  |         movea.l 19248 <currentFloor>,a0
   133d8:	|  |         move.l 4(a0),d1
   133dc:	|  |         movea.l 40(sp),a0
   133e0:	|  |         movea.l 4(a0),a0
   133e4:	|  |         move.l 28(sp),d0
   133e8:	|  |         add.l d0,d0
   133ea:	|  |         add.l d0,d0
   133ec:	|  |         adda.l d0,a0
   133ee:	|  |         move.l (a0),d0
   133f0:	|  |         lsl.l #3,d0
   133f2:	|  |         movea.l d1,a0
   133f4:	|  |         adda.l d0,a0
   133f6:	|  |         move.l 4(a0),d0
   133fa:	|  |         move.l d0,-(sp)
   133fc:	|  |         jsr 141e2 <__floatsisf>
   13402:	|  |         addq.l #4,sp
   13404:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13408:	|  |         move.l 48(sp),-(sp)
   1340c:	|  |         jsr 141e2 <__floatsisf>
   13412:	|  |         addq.l #4,sp
   13414:	|  |         move.l d0,-(sp)
   13416:	|  |         move.l 20(sp),-(sp)
   1341a:	|  |         jsr 14384 <__lesf2>
   13420:	|  |         addq.l #8,sp
   13422:	|  |         tst.l d0
   13424:	|  |     /-- bgt.s 13444 <pointInFloorPolygon+0x132>
   13426:	|  |     |   move.l 48(sp),-(sp)
   1342a:	|  |     |   jsr 141e2 <__floatsisf>
   13430:	|  |     |   addq.l #4,sp
   13432:	|  |     |   move.l d0,-(sp)
   13434:	|  |     |   move.l 12(sp),-(sp)
   13438:	|  |     |   jsr 1434e <__gtsf2>
   1343e:	|  |     |   addq.l #8,sp
   13440:	|  |     |   tst.l d0
   13442:	|  |  /--|-- bgt.s 13484 <pointInFloorPolygon+0x172>
   13444:	|  |  |  \-> move.l 48(sp),-(sp)
   13448:	|  |  |      jsr 141e2 <__floatsisf>
   1344e:	|  |  |      addq.l #4,sp
   13450:	|  |  |      move.l d0,-(sp)
   13452:	|  |  |      move.l 12(sp),-(sp)
   13456:	|  |  |      jsr 14384 <__lesf2>
   1345c:	|  |  |      addq.l #8,sp
   1345e:	|  |  |      tst.l d0
   13460:	|  |  |  /-- bgt.w 1351a <pointInFloorPolygon+0x208>
   13464:	|  |  |  |   move.l 48(sp),-(sp)
   13468:	|  |  |  |   jsr 141e2 <__floatsisf>
   1346e:	|  |  |  |   addq.l #4,sp
   13470:	|  |  |  |   move.l d0,-(sp)
   13472:	|  |  |  |   move.l 20(sp),-(sp)
   13476:	|  |  |  |   jsr 1434e <__gtsf2>
   1347c:	|  |  |  |   addq.l #8,sp
   1347e:	|  |  |  |   tst.l d0
   13480:	|  |  |  +-- ble.w 1351a <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   13484:	|  |  \--|-> move.l 44(sp),-(sp)
   13488:	|  |     |   jsr 141e2 <__floatsisf>
   1348e:	|  |     |   addq.l #4,sp
   13490:	|  |     |   move.l d0,d3
   13492:	|  |     |   move.l 20(sp),-(sp)
   13496:	|  |     |   move.l 16(sp),-(sp)
   1349a:	|  |     |   jsr 144d6 <__subsf3>
   134a0:	|  |     |   addq.l #8,sp
   134a2:	|  |     |   move.l d0,d2
   134a4:	|  |     |   move.l 48(sp),-(sp)
   134a8:	|  |     |   jsr 141e2 <__floatsisf>
   134ae:	|  |     |   addq.l #4,sp
   134b0:	|  |     |   move.l 16(sp),-(sp)
   134b4:	|  |     |   move.l d0,-(sp)
   134b6:	|  |     |   jsr 144d6 <__subsf3>
   134bc:	|  |     |   addq.l #8,sp
   134be:	|  |     |   move.l d0,-(sp)
   134c0:	|  |     |   move.l d2,-(sp)
   134c2:	|  |     |   jsr 14294 <__mulsf3>
   134c8:	|  |     |   addq.l #8,sp
   134ca:	|  |     |   move.l d0,d2
   134cc:	|  |     |   move.l 16(sp),-(sp)
   134d0:	|  |     |   move.l 12(sp),-(sp)
   134d4:	|  |     |   jsr 144d6 <__subsf3>
   134da:	|  |     |   addq.l #8,sp
   134dc:	|  |     |   move.l d0,-(sp)
   134de:	|  |     |   move.l d2,-(sp)
   134e0:	|  |     |   jsr 1408e <__divsf3>
   134e6:	|  |     |   addq.l #8,sp
   134e8:	|  |     |   move.l 20(sp),-(sp)
   134ec:	|  |     |   move.l d0,-(sp)
   134ee:	|  |     |   jsr 13f94 <__addsf3>
   134f4:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   134f6:	|  |     |   move.l d0,-(sp)
   134f8:	|  |     |   move.l d3,-(sp)
   134fa:	|  |     |   jsr 14408 <__ltsf2>
   13500:	|  |     |   addq.l #8,sp
   13502:	|  |     |   tst.l d0
   13504:	|  |     +-- bge.s 1351a <pointInFloorPolygon+0x208>

			c = !c;
   13506:	|  |     |   tst.l 24(sp)
   1350a:	|  |     |   seq d0
   1350c:	|  |     |   neg.b d0
   1350e:	|  |     |   move.b d0,d0
   13510:	|  |     |   andi.l #255,d0
   13516:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1351a:	|  |     \-> move.l 32(sp),d0
   1351e:	|  |         move.l d0,d1
   13520:	|  |         addq.l #1,d1
   13522:	|  |         move.l d1,32(sp)
   13526:	|  |         move.l d0,28(sp)
   1352a:	|  \-------> movea.l 40(sp),a0
   1352e:	|            move.l (a0),d0
   13530:	|            cmp.l 32(sp),d0
   13534:	\----------- bgt.w 13334 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   13538:	             tst.l 24(sp)
   1353c:	             sne d0
   1353e:	             neg.b d0
   13540:	             move.b d0,d0
   13542:	             andi.w #255,d0
}
   13546:	             move.l (sp)+,d2
   13548:	             move.l (sp)+,d3
   1354a:	             lea 28(sp),sp
   1354e:	             rts

00013550 <setFloor>:

BOOL setFloor (int fileNum) {
   13550:	                               lea -132(sp),sp
   13554:	                               move.l a6,-(sp)
   13556:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   13558:	                               jsr 131b8 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1355e:	                               move.l 144(sp),-(sp)
   13562:	                               jsr 4868 <openFileFromNum>
   13568:	                               addq.l #4,sp
   1356a:	                               tst.l d0
   1356c:	                           /-- bne.s 13574 <setFloor+0x24>
   1356e:	                           |   clr.w d0
   13570:	/--------------------------|-- bra.w 13cc0 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   13574:	|                          \-> movea.l 19248 <currentFloor>,a0
   1357a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1357e:	|                              move.l 190d0 <bigDataFile>,118(sp)
   13586:	|                              move.l 190f0 <DOSBase>,d0
   1358c:	|                              movea.l d0,a6
   1358e:	|                              move.l 118(sp),d1
   13592:	|                              jsr -306(a6)
   13596:	|                              move.l d0,114(sp)
   1359a:	|                              move.l 114(sp),d0
   1359e:	|                              movea.l 19248 <currentFloor>,a0
   135a4:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   135a8:	|                              movea.l 19248 <currentFloor>,a0
   135ae:	|                              move.l 8(a0),d0
   135b2:	|                              lsl.l #3,d0
   135b4:	|                              move.l d0,110(sp)
   135b8:	|                              clr.l 106(sp)
   135bc:	|                              move.l 190e8 <SysBase>,d0
   135c2:	|                              movea.l d0,a6
   135c4:	|                              move.l 110(sp),d0
   135c8:	|                              move.l 106(sp),d1
   135cc:	|                              jsr -684(a6)
   135d0:	|                              move.l d0,102(sp)
   135d4:	|                              move.l 102(sp),d0
   135d8:	|                              movea.l 19248 <currentFloor>,a0
   135de:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   135e2:	|                              movea.l 19248 <currentFloor>,a0
   135e8:	|                              move.l 12(a0),d0
   135ec:	|                          /-- bne.s 13602 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   135ee:	|                          |   pea 16874 <custom.c.177df80b+0x1b9b>
   135f4:	|                          |   jsr 13da6 <KPrintF>
   135fa:	|                          |   addq.l #4,sp
		return FALSE;
   135fc:	|                          |   clr.w d0
   135fe:	+--------------------------|-- bra.w 13cc0 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13602:	|                          \-> clr.l 136(sp)
   13606:	|                    /-------- bra.w 1371e <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1360a:	|                 /--|-------> move.l 190d0 <bigDataFile>,26(sp)
   13612:	|                 |  |         move.l 190f0 <DOSBase>,d0
   13618:	|                 |  |         movea.l d0,a6
   1361a:	|                 |  |         move.l 26(sp),d1
   1361e:	|                 |  |         jsr -306(a6)
   13622:	|                 |  |         move.l d0,22(sp)
   13626:	|                 |  |         move.l 22(sp),d1
   1362a:	|                 |  |         movea.l 19248 <currentFloor>,a0
   13630:	|                 |  |         movea.l 12(a0),a0
   13634:	|                 |  |         move.l 136(sp),d0
   13638:	|                 |  |         lsl.l #3,d0
   1363a:	|                 |  |         adda.l d0,a0
   1363c:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   1363e:	|                 |  |         movea.l 19248 <currentFloor>,a0
   13644:	|                 |  |         move.l 12(a0),d1
   13648:	|                 |  |         move.l 136(sp),d0
   1364c:	|                 |  |         lsl.l #3,d0
   1364e:	|                 |  |         movea.l d1,a0
   13650:	|                 |  |         adda.l d0,a0
   13652:	|                 |  |         move.l (a0),d0
   13654:	|                 |  |         add.l d0,d0
   13656:	|                 |  |         add.l d0,d0
   13658:	|                 |  |         move.l d0,18(sp)
   1365c:	|                 |  |         clr.l 14(sp)
   13660:	|                 |  |         move.l 190e8 <SysBase>,d0
   13666:	|                 |  |         movea.l d0,a6
   13668:	|                 |  |         move.l 18(sp),d0
   1366c:	|                 |  |         move.l 14(sp),d1
   13670:	|                 |  |         jsr -684(a6)
   13674:	|                 |  |         move.l d0,10(sp)
   13678:	|                 |  |         move.l 10(sp),d1
   1367c:	|                 |  |         movea.l 19248 <currentFloor>,a0
   13682:	|                 |  |         movea.l 12(a0),a0
   13686:	|                 |  |         move.l 136(sp),d0
   1368a:	|                 |  |         lsl.l #3,d0
   1368c:	|                 |  |         adda.l d0,a0
   1368e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   13692:	|                 |  |         movea.l 19248 <currentFloor>,a0
   13698:	|                 |  |         move.l 12(a0),d1
   1369c:	|                 |  |         move.l 136(sp),d0
   136a0:	|                 |  |         lsl.l #3,d0
   136a2:	|                 |  |         movea.l d1,a0
   136a4:	|                 |  |         adda.l d0,a0
   136a6:	|                 |  |         move.l 4(a0),d0
   136aa:	|                 |  |     /-- bne.s 136c0 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   136ac:	|                 |  |     |   pea 16874 <custom.c.177df80b+0x1b9b>
   136b2:	|                 |  |     |   jsr 13da6 <KPrintF>
   136b8:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   136ba:	|                 |  |     |   clr.w d0
   136bc:	+-----------------|--|-----|-- bra.w 13cc0 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   136c0:	|                 |  |     \-> clr.l 132(sp)
   136c4:	|                 |  |     /-- bra.s 136fe <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   136c6:	|                 |  |  /--|-> move.l 190d0 <bigDataFile>,d1
   136cc:	|                 |  |  |  |   movea.l 19248 <currentFloor>,a0
   136d2:	|                 |  |  |  |   movea.l 12(a0),a0
   136d6:	|                 |  |  |  |   move.l 136(sp),d0
   136da:	|                 |  |  |  |   lsl.l #3,d0
   136dc:	|                 |  |  |  |   adda.l d0,a0
   136de:	|                 |  |  |  |   movea.l 4(a0),a0
   136e2:	|                 |  |  |  |   move.l 132(sp),d0
   136e6:	|                 |  |  |  |   add.l d0,d0
   136e8:	|                 |  |  |  |   add.l d0,d0
   136ea:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   136ee:	|                 |  |  |  |   move.l d1,-(sp)
   136f0:	|                 |  |  |  |   jsr 6bc <get2bytes>
   136f6:	|                 |  |  |  |   addq.l #4,sp
   136f8:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   136fa:	|                 |  |  |  |   addq.l #1,132(sp)
   136fe:	|                 |  |  |  \-> movea.l 19248 <currentFloor>,a0
   13704:	|                 |  |  |      move.l 12(a0),d1
   13708:	|                 |  |  |      move.l 136(sp),d0
   1370c:	|                 |  |  |      lsl.l #3,d0
   1370e:	|                 |  |  |      movea.l d1,a0
   13710:	|                 |  |  |      adda.l d0,a0
   13712:	|                 |  |  |      move.l (a0),d0
   13714:	|                 |  |  |      cmp.l 132(sp),d0
   13718:	|                 |  |  \----- bgt.s 136c6 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1371a:	|                 |  |         addq.l #1,136(sp)
   1371e:	|                 |  \-------> movea.l 19248 <currentFloor>,a0
   13724:	|                 |            move.l 8(a0),d0
   13728:	|                 |            cmp.l 136(sp),d0
   1372c:	|                 \----------- bgt.w 1360a <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   13730:	|                              move.l 190d0 <bigDataFile>,d0
   13736:	|                              move.l d0,-(sp)
   13738:	|                              jsr 6bc <get2bytes>
   1373e:	|                              addq.l #4,sp
   13740:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   13744:	|                              move.l 136(sp),d0
   13748:	|                              lsl.l #3,d0
   1374a:	|                              move.l d0,98(sp)
   1374e:	|                              clr.l 94(sp)
   13752:	|                              move.l 190e8 <SysBase>,d0
   13758:	|                              movea.l d0,a6
   1375a:	|                              move.l 98(sp),d0
   1375e:	|                              move.l 94(sp),d1
   13762:	|                              jsr -684(a6)
   13766:	|                              move.l d0,90(sp)
   1376a:	|                              move.l 90(sp),d0
   1376e:	|                              movea.l 19248 <currentFloor>,a0
   13774:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   13778:	|                              movea.l 19248 <currentFloor>,a0
   1377e:	|                              move.l 4(a0),d0
   13782:	|                          /-- bne.s 13798 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   13784:	|                          |   pea 16874 <custom.c.177df80b+0x1b9b>
   1378a:	|                          |   jsr 13da6 <KPrintF>
   13790:	|                          |   addq.l #4,sp
		return FALSE;
   13792:	|                          |   clr.w d0
   13794:	+--------------------------|-- bra.w 13cc0 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   13798:	|                          \-> clr.l 132(sp)
   1379c:	|                          /-- bra.s 137f0 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1379e:	|                       /--|-> move.l 190d0 <bigDataFile>,d1
   137a4:	|                       |  |   movea.l 19248 <currentFloor>,a0
   137aa:	|                       |  |   movea.l 4(a0),a0
   137ae:	|                       |  |   move.l 132(sp),d0
   137b2:	|                       |  |   lsl.l #3,d0
   137b4:	|                       |  |   lea (0,a0,d0.l),a2
   137b8:	|                       |  |   move.l d1,-(sp)
   137ba:	|                       |  |   jsr 6bc <get2bytes>
   137c0:	|                       |  |   addq.l #4,sp
   137c2:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   137c4:	|                       |  |   move.l 190d0 <bigDataFile>,d1
   137ca:	|                       |  |   movea.l 19248 <currentFloor>,a0
   137d0:	|                       |  |   movea.l 4(a0),a0
   137d4:	|                       |  |   move.l 132(sp),d0
   137d8:	|                       |  |   lsl.l #3,d0
   137da:	|                       |  |   lea (0,a0,d0.l),a2
   137de:	|                       |  |   move.l d1,-(sp)
   137e0:	|                       |  |   jsr 6bc <get2bytes>
   137e6:	|                       |  |   addq.l #4,sp
   137e8:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   137ec:	|                       |  |   addq.l #1,132(sp)
   137f0:	|                       |  \-> move.l 132(sp),d0
   137f4:	|                       |      cmp.l 136(sp),d0
   137f8:	|                       \----- blt.s 1379e <setFloor+0x24e>
	}

	finishAccess ();
   137fa:	|                              jsr 4760 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   13800:	|                              movea.l 19248 <currentFloor>,a0
   13806:	|                              move.l 8(a0),d0
   1380a:	|                              add.l d0,d0
   1380c:	|                              add.l d0,d0
   1380e:	|                              move.l d0,86(sp)
   13812:	|                              clr.l 82(sp)
   13816:	|                              move.l 190e8 <SysBase>,d0
   1381c:	|                              movea.l d0,a6
   1381e:	|                              move.l 86(sp),d0
   13822:	|                              move.l 82(sp),d1
   13826:	|                              jsr -684(a6)
   1382a:	|                              move.l d0,78(sp)
   1382e:	|                              move.l 78(sp),d0
   13832:	|                              movea.l 19248 <currentFloor>,a0
   13838:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1383c:	|                              movea.l 19248 <currentFloor>,a0
   13842:	|                              move.l 8(a0),d0
   13846:	|                              add.l d0,d0
   13848:	|                              add.l d0,d0
   1384a:	|                              move.l d0,74(sp)
   1384e:	|                              clr.l 70(sp)
   13852:	|                              move.l 190e8 <SysBase>,d0
   13858:	|                              movea.l d0,a6
   1385a:	|                              move.l 74(sp),d0
   1385e:	|                              move.l 70(sp),d1
   13862:	|                              jsr -684(a6)
   13866:	|                              move.l d0,66(sp)
   1386a:	|                              move.l 66(sp),d0
   1386e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   13872:	|                              movea.l 19248 <currentFloor>,a0
   13878:	|                              move.l 16(a0),d0
   1387c:	|                          /-- bne.s 13892 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   1387e:	|                          |   pea 16874 <custom.c.177df80b+0x1b9b>
   13884:	|                          |   jsr 13da6 <KPrintF>
   1388a:	|                          |   addq.l #4,sp
		return FALSE;
   1388c:	|                          |   clr.w d0
   1388e:	+--------------------------|-- bra.w 13cc0 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13892:	|                          \-> clr.l 136(sp)
   13896:	|                    /-------- bra.w 139ba <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1389a:	|                 /--|-------> movea.l 19248 <currentFloor>,a0
   138a0:	|                 |  |         move.l 8(a0),d0
   138a4:	|                 |  |         add.l d0,d0
   138a6:	|                 |  |         add.l d0,d0
   138a8:	|                 |  |         move.l d0,50(sp)
   138ac:	|                 |  |         clr.l 46(sp)
   138b0:	|                 |  |         move.l 190e8 <SysBase>,d0
   138b6:	|                 |  |         movea.l d0,a6
   138b8:	|                 |  |         move.l 50(sp),d0
   138bc:	|                 |  |         move.l 46(sp),d1
   138c0:	|                 |  |         jsr -684(a6)
   138c4:	|                 |  |         move.l d0,42(sp)
   138c8:	|                 |  |         move.l 42(sp),d0
   138cc:	|                 |  |         movea.l 19248 <currentFloor>,a0
   138d2:	|                 |  |         movea.l 16(a0),a0
   138d6:	|                 |  |         move.l 136(sp),d1
   138da:	|                 |  |         add.l d1,d1
   138dc:	|                 |  |         add.l d1,d1
   138de:	|                 |  |         adda.l d1,a0
   138e0:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   138e2:	|                 |  |         movea.l 19248 <currentFloor>,a0
   138e8:	|                 |  |         move.l 8(a0),d0
   138ec:	|                 |  |         add.l d0,d0
   138ee:	|                 |  |         add.l d0,d0
   138f0:	|                 |  |         move.l d0,38(sp)
   138f4:	|                 |  |         clr.l 34(sp)
   138f8:	|                 |  |         move.l 190e8 <SysBase>,d0
   138fe:	|                 |  |         movea.l d0,a6
   13900:	|                 |  |         move.l 38(sp),d0
   13904:	|                 |  |         move.l 34(sp),d1
   13908:	|                 |  |         jsr -684(a6)
   1390c:	|                 |  |         move.l d0,30(sp)
   13910:	|                 |  |         move.l 30(sp),d1
   13914:	|                 |  |         move.l 136(sp),d0
   13918:	|                 |  |         add.l d0,d0
   1391a:	|                 |  |         add.l d0,d0
   1391c:	|                 |  |         movea.l 62(sp),a0
   13920:	|                 |  |         adda.l d0,a0
   13922:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   13924:	|                 |  |         movea.l 19248 <currentFloor>,a0
   1392a:	|                 |  |         move.l 16(a0),d1
   1392e:	|                 |  |         move.l 136(sp),d0
   13932:	|                 |  |         add.l d0,d0
   13934:	|                 |  |         add.l d0,d0
   13936:	|                 |  |         movea.l d1,a0
   13938:	|                 |  |         adda.l d0,a0
   1393a:	|                 |  |         move.l (a0),d0
   1393c:	|                 |  |     /-- bne.s 13952 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   1393e:	|                 |  |     |   pea 16874 <custom.c.177df80b+0x1b9b>
   13944:	|                 |  |     |   jsr 13da6 <KPrintF>
   1394a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1394c:	|                 |  |     |   clr.w d0
   1394e:	+-----------------|--|-----|-- bra.w 13cc0 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13952:	|                 |  |     \-> clr.l 132(sp)
   13956:	|                 |  |     /-- bra.s 139a6 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   13958:	|                 |  |  /--|-> movea.l 19248 <currentFloor>,a0
   1395e:	|                 |  |  |  |   move.l 16(a0),d1
   13962:	|                 |  |  |  |   move.l 136(sp),d0
   13966:	|                 |  |  |  |   add.l d0,d0
   13968:	|                 |  |  |  |   add.l d0,d0
   1396a:	|                 |  |  |  |   movea.l d1,a0
   1396c:	|                 |  |  |  |   adda.l d0,a0
   1396e:	|                 |  |  |  |   move.l (a0),d1
   13970:	|                 |  |  |  |   move.l 132(sp),d0
   13974:	|                 |  |  |  |   add.l d0,d0
   13976:	|                 |  |  |  |   add.l d0,d0
   13978:	|                 |  |  |  |   movea.l d1,a0
   1397a:	|                 |  |  |  |   adda.l d0,a0
   1397c:	|                 |  |  |  |   moveq #-1,d1
   1397e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   13980:	|                 |  |  |  |   move.l 136(sp),d0
   13984:	|                 |  |  |  |   add.l d0,d0
   13986:	|                 |  |  |  |   add.l d0,d0
   13988:	|                 |  |  |  |   movea.l 62(sp),a0
   1398c:	|                 |  |  |  |   adda.l d0,a0
   1398e:	|                 |  |  |  |   move.l (a0),d1
   13990:	|                 |  |  |  |   move.l 132(sp),d0
   13994:	|                 |  |  |  |   add.l d0,d0
   13996:	|                 |  |  |  |   add.l d0,d0
   13998:	|                 |  |  |  |   movea.l d1,a0
   1399a:	|                 |  |  |  |   adda.l d0,a0
   1399c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   139a2:	|                 |  |  |  |   addq.l #1,132(sp)
   139a6:	|                 |  |  |  \-> movea.l 19248 <currentFloor>,a0
   139ac:	|                 |  |  |      move.l 8(a0),d0
   139b0:	|                 |  |  |      cmp.l 132(sp),d0
   139b4:	|                 |  |  \----- bgt.s 13958 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   139b6:	|                 |  |         addq.l #1,136(sp)
   139ba:	|                 |  \-------> movea.l 19248 <currentFloor>,a0
   139c0:	|                 |            move.l 8(a0),d0
   139c4:	|                 |            cmp.l 136(sp),d0
   139c8:	|                 \----------- bgt.w 1389a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   139cc:	|                              clr.l 136(sp)
   139d0:	|              /-------------- bra.w 13ad6 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   139d4:	|           /--|-------------> clr.l 132(sp)
   139d8:	|           |  |     /-------- bra.w 13ac0 <setFloor+0x570>
			if (i != j) {
   139dc:	|           |  |  /--|-------> move.l 136(sp),d0
   139e0:	|           |  |  |  |         cmp.l 132(sp),d0
   139e4:	|           |  |  |  |     /-- beq.w 13a76 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   139e8:	|           |  |  |  |     |   movea.l 19248 <currentFloor>,a0
   139ee:	|           |  |  |  |     |   move.l 12(a0),d1
   139f2:	|           |  |  |  |     |   move.l 132(sp),d0
   139f6:	|           |  |  |  |     |   lsl.l #3,d0
   139f8:	|           |  |  |  |     |   movea.l d1,a1
   139fa:	|           |  |  |  |     |   adda.l d0,a1
   139fc:	|           |  |  |  |     |   movea.l 19248 <currentFloor>,a0
   13a02:	|           |  |  |  |     |   move.l 12(a0),d1
   13a06:	|           |  |  |  |     |   move.l 136(sp),d0
   13a0a:	|           |  |  |  |     |   lsl.l #3,d0
   13a0c:	|           |  |  |  |     |   movea.l d1,a0
   13a0e:	|           |  |  |  |     |   adda.l d0,a0
   13a10:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   13a14:	|           |  |  |  |     |   move.l (a1),-(sp)
   13a16:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   13a1a:	|           |  |  |  |     |   move.l (a0),-(sp)
   13a1c:	|           |  |  |  |     |   jsr 132a8 <polysShareSide>
   13a22:	|           |  |  |  |     |   lea 16(sp),sp
   13a26:	|           |  |  |  |     |   tst.w d0
   13a28:	|           |  |  |  |  /--|-- beq.w 13abc <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   13a2c:	|           |  |  |  |  |  |   movea.l 19248 <currentFloor>,a0
   13a32:	|           |  |  |  |  |  |   move.l 16(a0),d1
   13a36:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13a3a:	|           |  |  |  |  |  |   add.l d0,d0
   13a3c:	|           |  |  |  |  |  |   add.l d0,d0
   13a3e:	|           |  |  |  |  |  |   movea.l d1,a0
   13a40:	|           |  |  |  |  |  |   adda.l d0,a0
   13a42:	|           |  |  |  |  |  |   move.l (a0),d1
   13a44:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13a48:	|           |  |  |  |  |  |   add.l d0,d0
   13a4a:	|           |  |  |  |  |  |   add.l d0,d0
   13a4c:	|           |  |  |  |  |  |   movea.l d1,a0
   13a4e:	|           |  |  |  |  |  |   adda.l d0,a0
   13a50:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   13a54:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13a58:	|           |  |  |  |  |  |   add.l d0,d0
   13a5a:	|           |  |  |  |  |  |   add.l d0,d0
   13a5c:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   13a60:	|           |  |  |  |  |  |   adda.l d0,a0
   13a62:	|           |  |  |  |  |  |   move.l (a0),d1
   13a64:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13a68:	|           |  |  |  |  |  |   add.l d0,d0
   13a6a:	|           |  |  |  |  |  |   add.l d0,d0
   13a6c:	|           |  |  |  |  |  |   movea.l d1,a0
   13a6e:	|           |  |  |  |  |  |   adda.l d0,a0
   13a70:	|           |  |  |  |  |  |   moveq #1,d1
   13a72:	|           |  |  |  |  |  |   move.l d1,(a0)
   13a74:	|           |  |  |  |  +--|-- bra.s 13abc <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   13a76:	|           |  |  |  |  |  \-> movea.l 19248 <currentFloor>,a0
   13a7c:	|           |  |  |  |  |      move.l 16(a0),d1
   13a80:	|           |  |  |  |  |      move.l 136(sp),d0
   13a84:	|           |  |  |  |  |      add.l d0,d0
   13a86:	|           |  |  |  |  |      add.l d0,d0
   13a88:	|           |  |  |  |  |      movea.l d1,a0
   13a8a:	|           |  |  |  |  |      adda.l d0,a0
   13a8c:	|           |  |  |  |  |      move.l (a0),d1
   13a8e:	|           |  |  |  |  |      move.l 132(sp),d0
   13a92:	|           |  |  |  |  |      add.l d0,d0
   13a94:	|           |  |  |  |  |      add.l d0,d0
   13a96:	|           |  |  |  |  |      movea.l d1,a0
   13a98:	|           |  |  |  |  |      adda.l d0,a0
   13a9a:	|           |  |  |  |  |      moveq #-2,d0
   13a9c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   13a9e:	|           |  |  |  |  |      move.l 136(sp),d0
   13aa2:	|           |  |  |  |  |      add.l d0,d0
   13aa4:	|           |  |  |  |  |      add.l d0,d0
   13aa6:	|           |  |  |  |  |      movea.l 62(sp),a0
   13aaa:	|           |  |  |  |  |      adda.l d0,a0
   13aac:	|           |  |  |  |  |      move.l (a0),d1
   13aae:	|           |  |  |  |  |      move.l 132(sp),d0
   13ab2:	|           |  |  |  |  |      add.l d0,d0
   13ab4:	|           |  |  |  |  |      add.l d0,d0
   13ab6:	|           |  |  |  |  |      movea.l d1,a0
   13ab8:	|           |  |  |  |  |      adda.l d0,a0
   13aba:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13abc:	|           |  |  |  |  \----> addq.l #1,132(sp)
   13ac0:	|           |  |  |  \-------> movea.l 19248 <currentFloor>,a0
   13ac6:	|           |  |  |            move.l 8(a0),d0
   13aca:	|           |  |  |            cmp.l 132(sp),d0
   13ace:	|           |  |  \----------- bgt.w 139dc <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13ad2:	|           |  |               addq.l #1,136(sp)
   13ad6:	|           |  \-------------> movea.l 19248 <currentFloor>,a0
   13adc:	|           |                  move.l 8(a0),d0
   13ae0:	|           |                  cmp.l 136(sp),d0
   13ae4:	|           \----------------- bgt.w 139d4 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   13ae8:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   13aec:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   13af0:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13af4:	|  |                           clr.l 136(sp)
   13af8:	|  |     /-------------------- bra.w 13c4e <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13afc:	|  |  /--|-------------------> clr.l 132(sp)
   13b00:	|  |  |  |     /-------------- bra.w 13c38 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   13b04:	|  |  |  |  /--|-------------> movea.l 19248 <currentFloor>,a0
   13b0a:	|  |  |  |  |  |               move.l 16(a0),d1
   13b0e:	|  |  |  |  |  |               move.l 136(sp),d0
   13b12:	|  |  |  |  |  |               add.l d0,d0
   13b14:	|  |  |  |  |  |               add.l d0,d0
   13b16:	|  |  |  |  |  |               movea.l d1,a0
   13b18:	|  |  |  |  |  |               adda.l d0,a0
   13b1a:	|  |  |  |  |  |               move.l (a0),d1
   13b1c:	|  |  |  |  |  |               move.l 132(sp),d0
   13b20:	|  |  |  |  |  |               add.l d0,d0
   13b22:	|  |  |  |  |  |               add.l d0,d0
   13b24:	|  |  |  |  |  |               movea.l d1,a0
   13b26:	|  |  |  |  |  |               adda.l d0,a0
   13b28:	|  |  |  |  |  |               move.l (a0),d0
   13b2a:	|  |  |  |  |  |               moveq #-1,d1
   13b2c:	|  |  |  |  |  |               cmp.l d0,d1
   13b2e:	|  |  |  |  |  |  /----------- bne.w 13c34 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   13b32:	|  |  |  |  |  |  |            clr.l 122(sp)
   13b36:	|  |  |  |  |  |  |     /----- bra.w 13c22 <setFloor+0x6d2>
						if (d != i && d != j) {
   13b3a:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   13b3e:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   13b42:	|  |  |  |  |  |  |  |  |  /-- beq.w 13c1e <setFloor+0x6ce>
   13b46:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   13b4a:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   13b4e:	|  |  |  |  |  |  |  |  |  +-- beq.w 13c1e <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   13b52:	|  |  |  |  |  |  |  |  |  |   movea.l 19248 <currentFloor>,a0
   13b58:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13b5c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13b60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b62:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b64:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13b66:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13b68:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13b6a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13b6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13b74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13b76:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   13b78:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   13b7c:	|  |  |  |  |  |  |  |  |  +-- bne.w 13c1e <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   13b80:	|  |  |  |  |  |  |  |  |  |   movea.l 19248 <currentFloor>,a0
   13b86:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13b8a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13b8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b92:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13b94:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13b96:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13b98:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13b9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13ba0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13ba2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13ba4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   13ba6:	|  |  |  |  |  |  |  |  |  +-- bmi.s 13c1e <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   13ba8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13bac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bb0:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13bb4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bb6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13bb8:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13bbc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bbe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bc0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13bc2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bc4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   13bc6:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   13bca:	|  |  |  |  |  |  |  |  |  +-- bgt.s 13c1e <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   13bcc:	|  |  |  |  |  |  |  |  |  |   movea.l 19248 <currentFloor>,a0
   13bd2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13bd6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13bda:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bdc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bde:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13be0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13be2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13be4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13be8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bec:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13bee:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bf0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   13bf4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13bf8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bfa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bfc:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13c00:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13c02:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13c04:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13c08:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c0a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c0c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13c0e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13c10:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   13c14:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   13c16:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   13c18:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   13c1e:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   13c22:	|  |  |  |  |  |  |  |  \----> movea.l 19248 <currentFloor>,a0
   13c28:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   13c2c:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   13c30:	|  |  |  |  |  |  |  \-------- bgt.w 13b3a <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13c34:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   13c38:	|  |  |  |  |  \-------------> movea.l 19248 <currentFloor>,a0
   13c3e:	|  |  |  |  |                  move.l 8(a0),d0
   13c42:	|  |  |  |  |                  cmp.l 132(sp),d0
   13c46:	|  |  |  |  \----------------- bgt.w 13b04 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13c4a:	|  |  |  |                     addq.l #1,136(sp)
   13c4e:	|  |  |  \-------------------> movea.l 19248 <currentFloor>,a0
   13c54:	|  |  |                        move.l 8(a0),d0
   13c58:	|  |  |                        cmp.l 136(sp),d0
   13c5c:	|  |  \----------------------- bgt.w 13afc <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   13c60:	|  |                           tst.w 130(sp)
   13c64:	|  \-------------------------- bne.w 13aec <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13c68:	|                              clr.l 136(sp)
   13c6c:	|                          /-- bra.s 13c94 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   13c6e:	|                       /--|-> move.l 136(sp),d0
   13c72:	|                       |  |   add.l d0,d0
   13c74:	|                       |  |   add.l d0,d0
   13c76:	|                       |  |   movea.l 62(sp),a0
   13c7a:	|                       |  |   adda.l d0,a0
   13c7c:	|                       |  |   move.l (a0),54(sp)
   13c80:	|                       |  |   move.l 190e8 <SysBase>,d0
   13c86:	|                       |  |   movea.l d0,a6
   13c88:	|                       |  |   movea.l 54(sp),a1
   13c8c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13c90:	|                       |  |   addq.l #1,136(sp)
   13c94:	|                       |  \-> movea.l 19248 <currentFloor>,a0
   13c9a:	|                       |      move.l 8(a0),d0
   13c9e:	|                       |      cmp.l 136(sp),d0
   13ca2:	|                       \----- bgt.s 13c6e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   13ca4:	|                              move.l 62(sp),58(sp)
   13caa:	|                              move.l 190e8 <SysBase>,d0
   13cb0:	|                              movea.l d0,a6
   13cb2:	|                              movea.l 58(sp),a1
   13cb6:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   13cba:	|                              clr.l 62(sp)

	return TRUE;
   13cbe:	|                              moveq #1,d0
}
   13cc0:	\----------------------------> movea.l (sp)+,a2
   13cc2:	                               movea.l (sp)+,a6
   13cc4:	                               lea 132(sp),sp
   13cc8:	                               rts

00013cca <setFloorNull>:

void setFloorNull () {
	killFloor ();
   13cca:	jsr 131b8 <killFloor>
	noFloor ();
   13cd0:	jsr 130dc <noFloor>
   13cd6:	nop
   13cd8:	rts

00013cda <WaitVbl>:
void WaitVbl() {
   13cda:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   13cdc:	   /-> movea.l #14675972,a0
   13ce2:	   |   move.l (a0),d0
   13ce4:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   13ce6:	   |   move.l (sp),d0
   13ce8:	   |   andi.l #130816,d0
   13cee:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   13cf0:	   |   move.l (sp),d0
   13cf2:	   |   cmpi.l #76800,d0
   13cf8:	   \-- beq.s 13cdc <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   13cfa:	/----> movea.l #14675972,a0
   13d00:	|      move.l (a0),d0
   13d02:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   13d06:	|      move.l 4(sp),d0
   13d0a:	|      andi.l #130816,d0
   13d10:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   13d14:	|      move.l 4(sp),d0
   13d18:	|      cmpi.l #76800,d0
   13d1e:	|  /-- beq.s 13d22 <WaitVbl+0x48>
	while (1) {
   13d20:	\--|-- bra.s 13cfa <WaitVbl+0x20>
			break;
   13d22:	   \-> nop
}
   13d24:	       nop
   13d26:	       addq.l #8,sp
   13d28:	       rts

00013d2a <memset>:
void* memset(void *dest, int val, unsigned long len) {
   13d2a:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   13d2c:	       move.l 8(sp),(sp)
	while(len-- > 0)
   13d30:	   /-- bra.s 13d42 <memset+0x18>
		*ptr++ = val;
   13d32:	/--|-> move.l (sp),d0
   13d34:	|  |   move.l d0,d1
   13d36:	|  |   addq.l #1,d1
   13d38:	|  |   move.l d1,(sp)
   13d3a:	|  |   move.l 12(sp),d1
   13d3e:	|  |   movea.l d0,a0
   13d40:	|  |   move.b d1,(a0)
	while(len-- > 0)
   13d42:	|  \-> move.l 16(sp),d0
   13d46:	|      move.l d0,d1
   13d48:	|      subq.l #1,d1
   13d4a:	|      move.l d1,16(sp)
   13d4e:	|      tst.l d0
   13d50:	\----- bne.s 13d32 <memset+0x8>
	return dest;
   13d52:	       move.l 8(sp),d0
}
   13d56:	       addq.l #4,sp
   13d58:	       rts

00013d5a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   13d5a:	       subq.l #8,sp
   13d5c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   13d5e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   13d64:	       move.l 20(sp),4(sp)
	while(len--)
   13d6a:	   /-- bra.s 13d8c <memcpy+0x32>
		*d++ = *s++;
   13d6c:	/--|-> move.l 4(sp),d1
   13d70:	|  |   move.l d1,d0
   13d72:	|  |   addq.l #1,d0
   13d74:	|  |   move.l d0,4(sp)
   13d78:	|  |   move.l 8(sp),d0
   13d7c:	|  |   move.l d0,d2
   13d7e:	|  |   addq.l #1,d2
   13d80:	|  |   move.l d2,8(sp)
   13d84:	|  |   movea.l d1,a0
   13d86:	|  |   move.b (a0),d1
   13d88:	|  |   movea.l d0,a0
   13d8a:	|  |   move.b d1,(a0)
	while(len--)
   13d8c:	|  \-> move.l 24(sp),d0
   13d90:	|      move.l d0,d1
   13d92:	|      subq.l #1,d1
   13d94:	|      move.l d1,24(sp)
   13d98:	|      tst.l d0
   13d9a:	\----- bne.s 13d6c <memcpy+0x12>
	return dest;
   13d9c:	       move.l 16(sp),d0
}
   13da0:	       move.l (sp)+,d2
   13da2:	       addq.l #8,sp
   13da4:	       rts

00013da6 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   13da6:	       lea -128(sp),sp
   13daa:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13dae:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd0ae>,d0
   13db4:	       cmpi.w #20153,d0
   13db8:	   /-- beq.s 13ddc <KPrintF+0x36>
   13dba:	   |   cmpi.w #-24562,d0
   13dbe:	   +-- beq.s 13ddc <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   13dc0:	   |   movea.l 190e8 <SysBase>,a6
   13dc6:	   |   movea.l 144(sp),a0
   13dca:	   |   lea 148(sp),a1
   13dce:	   |   lea 1486c <KPutCharX>,a2
   13dd4:	   |   suba.l a3,a3
   13dd6:	   |   jsr -522(a6)
}
   13dda:	/--|-- bra.s 13e06 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   13ddc:	|  \-> movea.l 190e8 <SysBase>,a6
   13de2:	|      movea.l 144(sp),a0
   13de6:	|      lea 148(sp),a1
   13dea:	|      lea 1487a <PutChar>,a2
   13df0:	|      lea 12(sp),a3
   13df4:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   13df8:	|      move.l a3,-(sp)
   13dfa:	|      pea 56 <_start+0x56>
   13dfe:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd0ae>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13e04:	|      addq.l #8,sp
}
   13e06:	\----> movem.l (sp)+,a2-a3/a6
   13e0a:	       lea 128(sp),sp
   13e0e:	       rts

00013e10 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   13e10:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   13e12:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   13e18:	       movea.l (sp),a0
   13e1a:	       move.w (a0),d0
   13e1c:	       cmpi.w #20153,d0
   13e20:	   /-- beq.s 13e2c <debug_cmd+0x1c>
   13e22:	   |   movea.l (sp),a0
   13e24:	   |   move.w (a0),d0
   13e26:	   |   cmpi.w #-24562,d0
   13e2a:	/--|-- bne.s 13e4a <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   13e2c:	|  \-> move.l 20(sp),-(sp)
   13e30:	|      move.l 20(sp),-(sp)
   13e34:	|      move.l 20(sp),-(sp)
   13e38:	|      move.l 20(sp),-(sp)
   13e3c:	|      pea 58 <_start+0x58>
   13e40:	|      movea.l 20(sp),a0
   13e44:	|      jsr (a0)
   13e46:	|      lea 20(sp),sp
	}
}
   13e4a:	\----> nop
   13e4c:	       addq.l #4,sp
   13e4e:	       rts

00013e50 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   13e50:	       move.l d2,-(sp)
	while(*source && --num > 0)
   13e52:	   /-- bra.s 13e74 <my_strncpy+0x24>
		*destination++ = *source++;
   13e54:	/--|-> move.l 12(sp),d1
   13e58:	|  |   move.l d1,d0
   13e5a:	|  |   addq.l #1,d0
   13e5c:	|  |   move.l d0,12(sp)
   13e60:	|  |   move.l 8(sp),d0
   13e64:	|  |   move.l d0,d2
   13e66:	|  |   addq.l #1,d2
   13e68:	|  |   move.l d2,8(sp)
   13e6c:	|  |   movea.l d1,a0
   13e6e:	|  |   move.b (a0),d1
   13e70:	|  |   movea.l d0,a0
   13e72:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   13e74:	|  \-> movea.l 12(sp),a0
   13e78:	|      move.b (a0),d0
   13e7a:	|  /-- beq.s 13e82 <my_strncpy+0x32>
   13e7c:	|  |   subq.l #1,16(sp)
   13e80:	\--|-- bne.s 13e54 <my_strncpy+0x4>
	*destination = '\0';
   13e82:	   \-> movea.l 8(sp),a0
   13e86:	       clr.b (a0)
}
   13e88:	       nop
   13e8a:	       move.l (sp)+,d2
   13e8c:	       rts

00013e8e <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   13e8e:	    lea -60(sp),sp
   13e92:	    movea.l 72(sp),a1
   13e96:	    movea.l 76(sp),a0
   13e9a:	    move.l 80(sp),d1
   13e9e:	    move.l 84(sp),d0
   13ea2:	    movea.w a1,a1
   13ea4:	    move.w a1,8(sp)
   13ea8:	    movea.w a0,a0
   13eaa:	    move.w a0,6(sp)
   13eae:	    move.w d1,d1
   13eb0:	    move.w d1,4(sp)
   13eb4:	    move.w d0,d0
   13eb6:	    move.w d0,2(sp)
	struct debug_resource resource = {
   13eba:	    lea 10(sp),a0
   13ebe:	    clr.l (a0)
   13ec0:	    addq.l #4,a0
   13ec2:	    clr.l (a0)
   13ec4:	    addq.l #4,a0
   13ec6:	    clr.l (a0)
   13ec8:	    addq.l #4,a0
   13eca:	    clr.l (a0)
   13ecc:	    addq.l #4,a0
   13ece:	    clr.l (a0)
   13ed0:	    addq.l #4,a0
   13ed2:	    clr.l (a0)
   13ed4:	    addq.l #4,a0
   13ed6:	    clr.l (a0)
   13ed8:	    addq.l #4,a0
   13eda:	    clr.l (a0)
   13edc:	    addq.l #4,a0
   13ede:	    clr.l (a0)
   13ee0:	    addq.l #4,a0
   13ee2:	    clr.l (a0)
   13ee4:	    addq.l #4,a0
   13ee6:	    clr.l (a0)
   13ee8:	    addq.l #4,a0
   13eea:	    clr.l (a0)
   13eec:	    addq.l #4,a0
   13eee:	    clr.w (a0)
   13ef0:	    addq.l #2,a0
		.address = (unsigned int)addr,
   13ef2:	    move.l 64(sp),d0
	struct debug_resource resource = {
   13ef6:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   13efa:	    move.w 8(sp),d0
   13efe:	/-- bpl.s 13f02 <debug_register_bitmap+0x74>
   13f00:	|   addq.w #7,d0
   13f02:	\-> asr.w #3,d0
   13f04:	    movea.w d0,a0
   13f06:	    movea.w 6(sp),a1
   13f0a:	    move.l a1,-(sp)
   13f0c:	    move.l a0,-(sp)
   13f0e:	    jsr 14764 <__mulsi3>
   13f14:	    addq.l #8,sp
   13f16:	    movea.w 4(sp),a0
   13f1a:	    move.l a0,-(sp)
   13f1c:	    move.l d0,-(sp)
   13f1e:	    jsr 14764 <__mulsi3>
   13f24:	    addq.l #8,sp
	struct debug_resource resource = {
   13f26:	    move.l d0,14(sp)
   13f2a:	    move.w 2(sp),52(sp)
   13f30:	    move.w 8(sp),54(sp)
   13f36:	    move.w 6(sp),56(sp)
   13f3c:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   13f42:	    moveq #0,d0
   13f44:	    move.w 2(sp),d0
   13f48:	    moveq #2,d1
   13f4a:	    and.l d1,d0
   13f4c:	/-- beq.s 13f58 <debug_register_bitmap+0xca>
		resource.size *= 2;
   13f4e:	|   move.l 14(sp),d0
   13f52:	|   add.l d0,d0
   13f54:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   13f58:	\-> pea 20 <_start+0x20>
   13f5c:	    move.l 72(sp),-(sp)
   13f60:	    lea 18(sp),a0
   13f64:	    move.l a0,d0
   13f66:	    addq.l #8,d0
   13f68:	    move.l d0,-(sp)
   13f6a:	    jsr 13e50 <my_strncpy>
   13f70:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   13f74:	    lea 10(sp),a0
   13f78:	    clr.l -(sp)
   13f7a:	    clr.l -(sp)
   13f7c:	    move.l a0,-(sp)
   13f7e:	    pea 4 <_start+0x4>
   13f82:	    jsr 13e10 <debug_cmd>
   13f88:	    lea 16(sp),sp
}
   13f8c:	    nop
   13f8e:	    lea 60(sp),sp
   13f92:	    rts

00013f94 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   13f94:	lea -12(sp),sp
   13f98:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   13f9a:	move.l 20(sp),12(sp)
   13fa0:	move.l 24(sp),8(sp)
   13fa6:	move.l 190f8 <MathIeeeSingBasBase>,d0
   13fac:	movea.l d0,a6
   13fae:	move.l 12(sp),d0
   13fb2:	move.l 8(sp),d1
   13fb6:	jsr -66(a6)
   13fba:	move.l d0,4(sp)
   13fbe:	move.l 4(sp),d0
}
   13fc2:	movea.l (sp)+,a6
   13fc4:	lea 12(sp),sp
   13fc8:	rts

00013fca <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   13fca:	lea -32(sp),sp
   13fce:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   13fd2:	move.l 48(sp),36(sp)
   13fd8:	move.l 52(sp),40(sp)
   13fde:	move.l 56(sp),28(sp)
   13fe4:	move.l 60(sp),32(sp)
   13fea:	move.l 19100 <MathIeeeDoubBasBase>,d0
   13ff0:	movea.l d0,a6
   13ff2:	move.l 36(sp),d0
   13ff6:	move.l 40(sp),d1
   13ffa:	move.l 28(sp),d2
   13ffe:	move.l 32(sp),d3
   14002:	jsr -66(a6)
   14006:	move.l d0,12(sp)
   1400a:	move.l d1,16(sp)
   1400e:	move.l 12(sp),20(sp)
   14014:	move.l 16(sp),24(sp)
   1401a:	move.l 20(sp),d0
   1401e:	move.l 24(sp),d1
}
   14022:	movem.l (sp)+,d2-d3/a6
   14026:	lea 32(sp),sp
   1402a:	rts

0001402c <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1402c:	lea -32(sp),sp
   14030:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   14034:	move.l 48(sp),36(sp)
   1403a:	move.l 52(sp),40(sp)
   14040:	move.l 56(sp),28(sp)
   14046:	move.l 60(sp),32(sp)
   1404c:	move.l 19100 <MathIeeeDoubBasBase>,d0
   14052:	movea.l d0,a6
   14054:	move.l 36(sp),d0
   14058:	move.l 40(sp),d1
   1405c:	move.l 28(sp),d2
   14060:	move.l 32(sp),d3
   14064:	jsr -84(a6)
   14068:	move.l d0,12(sp)
   1406c:	move.l d1,16(sp)
   14070:	move.l 12(sp),20(sp)
   14076:	move.l 16(sp),24(sp)
   1407c:	move.l 20(sp),d0
   14080:	move.l 24(sp),d1
}
   14084:	movem.l (sp)+,d2-d3/a6
   14088:	lea 32(sp),sp
   1408c:	rts

0001408e <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1408e:	lea -12(sp),sp
   14092:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   14094:	move.l 20(sp),12(sp)
   1409a:	move.l 24(sp),8(sp)
   140a0:	move.l 190f8 <MathIeeeSingBasBase>,d0
   140a6:	movea.l d0,a6
   140a8:	move.l 12(sp),d0
   140ac:	move.l 8(sp),d1
   140b0:	jsr -84(a6)
   140b4:	move.l d0,4(sp)
   140b8:	move.l 4(sp),d0
}
   140bc:	movea.l (sp)+,a6
   140be:	lea 12(sp),sp
   140c2:	rts

000140c4 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   140c4:	lea -12(sp),sp
   140c8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   140ca:	move.l 20(sp),12(sp)
   140d0:	move.l 24(sp),8(sp)
   140d6:	move.l 190f8 <MathIeeeSingBasBase>,d0
   140dc:	movea.l d0,a6
   140de:	move.l 12(sp),d0
   140e2:	move.l 8(sp),d1
   140e6:	jsr -42(a6)
   140ea:	move.l d0,4(sp)
   140ee:	move.l 4(sp),d0
}
   140f2:	movea.l (sp)+,a6
   140f4:	lea 12(sp),sp
   140f8:	rts

000140fa <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   140fa:	lea -20(sp),sp
   140fe:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   14100:	move.l 28(sp),20(sp)
   14106:	move.l 19104 <MathIeeeDoubTransBase>,d0
   1410c:	movea.l d0,a6
   1410e:	move.l 20(sp),d0
   14112:	jsr -108(a6)
   14116:	move.l d0,4(sp)
   1411a:	move.l d1,8(sp)
   1411e:	move.l 4(sp),12(sp)
   14124:	move.l 8(sp),16(sp)
   1412a:	move.l 12(sp),d0
   1412e:	move.l 16(sp),d1
}
   14132:	movea.l (sp)+,a6
   14134:	lea 20(sp),sp
   14138:	rts

0001413a <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   1413a:	lea -12(sp),sp
   1413e:	move.l a6,-(sp)
	return IEEEDPFix(value);
   14140:	move.l 20(sp),8(sp)
   14146:	move.l 24(sp),12(sp)
   1414c:	move.l 19100 <MathIeeeDoubBasBase>,d0
   14152:	movea.l d0,a6
   14154:	move.l 8(sp),d0
   14158:	move.l 12(sp),d1
   1415c:	jsr -30(a6)
   14160:	move.l d0,4(sp)
   14164:	move.l 4(sp),d0
   14168:	move.l d0,-(sp)
   1416a:	jsr 141a2 <__floatsidf>
   14170:	addq.l #4,sp
}
   14172:	movea.l (sp)+,a6
   14174:	lea 12(sp),sp
   14178:	rts

0001417a <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1417a:	subq.l #8,sp
   1417c:	move.l a6,-(sp)
	return IEEESPFix(value);
   1417e:	move.l 16(sp),8(sp)
   14184:	move.l 190f8 <MathIeeeSingBasBase>,d0
   1418a:	movea.l d0,a6
   1418c:	move.l 8(sp),d0
   14190:	jsr -30(a6)
   14194:	move.l d0,4(sp)
   14198:	move.l 4(sp),d0
}
   1419c:	movea.l (sp)+,a6
   1419e:	addq.l #8,sp
   141a0:	rts

000141a2 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   141a2:	lea -20(sp),sp
   141a6:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   141a8:	move.l 28(sp),20(sp)
   141ae:	move.l 19100 <MathIeeeDoubBasBase>,d0
   141b4:	movea.l d0,a6
   141b6:	move.l 20(sp),d0
   141ba:	jsr -36(a6)
   141be:	move.l d0,4(sp)
   141c2:	move.l d1,8(sp)
   141c6:	move.l 4(sp),12(sp)
   141cc:	move.l 8(sp),16(sp)
   141d2:	move.l 12(sp),d0
   141d6:	move.l 16(sp),d1
}
   141da:	movea.l (sp)+,a6
   141dc:	lea 20(sp),sp
   141e0:	rts

000141e2 <__floatsisf>:

FLOAT __floatsisf(int i) {
   141e2:	subq.l #8,sp
   141e4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   141e6:	move.l 16(sp),8(sp)
   141ec:	move.l 190f8 <MathIeeeSingBasBase>,d0
   141f2:	movea.l d0,a6
   141f4:	move.l 8(sp),d0
   141f8:	jsr -36(a6)
   141fc:	move.l d0,4(sp)
   14200:	move.l 4(sp),d0
}
   14204:	movea.l (sp)+,a6
   14206:	addq.l #8,sp
   14208:	rts

0001420a <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1420a:	subq.l #8,sp
   1420c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1420e:	move.l 16(sp),8(sp)
   14214:	move.l 190f8 <MathIeeeSingBasBase>,d0
   1421a:	movea.l d0,a6
   1421c:	move.l 8(sp),d0
   14220:	jsr -36(a6)
   14224:	move.l d0,4(sp)
   14228:	move.l 4(sp),d0
}
   1422c:	movea.l (sp)+,a6
   1422e:	addq.l #8,sp
   14230:	rts

00014232 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   14232:	lea -32(sp),sp
   14236:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1423a:	move.l 48(sp),36(sp)
   14240:	move.l 52(sp),40(sp)
   14246:	move.l 56(sp),28(sp)
   1424c:	move.l 60(sp),32(sp)
   14252:	move.l 19100 <MathIeeeDoubBasBase>,d0
   14258:	movea.l d0,a6
   1425a:	move.l 36(sp),d0
   1425e:	move.l 40(sp),d1
   14262:	move.l 28(sp),d2
   14266:	move.l 32(sp),d3
   1426a:	jsr -78(a6)
   1426e:	move.l d0,12(sp)
   14272:	move.l d1,16(sp)
   14276:	move.l 12(sp),20(sp)
   1427c:	move.l 16(sp),24(sp)
   14282:	move.l 20(sp),d0
   14286:	move.l 24(sp),d1
}
   1428a:	movem.l (sp)+,d2-d3/a6
   1428e:	lea 32(sp),sp
   14292:	rts

00014294 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   14294:	lea -12(sp),sp
   14298:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1429a:	move.l 20(sp),12(sp)
   142a0:	move.l 24(sp),8(sp)
   142a6:	move.l 190f8 <MathIeeeSingBasBase>,d0
   142ac:	movea.l d0,a6
   142ae:	move.l 12(sp),d0
   142b2:	move.l 8(sp),d1
   142b6:	jsr -78(a6)
   142ba:	move.l d0,4(sp)
   142be:	move.l 4(sp),d0
}
   142c2:	movea.l (sp)+,a6
   142c4:	lea 12(sp),sp
   142c8:	rts

000142ca <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   142ca:	lea -12(sp),sp
   142ce:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   142d0:	move.l 20(sp),12(sp)
   142d6:	move.l 24(sp),8(sp)
   142dc:	move.l 190f8 <MathIeeeSingBasBase>,d0
   142e2:	movea.l d0,a6
   142e4:	move.l 12(sp),d0
   142e8:	move.l 8(sp),d1
   142ec:	jsr -42(a6)
   142f0:	move.l d0,4(sp)
   142f4:	move.l 4(sp),d0
}
   142f8:	movea.l (sp)+,a6
   142fa:	lea 12(sp),sp
   142fe:	rts

00014300 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   14300:	lea -20(sp),sp
   14304:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   14308:	move.l 36(sp),24(sp)
   1430e:	move.l 40(sp),28(sp)
   14314:	move.l 44(sp),16(sp)
   1431a:	move.l 48(sp),20(sp)
   14320:	move.l 19100 <MathIeeeDoubBasBase>,d0
   14326:	movea.l d0,a6
   14328:	move.l 24(sp),d0
   1432c:	move.l 28(sp),d1
   14330:	move.l 16(sp),d2
   14334:	move.l 20(sp),d3
   14338:	jsr -42(a6)
   1433c:	move.l d0,12(sp)
   14340:	move.l 12(sp),d0
}
   14344:	movem.l (sp)+,d2-d3/a6
   14348:	lea 20(sp),sp
   1434c:	rts

0001434e <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1434e:	lea -12(sp),sp
   14352:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14354:	move.l 20(sp),12(sp)
   1435a:	move.l 24(sp),8(sp)
   14360:	move.l 190f8 <MathIeeeSingBasBase>,d0
   14366:	movea.l d0,a6
   14368:	move.l 12(sp),d0
   1436c:	move.l 8(sp),d1
   14370:	jsr -42(a6)
   14374:	move.l d0,4(sp)
   14378:	move.l 4(sp),d0
}
   1437c:	movea.l (sp)+,a6
   1437e:	lea 12(sp),sp
   14382:	rts

00014384 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   14384:	lea -12(sp),sp
   14388:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1438a:	move.l 20(sp),12(sp)
   14390:	move.l 24(sp),8(sp)
   14396:	move.l 190f8 <MathIeeeSingBasBase>,d0
   1439c:	movea.l d0,a6
   1439e:	move.l 12(sp),d0
   143a2:	move.l 8(sp),d1
   143a6:	jsr -42(a6)
   143aa:	move.l d0,4(sp)
   143ae:	move.l 4(sp),d0
}
   143b2:	movea.l (sp)+,a6
   143b4:	lea 12(sp),sp
   143b8:	rts

000143ba <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   143ba:	lea -20(sp),sp
   143be:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   143c2:	move.l 36(sp),24(sp)
   143c8:	move.l 40(sp),28(sp)
   143ce:	move.l 44(sp),16(sp)
   143d4:	move.l 48(sp),20(sp)
   143da:	move.l 19100 <MathIeeeDoubBasBase>,d0
   143e0:	movea.l d0,a6
   143e2:	move.l 24(sp),d0
   143e6:	move.l 28(sp),d1
   143ea:	move.l 16(sp),d2
   143ee:	move.l 20(sp),d3
   143f2:	jsr -42(a6)
   143f6:	move.l d0,12(sp)
   143fa:	move.l 12(sp),d0
}
   143fe:	movem.l (sp)+,d2-d3/a6
   14402:	lea 20(sp),sp
   14406:	rts

00014408 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   14408:	lea -12(sp),sp
   1440c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1440e:	move.l 20(sp),12(sp)
   14414:	move.l 24(sp),8(sp)
   1441a:	move.l 190f8 <MathIeeeSingBasBase>,d0
   14420:	movea.l d0,a6
   14422:	move.l 12(sp),d0
   14426:	move.l 8(sp),d1
   1442a:	jsr -42(a6)
   1442e:	move.l d0,4(sp)
   14432:	move.l 4(sp),d0
}
   14436:	movea.l (sp)+,a6
   14438:	lea 12(sp),sp
   1443c:	rts

0001443e <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1443e:	lea -12(sp),sp
   14442:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14444:	move.l 20(sp),12(sp)
   1444a:	move.l 24(sp),8(sp)
   14450:	move.l 190f8 <MathIeeeSingBasBase>,d0
   14456:	movea.l d0,a6
   14458:	move.l 12(sp),d0
   1445c:	move.l 8(sp),d1
   14460:	jsr -42(a6)
   14464:	move.l d0,4(sp)
   14468:	move.l 4(sp),d0
}
   1446c:	movea.l (sp)+,a6
   1446e:	lea 12(sp),sp
   14472:	rts

00014474 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   14474:	lea -32(sp),sp
   14478:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1447c:	move.l 48(sp),36(sp)
   14482:	move.l 52(sp),40(sp)
   14488:	move.l 56(sp),28(sp)
   1448e:	move.l 60(sp),32(sp)
   14494:	move.l 19100 <MathIeeeDoubBasBase>,d0
   1449a:	movea.l d0,a6
   1449c:	move.l 36(sp),d0
   144a0:	move.l 40(sp),d1
   144a4:	move.l 28(sp),d2
   144a8:	move.l 32(sp),d3
   144ac:	jsr -72(a6)
   144b0:	move.l d0,12(sp)
   144b4:	move.l d1,16(sp)
   144b8:	move.l 12(sp),20(sp)
   144be:	move.l 16(sp),24(sp)
   144c4:	move.l 20(sp),d0
   144c8:	move.l 24(sp),d1
}
   144cc:	movem.l (sp)+,d2-d3/a6
   144d0:	lea 32(sp),sp
   144d4:	rts

000144d6 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   144d6:	lea -12(sp),sp
   144da:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   144dc:	move.l 20(sp),12(sp)
   144e2:	move.l 24(sp),8(sp)
   144e8:	move.l 190f8 <MathIeeeSingBasBase>,d0
   144ee:	movea.l d0,a6
   144f0:	move.l 12(sp),d0
   144f4:	move.l 8(sp),d1
   144f8:	jsr -72(a6)
   144fc:	move.l d0,4(sp)
   14500:	move.l 4(sp),d0
}
   14504:	movea.l (sp)+,a6
   14506:	lea 12(sp),sp
   1450a:	rts

0001450c <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1450c:	lea -12(sp),sp
   14510:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   14512:	move.l 20(sp),8(sp)
   14518:	move.l 24(sp),12(sp)
   1451e:	move.l 19104 <MathIeeeDoubTransBase>,d0
   14524:	movea.l d0,a6
   14526:	move.l 8(sp),d0
   1452a:	move.l 12(sp),d1
   1452e:	jsr -102(a6)
   14532:	move.l d0,4(sp)
   14536:	move.l 4(sp),d0
}
   1453a:	movea.l (sp)+,a6
   1453c:	lea 12(sp),sp
   14540:	rts

00014542 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   14542:	subq.l #8,sp
   14544:	move.l a6,-(sp)
	return IEEESPFix(a);
   14546:	move.l 16(sp),8(sp)
   1454c:	move.l 190f8 <MathIeeeSingBasBase>,d0
   14552:	movea.l d0,a6
   14554:	move.l 8(sp),d0
   14558:	jsr -30(a6)
   1455c:	move.l d0,4(sp)
   14560:	move.l 4(sp),d0
}
   14564:	movea.l (sp)+,a6
   14566:	addq.l #8,sp
   14568:	rts

0001456a <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1456a:	       lea -24(sp),sp
   1456e:	       move.l a6,-(sp)
    if (x > 0) {
   14570:	       clr.l -(sp)
   14572:	       move.l 40(sp),-(sp)
   14576:	       jsr 1434e <__gtsf2>
   1457c:	       addq.l #8,sp
   1457e:	       tst.l d0
   14580:	   /-- ble.s 145b2 <atan2f+0x48>
        return IEEESPAtan(y / x);
   14582:	   |   move.l 36(sp),-(sp)
   14586:	   |   move.l 36(sp),-(sp)
   1458a:	   |   jsr 1408e <__divsf3>
   14590:	   |   addq.l #8,sp
   14592:	   |   move.l d0,8(sp)
   14596:	   |   move.l 190fc <MathIeeeSingTransBase>,d0
   1459c:	   |   movea.l d0,a6
   1459e:	   |   move.l 8(sp),d0
   145a2:	   |   jsr -30(a6)
   145a6:	   |   move.l d0,4(sp)
   145aa:	   |   move.l 4(sp),d0
   145ae:	/--|-- bra.w 14712 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   145b2:	|  \-> clr.l -(sp)
   145b4:	|      move.l 40(sp),-(sp)
   145b8:	|      jsr 14408 <__ltsf2>
   145be:	|      addq.l #8,sp
   145c0:	|      tst.l d0
   145c2:	|  /-- bge.s 14636 <atan2f+0xcc>
   145c4:	|  |   clr.l -(sp)
   145c6:	|  |   move.l 36(sp),-(sp)
   145ca:	|  |   jsr 142ca <__gesf2>
   145d0:	|  |   addq.l #8,sp
   145d2:	|  |   tst.l d0
   145d4:	|  +-- blt.s 14636 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   145d6:	|  |   move.l 36(sp),-(sp)
   145da:	|  |   move.l 36(sp),-(sp)
   145de:	|  |   jsr 1408e <__divsf3>
   145e4:	|  |   addq.l #8,sp
   145e6:	|  |   move.l d0,24(sp)
   145ea:	|  |   move.l 190fc <MathIeeeSingTransBase>,d0
   145f0:	|  |   movea.l d0,a6
   145f2:	|  |   move.l 24(sp),d0
   145f6:	|  |   jsr -30(a6)
   145fa:	|  |   move.l d0,20(sp)
   145fe:	|  |   move.l 20(sp),d0
   14602:	|  |   move.l d0,-(sp)
   14604:	|  |   jsr 140fa <__extendsfdf2>
   1460a:	|  |   addq.l #4,sp
   1460c:	|  |   move.l #1413754136,-(sp)
   14612:	|  |   move.l #1074340347,-(sp)
   14618:	|  |   move.l d1,-(sp)
   1461a:	|  |   move.l d0,-(sp)
   1461c:	|  |   jsr 13fca <__adddf3>
   14622:	|  |   lea 16(sp),sp
   14626:	|  |   move.l d1,-(sp)
   14628:	|  |   move.l d0,-(sp)
   1462a:	|  |   jsr 1450c <__truncdfsf2>
   14630:	|  |   addq.l #8,sp
   14632:	+--|-- bra.w 14712 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   14636:	|  \-> clr.l -(sp)
   14638:	|      move.l 40(sp),-(sp)
   1463c:	|      jsr 14408 <__ltsf2>
   14642:	|      addq.l #8,sp
   14644:	|      tst.l d0
   14646:	|  /-- bge.s 146b8 <atan2f+0x14e>
   14648:	|  |   clr.l -(sp)
   1464a:	|  |   move.l 36(sp),-(sp)
   1464e:	|  |   jsr 14408 <__ltsf2>
   14654:	|  |   addq.l #8,sp
   14656:	|  |   tst.l d0
   14658:	|  +-- bge.s 146b8 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1465a:	|  |   move.l 36(sp),-(sp)
   1465e:	|  |   move.l 36(sp),-(sp)
   14662:	|  |   jsr 1408e <__divsf3>
   14668:	|  |   addq.l #8,sp
   1466a:	|  |   move.l d0,16(sp)
   1466e:	|  |   move.l 190fc <MathIeeeSingTransBase>,d0
   14674:	|  |   movea.l d0,a6
   14676:	|  |   move.l 16(sp),d0
   1467a:	|  |   jsr -30(a6)
   1467e:	|  |   move.l d0,12(sp)
   14682:	|  |   move.l 12(sp),d0
   14686:	|  |   move.l d0,-(sp)
   14688:	|  |   jsr 140fa <__extendsfdf2>
   1468e:	|  |   addq.l #4,sp
   14690:	|  |   move.l #1413754136,-(sp)
   14696:	|  |   move.l #1074340347,-(sp)
   1469c:	|  |   move.l d1,-(sp)
   1469e:	|  |   move.l d0,-(sp)
   146a0:	|  |   jsr 14474 <__subdf3>
   146a6:	|  |   lea 16(sp),sp
   146aa:	|  |   move.l d1,-(sp)
   146ac:	|  |   move.l d0,-(sp)
   146ae:	|  |   jsr 1450c <__truncdfsf2>
   146b4:	|  |   addq.l #8,sp
   146b6:	+--|-- bra.s 14712 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   146b8:	|  \-> clr.l -(sp)
   146ba:	|      move.l 40(sp),-(sp)
   146be:	|      jsr 140c4 <__eqsf2>
   146c4:	|      addq.l #8,sp
   146c6:	|      tst.l d0
   146c8:	|  /-- bne.s 146e4 <atan2f+0x17a>
   146ca:	|  |   clr.l -(sp)
   146cc:	|  |   move.l 36(sp),-(sp)
   146d0:	|  |   jsr 1434e <__gtsf2>
   146d6:	|  |   addq.l #8,sp
   146d8:	|  |   tst.l d0
   146da:	|  +-- ble.s 146e4 <atan2f+0x17a>
        return PI / 2;
   146dc:	|  |   move.l #1070141403,d0
   146e2:	+--|-- bra.s 14712 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   146e4:	|  \-> clr.l -(sp)
   146e6:	|      move.l 40(sp),-(sp)
   146ea:	|      jsr 140c4 <__eqsf2>
   146f0:	|      addq.l #8,sp
   146f2:	|      tst.l d0
   146f4:	|  /-- bne.s 14710 <atan2f+0x1a6>
   146f6:	|  |   clr.l -(sp)
   146f8:	|  |   move.l 36(sp),-(sp)
   146fc:	|  |   jsr 14408 <__ltsf2>
   14702:	|  |   addq.l #8,sp
   14704:	|  |   tst.l d0
   14706:	|  +-- bge.s 14710 <atan2f+0x1a6>
        return -PI / 2;
   14708:	|  |   move.l #-1077342245,d0
   1470e:	+--|-- bra.s 14712 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   14710:	|  \-> moveq #0,d0
    }
}
   14712:	\----> movea.l (sp)+,a6
   14714:	       lea 24(sp),sp
   14718:	       rts

0001471a <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1471a:	lea -24(sp),sp
   1471e:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   14720:	move.l 32(sp),20(sp)
   14726:	move.l 36(sp),24(sp)
   1472c:	move.l 19104 <MathIeeeDoubTransBase>,d0
   14732:	movea.l d0,a6
   14734:	move.l 20(sp),d0
   14738:	move.l 24(sp),d1
   1473c:	jsr -96(a6)
   14740:	move.l d0,4(sp)
   14744:	move.l d1,8(sp)
   14748:	move.l 4(sp),12(sp)
   1474e:	move.l 8(sp),16(sp)
   14754:	move.l 12(sp),d0
   14758:	move.l 16(sp),d1
}
   1475c:	movea.l (sp)+,a6
   1475e:	lea 24(sp),sp
   14762:	rts

00014764 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   14764:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   14768:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1476c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   14770:	mulu.w 8(sp),d1
	addw	d1, d0
   14774:	add.w d1,d0
	swap	d0
   14776:	swap d0
	clrw	d0
   14778:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1477a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1477e:	mulu.w 10(sp),d1
	addl	d1, d0
   14782:	add.l d1,d0
	rts
   14784:	rts

00014786 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   14786:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   14788:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1478c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   14790:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   14796:	   /-- bcc.s 147ae <__udivsi3+0x28>
	movel	d0, d2
   14798:	   |   move.l d0,d2
	clrw	d2
   1479a:	   |   clr.w d2
	swap	d2
   1479c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1479e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   147a0:	   |   move.w d2,d0
	swap	d0
   147a2:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   147a4:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   147a8:	   |   divu.w d1,d2
	movew	d2, d0
   147aa:	   |   move.w d2,d0
	jra	6f
   147ac:	/--|-- bra.s 147de <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   147ae:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   147b0:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   147b2:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   147b4:	|  |   cmpi.l #65536,d1
	jcc	4b
   147ba:	|  \-- bcc.s 147b0 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   147bc:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   147be:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   147c4:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   147c6:	|      mulu.w d0,d1
	swap	d2
   147c8:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   147ca:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   147cc:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   147ce:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   147d0:	|  /-- bne.s 147dc <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   147d2:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   147d4:	|  +-- bcs.s 147dc <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   147d6:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   147da:	+--|-- bls.s 147de <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   147dc:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   147de:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   147e0:	       rts

000147e2 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   147e2:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   147e4:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   147e6:	    move.l 12(sp),d1
	jpl	1f
   147ea:	/-- bpl.s 147f0 <__divsi3+0xe>
	negl	d1
   147ec:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   147ee:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   147f0:	\-> move.l 8(sp),d0
	jpl	2f
   147f4:	/-- bpl.s 147fa <__divsi3+0x18>
	negl	d0
   147f6:	|   neg.l d0
	negb	d2
   147f8:	|   neg.b d2

2:	movel	d1, sp@-
   147fa:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   147fc:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   147fe:	    jsr 14786 <__udivsi3>
	addql	#8, sp
   14804:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   14806:	    tst.b d2
	jpl	3f
   14808:	/-- bpl.s 1480c <__divsi3+0x2a>
	negl	d0
   1480a:	|   neg.l d0

3:	movel	sp@+, d2
   1480c:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1480e:	    rts

00014810 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14810:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14814:	move.l 4(sp),d0
	movel	d1, sp@-
   14818:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1481a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1481c:	jsr 147e2 <__divsi3>
	addql	#8, sp
   14822:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14824:	move.l 8(sp),d1
	movel	d1, sp@-
   14828:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1482a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1482c:	jsr 14764 <__mulsi3>
	addql	#8, sp
   14832:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14834:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14838:	sub.l d0,d1
	movel	d1, d0
   1483a:	move.l d1,d0
	rts
   1483c:	rts

0001483e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1483e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14842:	move.l 4(sp),d0
	movel	d1, sp@-
   14846:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14848:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1484a:	jsr 14786 <__udivsi3>
	addql	#8, sp
   14850:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14852:	move.l 8(sp),d1
	movel	d1, sp@-
   14856:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14858:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1485a:	jsr 14764 <__mulsi3>
	addql	#8, sp
   14860:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14862:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14866:	sub.l d0,d1
	movel	d1, d0
   14868:	move.l d1,d0
	rts
   1486a:	rts

0001486c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1486c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1486e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   14872:	jsr -516(a6)
    move.l (sp)+, a6
   14876:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   14878:	rts

0001487a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1487a:	move.b d0,(a3)+
	rts
   1487c:	rts
