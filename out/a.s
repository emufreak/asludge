
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #117013,d0
       8:	       subi.l #117013,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c915 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #117013,d0
      40:	       subi.l #117013,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c915 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 84de <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #117013,d0
      7e:	       subi.l #117013,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c915 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14284 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1d0c6 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 1429c <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c916 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14284 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1d0c6 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c916 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14284 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1d0c6 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1831e <PutChar+0x4>
     35c:	|  |              |   jsr 17878 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1d0ce <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1d0ce <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1d0ce <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1d0ce <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1d0ce <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1d0ce <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1d0ce <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18348 <PutChar+0x2e>
     834:	|   jsr 17878 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1d0ce <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18364 <PutChar+0x4a>
     8a6:	|   jsr 17878 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1d0ce <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1d0ce <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1d0ce <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1d0ce <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1d0ce <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1d0ce <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1d0ce <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1d0ce <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1d0c6 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1d0ce <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14284 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1d0ce <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1cfc0 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1d086 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1d082 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1cfc0 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 14ea <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1cfc0 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9e1c <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1cfc0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cfc4 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cfc8 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 3120 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 1838c <PutChar+0x72>
     e1a:	          jsr 17878 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1cfdc <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 183a5 <PutChar+0x8b>
     e30:	      |   jsr 17878 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cfd6 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1d0d2 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1cfdc <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 183d3 <PutChar+0xb9>
     f1e:	|         jsr 17878 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1d0d2 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 183f3 <PutChar+0xd9>
     f68:	|         jsr 17878 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cff6 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1d0c6 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cff2 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1d0c6 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cff2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 18413 <PutChar+0xf9>
    10ba:	|         jsr 17878 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1d0c6 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 18428 <PutChar+0x10e>
    110c:	   |   jsr 17878 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1d0ce <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1d00a <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #117016,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #117080,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #117128,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #117168,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1d002 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12ac:	                lea -40(sp),sp
    12b0:	                move.l a6,-(sp)
    12b2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12b4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    12bc:	                pea 18463 <PutChar+0x149>
    12c2:	                jsr 17878 <KPrintF>
    12c8:	                addq.l #4,sp

  UWORD *colorpos = CstPalette;
    12ca:	                move.l 1d006 <CstPalette>,44(sp)
  UWORD *tmp = CstClColor;
    12d2:	                move.l 1d002 <CstClColor>,40(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    12da:	                clr.l 36(sp)
    12de:	            ,-- bra.s 1310 <CstDisplayBackDrop+0x64>
    *tmp++;
    12e0:	         ,--|-> move.l 40(sp),d0
    12e4:	         |  |   move.l d0,d1
    12e6:	         |  |   addq.l #2,d1
    12e8:	         |  |   move.l d1,40(sp)
    *tmp++ = *colorpos++;
    12ec:	         |  |   move.l 44(sp),d1
    12f0:	         |  |   move.l d1,d2
    12f2:	         |  |   addq.l #2,d2
    12f4:	         |  |   move.l d2,44(sp)
    12f8:	         |  |   move.l 40(sp),d0
    12fc:	         |  |   move.l d0,d2
    12fe:	         |  |   addq.l #2,d2
    1300:	         |  |   move.l d2,40(sp)
    1304:	         |  |   movea.l d1,a0
    1306:	         |  |   move.w (a0),d1
    1308:	         |  |   movea.l d0,a0
    130a:	         |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    130c:	         |  |   addq.l #1,36(sp)
    1310:	         |  '-> moveq #31,d0
    1312:	         |      cmp.l 36(sp),d0
    1316:	         '----- bge.s 12e0 <CstDisplayBackDrop+0x34>
  }

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    1318:	                move.l 1cffa <CstBackDropBufferApplyStart>,d0
    131e:	                move.l d0,1cffe <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1324:	                move.l 1cffa <CstBackDropBufferApplyStart>,32(sp)
  if(!*cursor || !CstDrawBuffer) {
    132c:	                movea.l 32(sp),a0
    1330:	                move.w (a0),d0
    1332:	,-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    1336:	|               move.l 1cfee <CstDrawBuffer>,d0
    133c:	+-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1340:	|               move.l 1d0d2 <GfxBase>,d0
    1346:	|               movea.l d0,a6
    1348:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    134c:	|               movea.l 16(sp),a0
    1350:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1356:	|               movea.l 16(sp),a0
    135a:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1360:	|               movea.l 16(sp),a0
    1364:	|               move.w #2544,64(a0)
  
  while(*cursor)
    136a:	|     ,-------- bra.w 14d2 <CstDisplayBackDrop+0x226>
  {    
    UWORD width = *cursor++;
    136e:	|  ,--|-------> move.l 32(sp),d0
    1372:	|  |  |         move.l d0,d1
    1374:	|  |  |         addq.l #2,d1
    1376:	|  |  |         move.l d1,32(sp)
    137a:	|  |  |         movea.l d0,a0
    137c:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1380:	|  |  |         move.l 32(sp),d0
    1384:	|  |  |         move.l d0,d1
    1386:	|  |  |         addq.l #2,d1
    1388:	|  |  |         move.l d1,32(sp)
    138c:	|  |  |         movea.l d0,a0
    138e:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1392:	|  |  |         move.l 32(sp),d0
    1396:	|  |  |         move.l d0,d1
    1398:	|  |  |         addq.l #2,d1
    139a:	|  |  |         move.l d1,32(sp)
    139e:	|  |  |         movea.l d0,a0
    13a0:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    13a4:	|  |  |         move.l 32(sp),d0
    13a8:	|  |  |         move.l d0,d1
    13aa:	|  |  |         addq.l #2,d1
    13ac:	|  |  |         move.l d1,32(sp)
    13b0:	|  |  |         movea.l d0,a0
    13b2:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    13b6:	|  |  |         move.l 1d01a <winWidth>,d0
    13bc:	|  |  |         lsr.l #3,d0
    13be:	|  |  |         move.l d0,d1
    13c0:	|  |  |         move.w 14(sp),d0
    13c4:	|  |  |         add.w d0,d0
    13c6:	|  |  |         sub.w d0,d1
    13c8:	|  |  |         movea.l 16(sp),a0
    13cc:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    13d0:	|  |  |         move.l 1d01a <winWidth>,d0
    13d6:	|  |  |         lsr.l #3,d0
    13d8:	|  |  |         move.l d0,d1
    13da:	|  |  |         move.w 14(sp),d0
    13de:	|  |  |         add.w d0,d0
    13e0:	|  |  |         sub.w d0,d1
    13e2:	|  |  |         movea.l 16(sp),a0
    13e6:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    13ea:	|  |  |         moveq #0,d0
    13ec:	|  |  |         move.w 8(sp),d0
    13f0:	|  |  |         move.l 1d01a <winWidth>,d1
    13f6:	|  |  |         move.l d1,-(sp)
    13f8:	|  |  |         move.l d0,-(sp)
    13fa:	|  |  |         jsr 18204 <__mulsi3>
    1400:	|  |  |         addq.l #8,sp
    1402:	|  |  |         move.l d0,d1
    1404:	|  |  |         lsr.l #3,d1
    1406:	|  |  |         move.l 1cfdc <CstBackDrop>,d0
    140c:	|  |  |         add.l d0,d1
    140e:	|  |  |         moveq #0,d0
    1410:	|  |  |         move.w 10(sp),d0
    1414:	|  |  |         move.l d1,d2
    1416:	|  |  |         add.l d0,d2
    1418:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    141c:	|  |  |         moveq #0,d0
    141e:	|  |  |         move.w 8(sp),d0
    1422:	|  |  |         move.l 1d01a <winWidth>,d1
    1428:	|  |  |         move.l d1,-(sp)
    142a:	|  |  |         move.l d0,-(sp)
    142c:	|  |  |         jsr 18204 <__mulsi3>
    1432:	|  |  |         addq.l #8,sp
    1434:	|  |  |         move.l d0,d1
    1436:	|  |  |         lsr.l #3,d1
    1438:	|  |  |         move.l 1cfee <CstDrawBuffer>,d0
    143e:	|  |  |         add.l d0,d1
    1440:	|  |  |         moveq #0,d0
    1442:	|  |  |         move.w 10(sp),d0
    1446:	|  |  |         move.l d1,d2
    1448:	|  |  |         add.l d0,d2
    144a:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    144e:	|  |  |         clr.l 20(sp)
    1452:	|  |  |     ,-- bra.s 14ca <CstDisplayBackDrop+0x21e>
    {
      custom->bltapt = (APTR) bltapt;
    1454:	|  |  |  ,--|-> move.l 28(sp),d0
    1458:	|  |  |  |  |   movea.l 16(sp),a0
    145c:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1460:	|  |  |  |  |   move.l 24(sp),d0
    1464:	|  |  |  |  |   movea.l 16(sp),a0
    1468:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    146c:	|  |  |  |  |   move.w 12(sp),d0
    1470:	|  |  |  |  |   lsl.w #6,d0
    1472:	|  |  |  |  |   add.w 14(sp),d0
    1476:	|  |  |  |  |   movea.l 16(sp),a0
    147a:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    147e:	|  |  |  |  |   move.l 1d01a <winWidth>,d0
    1484:	|  |  |  |  |   lsr.l #3,d0
    1486:	|  |  |  |  |   move.l 1d01e <winHeight>,d1
    148c:	|  |  |  |  |   move.l d1,-(sp)
    148e:	|  |  |  |  |   move.l d0,-(sp)
    1490:	|  |  |  |  |   jsr 18204 <__mulsi3>
    1496:	|  |  |  |  |   addq.l #8,sp
    1498:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    149c:	|  |  |  |  |   move.l 1d01a <winWidth>,d0
    14a2:	|  |  |  |  |   lsr.l #3,d0
    14a4:	|  |  |  |  |   move.l 1d01e <winHeight>,d1
    14aa:	|  |  |  |  |   move.l d1,-(sp)
    14ac:	|  |  |  |  |   move.l d0,-(sp)
    14ae:	|  |  |  |  |   jsr 18204 <__mulsi3>
    14b4:	|  |  |  |  |   addq.l #8,sp
    14b6:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    14ba:	|  |  |  |  |   move.l 1d0d2 <GfxBase>,d0
    14c0:	|  |  |  |  |   movea.l d0,a6
    14c2:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    14c6:	|  |  |  |  |   addq.l #1,20(sp)
    14ca:	|  |  |  |  '-> moveq #4,d0
    14cc:	|  |  |  |      cmp.l 20(sp),d0
    14d0:	|  |  |  '----- bge.s 1454 <CstDisplayBackDrop+0x1a8>
  while(*cursor)
    14d2:	|  |  '-------> movea.l 32(sp),a0
    14d6:	|  |            move.w (a0),d0
    14d8:	|  '----------- bne.w 136e <CstDisplayBackDrop+0xc2>
    14dc:	|           ,-- bra.s 14e0 <CstDisplayBackDrop+0x234>
    return;
    14de:	'-----------|-> nop
    }  
  }

  

}
    14e0:	            '-> move.l (sp)+,d2
    14e2:	                movea.l (sp)+,a6
    14e4:	                lea 40(sp),sp
    14e8:	                rts

000014ea <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    14ea:	lea -20(sp),sp
    14ee:	movea.l 24(sp),a0
    14f2:	move.l 28(sp),d1
    14f6:	move.l 32(sp),d0
    14fa:	movea.w a0,a0
    14fc:	move.w a0,4(sp)
    1500:	move.w d1,d1
    1502:	move.w d1,2(sp)
    1506:	move.w d0,d0
    1508:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    150a:	move.w 2(sp),d0
    150e:	movea.l 36(sp),a0
    1512:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1514:	move.w 4(sp),d0
    1518:	lsr.w #1,d0
    151a:	movea.l 36(sp),a0
    151e:	addq.l #1,a0
    1520:	move.l d0,d0
    1522:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1524:	move.w 2(sp),d1
    1528:	move.w (sp),d0
    152a:	movea.l 36(sp),a0
    152e:	addq.l #2,a0
    1530:	add.b d1,d0
    1532:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1534:	move.w 4(sp),d0
    1538:	andi.w #1,d0
    153c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1540:	move.w 2(sp),d0
    1544:	add.w (sp),d0
    1546:	move.w d0,d0
    1548:	andi.l #65535,d0
    154e:	asr.l #7,d0
    1550:	move.l d0,d0
    1552:	move.w d0,d1
    1554:	andi.w #2,d1
    1558:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    155c:	moveq #0,d0
    155e:	move.w 2(sp),d0
    1562:	asr.l #6,d0
    1564:	move.l d0,d0
    1566:	move.w d0,d1
    1568:	andi.w #4,d1
    156c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1570:	move.w 18(sp),d1
    1574:	move.w 16(sp),d0
    1578:	add.b d0,d1
    157a:	move.w 14(sp),d0
    157e:	movea.l 36(sp),a0
    1582:	addq.l #3,a0
    1584:	add.b d1,d0
    1586:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1588:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    158e:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1594:	move.l 10(sp),d0
    1598:	clr.w d0
    159a:	swap d0
    159c:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15a0:	move.l 1d00a <CstClCursor>,d0
    15a6:	movea.l d0,a0
    15a8:	addq.l #2,a0
    15aa:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15ae:	move.l 1d00a <CstClCursor>,d0
    15b4:	movea.l d0,a0
    15b6:	addq.l #6,a0
    15b8:	move.w 8(sp),(a0)

}
    15bc:	nop
    15be:	lea 20(sp),sp
    15c2:	rts

000015c4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    15c4:	    move.w 1cfe8 <CstApplyBackDropCounter>,d0
    15ca:	,-- beq.s 15e0 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    15cc:	|   jsr 12ac <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    15d2:	|   move.w 1cfe8 <CstApplyBackDropCounter>,d0
    15d8:	|   subq.w #1,d0
    15da:	|   move.w d0,1cfe8 <CstApplyBackDropCounter>
  }    
}
    15e0:	'-> nop
    15e2:	    rts

000015e4 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    15e4:	                                                             subq.l #8,sp
    15e6:	                                                             movem.l d2-d7/a2-a6,-(sp)
    15ea:	                                                             movea.l 56(sp),a3
    15ee:	                                                             movea.l 60(sp),a2
    15f2:	                                                             move.l 64(sp),d2
    15f6:	                                                             move.l 68(sp),d7
    15fa:	                                                             movea.w d2,a4
    15fc:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1600:	                                                             clr.l -(sp)
    1602:	                                                             pea 1 <_start+0x1>
    1606:	                                                             movea.w 6(a3),a0
    160a:	                                                             move.l a0,-(sp)
    160c:	                                                             movea.w 2(a3),a0
    1610:	                                                             move.l a0,-(sp)
    1612:	                                                             pea 1847f <PutChar+0x165>
    1618:	                                                             move.l 1d00e <CstZBufferResult>,-(sp)
    161e:	                                                             lea 17960 <debug_register_bitmap>,a5
    1624:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1626:	                                                             clr.l -(sp)
    1628:	                                                             pea 1 <_start+0x1>
    162c:	                                                             movea.w 6(a3),a0
    1630:	                                                             move.l a0,-(sp)
    1632:	                                                             move.w 2(a3),d0
    1636:	                                                             addi.w #16,d0
    163a:	                                                             movea.w d0,a0
    163c:	                                                             move.l a0,-(sp)
    163e:	                                                             pea 1848a <PutChar+0x170>
    1644:	                                                             move.l 1d012 <CstZBufferWork>,-(sp)
    164a:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    164c:	                                                             lea 48(sp),sp
    1650:	                                                             cmpa.w #0,a2
    1654:	,----------------------------------------------------------- beq.w 1af0 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1658:	|                                                            move.w d2,48(sp)
    165c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    165e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1662:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1664:	|                       ,----------------------------------> move.w a5,d3
    1666:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1668:	|                       |                                    andi.l #65535,d3
    166e:	|                       |                                    cmp.l 16(a2),d3
    1672:	|                       |  ,-------------------------------- bge.w 180c <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1676:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    167a:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    167e:	|                       |  |                                 move.w d6,d0
    1680:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1684:	|                       |  |                                 move.w 6(a2),d4
    1688:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    168a:	|                       |  |                                 cmp.w a4,d6
    168c:	|                    ,--|--|-------------------------------- bge.w 1984 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1690:	|                    |  |  |                                 cmp.w a4,d0
    1692:	|        ,-----------|--|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1696:	|        |           |  |  |                                 move.w 50(sp),d0
    169a:	|        |           |  |  |                                 cmp.w d0,d5
    169c:	|        |     ,-----|--|--|-------------------------------- blt.w 1ad0 <CstDrawZBuffer+0x4ec>
    16a0:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    16a2:	|        |     |     |  |  |                                 cmpa.l d3,a0
    16a4:	|        +-----|-----|--|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    16a8:	|        |     |     |  |  |                                 move.w 48(sp),d0
    16ac:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    16ae:	|        |     |     |  |  |                                 move.w d0,d6
    16b0:	|        |     |     |  |  |                                 andi.w #15,d6
    16b4:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    16b6:	|        |     |     |  |  |                                 tst.l d2
    16b8:	|        |  ,--|-----|--|--|-------------------------------- blt.w 182c <CstDrawZBuffer+0x248>
    16bc:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    16be:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    16c0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
          custom->bltalwm = 0xffff;                      
    16c8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
          custom->bltcon1 = 0;          
    16d0:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    16d8:	|        |  |  |  |  |  |  |                                 lea 1d0d2 <GfxBase>,a0
    16de:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    16e0:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    16e2:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    16e4:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    16e6:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    16ec:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    16f0:	|        |  |  |  |  |  |  |                                 clr.w d0
    16f2:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    16f4:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 186c <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    16f8:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    16fa:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    16fe:	|        |  |  |  |  |  |  |           |     |               move.l 1d012 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1708:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    170a:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    170c:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    170e:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1712:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1714:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    171a:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    171c:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    171e:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1b8a <CstDrawZBuffer+0x5a6>
    1722:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1724:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1726:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
            custom->bltdmod = 0;                                                            
    172c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1734:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1736:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1738:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    173a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    173c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 18ac <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1740:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1744:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1746:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    174a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 18204 <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1754:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 18c2 <CstDrawZBuffer+0x2de>
    1758:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    175a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    175c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
        UWORD bltsize =  height*64+bytewidth/2;          
    1762:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1764:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1766:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1768:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
       
        WaitBlit();
    176e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1d0d2 <GfxBase>,a0
    1774:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1776:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    177a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
        custom->bltalwm = 0xffff;
    1782:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
        custom->bltamod = 2;
    178a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
        custom->bltbmod = 0;
    1792:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2d52>
        custom->bltdmod = 0;
    179a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
        custom->bltcon0 = 0xd0c; //Copy A to D
    17a2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
        custom->bltcon1 = 0;        
    17aa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    17b2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1d012 <CstZBufferWork>,d0
    17b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    17ba:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    17c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    17c2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    17c6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    17c8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 194c <CstDrawZBuffer+0x368>
    17cc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    17ce:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    17d0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    17d2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 18204 <__mulsi3>
    17d8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    17da:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    17dc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17de:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    17e0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17e2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    17e6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
        custom->bltdpt = (APTR) CstZBufferResult;
    17ec:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1d00e <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    17f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    17f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    17fa:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    17fc:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 193a <CstDrawZBuffer+0x356>
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
      zbufferset = 1;
    180a:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    180c:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1810:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1814:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1664 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    1818:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    181a:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1af0 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    181e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1d00e <CstZBufferResult>,d0

}
    1824:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1828:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    182a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    182c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    182e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1830:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1832:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1834:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
          custom->bltalwm = 0xffff;                      
    183c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
          custom->bltcon1 = 0;          
    1844:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>
            WaitBlit();   
    184c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1d0d2 <GfxBase>,a0
    1852:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1854:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1856:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1858:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    185a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1860:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1864:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1866:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1868:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 16f8 <CstDrawZBuffer+0x114>
            WaitBlit();         
    186c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1870:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1d012 <CstZBufferWork>,d0
    1876:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    1878:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
            custom->bltcon0 = 4096 + 0x9f0;              
    187e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1886:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    1888:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    188a:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ba2 <CstDrawZBuffer+0x5be>
    188e:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1890:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1892:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
            custom->bltdmod = 2;                                                            
    1898:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    18a0:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1740 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    18ae:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    18b2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 18204 <__mulsi3>
    18ba:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    18be:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1758 <CstDrawZBuffer+0x174>
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    18c4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    18c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
        UWORD bltsize =  height*64+bytewidth/2;          
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    18d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
        WaitBlit();
    18da:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1d0d2 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
        custom->bltalwm = 0xffff;
    18ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
        custom->bltamod = 2;
    18f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
        custom->bltbmod = 0;
    18fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2d52>
        custom->bltdmod = 0;
    1906:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
        custom->bltcon0 = 0xd0c; //Copy A to D
    190e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
        custom->bltcon1 = 0;        
    1916:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    191e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1d012 <CstZBufferWork>,d0
    1924:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1926:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    192c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    192e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1932:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1934:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 17cc <CstDrawZBuffer+0x1e8>
    1938:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 194c <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    193a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    193c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    193e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1940:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1942:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    1948:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 180a <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    194c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    194e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1950:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1952:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1954:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 18204 <__mulsi3>
    195a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    195c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    195e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1960:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1962:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1964:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1968:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
        custom->bltdpt = (APTR) CstZBufferResult;
    196e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1d00e <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1978:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    197a:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    197c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    197e:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1800 <CstDrawZBuffer+0x21c>
    1982:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 193a <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1984:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    1988:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    198a:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1990:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1992:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1994:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1996:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    199a:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    199e:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    19a0:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 1aac <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19a4:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    19a8:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19ac:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19b0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    19b2:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    19b4:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19b6:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    19ba:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19be:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    19c0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1a4a <CstDrawZBuffer+0x466>
    19c4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    19c6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    19c8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1a5c <CstDrawZBuffer+0x478>
            WaitBlit();  
    19d2:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1d0d2 <GfxBase>,a0
    19d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    19da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    19de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
            custom->bltalwm = 0xffff;          
    19e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
            custom->bltdpt = CstZBufferWork;        
    19ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1d012 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
            custom->bltcon1 = 0;               
    19f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a00:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1a06:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    1a08:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1a74 <CstDrawZBuffer+0x490>
    1a0a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1a0c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1a0e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1a10:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1a14:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1a82 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1a16:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1a1a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1a1c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1a1e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1a22:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a28:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
              custom->bltdmod = 0;                                                            
    1a2e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
              xdiffbyte += 2;                 
    1a36:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1a38:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1a3a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a3c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1a42:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1a44:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1a46:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1a4a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1a4c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1a4e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1a50:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1a52:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a54:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1a56:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1a58:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 19d2 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1a5c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 18494 <PutChar+0x17a>
    1a62:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 17878 <KPrintF>
              return FALSE;
    1a68:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1a6a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1a6c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a70:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1a72:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a74:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1a76:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1a78:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    1a7a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a7c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1a80:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1a16 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1a82:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a8a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
              custom->bltdmod = 0;                                                            
    1a90:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
              xdiffbyte += 2;                 
    1a98:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    1a9a:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    1a9c:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a9e:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1aa4:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1aa6:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    1aa8:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1734 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1aac:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1aae:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1ab0:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1ab4:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1ab8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    1aba:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    1abc:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1abe:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1ac2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1ac6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    1ac8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 19c4 <CstDrawZBuffer+0x3e0>
    1acc:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1a4a <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1ad0:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1ad4:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1ad8:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1adc:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1ade:	|  |  |     |     |     |  |                                 move.w d0,d6
    1ae0:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1ae4:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1ae6:	|  |  |     |     |     |  |                                 tst.l d2
    1ae8:	|  |  |     |     '-----|--|-------------------------------- bge.w 16bc <CstDrawZBuffer+0xd8>
    1aec:	|  |  |     '-----------|--|-------------------------------- bra.w 182c <CstDrawZBuffer+0x248>
    WaitBlit();
    1af0:	'--|--|-----------------|--|-------------------------------> movea.l 1d0d2 <GfxBase>,a6
    1af6:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1afa:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
    custom->bltalwm = 0xffff;
    1b02:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
    custom->bltamod = 0;
    1b0a:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
    custom->bltbmod = 0;
    1b12:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2d52>
    custom->bltcmod = 0;
    1b1a:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2d50>
    custom->bltdmod = 0;
    1b22:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1b2a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
    custom->bltcon1 = 0;        
    1b32:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b3a:	   |  |                 |  |                                 move.l (a3),d2
    1b3c:	   |  |                 |  |                                 move.l 4(a3),d3
    1b40:	   |  |                 |  |                                 move.l d2,d0
    1b42:	   |  |                 |  |                       ,-------- bmi.w 1bca <CstDrawZBuffer+0x5e6>
    1b46:	   |  |                 |  |                       |         asr.l #3,d0
    1b48:	   |  |                 |  |                       |         move.l d3,-(sp)
    1b4a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1b4c:	   |  |                 |  |                       |         jsr 18204 <__mulsi3>
    1b52:	   |  |                 |  |                       |         addq.l #8,sp
    1b54:	   |  |                 |  |                       |         move.l d0,d1
    1b56:	   |  |                 |  |                       |         add.l d0,d1
    1b58:	   |  |                 |  |                       |         add.l d1,d1
    1b5a:	   |  |                 |  |                       |         add.l d1,d0
    1b5c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1b60:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b66:	   |  |                 |  |                       |         move.l 1d00e <CstZBufferResult>,d0
    1b6c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b72:	   |  |                 |  |                       |         lsl.w #6,d3
    1b74:	   |  |                 |  |                       |         tst.l d2
    1b76:	   |  |                 |  |                    ,--|-------- blt.s 1bba <CstDrawZBuffer+0x5d6>
    1b78:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1b7a:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1b7c:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
}
    1b82:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b86:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1b88:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b8a:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1b8c:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1b8e:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1b90:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
            custom->bltdmod = 0;                                                            
    1b96:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
    1b9e:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ba2:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ba4:	                           |                    |  |  |  |   asr.l #3,d1
    1ba6:	                           |                    |  |  |  |   sub.w d2,d1
    1ba8:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
            custom->bltdmod = 2;                                                            
    1bae:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
    1bb6:	                           '--------------------|--|--|--|-- bra.w 18a0 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bba:	                                                >--|--|--|-> moveq #15,d1
    1bbc:	                                                |  |  |  |   add.l d1,d2
    1bbe:	                                                |  |  |  |   asr.l #4,d2
    1bc0:	                                                |  |  |  |   add.w d2,d3
    1bc2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
  return CstZBufferResult;
    1bc8:	                                                |  |  |  '-- bra.s 1b82 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bca:	                                                |  '--|----> addq.l #7,d0
    1bcc:	                                                |     |      asr.l #3,d0
    1bce:	                                                |     |      move.l d3,-(sp)
    1bd0:	                                                |     |      move.l d0,-(sp)
    1bd2:	                                                |     |      jsr 18204 <__mulsi3>
    1bd8:	                                                |     |      addq.l #8,sp
    1bda:	                                                |     |      move.l d0,d1
    1bdc:	                                                |     |      add.l d0,d1
    1bde:	                                                |     |      add.l d1,d1
    1be0:	                                                |     |      add.l d1,d0
    1be2:	                                                |     |      add.l 24(a3),d0
    1be6:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltdpt = (APTR) CstZBufferResult;
    1bec:	                                                |     |      move.l 1d00e <CstZBufferResult>,d0
    1bf2:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bf8:	                                                |     |      lsl.w #6,d3
    1bfa:	                                                |     |      tst.l d2
    1bfc:	                                                |     '----- bge.w 1b78 <CstDrawZBuffer+0x594>
    1c00:	                                                '----------- bra.s 1bba <CstDrawZBuffer+0x5d6>

00001c02 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c02:	    lea -20(sp),sp
    1c06:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c08:	    move.l 1cfee <CstDrawBuffer>,d0
    1c0e:	,-- beq.s 1c28 <CstFreeBuffer+0x26>
    1c10:	|   move.l 1cfee <CstDrawBuffer>,20(sp)
    1c18:	|   move.l 1d0c6 <SysBase>,d0
    1c1e:	|   movea.l d0,a6
    1c20:	|   movea.l 20(sp),a1
    1c24:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c28:	'-> move.l 1cfea <CstViewBuffer>,d0
    1c2e:	,-- beq.s 1c48 <CstFreeBuffer+0x46>
    1c30:	|   move.l 1cfea <CstViewBuffer>,16(sp)
    1c38:	|   move.l 1d0c6 <SysBase>,d0
    1c3e:	|   movea.l d0,a6
    1c40:	|   movea.l 16(sp),a1
    1c44:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c48:	'-> move.l 1cfe4 <CstCopperList>,d0
    1c4e:	,-- beq.s 1c68 <CstFreeBuffer+0x66>
    1c50:	|   move.l 1cfe4 <CstCopperList>,12(sp)
    1c58:	|   move.l 1d0c6 <SysBase>,d0
    1c5e:	|   movea.l d0,a6
    1c60:	|   movea.l 12(sp),a1
    1c64:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1c68:	'-> move.l 1cfdc <CstBackDrop>,d0
    1c6e:	,-- beq.s 1c88 <CstFreeBuffer+0x86>
    1c70:	|   move.l 1cfdc <CstBackDrop>,8(sp)
    1c78:	|   move.l 1d0c6 <SysBase>,d0
    1c7e:	|   movea.l d0,a6
    1c80:	|   movea.l 8(sp),a1
    1c84:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c88:	'-> move.l 1cfe0 <CstBackDropBackup>,d0
    1c8e:	,-- beq.s 1ca8 <CstFreeBuffer+0xa6>
    1c90:	|   move.l 1cfe0 <CstBackDropBackup>,4(sp)
    1c98:	|   move.l 1d0c6 <SysBase>,d0
    1c9e:	|   movea.l d0,a6
    1ca0:	|   movea.l 4(sp),a1
    1ca4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1ca8:	'-> clr.l 1cfee <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cae:	    clr.l 1cfea <CstViewBuffer>
  CstCopperList = NULL;
    1cb4:	    clr.l 1cfe4 <CstCopperList>
  CstBackDrop = NULL;
    1cba:	    clr.l 1cfdc <CstBackDrop>

}
    1cc0:	    nop
    1cc2:	    movea.l (sp)+,a6
    1cc4:	    lea 20(sp),sp
    1cc8:	    rts

00001cca <CstFreeze>:



void CstFreeze( ) {
    1cca:	       lea -64(sp),sp
    1cce:	       move.l a6,-(sp)
    1cd0:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1cd2:	       pea 184e4 <PutChar+0x1ca>
    1cd8:	       jsr 17878 <KPrintF>
    1cde:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1ce0:	       move.l 1d01a <winWidth>,d0
    1ce6:	       lsr.l #3,d0
    1ce8:	       move.l d0,d1
    1cea:	       move.l 1d01e <winHeight>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       muls.w d0,d1
    1cf4:	       move.w d1,d0
    1cf6:	       add.w d0,d0
    1cf8:	       add.w d0,d0
    1cfa:	       move.w d0,d2
    1cfc:	       add.w d1,d2
    1cfe:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d02:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d0a:	       moveq #0,d0
    1d0c:	       move.w 54(sp),d0
    1d10:	       move.l d0,46(sp)
    1d14:	       clr.l 42(sp)
    1d18:	       move.l 1d0c6 <SysBase>,d0
    1d1e:	       movea.l d0,a6
    1d20:	       move.l 46(sp),d0
    1d24:	       move.l 42(sp),d1
    1d28:	       jsr -684(a6)
    1d2c:	       move.l d0,38(sp)
    1d30:	       move.l 38(sp),d0
    1d34:	       move.l d0,1cfe0 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d3a:	       move.l 1cfe0 <CstBackDropBackup>,d0
    1d40:	   ,-- bne.s 1d50 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d42:	   |   pea 1850b <PutChar+0x1f1>
    1d48:	   |   jsr 17878 <KPrintF>
    1d4e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1d50:	   '-> move.l 1d01e <winHeight>,d0
    1d56:	       move.l d0,d0
    1d58:	       movea.w d0,a1
    1d5a:	       move.l 1d01a <winWidth>,d0
    1d60:	       move.l d0,d0
    1d62:	       movea.w d0,a0
    1d64:	       move.l 1cfe0 <CstBackDropBackup>,d0
    1d6a:	       clr.l -(sp)
    1d6c:	       pea 5 <_start+0x5>
    1d70:	       move.l a1,-(sp)
    1d72:	       move.l a0,-(sp)
    1d74:	       pea 18543 <PutChar+0x229>
    1d7a:	       move.l d0,-(sp)
    1d7c:	       jsr 17960 <debug_register_bitmap>
    1d82:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d86:	       move.l 1cfdc <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d8e:	       move.l 1cfe0 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d96:	       clr.l 60(sp)
    1d9a:	   ,-- bra.s 1dc0 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d9c:	,--|-> move.l 68(sp),d1
    1da0:	|  |   move.l d1,d0
    1da2:	|  |   addq.l #4,d0
    1da4:	|  |   move.l d0,68(sp)
    1da8:	|  |   move.l 64(sp),d0
    1dac:	|  |   move.l d0,d2
    1dae:	|  |   addq.l #4,d2
    1db0:	|  |   move.l d2,64(sp)
    1db4:	|  |   movea.l d1,a0
    1db6:	|  |   move.l (a0),d1
    1db8:	|  |   movea.l d0,a0
    1dba:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1dbc:	|  |   addq.l #1,60(sp)
    1dc0:	|  '-> move.w 54(sp),d0
    1dc4:	|      lsr.w #2,d0
    1dc6:	|      move.w d0,d0
    1dc8:	|      andi.l #65535,d0
    1dce:	|      cmp.l 60(sp),d0
    1dd2:	'----- bgt.s 1d9c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1dd4:	       move.l 1cfea <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1ddc:	       move.l 1cfdc <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1de4:	       clr.l 56(sp)
    1de8:	   ,-- bra.s 1e0e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1dea:	,--|-> move.l 68(sp),d1
    1dee:	|  |   move.l d1,d0
    1df0:	|  |   addq.l #4,d0
    1df2:	|  |   move.l d0,68(sp)
    1df6:	|  |   move.l 64(sp),d0
    1dfa:	|  |   move.l d0,d2
    1dfc:	|  |   addq.l #4,d2
    1dfe:	|  |   move.l d2,64(sp)
    1e02:	|  |   movea.l d1,a0
    1e04:	|  |   move.l (a0),d1
    1e06:	|  |   movea.l d0,a0
    1e08:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0a:	|  |   addq.l #1,56(sp)
    1e0e:	|  '-> move.w 54(sp),d0
    1e12:	|      lsr.w #2,d0
    1e14:	|      move.w d0,d0
    1e16:	|      andi.l #65535,d0
    1e1c:	|      cmp.l 56(sp),d0
    1e20:	'----- bgt.s 1dea <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1e22:	       move.l 1cff6 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e2a:	       moveq #20,d0
    1e2c:	       move.l d0,30(sp)
    1e30:	       clr.l 26(sp)
    1e34:	       move.l 1d0c6 <SysBase>,d0
    1e3a:	       movea.l d0,a6
    1e3c:	       move.l 30(sp),d0
    1e40:	       move.l 26(sp),d1
    1e44:	       jsr -684(a6)
    1e48:	       move.l d0,22(sp)
    1e4c:	       move.l 22(sp),d0
    1e50:	       move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1e56:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e5c:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1e62:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e68:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1e6a:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e70:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e74:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e7a:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e7e:	       move.l 1d01a <winWidth>,d0
    1e84:	       lsr.l #4,d0
    1e86:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e8c:	       move.l d0,d0
    1e8e:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e92:	       move.l 1d01e <winHeight>,d0
    1e98:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1e9e:	       move.l d0,d0
    1ea0:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1ea4:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1eaa:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1eae:	       movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    1eb4:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1eb8:	       move.l 1cff2 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1ec0:	       moveq #20,d2
    1ec2:	       move.l d2,18(sp)
    1ec6:	       clr.l 14(sp)
    1eca:	       move.l 1d0c6 <SysBase>,d0
    1ed0:	       movea.l d0,a6
    1ed2:	       move.l 18(sp),d0
    1ed6:	       move.l 14(sp),d1
    1eda:	       jsr -684(a6)
    1ede:	       move.l d0,10(sp)
    1ee2:	       move.l 10(sp),d0
    1ee6:	       move.l d0,1cff2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1eec:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1ef2:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1ef8:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1efe:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1f00:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f06:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1f0a:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f10:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1f14:	       move.l 1d01a <winWidth>,d0
    1f1a:	       lsr.l #4,d0
    1f1c:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f22:	       move.l d0,d0
    1f24:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1f28:	       move.l 1d01e <winHeight>,d0
    1f2e:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f34:	       move.l d0,d0
    1f36:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1f3a:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f40:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1f44:	       movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    1f4a:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1f4e:	       pea 18552 <PutChar+0x238>
    1f54:	       jsr 17878 <KPrintF>
    1f5a:	       addq.l #4,sp

}  
    1f5c:	       nop
    1f5e:	       move.l (sp)+,d2
    1f60:	       movea.l (sp)+,a6
    1f62:	       lea 64(sp),sp
    1f66:	       rts

00001f68 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f68:	             lea -172(sp),sp
    1f6c:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f70:	             pea 18566 <PutChar+0x24c>
    1f76:	             jsr 17878 <KPrintF>
    1f7c:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f7e:	             move.l 192(sp),-(sp)
    1f82:	             jsr 6bc <get2bytes>
    1f88:	             addq.l #4,sp
    1f8a:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f8e:	             move.l 192(sp),-(sp)
    1f92:	             jsr 6bc <get2bytes>
    1f98:	             addq.l #4,sp
    1f9a:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f9e:	             move.w 162(sp),d0
    1fa2:	             lsr.w #3,d0
    1fa4:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1fa8:	             move.w 158(sp),d0
    1fac:	             lsr.w #1,d0
    1fae:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1fb2:	             move.l 1d01a <winWidth>,d0
    1fb8:	             lsr.l #3,d0
    1fba:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1fbe:	             move.w 158(sp),d0
    1fc2:	             muls.w 160(sp),d0
    1fc6:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1fca:	             move.w 152(sp),d1
    1fce:	             move.w d1,d0
    1fd0:	             add.w d0,d0
    1fd2:	             add.w d0,d0
    1fd4:	             move.w d0,d2
    1fd6:	             add.w d1,d2
    1fd8:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1fdc:	             move.w 1cfd6 <CstPaletteLoaded>,d0
    1fe2:	,----------- bne.w 207c <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1fe6:	|            move.w #384,148(sp)

    if(CstPalette) {
    1fec:	|            move.l 1d006 <CstPalette>,d0
    1ff2:	|        ,-- beq.s 200c <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1ff4:	|        |   move.l 1d006 <CstPalette>,144(sp)
    1ffc:	|        |   move.l 1d0c6 <SysBase>,d0
    2002:	|        |   movea.l d0,a6
    2004:	|        |   movea.l 144(sp),a1
    2008:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    200c:	|        '-> moveq #64,d0
    200e:	|            move.l d0,140(sp)
    2012:	|            clr.l 136(sp)
    2016:	|            move.l 1d0c6 <SysBase>,d0
    201c:	|            movea.l d0,a6
    201e:	|            move.l 140(sp),d0
    2022:	|            move.l 136(sp),d1
    2026:	|            jsr -684(a6)
    202a:	|            move.l d0,132(sp)
    202e:	|            move.l 132(sp),d0
    2032:	|            move.l d0,1d006 <CstPalette>
    CstPaletteLoaded = 1;
    2038:	|            move.w #1,1cfd6 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    2040:	|            move.l 1d006 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2048:	|            clr.l 180(sp)
    204c:	|        ,-- bra.s 2072 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    204e:	|     ,--|-> move.l 192(sp),-(sp)
    2052:	|     |  |   jsr 6bc <get2bytes>
    2058:	|     |  |   addq.l #4,sp
    205a:	|     |  |   move.l d0,d1
    205c:	|     |  |   move.l 184(sp),d0
    2060:	|     |  |   move.l d0,d2
    2062:	|     |  |   addq.l #2,d2
    2064:	|     |  |   move.l d2,184(sp)
    2068:	|     |  |   move.l d1,d1
    206a:	|     |  |   movea.l d0,a0
    206c:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    206e:	|     |  |   addq.l #1,180(sp)
    2072:	|     |  '-> moveq #31,d0
    2074:	|     |      cmp.l 180(sp),d0
    2078:	|     '----- bge.s 204e <CstLoadBackdrop+0xe6>
    207a:	|  ,-------- bra.s 209a <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    207c:	'--|-------> clr.l 176(sp)
    2080:	   |     ,-- bra.s 2092 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2082:	   |  ,--|-> move.l 192(sp),-(sp)
    2086:	   |  |  |   jsr 6bc <get2bytes>
    208c:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    208e:	   |  |  |   addq.l #1,176(sp)
    2092:	   |  |  '-> moveq #31,d2
    2094:	   |  |      cmp.l 176(sp),d2
    2098:	   |  '----- bge.s 2082 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    209a:	   '-------> moveq #0,d0
    209c:	             move.w 150(sp),d0
    20a0:	             move.l d0,128(sp)
    20a4:	             moveq #2,d0
    20a6:	             move.l d0,124(sp)
    20aa:	             move.l 1d0c6 <SysBase>,d0
    20b0:	             movea.l d0,a6
    20b2:	             move.l 128(sp),d0
    20b6:	             move.l 124(sp),d1
    20ba:	             jsr -684(a6)
    20be:	             move.l d0,120(sp)
    20c2:	             move.l 120(sp),d0
    20c6:	             move.l d0,116(sp)
  if( !tmpbuffer)
    20ca:	         ,-- bne.s 20da <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    20cc:	         |   pea 18595 <PutChar+0x27b>
    20d2:	         |   jsr 17878 <KPrintF>
    20d8:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    20da:	         '-> moveq #0,d0
    20dc:	             move.w 152(sp),d0
    20e0:	             move.l d0,112(sp)
    20e4:	             moveq #2,d2
    20e6:	             move.l d2,108(sp)
    20ea:	             move.l 1d0c6 <SysBase>,d0
    20f0:	             movea.l d0,a6
    20f2:	             move.l 112(sp),d0
    20f6:	             move.l 108(sp),d1
    20fa:	             jsr -684(a6)
    20fe:	             move.l d0,104(sp)
    2102:	             move.l 104(sp),d0
    2106:	             move.l d0,100(sp)
  if( !tmpmask)
    210a:	         ,-- bne.s 211a <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    210c:	         |   pea 185cb <PutChar+0x2b1>
    2112:	         |   jsr 17878 <KPrintF>
    2118:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    211a:	         '-> move.w 160(sp),d0
    211e:	             movea.w d0,a1
    2120:	             move.w 162(sp),d0
    2124:	             movea.w d0,a0
    2126:	             clr.l -(sp)
    2128:	             pea 5 <_start+0x5>
    212c:	             move.l a1,-(sp)
    212e:	             move.l a0,-(sp)
    2130:	             pea 185ff <PutChar+0x2e5>
    2136:	             move.l 136(sp),-(sp)
    213a:	             jsr 17960 <debug_register_bitmap>
    2140:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2144:	             move.w 160(sp),d0
    2148:	             movea.w d0,a1
    214a:	             move.w 162(sp),d0
    214e:	             movea.w d0,a0
    2150:	             clr.l -(sp)
    2152:	             pea 1 <_start+0x1>
    2156:	             move.l a1,-(sp)
    2158:	             move.l a0,-(sp)
    215a:	             pea 1860d <PutChar+0x2f3>
    2160:	             move.l 136(sp),-(sp)
    2164:	             jsr 17960 <debug_register_bitmap>
    216a:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    216e:	             move.l 192(sp),96(sp)
    2174:	             move.l 116(sp),92(sp)
    217a:	             moveq #2,d0
    217c:	             move.l d0,88(sp)
    2180:	             move.w 150(sp),d0
    2184:	             lsr.w #1,d0
    2186:	             move.w d0,d0
    2188:	             andi.l #65535,d0
    218e:	             move.l d0,84(sp)
    2192:	             move.l 1d0ce <DOSBase>,d0
    2198:	             movea.l d0,a6
    219a:	             move.l 96(sp),d1
    219e:	             move.l 92(sp),d2
    21a2:	             move.l 88(sp),d3
    21a6:	             move.l 84(sp),d4
    21aa:	             jsr -324(a6)
    21ae:	             move.l d0,80(sp)
    21b2:	             move.l 80(sp),d0
    21b6:	             move.w d0,78(sp)
  if(!count) {
    21ba:	         ,-- bne.s 21ce <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    21bc:	         |   pea 18619 <PutChar+0x2ff>
    21c2:	         |   jsr 17878 <KPrintF>
    21c8:	         |   addq.l #4,sp
    return;
    21ca:	   ,-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    21ce:	   |     '-> move.l 192(sp),74(sp)
    21d4:	   |         move.l 100(sp),70(sp)
    21da:	   |         moveq #2,d2
    21dc:	   |         move.l d2,66(sp)
    21e0:	   |         move.w 152(sp),d0
    21e4:	   |         lsr.w #1,d0
    21e6:	   |         move.w d0,d0
    21e8:	   |         andi.l #65535,d0
    21ee:	   |         move.l d0,62(sp)
    21f2:	   |         move.l 1d0ce <DOSBase>,d0
    21f8:	   |         movea.l d0,a6
    21fa:	   |         move.l 74(sp),d1
    21fe:	   |         move.l 70(sp),d2
    2202:	   |         move.l 66(sp),d3
    2206:	   |         move.l 62(sp),d4
    220a:	   |         jsr -324(a6)
    220e:	   |         move.l d0,58(sp)
    2212:	   |         move.l 58(sp),d0
    2216:	   |         move.w d0,78(sp)
   

  if(!count) {
    221a:	   |     ,-- bne.s 222e <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    221c:	   |     |   pea 18619 <PutChar+0x2ff>
    2222:	   |     |   jsr 17878 <KPrintF>
    2228:	   |     |   addq.l #4,sp
    return;
    222a:	   +-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    222e:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2236:	   |         move.l 1cfdc <CstBackDrop>,d0
    223c:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2240:	   |         move.l 200(sp),d0
    2244:	   |         move.w d0,d1
    2246:	   |         muls.w 154(sp),d1
    224a:	   |         move.l 196(sp),d0
    224e:	   |     ,-- bpl.s 2252 <CstLoadBackdrop+0x2ea>
    2250:	   |     |   addq.l #7,d0
    2252:	   |     '-> asr.l #3,d0
    2254:	   |         move.l d0,d0
    2256:	   |         movea.w d1,a0
    2258:	   |         adda.w d0,a0
    225a:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    225e:	   |         moveq #0,d0
    2260:	   |         move.w 52(sp),d0
    2264:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2268:	   |         pea 18634 <PutChar+0x31a>
    226e:	   |         jsr 17878 <KPrintF>
    2274:	   |         addq.l #4,sp


  WaitBlit();
    2276:	   |         move.l 1d0d2 <GfxBase>,d0
    227c:	   |         movea.l d0,a6
    227e:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2282:	   |         movea.l 54(sp),a0
    2286:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    228c:	   |         movea.l 54(sp),a0
    2290:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2296:	   |         movea.l 54(sp),a0
    229a:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    22a0:	   |         movea.l 54(sp),a0
    22a4:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    22aa:	   |         move.w 154(sp),d0
    22ae:	   |         sub.w 158(sp),d0
    22b2:	   |         movea.l 54(sp),a0
    22b6:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    22ba:	   |         move.w 154(sp),d0
    22be:	   |         sub.w 158(sp),d0
    22c2:	   |         movea.l 54(sp),a0
    22c6:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    22ca:	   |         movea.l 54(sp),a0
    22ce:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    22d4:	   |         movea.l 54(sp),a0
    22d8:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    22de:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e4:	   |         clr.l 164(sp)
    22e8:	   |     ,-- bra.s 2356 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    22ea:	   |  ,--|-> move.l 1d0d2 <GfxBase>,d0
    22f0:	   |  |  |   movea.l d0,a6
    22f2:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    22f6:	   |  |  |   movea.l 54(sp),a0
    22fa:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2300:	   |  |  |   move.l 168(sp),d0
    2304:	   |  |  |   movea.l 54(sp),a0
    2308:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    230c:	   |  |  |   move.l 172(sp),d0
    2310:	   |  |  |   movea.l 54(sp),a0
    2314:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2318:	   |  |  |   move.l 172(sp),d0
    231c:	   |  |  |   movea.l 54(sp),a0
    2320:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2324:	   |  |  |   move.w 160(sp),d0
    2328:	   |  |  |   lsl.w #6,d0
    232a:	   |  |  |   add.w 156(sp),d0
    232e:	   |  |  |   movea.l 54(sp),a0
    2332:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2336:	   |  |  |   moveq #0,d0
    2338:	   |  |  |   move.w 152(sp),d0
    233c:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    2340:	   |  |  |   move.w 1cfda <CstBackdropSizePlane>,d0
    2346:	   |  |  |   move.w d0,d0
    2348:	   |  |  |   andi.l #65535,d0
    234e:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2352:	   |  |  |   addq.l #1,164(sp)
    2356:	   |  |  '-> moveq #4,d0
    2358:	   |  |      cmp.l 164(sp),d0
    235c:	   |  '----- bge.s 22ea <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    235e:	   |         move.l 1d0d2 <GfxBase>,d0
    2364:	   |         movea.l d0,a6
    2366:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    236a:	   |         pea 18653 <PutChar+0x339>
    2370:	   |         jsr 17878 <KPrintF>
    2376:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2378:	   |         move.l 116(sp),48(sp)
    237e:	   |         move.l 1d0c6 <SysBase>,d0
    2384:	   |         movea.l d0,a6
    2386:	   |         movea.l 48(sp),a1
    238a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    238e:	   |         move.l 100(sp),44(sp)
    2394:	   |         move.l 1d0c6 <SysBase>,d0
    239a:	   |         movea.l d0,a6
    239c:	   |         movea.l 44(sp),a1
    23a0:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    23a4:	   |         move.l 1cff6 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23ac:	   |         moveq #20,d2
    23ae:	   |         move.l d2,36(sp)
    23b2:	   |         clr.l 32(sp)
    23b6:	   |         move.l 1d0c6 <SysBase>,d0
    23bc:	   |         movea.l d0,a6
    23be:	   |         move.l 36(sp),d0
    23c2:	   |         move.l 32(sp),d1
    23c6:	   |         jsr -684(a6)
    23ca:	   |         move.l d0,28(sp)
    23ce:	   |         move.l 28(sp),d0
    23d2:	   |         move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    23d8:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    23de:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    23e4:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    23ea:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    23ec:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    23f2:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    23f6:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    23fc:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2400:	   |         move.l 1d01a <winWidth>,d0
    2406:	   |         lsr.l #4,d0
    2408:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    240e:	   |         move.l d0,d0
    2410:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2414:	   |         move.l 1d01e <winHeight>,d0
    241a:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2420:	   |         move.l d0,d0
    2422:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2426:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    242c:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    2430:	   |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2436:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    243a:	   |         move.l 1cff2 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2442:	   |         moveq #20,d0
    2444:	   |         move.l d0,24(sp)
    2448:	   |         clr.l 20(sp)
    244c:	   |         move.l 1d0c6 <SysBase>,d0
    2452:	   |         movea.l d0,a6
    2454:	   |         move.l 24(sp),d0
    2458:	   |         move.l 20(sp),d1
    245c:	   |         jsr -684(a6)
    2460:	   |         move.l d0,16(sp)
    2464:	   |         move.l 16(sp),d0
    2468:	   |         move.l d0,1cff2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    246e:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2474:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    247a:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2480:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2482:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2488:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    248c:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2492:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2496:	   |         move.l 1d01a <winWidth>,d0
    249c:	   |         lsr.l #4,d0
    249e:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    24a4:	   |         move.l d0,d0
    24a6:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    24aa:	   |         move.l 1d01e <winHeight>,d0
    24b0:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    24b6:	   |         move.l d0,d0
    24b8:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    24bc:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    24c2:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    24c6:	   |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    24cc:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    24d0:	   |         pea 18673 <PutChar+0x359>
    24d6:	   |         jsr 17878 <KPrintF>
    24dc:	   |         addq.l #4,sp

}
    24de:	   '-------> movem.l (sp)+,d2-d4/a6
    24e2:	             lea 172(sp),sp
    24e6:	             rts

000024e8 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    24e8:	                lea -156(sp),sp
    24ec:	                move.l a6,-(sp)
    24ee:	                move.l d2,-(sp)
    24f0:	                move.l 172(sp),d1
    24f4:	                move.l 176(sp),d0
    24f8:	                move.w d1,d1
    24fa:	                move.w d1,10(sp)
    24fe:	                move.w d0,d0
    2500:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2504:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    250c:	                clr.l 108(sp)
  CstApplyBackDropCounter = 2;
    2510:	                move.w #2,1cfe8 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2518:	                move.l 1cfdc <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2520:	                clr.l 140(sp)

  blitwidth = single->width/16;
    2524:	                movea.l 168(sp),a0
    2528:	                move.l (a0),d0
    252a:	                movea.l d0,a0
    252c:	                cmpa.w #0,a0
    2530:	            ,-- bge.s 2536 <CstPasteChar+0x4e>
    2532:	            |   lea 15(a0),a0
    2536:	            '-> move.l a0,d0
    2538:	                asr.l #4,d0
    253a:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    253e:	            ,-- bne.s 2546 <CstPasteChar+0x5e>
    2540:	            |   moveq #1,d0
    2542:	            |   move.l d0,124(sp)

  if( y < 0) {
    2546:	            '-> tst.w 8(sp)
    254a:	         ,----- bge.s 2594 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    254c:	         |      movea.w 8(sp),a1
    2550:	         |      movea.l 168(sp),a0
    2554:	         |      move.l 4(a0),d0
    2558:	         |      add.l a1,d0
    255a:	         |  ,-- bpl.s 256e <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255c:	         |  |   pea 1868d <PutChar+0x373>
    2562:	         |  |   jsr 17878 <KPrintF>
    2568:	         |  |   addq.l #4,sp
      return;
    256a:	,--------|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    ystartdst = 0;
    256e:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    2572:	|        |      move.w 8(sp),d0
    2576:	|        |      ext.l d0
    2578:	|        |      move.l d0,d1
    257a:	|        |      neg.l d1
    257c:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    2580:	|        |      movea.l 168(sp),a0
    2584:	|        |      move.l 4(a0),d0
    2588:	|        |      movea.w 8(sp),a0
    258c:	|        |      add.l a0,d0
    258e:	|        |      move.l d0,128(sp)
    2592:	|     ,--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    2594:	|     |  '----> movea.w 8(sp),a1
    2598:	|     |         movea.l 168(sp),a0
    259c:	|     |         move.l 4(a0),d0
    25a0:	|     |         move.l a1,d1
    25a2:	|     |         add.l d0,d1
    25a4:	|     |         move.l 1d01e <winHeight>,d0
    25aa:	|     |         cmp.l d1,d0
    25ac:	|     |  ,----- bge.s 25ee <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    25ae:	|     |  |      movea.w 8(sp),a0
    25b2:	|     |  |      move.l 1d01e <winHeight>,d0
    25b8:	|     |  |      cmp.l a0,d0
    25ba:	|     |  |  ,-- bge.s 25ce <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25bc:	|     |  |  |   pea 1868d <PutChar+0x373>
    25c2:	|     |  |  |   jsr 17878 <KPrintF>
    25c8:	|     |  |  |   addq.l #4,sp
      return;
    25ca:	+-----|--|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    ystartdst = y;
    25ce:	|     |  |  '-> movea.w 8(sp),a0
    25d2:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    25d6:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    25da:	|     |  |      move.l 1d01e <winHeight>,d0
    25e0:	|     |  |      movea.w 8(sp),a0
    25e4:	|     |  |      move.l d0,d1
    25e6:	|     |  |      sub.l a0,d1
    25e8:	|     |  |      move.l d1,128(sp)
    25ec:	|     +--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    25ee:	|     |  '----> movea.w 8(sp),a0
    25f2:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    25f6:	|     |         clr.l 132(sp)
    blitheight = single->height;
    25fa:	|     |         movea.l 168(sp),a0
    25fe:	|     |         move.l 4(a0),d0
    2602:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2606:	|     '-------> tst.w 10(sp)
    260a:	|        ,----- bge.w 2852 <CstPasteChar+0x36a>
    if(x + single->width < 0) {
    260e:	|        |      movea.w 10(sp),a1
    2612:	|        |      movea.l 168(sp),a0
    2616:	|        |      move.l (a0),d0
    2618:	|        |      add.l a1,d0
    261a:	|        |  ,-- bpl.s 262e <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261c:	|        |  |   pea 1868d <PutChar+0x373>
    2622:	|        |  |   jsr 17878 <KPrintF>
    2628:	|        |  |   addq.l #4,sp
      return;
    262a:	+--------|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>

    }
    
    extrawords = 1;
    262e:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    2634:	|        |      move.w 10(sp),d0
    2638:	|        |  ,-- bpl.s 263e <CstPasteChar+0x156>
    263a:	|        |  |   addi.w #15,d0
    263e:	|        |  '-> asr.w #4,d0
    2640:	|        |      neg.w d0
    2642:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    2646:	|        |      move.w 10(sp),d0
    264a:	|        |      ext.l d0
    264c:	|        |      neg.l d0
    264e:	|        |      andi.l #-2147483633,d0
    2654:	|        |  ,-- bpl.s 265e <CstPasteChar+0x176>
    2656:	|        |  |   subq.l #1,d0
    2658:	|        |  |   moveq #-16,d1
    265a:	|        |  |   or.l d1,d0
    265c:	|        |  |   addq.l #1,d0
    265e:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2662:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2666:	|        |      movea.l 168(sp),a0
    266a:	|        |      move.l 24(a0),d0
    266e:	|        |      move.l d0,d1
    2670:	|        |      moveq #0,d0
    2672:	|        |      move.w 160(sp),d0
    2676:	|        |      add.l d0,d0
    2678:	|        |      move.l d1,d2
    267a:	|        |      add.l d0,d2
    267c:	|        |      movea.l 168(sp),a0
    2680:	|        |      move.l (a0),d0
    2682:	|        |      move.l 132(sp),-(sp)
    2686:	|        |      move.l d0,-(sp)
    2688:	|        |      jsr 18204 <__mulsi3>
    268e:	|        |      addq.l #8,sp
    2690:	|        |      lsr.l #3,d0
    2692:	|        |      move.l d2,d1
    2694:	|        |      add.l d0,d1
    2696:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    269a:	|        |      move.l 1d01a <winWidth>,d0
    26a0:	|        |      move.l 136(sp),-(sp)
    26a4:	|        |      move.l d0,-(sp)
    26a6:	|        |      jsr 18204 <__mulsi3>
    26ac:	|        |      addq.l #8,sp
    26ae:	|        |      lsr.l #3,d0
    26b0:	|        |      move.l 108(sp),d1
    26b4:	|        |      add.l d1,d0
    26b6:	|        |      move.l d0,d2
    26b8:	|        |      subq.l #2,d2
    26ba:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26be:	|        |      move.l 1d01a <winWidth>,d0
    26c4:	|        |      move.l 136(sp),-(sp)
    26c8:	|        |      move.l d0,-(sp)
    26ca:	|        |      jsr 18204 <__mulsi3>
    26d0:	|        |      addq.l #8,sp
    26d2:	|        |      lsr.l #3,d0
    26d4:	|        |      move.l 108(sp),d1
    26d8:	|        |      add.l d1,d0
    26da:	|        |      move.l d0,d1
    26dc:	|        |      subq.l #2,d1
    26de:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    26e2:	|        |      moveq #0,d0
    26e4:	|        |      move.w 158(sp),d0
    26e8:	|        |      moveq #16,d1
    26ea:	|        |      sub.l d0,d1
    26ec:	|        |      move.l d1,d0
    26ee:	|        |      moveq #12,d2
    26f0:	|        |      lsl.l d2,d0
    26f2:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    26f6:	|        |      move.l 1cff6 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    26fe:	|        |      moveq #20,d0
    2700:	|        |      move.l d0,44(sp)
    2704:	|        |      clr.l 40(sp)
    2708:	|        |      move.l 1d0c6 <SysBase>,d0
    270e:	|        |      movea.l d0,a6
    2710:	|        |      move.l 44(sp),d0
    2714:	|        |      move.l 40(sp),d1
    2718:	|        |      jsr -684(a6)
    271c:	|        |      move.l d0,36(sp)
    2720:	|        |      move.l 36(sp),d0
    2724:	|        |      move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    272a:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2730:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    2736:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    273c:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    273e:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2744:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2748:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    274e:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2752:	|        |      movea.l 168(sp),a0
    2756:	|        |      move.l (a0),d0
    2758:	|        |      movea.l d0,a0
    275a:	|        |      cmpa.w #0,a0
    275e:	|        |  ,-- bge.s 2764 <CstPasteChar+0x27c>
    2760:	|        |  |   lea 15(a0),a0
    2764:	|        |  '-> move.l a0,d0
    2766:	|        |      asr.l #4,d0
    2768:	|        |      move.l d0,d0
    276a:	|        |      add.w 160(sp),d0
    276e:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2774:	|        |      add.w 162(sp),d0
    2778:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    277c:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2782:	|        |      move.l 128(sp),d0
    2786:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    278a:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2790:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2794:	|        |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    279a:	|        |      move.l 136(sp),d0
    279e:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    27a2:	|        |      move.l 1cff2 <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    27aa:	|        |      moveq #20,d1
    27ac:	|        |      move.l d1,32(sp)
    27b0:	|        |      clr.l 28(sp)
    27b4:	|        |      move.l 1d0c6 <SysBase>,d0
    27ba:	|        |      movea.l d0,a6
    27bc:	|        |      move.l 32(sp),d0
    27c0:	|        |      move.l 28(sp),d1
    27c4:	|        |      jsr -684(a6)
    27c8:	|        |      move.l d0,24(sp)
    27cc:	|        |      move.l 24(sp),d0
    27d0:	|        |      move.l d0,1cff2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    27d6:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    27dc:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    27e2:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    27e8:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    27ea:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    27f0:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    27f4:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    27fa:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    27fe:	|        |      movea.l 168(sp),a0
    2802:	|        |      move.l (a0),d0
    2804:	|        |      movea.l d0,a0
    2806:	|        |      cmpa.w #0,a0
    280a:	|        |  ,-- bge.s 2810 <CstPasteChar+0x328>
    280c:	|        |  |   lea 15(a0),a0
    2810:	|        |  '-> move.l a0,d0
    2812:	|        |      asr.l #4,d0
    2814:	|        |      move.l d0,d0
    2816:	|        |      add.w 160(sp),d0
    281a:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2820:	|        |      add.w 162(sp),d0
    2824:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2828:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    282e:	|        |      move.l 128(sp),d0
    2832:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    2836:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    283c:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    2840:	|        |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2846:	|        |      move.l 136(sp),d0
    284a:	|        |      move.w d0,14(a0)
    284e:	|     ,--|----- bra.w 2d4a <CstPasteChar+0x862>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2852:	|     |  '----> movea.w 10(sp),a1
    2856:	|     |         movea.l 168(sp),a0
    285a:	|     |         move.l (a0),d0
    285c:	|     |         move.l a1,d1
    285e:	|     |         add.l d0,d1
    2860:	|     |         move.l 1d01a <winWidth>,d0
    2866:	|     |         cmp.l d1,d0
    2868:	|     |  ,----- bge.w 2af4 <CstPasteChar+0x60c>

    if(x - single->width > (int) winWidth)
    286c:	|     |  |      movea.w 10(sp),a1
    2870:	|     |  |      movea.l 168(sp),a0
    2874:	|     |  |      move.l (a0),d0
    2876:	|     |  |      move.l a1,d1
    2878:	|     |  |      sub.l d0,d1
    287a:	|     |  |      move.l 1d01a <winWidth>,d0
    2880:	|     |  |      cmp.l d1,d0
    2882:	|     |  |  ,-- bge.s 2896 <CstPasteChar+0x3ae>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2884:	|     |  |  |   pea 1868d <PutChar+0x373>
    288a:	|     |  |  |   jsr 17878 <KPrintF>
    2890:	|     |  |  |   addq.l #4,sp
      return;
    2892:	+-----|--|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2896:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    289a:	|     |  |      movea.w 10(sp),a1
    289e:	|     |  |      movea.l 168(sp),a0
    28a2:	|     |  |      move.l (a0),d0
    28a4:	|     |  |      add.l a1,d0
    28a6:	|     |  |      move.l d0,d1
    28a8:	|     |  |      move.l 1d01a <winWidth>,d0
    28ae:	|     |  |      sub.l d0,d1
    28b0:	|     |  |      move.l d1,d0
    28b2:	|     |  |      lsr.l #4,d0
    28b4:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    28b8:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    28bc:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    28c2:	|     |  |      movea.l 168(sp),a0
    28c6:	|     |  |      move.l 24(a0),d0
    28ca:	|     |  |      move.l d0,d2
    28cc:	|     |  |      movea.l 168(sp),a0
    28d0:	|     |  |      move.l (a0),d0
    28d2:	|     |  |      move.l 132(sp),-(sp)
    28d6:	|     |  |      move.l d0,-(sp)
    28d8:	|     |  |      jsr 18204 <__mulsi3>
    28de:	|     |  |      addq.l #8,sp
    28e0:	|     |  |      lsr.l #3,d0
    28e2:	|     |  |      move.l d2,d1
    28e4:	|     |  |      add.l d0,d1
    28e6:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28ea:	|     |  |      move.l 1d01a <winWidth>,d0
    28f0:	|     |  |      move.l 136(sp),-(sp)
    28f4:	|     |  |      move.l d0,-(sp)
    28f6:	|     |  |      jsr 18204 <__mulsi3>
    28fc:	|     |  |      addq.l #8,sp
    28fe:	|     |  |      lsr.l #3,d0
    2900:	|     |  |      move.l 108(sp),d1
    2904:	|     |  |      add.l d0,d1
    2906:	|     |  |      move.w 10(sp),d0
    290a:	|     |  |  ,-- bpl.s 2910 <CstPasteChar+0x428>
    290c:	|     |  |  |   addi.w #15,d0
    2910:	|     |  |  '-> asr.w #4,d0
    2912:	|     |  |      movea.w d0,a0
    2914:	|     |  |      move.l a0,d0
    2916:	|     |  |      add.l a0,d0
    2918:	|     |  |      move.l d1,d2
    291a:	|     |  |      add.l d0,d2
    291c:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2920:	|     |  |      move.l 1d01a <winWidth>,d0
    2926:	|     |  |      move.l 136(sp),-(sp)
    292a:	|     |  |      move.l d0,-(sp)
    292c:	|     |  |      jsr 18204 <__mulsi3>
    2932:	|     |  |      addq.l #8,sp
    2934:	|     |  |      lsr.l #3,d0
    2936:	|     |  |      move.l 108(sp),d1
    293a:	|     |  |      add.l d0,d1
    293c:	|     |  |      move.w 10(sp),d0
    2940:	|     |  |  ,-- bpl.s 2946 <CstPasteChar+0x45e>
    2942:	|     |  |  |   addi.w #15,d0
    2946:	|     |  |  '-> asr.w #4,d0
    2948:	|     |  |      movea.w d0,a0
    294a:	|     |  |      move.l a0,d0
    294c:	|     |  |      add.l a0,d0
    294e:	|     |  |      move.l d1,d2
    2950:	|     |  |      add.l d0,d2
    2952:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    2956:	|     |  |      movea.l 168(sp),a0
    295a:	|     |  |      move.l (a0),d0
    295c:	|     |  |      andi.l #-2147483633,d0
    2962:	|     |  |  ,-- bpl.s 296c <CstPasteChar+0x484>
    2964:	|     |  |  |   subq.l #1,d0
    2966:	|     |  |  |   moveq #-16,d1
    2968:	|     |  |  |   or.l d1,d0
    296a:	|     |  |  |   addq.l #1,d0
    296c:	|     |  |  '-> moveq #12,d2
    296e:	|     |  |      lsl.l d2,d0
    2970:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2974:	|     |  |      move.l 1cff6 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    297c:	|     |  |      moveq #20,d0
    297e:	|     |  |      move.l d0,72(sp)
    2982:	|     |  |      clr.l 68(sp)
    2986:	|     |  |      move.l 1d0c6 <SysBase>,d0
    298c:	|     |  |      movea.l d0,a6
    298e:	|     |  |      move.l 72(sp),d0
    2992:	|     |  |      move.l 68(sp),d1
    2996:	|     |  |      jsr -684(a6)
    299a:	|     |  |      move.l d0,64(sp)
    299e:	|     |  |      move.l 64(sp),d0
    29a2:	|     |  |      move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    29a8:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    29ae:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    29b4:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    29ba:	|     |  |      move.w 10(sp),d0
    29be:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    29c0:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    29c6:	|     |  |      move.l 136(sp),d0
    29ca:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    29ce:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    29d4:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    29d8:	|     |  |      movea.l 168(sp),a0
    29dc:	|     |  |      move.l (a0),d0
    29de:	|     |  |      movea.l d0,a0
    29e0:	|     |  |      cmpa.w #0,a0
    29e4:	|     |  |  ,-- bge.s 29ea <CstPasteChar+0x502>
    29e6:	|     |  |  |   lea 15(a0),a0
    29ea:	|     |  |  '-> move.l a0,d0
    29ec:	|     |  |      asr.l #4,d0
    29ee:	|     |  |      move.l d0,d0
    29f0:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    29f6:	|     |  |      add.w 160(sp),d0
    29fa:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    29fe:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2a04:	|     |  |      move.l 128(sp),d0
    2a08:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2a0c:	|     |  |      move.w 10(sp),d0
    2a10:	|     |  |  ,-- bpl.s 2a16 <CstPasteChar+0x52e>
    2a12:	|     |  |  |   addi.w #15,d0
    2a16:	|     |  |  '-> asr.w #4,d0
    2a18:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2a1e:	|     |  |      add.w d0,d0
    2a20:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2a24:	|     |  |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2a2a:	|     |  |      move.l 136(sp),d0
    2a2e:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2a32:	|     |  |      move.l 1cff2 <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2a3a:	|     |  |      moveq #20,d1
    2a3c:	|     |  |      move.l d1,60(sp)
    2a40:	|     |  |      clr.l 56(sp)
    2a44:	|     |  |      move.l 1d0c6 <SysBase>,d0
    2a4a:	|     |  |      movea.l d0,a6
    2a4c:	|     |  |      move.l 60(sp),d0
    2a50:	|     |  |      move.l 56(sp),d1
    2a54:	|     |  |      jsr -684(a6)
    2a58:	|     |  |      move.l d0,52(sp)
    2a5c:	|     |  |      move.l 52(sp),d0
    2a60:	|     |  |      move.l d0,1cff2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2a66:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2a6c:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2a72:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2a78:	|     |  |      move.w 10(sp),d0
    2a7c:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a7e:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2a84:	|     |  |      move.l 136(sp),d0
    2a88:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a8c:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2a92:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2a96:	|     |  |      movea.l 168(sp),a0
    2a9a:	|     |  |      move.l (a0),d0
    2a9c:	|     |  |      movea.l d0,a0
    2a9e:	|     |  |      cmpa.w #0,a0
    2aa2:	|     |  |  ,-- bge.s 2aa8 <CstPasteChar+0x5c0>
    2aa4:	|     |  |  |   lea 15(a0),a0
    2aa8:	|     |  |  '-> move.l a0,d0
    2aaa:	|     |  |      asr.l #4,d0
    2aac:	|     |  |      move.l d0,d0
    2aae:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2ab4:	|     |  |      add.w 160(sp),d0
    2ab8:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2abc:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2ac2:	|     |  |      move.l 128(sp),d0
    2ac6:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2aca:	|     |  |      move.w 10(sp),d0
    2ace:	|     |  |  ,-- bpl.s 2ad4 <CstPasteChar+0x5ec>
    2ad0:	|     |  |  |   addi.w #15,d0
    2ad4:	|     |  |  '-> asr.w #4,d0
    2ad6:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2adc:	|     |  |      add.w d0,d0
    2ade:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2ae2:	|     |  |      movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2ae8:	|     |  |      move.l 136(sp),d0
    2aec:	|     |  |      move.w d0,14(a0)
    2af0:	|     +--|----- bra.w 2d4a <CstPasteChar+0x862>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2af4:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2afa:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2afe:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2b02:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2b06:	|     |         movea.l 168(sp),a0
    2b0a:	|     |         move.l 24(a0),d0
    2b0e:	|     |         move.l d0,d2
    2b10:	|     |         movea.l 168(sp),a0
    2b14:	|     |         move.l (a0),d0
    2b16:	|     |         movea.l d0,a0
    2b18:	|     |         cmpa.w #0,a0
    2b1c:	|     |     ,-- bge.s 2b22 <CstPasteChar+0x63a>
    2b1e:	|     |     |   lea 15(a0),a0
    2b22:	|     |     '-> move.l a0,d0
    2b24:	|     |         asr.l #4,d0
    2b26:	|     |         move.l 132(sp),-(sp)
    2b2a:	|     |         move.l d0,-(sp)
    2b2c:	|     |         jsr 18204 <__mulsi3>
    2b32:	|     |         addq.l #8,sp
    2b34:	|     |         add.l d0,d0
    2b36:	|     |         move.l d2,d1
    2b38:	|     |         add.l d0,d1
    2b3a:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2b3e:	|     |         move.l 1d01a <winWidth>,d0
    2b44:	|     |         move.l 136(sp),-(sp)
    2b48:	|     |         move.l d0,-(sp)
    2b4a:	|     |         jsr 18204 <__mulsi3>
    2b50:	|     |         addq.l #8,sp
    2b52:	|     |         lsr.l #3,d0
    2b54:	|     |         move.l 108(sp),d1
    2b58:	|     |         add.l d0,d1
    2b5a:	|     |         move.w 10(sp),d0
    2b5e:	|     |     ,-- bpl.s 2b64 <CstPasteChar+0x67c>
    2b60:	|     |     |   addi.w #15,d0
    2b64:	|     |     '-> asr.w #4,d0
    2b66:	|     |         movea.w d0,a0
    2b68:	|     |         move.l a0,d0
    2b6a:	|     |         add.l a0,d0
    2b6c:	|     |         move.l d1,d2
    2b6e:	|     |         add.l d0,d2
    2b70:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2b74:	|     |         move.l 1d01a <winWidth>,d0
    2b7a:	|     |         move.l 136(sp),-(sp)
    2b7e:	|     |         move.l d0,-(sp)
    2b80:	|     |         jsr 18204 <__mulsi3>
    2b86:	|     |         addq.l #8,sp
    2b88:	|     |         lsr.l #3,d0
    2b8a:	|     |         move.l 108(sp),d1
    2b8e:	|     |         add.l d0,d1
    2b90:	|     |         move.w 10(sp),d0
    2b94:	|     |     ,-- bpl.s 2b9a <CstPasteChar+0x6b2>
    2b96:	|     |     |   addi.w #15,d0
    2b9a:	|     |     '-> asr.w #4,d0
    2b9c:	|     |         movea.w d0,a0
    2b9e:	|     |         move.l a0,d0
    2ba0:	|     |         add.l a0,d0
    2ba2:	|     |         move.l d1,d2
    2ba4:	|     |         add.l d0,d2
    2ba6:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2baa:	|     |         move.w 10(sp),d0
    2bae:	|     |         andi.w #-32753,d0
    2bb2:	|     |     ,-- bpl.s 2bbc <CstPasteChar+0x6d4>
    2bb4:	|     |     |   subq.w #1,d0
    2bb6:	|     |     |   ori.w #-16,d0
    2bba:	|     |     |   addq.w #1,d0
    2bbc:	|     |     '-> ext.l d0
    2bbe:	|     |         moveq #12,d1
    2bc0:	|     |         lsl.l d1,d0
    2bc2:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2bc6:	|     |         move.l 1cff6 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2bce:	|     |         moveq #20,d2
    2bd0:	|     |         move.l d2,100(sp)
    2bd4:	|     |         clr.l 96(sp)
    2bd8:	|     |         move.l 1d0c6 <SysBase>,d0
    2bde:	|     |         movea.l d0,a6
    2be0:	|     |         move.l 100(sp),d0
    2be4:	|     |         move.l 96(sp),d1
    2be8:	|     |         jsr -684(a6)
    2bec:	|     |         move.l d0,92(sp)
    2bf0:	|     |         move.l 92(sp),d0
    2bf4:	|     |         move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2bfa:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c00:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2c06:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c0c:	|     |         move.w 10(sp),d0
    2c10:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2c12:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c18:	|     |         move.l 136(sp),d0
    2c1c:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2c20:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c26:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c2a:	|     |         movea.l 168(sp),a0
    2c2e:	|     |         move.l (a0),d0
    2c30:	|     |         movea.l d0,a0
    2c32:	|     |         cmpa.w #0,a0
    2c36:	|     |     ,-- bge.s 2c3c <CstPasteChar+0x754>
    2c38:	|     |     |   lea 15(a0),a0
    2c3c:	|     |     '-> move.l a0,d0
    2c3e:	|     |         asr.l #4,d0
    2c40:	|     |         move.l d0,d0
    2c42:	|     |         add.w 160(sp),d0
    2c46:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c4c:	|     |         add.w 162(sp),d0
    2c50:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2c54:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c5a:	|     |         move.l 128(sp),d0
    2c5e:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2c62:	|     |         move.w 10(sp),d0
    2c66:	|     |     ,-- bpl.s 2c6c <CstPasteChar+0x784>
    2c68:	|     |     |   addi.w #15,d0
    2c6c:	|     |     '-> asr.w #4,d0
    2c6e:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c74:	|     |         add.w d0,d0
    2c76:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c7a:	|     |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2c80:	|     |         move.l 136(sp),d0
    2c84:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2c88:	|     |         move.l 1cff2 <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2c90:	|     |         moveq #20,d0
    2c92:	|     |         move.l d0,88(sp)
    2c96:	|     |         clr.l 84(sp)
    2c9a:	|     |         move.l 1d0c6 <SysBase>,d0
    2ca0:	|     |         movea.l d0,a6
    2ca2:	|     |         move.l 88(sp),d0
    2ca6:	|     |         move.l 84(sp),d1
    2caa:	|     |         jsr -684(a6)
    2cae:	|     |         move.l d0,80(sp)
    2cb2:	|     |         move.l 80(sp),d0
    2cb6:	|     |         move.l d0,1cff2 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2cbc:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2cc2:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2cc8:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2cce:	|     |         move.w 10(sp),d0
    2cd2:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2cd4:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2cda:	|     |         move.l 136(sp),d0
    2cde:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2ce2:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2ce8:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2cec:	|     |         movea.l 168(sp),a0
    2cf0:	|     |         move.l (a0),d0
    2cf2:	|     |         movea.l d0,a0
    2cf4:	|     |         cmpa.w #0,a0
    2cf8:	|     |     ,-- bge.s 2cfe <CstPasteChar+0x816>
    2cfa:	|     |     |   lea 15(a0),a0
    2cfe:	|     |     '-> move.l a0,d0
    2d00:	|     |         asr.l #4,d0
    2d02:	|     |         move.l d0,d0
    2d04:	|     |         add.w 160(sp),d0
    2d08:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2d0e:	|     |         add.w 162(sp),d0
    2d12:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2d16:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2d1c:	|     |         move.l 128(sp),d0
    2d20:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2d24:	|     |         move.w 10(sp),d0
    2d28:	|     |     ,-- bpl.s 2d2e <CstPasteChar+0x846>
    2d2a:	|     |     |   addi.w #15,d0
    2d2e:	|     |     '-> asr.w #4,d0
    2d30:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2d36:	|     |         add.w d0,d0
    2d38:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2d3c:	|     |         movea.l 1cff2 <CstCleanupQueueViewBuffer>,a0
    2d42:	|     |         move.l 136(sp),d0
    2d46:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2d4a:	|     '-------> moveq #0,d0
    2d4c:	|               move.w 158(sp),d0
    2d50:	|               moveq #0,d1
    2d52:	|               not.w d1
    2d54:	|               asr.l d0,d1
    2d56:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2d5a:	|               moveq #0,d1
    2d5c:	|               move.w 160(sp),d1
    2d60:	|               moveq #0,d0
    2d62:	|               move.w 162(sp),d0
    2d66:	|               sub.l d0,d1
    2d68:	|               move.l d1,d0
    2d6a:	|               add.w d0,d0
    2d6c:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d70:	|               move.l 1d01a <winWidth>,d0
    2d76:	|               lsr.l #3,d0
    2d78:	|               move.l d0,d2
    2d7a:	|               move.w 160(sp),d1
    2d7e:	|               sub.w 162(sp),d1
    2d82:	|               move.l 124(sp),d0
    2d86:	|               sub.w d0,d1
    2d88:	|               move.w d1,d0
    2d8a:	|               add.w d1,d0
    2d8c:	|               add.w d2,d0
    2d8e:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d92:	|               move.l 1d01a <winWidth>,d0
    2d98:	|               lsr.l #3,d0
    2d9a:	|               move.l d0,d2
    2d9c:	|               move.w 160(sp),d1
    2da0:	|               sub.w 162(sp),d1
    2da4:	|               move.l 124(sp),d0
    2da8:	|               sub.w d0,d1
    2daa:	|               move.w d1,d0
    2dac:	|               add.w d1,d0
    2dae:	|               add.w d2,d0
    2db0:	|               move.w d0,16(sp)

  WaitBlit();
    2db4:	|               move.l 1d0d2 <GfxBase>,d0
    2dba:	|               movea.l d0,a6
    2dbc:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2dc0:	|               movea.l 112(sp),a0
    2dc4:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2dca:	|               movea.l 112(sp),a0
    2dce:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2dd4:	|               move.w 20(sp),d0
    2dd8:	|               movea.l 112(sp),a0
    2ddc:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2de0:	|               move.w 18(sp),d0
    2de4:	|               movea.l 112(sp),a0
    2de8:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2dec:	|               move.w 16(sp),d0
    2df0:	|               movea.l 112(sp),a0
    2df4:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2df8:	|               move.l 1d01a <winWidth>,d0
    2dfe:	|               lsr.l #3,d0
    2e00:	|               move.l d0,d1
    2e02:	|               move.l 1d01e <winHeight>,d0
    2e08:	|               move.l d0,d0
    2e0a:	|               move.w d1,d2
    2e0c:	|               muls.w d0,d2
    2e0e:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2e12:	|               move.w 1cfd4 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2e1a:	|               move.w 122(sp),d0
    2e1e:	|               andi.w #1,d0
    2e22:	|               move.w d0,12(sp)
  if(tmp2) {
    2e26:	|        ,----- beq.s 2e30 <CstPasteChar+0x948>
    minterm = 0xbfa;
    2e28:	|        |      move.w #3066,120(sp)
    2e2e:	|        |  ,-- bra.s 2e36 <CstPasteChar+0x94e>
  } else {
    minterm = 0xb0a;
    2e30:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e36:	|           '-> clr.l 116(sp)
    2e3a:	|     ,-------- bra.w 2ed8 <CstPasteChar+0x9f0>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2e3e:	|  ,--|-------> move.l 140(sp),d0
    2e42:	|  |  |         add.w 120(sp),d0
    2e46:	|  |  |         movea.l 112(sp),a0
    2e4a:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2e4e:	|  |  |         move.l 152(sp),d0
    2e52:	|  |  |         movea.l 112(sp),a0
    2e56:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2e5a:	|  |  |         move.l 148(sp),d0
    2e5e:	|  |  |         movea.l 112(sp),a0
    2e62:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2e66:	|  |  |         move.l 144(sp),d0
    2e6a:	|  |  |         movea.l 112(sp),a0
    2e6e:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2e72:	|  |  |         move.l 128(sp),d0
    2e76:	|  |  |         lsl.w #6,d0
    2e78:	|  |  |         move.l 124(sp),d1
    2e7c:	|  |  |         add.w d1,d0
    2e7e:	|  |  |         sub.w 160(sp),d0
    2e82:	|  |  |         add.w 162(sp),d0
    2e86:	|  |  |         movea.l 112(sp),a0
    2e8a:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2e8e:	|  |  |         moveq #0,d0
    2e90:	|  |  |         move.w 14(sp),d0
    2e94:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2e98:	|  |  |         moveq #0,d0
    2e9a:	|  |  |         move.w 14(sp),d0
    2e9e:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2ea2:	|  |  |         move.w 122(sp),d0
    2ea6:	|  |  |         lsr.w #1,d0
    2ea8:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2eac:	|  |  |         move.w 122(sp),d1
    2eb0:	|  |  |         andi.w #1,d1
    2eb4:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2eb8:	|  |  |  ,----- beq.s 2ec2 <CstPasteChar+0x9da>
      minterm = 0xbfa;
    2eba:	|  |  |  |      move.w #3066,120(sp)
    2ec0:	|  |  |  |  ,-- bra.s 2ec8 <CstPasteChar+0x9e0>
    } else {
      minterm = 0xb0a;
    2ec2:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2ec8:	|  |  |     '-> move.l 1d0d2 <GfxBase>,d0
    2ece:	|  |  |         movea.l d0,a6
    2ed0:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ed4:	|  |  |         addq.l #1,116(sp)
    2ed8:	|  |  '-------> moveq #4,d2
    2eda:	|  |            cmp.l 116(sp),d2
    2ede:	|  '----------- bge.w 2e3e <CstPasteChar+0x956>
  }   
  //custom->color[0] = 0x000;
}
    2ee2:	'-------------> move.l (sp)+,d2
    2ee4:	                movea.l (sp)+,a6
    2ee6:	                lea 156(sp),sp
    2eea:	                rts

00002eec <CstRestoreScreen>:


void CstRestoreScreen()
{
    2eec:	                   lea -24(sp),sp
    2ef0:	                   move.l a6,-(sp)
    2ef2:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2ef4:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2efc:	                   move.l 1cff6 <CstCleanupQueueDrawBuffer>,d0
    2f02:	,----------------- beq.w 3114 <CstRestoreScreen+0x228>
    2f06:	|                  move.l 1cfee <CstDrawBuffer>,d0
    2f0c:	+----------------- beq.w 3114 <CstRestoreScreen+0x228>
    return;
  } 

  WaitBlit();
    2f10:	|                  move.l 1d0d2 <GfxBase>,d0
    2f16:	|                  movea.l d0,a6
    2f18:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2f1c:	|                  movea.l 16(sp),a0
    2f20:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2f26:	|                  movea.l 16(sp),a0
    2f2a:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2f30:	|                  movea.l 16(sp),a0
    2f34:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2f3a:	|     ,----------- bra.w 3108 <CstRestoreScreen+0x21c>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2f3e:	|  ,--|----------> movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2f44:	|  |  |            move.l 4(a0),d0
    2f48:	|  |  |     ,----- beq.s 2f5e <CstRestoreScreen+0x72>
    2f4a:	|  |  |     |      movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2f50:	|  |  |     |      movea.l 4(a0),a0
    2f54:	|  |  |     |      move.l 16(a0),d0
    2f58:	|  |  |     |      moveq #2,d1
    2f5a:	|  |  |     |      cmp.l d0,d1
    2f5c:	|  |  |     |  ,-- bge.s 2f6c <CstRestoreScreen+0x80>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2f5e:	|  |  |     '--|-> movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2f64:	|  |  |        |   move.l 4(a0),d0
    2f68:	|  |  |  ,-----|-- bne.w 30d6 <CstRestoreScreen+0x1ea>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f6c:	|  |  |  |     '-> move.l 1d01a <winWidth>,d0
    2f72:	|  |  |  |         lsr.l #3,d0
    2f74:	|  |  |  |         move.l d0,d1
    2f76:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2f7c:	|  |  |  |         move.w 8(a0),d0
    2f80:	|  |  |  |         add.w d0,d0
    2f82:	|  |  |  |         sub.w d0,d1
    2f84:	|  |  |  |         movea.l 16(sp),a0
    2f88:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f8c:	|  |  |  |         move.l 1d01a <winWidth>,d0
    2f92:	|  |  |  |         lsr.l #3,d0
    2f94:	|  |  |  |         move.l d0,d1
    2f96:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2f9c:	|  |  |  |         move.w 8(a0),d0
    2fa0:	|  |  |  |         add.w d0,d0
    2fa2:	|  |  |  |         sub.w d0,d1
    2fa4:	|  |  |  |         movea.l 16(sp),a0
    2fa8:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2fac:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2fb2:	|  |  |  |         move.w 14(a0),d0
    2fb6:	|  |  |  |         move.w d0,d0
    2fb8:	|  |  |  |         andi.l #65535,d0
    2fbe:	|  |  |  |         move.l 1d01a <winWidth>,d1
    2fc4:	|  |  |  |         move.l d1,-(sp)
    2fc6:	|  |  |  |         move.l d0,-(sp)
    2fc8:	|  |  |  |         jsr 18204 <__mulsi3>
    2fce:	|  |  |  |         addq.l #8,sp
    2fd0:	|  |  |  |         move.l d0,d1
    2fd2:	|  |  |  |         lsr.l #3,d1
    2fd4:	|  |  |  |         move.l 1cfdc <CstBackDrop>,d0
    2fda:	|  |  |  |         add.l d0,d1
    2fdc:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2fe2:	|  |  |  |         move.w 12(a0),d0
    2fe6:	|  |  |  |         move.w d0,d0
    2fe8:	|  |  |  |         andi.l #65535,d0
    2fee:	|  |  |  |         move.l d1,d2
    2ff0:	|  |  |  |         add.l d0,d2
    2ff2:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2ff6:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    2ffc:	|  |  |  |         move.w 14(a0),d0
    3000:	|  |  |  |         move.w d0,d0
    3002:	|  |  |  |         andi.l #65535,d0
    3008:	|  |  |  |         move.l 1d01a <winWidth>,d1
    300e:	|  |  |  |         move.l d1,-(sp)
    3010:	|  |  |  |         move.l d0,-(sp)
    3012:	|  |  |  |         jsr 18204 <__mulsi3>
    3018:	|  |  |  |         addq.l #8,sp
    301a:	|  |  |  |         move.l d0,d1
    301c:	|  |  |  |         lsr.l #3,d1
    301e:	|  |  |  |         move.l 1cfee <CstDrawBuffer>,d0
    3024:	|  |  |  |         add.l d0,d1
    3026:	|  |  |  |         movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    302c:	|  |  |  |         move.w 12(a0),d0
    3030:	|  |  |  |         move.w d0,d0
    3032:	|  |  |  |         andi.l #65535,d0
    3038:	|  |  |  |         move.l d1,d2
    303a:	|  |  |  |         add.l d0,d2
    303c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3040:	|  |  |  |         clr.l 20(sp)
    3044:	|  |  |  |     ,-- bra.w 30cc <CstRestoreScreen+0x1e0>
      {
        custom->bltapt = (APTR) bltapt;
    3048:	|  |  |  |  ,--|-> move.l 28(sp),d0
    304c:	|  |  |  |  |  |   movea.l 16(sp),a0
    3050:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    3054:	|  |  |  |  |  |   move.l 24(sp),d0
    3058:	|  |  |  |  |  |   movea.l 16(sp),a0
    305c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    3060:	|  |  |  |  |  |   movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    3066:	|  |  |  |  |  |   move.w 10(a0),d0
    306a:	|  |  |  |  |  |   lsl.w #6,d0
    306c:	|  |  |  |  |  |   movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    3072:	|  |  |  |  |  |   move.w 8(a0),d1
    3076:	|  |  |  |  |  |   add.w d1,d0
    3078:	|  |  |  |  |  |   movea.l 16(sp),a0
    307c:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    3080:	|  |  |  |  |  |   move.l 1d01a <winWidth>,d0
    3086:	|  |  |  |  |  |   lsr.l #3,d0
    3088:	|  |  |  |  |  |   move.l 1d01e <winHeight>,d1
    308e:	|  |  |  |  |  |   move.l d1,-(sp)
    3090:	|  |  |  |  |  |   move.l d0,-(sp)
    3092:	|  |  |  |  |  |   jsr 18204 <__mulsi3>
    3098:	|  |  |  |  |  |   addq.l #8,sp
    309a:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    309e:	|  |  |  |  |  |   move.l 1d01a <winWidth>,d0
    30a4:	|  |  |  |  |  |   lsr.l #3,d0
    30a6:	|  |  |  |  |  |   move.l 1d01e <winHeight>,d1
    30ac:	|  |  |  |  |  |   move.l d1,-(sp)
    30ae:	|  |  |  |  |  |   move.l d0,-(sp)
    30b0:	|  |  |  |  |  |   jsr 18204 <__mulsi3>
    30b6:	|  |  |  |  |  |   addq.l #8,sp
    30b8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    30bc:	|  |  |  |  |  |   move.l 1d0d2 <GfxBase>,d0
    30c2:	|  |  |  |  |  |   movea.l d0,a6
    30c4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    30c8:	|  |  |  |  |  |   addq.l #1,20(sp)
    30cc:	|  |  |  |  |  '-> moveq #4,d0
    30ce:	|  |  |  |  |      cmp.l 20(sp),d0
    30d2:	|  |  |  |  '----- bge.w 3048 <CstRestoreScreen+0x15c>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    30d6:	|  |  |  '-------> move.l 1cff6 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    30de:	|  |  |            movea.l 1cff6 <CstCleanupQueueDrawBuffer>,a0
    30e4:	|  |  |            move.l 16(a0),d0
    30e8:	|  |  |            move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    30ee:	|  |  |            move.l 12(sp),8(sp)
    30f4:	|  |  |            move.l 1d0c6 <SysBase>,d0
    30fa:	|  |  |            movea.l d0,a6
    30fc:	|  |  |            movea.l 8(sp),a1
    3100:	|  |  |            jsr -690(a6)
    todelete = NULL;
    3104:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    3108:	|  |  '----------> move.l 1cff6 <CstCleanupQueueDrawBuffer>,d0
    310e:	|  '-------------- bne.w 2f3e <CstRestoreScreen+0x52>
    3112:	|              ,-- bra.s 3116 <CstRestoreScreen+0x22a>
    return;
    3114:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    3116:	               '-> move.l (sp)+,d2
    3118:	                   movea.l (sp)+,a6
    311a:	                   lea 24(sp),sp
    311e:	                   rts

00003120 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    3120:	                                                                                           lea -40(sp),sp
    3124:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    3128:	                                                                                           movea.l 88(sp),a2
    312c:	                                                                                           move.l 92(sp),64(sp)
    3132:	                                                                                           move.l 96(sp),d4
    3136:	                                                                                           movea.l 100(sp),a3
    313a:	                                                                                           move.w d4,d2
    313c:	                                                                                           move.w a3,d3
    313e:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    3144:	                                                                                           movea.w a3,a5
    3146:	                                                                                           movea.w d4,a6
    3148:	                                                                                           move.l a5,-(sp)
    314a:	                                                                                           move.l a6,-(sp)
    314c:	                                                                                           move.l 1d122 <zBuffer>,-(sp)
    3152:	                                                                                           move.l a2,-(sp)
    3154:	                                                                                           jsr 15e4 <CstDrawZBuffer>
    315a:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    315c:	                                                                                           lea 16(sp),sp
    3160:	                                                                                           cmpi.w #1,52(sp)
    3166:	                                                            ,----------------------------- beq.w 364e <CstScaleSprite+0x52e>
    316a:	                                                            |                              cmpi.w #2,52(sp)
    3170:	                                                            |                       ,----- beq.w 34a4 <CstScaleSprite+0x384>
    3174:	                                                            |                       |      suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    3176:	                                                            |  ,--------------------|----> move.l 4(a2),d1
    317a:	                                                            |  |                    |      move.l a5,d0
    317c:	                                                            |  |                    |      add.l d1,d0
  if( y < 0) {
    317e:	                                                            |  |                    |      tst.w d3
    3180:	                                                            |  |           ,--------|----- blt.w 34c0 <CstScaleSprite+0x3a0>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    3184:	                                                            |  |           |  ,-----|----> movea.l 1d01e <winHeight>,a0
    318a:	                                                            |  |           |  |     |      cmp.l a0,d0
    318c:	                                                            |  |  ,--------|--|-----|----- ble.w 3658 <CstScaleSprite+0x538>
    if(y  > (int) winHeight) {
    3190:	                                                            |  |  |        |  |     |      cmpa.l a5,a0
    3192:	                     ,--------------------------------------|--|--|--------|--|-----|----- blt.w 378a <CstScaleSprite+0x66a>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    3196:	                     |                                      |  |  |        |  |     |      move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    3198:	                     |                                      |  |  |        |  |     |      suba.l a5,a0
    319a:	                     |                                      |  |  |        |  |     |      move.l a0,48(sp)
    ystartsrc = 0;
    319e:	                     |                                      |  |  |        |  |     |      moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    31a0:	                     |                                      |  |  |  ,-----|--|-----|----> move.l (a2),d1
    31a2:	                     |                                      |  |  |  |     |  |     |      move.l a6,d0
    31a4:	                     |                                      |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    31a6:	                     |                                      |  |  |  |     |  |     |      tst.w d2
    31a8:	                     |                                      |  |  |  |     |  |  ,--|----- blt.w 34dc <CstScaleSprite+0x3bc>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    31ac:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1d01a <winWidth>,a5
    31b2:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    31b4:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3664 <CstScaleSprite+0x544>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    31b8:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    31bc:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 378a <CstScaleSprite+0x66a>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    31c2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    31c4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    31c8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    31ca:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18204 <__mulsi3>,a6
    31d0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    31d2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    31d4:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31d8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31dc:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31e4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    31e8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31ee:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31f0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31f2:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    31f4:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    31f6:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    31f8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    31fc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    31fe:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    3202:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    3206:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    3208:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    320a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    320c:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    320e:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    3210:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    3216:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    321a:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    3220:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    3222:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    3224:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3226:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cff6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    322c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #118982,68(sp)
    3234:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1d0c6 <SysBase>,a0
    323a:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    323c:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    323e:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3240:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3244:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    3246:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    324c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3250:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3252:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    3256:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    325c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    325e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3260:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3a66 <CstScaleSprite+0x946>
    3264:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3266:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    326a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    326c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3270:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    3274:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3278:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    327a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    327e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3282:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    3286:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    328a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    328e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3290:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3296:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    329a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    329c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    329e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    32a2:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    32a8:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3ad6 <CstScaleSprite+0x9b6>
      next = CstCleanupQueueViewBuffer;
    32ac:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cff2 <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    32b2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    32b6:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    32b8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    32ba:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    32bc:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    32c0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    32c2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cff2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    32c8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    32cc:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    32ce:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    32d2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    32d8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    32da:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    32dc:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3b20 <CstScaleSprite+0xa00>
    32e0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    32e2:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    32e6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    32e8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    32ec:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    32f0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    32f6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    32fc:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3302:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3304:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1d01a <winWidth>,d0
    330a:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    330c:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    330e:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3310:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    3312:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3866 <CstScaleSprite+0x746>
    3316:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    3318:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    331a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1d0d2 <GfxBase>,a3
    3320:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    3326:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
  custom->bltalwm = bltalwm;
    332e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
  custom->bltamod = bltamod;
    3334:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
  custom->bltbmod = bltbmod;
    333a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2d52>
  custom->bltcmod = bltcmod;
    3340:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2d50>
  custom->bltdmod = bltdmod;
    3346:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
  custom->bltcon0 = bltcon0;
    334c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
  custom->bltcon1 = bltcon1;  
    3354:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    335c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    335e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3360:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    3362:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    3364:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3368:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    336e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1d01a <winWidth>,d4
    3374:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    3376:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1d020 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    337c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    3382:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    3388:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    3390:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    3396:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    339c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    339e:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 38f4 <CstScaleSprite+0x7d4>
    33a2:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33a4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33a6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33a8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33aa:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    33b0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    33b4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    33b6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    33b8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33ba:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33be:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33c0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    33c6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    33cc:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    33d2:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33da:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3934 <CstScaleSprite+0x814>
    33de:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33e0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33e2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33e4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33e6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    33ec:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    33ee:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    33f0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33f2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33f6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33f8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    33fe:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    3404:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    340a:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3410:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3412:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3970 <CstScaleSprite+0x850>
    3416:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3418:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    341a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    341c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    341e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    3424:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    3426:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3428:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    342a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    342e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3430:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    3436:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    343c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    3442:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3448:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    344a:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39ac <CstScaleSprite+0x88c>
    344e:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3450:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3452:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3454:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3456:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    345c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    345e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3460:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3462:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3466:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3468:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    346e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    3474:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    347a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3480:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3482:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39e8 <CstScaleSprite+0x8c8>
    3486:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    WaitBlit();
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  '--|-> move.w #2,1cfe8 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    34ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   movea.l 1cfdc <CstBackDrop>,a4
    if(y + single->height < 0) {
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   move.l a5,d0
    34b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   tst.w d3
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|-----|-- bge.w 3184 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '-----|-----|-> tst.l d0
    34c2:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|--------|-----|-- blt.w 378a <CstScaleSprite+0x66a>
    ystartsrc = y*-1;
    34c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l a5,d3
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   neg.l d3
    blitheight = single->height+y;
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l d0,48(sp)
    ystartdst = 0;
    34ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   moveq #0,d7
    if(x + single->width < 0) {
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l (a2),d1
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l a6,d0
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   tst.w d2
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     '-- bge.w 31ac <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        '-------> tst.l d0
    34de:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 378a <CstScaleSprite+0x66a>
    cutwordssource = (x*-1)/16; 
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    34e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    34e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    34f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18204 <__mulsi3>,a6
    3504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1d01a <winWidth>,-(sp)
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    3516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    351a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 37a0 <CstScaleSprite+0x680>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    3536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    353a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    3544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    3548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    3556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    3558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    356c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1cff6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #118982,68(sp)
    357a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1d0c6 <SysBase>,a0
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    358c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    359c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    35a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    35a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 3812 <CstScaleSprite+0x6f2>
    35aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    35ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    35ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    35be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    35c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    35c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    35cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    35d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    35da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    35dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    35e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3852 <CstScaleSprite+0x732>
      next = CstCleanupQueueViewBuffer;
    35e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1cff2 <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    35f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    35f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    35fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1cff2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    3604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    360a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    3610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    361a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3ab4 <CstScaleSprite+0x994>
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    3624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    362e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1d01a <winWidth>,d0
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3646:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 3316 <CstScaleSprite+0x1f6>
    364a:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3866 <CstScaleSprite+0x746>
      destination = (UWORD *) CstDrawBuffer;      
    364e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1cfee <CstDrawBuffer>,a4
      break;
    3654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 3176 <CstScaleSprite+0x56>
    ystartdst = y;
    3658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    3660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 31a0 <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18204 <__mulsi3>,a6
    366a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    366e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    367e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    368a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    368c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    3698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    36a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    36a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    36a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    36aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1cff6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #118982,68(sp)
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1d0c6 <SysBase>,a0
    36be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    36c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    36c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    36d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    36d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    36d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    36da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 3a0a <CstScaleSprite+0x8ea>
    36e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    36ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    36f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    36f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    36fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    3702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    370a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    3718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3a42 <CstScaleSprite+0x922>
      next = CstCleanupQueueViewBuffer;
    371c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1cff2 <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    3728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    372a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    372c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    3730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    3732:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1cff2 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    373c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    373e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3748:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    374a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    374c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3af4 <CstScaleSprite+0x9d4>
    3750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3752:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3754:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3758:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    375c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3760:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3766:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    376c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    376e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1d01a <winWidth>,d0
    377a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    377c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    377e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3782:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 3316 <CstScaleSprite+0x1f6>
    3786:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3866 <CstScaleSprite+0x746>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    378a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #99981,88(sp)
}
    3792:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3796:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    379a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 17878 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    37a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    37b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    37b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    37ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    37bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    37be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    37c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    37c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1cff6 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    37da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #118982,68(sp)
    37e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1d0c6 <SysBase>,a0
    37e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    37ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    37ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    37ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    37f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1cff6 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3800:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    3804:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    380a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    380c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    380e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 35aa <CstScaleSprite+0x48a>
    3812:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    3814:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    3816:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    3818:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    381c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    381e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3822:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    3826:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    382a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    382e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    3830:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3834:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    3836:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    3838:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    383c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    383e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3842:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    3846:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    3848:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    384e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 35e6 <CstScaleSprite+0x4c6>
    bltalwm = 0; //Last Word of this channel almost masked out
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3854:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1d01a <winWidth>,d0
    385a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    385c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    385e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    3860:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3862:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3866:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    3868:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    386a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    386c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1d0d2 <GfxBase>,a3
    3872:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3874:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3878:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2d34>
  custom->bltalwm = bltalwm;
    3880:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2d36>
  custom->bltamod = bltamod;
    3886:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2d54>
  custom->bltbmod = bltbmod;
    388c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2d52>
  custom->bltcmod = bltcmod;
    3892:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2d50>
  custom->bltdmod = bltdmod;
    3898:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2d56>
  custom->bltcon0 = bltcon0;
    389e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2d30>
  custom->bltcon1 = bltcon1;  
    38a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2d32>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    38b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    38b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1d01a <winWidth>,d4
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    38c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1d020 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    38ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    38d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    38da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    38e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    38e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    38f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 33a2 <CstScaleSprite+0x282>
    38f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    38f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    38f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    38fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    38fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    38fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    3900:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    3906:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    390a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    390c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    390e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    3910:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3914:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3916:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    391c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    3922:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    3928:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    392e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    3930:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 33de <CstScaleSprite+0x2be>
    3934:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    3936:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    3938:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    393a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    393c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    393e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    3940:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    3946:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3948:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    394a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    394c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3950:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3952:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    3958:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    395e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    3964:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    396a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    396c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 3416 <CstScaleSprite+0x2f6>
    3970:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3972:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3974:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3976:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3978:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    397a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    397c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    3982:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3984:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3986:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    3988:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    398c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    398e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    3994:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    399a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    39a0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39a6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    39a8:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 344e <CstScaleSprite+0x32e>
    39ac:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    39ae:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    39b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    39b2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    39b4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    39b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    39b8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    bltbpt += bltbptplus;
    39be:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    39c0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    39c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    39c4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39c8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    39ca:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2d40>
    custom->bltbpt = (APTR) bltbpt;
    39d0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2d3c>
    custom->bltcpt = (APTR) bltcpt;
    39d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2d38>
    custom->bltdpt = (APTR) bltdpt;
    39dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2d44>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    39e4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3486 <CstScaleSprite+0x366>
    39e8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    39ea:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    39ee:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    39f0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    39f2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    39f4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2d48>
    WaitBlit();
    39fa:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    39fc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    3a00:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    3a04:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    3a08:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3a0a:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    3a0c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    3a0e:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    3a10:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    3a12:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    3a16:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    3a1a:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3a1e:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    3a20:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a24:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    3a28:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    3a2c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3a30:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    3a32:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    3a34:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3a38:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    3a3e:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 371c <CstScaleSprite+0x5fc>
    extrawords = 1;
    3a42:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    3a44:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    3a4a:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3a4c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    3a4e:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a50:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1d01a <winWidth>,d0
    3a56:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3a58:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    3a5a:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    3a5c:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    3a5e:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3a62:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3866 <CstScaleSprite+0x746>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3a66:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3a68:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    3a6a:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    3a6c:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3a70:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a72:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a76:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    3a7a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a7e:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3a80:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3a84:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a88:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    3a8c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a90:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a94:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3a96:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3a9c:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3aa0:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3aa2:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3aa4:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3aa8:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    3aae:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 32ac <CstScaleSprite+0x18c>
    3ab2:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3ad6 <CstScaleSprite+0x9b6>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3ab4:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3ab6:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3ab8:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3aba:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    3abe:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    3ac0:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3ac4:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3ac8:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3acc:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3ad0:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    3ad2:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 3638 <CstScaleSprite+0x518>
    3ad6:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3adc:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3ade:	|  |           |  |                                         |  |                           move.l 1d01a <winWidth>,d0
    3ae4:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3ae6:	|  |           |  |                                         |  |                           move.w d7,d4
    3ae8:	|  |           |  |                                         |  |                           add.w d0,d4
    3aea:	|  |           |  |                                         |  |                           tst.l d1
    3aec:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3af0:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3866 <CstScaleSprite+0x746>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3af4:	|  |                                                        |  '-------------------------> moveq #15,d0
    3af6:	|  |                                                        |                              add.l d1,d0
    3af8:	|  |                                                        |                              asr.l #4,d0
    3afa:	|  |                                                        |                              addq.w #1,d0
    3afc:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3b00:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3b04:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3b08:	|  |                                                        |                              move.w 48(sp),14(a0)
    3b0e:	|  |                                                        |                              move.w #-1,50(sp)
    3b14:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3b16:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    3b18:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    3b1a:	|  |                                                        |                              moveq #1,d2
    3b1c:	|  |                                                        '----------------------------- bra.w 3774 <CstScaleSprite+0x654>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3b20:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3b22:	|                                                                                          add.l d1,d0
    3b24:	|                                                                                          asr.l #4,d0
    3b26:	|                                                                                          movea.w 58(sp),a1
    3b2a:	|                                                                                          adda.w d0,a1
    3b2c:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3b30:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3b34:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3b3a:	|                                                                                          move.w 48(sp),14(a0)
    3b40:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3b46:	|                                                                                          clr.w d2
    3b48:	'----------------------------------------------------------------------------------------- bra.w 3304 <CstScaleSprite+0x1e4>

00003b4c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3b4c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b4e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3b54:	move.l 8(sp),d0
    3b58:	movea.l (sp),a0
    3b5a:	move.l d0,128(a0)
}
    3b5e:	nop
    3b60:	addq.l #4,sp
    3b62:	rts

00003b64 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3b64:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3b68:	move.l 1cfea <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3b70:	move.l 1cfee <CstDrawBuffer>,d0
    3b76:	move.l d0,1cfea <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b7c:	move.l 16(sp),1cfee <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b84:	move.l 1cff2 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b8c:	move.l 1cff6 <CstCleanupQueueDrawBuffer>,d0
    3b92:	move.l d0,1cff2 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b98:	move.l 12(sp),1cff6 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3ba0:	move.l 1cfe4 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3ba8:	move.l 1cfea <CstViewBuffer>,d0
    3bae:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3bb2:	move.l 4(sp),d0
    3bb6:	clr.w d0
    3bb8:	swap d0
    3bba:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3bbe:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3bc2:	movea.w #118,a0
    3bc6:	adda.l 8(sp),a0
    3bca:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3bcc:	movea.w #114,a0
    3bd0:	adda.l 8(sp),a0
    3bd4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bd8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3be0:	move.l 4(sp),d0
    3be4:	clr.w d0
    3be6:	swap d0
    3be8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bec:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3bf0:	movea.w #126,a0
    3bf4:	adda.l 8(sp),a0
    3bf8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3bfa:	movea.w #122,a0
    3bfe:	adda.l 8(sp),a0
    3c02:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3c06:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c0e:	move.l 4(sp),d0
    3c12:	clr.w d0
    3c14:	swap d0
    3c16:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c1a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3c1e:	movea.l 8(sp),a0
    3c22:	lea 134(a0),a0
    3c26:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3c28:	movea.l 8(sp),a0
    3c2c:	lea 130(a0),a0
    3c30:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c34:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c3c:	move.l 4(sp),d0
    3c40:	clr.w d0
    3c42:	swap d0
    3c44:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c48:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3c4c:	movea.l 8(sp),a0
    3c50:	lea 142(a0),a0
    3c54:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3c56:	movea.l 8(sp),a0
    3c5a:	lea 138(a0),a0
    3c5e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c62:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c6a:	move.l 4(sp),d0
    3c6e:	clr.w d0
    3c70:	swap d0
    3c72:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c76:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c7a:	movea.l 8(sp),a0
    3c7e:	lea 150(a0),a0
    3c82:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c84:	movea.l 8(sp),a0
    3c88:	lea 146(a0),a0
    3c8c:	move.w 2(sp),(a0)

}
    3c90:	nop
    3c92:	lea 20(sp),sp
    3c96:	rts

00003c98 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c98:	          lea -80(sp),sp
    3c9c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c9e:	          pea 186c0 <PutChar+0x3a6>
    3ca4:	          jsr 17878 <KPrintF>
    3caa:	          addq.l #4,sp

  width = width / 8;
    3cac:	          move.l 88(sp),d0
    3cb0:	      ,-- bpl.s 3cb4 <CstReserveBackdrop+0x1c>
    3cb2:	      |   addq.l #7,d0
    3cb4:	      '-> asr.l #3,d0
    3cb6:	          move.l d0,88(sp)

  if( width < 40) 
    3cba:	          moveq #39,d0
    3cbc:	          cmp.l 88(sp),d0
    3cc0:	      ,-- blt.s 3cd6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3cc2:	      |   pea 186da <PutChar+0x3c0>
    3cc8:	      |   jsr 17878 <KPrintF>
    3cce:	      |   addq.l #4,sp
    return FALSE;
    3cd0:	      |   clr.w d0
    3cd2:	,-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3cd6:	|     '-> pea 18718 <PutChar+0x3fe>
    3cdc:	|         jsr 17878 <KPrintF>
    3ce2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3ce4:	|         move.l 88(sp),-(sp)
    3ce8:	|         jsr 10ca <CstCreateCopperlist>
    3cee:	|         addq.l #4,sp
    3cf0:	|         move.l d0,1cfe4 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3cf6:	|         pea 18738 <PutChar+0x41e>
    3cfc:	|         jsr 17878 <KPrintF>
    3d02:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3d04:	|         move.l 88(sp),d1
    3d08:	|         move.l 92(sp),d0
    3d0c:	|         muls.w d1,d0
    3d0e:	|         move.w d0,1cfda <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3d14:	|         move.w 1cfda <CstBackdropSizePlane>,d1
    3d1a:	|         move.w d1,d0
    3d1c:	|         add.w d0,d0
    3d1e:	|         add.w d0,d0
    3d20:	|         add.w d1,d0
    3d22:	|         move.w d0,1cfd8 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3d28:	|         move.w 1cfd8 <CstBackdropSize>,d0
    3d2e:	|         move.w d0,d0
    3d30:	|         andi.l #65535,d0
    3d36:	|         move.l d0,72(sp)
    3d3a:	|         moveq #2,d1
    3d3c:	|         move.l d1,68(sp)
    3d40:	|         move.l 1d0c6 <SysBase>,d0
    3d46:	|         movea.l d0,a6
    3d48:	|         move.l 72(sp),d0
    3d4c:	|         move.l 68(sp),d1
    3d50:	|         jsr -684(a6)
    3d54:	|         move.l d0,64(sp)
    3d58:	|         move.l 64(sp),d0
    3d5c:	|         move.l d0,1cfdc <CstBackDrop>
  if( !CstBackDrop)
    3d62:	|         move.l 1cfdc <CstBackDrop>,d0
    3d68:	|     ,-- bne.s 3d7e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3d6a:	|     |   pea 1875f <PutChar+0x445>
    3d70:	|     |   jsr 17878 <KPrintF>
    3d76:	|     |   addq.l #4,sp
    return FALSE;  
    3d78:	|     |   clr.w d0
    3d7a:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d7e:	|     '-> pea 18797 <PutChar+0x47d>
    3d84:	|         jsr 17878 <KPrintF>
    3d8a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d8c:	|         move.l 1cfdc <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d94:	|         clr.l 76(sp)
    3d98:	|     ,-- bra.s 3dae <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d9a:	|  ,--|-> move.l 80(sp),d0
    3d9e:	|  |  |   move.l d0,d1
    3da0:	|  |  |   addq.l #4,d1
    3da2:	|  |  |   move.l d1,80(sp)
    3da6:	|  |  |   movea.l d0,a0
    3da8:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3daa:	|  |  |   addq.l #1,76(sp)
    3dae:	|  |  '-> move.w 1cfd8 <CstBackdropSize>,d0
    3db4:	|  |      lsr.w #2,d0
    3db6:	|  |      move.w d0,d0
    3db8:	|  |      andi.l #65535,d0
    3dbe:	|  |      cmp.l 76(sp),d0
    3dc2:	|  '----- bgt.s 3d9a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3dc4:	|         move.w 1cfd8 <CstBackdropSize>,d0
    3dca:	|         move.w d0,d0
    3dcc:	|         andi.l #65535,d0
    3dd2:	|         move.l 88(sp),d1
    3dd6:	|         add.l d1,d1
    3dd8:	|         add.l d1,d0
    3dda:	|         move.l d0,60(sp)
    3dde:	|         moveq #2,d0
    3de0:	|         move.l d0,56(sp)
    3de4:	|         move.l 1d0c6 <SysBase>,d0
    3dea:	|         movea.l d0,a6
    3dec:	|         move.l 60(sp),d0
    3df0:	|         move.l 56(sp),d1
    3df4:	|         jsr -684(a6)
    3df8:	|         move.l d0,52(sp)
    3dfc:	|         move.l 52(sp),d0
    3e00:	|         move.l d0,1cfee <CstDrawBuffer>
  if( !CstDrawBuffer)
    3e06:	|         move.l 1cfee <CstDrawBuffer>,d0
    3e0c:	|     ,-- bne.s 3e22 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3e0e:	|     |   pea 187bd <PutChar+0x4a3>
    3e14:	|     |   jsr 17878 <KPrintF>
    3e1a:	|     |   addq.l #4,sp
    return FALSE;  
    3e1c:	|     |   clr.w d0
    3e1e:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3e22:	|     '-> pea 187f7 <PutChar+0x4dd>
    3e28:	|         jsr 17878 <KPrintF>
    3e2e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3e30:	|         move.l #10000,48(sp)
    3e38:	|         clr.l 44(sp)
    3e3c:	|         move.l 1d0c6 <SysBase>,d0
    3e42:	|         movea.l d0,a6
    3e44:	|         move.l 48(sp),d0
    3e48:	|         move.l 44(sp),d1
    3e4c:	|         jsr -684(a6)
    3e50:	|         move.l d0,40(sp)
    3e54:	|         move.l 40(sp),d0
    3e58:	|         move.l d0,1cffa <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3e5e:	|         move.l 1cffa <CstBackDropBufferApplyStart>,d0
    3e64:	|     ,-- bne.s 3e7a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3e66:	|     |   pea 1881f <PutChar+0x505>
    3e6c:	|     |   jsr 17878 <KPrintF>
    3e72:	|     |   addq.l #4,sp
    return FALSE;  
    3e74:	|     |   clr.w d0
    3e76:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3e7a:	|     '-> move.l 1cffa <CstBackDropBufferApplyStart>,d0
    3e80:	|         move.l d0,1cffe <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3e86:	|         movea.l 1cffa <CstBackDropBufferApplyStart>,a0
    3e8c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3e8e:	|         movea.l 1cffa <CstBackDropBufferApplyStart>,a0
    3e94:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3e96:	|         move.w 1cfd8 <CstBackdropSize>,d0
    3e9c:	|         move.w d0,d0
    3e9e:	|         andi.l #65535,d0
    3ea4:	|         move.l 88(sp),d1
    3ea8:	|         add.l d1,d1
    3eaa:	|         add.l d1,d0
    3eac:	|         move.l d0,36(sp)
    3eb0:	|         moveq #2,d1
    3eb2:	|         move.l d1,32(sp)
    3eb6:	|         move.l 1d0c6 <SysBase>,d0
    3ebc:	|         movea.l d0,a6
    3ebe:	|         move.l 36(sp),d0
    3ec2:	|         move.l 32(sp),d1
    3ec6:	|         jsr -684(a6)
    3eca:	|         move.l d0,28(sp)
    3ece:	|         move.l 28(sp),d0
    3ed2:	|         move.l d0,1cfea <CstViewBuffer>
  if( !CstViewBuffer)
    3ed8:	|         move.l 1cfea <CstViewBuffer>,d0
    3ede:	|     ,-- bne.s 3ef4 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3ee0:	|     |   pea 1886a <PutChar+0x550>
    3ee6:	|     |   jsr 17878 <KPrintF>
    3eec:	|     |   addq.l #4,sp
    return FALSE;  
    3eee:	|     |   clr.w d0
    3ef0:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3ef4:	|     '-> pea 188a4 <PutChar+0x58a>
    3efa:	|         jsr 17878 <KPrintF>
    3f00:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3f02:	|         move.l 1cfee <CstDrawBuffer>,d1
    3f08:	|         move.l 88(sp),d0
    3f0c:	|     ,-- bpl.s 3f10 <CstReserveBackdrop+0x278>
    3f0e:	|     |   addq.l #3,d0
    3f10:	|     '-> asr.l #2,d0
    3f12:	|         add.l d0,d0
    3f14:	|         add.l d0,d0
    3f16:	|         add.l d1,d0
    3f18:	|         move.l d0,1cfee <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3f1e:	|         move.l 1cfea <CstViewBuffer>,d1
    3f24:	|         move.l 88(sp),d0
    3f28:	|     ,-- bpl.s 3f2c <CstReserveBackdrop+0x294>
    3f2a:	|     |   addq.l #3,d0
    3f2c:	|     '-> asr.l #2,d0
    3f2e:	|         add.l d0,d0
    3f30:	|         add.l d0,d0
    3f32:	|         add.l d1,d0
    3f34:	|         move.l d0,1cfea <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3f3a:	|         move.l #5200,24(sp)
    3f42:	|         moveq #2,d0
    3f44:	|         move.l d0,20(sp)
    3f48:	|         move.l 1d0c6 <SysBase>,d0
    3f4e:	|         movea.l d0,a6
    3f50:	|         move.l 24(sp),d0
    3f54:	|         move.l 20(sp),d1
    3f58:	|         jsr -684(a6)
    3f5c:	|         move.l d0,16(sp)
    3f60:	|         move.l 16(sp),d0
    3f64:	|         move.l d0,1d00e <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3f6a:	|         move.l #5600,12(sp)
    3f72:	|         moveq #2,d1
    3f74:	|         move.l d1,8(sp)
    3f78:	|         move.l 1d0c6 <SysBase>,d0
    3f7e:	|         movea.l d0,a6
    3f80:	|         move.l 12(sp),d0
    3f84:	|         move.l 8(sp),d1
    3f88:	|         jsr -684(a6)
    3f8c:	|         move.l d0,4(sp)
    3f90:	|         move.l 4(sp),d0
    3f94:	|         move.l d0,1d012 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3f9a:	|         move.l 1cfdc <CstBackDrop>,d0
    3fa0:	|         clr.l -(sp)
    3fa2:	|         pea 5 <_start+0x5>
    3fa6:	|         pea 100 <copyString+0x48>
    3faa:	|         pea 140 <decodeFilename+0x28>
    3fae:	|         pea 188cc <PutChar+0x5b2>
    3fb4:	|         move.l d0,-(sp)
    3fb6:	|         jsr 17960 <debug_register_bitmap>
    3fbc:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3fc0:	|         move.l 92(sp),d0
    3fc4:	|         movea.w d0,a1
    3fc6:	|         move.l 88(sp),d0
    3fca:	|         lsl.w #3,d0
    3fcc:	|         movea.w d0,a0
    3fce:	|         move.l 1cfee <CstDrawBuffer>,d0
    3fd4:	|         clr.l -(sp)
    3fd6:	|         pea 5 <_start+0x5>
    3fda:	|         move.l a1,-(sp)
    3fdc:	|         move.l a0,-(sp)
    3fde:	|         pea 188dc <PutChar+0x5c2>
    3fe4:	|         move.l d0,-(sp)
    3fe6:	|         jsr 17960 <debug_register_bitmap>
    3fec:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3ff0:	|         move.l 92(sp),d0
    3ff4:	|         movea.w d0,a1
    3ff6:	|         move.l 88(sp),d0
    3ffa:	|         lsl.w #3,d0
    3ffc:	|         movea.w d0,a0
    3ffe:	|         move.l 1cfea <CstViewBuffer>,d0
    4004:	|         clr.l -(sp)
    4006:	|         pea 5 <_start+0x5>
    400a:	|         move.l a1,-(sp)
    400c:	|         move.l a0,-(sp)
    400e:	|         pea 188eb <PutChar+0x5d1>
    4014:	|         move.l d0,-(sp)
    4016:	|         jsr 17960 <debug_register_bitmap>
    401c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    4020:	|         move.l 1cfe4 <CstCopperList>,d0
    4026:	|     ,-- beq.s 4038 <CstReserveBackdrop+0x3a0>
    4028:	|     |   move.l 1cfee <CstDrawBuffer>,d0
    402e:	|     +-- beq.s 4038 <CstReserveBackdrop+0x3a0>
    4030:	|     |   move.l 1cfea <CstViewBuffer>,d0
    4036:	|  ,--|-- bne.s 404a <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    4038:	|  |  '-> pea 188fa <PutChar+0x5e0>
    403e:	|  |      jsr 17878 <KPrintF>
    4044:	|  |      addq.l #4,sp
    return FALSE;
    4046:	|  |      clr.w d0
    4048:	+--|----- bra.s 4078 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    404a:	|  '----> pea 18927 <PutChar+0x60d>
    4050:	|         jsr 17878 <KPrintF>
    4056:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    4058:	|         move.l 1cfe4 <CstCopperList>,d0
    405e:	|         move.l d0,-(sp)
    4060:	|         jsr 3b4c <CstSetCl>
    4066:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    4068:	|         pea 1894e <PutChar+0x634>
    406e:	|         jsr 17878 <KPrintF>
    4074:	|         addq.l #4,sp
  return TRUE;
    4076:	|         moveq #1,d0

}
    4078:	'-------> movea.l (sp)+,a6
    407a:	          lea 80(sp),sp
    407e:	          rts

00004080 <CstUnfreeze>:

void CstUnfreeze() {
    4080:	       lea -24(sp),sp
    4084:	       move.l a6,-(sp)
    4086:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    4088:	       pea 18971 <PutChar+0x657>
    408e:	       jsr 17878 <KPrintF>
    4094:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    4096:	       move.l 1d01a <winWidth>,d0
    409c:	       lsr.l #3,d0
    409e:	       move.l d0,d1
    40a0:	       move.l 1d01e <winHeight>,d0
    40a6:	       move.l d0,d0
    40a8:	       muls.w d0,d1
    40aa:	       move.w d1,d0
    40ac:	       add.w d0,d0
    40ae:	       add.w d0,d0
    40b0:	       move.w d0,d2
    40b2:	       add.w d1,d2
    40b4:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    40b8:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    40c0:	       move.l 1d01e <winHeight>,d0
    40c6:	       move.l d0,d0
    40c8:	       movea.w d0,a1
    40ca:	       move.l 1d01a <winWidth>,d0
    40d0:	       move.l d0,d0
    40d2:	       movea.w d0,a0
    40d4:	       move.l 1cfe0 <CstBackDropBackup>,d0
    40da:	       clr.l -(sp)
    40dc:	       pea 5 <_start+0x5>
    40e0:	       move.l a1,-(sp)
    40e2:	       move.l a0,-(sp)
    40e4:	       pea 18543 <PutChar+0x229>
    40ea:	       move.l d0,-(sp)
    40ec:	       jsr 17960 <debug_register_bitmap>
    40f2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    40f6:	       move.l 1cfe0 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    40fe:	       move.l 1cfdc <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    4106:	       clr.l 20(sp)
    410a:	   ,-- bra.s 4130 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    410c:	,--|-> move.l 28(sp),d1
    4110:	|  |   move.l d1,d0
    4112:	|  |   addq.l #4,d0
    4114:	|  |   move.l d0,28(sp)
    4118:	|  |   move.l 24(sp),d0
    411c:	|  |   move.l d0,d2
    411e:	|  |   addq.l #4,d2
    4120:	|  |   move.l d2,24(sp)
    4124:	|  |   movea.l d1,a0
    4126:	|  |   move.l (a0),d1
    4128:	|  |   movea.l d0,a0
    412a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    412c:	|  |   addq.l #1,20(sp)
    4130:	|  '-> move.w 18(sp),d0
    4134:	|      lsr.w #2,d0
    4136:	|      move.w d0,d0
    4138:	|      andi.l #65535,d0
    413e:	|      cmp.l 20(sp),d0
    4142:	'----- bgt.s 410c <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    4144:	       move.w #2,1cfe8 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    414c:	       move.l 1d01a <winWidth>,d0
    4152:	       lsr.l #4,d0
    4154:	       movea.l 1cffe <CstBackDropBufferApplyCursor>,a0
    415a:	       move.l a0,d1
    415c:	       addq.l #2,d1
    415e:	       move.l d1,1cffe <CstBackDropBufferApplyCursor>
    4164:	       move.l d0,d0
    4166:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    4168:	       move.l 1d01e <winHeight>,d0
    416e:	       movea.l 1cffe <CstBackDropBufferApplyCursor>,a0
    4174:	       move.l a0,d1
    4176:	       addq.l #2,d1
    4178:	       move.l d1,1cffe <CstBackDropBufferApplyCursor>
    417e:	       move.l d0,d0
    4180:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    4182:	       movea.l 1cffe <CstBackDropBufferApplyCursor>,a0
    4188:	       move.l a0,d0
    418a:	       addq.l #2,d0
    418c:	       move.l d0,1cffe <CstBackDropBufferApplyCursor>
    4192:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    4194:	       movea.l 1cffe <CstBackDropBufferApplyCursor>,a0
    419a:	       move.l a0,d0
    419c:	       addq.l #2,d0
    419e:	       move.l d0,1cffe <CstBackDropBufferApplyCursor>
    41a4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    41a6:	       movea.l 1cffe <CstBackDropBufferApplyCursor>,a0
    41ac:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    41ae:	       move.l 1cfe0 <CstBackDropBackup>,d0
    41b4:	   ,-- beq.s 41dc <CstUnfreeze+0x15c>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    41b6:	   |   pea 1899c <PutChar+0x682>
    41bc:	   |   jsr 17878 <KPrintF>
    41c2:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    41c4:	   |   move.l 1cfe0 <CstBackDropBackup>,10(sp)
    41cc:	   |   move.l 1d0c6 <SysBase>,d0
    41d2:	   |   movea.l d0,a6
    41d4:	   |   movea.l 10(sp),a1
    41d8:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    41dc:	   '-> pea 189c0 <PutChar+0x6a6>
    41e2:	       jsr 17878 <KPrintF>
    41e8:	       addq.l #4,sp

}
    41ea:	       nop
    41ec:	       move.l (sp)+,d2
    41ee:	       movea.l (sp)+,a6
    41f0:	       lea 24(sp),sp
    41f4:	       rts

000041f6 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    41f6:	       lea -28(sp),sp
    41fa:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    41fe:	       move.l 52(sp),-(sp)
    4202:	       jsr 15e82 <stringWidth>
    4208:	       addq.l #4,sp
    420a:	       asr.l #1,d0
    420c:	       move.l d0,-(sp)
    420e:	       jsr 17caa <__floatsisf>
    4214:	       addq.l #4,sp
    4216:	       move.l d0,d1
    4218:	       move.l 1ca58 <cameraZoom>,d0
    421e:	       move.l d0,-(sp)
    4220:	       move.l d1,-(sp)
    4222:	       jsr 17b60 <__divsf3>
    4228:	       addq.l #8,sp
    422a:	       move.l d0,-(sp)
    422c:	       jsr 17c42 <__fixsfsi>
    4232:	       addq.l #4,sp
    4234:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4238:	       move.l 56(sp),d0
    423c:	       sub.l 44(sp),d0
    4240:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4244:	       move.l 56(sp),d0
    4248:	       add.l 44(sp),d0
    424c:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4250:	       moveq #12,d0
    4252:	       move.l d0,32(sp)
    4256:	       clr.l 28(sp)
    425a:	       move.l 1d0c6 <SysBase>,d0
    4260:	       movea.l d0,a6
    4262:	       move.l 32(sp),d0
    4266:	       move.l 28(sp),d1
    426a:	       jsr -684(a6)
    426e:	       move.l d0,24(sp)
    4272:	       move.l 24(sp),d0
    4276:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    427a:	       movea.l 1d016 <speech>,a0
    4280:	       move.l 4(a0),d0
    4284:	       movea.l 20(sp),a0
    4288:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    428c:	       move.l 52(sp),-(sp)
    4290:	       jsr b8 <copyString>
    4296:	       addq.l #4,sp
    4298:	       movea.l 20(sp),a0
    429c:	       move.l d0,(a0)
	newLine -> x = xx1;
    429e:	       movea.l 20(sp),a0
    42a2:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    42a8:	       movea.l 1d016 <speech>,a0
    42ae:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    42b4:	       moveq #4,d0
    42b6:	       cmp.l 40(sp),d0
    42ba:	   ,-- blt.s 42dc <addSpeechLine+0xe6>
    42bc:	   |   movea.l 60(sp),a0
    42c0:	   |   move.l (a0),d1
    42c2:	   |   moveq #5,d0
    42c4:	   |   sub.l 40(sp),d0
    42c8:	   |   cmp.l d1,d0
    42ca:	   +-- ble.s 42dc <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    42cc:	   |   moveq #5,d0
    42ce:	   |   sub.l 40(sp),d0
    42d2:	   |   movea.l 60(sp),a0
    42d6:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    42d8:	,--|-- bra.w 4408 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    42dc:	|  '-> move.l 36(sp),-(sp)
    42e0:	|      jsr 17caa <__floatsisf>
    42e6:	|      addq.l #4,sp
    42e8:	|      move.l d0,d2
    42ea:	|      move.l 1d01a <winWidth>,d0
    42f0:	|      move.l d0,-(sp)
    42f2:	|      jsr 17cd2 <__floatunsisf>
    42f8:	|      addq.l #4,sp
    42fa:	|      move.l d0,d1
    42fc:	|      move.l 1ca58 <cameraZoom>,d0
    4302:	|      move.l d0,-(sp)
    4304:	|      move.l d1,-(sp)
    4306:	|      jsr 17b60 <__divsf3>
    430c:	|      addq.l #8,sp
    430e:	|      move.l #1084227584,-(sp)
    4314:	|      move.l d0,-(sp)
    4316:	|      jsr 17f9e <__subsf3>
    431c:	|      addq.l #8,sp
    431e:	|      move.l d0,-(sp)
    4320:	|      move.l d2,-(sp)
    4322:	|      jsr 17d92 <__gesf2>
    4328:	|      addq.l #8,sp
    432a:	|      tst.l d0
    432c:	|  ,-- bge.s 4332 <addSpeechLine+0x13c>
}
    432e:	+--|-- bra.w 4408 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4332:	|  '-> movea.l 60(sp),a0
    4336:	|      move.l (a0),d0
    4338:	|      move.l d0,-(sp)
    433a:	|      jsr 17caa <__floatsisf>
    4340:	|      addq.l #4,sp
    4342:	|      move.l d0,-(sp)
    4344:	|      jsr 17bcc <__extendsfdf2>
    434a:	|      addq.l #4,sp
    434c:	|      move.l d0,d4
    434e:	|      move.l d1,d5
    4350:	|      move.l 1d01a <winWidth>,d0
    4356:	|      move.l d0,-(sp)
    4358:	|      jsr 17cd2 <__floatunsisf>
    435e:	|      addq.l #4,sp
    4360:	|      move.l d0,d1
    4362:	|      move.l 1ca58 <cameraZoom>,d0
    4368:	|      move.l d0,-(sp)
    436a:	|      move.l d1,-(sp)
    436c:	|      jsr 17b60 <__divsf3>
    4372:	|      addq.l #8,sp
    4374:	|      move.l d0,-(sp)
    4376:	|      jsr 17bcc <__extendsfdf2>
    437c:	|      addq.l #4,sp
    437e:	|      clr.l -(sp)
    4380:	|      move.l #1075052544,-(sp)
    4386:	|      move.l d1,-(sp)
    4388:	|      move.l d0,-(sp)
    438a:	|      jsr 17f3c <__subdf3>
    4390:	|      lea 16(sp),sp
    4394:	|      move.l d0,d2
    4396:	|      move.l d1,d3
    4398:	|      move.l 36(sp),-(sp)
    439c:	|      jsr 17c6a <__floatsidf>
    43a2:	|      addq.l #4,sp
    43a4:	|      move.l d1,-(sp)
    43a6:	|      move.l d0,-(sp)
    43a8:	|      move.l d3,-(sp)
    43aa:	|      move.l d2,-(sp)
    43ac:	|      jsr 17f3c <__subdf3>
    43b2:	|      lea 16(sp),sp
    43b6:	|      move.l d1,-(sp)
    43b8:	|      move.l d0,-(sp)
    43ba:	|      move.l d5,-(sp)
    43bc:	|      move.l d4,-(sp)
    43be:	|      jsr 17dc8 <__gtdf2>
    43c4:	|      lea 16(sp),sp
    43c8:	|      tst.l d0
    43ca:	|  ,-- bgt.s 43ce <addSpeechLine+0x1d8>
}
    43cc:	+--|-- bra.s 4408 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    43ce:	|  '-> move.l 1d01a <winWidth>,d0
    43d4:	|      move.l d0,-(sp)
    43d6:	|      jsr 17cd2 <__floatunsisf>
    43dc:	|      addq.l #4,sp
    43de:	|      move.l d0,d1
    43e0:	|      move.l 1ca58 <cameraZoom>,d0
    43e6:	|      move.l d0,-(sp)
    43e8:	|      move.l d1,-(sp)
    43ea:	|      jsr 17b60 <__divsf3>
    43f0:	|      addq.l #8,sp
    43f2:	|      move.l d0,-(sp)
    43f4:	|      jsr 17c42 <__fixsfsi>
    43fa:	|      addq.l #4,sp
    43fc:	|      subq.l #5,d0
    43fe:	|      sub.l 36(sp),d0
    4402:	|      movea.l 60(sp),a0
    4406:	|      move.l d0,(a0)
}
    4408:	'----> nop
    440a:	       movem.l (sp)+,d2-d5/a6
    440e:	       lea 28(sp),sp
    4412:	       rts

00004414 <initSpeech>:


void initSpeech () {
    4414:	       lea -12(sp),sp
    4418:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    441a:	       moveq #20,d0
    441c:	       move.l d0,12(sp)
    4420:	       clr.l 8(sp)
    4424:	       move.l 1d0c6 <SysBase>,d0
    442a:	       movea.l d0,a6
    442c:	       move.l 12(sp),d0
    4430:	       move.l 8(sp),d1
    4434:	       jsr -684(a6)
    4438:	       move.l d0,4(sp)
    443c:	       move.l 4(sp),d0
    4440:	       move.l d0,1d016 <speech>
	if (speech) {
    4446:	       move.l 1d016 <speech>,d0
    444c:	,----- beq.s 4478 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    444e:	|      movea.l 1d016 <speech>,a0
    4454:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4456:	|      movea.l 1d016 <speech>,a0
    445c:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4460:	|      movea.l 1d016 <speech>,a0
    4466:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    446a:	|      movea.l 1d016 <speech>,a0
    4470:	|      moveq #-1,d0
    4472:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4476:	|  ,-- bra.s 4486 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4478:	'--|-> pea 189d6 <PutChar+0x6bc>
    447e:	   |   jsr 17878 <KPrintF>
    4484:	   |   addq.l #4,sp
}
    4486:	   '-> nop
    4488:	       movea.l (sp)+,a6
    448a:	       lea 12(sp),sp
    448e:	       rts

00004490 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4490:	       movea.l 1d016 <speech>,a0
    4496:	       move.l 4(a0),d0
    449a:	,----- beq.s 44a8 <isThereAnySpeechGoingOn+0x18>
    449c:	|      movea.l 1d016 <speech>,a0
    44a2:	|      move.l 16(a0),d0
    44a6:	|  ,-- bra.s 44aa <isThereAnySpeechGoingOn+0x1a>
    44a8:	'--|-> moveq #-1,d0
}
    44aa:	   '-> rts

000044ac <killAllSpeech>:

void killAllSpeech () {
    44ac:	       lea -12(sp),sp
    44b0:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    44b2:	       movea.l 1d016 <speech>,a0
    44b8:	       move.l 12(a0),d0
    44bc:	       moveq #-1,d1
    44be:	       cmp.l d0,d1
    44c0:	   ,-- beq.s 44ce <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    44c2:	   |   movea.l 1d016 <speech>,a0
    44c8:	   |   moveq #-1,d0
    44ca:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    44ce:	   '-> movea.l 1d016 <speech>,a0
    44d4:	       move.l (a0),d0
    44d6:	,----- beq.w 4562 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    44da:	|      movea.l 1d016 <speech>,a0
    44e0:	|      move.l (a0),d1
    44e2:	|      lea -132(sp),sp
    44e6:	|      move.l sp,d0
    44e8:	|      movea.w #132,a0
    44ec:	|      move.l a0,-(sp)
    44ee:	|      move.l d1,-(sp)
    44f0:	|      move.l d0,-(sp)
    44f2:	|      jsr 1782c <memcpy>
    44f8:	|      lea 12(sp),sp
    44fc:	|      jsr b07e <makeSilent>
    4502:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    4506:	|      movea.l 1d016 <speech>,a0
    450c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    450e:	+----- bra.s 4562 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4510:	|  ,-> movea.l 1d016 <speech>,a0
    4516:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    451c:	|  |   movea.l 1d016 <speech>,a0
    4522:	|  |   movea.l 4(a0),a1
    4526:	|  |   movea.l 1d016 <speech>,a0
    452c:	|  |   move.l 4(a1),d0
    4530:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4534:	|  |   movea.l 12(sp),a0
    4538:	|  |   move.l (a0),8(sp)
    453c:	|  |   move.l 1d0c6 <SysBase>,d0
    4542:	|  |   movea.l d0,a6
    4544:	|  |   movea.l 8(sp),a1
    4548:	|  |   jsr -690(a6)
		FreeVec(killMe);
    454c:	|  |   move.l 12(sp),4(sp)
    4552:	|  |   move.l 1d0c6 <SysBase>,d0
    4558:	|  |   movea.l d0,a6
    455a:	|  |   movea.l 4(sp),a1
    455e:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4562:	'--|-> movea.l 1d016 <speech>,a0
    4568:	   |   move.l 4(a0),d0
    456c:	   '-- bne.s 4510 <killAllSpeech+0x64>
	}
}
    456e:	       nop
    4570:	       nop
    4572:	       movea.l (sp)+,a6
    4574:	       lea 12(sp),sp
    4578:	       rts

0000457a <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    457a:	pea 2 <_start+0x2>
    457e:	move.l 8(sp),-(sp)
    4582:	jsr 46da <setFrames>
    4588:	addq.l #8,sp
}
    458a:	nop
    458c:	rts

0000458e <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    458e:	       lea -52(sp),sp
    4592:	       move.l a6,-(sp)
    4594:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4596:	       movea.l 64(sp),a0
    459a:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    45a0:	       move.l 1ca30 <speechSpeed>,d0
    45a6:	       move.l 68(sp),-(sp)
    45aa:	       move.l d0,-(sp)
    45ac:	       jsr a46 <putFloat>
    45b2:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    45b4:	       movea.l 64(sp),a0
    45b8:	       move.l 8(a0),d0
    45bc:	       move.l 68(sp),-(sp)
    45c0:	       move.l d0,-(sp)
    45c2:	       jsr 8d0 <put2bytes>
    45c8:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    45ca:	       movea.l 64(sp),a0
    45ce:	       move.l 16(a0),d0
    45d2:	       move.l 68(sp),-(sp)
    45d6:	       move.l d0,-(sp)
    45d8:	       jsr 8d0 <put2bytes>
    45de:	       addq.l #8,sp
		if (sS -> currentTalker) {
    45e0:	       movea.l 64(sp),a0
    45e4:	       move.l (a0),d0
    45e6:	   ,-- beq.s 462a <saveSpeech+0x9c>
			FPutC (fp, 1);
    45e8:	   |   move.l 68(sp),40(sp)
    45ee:	   |   moveq #1,d0
    45f0:	   |   move.l d0,36(sp)
    45f4:	   |   move.l 1d0ce <DOSBase>,d0
    45fa:	   |   movea.l d0,a6
    45fc:	   |   move.l 40(sp),d1
    4600:	   |   move.l 36(sp),d2
    4604:	   |   jsr -312(a6)
    4608:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    460c:	   |   movea.l 64(sp),a0
    4610:	   |   movea.l (a0),a0
    4612:	   |   movea.l 114(a0),a0
    4616:	   |   move.l 4(a0),d0
    461a:	   |   move.l 68(sp),-(sp)
    461e:	   |   move.l d0,-(sp)
    4620:	   |   jsr 8d0 <put2bytes>
    4626:	   |   addq.l #8,sp
    4628:	,--|-- bra.s 46a6 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    462a:	|  '-> move.l 68(sp),52(sp)
    4630:	|      clr.l 48(sp)
    4634:	|      move.l 1d0ce <DOSBase>,d0
    463a:	|      movea.l d0,a6
    463c:	|      move.l 52(sp),d1
    4640:	|      move.l 48(sp),d2
    4644:	|      jsr -312(a6)
    4648:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    464c:	+----- bra.s 46a6 <saveSpeech+0x118>
			FPutC (fp, 1);
    464e:	|  ,-> move.l 68(sp),16(sp)
    4654:	|  |   moveq #1,d0
    4656:	|  |   move.l d0,12(sp)
    465a:	|  |   move.l 1d0ce <DOSBase>,d0
    4660:	|  |   movea.l d0,a6
    4662:	|  |   move.l 16(sp),d1
    4666:	|  |   move.l 12(sp),d2
    466a:	|  |   jsr -312(a6)
    466e:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4672:	|  |   movea.l 56(sp),a0
    4676:	|  |   move.l (a0),d0
    4678:	|  |   move.l 68(sp),-(sp)
    467c:	|  |   move.l d0,-(sp)
    467e:	|  |   jsr bd8 <writeString>
    4684:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4686:	|  |   movea.l 56(sp),a0
    468a:	|  |   move.l 8(a0),d0
    468e:	|  |   move.l 68(sp),-(sp)
    4692:	|  |   move.l d0,-(sp)
    4694:	|  |   jsr 8d0 <put2bytes>
    469a:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    469c:	|  |   movea.l 56(sp),a0
    46a0:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    46a6:	'--|-> tst.l 56(sp)
    46aa:	   '-- bne.s 464e <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    46ac:	       move.l 68(sp),28(sp)
    46b2:	       clr.l 24(sp)
    46b6:	       move.l 1d0ce <DOSBase>,d0
    46bc:	       movea.l d0,a6
    46be:	       move.l 28(sp),d1
    46c2:	       move.l 24(sp),d2
    46c6:	       jsr -312(a6)
    46ca:	       move.l d0,20(sp)
}
    46ce:	       nop
    46d0:	       move.l (sp)+,d2
    46d2:	       movea.l (sp)+,a6
    46d4:	       lea 52(sp),sp
    46d8:	       rts

000046da <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    46da:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    46dc:	movea.l 8(sp),a0
    46e0:	movea.l 80(a0),a0
    46e4:	move.l (a0),d2
    46e6:	movea.l 8(sp),a0
    46ea:	movea.l 80(a0),a0
    46ee:	move.l 4(a0),d0
    46f2:	move.l 12(sp),-(sp)
    46f6:	move.l d0,-(sp)
    46f8:	jsr 18204 <__mulsi3>
    46fe:	addq.l #8,sp
    4700:	move.l d0,d1
    4702:	movea.l 8(sp),a0
    4706:	move.l 106(a0),d0
    470a:	add.l d1,d0
    470c:	add.l d0,d0
    470e:	add.l d0,d0
    4710:	movea.l d2,a0
    4712:	adda.l d0,a0
    4714:	move.l (a0),d0
    4716:	movea.l 8(sp),a0
    471a:	move.l d0,72(a0)
}
    471e:	nop
    4720:	move.l (sp)+,d2
    4722:	rts

00004724 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4724:	       lea -20(sp),sp
    4728:	       move.l d2,-(sp)
    472a:	       move.l 40(sp),d0
    472e:	       move.w d0,d0
    4730:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4734:	       movea.l 1d016 <speech>,a0
    473a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4740:	       move.l 32(sp),-(sp)
    4744:	       jsr ab3e <findPerson>
    474a:	       addq.l #4,sp
    474c:	       move.l d0,16(sp)
    if (thisPerson) {
    4750:	   ,-- beq.s 4776 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4752:	   |   movea.w 6(sp),a0
    4756:	   |   move.l a0,-(sp)
    4758:	   |   move.l 40(sp),-(sp)
    475c:	   |   move.l 24(sp),-(sp)
    4760:	   |   move.l 40(sp),-(sp)
    4764:	   |   jsr 483c <wrapSpeechPerson>
    476a:	   |   lea 16(sp),sp
    476e:	   |   move.l d0,20(sp)
    4772:	,--|-- bra.w 4830 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4776:	|  '-> move.l 32(sp),-(sp)
    477a:	|      jsr 1605a <getRegionForObject>
    4780:	|      addq.l #4,sp
    4782:	|      move.l d0,12(sp)
        if (thisRegion) {
    4786:	|  ,-- beq.s 47f2 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4788:	|  |   movea.l 12(sp),a0
    478c:	|  |   movea.l 28(a0),a0
    4790:	|  |   move.l 28(a0),d0
    4794:	|  |   movea.l 12(sp),a0
    4798:	|  |   movea.l 4(a0),a1
    479c:	|  |   movea.l 12(sp),a0
    47a0:	|  |   movea.l 28(a0),a0
    47a4:	|  |   move.l 20(a0),d1
    47a8:	|  |   movea.l a1,a0
    47aa:	|  |   suba.l d1,a0
    47ac:	|  |   move.l 1d180 <cameraY>,d1
    47b2:	|  |   movea.l a0,a1
    47b4:	|  |   suba.l d1,a1
    47b6:	|  |   movea.l 12(sp),a0
    47ba:	|  |   move.l (a0),d2
    47bc:	|  |   movea.l 12(sp),a0
    47c0:	|  |   move.l 8(a0),d1
    47c4:	|  |   add.l d2,d1
    47c6:	|  |   move.l d1,d2
    47c8:	|  |   asr.l #1,d2
    47ca:	|  |   move.l 1d17c <cameraX>,d1
    47d0:	|  |   movea.l d2,a0
    47d2:	|  |   suba.l d1,a0
    47d4:	|  |   move.l 36(sp),-(sp)
    47d8:	|  |   move.l d0,-(sp)
    47da:	|  |   move.l a1,-(sp)
    47dc:	|  |   move.l a0,-(sp)
    47de:	|  |   move.l 44(sp),-(sp)
    47e2:	|  |   jsr 495a <wrapSpeechXY>
    47e8:	|  |   lea 20(sp),sp
    47ec:	|  |   move.l d0,20(sp)
    47f0:	+--|-- bra.s 4830 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    47f2:	|  '-> move.l 32(sp),-(sp)
    47f6:	|      jsr daac <findObjectType>
    47fc:	|      addq.l #4,sp
    47fe:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4802:	|      movea.l 8(sp),a0
    4806:	|      move.l 28(a0),d1
    480a:	|      move.l 1d01a <winWidth>,d0
    4810:	|      lsr.l #1,d0
    4812:	|      move.l 36(sp),-(sp)
    4816:	|      move.l d1,-(sp)
    4818:	|      pea a <_start+0xa>
    481c:	|      move.l d0,-(sp)
    481e:	|      move.l 44(sp),-(sp)
    4822:	|      jsr 495a <wrapSpeechXY>
    4828:	|      lea 20(sp),sp
    482c:	|      move.l d0,20(sp)
        }
    }
    return i;
    4830:	'----> move.l 20(sp),d0
}
    4834:	       move.l (sp)+,d2
    4836:	       lea 20(sp),sp
    483a:	       rts

0000483c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    483c:	    subq.l #8,sp
    483e:	    movem.l d2-d4,-(sp)
    4842:	    move.l 36(sp),d0
    4846:	    move.w d0,d0
    4848:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    484c:	    movea.l 28(sp),a0
    4850:	    movea.l 114(a0),a0
    4854:	    move.l 28(a0),d2
    4858:	    movea.l 28(sp),a0
    485c:	    move.l 4(a0),d3
    4860:	    move.l 1d180 <cameraY>,d0
    4866:	    move.l d0,-(sp)
    4868:	    jsr 17caa <__floatsisf>
    486e:	    addq.l #4,sp
    4870:	    move.l d0,-(sp)
    4872:	    move.l d3,-(sp)
    4874:	    jsr 17f9e <__subsf3>
    487a:	    addq.l #8,sp
    487c:	    move.l d0,d3
    487e:	    movea.l 28(sp),a0
    4882:	    move.l 32(a0),d4
    4886:	    movea.l 28(sp),a0
    488a:	    move.l 20(a0),d1
    488e:	    movea.l 28(sp),a0
    4892:	    move.l 24(a0),d0
    4896:	    sub.l d0,d1
    4898:	    move.l d1,-(sp)
    489a:	    jsr 17caa <__floatsisf>
    48a0:	    addq.l #4,sp
    48a2:	    move.l d0,-(sp)
    48a4:	    move.l d4,-(sp)
    48a6:	    jsr 17d5c <__mulsf3>
    48ac:	    addq.l #8,sp
    48ae:	    move.l d0,-(sp)
    48b0:	    move.l d3,-(sp)
    48b2:	    jsr 17f9e <__subsf3>
    48b8:	    addq.l #8,sp
    48ba:	    move.l d0,d3
    48bc:	    movea.l 28(sp),a0
    48c0:	    movea.l 114(a0),a0
    48c4:	    move.l 20(a0),d0
    48c8:	    move.l d0,-(sp)
    48ca:	    jsr 17caa <__floatsisf>
    48d0:	    addq.l #4,sp
    48d2:	    move.l d0,-(sp)
    48d4:	    move.l d3,-(sp)
    48d6:	    jsr 17f9e <__subsf3>
    48dc:	    addq.l #8,sp
    48de:	    move.l d0,-(sp)
    48e0:	    jsr 17c42 <__fixsfsi>
    48e6:	    addq.l #4,sp
    48e8:	    move.l d0,d4
    48ea:	    movea.l 28(sp),a0
    48ee:	    move.l (a0),d3
    48f0:	    move.l 1d17c <cameraX>,d0
    48f6:	    move.l d0,-(sp)
    48f8:	    jsr 17caa <__floatsisf>
    48fe:	    addq.l #4,sp
    4900:	    move.l d0,-(sp)
    4902:	    move.l d3,-(sp)
    4904:	    jsr 17f9e <__subsf3>
    490a:	    addq.l #8,sp
    490c:	    move.l d0,-(sp)
    490e:	    jsr 17c42 <__fixsfsi>
    4914:	    addq.l #4,sp
    4916:	    move.l 32(sp),-(sp)
    491a:	    move.l d2,-(sp)
    491c:	    move.l d4,-(sp)
    491e:	    move.l d0,-(sp)
    4920:	    move.l 40(sp),-(sp)
    4924:	    jsr 495a <wrapSpeechXY>
    492a:	    lea 20(sp),sp
    492e:	    move.l d0,16(sp)
	if (animPerson) {
    4932:	    tst.w 14(sp)
    4936:	,-- beq.s 494e <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4938:	|   move.l 28(sp),-(sp)
    493c:	|   jsr 457a <makeTalker>
    4942:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4944:	|   movea.l 1d016 <speech>,a0
    494a:	|   move.l 28(sp),(a0)
	}
	return i;
    494e:	'-> move.l 16(sp),d0
}
    4952:	    movem.l (sp)+,d2-d4
    4956:	    addq.l #8,sp
    4958:	    rts

0000495a <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    495a:	                   lea -16(sp),sp
    495e:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4962:	                   clr.l 16(sp)
    killAllSpeech();
    4966:	                   jsr 44ac <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    496c:	                   move.l 36(sp),-(sp)
    4970:	                   jsr 14284 <strlen>
    4976:	                   addq.l #4,sp
    4978:	                   movea.l d0,a0
    497a:	                   lea 20(a0),a0
    497e:	                   move.l a0,-(sp)
    4980:	                   jsr 17cd2 <__floatunsisf>
    4986:	                   addq.l #4,sp
    4988:	                   move.l d0,d1
    498a:	                   move.l 1ca30 <speechSpeed>,d0
    4990:	                   move.l d0,-(sp)
    4992:	                   move.l d1,-(sp)
    4994:	                   jsr 17d5c <__mulsf3>
    499a:	                   addq.l #8,sp
    499c:	                   move.l d0,-(sp)
    499e:	                   jsr 17c42 <__fixsfsi>
    49a4:	                   addq.l #4,sp
    49a6:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    49aa:	               ,-- bgt.s 49b2 <wrapSpeechXY+0x58>
    49ac:	               |   moveq #1,d0
    49ae:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    49b2:	               '-> moveq #-1,d1
    49b4:	                   cmp.l 52(sp),d1
    49b8:	               ,-- beq.s 49f8 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    49ba:	               |   move.l 1d190 <speechMode>,d0
    49c0:	               +-- ble.s 49f8 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    49c2:	               |   clr.l -(sp)
    49c4:	               |   move.l 56(sp),-(sp)
    49c8:	               |   jsr d76c <startSound>
    49ce:	               |   addq.l #8,sp
    49d0:	               |   tst.w d0
    49d2:	               +-- beq.s 49f8 <wrapSpeechXY+0x9e>
                speechTime = -10;
    49d4:	               |   moveq #-10,d0
    49d6:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    49da:	               |   movea.l 1d016 <speech>,a0
    49e0:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    49e6:	               |   move.l 1d190 <speechMode>,d0
    49ec:	               |   moveq #2,d1
    49ee:	               |   cmp.l d0,d1
    49f0:	               +-- bne.s 49f8 <wrapSpeechXY+0x9e>
    49f2:	               |   moveq #-10,d0
    49f4:	,--------------|-- bra.w 4c7e <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    49f8:	|              '-> movea.l 1d016 <speech>,a0
    49fe:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4a04:	|     ,----------- bra.w 4ab8 <wrapSpeechXY+0x15e>
        a = wrap;
    4a08:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4a0e:	|  |  |        ,-- bra.s 4a1e <wrapSpeechXY+0xc4>
            a--;
    4a10:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4a14:	|  |  |  |     +-- bne.s 4a1e <wrapSpeechXY+0xc4>
                a = wrap;
    4a16:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4a1c:	|  |  |  |  ,--|-- bra.s 4a30 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4a1e:	|  |  |  |  |  '-> move.l 28(sp),d0
    4a22:	|  |  |  |  |      movea.l 36(sp),a0
    4a26:	|  |  |  |  |      adda.l d0,a0
    4a28:	|  |  |  |  |      move.b (a0),d0
    4a2a:	|  |  |  |  |      cmpi.b #32,d0
    4a2e:	|  |  |  '--|----- bne.s 4a10 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4a30:	|  |  |     '----> move.l 28(sp),d0
    4a34:	|  |  |            movea.l 36(sp),a0
    4a38:	|  |  |            adda.l d0,a0
    4a3a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4a3c:	|  |  |            lea 16(sp),a0
    4a40:	|  |  |            move.l a0,-(sp)
    4a42:	|  |  |            move.l 44(sp),-(sp)
    4a46:	|  |  |            move.l 44(sp),-(sp)
    4a4a:	|  |  |            jsr 41f6 <addSpeechLine>
    4a50:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4a54:	|  |  |            move.l 28(sp),d0
    4a58:	|  |  |            movea.l 36(sp),a0
    4a5c:	|  |  |            adda.l d0,a0
    4a5e:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4a62:	|  |  |            move.l 28(sp),d0
    4a66:	|  |  |            addq.l #1,d0
    4a68:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4a6c:	|  |  |            move.l 44(sp),-(sp)
    4a70:	|  |  |            jsr 17caa <__floatsisf>
    4a76:	|  |  |            addq.l #4,sp
    4a78:	|  |  |            move.l d0,d2
    4a7a:	|  |  |            move.l 1d1ba <fontHeight>,d0
    4a80:	|  |  |            move.l d0,-(sp)
    4a82:	|  |  |            jsr 17caa <__floatsisf>
    4a88:	|  |  |            addq.l #4,sp
    4a8a:	|  |  |            move.l d0,d1
    4a8c:	|  |  |            move.l 1ca58 <cameraZoom>,d0
    4a92:	|  |  |            move.l d0,-(sp)
    4a94:	|  |  |            move.l d1,-(sp)
    4a96:	|  |  |            jsr 17b60 <__divsf3>
    4a9c:	|  |  |            addq.l #8,sp
    4a9e:	|  |  |            move.l d0,-(sp)
    4aa0:	|  |  |            move.l d2,-(sp)
    4aa2:	|  |  |            jsr 17f9e <__subsf3>
    4aa8:	|  |  |            addq.l #8,sp
    4aaa:	|  |  |            move.l d0,-(sp)
    4aac:	|  |  |            jsr 17c42 <__fixsfsi>
    4ab2:	|  |  |            addq.l #4,sp
    4ab4:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4ab8:	|  |  '----------> move.l 36(sp),-(sp)
    4abc:	|  |               jsr 14284 <strlen>
    4ac2:	|  |               addq.l #4,sp
    4ac4:	|  |               move.l d0,d1
    4ac6:	|  |               move.l 48(sp),d0
    4aca:	|  |               cmp.l d1,d0
    4acc:	|  '-------------- bcs.w 4a08 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4ad0:	|                  lea 16(sp),a0
    4ad4:	|                  move.l a0,-(sp)
    4ad6:	|                  move.l 44(sp),-(sp)
    4ada:	|                  move.l 44(sp),-(sp)
    4ade:	|                  jsr 41f6 <addSpeechLine>
    4ae4:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4ae8:	|                  move.l 44(sp),-(sp)
    4aec:	|                  jsr 17caa <__floatsisf>
    4af2:	|                  addq.l #4,sp
    4af4:	|                  move.l d0,d2
    4af6:	|                  move.l 1d1ba <fontHeight>,d0
    4afc:	|                  move.l d0,-(sp)
    4afe:	|                  jsr 17caa <__floatsisf>
    4b04:	|                  addq.l #4,sp
    4b06:	|                  move.l d0,d1
    4b08:	|                  move.l 1ca58 <cameraZoom>,d0
    4b0e:	|                  move.l d0,-(sp)
    4b10:	|                  move.l d1,-(sp)
    4b12:	|                  jsr 17b60 <__divsf3>
    4b18:	|                  addq.l #8,sp
    4b1a:	|                  move.l d0,-(sp)
    4b1c:	|                  move.l d2,-(sp)
    4b1e:	|                  jsr 17f9e <__subsf3>
    4b24:	|                  addq.l #8,sp
    4b26:	|                  move.l d0,-(sp)
    4b28:	|                  jsr 17c42 <__fixsfsi>
    4b2e:	|                  addq.l #4,sp
    4b30:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4b34:	|              ,-- bpl.s 4b52 <wrapSpeechXY+0x1f8>
    4b36:	|              |   movea.l 1d016 <speech>,a0
    4b3c:	|              |   move.l 8(a0),d0
    4b40:	|              |   movea.l 1d016 <speech>,a0
    4b46:	|              |   sub.l 44(sp),d0
    4b4a:	|              |   move.l d0,8(a0)
    4b4e:	|           ,--|-- bra.w 4c40 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4b52:	|           |  '-> movea.l 1d016 <speech>,a0
    4b58:	|           |      move.l 8(a0),d0
    4b5c:	|           |      move.l d0,-(sp)
    4b5e:	|           |      jsr 17caa <__floatsisf>
    4b64:	|           |      addq.l #4,sp
    4b66:	|           |      move.l d0,d2
    4b68:	|           |      move.l 1d180 <cameraY>,d0
    4b6e:	|           |      move.l d0,-(sp)
    4b70:	|           |      jsr 17caa <__floatsisf>
    4b76:	|           |      addq.l #4,sp
    4b78:	|           |      move.l d0,d3
    4b7a:	|           |      move.l 1d01e <winHeight>,d4
    4b80:	|           |      move.l 1d1ba <fontHeight>,d0
    4b86:	|           |      pea 3 <_start+0x3>
    4b8a:	|           |      move.l d0,-(sp)
    4b8c:	|           |      jsr 18282 <__divsi3>
    4b92:	|           |      addq.l #8,sp
    4b94:	|           |      move.l d4,d1
    4b96:	|           |      sub.l d0,d1
    4b98:	|           |      move.l d1,-(sp)
    4b9a:	|           |      jsr 17cd2 <__floatunsisf>
    4ba0:	|           |      addq.l #4,sp
    4ba2:	|           |      move.l d0,d1
    4ba4:	|           |      move.l 1ca58 <cameraZoom>,d0
    4baa:	|           |      move.l d0,-(sp)
    4bac:	|           |      move.l d1,-(sp)
    4bae:	|           |      jsr 17b60 <__divsf3>
    4bb4:	|           |      addq.l #8,sp
    4bb6:	|           |      move.l d0,-(sp)
    4bb8:	|           |      move.l d3,-(sp)
    4bba:	|           |      jsr 17a66 <__addsf3>
    4bc0:	|           |      addq.l #8,sp
    4bc2:	|           |      move.l d0,-(sp)
    4bc4:	|           |      move.l d2,-(sp)
    4bc6:	|           |      jsr 17e16 <__gtsf2>
    4bcc:	|           |      addq.l #8,sp
    4bce:	|           |      tst.l d0
    4bd0:	|           +----- ble.s 4c40 <wrapSpeechXY+0x2e6>
    4bd2:	|           |      move.l 1d180 <cameraY>,d0
    4bd8:	|           |      move.l d0,-(sp)
    4bda:	|           |      jsr 17caa <__floatsisf>
    4be0:	|           |      addq.l #4,sp
    4be2:	|           |      move.l d0,d2
    4be4:	|           |      move.l 1d01e <winHeight>,d3
    4bea:	|           |      move.l 1d1ba <fontHeight>,d0
    4bf0:	|           |      pea 3 <_start+0x3>
    4bf4:	|           |      move.l d0,-(sp)
    4bf6:	|           |      jsr 18282 <__divsi3>
    4bfc:	|           |      addq.l #8,sp
    4bfe:	|           |      move.l d3,d1
    4c00:	|           |      sub.l d0,d1
    4c02:	|           |      move.l d1,-(sp)
    4c04:	|           |      jsr 17cd2 <__floatunsisf>
    4c0a:	|           |      addq.l #4,sp
    4c0c:	|           |      move.l d0,d1
    4c0e:	|           |      move.l 1ca58 <cameraZoom>,d0
    4c14:	|           |      move.l d0,-(sp)
    4c16:	|           |      move.l d1,-(sp)
    4c18:	|           |      jsr 17b60 <__divsf3>
    4c1e:	|           |      addq.l #8,sp
    4c20:	|           |      move.l d0,-(sp)
    4c22:	|           |      move.l d2,-(sp)
    4c24:	|           |      jsr 17a66 <__addsf3>
    4c2a:	|           |      addq.l #8,sp
    4c2c:	|           |      movea.l 1d016 <speech>,a2
    4c32:	|           |      move.l d0,-(sp)
    4c34:	|           |      jsr 17c42 <__fixsfsi>
    4c3a:	|           |      addq.l #4,sp
    4c3c:	|           |      move.l d0,8(a2)

    if (offset) {
    4c40:	|           '----> move.l 16(sp),d0
    4c44:	|        ,-------- beq.s 4c7a <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4c46:	|        |         movea.l 1d016 <speech>,a0
    4c4c:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4c52:	|        |     ,-- bra.s 4c74 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4c54:	|        |  ,--|-> movea.l 20(sp),a0
    4c58:	|        |  |  |   move.l 8(a0),d1
    4c5c:	|        |  |  |   move.l 16(sp),d0
    4c60:	|        |  |  |   add.l d1,d0
    4c62:	|        |  |  |   movea.l 20(sp),a0
    4c66:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4c6a:	|        |  |  |   movea.l 20(sp),a0
    4c6e:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4c74:	|        |  |  '-> tst.l 20(sp)
    4c78:	|        |  '----- bne.s 4c54 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4c7a:	|        '-------> move.l 24(sp),d0
}
    4c7e:	'----------------> movem.l (sp)+,d2-d4/a2
    4c82:	                   lea 16(sp),sp
    4c86:	                   rts

00004c88 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4c88:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4c8c:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4c90:	       tst.l 24(sp)
    4c94:	   ,-- bge.s 4c9a <drawLine+0x12>
    4c96:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4c9a:	   '-> tst.l 28(sp)
    4c9e:	   ,-- bge.s 4ca4 <drawLine+0x1c>
    4ca0:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4ca4:	   '-> tst.l 32(sp)
    4ca8:	   ,-- bge.s 4cae <drawLine+0x26>
    4caa:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4cae:	   '-> tst.l 36(sp)
    4cb2:	   ,-- bge.s 4cb8 <drawLine+0x30>
    4cb4:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4cb8:	   '-> move.l 1d15e <sceneWidth>,d0
    4cbe:	       cmp.l 24(sp),d0
    4cc2:	   ,-- bge.s 4cd2 <drawLine+0x4a>
    4cc4:	   |   move.l 1d15e <sceneWidth>,d0
    4cca:	   |   move.l d0,d1
    4ccc:	   |   subq.l #1,d1
    4cce:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4cd2:	   '-> move.l 1d15e <sceneWidth>,d0
    4cd8:	       cmp.l 32(sp),d0
    4cdc:	   ,-- bge.s 4cec <drawLine+0x64>
    4cde:	   |   move.l 1d15e <sceneWidth>,d0
    4ce4:	   |   move.l d0,d1
    4ce6:	   |   subq.l #1,d1
    4ce8:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4cec:	   '-> move.l 1d162 <sceneHeight>,d0
    4cf2:	       cmp.l 28(sp),d0
    4cf6:	   ,-- bge.s 4d06 <drawLine+0x7e>
    4cf8:	   |   move.l 1d162 <sceneHeight>,d0
    4cfe:	   |   move.l d0,d1
    4d00:	   |   subq.l #1,d1
    4d02:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4d06:	   '-> move.l 1d162 <sceneHeight>,d0
    4d0c:	       cmp.l 36(sp),d0
    4d10:	   ,-- bge.s 4d20 <drawLine+0x98>
    4d12:	   |   move.l 1d162 <sceneHeight>,d0
    4d18:	   |   move.l d0,d1
    4d1a:	   |   subq.l #1,d1
    4d1c:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4d20:	   '-> move.l 24(sp),d0
    4d24:	       cmp.l 32(sp),d0
    4d28:	,----- ble.s 4d44 <drawLine+0xbc>
		x = x2; 
    4d2a:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4d30:	|      tst.w 10(sp)
    4d34:	|      seq d0
    4d36:	|      neg.b d0
    4d38:	|      move.b d0,d0
    4d3a:	|      andi.w #255,d0
    4d3e:	|      move.w d0,10(sp)
    4d42:	|  ,-- bra.s 4d4a <drawLine+0xc2>
	} else x = x1;
    4d44:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4d4a:	   '-> move.l 28(sp),d1
    4d4e:	       cmp.l 36(sp),d1
    4d52:	,----- ble.s 4d6e <drawLine+0xe6>
		y = y2; 
    4d54:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4d5a:	|      tst.w 10(sp)
    4d5e:	|      seq d0
    4d60:	|      neg.b d0
    4d62:	|      move.b d0,d0
    4d64:	|      andi.w #255,d0
    4d68:	|      move.w d0,10(sp)
    4d6c:	|  ,-- bra.s 4d74 <drawLine+0xec>
	} else y = y1;	
    4d6e:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4d74:	   '-> move.l 32(sp),d0
    4d78:	       sub.l 24(sp),d0
    4d7c:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4d80:	       move.l 6(sp),d0
    4d84:	   ,-- bpl.s 4d88 <drawLine+0x100>
    4d86:	   |   neg.l d0
    4d88:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4d8c:	       move.l 36(sp),d1
    4d90:	       sub.l 28(sp),d1
    4d94:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4d98:	       move.l 2(sp),d0
    4d9c:	   ,-- bpl.s 4da0 <drawLine+0x118>
    4d9e:	   |   neg.l d0
    4da0:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4da4:	       tst.l 6(sp)
    4da8:	   ,-- bne.s 4dcc <drawLine+0x144>
		diffX = 1;
    4daa:	   |   moveq #1,d0
    4dac:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4db0:	   |   move.l 1d15e <sceneWidth>,d0
    4db6:	   |   subq.l #1,d0
    4db8:	   |   cmp.l 16(sp),d0
    4dbc:	   +-- bne.s 4dcc <drawLine+0x144>
    4dbe:	   |   move.l 1d15e <sceneWidth>,d0
    4dc4:	   |   move.l d0,d1
    4dc6:	   |   subq.l #2,d1
    4dc8:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4dcc:	   '-> tst.l 2(sp)
    4dd0:	   ,-- bne.s 4df4 <drawLine+0x16c>
		diffY = 1;
    4dd2:	   |   moveq #1,d0
    4dd4:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4dd8:	   |   move.l 1d162 <sceneHeight>,d0
    4dde:	   |   subq.l #1,d0
    4de0:	   |   cmp.l 12(sp),d0
    4de4:	   +-- bne.s 4df4 <drawLine+0x16c>
    4de6:	   |   move.l 1d162 <sceneHeight>,d0
    4dec:	   |   move.l d0,d1
    4dee:	   |   subq.l #2,d1
    4df0:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4df4:	   '-> pea 18a13 <PutChar+0x6f9>
    4dfa:	       jsr 17878 <KPrintF>
    4e00:	       addq.l #4,sp
	
}
    4e02:	       nop
    4e04:	       lea 20(sp),sp
    4e08:	       rts

00004e0a <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4e0a:	                      lea -24(sp),sp
    4e0e:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4e10:	                      move.l 1d022 <firstTexture>,d0
    4e16:	,-------------------- beq.w 4ef4 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4e1a:	|                     clr.l 24(sp)
    4e1e:	|     ,-------------- bra.w 4ee8 <deleteTextures+0xde>
			BOOL found = FALSE;
    4e22:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4e26:	|  |  |               move.l 1d022 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4e2e:	|  |  |               movea.l 20(sp),a0
    4e32:	|  |  |               move.l (a0),d1
    4e34:	|  |  |               move.l 24(sp),d0
    4e38:	|  |  |               add.l d0,d0
    4e3a:	|  |  |               add.l d0,d0
    4e3c:	|  |  |               movea.l 36(sp),a0
    4e40:	|  |  |               adda.l d0,a0
    4e42:	|  |  |               move.l (a0),d0
    4e44:	|  |  |               cmp.l d1,d0
    4e46:	|  |  |  ,----------- bne.w 4eda <deleteTextures+0xd0>
				found = TRUE;
    4e4a:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4e50:	|  |  |  |            movea.l 20(sp),a0
    4e54:	|  |  |  |            move.l 12(a0),d0
    4e58:	|  |  |  |            move.l d0,1d022 <firstTexture>
				FreeVec(list);
    4e5e:	|  |  |  |            move.l 20(sp),6(sp)
    4e64:	|  |  |  |            move.l 1d0c6 <SysBase>,d0
    4e6a:	|  |  |  |            movea.l d0,a6
    4e6c:	|  |  |  |            movea.l 6(sp),a1
    4e70:	|  |  |  |            jsr -690(a6)
				continue;
    4e74:	|  |  |  |  ,-------- bra.s 4ee4 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4e76:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4e7a:	|  |  |  |  |  |      movea.l 12(a0),a0
    4e7e:	|  |  |  |  |  |      move.l (a0),d1
    4e80:	|  |  |  |  |  |      move.l 24(sp),d0
    4e84:	|  |  |  |  |  |      add.l d0,d0
    4e86:	|  |  |  |  |  |      add.l d0,d0
    4e88:	|  |  |  |  |  |      movea.l 36(sp),a0
    4e8c:	|  |  |  |  |  |      adda.l d0,a0
    4e8e:	|  |  |  |  |  |      move.l (a0),d0
    4e90:	|  |  |  |  |  |      cmp.l d1,d0
    4e92:	|  |  |  |  |  |  ,-- bne.s 4ed0 <deleteTextures+0xc6>
					found = TRUE;
    4e94:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4e9a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4e9e:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4ea4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ea8:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4eac:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4eb0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4eb4:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4eb8:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4ebe:	|  |  |  |  |  |  |   move.l 1d0c6 <SysBase>,d0
    4ec4:	|  |  |  |  |  |  |   movea.l d0,a6
    4ec6:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4eca:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4ece:	|  |  |  |  +--|--|-- bra.s 4ee4 <deleteTextures+0xda>
				}
				list = list->next;
    4ed0:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ed4:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4eda:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4ede:	|  |  |     |  |      move.l 12(a0),d0
    4ee2:	|  |  |     |  '----- bne.s 4e76 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ee4:	|  |  |     '-------> addq.l #1,24(sp)
    4ee8:	|  |  '-------------> move.l 24(sp),d0
    4eec:	|  |                  cmp.l 32(sp),d0
    4ef0:	|  '----------------- bcs.w 4e22 <deleteTextures+0x18>
			}
		}
	}
}
    4ef4:	'-------------------> nop
    4ef6:	                      movea.l (sp)+,a6
    4ef8:	                      lea 24(sp),sp
    4efc:	                      rts

00004efe <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4efe:	subq.l #4,sp
    4f00:	move.l 8(sp),d0
    4f04:	move.w d0,d0
    4f06:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4f0a:	pea 18a36 <PutChar+0x71c>
    4f10:	jsr 17878 <KPrintF>
    4f16:	addq.l #4,sp
}
    4f18:	nop
    4f1a:	addq.l #4,sp
    4f1c:	rts

00004f1e <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4f1e:	       moveq #-1,d0
    4f20:	       cmp.l 4(sp),d0
    4f24:	   ,-- bne.s 4f2a <resourceNameFromNum+0xc>
    4f26:	   |   moveq #0,d0
    4f28:	,--|-- bra.s 4f62 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4f2a:	|  '-> move.l 1d0a2 <numResourceNames>,d0
    4f30:	|  ,-- bne.s 4f3a <resourceNameFromNum+0x1c>
    4f32:	|  |   move.l #100966,d0
    4f38:	+--|-- bra.s 4f62 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4f3a:	|  '-> move.l 1d0a2 <numResourceNames>,d0
    4f40:	|      cmp.l 4(sp),d0
    4f44:	|  ,-- ble.s 4f5c <resourceNameFromNum+0x3e>
    4f46:	|  |   move.l 1d05a <allResourceNames>,d1
    4f4c:	|  |   move.l 4(sp),d0
    4f50:	|  |   add.l d0,d0
    4f52:	|  |   add.l d0,d0
    4f54:	|  |   movea.l d1,a0
    4f56:	|  |   adda.l d0,a0
    4f58:	|  |   move.l (a0),d0
    4f5a:	+--|-- bra.s 4f62 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4f5c:	|  '-> move.l #100975,d0
    4f62:	'----> rts

00004f64 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4f64:	          lea -44(sp),sp
    4f68:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4f6c:	          move.l #320,1d01a <winWidth>
    winHeight = 256;
    4f76:	          move.l #256,1d01e <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4f80:	          tst.l 60(sp)
    4f84:	      ,-- bne.s 4f9c <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4f86:	      |   pea 18a80 <PutChar+0x766>
    4f8c:	      |   jsr b8 <copyString>
    4f92:	      |   addq.l #4,sp
    4f94:	      |   move.l d0,1d032 <bundleFolder>
    4f9a:	   ,--|-- bra.s 4fb2 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4f9c:	   |  '-> movea.l 64(sp),a0
    4fa0:	   |      move.l (a0),d0
    4fa2:	   |      move.l d0,-(sp)
    4fa4:	   |      jsr b8 <copyString>
    4faa:	   |      addq.l #4,sp
    4fac:	   |      move.l d0,1d032 <bundleFolder>
	}
    
	int lastSlash = -1;
    4fb2:	   '----> moveq #-1,d0
    4fb4:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fb8:	          clr.l 44(sp)
    4fbc:	   ,----- bra.s 4fde <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4fbe:	,--|----> move.l 1d032 <bundleFolder>,d1
    4fc4:	|  |      move.l 44(sp),d0
    4fc8:	|  |      movea.l d1,a0
    4fca:	|  |      adda.l d0,a0
    4fcc:	|  |      move.b (a0),d0
    4fce:	|  |      cmpi.b #47,d0
    4fd2:	|  |  ,-- bne.s 4fda <main_sludge+0x76>
    4fd4:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fda:	|  |  '-> addq.l #1,44(sp)
    4fde:	|  '----> move.l 1d032 <bundleFolder>,d1
    4fe4:	|         move.l 44(sp),d0
    4fe8:	|         movea.l d1,a0
    4fea:	|         adda.l d0,a0
    4fec:	|         move.b (a0),d0
    4fee:	'-------- bne.s 4fbe <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4ff0:	          move.l 1d032 <bundleFolder>,d0
    4ff6:	          move.l 48(sp),d1
    4ffa:	          addq.l #1,d1
    4ffc:	          movea.l d0,a0
    4ffe:	          adda.l d1,a0
    5000:	          clr.b (a0)

	if (argc > 1) {
    5002:	          moveq #1,d0
    5004:	          cmp.l 60(sp),d0
    5008:	      ,-- bge.s 5024 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    500a:	      |   move.l 60(sp),d0
    500e:	      |   addi.l #1073741823,d0
    5014:	      |   add.l d0,d0
    5016:	      |   add.l d0,d0
    5018:	      |   movea.l 64(sp),a0
    501c:	      |   adda.l d0,a0
    501e:	      |   move.l (a0),52(sp)
    5022:	   ,--|-- bra.s 507e <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    5024:	   |  '-> move.l 1d032 <bundleFolder>,d0
    502a:	   |      pea 18a86 <PutChar+0x76c>
    5030:	   |      move.l d0,-(sp)
    5032:	   |      jsr 142c4 <joinStrings>
    5038:	   |      addq.l #8,sp
    503a:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    503e:	   |      move.l 52(sp),-(sp)
    5042:	   |      jsr 141be <fileExists>
    5048:	   |      addq.l #4,sp
    504a:	   |      tst.b d0
    504c:	   +----- bne.s 507e <main_sludge+0x11a>
			FreeVec(sludgeFile);
    504e:	   |      move.l 52(sp),40(sp)
    5054:	   |      move.l 1d0c6 <SysBase>,d0
    505a:	   |      movea.l d0,a6
    505c:	   |      movea.l 40(sp),a1
    5060:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    5064:	   |      move.l 1d032 <bundleFolder>,d0
    506a:	   |      pea 18a93 <PutChar+0x779>
    5070:	   |      move.l d0,-(sp)
    5072:	   |      jsr 142c4 <joinStrings>
    5078:	   |      addq.l #8,sp
    507a:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    507e:	   '----> pea 18a9c <PutChar+0x782>
    5084:	          jsr 17878 <KPrintF>
    508a:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    508c:	          move.l 52(sp),-(sp)
    5090:	          jsr 141be <fileExists>
    5096:	          addq.l #4,sp
    5098:	          tst.b d0
    509a:	      ,-- bne.s 50f2 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    509c:	      |   move.l 1d0ce <DOSBase>,d0
    50a2:	      |   movea.l d0,a6
    50a4:	      |   jsr -60(a6)
    50a8:	      |   move.l d0,28(sp)
    50ac:	      |   move.l 28(sp),d0
    50b0:	      |   move.l d0,24(sp)
    50b4:	      |   move.l #101020,20(sp)
    50bc:	      |   moveq #21,d0
    50be:	      |   move.l d0,16(sp)
    50c2:	      |   move.l 1d0ce <DOSBase>,d0
    50c8:	      |   movea.l d0,a6
    50ca:	      |   move.l 24(sp),d1
    50ce:	      |   move.l 20(sp),d2
    50d2:	      |   move.l 16(sp),d3
    50d6:	      |   jsr -48(a6)
    50da:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    50de:	      |   pea 18a9c <PutChar+0x782>
    50e4:	      |   jsr 17878 <KPrintF>
    50ea:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    50ec:	      |   moveq #0,d0
    50ee:	,-----|-- bra.w 52f0 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    50f2:	|     '-> pea 18ab2 <PutChar+0x798>
    50f8:	|         jsr 17878 <KPrintF>
    50fe:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    5100:	|         move.l 52(sp),-(sp)
    5104:	|         jsr 52fa <setGameFilePath>
    510a:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    510c:	|         move.l 52(sp),-(sp)
    5110:	|         jsr 6844 <initSludge>
    5116:	|         addq.l #4,sp
    5118:	|         tst.w d0
    511a:	|     ,-- bne.s 5122 <main_sludge+0x1be>
    511c:	|     |   moveq #0,d0
    511e:	+-----|-- bra.w 52f0 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    5122:	|     '-> move.l 1d01a <winWidth>,d0
    5128:	|         cmpi.l #320,d0
    512e:	|     ,-- bne.s 513e <main_sludge+0x1da>
    5130:	|     |   move.l 1d01e <winHeight>,d0
    5136:	|     |   cmpi.l #256,d0
    513c:	|  ,--|-- beq.s 5160 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    513e:	|  |  '-> pea 18ac3 <PutChar+0x7a9>
    5144:	|  |      jsr 17878 <KPrintF>
    514a:	|  |      addq.l #4,sp
		winWidth = 320;
    514c:	|  |      move.l #320,1d01a <winWidth>
		winHeight = 256;
    5156:	|  |      move.l #256,1d01e <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    5160:	|  '----> pea 18b40 <PutChar+0x826>
    5166:	|         jsr 17878 <KPrintF>
    516c:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    516e:	|         move.l 1d01e <winHeight>,d0
    5174:	|         move.l d0,d1
    5176:	|         move.l 1d01a <winWidth>,d0
    517c:	|         move.l d1,-(sp)
    517e:	|         move.l d0,-(sp)
    5180:	|         jsr d98a <resizeBackdrop>
    5186:	|         addq.l #8,sp
    5188:	|         tst.w d0
    518a:	|     ,-- bne.s 51a0 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    518c:	|     |   pea 18b53 <PutChar+0x839>
    5192:	|     |   jsr 17878 <KPrintF>
    5198:	|     |   addq.l #4,sp
		return FALSE;
    519a:	|     |   moveq #0,d0
    519c:	+-----|-- bra.w 52f0 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    51a0:	|     '-> pea 18b79 <PutChar+0x85f>
    51a6:	|         jsr 17878 <KPrintF>
    51ac:	|         addq.l #4,sp
	if (! initPeople ())
    51ae:	|         jsr aea4 <initPeople>
    51b4:	|         tst.w d0
    51b6:	|     ,-- bne.s 51cc <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    51b8:	|     |   pea 18b86 <PutChar+0x86c>
    51be:	|     |   jsr 17878 <KPrintF>
    51c4:	|     |   addq.l #4,sp
		return FALSE;
    51c6:	|     |   moveq #0,d0
    51c8:	+-----|-- bra.w 52f0 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    51cc:	|     '-> pea 18ba7 <PutChar+0x88d>
    51d2:	|         jsr 17878 <KPrintF>
    51d8:	|         addq.l #4,sp
	if (! initFloor ())
    51da:	|         jsr 16c2e <initFloor>
    51e0:	|         tst.w d0
    51e2:	|     ,-- bne.s 51f8 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    51e4:	|     |   pea 18bb3 <PutChar+0x899>
    51ea:	|     |   jsr 17878 <KPrintF>
    51f0:	|     |   addq.l #4,sp
		
		return FALSE;
    51f2:	|     |   moveq #0,d0
    51f4:	+-----|-- bra.w 52f0 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    51f8:	|     '-> pea 18bd3 <PutChar+0x8b9>
    51fe:	|         jsr 17878 <KPrintF>
    5204:	|         addq.l #4,sp
	if (! initObjectTypes ())
    5206:	|         jsr db46 <initObjectTypes>
    520c:	|         tst.w d0
    520e:	|     ,-- bne.s 5224 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    5210:	|     |   pea 18be4 <PutChar+0x8ca>
    5216:	|     |   jsr 17878 <KPrintF>
    521c:	|     |   addq.l #4,sp
		return FALSE;
    521e:	|     |   moveq #0,d0
    5220:	+-----|-- bra.w 52f0 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    5224:	|     '-> pea 18c0a <PutChar+0x8f0>
    522a:	|         jsr 17878 <KPrintF>
    5230:	|         addq.l #4,sp
	initSpeech ();
    5232:	|         jsr 4414 <initSpeech>
	KPrintF("Init status bar\n");
    5238:	|         pea 18c17 <PutChar+0x8fd>
    523e:	|         jsr 17878 <KPrintF>
    5244:	|         addq.l #4,sp
	initStatusBar ();
    5246:	|         jsr 88a4 <initStatusBar>

	KPrintF("Get numbered string\n");
    524c:	|         pea 18c28 <PutChar+0x90e>
    5252:	|         jsr 17878 <KPrintF>
    5258:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    525a:	|         pea 1 <_start+0x1>
    525e:	|         jsr 7bae <getNumberedString>
    5264:	|         addq.l #4,sp
    5266:	|         move.l d0,1d02a <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    526c:	|         pea 18c3d <PutChar+0x923>
    5272:	|         jsr 17878 <KPrintF>
    5278:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    527a:	|         move.l 1d096 <noStack>,d0
    5280:	|         pea 1 <_start+0x1>
    5284:	|         move.l d0,-(sp)
    5286:	|         clr.l -(sp)
    5288:	|         clr.l -(sp)
    528a:	|         clr.l -(sp)
    528c:	|         jsr 7a06 <startNewFunctionNum>
    5292:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    5296:	|         pea 18c55 <PutChar+0x93b>
    529c:	|         jsr 17878 <KPrintF>
    52a2:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    52a4:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    52ac:	|         clr.l 1d036 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    52b2:	|     ,-- bra.s 52d2 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    52b4:	|  ,--|-> jsr 7886 <sludgeDisplay>
		CsiCheckInput();
    52ba:	|  |  |   jsr d4a8 <CsiCheckInput>
		walkAllPeople();
    52c0:	|  |  |   jsr c462 <walkAllPeople>
		handleInput();
    52c6:	|  |  |   jsr 65de <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    52cc:	|  |  |   jsr 177ac <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    52d2:	|  |  '-> move.l 1d036 <weAreDoneSoQuit>,d0
    52d8:	|  '----- beq.s 52b4 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    52da:	|         move.l 52(sp),32(sp)
    52e0:	|         move.l 1d0c6 <SysBase>,d0
    52e6:	|         movea.l d0,a6
    52e8:	|         movea.l 32(sp),a1
    52ec:	|         jsr -690(a6)
}
    52f0:	'-------> movem.l (sp)+,d2-d3/a6
    52f4:	          lea 44(sp),sp
    52f8:	          rts

000052fa <setGameFilePath>:

void setGameFilePath (char * f) {
    52fa:	          lea -1104(sp),sp
    52fe:	          move.l a6,-(sp)
    5300:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    5302:	          move.l #1112,d0
    5308:	          add.l sp,d0
    530a:	          addi.l #-1102,d0
    5310:	          move.l d0,1100(sp)
    5314:	          move.l #998,1096(sp)
    531c:	          move.l 1d0ce <DOSBase>,d0
    5322:	          movea.l d0,a6
    5324:	          move.l 1100(sp),d1
    5328:	          move.l 1096(sp),d2
    532c:	          jsr -564(a6)
    5330:	          move.w d0,1094(sp)
    5334:	          move.w 1094(sp),d0
    5338:	      ,-- bne.s 5348 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    533a:	      |   pea 18c68 <PutChar+0x94e>
    5340:	      |   jsr 17878 <KPrintF>
    5346:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5348:	      '-> moveq #-1,d0
    534a:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    534e:	          clr.l 1104(sp)
    5352:	   ,----- bra.s 5370 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5354:	,--|----> move.l 1104(sp),d0
    5358:	|  |      movea.l 1116(sp),a0
    535c:	|  |      adda.l d0,a0
    535e:	|  |      move.b (a0),d0
    5360:	|  |      cmpi.b #47,d0
    5364:	|  |  ,-- bne.s 536c <setGameFilePath+0x72>
    5366:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    536c:	|  |  '-> addq.l #1,1104(sp)
    5370:	|  '----> move.l 1104(sp),d0
    5374:	|         movea.l 1116(sp),a0
    5378:	|         adda.l d0,a0
    537a:	|         move.b (a0),d0
    537c:	'-------- bne.s 5354 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    537e:	          moveq #-1,d0
    5380:	          cmp.l 1108(sp),d0
    5384:	   ,----- beq.s 53fe <setGameFilePath+0x104>
		f[got] = 0;	
    5386:	   |      move.l 1108(sp),d0
    538a:	   |      movea.l 1116(sp),a0
    538e:	   |      adda.l d0,a0
    5390:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    5392:	   |      move.l 1116(sp),1090(sp)
    5398:	   |      moveq #-2,d0
    539a:	   |      move.l d0,1086(sp)
    539e:	   |      move.l 1d0ce <DOSBase>,d0
    53a4:	   |      movea.l d0,a6
    53a6:	   |      move.l 1090(sp),d1
    53aa:	   |      move.l 1086(sp),d2
    53ae:	   |      jsr -84(a6)
    53b2:	   |      move.l d0,1082(sp)
    53b6:	   |      move.l 1082(sp),d0
    53ba:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    53be:	   |      move.l 1078(sp),1074(sp)
    53c4:	   |      move.l 1d0ce <DOSBase>,d0
    53ca:	   |      movea.l d0,a6
    53cc:	   |      move.l 1074(sp),d1
    53d0:	   |      jsr -126(a6)
    53d4:	   |      move.l d0,1070(sp)
    53d8:	   |      move.l 1070(sp),d0
    53dc:	   |  ,-- bne.s 53f0 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    53de:	   |  |   move.l 1116(sp),-(sp)
    53e2:	   |  |   pea 18c8e <PutChar+0x974>
    53e8:	   |  |   jsr 17878 <KPrintF>
    53ee:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    53f0:	   |  '-> move.l 1108(sp),d0
    53f4:	   |      movea.l 1116(sp),a0
    53f8:	   |      adda.l d0,a0
    53fa:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    53fe:	   '----> move.l #400,1066(sp)
    5406:	          clr.l 1062(sp)
    540a:	          move.l 1d0c6 <SysBase>,d0
    5410:	          movea.l d0,a6
    5412:	          move.l 1066(sp),d0
    5416:	          move.l 1062(sp),d1
    541a:	          jsr -684(a6)
    541e:	          move.l d0,1058(sp)
    5422:	          move.l 1058(sp),d0
    5426:	          move.l d0,1d02e <gamePath>
	if (gamePath==0) {
    542c:	          move.l 1d02e <gamePath>,d0
    5432:	      ,-- bne.s 5446 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5434:	      |   pea 18cc1 <PutChar+0x9a7>
    543a:	      |   jsr 17878 <KPrintF>
    5440:	      |   addq.l #4,sp
    5442:	   ,--|-- bra.w 552e <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5446:	   |  '-> move.l 1d02e <gamePath>,1054(sp)
    544e:	   |      moveq #-2,d0
    5450:	   |      move.l d0,1050(sp)
    5454:	   |      move.l 1d0ce <DOSBase>,d0
    545a:	   |      movea.l d0,a6
    545c:	   |      move.l 1054(sp),d1
    5460:	   |      move.l 1050(sp),d2
    5464:	   |      jsr -84(a6)
    5468:	   |      move.l d0,1046(sp)
    546c:	   |      move.l 1046(sp),d0
    5470:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5474:	   |      move.l 1042(sp),1038(sp)
    547a:	   |      move.l 1d0ce <DOSBase>,d0
    5480:	   |      movea.l d0,a6
    5482:	   |      move.l 1038(sp),d1
    5486:	   |      jsr -126(a6)
    548a:	   |      move.l d0,1034(sp)
    548e:	   |      move.l 1034(sp),d0
    5492:	   |  ,-- bne.s 54a2 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5494:	   |  |   pea 18cfc <PutChar+0x9e2>
    549a:	   |  |   jsr 17878 <KPrintF>
    54a0:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    54a2:	   |  '-> move.l #1112,d0
    54a8:	   |      add.l sp,d0
    54aa:	   |      addi.l #-1102,d0
    54b0:	   |      move.l d0,1030(sp)
    54b4:	   |      moveq #-2,d0
    54b6:	   |      move.l d0,1026(sp)
    54ba:	   |      move.l 1d0ce <DOSBase>,d0
    54c0:	   |      movea.l d0,a6
    54c2:	   |      move.l 1030(sp),d1
    54c6:	   |      move.l 1026(sp),d2
    54ca:	   |      jsr -84(a6)
    54ce:	   |      move.l d0,1022(sp)
    54d2:	   |      move.l 1022(sp),d0
    54d6:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    54da:	   |      move.l 1042(sp),1018(sp)
    54e0:	   |      move.l 1d0ce <DOSBase>,d0
    54e6:	   |      movea.l d0,a6
    54e8:	   |      move.l 1018(sp),d1
    54ec:	   |      jsr -126(a6)
    54f0:	   |      move.l d0,1014(sp)
    54f4:	   |      move.l 1014(sp),d0
    54f8:	   |  ,-- bne.s 550e <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    54fa:	   |  |   moveq #10,d0
    54fc:	   |  |   add.l sp,d0
    54fe:	   |  |   move.l d0,-(sp)
    5500:	   |  |   pea 18d28 <PutChar+0xa0e>
    5506:	   |  |   jsr 17878 <KPrintF>
    550c:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    550e:	   |  '-> move.l 1d02e <gamePath>,d0
    5514:	   +----- beq.s 552e <setGameFilePath+0x234>
    5516:	   |      move.l 1d02e <gamePath>,1010(sp)
    551e:	   |      move.l 1d0c6 <SysBase>,d0
    5524:	   |      movea.l d0,a6
    5526:	   |      movea.l 1010(sp),a1
    552a:	   |      jsr -690(a6)
}
    552e:	   '----> move.l (sp)+,d2
    5530:	          movea.l (sp)+,a6
    5532:	          lea 1104(sp),sp
    5536:	          rts

00005538 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5538:	,-------> lea -16(sp),sp
    553c:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    553e:	|         move.l 24(sp),d0
    5542:	|         move.l d0,-(sp)
    5544:	|         pea 18e30 <PutChar+0xb16>
    554a:	|         jsr 17878 <KPrintF>
    5550:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    5552:	|         move.l 24(sp),-(sp)
    5556:	|         jsr 7602 <pauseFunction>
    555c:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    555e:	|     ,-- bra.s 5570 <abortFunction+0x38>
    5560:	|  ,--|-> moveq #24,d0
    5562:	|  |  |   add.l 24(sp),d0
    5566:	|  |  |   move.l d0,-(sp)
    5568:	|  |  |   jsr 1571c <trimStack>
    556e:	|  |  |   addq.l #4,sp
    5570:	|  |  '-> movea.l 24(sp),a0
    5574:	|  |      move.l 24(a0),d0
    5578:	|  '----- bne.s 5560 <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    557a:	|         movea.l 24(sp),a0
    557e:	|         move.l 4(a0),12(sp)
    5584:	|         move.l 1d0c6 <SysBase>,d0
    558a:	|         movea.l d0,a6
    558c:	|         movea.l 12(sp),a1
    5590:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5594:	|         clr.l 16(sp)
    5598:	|     ,-- bra.s 55b8 <abortFunction+0x80>
    559a:	|  ,--|-> movea.l 24(sp),a0
    559e:	|  |  |   move.l 20(a0),d1
    55a2:	|  |  |   move.l 16(sp),d0
    55a6:	|  |  |   lsl.l #3,d0
    55a8:	|  |  |   add.l d1,d0
    55aa:	|  |  |   move.l d0,-(sp)
    55ac:	|  |  |   jsr 14fe6 <unlinkVar>
    55b2:	|  |  |   addq.l #4,sp
    55b4:	|  |  |   addq.l #1,16(sp)
    55b8:	|  |  '-> movea.l 24(sp),a0
    55bc:	|  |      move.l 8(a0),d0
    55c0:	|  |      cmp.l 16(sp),d0
    55c4:	|  '----- bgt.s 559a <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    55c6:	|         movea.l 24(sp),a0
    55ca:	|         move.l 8(a0),d0
    55ce:	|     ,-- ble.s 55ea <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    55d0:	|     |   movea.l 24(sp),a0
    55d4:	|     |   move.l 20(a0),8(sp)
    55da:	|     |   move.l 1d0c6 <SysBase>,d0
    55e0:	|     |   movea.l d0,a6
    55e2:	|     |   movea.l 8(sp),a1
    55e6:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    55ea:	|     '-> moveq #28,d0
    55ec:	|         add.l 24(sp),d0
    55f0:	|         move.l d0,-(sp)
    55f2:	|         jsr 14fe6 <unlinkVar>
    55f8:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    55fa:	|         movea.l 24(sp),a0
    55fe:	|         move.l 40(a0),d0
    5602:	|     ,-- beq.s 5614 <abortFunction+0xdc>
    5604:	|     |   movea.l 24(sp),a0
    5608:	|     |   move.l 40(a0),d0
    560c:	|     |   move.l d0,-(sp)
    560e:	'-----|-- jsr 5538 <abortFunction>(pc)
    5612:	      |   addq.l #4,sp
	FreeVec(fun);
    5614:	      '-> move.l 24(sp),4(sp)
    561a:	          move.l 1d0c6 <SysBase>,d0
    5620:	          movea.l d0,a6
    5622:	          movea.l 4(sp),a1
    5626:	          jsr -690(a6)
	fun = NULL;
    562a:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    562e:	          pea 18e4a <PutChar+0xb30>
    5634:	          jsr 17878 <KPrintF>
    563a:	          addq.l #4,sp
}
    563c:	          nop
    563e:	          movea.l (sp)+,a6
    5640:	          lea 16(sp),sp
    5644:	          rts

00005646 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5646:	          subq.l #8,sp
	int n = 0;
    5648:	          clr.l 4(sp)
	*killedMyself = FALSE;
    564c:	          movea.l 20(sp),a0
    5650:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5652:	          move.l 1d05e <allRunningFunctions>,(sp)
	while (fun) {
    5658:	   ,----- bra.s 5686 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    565a:	,--|----> movea.l (sp),a0
    565c:	|  |      move.l (a0),d0
    565e:	|  |      cmp.l 12(sp),d0
    5662:	|  |  ,-- bne.s 5680 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5664:	|  |  |   movea.l (sp),a0
    5666:	|  |  |   move.w #1,54(a0)
			n++;
    566c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5670:	|  |  |   move.l (sp),d0
    5672:	|  |  |   cmp.l 16(sp),d0
    5676:	|  |  +-- bne.s 5680 <cancelAFunction+0x3a>
    5678:	|  |  |   movea.l 20(sp),a0
    567c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5680:	|  |  '-> movea.l (sp),a0
    5682:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5686:	|  '----> tst.l (sp)
    5688:	'-------- bne.s 565a <cancelAFunction+0x14>
	}
	return n;
    568a:	          move.l 4(sp),d0
}
    568e:	          addq.l #8,sp
    5690:	          rts

00005692 <completeTimers>:


void completeTimers () {
    5692:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5694:	          move.l 1d05e <allRunningFunctions>,(sp)

	while (thisFunction) {
    569a:	   ,----- bra.s 56b0 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    569c:	,--|----> movea.l (sp),a0
    569e:	|  |      move.b 56(a0),d0
    56a2:	|  |  ,-- bne.s 56aa <completeTimers+0x18>
    56a4:	|  |  |   movea.l (sp),a0
    56a6:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    56aa:	|  |  '-> movea.l (sp),a0
    56ac:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    56b0:	|  '----> tst.l (sp)
    56b2:	'-------- bne.s 569c <completeTimers+0xa>
	}
}
    56b4:	          nop
    56b6:	          nop
    56b8:	          addq.l #4,sp
    56ba:	          rts

000056bc <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    56bc:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    56c0:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    56c6:	                                                             movea.l 80(sp),a0
    56ca:	                                                             move.w 54(a0),d0
    56ce:	,----------------------------------------------------------- beq.w 655c <continueFunction+0xea0>
		abortFunction (fun);
    56d2:	|                                                            move.l 80(sp),-(sp)
    56d6:	|                                                            jsr 5538 <abortFunction>
    56dc:	|                                                            addq.l #4,sp
		return TRUE;
    56de:	|                                                            moveq #1,d0
    56e0:	|  ,-------------------------------------------------------- bra.w 6566 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    56e4:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    56ea:	|  |  |                                                      movea.l 80(sp),a0
    56ee:	|  |  |                                                      move.l 4(a0),d1
    56f2:	|  |  |                                                      movea.l 80(sp),a0
    56f6:	|  |  |                                                      move.l 36(a0),d0
    56fa:	|  |  |                                                      lsl.l #3,d0
    56fc:	|  |  |                                                      movea.l d1,a0
    56fe:	|  |  |                                                      adda.l d0,a0
    5700:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5706:	|  |  |                                                      movea.l 80(sp),a0
    570a:	|  |  |                                                      move.l 4(a0),d1
    570e:	|  |  |                                                      movea.l 80(sp),a0
    5712:	|  |  |                                                      move.l 36(a0),d0
    5716:	|  |  |                                                      lsl.l #3,d0
    5718:	|  |  |                                                      movea.l d1,a0
    571a:	|  |  |                                                      adda.l d0,a0
    571c:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5720:	|  |  |                                                      moveq #41,d0
    5722:	|  |  |                                                      cmp.l 64(sp),d0
    5726:	|  |  |  ,-------------------------------------------------- bcs.w 6510 <continueFunction+0xe54>
    572a:	|  |  |  |                                                   move.l 64(sp),d0
    572e:	|  |  |  |                                                   add.l d0,d0
    5730:	|  |  |  |                                                   movea.l d0,a0
    5732:	|  |  |  |                                                   adda.l #22334,a0
    5738:	|  |  |  |                                                   move.w (a0),d0
    573a:	|  |  |  |                                                   jmp (573e <continueFunction+0x82>,pc,d0.w)
    573e:	|  |  |  |                                                   bset d6,(a2)
    5740:	|  |  |  |                                                   ori.w #2670,(a4)
    5744:	|  |  |  |                                                   eori.w #2416,d6
    5748:	|  |  |  |                                                   bchg d4,d2
    574a:	|  |  |  |                                                   bclr d4,(a4)+
    574c:	|  |  |  |                                                   andi.l #181013194,d4
    5752:	|  |  |  |                                                   .short 0x0aca
    5754:	|  |  |  |                                                   .short 0x0aca
    5756:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    575e:	|  |  |  |                                                   .short 0x0aca
    5760:	|  |  |  |                                                   andi.w #906,-(a4)
    5764:	|  |  |  |                                                   bchg d1,196(a2)
    5768:	|  |  |  |                                                   bset d1,580(a4)
    576c:	|  |  |  |                                                   bclr d1,2576(a2)
    5770:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5776:	|  |  |  |                                                   .short 0x0aca
    5778:	|  |  |  |                                                   eori.l #63572682,d0
    577e:	|  |  |  |                                                   .short 0x0aca
    5780:	|  |  |  |                                                   bchg d3,-(a2)
    5782:	|  |  |  |                                                   bchg #-36,(a2)
    5786:	|  |  |  |                                                   .short 0x08cc
    5788:	|  |  |  |                                                   addi.b #14,1038(a0)
    578e:	|  |  |  |                                                   .short 0x040e
    5790:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5794:	|  |  |  |                                                   ori.w #8232,(a0)
    5798:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    579e:	|  |  |  |                                                   ori.w #12136,(a0)
    57a2:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    57a8:	|  |  |  |                                                   ori.w #12328,(a0)
    57ac:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    57b2:	|  |  |  |                                                   add.l 44(sp),d1
    57b6:	|  |  |  |                                                   moveq #28,d0
    57b8:	|  |  |  |                                                   add.l 80(sp),d0
    57bc:	|  |  |  |                                                   move.l d1,-(sp)
    57be:	|  |  |  |                                                   move.l d0,-(sp)
    57c0:	|  |  |  |                                                   jsr 15252 <copyVariable>
    57c6:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    57c8:	|  |  |  |                                                   move.l 80(sp),-(sp)
    57cc:	|  |  |  |                                                   jsr 656c <finishFunction>
    57d2:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    57d4:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    57da:	|  |  |  |                                                   move.l 80(sp),-(sp)
    57de:	|  |  |  |                                                   jsr 76aa <restartFunction>
    57e4:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    57e6:	|  |  |  |  ,----------------------------------------------- bra.w 6544 <continueFunction+0xe88>
				finishFunction (fun);
    57ea:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    57ee:	|  |  |  |  |                                                jsr 656c <finishFunction>
    57f4:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    57f6:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    57fa:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    57fe:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5802:	|  |  |  |  |                                                movea.l 80(sp),a0
    5806:	|  |  |  |  |                                                move.l 28(a0),d0
    580a:	|  |  |  |  |                                                moveq #2,d1
    580c:	|  |  |  |  |                                                cmp.l d0,d1
    580e:	|  |  |  |  |                                            ,-- beq.s 581a <continueFunction+0x15e>
    5810:	|  |  |  |  |                                            |   moveq #4,d1
    5812:	|  |  |  |  |                                            |   cmp.l d0,d1
    5814:	|  |  |  |  |                                         ,--|-- beq.s 5868 <continueFunction+0x1ac>
    5816:	|  |  |  |  |                                ,--------|--|-- bra.w 5950 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    581a:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    581e:	|  |  |  |  |                                |        |      jsr 7602 <pauseFunction>
    5824:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5826:	|  |  |  |  |                                |        |      moveq #24,d0
    5828:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    582c:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    5830:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5834:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5838:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    583a:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    583e:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    5842:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5844:	|  |  |  |  |                                |        |      jsr 7a06 <startNewFunctionNum>
    584a:	|  |  |  |  |                                |        |      lea 20(sp),sp
    584e:	|  |  |  |  |                                |        |      tst.l d0
    5850:	|  |  |  |  |                                |        |  ,-- bne.s 5858 <continueFunction+0x19c>
    5852:	|  |  |  |  |                                |        |  |   clr.w d0
    5854:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6566 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5858:	|  |  |  |  |                                |        |  '-> move.l 1d05e <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5860:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5864:	|  |  |  |  |                                |  ,-----|----- bra.w 5964 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5868:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    586c:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    5870:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5874:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5878:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    587a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    587c:	|  |  |  |  |                                |  |            jsr 13a7a <callBuiltIn>
    5882:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5886:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    588a:	|  |  |  |  |                                |  |            moveq #5,d0
    588c:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    5890:	|  |  |  |  |                                |  |  ,-------- bcs.w 594c <continueFunction+0x290>
    5894:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    5898:	|  |  |  |  |                                |  |  |         add.l d0,d0
    589a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    589c:	|  |  |  |  |                                |  |  |         adda.l #22696,a0
    58a2:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    58a4:	|  |  |  |  |                                |  |  |         jmp (58a8 <continueFunction+0x1ec>,pc,d0.w)
    58a8:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    58ae:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    58b2:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    58b8:	|  |  |  |  |                                |  |  |         or.w -(a2),d7
    58ba:	|  |  |  |  |                                |  |  |         jsr 17878 <KPrintF>
    58c0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    58c2:	|  |  |  |  |                                |  |  |         clr.w d0
    58c4:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6566 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    58c8:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    58cc:	|  |  |  |  |                                |  |  |         jsr 7602 <pauseFunction>
    58d2:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    58d4:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    58d8:	|  |  |  |  |                                |  |  |  ,----- bra.s 594e <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    58da:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    58de:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    58e2:	|  |  |  |  |                                |  |  |  +----- bra.s 594e <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    58e4:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    58e8:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    58ee:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    58f0:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    58f4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58f8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58fc:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    58fe:	|  |  |  |  |                                |  |  |  |      jsr 1568a <setVariable>
    5904:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5908:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    590c:	|  |  |  |  |                                |  |  |  |      jsr 7602 <pauseFunction>
    5912:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5914:	|  |  |  |  |                                |  |  |  |      move.l 1d096 <noStack>,d1
    591a:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    591e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5920:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5922:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5926:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5928:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    592a:	|  |  |  |  |                                |  |  |  |      jsr 7a06 <startNewFunctionNum>
    5930:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5934:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5936:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 593e <continueFunction+0x282>
    5938:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    593a:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6566 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    593e:	|  |  |  |  |                                |  |  |  |  '-> move.l 1d05e <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5946:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    594a:	|  |  |  |  |                                |  |  |  +----- bra.s 594e <continueFunction+0x292>

						default:
						break;
    594c:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    594e:	|  |  |  |  |                                |  +-----'----X bra.s 5964 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    5950:	|  |  |  |  |                                '--|----------> pea 18ead <PutChar+0xb93>
    5956:	|  |  |  |  |                                   |            jsr 17878 <KPrintF>
    595c:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    595e:	|  |  |  |  |                                   |            clr.w d0
    5960:	|  +--|--|--|-----------------------------------|----------- bra.w 6566 <continueFunction+0xeaa>
			}
			break;
    5964:	|  |  |  |  +-----------------------------------'----------X bra.w 6544 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5968:	|  |  |  |  |                                                moveq #28,d0
    596a:	|  |  |  |  |                                                add.l 80(sp),d0
    596e:	|  |  |  |  |                                                clr.l -(sp)
    5970:	|  |  |  |  |                                                clr.l -(sp)
    5972:	|  |  |  |  |                                                move.l d0,-(sp)
    5974:	|  |  |  |  |                                                jsr 1568a <setVariable>
    597a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    597e:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5982:	|  |  |  |  |                                                move.l 68(sp),d1
    5986:	|  |  |  |  |                                                moveq #28,d0
    5988:	|  |  |  |  |                                                add.l 80(sp),d0
    598c:	|  |  |  |  |                                                move.l d1,-(sp)
    598e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5992:	|  |  |  |  |                                                move.l d0,-(sp)
    5994:	|  |  |  |  |                                                jsr 1568a <setVariable>
    599a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    599e:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    59a2:	|  |  |  |  |                                                move.l 68(sp),d1
    59a6:	|  |  |  |  |                                                moveq #28,d0
    59a8:	|  |  |  |  |                                                add.l 80(sp),d0
    59ac:	|  |  |  |  |                                                move.l d1,-(sp)
    59ae:	|  |  |  |  |                                                pea 1 <_start+0x1>
    59b2:	|  |  |  |  |                                                move.l d0,-(sp)
    59b4:	|  |  |  |  |                                                jsr 1568a <setVariable>
    59ba:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    59be:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    59c2:	|  |  |  |  |                                                moveq #28,d0
    59c4:	|  |  |  |  |                                                add.l 80(sp),d0
    59c8:	|  |  |  |  |                                                movea.l 80(sp),a0
    59cc:	|  |  |  |  |                                                movea.l 20(a0),a0
    59d0:	|  |  |  |  |                                                move.l 68(sp),d1
    59d4:	|  |  |  |  |                                                lsl.l #3,d1
    59d6:	|  |  |  |  |                                                add.l a0,d1
    59d8:	|  |  |  |  |                                                move.l d0,-(sp)
    59da:	|  |  |  |  |                                                move.l d1,-(sp)
    59dc:	|  |  |  |  |                                                jsr 15252 <copyVariable>
    59e2:	|  |  |  |  |                                                addq.l #8,sp
    59e4:	|  |  |  |  |                                                tst.w d0
    59e6:	|  |  |  |  |  ,-------------------------------------------- bne.w 6522 <continueFunction+0xe66>
    59ea:	|  |  |  |  |  |                                             clr.w d0
    59ec:	|  +--|--|--|--|-------------------------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    59f0:	|  |  |  |  |  |                                             moveq #28,d0
    59f2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    59f6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    59f8:	|  |  |  |  |  |                                             jsr 152d8 <getBoolean>
    59fe:	|  |  |  |  |  |                                             addq.l #4,sp
    5a00:	|  |  |  |  |  |                                             tst.w d0
    5a02:	|  |  |  |  |  |                                      ,----- beq.s 5a1e <continueFunction+0x362>
    5a04:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5a08:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5a0c:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5a0e:	|  |  |  |  |  |                                      |      jsr 152d8 <getBoolean>
    5a14:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5a16:	|  |  |  |  |  |                                      |      tst.w d0
    5a18:	|  |  |  |  |  |                                      +----- beq.s 5a1e <continueFunction+0x362>
    5a1a:	|  |  |  |  |  |                                      |      moveq #1,d0
    5a1c:	|  |  |  |  |  |                                      |  ,-- bra.s 5a20 <continueFunction+0x364>
    5a1e:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a20:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a22:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5a26:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a28:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a2c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a2e:	|  |  |  |  |  |                                             jsr 1568a <setVariable>
    5a34:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a38:	|  |  |  |  |  |                                             moveq #24,d0
    5a3a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5a3e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a40:	|  |  |  |  |  |                                             jsr 1571c <trimStack>
    5a46:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5a48:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5a4c:	|  |  |  |  |  |                                             moveq #28,d0
    5a4e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5a52:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a54:	|  |  |  |  |  |                                             jsr 152d8 <getBoolean>
    5a5a:	|  |  |  |  |  |                                             addq.l #4,sp
    5a5c:	|  |  |  |  |  |                                             tst.w d0
    5a5e:	|  |  |  |  |  |                                         ,-- bne.s 5a76 <continueFunction+0x3ba>
    5a60:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5a64:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5a68:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5a6a:	|  |  |  |  |  |                                         |   jsr 152d8 <getBoolean>
    5a70:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5a72:	|  |  |  |  |  |                                         |   tst.w d0
    5a74:	|  |  |  |  |  |                                      ,--|-- beq.s 5a7a <continueFunction+0x3be>
    5a76:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5a78:	|  |  |  |  |  |                                      |  ,-- bra.s 5a7c <continueFunction+0x3c0>
    5a7a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a7c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a7e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5a82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a84:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a88:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a8a:	|  |  |  |  |  |                                             jsr 1568a <setVariable>
    5a90:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a94:	|  |  |  |  |  |                                             moveq #24,d0
    5a96:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5a9a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a9c:	|  |  |  |  |  |                                             jsr 1571c <trimStack>
    5aa2:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5aa4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5aa8:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5aac:	|  |  |  |  |  |                                             moveq #28,d0
    5aae:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5ab2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ab4:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5ab8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aba:	|  |  |  |  |  |                                             jsr 1568a <setVariable>
    5ac0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ac4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5ac8:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5acc:	|  |  |  |  |  |                                             moveq #28,d0
    5ace:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5ad2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ad4:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5ad8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ada:	|  |  |  |  |  |                                             jsr 1568a <setVariable>
    5ae0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ae4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5ae8:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5aec:	|  |  |  |  |  |                                             moveq #28,d0
    5aee:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5af2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5af4:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5af8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5afa:	|  |  |  |  |  |                                             jsr 1568a <setVariable>
    5b00:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b04:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5b08:	|  |  |  |  |  |                                             move.l 1d026 <dialogValue>,d0
    5b0e:	|  |  |  |  |  |                                             moveq #1,d1
    5b10:	|  |  |  |  |  |                                             cmp.l d0,d1
    5b12:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6526 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5b16:	|  |  |  |  |  |  |                                          pea 18ec2 <PutChar+0xba8>
    5b1c:	|  |  |  |  |  |  |                                          jsr 17878 <KPrintF>
    5b22:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5b24:	|  |  |  |  |  |  |                                          clr.w d0
    5b26:	|  +--|--|--|--|--|----------------------------------------- bra.w 6566 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5b2a:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    5b2e:	|  |  |  |  |  |  |                                          moveq #28,d0
    5b30:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5b34:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5b36:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |                                          jsr 14e1c <loadStringToVar>
    5b3e:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5b40:	|  |  |  |  |  |  |                                          tst.w d0
    5b42:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 652a <continueFunction+0xe6e>
					return FALSE;
    5b46:	|  |  |  |  |  |  |  |                                       clr.w d0
    5b48:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5b4c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b50:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5b54:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5b56:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5b58:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5b5a:	|  |  |  |  |  |  |  |                                ,----- beq.s 5bb8 <continueFunction+0x4fc>
    5b5c:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5b5e:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5b60:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5d4c <continueFunction+0x690>
    5b64:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5b66:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5b72 <continueFunction+0x4b6>
    5b68:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5b6a:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5b6c:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5bb8 <continueFunction+0x4fc>
    5b6e:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5d4c <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5b72:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5b74:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5b78:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5ba4 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5b7a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5b7c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5b80:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b82:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b84:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b86:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1568a <setVariable>
    5b8c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5b90:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5b92:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5b96:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b98:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1571c <trimStack>
    5b9e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5ba0:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5d62 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5ba4:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18f03 <PutChar+0xbe9>
    5baa:	|  |  |  |  |  |  |  |              |  |              |      jsr 17878 <KPrintF>
    5bb0:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5bb2:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5bb4:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6566 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5bb8:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    5bbc:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5bc0:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5bc4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5bc6:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5bdc <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5bc8:	|  |  |  |  |  |  |  |              |  |                 |   pea 18f3f <PutChar+0xc25>
    5bce:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17878 <KPrintF>
    5bd4:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5bd6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bd8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6566 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5bdc:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5bde:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5be2:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5be4:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5be8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5bec:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5bee:	|  |  |  |  |  |  |  |              |  |                     jsr 14d98 <getValueType>
    5bf4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5bf8:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5bfa:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c02 <continueFunction+0x546>
    5bfc:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bfe:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6566 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c02:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5c06:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c0a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5c0c:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5c0e:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5c10:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c32 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5c12:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5c16:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5c18:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5c1c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5c20:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5c24:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5c26:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c28:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14a22 <fastArrayGetByIndex>
    5c2e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5c30:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5c52 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5c32:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5c36:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5c38:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5c3c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5c40:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5c44:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5c46:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5c48:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5c4a:	|  |  |  |  |  |  |  |              |  |              |      jsr 156ac <stackGetByIndex>
    5c50:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c52:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5c56:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5c58:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5c5c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5c5e:	|  |  |  |  |  |  |  |              |  |                     jsr 1571c <trimStack>
    5c64:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5c66:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5c6a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c86 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5c6c:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5c6e:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5c72:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c74:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c76:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c78:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1568a <setVariable>
    5c7e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5c82:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5d60 <continueFunction+0x6a4>
						switch (com) {
    5c86:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5c88:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5c8c:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5c9a <continueFunction+0x5de>
    5c8e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5c90:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5c94:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5ce4 <continueFunction+0x628>
    5c96:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5d2c <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5c9a:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5c9e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5ca2:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5ca6:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5ca8:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14d98 <getValueType>
    5cae:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5cb2:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5cb4:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5cbc <continueFunction+0x600>
    5cb6:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5cb8:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5d46 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5cbc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5cbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5cc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5cc4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5cc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5cca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5ccc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1568a <setVariable>
    5cd2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5cd6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5cd8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5cda:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5cde:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5ce2:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5d4a <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5ce4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5ce8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5cec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5cf0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5cf2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14d98 <getValueType>
    5cf8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5cfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5cfe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5d04 <continueFunction+0x648>
    5d00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5d02:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5d46 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d04:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5d06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5d08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5d0c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5d0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d12:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5d14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1568a <setVariable>
    5d1a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5d1e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5d20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5d22:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5d26:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5d2a:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5d4a <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5d2c:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5d2e:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5d32:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5d34:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5d38:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15252 <copyVariable>
    5d3e:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5d40:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5d42:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5d60 <continueFunction+0x6a4>
    5d44:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5d46:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6566 <continueFunction+0xeaa>
				break;
    5d4a:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5d60 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5d4c:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18f5d <PutChar+0xc43>
    5d52:	|  |  |  |  |  |  |  |                 |  |                  jsr 17878 <KPrintF>
    5d58:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5d5a:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5d5c:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6566 <continueFunction+0xeaa>
				break;
    5d60:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5d62:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6544 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5d66:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5d6a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5d6e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5d70:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5d72:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5d74:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5d82 <continueFunction+0x6c6>
    5d76:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5d78:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5d7a:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5e2e <continueFunction+0x772>
    5d7e:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5e8c <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5d82:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5d86:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5d8a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5d8e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5d90:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5da6 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5d92:	|  |  |  |  |  |  |  |                             |  |  |   pea 18f3f <PutChar+0xc25>
    5d98:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17878 <KPrintF>
    5d9e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5da0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5da2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5da6:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5da8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5dac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5dae:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5db2:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5db6:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5db8:	|  |  |  |  |  |  |  |                             |  |      jsr 14d98 <getValueType>
    5dbe:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5dc2:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5dc4:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5dcc <continueFunction+0x710>
    5dc6:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5dc8:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5dcc:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5dd0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5dd4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5dd8:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5dda:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5dde:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5de0:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5de4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5de8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5dec:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5dee:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5df0:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5df2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5df4:	|  |  |  |  |  |  |  |                             |  |      jsr 78b2 <stackSetByIndex>
    5dfa:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5dfe:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e00:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e08 <continueFunction+0x74c>
						return FALSE;
    5e02:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e04:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5e08:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5e0a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5e0e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e10:	|  |  |  |  |  |  |  |                             |  |      jsr 1571c <trimStack>
    5e16:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5e18:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5e1a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5e1e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e20:	|  |  |  |  |  |  |  |                             |  |      jsr 1571c <trimStack>
    5e26:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5e28:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5e2a:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6544 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5e2e:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5e30:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5e34:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e36:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5e3a:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5e3e:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5e40:	|  |  |  |  |  |  |  |                             |         jsr 14d98 <getValueType>
    5e46:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5e4a:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5e4c:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e54 <continueFunction+0x798>
    5e4e:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5e50:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6566 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5e54:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5e58:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5e5a:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5e5e:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5e62:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5e66:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5e68:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e6a:	|  |  |  |  |  |  |  |                             |         jsr 14a22 <fastArrayGetByIndex>
    5e70:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5e72:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5e76:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e86 <continueFunction+0x7ca>
    5e78:	|  |  |  |  |  |  |  |                             |     |   pea 18f81 <PutChar+0xc67>
    5e7e:	|  |  |  |  |  |  |  |                             |     |   jsr 17878 <KPrintF>
    5e84:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5e86:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5e88:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6566 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5e8c:	|  |  |  |  |  |  |  |                             '-------> pea 18f5d <PutChar+0xc43>
    5e92:	|  |  |  |  |  |  |  |                                       jsr 17878 <KPrintF>
    5e98:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5e9a:	|  |  |  |  |  |  |  |                                       clr.w d0
    5e9c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6566 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5ea0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ea4:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ea8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5eac:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5eae:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5eb0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5eb2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5eb6:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5eba:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5ebc:	|  |  |  |  |  |  |  |                                       jsr 14d98 <getValueType>
    5ec2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5ec6:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ec8:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5ed0 <continueFunction+0x814>
    5eca:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5ecc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5ed0:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5ed4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ed6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5eda:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5edc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ee0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ee2:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    5ee8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5eec:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5ef0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5ef2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5ef4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ef8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5efc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5f00:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f02:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f04:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f06:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f0a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f0c:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    5f12:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f16:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5f1a:	|  |  |  |  |  |  |  |                                       move.l 1d074 <globalVars>,d1
    5f20:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5f24:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f26:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f2a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f2e:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5f32:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f34:	|  |  |  |  |  |  |  |                                       jsr 14d98 <getValueType>
    5f3a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f3e:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f40:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f48 <continueFunction+0x88c>
    5f42:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f44:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f48:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5f4c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f4e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5f52:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f54:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f58:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f5a:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    5f60:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5f64:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5f68:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5f6a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5f6c:	|  |  |  |  |  |  |  |                                       movea.l 1d074 <globalVars>,a0
    5f72:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5f76:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f78:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f7a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f7c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f82:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    5f88:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f8c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f90:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5f94:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f98:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5f9c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f9e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5fa0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fa2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fa6:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5faa:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5fac:	|  |  |  |  |  |  |  |                                       jsr 14d98 <getValueType>
    5fb2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5fb6:	|  |  |  |  |  |  |  |                                       tst.w d0
    5fb8:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5fc0 <continueFunction+0x904>
    5fba:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5fbc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5fc0:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5fc4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5fc6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5fca:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fcc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fd0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fd2:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    5fd8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5fdc:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5fe0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fe2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5fe4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5fe8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5fec:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ff0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ff2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ff4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ff6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ffa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ffc:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    6002:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    6006:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    600a:	|  |  |  |  |  |  |  |                                       move.l 1d074 <globalVars>,d1
    6010:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    6014:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6016:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    6018:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    601a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    601e:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    6022:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    6024:	|  |  |  |  |  |  |  |                                       jsr 14d98 <getValueType>
    602a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    602e:	|  |  |  |  |  |  |  |                                       tst.w d0
    6030:	|  |  |  |  |  |  |  |                                   ,-- bne.s 6038 <continueFunction+0x97c>
    6032:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    6034:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    6038:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    603c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    603e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    6042:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6044:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6048:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    604a:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    6050:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    6054:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    6058:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    605a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    605c:	|  |  |  |  |  |  |  |                                       movea.l 1d074 <globalVars>,a0
    6062:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    6066:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6068:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    606a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    606c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6070:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6072:	|  |  |  |  |  |  |  |                                       jsr 1568a <setVariable>
    6078:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    607c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    6080:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    6084:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    6088:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    608c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    608e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    6090:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6092:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    6096:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6098:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    609a:	|  |  |  |  |  |  |  |                                       jsr 15252 <copyVariable>
    60a0:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    60a2:	|  |  |  |  |  |  |  |                                       tst.w d0
    60a4:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 652e <continueFunction+0xe72>
    60a8:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    60aa:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    60ae:	|  |  |  |  |  |  |  |  |                                    move.l 1d074 <globalVars>,d1
    60b4:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    60b8:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    60ba:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    60bc:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    60be:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    60c2:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    60c4:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |                                    jsr 15252 <copyVariable>
    60cc:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    60ce:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    60d0:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6532 <continueFunction+0xe76>
    60d4:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    60d6:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    60da:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    60dc:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    60e0:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1d074 <globalVars>,a0
    60e6:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    60ea:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    60ec:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    60ee:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    60f0:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    60f2:	|  |  |  |  |  |  |  |  |  |                                 jsr 15252 <copyVariable>
    60f8:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    60fa:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    60fc:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6536 <continueFunction+0xe7a>
    6100:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    6102:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    6106:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    6108:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    610c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    610e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    6112:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    6114:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    6116:	|  |  |  |  |  |  |  |  |  |  |                              jsr 145d4 <addVarToStack>
    611c:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    611e:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    6120:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 653a <continueFunction+0xe7e>
    6124:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    6126:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    612a:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    612c:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    6130:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    6132:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    6136:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    6138:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    613a:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1465a <addVarToStackQuick>
    6140:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    6142:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 653e <continueFunction+0xe82>
    6148:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    614a:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6566 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    614e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6150:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 152d8 <getBoolean>
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    615e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6160:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    6166:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    6168:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    616e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    6174:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6176:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1568a <setVariable>
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    6180:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    6184:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6186:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    618c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 152d8 <getBoolean>
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6194:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6196:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6542 <continueFunction+0xe86>
				advanceNow = FALSE;
    619a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    61a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6542 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    61b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    61ba:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6544 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    61be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    61c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    61c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    61ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14d98 <getValueType>
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 61e4 <continueFunction+0xb28>
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    61e0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6566 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    61e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    61ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    61f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1568a <setVariable>
    6200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6204:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6544 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 64fa <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    621a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6296 <continueFunction+0xbda>
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    621e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 62e0 <continueFunction+0xc24>
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 623a <continueFunction+0xb7e>
    622e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    6234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 6268 <continueFunction+0xbac>
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 62e0 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    623a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    6244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    624a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    624c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 146ce <addVariablesInSecond>
    6252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1571c <trimStack>
    6262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 650e <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    6272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    627a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1478c <compareVariablesInSecond>
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    628a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1571c <trimStack>
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 650e <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    62a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    62a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    62a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1478c <compareVariablesInSecond>
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    62b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    62b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1571c <trimStack>
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    62c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    62c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    62d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 650e <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    62f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14d98 <getValueType>
    62fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6308 <continueFunction+0xc4c>
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6304:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6566 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14d98 <getValueType>
    6320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 632e <continueFunction+0xc72>
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    632a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6566 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    632e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1571c <trimStack>
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    633e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    6340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 650c <continueFunction+0xe50>
    634c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    634e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    6350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25436,a0
    6356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (635c <continueFunction+0xca0>,pc,d0.w)
    635c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    6360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    636a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    636c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    637c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    638c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18204 <__mulsi3>
    639e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    63a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    63a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    63a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    63b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    63be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    63c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    63c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    63ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    63dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    63e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    63e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    63ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 182b0 <__modsi3>
    63f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    63f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    63fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    640e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    641a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    641e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18282 <__divsi3>
    6428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    642a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    642c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    642e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    643a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    6440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    644c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    645a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    645c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    646e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    647a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    647e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    648a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    648e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    649c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    64a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    64ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    64c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    64ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    64da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    64e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1568a <setVariable>
    64f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    64fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18fa2 <PutChar+0xc88>
    6500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17878 <KPrintF>
    6506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    650a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6566 <continueFunction+0xeaa>
						break;
    650c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    650e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6544 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    6510:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18fba <PutChar+0xca0>
    6516:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17878 <KPrintF>
    651c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    651e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    6520:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6566 <continueFunction+0xeaa>
			break;
    6522:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6524:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    6526:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6528:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    652a:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    652c:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    652e:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    6530:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    6532:	|  |  |     |              '--|--|--|--|-------------------> nop
    6534:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    6536:	|  |  |     |                 '--|--|--|-------------------> nop
    6538:	|  |  |     +--------------------|--|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    653a:	|  |  |     |                    '--|--|-------------------> nop
    653c:	|  |  |     +-----------------------|--|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    653e:	|  |  |     |                       '--|-------------------> nop
    6540:	|  |  |     +--------------------------|-------------------- bra.s 6544 <continueFunction+0xe88>
			break;
    6542:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6544:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    6548:	+--|--|----------------------------------------------------- beq.s 655c <continueFunction+0xea0>
    654a:	|  |  |                                                      movea.l 80(sp),a0
    654e:	|  |  |                                                      move.l 36(a0),d0
    6552:	|  |  |                                                      addq.l #1,d0
    6554:	|  |  |                                                      movea.l 80(sp),a0
    6558:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    655c:	'--|--|----------------------------------------------------> tst.w 74(sp)
    6560:	   |  '----------------------------------------------------- bne.w 56e4 <continueFunction+0x28>

	}
	return TRUE;
    6564:	   |                                                         moveq #1,d0
}
    6566:	   '-------------------------------------------------------> lea 76(sp),sp
    656a:	                                                             rts

0000656c <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    656c:	    move.l 4(sp),d0
    6570:	    move.l d0,-(sp)
    6572:	    pea 18fe6 <PutChar+0xccc>
    6578:	    jsr 17878 <KPrintF>
    657e:	    addq.l #8,sp

	pauseFunction (fun);
    6580:	    move.l 4(sp),-(sp)
    6584:	    jsr 7602 <pauseFunction>
    658a:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    658c:	    movea.l 1ca36 <currentEvents>,a0
    6592:	    move.l 20(a0),d0
    6596:	    cmp.l 4(sp),d0
    659a:	,-- beq.s 65a8 <finishFunction+0x3c>
		unloadFunction (fun);
    659c:	|   move.l 4(sp),-(sp)
    65a0:	|   jsr 7ab2 <unloadFunction>
    65a6:	|   addq.l #4,sp
	}	
}
    65a8:	'-> nop
    65aa:	    rts

000065ac <freezeSubs>:

void freezeSubs () {
    65ac:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    65ae:	          move.l 1d05e <allRunningFunctions>,(sp)

	while (thisFunction) {
    65b4:	   ,----- bra.s 65d2 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    65b6:	,--|----> movea.l (sp),a0
    65b8:	|  |      move.w 52(a0),d0
    65bc:	|  |  ,-- bne.s 65cc <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    65be:	|  |  |   movea.l (sp),a0
    65c0:	|  |  |   move.b 56(a0),d0
    65c4:	|  |  |   addq.b #1,d0
    65c6:	|  |  |   movea.l (sp),a0
    65c8:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    65cc:	|  |  '-> movea.l (sp),a0
    65ce:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    65d2:	|  '----> tst.l (sp)
    65d4:	'-------- bne.s 65b6 <freezeSubs+0xa>
	}
}
    65d6:	          nop
    65d8:	          nop
    65da:	          addq.l #4,sp
    65dc:	          rts

000065de <handleInput>:

BOOL handleInput () {
    65de:	             lea -16(sp),sp
    65e2:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    65e4:	             move.l 1d1d6 <overRegion>,d0
    65ea:	         ,-- bne.s 65f2 <handleInput+0x14>
    65ec:	         |   jsr 15fd4 <getOverRegion>

	if (input.justMoved) {
    65f2:	         '-> move.w 1d07c <input+0x4>,d0
    65f8:	         ,-- beq.s 6636 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    65fa:	         |   movea.l 1ca36 <currentEvents>,a0
    6600:	         |   move.l 16(a0),d0
    6604:	         +-- beq.s 6636 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6606:	         |   move.l 1d096 <noStack>,d1
    660c:	         |   movea.l 1ca36 <currentEvents>,a0
    6612:	         |   move.l 16(a0),d0
    6616:	         |   pea 1 <_start+0x1>
    661a:	         |   move.l d1,-(sp)
    661c:	         |   clr.l -(sp)
    661e:	         |   clr.l -(sp)
    6620:	         |   move.l d0,-(sp)
    6622:	         |   jsr 7a06 <startNewFunctionNum>
    6628:	         |   lea 20(sp),sp
    662c:	         |   tst.l d0
    662e:	         +-- bne.s 6636 <handleInput+0x58>
    6630:	         |   clr.w d0
    6632:	,--------|-- bra.w 683c <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6636:	|        '-> clr.w 1d07c <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    663c:	|            move.l 1d08e <lastRegion>,d1
    6642:	|            move.l 1d1d6 <overRegion>,d0
    6648:	|            cmp.l d1,d0
    664a:	|  ,-------- beq.w 6722 <handleInput+0x144>
    664e:	|  |         movea.l 1ca36 <currentEvents>,a0
    6654:	|  |         move.l 20(a0),d0
    6658:	|  +-------- beq.w 6722 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    665c:	|  |         moveq #12,d0
    665e:	|  |         move.l d0,16(sp)
    6662:	|  |         clr.l 12(sp)
    6666:	|  |         move.l 1d0c6 <SysBase>,d0
    666c:	|  |         movea.l d0,a6
    666e:	|  |         move.l 16(sp),d0
    6672:	|  |         move.l 12(sp),d1
    6676:	|  |         jsr -684(a6)
    667a:	|  |         move.l d0,8(sp)
    667e:	|  |         move.l 8(sp),d0
    6682:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6686:	|  |         move.l 4(sp),d0
    668a:	|  |     ,-- bne.s 66a0 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    668c:	|  |     |   pea 19001 <PutChar+0xce7>
    6692:	|  |     |   jsr 17878 <KPrintF>
    6698:	|  |     |   addq.l #4,sp
			return FALSE;
    669a:	|  |     |   clr.w d0
    669c:	+--|-----|-- bra.w 683c <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    66a0:	|  |     '-> movea.l 4(sp),a0
    66a4:	|  |         clr.l (a0)
		if (overRegion) {
    66a6:	|  |         move.l 1d1d6 <overRegion>,d0
    66ac:	|  |  ,----- beq.s 66d4 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    66ae:	|  |  |      movea.l 1d1d6 <overRegion>,a0
    66b4:	|  |  |      movea.l 28(a0),a0
    66b8:	|  |  |      move.l 4(a0),d1
    66bc:	|  |  |      move.l 4(sp),d0
    66c0:	|  |  |      move.l d1,-(sp)
    66c2:	|  |  |      pea 7 <_start+0x7>
    66c6:	|  |  |      move.l d0,-(sp)
    66c8:	|  |  |      jsr 1568a <setVariable>
    66ce:	|  |  |      lea 12(sp),sp
    66d2:	|  |  |  ,-- bra.s 66ea <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    66d4:	|  |  '--|-> move.l 4(sp),d0
    66d8:	|  |     |   clr.l -(sp)
    66da:	|  |     |   pea 1 <_start+0x1>
    66de:	|  |     |   move.l d0,-(sp)
    66e0:	|  |     |   jsr 1568a <setVariable>
    66e6:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    66ea:	|  |     '-> movea.l 4(sp),a0
    66ee:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    66f2:	|  |         movea.l 1ca36 <currentEvents>,a0
    66f8:	|  |         move.l 20(a0),d0
    66fc:	|  |         pea 1 <_start+0x1>
    6700:	|  |         lea 8(sp),a0
    6704:	|  |         move.l a0,-(sp)
    6706:	|  |         clr.l -(sp)
    6708:	|  |         pea 1 <_start+0x1>
    670c:	|  |         move.l d0,-(sp)
    670e:	|  |         jsr 78f6 <startNewFunctionLoaded>
    6714:	|  |         lea 20(sp),sp
    6718:	|  |         tst.l d0
    671a:	|  +-------- bne.s 6722 <handleInput+0x144>
    671c:	|  |         clr.w d0
    671e:	+--|-------- bra.w 683c <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6722:	|  '-------> move.w 1d07e <input+0x6>,d0
    6728:	|        ,-- beq.s 6766 <handleInput+0x188>
    672a:	|        |   movea.l 1ca36 <currentEvents>,a0
    6730:	|        |   move.l 4(a0),d0
    6734:	|        +-- beq.s 6766 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6736:	|        |   move.l 1d096 <noStack>,d1
    673c:	|        |   movea.l 1ca36 <currentEvents>,a0
    6742:	|        |   move.l 4(a0),d0
    6746:	|        |   pea 1 <_start+0x1>
    674a:	|        |   move.l d1,-(sp)
    674c:	|        |   clr.l -(sp)
    674e:	|        |   clr.l -(sp)
    6750:	|        |   move.l d0,-(sp)
    6752:	|        |   jsr 7a06 <startNewFunctionNum>
    6758:	|        |   lea 20(sp),sp
    675c:	|        |   tst.l d0
    675e:	|        +-- bne.s 6766 <handleInput+0x188>
    6760:	|        |   clr.w d0
    6762:	+--------|-- bra.w 683c <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6766:	|        '-> move.w 1d080 <input+0x8>,d0
    676c:	|        ,-- beq.s 67aa <handleInput+0x1cc>
    676e:	|        |   movea.l 1ca36 <currentEvents>,a0
    6774:	|        |   move.l 12(a0),d0
    6778:	|        +-- beq.s 67aa <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    677a:	|        |   move.l 1d096 <noStack>,d1
    6780:	|        |   movea.l 1ca36 <currentEvents>,a0
    6786:	|        |   move.l 12(a0),d0
    678a:	|        |   pea 1 <_start+0x1>
    678e:	|        |   move.l d1,-(sp)
    6790:	|        |   clr.l -(sp)
    6792:	|        |   clr.l -(sp)
    6794:	|        |   move.l d0,-(sp)
    6796:	|        |   jsr 7a06 <startNewFunctionNum>
    679c:	|        |   lea 20(sp),sp
    67a0:	|        |   tst.l d0
    67a2:	|        +-- bne.s 67aa <handleInput+0x1cc>
    67a4:	|        |   clr.w d0
    67a6:	+--------|-- bra.w 683c <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    67aa:	|        '-> move.w 1d078 <input>,d0
    67b0:	|        ,-- beq.s 67e8 <handleInput+0x20a>
    67b2:	|        |   movea.l 1ca36 <currentEvents>,a0
    67b8:	|        |   move.l (a0),d0
    67ba:	|        +-- beq.s 67e8 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67bc:	|        |   move.l 1d096 <noStack>,d1
    67c2:	|        |   movea.l 1ca36 <currentEvents>,a0
    67c8:	|        |   move.l (a0),d0
    67ca:	|        |   pea 1 <_start+0x1>
    67ce:	|        |   move.l d1,-(sp)
    67d0:	|        |   clr.l -(sp)
    67d2:	|        |   clr.l -(sp)
    67d4:	|        |   move.l d0,-(sp)
    67d6:	|        |   jsr 7a06 <startNewFunctionNum>
    67dc:	|        |   lea 20(sp),sp
    67e0:	|        |   tst.l d0
    67e2:	|        +-- bne.s 67e8 <handleInput+0x20a>
    67e4:	|        |   clr.w d0
    67e6:	+--------|-- bra.s 683c <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    67e8:	|        '-> move.w 1d07a <input+0x2>,d0
    67ee:	|        ,-- beq.s 682a <handleInput+0x24c>
    67f0:	|        |   movea.l 1ca36 <currentEvents>,a0
    67f6:	|        |   move.l 8(a0),d0
    67fa:	|        +-- beq.s 682a <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67fc:	|        |   move.l 1d096 <noStack>,d1
    6802:	|        |   movea.l 1ca36 <currentEvents>,a0
    6808:	|        |   move.l 8(a0),d0
    680c:	|        |   pea 1 <_start+0x1>
    6810:	|        |   move.l d1,-(sp)
    6812:	|        |   clr.l -(sp)
    6814:	|        |   clr.l -(sp)
    6816:	|        |   move.l d0,-(sp)
    6818:	|        |   jsr 7a06 <startNewFunctionNum>
    681e:	|        |   lea 20(sp),sp
    6822:	|        |   tst.l d0
    6824:	|        +-- bne.s 682a <handleInput+0x24c>
    6826:	|        |   clr.w d0
    6828:	+--------|-- bra.s 683c <handleInput+0x25e>
	}

	lastRegion = overRegion;
    682a:	|        '-> move.l 1d1d6 <overRegion>,d0
    6830:	|            move.l d0,1d08e <lastRegion>
	return runSludge ();
    6836:	|            jsr 76c4 <runSludge>
}
    683c:	'----------> movea.l (sp)+,a6
    683e:	             lea 16(sp),sp
    6842:	             rts

00006844 <initSludge>:

BOOL initSludge (char * filename) {
    6844:	             lea -292(sp),sp
    6848:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    684c:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    6850:	             jsr b282 <makeNullAnim>
    6856:	             move.l d0,1cfc0 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    685c:	             pea 1d070 <gameVersion>
    6862:	             pea 19037 <PutChar+0xd1d>
    6868:	             pea 45 <_start+0x45>
    686c:	             pea 47 <_start+0x47>
    6870:	             move.l 332(sp),-(sp)
    6874:	             jsr 7292 <openAndVerify>
    687a:	             lea 20(sp),sp
    687e:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6882:	         ,-- bne.s 688a <initSludge+0x46>
    6884:	         |   clr.w d0
    6886:	,--------|-- bra.w 6fb2 <initSludge+0x76e>
	if (FGetC (fp)) {
    688a:	|        '-> move.l 288(sp),284(sp)
    6890:	|            move.l 1d0ce <DOSBase>,d0
    6896:	|            movea.l d0,a6
    6898:	|            move.l 284(sp),d1
    689c:	|            jsr -306(a6)
    68a0:	|            move.l d0,280(sp)
    68a4:	|            move.l 280(sp),d0
    68a8:	|  ,-------- beq.w 6a52 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    68ac:	|  |         move.l 288(sp),-(sp)
    68b0:	|  |         jsr 6bc <get2bytes>
    68b6:	|  |         addq.l #4,sp
    68b8:	|  |         move.l d0,1d09a <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    68be:	|  |         move.l 1d09a <numBIFNames>,d0
    68c4:	|  |         move.l d0,276(sp)
    68c8:	|  |         clr.l 272(sp)
    68cc:	|  |         move.l 1d0c6 <SysBase>,d0
    68d2:	|  |         movea.l d0,a6
    68d4:	|  |         move.l 276(sp),d0
    68d8:	|  |         move.l 272(sp),d1
    68dc:	|  |         jsr -684(a6)
    68e0:	|  |         move.l d0,268(sp)
    68e4:	|  |         move.l 268(sp),d0
    68e8:	|  |         move.l d0,1d056 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    68ee:	|  |         move.l 1d056 <allBIFNames>,d0
    68f4:	|  |     ,-- bne.s 68fc <initSludge+0xb8>
    68f6:	|  |     |   clr.w d0
    68f8:	+--|-----|-- bra.w 6fb2 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    68fc:	|  |     '-> clr.l 304(sp)
    6900:	|  |     ,-- bra.s 6926 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6902:	|  |  ,--|-> move.l 1d056 <allBIFNames>,d1
    6908:	|  |  |  |   move.l 304(sp),d0
    690c:	|  |  |  |   add.l d0,d0
    690e:	|  |  |  |   add.l d0,d0
    6910:	|  |  |  |   movea.l d1,a2
    6912:	|  |  |  |   adda.l d0,a2
    6914:	|  |  |  |   move.l 288(sp),-(sp)
    6918:	|  |  |  |   jsr b02 <readString>
    691e:	|  |  |  |   addq.l #4,sp
    6920:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6922:	|  |  |  |   addq.l #1,304(sp)
    6926:	|  |  |  '-> move.l 1d09a <numBIFNames>,d0
    692c:	|  |  |      cmp.l 304(sp),d0
    6930:	|  |  '----- bgt.s 6902 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    6932:	|  |         move.l 288(sp),-(sp)
    6936:	|  |         jsr 6bc <get2bytes>
    693c:	|  |         addq.l #4,sp
    693e:	|  |         move.l d0,1d0a6 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6944:	|  |         move.l 1d0a6 <numUserFunc>,d0
    694a:	|  |         move.l d0,264(sp)
    694e:	|  |         clr.l 260(sp)
    6952:	|  |         move.l 1d0c6 <SysBase>,d0
    6958:	|  |         movea.l d0,a6
    695a:	|  |         move.l 264(sp),d0
    695e:	|  |         move.l 260(sp),d1
    6962:	|  |         jsr -684(a6)
    6966:	|  |         move.l d0,256(sp)
    696a:	|  |         move.l 256(sp),d0
    696e:	|  |         move.l d0,1d062 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6974:	|  |         move.l 1d062 <allUserFunc>,d0
    697a:	|  |     ,-- bne.s 6982 <initSludge+0x13e>
    697c:	|  |     |   clr.w d0
    697e:	+--|-----|-- bra.w 6fb2 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6982:	|  |     '-> clr.l 300(sp)
    6986:	|  |     ,-- bra.s 69ac <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6988:	|  |  ,--|-> move.l 1d062 <allUserFunc>,d1
    698e:	|  |  |  |   move.l 300(sp),d0
    6992:	|  |  |  |   add.l d0,d0
    6994:	|  |  |  |   add.l d0,d0
    6996:	|  |  |  |   movea.l d1,a2
    6998:	|  |  |  |   adda.l d0,a2
    699a:	|  |  |  |   move.l 288(sp),-(sp)
    699e:	|  |  |  |   jsr b02 <readString>
    69a4:	|  |  |  |   addq.l #4,sp
    69a6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    69a8:	|  |  |  |   addq.l #1,300(sp)
    69ac:	|  |  |  '-> move.l 1d0a6 <numUserFunc>,d0
    69b2:	|  |  |      cmp.l 300(sp),d0
    69b6:	|  |  '----- bgt.s 6988 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    69b8:	|  |         move.l 1d070 <gameVersion>,d0
    69be:	|  |         cmpi.l #258,d0
    69c4:	|  +-------- ble.w 6a52 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    69c8:	|  |         move.l 288(sp),-(sp)
    69cc:	|  |         jsr 6bc <get2bytes>
    69d2:	|  |         addq.l #4,sp
    69d4:	|  |         move.l d0,1d0a2 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    69da:	|  |         move.l 1d0a2 <numResourceNames>,d0
    69e0:	|  |         add.l d0,d0
    69e2:	|  |         add.l d0,d0
    69e4:	|  |         move.l d0,252(sp)
    69e8:	|  |         clr.l 248(sp)
    69ec:	|  |         move.l 1d0c6 <SysBase>,d0
    69f2:	|  |         movea.l d0,a6
    69f4:	|  |         move.l 252(sp),d0
    69f8:	|  |         move.l 248(sp),d1
    69fc:	|  |         jsr -684(a6)
    6a00:	|  |         move.l d0,244(sp)
    6a04:	|  |         move.l 244(sp),d0
    6a08:	|  |         move.l d0,1d05a <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6a0e:	|  |         move.l 1d05a <allResourceNames>,d0
    6a14:	|  |     ,-- bne.s 6a1c <initSludge+0x1d8>
    6a16:	|  |     |   clr.w d0
    6a18:	+--|-----|-- bra.w 6fb2 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a1c:	|  |     '-> clr.l 296(sp)
    6a20:	|  |     ,-- bra.s 6a46 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6a22:	|  |  ,--|-> move.l 1d05a <allResourceNames>,d1
    6a28:	|  |  |  |   move.l 296(sp),d0
    6a2c:	|  |  |  |   add.l d0,d0
    6a2e:	|  |  |  |   add.l d0,d0
    6a30:	|  |  |  |   movea.l d1,a2
    6a32:	|  |  |  |   adda.l d0,a2
    6a34:	|  |  |  |   move.l 288(sp),-(sp)
    6a38:	|  |  |  |   jsr b02 <readString>
    6a3e:	|  |  |  |   addq.l #4,sp
    6a40:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a42:	|  |  |  |   addq.l #1,296(sp)
    6a46:	|  |  |  '-> move.l 1d0a2 <numResourceNames>,d0
    6a4c:	|  |  |      cmp.l 296(sp),d0
    6a50:	|  |  '----- bgt.s 6a22 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6a52:	|  '-------> move.l #129,1d082 <input+0xa>
	input.mouseY = 100;
    6a5c:	|            moveq #100,d0
    6a5e:	|            move.l d0,1d086 <input+0xe>
	winWidth = get2bytes (fp);
    6a64:	|            move.l 288(sp),-(sp)
    6a68:	|            jsr 6bc <get2bytes>
    6a6e:	|            addq.l #4,sp
    6a70:	|            move.l d0,1d01a <winWidth>
	winHeight = get2bytes (fp);
    6a76:	|            move.l 288(sp),-(sp)
    6a7a:	|            jsr 6bc <get2bytes>
    6a80:	|            addq.l #4,sp
    6a82:	|            move.l d0,1d01e <winHeight>
	specialSettings = FGetC (fp);
    6a88:	|            move.l 288(sp),240(sp)
    6a8e:	|            move.l 1d0ce <DOSBase>,d0
    6a94:	|            movea.l d0,a6
    6a96:	|            move.l 240(sp),d1
    6a9a:	|            jsr -306(a6)
    6a9e:	|            move.l d0,236(sp)
    6aa2:	|            move.l 236(sp),d0
    6aa6:	|            move.l d0,1d0aa <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6aac:	|            move.l 288(sp),232(sp)
    6ab2:	|            move.l 1d0ce <DOSBase>,d0
    6ab8:	|            movea.l d0,a6
    6aba:	|            move.l 232(sp),d1
    6abe:	|            jsr -306(a6)
    6ac2:	|            move.l d0,228(sp)
    6ac6:	|            move.l 228(sp),d0
    6aca:	|            move.l d0,-(sp)
    6acc:	|            pea 3e8 <encodeFilename+0xea>
    6ad0:	|            jsr 18282 <__divsi3>
    6ad6:	|            addq.l #8,sp
    6ad8:	|            move.l d0,1ca48 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6ade:	|            move.l 288(sp),-(sp)
    6ae2:	|            jsr b02 <readString>
    6ae8:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6aea:	|            move.l 288(sp),224(sp)
    6af0:	|            move.l #118888,220(sp)
    6af8:	|            moveq #8,d1
    6afa:	|            move.l d1,216(sp)
    6afe:	|            moveq #1,d0
    6b00:	|            move.l d0,212(sp)
    6b04:	|            move.l 1d0ce <DOSBase>,d0
    6b0a:	|            movea.l d0,a6
    6b0c:	|            move.l 224(sp),d1
    6b10:	|            move.l 220(sp),d2
    6b14:	|            move.l 216(sp),d3
    6b18:	|            move.l 212(sp),d4
    6b1c:	|            jsr -324(a6)
    6b20:	|            move.l d0,208(sp)
    6b24:	|            move.l 208(sp),d0
    6b28:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6b2c:	|            moveq #1,d1
    6b2e:	|            cmp.l 204(sp),d1
    6b32:	|        ,-- beq.s 6b42 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6b34:	|        |   pea 19070 <PutChar+0xd56>
    6b3a:	|        |   jsr 17878 <KPrintF>
    6b40:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6b42:	|        '-> move.l 1d070 <gameVersion>,d0
    6b48:	|            cmpi.l #258,d0
    6b4e:	|        ,-- ble.s 6b5e <initSludge+0x31a>
    6b50:	|        |   move.l 288(sp),-(sp)
    6b54:	|        |   jsr b02 <readString>
    6b5a:	|        |   addq.l #4,sp
    6b5c:	|     ,--|-- bra.s 6b72 <initSludge+0x32e>
    6b5e:	|     |  '-> pea 1908e <PutChar+0xd74>
    6b64:	|     |      pea 1908e <PutChar+0xd74>
    6b6a:	|     |      jsr 142c4 <joinStrings>
    6b70:	|     |      addq.l #8,sp
    6b72:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6b76:	|            move.l 1d070 <gameVersion>,d0
    6b7c:	|            cmpi.l #258,d0
    6b82:	|     ,----- ble.s 6ba4 <initSludge+0x360>
    6b84:	|     |      move.l 288(sp),196(sp)
    6b8a:	|     |      move.l 1d0ce <DOSBase>,d0
    6b90:	|     |      movea.l d0,a6
    6b92:	|     |      move.l 196(sp),d1
    6b96:	|     |      jsr -306(a6)
    6b9a:	|     |      move.l d0,192(sp)
    6b9e:	|     |      move.l 192(sp),d0
    6ba2:	|     |  ,-- bra.s 6ba6 <initSludge+0x362>
    6ba4:	|     '--|-> moveq #0,d0
    6ba6:	|        '-> move.l d0,1d1a2 <gameSettings+0x4>
	makeLanguageTable (fp);
    6bac:	|            move.l 288(sp),-(sp)
    6bb0:	|            jsr 13c7a <makeLanguageTable>
    6bb6:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6bb8:	|            move.l 1d070 <gameVersion>,d0
    6bbe:	|            cmpi.l #261,d0
    6bc4:	|        ,-- ble.s 6c12 <initSludge+0x3ce>
	{
		FGetC(fp);
    6bc6:	|        |   move.l 288(sp),188(sp)
    6bcc:	|        |   move.l 1d0ce <DOSBase>,d0
    6bd2:	|        |   movea.l d0,a6
    6bd4:	|        |   move.l 188(sp),d1
    6bd8:	|        |   jsr -306(a6)
    6bdc:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6be0:	|        |   move.l 288(sp),180(sp)
    6be6:	|        |   move.l 1d0ce <DOSBase>,d0
    6bec:	|        |   movea.l d0,a6
    6bee:	|        |   move.l 180(sp),d1
    6bf2:	|        |   jsr -306(a6)
    6bf6:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6bfa:	|        |   move.l 288(sp),-(sp)
    6bfe:	|        |   jsr 7d8 <getFloat>
    6c04:	|        |   addq.l #4,sp
		getFloat (fp);
    6c06:	|        |   move.l 288(sp),-(sp)
    6c0a:	|        |   jsr 7d8 <getFloat>
    6c10:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6c12:	|        '-> move.l 288(sp),-(sp)
    6c16:	|            jsr b02 <readString>
    6c1c:	|            addq.l #4,sp
    6c1e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6c22:	|            pea 1908f <PutChar+0xd75>
    6c28:	|            move.l 176(sp),-(sp)
    6c2c:	|            jsr 14244 <strcmp>
    6c32:	|            addq.l #8,sp
    6c34:	|            tst.l d0
    6c36:	|        ,-- beq.s 6c3e <initSludge+0x3fa>
		return FALSE;
    6c38:	|        |   clr.w d0
    6c3a:	+--------|-- bra.w 6fb2 <initSludge+0x76e>
	}
	FreeVec( checker);
    6c3e:	|        '-> move.l 172(sp),168(sp)
    6c44:	|            move.l 1d0c6 <SysBase>,d0
    6c4a:	|            movea.l d0,a6
    6c4c:	|            movea.l 168(sp),a1
    6c50:	|            jsr -690(a6)
	checker = NULL;
    6c54:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6c58:	|            move.l 288(sp),164(sp)
    6c5e:	|            move.l 1d0ce <DOSBase>,d0
    6c64:	|            movea.l d0,a6
    6c66:	|            move.l 164(sp),d1
    6c6a:	|            jsr -306(a6)
    6c6e:	|            move.l d0,160(sp)
    6c72:	|            move.l 160(sp),d0
    6c76:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6c7a:	|            moveq #0,d0
    6c7c:	|            move.b 159(sp),d0
    6c80:	|            moveq #1,d1
    6c82:	|            and.l d1,d0
    6c84:	|        ,-- beq.s 6cdc <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6c86:	|        |   move.l 1d0ce <DOSBase>,d0
    6c8c:	|        |   movea.l d0,a6
    6c8e:	|        |   jsr -60(a6)
    6c92:	|        |   move.l d0,38(sp)
    6c96:	|        |   move.l 38(sp),d0
    6c9a:	|        |   move.l d0,34(sp)
    6c9e:	|        |   move.l #102551,30(sp)
    6ca6:	|        |   moveq #54,d0
    6ca8:	|        |   move.l d0,26(sp)
    6cac:	|        |   move.l 1d0ce <DOSBase>,d0
    6cb2:	|        |   movea.l d0,a6
    6cb4:	|        |   move.l 34(sp),d1
    6cb8:	|        |   move.l 30(sp),d2
    6cbc:	|        |   move.l 26(sp),d3
    6cc0:	|        |   jsr -48(a6)
    6cc4:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6cc8:	|        |   pea 190ce <PutChar+0xdb4>
    6cce:	|        |   jsr 17878 <KPrintF>
    6cd4:	|        |   addq.l #4,sp
		return FALSE;
    6cd6:	|        |   clr.w d0
    6cd8:	+--------|-- bra.w 6fb2 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6cdc:	|        '-> move.l 288(sp),-(sp)
    6ce0:	|            jsr 6bc <get2bytes>
    6ce6:	|            addq.l #4,sp
    6ce8:	|            move.l d0,1d09e <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6cee:	|            move.l 1d09e <numGlobals>,d0
    6cf4:	|            lsl.l #3,d0
    6cf6:	|            move.l d0,154(sp)
    6cfa:	|            clr.l 150(sp)
    6cfe:	|            move.l 1d0c6 <SysBase>,d0
    6d04:	|            movea.l d0,a6
    6d06:	|            move.l 154(sp),d0
    6d0a:	|            move.l 150(sp),d1
    6d0e:	|            jsr -684(a6)
    6d12:	|            move.l d0,146(sp)
    6d16:	|            move.l 146(sp),d0
    6d1a:	|            move.l d0,1d074 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6d20:	|            move.l 1d074 <globalVars>,d0
    6d26:	|        ,-- bne.s 6d44 <initSludge+0x500>
    6d28:	|        |   move.l 1d09e <numGlobals>,d0
    6d2e:	|        +-- ble.s 6d44 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6d30:	|        |   pea 19106 <PutChar+0xdec>
    6d36:	|        |   jsr 17878 <KPrintF>
    6d3c:	|        |   addq.l #4,sp
		return FALSE;
    6d3e:	|        |   clr.w d0
    6d40:	+--------|-- bra.w 6fb2 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6d44:	|        '-> clr.l 308(sp)
    6d48:	|        ,-- bra.s 6d60 <initSludge+0x51c>
    6d4a:	|     ,--|-> move.l 1d074 <globalVars>,d1
    6d50:	|     |  |   move.l 308(sp),d0
    6d54:	|     |  |   lsl.l #3,d0
    6d56:	|     |  |   movea.l d1,a0
    6d58:	|     |  |   adda.l d0,a0
    6d5a:	|     |  |   clr.l (a0)
    6d5c:	|     |  |   addq.l #1,308(sp)
    6d60:	|     |  '-> move.l 1d09e <numGlobals>,d0
    6d66:	|     |      cmp.l 308(sp),d0
    6d6a:	|     '----- bgt.s 6d4a <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6d6c:	|            move.l 1d1a2 <gameSettings+0x4>,d0
    6d72:	|            clr.l -(sp)
    6d74:	|            move.l d0,-(sp)
    6d76:	|            move.l 296(sp),-(sp)
    6d7a:	|            jsr 7ef4 <setFileIndices>
    6d80:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6d84:	|            pea 1 <_start+0x1>
    6d88:	|            jsr 7bae <getNumberedString>
    6d8e:	|            addq.l #4,sp
    6d90:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6d94:	|            move.l 142(sp),-(sp)
    6d98:	|            jsr 2fe <encodeFilename>
    6d9e:	|            addq.l #4,sp
    6da0:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6da4:	|            move.l 142(sp),134(sp)
    6daa:	|            move.l 1d0c6 <SysBase>,d0
    6db0:	|            movea.l d0,a6
    6db2:	|            movea.l 134(sp),a1
    6db6:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6dba:	|            move.l 138(sp),130(sp)
    6dc0:	|            move.l 1d0ce <DOSBase>,d0
    6dc6:	|            movea.l d0,a6
    6dc8:	|            move.l 130(sp),d1
    6dcc:	|            jsr -120(a6)
    6dd0:	|            move.l d0,126(sp)
    6dd4:	|            move.l 126(sp),d0
    6dd8:	|            move.l d0,292(sp)
	if(lock == 0) {
    6ddc:	|        ,-- bne.s 6e0a <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6dde:	|        |   move.l 138(sp),122(sp)
    6de4:	|        |   moveq #-2,d1
    6de6:	|        |   move.l d1,118(sp)
    6dea:	|        |   move.l 1d0ce <DOSBase>,d0
    6df0:	|        |   movea.l d0,a6
    6df2:	|        |   move.l 122(sp),d1
    6df6:	|        |   move.l 118(sp),d2
    6dfa:	|        |   jsr -84(a6)
    6dfe:	|        |   move.l d0,114(sp)
    6e02:	|        |   move.l 114(sp),d0
    6e06:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6e0a:	|        '-> move.l 292(sp),110(sp)
    6e10:	|            move.l 1d0ce <DOSBase>,d0
    6e16:	|            movea.l d0,a6
    6e18:	|            move.l 110(sp),d1
    6e1c:	|            jsr -126(a6)
    6e20:	|            move.l d0,106(sp)
    6e24:	|            move.l 106(sp),d0
    6e28:	|        ,-- bne.s 6e84 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6e2a:	|        |   move.l 138(sp),-(sp)
    6e2e:	|        |   pea 19139 <PutChar+0xe1f>
    6e34:	|        |   jsr 17878 <KPrintF>
    6e3a:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6e3c:	|        |   move.l 1d0ce <DOSBase>,d0
    6e42:	|        |   movea.l d0,a6
    6e44:	|        |   jsr -60(a6)
    6e48:	|        |   move.l d0,58(sp)
    6e4c:	|        |   move.l 58(sp),d0
    6e50:	|        |   move.l d0,54(sp)
    6e54:	|        |   move.l #102758,50(sp)
    6e5c:	|        |   moveq #40,d0
    6e5e:	|        |   move.l d0,46(sp)
    6e62:	|        |   move.l 1d0ce <DOSBase>,d0
    6e68:	|        |   movea.l d0,a6
    6e6a:	|        |   move.l 54(sp),d1
    6e6e:	|        |   move.l 50(sp),d2
    6e72:	|        |   move.l 46(sp),d3
    6e76:	|        |   jsr -48(a6)
    6e7a:	|        |   move.l d0,42(sp)
		return FALSE;
    6e7e:	|        |   clr.w d0
    6e80:	+--------|-- bra.w 6fb2 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6e84:	|        '-> move.l 138(sp),102(sp)
    6e8a:	|            move.l 1d0c6 <SysBase>,d0
    6e90:	|            movea.l d0,a6
    6e92:	|            movea.l 102(sp),a1
    6e96:	|            jsr -690(a6)

	readIniFile (filename);
    6e9a:	|            move.l 316(sp),-(sp)
    6e9e:	|            jsr 13dae <readIniFile>
    6ea4:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6ea6:	|            jsr 13b80 <getLanguageForFileB>
    6eac:	|            move.l d0,1ca3a <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6eb2:	|            move.l 1ca3a <languageNum>,d0
    6eb8:	|        ,-- bpl.s 6ec8 <initSludge+0x684>
    6eba:	|        |   pea 1918f <PutChar+0xe75>
    6ec0:	|        |   jsr 17878 <KPrintF>
    6ec6:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6ec8:	|        '-> move.l 1ca3a <languageNum>,d0
    6ece:	|            move.l d0,d1
    6ed0:	|            move.l 1d1a2 <gameSettings+0x4>,d0
    6ed6:	|            move.l d1,-(sp)
    6ed8:	|            move.l d0,-(sp)
    6eda:	|            clr.l -(sp)
    6edc:	|            jsr 7ef4 <setFileIndices>
    6ee2:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6ee6:	|            movea.l 200(sp),a0
    6eea:	|            move.b (a0),d0
    6eec:	|     ,----- beq.w 6f96 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6ef0:	|     |      move.l 200(sp),-(sp)
    6ef4:	|     |      jsr 2fe <encodeFilename>
    6efa:	|     |      addq.l #4,sp
    6efc:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6f00:	|     |      move.l 98(sp),94(sp)
    6f06:	|     |      move.l 1d0ce <DOSBase>,d0
    6f0c:	|     |      movea.l d0,a6
    6f0e:	|     |      move.l 94(sp),d1
    6f12:	|     |      jsr -120(a6)
    6f16:	|     |      move.l d0,90(sp)
    6f1a:	|     |      move.l 90(sp),d0
    6f1e:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6f22:	|     |  ,-- bne.s 6f50 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6f24:	|     |  |   move.l 98(sp),86(sp)
    6f2a:	|     |  |   moveq #-2,d1
    6f2c:	|     |  |   move.l d1,82(sp)
    6f30:	|     |  |   move.l 1d0ce <DOSBase>,d0
    6f36:	|     |  |   movea.l d0,a6
    6f38:	|     |  |   move.l 86(sp),d1
    6f3c:	|     |  |   move.l 82(sp),d2
    6f40:	|     |  |   jsr -84(a6)
    6f44:	|     |  |   move.l d0,78(sp)
    6f48:	|     |  |   move.l 78(sp),d0
    6f4c:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6f50:	|     |  '-> move.l 292(sp),74(sp)
    6f56:	|     |      move.l 1d0ce <DOSBase>,d0
    6f5c:	|     |      movea.l d0,a6
    6f5e:	|     |      move.l 74(sp),d1
    6f62:	|     |      jsr -126(a6)
    6f66:	|     |      move.l d0,70(sp)
    6f6a:	|     |      move.l 70(sp),d0
    6f6e:	|     |  ,-- bne.s 6f80 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6f70:	|     |  |   move.l 1d0ce <DOSBase>,d0
    6f76:	|     |  |   movea.l d0,a6
    6f78:	|     |  |   jsr -60(a6)
    6f7c:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6f80:	|     |  '-> move.l 98(sp),62(sp)
    6f86:	|     |      move.l 1d0c6 <SysBase>,d0
    6f8c:	|     |      movea.l d0,a6
    6f8e:	|     |      movea.l 62(sp),a1
    6f92:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6f96:	|     '----> movea.l 1d01e <winHeight>,a0
    6f9c:	|            lea -15(a0),a0
    6fa0:	|            move.l a0,d0
    6fa2:	|            move.l d0,-(sp)
    6fa4:	|            pea a <_start+0xa>
    6fa8:	|            jsr 893a <positionStatus>
    6fae:	|            addq.l #8,sp

	return TRUE;
    6fb0:	|            moveq #1,d0
}
    6fb2:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6fb6:	             lea 292(sp),sp
    6fba:	             rts

00006fbc <killSpeechTimers>:

void killSpeechTimers () {
    6fbc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6fbe:	          move.l 1d05e <allRunningFunctions>,(sp)

	while (thisFunction) {
    6fc4:	   ,----- bra.s 6ff0 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6fc6:	,--|----> movea.l (sp),a0
    6fc8:	|  |      move.b 56(a0),d0
    6fcc:	|  |  ,-- bne.s 6fea <killSpeechTimers+0x2e>
    6fce:	|  |  |   movea.l (sp),a0
    6fd0:	|  |  |   move.w 50(a0),d0
    6fd4:	|  |  +-- beq.s 6fea <killSpeechTimers+0x2e>
    6fd6:	|  |  |   movea.l (sp),a0
    6fd8:	|  |  |   move.l 12(a0),d0
    6fdc:	|  |  +-- beq.s 6fea <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6fde:	|  |  |   movea.l (sp),a0
    6fe0:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6fe4:	|  |  |   movea.l (sp),a0
    6fe6:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6fea:	|  |  '-> movea.l (sp),a0
    6fec:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6ff0:	|  '----> tst.l (sp)
    6ff2:	'-------- bne.s 6fc6 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6ff4:	          jsr 44ac <killAllSpeech>
}
    6ffa:	          nop
    6ffc:	          addq.l #4,sp
    6ffe:	          rts

00007000 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    7000:	             lea -52(sp),sp
    7004:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    7006:	             movea.l 60(sp),a0
    700a:	             move.l (a0),d0
    700c:	             move.l d0,-(sp)
    700e:	             jsr 7e34 <openSubSlice>
    7014:	             addq.l #4,sp
    7016:	             tst.w d0
    7018:	         ,-- bne.s 7020 <loadFunctionCode+0x20>
    701a:	         |   clr.w d0
    701c:	,--------|-- bra.w 71ea <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    7020:	|        '-> move.l 1d0ae <bigDataFile>,44(sp)
    7028:	|            move.l 1d0ce <DOSBase>,d0
    702e:	|            movea.l d0,a6
    7030:	|            move.l 44(sp),d1
    7034:	|            jsr -306(a6)
    7038:	|            move.l d0,40(sp)
    703c:	|            move.l 40(sp),d0
    7040:	|            move.l d0,d0
    7042:	|            movea.l 60(sp),a0
    7046:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    704a:	|            move.l 1d0ae <bigDataFile>,d0
    7050:	|            move.l d0,-(sp)
    7052:	|            jsr 6bc <get2bytes>
    7058:	|            addq.l #4,sp
    705a:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    705e:	|            move.l 1d0ae <bigDataFile>,d0
    7064:	|            move.l d0,-(sp)
    7066:	|            jsr 6bc <get2bytes>
    706c:	|            addq.l #4,sp
    706e:	|            movea.l 60(sp),a0
    7072:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    7076:	|            move.l 1d0ae <bigDataFile>,d0
    707c:	|            move.l d0,-(sp)
    707e:	|            jsr 6bc <get2bytes>
    7084:	|            addq.l #4,sp
    7086:	|            movea.l 60(sp),a0
    708a:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    708e:	|            move.l 36(sp),d0
    7092:	|            lsl.l #3,d0
    7094:	|            move.l d0,32(sp)
    7098:	|            clr.l 28(sp)
    709c:	|            move.l 1d0c6 <SysBase>,d0
    70a2:	|            movea.l d0,a6
    70a4:	|            move.l 32(sp),d0
    70a8:	|            move.l 28(sp),d1
    70ac:	|            jsr -684(a6)
    70b0:	|            move.l d0,24(sp)
    70b4:	|            move.l 24(sp),d0
    70b8:	|            movea.l 60(sp),a0
    70bc:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    70c0:	|            movea.l 60(sp),a0
    70c4:	|            move.l 4(a0),d0
    70c8:	|        ,-- bne.s 70de <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    70ca:	|        |   pea 191ba <PutChar+0xea0>
    70d0:	|        |   jsr 17878 <KPrintF>
    70d6:	|        |   addq.l #4,sp
		return FALSE;
    70d8:	|        |   clr.w d0
    70da:	+--------|-- bra.w 71ea <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    70de:	|        '-> clr.l 52(sp)
    70e2:	|        ,-- bra.s 7144 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    70e4:	|     ,--|-> move.l 1d0ae <bigDataFile>,8(sp)
    70ec:	|     |  |   move.l 1d0ce <DOSBase>,d0
    70f2:	|     |  |   movea.l d0,a6
    70f4:	|     |  |   move.l 8(sp),d1
    70f8:	|     |  |   jsr -306(a6)
    70fc:	|     |  |   move.l d0,4(sp)
    7100:	|     |  |   move.l 4(sp),d1
    7104:	|     |  |   movea.l 60(sp),a0
    7108:	|     |  |   movea.l 4(a0),a0
    710c:	|     |  |   move.l 52(sp),d0
    7110:	|     |  |   lsl.l #3,d0
    7112:	|     |  |   adda.l d0,a0
    7114:	|     |  |   move.l d1,d0
    7116:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    7118:	|     |  |   move.l 1d0ae <bigDataFile>,d0
    711e:	|     |  |   move.l d0,-(sp)
    7120:	|     |  |   jsr 6bc <get2bytes>
    7126:	|     |  |   addq.l #4,sp
    7128:	|     |  |   move.l d0,d1
    712a:	|     |  |   movea.l 60(sp),a0
    712e:	|     |  |   movea.l 4(a0),a0
    7132:	|     |  |   move.l 52(sp),d0
    7136:	|     |  |   lsl.l #3,d0
    7138:	|     |  |   adda.l d0,a0
    713a:	|     |  |   move.l d1,d0
    713c:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    7140:	|     |  |   addq.l #1,52(sp)
    7144:	|     |  '-> move.l 52(sp),d0
    7148:	|     |      cmp.l 36(sp),d0
    714c:	|     '----- bcs.s 70e4 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    714e:	|            jsr 7ba4 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    7154:	|            movea.l 60(sp),a0
    7158:	|            move.l 8(a0),d0
    715c:	|  ,-------- ble.w 71e0 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    7160:	|  |         movea.l 60(sp),a0
    7164:	|  |         move.l 8(a0),d0
    7168:	|  |         lsl.l #3,d0
    716a:	|  |         move.l d0,20(sp)
    716e:	|  |         clr.l 16(sp)
    7172:	|  |         move.l 1d0c6 <SysBase>,d0
    7178:	|  |         movea.l d0,a6
    717a:	|  |         move.l 20(sp),d0
    717e:	|  |         move.l 16(sp),d1
    7182:	|  |         jsr -684(a6)
    7186:	|  |         move.l d0,12(sp)
    718a:	|  |         move.l 12(sp),d0
    718e:	|  |         movea.l 60(sp),a0
    7192:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    7196:	|  |         movea.l 60(sp),a0
    719a:	|  |         move.l 20(a0),d0
    719e:	|  |     ,-- bne.s 71b2 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    71a0:	|  |     |   pea 191ba <PutChar+0xea0>
    71a6:	|  |     |   jsr 17878 <KPrintF>
    71ac:	|  |     |   addq.l #4,sp
			return FALSE;
    71ae:	|  |     |   clr.w d0
    71b0:	+--|-----|-- bra.s 71ea <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    71b2:	|  |     '-> clr.l 48(sp)
    71b6:	|  |     ,-- bra.s 71d0 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    71b8:	|  |  ,--|-> movea.l 60(sp),a0
    71bc:	|  |  |  |   move.l 20(a0),d1
    71c0:	|  |  |  |   move.l 48(sp),d0
    71c4:	|  |  |  |   lsl.l #3,d0
    71c6:	|  |  |  |   movea.l d1,a0
    71c8:	|  |  |  |   adda.l d0,a0
    71ca:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    71cc:	|  |  |  |   addq.l #1,48(sp)
    71d0:	|  |  |  '-> movea.l 60(sp),a0
    71d4:	|  |  |      move.l 8(a0),d0
    71d8:	|  |  |      cmp.l 48(sp),d0
    71dc:	|  |  '----- bgt.s 71b8 <loadFunctionCode+0x1b8>
    71de:	|  |     ,-- bra.s 71e8 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    71e0:	|  '-----|-> movea.l 60(sp),a0
    71e4:	|        |   clr.l 8(a0)
	}
	return TRUE;
    71e8:	|        '-> moveq #1,d0
}
    71ea:	'----------> movea.l (sp)+,a6
    71ec:	             lea 52(sp),sp
    71f0:	             rts

000071f2 <loadHandlers>:

void loadHandlers (BPTR fp) {
    71f2:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    71f4:	movea.l 1ca36 <currentEvents>,a2
    71fa:	move.l 8(sp),-(sp)
    71fe:	jsr 6bc <get2bytes>
    7204:	addq.l #4,sp
    7206:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    7208:	movea.l 1ca36 <currentEvents>,a2
    720e:	move.l 8(sp),-(sp)
    7212:	jsr 6bc <get2bytes>
    7218:	addq.l #4,sp
    721a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    721e:	movea.l 1ca36 <currentEvents>,a2
    7224:	move.l 8(sp),-(sp)
    7228:	jsr 6bc <get2bytes>
    722e:	addq.l #4,sp
    7230:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7234:	movea.l 1ca36 <currentEvents>,a2
    723a:	move.l 8(sp),-(sp)
    723e:	jsr 6bc <get2bytes>
    7244:	addq.l #4,sp
    7246:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    724a:	movea.l 1ca36 <currentEvents>,a2
    7250:	move.l 8(sp),-(sp)
    7254:	jsr 6bc <get2bytes>
    725a:	addq.l #4,sp
    725c:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    7260:	move.l 8(sp),-(sp)
    7264:	jsr 718 <get4bytes>
    726a:	addq.l #4,sp
    726c:	movea.l 1ca36 <currentEvents>,a0
    7272:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    7276:	movea.l 1ca36 <currentEvents>,a2
    727c:	move.l 8(sp),-(sp)
    7280:	jsr 6bc <get2bytes>
    7286:	addq.l #4,sp
    7288:	move.l d0,24(a2)
}
    728c:	nop
    728e:	movea.l (sp)+,a2
    7290:	rts

00007292 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    7292:	       lea -312(sp),sp
    7296:	       movem.l d2-d3/a6,-(sp)
    729a:	       move.l 332(sp),d1
    729e:	       move.l 336(sp),d0
    72a2:	       move.b d1,d1
    72a4:	       move.b d1,16(sp)
    72a8:	       move.b d0,d0
    72aa:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    72ae:	       move.l 328(sp),318(sp)
    72b4:	       move.l #1005,314(sp)
    72bc:	       move.l 1d0ce <DOSBase>,d0
    72c2:	       movea.l d0,a6
    72c4:	       move.l 318(sp),d1
    72c8:	       move.l 314(sp),d2
    72cc:	       jsr -30(a6)
    72d0:	       move.l d0,310(sp)
    72d4:	       move.l 310(sp),d0
    72d8:	       move.l d0,306(sp)

	if (! fp) {
    72dc:	   ,-- bne.s 7338 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    72de:	   |   move.l 1d0ce <DOSBase>,d0
    72e4:	   |   movea.l d0,a6
    72e6:	   |   jsr -60(a6)
    72ea:	   |   move.l d0,154(sp)
    72ee:	   |   move.l 154(sp),d0
    72f2:	   |   move.l d0,150(sp)
    72f6:	   |   move.l #102883,146(sp)
    72fe:	   |   moveq #31,d0
    7300:	   |   move.l d0,142(sp)
    7304:	   |   move.l 1d0ce <DOSBase>,d0
    730a:	   |   movea.l d0,a6
    730c:	   |   move.l 150(sp),d1
    7310:	   |   move.l 146(sp),d2
    7314:	   |   move.l 142(sp),d3
    7318:	   |   jsr -48(a6)
    731c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    7320:	   |   move.l 328(sp),-(sp)
    7324:	   |   pea 19203 <PutChar+0xee9>
    732a:	   |   jsr 17878 <KPrintF>
    7330:	   |   addq.l #8,sp
		return NULL;
    7332:	   |   moveq #0,d0
    7334:	,--|-- bra.w 75f8 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    7338:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    733c:	|      move.l 306(sp),302(sp)
    7342:	|      move.l 1d0ce <DOSBase>,d0
    7348:	|      movea.l d0,a6
    734a:	|      move.l 302(sp),d1
    734e:	|      jsr -306(a6)
    7352:	|      move.l d0,298(sp)
    7356:	|      move.l 298(sp),d0
    735a:	|      moveq #83,d1
    735c:	|      cmp.l d0,d1
    735e:	|  ,-- beq.s 7366 <openAndVerify+0xd4>
    7360:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7366:	|  '-> move.l 306(sp),294(sp)
    736c:	|      move.l 1d0ce <DOSBase>,d0
    7372:	|      movea.l d0,a6
    7374:	|      move.l 294(sp),d1
    7378:	|      jsr -306(a6)
    737c:	|      move.l d0,290(sp)
    7380:	|      move.l 290(sp),d0
    7384:	|      moveq #76,d1
    7386:	|      cmp.l d0,d1
    7388:	|  ,-- beq.s 7390 <openAndVerify+0xfe>
    738a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7390:	|  '-> move.l 306(sp),286(sp)
    7396:	|      move.l 1d0ce <DOSBase>,d0
    739c:	|      movea.l d0,a6
    739e:	|      move.l 286(sp),d1
    73a2:	|      jsr -306(a6)
    73a6:	|      move.l d0,282(sp)
    73aa:	|      move.l 282(sp),d0
    73ae:	|      moveq #85,d1
    73b0:	|      cmp.l d0,d1
    73b2:	|  ,-- beq.s 73ba <openAndVerify+0x128>
    73b4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    73ba:	|  '-> move.l 306(sp),278(sp)
    73c0:	|      move.l 1d0ce <DOSBase>,d0
    73c6:	|      movea.l d0,a6
    73c8:	|      move.l 278(sp),d1
    73cc:	|      jsr -306(a6)
    73d0:	|      move.l d0,274(sp)
    73d4:	|      move.l 274(sp),d0
    73d8:	|      moveq #68,d1
    73da:	|      cmp.l d0,d1
    73dc:	|  ,-- beq.s 73e4 <openAndVerify+0x152>
    73de:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    73e4:	|  '-> move.l 306(sp),270(sp)
    73ea:	|      move.l 1d0ce <DOSBase>,d0
    73f0:	|      movea.l d0,a6
    73f2:	|      move.l 270(sp),d1
    73f6:	|      jsr -306(a6)
    73fa:	|      move.l d0,266(sp)
    73fe:	|      move.l 266(sp),d1
    7402:	|      move.b 16(sp),d0
    7406:	|      ext.w d0
    7408:	|      movea.w d0,a0
    740a:	|      cmpa.l d1,a0
    740c:	|  ,-- beq.s 7414 <openAndVerify+0x182>
    740e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    7414:	|  '-> move.l 306(sp),262(sp)
    741a:	|      move.l 1d0ce <DOSBase>,d0
    7420:	|      movea.l d0,a6
    7422:	|      move.l 262(sp),d1
    7426:	|      jsr -306(a6)
    742a:	|      move.l d0,258(sp)
    742e:	|      move.l 258(sp),d1
    7432:	|      move.b 14(sp),d0
    7436:	|      ext.w d0
    7438:	|      movea.w d0,a0
    743a:	|      cmpa.l d1,a0
    743c:	|  ,-- beq.s 7444 <openAndVerify+0x1b2>
    743e:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7444:	|  '-> tst.w 322(sp)
    7448:	|  ,-- beq.s 74a0 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    744a:	|  |   move.l 1d0ce <DOSBase>,d0
    7450:	|  |   movea.l d0,a6
    7452:	|  |   jsr -60(a6)
    7456:	|  |   move.l d0,174(sp)
    745a:	|  |   move.l 174(sp),d0
    745e:	|  |   move.l d0,170(sp)
    7462:	|  |   move.l #102946,166(sp)
    746a:	|  |   moveq #31,d0
    746c:	|  |   move.l d0,162(sp)
    7470:	|  |   move.l 1d0ce <DOSBase>,d0
    7476:	|  |   movea.l d0,a6
    7478:	|  |   move.l 170(sp),d1
    747c:	|  |   move.l 166(sp),d2
    7480:	|  |   move.l 162(sp),d3
    7484:	|  |   jsr -48(a6)
    7488:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    748c:	|  |   pea 19222 <PutChar+0xf08>
    7492:	|  |   jsr 17878 <KPrintF>
    7498:	|  |   addq.l #4,sp
		return NULL;
    749a:	|  |   moveq #0,d0
    749c:	+--|-- bra.w 75f8 <openAndVerify+0x366>
	}
	FGetC (fp);
    74a0:	|  '-> move.l 306(sp),254(sp)
    74a6:	|      move.l 1d0ce <DOSBase>,d0
    74ac:	|      movea.l d0,a6
    74ae:	|      move.l 254(sp),d1
    74b2:	|      jsr -306(a6)
    74b6:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    74ba:	|      nop
    74bc:	|  ,-> move.l 306(sp),246(sp)
    74c2:	|  |   move.l 1d0ce <DOSBase>,d0
    74c8:	|  |   movea.l d0,a6
    74ca:	|  |   move.l 246(sp),d1
    74ce:	|  |   jsr -306(a6)
    74d2:	|  |   move.l d0,242(sp)
    74d6:	|  |   move.l 242(sp),d0
    74da:	|  '-- bne.s 74bc <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    74dc:	|      move.l 306(sp),238(sp)
    74e2:	|      move.l 1d0ce <DOSBase>,d0
    74e8:	|      movea.l d0,a6
    74ea:	|      move.l 238(sp),d1
    74ee:	|      jsr -306(a6)
    74f2:	|      move.l d0,234(sp)
    74f6:	|      move.l 234(sp),d0
    74fa:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    74fe:	|      move.l 306(sp),226(sp)
    7504:	|      move.l 1d0ce <DOSBase>,d0
    750a:	|      movea.l d0,a6
    750c:	|      move.l 226(sp),d1
    7510:	|      jsr -306(a6)
    7514:	|      move.l d0,222(sp)
    7518:	|      move.l 222(sp),d0
    751c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    7520:	|      move.l 230(sp),d0
    7524:	|      lsl.l #8,d0
    7526:	|      add.l 218(sp),d0
    752a:	|      movea.l 344(sp),a0
    752e:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    7530:	|      movea.l 344(sp),a0
    7534:	|      move.l (a0),d0
    7536:	|      cmpi.l #514,d0
    753c:	|  ,-- ble.s 7592 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    753e:	|  |   move.l 1d0ce <DOSBase>,d0
    7544:	|  |   movea.l d0,a6
    7546:	|  |   jsr -60(a6)
    754a:	|  |   move.l d0,194(sp)
    754e:	|  |   move.l 194(sp),d0
    7552:	|  |   move.l d0,190(sp)
    7556:	|  |   move.l #102973,186(sp)
    755e:	|  |   moveq #100,d1
    7560:	|  |   move.l d1,182(sp)
    7564:	|  |   move.l 1d0ce <DOSBase>,d0
    756a:	|  |   movea.l d0,a6
    756c:	|  |   move.l 190(sp),d1
    7570:	|  |   move.l 186(sp),d2
    7574:	|  |   move.l 182(sp),d3
    7578:	|  |   jsr -48(a6)
    757c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7580:	|  |   pea 1923d <PutChar+0xf23>
    7586:	|  |   jsr 17878 <KPrintF>
    758c:	|  |   addq.l #4,sp
		return NULL;
    758e:	|  |   moveq #0,d0
    7590:	+--|-- bra.s 75f8 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7592:	|  '-> movea.l 344(sp),a0
    7596:	|      move.l (a0),d0
    7598:	|      cmpi.l #257,d0
    759e:	|  ,-- bgt.s 75f4 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    75a0:	|  |   move.l 1d0ce <DOSBase>,d0
    75a6:	|  |   movea.l d0,a6
    75a8:	|  |   jsr -60(a6)
    75ac:	|  |   move.l d0,214(sp)
    75b0:	|  |   move.l 214(sp),d0
    75b4:	|  |   move.l d0,210(sp)
    75b8:	|  |   move.l #103042,206(sp)
    75c0:	|  |   moveq #100,d0
    75c2:	|  |   move.l d0,202(sp)
    75c6:	|  |   move.l 1d0ce <DOSBase>,d0
    75cc:	|  |   movea.l d0,a6
    75ce:	|  |   move.l 210(sp),d1
    75d2:	|  |   move.l 206(sp),d2
    75d6:	|  |   move.l 202(sp),d3
    75da:	|  |   jsr -48(a6)
    75de:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    75e2:	|  |   pea 19282 <PutChar+0xf68>
    75e8:	|  |   jsr 17878 <KPrintF>
    75ee:	|  |   addq.l #4,sp
		return NULL;
    75f0:	|  |   moveq #0,d0
    75f2:	+--|-- bra.s 75f8 <openAndVerify+0x366>
	}
	return fp;
    75f4:	|  '-> move.l 306(sp),d0
}
    75f8:	'----> movem.l (sp)+,d2-d3/a6
    75fc:	       lea 312(sp),sp
    7600:	       rts

00007602 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    7602:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7604:	          move.l #118878,(sp)
	while (* huntAndDestroy) {
    760a:	   ,----- bra.s 7636 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    760c:	,--|----> movea.l (sp),a0
    760e:	|  |      move.l (a0),d0
    7610:	|  |      cmp.l 8(sp),d0
    7614:	|  |  ,-- bne.s 762c <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7616:	|  |  |   movea.l (sp),a0
    7618:	|  |  |   movea.l (a0),a0
    761a:	|  |  |   move.l 44(a0),d0
    761e:	|  |  |   movea.l (sp),a0
    7620:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7622:	|  |  |   movea.l 8(sp),a0
    7626:	|  |  |   clr.l 44(a0)
    762a:	|  +--|-- bra.s 7636 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    762c:	|  |  '-> movea.l (sp),a0
    762e:	|  |      move.l (a0),d0
    7630:	|  |      moveq #44,d1
    7632:	|  |      add.l d0,d1
    7634:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    7636:	|  '----> movea.l (sp),a0
    7638:	|         move.l (a0),d0
    763a:	'-------- bne.s 760c <pauseFunction+0xa>
		}
	}
}
    763c:	          nop
    763e:	          nop
    7640:	          addq.l #4,sp
    7642:	          rts

00007644 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7644:	       lea -16(sp),sp
    7648:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    764a:	       moveq #58,d0
    764c:	       move.l d0,16(sp)
    7650:	       clr.l 12(sp)
    7654:	       move.l 1d0c6 <SysBase>,d0
    765a:	       movea.l d0,a6
    765c:	       move.l 16(sp),d0
    7660:	       move.l 12(sp),d1
    7664:	       jsr -684(a6)
    7668:	       move.l d0,8(sp)
    766c:	       move.l 8(sp),d0
    7670:	       move.l d0,4(sp)
	if(!newFunc) {
    7674:	   ,-- bne.s 7688 <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    7676:	   |   pea 192c9 <PutChar+0xfaf>
    767c:	   |   jsr 17878 <KPrintF>
    7682:	   |   addq.l #4,sp
		return 0;
    7684:	   |   moveq #0,d0
    7686:	,--|-- bra.s 76a2 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    7688:	|  '-> move.l 24(sp),d0
    768c:	|      movea.l 4(sp),a0
    7690:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7692:	|      move.l 4(sp),-(sp)
    7696:	|      jsr 7000 <loadFunctionCode>
    769c:	|      addq.l #4,sp

	return newFunc;
    769e:	|      move.l 4(sp),d0
}
    76a2:	'----> movea.l (sp)+,a6
    76a4:	       lea 16(sp),sp
    76a8:	       rts

000076aa <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    76aa:	move.l 1d05e <allRunningFunctions>,d0
    76b0:	movea.l 4(sp),a0
    76b4:	move.l d0,44(a0)
	allRunningFunctions = fun;
    76b8:	move.l 4(sp),1d05e <allRunningFunctions>
}
    76c0:	nop
    76c2:	rts

000076c4 <runSludge>:

BOOL runSludge () {
    76c4:	                   lea -12(sp),sp
    76c8:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    76ca:	                   move.l 1d05e <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    76d2:	      ,----------- bra.s 774e <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    76d4:	   ,--|----------> movea.l 12(sp),a0
    76d8:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    76de:	   |  |            movea.l 12(sp),a0
    76e2:	   |  |            move.b 56(a0),d0
    76e6:	   |  |  ,-------- bne.s 7748 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    76e8:	   |  |  |         movea.l 12(sp),a0
    76ec:	   |  |  |         move.l 12(a0),d0
    76f0:	   |  |  |  ,----- beq.s 771a <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    76f2:	   |  |  |  |      movea.l 12(sp),a0
    76f6:	   |  |  |  |      move.l 12(a0),d0
    76fa:	   |  |  |  |  ,-- bpl.s 7706 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    76fc:	   |  |  |  |  |   movea.l 12(sp),a0
    7700:	   |  |  |  |  |   clr.l 12(a0)
    7704:	   |  |  +--|--|-- bra.s 7748 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7706:	   |  |  |  |  '-> movea.l 12(sp),a0
    770a:	   |  |  |  |      move.l 12(a0),d0
    770e:	   |  |  |  |      subq.l #1,d0
				} else if (
    7710:	   |  |  |  |      movea.l 12(sp),a0
    7714:	   |  |  |  |      move.l d0,12(a0)
    7718:	   |  |  +--|----- bra.s 7748 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    771a:	   |  |  |  '----> movea.l 12(sp),a0
    771e:	   |  |  |         move.w 50(a0),d0
    7722:	   |  |  |     ,-- beq.s 7732 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7724:	   |  |  |     |   movea.l 12(sp),a0
    7728:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    772c:	   |  |  |     |   jsr 44ac <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7732:	   |  |  |     '-> move.l 12(sp),-(sp)
    7736:	   |  |  |         jsr 56bc <continueFunction>
    773c:	   |  |  |         addq.l #4,sp
    773e:	   |  |  |         tst.w d0
    7740:	   |  |  +-------- bne.s 7748 <runSludge+0x84>
					return FALSE;
    7742:	   |  |  |         clr.w d0
    7744:	,--|--|--|-------- bra.w 77d4 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7748:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    774e:	|  |  '----------> tst.l 12(sp)
    7752:	|  '-------------- bne.s 76d4 <runSludge+0x10>
	}

	if (loadNow) {
    7754:	|                  move.l 1d092 <loadNow>,d0
    775a:	|        ,-------- beq.s 77d2 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    775c:	|        |         movea.l 1d092 <loadNow>,a0
    7762:	|        |         move.b (a0),d0
    7764:	|        |         cmpi.b #58,d0
    7768:	|        |  ,----- bne.s 779c <runSludge+0xd8>
			saveGame (loadNow + 1);
    776a:	|        |  |      move.l 1d092 <loadNow>,d0
    7770:	|        |  |      addq.l #1,d0
    7772:	|        |  |      move.l d0,-(sp)
    7774:	|        |  |      jsr ccd8 <saveGame>
    777a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    777c:	|        |  |      movea.l 1d18c <saverFunc>,a0
    7782:	|        |  |      lea 28(a0),a0
    7786:	|        |  |      pea 1 <_start+0x1>
    778a:	|        |  |      pea 1 <_start+0x1>
    778e:	|        |  |      move.l a0,-(sp)
    7790:	|        |  |      jsr 1568a <setVariable>
    7796:	|        |  |      lea 12(sp),sp
    779a:	|        |  |  ,-- bra.s 77b4 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    779c:	|        |  '--|-> move.l 1d092 <loadNow>,d0
    77a2:	|        |     |   move.l d0,-(sp)
    77a4:	|        |     |   jsr c820 <loadGame>
    77aa:	|        |     |   addq.l #4,sp
    77ac:	|        |     |   tst.w d0
    77ae:	|        |     +-- bne.s 77b4 <runSludge+0xf0>
    77b0:	|        |     |   clr.w d0
    77b2:	+--------|-----|-- bra.s 77d4 <runSludge+0x110>
		}
		FreeVec(loadNow);
    77b4:	|        |     '-> move.l 1d092 <loadNow>,8(sp)
    77bc:	|        |         move.l 1d0c6 <SysBase>,d0
    77c2:	|        |         movea.l d0,a6
    77c4:	|        |         movea.l 8(sp),a1
    77c8:	|        |         jsr -690(a6)
		loadNow = NULL;
    77cc:	|        |         clr.l 1d092 <loadNow>
	}

	return TRUE;
    77d2:	|        '-------> moveq #1,d0
}
    77d4:	'----------------> movea.l (sp)+,a6
    77d6:	                   lea 12(sp),sp
    77da:	                   rts

000077dc <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    77dc:	movea.l 1ca36 <currentEvents>,a0
    77e2:	move.l (a0),d0
    77e4:	move.l 4(sp),-(sp)
    77e8:	move.l d0,-(sp)
    77ea:	jsr 8d0 <put2bytes>
    77f0:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    77f2:	movea.l 1ca36 <currentEvents>,a0
    77f8:	move.l 4(a0),d0
    77fc:	move.l 4(sp),-(sp)
    7800:	move.l d0,-(sp)
    7802:	jsr 8d0 <put2bytes>
    7808:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    780a:	movea.l 1ca36 <currentEvents>,a0
    7810:	move.l 8(a0),d0
    7814:	move.l 4(sp),-(sp)
    7818:	move.l d0,-(sp)
    781a:	jsr 8d0 <put2bytes>
    7820:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7822:	movea.l 1ca36 <currentEvents>,a0
    7828:	move.l 12(a0),d0
    782c:	move.l 4(sp),-(sp)
    7830:	move.l d0,-(sp)
    7832:	jsr 8d0 <put2bytes>
    7838:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    783a:	movea.l 1ca36 <currentEvents>,a0
    7840:	move.l 16(a0),d0
    7844:	move.l 4(sp),-(sp)
    7848:	move.l d0,-(sp)
    784a:	jsr 8d0 <put2bytes>
    7850:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7852:	movea.l 1ca36 <currentEvents>,a0
    7858:	move.l 20(a0),d0
    785c:	move.l 4(sp),-(sp)
    7860:	move.l d0,-(sp)
    7862:	jsr 958 <put4bytes>
    7868:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    786a:	movea.l 1ca36 <currentEvents>,a0
    7870:	move.l 24(a0),d0
    7874:	move.l 4(sp),-(sp)
    7878:	move.l d0,-(sp)
    787a:	jsr 8d0 <put2bytes>
    7880:	addq.l #8,sp
}
    7882:	nop
    7884:	rts

00007886 <sludgeDisplay>:

void sludgeDisplay () {					
    7886:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7888:	move.l #14675968,(sp)
	displayCursor();
    788e:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7894:	jsr 15c4 <CstDrawBackdrop>
	CstRestoreScreen();
    789a:	jsr 2eec <CstRestoreScreen>
	drawPeople();
    78a0:	jsr a55a <drawPeople>
	CstSwapBuffer();
    78a6:	jsr 3b64 <CstSwapBuffer>
}
    78ac:	nop
    78ae:	addq.l #4,sp
    78b0:	rts

000078b2 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    78b2:	      ,-- bra.s 78d2 <stackSetByIndex+0x20>
		vS = vS->next;
    78b4:	,-----|-> movea.l 4(sp),a0
    78b8:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    78be:	|     +-- bne.s 78d2 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    78c0:	|     |   pea 192f2 <PutChar+0xfd8>
    78c6:	|     |   jsr 17878 <KPrintF>
    78cc:	|     |   addq.l #4,sp
			return FALSE;
    78ce:	|     |   clr.w d0
    78d0:	|  ,--|-- bra.s 78f4 <stackSetByIndex+0x42>
	while (theIndex--) {
    78d2:	|  |  '-> move.l 8(sp),d0
    78d6:	|  |      move.l d0,d1
    78d8:	|  |      subq.l #1,d1
    78da:	|  |      move.l d1,8(sp)
    78de:	|  |      tst.l d0
    78e0:	'--|----- bne.s 78b4 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    78e2:	   |      move.l 4(sp),d0
    78e6:	   |      move.l d0,-(sp)
    78e8:	   |      move.l 16(sp),-(sp)
    78ec:	   |      jsr 15252 <copyVariable>
    78f2:	   |      addq.l #8,sp
}
    78f4:	   '----> rts

000078f6 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    78f6:	             subq.l #8,sp
    78f8:	             move.l 28(sp),d0
    78fc:	             move.w d0,d0
    78fe:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7902:	             movea.l 12(sp),a0
    7906:	             move.l 16(a0),d1
    790a:	             move.l 16(sp),d0
    790e:	             cmp.l d1,d0
    7910:	         ,-- beq.s 7926 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7912:	         |   pea 1930b <PutChar+0xff1>
    7918:	         |   jsr 17878 <KPrintF>
    791e:	         |   addq.l #4,sp
		return NULL; 
    7920:	         |   moveq #0,d0
    7922:	,--------|-- bra.w 7a02 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7926:	|        '-> movea.l 12(sp),a0
    792a:	|            move.l 16(a0),d1
    792e:	|            movea.l 12(sp),a0
    7932:	|            move.l 8(a0),d0
    7936:	|            cmp.l d1,d0
    7938:	|  ,-------- bge.s 79a2 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    793a:	|  |         pea 19327 <PutChar+0x100d>
    7940:	|  |         jsr 17878 <KPrintF>
    7946:	|  |         addq.l #4,sp
		return NULL; 
    7948:	|  |         moveq #0,d0
    794a:	+--|-------- bra.w 7a02 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    794e:	|  |  ,----> movea.l 24(sp),a0
    7952:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7956:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    795a:	|  |  |      movea.l 24(sp),a0
    795e:	|  |  |      move.l (a0),d0
    7960:	|  |  |  ,-- bne.s 7976 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7962:	|  |  |  |   pea 19351 <PutChar+0x1037>
    7968:	|  |  |  |   jsr 17878 <KPrintF>
    796e:	|  |  |  |   addq.l #4,sp
			return NULL;
    7970:	|  |  |  |   moveq #0,d0
    7972:	+--|--|--|-- bra.w 7a02 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7976:	|  |  |  '-> movea.l 12(sp),a0
    797a:	|  |  |      move.l 20(a0),d1
    797e:	|  |  |      move.l 16(sp),d0
    7982:	|  |  |      lsl.l #3,d0
    7984:	|  |  |      add.l d0,d1
    7986:	|  |  |      move.l 4(sp),d0
    798a:	|  |  |      move.l d1,-(sp)
    798c:	|  |  |      move.l d0,-(sp)
    798e:	|  |  |      jsr 15252 <copyVariable>
    7994:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7996:	|  |  |      move.l 24(sp),-(sp)
    799a:	|  |  |      jsr 1571c <trimStack>
    79a0:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    79a2:	|  '--|----> tst.l 16(sp)
    79a6:	|     '----- bne.s 794e <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    79a8:	|            movea.l 12(sp),a0
    79ac:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    79b0:	|            movea.l 12(sp),a0
    79b4:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    79b8:	|            movea.l 12(sp),a0
    79bc:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    79c2:	|            movea.l 12(sp),a0
    79c6:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    79cc:	|            movea.l 12(sp),a0
    79d0:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    79d4:	|            movea.l 12(sp),a0
    79d8:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    79dc:	|            movea.l 12(sp),a0
    79e0:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    79e4:	|            movea.l 12(sp),a0
    79e8:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    79ec:	|            movea.l 12(sp),a0
    79f0:	|            clr.l 28(a0)

	restartFunction (newFunc);
    79f4:	|            move.l 12(sp),-(sp)
    79f8:	|            jsr 76aa <restartFunction>
    79fe:	|            addq.l #4,sp
	return 1;
    7a00:	|            moveq #1,d0
}
    7a02:	'----------> addq.l #8,sp
    7a04:	             rts

00007a06 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7a06:	       lea -24(sp),sp
    7a0a:	       move.l a6,-(sp)
    7a0c:	       move.l 48(sp),d0
    7a10:	       move.w d0,d0
    7a12:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7a16:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7a1e:	       moveq #58,d0
    7a20:	       move.l d0,20(sp)
    7a24:	       clr.l 16(sp)
    7a28:	       move.l 1d0c6 <SysBase>,d0
    7a2e:	       movea.l d0,a6
    7a30:	       move.l 20(sp),d0
    7a34:	       move.l 16(sp),d1
    7a38:	       jsr -684(a6)
    7a3c:	       move.l d0,12(sp)
    7a40:	       move.l 12(sp),d0
    7a44:	       move.l d0,8(sp)
	if(!newFunc) {
    7a48:	   ,-- bne.s 7a5c <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    7a4a:	   |   pea 192c9 <PutChar+0xfaf>
    7a50:	   |   jsr 17878 <KPrintF>
    7a56:	   |   addq.l #4,sp
		return 0;
    7a58:	   |   moveq #0,d0
    7a5a:	,--|-- bra.s 7aaa <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    7a5c:	|  '-> cmpi.l #145,32(sp)
    7a64:	|  ,-- bne.s 7a74 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    7a66:	|  |   pea 1939c <PutChar+0x1082>
    7a6c:	|  |   jsr 17878 <KPrintF>
    7a72:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    7a74:	|  '-> move.l 32(sp),d0
    7a78:	|      movea.l 8(sp),a0
    7a7c:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7a7e:	|      move.l 8(sp),-(sp)
    7a82:	|      jsr 7000 <loadFunctionCode>
    7a88:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7a8a:	|      movea.w 6(sp),a0
    7a8e:	|      move.l a0,-(sp)
    7a90:	|      move.l 48(sp),-(sp)
    7a94:	|      move.l 48(sp),-(sp)
    7a98:	|      move.l 48(sp),-(sp)
    7a9c:	|      move.l 24(sp),-(sp)
    7aa0:	|      jsr 78f6 <startNewFunctionLoaded>
    7aa6:	|      lea 20(sp),sp
}
    7aaa:	'----> movea.l (sp)+,a6
    7aac:	       lea 24(sp),sp
    7ab0:	       rts

00007ab2 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7ab2:	             lea -12(sp),sp
    7ab6:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7ab8:	             movea.l 1ca36 <currentEvents>,a0
    7abe:	             move.l 20(a0),d0
    7ac2:	             cmp.l 20(sp),d0
    7ac6:	,----------- beq.w 7b68 <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    7aca:	|            movea.l 20(sp),a0
    7ace:	|            move.l 24(a0),d0
    7ad2:	|        ,-- beq.s 7ae6 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    7ad4:	|        |   pea 193ba <PutChar+0x10a0>
    7ada:	|        |   jsr 17878 <KPrintF>
    7ae0:	|        |   addq.l #4,sp
		return;
    7ae2:	|  ,-----|-- bra.w 7b6a <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    7ae6:	|  |     '-> movea.l 20(sp),a0
    7aea:	|  |         move.l 4(a0),8(sp)
    7af0:	|  |         move.l 1d0c6 <SysBase>,d0
    7af6:	|  |         movea.l d0,a6
    7af8:	|  |         movea.l 8(sp),a1
    7afc:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7b00:	|  |         clr.l 12(sp)
    7b04:	|  |     ,-- bra.s 7b24 <unloadFunction+0x72>
    7b06:	|  |  ,--|-> movea.l 20(sp),a0
    7b0a:	|  |  |  |   move.l 20(a0),d1
    7b0e:	|  |  |  |   move.l 12(sp),d0
    7b12:	|  |  |  |   lsl.l #3,d0
    7b14:	|  |  |  |   add.l d1,d0
    7b16:	|  |  |  |   move.l d0,-(sp)
    7b18:	|  |  |  |   jsr 14fe6 <unlinkVar>
    7b1e:	|  |  |  |   addq.l #4,sp
    7b20:	|  |  |  |   addq.l #1,12(sp)
    7b24:	|  |  |  '-> movea.l 20(sp),a0
    7b28:	|  |  |      move.l 8(a0),d0
    7b2c:	|  |  |      cmp.l 12(sp),d0
    7b30:	|  |  '----- bgt.s 7b06 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    7b32:	|  |         movea.l 20(sp),a0
    7b36:	|  |         move.l 8(a0),d0
    7b3a:	|  |     ,-- ble.s 7b56 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7b3c:	|  |     |   movea.l 20(sp),a0
    7b40:	|  |     |   move.l 20(a0),4(sp)
    7b46:	|  |     |   move.l 1d0c6 <SysBase>,d0
    7b4c:	|  |     |   movea.l d0,a6
    7b4e:	|  |     |   movea.l 4(sp),a1
    7b52:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7b56:	|  |     '-> moveq #28,d0
    7b58:	|  |         add.l 20(sp),d0
    7b5c:	|  |         move.l d0,-(sp)
    7b5e:	|  |         jsr 14fe6 <unlinkVar>
    7b64:	|  |         addq.l #4,sp
    7b66:	|  +-------- bra.s 7b6a <unloadFunction+0xb8>
		return;
    7b68:	'--|-------> nop
}
    7b6a:	   '-------> movea.l (sp)+,a6
    7b6c:	             lea 12(sp),sp
    7b70:	             rts

00007b72 <unfreezeSubs>:

void unfreezeSubs () {
    7b72:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7b74:	          move.l 1d05e <allRunningFunctions>,(sp)

	while (thisFunction) {
    7b7a:	   ,----- bra.s 7b98 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7b7c:	,--|----> movea.l (sp),a0
    7b7e:	|  |      move.b 56(a0),d0
    7b82:	|  |  ,-- beq.s 7b92 <unfreezeSubs+0x20>
    7b84:	|  |  |   movea.l (sp),a0
    7b86:	|  |  |   move.b 56(a0),d0
    7b8a:	|  |  |   subq.b #1,d0
    7b8c:	|  |  |   movea.l (sp),a0
    7b8e:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7b92:	|  |  '-> movea.l (sp),a0
    7b94:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7b98:	|  '----> tst.l (sp)
    7b9a:	'-------- bne.s 7b7c <unfreezeSubs+0xa>
	}
}
    7b9c:	          nop
    7b9e:	          nop
    7ba0:	          addq.l #4,sp
    7ba2:	          rts

00007ba4 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7ba4:	clr.w 1ca42 <sliceBusy>
}
    7baa:	nop
    7bac:	rts

00007bae <getNumberedString>:

char * getNumberedString (int value) {
    7bae:	       lea -56(sp),sp
    7bb2:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7bb6:	       move.w 1ca42 <sliceBusy>,d0
    7bbc:	   ,-- beq.s 7c06 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7bbe:	   |   move.l 1d0ce <DOSBase>,d0
    7bc4:	   |   movea.l d0,a6
    7bc6:	   |   jsr -60(a6)
    7bca:	   |   move.l d0,28(sp)
    7bce:	   |   move.l 28(sp),d0
    7bd2:	   |   move.l d0,24(sp)
    7bd6:	   |   move.l #103392,20(sp)
    7bde:	   |   moveq #76,d0
    7be0:	   |   move.l d0,16(sp)
    7be4:	   |   move.l 1d0ce <DOSBase>,d0
    7bea:	   |   movea.l d0,a6
    7bec:	   |   move.l 24(sp),d1
    7bf0:	   |   move.l 20(sp),d2
    7bf4:	   |   move.l 16(sp),d3
    7bf8:	   |   jsr -48(a6)
    7bfc:	   |   move.l d0,12(sp)
		return NULL;
    7c00:	   |   moveq #0,d0
    7c02:	,--|-- bra.w 7ca2 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7c06:	|  '-> move.l 1d0ae <bigDataFile>,64(sp)
    7c0e:	|      move.l 72(sp),d0
    7c12:	|      add.l d0,d0
    7c14:	|      add.l d0,d0
    7c16:	|      move.l d0,d1
    7c18:	|      move.l 1d0ba <startOfTextIndex>,d0
    7c1e:	|      add.l d1,d0
    7c20:	|      move.l d0,60(sp)
    7c24:	|      moveq #-1,d0
    7c26:	|      move.l d0,56(sp)
    7c2a:	|      move.l 1d0ce <DOSBase>,d0
    7c30:	|      movea.l d0,a6
    7c32:	|      move.l 64(sp),d1
    7c36:	|      move.l 60(sp),d2
    7c3a:	|      move.l 56(sp),d3
    7c3e:	|      jsr -66(a6)
    7c42:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7c46:	|      move.l 1d0ae <bigDataFile>,d0
    7c4c:	|      move.l d0,-(sp)
    7c4e:	|      jsr 718 <get4bytes>
    7c54:	|      addq.l #4,sp
    7c56:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7c5a:	|      move.l 1d0ae <bigDataFile>,48(sp)
    7c62:	|      move.l 72(sp),44(sp)
    7c68:	|      moveq #-1,d0
    7c6a:	|      move.l d0,40(sp)
    7c6e:	|      move.l 1d0ce <DOSBase>,d0
    7c74:	|      movea.l d0,a6
    7c76:	|      move.l 48(sp),d1
    7c7a:	|      move.l 44(sp),d2
    7c7e:	|      move.l 40(sp),d3
    7c82:	|      jsr -66(a6)
    7c86:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7c8a:	|      move.l 1d0ae <bigDataFile>,d0
    7c90:	|      move.l d0,-(sp)
    7c92:	|      jsr b02 <readString>
    7c98:	|      addq.l #4,sp
    7c9a:	|      move.l d0,32(sp)
	
	return s;
    7c9e:	|      move.l 32(sp),d0
}
    7ca2:	'----> movem.l (sp)+,d2-d3/a6
    7ca6:	       lea 56(sp),sp
    7caa:	       rts

00007cac <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7cac:	       lea -32(sp),sp
    7cb0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7cb4:	       move.w 1ca42 <sliceBusy>,d0
    7cba:	   ,-- beq.s 7cd6 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7cbc:	   |   pea 1942d <PutChar+0x1113>
    7cc2:	   |   pea 1944b <PutChar+0x1131>
    7cc8:	   |   jsr 17878 <KPrintF>
    7cce:	   |   addq.l #8,sp
		return 0;
    7cd0:	   |   moveq #0,d0
    7cd2:	,--|-- bra.w 7d6a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7cd6:	|  '-> move.l 1d0ae <bigDataFile>,40(sp)
    7cde:	|      move.l 48(sp),d0
    7ce2:	|      add.l d0,d0
    7ce4:	|      add.l d0,d0
    7ce6:	|      move.l d0,d1
    7ce8:	|      move.l 1d0b6 <startOfDataIndex>,d0
    7cee:	|      add.l d1,d0
    7cf0:	|      move.l d0,36(sp)
    7cf4:	|      moveq #-1,d0
    7cf6:	|      move.l d0,32(sp)
    7cfa:	|      move.l 1d0ce <DOSBase>,d0
    7d00:	|      movea.l d0,a6
    7d02:	|      move.l 40(sp),d1
    7d06:	|      move.l 36(sp),d2
    7d0a:	|      move.l 32(sp),d3
    7d0e:	|      jsr -66(a6)
    7d12:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7d16:	|      move.l 1d0ae <bigDataFile>,24(sp)
    7d1e:	|      move.l 1d0ae <bigDataFile>,d0
    7d24:	|      move.l d0,-(sp)
    7d26:	|      jsr 718 <get4bytes>
    7d2c:	|      addq.l #4,sp
    7d2e:	|      move.l d0,20(sp)
    7d32:	|      clr.l 16(sp)
    7d36:	|      move.l 1d0ce <DOSBase>,d0
    7d3c:	|      movea.l d0,a6
    7d3e:	|      move.l 24(sp),d1
    7d42:	|      move.l 20(sp),d2
    7d46:	|      move.l 16(sp),d3
    7d4a:	|      jsr -66(a6)
    7d4e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7d52:	|      move.w #1,1ca42 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7d5a:	|      move.l 1d0ae <bigDataFile>,d0
    7d60:	|      move.l d0,-(sp)
    7d62:	|      jsr 718 <get4bytes>
    7d68:	|      addq.l #4,sp
}
    7d6a:	'----> movem.l (sp)+,d2-d3/a6
    7d6e:	       lea 32(sp),sp
    7d72:	       rts

00007d74 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7d74:	       lea -32(sp),sp
    7d78:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7d7c:	       move.w 1ca42 <sliceBusy>,d0
    7d82:	   ,-- beq.s 7d9e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7d84:	   |   pea 1942d <PutChar+0x1113>
    7d8a:	   |   pea 1944b <PutChar+0x1131>
    7d90:	   |   jsr 17878 <KPrintF>
    7d96:	   |   addq.l #8,sp
        return FALSE;
    7d98:	   |   clr.w d0
    7d9a:	,--|-- bra.w 7e2a <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7d9e:	|  '-> move.l 1d0ae <bigDataFile>,40(sp)
    7da6:	|      move.l 48(sp),d0
    7daa:	|      add.l d0,d0
    7dac:	|      add.l d0,d0
    7dae:	|      move.l d0,d1
    7db0:	|      move.l 1d0c2 <startOfObjectIndex>,d0
    7db6:	|      add.l d1,d0
    7db8:	|      move.l d0,36(sp)
    7dbc:	|      moveq #-1,d0
    7dbe:	|      move.l d0,32(sp)
    7dc2:	|      move.l 1d0ce <DOSBase>,d0
    7dc8:	|      movea.l d0,a6
    7dca:	|      move.l 40(sp),d1
    7dce:	|      move.l 36(sp),d2
    7dd2:	|      move.l 32(sp),d3
    7dd6:	|      jsr -66(a6)
    7dda:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7dde:	|      move.l 1d0ae <bigDataFile>,24(sp)
    7de6:	|      move.l 1d0ae <bigDataFile>,d0
    7dec:	|      move.l d0,-(sp)
    7dee:	|      jsr 718 <get4bytes>
    7df4:	|      addq.l #4,sp
    7df6:	|      move.l d0,20(sp)
    7dfa:	|      moveq #-1,d0
    7dfc:	|      move.l d0,16(sp)
    7e00:	|      move.l 1d0ce <DOSBase>,d0
    7e06:	|      movea.l d0,a6
    7e08:	|      move.l 24(sp),d1
    7e0c:	|      move.l 20(sp),d2
    7e10:	|      move.l 16(sp),d3
    7e14:	|      jsr -66(a6)
    7e18:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7e1c:	|      move.w #1,1ca42 <sliceBusy>
    7e24:	|      move.w 1ca42 <sliceBusy>,d0
}
    7e2a:	'----> movem.l (sp)+,d2-d3/a6
    7e2e:	       lea 32(sp),sp
    7e32:	       rts

00007e34 <openSubSlice>:

BOOL openSubSlice (int num) {
    7e34:	       lea -32(sp),sp
    7e38:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7e3c:	       move.w 1ca42 <sliceBusy>,d0
    7e42:	   ,-- beq.s 7e5e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7e44:	   |   pea 1942d <PutChar+0x1113>
    7e4a:	   |   pea 1944b <PutChar+0x1131>
    7e50:	   |   jsr 17878 <KPrintF>
    7e56:	   |   addq.l #8,sp
		return FALSE;
    7e58:	   |   clr.w d0
    7e5a:	,--|-- bra.w 7eea <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7e5e:	|  '-> move.l 1d0ae <bigDataFile>,40(sp)
    7e66:	|      move.l 48(sp),d0
    7e6a:	|      add.l d0,d0
    7e6c:	|      add.l d0,d0
    7e6e:	|      move.l d0,d1
    7e70:	|      move.l 1d0be <startOfSubIndex>,d0
    7e76:	|      add.l d1,d0
    7e78:	|      move.l d0,36(sp)
    7e7c:	|      moveq #-1,d0
    7e7e:	|      move.l d0,32(sp)
    7e82:	|      move.l 1d0ce <DOSBase>,d0
    7e88:	|      movea.l d0,a6
    7e8a:	|      move.l 40(sp),d1
    7e8e:	|      move.l 36(sp),d2
    7e92:	|      move.l 32(sp),d3
    7e96:	|      jsr -66(a6)
    7e9a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7e9e:	|      move.l 1d0ae <bigDataFile>,24(sp)
    7ea6:	|      move.l 1d0ae <bigDataFile>,d0
    7eac:	|      move.l d0,-(sp)
    7eae:	|      jsr 718 <get4bytes>
    7eb4:	|      addq.l #4,sp
    7eb6:	|      move.l d0,20(sp)
    7eba:	|      moveq #-1,d0
    7ebc:	|      move.l d0,16(sp)
    7ec0:	|      move.l 1d0ce <DOSBase>,d0
    7ec6:	|      movea.l d0,a6
    7ec8:	|      move.l 24(sp),d1
    7ecc:	|      move.l 20(sp),d2
    7ed0:	|      move.l 16(sp),d3
    7ed4:	|      jsr -66(a6)
    7ed8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7edc:	|      move.w #1,1ca42 <sliceBusy>
    7ee4:	|      move.w 1ca42 <sliceBusy>,d0
}
    7eea:	'----> movem.l (sp)+,d2-d3/a6
    7eee:	       lea 32(sp),sp
    7ef2:	       rts

00007ef4 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7ef4:	       lea -180(sp),sp
    7ef8:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7efc:	       tst.l 196(sp)
    7f00:	,----- beq.s 7f40 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7f02:	|      move.l 196(sp),1d0ae <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7f0a:	|      move.l 196(sp),168(sp)
    7f10:	|      clr.l 164(sp)
    7f14:	|      clr.l 160(sp)
    7f18:	|      move.l 1d0ce <DOSBase>,d0
    7f1e:	|      movea.l d0,a6
    7f20:	|      move.l 168(sp),d1
    7f24:	|      move.l 164(sp),d2
    7f28:	|      move.l 160(sp),d3
    7f2c:	|      jsr -66(a6)
    7f30:	|      move.l d0,156(sp)
    7f34:	|      move.l 156(sp),d0
    7f38:	|      move.l d0,1d0b2 <startIndex>
    7f3e:	|  ,-- bra.s 7f7a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7f40:	'--|-> move.l 1d0ae <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7f48:	   |   move.l 196(sp),184(sp)
    7f4e:	   |   move.l 1d0b2 <startIndex>,d0
    7f54:	   |   move.l d0,180(sp)
    7f58:	   |   moveq #-1,d0
    7f5a:	   |   move.l d0,176(sp)
    7f5e:	   |   move.l 1d0ce <DOSBase>,d0
    7f64:	   |   movea.l d0,a6
    7f66:	   |   move.l 184(sp),d1
    7f6a:	   |   move.l 180(sp),d2
    7f6e:	   |   move.l 176(sp),d3
    7f72:	   |   jsr -66(a6)
    7f76:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7f7a:	   '-> clr.w 1ca42 <sliceBusy>

	if (skipBefore > numLanguages) {
    7f80:	       move.l 204(sp),d0
    7f84:	       cmp.l 200(sp),d0
    7f88:	   ,-- bls.s 7f9c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7f8a:	   |   pea 19465 <PutChar+0x114b>
    7f90:	   |   jsr 17878 <KPrintF>
    7f96:	   |   addq.l #4,sp
		skipBefore = 0;
    7f98:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7f9c:	   '-> move.l 200(sp),d0
    7fa0:	       sub.l 204(sp),d0
    7fa4:	       move.l d0,188(sp)
	while (skipBefore) {
    7fa8:	   ,-- bra.s 7fe6 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7faa:	,--|-> move.l 196(sp),24(sp)
    7fb0:	|  |   move.l 196(sp),-(sp)
    7fb4:	|  |   jsr 718 <get4bytes>
    7fba:	|  |   addq.l #4,sp
    7fbc:	|  |   move.l d0,20(sp)
    7fc0:	|  |   moveq #-1,d0
    7fc2:	|  |   move.l d0,16(sp)
    7fc6:	|  |   move.l 1d0ce <DOSBase>,d0
    7fcc:	|  |   movea.l d0,a6
    7fce:	|  |   move.l 24(sp),d1
    7fd2:	|  |   move.l 20(sp),d2
    7fd6:	|  |   move.l 16(sp),d3
    7fda:	|  |   jsr -66(a6)
    7fde:	|  |   move.l d0,12(sp)
		skipBefore --;
    7fe2:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7fe6:	|  '-> tst.l 204(sp)
    7fea:	'----- bne.s 7faa <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7fec:	       move.l 196(sp),152(sp)
    7ff2:	       clr.l 148(sp)
    7ff6:	       clr.l 144(sp)
    7ffa:	       move.l 1d0ce <DOSBase>,d0
    8000:	       movea.l d0,a6
    8002:	       move.l 152(sp),d1
    8006:	       move.l 148(sp),d2
    800a:	       move.l 144(sp),d3
    800e:	       jsr -66(a6)
    8012:	       move.l d0,140(sp)
    8016:	       move.l 140(sp),d0
    801a:	       addq.l #4,d0
    801c:	       move.l d0,1d0ba <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    8022:	       move.l 196(sp),136(sp)
    8028:	       move.l 196(sp),-(sp)
    802c:	       jsr 718 <get4bytes>
    8032:	       addq.l #4,sp
    8034:	       move.l d0,132(sp)
    8038:	       moveq #-1,d0
    803a:	       move.l d0,128(sp)
    803e:	       move.l 1d0ce <DOSBase>,d0
    8044:	       movea.l d0,a6
    8046:	       move.l 136(sp),d1
    804a:	       move.l 132(sp),d2
    804e:	       move.l 128(sp),d3
    8052:	       jsr -66(a6)
    8056:	       move.l d0,124(sp)

	while (skipAfter) {
    805a:	   ,-- bra.s 8098 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    805c:	,--|-> move.l 196(sp),40(sp)
    8062:	|  |   move.l 196(sp),-(sp)
    8066:	|  |   jsr 718 <get4bytes>
    806c:	|  |   addq.l #4,sp
    806e:	|  |   move.l d0,36(sp)
    8072:	|  |   moveq #-1,d0
    8074:	|  |   move.l d0,32(sp)
    8078:	|  |   move.l 1d0ce <DOSBase>,d0
    807e:	|  |   movea.l d0,a6
    8080:	|  |   move.l 40(sp),d1
    8084:	|  |   move.l 36(sp),d2
    8088:	|  |   move.l 32(sp),d3
    808c:	|  |   jsr -66(a6)
    8090:	|  |   move.l d0,28(sp)
		skipAfter --;
    8094:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    8098:	|  '-> tst.l 188(sp)
    809c:	'----- bne.s 805c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    809e:	       move.l 196(sp),120(sp)
    80a4:	       clr.l 116(sp)
    80a8:	       clr.l 112(sp)
    80ac:	       move.l 1d0ce <DOSBase>,d0
    80b2:	       movea.l d0,a6
    80b4:	       move.l 120(sp),d1
    80b8:	       move.l 116(sp),d2
    80bc:	       move.l 112(sp),d3
    80c0:	       jsr -66(a6)
    80c4:	       move.l d0,108(sp)
    80c8:	       move.l 108(sp),d0
    80cc:	       addq.l #4,d0
    80ce:	       move.l d0,1d0be <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    80d4:	       move.l 196(sp),104(sp)
    80da:	       move.l 196(sp),-(sp)
    80de:	       jsr 718 <get4bytes>
    80e4:	       addq.l #4,sp
    80e6:	       move.l d0,100(sp)
    80ea:	       clr.l 96(sp)
    80ee:	       move.l 1d0ce <DOSBase>,d0
    80f4:	       movea.l d0,a6
    80f6:	       move.l 104(sp),d1
    80fa:	       move.l 100(sp),d2
    80fe:	       move.l 96(sp),d3
    8102:	       jsr -66(a6)
    8106:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    810a:	       move.l 196(sp),88(sp)
    8110:	       clr.l 84(sp)
    8114:	       clr.l 80(sp)
    8118:	       move.l 1d0ce <DOSBase>,d0
    811e:	       movea.l d0,a6
    8120:	       move.l 88(sp),d1
    8124:	       move.l 84(sp),d2
    8128:	       move.l 80(sp),d3
    812c:	       jsr -66(a6)
    8130:	       move.l d0,76(sp)
    8134:	       move.l 76(sp),d0
    8138:	       addq.l #4,d0
    813a:	       move.l d0,1d0c2 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    8140:	       move.l 196(sp),72(sp)
    8146:	       move.l 196(sp),-(sp)
    814a:	       jsr 718 <get4bytes>
    8150:	       addq.l #4,sp
    8152:	       move.l d0,68(sp)
    8156:	       clr.l 64(sp)
    815a:	       move.l 1d0ce <DOSBase>,d0
    8160:	       movea.l d0,a6
    8162:	       move.l 72(sp),d1
    8166:	       move.l 68(sp),d2
    816a:	       move.l 64(sp),d3
    816e:	       jsr -66(a6)
    8172:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    8176:	       move.l 196(sp),56(sp)
    817c:	       clr.l 52(sp)
    8180:	       clr.l 48(sp)
    8184:	       move.l 1d0ce <DOSBase>,d0
    818a:	       movea.l d0,a6
    818c:	       move.l 56(sp),d1
    8190:	       move.l 52(sp),d2
    8194:	       move.l 48(sp),d3
    8198:	       jsr -66(a6)
    819c:	       move.l d0,44(sp)
    81a0:	       move.l 44(sp),d0
    81a4:	       move.l d0,1d0b6 <startOfDataIndex>
    81aa:	       nop
    81ac:	       movem.l (sp)+,d2-d3/a6
    81b0:	       lea 180(sp),sp
    81b4:	       rts

000081b6 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    81b6:	    lea -20(sp),sp
    81ba:	    move.l a6,-(sp)
    81bc:	    move.l d7,-(sp)
	APTR vbr = 0;
    81be:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    81c2:	    move.w #20090,10(sp)
    81c8:	    move.w #2049,12(sp)
    81ce:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    81d4:	    movea.l 1d0c6 <SysBase>,a0
    81da:	    move.w 296(a0),d0
    81de:	    move.w d0,d0
    81e0:	    andi.l #65535,d0
    81e6:	    moveq #1,d1
    81e8:	    and.l d1,d0
    81ea:	,-- beq.s 8218 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    81ec:	|   lea 28(sp),a0
    81f0:	|   lea -18(a0),a0
    81f4:	|   move.l a0,20(sp)
    81f8:	|   move.l 1d0c6 <SysBase>,d0
    81fe:	|   movea.l d0,a6
    8200:	|   move.l 20(sp),d7
    8204:	|   exg d7,a5
    8206:	|   jsr -30(a6)
    820a:	|   exg d7,a5
    820c:	|   move.l d0,16(sp)
    8210:	|   move.l 16(sp),d0
    8214:	|   move.l d0,24(sp)

	return vbr;
    8218:	'-> move.l 24(sp),d0
}
    821c:	    move.l (sp)+,d7
    821e:	    movea.l (sp)+,a6
    8220:	    lea 20(sp),sp
    8224:	    rts

00008226 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    8226:	movea.l 1d0ec <VBR>,a0
    822c:	lea 108(a0),a0
    8230:	move.l 4(sp),(a0)
}
    8234:	nop
    8236:	rts

00008238 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    8238:	movea.l 1d0ec <VBR>,a0
    823e:	move.l 108(a0),d0
}
    8242:	rts

00008244 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    8244:	       subq.l #8,sp
    8246:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    8248:	       pea 194ae <PutChar+0x1194>
    824e:	       jsr 17878 <KPrintF>
    8254:	       addq.l #4,sp
	Forbid();
    8256:	       move.l 1d0c6 <SysBase>,d0
    825c:	       movea.l d0,a6
    825e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    8262:	       pea 194c6 <PutChar+0x11ac>
    8268:	       jsr 17878 <KPrintF>
    826e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    8270:	       movea.l 1d0ca <custom>,a0
    8276:	       move.w 16(a0),d0
    827a:	       move.w d0,1d0ea <SystemADKCON>
	SystemInts=custom->intenar;
    8280:	       movea.l 1d0ca <custom>,a0
    8286:	       move.w 28(a0),d0
    828a:	       move.w d0,1d0e6 <SystemInts>
	SystemDMA=custom->dmaconr;
    8290:	       movea.l 1d0ca <custom>,a0
    8296:	       move.w 2(a0),d0
    829a:	       move.w d0,1d0e8 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    82a0:	       movea.l 1d0d2 <GfxBase>,a0
    82a6:	       move.l 34(a0),d0
    82aa:	       move.l d0,1d0f4 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    82b0:	       pea 194e4 <PutChar+0x11ca>
    82b6:	       jsr 17878 <KPrintF>
    82bc:	       addq.l #4,sp
	LoadView(0);
    82be:	       clr.l 4(sp)
    82c2:	       move.l 1d0d2 <GfxBase>,d0
    82c8:	       movea.l d0,a6
    82ca:	       movea.l 4(sp),a1
    82ce:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    82d2:	       pea 194fa <PutChar+0x11e0>
    82d8:	       jsr 17878 <KPrintF>
    82de:	       addq.l #4,sp
	WaitTOF();
    82e0:	       move.l 1d0d2 <GfxBase>,d0
    82e6:	       movea.l d0,a6
    82e8:	       jsr -270(a6)
	WaitTOF();
    82ec:	       move.l 1d0d2 <GfxBase>,d0
    82f2:	       movea.l d0,a6
    82f4:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    82f8:	       pea 1950f <PutChar+0x11f5>
    82fe:	       jsr 17878 <KPrintF>
    8304:	       addq.l #4,sp
	WaitVbl();
    8306:	       jsr 177ac <WaitVbl>
	WaitVbl();
    830c:	       jsr 177ac <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    8312:	       pea 19524 <PutChar+0x120a>
    8318:	       jsr 17878 <KPrintF>
    831e:	       addq.l #4,sp
	OwnBlitter();
    8320:	       move.l 1d0d2 <GfxBase>,d0
    8326:	       movea.l d0,a6
    8328:	       jsr -456(a6)
	WaitBlit();	
    832c:	       move.l 1d0d2 <GfxBase>,d0
    8332:	       movea.l d0,a6
    8334:	       jsr -228(a6)
	Disable();
    8338:	       move.l 1d0c6 <SysBase>,d0
    833e:	       movea.l d0,a6
    8340:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    8344:	       pea 19545 <PutChar+0x122b>
    834a:	       jsr 17878 <KPrintF>
    8350:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    8352:	       movea.l 1d0ca <custom>,a0
    8358:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    835e:	       pea 1955c <PutChar+0x1242>
    8364:	       jsr 17878 <KPrintF>
    836a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    836c:	       clr.l 8(sp)
    8370:	   ,-- bra.s 838e <TakeSystem+0x14a>
		custom->color[a]=0;
    8372:	,--|-> movea.l 1d0ca <custom>,a0
    8378:	|  |   move.l 8(sp),d0
    837c:	|  |   addi.l #192,d0
    8382:	|  |   add.l d0,d0
    8384:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    838a:	|  |   addq.l #1,8(sp)
    838e:	|  '-> moveq #31,d0
    8390:	|      cmp.l 8(sp),d0
    8394:	'----- bge.s 8372 <TakeSystem+0x12e>

	WaitVbl();
    8396:	       jsr 177ac <WaitVbl>
	WaitVbl();
    839c:	       jsr 177ac <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    83a2:	       pea 19581 <PutChar+0x1267>
    83a8:	       jsr 17878 <KPrintF>
    83ae:	       addq.l #4,sp
	VBR=GetVBR();
    83b0:	       jsr 81b6 <GetVBR>
    83b6:	       move.l d0,1d0ec <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    83bc:	       jsr 8238 <GetInterruptHandler>
    83c2:	       move.l d0,1d0f0 <SystemIrq>
}
    83c8:	       nop
    83ca:	       movea.l (sp)+,a6
    83cc:	       addq.l #8,sp
    83ce:	       rts

000083d0 <FreeSystem>:

void FreeSystem() { 
    83d0:	subq.l #4,sp
    83d2:	move.l a6,-(sp)
	WaitVbl();
    83d4:	jsr 177ac <WaitVbl>
	WaitBlit();
    83da:	move.l 1d0d2 <GfxBase>,d0
    83e0:	movea.l d0,a6
    83e2:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    83e6:	movea.l 1d0ca <custom>,a0
    83ec:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    83f2:	movea.l 1d0ca <custom>,a0
    83f8:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    83fe:	movea.l 1d0ca <custom>,a0
    8404:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    840a:	move.l 1d0f0 <SystemIrq>,d0
    8410:	move.l d0,-(sp)
    8412:	jsr 8226 <SetInterruptHandler>
    8418:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    841a:	movea.l 1d0d2 <GfxBase>,a0
    8420:	move.l 38(a0),d0
    8424:	movea.l 1d0ca <custom>,a0
    842a:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    842e:	movea.l 1d0d2 <GfxBase>,a0
    8434:	move.l 50(a0),d0
    8438:	movea.l 1d0ca <custom>,a0
    843e:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8442:	movea.l 1d0ca <custom>,a0
    8448:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    844e:	move.w 1d0e8 <SystemDMA>,d0
    8454:	movea.l 1d0ca <custom>,a0
    845a:	ori.w #-32768,d0
    845e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8462:	move.w 1d0ea <SystemADKCON>,d0
    8468:	movea.l 1d0ca <custom>,a0
    846e:	ori.w #-32768,d0
    8472:	move.w d0,158(a0)

	WaitBlit();	
    8476:	move.l 1d0d2 <GfxBase>,d0
    847c:	movea.l d0,a6
    847e:	jsr -228(a6)
	DisownBlitter();
    8482:	move.l 1d0d2 <GfxBase>,d0
    8488:	movea.l d0,a6
    848a:	jsr -462(a6)
	Enable();
    848e:	move.l 1d0c6 <SysBase>,d0
    8494:	movea.l d0,a6
    8496:	jsr -126(a6)

	LoadView(ActiView);
    849a:	move.l 1d0f4 <ActiView>,4(sp)
    84a2:	move.l 1d0d2 <GfxBase>,d0
    84a8:	movea.l d0,a6
    84aa:	movea.l 4(sp),a1
    84ae:	jsr -222(a6)
	WaitTOF();
    84b2:	move.l 1d0d2 <GfxBase>,d0
    84b8:	movea.l d0,a6
    84ba:	jsr -270(a6)
	WaitTOF();
    84be:	move.l 1d0d2 <GfxBase>,d0
    84c4:	movea.l d0,a6
    84c6:	jsr -270(a6)

	Permit();
    84ca:	move.l 1d0c6 <SysBase>,d0
    84d0:	movea.l d0,a6
    84d2:	jsr -138(a6)
}
    84d6:	nop
    84d8:	movea.l (sp)+,a6
    84da:	addq.l #4,sp
    84dc:	rts

000084de <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    84de:	       lea -132(sp),sp
    84e2:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    84e6:	       clr.l 140(sp)
    84ea:	   ,-- bra.s 84f0 <main+0x12>
    84ec:	,--|-> addq.l #1,140(sp)
    84f0:	|  '-> cmpi.l #999,140(sp)
    84f8:	'----- ble.s 84ec <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    84fa:	       movea.w #4,a0
    84fe:	       move.l (a0),d0
    8500:	       move.l d0,1d0c6 <SysBase>
	custom = (struct Custom*)0xdff000;	
    8506:	       move.l #14675968,1d0ca <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    8510:	       move.l #103845,136(sp)
    8518:	       clr.l 132(sp)
    851c:	       move.l 1d0c6 <SysBase>,d0
    8522:	       movea.l d0,a6
    8524:	       movea.l 136(sp),a1
    8528:	       move.l 132(sp),d0
    852c:	       jsr -552(a6)
    8530:	       move.l d0,128(sp)
    8534:	       move.l 128(sp),d0
    8538:	       move.l d0,1d0d2 <GfxBase>
	if (!GfxBase)
    853e:	       move.l 1d0d2 <GfxBase>,d0
    8544:	   ,-- bne.s 855a <main+0x7c>
		Exit(0);
    8546:	   |   clr.l 124(sp)
    854a:	   |   move.l 1d0ce <DOSBase>,d0
    8550:	   |   movea.l d0,a6
    8552:	   |   move.l 124(sp),d1
    8556:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    855a:	   '-> move.l #103862,120(sp)
    8562:	       clr.l 116(sp)
    8566:	       move.l 1d0c6 <SysBase>,d0
    856c:	       movea.l d0,a6
    856e:	       movea.l 120(sp),a1
    8572:	       move.l 116(sp),d0
    8576:	       jsr -552(a6)
    857a:	       move.l d0,112(sp)
    857e:	       move.l 112(sp),d0
    8582:	       move.l d0,1d0ce <DOSBase>
	if (!DOSBase)
    8588:	       move.l 1d0ce <DOSBase>,d0
    858e:	   ,-- bne.s 85a4 <main+0xc6>
		Exit(0);
    8590:	   |   clr.l 108(sp)
    8594:	   |   move.l 1d0ce <DOSBase>,d0
    859a:	   |   movea.l d0,a6
    859c:	   |   move.l 108(sp),d1
    85a0:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    85a4:	   '-> move.l #103874,104(sp)
    85ac:	       clr.l 100(sp)
    85b0:	       move.l 1d0c6 <SysBase>,d0
    85b6:	       movea.l d0,a6
    85b8:	       movea.l 104(sp),a1
    85bc:	       move.l 100(sp),d0
    85c0:	       jsr -552(a6)
    85c4:	       move.l d0,96(sp)
    85c8:	       move.l 96(sp),d0
    85cc:	       move.l d0,1d0d6 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    85d2:	       move.l 1d0d6 <MathIeeeSingBasBase>,d0
    85d8:	   ,-- bne.s 85ee <main+0x110>
		Exit(0);	
    85da:	   |   clr.l 92(sp)
    85de:	   |   move.l 1d0ce <DOSBase>,d0
    85e4:	   |   movea.l d0,a6
    85e6:	   |   move.l 92(sp),d1
    85ea:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    85ee:	   '-> move.l #103898,88(sp)
    85f6:	       clr.l 84(sp)
    85fa:	       move.l 1d0c6 <SysBase>,d0
    8600:	       movea.l d0,a6
    8602:	       movea.l 88(sp),a1
    8606:	       move.l 84(sp),d0
    860a:	       jsr -552(a6)
    860e:	       move.l d0,80(sp)
    8612:	       move.l 80(sp),d0
    8616:	       move.l d0,1d0da <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    861c:	       move.l 1d0da <MathIeeeSingTransBase>,d0
    8622:	   ,-- bne.s 8638 <main+0x15a>
		Exit(0);
    8624:	   |   clr.l 76(sp)
    8628:	   |   move.l 1d0ce <DOSBase>,d0
    862e:	   |   movea.l d0,a6
    8630:	   |   move.l 76(sp),d1
    8634:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8638:	   '-> move.l #103924,72(sp)
    8640:	       clr.l 68(sp)
    8644:	       move.l 1d0c6 <SysBase>,d0
    864a:	       movea.l d0,a6
    864c:	       movea.l 72(sp),a1
    8650:	       move.l 68(sp),d0
    8654:	       jsr -552(a6)
    8658:	       move.l d0,64(sp)
    865c:	       move.l 64(sp),d0
    8660:	       move.l d0,1d0e2 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8666:	       move.l 1d0e2 <MathIeeeDoubTransBase>,d0
    866c:	   ,-- bne.s 8682 <main+0x1a4>
		Exit(0);
    866e:	   |   clr.l 60(sp)
    8672:	   |   move.l 1d0ce <DOSBase>,d0
    8678:	   |   movea.l d0,a6
    867a:	   |   move.l 60(sp),d1
    867e:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8682:	   '-> move.l #103950,56(sp)
    868a:	       clr.l 52(sp)
    868e:	       move.l 1d0c6 <SysBase>,d0
    8694:	       movea.l d0,a6
    8696:	       movea.l 56(sp),a1
    869a:	       move.l 52(sp),d0
    869e:	       jsr -552(a6)
    86a2:	       move.l d0,48(sp)
    86a6:	       move.l 48(sp),d0
    86aa:	       move.l d0,1d0de <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    86b0:	       move.l 1d0de <MathIeeeDoubBasBase>,d0
    86b6:	   ,-- bne.s 86cc <main+0x1ee>
		Exit(0);
    86b8:	   |   clr.l 44(sp)
    86bc:	   |   move.l 1d0ce <DOSBase>,d0
    86c2:	   |   movea.l d0,a6
    86c4:	   |   move.l 44(sp),d1
    86c8:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    86cc:	   '-> pea 19626 <PutChar+0x130c>
    86d2:	       jsr 17878 <KPrintF>
    86d8:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    86da:	       move.l 1d0ce <DOSBase>,d0
    86e0:	       movea.l d0,a6
    86e2:	       jsr -60(a6)
    86e6:	       move.l d0,40(sp)
    86ea:	       move.l 40(sp),d0
    86ee:	       move.l d0,36(sp)
    86f2:	       move.l #104006,32(sp)
    86fa:	       moveq #25,d0
    86fc:	       move.l d0,28(sp)
    8700:	       move.l 1d0ce <DOSBase>,d0
    8706:	       movea.l d0,a6
    8708:	       move.l 36(sp),d1
    870c:	       move.l 32(sp),d2
    8710:	       move.l 28(sp),d3
    8714:	       jsr -48(a6)
    8718:	       move.l d0,24(sp)
	Delay(50);
    871c:	       moveq #50,d0
    871e:	       move.l d0,20(sp)
    8722:	       move.l 1d0ce <DOSBase>,d0
    8728:	       movea.l d0,a6
    872a:	       move.l 20(sp),d1
    872e:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8732:	       pea 1965f <PutChar+0x1345>
    8738:	       jsr 17878 <KPrintF>
    873e:	       addq.l #4,sp
	TakeSystem();
    8740:	       jsr 8244 <TakeSystem>
	KPrintF("System Taken\n");
    8746:	       pea 1966e <PutChar+0x1354>
    874c:	       jsr 17878 <KPrintF>
    8752:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8754:	       movea.l 1d0ca <custom>,a0
    875a:	       move.w #-30721,150(a0)
	WaitVbl();
    8760:	       jsr 177ac <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8766:	       pea 1967c <PutChar+0x1362>
    876c:	       jsr 17878 <KPrintF>
    8772:	       addq.l #4,sp
	main_sludge(argc, argv);	
    8774:	       move.l 152(sp),-(sp)
    8778:	       move.l 152(sp),-(sp)
    877c:	       jsr 4f64 <main_sludge>
    8782:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8784:	       jsr 83d0 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    878a:	       move.l 1d0ce <DOSBase>,16(sp)
    8792:	       move.l 1d0c6 <SysBase>,d0
    8798:	       movea.l d0,a6
    879a:	       movea.l 16(sp),a1
    879e:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    87a2:	       move.l 1d0d2 <GfxBase>,12(sp)
    87aa:	       move.l 1d0c6 <SysBase>,d0
    87b0:	       movea.l d0,a6
    87b2:	       movea.l 12(sp),a1
    87b6:	       jsr -414(a6)
    87ba:	       moveq #0,d0
}
    87bc:	       movem.l (sp)+,d2-d3/a6
    87c0:	       lea 132(sp),sp
    87c4:	       rts

000087c6 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    87c6:	    lea -16(sp),sp
    87ca:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    87cc:	    moveq #8,d0
    87ce:	    move.l d0,16(sp)
    87d2:	    clr.l 12(sp)
    87d6:	    move.l 1d0c6 <SysBase>,d0
    87dc:	    movea.l d0,a6
    87de:	    move.l 16(sp),d0
    87e2:	    move.l 12(sp),d1
    87e6:	    jsr -684(a6)
    87ea:	    move.l d0,8(sp)
    87ee:	    move.l 8(sp),d0
    87f2:	    move.l d0,4(sp)
	if (!newStat) {
    87f6:	,-- bne.s 8826 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    87f8:	|   movea.l 1ca44 <nowStatus>,a0
    87fe:	|   move.l (a0),d0
    8800:	|   movea.l 4(sp),a0
    8804:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8808:	|   pea 1908e <PutChar+0xd74>
    880e:	|   jsr b8 <copyString>
    8814:	|   addq.l #4,sp
    8816:	|   movea.l 4(sp),a0
    881a:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    881c:	|   movea.l 1ca44 <nowStatus>,a0
    8822:	|   move.l 4(sp),(a0)
	}
}
    8826:	'-> nop
    8828:	    movea.l (sp)+,a6
    882a:	    lea 16(sp),sp
    882e:	    rts

00008830 <clearStatusBar>:

void clearStatusBar () {
    8830:	       lea -16(sp),sp
    8834:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8836:	       movea.l 1ca44 <nowStatus>,a0
    883c:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8840:	       movea.l 1ca44 <nowStatus>,a0
    8846:	       moveq #-1,d0
    8848:	       move.l d0,6(a0)
	while (stat) {
    884c:	   ,-- bra.s 888c <clearStatusBar+0x5c>
		kill = stat;
    884e:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8854:	|  |   movea.l 16(sp),a0
    8858:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    885e:	|  |   movea.l 12(sp),a0
    8862:	|  |   move.l (a0),8(sp)
    8866:	|  |   move.l 1d0c6 <SysBase>,d0
    886c:	|  |   movea.l d0,a6
    886e:	|  |   movea.l 8(sp),a1
    8872:	|  |   jsr -690(a6)
		FreeVec(kill);
    8876:	|  |   move.l 12(sp),4(sp)
    887c:	|  |   move.l 1d0c6 <SysBase>,d0
    8882:	|  |   movea.l d0,a6
    8884:	|  |   movea.l 4(sp),a1
    8888:	|  |   jsr -690(a6)
	while (stat) {
    888c:	|  '-> tst.l 16(sp)
    8890:	'----- bne.s 884e <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8892:	       movea.l 1ca44 <nowStatus>,a0
    8898:	       clr.l (a0)
}
    889a:	       nop
    889c:	       movea.l (sp)+,a6
    889e:	       lea 16(sp),sp
    88a2:	       rts

000088a4 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    88a4:	clr.l 1d0f8 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    88aa:	move.w #-1,1d0fc <mainStatus+0x4>
	mainStatus.litStatus = -1;
    88b2:	moveq #-1,d0
    88b4:	move.l d0,1d0fe <mainStatus+0x6>
	mainStatus.statusX = 10;
    88ba:	moveq #10,d0
    88bc:	move.l d0,1d102 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    88c2:	movea.l 1d01e <winHeight>,a0
    88c8:	lea -15(a0),a0
    88cc:	move.l a0,d0
    88ce:	move.l d0,1d106 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    88d4:	nop
    88d6:	rts

000088d8 <killLastStatus>:

void killLastStatus () {
    88d8:	    lea -12(sp),sp
    88dc:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    88de:	    movea.l 1ca44 <nowStatus>,a0
    88e4:	    move.l (a0),d0
    88e6:	,-- beq.s 8930 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    88e8:	|   movea.l 1ca44 <nowStatus>,a0
    88ee:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    88f2:	|   movea.l 1ca44 <nowStatus>,a0
    88f8:	|   movea.l 12(sp),a1
    88fc:	|   move.l 4(a1),d0
    8900:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8902:	|   movea.l 12(sp),a0
    8906:	|   move.l (a0),8(sp)
    890a:	|   move.l 1d0c6 <SysBase>,d0
    8910:	|   movea.l d0,a6
    8912:	|   movea.l 8(sp),a1
    8916:	|   jsr -690(a6)
		FreeVec(kill);
    891a:	|   move.l 12(sp),4(sp)
    8920:	|   move.l 1d0c6 <SysBase>,d0
    8926:	|   movea.l d0,a6
    8928:	|   movea.l 4(sp),a1
    892c:	|   jsr -690(a6)
	}
}
    8930:	'-> nop
    8932:	    movea.l (sp)+,a6
    8934:	    lea 12(sp),sp
    8938:	    rts

0000893a <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    893a:	movea.l 1ca44 <nowStatus>,a0
    8940:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8946:	movea.l 1ca44 <nowStatus>,a0
    894c:	move.l 8(sp),14(a0)
}
    8952:	nop
    8954:	rts

00008956 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8956:	       lea -100(sp),sp
    895a:	       move.l a6,-(sp)
    895c:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    895e:	       movea.l 1ca44 <nowStatus>,a0
    8964:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8968:	       movea.l 1ca44 <nowStatus>,a0
    896e:	       move.w 4(a0),d0
    8972:	       move.w d0,d0
    8974:	       andi.l #65535,d0
    897a:	       move.l 112(sp),-(sp)
    897e:	       move.l d0,-(sp)
    8980:	       jsr 8d0 <put2bytes>
    8986:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8988:	       movea.l 1ca44 <nowStatus>,a0
    898e:	       move.l 6(a0),d0
    8992:	       move.l d0,d0
    8994:	       movea.w d0,a0
    8996:	       move.l 112(sp),-(sp)
    899a:	       move.l a0,-(sp)
    899c:	       jsr a9c <putSigned>
    89a2:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    89a4:	       movea.l 1ca44 <nowStatus>,a0
    89aa:	       move.l 10(a0),d0
    89ae:	       move.l 112(sp),-(sp)
    89b2:	       move.l d0,-(sp)
    89b4:	       jsr 8d0 <put2bytes>
    89ba:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    89bc:	       movea.l 1ca44 <nowStatus>,a0
    89c2:	       move.l 14(a0),d0
    89c6:	       move.l 112(sp),-(sp)
    89ca:	       move.l d0,-(sp)
    89cc:	       jsr 8d0 <put2bytes>
    89d2:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    89d4:	       move.l 112(sp),100(sp)
    89da:	       movea.l 1ca44 <nowStatus>,a0
    89e0:	       move.l 18(a0),96(sp)
    89e6:	       move.l 1d0ce <DOSBase>,d0
    89ec:	       movea.l d0,a6
    89ee:	       move.l 100(sp),d1
    89f2:	       move.l 96(sp),d2
    89f6:	       jsr -312(a6)
    89fa:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    89fe:	       move.l 112(sp),88(sp)
    8a04:	       movea.l 1ca44 <nowStatus>,a0
    8a0a:	       move.l 22(a0),84(sp)
    8a10:	       move.l 1d0ce <DOSBase>,d0
    8a16:	       movea.l d0,a6
    8a18:	       move.l 88(sp),d1
    8a1c:	       move.l 84(sp),d2
    8a20:	       jsr -312(a6)
    8a24:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8a28:	       move.l 112(sp),76(sp)
    8a2e:	       movea.l 1ca44 <nowStatus>,a0
    8a34:	       move.l 26(a0),72(sp)
    8a3a:	       move.l 1d0ce <DOSBase>,d0
    8a40:	       movea.l d0,a6
    8a42:	       move.l 76(sp),d1
    8a46:	       move.l 72(sp),d2
    8a4a:	       jsr -312(a6)
    8a4e:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8a52:	       move.l 112(sp),64(sp)
    8a58:	       movea.l 1ca44 <nowStatus>,a0
    8a5e:	       move.l 30(a0),60(sp)
    8a64:	       move.l 1d0ce <DOSBase>,d0
    8a6a:	       movea.l d0,a6
    8a6c:	       move.l 64(sp),d1
    8a70:	       move.l 60(sp),d2
    8a74:	       jsr -312(a6)
    8a78:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8a7c:	       move.l 112(sp),52(sp)
    8a82:	       movea.l 1ca44 <nowStatus>,a0
    8a88:	       move.l 34(a0),48(sp)
    8a8e:	       move.l 1d0ce <DOSBase>,d0
    8a94:	       movea.l d0,a6
    8a96:	       move.l 52(sp),d1
    8a9a:	       move.l 48(sp),d2
    8a9e:	       jsr -312(a6)
    8aa2:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8aa6:	       move.l 112(sp),40(sp)
    8aac:	       movea.l 1ca44 <nowStatus>,a0
    8ab2:	       move.l 38(a0),36(sp)
    8ab8:	       move.l 1d0ce <DOSBase>,d0
    8abe:	       movea.l d0,a6
    8ac0:	       move.l 40(sp),d1
    8ac4:	       move.l 36(sp),d2
    8ac8:	       jsr -312(a6)
    8acc:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8ad0:	   ,-- bra.s 8b14 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8ad2:	,--|-> move.l 112(sp),16(sp)
    8ad8:	|  |   moveq #1,d0
    8ada:	|  |   move.l d0,12(sp)
    8ade:	|  |   move.l 1d0ce <DOSBase>,d0
    8ae4:	|  |   movea.l d0,a6
    8ae6:	|  |   move.l 16(sp),d1
    8aea:	|  |   move.l 12(sp),d2
    8aee:	|  |   jsr -312(a6)
    8af2:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8af6:	|  |   movea.l 104(sp),a0
    8afa:	|  |   move.l (a0),d0
    8afc:	|  |   move.l 112(sp),-(sp)
    8b00:	|  |   move.l d0,-(sp)
    8b02:	|  |   jsr bd8 <writeString>
    8b08:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8b0a:	|  |   movea.l 104(sp),a0
    8b0e:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8b14:	|  '-> tst.l 104(sp)
    8b18:	'----- bne.s 8ad2 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8b1a:	       move.l 112(sp),28(sp)
    8b20:	       clr.l 24(sp)
    8b24:	       move.l 1d0ce <DOSBase>,d0
    8b2a:	       movea.l d0,a6
    8b2c:	       move.l 28(sp),d1
    8b30:	       move.l 24(sp),d2
    8b34:	       jsr -312(a6)
    8b38:	       move.l d0,20(sp)
}
    8b3c:	       nop
    8b3e:	       move.l (sp)+,d2
    8b40:	       movea.l (sp)+,a6
    8b42:	       lea 100(sp),sp
    8b46:	       rts

00008b48 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8b48:	movea.l 1ca44 <nowStatus>,a0
    8b4e:	move.l 4(sp),6(a0)
}
    8b54:	nop
    8b56:	rts

00008b58 <setStatusBar>:

void setStatusBar (char * txt) {
    8b58:	    subq.l #4,sp
    8b5a:	    move.l a6,-(sp)
    8b5c:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8b5e:	    movea.l 1ca44 <nowStatus>,a0
    8b64:	    move.l (a0),d0
    8b66:	,-- beq.s 8b9a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8b68:	|   movea.l 1ca44 <nowStatus>,a0
    8b6e:	|   movea.l (a0),a0
    8b70:	|   move.l (a0),8(sp)
    8b74:	|   move.l 1d0c6 <SysBase>,d0
    8b7a:	|   movea.l d0,a6
    8b7c:	|   movea.l 8(sp),a1
    8b80:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8b84:	|   movea.l 1ca44 <nowStatus>,a0
    8b8a:	|   movea.l (a0),a2
    8b8c:	|   move.l 16(sp),-(sp)
    8b90:	|   jsr b8 <copyString>
    8b96:	|   addq.l #4,sp
    8b98:	|   move.l d0,(a2)
	}
}
    8b9a:	'-> nop
    8b9c:	    movea.l (sp)+,a2
    8b9e:	    movea.l (sp)+,a6
    8ba0:	    addq.l #4,sp
    8ba2:	    rts

00008ba4 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8ba4:	       movea.l 1ca44 <nowStatus>,a0
    8baa:	       move.l (a0),d0
    8bac:	,----- beq.s 8bba <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8bae:	|      movea.l 1ca44 <nowStatus>,a0
    8bb4:	|      movea.l (a0),a0
    8bb6:	|      move.l (a0),d0
    8bb8:	|  ,-- bra.s 8bc0 <statusBarText+0x1c>
	} else {
		return "";
    8bba:	'--|-> move.l #102542,d0
	}
    8bc0:	   '-> rts

00008bc2 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8bc2:	       lea -12(sp),sp
    8bc6:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8bc8:	       move.l 1d122 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8bd0:	   ,-- bra.s 8bf8 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8bd2:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8bd8:	|  |   movea.l 12(sp),a0
    8bdc:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8be2:	|  |   move.l 8(sp),4(sp)
    8be8:	|  |   move.l 1d0c6 <SysBase>,d0
    8bee:	|  |   movea.l d0,a6
    8bf0:	|  |   movea.l 4(sp),a1
    8bf4:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8bf8:	|  '-> tst.l 12(sp)
    8bfc:	'----- bne.s 8bd2 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8bfe:	       clr.l 1d122 <zBuffer>
}
    8c04:	       nop
    8c06:	       movea.l (sp)+,a6
    8c08:	       lea 12(sp),sp
    8c0c:	       rts

00008c0e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8c0e:	                lea -304(sp),sp
    8c12:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8c16:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8c1a:	                jsr 8bc2 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8c20:	                move.l 328(sp),d0
    8c24:	                move.l d0,-(sp)
    8c26:	                jsr 7cac <openFileFromNum>
    8c2c:	                addq.l #4,sp
    8c2e:	                tst.l d0
    8c30:	            ,-- bne.s 8c38 <setZBuffer+0x2a>
    8c32:	            |   clr.w d0
    8c34:	,-----------|-- bra.w 8ef6 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8c38:	|           '-> move.l 1d0ae <bigDataFile>,310(sp)
    8c40:	|               move.l 1d0ce <DOSBase>,d0
    8c46:	|               movea.l d0,a6
    8c48:	|               move.l 310(sp),d1
    8c4c:	|               jsr -306(a6)
    8c50:	|               move.l d0,306(sp)
    8c54:	|               move.l 306(sp),d0
    8c58:	|               moveq #97,d1
    8c5a:	|               cmp.l d0,d1
    8c5c:	|        ,----- bne.s 8cd0 <setZBuffer+0xc2>
    8c5e:	|        |      move.l 1d0ae <bigDataFile>,302(sp)
    8c66:	|        |      move.l 1d0ce <DOSBase>,d0
    8c6c:	|        |      movea.l d0,a6
    8c6e:	|        |      move.l 302(sp),d1
    8c72:	|        |      jsr -306(a6)
    8c76:	|        |      move.l d0,298(sp)
    8c7a:	|        |      move.l 298(sp),d0
    8c7e:	|        |      moveq #115,d1
    8c80:	|        |      cmp.l d0,d1
    8c82:	|        +----- bne.s 8cd0 <setZBuffer+0xc2>
    8c84:	|        |      move.l 1d0ae <bigDataFile>,294(sp)
    8c8c:	|        |      move.l 1d0ce <DOSBase>,d0
    8c92:	|        |      movea.l d0,a6
    8c94:	|        |      move.l 294(sp),d1
    8c98:	|        |      jsr -306(a6)
    8c9c:	|        |      move.l d0,290(sp)
    8ca0:	|        |      move.l 290(sp),d0
    8ca4:	|        |      moveq #122,d1
    8ca6:	|        |      cmp.l d0,d1
    8ca8:	|        +----- bne.s 8cd0 <setZBuffer+0xc2>
    8caa:	|        |      move.l 1d0ae <bigDataFile>,286(sp)
    8cb2:	|        |      move.l 1d0ce <DOSBase>,d0
    8cb8:	|        |      movea.l d0,a6
    8cba:	|        |      move.l 286(sp),d1
    8cbe:	|        |      jsr -306(a6)
    8cc2:	|        |      move.l d0,282(sp)
    8cc6:	|        |      move.l 282(sp),d0
    8cca:	|        |      moveq #98,d1
    8ccc:	|        |      cmp.l d0,d1
    8cce:	|        |  ,-- beq.s 8ce4 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8cd0:	|        '--|-> pea 196b9 <PutChar+0x139f>
    8cd6:	|           |   jsr 17878 <KPrintF>
    8cdc:	|           |   addq.l #4,sp
		 return FALSE;
    8cde:	|           |   clr.w d0
    8ce0:	+-----------|-- bra.w 8ef6 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8ce4:	|           '-> move.l 1d0ae <bigDataFile>,278(sp)
    8cec:	|               move.l 1d0ce <DOSBase>,d0
    8cf2:	|               movea.l d0,a6
    8cf4:	|               move.l 278(sp),d1
    8cf8:	|               jsr -306(a6)
    8cfc:	|               move.l d0,274(sp)
    8d00:	|               move.l 274(sp),d0
    8d04:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8d08:	|               moveq #28,d0
    8d0a:	|               move.l d0,270(sp)
    8d0e:	|               clr.l 266(sp)
    8d12:	|               move.l 1d0c6 <SysBase>,d0
    8d18:	|               movea.l d0,a6
    8d1a:	|               move.l 270(sp),d0
    8d1e:	|               move.l 266(sp),d1
    8d22:	|               jsr -684(a6)
    8d26:	|               move.l d0,262(sp)
    8d2a:	|               move.l 262(sp),d0
    8d2e:	|               move.l d0,1d122 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8d34:	|               move.l 1d122 <zBuffer>,318(sp)

	while(numelements--)
    8d3c:	|     ,-------- bra.w 8edc <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8d40:	|  ,--|-------> move.l 1d0ae <bigDataFile>,d0
    8d46:	|  |  |         move.l d0,-(sp)
    8d48:	|  |  |         jsr 6bc <get2bytes>
    8d4e:	|  |  |         addq.l #4,sp
    8d50:	|  |  |         movea.l 318(sp),a0
    8d54:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8d56:	|  |  |         move.l 1d0ae <bigDataFile>,d0
    8d5c:	|  |  |         move.l d0,-(sp)
    8d5e:	|  |  |         jsr 6bc <get2bytes>
    8d64:	|  |  |         addq.l #4,sp
    8d66:	|  |  |         movea.l 318(sp),a0
    8d6a:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8d6e:	|  |  |         move.l 1d0ae <bigDataFile>,d0
    8d74:	|  |  |         move.l d0,-(sp)
    8d76:	|  |  |         jsr 6bc <get2bytes>
    8d7c:	|  |  |         addq.l #4,sp
    8d7e:	|  |  |         movea.l 318(sp),a0
    8d82:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8d86:	|  |  |         move.l 1d0ae <bigDataFile>,d0
    8d8c:	|  |  |         move.l d0,-(sp)
    8d8e:	|  |  |         jsr 6bc <get2bytes>
    8d94:	|  |  |         addq.l #4,sp
    8d96:	|  |  |         movea.l 318(sp),a0
    8d9a:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8d9e:	|  |  |         move.l 1d0ae <bigDataFile>,d0
    8da4:	|  |  |         move.l d0,-(sp)
    8da6:	|  |  |         jsr 6bc <get2bytes>
    8dac:	|  |  |         addq.l #4,sp
    8dae:	|  |  |         movea.l 318(sp),a0
    8db2:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8db6:	|  |  |         movea.l 318(sp),a0
    8dba:	|  |  |         move.l (a0),d0
    8dbc:	|  |  |         movea.l 318(sp),a0
    8dc0:	|  |  |         move.l 4(a0),d1
    8dc4:	|  |  |         move.l d1,-(sp)
    8dc6:	|  |  |         move.l d0,-(sp)
    8dc8:	|  |  |         jsr 18204 <__mulsi3>
    8dce:	|  |  |         addq.l #8,sp
    8dd0:	|  |  |         tst.l d0
    8dd2:	|  |  |     ,-- bge.s 8dd6 <setZBuffer+0x1c8>
    8dd4:	|  |  |     |   addq.l #7,d0
    8dd6:	|  |  |     '-> asr.l #3,d0
    8dd8:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8ddc:	|  |  |         moveq #0,d0
    8dde:	|  |  |         move.w 260(sp),d0
    8de2:	|  |  |         move.l d0,256(sp)
    8de6:	|  |  |         moveq #2,d1
    8de8:	|  |  |         move.l d1,252(sp)
    8dec:	|  |  |         move.l 1d0c6 <SysBase>,d0
    8df2:	|  |  |         movea.l d0,a6
    8df4:	|  |  |         move.l 256(sp),d0
    8df8:	|  |  |         move.l 252(sp),d1
    8dfc:	|  |  |         jsr -684(a6)
    8e00:	|  |  |         move.l d0,248(sp)
    8e04:	|  |  |         move.l 248(sp),d0
    8e08:	|  |  |         movea.l 318(sp),a0
    8e0c:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8e10:	|  |  |         move.l 1d0ae <bigDataFile>,244(sp)
    8e18:	|  |  |         movea.l 318(sp),a0
    8e1c:	|  |  |         move.l 20(a0),240(sp)
    8e22:	|  |  |         moveq #1,d0
    8e24:	|  |  |         move.l d0,236(sp)
    8e28:	|  |  |         moveq #0,d0
    8e2a:	|  |  |         move.w 260(sp),d0
    8e2e:	|  |  |         move.l d0,232(sp)
    8e32:	|  |  |         move.l 1d0ce <DOSBase>,d0
    8e38:	|  |  |         movea.l d0,a6
    8e3a:	|  |  |         move.l 244(sp),d1
    8e3e:	|  |  |         move.l 240(sp),d2
    8e42:	|  |  |         move.l 236(sp),d3
    8e46:	|  |  |         move.l 232(sp),d4
    8e4a:	|  |  |         jsr -324(a6)
    8e4e:	|  |  |         move.l d0,228(sp)
    8e52:	|  |  |         move.l 228(sp),d0
    8e56:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8e5a:	|  |  |         tst.w 322(sp)
    8e5e:	|  |  |  ,----- beq.s 8e9a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8e60:	|  |  |  |      moveq #28,d1
    8e62:	|  |  |  |      move.l d1,222(sp)
    8e66:	|  |  |  |      clr.l 218(sp)
    8e6a:	|  |  |  |      move.l 1d0c6 <SysBase>,d0
    8e70:	|  |  |  |      movea.l d0,a6
    8e72:	|  |  |  |      move.l 222(sp),d0
    8e76:	|  |  |  |      move.l 218(sp),d1
    8e7a:	|  |  |  |      jsr -684(a6)
    8e7e:	|  |  |  |      move.l d0,214(sp)
    8e82:	|  |  |  |      move.l 214(sp),d0
    8e86:	|  |  |  |      movea.l 318(sp),a0
    8e8a:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8e8e:	|  |  |  |      movea.l 318(sp),a0
    8e92:	|  |  |  |      move.l 24(a0),318(sp)
    8e98:	|  |  |  |  ,-- bra.s 8ea2 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8e9a:	|  |  |  '--|-> movea.l 318(sp),a0
    8e9e:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8ea2:	|  |  |     '-> movea.l 318(sp),a0
    8ea6:	|  |  |         move.l 4(a0),d0
    8eaa:	|  |  |         move.l d0,d0
    8eac:	|  |  |         movea.w d0,a1
    8eae:	|  |  |         movea.l 318(sp),a0
    8eb2:	|  |  |         move.l (a0),d0
    8eb4:	|  |  |         move.l d0,d0
    8eb6:	|  |  |         movea.w d0,a0
    8eb8:	|  |  |         movea.l 318(sp),a2
    8ebc:	|  |  |         move.l 20(a2),d0
    8ec0:	|  |  |         clr.l -(sp)
    8ec2:	|  |  |         pea 1 <_start+0x1>
    8ec6:	|  |  |         move.l a1,-(sp)
    8ec8:	|  |  |         move.l a0,-(sp)
    8eca:	|  |  |         pea 196cd <PutChar+0x13b3>
    8ed0:	|  |  |         move.l d0,-(sp)
    8ed2:	|  |  |         jsr 17960 <debug_register_bitmap>
    8ed8:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8edc:	|  |  '-------> move.w 322(sp),d0
    8ee0:	|  |            move.w d0,d1
    8ee2:	|  |            subq.w #1,d1
    8ee4:	|  |            move.w d1,322(sp)
    8ee8:	|  |            tst.w d0
    8eea:	|  '----------- bne.w 8d40 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8eee:	|               jsr 7ba4 <finishAccess>
	
	return TRUE;
    8ef4:	|               moveq #1,d0
}
    8ef6:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8efa:	                lea 304(sp),sp
    8efe:	                rts

00008f00 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8f00:	          lea -32(sp),sp
    8f04:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8f06:	          move.l 40(sp),d0
    8f0a:	          addq.l #8,d0
    8f0c:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8f10:	          clr.l 32(sp)
    8f14:	   ,----- bra.s 8f5a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8f16:	,--|----> movea.l 24(sp),a0
    8f1a:	|  |      movea.l 8(a0),a0
    8f1e:	|  |      move.l 32(sp),d1
    8f22:	|  |      move.l d1,d0
    8f24:	|  |      lsl.l #3,d0
    8f26:	|  |      sub.l d1,d0
    8f28:	|  |      add.l d0,d0
    8f2a:	|  |      add.l d0,d0
    8f2c:	|  |      adda.l d0,a0
    8f2e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8f32:	|  |      movea.l 8(sp),a0
    8f36:	|  |      move.l 24(a0),d0
    8f3a:	|  |  ,-- beq.s 8f56 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8f3c:	|  |  |   movea.l 8(sp),a0
    8f40:	|  |  |   move.l 24(a0),4(sp)
    8f46:	|  |  |   move.l 1d0c6 <SysBase>,d0
    8f4c:	|  |  |   movea.l d0,a6
    8f4e:	|  |  |   movea.l 4(sp),a1
    8f52:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8f56:	|  |  '-> addq.l #1,32(sp)
    8f5a:	|  '----> movea.l 24(sp),a0
    8f5e:	|         move.l (a0),d0
    8f60:	|         cmp.l 32(sp),d0
    8f64:	'-------- bgt.s 8f16 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8f66:	          movea.l 24(sp),a0
    8f6a:	          move.l 8(a0),20(sp)
    8f70:	          move.l 1d0c6 <SysBase>,d0
    8f76:	          movea.l d0,a6
    8f78:	          movea.l 20(sp),a1
    8f7c:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8f80:	          move.l 1d1da <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8f88:	      ,-- bra.s 8f94 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8f8a:	   ,--|-> movea.l 28(sp),a0
    8f8e:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8f94:	   |  '-> movea.l 28(sp),a0
    8f98:	   |      movea.l 22(a0),a0
    8f9c:	   |      move.l (a0),d1
    8f9e:	   |      movea.l 40(sp),a0
    8fa2:	   |      move.l (a0),d0
    8fa4:	   |      cmp.l d1,d0
    8fa6:	   |  ,-- beq.s 8fae <forgetSpriteBank+0xae>
    8fa8:	   |  |   tst.l 28(sp)
    8fac:	   '--|-- bne.s 8f8a <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8fae:	      '-> tst.l 28(sp)
    8fb2:	   ,----- beq.s 8fdc <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8fb4:	   |      movea.l 40(sp),a0
    8fb8:	   |      move.l 22(a0),d0
    8fbc:	   |      movea.l 28(sp),a0
    8fc0:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8fc4:	   |      move.l 40(sp),12(sp)
    8fca:	   |      move.l 1d0c6 <SysBase>,d0
    8fd0:	   |      movea.l d0,a6
    8fd2:	   |      movea.l 12(sp),a1
    8fd6:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8fda:	   |  ,-- bra.s 9002 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8fdc:	   '--|-> movea.l 1d1da <allLoadedBanks>,a0
    8fe2:	      |   move.l 22(a0),d0
    8fe6:	      |   move.l d0,1d1da <allLoadedBanks>
		FreeVec( forgetme);
    8fec:	      |   move.l 40(sp),16(sp)
    8ff2:	      |   move.l 1d0c6 <SysBase>,d0
    8ff8:	      |   movea.l d0,a6
    8ffa:	      |   movea.l 16(sp),a1
    8ffe:	      |   jsr -690(a6)
}
    9002:	      '-> nop
    9004:	          movea.l (sp)+,a6
    9006:	          lea 32(sp),sp
    900a:	          rts

0000900c <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    900c:	                      lea -84(sp),sp
    9010:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    9014:	                      pea 196d9 <PutChar+0x13bf>
    901a:	                      jsr 17878 <KPrintF>
    9020:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    9022:	                      clr.l 94(sp)
    9026:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    902a:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    902e:	                      move.l 108(sp),-(sp)
    9032:	                      jsr 7cac <openFileFromNum>
    9038:	                      addq.l #4,sp
    903a:	                      tst.l d0
    903c:	                  ,-- bne.s 9052 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    903e:	                  |   pea 196f3 <PutChar+0x13d9>
    9044:	                  |   jsr 17878 <KPrintF>
    904a:	                  |   addq.l #4,sp
		return FALSE;
    904c:	                  |   clr.w d0
    904e:	,-----------------|-- bra.w 9446 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    9052:	|                 '-> move.l 1d0ae <bigDataFile>,d0
    9058:	|                     move.l d0,-(sp)
    905a:	|                     jsr 6bc <get2bytes>
    9060:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    9062:	|                     move.l 1d0ae <bigDataFile>,82(sp)
    906a:	|                     move.l 1d0ce <DOSBase>,d0
    9070:	|                     movea.l d0,a6
    9072:	|                     move.l 82(sp),d1
    9076:	|                     jsr -306(a6)
    907a:	|                     move.l d0,78(sp)
    907e:	|                     move.l 78(sp),d0
    9082:	|                     movea.l 112(sp),a0
    9086:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    908a:	|                     move.l 1d0ae <bigDataFile>,d0
    9090:	|                     move.l d0,-(sp)
    9092:	|                     jsr 6bc <get2bytes>
    9098:	|                     addq.l #4,sp
    909a:	|                     move.l d0,74(sp)

	if (total <= 0) {
    909e:	|                 ,-- bgt.s 90b4 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    90a0:	|                 |   pea 19721 <PutChar+0x1407>
    90a6:	|                 |   jsr 17878 <KPrintF>
    90ac:	|                 |   addq.l #4,sp
		return FALSE;
    90ae:	|                 |   clr.w d0
    90b0:	+-----------------|-- bra.w 9446 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    90b4:	|                 '-> movea.l 112(sp),a0
    90b8:	|                     move.l 4(a0),d0
    90bc:	|                     moveq #3,d1
    90be:	|                     cmp.l d0,d1
    90c0:	|                 ,-- bne.s 90ce <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    90c2:	|                 |   movea.l 112(sp),a0
    90c6:	|                 |   move.w #1,12(a0)
    90cc:	|              ,--|-- bra.s 90f0 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    90ce:	|              |  '-> movea.l 112(sp),a0
    90d2:	|              |      move.l 4(a0),d0
    90d6:	|              |      moveq #3,d1
    90d8:	|              |      cmp.l d0,d1
    90da:	|              +----- bge.s 90f0 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    90dc:	|              |      pea 19761 <PutChar+0x1447>
    90e2:	|              |      jsr 17878 <KPrintF>
    90e8:	|              |      addq.l #4,sp
		return FALSE;
    90ea:	|              |      clr.w d0
    90ec:	+--------------|----- bra.w 9446 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    90f0:	|              '----> movea.l 112(sp),a0
    90f4:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    90f8:	|                     move.l 74(sp),d1
    90fc:	|                     move.l d1,d0
    90fe:	|                     lsl.l #3,d0
    9100:	|                     sub.l d1,d0
    9102:	|                     add.l d0,d0
    9104:	|                     add.l d0,d0
    9106:	|                     move.l d0,70(sp)
    910a:	|                     clr.l 66(sp)
    910e:	|                     move.l 1d0c6 <SysBase>,d0
    9114:	|                     movea.l d0,a6
    9116:	|                     move.l 70(sp),d0
    911a:	|                     move.l 66(sp),d1
    911e:	|                     jsr -684(a6)
    9122:	|                     move.l d0,62(sp)
    9126:	|                     move.l 62(sp),d0
    912a:	|                     movea.l 112(sp),a0
    912e:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    9132:	|                     movea.l 112(sp),a0
    9136:	|                     move.l 8(a0),d0
    913a:	|                 ,-- bne.s 9142 <loadSpriteBank+0x136>
    913c:	|                 |   clr.w d0
    913e:	+-----------------|-- bra.w 9446 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    9142:	|                 '-> moveq #1,d0
    9144:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    9148:	|                     clr.l 100(sp)
    914c:	|     ,-------------- bra.w 9424 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    9150:	|  ,--|-------------> move.l 1d0ae <bigDataFile>,d0
    9156:	|  |  |               move.l d0,-(sp)
    9158:	|  |  |               jsr 6bc <get2bytes>
    915e:	|  |  |               addq.l #4,sp
    9160:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    9164:	|  |  |               movea.l 112(sp),a0
    9168:	|  |  |               movea.l 8(a0),a0
    916c:	|  |  |               move.l 100(sp),d1
    9170:	|  |  |               move.l d1,d0
    9172:	|  |  |               lsl.l #3,d0
    9174:	|  |  |               sub.l d1,d0
    9176:	|  |  |               add.l d0,d0
    9178:	|  |  |               add.l d0,d0
    917a:	|  |  |               adda.l d0,a0
    917c:	|  |  |               moveq #0,d0
    917e:	|  |  |               move.w 60(sp),d0
    9182:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    9184:	|  |  |               movea.l 1d0ae <bigDataFile>,a1
    918a:	|  |  |               movea.l 112(sp),a0
    918e:	|  |  |               movea.l 8(a0),a0
    9192:	|  |  |               move.l 100(sp),d1
    9196:	|  |  |               move.l d1,d0
    9198:	|  |  |               lsl.l #3,d0
    919a:	|  |  |               sub.l d1,d0
    919c:	|  |  |               add.l d0,d0
    919e:	|  |  |               add.l d0,d0
    91a0:	|  |  |               lea (0,a0,d0.l),a2
    91a4:	|  |  |               move.l a1,-(sp)
    91a6:	|  |  |               jsr 6bc <get2bytes>
    91ac:	|  |  |               addq.l #4,sp
    91ae:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    91b2:	|  |  |               movea.l 1d0ae <bigDataFile>,a1
    91b8:	|  |  |               movea.l 112(sp),a0
    91bc:	|  |  |               movea.l 8(a0),a0
    91c0:	|  |  |               move.l 100(sp),d1
    91c4:	|  |  |               move.l d1,d0
    91c6:	|  |  |               lsl.l #3,d0
    91c8:	|  |  |               sub.l d1,d0
    91ca:	|  |  |               add.l d0,d0
    91cc:	|  |  |               add.l d0,d0
    91ce:	|  |  |               lea (0,a0,d0.l),a2
    91d2:	|  |  |               move.l a1,-(sp)
    91d4:	|  |  |               jsr 6bc <get2bytes>
    91da:	|  |  |               addq.l #4,sp
    91dc:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    91e0:	|  |  |               movea.l 1d0ae <bigDataFile>,a1
    91e6:	|  |  |               movea.l 112(sp),a0
    91ea:	|  |  |               movea.l 8(a0),a0
    91ee:	|  |  |               move.l 100(sp),d1
    91f2:	|  |  |               move.l d1,d0
    91f4:	|  |  |               lsl.l #3,d0
    91f6:	|  |  |               sub.l d1,d0
    91f8:	|  |  |               add.l d0,d0
    91fa:	|  |  |               add.l d0,d0
    91fc:	|  |  |               lea (0,a0,d0.l),a2
    9200:	|  |  |               move.l a1,-(sp)
    9202:	|  |  |               jsr 6bc <get2bytes>
    9208:	|  |  |               addq.l #4,sp
    920a:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    920e:	|  |  |               movea.l 112(sp),a0
    9212:	|  |  |               move.l 4(a0),d0
    9216:	|  |  |               moveq #3,d1
    9218:	|  |  |               cmp.l d0,d1
    921a:	|  |  |     ,-------- beq.w 92b6 <loadSpriteBank+0x2aa>
    921e:	|  |  |     |         moveq #3,d1
    9220:	|  |  |     |         cmp.l d0,d1
    9222:	|  |  |  ,--|-------- blt.w 935c <loadSpriteBank+0x350>
    9226:	|  |  |  |  |         moveq #1,d1
    9228:	|  |  |  |  |         cmp.l d0,d1
    922a:	|  |  |  |  |     ,-- beq.s 9236 <loadSpriteBank+0x22a>
    922c:	|  |  |  |  |     |   moveq #2,d1
    922e:	|  |  |  |  |     |   cmp.l d0,d1
    9230:	|  |  |  |  |  ,--|-- beq.s 9262 <loadSpriteBank+0x256>
    9232:	|  |  |  +--|--|--|-- bra.w 935c <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    9236:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    923a:	|  |  |  |  |  |      movea.l 8(a0),a0
    923e:	|  |  |  |  |  |      move.l 100(sp),d1
    9242:	|  |  |  |  |  |      move.l d1,d0
    9244:	|  |  |  |  |  |      lsl.l #3,d0
    9246:	|  |  |  |  |  |      sub.l d1,d0
    9248:	|  |  |  |  |  |      add.l d0,d0
    924a:	|  |  |  |  |  |      add.l d0,d0
    924c:	|  |  |  |  |  |      adda.l d0,a0
    924e:	|  |  |  |  |  |      move.l 4(a0),d0
    9252:	|  |  |  |  |  |      addq.l #2,d0
    9254:	|  |  |  |  |  |      move.l d0,d0
    9256:	|  |  |  |  |  |      add.w d0,d0
    9258:	|  |  |  |  |  |      add.w d0,d0
    925a:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    925e:	|  |  |  +--|--|----- bra.w 935c <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    9262:	|  |  |  |  |  '----> movea.l 112(sp),a0
    9266:	|  |  |  |  |         movea.l 8(a0),a0
    926a:	|  |  |  |  |         move.l 100(sp),d1
    926e:	|  |  |  |  |         move.l d1,d0
    9270:	|  |  |  |  |         lsl.l #3,d0
    9272:	|  |  |  |  |         sub.l d1,d0
    9274:	|  |  |  |  |         add.l d0,d0
    9276:	|  |  |  |  |         add.l d0,d0
    9278:	|  |  |  |  |         adda.l d0,a0
    927a:	|  |  |  |  |         move.l (a0),d0
    927c:	|  |  |  |  |     ,-- bpl.s 9280 <loadSpriteBank+0x274>
    927e:	|  |  |  |  |     |   addq.l #7,d0
    9280:	|  |  |  |  |     '-> asr.l #3,d0
    9282:	|  |  |  |  |         move.l d0,d2
    9284:	|  |  |  |  |         movea.l 112(sp),a0
    9288:	|  |  |  |  |         movea.l 8(a0),a0
    928c:	|  |  |  |  |         move.l 100(sp),d1
    9290:	|  |  |  |  |         move.l d1,d0
    9292:	|  |  |  |  |         lsl.l #3,d0
    9294:	|  |  |  |  |         sub.l d1,d0
    9296:	|  |  |  |  |         add.l d0,d0
    9298:	|  |  |  |  |         add.l d0,d0
    929a:	|  |  |  |  |         adda.l d0,a0
    929c:	|  |  |  |  |         move.l 4(a0),d0
    92a0:	|  |  |  |  |         move.l d0,d0
    92a2:	|  |  |  |  |         move.w d2,d1
    92a4:	|  |  |  |  |         muls.w d0,d1
    92a6:	|  |  |  |  |         move.w d1,d0
    92a8:	|  |  |  |  |         add.w d0,d0
    92aa:	|  |  |  |  |         add.w d1,d0
    92ac:	|  |  |  |  |         add.w d0,d0
    92ae:	|  |  |  |  |         move.w d0,98(sp)
				break;
    92b2:	|  |  |  +--|-------- bra.w 935c <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    92b6:	|  |  |  |  '-------> movea.l 112(sp),a0
    92ba:	|  |  |  |            movea.l 8(a0),a0
    92be:	|  |  |  |            move.l 100(sp),d1
    92c2:	|  |  |  |            move.l d1,d0
    92c4:	|  |  |  |            lsl.l #3,d0
    92c6:	|  |  |  |            sub.l d1,d0
    92c8:	|  |  |  |            add.l d0,d0
    92ca:	|  |  |  |            add.l d0,d0
    92cc:	|  |  |  |            adda.l d0,a0
    92ce:	|  |  |  |            move.l (a0),d0
    92d0:	|  |  |  |            andi.l #-2147483633,d0
    92d6:	|  |  |  |        ,-- bpl.s 92e0 <loadSpriteBank+0x2d4>
    92d8:	|  |  |  |        |   subq.l #1,d0
    92da:	|  |  |  |        |   moveq #-16,d1
    92dc:	|  |  |  |        |   or.l d1,d0
    92de:	|  |  |  |        |   addq.l #1,d0
    92e0:	|  |  |  |        '-> tst.l d0
    92e2:	|  |  |  |     ,----- ble.s 92e8 <loadSpriteBank+0x2dc>
    92e4:	|  |  |  |     |      moveq #2,d0
    92e6:	|  |  |  |     |  ,-- bra.s 92ea <loadSpriteBank+0x2de>
    92e8:	|  |  |  |     '--|-> clr.w d0
    92ea:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    92ee:	|  |  |  |            movea.l 112(sp),a0
    92f2:	|  |  |  |            movea.l 8(a0),a0
    92f6:	|  |  |  |            move.l 100(sp),d1
    92fa:	|  |  |  |            move.l d1,d0
    92fc:	|  |  |  |            lsl.l #3,d0
    92fe:	|  |  |  |            sub.l d1,d0
    9300:	|  |  |  |            add.l d0,d0
    9302:	|  |  |  |            add.l d0,d0
    9304:	|  |  |  |            adda.l d0,a0
    9306:	|  |  |  |            move.l (a0),d0
    9308:	|  |  |  |            movea.l d0,a0
    930a:	|  |  |  |            cmpa.w #0,a0
    930e:	|  |  |  |        ,-- bge.s 9314 <loadSpriteBank+0x308>
    9310:	|  |  |  |        |   lea 15(a0),a0
    9314:	|  |  |  |        '-> move.l a0,d0
    9316:	|  |  |  |            asr.l #4,d0
    9318:	|  |  |  |            add.l d0,d0
    931a:	|  |  |  |            move.l d0,d1
    931c:	|  |  |  |            moveq #0,d0
    931e:	|  |  |  |            move.w 58(sp),d0
    9322:	|  |  |  |            add.l d1,d0
    9324:	|  |  |  |            move.l d0,d2
    9326:	|  |  |  |            movea.l 112(sp),a0
    932a:	|  |  |  |            movea.l 8(a0),a0
    932e:	|  |  |  |            move.l 100(sp),d1
    9332:	|  |  |  |            move.l d1,d0
    9334:	|  |  |  |            lsl.l #3,d0
    9336:	|  |  |  |            sub.l d1,d0
    9338:	|  |  |  |            add.l d0,d0
    933a:	|  |  |  |            add.l d0,d0
    933c:	|  |  |  |            adda.l d0,a0
    933e:	|  |  |  |            move.l 4(a0),d0
    9342:	|  |  |  |            move.l d0,d0
    9344:	|  |  |  |            move.w d2,d1
    9346:	|  |  |  |            muls.w d0,d1
    9348:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    934c:	|  |  |  |            cmpi.w #100,98(sp)
    9352:	|  |  |  |        ,-- bls.s 935a <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    9354:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    935a:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    935c:	|  |  |  '----------> moveq #0,d0
    935e:	|  |  |               move.w 98(sp),d0
    9362:	|  |  |               add.l d0,d0
    9364:	|  |  |               move.l d0,52(sp)
    9368:	|  |  |               moveq #2,d0
    936a:	|  |  |               move.l d0,48(sp)
    936e:	|  |  |               move.l 1d0c6 <SysBase>,d0
    9374:	|  |  |               movea.l d0,a6
    9376:	|  |  |               move.l 52(sp),d0
    937a:	|  |  |               move.l 48(sp),d1
    937e:	|  |  |               jsr -684(a6)
    9382:	|  |  |               move.l d0,44(sp)
    9386:	|  |  |               movea.l 44(sp),a1
    938a:	|  |  |               movea.l 112(sp),a0
    938e:	|  |  |               movea.l 8(a0),a0
    9392:	|  |  |               move.l 100(sp),d1
    9396:	|  |  |               move.l d1,d0
    9398:	|  |  |               lsl.l #3,d0
    939a:	|  |  |               sub.l d1,d0
    939c:	|  |  |               add.l d0,d0
    939e:	|  |  |               add.l d0,d0
    93a0:	|  |  |               adda.l d0,a0
    93a2:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    93a6:	|  |  |               move.l 1d0ae <bigDataFile>,40(sp)
    93ae:	|  |  |               movea.l 112(sp),a0
    93b2:	|  |  |               movea.l 8(a0),a0
    93b6:	|  |  |               move.l 100(sp),d1
    93ba:	|  |  |               move.l d1,d0
    93bc:	|  |  |               lsl.l #3,d0
    93be:	|  |  |               sub.l d1,d0
    93c0:	|  |  |               add.l d0,d0
    93c2:	|  |  |               add.l d0,d0
    93c4:	|  |  |               adda.l d0,a0
    93c6:	|  |  |               move.l 24(a0),36(sp)
    93cc:	|  |  |               moveq #2,d1
    93ce:	|  |  |               move.l d1,32(sp)
    93d2:	|  |  |               move.w 98(sp),d0
    93d6:	|  |  |               lsr.w #1,d0
    93d8:	|  |  |               move.w d0,d0
    93da:	|  |  |               andi.l #65535,d0
    93e0:	|  |  |               move.l d0,28(sp)
    93e4:	|  |  |               move.l 1d0ce <DOSBase>,d0
    93ea:	|  |  |               movea.l d0,a6
    93ec:	|  |  |               move.l 40(sp),d1
    93f0:	|  |  |               move.l 36(sp),d2
    93f4:	|  |  |               move.l 32(sp),d3
    93f8:	|  |  |               move.l 28(sp),d4
    93fc:	|  |  |               jsr -324(a6)
    9400:	|  |  |               move.l d0,24(sp)
    9404:	|  |  |               move.l 24(sp),d0
    9408:	|  |  |               move.w d0,22(sp)
		if (!count) {
    940c:	|  |  |           ,-- bne.s 9420 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    940e:	|  |  |           |   pea 19796 <PutChar+0x147c>
    9414:	|  |  |           |   jsr 17878 <KPrintF>
    941a:	|  |  |           |   addq.l #4,sp
			return FALSE;
    941c:	|  |  |           |   clr.w d0
    941e:	+--|--|-----------|-- bra.s 9446 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    9420:	|  |  |           '-> addq.l #1,100(sp)
    9424:	|  |  '-------------> move.l 100(sp),d0
    9428:	|  |                  cmp.l 74(sp),d0
    942c:	|  '----------------- blt.w 9150 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    9430:	|                     jsr 7ba4 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9436:	|                     pea 197c9 <PutChar+0x14af>
    943c:	|                     jsr 17878 <KPrintF>
    9442:	|                     addq.l #4,sp
	return TRUE;
    9444:	|                     moveq #1,d0
}
    9446:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    944a:	                      lea 84(sp),sp
    944e:	                      rts

00009450 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9450:	                   lea -16(sp),sp
    9454:	                   move.l d2,-(sp)
    9456:	                   move.l 32(sp),d0
    945a:	                   move.w d0,d0
    945c:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9460:	                   movea.l 28(sp),a0
    9464:	                   move.l (a0),d2
    9466:	                   movea.l 24(sp),a0
    946a:	                   move.l 8(a0),d0
    946e:	                   move.l d0,-(sp)
    9470:	                   jsr 17caa <__floatsisf>
    9476:	                   addq.l #4,sp
    9478:	                   move.l d0,-(sp)
    947a:	                   move.l d2,-(sp)
    947c:	                   jsr 17f9e <__subsf3>
    9482:	                   addq.l #8,sp
    9484:	                   move.l d0,-(sp)
    9486:	                   jsr 17c42 <__fixsfsi>
    948c:	                   addq.l #4,sp
    948e:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    9492:	                   movea.l 28(sp),a0
    9496:	                   move.l 4(a0),d2
    949a:	                   movea.l 24(sp),a0
    949e:	                   move.l 12(a0),d0
    94a2:	                   move.l d0,-(sp)
    94a4:	                   jsr 17caa <__floatsisf>
    94aa:	                   addq.l #4,sp
    94ac:	                   move.l d0,-(sp)
    94ae:	                   move.l d2,-(sp)
    94b0:	                   jsr 17f9e <__subsf3>
    94b6:	                   addq.l #8,sp
    94b8:	                   move.l d0,-(sp)
    94ba:	                   jsr 17c42 <__fixsfsi>
    94c0:	                   addq.l #4,sp
    94c2:	                   move.w d0,8(sp)

	if( x < 0)
    94c6:	                   tst.w 18(sp)
    94ca:	               ,-- bge.s 94fe <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    94cc:	               |   movea.l 28(sp),a0
    94d0:	               |   move.l (a0),d2
    94d2:	               |   movea.l 24(sp),a0
    94d6:	               |   move.l 8(a0),d0
    94da:	               |   move.l d0,-(sp)
    94dc:	               |   jsr 17caa <__floatsisf>
    94e2:	               |   addq.l #4,sp
    94e4:	               |   move.l d0,-(sp)
    94e6:	               |   move.l d2,-(sp)
    94e8:	               |   jsr 17f9e <__subsf3>
    94ee:	               |   addq.l #8,sp
    94f0:	               |   move.l d0,-(sp)
    94f2:	               |   jsr 17c42 <__fixsfsi>
    94f8:	               |   addq.l #4,sp
    94fa:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    94fe:	               '-> movea.w 8(sp),a1
    9502:	                   movea.w 18(sp),a0
    9506:	                   pea 1 <_start+0x1>
    950a:	                   move.l a1,-(sp)
    950c:	                   move.l a0,-(sp)
    950e:	                   move.l 40(sp),-(sp)
    9512:	                   move.l 40(sp),-(sp)
    9516:	                   jsr 3120 <CstScaleSprite>
    951c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9520:	                   movea.l 28(sp),a0
    9524:	                   move.l 118(a0),d0
    9528:	                   moveq #8,d1
    952a:	                   and.l d1,d0
    952c:	   ,-------------- beq.w 95f8 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9530:	   |               movea.l 24(sp),a0
    9534:	   |               move.l 8(a0),d0
    9538:	   |  ,----------- bpl.s 9574 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    953a:	   |  |            move.w 18(sp),d0
    953e:	   |  |            tst.w 6(sp)
    9542:	   |  |     ,----- beq.s 955c <scaleSprite+0x10c>
    9544:	   |  |     |      movea.l 24(sp),a0
    9548:	   |  |     |      move.l (a0),d1
    954a:	   |  |     |      move.l d1,d2
    954c:	   |  |     |      movea.l 24(sp),a0
    9550:	   |  |     |      move.l 8(a0),d1
    9554:	   |  |     |      move.l d1,d1
    9556:	   |  |     |      movea.w d2,a0
    9558:	   |  |     |      suba.w d1,a0
    955a:	   |  |     |  ,-- bra.s 956a <scaleSprite+0x11a>
    955c:	   |  |     '--|-> movea.l 24(sp),a0
    9560:	   |  |        |   move.l 8(a0),d1
    9564:	   |  |        |   move.l d1,d1
    9566:	   |  |        |   movea.w d1,a0
    9568:	   |  |        |   addq.w #1,a0
    956a:	   |  |        '-> move.w d0,d1
    956c:	   |  |            sub.w a0,d1
    956e:	   |  |            move.w d1,16(sp)
    9572:	   |  |  ,-------- bra.s 95ac <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9574:	   |  '--|-------> move.w 18(sp),d1
    9578:	   |     |         tst.w 6(sp)
    957c:	   |     |  ,----- beq.s 959a <scaleSprite+0x14a>
    957e:	   |     |  |      movea.l 24(sp),a0
    9582:	   |     |  |      move.l (a0),d0
    9584:	   |     |  |      move.l d0,d2
    9586:	   |     |  |      movea.l 24(sp),a0
    958a:	   |     |  |      move.l 8(a0),d0
    958e:	   |     |  |      move.l d0,d0
    9590:	   |     |  |      movea.w d2,a0
    9592:	   |     |  |      suba.w d0,a0
    9594:	   |     |  |      move.w a0,d0
    9596:	   |     |  |      subq.w #1,d0
    9598:	   |     |  |  ,-- bra.s 95a4 <scaleSprite+0x154>
    959a:	   |     |  '--|-> movea.l 24(sp),a0
    959e:	   |     |     |   move.l 8(a0),d0
    95a2:	   |     |     |   move.l d0,d0
    95a4:	   |     |     '-> movea.w d1,a0
    95a6:	   |     |         suba.w d0,a0
    95a8:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    95ac:	   |     '-------> movea.l 28(sp),a0
    95b0:	   |               move.l 24(a0),d0
    95b4:	   |               move.l d0,d1
    95b6:	   |               movea.l 24(sp),a0
    95ba:	   |               move.l 12(a0),d0
    95be:	   |               move.l d0,d0
    95c0:	   |               sub.w d0,d1
    95c2:	   |               move.w 8(sp),d0
    95c6:	   |               movea.w d1,a0
    95c8:	   |               adda.w d0,a0
    95ca:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    95ce:	   |               movea.l 24(sp),a0
    95d2:	   |               move.l (a0),d0
    95d4:	   |               move.l d0,d0
    95d6:	   |               move.w 16(sp),d1
    95da:	   |               add.w d0,d1
    95dc:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    95e0:	   |               movea.l 24(sp),a0
    95e4:	   |               move.l 4(a0),d0
    95e8:	   |               move.l d0,d0
    95ea:	   |               movea.w 14(sp),a0
    95ee:	   |               adda.w d0,a0
    95f0:	   |               move.w a0,10(sp)
    95f4:	,--|-------------- bra.w 96e0 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    95f8:	|  '-------------> move.w 18(sp),d1
    95fc:	|                  move.l 1d17c <cameraX>,d0
    9602:	|                  move.l d0,d0
    9604:	|                  sub.w d0,d1
    9606:	|                  move.w d1,18(sp)
		y -= cameraY;
    960a:	|                  move.w 8(sp),d1
    960e:	|                  move.l 1d180 <cameraY>,d0
    9614:	|                  move.l d0,d0
    9616:	|                  sub.w d0,d1
    9618:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    961c:	|                  movea.l 24(sp),a0
    9620:	|                  move.l 8(a0),d0
    9624:	|     ,----------- bpl.s 9660 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9626:	|     |            move.w 18(sp),d0
    962a:	|     |            tst.w 6(sp)
    962e:	|     |     ,----- beq.s 9648 <scaleSprite+0x1f8>
    9630:	|     |     |      movea.l 24(sp),a0
    9634:	|     |     |      move.l (a0),d1
    9636:	|     |     |      move.l d1,d2
    9638:	|     |     |      movea.l 24(sp),a0
    963c:	|     |     |      move.l 8(a0),d1
    9640:	|     |     |      move.l d1,d1
    9642:	|     |     |      movea.w d2,a0
    9644:	|     |     |      suba.w d1,a0
    9646:	|     |     |  ,-- bra.s 9656 <scaleSprite+0x206>
    9648:	|     |     '--|-> movea.l 24(sp),a0
    964c:	|     |        |   move.l 8(a0),d1
    9650:	|     |        |   move.l d1,d1
    9652:	|     |        |   movea.w d1,a0
    9654:	|     |        |   addq.w #1,a0
    9656:	|     |        '-> move.w d0,d1
    9658:	|     |            sub.w a0,d1
    965a:	|     |            move.w d1,16(sp)
    965e:	|     |  ,-------- bra.s 9698 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9660:	|     '--|-------> move.w 18(sp),d1
    9664:	|        |         tst.w 6(sp)
    9668:	|        |  ,----- beq.s 9686 <scaleSprite+0x236>
    966a:	|        |  |      movea.l 24(sp),a0
    966e:	|        |  |      move.l (a0),d0
    9670:	|        |  |      move.l d0,d2
    9672:	|        |  |      movea.l 24(sp),a0
    9676:	|        |  |      move.l 8(a0),d0
    967a:	|        |  |      move.l d0,d0
    967c:	|        |  |      movea.w d2,a0
    967e:	|        |  |      suba.w d0,a0
    9680:	|        |  |      move.w a0,d0
    9682:	|        |  |      subq.w #1,d0
    9684:	|        |  |  ,-- bra.s 9690 <scaleSprite+0x240>
    9686:	|        |  '--|-> movea.l 24(sp),a0
    968a:	|        |     |   move.l 8(a0),d0
    968e:	|        |     |   move.l d0,d0
    9690:	|        |     '-> movea.w d1,a0
    9692:	|        |         suba.w d0,a0
    9694:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9698:	|        '-------> movea.l 28(sp),a0
    969c:	|                  move.l 24(a0),d0
    96a0:	|                  move.l d0,d1
    96a2:	|                  movea.l 24(sp),a0
    96a6:	|                  move.l 12(a0),d0
    96aa:	|                  move.l d0,d0
    96ac:	|                  sub.w d0,d1
    96ae:	|                  move.w 8(sp),d0
    96b2:	|                  movea.w d1,a0
    96b4:	|                  adda.w d0,a0
    96b6:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    96ba:	|                  movea.l 24(sp),a0
    96be:	|                  move.l (a0),d0
    96c0:	|                  move.l d0,d0
    96c2:	|                  move.w 16(sp),d1
    96c6:	|                  add.w d0,d1
    96c8:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    96cc:	|                  movea.l 24(sp),a0
    96d0:	|                  move.l 4(a0),d0
    96d4:	|                  move.l d0,d0
    96d6:	|                  movea.w 14(sp),a0
    96da:	|                  adda.w d0,a0
    96dc:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    96e0:	'----------------> move.l 1d082 <input+0xa>,d1
    96e6:	                   moveq #0,d0
    96e8:	                   move.w 16(sp),d0
    96ec:	                   cmp.l d1,d0
    96ee:	            ,----- bgt.s 9724 <scaleSprite+0x2d4>
    96f0:	            |      move.l 1d082 <input+0xa>,d1
    96f6:	            |      moveq #0,d0
    96f8:	            |      move.w 12(sp),d0
    96fc:	            |      cmp.l d1,d0
    96fe:	            +----- blt.s 9724 <scaleSprite+0x2d4>
    9700:	            |      move.l 1d086 <input+0xe>,d1
    9706:	            |      moveq #0,d0
    9708:	            |      move.w 14(sp),d0
    970c:	            |      cmp.l d1,d0
    970e:	            +----- bgt.s 9724 <scaleSprite+0x2d4>
    9710:	            |      move.l 1d086 <input+0xe>,d1
    9716:	            |      moveq #0,d0
    9718:	            |      move.w 10(sp),d0
    971c:	            |      cmp.l d1,d0
    971e:	            +----- blt.s 9724 <scaleSprite+0x2d4>
		return TRUE;
    9720:	            |      moveq #1,d0
    9722:	            |  ,-- bra.s 9726 <scaleSprite+0x2d6>
	}
	return FALSE;
    9724:	            '--|-> clr.w d0
    9726:	               '-> move.l (sp)+,d2
    9728:	                   lea 16(sp),sp
    972c:	                   rts

0000972e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    972e:	    move.l 4(sp),d0
    9732:	,-- bpl.s 9736 <TF_abs+0x8>
    9734:	|   neg.l d0
}
    9736:	'-> rts

00009738 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9738:	             lea -28(sp),sp
    973c:	             move.l a6,-(sp)
    973e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9740:	             move.l #132,28(sp)
    9748:	             clr.l 24(sp)
    974c:	             move.l 1d0c6 <SysBase>,d0
    9752:	             movea.l d0,a6
    9754:	             move.l 28(sp),d0
    9758:	             move.l 24(sp),d1
    975c:	             jsr -684(a6)
    9760:	             move.l d0,20(sp)
    9764:	             move.l 20(sp),d0
    9768:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    976c:	         ,-- bne.s 9774 <addPerson+0x3c>
    976e:	         |   clr.w d0
    9770:	,--------|-- bra.w 99a4 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9774:	|        '-> move.l 48(sp),-(sp)
    9778:	|            jsr db9c <loadObjectType>
    977e:	|            addq.l #4,sp
    9780:	|            movea.l 16(sp),a0
    9784:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9788:	|            movea.l 16(sp),a0
    978c:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9794:	|            movea.l 16(sp),a0
    9798:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    979c:	|            movea.l 16(sp),a0
    97a0:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    97a4:	|            move.l 44(sp),-(sp)
    97a8:	|            jsr 17caa <__floatsisf>
    97ae:	|            addq.l #4,sp
    97b0:	|            move.l d0,d2
    97b2:	|            move.l 40(sp),-(sp)
    97b6:	|            jsr 17caa <__floatsisf>
    97bc:	|            addq.l #4,sp
    97be:	|            move.l d2,-(sp)
    97c0:	|            move.l d0,-(sp)
    97c2:	|            move.l 24(sp),-(sp)
    97c6:	|            jsr b2e8 <moveAndScale>
    97cc:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    97d0:	|            movea.l 16(sp),a0
    97d4:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    97d8:	|            movea.l 16(sp),a0
    97dc:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    97e2:	|            movea.l 16(sp),a0
    97e6:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    97ec:	|            movea.l 16(sp),a0
    97f0:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    97f4:	|            movea.l 16(sp),a0
    97f8:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    97fc:	|            movea.l 16(sp),a0
    9800:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9806:	|            movea.l 16(sp),a0
    980a:	|            clr.l 106(a0)
    newPerson->angle = 180;
    980e:	|            movea.l 16(sp),a0
    9812:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    981a:	|            movea.l 16(sp),a0
    981e:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9826:	|            movea.l 16(sp),a0
    982a:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    982e:	|            movea.l 16(sp),a0
    9832:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9836:	|            movea.l 16(sp),a0
    983a:	|            movea.l 114(a0),a0
    983e:	|            move.l 24(a0),d0
    9842:	|            movea.l 16(sp),a0
    9846:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    984a:	|            movea.l 16(sp),a0
    984e:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9852:	|            movea.l 16(sp),a0
    9856:	|            movea.l 114(a0),a0
    985a:	|            move.l 32(a0),d0
    985e:	|            movea.l 16(sp),a0
    9862:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9866:	|            movea.l 16(sp),a0
    986a:	|            clr.b 126(a0)
    newPerson->g = 0;
    986e:	|            movea.l 16(sp),a0
    9872:	|            clr.b 127(a0)
    newPerson->b = 0;
    9876:	|            movea.l 16(sp),a0
    987a:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    987e:	|            movea.l 16(sp),a0
    9882:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9886:	|            movea.l 16(sp),a0
    988a:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    988e:	|            movea.l 16(sp),a0
    9892:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9898:	|            clr.l -(sp)
    989a:	|            move.l 20(sp),-(sp)
    989e:	|            jsr 46da <setFrames>
    98a4:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    98a6:	|            movea.l 52(sp),a0
    98aa:	|            movea.l (a0),a0
    98ac:	|            movea.l (a0),a0
    98ae:	|            movea.l 4(a0),a0
    98b2:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    98b6:	|     ,----- bpl.s 98c0 <addPerson+0x188>
    98b8:	|     |      move.l 12(sp),d0
    98bc:	|     |      neg.l d0
    98be:	|     |  ,-- bra.s 98c2 <addPerson+0x18a>
    98c0:	|     '--|-> moveq #1,d0
    98c2:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    98c6:	|            movea.l 52(sp),a0
    98ca:	|            movea.l (a0),a0
    98cc:	|            movea.l (a0),a0
    98ce:	|            movea.l (a0),a0
    98d0:	|            move.l 8(a0),d0
    98d4:	|            cmp.l 8(sp),d0
    98d8:	|     ,----- bgt.s 990a <addPerson+0x1d2>
        if (fNumSigned < 0) {
    98da:	|     |      tst.l 12(sp)
    98de:	|     |  ,-- bge.s 98ec <addPerson+0x1b4>
            newPerson->height = 5;
    98e0:	|     |  |   movea.l 16(sp),a0
    98e4:	|     |  |   moveq #5,d0
    98e6:	|     |  |   move.l d0,20(a0)
    98ea:	|  ,--|--|-- bra.s 9936 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    98ec:	|  |  |  '-> movea.l 52(sp),a0
    98f0:	|  |  |      movea.l (a0),a0
    98f2:	|  |  |      movea.l (a0),a0
    98f4:	|  |  |      movea.l (a0),a0
    98f6:	|  |  |      movea.l 16(a0),a0
    98fa:	|  |  |      move.l 12(a0),d0
    98fe:	|  |  |      addq.l #5,d0
    9900:	|  |  |      movea.l 16(sp),a0
    9904:	|  |  |      move.l d0,20(a0)
    9908:	|  +--|----- bra.s 9936 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    990a:	|  |  '----> movea.l 52(sp),a0
    990e:	|  |         movea.l (a0),a0
    9910:	|  |         movea.l (a0),a0
    9912:	|  |         movea.l (a0),a0
    9914:	|  |         movea.l 16(a0),a0
    9918:	|  |         move.l 8(sp),d1
    991c:	|  |         move.l d1,d0
    991e:	|  |         lsl.l #3,d0
    9920:	|  |         sub.l d1,d0
    9922:	|  |         add.l d0,d0
    9924:	|  |         add.l d0,d0
    9926:	|  |         adda.l d0,a0
    9928:	|  |         move.l 12(a0),d0
    992c:	|  |         addq.l #5,d0
    992e:	|  |         movea.l 16(sp),a0
    9932:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9936:	|  '-------> move.l #119078,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    993e:	|        ,-- bra.s 994e <addPerson+0x216>
        changethat = &((*changethat)->next);
    9940:	|     ,--|-> movea.l 32(sp),a0
    9944:	|     |  |   move.l (a0),d0
    9946:	|     |  |   moveq #36,d1
    9948:	|     |  |   add.l d0,d1
    994a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    994e:	|     |  '-> movea.l 32(sp),a0
    9952:	|     |      move.l (a0),d0
    9954:	|     |  ,-- beq.s 997c <addPerson+0x244>
    9956:	|     |  |   movea.l 32(sp),a0
    995a:	|     |  |   movea.l (a0),a0
    995c:	|     |  |   move.l 4(a0),d2
    9960:	|     |  |   move.l 44(sp),-(sp)
    9964:	|     |  |   jsr 17caa <__floatsisf>
    996a:	|     |  |   addq.l #4,sp
    996c:	|     |  |   move.l d0,-(sp)
    996e:	|     |  |   move.l d2,-(sp)
    9970:	|     |  |   jsr 17ed0 <__ltsf2>
    9976:	|     |  |   addq.l #8,sp
    9978:	|     |  |   tst.l d0
    997a:	|     '--|-- blt.s 9940 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    997c:	|        '-> movea.l 32(sp),a0
    9980:	|            move.l (a0),d0
    9982:	|            movea.l 16(sp),a0
    9986:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    998a:	|            movea.l 32(sp),a0
    998e:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9992:	|            movea.l 16(sp),a0
    9996:	|            move.l 114(a0),d0
    999a:	|            sne d0
    999c:	|            neg.b d0
    999e:	|            move.b d0,d0
    99a0:	|            andi.w #255,d0
}
    99a4:	'----------> move.l (sp)+,d2
    99a6:	             movea.l (sp)+,a6
    99a8:	             lea 28(sp),sp
    99ac:	             rts

000099ae <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    99ae:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    99b0:	       move.l 8(sp),-(sp)
    99b4:	       jsr ab3e <findPerson>
    99ba:	       addq.l #4,sp
    99bc:	       move.l d0,(sp)
    if (moveMe) {
    99be:	,----- beq.s 99f2 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    99c0:	|      movea.l (sp),a0
    99c2:	|      move.l 68(a0),d0
    99c6:	|  ,-- beq.s 99d8 <animatePerson+0x2a>
    99c8:	|  |   movea.l (sp),a0
    99ca:	|  |   move.l 68(a0),d0
    99ce:	|  |   move.l d0,-(sp)
    99d0:	|  |   jsr 5538 <abortFunction>
    99d6:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    99d8:	|  '-> movea.l (sp),a0
    99da:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    99de:	|      movea.l (sp),a0
    99e0:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    99e4:	|      movea.l (sp),a0
    99e6:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    99ea:	|      movea.l (sp),a0
    99ec:	|      move.l 12(sp),72(a0)
    }
}
    99f2:	'----> nop
    99f4:	       addq.l #4,sp
    99f6:	       rts

000099f8 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    99f8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    99fa:	       move.l 8(sp),-(sp)
    99fe:	       jsr ab3e <findPerson>
    9a04:	       addq.l #4,sp
    9a06:	       move.l d0,(sp)
    if (moveMe) {
    9a08:	,----- beq.s 9a4a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9a0a:	|      movea.l (sp),a0
    9a0c:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9a10:	|      movea.l (sp),a0
    9a12:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9a18:	|      move.l (sp),-(sp)
    9a1a:	|      jsr b476 <rethinkAngle>
    9a20:	|      addq.l #4,sp
        if (moveMe->walking) {
    9a22:	|      movea.l (sp),a0
    9a24:	|      move.w 64(a0),d0
    9a28:	|  ,-- beq.s 9a3c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9a2a:	|  |   pea 1 <_start+0x1>
    9a2e:	|  |   move.l 4(sp),-(sp)
    9a32:	|  |   jsr 46da <setFrames>
    9a38:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9a3a:	+--|-- bra.s 9a4a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9a3c:	|  '-> clr.l -(sp)
    9a3e:	|      move.l 4(sp),-(sp)
    9a42:	|      jsr 46da <setFrames>
    9a48:	|      addq.l #8,sp
}
    9a4a:	'----> nop
    9a4c:	       addq.l #4,sp
    9a4e:	       rts

00009a50 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9a50:	             lea -36(sp),sp
    9a54:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9a56:	             movea.l 44(sp),a0
    9a5a:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9a60:	             moveq #12,d0
    9a62:	             move.l d0,28(sp)
    9a66:	             clr.l 24(sp)
    9a6a:	             move.l 1d0c6 <SysBase>,d0
    9a70:	             movea.l d0,a6
    9a72:	             move.l 28(sp),d0
    9a76:	             move.l 24(sp),d1
    9a7a:	             jsr -684(a6)
    9a7e:	             move.l d0,20(sp)
    9a82:	             move.l 20(sp),d0
    9a86:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9a8a:	         ,-- bne.s 9aa0 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9a8c:	         |   pea 197e3 <PutChar+0x14c9>
    9a92:	         |   jsr 17878 <KPrintF>
    9a98:	         |   addq.l #4,sp
		return NULL;
    9a9a:	         |   moveq #0,d0
    9a9c:	,--------|-- bra.w 9bf2 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9aa0:	|        '-> movea.l 44(sp),a0
    9aa4:	|            move.l (a0),d0
    9aa6:	|            movea.l 16(sp),a0
    9aaa:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9aac:	|            movea.l 16(sp),a0
    9ab0:	|            movea.l (a0),a0
    9ab2:	|            move.l 4(a0),d0
    9ab6:	|            addq.l #1,d0
    9ab8:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9abc:	|            movea.l 16(sp),a0
    9ac0:	|            move.l 32(sp),8(a0)

	if (num) {
    9ac6:	|  ,-------- beq.w 9be6 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9aca:	|  |         move.l 32(sp),d1
    9ace:	|  |         move.l d1,d0
    9ad0:	|  |         add.l d0,d0
    9ad2:	|  |         add.l d1,d0
    9ad4:	|  |         add.l d0,d0
    9ad6:	|  |         add.l d0,d0
    9ad8:	|  |         move.l d0,12(sp)
    9adc:	|  |         clr.l 8(sp)
    9ae0:	|  |         move.l 1d0c6 <SysBase>,d0
    9ae6:	|  |         movea.l d0,a6
    9ae8:	|  |         move.l 12(sp),d0
    9aec:	|  |         move.l 8(sp),d1
    9af0:	|  |         jsr -684(a6)
    9af4:	|  |         move.l d0,4(sp)
    9af8:	|  |         move.l 4(sp),d0
    9afc:	|  |         movea.l 16(sp),a0
    9b00:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9b04:	|  |         movea.l 16(sp),a0
    9b08:	|  |         move.l 4(a0),d0
    9b0c:	|  |     ,-- bne.s 9b22 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9b0e:	|  |     |   pea 197e3 <PutChar+0x14c9>
    9b14:	|  |     |   jsr 17878 <KPrintF>
    9b1a:	|  |     |   addq.l #4,sp
			return NULL;
    9b1c:	|  |     |   moveq #0,d0
    9b1e:	+--|-----|-- bra.w 9bf2 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9b22:	|  |     '-> clr.l 36(sp)
    9b26:	|  |     ,-- bra.w 9bd8 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9b2a:	|  |  ,--|-> movea.l 44(sp),a0
    9b2e:	|  |  |  |   movea.l 4(a0),a0
    9b32:	|  |  |  |   move.l 36(sp),d1
    9b36:	|  |  |  |   move.l d1,d0
    9b38:	|  |  |  |   add.l d0,d0
    9b3a:	|  |  |  |   add.l d1,d0
    9b3c:	|  |  |  |   add.l d0,d0
    9b3e:	|  |  |  |   add.l d0,d0
    9b40:	|  |  |  |   lea (0,a0,d0.l),a1
    9b44:	|  |  |  |   movea.l 16(sp),a0
    9b48:	|  |  |  |   movea.l 4(a0),a0
    9b4c:	|  |  |  |   move.l 36(sp),d1
    9b50:	|  |  |  |   move.l d1,d0
    9b52:	|  |  |  |   add.l d0,d0
    9b54:	|  |  |  |   add.l d1,d0
    9b56:	|  |  |  |   add.l d0,d0
    9b58:	|  |  |  |   add.l d0,d0
    9b5a:	|  |  |  |   adda.l d0,a0
    9b5c:	|  |  |  |   move.l (a1),d0
    9b5e:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9b60:	|  |  |  |   movea.l 44(sp),a0
    9b64:	|  |  |  |   movea.l 4(a0),a0
    9b68:	|  |  |  |   move.l 36(sp),d1
    9b6c:	|  |  |  |   move.l d1,d0
    9b6e:	|  |  |  |   add.l d0,d0
    9b70:	|  |  |  |   add.l d1,d0
    9b72:	|  |  |  |   add.l d0,d0
    9b74:	|  |  |  |   add.l d0,d0
    9b76:	|  |  |  |   lea (0,a0,d0.l),a1
    9b7a:	|  |  |  |   movea.l 16(sp),a0
    9b7e:	|  |  |  |   movea.l 4(a0),a0
    9b82:	|  |  |  |   move.l 36(sp),d1
    9b86:	|  |  |  |   move.l d1,d0
    9b88:	|  |  |  |   add.l d0,d0
    9b8a:	|  |  |  |   add.l d1,d0
    9b8c:	|  |  |  |   add.l d0,d0
    9b8e:	|  |  |  |   add.l d0,d0
    9b90:	|  |  |  |   adda.l d0,a0
    9b92:	|  |  |  |   move.l 4(a1),d0
    9b96:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9b9a:	|  |  |  |   movea.l 44(sp),a0
    9b9e:	|  |  |  |   movea.l 4(a0),a0
    9ba2:	|  |  |  |   move.l 36(sp),d1
    9ba6:	|  |  |  |   move.l d1,d0
    9ba8:	|  |  |  |   add.l d0,d0
    9baa:	|  |  |  |   add.l d1,d0
    9bac:	|  |  |  |   add.l d0,d0
    9bae:	|  |  |  |   add.l d0,d0
    9bb0:	|  |  |  |   lea (0,a0,d0.l),a1
    9bb4:	|  |  |  |   movea.l 16(sp),a0
    9bb8:	|  |  |  |   movea.l 4(a0),a0
    9bbc:	|  |  |  |   move.l 36(sp),d1
    9bc0:	|  |  |  |   move.l d1,d0
    9bc2:	|  |  |  |   add.l d0,d0
    9bc4:	|  |  |  |   add.l d1,d0
    9bc6:	|  |  |  |   add.l d0,d0
    9bc8:	|  |  |  |   add.l d0,d0
    9bca:	|  |  |  |   adda.l d0,a0
    9bcc:	|  |  |  |   move.l 8(a1),d0
    9bd0:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9bd4:	|  |  |  |   addq.l #1,36(sp)
    9bd8:	|  |  |  '-> move.l 36(sp),d0
    9bdc:	|  |  |      cmp.l 32(sp),d0
    9be0:	|  |  '----- blt.w 9b2a <copyAnim+0xda>
    9be4:	|  |     ,-- bra.s 9bee <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9be6:	|  '-----|-> movea.l 16(sp),a0
    9bea:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9bee:	|        '-> move.l 16(sp),d0
}
    9bf2:	'----------> movea.l (sp)+,a6
    9bf4:	             lea 36(sp),sp
    9bf8:	             rts

00009bfa <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9bfa:	                lea -44(sp),sp
    9bfe:	                move.l a6,-(sp)
    9c00:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9c02:	                moveq #12,d0
    9c04:	                move.l d0,40(sp)
    9c08:	                clr.l 36(sp)
    9c0c:	                move.l 1d0c6 <SysBase>,d0
    9c12:	                movea.l d0,a6
    9c14:	                move.l 40(sp),d0
    9c18:	                move.l 36(sp),d1
    9c1c:	                jsr -684(a6)
    9c20:	                move.l d0,32(sp)
    9c24:	                move.l 32(sp),d0
    9c28:	                move.l d0,28(sp)
	if( !newP) {
    9c2c:	            ,-- bne.s 9c42 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9c2e:	            |   pea 19804 <PutChar+0x14ea>
    9c34:	            |   jsr 17878 <KPrintF>
    9c3a:	            |   addq.l #4,sp
		return NULL;
    9c3c:	            |   moveq #0,d0
    9c3e:	,-----------|-- bra.w 9e12 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9c42:	|           '-> movea.l 28(sp),a0
    9c46:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9c4c:	|               move.l 56(sp),d1
    9c50:	|               move.l d1,d0
    9c52:	|               add.l d0,d0
    9c54:	|               add.l d1,d0
    9c56:	|               add.l d0,d0
    9c58:	|               add.l d0,d0
    9c5a:	|               move.l d0,24(sp)
    9c5e:	|               clr.l 20(sp)
    9c62:	|               move.l 1d0c6 <SysBase>,d0
    9c68:	|               movea.l d0,a6
    9c6a:	|               move.l 24(sp),d0
    9c6e:	|               move.l 20(sp),d1
    9c72:	|               jsr -684(a6)
    9c76:	|               move.l d0,16(sp)
    9c7a:	|               move.l 16(sp),d0
    9c7e:	|               movea.l 28(sp),a0
    9c82:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9c86:	|               movea.l 28(sp),a0
    9c8a:	|               move.l 4(a0),d0
    9c8e:	|           ,-- bne.s 9ca4 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9c90:	|           |   pea 19804 <PutChar+0x14ea>
    9c96:	|           |   jsr 17878 <KPrintF>
    9c9c:	|           |   addq.l #4,sp
		return NULL;
    9c9e:	|           |   moveq #0,d0
    9ca0:	+-----------|-- bra.w 9e12 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9ca4:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9caa:	|               movea.l 60(sp),a0
    9cae:	|               move.l (a0),44(sp)
	while (a) {
    9cb2:	|     ,-------- bra.w 9e06 <createPersonaAnim+0x20c>
		a --;
    9cb6:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9cba:	|  |  |         movea.l 28(sp),a0
    9cbe:	|  |  |         movea.l 4(a0),a0
    9cc2:	|  |  |         move.l 48(sp),d1
    9cc6:	|  |  |         move.l d1,d0
    9cc8:	|  |  |         add.l d0,d0
    9cca:	|  |  |         add.l d1,d0
    9ccc:	|  |  |         add.l d0,d0
    9cce:	|  |  |         add.l d0,d0
    9cd0:	|  |  |         adda.l d0,a0
    9cd2:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9cd6:	|  |  |         movea.l 44(sp),a0
    9cda:	|  |  |         move.l (a0),d0
    9cdc:	|  |  |         moveq #5,d1
    9cde:	|  |  |         cmp.l d0,d1
    9ce0:	|  |  |     ,-- bne.s 9d0c <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9ce2:	|  |  |     |   movea.l 28(sp),a0
    9ce6:	|  |  |     |   movea.l 4(a0),a0
    9cea:	|  |  |     |   move.l 48(sp),d1
    9cee:	|  |  |     |   move.l d1,d0
    9cf0:	|  |  |     |   add.l d0,d0
    9cf2:	|  |  |     |   add.l d1,d0
    9cf4:	|  |  |     |   add.l d0,d0
    9cf6:	|  |  |     |   add.l d0,d0
    9cf8:	|  |  |     |   lea (0,a0,d0.l),a1
    9cfc:	|  |  |     |   movea.l 44(sp),a0
    9d00:	|  |  |     |   move.l 4(a0),d0
    9d04:	|  |  |     |   move.l d0,8(a1)
    9d08:	|  |  |  ,--|-- bra.w 9db4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9d0c:	|  |  |  |  '-> movea.l 44(sp),a0
    9d10:	|  |  |  |      move.l (a0),d0
    9d12:	|  |  |  |      moveq #2,d1
    9d14:	|  |  |  |      cmp.l d0,d1
    9d16:	|  |  |  |  ,-- bne.s 9d42 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9d18:	|  |  |  |  |   movea.l 44(sp),a0
    9d1c:	|  |  |  |  |   move.l 4(a0),d2
    9d20:	|  |  |  |  |   movea.l 28(sp),a0
    9d24:	|  |  |  |  |   movea.l 4(a0),a0
    9d28:	|  |  |  |  |   move.l 48(sp),d1
    9d2c:	|  |  |  |  |   move.l d1,d0
    9d2e:	|  |  |  |  |   add.l d0,d0
    9d30:	|  |  |  |  |   add.l d1,d0
    9d32:	|  |  |  |  |   add.l d0,d0
    9d34:	|  |  |  |  |   add.l d0,d0
    9d36:	|  |  |  |  |   adda.l d0,a0
    9d38:	|  |  |  |  |   move.l d2,d0
    9d3a:	|  |  |  |  |   neg.l d0
    9d3c:	|  |  |  |  |   move.l d0,8(a0)
    9d40:	|  |  |  +--|-- bra.s 9db4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9d42:	|  |  |  |  '-> movea.l 44(sp),a0
    9d46:	|  |  |  |      move.l (a0),d0
    9d48:	|  |  |  |      moveq #6,d1
    9d4a:	|  |  |  |      cmp.l d0,d1
    9d4c:	|  |  |  |  ,-- bne.s 9d94 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9d4e:	|  |  |  |  |   movea.l 44(sp),a0
    9d52:	|  |  |  |  |   movea.l 4(a0),a0
    9d56:	|  |  |  |  |   move.l (a0),d0
    9d58:	|  |  |  |  |   move.l d0,-(sp)
    9d5a:	|  |  |  |  |   pea 1 <_start+0x1>
    9d5e:	|  |  |  |  |   lea 20(sp),a0
    9d62:	|  |  |  |  |   move.l a0,-(sp)
    9d64:	|  |  |  |  |   jsr 14d98 <getValueType>
    9d6a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9d6e:	|  |  |  |  |   movea.l 44(sp),a0
    9d72:	|  |  |  |  |   movea.l 4(a0),a0
    9d76:	|  |  |  |  |   movea.l (a0),a0
    9d78:	|  |  |  |  |   move.l 8(a0),d0
    9d7c:	|  |  |  |  |   move.l d0,-(sp)
    9d7e:	|  |  |  |  |   pea 1 <_start+0x1>
    9d82:	|  |  |  |  |   lea 16(sp),a0
    9d86:	|  |  |  |  |   move.l a0,-(sp)
    9d88:	|  |  |  |  |   jsr 14d98 <getValueType>
    9d8e:	|  |  |  |  |   lea 12(sp),sp
    9d92:	|  |  |  +--|-- bra.s 9db4 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9d94:	|  |  |  |  '-> move.l 44(sp),d0
    9d98:	|  |  |  |      move.l d0,-(sp)
    9d9a:	|  |  |  |      pea 1 <_start+0x1>
    9d9e:	|  |  |  |      lea 20(sp),a0
    9da2:	|  |  |  |      move.l a0,-(sp)
    9da4:	|  |  |  |      jsr 14d98 <getValueType>
    9daa:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9dae:	|  |  |  |      moveq #1,d0
    9db0:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9db4:	|  |  |  '----> move.l 60(sp),-(sp)
    9db8:	|  |  |         jsr 1571c <trimStack>
    9dbe:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9dc0:	|  |  |         movea.l 28(sp),a0
    9dc4:	|  |  |         movea.l 4(a0),a0
    9dc8:	|  |  |         move.l 48(sp),d1
    9dcc:	|  |  |         move.l d1,d0
    9dce:	|  |  |         add.l d0,d0
    9dd0:	|  |  |         add.l d1,d0
    9dd2:	|  |  |         add.l d0,d0
    9dd4:	|  |  |         add.l d0,d0
    9dd6:	|  |  |         adda.l d0,a0
    9dd8:	|  |  |         move.l 12(sp),d0
    9ddc:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9dde:	|  |  |         movea.l 28(sp),a0
    9de2:	|  |  |         movea.l 4(a0),a0
    9de6:	|  |  |         move.l 48(sp),d1
    9dea:	|  |  |         move.l d1,d0
    9dec:	|  |  |         add.l d0,d0
    9dee:	|  |  |         add.l d1,d0
    9df0:	|  |  |         add.l d0,d0
    9df2:	|  |  |         add.l d0,d0
    9df4:	|  |  |         adda.l d0,a0
    9df6:	|  |  |         move.l 8(sp),d0
    9dfa:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9dfe:	|  |  |         movea.l 60(sp),a0
    9e02:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9e06:	|  |  '-------> tst.l 48(sp)
    9e0a:	|  '----------- bne.w 9cb6 <createPersonaAnim+0xbc>
	}

	return newP;
    9e0e:	|               move.l 28(sp),d0
}
    9e12:	'-------------> move.l (sp)+,d2
    9e14:	                movea.l (sp)+,a6
    9e16:	                lea 44(sp),sp
    9e1a:	                rts

00009e1c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9e1c:	       lea -12(sp),sp
    9e20:	       move.l a6,-(sp)

	if(orig->theSprites)
    9e22:	       movea.l 20(sp),a0
    9e26:	       move.l (a0),d0
    9e28:	   ,-- beq.s 9e52 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9e2a:	   |   movea.l 20(sp),a0
    9e2e:	   |   movea.l (a0),a0
    9e30:	   |   move.l 4(a0),d0
    9e34:	   |   subq.l #1,d0
    9e36:	   |   move.l d0,4(a0)
    9e3a:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9e40:	   +-- bne.s 9e52 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9e42:	   |   movea.l 20(sp),a0
    9e46:	   |   move.l (a0),d0
    9e48:	   |   move.l d0,-(sp)
    9e4a:	   |   jsr 8f00 <forgetSpriteBank>
    9e50:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9e52:	   '-> tst.l 20(sp)
    9e56:	,----- beq.s 9e96 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9e58:	|      movea.l 20(sp),a0
    9e5c:	|      move.l 8(a0),d0
    9e60:	|  ,-- beq.s 9e7c <deleteAnim+0x60>
			FreeVec( orig->frames);
    9e62:	|  |   movea.l 20(sp),a0
    9e66:	|  |   move.l 4(a0),8(sp)
    9e6c:	|  |   move.l 1d0c6 <SysBase>,d0
    9e72:	|  |   movea.l d0,a6
    9e74:	|  |   movea.l 8(sp),a1
    9e78:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9e7c:	|  '-> move.l 20(sp),4(sp)
    9e82:	|      move.l 1d0c6 <SysBase>,d0
    9e88:	|      movea.l d0,a6
    9e8a:	|      movea.l 4(sp),a1
    9e8e:	|      jsr -690(a6)
		orig = NULL;
    9e92:	|      clr.l 20(sp)
	}	
	
}
    9e96:	'----> nop
    9e98:	       movea.l (sp)+,a6
    9e9a:	       lea 12(sp),sp
    9e9e:	       rts

00009ea0 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9ea0:	          lea -124(sp),sp
    9ea4:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9ea8:	          movea.l 152(sp),a0
    9eac:	          move.l 56(a0),d1
    9eb0:	          movea.l 152(sp),a0
    9eb4:	          move.l 60(a0),d0
    9eb8:	          cmp.l d1,d0
    9eba:	      ,-- bne.s 9eea <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9ebc:	      |   movea.l 152(sp),a0
    9ec0:	      |   moveq #-1,d0
    9ec2:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9ec6:	      |   movea.l 152(sp),a0
    9eca:	      |   move.l 40(a0),d0
    9ece:	      |   movea.l 152(sp),a0
    9ed2:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9ed6:	      |   movea.l 152(sp),a0
    9eda:	      |   move.l 44(a0),d0
    9ede:	      |   movea.l 152(sp),a0
    9ee2:	      |   move.l d0,52(a0)
    9ee6:	   ,--|-- bra.w a450 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9eea:	   |  '-> movea.l 1d1de <currentFloor>,a0
    9ef0:	   |      move.l 16(a0),d1
    9ef4:	   |      movea.l 152(sp),a0
    9ef8:	   |      move.l 56(a0),d0
    9efc:	   |      add.l d0,d0
    9efe:	   |      add.l d0,d0
    9f00:	   |      movea.l d1,a0
    9f02:	   |      adda.l d0,a0
    9f04:	   |      move.l (a0),d1
    9f06:	   |      movea.l 152(sp),a0
    9f0a:	   |      move.l 60(a0),d0
    9f0e:	   |      add.l d0,d0
    9f10:	   |      add.l d0,d0
    9f12:	   |      movea.l d1,a0
    9f14:	   |      adda.l d0,a0
    9f16:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9f1a:	   |      moveq #-1,d0
    9f1c:	   |      cmp.l 144(sp),d0
    9f20:	   |  ,-- bne.s 9f28 <doBorderStuff+0x88>
    9f22:	   |  |   clr.w d0
    9f24:	,--|--|-- bra.w a550 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9f28:	|  |  '-> movea.l 1d1de <currentFloor>,a0
    9f2e:	|  |      move.l 12(a0),d1
    9f32:	|  |      move.l 144(sp),d0
    9f36:	|  |      lsl.l #3,d0
    9f38:	|  |      add.l d0,d1
    9f3a:	|  |      movea.l 1d1de <currentFloor>,a0
    9f40:	|  |      movea.l 12(a0),a1
    9f44:	|  |      movea.l 152(sp),a0
    9f48:	|  |      move.l 56(a0),d0
    9f4c:	|  |      lsl.l #3,d0
    9f4e:	|  |      add.l a1,d0
    9f50:	|  |      lea 40(sp),a0
    9f54:	|  |      move.l a0,-(sp)
    9f56:	|  |      lea 48(sp),a0
    9f5a:	|  |      move.l a0,-(sp)
    9f5c:	|  |      move.l d1,-(sp)
    9f5e:	|  |      move.l d0,-(sp)
    9f60:	|  |      jsr 16ade <getMatchingCorners>
    9f66:	|  |      lea 16(sp),sp
    9f6a:	|  |      tst.w d0
    9f6c:	|  |  ,-- bne.s 9f82 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9f6e:	|  |  |   pea 1982e <PutChar+0x1514>
    9f74:	|  |  |   jsr 17878 <KPrintF>
    9f7a:	|  |  |   addq.l #4,sp
            return FALSE;
    9f7c:	|  |  |   clr.w d0
    9f7e:	+--|--|-- bra.w a550 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9f82:	|  |  '-> movea.l 152(sp),a0
    9f86:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9f8c:	|  |      movea.l 152(sp),a0
    9f90:	|  |      move.l (a0),d0
    9f92:	|  |      move.l d0,-(sp)
    9f94:	|  |      jsr 17c42 <__fixsfsi>
    9f9a:	|  |      addq.l #4,sp
    9f9c:	|  |      move.l d0,140(sp)
    9fa0:	|  |      movea.l 152(sp),a0
    9fa4:	|  |      move.l 4(a0),d0
    9fa8:	|  |      move.l d0,-(sp)
    9faa:	|  |      jsr 17c42 <__fixsfsi>
    9fb0:	|  |      addq.l #4,sp
    9fb2:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9fb6:	|  |      movea.l 152(sp),a0
    9fba:	|  |      move.l 40(a0),132(sp)
    9fc0:	|  |      movea.l 152(sp),a0
    9fc4:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9fca:	|  |      movea.l 1d1de <currentFloor>,a0
    9fd0:	|  |      move.l 4(a0),d1
    9fd4:	|  |      move.l 44(sp),d0
    9fd8:	|  |      lsl.l #3,d0
    9fda:	|  |      movea.l d1,a0
    9fdc:	|  |      adda.l d0,a0
    9fde:	|  |      move.l (a0),124(sp)
    9fe2:	|  |      movea.l 1d1de <currentFloor>,a0
    9fe8:	|  |      move.l 4(a0),d1
    9fec:	|  |      move.l 44(sp),d0
    9ff0:	|  |      lsl.l #3,d0
    9ff2:	|  |      movea.l d1,a0
    9ff4:	|  |      adda.l d0,a0
    9ff6:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9ffc:	|  |      movea.l 1d1de <currentFloor>,a0
    a002:	|  |      move.l 4(a0),d1
    a006:	|  |      move.l 40(sp),d0
    a00a:	|  |      lsl.l #3,d0
    a00c:	|  |      movea.l d1,a0
    a00e:	|  |      adda.l d0,a0
    a010:	|  |      move.l (a0),116(sp)
    a014:	|  |      movea.l 1d1de <currentFloor>,a0
    a01a:	|  |      move.l 4(a0),d1
    a01e:	|  |      move.l 40(sp),d0
    a022:	|  |      lsl.l #3,d0
    a024:	|  |      movea.l d1,a0
    a026:	|  |      adda.l d0,a0
    a028:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a02e:	|  |      move.l 140(sp),d0
    a032:	|  |      sub.l 132(sp),d0
    a036:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a03a:	|  |      move.l 136(sp),d0
    a03e:	|  |      sub.l 128(sp),d0
    a042:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a046:	|  |      move.l 116(sp),d0
    a04a:	|  |      sub.l 124(sp),d0
    a04e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a052:	|  |      move.l 112(sp),d0
    a056:	|  |      sub.l 120(sp),d0
    a05a:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a05e:	|  |      move.l 124(sp),d0
    a062:	|  |      sub.l 140(sp),d0
    a066:	|  |      move.l 104(sp),-(sp)
    a06a:	|  |      move.l d0,-(sp)
    a06c:	|  |      jsr 18204 <__mulsi3>
    a072:	|  |      addq.l #8,sp
    a074:	|  |      move.l d0,d2
    a076:	|  |      move.l 120(sp),d0
    a07a:	|  |      sub.l 136(sp),d0
    a07e:	|  |      move.l 108(sp),-(sp)
    a082:	|  |      move.l d0,-(sp)
    a084:	|  |      jsr 18204 <__mulsi3>
    a08a:	|  |      addq.l #8,sp
    a08c:	|  |      move.l d2,d1
    a08e:	|  |      sub.l d0,d1
    a090:	|  |      move.l d1,-(sp)
    a092:	|  |      jsr 17c6a <__floatsidf>
    a098:	|  |      addq.l #4,sp
    a09a:	|  |      move.l d0,32(sp)
    a09e:	|  |      move.l d1,36(sp)
    a0a2:	|  |      move.l 32(sp),88(sp)
    a0a8:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a0ae:	|  |      move.l 96(sp),-(sp)
    a0b2:	|  |      move.l 112(sp),-(sp)
    a0b6:	|  |      jsr 18204 <__mulsi3>
    a0bc:	|  |      addq.l #8,sp
    a0be:	|  |      move.l d0,d2
    a0c0:	|  |      move.l 100(sp),-(sp)
    a0c4:	|  |      move.l 108(sp),-(sp)
    a0c8:	|  |      jsr 18204 <__mulsi3>
    a0ce:	|  |      addq.l #8,sp
    a0d0:	|  |      move.l d2,d1
    a0d2:	|  |      sub.l d0,d1
    a0d4:	|  |      move.l d1,-(sp)
    a0d6:	|  |      jsr 17c6a <__floatsidf>
    a0dc:	|  |      addq.l #4,sp
    a0de:	|  |      move.l d1,-(sp)
    a0e0:	|  |      move.l d0,-(sp)
    a0e2:	|  |      move.l 100(sp),-(sp)
    a0e6:	|  |      move.l 100(sp),-(sp)
    a0ea:	|  |      jsr 17afe <__divdf3>
    a0f0:	|  |      lea 16(sp),sp
    a0f4:	|  |      move.l d0,24(sp)
    a0f8:	|  |      move.l d1,28(sp)
    a0fc:	|  |      move.l 24(sp),88(sp)
    a102:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a108:	|  |      clr.l -(sp)
    a10a:	|  |      clr.l -(sp)
    a10c:	|  |      move.l 100(sp),-(sp)
    a110:	|  |      move.l 100(sp),-(sp)
    a114:	|  |      jsr 17dc8 <__gtdf2>
    a11a:	|  |      lea 16(sp),sp
    a11e:	|  |      tst.l d0
    a120:	|  |  ,-- ble.w a1f8 <doBorderStuff+0x358>
    a124:	|  |  |   clr.l -(sp)
    a126:	|  |  |   move.l #1072693248,-(sp)
    a12c:	|  |  |   move.l 100(sp),-(sp)
    a130:	|  |  |   move.l 100(sp),-(sp)
    a134:	|  |  |   jsr 17e82 <__ltdf2>
    a13a:	|  |  |   lea 16(sp),sp
    a13e:	|  |  |   tst.l d0
    a140:	|  |  +-- bge.w a1f8 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a144:	|  |  |   move.l 124(sp),-(sp)
    a148:	|  |  |   jsr 17c6a <__floatsidf>
    a14e:	|  |  |   addq.l #4,sp
    a150:	|  |  |   move.l d0,d2
    a152:	|  |  |   move.l d1,d3
    a154:	|  |  |   move.l 100(sp),-(sp)
    a158:	|  |  |   jsr 17c6a <__floatsidf>
    a15e:	|  |  |   addq.l #4,sp
    a160:	|  |  |   move.l 92(sp),-(sp)
    a164:	|  |  |   move.l 92(sp),-(sp)
    a168:	|  |  |   move.l d1,-(sp)
    a16a:	|  |  |   move.l d0,-(sp)
    a16c:	|  |  |   jsr 17cfa <__muldf3>
    a172:	|  |  |   lea 16(sp),sp
    a176:	|  |  |   move.l d1,-(sp)
    a178:	|  |  |   move.l d0,-(sp)
    a17a:	|  |  |   move.l d3,-(sp)
    a17c:	|  |  |   move.l d2,-(sp)
    a17e:	|  |  |   jsr 17a9c <__adddf3>
    a184:	|  |  |   lea 16(sp),sp
    a188:	|  |  |   move.l d1,-(sp)
    a18a:	|  |  |   move.l d0,-(sp)
    a18c:	|  |  |   jsr 17c0c <__fixdfsi>
    a192:	|  |  |   addq.l #8,sp
    a194:	|  |  |   movea.l 152(sp),a0
    a198:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a19c:	|  |  |   move.l 120(sp),-(sp)
    a1a0:	|  |  |   jsr 17c6a <__floatsidf>
    a1a6:	|  |  |   addq.l #4,sp
    a1a8:	|  |  |   move.l d0,d2
    a1aa:	|  |  |   move.l d1,d3
    a1ac:	|  |  |   move.l 96(sp),-(sp)
    a1b0:	|  |  |   jsr 17c6a <__floatsidf>
    a1b6:	|  |  |   addq.l #4,sp
    a1b8:	|  |  |   move.l 92(sp),-(sp)
    a1bc:	|  |  |   move.l 92(sp),-(sp)
    a1c0:	|  |  |   move.l d1,-(sp)
    a1c2:	|  |  |   move.l d0,-(sp)
    a1c4:	|  |  |   jsr 17cfa <__muldf3>
    a1ca:	|  |  |   lea 16(sp),sp
    a1ce:	|  |  |   move.l d1,-(sp)
    a1d0:	|  |  |   move.l d0,-(sp)
    a1d2:	|  |  |   move.l d3,-(sp)
    a1d4:	|  |  |   move.l d2,-(sp)
    a1d6:	|  |  |   jsr 17a9c <__adddf3>
    a1dc:	|  |  |   lea 16(sp),sp
    a1e0:	|  |  |   move.l d1,-(sp)
    a1e2:	|  |  |   move.l d0,-(sp)
    a1e4:	|  |  |   jsr 17c0c <__fixdfsi>
    a1ea:	|  |  |   addq.l #8,sp
    a1ec:	|  |  |   movea.l 152(sp),a0
    a1f0:	|  |  |   move.l d0,52(a0)
    a1f4:	|  +--|-- bra.w a450 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a1f8:	|  |  '-> move.l 140(sp),d0
    a1fc:	|  |      sub.l 124(sp),d0
    a200:	|  |      move.l d0,84(sp)
    a204:	|  |      move.l 140(sp),d0
    a208:	|  |      sub.l 116(sp),d0
    a20c:	|  |      move.l d0,80(sp)
    a210:	|  |      move.l 132(sp),d0
    a214:	|  |      sub.l 124(sp),d0
    a218:	|  |      move.l d0,76(sp)
    a21c:	|  |      move.l 132(sp),d0
    a220:	|  |      sub.l 116(sp),d0
    a224:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a228:	|  |      move.l 136(sp),d0
    a22c:	|  |      sub.l 120(sp),d0
    a230:	|  |      move.l d0,68(sp)
    a234:	|  |      move.l 136(sp),d0
    a238:	|  |      sub.l 112(sp),d0
    a23c:	|  |      move.l d0,64(sp)
    a240:	|  |      move.l 128(sp),d0
    a244:	|  |      sub.l 120(sp),d0
    a248:	|  |      move.l d0,60(sp)
    a24c:	|  |      move.l 128(sp),d0
    a250:	|  |      sub.l 112(sp),d0
    a254:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a258:	|  |      move.l 84(sp),-(sp)
    a25c:	|  |      move.l 88(sp),-(sp)
    a260:	|  |      jsr 18204 <__mulsi3>
    a266:	|  |      addq.l #8,sp
    a268:	|  |      move.l d0,84(sp)
    a26c:	|  |      move.l 80(sp),-(sp)
    a270:	|  |      move.l 84(sp),-(sp)
    a274:	|  |      jsr 18204 <__mulsi3>
    a27a:	|  |      addq.l #8,sp
    a27c:	|  |      move.l d0,80(sp)
    a280:	|  |      move.l 76(sp),-(sp)
    a284:	|  |      move.l 80(sp),-(sp)
    a288:	|  |      jsr 18204 <__mulsi3>
    a28e:	|  |      addq.l #8,sp
    a290:	|  |      move.l d0,76(sp)
    a294:	|  |      move.l 72(sp),-(sp)
    a298:	|  |      move.l 76(sp),-(sp)
    a29c:	|  |      jsr 18204 <__mulsi3>
    a2a2:	|  |      addq.l #8,sp
    a2a4:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a2a8:	|  |      move.l 68(sp),-(sp)
    a2ac:	|  |      move.l 72(sp),-(sp)
    a2b0:	|  |      jsr 18204 <__mulsi3>
    a2b6:	|  |      addq.l #8,sp
    a2b8:	|  |      move.l d0,68(sp)
    a2bc:	|  |      move.l 64(sp),-(sp)
    a2c0:	|  |      move.l 68(sp),-(sp)
    a2c4:	|  |      jsr 18204 <__mulsi3>
    a2ca:	|  |      addq.l #8,sp
    a2cc:	|  |      move.l d0,64(sp)
    a2d0:	|  |      move.l 60(sp),-(sp)
    a2d4:	|  |      move.l 64(sp),-(sp)
    a2d8:	|  |      jsr 18204 <__mulsi3>
    a2de:	|  |      addq.l #8,sp
    a2e0:	|  |      move.l d0,60(sp)
    a2e4:	|  |      move.l 56(sp),-(sp)
    a2e8:	|  |      move.l 60(sp),-(sp)
    a2ec:	|  |      jsr 18204 <__mulsi3>
    a2f2:	|  |      addq.l #8,sp
    a2f4:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a2f8:	|  |      move.l 84(sp),-(sp)
    a2fc:	|  |      jsr 17c6a <__floatsidf>
    a302:	|  |      addq.l #4,sp
    a304:	|  |      move.l d0,d2
    a306:	|  |      move.l d1,d3
    a308:	|  |      move.l 68(sp),-(sp)
    a30c:	|  |      jsr 17c6a <__floatsidf>
    a312:	|  |      addq.l #4,sp
    a314:	|  |      move.l d1,-(sp)
    a316:	|  |      move.l d0,-(sp)
    a318:	|  |      move.l d3,-(sp)
    a31a:	|  |      move.l d2,-(sp)
    a31c:	|  |      jsr 17a9c <__adddf3>
    a322:	|  |      lea 16(sp),sp
    a326:	|  |      move.l d1,-(sp)
    a328:	|  |      move.l d0,-(sp)
    a32a:	|  |      jsr 181ba <sqrt>
    a330:	|  |      addq.l #8,sp
    a332:	|  |      move.l d0,d2
    a334:	|  |      move.l d1,d3
    a336:	|  |      move.l 76(sp),-(sp)
    a33a:	|  |      jsr 17c6a <__floatsidf>
    a340:	|  |      addq.l #4,sp
    a342:	|  |      move.l d0,d4
    a344:	|  |      move.l d1,d5
    a346:	|  |      move.l 60(sp),-(sp)
    a34a:	|  |      jsr 17c6a <__floatsidf>
    a350:	|  |      addq.l #4,sp
    a352:	|  |      move.l d1,-(sp)
    a354:	|  |      move.l d0,-(sp)
    a356:	|  |      move.l d5,-(sp)
    a358:	|  |      move.l d4,-(sp)
    a35a:	|  |      jsr 17a9c <__adddf3>
    a360:	|  |      lea 16(sp),sp
    a364:	|  |      move.l d1,-(sp)
    a366:	|  |      move.l d0,-(sp)
    a368:	|  |      jsr 181ba <sqrt>
    a36e:	|  |      addq.l #8,sp
    a370:	|  |      move.l d1,-(sp)
    a372:	|  |      move.l d0,-(sp)
    a374:	|  |      move.l d3,-(sp)
    a376:	|  |      move.l d2,-(sp)
    a378:	|  |      jsr 17a9c <__adddf3>
    a37e:	|  |      lea 16(sp),sp
    a382:	|  |      move.l d0,d2
    a384:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a386:	|  |      move.l 80(sp),-(sp)
    a38a:	|  |      jsr 17c6a <__floatsidf>
    a390:	|  |      addq.l #4,sp
    a392:	|  |      move.l d0,d4
    a394:	|  |      move.l d1,d5
    a396:	|  |      move.l 64(sp),-(sp)
    a39a:	|  |      jsr 17c6a <__floatsidf>
    a3a0:	|  |      addq.l #4,sp
    a3a2:	|  |      move.l d1,-(sp)
    a3a4:	|  |      move.l d0,-(sp)
    a3a6:	|  |      move.l d5,-(sp)
    a3a8:	|  |      move.l d4,-(sp)
    a3aa:	|  |      jsr 17a9c <__adddf3>
    a3b0:	|  |      lea 16(sp),sp
    a3b4:	|  |      move.l d1,-(sp)
    a3b6:	|  |      move.l d0,-(sp)
    a3b8:	|  |      jsr 181ba <sqrt>
    a3be:	|  |      addq.l #8,sp
    a3c0:	|  |      move.l d0,d4
    a3c2:	|  |      move.l d1,d5
    a3c4:	|  |      move.l 72(sp),-(sp)
    a3c8:	|  |      jsr 17c6a <__floatsidf>
    a3ce:	|  |      addq.l #4,sp
    a3d0:	|  |      move.l d0,d6
    a3d2:	|  |      move.l d1,d7
    a3d4:	|  |      move.l 56(sp),-(sp)
    a3d8:	|  |      jsr 17c6a <__floatsidf>
    a3de:	|  |      addq.l #4,sp
    a3e0:	|  |      move.l d1,-(sp)
    a3e2:	|  |      move.l d0,-(sp)
    a3e4:	|  |      move.l d7,-(sp)
    a3e6:	|  |      move.l d6,-(sp)
    a3e8:	|  |      jsr 17a9c <__adddf3>
    a3ee:	|  |      lea 16(sp),sp
    a3f2:	|  |      move.l d1,-(sp)
    a3f4:	|  |      move.l d0,-(sp)
    a3f6:	|  |      jsr 181ba <sqrt>
    a3fc:	|  |      addq.l #8,sp
    a3fe:	|  |      move.l d1,-(sp)
    a400:	|  |      move.l d0,-(sp)
    a402:	|  |      move.l d5,-(sp)
    a404:	|  |      move.l d4,-(sp)
    a406:	|  |      jsr 17a9c <__adddf3>
    a40c:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a410:	|  |      move.l d1,-(sp)
    a412:	|  |      move.l d0,-(sp)
    a414:	|  |      move.l d3,-(sp)
    a416:	|  |      move.l d2,-(sp)
    a418:	|  |      jsr 17e82 <__ltdf2>
    a41e:	|  |      lea 16(sp),sp
    a422:	|  |      tst.l d0
    a424:	|  |  ,-- bge.s a43c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a426:	|  |  |   movea.l 152(sp),a0
    a42a:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a430:	|  |  |   movea.l 152(sp),a0
    a434:	|  |  |   move.l 120(sp),52(a0)
    a43a:	|  +--|-- bra.s a450 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a43c:	|  |  '-> movea.l 152(sp),a0
    a440:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a446:	|  |      movea.l 152(sp),a0
    a44a:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a450:	|  '----> movea.l 152(sp),a0
    a454:	|         move.l 52(a0),d0
    a458:	|         move.l d0,-(sp)
    a45a:	|         jsr 17caa <__floatsisf>
    a460:	|         addq.l #4,sp
    a462:	|         move.l d0,d1
    a464:	|         movea.l 152(sp),a0
    a468:	|         move.l 4(a0),d0
    a46c:	|         move.l d0,-(sp)
    a46e:	|         move.l d1,-(sp)
    a470:	|         jsr 17f9e <__subsf3>
    a476:	|         addq.l #8,sp
    a478:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a47c:	|         movea.l 152(sp),a0
    a480:	|         move.l (a0),d2
    a482:	|         movea.l 152(sp),a0
    a486:	|         move.l 48(a0),d0
    a48a:	|         move.l d0,-(sp)
    a48c:	|         jsr 17caa <__floatsisf>
    a492:	|         addq.l #4,sp
    a494:	|         move.l d0,-(sp)
    a496:	|         move.l d2,-(sp)
    a498:	|         jsr 17f9e <__subsf3>
    a49e:	|         addq.l #8,sp
    a4a0:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a4a4:	|         clr.l -(sp)
    a4a6:	|         move.l 52(sp),-(sp)
    a4aa:	|         jsr 17f06 <__nesf2>
    a4b0:	|         addq.l #8,sp
    a4b2:	|         tst.l d0
    a4b4:	|     ,-- bne.s a4c8 <doBorderStuff+0x628>
    a4b6:	|     |   clr.l -(sp)
    a4b8:	|     |   move.l 56(sp),-(sp)
    a4bc:	|     |   jsr 17f06 <__nesf2>
    a4c2:	|     |   addq.l #8,sp
    a4c4:	|     |   tst.l d0
    a4c6:	|  ,--|-- beq.s a53e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a4c8:	|  |  '-> move.l 52(sp),d0
    a4cc:	|  |      move.l d0,-(sp)
    a4ce:	|  |      move.l d0,-(sp)
    a4d0:	|  |      jsr 17a66 <__addsf3>
    a4d6:	|  |      addq.l #8,sp
    a4d8:	|  |      move.l d0,-(sp)
    a4da:	|  |      move.l 52(sp),-(sp)
    a4de:	|  |      jsr 1800a <atan2f>
    a4e4:	|  |      addq.l #8,sp
    a4e6:	|  |      move.l d0,-(sp)
    a4e8:	|  |      jsr 17bcc <__extendsfdf2>
    a4ee:	|  |      addq.l #4,sp
    a4f0:	|  |      move.l #-1540411785,-(sp)
    a4f6:	|  |      move.l #1078765033,-(sp)
    a4fc:	|  |      move.l d1,-(sp)
    a4fe:	|  |      move.l d0,-(sp)
    a500:	|  |      jsr 17cfa <__muldf3>
    a506:	|  |      lea 16(sp),sp
    a50a:	|  |      clr.l -(sp)
    a50c:	|  |      move.l #1080459264,-(sp)
    a512:	|  |      move.l d1,-(sp)
    a514:	|  |      move.l d0,-(sp)
    a516:	|  |      jsr 17a9c <__adddf3>
    a51c:	|  |      lea 16(sp),sp
    a520:	|  |      move.l d1,-(sp)
    a522:	|  |      move.l d0,-(sp)
    a524:	|  |      jsr 17c0c <__fixdfsi>
    a52a:	|  |      addq.l #8,sp
    a52c:	|  |      movea.l 152(sp),a0
    a530:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a534:	|  |      movea.l 152(sp),a0
    a538:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a53e:	|  '----> pea 1 <_start+0x1>
    a542:	|         move.l 156(sp),-(sp)
    a546:	|         jsr 46da <setFrames>
    a54c:	|         addq.l #8,sp
    return TRUE;
    a54e:	|         moveq #1,d0
}
    a550:	'-------> movem.l (sp)+,d2-d7
    a554:	          lea 124(sp),sp
    a558:	          rts

0000a55a <drawPeople>:

void drawPeople () {
    a55a:	                   lea -24(sp),sp
    a55e:	                   move.l d2,-(sp)

	shufflePeople ();
    a560:	                   jsr c058 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a566:	                   move.l 1d126 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a56e:	                   clr.l 20(sp)
	overRegion = NULL;
    a572:	                   clr.l 1d1d6 <overRegion>

	while (thisPerson) {
    a578:	   ,-------------- bra.w ab2a <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a57c:	,--|-------------> movea.l 24(sp),a0
    a580:	|  |               move.w 104(a0),d0
    a584:	|  |  ,----------- beq.w a8de <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a588:	|  |  |            movea.l 24(sp),a0
    a58c:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a592:	|  |  |            movea.l 24(sp),a0
    a596:	|  |  |            move.l 76(a0),d0
    a59a:	|  |  |            cmp.l 20(sp),d0
    a59e:	|  |  |  ,-------- beq.w a76c <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a5a2:	|  |  |  |         movea.l 24(sp),a0
    a5a6:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a5aa:	|  |  |  |         movea.l 24(sp),a0
    a5ae:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a5b4:	|  |  |  |         movea.l 24(sp),a0
    a5b8:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a5bc:	|  |  |  |         movea.l 20(sp),a0
    a5c0:	|  |  |  |         movea.l 4(a0),a0
    a5c4:	|  |  |  |         move.l 4(a0),d0
    a5c8:	|  |  |  |         movea.l 24(sp),a0
    a5cc:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a5d0:	|  |  |  |         movea.l 20(sp),a0
    a5d4:	|  |  |  |         movea.l 4(a0),a1
    a5d8:	|  |  |  |         movea.l 24(sp),a0
    a5dc:	|  |  |  |         move.l 84(a0),d0
    a5e0:	|  |  |  |         move.l d0,d1
    a5e2:	|  |  |  |         move.l d1,d0
    a5e4:	|  |  |  |         add.l d0,d0
    a5e6:	|  |  |  |         add.l d1,d0
    a5e8:	|  |  |  |         add.l d0,d0
    a5ea:	|  |  |  |         add.l d0,d0
    a5ec:	|  |  |  |         lea (0,a1,d0.l),a0
    a5f0:	|  |  |  |         move.l 8(a0),d0
    a5f4:	|  |  |  |     ,-- ble.w a696 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a5f8:	|  |  |  |     |   movea.l 20(sp),a0
    a5fc:	|  |  |  |     |   movea.l 4(a0),a1
    a600:	|  |  |  |     |   movea.l 24(sp),a0
    a604:	|  |  |  |     |   move.l 84(a0),d0
    a608:	|  |  |  |     |   move.l d0,d1
    a60a:	|  |  |  |     |   move.l d1,d0
    a60c:	|  |  |  |     |   add.l d0,d0
    a60e:	|  |  |  |     |   add.l d1,d0
    a610:	|  |  |  |     |   add.l d0,d0
    a612:	|  |  |  |     |   add.l d0,d0
    a614:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a618:	|  |  |  |     |   move.l 8(a0),d0
    a61c:	|  |  |  |     |   clr.l -(sp)
    a61e:	|  |  |  |     |   move.l d0,-(sp)
    a620:	|  |  |  |     |   jsr d76c <startSound>
    a626:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a628:	|  |  |  |     |   movea.l 24(sp),a0
    a62c:	|  |  |  |     |   move.l 84(a0),d0
    a630:	|  |  |  |     |   addq.l #1,d0
    a632:	|  |  |  |     |   movea.l 24(sp),a0
    a636:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a63a:	|  |  |  |     |   movea.l 24(sp),a0
    a63e:	|  |  |  |     |   move.l 84(a0),d0
    a642:	|  |  |  |     |   movea.l 24(sp),a0
    a646:	|  |  |  |     |   movea.l 72(a0),a0
    a64a:	|  |  |  |     |   move.l 8(a0),d1
    a64e:	|  |  |  |     |   move.l d1,-(sp)
    a650:	|  |  |  |     |   move.l d0,-(sp)
    a652:	|  |  |  |     |   jsr 182b0 <__modsi3>
    a658:	|  |  |  |     |   addq.l #8,sp
    a65a:	|  |  |  |     |   movea.l 24(sp),a0
    a65e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a662:	|  |  |  |     |   movea.l 24(sp),a0
    a666:	|  |  |  |     |   movea.l 72(a0),a0
    a66a:	|  |  |  |     |   movea.l 4(a0),a1
    a66e:	|  |  |  |     |   movea.l 24(sp),a0
    a672:	|  |  |  |     |   move.l 84(a0),d0
    a676:	|  |  |  |     |   move.l d0,d1
    a678:	|  |  |  |     |   move.l d1,d0
    a67a:	|  |  |  |     |   add.l d0,d0
    a67c:	|  |  |  |     |   add.l d1,d0
    a67e:	|  |  |  |     |   add.l d0,d0
    a680:	|  |  |  |     |   add.l d0,d0
    a682:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a686:	|  |  |  |     |   move.l 4(a0),d0
    a68a:	|  |  |  |     |   movea.l 24(sp),a0
    a68e:	|  |  |  |     |   move.l d0,88(a0)
    a692:	|  |  |  |  ,--|-- bra.w a7d4 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a696:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a69a:	|  |  |  |  |      movea.l 4(a0),a1
    a69e:	|  |  |  |  |      movea.l 24(sp),a0
    a6a2:	|  |  |  |  |      move.l 84(a0),d0
    a6a6:	|  |  |  |  |      move.l d0,d1
    a6a8:	|  |  |  |  |      move.l d1,d0
    a6aa:	|  |  |  |  |      add.l d0,d0
    a6ac:	|  |  |  |  |      add.l d1,d0
    a6ae:	|  |  |  |  |      add.l d0,d0
    a6b0:	|  |  |  |  |      add.l d0,d0
    a6b2:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a6b6:	|  |  |  |  |      move.l 8(a0),d0
    a6ba:	|  |  |  |  +----- beq.w a7d4 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a6be:	|  |  |  |  |      movea.l 1d096 <noStack>,a1
    a6c4:	|  |  |  |  |      movea.l 20(sp),a0
    a6c8:	|  |  |  |  |      move.l 4(a0),d2
    a6cc:	|  |  |  |  |      movea.l 24(sp),a0
    a6d0:	|  |  |  |  |      move.l 84(a0),d0
    a6d4:	|  |  |  |  |      move.l d0,d1
    a6d6:	|  |  |  |  |      move.l d1,d0
    a6d8:	|  |  |  |  |      add.l d0,d0
    a6da:	|  |  |  |  |      add.l d1,d0
    a6dc:	|  |  |  |  |      add.l d0,d0
    a6de:	|  |  |  |  |      add.l d0,d0
    a6e0:	|  |  |  |  |      movea.l d2,a0
    a6e2:	|  |  |  |  |      adda.l d0,a0
    a6e4:	|  |  |  |  |      move.l 8(a0),d0
    a6e8:	|  |  |  |  |      neg.l d0
    a6ea:	|  |  |  |  |      pea 1 <_start+0x1>
    a6ee:	|  |  |  |  |      move.l a1,-(sp)
    a6f0:	|  |  |  |  |      clr.l -(sp)
    a6f2:	|  |  |  |  |      clr.l -(sp)
    a6f4:	|  |  |  |  |      move.l d0,-(sp)
    a6f6:	|  |  |  |  |      jsr 7a06 <startNewFunctionNum>
    a6fc:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a700:	|  |  |  |  |      movea.l 24(sp),a0
    a704:	|  |  |  |  |      move.l 84(a0),d0
    a708:	|  |  |  |  |      addq.l #1,d0
    a70a:	|  |  |  |  |      movea.l 24(sp),a0
    a70e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a712:	|  |  |  |  |      movea.l 24(sp),a0
    a716:	|  |  |  |  |      move.l 84(a0),d0
    a71a:	|  |  |  |  |      movea.l 24(sp),a0
    a71e:	|  |  |  |  |      movea.l 72(a0),a0
    a722:	|  |  |  |  |      move.l 8(a0),d1
    a726:	|  |  |  |  |      move.l d1,-(sp)
    a728:	|  |  |  |  |      move.l d0,-(sp)
    a72a:	|  |  |  |  |      jsr 182b0 <__modsi3>
    a730:	|  |  |  |  |      addq.l #8,sp
    a732:	|  |  |  |  |      movea.l 24(sp),a0
    a736:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a73a:	|  |  |  |  |      movea.l 24(sp),a0
    a73e:	|  |  |  |  |      movea.l 72(a0),a0
    a742:	|  |  |  |  |      movea.l 4(a0),a1
    a746:	|  |  |  |  |      movea.l 24(sp),a0
    a74a:	|  |  |  |  |      move.l 84(a0),d0
    a74e:	|  |  |  |  |      move.l d0,d1
    a750:	|  |  |  |  |      move.l d1,d0
    a752:	|  |  |  |  |      add.l d0,d0
    a754:	|  |  |  |  |      add.l d1,d0
    a756:	|  |  |  |  |      add.l d0,d0
    a758:	|  |  |  |  |      add.l d0,d0
    a75a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a75e:	|  |  |  |  |      move.l 4(a0),d0
    a762:	|  |  |  |  |      movea.l 24(sp),a0
    a766:	|  |  |  |  |      move.l d0,88(a0)
    a76a:	|  |  |  |  +----- bra.s a7d4 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a76c:	|  |  |  '--|----> movea.l 24(sp),a0
    a770:	|  |  |     |      move.l (a0),d0
    a772:	|  |  |     |      movea.l 24(sp),a0
    a776:	|  |  |     |      move.l 8(a0),d1
    a77a:	|  |  |     |      move.l d1,-(sp)
    a77c:	|  |  |     |      move.l d0,-(sp)
    a77e:	|  |  |     |      jsr 17b96 <__eqsf2>
    a784:	|  |  |     |      addq.l #8,sp
    a786:	|  |  |     |      tst.l d0
    a788:	|  |  |     |  ,-- bne.s a7cc <drawPeople+0x272>
    a78a:	|  |  |     |  |   movea.l 24(sp),a0
    a78e:	|  |  |     |  |   move.l 4(a0),d0
    a792:	|  |  |     |  |   movea.l 24(sp),a0
    a796:	|  |  |     |  |   move.l 12(a0),d1
    a79a:	|  |  |     |  |   move.l d1,-(sp)
    a79c:	|  |  |     |  |   move.l d0,-(sp)
    a79e:	|  |  |     |  |   jsr 17b96 <__eqsf2>
    a7a4:	|  |  |     |  |   addq.l #8,sp
    a7a6:	|  |  |     |  |   tst.l d0
    a7a8:	|  |  |     |  +-- bne.s a7cc <drawPeople+0x272>
    a7aa:	|  |  |     |  |   movea.l 20(sp),a0
    a7ae:	|  |  |     |  |   move.l 8(a0),d0
    a7b2:	|  |  |     |  |   moveq #1,d1
    a7b4:	|  |  |     |  |   cmp.l d0,d1
    a7b6:	|  |  |     |  +-- bne.s a7cc <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a7b8:	|  |  |     |  |   movea.l 24(sp),a0
    a7bc:	|  |  |     |  |   move.l 16(a0),d0
    a7c0:	|  |  |     |  |   addq.l #1,d0
    a7c2:	|  |  |     |  |   movea.l 24(sp),a0
    a7c6:	|  |  |     |  |   move.l d0,16(a0)
    a7ca:	|  |  |     +--|-- bra.s a7d4 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a7cc:	|  |  |     |  '-> movea.l 24(sp),a0
    a7d0:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a7d4:	|  |  |     '----> movea.l 24(sp),a0
    a7d8:	|  |  |            move.l (a0),d0
    a7da:	|  |  |            movea.l 24(sp),a0
    a7de:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a7e2:	|  |  |            movea.l 24(sp),a0
    a7e6:	|  |  |            move.l 4(a0),d0
    a7ea:	|  |  |            movea.l 24(sp),a0
    a7ee:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a7f2:	|  |  |            movea.l 20(sp),a0
    a7f6:	|  |  |            movea.l 4(a0),a1
    a7fa:	|  |  |            movea.l 24(sp),a0
    a7fe:	|  |  |            move.l 84(a0),d0
    a802:	|  |  |            move.l d0,d1
    a804:	|  |  |            move.l d1,d0
    a806:	|  |  |            add.l d0,d0
    a808:	|  |  |            add.l d1,d0
    a80a:	|  |  |            add.l d0,d0
    a80c:	|  |  |            add.l d0,d0
    a80e:	|  |  |            lea (0,a1,d0.l),a0
    a812:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a816:	|  |  |            move.l 8(sp),d0
    a81a:	|  |  |            add.l d0,d0
    a81c:	|  |  |            subx.l d0,d0
    a81e:	|  |  |            neg.l d0
    a820:	|  |  |            move.b d0,d0
    a822:	|  |  |            move.b d0,d0
    a824:	|  |  |            andi.l #255,d0
    a82a:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a82e:	|  |  |            move.l 8(sp),-(sp)
    a832:	|  |  |            jsr 972e <TF_abs>
    a838:	|  |  |            addq.l #4,sp
    a83a:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a83e:	|  |  |            movea.l 20(sp),a0
    a842:	|  |  |            movea.l (a0),a0
    a844:	|  |  |            move.l 8(a0),d0
    a848:	|  |  |            cmp.l 12(sp),d0
    a84c:	|  |  |        ,-- bgt.s a85c <drawPeople+0x302>
				fNum = 0;
    a84e:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a852:	|  |  |        |   moveq #2,d0
    a854:	|  |  |        |   sub.l 16(sp),d0
    a858:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a85c:	|  |  |        '-> moveq #2,d1
    a85e:	|  |  |            cmp.l 16(sp),d1
    a862:	|  |  +----------- beq.s a8de <drawPeople+0x384>
				BOOL r = FALSE;
    a864:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a868:	|  |  |            move.l 16(sp),d0
    a86c:	|  |  |            movea.w d0,a0
    a86e:	|  |  |            movea.l 20(sp),a1
    a872:	|  |  |            movea.l (a1),a1
    a874:	|  |  |            movea.l 16(a1),a1
    a878:	|  |  |            move.l 12(sp),d1
    a87c:	|  |  |            move.l d1,d0
    a87e:	|  |  |            lsl.l #3,d0
    a880:	|  |  |            sub.l d1,d0
    a882:	|  |  |            add.l d0,d0
    a884:	|  |  |            add.l d0,d0
    a886:	|  |  |            add.l a1,d0
    a888:	|  |  |            move.l a0,-(sp)
    a88a:	|  |  |            move.l 28(sp),-(sp)
    a88e:	|  |  |            move.l d0,-(sp)
    a890:	|  |  |            jsr 9450 <scaleSprite>
    a896:	|  |  |            lea 12(sp),sp
    a89a:	|  |  |            move.w d0,6(sp)
				if (r) {
    a89e:	|  |  +----------- beq.s a8de <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a8a0:	|  |  |            movea.l 24(sp),a0
    a8a4:	|  |  |            movea.l 114(a0),a0
    a8a8:	|  |  |            movea.l (a0),a0
    a8aa:	|  |  |            move.b (a0),d0
    a8ac:	|  |  +----------- beq.s a8de <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a8ae:	|  |  |            move.l 1d146 <personRegion+0x1c>,d1
    a8b4:	|  |  |            movea.l 24(sp),a0
    a8b8:	|  |  |            move.l 114(a0),d0
    a8bc:	|  |  |            cmp.l d1,d0
    a8be:	|  |  |        ,-- beq.s a8c6 <drawPeople+0x36c>
    a8c0:	|  |  |        |   clr.l 1d08e <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a8c6:	|  |  |        '-> movea.l 24(sp),a0
    a8ca:	|  |  |            move.l 114(a0),d0
    a8ce:	|  |  |            move.l d0,1d146 <personRegion+0x1c>
						overRegion = & personRegion;
    a8d4:	|  |  |            move.l #119082,1d1d6 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a8de:	|  |  '----------> movea.l 24(sp),a0
    a8e2:	|  |               move.l 88(a0),d0
    a8e6:	|  |               subq.l #1,d0
    a8e8:	|  |               movea.l 24(sp),a0
    a8ec:	|  |               move.l d0,88(a0)
    a8f0:	|  |               movea.l 24(sp),a0
    a8f4:	|  |               move.l 88(a0),d0
    a8f8:	|  |        ,----- bne.w ab20 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a8fc:	|  |        |      movea.l 24(sp),a0
    a900:	|  |        |      move.l 84(a0),d0
    a904:	|  |        |      addq.l #1,d0
    a906:	|  |        |      movea.l 24(sp),a0
    a90a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a90e:	|  |        |      movea.l 24(sp),a0
    a912:	|  |        |      move.l 84(a0),d0
    a916:	|  |        |      movea.l 24(sp),a0
    a91a:	|  |        |      movea.l 72(a0),a0
    a91e:	|  |        |      move.l 8(a0),d1
    a922:	|  |        |      move.l d1,-(sp)
    a924:	|  |        |      move.l d0,-(sp)
    a926:	|  |        |      jsr 182b0 <__modsi3>
    a92c:	|  |        |      addq.l #8,sp
    a92e:	|  |        |      movea.l 24(sp),a0
    a932:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a936:	|  |        |      movea.l 24(sp),a0
    a93a:	|  |        |      movea.l 72(a0),a0
    a93e:	|  |        |      movea.l 4(a0),a1
    a942:	|  |        |      movea.l 24(sp),a0
    a946:	|  |        |      move.l 84(a0),d0
    a94a:	|  |        |      move.l d0,d1
    a94c:	|  |        |      move.l d1,d0
    a94e:	|  |        |      add.l d0,d0
    a950:	|  |        |      add.l d1,d0
    a952:	|  |        |      add.l d0,d0
    a954:	|  |        |      add.l d0,d0
    a956:	|  |        |      lea (0,a1,d0.l),a0
    a95a:	|  |        |      move.l 4(a0),d0
    a95e:	|  |        |      movea.l 24(sp),a0
    a962:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a966:	|  |        |      movea.l 24(sp),a0
    a96a:	|  |        |      move.w 104(a0),d0
    a96e:	|  |        +----- beq.w ab20 <drawPeople+0x5c6>
    a972:	|  |        |      tst.l 20(sp)
    a976:	|  |        +----- beq.w ab20 <drawPeople+0x5c6>
    a97a:	|  |        |      movea.l 20(sp),a0
    a97e:	|  |        |      move.l 4(a0),d0
    a982:	|  |        +----- beq.w ab20 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a986:	|  |        |      movea.l 20(sp),a0
    a98a:	|  |        |      movea.l 4(a0),a1
    a98e:	|  |        |      movea.l 24(sp),a0
    a992:	|  |        |      move.l 84(a0),d0
    a996:	|  |        |      move.l d0,d1
    a998:	|  |        |      move.l d1,d0
    a99a:	|  |        |      add.l d0,d0
    a99c:	|  |        |      add.l d1,d0
    a99e:	|  |        |      add.l d0,d0
    a9a0:	|  |        |      add.l d0,d0
    a9a2:	|  |        |      lea (0,a1,d0.l),a0
    a9a6:	|  |        |      move.l 8(a0),d0
    a9aa:	|  |        |  ,-- ble.w aa4c <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a9ae:	|  |        |  |   movea.l 20(sp),a0
    a9b2:	|  |        |  |   movea.l 4(a0),a1
    a9b6:	|  |        |  |   movea.l 24(sp),a0
    a9ba:	|  |        |  |   move.l 84(a0),d0
    a9be:	|  |        |  |   move.l d0,d1
    a9c0:	|  |        |  |   move.l d1,d0
    a9c2:	|  |        |  |   add.l d0,d0
    a9c4:	|  |        |  |   add.l d1,d0
    a9c6:	|  |        |  |   add.l d0,d0
    a9c8:	|  |        |  |   add.l d0,d0
    a9ca:	|  |        |  |   lea (0,a1,d0.l),a0
    a9ce:	|  |        |  |   move.l 8(a0),d0
    a9d2:	|  |        |  |   clr.l -(sp)
    a9d4:	|  |        |  |   move.l d0,-(sp)
    a9d6:	|  |        |  |   jsr d76c <startSound>
    a9dc:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a9de:	|  |        |  |   movea.l 24(sp),a0
    a9e2:	|  |        |  |   move.l 84(a0),d0
    a9e6:	|  |        |  |   addq.l #1,d0
    a9e8:	|  |        |  |   movea.l 24(sp),a0
    a9ec:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a9f0:	|  |        |  |   movea.l 24(sp),a0
    a9f4:	|  |        |  |   move.l 84(a0),d0
    a9f8:	|  |        |  |   movea.l 24(sp),a0
    a9fc:	|  |        |  |   movea.l 72(a0),a0
    aa00:	|  |        |  |   move.l 8(a0),d1
    aa04:	|  |        |  |   move.l d1,-(sp)
    aa06:	|  |        |  |   move.l d0,-(sp)
    aa08:	|  |        |  |   jsr 182b0 <__modsi3>
    aa0e:	|  |        |  |   addq.l #8,sp
    aa10:	|  |        |  |   movea.l 24(sp),a0
    aa14:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aa18:	|  |        |  |   movea.l 24(sp),a0
    aa1c:	|  |        |  |   movea.l 72(a0),a0
    aa20:	|  |        |  |   movea.l 4(a0),a1
    aa24:	|  |        |  |   movea.l 24(sp),a0
    aa28:	|  |        |  |   move.l 84(a0),d0
    aa2c:	|  |        |  |   move.l d0,d1
    aa2e:	|  |        |  |   move.l d1,d0
    aa30:	|  |        |  |   add.l d0,d0
    aa32:	|  |        |  |   add.l d1,d0
    aa34:	|  |        |  |   add.l d0,d0
    aa36:	|  |        |  |   add.l d0,d0
    aa38:	|  |        |  |   lea (0,a1,d0.l),a0
    aa3c:	|  |        |  |   move.l 4(a0),d0
    aa40:	|  |        |  |   movea.l 24(sp),a0
    aa44:	|  |        |  |   move.l d0,88(a0)
    aa48:	|  |        +--|-- bra.w ab20 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    aa4c:	|  |        |  '-> movea.l 20(sp),a0
    aa50:	|  |        |      movea.l 4(a0),a1
    aa54:	|  |        |      movea.l 24(sp),a0
    aa58:	|  |        |      move.l 84(a0),d0
    aa5c:	|  |        |      move.l d0,d1
    aa5e:	|  |        |      move.l d1,d0
    aa60:	|  |        |      add.l d0,d0
    aa62:	|  |        |      add.l d1,d0
    aa64:	|  |        |      add.l d0,d0
    aa66:	|  |        |      add.l d0,d0
    aa68:	|  |        |      lea (0,a1,d0.l),a0
    aa6c:	|  |        |      move.l 8(a0),d0
    aa70:	|  |        +----- beq.w ab20 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    aa74:	|  |        |      movea.l 1d096 <noStack>,a1
    aa7a:	|  |        |      movea.l 20(sp),a0
    aa7e:	|  |        |      move.l 4(a0),d2
    aa82:	|  |        |      movea.l 24(sp),a0
    aa86:	|  |        |      move.l 84(a0),d0
    aa8a:	|  |        |      move.l d0,d1
    aa8c:	|  |        |      move.l d1,d0
    aa8e:	|  |        |      add.l d0,d0
    aa90:	|  |        |      add.l d1,d0
    aa92:	|  |        |      add.l d0,d0
    aa94:	|  |        |      add.l d0,d0
    aa96:	|  |        |      movea.l d2,a0
    aa98:	|  |        |      adda.l d0,a0
    aa9a:	|  |        |      move.l 8(a0),d0
    aa9e:	|  |        |      neg.l d0
    aaa0:	|  |        |      pea 1 <_start+0x1>
    aaa4:	|  |        |      move.l a1,-(sp)
    aaa6:	|  |        |      clr.l -(sp)
    aaa8:	|  |        |      clr.l -(sp)
    aaaa:	|  |        |      move.l d0,-(sp)
    aaac:	|  |        |      jsr 7a06 <startNewFunctionNum>
    aab2:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    aab6:	|  |        |      movea.l 24(sp),a0
    aaba:	|  |        |      move.l 84(a0),d0
    aabe:	|  |        |      addq.l #1,d0
    aac0:	|  |        |      movea.l 24(sp),a0
    aac4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aac8:	|  |        |      movea.l 24(sp),a0
    aacc:	|  |        |      move.l 84(a0),d0
    aad0:	|  |        |      movea.l 24(sp),a0
    aad4:	|  |        |      movea.l 72(a0),a0
    aad8:	|  |        |      move.l 8(a0),d1
    aadc:	|  |        |      move.l d1,-(sp)
    aade:	|  |        |      move.l d0,-(sp)
    aae0:	|  |        |      jsr 182b0 <__modsi3>
    aae6:	|  |        |      addq.l #8,sp
    aae8:	|  |        |      movea.l 24(sp),a0
    aaec:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aaf0:	|  |        |      movea.l 24(sp),a0
    aaf4:	|  |        |      movea.l 72(a0),a0
    aaf8:	|  |        |      movea.l 4(a0),a1
    aafc:	|  |        |      movea.l 24(sp),a0
    ab00:	|  |        |      move.l 84(a0),d0
    ab04:	|  |        |      move.l d0,d1
    ab06:	|  |        |      move.l d1,d0
    ab08:	|  |        |      add.l d0,d0
    ab0a:	|  |        |      add.l d1,d0
    ab0c:	|  |        |      add.l d0,d0
    ab0e:	|  |        |      add.l d0,d0
    ab10:	|  |        |      lea (0,a1,d0.l),a0
    ab14:	|  |        |      move.l 4(a0),d0
    ab18:	|  |        |      movea.l 24(sp),a0
    ab1c:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    ab20:	|  |        '----> movea.l 24(sp),a0
    ab24:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    ab2a:	|  '-------------> tst.l 24(sp)
    ab2e:	'----------------- bne.w a57c <drawPeople+0x22>
	}
}
    ab32:	                   nop
    ab34:	                   nop
    ab36:	                   move.l (sp)+,d2
    ab38:	                   lea 24(sp),sp
    ab3c:	                   rts

0000ab3e <findPerson>:


struct onScreenPerson * findPerson (int v) {
    ab3e:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    ab40:	          pea 19846 <PutChar+0x152c>
    ab46:	          jsr 17878 <KPrintF>
    ab4c:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    ab4e:	          move.l 1d126 <allPeople>,(sp)
	while (thisPerson) {
    ab54:	      ,-- bra.s ab6c <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    ab56:	,-----|-> movea.l (sp),a0
    ab58:	|     |   movea.l 114(a0),a0
    ab5c:	|     |   move.l 4(a0),d0
    ab60:	|     |   cmp.l 8(sp),d0
    ab64:	|  ,--|-- beq.s ab72 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    ab66:	|  |  |   movea.l (sp),a0
    ab68:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    ab6c:	|  |  '-> tst.l (sp)
    ab6e:	'--|----- bne.s ab56 <findPerson+0x18>
    ab70:	   |  ,-- bra.s ab74 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    ab72:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    ab74:	      '-> pea 1985a <PutChar+0x1540>
    ab7a:	          jsr 17878 <KPrintF>
    ab80:	          addq.l #4,sp
	return thisPerson;
    ab82:	          move.l (sp),d0
}
    ab84:	          addq.l #4,sp
    ab86:	          rts

0000ab88 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    ab88:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab8a:	       move.l 12(sp),-(sp)
    ab8e:	       jsr ab3e <findPerson>
    ab94:	       addq.l #4,sp
    ab96:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    ab98:	   ,-- bne.s ab9e <floatCharacter+0x16>
    ab9a:	   |   clr.w d0
    ab9c:	,--|-- bra.s aba8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    ab9e:	|  '-> movea.l (sp),a0
    aba0:	|      move.l 8(sp),24(a0)
	return TRUE;
    aba6:	|      moveq #1,d0
}
    aba8:	'----> addq.l #4,sp
    abaa:	       rts

0000abac <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    abac:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    abae:	          tst.l 8(sp)
    abb2:	      ,-- bne.s abc0 <forceWalkingPerson+0x14>
    abb4:	      |   tst.l 12(sp)
    abb8:	      +-- bne.s abc0 <forceWalkingPerson+0x14>
    abba:	      |   clr.w d0
    abbc:	,-----|-- bra.w ac52 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    abc0:	|     '-> move.l 16(sp),-(sp)
    abc4:	|         jsr ab3e <findPerson>
    abca:	|         addq.l #4,sp
    abcc:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    abce:	|     ,-- bne.s abd4 <forceWalkingPerson+0x28>
    abd0:	|     |   clr.w d0
    abd2:	+-----|-- bra.s ac52 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    abd4:	|     '-> movea.l (sp),a0
    abd6:	|         move.l 68(a0),d0
    abda:	|     ,-- beq.s abec <forceWalkingPerson+0x40>
    abdc:	|     |   movea.l (sp),a0
    abde:	|     |   move.l 68(a0),d0
    abe2:	|     |   move.l d0,-(sp)
    abe4:	|     |   jsr 5538 <abortFunction>
    abea:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    abec:	|     '-> movea.l (sp),a0
    abee:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    abf4:	|         movea.l (sp),a0
    abf6:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    abfa:	|         movea.l (sp),a0
    abfc:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    ac02:	|         movea.l (sp),a0
    ac04:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    ac0a:	|         movea.l (sp),a0
    ac0c:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    ac12:	|         movea.l (sp),a0
    ac14:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    ac18:	|         movea.l (sp),a0
    ac1a:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    ac1e:	|         move.l (sp),-(sp)
    ac20:	|         jsr 9ea0 <doBorderStuff>
    ac26:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    ac28:	|         pea 1 <_start+0x1>
    ac2c:	|         move.l 4(sp),-(sp)
    ac30:	|         jsr c4e6 <walkMe>
    ac36:	|         addq.l #8,sp
    ac38:	|         tst.w d0
    ac3a:	|     ,-- bne.s ac44 <forceWalkingPerson+0x98>
    ac3c:	|     |   movea.l (sp),a0
    ac3e:	|     |   move.w 66(a0),d0
    ac42:	|  ,--|-- beq.s ac50 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    ac44:	|  |  '-> movea.l (sp),a0
    ac46:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    ac4c:	|  |      moveq #1,d0
    ac4e:	+--|----- bra.s ac52 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    ac50:	|  '----> clr.w d0
    }
}
    ac52:	'-------> addq.l #4,sp
    ac54:	          rts

0000ac56 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    ac56:	                lea -56(sp),sp
    ac5a:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    ac5c:	                pea 1986f <PutChar+0x1555>
    ac62:	                jsr 17878 <KPrintF>
    ac68:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    ac6a:	                move.l #320,56(sp)
    ac72:	                move.l #200,52(sp)
    ac7a:	                moveq #-1,d0
    ac7c:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    ac80:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ac88:	                clr.l 44(sp)
    ac8c:	   ,----------- bra.w ae64 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    ac90:	,--|----------> movea.l 1d1de <currentFloor>,a0
    ac96:	|  |            move.l 12(a0),d1
    ac9a:	|  |            move.l 44(sp),d0
    ac9e:	|  |            lsl.l #3,d0
    aca0:	|  |            movea.l d1,a0
    aca2:	|  |            adda.l d0,a0
    aca4:	|  |            move.l (a0),d0
    aca6:	|  |            move.l d0,d1
    aca8:	|  |            subq.l #1,d1
    acaa:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    acae:	|  |            clr.l 40(sp)
    acb2:	|  |     ,----- bra.w ae42 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    acb6:	|  |  ,--|----> movea.l 1d1de <currentFloor>,a0
    acbc:	|  |  |  |      move.l 4(a0),d1
    acc0:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    acc6:	|  |  |  |      movea.l 12(a0),a0
    acca:	|  |  |  |      move.l 44(sp),d0
    acce:	|  |  |  |      lsl.l #3,d0
    acd0:	|  |  |  |      adda.l d0,a0
    acd2:	|  |  |  |      movea.l 4(a0),a0
    acd6:	|  |  |  |      move.l 40(sp),d0
    acda:	|  |  |  |      add.l d0,d0
    acdc:	|  |  |  |      add.l d0,d0
    acde:	|  |  |  |      adda.l d0,a0
    ace0:	|  |  |  |      move.l (a0),d0
    ace2:	|  |  |  |      lsl.l #3,d0
    ace4:	|  |  |  |      movea.l d1,a0
    ace6:	|  |  |  |      adda.l d0,a0
    ace8:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    acec:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    acf2:	|  |  |  |      move.l 4(a0),d1
    acf6:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    acfc:	|  |  |  |      movea.l 12(a0),a0
    ad00:	|  |  |  |      move.l 44(sp),d0
    ad04:	|  |  |  |      lsl.l #3,d0
    ad06:	|  |  |  |      adda.l d0,a0
    ad08:	|  |  |  |      movea.l 4(a0),a0
    ad0c:	|  |  |  |      move.l 40(sp),d0
    ad10:	|  |  |  |      add.l d0,d0
    ad12:	|  |  |  |      add.l d0,d0
    ad14:	|  |  |  |      adda.l d0,a0
    ad16:	|  |  |  |      move.l (a0),d0
    ad18:	|  |  |  |      lsl.l #3,d0
    ad1a:	|  |  |  |      movea.l d1,a0
    ad1c:	|  |  |  |      adda.l d0,a0
    ad1e:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    ad24:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    ad2a:	|  |  |  |      move.l 4(a0),d1
    ad2e:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    ad34:	|  |  |  |      movea.l 12(a0),a0
    ad38:	|  |  |  |      move.l 44(sp),d0
    ad3c:	|  |  |  |      lsl.l #3,d0
    ad3e:	|  |  |  |      adda.l d0,a0
    ad40:	|  |  |  |      movea.l 4(a0),a0
    ad44:	|  |  |  |      move.l 36(sp),d0
    ad48:	|  |  |  |      add.l d0,d0
    ad4a:	|  |  |  |      add.l d0,d0
    ad4c:	|  |  |  |      adda.l d0,a0
    ad4e:	|  |  |  |      move.l (a0),d0
    ad50:	|  |  |  |      lsl.l #3,d0
    ad52:	|  |  |  |      movea.l d1,a0
    ad54:	|  |  |  |      adda.l d0,a0
    ad56:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    ad5a:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    ad60:	|  |  |  |      move.l 4(a0),d1
    ad64:	|  |  |  |      movea.l 1d1de <currentFloor>,a0
    ad6a:	|  |  |  |      movea.l 12(a0),a0
    ad6e:	|  |  |  |      move.l 44(sp),d0
    ad72:	|  |  |  |      lsl.l #3,d0
    ad74:	|  |  |  |      adda.l d0,a0
    ad76:	|  |  |  |      movea.l 4(a0),a0
    ad7a:	|  |  |  |      move.l 36(sp),d0
    ad7e:	|  |  |  |      add.l d0,d0
    ad80:	|  |  |  |      add.l d0,d0
    ad82:	|  |  |  |      adda.l d0,a0
    ad84:	|  |  |  |      move.l (a0),d0
    ad86:	|  |  |  |      lsl.l #3,d0
    ad88:	|  |  |  |      movea.l d1,a0
    ad8a:	|  |  |  |      adda.l d0,a0
    ad8c:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    ad92:	|  |  |  |      movea.l 68(sp),a0
    ad96:	|  |  |  |      move.l (a0),d1
    ad98:	|  |  |  |      movea.l 64(sp),a0
    ad9c:	|  |  |  |      move.l (a0),d0
    ad9e:	|  |  |  |      move.l d1,-(sp)
    ada0:	|  |  |  |      move.l d0,-(sp)
    ada2:	|  |  |  |      move.l 24(sp),-(sp)
    ada6:	|  |  |  |      move.l 32(sp),-(sp)
    adaa:	|  |  |  |      move.l 40(sp),-(sp)
    adae:	|  |  |  |      move.l 48(sp),-(sp)
    adb2:	|  |  |  |      lea 28(sp),a0
    adb6:	|  |  |  |      move.l a0,-(sp)
    adb8:	|  |  |  |      lea 36(sp),a0
    adbc:	|  |  |  |      move.l a0,-(sp)
    adbe:	|  |  |  |      jsr 16676 <closestPointOnLine>
    adc4:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    adc8:	|  |  |  |      movea.l 64(sp),a0
    adcc:	|  |  |  |      move.l (a0),d0
    adce:	|  |  |  |      move.l 8(sp),d1
    add2:	|  |  |  |      move.l d0,d2
    add4:	|  |  |  |      sub.l d1,d2
    add6:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    adda:	|  |  |  |      movea.l 68(sp),a0
    adde:	|  |  |  |      move.l (a0),d0
    ade0:	|  |  |  |      move.l 4(sp),d1
    ade4:	|  |  |  |      move.l d0,d2
    ade6:	|  |  |  |      sub.l d1,d2
    ade8:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    adec:	|  |  |  |      move.l 28(sp),-(sp)
    adf0:	|  |  |  |      move.l 32(sp),-(sp)
    adf4:	|  |  |  |      jsr 18204 <__mulsi3>
    adfa:	|  |  |  |      addq.l #8,sp
    adfc:	|  |  |  |      move.l d0,d2
    adfe:	|  |  |  |      move.l 24(sp),-(sp)
    ae02:	|  |  |  |      move.l 28(sp),-(sp)
    ae06:	|  |  |  |      jsr 18204 <__mulsi3>
    ae0c:	|  |  |  |      addq.l #8,sp
    ae0e:	|  |  |  |      move.l d2,d1
    ae10:	|  |  |  |      add.l d0,d1
    ae12:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    ae16:	|  |  |  |      move.l 12(sp),d2
    ae1a:	|  |  |  |      cmp.l 32(sp),d2
    ae1e:	|  |  |  |  ,-- bge.s ae38 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    ae20:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    ae26:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    ae2c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    ae32:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    ae38:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    ae3e:	|  |  |  |      addq.l #1,40(sp)
    ae42:	|  |  |  '----> movea.l 1d1de <currentFloor>,a0
    ae48:	|  |  |         move.l 12(a0),d1
    ae4c:	|  |  |         move.l 44(sp),d0
    ae50:	|  |  |         lsl.l #3,d0
    ae52:	|  |  |         movea.l d1,a0
    ae54:	|  |  |         adda.l d0,a0
    ae56:	|  |  |         move.l (a0),d0
    ae58:	|  |  |         cmp.l 40(sp),d0
    ae5c:	|  |  '-------- bgt.w acb6 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ae60:	|  |            addq.l #1,44(sp)
    ae64:	|  '----------> movea.l 1d1de <currentFloor>,a0
    ae6a:	|               move.l 8(a0),d0
    ae6e:	|               cmp.l 44(sp),d0
    ae72:	'-------------- bgt.w ac90 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    ae76:	                moveq #-1,d0
    ae78:	                cmp.l 48(sp),d0
    ae7c:	            ,-- bne.s ae82 <handleClosestPoint+0x22c>
    ae7e:	            |   clr.w d0
    ae80:	         ,--|-- bra.s ae9c <handleClosestPoint+0x246>
	*setX = gotX;
    ae82:	         |  '-> movea.l 64(sp),a0
    ae86:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    ae8a:	         |      movea.l 68(sp),a0
    ae8e:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    ae92:	         |      movea.l 72(sp),a0
    ae96:	         |      move.l 48(sp),(a0)

	return TRUE;
    ae9a:	         |      moveq #1,d0
}
    ae9c:	         '----> move.l (sp)+,d2
    ae9e:	                lea 56(sp),sp
    aea2:	                rts

0000aea4 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    aea4:	clr.l 1d13a <personRegion+0x10>
	personRegion.sY = 0;
    aeaa:	clr.l 1d13e <personRegion+0x14>
	personRegion.di = -1;
    aeb0:	moveq #-1,d0
    aeb2:	move.l d0,1d142 <personRegion+0x18>
	allScreenRegions = NULL;
    aeb8:	clr.l 1d1d2 <allScreenRegions>

	return TRUE;
    aebe:	moveq #1,d0
}
    aec0:	rts

0000aec2 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    aec2:	          subq.l #4,sp
    aec4:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    aec6:	          tst.l 12(sp)
    aeca:	      ,-- bne.s aed2 <jumpPerson+0x10>
    aecc:	      |   tst.l 16(sp)
    aed0:	,-----|-- beq.s af46 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aed2:	|     '-> move.l 20(sp),-(sp)
    aed6:	|         jsr ab3e <findPerson>
    aedc:	|         addq.l #4,sp
    aede:	|         move.l d0,4(sp)
    if (!moveMe) return;
    aee2:	|  ,----- beq.s af4a <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aee4:	|  |      movea.l 4(sp),a0
    aee8:	|  |      move.l 68(a0),d0
    aeec:	|  |  ,-- beq.s af00 <jumpPerson+0x3e>
    aeee:	|  |  |   movea.l 4(sp),a0
    aef2:	|  |  |   move.l 68(a0),d0
    aef6:	|  |  |   move.l d0,-(sp)
    aef8:	|  |  |   jsr 5538 <abortFunction>
    aefe:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    af00:	|  |  '-> movea.l 4(sp),a0
    af04:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    af08:	|  |      movea.l 4(sp),a0
    af0c:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    af10:	|  |      movea.l 4(sp),a0
    af14:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    af18:	|  |      move.l 16(sp),-(sp)
    af1c:	|  |      jsr 17caa <__floatsisf>
    af22:	|  |      addq.l #4,sp
    af24:	|  |      move.l d0,d2
    af26:	|  |      move.l 12(sp),-(sp)
    af2a:	|  |      jsr 17caa <__floatsisf>
    af30:	|  |      addq.l #4,sp
    af32:	|  |      move.l d2,-(sp)
    af34:	|  |      move.l d0,-(sp)
    af36:	|  |      move.l 12(sp),-(sp)
    af3a:	|  |      jsr b2e8 <moveAndScale>
    af40:	|  |      lea 12(sp),sp
    af44:	|  |  ,-- bra.s af4c <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    af46:	'--|--|-> nop
    af48:	   |  +-- bra.s af4c <jumpPerson+0x8a>
    if (!moveMe) return;
    af4a:	   '--|-> nop
}
    af4c:	      '-> move.l (sp)+,d2
    af4e:	          addq.l #4,sp
    af50:	          rts

0000af52 <killAllPeople>:


void killAllPeople () {
    af52:	          subq.l #8,sp
    af54:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    af56:	   ,----- bra.s afc2 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    af58:	,--|----> movea.l 1d126 <allPeople>,a0
    af5e:	|  |      move.l 68(a0),d0
    af62:	|  |  ,-- beq.s af78 <killAllPeople+0x26>
    af64:	|  |  |   movea.l 1d126 <allPeople>,a0
    af6a:	|  |  |   move.l 68(a0),d0
    af6e:	|  |  |   move.l d0,-(sp)
    af70:	|  |  |   jsr 5538 <abortFunction>
    af76:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    af78:	|  |  '-> movea.l 1d126 <allPeople>,a0
    af7e:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    af82:	|  |      move.l 1d126 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    af8a:	|  |      movea.l 1d126 <allPeople>,a0
    af90:	|  |      move.l 36(a0),d0
    af94:	|  |      move.l d0,1d126 <allPeople>
		removeObjectType (killPeople -> thisType);
    af9a:	|  |      movea.l 8(sp),a0
    af9e:	|  |      move.l 114(a0),d0
    afa2:	|  |      move.l d0,-(sp)
    afa4:	|  |      jsr de54 <removeObjectType>
    afaa:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    afac:	|  |      move.l 8(sp),4(sp)
    afb2:	|  |      move.l 1d0c6 <SysBase>,d0
    afb8:	|  |      movea.l d0,a6
    afba:	|  |      movea.l 4(sp),a1
    afbe:	|  |      jsr -690(a6)
	while (allPeople) {
    afc2:	|  '----> move.l 1d126 <allPeople>,d0
    afc8:	'-------- bne.s af58 <killAllPeople+0x6>
	}
}
    afca:	          nop
    afcc:	          nop
    afce:	          movea.l (sp)+,a6
    afd0:	          addq.l #8,sp
    afd2:	          rts

0000afd4 <killMostPeople>:

void killMostPeople() {
    afd4:	          lea -12(sp),sp
    afd8:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    afda:	          move.l #119078,12(sp)

    while (*lookyHere) {
    afe2:	   ,----- bra.w b068 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    afe6:	,--|----> movea.l 12(sp),a0
    afea:	|  |      movea.l (a0),a0
    afec:	|  |      move.l 118(a0),d0
    aff0:	|  |      moveq #32,d1
    aff2:	|  |      and.l d1,d0
    aff4:	|  |  ,-- beq.s b006 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aff6:	|  |  |   movea.l 12(sp),a0
    affa:	|  |  |   move.l (a0),d0
    affc:	|  |  |   moveq #36,d1
    affe:	|  |  |   add.l d0,d1
    b000:	|  |  |   move.l d1,12(sp)
    b004:	|  +--|-- bra.s b068 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b006:	|  |  '-> movea.l 12(sp),a0
    b00a:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b00e:	|  |      movea.l 8(sp),a0
    b012:	|  |      move.l 36(a0),d0
    b016:	|  |      movea.l 12(sp),a0
    b01a:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b01c:	|  |      movea.l 8(sp),a0
    b020:	|  |      move.l 68(a0),d0
    b024:	|  |  ,-- beq.s b038 <killMostPeople+0x64>
    b026:	|  |  |   movea.l 8(sp),a0
    b02a:	|  |  |   move.l 68(a0),d0
    b02e:	|  |  |   move.l d0,-(sp)
    b030:	|  |  |   jsr 5538 <abortFunction>
    b036:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b038:	|  |  '-> movea.l 8(sp),a0
    b03c:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b040:	|  |      movea.l 8(sp),a0
    b044:	|  |      move.l 114(a0),d0
    b048:	|  |      move.l d0,-(sp)
    b04a:	|  |      jsr de54 <removeObjectType>
    b050:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b052:	|  |      move.l 8(sp),4(sp)
    b058:	|  |      move.l 1d0c6 <SysBase>,d0
    b05e:	|  |      movea.l d0,a6
    b060:	|  |      movea.l 4(sp),a1
    b064:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b068:	|  '----> movea.l 12(sp),a0
    b06c:	|         move.l (a0),d0
    b06e:	'-------- bne.w afe6 <killMostPeople+0x12>
        }
    }
}
    b072:	          nop
    b074:	          nop
    b076:	          movea.l (sp)+,a6
    b078:	          lea 12(sp),sp
    b07c:	          rts

0000b07e <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b07e:	clr.l -(sp)
    b080:	move.l sp,d0
    b082:	addq.l #8,d0
    b084:	move.l d0,-(sp)
    b086:	jsr 46da <setFrames>
    b08c:	addq.l #8,sp
}
    b08e:	nop
    b090:	rts

0000b092 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b092:	          lea -12(sp),sp
    b096:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b098:	          pea 198f3 <PutChar+0x15d9>
    b09e:	          jsr 17878 <KPrintF>
    b0a4:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b0a6:	          tst.l 20(sp)
    b0aa:	      ,-- bne.s b0b8 <makeWalkingPerson+0x26>
    b0ac:	      |   tst.l 24(sp)
    b0b0:	      +-- bne.s b0b8 <makeWalkingPerson+0x26>
    b0b2:	      |   clr.w d0
    b0b4:	,-----|-- bra.w b27a <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b0b8:	|     '-> movea.l 1d1de <currentFloor>,a0
    b0be:	|         move.l 8(a0),d0
    b0c2:	|     ,-- bne.s b0ca <makeWalkingPerson+0x38>
    b0c4:	|     |   clr.w d0
    b0c6:	+-----|-- bra.w b27a <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b0ca:	|     '-> move.l 28(sp),d0
    b0ce:	|         move.l d0,-(sp)
    b0d0:	|         jsr ab3e <findPerson>
    b0d6:	|         addq.l #4,sp
    b0d8:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b0dc:	|     ,-- bne.s b0f8 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b0de:	|     |   move.l 28(sp),d0
    b0e2:	|     |   move.l d0,-(sp)
    b0e4:	|     |   pea 1990e <PutChar+0x15f4>
    b0ea:	|     |   jsr 17878 <KPrintF>
    b0f0:	|     |   addq.l #8,sp
		return FALSE;
    b0f2:	|     |   clr.w d0
    b0f4:	+-----|-- bra.w b27a <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b0f8:	|     '-> movea.l 12(sp),a0
    b0fc:	|         move.l 68(a0),d0
    b100:	|     ,-- beq.s b114 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b102:	|     |   movea.l 12(sp),a0
    b106:	|     |   move.l 68(a0),d0
    b10a:	|     |   move.l d0,-(sp)
    b10c:	|     |   jsr 5538 <abortFunction>
    b112:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b114:	|     '-> movea.l 12(sp),a0
    b118:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b11c:	|         movea.l 12(sp),a0
    b120:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b126:	|         movea.l 12(sp),a0
    b12a:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b130:	|         movea.l 12(sp),a0
    b134:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b13a:	|         movea.l 12(sp),a0
    b13e:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b144:	|         move.l 24(sp),-(sp)
    b148:	|         move.l 24(sp),-(sp)
    b14c:	|         jsr 16bbe <inFloor>
    b152:	|         addq.l #8,sp
    b154:	|         movea.l 12(sp),a0
    b158:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b15c:	|         movea.l 12(sp),a0
    b160:	|         move.l 60(a0),d0
    b164:	|         moveq #-1,d1
    b166:	|         cmp.l d0,d1
    b168:	|     ,-- bne.s b198 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b16a:	|     |   movea.w #60,a0
    b16e:	|     |   adda.l 12(sp),a0
    b172:	|     |   moveq #44,d1
    b174:	|     |   add.l 12(sp),d1
    b178:	|     |   moveq #40,d0
    b17a:	|     |   add.l 12(sp),d0
    b17e:	|     |   move.l a0,-(sp)
    b180:	|     |   move.l d1,-(sp)
    b182:	|     |   move.l d0,-(sp)
    b184:	|     |   jsr ac56 <handleClosestPoint>
    b18a:	|     |   lea 12(sp),sp
    b18e:	|     |   tst.w d0
    b190:	|     +-- bne.s b198 <makeWalkingPerson+0x106>
    b192:	|     |   clr.w d0
    b194:	+-----|-- bra.w b27a <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b198:	|     '-> movea.l 12(sp),a0
    b19c:	|         move.l 4(a0),d0
    b1a0:	|         move.l d0,-(sp)
    b1a2:	|         jsr 17c42 <__fixsfsi>
    b1a8:	|         addq.l #4,sp
    b1aa:	|         move.l d0,d2
    b1ac:	|         movea.l 12(sp),a0
    b1b0:	|         move.l (a0),d0
    b1b2:	|         move.l d0,-(sp)
    b1b4:	|         jsr 17c42 <__fixsfsi>
    b1ba:	|         addq.l #4,sp
    b1bc:	|         move.l d2,-(sp)
    b1be:	|         move.l d0,-(sp)
    b1c0:	|         jsr 16bbe <inFloor>
    b1c6:	|         addq.l #8,sp
    b1c8:	|         movea.l 12(sp),a0
    b1cc:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b1d0:	|         movea.l 12(sp),a0
    b1d4:	|         move.l 56(a0),d0
    b1d8:	|         moveq #-1,d1
    b1da:	|         cmp.l d0,d1
    b1dc:	|     ,-- bne.s b22e <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b1de:	|     |   movea.l 12(sp),a0
    b1e2:	|     |   move.l (a0),d0
    b1e4:	|     |   move.l d0,-(sp)
    b1e6:	|     |   jsr 17c42 <__fixsfsi>
    b1ec:	|     |   addq.l #4,sp
    b1ee:	|     |   move.l d0,8(sp)
    b1f2:	|     |   movea.l 12(sp),a0
    b1f6:	|     |   move.l 4(a0),d0
    b1fa:	|     |   move.l d0,-(sp)
    b1fc:	|     |   jsr 17c42 <__fixsfsi>
    b202:	|     |   addq.l #4,sp
    b204:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b208:	|     |   moveq #56,d0
    b20a:	|     |   add.l 12(sp),d0
    b20e:	|     |   move.l d0,-(sp)
    b210:	|     |   lea 8(sp),a0
    b214:	|     |   move.l a0,-(sp)
    b216:	|     |   moveq #16,d0
    b218:	|     |   add.l sp,d0
    b21a:	|     |   move.l d0,-(sp)
    b21c:	|     |   jsr ac56 <handleClosestPoint>
    b222:	|     |   lea 12(sp),sp
    b226:	|     |   tst.w d0
    b228:	|     +-- bne.s b22e <makeWalkingPerson+0x19c>
    b22a:	|     |   clr.w d0
    b22c:	+-----|-- bra.s b27a <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b22e:	|     '-> move.l 12(sp),-(sp)
    b232:	|         jsr 9ea0 <doBorderStuff>
    b238:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b23a:	|         clr.l -(sp)
    b23c:	|         move.l 16(sp),-(sp)
    b240:	|         jsr c4e6 <walkMe>
    b246:	|         addq.l #8,sp
    b248:	|         tst.w d0
    b24a:	|     ,-- bne.s b256 <makeWalkingPerson+0x1c4>
    b24c:	|     |   movea.l 12(sp),a0
    b250:	|     |   move.w 66(a0),d0
    b254:	|  ,--|-- beq.s b278 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b256:	|  |  '-> lea 28(sp),a0
    b25a:	|  |      move.l a0,-(sp)
    b25c:	|  |      pea 19937 <PutChar+0x161d>
    b262:	|  |      jsr 17878 <KPrintF>
    b268:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b26a:	|  |      movea.l 12(sp),a0
    b26e:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b274:	|  |      moveq #1,d0
    b276:	+--|----- bra.s b27a <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b278:	|  '----> clr.w d0
	}
}
    b27a:	'-------> move.l (sp)+,d2
    b27c:	          lea 12(sp),sp
    b280:	          rts

0000b282 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b282:	       lea -16(sp),sp
    b286:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b288:	       moveq #12,d0
    b28a:	       move.l d0,16(sp)
    b28e:	       clr.l 12(sp)
    b292:	       move.l 1d0c6 <SysBase>,d0
    b298:	       movea.l d0,a6
    b29a:	       move.l 16(sp),d0
    b29e:	       move.l 12(sp),d1
    b2a2:	       jsr -684(a6)
    b2a6:	       move.l d0,8(sp)
    b2aa:	       move.l 8(sp),d0
    b2ae:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b2b2:	   ,-- bne.s b2c6 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b2b4:	   |   pea 1996a <PutChar+0x1650>
    b2ba:	   |   jsr 17878 <KPrintF>
    b2c0:	   |   addq.l #4,sp
        return NULL;    
    b2c2:	   |   moveq #0,d0
    b2c4:	,--|-- bra.s b2e0 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b2c6:	|  '-> movea.l 4(sp),a0
    b2ca:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b2cc:	|      movea.l 4(sp),a0
    b2d0:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b2d4:	|      movea.l 4(sp),a0
    b2d8:	|      clr.l 4(a0)
	return newAnim;
    b2dc:	|      move.l 4(sp),d0
}
    b2e0:	'----> movea.l (sp)+,a6
    b2e2:	       lea 16(sp),sp
    b2e6:	       rts

0000b2e8 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b2e8:	    move.l d2,-(sp)
	me->x = x;
    b2ea:	    movea.l 8(sp),a0
    b2ee:	    move.l 12(sp),(a0)
	me->y = y;
    b2f2:	    movea.l 8(sp),a0
    b2f6:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b2fc:	    movea.l 8(sp),a0
    b300:	    clr.l 8(a0)
	me->oldy = 0;
    b304:	    movea.l 8(sp),a0
    b308:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b30c:	    movea.l 8(sp),a0
    b310:	    move.l 118(a0),d0
    b314:	    moveq #2,d1
    b316:	    and.l d1,d0
    b318:	,-- bne.s b370 <moveAndScale+0x88>
    b31a:	|   move.w 1ca4e <scaleDivide>,d0
    b320:	+-- beq.s b370 <moveAndScale+0x88>
    b322:	|   movea.l 8(sp),a0
    b326:	|   move.l 4(a0),d2
    b32a:	|   move.w 1ca4c <scaleHorizon>,d0
    b330:	|   movea.w d0,a0
    b332:	|   move.l a0,-(sp)
    b334:	|   jsr 17caa <__floatsisf>
    b33a:	|   addq.l #4,sp
    b33c:	|   move.l d0,-(sp)
    b33e:	|   move.l d2,-(sp)
    b340:	|   jsr 17f9e <__subsf3>
    b346:	|   addq.l #8,sp
    b348:	|   move.l d0,d2
    b34a:	|   move.w 1ca4e <scaleDivide>,d0
    b350:	|   movea.w d0,a0
    b352:	|   move.l a0,-(sp)
    b354:	|   jsr 17caa <__floatsisf>
    b35a:	|   addq.l #4,sp
    b35c:	|   move.l d0,-(sp)
    b35e:	|   move.l d2,-(sp)
    b360:	|   jsr 17b60 <__divsf3>
    b366:	|   addq.l #8,sp
    b368:	|   movea.l 8(sp),a0
    b36c:	|   move.l d0,32(a0)
}
    b370:	'-> nop
    b372:	    move.l (sp)+,d2
    b374:	    rts

0000b376 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b376:	          lea -16(sp),sp
    b37a:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b37c:	          move.l 24(sp),-(sp)
    b380:	          jsr ab3e <findPerson>
    b386:	          addq.l #4,sp
    b388:	          move.l d0,8(sp)

    if (p) {
    b38c:	,-------- beq.w b46c <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b390:	|         move.l 1d1d6 <overRegion>,d0
    b396:	|         cmpi.l #119082,d0
    b39c:	|     ,-- bne.s b3ba <removeOneCharacter+0x44>
    b39e:	|     |   movea.l 1d1d6 <overRegion>,a0
    b3a4:	|     |   move.l 28(a0),d1
    b3a8:	|     |   movea.l 8(sp),a0
    b3ac:	|     |   move.l 114(a0),d0
    b3b0:	|     |   cmp.l d1,d0
    b3b2:	|     +-- bne.s b3ba <removeOneCharacter+0x44>
            overRegion = NULL;
    b3b4:	|     |   clr.l 1d1d6 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b3ba:	|     '-> movea.l 8(sp),a0
    b3be:	|         move.l 68(a0),d0
    b3c2:	|     ,-- beq.s b3d6 <removeOneCharacter+0x60>
    b3c4:	|     |   movea.l 8(sp),a0
    b3c8:	|     |   move.l 68(a0),d0
    b3cc:	|     |   move.l d0,-(sp)
    b3ce:	|     |   jsr 5538 <abortFunction>
    b3d4:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b3d6:	|     '-> movea.l 8(sp),a0
    b3da:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b3de:	|         clr.l 12(sp)
    b3e2:	|     ,-- bra.s b40a <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b3e4:	|  ,--|-> movea.l 8(sp),a0
    b3e8:	|  |  |   movea.l 80(a0),a0
    b3ec:	|  |  |   move.l (a0),d1
    b3ee:	|  |  |   move.l 12(sp),d0
    b3f2:	|  |  |   add.l d0,d0
    b3f4:	|  |  |   add.l d0,d0
    b3f6:	|  |  |   movea.l d1,a0
    b3f8:	|  |  |   adda.l d0,a0
    b3fa:	|  |  |   move.l (a0),d0
    b3fc:	|  |  |   move.l d0,-(sp)
    b3fe:	|  |  |   jsr 9e1c <deleteAnim>
    b404:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b406:	|  |  |   addq.l #1,12(sp)
    b40a:	|  |  '-> moveq #2,d0
    b40c:	|  |      cmp.l 12(sp),d0
    b410:	|  '----- bge.s b3e4 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b412:	|         move.l #119078,16(sp)
    b41a:	|     ,-- bra.s b42a <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b41c:	|  ,--|-> movea.l 16(sp),a0
    b420:	|  |  |   move.l (a0),d0
    b422:	|  |  |   moveq #36,d1
    b424:	|  |  |   add.l d0,d1
    b426:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b42a:	|  |  '-> movea.l 16(sp),a0
    b42e:	|  |      move.l (a0),d0
    b430:	|  |      cmp.l 8(sp),d0
    b434:	|  '----- bne.s b41c <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b436:	|         movea.l 8(sp),a0
    b43a:	|         move.l 36(a0),d0
    b43e:	|         movea.l 16(sp),a0
    b442:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b444:	|         movea.l 8(sp),a0
    b448:	|         move.l 114(a0),d0
    b44c:	|         move.l d0,-(sp)
    b44e:	|         jsr de54 <removeObjectType>
    b454:	|         addq.l #4,sp
        FreeVec(p);
    b456:	|         move.l 8(sp),4(sp)
    b45c:	|         move.l 1d0c6 <SysBase>,d0
    b462:	|         movea.l d0,a6
    b464:	|         movea.l 4(sp),a1
    b468:	|         jsr -690(a6)
		
    }
}
    b46c:	'-------> nop
    b46e:	          movea.l (sp)+,a6
    b470:	          lea 16(sp),sp
    b474:	          rts

0000b476 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b476:	       subq.l #8,sp
    b478:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b47a:	       movea.l 16(sp),a0
    b47e:	       movea.l 80(a0),a0
    b482:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b488:	       movea.l 16(sp),a0
    b48c:	       move.l 92(a0),d2
    b490:	       move.l 4(sp),-(sp)
    b494:	       pea b4 <_start+0xb4>
    b498:	       jsr 18282 <__divsi3>
    b49e:	       addq.l #8,sp
    b4a0:	       add.l d2,d0
    b4a2:	       move.l d0,d1
    b4a4:	       addi.l #180,d1
    b4aa:	       movea.l 16(sp),a0
    b4ae:	       move.l 100(a0),d0
    b4b2:	       move.l d1,d2
    b4b4:	       add.l d0,d2
    b4b6:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b4ba:	   ,-- bra.s b4c4 <rethinkAngle+0x4e>
    b4bc:	,--|-> addi.l #-360,8(sp)
    b4c4:	|  '-> cmpi.l #359,8(sp)
    b4cc:	'----- bgt.s b4bc <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b4ce:	       move.l 4(sp),-(sp)
    b4d2:	       move.l 12(sp),-(sp)
    b4d6:	       jsr 18204 <__mulsi3>
    b4dc:	       addq.l #8,sp
    b4de:	       pea 168 <decodeFilename+0x50>
    b4e2:	       move.l d0,-(sp)
    b4e4:	       jsr 18282 <__divsi3>
    b4ea:	       addq.l #8,sp
    b4ec:	       movea.l 16(sp),a0
    b4f0:	       move.l d0,106(a0)
}
    b4f4:	       nop
    b4f6:	       move.l (sp)+,d2
    b4f8:	       addq.l #8,sp
    b4fa:	       rts

0000b4fc <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b4fc:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b4fe:	          movea.l 8(sp),a0
    b502:	          move.l 8(a0),d0
    b506:	          move.l 12(sp),-(sp)
    b50a:	          move.l d0,-(sp)
    b50c:	          jsr 8d0 <put2bytes>
    b512:	          addq.l #8,sp
	if (p -> numFrames) {
    b514:	          movea.l 8(sp),a0
    b518:	          move.l 8(a0),d0
    b51c:	,-------- beq.w b5c0 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b520:	|         movea.l 8(sp),a0
    b524:	|         movea.l (a0),a0
    b526:	|         move.l (a0),d0
    b528:	|         move.l 12(sp),-(sp)
    b52c:	|         move.l d0,-(sp)
    b52e:	|         jsr 958 <put4bytes>
    b534:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b536:	|         clr.l (sp)
    b538:	|     ,-- bra.s b5b2 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b53a:	|  ,--|-> movea.l 8(sp),a0
    b53e:	|  |  |   movea.l 4(a0),a0
    b542:	|  |  |   move.l (sp),d1
    b544:	|  |  |   move.l d1,d0
    b546:	|  |  |   add.l d0,d0
    b548:	|  |  |   add.l d1,d0
    b54a:	|  |  |   add.l d0,d0
    b54c:	|  |  |   add.l d0,d0
    b54e:	|  |  |   adda.l d0,a0
    b550:	|  |  |   move.l (a0),d0
    b552:	|  |  |   move.l 12(sp),-(sp)
    b556:	|  |  |   move.l d0,-(sp)
    b558:	|  |  |   jsr 958 <put4bytes>
    b55e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b560:	|  |  |   movea.l 8(sp),a0
    b564:	|  |  |   movea.l 4(a0),a0
    b568:	|  |  |   move.l (sp),d1
    b56a:	|  |  |   move.l d1,d0
    b56c:	|  |  |   add.l d0,d0
    b56e:	|  |  |   add.l d1,d0
    b570:	|  |  |   add.l d0,d0
    b572:	|  |  |   add.l d0,d0
    b574:	|  |  |   adda.l d0,a0
    b576:	|  |  |   move.l 4(a0),d0
    b57a:	|  |  |   move.l 12(sp),-(sp)
    b57e:	|  |  |   move.l d0,-(sp)
    b580:	|  |  |   jsr 958 <put4bytes>
    b586:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b588:	|  |  |   movea.l 8(sp),a0
    b58c:	|  |  |   movea.l 4(a0),a0
    b590:	|  |  |   move.l (sp),d1
    b592:	|  |  |   move.l d1,d0
    b594:	|  |  |   add.l d0,d0
    b596:	|  |  |   add.l d1,d0
    b598:	|  |  |   add.l d0,d0
    b59a:	|  |  |   add.l d0,d0
    b59c:	|  |  |   adda.l d0,a0
    b59e:	|  |  |   move.l 8(a0),d0
    b5a2:	|  |  |   move.l 12(sp),-(sp)
    b5a6:	|  |  |   move.l d0,-(sp)
    b5a8:	|  |  |   jsr 958 <put4bytes>
    b5ae:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b5b0:	|  |  |   addq.l #1,(sp)
    b5b2:	|  |  '-> movea.l 8(sp),a0
    b5b6:	|  |      move.l 8(a0),d0
    b5ba:	|  |      cmp.l (sp),d0
    b5bc:	|  '----- bgt.w b53a <saveAnim+0x3e>
		}
	}
	return TRUE;
    b5c0:	'-------> moveq #1,d0
}
    b5c2:	          addq.l #4,sp
    b5c4:	          rts

0000b5c6 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b5c6:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b5c8:	             movea.l 8(sp),a0
    b5cc:	             move.l 4(a0),d0
    b5d0:	             move.l 12(sp),-(sp)
    b5d4:	             move.l d0,-(sp)
    b5d6:	             jsr 8d0 <put2bytes>
    b5dc:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b5de:	             clr.l (sp)
    b5e0:	   ,-------- bra.s b60c <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b5e2:	,--|-------> movea.l 8(sp),a0
    b5e6:	|  |         move.l (a0),d1
    b5e8:	|  |         move.l (sp),d0
    b5ea:	|  |         add.l d0,d0
    b5ec:	|  |         add.l d0,d0
    b5ee:	|  |         movea.l d1,a0
    b5f0:	|  |         adda.l d0,a0
    b5f2:	|  |         move.l (a0),d0
    b5f4:	|  |         move.l 12(sp),-(sp)
    b5f8:	|  |         move.l d0,-(sp)
    b5fa:	|  |         jsr b4fc <saveAnim>
    b600:	|  |         addq.l #8,sp
    b602:	|  |         tst.w d0
    b604:	|  |     ,-- bne.s b60a <saveCostume+0x44>
    b606:	|  |     |   clr.w d0
    b608:	|  |  ,--|-- bra.s b620 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b60a:	|  |  |  '-> addq.l #1,(sp)
    b60c:	|  '--|----> movea.l 8(sp),a0
    b610:	|     |      move.l 4(a0),d1
    b614:	|     |      move.l d1,d0
    b616:	|     |      add.l d0,d0
    b618:	|     |      add.l d1,d0
    b61a:	|     |      cmp.l (sp),d0
    b61c:	'-----|----- bgt.s b5e2 <saveCostume+0x1c>
	}

	return TRUE;
    b61e:	      |      moveq #1,d0
}
    b620:	      '----> addq.l #4,sp
    b622:	             rts

0000b624 <savePeople>:

BOOL savePeople (BPTR fp) {
    b624:	             lea -144(sp),sp
    b628:	             move.l a6,-(sp)
    b62a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b62c:	             move.l 1d126 <allPeople>,148(sp)
	int countPeople = 0, a;
    b634:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b638:	             move.w 1ca4c <scaleHorizon>,d0
    b63e:	             movea.w d0,a0
    b640:	             move.l 156(sp),-(sp)
    b644:	             move.l a0,-(sp)
    b646:	             jsr a9c <putSigned>
    b64c:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b64e:	             move.w 1ca4e <scaleDivide>,d0
    b654:	             movea.w d0,a0
    b656:	             move.l 156(sp),-(sp)
    b65a:	             move.l a0,-(sp)
    b65c:	             jsr a9c <putSigned>
    b662:	             addq.l #8,sp

	while (me) {
    b664:	         ,-- bra.s b674 <savePeople+0x50>
		countPeople ++;
    b666:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b66a:	      |  |   movea.l 148(sp),a0
    b66e:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b674:	      |  '-> tst.l 148(sp)
    b678:	      '----- bne.s b666 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b67a:	             move.l 156(sp),-(sp)
    b67e:	             move.l 148(sp),-(sp)
    b682:	             jsr 8d0 <put2bytes>
    b688:	             addq.l #8,sp

	me = allPeople;
    b68a:	             move.l 1d126 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b692:	             clr.l 140(sp)
    b696:	   ,-------- bra.w baee <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b69a:	,--|-------> movea.l 148(sp),a0
    b69e:	|  |         move.l (a0),d0
    b6a0:	|  |         move.l 156(sp),-(sp)
    b6a4:	|  |         move.l d0,-(sp)
    b6a6:	|  |         jsr a46 <putFloat>
    b6ac:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b6ae:	|  |         movea.l 148(sp),a0
    b6b2:	|  |         move.l 4(a0),d0
    b6b6:	|  |         move.l 156(sp),-(sp)
    b6ba:	|  |         move.l d0,-(sp)
    b6bc:	|  |         jsr a46 <putFloat>
    b6c2:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b6c4:	|  |         movea.l 148(sp),a0
    b6c8:	|  |         move.l 80(a0),d0
    b6cc:	|  |         move.l 156(sp),-(sp)
    b6d0:	|  |         move.l d0,-(sp)
    b6d2:	|  |         jsr b5c6 <saveCostume>
    b6d8:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b6da:	|  |         movea.l 148(sp),a0
    b6de:	|  |         move.l 72(a0),d0
    b6e2:	|  |         move.l 156(sp),-(sp)
    b6e6:	|  |         move.l d0,-(sp)
    b6e8:	|  |         jsr b4fc <saveAnim>
    b6ee:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b6f0:	|  |         move.l 156(sp),136(sp)
    b6f6:	|  |         movea.l 148(sp),a0
    b6fa:	|  |         move.l 72(a0),d1
    b6fe:	|  |         movea.l 148(sp),a0
    b702:	|  |         move.l 76(a0),d0
    b706:	|  |         cmp.l d1,d0
    b708:	|  |         seq d0
    b70a:	|  |         neg.b d0
    b70c:	|  |         move.b d0,d0
    b70e:	|  |         andi.l #255,d0
    b714:	|  |         move.l d0,132(sp)
    b718:	|  |         move.l 1d0ce <DOSBase>,d0
    b71e:	|  |         movea.l d0,a6
    b720:	|  |         move.l 136(sp),d1
    b724:	|  |         move.l 132(sp),d2
    b728:	|  |         jsr -312(a6)
    b72c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b730:	|  |         movea.l 148(sp),a0
    b734:	|  |         move.l 32(a0),d0
    b738:	|  |         move.l 156(sp),-(sp)
    b73c:	|  |         move.l d0,-(sp)
    b73e:	|  |         jsr a46 <putFloat>
    b744:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b746:	|  |         movea.l 148(sp),a0
    b74a:	|  |         move.l 118(a0),d0
    b74e:	|  |         move.l 156(sp),-(sp)
    b752:	|  |         move.l d0,-(sp)
    b754:	|  |         jsr 8d0 <put2bytes>
    b75a:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b75c:	|  |         movea.l 148(sp),a0
    b760:	|  |         move.l 20(a0),d0
    b764:	|  |         move.l 156(sp),-(sp)
    b768:	|  |         move.l d0,-(sp)
    b76a:	|  |         jsr 8d0 <put2bytes>
    b770:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b772:	|  |         movea.l 148(sp),a0
    b776:	|  |         move.l 40(a0),d0
    b77a:	|  |         move.l 156(sp),-(sp)
    b77e:	|  |         move.l d0,-(sp)
    b780:	|  |         jsr 8d0 <put2bytes>
    b786:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b788:	|  |         movea.l 148(sp),a0
    b78c:	|  |         move.l 44(a0),d0
    b790:	|  |         move.l 156(sp),-(sp)
    b794:	|  |         move.l d0,-(sp)
    b796:	|  |         jsr 8d0 <put2bytes>
    b79c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b79e:	|  |         movea.l 148(sp),a0
    b7a2:	|  |         move.l 48(a0),d0
    b7a6:	|  |         move.l 156(sp),-(sp)
    b7aa:	|  |         move.l d0,-(sp)
    b7ac:	|  |         jsr 8d0 <put2bytes>
    b7b2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b7b4:	|  |         movea.l 148(sp),a0
    b7b8:	|  |         move.l 52(a0),d0
    b7bc:	|  |         move.l 156(sp),-(sp)
    b7c0:	|  |         move.l d0,-(sp)
    b7c2:	|  |         jsr 8d0 <put2bytes>
    b7c8:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b7ca:	|  |         movea.l 148(sp),a0
    b7ce:	|  |         move.l 84(a0),d0
    b7d2:	|  |         move.l 156(sp),-(sp)
    b7d6:	|  |         move.l d0,-(sp)
    b7d8:	|  |         jsr 8d0 <put2bytes>
    b7de:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b7e0:	|  |         movea.l 148(sp),a0
    b7e4:	|  |         move.l 88(a0),d0
    b7e8:	|  |         move.l 156(sp),-(sp)
    b7ec:	|  |         move.l d0,-(sp)
    b7ee:	|  |         jsr 8d0 <put2bytes>
    b7f4:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b7f6:	|  |         movea.l 148(sp),a0
    b7fa:	|  |         move.l 28(a0),d0
    b7fe:	|  |         move.l 156(sp),-(sp)
    b802:	|  |         move.l d0,-(sp)
    b804:	|  |         jsr 8d0 <put2bytes>
    b80a:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b80c:	|  |         movea.l 148(sp),a0
    b810:	|  |         move.l 122(a0),d0
    b814:	|  |         move.l 156(sp),-(sp)
    b818:	|  |         move.l d0,-(sp)
    b81a:	|  |         jsr 8d0 <put2bytes>
    b820:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b822:	|  |         movea.l 148(sp),a0
    b826:	|  |         move.l 24(a0),d0
    b82a:	|  |         move.l d0,d0
    b82c:	|  |         movea.w d0,a0
    b82e:	|  |         move.l 156(sp),-(sp)
    b832:	|  |         move.l a0,-(sp)
    b834:	|  |         jsr a9c <putSigned>
    b83a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b83c:	|  |         move.l 156(sp),124(sp)
    b842:	|  |         movea.l 148(sp),a0
    b846:	|  |         move.w 104(a0),d0
    b84a:	|  |         movea.w d0,a0
    b84c:	|  |         move.l a0,120(sp)
    b850:	|  |         move.l 1d0ce <DOSBase>,d0
    b856:	|  |         movea.l d0,a6
    b858:	|  |         move.l 124(sp),d1
    b85c:	|  |         move.l 120(sp),d2
    b860:	|  |         jsr -312(a6)
    b864:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b868:	|  |         move.l 156(sp),112(sp)
    b86e:	|  |         movea.l 148(sp),a0
    b872:	|  |         move.w 64(a0),d0
    b876:	|  |         movea.w d0,a0
    b878:	|  |         move.l a0,108(sp)
    b87c:	|  |         move.l 1d0ce <DOSBase>,d0
    b882:	|  |         movea.l d0,a6
    b884:	|  |         move.l 112(sp),d1
    b888:	|  |         move.l 108(sp),d2
    b88c:	|  |         jsr -312(a6)
    b890:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b894:	|  |         move.l 156(sp),100(sp)
    b89a:	|  |         movea.l 148(sp),a0
    b89e:	|  |         move.w 66(a0),d0
    b8a2:	|  |         movea.w d0,a0
    b8a4:	|  |         move.l a0,96(sp)
    b8a8:	|  |         move.l 1d0ce <DOSBase>,d0
    b8ae:	|  |         movea.l d0,a6
    b8b0:	|  |         move.l 100(sp),d1
    b8b4:	|  |         move.l 96(sp),d2
    b8b8:	|  |         jsr -312(a6)
    b8bc:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b8c0:	|  |         movea.l 148(sp),a0
    b8c4:	|  |         move.l 68(a0),d0
    b8c8:	|  |  ,----- beq.s b906 <savePeople+0x2e2>
			FPutC (fp, 1);
    b8ca:	|  |  |      move.l 156(sp),76(sp)
    b8d0:	|  |  |      moveq #1,d0
    b8d2:	|  |  |      move.l d0,72(sp)
    b8d6:	|  |  |      move.l 1d0ce <DOSBase>,d0
    b8dc:	|  |  |      movea.l d0,a6
    b8de:	|  |  |      move.l 76(sp),d1
    b8e2:	|  |  |      move.l 72(sp),d2
    b8e6:	|  |  |      jsr -312(a6)
    b8ea:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b8ee:	|  |  |      movea.l 148(sp),a0
    b8f2:	|  |  |      move.l 68(a0),d0
    b8f6:	|  |  |      move.l 156(sp),-(sp)
    b8fa:	|  |  |      move.l d0,-(sp)
    b8fc:	|  |  |      jsr cb20 <saveFunction>
    b902:	|  |  |      addq.l #8,sp
    b904:	|  |  |  ,-- bra.s b92a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b906:	|  |  '--|-> move.l 156(sp),88(sp)
    b90c:	|  |     |   moveq #1,d0
    b90e:	|  |     |   move.l d0,84(sp)
    b912:	|  |     |   move.l 1d0ce <DOSBase>,d0
    b918:	|  |     |   movea.l d0,a6
    b91a:	|  |     |   move.l 88(sp),d1
    b91e:	|  |     |   move.l 84(sp),d2
    b922:	|  |     |   jsr -312(a6)
    b926:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b92a:	|  |     '-> movea.l 148(sp),a0
    b92e:	|  |         move.l 106(a0),d0
    b932:	|  |         move.l 156(sp),-(sp)
    b936:	|  |         move.l d0,-(sp)
    b938:	|  |         jsr 8d0 <put2bytes>
    b93e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b940:	|  |         movea.l 148(sp),a0
    b944:	|  |         move.l 92(a0),d0
    b948:	|  |         move.l 156(sp),-(sp)
    b94c:	|  |         move.l d0,-(sp)
    b94e:	|  |         jsr 8d0 <put2bytes>
    b954:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b956:	|  |         movea.l 148(sp),a0
    b95a:	|  |         move.l 100(a0),d0
    b95e:	|  |         move.l 156(sp),-(sp)
    b962:	|  |         move.l d0,-(sp)
    b964:	|  |         jsr 8d0 <put2bytes>
    b96a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b96c:	|  |         movea.l 148(sp),a0
    b970:	|  |         move.l 96(a0),d0
    b974:	|  |         move.l 156(sp),-(sp)
    b978:	|  |         move.l d0,-(sp)
    b97a:	|  |         jsr 8d0 <put2bytes>
    b980:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b982:	|  |         movea.l 148(sp),a0
    b986:	|  |         move.l 110(a0),d0
    b98a:	|  |         move.l d0,d0
    b98c:	|  |         movea.w d0,a0
    b98e:	|  |         move.l 156(sp),-(sp)
    b992:	|  |         move.l a0,-(sp)
    b994:	|  |         jsr a9c <putSigned>
    b99a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b99c:	|  |         movea.l 148(sp),a0
    b9a0:	|  |         move.l 56(a0),d0
    b9a4:	|  |         move.l d0,d0
    b9a6:	|  |         movea.w d0,a0
    b9a8:	|  |         move.l 156(sp),-(sp)
    b9ac:	|  |         move.l a0,-(sp)
    b9ae:	|  |         jsr a9c <putSigned>
    b9b4:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b9b6:	|  |         movea.l 148(sp),a0
    b9ba:	|  |         move.l 60(a0),d0
    b9be:	|  |         move.l d0,d0
    b9c0:	|  |         movea.w d0,a0
    b9c2:	|  |         move.l 156(sp),-(sp)
    b9c6:	|  |         move.l a0,-(sp)
    b9c8:	|  |         jsr a9c <putSigned>
    b9ce:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b9d0:	|  |         move.l 156(sp),64(sp)
    b9d6:	|  |         movea.l 148(sp),a0
    b9da:	|  |         move.b 126(a0),d0
    b9de:	|  |         move.b d0,d0
    b9e0:	|  |         andi.l #255,d0
    b9e6:	|  |         move.l d0,60(sp)
    b9ea:	|  |         move.l 1d0ce <DOSBase>,d0
    b9f0:	|  |         movea.l d0,a6
    b9f2:	|  |         move.l 64(sp),d1
    b9f6:	|  |         move.l 60(sp),d2
    b9fa:	|  |         jsr -312(a6)
    b9fe:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    ba02:	|  |         move.l 156(sp),52(sp)
    ba08:	|  |         movea.l 148(sp),a0
    ba0c:	|  |         move.b 127(a0),d0
    ba10:	|  |         move.b d0,d0
    ba12:	|  |         andi.l #255,d0
    ba18:	|  |         move.l d0,48(sp)
    ba1c:	|  |         move.l 1d0ce <DOSBase>,d0
    ba22:	|  |         movea.l d0,a6
    ba24:	|  |         move.l 52(sp),d1
    ba28:	|  |         move.l 48(sp),d2
    ba2c:	|  |         jsr -312(a6)
    ba30:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    ba34:	|  |         move.l 156(sp),40(sp)
    ba3a:	|  |         movea.l 148(sp),a0
    ba3e:	|  |         move.b 128(a0),d0
    ba42:	|  |         move.b d0,d0
    ba44:	|  |         andi.l #255,d0
    ba4a:	|  |         move.l d0,36(sp)
    ba4e:	|  |         move.l 1d0ce <DOSBase>,d0
    ba54:	|  |         movea.l d0,a6
    ba56:	|  |         move.l 40(sp),d1
    ba5a:	|  |         move.l 36(sp),d2
    ba5e:	|  |         jsr -312(a6)
    ba62:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    ba66:	|  |         move.l 156(sp),28(sp)
    ba6c:	|  |         movea.l 148(sp),a0
    ba70:	|  |         move.b 129(a0),d0
    ba74:	|  |         move.b d0,d0
    ba76:	|  |         andi.l #255,d0
    ba7c:	|  |         move.l d0,24(sp)
    ba80:	|  |         move.l 1d0ce <DOSBase>,d0
    ba86:	|  |         movea.l d0,a6
    ba88:	|  |         move.l 28(sp),d1
    ba8c:	|  |         move.l 24(sp),d2
    ba90:	|  |         jsr -312(a6)
    ba94:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    ba98:	|  |         move.l 156(sp),16(sp)
    ba9e:	|  |         movea.l 148(sp),a0
    baa2:	|  |         move.b 130(a0),d0
    baa6:	|  |         move.b d0,d0
    baa8:	|  |         andi.l #255,d0
    baae:	|  |         move.l d0,12(sp)
    bab2:	|  |         move.l 1d0ce <DOSBase>,d0
    bab8:	|  |         movea.l d0,a6
    baba:	|  |         move.l 16(sp),d1
    babe:	|  |         move.l 12(sp),d2
    bac2:	|  |         jsr -312(a6)
    bac6:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    baca:	|  |         movea.l 148(sp),a0
    bace:	|  |         move.l 114(a0),d0
    bad2:	|  |         move.l 156(sp),-(sp)
    bad6:	|  |         move.l d0,-(sp)
    bad8:	|  |         jsr def4 <saveObjectRef>
    bade:	|  |         addq.l #8,sp

		me = me -> next;
    bae0:	|  |         movea.l 148(sp),a0
    bae4:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    baea:	|  |         addq.l #1,140(sp)
    baee:	|  '-------> movea.l 140(sp),a0
    baf2:	|            cmpa.l 144(sp),a0
    baf6:	'----------- blt.w b69a <savePeople+0x76>
	}
	return TRUE;
    bafa:	             moveq #1,d0
}
    bafc:	             move.l (sp)+,d2
    bafe:	             movea.l (sp)+,a6
    bb00:	             lea 144(sp),sp
    bb04:	             rts

0000bb06 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    bb06:	movea.l 4(sp),a0
    bb0a:	move.l 8(sp),(a0)
}
    bb0e:	nop
    bb10:	rts

0000bb12 <setDrawMode>:


void setDrawMode (int h, int ob) {
    bb12:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    bb14:	       move.l 12(sp),-(sp)
    bb18:	       jsr ab3e <findPerson>
    bb1e:	       addq.l #4,sp
    bb20:	       move.l d0,(sp)
	if (! moveMe) return;
    bb22:	,----- beq.s bb36 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    bb24:	|      move.l 8(sp),-(sp)
    bb28:	|      move.l 4(sp),-(sp)
    bb2c:	|      jsr bb3c <setMyDrawMode>
    bb32:	|      addq.l #8,sp
    bb34:	|  ,-- bra.s bb38 <setDrawMode+0x26>
	if (! moveMe) return;
    bb36:	'--|-> nop
}
    bb38:	   '-> addq.l #4,sp
    bb3a:	       rts

0000bb3c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    bb3c:	       moveq #19,d0
    bb3e:	       cmp.l 8(sp),d0
    bb42:	,----- bcs.w c01a <setMyDrawMode+0x4de>
    bb46:	|      move.l 8(sp),d0
    bb4a:	|      add.l d0,d0
    bb4c:	|      movea.l d0,a0
    bb4e:	|      adda.l #47962,a0
    bb54:	|      move.w (a0),d0
    bb56:	|      jmp (bb5a <setMyDrawMode+0x1e>,pc,d0.w)
    bb5a:	|      .short 0x04c0
    bb5c:	|      ori.l #6684712,-(a4)
    bb62:	|      btst d0,-(a0)
    bb64:	|      bchg d0,(a6)+
    bb66:	|      bclr d0,(a4)+
    bb68:	|      bset d0,(a2)+
    bb6a:	|      andi.b #84,(a6)
    bb6e:	|      andi.l #55575312,(a2)
    bb74:	|      .short 0x02d0
    bb76:	|      bclr d1,(a0)
    bb78:	|      .short 0x044a
    bb7a:	|      .short 0x040c
    bb7c:	|      movep.l d1,1158(a6)
    bb80:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb82:	|      movea.l 4(sp),a0
    bb86:	|      clr.b 128(a0)
    bb8a:	|      movea.l 4(sp),a0
    bb8e:	|      move.b 128(a0),d0
    bb92:	|      movea.l 4(sp),a0
    bb96:	|      move.b d0,127(a0)
    bb9a:	|      movea.l 4(sp),a0
    bb9e:	|      move.b 127(a0),d0
    bba2:	|      movea.l 4(sp),a0
    bba6:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    bbaa:	|      movea.l 4(sp),a0
    bbae:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    bbb2:	|      movea.l 4(sp),a0
    bbb6:	|      move.b #64,130(a0)
			break;
    bbbc:	|  ,-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbc0:	|  |   movea.l 4(sp),a0
    bbc4:	|  |   clr.b 128(a0)
    bbc8:	|  |   movea.l 4(sp),a0
    bbcc:	|  |   move.b 128(a0),d0
    bbd0:	|  |   movea.l 4(sp),a0
    bbd4:	|  |   move.b d0,127(a0)
    bbd8:	|  |   movea.l 4(sp),a0
    bbdc:	|  |   move.b 127(a0),d0
    bbe0:	|  |   movea.l 4(sp),a0
    bbe4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bbe8:	|  |   movea.l 4(sp),a0
    bbec:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    bbf0:	|  |   movea.l 4(sp),a0
    bbf4:	|  |   move.b #-128,130(a0)
			break;
    bbfa:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbfe:	|  |   movea.l 4(sp),a0
    bc02:	|  |   clr.b 128(a0)
    bc06:	|  |   movea.l 4(sp),a0
    bc0a:	|  |   move.b 128(a0),d0
    bc0e:	|  |   movea.l 4(sp),a0
    bc12:	|  |   move.b d0,127(a0)
    bc16:	|  |   movea.l 4(sp),a0
    bc1a:	|  |   move.b 127(a0),d0
    bc1e:	|  |   movea.l 4(sp),a0
    bc22:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bc26:	|  |   movea.l 4(sp),a0
    bc2a:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    bc2e:	|  |   movea.l 4(sp),a0
    bc32:	|  |   move.b #-64,130(a0)
			break;
    bc38:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc3c:	|  |   movea.l 4(sp),a0
    bc40:	|  |   clr.b 128(a0)
    bc44:	|  |   movea.l 4(sp),a0
    bc48:	|  |   move.b 128(a0),d0
    bc4c:	|  |   movea.l 4(sp),a0
    bc50:	|  |   move.b d0,127(a0)
    bc54:	|  |   movea.l 4(sp),a0
    bc58:	|  |   move.b 127(a0),d0
    bc5c:	|  |   movea.l 4(sp),a0
    bc60:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bc64:	|  |   movea.l 4(sp),a0
    bc68:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    bc6c:	|  |   movea.l 4(sp),a0
    bc70:	|  |   move.b #-2,130(a0)
			break;
    bc76:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc7a:	|  |   movea.l 4(sp),a0
    bc7e:	|  |   clr.b 128(a0)
    bc82:	|  |   movea.l 4(sp),a0
    bc86:	|  |   move.b 128(a0),d0
    bc8a:	|  |   movea.l 4(sp),a0
    bc8e:	|  |   move.b d0,127(a0)
    bc92:	|  |   movea.l 4(sp),a0
    bc96:	|  |   move.b 127(a0),d0
    bc9a:	|  |   movea.l 4(sp),a0
    bc9e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bca2:	|  |   movea.l 4(sp),a0
    bca6:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bcac:	|  |   movea.l 4(sp),a0
    bcb0:	|  |   clr.b 130(a0)
			break;
    bcb4:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcb8:	|  |   movea.l 4(sp),a0
    bcbc:	|  |   clr.b 128(a0)
    bcc0:	|  |   movea.l 4(sp),a0
    bcc4:	|  |   move.b 128(a0),d0
    bcc8:	|  |   movea.l 4(sp),a0
    bccc:	|  |   move.b d0,127(a0)
    bcd0:	|  |   movea.l 4(sp),a0
    bcd4:	|  |   move.b 127(a0),d0
    bcd8:	|  |   movea.l 4(sp),a0
    bcdc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bce0:	|  |   movea.l 4(sp),a0
    bce4:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bcea:	|  |   movea.l 4(sp),a0
    bcee:	|  |   clr.b 130(a0)
			break;
    bcf2:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcf6:	|  |   movea.l 4(sp),a0
    bcfa:	|  |   clr.b 128(a0)
    bcfe:	|  |   movea.l 4(sp),a0
    bd02:	|  |   move.b 128(a0),d0
    bd06:	|  |   movea.l 4(sp),a0
    bd0a:	|  |   move.b d0,127(a0)
    bd0e:	|  |   movea.l 4(sp),a0
    bd12:	|  |   move.b 127(a0),d0
    bd16:	|  |   movea.l 4(sp),a0
    bd1a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bd1e:	|  |   movea.l 4(sp),a0
    bd22:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bd28:	|  |   movea.l 4(sp),a0
    bd2c:	|  |   clr.b 130(a0)
			break;
    bd30:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bd34:	|  |   movea.l 4(sp),a0
    bd38:	|  |   clr.b 128(a0)
    bd3c:	|  |   movea.l 4(sp),a0
    bd40:	|  |   move.b 128(a0),d0
    bd44:	|  |   movea.l 4(sp),a0
    bd48:	|  |   move.b d0,127(a0)
    bd4c:	|  |   movea.l 4(sp),a0
    bd50:	|  |   move.b 127(a0),d0
    bd54:	|  |   movea.l 4(sp),a0
    bd58:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bd5c:	|  |   movea.l 4(sp),a0
    bd60:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bd64:	|  |   movea.l 4(sp),a0
    bd68:	|  |   clr.b 130(a0)
			break;
    bd6c:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bd70:	|  |   movea.l 4(sp),a0
    bd74:	|  |   clr.b 128(a0)
    bd78:	|  |   movea.l 4(sp),a0
    bd7c:	|  |   move.b 128(a0),d0
    bd80:	|  |   movea.l 4(sp),a0
    bd84:	|  |   move.b d0,127(a0)
    bd88:	|  |   movea.l 4(sp),a0
    bd8c:	|  |   move.b 127(a0),d0
    bd90:	|  |   movea.l 4(sp),a0
    bd94:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bd98:	|  |   movea.l 4(sp),a0
    bd9c:	|  |   st 129(a0)
			moveMe->transparency = 64;
    bda0:	|  |   movea.l 4(sp),a0
    bda4:	|  |   move.b #64,130(a0)
			break;
    bdaa:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bdae:	|  |   movea.l 4(sp),a0
    bdb2:	|  |   clr.b 128(a0)
    bdb6:	|  |   movea.l 4(sp),a0
    bdba:	|  |   move.b 128(a0),d0
    bdbe:	|  |   movea.l 4(sp),a0
    bdc2:	|  |   move.b d0,127(a0)
    bdc6:	|  |   movea.l 4(sp),a0
    bdca:	|  |   move.b 127(a0),d0
    bdce:	|  |   movea.l 4(sp),a0
    bdd2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bdd6:	|  |   movea.l 4(sp),a0
    bdda:	|  |   st 129(a0)
			moveMe->transparency = 128;
    bdde:	|  |   movea.l 4(sp),a0
    bde2:	|  |   move.b #-128,130(a0)
			break;
    bde8:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bdec:	|  |   movea.l 4(sp),a0
    bdf0:	|  |   clr.b 128(a0)
    bdf4:	|  |   movea.l 4(sp),a0
    bdf8:	|  |   move.b 128(a0),d0
    bdfc:	|  |   movea.l 4(sp),a0
    be00:	|  |   move.b d0,127(a0)
    be04:	|  |   movea.l 4(sp),a0
    be08:	|  |   move.b 127(a0),d0
    be0c:	|  |   movea.l 4(sp),a0
    be10:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be14:	|  |   movea.l 4(sp),a0
    be18:	|  |   st 129(a0)
			moveMe->transparency = 192;
    be1c:	|  |   movea.l 4(sp),a0
    be20:	|  |   move.b #-64,130(a0)
			break;
    be26:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    be2a:	|  |   movea.l 4(sp),a0
    be2e:	|  |   move.b #-128,128(a0)
    be34:	|  |   movea.l 4(sp),a0
    be38:	|  |   move.b 128(a0),d0
    be3c:	|  |   movea.l 4(sp),a0
    be40:	|  |   move.b d0,127(a0)
    be44:	|  |   movea.l 4(sp),a0
    be48:	|  |   move.b 127(a0),d0
    be4c:	|  |   movea.l 4(sp),a0
    be50:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    be54:	|  |   movea.l 4(sp),a0
    be58:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    be5e:	|  |   movea.l 4(sp),a0
    be62:	|  |   clr.b 130(a0)
			break;
    be66:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    be6a:	|  |   movea.l 4(sp),a0
    be6e:	|  |   move.b #-128,128(a0)
    be74:	|  |   movea.l 4(sp),a0
    be78:	|  |   move.b 128(a0),d0
    be7c:	|  |   movea.l 4(sp),a0
    be80:	|  |   move.b d0,127(a0)
    be84:	|  |   movea.l 4(sp),a0
    be88:	|  |   move.b 127(a0),d0
    be8c:	|  |   movea.l 4(sp),a0
    be90:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    be94:	|  |   movea.l 4(sp),a0
    be98:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    be9e:	|  |   movea.l 4(sp),a0
    bea2:	|  |   clr.b 130(a0)
			break;
    bea6:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    beaa:	|  |   movea.l 4(sp),a0
    beae:	|  |   move.b #-128,128(a0)
    beb4:	|  |   movea.l 4(sp),a0
    beb8:	|  |   move.b 128(a0),d0
    bebc:	|  |   movea.l 4(sp),a0
    bec0:	|  |   move.b d0,127(a0)
    bec4:	|  |   movea.l 4(sp),a0
    bec8:	|  |   move.b 127(a0),d0
    becc:	|  |   movea.l 4(sp),a0
    bed0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bed4:	|  |   movea.l 4(sp),a0
    bed8:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bede:	|  |   movea.l 4(sp),a0
    bee2:	|  |   clr.b 130(a0)
			break;
    bee6:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    beea:	|  |   movea.l 4(sp),a0
    beee:	|  |   move.b #-128,128(a0)
    bef4:	|  |   movea.l 4(sp),a0
    bef8:	|  |   move.b 128(a0),d0
    befc:	|  |   movea.l 4(sp),a0
    bf00:	|  |   move.b d0,127(a0)
    bf04:	|  |   movea.l 4(sp),a0
    bf08:	|  |   move.b 127(a0),d0
    bf0c:	|  |   movea.l 4(sp),a0
    bf10:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bf14:	|  |   movea.l 4(sp),a0
    bf18:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bf1c:	|  |   movea.l 4(sp),a0
    bf20:	|  |   clr.b 130(a0)
			break;
    bf24:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bf28:	|  |   movea.l 4(sp),a0
    bf2c:	|  |   st 128(a0)
    bf30:	|  |   movea.l 4(sp),a0
    bf34:	|  |   move.b 128(a0),d0
    bf38:	|  |   movea.l 4(sp),a0
    bf3c:	|  |   move.b d0,127(a0)
    bf40:	|  |   movea.l 4(sp),a0
    bf44:	|  |   move.b 127(a0),d0
    bf48:	|  |   movea.l 4(sp),a0
    bf4c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bf50:	|  |   movea.l 4(sp),a0
    bf54:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bf5a:	|  |   movea.l 4(sp),a0
    bf5e:	|  |   clr.b 130(a0)
			break;
    bf62:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bf66:	|  |   movea.l 4(sp),a0
    bf6a:	|  |   st 128(a0)
    bf6e:	|  |   movea.l 4(sp),a0
    bf72:	|  |   move.b 128(a0),d0
    bf76:	|  |   movea.l 4(sp),a0
    bf7a:	|  |   move.b d0,127(a0)
    bf7e:	|  |   movea.l 4(sp),a0
    bf82:	|  |   move.b 127(a0),d0
    bf86:	|  |   movea.l 4(sp),a0
    bf8a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bf8e:	|  |   movea.l 4(sp),a0
    bf92:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bf98:	|  |   movea.l 4(sp),a0
    bf9c:	|  |   clr.b 130(a0)
			break;
    bfa0:	|  +-- bra.w c054 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bfa4:	|  |   movea.l 4(sp),a0
    bfa8:	|  |   st 128(a0)
    bfac:	|  |   movea.l 4(sp),a0
    bfb0:	|  |   move.b 128(a0),d0
    bfb4:	|  |   movea.l 4(sp),a0
    bfb8:	|  |   move.b d0,127(a0)
    bfbc:	|  |   movea.l 4(sp),a0
    bfc0:	|  |   move.b 127(a0),d0
    bfc4:	|  |   movea.l 4(sp),a0
    bfc8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bfcc:	|  |   movea.l 4(sp),a0
    bfd0:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bfd6:	|  |   movea.l 4(sp),a0
    bfda:	|  |   clr.b 130(a0)
			break;
    bfde:	|  +-- bra.s c054 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bfe0:	|  |   movea.l 4(sp),a0
    bfe4:	|  |   st 128(a0)
    bfe8:	|  |   movea.l 4(sp),a0
    bfec:	|  |   move.b 128(a0),d0
    bff0:	|  |   movea.l 4(sp),a0
    bff4:	|  |   move.b d0,127(a0)
    bff8:	|  |   movea.l 4(sp),a0
    bffc:	|  |   move.b 127(a0),d0
    c000:	|  |   movea.l 4(sp),a0
    c004:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c008:	|  |   movea.l 4(sp),a0
    c00c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c010:	|  |   movea.l 4(sp),a0
    c014:	|  |   clr.b 130(a0)
			break;
    c018:	|  +-- bra.s c054 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c01a:	'--|-> movea.l 4(sp),a0
    c01e:	   |   clr.b 128(a0)
    c022:	   |   movea.l 4(sp),a0
    c026:	   |   move.b 128(a0),d0
    c02a:	   |   movea.l 4(sp),a0
    c02e:	   |   move.b d0,127(a0)
    c032:	   |   movea.l 4(sp),a0
    c036:	   |   move.b 127(a0),d0
    c03a:	   |   movea.l 4(sp),a0
    c03e:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c042:	   |   movea.l 4(sp),a0
    c046:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c04a:	   |   movea.l 4(sp),a0
    c04e:	   |   clr.b 130(a0)
			break;
    c052:	   |   nop
	}
}
    c054:	   '-> nop
    c056:	       rts

0000c058 <shufflePeople>:

void shufflePeople () {
    c058:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c05c:	             move.l #119078,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c064:	             move.l 1d126 <allPeople>,d0
    c06a:	,----------- beq.w c140 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c06e:	|     ,----- bra.w c130 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c072:	|  ,--|----> movea.l 16(sp),a0
    c076:	|  |  |      movea.l (a0),a0
    c078:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c07e:	|  |  |      movea.l 16(sp),a0
    c082:	|  |  |      movea.l (a0),a0
    c084:	|  |  |      move.l 118(a0),d0
    c088:	|  |  |      moveq #1,d1
    c08a:	|  |  |      and.l d1,d0
    c08c:	|  |  |  ,-- beq.s c0a4 <shufflePeople+0x4c>
    c08e:	|  |  |  |   move.l #1148846080,-(sp)
    c094:	|  |  |  |   move.l 16(sp),-(sp)
    c098:	|  |  |  |   jsr 17a66 <__addsf3>
    c09e:	|  |  |  |   addq.l #8,sp
    c0a0:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c0a4:	|  |  |  '-> movea.l 16(sp),a0
    c0a8:	|  |  |      movea.l (a0),a0
    c0aa:	|  |  |      movea.l 36(a0),a0
    c0ae:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c0b4:	|  |  |      movea.l 16(sp),a0
    c0b8:	|  |  |      movea.l (a0),a0
    c0ba:	|  |  |      movea.l 36(a0),a0
    c0be:	|  |  |      move.l 118(a0),d0
    c0c2:	|  |  |      moveq #1,d1
    c0c4:	|  |  |      and.l d1,d0
    c0c6:	|  |  |  ,-- beq.s c0de <shufflePeople+0x86>
    c0c8:	|  |  |  |   move.l #1148846080,-(sp)
    c0ce:	|  |  |  |   move.l 12(sp),-(sp)
    c0d2:	|  |  |  |   jsr 17a66 <__addsf3>
    c0d8:	|  |  |  |   addq.l #8,sp
    c0da:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c0de:	|  |  |  '-> move.l 8(sp),-(sp)
    c0e2:	|  |  |      move.l 16(sp),-(sp)
    c0e6:	|  |  |      jsr 17e16 <__gtsf2>
    c0ec:	|  |  |      addq.l #8,sp
    c0ee:	|  |  |      tst.l d0
    c0f0:	|  |  |  ,-- ble.s c122 <shufflePeople+0xca>
			A = (*thisReference);
    c0f2:	|  |  |  |   movea.l 16(sp),a0
    c0f6:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c0fa:	|  |  |  |   movea.l 16(sp),a0
    c0fe:	|  |  |  |   movea.l (a0),a0
    c100:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c104:	|  |  |  |   movea.l (sp),a0
    c106:	|  |  |  |   move.l 36(a0),d0
    c10a:	|  |  |  |   movea.l 4(sp),a0
    c10e:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c112:	|  |  |  |   movea.l (sp),a0
    c114:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c11a:	|  |  |  |   movea.l 16(sp),a0
    c11e:	|  |  |  |   move.l (sp),(a0)
    c120:	|  |  +--|-- bra.s c130 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c122:	|  |  |  '-> movea.l 16(sp),a0
    c126:	|  |  |      move.l (a0),d0
    c128:	|  |  |      moveq #36,d1
    c12a:	|  |  |      add.l d0,d1
    c12c:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c130:	|  |  '----> movea.l 16(sp),a0
    c134:	|  |         movea.l (a0),a0
    c136:	|  |         move.l 36(a0),d0
    c13a:	|  '-------- bne.w c072 <shufflePeople+0x1a>
    c13e:	|        ,-- bra.s c142 <shufflePeople+0xea>
	if (!allPeople) return;
    c140:	'--------|-> nop
		}
	}
}
    c142:	         '-> lea 20(sp),sp
    c146:	             rts

0000c148 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c148:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c14a:	       tst.l 8(sp)
    c14e:	   ,-- bgt.s c154 <setCharacterWalkSpeed+0xc>
    c150:	   |   clr.w d0
    c152:	,--|-- bra.s c172 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c154:	|  '-> move.l 12(sp),-(sp)
    c158:	|      jsr ab3e <findPerson>
    c15e:	|      addq.l #4,sp
    c160:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c162:	|  ,-- bne.s c168 <setCharacterWalkSpeed+0x20>
    c164:	|  |   clr.w d0
    c166:	+--|-- bra.s c172 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c168:	|  '-> movea.l (sp),a0
    c16a:	|      move.l 8(sp),28(a0)
	return TRUE;
    c170:	|      moveq #1,d0
}
    c172:	'----> addq.l #4,sp
    c174:	       rts

0000c176 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c176:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c178:	       move.l 8(sp),-(sp)
    c17c:	       jsr ab3e <findPerson>
    c182:	       addq.l #4,sp
    c184:	       move.l d0,(sp)
    if (thisPerson) {
    c186:	,----- beq.s c1a6 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c188:	|      movea.l (sp),a0
    c18a:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c190:	|      moveq #2,d0
    c192:	|      and.l 12(sp),d0
    c196:	|  ,-- beq.s c1a2 <setPersonExtra+0x2c>
    c198:	|  |   movea.l (sp),a0
    c19a:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c1a2:	|  '-> moveq #1,d0
    c1a4:	|  ,-- bra.s c1a8 <setPersonExtra+0x32>
    }
    return FALSE;
    c1a6:	'--|-> clr.w d0
}
    c1a8:	   '-> addq.l #4,sp
    c1aa:	       rts

0000c1ac <setScale>:


void setScale (short int h, short int d) {
    c1ac:	subq.l #4,sp
    c1ae:	move.l 8(sp),d1
    c1b2:	move.l 12(sp),d0
    c1b6:	move.w d1,d1
    c1b8:	move.w d1,2(sp)
    c1bc:	move.w d0,d0
    c1be:	move.w d0,(sp)
	scaleHorizon = h;
    c1c0:	move.w 2(sp),1ca4c <scaleHorizon>
	scaleDivide = d;
    c1c8:	move.w (sp),1ca4e <scaleDivide>
}
    c1ce:	nop
    c1d0:	addq.l #4,sp
    c1d2:	rts

0000c1d4 <setShown>:

void setShown (BOOL h, int ob) {
    c1d4:	    subq.l #8,sp
    c1d6:	    move.l 12(sp),d0
    c1da:	    move.w d0,d0
    c1dc:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c1e0:	    move.l 16(sp),-(sp)
    c1e4:	    jsr ab3e <findPerson>
    c1ea:	    addq.l #4,sp
    c1ec:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c1f0:	,-- beq.s c1fc <setShown+0x28>
    c1f2:	|   movea.l 4(sp),a0
    c1f6:	|   move.w 2(sp),104(a0)
}
    c1fc:	'-> nop
    c1fe:	    addq.l #8,sp
    c200:	    rts

0000c202 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c202:	       subq.l #8,sp
    c204:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c206:	       movea.l 16(sp),a0
    c20a:	       move.l 92(a0),d0
    c20e:	       move.l d0,d1
    c210:	       addi.l #360,d1
    c216:	       movea.l 16(sp),a0
    c21a:	       move.l 96(a0),d0
    c21e:	       move.l d1,d2
    c220:	       sub.l d0,d2
    c222:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c226:	       movea.l 16(sp),a0
    c22a:	       move.l 122(a0),d0
    c22e:	   ,-- beq.s c23a <spinStep+0x38>
    c230:	   |   movea.l 16(sp),a0
    c234:	   |   move.l 122(a0),d0
    c238:	,--|-- bra.s c254 <spinStep+0x52>
    c23a:	|  '-> movea.l 16(sp),a0
    c23e:	|      movea.l 80(a0),a0
    c242:	|      move.l 4(a0),d0
    c246:	|      move.l d0,-(sp)
    c248:	|      pea 168 <decodeFilename+0x50>
    c24c:	|      jsr 18282 <__divsi3>
    c252:	|      addq.l #8,sp
    c254:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c258:	   ,-- bra.s c262 <spinStep+0x60>
		diff -= 360;
    c25a:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c262:	|  '-> cmpi.l #180,8(sp)
    c26a:	'----- bgt.s c25a <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c26c:	       move.l 8(sp),d0
    c270:	       cmp.l 4(sp),d0
    c274:	   ,-- blt.s c292 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c276:	   |   movea.l 16(sp),a0
    c27a:	   |   move.l 92(a0),d0
    c27e:	   |   sub.l 4(sp),d0
    c282:	   |   move.l d0,-(sp)
    c284:	   |   move.l 20(sp),-(sp)
    c288:	   |   jsr c372 <turnMeAngle>
    c28e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c290:	,--|-- bra.s c2d8 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c292:	|  '-> move.l 4(sp),d0
    c296:	|      neg.l d0
    c298:	|      cmp.l 8(sp),d0
    c29c:	|  ,-- blt.s c2ba <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c29e:	|  |   movea.l 16(sp),a0
    c2a2:	|  |   move.l 92(a0),d0
    c2a6:	|  |   add.l 4(sp),d0
    c2aa:	|  |   move.l d0,-(sp)
    c2ac:	|  |   move.l 20(sp),-(sp)
    c2b0:	|  |   jsr c372 <turnMeAngle>
    c2b6:	|  |   addq.l #8,sp
}
    c2b8:	+--|-- bra.s c2d8 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c2ba:	|  '-> movea.l 16(sp),a0
    c2be:	|      move.l 96(a0),d0
    c2c2:	|      move.l d0,-(sp)
    c2c4:	|      move.l 20(sp),-(sp)
    c2c8:	|      jsr c372 <turnMeAngle>
    c2ce:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c2d0:	|      movea.l 16(sp),a0
    c2d4:	|      clr.w 66(a0)
}
    c2d8:	'----> nop
    c2da:	       move.l (sp)+,d2
    c2dc:	       addq.l #8,sp
    c2de:	       rts

0000c2e0 <stopPerson>:


BOOL stopPerson (int o) {
    c2e0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c2e2:	       move.l 8(sp),-(sp)
    c2e6:	       jsr ab3e <findPerson>
    c2ec:	       addq.l #4,sp
    c2ee:	       move.l d0,(sp)
    if (moveMe)
    c2f0:	,----- beq.s c32e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c2f2:	|      movea.l (sp),a0
    c2f4:	|      move.l 68(a0),d0
    c2f8:	+----- beq.s c32e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c2fa:	|      movea.l (sp),a0
    c2fc:	|      move.l 68(a0),d0
    c300:	|      move.l d0,-(sp)
    c302:	|      jsr 5538 <abortFunction>
    c308:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c30a:	|      movea.l (sp),a0
    c30c:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c310:	|      movea.l (sp),a0
    c312:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c316:	|      movea.l (sp),a0
    c318:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c31c:	|      clr.l -(sp)
    c31e:	|      move.l 4(sp),-(sp)
    c322:	|      jsr 46da <setFrames>
    c328:	|      addq.l #8,sp
            return TRUE;
    c32a:	|      moveq #1,d0
    c32c:	|  ,-- bra.s c330 <stopPerson+0x50>
        }
    return FALSE;
    c32e:	'--|-> clr.w d0
}
    c330:	   '-> addq.l #4,sp
    c332:	       rts

0000c334 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c334:	       subq.l #8,sp
	int total = 0;
    c336:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c33a:	       clr.l (sp)
    c33c:	   ,-- bra.s c35e <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c33e:	,--|-> movea.l 12(sp),a0
    c342:	|  |   movea.l 4(a0),a0
    c346:	|  |   move.l (sp),d1
    c348:	|  |   move.l d1,d0
    c34a:	|  |   add.l d0,d0
    c34c:	|  |   add.l d1,d0
    c34e:	|  |   add.l d0,d0
    c350:	|  |   add.l d0,d0
    c352:	|  |   adda.l d0,a0
    c354:	|  |   move.l 4(a0),d0
    c358:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c35c:	|  |   addq.l #1,(sp)
    c35e:	|  '-> movea.l 12(sp),a0
    c362:	|      move.l 8(a0),d0
    c366:	|      cmp.l (sp),d0
    c368:	'----- bgt.s c33e <timeForAnim+0xa>
	}
	return total;
    c36a:	       move.l 4(sp),d0
}
    c36e:	       addq.l #8,sp
    c370:	       rts

0000c372 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c372:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c374:	       movea.l 8(sp),a0
    c378:	       movea.l 80(a0),a0
    c37c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c380:	       movea.l 8(sp),a0
    c384:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c38a:	       move.l (sp),-(sp)
    c38c:	       pea b4 <_start+0xb4>
    c390:	       jsr 18282 <__divsi3>
    c396:	       addq.l #8,sp
    c398:	       move.l d0,d1
    c39a:	       addi.l #180,d1
    c3a0:	       movea.l 8(sp),a0
    c3a4:	       move.l 100(a0),d0
    c3a8:	       add.l d1,d0
    c3aa:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c3ae:	   ,-- bra.s c3b8 <turnMeAngle+0x46>
    c3b0:	,--|-> addi.l #-360,12(sp)
    c3b8:	|  '-> cmpi.l #359,12(sp)
    c3c0:	'----- bgt.s c3b0 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c3c2:	       move.l (sp),-(sp)
    c3c4:	       move.l 16(sp),-(sp)
    c3c8:	       jsr 18204 <__mulsi3>
    c3ce:	       addq.l #8,sp
    c3d0:	       pea 168 <decodeFilename+0x50>
    c3d4:	       move.l d0,-(sp)
    c3d6:	       jsr 18282 <__divsi3>
    c3dc:	       addq.l #8,sp
    c3de:	       movea.l 8(sp),a0
    c3e2:	       move.l d0,106(a0)
}
    c3e6:	       nop
    c3e8:	       addq.l #4,sp
    c3ea:	       rts

0000c3ec <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c3ec:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c3ee:	          move.l 8(sp),-(sp)
    c3f2:	          jsr ab3e <findPerson>
    c3f8:	          addq.l #4,sp
    c3fa:	          move.l d0,(sp)
    if (thisPerson) {
    c3fc:	,-------- beq.s c45c <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c3fe:	|         movea.l (sp),a0
    c400:	|         move.l 68(a0),d0
    c404:	|     ,-- beq.s c416 <turnPersonToFace+0x2a>
    c406:	|     |   movea.l (sp),a0
    c408:	|     |   move.l 68(a0),d0
    c40c:	|     |   move.l d0,-(sp)
    c40e:	|     |   jsr 5538 <abortFunction>
    c414:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c416:	|     '-> movea.l (sp),a0
    c418:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c41c:	|         movea.l (sp),a0
    c41e:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c422:	|         movea.l (sp),a0
    c424:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c428:	|         move.l 12(sp),-(sp)
    c42c:	|         move.l 4(sp),-(sp)
    c430:	|         jsr c372 <turnMeAngle>
    c436:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c438:	|         movea.l 1d016 <speech>,a0
    c43e:	|         move.l (a0),d0
    c440:	|         cmp.l (sp),d0
    c442:	|  ,----- bne.s c448 <turnPersonToFace+0x5c>
    c444:	|  |      moveq #2,d0
    c446:	|  |  ,-- bra.s c44a <turnPersonToFace+0x5e>
    c448:	|  '--|-> moveq #0,d0
    c44a:	|     '-> move.l d0,-(sp)
    c44c:	|         move.l 4(sp),-(sp)
    c450:	|         jsr 46da <setFrames>
    c456:	|         addq.l #8,sp
        return TRUE;
    c458:	|         moveq #1,d0
    c45a:	|     ,-- bra.s c45e <turnPersonToFace+0x72>
    }
    return FALSE;
    c45c:	'-----|-> clr.w d0
}
    c45e:	      '-> addq.l #4,sp
    c460:	          rts

0000c462 <walkAllPeople>:

void walkAllPeople() {
    c462:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c464:	             move.l 1d126 <allPeople>,(sp)

	while (thisPerson) {
    c46a:	   ,-------- bra.s c4da <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c46c:	,--|-------> movea.l (sp),a0
    c46e:	|  |         move.w 64(a0),d0
    c472:	|  |     ,-- beq.s c486 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c474:	|  |     |   pea 1 <_start+0x1>
    c478:	|  |     |   move.l 4(sp),-(sp)
    c47c:	|  |     |   jsr c4e6 <walkMe>
    c482:	|  |     |   addq.l #8,sp
    c484:	|  |  ,--|-- bra.s c4a6 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c486:	|  |  |  '-> movea.l (sp),a0
    c488:	|  |  |      move.w 66(a0),d0
    c48c:	|  |  +----- beq.s c4a6 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c48e:	|  |  |      move.l (sp),-(sp)
    c490:	|  |  |      jsr c202 <spinStep>
    c496:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c498:	|  |  |      clr.l -(sp)
    c49a:	|  |  |      move.l 4(sp),-(sp)
    c49e:	|  |  |      jsr 46da <setFrames>
    c4a4:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c4a6:	|  |  '----> movea.l (sp),a0
    c4a8:	|  |         move.w 64(a0),d0
    c4ac:	|  |     ,-- bne.s c4d4 <walkAllPeople+0x72>
    c4ae:	|  |     |   movea.l (sp),a0
    c4b0:	|  |     |   move.w 66(a0),d0
    c4b4:	|  |     +-- bne.s c4d4 <walkAllPeople+0x72>
    c4b6:	|  |     |   movea.l (sp),a0
    c4b8:	|  |     |   move.l 68(a0),d0
    c4bc:	|  |     +-- beq.s c4d4 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c4be:	|  |     |   movea.l (sp),a0
    c4c0:	|  |     |   move.l 68(a0),d0
    c4c4:	|  |     |   move.l d0,-(sp)
    c4c6:	|  |     |   jsr 76aa <restartFunction>
    c4cc:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c4ce:	|  |     |   movea.l (sp),a0
    c4d0:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c4d4:	|  |     '-> movea.l (sp),a0
    c4d6:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c4da:	|  '-------> tst.l (sp)
    c4dc:	'----------- bne.s c46c <walkAllPeople+0xa>
	}
}
    c4de:	             nop
    c4e0:	             nop
    c4e2:	             addq.l #4,sp
    c4e4:	             rts

0000c4e6 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c4e6:	                lea -20(sp),sp
    c4ea:	                move.l d3,-(sp)
    c4ec:	                move.l d2,-(sp)
    c4ee:	                move.l 36(sp),d0
    c4f2:	                move.w d0,d0
    c4f4:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c4f8:	                cmpi.w #-1,10(sp)
    c4fe:	,-------------- bne.s c506 <walkMe+0x20>
    c500:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c506:	>-------------> movea.l 32(sp),a0
    c50a:	|               move.l 48(a0),d0
    c50e:	|               move.l d0,-(sp)
    c510:	|               jsr 17caa <__floatsisf>
    c516:	|               addq.l #4,sp
    c518:	|               move.l d0,d1
    c51a:	|               movea.l 32(sp),a0
    c51e:	|               move.l (a0),d0
    c520:	|               move.l d0,-(sp)
    c522:	|               move.l d1,-(sp)
    c524:	|               jsr 17f9e <__subsf3>
    c52a:	|               addq.l #8,sp
    c52c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c530:	|               movea.l 32(sp),a0
    c534:	|               move.l 52(a0),d0
    c538:	|               move.l d0,-(sp)
    c53a:	|               jsr 17caa <__floatsisf>
    c540:	|               addq.l #4,sp
    c542:	|               move.l d0,d1
    c544:	|               movea.l 32(sp),a0
    c548:	|               move.l 4(a0),d0
    c54c:	|               move.l d0,-(sp)
    c54e:	|               move.l d1,-(sp)
    c550:	|               jsr 17f9e <__subsf3>
    c556:	|               addq.l #8,sp
    c558:	|               move.l d0,-(sp)
    c55a:	|               move.l d0,-(sp)
    c55c:	|               jsr 17a66 <__addsf3>
    c562:	|               addq.l #8,sp
    c564:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c568:	|               movea.l 32(sp),a0
    c56c:	|               move.l 32(a0),d2
    c570:	|               movea.l 32(sp),a0
    c574:	|               move.l 28(a0),d0
    c578:	|               move.l d0,-(sp)
    c57a:	|               jsr 17caa <__floatsisf>
    c580:	|               addq.l #4,sp
    c582:	|               move.l d0,-(sp)
    c584:	|               move.l d2,-(sp)
    c586:	|               jsr 17d5c <__mulsf3>
    c58c:	|               addq.l #8,sp
    c58e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c592:	|               move.l 24(sp),-(sp)
    c596:	|               jsr 17bcc <__extendsfdf2>
    c59c:	|               addq.l #4,sp
    c59e:	|               move.l #-1717986918,-(sp)
    c5a4:	|               move.l #1070176665,-(sp)
    c5aa:	|               move.l d1,-(sp)
    c5ac:	|               move.l d0,-(sp)
    c5ae:	|               jsr 17e82 <__ltdf2>
    c5b4:	|               lea 16(sp),sp
    c5b8:	|               tst.l d0
    c5ba:	|           ,-- bge.s c5c4 <walkMe+0xde>
    c5bc:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c5c4:	|           '-> move.l 20(sp),-(sp)
    c5c8:	|               jsr 17c42 <__fixsfsi>
    c5ce:	|               addq.l #4,sp
    c5d0:	|               move.l d0,-(sp)
    c5d2:	|               jsr 972e <TF_abs>
    c5d8:	|               addq.l #4,sp
    c5da:	|               move.l d0,d2
    c5dc:	|               move.l 16(sp),-(sp)
    c5e0:	|               jsr 17c42 <__fixsfsi>
    c5e6:	|               addq.l #4,sp
    c5e8:	|               move.l d0,-(sp)
    c5ea:	|               jsr 972e <TF_abs>
    c5f0:	|               addq.l #4,sp
    c5f2:	|               cmp.l d2,d0
    c5f4:	|        ,----- bgt.s c618 <walkMe+0x132>
    c5f6:	|        |      move.l 20(sp),-(sp)
    c5fa:	|        |      jsr 17c42 <__fixsfsi>
    c600:	|        |      addq.l #4,sp
    c602:	|        |      move.l d0,-(sp)
    c604:	|        |      jsr 972e <TF_abs>
    c60a:	|        |      addq.l #4,sp
    c60c:	|        |      move.l d0,-(sp)
    c60e:	|        |      jsr 17caa <__floatsisf>
    c614:	|        |      addq.l #4,sp
    c616:	|        |  ,-- bra.s c638 <walkMe+0x152>
    c618:	|        '--|-> move.l 16(sp),-(sp)
    c61c:	|           |   jsr 17c42 <__fixsfsi>
    c622:	|           |   addq.l #4,sp
    c624:	|           |   move.l d0,-(sp)
    c626:	|           |   jsr 972e <TF_abs>
    c62c:	|           |   addq.l #4,sp
    c62e:	|           |   move.l d0,-(sp)
    c630:	|           |   jsr 17caa <__floatsisf>
    c636:	|           |   addq.l #4,sp
    c638:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c63c:	|               move.l 12(sp),-(sp)
    c640:	|               jsr 17c42 <__fixsfsi>
    c646:	|               addq.l #4,sp
    c648:	|               move.l d0,-(sp)
    c64a:	|               jsr 972e <TF_abs>
    c650:	|               addq.l #4,sp
    c652:	|               move.l d0,-(sp)
    c654:	|               jsr 17caa <__floatsisf>
    c65a:	|               addq.l #4,sp
    c65c:	|               move.l d0,-(sp)
    c65e:	|               move.l 28(sp),-(sp)
    c662:	|               jsr 17ed0 <__ltsf2>
    c668:	|               addq.l #8,sp
    c66a:	|               tst.l d0
    c66c:	|        ,----- bge.w c71e <walkMe+0x238>
			if (thisPerson->spinning) {
    c670:	|        |      movea.l 32(sp),a0
    c674:	|        |      move.w 66(a0),d0
    c678:	|        |  ,-- beq.s c696 <walkMe+0x1b0>
				spinStep(thisPerson);
    c67a:	|        |  |   move.l 32(sp),-(sp)
    c67e:	|        |  |   jsr c202 <spinStep>
    c684:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c686:	|        |  |   pea 1 <_start+0x1>
    c68a:	|        |  |   move.l 36(sp),-(sp)
    c68e:	|        |  |   jsr 46da <setFrames>
    c694:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c696:	|        |  '-> move.l 24(sp),-(sp)
    c69a:	|        |      move.l 16(sp),-(sp)
    c69e:	|        |      jsr 17b60 <__divsf3>
    c6a4:	|        |      addq.l #8,sp
    c6a6:	|        |      move.l d0,24(sp)
			if (move)
    c6aa:	|        |      tst.w 10(sp)
    c6ae:	|        |  ,-- beq.s c718 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c6b0:	|        |  |   movea.l 32(sp),a0
    c6b4:	|        |  |   move.l 4(a0),d2
    c6b8:	|        |  |   move.l 24(sp),d0
    c6bc:	|        |  |   move.l d0,-(sp)
    c6be:	|        |  |   move.l d0,-(sp)
    c6c0:	|        |  |   jsr 17a66 <__addsf3>
    c6c6:	|        |  |   addq.l #8,sp
    c6c8:	|        |  |   move.l d0,-(sp)
    c6ca:	|        |  |   move.l 20(sp),-(sp)
    c6ce:	|        |  |   jsr 17b60 <__divsf3>
    c6d4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c6d6:	|        |  |   move.l d0,-(sp)
    c6d8:	|        |  |   move.l d2,-(sp)
    c6da:	|        |  |   jsr 17a66 <__addsf3>
    c6e0:	|        |  |   addq.l #8,sp
    c6e2:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c6e4:	|        |  |   movea.l 32(sp),a0
    c6e8:	|        |  |   move.l (a0),d3
    c6ea:	|        |  |   move.l 24(sp),-(sp)
    c6ee:	|        |  |   move.l 24(sp),-(sp)
    c6f2:	|        |  |   jsr 17b60 <__divsf3>
    c6f8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c6fa:	|        |  |   move.l d0,-(sp)
    c6fc:	|        |  |   move.l d3,-(sp)
    c6fe:	|        |  |   jsr 17a66 <__addsf3>
    c704:	|        |  |   addq.l #8,sp
    c706:	|        |  |   move.l d2,-(sp)
    c708:	|        |  |   move.l d0,-(sp)
    c70a:	|        |  |   move.l 40(sp),-(sp)
    c70e:	|        |  |   jsr b2e8 <moveAndScale>
    c714:	|        |  |   lea 12(sp),sp
			return TRUE;
    c718:	|        |  '-> moveq #1,d0
    c71a:	|  ,-----|----- bra.w c7cc <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c71e:	|  |     '----> movea.l 32(sp),a0
    c722:	|  |            move.l 56(a0),d0
    c726:	|  |            moveq #-1,d1
    c728:	|  |            cmp.l d0,d1
    c72a:	|  |        ,-- bne.s c762 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c72c:	|  |        |   movea.l 32(sp),a0
    c730:	|  |        |   move.l 110(a0),d0
    c734:	|  |        |   moveq #-1,d1
    c736:	|  |        |   cmp.l d0,d1
    c738:	|  |  ,-----|-- beq.s c776 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c73a:	|  |  |     |   movea.l 32(sp),a0
    c73e:	|  |  |     |   move.l 110(a0),d0
    c742:	|  |  |     |   movea.l 32(sp),a0
    c746:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c74a:	|  |  |     |   movea.l 32(sp),a0
    c74e:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c754:	|  |  |     |   move.l 32(sp),-(sp)
    c758:	|  |  |     |   jsr c202 <spinStep>
    c75e:	|  |  |     |   addq.l #4,sp
			}
			break;
    c760:	|  |  +-----|-- bra.s c776 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c762:	|  |  |     '-> move.l 32(sp),-(sp)
    c766:	|  |  |         jsr 9ea0 <doBorderStuff>
    c76c:	|  |  |         addq.l #4,sp
    c76e:	|  |  |         tst.w d0
    c770:	|  |  |  ,----- beq.s c77a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c772:	'--|--|--|----- bra.w c506 <walkMe+0x20>
			break;
    c776:	   |  '--|----> nop
    c778:	   |     |  ,-- bra.s c77c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c77a:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c77c:	   |        '-> movea.l 32(sp),a0
    c780:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c784:	   |            clr.l -(sp)
    c786:	   |            move.l 36(sp),-(sp)
    c78a:	   |            jsr 46da <setFrames>
    c790:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c792:	   |            movea.l 32(sp),a0
    c796:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c79a:	   |            move.l d0,-(sp)
    c79c:	   |            jsr 17caa <__floatsisf>
    c7a2:	   |            addq.l #4,sp
    c7a4:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c7a6:	   |            movea.l 32(sp),a0
    c7aa:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c7ae:	   |            move.l d0,-(sp)
    c7b0:	   |            jsr 17caa <__floatsisf>
    c7b6:	   |            addq.l #4,sp
    c7b8:	   |            move.l d2,-(sp)
    c7ba:	   |            move.l d0,-(sp)
    c7bc:	   |            move.l 40(sp),-(sp)
    c7c0:	   |            jsr b2e8 <moveAndScale>
    c7c6:	   |            lea 12(sp),sp
	return FALSE;
    c7ca:	   |            clr.w d0
}
    c7cc:	   '----------> move.l (sp)+,d2
    c7ce:	                move.l (sp)+,d3
    c7d0:	                lea 20(sp),sp
    c7d4:	                rts

0000c7d6 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c7d6:	       subq.l #8,sp
    c7d8:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c7da:	   ,-- bra.s c80a <clearStackLib+0x34>
		k = stackLib;
    c7dc:	,--|-> move.l 1d152 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c7e4:	|  |   movea.l 1d152 <stackLib>,a0
    c7ea:	|  |   move.l 4(a0),d0
    c7ee:	|  |   move.l d0,1d152 <stackLib>
		FreeVec(k);
    c7f4:	|  |   move.l 8(sp),4(sp)
    c7fa:	|  |   move.l 1d0c6 <SysBase>,d0
    c800:	|  |   movea.l d0,a6
    c802:	|  |   movea.l 4(sp),a1
    c806:	|  |   jsr -690(a6)
	while (stackLib) {
    c80a:	|  '-> move.l 1d152 <stackLib>,d0
    c810:	'----- bne.s c7dc <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c812:	       clr.l 1d14e <stackLibTotal>
}
    c818:	       nop
    c81a:	       movea.l (sp)+,a6
    c81c:	       addq.l #8,sp
    c81e:	       rts

0000c820 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c820:	          lea -128(sp),sp
    c824:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c828:	      ,-- bra.s c83a <loadGame+0x1a>
    c82a:	   ,--|-> move.l 1d05e <allRunningFunctions>,d0
    c830:	   |  |   move.l d0,-(sp)
    c832:	   |  |   jsr 656c <finishFunction>
    c838:	   |  |   addq.l #4,sp
    c83a:	   |  '-> move.l 1d05e <allRunningFunctions>,d0
    c840:	   '----- bne.s c82a <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c842:	          pea 1d156 <ssgVersion>
    c848:	          pea 199b3 <PutChar+0x1699>
    c84e:	          pea 41 <_start+0x41>
    c852:	          pea 53 <_start+0x53>
    c856:	          move.l 160(sp),-(sp)
    c85a:	          jsr 7292 <openAndVerify>
    c860:	          lea 20(sp),sp
    c864:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c868:	      ,-- bne.s c870 <loadGame+0x50>
    c86a:	      |   clr.w d0
    c86c:	,-----|-- bra.w cb16 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c870:	|     '-> move.l 112(sp),108(sp)
    c876:	|         lea 140(sp),a0
    c87a:	|         lea -126(a0),a0
    c87e:	|         move.l a0,120(sp)
    c882:	|         moveq #8,d0
    c884:	|         move.l d0,116(sp)
    c888:	|         move.l 1d0ce <DOSBase>,d0
    c88e:	|         movea.l d0,a6
    c890:	|         move.l 108(sp),d1
    c894:	|         move.l 120(sp),d2
    c898:	|         move.l 116(sp),d3
    c89c:	|         jsr -42(a6)
    c8a0:	|         move.l d0,132(sp)
    c8a4:	|         move.l 132(sp),d0
    c8a8:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c8ac:	|         moveq #8,d0
    c8ae:	|         cmp.l 128(sp),d0
    c8b2:	|     ,-- beq.s c8c2 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c8b4:	|     |   pea 199d4 <PutChar+0x16ba>
    c8ba:	|     |   jsr 17878 <KPrintF>
    c8c0:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c8c2:	|     '-> move.l 14(sp),d1
    c8c6:	|         move.l 1d068 <fileTime>,d0
    c8cc:	|         cmp.l d1,d0
    c8ce:	|     ,-- bne.s c8de <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c8d0:	|     |   move.l 18(sp),d1
    c8d4:	|     |   move.l 1d06c <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c8da:	|     |   cmp.l d1,d0
    c8dc:	|  ,--|-- beq.s c8fe <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c8de:	|  |  '-> move.l 144(sp),-(sp)
    c8e2:	|  |      pea 199f0 <PutChar+0x16d6>
    c8e8:	|  |      pea 19ab7 <PutChar+0x179d>
    c8ee:	|  |      jsr 17878 <KPrintF>
    c8f4:	|  |      lea 12(sp),sp
		return FALSE; 
    c8f8:	|  |      clr.w d0
    c8fa:	+--|----- bra.w cb16 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c8fe:	|  '----> move.l 112(sp),124(sp)
    c904:	|         move.l 1d0ce <DOSBase>,d0
    c90a:	|         movea.l d0,a6
    c90c:	|         move.l 124(sp),d1
    c910:	|         jsr -306(a6)
    c914:	|         move.l d0,136(sp)
    c918:	|         move.l 136(sp),d0
    c91c:	|         move.l d0,d0
    c91e:	|         move.w d0,1c916 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c924:	|         move.l 112(sp),100(sp)
    c92a:	|         move.l 1d0ce <DOSBase>,d0
    c930:	|         movea.l d0,a6
    c932:	|         move.l 100(sp),d1
    c936:	|         jsr -306(a6)
    c93a:	|         move.l d0,96(sp)
    c93e:	|         move.l 96(sp),d0
    c942:	|         move.l d0,d0
    c944:	|         move.w d0,1d066 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c94a:	|         move.l 112(sp),92(sp)
    c950:	|         move.l 1d0ce <DOSBase>,d0
    c956:	|         movea.l d0,a6
    c958:	|         move.l 92(sp),d1
    c95c:	|         jsr -306(a6)
    c960:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c964:	|         move.l 112(sp),84(sp)
    c96a:	|         move.l 1d0ce <DOSBase>,d0
    c970:	|         movea.l d0,a6
    c972:	|         move.l 84(sp),d1
    c976:	|         jsr -306(a6)
    c97a:	|         move.l d0,80(sp)
    c97e:	|         move.l 80(sp),d0
    c982:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c986:	|     ,-- beq.s c9ba <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c988:	|     |   move.l 112(sp),-(sp)
    c98c:	|     |   jsr 6bc <get2bytes>
    c992:	|     |   addq.l #4,sp
    c994:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c998:	|     |   move.l 112(sp),-(sp)
    c99c:	|     |   jsr 6bc <get2bytes>
    c9a2:	|     |   addq.l #4,sp
    c9a4:	|     |   move.l d0,1d1ba <fontHeight>
		charOrder = readString(fp);		
    c9aa:	|     |   move.l 112(sp),-(sp)
    c9ae:	|     |   jsr b02 <readString>
    c9b4:	|     |   addq.l #4,sp
    c9b6:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c9ba:	|     '-> move.l 104(sp),70(sp)
    c9c0:	|         move.l 1d0c6 <SysBase>,d0
    c9c6:	|         movea.l d0,a6
    c9c8:	|         movea.l 70(sp),a1
    c9cc:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c9d0:	|         move.l 112(sp),-(sp)
    c9d4:	|         jsr 854 <getSigned>
    c9da:	|         addq.l #4,sp
    c9dc:	|         move.w d0,1cfbe <fontSpace>

	killAllPeople ();
    c9e2:	|         jsr af52 <killAllPeople>
	killAllRegions ();
    c9e8:	|         jsr 16088 <killAllRegions>

	int camerX = get2bytes (fp);
    c9ee:	|         move.l 112(sp),-(sp)
    c9f2:	|         jsr 6bc <get2bytes>
    c9f8:	|         addq.l #4,sp
    c9fa:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c9fe:	|         move.l 112(sp),-(sp)
    ca02:	|         jsr 6bc <get2bytes>
    ca08:	|         addq.l #4,sp
    ca0a:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    ca0e:	|         move.l 112(sp),-(sp)
    ca12:	|         jsr 7d8 <getFloat>
    ca18:	|         addq.l #4,sp
    ca1a:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    ca1e:	|         move.l 112(sp),54(sp)
    ca24:	|         move.l 1d0ce <DOSBase>,d0
    ca2a:	|         movea.l d0,a6
    ca2c:	|         move.l 54(sp),d1
    ca30:	|         jsr -306(a6)
    ca34:	|         move.l d0,50(sp)
    ca38:	|         move.l 50(sp),d0
    ca3c:	|         move.l d0,d0
    ca3e:	|         move.b d0,1ca34 <brightnessLevel>

	loadHandlers (fp);
    ca44:	|         move.l 112(sp),-(sp)
    ca48:	|         jsr 71f2 <loadHandlers>
    ca4e:	|         addq.l #4,sp
	loadRegions (fp);
    ca50:	|         move.l 112(sp),-(sp)
    ca54:	|         jsr 160e4 <loadRegions>
    ca5a:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    ca5c:	|         moveq #12,d0
    ca5e:	|         move.l d0,46(sp)
    ca62:	|         clr.l 42(sp)
    ca66:	|         move.l 1d0c6 <SysBase>,d0
    ca6c:	|         movea.l d0,a6
    ca6e:	|         move.l 46(sp),d0
    ca72:	|         move.l 42(sp),d1
    ca76:	|         jsr -684(a6)
    ca7a:	|         move.l d0,38(sp)
    ca7e:	|         move.l 38(sp),d0
    ca82:	|         move.l d0,1cfc0 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    ca88:	|         move.l 1cfc0 <mouseCursorAnim>,d0
    ca8e:	|     ,-- bne.s caa2 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    ca90:	|     |   pea 19ac1 <PutChar+0x17a7>
    ca96:	|     |   jsr 17878 <KPrintF>
    ca9c:	|     |   addq.l #4,sp
		return FALSE;
    ca9e:	|     |   clr.w d0
    caa0:	+-----|-- bra.s cb16 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    caa2:	|     '-> jsr d946 <nosnapshot>
	if (FGetC (fp)) {
    caa8:	|         move.l 112(sp),34(sp)
    caae:	|         move.l 1d0ce <DOSBase>,d0
    cab4:	|         movea.l d0,a6
    cab6:	|         move.l 34(sp),d1
    caba:	|         jsr -306(a6)
    cabe:	|         move.l d0,30(sp)
    cac2:	|         move.l 30(sp),d0
    cac6:	|     ,-- beq.s cadc <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    cac8:	|     |   move.l 112(sp),-(sp)
    cacc:	|     |   jsr d9c6 <restoreSnapshot>
    cad2:	|     |   addq.l #4,sp
    cad4:	|     |   tst.w d0
    cad6:	|     +-- bne.s cadc <loadGame+0x2bc>
    cad8:	|     |   clr.w d0
    cada:	+-----|-- bra.s cb16 <loadGame+0x2f6>
	}

	Close (fp);
    cadc:	|     '-> move.l 112(sp),26(sp)
    cae2:	|         move.l 1d0ce <DOSBase>,d0
    cae8:	|         movea.l d0,a6
    caea:	|         move.l 26(sp),d1
    caee:	|         jsr -36(a6)
    caf2:	|         move.l d0,22(sp)
	clearStackLib ();
    caf6:	|         jsr c7d6 <clearStackLib>

	cameraX = camerX;
    cafc:	|         move.l 66(sp),1d17c <cameraX>
	cameraY = camerY;
    cb04:	|         move.l 62(sp),1d180 <cameraY>
	cameraZoom = camerZ;
    cb0c:	|         move.l 58(sp),1ca58 <cameraZoom>

	return TRUE;
    cb14:	|         moveq #1,d0
}
    cb16:	'-------> movem.l (sp)+,d2-d3/a6
    cb1a:	          lea 128(sp),sp
    cb1e:	          rts

0000cb20 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    cb20:	   ,-> lea -64(sp),sp
    cb24:	   |   move.l a6,-(sp)
    cb26:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    cb28:	   |   movea.l 76(sp),a0
    cb2c:	   |   move.l (a0),d0
    cb2e:	   |   move.l 80(sp),-(sp)
    cb32:	   |   move.l d0,-(sp)
    cb34:	   |   jsr 8d0 <put2bytes>
    cb3a:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    cb3c:	   |   movea.l 76(sp),a0
    cb40:	   |   move.l 40(a0),d0
    cb44:	,--|-- beq.s cb80 <saveFunction+0x60>
		FPutC (fp, 1);
    cb46:	|  |   move.l 80(sp),52(sp)
    cb4c:	|  |   moveq #1,d0
    cb4e:	|  |   move.l d0,48(sp)
    cb52:	|  |   move.l 1d0ce <DOSBase>,d0
    cb58:	|  |   movea.l d0,a6
    cb5a:	|  |   move.l 52(sp),d1
    cb5e:	|  |   move.l 48(sp),d2
    cb62:	|  |   jsr -312(a6)
    cb66:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    cb6a:	|  |   movea.l 76(sp),a0
    cb6e:	|  |   move.l 40(a0),d0
    cb72:	|  |   move.l 80(sp),-(sp)
    cb76:	|  |   move.l d0,-(sp)
    cb78:	|  '-- jsr cb20 <saveFunction>(pc)
    cb7c:	|      addq.l #8,sp
    cb7e:	|  ,-- bra.s cba2 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    cb80:	'--|-> move.l 80(sp),64(sp)
    cb86:	   |   clr.l 60(sp)
    cb8a:	   |   move.l 1d0ce <DOSBase>,d0
    cb90:	   |   movea.l d0,a6
    cb92:	   |   move.l 64(sp),d1
    cb96:	   |   move.l 60(sp),d2
    cb9a:	   |   jsr -312(a6)
    cb9e:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    cba2:	   '-> movea.l 76(sp),a0
    cba6:	       move.l 12(a0),d0
    cbaa:	       move.l 80(sp),-(sp)
    cbae:	       move.l d0,-(sp)
    cbb0:	       jsr 958 <put4bytes>
    cbb6:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    cbb8:	       movea.l 76(sp),a0
    cbbc:	       move.l 36(a0),d0
    cbc0:	       move.l 80(sp),-(sp)
    cbc4:	       move.l d0,-(sp)
    cbc6:	       jsr 8d0 <put2bytes>
    cbcc:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    cbce:	       move.l 80(sp),40(sp)
    cbd4:	       movea.l 76(sp),a0
    cbd8:	       move.w 54(a0),d0
    cbdc:	       movea.w d0,a0
    cbde:	       move.l a0,36(sp)
    cbe2:	       move.l 1d0ce <DOSBase>,d0
    cbe8:	       movea.l d0,a6
    cbea:	       move.l 40(sp),d1
    cbee:	       move.l 36(sp),d2
    cbf2:	       jsr -312(a6)
    cbf6:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    cbfa:	       move.l 80(sp),28(sp)
    cc00:	       movea.l 76(sp),a0
    cc04:	       move.w 48(a0),d0
    cc08:	       movea.w d0,a0
    cc0a:	       move.l a0,24(sp)
    cc0e:	       move.l 1d0ce <DOSBase>,d0
    cc14:	       movea.l d0,a6
    cc16:	       move.l 28(sp),d1
    cc1a:	       move.l 24(sp),d2
    cc1e:	       jsr -312(a6)
    cc22:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    cc26:	       move.l 80(sp),16(sp)
    cc2c:	       movea.l 76(sp),a0
    cc30:	       move.w 50(a0),d0
    cc34:	       movea.w d0,a0
    cc36:	       move.l a0,12(sp)
    cc3a:	       move.l 1d0ce <DOSBase>,d0
    cc40:	       movea.l d0,a6
    cc42:	       move.l 16(sp),d1
    cc46:	       move.l 12(sp),d2
    cc4a:	       jsr -312(a6)
    cc4e:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    cc52:	       moveq #28,d0
    cc54:	       add.l 76(sp),d0
    cc58:	       move.l 80(sp),-(sp)
    cc5c:	       move.l d0,-(sp)
    cc5e:	       jsr d378 <saveVariable>
    cc64:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    cc66:	       movea.l 76(sp),a0
    cc6a:	       move.b 56(a0),d0
    cc6e:	   ,-- beq.s cc7e <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    cc70:	   |   pea 19ae2 <PutChar+0x17c8>
    cc76:	   |   jsr 17878 <KPrintF>
    cc7c:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    cc7e:	   '-> movea.l 76(sp),a0
    cc82:	       move.l 24(a0),d0
    cc86:	       move.l 80(sp),-(sp)
    cc8a:	       move.l d0,-(sp)
    cc8c:	       jsr d1ec <saveStack>
    cc92:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cc94:	       clr.l 68(sp)
    cc98:	   ,-- bra.s ccbc <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    cc9a:	,--|-> movea.l 76(sp),a0
    cc9e:	|  |   move.l 20(a0),d1
    cca2:	|  |   move.l 68(sp),d0
    cca6:	|  |   lsl.l #3,d0
    cca8:	|  |   add.l d1,d0
    ccaa:	|  |   move.l 80(sp),-(sp)
    ccae:	|  |   move.l d0,-(sp)
    ccb0:	|  |   jsr d378 <saveVariable>
    ccb6:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    ccb8:	|  |   addq.l #1,68(sp)
    ccbc:	|  '-> movea.l 76(sp),a0
    ccc0:	|      move.l 8(a0),d0
    ccc4:	|      cmp.l 68(sp),d0
    ccc8:	'----- bgt.s cc9a <saveFunction+0x17a>
	}
}
    ccca:	       nop
    cccc:	       nop
    ccce:	       move.l (sp)+,d2
    ccd0:	       movea.l (sp)+,a6
    ccd2:	       lea 64(sp),sp
    ccd6:	       rts

0000ccd8 <saveGame>:

BOOL saveGame (char * fname) {
    ccd8:	          lea -248(sp),sp
    ccdc:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    cce0:	          move.l 264(sp),244(sp)
    cce6:	          move.l #1006,240(sp)
    ccee:	          move.l 1d0ce <DOSBase>,d0
    ccf4:	          movea.l d0,a6
    ccf6:	          move.l 244(sp),d1
    ccfa:	          move.l 240(sp),d2
    ccfe:	          jsr -30(a6)
    cd02:	          move.l d0,236(sp)
    cd06:	          move.l 236(sp),d0
    cd0a:	          move.l d0,232(sp)
	if (fp == NULL) {
    cd0e:	      ,-- bne.s cd24 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    cd10:	      |   pea 19b04 <PutChar+0x17ea>
    cd16:	      |   jsr 17878 <KPrintF>
    cd1c:	      |   addq.l #4,sp
		return FALSE;
    cd1e:	      |   clr.w d0
    cd20:	,-----|-- bra.w d1e2 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    cd24:	|     '-> move.l 232(sp),228(sp)
    cd2a:	|         move.l #105249,224(sp)
    cd32:	|         moveq #6,d0
    cd34:	|         move.l d0,220(sp)
    cd38:	|         move.l 1d0ce <DOSBase>,d0
    cd3e:	|         movea.l d0,a6
    cd40:	|         move.l 228(sp),d1
    cd44:	|         move.l 224(sp),d2
    cd48:	|         move.l 220(sp),d3
    cd4c:	|         jsr -48(a6)
    cd50:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    cd54:	|         move.l 232(sp),212(sp)
    cd5a:	|         clr.l 208(sp)
    cd5e:	|         move.l 1d0ce <DOSBase>,d0
    cd64:	|         movea.l d0,a6
    cd66:	|         move.l 212(sp),d1
    cd6a:	|         move.l 208(sp),d2
    cd6e:	|         jsr -312(a6)
    cd72:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    cd76:	|         move.l 232(sp),200(sp)
    cd7c:	|         clr.l 196(sp)
    cd80:	|         move.l 1d0ce <DOSBase>,d0
    cd86:	|         movea.l d0,a6
    cd88:	|         move.l 200(sp),d1
    cd8c:	|         move.l 196(sp),d2
    cd90:	|         jsr -312(a6)
    cd94:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    cd98:	|         move.l 232(sp),188(sp)
    cd9e:	|         moveq #2,d0
    cda0:	|         move.l d0,184(sp)
    cda4:	|         move.l 1d0ce <DOSBase>,d0
    cdaa:	|         movea.l d0,a6
    cdac:	|         move.l 188(sp),d1
    cdb0:	|         move.l 184(sp),d2
    cdb4:	|         jsr -312(a6)
    cdb8:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    cdbc:	|         move.l 232(sp),176(sp)
    cdc2:	|         moveq #2,d0
    cdc4:	|         move.l d0,172(sp)
    cdc8:	|         move.l 1d0ce <DOSBase>,d0
    cdce:	|         movea.l d0,a6
    cdd0:	|         move.l 176(sp),d1
    cdd4:	|         move.l 172(sp),d2
    cdd8:	|         jsr -312(a6)
    cddc:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    cde0:	|         move.l 232(sp),164(sp)
    cde6:	|         move.l #118888,160(sp)
    cdee:	|         moveq #8,d0
    cdf0:	|         move.l d0,156(sp)
    cdf4:	|         move.l 1d0ce <DOSBase>,d0
    cdfa:	|         movea.l d0,a6
    cdfc:	|         move.l 164(sp),d1
    ce00:	|         move.l 160(sp),d2
    ce04:	|         move.l 156(sp),d3
    ce08:	|         jsr -48(a6)
    ce0c:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    ce10:	|         move.l 232(sp),148(sp)
    ce16:	|         move.w 1c916 <allowAnyFilename>,d0
    ce1c:	|         movea.w d0,a0
    ce1e:	|         move.l a0,144(sp)
    ce22:	|         move.l 1d0ce <DOSBase>,d0
    ce28:	|         movea.l d0,a6
    ce2a:	|         move.l 148(sp),d1
    ce2e:	|         move.l 144(sp),d2
    ce32:	|         jsr -312(a6)
    ce36:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    ce3a:	|         move.l 232(sp),136(sp)
    ce40:	|         move.w 1d066 <captureAllKeys>,d0
    ce46:	|         movea.w d0,a0
    ce48:	|         move.l a0,132(sp)
    ce4c:	|         move.l 1d0ce <DOSBase>,d0
    ce52:	|         movea.l d0,a6
    ce54:	|         move.l 136(sp),d1
    ce58:	|         move.l 132(sp),d2
    ce5c:	|         jsr -312(a6)
    ce60:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    ce64:	|         move.l 232(sp),124(sp)
    ce6a:	|         moveq #1,d0
    ce6c:	|         move.l d0,120(sp)
    ce70:	|         move.l 1d0ce <DOSBase>,d0
    ce76:	|         movea.l d0,a6
    ce78:	|         move.l 124(sp),d1
    ce7c:	|         move.l 120(sp),d2
    ce80:	|         jsr -312(a6)
    ce84:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    ce88:	|         move.l 232(sp),112(sp)
    ce8e:	|         move.l 1d1ca <fontTableSize>,d0
    ce94:	|         sgt d0
    ce96:	|         neg.b d0
    ce98:	|         move.b d0,d0
    ce9a:	|         andi.l #255,d0
    cea0:	|         move.l d0,108(sp)
    cea4:	|         move.l 1d0ce <DOSBase>,d0
    ceaa:	|         movea.l d0,a6
    ceac:	|         move.l 112(sp),d1
    ceb0:	|         move.l 108(sp),d2
    ceb4:	|         jsr -312(a6)
    ceb8:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    cebc:	|         move.l 1d1ca <fontTableSize>,d0
    cec2:	|     ,-- ble.s cf00 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    cec4:	|     |   move.l 1d1be <loadedFontNum>,d0
    ceca:	|     |   move.l 232(sp),-(sp)
    cece:	|     |   move.l d0,-(sp)
    ced0:	|     |   jsr 8d0 <put2bytes>
    ced6:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ced8:	|     |   move.l 1d1ba <fontHeight>,d0
    cede:	|     |   move.l 232(sp),-(sp)
    cee2:	|     |   move.l d0,-(sp)
    cee4:	|     |   jsr 8d0 <put2bytes>
    ceea:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ceec:	|     |   move.l 1d1c2 <fontOrderString>,d0
    cef2:	|     |   move.l 232(sp),-(sp)
    cef6:	|     |   move.l d0,-(sp)
    cef8:	|     |   jsr bd8 <writeString>
    cefe:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    cf00:	|     '-> move.w 1cfbe <fontSpace>,d0
    cf06:	|         movea.w d0,a0
    cf08:	|         move.l 232(sp),-(sp)
    cf0c:	|         move.l a0,-(sp)
    cf0e:	|         jsr a9c <putSigned>
    cf14:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    cf16:	|         move.l 1d17c <cameraX>,d0
    cf1c:	|         move.l 232(sp),-(sp)
    cf20:	|         move.l d0,-(sp)
    cf22:	|         jsr 8d0 <put2bytes>
    cf28:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cf2a:	|         move.l 1d180 <cameraY>,d0
    cf30:	|         move.l 232(sp),-(sp)
    cf34:	|         move.l d0,-(sp)
    cf36:	|         jsr 8d0 <put2bytes>
    cf3c:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cf3e:	|         move.l 1ca58 <cameraZoom>,d0
    cf44:	|         move.l 232(sp),-(sp)
    cf48:	|         move.l d0,-(sp)
    cf4a:	|         jsr a46 <putFloat>
    cf50:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cf52:	|         move.l 232(sp),100(sp)
    cf58:	|         move.b 1ca34 <brightnessLevel>,d0
    cf5e:	|         move.b d0,d0
    cf60:	|         andi.l #255,d0
    cf66:	|         move.l d0,96(sp)
    cf6a:	|         move.l 1d0ce <DOSBase>,d0
    cf70:	|         movea.l d0,a6
    cf72:	|         move.l 100(sp),d1
    cf76:	|         move.l 96(sp),d2
    cf7a:	|         jsr -312(a6)
    cf7e:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cf82:	|         move.l 232(sp),-(sp)
    cf86:	|         jsr 77dc <saveHandlers>
    cf8c:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cf8e:	|         move.l 232(sp),-(sp)
    cf92:	|         jsr 1629e <saveRegions>
    cf98:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cf9a:	|         move.l 1cfc0 <mouseCursorAnim>,d0
    cfa0:	|         move.l 232(sp),-(sp)
    cfa4:	|         move.l d0,-(sp)
    cfa6:	|         jsr b4fc <saveAnim>
    cfac:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cfae:	|         move.l 1cfc4 <mouseCursorFrameNum>,d0
    cfb4:	|         move.l 232(sp),-(sp)
    cfb8:	|         move.l d0,-(sp)
    cfba:	|         jsr 8d0 <put2bytes>
    cfc0:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cfc2:	|         move.l 1d05e <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cfca:	|         clr.l 248(sp)
	while (thisFunction) {
    cfce:	|     ,-- bra.s cfde <saveGame+0x306>
		countFunctions ++;
    cfd0:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cfd4:	|  |  |   movea.l 252(sp),a0
    cfd8:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cfde:	|  |  '-> tst.l 252(sp)
    cfe2:	|  '----- bne.s cfd0 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cfe4:	|         move.l 232(sp),-(sp)
    cfe8:	|         move.l 252(sp),-(sp)
    cfec:	|         jsr 8d0 <put2bytes>
    cff2:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cff4:	|         move.l 1d05e <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cffc:	|     ,-- bra.s d018 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cffe:	|  ,--|-> move.l 232(sp),-(sp)
    d002:	|  |  |   move.l 256(sp),-(sp)
    d006:	|  |  |   jsr cb20 <saveFunction>
    d00c:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d00e:	|  |  |   movea.l 252(sp),a0
    d012:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d018:	|  |  '-> tst.l 252(sp)
    d01c:	|  '----- bne.s cffe <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d01e:	|         clr.l 256(sp)
    d022:	|     ,-- bra.s d044 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d024:	|  ,--|-> move.l 1d074 <globalVars>,d1
    d02a:	|  |  |   move.l 256(sp),d0
    d02e:	|  |  |   lsl.l #3,d0
    d030:	|  |  |   add.l d1,d0
    d032:	|  |  |   move.l 232(sp),-(sp)
    d036:	|  |  |   move.l d0,-(sp)
    d038:	|  |  |   jsr d378 <saveVariable>
    d03e:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d040:	|  |  |   addq.l #1,256(sp)
    d044:	|  |  '-> move.l 1d09e <numGlobals>,d0
    d04a:	|  |      cmp.l 256(sp),d0
    d04e:	|  '----- bgt.s d024 <saveGame+0x34c>
	}

	savePeople (fp);
    d050:	|         move.l 232(sp),-(sp)
    d054:	|         jsr b624 <savePeople>
    d05a:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d05c:	|         movea.l 1d1de <currentFloor>,a0
    d062:	|         move.l 8(a0),d0
    d066:	|  ,----- beq.s d0a4 <saveGame+0x3cc>
		FPutC (fp, 1);
    d068:	|  |      move.l 232(sp),76(sp)
    d06e:	|  |      moveq #1,d0
    d070:	|  |      move.l d0,72(sp)
    d074:	|  |      move.l 1d0ce <DOSBase>,d0
    d07a:	|  |      movea.l d0,a6
    d07c:	|  |      move.l 76(sp),d1
    d080:	|  |      move.l 72(sp),d2
    d084:	|  |      jsr -312(a6)
    d088:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d08c:	|  |      movea.l 1d1de <currentFloor>,a0
    d092:	|  |      move.l (a0),d0
    d094:	|  |      move.l 232(sp),-(sp)
    d098:	|  |      move.l d0,-(sp)
    d09a:	|  |      jsr 8d0 <put2bytes>
    d0a0:	|  |      addq.l #8,sp
    d0a2:	|  |  ,-- bra.s d0c6 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d0a4:	|  '--|-> move.l 232(sp),88(sp)
    d0aa:	|     |   clr.l 84(sp)
    d0ae:	|     |   move.l 1d0ce <DOSBase>,d0
    d0b4:	|     |   movea.l d0,a6
    d0b6:	|     |   move.l 88(sp),d1
    d0ba:	|     |   move.l 84(sp),d2
    d0be:	|     |   jsr -312(a6)
    d0c2:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d0c6:	|     '-> move.l 232(sp),64(sp)
    d0cc:	|         move.l 1d190 <speechMode>,60(sp)
    d0d4:	|         move.l 1d0ce <DOSBase>,d0
    d0da:	|         movea.l d0,a6
    d0dc:	|         move.l 64(sp),d1
    d0e0:	|         move.l 60(sp),d2
    d0e4:	|         jsr -312(a6)
    d0e8:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d0ec:	|         move.b 1cf94 <fadeMode>,d0
    d0f2:	|         move.b d0,d0
    d0f4:	|         andi.l #255,d0
    d0fa:	|         move.l d0,52(sp)
    d0fe:	|         move.l 232(sp),48(sp)
    d104:	|         move.l 1d0ce <DOSBase>,d0
    d10a:	|         movea.l d0,a6
    d10c:	|         move.l 52(sp),d1
    d110:	|         move.l 48(sp),d2
    d114:	|         jsr -312(a6)
    d118:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d11c:	|         move.l 1d016 <speech>,d0
    d122:	|         move.l 232(sp),-(sp)
    d126:	|         move.l d0,-(sp)
    d128:	|         jsr 458e <saveSpeech>
    d12e:	|         addq.l #8,sp
	saveStatusBars (fp);
    d130:	|         move.l 232(sp),-(sp)
    d134:	|         jsr 8956 <saveStatusBars>
    d13a:	|         addq.l #4,sp
	saveSounds (fp);
    d13c:	|         move.l 232(sp),-(sp)
    d140:	|         jsr d6ea <saveSounds>
    d146:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d148:	|         move.w 1d17a <saveEncoding>,d0
    d14e:	|         move.w d0,d0
    d150:	|         andi.l #65535,d0
    d156:	|         move.l 232(sp),-(sp)
    d15a:	|         move.l d0,-(sp)
    d15c:	|         jsr 8d0 <put2bytes>
    d162:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d164:	|         move.l 1d16c <parallaxStuff>,d0
    d16a:	|         move.l 232(sp),-(sp)
    d16e:	|         move.l d0,-(sp)
    d170:	|         jsr d9ec <saveParallaxRecursive>
    d176:	|         addq.l #8,sp
	FPutC (fp, 0);
    d178:	|         move.l 232(sp),40(sp)
    d17e:	|         clr.l 36(sp)
    d182:	|         move.l 1d0ce <DOSBase>,d0
    d188:	|         movea.l d0,a6
    d18a:	|         move.l 40(sp),d1
    d18e:	|         move.l 36(sp),d2
    d192:	|         jsr -312(a6)
    d196:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d19a:	|         move.l 232(sp),28(sp)
    d1a0:	|         move.l 1ca3a <languageNum>,24(sp)
    d1a8:	|         move.l 1d0ce <DOSBase>,d0
    d1ae:	|         movea.l d0,a6
    d1b0:	|         move.l 28(sp),d1
    d1b4:	|         move.l 24(sp),d2
    d1b8:	|         jsr -312(a6)
    d1bc:	|         move.l d0,20(sp)

	Close(fp);
    d1c0:	|         move.l 232(sp),16(sp)
    d1c6:	|         move.l 1d0ce <DOSBase>,d0
    d1cc:	|         movea.l d0,a6
    d1ce:	|         move.l 16(sp),d1
    d1d2:	|         jsr -36(a6)
    d1d6:	|         move.l d0,12(sp)
	clearStackLib ();
    d1da:	|         jsr c7d6 <clearStackLib>
	return TRUE;
    d1e0:	|         moveq #1,d0
}
    d1e2:	'-------> movem.l (sp)+,d2-d3/a6
    d1e6:	          lea 248(sp),sp
    d1ea:	          rts

0000d1ec <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d1ec:	       lea -12(sp),sp
	int elements = 0;
    d1f0:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d1f4:	       move.l 16(sp),(sp)
	while (search) {
    d1f8:	   ,-- bra.s d204 <saveStack+0x18>
		elements ++;
    d1fa:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d1fe:	|  |   movea.l (sp),a0
    d200:	|  |   move.l 8(a0),(sp)
	while (search) {
    d204:	|  '-> tst.l (sp)
    d206:	'----- bne.s d1fa <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d208:	       move.l 20(sp),-(sp)
    d20c:	       move.l 12(sp),-(sp)
    d210:	       jsr 8d0 <put2bytes>
    d216:	       addq.l #8,sp
	search = vs;
    d218:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d21c:	       clr.l 4(sp)
    d220:	   ,-- bra.s d23c <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d222:	,--|-> move.l (sp),d0
    d224:	|  |   move.l 20(sp),-(sp)
    d228:	|  |   move.l d0,-(sp)
    d22a:	|  |   jsr d378 <saveVariable>
    d230:	|  |   addq.l #8,sp
		search = search -> next;
    d232:	|  |   movea.l (sp),a0
    d234:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d238:	|  |   addq.l #1,4(sp)
    d23c:	|  '-> move.l 4(sp),d0
    d240:	|      cmp.l 8(sp),d0
    d244:	'----- blt.s d222 <saveStack+0x36>
	}
}
    d246:	       nop
    d248:	       nop
    d24a:	       lea 12(sp),sp
    d24e:	       rts

0000d250 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d250:	             lea -44(sp),sp
    d254:	             move.l a6,-(sp)
    d256:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d258:	             move.l 1d152 <stackLib>,48(sp)
	int a = 0;
    d260:	             clr.l 44(sp)
	while (s) {
    d264:	      ,----- bra.s d2c2 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d266:	   ,--|----> movea.l 48(sp),a0
    d26a:	   |  |      move.l (a0),d0
    d26c:	   |  |      cmp.l 56(sp),d0
    d270:	   |  |  ,-- bne.s d2b4 <saveStackRef+0x64>
			FPutC (fp, 1);
    d272:	   |  |  |   move.l 60(sp),16(sp)
    d278:	   |  |  |   moveq #1,d0
    d27a:	   |  |  |   move.l d0,12(sp)
    d27e:	   |  |  |   move.l 1d0ce <DOSBase>,d0
    d284:	   |  |  |   movea.l d0,a6
    d286:	   |  |  |   move.l 16(sp),d1
    d28a:	   |  |  |   move.l 12(sp),d2
    d28e:	   |  |  |   jsr -312(a6)
    d292:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d296:	   |  |  |   move.l 1d14e <stackLibTotal>,d0
    d29c:	   |  |  |   sub.l 44(sp),d0
    d2a0:	   |  |  |   move.l 60(sp),-(sp)
    d2a4:	   |  |  |   move.l d0,-(sp)
    d2a6:	   |  |  |   jsr 8d0 <put2bytes>
    d2ac:	   |  |  |   addq.l #8,sp
			return TRUE;
    d2ae:	   |  |  |   moveq #1,d0
    d2b0:	,--|--|--|-- bra.w d36e <saveStackRef+0x11e>
		}
		s = s -> next;
    d2b4:	|  |  |  '-> movea.l 48(sp),a0
    d2b8:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d2be:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d2c2:	|  |  '----> tst.l 48(sp)
    d2c6:	|  '-------- bne.s d266 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d2c8:	|            move.l 60(sp),40(sp)
    d2ce:	|            clr.l 36(sp)
    d2d2:	|            move.l 1d0ce <DOSBase>,d0
    d2d8:	|            movea.l d0,a6
    d2da:	|            move.l 40(sp),d1
    d2de:	|            move.l 36(sp),d2
    d2e2:	|            jsr -312(a6)
    d2e6:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d2ea:	|            movea.l 56(sp),a0
    d2ee:	|            move.l (a0),d0
    d2f0:	|            move.l 60(sp),-(sp)
    d2f4:	|            move.l d0,-(sp)
    d2f6:	|            jsr d1ec <saveStack>
    d2fc:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d2fe:	|            moveq #8,d0
    d300:	|            move.l d0,28(sp)
    d304:	|            clr.l 24(sp)
    d308:	|            move.l 1d0c6 <SysBase>,d0
    d30e:	|            movea.l d0,a6
    d310:	|            move.l 28(sp),d0
    d314:	|            move.l 24(sp),d1
    d318:	|            jsr -684(a6)
    d31c:	|            move.l d0,20(sp)
    d320:	|            move.l 20(sp),d0
    d324:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d328:	|            move.l 1d14e <stackLibTotal>,d0
    d32e:	|            addq.l #1,d0
    d330:	|            move.l d0,1d14e <stackLibTotal>
	if (! s) {
    d336:	|            tst.l 48(sp)
    d33a:	|        ,-- bne.s d34e <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d33c:	|        |   pea 19b50 <PutChar+0x1836>
    d342:	|        |   jsr 17878 <KPrintF>
    d348:	|        |   addq.l #4,sp
		return FALSE;
    d34a:	|        |   clr.w d0
    d34c:	+--------|-- bra.s d36e <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d34e:	|        '-> move.l 1d152 <stackLib>,d0
    d354:	|            movea.l 48(sp),a0
    d358:	|            move.l d0,4(a0)
	s -> stack = vs;
    d35c:	|            movea.l 48(sp),a0
    d360:	|            move.l 56(sp),(a0)
	stackLib = s;
    d364:	|            move.l 48(sp),1d152 <stackLib>
	return TRUE;
    d36c:	|            moveq #1,d0
}
    d36e:	'----------> move.l (sp)+,d2
    d370:	             movea.l (sp)+,a6
    d372:	             lea 44(sp),sp
    d376:	             rts

0000d378 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d378:	          lea -12(sp),sp
    d37c:	          move.l a6,-(sp)
    d37e:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d380:	          move.l 28(sp),16(sp)
    d386:	          movea.l 24(sp),a0
    d38a:	          move.l (a0),d0
    d38c:	          move.l d0,12(sp)
    d390:	          move.l 1d0ce <DOSBase>,d0
    d396:	          movea.l d0,a6
    d398:	          move.l 16(sp),d1
    d39c:	          move.l 12(sp),d2
    d3a0:	          jsr -312(a6)
    d3a4:	          move.l d0,8(sp)
	switch (from -> varType) {
    d3a8:	          movea.l 24(sp),a0
    d3ac:	          move.l (a0),d0
    d3ae:	          moveq #9,d1
    d3b0:	          cmp.l d0,d1
    d3b2:	      ,-- bcs.w d462 <saveVariable+0xea>
    d3b6:	      |   add.l d0,d0
    d3b8:	      |   movea.l d0,a0
    d3ba:	      |   adda.l #54214,a0
    d3c0:	      |   move.w (a0),d0
    d3c2:	      |   jmp (d3c6 <saveVariable+0x4e>,pc,d0.w)
    d3c6:	      |   ori.l #1310740,(a0)+
    d3cc:	      |   ori.b #20,(20,a0,d0.w)
    d3d2:	      |   .short 0x004c
    d3d4:	      |   ori.b #126,(a4)
    d3d8:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d3dc:	      |   ori.b #40,(a0)+
    d3e0:	      |   ori.b #47,d4
    d3e4:	      |   ori.b #0,(a4)+
    d3e8:	      |   jsr 958 <put4bytes>
    d3ee:	      |   addq.l #8,sp
		return TRUE;
    d3f0:	      |   moveq #1,d0
    d3f2:	,-----|-- bra.w d49e <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d3f6:	|     |   movea.l 24(sp),a0
    d3fa:	|     |   move.l 4(a0),d0
    d3fe:	|     |   move.l 28(sp),-(sp)
    d402:	|     |   move.l d0,-(sp)
    d404:	|     |   jsr bd8 <writeString>
    d40a:	|     |   addq.l #8,sp
		return TRUE;
    d40c:	|     |   moveq #1,d0
    d40e:	+-----|-- bra.w d49e <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d412:	|     |   movea.l 24(sp),a0
    d416:	|     |   move.l 4(a0),d0
    d41a:	|     |   move.l 28(sp),-(sp)
    d41e:	|     |   move.l d0,-(sp)
    d420:	|     |   jsr d250 <saveStackRef>
    d426:	|     |   addq.l #8,sp
    d428:	+-----|-- bra.s d49e <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d42a:	|     |   movea.l 24(sp),a0
    d42e:	|     |   move.l 4(a0),d0
    d432:	|     |   move.l 28(sp),-(sp)
    d436:	|     |   move.l d0,-(sp)
    d438:	|     |   jsr b5c6 <saveCostume>
    d43e:	|     |   addq.l #8,sp
		return FALSE;
    d440:	|     |   clr.w d0
    d442:	+-----|-- bra.s d49e <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d444:	|     |   movea.l 24(sp),a0
    d448:	|     |   move.l 4(a0),d0
    d44c:	|     |   move.l 28(sp),-(sp)
    d450:	|     |   move.l d0,-(sp)
    d452:	|     |   jsr b4fc <saveAnim>
    d458:	|     |   addq.l #8,sp
		return FALSE;
    d45a:	|     |   clr.w d0
    d45c:	+-----|-- bra.s d49e <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d45e:	|     |   clr.w d0
    d460:	+-----|-- bra.s d49e <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d462:	|     '-> movea.l 24(sp),a0
    d466:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d468:	|         moveq #10,d1
    d46a:	|         cmp.l d0,d1
    d46c:	|  ,----- bcs.s d486 <saveVariable+0x10e>
						typeName[from->varType] :
    d46e:	|  |      movea.l 24(sp),a0
    d472:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d474:	|  |      add.l d0,d0
    d476:	|  |      movea.l d0,a1
    d478:	|  |      adda.l d0,a1
    d47a:	|  |      lea 1cf96 <typeName>,a0
    d480:	|  |      move.l (0,a1,a0.l),d0
    d484:	|  |  ,-- bra.s d48c <saveVariable+0x114>
    d486:	|  '--|-> move.l #105333,d0
    d48c:	|     '-> move.l d0,-(sp)
    d48e:	|         pea 19b7c <PutChar+0x1862>
    d494:	|         jsr 17878 <KPrintF>
    d49a:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d49c:	|         moveq #1,d0
    d49e:	'-------> move.l (sp)+,d2
    d4a0:	          movea.l (sp)+,a6
    d4a2:	          lea 12(sp),sp
    d4a6:	          rts

0000d4a8 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d4a8:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d4ac:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d4b4:	          movea.l 4(sp),a0
    d4b8:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d4be:	          movea.l 4(sp),a0
    d4c2:	          move.w 10(a0),d0
    d4c6:	          lsr.w #8,d0
    d4c8:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d4cc:	          movea.l 4(sp),a0
    d4d0:	          move.w 10(a0),d0
    d4d4:	          move.b d0,(sp)

    if(counterx_new)
    d4d6:	,-------- beq.w d57c <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d4da:	|         clr.w d1
    d4dc:	|         move.b (sp),d1
    d4de:	|         move.w 1d15a <counterx_old>,d0
    d4e4:	|         sub.w d0,d1
    d4e6:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d4ea:	|         cmpi.w #128,10(sp)
    d4f0:	|     ,-- blt.s d508 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d4f2:	|     |   move.w #1,1d07c <input+0x4>
            counterx_diff -= 256;    
    d4fa:	|     |   move.w 10(sp),d0
    d4fe:	|     |   addi.w #-256,d0
    d502:	|     |   move.w d0,10(sp)
    d506:	|  ,--|-- bra.s d534 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d508:	|  |  '-> cmpi.w #-129,10(sp)
    d50e:	|  |  ,-- bgt.s d526 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d510:	|  |  |   move.w 10(sp),d0
    d514:	|  |  |   addi.w #256,d0
    d518:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d51c:	|  |  |   move.w #1,1d07c <input+0x4>
    d524:	|  +--|-- bra.s d534 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d526:	|  |  '-> tst.w 10(sp)
    d52a:	|  +----- beq.s d534 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d52c:	|  |      move.w #1,1d07c <input+0x4>
        }

        input.mouseX += counterx_diff;
    d534:	|  '----> move.l 1d082 <input+0xa>,d0
    d53a:	|         movea.w 10(sp),a0
    d53e:	|         add.l a0,d0
    d540:	|         move.l d0,1d082 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d546:	|         move.l 1d082 <input+0xa>,d1
    d54c:	|         move.l 1d01a <winWidth>,d0
    d552:	|         cmp.l d1,d0
    d554:	|     ,-- bge.s d564 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d556:	|     |   move.l 1d01a <winWidth>,d0
    d55c:	|     |   move.l d0,1d082 <input+0xa>
    d562:	|  ,--|-- bra.s d572 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d564:	|  |  '-> move.l 1d082 <input+0xa>,d0
    d56a:	|  +----- bpl.s d572 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d56c:	|  |      clr.l 1d082 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d572:	|  '----> clr.w d0
    d574:	|         move.b (sp),d0
    d576:	|         move.w d0,1d15a <counterx_old>
    }    

    if(countery_new)
    d57c:	'-------> tst.b 1(sp)
    d580:	,-------- beq.w d62a <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d584:	|         clr.w d1
    d586:	|         move.b 1(sp),d1
    d58a:	|         move.w 1d15c <countery_old>,d0
    d590:	|         sub.w d0,d1
    d592:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d596:	|         cmpi.w #128,8(sp)
    d59c:	|     ,-- blt.s d5b4 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d59e:	|     |   move.w #1,1d07c <input+0x4>
            countery_diff -= 256;    
    d5a6:	|     |   move.w 8(sp),d0
    d5aa:	|     |   addi.w #-256,d0
    d5ae:	|     |   move.w d0,8(sp)
    d5b2:	|  ,--|-- bra.s d5e0 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d5b4:	|  |  '-> cmpi.w #-129,8(sp)
    d5ba:	|  |  ,-- bgt.s d5d2 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d5bc:	|  |  |   move.w #1,1d07c <input+0x4>
            countery_diff += 256;
    d5c4:	|  |  |   move.w 8(sp),d0
    d5c8:	|  |  |   addi.w #256,d0
    d5cc:	|  |  |   move.w d0,8(sp)
    d5d0:	|  +--|-- bra.s d5e0 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d5d2:	|  |  '-> tst.w 8(sp)
    d5d6:	|  +----- beq.s d5e0 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d5d8:	|  |      move.w #1,1d07c <input+0x4>
        }

        input.mouseY += countery_diff;
    d5e0:	|  '----> move.l 1d086 <input+0xe>,d0
    d5e6:	|         movea.w 8(sp),a0
    d5ea:	|         add.l a0,d0
    d5ec:	|         move.l d0,1d086 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d5f2:	|         move.l 1d086 <input+0xe>,d1
    d5f8:	|         move.l 1d01e <winHeight>,d0
    d5fe:	|         cmp.l d1,d0
    d600:	|     ,-- bge.s d610 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d602:	|     |   move.l 1d01e <winHeight>,d0
    d608:	|     |   move.l d0,1d086 <input+0xe>
    d60e:	|  ,--|-- bra.s d61e <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d610:	|  |  '-> move.l 1d086 <input+0xe>,d0
    d616:	|  +----- bpl.s d61e <CsiCheckInput+0x176>
            input.mouseY = 0;
    d618:	|  |      clr.l 1d086 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d61e:	|  '----> clr.w d0
    d620:	|         move.b 1(sp),d0
    d624:	|         move.w d0,1d15c <countery_old>
    } 

    input.leftRelease = FALSE;
    d62a:	'-------> clr.w 1d07e <input+0x6>
    input.rightRelease = FALSE;
    d630:	          clr.w 1d080 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d636:	          move.w 1d078 <input>,d0
    d63c:	      ,-- beq.s d662 <CsiCheckInput+0x1ba>
    d63e:	      |   movea.l #12574721,a0
    d644:	      |   move.b (a0),d0
    d646:	      |   move.b d0,d0
    d648:	      |   andi.l #255,d0
    d64e:	      |   moveq #64,d1
    d650:	      |   and.l d1,d0
    d652:	      +-- beq.s d662 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d654:	      |   clr.w 1d078 <input>
        input.leftRelease = TRUE;
    d65a:	      |   move.w #1,1d07e <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d662:	      '-> move.w 1d07a <input+0x2>,d0
    d668:	      ,-- beq.s d690 <CsiCheckInput+0x1e8>
    d66a:	      |   movea.l #14675990,a0
    d670:	      |   move.w (a0),d0
    d672:	      |   move.w d0,d0
    d674:	      |   andi.l #65535,d0
    d67a:	      |   andi.l #1024,d0
    d680:	      +-- beq.s d690 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d682:	      |   clr.w 1d07a <input+0x2>
        input.rightRelease = TRUE;
    d688:	      |   move.w #1,1d080 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d690:	      '-> movea.l #12574721,a0
    d696:	          move.b (a0),d0
    d698:	          move.b d0,d0
    d69a:	          andi.l #255,d0
    d6a0:	          moveq #64,d1
    d6a2:	          and.l d1,d0
    d6a4:	      ,-- bne.s d6ae <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d6a6:	      |   move.w #1,1d078 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d6ae:	      '-> movea.l #14675990,a0
    d6b4:	          move.w (a0),d0
    d6b6:	          move.w d0,d0
    d6b8:	          andi.l #65535,d0
    d6be:	          andi.l #1024,d0
    d6c4:	      ,-- bne.s d6ce <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d6c6:	      |   move.w #1,1d07a <input+0x2>
    }

    d6ce:	      '-> nop
    d6d0:	          lea 12(sp),sp
    d6d4:	          rts

0000d6d6 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d6d6:	moveq #0,d0
}
    d6d8:	rts

0000d6da <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d6da:	nop
    d6dc:	rts

0000d6de <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d6de:	nop
    d6e0:	rts

0000d6e2 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d6e2:	moveq #1,d0
}
    d6e4:	rts

0000d6e6 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d6e6:	nop
    d6e8:	rts

0000d6ea <saveSounds>:

void saveSounds (BPTR fp) {
    d6ea:	lea -12(sp),sp
    d6ee:	move.l a6,-(sp)
    d6f0:	move.l d2,-(sp)
	FPutC (fp,0);
    d6f2:	move.l 24(sp),16(sp)
    d6f8:	clr.l 12(sp)
    d6fc:	move.l 1d0ce <DOSBase>,d0
    d702:	movea.l d0,a6
    d704:	move.l 16(sp),d1
    d708:	move.l 12(sp),d2
    d70c:	jsr -312(a6)
    d710:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d714:	move.l 1ca54 <defSoundVol>,d0
    d71a:	move.l 24(sp),-(sp)
    d71e:	move.l d0,-(sp)
    d720:	jsr 8d0 <put2bytes>
    d726:	addq.l #8,sp
	put2bytes (defVol, fp);
    d728:	move.l 1ca50 <defVol>,d0
    d72e:	move.l 24(sp),-(sp)
    d732:	move.l d0,-(sp)
    d734:	jsr 8d0 <put2bytes>
    d73a:	addq.l #8,sp
}
    d73c:	nop
    d73e:	move.l (sp)+,d2
    d740:	movea.l (sp)+,a6
    d742:	lea 12(sp),sp
    d746:	rts

0000d748 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d748:	move.l 4(sp),1ca50 <defVol>
}
    d750:	nop
    d752:	rts

0000d754 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d754:	move.l 4(sp),1ca54 <defSoundVol>
}
    d75c:	nop
    d75e:	rts

0000d760 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d760:	nop
    d762:	rts

0000d764 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d764:	nop
    d766:	rts

0000d768 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d768:	nop
    d76a:	rts

0000d76c <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d76c:	subq.l #4,sp
    d76e:	move.l 12(sp),d0
    d772:	move.w d0,d0
    d774:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d778:	moveq #1,d0
}
    d77a:	addq.l #4,sp
    d77c:	rts

0000d77e <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d77e:	nop
    d780:	rts

0000d782 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d782:	move.l 16(sp),-(sp)
    d786:	move.l 16(sp),-(sp)
    d78a:	move.l 16(sp),-(sp)
    d78e:	move.l 16(sp),-(sp)
    d792:	jsr e0e <CstBlankScreen>
    d798:	lea 16(sp),sp
}
    d79c:	nop
    d79e:	rts

0000d7a0 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d7a0:	pea 19b9f <PutChar+0x1885>
    d7a6:	jsr 17878 <KPrintF>
    d7ac:	addq.l #4,sp
}
    d7ae:	nop
    d7b0:	rts

0000d7b2 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d7b2:	movea.l 8(sp),a1
    d7b6:	movea.l 12(sp),a0
    d7ba:	move.l 8(sp),d1
    d7be:	move.l 4(sp),d0
    d7c2:	move.l a1,-(sp)
    d7c4:	move.l a0,-(sp)
    d7c6:	move.l d1,-(sp)
    d7c8:	move.l d0,-(sp)
    d7ca:	jsr 4c88 <drawLine>
    d7d0:	lea 16(sp),sp
}
    d7d4:	nop
    d7d6:	rts

0000d7d8 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d7d8:	movea.l 12(sp),a1
    d7dc:	movea.l 4(sp),a0
    d7e0:	move.l 8(sp),d1
    d7e4:	move.l 4(sp),d0
    d7e8:	move.l a1,-(sp)
    d7ea:	move.l a0,-(sp)
    d7ec:	move.l d1,-(sp)
    d7ee:	move.l d0,-(sp)
    d7f0:	jsr 4c88 <drawLine>
    d7f6:	lea 16(sp),sp
}
    d7fa:	nop
    d7fc:	rts

0000d7fe <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d7fe:	pea 19bd8 <PutChar+0x18be>
    d804:	jsr 17878 <KPrintF>
    d80a:	addq.l #4,sp
}
    d80c:	nop
    d80e:	rts

0000d810 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d810:	jsr 1c02 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d816:	pea 1d166 <backdropTextureName>
    d81c:	pea 1 <_start+0x1>
    d820:	jsr 4e0a <deleteTextures>
    d826:	addq.l #8,sp
	backdropTextureName = 0;
    d828:	clr.l 1d166 <backdropTextureName>
	backdropExists = FALSE;
    d82e:	clr.w 1d16a <backdropExists>
}
    d834:	nop
    d836:	rts

0000d838 <killParallax>:

void killParallax () {
    d838:	          lea -12(sp),sp
    d83c:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d83e:	   ,----- bra.s d8aa <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d840:	,--|----> move.l 1d16c <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d848:	|  |      movea.l 12(sp),a0
    d84c:	|  |      move.l 42(a0),d0
    d850:	|  |      move.l d0,1d16c <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d856:	|  |      move.l 12(sp),d0
    d85a:	|  |      addq.l #4,d0
    d85c:	|  |      move.l d0,-(sp)
    d85e:	|  |      pea 1 <_start+0x1>
    d862:	|  |      jsr 4e0a <deleteTextures>
    d868:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d86a:	|  |      movea.l 12(sp),a0
    d86e:	|  |      move.l (a0),d0
    d870:	|  |  ,-- beq.s d88a <killParallax+0x52>
    d872:	|  |  |   movea.l 12(sp),a0
    d876:	|  |  |   move.l (a0),8(sp)
    d87a:	|  |  |   move.l 1d0c6 <SysBase>,d0
    d880:	|  |  |   movea.l d0,a6
    d882:	|  |  |   movea.l 8(sp),a1
    d886:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d88a:	|  |  '-> tst.l 12(sp)
    d88e:	|  |  ,-- beq.s d8a6 <killParallax+0x6e>
    d890:	|  |  |   move.l 12(sp),4(sp)
    d896:	|  |  |   move.l 1d0c6 <SysBase>,d0
    d89c:	|  |  |   movea.l d0,a6
    d89e:	|  |  |   movea.l 4(sp),a1
    d8a2:	|  |  |   jsr -690(a6)
		k = NULL;
    d8a6:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d8aa:	|  '----> move.l 1d16c <parallaxStuff>,d0
    d8b0:	'-------- bne.s d840 <killParallax+0x8>
	}
}
    d8b2:	          nop
    d8b4:	          nop
    d8b6:	          movea.l (sp)+,a6
    d8b8:	          lea 12(sp),sp
    d8bc:	          rts

0000d8be <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d8be:	       move.l 4(sp),-(sp)
    d8c2:	       jsr 7cac <openFileFromNum>
    d8c8:	       addq.l #4,sp
    d8ca:	       tst.l d0
    d8cc:	   ,-- bne.s d8de <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d8ce:	   |   pea 19bf9 <PutChar+0x18df>
    d8d4:	   |   jsr 17878 <KPrintF>
    d8da:	   |   addq.l #4,sp
		return;
    d8dc:	,--|-- bra.s d8fe <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d8de:	|  '-> move.l 1d0ae <bigDataFile>,d0
    d8e4:	|      move.l 12(sp),-(sp)
    d8e8:	|      move.l 12(sp),-(sp)
    d8ec:	|      move.l d0,-(sp)
    d8ee:	|      jsr 1f68 <CstLoadBackdrop>
    d8f4:	|      lea 12(sp),sp
	finishAccess ();
    d8f8:	|      jsr 7ba4 <finishAccess>
	
}
    d8fe:	'----> rts

0000d900 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d900:	subq.l #8,sp
    d902:	movea.l 12(sp),a0
    d906:	move.l 16(sp),d1
    d90a:	move.l 20(sp),d0
    d90e:	movea.w a0,a0
    d910:	move.w a0,6(sp)
    d914:	move.w d1,d1
    d916:	move.w d1,4(sp)
    d91a:	move.w d0,d0
    d91c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d920:	pea 19c48 <PutChar+0x192e>
    d926:	jsr 17878 <KPrintF>
    d92c:	addq.l #4,sp

}
    d92e:	nop
    d930:	addq.l #8,sp
    d932:	rts

0000d934 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d934:	pea 19c6b <PutChar+0x1951>
    d93a:	jsr 17878 <KPrintF>
    d940:	addq.l #4,sp
}
    d942:	nop
    d944:	rts

0000d946 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d946:	pea 1d170 <snapshotTextureName>
    d94c:	pea 1 <_start+0x1>
    d950:	jsr 4e0a <deleteTextures>
    d956:	addq.l #8,sp
	snapshotTextureName = 0;
    d958:	clr.l 1d170 <snapshotTextureName>
}
    d95e:	nop
    d960:	rts

0000d962 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d962:	clr.l 1d17c <cameraX>
	cameraY = 0;
    d968:	clr.l 1d180 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d96e:	move.l 1d162 <sceneHeight>,d0
    d974:	move.l d0,d1
    d976:	move.l 1d15e <sceneWidth>,d0
    d97c:	move.l d1,-(sp)
    d97e:	move.l d0,-(sp)
    d980:	jsr 3c98 <CstReserveBackdrop>
    d986:	addq.l #8,sp
}
    d988:	rts

0000d98a <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d98a:	jsr d810 <killBackDrop>
	killParallax ();
    d990:	jsr d838 <killParallax>
	killZBuffer ();
    d996:	jsr 8bc2 <killZBuffer>
	sceneWidth = x;
    d99c:	move.l 4(sp),d0
    d9a0:	move.l d0,1d15e <sceneWidth>
	sceneHeight = y;
    d9a6:	move.l 8(sp),d0
    d9aa:	move.l d0,1d162 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d9b0:	pea 19ca4 <PutChar+0x198a>
    d9b6:	jsr 17878 <KPrintF>
    d9bc:	addq.l #4,sp
	return reserveBackdrop();
    d9be:	jsr d962 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d9c4:	rts

0000d9c6 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d9c6:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d9c8:	move.l 12(sp),-(sp)
    d9cc:	jsr 6bc <get2bytes>
    d9d2:	addq.l #4,sp
    d9d4:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d9d8:	move.l 12(sp),-(sp)
    d9dc:	jsr 6bc <get2bytes>
    d9e2:	addq.l #4,sp
    d9e4:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d9e6:	moveq #1,d0
}
    d9e8:	addq.l #8,sp
    d9ea:	rts

0000d9ec <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d9ec:	   ,-> lea -12(sp),sp
    d9f0:	   |   move.l a6,-(sp)
    d9f2:	   |   move.l d2,-(sp)
	if (me) {
    d9f4:	   |   tst.l 24(sp)
    d9f8:	,--|-- beq.w da8e <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d9fc:	|  |   movea.l 24(sp),a0
    da00:	|  |   move.l 42(a0),d0
    da04:	|  |   move.l 28(sp),-(sp)
    da08:	|  |   move.l d0,-(sp)
    da0a:	|  '-- jsr d9ec <saveParallaxRecursive>(pc)
    da0e:	|      addq.l #8,sp
		FPutC (fp, 1);
    da10:	|      move.l 28(sp),16(sp)
    da16:	|      moveq #1,d0
    da18:	|      move.l d0,12(sp)
    da1c:	|      move.l 1d0ce <DOSBase>,d0
    da22:	|      movea.l d0,a6
    da24:	|      move.l 16(sp),d1
    da28:	|      move.l 12(sp),d2
    da2c:	|      jsr -312(a6)
    da30:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    da34:	|      movea.l 24(sp),a0
    da38:	|      move.w 28(a0),d0
    da3c:	|      move.w d0,d0
    da3e:	|      andi.l #65535,d0
    da44:	|      move.l 28(sp),-(sp)
    da48:	|      move.l d0,-(sp)
    da4a:	|      jsr 8d0 <put2bytes>
    da50:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    da52:	|      movea.l 24(sp),a0
    da56:	|      move.w 30(a0),d0
    da5a:	|      move.w d0,d0
    da5c:	|      andi.l #65535,d0
    da62:	|      move.l 28(sp),-(sp)
    da66:	|      move.l d0,-(sp)
    da68:	|      jsr 8d0 <put2bytes>
    da6e:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    da70:	|      movea.l 24(sp),a0
    da74:	|      move.w 32(a0),d0
    da78:	|      move.w d0,d0
    da7a:	|      andi.l #65535,d0
    da80:	|      move.l 28(sp),-(sp)
    da84:	|      move.l d0,-(sp)
    da86:	|      jsr 8d0 <put2bytes>
    da8c:	|      addq.l #8,sp
	}
}
    da8e:	'----> nop
    da90:	       move.l (sp)+,d2
    da92:	       movea.l (sp)+,a6
    da94:	       lea 12(sp),sp
    da98:	       rts

0000da9a <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    da9a:	pea 19ccb <PutChar+0x19b1>
    daa0:	jsr 17878 <KPrintF>
    daa6:	addq.l #4,sp
	return TRUE;
    daa8:	moveq #1,d0
    daaa:	rts

0000daac <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    daac:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    daae:	             move.l 1d174 <allObjectTypes>,(sp)

	while (huntType) {
    dab4:	      ,----- bra.s dacc <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    dab6:	   ,--|----> movea.l (sp),a0
    dab8:	   |  |      move.l 4(a0),d0
    dabc:	   |  |      cmp.l 8(sp),d0
    dac0:	   |  |  ,-- bne.s dac6 <findObjectType+0x1a>
    dac2:	   |  |  |   move.l (sp),d0
    dac4:	,--|--|--|-- bra.s dadc <findObjectType+0x30>
		huntType = huntType -> next;
    dac6:	|  |  |  '-> movea.l (sp),a0
    dac8:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    dacc:	|  |  '----> tst.l (sp)
    dace:	|  '-------- bne.s dab6 <findObjectType+0xa>
	}

	return loadObjectType (i);
    dad0:	|            move.l 8(sp),-(sp)
    dad4:	|            jsr db9c <loadObjectType>
    dada:	|            addq.l #4,sp
}
    dadc:	'----------> addq.l #4,sp
    dade:	             rts

0000dae0 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    dae0:	             lea -12(sp),sp
	int i, num = 0;
    dae4:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    dae8:	             move.l 20(sp),-(sp)
    daec:	             jsr daac <findObjectType>
    daf2:	             addq.l #4,sp
    daf4:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    daf6:	             clr.l 8(sp)
    dafa:	   ,-------- bra.s db30 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    dafc:	,--|-------> movea.l (sp),a0
    dafe:	|  |         move.l 38(a0),d1
    db02:	|  |         move.l 8(sp),d0
    db06:	|  |         lsl.l #3,d0
    db08:	|  |         movea.l d1,a0
    db0a:	|  |         adda.l d0,a0
    db0c:	|  |         move.l (a0),d0
    db0e:	|  |         cmp.l 16(sp),d0
    db12:	|  |  ,----- bne.s db2c <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    db14:	|  |  |      movea.l (sp),a0
    db16:	|  |  |      move.l 38(a0),d1
    db1a:	|  |  |      move.l 8(sp),d0
    db1e:	|  |  |      lsl.l #3,d0
    db20:	|  |  |      movea.l d1,a0
    db22:	|  |  |      adda.l d0,a0
    db24:	|  |  |      move.l 4(a0),4(sp)
			break;
    db2a:	|  |  |  ,-- bra.s db3c <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    db2c:	|  |  '--|-> addq.l #1,8(sp)
    db30:	|  '-----|-> movea.l (sp),a0
    db32:	|        |   move.l 16(a0),d0
    db36:	|        |   cmp.l 8(sp),d0
    db3a:	'--------|-- bgt.s dafc <getCombinationFunction+0x1c>
		}
	}

	return num;
    db3c:	         '-> move.l 4(sp),d0
}
    db40:	             lea 12(sp),sp
    db44:	             rts

0000db46 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    db46:	moveq #1,d0
}
    db48:	rts

0000db4a <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    db4a:	subq.l #8,sp
    db4c:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    db4e:	move.l 16(sp),-(sp)
    db52:	jsr 6bc <get2bytes>
    db58:	addq.l #4,sp
    db5a:	move.l d0,-(sp)
    db5c:	jsr db9c <loadObjectType>
    db62:	addq.l #4,sp
    db64:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    db68:	movea.l 8(sp),a0
    db6c:	move.l (a0),4(sp)
    db70:	move.l 1d0c6 <SysBase>,d0
    db76:	movea.l d0,a6
    db78:	movea.l 4(sp),a1
    db7c:	jsr -690(a6)
	r -> screenName = readString (fp);
    db80:	move.l 16(sp),-(sp)
    db84:	jsr b02 <readString>
    db8a:	addq.l #4,sp
    db8c:	movea.l 8(sp),a0
    db90:	move.l d0,(a0)
	return r;
    db92:	move.l 8(sp),d0
}
    db96:	movea.l (sp)+,a6
    db98:	addq.l #8,sp
    db9a:	rts

0000db9c <loadObjectType>:

struct objectType * loadObjectType (int i) {
    db9c:	          lea -84(sp),sp
    dba0:	          move.l a6,-(sp)
    dba2:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    dba4:	          moveq #42,d0
    dba6:	          move.l d0,84(sp)
    dbaa:	          clr.l 80(sp)
    dbae:	          move.l 1d0c6 <SysBase>,d0
    dbb4:	          movea.l d0,a6
    dbb6:	          move.l 84(sp),d0
    dbba:	          move.l 80(sp),d1
    dbbe:	          jsr -684(a6)
    dbc2:	          move.l d0,76(sp)
    dbc6:	          move.l 76(sp),d0
    dbca:	          move.l d0,72(sp)

    if (newType) {
    dbce:	,-------- beq.w de48 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    dbd2:	|         move.l 96(sp),-(sp)
    dbd6:	|         jsr 7d74 <openObjectSlice>
    dbdc:	|         addq.l #4,sp
    dbde:	|         tst.w d0
    dbe0:	+-------- beq.w de48 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    dbe4:	|         move.l 1d0ae <bigDataFile>,d0
    dbea:	|         move.l d0,-(sp)
    dbec:	|         jsr 6bc <get2bytes>
    dbf2:	|         addq.l #4,sp
    dbf4:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    dbf8:	|         move.l 1d0ae <bigDataFile>,64(sp)
    dc00:	|         move.l 1d0ce <DOSBase>,d0
    dc06:	|         movea.l d0,a6
    dc08:	|         move.l 64(sp),d1
    dc0c:	|         jsr -306(a6)
    dc10:	|         move.l d0,60(sp)
    dc14:	|         move.l 60(sp),d0
    dc18:	|         move.l d0,d0
    dc1a:	|         movea.l 72(sp),a0
    dc1e:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    dc22:	|         move.l 1d0ae <bigDataFile>,56(sp)
    dc2a:	|         move.l 1d0ce <DOSBase>,d0
    dc30:	|         movea.l d0,a6
    dc32:	|         move.l 56(sp),d1
    dc36:	|         jsr -306(a6)
    dc3a:	|         move.l d0,52(sp)
    dc3e:	|         move.l 52(sp),d0
    dc42:	|         move.l d0,d0
    dc44:	|         movea.l 72(sp),a0
    dc48:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    dc4c:	|         move.l 1d0ae <bigDataFile>,48(sp)
    dc54:	|         move.l 1d0ce <DOSBase>,d0
    dc5a:	|         movea.l d0,a6
    dc5c:	|         move.l 48(sp),d1
    dc60:	|         jsr -306(a6)
    dc64:	|         move.l d0,44(sp)
    dc68:	|         move.l 44(sp),d0
    dc6c:	|         move.l d0,d0
    dc6e:	|         movea.l 72(sp),a0
    dc72:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    dc76:	|         move.l 1d0ae <bigDataFile>,40(sp)
    dc7e:	|         move.l 1d0ce <DOSBase>,d0
    dc84:	|         movea.l d0,a6
    dc86:	|         move.l 40(sp),d1
    dc8a:	|         jsr -306(a6)
    dc8e:	|         move.l d0,36(sp)
    dc92:	|         move.l 36(sp),d0
    dc96:	|         movea.l 72(sp),a0
    dc9a:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    dc9e:	|         move.l 1d0ae <bigDataFile>,32(sp)
    dca6:	|         move.l 1d0ce <DOSBase>,d0
    dcac:	|         movea.l d0,a6
    dcae:	|         move.l 32(sp),d1
    dcb2:	|         jsr -306(a6)
    dcb6:	|         move.l d0,28(sp)
    dcba:	|         move.l 28(sp),d0
    dcbe:	|         movea.l 72(sp),a0
    dcc2:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    dcc6:	|         move.l 1d0ae <bigDataFile>,d0
    dccc:	|         move.l d0,-(sp)
    dcce:	|         jsr 718 <get4bytes>
    dcd4:	|         addq.l #4,sp
    dcd6:	|         movea.l 72(sp),a0
    dcda:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    dcde:	|         move.l 1d0ae <bigDataFile>,d0
    dce4:	|         move.l d0,-(sp)
    dce6:	|         jsr 6bc <get2bytes>
    dcec:	|         addq.l #4,sp
    dcee:	|         movea.l 72(sp),a0
    dcf2:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    dcf6:	|         move.l 1d0ae <bigDataFile>,24(sp)
    dcfe:	|         move.l 1d0ce <DOSBase>,d0
    dd04:	|         movea.l d0,a6
    dd06:	|         move.l 24(sp),d1
    dd0a:	|         jsr -306(a6)
    dd0e:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    dd12:	|         move.l 1d0ae <bigDataFile>,d0
    dd18:	|         move.l d0,-(sp)
    dd1a:	|         jsr 7d8 <getFloat>
    dd20:	|         addq.l #4,sp
            getFloat(bigDataFile);
    dd22:	|         move.l 1d0ae <bigDataFile>,d0
    dd28:	|         move.l d0,-(sp)
    dd2a:	|         jsr 7d8 <getFloat>
    dd30:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    dd32:	|         move.l 1d0ae <bigDataFile>,d0
    dd38:	|         move.l d0,-(sp)
    dd3a:	|         jsr 6bc <get2bytes>
    dd40:	|         addq.l #4,sp
    dd42:	|         move.l d0,d0
    dd44:	|         movea.l 72(sp),a0
    dd48:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    dd4c:	|         move.l 1d0ae <bigDataFile>,d0
    dd52:	|         move.l d0,-(sp)
    dd54:	|         jsr 6bc <get2bytes>
    dd5a:	|         addq.l #4,sp
    dd5c:	|         movea.l 72(sp),a0
    dd60:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    dd64:	|         movea.l 72(sp),a0
    dd68:	|         move.l 16(a0),d0
    dd6c:	|  ,----- beq.s dd9e <loadObjectType+0x202>
    dd6e:	|  |      movea.l 72(sp),a0
    dd72:	|  |      move.l 16(a0),d0
    dd76:	|  |      lsl.l #3,d0
    dd78:	|  |      move.l d0,16(sp)
    dd7c:	|  |      clr.l 12(sp)
    dd80:	|  |      move.l 1d0c6 <SysBase>,d0
    dd86:	|  |      movea.l d0,a6
    dd88:	|  |      move.l 16(sp),d0
    dd8c:	|  |      move.l 12(sp),d1
    dd90:	|  |      jsr -684(a6)
    dd94:	|  |      move.l d0,8(sp)
    dd98:	|  |      move.l 8(sp),d0
    dd9c:	|  |  ,-- bra.s dda0 <loadObjectType+0x204>
    dd9e:	|  '--|-> moveq #0,d0
    dda0:	|     '-> movea.l 72(sp),a0
    dda4:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    dda8:	|         clr.l 88(sp)
    ddac:	|     ,-- bra.s ddfc <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    ddae:	|  ,--|-> move.l 1d0ae <bigDataFile>,d1
    ddb4:	|  |  |   movea.l 72(sp),a0
    ddb8:	|  |  |   movea.l 38(a0),a0
    ddbc:	|  |  |   move.l 88(sp),d0
    ddc0:	|  |  |   lsl.l #3,d0
    ddc2:	|  |  |   lea (0,a0,d0.l),a2
    ddc6:	|  |  |   move.l d1,-(sp)
    ddc8:	|  |  |   jsr 6bc <get2bytes>
    ddce:	|  |  |   addq.l #4,sp
    ddd0:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    ddd2:	|  |  |   move.l 1d0ae <bigDataFile>,d1
    ddd8:	|  |  |   movea.l 72(sp),a0
    dddc:	|  |  |   movea.l 38(a0),a0
    dde0:	|  |  |   move.l 88(sp),d0
    dde4:	|  |  |   lsl.l #3,d0
    dde6:	|  |  |   lea (0,a0,d0.l),a2
    ddea:	|  |  |   move.l d1,-(sp)
    ddec:	|  |  |   jsr 6bc <get2bytes>
    ddf2:	|  |  |   addq.l #4,sp
    ddf4:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    ddf8:	|  |  |   addq.l #1,88(sp)
    ddfc:	|  |  '-> movea.l 72(sp),a0
    de00:	|  |      move.l 16(a0),d0
    de04:	|  |      cmp.l 88(sp),d0
    de08:	|  '----- bgt.s ddae <loadObjectType+0x212>
            }
            finishAccess();
    de0a:	|         jsr 7ba4 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    de10:	|         move.l 68(sp),-(sp)
    de14:	|         jsr 7bae <getNumberedString>
    de1a:	|         addq.l #4,sp
    de1c:	|         movea.l 72(sp),a0
    de20:	|         move.l d0,(a0)
            newType->objectNum = i;
    de22:	|         movea.l 72(sp),a0
    de26:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    de2c:	|         move.l 1d174 <allObjectTypes>,d0
    de32:	|         movea.l 72(sp),a0
    de36:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    de3a:	|         move.l 72(sp),1d174 <allObjectTypes>
            return newType;
    de42:	|         move.l 72(sp),d0
    de46:	|     ,-- bra.s de4a <loadObjectType+0x2ae>
        }
    }
    return NULL;
    de48:	'-----|-> moveq #0,d0
}
    de4a:	      '-> movea.l (sp)+,a2
    de4c:	          movea.l (sp)+,a6
    de4e:	          lea 84(sp),sp
    de52:	          rts

0000de54 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    de54:	             lea -16(sp),sp
    de58:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    de5a:	             move.l #119156,16(sp)

	while (* huntRegion) {
    de62:	   ,-------- bra.s ded6 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    de64:	,--|-------> movea.l 16(sp),a0
    de68:	|  |         move.l (a0),d0
    de6a:	|  |         cmp.l 24(sp),d0
    de6e:	|  |  ,----- bne.s dec8 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    de70:	|  |  |      movea.l 24(sp),a0
    de74:	|  |  |      move.l 8(a0),d0
    de78:	|  |  |      movea.l 16(sp),a0
    de7c:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    de7e:	|  |  |      movea.l 24(sp),a0
    de82:	|  |  |      move.l 38(a0),12(sp)
    de88:	|  |  |      move.l 1d0c6 <SysBase>,d0
    de8e:	|  |  |      movea.l d0,a6
    de90:	|  |  |      movea.l 12(sp),a1
    de94:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    de98:	|  |  |      movea.l 24(sp),a0
    de9c:	|  |  |      move.l (a0),8(sp)
    dea0:	|  |  |      move.l 1d0c6 <SysBase>,d0
    dea6:	|  |  |      movea.l d0,a6
    dea8:	|  |  |      movea.l 8(sp),a1
    deac:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    deb0:	|  |  |      move.l 24(sp),4(sp)
    deb6:	|  |  |      move.l 1d0c6 <SysBase>,d0
    debc:	|  |  |      movea.l d0,a6
    debe:	|  |  |      movea.l 4(sp),a1
    dec2:	|  |  |      jsr -690(a6)
			return;
    dec6:	|  |  |  ,-- bra.s deec <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    dec8:	|  |  '--|-> movea.l 16(sp),a0
    decc:	|  |     |   move.l (a0),d0
    dece:	|  |     |   move.l d0,d1
    ded0:	|  |     |   addq.l #8,d1
    ded2:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    ded6:	|  '-----|-> movea.l 16(sp),a0
    deda:	|        |   move.l (a0),d0
    dedc:	'--------|-- bne.s de64 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    dede:	         |   pea 19cf2 <PutChar+0x19d8>
    dee4:	         |   jsr 17878 <KPrintF>
    deea:	         |   addq.l #4,sp
}
    deec:	         '-> movea.l (sp)+,a6
    deee:	             lea 16(sp),sp
    def2:	             rts

0000def4 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    def4:	movea.l 4(sp),a0
    def8:	move.l 4(a0),d0
    defc:	move.l 8(sp),-(sp)
    df00:	move.l d0,-(sp)
    df02:	jsr 8d0 <put2bytes>
    df08:	addq.l #8,sp
	writeString (r -> screenName, fp);
    df0a:	movea.l 4(sp),a0
    df0e:	move.l (a0),d0
    df10:	move.l 8(sp),-(sp)
    df14:	move.l d0,-(sp)
    df16:	jsr bd8 <writeString>
    df1c:	addq.l #8,sp
    df1e:	nop
    df20:	rts

0000df22 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    df22:	                         lea -112(sp),sp
    df26:	                         move.l a6,-(sp)
    df28:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    df2a:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    df2e:	                         move.w 1d17a <saveEncoding>,d0
    df34:	                  ,----- beq.s df3e <fileToStack+0x1c>
    df36:	                  |      move.l #105752,d0
    df3c:	                  |  ,-- bra.s df44 <fileToStack+0x22>
    df3e:	                  '--|-> move.l #105778,d0
    df44:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    df48:	                         move.l 124(sp),112(sp)
    df4e:	                         move.l #1005,108(sp)
    df56:	                         move.l 1d0ce <DOSBase>,d0
    df5c:	                         movea.l d0,a6
    df5e:	                         move.l 112(sp),d1
    df62:	                         move.l 108(sp),d2
    df66:	                         jsr -30(a6)
    df6a:	                         move.l d0,104(sp)
    df6e:	                         move.l 104(sp),d0
    df72:	                         move.l d0,100(sp)
    if (!fp) {
    df76:	                     ,-- bne.s df90 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    df78:	                     |   move.l 124(sp),-(sp)
    df7c:	                     |   pea 19d49 <PutChar+0x1a2f>
    df82:	                     |   jsr 17878 <KPrintF>
    df88:	                     |   addq.l #8,sp
        return FALSE;
    df8a:	                     |   clr.w d0
    df8c:	,--------------------|-- bra.w e286 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    df90:	|                    '-> move.w 1d17a <saveEncoding>,d0
    df96:	|                        move.l d0,d0
    df98:	|                        move.b d0,1d178 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    df9e:	|                        move.w 1d17a <saveEncoding>,d0
    dfa4:	|                        lsr.w #8,d0
    dfa6:	|                        move.l d0,d0
    dfa8:	|                        move.b d0,1d179 <encode2>

    while (*checker) {
    dfae:	|                 ,----- bra.s e012 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dfb0:	|              ,--|----> move.l 100(sp),30(sp)
    dfb6:	|              |  |      move.l 1d0ce <DOSBase>,d0
    dfbc:	|              |  |      movea.l d0,a6
    dfbe:	|              |  |      move.l 30(sp),d1
    dfc2:	|              |  |      jsr -306(a6)
    dfc6:	|              |  |      move.l d0,26(sp)
    dfca:	|              |  |      move.l 26(sp),d1
    dfce:	|              |  |      movea.l 116(sp),a0
    dfd2:	|              |  |      move.b (a0),d0
    dfd4:	|              |  |      ext.w d0
    dfd6:	|              |  |      movea.w d0,a0
    dfd8:	|              |  |      cmpa.l d1,a0
    dfda:	|              |  |  ,-- beq.s e00e <fileToStack+0xec>
            Close(fp);
    dfdc:	|              |  |  |   move.l 100(sp),22(sp)
    dfe2:	|              |  |  |   move.l 1d0ce <DOSBase>,d0
    dfe8:	|              |  |  |   movea.l d0,a6
    dfea:	|              |  |  |   move.l 22(sp),d1
    dfee:	|              |  |  |   jsr -36(a6)
    dff2:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    dff6:	|              |  |  |   move.l 124(sp),-(sp)
    dffa:	|              |  |  |   pea 19d56 <PutChar+0x1a3c>
    e000:	|              |  |  |   jsr 17878 <KPrintF>
    e006:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e008:	|              |  |  |   clr.w d0
    e00a:	+--------------|--|--|-- bra.w e286 <fileToStack+0x364>
        }
        checker++;
    e00e:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e012:	|              |  '----> movea.l 116(sp),a0
    e016:	|              |         move.b (a0),d0
    e018:	|              '-------- bne.s dfb0 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e01a:	|                        move.w 1d17a <saveEncoding>,d0
    e020:	|  ,-------------------- beq.s e094 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e022:	|  |                     move.l 100(sp),-(sp)
    e026:	|  |                     jsr e290 <readStringEncoded>
    e02c:	|  |                     addq.l #4,sp
    e02e:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e032:	|  |                     pea 19d97 <PutChar+0x1a7d>
    e038:	|  |                     move.l 100(sp),-(sp)
    e03c:	|  |                     jsr 14244 <strcmp>
    e042:	|  |                     addq.l #8,sp
    e044:	|  |                     tst.l d0
    e046:	|  |                 ,-- beq.s e07a <fileToStack+0x158>
            Close(fp);
    e048:	|  |                 |   move.l 100(sp),88(sp)
    e04e:	|  |                 |   move.l 1d0ce <DOSBase>,d0
    e054:	|  |                 |   movea.l d0,a6
    e056:	|  |                 |   move.l 88(sp),d1
    e05a:	|  |                 |   jsr -36(a6)
    e05e:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e062:	|  |                 |   move.l 124(sp),-(sp)
    e066:	|  |                 |   pea 19da6 <PutChar+0x1a8c>
    e06c:	|  |                 |   jsr 17878 <KPrintF>
    e072:	|  |                 |   addq.l #8,sp
            return FALSE;
    e074:	|  |                 |   clr.w d0
    e076:	+--|-----------------|-- bra.w e286 <fileToStack+0x364>
        }
        FreeVec(checker);
    e07a:	|  |                 '-> move.l 96(sp),92(sp)
    e080:	|  |                     move.l 1d0c6 <SysBase>,d0
    e086:	|  |                     movea.l d0,a6
    e088:	|  |                     movea.l 92(sp),a1
    e08c:	|  |                     jsr -690(a6)
        checker = NULL;
    e090:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e094:	|  >-------------------> move.w 1d17a <saveEncoding>,d0
    e09a:	|  |     ,-------------- beq.w e1ce <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e09e:	|  |     |               move.l 100(sp),76(sp)
    e0a4:	|  |     |               move.l 1d0ce <DOSBase>,d0
    e0aa:	|  |     |               movea.l d0,a6
    e0ac:	|  |     |               move.l 76(sp),d1
    e0b0:	|  |     |               jsr -306(a6)
    e0b4:	|  |     |               move.l d0,72(sp)
    e0b8:	|  |     |               move.l 72(sp),d0
    e0bc:	|  |     |               move.b 1d178 <encode1>,d1
    e0c2:	|  |     |               ext.w d1
    e0c4:	|  |     |               ext.l d1
    e0c6:	|  |     |               move.l d0,d2
    e0c8:	|  |     |               eor.l d1,d2
    e0ca:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e0ce:	|  |     |               moveq #-1,d0
    e0d0:	|  |     |               cmp.l 68(sp),d0
    e0d4:	|  |  ,--|-------------- beq.w e264 <fileToStack+0x342>

            char i = (char) tmp;
    e0d8:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e0de:	|  |  |  |               move.b 67(sp),d0
    e0e2:	|  |  |  |               ext.w d0
    e0e4:	|  |  |  |               movea.w d0,a0
    e0e6:	|  |  |  |               moveq #2,d2
    e0e8:	|  |  |  |               cmp.l a0,d2
    e0ea:	|  |  |  |     ,-------- beq.s e166 <fileToStack+0x244>
    e0ec:	|  |  |  |     |         moveq #2,d0
    e0ee:	|  |  |  |     |         cmp.l a0,d0
    e0f0:	|  |  |  |  ,--|-------- blt.w e19c <fileToStack+0x27a>
    e0f4:	|  |  |  |  |  |         cmpa.w #0,a0
    e0f8:	|  |  |  |  |  |     ,-- beq.s e104 <fileToStack+0x1e2>
    e0fa:	|  |  |  |  |  |     |   moveq #1,d2
    e0fc:	|  |  |  |  |  |     |   cmp.l a0,d2
    e0fe:	|  |  |  |  |  |  ,--|-- beq.s e140 <fileToStack+0x21e>
    e100:	|  |  |  |  +--|--|--|-- bra.w e19c <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e104:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e108:	|  |  |  |  |  |  |      jsr e290 <readStringEncoded>
    e10e:	|  |  |  |  |  |  |      addq.l #4,sp
    e110:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e114:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e118:	|  |  |  |  |  |  |      lea 14(sp),a0
    e11c:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e11e:	|  |  |  |  |  |  |      jsr 14fba <makeTextVar>
    e124:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e126:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e12c:	|  |  |  |  |  |  |      move.l 1d0c6 <SysBase>,d0
    e132:	|  |  |  |  |  |  |      movea.l d0,a6
    e134:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e138:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e13c:	|  |  |  |  |  |  |  ,-- bra.w e1f4 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e140:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e144:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e14a:	|  |  |  |  |  |     |   addq.l #4,sp
    e14c:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e14e:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e152:	|  |  |  |  |  |     |   lea 18(sp),a0
    e156:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e158:	|  |  |  |  |  |     |   jsr 1568a <setVariable>
    e15e:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e162:	|  |  |  |  |  |     +-- bra.w e1f4 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e166:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e16c:	|  |  |  |  |        |   move.l 1d0ce <DOSBase>,d0
    e172:	|  |  |  |  |        |   movea.l d0,a6
    e174:	|  |  |  |  |        |   move.l 62(sp),d1
    e178:	|  |  |  |  |        |   jsr -306(a6)
    e17c:	|  |  |  |  |        |   move.l d0,58(sp)
    e180:	|  |  |  |  |        |   move.l 58(sp),d0
    e184:	|  |  |  |  |        |   move.l d0,-(sp)
    e186:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e18a:	|  |  |  |  |        |   lea 18(sp),a0
    e18e:	|  |  |  |  |        |   move.l a0,-(sp)
    e190:	|  |  |  |  |        |   jsr 1568a <setVariable>
    e196:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e19a:	|  |  |  |  |        +-- bra.s e1f4 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e19c:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e1a0:	|  |  |  |           |   pea 19e28 <PutChar+0x1b0e>
    e1a6:	|  |  |  |           |   jsr 17878 <KPrintF>
    e1ac:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e1ae:	|  |  |  |           |   move.l 100(sp),46(sp)
    e1b4:	|  |  |  |           |   move.l 1d0ce <DOSBase>,d0
    e1ba:	|  |  |  |           |   movea.l d0,a6
    e1bc:	|  |  |  |           |   move.l 46(sp),d1
    e1c0:	|  |  |  |           |   jsr -36(a6)
    e1c4:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e1c8:	|  |  |  |           |   clr.w d0
    e1ca:	+--|--|--|-----------|-- bra.w e286 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e1ce:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e1d2:	|  |  |              |   jsr e356 <readTextPlain>
    e1d8:	|  |  |              |   addq.l #4,sp
    e1da:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e1de:	|  |  |        ,-----|-- beq.w e268 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e1e2:	|  |  |        |     |   move.l 80(sp),-(sp)
    e1e6:	|  |  |        |     |   lea 14(sp),a0
    e1ea:	|  |  |        |     |   move.l a0,-(sp)
    e1ec:	|  |  |        |     |   jsr 14fba <makeTextVar>
    e1f2:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e1f4:	|  |  |        |     '-> movea.l 128(sp),a0
    e1f8:	|  |  |        |         move.l (a0),d0
    e1fa:	|  |  |        |  ,----- bne.s e22a <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e1fc:	|  |  |        |  |      move.l 128(sp),d0
    e200:	|  |  |        |  |      move.l d0,-(sp)
    e202:	|  |  |        |  |      lea 14(sp),a0
    e206:	|  |  |        |  |      move.l a0,-(sp)
    e208:	|  |  |        |  |      jsr 1465a <addVarToStackQuick>
    e20e:	|  |  |        |  |      addq.l #8,sp
    e210:	|  |  |        |  |      tst.w d0
    e212:	|  |  |        |  |  ,-- bne.s e218 <fileToStack+0x2f6>
    e214:	|  |  |        |  |  |   clr.w d0
    e216:	+--|--|--------|--|--|-- bra.s e286 <fileToStack+0x364>
            sH->last = sH->first;
    e218:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e21c:	|  |  |        |  |      move.l (a0),d0
    e21e:	|  |  |        |  |      movea.l 128(sp),a0
    e222:	|  |  |        |  |      move.l d0,4(a0)
    e226:	|  +--|--------|--|----- bra.w e094 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e22a:	|  |  |        |  '----> movea.l 128(sp),a0
    e22e:	|  |  |        |         move.l 4(a0),d0
    e232:	|  |  |        |         addq.l #8,d0
    e234:	|  |  |        |         move.l d0,-(sp)
    e236:	|  |  |        |         lea 14(sp),a0
    e23a:	|  |  |        |         move.l a0,-(sp)
    e23c:	|  |  |        |         jsr 1465a <addVarToStackQuick>
    e242:	|  |  |        |         addq.l #8,sp
    e244:	|  |  |        |         tst.w d0
    e246:	|  |  |        |     ,-- bne.s e24c <fileToStack+0x32a>
    e248:	|  |  |        |     |   clr.w d0
    e24a:	+--|--|--------|-----|-- bra.s e286 <fileToStack+0x364>
            sH->last = sH->last->next;
    e24c:	|  |  |        |     '-> movea.l 128(sp),a0
    e250:	|  |  |        |         movea.l 4(a0),a0
    e254:	|  |  |        |         move.l 8(a0),d0
    e258:	|  |  |        |         movea.l 128(sp),a0
    e25c:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e260:	|  '--|--------|-------- bra.w e094 <fileToStack+0x172>
            if (tmp == -1) break;
    e264:	|     '--------|-------> nop
    e266:	|              |     ,-- bra.s e26a <fileToStack+0x348>
            if (!line) break;
    e268:	|              '-----|-> nop
        }
    }
    Close(fp);
    e26a:	|                    '-> move.l 100(sp),38(sp)
    e270:	|                        move.l 1d0ce <DOSBase>,d0
    e276:	|                        movea.l d0,a6
    e278:	|                        move.l 38(sp),d1
    e27c:	|                        jsr -36(a6)
    e280:	|                        move.l d0,34(sp)
    return TRUE;
    e284:	|                        moveq #1,d0
}
    e286:	'----------------------> move.l (sp)+,d2
    e288:	                         movea.l (sp)+,a6
    e28a:	                         lea 112(sp),sp
    e28e:	                         rts

0000e290 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e290:	          lea -32(sp),sp
    e294:	          move.l a6,-(sp)
    e296:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e298:	          move.l 44(sp),-(sp)
    e29c:	          jsr 6bc <get2bytes>
    e2a2:	          addq.l #4,sp
    e2a4:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e2a8:	          move.l 32(sp),d0
    e2ac:	          addq.l #1,d0
    e2ae:	          move.l d0,28(sp)
    e2b2:	          clr.l 24(sp)
    e2b6:	          move.l 1d0c6 <SysBase>,d0
    e2bc:	          movea.l d0,a6
    e2be:	          move.l 28(sp),d0
    e2c2:	          move.l 24(sp),d1
    e2c6:	          jsr -684(a6)
    e2ca:	          move.l d0,20(sp)
    e2ce:	          move.l 20(sp),d0
    e2d2:	          move.l d0,16(sp)
    if (!s) return NULL;
    e2d6:	      ,-- bne.s e2dc <readStringEncoded+0x4c>
    e2d8:	      |   moveq #0,d0
    e2da:	,-----|-- bra.s e34c <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e2dc:	|     '-> clr.l 36(sp)
    e2e0:	|     ,-- bra.s e332 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e2e2:	|  ,--|-> move.l 44(sp),12(sp)
    e2e8:	|  |  |   move.l 1d0ce <DOSBase>,d0
    e2ee:	|  |  |   movea.l d0,a6
    e2f0:	|  |  |   move.l 12(sp),d1
    e2f4:	|  |  |   jsr -306(a6)
    e2f8:	|  |  |   move.l d0,8(sp)
    e2fc:	|  |  |   move.l 8(sp),d0
    e300:	|  |  |   move.l d0,d1
    e302:	|  |  |   move.b 1d178 <encode1>,d2
    e308:	|  |  |   move.l 36(sp),d0
    e30c:	|  |  |   movea.l 16(sp),a0
    e310:	|  |  |   adda.l d0,a0
    e312:	|  |  |   move.b d1,d0
    e314:	|  |  |   eor.b d2,d0
    e316:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e318:	|  |  |   move.b 1d178 <encode1>,d0
    e31e:	|  |  |   move.b d0,d1
    e320:	|  |  |   move.b 1d179 <encode2>,d0
    e326:	|  |  |   add.b d1,d0
    e328:	|  |  |   move.b d0,1d178 <encode1>
    for (a = 0; a < len; a++) {
    e32e:	|  |  |   addq.l #1,36(sp)
    e332:	|  |  '-> move.l 36(sp),d0
    e336:	|  |      cmp.l 32(sp),d0
    e33a:	|  '----- blt.s e2e2 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e33c:	|         move.l 32(sp),d0
    e340:	|         movea.l 16(sp),a0
    e344:	|         adda.l d0,a0
    e346:	|         clr.b (a0)
    return s;
    e348:	|         move.l 16(sp),d0
}
    e34c:	'-------> move.l (sp)+,d2
    e34e:	          movea.l (sp)+,a6
    e350:	          lea 32(sp),sp
    e354:	          rts

0000e356 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e356:	             lea -104(sp),sp
    e35a:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e35e:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e362:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e368:	             move.l 124(sp),106(sp)
    e36e:	             clr.l 102(sp)
    e372:	             clr.l 98(sp)
    e376:	             move.l 1d0ce <DOSBase>,d0
    e37c:	             movea.l d0,a6
    e37e:	             move.l 106(sp),d1
    e382:	             move.l 102(sp),d2
    e386:	             move.l 98(sp),d3
    e38a:	             jsr -66(a6)
    e38e:	             move.l d0,94(sp)
    e392:	             move.l 94(sp),d0
    e396:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e39a:	   ,-------- bra.s e3de <readTextPlain+0x88>
        tmp = FGetC(fp);
    e39c:	,--|-------> move.l 124(sp),22(sp)
    e3a2:	|  |         move.l 1d0ce <DOSBase>,d0
    e3a8:	|  |         movea.l d0,a6
    e3aa:	|  |         move.l 22(sp),d1
    e3ae:	|  |         jsr -306(a6)
    e3b2:	|  |         move.l d0,18(sp)
    e3b6:	|  |         move.l 18(sp),d0
    e3ba:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e3be:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e3c4:	|  |         cmpi.b #10,17(sp)
    e3ca:	|  |  ,----- beq.s e3d4 <readTextPlain+0x7e>
    e3cc:	|  |  |      moveq #-1,d0
    e3ce:	|  |  |      cmp.l 110(sp),d0
    e3d2:	|  |  |  ,-- bne.s e3da <readTextPlain+0x84>
            keepGoing = FALSE;
    e3d4:	|  |  '--|-> clr.w 114(sp)
    e3d8:	|  +-----|-- bra.s e3de <readTextPlain+0x88>
        } else {
            stringSize++;
    e3da:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e3de:	|  '-------> tst.w 114(sp)
    e3e2:	'----------- bne.s e39c <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e3e4:	             tst.l 116(sp)
    e3e8:	         ,-- bne.s e3f8 <readTextPlain+0xa2>
    e3ea:	         |   moveq #-1,d0
    e3ec:	         |   cmp.l 110(sp),d0
    e3f0:	         +-- bne.s e3f8 <readTextPlain+0xa2>
        return NULL;
    e3f2:	         |   moveq #0,d0
    e3f4:	      ,--|-- bra.w e4de <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e3f8:	      |  '-> move.l 124(sp),86(sp)
    e3fe:	      |      move.l 90(sp),82(sp)
    e404:	      |      moveq #-1,d0
    e406:	      |      move.l d0,78(sp)
    e40a:	      |      move.l 1d0ce <DOSBase>,d0
    e410:	      |      movea.l d0,a6
    e412:	      |      move.l 86(sp),d1
    e416:	      |      move.l 82(sp),d2
    e41a:	      |      move.l 78(sp),d3
    e41e:	      |      jsr -66(a6)
    e422:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e426:	      |      move.l 116(sp),d0
    e42a:	      |      addq.l #1,d0
    e42c:	      |      move.l d0,70(sp)
    e430:	      |      clr.l 66(sp)
    e434:	      |      move.l 1d0c6 <SysBase>,d0
    e43a:	      |      movea.l d0,a6
    e43c:	      |      move.l 70(sp),d0
    e440:	      |      move.l 66(sp),d1
    e444:	      |      jsr -684(a6)
    e448:	      |      move.l d0,62(sp)
    e44c:	      |      move.l 62(sp),d0
    e450:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e454:	      |  ,-- bne.s e45c <readTextPlain+0x106>
    e456:	      |  |   moveq #0,d0
    e458:	      +--|-- bra.w e4de <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e45c:	      |  '-> move.l 124(sp),54(sp)
    e462:	      |      move.l 58(sp),50(sp)
    e468:	      |      moveq #1,d0
    e46a:	      |      move.l d0,46(sp)
    e46e:	      |      move.l 116(sp),42(sp)
    e474:	      |      move.l 1d0ce <DOSBase>,d0
    e47a:	      |      movea.l d0,a6
    e47c:	      |      move.l 54(sp),d1
    e480:	      |      move.l 50(sp),d2
    e484:	      |      move.l 46(sp),d3
    e488:	      |      move.l 42(sp),d4
    e48c:	      |      jsr -324(a6)
    e490:	      |      move.l d0,38(sp)
    e494:	      |      move.l 38(sp),d0
    e498:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e49c:	      |      move.l 34(sp),d0
    e4a0:	      |      cmp.l 116(sp),d0
    e4a4:	      |  ,-- beq.s e4b4 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e4a6:	      |  |   pea 19e5d <PutChar+0x1b43>
    e4ac:	      |  |   jsr 17878 <KPrintF>
    e4b2:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e4b4:	      |  '-> move.l 124(sp),30(sp)
    e4ba:	      |      move.l 1d0ce <DOSBase>,d0
    e4c0:	      |      movea.l d0,a6
    e4c2:	      |      move.l 30(sp),d1
    e4c6:	      |      jsr -306(a6)
    e4ca:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e4ce:	      |      move.l 116(sp),d0
    e4d2:	      |      movea.l 58(sp),a0
    e4d6:	      |      adda.l d0,a0
    e4d8:	      |      clr.b (a0)
    }

    return reply;
    e4da:	      |      move.l 58(sp),d0
}
    e4de:	      '----> movem.l (sp)+,d2-d4/a6
    e4e2:	             lea 104(sp),sp
    e4e6:	             rts

0000e4e8 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e4e8:	                      lea -144(sp),sp
    e4ec:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e4f0:	                      move.l 160(sp),148(sp)
    e4f6:	                      move.l #1006,144(sp)
    e4fe:	                      move.l 1d0ce <DOSBase>,d0
    e504:	                      movea.l d0,a6
    e506:	                      move.l 148(sp),d1
    e50a:	                      move.l 144(sp),d2
    e50e:	                      jsr -30(a6)
    e512:	                      move.l d0,140(sp)
    e516:	                      move.l 140(sp),d0
    e51a:	                      move.l d0,136(sp)

    if (!fp) {
    e51e:	                  ,-- bne.s e538 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e520:	                  |   move.l 160(sp),-(sp)
    e524:	                  |   pea 19e7e <PutChar+0x1b64>
    e52a:	                  |   jsr 17878 <KPrintF>
    e530:	                  |   addq.l #8,sp
        return FALSE;
    e532:	                  |   clr.w d0
    e534:	,-----------------|-- bra.w e7f4 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e538:	|                 '-> movea.l 164(sp),a0
    e53c:	|                     movea.l 4(a0),a0
    e540:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e544:	|                     move.w 1d17a <saveEncoding>,d0
    e54a:	|                     move.l d0,d0
    e54c:	|                     move.b d0,1d178 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e552:	|                     move.w 1d17a <saveEncoding>,d0
    e558:	|                     lsr.w #8,d0
    e55a:	|                     move.l d0,d0
    e55c:	|                     move.b d0,1d179 <encode2>

    if (saveEncoding) {
    e562:	|                     move.w 1d17a <saveEncoding>,d0
    e568:	|                 ,-- beq.s e5ba <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e56a:	|                 |   move.l 136(sp),116(sp)
    e570:	|                 |   move.l #105752,112(sp)
    e578:	|                 |   moveq #99,d0
    e57a:	|                 |   not.b d0
    e57c:	|                 |   add.l sp,d0
    e57e:	|                 |   addi.l #-144,d0
    e584:	|                 |   move.l d0,108(sp)
    e588:	|                 |   move.l 1d0ce <DOSBase>,d0
    e58e:	|                 |   movea.l d0,a6
    e590:	|                 |   move.l 116(sp),d1
    e594:	|                 |   move.l 112(sp),d2
    e598:	|                 |   move.l 108(sp),d3
    e59c:	|                 |   jsr -354(a6)
    e5a0:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e5a4:	|                 |   move.l 136(sp),-(sp)
    e5a8:	|                 |   pea 19d97 <PutChar+0x1a7d>
    e5ae:	|                 |   jsr e7fe <writeStringEncoded>
    e5b4:	|                 |   addq.l #8,sp
    e5b6:	|  ,--------------|-- bra.w e7cc <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e5ba:	|  |              '-> move.l 136(sp),132(sp)
    e5c0:	|  |                  move.l #105778,128(sp)
    e5c8:	|  |                  moveq #99,d1
    e5ca:	|  |                  not.b d1
    e5cc:	|  |                  add.l sp,d1
    e5ce:	|  |                  addi.l #-144,d1
    e5d4:	|  |                  move.l d1,124(sp)
    e5d8:	|  |                  move.l 1d0ce <DOSBase>,d0
    e5de:	|  |                  movea.l d0,a6
    e5e0:	|  |                  move.l 132(sp),d1
    e5e4:	|  |                  move.l 128(sp),d2
    e5e8:	|  |                  move.l 124(sp),d3
    e5ec:	|  |                  jsr -354(a6)
    e5f0:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e5f4:	|  +----------------- bra.w e7cc <stackToFile+0x2e4>
        if (saveEncoding) {
    e5f8:	|  |  ,-------------> move.w 1d17a <saveEncoding>,d0
    e5fe:	|  |  |     ,-------- beq.w e750 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e602:	|  |  |     |         movea.l 152(sp),a0
    e606:	|  |  |     |         move.l (a0),d0
    e608:	|  |  |     |         moveq #1,d1
    e60a:	|  |  |     |         cmp.l d0,d1
    e60c:	|  |  |     |     ,-- beq.s e65c <stackToFile+0x174>
    e60e:	|  |  |     |     |   moveq #3,d1
    e610:	|  |  |     |     |   cmp.l d0,d1
    e612:	|  |  |     |  ,--|-- bne.w e71e <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e616:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e61c:	|  |  |     |  |  |   move.b 1d178 <encode1>,d0
    e622:	|  |  |     |  |  |   ext.w d0
    e624:	|  |  |     |  |  |   movea.w d0,a0
    e626:	|  |  |     |  |  |   move.l a0,72(sp)
    e62a:	|  |  |     |  |  |   move.l 1d0ce <DOSBase>,d0
    e630:	|  |  |     |  |  |   movea.l d0,a6
    e632:	|  |  |     |  |  |   move.l 76(sp),d1
    e636:	|  |  |     |  |  |   move.l 72(sp),d2
    e63a:	|  |  |     |  |  |   jsr -312(a6)
    e63e:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e642:	|  |  |     |  |  |   movea.l 152(sp),a0
    e646:	|  |  |     |  |  |   move.l 4(a0),d0
    e64a:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e64e:	|  |  |     |  |  |   move.l d0,-(sp)
    e650:	|  |  |     |  |  |   jsr e7fe <writeStringEncoded>
    e656:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e658:	|  |  |  ,--|--|--|-- bra.w e7c2 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e65c:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e660:	|  |  |  |  |  |      move.l 4(a0),d0
    e664:	|  |  |  |  |  |  ,-- bmi.s e6d4 <stackToFile+0x1ec>
    e666:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e66a:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e66e:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e674:	|  |  |  |  |  |  +-- bgt.s e6d4 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e676:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e67c:	|  |  |  |  |  |  |   move.b 1d178 <encode1>,d0
    e682:	|  |  |  |  |  |  |   eori.b #2,d0
    e686:	|  |  |  |  |  |  |   ext.w d0
    e688:	|  |  |  |  |  |  |   movea.w d0,a0
    e68a:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e68e:	|  |  |  |  |  |  |   move.l 1d0ce <DOSBase>,d0
    e694:	|  |  |  |  |  |  |   movea.l d0,a6
    e696:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e69a:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e69e:	|  |  |  |  |  |  |   jsr -312(a6)
    e6a2:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e6a6:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e6ac:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e6b0:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e6b6:	|  |  |  |  |  |  |   move.l 1d0ce <DOSBase>,d0
    e6bc:	|  |  |  |  |  |  |   movea.l d0,a6
    e6be:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e6c2:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e6c6:	|  |  |  |  |  |  |   jsr -312(a6)
    e6ca:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e6ce:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e6d0:	|  |  |  +--|--|--|-- bra.w e7c2 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e6d4:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e6da:	|  |  |  |  |  |      move.b 1d178 <encode1>,d0
    e6e0:	|  |  |  |  |  |      eori.b #1,d0
    e6e4:	|  |  |  |  |  |      ext.w d0
    e6e6:	|  |  |  |  |  |      movea.w d0,a0
    e6e8:	|  |  |  |  |  |      move.l a0,36(sp)
    e6ec:	|  |  |  |  |  |      move.l 1d0ce <DOSBase>,d0
    e6f2:	|  |  |  |  |  |      movea.l d0,a6
    e6f4:	|  |  |  |  |  |      move.l 40(sp),d1
    e6f8:	|  |  |  |  |  |      move.l 36(sp),d2
    e6fc:	|  |  |  |  |  |      jsr -312(a6)
    e700:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e704:	|  |  |  |  |  |      movea.l 152(sp),a0
    e708:	|  |  |  |  |  |      move.l 4(a0),d0
    e70c:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e710:	|  |  |  |  |  |      move.l d0,-(sp)
    e712:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e718:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e71a:	|  |  |  +--|--|----- bra.w e7c2 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e71e:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e722:	|  |  |  |  |         pea 19e90 <PutChar+0x1b76>
    e728:	|  |  |  |  |         jsr 17878 <KPrintF>
    e72e:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e730:	|  |  |  |  |         move.l 136(sp),28(sp)
    e736:	|  |  |  |  |         move.l 1d0ce <DOSBase>,d0
    e73c:	|  |  |  |  |         movea.l d0,a6
    e73e:	|  |  |  |  |         move.l 28(sp),d1
    e742:	|  |  |  |  |         jsr -36(a6)
    e746:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e74a:	|  |  |  |  |         clr.w d0
    e74c:	+--|--|--|--|-------- bra.w e7f4 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e750:	|  |  |  |  '-------> move.l 152(sp),d0
    e754:	|  |  |  |            move.l d0,-(sp)
    e756:	|  |  |  |            jsr 1536e <getTextFromAnyVar>
    e75c:	|  |  |  |            addq.l #4,sp
    e75e:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e762:	|  |  |  |     ,----- beq.s e7d6 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e764:	|  |  |  |     |      movea.l 100(sp),a0
    e768:	|  |  |  |     |      move.b (a0),d0
    e76a:	|  |  |  |     |      ext.w d0
    e76c:	|  |  |  |     |      movea.w d0,a0
    e76e:	|  |  |  |     |      move.l a0,12(sp)
    e772:	|  |  |  |     |      move.l 136(sp),96(sp)
    e778:	|  |  |  |     |      move.l #106220,92(sp)
    e780:	|  |  |  |     |      moveq #99,d0
    e782:	|  |  |  |     |      not.b d0
    e784:	|  |  |  |     |      add.l sp,d0
    e786:	|  |  |  |     |      addi.l #-144,d0
    e78c:	|  |  |  |     |      move.l d0,88(sp)
    e790:	|  |  |  |     |      move.l 1d0ce <DOSBase>,d0
    e796:	|  |  |  |     |      movea.l d0,a6
    e798:	|  |  |  |     |      move.l 96(sp),d1
    e79c:	|  |  |  |     |      move.l 92(sp),d2
    e7a0:	|  |  |  |     |      move.l 88(sp),d3
    e7a4:	|  |  |  |     |      jsr -354(a6)
    e7a8:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e7ac:	|  |  |  |     |      move.l 100(sp),80(sp)
    e7b2:	|  |  |  |     |      move.l 1d0c6 <SysBase>,d0
    e7b8:	|  |  |  |     |      movea.l d0,a6
    e7ba:	|  |  |  |     |      movea.l 80(sp),a1
    e7be:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e7c2:	|  |  |  '-----|----> movea.l 152(sp),a0
    e7c6:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e7cc:	|  '--|--------|----> tst.l 152(sp)
    e7d0:	|     '--------|----- bne.w e5f8 <stackToFile+0x110>
    e7d4:	|              |  ,-- bra.s e7d8 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e7d6:	|              '--|-> nop
    }
    Close(fp);
    e7d8:	|                 '-> move.l 136(sp),20(sp)
    e7de:	|                     move.l 1d0ce <DOSBase>,d0
    e7e4:	|                     movea.l d0,a6
    e7e6:	|                     move.l 20(sp),d1
    e7ea:	|                     jsr -36(a6)
    e7ee:	|                     move.l d0,16(sp)
    return TRUE;
    e7f2:	|                     moveq #1,d0
}
    e7f4:	'-------------------> movem.l (sp)+,d2-d3/a6
    e7f8:	                      lea 144(sp),sp
    e7fc:	                      rts

0000e7fe <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e7fe:	       lea -20(sp),sp
    e802:	       move.l a6,-(sp)
    e804:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e806:	       move.l 32(sp),-(sp)
    e80a:	       jsr 14284 <strlen>
    e810:	       addq.l #4,sp
    e812:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e816:	       move.l 36(sp),-(sp)
    e81a:	       move.l 24(sp),-(sp)
    e81e:	       jsr 8d0 <put2bytes>
    e824:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e826:	       clr.l 24(sp)
    e82a:	   ,-- bra.s e880 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e82c:	,--|-> move.l 36(sp),16(sp)
    e832:	|  |   move.l 24(sp),d0
    e836:	|  |   movea.l 32(sp),a0
    e83a:	|  |   adda.l d0,a0
    e83c:	|  |   move.b (a0),d1
    e83e:	|  |   move.b 1d178 <encode1>,d0
    e844:	|  |   eor.b d1,d0
    e846:	|  |   ext.w d0
    e848:	|  |   movea.w d0,a0
    e84a:	|  |   move.l a0,12(sp)
    e84e:	|  |   move.l 1d0ce <DOSBase>,d0
    e854:	|  |   movea.l d0,a6
    e856:	|  |   move.l 16(sp),d1
    e85a:	|  |   move.l 12(sp),d2
    e85e:	|  |   jsr -312(a6)
    e862:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e866:	|  |   move.b 1d178 <encode1>,d0
    e86c:	|  |   move.b d0,d1
    e86e:	|  |   move.b 1d179 <encode2>,d0
    e874:	|  |   add.b d1,d0
    e876:	|  |   move.b d0,1d178 <encode1>
	for (a = 0; a < len; a ++) {
    e87c:	|  |   addq.l #1,24(sp)
    e880:	|  '-> move.l 24(sp),d0
    e884:	|      cmp.l 20(sp),d0
    e888:	'----- blt.s e82c <writeStringEncoded+0x2e>
	}
}
    e88a:	       nop
    e88c:	       nop
    e88e:	       move.l (sp)+,d2
    e890:	       movea.l (sp)+,a6
    e892:	       lea 20(sp),sp
    e896:	       rts

0000e898 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e898:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e89a:	                   tst.l 8(sp)
    e89e:	               ,-- bne.s e8a4 <failSecurityCheck+0xc>
    e8a0:	               |   moveq #1,d0
    e8a2:	,--------------|-- bra.s e922 <failSecurityCheck+0x8a>

	int a = 0;
    e8a4:	|              '-> clr.l (sp)

	while (fn[a]) {
    e8a6:	|     ,----------- bra.s e914 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e8a8:	|  ,--|----------> move.l (sp),d0
    e8aa:	|  |  |            movea.l 8(sp),a0
    e8ae:	|  |  |            adda.l d0,a0
    e8b0:	|  |  |            move.b (a0),d0
    e8b2:	|  |  |            ext.w d0
    e8b4:	|  |  |            movea.w d0,a0
    e8b6:	|  |  |            moveq #124,d0
    e8b8:	|  |  |            cmp.l a0,d0
    e8ba:	|  |  |     ,----- beq.s e8fc <failSecurityCheck+0x64>
    e8bc:	|  |  |     |      moveq #124,d1
    e8be:	|  |  |     |      cmp.l a0,d1
    e8c0:	|  |  |  ,--|----- blt.s e912 <failSecurityCheck+0x7a>
    e8c2:	|  |  |  |  |      moveq #92,d0
    e8c4:	|  |  |  |  |      cmp.l a0,d0
    e8c6:	|  |  |  |  +----- beq.s e8fc <failSecurityCheck+0x64>
    e8c8:	|  |  |  |  |      moveq #92,d1
    e8ca:	|  |  |  |  |      cmp.l a0,d1
    e8cc:	|  |  |  +--|----- blt.s e912 <failSecurityCheck+0x7a>
    e8ce:	|  |  |  |  |      moveq #60,d0
    e8d0:	|  |  |  |  |      cmp.l a0,d0
    e8d2:	|  |  |  |  |  ,-- blt.s e8f2 <failSecurityCheck+0x5a>
    e8d4:	|  |  |  |  |  |   moveq #34,d1
    e8d6:	|  |  |  |  |  |   cmp.l a0,d1
    e8d8:	|  |  |  +--|--|-- bgt.s e912 <failSecurityCheck+0x7a>
    e8da:	|  |  |  |  |  |   moveq #-34,d1
    e8dc:	|  |  |  |  |  |   add.l a0,d1
    e8de:	|  |  |  |  |  |   move.l #83894529,d0
    e8e4:	|  |  |  |  |  |   lsr.l d1,d0
    e8e6:	|  |  |  |  |  |   moveq #1,d1
    e8e8:	|  |  |  |  |  |   and.l d1,d0
    e8ea:	|  |  |  |  |  |   sne d0
    e8ec:	|  |  |  |  |  |   neg.b d0
    e8ee:	|  |  |  |  +--|-- bne.s e8fc <failSecurityCheck+0x64>
    e8f0:	|  |  |  +--|--|-- bra.s e912 <failSecurityCheck+0x7a>
    e8f2:	|  |  |  |  |  '-> lea -62(a0),a0
    e8f6:	|  |  |  |  |      moveq #1,d0
    e8f8:	|  |  |  |  |      cmp.l a0,d0
    e8fa:	|  |  |  +--|----- bcs.s e912 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e8fc:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e900:	|  |  |  |         pea 19ef0 <PutChar+0x1bd6>
    e906:	|  |  |  |         jsr 17878 <KPrintF>
    e90c:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e90e:	|  |  |  |         moveq #1,d0
    e910:	+--|--|--|-------- bra.s e922 <failSecurityCheck+0x8a>
		}
		a++;
    e912:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e914:	|  |  '----------> move.l (sp),d0
    e916:	|  |               movea.l 8(sp),a0
    e91a:	|  |               adda.l d0,a0
    e91c:	|  |               move.b (a0),d0
    e91e:	|  '-------------- bne.s e8a8 <failSecurityCheck+0x10>
	}
	return FALSE;
    e920:	|                  clr.w d0
}
    e922:	'----------------> addq.l #4,sp
    e924:	                   rts

0000e926 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e926:	             lea -24(sp),sp
    e92a:	             move.l a6,-(sp)
    e92c:	             move.l 40(sp),d0
    e930:	             move.w d0,d0
    e932:	             move.w d0,6(sp)
	int fileNum = -1;
    e936:	             moveq #-1,d0
    e938:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e93c:	             jsr 6fbc <killSpeechTimers>

	switch (numParams) {
    e942:	             moveq #2,d0
    e944:	             cmp.l 32(sp),d0
    e948:	      ,----- beq.s e98c <sayCore+0x66>
    e94a:	      |      moveq #3,d0
    e94c:	      |      cmp.l 32(sp),d0
    e950:	,-----|----- bne.w ea6e <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e954:	|     |      movea.l 36(sp),a0
    e958:	|     |      move.l 24(a0),d0
    e95c:	|     |      move.l d0,-(sp)
    e95e:	|     |      pea 5 <_start+0x5>
    e962:	|     |      lea 20(sp),a0
    e966:	|     |      move.l a0,-(sp)
    e968:	|     |      jsr 14d98 <getValueType>
    e96e:	|     |      lea 12(sp),sp
    e972:	|     |      tst.w d0
    e974:	|     |  ,-- bne.s e97c <sayCore+0x56>
    e976:	|     |  |   moveq #1,d0
    e978:	|  ,--|--|-- bra.w ea7e <sayCore+0x158>
			trimStack (&fun -> stack);
    e97c:	|  |  |  '-> moveq #24,d0
    e97e:	|  |  |      add.l 36(sp),d0
    e982:	|  |  |      move.l d0,-(sp)
    e984:	|  |  |      jsr 1571c <trimStack>
    e98a:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e98c:	|  |  '----> movea.l 36(sp),a0
    e990:	|  |         move.l 24(a0),d0
    e994:	|  |         move.l d0,-(sp)
    e996:	|  |         jsr 1536e <getTextFromAnyVar>
    e99c:	|  |         addq.l #4,sp
    e99e:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e9a2:	|  |     ,-- bne.s e9aa <sayCore+0x84>
    e9a4:	|  |     |   moveq #1,d0
    e9a6:	|  +-----|-- bra.w ea7e <sayCore+0x158>
			trimStack (&fun -> stack);
    e9aa:	|  |     '-> moveq #24,d0
    e9ac:	|  |         add.l 36(sp),d0
    e9b0:	|  |         move.l d0,-(sp)
    e9b2:	|  |         jsr 1571c <trimStack>
    e9b8:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e9ba:	|  |         movea.l 36(sp),a0
    e9be:	|  |         move.l 24(a0),d0
    e9c2:	|  |         move.l d0,-(sp)
    e9c4:	|  |         pea 7 <_start+0x7>
    e9c8:	|  |         lea 16(sp),a0
    e9cc:	|  |         move.l a0,-(sp)
    e9ce:	|  |         jsr 14d98 <getValueType>
    e9d4:	|  |         lea 12(sp),sp
    e9d8:	|  |         tst.w d0
    e9da:	|  |     ,-- bne.s e9e2 <sayCore+0xbc>
    e9dc:	|  |     |   moveq #1,d0
    e9de:	|  +-----|-- bra.w ea7e <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e9e2:	|  |     '-> movea.l 36(sp),a0
    e9e6:	|  |         move.l 24(a0),d0
    e9ea:	|  |         move.l d0,-(sp)
    e9ec:	|  |         pea 7 <_start+0x7>
    e9f0:	|  |         lea 16(sp),a0
    e9f4:	|  |         move.l a0,-(sp)
    e9f6:	|  |         jsr 14d98 <getValueType>
    e9fc:	|  |         lea 12(sp),sp
    ea00:	|  |         tst.w d0
    ea02:	|  |     ,-- bne.s ea08 <sayCore+0xe2>
    ea04:	|  |     |   moveq #1,d0
    ea06:	|  +-----|-- bra.s ea7e <sayCore+0x158>
			trimStack (&fun -> stack);
    ea08:	|  |     '-> moveq #24,d0
    ea0a:	|  |         add.l 36(sp),d0
    ea0e:	|  |         move.l d0,-(sp)
    ea10:	|  |         jsr 1571c <trimStack>
    ea16:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ea18:	|  |         movea.w 6(sp),a0
    ea1c:	|  |         move.l 12(sp),d1
    ea20:	|  |         move.l 8(sp),d0
    ea24:	|  |         move.l a0,-(sp)
    ea26:	|  |         move.l d1,-(sp)
    ea28:	|  |         move.l d0,-(sp)
    ea2a:	|  |         move.l 36(sp),-(sp)
    ea2e:	|  |         jsr 4724 <wrapSpeech>
    ea34:	|  |         lea 16(sp),sp
    ea38:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ea3c:	|  |         movea.l 36(sp),a0
    ea40:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    ea46:	|  |         movea.l 36(sp),a0
    ea4a:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    ea50:	|  |         move.l 24(sp),16(sp)
    ea56:	|  |         move.l 1d0c6 <SysBase>,d0
    ea5c:	|  |         movea.l d0,a6
    ea5e:	|  |         movea.l 16(sp),a1
    ea62:	|  |         jsr -690(a6)
			newText = NULL;
    ea66:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    ea6a:	|  |         moveq #0,d0
    ea6c:	|  +-------- bra.s ea7e <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    ea6e:	'--|-------> pea 19f76 <PutChar+0x1c5c>
    ea74:	   |         jsr 17878 <KPrintF>
    ea7a:	   |         addq.l #4,sp
	return BR_ERROR;
    ea7c:	   |         moveq #1,d0
}
    ea7e:	   '-------> movea.l (sp)+,a6
    ea80:	             lea 24(sp),sp
    ea84:	             rts

0000ea86 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    ea86:	pea 1 <_start+0x1>
    ea8a:	move.l 12(sp),-(sp)
    ea8e:	move.l 12(sp),-(sp)
    ea92:	jsr e926 <sayCore>
    ea98:	lea 12(sp),sp
}
    ea9c:	rts

0000ea9e <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    ea9e:	clr.l -(sp)
    eaa0:	move.l 12(sp),-(sp)
    eaa4:	move.l 12(sp),-(sp)
    eaa8:	jsr e926 <sayCore>
    eaae:	lea 12(sp),sp
}
    eab2:	rts

0000eab4 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    eab4:	jsr 15764 <freeze>
	freezeSubs (); 
    eaba:	jsr 65ac <freezeSubs>
	fun -> freezerLevel = 0;
    eac0:	movea.l 8(sp),a0
    eac4:	clr.b 56(a0)
	return BR_CONTINUE;
    eac8:	moveq #2,d0
}
    eaca:	rts

0000eacc <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    eacc:	jsr 15968 <unfreeze>
	unfreezeSubs (); 
    ead2:	jsr 7b72 <unfreezeSubs>
	return BR_CONTINUE;
    ead8:	moveq #2,d0
}
    eada:	rts

0000eadc <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    eadc:	jsr 15944 <howFrozen>
    eae2:	move.l d0,d1
    eae4:	moveq #28,d0
    eae6:	add.l 8(sp),d0
    eaea:	move.l d1,-(sp)
    eaec:	pea 1 <_start+0x1>
    eaf0:	move.l d0,-(sp)
    eaf2:	jsr 1568a <setVariable>
    eaf8:	lea 12(sp),sp
	return BR_CONTINUE; 
    eafc:	moveq #2,d0
}
    eafe:	rts

0000eb00 <builtIn_setCursor>:

builtIn(setCursor)
{
    eb00:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    eb02:	movea.l 12(sp),a0
    eb06:	move.l 24(a0),d0
    eb0a:	move.l d0,-(sp)
    eb0c:	jsr 15270 <getAnimationFromVar>
    eb12:	addq.l #4,sp
    eb14:	move.l d0,(sp)
	pickAnimCursor (aa);
    eb16:	move.l (sp),-(sp)
    eb18:	jsr d6c <pickAnimCursor>
    eb1e:	addq.l #4,sp
	trimStack (&fun -> stack);
    eb20:	moveq #24,d0
    eb22:	add.l 12(sp),d0
    eb26:	move.l d0,-(sp)
    eb28:	jsr 1571c <trimStack>
    eb2e:	addq.l #4,sp
	return BR_CONTINUE;
    eb30:	moveq #2,d0
}
    eb32:	addq.l #4,sp
    eb34:	rts

0000eb36 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    eb36:	move.l 1d082 <input+0xa>,d1
    eb3c:	move.l 1d17c <cameraX>,d0
    eb42:	add.l d0,d1
    eb44:	moveq #28,d0
    eb46:	add.l 8(sp),d0
    eb4a:	move.l d1,-(sp)
    eb4c:	pea 1 <_start+0x1>
    eb50:	move.l d0,-(sp)
    eb52:	jsr 1568a <setVariable>
    eb58:	lea 12(sp),sp
	return BR_CONTINUE;
    eb5c:	moveq #2,d0
}
    eb5e:	rts

0000eb60 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    eb60:	move.l 1d086 <input+0xe>,d1
    eb66:	move.l 1d180 <cameraY>,d0
    eb6c:	add.l d0,d1
    eb6e:	moveq #28,d0
    eb70:	add.l 8(sp),d0
    eb74:	move.l d1,-(sp)
    eb76:	pea 1 <_start+0x1>
    eb7a:	move.l d0,-(sp)
    eb7c:	jsr 1568a <setVariable>
    eb82:	lea 12(sp),sp
	return BR_CONTINUE;
    eb86:	moveq #2,d0
}
    eb88:	rts

0000eb8a <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    eb8a:	move.l 1d082 <input+0xa>,d0
    eb90:	move.l d0,-(sp)
    eb92:	jsr 17caa <__floatsisf>
    eb98:	addq.l #4,sp
    eb9a:	move.l d0,d1
    eb9c:	move.l 1ca58 <cameraZoom>,d0
    eba2:	move.l d0,-(sp)
    eba4:	move.l d1,-(sp)
    eba6:	jsr 17d5c <__mulsf3>
    ebac:	addq.l #8,sp
    ebae:	move.l d0,-(sp)
    ebb0:	jsr 17c42 <__fixsfsi>
    ebb6:	addq.l #4,sp
    ebb8:	move.l d0,d1
    ebba:	moveq #28,d0
    ebbc:	add.l 8(sp),d0
    ebc0:	move.l d1,-(sp)
    ebc2:	pea 1 <_start+0x1>
    ebc6:	move.l d0,-(sp)
    ebc8:	jsr 1568a <setVariable>
    ebce:	lea 12(sp),sp
	return BR_CONTINUE;
    ebd2:	moveq #2,d0
}
    ebd4:	rts

0000ebd6 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    ebd6:	move.l 1d086 <input+0xe>,d0
    ebdc:	move.l d0,-(sp)
    ebde:	jsr 17caa <__floatsisf>
    ebe4:	addq.l #4,sp
    ebe6:	move.l d0,d1
    ebe8:	move.l 1ca58 <cameraZoom>,d0
    ebee:	move.l d0,-(sp)
    ebf0:	move.l d1,-(sp)
    ebf2:	jsr 17d5c <__mulsf3>
    ebf8:	addq.l #8,sp
    ebfa:	move.l d0,-(sp)
    ebfc:	jsr 17c42 <__fixsfsi>
    ec02:	addq.l #4,sp
    ec04:	move.l d0,d1
    ec06:	moveq #28,d0
    ec08:	add.l 8(sp),d0
    ec0c:	move.l d1,-(sp)
    ec0e:	pea 1 <_start+0x1>
    ec12:	move.l d0,-(sp)
    ec14:	jsr 1568a <setVariable>
    ec1a:	lea 12(sp),sp
	return BR_CONTINUE;
    ec1e:	moveq #2,d0
}
    ec20:	rts

0000ec22 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ec22:	jsr 8ba4 <statusBarText>
    ec28:	move.l d0,d1
    ec2a:	moveq #28,d0
    ec2c:	add.l 8(sp),d0
    ec30:	move.l d1,-(sp)
    ec32:	move.l d0,-(sp)
    ec34:	jsr 14fba <makeTextVar>
    ec3a:	addq.l #8,sp
	return BR_CONTINUE;
    ec3c:	moveq #2,d0
}
    ec3e:	rts

0000ec40 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ec40:	       lea -20(sp),sp
    ec44:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ec46:	       movea.l 32(sp),a0
    ec4a:	       move.l 24(a0),d0
    ec4e:	       move.l d0,-(sp)
    ec50:	       jsr 1536e <getTextFromAnyVar>
    ec56:	       addq.l #4,sp
    ec58:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ec5c:	   ,-- bne.s ec64 <builtIn_getMatchingFiles+0x24>
    ec5e:	   |   moveq #1,d0
    ec60:	,--|-- bra.w ed26 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ec64:	|  '-> moveq #24,d0
    ec66:	|      add.l 32(sp),d0
    ec6a:	|      move.l d0,-(sp)
    ec6c:	|      jsr 1571c <trimStack>
    ec72:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ec74:	|      moveq #28,d0
    ec76:	|      add.l 32(sp),d0
    ec7a:	|      move.l d0,-(sp)
    ec7c:	|      jsr 14fe6 <unlinkVar>
    ec82:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ec84:	|      movea.l 32(sp),a0
    ec88:	|      moveq #6,d0
    ec8a:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ec8e:	|      moveq #12,d0
    ec90:	|      move.l d0,16(sp)
    ec94:	|      clr.l 12(sp)
    ec98:	|      move.l 1d0c6 <SysBase>,d0
    ec9e:	|      movea.l d0,a6
    eca0:	|      move.l 16(sp),d0
    eca4:	|      move.l 12(sp),d1
    eca8:	|      jsr -684(a6)
    ecac:	|      move.l d0,8(sp)
    ecb0:	|      move.l 8(sp),d0
    ecb4:	|      movea.l 32(sp),a0
    ecb8:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ecbc:	|      moveq #32,d0
    ecbe:	|      add.l 32(sp),d0
    ecc2:	|  ,-- bne.s ecc8 <builtIn_getMatchingFiles+0x88>
    ecc4:	|  |   moveq #1,d0
    ecc6:	+--|-- bra.s ed26 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ecc8:	|  '-> movea.l 32(sp),a0
    eccc:	|      movea.l 32(a0),a0
    ecd0:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    ecd2:	|      movea.l 32(sp),a0
    ecd6:	|      movea.l 32(a0),a0
    ecda:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    ecde:	|      movea.l 32(sp),a0
    ece2:	|      movea.l 32(a0),a0
    ece6:	|      moveq #1,d0
    ece8:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    ecec:	|      movea.l 32(sp),a0
    ecf0:	|      move.l 32(a0),d0
    ecf4:	|      move.l 20(sp),-(sp)
    ecf8:	|      move.l d0,-(sp)
    ecfa:	|      jsr 14b54 <getSavedGamesStack>
    ed00:	|      addq.l #8,sp
    ed02:	|      tst.w d0
    ed04:	|  ,-- bne.s ed0a <builtIn_getMatchingFiles+0xca>
    ed06:	|  |   moveq #1,d0
    ed08:	+--|-- bra.s ed26 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    ed0a:	|  '-> move.l 20(sp),4(sp)
    ed10:	|      move.l 1d0c6 <SysBase>,d0
    ed16:	|      movea.l d0,a6
    ed18:	|      movea.l 4(sp),a1
    ed1c:	|      jsr -690(a6)
	newText = NULL;
    ed20:	|      clr.l 20(sp)
	return BR_CONTINUE;
    ed24:	|      moveq #2,d0
}
    ed26:	'----> movea.l (sp)+,a6
    ed28:	       lea 20(sp),sp
    ed2c:	       rts

0000ed2e <builtIn_saveGame>:

builtIn(saveGame)
{
    ed2e:	       lea -12(sp),sp
    ed32:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ed34:	       movea.l 24(sp),a0
    ed38:	       move.l 24(a0),d0
    ed3c:	       move.l d0,-(sp)
    ed3e:	       jsr 1536e <getTextFromAnyVar>
    ed44:	       addq.l #4,sp
    ed46:	       move.l d0,1d092 <loadNow>
    trimStack(&fun->stack);
    ed4c:	       moveq #24,d0
    ed4e:	       add.l 24(sp),d0
    ed52:	       move.l d0,-(sp)
    ed54:	       jsr 1571c <trimStack>
    ed5a:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    ed5c:	       move.l 1d092 <loadNow>,d0
    ed62:	       move.l d0,-(sp)
    ed64:	       jsr 2fe <encodeFilename>
    ed6a:	       addq.l #4,sp
    ed6c:	       move.l d0,12(sp)
    FreeVec(loadNow);
    ed70:	       move.l 1d092 <loadNow>,8(sp)
    ed78:	       move.l 1d0c6 <SysBase>,d0
    ed7e:	       movea.l d0,a6
    ed80:	       movea.l 8(sp),a1
    ed84:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    ed88:	       move.l 12(sp),-(sp)
    ed8c:	       jsr e898 <failSecurityCheck>
    ed92:	       addq.l #4,sp
    ed94:	       tst.w d0
    ed96:	   ,-- beq.s ed9c <builtIn_saveGame+0x6e>
    ed98:	   |   moveq #1,d0
    ed9a:	,--|-- bra.s edec <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    ed9c:	|  '-> move.l 12(sp),-(sp)
    eda0:	|      pea 19fa4 <PutChar+0x1c8a>
    eda6:	|      jsr 142c4 <joinStrings>
    edac:	|      addq.l #8,sp
    edae:	|      move.l d0,1d092 <loadNow>
    FreeVec(aaaaa);
    edb4:	|      move.l 12(sp),4(sp)
    edba:	|      move.l 1d0c6 <SysBase>,d0
    edc0:	|      movea.l d0,a6
    edc2:	|      movea.l 4(sp),a1
    edc6:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    edca:	|      moveq #28,d0
    edcc:	|      add.l 24(sp),d0
    edd0:	|      clr.l -(sp)
    edd2:	|      pea 1 <_start+0x1>
    edd6:	|      move.l d0,-(sp)
    edd8:	|      jsr 1568a <setVariable>
    edde:	|      lea 12(sp),sp
    saverFunc = fun;
    ede2:	|      move.l 24(sp),1d18c <saverFunc>
    return BR_KEEP_AND_PAUSE;
    edea:	|      moveq #0,d0
}
    edec:	'----> movea.l (sp)+,a6
    edee:	       lea 12(sp),sp
    edf2:	       rts

0000edf4 <builtIn_fileExists>:

builtIn(fileExists)
{
    edf4:	       lea -36(sp),sp
    edf8:	       move.l a6,-(sp)
    edfa:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    edfc:	       movea.l 52(sp),a0
    ee00:	       move.l 24(a0),d0
    ee04:	       move.l d0,-(sp)
    ee06:	       jsr 1536e <getTextFromAnyVar>
    ee0c:	       addq.l #4,sp
    ee0e:	       move.l d0,1d092 <loadNow>
    trimStack(&fun->stack);
    ee14:	       moveq #24,d0
    ee16:	       add.l 52(sp),d0
    ee1a:	       move.l d0,-(sp)
    ee1c:	       jsr 1571c <trimStack>
    ee22:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ee24:	       move.l 1d092 <loadNow>,d0
    ee2a:	       move.l d0,-(sp)
    ee2c:	       jsr 2fe <encodeFilename>
    ee32:	       addq.l #4,sp
    ee34:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ee38:	       move.l 1d092 <loadNow>,36(sp)
    ee40:	       move.l 1d0c6 <SysBase>,d0
    ee46:	       movea.l d0,a6
    ee48:	       movea.l 36(sp),a1
    ee4c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ee50:	       move.l 40(sp),-(sp)
    ee54:	       jsr e898 <failSecurityCheck>
    ee5a:	       addq.l #4,sp
    ee5c:	       tst.w d0
    ee5e:	   ,-- beq.s ee66 <builtIn_fileExists+0x72>
    ee60:	   |   moveq #1,d0
    ee62:	,--|-- bra.w ef06 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ee66:	|  '-> move.l 40(sp),32(sp)
    ee6c:	|      move.l #1005,28(sp)
    ee74:	|      move.l 1d0ce <DOSBase>,d0
    ee7a:	|      movea.l d0,a6
    ee7c:	|      move.l 32(sp),d1
    ee80:	|      move.l 28(sp),d2
    ee84:	|      jsr -30(a6)
    ee88:	|      move.l d0,24(sp)
    ee8c:	|      move.l 24(sp),d0
    ee90:	|      move.l d0,20(sp)
    if (!fp) {        
    ee94:	|  ,-- bne.s eea4 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ee96:	|  |   pea 19fa6 <PutChar+0x1c8c>
    ee9c:	|  |   jsr 17878 <KPrintF>
    eea2:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    eea4:	|  '-> tst.l 20(sp)
    eea8:	|      sne d0
    eeaa:	|      neg.b d0
    eeac:	|      moveq #0,d1
    eeae:	|      move.b d0,d1
    eeb0:	|      moveq #28,d0
    eeb2:	|      add.l 52(sp),d0
    eeb6:	|      move.l d1,-(sp)
    eeb8:	|      pea 1 <_start+0x1>
    eebc:	|      move.l d0,-(sp)
    eebe:	|      jsr 1568a <setVariable>
    eec4:	|      lea 12(sp),sp
    if (fp) Close(fp);
    eec8:	|      tst.l 20(sp)
    eecc:	|  ,-- beq.s eee8 <builtIn_fileExists+0xf4>
    eece:	|  |   move.l 20(sp),16(sp)
    eed4:	|  |   move.l 1d0ce <DOSBase>,d0
    eeda:	|  |   movea.l d0,a6
    eedc:	|  |   move.l 16(sp),d1
    eee0:	|  |   jsr -36(a6)
    eee4:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    eee8:	|  '-> move.l 40(sp),8(sp)
    eeee:	|      move.l 1d0c6 <SysBase>,d0
    eef4:	|      movea.l d0,a6
    eef6:	|      movea.l 8(sp),a1
    eefa:	|      jsr -690(a6)
    loadNow = NULL;
    eefe:	|      clr.l 1d092 <loadNow>
    return BR_CONTINUE;
    ef04:	|      moveq #2,d0
}
    ef06:	'----> move.l (sp)+,d2
    ef08:	       movea.l (sp)+,a6
    ef0a:	       lea 36(sp),sp
    ef0e:	       rts

0000ef10 <builtIn_loadGame>:

builtIn(loadGame)
{
    ef10:	       lea -36(sp),sp
    ef14:	       move.l a6,-(sp)
    ef16:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ef18:	       movea.l 52(sp),a0
    ef1c:	       move.l 24(a0),d0
    ef20:	       move.l d0,-(sp)
    ef22:	       jsr 1536e <getTextFromAnyVar>
    ef28:	       addq.l #4,sp
    ef2a:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ef2e:	       moveq #24,d0
    ef30:	       add.l 52(sp),d0
    ef34:	       move.l d0,-(sp)
    ef36:	       jsr 1571c <trimStack>
    ef3c:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ef3e:	       move.l 40(sp),-(sp)
    ef42:	       jsr 2fe <encodeFilename>
    ef48:	       addq.l #4,sp
    ef4a:	       move.l d0,1d092 <loadNow>
    FreeVec(aaaaa);
    ef50:	       move.l 40(sp),36(sp)
    ef56:	       move.l 1d0c6 <SysBase>,d0
    ef5c:	       movea.l d0,a6
    ef5e:	       movea.l 36(sp),a1
    ef62:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ef66:	       move.l 1d092 <loadNow>,d0
    ef6c:	       move.l d0,-(sp)
    ef6e:	       jsr e898 <failSecurityCheck>
    ef74:	       addq.l #4,sp
    ef76:	       tst.w d0
    ef78:	   ,-- beq.s ef7e <builtIn_loadGame+0x6e>
    ef7a:	   |   moveq #1,d0
    ef7c:	,--|-- bra.s efee <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ef7e:	|  '-> move.l 1d092 <loadNow>,32(sp)
    ef86:	|      move.l #1005,28(sp)
    ef8e:	|      move.l 1d0ce <DOSBase>,d0
    ef94:	|      movea.l d0,a6
    ef96:	|      move.l 32(sp),d1
    ef9a:	|      move.l 28(sp),d2
    ef9e:	|      jsr -30(a6)
    efa2:	|      move.l d0,24(sp)
    efa6:	|      move.l 24(sp),d0
    efaa:	|      move.l d0,20(sp)
    if (fp) {
    efae:	|  ,-- beq.s efce <builtIn_loadGame+0xbe>
        Close(fp);
    efb0:	|  |   move.l 20(sp),12(sp)
    efb6:	|  |   move.l 1d0ce <DOSBase>,d0
    efbc:	|  |   movea.l d0,a6
    efbe:	|  |   move.l 12(sp),d1
    efc2:	|  |   jsr -36(a6)
    efc6:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    efca:	|  |   moveq #0,d0
    efcc:	+--|-- bra.s efee <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    efce:	|  '-> move.l 1d092 <loadNow>,16(sp)
    efd6:	|      move.l 1d0c6 <SysBase>,d0
    efdc:	|      movea.l d0,a6
    efde:	|      movea.l 16(sp),a1
    efe2:	|      jsr -690(a6)
    loadNow = NULL;
    efe6:	|      clr.l 1d092 <loadNow>
    return BR_CONTINUE;
    efec:	|      moveq #2,d0
}
    efee:	'----> move.l (sp)+,d2
    eff0:	       movea.l (sp)+,a6
    eff2:	       lea 36(sp),sp
    eff6:	       rts

0000eff8 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    eff8:	move.l 1d162 <sceneHeight>,d0
    effe:	move.l d0,d1
    f000:	move.l 1d15e <sceneWidth>,d0
    f006:	move.l d1,-(sp)
    f008:	move.l d0,-(sp)
    f00a:	clr.l -(sp)
    f00c:	clr.l -(sp)
    f00e:	jsr d782 <blankScreen>
    f014:	lea 16(sp),sp
	return BR_CONTINUE;
    f018:	moveq #2,d0
}
    f01a:	rts

0000f01c <builtIn_blankArea>:

builtIn(blankArea)
{
    f01c:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f020:	       movea.l 24(sp),a0
    f024:	       move.l 24(a0),d0
    f028:	       move.l d0,-(sp)
    f02a:	       pea 1 <_start+0x1>
    f02e:	       lea 8(sp),a0
    f032:	       move.l a0,-(sp)
    f034:	       jsr 14d98 <getValueType>
    f03a:	       lea 12(sp),sp
    f03e:	       tst.w d0
    f040:	   ,-- bne.s f048 <builtIn_blankArea+0x2c>
    f042:	   |   moveq #1,d0
    f044:	,--|-- bra.w f11e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f048:	|  '-> moveq #24,d0
    f04a:	|      add.l 24(sp),d0
    f04e:	|      move.l d0,-(sp)
    f050:	|      jsr 1571c <trimStack>
    f056:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f058:	|      movea.l 24(sp),a0
    f05c:	|      move.l 24(a0),d0
    f060:	|      move.l d0,-(sp)
    f062:	|      pea 1 <_start+0x1>
    f066:	|      lea 12(sp),a0
    f06a:	|      move.l a0,-(sp)
    f06c:	|      jsr 14d98 <getValueType>
    f072:	|      lea 12(sp),sp
    f076:	|      tst.w d0
    f078:	|  ,-- bne.s f080 <builtIn_blankArea+0x64>
    f07a:	|  |   moveq #1,d0
    f07c:	+--|-- bra.w f11e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f080:	|  '-> moveq #24,d0
    f082:	|      add.l 24(sp),d0
    f086:	|      move.l d0,-(sp)
    f088:	|      jsr 1571c <trimStack>
    f08e:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f090:	|      movea.l 24(sp),a0
    f094:	|      move.l 24(a0),d0
    f098:	|      move.l d0,-(sp)
    f09a:	|      pea 1 <_start+0x1>
    f09e:	|      moveq #16,d0
    f0a0:	|      add.l sp,d0
    f0a2:	|      move.l d0,-(sp)
    f0a4:	|      jsr 14d98 <getValueType>
    f0aa:	|      lea 12(sp),sp
    f0ae:	|      tst.w d0
    f0b0:	|  ,-- bne.s f0b6 <builtIn_blankArea+0x9a>
    f0b2:	|  |   moveq #1,d0
    f0b4:	+--|-- bra.s f11e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f0b6:	|  '-> moveq #24,d0
    f0b8:	|      add.l 24(sp),d0
    f0bc:	|      move.l d0,-(sp)
    f0be:	|      jsr 1571c <trimStack>
    f0c4:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f0c6:	|      movea.l 24(sp),a0
    f0ca:	|      move.l 24(a0),d0
    f0ce:	|      move.l d0,-(sp)
    f0d0:	|      pea 1 <_start+0x1>
    f0d4:	|      moveq #20,d0
    f0d6:	|      add.l sp,d0
    f0d8:	|      move.l d0,-(sp)
    f0da:	|      jsr 14d98 <getValueType>
    f0e0:	|      lea 12(sp),sp
    f0e4:	|      tst.w d0
    f0e6:	|  ,-- bne.s f0ec <builtIn_blankArea+0xd0>
    f0e8:	|  |   moveq #1,d0
    f0ea:	+--|-- bra.s f11e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f0ec:	|  '-> moveq #24,d0
    f0ee:	|      add.l 24(sp),d0
    f0f2:	|      move.l d0,-(sp)
    f0f4:	|      jsr 1571c <trimStack>
    f0fa:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f0fc:	|      movea.l (sp),a1
    f0fe:	|      movea.l 4(sp),a0
    f102:	|      move.l 8(sp),d1
    f106:	|      move.l 12(sp),d0
    f10a:	|      move.l a1,-(sp)
    f10c:	|      move.l a0,-(sp)
    f10e:	|      move.l d1,-(sp)
    f110:	|      move.l d0,-(sp)
    f112:	|      jsr d782 <blankScreen>
    f118:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f11c:	|      moveq #2,d0
}
    f11e:	'----> lea 16(sp),sp
    f122:	       rts

0000f124 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    f124:	jsr d7a0 <darkScreen>
	return BR_CONTINUE;
    f12a:	moveq #2,d0
}
    f12c:	rts

0000f12e <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f12e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f132:	       movea.l 20(sp),a0
    f136:	       move.l 24(a0),d0
    f13a:	       move.l d0,-(sp)
    f13c:	       pea 1 <_start+0x1>
    f140:	       lea 8(sp),a0
    f144:	       move.l a0,-(sp)
    f146:	       jsr 14d98 <getValueType>
    f14c:	       lea 12(sp),sp
    f150:	       tst.w d0
    f152:	   ,-- bne.s f15a <builtIn_addOverlay+0x2c>
    f154:	   |   moveq #1,d0
    f156:	,--|-- bra.w f1f2 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f15a:	|  '-> moveq #24,d0
    f15c:	|      add.l 20(sp),d0
    f160:	|      move.l d0,-(sp)
    f162:	|      jsr 1571c <trimStack>
    f168:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f16a:	|      movea.l 20(sp),a0
    f16e:	|      move.l 24(a0),d0
    f172:	|      move.l d0,-(sp)
    f174:	|      pea 1 <_start+0x1>
    f178:	|      moveq #12,d0
    f17a:	|      add.l sp,d0
    f17c:	|      move.l d0,-(sp)
    f17e:	|      jsr 14d98 <getValueType>
    f184:	|      lea 12(sp),sp
    f188:	|      tst.w d0
    f18a:	|  ,-- bne.s f190 <builtIn_addOverlay+0x62>
    f18c:	|  |   moveq #1,d0
    f18e:	+--|-- bra.s f1f2 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f190:	|  '-> moveq #24,d0
    f192:	|      add.l 20(sp),d0
    f196:	|      move.l d0,-(sp)
    f198:	|      jsr 1571c <trimStack>
    f19e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1a0:	|      movea.l 20(sp),a0
    f1a4:	|      move.l 24(a0),d0
    f1a8:	|      move.l d0,-(sp)
    f1aa:	|      pea 5 <_start+0x5>
    f1ae:	|      moveq #16,d0
    f1b0:	|      add.l sp,d0
    f1b2:	|      move.l d0,-(sp)
    f1b4:	|      jsr 14d98 <getValueType>
    f1ba:	|      lea 12(sp),sp
    f1be:	|      tst.w d0
    f1c0:	|  ,-- bne.s f1c6 <builtIn_addOverlay+0x98>
    f1c2:	|  |   moveq #1,d0
    f1c4:	+--|-- bra.s f1f2 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f1c6:	|  '-> moveq #24,d0
    f1c8:	|      add.l 20(sp),d0
    f1cc:	|      move.l d0,-(sp)
    f1ce:	|      jsr 1571c <trimStack>
    f1d4:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f1d6:	|      movea.l (sp),a0
    f1d8:	|      move.l 4(sp),d1
    f1dc:	|      move.l 8(sp),d0
    f1e0:	|      move.l a0,-(sp)
    f1e2:	|      move.l d1,-(sp)
    f1e4:	|      move.l d0,-(sp)
    f1e6:	|      jsr d8be <loadBackDrop>
    f1ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f1f0:	|      moveq #2,d0
}
    f1f2:	'----> lea 12(sp),sp
    f1f6:	       rts

0000f1f8 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f1f8:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1fc:	       movea.l 20(sp),a0
    f200:	       move.l 24(a0),d0
    f204:	       move.l d0,-(sp)
    f206:	       pea 1 <_start+0x1>
    f20a:	       lea 8(sp),a0
    f20e:	       move.l a0,-(sp)
    f210:	       jsr 14d98 <getValueType>
    f216:	       lea 12(sp),sp
    f21a:	       tst.w d0
    f21c:	   ,-- bne.s f224 <builtIn_mixOverlay+0x2c>
    f21e:	   |   moveq #1,d0
    f220:	,--|-- bra.w f2bc <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f224:	|  '-> moveq #24,d0
    f226:	|      add.l 20(sp),d0
    f22a:	|      move.l d0,-(sp)
    f22c:	|      jsr 1571c <trimStack>
    f232:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f234:	|      movea.l 20(sp),a0
    f238:	|      move.l 24(a0),d0
    f23c:	|      move.l d0,-(sp)
    f23e:	|      pea 1 <_start+0x1>
    f242:	|      moveq #12,d0
    f244:	|      add.l sp,d0
    f246:	|      move.l d0,-(sp)
    f248:	|      jsr 14d98 <getValueType>
    f24e:	|      lea 12(sp),sp
    f252:	|      tst.w d0
    f254:	|  ,-- bne.s f25a <builtIn_mixOverlay+0x62>
    f256:	|  |   moveq #1,d0
    f258:	+--|-- bra.s f2bc <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f25a:	|  '-> moveq #24,d0
    f25c:	|      add.l 20(sp),d0
    f260:	|      move.l d0,-(sp)
    f262:	|      jsr 1571c <trimStack>
    f268:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f26a:	|      movea.l 20(sp),a0
    f26e:	|      move.l 24(a0),d0
    f272:	|      move.l d0,-(sp)
    f274:	|      pea 5 <_start+0x5>
    f278:	|      moveq #16,d0
    f27a:	|      add.l sp,d0
    f27c:	|      move.l d0,-(sp)
    f27e:	|      jsr 14d98 <getValueType>
    f284:	|      lea 12(sp),sp
    f288:	|      tst.w d0
    f28a:	|  ,-- bne.s f290 <builtIn_mixOverlay+0x98>
    f28c:	|  |   moveq #1,d0
    f28e:	+--|-- bra.s f2bc <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f290:	|  '-> moveq #24,d0
    f292:	|      add.l 20(sp),d0
    f296:	|      move.l d0,-(sp)
    f298:	|      jsr 1571c <trimStack>
    f29e:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f2a0:	|      movea.l (sp),a0
    f2a2:	|      move.l 4(sp),d1
    f2a6:	|      move.l 8(sp),d0
    f2aa:	|      move.l a0,-(sp)
    f2ac:	|      move.l d1,-(sp)
    f2ae:	|      move.l d0,-(sp)
    f2b0:	|      jsr d934 <mixBackDrop>
    f2b6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f2ba:	|      moveq #2,d0
}
    f2bc:	'----> lea 12(sp),sp
    f2c0:	       rts

0000f2c2 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f2c2:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2c6:	       movea.l 20(sp),a0
    f2ca:	       move.l 24(a0),d0
    f2ce:	       move.l d0,-(sp)
    f2d0:	       pea 1 <_start+0x1>
    f2d4:	       lea 8(sp),a0
    f2d8:	       move.l a0,-(sp)
    f2da:	       jsr 14d98 <getValueType>
    f2e0:	       lea 12(sp),sp
    f2e4:	       tst.w d0
    f2e6:	   ,-- bne.s f2ee <builtIn_pasteImage+0x2c>
    f2e8:	   |   moveq #1,d0
    f2ea:	,--|-- bra.w f37e <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f2ee:	|  '-> moveq #24,d0
    f2f0:	|      add.l 20(sp),d0
    f2f4:	|      move.l d0,-(sp)
    f2f6:	|      jsr 1571c <trimStack>
    f2fc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2fe:	|      movea.l 20(sp),a0
    f302:	|      move.l 24(a0),d0
    f306:	|      move.l d0,-(sp)
    f308:	|      pea 1 <_start+0x1>
    f30c:	|      moveq #12,d0
    f30e:	|      add.l sp,d0
    f310:	|      move.l d0,-(sp)
    f312:	|      jsr 14d98 <getValueType>
    f318:	|      lea 12(sp),sp
    f31c:	|      tst.w d0
    f31e:	|  ,-- bne.s f324 <builtIn_pasteImage+0x62>
    f320:	|  |   moveq #1,d0
    f322:	+--|-- bra.s f37e <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f324:	|  '-> moveq #24,d0
    f326:	|      add.l 20(sp),d0
    f32a:	|      move.l d0,-(sp)
    f32c:	|      jsr 1571c <trimStack>
    f332:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f334:	|      movea.l 20(sp),a0
    f338:	|      move.l 24(a0),d0
    f33c:	|      move.l d0,-(sp)
    f33e:	|      jsr 15270 <getAnimationFromVar>
    f344:	|      addq.l #4,sp
    f346:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f34a:	|      moveq #24,d0
    f34c:	|      add.l 20(sp),d0
    f350:	|      move.l d0,-(sp)
    f352:	|      jsr 1571c <trimStack>
    f358:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f35a:	|      tst.l 8(sp)
    f35e:	|  ,-- bne.s f364 <builtIn_pasteImage+0xa2>
    f360:	|  |   moveq #2,d0
    f362:	+--|-- bra.s f37e <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f364:	|  '-> move.l (sp),d1
    f366:	|      move.l 4(sp),d0
    f36a:	|      move.l 8(sp),-(sp)
    f36e:	|      move.l d1,-(sp)
    f370:	|      move.l d0,-(sp)
    f372:	|      jsr d94 <pasteCursor>
    f378:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f37c:	|      moveq #2,d0
}
    f37e:	'----> lea 12(sp),sp
    f382:	       rts

0000f384 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f384:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f386:	       movea.l 16(sp),a0
    f38a:	       move.l 24(a0),d0
    f38e:	       move.l d0,-(sp)
    f390:	       pea 1 <_start+0x1>
    f394:	       move.l sp,d0
    f396:	       addq.l #8,d0
    f398:	       move.l d0,-(sp)
    f39a:	       jsr 14d98 <getValueType>
    f3a0:	       lea 12(sp),sp
    f3a4:	       tst.w d0
    f3a6:	   ,-- bne.s f3ae <builtIn_setSceneDimensions+0x2a>
    f3a8:	   |   moveq #1,d0
    f3aa:	,--|-- bra.w f436 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f3ae:	|  '-> moveq #24,d0
    f3b0:	|      add.l 16(sp),d0
    f3b4:	|      move.l d0,-(sp)
    f3b6:	|      jsr 1571c <trimStack>
    f3bc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3be:	|      movea.l 16(sp),a0
    f3c2:	|      move.l 24(a0),d0
    f3c6:	|      move.l d0,-(sp)
    f3c8:	|      pea 1 <_start+0x1>
    f3cc:	|      moveq #12,d0
    f3ce:	|      add.l sp,d0
    f3d0:	|      move.l d0,-(sp)
    f3d2:	|      jsr 14d98 <getValueType>
    f3d8:	|      lea 12(sp),sp
    f3dc:	|      tst.w d0
    f3de:	|  ,-- bne.s f3e4 <builtIn_setSceneDimensions+0x60>
    f3e0:	|  |   moveq #1,d0
    f3e2:	+--|-- bra.s f436 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f3e4:	|  '-> moveq #24,d0
    f3e6:	|      add.l 16(sp),d0
    f3ea:	|      move.l d0,-(sp)
    f3ec:	|      jsr 1571c <trimStack>
    f3f2:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f3f4:	|      move.l (sp),d1
    f3f6:	|      move.l 4(sp),d0
    f3fa:	|      move.l d1,-(sp)
    f3fc:	|      move.l d0,-(sp)
    f3fe:	|      jsr d98a <resizeBackdrop>
    f404:	|      addq.l #8,sp
    f406:	|      tst.w d0
    f408:	|  ,-- beq.s f426 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f40a:	|  |   move.l (sp),d1
    f40c:	|  |   move.l 4(sp),d0
    f410:	|  |   move.l d1,-(sp)
    f412:	|  |   move.l d0,-(sp)
    f414:	|  |   clr.l -(sp)
    f416:	|  |   clr.l -(sp)
    f418:	|  |   jsr d782 <blankScreen>
    f41e:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f422:	|  |   moveq #2,d0
    f424:	+--|-- bra.s f436 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f426:	|  '-> pea 19fc4 <PutChar+0x1caa>
    f42c:	|      jsr 17878 <KPrintF>
    f432:	|      addq.l #4,sp
	return BR_ERROR;
    f434:	|      moveq #1,d0
}
    f436:	'----> addq.l #8,sp
    f438:	       rts

0000f43a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f43a:	          move.l d3,-(sp)
    f43c:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f43e:	          movea.l 16(sp),a0
    f442:	          move.l 24(a0),d0
    f446:	          move.l d0,-(sp)
    f448:	          pea 1 <_start+0x1>
    f44c:	          pea 1d180 <cameraY>
    f452:	          jsr 14d98 <getValueType>
    f458:	          lea 12(sp),sp
    f45c:	          tst.w d0
    f45e:	      ,-- bne.s f466 <builtIn_aimCamera+0x2c>
    f460:	      |   moveq #1,d0
    f462:	,-----|-- bra.w f6e8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f466:	|     '-> moveq #24,d0
    f468:	|         add.l 16(sp),d0
    f46c:	|         move.l d0,-(sp)
    f46e:	|         jsr 1571c <trimStack>
    f474:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f476:	|         movea.l 16(sp),a0
    f47a:	|         move.l 24(a0),d0
    f47e:	|         move.l d0,-(sp)
    f480:	|         pea 1 <_start+0x1>
    f484:	|         pea 1d17c <cameraX>
    f48a:	|         jsr 14d98 <getValueType>
    f490:	|         lea 12(sp),sp
    f494:	|         tst.w d0
    f496:	|     ,-- bne.s f49e <builtIn_aimCamera+0x64>
    f498:	|     |   moveq #1,d0
    f49a:	+-----|-- bra.w f6e8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f49e:	|     '-> moveq #24,d0
    f4a0:	|         add.l 16(sp),d0
    f4a4:	|         move.l d0,-(sp)
    f4a6:	|         jsr 1571c <trimStack>
    f4ac:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f4ae:	|         move.l 1d17c <cameraX>,d0
    f4b4:	|         move.l d0,-(sp)
    f4b6:	|         jsr 17caa <__floatsisf>
    f4bc:	|         addq.l #4,sp
    f4be:	|         move.l d0,d2
    f4c0:	|         move.l 1d01a <winWidth>,d0
    f4c6:	|         lsr.l #1,d0
    f4c8:	|         move.l d0,-(sp)
    f4ca:	|         jsr 17cd2 <__floatunsisf>
    f4d0:	|         addq.l #4,sp
    f4d2:	|         move.l d0,d1
    f4d4:	|         move.l 1ca58 <cameraZoom>,d0
    f4da:	|         move.l d0,-(sp)
    f4dc:	|         move.l d1,-(sp)
    f4de:	|         jsr 17b60 <__divsf3>
    f4e4:	|         addq.l #8,sp
    f4e6:	|         move.l d0,-(sp)
    f4e8:	|         move.l d2,-(sp)
    f4ea:	|         jsr 17f9e <__subsf3>
    f4f0:	|         addq.l #8,sp
    f4f2:	|         move.l d0,-(sp)
    f4f4:	|         jsr 17c42 <__fixsfsi>
    f4fa:	|         addq.l #4,sp
    f4fc:	|         move.l d0,1d17c <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f502:	|         move.l 1d180 <cameraY>,d0
    f508:	|         move.l d0,-(sp)
    f50a:	|         jsr 17caa <__floatsisf>
    f510:	|         addq.l #4,sp
    f512:	|         move.l d0,d2
    f514:	|         move.l 1d01e <winHeight>,d0
    f51a:	|         lsr.l #1,d0
    f51c:	|         move.l d0,-(sp)
    f51e:	|         jsr 17cd2 <__floatunsisf>
    f524:	|         addq.l #4,sp
    f526:	|         move.l d0,d1
    f528:	|         move.l 1ca58 <cameraZoom>,d0
    f52e:	|         move.l d0,-(sp)
    f530:	|         move.l d1,-(sp)
    f532:	|         jsr 17b60 <__divsf3>
    f538:	|         addq.l #8,sp
    f53a:	|         move.l d0,-(sp)
    f53c:	|         move.l d2,-(sp)
    f53e:	|         jsr 17f9e <__subsf3>
    f544:	|         addq.l #8,sp
    f546:	|         move.l d0,-(sp)
    f548:	|         jsr 17c42 <__fixsfsi>
    f54e:	|         addq.l #4,sp
    f550:	|         move.l d0,1d180 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f556:	|         move.l 1d17c <cameraX>,d0
    f55c:	|     ,-- bpl.s f568 <builtIn_aimCamera+0x12e>
    f55e:	|     |   clr.l 1d17c <cameraX>
    f564:	|  ,--|-- bra.w f61e <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f568:	|  |  '-> move.l 1d17c <cameraX>,d0
    f56e:	|  |      move.l d0,-(sp)
    f570:	|  |      jsr 17caa <__floatsisf>
    f576:	|  |      addq.l #4,sp
    f578:	|  |      move.l d0,d2
    f57a:	|  |      move.l 1d15e <sceneWidth>,d0
    f580:	|  |      move.l d0,-(sp)
    f582:	|  |      jsr 17cd2 <__floatunsisf>
    f588:	|  |      addq.l #4,sp
    f58a:	|  |      move.l d0,d3
    f58c:	|  |      move.l 1d01a <winWidth>,d0
    f592:	|  |      move.l d0,-(sp)
    f594:	|  |      jsr 17cd2 <__floatunsisf>
    f59a:	|  |      addq.l #4,sp
    f59c:	|  |      move.l d0,d1
    f59e:	|  |      move.l 1ca58 <cameraZoom>,d0
    f5a4:	|  |      move.l d0,-(sp)
    f5a6:	|  |      move.l d1,-(sp)
    f5a8:	|  |      jsr 17b60 <__divsf3>
    f5ae:	|  |      addq.l #8,sp
    f5b0:	|  |      move.l d0,-(sp)
    f5b2:	|  |      move.l d3,-(sp)
    f5b4:	|  |      jsr 17f9e <__subsf3>
    f5ba:	|  |      addq.l #8,sp
    f5bc:	|  |      move.l d0,-(sp)
    f5be:	|  |      move.l d2,-(sp)
    f5c0:	|  |      jsr 17e16 <__gtsf2>
    f5c6:	|  |      addq.l #8,sp
    f5c8:	|  |      tst.l d0
    f5ca:	|  +----- ble.s f61e <builtIn_aimCamera+0x1e4>
    f5cc:	|  |      move.l 1d15e <sceneWidth>,d0
    f5d2:	|  |      move.l d0,-(sp)
    f5d4:	|  |      jsr 17cd2 <__floatunsisf>
    f5da:	|  |      addq.l #4,sp
    f5dc:	|  |      move.l d0,d2
    f5de:	|  |      move.l 1d01a <winWidth>,d0
    f5e4:	|  |      move.l d0,-(sp)
    f5e6:	|  |      jsr 17cd2 <__floatunsisf>
    f5ec:	|  |      addq.l #4,sp
    f5ee:	|  |      move.l d0,d1
    f5f0:	|  |      move.l 1ca58 <cameraZoom>,d0
    f5f6:	|  |      move.l d0,-(sp)
    f5f8:	|  |      move.l d1,-(sp)
    f5fa:	|  |      jsr 17b60 <__divsf3>
    f600:	|  |      addq.l #8,sp
    f602:	|  |      move.l d0,-(sp)
    f604:	|  |      move.l d2,-(sp)
    f606:	|  |      jsr 17f9e <__subsf3>
    f60c:	|  |      addq.l #8,sp
    f60e:	|  |      move.l d0,-(sp)
    f610:	|  |      jsr 17c42 <__fixsfsi>
    f616:	|  |      addq.l #4,sp
    f618:	|  |      move.l d0,1d17c <cameraX>
	if (cameraY < 0) cameraY = 0;
    f61e:	|  '----> move.l 1d180 <cameraY>,d0
    f624:	|     ,-- bpl.s f630 <builtIn_aimCamera+0x1f6>
    f626:	|     |   clr.l 1d180 <cameraY>
    f62c:	|  ,--|-- bra.w f6e6 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f630:	|  |  '-> move.l 1d180 <cameraY>,d0
    f636:	|  |      move.l d0,-(sp)
    f638:	|  |      jsr 17caa <__floatsisf>
    f63e:	|  |      addq.l #4,sp
    f640:	|  |      move.l d0,d2
    f642:	|  |      move.l 1d162 <sceneHeight>,d0
    f648:	|  |      move.l d0,-(sp)
    f64a:	|  |      jsr 17cd2 <__floatunsisf>
    f650:	|  |      addq.l #4,sp
    f652:	|  |      move.l d0,d3
    f654:	|  |      move.l 1d01e <winHeight>,d0
    f65a:	|  |      move.l d0,-(sp)
    f65c:	|  |      jsr 17cd2 <__floatunsisf>
    f662:	|  |      addq.l #4,sp
    f664:	|  |      move.l d0,d1
    f666:	|  |      move.l 1ca58 <cameraZoom>,d0
    f66c:	|  |      move.l d0,-(sp)
    f66e:	|  |      move.l d1,-(sp)
    f670:	|  |      jsr 17b60 <__divsf3>
    f676:	|  |      addq.l #8,sp
    f678:	|  |      move.l d0,-(sp)
    f67a:	|  |      move.l d3,-(sp)
    f67c:	|  |      jsr 17f9e <__subsf3>
    f682:	|  |      addq.l #8,sp
    f684:	|  |      move.l d0,-(sp)
    f686:	|  |      move.l d2,-(sp)
    f688:	|  |      jsr 17e16 <__gtsf2>
    f68e:	|  |      addq.l #8,sp
    f690:	|  |      tst.l d0
    f692:	|  +----- ble.s f6e6 <builtIn_aimCamera+0x2ac>
    f694:	|  |      move.l 1d162 <sceneHeight>,d0
    f69a:	|  |      move.l d0,-(sp)
    f69c:	|  |      jsr 17cd2 <__floatunsisf>
    f6a2:	|  |      addq.l #4,sp
    f6a4:	|  |      move.l d0,d2
    f6a6:	|  |      move.l 1d01e <winHeight>,d0
    f6ac:	|  |      move.l d0,-(sp)
    f6ae:	|  |      jsr 17cd2 <__floatunsisf>
    f6b4:	|  |      addq.l #4,sp
    f6b6:	|  |      move.l d0,d1
    f6b8:	|  |      move.l 1ca58 <cameraZoom>,d0
    f6be:	|  |      move.l d0,-(sp)
    f6c0:	|  |      move.l d1,-(sp)
    f6c2:	|  |      jsr 17b60 <__divsf3>
    f6c8:	|  |      addq.l #8,sp
    f6ca:	|  |      move.l d0,-(sp)
    f6cc:	|  |      move.l d2,-(sp)
    f6ce:	|  |      jsr 17f9e <__subsf3>
    f6d4:	|  |      addq.l #8,sp
    f6d6:	|  |      move.l d0,-(sp)
    f6d8:	|  |      jsr 17c42 <__fixsfsi>
    f6de:	|  |      addq.l #4,sp
    f6e0:	|  |      move.l d0,1d180 <cameraY>
	return BR_CONTINUE;
    f6e6:	|  '----> moveq #2,d0
}
    f6e8:	'-------> move.l (sp)+,d2
    f6ea:	          move.l (sp)+,d3
    f6ec:	          rts

0000f6ee <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f6ee:	       subq.l #4,sp
    f6f0:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6f2:	       movea.l 16(sp),a0
    f6f6:	       move.l 24(a0),d0
    f6fa:	       move.l d0,-(sp)
    f6fc:	       pea 1 <_start+0x1>
    f700:	       moveq #12,d0
    f702:	       add.l sp,d0
    f704:	       move.l d0,-(sp)
    f706:	       jsr 14d98 <getValueType>
    f70c:	       lea 12(sp),sp
    f710:	       tst.w d0
    f712:	   ,-- bne.s f71a <builtIn_zoomCamera+0x2c>
    f714:	   |   moveq #1,d0
    f716:	,--|-- bra.w f914 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f71a:	|  '-> moveq #24,d0
    f71c:	|      add.l 16(sp),d0
    f720:	|      move.l d0,-(sp)
    f722:	|      jsr 1571c <trimStack>
    f728:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f72a:	|      move.l 1d082 <input+0xa>,d0
    f730:	|      move.l d0,-(sp)
    f732:	|      jsr 17caa <__floatsisf>
    f738:	|      addq.l #4,sp
    f73a:	|      move.l d0,d1
    f73c:	|      move.l 1ca58 <cameraZoom>,d0
    f742:	|      move.l d0,-(sp)
    f744:	|      move.l d1,-(sp)
    f746:	|      jsr 17d5c <__mulsf3>
    f74c:	|      addq.l #8,sp
    f74e:	|      move.l d0,-(sp)
    f750:	|      jsr 17c42 <__fixsfsi>
    f756:	|      addq.l #4,sp
    f758:	|      move.l d0,1d082 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f75e:	|      move.l 1d086 <input+0xe>,d0
    f764:	|      move.l d0,-(sp)
    f766:	|      jsr 17caa <__floatsisf>
    f76c:	|      addq.l #4,sp
    f76e:	|      move.l d0,d1
    f770:	|      move.l 1ca58 <cameraZoom>,d0
    f776:	|      move.l d0,-(sp)
    f778:	|      move.l d1,-(sp)
    f77a:	|      jsr 17d5c <__mulsf3>
    f780:	|      addq.l #8,sp
    f782:	|      move.l d0,-(sp)
    f784:	|      jsr 17c42 <__fixsfsi>
    f78a:	|      addq.l #4,sp
    f78c:	|      move.l d0,1d086 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f792:	|      move.l 4(sp),d0
    f796:	|      move.l d0,-(sp)
    f798:	|      jsr 17caa <__floatsisf>
    f79e:	|      addq.l #4,sp
    f7a0:	|      move.l #1008981770,-(sp)
    f7a6:	|      move.l d0,-(sp)
    f7a8:	|      jsr 17d5c <__mulsf3>
    f7ae:	|      addq.l #8,sp
    f7b0:	|      move.l d0,1ca58 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f7b6:	|      move.l 1d01a <winWidth>,d0
    f7bc:	|      move.l d0,-(sp)
    f7be:	|      jsr 17cd2 <__floatunsisf>
    f7c4:	|      addq.l #4,sp
    f7c6:	|      move.l d0,d1
    f7c8:	|      move.l 1ca58 <cameraZoom>,d0
    f7ce:	|      move.l d0,-(sp)
    f7d0:	|      move.l d1,-(sp)
    f7d2:	|      jsr 17b60 <__divsf3>
    f7d8:	|      addq.l #8,sp
    f7da:	|      move.l d0,d2
    f7dc:	|      move.l 1d15e <sceneWidth>,d0
    f7e2:	|      move.l d0,-(sp)
    f7e4:	|      jsr 17cd2 <__floatunsisf>
    f7ea:	|      addq.l #4,sp
    f7ec:	|      move.l d0,-(sp)
    f7ee:	|      move.l d2,-(sp)
    f7f0:	|      jsr 17e16 <__gtsf2>
    f7f6:	|      addq.l #8,sp
    f7f8:	|      tst.l d0
    f7fa:	|  ,-- ble.s f830 <builtIn_zoomCamera+0x142>
    f7fc:	|  |   move.l 1d01a <winWidth>,d0
    f802:	|  |   move.l d0,-(sp)
    f804:	|  |   jsr 17cd2 <__floatunsisf>
    f80a:	|  |   addq.l #4,sp
    f80c:	|  |   move.l d0,d2
    f80e:	|  |   move.l 1d15e <sceneWidth>,d0
    f814:	|  |   move.l d0,-(sp)
    f816:	|  |   jsr 17cd2 <__floatunsisf>
    f81c:	|  |   addq.l #4,sp
    f81e:	|  |   move.l d0,-(sp)
    f820:	|  |   move.l d2,-(sp)
    f822:	|  |   jsr 17b60 <__divsf3>
    f828:	|  |   addq.l #8,sp
    f82a:	|  |   move.l d0,1ca58 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f830:	|  '-> move.l 1d01e <winHeight>,d0
    f836:	|      move.l d0,-(sp)
    f838:	|      jsr 17cd2 <__floatunsisf>
    f83e:	|      addq.l #4,sp
    f840:	|      move.l d0,d1
    f842:	|      move.l 1ca58 <cameraZoom>,d0
    f848:	|      move.l d0,-(sp)
    f84a:	|      move.l d1,-(sp)
    f84c:	|      jsr 17b60 <__divsf3>
    f852:	|      addq.l #8,sp
    f854:	|      move.l d0,d2
    f856:	|      move.l 1d162 <sceneHeight>,d0
    f85c:	|      move.l d0,-(sp)
    f85e:	|      jsr 17cd2 <__floatunsisf>
    f864:	|      addq.l #4,sp
    f866:	|      move.l d0,-(sp)
    f868:	|      move.l d2,-(sp)
    f86a:	|      jsr 17e16 <__gtsf2>
    f870:	|      addq.l #8,sp
    f872:	|      tst.l d0
    f874:	|  ,-- ble.s f8aa <builtIn_zoomCamera+0x1bc>
    f876:	|  |   move.l 1d01e <winHeight>,d0
    f87c:	|  |   move.l d0,-(sp)
    f87e:	|  |   jsr 17cd2 <__floatunsisf>
    f884:	|  |   addq.l #4,sp
    f886:	|  |   move.l d0,d2
    f888:	|  |   move.l 1d162 <sceneHeight>,d0
    f88e:	|  |   move.l d0,-(sp)
    f890:	|  |   jsr 17cd2 <__floatunsisf>
    f896:	|  |   addq.l #4,sp
    f898:	|  |   move.l d0,-(sp)
    f89a:	|  |   move.l d2,-(sp)
    f89c:	|  |   jsr 17b60 <__divsf3>
    f8a2:	|  |   addq.l #8,sp
    f8a4:	|  |   move.l d0,1ca58 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f8aa:	|  '-> move.l 1d082 <input+0xa>,d0
    f8b0:	|      move.l d0,-(sp)
    f8b2:	|      jsr 17caa <__floatsisf>
    f8b8:	|      addq.l #4,sp
    f8ba:	|      move.l d0,d1
    f8bc:	|      move.l 1ca58 <cameraZoom>,d0
    f8c2:	|      move.l d0,-(sp)
    f8c4:	|      move.l d1,-(sp)
    f8c6:	|      jsr 17b60 <__divsf3>
    f8cc:	|      addq.l #8,sp
    f8ce:	|      move.l d0,-(sp)
    f8d0:	|      jsr 17c42 <__fixsfsi>
    f8d6:	|      addq.l #4,sp
    f8d8:	|      move.l d0,1d082 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f8de:	|      move.l 1d086 <input+0xe>,d0
    f8e4:	|      move.l d0,-(sp)
    f8e6:	|      jsr 17caa <__floatsisf>
    f8ec:	|      addq.l #4,sp
    f8ee:	|      move.l d0,d1
    f8f0:	|      move.l 1ca58 <cameraZoom>,d0
    f8f6:	|      move.l d0,-(sp)
    f8f8:	|      move.l d1,-(sp)
    f8fa:	|      jsr 17b60 <__divsf3>
    f900:	|      addq.l #8,sp
    f902:	|      move.l d0,-(sp)
    f904:	|      jsr 17c42 <__fixsfsi>
    f90a:	|      addq.l #4,sp
    f90c:	|      move.l d0,1d086 <input+0xe>

	return BR_CONTINUE;
    f912:	|      moveq #2,d0
}
    f914:	'----> move.l (sp)+,d2
    f916:	       addq.l #4,sp
    f918:	       rts

0000f91a <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f91a:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f91c:	             tst.l 8(sp)
    f920:	         ,-- bne.s f934 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f922:	         |   pea 19fe9 <PutChar+0x1ccf>
    f928:	         |   jsr 17878 <KPrintF>
    f92e:	         |   addq.l #4,sp
		return BR_ERROR;
    f930:	         |   moveq #1,d0
    f932:	,--------|-- bra.s f994 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f934:	|        '-> jsr 16438 <rand>
    f93a:	|            move.l d0,d1
    f93c:	|            move.l 8(sp),d0
    f940:	|            move.l d0,-(sp)
    f942:	|            move.l d1,-(sp)
    f944:	|            jsr 182de <__umodsi3>
    f94a:	|            addq.l #8,sp
    f94c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f94e:	|     ,----- bra.s f982 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f950:	|  ,--|----> move.l (sp),d0
    f952:	|  |  |      cmp.l 8(sp),d0
    f956:	|  |  |  ,-- bne.s f972 <builtIn_pickOne+0x58>
    f958:	|  |  |  |   moveq #28,d0
    f95a:	|  |  |  |   add.l 12(sp),d0
    f95e:	|  |  |  |   movea.l 12(sp),a0
    f962:	|  |  |  |   move.l 24(a0),d1
    f966:	|  |  |  |   move.l d0,-(sp)
    f968:	|  |  |  |   move.l d1,-(sp)
    f96a:	|  |  |  |   jsr 15252 <copyVariable>
    f970:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f972:	|  |  |  '-> moveq #24,d0
    f974:	|  |  |      add.l 12(sp),d0
    f978:	|  |  |      move.l d0,-(sp)
    f97a:	|  |  |      jsr 1571c <trimStack>
    f980:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f982:	|  |  '----> move.l 8(sp),d0
    f986:	|  |         move.l d0,d1
    f988:	|  |         subq.l #1,d1
    f98a:	|  |         move.l d1,8(sp)
    f98e:	|  |         tst.l d0
    f990:	|  '-------- bne.s f950 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f992:	|            moveq #2,d0
}
    f994:	'----------> addq.l #4,sp
    f996:	             rts

0000f998 <builtIn_substring>:

builtIn(substring)
{
    f998:	       lea -40(sp),sp
    f99c:	       move.l a6,-(sp)
    f99e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f9a0:	       movea.l 56(sp),a0
    f9a4:	       move.l 24(a0),d0
    f9a8:	       move.l d0,-(sp)
    f9aa:	       pea 1 <_start+0x1>
    f9ae:	       lea 16(sp),a0
    f9b2:	       move.l a0,-(sp)
    f9b4:	       jsr 14d98 <getValueType>
    f9ba:	       lea 12(sp),sp
    f9be:	       tst.w d0
    f9c0:	   ,-- bne.s f9c8 <builtIn_substring+0x30>
    f9c2:	   |   moveq #1,d0
    f9c4:	,--|-- bra.w fb40 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f9c8:	|  '-> moveq #24,d0
    f9ca:	|      add.l 56(sp),d0
    f9ce:	|      move.l d0,-(sp)
    f9d0:	|      jsr 1571c <trimStack>
    f9d6:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f9d8:	|      movea.l 56(sp),a0
    f9dc:	|      move.l 24(a0),d0
    f9e0:	|      move.l d0,-(sp)
    f9e2:	|      pea 1 <_start+0x1>
    f9e6:	|      lea 20(sp),a0
    f9ea:	|      move.l a0,-(sp)
    f9ec:	|      jsr 14d98 <getValueType>
    f9f2:	|      lea 12(sp),sp
    f9f6:	|      tst.w d0
    f9f8:	|  ,-- bne.s fa00 <builtIn_substring+0x68>
    f9fa:	|  |   moveq #1,d0
    f9fc:	+--|-- bra.w fb40 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    fa00:	|  '-> moveq #24,d0
    fa02:	|      add.l 56(sp),d0
    fa06:	|      move.l d0,-(sp)
    fa08:	|      jsr 1571c <trimStack>
    fa0e:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    fa10:	|      movea.l 56(sp),a0
    fa14:	|      move.l 24(a0),d0
    fa18:	|      move.l d0,-(sp)
    fa1a:	|      jsr 1536e <getTextFromAnyVar>
    fa20:	|      addq.l #4,sp
    fa22:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    fa26:	|      moveq #24,d0
    fa28:	|      add.l 56(sp),d0
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      jsr 1571c <trimStack>
    fa34:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    fa36:	|      move.l 44(sp),-(sp)
    fa3a:	|      jsr 14284 <strlen>
    fa40:	|      addq.l #4,sp
    fa42:	|      move.l d0,d1
    fa44:	|      move.l 12(sp),d0
    fa48:	|      movea.l d0,a0
    fa4a:	|      move.l 8(sp),d0
    fa4e:	|      add.l a0,d0
    fa50:	|      cmp.l d1,d0
    fa52:	|  ,-- bls.s fa88 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    fa54:	|  |   move.l 44(sp),-(sp)
    fa58:	|  |   jsr 14284 <strlen>
    fa5e:	|  |   addq.l #4,sp
    fa60:	|  |   move.l d0,d1
    fa62:	|  |   move.l 12(sp),d0
    fa66:	|  |   sub.l d0,d1
    fa68:	|  |   move.l d1,d0
    fa6a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    fa6e:	|  |   move.l 44(sp),-(sp)
    fa72:	|  |   jsr 14284 <strlen>
    fa78:	|  |   addq.l #4,sp
    fa7a:	|  |   move.l d0,d1
    fa7c:	|  |   move.l 12(sp),d0
    fa80:	|  |   cmp.l d1,d0
    fa82:	|  +-- bls.s fa88 <builtIn_substring+0xf0>
            start = 0;
    fa84:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    fa88:	|  '-> move.l 8(sp),d0
    fa8c:	|  ,-- bpl.s fa92 <builtIn_substring+0xfa>
        length = 0;
    fa8e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    fa92:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    fa98:	|      move.l 12(sp),d1
    fa9c:	|      move.l 8(sp),d0
    faa0:	|      move.l d1,d2
    faa2:	|      add.l d0,d2
    faa4:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    faa8:	|      move.l 36(sp),d0
    faac:	|      sub.l 40(sp),d0
    fab0:	|      addq.l #1,d0
    fab2:	|      move.l d0,32(sp)
    fab6:	|      clr.l 28(sp)
    faba:	|      move.l 1d0c6 <SysBase>,d0
    fac0:	|      movea.l d0,a6
    fac2:	|      move.l 32(sp),d0
    fac6:	|      move.l 28(sp),d1
    faca:	|      jsr -684(a6)
    face:	|      move.l d0,24(sp)
    fad2:	|      move.l 24(sp),d0
    fad6:	|      move.l d0,20(sp)
    if (!newString) {
    fada:	|  ,-- bne.s fae0 <builtIn_substring+0x148>
        return BR_ERROR;
    fadc:	|  |   moveq #1,d0
    fade:	+--|-- bra.s fb40 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    fae0:	|  '-> move.l 36(sp),d0
    fae4:	|      sub.l 40(sp),d0
    fae8:	|      move.l d0,d1
    faea:	|      move.l 40(sp),d0
    faee:	|      add.l 44(sp),d0
    faf2:	|      move.l d1,-(sp)
    faf4:	|      move.l d0,-(sp)
    faf6:	|      move.l 28(sp),-(sp)
    fafa:	|      jsr 1782c <memcpy>
    fb00:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    fb04:	|      move.l 36(sp),d0
    fb08:	|      sub.l 40(sp),d0
    fb0c:	|      movea.l 20(sp),a0
    fb10:	|      adda.l d0,a0
    fb12:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    fb14:	|      moveq #28,d0
    fb16:	|      add.l 56(sp),d0
    fb1a:	|      move.l 20(sp),-(sp)
    fb1e:	|      move.l d0,-(sp)
    fb20:	|      jsr 14fba <makeTextVar>
    fb26:	|      addq.l #8,sp
    FreeVec(newString);
    fb28:	|      move.l 20(sp),16(sp)
    fb2e:	|      move.l 1d0c6 <SysBase>,d0
    fb34:	|      movea.l d0,a6
    fb36:	|      movea.l 16(sp),a1
    fb3a:	|      jsr -690(a6)
    return BR_CONTINUE;
    fb3e:	|      moveq #2,d0
}
    fb40:	'----> move.l (sp)+,d2
    fb42:	       movea.l (sp)+,a6
    fb44:	       lea 40(sp),sp
    fb48:	       rts

0000fb4a <builtIn_stringLength>:

builtIn(stringLength)
{
    fb4a:	subq.l #8,sp
    fb4c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fb4e:	movea.l 20(sp),a0
    fb52:	move.l 24(a0),d0
    fb56:	move.l d0,-(sp)
    fb58:	jsr 1536e <getTextFromAnyVar>
    fb5e:	addq.l #4,sp
    fb60:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    fb64:	moveq #24,d0
    fb66:	add.l 20(sp),d0
    fb6a:	move.l d0,-(sp)
    fb6c:	jsr 1571c <trimStack>
    fb72:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    fb74:	move.l 8(sp),-(sp)
    fb78:	jsr 14284 <strlen>
    fb7e:	addq.l #4,sp
    fb80:	move.l d0,d1
    fb82:	moveq #28,d0
    fb84:	add.l 20(sp),d0
    fb88:	move.l d1,-(sp)
    fb8a:	pea 1 <_start+0x1>
    fb8e:	move.l d0,-(sp)
    fb90:	jsr 1568a <setVariable>
    fb96:	lea 12(sp),sp
	FreeVec(newText);
    fb9a:	move.l 8(sp),4(sp)
    fba0:	move.l 1d0c6 <SysBase>,d0
    fba6:	movea.l d0,a6
    fba8:	movea.l 4(sp),a1
    fbac:	jsr -690(a6)
	return BR_CONTINUE;
    fbb0:	moveq #2,d0
}
    fbb2:	movea.l (sp)+,a6
    fbb4:	addq.l #8,sp
    fbb6:	rts

0000fbb8 <builtIn_newStack>:

builtIn(newStack)
{
    fbb8:	             lea -12(sp),sp
    fbbc:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    fbbe:	             moveq #28,d0
    fbc0:	             add.l 24(sp),d0
    fbc4:	             move.l d0,-(sp)
    fbc6:	             jsr 14fe6 <unlinkVar>
    fbcc:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    fbce:	             movea.l 24(sp),a0
    fbd2:	             moveq #6,d0
    fbd4:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fbd8:	             moveq #12,d1
    fbda:	             move.l d1,12(sp)
    fbde:	             clr.l 8(sp)
    fbe2:	             move.l 1d0c6 <SysBase>,d0
    fbe8:	             movea.l d0,a6
    fbea:	             move.l 12(sp),d0
    fbee:	             move.l 8(sp),d1
    fbf2:	             jsr -684(a6)
    fbf6:	             move.l d0,4(sp)
    fbfa:	             move.l 4(sp),d0
    fbfe:	             movea.l 24(sp),a0
    fc02:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    fc06:	             movea.l 24(sp),a0
    fc0a:	             move.l 32(a0),d0
    fc0e:	         ,-- bne.s fc16 <builtIn_newStack+0x5e>
    fc10:	         |   moveq #1,d0
    fc12:	,--------|-- bra.w fca8 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    fc16:	|        '-> movea.l 24(sp),a0
    fc1a:	|            movea.l 32(a0),a0
    fc1e:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    fc20:	|            movea.l 24(sp),a0
    fc24:	|            movea.l 32(a0),a0
    fc28:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    fc2c:	|            movea.l 24(sp),a0
    fc30:	|            movea.l 32(a0),a0
    fc34:	|            moveq #1,d0
    fc36:	|            move.l d0,8(a0)
    
    while (numParams--) {
    fc3a:	|     ,----- bra.s fc96 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    fc3c:	|  ,--|----> movea.l 24(sp),a0
    fc40:	|  |  |      move.l 32(a0),d0
    fc44:	|  |  |      move.l d0,d1
    fc46:	|  |  |      movea.l 24(sp),a0
    fc4a:	|  |  |      move.l 24(a0),d0
    fc4e:	|  |  |      move.l d1,-(sp)
    fc50:	|  |  |      move.l d0,-(sp)
    fc52:	|  |  |      jsr 145d4 <addVarToStack>
    fc58:	|  |  |      addq.l #8,sp
    fc5a:	|  |  |      tst.w d0
    fc5c:	|  |  |  ,-- bne.s fc62 <builtIn_newStack+0xaa>
    fc5e:	|  |  |  |   moveq #1,d0
    fc60:	+--|--|--|-- bra.s fca8 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    fc62:	|  |  |  '-> movea.l 24(sp),a0
    fc66:	|  |  |      movea.l 32(a0),a0
    fc6a:	|  |  |      move.l 4(a0),d0
    fc6e:	|  |  |  ,-- bne.s fc86 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    fc70:	|  |  |  |   movea.l 24(sp),a0
    fc74:	|  |  |  |   movea.l 32(a0),a1
    fc78:	|  |  |  |   movea.l 24(sp),a0
    fc7c:	|  |  |  |   movea.l 32(a0),a0
    fc80:	|  |  |  |   move.l (a1),d0
    fc82:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    fc86:	|  |  |  '-> moveq #24,d0
    fc88:	|  |  |      add.l 24(sp),d0
    fc8c:	|  |  |      move.l d0,-(sp)
    fc8e:	|  |  |      jsr 1571c <trimStack>
    fc94:	|  |  |      addq.l #4,sp
    while (numParams--) {
    fc96:	|  |  '----> move.l 20(sp),d0
    fc9a:	|  |         move.l d0,d1
    fc9c:	|  |         subq.l #1,d1
    fc9e:	|  |         move.l d1,20(sp)
    fca2:	|  |         tst.l d0
    fca4:	|  '-------- bne.s fc3c <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    fca6:	|            moveq #2,d0
}
    fca8:	'----------> movea.l (sp)+,a6
    fcaa:	             lea 12(sp),sp
    fcae:	             rts

0000fcb0 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    fcb0:	          movea.l 8(sp),a0
    fcb4:	          movea.l 24(a0),a0
    fcb8:	          move.l (a0),d0
    fcba:	          moveq #6,d1
    fcbc:	          cmp.l d0,d1
    fcbe:	      ,-- beq.s fcda <builtIn_stackSize+0x2a>
    fcc0:	      |   moveq #10,d1
    fcc2:	      |   cmp.l d0,d1
    fcc4:	   ,--|-- beq.s fd1e <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    fcc6:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    fcc8:	   |  |   pea 1a01c <PutChar+0x1d02>
    fcce:	   |  |   jsr 17878 <KPrintF>
    fcd4:	   |  |   addq.l #4,sp
	return BR_ERROR;
    fcd6:	   |  |   moveq #1,d0
    fcd8:	,--|--|-- bra.s fd58 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    fcda:	|  |  '-> movea.l 8(sp),a0
    fcde:	|  |      movea.l 24(a0),a0
    fce2:	|  |      move.l 4(a0),d0
    fce6:	|  |      move.l d0,-(sp)
    fce8:	|  |      jsr 156f8 <stackSize>
    fcee:	|  |      addq.l #4,sp
    fcf0:	|  |      move.l d0,d1
    fcf2:	|  |      moveq #28,d0
    fcf4:	|  |      add.l 8(sp),d0
    fcf8:	|  |      move.l d1,-(sp)
    fcfa:	|  |      pea 1 <_start+0x1>
    fcfe:	|  |      move.l d0,-(sp)
    fd00:	|  |      jsr 1568a <setVariable>
    fd06:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    fd0a:	|  |      moveq #24,d0
    fd0c:	|  |      add.l 8(sp),d0
    fd10:	|  |      move.l d0,-(sp)
    fd12:	|  |      jsr 1571c <trimStack>
    fd18:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    fd1a:	|  |      moveq #2,d0
    fd1c:	+--|----- bra.s fd58 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    fd1e:	|  '----> movea.l 8(sp),a0
    fd22:	|         movea.l 24(a0),a0
    fd26:	|         movea.l 4(a0),a0
    fd2a:	|         move.l 4(a0),d1
    fd2e:	|         moveq #28,d0
    fd30:	|         add.l 8(sp),d0
    fd34:	|         move.l d1,-(sp)
    fd36:	|         pea 1 <_start+0x1>
    fd3a:	|         move.l d0,-(sp)
    fd3c:	|         jsr 1568a <setVariable>
    fd42:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    fd46:	|         moveq #24,d0
    fd48:	|         add.l 8(sp),d0
    fd4c:	|         move.l d0,-(sp)
    fd4e:	|         jsr 1571c <trimStack>
    fd54:	|         addq.l #4,sp
			return BR_CONTINUE;
    fd56:	|         moveq #2,d0
}
    fd58:	'-------> rts

0000fd5a <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd5a:	       movea.l 8(sp),a0
    fd5e:	       movea.l 24(a0),a0
    fd62:	       move.l (a0),d0
    fd64:	       moveq #6,d1
    fd66:	       cmp.l d0,d1
    fd68:	   ,-- beq.s fd7c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd6a:	   |   pea 1a045 <PutChar+0x1d2b>
    fd70:	   |   jsr 17878 <KPrintF>
    fd76:	   |   addq.l #4,sp
		return BR_ERROR;
    fd78:	   |   moveq #1,d0
    fd7a:	,--|-- bra.s fdb0 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fd7c:	|  '-> moveq #28,d0
    fd7e:	|      add.l 8(sp),d0
    fd82:	|      movea.l 8(sp),a0
    fd86:	|      move.l 24(a0),d1
    fd8a:	|      move.l d0,-(sp)
    fd8c:	|      move.l d1,-(sp)
    fd8e:	|      jsr 1489e <copyStack>
    fd94:	|      addq.l #8,sp
    fd96:	|      tst.w d0
    fd98:	|  ,-- bne.s fd9e <builtIn_copyStack+0x44>
    fd9a:	|  |   moveq #1,d0
    fd9c:	+--|-- bra.s fdb0 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fd9e:	|  '-> moveq #24,d0
    fda0:	|      add.l 8(sp),d0
    fda4:	|      move.l d0,-(sp)
    fda6:	|      jsr 1571c <trimStack>
    fdac:	|      addq.l #4,sp
	return BR_CONTINUE;
    fdae:	|      moveq #2,d0
}
    fdb0:	'----> rts

0000fdb2 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fdb2:	       movea.l 8(sp),a0
    fdb6:	       movea.l 24(a0),a0
    fdba:	       movea.l 8(a0),a0
    fdbe:	       move.l (a0),d0
    fdc0:	       moveq #6,d1
    fdc2:	       cmp.l d0,d1
    fdc4:	   ,-- beq.s fdda <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fdc6:	   |   pea 1a05e <PutChar+0x1d44>
    fdcc:	   |   jsr 17878 <KPrintF>
    fdd2:	   |   addq.l #4,sp
		return BR_ERROR;
    fdd4:	   |   moveq #1,d0
    fdd6:	,--|-- bra.w fe68 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fdda:	|  '-> movea.l 8(sp),a0
    fdde:	|      movea.l 24(a0),a0
    fde2:	|      movea.l 8(a0),a0
    fde6:	|      move.l 4(a0),d0
    fdea:	|      move.l d0,d1
    fdec:	|      movea.l 8(sp),a0
    fdf0:	|      move.l 24(a0),d0
    fdf4:	|      move.l d1,-(sp)
    fdf6:	|      move.l d0,-(sp)
    fdf8:	|      jsr 145d4 <addVarToStack>
    fdfe:	|      addq.l #8,sp
    fe00:	|      tst.w d0
    fe02:	|  ,-- bne.s fe08 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    fe04:	|  |   moveq #1,d0
    fe06:	+--|-- bra.s fe68 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    fe08:	|  '-> movea.l 8(sp),a0
    fe0c:	|      movea.l 24(a0),a0
    fe10:	|      movea.l 8(a0),a0
    fe14:	|      movea.l 4(a0),a0
    fe18:	|      movea.l (a0),a0
    fe1a:	|      move.l 8(a0),d0
    fe1e:	|  ,-- bne.s fe46 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fe20:	|  |   movea.l 8(sp),a0
    fe24:	|  |   movea.l 24(a0),a0
    fe28:	|  |   movea.l 8(a0),a0
    fe2c:	|  |   movea.l 4(a0),a1
    fe30:	|  |   movea.l 8(sp),a0
    fe34:	|  |   movea.l 24(a0),a0
    fe38:	|  |   movea.l 8(a0),a0
    fe3c:	|  |   movea.l 4(a0),a0
    fe40:	|  |   move.l (a1),d0
    fe42:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fe46:	|  '-> moveq #24,d0
    fe48:	|      add.l 8(sp),d0
    fe4c:	|      move.l d0,-(sp)
    fe4e:	|      jsr 1571c <trimStack>
    fe54:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fe56:	|      moveq #24,d0
    fe58:	|      add.l 8(sp),d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      jsr 1571c <trimStack>
    fe64:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe66:	|      moveq #2,d0
}
    fe68:	'----> rts

0000fe6a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fe6a:	             movea.l 8(sp),a0
    fe6e:	             movea.l 24(a0),a0
    fe72:	             movea.l 8(a0),a0
    fe76:	             move.l (a0),d0
    fe78:	             moveq #6,d1
    fe7a:	             cmp.l d0,d1
    fe7c:	         ,-- beq.s fe92 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fe7e:	         |   pea 1a05e <PutChar+0x1d44>
    fe84:	         |   jsr 17878 <KPrintF>
    fe8a:	         |   addq.l #4,sp
		return BR_ERROR;
    fe8c:	         |   moveq #1,d0
    fe8e:	,--------|-- bra.w ff80 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fe92:	|        '-> movea.l 8(sp),a0
    fe96:	|            movea.l 24(a0),a0
    fe9a:	|            movea.l 8(a0),a0
    fe9e:	|            movea.l 4(a0),a0
    fea2:	|            move.l (a0),d0
    fea4:	|     ,----- bne.s fefe <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fea6:	|     |      movea.l 8(sp),a0
    feaa:	|     |      movea.l 24(a0),a0
    feae:	|     |      movea.l 8(a0),a0
    feb2:	|     |      move.l 4(a0),d0
    feb6:	|     |      move.l d0,d1
    feb8:	|     |      movea.l 8(sp),a0
    febc:	|     |      move.l 24(a0),d0
    fec0:	|     |      move.l d1,-(sp)
    fec2:	|     |      move.l d0,-(sp)
    fec4:	|     |      jsr 145d4 <addVarToStack>
    feca:	|     |      addq.l #8,sp
    fecc:	|     |      tst.w d0
    fece:	|     |  ,-- bne.s fed6 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fed0:	|     |  |   moveq #1,d0
    fed2:	+-----|--|-- bra.w ff80 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fed6:	|     |  '-> movea.l 8(sp),a0
    feda:	|     |      movea.l 24(a0),a0
    fede:	|     |      movea.l 8(a0),a0
    fee2:	|     |      movea.l 4(a0),a1
    fee6:	|     |      movea.l 8(sp),a0
    feea:	|     |      movea.l 24(a0),a0
    feee:	|     |      movea.l 8(a0),a0
    fef2:	|     |      movea.l 4(a0),a0
    fef6:	|     |      move.l (a1),d0
    fef8:	|     |      move.l d0,4(a0)
    fefc:	|  ,--|----- bra.s ff5e <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fefe:	|  |  '----> movea.l 8(sp),a0
    ff02:	|  |         movea.l 24(a0),a0
    ff06:	|  |         movea.l 8(a0),a0
    ff0a:	|  |         movea.l 4(a0),a0
    ff0e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    ff12:	|  |         move.l d0,d1
    ff14:	|  |         addq.l #8,d1
    ff16:	|  |         movea.l 8(sp),a0
    ff1a:	|  |         move.l 24(a0),d0
    ff1e:	|  |         move.l d1,-(sp)
    ff20:	|  |         move.l d0,-(sp)
    ff22:	|  |         jsr 145d4 <addVarToStack>
    ff28:	|  |         addq.l #8,sp
    ff2a:	|  |         tst.w d0
    ff2c:	|  |     ,-- bne.s ff32 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    ff2e:	|  |     |   moveq #1,d0
    ff30:	+--|-----|-- bra.s ff80 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    ff32:	|  |     '-> movea.l 8(sp),a0
    ff36:	|  |         movea.l 24(a0),a0
    ff3a:	|  |         movea.l 8(a0),a0
    ff3e:	|  |         movea.l 4(a0),a0
    ff42:	|  |         movea.l 4(a0),a1
    ff46:	|  |         movea.l 8(sp),a0
    ff4a:	|  |         movea.l 24(a0),a0
    ff4e:	|  |         movea.l 8(a0),a0
    ff52:	|  |         movea.l 4(a0),a0
    ff56:	|  |         move.l 8(a1),d0
    ff5a:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    ff5e:	|  '-------> moveq #24,d0
    ff60:	|            add.l 8(sp),d0
    ff64:	|            move.l d0,-(sp)
    ff66:	|            jsr 1571c <trimStack>
    ff6c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    ff6e:	|            moveq #24,d0
    ff70:	|            add.l 8(sp),d0
    ff74:	|            move.l d0,-(sp)
    ff76:	|            jsr 1571c <trimStack>
    ff7c:	|            addq.l #4,sp
	return BR_CONTINUE;
    ff7e:	|            moveq #2,d0
}
    ff80:	'----------> rts

0000ff82 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    ff82:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ff84:	       movea.l 12(sp),a0
    ff88:	       movea.l 24(a0),a0
    ff8c:	       movea.l 8(a0),a0
    ff90:	       move.l (a0),d0
    ff92:	       moveq #6,d1
    ff94:	       cmp.l d0,d1
    ff96:	   ,-- beq.s ffac <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ff98:	   |   pea 1a045 <PutChar+0x1d2b>
    ff9e:	   |   jsr 17878 <KPrintF>
    ffa4:	   |   addq.l #4,sp
		return BR_ERROR;
    ffa6:	   |   moveq #1,d0
    ffa8:	,--|-- bra.w 10042 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ffac:	|  '-> movea.l 12(sp),a0
    ffb0:	|      movea.l 24(a0),a0
    ffb4:	|      movea.l 8(a0),a0
    ffb8:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ffbc:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ffbe:	|      movea.l 12(sp),a0
    ffc2:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ffc6:	|      clr.l -(sp)
    ffc8:	|      move.l d1,-(sp)
    ffca:	|      move.l d0,-(sp)
    ffcc:	|      jsr 14974 <deleteVarFromStack>
    ffd2:	|      lea 12(sp),sp
    ffd6:	|      move.l d0,d1
    ffd8:	|      moveq #28,d0
    ffda:	|      add.l 12(sp),d0
    ffde:	|      move.l d1,-(sp)
    ffe0:	|      pea 1 <_start+0x1>
    ffe4:	|      move.l d0,-(sp)
    ffe6:	|      jsr 1568a <setVariable>
    ffec:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fff0:	|      movea.l 12(sp),a0
    fff4:	|      movea.l 24(a0),a0
    fff8:	|      movea.l 8(a0),a0
    fffc:	|      movea.l 4(a0),a0
   10000:	|      move.l (a0),d0
   10002:	|      movea.l 12(sp),a0
   10006:	|      movea.l 24(a0),a0
   1000a:	|      movea.l 8(a0),a0
   1000e:	|      movea.l 4(a0),a2
   10012:	|      move.l d0,-(sp)
   10014:	|      jsr 156d4 <stackFindLast>
   1001a:	|      addq.l #4,sp
   1001c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   10020:	|      moveq #24,d0
   10022:	|      add.l 12(sp),d0
   10026:	|      move.l d0,-(sp)
   10028:	|      jsr 1571c <trimStack>
   1002e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10030:	|      moveq #24,d0
   10032:	|      add.l 12(sp),d0
   10036:	|      move.l d0,-(sp)
   10038:	|      jsr 1571c <trimStack>
   1003e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10040:	|      moveq #2,d0
}
   10042:	'----> movea.l (sp)+,a2
   10044:	       rts

00010046 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   10046:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10048:	       movea.l 12(sp),a0
   1004c:	       movea.l 24(a0),a0
   10050:	       movea.l 8(a0),a0
   10054:	       move.l (a0),d0
   10056:	       moveq #6,d1
   10058:	       cmp.l d0,d1
   1005a:	   ,-- beq.s 10070 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
   1005c:	   |   pea 1a045 <PutChar+0x1d2b>
   10062:	   |   jsr 17878 <KPrintF>
   10068:	   |   addq.l #4,sp
		return BR_ERROR;
   1006a:	   |   moveq #1,d0
   1006c:	,--|-- bra.w 10108 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   10070:	|  '-> movea.l 12(sp),a0
   10074:	|      movea.l 24(a0),a0
   10078:	|      movea.l 8(a0),a0
   1007c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10080:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10082:	|      movea.l 12(sp),a0
   10086:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   1008a:	|      pea 1 <_start+0x1>
   1008e:	|      move.l d1,-(sp)
   10090:	|      move.l d0,-(sp)
   10092:	|      jsr 14974 <deleteVarFromStack>
   10098:	|      lea 12(sp),sp
   1009c:	|      move.l d0,d1
   1009e:	|      moveq #28,d0
   100a0:	|      add.l 12(sp),d0
   100a4:	|      move.l d1,-(sp)
   100a6:	|      pea 1 <_start+0x1>
   100aa:	|      move.l d0,-(sp)
   100ac:	|      jsr 1568a <setVariable>
   100b2:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   100b6:	|      movea.l 12(sp),a0
   100ba:	|      movea.l 24(a0),a0
   100be:	|      movea.l 8(a0),a0
   100c2:	|      movea.l 4(a0),a0
   100c6:	|      move.l (a0),d0
   100c8:	|      movea.l 12(sp),a0
   100cc:	|      movea.l 24(a0),a0
   100d0:	|      movea.l 8(a0),a0
   100d4:	|      movea.l 4(a0),a2
   100d8:	|      move.l d0,-(sp)
   100da:	|      jsr 156d4 <stackFindLast>
   100e0:	|      addq.l #4,sp
   100e2:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   100e6:	|      moveq #24,d0
   100e8:	|      add.l 12(sp),d0
   100ec:	|      move.l d0,-(sp)
   100ee:	|      jsr 1571c <trimStack>
   100f4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   100f6:	|      moveq #24,d0
   100f8:	|      add.l 12(sp),d0
   100fc:	|      move.l d0,-(sp)
   100fe:	|      jsr 1571c <trimStack>
   10104:	|      addq.l #4,sp
	return BR_CONTINUE;
   10106:	|      moveq #2,d0
} 
   10108:	'----> movea.l (sp)+,a2
   1010a:	       rts

0001010c <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1010c:	       movea.l 8(sp),a0
   10110:	       movea.l 24(a0),a0
   10114:	       move.l (a0),d0
   10116:	       moveq #6,d1
   10118:	       cmp.l d0,d1
   1011a:	   ,-- beq.s 1012e <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
   1011c:	   |   pea 1a045 <PutChar+0x1d2b>
   10122:	   |   jsr 17878 <KPrintF>
   10128:	   |   addq.l #4,sp
		return BR_ERROR;
   1012a:	   |   moveq #1,d0
   1012c:	,--|-- bra.s 10198 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   1012e:	|  '-> movea.l 8(sp),a0
   10132:	|      movea.l 24(a0),a0
   10136:	|      movea.l 4(a0),a0
   1013a:	|      move.l (a0),d0
   1013c:	|  ,-- bne.s 10150 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
   1013e:	|  |   pea 1a076 <PutChar+0x1d5c>
   10144:	|  |   jsr 17878 <KPrintF>
   1014a:	|  |   addq.l #4,sp
		return BR_ERROR;
   1014c:	|  |   moveq #1,d0
   1014e:	+--|-- bra.s 10198 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10150:	|  '-> moveq #28,d0
   10152:	|      add.l 8(sp),d0
   10156:	|      movea.l 8(sp),a0
   1015a:	|      movea.l 24(a0),a0
   1015e:	|      movea.l 4(a0),a0
   10162:	|      move.l (a0),d1
   10164:	|      move.l d0,-(sp)
   10166:	|      move.l d1,-(sp)
   10168:	|      jsr 15252 <copyVariable>
   1016e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   10170:	|      movea.l 8(sp),a0
   10174:	|      movea.l 24(a0),a0
   10178:	|      move.l 4(a0),d0
   1017c:	|      move.l d0,-(sp)
   1017e:	|      jsr 1571c <trimStack>
   10184:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10186:	|      moveq #24,d0
   10188:	|      add.l 8(sp),d0
   1018c:	|      move.l d0,-(sp)
   1018e:	|      jsr 1571c <trimStack>
   10194:	|      addq.l #4,sp
	return BR_CONTINUE;
   10196:	|      moveq #2,d0
}
   10198:	'----> rts

0001019a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1019a:	       movea.l 8(sp),a0
   1019e:	       movea.l 24(a0),a0
   101a2:	       move.l (a0),d0
   101a4:	       moveq #6,d1
   101a6:	       cmp.l d0,d1
   101a8:	   ,-- beq.s 101bc <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
   101aa:	   |   pea 1a045 <PutChar+0x1d2b>
   101b0:	   |   jsr 17878 <KPrintF>
   101b6:	   |   addq.l #4,sp
		return BR_ERROR;
   101b8:	   |   moveq #1,d0
   101ba:	,--|-- bra.s 10210 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   101bc:	|  '-> movea.l 8(sp),a0
   101c0:	|      movea.l 24(a0),a0
   101c4:	|      movea.l 4(a0),a0
   101c8:	|      move.l (a0),d0
   101ca:	|  ,-- bne.s 101de <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
   101cc:	|  |   pea 1a076 <PutChar+0x1d5c>
   101d2:	|  |   jsr 17878 <KPrintF>
   101d8:	|  |   addq.l #4,sp
		return BR_ERROR;
   101da:	|  |   moveq #1,d0
   101dc:	+--|-- bra.s 10210 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   101de:	|  '-> moveq #28,d0
   101e0:	|      add.l 8(sp),d0
   101e4:	|      movea.l 8(sp),a0
   101e8:	|      movea.l 24(a0),a0
   101ec:	|      movea.l 4(a0),a0
   101f0:	|      move.l (a0),d1
   101f2:	|      move.l d0,-(sp)
   101f4:	|      move.l d1,-(sp)
   101f6:	|      jsr 15252 <copyVariable>
   101fc:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   101fe:	|      moveq #24,d0
   10200:	|      add.l 8(sp),d0
   10204:	|      move.l d0,-(sp)
   10206:	|      jsr 1571c <trimStack>
   1020c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1020e:	|      moveq #2,d0
}
   10210:	'----> rts

00010212 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10212:	       movea.l 8(sp),a0
   10216:	       movea.l 24(a0),a0
   1021a:	       move.l (a0),d0
   1021c:	       moveq #6,d1
   1021e:	       cmp.l d0,d1
   10220:	   ,-- beq.s 10234 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
   10222:	   |   pea 1a045 <PutChar+0x1d2b>
   10228:	   |   jsr 17878 <KPrintF>
   1022e:	   |   addq.l #4,sp
		return BR_ERROR;
   10230:	   |   moveq #1,d0
   10232:	,--|-- bra.s 1028a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10234:	|  '-> movea.l 8(sp),a0
   10238:	|      movea.l 24(a0),a0
   1023c:	|      movea.l 4(a0),a0
   10240:	|      move.l (a0),d0
   10242:	|  ,-- bne.s 10256 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
   10244:	|  |   pea 1a076 <PutChar+0x1d5c>
   1024a:	|  |   jsr 17878 <KPrintF>
   10250:	|  |   addq.l #4,sp
		return BR_ERROR;
   10252:	|  |   moveq #1,d0
   10254:	+--|-- bra.s 1028a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   10256:	|  '-> moveq #28,d0
   10258:	|      add.l 8(sp),d0
   1025c:	|      movea.l 8(sp),a0
   10260:	|      movea.l 24(a0),a0
   10264:	|      movea.l 4(a0),a0
   10268:	|      move.l 4(a0),d1
   1026c:	|      move.l d0,-(sp)
   1026e:	|      move.l d1,-(sp)
   10270:	|      jsr 15252 <copyVariable>
   10276:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10278:	|      moveq #24,d0
   1027a:	|      add.l 8(sp),d0
   1027e:	|      move.l d0,-(sp)
   10280:	|      jsr 1571c <trimStack>
   10286:	|      addq.l #4,sp
	return BR_CONTINUE;
   10288:	|      moveq #2,d0
}
   1028a:	'----> rts

0001028c <builtIn_random>:

builtIn(random)
{
   1028c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   1028e:	       movea.l 12(sp),a0
   10292:	       move.l 24(a0),d0
   10296:	       move.l d0,-(sp)
   10298:	       pea 1 <_start+0x1>
   1029c:	       move.l sp,d0
   1029e:	       addq.l #8,d0
   102a0:	       move.l d0,-(sp)
   102a2:	       jsr 14d98 <getValueType>
   102a8:	       lea 12(sp),sp
   102ac:	       tst.w d0
   102ae:	   ,-- bne.s 102b4 <builtIn_random+0x28>
		return BR_ERROR;
   102b0:	   |   moveq #1,d0
   102b2:	,--|-- bra.s 102fe <builtIn_random+0x72>

	trimStack (&fun -> stack);
   102b4:	|  '-> moveq #24,d0
   102b6:	|      add.l 12(sp),d0
   102ba:	|      move.l d0,-(sp)
   102bc:	|      jsr 1571c <trimStack>
   102c2:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   102c4:	|      move.l (sp),d0
   102c6:	|  ,-- bgt.s 102cc <builtIn_random+0x40>
   102c8:	|  |   moveq #1,d0
   102ca:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   102cc:	|  '-> jsr 16438 <rand>
   102d2:	|      move.l d0,d1
   102d4:	|      move.l (sp),d0
   102d6:	|      move.l d0,-(sp)
   102d8:	|      move.l d1,-(sp)
   102da:	|      jsr 182de <__umodsi3>
   102e0:	|      addq.l #8,sp
   102e2:	|      move.l d0,d1
   102e4:	|      moveq #28,d0
   102e6:	|      add.l 12(sp),d0
   102ea:	|      move.l d1,-(sp)
   102ec:	|      pea 1 <_start+0x1>
   102f0:	|      move.l d0,-(sp)
   102f2:	|      jsr 1568a <setVariable>
   102f8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   102fc:	|      moveq #2,d0
}
   102fe:	'----> addq.l #4,sp
   10300:	       rts

00010302 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10302:	nop
   10304:	rts

00010306 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   10306:	moveq #2,d0
}
   10308:	rts

0001030a <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   1030a:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   1030c:	       movea.l 12(sp),a0
   10310:	       move.l 24(a0),d0
   10314:	       move.l d0,-(sp)
   10316:	       pea 1 <_start+0x1>
   1031a:	       move.l sp,d0
   1031c:	       addq.l #8,d0
   1031e:	       move.l d0,-(sp)
   10320:	       jsr 14d98 <getValueType>
   10326:	       lea 12(sp),sp
   1032a:	       tst.w d0
   1032c:	   ,-- bne.s 10340 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
   1032e:	   |   pea 1a089 <PutChar+0x1d6f>
   10334:	   |   jsr 17878 <KPrintF>
   1033a:	   |   addq.l #4,sp
		return BR_ERROR;
   1033c:	   |   moveq #1,d0
   1033e:	,--|-- bra.s 10380 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
   10340:	|  '-> moveq #24,d0
   10342:	|      add.l 12(sp),d0
   10346:	|      move.l d0,-(sp)
   10348:	|      jsr 1571c <trimStack>
   1034e:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10350:	|      move.l (sp),d0
   10352:	|      move.l d0,d0
   10354:	|      move.w d0,1cfd4 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   1035a:	|      move.w 1cfd4 <textPaletteIndex>,d0
   10360:	|      cmpi.w #31,d0
   10364:	|  ,-- bls.s 1037e <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10366:	|  |   pea 1a0b0 <PutChar+0x1d96>
   1036c:	|  |   jsr 17878 <KPrintF>
   10372:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10374:	|  |   clr.w 1cfd4 <textPaletteIndex>
		return BR_ERROR;
   1037a:	|  |   moveq #1,d0
   1037c:	+--|-- bra.s 10380 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   1037e:	|  '-> moveq #2,d0
}
   10380:	'----> addq.l #4,sp
   10382:	       rts

00010384 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10384:	moveq #2,d0
}
   10386:	rts

00010388 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10388:	moveq #2,d0
}
   1038a:	rts

0001038c <builtIn_setFont>:


builtIn(setFont)
{
   1038c:	       lea -16(sp),sp
   10390:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10392:	       movea.l 28(sp),a0
   10396:	       move.l 24(a0),d0
   1039a:	       move.l d0,-(sp)
   1039c:	       pea 1 <_start+0x1>
   103a0:	       lea 12(sp),a0
   103a4:	       move.l a0,-(sp)
   103a6:	       jsr 14d98 <getValueType>
   103ac:	       lea 12(sp),sp
   103b0:	       tst.w d0
   103b2:	   ,-- bne.s 103ba <builtIn_setFont+0x2e>
   103b4:	   |   moveq #1,d0
   103b6:	,--|-- bra.w 10468 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   103ba:	|  '-> moveq #24,d0
   103bc:	|      add.l 28(sp),d0
   103c0:	|      move.l d0,-(sp)
   103c2:	|      jsr 1571c <trimStack>
   103c8:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   103ca:	|      movea.l 28(sp),a0
   103ce:	|      move.l 24(a0),d0
   103d2:	|      move.l d0,-(sp)
   103d4:	|      jsr 1536e <getTextFromAnyVar>
   103da:	|      addq.l #4,sp
   103dc:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   103e0:	|  ,-- bne.s 103e8 <builtIn_setFont+0x5c>
   103e2:	|  |   moveq #1,d0
   103e4:	+--|-- bra.w 10468 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   103e8:	|  '-> moveq #24,d0
   103ea:	|      add.l 28(sp),d0
   103ee:	|      move.l d0,-(sp)
   103f0:	|      jsr 1571c <trimStack>
   103f6:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   103f8:	|      movea.l 28(sp),a0
   103fc:	|      move.l 24(a0),d0
   10400:	|      move.l d0,-(sp)
   10402:	|      pea 5 <_start+0x5>
   10406:	|      lea 16(sp),a0
   1040a:	|      move.l a0,-(sp)
   1040c:	|      jsr 14d98 <getValueType>
   10412:	|      lea 12(sp),sp
   10416:	|      tst.w d0
   10418:	|  ,-- bne.s 1041e <builtIn_setFont+0x92>
   1041a:	|  |   moveq #1,d0
   1041c:	+--|-- bra.s 10468 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   1041e:	|  '-> moveq #24,d0
   10420:	|      add.l 28(sp),d0
   10424:	|      move.l d0,-(sp)
   10426:	|      jsr 1571c <trimStack>
   1042c:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   1042e:	|      move.l 4(sp),d1
   10432:	|      move.l 8(sp),d0
   10436:	|      move.l d1,-(sp)
   10438:	|      move.l 20(sp),-(sp)
   1043c:	|      move.l d0,-(sp)
   1043e:	|      jsr 15bd0 <loadFont>
   10444:	|      lea 12(sp),sp
   10448:	|      tst.w d0
   1044a:	|  ,-- bne.s 10450 <builtIn_setFont+0xc4>
   1044c:	|  |   moveq #1,d0
   1044e:	+--|-- bra.s 10468 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10450:	|  '-> move.l 16(sp),12(sp)
   10456:	|      move.l 1d0c6 <SysBase>,d0
   1045c:	|      movea.l d0,a6
   1045e:	|      movea.l 12(sp),a1
   10462:	|      jsr -690(a6)

    return BR_CONTINUE;
   10466:	|      moveq #2,d0
}
   10468:	'----> movea.l (sp)+,a6
   1046a:	       lea 16(sp),sp
   1046e:	       rts

00010470 <builtIn_inFont>:

builtIn(inFont)
{
   10470:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10472:	       movea.l 12(sp),a0
   10476:	       move.l 24(a0),d0
   1047a:	       move.l d0,-(sp)
   1047c:	       jsr 1536e <getTextFromAnyVar>
   10482:	       addq.l #4,sp
   10484:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10486:	   ,-- bne.s 1048c <builtIn_inFont+0x1c>
   10488:	   |   moveq #1,d0
   1048a:	,--|-- bra.s 104c2 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   1048c:	|  '-> moveq #24,d0
   1048e:	|      add.l 12(sp),d0
   10492:	|      move.l d0,-(sp)
   10494:	|      jsr 1571c <trimStack>
   1049a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   1049c:	|      move.l (sp),-(sp)
   1049e:	|      jsr 15bbe <isInFont>
   104a4:	|      addq.l #4,sp
   104a6:	|      movea.w d0,a0
   104a8:	|      moveq #28,d0
   104aa:	|      add.l 12(sp),d0
   104ae:	|      move.l a0,-(sp)
   104b0:	|      pea 1 <_start+0x1>
   104b4:	|      move.l d0,-(sp)
   104b6:	|      jsr 1568a <setVariable>
   104bc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104c0:	|      moveq #2,d0
}
   104c2:	'----> addq.l #4,sp
   104c4:	       rts

000104c6 <builtIn_pasteString>:

builtIn(pasteString)
{
   104c6:	       lea -16(sp),sp
   104ca:	       move.l a6,-(sp)
   104cc:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   104ce:	       movea.l 32(sp),a0
   104d2:	       move.l 24(a0),d0
   104d6:	       move.l d0,-(sp)
   104d8:	       jsr 1536e <getTextFromAnyVar>
   104de:	       addq.l #4,sp
   104e0:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   104e4:	       moveq #24,d0
   104e6:	       add.l 32(sp),d0
   104ea:	       move.l d0,-(sp)
   104ec:	       jsr 1571c <trimStack>
   104f2:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   104f4:	       movea.l 32(sp),a0
   104f8:	       move.l 24(a0),d0
   104fc:	       move.l d0,-(sp)
   104fe:	       pea 1 <_start+0x1>
   10502:	       lea 20(sp),a0
   10506:	       move.l a0,-(sp)
   10508:	       jsr 14d98 <getValueType>
   1050e:	       lea 12(sp),sp
   10512:	       tst.w d0
   10514:	   ,-- bne.s 1051c <builtIn_pasteString+0x56>
   10516:	   |   moveq #1,d0
   10518:	,--|-- bra.w 105be <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   1051c:	|  '-> moveq #24,d0
   1051e:	|      add.l 32(sp),d0
   10522:	|      move.l d0,-(sp)
   10524:	|      jsr 1571c <trimStack>
   1052a:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1052c:	|      movea.l 32(sp),a0
   10530:	|      move.l 24(a0),d0
   10534:	|      move.l d0,-(sp)
   10536:	|      pea 1 <_start+0x1>
   1053a:	|      lea 16(sp),a0
   1053e:	|      move.l a0,-(sp)
   10540:	|      jsr 14d98 <getValueType>
   10546:	|      lea 12(sp),sp
   1054a:	|      tst.w d0
   1054c:	|  ,-- bne.s 10552 <builtIn_pasteString+0x8c>
   1054e:	|  |   moveq #1,d0
   10550:	+--|-- bra.s 105be <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10552:	|  '-> moveq #24,d0
   10554:	|      add.l 32(sp),d0
   10558:	|      move.l d0,-(sp)
   1055a:	|      jsr 1571c <trimStack>
   10560:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10562:	|      move.l 8(sp),d0
   10566:	|      cmpi.l #65535,d0
   1056c:	|  ,-- bne.s 1058c <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   1056e:	|  |   move.l 1d01a <winWidth>,d2
   10574:	|  |   move.l 20(sp),-(sp)
   10578:	|  |   jsr 15e82 <stringWidth>
   1057e:	|  |   addq.l #4,sp
   10580:	|  |   move.l d2,d1
   10582:	|  |   sub.l d0,d1
   10584:	|  |   move.l d1,d0
   10586:	|  |   lsr.l #1,d0
   10588:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1058c:	|  '-> move.l 12(sp),d1
   10590:	|      move.l 8(sp),d0
   10594:	|      move.l d1,-(sp)
   10596:	|      move.l d0,-(sp)
   10598:	|      move.l 28(sp),-(sp)
   1059c:	|      jsr 15da4 <pasteStringToBackdrop>
   105a2:	|      lea 12(sp),sp
    FreeVec(newText); 
   105a6:	|      move.l 20(sp),16(sp)
   105ac:	|      move.l 1d0c6 <SysBase>,d0
   105b2:	|      movea.l d0,a6
   105b4:	|      movea.l 16(sp),a1
   105b8:	|      jsr -690(a6)
    return BR_CONTINUE;
   105bc:	|      moveq #2,d0
}
   105be:	'----> move.l (sp)+,d2
   105c0:	       movea.l (sp)+,a6
   105c2:	       lea 16(sp),sp
   105c6:	       rts

000105c8 <builtIn_anim>:

builtIn(anim)
{
   105c8:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   105cc:	       moveq #1,d0
   105ce:	       cmp.l 16(sp),d0
   105d2:	   ,-- blt.s 105e8 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   105d4:	   |   pea 1a0da <PutChar+0x1dc0>
   105da:	   |   jsr 17878 <KPrintF>
   105e0:	   |   addq.l #4,sp
		return BR_ERROR;
   105e2:	   |   moveq #1,d0
   105e4:	,--|-- bra.w 10676 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   105e8:	|  '-> moveq #24,d1
   105ea:	|      add.l 20(sp),d1
   105ee:	|      move.l 16(sp),d0
   105f2:	|      subq.l #1,d0
   105f4:	|      move.l d1,-(sp)
   105f6:	|      move.l d0,-(sp)
   105f8:	|      jsr 9bfa <createPersonaAnim>
   105fe:	|      addq.l #8,sp
   10600:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10604:	|      movea.l 20(sp),a0
   10608:	|      move.l 24(a0),d0
   1060c:	|      move.l d0,-(sp)
   1060e:	|      pea 5 <_start+0x5>
   10612:	|      lea 8(sp),a0
   10616:	|      move.l a0,-(sp)
   10618:	|      jsr 14d98 <getValueType>
   1061e:	|      lea 12(sp),sp
   10622:	|      tst.w d0
   10624:	|  ,-- bne.s 1062a <builtIn_anim+0x62>
   10626:	|  |   moveq #1,d0
   10628:	+--|-- bra.s 10676 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   1062a:	|  '-> moveq #24,d0
   1062c:	|      add.l 20(sp),d0
   10630:	|      move.l d0,-(sp)
   10632:	|      jsr 1571c <trimStack>
   10638:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   1063a:	|      move.l (sp),d0
   1063c:	|      move.l d0,-(sp)
   1063e:	|      jsr 1659a <loadBankForAnim>
   10644:	|      addq.l #4,sp
   10646:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1064a:	|  ,-- bne.s 10650 <builtIn_anim+0x88>
   1064c:	|  |   moveq #1,d0
   1064e:	+--|-- bra.s 10676 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10650:	|  '-> move.l 4(sp),-(sp)
   10654:	|      move.l 12(sp),-(sp)
   10658:	|      jsr bb06 <setBankFile>
   1065e:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10660:	|      moveq #28,d0
   10662:	|      add.l 20(sp),d0
   10666:	|      move.l 8(sp),-(sp)
   1066a:	|      move.l d0,-(sp)
   1066c:	|      jsr 15646 <newAnimationVariable>
   10672:	|      addq.l #8,sp
	return BR_CONTINUE;
   10674:	|      moveq #2,d0
}
   10676:	'----> lea 12(sp),sp
   1067a:	       rts

0001067c <builtIn_costume>:

builtIn(costume)
{
   1067c:	          lea -32(sp),sp
   10680:	          move.l a6,-(sp)
   10682:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10684:	          moveq #8,d0
   10686:	          move.l d0,32(sp)
   1068a:	          clr.l 28(sp)
   1068e:	          move.l 1d0c6 <SysBase>,d0
   10694:	          movea.l d0,a6
   10696:	          move.l 32(sp),d0
   1069a:	          move.l 28(sp),d1
   1069e:	          jsr -684(a6)
   106a2:	          move.l d0,24(sp)
   106a6:	          move.l 24(sp),d0
   106aa:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   106ae:	      ,-- bne.s 106b6 <builtIn_costume+0x3a>
   106b0:	      |   moveq #1,d0
   106b2:	,-----|-- bra.w 1079e <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   106b6:	|     '-> move.l 44(sp),d0
   106ba:	|         pea 3 <_start+0x3>
   106be:	|         move.l d0,-(sp)
   106c0:	|         jsr 18282 <__divsi3>
   106c6:	|         addq.l #8,sp
   106c8:	|         movea.l 20(sp),a0
   106cc:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   106d0:	|         tst.l 44(sp)
   106d4:	|     ,-- beq.s 106ea <builtIn_costume+0x6e>
   106d6:	|     |   movea.l 20(sp),a0
   106da:	|     |   move.l 4(a0),d1
   106de:	|     |   move.l d1,d0
   106e0:	|     |   add.l d0,d0
   106e2:	|     |   add.l d1,d0
   106e4:	|     |   cmp.l 44(sp),d0
   106e8:	|  ,--|-- beq.s 106fe <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   106ea:	|  |  '-> pea 1a114 <PutChar+0x1dfa>
   106f0:	|  |      jsr 17878 <KPrintF>
   106f6:	|  |      addq.l #4,sp
        return BR_ERROR;
   106f8:	|  |      moveq #1,d0
   106fa:	+--|----- bra.w 1079e <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   106fe:	|  '----> move.l 44(sp),d0
   10702:	|         add.l d0,d0
   10704:	|         add.l d0,d0
   10706:	|         move.l d0,16(sp)
   1070a:	|         clr.l 12(sp)
   1070e:	|         move.l 1d0c6 <SysBase>,d0
   10714:	|         movea.l d0,a6
   10716:	|         move.l 16(sp),d0
   1071a:	|         move.l 12(sp),d1
   1071e:	|         jsr -684(a6)
   10722:	|         move.l d0,8(sp)
   10726:	|         move.l 8(sp),d0
   1072a:	|         movea.l 20(sp),a0
   1072e:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10730:	|         movea.l 20(sp),a0
   10734:	|         move.l (a0),d0
   10736:	|     ,-- bne.s 1073c <builtIn_costume+0xc0>
   10738:	|     |   moveq #1,d0
   1073a:	+-----|-- bra.s 1079e <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1073c:	|     '-> move.l 44(sp),d0
   10740:	|         subq.l #1,d0
   10742:	|         move.l d0,36(sp)
   10746:	|     ,-- bra.s 10782 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10748:	|  ,--|-> movea.l 48(sp),a0
   1074c:	|  |  |   move.l 24(a0),d0
   10750:	|  |  |   movea.l 20(sp),a0
   10754:	|  |  |   movea.l (a0),a0
   10756:	|  |  |   move.l 36(sp),d1
   1075a:	|  |  |   add.l d1,d1
   1075c:	|  |  |   add.l d1,d1
   1075e:	|  |  |   lea (0,a0,d1.l),a2
   10762:	|  |  |   move.l d0,-(sp)
   10764:	|  |  |   jsr 15270 <getAnimationFromVar>
   1076a:	|  |  |   addq.l #4,sp
   1076c:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1076e:	|  |  |   moveq #24,d0
   10770:	|  |  |   add.l 48(sp),d0
   10774:	|  |  |   move.l d0,-(sp)
   10776:	|  |  |   jsr 1571c <trimStack>
   1077c:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1077e:	|  |  |   subq.l #1,36(sp)
   10782:	|  |  '-> tst.l 36(sp)
   10786:	|  '----- bge.s 10748 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10788:	|         moveq #28,d0
   1078a:	|         add.l 48(sp),d0
   1078e:	|         move.l 20(sp),-(sp)
   10792:	|         move.l d0,-(sp)
   10794:	|         jsr 15668 <newCostumeVariable>
   1079a:	|         addq.l #8,sp
    return BR_CONTINUE;
   1079c:	|         moveq #2,d0
}
   1079e:	'-------> movea.l (sp)+,a2
   107a0:	          movea.l (sp)+,a6
   107a2:	          lea 32(sp),sp
   107a6:	          rts

000107a8 <builtIn_launch>:

builtIn(launch)
{
   107a8:	          lea -20(sp),sp
   107ac:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   107ae:	          movea.l 32(sp),a0
   107b2:	          move.l 24(a0),d0
   107b6:	          move.l d0,-(sp)
   107b8:	          jsr 1536e <getTextFromAnyVar>
   107be:	          addq.l #4,sp
   107c0:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   107c4:	      ,-- bne.s 107cc <builtIn_launch+0x24>
   107c6:	      |   moveq #1,d0
   107c8:	,-----|-- bra.w 108fa <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   107cc:	|     '-> move.l 20(sp),-(sp)
   107d0:	|         jsr 2fe <encodeFilename>
   107d6:	|         addq.l #4,sp
   107d8:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   107dc:	|         moveq #24,d0
   107de:	|         add.l 32(sp),d0
   107e2:	|         move.l d0,-(sp)
   107e4:	|         jsr 1571c <trimStack>
   107ea:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   107ec:	|         movea.l 20(sp),a0
   107f0:	|         move.b (a0),d0
   107f2:	|         cmpi.b #104,d0
   107f6:	|  ,----- bne.s 10860 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   107f8:	|  |      movea.l 20(sp),a0
   107fc:	|  |      addq.l #1,a0
   107fe:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10800:	|  |      cmpi.b #116,d0
   10804:	|  +----- bne.s 10860 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10806:	|  |      movea.l 20(sp),a0
   1080a:	|  |      addq.l #2,a0
   1080c:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1080e:	|  |      cmpi.b #116,d0
   10812:	|  +----- bne.s 10860 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10814:	|  |      movea.l 20(sp),a0
   10818:	|  |      addq.l #3,a0
   1081a:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1081c:	|  |      cmpi.b #112,d0
   10820:	|  +----- bne.s 10860 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10822:	|  |      movea.l 20(sp),a0
   10826:	|  |      addq.l #4,a0
   10828:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1082a:	|  |      cmpi.b #58,d0
   1082e:	|  |  ,-- beq.s 1084c <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10830:	|  |  |   movea.l 20(sp),a0
   10834:	|  |  |   addq.l #4,a0
   10836:	|  |  |   move.b (a0),d0
   10838:	|  |  |   cmpi.b #115,d0
   1083c:	|  +--|-- bne.s 10860 <builtIn_launch+0xb8>
   1083e:	|  |  |   movea.l 20(sp),a0
   10842:	|  |  |   addq.l #5,a0
   10844:	|  |  |   move.b (a0),d0
   10846:	|  |  |   cmpi.b #58,d0
   1084a:	|  +--|-- bne.s 10860 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1084c:	|  |  '-> move.l 20(sp),-(sp)
   10850:	|  |      jsr b8 <copyString>
   10856:	|  |      addq.l #4,sp
   10858:	|  |      move.l d0,1d184 <launchMe>
   1085e:	|  |  ,-- bra.s 108b2 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10860:	|  '--|-> move.l 1d02e <gamePath>,d0
   10866:	|     |   pea 1a15f <PutChar+0x1e45>
   1086c:	|     |   move.l d0,-(sp)
   1086e:	|     |   jsr 142c4 <joinStrings>
   10874:	|     |   addq.l #8,sp
   10876:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1087a:	|     |   move.l 16(sp),-(sp)
   1087e:	|     |   move.l 16(sp),-(sp)
   10882:	|     |   jsr 142c4 <joinStrings>
   10888:	|     |   addq.l #8,sp
   1088a:	|     |   move.l d0,1d184 <launchMe>
        FreeVec(newText);
   10890:	|     |   move.l 16(sp),8(sp)
   10896:	|     |   move.l 1d0c6 <SysBase>,d0
   1089c:	|     |   movea.l d0,a6
   1089e:	|     |   movea.l 8(sp),a1
   108a2:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   108a6:	|     |   move.l 1d184 <launchMe>,d0
   108ac:	|     +-- bne.s 108b2 <builtIn_launch+0x10a>
   108ae:	|     |   moveq #1,d0
   108b0:	+-----|-- bra.s 108fa <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   108b2:	|     '-> move.l 20(sp),4(sp)
   108b8:	|         move.l 1d0c6 <SysBase>,d0
   108be:	|         movea.l d0,a6
   108c0:	|         movea.l 4(sp),a1
   108c4:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   108c8:	|         clr.l -(sp)
   108ca:	|         jsr 4efe <setGraphicsWindow>
   108d0:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   108d2:	|         moveq #28,d0
   108d4:	|         add.l 32(sp),d0
   108d8:	|         pea 1 <_start+0x1>
   108dc:	|         pea 1 <_start+0x1>
   108e0:	|         move.l d0,-(sp)
   108e2:	|         jsr 1568a <setVariable>
   108e8:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   108ec:	|         moveq #28,d0
   108ee:	|         add.l 32(sp),d0
   108f2:	|         move.l d0,1d188 <launchResult>

    return BR_KEEP_AND_PAUSE;
   108f8:	|         moveq #0,d0
}
   108fa:	'-------> movea.l (sp)+,a6
   108fc:	          lea 20(sp),sp
   10900:	          rts

00010902 <builtIn_pause>:

builtIn(pause)
{
   10902:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10904:	       movea.l 12(sp),a0
   10908:	       move.l 24(a0),d0
   1090c:	       move.l d0,-(sp)
   1090e:	       pea 1 <_start+0x1>
   10912:	       move.l sp,d0
   10914:	       addq.l #8,d0
   10916:	       move.l d0,-(sp)
   10918:	       jsr 14d98 <getValueType>
   1091e:	       lea 12(sp),sp
   10922:	       tst.w d0
   10924:	   ,-- bne.s 1092a <builtIn_pause+0x28>
   10926:	   |   moveq #1,d0
   10928:	,--|-- bra.s 10958 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1092a:	|  '-> moveq #24,d0
   1092c:	|      add.l 12(sp),d0
   10930:	|      move.l d0,-(sp)
   10932:	|      jsr 1571c <trimStack>
   10938:	|      addq.l #4,sp
	if (theTime > 0) {
   1093a:	|      move.l (sp),d0
   1093c:	|  ,-- ble.s 10956 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1093e:	|  |   move.l (sp),d0
   10940:	|  |   subq.l #1,d0
   10942:	|  |   movea.l 12(sp),a0
   10946:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1094a:	|  |   movea.l 12(sp),a0
   1094e:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10952:	|  |   moveq #0,d0
   10954:	+--|-- bra.s 10958 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10956:	|  '-> moveq #2,d0
}
   10958:	'----> addq.l #4,sp
   1095a:	       rts

0001095c <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1095c:	jsr 5692 <completeTimers>
	return BR_CONTINUE;
   10962:	moveq #2,d0
}
   10964:	rts

00010966 <builtIn_callEvent>:

builtIn(callEvent)
{
   10966:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1096a:	       movea.l 20(sp),a0
   1096e:	       move.l 24(a0),d0
   10972:	       move.l d0,-(sp)
   10974:	       pea 7 <_start+0x7>
   10978:	       lea 8(sp),a0
   1097c:	       move.l a0,-(sp)
   1097e:	       jsr 14d98 <getValueType>
   10984:	       lea 12(sp),sp
   10988:	       tst.w d0
   1098a:	   ,-- bne.s 10992 <builtIn_callEvent+0x2c>
   1098c:	   |   moveq #1,d0
   1098e:	,--|-- bra.w 10a28 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10992:	|  '-> moveq #24,d0
   10994:	|      add.l 20(sp),d0
   10998:	|      move.l d0,-(sp)
   1099a:	|      jsr 1571c <trimStack>
   109a0:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109a2:	|      movea.l 20(sp),a0
   109a6:	|      move.l 24(a0),d0
   109aa:	|      move.l d0,-(sp)
   109ac:	|      pea 7 <_start+0x7>
   109b0:	|      moveq #12,d0
   109b2:	|      add.l sp,d0
   109b4:	|      move.l d0,-(sp)
   109b6:	|      jsr 14d98 <getValueType>
   109bc:	|      lea 12(sp),sp
   109c0:	|      tst.w d0
   109c2:	|  ,-- bne.s 109c8 <builtIn_callEvent+0x62>
   109c4:	|  |   moveq #1,d0
   109c6:	+--|-- bra.s 10a28 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   109c8:	|  '-> moveq #24,d0
   109ca:	|      add.l 20(sp),d0
   109ce:	|      move.l d0,-(sp)
   109d0:	|      jsr 1571c <trimStack>
   109d6:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   109d8:	|      move.l (sp),d1
   109da:	|      move.l 4(sp),d0
   109de:	|      move.l d1,-(sp)
   109e0:	|      move.l d0,-(sp)
   109e2:	|      jsr dae0 <getCombinationFunction>
   109e8:	|      addq.l #8,sp
   109ea:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   109ee:	|  ,-- beq.s 10a0e <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   109f0:	|  |   moveq #28,d0
   109f2:	|  |   add.l 20(sp),d0
   109f6:	|  |   move.l 8(sp),-(sp)
   109fa:	|  |   pea 2 <_start+0x2>
   109fe:	|  |   move.l d0,-(sp)
   10a00:	|  |   jsr 1568a <setVariable>
   10a06:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10a0a:	|  |   moveq #4,d0
   10a0c:	+--|-- bra.s 10a28 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10a0e:	|  '-> moveq #28,d0
   10a10:	|      add.l 20(sp),d0
   10a14:	|      clr.l -(sp)
   10a16:	|      pea 1 <_start+0x1>
   10a1a:	|      move.l d0,-(sp)
   10a1c:	|      jsr 1568a <setVariable>
   10a22:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10a26:	|      moveq #2,d0
}
   10a28:	'----> lea 12(sp),sp
   10a2c:	       rts

00010a2e <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10a2e:	move.w #1,1d194 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10a36:	moveq #2,d0
}
   10a38:	rts

00010a3a <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10a3a:	moveq #24,d0
   10a3c:	add.l 8(sp),d0
   10a40:	move.l d0,-(sp)
   10a42:	jsr 1571c <trimStack>
   10a48:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10a4a:	pea 1a161 <PutChar+0x1e47>
   10a50:	jsr 17878 <KPrintF>
   10a56:	addq.l #4,sp
	return BR_CONTINUE;
   10a58:	moveq #2,d0
}
   10a5a:	rts

00010a5c <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10a5c:	pea 1a161 <PutChar+0x1e47>
   10a62:	jsr 17878 <KPrintF>
   10a68:	addq.l #4,sp
	return BR_CONTINUE;
   10a6a:	moveq #2,d0
}
   10a6c:	rts

00010a6e <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10a6e:	pea 1a161 <PutChar+0x1e47>
   10a74:	jsr 17878 <KPrintF>
   10a7a:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10a7c:	moveq #2,d0
}
   10a7e:	rts

00010a80 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10a80:	pea 1a161 <PutChar+0x1e47>
   10a86:	jsr 17878 <KPrintF>
   10a8c:	addq.l #4,sp
	return BR_CONTINUE;
   10a8e:	moveq #2,d0
}
   10a90:	rts

00010a92 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10a92:	pea 1a161 <PutChar+0x1e47>
   10a98:	jsr 17878 <KPrintF>
   10a9e:	addq.l #4,sp
	return BR_CONTINUE;
   10aa0:	moveq #2,d0
}
   10aa2:	rts

00010aa4 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10aa4:	pea 1a161 <PutChar+0x1e47>
   10aaa:	jsr 17878 <KPrintF>
   10ab0:	addq.l #4,sp
	return BR_CONTINUE;
   10ab2:	moveq #2,d0
}
   10ab4:	rts

00010ab6 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10ab6:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aba:	       movea.l 20(sp),a0
   10abe:	       move.l 24(a0),d0
   10ac2:	       move.l d0,-(sp)
   10ac4:	       pea 1 <_start+0x1>
   10ac8:	       moveq #16,d0
   10aca:	       add.l sp,d0
   10acc:	       move.l d0,-(sp)
   10ace:	       jsr 14d98 <getValueType>
   10ad4:	       lea 12(sp),sp
   10ad8:	       tst.w d0
   10ada:	   ,-- bne.s 10ae2 <builtIn_startMusic+0x2c>
   10adc:	   |   moveq #1,d0
   10ade:	,--|-- bra.w 10b82 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10ae2:	|  '-> moveq #24,d0
   10ae4:	|      add.l 20(sp),d0
   10ae8:	|      move.l d0,-(sp)
   10aea:	|      jsr 1571c <trimStack>
   10af0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10af2:	|      movea.l 20(sp),a0
   10af6:	|      move.l 24(a0),d0
   10afa:	|      move.l d0,-(sp)
   10afc:	|      pea 1 <_start+0x1>
   10b00:	|      moveq #12,d0
   10b02:	|      add.l sp,d0
   10b04:	|      move.l d0,-(sp)
   10b06:	|      jsr 14d98 <getValueType>
   10b0c:	|      lea 12(sp),sp
   10b10:	|      tst.w d0
   10b12:	|  ,-- bne.s 10b18 <builtIn_startMusic+0x62>
   10b14:	|  |   moveq #1,d0
   10b16:	+--|-- bra.s 10b82 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10b18:	|  '-> moveq #24,d0
   10b1a:	|      add.l 20(sp),d0
   10b1e:	|      move.l d0,-(sp)
   10b20:	|      jsr 1571c <trimStack>
   10b26:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b28:	|      movea.l 20(sp),a0
   10b2c:	|      move.l 24(a0),d0
   10b30:	|      move.l d0,-(sp)
   10b32:	|      pea 5 <_start+0x5>
   10b36:	|      lea 8(sp),a0
   10b3a:	|      move.l a0,-(sp)
   10b3c:	|      jsr 14d98 <getValueType>
   10b42:	|      lea 12(sp),sp
   10b46:	|      tst.w d0
   10b48:	|  ,-- bne.s 10b4e <builtIn_startMusic+0x98>
   10b4a:	|  |   moveq #1,d0
   10b4c:	+--|-- bra.s 10b82 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10b4e:	|  '-> moveq #24,d0
   10b50:	|      add.l 20(sp),d0
   10b54:	|      move.l d0,-(sp)
   10b56:	|      jsr 1571c <trimStack>
   10b5c:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10b5e:	|      movea.l 8(sp),a0
   10b62:	|      move.l 4(sp),d1
   10b66:	|      move.l (sp),d0
   10b68:	|      move.l a0,-(sp)
   10b6a:	|      move.l d1,-(sp)
   10b6c:	|      move.l d0,-(sp)
   10b6e:	|      jsr d6e2 <playMOD>
   10b74:	|      lea 12(sp),sp
   10b78:	|      tst.w d0
   10b7a:	|  ,-- bne.s 10b80 <builtIn_startMusic+0xca>
   10b7c:	|  |   moveq #2,d0
   10b7e:	+--|-- bra.s 10b82 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10b80:	|  '-> moveq #2,d0
}
   10b82:	'----> lea 12(sp),sp
   10b86:	       rts

00010b88 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10b88:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b8a:	       movea.l 12(sp),a0
   10b8e:	       move.l 24(a0),d0
   10b92:	       move.l d0,-(sp)
   10b94:	       pea 1 <_start+0x1>
   10b98:	       move.l sp,d0
   10b9a:	       addq.l #8,d0
   10b9c:	       move.l d0,-(sp)
   10b9e:	       jsr 14d98 <getValueType>
   10ba4:	       lea 12(sp),sp
   10ba8:	       tst.w d0
   10baa:	   ,-- bne.s 10bb0 <builtIn_stopMusic+0x28>
   10bac:	   |   moveq #1,d0
   10bae:	,--|-- bra.s 10bce <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10bb0:	|  '-> moveq #24,d0
   10bb2:	|      add.l 12(sp),d0
   10bb6:	|      move.l d0,-(sp)
   10bb8:	|      jsr 1571c <trimStack>
   10bbe:	|      addq.l #4,sp
	stopMOD (v);
   10bc0:	|      move.l (sp),d0
   10bc2:	|      move.l d0,-(sp)
   10bc4:	|      jsr d77e <stopMOD>
   10bca:	|      addq.l #4,sp
	return BR_CONTINUE;
   10bcc:	|      moveq #2,d0
}
   10bce:	'----> addq.l #4,sp
   10bd0:	       rts

00010bd2 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10bd2:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd4:	       movea.l 16(sp),a0
   10bd8:	       move.l 24(a0),d0
   10bdc:	       move.l d0,-(sp)
   10bde:	       pea 1 <_start+0x1>
   10be2:	       move.l sp,d0
   10be4:	       addq.l #8,d0
   10be6:	       move.l d0,-(sp)
   10be8:	       jsr 14d98 <getValueType>
   10bee:	       lea 12(sp),sp
   10bf2:	       tst.w d0
   10bf4:	   ,-- bne.s 10bfa <builtIn_setMusicVolume+0x28>
   10bf6:	   |   moveq #1,d0
   10bf8:	,--|-- bra.s 10c54 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10bfa:	|  '-> moveq #24,d0
   10bfc:	|      add.l 16(sp),d0
   10c00:	|      move.l d0,-(sp)
   10c02:	|      jsr 1571c <trimStack>
   10c08:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c0a:	|      movea.l 16(sp),a0
   10c0e:	|      move.l 24(a0),d0
   10c12:	|      move.l d0,-(sp)
   10c14:	|      pea 1 <_start+0x1>
   10c18:	|      moveq #12,d0
   10c1a:	|      add.l sp,d0
   10c1c:	|      move.l d0,-(sp)
   10c1e:	|      jsr 14d98 <getValueType>
   10c24:	|      lea 12(sp),sp
   10c28:	|      tst.w d0
   10c2a:	|  ,-- bne.s 10c30 <builtIn_setMusicVolume+0x5e>
   10c2c:	|  |   moveq #1,d0
   10c2e:	+--|-- bra.s 10c54 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10c30:	|  '-> moveq #24,d0
   10c32:	|      add.l 16(sp),d0
   10c36:	|      move.l d0,-(sp)
   10c38:	|      jsr 1571c <trimStack>
   10c3e:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10c40:	|      move.l (sp),d1
   10c42:	|      move.l 4(sp),d0
   10c46:	|      move.l d1,-(sp)
   10c48:	|      move.l d0,-(sp)
   10c4a:	|      jsr d764 <setMusicVolume>
   10c50:	|      addq.l #8,sp
	return BR_CONTINUE;
   10c52:	|      moveq #2,d0
}
   10c54:	'----> addq.l #8,sp
   10c56:	       rts

00010c58 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10c58:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c5a:	       movea.l 12(sp),a0
   10c5e:	       move.l 24(a0),d0
   10c62:	       move.l d0,-(sp)
   10c64:	       pea 1 <_start+0x1>
   10c68:	       move.l sp,d0
   10c6a:	       addq.l #8,d0
   10c6c:	       move.l d0,-(sp)
   10c6e:	       jsr 14d98 <getValueType>
   10c74:	       lea 12(sp),sp
   10c78:	       tst.w d0
   10c7a:	   ,-- bne.s 10c80 <builtIn_setDefaultMusicVolume+0x28>
   10c7c:	   |   moveq #1,d0
   10c7e:	,--|-- bra.s 10c9e <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10c80:	|  '-> moveq #24,d0
   10c82:	|      add.l 12(sp),d0
   10c86:	|      move.l d0,-(sp)
   10c88:	|      jsr 1571c <trimStack>
   10c8e:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10c90:	|      move.l (sp),d0
   10c92:	|      move.l d0,-(sp)
   10c94:	|      jsr d748 <setDefaultMusicVolume>
   10c9a:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c9c:	|      moveq #2,d0
}
   10c9e:	'----> addq.l #4,sp
   10ca0:	       rts

00010ca2 <builtIn_playSound>:

builtIn(playSound)
{
   10ca2:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ca4:	       movea.l 12(sp),a0
   10ca8:	       move.l 24(a0),d0
   10cac:	       move.l d0,-(sp)
   10cae:	       pea 5 <_start+0x5>
   10cb2:	       move.l sp,d0
   10cb4:	       addq.l #8,d0
   10cb6:	       move.l d0,-(sp)
   10cb8:	       jsr 14d98 <getValueType>
   10cbe:	       lea 12(sp),sp
   10cc2:	       tst.w d0
   10cc4:	   ,-- bne.s 10cca <builtIn_playSound+0x28>
   10cc6:	   |   moveq #1,d0
   10cc8:	,--|-- bra.s 10cf2 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10cca:	|  '-> moveq #24,d0
   10ccc:	|      add.l 12(sp),d0
   10cd0:	|      move.l d0,-(sp)
   10cd2:	|      jsr 1571c <trimStack>
   10cd8:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10cda:	|      move.l (sp),d0
   10cdc:	|      clr.l -(sp)
   10cde:	|      move.l d0,-(sp)
   10ce0:	|      jsr d76c <startSound>
   10ce6:	|      addq.l #8,sp
   10ce8:	|      tst.w d0
   10cea:	|  ,-- bne.s 10cf0 <builtIn_playSound+0x4e>
   10cec:	|  |   moveq #2,d0
   10cee:	+--|-- bra.s 10cf2 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10cf0:	|  '-> moveq #2,d0
}
   10cf2:	'----> addq.l #4,sp
   10cf4:	       rts

00010cf6 <builtIn_loopSound>:

builtIn(loopSound)
{
   10cf6:	             lea -28(sp),sp
   10cfa:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10cfc:	             tst.l 36(sp)
   10d00:	         ,-- bgt.s 10d16 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10d02:	         |   pea 1a184 <PutChar+0x1e6a>
   10d08:	         |   jsr 17878 <KPrintF>
   10d0e:	         |   addq.l #4,sp
		return BR_ERROR;
   10d10:	         |   moveq #1,d0
   10d12:	,--------|-- bra.w 10ed2 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10d16:	|        '-> moveq #1,d0
   10d18:	|            cmp.l 36(sp),d0
   10d1c:	|     ,----- blt.s 10d78 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10d1e:	|     |      movea.l 40(sp),a0
   10d22:	|     |      move.l 24(a0),d0
   10d26:	|     |      move.l d0,-(sp)
   10d28:	|     |      pea 5 <_start+0x5>
   10d2c:	|     |      lea 16(sp),a0
   10d30:	|     |      move.l a0,-(sp)
   10d32:	|     |      jsr 14d98 <getValueType>
   10d38:	|     |      lea 12(sp),sp
   10d3c:	|     |      tst.w d0
   10d3e:	|     |  ,-- bne.s 10d46 <builtIn_loopSound+0x50>
   10d40:	|     |  |   moveq #1,d0
   10d42:	+-----|--|-- bra.w 10ed2 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10d46:	|     |  '-> moveq #24,d0
   10d48:	|     |      add.l 40(sp),d0
   10d4c:	|     |      move.l d0,-(sp)
   10d4e:	|     |      jsr 1571c <trimStack>
   10d54:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10d56:	|     |      move.l 8(sp),d0
   10d5a:	|     |      pea 1 <_start+0x1>
   10d5e:	|     |      move.l d0,-(sp)
   10d60:	|     |      jsr d76c <startSound>
   10d66:	|     |      addq.l #8,sp
   10d68:	|     |      tst.w d0
   10d6a:	|     |  ,-- bne.s 10d72 <builtIn_loopSound+0x7c>
   10d6c:	|     |  |   moveq #2,d0
   10d6e:	+-----|--|-- bra.w 10ed2 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10d72:	|     |  '-> moveq #2,d0
   10d74:	+-----|----- bra.w 10ed2 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10d78:	|     '----> moveq #2,d1
   10d7a:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10d7e:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10d82:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10d86:	|            movea.l 40(sp),a0
   10d8a:	|            movea.l 24(a0),a0
   10d8e:	|            move.l (a0),d0
   10d90:	|            moveq #5,d1
   10d92:	|            cmp.l d0,d1
   10d94:	|  ,-------- beq.w 10e6c <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10d98:	|  |         movea.l 40(sp),a0
   10d9c:	|  |         move.l 24(a0),d0
   10da0:	|  |         move.l d0,-(sp)
   10da2:	|  |         pea 1 <_start+0x1>
   10da6:	|  |         lea 12(sp),a0
   10daa:	|  |         move.l a0,-(sp)
   10dac:	|  |         jsr 14d98 <getValueType>
   10db2:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10db6:	|  |         moveq #24,d0
   10db8:	|  |         add.l 40(sp),d0
   10dbc:	|  |         move.l d0,-(sp)
   10dbe:	|  |         jsr 1571c <trimStack>
   10dc4:	|  |         addq.l #4,sp
			numParams--;
   10dc6:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10dca:	|  +-------- bra.w 10e6c <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10dce:	|  |  ,----> movea.l 40(sp),a0
   10dd2:	|  |  |      move.l 24(a0),d0
   10dd6:	|  |  |      move.l d0,-(sp)
   10dd8:	|  |  |      pea 5 <_start+0x5>
   10ddc:	|  |  |      lea 16(sp),a0
   10de0:	|  |  |      move.l a0,-(sp)
   10de2:	|  |  |      jsr 14d98 <getValueType>
   10de8:	|  |  |      lea 12(sp),sp
   10dec:	|  |  |      tst.w d0
   10dee:	|  |  |  ,-- bne.s 10e04 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10df0:	|  |  |  |   pea 1a1c2 <PutChar+0x1ea8>
   10df6:	|  |  |  |   jsr 17878 <KPrintF>
   10dfc:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10dfe:	|  |  |  |   moveq #1,d0
   10e00:	+--|--|--|-- bra.w 10ed2 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10e04:	|  |  |  '-> moveq #20,d0
   10e06:	|  |  |      move.l d0,20(sp)
   10e0a:	|  |  |      clr.l 16(sp)
   10e0e:	|  |  |      move.l 1d0c6 <SysBase>,d0
   10e14:	|  |  |      movea.l d0,a6
   10e16:	|  |  |      move.l 20(sp),d0
   10e1a:	|  |  |      move.l 16(sp),d1
   10e1e:	|  |  |      jsr -684(a6)
   10e22:	|  |  |      move.l d0,12(sp)
   10e26:	|  |  |      move.l 12(sp),d0
   10e2a:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10e2e:	|  |  |  ,-- bne.s 10e36 <builtIn_loopSound+0x140>
   10e30:	|  |  |  |   moveq #1,d0
   10e32:	+--|--|--|-- bra.w 10ed2 <builtIn_loopSound+0x1dc>

			s->next = old;
   10e36:	|  |  |  '-> movea.l 28(sp),a0
   10e3a:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10e40:	|  |  |      movea.l 28(sp),a0
   10e44:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10e48:	|  |  |      move.l 8(sp),d0
   10e4c:	|  |  |      movea.l 28(sp),a0
   10e50:	|  |  |      move.l d0,(a0)
			old = s;
   10e52:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10e58:	|  |  |      moveq #24,d0
   10e5a:	|  |  |      add.l 40(sp),d0
   10e5e:	|  |  |      move.l d0,-(sp)
   10e60:	|  |  |      jsr 1571c <trimStack>
   10e66:	|  |  |      addq.l #4,sp
			numParams--;
   10e68:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10e6c:	|  '--|----> tst.l 36(sp)
   10e70:	|     '----- bne.w 10dce <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10e74:	|        ,-- bra.s 10e80 <builtIn_loopSound+0x18a>
   10e76:	|     ,--|-> movea.l 28(sp),a0
   10e7a:	|     |  |   move.l 4(a0),28(sp)
   10e80:	|     |  '-> movea.l 28(sp),a0
   10e84:	|     |      move.l 4(a0),d0
   10e88:	|     '----- bne.s 10e76 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10e8a:	|            move.l 4(sp),d0
   10e8e:	|            moveq #1,d1
   10e90:	|            cmp.l d0,d1
   10e92:	|     ,----- bge.s 10eaa <builtIn_loopSound+0x1b4>
			s->next = old;
   10e94:	|     |      movea.l 28(sp),a0
   10e98:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10e9e:	|     |      movea.l 24(sp),a0
   10ea2:	|     |      move.l 28(sp),8(a0)
   10ea8:	|     |  ,-- bra.s 10eba <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10eaa:	|     '--|-> move.l 4(sp),d0
   10eae:	|        +-- beq.s 10eba <builtIn_loopSound+0x1c4>
			s->next = s;
   10eb0:	|        |   movea.l 28(sp),a0
   10eb4:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10eba:	|        '-> movea.l 24(sp),a0
   10ebe:	|            moveq #-1,d0
   10ec0:	|            move.l d0,16(a0)
		playSoundList(old);
   10ec4:	|            move.l 24(sp),-(sp)
   10ec8:	|            jsr d6e6 <playSoundList>
   10ece:	|            addq.l #4,sp
		return BR_CONTINUE;
   10ed0:	|            moveq #2,d0
	}
}
   10ed2:	'----------> movea.l (sp)+,a6
   10ed4:	             lea 28(sp),sp
   10ed8:	             rts

00010eda <builtIn_stopSound>:

builtIn(stopSound)
{
   10eda:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10edc:	       movea.l 12(sp),a0
   10ee0:	       move.l 24(a0),d0
   10ee4:	       move.l d0,-(sp)
   10ee6:	       pea 5 <_start+0x5>
   10eea:	       move.l sp,d0
   10eec:	       addq.l #8,d0
   10eee:	       move.l d0,-(sp)
   10ef0:	       jsr 14d98 <getValueType>
   10ef6:	       lea 12(sp),sp
   10efa:	       tst.w d0
   10efc:	   ,-- bne.s 10f02 <builtIn_stopSound+0x28>
   10efe:	   |   moveq #1,d0
   10f00:	,--|-- bra.s 10f20 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10f02:	|  '-> moveq #24,d0
   10f04:	|      add.l 12(sp),d0
   10f08:	|      move.l d0,-(sp)
   10f0a:	|      jsr 1571c <trimStack>
   10f10:	|      addq.l #4,sp
	huntKillSound (v);
   10f12:	|      move.l (sp),d0
   10f14:	|      move.l d0,-(sp)
   10f16:	|      jsr d6de <huntKillSound>
   10f1c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10f1e:	|      moveq #2,d0
}
   10f20:	'----> addq.l #4,sp
   10f22:	       rts

00010f24 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10f24:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f26:	       movea.l 12(sp),a0
   10f2a:	       move.l 24(a0),d0
   10f2e:	       move.l d0,-(sp)
   10f30:	       pea 1 <_start+0x1>
   10f34:	       move.l sp,d0
   10f36:	       addq.l #8,d0
   10f38:	       move.l d0,-(sp)
   10f3a:	       jsr 14d98 <getValueType>
   10f40:	       lea 12(sp),sp
   10f44:	       tst.w d0
   10f46:	   ,-- bne.s 10f4c <builtIn_setDefaultSoundVolume+0x28>
   10f48:	   |   moveq #1,d0
   10f4a:	,--|-- bra.s 10f6a <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10f4c:	|  '-> moveq #24,d0
   10f4e:	|      add.l 12(sp),d0
   10f52:	|      move.l d0,-(sp)
   10f54:	|      jsr 1571c <trimStack>
   10f5a:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10f5c:	|      move.l (sp),d0
   10f5e:	|      move.l d0,-(sp)
   10f60:	|      jsr d754 <setDefaultSoundVolume>
   10f66:	|      addq.l #4,sp
	return BR_CONTINUE;
   10f68:	|      moveq #2,d0
}
   10f6a:	'----> addq.l #4,sp
   10f6c:	       rts

00010f6e <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10f6e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f70:	       movea.l 16(sp),a0
   10f74:	       move.l 24(a0),d0
   10f78:	       move.l d0,-(sp)
   10f7a:	       pea 1 <_start+0x1>
   10f7e:	       move.l sp,d0
   10f80:	       addq.l #8,d0
   10f82:	       move.l d0,-(sp)
   10f84:	       jsr 14d98 <getValueType>
   10f8a:	       lea 12(sp),sp
   10f8e:	       tst.w d0
   10f90:	   ,-- bne.s 10f96 <builtIn_setSoundVolume+0x28>
   10f92:	   |   moveq #1,d0
   10f94:	,--|-- bra.s 10ff0 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10f96:	|  '-> moveq #24,d0
   10f98:	|      add.l 16(sp),d0
   10f9c:	|      move.l d0,-(sp)
   10f9e:	|      jsr 1571c <trimStack>
   10fa4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fa6:	|      movea.l 16(sp),a0
   10faa:	|      move.l 24(a0),d0
   10fae:	|      move.l d0,-(sp)
   10fb0:	|      pea 5 <_start+0x5>
   10fb4:	|      moveq #12,d0
   10fb6:	|      add.l sp,d0
   10fb8:	|      move.l d0,-(sp)
   10fba:	|      jsr 14d98 <getValueType>
   10fc0:	|      lea 12(sp),sp
   10fc4:	|      tst.w d0
   10fc6:	|  ,-- bne.s 10fcc <builtIn_setSoundVolume+0x5e>
   10fc8:	|  |   moveq #1,d0
   10fca:	+--|-- bra.s 10ff0 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10fcc:	|  '-> moveq #24,d0
   10fce:	|      add.l 16(sp),d0
   10fd2:	|      move.l d0,-(sp)
   10fd4:	|      jsr 1571c <trimStack>
   10fda:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10fdc:	|      move.l (sp),d1
   10fde:	|      move.l 4(sp),d0
   10fe2:	|      move.l d1,-(sp)
   10fe4:	|      move.l d0,-(sp)
   10fe6:	|      jsr d768 <setSoundVolume>
   10fec:	|      addq.l #8,sp
	return BR_CONTINUE;
   10fee:	|      moveq #2,d0
}
   10ff0:	'----> addq.l #8,sp
   10ff2:	       rts

00010ff4 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10ff4:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ff8:	       movea.l 20(sp),a0
   10ffc:	       move.l 24(a0),d0
   11000:	       move.l d0,-(sp)
   11002:	       pea 1 <_start+0x1>
   11006:	       moveq #12,d0
   11008:	       add.l sp,d0
   1100a:	       move.l d0,-(sp)
   1100c:	       jsr 14d98 <getValueType>
   11012:	       lea 12(sp),sp
   11016:	       tst.w d0
   11018:	   ,-- bne.s 11020 <builtIn_setSoundLoopPoints+0x2c>
   1101a:	   |   moveq #1,d0
   1101c:	,--|-- bra.w 110b8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11020:	|  '-> moveq #24,d0
   11022:	|      add.l 20(sp),d0
   11026:	|      move.l d0,-(sp)
   11028:	|      jsr 1571c <trimStack>
   1102e:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11030:	|      movea.l 20(sp),a0
   11034:	|      move.l 24(a0),d0
   11038:	|      move.l d0,-(sp)
   1103a:	|      pea 1 <_start+0x1>
   1103e:	|      lea 8(sp),a0
   11042:	|      move.l a0,-(sp)
   11044:	|      jsr 14d98 <getValueType>
   1104a:	|      lea 12(sp),sp
   1104e:	|      tst.w d0
   11050:	|  ,-- bne.s 11056 <builtIn_setSoundLoopPoints+0x62>
   11052:	|  |   moveq #1,d0
   11054:	+--|-- bra.s 110b8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11056:	|  '-> moveq #24,d0
   11058:	|      add.l 20(sp),d0
   1105c:	|      move.l d0,-(sp)
   1105e:	|      jsr 1571c <trimStack>
   11064:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11066:	|      movea.l 20(sp),a0
   1106a:	|      move.l 24(a0),d0
   1106e:	|      move.l d0,-(sp)
   11070:	|      pea 5 <_start+0x5>
   11074:	|      moveq #16,d0
   11076:	|      add.l sp,d0
   11078:	|      move.l d0,-(sp)
   1107a:	|      jsr 14d98 <getValueType>
   11080:	|      lea 12(sp),sp
   11084:	|      tst.w d0
   11086:	|  ,-- bne.s 1108c <builtIn_setSoundLoopPoints+0x98>
   11088:	|  |   moveq #1,d0
   1108a:	+--|-- bra.s 110b8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1108c:	|  '-> moveq #24,d0
   1108e:	|      add.l 20(sp),d0
   11092:	|      move.l d0,-(sp)
   11094:	|      jsr 1571c <trimStack>
   1109a:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   1109c:	|      movea.l 4(sp),a0
   110a0:	|      move.l (sp),d1
   110a2:	|      move.l 8(sp),d0
   110a6:	|      move.l a0,-(sp)
   110a8:	|      move.l d1,-(sp)
   110aa:	|      move.l d0,-(sp)
   110ac:	|      jsr d760 <setSoundLoop>
   110b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   110b6:	|      moveq #2,d0
}
   110b8:	'----> lea 12(sp),sp
   110bc:	       rts

000110be <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   110be:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   110c0:	          movea.l 12(sp),a0
   110c4:	          movea.l 24(a0),a0
   110c8:	          move.l (a0),d0
   110ca:	          moveq #5,d1
   110cc:	          cmp.l d0,d1
   110ce:	,-------- bne.s 11112 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   110d0:	|         movea.l 12(sp),a0
   110d4:	|         move.l 24(a0),d0
   110d8:	|         move.l d0,-(sp)
   110da:	|         pea 5 <_start+0x5>
   110de:	|         move.l sp,d0
   110e0:	|         addq.l #8,d0
   110e2:	|         move.l d0,-(sp)
   110e4:	|         jsr 14d98 <getValueType>
   110ea:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   110ee:	|         moveq #24,d0
   110f0:	|         add.l 12(sp),d0
   110f4:	|         move.l d0,-(sp)
   110f6:	|         jsr 1571c <trimStack>
   110fc:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   110fe:	|         move.l (sp),d0
   11100:	|         move.l d0,-(sp)
   11102:	|         jsr 17022 <setFloor>
   11108:	|         addq.l #4,sp
   1110a:	|         tst.w d0
   1110c:	|  ,----- bne.s 11128 <builtIn_setFloor+0x6a>
   1110e:	|  |      moveq #1,d0
   11110:	|  |  ,-- bra.s 1112a <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   11112:	'--|--|-> moveq #24,d0
   11114:	   |  |   add.l 12(sp),d0
   11118:	   |  |   move.l d0,-(sp)
   1111a:	   |  |   jsr 1571c <trimStack>
   11120:	   |  |   addq.l #4,sp
		setFloorNull ();
   11122:	   |  |   jsr 1779c <setFloorNull>
	}
	return BR_CONTINUE;
   11128:	   '--|-> moveq #2,d0
}
   1112a:	      '-> addq.l #4,sp
   1112c:	          rts

0001112e <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   1112e:	jsr 1689e <drawFloor>
	return BR_CONTINUE;
   11134:	moveq #2,d0
}
   11136:	rts

00011138 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   11138:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1113a:	          movea.l 12(sp),a0
   1113e:	          movea.l 24(a0),a0
   11142:	          move.l (a0),d0
   11144:	          moveq #5,d1
   11146:	          cmp.l d0,d1
   11148:	,-------- bne.s 1118c <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1114a:	|         movea.l 12(sp),a0
   1114e:	|         move.l 24(a0),d0
   11152:	|         move.l d0,-(sp)
   11154:	|         pea 5 <_start+0x5>
   11158:	|         move.l sp,d0
   1115a:	|         addq.l #8,d0
   1115c:	|         move.l d0,-(sp)
   1115e:	|         jsr 14d98 <getValueType>
   11164:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11168:	|         moveq #24,d0
   1116a:	|         add.l 12(sp),d0
   1116e:	|         move.l d0,-(sp)
   11170:	|         jsr 1571c <trimStack>
   11176:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   11178:	|         move.l (sp),d0
   1117a:	|         move.l d0,-(sp)
   1117c:	|         jsr 8c0e <setZBuffer>
   11182:	|         addq.l #4,sp
   11184:	|         tst.w d0
   11186:	|  ,----- bne.s 111a2 <builtIn_setZBuffer+0x6a>
   11188:	|  |      moveq #1,d0
   1118a:	|  |  ,-- bra.s 111a4 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   1118c:	'--|--|-> moveq #24,d0
   1118e:	   |  |   add.l 12(sp),d0
   11192:	   |  |   move.l d0,-(sp)
   11194:	   |  |   jsr 1571c <trimStack>
   1119a:	   |  |   addq.l #4,sp
		killZBuffer ();
   1119c:	   |  |   jsr 8bc2 <killZBuffer>
	}
	return BR_CONTINUE;
   111a2:	   '--|-> moveq #2,d0
}
   111a4:	      '-> addq.l #4,sp
   111a6:	          rts

000111a8 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   111a8:	pea 1a1f9 <PutChar+0x1edf>
   111ae:	jsr 17878 <KPrintF>
   111b4:	addq.l #4,sp
	return BR_CONTINUE;
   111b6:	moveq #2,d0
}
   111b8:	rts

000111ba <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111ba:	          movea.l 8(sp),a0
   111be:	          move.l 24(a0),d0
   111c2:	          move.l d0,-(sp)
   111c4:	          pea 1 <_start+0x1>
   111c8:	          pea 1d190 <speechMode>
   111ce:	          jsr 14d98 <getValueType>
   111d4:	          lea 12(sp),sp
   111d8:	          tst.w d0
   111da:	      ,-- bne.s 111e0 <builtIn_setSpeechMode+0x26>
   111dc:	      |   moveq #1,d0
   111de:	,-----|-- bra.s 11218 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   111e0:	|     '-> moveq #24,d0
   111e2:	|         add.l 8(sp),d0
   111e6:	|         move.l d0,-(sp)
   111e8:	|         jsr 1571c <trimStack>
   111ee:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   111f0:	|         move.l 1d190 <speechMode>,d0
   111f6:	|     ,-- bmi.s 11204 <builtIn_setSpeechMode+0x4a>
   111f8:	|     |   move.l 1d190 <speechMode>,d0
   111fe:	|     |   moveq #2,d1
   11200:	|     |   cmp.l d0,d1
   11202:	|  ,--|-- bge.s 11216 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   11204:	|  |  '-> pea 1a212 <PutChar+0x1ef8>
   1120a:	|  |      jsr 17878 <KPrintF>
   11210:	|  |      addq.l #4,sp
		return BR_ERROR;
   11212:	|  |      moveq #1,d0
   11214:	+--|----- bra.s 11218 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   11216:	|  '----> moveq #2,d0
}
   11218:	'-------> rts

0001121a <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   1121a:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   1121c:	       jsr 4490 <isThereAnySpeechGoingOn>
   11222:	       move.l d0,(sp)
	if (i == -1) {
   11224:	       moveq #-1,d0
   11226:	       cmp.l (sp),d0
   11228:	,----- bne.s 11244 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   1122a:	|      moveq #28,d0
   1122c:	|      add.l 12(sp),d0
   11230:	|      clr.l -(sp)
   11232:	|      pea 1 <_start+0x1>
   11236:	|      move.l d0,-(sp)
   11238:	|      jsr 1568a <setVariable>
   1123e:	|      lea 12(sp),sp
   11242:	|  ,-- bra.s 1125c <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11244:	'--|-> moveq #28,d0
   11246:	   |   add.l 12(sp),d0
   1124a:	   |   move.l (sp),-(sp)
   1124c:	   |   pea 7 <_start+0x7>
   11250:	   |   move.l d0,-(sp)
   11252:	   |   jsr 1568a <setVariable>
   11258:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1125c:	   '-> moveq #2,d0
}
   1125e:	       addq.l #4,sp
   11260:	       rts

00011262 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   11262:	jsr 6fbc <killSpeechTimers>
	return BR_CONTINUE;
   11268:	moveq #2,d0
}
   1126a:	rts

0001126c <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   1126c:	       move.l 1d1d6 <overRegion>,d0
   11272:	,----- beq.s 1129c <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11274:	|      movea.l 1d1d6 <overRegion>,a0
   1127a:	|      movea.l 28(a0),a0
   1127e:	|      move.l 4(a0),d1
   11282:	|      moveq #28,d0
   11284:	|      add.l 8(sp),d0
   11288:	|      move.l d1,-(sp)
   1128a:	|      pea 7 <_start+0x7>
   1128e:	|      move.l d0,-(sp)
   11290:	|      jsr 1568a <setVariable>
   11296:	|      lea 12(sp),sp
   1129a:	|  ,-- bra.s 112b4 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   1129c:	'--|-> moveq #28,d0
   1129e:	   |   add.l 8(sp),d0
   112a2:	   |   clr.l -(sp)
   112a4:	   |   pea 1 <_start+0x1>
   112a8:	   |   move.l d0,-(sp)
   112aa:	   |   jsr 1568a <setVariable>
   112b0:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   112b4:	   '-> moveq #2,d0
}
   112b6:	       rts

000112b8 <builtIn_rename>:

builtIn(rename)
{
   112b8:	       lea -16(sp),sp
   112bc:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   112be:	       movea.l 28(sp),a0
   112c2:	       move.l 24(a0),d0
   112c6:	       move.l d0,-(sp)
   112c8:	       jsr 1536e <getTextFromAnyVar>
   112ce:	       addq.l #4,sp
   112d0:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   112d4:	   ,-- bne.s 112da <builtIn_rename+0x22>
   112d6:	   |   moveq #1,d0
   112d8:	,--|-- bra.s 11354 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   112da:	|  '-> moveq #24,d0
   112dc:	|      add.l 28(sp),d0
   112e0:	|      move.l d0,-(sp)
   112e2:	|      jsr 1571c <trimStack>
   112e8:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   112ea:	|      movea.l 28(sp),a0
   112ee:	|      move.l 24(a0),d0
   112f2:	|      move.l d0,-(sp)
   112f4:	|      pea 7 <_start+0x7>
   112f8:	|      lea 12(sp),a0
   112fc:	|      move.l a0,-(sp)
   112fe:	|      jsr 14d98 <getValueType>
   11304:	|      lea 12(sp),sp
   11308:	|      tst.w d0
   1130a:	|  ,-- bne.s 11310 <builtIn_rename+0x58>
   1130c:	|  |   moveq #1,d0
   1130e:	+--|-- bra.s 11354 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   11310:	|  '-> moveq #24,d0
   11312:	|      add.l 28(sp),d0
   11316:	|      move.l d0,-(sp)
   11318:	|      jsr 1571c <trimStack>
   1131e:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11320:	|      move.l 4(sp),d0
   11324:	|      move.l d0,-(sp)
   11326:	|      jsr daac <findObjectType>
   1132c:	|      addq.l #4,sp
   1132e:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11332:	|      movea.l 12(sp),a0
   11336:	|      move.l (a0),8(sp)
   1133a:	|      move.l 1d0c6 <SysBase>,d0
   11340:	|      movea.l d0,a6
   11342:	|      movea.l 8(sp),a1
   11346:	|      jsr -690(a6)
	o->screenName = newText;
   1134a:	|      movea.l 12(sp),a0
   1134e:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11352:	|      moveq #2,d0
}
   11354:	'----> movea.l (sp)+,a6
   11356:	       lea 16(sp),sp
   1135a:	       rts

0001135c <builtIn_getObjectX>:

builtIn (getObjectX)
{
   1135c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11360:	          movea.l 20(sp),a0
   11364:	          move.l 24(a0),d0
   11368:	          move.l d0,-(sp)
   1136a:	          pea 7 <_start+0x7>
   1136e:	          lea 8(sp),a0
   11372:	          move.l a0,-(sp)
   11374:	          jsr 14d98 <getValueType>
   1137a:	          lea 12(sp),sp
   1137e:	          tst.w d0
   11380:	      ,-- bne.s 11388 <builtIn_getObjectX+0x2c>
   11382:	      |   moveq #1,d0
   11384:	,-----|-- bra.w 11424 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   11388:	|     '-> moveq #24,d0
   1138a:	|         add.l 20(sp),d0
   1138e:	|         move.l d0,-(sp)
   11390:	|         jsr 1571c <trimStack>
   11396:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11398:	|         move.l (sp),d0
   1139a:	|         move.l d0,-(sp)
   1139c:	|         jsr ab3e <findPerson>
   113a2:	|         addq.l #4,sp
   113a4:	|         move.l d0,8(sp)
	if (pers) {
   113a8:	|     ,-- beq.s 113d6 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   113aa:	|     |   movea.l 8(sp),a0
   113ae:	|     |   move.l (a0),d0
   113b0:	|     |   move.l d0,-(sp)
   113b2:	|     |   jsr 17c42 <__fixsfsi>
   113b8:	|     |   addq.l #4,sp
   113ba:	|     |   move.l d0,d1
   113bc:	|     |   moveq #28,d0
   113be:	|     |   add.l 20(sp),d0
   113c2:	|     |   move.l d1,-(sp)
   113c4:	|     |   pea 1 <_start+0x1>
   113c8:	|     |   move.l d0,-(sp)
   113ca:	|     |   jsr 1568a <setVariable>
   113d0:	|     |   lea 12(sp),sp
   113d4:	|  ,--|-- bra.s 11422 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   113d6:	|  |  '-> move.l (sp),d0
   113d8:	|  |      move.l d0,-(sp)
   113da:	|  |      jsr 1605a <getRegionForObject>
   113e0:	|  |      addq.l #4,sp
   113e2:	|  |      move.l d0,4(sp)
		if (la) {
   113e6:	|  |  ,-- beq.s 1140a <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   113e8:	|  |  |   movea.l 4(sp),a0
   113ec:	|  |  |   move.l 16(a0),d1
   113f0:	|  |  |   moveq #28,d0
   113f2:	|  |  |   add.l 20(sp),d0
   113f6:	|  |  |   move.l d1,-(sp)
   113f8:	|  |  |   pea 1 <_start+0x1>
   113fc:	|  |  |   move.l d0,-(sp)
   113fe:	|  |  |   jsr 1568a <setVariable>
   11404:	|  |  |   lea 12(sp),sp
   11408:	|  +--|-- bra.s 11422 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1140a:	|  |  '-> moveq #28,d0
   1140c:	|  |      add.l 20(sp),d0
   11410:	|  |      clr.l -(sp)
   11412:	|  |      pea 1 <_start+0x1>
   11416:	|  |      move.l d0,-(sp)
   11418:	|  |      jsr 1568a <setVariable>
   1141e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11422:	|  '----> moveq #2,d0
}
   11424:	'-------> lea 12(sp),sp
   11428:	          rts

0001142a <builtIn_getObjectY>:

builtIn (getObjectY)
{
   1142a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1142e:	          movea.l 20(sp),a0
   11432:	          move.l 24(a0),d0
   11436:	          move.l d0,-(sp)
   11438:	          pea 7 <_start+0x7>
   1143c:	          lea 8(sp),a0
   11440:	          move.l a0,-(sp)
   11442:	          jsr 14d98 <getValueType>
   11448:	          lea 12(sp),sp
   1144c:	          tst.w d0
   1144e:	      ,-- bne.s 11456 <builtIn_getObjectY+0x2c>
   11450:	      |   moveq #1,d0
   11452:	,-----|-- bra.w 114f4 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   11456:	|     '-> moveq #24,d0
   11458:	|         add.l 20(sp),d0
   1145c:	|         move.l d0,-(sp)
   1145e:	|         jsr 1571c <trimStack>
   11464:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11466:	|         move.l (sp),d0
   11468:	|         move.l d0,-(sp)
   1146a:	|         jsr ab3e <findPerson>
   11470:	|         addq.l #4,sp
   11472:	|         move.l d0,8(sp)
	if (pers) {
   11476:	|     ,-- beq.s 114a6 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11478:	|     |   movea.l 8(sp),a0
   1147c:	|     |   move.l 4(a0),d0
   11480:	|     |   move.l d0,-(sp)
   11482:	|     |   jsr 17c42 <__fixsfsi>
   11488:	|     |   addq.l #4,sp
   1148a:	|     |   move.l d0,d1
   1148c:	|     |   moveq #28,d0
   1148e:	|     |   add.l 20(sp),d0
   11492:	|     |   move.l d1,-(sp)
   11494:	|     |   pea 1 <_start+0x1>
   11498:	|     |   move.l d0,-(sp)
   1149a:	|     |   jsr 1568a <setVariable>
   114a0:	|     |   lea 12(sp),sp
   114a4:	|  ,--|-- bra.s 114f2 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   114a6:	|  |  '-> move.l (sp),d0
   114a8:	|  |      move.l d0,-(sp)
   114aa:	|  |      jsr 1605a <getRegionForObject>
   114b0:	|  |      addq.l #4,sp
   114b2:	|  |      move.l d0,4(sp)
		if (la) {
   114b6:	|  |  ,-- beq.s 114da <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   114b8:	|  |  |   movea.l 4(sp),a0
   114bc:	|  |  |   move.l 20(a0),d1
   114c0:	|  |  |   moveq #28,d0
   114c2:	|  |  |   add.l 20(sp),d0
   114c6:	|  |  |   move.l d1,-(sp)
   114c8:	|  |  |   pea 1 <_start+0x1>
   114cc:	|  |  |   move.l d0,-(sp)
   114ce:	|  |  |   jsr 1568a <setVariable>
   114d4:	|  |  |   lea 12(sp),sp
   114d8:	|  +--|-- bra.s 114f2 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   114da:	|  |  '-> moveq #28,d0
   114dc:	|  |      add.l 20(sp),d0
   114e0:	|  |      clr.l -(sp)
   114e2:	|  |      pea 1 <_start+0x1>
   114e6:	|  |      move.l d0,-(sp)
   114e8:	|  |      jsr 1568a <setVariable>
   114ee:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   114f2:	|  '----> moveq #2,d0
}
   114f4:	'-------> lea 12(sp),sp
   114f8:	          rts

000114fa <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   114fa:	       lea -32(sp),sp
   114fe:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11502:	       movea.l 56(sp),a0
   11506:	       move.l 24(a0),d0
   1150a:	       move.l d0,-(sp)
   1150c:	       pea 1 <_start+0x1>
   11510:	       lea 28(sp),a0
   11514:	       move.l a0,-(sp)
   11516:	       jsr 14d98 <getValueType>
   1151c:	       lea 12(sp),sp
   11520:	       tst.w d0
   11522:	   ,-- bne.s 1152a <builtIn_addScreenRegion+0x30>
   11524:	   |   moveq #1,d0
   11526:	,--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1152a:	|  '-> moveq #24,d0
   1152c:	|      add.l 56(sp),d0
   11530:	|      move.l d0,-(sp)
   11532:	|      jsr 1571c <trimStack>
   11538:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1153a:	|      movea.l 56(sp),a0
   1153e:	|      move.l 24(a0),d0
   11542:	|      move.l d0,-(sp)
   11544:	|      pea 1 <_start+0x1>
   11548:	|      moveq #48,d0
   1154a:	|      add.l sp,d0
   1154c:	|      move.l d0,-(sp)
   1154e:	|      jsr 14d98 <getValueType>
   11554:	|      lea 12(sp),sp
   11558:	|      tst.w d0
   1155a:	|  ,-- bne.s 11562 <builtIn_addScreenRegion+0x68>
   1155c:	|  |   moveq #1,d0
   1155e:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11562:	|  '-> moveq #24,d0
   11564:	|      add.l 56(sp),d0
   11568:	|      move.l d0,-(sp)
   1156a:	|      jsr 1571c <trimStack>
   11570:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11572:	|      movea.l 56(sp),a0
   11576:	|      move.l 24(a0),d0
   1157a:	|      move.l d0,-(sp)
   1157c:	|      pea 1 <_start+0x1>
   11580:	|      moveq #52,d0
   11582:	|      add.l sp,d0
   11584:	|      move.l d0,-(sp)
   11586:	|      jsr 14d98 <getValueType>
   1158c:	|      lea 12(sp),sp
   11590:	|      tst.w d0
   11592:	|  ,-- bne.s 1159a <builtIn_addScreenRegion+0xa0>
   11594:	|  |   moveq #1,d0
   11596:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1159a:	|  '-> moveq #24,d0
   1159c:	|      add.l 56(sp),d0
   115a0:	|      move.l d0,-(sp)
   115a2:	|      jsr 1571c <trimStack>
   115a8:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115aa:	|      movea.l 56(sp),a0
   115ae:	|      move.l 24(a0),d0
   115b2:	|      move.l d0,-(sp)
   115b4:	|      pea 1 <_start+0x1>
   115b8:	|      lea 32(sp),a0
   115bc:	|      move.l a0,-(sp)
   115be:	|      jsr 14d98 <getValueType>
   115c4:	|      lea 12(sp),sp
   115c8:	|      tst.w d0
   115ca:	|  ,-- bne.s 115d2 <builtIn_addScreenRegion+0xd8>
   115cc:	|  |   moveq #1,d0
   115ce:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   115d2:	|  '-> moveq #24,d0
   115d4:	|      add.l 56(sp),d0
   115d8:	|      move.l d0,-(sp)
   115da:	|      jsr 1571c <trimStack>
   115e0:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115e2:	|      movea.l 56(sp),a0
   115e6:	|      move.l 24(a0),d0
   115ea:	|      move.l d0,-(sp)
   115ec:	|      pea 1 <_start+0x1>
   115f0:	|      lea 36(sp),a0
   115f4:	|      move.l a0,-(sp)
   115f6:	|      jsr 14d98 <getValueType>
   115fc:	|      lea 12(sp),sp
   11600:	|      tst.w d0
   11602:	|  ,-- bne.s 1160a <builtIn_addScreenRegion+0x110>
   11604:	|  |   moveq #1,d0
   11606:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1160a:	|  '-> moveq #24,d0
   1160c:	|      add.l 56(sp),d0
   11610:	|      move.l d0,-(sp)
   11612:	|      jsr 1571c <trimStack>
   11618:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1161a:	|      movea.l 56(sp),a0
   1161e:	|      move.l 24(a0),d0
   11622:	|      move.l d0,-(sp)
   11624:	|      pea 1 <_start+0x1>
   11628:	|      lea 40(sp),a0
   1162c:	|      move.l a0,-(sp)
   1162e:	|      jsr 14d98 <getValueType>
   11634:	|      lea 12(sp),sp
   11638:	|      tst.w d0
   1163a:	|  ,-- bne.s 11642 <builtIn_addScreenRegion+0x148>
   1163c:	|  |   moveq #1,d0
   1163e:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11642:	|  '-> moveq #24,d0
   11644:	|      add.l 56(sp),d0
   11648:	|      move.l d0,-(sp)
   1164a:	|      jsr 1571c <trimStack>
   11650:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11652:	|      movea.l 56(sp),a0
   11656:	|      move.l 24(a0),d0
   1165a:	|      move.l d0,-(sp)
   1165c:	|      pea 1 <_start+0x1>
   11660:	|      lea 44(sp),a0
   11664:	|      move.l a0,-(sp)
   11666:	|      jsr 14d98 <getValueType>
   1166c:	|      lea 12(sp),sp
   11670:	|      tst.w d0
   11672:	|  ,-- bne.s 1167a <builtIn_addScreenRegion+0x180>
   11674:	|  |   moveq #1,d0
   11676:	+--|-- bra.w 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1167a:	|  '-> moveq #24,d0
   1167c:	|      add.l 56(sp),d0
   11680:	|      move.l d0,-(sp)
   11682:	|      jsr 1571c <trimStack>
   11688:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1168a:	|      movea.l 56(sp),a0
   1168e:	|      move.l 24(a0),d0
   11692:	|      move.l d0,-(sp)
   11694:	|      pea 7 <_start+0x7>
   11698:	|      lea 24(sp),a0
   1169c:	|      move.l a0,-(sp)
   1169e:	|      jsr 14d98 <getValueType>
   116a4:	|      lea 12(sp),sp
   116a8:	|      tst.w d0
   116aa:	|  ,-- bne.s 116b0 <builtIn_addScreenRegion+0x1b6>
   116ac:	|  |   moveq #1,d0
   116ae:	+--|-- bra.s 11704 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   116b0:	|  '-> moveq #24,d0
   116b2:	|      add.l 56(sp),d0
   116b6:	|      move.l d0,-(sp)
   116b8:	|      jsr 1571c <trimStack>
   116be:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   116c0:	|      move.l 16(sp),d5
   116c4:	|      move.l 20(sp),d4
   116c8:	|      move.l 40(sp),d3
   116cc:	|      move.l 44(sp),d2
   116d0:	|      movea.l 24(sp),a1
   116d4:	|      movea.l 28(sp),a0
   116d8:	|      move.l 32(sp),d1
   116dc:	|      move.l 36(sp),d0
   116e0:	|      move.l d5,-(sp)
   116e2:	|      move.l d4,-(sp)
   116e4:	|      move.l d3,-(sp)
   116e6:	|      move.l d2,-(sp)
   116e8:	|      move.l a1,-(sp)
   116ea:	|      move.l a0,-(sp)
   116ec:	|      move.l d1,-(sp)
   116ee:	|      move.l d0,-(sp)
   116f0:	|      jsr 15f14 <addScreenRegion>
   116f6:	|      lea 32(sp),sp
   116fa:	|      tst.w d0
   116fc:	|  ,-- beq.s 11702 <builtIn_addScreenRegion+0x208>
   116fe:	|  |   moveq #2,d0
   11700:	+--|-- bra.s 11704 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11702:	|  '-> moveq #1,d0

}
   11704:	'----> movem.l (sp)+,d2-d5
   11708:	       lea 32(sp),sp
   1170c:	       rts

0001170e <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1170e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11710:	       movea.l 12(sp),a0
   11714:	       move.l 24(a0),d0
   11718:	       move.l d0,-(sp)
   1171a:	       pea 7 <_start+0x7>
   1171e:	       move.l sp,d0
   11720:	       addq.l #8,d0
   11722:	       move.l d0,-(sp)
   11724:	       jsr 14d98 <getValueType>
   1172a:	       lea 12(sp),sp
   1172e:	       tst.w d0
   11730:	   ,-- bne.s 11736 <builtIn_removeScreenRegion+0x28>
   11732:	   |   moveq #1,d0
   11734:	,--|-- bra.s 11754 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11736:	|  '-> moveq #24,d0
   11738:	|      add.l 12(sp),d0
   1173c:	|      move.l d0,-(sp)
   1173e:	|      jsr 1571c <trimStack>
   11744:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11746:	|      move.l (sp),d0
   11748:	|      move.l d0,-(sp)
   1174a:	|      jsr 16202 <removeScreenRegion>
   11750:	|      addq.l #4,sp
	return BR_CONTINUE;
   11752:	|      moveq #2,d0
}
   11754:	'----> addq.l #4,sp
   11756:	       rts

00011758 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11758:	jsr 16386 <showBoxes>
	return BR_CONTINUE;
   1175e:	moveq #2,d0
}
   11760:	rts

00011762 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11762:	jsr 16088 <killAllRegions>
	return BR_CONTINUE;
   11768:	moveq #2,d0
}
   1176a:	rts

0001176c <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1176c:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11770:	       movea.l 24(sp),a0
   11774:	       move.l 24(a0),d0
   11778:	       move.l d0,-(sp)
   1177a:	       jsr 14a44 <getCostumeFromVar>
   11780:	       addq.l #4,sp
   11782:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11786:	   ,-- bne.s 1178e <builtIn_addCharacter+0x22>
   11788:	   |   moveq #1,d0
   1178a:	,--|-- bra.w 1186a <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1178e:	|  '-> moveq #24,d0
   11790:	|      add.l 24(sp),d0
   11794:	|      move.l d0,-(sp)
   11796:	|      jsr 1571c <trimStack>
   1179c:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1179e:	|      movea.l 24(sp),a0
   117a2:	|      move.l 24(a0),d0
   117a6:	|      move.l d0,-(sp)
   117a8:	|      pea 1 <_start+0x1>
   117ac:	|      lea 12(sp),a0
   117b0:	|      move.l a0,-(sp)
   117b2:	|      jsr 14d98 <getValueType>
   117b8:	|      lea 12(sp),sp
   117bc:	|      tst.w d0
   117be:	|  ,-- bne.s 117c6 <builtIn_addCharacter+0x5a>
   117c0:	|  |   moveq #1,d0
   117c2:	+--|-- bra.w 1186a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   117c6:	|  '-> moveq #24,d0
   117c8:	|      add.l 24(sp),d0
   117cc:	|      move.l d0,-(sp)
   117ce:	|      jsr 1571c <trimStack>
   117d4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117d6:	|      movea.l 24(sp),a0
   117da:	|      move.l 24(a0),d0
   117de:	|      move.l d0,-(sp)
   117e0:	|      pea 1 <_start+0x1>
   117e4:	|      moveq #16,d0
   117e6:	|      add.l sp,d0
   117e8:	|      move.l d0,-(sp)
   117ea:	|      jsr 14d98 <getValueType>
   117f0:	|      lea 12(sp),sp
   117f4:	|      tst.w d0
   117f6:	|  ,-- bne.s 117fc <builtIn_addCharacter+0x90>
   117f8:	|  |   moveq #1,d0
   117fa:	+--|-- bra.s 1186a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   117fc:	|  '-> moveq #24,d0
   117fe:	|      add.l 24(sp),d0
   11802:	|      move.l d0,-(sp)
   11804:	|      jsr 1571c <trimStack>
   1180a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1180c:	|      movea.l 24(sp),a0
   11810:	|      move.l 24(a0),d0
   11814:	|      move.l d0,-(sp)
   11816:	|      pea 7 <_start+0x7>
   1181a:	|      lea 8(sp),a0
   1181e:	|      move.l a0,-(sp)
   11820:	|      jsr 14d98 <getValueType>
   11826:	|      lea 12(sp),sp
   1182a:	|      tst.w d0
   1182c:	|  ,-- bne.s 11832 <builtIn_addCharacter+0xc6>
   1182e:	|  |   moveq #1,d0
   11830:	+--|-- bra.s 1186a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11832:	|  '-> moveq #24,d0
   11834:	|      add.l 24(sp),d0
   11838:	|      move.l d0,-(sp)
   1183a:	|      jsr 1571c <trimStack>
   11840:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11842:	|      movea.l (sp),a0
   11844:	|      move.l 4(sp),d1
   11848:	|      move.l 8(sp),d0
   1184c:	|      move.l 12(sp),-(sp)
   11850:	|      move.l a0,-(sp)
   11852:	|      move.l d1,-(sp)
   11854:	|      move.l d0,-(sp)
   11856:	|      jsr 9738 <addPerson>
   1185c:	|      lea 16(sp),sp
   11860:	|      tst.w d0
   11862:	|  ,-- beq.s 11868 <builtIn_addCharacter+0xfc>
   11864:	|  |   moveq #2,d0
   11866:	+--|-- bra.s 1186a <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11868:	|  '-> moveq #1,d0
}
   1186a:	'----> lea 16(sp),sp
   1186e:	       rts

00011870 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11870:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11872:	       movea.l 12(sp),a0
   11876:	       move.l 24(a0),d0
   1187a:	       move.l d0,-(sp)
   1187c:	       pea 7 <_start+0x7>
   11880:	       move.l sp,d0
   11882:	       addq.l #8,d0
   11884:	       move.l d0,-(sp)
   11886:	       jsr 14d98 <getValueType>
   1188c:	       lea 12(sp),sp
   11890:	       tst.w d0
   11892:	   ,-- bne.s 11898 <builtIn_hideCharacter+0x28>
   11894:	   |   moveq #1,d0
   11896:	,--|-- bra.s 118b8 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11898:	|  '-> moveq #24,d0
   1189a:	|      add.l 12(sp),d0
   1189e:	|      move.l d0,-(sp)
   118a0:	|      jsr 1571c <trimStack>
   118a6:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   118a8:	|      move.l (sp),d0
   118aa:	|      move.l d0,-(sp)
   118ac:	|      clr.l -(sp)
   118ae:	|      jsr c1d4 <setShown>
   118b4:	|      addq.l #8,sp
	return BR_CONTINUE;
   118b6:	|      moveq #2,d0
}
   118b8:	'----> addq.l #4,sp
   118ba:	       rts

000118bc <builtIn_showCharacter>:

builtIn(showCharacter)
{
   118bc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118be:	       movea.l 12(sp),a0
   118c2:	       move.l 24(a0),d0
   118c6:	       move.l d0,-(sp)
   118c8:	       pea 7 <_start+0x7>
   118cc:	       move.l sp,d0
   118ce:	       addq.l #8,d0
   118d0:	       move.l d0,-(sp)
   118d2:	       jsr 14d98 <getValueType>
   118d8:	       lea 12(sp),sp
   118dc:	       tst.w d0
   118de:	   ,-- bne.s 118e4 <builtIn_showCharacter+0x28>
   118e0:	   |   moveq #1,d0
   118e2:	,--|-- bra.s 11906 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   118e4:	|  '-> moveq #24,d0
   118e6:	|      add.l 12(sp),d0
   118ea:	|      move.l d0,-(sp)
   118ec:	|      jsr 1571c <trimStack>
   118f2:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   118f4:	|      move.l (sp),d0
   118f6:	|      move.l d0,-(sp)
   118f8:	|      pea 1 <_start+0x1>
   118fc:	|      jsr c1d4 <setShown>
   11902:	|      addq.l #8,sp
	return BR_CONTINUE;
   11904:	|      moveq #2,d0
}
   11906:	'----> addq.l #4,sp
   11908:	       rts

0001190a <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1190a:	jsr 6fbc <killSpeechTimers>
	killMostPeople ();
   11910:	jsr afd4 <killMostPeople>
	return BR_CONTINUE;
   11916:	moveq #2,d0
}
   11918:	rts

0001191a <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1191a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1191c:	       movea.l 16(sp),a0
   11920:	       move.l 24(a0),d0
   11924:	       move.l d0,-(sp)
   11926:	       pea 1 <_start+0x1>
   1192a:	       move.l sp,d0
   1192c:	       addq.l #8,d0
   1192e:	       move.l d0,-(sp)
   11930:	       jsr 14d98 <getValueType>
   11936:	       lea 12(sp),sp
   1193a:	       tst.w d0
   1193c:	   ,-- bne.s 11942 <builtIn_setCharacterDrawMode+0x28>
   1193e:	   |   moveq #1,d0
   11940:	,--|-- bra.s 1199c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11942:	|  '-> moveq #24,d0
   11944:	|      add.l 16(sp),d0
   11948:	|      move.l d0,-(sp)
   1194a:	|      jsr 1571c <trimStack>
   11950:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11952:	|      movea.l 16(sp),a0
   11956:	|      move.l 24(a0),d0
   1195a:	|      move.l d0,-(sp)
   1195c:	|      pea 7 <_start+0x7>
   11960:	|      moveq #12,d0
   11962:	|      add.l sp,d0
   11964:	|      move.l d0,-(sp)
   11966:	|      jsr 14d98 <getValueType>
   1196c:	|      lea 12(sp),sp
   11970:	|      tst.w d0
   11972:	|  ,-- bne.s 11978 <builtIn_setCharacterDrawMode+0x5e>
   11974:	|  |   moveq #1,d0
   11976:	+--|-- bra.s 1199c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11978:	|  '-> moveq #24,d0
   1197a:	|      add.l 16(sp),d0
   1197e:	|      move.l d0,-(sp)
   11980:	|      jsr 1571c <trimStack>
   11986:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11988:	|      move.l 4(sp),d1
   1198c:	|      move.l (sp),d0
   1198e:	|      move.l d1,-(sp)
   11990:	|      move.l d0,-(sp)
   11992:	|      jsr bb12 <setDrawMode>
   11998:	|      addq.l #8,sp
	return BR_CONTINUE;
   1199a:	|      moveq #2,d0
}
   1199c:	'----> addq.l #8,sp
   1199e:	       rts

000119a0 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   119a0:	pea 1a250 <PutChar+0x1f36>
   119a6:	jsr 17878 <KPrintF>
   119ac:	addq.l #4,sp
	return BR_CONTINUE;
   119ae:	moveq #2,d0
}
   119b0:	rts

000119b2 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   119b2:	pea 1a283 <PutChar+0x1f69>
   119b8:	jsr 17878 <KPrintF>
   119be:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   119c0:	moveq #2,d0
}
   119c2:	rts

000119c4 <builtIn_setScale>:

builtIn(setScale)
{
   119c4:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119c6:	       movea.l 16(sp),a0
   119ca:	       move.l 24(a0),d0
   119ce:	       move.l d0,-(sp)
   119d0:	       pea 1 <_start+0x1>
   119d4:	       move.l sp,d0
   119d6:	       addq.l #8,d0
   119d8:	       move.l d0,-(sp)
   119da:	       jsr 14d98 <getValueType>
   119e0:	       lea 12(sp),sp
   119e4:	       tst.w d0
   119e6:	   ,-- bne.s 119ec <builtIn_setScale+0x28>
   119e8:	   |   moveq #1,d0
   119ea:	,--|-- bra.s 11a4e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   119ec:	|  '-> moveq #24,d0
   119ee:	|      add.l 16(sp),d0
   119f2:	|      move.l d0,-(sp)
   119f4:	|      jsr 1571c <trimStack>
   119fa:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119fc:	|      movea.l 16(sp),a0
   11a00:	|      move.l 24(a0),d0
   11a04:	|      move.l d0,-(sp)
   11a06:	|      pea 1 <_start+0x1>
   11a0a:	|      moveq #12,d0
   11a0c:	|      add.l sp,d0
   11a0e:	|      move.l d0,-(sp)
   11a10:	|      jsr 14d98 <getValueType>
   11a16:	|      lea 12(sp),sp
   11a1a:	|      tst.w d0
   11a1c:	|  ,-- bne.s 11a22 <builtIn_setScale+0x5e>
   11a1e:	|  |   moveq #1,d0
   11a20:	+--|-- bra.s 11a4e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11a22:	|  '-> moveq #24,d0
   11a24:	|      add.l 16(sp),d0
   11a28:	|      move.l d0,-(sp)
   11a2a:	|      jsr 1571c <trimStack>
   11a30:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11a32:	|      move.l (sp),d0
   11a34:	|      move.l d0,d0
   11a36:	|      movea.w d0,a1
   11a38:	|      move.l 4(sp),d0
   11a3c:	|      move.l d0,d0
   11a3e:	|      movea.w d0,a0
   11a40:	|      move.l a1,-(sp)
   11a42:	|      move.l a0,-(sp)
   11a44:	|      jsr c1ac <setScale>
   11a4a:	|      addq.l #8,sp
	return BR_CONTINUE;
   11a4c:	|      moveq #2,d0
}
   11a4e:	'----> addq.l #8,sp
   11a50:	       rts

00011a52 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11a52:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a54:	       movea.l 12(sp),a0
   11a58:	       move.l 24(a0),d0
   11a5c:	       move.l d0,-(sp)
   11a5e:	       pea 7 <_start+0x7>
   11a62:	       move.l sp,d0
   11a64:	       addq.l #8,d0
   11a66:	       move.l d0,-(sp)
   11a68:	       jsr 14d98 <getValueType>
   11a6e:	       lea 12(sp),sp
   11a72:	       tst.w d0
   11a74:	   ,-- bne.s 11a7a <builtIn_stopCharacter+0x28>
   11a76:	   |   moveq #1,d0
   11a78:	,--|-- bra.s 11ab2 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11a7a:	|  '-> moveq #24,d0
   11a7c:	|      add.l 12(sp),d0
   11a80:	|      move.l d0,-(sp)
   11a82:	|      jsr 1571c <trimStack>
   11a88:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11a8a:	|      move.l (sp),d0
   11a8c:	|      move.l d0,-(sp)
   11a8e:	|      jsr c2e0 <stopPerson>
   11a94:	|      addq.l #4,sp
   11a96:	|      movea.w d0,a0
   11a98:	|      moveq #28,d0
   11a9a:	|      add.l 12(sp),d0
   11a9e:	|      move.l a0,-(sp)
   11aa0:	|      pea 1 <_start+0x1>
   11aa4:	|      move.l d0,-(sp)
   11aa6:	|      jsr 1568a <setVariable>
   11aac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ab0:	|      moveq #2,d0
}
   11ab2:	'----> addq.l #4,sp
   11ab4:	       rts

00011ab6 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11ab6:	pea 1a2bd <PutChar+0x1fa3>
   11abc:	jsr 17878 <KPrintF>
   11ac2:	addq.l #4,sp
	return BR_CONTINUE;
   11ac4:	moveq #2,d0
}
   11ac6:	rts

00011ac8 <builtIn_animate>:

builtIn(animate)
{
   11ac8:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11aca:	       movea.l 16(sp),a0
   11ace:	       move.l 24(a0),d0
   11ad2:	       move.l d0,-(sp)
   11ad4:	       jsr 15270 <getAnimationFromVar>
   11ada:	       addq.l #4,sp
   11adc:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11ae0:	   ,-- bne.s 11ae6 <builtIn_animate+0x1e>
   11ae2:	   |   moveq #1,d0
   11ae4:	,--|-- bra.s 11b64 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11ae6:	|  '-> moveq #24,d0
   11ae8:	|      add.l 16(sp),d0
   11aec:	|      move.l d0,-(sp)
   11aee:	|      jsr 1571c <trimStack>
   11af4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11af6:	|      movea.l 16(sp),a0
   11afa:	|      move.l 24(a0),d0
   11afe:	|      move.l d0,-(sp)
   11b00:	|      pea 7 <_start+0x7>
   11b04:	|      move.l sp,d0
   11b06:	|      addq.l #8,d0
   11b08:	|      move.l d0,-(sp)
   11b0a:	|      jsr 14d98 <getValueType>
   11b10:	|      lea 12(sp),sp
   11b14:	|      tst.w d0
   11b16:	|  ,-- bne.s 11b1c <builtIn_animate+0x54>
   11b18:	|  |   moveq #1,d0
   11b1a:	+--|-- bra.s 11b64 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11b1c:	|  '-> moveq #24,d0
   11b1e:	|      add.l 16(sp),d0
   11b22:	|      move.l d0,-(sp)
   11b24:	|      jsr 1571c <trimStack>
   11b2a:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11b2c:	|      move.l (sp),d0
   11b2e:	|      move.l 4(sp),-(sp)
   11b32:	|      move.l d0,-(sp)
   11b34:	|      jsr 99ae <animatePerson>
   11b3a:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11b3c:	|      move.l 4(sp),-(sp)
   11b40:	|      jsr c334 <timeForAnim>
   11b46:	|      addq.l #4,sp
   11b48:	|      move.l d0,d1
   11b4a:	|      moveq #28,d0
   11b4c:	|      add.l 16(sp),d0
   11b50:	|      move.l d1,-(sp)
   11b52:	|      pea 1 <_start+0x1>
   11b56:	|      move.l d0,-(sp)
   11b58:	|      jsr 1568a <setVariable>
   11b5e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b62:	|      moveq #2,d0
}
   11b64:	'----> addq.l #8,sp
   11b66:	       rts

00011b68 <builtIn_setCostume>:

builtIn(setCostume)
{
   11b68:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11b6a:	       movea.l 16(sp),a0
   11b6e:	       move.l 24(a0),d0
   11b72:	       move.l d0,-(sp)
   11b74:	       jsr 14a44 <getCostumeFromVar>
   11b7a:	       addq.l #4,sp
   11b7c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11b80:	   ,-- bne.s 11b86 <builtIn_setCostume+0x1e>
   11b82:	   |   moveq #1,d0
   11b84:	,--|-- bra.s 11bde <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11b86:	|  '-> moveq #24,d0
   11b88:	|      add.l 16(sp),d0
   11b8c:	|      move.l d0,-(sp)
   11b8e:	|      jsr 1571c <trimStack>
   11b94:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b96:	|      movea.l 16(sp),a0
   11b9a:	|      move.l 24(a0),d0
   11b9e:	|      move.l d0,-(sp)
   11ba0:	|      pea 7 <_start+0x7>
   11ba4:	|      move.l sp,d0
   11ba6:	|      addq.l #8,d0
   11ba8:	|      move.l d0,-(sp)
   11baa:	|      jsr 14d98 <getValueType>
   11bb0:	|      lea 12(sp),sp
   11bb4:	|      tst.w d0
   11bb6:	|  ,-- bne.s 11bbc <builtIn_setCostume+0x54>
   11bb8:	|  |   moveq #1,d0
   11bba:	+--|-- bra.s 11bde <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11bbc:	|  '-> moveq #24,d0
   11bbe:	|      add.l 16(sp),d0
   11bc2:	|      move.l d0,-(sp)
   11bc4:	|      jsr 1571c <trimStack>
   11bca:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11bcc:	|      move.l (sp),d0
   11bce:	|      move.l 4(sp),-(sp)
   11bd2:	|      move.l d0,-(sp)
   11bd4:	|      jsr 99f8 <animatePersonUsingPersona>
   11bda:	|      addq.l #8,sp
	return BR_CONTINUE;
   11bdc:	|      moveq #2,d0
}
   11bde:	'----> addq.l #8,sp
   11be0:	       rts

00011be2 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11be2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11be4:	       movea.l 16(sp),a0
   11be8:	       move.l 24(a0),d0
   11bec:	       move.l d0,-(sp)
   11bee:	       pea 1 <_start+0x1>
   11bf2:	       move.l sp,d0
   11bf4:	       addq.l #8,d0
   11bf6:	       move.l d0,-(sp)
   11bf8:	       jsr 14d98 <getValueType>
   11bfe:	       lea 12(sp),sp
   11c02:	       tst.w d0
   11c04:	   ,-- bne.s 11c0a <builtIn_floatCharacter+0x28>
   11c06:	   |   moveq #1,d0
   11c08:	,--|-- bra.s 11c7e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11c0a:	|  '-> moveq #24,d0
   11c0c:	|      add.l 16(sp),d0
   11c10:	|      move.l d0,-(sp)
   11c12:	|      jsr 1571c <trimStack>
   11c18:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c1a:	|      movea.l 16(sp),a0
   11c1e:	|      move.l 24(a0),d0
   11c22:	|      move.l d0,-(sp)
   11c24:	|      pea 7 <_start+0x7>
   11c28:	|      moveq #12,d0
   11c2a:	|      add.l sp,d0
   11c2c:	|      move.l d0,-(sp)
   11c2e:	|      jsr 14d98 <getValueType>
   11c34:	|      lea 12(sp),sp
   11c38:	|      tst.w d0
   11c3a:	|  ,-- bne.s 11c40 <builtIn_floatCharacter+0x5e>
   11c3c:	|  |   moveq #1,d0
   11c3e:	+--|-- bra.s 11c7e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11c40:	|  '-> moveq #24,d0
   11c42:	|      add.l 16(sp),d0
   11c46:	|      move.l d0,-(sp)
   11c48:	|      jsr 1571c <trimStack>
   11c4e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11c50:	|      move.l 4(sp),d1
   11c54:	|      move.l (sp),d0
   11c56:	|      move.l d1,-(sp)
   11c58:	|      move.l d0,-(sp)
   11c5a:	|      jsr ab88 <floatCharacter>
   11c60:	|      addq.l #8,sp
   11c62:	|      movea.w d0,a0
   11c64:	|      moveq #28,d0
   11c66:	|      add.l 16(sp),d0
   11c6a:	|      move.l a0,-(sp)
   11c6c:	|      pea 1 <_start+0x1>
   11c70:	|      move.l d0,-(sp)
   11c72:	|      jsr 1568a <setVariable>
   11c78:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c7c:	|      moveq #2,d0
}
   11c7e:	'----> addq.l #8,sp
   11c80:	       rts

00011c82 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11c82:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c84:	       movea.l 16(sp),a0
   11c88:	       move.l 24(a0),d0
   11c8c:	       move.l d0,-(sp)
   11c8e:	       pea 1 <_start+0x1>
   11c92:	       move.l sp,d0
   11c94:	       addq.l #8,d0
   11c96:	       move.l d0,-(sp)
   11c98:	       jsr 14d98 <getValueType>
   11c9e:	       lea 12(sp),sp
   11ca2:	       tst.w d0
   11ca4:	   ,-- bne.s 11caa <builtIn_setCharacterWalkSpeed+0x28>
   11ca6:	   |   moveq #1,d0
   11ca8:	,--|-- bra.s 11d1e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11caa:	|  '-> moveq #24,d0
   11cac:	|      add.l 16(sp),d0
   11cb0:	|      move.l d0,-(sp)
   11cb2:	|      jsr 1571c <trimStack>
   11cb8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cba:	|      movea.l 16(sp),a0
   11cbe:	|      move.l 24(a0),d0
   11cc2:	|      move.l d0,-(sp)
   11cc4:	|      pea 7 <_start+0x7>
   11cc8:	|      moveq #12,d0
   11cca:	|      add.l sp,d0
   11ccc:	|      move.l d0,-(sp)
   11cce:	|      jsr 14d98 <getValueType>
   11cd4:	|      lea 12(sp),sp
   11cd8:	|      tst.w d0
   11cda:	|  ,-- bne.s 11ce0 <builtIn_setCharacterWalkSpeed+0x5e>
   11cdc:	|  |   moveq #1,d0
   11cde:	+--|-- bra.s 11d1e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11ce0:	|  '-> moveq #24,d0
   11ce2:	|      add.l 16(sp),d0
   11ce6:	|      move.l d0,-(sp)
   11ce8:	|      jsr 1571c <trimStack>
   11cee:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11cf0:	|      move.l 4(sp),d1
   11cf4:	|      move.l (sp),d0
   11cf6:	|      move.l d1,-(sp)
   11cf8:	|      move.l d0,-(sp)
   11cfa:	|      jsr c148 <setCharacterWalkSpeed>
   11d00:	|      addq.l #8,sp
   11d02:	|      movea.w d0,a0
   11d04:	|      moveq #28,d0
   11d06:	|      add.l 16(sp),d0
   11d0a:	|      move.l a0,-(sp)
   11d0c:	|      pea 1 <_start+0x1>
   11d10:	|      move.l d0,-(sp)
   11d12:	|      jsr 1568a <setVariable>
   11d18:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11d1c:	|      moveq #2,d0
}
   11d1e:	'----> addq.l #8,sp
   11d20:	       rts

00011d22 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11d22:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d24:	       movea.l 16(sp),a0
   11d28:	       move.l 24(a0),d0
   11d2c:	       move.l d0,-(sp)
   11d2e:	       pea 1 <_start+0x1>
   11d32:	       move.l sp,d0
   11d34:	       addq.l #8,d0
   11d36:	       move.l d0,-(sp)
   11d38:	       jsr 14d98 <getValueType>
   11d3e:	       lea 12(sp),sp
   11d42:	       tst.w d0
   11d44:	   ,-- bne.s 11d4a <builtIn_turnCharacter+0x28>
   11d46:	   |   moveq #1,d0
   11d48:	,--|-- bra.s 11dbe <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11d4a:	|  '-> moveq #24,d0
   11d4c:	|      add.l 16(sp),d0
   11d50:	|      move.l d0,-(sp)
   11d52:	|      jsr 1571c <trimStack>
   11d58:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d5a:	|      movea.l 16(sp),a0
   11d5e:	|      move.l 24(a0),d0
   11d62:	|      move.l d0,-(sp)
   11d64:	|      pea 7 <_start+0x7>
   11d68:	|      moveq #12,d0
   11d6a:	|      add.l sp,d0
   11d6c:	|      move.l d0,-(sp)
   11d6e:	|      jsr 14d98 <getValueType>
   11d74:	|      lea 12(sp),sp
   11d78:	|      tst.w d0
   11d7a:	|  ,-- bne.s 11d80 <builtIn_turnCharacter+0x5e>
   11d7c:	|  |   moveq #1,d0
   11d7e:	+--|-- bra.s 11dbe <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11d80:	|  '-> moveq #24,d0
   11d82:	|      add.l 16(sp),d0
   11d86:	|      move.l d0,-(sp)
   11d88:	|      jsr 1571c <trimStack>
   11d8e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11d90:	|      move.l (sp),d1
   11d92:	|      move.l 4(sp),d0
   11d96:	|      move.l d1,-(sp)
   11d98:	|      move.l d0,-(sp)
   11d9a:	|      jsr c3ec <turnPersonToFace>
   11da0:	|      addq.l #8,sp
   11da2:	|      movea.w d0,a0
   11da4:	|      moveq #28,d0
   11da6:	|      add.l 16(sp),d0
   11daa:	|      move.l a0,-(sp)
   11dac:	|      pea 1 <_start+0x1>
   11db0:	|      move.l d0,-(sp)
   11db2:	|      jsr 1568a <setVariable>
   11db8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11dbc:	|      moveq #2,d0
}
   11dbe:	'----> addq.l #8,sp
   11dc0:	       rts

00011dc2 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11dc2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dc4:	       movea.l 16(sp),a0
   11dc8:	       move.l 24(a0),d0
   11dcc:	       move.l d0,-(sp)
   11dce:	       pea 1 <_start+0x1>
   11dd2:	       move.l sp,d0
   11dd4:	       addq.l #8,d0
   11dd6:	       move.l d0,-(sp)
   11dd8:	       jsr 14d98 <getValueType>
   11dde:	       lea 12(sp),sp
   11de2:	       tst.w d0
   11de4:	   ,-- bne.s 11dea <builtIn_setCharacterExtra+0x28>
   11de6:	   |   moveq #1,d0
   11de8:	,--|-- bra.s 11e5e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11dea:	|  '-> moveq #24,d0
   11dec:	|      add.l 16(sp),d0
   11df0:	|      move.l d0,-(sp)
   11df2:	|      jsr 1571c <trimStack>
   11df8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11dfa:	|      movea.l 16(sp),a0
   11dfe:	|      move.l 24(a0),d0
   11e02:	|      move.l d0,-(sp)
   11e04:	|      pea 7 <_start+0x7>
   11e08:	|      moveq #12,d0
   11e0a:	|      add.l sp,d0
   11e0c:	|      move.l d0,-(sp)
   11e0e:	|      jsr 14d98 <getValueType>
   11e14:	|      lea 12(sp),sp
   11e18:	|      tst.w d0
   11e1a:	|  ,-- bne.s 11e20 <builtIn_setCharacterExtra+0x5e>
   11e1c:	|  |   moveq #1,d0
   11e1e:	+--|-- bra.s 11e5e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11e20:	|  '-> moveq #24,d0
   11e22:	|      add.l 16(sp),d0
   11e26:	|      move.l d0,-(sp)
   11e28:	|      jsr 1571c <trimStack>
   11e2e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11e30:	|      move.l (sp),d1
   11e32:	|      move.l 4(sp),d0
   11e36:	|      move.l d1,-(sp)
   11e38:	|      move.l d0,-(sp)
   11e3a:	|      jsr c176 <setPersonExtra>
   11e40:	|      addq.l #8,sp
   11e42:	|      movea.w d0,a0
   11e44:	|      moveq #28,d0
   11e46:	|      add.l 16(sp),d0
   11e4a:	|      move.l a0,-(sp)
   11e4c:	|      pea 1 <_start+0x1>
   11e50:	|      move.l d0,-(sp)
   11e52:	|      jsr 1568a <setVariable>
   11e58:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11e5c:	|      moveq #2,d0
}
   11e5e:	'----> addq.l #8,sp
   11e60:	       rts

00011e62 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11e62:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e64:	       movea.l 12(sp),a0
   11e68:	       move.l 24(a0),d0
   11e6c:	       move.l d0,-(sp)
   11e6e:	       pea 7 <_start+0x7>
   11e72:	       move.l sp,d0
   11e74:	       addq.l #8,d0
   11e76:	       move.l d0,-(sp)
   11e78:	       jsr 14d98 <getValueType>
   11e7e:	       lea 12(sp),sp
   11e82:	       tst.w d0
   11e84:	   ,-- bne.s 11e8a <builtIn_removeCharacter+0x28>
   11e86:	   |   moveq #1,d0
   11e88:	,--|-- bra.s 11ea8 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11e8a:	|  '-> moveq #24,d0
   11e8c:	|      add.l 12(sp),d0
   11e90:	|      move.l d0,-(sp)
   11e92:	|      jsr 1571c <trimStack>
   11e98:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11e9a:	|      move.l (sp),d0
   11e9c:	|      move.l d0,-(sp)
   11e9e:	|      jsr b376 <removeOneCharacter>
   11ea4:	|      addq.l #4,sp
	return BR_CONTINUE;
   11ea6:	|      moveq #2,d0
}
   11ea8:	'----> addq.l #4,sp
   11eaa:	       rts

00011eac <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11eac:	                lea -28(sp),sp
   11eb0:	                move.l d2,-(sp)
   11eb2:	                move.l 44(sp),d1
   11eb6:	                move.l 48(sp),d0
   11eba:	                move.w d1,d1
   11ebc:	                move.w d1,6(sp)
   11ec0:	                move.w d0,d0
   11ec2:	                move.w d0,4(sp)
	switch (numParams) {
   11ec6:	                moveq #2,d0
   11ec8:	                cmp.l 36(sp),d0
   11ecc:	      ,-------- beq.w 1200e <moveChr+0x162>
   11ed0:	      |         moveq #3,d0
   11ed2:	      |         cmp.l 36(sp),d0
   11ed6:	,-----|-------- bne.w 12142 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11eda:	|     |         movea.l 40(sp),a0
   11ede:	|     |         move.l 24(a0),d0
   11ee2:	|     |         move.l d0,-(sp)
   11ee4:	|     |         pea 1 <_start+0x1>
   11ee8:	|     |         lea 20(sp),a0
   11eec:	|     |         move.l a0,-(sp)
   11eee:	|     |         jsr 14d98 <getValueType>
   11ef4:	|     |         lea 12(sp),sp
   11ef8:	|     |         tst.w d0
   11efa:	|     |     ,-- bne.s 11f02 <moveChr+0x56>
   11efc:	|     |     |   moveq #1,d0
   11efe:	|  ,--|-----|-- bra.w 12152 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11f02:	|  |  |     '-> moveq #24,d0
   11f04:	|  |  |         add.l 40(sp),d0
   11f08:	|  |  |         move.l d0,-(sp)
   11f0a:	|  |  |         jsr 1571c <trimStack>
   11f10:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f12:	|  |  |         movea.l 40(sp),a0
   11f16:	|  |  |         move.l 24(a0),d0
   11f1a:	|  |  |         move.l d0,-(sp)
   11f1c:	|  |  |         pea 1 <_start+0x1>
   11f20:	|  |  |         lea 24(sp),a0
   11f24:	|  |  |         move.l a0,-(sp)
   11f26:	|  |  |         jsr 14d98 <getValueType>
   11f2c:	|  |  |         lea 12(sp),sp
   11f30:	|  |  |         tst.w d0
   11f32:	|  |  |     ,-- bne.s 11f3a <moveChr+0x8e>
   11f34:	|  |  |     |   moveq #1,d0
   11f36:	|  +--|-----|-- bra.w 12152 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11f3a:	|  |  |     '-> moveq #24,d0
   11f3c:	|  |  |         add.l 40(sp),d0
   11f40:	|  |  |         move.l d0,-(sp)
   11f42:	|  |  |         jsr 1571c <trimStack>
   11f48:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f4a:	|  |  |         movea.l 40(sp),a0
   11f4e:	|  |  |         move.l 24(a0),d0
   11f52:	|  |  |         move.l d0,-(sp)
   11f54:	|  |  |         pea 7 <_start+0x7>
   11f58:	|  |  |         lea 16(sp),a0
   11f5c:	|  |  |         move.l a0,-(sp)
   11f5e:	|  |  |         jsr 14d98 <getValueType>
   11f64:	|  |  |         lea 12(sp),sp
   11f68:	|  |  |         tst.w d0
   11f6a:	|  |  |     ,-- bne.s 11f72 <moveChr+0xc6>
   11f6c:	|  |  |     |   moveq #1,d0
   11f6e:	|  +--|-----|-- bra.w 12152 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11f72:	|  |  |     '-> moveq #24,d0
   11f74:	|  |  |         add.l 40(sp),d0
   11f78:	|  |  |         move.l d0,-(sp)
   11f7a:	|  |  |         jsr 1571c <trimStack>
   11f80:	|  |  |         addq.l #4,sp

			if (force) {
   11f82:	|  |  |         tst.w 6(sp)
   11f86:	|  |  |     ,-- beq.s 11fb6 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11f88:	|  |  |     |   movea.l 8(sp),a0
   11f8c:	|  |  |     |   move.l 12(sp),d1
   11f90:	|  |  |     |   move.l 16(sp),d0
   11f94:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3cef>
   11f98:	|  |  |     |   move.l 44(sp),-(sp)
   11f9c:	|  |  |     |   move.l a0,-(sp)
   11f9e:	|  |  |     |   move.l d1,-(sp)
   11fa0:	|  |  |     |   move.l d0,-(sp)
   11fa2:	|  |  |     |   jsr abac <forceWalkingPerson>
   11fa8:	|  |  |     |   lea 20(sp),sp
   11fac:	|  |  |     |   tst.w d0
   11fae:	|  |  |  ,--|-- beq.s 12008 <moveChr+0x15c>
   11fb0:	|  |  |  |  |   moveq #3,d0
   11fb2:	|  +--|--|--|-- bra.w 12152 <moveChr+0x2a6>
			} else if (immediate) {
   11fb6:	|  |  |  |  '-> tst.w 4(sp)
   11fba:	|  |  |  |  ,-- beq.s 11fda <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11fbc:	|  |  |  |  |   movea.l 8(sp),a0
   11fc0:	|  |  |  |  |   move.l 12(sp),d1
   11fc4:	|  |  |  |  |   move.l 16(sp),d0
   11fc8:	|  |  |  |  |   move.l a0,-(sp)
   11fca:	|  |  |  |  |   move.l d1,-(sp)
   11fcc:	|  |  |  |  |   move.l d0,-(sp)
   11fce:	|  |  |  |  |   jsr aec2 <jumpPerson>
   11fd4:	|  |  |  |  |   lea 12(sp),sp
   11fd8:	|  |  |  +--|-- bra.s 12008 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11fda:	|  |  |  |  '-> movea.l 8(sp),a0
   11fde:	|  |  |  |      move.l 12(sp),d1
   11fe2:	|  |  |  |      move.l 16(sp),d0
   11fe6:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3cef>
   11fea:	|  |  |  |      move.l 44(sp),-(sp)
   11fee:	|  |  |  |      move.l a0,-(sp)
   11ff0:	|  |  |  |      move.l d1,-(sp)
   11ff2:	|  |  |  |      move.l d0,-(sp)
   11ff4:	|  |  |  |      jsr b092 <makeWalkingPerson>
   11ffa:	|  |  |  |      lea 20(sp),sp
   11ffe:	|  |  |  |      tst.w d0
   12000:	|  |  |  +----- beq.s 12008 <moveChr+0x15c>
   12002:	|  |  |  |      moveq #3,d0
   12004:	|  +--|--|----- bra.w 12152 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12008:	|  |  |  '----> moveq #2,d0
   1200a:	|  +--|-------- bra.w 12152 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1200e:	|  |  '-------> movea.l 40(sp),a0
   12012:	|  |            move.l 24(a0),d0
   12016:	|  |            move.l d0,-(sp)
   12018:	|  |            pea 7 <_start+0x7>
   1201c:	|  |            moveq #32,d0
   1201e:	|  |            add.l sp,d0
   12020:	|  |            move.l d0,-(sp)
   12022:	|  |            jsr 14d98 <getValueType>
   12028:	|  |            lea 12(sp),sp
   1202c:	|  |            tst.w d0
   1202e:	|  |        ,-- bne.s 12036 <moveChr+0x18a>
   12030:	|  |        |   moveq #1,d0
   12032:	|  +--------|-- bra.w 12152 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12036:	|  |        '-> moveq #24,d0
   12038:	|  |            add.l 40(sp),d0
   1203c:	|  |            move.l d0,-(sp)
   1203e:	|  |            jsr 1571c <trimStack>
   12044:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12046:	|  |            movea.l 40(sp),a0
   1204a:	|  |            move.l 24(a0),d0
   1204e:	|  |            move.l d0,-(sp)
   12050:	|  |            pea 7 <_start+0x7>
   12054:	|  |            lea 28(sp),a0
   12058:	|  |            move.l a0,-(sp)
   1205a:	|  |            jsr 14d98 <getValueType>
   12060:	|  |            lea 12(sp),sp
   12064:	|  |            tst.w d0
   12066:	|  |        ,-- bne.s 1206e <moveChr+0x1c2>
   12068:	|  |        |   moveq #1,d0
   1206a:	|  +--------|-- bra.w 12152 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1206e:	|  |        '-> moveq #24,d0
   12070:	|  |            add.l 40(sp),d0
   12074:	|  |            move.l d0,-(sp)
   12076:	|  |            jsr 1571c <trimStack>
   1207c:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   1207e:	|  |            move.l 24(sp),d0
   12082:	|  |            move.l d0,-(sp)
   12084:	|  |            jsr 1605a <getRegionForObject>
   1208a:	|  |            addq.l #4,sp
   1208c:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   12090:	|  |        ,-- bne.s 12098 <moveChr+0x1ec>
   12092:	|  |        |   moveq #2,d0
   12094:	|  +--------|-- bra.w 12152 <moveChr+0x2a6>

			if (force)
   12098:	|  |        '-> tst.w 6(sp)
   1209c:	|  |        ,-- beq.s 120d8 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   1209e:	|  |        |   movea.l 28(sp),a0
   120a2:	|  |        |   move.l 24(a0),d2
   120a6:	|  |        |   movea.l 20(sp),a1
   120aa:	|  |        |   movea.l 28(sp),a0
   120ae:	|  |        |   move.l 20(a0),d1
   120b2:	|  |        |   movea.l 28(sp),a0
   120b6:	|  |        |   move.l 16(a0),d0
   120ba:	|  |        |   move.l d2,-(sp)
   120bc:	|  |        |   move.l 44(sp),-(sp)
   120c0:	|  |        |   move.l a1,-(sp)
   120c2:	|  |        |   move.l d1,-(sp)
   120c4:	|  |        |   move.l d0,-(sp)
   120c6:	|  |        |   jsr abac <forceWalkingPerson>
   120cc:	|  |        |   lea 20(sp),sp
   120d0:	|  |        |   tst.w d0
   120d2:	|  |     ,--|-- beq.s 1213e <moveChr+0x292>
   120d4:	|  |     |  |   moveq #3,d0
   120d6:	|  +-----|--|-- bra.s 12152 <moveChr+0x2a6>
			}
			else if (immediate)
   120d8:	|  |     |  '-> tst.w 4(sp)
   120dc:	|  |     |  ,-- beq.s 12104 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   120de:	|  |     |  |   movea.l 20(sp),a1
   120e2:	|  |     |  |   movea.l 28(sp),a0
   120e6:	|  |     |  |   move.l 20(a0),d1
   120ea:	|  |     |  |   movea.l 28(sp),a0
   120ee:	|  |     |  |   move.l 16(a0),d0
   120f2:	|  |     |  |   move.l a1,-(sp)
   120f4:	|  |     |  |   move.l d1,-(sp)
   120f6:	|  |     |  |   move.l d0,-(sp)
   120f8:	|  |     |  |   jsr aec2 <jumpPerson>
   120fe:	|  |     |  |   lea 12(sp),sp
   12102:	|  |     +--|-- bra.s 1213e <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12104:	|  |     |  '-> movea.l 28(sp),a0
   12108:	|  |     |      move.l 24(a0),d2
   1210c:	|  |     |      movea.l 20(sp),a1
   12110:	|  |     |      movea.l 28(sp),a0
   12114:	|  |     |      move.l 20(a0),d1
   12118:	|  |     |      movea.l 28(sp),a0
   1211c:	|  |     |      move.l 16(a0),d0
   12120:	|  |     |      move.l d2,-(sp)
   12122:	|  |     |      move.l 44(sp),-(sp)
   12126:	|  |     |      move.l a1,-(sp)
   12128:	|  |     |      move.l d1,-(sp)
   1212a:	|  |     |      move.l d0,-(sp)
   1212c:	|  |     |      jsr b092 <makeWalkingPerson>
   12132:	|  |     |      lea 20(sp),sp
   12136:	|  |     |      tst.w d0
   12138:	|  |     +----- beq.s 1213e <moveChr+0x292>
   1213a:	|  |     |      moveq #3,d0
   1213c:	|  +-----|----- bra.s 12152 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1213e:	|  |     '----> moveq #2,d0
   12140:	|  +----------- bra.s 12152 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12142:	'--|----------> pea 1a2db <PutChar+0x1fc1>
   12148:	   |            jsr 17878 <KPrintF>
   1214e:	   |            addq.l #4,sp
			return BR_ERROR;
   12150:	   |            moveq #1,d0
	}
}
   12152:	   '----------> move.l (sp)+,d2
   12154:	                lea 28(sp),sp
   12158:	                rts

0001215a <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   1215a:	clr.l -(sp)
   1215c:	clr.l -(sp)
   1215e:	move.l 16(sp),-(sp)
   12162:	move.l 16(sp),-(sp)
   12166:	jsr 11eac <moveChr>
   1216c:	lea 16(sp),sp
}
   12170:	rts

00012172 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12172:	clr.l -(sp)
   12174:	pea 1 <_start+0x1>
   12178:	move.l 16(sp),-(sp)
   1217c:	move.l 16(sp),-(sp)
   12180:	jsr 11eac <moveChr>
   12186:	lea 16(sp),sp
}
   1218a:	rts

0001218c <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   1218c:	pea 1 <_start+0x1>
   12190:	clr.l -(sp)
   12192:	move.l 16(sp),-(sp)
   12196:	move.l 16(sp),-(sp)
   1219a:	jsr 11eac <moveChr>
   121a0:	lea 16(sp),sp
}
   121a4:	rts

000121a6 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   121a6:	jsr 8830 <clearStatusBar>
	return BR_CONTINUE;
   121ac:	moveq #2,d0
}
   121ae:	rts

000121b0 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   121b0:	jsr 88d8 <killLastStatus>
	return BR_CONTINUE;
   121b6:	moveq #2,d0
}
   121b8:	rts

000121ba <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   121ba:	jsr 87c6 <addStatusBar>
	return BR_CONTINUE;
   121c0:	moveq #2,d0
}
   121c2:	rts

000121c4 <builtIn_statusText>:

builtIn(statusText)
{
   121c4:	       subq.l #8,sp
   121c6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   121c8:	       movea.l 20(sp),a0
   121cc:	       move.l 24(a0),d0
   121d0:	       move.l d0,-(sp)
   121d2:	       jsr 1536e <getTextFromAnyVar>
   121d8:	       addq.l #4,sp
   121da:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   121de:	   ,-- bne.s 121e4 <builtIn_statusText+0x20>
   121e0:	   |   moveq #1,d0
   121e2:	,--|-- bra.s 12218 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   121e4:	|  '-> moveq #24,d0
   121e6:	|      add.l 20(sp),d0
   121ea:	|      move.l d0,-(sp)
   121ec:	|      jsr 1571c <trimStack>
   121f2:	|      addq.l #4,sp
	setStatusBar(newText);
   121f4:	|      move.l 8(sp),-(sp)
   121f8:	|      jsr 8b58 <setStatusBar>
   121fe:	|      addq.l #4,sp
	FreeVec(newText);
   12200:	|      move.l 8(sp),4(sp)
   12206:	|      move.l 1d0c6 <SysBase>,d0
   1220c:	|      movea.l d0,a6
   1220e:	|      movea.l 4(sp),a1
   12212:	|      jsr -690(a6)
	return BR_CONTINUE;
   12216:	|      moveq #2,d0
}
   12218:	'----> movea.l (sp)+,a6
   1221a:	       addq.l #8,sp
   1221c:	       rts

0001221e <builtIn_lightStatus>:

builtIn(lightStatus)
{
   1221e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12220:	       movea.l 12(sp),a0
   12224:	       move.l 24(a0),d0
   12228:	       move.l d0,-(sp)
   1222a:	       pea 1 <_start+0x1>
   1222e:	       move.l sp,d0
   12230:	       addq.l #8,d0
   12232:	       move.l d0,-(sp)
   12234:	       jsr 14d98 <getValueType>
   1223a:	       lea 12(sp),sp
   1223e:	       tst.w d0
   12240:	   ,-- bne.s 12246 <builtIn_lightStatus+0x28>
   12242:	   |   moveq #1,d0
   12244:	,--|-- bra.s 12264 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   12246:	|  '-> moveq #24,d0
   12248:	|      add.l 12(sp),d0
   1224c:	|      move.l d0,-(sp)
   1224e:	|      jsr 1571c <trimStack>
   12254:	|      addq.l #4,sp
	setLitStatus (val);
   12256:	|      move.l (sp),d0
   12258:	|      move.l d0,-(sp)
   1225a:	|      jsr 8b48 <setLitStatus>
   12260:	|      addq.l #4,sp
	return BR_CONTINUE;
   12262:	|      moveq #2,d0
}
   12264:	'----> addq.l #4,sp
   12266:	       rts

00012268 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12268:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1226a:	       movea.l 16(sp),a0
   1226e:	       move.l 24(a0),d0
   12272:	       move.l d0,-(sp)
   12274:	       pea 1 <_start+0x1>
   12278:	       move.l sp,d0
   1227a:	       addq.l #8,d0
   1227c:	       move.l d0,-(sp)
   1227e:	       jsr 14d98 <getValueType>
   12284:	       lea 12(sp),sp
   12288:	       tst.w d0
   1228a:	   ,-- bne.s 12290 <builtIn_positionStatus+0x28>
   1228c:	   |   moveq #1,d0
   1228e:	,--|-- bra.s 122ea <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   12290:	|  '-> moveq #24,d0
   12292:	|      add.l 16(sp),d0
   12296:	|      move.l d0,-(sp)
   12298:	|      jsr 1571c <trimStack>
   1229e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122a0:	|      movea.l 16(sp),a0
   122a4:	|      move.l 24(a0),d0
   122a8:	|      move.l d0,-(sp)
   122aa:	|      pea 1 <_start+0x1>
   122ae:	|      moveq #12,d0
   122b0:	|      add.l sp,d0
   122b2:	|      move.l d0,-(sp)
   122b4:	|      jsr 14d98 <getValueType>
   122ba:	|      lea 12(sp),sp
   122be:	|      tst.w d0
   122c0:	|  ,-- bne.s 122c6 <builtIn_positionStatus+0x5e>
   122c2:	|  |   moveq #1,d0
   122c4:	+--|-- bra.s 122ea <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   122c6:	|  '-> moveq #24,d0
   122c8:	|      add.l 16(sp),d0
   122cc:	|      move.l d0,-(sp)
   122ce:	|      jsr 1571c <trimStack>
   122d4:	|      addq.l #4,sp
	positionStatus (x, y);
   122d6:	|      move.l (sp),d1
   122d8:	|      move.l 4(sp),d0
   122dc:	|      move.l d1,-(sp)
   122de:	|      move.l d0,-(sp)
   122e0:	|      jsr 893a <positionStatus>
   122e6:	|      addq.l #8,sp
	return BR_CONTINUE;
   122e8:	|      moveq #2,d0
}
   122ea:	'----> addq.l #8,sp
   122ec:	       rts

000122ee <builtIn_alignStatus>:

builtIn(alignStatus)
{
   122ee:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122f0:	       movea.l 12(sp),a0
   122f4:	       move.l 24(a0),d0
   122f8:	       move.l d0,-(sp)
   122fa:	       pea 1 <_start+0x1>
   122fe:	       move.l sp,d0
   12300:	       addq.l #8,d0
   12302:	       move.l d0,-(sp)
   12304:	       jsr 14d98 <getValueType>
   1230a:	       lea 12(sp),sp
   1230e:	       tst.w d0
   12310:	   ,-- bne.s 12316 <builtIn_alignStatus+0x28>
   12312:	   |   moveq #1,d0
   12314:	,--|-- bra.s 12336 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   12316:	|  '-> moveq #24,d0
   12318:	|      add.l 12(sp),d0
   1231c:	|      move.l d0,-(sp)
   1231e:	|      jsr 1571c <trimStack>
   12324:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12326:	|      move.l (sp),d0
   12328:	|      movea.l 1ca44 <nowStatus>,a0
   1232e:	|      move.l d0,d0
   12330:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12334:	|      moveq #2,d0
}
   12336:	'----> addq.l #4,sp
   12338:	       rts

0001233a <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   1233a:	             tst.l 4(sp)
   1233e:	      ,----- beq.s 1234a <getFuncNumForCallback+0x10>
   12340:	      |      moveq #1,d0
   12342:	      |      cmp.l 4(sp),d0
   12346:	      |  ,-- beq.s 12350 <getFuncNumForCallback+0x16>
   12348:	   ,--|--|-- bra.s 12386 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   1234a:	   |  '--|-> clr.l 12(sp)
			break;
   1234e:	,--|-----|-- bra.s 12398 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12350:	|  |     '-> movea.l 8(sp),a0
   12354:	|  |         move.l 24(a0),d0
   12358:	|  |         move.l d0,-(sp)
   1235a:	|  |         pea 2 <_start+0x2>
   1235e:	|  |         move.l 20(sp),-(sp)
   12362:	|  |         jsr 14d98 <getValueType>
   12368:	|  |         lea 12(sp),sp
   1236c:	|  |         tst.w d0
   1236e:	|  |     ,-- bne.s 12374 <getFuncNumForCallback+0x3a>
   12370:	|  |     |   clr.w d0
   12372:	|  |  ,--|-- bra.s 1239a <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   12374:	|  |  |  '-> moveq #24,d0
   12376:	|  |  |      add.l 8(sp),d0
   1237a:	|  |  |      move.l d0,-(sp)
   1237c:	|  |  |      jsr 1571c <trimStack>
   12382:	|  |  |      addq.l #4,sp
			break;
   12384:	+--|--|----- bra.s 12398 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   12386:	|  '--|----> pea 1a311 <PutChar+0x1ff7>
   1238c:	|     |      jsr 17878 <KPrintF>
   12392:	|     |      addq.l #4,sp
			return FALSE;
   12394:	|     |      clr.w d0
   12396:	|     +----- bra.s 1239a <getFuncNumForCallback+0x60>
	}
	return TRUE;
   12398:	'-----|----> moveq #1,d0
}
   1239a:	      '----> rts

0001239c <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   1239c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1239e:	       move.l sp,d0
   123a0:	       move.l d0,-(sp)
   123a2:	       move.l 16(sp),-(sp)
   123a6:	       move.l 16(sp),-(sp)
   123aa:	       jsr 1233a <getFuncNumForCallback>
   123b0:	       lea 12(sp),sp
   123b4:	       tst.w d0
   123b6:	,----- beq.s 123c6 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   123b8:	|      movea.l 1ca36 <currentEvents>,a0
   123be:	|      move.l (sp),d0
   123c0:	|      move.l d0,(a0)
		return BR_CONTINUE;
   123c2:	|      moveq #2,d0
   123c4:	|  ,-- bra.s 123c8 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   123c6:	'--|-> moveq #1,d0
}
   123c8:	   '-> addq.l #4,sp
   123ca:	       rts

000123cc <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   123cc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   123ce:	       move.l sp,d0
   123d0:	       move.l d0,-(sp)
   123d2:	       move.l 16(sp),-(sp)
   123d6:	       move.l 16(sp),-(sp)
   123da:	       jsr 1233a <getFuncNumForCallback>
   123e0:	       lea 12(sp),sp
   123e4:	       tst.w d0
   123e6:	,----- beq.s 123f8 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   123e8:	|      movea.l 1ca36 <currentEvents>,a0
   123ee:	|      move.l (sp),d0
   123f0:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   123f4:	|      moveq #2,d0
   123f6:	|  ,-- bra.s 123fa <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   123f8:	'--|-> moveq #1,d0
}
   123fa:	   '-> addq.l #4,sp
   123fc:	       rts

000123fe <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   123fe:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12400:	       move.l sp,d0
   12402:	       move.l d0,-(sp)
   12404:	       move.l 16(sp),-(sp)
   12408:	       move.l 16(sp),-(sp)
   1240c:	       jsr 1233a <getFuncNumForCallback>
   12412:	       lea 12(sp),sp
   12416:	       tst.w d0
   12418:	,----- beq.s 1242a <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   1241a:	|      movea.l 1ca36 <currentEvents>,a0
   12420:	|      move.l (sp),d0
   12422:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12426:	|      moveq #2,d0
   12428:	|  ,-- bra.s 1242c <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   1242a:	'--|-> moveq #1,d0
}
   1242c:	   '-> addq.l #4,sp
   1242e:	       rts

00012430 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12430:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12432:	       move.l sp,d0
   12434:	       move.l d0,-(sp)
   12436:	       move.l 16(sp),-(sp)
   1243a:	       move.l 16(sp),-(sp)
   1243e:	       jsr 1233a <getFuncNumForCallback>
   12444:	       lea 12(sp),sp
   12448:	       tst.w d0
   1244a:	,----- beq.s 1245c <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1244c:	|      movea.l 1ca36 <currentEvents>,a0
   12452:	|      move.l (sp),d0
   12454:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12458:	|      moveq #2,d0
   1245a:	|  ,-- bra.s 1245e <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1245c:	'--|-> moveq #1,d0
}
   1245e:	   '-> addq.l #4,sp
   12460:	       rts

00012462 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12462:	          subq.l #8,sp
   12464:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12466:	          move.l sp,d0
   12468:	          addq.l #4,d0
   1246a:	          move.l d0,-(sp)
   1246c:	          move.l 24(sp),-(sp)
   12470:	          move.l 24(sp),-(sp)
   12474:	          jsr 1233a <getFuncNumForCallback>
   1247a:	          lea 12(sp),sp
   1247e:	          tst.w d0
   12480:	,-------- beq.s 124de <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12482:	|         movea.l 1ca36 <currentEvents>,a0
   12488:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   1248e:	|         move.l 4(sp),d0
   12492:	|  ,----- beq.s 124ae <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12494:	|  |      move.l 4(sp),d0
   12498:	|  |      movea.l 1ca36 <currentEvents>,a2
   1249e:	|  |      move.l d0,-(sp)
   124a0:	|  |      jsr 7644 <preloadNewFunctionNum>
   124a6:	|  |      addq.l #4,sp
   124a8:	|  |      move.l d0,20(a2)
   124ac:	|  |  ,-- bra.s 124b8 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   124ae:	|  '--|-> movea.l 1ca36 <currentEvents>,a0
   124b4:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   124b8:	|     '-> tst.l 8(sp)
   124bc:	|     ,-- beq.s 124da <builtIn_onFocusChange+0x78>
   124be:	|     |   movea.l 1ca36 <currentEvents>,a0
   124c4:	|     |   move.l 20(a0),d0
   124c8:	|     |   cmp.l 8(sp),d0
   124cc:	|     +-- beq.s 124da <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   124ce:	|     |   move.l 8(sp),-(sp)
   124d2:	|     |   jsr 7ab2 <unloadFunction>
   124d8:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   124da:	|     '-> moveq #2,d0
   124dc:	|     ,-- bra.s 124e0 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   124de:	'-----|-> moveq #1,d0
}
   124e0:	      '-> movea.l (sp)+,a2
   124e2:	          addq.l #8,sp
   124e4:	          rts

000124e6 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   124e6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   124e8:	       move.l sp,d0
   124ea:	       move.l d0,-(sp)
   124ec:	       move.l 16(sp),-(sp)
   124f0:	       move.l 16(sp),-(sp)
   124f4:	       jsr 1233a <getFuncNumForCallback>
   124fa:	       lea 12(sp),sp
   124fe:	       tst.w d0
   12500:	,----- beq.s 12512 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12502:	|      movea.l 1ca36 <currentEvents>,a0
   12508:	|      move.l (sp),d0
   1250a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   1250e:	|      moveq #2,d0
   12510:	|  ,-- bra.s 12514 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12512:	'--|-> moveq #1,d0
}
   12514:	   '-> addq.l #4,sp
   12516:	       rts

00012518 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   12518:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1251a:	       move.l sp,d0
   1251c:	       move.l d0,-(sp)
   1251e:	       move.l 16(sp),-(sp)
   12522:	       move.l 16(sp),-(sp)
   12526:	       jsr 1233a <getFuncNumForCallback>
   1252c:	       lea 12(sp),sp
   12530:	       tst.w d0
   12532:	,----- beq.s 12544 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12534:	|      movea.l 1ca36 <currentEvents>,a0
   1253a:	|      move.l (sp),d0
   1253c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12540:	|      moveq #2,d0
   12542:	|  ,-- bra.s 12546 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12544:	'--|-> moveq #1,d0
}
   12546:	   '-> addq.l #4,sp
   12548:	       rts

0001254a <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1254a:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1254c:	          move.l sp,d0
   1254e:	          move.l d0,-(sp)
   12550:	          move.l 16(sp),-(sp)
   12554:	          move.l 16(sp),-(sp)
   12558:	          jsr 1233a <getFuncNumForCallback>
   1255e:	          lea 12(sp),sp
   12562:	          tst.w d0
   12564:	,-------- beq.s 12590 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12566:	|         move.l 1d096 <noStack>,d1
   1256c:	|         move.l (sp),d0
   1256e:	|         pea 1 <_start+0x1>
   12572:	|         move.l d1,-(sp)
   12574:	|         clr.l -(sp)
   12576:	|         clr.l -(sp)
   12578:	|         move.l d0,-(sp)
   1257a:	|         jsr 7a06 <startNewFunctionNum>
   12580:	|         lea 20(sp),sp
   12584:	|         tst.l d0
   12586:	|     ,-- bne.s 1258c <builtIn_spawnSub+0x42>
   12588:	|     |   moveq #1,d0
   1258a:	|  ,--|-- bra.s 12592 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   1258c:	|  |  '-> moveq #2,d0
   1258e:	|  +----- bra.s 12592 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   12590:	'--|----> moveq #1,d0
}
   12592:	   '----> addq.l #4,sp
   12594:	          rts

00012596 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12596:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12598:	          move.l sp,d0
   1259a:	          addq.l #4,d0
   1259c:	          move.l d0,-(sp)
   1259e:	          move.l 20(sp),-(sp)
   125a2:	          move.l 20(sp),-(sp)
   125a6:	          jsr 1233a <getFuncNumForCallback>
   125ac:	          lea 12(sp),sp
   125b0:	          tst.w d0
   125b2:	,-------- beq.s 125e8 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   125b4:	|         move.l 4(sp),d1
   125b8:	|         move.l sp,d0
   125ba:	|         addq.l #2,d0
   125bc:	|         move.l d0,-(sp)
   125be:	|         move.l 20(sp),-(sp)
   125c2:	|         move.l d1,-(sp)
   125c4:	|         jsr 5646 <cancelAFunction>
   125ca:	|         lea 12(sp),sp
		if (killedMyself) {
   125ce:	|         move.w 2(sp),d0
   125d2:	|  ,----- beq.s 125e4 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   125d4:	|  |      move.l 16(sp),-(sp)
   125d8:	|  |      jsr 5538 <abortFunction>
   125de:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   125e0:	|  |      moveq #5,d0
   125e2:	|  |  ,-- bra.s 125ea <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   125e4:	|  '--|-> moveq #2,d0
   125e6:	|     +-- bra.s 125ea <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   125e8:	'-----|-> moveq #1,d0
}
   125ea:	      '-> addq.l #8,sp
   125ec:	          rts

000125ee <builtIn_stringWidth>:

builtIn(stringWidth)
{
   125ee:	       subq.l #8,sp
   125f0:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   125f2:	       movea.l 20(sp),a0
   125f6:	       move.l 24(a0),d0
   125fa:	       move.l d0,-(sp)
   125fc:	       jsr 1536e <getTextFromAnyVar>
   12602:	       addq.l #4,sp
   12604:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12608:	   ,-- bne.s 1260e <builtIn_stringWidth+0x20>
   1260a:	   |   moveq #1,d0
   1260c:	,--|-- bra.s 1265c <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1260e:	|  '-> moveq #24,d0
   12610:	|      add.l 20(sp),d0
   12614:	|      move.l d0,-(sp)
   12616:	|      jsr 1571c <trimStack>
   1261c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1261e:	|      move.l 8(sp),-(sp)
   12622:	|      jsr 15e82 <stringWidth>
   12628:	|      addq.l #4,sp
   1262a:	|      move.l d0,d1
   1262c:	|      moveq #28,d0
   1262e:	|      add.l 20(sp),d0
   12632:	|      move.l d1,-(sp)
   12634:	|      pea 1 <_start+0x1>
   12638:	|      move.l d0,-(sp)
   1263a:	|      jsr 1568a <setVariable>
   12640:	|      lea 12(sp),sp
	FreeVec(theText);
   12644:	|      move.l 8(sp),4(sp)
   1264a:	|      move.l 1d0c6 <SysBase>,d0
   12650:	|      movea.l d0,a6
   12652:	|      movea.l 4(sp),a1
   12656:	|      jsr -690(a6)
	return BR_CONTINUE;
   1265a:	|      moveq #2,d0
}
   1265c:	'----> movea.l (sp)+,a6
   1265e:	       addq.l #8,sp
   12660:	       rts

00012662 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12662:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12664:	       movea.l 12(sp),a0
   12668:	       move.l 24(a0),d0
   1266c:	       move.l d0,-(sp)
   1266e:	       pea 1 <_start+0x1>
   12672:	       move.l sp,d0
   12674:	       addq.l #8,d0
   12676:	       move.l d0,-(sp)
   12678:	       jsr 14d98 <getValueType>
   1267e:	       lea 12(sp),sp
   12682:	       tst.w d0
   12684:	   ,-- bne.s 1268a <builtIn_hardScroll+0x28>
   12686:	   |   moveq #1,d0
   12688:	,--|-- bra.s 126a8 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1268a:	|  '-> moveq #24,d0
   1268c:	|      add.l 12(sp),d0
   12690:	|      move.l d0,-(sp)
   12692:	|      jsr 1571c <trimStack>
   12698:	|      addq.l #4,sp
	hardScroll (v);
   1269a:	|      move.l (sp),d0
   1269c:	|      move.l d0,-(sp)
   1269e:	|      jsr d7fe <hardScroll>
   126a4:	|      addq.l #4,sp
	return BR_CONTINUE;
   126a6:	|      moveq #2,d0
}
   126a8:	'----> addq.l #4,sp
   126aa:	       rts

000126ac <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   126ac:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126ae:	       movea.l 12(sp),a0
   126b2:	       move.l 24(a0),d0
   126b6:	       move.l d0,-(sp)
   126b8:	       pea 7 <_start+0x7>
   126bc:	       move.l sp,d0
   126be:	       addq.l #8,d0
   126c0:	       move.l d0,-(sp)
   126c2:	       jsr 14d98 <getValueType>
   126c8:	       lea 12(sp),sp
   126cc:	       tst.w d0
   126ce:	   ,-- bne.s 126d4 <builtIn_isScreenRegion+0x28>
   126d0:	   |   moveq #1,d0
   126d2:	,--|-- bra.s 12714 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   126d4:	|  '-> moveq #24,d0
   126d6:	|      add.l 12(sp),d0
   126da:	|      move.l d0,-(sp)
   126dc:	|      jsr 1571c <trimStack>
   126e2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   126e4:	|      move.l (sp),d0
   126e6:	|      move.l d0,-(sp)
   126e8:	|      jsr 1605a <getRegionForObject>
   126ee:	|      addq.l #4,sp
   126f0:	|      tst.l d0
   126f2:	|      sne d0
   126f4:	|      neg.b d0
   126f6:	|      moveq #0,d1
   126f8:	|      move.b d0,d1
   126fa:	|      moveq #28,d0
   126fc:	|      add.l 12(sp),d0
   12700:	|      move.l d1,-(sp)
   12702:	|      pea 1 <_start+0x1>
   12706:	|      move.l d0,-(sp)
   12708:	|      jsr 1568a <setVariable>
   1270e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12712:	|      moveq #2,d0
}
   12714:	'----> addq.l #4,sp
   12716:	       rts

00012718 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12718:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1271a:	       movea.l 12(sp),a0
   1271e:	       move.l 24(a0),d0
   12722:	       move.l d0,-(sp)
   12724:	       pea 1 <_start+0x1>
   12728:	       move.l sp,d0
   1272a:	       addq.l #8,d0
   1272c:	       move.l d0,-(sp)
   1272e:	       jsr 14d98 <getValueType>
   12734:	       lea 12(sp),sp
   12738:	       tst.w d0
   1273a:	   ,-- bne.s 12740 <builtIn_setSpeechSpeed+0x28>
   1273c:	   |   moveq #1,d0
   1273e:	,--|-- bra.s 1278e <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12740:	|  '-> moveq #24,d0
   12742:	|      add.l 12(sp),d0
   12746:	|      move.l d0,-(sp)
   12748:	|      jsr 1571c <trimStack>
   1274e:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12750:	|      move.l (sp),d0
   12752:	|      move.l d0,-(sp)
   12754:	|      jsr 17caa <__floatsisf>
   1275a:	|      addq.l #4,sp
   1275c:	|      move.l #1008981770,-(sp)
   12762:	|      move.l d0,-(sp)
   12764:	|      jsr 17d5c <__mulsf3>
   1276a:	|      addq.l #8,sp
   1276c:	|      move.l d0,1ca30 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12772:	|      moveq #28,d0
   12774:	|      add.l 12(sp),d0
   12778:	|      pea 1 <_start+0x1>
   1277c:	|      pea 1 <_start+0x1>
   12780:	|      move.l d0,-(sp)
   12782:	|      jsr 1568a <setVariable>
   12788:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1278c:	|      moveq #2,d0
}
   1278e:	'----> addq.l #4,sp
   12790:	       rts

00012792 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12792:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12794:	       movea.l 12(sp),a0
   12798:	       move.l 24(a0),d0
   1279c:	       move.l d0,-(sp)
   1279e:	       pea 1 <_start+0x1>
   127a2:	       move.l sp,d0
   127a4:	       addq.l #8,d0
   127a6:	       move.l d0,-(sp)
   127a8:	       jsr 14d98 <getValueType>
   127ae:	       lea 12(sp),sp
   127b2:	       tst.w d0
   127b4:	   ,-- bne.s 127ba <builtIn_setFontSpacing+0x28>
   127b6:	   |   moveq #1,d0
   127b8:	,--|-- bra.s 127f0 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   127ba:	|  '-> move.l (sp),d0
   127bc:	|      move.l d0,d0
   127be:	|      move.w d0,1cfbe <fontSpace>
	trimStack (&fun -> stack);
   127c4:	|      moveq #24,d0
   127c6:	|      add.l 12(sp),d0
   127ca:	|      move.l d0,-(sp)
   127cc:	|      jsr 1571c <trimStack>
   127d2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   127d4:	|      moveq #28,d0
   127d6:	|      add.l 12(sp),d0
   127da:	|      pea 1 <_start+0x1>
   127de:	|      pea 1 <_start+0x1>
   127e2:	|      move.l d0,-(sp)
   127e4:	|      jsr 1568a <setVariable>
   127ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   127ee:	|      moveq #2,d0
}
   127f0:	'----> addq.l #4,sp
   127f2:	       rts

000127f4 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   127f4:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127f6:	          movea.l 12(sp),a0
   127fa:	          move.l 24(a0),d0
   127fe:	          move.l d0,-(sp)
   12800:	          pea 1 <_start+0x1>
   12804:	          move.l sp,d0
   12806:	          addq.l #8,d0
   12808:	          move.l d0,-(sp)
   1280a:	          jsr 14d98 <getValueType>
   12810:	          lea 12(sp),sp
   12814:	          tst.w d0
   12816:	      ,-- bne.s 1281c <builtIn_transitionLevel+0x28>
   12818:	      |   moveq #1,d0
   1281a:	,-----|-- bra.s 12870 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1281c:	|     '-> moveq #24,d0
   1281e:	|         add.l 12(sp),d0
   12822:	|         move.l d0,-(sp)
   12824:	|         jsr 1571c <trimStack>
   1282a:	|         addq.l #4,sp

	if (number < 0)
   1282c:	|         move.l (sp),d0
   1282e:	|     ,-- bpl.s 12838 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12830:	|     |   clr.b 1ca34 <brightnessLevel>
   12836:	|  ,--|-- bra.s 12854 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12838:	|  |  '-> move.l (sp),d0
   1283a:	|  |      cmpi.l #255,d0
   12840:	|  |  ,-- ble.s 1284a <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12842:	|  |  |   st 1ca34 <brightnessLevel>
   12848:	|  +--|-- bra.s 12854 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1284a:	|  |  '-> move.l (sp),d0
   1284c:	|  |      move.l d0,d0
   1284e:	|  |      move.b d0,1ca34 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12854:	|  '----> moveq #28,d0
   12856:	|         add.l 12(sp),d0
   1285a:	|         pea 1 <_start+0x1>
   1285e:	|         pea 1 <_start+0x1>
   12862:	|         move.l d0,-(sp)
   12864:	|         jsr 1568a <setVariable>
   1286a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1286e:	|         moveq #2,d0
}
   12870:	'-------> addq.l #4,sp
   12872:	          rts

00012874 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12874:	movea.l 8(sp),a0
   12878:	move.l 24(a0),d0
   1287c:	move.l d0,-(sp)
   1287e:	jsr 152d8 <getBoolean>
   12884:	addq.l #4,sp
   12886:	move.w d0,1d066 <captureAllKeys>
	trimStack (&fun -> stack);
   1288c:	moveq #24,d0
   1288e:	add.l 8(sp),d0
   12892:	move.l d0,-(sp)
   12894:	jsr 1571c <trimStack>
   1289a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1289c:	move.w 1d066 <captureAllKeys>,d0
   128a2:	movea.w d0,a0
   128a4:	moveq #28,d0
   128a6:	add.l 8(sp),d0
   128aa:	move.l a0,-(sp)
   128ac:	pea 1 <_start+0x1>
   128b0:	move.l d0,-(sp)
   128b2:	jsr 1568a <setVariable>
   128b8:	lea 12(sp),sp
	return BR_CONTINUE;
   128bc:	moveq #2,d0
}
   128be:	rts

000128c0 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   128c0:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128c4:	       movea.l 20(sp),a0
   128c8:	       move.l 24(a0),d0
   128cc:	       move.l d0,-(sp)
   128ce:	       pea 1 <_start+0x1>
   128d2:	       moveq #12,d0
   128d4:	       add.l sp,d0
   128d6:	       move.l d0,-(sp)
   128d8:	       jsr 14d98 <getValueType>
   128de:	       lea 12(sp),sp
   128e2:	       tst.w d0
   128e4:	   ,-- bne.s 128ec <builtIn_spinCharacter+0x2c>
   128e6:	   |   moveq #1,d0
   128e8:	,--|-- bra.w 1299c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   128ec:	|  '-> moveq #24,d0
   128ee:	|      add.l 20(sp),d0
   128f2:	|      move.l d0,-(sp)
   128f4:	|      jsr 1571c <trimStack>
   128fa:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128fc:	|      movea.l 20(sp),a0
   12900:	|      move.l 24(a0),d0
   12904:	|      move.l d0,-(sp)
   12906:	|      pea 7 <_start+0x7>
   1290a:	|      lea 8(sp),a0
   1290e:	|      move.l a0,-(sp)
   12910:	|      jsr 14d98 <getValueType>
   12916:	|      lea 12(sp),sp
   1291a:	|      tst.w d0
   1291c:	|  ,-- bne.s 12922 <builtIn_spinCharacter+0x62>
   1291e:	|  |   moveq #1,d0
   12920:	+--|-- bra.s 1299c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12922:	|  '-> moveq #24,d0
   12924:	|      add.l 20(sp),d0
   12928:	|      move.l d0,-(sp)
   1292a:	|      jsr 1571c <trimStack>
   12930:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12932:	|      move.l (sp),d0
   12934:	|      move.l d0,-(sp)
   12936:	|      jsr ab3e <findPerson>
   1293c:	|      addq.l #4,sp
   1293e:	|      move.l d0,8(sp)
	if (thisPerson) {
   12942:	|  ,-- beq.s 12982 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12944:	|  |   move.l 4(sp),d0
   12948:	|  |   movea.l 8(sp),a0
   1294c:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12950:	|  |   movea.l 8(sp),a0
   12954:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1295a:	|  |   movea.l 8(sp),a0
   1295e:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12964:	|  |   moveq #28,d0
   12966:	|  |   add.l 20(sp),d0
   1296a:	|  |   pea 1 <_start+0x1>
   1296e:	|  |   pea 1 <_start+0x1>
   12972:	|  |   move.l d0,-(sp)
   12974:	|  |   jsr 1568a <setVariable>
   1297a:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1297e:	|  |   moveq #3,d0
   12980:	+--|-- bra.s 1299c <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12982:	|  '-> moveq #28,d0
   12984:	|      add.l 20(sp),d0
   12988:	|      clr.l -(sp)
   1298a:	|      pea 1 <_start+0x1>
   1298e:	|      move.l d0,-(sp)
   12990:	|      jsr 1568a <setVariable>
   12996:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1299a:	|      moveq #2,d0
	}
}
   1299c:	'----> lea 12(sp),sp
   129a0:	       rts

000129a2 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   129a2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129a4:	          movea.l 16(sp),a0
   129a8:	          move.l 24(a0),d0
   129ac:	          move.l d0,-(sp)
   129ae:	          pea 7 <_start+0x7>
   129b2:	          move.l sp,d0
   129b4:	          addq.l #8,d0
   129b6:	          move.l d0,-(sp)
   129b8:	          jsr 14d98 <getValueType>
   129be:	          lea 12(sp),sp
   129c2:	          tst.w d0
   129c4:	      ,-- bne.s 129ca <builtIn_getCharacterDirection+0x28>
   129c6:	      |   moveq #1,d0
   129c8:	,-----|-- bra.s 12a28 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   129ca:	|     '-> moveq #24,d0
   129cc:	|         add.l 16(sp),d0
   129d0:	|         move.l d0,-(sp)
   129d2:	|         jsr 1571c <trimStack>
   129d8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   129da:	|         move.l (sp),d0
   129dc:	|         move.l d0,-(sp)
   129de:	|         jsr ab3e <findPerson>
   129e4:	|         addq.l #4,sp
   129e6:	|         move.l d0,4(sp)
	if (thisPerson) {
   129ea:	|  ,----- beq.s 12a0e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   129ec:	|  |      movea.l 4(sp),a0
   129f0:	|  |      move.l 106(a0),d1
   129f4:	|  |      moveq #28,d0
   129f6:	|  |      add.l 16(sp),d0
   129fa:	|  |      move.l d1,-(sp)
   129fc:	|  |      pea 1 <_start+0x1>
   12a00:	|  |      move.l d0,-(sp)
   12a02:	|  |      jsr 1568a <setVariable>
   12a08:	|  |      lea 12(sp),sp
   12a0c:	|  |  ,-- bra.s 12a26 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a0e:	|  '--|-> moveq #28,d0
   12a10:	|     |   add.l 16(sp),d0
   12a14:	|     |   clr.l -(sp)
   12a16:	|     |   pea 1 <_start+0x1>
   12a1a:	|     |   move.l d0,-(sp)
   12a1c:	|     |   jsr 1568a <setVariable>
   12a22:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a26:	|     '-> moveq #2,d0
}
   12a28:	'-------> addq.l #8,sp
   12a2a:	          rts

00012a2c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12a2c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a2e:	       movea.l 16(sp),a0
   12a32:	       move.l 24(a0),d0
   12a36:	       move.l d0,-(sp)
   12a38:	       pea 7 <_start+0x7>
   12a3c:	       move.l sp,d0
   12a3e:	       addq.l #8,d0
   12a40:	       move.l d0,-(sp)
   12a42:	       jsr 14d98 <getValueType>
   12a48:	       lea 12(sp),sp
   12a4c:	       tst.w d0
   12a4e:	   ,-- bne.s 12a54 <builtIn_isCharacter+0x28>
   12a50:	   |   moveq #1,d0
   12a52:	,--|-- bra.s 12a96 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12a54:	|  '-> moveq #24,d0
   12a56:	|      add.l 16(sp),d0
   12a5a:	|      move.l d0,-(sp)
   12a5c:	|      jsr 1571c <trimStack>
   12a62:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12a64:	|      move.l (sp),d0
   12a66:	|      move.l d0,-(sp)
   12a68:	|      jsr ab3e <findPerson>
   12a6e:	|      addq.l #4,sp
   12a70:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12a74:	|      sne d0
   12a76:	|      neg.b d0
   12a78:	|      moveq #0,d1
   12a7a:	|      move.b d0,d1
   12a7c:	|      moveq #28,d0
   12a7e:	|      add.l 16(sp),d0
   12a82:	|      move.l d1,-(sp)
   12a84:	|      pea 1 <_start+0x1>
   12a88:	|      move.l d0,-(sp)
   12a8a:	|      jsr 1568a <setVariable>
   12a90:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12a94:	|      moveq #2,d0
}
   12a96:	'----> addq.l #8,sp
   12a98:	       rts

00012a9a <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12a9a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a9c:	          movea.l 16(sp),a0
   12aa0:	          move.l 24(a0),d0
   12aa4:	          move.l d0,-(sp)
   12aa6:	          pea 7 <_start+0x7>
   12aaa:	          move.l sp,d0
   12aac:	          addq.l #8,d0
   12aae:	          move.l d0,-(sp)
   12ab0:	          jsr 14d98 <getValueType>
   12ab6:	          lea 12(sp),sp
   12aba:	          tst.w d0
   12abc:	      ,-- bne.s 12ac2 <builtIn_normalCharacter+0x28>
   12abe:	      |   moveq #1,d0
   12ac0:	,-----|-- bra.s 12b3e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12ac2:	|     '-> moveq #24,d0
   12ac4:	|         add.l 16(sp),d0
   12ac8:	|         move.l d0,-(sp)
   12aca:	|         jsr 1571c <trimStack>
   12ad0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12ad2:	|         move.l (sp),d0
   12ad4:	|         move.l d0,-(sp)
   12ad6:	|         jsr ab3e <findPerson>
   12adc:	|         addq.l #4,sp
   12ade:	|         move.l d0,4(sp)
	if (thisPerson)
   12ae2:	|  ,----- beq.s 12b24 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12ae4:	|  |      movea.l 4(sp),a0
   12ae8:	|  |      movea.l 80(a0),a0
   12aec:	|  |      move.l (a0),d1
   12aee:	|  |      movea.l 4(sp),a0
   12af2:	|  |      move.l 106(a0),d0
   12af6:	|  |      add.l d0,d0
   12af8:	|  |      add.l d0,d0
   12afa:	|  |      movea.l d1,a0
   12afc:	|  |      adda.l d0,a0
   12afe:	|  |      move.l (a0),d0
   12b00:	|  |      movea.l 4(sp),a0
   12b04:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12b08:	|  |      moveq #28,d0
   12b0a:	|  |      add.l 16(sp),d0
   12b0e:	|  |      pea 1 <_start+0x1>
   12b12:	|  |      pea 1 <_start+0x1>
   12b16:	|  |      move.l d0,-(sp)
   12b18:	|  |      jsr 1568a <setVariable>
   12b1e:	|  |      lea 12(sp),sp
   12b22:	|  |  ,-- bra.s 12b3c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b24:	|  '--|-> moveq #28,d0
   12b26:	|     |   add.l 16(sp),d0
   12b2a:	|     |   clr.l -(sp)
   12b2c:	|     |   pea 1 <_start+0x1>
   12b30:	|     |   move.l d0,-(sp)
   12b32:	|     |   jsr 1568a <setVariable>
   12b38:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b3c:	|     '-> moveq #2,d0
}
   12b3e:	'-------> addq.l #8,sp
   12b40:	          rts

00012b42 <builtIn_isMoving>:

builtIn(isMoving)
{
   12b42:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b44:	          movea.l 16(sp),a0
   12b48:	          move.l 24(a0),d0
   12b4c:	          move.l d0,-(sp)
   12b4e:	          pea 7 <_start+0x7>
   12b52:	          move.l sp,d0
   12b54:	          addq.l #8,d0
   12b56:	          move.l d0,-(sp)
   12b58:	          jsr 14d98 <getValueType>
   12b5e:	          lea 12(sp),sp
   12b62:	          tst.w d0
   12b64:	      ,-- bne.s 12b6a <builtIn_isMoving+0x28>
   12b66:	      |   moveq #1,d0
   12b68:	,-----|-- bra.s 12bca <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12b6a:	|     '-> moveq #24,d0
   12b6c:	|         add.l 16(sp),d0
   12b70:	|         move.l d0,-(sp)
   12b72:	|         jsr 1571c <trimStack>
   12b78:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12b7a:	|         move.l (sp),d0
   12b7c:	|         move.l d0,-(sp)
   12b7e:	|         jsr ab3e <findPerson>
   12b84:	|         addq.l #4,sp
   12b86:	|         move.l d0,4(sp)
	if (thisPerson)
   12b8a:	|  ,----- beq.s 12bb0 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12b8c:	|  |      movea.l 4(sp),a0
   12b90:	|  |      move.w 64(a0),d0
   12b94:	|  |      movea.w d0,a0
   12b96:	|  |      moveq #28,d0
   12b98:	|  |      add.l 16(sp),d0
   12b9c:	|  |      move.l a0,-(sp)
   12b9e:	|  |      pea 1 <_start+0x1>
   12ba2:	|  |      move.l d0,-(sp)
   12ba4:	|  |      jsr 1568a <setVariable>
   12baa:	|  |      lea 12(sp),sp
   12bae:	|  |  ,-- bra.s 12bc8 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12bb0:	|  '--|-> moveq #28,d0
   12bb2:	|     |   add.l 16(sp),d0
   12bb6:	|     |   clr.l -(sp)
   12bb8:	|     |   pea 1 <_start+0x1>
   12bbc:	|     |   move.l d0,-(sp)
   12bbe:	|     |   jsr 1568a <setVariable>
   12bc4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12bc8:	|     '-> moveq #2,d0
}
   12bca:	'-------> addq.l #8,sp
   12bcc:	          rts

00012bce <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12bce:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12bd2:	          movea.l 20(sp),a0
   12bd6:	          move.l 24(a0),d0
   12bda:	          move.l d0,-(sp)
   12bdc:	          pea 7 <_start+0x7>
   12be0:	          lea 8(sp),a0
   12be4:	          move.l a0,-(sp)
   12be6:	          jsr 14d98 <getValueType>
   12bec:	          lea 12(sp),sp
   12bf0:	          tst.w d0
   12bf2:	      ,-- bne.s 12bfa <builtIn_fetchEvent+0x2c>
   12bf4:	      |   moveq #1,d0
   12bf6:	,-----|-- bra.w 12c8e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12bfa:	|     '-> moveq #24,d0
   12bfc:	|         add.l 20(sp),d0
   12c00:	|         move.l d0,-(sp)
   12c02:	|         jsr 1571c <trimStack>
   12c08:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c0a:	|         movea.l 20(sp),a0
   12c0e:	|         move.l 24(a0),d0
   12c12:	|         move.l d0,-(sp)
   12c14:	|         pea 7 <_start+0x7>
   12c18:	|         moveq #12,d0
   12c1a:	|         add.l sp,d0
   12c1c:	|         move.l d0,-(sp)
   12c1e:	|         jsr 14d98 <getValueType>
   12c24:	|         lea 12(sp),sp
   12c28:	|         tst.w d0
   12c2a:	|     ,-- bne.s 12c30 <builtIn_fetchEvent+0x62>
   12c2c:	|     |   moveq #1,d0
   12c2e:	+-----|-- bra.s 12c8e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12c30:	|     '-> moveq #24,d0
   12c32:	|         add.l 20(sp),d0
   12c36:	|         move.l d0,-(sp)
   12c38:	|         jsr 1571c <trimStack>
   12c3e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12c40:	|         move.l (sp),d1
   12c42:	|         move.l 4(sp),d0
   12c46:	|         move.l d1,-(sp)
   12c48:	|         move.l d0,-(sp)
   12c4a:	|         jsr dae0 <getCombinationFunction>
   12c50:	|         addq.l #8,sp
   12c52:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12c56:	|  ,----- beq.s 12c74 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12c58:	|  |      moveq #28,d0
   12c5a:	|  |      add.l 20(sp),d0
   12c5e:	|  |      move.l 8(sp),-(sp)
   12c62:	|  |      pea 2 <_start+0x2>
   12c66:	|  |      move.l d0,-(sp)
   12c68:	|  |      jsr 1568a <setVariable>
   12c6e:	|  |      lea 12(sp),sp
   12c72:	|  |  ,-- bra.s 12c8c <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12c74:	|  '--|-> moveq #28,d0
   12c76:	|     |   add.l 20(sp),d0
   12c7a:	|     |   clr.l -(sp)
   12c7c:	|     |   pea 1 <_start+0x1>
   12c80:	|     |   move.l d0,-(sp)
   12c82:	|     |   jsr 1568a <setVariable>
   12c88:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12c8c:	|     '-> moveq #2,d0
}
   12c8e:	'-------> lea 12(sp),sp
   12c92:	          rts

00012c94 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12c94:	       lea -24(sp),sp
   12c98:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12c9a:	       movea.l 36(sp),a0
   12c9e:	       move.l 24(a0),d0
   12ca2:	       move.l d0,-(sp)
   12ca4:	       jsr 1536e <getTextFromAnyVar>
   12caa:	       addq.l #4,sp
   12cac:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12cb0:	       moveq #24,d0
   12cb2:	       add.l 36(sp),d0
   12cb6:	       move.l d0,-(sp)
   12cb8:	       jsr 1571c <trimStack>
   12cbe:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12cc0:	       move.l 24(sp),-(sp)
   12cc4:	       jsr 2fe <encodeFilename>
   12cca:	       addq.l #4,sp
   12ccc:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12cd0:	       move.l 24(sp),16(sp)
   12cd6:	       move.l 1d0c6 <SysBase>,d0
   12cdc:	       movea.l d0,a6
   12cde:	       movea.l 16(sp),a1
   12ce2:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12ce6:	       move.l 20(sp),-(sp)
   12cea:	       jsr e898 <failSecurityCheck>
   12cf0:	       addq.l #4,sp
   12cf2:	       tst.w d0
   12cf4:	   ,-- beq.s 12cfa <builtIn_deleteFile+0x66>
   12cf6:	   |   moveq #1,d0
   12cf8:	,--|-- bra.s 12d48 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12cfa:	|  '-> move.l 20(sp),12(sp)
   12d00:	|      move.l 1d0ce <DOSBase>,d0
   12d06:	|      movea.l d0,a6
   12d08:	|      move.l 12(sp),d1
   12d0c:	|      jsr -72(a6)
   12d10:	|      move.l d0,8(sp)
   12d14:	|      move.l 8(sp),d1
   12d18:	|      moveq #28,d0
   12d1a:	|      add.l 36(sp),d0
   12d1e:	|      move.l d1,-(sp)
   12d20:	|      pea 1 <_start+0x1>
   12d24:	|      move.l d0,-(sp)
   12d26:	|      jsr 1568a <setVariable>
   12d2c:	|      lea 12(sp),sp
    FreeVec(nam);
   12d30:	|      move.l 20(sp),4(sp)
   12d36:	|      move.l 1d0c6 <SysBase>,d0
   12d3c:	|      movea.l d0,a6
   12d3e:	|      movea.l 4(sp),a1
   12d42:	|      jsr -690(a6)

    return BR_CONTINUE;
   12d46:	|      moveq #2,d0
}
   12d48:	'----> movea.l (sp)+,a6
   12d4a:	       lea 24(sp),sp
   12d4e:	       rts

00012d50 <builtIn_renameFile>:

builtIn(renameFile)
{
   12d50:	       lea -40(sp),sp
   12d54:	       move.l a6,-(sp)
   12d56:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12d58:	       movea.l 56(sp),a0
   12d5c:	       move.l 24(a0),d0
   12d60:	       move.l d0,-(sp)
   12d62:	       jsr 1536e <getTextFromAnyVar>
   12d68:	       addq.l #4,sp
   12d6a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12d6e:	       move.l 44(sp),-(sp)
   12d72:	       jsr 2fe <encodeFilename>
   12d78:	       addq.l #4,sp
   12d7a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12d7e:	       moveq #24,d0
   12d80:	       add.l 56(sp),d0
   12d84:	       move.l d0,-(sp)
   12d86:	       jsr 1571c <trimStack>
   12d8c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12d8e:	       move.l 40(sp),-(sp)
   12d92:	       jsr e898 <failSecurityCheck>
   12d98:	       addq.l #4,sp
   12d9a:	       tst.w d0
   12d9c:	   ,-- beq.s 12da4 <builtIn_renameFile+0x54>
   12d9e:	   |   moveq #1,d0
   12da0:	,--|-- bra.w 12e8a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12da4:	|  '-> move.l 44(sp),36(sp)
   12daa:	|      move.l 1d0c6 <SysBase>,d0
   12db0:	|      movea.l d0,a6
   12db2:	|      movea.l 36(sp),a1
   12db6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12dba:	|      movea.l 56(sp),a0
   12dbe:	|      move.l 24(a0),d0
   12dc2:	|      move.l d0,-(sp)
   12dc4:	|      jsr 1536e <getTextFromAnyVar>
   12dca:	|      addq.l #4,sp
   12dcc:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12dd0:	|      move.l 44(sp),-(sp)
   12dd4:	|      jsr 2fe <encodeFilename>
   12dda:	|      addq.l #4,sp
   12ddc:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12de0:	|      moveq #24,d0
   12de2:	|      add.l 56(sp),d0
   12de6:	|      move.l d0,-(sp)
   12de8:	|      jsr 1571c <trimStack>
   12dee:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12df0:	|      move.l 32(sp),-(sp)
   12df4:	|      jsr e898 <failSecurityCheck>
   12dfa:	|      addq.l #4,sp
   12dfc:	|      tst.w d0
   12dfe:	|  ,-- beq.s 12e06 <builtIn_renameFile+0xb6>
   12e00:	|  |   moveq #1,d0
   12e02:	+--|-- bra.w 12e8a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12e06:	|  '-> move.l 44(sp),28(sp)
   12e0c:	|      move.l 1d0c6 <SysBase>,d0
   12e12:	|      movea.l d0,a6
   12e14:	|      movea.l 28(sp),a1
   12e18:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12e1c:	|      move.l 32(sp),24(sp)
   12e22:	|      move.l 40(sp),20(sp)
   12e28:	|      move.l 1d0ce <DOSBase>,d0
   12e2e:	|      movea.l d0,a6
   12e30:	|      move.l 24(sp),d1
   12e34:	|      move.l 20(sp),d2
   12e38:	|      jsr -78(a6)
   12e3c:	|      move.l d0,16(sp)
   12e40:	|      move.l 16(sp),d1
   12e44:	|      moveq #28,d0
   12e46:	|      add.l 56(sp),d0
   12e4a:	|      move.l d1,-(sp)
   12e4c:	|      pea 1 <_start+0x1>
   12e50:	|      move.l d0,-(sp)
   12e52:	|      jsr 1568a <setVariable>
   12e58:	|      lea 12(sp),sp
	FreeVec(nam);
   12e5c:	|      move.l 32(sp),12(sp)
   12e62:	|      move.l 1d0c6 <SysBase>,d0
   12e68:	|      movea.l d0,a6
   12e6a:	|      movea.l 12(sp),a1
   12e6e:	|      jsr -690(a6)
	FreeVec(newnam);
   12e72:	|      move.l 40(sp),8(sp)
   12e78:	|      move.l 1d0c6 <SysBase>,d0
   12e7e:	|      movea.l d0,a6
   12e80:	|      movea.l 8(sp),a1
   12e84:	|      jsr -690(a6)

	return BR_CONTINUE;
   12e88:	|      moveq #2,d0
}
   12e8a:	'----> move.l (sp)+,d2
   12e8c:	       movea.l (sp)+,a6
   12e8e:	       lea 40(sp),sp
   12e92:	       rts

00012e94 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12e94:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e96:	       movea.l 12(sp),a0
   12e9a:	       move.l 24(a0),d0
   12e9e:	       move.l d0,-(sp)
   12ea0:	       pea 5 <_start+0x5>
   12ea4:	       move.l sp,d0
   12ea6:	       addq.l #8,d0
   12ea8:	       move.l d0,-(sp)
   12eaa:	       jsr 14d98 <getValueType>
   12eb0:	       lea 12(sp),sp
   12eb4:	       tst.w d0
   12eb6:	   ,-- bne.s 12ebc <builtIn_cacheSound+0x28>
   12eb8:	   |   moveq #1,d0
   12eba:	,--|-- bra.s 12ee4 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12ebc:	|  '-> moveq #24,d0
   12ebe:	|      add.l 12(sp),d0
   12ec2:	|      move.l d0,-(sp)
   12ec4:	|      jsr 1571c <trimStack>
   12eca:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12ecc:	|      move.l (sp),d0
   12ece:	|      move.l d0,-(sp)
   12ed0:	|      jsr d6d6 <cacheSound>
   12ed6:	|      addq.l #4,sp
   12ed8:	|      moveq #-1,d1
   12eda:	|      cmp.l d0,d1
   12edc:	|  ,-- bne.s 12ee2 <builtIn_cacheSound+0x4e>
   12ede:	|  |   moveq #1,d0
   12ee0:	+--|-- bra.s 12ee4 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12ee2:	|  '-> moveq #2,d0
}
   12ee4:	'----> addq.l #4,sp
   12ee6:	       rts

00012ee8 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12ee8:	pea 1a326 <PutChar+0x200c>
   12eee:	jsr 17878 <KPrintF>
   12ef4:	addq.l #4,sp
	return BR_CONTINUE;
   12ef6:	moveq #2,d0
}
   12ef8:	rts

00012efa <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12efa:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12efe:	          movea.l 20(sp),a0
   12f02:	          move.l 24(a0),d0
   12f06:	          move.l d0,-(sp)
   12f08:	          pea 1 <_start+0x1>
   12f0c:	          moveq #12,d0
   12f0e:	          add.l sp,d0
   12f10:	          move.l d0,-(sp)
   12f12:	          jsr 14d98 <getValueType>
   12f18:	          lea 12(sp),sp
   12f1c:	          tst.w d0
   12f1e:	      ,-- bne.s 12f26 <builtIn_setCharacterSpinSpeed+0x2c>
   12f20:	      |   moveq #1,d0
   12f22:	,-----|-- bra.w 12fc0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12f26:	|     '-> moveq #24,d0
   12f28:	|         add.l 20(sp),d0
   12f2c:	|         move.l d0,-(sp)
   12f2e:	|         jsr 1571c <trimStack>
   12f34:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f36:	|         movea.l 20(sp),a0
   12f3a:	|         move.l 24(a0),d0
   12f3e:	|         move.l d0,-(sp)
   12f40:	|         pea 7 <_start+0x7>
   12f44:	|         lea 8(sp),a0
   12f48:	|         move.l a0,-(sp)
   12f4a:	|         jsr 14d98 <getValueType>
   12f50:	|         lea 12(sp),sp
   12f54:	|         tst.w d0
   12f56:	|     ,-- bne.s 12f5c <builtIn_setCharacterSpinSpeed+0x62>
   12f58:	|     |   moveq #1,d0
   12f5a:	+-----|-- bra.s 12fc0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12f5c:	|     '-> moveq #24,d0
   12f5e:	|         add.l 20(sp),d0
   12f62:	|         move.l d0,-(sp)
   12f64:	|         jsr 1571c <trimStack>
   12f6a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12f6c:	|         move.l (sp),d0
   12f6e:	|         move.l d0,-(sp)
   12f70:	|         jsr ab3e <findPerson>
   12f76:	|         addq.l #4,sp
   12f78:	|         move.l d0,8(sp)

	if (thisPerson) {
   12f7c:	|  ,----- beq.s 12fa6 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12f7e:	|  |      move.l 4(sp),d0
   12f82:	|  |      movea.l 8(sp),a0
   12f86:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12f8a:	|  |      moveq #28,d0
   12f8c:	|  |      add.l 20(sp),d0
   12f90:	|  |      pea 1 <_start+0x1>
   12f94:	|  |      pea 1 <_start+0x1>
   12f98:	|  |      move.l d0,-(sp)
   12f9a:	|  |      jsr 1568a <setVariable>
   12fa0:	|  |      lea 12(sp),sp
   12fa4:	|  |  ,-- bra.s 12fbe <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12fa6:	|  '--|-> moveq #28,d0
   12fa8:	|     |   add.l 20(sp),d0
   12fac:	|     |   clr.l -(sp)
   12fae:	|     |   pea 1 <_start+0x1>
   12fb2:	|     |   move.l d0,-(sp)
   12fb4:	|     |   jsr 1568a <setVariable>
   12fba:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12fbe:	|     '-> moveq #2,d0
}
   12fc0:	'-------> lea 12(sp),sp
   12fc4:	          rts

00012fc6 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12fc6:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fca:	          movea.l 20(sp),a0
   12fce:	          move.l 24(a0),d0
   12fd2:	          move.l d0,-(sp)
   12fd4:	          pea 1 <_start+0x1>
   12fd8:	          moveq #12,d0
   12fda:	          add.l sp,d0
   12fdc:	          move.l d0,-(sp)
   12fde:	          jsr 14d98 <getValueType>
   12fe4:	          lea 12(sp),sp
   12fe8:	          tst.w d0
   12fea:	      ,-- bne.s 12ff2 <builtIn_setCharacterAngleOffset+0x2c>
   12fec:	      |   moveq #1,d0
   12fee:	,-----|-- bra.w 1308c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12ff2:	|     '-> moveq #24,d0
   12ff4:	|         add.l 20(sp),d0
   12ff8:	|         move.l d0,-(sp)
   12ffa:	|         jsr 1571c <trimStack>
   13000:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13002:	|         movea.l 20(sp),a0
   13006:	|         move.l 24(a0),d0
   1300a:	|         move.l d0,-(sp)
   1300c:	|         pea 7 <_start+0x7>
   13010:	|         lea 8(sp),a0
   13014:	|         move.l a0,-(sp)
   13016:	|         jsr 14d98 <getValueType>
   1301c:	|         lea 12(sp),sp
   13020:	|         tst.w d0
   13022:	|     ,-- bne.s 13028 <builtIn_setCharacterAngleOffset+0x62>
   13024:	|     |   moveq #1,d0
   13026:	+-----|-- bra.s 1308c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   13028:	|     '-> moveq #24,d0
   1302a:	|         add.l 20(sp),d0
   1302e:	|         move.l d0,-(sp)
   13030:	|         jsr 1571c <trimStack>
   13036:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13038:	|         move.l (sp),d0
   1303a:	|         move.l d0,-(sp)
   1303c:	|         jsr ab3e <findPerson>
   13042:	|         addq.l #4,sp
   13044:	|         move.l d0,8(sp)

	if (thisPerson) {
   13048:	|  ,----- beq.s 13072 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   1304a:	|  |      move.l 4(sp),d0
   1304e:	|  |      movea.l 8(sp),a0
   13052:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13056:	|  |      moveq #28,d0
   13058:	|  |      add.l 20(sp),d0
   1305c:	|  |      pea 1 <_start+0x1>
   13060:	|  |      pea 1 <_start+0x1>
   13064:	|  |      move.l d0,-(sp)
   13066:	|  |      jsr 1568a <setVariable>
   1306c:	|  |      lea 12(sp),sp
   13070:	|  |  ,-- bra.s 1308a <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13072:	|  '--|-> moveq #28,d0
   13074:	|     |   add.l 20(sp),d0
   13078:	|     |   clr.l -(sp)
   1307a:	|     |   pea 1 <_start+0x1>
   1307e:	|     |   move.l d0,-(sp)
   13080:	|     |   jsr 1568a <setVariable>
   13086:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1308a:	|     '-> moveq #2,d0
}
   1308c:	'-------> lea 12(sp),sp
   13090:	          rts

00013092 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13092:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13094:	       movea.l 12(sp),a0
   13098:	       move.l 24(a0),d0
   1309c:	       move.l d0,-(sp)
   1309e:	       pea 1 <_start+0x1>
   130a2:	       move.l sp,d0
   130a4:	       addq.l #8,d0
   130a6:	       move.l d0,-(sp)
   130a8:	       jsr 14d98 <getValueType>
   130ae:	       lea 12(sp),sp
   130b2:	       tst.w d0
   130b4:	   ,-- bne.s 130ba <builtIn_transitionMode+0x28>
   130b6:	   |   moveq #1,d0
   130b8:	,--|-- bra.s 130f0 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   130ba:	|  '-> move.l (sp),d0
   130bc:	|      move.l d0,d0
   130be:	|      move.b d0,1cf94 <fadeMode>
	trimStack (&fun -> stack);
   130c4:	|      moveq #24,d0
   130c6:	|      add.l 12(sp),d0
   130ca:	|      move.l d0,-(sp)
   130cc:	|      jsr 1571c <trimStack>
   130d2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   130d4:	|      moveq #28,d0
   130d6:	|      add.l 12(sp),d0
   130da:	|      pea 1 <_start+0x1>
   130de:	|      pea 1 <_start+0x1>
   130e2:	|      move.l d0,-(sp)
   130e4:	|      jsr 1568a <setVariable>
   130ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   130ee:	|      moveq #2,d0
}
   130f0:	'----> addq.l #4,sp
   130f2:	       rts

000130f4 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   130f4:	moveq #24,d0
   130f6:	add.l 8(sp),d0
   130fa:	move.l d0,-(sp)
   130fc:	jsr 1571c <trimStack>
   13102:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13104:	moveq #28,d0
   13106:	add.l 8(sp),d0
   1310a:	pea 1 <_start+0x1>
   1310e:	pea 1 <_start+0x1>
   13112:	move.l d0,-(sp)
   13114:	jsr 1568a <setVariable>
   1311a:	lea 12(sp),sp
	return BR_CONTINUE;
   1311e:	moveq #2,d0
}
   13120:	rts

00013122 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13122:	pea 1a350 <PutChar+0x2036>
   13128:	jsr 17878 <KPrintF>
   1312e:	addq.l #4,sp
	return BR_CONTINUE;
   13130:	moveq #2,d0
}
   13132:	rts

00013134 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13134:	       lea -16(sp),sp
   13138:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   1313a:	       movea.l 28(sp),a0
   1313e:	       move.l 24(a0),d0
   13142:	       move.l d0,-(sp)
   13144:	       jsr 1536e <getTextFromAnyVar>
   1314a:	       addq.l #4,sp
   1314c:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13150:	   ,-- bne.s 13158 <builtIn_saveCustomData+0x24>
   13152:	   |   moveq #1,d0
   13154:	,--|-- bra.w 1320a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   13158:	|  '-> move.l 16(sp),-(sp)
   1315c:	|      jsr 2fe <encodeFilename>
   13162:	|      addq.l #4,sp
   13164:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13168:	|      move.l 16(sp),8(sp)
   1316e:	|      move.l 1d0c6 <SysBase>,d0
   13174:	|      movea.l d0,a6
   13176:	|      movea.l 8(sp),a1
   1317a:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   1317e:	|      move.l 12(sp),-(sp)
   13182:	|      jsr e898 <failSecurityCheck>
   13188:	|      addq.l #4,sp
   1318a:	|      tst.w d0
   1318c:	|  ,-- beq.s 13192 <builtIn_saveCustomData+0x5e>
   1318e:	|  |   moveq #1,d0
   13190:	+--|-- bra.s 1320a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   13192:	|  '-> moveq #24,d0
   13194:	|      add.l 28(sp),d0
   13198:	|      move.l d0,-(sp)
   1319a:	|      jsr 1571c <trimStack>
   131a0:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   131a2:	|      movea.l 28(sp),a0
   131a6:	|      movea.l 24(a0),a0
   131aa:	|      move.l (a0),d0
   131ac:	|      moveq #6,d1
   131ae:	|      cmp.l d0,d1
   131b0:	|  ,-- beq.s 131c4 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   131b2:	|  |   pea 1a37d <PutChar+0x2063>
   131b8:	|  |   jsr 17878 <KPrintF>
   131be:	|  |   addq.l #4,sp
		return BR_ERROR;
   131c0:	|  |   moveq #1,d0
   131c2:	+--|-- bra.s 1320a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   131c4:	|  '-> movea.l 28(sp),a0
   131c8:	|      move.l 24(a0),d0
   131cc:	|      move.l d0,-(sp)
   131ce:	|      move.l 16(sp),-(sp)
   131d2:	|      jsr e4e8 <stackToFile>
   131d8:	|      addq.l #8,sp
   131da:	|      tst.w d0
   131dc:	|  ,-- bne.s 131e2 <builtIn_saveCustomData+0xae>
   131de:	|  |   moveq #1,d0
   131e0:	+--|-- bra.s 1320a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   131e2:	|  '-> moveq #24,d0
   131e4:	|      add.l 28(sp),d0
   131e8:	|      move.l d0,-(sp)
   131ea:	|      jsr 1571c <trimStack>
   131f0:	|      addq.l #4,sp
	FreeVec(fileName);
   131f2:	|      move.l 12(sp),4(sp)
   131f8:	|      move.l 1d0c6 <SysBase>,d0
   131fe:	|      movea.l d0,a6
   13200:	|      movea.l 4(sp),a1
   13204:	|      jsr -690(a6)
	return BR_CONTINUE;
   13208:	|      moveq #2,d0
}
   1320a:	'----> movea.l (sp)+,a6
   1320c:	       lea 16(sp),sp
   13210:	       rts

00013212 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13212:	       lea -28(sp),sp
   13216:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13218:	       movea.l 40(sp),a0
   1321c:	       move.l 24(a0),d0
   13220:	       move.l d0,-(sp)
   13222:	       jsr 1536e <getTextFromAnyVar>
   13228:	       addq.l #4,sp
   1322a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   1322e:	   ,-- bne.s 13236 <builtIn_loadCustomData+0x24>
   13230:	   |   moveq #1,d0
   13232:	,--|-- bra.w 13332 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   13236:	|  '-> move.l 28(sp),-(sp)
   1323a:	|      jsr 2fe <encodeFilename>
   13240:	|      addq.l #4,sp
   13242:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13246:	|      move.l 28(sp),20(sp)
   1324c:	|      move.l 1d0c6 <SysBase>,d0
   13252:	|      movea.l d0,a6
   13254:	|      movea.l 20(sp),a1
   13258:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   1325c:	|      move.l 24(sp),-(sp)
   13260:	|      jsr e898 <failSecurityCheck>
   13266:	|      addq.l #4,sp
   13268:	|      tst.w d0
   1326a:	|  ,-- beq.s 13272 <builtIn_loadCustomData+0x60>
   1326c:	|  |   moveq #1,d0
   1326e:	+--|-- bra.w 13332 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   13272:	|  '-> moveq #24,d0
   13274:	|      add.l 40(sp),d0
   13278:	|      move.l d0,-(sp)
   1327a:	|      jsr 1571c <trimStack>
   13280:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13282:	|      moveq #28,d0
   13284:	|      add.l 40(sp),d0
   13288:	|      move.l d0,-(sp)
   1328a:	|      jsr 14fe6 <unlinkVar>
   13290:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13292:	|      movea.l 40(sp),a0
   13296:	|      moveq #6,d0
   13298:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1329c:	|      moveq #12,d0
   1329e:	|      move.l d0,16(sp)
   132a2:	|      clr.l 12(sp)
   132a6:	|      move.l 1d0c6 <SysBase>,d0
   132ac:	|      movea.l d0,a6
   132ae:	|      move.l 16(sp),d0
   132b2:	|      move.l 12(sp),d1
   132b6:	|      jsr -684(a6)
   132ba:	|      move.l d0,8(sp)
   132be:	|      move.l 8(sp),d0
   132c2:	|      movea.l 40(sp),a0
   132c6:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   132ca:	|      movea.l 40(sp),a0
   132ce:	|      move.l 32(a0),d0
   132d2:	|  ,-- bne.s 132d8 <builtIn_loadCustomData+0xc6>
   132d4:	|  |   moveq #1,d0
   132d6:	+--|-- bra.s 13332 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   132d8:	|  '-> movea.l 40(sp),a0
   132dc:	|      movea.l 32(a0),a0
   132e0:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   132e2:	|      movea.l 40(sp),a0
   132e6:	|      movea.l 32(a0),a0
   132ea:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   132ee:	|      movea.l 40(sp),a0
   132f2:	|      movea.l 32(a0),a0
   132f6:	|      moveq #1,d0
   132f8:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   132fc:	|      movea.l 40(sp),a0
   13300:	|      move.l 32(a0),d0
   13304:	|      move.l d0,-(sp)
   13306:	|      move.l 28(sp),-(sp)
   1330a:	|      jsr df22 <fileToStack>
   13310:	|      addq.l #8,sp
   13312:	|      tst.w d0
   13314:	|  ,-- bne.s 1331a <builtIn_loadCustomData+0x108>
   13316:	|  |   moveq #1,d0
   13318:	+--|-- bra.s 13332 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   1331a:	|  '-> move.l 24(sp),4(sp)
   13320:	|      move.l 1d0c6 <SysBase>,d0
   13326:	|      movea.l d0,a6
   13328:	|      movea.l 4(sp),a1
   1332c:	|      jsr -690(a6)
	return BR_CONTINUE;
   13330:	|      moveq #2,d0
}
   13332:	'----> movea.l (sp)+,a6
   13334:	       lea 28(sp),sp
   13338:	       rts

0001333a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   1333a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1333c:	       movea.l 12(sp),a0
   13340:	       move.l 24(a0),d0
   13344:	       move.l d0,-(sp)
   13346:	       pea 1 <_start+0x1>
   1334a:	       move.l sp,d0
   1334c:	       addq.l #8,d0
   1334e:	       move.l d0,-(sp)
   13350:	       jsr 14d98 <getValueType>
   13356:	       lea 12(sp),sp
   1335a:	       tst.w d0
   1335c:	   ,-- bne.s 13362 <builtIn_setCustomEncoding+0x28>
   1335e:	   |   moveq #1,d0
   13360:	,--|-- bra.s 13398 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   13362:	|  '-> move.l (sp),d0
   13364:	|      move.l d0,d0
   13366:	|      move.w d0,1d17a <saveEncoding>
	trimStack (&fun -> stack);
   1336c:	|      moveq #24,d0
   1336e:	|      add.l 12(sp),d0
   13372:	|      move.l d0,-(sp)
   13374:	|      jsr 1571c <trimStack>
   1337a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1337c:	|      moveq #28,d0
   1337e:	|      add.l 12(sp),d0
   13382:	|      pea 1 <_start+0x1>
   13386:	|      pea 1 <_start+0x1>
   1338a:	|      move.l d0,-(sp)
   1338c:	|      jsr 1568a <setVariable>
   13392:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13396:	|      moveq #2,d0
}
   13398:	'----> addq.l #4,sp
   1339a:	       rts

0001339c <builtIn_freeSound>:

builtIn(freeSound)
{
   1339c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1339e:	       movea.l 12(sp),a0
   133a2:	       move.l 24(a0),d0
   133a6:	       move.l d0,-(sp)
   133a8:	       pea 5 <_start+0x5>
   133ac:	       move.l sp,d0
   133ae:	       addq.l #8,d0
   133b0:	       move.l d0,-(sp)
   133b2:	       jsr 14d98 <getValueType>
   133b8:	       lea 12(sp),sp
   133bc:	       tst.w d0
   133be:	   ,-- bne.s 133c4 <builtIn_freeSound+0x28>
   133c0:	   |   moveq #1,d0
   133c2:	,--|-- bra.s 133e2 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   133c4:	|  '-> moveq #24,d0
   133c6:	|      add.l 12(sp),d0
   133ca:	|      move.l d0,-(sp)
   133cc:	|      jsr 1571c <trimStack>
   133d2:	|      addq.l #4,sp
	huntKillFreeSound (v);
   133d4:	|      move.l (sp),d0
   133d6:	|      move.l d0,-(sp)
   133d8:	|      jsr d6da <huntKillFreeSound>
   133de:	|      addq.l #4,sp
	return BR_CONTINUE;
   133e0:	|      moveq #2,d0
}
   133e2:	'----> addq.l #4,sp
   133e4:	       rts

000133e6 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   133e6:	       lea -12(sp),sp
   133ea:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133ec:	       movea.l 24(sp),a0
   133f0:	       move.l 24(a0),d0
   133f4:	       move.l d0,-(sp)
   133f6:	       pea 1 <_start+0x1>
   133fa:	       moveq #16,d0
   133fc:	       add.l sp,d0
   133fe:	       move.l d0,-(sp)
   13400:	       jsr 14d98 <getValueType>
   13406:	       lea 12(sp),sp
   1340a:	       tst.w d0
   1340c:	   ,-- bne.s 13414 <builtIn_parallaxAdd+0x2e>
   1340e:	   |   moveq #1,d0
   13410:	,--|-- bra.w 134e8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13414:	|  '-> moveq #24,d0
   13416:	|      add.l 24(sp),d0
   1341a:	|      move.l d0,-(sp)
   1341c:	|      jsr 1571c <trimStack>
   13422:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13424:	|      movea.l 24(sp),a0
   13428:	|      move.l 24(a0),d0
   1342c:	|      move.l d0,-(sp)
   1342e:	|      pea 1 <_start+0x1>
   13432:	|      moveq #20,d0
   13434:	|      add.l sp,d0
   13436:	|      move.l d0,-(sp)
   13438:	|      jsr 14d98 <getValueType>
   1343e:	|      lea 12(sp),sp
   13442:	|      tst.w d0
   13444:	|  ,-- bne.s 1344c <builtIn_parallaxAdd+0x66>
   13446:	|  |   moveq #1,d0
   13448:	+--|-- bra.w 134e8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1344c:	|  '-> moveq #24,d0
   1344e:	|      add.l 24(sp),d0
   13452:	|      move.l d0,-(sp)
   13454:	|      jsr 1571c <trimStack>
   1345a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1345c:	|      movea.l 24(sp),a0
   13460:	|      move.l 24(a0),d0
   13464:	|      move.l d0,-(sp)
   13466:	|      pea 5 <_start+0x5>
   1346a:	|      lea 12(sp),a0
   1346e:	|      move.l a0,-(sp)
   13470:	|      jsr 14d98 <getValueType>
   13476:	|      lea 12(sp),sp
   1347a:	|      tst.w d0
   1347c:	|  ,-- bne.s 13482 <builtIn_parallaxAdd+0x9c>
   1347e:	|  |   moveq #1,d0
   13480:	+--|-- bra.s 134e8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13482:	|  '-> moveq #24,d0
   13484:	|      add.l 24(sp),d0
   13488:	|      move.l d0,-(sp)
   1348a:	|      jsr 1571c <trimStack>
   13490:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   13492:	|      move.l 8(sp),d0
   13496:	|      move.l d0,d0
   13498:	|      moveq #0,d2
   1349a:	|      move.w d0,d2
   1349c:	|      move.l 12(sp),d0
   134a0:	|      move.l d0,d0
   134a2:	|      moveq #0,d1
   134a4:	|      move.w d0,d1
   134a6:	|      move.l 4(sp),d0
   134aa:	|      move.l d0,d0
   134ac:	|      move.w d0,d0
   134ae:	|      andi.l #65535,d0
   134b4:	|      move.l d2,-(sp)
   134b6:	|      move.l d1,-(sp)
   134b8:	|      move.l d0,-(sp)
   134ba:	|      jsr d900 <loadParallax>
   134c0:	|      lea 12(sp),sp
   134c4:	|      tst.w d0
   134c6:	|  ,-- bne.s 134cc <builtIn_parallaxAdd+0xe6>
   134c8:	|  |   moveq #1,d0
   134ca:	+--|-- bra.s 134e8 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   134cc:	|  '-> moveq #28,d0
   134ce:	|      add.l 24(sp),d0
   134d2:	|      pea 1 <_start+0x1>
   134d6:	|      pea 1 <_start+0x1>
   134da:	|      move.l d0,-(sp)
   134dc:	|      jsr 1568a <setVariable>
   134e2:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   134e6:	|      moveq #2,d0
}
   134e8:	'----> move.l (sp)+,d2
   134ea:	       lea 12(sp),sp
   134ee:	       rts

000134f0 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   134f0:	jsr d838 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   134f6:	moveq #28,d0
   134f8:	add.l 8(sp),d0
   134fc:	pea 1 <_start+0x1>
   13500:	pea 1 <_start+0x1>
   13504:	move.l d0,-(sp)
   13506:	jsr 1568a <setVariable>
   1350c:	lea 12(sp),sp
	return BR_CONTINUE;
   13510:	moveq #2,d0
}
   13512:	rts

00013514 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13514:	pea 1a39b <PutChar+0x2081>
   1351a:	jsr 17878 <KPrintF>
   13520:	addq.l #4,sp

	return BR_CONTINUE;
   13522:	moveq #2,d0
}
   13524:	rts

00013526 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13526:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   13528:	             movea.l 16(sp),a0
   1352c:	             movea.l 24(a0),a0
   13530:	             move.l (a0),d0
   13532:	             moveq #1,d1
   13534:	             cmp.l d0,d1
   13536:	      ,----- beq.s 1357e <builtIn_makeFastArray+0x58>
   13538:	      |      moveq #6,d1
   1353a:	      |      cmp.l d0,d1
   1353c:	,-----|----- bne.s 135bc <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1353e:	|     |      movea.l 16(sp),a0
   13542:	|     |      movea.l 24(a0),a0
   13546:	|     |      move.l 4(a0),d1
   1354a:	|     |      moveq #28,d0
   1354c:	|     |      add.l 16(sp),d0
   13550:	|     |      move.l d1,-(sp)
   13552:	|     |      move.l d0,-(sp)
   13554:	|     |      jsr 14e4a <makeFastArrayFromStack>
   1355a:	|     |      addq.l #8,sp
   1355c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13560:	|     |      moveq #24,d0
   13562:	|     |      add.l 16(sp),d0
   13566:	|     |      move.l d0,-(sp)
   13568:	|     |      jsr 1571c <trimStack>
   1356e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   13570:	|     |      tst.w 6(sp)
   13574:	|     |  ,-- beq.s 1357a <builtIn_makeFastArray+0x54>
   13576:	|     |  |   moveq #2,d0
   13578:	|  ,--|--|-- bra.s 135ce <builtIn_makeFastArray+0xa8>
   1357a:	|  |  |  '-> moveq #1,d0
   1357c:	|  +--|----- bra.s 135ce <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1357e:	|  |  '----> movea.l 16(sp),a0
   13582:	|  |         movea.l 24(a0),a0
   13586:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1358c:	|  |         moveq #24,d0
   1358e:	|  |         add.l 16(sp),d0
   13592:	|  |         move.l d0,-(sp)
   13594:	|  |         jsr 1571c <trimStack>
   1359a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1359c:	|  |         moveq #28,d0
   1359e:	|  |         add.l 16(sp),d0
   135a2:	|  |         move.l 2(sp),-(sp)
   135a6:	|  |         move.l d0,-(sp)
   135a8:	|  |         jsr 14eb4 <makeFastArraySize>
   135ae:	|  |         addq.l #8,sp
   135b0:	|  |         tst.w d0
   135b2:	|  |     ,-- beq.s 135b8 <builtIn_makeFastArray+0x92>
   135b4:	|  |     |   moveq #2,d0
   135b6:	|  +-----|-- bra.s 135ce <builtIn_makeFastArray+0xa8>
   135b8:	|  |     '-> moveq #1,d0
   135ba:	|  +-------- bra.s 135ce <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   135bc:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   135be:	   |         pea 1a3c4 <PutChar+0x20aa>
   135c4:	   |         jsr 17878 <KPrintF>
   135ca:	   |         addq.l #4,sp
	return BR_ERROR;
   135cc:	   |         moveq #1,d0
}
   135ce:	   '-------> addq.l #8,sp
   135d0:	             rts

000135d2 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   135d2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   135d4:	          movea.l 16(sp),a0
   135d8:	          move.l 24(a0),d0
   135dc:	          move.l d0,-(sp)
   135de:	          pea 7 <_start+0x7>
   135e2:	          move.l sp,d0
   135e4:	          addq.l #8,d0
   135e6:	          move.l d0,-(sp)
   135e8:	          jsr 14d98 <getValueType>
   135ee:	          lea 12(sp),sp
   135f2:	          tst.w d0
   135f4:	      ,-- bne.s 135fa <builtIn_getCharacterScale+0x28>
   135f6:	      |   moveq #1,d0
   135f8:	,-----|-- bra.s 13674 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   135fa:	|     '-> moveq #24,d0
   135fc:	|         add.l 16(sp),d0
   13600:	|         move.l d0,-(sp)
   13602:	|         jsr 1571c <trimStack>
   13608:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1360a:	|         move.l (sp),d0
   1360c:	|         move.l d0,-(sp)
   1360e:	|         jsr ab3e <findPerson>
   13614:	|         addq.l #4,sp
   13616:	|         move.l d0,4(sp)
	if (pers) {
   1361a:	|  ,----- beq.s 1365a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1361c:	|  |      movea.l 4(sp),a0
   13620:	|  |      move.l 32(a0),d0
   13624:	|  |      move.l #1120403456,-(sp)
   1362a:	|  |      move.l d0,-(sp)
   1362c:	|  |      jsr 17d5c <__mulsf3>
   13632:	|  |      addq.l #8,sp
   13634:	|  |      move.l d0,-(sp)
   13636:	|  |      jsr 17c42 <__fixsfsi>
   1363c:	|  |      addq.l #4,sp
   1363e:	|  |      move.l d0,d1
   13640:	|  |      moveq #28,d0
   13642:	|  |      add.l 16(sp),d0
   13646:	|  |      move.l d1,-(sp)
   13648:	|  |      pea 1 <_start+0x1>
   1364c:	|  |      move.l d0,-(sp)
   1364e:	|  |      jsr 1568a <setVariable>
   13654:	|  |      lea 12(sp),sp
   13658:	|  |  ,-- bra.s 13672 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1365a:	|  '--|-> moveq #28,d0
   1365c:	|     |   add.l 16(sp),d0
   13660:	|     |   clr.l -(sp)
   13662:	|     |   pea 1 <_start+0x1>
   13666:	|     |   move.l d0,-(sp)
   13668:	|     |   jsr 1568a <setVariable>
   1366e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13672:	|     '-> moveq #2,d0
}
   13674:	'-------> addq.l #8,sp
   13676:	          rts

00013678 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13678:	move.l 1d19e <gameSettings>,d0
   1367e:	move.l d0,d1
   13680:	moveq #28,d0
   13682:	add.l 8(sp),d0
   13686:	move.l d1,-(sp)
   13688:	pea 1 <_start+0x1>
   1368c:	move.l d0,-(sp)
   1368e:	jsr 1568a <setVariable>
   13694:	lea 12(sp),sp
	return BR_CONTINUE;
   13698:	moveq #2,d0
}
   1369a:	rts

0001369c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1369c:	moveq #24,d0
   1369e:	add.l 8(sp),d0
   136a2:	move.l d0,-(sp)
   136a4:	jsr 1571c <trimStack>
   136aa:	addq.l #4,sp
	trimStack (&fun -> stack);
   136ac:	moveq #24,d0
   136ae:	add.l 8(sp),d0
   136b2:	move.l d0,-(sp)
   136b4:	jsr 1571c <trimStack>
   136ba:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   136bc:	moveq #28,d0
   136be:	add.l 8(sp),d0
   136c2:	clr.l -(sp)
   136c4:	pea 1 <_start+0x1>
   136c8:	move.l d0,-(sp)
   136ca:	jsr 1568a <setVariable>
   136d0:	lea 12(sp),sp

	return BR_CONTINUE;
   136d4:	moveq #2,d0

}
   136d6:	rts

000136d8 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   136d8:	move.l 1ca3e <lastFramesPerSecond>,d1
   136de:	moveq #28,d0
   136e0:	add.l 8(sp),d0
   136e4:	move.l d1,-(sp)
   136e6:	pea 1 <_start+0x1>
   136ea:	move.l d0,-(sp)
   136ec:	jsr 1568a <setVariable>
   136f2:	lea 12(sp),sp
	return BR_CONTINUE;
   136f6:	moveq #2,d0
}
   136f8:	rts

000136fa <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   136fa:	moveq #2,d0
}
   136fc:	rts

000136fe <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   136fe:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13702:	          movea.l 60(sp),a0
   13706:	          move.l 24(a0),d0
   1370a:	          move.l d0,-(sp)
   1370c:	          pea 1 <_start+0x1>
   13710:	          pea 1cfd0 <thumbHeight>
   13716:	          jsr 14d98 <getValueType>
   1371c:	          lea 12(sp),sp
   13720:	          tst.w d0
   13722:	      ,-- bne.s 1372a <builtIn_setThumbnailSize+0x2c>
   13724:	      |   moveq #1,d0
   13726:	,-----|-- bra.w 137e6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1372a:	|     '-> moveq #24,d0
   1372c:	|         add.l 60(sp),d0
   13730:	|         move.l d0,-(sp)
   13732:	|         jsr 1571c <trimStack>
   13738:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1373a:	|         movea.l 60(sp),a0
   1373e:	|         move.l 24(a0),d0
   13742:	|         move.l d0,-(sp)
   13744:	|         pea 1 <_start+0x1>
   13748:	|         pea 1cfcc <thumbWidth>
   1374e:	|         jsr 14d98 <getValueType>
   13754:	|         lea 12(sp),sp
   13758:	|         tst.w d0
   1375a:	|     ,-- bne.s 13762 <builtIn_setThumbnailSize+0x64>
   1375c:	|     |   moveq #1,d0
   1375e:	+-----|-- bra.w 137e6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13762:	|     '-> moveq #24,d0
   13764:	|         add.l 60(sp),d0
   13768:	|         move.l d0,-(sp)
   1376a:	|         jsr 1571c <trimStack>
   13770:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13772:	|         move.l 1cfcc <thumbWidth>,d0
   13778:	|     ,-- bmi.s 137a6 <builtIn_setThumbnailSize+0xa8>
   1377a:	|     |   move.l 1cfd0 <thumbHeight>,d0
   13780:	|     +-- bmi.s 137a6 <builtIn_setThumbnailSize+0xa8>
   13782:	|     |   move.l 1cfcc <thumbWidth>,d0
   13788:	|     |   move.l d0,d1
   1378a:	|     |   move.l 1d01a <winWidth>,d0
   13790:	|     |   cmp.l d1,d0
   13792:	|     +-- bcs.s 137a6 <builtIn_setThumbnailSize+0xa8>
   13794:	|     |   move.l 1cfd0 <thumbHeight>,d0
   1379a:	|     |   move.l d0,d1
   1379c:	|     |   move.l 1d01e <winHeight>,d0
   137a2:	|     |   cmp.l d1,d0
   137a4:	|  ,--|-- bcc.s 137e4 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   137a6:	|  |  '-> move.l 1cfd0 <thumbHeight>,d1
   137ac:	|  |      move.l 1cfcc <thumbWidth>,d0
   137b2:	|  |      move.l d1,-(sp)
   137b4:	|  |      move.l d0,-(sp)
   137b6:	|  |      pea 1a3eb <PutChar+0x20d1>
   137bc:	|  |      lea 14(sp),a0
   137c0:	|  |      move.l a0,-(sp)
   137c2:	|  |      jsr 145a2 <sprintf>
   137c8:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   137cc:	|  |      lea 2(sp),a0
   137d0:	|  |      move.l a0,-(sp)
   137d2:	|  |      pea 1a3f3 <PutChar+0x20d9>
   137d8:	|  |      jsr 17878 <KPrintF>
   137de:	|  |      addq.l #8,sp
		return BR_ERROR;
   137e0:	|  |      moveq #1,d0
   137e2:	+--|----- bra.s 137e6 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   137e4:	|  '----> moveq #2,d0
}
   137e6:	'-------> lea 52(sp),sp
   137ea:	          rts

000137ec <builtIn_hasFlag>:

builtIn(hasFlag)
{
   137ec:	       lea -12(sp),sp
   137f0:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   137f2:	       movea.l 24(sp),a0
   137f6:	       move.l 24(a0),d0
   137fa:	       move.l d0,-(sp)
   137fc:	       pea 1 <_start+0x1>
   13800:	       lea 12(sp),a0
   13804:	       move.l a0,-(sp)
   13806:	       jsr 14d98 <getValueType>
   1380c:	       lea 12(sp),sp
   13810:	       tst.w d0
   13812:	   ,-- bne.s 1381a <builtIn_hasFlag+0x2e>
   13814:	   |   moveq #1,d0
   13816:	,--|-- bra.w 138aa <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1381a:	|  '-> moveq #24,d0
   1381c:	|      add.l 24(sp),d0
   13820:	|      move.l d0,-(sp)
   13822:	|      jsr 1571c <trimStack>
   13828:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1382a:	|      movea.l 24(sp),a0
   1382e:	|      move.l 24(a0),d0
   13832:	|      move.l d0,-(sp)
   13834:	|      pea 7 <_start+0x7>
   13838:	|      moveq #16,d0
   1383a:	|      add.l sp,d0
   1383c:	|      move.l d0,-(sp)
   1383e:	|      jsr 14d98 <getValueType>
   13844:	|      lea 12(sp),sp
   13848:	|      tst.w d0
   1384a:	|  ,-- bne.s 13850 <builtIn_hasFlag+0x64>
   1384c:	|  |   moveq #1,d0
   1384e:	+--|-- bra.s 138aa <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13850:	|  '-> moveq #24,d0
   13852:	|      add.l 24(sp),d0
   13856:	|      move.l d0,-(sp)
   13858:	|      jsr 1571c <trimStack>
   1385e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13860:	|      move.l 8(sp),d0
   13864:	|      move.l d0,-(sp)
   13866:	|      jsr daac <findObjectType>
   1386c:	|      addq.l #4,sp
   1386e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13872:	|  ,-- bne.s 13878 <builtIn_hasFlag+0x8c>
   13874:	|  |   moveq #1,d0
   13876:	+--|-- bra.s 138aa <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13878:	|  '-> movea.l 12(sp),a0
   1387c:	|      move.w 36(a0),d0
   13880:	|      moveq #0,d2
   13882:	|      move.w d0,d2
   13884:	|      move.l 4(sp),d1
   13888:	|      moveq #1,d0
   1388a:	|      lsl.l d1,d0
   1388c:	|      move.l d2,d1
   1388e:	|      and.l d0,d1
   13890:	|      moveq #28,d0
   13892:	|      add.l 24(sp),d0
   13896:	|      move.l d1,-(sp)
   13898:	|      pea 1 <_start+0x1>
   1389c:	|      move.l d0,-(sp)
   1389e:	|      jsr 1568a <setVariable>
   138a4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   138a8:	|      moveq #2,d0
}
   138aa:	'----> move.l (sp)+,d2
   138ac:	       lea 12(sp),sp
   138b0:	       rts

000138b2 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   138b2:	       jsr da9a <snapshot>
   138b8:	       tst.w d0
   138ba:	,----- beq.s 138c0 <builtIn_snapshotGrab+0xe>
   138bc:	|      moveq #2,d0
   138be:	|  ,-- bra.s 138c2 <builtIn_snapshotGrab+0x10>
   138c0:	'--|-> moveq #1,d0
}
   138c2:	   '-> rts

000138c4 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   138c4:	jsr d946 <nosnapshot>
	return BR_CONTINUE;
   138ca:	moveq #2,d0
}
   138cc:	rts

000138ce <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   138ce:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   138d0:	move.w 1c916 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   138d8:	movea.l 12(sp),a0
   138dc:	move.l 24(a0),d0
   138e0:	move.l d0,-(sp)
   138e2:	jsr 152d8 <getBoolean>
   138e8:	addq.l #4,sp
   138ea:	move.w d0,1c916 <allowAnyFilename>
	trimStack (&fun -> stack);
   138f0:	moveq #24,d0
   138f2:	add.l 12(sp),d0
   138f6:	move.l d0,-(sp)
   138f8:	jsr 1571c <trimStack>
   138fe:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13900:	movea.w 2(sp),a0
   13904:	moveq #28,d0
   13906:	add.l 12(sp),d0
   1390a:	move.l a0,-(sp)
   1390c:	pea 1 <_start+0x1>
   13910:	move.l d0,-(sp)
   13912:	jsr 1568a <setVariable>
   13918:	lea 12(sp),sp
	return BR_CONTINUE;
   1391c:	moveq #2,d0
}
   1391e:	addq.l #4,sp
   13920:	rts

00013922 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13922:	moveq #24,d0
   13924:	add.l 8(sp),d0
   13928:	move.l d0,-(sp)
   1392a:	jsr 1571c <trimStack>
   13930:	addq.l #4,sp
	trimStack (&fun -> stack);
   13932:	moveq #24,d0
   13934:	add.l 8(sp),d0
   13938:	move.l d0,-(sp)
   1393a:	jsr 1571c <trimStack>
   13940:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13942:	moveq #28,d0
   13944:	add.l 8(sp),d0
   13948:	clr.l -(sp)
   1394a:	pea 1 <_start+0x1>
   1394e:	move.l d0,-(sp)
   13950:	jsr 1568a <setVariable>
   13956:	lea 12(sp),sp

	return BR_CONTINUE;
   1395a:	moveq #2,d0
}
   1395c:	rts

0001395e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1395e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13960:	movea.l 12(sp),a0
   13964:	move.l 24(a0),d0
   13968:	move.l d0,-(sp)
   1396a:	jsr 1536e <getTextFromAnyVar>
   13970:	addq.l #4,sp
   13972:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13974:	moveq #24,d0
   13976:	add.l 12(sp),d0
   1397a:	move.l d0,-(sp)
   1397c:	jsr 1571c <trimStack>
   13982:	addq.l #4,sp
	KPrintF (mess);
   13984:	move.l (sp),-(sp)
   13986:	jsr 17878 <KPrintF>
   1398c:	addq.l #4,sp
	return BR_ERROR;
   1398e:	moveq #1,d0
}
   13990:	addq.l #4,sp
   13992:	rts

00013994 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13994:	moveq #24,d0
   13996:	add.l 8(sp),d0
   1399a:	move.l d0,-(sp)
   1399c:	jsr 1571c <trimStack>
   139a2:	addq.l #4,sp
	trimStack (&fun -> stack);
   139a4:	moveq #24,d0
   139a6:	add.l 8(sp),d0
   139aa:	move.l d0,-(sp)
   139ac:	jsr 1571c <trimStack>
   139b2:	addq.l #4,sp
	trimStack (&fun -> stack);
   139b4:	moveq #24,d0
   139b6:	add.l 8(sp),d0
   139ba:	move.l d0,-(sp)
   139bc:	jsr 1571c <trimStack>
   139c2:	addq.l #4,sp
	trimStack (&fun -> stack);
   139c4:	moveq #24,d0
   139c6:	add.l 8(sp),d0
   139ca:	move.l d0,-(sp)
   139cc:	jsr 1571c <trimStack>
   139d2:	addq.l #4,sp

	return BR_CONTINUE;
   139d4:	moveq #2,d0
}
   139d6:	rts

000139d8 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   139d8:	moveq #24,d0
   139da:	add.l 8(sp),d0
   139de:	move.l d0,-(sp)
   139e0:	jsr 1571c <trimStack>
   139e6:	addq.l #4,sp
	trimStack (&fun -> stack);
   139e8:	moveq #24,d0
   139ea:	add.l 8(sp),d0
   139ee:	move.l d0,-(sp)
   139f0:	jsr 1571c <trimStack>
   139f6:	addq.l #4,sp
	trimStack (&fun -> stack);
   139f8:	moveq #24,d0
   139fa:	add.l 8(sp),d0
   139fe:	move.l d0,-(sp)
   13a00:	jsr 1571c <trimStack>
   13a06:	addq.l #4,sp

	return BR_CONTINUE;
   13a08:	moveq #2,d0

}
   13a0a:	rts

00013a0c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13a0c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13a0e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13a14:	sne d0
   13a16:	neg.b d0
   13a18:	moveq #0,d1
   13a1a:	move.b d0,d1
   13a1c:	moveq #28,d0
   13a1e:	add.l 12(sp),d0
   13a22:	move.l d1,-(sp)
   13a24:	pea 1 <_start+0x1>
   13a28:	move.l d0,-(sp)
   13a2a:	jsr 1568a <setVariable>
   13a30:	lea 12(sp),sp
	return BR_CONTINUE;
   13a34:	moveq #2,d0
}
   13a36:	addq.l #4,sp
   13a38:	rts

00013a3a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13a3a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13a3c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13a42:	pea 1a40a <PutChar+0x20f0>
   13a48:	jsr 17878 <KPrintF>
   13a4e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13a50:	tst.w 2(sp)
   13a54:	sne d0
   13a56:	neg.b d0
   13a58:	moveq #0,d1
   13a5a:	move.b d0,d1
   13a5c:	moveq #28,d0
   13a5e:	add.l 12(sp),d0
   13a62:	move.l d1,-(sp)
   13a64:	pea 1 <_start+0x1>
   13a68:	move.l d0,-(sp)
   13a6a:	jsr 1568a <setVariable>
   13a70:	lea 12(sp),sp
	return BR_CONTINUE;
   13a74:	moveq #2,d0
}
   13a76:	addq.l #4,sp
   13a78:	rts

00013a7a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13a7a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13a7e:	             move.l 104(sp),d0
   13a82:	             cmpi.l #166,d0
   13a88:	,----------- bhi.w 13b6a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13a8c:	|            move.l 104(sp),d0
   13a90:	|            add.l d0,d0
   13a92:	|            movea.l d0,a1
   13a94:	|            adda.l d0,a1
   13a96:	|            lea 1ca5c <paramNum>,a0
   13a9c:	|            move.l (0,a1,a0.l),d0
   13aa0:	|            moveq #-1,d1
   13aa2:	|            cmp.l d0,d1
   13aa4:	|  ,-------- beq.w 13b32 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13aa8:	|  |         move.l 104(sp),d0
   13aac:	|  |         add.l d0,d0
   13aae:	|  |         movea.l d0,a1
   13ab0:	|  |         adda.l d0,a1
   13ab2:	|  |         lea 1ca5c <paramNum>,a0
   13ab8:	|  |         move.l (0,a1,a0.l),d0
   13abc:	|  |         cmp.l 108(sp),d0
   13ac0:	|  +-------- beq.s 13b32 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13ac2:	|  |         move.l 104(sp),d0
   13ac6:	|  |         add.l d0,d0
   13ac8:	|  |         movea.l d0,a1
   13aca:	|  |         adda.l d0,a1
   13acc:	|  |         lea 1ca5c <paramNum>,a0
   13ad2:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13ad6:	|  |         moveq #1,d1
   13ad8:	|  |         cmp.l d0,d1
   13ada:	|  |  ,----- bne.s 13ae4 <callBuiltIn+0x6a>
   13adc:	|  |  |      move.l #102542,d0
   13ae2:	|  |  |  ,-- bra.s 13aea <callBuiltIn+0x70>
   13ae4:	|  |  '--|-> move.l #107584,d0
   13aea:	|  |     '-> move.l 104(sp),d1
   13aee:	|  |         add.l d1,d1
   13af0:	|  |         movea.l d1,a1
   13af2:	|  |         adda.l d1,a1
   13af4:	|  |         lea 1ca5c <paramNum>,a0
   13afa:	|  |         move.l (0,a1,a0.l),d1
   13afe:	|  |         move.l d0,-(sp)
   13b00:	|  |         move.l d1,-(sp)
   13b02:	|  |         pea 1a442 <PutChar+0x2128>
   13b08:	|  |         lea 12(sp),a0
   13b0c:	|  |         move.l a0,-(sp)
   13b0e:	|  |         jsr 145a2 <sprintf>
   13b14:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13b18:	|  |         movea.l sp,a0
   13b1a:	|  |         move.l a0,-(sp)
   13b1c:	|  |         jsr b8 <copyString>
   13b22:	|  |         addq.l #4,sp
   13b24:	|  |         move.l d0,-(sp)
   13b26:	|  |         jsr 17878 <KPrintF>
   13b2c:	|  |         addq.l #4,sp
				return BR_ERROR;
   13b2e:	|  |         moveq #1,d0
   13b30:	|  |     ,-- bra.s 13b7a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13b32:	|  '-----|-> move.l 104(sp),d0
   13b36:	|        |   add.l d0,d0
   13b38:	|        |   movea.l d0,a1
   13b3a:	|        |   adda.l d0,a1
   13b3c:	|        |   lea 1ccf8 <builtInFunctionArray>,a0
   13b42:	|        |   move.l (0,a1,a0.l),d0
   13b46:	+--------|-- beq.s 13b6a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13b48:	|        |   move.l 104(sp),d0
   13b4c:	|        |   add.l d0,d0
   13b4e:	|        |   movea.l d0,a1
   13b50:	|        |   adda.l d0,a1
   13b52:	|        |   lea 1ccf8 <builtInFunctionArray>,a0
   13b58:	|        |   movea.l (0,a1,a0.l),a0
   13b5c:	|        |   move.l 112(sp),-(sp)
   13b60:	|        |   move.l 112(sp),-(sp)
   13b64:	|        |   jsr (a0)
   13b66:	|        |   addq.l #8,sp
   13b68:	|        +-- bra.s 13b7a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13b6a:	'--------|-> pea 1a46d <PutChar+0x2153>
   13b70:	         |   jsr 17878 <KPrintF>
   13b76:	         |   addq.l #4,sp
	return BR_ERROR;
   13b78:	         |   moveq #1,d0
}
   13b7a:	         '-> lea 100(sp),sp
   13b7e:	             rts

00013b80 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13b80:	          subq.l #8,sp
	int indexNum = -1;
   13b82:	          moveq #-1,d0
   13b84:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13b88:	          clr.l (sp)
   13b8a:	   ,----- bra.s 13bb0 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13b8c:	,--|----> move.l 1d196 <languageTable>,d1
   13b92:	|  |      move.l (sp),d0
   13b94:	|  |      add.l d0,d0
   13b96:	|  |      add.l d0,d0
   13b98:	|  |      movea.l d1,a0
   13b9a:	|  |      adda.l d0,a0
   13b9c:	|  |      move.l (a0),d0
   13b9e:	|  |      move.l d0,d1
   13ba0:	|  |      move.l 1d19e <gameSettings>,d0
   13ba6:	|  |      cmp.l d1,d0
   13ba8:	|  |  ,-- bne.s 13bae <getLanguageForFileB+0x2e>
   13baa:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13bae:	|  |  '-> addq.l #1,(sp)
   13bb0:	|  '----> move.l 1d1a2 <gameSettings+0x4>,d0
   13bb6:	|         cmp.l (sp),d0
   13bb8:	'-------- bcc.s 13b8c <getLanguageForFileB+0xc>
	}

	return indexNum;
   13bba:	          move.l 4(sp),d0
}
   13bbe:	          addq.l #8,sp
   13bc0:	          rts

00013bc2 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13bc2:	          lea -20(sp),sp
   13bc6:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13bc8:	          move.l 28(sp),-(sp)
   13bcc:	          jsr 14284 <strlen>
   13bd2:	          addq.l #4,sp
   13bd4:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13bd8:	          moveq #4,d0
   13bda:	          cmp.l 12(sp),d0
   13bde:	      ,-- bge.s 13c02 <getPrefsFilename+0x40>
   13be0:	      |   move.l 12(sp),d0
   13be4:	      |   subq.l #4,d0
   13be6:	      |   movea.l 28(sp),a0
   13bea:	      |   adda.l d0,a0
   13bec:	      |   move.b (a0),d0
   13bee:	      |   cmpi.b #46,d0
   13bf2:	      +-- bne.s 13c02 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13bf4:	      |   move.l 12(sp),d0
   13bf8:	      |   subq.l #4,d0
   13bfa:	      |   movea.l 28(sp),a0
   13bfe:	      |   adda.l d0,a0
   13c00:	      |   clr.b (a0)
	}

	char * f = filename;
   13c02:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13c08:	          clr.l 20(sp)
   13c0c:	   ,----- bra.s 13c34 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13c0e:	,--|----> move.l 20(sp),d0
   13c12:	|  |      movea.l 28(sp),a0
   13c16:	|  |      adda.l d0,a0
   13c18:	|  |      move.b (a0),d0
   13c1a:	|  |      cmpi.b #47,d0
   13c1e:	|  |  ,-- bne.s 13c30 <getPrefsFilename+0x6e>
   13c20:	|  |  |   move.l 20(sp),d0
   13c24:	|  |  |   addq.l #1,d0
   13c26:	|  |  |   move.l 28(sp),d1
   13c2a:	|  |  |   add.l d0,d1
   13c2c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13c30:	|  |  '-> addq.l #1,20(sp)
   13c34:	|  '----> move.l 20(sp),d0
   13c38:	|         cmp.l 12(sp),d0
   13c3c:	'-------- blt.s 13c0e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13c3e:	          pea 1a498 <PutChar+0x217e>
   13c44:	          move.l 20(sp),-(sp)
   13c48:	          jsr 142c4 <joinStrings>
   13c4e:	          addq.l #8,sp
   13c50:	          move.l d0,8(sp)

	FreeVec(filename);
   13c54:	          move.l 28(sp),4(sp)
   13c5a:	          move.l 1d0c6 <SysBase>,d0
   13c60:	          movea.l d0,a6
   13c62:	          movea.l 4(sp),a1
   13c66:	          jsr -690(a6)
	filename = NULL;
   13c6a:	          clr.l 28(sp)
	return joined;
   13c6e:	          move.l 8(sp),d0
}
   13c72:	          movea.l (sp)+,a6
   13c74:	          lea 20(sp),sp
   13c78:	          rts

00013c7a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13c7a:	             lea -28(sp),sp
   13c7e:	             move.l a6,-(sp)
   13c80:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13c82:	             move.l 1d1a2 <gameSettings+0x4>,d0
   13c88:	             move.l d0,d1
   13c8a:	             addq.l #1,d1
   13c8c:	             move.l d1,28(sp)
   13c90:	             clr.l 24(sp)
   13c94:	             move.l 1d0c6 <SysBase>,d0
   13c9a:	             movea.l d0,a6
   13c9c:	             move.l 28(sp),d0
   13ca0:	             move.l 24(sp),d1
   13ca4:	             jsr -684(a6)
   13ca8:	             move.l d0,20(sp)
   13cac:	             move.l 20(sp),d0
   13cb0:	             move.l d0,1d196 <languageTable>
    if( languageTable == 0) {
   13cb6:	             move.l 1d196 <languageTable>,d0
   13cbc:	         ,-- bne.s 13ccc <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13cbe:	         |   pea 1a49d <PutChar+0x2183>
   13cc4:	         |   jsr 17878 <KPrintF>
   13cca:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13ccc:	         '-> move.l 1d1a2 <gameSettings+0x4>,d0
   13cd2:	             move.l d0,d1
   13cd4:	             addq.l #1,d1
   13cd6:	             move.l d1,16(sp)
   13cda:	             clr.l 12(sp)
   13cde:	             move.l 1d0c6 <SysBase>,d0
   13ce4:	             movea.l d0,a6
   13ce6:	             move.l 16(sp),d0
   13cea:	             move.l 12(sp),d1
   13cee:	             jsr -684(a6)
   13cf2:	             move.l d0,8(sp)
   13cf6:	             move.l 8(sp),d0
   13cfa:	             move.l d0,1d19a <languageName>
	if( languageName == 0) {
   13d00:	             move.l 1d19a <languageName>,d0
   13d06:	         ,-- bne.s 13d16 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13d08:	         |   pea 1a4d3 <PutChar+0x21b9>
   13d0e:	         |   jsr 17878 <KPrintF>
   13d14:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13d16:	         '-> clr.l 32(sp)
   13d1a:	   ,-------- bra.s 13d92 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13d1c:	,--|-------> tst.l 32(sp)
   13d20:	|  |  ,----- beq.s 13d30 <makeLanguageTable+0xb6>
   13d22:	|  |  |      move.l 40(sp),-(sp)
   13d26:	|  |  |      jsr 6bc <get2bytes>
   13d2c:	|  |  |      addq.l #4,sp
   13d2e:	|  |  |  ,-- bra.s 13d32 <makeLanguageTable+0xb8>
   13d30:	|  |  '--|-> moveq #0,d0
   13d32:	|  |     '-> movea.l 1d196 <languageTable>,a0
   13d38:	|  |         move.l 32(sp),d1
   13d3c:	|  |         add.l d1,d1
   13d3e:	|  |         add.l d1,d1
   13d40:	|  |         adda.l d1,a0
   13d42:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13d44:	|  |         move.l 1d19a <languageName>,d1
   13d4a:	|  |         move.l 32(sp),d0
   13d4e:	|  |         add.l d0,d0
   13d50:	|  |         add.l d0,d0
   13d52:	|  |         movea.l d1,a0
   13d54:	|  |         adda.l d0,a0
   13d56:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13d58:	|  |         move.l 1d070 <gameVersion>,d0
   13d5e:	|  |         cmpi.l #511,d0
   13d64:	|  |     ,-- ble.s 13d8e <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13d66:	|  |     |   move.l 1d1a2 <gameSettings+0x4>,d0
   13d6c:	|  |     +-- beq.s 13d8e <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13d6e:	|  |     |   move.l 1d19a <languageName>,d1
   13d74:	|  |     |   move.l 32(sp),d0
   13d78:	|  |     |   add.l d0,d0
   13d7a:	|  |     |   add.l d0,d0
   13d7c:	|  |     |   movea.l d1,a2
   13d7e:	|  |     |   adda.l d0,a2
   13d80:	|  |     |   move.l 40(sp),-(sp)
   13d84:	|  |     |   jsr b02 <readString>
   13d8a:	|  |     |   addq.l #4,sp
   13d8c:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13d8e:	|  |     '-> addq.l #1,32(sp)
   13d92:	|  '-------> move.l 1d1a2 <gameSettings+0x4>,d0
   13d98:	|            cmp.l 32(sp),d0
   13d9c:	'----------- bcc.w 13d1c <makeLanguageTable+0xa2>
		}
	}
}
   13da0:	             nop
   13da2:	             nop
   13da4:	             movea.l (sp)+,a2
   13da6:	             movea.l (sp)+,a6
   13da8:	             lea 28(sp),sp
   13dac:	             rts

00013dae <readIniFile>:

void readIniFile (char * filename) {
   13dae:	                      lea -564(sp),sp
   13db2:	                      move.l a6,-(sp)
   13db4:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13db6:	                      move.l 576(sp),-(sp)
   13dba:	                      jsr b8 <copyString>
   13dc0:	                      addq.l #4,sp
   13dc2:	                      move.l d0,-(sp)
   13dc4:	                      jsr 13bc2 <getPrefsFilename>
   13dca:	                      addq.l #4,sp
   13dcc:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13dd0:	                      move.l 562(sp),558(sp)
   13dd6:	                      move.l #1005,554(sp)
   13dde:	                      move.l 1d0ce <DOSBase>,d0
   13de4:	                      movea.l d0,a6
   13de6:	                      move.l 558(sp),d1
   13dea:	                      move.l 554(sp),d2
   13dee:	                      jsr -30(a6)
   13df2:	                      move.l d0,550(sp)
   13df6:	                      move.l 550(sp),d0
   13dfa:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13dfe:	                      clr.l 1d19e <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13e04:	                      move.w #1,1d1a6 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13e0c:	                      clr.l 1d1a8 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13e12:	                      moveq #1,d0
   13e14:	                      move.l d0,1d1ac <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13e1a:	                      clr.w 1d1b0 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13e20:	                      clr.w 1d1b2 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13e26:	                      clr.w 1d1b4 <gameSettings+0x16>

	FreeVec(langName);
   13e2c:	                      move.l 562(sp),542(sp)
   13e32:	                      move.l 1d0c6 <SysBase>,d0
   13e38:	                      movea.l d0,a6
   13e3a:	                      movea.l 542(sp),a1
   13e3e:	                      jsr -690(a6)
	langName = NULL;
   13e42:	                      clr.l 562(sp)

	if (fp) {
   13e46:	                      tst.l 546(sp)
   13e4a:	,-------------------- beq.w 14128 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13e4e:	|                     move.l sp,d0
   13e50:	|                     addi.l #265,d0
   13e56:	|                     move.l #257,d1
   13e5c:	|                     move.l d1,-(sp)
   13e5e:	|                     clr.l -(sp)
   13e60:	|                     move.l d0,-(sp)
   13e62:	|                     jsr 177fc <memset>
   13e68:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13e6c:	|                     move.l sp,d0
   13e6e:	|                     addq.l #8,d0
   13e70:	|                     move.l #257,d1
   13e76:	|                     move.l d1,-(sp)
   13e78:	|                     clr.l -(sp)
   13e7a:	|                     move.l d0,-(sp)
   13e7c:	|                     jsr 177fc <memset>
   13e82:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13e86:	|                     clr.b 571(sp)
		char readChar = ' ';
   13e8a:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13e90:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13e96:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13e9a:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13e9e:	|  ,----------------> move.l 546(sp),534(sp)
   13ea4:	|  |                  move.l 1d0ce <DOSBase>,d0
   13eaa:	|  |                  movea.l d0,a6
   13eac:	|  |                  move.l 534(sp),d1
   13eb0:	|  |                  jsr -306(a6)
   13eb4:	|  |                  move.l d0,530(sp)
   13eb8:	|  |                  move.l 530(sp),d0
   13ebc:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13ec0:	|  |                  moveq #-1,d1
   13ec2:	|  |                  cmp.l 538(sp),d1
   13ec6:	|  |           ,----- bne.s 13ed4 <readIniFile+0x126>
				readChar = '\n';
   13ec8:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13ece:	|  |           |      clr.w 568(sp)
   13ed2:	|  |           |  ,-- bra.s 13eda <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13ed4:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13eda:	|  |              '-> move.b 570(sp),d0
   13ede:	|  |                  ext.w d0
   13ee0:	|  |                  movea.w d0,a0
   13ee2:	|  |                  moveq #61,d0
   13ee4:	|  |                  cmp.l a0,d0
   13ee6:	|  |     ,----------- beq.w 14090 <readIniFile+0x2e2>
   13eea:	|  |     |            moveq #61,d1
   13eec:	|  |     |            cmp.l a0,d1
   13eee:	|  |  ,--|----------- blt.w 1409c <readIniFile+0x2ee>
   13ef2:	|  |  |  |            moveq #10,d0
   13ef4:	|  |  |  |            cmp.l a0,d0
   13ef6:	|  |  |  |        ,-- beq.s 13f00 <readIniFile+0x152>
   13ef8:	|  |  |  |        |   moveq #13,d1
   13efa:	|  |  |  |        |   cmp.l a0,d1
   13efc:	|  |  +--|--------|-- bne.w 1409c <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13f00:	|  |  |  |        '-> tst.w 566(sp)
   13f04:	|  |  |  |     ,----- beq.w 1407e <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13f08:	|  |  |  |     |      pea 1a507 <PutChar+0x21ed>
   13f0e:	|  |  |  |     |      move.l sp,d0
   13f10:	|  |  |  |     |      addi.l #269,d0
   13f16:	|  |  |  |     |      move.l d0,-(sp)
   13f18:	|  |  |  |     |      jsr 14244 <strcmp>
   13f1e:	|  |  |  |     |      addq.l #8,sp
   13f20:	|  |  |  |     |      tst.l d0
   13f22:	|  |  |  |     |  ,-- bne.s 13f3c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13f24:	|  |  |  |     |  |   move.l sp,d0
   13f26:	|  |  |  |     |  |   addq.l #8,d0
   13f28:	|  |  |  |     |  |   move.l d0,-(sp)
   13f2a:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   13f30:	|  |  |  |     |  |   addq.l #4,sp
   13f32:	|  |  |  |     |  |   move.l d0,1d19e <gameSettings>
   13f38:	|  |  |  |     +--|-- bra.w 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13f3c:	|  |  |  |     |  '-> pea 1a510 <PutChar+0x21f6>
   13f42:	|  |  |  |     |      move.l sp,d0
   13f44:	|  |  |  |     |      addi.l #269,d0
   13f4a:	|  |  |  |     |      move.l d0,-(sp)
   13f4c:	|  |  |  |     |      jsr 14244 <strcmp>
   13f52:	|  |  |  |     |      addq.l #8,sp
   13f54:	|  |  |  |     |      tst.l d0
   13f56:	|  |  |  |     |  ,-- bne.s 13f7c <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13f58:	|  |  |  |     |  |   move.l sp,d0
   13f5a:	|  |  |  |     |  |   addq.l #8,d0
   13f5c:	|  |  |  |     |  |   move.l d0,-(sp)
   13f5e:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   13f64:	|  |  |  |     |  |   addq.l #4,sp
   13f66:	|  |  |  |     |  |   tst.l d0
   13f68:	|  |  |  |     |  |   seq d0
   13f6a:	|  |  |  |     |  |   neg.b d0
   13f6c:	|  |  |  |     |  |   move.b d0,d0
   13f6e:	|  |  |  |     |  |   andi.w #255,d0
   13f72:	|  |  |  |     |  |   move.w d0,1d1a6 <gameSettings+0x8>
   13f78:	|  |  |  |     +--|-- bra.w 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13f7c:	|  |  |  |     |  '-> pea 1a517 <PutChar+0x21fd>
   13f82:	|  |  |  |     |      move.l sp,d0
   13f84:	|  |  |  |     |      addi.l #269,d0
   13f8a:	|  |  |  |     |      move.l d0,-(sp)
   13f8c:	|  |  |  |     |      jsr 14244 <strcmp>
   13f92:	|  |  |  |     |      addq.l #8,sp
   13f94:	|  |  |  |     |      tst.l d0
   13f96:	|  |  |  |     |  ,-- bne.s 13fb0 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13f98:	|  |  |  |     |  |   move.l sp,d0
   13f9a:	|  |  |  |     |  |   addq.l #8,d0
   13f9c:	|  |  |  |     |  |   move.l d0,-(sp)
   13f9e:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   13fa4:	|  |  |  |     |  |   addq.l #4,sp
   13fa6:	|  |  |  |     |  |   move.l d0,1d1a8 <gameSettings+0xa>
   13fac:	|  |  |  |     +--|-- bra.w 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13fb0:	|  |  |  |     |  '-> pea 1a51f <PutChar+0x2205>
   13fb6:	|  |  |  |     |      move.l sp,d0
   13fb8:	|  |  |  |     |      addi.l #269,d0
   13fbe:	|  |  |  |     |      move.l d0,-(sp)
   13fc0:	|  |  |  |     |      jsr 14244 <strcmp>
   13fc6:	|  |  |  |     |      addq.l #8,sp
   13fc8:	|  |  |  |     |      tst.l d0
   13fca:	|  |  |  |     |  ,-- bne.s 13fe4 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13fcc:	|  |  |  |     |  |   move.l sp,d0
   13fce:	|  |  |  |     |  |   addq.l #8,d0
   13fd0:	|  |  |  |     |  |   move.l d0,-(sp)
   13fd2:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   13fd8:	|  |  |  |     |  |   addq.l #4,sp
   13fda:	|  |  |  |     |  |   move.l d0,1d1ac <gameSettings+0xe>
   13fe0:	|  |  |  |     +--|-- bra.w 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13fe4:	|  |  |  |     |  '-> pea 1a529 <PutChar+0x220f>
   13fea:	|  |  |  |     |      move.l sp,d0
   13fec:	|  |  |  |     |      addi.l #269,d0
   13ff2:	|  |  |  |     |      move.l d0,-(sp)
   13ff4:	|  |  |  |     |      jsr 14244 <strcmp>
   13ffa:	|  |  |  |     |      addq.l #8,sp
   13ffc:	|  |  |  |     |      tst.l d0
   13ffe:	|  |  |  |     |  ,-- bne.s 14018 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   14000:	|  |  |  |     |  |   move.l sp,d0
   14002:	|  |  |  |     |  |   addq.l #8,d0
   14004:	|  |  |  |     |  |   move.l d0,-(sp)
   14006:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   1400c:	|  |  |  |     |  |   addq.l #4,sp
   1400e:	|  |  |  |     |  |   move.l d0,d0
   14010:	|  |  |  |     |  |   move.w d0,1d1b0 <gameSettings+0x12>
   14016:	|  |  |  |     +--|-- bra.s 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   14018:	|  |  |  |     |  '-> pea 1a535 <PutChar+0x221b>
   1401e:	|  |  |  |     |      move.l sp,d0
   14020:	|  |  |  |     |      addi.l #269,d0
   14026:	|  |  |  |     |      move.l d0,-(sp)
   14028:	|  |  |  |     |      jsr 14244 <strcmp>
   1402e:	|  |  |  |     |      addq.l #8,sp
   14030:	|  |  |  |     |      tst.l d0
   14032:	|  |  |  |     |  ,-- bne.s 1404c <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   14034:	|  |  |  |     |  |   move.l sp,d0
   14036:	|  |  |  |     |  |   addq.l #8,d0
   14038:	|  |  |  |     |  |   move.l d0,-(sp)
   1403a:	|  |  |  |     |  |   jsr 14134 <stringToInt>
   14040:	|  |  |  |     |  |   addq.l #4,sp
   14042:	|  |  |  |     |  |   move.l d0,d0
   14044:	|  |  |  |     |  |   move.w d0,1d1b2 <gameSettings+0x14>
   1404a:	|  |  |  |     +--|-- bra.s 1407e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1404c:	|  |  |  |     |  '-> pea 1a543 <PutChar+0x2229>
   14052:	|  |  |  |     |      move.l sp,d0
   14054:	|  |  |  |     |      addi.l #269,d0
   1405a:	|  |  |  |     |      move.l d0,-(sp)
   1405c:	|  |  |  |     |      jsr 14244 <strcmp>
   14062:	|  |  |  |     |      addq.l #8,sp
   14064:	|  |  |  |     |      tst.l d0
   14066:	|  |  |  |     +----- bne.s 1407e <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   14068:	|  |  |  |     |      move.l sp,d0
   1406a:	|  |  |  |     |      addq.l #8,d0
   1406c:	|  |  |  |     |      move.l d0,-(sp)
   1406e:	|  |  |  |     |      jsr 14134 <stringToInt>
   14074:	|  |  |  |     |      addq.l #4,sp
   14076:	|  |  |  |     |      move.l d0,d0
   14078:	|  |  |  |     |      move.w d0,1d1b4 <gameSettings+0x16>
					}
				}
				here = 0;
   1407e:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14082:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14086:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   1408a:	|  |  |  |            clr.b 8(sp)
				break;
   1408e:	|  |  |  |  ,-------- bra.s 14106 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   14090:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14096:	|  |  |     |         clr.b 571(sp)
				break;
   1409a:	|  |  |     +-------- bra.s 14106 <readIniFile+0x358>

				default:
				if (doingSecond) {
   1409c:	|  |  '-----|-------> tst.w 566(sp)
   140a0:	|  |        |  ,----- beq.s 140d4 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   140a2:	|  |        |  |      move.b 571(sp),d0
   140a6:	|  |        |  |      move.b d0,d1
   140a8:	|  |        |  |      addq.b #1,d1
   140aa:	|  |        |  |      move.b d1,571(sp)
   140ae:	|  |        |  |      move.b d0,d0
   140b0:	|  |        |  |      andi.l #255,d0
   140b6:	|  |        |  |      lea 572(sp),a0
   140ba:	|  |        |  |      adda.l d0,a0
   140bc:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   140c2:	|  |        |  |      moveq #0,d0
   140c4:	|  |        |  |      move.b 571(sp),d0
   140c8:	|  |        |  |      lea 572(sp),a0
   140cc:	|  |        |  |      adda.l d0,a0
   140ce:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   140d2:	|  |        |  |  ,-- bra.s 14104 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   140d4:	|  |        |  '--|-> move.b 571(sp),d0
   140d8:	|  |        |     |   move.b d0,d1
   140da:	|  |        |     |   addq.b #1,d1
   140dc:	|  |        |     |   move.b d1,571(sp)
   140e0:	|  |        |     |   move.b d0,d0
   140e2:	|  |        |     |   andi.l #255,d0
   140e8:	|  |        |     |   lea 572(sp),a0
   140ec:	|  |        |     |   adda.l d0,a0
   140ee:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   140f4:	|  |        |     |   moveq #0,d0
   140f6:	|  |        |     |   move.b 571(sp),d0
   140fa:	|  |        |     |   lea 572(sp),a0
   140fe:	|  |        |     |   adda.l d0,a0
   14100:	|  |        |     |   clr.b -307(a0)
				break;
   14104:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14106:	|  |        '-------> tst.w 568(sp)
   1410a:	|  '----------------- bne.w 13e9e <readIniFile+0xf0>

		Close(fp);
   1410e:	|                     move.l 546(sp),526(sp)
   14114:	|                     move.l 1d0ce <DOSBase>,d0
   1411a:	|                     movea.l d0,a6
   1411c:	|                     move.l 526(sp),d1
   14120:	|                     jsr -36(a6)
   14124:	|                     move.l d0,522(sp)
	}
}
   14128:	'-------------------> nop
   1412a:	                      move.l (sp)+,d2
   1412c:	                      movea.l (sp)+,a6
   1412e:	                      lea 564(sp),sp
   14132:	                      rts

00014134 <stringToInt>:

unsigned int stringToInt (char * s) {
   14134:	             subq.l #8,sp
	int i = 0;
   14136:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1413a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   1413e:	,----------> movea.l 12(sp),a0
   14142:	|            move.b (a0),d0
   14144:	|            cmpi.b #47,d0
   14148:	|        ,-- ble.s 14180 <stringToInt+0x4c>
   1414a:	|        |   movea.l 12(sp),a0
   1414e:	|        |   move.b (a0),d0
   14150:	|        |   cmpi.b #57,d0
   14154:	|        +-- bgt.s 14180 <stringToInt+0x4c>
			i *= 10;
   14156:	|        |   move.l 4(sp),d1
   1415a:	|        |   move.l d1,d0
   1415c:	|        |   add.l d0,d0
   1415e:	|        |   add.l d0,d0
   14160:	|        |   add.l d1,d0
   14162:	|        |   add.l d0,d0
   14164:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14168:	|        |   movea.l 12(sp),a0
   1416c:	|        |   move.b (a0),d0
   1416e:	|        |   ext.w d0
   14170:	|        |   movea.w d0,a0
   14172:	|        |   moveq #-48,d0
   14174:	|        |   add.l a0,d0
   14176:	|        |   add.l d0,4(sp)
			s ++;
   1417a:	|        |   addq.l #1,12(sp)
   1417e:	|  ,-----|-- bra.s 141b8 <stringToInt+0x84>
		} else if (*s == '-') {
   14180:	|  |     '-> movea.l 12(sp),a0
   14184:	|  |         move.b (a0),d0
   14186:	|  |         cmpi.b #45,d0
   1418a:	|  |     ,-- bne.s 141a4 <stringToInt+0x70>
			negative = ! negative;
   1418c:	|  |     |   tst.w 2(sp)
   14190:	|  |     |   seq d0
   14192:	|  |     |   neg.b d0
   14194:	|  |     |   move.b d0,d0
   14196:	|  |     |   andi.w #255,d0
   1419a:	|  |     |   move.w d0,2(sp)
			s++;
   1419e:	|  |     |   addq.l #1,12(sp)
   141a2:	+--|-----|-- bra.s 1413e <stringToInt+0xa>
		} else {
			if (negative)
   141a4:	|  |     '-> tst.w 2(sp)
   141a8:	|  |     ,-- beq.s 141b2 <stringToInt+0x7e>
				return -i;
   141aa:	|  |     |   move.l 4(sp),d0
   141ae:	|  |     |   neg.l d0
   141b0:	|  |  ,--|-- bra.s 141ba <stringToInt+0x86>
			return i;
   141b2:	|  |  |  '-> move.l 4(sp),d0
   141b6:	|  |  +----- bra.s 141ba <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   141b8:	'--'--|----X bra.s 1413e <stringToInt+0xa>
		}
	}
   141ba:	      '----> addq.l #8,sp
   141bc:	             rts

000141be <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   141be:	    lea -28(sp),sp
   141c2:	    move.l a6,-(sp)
   141c4:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   141c6:	    pea 1a54d <PutChar+0x2233>
   141cc:	    jsr 17878 <KPrintF>
   141d2:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   141d4:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   141d8:	    move.l 40(sp),30(sp)
   141de:	    move.l #1005,26(sp)
   141e6:	    move.l 1d0ce <DOSBase>,d0
   141ec:	    movea.l d0,a6
   141ee:	    move.l 30(sp),d1
   141f2:	    move.l 26(sp),d2
   141f6:	    jsr -30(a6)
   141fa:	    move.l d0,22(sp)
   141fe:	    move.l 22(sp),d0
   14202:	    move.l d0,18(sp)
	if (tester) {
   14206:	,-- beq.s 14236 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14208:	|   pea 1a567 <PutChar+0x224d>
   1420e:	|   jsr 17878 <KPrintF>
   14214:	|   addq.l #4,sp
		retval = 1;
   14216:	|   move.b #1,35(sp)
		Close(tester);
   1421c:	|   move.l 18(sp),14(sp)
   14222:	|   move.l 1d0ce <DOSBase>,d0
   14228:	|   movea.l d0,a6
   1422a:	|   move.l 14(sp),d1
   1422e:	|   jsr -36(a6)
   14232:	|   move.l d0,10(sp)
	}
	return retval;
   14236:	'-> move.b 35(sp),d0
   1423a:	    move.l (sp)+,d2
   1423c:	    movea.l (sp)+,a6
   1423e:	    lea 28(sp),sp
   14242:	    rts

00014244 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14244:	   ,-- bra.s 1424e <strcmp+0xa>
    {
        s1++;
   14246:	,--|-> addq.l #1,4(sp)
        s2++;
   1424a:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   1424e:	|  '-> movea.l 4(sp),a0
   14252:	|      move.b (a0),d0
   14254:	|  ,-- beq.s 14266 <strcmp+0x22>
   14256:	|  |   movea.l 4(sp),a0
   1425a:	|  |   move.b (a0),d1
   1425c:	|  |   movea.l 8(sp),a0
   14260:	|  |   move.b (a0),d0
   14262:	|  |   cmp.b d1,d0
   14264:	'--|-- beq.s 14246 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14266:	   '-> movea.l 4(sp),a0
   1426a:	       move.b (a0),d0
   1426c:	       moveq #0,d1
   1426e:	       move.b d0,d1
   14270:	       movea.l 8(sp),a0
   14274:	       move.b (a0),d0
   14276:	       move.b d0,d0
   14278:	       andi.l #255,d0
   1427e:	       sub.l d0,d1
   14280:	       move.l d1,d0
}
   14282:	       rts

00014284 <strlen>:

long unsigned int strlen (const char *s) 
{  
   14284:	       subq.l #4,sp
	long unsigned int i = 0;
   14286:	       clr.l (sp)
	while(s[i]) i++; 
   14288:	   ,-- bra.s 1428c <strlen+0x8>
   1428a:	,--|-> addq.l #1,(sp)
   1428c:	|  '-> movea.l 8(sp),a0
   14290:	|      adda.l (sp),a0
   14292:	|      move.b (a0),d0
   14294:	'----- bne.s 1428a <strlen+0x6>
	return(i);
   14296:	       move.l (sp),d0
}
   14298:	       addq.l #4,sp
   1429a:	       rts

0001429c <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   1429c:	    nop
   1429e:	,-> move.l 8(sp),d0
   142a2:	|   move.l d0,d1
   142a4:	|   addq.l #1,d1
   142a6:	|   move.l d1,8(sp)
   142aa:	|   movea.l 4(sp),a0
   142ae:	|   lea 1(a0),a1
   142b2:	|   move.l a1,4(sp)
   142b6:	|   movea.l d0,a1
   142b8:	|   move.b (a1),d0
   142ba:	|   move.b d0,(a0)
   142bc:	|   move.b (a0),d0
   142be:	'-- bne.s 1429e <strcpy+0x2>
}
   142c0:	    nop
   142c2:	    rts

000142c4 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   142c4:	    lea -20(sp),sp
   142c8:	    move.l a6,-(sp)
   142ca:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   142cc:	    move.l 32(sp),-(sp)
   142d0:	    jsr 14284 <strlen>
   142d6:	    addq.l #4,sp
   142d8:	    move.l d0,d2
   142da:	    move.l 36(sp),-(sp)
   142de:	    jsr 14284 <strlen>
   142e4:	    addq.l #4,sp
   142e6:	    add.l d2,d0
   142e8:	    move.l d0,d1
   142ea:	    addq.l #1,d1
   142ec:	    move.l d1,20(sp)
   142f0:	    clr.l 16(sp)
   142f4:	    move.l 1d0c6 <SysBase>,d0
   142fa:	    movea.l d0,a6
   142fc:	    move.l 20(sp),d0
   14300:	    move.l 16(sp),d1
   14304:	    jsr -684(a6)
   14308:	    move.l d0,12(sp)
   1430c:	    move.l 12(sp),d0
   14310:	    move.l d0,8(sp)
	char * t = newString;
   14314:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   1431a:	    nop
   1431c:	,-> move.l 32(sp),d0
   14320:	|   move.l d0,d1
   14322:	|   addq.l #1,d1
   14324:	|   move.l d1,32(sp)
   14328:	|   movea.l 24(sp),a0
   1432c:	|   lea 1(a0),a1
   14330:	|   move.l a1,24(sp)
   14334:	|   movea.l d0,a1
   14336:	|   move.b (a1),d0
   14338:	|   move.b d0,(a0)
   1433a:	|   move.b (a0),d0
   1433c:	'-- bne.s 1431c <joinStrings+0x58>
	t--;
   1433e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14342:	    nop
   14344:	,-> move.l 36(sp),d0
   14348:	|   move.l d0,d1
   1434a:	|   addq.l #1,d1
   1434c:	|   move.l d1,36(sp)
   14350:	|   movea.l 24(sp),a0
   14354:	|   lea 1(a0),a1
   14358:	|   move.l a1,24(sp)
   1435c:	|   movea.l d0,a1
   1435e:	|   move.b (a1),d0
   14360:	|   move.b d0,(a0)
   14362:	|   move.b (a0),d0
   14364:	'-- bne.s 14344 <joinStrings+0x80>

	return newString;
   14366:	    move.l 8(sp),d0
}
   1436a:	    move.l (sp)+,d2
   1436c:	    movea.l (sp)+,a6
   1436e:	    lea 20(sp),sp
   14372:	    rts

00014374 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   14374:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   14378:	       moveq #10,d0
   1437a:	       cmp.l 28(sp),d0
   1437e:	   ,-- bne.s 1439c <itoa+0x28>
   14380:	   |   tst.l 20(sp)
   14384:	   +-- bge.s 1439c <itoa+0x28>
        *str++ = '-';
   14386:	   |   move.l 24(sp),d0
   1438a:	   |   move.l d0,d1
   1438c:	   |   addq.l #1,d1
   1438e:	   |   move.l d1,24(sp)
   14392:	   |   movea.l d0,a0
   14394:	   |   move.b #45,(a0)
        value *= -1;
   14398:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   1439c:	   '-> move.l 24(sp),12(sp)
   143a2:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   143a8:	   ,-> move.l 20(sp),d0
   143ac:	   |   move.l 28(sp),-(sp)
   143b0:	   |   move.l d0,-(sp)
   143b2:	   |   jsr 182b0 <__modsi3>
   143b8:	   |   addq.l #8,sp
   143ba:	   |   movea.l d0,a1
   143bc:	   |   move.l 12(sp),d0
   143c0:	   |   move.l d0,d1
   143c2:	   |   addq.l #1,d1
   143c4:	   |   move.l d1,12(sp)
   143c8:	   |   lea 1a57f <PutChar+0x2265>,a0
   143ce:	   |   move.b (0,a1,a0.l),d1
   143d2:	   |   movea.l d0,a0
   143d4:	   |   move.b d1,(a0)
        value /= base;
   143d6:	   |   move.l 28(sp),-(sp)
   143da:	   |   move.l 24(sp),-(sp)
   143de:	   |   jsr 18282 <__divsi3>
   143e4:	   |   addq.l #8,sp
   143e6:	   |   move.l d0,20(sp)
    } while (value);
   143ea:	   '-- bne.s 143a8 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   143ec:	       move.l 12(sp),d0
   143f0:	       move.l d0,d1
   143f2:	       subq.l #1,d1
   143f4:	       move.l d1,12(sp)
   143f8:	       movea.l d0,a0
   143fa:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   143fc:	       move.l 4(sp),8(sp)
   14402:	   ,-- bra.s 14428 <itoa+0xb4>
        char temp = *low;
   14404:	,--|-> movea.l 8(sp),a0
   14408:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   1440c:	|  |   movea.l 12(sp),a0
   14410:	|  |   move.b (a0),d0
   14412:	|  |   movea.l 8(sp),a0
   14416:	|  |   move.b d0,(a0)
        *ptr = temp;
   14418:	|  |   movea.l 12(sp),a0
   1441c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   14420:	|  |   addq.l #1,8(sp)
   14424:	|  |   subq.l #1,12(sp)
   14428:	|  '-> move.l 8(sp),d0
   1442c:	|      cmp.l 12(sp),d0
   14430:	'----- bcs.s 14404 <itoa+0x90>
    }
    return rc;
   14432:	       move.l 4(sp),d0
}
   14436:	       lea 16(sp),sp
   1443a:	       rts

0001443c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1443c:	                            lea -40(sp),sp
   14440:	                            move.l d2,-(sp)
    char* s = str;
   14442:	                            move.l 48(sp),40(sp)
    const char* p = format;
   14448:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1444e:	   ,----------------------- bra.w 14582 <vsprintf2+0x146>
        if (*p == '%') {
   14452:	,--|----------------------> movea.l 36(sp),a0
   14456:	|  |                        move.b (a0),d0
   14458:	|  |                        cmpi.b #37,d0
   1445c:	|  |  ,-------------------- bne.w 14568 <vsprintf2+0x12c>
            switch (*++p) {
   14460:	|  |  |                     addq.l #1,36(sp)
   14464:	|  |  |                     movea.l 36(sp),a0
   14468:	|  |  |                     move.b (a0),d0
   1446a:	|  |  |                     ext.w d0
   1446c:	|  |  |                     movea.w d0,a0
   1446e:	|  |  |                     moveq #115,d0
   14470:	|  |  |                     cmp.l a0,d0
   14472:	|  |  |           ,-------- beq.s 144ea <vsprintf2+0xae>
   14474:	|  |  |           |         moveq #115,d1
   14476:	|  |  |           |         cmp.l a0,d1
   14478:	|  |  |  ,--------|-------- blt.w 14550 <vsprintf2+0x114>
   1447c:	|  |  |  |        |         moveq #99,d2
   1447e:	|  |  |  |        |         cmp.l a0,d2
   14480:	|  |  |  |  ,-----|-------- beq.w 14528 <vsprintf2+0xec>
   14484:	|  |  |  |  |     |         moveq #100,d0
   14486:	|  |  |  |  |     |         cmp.l a0,d0
   14488:	|  |  |  +--|-----|-------- bne.w 14550 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1448c:	|  |  |  |  |     |         addq.l #4,56(sp)
   14490:	|  |  |  |  |     |         movea.l 56(sp),a0
   14494:	|  |  |  |  |     |         move.l (a0),d0
   14496:	|  |  |  |  |     |         move.l d0,d1
   14498:	|  |  |  |  |     |         subq.l #1,d1
   1449a:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1449e:	|  |  |  |  |     |         pea a <_start+0xa>
   144a2:	|  |  |  |  |     |         lea 8(sp),a0
   144a6:	|  |  |  |  |     |         move.l a0,-(sp)
   144a8:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   144ac:	|  |  |  |  |     |         jsr 14374 <itoa>
   144b2:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   144b6:	|  |  |  |  |     |         lea 44(sp),a0
   144ba:	|  |  |  |  |     |         lea -40(a0),a0
   144be:	|  |  |  |  |     |         move.l a0,28(sp)
   144c2:	|  |  |  |  |     |     ,-- bra.s 144de <vsprintf2+0xa2>
                        *s++ = *b;
   144c4:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   144c8:	|  |  |  |  |     |  |  |   move.l d0,d1
   144ca:	|  |  |  |  |     |  |  |   addq.l #1,d1
   144cc:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   144d0:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   144d4:	|  |  |  |  |     |  |  |   move.b (a0),d1
   144d6:	|  |  |  |  |     |  |  |   movea.l d0,a0
   144d8:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   144da:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   144de:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   144e2:	|  |  |  |  |     |  |      move.b (a0),d0
   144e4:	|  |  |  |  |     |  '----- bne.s 144c4 <vsprintf2+0x88>
                    }
                    break;
   144e6:	|  |  |  |  |  ,--|-------- bra.w 1457e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   144ea:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   144ee:	|  |  |  |  |  |            movea.l 56(sp),a0
   144f2:	|  |  |  |  |  |            move.l (a0),d0
   144f4:	|  |  |  |  |  |            move.l d0,d1
   144f6:	|  |  |  |  |  |            subq.l #1,d1
   144f8:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   144fc:	|  |  |  |  |  |        ,-- bra.s 1451e <vsprintf2+0xe2>
                        *s++ = *sval++;
   144fe:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   14502:	|  |  |  |  |  |     |  |   move.l d1,d2
   14504:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14506:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1450a:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1450e:	|  |  |  |  |  |     |  |   move.l d0,d2
   14510:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14512:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   14516:	|  |  |  |  |  |     |  |   movea.l d1,a0
   14518:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1451a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1451c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1451e:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   14522:	|  |  |  |  |  |     |      move.b (a0),d0
   14524:	|  |  |  |  |  |     '----- bne.s 144fe <vsprintf2+0xc2>
                    }
                    break;
   14526:	|  |  |  |  |  +----------- bra.s 1457e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   14528:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   1452c:	|  |  |  |     |            movea.l 56(sp),a0
   14530:	|  |  |  |     |            move.l (a0),d0
   14532:	|  |  |  |     |            move.l d0,d1
   14534:	|  |  |  |     |            subq.l #1,d1
   14536:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1453a:	|  |  |  |     |            move.l 40(sp),d0
   1453e:	|  |  |  |     |            move.l d0,d2
   14540:	|  |  |  |     |            addq.l #1,d2
   14542:	|  |  |  |     |            move.l d2,40(sp)
   14546:	|  |  |  |     |            move.l 24(sp),d1
   1454a:	|  |  |  |     |            movea.l d0,a0
   1454c:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1454e:	|  |  |  |     +----------- bra.s 1457e <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14550:	|  |  |  '-----|----------> move.l 40(sp),d0
   14554:	|  |  |        |            move.l d0,d1
   14556:	|  |  |        |            addq.l #1,d1
   14558:	|  |  |        |            move.l d1,40(sp)
   1455c:	|  |  |        |            movea.l 36(sp),a0
   14560:	|  |  |        |            move.b (a0),d1
   14562:	|  |  |        |            movea.l d0,a0
   14564:	|  |  |        |            move.b d1,(a0)
                    break;
   14566:	|  |  |        +----------- bra.s 1457e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14568:	|  |  '--------|----------> move.l 40(sp),d0
   1456c:	|  |           |            move.l d0,d1
   1456e:	|  |           |            addq.l #1,d1
   14570:	|  |           |            move.l d1,40(sp)
   14574:	|  |           |            movea.l 36(sp),a0
   14578:	|  |           |            move.b (a0),d1
   1457a:	|  |           |            movea.l d0,a0
   1457c:	|  |           |            move.b d1,(a0)
        }
        p++;
   1457e:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   14582:	|  '----------------------> movea.l 36(sp),a0
   14586:	|                           move.b (a0),d0
   14588:	'-------------------------- bne.w 14452 <vsprintf2+0x16>
    }
    *s = '\0';
   1458c:	                            movea.l 40(sp),a0
   14590:	                            clr.b (a0)
    return s - str;
   14592:	                            move.l 40(sp),d0
   14596:	                            sub.l 48(sp),d0
}
   1459a:	                            move.l (sp)+,d2
   1459c:	                            lea 40(sp),sp
   145a0:	                            rts

000145a2 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   145a2:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   145a4:	moveq #16,d0
   145a6:	add.l sp,d0
   145a8:	move.l d0,d1
   145aa:	addq.l #4,d1
   145ac:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   145b0:	move.l 16(sp),d0
   145b4:	move.l 4(sp),-(sp)
   145b8:	move.l d0,-(sp)
   145ba:	move.l 20(sp),-(sp)
   145be:	jsr 1443c <vsprintf2>
   145c4:	lea 12(sp),sp
   145c8:	move.l d0,(sp)
    va_end(args);
   145ca:	clr.l 4(sp)

    return done;
   145ce:	move.l (sp),d0
}
   145d0:	addq.l #8,sp
   145d2:	rts

000145d4 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   145d4:	       lea -20(sp),sp
   145d8:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   145da:	       moveq #12,d0
   145dc:	       move.l d0,20(sp)
   145e0:	       clr.l 16(sp)
   145e4:	       move.l 1d0c6 <SysBase>,d0
   145ea:	       movea.l d0,a6
   145ec:	       move.l 20(sp),d0
   145f0:	       move.l 16(sp),d1
   145f4:	       jsr -684(a6)
   145f8:	       move.l d0,12(sp)
   145fc:	       move.l 12(sp),d0
   14600:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14604:	   ,-- bne.s 1460a <addVarToStack+0x36>
   14606:	   |   clr.w d0
   14608:	,--|-- bra.s 14652 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1460a:	|  '-> move.l 8(sp),d0
   1460e:	|      move.l d0,-(sp)
   14610:	|      move.l 32(sp),-(sp)
   14614:	|      jsr 15136 <copyMain>
   1461a:	|      addq.l #8,sp
   1461c:	|      tst.w d0
   1461e:	|  ,-- bne.s 1463a <addVarToStack+0x66>
        FreeVec(newStack);
   14620:	|  |   move.l 8(sp),4(sp)
   14626:	|  |   move.l 1d0c6 <SysBase>,d0
   1462c:	|  |   movea.l d0,a6
   1462e:	|  |   movea.l 4(sp),a1
   14632:	|  |   jsr -690(a6)
        return FALSE;
   14636:	|  |   clr.w d0
   14638:	+--|-- bra.s 14652 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1463a:	|  '-> movea.l 32(sp),a0
   1463e:	|      move.l (a0),d0
   14640:	|      movea.l 8(sp),a0
   14644:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14648:	|      movea.l 32(sp),a0
   1464c:	|      move.l 8(sp),(a0)
    return TRUE;
   14650:	|      moveq #1,d0
}
   14652:	'----> movea.l (sp)+,a6
   14654:	       lea 20(sp),sp
   14658:	       rts

0001465a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1465a:	       lea -16(sp),sp
   1465e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14660:	       moveq #12,d0
   14662:	       move.l d0,16(sp)
   14666:	       clr.l 12(sp)
   1466a:	       move.l 1d0c6 <SysBase>,d0
   14670:	       movea.l d0,a6
   14672:	       move.l 16(sp),d0
   14676:	       move.l 12(sp),d1
   1467a:	       jsr -684(a6)
   1467e:	       move.l d0,8(sp)
   14682:	       move.l 8(sp),d0
   14686:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1468a:	   ,-- bne.s 14690 <addVarToStackQuick+0x36>
   1468c:	   |   clr.w d0
   1468e:	,--|-- bra.s 146c6 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14690:	|  '-> move.l 4(sp),d0
   14694:	|      pea 8 <_start+0x8>
   14698:	|      move.l 28(sp),-(sp)
   1469c:	|      move.l d0,-(sp)
   1469e:	|      jsr 1782c <memcpy>
   146a4:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   146a8:	|      movea.l 24(sp),a0
   146ac:	|      clr.l (a0)

    newStack->next = *thisStack;
   146ae:	|      movea.l 28(sp),a0
   146b2:	|      move.l (a0),d0
   146b4:	|      movea.l 4(sp),a0
   146b8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   146bc:	|      movea.l 28(sp),a0
   146c0:	|      move.l 4(sp),(a0)
    return TRUE;
   146c4:	|      moveq #1,d0
}
   146c6:	'----> movea.l (sp)+,a6
   146c8:	       lea 16(sp),sp
   146cc:	       rts

000146ce <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   146ce:	       lea -16(sp),sp
   146d2:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   146d4:	       movea.l 24(sp),a0
   146d8:	       move.l (a0),d0
   146da:	       moveq #1,d1
   146dc:	       cmp.l d0,d1
   146de:	   ,-- bne.s 14708 <addVariablesInSecond+0x3a>
   146e0:	   |   movea.l 28(sp),a0
   146e4:	   |   move.l (a0),d0
   146e6:	   |   moveq #1,d1
   146e8:	   |   cmp.l d0,d1
   146ea:	   +-- bne.s 14708 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   146ec:	   |   movea.l 28(sp),a0
   146f0:	   |   move.l 4(a0),d1
   146f4:	   |   movea.l 24(sp),a0
   146f8:	   |   move.l 4(a0),d0
   146fc:	   |   add.l d1,d0
   146fe:	   |   movea.l 28(sp),a0
   14702:	   |   move.l d0,4(a0)
   14706:	,--|-- bra.s 14782 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14708:	|  '-> move.l 24(sp),-(sp)
   1470c:	|      jsr 1536e <getTextFromAnyVar>
   14712:	|      addq.l #4,sp
   14714:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14718:	|      move.l 28(sp),-(sp)
   1471c:	|      jsr 1536e <getTextFromAnyVar>
   14722:	|      addq.l #4,sp
   14724:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14728:	|      move.l 28(sp),-(sp)
   1472c:	|      jsr 14fe6 <unlinkVar>
   14732:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14734:	|      move.l 12(sp),-(sp)
   14738:	|      move.l 20(sp),-(sp)
   1473c:	|      jsr 142c4 <joinStrings>
   14742:	|      addq.l #8,sp
   14744:	|      movea.l 28(sp),a0
   14748:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1474c:	|      movea.l 28(sp),a0
   14750:	|      moveq #3,d0
   14752:	|      move.l d0,(a0)
		FreeVec(string1);
   14754:	|      move.l 16(sp),8(sp)
   1475a:	|      move.l 1d0c6 <SysBase>,d0
   14760:	|      movea.l d0,a6
   14762:	|      movea.l 8(sp),a1
   14766:	|      jsr -690(a6)
		FreeVec(string2);
   1476a:	|      move.l 12(sp),4(sp)
   14770:	|      move.l 1d0c6 <SysBase>,d0
   14776:	|      movea.l d0,a6
   14778:	|      movea.l 4(sp),a1
   1477c:	|      jsr -690(a6)
	}
}
   14780:	|      nop
   14782:	'----> nop
   14784:	       movea.l (sp)+,a6
   14786:	       lea 16(sp),sp
   1478a:	       rts

0001478c <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1478c:	movea.l 8(sp),a0
   14790:	move.l 4(a0),-(sp)
   14794:	move.l (a0),-(sp)
   14796:	movea.l 12(sp),a0
   1479a:	move.l 4(a0),-(sp)
   1479e:	move.l (a0),-(sp)
   147a0:	jsr 147c2 <compareVars>
   147a6:	lea 16(sp),sp
   147aa:	move.l d0,-(sp)
   147ac:	pea 1 <_start+0x1>
   147b0:	move.l 16(sp),-(sp)
   147b4:	jsr 1568a <setVariable>
   147ba:	lea 12(sp),sp
}
   147be:	nop
   147c0:	rts

000147c2 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   147c2:	       subq.l #4,sp
	int re = 0;
   147c4:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   147c6:	       move.l 8(sp),d1
   147ca:	       move.l 16(sp),d0
   147ce:	       cmp.l d1,d0
   147d0:	,----- bne.w 14898 <compareVars+0xd6>
		switch (var1.varType) {
   147d4:	|      move.l 8(sp),d0
   147d8:	|      moveq #9,d1
   147da:	|      cmp.l d0,d1
   147dc:	|  ,-- bcs.w 14880 <compareVars+0xbe>
   147e0:	|  |   add.l d0,d0
   147e2:	|  |   movea.l d0,a0
   147e4:	|  |   adda.l #83952,a0
   147ea:	|  |   move.w (a0),d0
   147ec:	|  |   jmp (147f0 <compareVars+0x2e>,pc,d0.w)
   147f0:	|  |   ori.b #-112,(a4)
   147f4:	|  |   ori.l #5243024,(a0)
   147fa:	|  |   ori.l #7733392,(a0)
   14800:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14806:	|  |   move.l d0,(sp)
			break;
   14808:	+--|-- bra.w 14898 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1480c:	|  |   move.l 12(sp),d1
   14810:	|  |   move.l 20(sp),d0
   14814:	|  |   cmp.l d1,d0
   14816:	|  |   seq d0
   14818:	|  |   neg.b d0
   1481a:	|  |   move.b d0,d0
   1481c:	|  |   andi.l #255,d0
   14822:	|  |   move.l d0,(sp)
			break;
   14824:	+--|-- bra.s 14898 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14826:	|  |   move.l 12(sp),d1
   1482a:	|  |   move.l 20(sp),d0
   1482e:	|  |   cmp.l d1,d0
   14830:	|  |   seq d0
   14832:	|  |   neg.b d0
   14834:	|  |   move.b d0,d0
   14836:	|  |   andi.l #255,d0
   1483c:	|  |   move.l d0,(sp)
			break;
   1483e:	+--|-- bra.s 14898 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14840:	|  |   move.l 20(sp),d1
   14844:	|  |   move.l 12(sp),d0
   14848:	|  |   move.l d1,-(sp)
   1484a:	|  |   move.l d0,-(sp)
   1484c:	|  |   jsr 14244 <strcmp>
   14852:	|  |   addq.l #8,sp
   14854:	|  |   tst.l d0
   14856:	|  |   seq d0
   14858:	|  |   neg.b d0
   1485a:	|  |   move.b d0,d0
   1485c:	|  |   andi.l #255,d0
   14862:	|  |   move.l d0,(sp)
			break;
   14864:	+--|-- bra.s 14898 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14866:	|  |   move.l 12(sp),d1
   1486a:	|  |   move.l 20(sp),d0
   1486e:	|  |   cmp.l d1,d0
   14870:	|  |   seq d0
   14872:	|  |   neg.b d0
   14874:	|  |   move.b d0,d0
   14876:	|  |   andi.l #255,d0
   1487c:	|  |   move.l d0,(sp)
			break;
   1487e:	+--|-- bra.s 14898 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14880:	|  '-> move.l 12(sp),d1
   14884:	|      move.l 20(sp),d0
   14888:	|      cmp.l d1,d0
   1488a:	|      seq d0
   1488c:	|      neg.b d0
   1488e:	|      move.b d0,d0
   14890:	|      andi.l #255,d0
   14896:	|      move.l d0,(sp)
		}
	}
	return re;
   14898:	'----> move.l (sp),d0
}
   1489a:	       addq.l #4,sp
   1489c:	       rts

0001489e <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1489e:	             lea -16(sp),sp
   148a2:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   148a4:	             movea.l 28(sp),a0
   148a8:	             moveq #6,d0
   148aa:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   148ac:	             moveq #12,d0
   148ae:	             move.l d0,12(sp)
   148b2:	             clr.l 8(sp)
   148b6:	             move.l 1d0c6 <SysBase>,d0
   148bc:	             movea.l d0,a6
   148be:	             move.l 12(sp),d0
   148c2:	             move.l 8(sp),d1
   148c6:	             jsr -684(a6)
   148ca:	             move.l d0,4(sp)
   148ce:	             move.l 4(sp),d0
   148d2:	             movea.l 28(sp),a0
   148d6:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   148da:	             movea.l 28(sp),a0
   148de:	             move.l 4(a0),d0
   148e2:	         ,-- bne.s 148ea <copyStack+0x4c>
   148e4:	         |   clr.w d0
   148e6:	,--------|-- bra.w 1496c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   148ea:	|        '-> movea.l 28(sp),a0
   148ee:	|            movea.l 4(a0),a0
   148f2:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   148f4:	|            movea.l 28(sp),a0
   148f8:	|            movea.l 4(a0),a0
   148fc:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14900:	|            movea.l 28(sp),a0
   14904:	|            movea.l 4(a0),a0
   14908:	|            moveq #1,d0
   1490a:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1490e:	|            movea.l 24(sp),a0
   14912:	|            movea.l 4(a0),a0
   14916:	|            move.l (a0),16(sp)

	while (a) {
   1491a:	|     ,----- bra.s 14964 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1491c:	|  ,--|----> movea.l 28(sp),a0
   14920:	|  |  |      move.l 4(a0),d0
   14924:	|  |  |      move.l d0,d1
   14926:	|  |  |      move.l 16(sp),d0
   1492a:	|  |  |      move.l d1,-(sp)
   1492c:	|  |  |      move.l d0,-(sp)
   1492e:	|  |  |      jsr 145d4 <addVarToStack>
   14934:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14936:	|  |  |      movea.l 28(sp),a0
   1493a:	|  |  |      movea.l 4(a0),a0
   1493e:	|  |  |      move.l 4(a0),d0
   14942:	|  |  |  ,-- bne.s 1495a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14944:	|  |  |  |   movea.l 28(sp),a0
   14948:	|  |  |  |   movea.l 4(a0),a1
   1494c:	|  |  |  |   movea.l 28(sp),a0
   14950:	|  |  |  |   movea.l 4(a0),a0
   14954:	|  |  |  |   move.l (a1),d0
   14956:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1495a:	|  |  |  '-> movea.l 16(sp),a0
   1495e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14964:	|  |  '----> tst.l 16(sp)
   14968:	|  '-------- bne.s 1491c <copyStack+0x7e>
	}

	return TRUE;
   1496a:	|            moveq #1,d0
}
   1496c:	'----------> movea.l (sp)+,a6
   1496e:	             lea 16(sp),sp
   14972:	             rts

00014974 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14974:	                lea -20(sp),sp
   14978:	                move.l a6,-(sp)
   1497a:	                move.l 36(sp),d0
   1497e:	                move.w d0,d0
   14980:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14984:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1498a:	                clr.l 16(sp)

    while (*huntVar) {
   1498e:	   ,----------- bra.s 14a0c <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14990:	,--|----------> movea.l 20(sp),a0
   14994:	|  |            movea.l (a0),a0
   14996:	|  |            movea.l 28(sp),a1
   1499a:	|  |            move.l 4(a1),-(sp)
   1499e:	|  |            move.l (a1),-(sp)
   149a0:	|  |            move.l 4(a0),-(sp)
   149a4:	|  |            move.l (a0),-(sp)
   149a6:	|  |            jsr 147c2 <compareVars>
   149ac:	|  |            lea 16(sp),sp
   149b0:	|  |            tst.l d0
   149b2:	|  |  ,-------- beq.s 149fe <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   149b4:	|  |  |         movea.l 20(sp),a0
   149b8:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   149bc:	|  |  |         movea.l 12(sp),a0
   149c0:	|  |  |         move.l 8(a0),d0
   149c4:	|  |  |         movea.l 20(sp),a0
   149c8:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   149ca:	|  |  |         move.l 12(sp),d0
   149ce:	|  |  |         move.l d0,-(sp)
   149d0:	|  |  |         jsr 14fe6 <unlinkVar>
   149d6:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   149d8:	|  |  |         move.l 12(sp),8(sp)
   149de:	|  |  |         move.l 1d0c6 <SysBase>,d0
   149e4:	|  |  |         movea.l d0,a6
   149e6:	|  |  |         movea.l 8(sp),a1
   149ea:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   149ee:	|  |  |         tst.w 6(sp)
   149f2:	|  |  |     ,-- bne.s 149f8 <deleteVarFromStack+0x84>
   149f4:	|  |  |     |   moveq #1,d0
   149f6:	|  |  |  ,--|-- bra.s 14a1a <deleteVarFromStack+0xa6>
            reply++;
   149f8:	|  |  |  |  '-> addq.l #1,16(sp)
   149fc:	|  +--|--|----- bra.s 14a0c <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   149fe:	|  |  '--|----> movea.l 20(sp),a0
   14a02:	|  |     |      move.l (a0),d0
   14a04:	|  |     |      move.l d0,d1
   14a06:	|  |     |      addq.l #8,d1
   14a08:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14a0c:	|  '-----|----> movea.l 20(sp),a0
   14a10:	|        |      move.l (a0),d0
   14a12:	'--------|----- bne.w 14990 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14a16:	         |      move.l 16(sp),d0
}
   14a1a:	         '----> movea.l (sp)+,a6
   14a1c:	                lea 20(sp),sp
   14a20:	                rts

00014a22 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14a22:	       movea.l 4(sp),a0
   14a26:	       move.l 4(a0),d0
   14a2a:	       cmp.l 8(sp),d0
   14a2e:	   ,-- bhi.s 14a34 <fastArrayGetByIndex+0x12>
   14a30:	   |   moveq #0,d0
   14a32:	,--|-- bra.s 14a42 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14a34:	|  '-> movea.l 4(sp),a0
   14a38:	|      move.l (a0),d1
   14a3a:	|      move.l 8(sp),d0
   14a3e:	|      lsl.l #3,d0
   14a40:	|      add.l d1,d0
}
   14a42:	'----> rts

00014a44 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14a44:	                lea -32(sp),sp
   14a48:	                move.l a6,-(sp)
   14a4a:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14a4c:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14a50:	                movea.l 44(sp),a0
   14a54:	                move.l (a0),d0
   14a56:	                moveq #8,d1
   14a58:	                cmp.l d0,d1
   14a5a:	            ,-- beq.s 14a68 <getCostumeFromVar+0x24>
   14a5c:	            |   moveq #9,d1
   14a5e:	            |   cmp.l d0,d1
   14a60:	   ,--------|-- beq.w 14b16 <getCostumeFromVar+0xd2>
   14a64:	,--|--------|-- bra.w 14b20 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14a68:	|  |        '-> moveq #8,d0
   14a6a:	|  |            move.l d0,28(sp)
   14a6e:	|  |            clr.l 24(sp)
   14a72:	|  |            move.l 1d0c6 <SysBase>,d0
   14a78:	|  |            movea.l d0,a6
   14a7a:	|  |            move.l 28(sp),d0
   14a7e:	|  |            move.l 24(sp),d1
   14a82:	|  |            jsr -684(a6)
   14a86:	|  |            move.l d0,20(sp)
   14a8a:	|  |            move.l 20(sp),d0
   14a8e:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14a92:	|  |        ,-- bne.s 14a9a <getCostumeFromVar+0x56>
   14a94:	|  |        |   moveq #0,d0
   14a96:	|  |  ,-----|-- bra.w 14b4a <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14a9a:	|  |  |     '-> movea.l 36(sp),a0
   14a9e:	|  |  |         moveq #1,d1
   14aa0:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14aa4:	|  |  |         moveq #12,d0
   14aa6:	|  |  |         move.l d0,16(sp)
   14aaa:	|  |  |         clr.l 12(sp)
   14aae:	|  |  |         move.l 1d0c6 <SysBase>,d0
   14ab4:	|  |  |         movea.l d0,a6
   14ab6:	|  |  |         move.l 16(sp),d0
   14aba:	|  |  |         move.l 12(sp),d1
   14abe:	|  |  |         jsr -684(a6)
   14ac2:	|  |  |         move.l d0,8(sp)
   14ac6:	|  |  |         move.l 8(sp),d0
   14aca:	|  |  |         movea.l 36(sp),a0
   14ace:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14ad0:	|  |  |         movea.l 36(sp),a0
   14ad4:	|  |  |         move.l (a0),d0
   14ad6:	|  |  |     ,-- bne.s 14adc <getCostumeFromVar+0x98>
   14ad8:	|  |  |     |   moveq #0,d0
   14ada:	|  |  +-----|-- bra.s 14b4a <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14adc:	|  |  |     '-> clr.l 32(sp)
   14ae0:	|  |  |     ,-- bra.s 14b0c <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14ae2:	|  |  |  ,--|-> movea.l 44(sp),a0
   14ae6:	|  |  |  |  |   move.l 4(a0),d0
   14aea:	|  |  |  |  |   movea.l 36(sp),a0
   14aee:	|  |  |  |  |   movea.l (a0),a0
   14af0:	|  |  |  |  |   move.l 32(sp),d1
   14af4:	|  |  |  |  |   add.l d1,d1
   14af6:	|  |  |  |  |   add.l d1,d1
   14af8:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14afc:	|  |  |  |  |   move.l d0,-(sp)
   14afe:	|  |  |  |  |   jsr 9a50 <copyAnim>
   14b04:	|  |  |  |  |   addq.l #4,sp
   14b06:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14b08:	|  |  |  |  |   addq.l #1,32(sp)
   14b0c:	|  |  |  |  '-> moveq #2,d1
   14b0e:	|  |  |  |      cmp.l 32(sp),d1
   14b12:	|  |  |  '----- bge.s 14ae2 <getCostumeFromVar+0x9e>
            }
            break;
   14b14:	|  |  |     ,-- bra.s 14b46 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14b16:	|  '--|-----|-> movea.l 44(sp),a0
   14b1a:	|     |     |   move.l 4(a0),d0
   14b1e:	|     +-----|-- bra.s 14b4a <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14b20:	'-----|-----|-> movea.l 44(sp),a0
   14b24:	      |     |   move.l (a0),d0
   14b26:	      |     |   add.l d0,d0
   14b28:	      |     |   movea.l d0,a1
   14b2a:	      |     |   adda.l d0,a1
   14b2c:	      |     |   lea 1cf96 <typeName>,a0
   14b32:	      |     |   move.l (0,a1,a0.l),d0
   14b36:	      |     |   move.l d0,-(sp)
   14b38:	      |     |   pea 1a5f1 <PutChar+0x22d7>
   14b3e:	      |     |   jsr 17878 <KPrintF>
   14b44:	      |     |   addq.l #8,sp
    }

    return p;
   14b46:	      |     '-> move.l 36(sp),d0
}
   14b4a:	      '-------> movea.l (sp)+,a2
   14b4c:	                movea.l (sp)+,a6
   14b4e:	                lea 32(sp),sp
   14b52:	                rts

00014b54 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14b54:	                lea -96(sp),sp
   14b58:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14b5c:	                move.l 116(sp),-(sp)
   14b60:	                pea 1a629 <PutChar+0x230f>
   14b66:	                jsr 142c4 <joinStrings>
   14b6c:	                addq.l #8,sp
   14b6e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14b72:	            ,-- bne.s 14b7a <getSavedGamesStack+0x26>
   14b74:	            |   clr.w d0
   14b76:	,-----------|-- bra.w 14d8e <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14b7a:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14b7e:	|               move.l #108075,98(sp)
   14b86:	|               moveq #-2,d0
   14b88:	|               move.l d0,94(sp)
   14b8c:	|               move.l 1d0ce <DOSBase>,d0
   14b92:	|               movea.l d0,a6
   14b94:	|               move.l 98(sp),d1
   14b98:	|               move.l 94(sp),d2
   14b9c:	|               jsr -84(a6)
   14ba0:	|               move.l d0,90(sp)
   14ba4:	|               move.l 90(sp),d0
   14ba8:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14bac:	|           ,-- bne.s 14bb4 <getSavedGamesStack+0x60>
   14bae:	|           |   clr.w d0
   14bb0:	+-----------|-- bra.w 14d8e <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14bb4:	|           '-> move.l #260,82(sp)
   14bbc:	|               move.l #65536,78(sp)
   14bc4:	|               move.l 1d0c6 <SysBase>,d0
   14bca:	|               movea.l d0,a6
   14bcc:	|               move.l 82(sp),d0
   14bd0:	|               move.l 78(sp),d1
   14bd4:	|               jsr -684(a6)
   14bd8:	|               move.l d0,74(sp)
   14bdc:	|               move.l 74(sp),d0
   14be0:	|               move.l d0,70(sp)
	if (!fib) {
   14be4:	|           ,-- bne.s 14c02 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14be6:	|           |   move.l 86(sp),22(sp)
   14bec:	|           |   move.l 1d0ce <DOSBase>,d0
   14bf2:	|           |   movea.l d0,a6
   14bf4:	|           |   move.l 22(sp),d1
   14bf8:	|           |   jsr -90(a6)
		return FALSE;
   14bfc:	|           |   clr.w d0
   14bfe:	+-----------|-- bra.w 14d8e <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14c02:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14c06:	|               move.l 86(sp),66(sp)
   14c0c:	|               move.l 70(sp),62(sp)
   14c12:	|               move.l 1d0ce <DOSBase>,d0
   14c18:	|               movea.l d0,a6
   14c1a:	|               move.l 66(sp),d1
   14c1e:	|               move.l 62(sp),d2
   14c22:	|               jsr -102(a6)
   14c26:	|               move.l d0,58(sp)
   14c2a:	|               move.l 58(sp),d0
   14c2e:	|  ,----------- beq.w 14d42 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14c32:	|  |        ,-- bra.w 14d0e <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14c36:	|  |  ,-----|-> move.l 70(sp),d2
   14c3a:	|  |  |     |   addq.l #8,d2
   14c3c:	|  |  |     |   move.l 70(sp),d0
   14c40:	|  |  |     |   addq.l #8,d0
   14c42:	|  |  |     |   move.l d0,-(sp)
   14c44:	|  |  |     |   jsr 14284 <strlen>
   14c4a:	|  |  |     |   addq.l #4,sp
   14c4c:	|  |  |     |   move.l d0,d3
   14c4e:	|  |  |     |   move.l 116(sp),-(sp)
   14c52:	|  |  |     |   jsr 14284 <strlen>
   14c58:	|  |  |     |   addq.l #4,sp
   14c5a:	|  |  |     |   move.l d3,d1
   14c5c:	|  |  |     |   sub.l d0,d1
   14c5e:	|  |  |     |   move.l d2,d0
   14c60:	|  |  |     |   add.l d1,d0
   14c62:	|  |  |     |   move.l 116(sp),-(sp)
   14c66:	|  |  |     |   move.l d0,-(sp)
   14c68:	|  |  |     |   jsr 14244 <strcmp>
   14c6e:	|  |  |     |   addq.l #8,sp
   14c70:	|  |  |     |   tst.l d0
   14c72:	|  |  |     +-- bne.w 14d0e <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14c76:	|  |  |     |   move.l 70(sp),d0
   14c7a:	|  |  |     |   addq.l #8,d0
   14c7c:	|  |  |     |   move.l d0,-(sp)
   14c7e:	|  |  |     |   jsr 14284 <strlen>
   14c84:	|  |  |     |   addq.l #4,sp
   14c86:	|  |  |     |   move.l d0,d2
   14c88:	|  |  |     |   move.l 116(sp),-(sp)
   14c8c:	|  |  |     |   jsr 14284 <strlen>
   14c92:	|  |  |     |   addq.l #4,sp
   14c94:	|  |  |     |   move.l d0,d1
   14c96:	|  |  |     |   move.l d2,d0
   14c98:	|  |  |     |   sub.l d1,d0
   14c9a:	|  |  |     |   movea.l 70(sp),a0
   14c9e:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14ca2:	|  |  |     |   move.l 70(sp),d0
   14ca6:	|  |  |     |   addq.l #8,d0
   14ca8:	|  |  |     |   move.l d0,-(sp)
   14caa:	|  |  |     |   jsr 118 <decodeFilename>
   14cb0:	|  |  |     |   addq.l #4,sp
   14cb2:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14cb6:	|  |  |     |   move.l 42(sp),-(sp)
   14cba:	|  |  |     |   lea 18(sp),a0
   14cbe:	|  |  |     |   move.l a0,-(sp)
   14cc0:	|  |  |     |   jsr 14fba <makeTextVar>
   14cc6:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14cc8:	|  |  |     |   move.l 42(sp),38(sp)
   14cce:	|  |  |     |   move.l 1d0c6 <SysBase>,d0
   14cd4:	|  |  |     |   movea.l d0,a6
   14cd6:	|  |  |     |   movea.l 38(sp),a1
   14cda:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14cde:	|  |  |     |   move.l 112(sp),d0
   14ce2:	|  |  |     |   move.l d0,-(sp)
   14ce4:	|  |  |     |   lea 18(sp),a0
   14ce8:	|  |  |     |   move.l a0,-(sp)
   14cea:	|  |  |     |   jsr 145d4 <addVarToStack>
   14cf0:	|  |  |     |   addq.l #8,sp
   14cf2:	|  |  |     |   tst.w d0
   14cf4:	|  |  |  ,--|-- beq.s 14d46 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14cf6:	|  |  |  |  |   movea.l 112(sp),a0
   14cfa:	|  |  |  |  |   move.l 4(a0),d0
   14cfe:	|  |  |  |  +-- bne.s 14d0e <getSavedGamesStack+0x1ba>
   14d00:	|  |  |  |  |   movea.l 112(sp),a0
   14d04:	|  |  |  |  |   move.l (a0),d0
   14d06:	|  |  |  |  |   movea.l 112(sp),a0
   14d0a:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14d0e:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14d14:	|  |  |  |      move.l 70(sp),50(sp)
   14d1a:	|  |  |  |      move.l 1d0ce <DOSBase>,d0
   14d20:	|  |  |  |      movea.l d0,a6
   14d22:	|  |  |  |      move.l 54(sp),d1
   14d26:	|  |  |  |      move.l 50(sp),d2
   14d2a:	|  |  |  |      jsr -108(a6)
   14d2e:	|  |  |  |      move.l d0,46(sp)
   14d32:	|  |  |  |      move.l 46(sp),d0
   14d36:	|  |  '--|----- bne.w 14c36 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14d3a:	|  |     |      move.w #1,106(sp)
   14d40:	|  |     |  ,-- bra.s 14d48 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14d42:	|  '-----|--|-> nop
   14d44:	|        |  +-- bra.s 14d48 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14d46:	|        '--|-> nop
	FreeVec(fib);
   14d48:	|           '-> move.l 70(sp),34(sp)
   14d4e:	|               move.l 1d0c6 <SysBase>,d0
   14d54:	|               movea.l d0,a6
   14d56:	|               movea.l 34(sp),a1
   14d5a:	|               jsr -690(a6)
	UnLock(dirLock);
   14d5e:	|               move.l 86(sp),30(sp)
   14d64:	|               move.l 1d0ce <DOSBase>,d0
   14d6a:	|               movea.l d0,a6
   14d6c:	|               move.l 30(sp),d1
   14d70:	|               jsr -90(a6)
	FreeVec(pattern);
   14d74:	|               move.l 102(sp),26(sp)
   14d7a:	|               move.l 1d0c6 <SysBase>,d0
   14d80:	|               movea.l d0,a6
   14d82:	|               movea.l 26(sp),a1
   14d86:	|               jsr -690(a6)
	return result;
   14d8a:	|               move.w 106(sp),d0
}
   14d8e:	'-------------> movem.l (sp)+,d2-d3/a6
   14d92:	                lea 96(sp),sp
   14d96:	                rts

00014d98 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14d98:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14d9a:	       movea.l 20(sp),a0
   14d9e:	       move.l (a0),d0
   14da0:	       cmp.l 16(sp),d0
   14da4:	,----- beq.s 14e08 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14da6:	|      move.l 16(sp),d0
   14daa:	|      add.l d0,d0
   14dac:	|      movea.l d0,a1
   14dae:	|      adda.l d0,a1
   14db0:	|      lea 1cf96 <typeName>,a0
   14db6:	|      move.l (0,a1,a0.l),d0
   14dba:	|      move.l d0,-(sp)
   14dbc:	|      pea 1a62d <PutChar+0x2313>
   14dc2:	|      jsr 142c4 <joinStrings>
   14dc8:	|      addq.l #8,sp
   14dca:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14dce:	|      movea.l 20(sp),a0
   14dd2:	|      move.l (a0),d0
   14dd4:	|      add.l d0,d0
   14dd6:	|      movea.l d0,a1
   14dd8:	|      adda.l d0,a1
   14dda:	|      lea 1cf96 <typeName>,a0
   14de0:	|      move.l (0,a1,a0.l),d0
   14de4:	|      move.l d0,-(sp)
   14de6:	|      pea 1a66f <PutChar+0x2355>
   14dec:	|      jsr 142c4 <joinStrings>
   14df2:	|      addq.l #8,sp
   14df4:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14df6:	|      move.l (sp),-(sp)
   14df8:	|      move.l 8(sp),-(sp)
   14dfc:	|      jsr 17878 <KPrintF>
   14e02:	|      addq.l #8,sp

		return FALSE;
   14e04:	|      clr.w d0
   14e06:	|  ,-- bra.s 14e18 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14e08:	'--|-> movea.l 20(sp),a0
   14e0c:	   |   move.l 4(a0),d0
   14e10:	   |   movea.l 12(sp),a0
   14e14:	   |   move.l d0,(a0)
	return TRUE;
   14e16:	   |   moveq #1,d0
}
   14e18:	   '-> addq.l #8,sp
   14e1a:	       rts

00014e1c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14e1c:	move.l 8(sp),-(sp)
   14e20:	jsr 7bae <getNumberedString>
   14e26:	addq.l #4,sp
   14e28:	move.l d0,-(sp)
   14e2a:	move.l 8(sp),-(sp)
   14e2e:	jsr 14fba <makeTextVar>
   14e34:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14e36:	movea.l 4(sp),a0
   14e3a:	move.l 4(a0),d0
   14e3e:	sne d0
   14e40:	neg.b d0
   14e42:	move.b d0,d0
   14e44:	andi.w #255,d0
}
   14e48:	rts

00014e4a <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14e4a:	          subq.l #8,sp
    int size = stackSize(stacky);
   14e4c:	          move.l 16(sp),-(sp)
   14e50:	          jsr 156f8 <stackSize>
   14e56:	          addq.l #4,sp
   14e58:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14e5c:	          move.l 4(sp),-(sp)
   14e60:	          move.l 16(sp),-(sp)
   14e64:	          jsr 14eb4 <makeFastArraySize>
   14e6a:	          addq.l #8,sp
   14e6c:	          tst.w d0
   14e6e:	      ,-- bne.s 14e74 <makeFastArrayFromStack+0x2a>
   14e70:	      |   clr.w d0
   14e72:	,-----|-- bra.s 14eb0 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14e74:	|     '-> movea.l 16(sp),a0
   14e78:	|         move.l (a0),(sp)
    size = 0;
   14e7a:	|         clr.l 4(sp)
    while (allV) {
   14e7e:	|     ,-- bra.s 14eaa <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14e80:	|  ,--|-> movea.l 12(sp),a0
   14e84:	|  |  |   movea.l 4(a0),a0
   14e88:	|  |  |   move.l (a0),d1
   14e8a:	|  |  |   move.l 4(sp),d0
   14e8e:	|  |  |   lsl.l #3,d0
   14e90:	|  |  |   add.l d0,d1
   14e92:	|  |  |   move.l (sp),d0
   14e94:	|  |  |   move.l d1,-(sp)
   14e96:	|  |  |   move.l d0,-(sp)
   14e98:	|  |  |   jsr 15136 <copyMain>
   14e9e:	|  |  |   addq.l #8,sp
        size++;
   14ea0:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14ea4:	|  |  |   movea.l (sp),a0
   14ea6:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14eaa:	|  |  '-> tst.l (sp)
   14eac:	|  '----- bne.s 14e80 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14eae:	|         moveq #1,d0
}
   14eb0:	'-------> addq.l #8,sp
   14eb2:	          rts

00014eb4 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14eb4:	          lea -28(sp),sp
   14eb8:	          move.l a6,-(sp)
    if (size < 0) {
   14eba:	          tst.l 40(sp)
   14ebe:	      ,-- bge.s 14ed4 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14ec0:	      |   pea 1a6b4 <PutChar+0x239a>
   14ec6:	      |   jsr 17878 <KPrintF>
   14ecc:	      |   addq.l #4,sp
		return FALSE;
   14ece:	      |   clr.w d0
   14ed0:	,-----|-- bra.w 14fb2 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14ed4:	|     '-> move.l 36(sp),-(sp)
   14ed8:	|         jsr 14fe6 <unlinkVar>
   14ede:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14ee0:	|         movea.l 36(sp),a0
   14ee4:	|         moveq #10,d0
   14ee6:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14ee8:	|         moveq #12,d0
   14eea:	|         move.l d0,24(sp)
   14eee:	|         clr.l 20(sp)
   14ef2:	|         move.l 1d0c6 <SysBase>,d0
   14ef8:	|         movea.l d0,a6
   14efa:	|         move.l 24(sp),d0
   14efe:	|         move.l 20(sp),d1
   14f02:	|         jsr -684(a6)
   14f06:	|         move.l d0,16(sp)
   14f0a:	|         move.l 16(sp),d0
   14f0e:	|         movea.l 36(sp),a0
   14f12:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14f16:	|         movea.l 36(sp),a0
   14f1a:	|         move.l 4(a0),d0
   14f1e:	|     ,-- bne.s 14f26 <makeFastArraySize+0x72>
   14f20:	|     |   clr.w d0
   14f22:	+-----|-- bra.w 14fb2 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14f26:	|     '-> move.l 40(sp),d0
   14f2a:	|         lsl.l #3,d0
   14f2c:	|         move.l d0,12(sp)
   14f30:	|         clr.l 8(sp)
   14f34:	|         move.l 1d0c6 <SysBase>,d0
   14f3a:	|         movea.l d0,a6
   14f3c:	|         move.l 12(sp),d0
   14f40:	|         move.l 8(sp),d1
   14f44:	|         jsr -684(a6)
   14f48:	|         move.l d0,4(sp)
   14f4c:	|         move.l 4(sp),d0
   14f50:	|         movea.l 36(sp),a0
   14f54:	|         movea.l 4(a0),a0
   14f58:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14f5a:	|         movea.l 36(sp),a0
   14f5e:	|         movea.l 4(a0),a0
   14f62:	|         move.l (a0),d0
   14f64:	|     ,-- bne.s 14f6a <makeFastArraySize+0xb6>
   14f66:	|     |   clr.w d0
   14f68:	+-----|-- bra.s 14fb2 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14f6a:	|     '-> clr.l 28(sp)
   14f6e:	|     ,-- bra.s 14f8a <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14f70:	|  ,--|-> movea.l 36(sp),a0
   14f74:	|  |  |   movea.l 4(a0),a0
   14f78:	|  |  |   move.l (a0),d1
   14f7a:	|  |  |   move.l 28(sp),d0
   14f7e:	|  |  |   lsl.l #3,d0
   14f80:	|  |  |   movea.l d1,a0
   14f82:	|  |  |   adda.l d0,a0
   14f84:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14f86:	|  |  |   addq.l #1,28(sp)
   14f8a:	|  |  '-> move.l 28(sp),d0
   14f8e:	|  |      cmp.l 40(sp),d0
   14f92:	|  '----- blt.s 14f70 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14f94:	|         movea.l 36(sp),a0
   14f98:	|         movea.l 4(a0),a0
   14f9c:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14fa2:	|         movea.l 36(sp),a0
   14fa6:	|         movea.l 4(a0),a0
   14faa:	|         moveq #1,d0
   14fac:	|         move.l d0,8(a0)
    return TRUE;
   14fb0:	|         moveq #1,d0
}
   14fb2:	'-------> movea.l (sp)+,a6
   14fb4:	          lea 28(sp),sp
   14fb8:	          rts

00014fba <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14fba:	move.l 4(sp),-(sp)
   14fbe:	jsr 14fe6 <unlinkVar>
   14fc4:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14fc6:	movea.l 4(sp),a0
   14fca:	moveq #3,d0
   14fcc:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14fce:	move.l 8(sp),-(sp)
   14fd2:	jsr b8 <copyString>
   14fd8:	addq.l #4,sp
   14fda:	movea.l 4(sp),a0
   14fde:	move.l d0,4(a0)
}
   14fe2:	nop
   14fe4:	rts

00014fe6 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14fe6:	                      lea -16(sp),sp
   14fea:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14fec:	                      movea.l 24(sp),a0
   14ff0:	                      move.l (a0),d0
   14ff2:	                      moveq #10,d1
   14ff4:	                      cmp.l d0,d1
   14ff6:	            ,-------- beq.w 150ae <unlinkVar+0xc8>
   14ffa:	            |         moveq #10,d1
   14ffc:	            |         cmp.l d0,d1
   14ffe:	,-----------|-------- bcs.w 15122 <unlinkVar+0x13c>
   15002:	|           |         moveq #8,d1
   15004:	|           |         cmp.l d0,d1
   15006:	|  ,--------|-------- beq.w 1510e <unlinkVar+0x128>
   1500a:	|  |        |         moveq #8,d1
   1500c:	|  |        |         cmp.l d0,d1
   1500e:	+--|--------|-------- bcs.w 15122 <unlinkVar+0x13c>
   15012:	|  |        |         moveq #3,d1
   15014:	|  |        |         cmp.l d0,d1
   15016:	|  |        |     ,-- beq.s 15022 <unlinkVar+0x3c>
   15018:	|  |        |     |   moveq #6,d1
   1501a:	|  |        |     |   cmp.l d0,d1
   1501c:	|  |        |  ,--|-- beq.s 15048 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   1501e:	+--|--------|--|--|-- bra.w 15122 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   15022:	|  |        |  |  '-> movea.l 24(sp),a0
   15026:	|  |        |  |      move.l 4(a0),4(sp)
   1502c:	|  |        |  |      move.l 1d0c6 <SysBase>,d0
   15032:	|  |        |  |      movea.l d0,a6
   15034:	|  |        |  |      movea.l 4(sp),a1
   15038:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   1503c:	|  |        |  |      movea.l 24(sp),a0
   15040:	|  |        |  |      clr.l 4(a0)
		break;
   15044:	|  |  ,-----|--|----- bra.w 1512c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   15048:	|  |  |     |  '----> movea.l 24(sp),a0
   1504c:	|  |  |     |         movea.l 4(a0),a0
   15050:	|  |  |     |         move.l 8(a0),d0
   15054:	|  |  |     |         subq.l #1,d0
   15056:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1505a:	|  |  |     |         movea.l 24(sp),a0
   1505e:	|  |  |     |         movea.l 4(a0),a0
   15062:	|  |  |     |         move.l 8(a0),d0
   15066:	|  |  |  ,--|-------- bgt.w 15126 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   1506a:	|  |  |  |  |     ,-- bra.s 1507e <unlinkVar+0x98>
   1506c:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15070:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15074:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15076:	|  |  |  |  |  |  |   jsr 1571c <trimStack>
   1507c:	|  |  |  |  |  |  |   addq.l #4,sp
   1507e:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15082:	|  |  |  |  |  |      movea.l 4(a0),a0
   15086:	|  |  |  |  |  |      move.l (a0),d0
   15088:	|  |  |  |  |  '----- bne.s 1506c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   1508a:	|  |  |  |  |         movea.l 24(sp),a0
   1508e:	|  |  |  |  |         move.l 4(a0),8(sp)
   15094:	|  |  |  |  |         move.l 1d0c6 <SysBase>,d0
   1509a:	|  |  |  |  |         movea.l d0,a6
   1509c:	|  |  |  |  |         movea.l 8(sp),a1
   150a0:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   150a4:	|  |  |  |  |         movea.l 24(sp),a0
   150a8:	|  |  |  |  |         clr.l 4(a0)
		break;
   150ac:	|  |  |  +--|-------- bra.s 15126 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   150ae:	|  |  |  |  '-------> movea.l 24(sp),a0
   150b2:	|  |  |  |            movea.l 4(a0),a0
   150b6:	|  |  |  |            move.l 8(a0),d0
   150ba:	|  |  |  |            subq.l #1,d0
   150bc:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   150c0:	|  |  |  |            movea.l 24(sp),a0
   150c4:	|  |  |  |            movea.l 4(a0),a0
   150c8:	|  |  |  |            move.l 8(a0),d0
   150cc:	|  |  |  |        ,-- bgt.s 1512a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   150ce:	|  |  |  |        |   movea.l 24(sp),a0
   150d2:	|  |  |  |        |   movea.l 4(a0),a0
   150d6:	|  |  |  |        |   move.l (a0),16(sp)
   150da:	|  |  |  |        |   move.l 1d0c6 <SysBase>,d0
   150e0:	|  |  |  |        |   movea.l d0,a6
   150e2:	|  |  |  |        |   movea.l 16(sp),a1
   150e6:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   150ea:	|  |  |  |        |   movea.l 24(sp),a0
   150ee:	|  |  |  |        |   move.l 4(a0),12(sp)
   150f4:	|  |  |  |        |   move.l 1d0c6 <SysBase>,d0
   150fa:	|  |  |  |        |   movea.l d0,a6
   150fc:	|  |  |  |        |   movea.l 12(sp),a1
   15100:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15104:	|  |  |  |        |   movea.l 24(sp),a0
   15108:	|  |  |  |        |   clr.l 4(a0)
		break;
   1510c:	|  |  |  |        +-- bra.s 1512a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1510e:	|  '--|--|--------|-> movea.l 24(sp),a0
   15112:	|     |  |        |   move.l 4(a0),d0
   15116:	|     |  |        |   move.l d0,-(sp)
   15118:	|     |  |        |   jsr 9e1c <deleteAnim>
   1511e:	|     |  |        |   addq.l #4,sp
		break;
   15120:	|     +--|--------|-- bra.s 1512c <unlinkVar+0x146>
		break;
   15122:	'-----|--|--------|-> nop
   15124:	      +--|--------|-- bra.s 1512c <unlinkVar+0x146>
		break;
   15126:	      |  '--------|-> nop
   15128:	      +-----------|-- bra.s 1512c <unlinkVar+0x146>
		break;
   1512a:	      |           '-> nop
	}
}
   1512c:	      '-------------> nop
   1512e:	                      movea.l (sp)+,a6
   15130:	                      lea 16(sp),sp
   15134:	                      rts

00015136 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15136:	       movea.l 4(sp),a0
   1513a:	       move.l (a0),d0
   1513c:	       movea.l 8(sp),a0
   15140:	       move.l d0,(a0)
	switch (to->varType) {
   15142:	       movea.l 8(sp),a0
   15146:	       move.l (a0),d0
   15148:	       moveq #10,d1
   1514a:	       cmp.l d0,d1
   1514c:	,----- bcs.w 1523e <copyMain+0x108>
   15150:	|      add.l d0,d0
   15152:	|      movea.l d0,a0
   15154:	|      adda.l #86368,a0
   1515a:	|      move.w (a0),d0
   1515c:	|      jmp (15160 <copyMain+0x2a>,pc,d0.w)
   15160:	|      .short 0x00da
   15162:	|      ori.b #22,(a6)
   15166:	|      ori.w #22,(a4)
   1516a:	|      ori.b #-126,(a6)
   1516e:	|      ori.b #-68,(a6)
   15172:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   1517a:	|      move.l 4(a0),d0
   1517e:	|      movea.l 8(sp),a0
   15182:	|      move.l d0,4(a0)
		return TRUE;
   15186:	|      moveq #1,d0
   15188:	|  ,-- bra.w 15250 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   1518c:	|  |   movea.l 4(sp),a0
   15190:	|  |   move.l 4(a0),d0
   15194:	|  |   movea.l 8(sp),a0
   15198:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   1519c:	|  |   movea.l 8(sp),a0
   151a0:	|  |   movea.l 4(a0),a0
   151a4:	|  |   move.l 8(a0),d0
   151a8:	|  |   addq.l #1,d0
   151aa:	|  |   move.l d0,8(a0)
		return TRUE;
   151ae:	|  |   moveq #1,d0
   151b0:	|  +-- bra.w 15250 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   151b4:	|  |   movea.l 4(sp),a0
   151b8:	|  |   move.l 4(a0),d0
   151bc:	|  |   move.l d0,-(sp)
   151be:	|  |   jsr b8 <copyString>
   151c4:	|  |   addq.l #4,sp
   151c6:	|  |   movea.l 8(sp),a0
   151ca:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   151ce:	|  |   movea.l 8(sp),a0
   151d2:	|  |   move.l 4(a0),d0
   151d6:	|  |   sne d0
   151d8:	|  |   neg.b d0
   151da:	|  |   move.b d0,d0
   151dc:	|  |   andi.w #255,d0
   151e0:	|  +-- bra.s 15250 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   151e2:	|  |   movea.l 4(sp),a0
   151e6:	|  |   move.l 4(a0),d0
   151ea:	|  |   movea.l 8(sp),a0
   151ee:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   151f2:	|  |   movea.l 8(sp),a0
   151f6:	|  |   movea.l 4(a0),a0
   151fa:	|  |   move.l 8(a0),d0
   151fe:	|  |   addq.l #1,d0
   15200:	|  |   move.l d0,8(a0)
		return TRUE;
   15204:	|  |   moveq #1,d0
   15206:	|  +-- bra.s 15250 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15208:	|  |   movea.l 4(sp),a0
   1520c:	|  |   move.l 4(a0),d0
   15210:	|  |   movea.l 8(sp),a0
   15214:	|  |   move.l d0,4(a0)
		return TRUE;
   15218:	|  |   moveq #1,d0
   1521a:	|  +-- bra.s 15250 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   1521c:	|  |   movea.l 4(sp),a0
   15220:	|  |   move.l 4(a0),d0
   15224:	|  |   move.l d0,-(sp)
   15226:	|  |   jsr 9a50 <copyAnim>
   1522c:	|  |   addq.l #4,sp
   1522e:	|  |   movea.l 8(sp),a0
   15232:	|  |   move.l d0,4(a0)
		return TRUE;
   15236:	|  |   moveq #1,d0
   15238:	|  +-- bra.s 15250 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   1523a:	|  |   moveq #1,d0
   1523c:	|  +-- bra.s 15250 <copyMain+0x11a>

		default:
		break;
   1523e:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15240:	   |   pea 1a705 <PutChar+0x23eb>
   15246:	   |   jsr 17878 <KPrintF>
   1524c:	   |   addq.l #4,sp
	return FALSE;
   1524e:	   |   clr.w d0
}
   15250:	   '-> rts

00015252 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15252:	move.l 8(sp),-(sp)
   15256:	jsr 14fe6 <unlinkVar>
   1525c:	addq.l #4,sp
	return copyMain(from, to);
   1525e:	move.l 8(sp),-(sp)
   15262:	move.l 8(sp),-(sp)
   15266:	jsr 15136 <copyMain>
   1526c:	addq.l #8,sp
}
   1526e:	rts

00015270 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15270:	       movea.l 4(sp),a0
   15274:	       move.l (a0),d0
   15276:	       moveq #8,d1
   15278:	       cmp.l d0,d1
   1527a:	   ,-- bne.s 15290 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   1527c:	   |   movea.l 4(sp),a0
   15280:	   |   move.l 4(a0),d0
   15284:	   |   move.l d0,-(sp)
   15286:	   |   jsr 9a50 <copyAnim>
   1528c:	   |   addq.l #4,sp
   1528e:	,--|-- bra.s 152d6 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15290:	|  '-> movea.l 4(sp),a0
   15294:	|      move.l (a0),d0
   15296:	|      moveq #1,d1
   15298:	|      cmp.l d0,d1
   1529a:	|  ,-- bne.s 152ae <getAnimationFromVar+0x3e>
   1529c:	|  |   movea.l 4(sp),a0
   152a0:	|  |   move.l 4(a0),d0
   152a4:	|  +-- bne.s 152ae <getAnimationFromVar+0x3e>
		return makeNullAnim();
   152a6:	|  |   jsr b282 <makeNullAnim>
   152ac:	+--|-- bra.s 152d6 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   152ae:	|  '-> movea.l 4(sp),a0
   152b2:	|      move.l (a0),d0
   152b4:	|      add.l d0,d0
   152b6:	|      movea.l d0,a1
   152b8:	|      adda.l d0,a1
   152ba:	|      lea 1cf96 <typeName>,a0
   152c0:	|      move.l (0,a1,a0.l),d0
   152c4:	|      move.l d0,-(sp)
   152c6:	|      pea 1a5f1 <PutChar+0x22d7>
   152cc:	|      jsr 17878 <KPrintF>
   152d2:	|      addq.l #8,sp
	return NULL;
   152d4:	|      moveq #0,d0
}
   152d6:	'----> rts

000152d8 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   152d8:	       movea.l 4(sp),a0
   152dc:	       move.l (a0),d0
   152de:	       moveq #10,d1
   152e0:	       cmp.l d0,d1
   152e2:	,----- bcs.w 15368 <getBoolean+0x90>
   152e6:	|      add.l d0,d0
   152e8:	|      movea.l d0,a0
   152ea:	|      adda.l #86774,a0
   152f0:	|      move.w (a0),d0
   152f2:	|      jmp (152f6 <getBoolean+0x1e>,pc,d0.w)
   152f6:	|      ori.b #26,(a6)
   152fa:	|      ori.w #68,(114,a2,d0.w)
   15300:	|      ori.w #46,(114,a2,d0.w)
   15306:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   1530c:	|      clr.w d0
   1530e:	|  ,-- bra.s 1536c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15310:	|  |   movea.l 4(sp),a0
   15314:	|  |   move.l 4(a0),d0
   15318:	|  |   sne d0
   1531a:	|  |   neg.b d0
   1531c:	|  |   move.b d0,d0
   1531e:	|  |   andi.w #255,d0
   15322:	|  +-- bra.s 1536c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   15324:	|  |   movea.l 4(sp),a0
   15328:	|  |   movea.l 4(a0),a0
   1532c:	|  |   move.l (a0),d0
   1532e:	|  |   sne d0
   15330:	|  |   neg.b d0
   15332:	|  |   move.b d0,d0
   15334:	|  |   andi.w #255,d0
   15338:	|  +-- bra.s 1536c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   1533a:	|  |   movea.l 4(sp),a0
   1533e:	|  |   movea.l 4(a0),a0
   15342:	|  |   move.b (a0),d0
   15344:	|  |   sne d0
   15346:	|  |   neg.b d0
   15348:	|  |   move.b d0,d0
   1534a:	|  |   andi.w #255,d0
   1534e:	|  +-- bra.s 1536c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15350:	|  |   movea.l 4(sp),a0
   15354:	|  |   movea.l 4(a0),a0
   15358:	|  |   move.l 4(a0),d0
   1535c:	|  |   sne d0
   1535e:	|  |   neg.b d0
   15360:	|  |   move.b d0,d0
   15362:	|  |   andi.w #255,d0
   15366:	|  +-- bra.s 1536c <getBoolean+0x94>

		default:
		break;
   15368:	'--|-> nop
	}
	return TRUE;
   1536a:	   |   moveq #1,d0
}
   1536c:	   '-> rts

0001536e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   1536e:	      ,----------> lea -76(sp),sp
   15372:	      |            move.l a6,-(sp)
	switch (from->varType) {
   15374:	      |            movea.l 84(sp),a0
   15378:	      |            move.l (a0),d0
   1537a:	      |            moveq #10,d1
   1537c:	      |            cmp.l d0,d1
   1537e:	,-----|----------- bcs.w 1561c <getTextFromAnyVar+0x2ae>
   15382:	|     |            add.l d0,d0
   15384:	|     |            movea.l d0,a0
   15386:	|     |            adda.l #86930,a0
   1538c:	|     |            move.w (a0),d0
   1538e:	|     |            jmp (15392 <getTextFromAnyVar+0x24>,pc,d0.w)
   15392:	|     |            .short 0x028a
   15394:	|     |            bset d0,(a0)+
   15396:	|     |            .short 0x028a
   15398:	|     |            ori.b #-118,(a6)
   1539c:	|     |            andi.b #8,ccr
   153a0:	|     |            andi.w #650,-(a0)
   153a4:	|     |            .short 0x028a
   153a6:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   153ac:	|     |            move.l 4(a0),d0
   153b0:	|     |            move.l d0,-(sp)
   153b2:	|     |            jsr b8 <copyString>
   153b8:	|     |            addq.l #4,sp
   153ba:	|  ,--|----------- bra.w 1563e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   153be:	|  |  |            pea 1a718 <PutChar+0x23fe>
   153c4:	|  |  |            jsr b8 <copyString>
   153ca:	|  |  |            addq.l #4,sp
   153cc:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   153d0:	|  |  |            clr.l 72(sp)
   153d4:	|  |  |     ,----- bra.w 1547e <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   153d8:	|  |  |  ,--|----> pea 1a71e <PutChar+0x2404>
   153de:	|  |  |  |  |      move.l 80(sp),-(sp)
   153e2:	|  |  |  |  |      jsr 142c4 <joinStrings>
   153e8:	|  |  |  |  |      addq.l #8,sp
   153ea:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   153ee:	|  |  |  |  |  ,-- bne.s 153f6 <getTextFromAnyVar+0x88>
   153f0:	|  |  |  |  |  |   moveq #0,d0
   153f2:	|  +--|--|--|--|-- bra.w 1563e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   153f6:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   153fc:	|  |  |  |  |      move.l 1d0c6 <SysBase>,d0
   15402:	|  |  |  |  |      movea.l d0,a6
   15404:	|  |  |  |  |      movea.l 56(sp),a1
   15408:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   1540c:	|  |  |  |  |      movea.l 84(sp),a0
   15410:	|  |  |  |  |      movea.l 4(a0),a0
   15414:	|  |  |  |  |      move.l (a0),d1
   15416:	|  |  |  |  |      move.l 72(sp),d0
   1541a:	|  |  |  |  |      lsl.l #3,d0
   1541c:	|  |  |  |  |      add.l d1,d0
   1541e:	|  |  |  |  |      move.l d0,-(sp)
   15420:	|  |  +--|--|----- jsr 1536e <getTextFromAnyVar>(pc)
   15424:	|  |  |  |  |      addq.l #4,sp
   15426:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   1542a:	|  |  |  |  |      move.l 52(sp),-(sp)
   1542e:	|  |  |  |  |      move.l 64(sp),-(sp)
   15432:	|  |  |  |  |      jsr 142c4 <joinStrings>
   15438:	|  |  |  |  |      addq.l #8,sp
   1543a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1543e:	|  |  |  |  |  ,-- bne.s 15446 <getTextFromAnyVar+0xd8>
   15440:	|  |  |  |  |  |   moveq #0,d0
   15442:	|  +--|--|--|--|-- bra.w 1563e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15446:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   1544c:	|  |  |  |  |      move.l 1d0c6 <SysBase>,d0
   15452:	|  |  |  |  |      movea.l d0,a6
   15454:	|  |  |  |  |      movea.l 48(sp),a1
   15458:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1545c:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15460:	|  |  |  |  |      move.l 60(sp),44(sp)
   15466:	|  |  |  |  |      move.l 1d0c6 <SysBase>,d0
   1546c:	|  |  |  |  |      movea.l d0,a6
   1546e:	|  |  |  |  |      movea.l 44(sp),a1
   15472:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   15476:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1547a:	|  |  |  |  |      addq.l #1,72(sp)
   1547e:	|  |  |  |  '----> movea.l 84(sp),a0
   15482:	|  |  |  |         movea.l 4(a0),a0
   15486:	|  |  |  |         move.l 4(a0),d0
   1548a:	|  |  |  |         cmp.l 72(sp),d0
   1548e:	|  |  |  '-------- bgt.w 153d8 <getTextFromAnyVar+0x6a>
			}
			return builder;
   15492:	|  |  |            move.l 76(sp),d0
   15496:	|  +--|----------- bra.w 1563e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1549a:	|  |  |            pea 1a720 <PutChar+0x2406>
   154a0:	|  |  |            jsr b8 <copyString>
   154a6:	|  |  |            addq.l #4,sp
   154a8:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   154ac:	|  |  |            movea.l 84(sp),a0
   154b0:	|  |  |            movea.l 4(a0),a0
   154b4:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   154b8:	|  |  |     ,----- bra.w 1555a <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   154bc:	|  |  |  ,--|----> pea 1a71e <PutChar+0x2404>
   154c2:	|  |  |  |  |      move.l 72(sp),-(sp)
   154c6:	|  |  |  |  |      jsr 142c4 <joinStrings>
   154cc:	|  |  |  |  |      addq.l #8,sp
   154ce:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   154d2:	|  |  |  |  |  ,-- bne.s 154da <getTextFromAnyVar+0x16c>
   154d4:	|  |  |  |  |  |   moveq #0,d0
   154d6:	|  +--|--|--|--|-- bra.w 1563e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   154da:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   154e0:	|  |  |  |  |      move.l 1d0c6 <SysBase>,d0
   154e6:	|  |  |  |  |      movea.l d0,a6
   154e8:	|  |  |  |  |      movea.l 32(sp),a1
   154ec:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   154f0:	|  |  |  |  |      move.l 64(sp),d0
   154f4:	|  |  |  |  |      move.l d0,-(sp)
   154f6:	|  |  '--|--|----- jsr 1536e <getTextFromAnyVar>(pc)
   154fa:	|  |     |  |      addq.l #4,sp
   154fc:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   15500:	|  |     |  |      move.l 28(sp),-(sp)
   15504:	|  |     |  |      move.l 40(sp),-(sp)
   15508:	|  |     |  |      jsr 142c4 <joinStrings>
   1550e:	|  |     |  |      addq.l #8,sp
   15510:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15514:	|  |     |  |  ,-- bne.s 1551c <getTextFromAnyVar+0x1ae>
   15516:	|  |     |  |  |   moveq #0,d0
   15518:	|  +-----|--|--|-- bra.w 1563e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1551c:	|  |     |  |  '-> move.l 28(sp),24(sp)
   15522:	|  |     |  |      move.l 1d0c6 <SysBase>,d0
   15528:	|  |     |  |      movea.l d0,a6
   1552a:	|  |     |  |      movea.l 24(sp),a1
   1552e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15532:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   15536:	|  |     |  |      move.l 36(sp),20(sp)
   1553c:	|  |     |  |      move.l 1d0c6 <SysBase>,d0
   15542:	|  |     |  |      movea.l d0,a6
   15544:	|  |     |  |      movea.l 20(sp),a1
   15548:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1554c:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15550:	|  |     |  |      movea.l 64(sp),a0
   15554:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1555a:	|  |     |  '----> tst.l 64(sp)
   1555e:	|  |     '-------- bne.w 154bc <getTextFromAnyVar+0x14e>
			}
			return builder;
   15562:	|  |               move.l 68(sp),d0
   15566:	|  +-------------- bra.w 1563e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1556a:	|  |               moveq #10,d0
   1556c:	|  |               move.l d0,16(sp)
   15570:	|  |               clr.l 12(sp)
   15574:	|  |               move.l 1d0c6 <SysBase>,d0
   1557a:	|  |               movea.l d0,a6
   1557c:	|  |               move.l 16(sp),d0
   15580:	|  |               move.l 12(sp),d1
   15584:	|  |               jsr -684(a6)
   15588:	|  |               move.l d0,8(sp)
   1558c:	|  |               move.l 8(sp),d0
   15590:	|  |               move.l d0,4(sp)
			if (! buff) {
   15594:	|  |           ,-- bne.s 155aa <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15596:	|  |           |   pea 1a727 <PutChar+0x240d>
   1559c:	|  |           |   jsr 17878 <KPrintF>
   155a2:	|  |           |   addq.l #4,sp
				return NULL;
   155a4:	|  |           |   moveq #0,d0
   155a6:	|  +-----------|-- bra.w 1563e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   155aa:	|  |           '-> movea.l 84(sp),a0
   155ae:	|  |               move.l 4(a0),d0
   155b2:	|  |               move.l d0,-(sp)
   155b4:	|  |               pea 1a751 <PutChar+0x2437>
   155ba:	|  |               move.l 12(sp),-(sp)
   155be:	|  |               jsr 145a2 <sprintf>
   155c4:	|  |               lea 12(sp),sp
			return buff;
   155c8:	|  |               move.l 4(sp),d0
   155cc:	|  +-------------- bra.s 1563e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   155ce:	|  |               movea.l 84(sp),a0
   155d2:	|  |               move.l 4(a0),d0
   155d6:	|  |               move.l d0,-(sp)
   155d8:	|  |               jsr 4f1e <resourceNameFromNum>
   155de:	|  |               addq.l #4,sp
   155e0:	|  |               move.l d0,-(sp)
   155e2:	|  |               pea 1908e <PutChar+0xd74>
   155e8:	|  |               jsr 142c4 <joinStrings>
   155ee:	|  |               addq.l #8,sp
   155f0:	|  +-------------- bra.s 1563e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   155f2:	|  |               movea.l 84(sp),a0
   155f6:	|  |               move.l 4(a0),d0
   155fa:	|  |               move.l d0,-(sp)
   155fc:	|  |               jsr daac <findObjectType>
   15602:	|  |               addq.l #4,sp
   15604:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15608:	+--|-------------- beq.s 1561c <getTextFromAnyVar+0x2ae>
   1560a:	|  |               movea.l 40(sp),a0
   1560e:	|  |               move.l (a0),d0
   15610:	|  |               move.l d0,-(sp)
   15612:	|  |               jsr b8 <copyString>
   15618:	|  |               addq.l #4,sp
   1561a:	|  +-------------- bra.s 1563e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1561c:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1561e:	   |               movea.l 84(sp),a0
   15622:	   |               move.l (a0),d0
   15624:	   |               add.l d0,d0
   15626:	   |               movea.l d0,a1
   15628:	   |               adda.l d0,a1
   1562a:	   |               lea 1cf96 <typeName>,a0
   15630:	   |               move.l (0,a1,a0.l),d0
   15634:	   |               move.l d0,-(sp)
   15636:	   |               jsr b8 <copyString>
   1563c:	   |               addq.l #4,sp
}
   1563e:	   '-------------> movea.l (sp)+,a6
   15640:	                   lea 76(sp),sp
   15644:	                   rts

00015646 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15646:	move.l 4(sp),-(sp)
   1564a:	jsr 14fe6 <unlinkVar>
   15650:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15652:	movea.l 4(sp),a0
   15656:	moveq #8,d0
   15658:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1565a:	movea.l 4(sp),a0
   1565e:	move.l 8(sp),4(a0)
}
   15664:	nop
   15666:	rts

00015668 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15668:	move.l 4(sp),-(sp)
   1566c:	jsr 14fe6 <unlinkVar>
   15672:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15674:	movea.l 4(sp),a0
   15678:	moveq #9,d0
   1567a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1567c:	movea.l 4(sp),a0
   15680:	move.l 8(sp),4(a0)
}
   15686:	nop
   15688:	rts

0001568a <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   1568a:	move.l 4(sp),-(sp)
   1568e:	jsr 14fe6 <unlinkVar>
   15694:	addq.l #4,sp
   15696:	movea.l 4(sp),a0
   1569a:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   1569e:	movea.l 4(sp),a0
   156a2:	move.l 12(sp),4(a0)
   156a8:	nop
   156aa:	rts

000156ac <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   156ac:	      ,-- bra.s 156be <stackGetByIndex+0x12>
        vS = vS->next;
   156ae:	,-----|-> movea.l 4(sp),a0
   156b2:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   156b8:	|     +-- bne.s 156be <stackGetByIndex+0x12>
            return NULL;
   156ba:	|     |   moveq #0,d0
   156bc:	|  ,--|-- bra.s 156d2 <stackGetByIndex+0x26>
    while (theIndex--) {
   156be:	|  |  '-> move.l 8(sp),d0
   156c2:	|  |      move.l d0,d1
   156c4:	|  |      subq.l #1,d1
   156c6:	|  |      move.l d1,8(sp)
   156ca:	|  |      tst.l d0
   156cc:	'--|----- bne.s 156ae <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   156ce:	   |      move.l 4(sp),d0
}
   156d2:	   '----> rts

000156d4 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   156d4:	          tst.l 4(sp)
   156d8:	      ,-- bne.s 156e8 <stackFindLast+0x14>
		return NULL;
   156da:	      |   moveq #0,d0
   156dc:	,-----|-- bra.s 156f6 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   156de:	|  ,--|-> movea.l 4(sp),a0
   156e2:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   156e8:	|  |  '-> movea.l 4(sp),a0
   156ec:	|  |      move.l 8(a0),d0
   156f0:	|  '----- bne.s 156de <stackFindLast+0xa>

	return hunt;
   156f2:	|         move.l 4(sp),d0
}
   156f6:	'-------> rts

000156f8 <stackSize>:

int stackSize (const struct stackHandler * me) {
   156f8:	       subq.l #8,sp
	int r = 0;
   156fa:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   156fe:	       movea.l 12(sp),a0
   15702:	       move.l (a0),(sp)
	while (a) {
   15704:	   ,-- bra.s 15710 <stackSize+0x18>
		r ++;
   15706:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   1570a:	|  |   movea.l (sp),a0
   1570c:	|  |   move.l 8(a0),(sp)
	while (a) {
   15710:	|  '-> tst.l (sp)
   15712:	'----- bne.s 15706 <stackSize+0xe>
	}
	return r;
   15714:	       move.l 4(sp),d0
}
   15718:	       addq.l #8,sp
   1571a:	       rts

0001571c <trimStack>:

void trimStack (struct variableStack ** stack) {
   1571c:	subq.l #8,sp
   1571e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15720:	movea.l 16(sp),a0
   15724:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15728:	movea.l 16(sp),a0
   1572c:	movea.l (a0),a0
   1572e:	move.l 8(a0),d0
   15732:	movea.l 16(sp),a0
   15736:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15738:	move.l 8(sp),d0
   1573c:	move.l d0,-(sp)
   1573e:	jsr 14fe6 <unlinkVar>
   15744:	addq.l #4,sp
	FreeVec(killMe);
   15746:	move.l 8(sp),4(sp)
   1574c:	move.l 1d0c6 <SysBase>,d0
   15752:	movea.l d0,a6
   15754:	movea.l 4(sp),a1
   15758:	jsr -690(a6)
   1575c:	nop
   1575e:	movea.l (sp)+,a6
   15760:	addq.l #8,sp
   15762:	rts

00015764 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15764:	       lea -52(sp),sp
   15768:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1576a:	       pea 1a754 <PutChar+0x243a>
   15770:	       jsr 17878 <KPrintF>
   15776:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15778:	       moveq #68,d0
   1577a:	       move.l d0,52(sp)
   1577e:	       clr.l 48(sp)
   15782:	       move.l 1d0c6 <SysBase>,d0
   15788:	       movea.l d0,a6
   1578a:	       move.l 52(sp),d0
   1578e:	       move.l 48(sp),d1
   15792:	       jsr -684(a6)
   15796:	       move.l d0,44(sp)
   1579a:	       move.l 44(sp),d0
   1579e:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   157a2:	   ,-- bne.s 157aa <freeze+0x46>
   157a4:	   |   clr.w d0
   157a6:	,--|-- bra.w 1593c <freeze+0x1d8>

	CstFreeze();
   157aa:	|  '-> jsr 1cca <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   157b0:	|      move.l 1d15e <sceneWidth>,d0
   157b6:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   157ba:	|      move.l 1d162 <sceneHeight>,d0
   157c0:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   157c4:	|      move.l 1d15e <sceneWidth>,d0
   157ca:	|      movea.l 40(sp),a0
   157ce:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   157d2:	|      move.l 1d162 <sceneHeight>,d0
   157d8:	|      movea.l 40(sp),a0
   157dc:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   157e0:	|      move.l 1d17c <cameraX>,d0
   157e6:	|      movea.l 40(sp),a0
   157ea:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   157ee:	|      move.l 1d180 <cameraY>,d0
   157f4:	|      movea.l 40(sp),a0
   157f8:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   157fc:	|      move.l 1ca58 <cameraZoom>,d0
   15802:	|      movea.l 40(sp),a0
   15806:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1580a:	|      move.w #1,1d16a <backdropExists>

	newFreezer -> allPeople = allPeople;
   15812:	|      move.l 1d126 <allPeople>,d0
   15818:	|      movea.l 40(sp),a0
   1581c:	|      move.l d0,(a0)
	allPeople = NULL;
   1581e:	|      clr.l 1d126 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15824:	|      moveq #42,d0
   15826:	|      move.l d0,28(sp)
   1582a:	|      clr.l 24(sp)
   1582e:	|      move.l 1d0c6 <SysBase>,d0
   15834:	|      movea.l d0,a6
   15836:	|      move.l 28(sp),d0
   1583a:	|      move.l 24(sp),d1
   1583e:	|      jsr -684(a6)
   15842:	|      move.l d0,20(sp)
   15846:	|      move.l 20(sp),d0
   1584a:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1584e:	|  ,-- bne.s 15856 <freeze+0xf2>
   15850:	|  |   clr.w d0
   15852:	+--|-- bra.w 1593c <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15856:	|  '-> move.l 1d1d2 <allScreenRegions>,d0
   1585c:	|      movea.l 40(sp),a0
   15860:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15864:	|      clr.l 1d1d2 <allScreenRegions>
	overRegion = NULL;
   1586a:	|      clr.l 1d1d6 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15870:	|      move.l 1cfc0 <mouseCursorAnim>,d0
   15876:	|      movea.l 40(sp),a0
   1587a:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1587e:	|      move.l 1cfc4 <mouseCursorFrameNum>,d0
   15884:	|      movea.l 40(sp),a0
   15888:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1588c:	|      jsr b282 <makeNullAnim>
   15892:	|      move.l d0,1cfc0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15898:	|      clr.l 1cfc4 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1589e:	|      move.l 1d122 <zBuffer>,d0
   158a4:	|      movea.l 40(sp),a0
   158a8:	|      move.l d0,60(a0)
	zBuffer = NULL;
   158ac:	|      clr.l 1d122 <zBuffer>

	newFreezer -> speech = speech;
   158b2:	|      move.l 1d016 <speech>,d0
   158b8:	|      movea.l 40(sp),a0
   158bc:	|      move.l d0,20(a0)
	initSpeech ();
   158c0:	|      jsr 4414 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   158c6:	|      move.l 1ca36 <currentEvents>,d0
   158cc:	|      movea.l 40(sp),a0
   158d0:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   158d4:	|      moveq #28,d0
   158d6:	|      move.l d0,12(sp)
   158da:	|      clr.l 8(sp)
   158de:	|      move.l 1d0c6 <SysBase>,d0
   158e4:	|      movea.l d0,a6
   158e6:	|      move.l 12(sp),d0
   158ea:	|      move.l 8(sp),d1
   158ee:	|      jsr -684(a6)
   158f2:	|      move.l d0,4(sp)
   158f6:	|      move.l 4(sp),d0
   158fa:	|      move.l d0,1ca36 <currentEvents>
	if (!currentEvents) return FALSE;
   15900:	|      move.l 1ca36 <currentEvents>,d0
   15906:	|  ,-- bne.s 1590c <freeze+0x1a8>
   15908:	|  |   clr.w d0
   1590a:	+--|-- bra.s 1593c <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   1590c:	|  '-> move.l 1ca36 <currentEvents>,d0
   15912:	|      pea 1c <_start+0x1c>
   15916:	|      clr.l -(sp)
   15918:	|      move.l d0,-(sp)
   1591a:	|      jsr 177fc <memset>
   15920:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15924:	|      move.l 1d1b6 <frozenStuff>,d0
   1592a:	|      movea.l 40(sp),a0
   1592e:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15932:	|      move.l 40(sp),1d1b6 <frozenStuff>

	return TRUE;
   1593a:	|      moveq #1,d0
}
   1593c:	'----> movea.l (sp)+,a6
   1593e:	       lea 52(sp),sp
   15942:	       rts

00015944 <howFrozen>:

int howFrozen () {
   15944:	       subq.l #8,sp
	int a = 0;
   15946:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1594a:	       move.l 1d1b6 <frozenStuff>,(sp)
	while (f) {
   15950:	   ,-- bra.s 1595c <howFrozen+0x18>
		a ++;
   15952:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15956:	|  |   movea.l (sp),a0
   15958:	|  |   move.l 64(a0),(sp)
	while (f) {
   1595c:	|  '-> tst.l (sp)
   1595e:	'----- bne.s 15952 <howFrozen+0xe>
	}
	return a;
   15960:	       move.l 4(sp),d0
}
   15964:	       addq.l #8,sp
   15966:	       rts

00015968 <unfreeze>:

void unfreeze () {
   15968:	       lea -16(sp),sp
   1596c:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1596e:	       move.l 1d1b6 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15976:	       move.l 1d1b6 <frozenStuff>,d0
   1597c:	,----- beq.w 15bb4 <unfreeze+0x24c>

	CstUnfreeze();
   15980:	|      jsr 4080 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15986:	|      movea.l 1d1b6 <frozenStuff>,a0
   1598c:	|      move.l 48(a0),d0
   15990:	|      move.l d0,1d15e <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15996:	|      movea.l 1d1b6 <frozenStuff>,a0
   1599c:	|      move.l 52(a0),d0
   159a0:	|      move.l d0,1d162 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   159a6:	|      movea.l 1d1b6 <frozenStuff>,a0
   159ac:	|      move.l 40(a0),d0
   159b0:	|      move.l d0,1d17c <cameraX>
	cameraY = frozenStuff -> cameraY;
   159b6:	|      movea.l 1d1b6 <frozenStuff>,a0
   159bc:	|      move.l 44(a0),d0
   159c0:	|      move.l d0,1d180 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   159c6:	|      move.l 1d082 <input+0xa>,d0
   159cc:	|      move.l d0,-(sp)
   159ce:	|      jsr 17caa <__floatsisf>
   159d4:	|      addq.l #4,sp
   159d6:	|      move.l d0,d1
   159d8:	|      move.l 1ca58 <cameraZoom>,d0
   159de:	|      move.l d0,-(sp)
   159e0:	|      move.l d1,-(sp)
   159e2:	|      jsr 17d5c <__mulsf3>
   159e8:	|      addq.l #8,sp
   159ea:	|      move.l d0,-(sp)
   159ec:	|      jsr 17c42 <__fixsfsi>
   159f2:	|      addq.l #4,sp
   159f4:	|      move.l d0,1d082 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   159fa:	|      move.l 1d086 <input+0xe>,d0
   15a00:	|      move.l d0,-(sp)
   15a02:	|      jsr 17caa <__floatsisf>
   15a08:	|      addq.l #4,sp
   15a0a:	|      move.l d0,d1
   15a0c:	|      move.l 1ca58 <cameraZoom>,d0
   15a12:	|      move.l d0,-(sp)
   15a14:	|      move.l d1,-(sp)
   15a16:	|      jsr 17d5c <__mulsf3>
   15a1c:	|      addq.l #8,sp
   15a1e:	|      move.l d0,-(sp)
   15a20:	|      jsr 17c42 <__fixsfsi>
   15a26:	|      addq.l #4,sp
   15a28:	|      move.l d0,1d086 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15a2e:	|      movea.l 1d1b6 <frozenStuff>,a0
   15a34:	|      move.l 56(a0),d0
   15a38:	|      move.l d0,1ca58 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15a3e:	|      move.l 1d082 <input+0xa>,d0
   15a44:	|      move.l d0,-(sp)
   15a46:	|      jsr 17caa <__floatsisf>
   15a4c:	|      addq.l #4,sp
   15a4e:	|      move.l d0,d1
   15a50:	|      move.l 1ca58 <cameraZoom>,d0
   15a56:	|      move.l d0,-(sp)
   15a58:	|      move.l d1,-(sp)
   15a5a:	|      jsr 17b60 <__divsf3>
   15a60:	|      addq.l #8,sp
   15a62:	|      move.l d0,-(sp)
   15a64:	|      jsr 17c42 <__fixsfsi>
   15a6a:	|      addq.l #4,sp
   15a6c:	|      move.l d0,1d082 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15a72:	|      move.l 1d086 <input+0xe>,d0
   15a78:	|      move.l d0,-(sp)
   15a7a:	|      jsr 17caa <__floatsisf>
   15a80:	|      addq.l #4,sp
   15a82:	|      move.l d0,d1
   15a84:	|      move.l 1ca58 <cameraZoom>,d0
   15a8a:	|      move.l d0,-(sp)
   15a8c:	|      move.l d1,-(sp)
   15a8e:	|      jsr 17b60 <__divsf3>
   15a94:	|      addq.l #8,sp
   15a96:	|      move.l d0,-(sp)
   15a98:	|      jsr 17c42 <__fixsfsi>
   15a9e:	|      addq.l #4,sp
   15aa0:	|      move.l d0,1d086 <input+0xe>

	killAllPeople ();
   15aa6:	|      jsr af52 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15aac:	|      movea.l 1d1b6 <frozenStuff>,a0
   15ab2:	|      move.l (a0),d0
   15ab4:	|      move.l d0,1d126 <allPeople>

	killAllRegions ();
   15aba:	|      jsr 16088 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15ac0:	|      movea.l 1d1b6 <frozenStuff>,a0
   15ac6:	|      move.l 4(a0),d0
   15aca:	|      move.l d0,1d1d2 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15ad0:	|      move.l 1cfc0 <mouseCursorAnim>,d0
   15ad6:	|      move.l d0,-(sp)
   15ad8:	|      jsr 9e1c <deleteAnim>
   15ade:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15ae0:	|      movea.l 1d1b6 <frozenStuff>,a0
   15ae6:	|      move.l 32(a0),d0
   15aea:	|      move.l d0,1cfc0 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15af0:	|      movea.l 1d1b6 <frozenStuff>,a0
   15af6:	|      move.l 36(a0),d0
   15afa:	|      move.l d0,1cfc4 <mouseCursorFrameNum>

	killZBuffer ();
   15b00:	|      jsr 8bc2 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15b06:	|      movea.l 1d1b6 <frozenStuff>,a0
   15b0c:	|      move.l 60(a0),d0
   15b10:	|      move.l d0,1d122 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15b16:	|      move.l 1ca36 <currentEvents>,d0
   15b1c:	|  ,-- beq.s 15b36 <unfreeze+0x1ce>
   15b1e:	|  |   move.l 1ca36 <currentEvents>,12(sp)
   15b26:	|  |   move.l 1d0c6 <SysBase>,d0
   15b2c:	|  |   movea.l d0,a6
   15b2e:	|  |   movea.l 12(sp),a1
   15b32:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15b36:	|  '-> movea.l 1d1b6 <frozenStuff>,a0
   15b3c:	|      move.l 28(a0),d0
   15b40:	|      move.l d0,1ca36 <currentEvents>

	killAllSpeech ();
   15b46:	|      jsr 44ac <killAllSpeech>
	if (speech) FreeVec(speech);
   15b4c:	|      move.l 1d016 <speech>,d0
   15b52:	|  ,-- beq.s 15b6c <unfreeze+0x204>
   15b54:	|  |   move.l 1d016 <speech>,8(sp)
   15b5c:	|  |   move.l 1d0c6 <SysBase>,d0
   15b62:	|  |   movea.l d0,a6
   15b64:	|  |   movea.l 8(sp),a1
   15b68:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15b6c:	|  '-> movea.l 1d1b6 <frozenStuff>,a0
   15b72:	|      move.l 20(a0),d0
   15b76:	|      move.l d0,1d016 <speech>

	frozenStuff = frozenStuff -> next;
   15b7c:	|      movea.l 1d1b6 <frozenStuff>,a0
   15b82:	|      move.l 64(a0),d0
   15b86:	|      move.l d0,1d1b6 <frozenStuff>

	overRegion = NULL;
   15b8c:	|      clr.l 1d1d6 <overRegion>
	if (killMe) FreeVec(killMe);
   15b92:	|      tst.l 16(sp)
   15b96:	|  ,-- beq.s 15bae <unfreeze+0x246>
   15b98:	|  |   move.l 16(sp),4(sp)
   15b9e:	|  |   move.l 1d0c6 <SysBase>,d0
   15ba4:	|  |   movea.l d0,a6
   15ba6:	|  |   movea.l 4(sp),a1
   15baa:	|  |   jsr -690(a6)
	killMe = NULL;
   15bae:	|  '-> clr.l 16(sp)
   15bb2:	|  ,-- bra.s 15bb6 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15bb4:	'--|-> nop
}
   15bb6:	   '-> movea.l (sp)+,a6
   15bb8:	       lea 16(sp),sp
   15bbc:	       rts

00015bbe <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15bbe:	pea 1a766 <PutChar+0x244c>
   15bc4:	jsr 17878 <KPrintF>
   15bca:	addq.l #4,sp
	return FALSE;
   15bcc:	clr.w d0
}
   15bce:	rts

00015bd0 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15bd0:	          lea -32(sp),sp
   15bd4:	          move.l a6,-(sp)
   15bd6:	          move.l d2,-(sp)
	unsigned int a = 0;
   15bd8:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15bdc:	          move.l 1d1c2 <fontOrderString>,d0
   15be2:	      ,-- beq.s 15bfc <loadFont+0x2c>
   15be4:	      |   move.l 1d1c2 <fontOrderString>,24(sp)
   15bec:	      |   move.l 1d0c6 <SysBase>,d0
   15bf2:	      |   movea.l d0,a6
   15bf4:	      |   movea.l 24(sp),a1
   15bf8:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15bfc:	      '-> move.l 48(sp),-(sp)
   15c00:	          jsr b8 <copyString>
   15c06:	          addq.l #4,sp
   15c08:	          move.l d0,1d1c2 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15c0e:	          move.l 1d1ce <theFont>,d0
   15c14:	      ,-- beq.s 15c26 <loadFont+0x56>
   15c16:	      |   move.l 1d1ce <theFont>,d0
   15c1c:	      |   move.l d0,-(sp)
   15c1e:	      |   jsr 8f00 <forgetSpriteBank>
   15c24:	      |   addq.l #4,sp
	theFont = NULL;
   15c26:	      '-> clr.l 1d1ce <theFont>

	loadedFontNum = filenum;
   15c2c:	          move.l 44(sp),1d1be <loadedFontNum>

	fontTableSize = 0;
   15c34:	          clr.l 1d1ca <fontTableSize>
	char *tmp = charOrder;
   15c3a:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15c40:	   ,----- bra.s 15c7c <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15c42:	,--|----> movea.l 32(sp),a0
   15c46:	|  |      move.b (a0),d0
   15c48:	|  |      ext.w d0
   15c4a:	|  |      movea.w d0,a0
   15c4c:	|  |      move.l 1d1ca <fontTableSize>,d0
   15c52:	|  |      move.l d0,d0
   15c54:	|  |      move.b d0,d0
   15c56:	|  |      andi.l #255,d0
   15c5c:	|  |      cmp.l a0,d0
   15c5e:	|  |  ,-- bge.s 15c70 <loadFont+0xa0>
   15c60:	|  |  |   movea.l 32(sp),a0
   15c64:	|  |  |   move.b (a0),d0
   15c66:	|  |  |   ext.w d0
   15c68:	|  |  |   movea.w d0,a0
   15c6a:	|  |  |   move.l a0,1d1ca <fontTableSize>
		*tmp++;
   15c70:	|  |  '-> move.l 32(sp),d0
   15c74:	|  |      move.l d0,d1
   15c76:	|  |      addq.l #1,d1
   15c78:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15c7c:	|  '----> movea.l 32(sp),a0
   15c80:	|         move.b (a0),d0
   15c82:	'-------- bne.s 15c42 <loadFont+0x72>
	}
	fontTableSize++;
   15c84:	          move.l 1d1ca <fontTableSize>,d0
   15c8a:	          addq.l #1,d0
   15c8c:	          move.l d0,1d1ca <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15c92:	          move.l 1d1c6 <fontTable>,d0
   15c98:	      ,-- beq.s 15cb2 <loadFont+0xe2>
   15c9a:	      |   move.l 1d1c6 <fontTable>,20(sp)
   15ca2:	      |   move.l 1d0c6 <SysBase>,d0
   15ca8:	      |   movea.l d0,a6
   15caa:	      |   movea.l 20(sp),a1
   15cae:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15cb2:	      '-> move.l 1d1ca <fontTableSize>,d0
   15cb8:	          add.l d0,d0
   15cba:	          add.l d0,d0
   15cbc:	          move.l d0,16(sp)
   15cc0:	          clr.l 12(sp)
   15cc4:	          move.l 1d0c6 <SysBase>,d0
   15cca:	          movea.l d0,a6
   15ccc:	          move.l 16(sp),d0
   15cd0:	          move.l 12(sp),d1
   15cd4:	          jsr -684(a6)
   15cd8:	          move.l d0,8(sp)
   15cdc:	          move.l 8(sp),d0
   15ce0:	          move.l d0,1d1c6 <fontTable>
	if (!fontTable) return FALSE;
   15ce6:	          move.l 1d1c6 <fontTable>,d0
   15cec:	      ,-- bne.s 15cf4 <loadFont+0x124>
   15cee:	      |   clr.w d0
   15cf0:	,-----|-- bra.w 15d9a <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15cf4:	|     '-> clr.l 36(sp)
   15cf8:	|     ,-- bra.s 15d12 <loadFont+0x142>
		fontTable[a] = 0;
   15cfa:	|  ,--|-> move.l 1d1c6 <fontTable>,d1
   15d00:	|  |  |   move.l 36(sp),d0
   15d04:	|  |  |   add.l d0,d0
   15d06:	|  |  |   add.l d0,d0
   15d08:	|  |  |   movea.l d1,a0
   15d0a:	|  |  |   adda.l d0,a0
   15d0c:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15d0e:	|  |  |   addq.l #1,36(sp)
   15d12:	|  |  '-> move.l 1d1ca <fontTableSize>,d0
   15d18:	|  |      cmp.l 36(sp),d0
   15d1c:	|  '----- bhi.s 15cfa <loadFont+0x12a>
	}
	a = 0;
   15d1e:	|         clr.l 36(sp)
	int i = 0;
   15d22:	|         clr.l 28(sp)
	tmp = charOrder;
   15d26:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15d2c:	|     ,-- bra.s 15d5c <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15d2e:	|  ,--|-> move.l 1d1c6 <fontTable>,d1
   15d34:	|  |  |   move.l 32(sp),d0
   15d38:	|  |  |   move.l d0,d2
   15d3a:	|  |  |   addq.l #1,d2
   15d3c:	|  |  |   move.l d2,32(sp)
   15d40:	|  |  |   movea.l d0,a0
   15d42:	|  |  |   move.b (a0),d0
   15d44:	|  |  |   ext.w d0
   15d46:	|  |  |   movea.w d0,a0
   15d48:	|  |  |   move.l a0,d0
   15d4a:	|  |  |   add.l a0,d0
   15d4c:	|  |  |   add.l d0,d0
   15d4e:	|  |  |   movea.l d1,a0
   15d50:	|  |  |   adda.l d0,a0
   15d52:	|  |  |   move.l 28(sp),d0
   15d56:	|  |  |   move.l d0,(a0)
		i++;
   15d58:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15d5c:	|  |  '-> movea.l 32(sp),a0
   15d60:	|  |      move.b (a0),d0
   15d62:	|  '----- bne.s 15d2e <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15d64:	|         move.l 44(sp),-(sp)
   15d68:	|         jsr 1659a <loadBankForAnim>
   15d6e:	|         addq.l #4,sp
   15d70:	|         move.l d0,1d1ce <theFont>
	if (!theFont) {
   15d76:	|         move.l 1d1ce <theFont>,d0
   15d7c:	|     ,-- bne.s 15d90 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15d7e:	|     |   pea 1a78d <PutChar+0x2473>
   15d84:	|     |   jsr 17878 <KPrintF>
   15d8a:	|     |   addq.l #4,sp
		return FALSE;
   15d8c:	|     |   clr.w d0
   15d8e:	+-----|-- bra.s 15d9a <loadFont+0x1ca>
	}
	fontHeight = h;
   15d90:	|     '-> move.l 52(sp),1d1ba <fontHeight>
	return TRUE;
   15d98:	|         moveq #1,d0
}
   15d9a:	'-------> move.l (sp)+,d2
   15d9c:	          movea.l (sp)+,a6
   15d9e:	          lea 32(sp),sp
   15da2:	          rts

00015da4 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15da4:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15da8:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15dac:	                move.l 1d1ca <fontTableSize>,d0
   15db2:	,-------------- beq.w 15e7a <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15db6:	|               move.w 1cfbe <fontSpace>,d0
   15dbc:	|               asr.w #1,d0
   15dbe:	|               ext.l d0
   15dc0:	|               add.l d0,20(sp)
	char *tmp = theText;
   15dc4:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15dca:	|     ,-------- bra.w 15e6e <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15dce:	|  ,--|-------> movea.l 1d1ce <theFont>,a0
   15dd4:	|  |  |         movea.l 16(a0),a0
   15dd8:	|  |  |         movea.l 8(sp),a1
   15ddc:	|  |  |         move.b (a1),d0
   15dde:	|  |  |         move.b d0,d0
   15de0:	|  |  |         andi.l #255,d0
   15de6:	|  |  |         move.l 1d1ca <fontTableSize>,d1
   15dec:	|  |  |         cmp.l d0,d1
   15dee:	|  |  |  ,----- bls.s 15e1a <pasteStringToBackdrop+0x76>
   15df0:	|  |  |  |      move.l 1d1c6 <fontTable>,d1
   15df6:	|  |  |  |      movea.l 8(sp),a1
   15dfa:	|  |  |  |      move.b (a1),d0
   15dfc:	|  |  |  |      move.b d0,d0
   15dfe:	|  |  |  |      andi.l #255,d0
   15e04:	|  |  |  |      add.l d0,d0
   15e06:	|  |  |  |      add.l d0,d0
   15e08:	|  |  |  |      movea.l d1,a1
   15e0a:	|  |  |  |      adda.l d0,a1
   15e0c:	|  |  |  |      move.l (a1),d1
   15e0e:	|  |  |  |      move.l d1,d0
   15e10:	|  |  |  |      lsl.l #3,d0
   15e12:	|  |  |  |      sub.l d1,d0
   15e14:	|  |  |  |      add.l d0,d0
   15e16:	|  |  |  |      add.l d0,d0
   15e18:	|  |  |  |  ,-- bra.s 15e1c <pasteStringToBackdrop+0x78>
   15e1a:	|  |  |  '--|-> moveq #0,d0
   15e1c:	|  |  |     '-> adda.l d0,a0
   15e1e:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15e20:	|  |  |         move.l 24(sp),d1
   15e24:	|  |  |         movea.l (sp),a0
   15e26:	|  |  |         move.l 12(a0),d0
   15e2a:	|  |  |         move.l d0,d0
   15e2c:	|  |  |         sub.w d0,d1
   15e2e:	|  |  |         move.w d1,d0
   15e30:	|  |  |         movea.w d0,a1
   15e32:	|  |  |         move.l 20(sp),d1
   15e36:	|  |  |         movea.l (sp),a0
   15e38:	|  |  |         move.l 8(a0),d0
   15e3c:	|  |  |         move.l d0,d0
   15e3e:	|  |  |         sub.w d0,d1
   15e40:	|  |  |         move.w d1,d0
   15e42:	|  |  |         movea.w d0,a0
   15e44:	|  |  |         move.l a1,-(sp)
   15e46:	|  |  |         move.l a0,-(sp)
   15e48:	|  |  |         move.l 8(sp),-(sp)
   15e4c:	|  |  |         jsr 24e8 <CstPasteChar>
   15e52:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15e56:	|  |  |         movea.l (sp),a0
   15e58:	|  |  |         move.l (a0),d1
   15e5a:	|  |  |         move.w 1cfbe <fontSpace>,d0
   15e60:	|  |  |         movea.w d0,a0
   15e62:	|  |  |         move.l d1,d0
   15e64:	|  |  |         add.l a0,d0
   15e66:	|  |  |         add.l d0,20(sp)
		tmp++;
   15e6a:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15e6e:	|  |  '-------> movea.l 8(sp),a0
   15e72:	|  |            move.b (a0),d0
   15e74:	|  '----------- bne.w 15dce <pasteStringToBackdrop+0x2a>
   15e78:	|           ,-- bra.s 15e7c <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15e7a:	'-----------|-> nop
    }
}
   15e7c:	            '-> lea 12(sp),sp
   15e80:	                rts

00015e82 <stringWidth>:


int stringWidth (char * theText) {
   15e82:	                lea -16(sp),sp
	int a = 0;
   15e86:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15e8a:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15e8e:	                move.l 1d1ca <fontTableSize>,d0
   15e94:	            ,-- bne.s 15e9a <stringWidth+0x18>
   15e96:	            |   moveq #0,d0
   15e98:	,-----------|-- bra.s 15f0e <stringWidth+0x8c>

	char *tmp = theText;
   15e9a:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15ea0:	|     ,-------- bra.s 15f02 <stringWidth+0x80>
        c = *tmp++;
   15ea2:	|  ,--|-------> move.l 8(sp),d0
   15ea6:	|  |  |         move.l d0,d1
   15ea8:	|  |  |         addq.l #1,d1
   15eaa:	|  |  |         move.l d1,8(sp)
   15eae:	|  |  |         movea.l d0,a0
   15eb0:	|  |  |         move.b (a0),d0
   15eb2:	|  |  |         ext.w d0
   15eb4:	|  |  |         movea.w d0,a0
   15eb6:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15eb8:	|  |  |         movea.l 1d1ce <theFont>,a0
   15ebe:	|  |  |         movea.l 16(a0),a1
   15ec2:	|  |  |         move.l 1d1ca <fontTableSize>,d0
   15ec8:	|  |  |         cmp.l (sp),d0
   15eca:	|  |  |  ,----- bls.s 15eea <stringWidth+0x68>
   15ecc:	|  |  |  |      move.l 1d1c6 <fontTable>,d1
   15ed2:	|  |  |  |      move.l (sp),d0
   15ed4:	|  |  |  |      add.l d0,d0
   15ed6:	|  |  |  |      add.l d0,d0
   15ed8:	|  |  |  |      movea.l d1,a0
   15eda:	|  |  |  |      adda.l d0,a0
   15edc:	|  |  |  |      move.l (a0),d1
   15ede:	|  |  |  |      move.l d1,d0
   15ee0:	|  |  |  |      lsl.l #3,d0
   15ee2:	|  |  |  |      sub.l d1,d0
   15ee4:	|  |  |  |      add.l d0,d0
   15ee6:	|  |  |  |      add.l d0,d0
   15ee8:	|  |  |  |  ,-- bra.s 15eec <stringWidth+0x6a>
   15eea:	|  |  |  '--|-> moveq #0,d0
   15eec:	|  |  |     '-> lea (0,a1,d0.l),a0
   15ef0:	|  |  |         move.l (a0),d1
   15ef2:	|  |  |         move.w 1cfbe <fontSpace>,d0
   15ef8:	|  |  |         movea.w d0,a0
   15efa:	|  |  |         move.l d1,d0
   15efc:	|  |  |         add.l a0,d0
   15efe:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15f02:	|  |  '-------> movea.l 8(sp),a0
   15f06:	|  |            move.b (a0),d0
   15f08:	|  '----------- bne.s 15ea2 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15f0a:	|               move.l 12(sp),d0
}
   15f0e:	'-------------> lea 16(sp),sp
   15f12:	                rts

00015f14 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15f14:	       lea -16(sp),sp
   15f18:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15f1a:	       moveq #36,d0
   15f1c:	       move.l d0,16(sp)
   15f20:	       clr.l 12(sp)
   15f24:	       move.l 1d0c6 <SysBase>,d0
   15f2a:	       movea.l d0,a6
   15f2c:	       move.l 16(sp),d0
   15f30:	       move.l 12(sp),d1
   15f34:	       jsr -684(a6)
   15f38:	       move.l d0,8(sp)
   15f3c:	       move.l 8(sp),d0
   15f40:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15f44:	   ,-- bne.s 15f4c <addScreenRegion+0x38>
   15f46:	   |   clr.w d0
   15f48:	,--|-- bra.w 15fcc <addScreenRegion+0xb8>
    newRegion->di = di;
   15f4c:	|  '-> movea.l 4(sp),a0
   15f50:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15f56:	|      movea.l 4(sp),a0
   15f5a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15f5e:	|      movea.l 4(sp),a0
   15f62:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15f68:	|      movea.l 4(sp),a0
   15f6c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15f72:	|      movea.l 4(sp),a0
   15f76:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15f7c:	|      movea.l 4(sp),a0
   15f80:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15f86:	|      movea.l 4(sp),a0
   15f8a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15f90:	|      move.l 52(sp),-(sp)
   15f94:	|      jsr db9c <loadObjectType>
   15f9a:	|      addq.l #4,sp
   15f9c:	|      movea.l 4(sp),a0
   15fa0:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15fa4:	|      move.l 1d1d2 <allScreenRegions>,d0
   15faa:	|      movea.l 4(sp),a0
   15fae:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15fb2:	|      move.l 4(sp),1d1d2 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15fba:	|      movea.l 4(sp),a0
   15fbe:	|      move.l 28(a0),d0
   15fc2:	|      sne d0
   15fc4:	|      neg.b d0
   15fc6:	|      move.b d0,d0
   15fc8:	|      andi.w #255,d0
}
   15fcc:	'----> movea.l (sp)+,a6
   15fce:	       lea 16(sp),sp
   15fd2:	       rts

00015fd4 <getOverRegion>:

void getOverRegion () {
   15fd4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15fd6:	             move.l 1d1d2 <allScreenRegions>,(sp)
	while (thisRegion) {
   15fdc:	   ,-------- bra.s 1604a <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15fde:	,--|-------> move.l 1d082 <input+0xa>,d0
   15fe4:	|  |         movea.l (sp),a0
   15fe6:	|  |         movea.l (a0),a0
   15fe8:	|  |         move.l 1d17c <cameraX>,d1
   15fee:	|  |         suba.l d1,a0
   15ff0:	|  |         cmpa.l d0,a0
   15ff2:	|  |  ,----- bgt.s 16044 <getOverRegion+0x70>
   15ff4:	|  |  |      move.l 1d086 <input+0xe>,d0
   15ffa:	|  |  |      movea.l (sp),a0
   15ffc:	|  |  |      movea.l 4(a0),a0
   16000:	|  |  |      move.l 1d180 <cameraY>,d1
   16006:	|  |  |      suba.l d1,a0
   16008:	|  |  |      cmpa.l d0,a0
   1600a:	|  |  +----- bgt.s 16044 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1600c:	|  |  |      move.l 1d082 <input+0xa>,d0
   16012:	|  |  |      movea.l (sp),a0
   16014:	|  |  |      movea.l 8(a0),a0
   16018:	|  |  |      move.l 1d17c <cameraX>,d1
   1601e:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16020:	|  |  |      cmpa.l d0,a0
   16022:	|  |  +----- blt.s 16044 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16024:	|  |  |      move.l 1d086 <input+0xe>,d0
   1602a:	|  |  |      movea.l (sp),a0
   1602c:	|  |  |      movea.l 12(a0),a0
   16030:	|  |  |      move.l 1d180 <cameraY>,d1
   16036:	|  |  |      suba.l d1,a0
   16038:	|  |  |      cmpa.l d0,a0
   1603a:	|  |  +----- blt.s 16044 <getOverRegion+0x70>
			overRegion = thisRegion;
   1603c:	|  |  |      move.l (sp),1d1d6 <overRegion>
			return;
   16042:	|  |  |  ,-- bra.s 16056 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16044:	|  |  '--|-> movea.l (sp),a0
   16046:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1604a:	|  '-----|-> tst.l (sp)
   1604c:	'--------|-- bne.s 15fde <getOverRegion+0xa>
	}
	overRegion = NULL;
   1604e:	         |   clr.l 1d1d6 <overRegion>
	return;
   16054:	         |   nop
}
   16056:	         '-> addq.l #4,sp
   16058:	             rts

0001605a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1605a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1605c:	             move.l 1d1d2 <allScreenRegions>,(sp)

	while (thisRegion) {
   16062:	   ,-------- bra.s 1607e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16064:	,--|-------> movea.l (sp),a0
   16066:	|  |         movea.l 28(a0),a0
   1606a:	|  |         move.l 4(a0),d0
   1606e:	|  |         cmp.l 8(sp),d0
   16072:	|  |     ,-- bne.s 16078 <getRegionForObject+0x1e>
			return thisRegion;
   16074:	|  |     |   move.l (sp),d0
   16076:	|  |  ,--|-- bra.s 16084 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   16078:	|  |  |  '-> movea.l (sp),a0
   1607a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1607e:	|  '--|----> tst.l (sp)
   16080:	'-----|----- bne.s 16064 <getRegionForObject+0xa>
	}

	return NULL;
   16082:	      |      moveq #0,d0
}
   16084:	      '----> addq.l #4,sp
   16086:	             rts

00016088 <killAllRegions>:

void killAllRegions () {
   16088:	       subq.l #8,sp
   1608a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1608c:	   ,-- bra.s 160ce <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1608e:	,--|-> move.l 1d1d2 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16096:	|  |   movea.l 1d1d2 <allScreenRegions>,a0
   1609c:	|  |   move.l 32(a0),d0
   160a0:	|  |   move.l d0,1d1d2 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   160a6:	|  |   movea.l 8(sp),a0
   160aa:	|  |   move.l 28(a0),d0
   160ae:	|  |   move.l d0,-(sp)
   160b0:	|  |   jsr de54 <removeObjectType>
   160b6:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   160b8:	|  |   move.l 8(sp),4(sp)
   160be:	|  |   move.l 1d0c6 <SysBase>,d0
   160c4:	|  |   movea.l d0,a6
   160c6:	|  |   movea.l 4(sp),a1
   160ca:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   160ce:	|  '-> move.l 1d1d2 <allScreenRegions>,d0
   160d4:	'----- bne.s 1608e <killAllRegions+0x6>
	}
	overRegion = NULL;
   160d6:	       clr.l 1d1d6 <overRegion>
}
   160dc:	       nop
   160de:	       movea.l (sp)+,a6
   160e0:	       addq.l #8,sp
   160e2:	       rts

000160e4 <loadRegions>:

void loadRegions (BPTR fp) {
   160e4:	       lea -24(sp),sp
   160e8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   160ea:	       move.l 32(sp),-(sp)
   160ee:	       jsr 6bc <get2bytes>
   160f4:	       addq.l #4,sp
   160f6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   160fa:	       move.l #119250,20(sp)

	while (numRegions --) {
   16102:	   ,-- bra.w 161e0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16106:	,--|-> moveq #36,d0
   16108:	|  |   move.l d0,16(sp)
   1610c:	|  |   clr.l 12(sp)
   16110:	|  |   move.l 1d0c6 <SysBase>,d0
   16116:	|  |   movea.l d0,a6
   16118:	|  |   move.l 16(sp),d0
   1611c:	|  |   move.l 12(sp),d1
   16120:	|  |   jsr -684(a6)
   16124:	|  |   move.l d0,8(sp)
   16128:	|  |   move.l 8(sp),d0
   1612c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16130:	|  |   movea.l 20(sp),a0
   16134:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16138:	|  |   moveq #32,d1
   1613a:	|  |   add.l 4(sp),d1
   1613e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16142:	|  |   move.l 32(sp),-(sp)
   16146:	|  |   jsr 6bc <get2bytes>
   1614c:	|  |   addq.l #4,sp
   1614e:	|  |   movea.l 4(sp),a0
   16152:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16154:	|  |   move.l 32(sp),-(sp)
   16158:	|  |   jsr 6bc <get2bytes>
   1615e:	|  |   addq.l #4,sp
   16160:	|  |   movea.l 4(sp),a0
   16164:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16168:	|  |   move.l 32(sp),-(sp)
   1616c:	|  |   jsr 6bc <get2bytes>
   16172:	|  |   addq.l #4,sp
   16174:	|  |   movea.l 4(sp),a0
   16178:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1617c:	|  |   move.l 32(sp),-(sp)
   16180:	|  |   jsr 6bc <get2bytes>
   16186:	|  |   addq.l #4,sp
   16188:	|  |   movea.l 4(sp),a0
   1618c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16190:	|  |   move.l 32(sp),-(sp)
   16194:	|  |   jsr 6bc <get2bytes>
   1619a:	|  |   addq.l #4,sp
   1619c:	|  |   movea.l 4(sp),a0
   161a0:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   161a4:	|  |   move.l 32(sp),-(sp)
   161a8:	|  |   jsr 6bc <get2bytes>
   161ae:	|  |   addq.l #4,sp
   161b0:	|  |   movea.l 4(sp),a0
   161b4:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   161b8:	|  |   move.l 32(sp),-(sp)
   161bc:	|  |   jsr 6bc <get2bytes>
   161c2:	|  |   addq.l #4,sp
   161c4:	|  |   movea.l 4(sp),a0
   161c8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   161cc:	|  |   move.l 32(sp),-(sp)
   161d0:	|  |   jsr db4a <loadObjectRef>
   161d6:	|  |   addq.l #4,sp
   161d8:	|  |   movea.l 4(sp),a0
   161dc:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   161e0:	|  '-> move.l 24(sp),d0
   161e4:	|      move.l d0,d1
   161e6:	|      subq.l #1,d1
   161e8:	|      move.l d1,24(sp)
   161ec:	|      tst.l d0
   161ee:	'----- bne.w 16106 <loadRegions+0x22>
	}
	* pointy = NULL;
   161f2:	       movea.l 20(sp),a0
   161f6:	       clr.l (a0)
}
   161f8:	       nop
   161fa:	       movea.l (sp)+,a6
   161fc:	       lea 24(sp),sp
   16200:	       rts

00016202 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16202:	             lea -12(sp),sp
   16206:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16208:	             move.l #119250,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16210:	   ,-------- bra.s 1628a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16212:	,--|-------> movea.l 12(sp),a0
   16216:	|  |         movea.l (a0),a0
   16218:	|  |         movea.l 28(a0),a0
   1621c:	|  |         move.l 4(a0),d0
   16220:	|  |         cmp.l 20(sp),d0
   16224:	|  |  ,----- bne.s 1627c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16226:	|  |  |      movea.l 12(sp),a0
   1622a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1622e:	|  |  |      movea.l 8(sp),a0
   16232:	|  |  |      move.l 32(a0),d0
   16236:	|  |  |      movea.l 12(sp),a0
   1623a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1623c:	|  |  |      movea.l 8(sp),a0
   16240:	|  |  |      move.l 28(a0),d0
   16244:	|  |  |      move.l d0,-(sp)
   16246:	|  |  |      jsr de54 <removeObjectType>
   1624c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1624e:	|  |  |      move.l 1d1d6 <overRegion>,d0
   16254:	|  |  |      cmp.l 8(sp),d0
   16258:	|  |  |  ,-- bne.s 16260 <removeScreenRegion+0x5e>
   1625a:	|  |  |  |   clr.l 1d1d6 <overRegion>
            FreeVec(killMe);
   16260:	|  |  |  '-> move.l 8(sp),4(sp)
   16266:	|  |  |      move.l 1d0c6 <SysBase>,d0
   1626c:	|  |  |      movea.l d0,a6
   1626e:	|  |  |      movea.l 4(sp),a1
   16272:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16276:	|  |  |      clr.l 8(sp)
   1627a:	|  +--|----- bra.s 1628a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1627c:	|  |  '----> movea.l 12(sp),a0
   16280:	|  |         move.l (a0),d0
   16282:	|  |         moveq #32,d1
   16284:	|  |         add.l d0,d1
   16286:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   1628a:	|  '-------> movea.l 12(sp),a0
   1628e:	|            move.l (a0),d0
   16290:	'----------- bne.s 16212 <removeScreenRegion+0x10>
        }
    }
}
   16292:	             nop
   16294:	             nop
   16296:	             movea.l (sp)+,a6
   16298:	             lea 12(sp),sp
   1629c:	             rts

0001629e <saveRegions>:

void saveRegions (BPTR fp) {
   1629e:	       subq.l #8,sp
	int numRegions = 0;
   162a0:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   162a4:	       move.l 1d1d2 <allScreenRegions>,(sp)
	while (thisRegion) {
   162aa:	   ,-- bra.s 162b6 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   162ac:	,--|-> movea.l (sp),a0
   162ae:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   162b2:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   162b6:	|  '-> tst.l (sp)
   162b8:	'----- bne.s 162ac <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   162ba:	       move.l 12(sp),-(sp)
   162be:	       move.l 8(sp),-(sp)
   162c2:	       jsr 8d0 <put2bytes>
   162c8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   162ca:	       move.l 1d1d2 <allScreenRegions>,(sp)
	while (thisRegion) {
   162d0:	,----- bra.w 16378 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   162d4:	|  ,-> movea.l (sp),a0
   162d6:	|  |   move.l (a0),d0
   162d8:	|  |   move.l 12(sp),-(sp)
   162dc:	|  |   move.l d0,-(sp)
   162de:	|  |   jsr 8d0 <put2bytes>
   162e4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   162e6:	|  |   movea.l (sp),a0
   162e8:	|  |   move.l 4(a0),d0
   162ec:	|  |   move.l 12(sp),-(sp)
   162f0:	|  |   move.l d0,-(sp)
   162f2:	|  |   jsr 8d0 <put2bytes>
   162f8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   162fa:	|  |   movea.l (sp),a0
   162fc:	|  |   move.l 8(a0),d0
   16300:	|  |   move.l 12(sp),-(sp)
   16304:	|  |   move.l d0,-(sp)
   16306:	|  |   jsr 8d0 <put2bytes>
   1630c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   1630e:	|  |   movea.l (sp),a0
   16310:	|  |   move.l 12(a0),d0
   16314:	|  |   move.l 12(sp),-(sp)
   16318:	|  |   move.l d0,-(sp)
   1631a:	|  |   jsr 8d0 <put2bytes>
   16320:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16322:	|  |   movea.l (sp),a0
   16324:	|  |   move.l 16(a0),d0
   16328:	|  |   move.l 12(sp),-(sp)
   1632c:	|  |   move.l d0,-(sp)
   1632e:	|  |   jsr 8d0 <put2bytes>
   16334:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   16336:	|  |   movea.l (sp),a0
   16338:	|  |   move.l 20(a0),d0
   1633c:	|  |   move.l 12(sp),-(sp)
   16340:	|  |   move.l d0,-(sp)
   16342:	|  |   jsr 8d0 <put2bytes>
   16348:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1634a:	|  |   movea.l (sp),a0
   1634c:	|  |   move.l 24(a0),d0
   16350:	|  |   move.l 12(sp),-(sp)
   16354:	|  |   move.l d0,-(sp)
   16356:	|  |   jsr 8d0 <put2bytes>
   1635c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1635e:	|  |   movea.l (sp),a0
   16360:	|  |   move.l 28(a0),d0
   16364:	|  |   move.l 12(sp),-(sp)
   16368:	|  |   move.l d0,-(sp)
   1636a:	|  |   jsr def4 <saveObjectRef>
   16370:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16372:	|  |   movea.l (sp),a0
   16374:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   16378:	'--|-> tst.l (sp)
   1637a:	   '-- bne.w 162d4 <saveRegions+0x36>
	}
}
   1637e:	       nop
   16380:	       nop
   16382:	       addq.l #8,sp
   16384:	       rts

00016386 <showBoxes>:

void showBoxes () {
   16386:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   16388:	       move.l 1d1d2 <allScreenRegions>,(sp)

	while (huntRegion) {
   1638e:	,----- bra.w 1642a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   16392:	|  ,-> movea.l (sp),a0
   16394:	|  |   move.l 12(a0),d0
   16398:	|  |   movea.l d0,a1
   1639a:	|  |   movea.l (sp),a0
   1639c:	|  |   move.l 4(a0),d0
   163a0:	|  |   move.l d0,d1
   163a2:	|  |   movea.l (sp),a0
   163a4:	|  |   move.l (a0),d0
   163a6:	|  |   move.l a1,-(sp)
   163a8:	|  |   move.l d1,-(sp)
   163aa:	|  |   move.l d0,-(sp)
   163ac:	|  |   jsr d7d8 <drawVerticalLine>
   163b2:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   163b6:	|  |   movea.l (sp),a0
   163b8:	|  |   move.l 12(a0),d0
   163bc:	|  |   movea.l d0,a1
   163be:	|  |   movea.l (sp),a0
   163c0:	|  |   move.l 4(a0),d0
   163c4:	|  |   move.l d0,d1
   163c6:	|  |   movea.l (sp),a0
   163c8:	|  |   move.l 8(a0),d0
   163cc:	|  |   move.l a1,-(sp)
   163ce:	|  |   move.l d1,-(sp)
   163d0:	|  |   move.l d0,-(sp)
   163d2:	|  |   jsr d7d8 <drawVerticalLine>
   163d8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   163dc:	|  |   movea.l (sp),a0
   163de:	|  |   move.l 8(a0),d0
   163e2:	|  |   movea.l d0,a1
   163e4:	|  |   movea.l (sp),a0
   163e6:	|  |   move.l 4(a0),d0
   163ea:	|  |   move.l d0,d1
   163ec:	|  |   movea.l (sp),a0
   163ee:	|  |   move.l (a0),d0
   163f0:	|  |   move.l a1,-(sp)
   163f2:	|  |   move.l d1,-(sp)
   163f4:	|  |   move.l d0,-(sp)
   163f6:	|  |   jsr d7b2 <drawHorizontalLine>
   163fc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   16400:	|  |   movea.l (sp),a0
   16402:	|  |   move.l 8(a0),d0
   16406:	|  |   movea.l d0,a1
   16408:	|  |   movea.l (sp),a0
   1640a:	|  |   move.l 12(a0),d0
   1640e:	|  |   move.l d0,d1
   16410:	|  |   movea.l (sp),a0
   16412:	|  |   move.l (a0),d0
   16414:	|  |   move.l a1,-(sp)
   16416:	|  |   move.l d1,-(sp)
   16418:	|  |   move.l d0,-(sp)
   1641a:	|  |   jsr d7b2 <drawHorizontalLine>
   16420:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   16424:	|  |   movea.l (sp),a0
   16426:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1642a:	'--|-> tst.l (sp)
   1642c:	   '-- bne.w 16392 <showBoxes+0xc>
	}
   16430:	       nop
   16432:	       nop
   16434:	       addq.l #4,sp
   16436:	       rts

00016438 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   16438:	       lea -88(sp),sp
   1643c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   1643e:	       move.l 1d0c6 <SysBase>,d0
   16444:	       movea.l d0,a6
   16446:	       jsr -666(a6)
   1644a:	       move.l d0,88(sp)
   1644e:	       move.l 88(sp),d0
   16452:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   16456:	       move.l 84(sp),80(sp)
   1645c:	       moveq #40,d0
   1645e:	       move.l d0,76(sp)
   16462:	       move.l 1d0c6 <SysBase>,d0
   16468:	       movea.l d0,a6
   1646a:	       movea.l 80(sp),a0
   1646e:	       move.l 76(sp),d0
   16472:	       jsr -654(a6)
   16476:	       move.l d0,72(sp)
   1647a:	       move.l 72(sp),d0
   1647e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   16482:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   16488:	       move.l #108455,60(sp)
   16490:	       clr.l 56(sp)
   16494:	       move.l 64(sp),52(sp)
   1649a:	       clr.l 48(sp)
   1649e:	       move.l 1d0c6 <SysBase>,d0
   164a4:	       movea.l d0,a6
   164a6:	       movea.l 60(sp),a0
   164aa:	       move.l 56(sp),d0
   164ae:	       movea.l 52(sp),a1
   164b2:	       move.l 48(sp),d1
   164b6:	       jsr -444(a6)
   164ba:	       move.b d0,47(sp)
   164be:	       move.b 47(sp),d0
   164c2:	   ,-- beq.s 164d8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   164c4:	   |   pea 1a7b4 <PutChar+0x249a>
   164ca:	   |   jsr 17878 <KPrintF>
   164d0:	   |   addq.l #4,sp
        return 0;
   164d2:	   |   moveq #0,d0
   164d4:	,--|-- bra.w 16592 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   164d8:	|  '-> movea.l 64(sp),a0
   164dc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   164e2:	|      lea 92(sp),a0
   164e6:	|      lea -86(a0),a0
   164ea:	|      move.l a0,38(sp)
   164ee:	|      movea.l 42(sp),a6
   164f2:	|      movea.l 38(sp),a0
   164f6:	|      jsr -60(a6)
   164fa:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   164fe:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   16504:	|      move.l #1103515245,-(sp)
   1650a:	|      move.l 34(sp),-(sp)
   1650e:	|      jsr 18204 <__mulsi3>
   16514:	|      addq.l #8,sp
   16516:	|      addi.l #12345,d0
   1651c:	|      move.l d0,d1
   1651e:	|      bclr #31,d1
   16522:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   16526:	|      move.l 30(sp),d0
   1652a:	|      pea 64 <_start+0x64>
   1652e:	|      move.l d0,-(sp)
   16530:	|      jsr 182de <__umodsi3>
   16536:	|      addq.l #8,sp
   16538:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   1653c:	|      move.l 26(sp),-(sp)
   16540:	|      pea 1a7d1 <PutChar+0x24b7>
   16546:	|      jsr 17878 <KPrintF>
   1654c:	|      addq.l #8,sp

    CloseDevice(ioreq);
   1654e:	|      move.l 64(sp),22(sp)
   16554:	|      move.l 1d0c6 <SysBase>,d0
   1655a:	|      movea.l d0,a6
   1655c:	|      movea.l 22(sp),a1
   16560:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16564:	|      move.l 64(sp),18(sp)
   1656a:	|      move.l 1d0c6 <SysBase>,d0
   16570:	|      movea.l d0,a6
   16572:	|      movea.l 18(sp),a0
   16576:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   1657a:	|      move.l 84(sp),14(sp)
   16580:	|      move.l 1d0c6 <SysBase>,d0
   16586:	|      movea.l d0,a6
   16588:	|      movea.l 14(sp),a0
   1658c:	|      jsr -672(a6)
    return 0;
   16590:	|      moveq #0,d0
   16592:	'----> movea.l (sp)+,a6
   16594:	       lea 88(sp),sp
   16598:	       rts

0001659a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1659a:	             lea -20(sp),sp
   1659e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   165a0:	             move.l 1d1da <allLoadedBanks>,20(sp)
	while (returnMe) {
   165a8:	      ,----- bra.s 165da <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   165aa:	   ,--|----> movea.l 20(sp),a0
   165ae:	   |  |      move.l (a0),d0
   165b0:	   |  |      cmp.l 28(sp),d0
   165b4:	   |  |  ,-- bne.s 165d0 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   165b6:	   |  |  |   movea.l 20(sp),a0
   165ba:	   |  |  |   move.l 4(a0),d0
   165be:	   |  |  |   addq.l #1,d0
   165c0:	   |  |  |   movea.l 20(sp),a0
   165c4:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   165c8:	   |  |  |   move.l 20(sp),d0
   165cc:	,--|--|--|-- bra.w 1666e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   165d0:	|  |  |  '-> movea.l 20(sp),a0
   165d4:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   165da:	|  |  '----> tst.l 20(sp)
   165de:	|  '-------- bne.s 165aa <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   165e0:	|            moveq #26,d0
   165e2:	|            move.l d0,16(sp)
   165e6:	|            clr.l 12(sp)
   165ea:	|            move.l 1d0c6 <SysBase>,d0
   165f0:	|            movea.l d0,a6
   165f2:	|            move.l 16(sp),d0
   165f6:	|            move.l 12(sp),d1
   165fa:	|            jsr -684(a6)
   165fe:	|            move.l d0,8(sp)
   16602:	|            move.l 8(sp),d0
   16606:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1660a:	|     ,----- beq.s 1666c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   1660c:	|     |      movea.l 20(sp),a0
   16610:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   16614:	|     |      move.l 20(sp),d0
   16618:	|     |      addq.l #8,d0
   1661a:	|     |      move.l d0,-(sp)
   1661c:	|     |      move.l 32(sp),-(sp)
   16620:	|     |      jsr 900c <loadSpriteBank>
   16626:	|     |      addq.l #8,sp
   16628:	|     |      tst.w d0
   1662a:	|     |  ,-- beq.s 16652 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   1662c:	|     |  |   movea.l 20(sp),a0
   16630:	|     |  |   moveq #1,d0
   16632:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16636:	|     |  |   move.l 1d1da <allLoadedBanks>,d0
   1663c:	|     |  |   movea.l 20(sp),a0
   16640:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16644:	|     |  |   move.l 20(sp),1d1da <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   1664c:	|     |  |   move.l 20(sp),d0
   16650:	+-----|--|-- bra.s 1666e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16652:	|     |  '-> move.l 20(sp),4(sp)
   16658:	|     |      move.l 1d0c6 <SysBase>,d0
   1665e:	|     |      movea.l d0,a6
   16660:	|     |      movea.l 4(sp),a1
   16664:	|     |      jsr -690(a6)
			return NULL;
   16668:	|     |      moveq #0,d0
   1666a:	+-----|----- bra.s 1666e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   1666c:	|     '----> moveq #0,d0
}
   1666e:	'----------> movea.l (sp)+,a6
   16670:	             lea 20(sp),sp
   16674:	             rts

00016676 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16676:	       lea -60(sp),sp
   1667a:	       move.l d3,-(sp)
   1667c:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1667e:	       move.l 88(sp),d0
   16682:	       sub.l 80(sp),d0
   16686:	       move.l d0,-(sp)
   16688:	       jsr 17c6a <__floatsidf>
   1668e:	       addq.l #4,sp
   16690:	       move.l d0,32(sp)
   16694:	       move.l d1,36(sp)
   16698:	       move.l 32(sp),60(sp)
   1669e:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   166a4:	       move.l 92(sp),d0
   166a8:	       sub.l 84(sp),d0
   166ac:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   166b0:	       move.l 96(sp),d0
   166b4:	       sub.l 80(sp),d0
   166b8:	       move.l d0,-(sp)
   166ba:	       jsr 17c6a <__floatsidf>
   166c0:	       addq.l #4,sp
   166c2:	       move.l 64(sp),-(sp)
   166c6:	       move.l 64(sp),-(sp)
   166ca:	       move.l d1,-(sp)
   166cc:	       move.l d0,-(sp)
   166ce:	       jsr 17cfa <__muldf3>
   166d4:	       lea 16(sp),sp
   166d8:	       move.l d0,d2
   166da:	       move.l d1,d3
   166dc:	       move.l 100(sp),d0
   166e0:	       sub.l 84(sp),d0
   166e4:	       move.l 56(sp),-(sp)
   166e8:	       move.l d0,-(sp)
   166ea:	       jsr 18204 <__mulsi3>
   166f0:	       addq.l #8,sp
   166f2:	       move.l d0,-(sp)
   166f4:	       jsr 17c6a <__floatsidf>
   166fa:	       addq.l #4,sp
   166fc:	       move.l d1,-(sp)
   166fe:	       move.l d0,-(sp)
   16700:	       move.l d3,-(sp)
   16702:	       move.l d2,-(sp)
   16704:	       jsr 17a9c <__adddf3>
   1670a:	       lea 16(sp),sp
   1670e:	       move.l d0,24(sp)
   16712:	       move.l d1,28(sp)
   16716:	       move.l 24(sp),48(sp)
   1671c:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16722:	       move.l 64(sp),-(sp)
   16726:	       move.l 64(sp),-(sp)
   1672a:	       move.l 72(sp),-(sp)
   1672e:	       move.l 72(sp),-(sp)
   16732:	       jsr 17cfa <__muldf3>
   16738:	       lea 16(sp),sp
   1673c:	       move.l d0,d2
   1673e:	       move.l d1,d3
   16740:	       move.l 56(sp),-(sp)
   16744:	       move.l 60(sp),-(sp)
   16748:	       jsr 18204 <__mulsi3>
   1674e:	       addq.l #8,sp
   16750:	       move.l d0,-(sp)
   16752:	       jsr 17c6a <__floatsidf>
   16758:	       addq.l #4,sp
   1675a:	       move.l d1,-(sp)
   1675c:	       move.l d0,-(sp)
   1675e:	       move.l d3,-(sp)
   16760:	       move.l d2,-(sp)
   16762:	       jsr 17a9c <__adddf3>
   16768:	       lea 16(sp),sp
   1676c:	       move.l d1,-(sp)
   1676e:	       move.l d0,-(sp)
   16770:	       move.l 60(sp),-(sp)
   16774:	       move.l 60(sp),-(sp)
   16778:	       jsr 17afe <__divdf3>
   1677e:	       lea 16(sp),sp
   16782:	       move.l d0,16(sp)
   16786:	       move.l d1,20(sp)
   1678a:	       move.l 16(sp),48(sp)
   16790:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16796:	       clr.l -(sp)
   16798:	       clr.l -(sp)
   1679a:	       move.l 60(sp),-(sp)
   1679e:	       move.l 60(sp),-(sp)
   167a2:	       jsr 17e82 <__ltdf2>
   167a8:	       lea 16(sp),sp
   167ac:	       tst.l d0
   167ae:	   ,-- bge.s 167c4 <closestPointOnLine+0x14e>
		*closestX = x1;
   167b0:	   |   movea.l 72(sp),a0
   167b4:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   167b8:	   |   movea.l 76(sp),a0
   167bc:	   |   move.l 84(sp),(a0)
   167c0:	,--|-- bra.w 16892 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   167c4:	|  '-> clr.l -(sp)
   167c6:	|      move.l #1072693248,-(sp)
   167cc:	|      move.l 60(sp),-(sp)
   167d0:	|      move.l 60(sp),-(sp)
   167d4:	|      jsr 17dc8 <__gtdf2>
   167da:	|      lea 16(sp),sp
   167de:	|      tst.l d0
   167e0:	|  ,-- ble.s 167f6 <closestPointOnLine+0x180>
		*closestX = x2;
   167e2:	|  |   movea.l 72(sp),a0
   167e6:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   167ea:	|  |   movea.l 76(sp),a0
   167ee:	|  |   move.l 92(sp),(a0)
   167f2:	+--|-- bra.w 16892 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   167f6:	|  '-> move.l 64(sp),-(sp)
   167fa:	|      move.l 64(sp),-(sp)
   167fe:	|      move.l 60(sp),-(sp)
   16802:	|      move.l 60(sp),-(sp)
   16806:	|      jsr 17cfa <__muldf3>
   1680c:	|      lea 16(sp),sp
   16810:	|      move.l d0,8(sp)
   16814:	|      move.l d1,12(sp)
   16818:	|      move.l 8(sp),40(sp)
   1681e:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16824:	|      move.l 44(sp),-(sp)
   16828:	|      move.l 44(sp),-(sp)
   1682c:	|      jsr 17c0c <__fixdfsi>
   16832:	|      addq.l #8,sp
   16834:	|      movea.l 72(sp),a0
   16838:	|      move.l d0,(a0)
		*closestX += x1;
   1683a:	|      movea.l 72(sp),a0
   1683e:	|      move.l (a0),d0
   16840:	|      add.l 80(sp),d0
   16844:	|      movea.l 72(sp),a0
   16848:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1684a:	|      move.l 56(sp),-(sp)
   1684e:	|      jsr 17c6a <__floatsidf>
   16854:	|      addq.l #4,sp
   16856:	|      move.l 52(sp),-(sp)
   1685a:	|      move.l 52(sp),-(sp)
   1685e:	|      move.l d1,-(sp)
   16860:	|      move.l d0,-(sp)
   16862:	|      jsr 17cfa <__muldf3>
   16868:	|      lea 16(sp),sp
   1686c:	|      move.l d1,-(sp)
   1686e:	|      move.l d0,-(sp)
   16870:	|      jsr 17c0c <__fixdfsi>
   16876:	|      addq.l #8,sp
   16878:	|      movea.l 76(sp),a0
   1687c:	|      move.l d0,(a0)
		*closestY += y1;
   1687e:	|      movea.l 76(sp),a0
   16882:	|      move.l (a0),d0
   16884:	|      add.l 84(sp),d0
   16888:	|      movea.l 76(sp),a0
   1688c:	|      move.l d0,(a0)
		return TRUE;
   1688e:	|      moveq #1,d0
   16890:	|  ,-- bra.s 16894 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16892:	'--|-> clr.w d0
}
   16894:	   '-> move.l (sp)+,d2
   16896:	       move.l (sp)+,d3
   16898:	       lea 60(sp),sp
   1689c:	       rts

0001689e <drawFloor>:

void drawFloor() {
   1689e:	                lea -12(sp),sp
   168a2:	                move.l d3,-(sp)
   168a4:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   168a6:	                clr.l 16(sp)
   168aa:	   ,----------- bra.w 16abe <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   168ae:	,--|----------> movea.l 1d1de <currentFloor>,a0
   168b4:	|  |            move.l 12(a0),d1
   168b8:	|  |            move.l 16(sp),d0
   168bc:	|  |            lsl.l #3,d0
   168be:	|  |            movea.l d1,a0
   168c0:	|  |            adda.l d0,a0
   168c2:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   168c6:	|  |            moveq #1,d0
   168c8:	|  |            cmp.l 8(sp),d0
   168cc:	|  |  ,-------- bge.w 16aba <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   168d0:	|  |  |         moveq #1,d0
   168d2:	|  |  |         move.l d0,12(sp)
   168d6:	|  |  |     ,-- bra.w 169d0 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   168da:	|  |  |  ,--|-> movea.l 1d1de <currentFloor>,a0
   168e0:	|  |  |  |  |   move.l 4(a0),d1
   168e4:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   168ea:	|  |  |  |  |   movea.l 12(a0),a0
   168ee:	|  |  |  |  |   move.l 16(sp),d0
   168f2:	|  |  |  |  |   lsl.l #3,d0
   168f4:	|  |  |  |  |   adda.l d0,a0
   168f6:	|  |  |  |  |   movea.l 4(a0),a0
   168fa:	|  |  |  |  |   move.l 12(sp),d0
   168fe:	|  |  |  |  |   add.l d0,d0
   16900:	|  |  |  |  |   add.l d0,d0
   16902:	|  |  |  |  |   adda.l d0,a0
   16904:	|  |  |  |  |   move.l (a0),d0
   16906:	|  |  |  |  |   lsl.l #3,d0
   16908:	|  |  |  |  |   movea.l d1,a0
   1690a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1690c:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16910:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   16916:	|  |  |  |  |   move.l 4(a0),d1
   1691a:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   16920:	|  |  |  |  |   movea.l 12(a0),a0
   16924:	|  |  |  |  |   move.l 16(sp),d0
   16928:	|  |  |  |  |   lsl.l #3,d0
   1692a:	|  |  |  |  |   adda.l d0,a0
   1692c:	|  |  |  |  |   movea.l 4(a0),a0
   16930:	|  |  |  |  |   move.l 12(sp),d0
   16934:	|  |  |  |  |   add.l d0,d0
   16936:	|  |  |  |  |   add.l d0,d0
   16938:	|  |  |  |  |   adda.l d0,a0
   1693a:	|  |  |  |  |   move.l (a0),d0
   1693c:	|  |  |  |  |   lsl.l #3,d0
   1693e:	|  |  |  |  |   movea.l d1,a0
   16940:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16942:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16944:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   1694a:	|  |  |  |  |   move.l 4(a0),d1
   1694e:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   16954:	|  |  |  |  |   movea.l 12(a0),a0
   16958:	|  |  |  |  |   move.l 16(sp),d0
   1695c:	|  |  |  |  |   lsl.l #3,d0
   1695e:	|  |  |  |  |   adda.l d0,a0
   16960:	|  |  |  |  |   movea.l 4(a0),a0
   16964:	|  |  |  |  |   move.l 12(sp),d0
   16968:	|  |  |  |  |   addi.l #1073741823,d0
   1696e:	|  |  |  |  |   add.l d0,d0
   16970:	|  |  |  |  |   add.l d0,d0
   16972:	|  |  |  |  |   adda.l d0,a0
   16974:	|  |  |  |  |   move.l (a0),d0
   16976:	|  |  |  |  |   lsl.l #3,d0
   16978:	|  |  |  |  |   movea.l d1,a0
   1697a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1697c:	|  |  |  |  |   move.l 4(a0),d1
   16980:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   16986:	|  |  |  |  |   move.l 4(a0),d3
   1698a:	|  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   16990:	|  |  |  |  |   movea.l 12(a0),a0
   16994:	|  |  |  |  |   move.l 16(sp),d0
   16998:	|  |  |  |  |   lsl.l #3,d0
   1699a:	|  |  |  |  |   adda.l d0,a0
   1699c:	|  |  |  |  |   movea.l 4(a0),a0
   169a0:	|  |  |  |  |   move.l 12(sp),d0
   169a4:	|  |  |  |  |   addi.l #1073741823,d0
   169aa:	|  |  |  |  |   add.l d0,d0
   169ac:	|  |  |  |  |   add.l d0,d0
   169ae:	|  |  |  |  |   adda.l d0,a0
   169b0:	|  |  |  |  |   move.l (a0),d0
   169b2:	|  |  |  |  |   lsl.l #3,d0
   169b4:	|  |  |  |  |   movea.l d3,a0
   169b6:	|  |  |  |  |   adda.l d0,a0
   169b8:	|  |  |  |  |   move.l (a0),d0
   169ba:	|  |  |  |  |   move.l d2,-(sp)
   169bc:	|  |  |  |  |   move.l a1,-(sp)
   169be:	|  |  |  |  |   move.l d1,-(sp)
   169c0:	|  |  |  |  |   move.l d0,-(sp)
   169c2:	|  |  |  |  |   jsr 4c88 <drawLine>
   169c8:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   169cc:	|  |  |  |  |   addq.l #1,12(sp)
   169d0:	|  |  |  |  '-> move.l 12(sp),d0
   169d4:	|  |  |  |      cmp.l 8(sp),d0
   169d8:	|  |  |  '----- blt.w 168da <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   169dc:	|  |  |         movea.l 1d1de <currentFloor>,a0
   169e2:	|  |  |         move.l 4(a0),d1
   169e6:	|  |  |         movea.l 1d1de <currentFloor>,a0
   169ec:	|  |  |         movea.l 12(a0),a0
   169f0:	|  |  |         move.l 16(sp),d0
   169f4:	|  |  |         lsl.l #3,d0
   169f6:	|  |  |         adda.l d0,a0
   169f8:	|  |  |         movea.l 4(a0),a0
   169fc:	|  |  |         move.l 8(sp),d0
   16a00:	|  |  |         addi.l #1073741823,d0
   16a06:	|  |  |         add.l d0,d0
   16a08:	|  |  |         add.l d0,d0
   16a0a:	|  |  |         adda.l d0,a0
   16a0c:	|  |  |         move.l (a0),d0
   16a0e:	|  |  |         lsl.l #3,d0
   16a10:	|  |  |         movea.l d1,a0
   16a12:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16a14:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16a18:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a1e:	|  |  |         move.l 4(a0),d1
   16a22:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a28:	|  |  |         movea.l 12(a0),a0
   16a2c:	|  |  |         move.l 16(sp),d0
   16a30:	|  |  |         lsl.l #3,d0
   16a32:	|  |  |         adda.l d0,a0
   16a34:	|  |  |         movea.l 4(a0),a0
   16a38:	|  |  |         move.l 8(sp),d0
   16a3c:	|  |  |         addi.l #1073741823,d0
   16a42:	|  |  |         add.l d0,d0
   16a44:	|  |  |         add.l d0,d0
   16a46:	|  |  |         adda.l d0,a0
   16a48:	|  |  |         move.l (a0),d0
   16a4a:	|  |  |         lsl.l #3,d0
   16a4c:	|  |  |         movea.l d1,a0
   16a4e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16a50:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16a52:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a58:	|  |  |         move.l 4(a0),d1
   16a5c:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a62:	|  |  |         movea.l 12(a0),a0
   16a66:	|  |  |         move.l 16(sp),d0
   16a6a:	|  |  |         lsl.l #3,d0
   16a6c:	|  |  |         adda.l d0,a0
   16a6e:	|  |  |         movea.l 4(a0),a0
   16a72:	|  |  |         move.l (a0),d0
   16a74:	|  |  |         lsl.l #3,d0
   16a76:	|  |  |         movea.l d1,a0
   16a78:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16a7a:	|  |  |         move.l 4(a0),d1
   16a7e:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a84:	|  |  |         move.l 4(a0),d3
   16a88:	|  |  |         movea.l 1d1de <currentFloor>,a0
   16a8e:	|  |  |         movea.l 12(a0),a0
   16a92:	|  |  |         move.l 16(sp),d0
   16a96:	|  |  |         lsl.l #3,d0
   16a98:	|  |  |         adda.l d0,a0
   16a9a:	|  |  |         movea.l 4(a0),a0
   16a9e:	|  |  |         move.l (a0),d0
   16aa0:	|  |  |         lsl.l #3,d0
   16aa2:	|  |  |         movea.l d3,a0
   16aa4:	|  |  |         adda.l d0,a0
   16aa6:	|  |  |         move.l (a0),d0
   16aa8:	|  |  |         move.l d2,-(sp)
   16aaa:	|  |  |         move.l a1,-(sp)
   16aac:	|  |  |         move.l d1,-(sp)
   16aae:	|  |  |         move.l d0,-(sp)
   16ab0:	|  |  |         jsr 4c88 <drawLine>
   16ab6:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16aba:	|  |  '-------> addq.l #1,16(sp)
   16abe:	|  '----------> movea.l 1d1de <currentFloor>,a0
   16ac4:	|               move.l 8(a0),d0
   16ac8:	|               cmp.l 16(sp),d0
   16acc:	'-------------- bgt.w 168ae <drawFloor+0x10>
        }
    }
}
   16ad0:	                nop
   16ad2:	                nop
   16ad4:	                move.l (sp)+,d2
   16ad6:	                move.l (sp)+,d3
   16ad8:	                lea 12(sp),sp
   16adc:	                rts

00016ade <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16ade:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16ae2:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16ae6:	                      clr.l 4(sp)
   16aea:	   ,----------------- bra.w 16b7c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16aee:	,--|----------------> clr.l (sp)
   16af0:	|  |     ,----------- bra.s 16b6c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16af2:	|  |  ,--|----------> movea.l 16(sp),a0
   16af6:	|  |  |  |            move.l 4(a0),d1
   16afa:	|  |  |  |            move.l 4(sp),d0
   16afe:	|  |  |  |            add.l d0,d0
   16b00:	|  |  |  |            add.l d0,d0
   16b02:	|  |  |  |            movea.l d1,a0
   16b04:	|  |  |  |            adda.l d0,a0
   16b06:	|  |  |  |            move.l (a0),d1
   16b08:	|  |  |  |            movea.l 20(sp),a0
   16b0c:	|  |  |  |            movea.l 4(a0),a0
   16b10:	|  |  |  |            move.l (sp),d0
   16b12:	|  |  |  |            add.l d0,d0
   16b14:	|  |  |  |            add.l d0,d0
   16b16:	|  |  |  |            adda.l d0,a0
   16b18:	|  |  |  |            move.l (a0),d0
   16b1a:	|  |  |  |            cmp.l d1,d0
   16b1c:	|  |  |  |  ,-------- bne.s 16b6a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16b1e:	|  |  |  |  |         move.l 8(sp),d0
   16b22:	|  |  |  |  |         move.l d0,d1
   16b24:	|  |  |  |  |         addq.l #1,d1
   16b26:	|  |  |  |  |         move.l d1,8(sp)
   16b2a:	|  |  |  |  |         tst.l d0
   16b2c:	|  |  |  |  |     ,-- beq.s 16b4e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16b2e:	|  |  |  |  |     |   movea.l 16(sp),a0
   16b32:	|  |  |  |  |     |   move.l 4(a0),d1
   16b36:	|  |  |  |  |     |   move.l 4(sp),d0
   16b3a:	|  |  |  |  |     |   add.l d0,d0
   16b3c:	|  |  |  |  |     |   add.l d0,d0
   16b3e:	|  |  |  |  |     |   movea.l d1,a0
   16b40:	|  |  |  |  |     |   adda.l d0,a0
   16b42:	|  |  |  |  |     |   move.l (a0),d0
   16b44:	|  |  |  |  |     |   movea.l 28(sp),a0
   16b48:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16b4a:	|  |  |  |  |     |   moveq #1,d0
   16b4c:	|  |  |  |  |  ,--|-- bra.s 16b8c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16b4e:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16b52:	|  |  |  |  |  |      move.l 4(a0),d1
   16b56:	|  |  |  |  |  |      move.l 4(sp),d0
   16b5a:	|  |  |  |  |  |      add.l d0,d0
   16b5c:	|  |  |  |  |  |      add.l d0,d0
   16b5e:	|  |  |  |  |  |      movea.l d1,a0
   16b60:	|  |  |  |  |  |      adda.l d0,a0
   16b62:	|  |  |  |  |  |      move.l (a0),d0
   16b64:	|  |  |  |  |  |      movea.l 24(sp),a0
   16b68:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16b6a:	|  |  |  |  '--|----> addq.l #1,(sp)
   16b6c:	|  |  |  '-----|----> movea.l 20(sp),a0
   16b70:	|  |  |        |      move.l (a0),d0
   16b72:	|  |  |        |      cmp.l (sp),d0
   16b74:	|  |  '--------|----- bgt.w 16af2 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16b78:	|  |           |      addq.l #1,4(sp)
   16b7c:	|  '-----------|----> movea.l 16(sp),a0
   16b80:	|              |      move.l (a0),d0
   16b82:	|              |      cmp.l 4(sp),d0
   16b86:	'--------------|----- bgt.w 16aee <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16b8a:	               |      clr.w d0
}
   16b8c:	               '----> lea 12(sp),sp
   16b90:	                      rts

00016b92 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16b92:	movea.l 1d1de <currentFloor>,a0
   16b98:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16b9c:	movea.l 1d1de <currentFloor>,a0
   16ba2:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16ba6:	movea.l 1d1de <currentFloor>,a0
   16bac:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16bb0:	movea.l 1d1de <currentFloor>,a0
   16bb6:	clr.l 16(a0)
}
   16bba:	nop
   16bbc:	rts

00016bbe <inFloor>:

int inFloor (int x, int y) {
   16bbe:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16bc0:	          pea 1a7e4 <PutChar+0x24ca>
   16bc6:	          jsr 17878 <KPrintF>
   16bcc:	          addq.l #4,sp
	int i, r = -1;
   16bce:	          moveq #-1,d0
   16bd0:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16bd2:	          clr.l 4(sp)
   16bd6:	   ,----- bra.s 16c0a <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16bd8:	,--|----> movea.l 1d1de <currentFloor>,a0
   16bde:	|  |      move.l 12(a0),d1
   16be2:	|  |      move.l 4(sp),d0
   16be6:	|  |      lsl.l #3,d0
   16be8:	|  |      add.l d1,d0
   16bea:	|  |      move.l 16(sp),-(sp)
   16bee:	|  |      move.l 16(sp),-(sp)
   16bf2:	|  |      move.l d0,-(sp)
   16bf4:	|  |      jsr 16de4 <pointInFloorPolygon>
   16bfa:	|  |      lea 12(sp),sp
   16bfe:	|  |      tst.w d0
   16c00:	|  |  ,-- beq.s 16c06 <inFloor+0x48>
			r = i;
   16c02:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16c06:	|  |  '-> addq.l #1,4(sp)
   16c0a:	|  '----> movea.l 1d1de <currentFloor>,a0
   16c10:	|         move.l 8(a0),d0
   16c14:	|         cmp.l 4(sp),d0
   16c18:	'-------- bgt.s 16bd8 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   16c1a:	          pea 1a7f5 <PutChar+0x24db>
   16c20:	          jsr 17878 <KPrintF>
   16c26:	          addq.l #4,sp
	return r;
   16c28:	          move.l (sp),d0
}
   16c2a:	          addq.l #8,sp
   16c2c:	          rts

00016c2e <initFloor>:

BOOL initFloor () {
   16c2e:	       lea -12(sp),sp
   16c32:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16c34:	       moveq #20,d0
   16c36:	       move.l d0,12(sp)
   16c3a:	       clr.l 8(sp)
   16c3e:	       move.l 1d0c6 <SysBase>,d0
   16c44:	       movea.l d0,a6
   16c46:	       move.l 12(sp),d0
   16c4a:	       move.l 8(sp),d1
   16c4e:	       jsr -684(a6)
   16c52:	       move.l d0,4(sp)
   16c56:	       move.l 4(sp),d0
   16c5a:	       move.l d0,1d1de <currentFloor>

    if(currentFloor == 0) {
   16c60:	       move.l 1d1de <currentFloor>,d0
   16c66:	,----- bne.s 16c7a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16c68:	|      pea 1a807 <PutChar+0x24ed>
   16c6e:	|      jsr 17878 <KPrintF>
   16c74:	|      addq.l #4,sp
        return FALSE;
   16c76:	|      clr.w d0
   16c78:	|  ,-- bra.s 16c82 <initFloor+0x54>
    }

	noFloor ();
   16c7a:	'--|-> jsr 16b92 <noFloor>
	return TRUE;
   16c80:	   |   moveq #1,d0
}
   16c82:	   '-> movea.l (sp)+,a6
   16c84:	       lea 12(sp),sp
   16c88:	       rts

00016c8a <killFloor>:

void killFloor () {
   16c8a:	       lea -24(sp),sp
   16c8e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16c90:	       clr.l 24(sp)
   16c94:	   ,-- bra.s 16cee <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16c96:	,--|-> movea.l 1d1de <currentFloor>,a0
   16c9c:	|  |   move.l 12(a0),d1
   16ca0:	|  |   move.l 24(sp),d0
   16ca4:	|  |   lsl.l #3,d0
   16ca6:	|  |   movea.l d1,a0
   16ca8:	|  |   adda.l d0,a0
   16caa:	|  |   move.l 4(a0),8(sp)
   16cb0:	|  |   move.l 1d0c6 <SysBase>,d0
   16cb6:	|  |   movea.l d0,a6
   16cb8:	|  |   movea.l 8(sp),a1
   16cbc:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16cc0:	|  |   movea.l 1d1de <currentFloor>,a0
   16cc6:	|  |   move.l 16(a0),d1
   16cca:	|  |   move.l 24(sp),d0
   16cce:	|  |   add.l d0,d0
   16cd0:	|  |   add.l d0,d0
   16cd2:	|  |   movea.l d1,a0
   16cd4:	|  |   adda.l d0,a0
   16cd6:	|  |   move.l (a0),4(sp)
   16cda:	|  |   move.l 1d0c6 <SysBase>,d0
   16ce0:	|  |   movea.l d0,a6
   16ce2:	|  |   movea.l 4(sp),a1
   16ce6:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16cea:	|  |   addq.l #1,24(sp)
   16cee:	|  '-> movea.l 1d1de <currentFloor>,a0
   16cf4:	|      move.l 8(a0),d0
   16cf8:	|      cmp.l 24(sp),d0
   16cfc:	'----- bgt.s 16c96 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16cfe:	       movea.l 1d1de <currentFloor>,a0
   16d04:	       move.l 12(a0),20(sp)
   16d0a:	       move.l 1d0c6 <SysBase>,d0
   16d10:	       movea.l d0,a6
   16d12:	       movea.l 20(sp),a1
   16d16:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16d1a:	       movea.l 1d1de <currentFloor>,a0
   16d20:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16d24:	       movea.l 1d1de <currentFloor>,a0
   16d2a:	       move.l 4(a0),16(sp)
   16d30:	       move.l 1d0c6 <SysBase>,d0
   16d36:	       movea.l d0,a6
   16d38:	       movea.l 16(sp),a1
   16d3c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16d40:	       movea.l 1d1de <currentFloor>,a0
   16d46:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16d4a:	       movea.l 1d1de <currentFloor>,a0
   16d50:	       move.l 16(a0),12(sp)
   16d56:	       move.l 1d0c6 <SysBase>,d0
   16d5c:	       movea.l d0,a6
   16d5e:	       movea.l 12(sp),a1
   16d62:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16d66:	       movea.l 1d1de <currentFloor>,a0
   16d6c:	       clr.l 16(a0)
}
   16d70:	       nop
   16d72:	       movea.l (sp)+,a6
   16d74:	       lea 24(sp),sp
   16d78:	       rts

00016d7a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16d7a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16d7e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16d82:	                   clr.l 4(sp)
   16d86:	   ,-------------- bra.s 16dd2 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16d88:	,--|-------------> clr.l (sp)
   16d8a:	|  |     ,-------- bra.s 16dc6 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16d8c:	|  |  ,--|-------> move.l 20(sp),d1
   16d90:	|  |  |  |         move.l 4(sp),d0
   16d94:	|  |  |  |         add.l d0,d0
   16d96:	|  |  |  |         add.l d0,d0
   16d98:	|  |  |  |         movea.l d1,a0
   16d9a:	|  |  |  |         adda.l d0,a0
   16d9c:	|  |  |  |         move.l (a0),d1
   16d9e:	|  |  |  |         movea.l 28(sp),a0
   16da2:	|  |  |  |         move.l (sp),d0
   16da4:	|  |  |  |         add.l d0,d0
   16da6:	|  |  |  |         add.l d0,d0
   16da8:	|  |  |  |         adda.l d0,a0
   16daa:	|  |  |  |         move.l (a0),d0
   16dac:	|  |  |  |         cmp.l d1,d0
   16dae:	|  |  |  |     ,-- bne.s 16dc4 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16db0:	|  |  |  |     |   move.l 8(sp),d0
   16db4:	|  |  |  |     |   move.l d0,d1
   16db6:	|  |  |  |     |   addq.l #1,d1
   16db8:	|  |  |  |     |   move.l d1,8(sp)
   16dbc:	|  |  |  |     |   tst.l d0
   16dbe:	|  |  |  |     +-- beq.s 16dc4 <polysShareSide+0x4a>
   16dc0:	|  |  |  |     |   moveq #1,d0
   16dc2:	|  |  |  |  ,--|-- bra.s 16dde <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16dc4:	|  |  |  |  |  '-> addq.l #1,(sp)
   16dc6:	|  |  |  '--|----> move.l 24(sp),d0
   16dca:	|  |  |     |      cmp.l (sp),d0
   16dcc:	|  |  '-----|----- bgt.s 16d8c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16dce:	|  |        |      addq.l #1,4(sp)
   16dd2:	|  '--------|----> move.l 16(sp),d0
   16dd6:	|           |      cmp.l 4(sp),d0
   16dda:	'-----------|----- bgt.s 16d88 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16ddc:	            |      clr.w d0
}
   16dde:	            '----> lea 12(sp),sp
   16de2:	                   rts

00016de4 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16de4:	             lea -28(sp),sp
   16de8:	             move.l d3,-(sp)
   16dea:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16dec:	             clr.l 32(sp)
   16df0:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16df4:	             movea.l 40(sp),a0
   16df8:	             move.l (a0),d0
   16dfa:	             move.l d0,d1
   16dfc:	             subq.l #1,d1
   16dfe:	             move.l d1,28(sp)
   16e02:	   ,-------- bra.w 16ffc <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16e06:	,--|-------> movea.l 1d1de <currentFloor>,a0
   16e0c:	|  |         move.l 4(a0),d1
   16e10:	|  |         movea.l 40(sp),a0
   16e14:	|  |         movea.l 4(a0),a0
   16e18:	|  |         move.l 32(sp),d0
   16e1c:	|  |         add.l d0,d0
   16e1e:	|  |         add.l d0,d0
   16e20:	|  |         adda.l d0,a0
   16e22:	|  |         move.l (a0),d0
   16e24:	|  |         lsl.l #3,d0
   16e26:	|  |         movea.l d1,a0
   16e28:	|  |         adda.l d0,a0
   16e2a:	|  |         move.l (a0),d0
   16e2c:	|  |         move.l d0,-(sp)
   16e2e:	|  |         jsr 17caa <__floatsisf>
   16e34:	|  |         addq.l #4,sp
   16e36:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16e3a:	|  |         movea.l 1d1de <currentFloor>,a0
   16e40:	|  |         move.l 4(a0),d1
   16e44:	|  |         movea.l 40(sp),a0
   16e48:	|  |         movea.l 4(a0),a0
   16e4c:	|  |         move.l 32(sp),d0
   16e50:	|  |         add.l d0,d0
   16e52:	|  |         add.l d0,d0
   16e54:	|  |         adda.l d0,a0
   16e56:	|  |         move.l (a0),d0
   16e58:	|  |         lsl.l #3,d0
   16e5a:	|  |         movea.l d1,a0
   16e5c:	|  |         adda.l d0,a0
   16e5e:	|  |         move.l 4(a0),d0
   16e62:	|  |         move.l d0,-(sp)
   16e64:	|  |         jsr 17caa <__floatsisf>
   16e6a:	|  |         addq.l #4,sp
   16e6c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16e70:	|  |         movea.l 1d1de <currentFloor>,a0
   16e76:	|  |         move.l 4(a0),d1
   16e7a:	|  |         movea.l 40(sp),a0
   16e7e:	|  |         movea.l 4(a0),a0
   16e82:	|  |         move.l 28(sp),d0
   16e86:	|  |         add.l d0,d0
   16e88:	|  |         add.l d0,d0
   16e8a:	|  |         adda.l d0,a0
   16e8c:	|  |         move.l (a0),d0
   16e8e:	|  |         lsl.l #3,d0
   16e90:	|  |         movea.l d1,a0
   16e92:	|  |         adda.l d0,a0
   16e94:	|  |         move.l (a0),d0
   16e96:	|  |         move.l d0,-(sp)
   16e98:	|  |         jsr 17caa <__floatsisf>
   16e9e:	|  |         addq.l #4,sp
   16ea0:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16ea4:	|  |         movea.l 1d1de <currentFloor>,a0
   16eaa:	|  |         move.l 4(a0),d1
   16eae:	|  |         movea.l 40(sp),a0
   16eb2:	|  |         movea.l 4(a0),a0
   16eb6:	|  |         move.l 28(sp),d0
   16eba:	|  |         add.l d0,d0
   16ebc:	|  |         add.l d0,d0
   16ebe:	|  |         adda.l d0,a0
   16ec0:	|  |         move.l (a0),d0
   16ec2:	|  |         lsl.l #3,d0
   16ec4:	|  |         movea.l d1,a0
   16ec6:	|  |         adda.l d0,a0
   16ec8:	|  |         move.l 4(a0),d0
   16ecc:	|  |         move.l d0,-(sp)
   16ece:	|  |         jsr 17caa <__floatsisf>
   16ed4:	|  |         addq.l #4,sp
   16ed6:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16eda:	|  |         move.l 48(sp),-(sp)
   16ede:	|  |         jsr 17caa <__floatsisf>
   16ee4:	|  |         addq.l #4,sp
   16ee6:	|  |         move.l d0,-(sp)
   16ee8:	|  |         move.l 20(sp),-(sp)
   16eec:	|  |         jsr 17e4c <__lesf2>
   16ef2:	|  |         addq.l #8,sp
   16ef4:	|  |         tst.l d0
   16ef6:	|  |     ,-- bgt.s 16f16 <pointInFloorPolygon+0x132>
   16ef8:	|  |     |   move.l 48(sp),-(sp)
   16efc:	|  |     |   jsr 17caa <__floatsisf>
   16f02:	|  |     |   addq.l #4,sp
   16f04:	|  |     |   move.l d0,-(sp)
   16f06:	|  |     |   move.l 12(sp),-(sp)
   16f0a:	|  |     |   jsr 17e16 <__gtsf2>
   16f10:	|  |     |   addq.l #8,sp
   16f12:	|  |     |   tst.l d0
   16f14:	|  |  ,--|-- bgt.s 16f56 <pointInFloorPolygon+0x172>
   16f16:	|  |  |  '-> move.l 48(sp),-(sp)
   16f1a:	|  |  |      jsr 17caa <__floatsisf>
   16f20:	|  |  |      addq.l #4,sp
   16f22:	|  |  |      move.l d0,-(sp)
   16f24:	|  |  |      move.l 12(sp),-(sp)
   16f28:	|  |  |      jsr 17e4c <__lesf2>
   16f2e:	|  |  |      addq.l #8,sp
   16f30:	|  |  |      tst.l d0
   16f32:	|  |  |  ,-- bgt.w 16fec <pointInFloorPolygon+0x208>
   16f36:	|  |  |  |   move.l 48(sp),-(sp)
   16f3a:	|  |  |  |   jsr 17caa <__floatsisf>
   16f40:	|  |  |  |   addq.l #4,sp
   16f42:	|  |  |  |   move.l d0,-(sp)
   16f44:	|  |  |  |   move.l 20(sp),-(sp)
   16f48:	|  |  |  |   jsr 17e16 <__gtsf2>
   16f4e:	|  |  |  |   addq.l #8,sp
   16f50:	|  |  |  |   tst.l d0
   16f52:	|  |  |  +-- ble.w 16fec <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16f56:	|  |  '--|-> move.l 44(sp),-(sp)
   16f5a:	|  |     |   jsr 17caa <__floatsisf>
   16f60:	|  |     |   addq.l #4,sp
   16f62:	|  |     |   move.l d0,d3
   16f64:	|  |     |   move.l 20(sp),-(sp)
   16f68:	|  |     |   move.l 16(sp),-(sp)
   16f6c:	|  |     |   jsr 17f9e <__subsf3>
   16f72:	|  |     |   addq.l #8,sp
   16f74:	|  |     |   move.l d0,d2
   16f76:	|  |     |   move.l 48(sp),-(sp)
   16f7a:	|  |     |   jsr 17caa <__floatsisf>
   16f80:	|  |     |   addq.l #4,sp
   16f82:	|  |     |   move.l 16(sp),-(sp)
   16f86:	|  |     |   move.l d0,-(sp)
   16f88:	|  |     |   jsr 17f9e <__subsf3>
   16f8e:	|  |     |   addq.l #8,sp
   16f90:	|  |     |   move.l d0,-(sp)
   16f92:	|  |     |   move.l d2,-(sp)
   16f94:	|  |     |   jsr 17d5c <__mulsf3>
   16f9a:	|  |     |   addq.l #8,sp
   16f9c:	|  |     |   move.l d0,d2
   16f9e:	|  |     |   move.l 16(sp),-(sp)
   16fa2:	|  |     |   move.l 12(sp),-(sp)
   16fa6:	|  |     |   jsr 17f9e <__subsf3>
   16fac:	|  |     |   addq.l #8,sp
   16fae:	|  |     |   move.l d0,-(sp)
   16fb0:	|  |     |   move.l d2,-(sp)
   16fb2:	|  |     |   jsr 17b60 <__divsf3>
   16fb8:	|  |     |   addq.l #8,sp
   16fba:	|  |     |   move.l 20(sp),-(sp)
   16fbe:	|  |     |   move.l d0,-(sp)
   16fc0:	|  |     |   jsr 17a66 <__addsf3>
   16fc6:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16fc8:	|  |     |   move.l d0,-(sp)
   16fca:	|  |     |   move.l d3,-(sp)
   16fcc:	|  |     |   jsr 17ed0 <__ltsf2>
   16fd2:	|  |     |   addq.l #8,sp
   16fd4:	|  |     |   tst.l d0
   16fd6:	|  |     +-- bge.s 16fec <pointInFloorPolygon+0x208>

			c = !c;
   16fd8:	|  |     |   tst.l 24(sp)
   16fdc:	|  |     |   seq d0
   16fde:	|  |     |   neg.b d0
   16fe0:	|  |     |   move.b d0,d0
   16fe2:	|  |     |   andi.l #255,d0
   16fe8:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16fec:	|  |     '-> move.l 32(sp),d0
   16ff0:	|  |         move.l d0,d1
   16ff2:	|  |         addq.l #1,d1
   16ff4:	|  |         move.l d1,32(sp)
   16ff8:	|  |         move.l d0,28(sp)
   16ffc:	|  '-------> movea.l 40(sp),a0
   17000:	|            move.l (a0),d0
   17002:	|            cmp.l 32(sp),d0
   17006:	'----------- bgt.w 16e06 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1700a:	             tst.l 24(sp)
   1700e:	             sne d0
   17010:	             neg.b d0
   17012:	             move.b d0,d0
   17014:	             andi.w #255,d0
}
   17018:	             move.l (sp)+,d2
   1701a:	             move.l (sp)+,d3
   1701c:	             lea 28(sp),sp
   17020:	             rts

00017022 <setFloor>:

BOOL setFloor (int fileNum) {
   17022:	                               lea -132(sp),sp
   17026:	                               move.l a6,-(sp)
   17028:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1702a:	                               jsr 16c8a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   17030:	                               move.l 144(sp),-(sp)
   17034:	                               jsr 7cac <openFileFromNum>
   1703a:	                               addq.l #4,sp
   1703c:	                               tst.l d0
   1703e:	                           ,-- bne.s 17046 <setFloor+0x24>
   17040:	                           |   clr.w d0
   17042:	,--------------------------|-- bra.w 17792 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17046:	|                          '-> movea.l 1d1de <currentFloor>,a0
   1704c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17050:	|                              move.l 1d0ae <bigDataFile>,118(sp)
   17058:	|                              move.l 1d0ce <DOSBase>,d0
   1705e:	|                              movea.l d0,a6
   17060:	|                              move.l 118(sp),d1
   17064:	|                              jsr -306(a6)
   17068:	|                              move.l d0,114(sp)
   1706c:	|                              move.l 114(sp),d0
   17070:	|                              movea.l 1d1de <currentFloor>,a0
   17076:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1707a:	|                              movea.l 1d1de <currentFloor>,a0
   17080:	|                              move.l 8(a0),d0
   17084:	|                              lsl.l #3,d0
   17086:	|                              move.l d0,110(sp)
   1708a:	|                              clr.l 106(sp)
   1708e:	|                              move.l 1d0c6 <SysBase>,d0
   17094:	|                              movea.l d0,a6
   17096:	|                              move.l 110(sp),d0
   1709a:	|                              move.l 106(sp),d1
   1709e:	|                              jsr -684(a6)
   170a2:	|                              move.l d0,102(sp)
   170a6:	|                              move.l 102(sp),d0
   170aa:	|                              movea.l 1d1de <currentFloor>,a0
   170b0:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   170b4:	|                              movea.l 1d1de <currentFloor>,a0
   170ba:	|                              move.l 12(a0),d0
   170be:	|                          ,-- bne.s 170d4 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   170c0:	|                          |   pea 1a82b <PutChar+0x2511>
   170c6:	|                          |   jsr 17878 <KPrintF>
   170cc:	|                          |   addq.l #4,sp
		return FALSE;
   170ce:	|                          |   clr.w d0
   170d0:	+--------------------------|-- bra.w 17792 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170d4:	|                          '-> clr.l 136(sp)
   170d8:	|                    ,-------- bra.w 171f0 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   170dc:	|                 ,--|-------> move.l 1d0ae <bigDataFile>,26(sp)
   170e4:	|                 |  |         move.l 1d0ce <DOSBase>,d0
   170ea:	|                 |  |         movea.l d0,a6
   170ec:	|                 |  |         move.l 26(sp),d1
   170f0:	|                 |  |         jsr -306(a6)
   170f4:	|                 |  |         move.l d0,22(sp)
   170f8:	|                 |  |         move.l 22(sp),d1
   170fc:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   17102:	|                 |  |         movea.l 12(a0),a0
   17106:	|                 |  |         move.l 136(sp),d0
   1710a:	|                 |  |         lsl.l #3,d0
   1710c:	|                 |  |         adda.l d0,a0
   1710e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17110:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   17116:	|                 |  |         move.l 12(a0),d1
   1711a:	|                 |  |         move.l 136(sp),d0
   1711e:	|                 |  |         lsl.l #3,d0
   17120:	|                 |  |         movea.l d1,a0
   17122:	|                 |  |         adda.l d0,a0
   17124:	|                 |  |         move.l (a0),d0
   17126:	|                 |  |         add.l d0,d0
   17128:	|                 |  |         add.l d0,d0
   1712a:	|                 |  |         move.l d0,18(sp)
   1712e:	|                 |  |         clr.l 14(sp)
   17132:	|                 |  |         move.l 1d0c6 <SysBase>,d0
   17138:	|                 |  |         movea.l d0,a6
   1713a:	|                 |  |         move.l 18(sp),d0
   1713e:	|                 |  |         move.l 14(sp),d1
   17142:	|                 |  |         jsr -684(a6)
   17146:	|                 |  |         move.l d0,10(sp)
   1714a:	|                 |  |         move.l 10(sp),d1
   1714e:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   17154:	|                 |  |         movea.l 12(a0),a0
   17158:	|                 |  |         move.l 136(sp),d0
   1715c:	|                 |  |         lsl.l #3,d0
   1715e:	|                 |  |         adda.l d0,a0
   17160:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17164:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   1716a:	|                 |  |         move.l 12(a0),d1
   1716e:	|                 |  |         move.l 136(sp),d0
   17172:	|                 |  |         lsl.l #3,d0
   17174:	|                 |  |         movea.l d1,a0
   17176:	|                 |  |         adda.l d0,a0
   17178:	|                 |  |         move.l 4(a0),d0
   1717c:	|                 |  |     ,-- bne.s 17192 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1717e:	|                 |  |     |   pea 1a82b <PutChar+0x2511>
   17184:	|                 |  |     |   jsr 17878 <KPrintF>
   1718a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1718c:	|                 |  |     |   clr.w d0
   1718e:	+-----------------|--|-----|-- bra.w 17792 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17192:	|                 |  |     '-> clr.l 132(sp)
   17196:	|                 |  |     ,-- bra.s 171d0 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   17198:	|                 |  |  ,--|-> move.l 1d0ae <bigDataFile>,d1
   1719e:	|                 |  |  |  |   movea.l 1d1de <currentFloor>,a0
   171a4:	|                 |  |  |  |   movea.l 12(a0),a0
   171a8:	|                 |  |  |  |   move.l 136(sp),d0
   171ac:	|                 |  |  |  |   lsl.l #3,d0
   171ae:	|                 |  |  |  |   adda.l d0,a0
   171b0:	|                 |  |  |  |   movea.l 4(a0),a0
   171b4:	|                 |  |  |  |   move.l 132(sp),d0
   171b8:	|                 |  |  |  |   add.l d0,d0
   171ba:	|                 |  |  |  |   add.l d0,d0
   171bc:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   171c0:	|                 |  |  |  |   move.l d1,-(sp)
   171c2:	|                 |  |  |  |   jsr 6bc <get2bytes>
   171c8:	|                 |  |  |  |   addq.l #4,sp
   171ca:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   171cc:	|                 |  |  |  |   addq.l #1,132(sp)
   171d0:	|                 |  |  |  '-> movea.l 1d1de <currentFloor>,a0
   171d6:	|                 |  |  |      move.l 12(a0),d1
   171da:	|                 |  |  |      move.l 136(sp),d0
   171de:	|                 |  |  |      lsl.l #3,d0
   171e0:	|                 |  |  |      movea.l d1,a0
   171e2:	|                 |  |  |      adda.l d0,a0
   171e4:	|                 |  |  |      move.l (a0),d0
   171e6:	|                 |  |  |      cmp.l 132(sp),d0
   171ea:	|                 |  |  '----- bgt.s 17198 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   171ec:	|                 |  |         addq.l #1,136(sp)
   171f0:	|                 |  '-------> movea.l 1d1de <currentFloor>,a0
   171f6:	|                 |            move.l 8(a0),d0
   171fa:	|                 |            cmp.l 136(sp),d0
   171fe:	|                 '----------- bgt.w 170dc <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17202:	|                              move.l 1d0ae <bigDataFile>,d0
   17208:	|                              move.l d0,-(sp)
   1720a:	|                              jsr 6bc <get2bytes>
   17210:	|                              addq.l #4,sp
   17212:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17216:	|                              move.l 136(sp),d0
   1721a:	|                              lsl.l #3,d0
   1721c:	|                              move.l d0,98(sp)
   17220:	|                              clr.l 94(sp)
   17224:	|                              move.l 1d0c6 <SysBase>,d0
   1722a:	|                              movea.l d0,a6
   1722c:	|                              move.l 98(sp),d0
   17230:	|                              move.l 94(sp),d1
   17234:	|                              jsr -684(a6)
   17238:	|                              move.l d0,90(sp)
   1723c:	|                              move.l 90(sp),d0
   17240:	|                              movea.l 1d1de <currentFloor>,a0
   17246:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1724a:	|                              movea.l 1d1de <currentFloor>,a0
   17250:	|                              move.l 4(a0),d0
   17254:	|                          ,-- bne.s 1726a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17256:	|                          |   pea 1a82b <PutChar+0x2511>
   1725c:	|                          |   jsr 17878 <KPrintF>
   17262:	|                          |   addq.l #4,sp
		return FALSE;
   17264:	|                          |   clr.w d0
   17266:	+--------------------------|-- bra.w 17792 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1726a:	|                          '-> clr.l 132(sp)
   1726e:	|                          ,-- bra.s 172c2 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17270:	|                       ,--|-> move.l 1d0ae <bigDataFile>,d1
   17276:	|                       |  |   movea.l 1d1de <currentFloor>,a0
   1727c:	|                       |  |   movea.l 4(a0),a0
   17280:	|                       |  |   move.l 132(sp),d0
   17284:	|                       |  |   lsl.l #3,d0
   17286:	|                       |  |   lea (0,a0,d0.l),a2
   1728a:	|                       |  |   move.l d1,-(sp)
   1728c:	|                       |  |   jsr 6bc <get2bytes>
   17292:	|                       |  |   addq.l #4,sp
   17294:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17296:	|                       |  |   move.l 1d0ae <bigDataFile>,d1
   1729c:	|                       |  |   movea.l 1d1de <currentFloor>,a0
   172a2:	|                       |  |   movea.l 4(a0),a0
   172a6:	|                       |  |   move.l 132(sp),d0
   172aa:	|                       |  |   lsl.l #3,d0
   172ac:	|                       |  |   lea (0,a0,d0.l),a2
   172b0:	|                       |  |   move.l d1,-(sp)
   172b2:	|                       |  |   jsr 6bc <get2bytes>
   172b8:	|                       |  |   addq.l #4,sp
   172ba:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   172be:	|                       |  |   addq.l #1,132(sp)
   172c2:	|                       |  '-> move.l 132(sp),d0
   172c6:	|                       |      cmp.l 136(sp),d0
   172ca:	|                       '----- blt.s 17270 <setFloor+0x24e>
	}

	finishAccess ();
   172cc:	|                              jsr 7ba4 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   172d2:	|                              movea.l 1d1de <currentFloor>,a0
   172d8:	|                              move.l 8(a0),d0
   172dc:	|                              add.l d0,d0
   172de:	|                              add.l d0,d0
   172e0:	|                              move.l d0,86(sp)
   172e4:	|                              clr.l 82(sp)
   172e8:	|                              move.l 1d0c6 <SysBase>,d0
   172ee:	|                              movea.l d0,a6
   172f0:	|                              move.l 86(sp),d0
   172f4:	|                              move.l 82(sp),d1
   172f8:	|                              jsr -684(a6)
   172fc:	|                              move.l d0,78(sp)
   17300:	|                              move.l 78(sp),d0
   17304:	|                              movea.l 1d1de <currentFloor>,a0
   1730a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1730e:	|                              movea.l 1d1de <currentFloor>,a0
   17314:	|                              move.l 8(a0),d0
   17318:	|                              add.l d0,d0
   1731a:	|                              add.l d0,d0
   1731c:	|                              move.l d0,74(sp)
   17320:	|                              clr.l 70(sp)
   17324:	|                              move.l 1d0c6 <SysBase>,d0
   1732a:	|                              movea.l d0,a6
   1732c:	|                              move.l 74(sp),d0
   17330:	|                              move.l 70(sp),d1
   17334:	|                              jsr -684(a6)
   17338:	|                              move.l d0,66(sp)
   1733c:	|                              move.l 66(sp),d0
   17340:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17344:	|                              movea.l 1d1de <currentFloor>,a0
   1734a:	|                              move.l 16(a0),d0
   1734e:	|                          ,-- bne.s 17364 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17350:	|                          |   pea 1a82b <PutChar+0x2511>
   17356:	|                          |   jsr 17878 <KPrintF>
   1735c:	|                          |   addq.l #4,sp
		return FALSE;
   1735e:	|                          |   clr.w d0
   17360:	+--------------------------|-- bra.w 17792 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17364:	|                          '-> clr.l 136(sp)
   17368:	|                    ,-------- bra.w 1748c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1736c:	|                 ,--|-------> movea.l 1d1de <currentFloor>,a0
   17372:	|                 |  |         move.l 8(a0),d0
   17376:	|                 |  |         add.l d0,d0
   17378:	|                 |  |         add.l d0,d0
   1737a:	|                 |  |         move.l d0,50(sp)
   1737e:	|                 |  |         clr.l 46(sp)
   17382:	|                 |  |         move.l 1d0c6 <SysBase>,d0
   17388:	|                 |  |         movea.l d0,a6
   1738a:	|                 |  |         move.l 50(sp),d0
   1738e:	|                 |  |         move.l 46(sp),d1
   17392:	|                 |  |         jsr -684(a6)
   17396:	|                 |  |         move.l d0,42(sp)
   1739a:	|                 |  |         move.l 42(sp),d0
   1739e:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   173a4:	|                 |  |         movea.l 16(a0),a0
   173a8:	|                 |  |         move.l 136(sp),d1
   173ac:	|                 |  |         add.l d1,d1
   173ae:	|                 |  |         add.l d1,d1
   173b0:	|                 |  |         adda.l d1,a0
   173b2:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   173b4:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   173ba:	|                 |  |         move.l 8(a0),d0
   173be:	|                 |  |         add.l d0,d0
   173c0:	|                 |  |         add.l d0,d0
   173c2:	|                 |  |         move.l d0,38(sp)
   173c6:	|                 |  |         clr.l 34(sp)
   173ca:	|                 |  |         move.l 1d0c6 <SysBase>,d0
   173d0:	|                 |  |         movea.l d0,a6
   173d2:	|                 |  |         move.l 38(sp),d0
   173d6:	|                 |  |         move.l 34(sp),d1
   173da:	|                 |  |         jsr -684(a6)
   173de:	|                 |  |         move.l d0,30(sp)
   173e2:	|                 |  |         move.l 30(sp),d1
   173e6:	|                 |  |         move.l 136(sp),d0
   173ea:	|                 |  |         add.l d0,d0
   173ec:	|                 |  |         add.l d0,d0
   173ee:	|                 |  |         movea.l 62(sp),a0
   173f2:	|                 |  |         adda.l d0,a0
   173f4:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   173f6:	|                 |  |         movea.l 1d1de <currentFloor>,a0
   173fc:	|                 |  |         move.l 16(a0),d1
   17400:	|                 |  |         move.l 136(sp),d0
   17404:	|                 |  |         add.l d0,d0
   17406:	|                 |  |         add.l d0,d0
   17408:	|                 |  |         movea.l d1,a0
   1740a:	|                 |  |         adda.l d0,a0
   1740c:	|                 |  |         move.l (a0),d0
   1740e:	|                 |  |     ,-- bne.s 17424 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   17410:	|                 |  |     |   pea 1a82b <PutChar+0x2511>
   17416:	|                 |  |     |   jsr 17878 <KPrintF>
   1741c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1741e:	|                 |  |     |   clr.w d0
   17420:	+-----------------|--|-----|-- bra.w 17792 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17424:	|                 |  |     '-> clr.l 132(sp)
   17428:	|                 |  |     ,-- bra.s 17478 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1742a:	|                 |  |  ,--|-> movea.l 1d1de <currentFloor>,a0
   17430:	|                 |  |  |  |   move.l 16(a0),d1
   17434:	|                 |  |  |  |   move.l 136(sp),d0
   17438:	|                 |  |  |  |   add.l d0,d0
   1743a:	|                 |  |  |  |   add.l d0,d0
   1743c:	|                 |  |  |  |   movea.l d1,a0
   1743e:	|                 |  |  |  |   adda.l d0,a0
   17440:	|                 |  |  |  |   move.l (a0),d1
   17442:	|                 |  |  |  |   move.l 132(sp),d0
   17446:	|                 |  |  |  |   add.l d0,d0
   17448:	|                 |  |  |  |   add.l d0,d0
   1744a:	|                 |  |  |  |   movea.l d1,a0
   1744c:	|                 |  |  |  |   adda.l d0,a0
   1744e:	|                 |  |  |  |   moveq #-1,d1
   17450:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17452:	|                 |  |  |  |   move.l 136(sp),d0
   17456:	|                 |  |  |  |   add.l d0,d0
   17458:	|                 |  |  |  |   add.l d0,d0
   1745a:	|                 |  |  |  |   movea.l 62(sp),a0
   1745e:	|                 |  |  |  |   adda.l d0,a0
   17460:	|                 |  |  |  |   move.l (a0),d1
   17462:	|                 |  |  |  |   move.l 132(sp),d0
   17466:	|                 |  |  |  |   add.l d0,d0
   17468:	|                 |  |  |  |   add.l d0,d0
   1746a:	|                 |  |  |  |   movea.l d1,a0
   1746c:	|                 |  |  |  |   adda.l d0,a0
   1746e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17474:	|                 |  |  |  |   addq.l #1,132(sp)
   17478:	|                 |  |  |  '-> movea.l 1d1de <currentFloor>,a0
   1747e:	|                 |  |  |      move.l 8(a0),d0
   17482:	|                 |  |  |      cmp.l 132(sp),d0
   17486:	|                 |  |  '----- bgt.s 1742a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17488:	|                 |  |         addq.l #1,136(sp)
   1748c:	|                 |  '-------> movea.l 1d1de <currentFloor>,a0
   17492:	|                 |            move.l 8(a0),d0
   17496:	|                 |            cmp.l 136(sp),d0
   1749a:	|                 '----------- bgt.w 1736c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1749e:	|                              clr.l 136(sp)
   174a2:	|              ,-------------- bra.w 175a8 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   174a6:	|           ,--|-------------> clr.l 132(sp)
   174aa:	|           |  |     ,-------- bra.w 17592 <setFloor+0x570>
			if (i != j) {
   174ae:	|           |  |  ,--|-------> move.l 136(sp),d0
   174b2:	|           |  |  |  |         cmp.l 132(sp),d0
   174b6:	|           |  |  |  |     ,-- beq.w 17548 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   174ba:	|           |  |  |  |     |   movea.l 1d1de <currentFloor>,a0
   174c0:	|           |  |  |  |     |   move.l 12(a0),d1
   174c4:	|           |  |  |  |     |   move.l 132(sp),d0
   174c8:	|           |  |  |  |     |   lsl.l #3,d0
   174ca:	|           |  |  |  |     |   movea.l d1,a1
   174cc:	|           |  |  |  |     |   adda.l d0,a1
   174ce:	|           |  |  |  |     |   movea.l 1d1de <currentFloor>,a0
   174d4:	|           |  |  |  |     |   move.l 12(a0),d1
   174d8:	|           |  |  |  |     |   move.l 136(sp),d0
   174dc:	|           |  |  |  |     |   lsl.l #3,d0
   174de:	|           |  |  |  |     |   movea.l d1,a0
   174e0:	|           |  |  |  |     |   adda.l d0,a0
   174e2:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   174e6:	|           |  |  |  |     |   move.l (a1),-(sp)
   174e8:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   174ec:	|           |  |  |  |     |   move.l (a0),-(sp)
   174ee:	|           |  |  |  |     |   jsr 16d7a <polysShareSide>
   174f4:	|           |  |  |  |     |   lea 16(sp),sp
   174f8:	|           |  |  |  |     |   tst.w d0
   174fa:	|           |  |  |  |  ,--|-- beq.w 1758e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   174fe:	|           |  |  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   17504:	|           |  |  |  |  |  |   move.l 16(a0),d1
   17508:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1750c:	|           |  |  |  |  |  |   add.l d0,d0
   1750e:	|           |  |  |  |  |  |   add.l d0,d0
   17510:	|           |  |  |  |  |  |   movea.l d1,a0
   17512:	|           |  |  |  |  |  |   adda.l d0,a0
   17514:	|           |  |  |  |  |  |   move.l (a0),d1
   17516:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1751a:	|           |  |  |  |  |  |   add.l d0,d0
   1751c:	|           |  |  |  |  |  |   add.l d0,d0
   1751e:	|           |  |  |  |  |  |   movea.l d1,a0
   17520:	|           |  |  |  |  |  |   adda.l d0,a0
   17522:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   17526:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1752a:	|           |  |  |  |  |  |   add.l d0,d0
   1752c:	|           |  |  |  |  |  |   add.l d0,d0
   1752e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17532:	|           |  |  |  |  |  |   adda.l d0,a0
   17534:	|           |  |  |  |  |  |   move.l (a0),d1
   17536:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1753a:	|           |  |  |  |  |  |   add.l d0,d0
   1753c:	|           |  |  |  |  |  |   add.l d0,d0
   1753e:	|           |  |  |  |  |  |   movea.l d1,a0
   17540:	|           |  |  |  |  |  |   adda.l d0,a0
   17542:	|           |  |  |  |  |  |   moveq #1,d1
   17544:	|           |  |  |  |  |  |   move.l d1,(a0)
   17546:	|           |  |  |  |  +--|-- bra.s 1758e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   17548:	|           |  |  |  |  |  '-> movea.l 1d1de <currentFloor>,a0
   1754e:	|           |  |  |  |  |      move.l 16(a0),d1
   17552:	|           |  |  |  |  |      move.l 136(sp),d0
   17556:	|           |  |  |  |  |      add.l d0,d0
   17558:	|           |  |  |  |  |      add.l d0,d0
   1755a:	|           |  |  |  |  |      movea.l d1,a0
   1755c:	|           |  |  |  |  |      adda.l d0,a0
   1755e:	|           |  |  |  |  |      move.l (a0),d1
   17560:	|           |  |  |  |  |      move.l 132(sp),d0
   17564:	|           |  |  |  |  |      add.l d0,d0
   17566:	|           |  |  |  |  |      add.l d0,d0
   17568:	|           |  |  |  |  |      movea.l d1,a0
   1756a:	|           |  |  |  |  |      adda.l d0,a0
   1756c:	|           |  |  |  |  |      moveq #-2,d0
   1756e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17570:	|           |  |  |  |  |      move.l 136(sp),d0
   17574:	|           |  |  |  |  |      add.l d0,d0
   17576:	|           |  |  |  |  |      add.l d0,d0
   17578:	|           |  |  |  |  |      movea.l 62(sp),a0
   1757c:	|           |  |  |  |  |      adda.l d0,a0
   1757e:	|           |  |  |  |  |      move.l (a0),d1
   17580:	|           |  |  |  |  |      move.l 132(sp),d0
   17584:	|           |  |  |  |  |      add.l d0,d0
   17586:	|           |  |  |  |  |      add.l d0,d0
   17588:	|           |  |  |  |  |      movea.l d1,a0
   1758a:	|           |  |  |  |  |      adda.l d0,a0
   1758c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1758e:	|           |  |  |  |  '----> addq.l #1,132(sp)
   17592:	|           |  |  |  '-------> movea.l 1d1de <currentFloor>,a0
   17598:	|           |  |  |            move.l 8(a0),d0
   1759c:	|           |  |  |            cmp.l 132(sp),d0
   175a0:	|           |  |  '----------- bgt.w 174ae <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   175a4:	|           |  |               addq.l #1,136(sp)
   175a8:	|           |  '-------------> movea.l 1d1de <currentFloor>,a0
   175ae:	|           |                  move.l 8(a0),d0
   175b2:	|           |                  cmp.l 136(sp),d0
   175b6:	|           '----------------- bgt.w 174a6 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   175ba:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   175be:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   175c2:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   175c6:	|  |                           clr.l 136(sp)
   175ca:	|  |     ,-------------------- bra.w 17720 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   175ce:	|  |  ,--|-------------------> clr.l 132(sp)
   175d2:	|  |  |  |     ,-------------- bra.w 1770a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   175d6:	|  |  |  |  ,--|-------------> movea.l 1d1de <currentFloor>,a0
   175dc:	|  |  |  |  |  |               move.l 16(a0),d1
   175e0:	|  |  |  |  |  |               move.l 136(sp),d0
   175e4:	|  |  |  |  |  |               add.l d0,d0
   175e6:	|  |  |  |  |  |               add.l d0,d0
   175e8:	|  |  |  |  |  |               movea.l d1,a0
   175ea:	|  |  |  |  |  |               adda.l d0,a0
   175ec:	|  |  |  |  |  |               move.l (a0),d1
   175ee:	|  |  |  |  |  |               move.l 132(sp),d0
   175f2:	|  |  |  |  |  |               add.l d0,d0
   175f4:	|  |  |  |  |  |               add.l d0,d0
   175f6:	|  |  |  |  |  |               movea.l d1,a0
   175f8:	|  |  |  |  |  |               adda.l d0,a0
   175fa:	|  |  |  |  |  |               move.l (a0),d0
   175fc:	|  |  |  |  |  |               moveq #-1,d1
   175fe:	|  |  |  |  |  |               cmp.l d0,d1
   17600:	|  |  |  |  |  |  ,----------- bne.w 17706 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17604:	|  |  |  |  |  |  |            clr.l 122(sp)
   17608:	|  |  |  |  |  |  |     ,----- bra.w 176f4 <setFloor+0x6d2>
						if (d != i && d != j) {
   1760c:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   17610:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17614:	|  |  |  |  |  |  |  |  |  ,-- beq.w 176f0 <setFloor+0x6ce>
   17618:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1761c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17620:	|  |  |  |  |  |  |  |  |  +-- beq.w 176f0 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17624:	|  |  |  |  |  |  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   1762a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1762e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17632:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17634:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17636:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17638:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1763a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1763c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17640:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17642:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17644:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17646:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17648:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1764a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1764e:	|  |  |  |  |  |  |  |  |  +-- bne.w 176f0 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17652:	|  |  |  |  |  |  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   17658:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1765c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17660:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17662:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17664:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17666:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17668:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1766a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1766e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17670:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17672:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17674:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17676:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17678:	|  |  |  |  |  |  |  |  |  +-- bmi.s 176f0 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1767a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1767e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17680:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17682:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17686:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17688:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1768a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1768e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17690:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17692:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17694:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17696:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17698:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1769c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 176f0 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1769e:	|  |  |  |  |  |  |  |  |  |   movea.l 1d1de <currentFloor>,a0
   176a4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   176a8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   176ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176ae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176b0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   176b2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   176b4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   176b6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   176ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176bc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176be:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   176c0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   176c2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   176c6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   176ca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176cc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176ce:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   176d2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   176d4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   176d6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   176da:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176dc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176de:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   176e0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   176e2:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   176e6:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   176e8:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   176ea:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   176f0:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   176f4:	|  |  |  |  |  |  |  |  '----> movea.l 1d1de <currentFloor>,a0
   176fa:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   176fe:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17702:	|  |  |  |  |  |  |  '-------- bgt.w 1760c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17706:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   1770a:	|  |  |  |  |  '-------------> movea.l 1d1de <currentFloor>,a0
   17710:	|  |  |  |  |                  move.l 8(a0),d0
   17714:	|  |  |  |  |                  cmp.l 132(sp),d0
   17718:	|  |  |  |  '----------------- bgt.w 175d6 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1771c:	|  |  |  |                     addq.l #1,136(sp)
   17720:	|  |  |  '-------------------> movea.l 1d1de <currentFloor>,a0
   17726:	|  |  |                        move.l 8(a0),d0
   1772a:	|  |  |                        cmp.l 136(sp),d0
   1772e:	|  |  '----------------------- bgt.w 175ce <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17732:	|  |                           tst.w 130(sp)
   17736:	|  '-------------------------- bne.w 175be <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1773a:	|                              clr.l 136(sp)
   1773e:	|                          ,-- bra.s 17766 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17740:	|                       ,--|-> move.l 136(sp),d0
   17744:	|                       |  |   add.l d0,d0
   17746:	|                       |  |   add.l d0,d0
   17748:	|                       |  |   movea.l 62(sp),a0
   1774c:	|                       |  |   adda.l d0,a0
   1774e:	|                       |  |   move.l (a0),54(sp)
   17752:	|                       |  |   move.l 1d0c6 <SysBase>,d0
   17758:	|                       |  |   movea.l d0,a6
   1775a:	|                       |  |   movea.l 54(sp),a1
   1775e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17762:	|                       |  |   addq.l #1,136(sp)
   17766:	|                       |  '-> movea.l 1d1de <currentFloor>,a0
   1776c:	|                       |      move.l 8(a0),d0
   17770:	|                       |      cmp.l 136(sp),d0
   17774:	|                       '----- bgt.s 17740 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17776:	|                              move.l 62(sp),58(sp)
   1777c:	|                              move.l 1d0c6 <SysBase>,d0
   17782:	|                              movea.l d0,a6
   17784:	|                              movea.l 58(sp),a1
   17788:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1778c:	|                              clr.l 62(sp)

	return TRUE;
   17790:	|                              moveq #1,d0
}
   17792:	'----------------------------> movea.l (sp)+,a2
   17794:	                               movea.l (sp)+,a6
   17796:	                               lea 132(sp),sp
   1779a:	                               rts

0001779c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1779c:	jsr 16c8a <killFloor>
	noFloor ();
   177a2:	jsr 16b92 <noFloor>
   177a8:	nop
   177aa:	rts

000177ac <WaitVbl>:
void WaitVbl() {
   177ac:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   177ae:	   ,-> movea.l #14675972,a0
   177b4:	   |   move.l (a0),d0
   177b6:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   177b8:	   |   move.l (sp),d0
   177ba:	   |   andi.l #130816,d0
   177c0:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   177c2:	   |   move.l (sp),d0
   177c4:	   |   cmpi.l #76800,d0
   177ca:	   '-- beq.s 177ae <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   177cc:	,----> movea.l #14675972,a0
   177d2:	|      move.l (a0),d0
   177d4:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   177d8:	|      move.l 4(sp),d0
   177dc:	|      andi.l #130816,d0
   177e2:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   177e6:	|      move.l 4(sp),d0
   177ea:	|      cmpi.l #76800,d0
   177f0:	|  ,-- beq.s 177f4 <WaitVbl+0x48>
	while (1) {
   177f2:	'--|-- bra.s 177cc <WaitVbl+0x20>
			break;
   177f4:	   '-> nop
}
   177f6:	       nop
   177f8:	       addq.l #8,sp
   177fa:	       rts

000177fc <memset>:
void* memset(void *dest, int val, unsigned long len) {
   177fc:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   177fe:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17802:	   ,-- bra.s 17814 <memset+0x18>
		*ptr++ = val;
   17804:	,--|-> move.l (sp),d0
   17806:	|  |   move.l d0,d1
   17808:	|  |   addq.l #1,d1
   1780a:	|  |   move.l d1,(sp)
   1780c:	|  |   move.l 12(sp),d1
   17810:	|  |   movea.l d0,a0
   17812:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17814:	|  '-> move.l 16(sp),d0
   17818:	|      move.l d0,d1
   1781a:	|      subq.l #1,d1
   1781c:	|      move.l d1,16(sp)
   17820:	|      tst.l d0
   17822:	'----- bne.s 17804 <memset+0x8>
	return dest;
   17824:	       move.l 8(sp),d0
}
   17828:	       addq.l #4,sp
   1782a:	       rts

0001782c <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1782c:	       subq.l #8,sp
   1782e:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17830:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17836:	       move.l 20(sp),4(sp)
	while(len--)
   1783c:	   ,-- bra.s 1785e <memcpy+0x32>
		*d++ = *s++;
   1783e:	,--|-> move.l 4(sp),d1
   17842:	|  |   move.l d1,d0
   17844:	|  |   addq.l #1,d0
   17846:	|  |   move.l d0,4(sp)
   1784a:	|  |   move.l 8(sp),d0
   1784e:	|  |   move.l d0,d2
   17850:	|  |   addq.l #1,d2
   17852:	|  |   move.l d2,8(sp)
   17856:	|  |   movea.l d1,a0
   17858:	|  |   move.b (a0),d1
   1785a:	|  |   movea.l d0,a0
   1785c:	|  |   move.b d1,(a0)
	while(len--)
   1785e:	|  '-> move.l 24(sp),d0
   17862:	|      move.l d0,d1
   17864:	|      subq.l #1,d1
   17866:	|      move.l d1,24(sp)
   1786a:	|      tst.l d0
   1786c:	'----- bne.s 1783e <memcpy+0x12>
	return dest;
   1786e:	       move.l 16(sp),d0
}
   17872:	       move.l (sp)+,d2
   17874:	       addq.l #8,sp
   17876:	       rts

00017878 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17878:	       lea -128(sp),sp
   1787c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17880:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3c50>,d0
   17886:	       cmpi.w #20153,d0
   1788a:	   ,-- beq.s 178ae <KPrintF+0x36>
   1788c:	   |   cmpi.w #-24562,d0
   17890:	   +-- beq.s 178ae <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17892:	   |   movea.l 1d0c6 <SysBase>,a6
   17898:	   |   movea.l 144(sp),a0
   1789c:	   |   lea 148(sp),a1
   178a0:	   |   lea 1830c <KPutCharX>,a2
   178a6:	   |   suba.l a3,a3
   178a8:	   |   jsr -522(a6)
}
   178ac:	,--|-- bra.s 178d8 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   178ae:	|  '-> movea.l 1d0c6 <SysBase>,a6
   178b4:	|      movea.l 144(sp),a0
   178b8:	|      lea 148(sp),a1
   178bc:	|      lea 1831a <PutChar>,a2
   178c2:	|      lea 12(sp),a3
   178c6:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   178ca:	|      move.l a3,-(sp)
   178cc:	|      pea 56 <_start+0x56>
   178d0:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3c50>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   178d6:	|      addq.l #8,sp
}
   178d8:	'----> movem.l (sp)+,a2-a3/a6
   178dc:	       lea 128(sp),sp
   178e0:	       rts

000178e2 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   178e2:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   178e4:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   178ea:	       movea.l (sp),a0
   178ec:	       move.w (a0),d0
   178ee:	       cmpi.w #20153,d0
   178f2:	   ,-- beq.s 178fe <debug_cmd+0x1c>
   178f4:	   |   movea.l (sp),a0
   178f6:	   |   move.w (a0),d0
   178f8:	   |   cmpi.w #-24562,d0
   178fc:	,--|-- bne.s 1791c <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   178fe:	|  '-> move.l 20(sp),-(sp)
   17902:	|      move.l 20(sp),-(sp)
   17906:	|      move.l 20(sp),-(sp)
   1790a:	|      move.l 20(sp),-(sp)
   1790e:	|      pea 58 <_start+0x58>
   17912:	|      movea.l 20(sp),a0
   17916:	|      jsr (a0)
   17918:	|      lea 20(sp),sp
	}
}
   1791c:	'----> nop
   1791e:	       addq.l #4,sp
   17920:	       rts

00017922 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17922:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17924:	   ,-- bra.s 17946 <my_strncpy+0x24>
		*destination++ = *source++;
   17926:	,--|-> move.l 12(sp),d1
   1792a:	|  |   move.l d1,d0
   1792c:	|  |   addq.l #1,d0
   1792e:	|  |   move.l d0,12(sp)
   17932:	|  |   move.l 8(sp),d0
   17936:	|  |   move.l d0,d2
   17938:	|  |   addq.l #1,d2
   1793a:	|  |   move.l d2,8(sp)
   1793e:	|  |   movea.l d1,a0
   17940:	|  |   move.b (a0),d1
   17942:	|  |   movea.l d0,a0
   17944:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17946:	|  '-> movea.l 12(sp),a0
   1794a:	|      move.b (a0),d0
   1794c:	|  ,-- beq.s 17954 <my_strncpy+0x32>
   1794e:	|  |   subq.l #1,16(sp)
   17952:	'--|-- bne.s 17926 <my_strncpy+0x4>
	*destination = '\0';
   17954:	   '-> movea.l 8(sp),a0
   17958:	       clr.b (a0)
}
   1795a:	       nop
   1795c:	       move.l (sp)+,d2
   1795e:	       rts

00017960 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17960:	    lea -60(sp),sp
   17964:	    movea.l 72(sp),a1
   17968:	    movea.l 76(sp),a0
   1796c:	    move.l 80(sp),d1
   17970:	    move.l 84(sp),d0
   17974:	    movea.w a1,a1
   17976:	    move.w a1,8(sp)
   1797a:	    movea.w a0,a0
   1797c:	    move.w a0,6(sp)
   17980:	    move.w d1,d1
   17982:	    move.w d1,4(sp)
   17986:	    move.w d0,d0
   17988:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1798c:	    lea 10(sp),a0
   17990:	    clr.l (a0)
   17992:	    addq.l #4,a0
   17994:	    clr.l (a0)
   17996:	    addq.l #4,a0
   17998:	    clr.l (a0)
   1799a:	    addq.l #4,a0
   1799c:	    clr.l (a0)
   1799e:	    addq.l #4,a0
   179a0:	    clr.l (a0)
   179a2:	    addq.l #4,a0
   179a4:	    clr.l (a0)
   179a6:	    addq.l #4,a0
   179a8:	    clr.l (a0)
   179aa:	    addq.l #4,a0
   179ac:	    clr.l (a0)
   179ae:	    addq.l #4,a0
   179b0:	    clr.l (a0)
   179b2:	    addq.l #4,a0
   179b4:	    clr.l (a0)
   179b6:	    addq.l #4,a0
   179b8:	    clr.l (a0)
   179ba:	    addq.l #4,a0
   179bc:	    clr.l (a0)
   179be:	    addq.l #4,a0
   179c0:	    clr.w (a0)
   179c2:	    addq.l #2,a0
		.address = (unsigned int)addr,
   179c4:	    move.l 64(sp),d0
	struct debug_resource resource = {
   179c8:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   179cc:	    move.w 8(sp),d0
   179d0:	,-- bpl.s 179d4 <debug_register_bitmap+0x74>
   179d2:	|   addq.w #7,d0
   179d4:	'-> asr.w #3,d0
   179d6:	    movea.w d0,a0
   179d8:	    movea.w 6(sp),a1
   179dc:	    move.l a1,-(sp)
   179de:	    move.l a0,-(sp)
   179e0:	    jsr 18204 <__mulsi3>
   179e6:	    addq.l #8,sp
   179e8:	    movea.w 4(sp),a0
   179ec:	    move.l a0,-(sp)
   179ee:	    move.l d0,-(sp)
   179f0:	    jsr 18204 <__mulsi3>
   179f6:	    addq.l #8,sp
	struct debug_resource resource = {
   179f8:	    move.l d0,14(sp)
   179fc:	    move.w 2(sp),52(sp)
   17a02:	    move.w 8(sp),54(sp)
   17a08:	    move.w 6(sp),56(sp)
   17a0e:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17a14:	    moveq #0,d0
   17a16:	    move.w 2(sp),d0
   17a1a:	    moveq #2,d1
   17a1c:	    and.l d1,d0
   17a1e:	,-- beq.s 17a2a <debug_register_bitmap+0xca>
		resource.size *= 2;
   17a20:	|   move.l 14(sp),d0
   17a24:	|   add.l d0,d0
   17a26:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17a2a:	'-> pea 20 <_start+0x20>
   17a2e:	    move.l 72(sp),-(sp)
   17a32:	    lea 18(sp),a0
   17a36:	    move.l a0,d0
   17a38:	    addq.l #8,d0
   17a3a:	    move.l d0,-(sp)
   17a3c:	    jsr 17922 <my_strncpy>
   17a42:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17a46:	    lea 10(sp),a0
   17a4a:	    clr.l -(sp)
   17a4c:	    clr.l -(sp)
   17a4e:	    move.l a0,-(sp)
   17a50:	    pea 4 <_start+0x4>
   17a54:	    jsr 178e2 <debug_cmd>
   17a5a:	    lea 16(sp),sp
}
   17a5e:	    nop
   17a60:	    lea 60(sp),sp
   17a64:	    rts

00017a66 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17a66:	lea -12(sp),sp
   17a6a:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17a6c:	move.l 20(sp),12(sp)
   17a72:	move.l 24(sp),8(sp)
   17a78:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17a7e:	movea.l d0,a6
   17a80:	move.l 12(sp),d0
   17a84:	move.l 8(sp),d1
   17a88:	jsr -66(a6)
   17a8c:	move.l d0,4(sp)
   17a90:	move.l 4(sp),d0
}
   17a94:	movea.l (sp)+,a6
   17a96:	lea 12(sp),sp
   17a9a:	rts

00017a9c <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17a9c:	lea -32(sp),sp
   17aa0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17aa4:	move.l 48(sp),36(sp)
   17aaa:	move.l 52(sp),40(sp)
   17ab0:	move.l 56(sp),28(sp)
   17ab6:	move.l 60(sp),32(sp)
   17abc:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17ac2:	movea.l d0,a6
   17ac4:	move.l 36(sp),d0
   17ac8:	move.l 40(sp),d1
   17acc:	move.l 28(sp),d2
   17ad0:	move.l 32(sp),d3
   17ad4:	jsr -66(a6)
   17ad8:	move.l d0,12(sp)
   17adc:	move.l d1,16(sp)
   17ae0:	move.l 12(sp),20(sp)
   17ae6:	move.l 16(sp),24(sp)
   17aec:	move.l 20(sp),d0
   17af0:	move.l 24(sp),d1
}
   17af4:	movem.l (sp)+,d2-d3/a6
   17af8:	lea 32(sp),sp
   17afc:	rts

00017afe <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17afe:	lea -32(sp),sp
   17b02:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17b06:	move.l 48(sp),36(sp)
   17b0c:	move.l 52(sp),40(sp)
   17b12:	move.l 56(sp),28(sp)
   17b18:	move.l 60(sp),32(sp)
   17b1e:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17b24:	movea.l d0,a6
   17b26:	move.l 36(sp),d0
   17b2a:	move.l 40(sp),d1
   17b2e:	move.l 28(sp),d2
   17b32:	move.l 32(sp),d3
   17b36:	jsr -84(a6)
   17b3a:	move.l d0,12(sp)
   17b3e:	move.l d1,16(sp)
   17b42:	move.l 12(sp),20(sp)
   17b48:	move.l 16(sp),24(sp)
   17b4e:	move.l 20(sp),d0
   17b52:	move.l 24(sp),d1
}
   17b56:	movem.l (sp)+,d2-d3/a6
   17b5a:	lea 32(sp),sp
   17b5e:	rts

00017b60 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17b60:	lea -12(sp),sp
   17b64:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17b66:	move.l 20(sp),12(sp)
   17b6c:	move.l 24(sp),8(sp)
   17b72:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17b78:	movea.l d0,a6
   17b7a:	move.l 12(sp),d0
   17b7e:	move.l 8(sp),d1
   17b82:	jsr -84(a6)
   17b86:	move.l d0,4(sp)
   17b8a:	move.l 4(sp),d0
}
   17b8e:	movea.l (sp)+,a6
   17b90:	lea 12(sp),sp
   17b94:	rts

00017b96 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17b96:	lea -12(sp),sp
   17b9a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17b9c:	move.l 20(sp),12(sp)
   17ba2:	move.l 24(sp),8(sp)
   17ba8:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17bae:	movea.l d0,a6
   17bb0:	move.l 12(sp),d0
   17bb4:	move.l 8(sp),d1
   17bb8:	jsr -42(a6)
   17bbc:	move.l d0,4(sp)
   17bc0:	move.l 4(sp),d0
}
   17bc4:	movea.l (sp)+,a6
   17bc6:	lea 12(sp),sp
   17bca:	rts

00017bcc <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17bcc:	lea -20(sp),sp
   17bd0:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17bd2:	move.l 28(sp),20(sp)
   17bd8:	move.l 1d0e2 <MathIeeeDoubTransBase>,d0
   17bde:	movea.l d0,a6
   17be0:	move.l 20(sp),d0
   17be4:	jsr -108(a6)
   17be8:	move.l d0,4(sp)
   17bec:	move.l d1,8(sp)
   17bf0:	move.l 4(sp),12(sp)
   17bf6:	move.l 8(sp),16(sp)
   17bfc:	move.l 12(sp),d0
   17c00:	move.l 16(sp),d1
}
   17c04:	movea.l (sp)+,a6
   17c06:	lea 20(sp),sp
   17c0a:	rts

00017c0c <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17c0c:	lea -12(sp),sp
   17c10:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17c12:	move.l 20(sp),8(sp)
   17c18:	move.l 24(sp),12(sp)
   17c1e:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17c24:	movea.l d0,a6
   17c26:	move.l 8(sp),d0
   17c2a:	move.l 12(sp),d1
   17c2e:	jsr -30(a6)
   17c32:	move.l d0,4(sp)
   17c36:	move.l 4(sp),d0
}
   17c3a:	movea.l (sp)+,a6
   17c3c:	lea 12(sp),sp
   17c40:	rts

00017c42 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17c42:	subq.l #8,sp
   17c44:	move.l a6,-(sp)
	return IEEESPFix(value);
   17c46:	move.l 16(sp),8(sp)
   17c4c:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17c52:	movea.l d0,a6
   17c54:	move.l 8(sp),d0
   17c58:	jsr -30(a6)
   17c5c:	move.l d0,4(sp)
   17c60:	move.l 4(sp),d0
}
   17c64:	movea.l (sp)+,a6
   17c66:	addq.l #8,sp
   17c68:	rts

00017c6a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17c6a:	lea -20(sp),sp
   17c6e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17c70:	move.l 28(sp),20(sp)
   17c76:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17c7c:	movea.l d0,a6
   17c7e:	move.l 20(sp),d0
   17c82:	jsr -36(a6)
   17c86:	move.l d0,4(sp)
   17c8a:	move.l d1,8(sp)
   17c8e:	move.l 4(sp),12(sp)
   17c94:	move.l 8(sp),16(sp)
   17c9a:	move.l 12(sp),d0
   17c9e:	move.l 16(sp),d1
}
   17ca2:	movea.l (sp)+,a6
   17ca4:	lea 20(sp),sp
   17ca8:	rts

00017caa <__floatsisf>:

FLOAT __floatsisf(int i) {
   17caa:	subq.l #8,sp
   17cac:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17cae:	move.l 16(sp),8(sp)
   17cb4:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17cba:	movea.l d0,a6
   17cbc:	move.l 8(sp),d0
   17cc0:	jsr -36(a6)
   17cc4:	move.l d0,4(sp)
   17cc8:	move.l 4(sp),d0
}
   17ccc:	movea.l (sp)+,a6
   17cce:	addq.l #8,sp
   17cd0:	rts

00017cd2 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17cd2:	subq.l #8,sp
   17cd4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17cd6:	move.l 16(sp),8(sp)
   17cdc:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17ce2:	movea.l d0,a6
   17ce4:	move.l 8(sp),d0
   17ce8:	jsr -36(a6)
   17cec:	move.l d0,4(sp)
   17cf0:	move.l 4(sp),d0
}
   17cf4:	movea.l (sp)+,a6
   17cf6:	addq.l #8,sp
   17cf8:	rts

00017cfa <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17cfa:	lea -32(sp),sp
   17cfe:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17d02:	move.l 48(sp),36(sp)
   17d08:	move.l 52(sp),40(sp)
   17d0e:	move.l 56(sp),28(sp)
   17d14:	move.l 60(sp),32(sp)
   17d1a:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17d20:	movea.l d0,a6
   17d22:	move.l 36(sp),d0
   17d26:	move.l 40(sp),d1
   17d2a:	move.l 28(sp),d2
   17d2e:	move.l 32(sp),d3
   17d32:	jsr -78(a6)
   17d36:	move.l d0,12(sp)
   17d3a:	move.l d1,16(sp)
   17d3e:	move.l 12(sp),20(sp)
   17d44:	move.l 16(sp),24(sp)
   17d4a:	move.l 20(sp),d0
   17d4e:	move.l 24(sp),d1
}
   17d52:	movem.l (sp)+,d2-d3/a6
   17d56:	lea 32(sp),sp
   17d5a:	rts

00017d5c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17d5c:	lea -12(sp),sp
   17d60:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17d62:	move.l 20(sp),12(sp)
   17d68:	move.l 24(sp),8(sp)
   17d6e:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17d74:	movea.l d0,a6
   17d76:	move.l 12(sp),d0
   17d7a:	move.l 8(sp),d1
   17d7e:	jsr -78(a6)
   17d82:	move.l d0,4(sp)
   17d86:	move.l 4(sp),d0
}
   17d8a:	movea.l (sp)+,a6
   17d8c:	lea 12(sp),sp
   17d90:	rts

00017d92 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17d92:	lea -12(sp),sp
   17d96:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17d98:	move.l 20(sp),12(sp)
   17d9e:	move.l 24(sp),8(sp)
   17da4:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17daa:	movea.l d0,a6
   17dac:	move.l 12(sp),d0
   17db0:	move.l 8(sp),d1
   17db4:	jsr -42(a6)
   17db8:	move.l d0,4(sp)
   17dbc:	move.l 4(sp),d0
}
   17dc0:	movea.l (sp)+,a6
   17dc2:	lea 12(sp),sp
   17dc6:	rts

00017dc8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17dc8:	lea -20(sp),sp
   17dcc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17dd0:	move.l 36(sp),24(sp)
   17dd6:	move.l 40(sp),28(sp)
   17ddc:	move.l 44(sp),16(sp)
   17de2:	move.l 48(sp),20(sp)
   17de8:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17dee:	movea.l d0,a6
   17df0:	move.l 24(sp),d0
   17df4:	move.l 28(sp),d1
   17df8:	move.l 16(sp),d2
   17dfc:	move.l 20(sp),d3
   17e00:	jsr -42(a6)
   17e04:	move.l d0,12(sp)
   17e08:	move.l 12(sp),d0
}
   17e0c:	movem.l (sp)+,d2-d3/a6
   17e10:	lea 20(sp),sp
   17e14:	rts

00017e16 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17e16:	lea -12(sp),sp
   17e1a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17e1c:	move.l 20(sp),12(sp)
   17e22:	move.l 24(sp),8(sp)
   17e28:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17e2e:	movea.l d0,a6
   17e30:	move.l 12(sp),d0
   17e34:	move.l 8(sp),d1
   17e38:	jsr -42(a6)
   17e3c:	move.l d0,4(sp)
   17e40:	move.l 4(sp),d0
}
   17e44:	movea.l (sp)+,a6
   17e46:	lea 12(sp),sp
   17e4a:	rts

00017e4c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17e4c:	lea -12(sp),sp
   17e50:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17e52:	move.l 20(sp),12(sp)
   17e58:	move.l 24(sp),8(sp)
   17e5e:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17e64:	movea.l d0,a6
   17e66:	move.l 12(sp),d0
   17e6a:	move.l 8(sp),d1
   17e6e:	jsr -42(a6)
   17e72:	move.l d0,4(sp)
   17e76:	move.l 4(sp),d0
}
   17e7a:	movea.l (sp)+,a6
   17e7c:	lea 12(sp),sp
   17e80:	rts

00017e82 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17e82:	lea -20(sp),sp
   17e86:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17e8a:	move.l 36(sp),24(sp)
   17e90:	move.l 40(sp),28(sp)
   17e96:	move.l 44(sp),16(sp)
   17e9c:	move.l 48(sp),20(sp)
   17ea2:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17ea8:	movea.l d0,a6
   17eaa:	move.l 24(sp),d0
   17eae:	move.l 28(sp),d1
   17eb2:	move.l 16(sp),d2
   17eb6:	move.l 20(sp),d3
   17eba:	jsr -42(a6)
   17ebe:	move.l d0,12(sp)
   17ec2:	move.l 12(sp),d0
}
   17ec6:	movem.l (sp)+,d2-d3/a6
   17eca:	lea 20(sp),sp
   17ece:	rts

00017ed0 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17ed0:	lea -12(sp),sp
   17ed4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17ed6:	move.l 20(sp),12(sp)
   17edc:	move.l 24(sp),8(sp)
   17ee2:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17ee8:	movea.l d0,a6
   17eea:	move.l 12(sp),d0
   17eee:	move.l 8(sp),d1
   17ef2:	jsr -42(a6)
   17ef6:	move.l d0,4(sp)
   17efa:	move.l 4(sp),d0
}
   17efe:	movea.l (sp)+,a6
   17f00:	lea 12(sp),sp
   17f04:	rts

00017f06 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17f06:	lea -12(sp),sp
   17f0a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17f0c:	move.l 20(sp),12(sp)
   17f12:	move.l 24(sp),8(sp)
   17f18:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17f1e:	movea.l d0,a6
   17f20:	move.l 12(sp),d0
   17f24:	move.l 8(sp),d1
   17f28:	jsr -42(a6)
   17f2c:	move.l d0,4(sp)
   17f30:	move.l 4(sp),d0
}
   17f34:	movea.l (sp)+,a6
   17f36:	lea 12(sp),sp
   17f3a:	rts

00017f3c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17f3c:	lea -32(sp),sp
   17f40:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17f44:	move.l 48(sp),36(sp)
   17f4a:	move.l 52(sp),40(sp)
   17f50:	move.l 56(sp),28(sp)
   17f56:	move.l 60(sp),32(sp)
   17f5c:	move.l 1d0de <MathIeeeDoubBasBase>,d0
   17f62:	movea.l d0,a6
   17f64:	move.l 36(sp),d0
   17f68:	move.l 40(sp),d1
   17f6c:	move.l 28(sp),d2
   17f70:	move.l 32(sp),d3
   17f74:	jsr -72(a6)
   17f78:	move.l d0,12(sp)
   17f7c:	move.l d1,16(sp)
   17f80:	move.l 12(sp),20(sp)
   17f86:	move.l 16(sp),24(sp)
   17f8c:	move.l 20(sp),d0
   17f90:	move.l 24(sp),d1
}
   17f94:	movem.l (sp)+,d2-d3/a6
   17f98:	lea 32(sp),sp
   17f9c:	rts

00017f9e <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17f9e:	lea -12(sp),sp
   17fa2:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17fa4:	move.l 20(sp),12(sp)
   17faa:	move.l 24(sp),8(sp)
   17fb0:	move.l 1d0d6 <MathIeeeSingBasBase>,d0
   17fb6:	movea.l d0,a6
   17fb8:	move.l 12(sp),d0
   17fbc:	move.l 8(sp),d1
   17fc0:	jsr -72(a6)
   17fc4:	move.l d0,4(sp)
   17fc8:	move.l 4(sp),d0
}
   17fcc:	movea.l (sp)+,a6
   17fce:	lea 12(sp),sp
   17fd2:	rts

00017fd4 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17fd4:	lea -12(sp),sp
   17fd8:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17fda:	move.l 20(sp),8(sp)
   17fe0:	move.l 24(sp),12(sp)
   17fe6:	move.l 1d0e2 <MathIeeeDoubTransBase>,d0
   17fec:	movea.l d0,a6
   17fee:	move.l 8(sp),d0
   17ff2:	move.l 12(sp),d1
   17ff6:	jsr -102(a6)
   17ffa:	move.l d0,4(sp)
   17ffe:	move.l 4(sp),d0
}
   18002:	movea.l (sp)+,a6
   18004:	lea 12(sp),sp
   18008:	rts

0001800a <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   1800a:	       lea -24(sp),sp
   1800e:	       move.l a6,-(sp)
    if (x > 0) {
   18010:	       clr.l -(sp)
   18012:	       move.l 40(sp),-(sp)
   18016:	       jsr 17e16 <__gtsf2>
   1801c:	       addq.l #8,sp
   1801e:	       tst.l d0
   18020:	   ,-- ble.s 18052 <atan2f+0x48>
        return IEEESPAtan(y / x);
   18022:	   |   move.l 36(sp),-(sp)
   18026:	   |   move.l 36(sp),-(sp)
   1802a:	   |   jsr 17b60 <__divsf3>
   18030:	   |   addq.l #8,sp
   18032:	   |   move.l d0,8(sp)
   18036:	   |   move.l 1d0da <MathIeeeSingTransBase>,d0
   1803c:	   |   movea.l d0,a6
   1803e:	   |   move.l 8(sp),d0
   18042:	   |   jsr -30(a6)
   18046:	   |   move.l d0,4(sp)
   1804a:	   |   move.l 4(sp),d0
   1804e:	,--|-- bra.w 181b2 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18052:	|  '-> clr.l -(sp)
   18054:	|      move.l 40(sp),-(sp)
   18058:	|      jsr 17ed0 <__ltsf2>
   1805e:	|      addq.l #8,sp
   18060:	|      tst.l d0
   18062:	|  ,-- bge.s 180d6 <atan2f+0xcc>
   18064:	|  |   clr.l -(sp)
   18066:	|  |   move.l 36(sp),-(sp)
   1806a:	|  |   jsr 17d92 <__gesf2>
   18070:	|  |   addq.l #8,sp
   18072:	|  |   tst.l d0
   18074:	|  +-- blt.s 180d6 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18076:	|  |   move.l 36(sp),-(sp)
   1807a:	|  |   move.l 36(sp),-(sp)
   1807e:	|  |   jsr 17b60 <__divsf3>
   18084:	|  |   addq.l #8,sp
   18086:	|  |   move.l d0,24(sp)
   1808a:	|  |   move.l 1d0da <MathIeeeSingTransBase>,d0
   18090:	|  |   movea.l d0,a6
   18092:	|  |   move.l 24(sp),d0
   18096:	|  |   jsr -30(a6)
   1809a:	|  |   move.l d0,20(sp)
   1809e:	|  |   move.l 20(sp),d0
   180a2:	|  |   move.l d0,-(sp)
   180a4:	|  |   jsr 17bcc <__extendsfdf2>
   180aa:	|  |   addq.l #4,sp
   180ac:	|  |   move.l #1413754136,-(sp)
   180b2:	|  |   move.l #1074340347,-(sp)
   180b8:	|  |   move.l d1,-(sp)
   180ba:	|  |   move.l d0,-(sp)
   180bc:	|  |   jsr 17a9c <__adddf3>
   180c2:	|  |   lea 16(sp),sp
   180c6:	|  |   move.l d1,-(sp)
   180c8:	|  |   move.l d0,-(sp)
   180ca:	|  |   jsr 17fd4 <__truncdfsf2>
   180d0:	|  |   addq.l #8,sp
   180d2:	+--|-- bra.w 181b2 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   180d6:	|  '-> clr.l -(sp)
   180d8:	|      move.l 40(sp),-(sp)
   180dc:	|      jsr 17ed0 <__ltsf2>
   180e2:	|      addq.l #8,sp
   180e4:	|      tst.l d0
   180e6:	|  ,-- bge.s 18158 <atan2f+0x14e>
   180e8:	|  |   clr.l -(sp)
   180ea:	|  |   move.l 36(sp),-(sp)
   180ee:	|  |   jsr 17ed0 <__ltsf2>
   180f4:	|  |   addq.l #8,sp
   180f6:	|  |   tst.l d0
   180f8:	|  +-- bge.s 18158 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   180fa:	|  |   move.l 36(sp),-(sp)
   180fe:	|  |   move.l 36(sp),-(sp)
   18102:	|  |   jsr 17b60 <__divsf3>
   18108:	|  |   addq.l #8,sp
   1810a:	|  |   move.l d0,16(sp)
   1810e:	|  |   move.l 1d0da <MathIeeeSingTransBase>,d0
   18114:	|  |   movea.l d0,a6
   18116:	|  |   move.l 16(sp),d0
   1811a:	|  |   jsr -30(a6)
   1811e:	|  |   move.l d0,12(sp)
   18122:	|  |   move.l 12(sp),d0
   18126:	|  |   move.l d0,-(sp)
   18128:	|  |   jsr 17bcc <__extendsfdf2>
   1812e:	|  |   addq.l #4,sp
   18130:	|  |   move.l #1413754136,-(sp)
   18136:	|  |   move.l #1074340347,-(sp)
   1813c:	|  |   move.l d1,-(sp)
   1813e:	|  |   move.l d0,-(sp)
   18140:	|  |   jsr 17f3c <__subdf3>
   18146:	|  |   lea 16(sp),sp
   1814a:	|  |   move.l d1,-(sp)
   1814c:	|  |   move.l d0,-(sp)
   1814e:	|  |   jsr 17fd4 <__truncdfsf2>
   18154:	|  |   addq.l #8,sp
   18156:	+--|-- bra.s 181b2 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18158:	|  '-> clr.l -(sp)
   1815a:	|      move.l 40(sp),-(sp)
   1815e:	|      jsr 17b96 <__eqsf2>
   18164:	|      addq.l #8,sp
   18166:	|      tst.l d0
   18168:	|  ,-- bne.s 18184 <atan2f+0x17a>
   1816a:	|  |   clr.l -(sp)
   1816c:	|  |   move.l 36(sp),-(sp)
   18170:	|  |   jsr 17e16 <__gtsf2>
   18176:	|  |   addq.l #8,sp
   18178:	|  |   tst.l d0
   1817a:	|  +-- ble.s 18184 <atan2f+0x17a>
        return PI / 2;
   1817c:	|  |   move.l #1070141403,d0
   18182:	+--|-- bra.s 181b2 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18184:	|  '-> clr.l -(sp)
   18186:	|      move.l 40(sp),-(sp)
   1818a:	|      jsr 17b96 <__eqsf2>
   18190:	|      addq.l #8,sp
   18192:	|      tst.l d0
   18194:	|  ,-- bne.s 181b0 <atan2f+0x1a6>
   18196:	|  |   clr.l -(sp)
   18198:	|  |   move.l 36(sp),-(sp)
   1819c:	|  |   jsr 17ed0 <__ltsf2>
   181a2:	|  |   addq.l #8,sp
   181a4:	|  |   tst.l d0
   181a6:	|  +-- bge.s 181b0 <atan2f+0x1a6>
        return -PI / 2;
   181a8:	|  |   move.l #-1077342245,d0
   181ae:	+--|-- bra.s 181b2 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   181b0:	|  '-> moveq #0,d0
    }
}
   181b2:	'----> movea.l (sp)+,a6
   181b4:	       lea 24(sp),sp
   181b8:	       rts

000181ba <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   181ba:	lea -24(sp),sp
   181be:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   181c0:	move.l 32(sp),20(sp)
   181c6:	move.l 36(sp),24(sp)
   181cc:	move.l 1d0e2 <MathIeeeDoubTransBase>,d0
   181d2:	movea.l d0,a6
   181d4:	move.l 20(sp),d0
   181d8:	move.l 24(sp),d1
   181dc:	jsr -96(a6)
   181e0:	move.l d0,4(sp)
   181e4:	move.l d1,8(sp)
   181e8:	move.l 4(sp),12(sp)
   181ee:	move.l 8(sp),16(sp)
   181f4:	move.l 12(sp),d0
   181f8:	move.l 16(sp),d1
}
   181fc:	movea.l (sp)+,a6
   181fe:	lea 24(sp),sp
   18202:	rts

00018204 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18204:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18208:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1820c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18210:	mulu.w 8(sp),d1
	addw	d1, d0
   18214:	add.w d1,d0
	swap	d0
   18216:	swap d0
	clrw	d0
   18218:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1821a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1821e:	mulu.w 10(sp),d1
	addl	d1, d0
   18222:	add.l d1,d0
	rts
   18224:	rts

00018226 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18226:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18228:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1822c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18230:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18236:	   ,-- bcc.s 1824e <__udivsi3+0x28>
	movel	d0, d2
   18238:	   |   move.l d0,d2
	clrw	d2
   1823a:	   |   clr.w d2
	swap	d2
   1823c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1823e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18240:	   |   move.w d2,d0
	swap	d0
   18242:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18244:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18248:	   |   divu.w d1,d2
	movew	d2, d0
   1824a:	   |   move.w d2,d0
	jra	6f
   1824c:	,--|-- bra.s 1827e <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1824e:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18250:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18252:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18254:	|  |   cmpi.l #65536,d1
	jcc	4b
   1825a:	|  '-- bcc.s 18250 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1825c:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   1825e:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18264:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18266:	|      mulu.w d0,d1
	swap	d2
   18268:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1826a:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   1826c:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   1826e:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18270:	|  ,-- bne.s 1827c <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18272:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18274:	|  +-- bcs.s 1827c <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18276:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1827a:	+--|-- bls.s 1827e <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   1827c:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   1827e:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18280:	       rts

00018282 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18282:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18284:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18286:	    move.l 12(sp),d1
	jpl	1f
   1828a:	,-- bpl.s 18290 <__divsi3+0xe>
	negl	d1
   1828c:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   1828e:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18290:	'-> move.l 8(sp),d0
	jpl	2f
   18294:	,-- bpl.s 1829a <__divsi3+0x18>
	negl	d0
   18296:	|   neg.l d0
	negb	d2
   18298:	|   neg.b d2

2:	movel	d1, sp@-
   1829a:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1829c:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   1829e:	    jsr 18226 <__udivsi3>
	addql	#8, sp
   182a4:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   182a6:	    tst.b d2
	jpl	3f
   182a8:	,-- bpl.s 182ac <__divsi3+0x2a>
	negl	d0
   182aa:	|   neg.l d0

3:	movel	sp@+, d2
   182ac:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   182ae:	    rts

000182b0 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   182b0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   182b4:	move.l 4(sp),d0
	movel	d1, sp@-
   182b8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   182ba:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   182bc:	jsr 18282 <__divsi3>
	addql	#8, sp
   182c2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   182c4:	move.l 8(sp),d1
	movel	d1, sp@-
   182c8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   182ca:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   182cc:	jsr 18204 <__mulsi3>
	addql	#8, sp
   182d2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   182d4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   182d8:	sub.l d0,d1
	movel	d1, d0
   182da:	move.l d1,d0
	rts
   182dc:	rts

000182de <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   182de:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   182e2:	move.l 4(sp),d0
	movel	d1, sp@-
   182e6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   182e8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   182ea:	jsr 18226 <__udivsi3>
	addql	#8, sp
   182f0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   182f2:	move.l 8(sp),d1
	movel	d1, sp@-
   182f6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   182f8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   182fa:	jsr 18204 <__mulsi3>
	addql	#8, sp
   18300:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18302:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18306:	sub.l d0,d1
	movel	d1, d0
   18308:	move.l d1,d0
	rts
   1830a:	rts

0001830c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1830c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1830e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18312:	jsr -516(a6)
    move.l (sp)+, a6
   18316:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   18318:	rts

0001831a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1831a:	move.b d0,(a3)+
	rts
   1831c:	rts
