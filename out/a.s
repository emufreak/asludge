
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #90112,d0
       8:	       subi.l #90112,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 16000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #90112,d0
      40:	       subi.l #90112,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 16000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4d1a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #90112,d0
      7e:	       subi.l #90112,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 16000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 104ea <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 16784 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 10502 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 16000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 104ea <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 16784 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 16000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 104ea <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 16784 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 13972 <PutChar+0x4>
     35c:	|  |              |   jsr 13046 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1678c <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1678c <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1678c <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1678c <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1678c <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1678c <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1678c <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1399c <PutChar+0x2e>
     834:	|   jsr 13046 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1678c <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 139b8 <PutChar+0x4a>
     8a6:	|   jsr 13046 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1678c <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1678c <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1678c <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1678c <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1678c <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1678c <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1678c <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1678c <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 16784 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1678c <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 104ea <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1678c <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 16784 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 16784 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #80352,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 16784 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 139ed <PutChar+0x7f>
     cea:	   |   jsr 13046 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 13858 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 13932 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13a0a <PutChar+0x9c>
     d66:	|      jsr 13046 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 16784 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 16784 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 16784 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 166aa <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 6ace <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),166aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 166ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 166b2 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 13a1d <PutChar+0xaf>
     de8:	jsr 13046 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -20(sp),sp
     df8:	             move.l a6,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
     dfa:	             move.l #14675968,8(sp)

  width /= 16;
     e02:	             move.l 28(sp),d0
     e06:	             movea.l d0,a0
     e08:	             cmpa.w #0,a0
     e0c:	         /-- bge.s e12 <CstBlankScreen+0x1e>
     e0e:	         |   lea 15(a0),a0
     e12:	         \-> move.l a0,d0
     e14:	             asr.l #4,d0
     e16:	             move.l d0,28(sp)

  WaitBlit();
     e1a:	             move.l 16790 <GfxBase>,d0
     e20:	             movea.l d0,a6
     e22:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e26:	             clr.l 20(sp)
     e2a:	   /-------- bra.w f04 <CstBlankScreen+0x110>
    custom->bltafwm = 0xffff;
     e2e:	/--|-------> movea.l 8(sp),a0
     e32:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e38:	|  |         movea.l 8(sp),a0
     e3c:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e42:	|  |         movea.l 8(sp),a0
     e46:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e4c:	|  |         movea.l 8(sp),a0
     e50:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e56:	|  |         movea.l 8(sp),a0
     e5a:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e60:	|  |         movea.l 8(sp),a0
     e64:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e6a:	|  |         movea.l 8(sp),a0
     e6e:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e74:	|  |         movea.l 8(sp),a0
     e78:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     e7e:	|  |         move.l 166d0 <CstDrawBuffer>,d0
     e84:	|  |         move.l d0,16(sp)
    UWORD bltsize = height*64+width;    
     e88:	|  |         move.l 32(sp),d0
     e8c:	|  |         lsl.w #6,d0
     e8e:	|  |         move.l 28(sp),d1
     e92:	|  |         movea.w d0,a0
     e94:	|  |         adda.w d1,a0
     e96:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     e9a:	|  |         move.l 28(sp),d1
     e9e:	|  |         move.l 32(sp),d0
     ea2:	|  |         muls.w d1,d0
     ea4:	|  |         add.w d0,d0
     ea6:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     eaa:	|  |         clr.l 12(sp)
     eae:	|  |     /-- bra.s ee0 <CstBlankScreen+0xec>
    {            
      custom->bltdpt = (APTR) bltdpt;
     eb0:	|  |  /--|-> move.l 16(sp),d0
     eb4:	|  |  |  |   movea.l 8(sp),a0
     eb8:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ebc:	|  |  |  |   movea.l 8(sp),a0
     ec0:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     ec6:	|  |  |  |   move.l 16790 <GfxBase>,d0
     ecc:	|  |  |  |   movea.l d0,a6
     ece:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ed2:	|  |  |  |   moveq #0,d0
     ed4:	|  |  |  |   move.w 4(sp),d0
     ed8:	|  |  |  |   add.l d0,16(sp)
    for(int i2=0;i2<5;i2++)
     edc:	|  |  |  |   addq.l #1,12(sp)
     ee0:	|  |  |  \-> moveq #4,d0
     ee2:	|  |  |      cmp.l 12(sp),d0
     ee6:	|  |  \----- bge.s eb0 <CstBlankScreen+0xbc>
    }

    WaitBlit();
     ee8:	|  |         move.l 16790 <GfxBase>,d0
     eee:	|  |         movea.l d0,a6
     ef0:	|  |         jsr -228(a6)
    WaitVbl();
     ef4:	|  |         jsr 12f7a <WaitVbl>
    CstSwapBuffer();
     efa:	|  |         jsr 1584 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f00:	|  |         addq.l #1,20(sp)
     f04:	|  \-------> moveq #1,d0
     f06:	|            cmp.l 20(sp),d0
     f0a:	\----------- bge.w e2e <CstBlankScreen+0x3a>
  }

}
     f0e:	             nop
     f10:	             nop
     f12:	             movea.l (sp)+,a6
     f14:	             lea 20(sp),sp
     f18:	             rts

00000f1a <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f1a:	       lea -52(sp),sp
     f1e:	       move.l a6,-(sp)
     f20:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f22:	       move.l #400,32(sp)
     f2a:	       moveq #2,d0
     f2c:	       move.l d0,28(sp)
     f30:	       move.l 16784 <SysBase>,d0
     f36:	       movea.l d0,a6
     f38:	       move.l 32(sp),d0
     f3c:	       move.l 28(sp),d1
     f40:	       jsr -198(a6)
     f44:	       move.l d0,24(sp)
     f48:	       move.l 24(sp),d0
     f4c:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f50:	   /-- bne.s f7a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f52:	   |   pea 28 <_start+0x28>
     f56:	   |   pea 13a56 <PutChar+0xe8>
     f5c:	   |   jsr 13046 <KPrintF>
     f62:	   |   addq.l #8,sp
    Exit(1);
     f64:	   |   moveq #1,d1
     f66:	   |   move.l d1,16(sp)
     f6a:	   |   move.l 1678c <DOSBase>,d0
     f70:	   |   movea.l d0,a6
     f72:	   |   move.l 16(sp),d1
     f76:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     f7a:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     f80:	       move.l #90114,52(sp)
  for(int i=0; i<16;i++)
     f88:	       clr.l 48(sp)
     f8c:	   /-- bra.s fb2 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     f8e:	/--|-> move.l 52(sp),d1
     f92:	|  |   move.l d1,d2
     f94:	|  |   addq.l #4,d2
     f96:	|  |   move.l d2,52(sp)
     f9a:	|  |   move.l 56(sp),d0
     f9e:	|  |   move.l d0,d2
     fa0:	|  |   addq.l #4,d2
     fa2:	|  |   move.l d2,56(sp)
     fa6:	|  |   movea.l d1,a0
     fa8:	|  |   move.l (a0),d1
     faa:	|  |   movea.l d0,a0
     fac:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fae:	|  |   addq.l #1,48(sp)
     fb2:	|  \-> moveq #15,d0
     fb4:	|      cmp.l 48(sp),d0
     fb8:	\----- bge.s f8e <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fba:	       move.l #90178,52(sp)

  for(int i=0; i<12;i++)
     fc2:	       clr.l 44(sp)
     fc6:	   /-- bra.s fec <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fc8:	/--|-> move.l 52(sp),d1
     fcc:	|  |   move.l d1,d2
     fce:	|  |   addq.l #4,d2
     fd0:	|  |   move.l d2,52(sp)
     fd4:	|  |   move.l 56(sp),d0
     fd8:	|  |   move.l d0,d2
     fda:	|  |   addq.l #4,d2
     fdc:	|  |   move.l d2,56(sp)
     fe0:	|  |   movea.l d1,a0
     fe2:	|  |   move.l (a0),d1
     fe4:	|  |   movea.l d0,a0
     fe6:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     fe8:	|  |   addq.l #1,44(sp)
     fec:	|  \-> moveq #11,d0
     fee:	|      cmp.l 44(sp),d0
     ff2:	\----- bge.s fc8 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ff4:	       move.l #90226,52(sp)
  for(int i=0; i<10;i++)
     ffc:	       clr.l 40(sp)
    1000:	   /-- bra.s 1026 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1002:	/--|-> move.l 52(sp),d1
    1006:	|  |   move.l d1,d2
    1008:	|  |   addq.l #4,d2
    100a:	|  |   move.l d2,52(sp)
    100e:	|  |   move.l 56(sp),d0
    1012:	|  |   move.l d0,d2
    1014:	|  |   addq.l #4,d2
    1016:	|  |   move.l d2,56(sp)
    101a:	|  |   movea.l d1,a0
    101c:	|  |   move.l (a0),d1
    101e:	|  |   movea.l d0,a0
    1020:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1022:	|  |   addq.l #1,40(sp)
    1026:	|  \-> moveq #9,d0
    1028:	|      cmp.l 40(sp),d0
    102c:	\----- bge.s 1002 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    102e:	       move.l #90266,52(sp)
  CstClColor = (UWORD *) cl;
    1036:	       move.l 56(sp),166d4 <CstClColor>
  for(int i=0; i<32;i++)
    103e:	       clr.l 36(sp)
    1042:	   /-- bra.s 1068 <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    1044:	/--|-> move.l 52(sp),d1
    1048:	|  |   move.l d1,d2
    104a:	|  |   addq.l #4,d2
    104c:	|  |   move.l d2,52(sp)
    1050:	|  |   move.l 56(sp),d0
    1054:	|  |   move.l d0,d2
    1056:	|  |   addq.l #4,d2
    1058:	|  |   move.l d2,56(sp)
    105c:	|  |   movea.l d1,a0
    105e:	|  |   move.l (a0),d1
    1060:	|  |   movea.l d0,a0
    1062:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1064:	|  |   addq.l #1,36(sp)
    1068:	|  \-> moveq #31,d0
    106a:	|      cmp.l 36(sp),d0
    106e:	\----- bge.s 1044 <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1070:	       moveq #40,d1
    1072:	       cmp.l 64(sp),d1
    1076:	   /-- bge.s 10d4 <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    1078:	   |   moveq #-40,d2
    107a:	   |   add.l 64(sp),d2
    107e:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1082:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1088:	   |   move.l 8(sp),d0
    108c:	   |   move.l d0,d1
    108e:	   |   addq.l #2,d1
    1090:	   |   move.l d1,8(sp)
    1094:	   |   movea.l d0,a0
    1096:	   |   move.w #264,(a0)
    *cw++ = tmp;
    109a:	   |   move.l 8(sp),d0
    109e:	   |   move.l d0,d1
    10a0:	   |   addq.l #2,d1
    10a2:	   |   move.l d1,8(sp)
    10a6:	   |   move.l 12(sp),d1
    10aa:	   |   movea.l d0,a0
    10ac:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10d4:	   \-> move.l 56(sp),d0
    10d8:	       move.l d0,d1
    10da:	       addq.l #4,d1
    10dc:	       move.l d1,56(sp)
    10e0:	       moveq #-2,d2
    10e2:	       movea.l d0,a0
    10e4:	       move.l d2,(a0)
  return (UWORD *) retval;  
    10e6:	       move.l 20(sp),d0
}
    10ea:	       move.l (sp)+,d2
    10ec:	       movea.l (sp)+,a6
    10ee:	       lea 52(sp),sp
    10f2:	       rts

000010f4 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    10f4:	       lea -28(sp),sp
    10f8:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    10fa:	       move.l 166c2 <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1102:	       move.l 166d0 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    110a:	       clr.l 20(sp)
    110e:	   /-- bra.s 1134 <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1110:	/--|-> move.l 28(sp),d1
    1114:	|  |   move.l d1,d0
    1116:	|  |   addq.l #4,d0
    1118:	|  |   move.l d0,28(sp)
    111c:	|  |   move.l 24(sp),d0
    1120:	|  |   move.l d0,d2
    1122:	|  |   addq.l #4,d2
    1124:	|  |   move.l d2,24(sp)
    1128:	|  |   movea.l d1,a0
    112a:	|  |   move.l (a0),d1
    112c:	|  |   movea.l d0,a0
    112e:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	|  |   addq.l #1,20(sp)
    1134:	|  \-> move.w 166be <CstBackdropSize>,d0
    113a:	|      lsr.w #2,d0
    113c:	|      move.w d0,d0
    113e:	|      andi.l #65535,d0
    1144:	|      cmp.l 20(sp),d0
    1148:	\----- bgt.s 1110 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    114a:	       move.l 166d4 <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1152:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    1158:	       move.l 166d8 <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1160:	       clr.l 6(sp)
    1164:	   /-- bra.s 11a0 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    1166:	/--|-> move.l 16(sp),d0
    116a:	|  |   move.l d0,d1
    116c:	|  |   addq.l #2,d1
    116e:	|  |   move.l d1,16(sp)
    1172:	|  |   movea.l d0,a0
    1174:	|  |   move.w 14(sp),(a0)
    reg +=2;
    1178:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    117c:	|  |   move.l 10(sp),d1
    1180:	|  |   move.l d1,d0
    1182:	|  |   addq.l #2,d0
    1184:	|  |   move.l d0,10(sp)
    1188:	|  |   move.l 16(sp),d0
    118c:	|  |   move.l d0,d2
    118e:	|  |   addq.l #2,d2
    1190:	|  |   move.l d2,16(sp)
    1194:	|  |   movea.l d1,a0
    1196:	|  |   move.w (a0),d1
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    119c:	|  |   addq.l #1,6(sp)
    11a0:	|  \-> moveq #31,d0
    11a2:	|      cmp.l 6(sp),d0
    11a6:	\----- bge.s 1166 <CstDisplayBackDrop+0x72>
  }
}
    11a8:	       nop
    11aa:	       nop
    11ac:	       move.l (sp)+,d2
    11ae:	       lea 28(sp),sp
    11b2:	       rts

000011b4 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11b4:	          lea -136(sp),sp
    11b8:	          movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    11bc:	          pea 13a91 <PutChar+0x123>
    11c2:	          jsr 13046 <KPrintF>
    11c8:	          addq.l #4,sp

  UWORD width = get2bytes(fp);
    11ca:	          move.l 156(sp),-(sp)
    11ce:	          jsr 6bc <get2bytes>
    11d4:	          addq.l #4,sp
    11d6:	          move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    11da:	          move.l 156(sp),-(sp)
    11de:	          jsr 6bc <get2bytes>
    11e4:	          addq.l #4,sp
    11e6:	          move.w d0,128(sp)

  UWORD widthbytes = width/8;
    11ea:	          move.w 130(sp),d0
    11ee:	          lsr.w #3,d0
    11f0:	          move.w d0,126(sp)
  UWORD widthwords = widthbytes/2;  
    11f4:	          move.w 126(sp),d0
    11f8:	          lsr.w #1,d0
    11fa:	          move.w d0,124(sp)
  UWORD sizeplane =  widthbytes*height;
    11fe:	          move.w 126(sp),d0
    1202:	          muls.w 128(sp),d0
    1206:	          move.w d0,122(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    120a:	          move.w 122(sp),d1
    120e:	          move.w d1,d0
    1210:	          add.w d0,d0
    1212:	          add.w d0,d0
    1214:	          move.w d0,d2
    1216:	          add.w d1,d2
    1218:	          move.w d2,120(sp)

  //Load Palette to Copper
  UWORD reg = 0x180;
    121c:	          move.w #384,118(sp)
  CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1222:	          moveq #64,d0
    1224:	          move.l d0,114(sp)
    1228:	          clr.l 110(sp)
    122c:	          move.l 16784 <SysBase>,d0
    1232:	          movea.l d0,a6
    1234:	          move.l 114(sp),d0
    1238:	          move.l 110(sp),d1
    123c:	          jsr -684(a6)
    1240:	          move.l d0,106(sp)
    1244:	          move.l 106(sp),d0
    1248:	          move.l d0,166d8 <CstPalette>
  UWORD *tmp = CstPalette;
    124e:	          move.l 166d8 <CstPalette>,148(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1256:	          clr.l 144(sp)
    125a:	      /-- bra.s 1280 <CstLoadBackdrop+0xcc>
    *tmp++ = get2bytes(fp);
    125c:	   /--|-> move.l 156(sp),-(sp)
    1260:	   |  |   jsr 6bc <get2bytes>
    1266:	   |  |   addq.l #4,sp
    1268:	   |  |   move.l d0,d1
    126a:	   |  |   move.l 148(sp),d0
    126e:	   |  |   move.l d0,d2
    1270:	   |  |   addq.l #2,d2
    1272:	   |  |   move.l d2,148(sp)
    1276:	   |  |   move.l d1,d1
    1278:	   |  |   movea.l d0,a0
    127a:	   |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    127c:	   |  |   addq.l #1,144(sp)
    1280:	   |  \-> moveq #31,d0
    1282:	   |      cmp.l 144(sp),d0
    1286:	   \----- bge.s 125c <CstLoadBackdrop+0xa8>
  }

  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1288:	          moveq #0,d0
    128a:	          move.w 120(sp),d0
    128e:	          move.l d0,102(sp)
    1292:	          moveq #2,d2
    1294:	          move.l d2,98(sp)
    1298:	          move.l 16784 <SysBase>,d0
    129e:	          movea.l d0,a6
    12a0:	          move.l 102(sp),d0
    12a4:	          move.l 98(sp),d1
    12a8:	          jsr -684(a6)
    12ac:	          move.l d0,94(sp)
    12b0:	          move.l 94(sp),d0
    12b4:	          move.l d0,90(sp)

  //UWORD *tmpbuffercursor = tmpbuffer;
  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    12b8:	          move.l 156(sp),86(sp)
    12be:	          move.l 90(sp),82(sp)
    12c4:	          moveq #2,d0
    12c6:	          move.l d0,78(sp)
    12ca:	          move.w 120(sp),d0
    12ce:	          lsr.w #1,d0
    12d0:	          move.w d0,d0
    12d2:	          andi.l #65535,d0
    12d8:	          move.l d0,74(sp)
    12dc:	          move.l 1678c <DOSBase>,d0
    12e2:	          movea.l d0,a6
    12e4:	          move.l 86(sp),d1
    12e8:	          move.l 82(sp),d2
    12ec:	          move.l 78(sp),d3
    12f0:	          move.l 74(sp),d4
    12f4:	          jsr -324(a6)
    12f8:	          move.l d0,70(sp)
    12fc:	          move.l 70(sp),d0
    1300:	          move.w d0,68(sp)
  
  if(!count) {
    1304:	      /-- bne.s 1318 <CstLoadBackdrop+0x164>
    KPrintF("Error while reading stream");
    1306:	      |   pea 13ac0 <PutChar+0x152>
    130c:	      |   jsr 13046 <KPrintF>
    1312:	      |   addq.l #4,sp
    return;
    1314:	/-----|-- bra.w 153c <CstLoadBackdrop+0x388>
  }  

  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1318:	|     \-> moveq #0,d0
    131a:	|         move.w 122(sp),d0
    131e:	|         move.l d0,64(sp)
    1322:	|         moveq #2,d2
    1324:	|         move.l d2,60(sp)
    1328:	|         move.l 16784 <SysBase>,d0
    132e:	|         movea.l d0,a6
    1330:	|         move.l 64(sp),d0
    1334:	|         move.l 60(sp),d1
    1338:	|         jsr -684(a6)
    133c:	|         move.l d0,56(sp)
    1340:	|         move.l 56(sp),d0
    1344:	|         move.l d0,52(sp)
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif     

  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1348:	|         move.l 156(sp),48(sp)
    134e:	|         move.l 52(sp),44(sp)
    1354:	|         moveq #2,d0
    1356:	|         move.l d0,40(sp)
    135a:	|         move.w 122(sp),d0
    135e:	|         lsr.w #1,d0
    1360:	|         move.w d0,d0
    1362:	|         andi.l #65535,d0
    1368:	|         move.l d0,36(sp)
    136c:	|         move.l 1678c <DOSBase>,d0
    1372:	|         movea.l d0,a6
    1374:	|         move.l 48(sp),d1
    1378:	|         move.l 44(sp),d2
    137c:	|         move.l 40(sp),d3
    1380:	|         move.l 36(sp),d4
    1384:	|         jsr -324(a6)
    1388:	|         move.l d0,32(sp)
    138c:	|         move.l 32(sp),d0
    1390:	|         move.w d0,68(sp)

  if(!count) {
    1394:	|     /-- bne.s 13a8 <CstLoadBackdrop+0x1f4>
    KPrintF("Error while reading stream");
    1396:	|     |   pea 13ac0 <PutChar+0x152>
    139c:	|     |   jsr 13046 <KPrintF>
    13a2:	|     |   addq.l #4,sp
    return;
    13a4:	+-----|-- bra.w 153c <CstLoadBackdrop+0x388>
  }

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    13a8:	|     \-> move.l #14675968,28(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    13b0:	|         move.l 166c2 <CstBackDrop>,d0
    13b6:	|         move.l d0,140(sp)
  UWORD offset = widthwords*y + x / 16;
    13ba:	|         move.l 164(sp),d0
    13be:	|         muls.w 124(sp),d0
    13c2:	|         move.l 160(sp),d1
    13c6:	|         movea.l d1,a0
    13c8:	|         cmpa.w #0,a0
    13cc:	|     /-- bge.s 13d2 <CstLoadBackdrop+0x21e>
    13ce:	|     |   lea 15(a0),a0
    13d2:	|     \-> move.l a0,d1
    13d4:	|         asr.l #4,d1
    13d6:	|         move.l d1,d1
    13d8:	|         move.w d0,d2
    13da:	|         add.w d1,d2
    13dc:	|         move.w d2,26(sp)
  backdropcursor += offset; 
    13e0:	|         moveq #0,d0
    13e2:	|         move.w 26(sp),d0
    13e6:	|         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    13ea:	|         pea 13adb <PutChar+0x16d>
    13f0:	|         jsr 13046 <KPrintF>
    13f6:	|         addq.l #4,sp


  WaitBlit();
    13f8:	|         move.l 16790 <GfxBase>,d0
    13fe:	|         movea.l d0,a6
    1400:	|         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1404:	|         movea.l 28(sp),a0
    1408:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    140e:	|         movea.l 28(sp),a0
    1412:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
    1418:	|         movea.l 28(sp),a0
    141c:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
    1422:	|         movea.l 28(sp),a0
    1426:	|         move.w #0,98(a0)
  custom->bltcmod = winWidth / 8 - widthbytes;
    142c:	|         move.l 166dc <winWidth>,d0
    1432:	|         lsr.l #3,d0
    1434:	|         move.l d0,d0
    1436:	|         sub.w 126(sp),d0
    143a:	|         movea.l 28(sp),a0
    143e:	|         move.w d0,96(a0)
  custom->bltdmod = winWidth / 8 - widthbytes;
    1442:	|         move.l 166dc <winWidth>,d0
    1448:	|         lsr.l #3,d0
    144a:	|         move.l d0,d0
    144c:	|         sub.w 126(sp),d0
    1450:	|         movea.l 28(sp),a0
    1454:	|         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1458:	|         movea.l 28(sp),a0
    145c:	|         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1462:	|         movea.l 28(sp),a0
    1466:	|         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    146c:	|         move.l 90(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1472:	|         clr.l 132(sp)
    1476:	|     /-- bra.s 14d8 <CstLoadBackdrop+0x324>
  {
    
    custom->bltapt = tmpmask;
    1478:	|  /--|-> movea.l 28(sp),a0
    147c:	|  |  |   move.l 52(sp),80(a0)
    custom->bltbpt = tmpbuffercursor;
    1482:	|  |  |   move.l 136(sp),d0
    1486:	|  |  |   movea.l 28(sp),a0
    148a:	|  |  |   move.l d0,76(a0)
    custom->bltcpt = backdropcursor;
    148e:	|  |  |   move.l 140(sp),d0
    1492:	|  |  |   movea.l 28(sp),a0
    1496:	|  |  |   move.l d0,72(a0)
    custom->bltdpt = backdropcursor;
    149a:	|  |  |   move.l 140(sp),d0
    149e:	|  |  |   movea.l 28(sp),a0
    14a2:	|  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwords;
    14a6:	|  |  |   move.w 128(sp),d0
    14aa:	|  |  |   lsl.w #6,d0
    14ac:	|  |  |   add.w 124(sp),d0
    14b0:	|  |  |   movea.l 28(sp),a0
    14b4:	|  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    14b8:	|  |  |   moveq #0,d0
    14ba:	|  |  |   move.w 122(sp),d0
    14be:	|  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    14c2:	|  |  |   move.w 166c0 <CstBackdropSizePlane>,d0
    14c8:	|  |  |   move.w d0,d0
    14ca:	|  |  |   andi.l #65535,d0
    14d0:	|  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    14d4:	|  |  |   addq.l #1,132(sp)
    14d8:	|  |  \-> moveq #4,d0
    14da:	|  |      cmp.l 132(sp),d0
    14de:	|  \----- bge.s 1478 <CstLoadBackdrop+0x2c4>
  }    

  WaitBlit();
    14e0:	|         move.l 16790 <GfxBase>,d0
    14e6:	|         movea.l d0,a6
    14e8:	|         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    14ec:	|         pea 13afa <PutChar+0x18c>
    14f2:	|         jsr 13046 <KPrintF>
    14f8:	|         addq.l #4,sp


  FreeVec(tmpbuffer);
    14fa:	|         move.l 90(sp),22(sp)
    1500:	|         move.l 16784 <SysBase>,d0
    1506:	|         movea.l d0,a6
    1508:	|         movea.l 22(sp),a1
    150c:	|         jsr -690(a6)
  FreeVec(tmpmask);
    1510:	|         move.l 52(sp),18(sp)
    1516:	|         move.l 16784 <SysBase>,d0
    151c:	|         movea.l d0,a6
    151e:	|         movea.l 18(sp),a1
    1522:	|         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1526:	|         move.w #2,166ca <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    152e:	|         pea 13b1a <PutChar+0x1ac>
    1534:	|         jsr 13046 <KPrintF>
    153a:	|         addq.l #4,sp

}
    153c:	\-------> movem.l (sp)+,d2-d4/a6
    1540:	          lea 136(sp),sp
    1544:	          rts

00001546 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    1546:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1548:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    154e:	move.l 8(sp),d0
    1552:	movea.l (sp),a0
    1554:	move.l d0,128(a0)
}
    1558:	nop
    155a:	addq.l #4,sp
    155c:	rts

0000155e <CstSludgeDisplay>:

void CstSludgeDisplay() {  
  if(CstApplyBackDropCounter > 0) 
    155e:	    move.w 166ca <CstApplyBackDropCounter>,d0
    1564:	/-- ble.s 157a <CstSludgeDisplay+0x1c>
  {
    CstDisplayBackDrop();
    1566:	|   jsr 10f4 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    156c:	|   move.w 166ca <CstApplyBackDropCounter>,d0
    1572:	|   subq.w #1,d0
    1574:	|   move.w d0,166ca <CstApplyBackDropCounter>
  }
  CstSwapBuffer();
    157a:	\-> jsr 1584 <CstSwapBuffer>
  
}
    1580:	    nop
    1582:	    rts

00001584 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    1584:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    1588:	move.l 166cc <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    1590:	move.l 166d0 <CstDrawBuffer>,d0
    1596:	move.l d0,166cc <CstViewBuffer>
  CstDrawBuffer = tmp;
    159c:	move.l 12(sp),166d0 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    15a4:	move.l 166c6 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    15ac:	move.l 166cc <CstViewBuffer>,d0
    15b2:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    15b6:	move.l 4(sp),d0
    15ba:	clr.w d0
    15bc:	swap d0
    15be:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    15c2:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    15c6:	movea.w #118,a0
    15ca:	adda.l 8(sp),a0
    15ce:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    15d0:	movea.w #114,a0
    15d4:	adda.l 8(sp),a0
    15d8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    15dc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    15e4:	move.l 4(sp),d0
    15e8:	clr.w d0
    15ea:	swap d0
    15ec:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    15f0:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    15f4:	movea.w #126,a0
    15f8:	adda.l 8(sp),a0
    15fc:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    15fe:	movea.w #122,a0
    1602:	adda.l 8(sp),a0
    1606:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    160a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1612:	move.l 4(sp),d0
    1616:	clr.w d0
    1618:	swap d0
    161a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    161e:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1622:	movea.l 8(sp),a0
    1626:	lea 134(a0),a0
    162a:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    162c:	movea.l 8(sp),a0
    1630:	lea 130(a0),a0
    1634:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1638:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1640:	move.l 4(sp),d0
    1644:	clr.w d0
    1646:	swap d0
    1648:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    164c:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    1650:	movea.l 8(sp),a0
    1654:	lea 142(a0),a0
    1658:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    165a:	movea.l 8(sp),a0
    165e:	lea 138(a0),a0
    1662:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1666:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    166e:	move.l 4(sp),d0
    1672:	clr.w d0
    1674:	swap d0
    1676:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    167a:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    167e:	movea.l 8(sp),a0
    1682:	lea 150(a0),a0
    1686:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    1688:	movea.l 8(sp),a0
    168c:	lea 146(a0),a0
    1690:	move.w 2(sp),(a0)

}
    1694:	nop
    1696:	lea 16(sp),sp
    169a:	rts

0000169c <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    169c:	          lea -44(sp),sp
    16a0:	          move.l a6,-(sp)

  width = width / 8;
    16a2:	          move.l 52(sp),d0
    16a6:	      /-- bpl.s 16aa <CstReserveBackdrop+0xe>
    16a8:	      |   addq.l #7,d0
    16aa:	      \-> asr.l #3,d0
    16ac:	          move.l d0,52(sp)

  if( width < 40) 
    16b0:	          moveq #39,d0
    16b2:	          cmp.l 52(sp),d0
    16b6:	      /-- blt.s 16cc <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    16b8:	      |   pea 13b34 <PutChar+0x1c6>
    16be:	      |   jsr 13046 <KPrintF>
    16c4:	      |   addq.l #4,sp
    return FALSE;
    16c6:	      |   clr.w d0
    16c8:	/-----|-- bra.w 1840 <CstReserveBackdrop+0x1a4>
  }  

  CstCopperList = CstCreateCopperlist( width);
    16cc:	|     \-> move.l 52(sp),-(sp)
    16d0:	|         jsr f1a <CstCreateCopperlist>
    16d6:	|         addq.l #4,sp
    16d8:	|         move.l d0,166c6 <CstCopperList>
  CstBackdropSizePlane = width*height;
    16de:	|         move.l 52(sp),d1
    16e2:	|         move.l 56(sp),d0
    16e6:	|         muls.w d1,d0
    16e8:	|         move.w d0,166c0 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    16ee:	|         move.w 166c0 <CstBackdropSizePlane>,d1
    16f4:	|         move.w d1,d0
    16f6:	|         add.w d0,d0
    16f8:	|         add.w d0,d0
    16fa:	|         add.w d1,d0
    16fc:	|         move.w d0,166be <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    1702:	|         move.w 166be <CstBackdropSize>,d0
    1708:	|         move.w d0,d0
    170a:	|         andi.l #65535,d0
    1710:	|         move.l d0,36(sp)
    1714:	|         moveq #2,d1
    1716:	|         move.l d1,32(sp)
    171a:	|         move.l 16784 <SysBase>,d0
    1720:	|         movea.l d0,a6
    1722:	|         move.l 36(sp),d0
    1726:	|         move.l 32(sp),d1
    172a:	|         jsr -684(a6)
    172e:	|         move.l d0,28(sp)
    1732:	|         move.l 28(sp),d0
    1736:	|         move.l d0,166c2 <CstBackDrop>
  if( !CstBackDrop)
    173c:	|         move.l 166c2 <CstBackDrop>,d0
    1742:	|     /-- bne.s 1758 <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    1744:	|     |   pea 13b72 <PutChar+0x204>
    174a:	|     |   jsr 13046 <KPrintF>
    1750:	|     |   addq.l #4,sp
    return FALSE;  
    1752:	|     |   clr.w d0
    1754:	+-----|-- bra.w 1840 <CstReserveBackdrop+0x1a4>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    1758:	|     \-> move.l 166c2 <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1760:	|         clr.l 40(sp)
    1764:	|     /-- bra.s 177a <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    1766:	|  /--|-> move.l 44(sp),d0
    176a:	|  |  |   move.l d0,d1
    176c:	|  |  |   addq.l #4,d1
    176e:	|  |  |   move.l d1,44(sp)
    1772:	|  |  |   movea.l d0,a0
    1774:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1776:	|  |  |   addq.l #1,40(sp)
    177a:	|  |  \-> move.w 166be <CstBackdropSize>,d0
    1780:	|  |      lsr.w #2,d0
    1782:	|  |      move.w d0,d0
    1784:	|  |      andi.l #65535,d0
    178a:	|  |      cmp.l 40(sp),d0
    178e:	|  \----- bgt.s 1766 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1790:	|         move.w 166be <CstBackdropSize>,d0
    1796:	|         move.w d0,d0
    1798:	|         andi.l #65535,d0
    179e:	|         move.l d0,24(sp)
    17a2:	|         moveq #2,d0
    17a4:	|         move.l d0,20(sp)
    17a8:	|         move.l 16784 <SysBase>,d0
    17ae:	|         movea.l d0,a6
    17b0:	|         move.l 24(sp),d0
    17b4:	|         move.l 20(sp),d1
    17b8:	|         jsr -684(a6)
    17bc:	|         move.l d0,16(sp)
    17c0:	|         move.l 16(sp),d0
    17c4:	|         move.l d0,166d0 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    17ca:	|         move.w 166be <CstBackdropSize>,d0
    17d0:	|         move.w d0,d0
    17d2:	|         andi.l #65535,d0
    17d8:	|         move.l d0,12(sp)
    17dc:	|         moveq #2,d1
    17de:	|         move.l d1,8(sp)
    17e2:	|         move.l 16784 <SysBase>,d0
    17e8:	|         movea.l d0,a6
    17ea:	|         move.l 12(sp),d0
    17ee:	|         move.l 8(sp),d1
    17f2:	|         jsr -684(a6)
    17f6:	|         move.l d0,4(sp)
    17fa:	|         move.l 4(sp),d0
    17fe:	|         move.l d0,166cc <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1804:	|         move.l 166c6 <CstCopperList>,d0
    180a:	|     /-- beq.s 181c <CstReserveBackdrop+0x180>
    180c:	|     |   move.l 166d0 <CstDrawBuffer>,d0
    1812:	|     +-- beq.s 181c <CstReserveBackdrop+0x180>
    1814:	|     |   move.l 166cc <CstViewBuffer>,d0
    181a:	|  /--|-- bne.s 182e <CstReserveBackdrop+0x192>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    181c:	|  |  \-> pea 13baa <PutChar+0x23c>
    1822:	|  |      jsr 13046 <KPrintF>
    1828:	|  |      addq.l #4,sp
    return FALSE;
    182a:	|  |      clr.w d0
    182c:	+--|----- bra.s 1840 <CstReserveBackdrop+0x1a4>
  }

  CstSetCl( CstCopperList);
    182e:	|  \----> move.l 166c6 <CstCopperList>,d0
    1834:	|         move.l d0,-(sp)
    1836:	|         jsr 1546 <CstSetCl>
    183c:	|         addq.l #4,sp
  return TRUE;
    183e:	|         moveq #1,d0

}
    1840:	\-------> movea.l (sp)+,a6
    1842:	          lea 44(sp),sp
    1846:	          rts

00001848 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1848:	    lea -12(sp),sp
    184c:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    184e:	    move.l 166d0 <CstDrawBuffer>,d0
    1854:	/-- beq.s 186e <CstFreeBuffer+0x26>
    1856:	|   move.l 166d0 <CstDrawBuffer>,12(sp)
    185e:	|   move.l 16784 <SysBase>,d0
    1864:	|   movea.l d0,a6
    1866:	|   movea.l 12(sp),a1
    186a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    186e:	\-> move.l 166cc <CstViewBuffer>,d0
    1874:	/-- beq.s 188e <CstFreeBuffer+0x46>
    1876:	|   move.l 166cc <CstViewBuffer>,8(sp)
    187e:	|   move.l 16784 <SysBase>,d0
    1884:	|   movea.l d0,a6
    1886:	|   movea.l 8(sp),a1
    188a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    188e:	\-> move.l 166c6 <CstCopperList>,d0
    1894:	/-- beq.s 18ae <CstFreeBuffer+0x66>
    1896:	|   move.l 166c6 <CstCopperList>,4(sp)
    189e:	|   move.l 16784 <SysBase>,d0
    18a4:	|   movea.l d0,a6
    18a6:	|   movea.l 4(sp),a1
    18aa:	|   jsr -690(a6)
}
    18ae:	\-> nop
    18b0:	    movea.l (sp)+,a6
    18b2:	    lea 12(sp),sp
    18b6:	    rts

000018b8 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    18b8:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    18bc:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    18c0:	       tst.l 24(sp)
    18c4:	   /-- bge.s 18ca <drawLine+0x12>
    18c6:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    18ca:	   \-> tst.l 28(sp)
    18ce:	   /-- bge.s 18d4 <drawLine+0x1c>
    18d0:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    18d4:	   \-> tst.l 32(sp)
    18d8:	   /-- bge.s 18de <drawLine+0x26>
    18da:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    18de:	   \-> tst.l 36(sp)
    18e2:	   /-- bge.s 18e8 <drawLine+0x30>
    18e4:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    18e8:	   \-> move.l 16874 <sceneWidth>,d0
    18ee:	       cmp.l 24(sp),d0
    18f2:	   /-- bge.s 1902 <drawLine+0x4a>
    18f4:	   |   move.l 16874 <sceneWidth>,d0
    18fa:	   |   move.l d0,d1
    18fc:	   |   subq.l #1,d1
    18fe:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    1902:	   \-> move.l 16874 <sceneWidth>,d0
    1908:	       cmp.l 32(sp),d0
    190c:	   /-- bge.s 191c <drawLine+0x64>
    190e:	   |   move.l 16874 <sceneWidth>,d0
    1914:	   |   move.l d0,d1
    1916:	   |   subq.l #1,d1
    1918:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    191c:	   \-> move.l 16878 <sceneHeight>,d0
    1922:	       cmp.l 28(sp),d0
    1926:	   /-- bge.s 1936 <drawLine+0x7e>
    1928:	   |   move.l 16878 <sceneHeight>,d0
    192e:	   |   move.l d0,d1
    1930:	   |   subq.l #1,d1
    1932:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1936:	   \-> move.l 16878 <sceneHeight>,d0
    193c:	       cmp.l 36(sp),d0
    1940:	   /-- bge.s 1950 <drawLine+0x98>
    1942:	   |   move.l 16878 <sceneHeight>,d0
    1948:	   |   move.l d0,d1
    194a:	   |   subq.l #1,d1
    194c:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    1950:	   \-> move.l 24(sp),d0
    1954:	       cmp.l 32(sp),d0
    1958:	/----- ble.s 1974 <drawLine+0xbc>
		x = x2; 
    195a:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    1960:	|      tst.w 10(sp)
    1964:	|      seq d0
    1966:	|      neg.b d0
    1968:	|      move.b d0,d0
    196a:	|      andi.w #255,d0
    196e:	|      move.w d0,10(sp)
    1972:	|  /-- bra.s 197a <drawLine+0xc2>
	} else x = x1;
    1974:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    197a:	   \-> move.l 28(sp),d1
    197e:	       cmp.l 36(sp),d1
    1982:	/----- ble.s 199e <drawLine+0xe6>
		y = y2; 
    1984:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    198a:	|      tst.w 10(sp)
    198e:	|      seq d0
    1990:	|      neg.b d0
    1992:	|      move.b d0,d0
    1994:	|      andi.w #255,d0
    1998:	|      move.w d0,10(sp)
    199c:	|  /-- bra.s 19a4 <drawLine+0xec>
	} else y = y1;	
    199e:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    19a4:	   \-> move.l 32(sp),d0
    19a8:	       sub.l 24(sp),d0
    19ac:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    19b0:	       move.l 6(sp),d0
    19b4:	   /-- bpl.s 19b8 <drawLine+0x100>
    19b6:	   |   neg.l d0
    19b8:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    19bc:	       move.l 36(sp),d1
    19c0:	       sub.l 28(sp),d1
    19c4:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    19c8:	       move.l 2(sp),d0
    19cc:	   /-- bpl.s 19d0 <drawLine+0x118>
    19ce:	   |   neg.l d0
    19d0:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    19d4:	       tst.l 6(sp)
    19d8:	   /-- bne.s 19fc <drawLine+0x144>
		diffX = 1;
    19da:	   |   moveq #1,d0
    19dc:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    19e0:	   |   move.l 16874 <sceneWidth>,d0
    19e6:	   |   subq.l #1,d0
    19e8:	   |   cmp.l 16(sp),d0
    19ec:	   +-- bne.s 19fc <drawLine+0x144>
    19ee:	   |   move.l 16874 <sceneWidth>,d0
    19f4:	   |   move.l d0,d1
    19f6:	   |   subq.l #2,d1
    19f8:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    19fc:	   \-> tst.l 2(sp)
    1a00:	   /-- bne.s 1a24 <drawLine+0x16c>
		diffY = 1;
    1a02:	   |   moveq #1,d0
    1a04:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1a08:	   |   move.l 16878 <sceneHeight>,d0
    1a0e:	   |   subq.l #1,d0
    1a10:	   |   cmp.l 12(sp),d0
    1a14:	   +-- bne.s 1a24 <drawLine+0x16c>
    1a16:	   |   move.l 16878 <sceneHeight>,d0
    1a1c:	   |   move.l d0,d1
    1a1e:	   |   subq.l #2,d1
    1a20:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1a24:	   \-> pea 13bd7 <PutChar+0x269>
    1a2a:	       jsr 13046 <KPrintF>
    1a30:	       addq.l #4,sp
	
}
    1a32:	       nop
    1a34:	       lea 20(sp),sp
    1a38:	       rts

00001a3a <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1a3a:	                      lea -24(sp),sp
    1a3e:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1a40:	                      move.l 166e4 <firstTexture>,d0
    1a46:	/-------------------- beq.w 1b24 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1a4a:	|                     clr.l 24(sp)
    1a4e:	|     /-------------- bra.w 1b18 <deleteTextures+0xde>
			BOOL found = FALSE;
    1a52:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1a56:	|  |  |               move.l 166e4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    1a5e:	|  |  |               movea.l 20(sp),a0
    1a62:	|  |  |               move.l (a0),d1
    1a64:	|  |  |               move.l 24(sp),d0
    1a68:	|  |  |               add.l d0,d0
    1a6a:	|  |  |               add.l d0,d0
    1a6c:	|  |  |               movea.l 36(sp),a0
    1a70:	|  |  |               adda.l d0,a0
    1a72:	|  |  |               move.l (a0),d0
    1a74:	|  |  |               cmp.l d1,d0
    1a76:	|  |  |  /----------- bne.w 1b0a <deleteTextures+0xd0>
				found = TRUE;
    1a7a:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    1a80:	|  |  |  |            movea.l 20(sp),a0
    1a84:	|  |  |  |            move.l 12(a0),d0
    1a88:	|  |  |  |            move.l d0,166e4 <firstTexture>
				FreeVec(list);
    1a8e:	|  |  |  |            move.l 20(sp),6(sp)
    1a94:	|  |  |  |            move.l 16784 <SysBase>,d0
    1a9a:	|  |  |  |            movea.l d0,a6
    1a9c:	|  |  |  |            movea.l 6(sp),a1
    1aa0:	|  |  |  |            jsr -690(a6)
				continue;
    1aa4:	|  |  |  |  /-------- bra.s 1b14 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1aa6:	|  |  |  |  |  /----> movea.l 20(sp),a0
    1aaa:	|  |  |  |  |  |      movea.l 12(a0),a0
    1aae:	|  |  |  |  |  |      move.l (a0),d1
    1ab0:	|  |  |  |  |  |      move.l 24(sp),d0
    1ab4:	|  |  |  |  |  |      add.l d0,d0
    1ab6:	|  |  |  |  |  |      add.l d0,d0
    1ab8:	|  |  |  |  |  |      movea.l 36(sp),a0
    1abc:	|  |  |  |  |  |      adda.l d0,a0
    1abe:	|  |  |  |  |  |      move.l (a0),d0
    1ac0:	|  |  |  |  |  |      cmp.l d1,d0
    1ac2:	|  |  |  |  |  |  /-- bne.s 1b00 <deleteTextures+0xc6>
					found = TRUE;
    1ac4:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1aca:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1ace:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1ad4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1ad8:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1adc:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1ae0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1ae4:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1ae8:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1aee:	|  |  |  |  |  |  |   move.l 16784 <SysBase>,d0
    1af4:	|  |  |  |  |  |  |   movea.l d0,a6
    1af6:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1afa:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1afe:	|  |  |  |  +--|--|-- bra.s 1b14 <deleteTextures+0xda>
				}
				list = list->next;
    1b00:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1b04:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1b0a:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1b0e:	|  |  |     |  |      move.l 12(a0),d0
    1b12:	|  |  |     |  \----- bne.s 1aa6 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1b14:	|  |  |     \-------> addq.l #1,24(sp)
    1b18:	|  |  \-------------> move.l 24(sp),d0
    1b1c:	|  |                  cmp.l 32(sp),d0
    1b20:	|  \----------------- bcs.w 1a52 <deleteTextures+0x18>
			}
		}
	}
}
    1b24:	\-------------------> nop
    1b26:	                      movea.l (sp)+,a6
    1b28:	                      lea 24(sp),sp
    1b2c:	                      rts

00001b2e <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1b2e:	subq.l #4,sp
    1b30:	move.l 8(sp),d0
    1b34:	move.w d0,d0
    1b36:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1b3a:	pea 13bfa <PutChar+0x28c>
    1b40:	jsr 13046 <KPrintF>
    1b46:	addq.l #4,sp
}
    1b48:	nop
    1b4a:	addq.l #4,sp
    1b4c:	rts

00001b4e <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1b4e:	       moveq #-1,d0
    1b50:	       cmp.l 4(sp),d0
    1b54:	   /-- bne.s 1b5a <resourceNameFromNum+0xc>
    1b56:	   |   moveq #0,d0
    1b58:	/--|-- bra.s 1b92 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1b5a:	|  \-> move.l 16760 <numResourceNames>,d0
    1b60:	|  /-- bne.s 1b6a <resourceNameFromNum+0x1c>
    1b62:	|  |   move.l #80938,d0
    1b68:	+--|-- bra.s 1b92 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1b6a:	|  \-> move.l 16760 <numResourceNames>,d0
    1b70:	|      cmp.l 4(sp),d0
    1b74:	|  /-- ble.s 1b8c <resourceNameFromNum+0x3e>
    1b76:	|  |   move.l 1671c <allResourceNames>,d1
    1b7c:	|  |   move.l 4(sp),d0
    1b80:	|  |   add.l d0,d0
    1b82:	|  |   add.l d0,d0
    1b84:	|  |   movea.l d1,a0
    1b86:	|  |   adda.l d0,a0
    1b88:	|  |   move.l (a0),d0
    1b8a:	+--|-- bra.s 1b92 <resourceNameFromNum+0x44>
	return "Unknown resource";
    1b8c:	|  \-> move.l #80947,d0
    1b92:	\----> rts

00001b94 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    1b94:	          lea -40(sp),sp
    1b98:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    1b9c:	          move.l #320,166dc <winWidth>
    winHeight = 256;
    1ba6:	          move.l #256,166e0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1bb0:	          tst.l 56(sp)
    1bb4:	      /-- bne.s 1bcc <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1bb6:	      |   pea 13c44 <PutChar+0x2d6>
    1bbc:	      |   jsr b8 <copyString>
    1bc2:	      |   addq.l #4,sp
    1bc4:	      |   move.l d0,166f4 <bundleFolder>
    1bca:	   /--|-- bra.s 1be2 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1bcc:	   |  \-> movea.l 60(sp),a0
    1bd0:	   |      move.l (a0),d0
    1bd2:	   |      move.l d0,-(sp)
    1bd4:	   |      jsr b8 <copyString>
    1bda:	   |      addq.l #4,sp
    1bdc:	   |      move.l d0,166f4 <bundleFolder>
	}
    
	int lastSlash = -1;
    1be2:	   \----> moveq #-1,d0
    1be4:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1be8:	          clr.l 40(sp)
    1bec:	   /----- bra.s 1c0e <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1bee:	/--|----> move.l 166f4 <bundleFolder>,d1
    1bf4:	|  |      move.l 40(sp),d0
    1bf8:	|  |      movea.l d1,a0
    1bfa:	|  |      adda.l d0,a0
    1bfc:	|  |      move.b (a0),d0
    1bfe:	|  |      cmpi.b #47,d0
    1c02:	|  |  /-- bne.s 1c0a <main_sludge+0x76>
    1c04:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1c0a:	|  |  \-> addq.l #1,40(sp)
    1c0e:	|  \----> move.l 166f4 <bundleFolder>,d1
    1c14:	|         move.l 40(sp),d0
    1c18:	|         movea.l d1,a0
    1c1a:	|         adda.l d0,a0
    1c1c:	|         move.b (a0),d0
    1c1e:	\-------- bne.s 1bee <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1c20:	          move.l 166f4 <bundleFolder>,d0
    1c26:	          move.l 44(sp),d1
    1c2a:	          addq.l #1,d1
    1c2c:	          movea.l d0,a0
    1c2e:	          adda.l d1,a0
    1c30:	          clr.b (a0)

	if (argc > 1) {
    1c32:	          moveq #1,d0
    1c34:	          cmp.l 56(sp),d0
    1c38:	      /-- bge.s 1c54 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1c3a:	      |   move.l 56(sp),d0
    1c3e:	      |   addi.l #1073741823,d0
    1c44:	      |   add.l d0,d0
    1c46:	      |   add.l d0,d0
    1c48:	      |   movea.l 60(sp),a0
    1c4c:	      |   adda.l d0,a0
    1c4e:	      |   move.l (a0),48(sp)
    1c52:	   /--|-- bra.s 1cae <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1c54:	   |  \-> move.l 166f4 <bundleFolder>,d0
    1c5a:	   |      pea 13c4a <PutChar+0x2dc>
    1c60:	   |      move.l d0,-(sp)
    1c62:	   |      jsr 1052a <joinStrings>
    1c68:	   |      addq.l #8,sp
    1c6a:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1c6e:	   |      move.l 48(sp),-(sp)
    1c72:	   |      jsr 10424 <fileExists>
    1c78:	   |      addq.l #4,sp
    1c7a:	   |      tst.b d0
    1c7c:	   +----- bne.s 1cae <main_sludge+0x11a>
			FreeVec(sludgeFile);
    1c7e:	   |      move.l 48(sp),36(sp)
    1c84:	   |      move.l 16784 <SysBase>,d0
    1c8a:	   |      movea.l d0,a6
    1c8c:	   |      movea.l 36(sp),a1
    1c90:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1c94:	   |      move.l 166f4 <bundleFolder>,d0
    1c9a:	   |      pea 13c57 <PutChar+0x2e9>
    1ca0:	   |      move.l d0,-(sp)
    1ca2:	   |      jsr 1052a <joinStrings>
    1ca8:	   |      addq.l #8,sp
    1caa:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    1cae:	   \----> pea 13c60 <PutChar+0x2f2>
    1cb4:	          jsr 13046 <KPrintF>
    1cba:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    1cbc:	          move.l 48(sp),-(sp)
    1cc0:	          jsr 10424 <fileExists>
    1cc6:	          addq.l #4,sp
    1cc8:	          tst.b d0
    1cca:	      /-- bne.s 1d22 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    1ccc:	      |   move.l 1678c <DOSBase>,d0
    1cd2:	      |   movea.l d0,a6
    1cd4:	      |   jsr -60(a6)
    1cd8:	      |   move.l d0,28(sp)
    1cdc:	      |   move.l 28(sp),d0
    1ce0:	      |   move.l d0,24(sp)
    1ce4:	      |   move.l #80992,20(sp)
    1cec:	      |   moveq #21,d0
    1cee:	      |   move.l d0,16(sp)
    1cf2:	      |   move.l 1678c <DOSBase>,d0
    1cf8:	      |   movea.l d0,a6
    1cfa:	      |   move.l 24(sp),d1
    1cfe:	      |   move.l 20(sp),d2
    1d02:	      |   move.l 16(sp),d3
    1d06:	      |   jsr -48(a6)
    1d0a:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    1d0e:	      |   pea 13c60 <PutChar+0x2f2>
    1d14:	      |   jsr 13046 <KPrintF>
    1d1a:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    1d1c:	      |   moveq #0,d0
    1d1e:	/-----|-- bra.w 1f0c <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    1d22:	|     \-> pea 13c76 <PutChar+0x308>
    1d28:	|         jsr 13046 <KPrintF>
    1d2e:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    1d30:	|         move.l 48(sp),-(sp)
    1d34:	|         jsr 1f16 <setGameFilePath>
    1d3a:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    1d3c:	|         move.l 48(sp),-(sp)
    1d40:	|         jsr 324a <initSludge>
    1d46:	|         addq.l #4,sp
    1d48:	|         tst.w d0
    1d4a:	|     /-- bne.s 1d52 <main_sludge+0x1be>
    1d4c:	|     |   moveq #0,d0
    1d4e:	+-----|-- bra.w 1f0c <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    1d52:	|     \-> move.l 166dc <winWidth>,d0
    1d58:	|         cmpi.l #320,d0
    1d5e:	|     /-- bne.s 1d6e <main_sludge+0x1da>
    1d60:	|     |   move.l 166e0 <winHeight>,d0
    1d66:	|     |   cmpi.l #256,d0
    1d6c:	|  /--|-- beq.s 1d90 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1d6e:	|  |  \-> pea 13c87 <PutChar+0x319>
    1d74:	|  |      jsr 13046 <KPrintF>
    1d7a:	|  |      addq.l #4,sp
		winWidth = 320;
    1d7c:	|  |      move.l #320,166dc <winWidth>
		winHeight = 256;
    1d86:	|  |      move.l #256,166e0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    1d90:	|  \----> pea 13d04 <PutChar+0x396>
    1d96:	|         jsr 13046 <KPrintF>
    1d9c:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    1d9e:	|         move.l 166e0 <winHeight>,d0
    1da4:	|         move.l d0,d1
    1da6:	|         move.l 166dc <winWidth>,d0
    1dac:	|         move.l d1,-(sp)
    1dae:	|         move.l d0,-(sp)
    1db0:	|         jsr 9d12 <resizeBackdrop>
    1db6:	|         addq.l #8,sp
    1db8:	|         tst.w d0
    1dba:	|     /-- bne.s 1dd0 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    1dbc:	|     |   pea 13d17 <PutChar+0x3a9>
    1dc2:	|     |   jsr 13046 <KPrintF>
    1dc8:	|     |   addq.l #4,sp
		return FALSE;
    1dca:	|     |   moveq #0,d0
    1dcc:	+-----|-- bra.w 1f0c <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    1dd0:	|     \-> pea 13d3d <PutChar+0x3cf>
    1dd6:	|         jsr 13046 <KPrintF>
    1ddc:	|         addq.l #4,sp
	if (! initPeople ())
    1dde:	|         jsr 7514 <initPeople>
    1de4:	|         tst.w d0
    1de6:	|     /-- bne.s 1dfc <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    1de8:	|     |   pea 13d4a <PutChar+0x3dc>
    1dee:	|     |   jsr 13046 <KPrintF>
    1df4:	|     |   addq.l #4,sp
		return FALSE;
    1df6:	|     |   moveq #0,d0
    1df8:	+-----|-- bra.w 1f0c <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    1dfc:	|     \-> pea 13d6b <PutChar+0x3fd>
    1e02:	|         jsr 13046 <KPrintF>
    1e08:	|         addq.l #4,sp
	if (! initFloor ())
    1e0a:	|         jsr 123fc <initFloor>
    1e10:	|         tst.w d0
    1e12:	|     /-- bne.s 1e28 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    1e14:	|     |   pea 13d77 <PutChar+0x409>
    1e1a:	|     |   jsr 13046 <KPrintF>
    1e20:	|     |   addq.l #4,sp
		
		return FALSE;
    1e22:	|     |   moveq #0,d0
    1e24:	+-----|-- bra.w 1f0c <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    1e28:	|     \-> pea 13d97 <PutChar+0x429>
    1e2e:	|         jsr 13046 <KPrintF>
    1e34:	|         addq.l #4,sp
	if (! initObjectTypes ())
    1e36:	|         jsr 9ece <initObjectTypes>
    1e3c:	|         tst.w d0
    1e3e:	|     /-- bne.s 1e54 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    1e40:	|     |   pea 13da8 <PutChar+0x43a>
    1e46:	|     |   jsr 13046 <KPrintF>
    1e4c:	|     |   addq.l #4,sp
		return FALSE;
    1e4e:	|     |   moveq #0,d0
    1e50:	+-----|-- bra.w 1f0c <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    1e54:	|     \-> pea 13dce <PutChar+0x460>
    1e5a:	|         jsr 13046 <KPrintF>
    1e60:	|         addq.l #4,sp
	initSpeech ();
    1e62:	|         jsr 5608 <initSpeech>
	KPrintF("Init status bar\n");
    1e68:	|         pea 13ddb <PutChar+0x46d>
    1e6e:	|         jsr 13046 <KPrintF>
    1e74:	|         addq.l #4,sp
	initStatusBar ();
    1e76:	|         jsr 50cc <initStatusBar>

	KPrintF("Get numbered string\n");
    1e7c:	|         pea 13dec <PutChar+0x47e>
    1e82:	|         jsr 13046 <KPrintF>
    1e88:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    1e8a:	|         pea 1 <_start+0x1>
    1e8e:	|         jsr 43ea <getNumberedString>
    1e94:	|         addq.l #4,sp
    1e96:	|         move.l d0,166ec <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    1e9c:	|         pea 13e01 <PutChar+0x493>
    1ea2:	|         jsr 13046 <KPrintF>
    1ea8:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    1eaa:	|         move.l 16754 <noStack>,d0
    1eb0:	|         pea 1 <_start+0x1>
    1eb4:	|         move.l d0,-(sp)
    1eb6:	|         clr.l -(sp)
    1eb8:	|         clr.l -(sp)
    1eba:	|         clr.l -(sp)
    1ebc:	|         jsr 4272 <startNewFunctionNum>
    1ec2:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    1ec6:	|         pea 13e19 <PutChar+0x4ab>
    1ecc:	|         jsr 13046 <KPrintF>
    1ed2:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    1ed4:	|         clr.l 166f8 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    1eda:	|     /-- bra.s 1eee <main_sludge+0x35a>
		sludgeDisplay ();
    1edc:	|  /--|-> jsr 4224 <sludgeDisplay>
		handleInput();
    1ee2:	|  |  |   jsr 3242 <handleInput>
		WaitVbl();
    1ee8:	|  |  |   jsr 12f7a <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    1eee:	|  |  \-> move.l 166f8 <weAreDoneSoQuit>,d0
    1ef4:	|  \----- beq.s 1edc <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1ef6:	|         move.l 48(sp),32(sp)
    1efc:	|         move.l 16784 <SysBase>,d0
    1f02:	|         movea.l d0,a6
    1f04:	|         movea.l 32(sp),a1
    1f08:	|         jsr -690(a6)
}
    1f0c:	\-------> movem.l (sp)+,d2-d3/a6
    1f10:	          lea 40(sp),sp
    1f14:	          rts

00001f16 <setGameFilePath>:

void setGameFilePath (char * f) {
    1f16:	          lea -1104(sp),sp
    1f1a:	          move.l a6,-(sp)
    1f1c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1f1e:	          move.l #1112,d0
    1f24:	          add.l sp,d0
    1f26:	          addi.l #-1102,d0
    1f2c:	          move.l d0,1100(sp)
    1f30:	          move.l #998,1096(sp)
    1f38:	          move.l 1678c <DOSBase>,d0
    1f3e:	          movea.l d0,a6
    1f40:	          move.l 1100(sp),d1
    1f44:	          move.l 1096(sp),d2
    1f48:	          jsr -564(a6)
    1f4c:	          move.w d0,1094(sp)
    1f50:	          move.w 1094(sp),d0
    1f54:	      /-- bne.s 1f64 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    1f56:	      |   pea 13e2c <PutChar+0x4be>
    1f5c:	      |   jsr 13046 <KPrintF>
    1f62:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    1f64:	      \-> moveq #-1,d0
    1f66:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    1f6a:	          clr.l 1104(sp)
    1f6e:	   /----- bra.s 1f8c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    1f70:	/--|----> move.l 1104(sp),d0
    1f74:	|  |      movea.l 1116(sp),a0
    1f78:	|  |      adda.l d0,a0
    1f7a:	|  |      move.b (a0),d0
    1f7c:	|  |      cmpi.b #47,d0
    1f80:	|  |  /-- bne.s 1f88 <setGameFilePath+0x72>
    1f82:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    1f88:	|  |  \-> addq.l #1,1104(sp)
    1f8c:	|  \----> move.l 1104(sp),d0
    1f90:	|         movea.l 1116(sp),a0
    1f94:	|         adda.l d0,a0
    1f96:	|         move.b (a0),d0
    1f98:	\-------- bne.s 1f70 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    1f9a:	          moveq #-1,d0
    1f9c:	          cmp.l 1108(sp),d0
    1fa0:	   /----- beq.s 201a <setGameFilePath+0x104>
		f[got] = 0;	
    1fa2:	   |      move.l 1108(sp),d0
    1fa6:	   |      movea.l 1116(sp),a0
    1faa:	   |      adda.l d0,a0
    1fac:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1fae:	   |      move.l 1116(sp),1090(sp)
    1fb4:	   |      moveq #-2,d0
    1fb6:	   |      move.l d0,1086(sp)
    1fba:	   |      move.l 1678c <DOSBase>,d0
    1fc0:	   |      movea.l d0,a6
    1fc2:	   |      move.l 1090(sp),d1
    1fc6:	   |      move.l 1086(sp),d2
    1fca:	   |      jsr -84(a6)
    1fce:	   |      move.l d0,1082(sp)
    1fd2:	   |      move.l 1082(sp),d0
    1fd6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1fda:	   |      move.l 1078(sp),1074(sp)
    1fe0:	   |      move.l 1678c <DOSBase>,d0
    1fe6:	   |      movea.l d0,a6
    1fe8:	   |      move.l 1074(sp),d1
    1fec:	   |      jsr -126(a6)
    1ff0:	   |      move.l d0,1070(sp)
    1ff4:	   |      move.l 1070(sp),d0
    1ff8:	   |  /-- bne.s 200c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1ffa:	   |  |   move.l 1116(sp),-(sp)
    1ffe:	   |  |   pea 13e52 <PutChar+0x4e4>
    2004:	   |  |   jsr 13046 <KPrintF>
    200a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    200c:	   |  \-> move.l 1108(sp),d0
    2010:	   |      movea.l 1116(sp),a0
    2014:	   |      adda.l d0,a0
    2016:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    201a:	   \----> move.l #400,1066(sp)
    2022:	          clr.l 1062(sp)
    2026:	          move.l 16784 <SysBase>,d0
    202c:	          movea.l d0,a6
    202e:	          move.l 1066(sp),d0
    2032:	          move.l 1062(sp),d1
    2036:	          jsr -684(a6)
    203a:	          move.l d0,1058(sp)
    203e:	          move.l 1058(sp),d0
    2042:	          move.l d0,166f0 <gamePath>
	if (gamePath==0) {
    2048:	          move.l 166f0 <gamePath>,d0
    204e:	      /-- bne.s 2062 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    2050:	      |   pea 13e85 <PutChar+0x517>
    2056:	      |   jsr 13046 <KPrintF>
    205c:	      |   addq.l #4,sp
    205e:	   /--|-- bra.w 214a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    2062:	   |  \-> move.l 166f0 <gamePath>,1054(sp)
    206a:	   |      moveq #-2,d0
    206c:	   |      move.l d0,1050(sp)
    2070:	   |      move.l 1678c <DOSBase>,d0
    2076:	   |      movea.l d0,a6
    2078:	   |      move.l 1054(sp),d1
    207c:	   |      move.l 1050(sp),d2
    2080:	   |      jsr -84(a6)
    2084:	   |      move.l d0,1046(sp)
    2088:	   |      move.l 1046(sp),d0
    208c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2090:	   |      move.l 1042(sp),1038(sp)
    2096:	   |      move.l 1678c <DOSBase>,d0
    209c:	   |      movea.l d0,a6
    209e:	   |      move.l 1038(sp),d1
    20a2:	   |      jsr -126(a6)
    20a6:	   |      move.l d0,1034(sp)
    20aa:	   |      move.l 1034(sp),d0
    20ae:	   |  /-- bne.s 20be <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    20b0:	   |  |   pea 13ec0 <PutChar+0x552>
    20b6:	   |  |   jsr 13046 <KPrintF>
    20bc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    20be:	   |  \-> move.l #1112,d0
    20c4:	   |      add.l sp,d0
    20c6:	   |      addi.l #-1102,d0
    20cc:	   |      move.l d0,1030(sp)
    20d0:	   |      moveq #-2,d0
    20d2:	   |      move.l d0,1026(sp)
    20d6:	   |      move.l 1678c <DOSBase>,d0
    20dc:	   |      movea.l d0,a6
    20de:	   |      move.l 1030(sp),d1
    20e2:	   |      move.l 1026(sp),d2
    20e6:	   |      jsr -84(a6)
    20ea:	   |      move.l d0,1022(sp)
    20ee:	   |      move.l 1022(sp),d0
    20f2:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    20f6:	   |      move.l 1042(sp),1018(sp)
    20fc:	   |      move.l 1678c <DOSBase>,d0
    2102:	   |      movea.l d0,a6
    2104:	   |      move.l 1018(sp),d1
    2108:	   |      jsr -126(a6)
    210c:	   |      move.l d0,1014(sp)
    2110:	   |      move.l 1014(sp),d0
    2114:	   |  /-- bne.s 212a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    2116:	   |  |   moveq #10,d0
    2118:	   |  |   add.l sp,d0
    211a:	   |  |   move.l d0,-(sp)
    211c:	   |  |   pea 13eec <PutChar+0x57e>
    2122:	   |  |   jsr 13046 <KPrintF>
    2128:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    212a:	   |  \-> move.l 166f0 <gamePath>,d0
    2130:	   +----- beq.s 214a <setGameFilePath+0x234>
    2132:	   |      move.l 166f0 <gamePath>,1010(sp)
    213a:	   |      move.l 16784 <SysBase>,d0
    2140:	   |      movea.l d0,a6
    2142:	   |      movea.l 1010(sp),a1
    2146:	   |      jsr -690(a6)
}
    214a:	   \----> move.l (sp)+,d2
    214c:	          movea.l (sp)+,a6
    214e:	          lea 1104(sp),sp
    2152:	          rts

00002154 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    2154:	/-------> lea -16(sp),sp
    2158:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    215a:	|         move.l 24(sp),-(sp)
    215e:	|         jsr 4006 <pauseFunction>
    2164:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    2166:	|     /-- bra.s 2178 <abortFunction+0x24>
    2168:	|  /--|-> moveq #24,d0
    216a:	|  |  |   add.l 24(sp),d0
    216e:	|  |  |   move.l d0,-(sp)
    2170:	|  |  |   jsr 11982 <trimStack>
    2176:	|  |  |   addq.l #4,sp
    2178:	|  |  \-> movea.l 24(sp),a0
    217c:	|  |      move.l 24(a0),d0
    2180:	|  \----- bne.s 2168 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    2182:	|         movea.l 24(sp),a0
    2186:	|         move.l 4(a0),12(sp)
    218c:	|         move.l 16784 <SysBase>,d0
    2192:	|         movea.l d0,a6
    2194:	|         movea.l 12(sp),a1
    2198:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    219c:	|         clr.l 16(sp)
    21a0:	|     /-- bra.s 21c0 <abortFunction+0x6c>
    21a2:	|  /--|-> movea.l 24(sp),a0
    21a6:	|  |  |   move.l 20(a0),d1
    21aa:	|  |  |   move.l 16(sp),d0
    21ae:	|  |  |   lsl.l #3,d0
    21b0:	|  |  |   add.l d1,d0
    21b2:	|  |  |   move.l d0,-(sp)
    21b4:	|  |  |   jsr 1124c <unlinkVar>
    21ba:	|  |  |   addq.l #4,sp
    21bc:	|  |  |   addq.l #1,16(sp)
    21c0:	|  |  \-> movea.l 24(sp),a0
    21c4:	|  |      move.l 8(a0),d0
    21c8:	|  |      cmp.l 16(sp),d0
    21cc:	|  \----- bgt.s 21a2 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    21ce:	|         movea.l 24(sp),a0
    21d2:	|         move.l 20(a0),8(sp)
    21d8:	|         move.l 16784 <SysBase>,d0
    21de:	|         movea.l d0,a6
    21e0:	|         movea.l 8(sp),a1
    21e4:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    21e8:	|         moveq #28,d0
    21ea:	|         add.l 24(sp),d0
    21ee:	|         move.l d0,-(sp)
    21f0:	|         jsr 1124c <unlinkVar>
    21f6:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    21f8:	|         movea.l 24(sp),a0
    21fc:	|         move.l 40(a0),d0
    2200:	|     /-- beq.s 2212 <abortFunction+0xbe>
    2202:	|     |   movea.l 24(sp),a0
    2206:	|     |   move.l 40(a0),d0
    220a:	|     |   move.l d0,-(sp)
    220c:	\-----|-- jsr 2154 <abortFunction>(pc)
    2210:	      |   addq.l #4,sp
	FreeVec(fun);
    2212:	      \-> move.l 24(sp),4(sp)
    2218:	          move.l 16784 <SysBase>,d0
    221e:	          movea.l d0,a6
    2220:	          movea.l 4(sp),a1
    2224:	          jsr -690(a6)
	fun = NULL;
    2228:	          clr.l 24(sp)
}
    222c:	          nop
    222e:	          movea.l (sp)+,a6
    2230:	          lea 16(sp),sp
    2234:	          rts

00002236 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    2236:	          subq.l #8,sp
	int n = 0;
    2238:	          clr.l 4(sp)
	*killedMyself = FALSE;
    223c:	          movea.l 20(sp),a0
    2240:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    2242:	          move.l 16720 <allRunningFunctions>,(sp)
	while (fun) {
    2248:	   /----- bra.s 2276 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    224a:	/--|----> movea.l (sp),a0
    224c:	|  |      move.l (a0),d0
    224e:	|  |      cmp.l 12(sp),d0
    2252:	|  |  /-- bne.s 2270 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    2254:	|  |  |   movea.l (sp),a0
    2256:	|  |  |   move.w #1,54(a0)
			n++;
    225c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    2260:	|  |  |   move.l (sp),d0
    2262:	|  |  |   cmp.l 16(sp),d0
    2266:	|  |  +-- bne.s 2270 <cancelAFunction+0x3a>
    2268:	|  |  |   movea.l 20(sp),a0
    226c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    2270:	|  |  \-> movea.l (sp),a0
    2272:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2276:	|  \----> tst.l (sp)
    2278:	\-------- bne.s 224a <cancelAFunction+0x14>
	}
	return n;
    227a:	          move.l 4(sp),d0
}
    227e:	          addq.l #8,sp
    2280:	          rts

00002282 <completeTimers>:


void completeTimers () {
    2282:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    2284:	          move.l 16720 <allRunningFunctions>,(sp)

	while (thisFunction) {
    228a:	   /----- bra.s 22a0 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    228c:	/--|----> movea.l (sp),a0
    228e:	|  |      move.b 56(a0),d0
    2292:	|  |  /-- bne.s 229a <completeTimers+0x18>
    2294:	|  |  |   movea.l (sp),a0
    2296:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    229a:	|  |  \-> movea.l (sp),a0
    229c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    22a0:	|  \----> tst.l (sp)
    22a2:	\-------- bne.s 228c <completeTimers+0xa>
	}
}
    22a4:	          nop
    22a6:	          nop
    22a8:	          addq.l #4,sp
    22aa:	          rts

000022ac <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    22ac:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    22b0:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    22b6:	                                                             movea.l 80(sp),a0
    22ba:	                                                             move.w 54(a0),d0
    22be:	/----------------------------------------------------------- beq.w 315e <continueFunction+0xeb2>
		abortFunction (fun);
    22c2:	|                                                            move.l 80(sp),-(sp)
    22c6:	|                                                            jsr 2154 <abortFunction>
    22cc:	|                                                            addq.l #4,sp
		return TRUE;
    22ce:	|                                                            moveq #1,d0
    22d0:	|  /-------------------------------------------------------- bra.w 3168 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    22d4:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    22da:	|  |  |                                                      movea.l 80(sp),a0
    22de:	|  |  |                                                      move.l 4(a0),d1
    22e2:	|  |  |                                                      movea.l 80(sp),a0
    22e6:	|  |  |                                                      move.l 36(a0),d0
    22ea:	|  |  |                                                      lsl.l #3,d0
    22ec:	|  |  |                                                      movea.l d1,a0
    22ee:	|  |  |                                                      adda.l d0,a0
    22f0:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    22f6:	|  |  |                                                      movea.l 80(sp),a0
    22fa:	|  |  |                                                      move.l 4(a0),d1
    22fe:	|  |  |                                                      movea.l 80(sp),a0
    2302:	|  |  |                                                      move.l 36(a0),d0
    2306:	|  |  |                                                      lsl.l #3,d0
    2308:	|  |  |                                                      movea.l d1,a0
    230a:	|  |  |                                                      adda.l d0,a0
    230c:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2310:	|  |  |                                                      move.l 64(sp),-(sp)
    2314:	|  |  |                                                      pea 13ff4 <PutChar+0x686>
    231a:	|  |  |                                                      jsr 13046 <KPrintF>
    2320:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2322:	|  |  |                                                      moveq #41,d0
    2324:	|  |  |                                                      cmp.l 64(sp),d0
    2328:	|  |  |  /-------------------------------------------------- bcs.w 3112 <continueFunction+0xe66>
    232c:	|  |  |  |                                                   move.l 64(sp),d0
    2330:	|  |  |  |                                                   add.l d0,d0
    2332:	|  |  |  |                                                   movea.l d0,a0
    2334:	|  |  |  |                                                   adda.l #9024,a0
    233a:	|  |  |  |                                                   move.w (a0),d0
    233c:	|  |  |  |                                                   jmp (2340 <continueFunction+0x94>,pc,d0.w)
    2340:	|  |  |  |                                                   bset d6,(a2)
    2342:	|  |  |  |                                                   ori.w #2670,(a4)
    2346:	|  |  |  |                                                   eori.w #2416,d6
    234a:	|  |  |  |                                                   bchg d4,d2
    234c:	|  |  |  |                                                   bclr d4,(a4)+
    234e:	|  |  |  |                                                   andi.l #181013194,d4
    2354:	|  |  |  |                                                   .short 0x0aca
    2356:	|  |  |  |                                                   .short 0x0aca
    2358:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    2360:	|  |  |  |                                                   .short 0x0aca
    2362:	|  |  |  |                                                   andi.w #906,-(a4)
    2366:	|  |  |  |                                                   bchg d1,196(a2)
    236a:	|  |  |  |                                                   bset d1,580(a4)
    236e:	|  |  |  |                                                   bclr d1,2576(a2)
    2372:	|  |  |  |                                                   andi.b #-56,2762(a2)
    2378:	|  |  |  |                                                   .short 0x0aca
    237a:	|  |  |  |                                                   eori.l #63572682,d0
    2380:	|  |  |  |                                                   .short 0x0aca
    2382:	|  |  |  |                                                   bchg d3,-(a2)
    2384:	|  |  |  |                                                   bchg #-36,(a2)
    2388:	|  |  |  |                                                   .short 0x08cc
    238a:	|  |  |  |                                                   addi.b #14,1038(a0)
    2390:	|  |  |  |                                                   .short 0x040e
    2392:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2396:	|  |  |  |                                                   ori.w #8232,(a0)
    239a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    23a0:	|  |  |  |                                                   ori.w #12136,(a0)
    23a4:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    23aa:	|  |  |  |                                                   ori.w #12328,(a0)
    23ae:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    23b4:	|  |  |  |                                                   add.l 44(sp),d1
    23b8:	|  |  |  |                                                   moveq #28,d0
    23ba:	|  |  |  |                                                   add.l 80(sp),d0
    23be:	|  |  |  |                                                   move.l d1,-(sp)
    23c0:	|  |  |  |                                                   move.l d0,-(sp)
    23c2:	|  |  |  |                                                   jsr 114b8 <copyVariable>
    23c8:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    23ca:	|  |  |  |                                                   move.l 80(sp),-(sp)
    23ce:	|  |  |  |                                                   jsr 316e <finishFunction>
    23d4:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    23d6:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    23dc:	|  |  |  |                                                   move.l 80(sp),-(sp)
    23e0:	|  |  |  |                                                   jsr 4048 <restartFunction>
    23e6:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    23e8:	|  |  |  |  /----------------------------------------------- bra.w 3146 <continueFunction+0xe9a>
				finishFunction (fun);
    23ec:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    23f0:	|  |  |  |  |                                                jsr 316e <finishFunction>
    23f6:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    23f8:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    23fc:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    2400:	|  |  |  |  +----------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2404:	|  |  |  |  |                                                movea.l 80(sp),a0
    2408:	|  |  |  |  |                                                move.l 28(a0),d0
    240c:	|  |  |  |  |                                                moveq #2,d1
    240e:	|  |  |  |  |                                                cmp.l d0,d1
    2410:	|  |  |  |  |                                            /-- beq.s 241c <continueFunction+0x170>
    2412:	|  |  |  |  |                                            |   moveq #4,d1
    2414:	|  |  |  |  |                                            |   cmp.l d0,d1
    2416:	|  |  |  |  |                                         /--|-- beq.s 246a <continueFunction+0x1be>
    2418:	|  |  |  |  |                                /--------|--|-- bra.w 2552 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    241c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2420:	|  |  |  |  |                                |        |      jsr 4006 <pauseFunction>
    2426:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    2428:	|  |  |  |  |                                |        |      moveq #24,d0
    242a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    242e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    2432:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    2436:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    243a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    243c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    2440:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    2444:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    2446:	|  |  |  |  |                                |        |      jsr 4272 <startNewFunctionNum>
    244c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    2450:	|  |  |  |  |                                |        |      tst.l d0
    2452:	|  |  |  |  |                                |        |  /-- bne.s 245a <continueFunction+0x1ae>
    2454:	|  |  |  |  |                                |        |  |   clr.w d0
    2456:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 3168 <continueFunction+0xebc>
				fun = allRunningFunctions;
    245a:	|  |  |  |  |                                |        |  \-> move.l 16720 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2462:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    2466:	|  |  |  |  |                                |  /-----|----- bra.w 2566 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    246a:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    246e:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    2472:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    2476:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    247a:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    247c:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    247e:	|  |  |  |  |                                |  |            jsr fce0 <callBuiltIn>
    2484:	|  |  |  |  |                                |  |            lea 12(sp),sp
    2488:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    248c:	|  |  |  |  |                                |  |            moveq #5,d0
    248e:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2492:	|  |  |  |  |                                |  |  /-------- bcs.w 254e <continueFunction+0x2a2>
    2496:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    249a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    249c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    249e:	|  |  |  |  |                                |  |  |         adda.l #9386,a0
    24a4:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    24a6:	|  |  |  |  |                                |  |  |         jmp (24aa <continueFunction+0x1fe>,pc,d0.w)
    24aa:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    24b0:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    24b4:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    24ba:	|  |  |  |  |                                |  |  |         .short 0x4008
    24bc:	|  |  |  |  |                                |  |  |         jsr 13046 <KPrintF>
    24c2:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    24c4:	|  |  |  |  |                                |  |  |         clr.w d0
    24c6:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 3168 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    24ca:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    24ce:	|  |  |  |  |                                |  |  |         jsr 4006 <pauseFunction>
    24d4:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    24d6:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    24da:	|  |  |  |  |                                |  |  |  /----- bra.s 2550 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    24dc:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    24e0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    24e4:	|  |  |  |  |                                |  |  |  +----- bra.s 2550 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    24e6:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    24ea:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    24f0:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    24f2:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    24f6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    24fa:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    24fe:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2500:	|  |  |  |  |                                |  |  |  |      jsr 118f0 <setVariable>
    2506:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    250a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    250e:	|  |  |  |  |                                |  |  |  |      jsr 4006 <pauseFunction>
    2514:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    2516:	|  |  |  |  |                                |  |  |  |      move.l 16754 <noStack>,d1
    251c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2520:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2522:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2524:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    2528:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    252a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    252c:	|  |  |  |  |                                |  |  |  |      jsr 4272 <startNewFunctionNum>
    2532:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    2536:	|  |  |  |  |                                |  |  |  |      tst.l d0
    2538:	|  |  |  |  |                                |  |  |  |  /-- bne.s 2540 <continueFunction+0x294>
    253a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    253c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 3168 <continueFunction+0xebc>
							fun = allRunningFunctions;
    2540:	|  |  |  |  |                                |  |  |  |  \-> move.l 16720 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    2548:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    254c:	|  |  |  |  |                                |  |  |  +----- bra.s 2550 <continueFunction+0x2a4>

						default:
						break;
    254e:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    2550:	|  |  |  |  |                                |  +-----\----X bra.s 2566 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    2552:	|  |  |  |  |                                \--|----------> pea 14053 <PutChar+0x6e5>
    2558:	|  |  |  |  |                                   |            jsr 13046 <KPrintF>
    255e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    2560:	|  |  |  |  |                                   |            clr.w d0
    2562:	|  +--|--|--|-----------------------------------|----------- bra.w 3168 <continueFunction+0xebc>
			}
			break;
    2566:	|  |  |  |  +-----------------------------------\----------X bra.w 3146 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    256a:	|  |  |  |  |                                                moveq #28,d0
    256c:	|  |  |  |  |                                                add.l 80(sp),d0
    2570:	|  |  |  |  |                                                clr.l -(sp)
    2572:	|  |  |  |  |                                                clr.l -(sp)
    2574:	|  |  |  |  |                                                move.l d0,-(sp)
    2576:	|  |  |  |  |                                                jsr 118f0 <setVariable>
    257c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2580:	|  |  |  |  +----------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    2584:	|  |  |  |  |                                                move.l 68(sp),d1
    2588:	|  |  |  |  |                                                moveq #28,d0
    258a:	|  |  |  |  |                                                add.l 80(sp),d0
    258e:	|  |  |  |  |                                                move.l d1,-(sp)
    2590:	|  |  |  |  |                                                pea 5 <_start+0x5>
    2594:	|  |  |  |  |                                                move.l d0,-(sp)
    2596:	|  |  |  |  |                                                jsr 118f0 <setVariable>
    259c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    25a0:	|  |  |  |  +----------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    25a4:	|  |  |  |  |                                                move.l 68(sp),d1
    25a8:	|  |  |  |  |                                                moveq #28,d0
    25aa:	|  |  |  |  |                                                add.l 80(sp),d0
    25ae:	|  |  |  |  |                                                move.l d1,-(sp)
    25b0:	|  |  |  |  |                                                pea 1 <_start+0x1>
    25b4:	|  |  |  |  |                                                move.l d0,-(sp)
    25b6:	|  |  |  |  |                                                jsr 118f0 <setVariable>
    25bc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    25c0:	|  |  |  |  +----------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    25c4:	|  |  |  |  |                                                moveq #28,d0
    25c6:	|  |  |  |  |                                                add.l 80(sp),d0
    25ca:	|  |  |  |  |                                                movea.l 80(sp),a0
    25ce:	|  |  |  |  |                                                movea.l 20(a0),a0
    25d2:	|  |  |  |  |                                                move.l 68(sp),d1
    25d6:	|  |  |  |  |                                                lsl.l #3,d1
    25d8:	|  |  |  |  |                                                add.l a0,d1
    25da:	|  |  |  |  |                                                move.l d0,-(sp)
    25dc:	|  |  |  |  |                                                move.l d1,-(sp)
    25de:	|  |  |  |  |                                                jsr 114b8 <copyVariable>
    25e4:	|  |  |  |  |                                                addq.l #8,sp
    25e6:	|  |  |  |  |                                                tst.w d0
    25e8:	|  |  |  |  |  /-------------------------------------------- bne.w 3124 <continueFunction+0xe78>
    25ec:	|  |  |  |  |  |                                             clr.w d0
    25ee:	|  +--|--|--|--|-------------------------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    25f2:	|  |  |  |  |  |                                             moveq #28,d0
    25f4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    25f8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25fa:	|  |  |  |  |  |                                             jsr 1153e <getBoolean>
    2600:	|  |  |  |  |  |                                             addq.l #4,sp
    2602:	|  |  |  |  |  |                                             tst.w d0
    2604:	|  |  |  |  |  |                                      /----- beq.s 2620 <continueFunction+0x374>
    2606:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    260a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    260e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2610:	|  |  |  |  |  |                                      |      jsr 1153e <getBoolean>
    2616:	|  |  |  |  |  |                                      |      addq.l #4,sp
    2618:	|  |  |  |  |  |                                      |      tst.w d0
    261a:	|  |  |  |  |  |                                      +----- beq.s 2620 <continueFunction+0x374>
    261c:	|  |  |  |  |  |                                      |      moveq #1,d0
    261e:	|  |  |  |  |  |                                      |  /-- bra.s 2622 <continueFunction+0x376>
    2620:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2622:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2624:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2628:	|  |  |  |  |  |                                             move.l d0,-(sp)
    262a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    262e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2630:	|  |  |  |  |  |                                             jsr 118f0 <setVariable>
    2636:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    263a:	|  |  |  |  |  |                                             moveq #24,d0
    263c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2640:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2642:	|  |  |  |  |  |                                             jsr 11982 <trimStack>
    2648:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    264a:	|  |  |  |  +--|-------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    264e:	|  |  |  |  |  |                                             moveq #28,d0
    2650:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2654:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2656:	|  |  |  |  |  |                                             jsr 1153e <getBoolean>
    265c:	|  |  |  |  |  |                                             addq.l #4,sp
    265e:	|  |  |  |  |  |                                             tst.w d0
    2660:	|  |  |  |  |  |                                         /-- bne.s 2678 <continueFunction+0x3cc>
    2662:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2666:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    266a:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    266c:	|  |  |  |  |  |                                         |   jsr 1153e <getBoolean>
    2672:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2674:	|  |  |  |  |  |                                         |   tst.w d0
    2676:	|  |  |  |  |  |                                      /--|-- beq.s 267c <continueFunction+0x3d0>
    2678:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    267a:	|  |  |  |  |  |                                      |  /-- bra.s 267e <continueFunction+0x3d2>
    267c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    267e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2680:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2684:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2686:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    268a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    268c:	|  |  |  |  |  |                                             jsr 118f0 <setVariable>
    2692:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2696:	|  |  |  |  |  |                                             moveq #24,d0
    2698:	|  |  |  |  |  |                                             add.l 80(sp),d0
    269c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    269e:	|  |  |  |  |  |                                             jsr 11982 <trimStack>
    26a4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    26a6:	|  |  |  |  +--|-------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    26aa:	|  |  |  |  |  |                                             move.l 68(sp),d1
    26ae:	|  |  |  |  |  |                                             moveq #28,d0
    26b0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26b4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    26b6:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    26ba:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26bc:	|  |  |  |  |  |                                             jsr 118f0 <setVariable>
    26c2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    26c6:	|  |  |  |  +--|-------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    26ca:	|  |  |  |  |  |                                             move.l 68(sp),d1
    26ce:	|  |  |  |  |  |                                             moveq #28,d0
    26d0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26d4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    26d6:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    26da:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26dc:	|  |  |  |  |  |                                             jsr 118f0 <setVariable>
    26e2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    26e6:	|  |  |  |  +--|-------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    26ea:	|  |  |  |  |  |                                             move.l 68(sp),d1
    26ee:	|  |  |  |  |  |                                             moveq #28,d0
    26f0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    26f4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    26f6:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    26fa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    26fc:	|  |  |  |  |  |                                             jsr 118f0 <setVariable>
    2702:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2706:	|  |  |  |  +--|-------------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    270a:	|  |  |  |  |  |                                             move.l 166e8 <dialogValue>,d0
    2710:	|  |  |  |  |  |                                             moveq #1,d1
    2712:	|  |  |  |  |  |                                             cmp.l d0,d1
    2714:	|  |  |  |  |  |  /----------------------------------------- beq.w 3128 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    2718:	|  |  |  |  |  |  |                                          pea 14068 <PutChar+0x6fa>
    271e:	|  |  |  |  |  |  |                                          jsr 13046 <KPrintF>
    2724:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2726:	|  |  |  |  |  |  |                                          clr.w d0
    2728:	|  +--|--|--|--|--|----------------------------------------- bra.w 3168 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    272c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2730:	|  |  |  |  |  |  |                                          moveq #28,d0
    2732:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2736:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2738:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    273a:	|  |  |  |  |  |  |                                          jsr 11082 <loadStringToVar>
    2740:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2742:	|  |  |  |  |  |  |                                          tst.w d0
    2744:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 312c <continueFunction+0xe80>
					return FALSE;
    2748:	|  |  |  |  |  |  |  |                                       clr.w d0
    274a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    274e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2752:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2756:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2758:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    275a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    275c:	|  |  |  |  |  |  |  |                                /----- beq.s 27ba <continueFunction+0x50e>
    275e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2760:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2762:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 294e <continueFunction+0x6a2>
    2766:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2768:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2774 <continueFunction+0x4c8>
    276a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    276c:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    276e:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 27ba <continueFunction+0x50e>
    2770:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 294e <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2774:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2776:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    277a:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 27a6 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    277c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    277e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2782:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2784:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2786:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2788:	|  |  |  |  |  |  |  |              |                 |  |   jsr 118f0 <setVariable>
    278e:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2792:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2794:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2798:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    279a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11982 <trimStack>
    27a0:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    27a2:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2964 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    27a6:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 140a9 <PutChar+0x73b>
    27ac:	|  |  |  |  |  |  |  |              |  |              |      jsr 13046 <KPrintF>
    27b2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    27b4:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    27b6:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 3168 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    27ba:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    27be:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    27c2:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    27c6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    27c8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 27de <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    27ca:	|  |  |  |  |  |  |  |              |  |                 |   pea 140e5 <PutChar+0x777>
    27d0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13046 <KPrintF>
    27d6:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    27d8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    27da:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3168 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    27de:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    27e0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    27e4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    27e6:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    27ea:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    27ee:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    27f0:	|  |  |  |  |  |  |  |              |  |                     jsr 10ffe <getValueType>
    27f6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    27fa:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    27fc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2804 <continueFunction+0x558>
    27fe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2800:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3168 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2804:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2808:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    280c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    280e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2810:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2812:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2834 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2814:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2818:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    281a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    281e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2822:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2826:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2828:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    282a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 10c88 <fastArrayGetByIndex>
    2830:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2832:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2854 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2834:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2838:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    283a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    283e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2842:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2846:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2848:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    284a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    284c:	|  |  |  |  |  |  |  |              |  |              |      jsr 11912 <stackGetByIndex>
    2852:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2854:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2858:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    285a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    285e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2860:	|  |  |  |  |  |  |  |              |  |                     jsr 11982 <trimStack>
    2866:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2868:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    286c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2888 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    286e:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2870:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2874:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2876:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2878:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    287a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 118f0 <setVariable>
    2880:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2884:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2962 <continueFunction+0x6b6>
    2888:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    288a:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    288e:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 289c <continueFunction+0x5f0>
    2890:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2892:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2896:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 28e6 <continueFunction+0x63a>
    2898:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 292e <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    289c:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    28a0:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    28a4:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    28a8:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    28aa:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10ffe <getValueType>
    28b0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    28b4:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    28b6:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 28be <continueFunction+0x612>
    28b8:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    28ba:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2948 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    28be:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    28c0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    28c2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    28c6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    28c8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    28cc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    28ce:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 118f0 <setVariable>
    28d4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    28d8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    28da:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    28dc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    28e0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    28e4:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 294c <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    28e6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    28ea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    28ee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    28f2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    28f4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10ffe <getValueType>
    28fa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    28fe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2900:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2906 <continueFunction+0x65a>
    2902:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2904:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2948 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2906:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2908:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    290a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    290e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2910:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2914:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2916:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 118f0 <setVariable>
    291c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2920:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2922:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2924:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2928:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    292c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 294c <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    292e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2930:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2934:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2936:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    293a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 114b8 <copyVariable>
    2940:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2942:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2944:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2962 <continueFunction+0x6b6>
    2946:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2948:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 3168 <continueFunction+0xebc>
				break;
    294c:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2962 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    294e:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 14103 <PutChar+0x795>
    2954:	|  |  |  |  |  |  |  |                 |  |                  jsr 13046 <KPrintF>
    295a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    295c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    295e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 3168 <continueFunction+0xebc>
				break;
    2962:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2964:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 3146 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2968:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    296c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2970:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2972:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2974:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2976:	|  |  |  |  |  |  |  |                                   /-- beq.s 2984 <continueFunction+0x6d8>
    2978:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    297a:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    297c:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2a30 <continueFunction+0x784>
    2980:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2a8e <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2984:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2988:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    298c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2990:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2992:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 29a8 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2994:	|  |  |  |  |  |  |  |                             |  |  |   pea 140e5 <PutChar+0x777>
    299a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 13046 <KPrintF>
    29a0:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    29a2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    29a4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3168 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    29a8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    29aa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    29ae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29b0:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    29b4:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    29b8:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    29ba:	|  |  |  |  |  |  |  |                             |  |      jsr 10ffe <getValueType>
    29c0:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    29c4:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    29c6:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 29ce <continueFunction+0x722>
    29c8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    29ca:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3168 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    29ce:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    29d2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    29d6:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    29da:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    29dc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    29e0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    29e2:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    29e6:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    29ea:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    29ee:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    29f0:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    29f2:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    29f4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29f6:	|  |  |  |  |  |  |  |                             |  |      jsr 422e <stackSetByIndex>
    29fc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2a00:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2a02:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2a0a <continueFunction+0x75e>
						return FALSE;
    2a04:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2a06:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3168 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2a0a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2a0c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2a10:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a12:	|  |  |  |  |  |  |  |                             |  |      jsr 11982 <trimStack>
    2a18:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2a1a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2a1c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2a20:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2a22:	|  |  |  |  |  |  |  |                             |  |      jsr 11982 <trimStack>
    2a28:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2a2a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2a2c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 3146 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2a30:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2a32:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2a36:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2a38:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2a3c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2a40:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2a42:	|  |  |  |  |  |  |  |                             |         jsr 10ffe <getValueType>
    2a48:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2a4c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2a4e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2a56 <continueFunction+0x7aa>
    2a50:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2a52:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 3168 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2a56:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2a5a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2a5c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2a60:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2a64:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2a68:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2a6a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2a6c:	|  |  |  |  |  |  |  |                             |         jsr 10c88 <fastArrayGetByIndex>
    2a72:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2a74:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2a78:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2a88 <continueFunction+0x7dc>
    2a7a:	|  |  |  |  |  |  |  |                             |     |   pea 14127 <PutChar+0x7b9>
    2a80:	|  |  |  |  |  |  |  |                             |     |   jsr 13046 <KPrintF>
    2a86:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2a88:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2a8a:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 3168 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2a8e:	|  |  |  |  |  |  |  |                             \-------> pea 14103 <PutChar+0x795>
    2a94:	|  |  |  |  |  |  |  |                                       jsr 13046 <KPrintF>
    2a9a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2a9c:	|  |  |  |  |  |  |  |                                       clr.w d0
    2a9e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3168 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2aa2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2aa6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2aaa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2aae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ab0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ab2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ab4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ab8:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2abc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2abe:	|  |  |  |  |  |  |  |                                       jsr 10ffe <getValueType>
    2ac4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2ac8:	|  |  |  |  |  |  |  |                                       tst.w d0
    2aca:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ad2 <continueFunction+0x826>
    2acc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ace:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3168 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ad2:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2ad6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2ad8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2adc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ade:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ae2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ae4:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2aea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2aee:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2af2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2af4:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2af6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2afa:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2afe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b02:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b04:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b06:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b0c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b0e:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2b14:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b18:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2b1c:	|  |  |  |  |  |  |  |                                       move.l 16736 <globalVars>,d1
    2b22:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b26:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b28:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2b2a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b2c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b30:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2b34:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2b36:	|  |  |  |  |  |  |  |                                       jsr 10ffe <getValueType>
    2b3c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2b40:	|  |  |  |  |  |  |  |                                       tst.w d0
    2b42:	|  |  |  |  |  |  |  |                                   /-- bne.s 2b4a <continueFunction+0x89e>
    2b44:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2b46:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3168 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2b4a:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2b4e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2b50:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2b54:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b56:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b5a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b5c:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2b62:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2b66:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2b6a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2b6c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2b6e:	|  |  |  |  |  |  |  |                                       movea.l 16736 <globalVars>,a0
    2b74:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b78:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b7a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b7c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b7e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b82:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b84:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2b8a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b8e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2b92:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b96:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2b9a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b9e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ba0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ba2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ba4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ba8:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2bac:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2bae:	|  |  |  |  |  |  |  |                                       jsr 10ffe <getValueType>
    2bb4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2bb8:	|  |  |  |  |  |  |  |                                       tst.w d0
    2bba:	|  |  |  |  |  |  |  |                                   /-- bne.s 2bc2 <continueFunction+0x916>
    2bbc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2bbe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3168 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2bc2:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2bc6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2bc8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2bcc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bd2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bd4:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2bda:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2bde:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2be2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2be4:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2be6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2bea:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2bee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2bf2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2bf4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2bf6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bf8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bfc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bfe:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2c04:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2c08:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2c0c:	|  |  |  |  |  |  |  |                                       move.l 16736 <globalVars>,d1
    2c12:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c16:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c18:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2c1a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c1c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c20:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2c24:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2c26:	|  |  |  |  |  |  |  |                                       jsr 10ffe <getValueType>
    2c2c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2c30:	|  |  |  |  |  |  |  |                                       tst.w d0
    2c32:	|  |  |  |  |  |  |  |                                   /-- bne.s 2c3a <continueFunction+0x98e>
    2c34:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2c36:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3168 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2c3a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2c3e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2c40:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2c44:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c46:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c4a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c4c:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2c52:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2c56:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2c5a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2c5c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2c5e:	|  |  |  |  |  |  |  |                                       movea.l 16736 <globalVars>,a0
    2c64:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c68:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c6a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2c6c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c6e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2c72:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c74:	|  |  |  |  |  |  |  |                                       jsr 118f0 <setVariable>
    2c7a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2c7e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2c82:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2c86:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2c8a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c8e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c90:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2c92:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2c94:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2c98:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c9a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c9c:	|  |  |  |  |  |  |  |                                       jsr 114b8 <copyVariable>
    2ca2:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2ca4:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ca6:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 3130 <continueFunction+0xe84>
    2caa:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2cac:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2cb0:	|  |  |  |  |  |  |  |  |                                    move.l 16736 <globalVars>,d1
    2cb6:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2cba:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2cbc:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    2cbe:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2cc0:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2cc4:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2cc6:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2cc8:	|  |  |  |  |  |  |  |  |                                    jsr 114b8 <copyVariable>
    2cce:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2cd0:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2cd2:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 3134 <continueFunction+0xe88>
    2cd6:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2cd8:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2cdc:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2cde:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2ce2:	|  |  |  |  |  |  |  |  |  |                                 movea.l 16736 <globalVars>,a0
    2ce8:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2cec:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2cee:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2cf0:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2cf2:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2cf4:	|  |  |  |  |  |  |  |  |  |                                 jsr 114b8 <copyVariable>
    2cfa:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2cfc:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2cfe:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 3138 <continueFunction+0xe8c>
    2d02:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2d04:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2d08:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2d0a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2d0e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2d10:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2d14:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2d16:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2d18:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1083a <addVarToStack>
    2d1e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    2d20:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    2d22:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 313c <continueFunction+0xe90>
    2d26:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2d28:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    2d2c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    2d2e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    2d32:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2d34:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2d38:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2d3a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2d3c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 108c0 <addVarToStackQuick>
    2d42:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2d44:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2d46:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 3140 <continueFunction+0xe94>
    2d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2d4c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 3168 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    2d50:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d52:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d56:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d58:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1153e <getBoolean>
    2d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2d60:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2d62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2d64:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2d66:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2d68:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d70:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2d72:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2d76:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d78:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 118f0 <setVariable>
    2d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2d82:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2d86:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d88:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1153e <getBoolean>
    2d94:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2d96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 3144 <continueFunction+0xe98>
				advanceNow = FALSE;
    2d9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 3144 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    2dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2dbc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3146 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10ffe <getValueType>
    2dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    2ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    2dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2de6 <continueFunction+0xb3a>
    2de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2de2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 3168 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    2de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    2dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    2dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2df4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 118f0 <setVariable>
    2e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2e06:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3146 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    2e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 30fc <continueFunction+0xe50>
    2e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2e98 <continueFunction+0xbec>
    2e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    2e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2ee2 <continueFunction+0xc36>
    2e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    2e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2e3c <continueFunction+0xb90>
    2e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2e6a <continueFunction+0xbbe>
    2e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2ee2 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    2e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    2e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 10934 <addVariablesInSecond>
    2e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11982 <trimStack>
    2e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3110 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 109f2 <compareVariablesInSecond>
    2e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11982 <trimStack>
    2e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3110 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 109f2 <compareVariablesInSecond>
    2eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2eb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11982 <trimStack>
    2ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3110 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10ffe <getValueType>
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2f0a <continueFunction+0xc5e>
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2f06:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3168 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10ffe <getValueType>
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2f30 <continueFunction+0xc84>
    2f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2f2c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3168 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11982 <trimStack>
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 310e <continueFunction+0xe62>
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #12126,a0
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2f5e <continueFunction+0xcb2>,pc,d0.w)
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13858 <__mulsi3>
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3110 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3110 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13904 <__modsi3>
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3110 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 138d6 <__divsi3>
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3110 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3110 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3110 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3110 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 118f0 <setVariable>
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3110 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 14148 <PutChar+0x7da>
    3102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 13046 <KPrintF>
    3108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    310c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 3168 <continueFunction+0xebc>
						break;
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3110:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 3146 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3112:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 14160 <PutChar+0x7f2>
    3118:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 13046 <KPrintF>
    311e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3120:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3122:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 3168 <continueFunction+0xebc>
			break;
    3124:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    3126:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3128:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    312a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    312c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    312e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3130:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    3132:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3134:	|  |  |     |              \--|--|--|--|-------------------> nop
    3136:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3138:	|  |  |     |                 \--|--|--|-------------------> nop
    313a:	|  |  |     +--------------------|--|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    313c:	|  |  |     |                    \--|--|-------------------> nop
    313e:	|  |  |     +-----------------------|--|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3140:	|  |  |     |                       \--|-------------------> nop
    3142:	|  |  |     +--------------------------|-------------------- bra.s 3146 <continueFunction+0xe9a>
			break;
    3144:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    3146:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    314a:	+--|--|----------------------------------------------------- beq.s 315e <continueFunction+0xeb2>
    314c:	|  |  |                                                      movea.l 80(sp),a0
    3150:	|  |  |                                                      move.l 36(a0),d0
    3154:	|  |  |                                                      addq.l #1,d0
    3156:	|  |  |                                                      movea.l 80(sp),a0
    315a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    315e:	\--|--|----------------------------------------------------> tst.w 74(sp)
    3162:	   |  \----------------------------------------------------- bne.w 22d4 <continueFunction+0x28>

	}
	return TRUE;
    3166:	   |                                                         moveq #1,d0
}
    3168:	   \-------------------------------------------------------> lea 76(sp),sp
    316c:	                                                             rts

0000316e <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    316e:	       lea -16(sp),sp
    3172:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3174:	       move.l 24(sp),-(sp)
    3178:	       jsr 4006 <pauseFunction>
    317e:	       addq.l #4,sp
	if (fun -> stack) 
    3180:	       movea.l 24(sp),a0
    3184:	       move.l 24(a0),d0
    3188:	   /-- beq.s 319e <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    318a:	   |   pea 1418c <PutChar+0x81e>
    3190:	   |   pea 141b9 <PutChar+0x84b>
    3196:	   |   jsr 13046 <KPrintF>
    319c:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    319e:	   \-> movea.l 24(sp),a0
    31a2:	       move.l 4(a0),12(sp)
    31a8:	       move.l 16784 <SysBase>,d0
    31ae:	       movea.l d0,a6
    31b0:	       movea.l 12(sp),a1
    31b4:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    31b8:	       clr.l 16(sp)
    31bc:	   /-- bra.s 31dc <finishFunction+0x6e>
    31be:	/--|-> movea.l 24(sp),a0
    31c2:	|  |   move.l 20(a0),d1
    31c6:	|  |   move.l 16(sp),d0
    31ca:	|  |   lsl.l #3,d0
    31cc:	|  |   add.l d1,d0
    31ce:	|  |   move.l d0,-(sp)
    31d0:	|  |   jsr 1124c <unlinkVar>
    31d6:	|  |   addq.l #4,sp
    31d8:	|  |   addq.l #1,16(sp)
    31dc:	|  \-> movea.l 24(sp),a0
    31e0:	|      move.l 8(a0),d0
    31e4:	|      cmp.l 16(sp),d0
    31e8:	\----- bgt.s 31be <finishFunction+0x50>
	if( fun->numLocals > 0) {
    31ea:	       movea.l 24(sp),a0
    31ee:	       move.l 8(a0),d0
    31f2:	   /-- ble.s 320e <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    31f4:	   |   movea.l 24(sp),a0
    31f8:	   |   move.l 20(a0),8(sp)
    31fe:	   |   move.l 16784 <SysBase>,d0
    3204:	   |   movea.l d0,a6
    3206:	   |   movea.l 8(sp),a1
    320a:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    320e:	   \-> moveq #28,d0
    3210:	       add.l 24(sp),d0
    3214:	       move.l d0,-(sp)
    3216:	       jsr 1124c <unlinkVar>
    321c:	       addq.l #4,sp
	FreeVec(fun);
    321e:	       move.l 24(sp),4(sp)
    3224:	       move.l 16784 <SysBase>,d0
    322a:	       movea.l d0,a6
    322c:	       movea.l 4(sp),a1
    3230:	       jsr -690(a6)
	fun = NULL;
    3234:	       clr.l 24(sp)
}
    3238:	       nop
    323a:	       movea.l (sp)+,a6
    323c:	       lea 16(sp),sp
    3240:	       rts

00003242 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    3242:	jsr 4062 <runSludge>
}
    3248:	rts

0000324a <initSludge>:

BOOL initSludge (char * filename) {
    324a:	             lea -296(sp),sp
    324e:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    3252:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    3256:	             jsr 78ba <makeNullAnim>
    325c:	             move.l d0,166aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    3262:	             pea 16732 <gameVersion>
    3268:	             pea 141c9 <PutChar+0x85b>
    326e:	             pea 45 <_start+0x45>
    3272:	             pea 47 <_start+0x47>
    3276:	             move.l 336(sp),-(sp)
    327a:	             jsr 3c96 <openAndVerify>
    3280:	             lea 20(sp),sp
    3284:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    3288:	         /-- bne.s 3290 <initSludge+0x46>
    328a:	         |   clr.w d0
    328c:	/--------|-- bra.w 39b6 <initSludge+0x76c>
	if (FGetC (fp)) {
    3290:	|        \-> move.l 292(sp),288(sp)
    3296:	|            move.l 1678c <DOSBase>,d0
    329c:	|            movea.l d0,a6
    329e:	|            move.l 288(sp),d1
    32a2:	|            jsr -306(a6)
    32a6:	|            move.l d0,284(sp)
    32aa:	|            move.l 284(sp),d0
    32ae:	|  /-------- beq.w 3454 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    32b2:	|  |         move.l 292(sp),-(sp)
    32b6:	|  |         jsr 6bc <get2bytes>
    32bc:	|  |         addq.l #4,sp
    32be:	|  |         move.l d0,16758 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    32c4:	|  |         move.l 16758 <numBIFNames>,d0
    32ca:	|  |         move.l d0,280(sp)
    32ce:	|  |         clr.l 276(sp)
    32d2:	|  |         move.l 16784 <SysBase>,d0
    32d8:	|  |         movea.l d0,a6
    32da:	|  |         move.l 280(sp),d0
    32de:	|  |         move.l 276(sp),d1
    32e2:	|  |         jsr -684(a6)
    32e6:	|  |         move.l d0,272(sp)
    32ea:	|  |         move.l 272(sp),d0
    32ee:	|  |         move.l d0,16718 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    32f4:	|  |         move.l 16718 <allBIFNames>,d0
    32fa:	|  |     /-- bne.s 3302 <initSludge+0xb8>
    32fc:	|  |     |   clr.w d0
    32fe:	+--|-----|-- bra.w 39b6 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3302:	|  |     \-> clr.l 308(sp)
    3306:	|  |     /-- bra.s 332c <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    3308:	|  |  /--|-> move.l 16718 <allBIFNames>,d1
    330e:	|  |  |  |   move.l 308(sp),d0
    3312:	|  |  |  |   add.l d0,d0
    3314:	|  |  |  |   add.l d0,d0
    3316:	|  |  |  |   movea.l d1,a2
    3318:	|  |  |  |   adda.l d0,a2
    331a:	|  |  |  |   move.l 292(sp),-(sp)
    331e:	|  |  |  |   jsr b02 <readString>
    3324:	|  |  |  |   addq.l #4,sp
    3326:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3328:	|  |  |  |   addq.l #1,308(sp)
    332c:	|  |  |  \-> move.l 16758 <numBIFNames>,d0
    3332:	|  |  |      cmp.l 308(sp),d0
    3336:	|  |  \----- bgt.s 3308 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    3338:	|  |         move.l 292(sp),-(sp)
    333c:	|  |         jsr 6bc <get2bytes>
    3342:	|  |         addq.l #4,sp
    3344:	|  |         move.l d0,16764 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    334a:	|  |         move.l 16764 <numUserFunc>,d0
    3350:	|  |         move.l d0,268(sp)
    3354:	|  |         clr.l 264(sp)
    3358:	|  |         move.l 16784 <SysBase>,d0
    335e:	|  |         movea.l d0,a6
    3360:	|  |         move.l 268(sp),d0
    3364:	|  |         move.l 264(sp),d1
    3368:	|  |         jsr -684(a6)
    336c:	|  |         move.l d0,260(sp)
    3370:	|  |         move.l 260(sp),d0
    3374:	|  |         move.l d0,16724 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    337a:	|  |         move.l 16724 <allUserFunc>,d0
    3380:	|  |     /-- bne.s 3388 <initSludge+0x13e>
    3382:	|  |     |   clr.w d0
    3384:	+--|-----|-- bra.w 39b6 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    3388:	|  |     \-> clr.l 304(sp)
    338c:	|  |     /-- bra.s 33b2 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    338e:	|  |  /--|-> move.l 16724 <allUserFunc>,d1
    3394:	|  |  |  |   move.l 304(sp),d0
    3398:	|  |  |  |   add.l d0,d0
    339a:	|  |  |  |   add.l d0,d0
    339c:	|  |  |  |   movea.l d1,a2
    339e:	|  |  |  |   adda.l d0,a2
    33a0:	|  |  |  |   move.l 292(sp),-(sp)
    33a4:	|  |  |  |   jsr b02 <readString>
    33aa:	|  |  |  |   addq.l #4,sp
    33ac:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    33ae:	|  |  |  |   addq.l #1,304(sp)
    33b2:	|  |  |  \-> move.l 16764 <numUserFunc>,d0
    33b8:	|  |  |      cmp.l 304(sp),d0
    33bc:	|  |  \----- bgt.s 338e <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    33be:	|  |         move.l 16732 <gameVersion>,d0
    33c4:	|  |         cmpi.l #258,d0
    33ca:	|  +-------- ble.w 3454 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    33ce:	|  |         move.l 292(sp),-(sp)
    33d2:	|  |         jsr 6bc <get2bytes>
    33d8:	|  |         addq.l #4,sp
    33da:	|  |         move.l d0,16760 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    33e0:	|  |         move.l 16760 <numResourceNames>,d0
    33e6:	|  |         move.l d0,256(sp)
    33ea:	|  |         clr.l 252(sp)
    33ee:	|  |         move.l 16784 <SysBase>,d0
    33f4:	|  |         movea.l d0,a6
    33f6:	|  |         move.l 256(sp),d0
    33fa:	|  |         move.l 252(sp),d1
    33fe:	|  |         jsr -684(a6)
    3402:	|  |         move.l d0,248(sp)
    3406:	|  |         move.l 248(sp),d0
    340a:	|  |         move.l d0,1671c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3410:	|  |         move.l 1671c <allResourceNames>,d0
    3416:	|  |     /-- bne.s 341e <initSludge+0x1d4>
    3418:	|  |     |   clr.w d0
    341a:	+--|-----|-- bra.w 39b6 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    341e:	|  |     \-> clr.l 300(sp)
    3422:	|  |     /-- bra.s 3448 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3424:	|  |  /--|-> move.l 1671c <allResourceNames>,d1
    342a:	|  |  |  |   move.l 300(sp),d0
    342e:	|  |  |  |   add.l d0,d0
    3430:	|  |  |  |   add.l d0,d0
    3432:	|  |  |  |   movea.l d1,a2
    3434:	|  |  |  |   adda.l d0,a2
    3436:	|  |  |  |   move.l 292(sp),-(sp)
    343a:	|  |  |  |   jsr b02 <readString>
    3440:	|  |  |  |   addq.l #4,sp
    3442:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    3444:	|  |  |  |   addq.l #1,300(sp)
    3448:	|  |  |  \-> move.l 16760 <numResourceNames>,d0
    344e:	|  |  |      cmp.l 300(sp),d0
    3452:	|  |  \----- bgt.s 3424 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    3454:	|  \-------> move.l 292(sp),-(sp)
    3458:	|            jsr 6bc <get2bytes>
    345e:	|            addq.l #4,sp
    3460:	|            move.l d0,166dc <winWidth>
	winHeight = get2bytes (fp);
    3466:	|            move.l 292(sp),-(sp)
    346a:	|            jsr 6bc <get2bytes>
    3470:	|            addq.l #4,sp
    3472:	|            move.l d0,166e0 <winHeight>
	specialSettings = FGetC (fp);
    3478:	|            move.l 292(sp),244(sp)
    347e:	|            move.l 1678c <DOSBase>,d0
    3484:	|            movea.l d0,a6
    3486:	|            move.l 244(sp),d1
    348a:	|            jsr -306(a6)
    348e:	|            move.l d0,240(sp)
    3492:	|            move.l 240(sp),d0
    3496:	|            move.l d0,16768 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    349c:	|            move.l 292(sp),236(sp)
    34a2:	|            move.l 1678c <DOSBase>,d0
    34a8:	|            movea.l d0,a6
    34aa:	|            move.l 236(sp),d1
    34ae:	|            jsr -306(a6)
    34b2:	|            move.l d0,232(sp)
    34b6:	|            move.l 232(sp),d0
    34ba:	|            move.l d0,-(sp)
    34bc:	|            pea 3e8 <encodeFilename+0xea>
    34c0:	|            jsr 138d6 <__divsi3>
    34c6:	|            addq.l #8,sp
    34c8:	|            move.l d0,16132 <desiredfps>

	FreeVec(readString (fp));
    34ce:	|            move.l 292(sp),-(sp)
    34d2:	|            jsr b02 <readString>
    34d8:	|            addq.l #4,sp
    34da:	|            move.l d0,228(sp)
    34de:	|            move.l 16784 <SysBase>,d0
    34e4:	|            movea.l d0,a6
    34e6:	|            movea.l 228(sp),a1
    34ea:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    34ee:	|            move.l 292(sp),224(sp)
    34f4:	|            move.l #91946,220(sp)
    34fc:	|            moveq #8,d0
    34fe:	|            move.l d0,216(sp)
    3502:	|            moveq #1,d1
    3504:	|            move.l d1,212(sp)
    3508:	|            move.l 1678c <DOSBase>,d0
    350e:	|            movea.l d0,a6
    3510:	|            move.l 224(sp),d1
    3514:	|            move.l 220(sp),d2
    3518:	|            move.l 216(sp),d3
    351c:	|            move.l 212(sp),d4
    3520:	|            jsr -324(a6)
    3524:	|            move.l d0,208(sp)
    3528:	|            move.l 208(sp),d0
    352c:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    3530:	|            moveq #1,d0
    3532:	|            cmp.l 204(sp),d0
    3536:	|        /-- beq.s 3546 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    3538:	|        |   pea 14202 <PutChar+0x894>
    353e:	|        |   jsr 13046 <KPrintF>
    3544:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    3546:	|        \-> move.l 16732 <gameVersion>,d0
    354c:	|            cmpi.l #258,d0
    3552:	|        /-- ble.s 3562 <initSludge+0x318>
    3554:	|        |   move.l 292(sp),-(sp)
    3558:	|        |   jsr b02 <readString>
    355e:	|        |   addq.l #4,sp
    3560:	|     /--|-- bra.s 3576 <initSludge+0x32c>
    3562:	|     |  \-> pea 14220 <PutChar+0x8b2>
    3568:	|     |      pea 14220 <PutChar+0x8b2>
    356e:	|     |      jsr 1052a <joinStrings>
    3574:	|     |      addq.l #8,sp
    3576:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    357a:	|            move.l 16732 <gameVersion>,d0
    3580:	|            cmpi.l #258,d0
    3586:	|     /----- ble.s 35a8 <initSludge+0x35e>
    3588:	|     |      move.l 292(sp),196(sp)
    358e:	|     |      move.l 1678c <DOSBase>,d0
    3594:	|     |      movea.l d0,a6
    3596:	|     |      move.l 196(sp),d1
    359a:	|     |      jsr -306(a6)
    359e:	|     |      move.l d0,192(sp)
    35a2:	|     |      move.l 192(sp),d0
    35a6:	|     |  /-- bra.s 35aa <initSludge+0x360>
    35a8:	|     \--|-> moveq #0,d0
    35aa:	|        \-> move.l d0,168b8 <gameSettings+0x4>
	makeLanguageTable (fp);
    35b0:	|            move.l 292(sp),-(sp)
    35b4:	|            jsr fee0 <makeLanguageTable>
    35ba:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    35bc:	|            move.l 16732 <gameVersion>,d0
    35c2:	|            cmpi.l #261,d0
    35c8:	|        /-- ble.s 3616 <initSludge+0x3cc>
	{
		FGetC(fp);
    35ca:	|        |   move.l 292(sp),188(sp)
    35d0:	|        |   move.l 1678c <DOSBase>,d0
    35d6:	|        |   movea.l d0,a6
    35d8:	|        |   move.l 188(sp),d1
    35dc:	|        |   jsr -306(a6)
    35e0:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    35e4:	|        |   move.l 292(sp),180(sp)
    35ea:	|        |   move.l 1678c <DOSBase>,d0
    35f0:	|        |   movea.l d0,a6
    35f2:	|        |   move.l 180(sp),d1
    35f6:	|        |   jsr -306(a6)
    35fa:	|        |   move.l d0,176(sp)
		getFloat (fp);
    35fe:	|        |   move.l 292(sp),-(sp)
    3602:	|        |   jsr 7d8 <getFloat>
    3608:	|        |   addq.l #4,sp
		getFloat (fp);
    360a:	|        |   move.l 292(sp),-(sp)
    360e:	|        |   jsr 7d8 <getFloat>
    3614:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3616:	|        \-> move.l 292(sp),-(sp)
    361a:	|            jsr b02 <readString>
    3620:	|            addq.l #4,sp
    3622:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3626:	|            pea 14221 <PutChar+0x8b3>
    362c:	|            move.l 176(sp),-(sp)
    3630:	|            jsr 104aa <strcmp>
    3636:	|            addq.l #8,sp
    3638:	|            tst.l d0
    363a:	|        /-- beq.s 3642 <initSludge+0x3f8>
		return FALSE;
    363c:	|        |   clr.w d0
    363e:	+--------|-- bra.w 39b6 <initSludge+0x76c>
	}
	FreeVec( checker);
    3642:	|        \-> move.l 172(sp),168(sp)
    3648:	|            move.l 16784 <SysBase>,d0
    364e:	|            movea.l d0,a6
    3650:	|            movea.l 168(sp),a1
    3654:	|            jsr -690(a6)
	checker = NULL;
    3658:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    365c:	|            move.l 292(sp),164(sp)
    3662:	|            move.l 1678c <DOSBase>,d0
    3668:	|            movea.l d0,a6
    366a:	|            move.l 164(sp),d1
    366e:	|            jsr -306(a6)
    3672:	|            move.l d0,160(sp)
    3676:	|            move.l 160(sp),d0
    367a:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    367e:	|            moveq #0,d0
    3680:	|            move.b 159(sp),d0
    3684:	|            moveq #1,d1
    3686:	|            and.l d1,d0
    3688:	|        /-- beq.s 36e0 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    368a:	|        |   move.l 1678c <DOSBase>,d0
    3690:	|        |   movea.l d0,a6
    3692:	|        |   jsr -60(a6)
    3696:	|        |   move.l d0,38(sp)
    369a:	|        |   move.l 38(sp),d0
    369e:	|        |   move.l d0,34(sp)
    36a2:	|        |   move.l #82473,30(sp)
    36aa:	|        |   moveq #54,d0
    36ac:	|        |   move.l d0,26(sp)
    36b0:	|        |   move.l 1678c <DOSBase>,d0
    36b6:	|        |   movea.l d0,a6
    36b8:	|        |   move.l 34(sp),d1
    36bc:	|        |   move.l 30(sp),d2
    36c0:	|        |   move.l 26(sp),d3
    36c4:	|        |   jsr -48(a6)
    36c8:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    36cc:	|        |   pea 14260 <PutChar+0x8f2>
    36d2:	|        |   jsr 13046 <KPrintF>
    36d8:	|        |   addq.l #4,sp
		return FALSE;
    36da:	|        |   clr.w d0
    36dc:	+--------|-- bra.w 39b6 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    36e0:	|        \-> move.l 292(sp),-(sp)
    36e4:	|            jsr 6bc <get2bytes>
    36ea:	|            addq.l #4,sp
    36ec:	|            move.l d0,1675c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    36f2:	|            move.l 1675c <numGlobals>,d0
    36f8:	|            lsl.l #3,d0
    36fa:	|            move.l d0,154(sp)
    36fe:	|            clr.l 150(sp)
    3702:	|            move.l 16784 <SysBase>,d0
    3708:	|            movea.l d0,a6
    370a:	|            move.l 154(sp),d0
    370e:	|            move.l 150(sp),d1
    3712:	|            jsr -684(a6)
    3716:	|            move.l d0,146(sp)
    371a:	|            move.l 146(sp),d0
    371e:	|            move.l d0,16736 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3724:	|            move.l 16736 <globalVars>,d0
    372a:	|        /-- bne.s 3748 <initSludge+0x4fe>
    372c:	|        |   move.l 1675c <numGlobals>,d0
    3732:	|        +-- ble.s 3748 <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3734:	|        |   pea 14298 <PutChar+0x92a>
    373a:	|        |   jsr 13046 <KPrintF>
    3740:	|        |   addq.l #4,sp
		return FALSE;
    3742:	|        |   clr.w d0
    3744:	+--------|-- bra.w 39b6 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3748:	|        \-> clr.l 312(sp)
    374c:	|        /-- bra.s 3764 <initSludge+0x51a>
    374e:	|     /--|-> move.l 16736 <globalVars>,d1
    3754:	|     |  |   move.l 312(sp),d0
    3758:	|     |  |   lsl.l #3,d0
    375a:	|     |  |   movea.l d1,a0
    375c:	|     |  |   adda.l d0,a0
    375e:	|     |  |   clr.l (a0)
    3760:	|     |  |   addq.l #1,312(sp)
    3764:	|     |  \-> move.l 1675c <numGlobals>,d0
    376a:	|     |      cmp.l 312(sp),d0
    376e:	|     \----- bgt.s 374e <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3770:	|            move.l 168b8 <gameSettings+0x4>,d0
    3776:	|            clr.l -(sp)
    3778:	|            move.l d0,-(sp)
    377a:	|            move.l 300(sp),-(sp)
    377e:	|            jsr 4730 <setFileIndices>
    3784:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3788:	|            pea 1 <_start+0x1>
    378c:	|            jsr 43ea <getNumberedString>
    3792:	|            addq.l #4,sp
    3794:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3798:	|            move.l 142(sp),-(sp)
    379c:	|            jsr 2fe <encodeFilename>
    37a2:	|            addq.l #4,sp
    37a4:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    37a8:	|            move.l 142(sp),134(sp)
    37ae:	|            move.l 16784 <SysBase>,d0
    37b4:	|            movea.l d0,a6
    37b6:	|            movea.l 134(sp),a1
    37ba:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    37be:	|            move.l 138(sp),130(sp)
    37c4:	|            move.l 1678c <DOSBase>,d0
    37ca:	|            movea.l d0,a6
    37cc:	|            move.l 130(sp),d1
    37d0:	|            jsr -120(a6)
    37d4:	|            move.l d0,126(sp)
    37d8:	|            move.l 126(sp),d0
    37dc:	|            move.l d0,296(sp)
	if(lock == 0) {
    37e0:	|        /-- bne.s 380e <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    37e2:	|        |   move.l 138(sp),122(sp)
    37e8:	|        |   moveq #-2,d1
    37ea:	|        |   move.l d1,118(sp)
    37ee:	|        |   move.l 1678c <DOSBase>,d0
    37f4:	|        |   movea.l d0,a6
    37f6:	|        |   move.l 122(sp),d1
    37fa:	|        |   move.l 118(sp),d2
    37fe:	|        |   jsr -84(a6)
    3802:	|        |   move.l d0,114(sp)
    3806:	|        |   move.l 114(sp),d0
    380a:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    380e:	|        \-> move.l 296(sp),110(sp)
    3814:	|            move.l 1678c <DOSBase>,d0
    381a:	|            movea.l d0,a6
    381c:	|            move.l 110(sp),d1
    3820:	|            jsr -126(a6)
    3824:	|            move.l d0,106(sp)
    3828:	|            move.l 106(sp),d0
    382c:	|        /-- bne.s 3888 <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    382e:	|        |   move.l 138(sp),-(sp)
    3832:	|        |   pea 142cb <PutChar+0x95d>
    3838:	|        |   jsr 13046 <KPrintF>
    383e:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3840:	|        |   move.l 1678c <DOSBase>,d0
    3846:	|        |   movea.l d0,a6
    3848:	|        |   jsr -60(a6)
    384c:	|        |   move.l d0,58(sp)
    3850:	|        |   move.l 58(sp),d0
    3854:	|        |   move.l d0,54(sp)
    3858:	|        |   move.l #82680,50(sp)
    3860:	|        |   moveq #40,d0
    3862:	|        |   move.l d0,46(sp)
    3866:	|        |   move.l 1678c <DOSBase>,d0
    386c:	|        |   movea.l d0,a6
    386e:	|        |   move.l 54(sp),d1
    3872:	|        |   move.l 50(sp),d2
    3876:	|        |   move.l 46(sp),d3
    387a:	|        |   jsr -48(a6)
    387e:	|        |   move.l d0,42(sp)
		return FALSE;
    3882:	|        |   clr.w d0
    3884:	+--------|-- bra.w 39b6 <initSludge+0x76c>
	}

	FreeVec(gameName);
    3888:	|        \-> move.l 138(sp),102(sp)
    388e:	|            move.l 16784 <SysBase>,d0
    3894:	|            movea.l d0,a6
    3896:	|            movea.l 102(sp),a1
    389a:	|            jsr -690(a6)

	readIniFile (filename);
    389e:	|            move.l 320(sp),-(sp)
    38a2:	|            jsr 10014 <readIniFile>
    38a8:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    38aa:	|            jsr fde6 <getLanguageForFileB>
    38b0:	|            move.l d0,16120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    38b6:	|            move.l 16120 <languageNum>,d0
    38bc:	|        /-- bpl.s 38cc <initSludge+0x682>
    38be:	|        |   pea 14321 <PutChar+0x9b3>
    38c4:	|        |   jsr 13046 <KPrintF>
    38ca:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    38cc:	|        \-> move.l 16120 <languageNum>,d0
    38d2:	|            move.l d0,d1
    38d4:	|            move.l 168b8 <gameSettings+0x4>,d0
    38da:	|            move.l d1,-(sp)
    38dc:	|            move.l d0,-(sp)
    38de:	|            clr.l -(sp)
    38e0:	|            jsr 4730 <setFileIndices>
    38e6:	|            lea 12(sp),sp

	if (dataFol[0]) {
    38ea:	|            movea.l 200(sp),a0
    38ee:	|            move.b (a0),d0
    38f0:	|     /----- beq.w 399a <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    38f4:	|     |      move.l 200(sp),-(sp)
    38f8:	|     |      jsr 2fe <encodeFilename>
    38fe:	|     |      addq.l #4,sp
    3900:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3904:	|     |      move.l 98(sp),94(sp)
    390a:	|     |      move.l 1678c <DOSBase>,d0
    3910:	|     |      movea.l d0,a6
    3912:	|     |      move.l 94(sp),d1
    3916:	|     |      jsr -120(a6)
    391a:	|     |      move.l d0,90(sp)
    391e:	|     |      move.l 90(sp),d0
    3922:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3926:	|     |  /-- bne.s 3954 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    3928:	|     |  |   move.l 98(sp),86(sp)
    392e:	|     |  |   moveq #-2,d1
    3930:	|     |  |   move.l d1,82(sp)
    3934:	|     |  |   move.l 1678c <DOSBase>,d0
    393a:	|     |  |   movea.l d0,a6
    393c:	|     |  |   move.l 86(sp),d1
    3940:	|     |  |   move.l 82(sp),d2
    3944:	|     |  |   jsr -84(a6)
    3948:	|     |  |   move.l d0,78(sp)
    394c:	|     |  |   move.l 78(sp),d0
    3950:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3954:	|     |  \-> move.l 296(sp),74(sp)
    395a:	|     |      move.l 1678c <DOSBase>,d0
    3960:	|     |      movea.l d0,a6
    3962:	|     |      move.l 74(sp),d1
    3966:	|     |      jsr -126(a6)
    396a:	|     |      move.l d0,70(sp)
    396e:	|     |      move.l 70(sp),d0
    3972:	|     |  /-- bne.s 3984 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3974:	|     |  |   move.l 1678c <DOSBase>,d0
    397a:	|     |  |   movea.l d0,a6
    397c:	|     |  |   jsr -60(a6)
    3980:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3984:	|     |  \-> move.l 98(sp),62(sp)
    398a:	|     |      move.l 16784 <SysBase>,d0
    3990:	|     |      movea.l d0,a6
    3992:	|     |      movea.l 62(sp),a1
    3996:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    399a:	|     \----> movea.l 166e0 <winHeight>,a0
    39a0:	|            lea -15(a0),a0
    39a4:	|            move.l a0,d0
    39a6:	|            move.l d0,-(sp)
    39a8:	|            pea a <_start+0xa>
    39ac:	|            jsr 5162 <positionStatus>
    39b2:	|            addq.l #8,sp

	return TRUE;
    39b4:	|            moveq #1,d0
}
    39b6:	\----------> movem.l (sp)+,d2-d4/a2/a6
    39ba:	             lea 296(sp),sp
    39be:	             rts

000039c0 <killSpeechTimers>:

void killSpeechTimers () {
    39c0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    39c2:	          move.l 16720 <allRunningFunctions>,(sp)

	while (thisFunction) {
    39c8:	   /----- bra.s 39f4 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    39ca:	/--|----> movea.l (sp),a0
    39cc:	|  |      move.b 56(a0),d0
    39d0:	|  |  /-- bne.s 39ee <killSpeechTimers+0x2e>
    39d2:	|  |  |   movea.l (sp),a0
    39d4:	|  |  |   move.w 50(a0),d0
    39d8:	|  |  +-- beq.s 39ee <killSpeechTimers+0x2e>
    39da:	|  |  |   movea.l (sp),a0
    39dc:	|  |  |   move.l 12(a0),d0
    39e0:	|  |  +-- beq.s 39ee <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    39e2:	|  |  |   movea.l (sp),a0
    39e4:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    39e8:	|  |  |   movea.l (sp),a0
    39ea:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    39ee:	|  |  \-> movea.l (sp),a0
    39f0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    39f4:	|  \----> tst.l (sp)
    39f6:	\-------- bne.s 39ca <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    39f8:	          jsr 56a0 <killAllSpeech>
}
    39fe:	          nop
    3a00:	          addq.l #4,sp
    3a02:	          rts

00003a04 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3a04:	             lea -52(sp),sp
    3a08:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3a0a:	             movea.l 60(sp),a0
    3a0e:	             move.l (a0),d0
    3a10:	             move.l d0,-(sp)
    3a12:	             jsr 4670 <openSubSlice>
    3a18:	             addq.l #4,sp
    3a1a:	             tst.w d0
    3a1c:	         /-- bne.s 3a24 <loadFunctionCode+0x20>
    3a1e:	         |   clr.w d0
    3a20:	/--------|-- bra.w 3bee <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3a24:	|        \-> move.l 1676c <bigDataFile>,44(sp)
    3a2c:	|            move.l 1678c <DOSBase>,d0
    3a32:	|            movea.l d0,a6
    3a34:	|            move.l 44(sp),d1
    3a38:	|            jsr -306(a6)
    3a3c:	|            move.l d0,40(sp)
    3a40:	|            move.l 40(sp),d0
    3a44:	|            move.l d0,d0
    3a46:	|            movea.l 60(sp),a0
    3a4a:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3a4e:	|            move.l 1676c <bigDataFile>,d0
    3a54:	|            move.l d0,-(sp)
    3a56:	|            jsr 6bc <get2bytes>
    3a5c:	|            addq.l #4,sp
    3a5e:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3a62:	|            move.l 1676c <bigDataFile>,d0
    3a68:	|            move.l d0,-(sp)
    3a6a:	|            jsr 6bc <get2bytes>
    3a70:	|            addq.l #4,sp
    3a72:	|            movea.l 60(sp),a0
    3a76:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3a7a:	|            move.l 1676c <bigDataFile>,d0
    3a80:	|            move.l d0,-(sp)
    3a82:	|            jsr 6bc <get2bytes>
    3a88:	|            addq.l #4,sp
    3a8a:	|            movea.l 60(sp),a0
    3a8e:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3a92:	|            move.l 36(sp),d0
    3a96:	|            lsl.l #3,d0
    3a98:	|            move.l d0,32(sp)
    3a9c:	|            clr.l 28(sp)
    3aa0:	|            move.l 16784 <SysBase>,d0
    3aa6:	|            movea.l d0,a6
    3aa8:	|            move.l 32(sp),d0
    3aac:	|            move.l 28(sp),d1
    3ab0:	|            jsr -684(a6)
    3ab4:	|            move.l d0,24(sp)
    3ab8:	|            move.l 24(sp),d0
    3abc:	|            movea.l 60(sp),a0
    3ac0:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3ac4:	|            movea.l 60(sp),a0
    3ac8:	|            move.l 4(a0),d0
    3acc:	|        /-- bne.s 3ae2 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3ace:	|        |   pea 1434c <PutChar+0x9de>
    3ad4:	|        |   jsr 13046 <KPrintF>
    3ada:	|        |   addq.l #4,sp
		return FALSE;
    3adc:	|        |   clr.w d0
    3ade:	+--------|-- bra.w 3bee <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3ae2:	|        \-> clr.l 52(sp)
    3ae6:	|        /-- bra.s 3b48 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3ae8:	|     /--|-> move.l 1676c <bigDataFile>,8(sp)
    3af0:	|     |  |   move.l 1678c <DOSBase>,d0
    3af6:	|     |  |   movea.l d0,a6
    3af8:	|     |  |   move.l 8(sp),d1
    3afc:	|     |  |   jsr -306(a6)
    3b00:	|     |  |   move.l d0,4(sp)
    3b04:	|     |  |   move.l 4(sp),d1
    3b08:	|     |  |   movea.l 60(sp),a0
    3b0c:	|     |  |   movea.l 4(a0),a0
    3b10:	|     |  |   move.l 52(sp),d0
    3b14:	|     |  |   lsl.l #3,d0
    3b16:	|     |  |   adda.l d0,a0
    3b18:	|     |  |   move.l d1,d0
    3b1a:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3b1c:	|     |  |   move.l 1676c <bigDataFile>,d0
    3b22:	|     |  |   move.l d0,-(sp)
    3b24:	|     |  |   jsr 6bc <get2bytes>
    3b2a:	|     |  |   addq.l #4,sp
    3b2c:	|     |  |   move.l d0,d1
    3b2e:	|     |  |   movea.l 60(sp),a0
    3b32:	|     |  |   movea.l 4(a0),a0
    3b36:	|     |  |   move.l 52(sp),d0
    3b3a:	|     |  |   lsl.l #3,d0
    3b3c:	|     |  |   adda.l d0,a0
    3b3e:	|     |  |   move.l d1,d0
    3b40:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3b44:	|     |  |   addq.l #1,52(sp)
    3b48:	|     |  \-> move.l 52(sp),d0
    3b4c:	|     |      cmp.l 36(sp),d0
    3b50:	|     \----- bcs.s 3ae8 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3b52:	|            jsr 43e0 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3b58:	|            movea.l 60(sp),a0
    3b5c:	|            move.l 8(a0),d0
    3b60:	|  /-------- ble.w 3be4 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3b64:	|  |         movea.l 60(sp),a0
    3b68:	|  |         move.l 8(a0),d0
    3b6c:	|  |         lsl.l #3,d0
    3b6e:	|  |         move.l d0,20(sp)
    3b72:	|  |         clr.l 16(sp)
    3b76:	|  |         move.l 16784 <SysBase>,d0
    3b7c:	|  |         movea.l d0,a6
    3b7e:	|  |         move.l 20(sp),d0
    3b82:	|  |         move.l 16(sp),d1
    3b86:	|  |         jsr -684(a6)
    3b8a:	|  |         move.l d0,12(sp)
    3b8e:	|  |         move.l 12(sp),d0
    3b92:	|  |         movea.l 60(sp),a0
    3b96:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3b9a:	|  |         movea.l 60(sp),a0
    3b9e:	|  |         move.l 20(a0),d0
    3ba2:	|  |     /-- bne.s 3bb6 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3ba4:	|  |     |   pea 1434c <PutChar+0x9de>
    3baa:	|  |     |   jsr 13046 <KPrintF>
    3bb0:	|  |     |   addq.l #4,sp
			return FALSE;
    3bb2:	|  |     |   clr.w d0
    3bb4:	+--|-----|-- bra.s 3bee <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3bb6:	|  |     \-> clr.l 48(sp)
    3bba:	|  |     /-- bra.s 3bd4 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3bbc:	|  |  /--|-> movea.l 60(sp),a0
    3bc0:	|  |  |  |   move.l 20(a0),d1
    3bc4:	|  |  |  |   move.l 48(sp),d0
    3bc8:	|  |  |  |   lsl.l #3,d0
    3bca:	|  |  |  |   movea.l d1,a0
    3bcc:	|  |  |  |   adda.l d0,a0
    3bce:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3bd0:	|  |  |  |   addq.l #1,48(sp)
    3bd4:	|  |  |  \-> movea.l 60(sp),a0
    3bd8:	|  |  |      move.l 8(a0),d0
    3bdc:	|  |  |      cmp.l 48(sp),d0
    3be0:	|  |  \----- bgt.s 3bbc <loadFunctionCode+0x1b8>
    3be2:	|  |     /-- bra.s 3bec <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3be4:	|  \-----|-> movea.l 60(sp),a0
    3be8:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3bec:	|        \-> moveq #1,d0
}
    3bee:	\----------> movea.l (sp)+,a6
    3bf0:	             lea 52(sp),sp
    3bf4:	             rts

00003bf6 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3bf6:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3bf8:	movea.l 1611c <currentEvents>,a2
    3bfe:	move.l 8(sp),-(sp)
    3c02:	jsr 6bc <get2bytes>
    3c08:	addq.l #4,sp
    3c0a:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3c0c:	movea.l 1611c <currentEvents>,a2
    3c12:	move.l 8(sp),-(sp)
    3c16:	jsr 6bc <get2bytes>
    3c1c:	addq.l #4,sp
    3c1e:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3c22:	movea.l 1611c <currentEvents>,a2
    3c28:	move.l 8(sp),-(sp)
    3c2c:	jsr 6bc <get2bytes>
    3c32:	addq.l #4,sp
    3c34:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3c38:	movea.l 1611c <currentEvents>,a2
    3c3e:	move.l 8(sp),-(sp)
    3c42:	jsr 6bc <get2bytes>
    3c48:	addq.l #4,sp
    3c4a:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3c4e:	movea.l 1611c <currentEvents>,a2
    3c54:	move.l 8(sp),-(sp)
    3c58:	jsr 6bc <get2bytes>
    3c5e:	addq.l #4,sp
    3c60:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3c64:	movea.l 1611c <currentEvents>,a2
    3c6a:	move.l 8(sp),-(sp)
    3c6e:	jsr 6bc <get2bytes>
    3c74:	addq.l #4,sp
    3c76:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3c7a:	movea.l 1611c <currentEvents>,a2
    3c80:	move.l 8(sp),-(sp)
    3c84:	jsr 6bc <get2bytes>
    3c8a:	addq.l #4,sp
    3c8c:	move.l d0,24(a2)
}
    3c90:	nop
    3c92:	movea.l (sp)+,a2
    3c94:	rts

00003c96 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3c96:	       lea -312(sp),sp
    3c9a:	       movem.l d2-d3/a6,-(sp)
    3c9e:	       move.l 332(sp),d1
    3ca2:	       move.l 336(sp),d0
    3ca6:	       move.b d1,d1
    3ca8:	       move.b d1,16(sp)
    3cac:	       move.b d0,d0
    3cae:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3cb2:	       move.l 328(sp),318(sp)
    3cb8:	       move.l #1005,314(sp)
    3cc0:	       move.l 1678c <DOSBase>,d0
    3cc6:	       movea.l d0,a6
    3cc8:	       move.l 318(sp),d1
    3ccc:	       move.l 314(sp),d2
    3cd0:	       jsr -30(a6)
    3cd4:	       move.l d0,310(sp)
    3cd8:	       move.l 310(sp),d0
    3cdc:	       move.l d0,306(sp)

	if (! fp) {
    3ce0:	   /-- bne.s 3d3c <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3ce2:	   |   move.l 1678c <DOSBase>,d0
    3ce8:	   |   movea.l d0,a6
    3cea:	   |   jsr -60(a6)
    3cee:	   |   move.l d0,154(sp)
    3cf2:	   |   move.l 154(sp),d0
    3cf6:	   |   move.l d0,150(sp)
    3cfa:	   |   move.l #82805,146(sp)
    3d02:	   |   moveq #31,d0
    3d04:	   |   move.l d0,142(sp)
    3d08:	   |   move.l 1678c <DOSBase>,d0
    3d0e:	   |   movea.l d0,a6
    3d10:	   |   move.l 150(sp),d1
    3d14:	   |   move.l 146(sp),d2
    3d18:	   |   move.l 142(sp),d3
    3d1c:	   |   jsr -48(a6)
    3d20:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3d24:	   |   move.l 328(sp),-(sp)
    3d28:	   |   pea 14395 <cursors.c.412ac4f3+0x36>
    3d2e:	   |   jsr 13046 <KPrintF>
    3d34:	   |   addq.l #8,sp
		return NULL;
    3d36:	   |   moveq #0,d0
    3d38:	/--|-- bra.w 3ffc <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    3d3c:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    3d40:	|      move.l 306(sp),302(sp)
    3d46:	|      move.l 1678c <DOSBase>,d0
    3d4c:	|      movea.l d0,a6
    3d4e:	|      move.l 302(sp),d1
    3d52:	|      jsr -306(a6)
    3d56:	|      move.l d0,298(sp)
    3d5a:	|      move.l 298(sp),d0
    3d5e:	|      moveq #83,d1
    3d60:	|      cmp.l d0,d1
    3d62:	|  /-- beq.s 3d6a <openAndVerify+0xd4>
    3d64:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3d6a:	|  \-> move.l 306(sp),294(sp)
    3d70:	|      move.l 1678c <DOSBase>,d0
    3d76:	|      movea.l d0,a6
    3d78:	|      move.l 294(sp),d1
    3d7c:	|      jsr -306(a6)
    3d80:	|      move.l d0,290(sp)
    3d84:	|      move.l 290(sp),d0
    3d88:	|      moveq #76,d1
    3d8a:	|      cmp.l d0,d1
    3d8c:	|  /-- beq.s 3d94 <openAndVerify+0xfe>
    3d8e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3d94:	|  \-> move.l 306(sp),286(sp)
    3d9a:	|      move.l 1678c <DOSBase>,d0
    3da0:	|      movea.l d0,a6
    3da2:	|      move.l 286(sp),d1
    3da6:	|      jsr -306(a6)
    3daa:	|      move.l d0,282(sp)
    3dae:	|      move.l 282(sp),d0
    3db2:	|      moveq #85,d1
    3db4:	|      cmp.l d0,d1
    3db6:	|  /-- beq.s 3dbe <openAndVerify+0x128>
    3db8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3dbe:	|  \-> move.l 306(sp),278(sp)
    3dc4:	|      move.l 1678c <DOSBase>,d0
    3dca:	|      movea.l d0,a6
    3dcc:	|      move.l 278(sp),d1
    3dd0:	|      jsr -306(a6)
    3dd4:	|      move.l d0,274(sp)
    3dd8:	|      move.l 274(sp),d0
    3ddc:	|      moveq #68,d1
    3dde:	|      cmp.l d0,d1
    3de0:	|  /-- beq.s 3de8 <openAndVerify+0x152>
    3de2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3de8:	|  \-> move.l 306(sp),270(sp)
    3dee:	|      move.l 1678c <DOSBase>,d0
    3df4:	|      movea.l d0,a6
    3df6:	|      move.l 270(sp),d1
    3dfa:	|      jsr -306(a6)
    3dfe:	|      move.l d0,266(sp)
    3e02:	|      move.l 266(sp),d1
    3e06:	|      move.b 16(sp),d0
    3e0a:	|      ext.w d0
    3e0c:	|      movea.w d0,a0
    3e0e:	|      cmpa.l d1,a0
    3e10:	|  /-- beq.s 3e18 <openAndVerify+0x182>
    3e12:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3e18:	|  \-> move.l 306(sp),262(sp)
    3e1e:	|      move.l 1678c <DOSBase>,d0
    3e24:	|      movea.l d0,a6
    3e26:	|      move.l 262(sp),d1
    3e2a:	|      jsr -306(a6)
    3e2e:	|      move.l d0,258(sp)
    3e32:	|      move.l 258(sp),d1
    3e36:	|      move.b 14(sp),d0
    3e3a:	|      ext.w d0
    3e3c:	|      movea.w d0,a0
    3e3e:	|      cmpa.l d1,a0
    3e40:	|  /-- beq.s 3e48 <openAndVerify+0x1b2>
    3e42:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3e48:	|  \-> tst.w 322(sp)
    3e4c:	|  /-- beq.s 3ea4 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    3e4e:	|  |   move.l 1678c <DOSBase>,d0
    3e54:	|  |   movea.l d0,a6
    3e56:	|  |   jsr -60(a6)
    3e5a:	|  |   move.l d0,174(sp)
    3e5e:	|  |   move.l 174(sp),d0
    3e62:	|  |   move.l d0,170(sp)
    3e66:	|  |   move.l #82868,166(sp)
    3e6e:	|  |   moveq #31,d0
    3e70:	|  |   move.l d0,162(sp)
    3e74:	|  |   move.l 1678c <DOSBase>,d0
    3e7a:	|  |   movea.l d0,a6
    3e7c:	|  |   move.l 170(sp),d1
    3e80:	|  |   move.l 166(sp),d2
    3e84:	|  |   move.l 162(sp),d3
    3e88:	|  |   jsr -48(a6)
    3e8c:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3e90:	|  |   pea 143b4 <cursors.c.412ac4f3+0x55>
    3e96:	|  |   jsr 13046 <KPrintF>
    3e9c:	|  |   addq.l #4,sp
		return NULL;
    3e9e:	|  |   moveq #0,d0
    3ea0:	+--|-- bra.w 3ffc <openAndVerify+0x366>
	}
	FGetC (fp);
    3ea4:	|  \-> move.l 306(sp),254(sp)
    3eaa:	|      move.l 1678c <DOSBase>,d0
    3eb0:	|      movea.l d0,a6
    3eb2:	|      move.l 254(sp),d1
    3eb6:	|      jsr -306(a6)
    3eba:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3ebe:	|      nop
    3ec0:	|  /-> move.l 306(sp),246(sp)
    3ec6:	|  |   move.l 1678c <DOSBase>,d0
    3ecc:	|  |   movea.l d0,a6
    3ece:	|  |   move.l 246(sp),d1
    3ed2:	|  |   jsr -306(a6)
    3ed6:	|  |   move.l d0,242(sp)
    3eda:	|  |   move.l 242(sp),d0
    3ede:	|  \-- bne.s 3ec0 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3ee0:	|      move.l 306(sp),238(sp)
    3ee6:	|      move.l 1678c <DOSBase>,d0
    3eec:	|      movea.l d0,a6
    3eee:	|      move.l 238(sp),d1
    3ef2:	|      jsr -306(a6)
    3ef6:	|      move.l d0,234(sp)
    3efa:	|      move.l 234(sp),d0
    3efe:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3f02:	|      move.l 306(sp),226(sp)
    3f08:	|      move.l 1678c <DOSBase>,d0
    3f0e:	|      movea.l d0,a6
    3f10:	|      move.l 226(sp),d1
    3f14:	|      jsr -306(a6)
    3f18:	|      move.l d0,222(sp)
    3f1c:	|      move.l 222(sp),d0
    3f20:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3f24:	|      move.l 230(sp),d0
    3f28:	|      lsl.l #8,d0
    3f2a:	|      add.l 218(sp),d0
    3f2e:	|      movea.l 344(sp),a0
    3f32:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3f34:	|      movea.l 344(sp),a0
    3f38:	|      move.l (a0),d0
    3f3a:	|      cmpi.l #514,d0
    3f40:	|  /-- ble.s 3f96 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3f42:	|  |   move.l 1678c <DOSBase>,d0
    3f48:	|  |   movea.l d0,a6
    3f4a:	|  |   jsr -60(a6)
    3f4e:	|  |   move.l d0,194(sp)
    3f52:	|  |   move.l 194(sp),d0
    3f56:	|  |   move.l d0,190(sp)
    3f5a:	|  |   move.l #82895,186(sp)
    3f62:	|  |   moveq #100,d1
    3f64:	|  |   move.l d1,182(sp)
    3f68:	|  |   move.l 1678c <DOSBase>,d0
    3f6e:	|  |   movea.l d0,a6
    3f70:	|  |   move.l 190(sp),d1
    3f74:	|  |   move.l 186(sp),d2
    3f78:	|  |   move.l 182(sp),d3
    3f7c:	|  |   jsr -48(a6)
    3f80:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3f84:	|  |   pea 143cf <cursors.c.412ac4f3+0x70>
    3f8a:	|  |   jsr 13046 <KPrintF>
    3f90:	|  |   addq.l #4,sp
		return NULL;
    3f92:	|  |   moveq #0,d0
    3f94:	+--|-- bra.s 3ffc <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3f96:	|  \-> movea.l 344(sp),a0
    3f9a:	|      move.l (a0),d0
    3f9c:	|      cmpi.l #257,d0
    3fa2:	|  /-- bgt.s 3ff8 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3fa4:	|  |   move.l 1678c <DOSBase>,d0
    3faa:	|  |   movea.l d0,a6
    3fac:	|  |   jsr -60(a6)
    3fb0:	|  |   move.l d0,214(sp)
    3fb4:	|  |   move.l 214(sp),d0
    3fb8:	|  |   move.l d0,210(sp)
    3fbc:	|  |   move.l #82964,206(sp)
    3fc4:	|  |   moveq #100,d0
    3fc6:	|  |   move.l d0,202(sp)
    3fca:	|  |   move.l 1678c <DOSBase>,d0
    3fd0:	|  |   movea.l d0,a6
    3fd2:	|  |   move.l 210(sp),d1
    3fd6:	|  |   move.l 206(sp),d2
    3fda:	|  |   move.l 202(sp),d3
    3fde:	|  |   jsr -48(a6)
    3fe2:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3fe6:	|  |   pea 14414 <cursors.c.412ac4f3+0xb5>
    3fec:	|  |   jsr 13046 <KPrintF>
    3ff2:	|  |   addq.l #4,sp
		return NULL;
    3ff4:	|  |   moveq #0,d0
    3ff6:	+--|-- bra.s 3ffc <openAndVerify+0x366>
	}
	return fp;
    3ff8:	|  \-> move.l 306(sp),d0
}
    3ffc:	\----> movem.l (sp)+,d2-d3/a6
    4000:	       lea 312(sp),sp
    4004:	       rts

00004006 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    4006:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    4008:	          move.l #91936,(sp)
	while (* huntAndDestroy) {
    400e:	   /----- bra.s 403a <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4010:	/--|----> movea.l (sp),a0
    4012:	|  |      move.l (a0),d0
    4014:	|  |      cmp.l 8(sp),d0
    4018:	|  |  /-- bne.s 4030 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    401a:	|  |  |   movea.l (sp),a0
    401c:	|  |  |   movea.l (a0),a0
    401e:	|  |  |   move.l 44(a0),d0
    4022:	|  |  |   movea.l (sp),a0
    4024:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    4026:	|  |  |   movea.l 8(sp),a0
    402a:	|  |  |   clr.l 44(a0)
    402e:	|  +--|-- bra.s 403a <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4030:	|  |  \-> movea.l (sp),a0
    4032:	|  |      move.l (a0),d0
    4034:	|  |      moveq #44,d1
    4036:	|  |      add.l d0,d1
    4038:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    403a:	|  \----> movea.l (sp),a0
    403c:	|         move.l (a0),d0
    403e:	\-------- bne.s 4010 <pauseFunction+0xa>
		}
	}
}
    4040:	          nop
    4042:	          nop
    4044:	          addq.l #4,sp
    4046:	          rts

00004048 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    4048:	move.l 16720 <allRunningFunctions>,d0
    404e:	movea.l 4(sp),a0
    4052:	move.l d0,44(a0)
	allRunningFunctions = fun;
    4056:	move.l 4(sp),16720 <allRunningFunctions>
}
    405e:	nop
    4060:	rts

00004062 <runSludge>:

BOOL runSludge () {
    4062:	                   lea -12(sp),sp
    4066:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    4068:	                   move.l 16720 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4070:	      /----------- bra.s 40ec <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    4072:	   /--|----------> movea.l 12(sp),a0
    4076:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    407c:	   |  |            movea.l 12(sp),a0
    4080:	   |  |            move.b 56(a0),d0
    4084:	   |  |  /-------- bne.s 40e6 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    4086:	   |  |  |         movea.l 12(sp),a0
    408a:	   |  |  |         move.l 12(a0),d0
    408e:	   |  |  |  /----- beq.s 40b8 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4090:	   |  |  |  |      movea.l 12(sp),a0
    4094:	   |  |  |  |      move.l 12(a0),d0
    4098:	   |  |  |  |  /-- bpl.s 40a4 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    409a:	   |  |  |  |  |   movea.l 12(sp),a0
    409e:	   |  |  |  |  |   clr.l 12(a0)
    40a2:	   |  |  +--|--|-- bra.s 40e6 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    40a4:	   |  |  |  |  \-> movea.l 12(sp),a0
    40a8:	   |  |  |  |      move.l 12(a0),d0
    40ac:	   |  |  |  |      subq.l #1,d0
    40ae:	   |  |  |  |      movea.l 12(sp),a0
    40b2:	   |  |  |  |      move.l d0,12(a0)
    40b6:	   |  |  +--|----- bra.s 40e6 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    40b8:	   |  |  |  \----> movea.l 12(sp),a0
    40bc:	   |  |  |         move.w 50(a0),d0
    40c0:	   |  |  |     /-- beq.s 40d0 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    40c2:	   |  |  |     |   movea.l 12(sp),a0
    40c6:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    40ca:	   |  |  |     |   jsr 56a0 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    40d0:	   |  |  |     \-> move.l 12(sp),-(sp)
    40d4:	   |  |  |         jsr 22ac <continueFunction>
    40da:	   |  |  |         addq.l #4,sp
    40dc:	   |  |  |         tst.w d0
    40de:	   |  |  +-------- bne.s 40e6 <runSludge+0x84>
					return FALSE;
    40e0:	   |  |  |         clr.w d0
    40e2:	/--|--|--|-------- bra.w 4172 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    40e6:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    40ec:	|  |  \----------> tst.l 12(sp)
    40f0:	|  \-------------- bne.s 4072 <runSludge+0x10>
	}

	if (loadNow) {
    40f2:	|                  move.l 16750 <loadNow>,d0
    40f8:	|        /-------- beq.s 4170 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    40fa:	|        |         movea.l 16750 <loadNow>,a0
    4100:	|        |         move.b (a0),d0
    4102:	|        |         cmpi.b #58,d0
    4106:	|        |  /----- bne.s 413a <runSludge+0xd8>
			saveGame (loadNow + 1);
    4108:	|        |  |      move.l 16750 <loadNow>,d0
    410e:	|        |  |      addq.l #1,d0
    4110:	|        |  |      move.l d0,-(sp)
    4112:	|        |  |      jsr 9240 <saveGame>
    4118:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    411a:	|        |  |      movea.l 168a2 <saverFunc>,a0
    4120:	|        |  |      lea 28(a0),a0
    4124:	|        |  |      pea 1 <_start+0x1>
    4128:	|        |  |      pea 1 <_start+0x1>
    412c:	|        |  |      move.l a0,-(sp)
    412e:	|        |  |      jsr 118f0 <setVariable>
    4134:	|        |  |      lea 12(sp),sp
    4138:	|        |  |  /-- bra.s 4152 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    413a:	|        |  \--|-> move.l 16750 <loadNow>,d0
    4140:	|        |     |   move.l d0,-(sp)
    4142:	|        |     |   jsr 8d88 <loadGame>
    4148:	|        |     |   addq.l #4,sp
    414a:	|        |     |   tst.w d0
    414c:	|        |     +-- bne.s 4152 <runSludge+0xf0>
    414e:	|        |     |   clr.w d0
    4150:	+--------|-----|-- bra.s 4172 <runSludge+0x110>
		}
		FreeVec(loadNow);
    4152:	|        |     \-> move.l 16750 <loadNow>,8(sp)
    415a:	|        |         move.l 16784 <SysBase>,d0
    4160:	|        |         movea.l d0,a6
    4162:	|        |         movea.l 8(sp),a1
    4166:	|        |         jsr -690(a6)
		loadNow = NULL;
    416a:	|        |         clr.l 16750 <loadNow>
	}

	return TRUE;
    4170:	|        \-------> moveq #1,d0
}
    4172:	\----------------> movea.l (sp)+,a6
    4174:	                   lea 12(sp),sp
    4178:	                   rts

0000417a <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    417a:	movea.l 1611c <currentEvents>,a0
    4180:	move.l (a0),d0
    4182:	move.l 4(sp),-(sp)
    4186:	move.l d0,-(sp)
    4188:	jsr 8d0 <put2bytes>
    418e:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4190:	movea.l 1611c <currentEvents>,a0
    4196:	move.l 4(a0),d0
    419a:	move.l 4(sp),-(sp)
    419e:	move.l d0,-(sp)
    41a0:	jsr 8d0 <put2bytes>
    41a6:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    41a8:	movea.l 1611c <currentEvents>,a0
    41ae:	move.l 8(a0),d0
    41b2:	move.l 4(sp),-(sp)
    41b6:	move.l d0,-(sp)
    41b8:	jsr 8d0 <put2bytes>
    41be:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    41c0:	movea.l 1611c <currentEvents>,a0
    41c6:	move.l 12(a0),d0
    41ca:	move.l 4(sp),-(sp)
    41ce:	move.l d0,-(sp)
    41d0:	jsr 8d0 <put2bytes>
    41d6:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    41d8:	movea.l 1611c <currentEvents>,a0
    41de:	move.l 16(a0),d0
    41e2:	move.l 4(sp),-(sp)
    41e6:	move.l d0,-(sp)
    41e8:	jsr 8d0 <put2bytes>
    41ee:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    41f0:	movea.l 1611c <currentEvents>,a0
    41f6:	move.l 20(a0),d0
    41fa:	move.l 4(sp),-(sp)
    41fe:	move.l d0,-(sp)
    4200:	jsr 8d0 <put2bytes>
    4206:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    4208:	movea.l 1611c <currentEvents>,a0
    420e:	move.l 24(a0),d0
    4212:	move.l 4(sp),-(sp)
    4216:	move.l d0,-(sp)
    4218:	jsr 8d0 <put2bytes>
    421e:	addq.l #8,sp
}
    4220:	nop
    4222:	rts

00004224 <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    4224:	jsr 155e <CstSludgeDisplay>
}
    422a:	nop
    422c:	rts

0000422e <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    422e:	      /-- bra.s 424e <stackSetByIndex+0x20>
		vS = vS->next;
    4230:	/-----|-> movea.l 4(sp),a0
    4234:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    423a:	|     +-- bne.s 424e <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    423c:	|     |   pea 1445b <cursors.c.412ac4f3+0xfc>
    4242:	|     |   jsr 13046 <KPrintF>
    4248:	|     |   addq.l #4,sp
			return FALSE;
    424a:	|     |   clr.w d0
    424c:	|  /--|-- bra.s 4270 <stackSetByIndex+0x42>
	while (theIndex--) {
    424e:	|  |  \-> move.l 8(sp),d0
    4252:	|  |      move.l d0,d1
    4254:	|  |      subq.l #1,d1
    4256:	|  |      move.l d1,8(sp)
    425a:	|  |      tst.l d0
    425c:	\--|----- bne.s 4230 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    425e:	   |      move.l 4(sp),d0
    4262:	   |      move.l d0,-(sp)
    4264:	   |      move.l 16(sp),-(sp)
    4268:	   |      jsr 114b8 <copyVariable>
    426e:	   |      addq.l #8,sp
}
    4270:	   \----> rts

00004272 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4272:	             lea -24(sp),sp
    4276:	             move.l a6,-(sp)
    4278:	             move.l 48(sp),d0
    427c:	             move.w d0,d0
    427e:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4282:	             moveq #58,d0
    4284:	             move.l d0,24(sp)
    4288:	             clr.l 20(sp)
    428c:	             move.l 16784 <SysBase>,d0
    4292:	             movea.l d0,a6
    4294:	             move.l 24(sp),d0
    4298:	             move.l 20(sp),d1
    429c:	             jsr -684(a6)
    42a0:	             move.l d0,16(sp)
    42a4:	             move.l 16(sp),d0
    42a8:	             move.l d0,12(sp)
	if(!newFunc) {
    42ac:	         /-- bne.s 42c2 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    42ae:	         |   pea 14474 <cursors.c.412ac4f3+0x115>
    42b4:	         |   jsr 13046 <KPrintF>
    42ba:	         |   addq.l #4,sp
		return 0;
    42bc:	         |   moveq #0,d0
    42be:	/--------|-- bra.w 43d8 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    42c2:	|        \-> move.l 32(sp),d0
    42c6:	|            movea.l 12(sp),a0
    42ca:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    42cc:	|            move.l 12(sp),-(sp)
    42d0:	|            jsr 3a04 <loadFunctionCode>
    42d6:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    42d8:	|            movea.l 12(sp),a0
    42dc:	|            move.l 16(a0),d1
    42e0:	|            move.l 36(sp),d0
    42e4:	|            cmp.l d1,d0
    42e6:	|        /-- beq.s 42fc <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    42e8:	|        |   pea 1449d <cursors.c.412ac4f3+0x13e>
    42ee:	|        |   jsr 13046 <KPrintF>
    42f4:	|        |   addq.l #4,sp
		return NULL; 
    42f6:	|        |   moveq #0,d0
    42f8:	+--------|-- bra.w 43d8 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    42fc:	|        \-> movea.l 12(sp),a0
    4300:	|            move.l 16(a0),d1
    4304:	|            movea.l 12(sp),a0
    4308:	|            move.l 8(a0),d0
    430c:	|            cmp.l d1,d0
    430e:	|  /-------- bge.s 4378 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4310:	|  |         pea 144b9 <cursors.c.412ac4f3+0x15a>
    4316:	|  |         jsr 13046 <KPrintF>
    431c:	|  |         addq.l #4,sp
		return NULL; 
    431e:	|  |         moveq #0,d0
    4320:	+--|-------- bra.w 43d8 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4324:	|  |  /----> movea.l 44(sp),a0
    4328:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    432c:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4330:	|  |  |      movea.l 44(sp),a0
    4334:	|  |  |      move.l (a0),d0
    4336:	|  |  |  /-- bne.s 434c <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    4338:	|  |  |  |   pea 144e3 <cursors.c.412ac4f3+0x184>
    433e:	|  |  |  |   jsr 13046 <KPrintF>
    4344:	|  |  |  |   addq.l #4,sp
			return NULL;
    4346:	|  |  |  |   moveq #0,d0
    4348:	+--|--|--|-- bra.w 43d8 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    434c:	|  |  |  \-> movea.l 12(sp),a0
    4350:	|  |  |      move.l 20(a0),d1
    4354:	|  |  |      move.l 36(sp),d0
    4358:	|  |  |      lsl.l #3,d0
    435a:	|  |  |      add.l d0,d1
    435c:	|  |  |      move.l 8(sp),d0
    4360:	|  |  |      move.l d1,-(sp)
    4362:	|  |  |      move.l d0,-(sp)
    4364:	|  |  |      jsr 114b8 <copyVariable>
    436a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    436c:	|  |  |      move.l 44(sp),-(sp)
    4370:	|  |  |      jsr 11982 <trimStack>
    4376:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    4378:	|  \--|----> tst.l 36(sp)
    437c:	|     \----- bne.s 4324 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    437e:	|            movea.l 12(sp),a0
    4382:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4386:	|            movea.l 12(sp),a0
    438a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    438e:	|            movea.l 12(sp),a0
    4392:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4398:	|            movea.l 12(sp),a0
    439c:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    43a2:	|            movea.l 12(sp),a0
    43a6:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    43aa:	|            movea.l 12(sp),a0
    43ae:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    43b2:	|            movea.l 12(sp),a0
    43b6:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    43ba:	|            movea.l 12(sp),a0
    43be:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    43c2:	|            movea.l 12(sp),a0
    43c6:	|            clr.l 28(a0)

	restartFunction (newFunc);
    43ca:	|            move.l 12(sp),-(sp)
    43ce:	|            jsr 4048 <restartFunction>
    43d4:	|            addq.l #4,sp
	return 1;
    43d6:	|            moveq #1,d0
}
    43d8:	\----------> movea.l (sp)+,a6
    43da:	             lea 24(sp),sp
    43de:	             rts

000043e0 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    43e0:	clr.w 16128 <sliceBusy>
}
    43e6:	nop
    43e8:	rts

000043ea <getNumberedString>:

char * getNumberedString (int value) {
    43ea:	       lea -56(sp),sp
    43ee:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    43f2:	       move.w 16128 <sliceBusy>,d0
    43f8:	   /-- beq.s 4442 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    43fa:	   |   move.l 1678c <DOSBase>,d0
    4400:	   |   movea.l d0,a6
    4402:	   |   jsr -60(a6)
    4406:	   |   move.l d0,28(sp)
    440a:	   |   move.l 28(sp),d0
    440e:	   |   move.l d0,24(sp)
    4412:	   |   move.l #83246,20(sp)
    441a:	   |   moveq #76,d0
    441c:	   |   move.l d0,16(sp)
    4420:	   |   move.l 1678c <DOSBase>,d0
    4426:	   |   movea.l d0,a6
    4428:	   |   move.l 24(sp),d1
    442c:	   |   move.l 20(sp),d2
    4430:	   |   move.l 16(sp),d3
    4434:	   |   jsr -48(a6)
    4438:	   |   move.l d0,12(sp)
		return NULL;
    443c:	   |   moveq #0,d0
    443e:	/--|-- bra.w 44de <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    4442:	|  \-> move.l 1676c <bigDataFile>,64(sp)
    444a:	|      move.l 72(sp),d0
    444e:	|      add.l d0,d0
    4450:	|      add.l d0,d0
    4452:	|      move.l d0,d1
    4454:	|      move.l 16778 <startOfTextIndex>,d0
    445a:	|      add.l d1,d0
    445c:	|      move.l d0,60(sp)
    4460:	|      moveq #-1,d0
    4462:	|      move.l d0,56(sp)
    4466:	|      move.l 1678c <DOSBase>,d0
    446c:	|      movea.l d0,a6
    446e:	|      move.l 64(sp),d1
    4472:	|      move.l 60(sp),d2
    4476:	|      move.l 56(sp),d3
    447a:	|      jsr -66(a6)
    447e:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4482:	|      move.l 1676c <bigDataFile>,d0
    4488:	|      move.l d0,-(sp)
    448a:	|      jsr 718 <get4bytes>
    4490:	|      addq.l #4,sp
    4492:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4496:	|      move.l 1676c <bigDataFile>,48(sp)
    449e:	|      move.l 72(sp),44(sp)
    44a4:	|      moveq #-1,d0
    44a6:	|      move.l d0,40(sp)
    44aa:	|      move.l 1678c <DOSBase>,d0
    44b0:	|      movea.l d0,a6
    44b2:	|      move.l 48(sp),d1
    44b6:	|      move.l 44(sp),d2
    44ba:	|      move.l 40(sp),d3
    44be:	|      jsr -66(a6)
    44c2:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    44c6:	|      move.l 1676c <bigDataFile>,d0
    44cc:	|      move.l d0,-(sp)
    44ce:	|      jsr b02 <readString>
    44d4:	|      addq.l #4,sp
    44d6:	|      move.l d0,32(sp)
	
	return s;
    44da:	|      move.l 32(sp),d0
}
    44de:	\----> movem.l (sp)+,d2-d3/a6
    44e2:	       lea 56(sp),sp
    44e6:	       rts

000044e8 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    44e8:	       lea -32(sp),sp
    44ec:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    44f0:	       move.w 16128 <sliceBusy>,d0
    44f6:	   /-- beq.s 4512 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    44f8:	   |   pea 1457b <cursors.c.412ac4f3+0x21c>
    44fe:	   |   pea 14599 <cursors.c.412ac4f3+0x23a>
    4504:	   |   jsr 13046 <KPrintF>
    450a:	   |   addq.l #8,sp
		return 0;
    450c:	   |   moveq #0,d0
    450e:	/--|-- bra.w 45a6 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4512:	|  \-> move.l 1676c <bigDataFile>,40(sp)
    451a:	|      move.l 48(sp),d0
    451e:	|      add.l d0,d0
    4520:	|      add.l d0,d0
    4522:	|      move.l d0,d1
    4524:	|      move.l 16774 <startOfDataIndex>,d0
    452a:	|      add.l d1,d0
    452c:	|      move.l d0,36(sp)
    4530:	|      moveq #-1,d0
    4532:	|      move.l d0,32(sp)
    4536:	|      move.l 1678c <DOSBase>,d0
    453c:	|      movea.l d0,a6
    453e:	|      move.l 40(sp),d1
    4542:	|      move.l 36(sp),d2
    4546:	|      move.l 32(sp),d3
    454a:	|      jsr -66(a6)
    454e:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    4552:	|      move.l 1676c <bigDataFile>,24(sp)
    455a:	|      move.l 1676c <bigDataFile>,d0
    4560:	|      move.l d0,-(sp)
    4562:	|      jsr 718 <get4bytes>
    4568:	|      addq.l #4,sp
    456a:	|      move.l d0,20(sp)
    456e:	|      clr.l 16(sp)
    4572:	|      move.l 1678c <DOSBase>,d0
    4578:	|      movea.l d0,a6
    457a:	|      move.l 24(sp),d1
    457e:	|      move.l 20(sp),d2
    4582:	|      move.l 16(sp),d3
    4586:	|      jsr -66(a6)
    458a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    458e:	|      move.w #1,16128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4596:	|      move.l 1676c <bigDataFile>,d0
    459c:	|      move.l d0,-(sp)
    459e:	|      jsr 718 <get4bytes>
    45a4:	|      addq.l #4,sp
}
    45a6:	\----> movem.l (sp)+,d2-d3/a6
    45aa:	       lea 32(sp),sp
    45ae:	       rts

000045b0 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    45b0:	       lea -32(sp),sp
    45b4:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    45b8:	       move.w 16128 <sliceBusy>,d0
    45be:	   /-- beq.s 45da <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    45c0:	   |   pea 1457b <cursors.c.412ac4f3+0x21c>
    45c6:	   |   pea 14599 <cursors.c.412ac4f3+0x23a>
    45cc:	   |   jsr 13046 <KPrintF>
    45d2:	   |   addq.l #8,sp
        return FALSE;
    45d4:	   |   clr.w d0
    45d6:	/--|-- bra.w 4666 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    45da:	|  \-> move.l 1676c <bigDataFile>,40(sp)
    45e2:	|      move.l 48(sp),d0
    45e6:	|      add.l d0,d0
    45e8:	|      add.l d0,d0
    45ea:	|      move.l d0,d1
    45ec:	|      move.l 16780 <startOfObjectIndex>,d0
    45f2:	|      add.l d1,d0
    45f4:	|      move.l d0,36(sp)
    45f8:	|      moveq #-1,d0
    45fa:	|      move.l d0,32(sp)
    45fe:	|      move.l 1678c <DOSBase>,d0
    4604:	|      movea.l d0,a6
    4606:	|      move.l 40(sp),d1
    460a:	|      move.l 36(sp),d2
    460e:	|      move.l 32(sp),d3
    4612:	|      jsr -66(a6)
    4616:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    461a:	|      move.l 1676c <bigDataFile>,24(sp)
    4622:	|      move.l 1676c <bigDataFile>,d0
    4628:	|      move.l d0,-(sp)
    462a:	|      jsr 718 <get4bytes>
    4630:	|      addq.l #4,sp
    4632:	|      move.l d0,20(sp)
    4636:	|      moveq #-1,d0
    4638:	|      move.l d0,16(sp)
    463c:	|      move.l 1678c <DOSBase>,d0
    4642:	|      movea.l d0,a6
    4644:	|      move.l 24(sp),d1
    4648:	|      move.l 20(sp),d2
    464c:	|      move.l 16(sp),d3
    4650:	|      jsr -66(a6)
    4654:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    4658:	|      move.w #1,16128 <sliceBusy>
    4660:	|      move.w 16128 <sliceBusy>,d0
}
    4666:	\----> movem.l (sp)+,d2-d3/a6
    466a:	       lea 32(sp),sp
    466e:	       rts

00004670 <openSubSlice>:

BOOL openSubSlice (int num) {
    4670:	       lea -32(sp),sp
    4674:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4678:	       move.w 16128 <sliceBusy>,d0
    467e:	   /-- beq.s 469a <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4680:	   |   pea 1457b <cursors.c.412ac4f3+0x21c>
    4686:	   |   pea 14599 <cursors.c.412ac4f3+0x23a>
    468c:	   |   jsr 13046 <KPrintF>
    4692:	   |   addq.l #8,sp
		return FALSE;
    4694:	   |   clr.w d0
    4696:	/--|-- bra.w 4726 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    469a:	|  \-> move.l 1676c <bigDataFile>,40(sp)
    46a2:	|      move.l 48(sp),d0
    46a6:	|      add.l d0,d0
    46a8:	|      add.l d0,d0
    46aa:	|      move.l d0,d1
    46ac:	|      move.l 1677c <startOfSubIndex>,d0
    46b2:	|      add.l d1,d0
    46b4:	|      move.l d0,36(sp)
    46b8:	|      moveq #-1,d0
    46ba:	|      move.l d0,32(sp)
    46be:	|      move.l 1678c <DOSBase>,d0
    46c4:	|      movea.l d0,a6
    46c6:	|      move.l 40(sp),d1
    46ca:	|      move.l 36(sp),d2
    46ce:	|      move.l 32(sp),d3
    46d2:	|      jsr -66(a6)
    46d6:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    46da:	|      move.l 1676c <bigDataFile>,24(sp)
    46e2:	|      move.l 1676c <bigDataFile>,d0
    46e8:	|      move.l d0,-(sp)
    46ea:	|      jsr 718 <get4bytes>
    46f0:	|      addq.l #4,sp
    46f2:	|      move.l d0,20(sp)
    46f6:	|      moveq #-1,d0
    46f8:	|      move.l d0,16(sp)
    46fc:	|      move.l 1678c <DOSBase>,d0
    4702:	|      movea.l d0,a6
    4704:	|      move.l 24(sp),d1
    4708:	|      move.l 20(sp),d2
    470c:	|      move.l 16(sp),d3
    4710:	|      jsr -66(a6)
    4714:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4718:	|      move.w #1,16128 <sliceBusy>
    4720:	|      move.w 16128 <sliceBusy>,d0
}
    4726:	\----> movem.l (sp)+,d2-d3/a6
    472a:	       lea 32(sp),sp
    472e:	       rts

00004730 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4730:	       lea -180(sp),sp
    4734:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4738:	       tst.l 196(sp)
    473c:	/----- beq.s 477c <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    473e:	|      move.l 196(sp),1676c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4746:	|      move.l 196(sp),168(sp)
    474c:	|      clr.l 164(sp)
    4750:	|      clr.l 160(sp)
    4754:	|      move.l 1678c <DOSBase>,d0
    475a:	|      movea.l d0,a6
    475c:	|      move.l 168(sp),d1
    4760:	|      move.l 164(sp),d2
    4764:	|      move.l 160(sp),d3
    4768:	|      jsr -66(a6)
    476c:	|      move.l d0,156(sp)
    4770:	|      move.l 156(sp),d0
    4774:	|      move.l d0,16770 <startIndex>
    477a:	|  /-- bra.s 47b6 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    477c:	\--|-> move.l 1676c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4784:	   |   move.l 196(sp),184(sp)
    478a:	   |   move.l 16770 <startIndex>,d0
    4790:	   |   move.l d0,180(sp)
    4794:	   |   moveq #-1,d0
    4796:	   |   move.l d0,176(sp)
    479a:	   |   move.l 1678c <DOSBase>,d0
    47a0:	   |   movea.l d0,a6
    47a2:	   |   move.l 184(sp),d1
    47a6:	   |   move.l 180(sp),d2
    47aa:	   |   move.l 176(sp),d3
    47ae:	   |   jsr -66(a6)
    47b2:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    47b6:	   \-> clr.w 16128 <sliceBusy>

	if (skipBefore > numLanguages) {
    47bc:	       move.l 204(sp),d0
    47c0:	       cmp.l 200(sp),d0
    47c4:	   /-- bls.s 47d8 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    47c6:	   |   pea 145b3 <cursors.c.412ac4f3+0x254>
    47cc:	   |   jsr 13046 <KPrintF>
    47d2:	   |   addq.l #4,sp
		skipBefore = 0;
    47d4:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    47d8:	   \-> move.l 200(sp),d0
    47dc:	       sub.l 204(sp),d0
    47e0:	       move.l d0,188(sp)
	while (skipBefore) {
    47e4:	   /-- bra.s 4822 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    47e6:	/--|-> move.l 196(sp),24(sp)
    47ec:	|  |   move.l 196(sp),-(sp)
    47f0:	|  |   jsr 718 <get4bytes>
    47f6:	|  |   addq.l #4,sp
    47f8:	|  |   move.l d0,20(sp)
    47fc:	|  |   moveq #-1,d0
    47fe:	|  |   move.l d0,16(sp)
    4802:	|  |   move.l 1678c <DOSBase>,d0
    4808:	|  |   movea.l d0,a6
    480a:	|  |   move.l 24(sp),d1
    480e:	|  |   move.l 20(sp),d2
    4812:	|  |   move.l 16(sp),d3
    4816:	|  |   jsr -66(a6)
    481a:	|  |   move.l d0,12(sp)
		skipBefore --;
    481e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4822:	|  \-> tst.l 204(sp)
    4826:	\----- bne.s 47e6 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4828:	       move.l 196(sp),152(sp)
    482e:	       clr.l 148(sp)
    4832:	       clr.l 144(sp)
    4836:	       move.l 1678c <DOSBase>,d0
    483c:	       movea.l d0,a6
    483e:	       move.l 152(sp),d1
    4842:	       move.l 148(sp),d2
    4846:	       move.l 144(sp),d3
    484a:	       jsr -66(a6)
    484e:	       move.l d0,140(sp)
    4852:	       move.l 140(sp),d0
    4856:	       addq.l #4,d0
    4858:	       move.l d0,16778 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    485e:	       move.l 196(sp),136(sp)
    4864:	       move.l 196(sp),-(sp)
    4868:	       jsr 718 <get4bytes>
    486e:	       addq.l #4,sp
    4870:	       move.l d0,132(sp)
    4874:	       moveq #-1,d0
    4876:	       move.l d0,128(sp)
    487a:	       move.l 1678c <DOSBase>,d0
    4880:	       movea.l d0,a6
    4882:	       move.l 136(sp),d1
    4886:	       move.l 132(sp),d2
    488a:	       move.l 128(sp),d3
    488e:	       jsr -66(a6)
    4892:	       move.l d0,124(sp)

	while (skipAfter) {
    4896:	   /-- bra.s 48d4 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4898:	/--|-> move.l 196(sp),40(sp)
    489e:	|  |   move.l 196(sp),-(sp)
    48a2:	|  |   jsr 718 <get4bytes>
    48a8:	|  |   addq.l #4,sp
    48aa:	|  |   move.l d0,36(sp)
    48ae:	|  |   moveq #-1,d0
    48b0:	|  |   move.l d0,32(sp)
    48b4:	|  |   move.l 1678c <DOSBase>,d0
    48ba:	|  |   movea.l d0,a6
    48bc:	|  |   move.l 40(sp),d1
    48c0:	|  |   move.l 36(sp),d2
    48c4:	|  |   move.l 32(sp),d3
    48c8:	|  |   jsr -66(a6)
    48cc:	|  |   move.l d0,28(sp)
		skipAfter --;
    48d0:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    48d4:	|  \-> tst.l 188(sp)
    48d8:	\----- bne.s 4898 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    48da:	       move.l 196(sp),120(sp)
    48e0:	       clr.l 116(sp)
    48e4:	       clr.l 112(sp)
    48e8:	       move.l 1678c <DOSBase>,d0
    48ee:	       movea.l d0,a6
    48f0:	       move.l 120(sp),d1
    48f4:	       move.l 116(sp),d2
    48f8:	       move.l 112(sp),d3
    48fc:	       jsr -66(a6)
    4900:	       move.l d0,108(sp)
    4904:	       move.l 108(sp),d0
    4908:	       addq.l #4,d0
    490a:	       move.l d0,1677c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4910:	       move.l 196(sp),104(sp)
    4916:	       move.l 196(sp),-(sp)
    491a:	       jsr 718 <get4bytes>
    4920:	       addq.l #4,sp
    4922:	       move.l d0,100(sp)
    4926:	       clr.l 96(sp)
    492a:	       move.l 1678c <DOSBase>,d0
    4930:	       movea.l d0,a6
    4932:	       move.l 104(sp),d1
    4936:	       move.l 100(sp),d2
    493a:	       move.l 96(sp),d3
    493e:	       jsr -66(a6)
    4942:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4946:	       move.l 196(sp),88(sp)
    494c:	       clr.l 84(sp)
    4950:	       clr.l 80(sp)
    4954:	       move.l 1678c <DOSBase>,d0
    495a:	       movea.l d0,a6
    495c:	       move.l 88(sp),d1
    4960:	       move.l 84(sp),d2
    4964:	       move.l 80(sp),d3
    4968:	       jsr -66(a6)
    496c:	       move.l d0,76(sp)
    4970:	       move.l 76(sp),d0
    4974:	       addq.l #4,d0
    4976:	       move.l d0,16780 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    497c:	       move.l 196(sp),72(sp)
    4982:	       move.l 196(sp),-(sp)
    4986:	       jsr 718 <get4bytes>
    498c:	       addq.l #4,sp
    498e:	       move.l d0,68(sp)
    4992:	       clr.l 64(sp)
    4996:	       move.l 1678c <DOSBase>,d0
    499c:	       movea.l d0,a6
    499e:	       move.l 72(sp),d1
    49a2:	       move.l 68(sp),d2
    49a6:	       move.l 64(sp),d3
    49aa:	       jsr -66(a6)
    49ae:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    49b2:	       move.l 196(sp),56(sp)
    49b8:	       clr.l 52(sp)
    49bc:	       clr.l 48(sp)
    49c0:	       move.l 1678c <DOSBase>,d0
    49c6:	       movea.l d0,a6
    49c8:	       move.l 56(sp),d1
    49cc:	       move.l 52(sp),d2
    49d0:	       move.l 48(sp),d3
    49d4:	       jsr -66(a6)
    49d8:	       move.l d0,44(sp)
    49dc:	       move.l 44(sp),d0
    49e0:	       move.l d0,16774 <startOfDataIndex>
    49e6:	       nop
    49e8:	       movem.l (sp)+,d2-d3/a6
    49ec:	       lea 180(sp),sp
    49f0:	       rts

000049f2 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    49f2:	    lea -20(sp),sp
    49f6:	    move.l a6,-(sp)
    49f8:	    move.l d7,-(sp)
	APTR vbr = 0;
    49fa:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    49fe:	    move.w #20090,10(sp)
    4a04:	    move.w #2049,12(sp)
    4a0a:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4a10:	    movea.l 16784 <SysBase>,a0
    4a16:	    move.w 296(a0),d0
    4a1a:	    move.w d0,d0
    4a1c:	    andi.l #65535,d0
    4a22:	    moveq #1,d1
    4a24:	    and.l d1,d0
    4a26:	/-- beq.s 4a54 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4a28:	|   lea 28(sp),a0
    4a2c:	|   lea -18(a0),a0
    4a30:	|   move.l a0,20(sp)
    4a34:	|   move.l 16784 <SysBase>,d0
    4a3a:	|   movea.l d0,a6
    4a3c:	|   move.l 20(sp),d7
    4a40:	|   exg d7,a5
    4a42:	|   jsr -30(a6)
    4a46:	|   exg d7,a5
    4a48:	|   move.l d0,16(sp)
    4a4c:	|   move.l 16(sp),d0
    4a50:	|   move.l d0,24(sp)

	return vbr;
    4a54:	\-> move.l 24(sp),d0
}
    4a58:	    move.l (sp)+,d7
    4a5a:	    movea.l (sp)+,a6
    4a5c:	    lea 20(sp),sp
    4a60:	    rts

00004a62 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4a62:	movea.l 167aa <VBR>,a0
    4a68:	lea 108(a0),a0
    4a6c:	move.l 4(sp),(a0)
}
    4a70:	nop
    4a72:	rts

00004a74 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4a74:	movea.l 167aa <VBR>,a0
    4a7a:	move.l 108(a0),d0
}
    4a7e:	rts

00004a80 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4a80:	       subq.l #8,sp
    4a82:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    4a84:	       pea 145fc <cursors.c.412ac4f3+0x29d>
    4a8a:	       jsr 13046 <KPrintF>
    4a90:	       addq.l #4,sp
	Forbid();
    4a92:	       move.l 16784 <SysBase>,d0
    4a98:	       movea.l d0,a6
    4a9a:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    4a9e:	       pea 14614 <cursors.c.412ac4f3+0x2b5>
    4aa4:	       jsr 13046 <KPrintF>
    4aaa:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    4aac:	       movea.l 16788 <custom>,a0
    4ab2:	       move.w 16(a0),d0
    4ab6:	       move.w d0,167a8 <SystemADKCON>
	SystemInts=custom->intenar;
    4abc:	       movea.l 16788 <custom>,a0
    4ac2:	       move.w 28(a0),d0
    4ac6:	       move.w d0,167a4 <SystemInts>
	SystemDMA=custom->dmaconr;
    4acc:	       movea.l 16788 <custom>,a0
    4ad2:	       move.w 2(a0),d0
    4ad6:	       move.w d0,167a6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4adc:	       movea.l 16790 <GfxBase>,a0
    4ae2:	       move.l 34(a0),d0
    4ae6:	       move.l d0,167b2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    4aec:	       pea 14632 <cursors.c.412ac4f3+0x2d3>
    4af2:	       jsr 13046 <KPrintF>
    4af8:	       addq.l #4,sp
	LoadView(0);
    4afa:	       clr.l 4(sp)
    4afe:	       move.l 16790 <GfxBase>,d0
    4b04:	       movea.l d0,a6
    4b06:	       movea.l 4(sp),a1
    4b0a:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    4b0e:	       pea 14648 <cursors.c.412ac4f3+0x2e9>
    4b14:	       jsr 13046 <KPrintF>
    4b1a:	       addq.l #4,sp
	WaitTOF();
    4b1c:	       move.l 16790 <GfxBase>,d0
    4b22:	       movea.l d0,a6
    4b24:	       jsr -270(a6)
	WaitTOF();
    4b28:	       move.l 16790 <GfxBase>,d0
    4b2e:	       movea.l d0,a6
    4b30:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    4b34:	       pea 1465d <cursors.c.412ac4f3+0x2fe>
    4b3a:	       jsr 13046 <KPrintF>
    4b40:	       addq.l #4,sp
	WaitVbl();
    4b42:	       jsr 12f7a <WaitVbl>
	WaitVbl();
    4b48:	       jsr 12f7a <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    4b4e:	       pea 14672 <cursors.c.412ac4f3+0x313>
    4b54:	       jsr 13046 <KPrintF>
    4b5a:	       addq.l #4,sp
	OwnBlitter();
    4b5c:	       move.l 16790 <GfxBase>,d0
    4b62:	       movea.l d0,a6
    4b64:	       jsr -456(a6)
	WaitBlit();	
    4b68:	       move.l 16790 <GfxBase>,d0
    4b6e:	       movea.l d0,a6
    4b70:	       jsr -228(a6)
	Disable();
    4b74:	       move.l 16784 <SysBase>,d0
    4b7a:	       movea.l d0,a6
    4b7c:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    4b80:	       pea 14693 <thumbnail.c.7eb31449+0x17>
    4b86:	       jsr 13046 <KPrintF>
    4b8c:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    4b8e:	       movea.l 16788 <custom>,a0
    4b94:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    4b9a:	       pea 146aa <thumbnail.c.7eb31449+0x2e>
    4ba0:	       jsr 13046 <KPrintF>
    4ba6:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    4ba8:	       clr.l 8(sp)
    4bac:	   /-- bra.s 4bca <TakeSystem+0x14a>
		custom->color[a]=0;
    4bae:	/--|-> movea.l 16788 <custom>,a0
    4bb4:	|  |   move.l 8(sp),d0
    4bb8:	|  |   addi.l #192,d0
    4bbe:	|  |   add.l d0,d0
    4bc0:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4bc6:	|  |   addq.l #1,8(sp)
    4bca:	|  \-> moveq #31,d0
    4bcc:	|      cmp.l 8(sp),d0
    4bd0:	\----- bge.s 4bae <TakeSystem+0x12e>

	WaitVbl();
    4bd2:	       jsr 12f7a <WaitVbl>
	WaitVbl();
    4bd8:	       jsr 12f7a <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    4bde:	       pea 146cf <thumbnail.c.7eb31449+0x53>
    4be4:	       jsr 13046 <KPrintF>
    4bea:	       addq.l #4,sp
	VBR=GetVBR();
    4bec:	       jsr 49f2 <GetVBR>
    4bf2:	       move.l d0,167aa <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4bf8:	       jsr 4a74 <GetInterruptHandler>
    4bfe:	       move.l d0,167ae <SystemIrq>
}
    4c04:	       nop
    4c06:	       movea.l (sp)+,a6
    4c08:	       addq.l #8,sp
    4c0a:	       rts

00004c0c <FreeSystem>:

void FreeSystem() { 
    4c0c:	subq.l #4,sp
    4c0e:	move.l a6,-(sp)
	WaitVbl();
    4c10:	jsr 12f7a <WaitVbl>
	WaitBlit();
    4c16:	move.l 16790 <GfxBase>,d0
    4c1c:	movea.l d0,a6
    4c1e:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4c22:	movea.l 16788 <custom>,a0
    4c28:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4c2e:	movea.l 16788 <custom>,a0
    4c34:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4c3a:	movea.l 16788 <custom>,a0
    4c40:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4c46:	move.l 167ae <SystemIrq>,d0
    4c4c:	move.l d0,-(sp)
    4c4e:	jsr 4a62 <SetInterruptHandler>
    4c54:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4c56:	movea.l 16790 <GfxBase>,a0
    4c5c:	move.l 38(a0),d0
    4c60:	movea.l 16788 <custom>,a0
    4c66:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4c6a:	movea.l 16790 <GfxBase>,a0
    4c70:	move.l 50(a0),d0
    4c74:	movea.l 16788 <custom>,a0
    4c7a:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4c7e:	movea.l 16788 <custom>,a0
    4c84:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4c8a:	move.w 167a6 <SystemDMA>,d0
    4c90:	movea.l 16788 <custom>,a0
    4c96:	ori.w #-32768,d0
    4c9a:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4c9e:	move.w 167a8 <SystemADKCON>,d0
    4ca4:	movea.l 16788 <custom>,a0
    4caa:	ori.w #-32768,d0
    4cae:	move.w d0,158(a0)

	WaitBlit();	
    4cb2:	move.l 16790 <GfxBase>,d0
    4cb8:	movea.l d0,a6
    4cba:	jsr -228(a6)
	DisownBlitter();
    4cbe:	move.l 16790 <GfxBase>,d0
    4cc4:	movea.l d0,a6
    4cc6:	jsr -462(a6)
	Enable();
    4cca:	move.l 16784 <SysBase>,d0
    4cd0:	movea.l d0,a6
    4cd2:	jsr -126(a6)

	LoadView(ActiView);
    4cd6:	move.l 167b2 <ActiView>,4(sp)
    4cde:	move.l 16790 <GfxBase>,d0
    4ce4:	movea.l d0,a6
    4ce6:	movea.l 4(sp),a1
    4cea:	jsr -222(a6)
	WaitTOF();
    4cee:	move.l 16790 <GfxBase>,d0
    4cf4:	movea.l d0,a6
    4cf6:	jsr -270(a6)
	WaitTOF();
    4cfa:	move.l 16790 <GfxBase>,d0
    4d00:	movea.l d0,a6
    4d02:	jsr -270(a6)

	Permit();
    4d06:	move.l 16784 <SysBase>,d0
    4d0c:	movea.l d0,a6
    4d0e:	jsr -138(a6)
}
    4d12:	nop
    4d14:	movea.l (sp)+,a6
    4d16:	addq.l #4,sp
    4d18:	rts

00004d1a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4d1a:	    lea -128(sp),sp
    4d1e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4d22:	    movea.w #4,a0
    4d26:	    move.l (a0),d0
    4d28:	    move.l d0,16784 <SysBase>
	custom = (struct Custom*)0xdff000;	
    4d2e:	    move.l #14675968,16788 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4d38:	    move.l #83699,136(sp)
    4d40:	    clr.l 132(sp)
    4d44:	    move.l 16784 <SysBase>,d0
    4d4a:	    movea.l d0,a6
    4d4c:	    movea.l 136(sp),a1
    4d50:	    move.l 132(sp),d0
    4d54:	    jsr -552(a6)
    4d58:	    move.l d0,128(sp)
    4d5c:	    move.l 128(sp),d0
    4d60:	    move.l d0,16790 <GfxBase>
	if (!GfxBase)
    4d66:	    move.l 16790 <GfxBase>,d0
    4d6c:	/-- bne.s 4d82 <main+0x68>
		Exit(0);
    4d6e:	|   clr.l 124(sp)
    4d72:	|   move.l 1678c <DOSBase>,d0
    4d78:	|   movea.l d0,a6
    4d7a:	|   move.l 124(sp),d1
    4d7e:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4d82:	\-> move.l #83716,120(sp)
    4d8a:	    clr.l 116(sp)
    4d8e:	    move.l 16784 <SysBase>,d0
    4d94:	    movea.l d0,a6
    4d96:	    movea.l 120(sp),a1
    4d9a:	    move.l 116(sp),d0
    4d9e:	    jsr -552(a6)
    4da2:	    move.l d0,112(sp)
    4da6:	    move.l 112(sp),d0
    4daa:	    move.l d0,1678c <DOSBase>
	if (!DOSBase)
    4db0:	    move.l 1678c <DOSBase>,d0
    4db6:	/-- bne.s 4dcc <main+0xb2>
		Exit(0);
    4db8:	|   clr.l 108(sp)
    4dbc:	|   move.l 1678c <DOSBase>,d0
    4dc2:	|   movea.l d0,a6
    4dc4:	|   move.l 108(sp),d1
    4dc8:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4dcc:	\-> move.l #83728,104(sp)
    4dd4:	    clr.l 100(sp)
    4dd8:	    move.l 16784 <SysBase>,d0
    4dde:	    movea.l d0,a6
    4de0:	    movea.l 104(sp),a1
    4de4:	    move.l 100(sp),d0
    4de8:	    jsr -552(a6)
    4dec:	    move.l d0,96(sp)
    4df0:	    move.l 96(sp),d0
    4df4:	    move.l d0,16794 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4dfa:	    move.l 16794 <MathIeeeSingBasBase>,d0
    4e00:	/-- bne.s 4e16 <main+0xfc>
		Exit(0);	
    4e02:	|   clr.l 92(sp)
    4e06:	|   move.l 1678c <DOSBase>,d0
    4e0c:	|   movea.l d0,a6
    4e0e:	|   move.l 92(sp),d1
    4e12:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    4e16:	\-> move.l #83752,88(sp)
    4e1e:	    clr.l 84(sp)
    4e22:	    move.l 16784 <SysBase>,d0
    4e28:	    movea.l d0,a6
    4e2a:	    movea.l 88(sp),a1
    4e2e:	    move.l 84(sp),d0
    4e32:	    jsr -552(a6)
    4e36:	    move.l d0,80(sp)
    4e3a:	    move.l 80(sp),d0
    4e3e:	    move.l d0,16798 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4e44:	    move.l 16798 <MathIeeeSingTransBase>,d0
    4e4a:	/-- bne.s 4e60 <main+0x146>
		Exit(0);
    4e4c:	|   clr.l 76(sp)
    4e50:	|   move.l 1678c <DOSBase>,d0
    4e56:	|   movea.l d0,a6
    4e58:	|   move.l 76(sp),d1
    4e5c:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4e60:	\-> move.l #83778,72(sp)
    4e68:	    clr.l 68(sp)
    4e6c:	    move.l 16784 <SysBase>,d0
    4e72:	    movea.l d0,a6
    4e74:	    movea.l 72(sp),a1
    4e78:	    move.l 68(sp),d0
    4e7c:	    jsr -552(a6)
    4e80:	    move.l d0,64(sp)
    4e84:	    move.l 64(sp),d0
    4e88:	    move.l d0,167a0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4e8e:	    move.l 167a0 <MathIeeeDoubTransBase>,d0
    4e94:	/-- bne.s 4eaa <main+0x190>
		Exit(0);
    4e96:	|   clr.l 60(sp)
    4e9a:	|   move.l 1678c <DOSBase>,d0
    4ea0:	|   movea.l d0,a6
    4ea2:	|   move.l 60(sp),d1
    4ea6:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4eaa:	\-> move.l #83804,56(sp)
    4eb2:	    clr.l 52(sp)
    4eb6:	    move.l 16784 <SysBase>,d0
    4ebc:	    movea.l d0,a6
    4ebe:	    movea.l 56(sp),a1
    4ec2:	    move.l 52(sp),d0
    4ec6:	    jsr -552(a6)
    4eca:	    move.l d0,48(sp)
    4ece:	    move.l 48(sp),d0
    4ed2:	    move.l d0,1679c <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4ed8:	    move.l 1679c <MathIeeeDoubBasBase>,d0
    4ede:	/-- bne.s 4ef4 <main+0x1da>
		Exit(0);
    4ee0:	|   clr.l 44(sp)
    4ee4:	|   move.l 1678c <DOSBase>,d0
    4eea:	|   movea.l d0,a6
    4eec:	|   move.l 44(sp),d1
    4ef0:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    4ef4:	\-> pea 14774 <thumbnail.c.7eb31449+0xf8>
    4efa:	    jsr 13046 <KPrintF>
    4f00:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    4f02:	    move.l 1678c <DOSBase>,d0
    4f08:	    movea.l d0,a6
    4f0a:	    jsr -60(a6)
    4f0e:	    move.l d0,40(sp)
    4f12:	    move.l 40(sp),d0
    4f16:	    move.l d0,36(sp)
    4f1a:	    move.l #83856,32(sp)
    4f22:	    moveq #15,d0
    4f24:	    move.l d0,28(sp)
    4f28:	    move.l 1678c <DOSBase>,d0
    4f2e:	    movea.l d0,a6
    4f30:	    move.l 36(sp),d1
    4f34:	    move.l 32(sp),d2
    4f38:	    move.l 28(sp),d3
    4f3c:	    jsr -48(a6)
    4f40:	    move.l d0,24(sp)
	Delay(50);
    4f44:	    moveq #50,d0
    4f46:	    move.l d0,20(sp)
    4f4a:	    move.l 1678c <DOSBase>,d0
    4f50:	    movea.l d0,a6
    4f52:	    move.l 20(sp),d1
    4f56:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    4f5a:	    pea 147a0 <thumbnail.c.7eb31449+0x124>
    4f60:	    jsr 13046 <KPrintF>
    4f66:	    addq.l #4,sp
	TakeSystem();
    4f68:	    jsr 4a80 <TakeSystem>
	KPrintF("System Taken\n");
    4f6e:	    pea 147af <thumbnail.c.7eb31449+0x133>
    4f74:	    jsr 13046 <KPrintF>
    4f7a:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    4f7c:	    movea.l 16788 <custom>,a0
    4f82:	    move.w #-30721,150(a0)
	WaitVbl();
    4f88:	    jsr 12f7a <WaitVbl>

	KPrintF("Starting main_sludge\n");
    4f8e:	    pea 147bd <custom.c.9a493ead+0xd>
    4f94:	    jsr 13046 <KPrintF>
    4f9a:	    addq.l #4,sp
	main_sludge(argc, argv);	
    4f9c:	    move.l 148(sp),-(sp)
    4fa0:	    move.l 148(sp),-(sp)
    4fa4:	    jsr 1b94 <main_sludge>
    4faa:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    4fac:	    jsr 4c0c <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    4fb2:	    move.l 1678c <DOSBase>,16(sp)
    4fba:	    move.l 16784 <SysBase>,d0
    4fc0:	    movea.l d0,a6
    4fc2:	    movea.l 16(sp),a1
    4fc6:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    4fca:	    move.l 16790 <GfxBase>,12(sp)
    4fd2:	    move.l 16784 <SysBase>,d0
    4fd8:	    movea.l d0,a6
    4fda:	    movea.l 12(sp),a1
    4fde:	    jsr -414(a6)
    4fe2:	    moveq #0,d0
}
    4fe4:	    movem.l (sp)+,d2-d3/a6
    4fe8:	    lea 128(sp),sp
    4fec:	    rts

00004fee <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    4fee:	    lea -16(sp),sp
    4ff2:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    4ff4:	    moveq #8,d0
    4ff6:	    move.l d0,16(sp)
    4ffa:	    clr.l 12(sp)
    4ffe:	    move.l 16784 <SysBase>,d0
    5004:	    movea.l d0,a6
    5006:	    move.l 16(sp),d0
    500a:	    move.l 12(sp),d1
    500e:	    jsr -684(a6)
    5012:	    move.l d0,8(sp)
    5016:	    move.l 8(sp),d0
    501a:	    move.l d0,4(sp)
	if (!newStat) {
    501e:	/-- bne.s 504e <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    5020:	|   movea.l 1612a <nowStatus>,a0
    5026:	|   move.l (a0),d0
    5028:	|   movea.l 4(sp),a0
    502c:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    5030:	|   pea 14220 <PutChar+0x8b2>
    5036:	|   jsr b8 <copyString>
    503c:	|   addq.l #4,sp
    503e:	|   movea.l 4(sp),a0
    5042:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    5044:	|   movea.l 1612a <nowStatus>,a0
    504a:	|   move.l 4(sp),(a0)
	}
}
    504e:	\-> nop
    5050:	    movea.l (sp)+,a6
    5052:	    lea 16(sp),sp
    5056:	    rts

00005058 <clearStatusBar>:

void clearStatusBar () {
    5058:	       lea -16(sp),sp
    505c:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    505e:	       movea.l 1612a <nowStatus>,a0
    5064:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    5068:	       movea.l 1612a <nowStatus>,a0
    506e:	       moveq #-1,d0
    5070:	       move.l d0,6(a0)
	while (stat) {
    5074:	   /-- bra.s 50b4 <clearStatusBar+0x5c>
		kill = stat;
    5076:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    507c:	|  |   movea.l 16(sp),a0
    5080:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5086:	|  |   movea.l 12(sp),a0
    508a:	|  |   move.l (a0),8(sp)
    508e:	|  |   move.l 16784 <SysBase>,d0
    5094:	|  |   movea.l d0,a6
    5096:	|  |   movea.l 8(sp),a1
    509a:	|  |   jsr -690(a6)
		FreeVec(kill);
    509e:	|  |   move.l 12(sp),4(sp)
    50a4:	|  |   move.l 16784 <SysBase>,d0
    50aa:	|  |   movea.l d0,a6
    50ac:	|  |   movea.l 4(sp),a1
    50b0:	|  |   jsr -690(a6)
	while (stat) {
    50b4:	|  \-> tst.l 16(sp)
    50b8:	\----- bne.s 5076 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    50ba:	       movea.l 1612a <nowStatus>,a0
    50c0:	       clr.l (a0)
}
    50c2:	       nop
    50c4:	       movea.l (sp)+,a6
    50c6:	       lea 16(sp),sp
    50ca:	       rts

000050cc <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    50cc:	clr.l 167b6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    50d2:	move.w #-1,167ba <mainStatus+0x4>
	mainStatus.litStatus = -1;
    50da:	moveq #-1,d0
    50dc:	move.l d0,167bc <mainStatus+0x6>
	mainStatus.statusX = 10;
    50e2:	moveq #10,d0
    50e4:	move.l d0,167c0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    50ea:	movea.l 166e0 <winHeight>,a0
    50f0:	lea -15(a0),a0
    50f4:	move.l a0,d0
    50f6:	move.l d0,167c4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    50fc:	nop
    50fe:	rts

00005100 <killLastStatus>:

void killLastStatus () {
    5100:	    lea -12(sp),sp
    5104:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    5106:	    movea.l 1612a <nowStatus>,a0
    510c:	    move.l (a0),d0
    510e:	/-- beq.s 5158 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    5110:	|   movea.l 1612a <nowStatus>,a0
    5116:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    511a:	|   movea.l 1612a <nowStatus>,a0
    5120:	|   movea.l 12(sp),a1
    5124:	|   move.l 4(a1),d0
    5128:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    512a:	|   movea.l 12(sp),a0
    512e:	|   move.l (a0),8(sp)
    5132:	|   move.l 16784 <SysBase>,d0
    5138:	|   movea.l d0,a6
    513a:	|   movea.l 8(sp),a1
    513e:	|   jsr -690(a6)
		FreeVec(kill);
    5142:	|   move.l 12(sp),4(sp)
    5148:	|   move.l 16784 <SysBase>,d0
    514e:	|   movea.l d0,a6
    5150:	|   movea.l 4(sp),a1
    5154:	|   jsr -690(a6)
	}
}
    5158:	\-> nop
    515a:	    movea.l (sp)+,a6
    515c:	    lea 12(sp),sp
    5160:	    rts

00005162 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    5162:	movea.l 1612a <nowStatus>,a0
    5168:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    516e:	movea.l 1612a <nowStatus>,a0
    5174:	move.l 8(sp),14(a0)
}
    517a:	nop
    517c:	rts

0000517e <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    517e:	       lea -100(sp),sp
    5182:	       move.l a6,-(sp)
    5184:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5186:	       movea.l 1612a <nowStatus>,a0
    518c:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5190:	       movea.l 1612a <nowStatus>,a0
    5196:	       move.w 4(a0),d0
    519a:	       move.w d0,d0
    519c:	       andi.l #65535,d0
    51a2:	       move.l 112(sp),-(sp)
    51a6:	       move.l d0,-(sp)
    51a8:	       jsr 8d0 <put2bytes>
    51ae:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    51b0:	       movea.l 1612a <nowStatus>,a0
    51b6:	       move.l 6(a0),d0
    51ba:	       move.l d0,d0
    51bc:	       movea.w d0,a0
    51be:	       move.l 112(sp),-(sp)
    51c2:	       move.l a0,-(sp)
    51c4:	       jsr a9c <putSigned>
    51ca:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    51cc:	       movea.l 1612a <nowStatus>,a0
    51d2:	       move.l 10(a0),d0
    51d6:	       move.l 112(sp),-(sp)
    51da:	       move.l d0,-(sp)
    51dc:	       jsr 8d0 <put2bytes>
    51e2:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    51e4:	       movea.l 1612a <nowStatus>,a0
    51ea:	       move.l 14(a0),d0
    51ee:	       move.l 112(sp),-(sp)
    51f2:	       move.l d0,-(sp)
    51f4:	       jsr 8d0 <put2bytes>
    51fa:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    51fc:	       move.l 112(sp),100(sp)
    5202:	       movea.l 1612a <nowStatus>,a0
    5208:	       move.l 18(a0),96(sp)
    520e:	       move.l 1678c <DOSBase>,d0
    5214:	       movea.l d0,a6
    5216:	       move.l 100(sp),d1
    521a:	       move.l 96(sp),d2
    521e:	       jsr -312(a6)
    5222:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    5226:	       move.l 112(sp),88(sp)
    522c:	       movea.l 1612a <nowStatus>,a0
    5232:	       move.l 22(a0),84(sp)
    5238:	       move.l 1678c <DOSBase>,d0
    523e:	       movea.l d0,a6
    5240:	       move.l 88(sp),d1
    5244:	       move.l 84(sp),d2
    5248:	       jsr -312(a6)
    524c:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    5250:	       move.l 112(sp),76(sp)
    5256:	       movea.l 1612a <nowStatus>,a0
    525c:	       move.l 26(a0),72(sp)
    5262:	       move.l 1678c <DOSBase>,d0
    5268:	       movea.l d0,a6
    526a:	       move.l 76(sp),d1
    526e:	       move.l 72(sp),d2
    5272:	       jsr -312(a6)
    5276:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    527a:	       move.l 112(sp),64(sp)
    5280:	       movea.l 1612a <nowStatus>,a0
    5286:	       move.l 30(a0),60(sp)
    528c:	       move.l 1678c <DOSBase>,d0
    5292:	       movea.l d0,a6
    5294:	       move.l 64(sp),d1
    5298:	       move.l 60(sp),d2
    529c:	       jsr -312(a6)
    52a0:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    52a4:	       move.l 112(sp),52(sp)
    52aa:	       movea.l 1612a <nowStatus>,a0
    52b0:	       move.l 34(a0),48(sp)
    52b6:	       move.l 1678c <DOSBase>,d0
    52bc:	       movea.l d0,a6
    52be:	       move.l 52(sp),d1
    52c2:	       move.l 48(sp),d2
    52c6:	       jsr -312(a6)
    52ca:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    52ce:	       move.l 112(sp),40(sp)
    52d4:	       movea.l 1612a <nowStatus>,a0
    52da:	       move.l 38(a0),36(sp)
    52e0:	       move.l 1678c <DOSBase>,d0
    52e6:	       movea.l d0,a6
    52e8:	       move.l 40(sp),d1
    52ec:	       move.l 36(sp),d2
    52f0:	       jsr -312(a6)
    52f4:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    52f8:	   /-- bra.s 533c <saveStatusBars+0x1be>
		FPutC (fp,1);
    52fa:	/--|-> move.l 112(sp),16(sp)
    5300:	|  |   moveq #1,d0
    5302:	|  |   move.l d0,12(sp)
    5306:	|  |   move.l 1678c <DOSBase>,d0
    530c:	|  |   movea.l d0,a6
    530e:	|  |   move.l 16(sp),d1
    5312:	|  |   move.l 12(sp),d2
    5316:	|  |   jsr -312(a6)
    531a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    531e:	|  |   movea.l 104(sp),a0
    5322:	|  |   move.l (a0),d0
    5324:	|  |   move.l 112(sp),-(sp)
    5328:	|  |   move.l d0,-(sp)
    532a:	|  |   jsr bd8 <writeString>
    5330:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5332:	|  |   movea.l 104(sp),a0
    5336:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    533c:	|  \-> tst.l 104(sp)
    5340:	\----- bne.s 52fa <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5342:	       move.l 112(sp),28(sp)
    5348:	       clr.l 24(sp)
    534c:	       move.l 1678c <DOSBase>,d0
    5352:	       movea.l d0,a6
    5354:	       move.l 28(sp),d1
    5358:	       move.l 24(sp),d2
    535c:	       jsr -312(a6)
    5360:	       move.l d0,20(sp)
}
    5364:	       nop
    5366:	       move.l (sp)+,d2
    5368:	       movea.l (sp)+,a6
    536a:	       lea 100(sp),sp
    536e:	       rts

00005370 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5370:	movea.l 1612a <nowStatus>,a0
    5376:	move.l 4(sp),6(a0)
}
    537c:	nop
    537e:	rts

00005380 <setStatusBar>:

void setStatusBar (char * txt) {
    5380:	    subq.l #4,sp
    5382:	    move.l a6,-(sp)
    5384:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5386:	    movea.l 1612a <nowStatus>,a0
    538c:	    move.l (a0),d0
    538e:	/-- beq.s 53c2 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5390:	|   movea.l 1612a <nowStatus>,a0
    5396:	|   movea.l (a0),a0
    5398:	|   move.l (a0),8(sp)
    539c:	|   move.l 16784 <SysBase>,d0
    53a2:	|   movea.l d0,a6
    53a4:	|   movea.l 8(sp),a1
    53a8:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    53ac:	|   movea.l 1612a <nowStatus>,a0
    53b2:	|   movea.l (a0),a2
    53b4:	|   move.l 16(sp),-(sp)
    53b8:	|   jsr b8 <copyString>
    53be:	|   addq.l #4,sp
    53c0:	|   move.l d0,(a2)
	}
}
    53c2:	\-> nop
    53c4:	    movea.l (sp)+,a2
    53c6:	    movea.l (sp)+,a6
    53c8:	    addq.l #4,sp
    53ca:	    rts

000053cc <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    53cc:	       movea.l 1612a <nowStatus>,a0
    53d2:	       move.l (a0),d0
    53d4:	/----- beq.s 53e2 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    53d6:	|      movea.l 1612a <nowStatus>,a0
    53dc:	|      movea.l (a0),a0
    53de:	|      move.l (a0),d0
    53e0:	|  /-- bra.s 53e8 <statusBarText+0x1c>
	} else {
		return "";
    53e2:	\--|-> move.l #82464,d0
	}
    53e8:	   \-> rts

000053ea <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    53ea:	       lea -28(sp),sp
    53ee:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    53f2:	       move.l 52(sp),-(sp)
    53f6:	       jsr 119dc <stringWidth>
    53fc:	       addq.l #4,sp
    53fe:	       asr.l #1,d0
    5400:	       move.l d0,-(sp)
    5402:	       jsr 132fe <__floatsisf>
    5408:	       addq.l #4,sp
    540a:	       move.l d0,d1
    540c:	       move.l 16142 <cameraZoom>,d0
    5412:	       move.l d0,-(sp)
    5414:	       move.l d1,-(sp)
    5416:	       jsr 131aa <__divsf3>
    541c:	       addq.l #8,sp
    541e:	       move.l d0,-(sp)
    5420:	       jsr 13296 <__fixsfsi>
    5426:	       addq.l #4,sp
    5428:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    542c:	       move.l 56(sp),d0
    5430:	       sub.l 44(sp),d0
    5434:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    5438:	       move.l 56(sp),d0
    543c:	       add.l 44(sp),d0
    5440:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    5444:	       moveq #12,d0
    5446:	       move.l d0,32(sp)
    544a:	       clr.l 28(sp)
    544e:	       move.l 16784 <SysBase>,d0
    5454:	       movea.l d0,a6
    5456:	       move.l 32(sp),d0
    545a:	       move.l 28(sp),d1
    545e:	       jsr -684(a6)
    5462:	       move.l d0,24(sp)
    5466:	       move.l 24(sp),d0
    546a:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    546e:	       movea.l 167e0 <speech>,a0
    5474:	       move.l 4(a0),d0
    5478:	       movea.l 20(sp),a0
    547c:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5480:	       move.l 52(sp),-(sp)
    5484:	       jsr b8 <copyString>
    548a:	       addq.l #4,sp
    548c:	       movea.l 20(sp),a0
    5490:	       move.l d0,(a0)
	newLine -> x = xx1;
    5492:	       movea.l 20(sp),a0
    5496:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    549c:	       movea.l 167e0 <speech>,a0
    54a2:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    54a8:	       moveq #4,d0
    54aa:	       cmp.l 40(sp),d0
    54ae:	   /-- blt.s 54d0 <addSpeechLine+0xe6>
    54b0:	   |   movea.l 60(sp),a0
    54b4:	   |   move.l (a0),d1
    54b6:	   |   moveq #5,d0
    54b8:	   |   sub.l 40(sp),d0
    54bc:	   |   cmp.l d1,d0
    54be:	   +-- ble.s 54d0 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    54c0:	   |   moveq #5,d0
    54c2:	   |   sub.l 40(sp),d0
    54c6:	   |   movea.l 60(sp),a0
    54ca:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    54cc:	/--|-- bra.w 55fc <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    54d0:	|  \-> move.l 36(sp),-(sp)
    54d4:	|      jsr 132fe <__floatsisf>
    54da:	|      addq.l #4,sp
    54dc:	|      move.l d0,d2
    54de:	|      move.l 166dc <winWidth>,d0
    54e4:	|      move.l d0,-(sp)
    54e6:	|      jsr 13326 <__floatunsisf>
    54ec:	|      addq.l #4,sp
    54ee:	|      move.l d0,d1
    54f0:	|      move.l 16142 <cameraZoom>,d0
    54f6:	|      move.l d0,-(sp)
    54f8:	|      move.l d1,-(sp)
    54fa:	|      jsr 131aa <__divsf3>
    5500:	|      addq.l #8,sp
    5502:	|      move.l #1084227584,-(sp)
    5508:	|      move.l d0,-(sp)
    550a:	|      jsr 135f2 <__subsf3>
    5510:	|      addq.l #8,sp
    5512:	|      move.l d0,-(sp)
    5514:	|      move.l d2,-(sp)
    5516:	|      jsr 133e6 <__gesf2>
    551c:	|      addq.l #8,sp
    551e:	|      tst.l d0
    5520:	|  /-- bge.s 5526 <addSpeechLine+0x13c>
}
    5522:	+--|-- bra.w 55fc <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5526:	|  \-> movea.l 60(sp),a0
    552a:	|      move.l (a0),d0
    552c:	|      move.l d0,-(sp)
    552e:	|      jsr 132fe <__floatsisf>
    5534:	|      addq.l #4,sp
    5536:	|      move.l d0,-(sp)
    5538:	|      jsr 13216 <__extendsfdf2>
    553e:	|      addq.l #4,sp
    5540:	|      move.l d0,d4
    5542:	|      move.l d1,d5
    5544:	|      move.l 166dc <winWidth>,d0
    554a:	|      move.l d0,-(sp)
    554c:	|      jsr 13326 <__floatunsisf>
    5552:	|      addq.l #4,sp
    5554:	|      move.l d0,d1
    5556:	|      move.l 16142 <cameraZoom>,d0
    555c:	|      move.l d0,-(sp)
    555e:	|      move.l d1,-(sp)
    5560:	|      jsr 131aa <__divsf3>
    5566:	|      addq.l #8,sp
    5568:	|      move.l d0,-(sp)
    556a:	|      jsr 13216 <__extendsfdf2>
    5570:	|      addq.l #4,sp
    5572:	|      clr.l -(sp)
    5574:	|      move.l #1075052544,-(sp)
    557a:	|      move.l d1,-(sp)
    557c:	|      move.l d0,-(sp)
    557e:	|      jsr 13590 <__subdf3>
    5584:	|      lea 16(sp),sp
    5588:	|      move.l d0,d2
    558a:	|      move.l d1,d3
    558c:	|      move.l 36(sp),-(sp)
    5590:	|      jsr 132be <__floatsidf>
    5596:	|      addq.l #4,sp
    5598:	|      move.l d1,-(sp)
    559a:	|      move.l d0,-(sp)
    559c:	|      move.l d3,-(sp)
    559e:	|      move.l d2,-(sp)
    55a0:	|      jsr 13590 <__subdf3>
    55a6:	|      lea 16(sp),sp
    55aa:	|      move.l d1,-(sp)
    55ac:	|      move.l d0,-(sp)
    55ae:	|      move.l d5,-(sp)
    55b0:	|      move.l d4,-(sp)
    55b2:	|      jsr 1341c <__gtdf2>
    55b8:	|      lea 16(sp),sp
    55bc:	|      tst.l d0
    55be:	|  /-- bgt.s 55c2 <addSpeechLine+0x1d8>
}
    55c0:	+--|-- bra.s 55fc <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    55c2:	|  \-> move.l 166dc <winWidth>,d0
    55c8:	|      move.l d0,-(sp)
    55ca:	|      jsr 13326 <__floatunsisf>
    55d0:	|      addq.l #4,sp
    55d2:	|      move.l d0,d1
    55d4:	|      move.l 16142 <cameraZoom>,d0
    55da:	|      move.l d0,-(sp)
    55dc:	|      move.l d1,-(sp)
    55de:	|      jsr 131aa <__divsf3>
    55e4:	|      addq.l #8,sp
    55e6:	|      move.l d0,-(sp)
    55e8:	|      jsr 13296 <__fixsfsi>
    55ee:	|      addq.l #4,sp
    55f0:	|      subq.l #5,d0
    55f2:	|      sub.l 36(sp),d0
    55f6:	|      movea.l 60(sp),a0
    55fa:	|      move.l d0,(a0)
}
    55fc:	\----> nop
    55fe:	       movem.l (sp)+,d2-d5/a6
    5602:	       lea 28(sp),sp
    5606:	       rts

00005608 <initSpeech>:


void initSpeech () {
    5608:	       lea -12(sp),sp
    560c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    560e:	       moveq #20,d0
    5610:	       move.l d0,12(sp)
    5614:	       clr.l 8(sp)
    5618:	       move.l 16784 <SysBase>,d0
    561e:	       movea.l d0,a6
    5620:	       move.l 12(sp),d0
    5624:	       move.l 8(sp),d1
    5628:	       jsr -684(a6)
    562c:	       move.l d0,4(sp)
    5630:	       move.l 4(sp),d0
    5634:	       move.l d0,167e0 <speech>
	if (speech) {
    563a:	       move.l 167e0 <speech>,d0
    5640:	/----- beq.s 566c <initSpeech+0x64>
		speech -> currentTalker = NULL;
    5642:	|      movea.l 167e0 <speech>,a0
    5648:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    564a:	|      movea.l 167e0 <speech>,a0
    5650:	|      clr.l 4(a0)
		speech -> speechY = 0;
    5654:	|      movea.l 167e0 <speech>,a0
    565a:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    565e:	|      movea.l 167e0 <speech>,a0
    5664:	|      moveq #-1,d0
    5666:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    566a:	|  /-- bra.s 567a <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    566c:	\--|-> pea 147fa <custom.c.9a493ead+0x4a>
    5672:	   |   jsr 13046 <KPrintF>
    5678:	   |   addq.l #4,sp
}
    567a:	   \-> nop
    567c:	       movea.l (sp)+,a6
    567e:	       lea 12(sp),sp
    5682:	       rts

00005684 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5684:	       movea.l 167e0 <speech>,a0
    568a:	       move.l 4(a0),d0
    568e:	/----- beq.s 569c <isThereAnySpeechGoingOn+0x18>
    5690:	|      movea.l 167e0 <speech>,a0
    5696:	|      move.l 16(a0),d0
    569a:	|  /-- bra.s 569e <isThereAnySpeechGoingOn+0x1a>
    569c:	\--|-> moveq #-1,d0
}
    569e:	   \-> rts

000056a0 <killAllSpeech>:

void killAllSpeech () {
    56a0:	       lea -12(sp),sp
    56a4:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    56a6:	       movea.l 167e0 <speech>,a0
    56ac:	       move.l 12(a0),d0
    56b0:	       moveq #-1,d1
    56b2:	       cmp.l d0,d1
    56b4:	   /-- beq.s 56c2 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    56b6:	   |   movea.l 167e0 <speech>,a0
    56bc:	   |   moveq #-1,d0
    56be:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    56c2:	   \-> movea.l 167e0 <speech>,a0
    56c8:	       move.l (a0),d0
    56ca:	/----- beq.w 5756 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    56ce:	|      movea.l 167e0 <speech>,a0
    56d4:	|      move.l (a0),d0
    56d6:	|      lea -120(sp),sp
    56da:	|      move.l sp,d1
    56dc:	|      movea.l d0,a0
    56de:	|      moveq #120,d0
    56e0:	|      move.l d0,-(sp)
    56e2:	|      move.l a0,-(sp)
    56e4:	|      move.l d1,-(sp)
    56e6:	|      jsr 12ffa <memcpy>
    56ec:	|      lea 12(sp),sp
    56f0:	|      jsr 76ee <makeSilent>
    56f6:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    56fa:	|      movea.l 167e0 <speech>,a0
    5700:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5702:	+----- bra.s 5756 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5704:	|  /-> movea.l 167e0 <speech>,a0
    570a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5710:	|  |   movea.l 167e0 <speech>,a0
    5716:	|  |   movea.l 4(a0),a1
    571a:	|  |   movea.l 167e0 <speech>,a0
    5720:	|  |   move.l 4(a1),d0
    5724:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5728:	|  |   movea.l 12(sp),a0
    572c:	|  |   move.l (a0),8(sp)
    5730:	|  |   move.l 16784 <SysBase>,d0
    5736:	|  |   movea.l d0,a6
    5738:	|  |   movea.l 8(sp),a1
    573c:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5740:	|  |   move.l 12(sp),4(sp)
    5746:	|  |   move.l 16784 <SysBase>,d0
    574c:	|  |   movea.l d0,a6
    574e:	|  |   movea.l 4(sp),a1
    5752:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5756:	\--|-> movea.l 167e0 <speech>,a0
    575c:	   |   move.l 4(a0),d0
    5760:	   \-- bne.s 5704 <killAllSpeech+0x64>
	}
}
    5762:	       nop
    5764:	       nop
    5766:	       movea.l (sp)+,a6
    5768:	       lea 12(sp),sp
    576c:	       rts

0000576e <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    576e:	pea 2 <_start+0x2>
    5772:	move.l 8(sp),-(sp)
    5776:	jsr 58ce <setFrames>
    577c:	addq.l #8,sp
}
    577e:	nop
    5780:	rts

00005782 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5782:	       lea -52(sp),sp
    5786:	       move.l a6,-(sp)
    5788:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    578a:	       movea.l 64(sp),a0
    578e:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5794:	       move.l 1612e <speechSpeed>,d0
    579a:	       move.l 68(sp),-(sp)
    579e:	       move.l d0,-(sp)
    57a0:	       jsr a46 <putFloat>
    57a6:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    57a8:	       movea.l 64(sp),a0
    57ac:	       move.l 8(a0),d0
    57b0:	       move.l 68(sp),-(sp)
    57b4:	       move.l d0,-(sp)
    57b6:	       jsr 8d0 <put2bytes>
    57bc:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    57be:	       movea.l 64(sp),a0
    57c2:	       move.l 16(a0),d0
    57c6:	       move.l 68(sp),-(sp)
    57ca:	       move.l d0,-(sp)
    57cc:	       jsr 8d0 <put2bytes>
    57d2:	       addq.l #8,sp
		if (sS -> currentTalker) {
    57d4:	       movea.l 64(sp),a0
    57d8:	       move.l (a0),d0
    57da:	   /-- beq.s 581e <saveSpeech+0x9c>
			FPutC (fp, 1);
    57dc:	   |   move.l 68(sp),40(sp)
    57e2:	   |   moveq #1,d0
    57e4:	   |   move.l d0,36(sp)
    57e8:	   |   move.l 1678c <DOSBase>,d0
    57ee:	   |   movea.l d0,a6
    57f0:	   |   move.l 40(sp),d1
    57f4:	   |   move.l 36(sp),d2
    57f8:	   |   jsr -312(a6)
    57fc:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5800:	   |   movea.l 64(sp),a0
    5804:	   |   movea.l (a0),a0
    5806:	   |   movea.l 102(a0),a0
    580a:	   |   move.l 4(a0),d0
    580e:	   |   move.l 68(sp),-(sp)
    5812:	   |   move.l d0,-(sp)
    5814:	   |   jsr 8d0 <put2bytes>
    581a:	   |   addq.l #8,sp
    581c:	/--|-- bra.s 589a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    581e:	|  \-> move.l 68(sp),52(sp)
    5824:	|      clr.l 48(sp)
    5828:	|      move.l 1678c <DOSBase>,d0
    582e:	|      movea.l d0,a6
    5830:	|      move.l 52(sp),d1
    5834:	|      move.l 48(sp),d2
    5838:	|      jsr -312(a6)
    583c:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5840:	+----- bra.s 589a <saveSpeech+0x118>
			FPutC (fp, 1);
    5842:	|  /-> move.l 68(sp),16(sp)
    5848:	|  |   moveq #1,d0
    584a:	|  |   move.l d0,12(sp)
    584e:	|  |   move.l 1678c <DOSBase>,d0
    5854:	|  |   movea.l d0,a6
    5856:	|  |   move.l 16(sp),d1
    585a:	|  |   move.l 12(sp),d2
    585e:	|  |   jsr -312(a6)
    5862:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5866:	|  |   movea.l 56(sp),a0
    586a:	|  |   move.l (a0),d0
    586c:	|  |   move.l 68(sp),-(sp)
    5870:	|  |   move.l d0,-(sp)
    5872:	|  |   jsr bd8 <writeString>
    5878:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    587a:	|  |   movea.l 56(sp),a0
    587e:	|  |   move.l 8(a0),d0
    5882:	|  |   move.l 68(sp),-(sp)
    5886:	|  |   move.l d0,-(sp)
    5888:	|  |   jsr 8d0 <put2bytes>
    588e:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5890:	|  |   movea.l 56(sp),a0
    5894:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    589a:	\--|-> tst.l 56(sp)
    589e:	   \-- bne.s 5842 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    58a0:	       move.l 68(sp),28(sp)
    58a6:	       clr.l 24(sp)
    58aa:	       move.l 1678c <DOSBase>,d0
    58b0:	       movea.l d0,a6
    58b2:	       move.l 28(sp),d1
    58b6:	       move.l 24(sp),d2
    58ba:	       jsr -312(a6)
    58be:	       move.l d0,20(sp)
}
    58c2:	       nop
    58c4:	       move.l (sp)+,d2
    58c6:	       movea.l (sp)+,a6
    58c8:	       lea 52(sp),sp
    58cc:	       rts

000058ce <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    58ce:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    58d0:	movea.l 8(sp),a0
    58d4:	movea.l 68(a0),a0
    58d8:	move.l (a0),d2
    58da:	movea.l 8(sp),a0
    58de:	movea.l 68(a0),a0
    58e2:	move.l 4(a0),d0
    58e6:	move.l 12(sp),-(sp)
    58ea:	move.l d0,-(sp)
    58ec:	jsr 13858 <__mulsi3>
    58f2:	addq.l #8,sp
    58f4:	move.l d0,d1
    58f6:	movea.l 8(sp),a0
    58fa:	move.l 94(a0),d0
    58fe:	add.l d1,d0
    5900:	add.l d0,d0
    5902:	add.l d0,d0
    5904:	movea.l d2,a0
    5906:	adda.l d0,a0
    5908:	move.l (a0),d0
    590a:	movea.l 8(sp),a0
    590e:	move.l d0,60(a0)
}
    5912:	nop
    5914:	move.l (sp)+,d2
    5916:	rts

00005918 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5918:	       lea -20(sp),sp
    591c:	       move.l d2,-(sp)
    591e:	       move.l 40(sp),d0
    5922:	       move.w d0,d0
    5924:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5928:	       movea.l 167e0 <speech>,a0
    592e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5934:	       move.l 32(sp),-(sp)
    5938:	       jsr 71d8 <findPerson>
    593e:	       addq.l #4,sp
    5940:	       move.l d0,16(sp)
    if (thisPerson) {
    5944:	   /-- beq.s 596a <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5946:	   |   movea.w 6(sp),a0
    594a:	   |   move.l a0,-(sp)
    594c:	   |   move.l 40(sp),-(sp)
    5950:	   |   move.l 24(sp),-(sp)
    5954:	   |   move.l 40(sp),-(sp)
    5958:	   |   jsr 5a30 <wrapSpeechPerson>
    595e:	   |   lea 16(sp),sp
    5962:	   |   move.l d0,20(sp)
    5966:	/--|-- bra.w 5a24 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    596a:	|  \-> move.l 32(sp),-(sp)
    596e:	|      jsr 11ac8 <getRegionForObject>
    5974:	|      addq.l #4,sp
    5976:	|      move.l d0,12(sp)
        if (thisRegion) {
    597a:	|  /-- beq.s 59e6 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    597c:	|  |   movea.l 12(sp),a0
    5980:	|  |   movea.l 28(a0),a0
    5984:	|  |   move.l 28(a0),d0
    5988:	|  |   movea.l 12(sp),a0
    598c:	|  |   movea.l 4(a0),a1
    5990:	|  |   movea.l 12(sp),a0
    5994:	|  |   movea.l 28(a0),a0
    5998:	|  |   move.l 20(a0),d1
    599c:	|  |   movea.l a1,a0
    599e:	|  |   suba.l d1,a0
    59a0:	|  |   move.l 16896 <cameraY>,d1
    59a6:	|  |   movea.l a0,a1
    59a8:	|  |   suba.l d1,a1
    59aa:	|  |   movea.l 12(sp),a0
    59ae:	|  |   move.l (a0),d2
    59b0:	|  |   movea.l 12(sp),a0
    59b4:	|  |   move.l 8(a0),d1
    59b8:	|  |   add.l d2,d1
    59ba:	|  |   move.l d1,d2
    59bc:	|  |   asr.l #1,d2
    59be:	|  |   move.l 16892 <cameraX>,d1
    59c4:	|  |   movea.l d2,a0
    59c6:	|  |   suba.l d1,a0
    59c8:	|  |   move.l 36(sp),-(sp)
    59cc:	|  |   move.l d0,-(sp)
    59ce:	|  |   move.l a1,-(sp)
    59d0:	|  |   move.l a0,-(sp)
    59d2:	|  |   move.l 44(sp),-(sp)
    59d6:	|  |   jsr 5b4e <wrapSpeechXY>
    59dc:	|  |   lea 20(sp),sp
    59e0:	|  |   move.l d0,20(sp)
    59e4:	+--|-- bra.s 5a24 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    59e6:	|  \-> move.l 32(sp),-(sp)
    59ea:	|      jsr 9e34 <findObjectType>
    59f0:	|      addq.l #4,sp
    59f2:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    59f6:	|      movea.l 8(sp),a0
    59fa:	|      move.l 28(a0),d1
    59fe:	|      move.l 166dc <winWidth>,d0
    5a04:	|      lsr.l #1,d0
    5a06:	|      move.l 36(sp),-(sp)
    5a0a:	|      move.l d1,-(sp)
    5a0c:	|      pea a <_start+0xa>
    5a10:	|      move.l d0,-(sp)
    5a12:	|      move.l 44(sp),-(sp)
    5a16:	|      jsr 5b4e <wrapSpeechXY>
    5a1c:	|      lea 20(sp),sp
    5a20:	|      move.l d0,20(sp)
        }
    }
    return i;
    5a24:	\----> move.l 20(sp),d0
}
    5a28:	       move.l (sp)+,d2
    5a2a:	       lea 20(sp),sp
    5a2e:	       rts

00005a30 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5a30:	    subq.l #8,sp
    5a32:	    movem.l d2-d4,-(sp)
    5a36:	    move.l 36(sp),d0
    5a3a:	    move.w d0,d0
    5a3c:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5a40:	    movea.l 28(sp),a0
    5a44:	    movea.l 102(a0),a0
    5a48:	    move.l 28(a0),d2
    5a4c:	    movea.l 28(sp),a0
    5a50:	    move.l 4(a0),d3
    5a54:	    move.l 16896 <cameraY>,d0
    5a5a:	    move.l d0,-(sp)
    5a5c:	    jsr 132fe <__floatsisf>
    5a62:	    addq.l #4,sp
    5a64:	    move.l d0,-(sp)
    5a66:	    move.l d3,-(sp)
    5a68:	    jsr 135f2 <__subsf3>
    5a6e:	    addq.l #8,sp
    5a70:	    move.l d0,d3
    5a72:	    movea.l 28(sp),a0
    5a76:	    move.l 20(a0),d4
    5a7a:	    movea.l 28(sp),a0
    5a7e:	    move.l 8(a0),d1
    5a82:	    movea.l 28(sp),a0
    5a86:	    move.l 12(a0),d0
    5a8a:	    sub.l d0,d1
    5a8c:	    move.l d1,-(sp)
    5a8e:	    jsr 132fe <__floatsisf>
    5a94:	    addq.l #4,sp
    5a96:	    move.l d0,-(sp)
    5a98:	    move.l d4,-(sp)
    5a9a:	    jsr 133b0 <__mulsf3>
    5aa0:	    addq.l #8,sp
    5aa2:	    move.l d0,-(sp)
    5aa4:	    move.l d3,-(sp)
    5aa6:	    jsr 135f2 <__subsf3>
    5aac:	    addq.l #8,sp
    5aae:	    move.l d0,d3
    5ab0:	    movea.l 28(sp),a0
    5ab4:	    movea.l 102(a0),a0
    5ab8:	    move.l 20(a0),d0
    5abc:	    move.l d0,-(sp)
    5abe:	    jsr 132fe <__floatsisf>
    5ac4:	    addq.l #4,sp
    5ac6:	    move.l d0,-(sp)
    5ac8:	    move.l d3,-(sp)
    5aca:	    jsr 135f2 <__subsf3>
    5ad0:	    addq.l #8,sp
    5ad2:	    move.l d0,-(sp)
    5ad4:	    jsr 13296 <__fixsfsi>
    5ada:	    addq.l #4,sp
    5adc:	    move.l d0,d4
    5ade:	    movea.l 28(sp),a0
    5ae2:	    move.l (a0),d3
    5ae4:	    move.l 16892 <cameraX>,d0
    5aea:	    move.l d0,-(sp)
    5aec:	    jsr 132fe <__floatsisf>
    5af2:	    addq.l #4,sp
    5af4:	    move.l d0,-(sp)
    5af6:	    move.l d3,-(sp)
    5af8:	    jsr 135f2 <__subsf3>
    5afe:	    addq.l #8,sp
    5b00:	    move.l d0,-(sp)
    5b02:	    jsr 13296 <__fixsfsi>
    5b08:	    addq.l #4,sp
    5b0a:	    move.l 32(sp),-(sp)
    5b0e:	    move.l d2,-(sp)
    5b10:	    move.l d4,-(sp)
    5b12:	    move.l d0,-(sp)
    5b14:	    move.l 40(sp),-(sp)
    5b18:	    jsr 5b4e <wrapSpeechXY>
    5b1e:	    lea 20(sp),sp
    5b22:	    move.l d0,16(sp)
	if (animPerson) {
    5b26:	    tst.w 14(sp)
    5b2a:	/-- beq.s 5b42 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5b2c:	|   move.l 28(sp),-(sp)
    5b30:	|   jsr 576e <makeTalker>
    5b36:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5b38:	|   movea.l 167e0 <speech>,a0
    5b3e:	|   move.l 28(sp),(a0)
	}
	return i;
    5b42:	\-> move.l 16(sp),d0
}
    5b46:	    movem.l (sp)+,d2-d4
    5b4a:	    addq.l #8,sp
    5b4c:	    rts

00005b4e <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5b4e:	                   lea -16(sp),sp
    5b52:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5b56:	                   clr.l 16(sp)
    killAllSpeech();
    5b5a:	                   jsr 56a0 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5b60:	                   move.l 36(sp),-(sp)
    5b64:	                   jsr 104ea <strlen>
    5b6a:	                   addq.l #4,sp
    5b6c:	                   movea.l d0,a0
    5b6e:	                   lea 20(a0),a0
    5b72:	                   move.l a0,-(sp)
    5b74:	                   jsr 13326 <__floatunsisf>
    5b7a:	                   addq.l #4,sp
    5b7c:	                   move.l d0,d1
    5b7e:	                   move.l 1612e <speechSpeed>,d0
    5b84:	                   move.l d0,-(sp)
    5b86:	                   move.l d1,-(sp)
    5b88:	                   jsr 133b0 <__mulsf3>
    5b8e:	                   addq.l #8,sp
    5b90:	                   move.l d0,-(sp)
    5b92:	                   jsr 13296 <__fixsfsi>
    5b98:	                   addq.l #4,sp
    5b9a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5b9e:	               /-- bgt.s 5ba6 <wrapSpeechXY+0x58>
    5ba0:	               |   moveq #1,d0
    5ba2:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5ba6:	               \-> moveq #-1,d1
    5ba8:	                   cmp.l 52(sp),d1
    5bac:	               /-- beq.s 5bec <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5bae:	               |   move.l 168a6 <speechMode>,d0
    5bb4:	               +-- ble.s 5bec <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5bb6:	               |   clr.l -(sp)
    5bb8:	               |   move.l 56(sp),-(sp)
    5bbc:	               |   jsr 9b0a <startSound>
    5bc2:	               |   addq.l #8,sp
    5bc4:	               |   tst.w d0
    5bc6:	               +-- beq.s 5bec <wrapSpeechXY+0x9e>
                speechTime = -10;
    5bc8:	               |   moveq #-10,d0
    5bca:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5bce:	               |   movea.l 167e0 <speech>,a0
    5bd4:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5bda:	               |   move.l 168a6 <speechMode>,d0
    5be0:	               |   moveq #2,d1
    5be2:	               |   cmp.l d0,d1
    5be4:	               +-- bne.s 5bec <wrapSpeechXY+0x9e>
    5be6:	               |   moveq #-10,d0
    5be8:	/--------------|-- bra.w 5e72 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5bec:	|              \-> movea.l 167e0 <speech>,a0
    5bf2:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5bf8:	|     /----------- bra.w 5cac <wrapSpeechXY+0x15e>
        a = wrap;
    5bfc:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5c02:	|  |  |        /-- bra.s 5c12 <wrapSpeechXY+0xc4>
            a--;
    5c04:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5c08:	|  |  |  |     +-- bne.s 5c12 <wrapSpeechXY+0xc4>
                a = wrap;
    5c0a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5c10:	|  |  |  |  /--|-- bra.s 5c24 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5c12:	|  |  |  |  |  \-> move.l 28(sp),d0
    5c16:	|  |  |  |  |      movea.l 36(sp),a0
    5c1a:	|  |  |  |  |      adda.l d0,a0
    5c1c:	|  |  |  |  |      move.b (a0),d0
    5c1e:	|  |  |  |  |      cmpi.b #32,d0
    5c22:	|  |  |  \--|----- bne.s 5c04 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5c24:	|  |  |     \----> move.l 28(sp),d0
    5c28:	|  |  |            movea.l 36(sp),a0
    5c2c:	|  |  |            adda.l d0,a0
    5c2e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5c30:	|  |  |            lea 16(sp),a0
    5c34:	|  |  |            move.l a0,-(sp)
    5c36:	|  |  |            move.l 44(sp),-(sp)
    5c3a:	|  |  |            move.l 44(sp),-(sp)
    5c3e:	|  |  |            jsr 53ea <addSpeechLine>
    5c44:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5c48:	|  |  |            move.l 28(sp),d0
    5c4c:	|  |  |            movea.l 36(sp),a0
    5c50:	|  |  |            adda.l d0,a0
    5c52:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5c56:	|  |  |            move.l 28(sp),d0
    5c5a:	|  |  |            addq.l #1,d0
    5c5c:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5c60:	|  |  |            move.l 44(sp),-(sp)
    5c64:	|  |  |            jsr 132fe <__floatsisf>
    5c6a:	|  |  |            addq.l #4,sp
    5c6c:	|  |  |            move.l d0,d2
    5c6e:	|  |  |            move.l 168cc <fontHeight>,d0
    5c74:	|  |  |            move.l d0,-(sp)
    5c76:	|  |  |            jsr 132fe <__floatsisf>
    5c7c:	|  |  |            addq.l #4,sp
    5c7e:	|  |  |            move.l d0,d1
    5c80:	|  |  |            move.l 16142 <cameraZoom>,d0
    5c86:	|  |  |            move.l d0,-(sp)
    5c88:	|  |  |            move.l d1,-(sp)
    5c8a:	|  |  |            jsr 131aa <__divsf3>
    5c90:	|  |  |            addq.l #8,sp
    5c92:	|  |  |            move.l d0,-(sp)
    5c94:	|  |  |            move.l d2,-(sp)
    5c96:	|  |  |            jsr 135f2 <__subsf3>
    5c9c:	|  |  |            addq.l #8,sp
    5c9e:	|  |  |            move.l d0,-(sp)
    5ca0:	|  |  |            jsr 13296 <__fixsfsi>
    5ca6:	|  |  |            addq.l #4,sp
    5ca8:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5cac:	|  |  \----------> move.l 36(sp),-(sp)
    5cb0:	|  |               jsr 104ea <strlen>
    5cb6:	|  |               addq.l #4,sp
    5cb8:	|  |               move.l d0,d1
    5cba:	|  |               move.l 48(sp),d0
    5cbe:	|  |               cmp.l d1,d0
    5cc0:	|  \-------------- bcs.w 5bfc <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5cc4:	|                  lea 16(sp),a0
    5cc8:	|                  move.l a0,-(sp)
    5cca:	|                  move.l 44(sp),-(sp)
    5cce:	|                  move.l 44(sp),-(sp)
    5cd2:	|                  jsr 53ea <addSpeechLine>
    5cd8:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5cdc:	|                  move.l 44(sp),-(sp)
    5ce0:	|                  jsr 132fe <__floatsisf>
    5ce6:	|                  addq.l #4,sp
    5ce8:	|                  move.l d0,d2
    5cea:	|                  move.l 168cc <fontHeight>,d0
    5cf0:	|                  move.l d0,-(sp)
    5cf2:	|                  jsr 132fe <__floatsisf>
    5cf8:	|                  addq.l #4,sp
    5cfa:	|                  move.l d0,d1
    5cfc:	|                  move.l 16142 <cameraZoom>,d0
    5d02:	|                  move.l d0,-(sp)
    5d04:	|                  move.l d1,-(sp)
    5d06:	|                  jsr 131aa <__divsf3>
    5d0c:	|                  addq.l #8,sp
    5d0e:	|                  move.l d0,-(sp)
    5d10:	|                  move.l d2,-(sp)
    5d12:	|                  jsr 135f2 <__subsf3>
    5d18:	|                  addq.l #8,sp
    5d1a:	|                  move.l d0,-(sp)
    5d1c:	|                  jsr 13296 <__fixsfsi>
    5d22:	|                  addq.l #4,sp
    5d24:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5d28:	|              /-- bpl.s 5d46 <wrapSpeechXY+0x1f8>
    5d2a:	|              |   movea.l 167e0 <speech>,a0
    5d30:	|              |   move.l 8(a0),d0
    5d34:	|              |   movea.l 167e0 <speech>,a0
    5d3a:	|              |   sub.l 44(sp),d0
    5d3e:	|              |   move.l d0,8(a0)
    5d42:	|           /--|-- bra.w 5e34 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5d46:	|           |  \-> movea.l 167e0 <speech>,a0
    5d4c:	|           |      move.l 8(a0),d0
    5d50:	|           |      move.l d0,-(sp)
    5d52:	|           |      jsr 132fe <__floatsisf>
    5d58:	|           |      addq.l #4,sp
    5d5a:	|           |      move.l d0,d2
    5d5c:	|           |      move.l 16896 <cameraY>,d0
    5d62:	|           |      move.l d0,-(sp)
    5d64:	|           |      jsr 132fe <__floatsisf>
    5d6a:	|           |      addq.l #4,sp
    5d6c:	|           |      move.l d0,d3
    5d6e:	|           |      move.l 166e0 <winHeight>,d4
    5d74:	|           |      move.l 168cc <fontHeight>,d0
    5d7a:	|           |      pea 3 <_start+0x3>
    5d7e:	|           |      move.l d0,-(sp)
    5d80:	|           |      jsr 138d6 <__divsi3>
    5d86:	|           |      addq.l #8,sp
    5d88:	|           |      move.l d4,d1
    5d8a:	|           |      sub.l d0,d1
    5d8c:	|           |      move.l d1,-(sp)
    5d8e:	|           |      jsr 13326 <__floatunsisf>
    5d94:	|           |      addq.l #4,sp
    5d96:	|           |      move.l d0,d1
    5d98:	|           |      move.l 16142 <cameraZoom>,d0
    5d9e:	|           |      move.l d0,-(sp)
    5da0:	|           |      move.l d1,-(sp)
    5da2:	|           |      jsr 131aa <__divsf3>
    5da8:	|           |      addq.l #8,sp
    5daa:	|           |      move.l d0,-(sp)
    5dac:	|           |      move.l d3,-(sp)
    5dae:	|           |      jsr 130b0 <__addsf3>
    5db4:	|           |      addq.l #8,sp
    5db6:	|           |      move.l d0,-(sp)
    5db8:	|           |      move.l d2,-(sp)
    5dba:	|           |      jsr 1346a <__gtsf2>
    5dc0:	|           |      addq.l #8,sp
    5dc2:	|           |      tst.l d0
    5dc4:	|           +----- ble.s 5e34 <wrapSpeechXY+0x2e6>
    5dc6:	|           |      move.l 16896 <cameraY>,d0
    5dcc:	|           |      move.l d0,-(sp)
    5dce:	|           |      jsr 132fe <__floatsisf>
    5dd4:	|           |      addq.l #4,sp
    5dd6:	|           |      move.l d0,d2
    5dd8:	|           |      move.l 166e0 <winHeight>,d3
    5dde:	|           |      move.l 168cc <fontHeight>,d0
    5de4:	|           |      pea 3 <_start+0x3>
    5de8:	|           |      move.l d0,-(sp)
    5dea:	|           |      jsr 138d6 <__divsi3>
    5df0:	|           |      addq.l #8,sp
    5df2:	|           |      move.l d3,d1
    5df4:	|           |      sub.l d0,d1
    5df6:	|           |      move.l d1,-(sp)
    5df8:	|           |      jsr 13326 <__floatunsisf>
    5dfe:	|           |      addq.l #4,sp
    5e00:	|           |      move.l d0,d1
    5e02:	|           |      move.l 16142 <cameraZoom>,d0
    5e08:	|           |      move.l d0,-(sp)
    5e0a:	|           |      move.l d1,-(sp)
    5e0c:	|           |      jsr 131aa <__divsf3>
    5e12:	|           |      addq.l #8,sp
    5e14:	|           |      move.l d0,-(sp)
    5e16:	|           |      move.l d2,-(sp)
    5e18:	|           |      jsr 130b0 <__addsf3>
    5e1e:	|           |      addq.l #8,sp
    5e20:	|           |      movea.l 167e0 <speech>,a2
    5e26:	|           |      move.l d0,-(sp)
    5e28:	|           |      jsr 13296 <__fixsfsi>
    5e2e:	|           |      addq.l #4,sp
    5e30:	|           |      move.l d0,8(a2)

    if (offset) {
    5e34:	|           \----> move.l 16(sp),d0
    5e38:	|        /-------- beq.s 5e6e <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5e3a:	|        |         movea.l 167e0 <speech>,a0
    5e40:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5e46:	|        |     /-- bra.s 5e68 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5e48:	|        |  /--|-> movea.l 20(sp),a0
    5e4c:	|        |  |  |   move.l 8(a0),d1
    5e50:	|        |  |  |   move.l 16(sp),d0
    5e54:	|        |  |  |   add.l d1,d0
    5e56:	|        |  |  |   movea.l 20(sp),a0
    5e5a:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5e5e:	|        |  |  |   movea.l 20(sp),a0
    5e62:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5e68:	|        |  |  \-> tst.l 20(sp)
    5e6c:	|        |  \----- bne.s 5e48 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5e6e:	|        \-------> move.l 24(sp),d0
}
    5e72:	\----------------> movem.l (sp)+,d2-d4/a2
    5e76:	                   lea 16(sp),sp
    5e7a:	                   rts

00005e7c <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    5e7c:	    subq.l #4,sp
    5e7e:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    5e80:	    move.l 16834 <line.c.05397aaf+0x40>,d0
    5e86:	/-- beq.s 5ebe <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    5e88:	|   pea 16838 <line.c.05397aaf+0x44>
    5e8e:	|   pea 1 <_start+0x1>
    5e92:	|   jsr 1a3a <deleteTextures>
    5e98:	|   addq.l #8,sp
		zBuffer.texName = 0;
    5e9a:	|   clr.l 16838 <line.c.05397aaf+0x44>
        FreeVec(zBuffer.tex);
    5ea0:	|   move.l 16834 <line.c.05397aaf+0x40>,4(sp)
    5ea8:	|   move.l 16784 <SysBase>,d0
    5eae:	|   movea.l d0,a6
    5eb0:	|   movea.l 4(sp),a1
    5eb4:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    5eb8:	|   clr.l 16834 <line.c.05397aaf+0x40>
	}
	zBuffer.numPanels = 0;
    5ebe:	\-> clr.l 167ec <zBuffer+0x8>
	zBuffer.originalNum =0;
    5ec4:	    clr.l 16830 <line.c.05397aaf+0x3c>
}
    5eca:	    nop
    5ecc:	    movea.l (sp)+,a6
    5ece:	    addq.l #4,sp
    5ed0:	    rts

00005ed2 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    5ed2:	                         lea -528(sp),sp
    5ed6:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    5eda:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    5ede:	                         jsr 5e7c <killZBuffer>

	zBuffer.originalNum = y;
    5ee4:	                         move.l 544(sp),d0
    5ee8:	                         move.l d0,16830 <line.c.05397aaf+0x3c>
	if (! openFileFromNum (y)) return FALSE;
    5eee:	                         move.l 544(sp),d0
    5ef2:	                         move.l d0,-(sp)
    5ef4:	                         jsr 44e8 <openFileFromNum>
    5efa:	                         addq.l #4,sp
    5efc:	                         tst.l d0
    5efe:	                     /-- bne.s 5f06 <setZBuffer+0x34>
    5f00:	                     |   clr.w d0
    5f02:	/--------------------|-- bra.w 62e4 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    5f06:	|                    \-> move.l 1676c <bigDataFile>,524(sp)
    5f0e:	|                        move.l 1678c <DOSBase>,d0
    5f14:	|                        movea.l d0,a6
    5f16:	|                        move.l 524(sp),d1
    5f1a:	|                        jsr -306(a6)
    5f1e:	|                        move.l d0,520(sp)
    5f22:	|                        move.l 520(sp),d0
    5f26:	|                        moveq #83,d1
    5f28:	|                        cmp.l d0,d1
    5f2a:	|                    /-- beq.s 5f8c <setZBuffer+0xba>
    5f2c:	|                    |   move.l 1676c <bigDataFile>,516(sp)
    5f34:	|                    |   move.l 1678c <DOSBase>,d0
    5f3a:	|                    |   movea.l d0,a6
    5f3c:	|                    |   move.l 516(sp),d1
    5f40:	|                    |   jsr -306(a6)
    5f44:	|                    |   move.l d0,512(sp)
    5f48:	|                    |   move.l 512(sp),d0
    5f4c:	|                    |   moveq #122,d1
    5f4e:	|                    |   cmp.l d0,d1
    5f50:	|                    +-- beq.s 5f8c <setZBuffer+0xba>
    5f52:	|                    |   move.l 1676c <bigDataFile>,508(sp)
    5f5a:	|                    |   move.l 1678c <DOSBase>,d0
    5f60:	|                    |   movea.l d0,a6
    5f62:	|                    |   move.l 508(sp),d1
    5f66:	|                    |   jsr -306(a6)
    5f6a:	|                    |   move.l d0,504(sp)
    5f6e:	|                    |   move.l 504(sp),d0
    5f72:	|                    |   moveq #98,d1
    5f74:	|                    |   cmp.l d0,d1
    5f76:	|                    +-- beq.s 5f8c <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    5f78:	|                    |   pea 14837 <custom.c.9a493ead+0x87>
    5f7e:	|                    |   jsr 13046 <KPrintF>
    5f84:	|                    |   addq.l #4,sp
		 return FALSE;
    5f86:	|                    |   clr.w d0
    5f88:	+--------------------|-- bra.w 62e4 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    5f8c:	|                    \-> move.l 1676c <bigDataFile>,500(sp)
    5f94:	|                        move.l 1678c <DOSBase>,d0
    5f9a:	|                        movea.l d0,a6
    5f9c:	|                        move.l 500(sp),d1
    5fa0:	|                        jsr -306(a6)
    5fa4:	|                        move.l d0,496(sp)
    5fa8:	|                        move.l 496(sp),d0
    5fac:	|                    /-- beq.s 5fb6 <setZBuffer+0xe4>
    5fae:	|                    |   moveq #1,d1
    5fb0:	|                    |   cmp.l d0,d1
    5fb2:	|                 /--|-- beq.s 5fcc <setZBuffer+0xfa>
    5fb4:	|              /--|--|-- bra.s 5ffa <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    5fb6:	|              |  |  \-> move.l #640,167e4 <zBuffer>
		zBuffer.height = 480;
    5fc0:	|              |  |      move.l #480,167e8 <zBuffer+0x4>
		break;
    5fca:	|              |  |  /-- bra.s 600e <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    5fcc:	|              |  \--|-> move.l 1676c <bigDataFile>,d0
    5fd2:	|              |     |   move.l d0,-(sp)
    5fd4:	|              |     |   jsr 6bc <get2bytes>
    5fda:	|              |     |   addq.l #4,sp
    5fdc:	|              |     |   move.l d0,167e4 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    5fe2:	|              |     |   move.l 1676c <bigDataFile>,d0
    5fe8:	|              |     |   move.l d0,-(sp)
    5fea:	|              |     |   jsr 6bc <get2bytes>
    5ff0:	|              |     |   addq.l #4,sp
    5ff2:	|              |     |   move.l d0,167e8 <zBuffer+0x4>
		break;
    5ff8:	|              |     +-- bra.s 600e <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    5ffa:	|              \-----|-> pea 1484b <custom.c.9a493ead+0x9b>
    6000:	|                    |   jsr 13046 <KPrintF>
    6006:	|                    |   addq.l #4,sp
		return FALSE;
    6008:	|                    |   clr.w d0
    600a:	+--------------------|-- bra.w 62e4 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    600e:	|                    \-> move.l 167e4 <zBuffer>,d0
    6014:	|                        move.l d0,d1
    6016:	|                        move.l 16874 <sceneWidth>,d0
    601c:	|                        cmp.l d1,d0
    601e:	|                    /-- bne.s 6032 <setZBuffer+0x160>
    6020:	|                    |   move.l 167e8 <zBuffer+0x4>,d0
    6026:	|                    |   move.l d0,d1
    6028:	|                    |   move.l 16878 <sceneHeight>,d0
    602e:	|                    |   cmp.l d1,d0
    6030:	|                 /--|-- beq.s 6082 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    6032:	|                 |  \-> movea.l 16878 <sceneHeight>,a1
    6038:	|                 |      movea.l 16874 <sceneWidth>,a0
    603e:	|                 |      move.l 167e8 <zBuffer+0x4>,d1
    6044:	|                 |      move.l 167e4 <zBuffer>,d0
    604a:	|                 |      move.l a1,-(sp)
    604c:	|                 |      move.l a0,-(sp)
    604e:	|                 |      move.l d1,-(sp)
    6050:	|                 |      move.l d0,-(sp)
    6052:	|                 |      pea 14897 <custom.c.9a493ead+0xe7>
    6058:	|                 |      moveq #32,d0
    605a:	|                 |      add.l sp,d0
    605c:	|                 |      move.l d0,-(sp)
    605e:	|                 |      jsr 10808 <sprintf>
    6064:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    6068:	|                 |      moveq #12,d0
    606a:	|                 |      add.l sp,d0
    606c:	|                 |      move.l d0,-(sp)
    606e:	|                 |      pea 148b2 <custom.c.9a493ead+0x102>
    6074:	|                 |      jsr 13046 <KPrintF>
    607a:	|                 |      addq.l #8,sp
		return FALSE;
    607c:	|                 |      clr.w d0
    607e:	+-----------------|----- bra.w 62e4 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6082:	|                 \----> move.l 1676c <bigDataFile>,492(sp)
    608a:	|                        move.l 1678c <DOSBase>,d0
    6090:	|                        movea.l d0,a6
    6092:	|                        move.l 492(sp),d1
    6096:	|                        jsr -306(a6)
    609a:	|                        move.l d0,488(sp)
    609e:	|                        move.l 488(sp),d0
    60a2:	|                        move.l d0,167ec <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    60a8:	|                        clr.l 544(sp)
    60ac:	|                    /-- bra.s 60d8 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    60ae:	|                 /--|-> move.l 1676c <bigDataFile>,d0
    60b4:	|                 |  |   move.l d0,-(sp)
    60b6:	|                 |  |   jsr 6bc <get2bytes>
    60bc:	|                 |  |   addq.l #4,sp
    60be:	|                 |  |   move.l 544(sp),d1
    60c2:	|                 |  |   add.l d1,d1
    60c4:	|                 |  |   add.l d1,d1
    60c6:	|                 |  |   lea 540(sp),a0
    60ca:	|                 |  |   add.l a0,d1
    60cc:	|                 |  |   movea.l d1,a0
    60ce:	|                 |  |   lea -144(a0),a0
    60d2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    60d4:	|                 |  |   addq.l #1,544(sp)
    60d8:	|                 |  \-> move.l 167ec <zBuffer+0x8>,d0
    60de:	|                 |      cmp.l 544(sp),d0
    60e2:	|                 \----- bhi.s 60ae <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    60e4:	|                        move.l 167ec <zBuffer+0x8>,d0
    60ea:	|                        move.l d0,-(sp)
    60ec:	|                        move.l sp,d0
    60ee:	|                        addi.l #336,d0
    60f4:	|                        move.l d0,-(sp)
    60f6:	|                        move.l sp,d0
    60f8:	|                        addi.l #404,d0
    60fe:	|                        move.l d0,-(sp)
    6100:	|                        jsr 62ee <sortZPal>
    6106:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    610a:	|                        clr.l 544(sp)
    610e:	|                    /-- bra.s 6186 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    6110:	|                 /--|-> move.l 544(sp),d0
    6114:	|                 |  |   add.l d0,d0
    6116:	|                 |  |   add.l d0,d0
    6118:	|                 |  |   move.l #540,d1
    611e:	|                 |  |   add.l sp,d1
    6120:	|                 |  |   add.l d1,d0
    6122:	|                 |  |   movea.l d0,a0
    6124:	|                 |  |   lea -208(a0),a0
    6128:	|                 |  |   move.l (a0),d0
    612a:	|                 |  |   add.l d0,d0
    612c:	|                 |  |   add.l d0,d0
    612e:	|                 |  |   lea 540(sp),a0
    6132:	|                 |  |   add.l a0,d0
    6134:	|                 |  |   movea.l d0,a0
    6136:	|                 |  |   lea -144(a0),a0
    613a:	|                 |  |   move.l (a0),d0
    613c:	|                 |  |   move.l 544(sp),d1
    6140:	|                 |  |   addq.l #3,d1
    6142:	|                 |  |   add.l d1,d1
    6144:	|                 |  |   movea.l d1,a1
    6146:	|                 |  |   adda.l d1,a1
    6148:	|                 |  |   lea 167e4 <zBuffer>,a0
    614e:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    6152:	|                 |  |   move.l 544(sp),d0
    6156:	|                 |  |   add.l d0,d0
    6158:	|                 |  |   add.l d0,d0
    615a:	|                 |  |   move.l #540,d1
    6160:	|                 |  |   add.l sp,d1
    6162:	|                 |  |   add.l d1,d0
    6164:	|                 |  |   movea.l d0,a0
    6166:	|                 |  |   lea -208(a0),a0
    616a:	|                 |  |   move.l (a0),d1
    616c:	|                 |  |   move.l 544(sp),d0
    6170:	|                 |  |   add.l d1,d1
    6172:	|                 |  |   add.l d1,d1
    6174:	|                 |  |   lea 540(sp),a0
    6178:	|                 |  |   add.l a0,d1
    617a:	|                 |  |   movea.l d1,a0
    617c:	|                 |  |   lea -272(a0),a0
    6180:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6182:	|                 |  |   addq.l #1,544(sp)
    6186:	|                 |  \-> move.l 167ec <zBuffer+0x8>,d0
    618c:	|                 |      cmp.l 544(sp),d0
    6190:	|                 \----- bhi.w 6110 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6194:	|                        move.l 16874 <sceneWidth>,d0
    619a:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    619e:	|                        move.l 16878 <sceneHeight>,d0
    61a4:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    61a8:	|                        move.l 484(sp),-(sp)
    61ac:	|                        move.l 484(sp),-(sp)
    61b0:	|                        jsr 13858 <__mulsi3>
    61b6:	|                        addq.l #8,sp
    61b8:	|                        move.l d0,476(sp)
    61bc:	|                        clr.l 472(sp)
    61c0:	|                        move.l 16784 <SysBase>,d0
    61c6:	|                        movea.l d0,a6
    61c8:	|                        move.l 476(sp),d0
    61cc:	|                        move.l 472(sp),d1
    61d0:	|                        jsr -684(a6)
    61d4:	|                        move.l d0,468(sp)
    61d8:	|                        move.l 468(sp),d0
    61dc:	|                        move.l d0,16834 <line.c.05397aaf+0x40>
	if (!zBuffer.tex) {
    61e2:	|                        move.l 16834 <line.c.05397aaf+0x40>,d0
    61e8:	|                    /-- bne.s 61fe <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    61ea:	|                    |   pea 148ef <custom.c.9a493ead+0x13f>
    61f0:	|                    |   jsr 13046 <KPrintF>
    61f6:	|                    |   addq.l #4,sp
		return FALSE;
    61f8:	|                    |   clr.w d0
    61fa:	+--------------------|-- bra.w 62e4 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    61fe:	|                    \-> clr.l 544(sp)
    6202:	|     /----------------- bra.w 62ce <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6206:	|  /--|----------------> clr.l 536(sp)
    620a:	|  |  |     /----------- bra.w 62ba <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    620e:	|  |  |  /--|----------> tst.l 528(sp)
    6212:	|  |  |  |  |  /-------- bne.s 6270 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    6214:	|  |  |  |  |  |         move.l 1676c <bigDataFile>,464(sp)
    621c:	|  |  |  |  |  |         move.l 1678c <DOSBase>,d0
    6222:	|  |  |  |  |  |         movea.l d0,a6
    6224:	|  |  |  |  |  |         move.l 464(sp),d1
    6228:	|  |  |  |  |  |         jsr -306(a6)
    622c:	|  |  |  |  |  |         move.l d0,460(sp)
    6230:	|  |  |  |  |  |         move.l 460(sp),d0
    6234:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    6238:	|  |  |  |  |  |         move.l 532(sp),d0
    623c:	|  |  |  |  |  |         asr.l #4,d0
    623e:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    6242:	|  |  |  |  |  |         moveq #15,d0
    6244:	|  |  |  |  |  |         cmp.l 528(sp),d0
    6248:	|  |  |  |  |  |  /----- bne.s 6266 <setZBuffer+0x394>
    624a:	|  |  |  |  |  |  |      move.l 1676c <bigDataFile>,d0
    6250:	|  |  |  |  |  |  |      move.l d0,-(sp)
    6252:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    6258:	|  |  |  |  |  |  |      addq.l #4,sp
    625a:	|  |  |  |  |  |  |      movea.l d0,a0
    625c:	|  |  |  |  |  |  |      lea 16(a0),a0
    6260:	|  |  |  |  |  |  |      move.l a0,528(sp)
    6264:	|  |  |  |  |  |  |  /-- bra.s 626a <setZBuffer+0x398>
				else stillToGo ++;
    6266:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    626a:	|  |  |  |  |  |     \-> moveq #15,d1
    626c:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    6270:	|  |  |  |  |  \-------> move.l 532(sp),d0
    6274:	|  |  |  |  |            add.l d0,d0
    6276:	|  |  |  |  |            add.l d0,d0
    6278:	|  |  |  |  |            lea 540(sp),a0
    627c:	|  |  |  |  |            add.l a0,d0
    627e:	|  |  |  |  |            movea.l d0,a0
    6280:	|  |  |  |  |            lea -272(a0),a0
    6284:	|  |  |  |  |            move.l (a0),d0
    6286:	|  |  |  |  |            move.l d0,d2
    6288:	|  |  |  |  |            move.l 16834 <line.c.05397aaf+0x40>,d3
    628e:	|  |  |  |  |            move.l 484(sp),d0
    6292:	|  |  |  |  |            move.l 544(sp),-(sp)
    6296:	|  |  |  |  |            move.l d0,-(sp)
    6298:	|  |  |  |  |            jsr 13858 <__mulsi3>
    629e:	|  |  |  |  |            addq.l #8,sp
    62a0:	|  |  |  |  |            move.l d0,d1
    62a2:	|  |  |  |  |            move.l 536(sp),d0
    62a6:	|  |  |  |  |            add.l d1,d0
    62a8:	|  |  |  |  |            movea.l d3,a0
    62aa:	|  |  |  |  |            adda.l d0,a0
    62ac:	|  |  |  |  |            move.b d2,d0
    62ae:	|  |  |  |  |            lsl.b #4,d0
    62b0:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    62b2:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    62b6:	|  |  |  |  |            addq.l #1,536(sp)
    62ba:	|  |  |  |  \----------> move.l 536(sp),d1
    62be:	|  |  |  |               move.l 16874 <sceneWidth>,d0
    62c4:	|  |  |  |               cmp.l d1,d0
    62c6:	|  |  |  \-------------- bhi.w 620e <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    62ca:	|  |  |                  addq.l #1,544(sp)
    62ce:	|  |  \----------------> move.l 16878 <sceneHeight>,d0
    62d4:	|  |                     cmp.l 544(sp),d0
    62d8:	|  \-------------------- bhi.w 6206 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    62dc:	|                        jsr 43e0 <finishAccess>
	
	return TRUE;
    62e2:	|                        moveq #1,d0
}
    62e4:	\----------------------> movem.l (sp)+,d2-d3/a6
    62e8:	                         lea 528(sp),sp
    62ec:	                         rts

000062ee <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    62ee:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    62f0:	             clr.l 4(sp)
    62f4:	         /-- bra.s 630c <sortZPal+0x1e>
		newpal[i] = i;
    62f6:	      /--|-> move.l 4(sp),d0
    62fa:	      |  |   add.l d0,d0
    62fc:	      |  |   add.l d0,d0
    62fe:	      |  |   movea.l 16(sp),a0
    6302:	      |  |   adda.l d0,a0
    6304:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    6308:	      |  |   addq.l #1,4(sp)
    630c:	      |  \-> move.l 4(sp),d0
    6310:	      |      cmp.l 20(sp),d0
    6314:	      \----- blt.s 62f6 <sortZPal+0x8>
	}

	if (size < 2) return;		
    6316:	             moveq #1,d0
    6318:	             cmp.l 20(sp),d0
    631c:	/----------- bge.w 63ce <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    6320:	|            moveq #1,d0
    6322:	|            move.l d0,4(sp)
    6326:	|     /----- bra.w 63c0 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    632a:	|  /--|----> move.l 4(sp),d0
    632e:	|  |  |      add.l d0,d0
    6330:	|  |  |      add.l d0,d0
    6332:	|  |  |      movea.l 16(sp),a0
    6336:	|  |  |      adda.l d0,a0
    6338:	|  |  |      move.l (a0),d0
    633a:	|  |  |      add.l d0,d0
    633c:	|  |  |      add.l d0,d0
    633e:	|  |  |      movea.l 12(sp),a0
    6342:	|  |  |      adda.l d0,a0
    6344:	|  |  |      move.l (a0),d1
    6346:	|  |  |      move.l 4(sp),d0
    634a:	|  |  |      addi.l #1073741823,d0
    6350:	|  |  |      add.l d0,d0
    6352:	|  |  |      add.l d0,d0
    6354:	|  |  |      movea.l 16(sp),a0
    6358:	|  |  |      adda.l d0,a0
    635a:	|  |  |      move.l (a0),d0
    635c:	|  |  |      add.l d0,d0
    635e:	|  |  |      add.l d0,d0
    6360:	|  |  |      movea.l 12(sp),a0
    6364:	|  |  |      adda.l d0,a0
    6366:	|  |  |      move.l (a0),d0
    6368:	|  |  |      cmp.l d1,d0
    636a:	|  |  |  /-- ble.s 63bc <sortZPal+0xce>
			tmp = newpal[i];
    636c:	|  |  |  |   move.l 4(sp),d0
    6370:	|  |  |  |   add.l d0,d0
    6372:	|  |  |  |   add.l d0,d0
    6374:	|  |  |  |   movea.l 16(sp),a0
    6378:	|  |  |  |   adda.l d0,a0
    637a:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    637c:	|  |  |  |   move.l 4(sp),d0
    6380:	|  |  |  |   addi.l #1073741823,d0
    6386:	|  |  |  |   add.l d0,d0
    6388:	|  |  |  |   add.l d0,d0
    638a:	|  |  |  |   movea.l 16(sp),a1
    638e:	|  |  |  |   adda.l d0,a1
    6390:	|  |  |  |   move.l 4(sp),d0
    6394:	|  |  |  |   add.l d0,d0
    6396:	|  |  |  |   add.l d0,d0
    6398:	|  |  |  |   movea.l 16(sp),a0
    639c:	|  |  |  |   adda.l d0,a0
    639e:	|  |  |  |   move.l (a1),d0
    63a0:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    63a2:	|  |  |  |   move.l 4(sp),d0
    63a6:	|  |  |  |   addi.l #1073741823,d0
    63ac:	|  |  |  |   add.l d0,d0
    63ae:	|  |  |  |   add.l d0,d0
    63b0:	|  |  |  |   movea.l 16(sp),a0
    63b4:	|  |  |  |   adda.l d0,a0
    63b6:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    63b8:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    63bc:	|  |  |  \-> addq.l #1,4(sp)
    63c0:	|  |  \----> move.l 4(sp),d0
    63c4:	|  |         cmp.l 20(sp),d0
    63c8:	|  \-------- blt.w 632a <sortZPal+0x3c>
    63cc:	|        /-- bra.s 63d0 <sortZPal+0xe2>
	if (size < 2) return;		
    63ce:	\--------|-> nop
		}
	}
    63d0:	         \-> addq.l #8,sp
    63d2:	             rts

000063d4 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    63d4:	subq.l #4,sp
    63d6:	move.l 16(sp),d0
    63da:	move.w d0,d0
    63dc:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    63e0:	pea 14912 <custom.c.9a493ead+0x162>
    63e6:	jsr 13046 <KPrintF>
    63ec:	addq.l #4,sp
    return TRUE;
    63ee:	moveq #1,d0
}    
    63f0:	addq.l #4,sp
    63f2:	rts

000063f4 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    63f4:	    move.l 4(sp),d0
    63f8:	/-- bpl.s 63fc <TF_abs+0x8>
    63fa:	|   neg.l d0
}
    63fc:	\-> rts

000063fe <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    63fe:	             lea -28(sp),sp
    6402:	             move.l a6,-(sp)
    6404:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6406:	             moveq #120,d0
    6408:	             move.l d0,28(sp)
    640c:	             clr.l 24(sp)
    6410:	             move.l 16784 <SysBase>,d0
    6416:	             movea.l d0,a6
    6418:	             move.l 28(sp),d0
    641c:	             move.l 24(sp),d1
    6420:	             jsr -684(a6)
    6424:	             move.l d0,20(sp)
    6428:	             move.l 20(sp),d0
    642c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    6430:	         /-- bne.s 6438 <addPerson+0x3a>
    6432:	         |   clr.w d0
    6434:	/--------|-- bra.w 6666 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    6438:	|        \-> move.l 48(sp),-(sp)
    643c:	|            jsr 9f24 <loadObjectType>
    6442:	|            addq.l #4,sp
    6444:	|            movea.l 16(sp),a0
    6448:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    644c:	|            movea.l 16(sp),a0
    6450:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    6458:	|            movea.l 16(sp),a0
    645c:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    6460:	|            movea.l 16(sp),a0
    6464:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    6468:	|            move.l 44(sp),-(sp)
    646c:	|            jsr 132fe <__floatsisf>
    6472:	|            addq.l #4,sp
    6474:	|            move.l d0,d2
    6476:	|            move.l 40(sp),-(sp)
    647a:	|            jsr 132fe <__floatsisf>
    6480:	|            addq.l #4,sp
    6482:	|            move.l d2,-(sp)
    6484:	|            move.l d0,-(sp)
    6486:	|            move.l 24(sp),-(sp)
    648a:	|            jsr 7920 <moveAndScale>
    6490:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6494:	|            movea.l 16(sp),a0
    6498:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    649c:	|            movea.l 16(sp),a0
    64a0:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    64a6:	|            movea.l 16(sp),a0
    64aa:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    64b0:	|            movea.l 16(sp),a0
    64b4:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    64b8:	|            movea.l 16(sp),a0
    64bc:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    64c0:	|            movea.l 16(sp),a0
    64c4:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    64ca:	|            movea.l 16(sp),a0
    64ce:	|            clr.l 94(a0)
    newPerson->angle = 180;
    64d2:	|            movea.l 16(sp),a0
    64d6:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    64de:	|            movea.l 16(sp),a0
    64e2:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    64ea:	|            movea.l 16(sp),a0
    64ee:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    64f2:	|            movea.l 16(sp),a0
    64f6:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    64fa:	|            movea.l 16(sp),a0
    64fe:	|            movea.l 102(a0),a0
    6502:	|            move.l 24(a0),d0
    6506:	|            movea.l 16(sp),a0
    650a:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    650e:	|            movea.l 16(sp),a0
    6512:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    6516:	|            movea.l 16(sp),a0
    651a:	|            movea.l 102(a0),a0
    651e:	|            move.l 32(a0),d0
    6522:	|            movea.l 16(sp),a0
    6526:	|            move.l d0,110(a0)
    newPerson->r = 0;
    652a:	|            movea.l 16(sp),a0
    652e:	|            clr.b 114(a0)
    newPerson->g = 0;
    6532:	|            movea.l 16(sp),a0
    6536:	|            clr.b 115(a0)
    newPerson->b = 0;
    653a:	|            movea.l 16(sp),a0
    653e:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    6542:	|            movea.l 16(sp),a0
    6546:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    654a:	|            movea.l 16(sp),a0
    654e:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    6552:	|            movea.l 16(sp),a0
    6556:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    655c:	|            clr.l -(sp)
    655e:	|            move.l 20(sp),-(sp)
    6562:	|            jsr 58ce <setFrames>
    6568:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    656a:	|            movea.l 52(sp),a0
    656e:	|            movea.l (a0),a0
    6570:	|            movea.l (a0),a0
    6572:	|            movea.l 4(a0),a0
    6576:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    657a:	|     /----- bpl.s 6584 <addPerson+0x186>
    657c:	|     |      move.l 12(sp),d0
    6580:	|     |      neg.l d0
    6582:	|     |  /-- bra.s 6586 <addPerson+0x188>
    6584:	|     \--|-> moveq #1,d0
    6586:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    658a:	|            movea.l 52(sp),a0
    658e:	|            movea.l (a0),a0
    6590:	|            movea.l (a0),a0
    6592:	|            movea.l (a0),a0
    6594:	|            move.l 8(a0),d0
    6598:	|            cmp.l 8(sp),d0
    659c:	|     /----- bgt.s 65ce <addPerson+0x1d0>
        if (fNumSigned < 0) {
    659e:	|     |      tst.l 12(sp)
    65a2:	|     |  /-- bge.s 65b0 <addPerson+0x1b2>
            newPerson->height = 5;
    65a4:	|     |  |   movea.l 16(sp),a0
    65a8:	|     |  |   moveq #5,d1
    65aa:	|     |  |   move.l d1,8(a0)
    65ae:	|  /--|--|-- bra.s 65f8 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    65b0:	|  |  |  \-> movea.l 52(sp),a0
    65b4:	|  |  |      movea.l (a0),a0
    65b6:	|  |  |      movea.l (a0),a0
    65b8:	|  |  |      movea.l (a0),a0
    65ba:	|  |  |      movea.l 16(a0),a0
    65be:	|  |  |      move.l 12(a0),d0
    65c2:	|  |  |      addq.l #5,d0
    65c4:	|  |  |      movea.l 16(sp),a0
    65c8:	|  |  |      move.l d0,8(a0)
    65cc:	|  +--|----- bra.s 65f8 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    65ce:	|  |  \----> movea.l 52(sp),a0
    65d2:	|  |         movea.l (a0),a0
    65d4:	|  |         movea.l (a0),a0
    65d6:	|  |         movea.l (a0),a0
    65d8:	|  |         movea.l 16(a0),a0
    65dc:	|  |         move.l 8(sp),d1
    65e0:	|  |         move.l d1,d0
    65e2:	|  |         add.l d0,d0
    65e4:	|  |         add.l d1,d0
    65e6:	|  |         lsl.l #3,d0
    65e8:	|  |         adda.l d0,a0
    65ea:	|  |         move.l 12(a0),d0
    65ee:	|  |         addq.l #5,d0
    65f0:	|  |         movea.l 16(sp),a0
    65f4:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    65f8:	|  \-------> move.l #92220,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6600:	|        /-- bra.s 6610 <addPerson+0x212>
        changethat = &((*changethat)->next);
    6602:	|     /--|-> movea.l 32(sp),a0
    6606:	|     |  |   move.l (a0),d0
    6608:	|     |  |   moveq #24,d1
    660a:	|     |  |   add.l d0,d1
    660c:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6610:	|     |  \-> movea.l 32(sp),a0
    6614:	|     |      move.l (a0),d0
    6616:	|     |  /-- beq.s 663e <addPerson+0x240>
    6618:	|     |  |   movea.l 32(sp),a0
    661c:	|     |  |   movea.l (a0),a0
    661e:	|     |  |   move.l 4(a0),d2
    6622:	|     |  |   move.l 44(sp),-(sp)
    6626:	|     |  |   jsr 132fe <__floatsisf>
    662c:	|     |  |   addq.l #4,sp
    662e:	|     |  |   move.l d0,-(sp)
    6630:	|     |  |   move.l d2,-(sp)
    6632:	|     |  |   jsr 13524 <__ltsf2>
    6638:	|     |  |   addq.l #8,sp
    663a:	|     |  |   tst.l d0
    663c:	|     \--|-- blt.s 6602 <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    663e:	|        \-> movea.l 32(sp),a0
    6642:	|            move.l (a0),d0
    6644:	|            movea.l 16(sp),a0
    6648:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    664c:	|            movea.l 32(sp),a0
    6650:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6654:	|            movea.l 16(sp),a0
    6658:	|            move.l 102(a0),d0
    665c:	|            sne d0
    665e:	|            neg.b d0
    6660:	|            move.b d0,d0
    6662:	|            andi.w #255,d0
}
    6666:	\----------> move.l (sp)+,d2
    6668:	             movea.l (sp)+,a6
    666a:	             lea 28(sp),sp
    666e:	             rts

00006670 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    6670:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6672:	       move.l 8(sp),-(sp)
    6676:	       jsr 71d8 <findPerson>
    667c:	       addq.l #4,sp
    667e:	       move.l d0,(sp)
    if (moveMe) {
    6680:	/----- beq.s 66b4 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    6682:	|      movea.l (sp),a0
    6684:	|      move.l 56(a0),d0
    6688:	|  /-- beq.s 669a <animatePerson+0x2a>
    668a:	|  |   movea.l (sp),a0
    668c:	|  |   move.l 56(a0),d0
    6690:	|  |   move.l d0,-(sp)
    6692:	|  |   jsr 2154 <abortFunction>
    6698:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    669a:	|  \-> movea.l (sp),a0
    669c:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    66a0:	|      movea.l (sp),a0
    66a2:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    66a6:	|      movea.l (sp),a0
    66a8:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    66ac:	|      movea.l (sp),a0
    66ae:	|      move.l 12(sp),60(a0)
    }
}
    66b4:	\----> nop
    66b6:	       addq.l #4,sp
    66b8:	       rts

000066ba <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    66ba:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    66bc:	       move.l 8(sp),-(sp)
    66c0:	       jsr 71d8 <findPerson>
    66c6:	       addq.l #4,sp
    66c8:	       move.l d0,(sp)
    if (moveMe) {
    66ca:	/----- beq.s 670c <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    66cc:	|      movea.l (sp),a0
    66ce:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    66d2:	|      movea.l (sp),a0
    66d4:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    66da:	|      move.l (sp),-(sp)
    66dc:	|      jsr 7a6a <rethinkAngle>
    66e2:	|      addq.l #4,sp
        if (moveMe->walking) {
    66e4:	|      movea.l (sp),a0
    66e6:	|      move.w 52(a0),d0
    66ea:	|  /-- beq.s 66fe <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    66ec:	|  |   pea 1 <_start+0x1>
    66f0:	|  |   move.l 4(sp),-(sp)
    66f4:	|  |   jsr 58ce <setFrames>
    66fa:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    66fc:	+--|-- bra.s 670c <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    66fe:	|  \-> clr.l -(sp)
    6700:	|      move.l 4(sp),-(sp)
    6704:	|      jsr 58ce <setFrames>
    670a:	|      addq.l #8,sp
}
    670c:	\----> nop
    670e:	       addq.l #4,sp
    6710:	       rts

00006712 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6712:	             lea -36(sp),sp
    6716:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6718:	             movea.l 44(sp),a0
    671c:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6722:	             moveq #12,d0
    6724:	             move.l d0,28(sp)
    6728:	             clr.l 24(sp)
    672c:	             move.l 16784 <SysBase>,d0
    6732:	             movea.l d0,a6
    6734:	             move.l 28(sp),d0
    6738:	             move.l 24(sp),d1
    673c:	             jsr -684(a6)
    6740:	             move.l d0,20(sp)
    6744:	             move.l 20(sp),d0
    6748:	             move.l d0,16(sp)
	if (!(newAnim)) {
    674c:	         /-- bne.s 6762 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    674e:	         |   pea 14932 <custom.c.9a493ead+0x182>
    6754:	         |   jsr 13046 <KPrintF>
    675a:	         |   addq.l #4,sp
		return NULL;
    675c:	         |   moveq #0,d0
    675e:	/--------|-- bra.w 68a4 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    6762:	|        \-> movea.l 44(sp),a0
    6766:	|            move.l (a0),d0
    6768:	|            movea.l 16(sp),a0
    676c:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    676e:	|            movea.l 16(sp),a0
    6772:	|            move.l 32(sp),8(a0)

	if (num) {
    6778:	|  /-------- beq.w 6898 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    677c:	|  |         move.l 32(sp),d1
    6780:	|  |         move.l d1,d0
    6782:	|  |         add.l d0,d0
    6784:	|  |         add.l d1,d0
    6786:	|  |         add.l d0,d0
    6788:	|  |         add.l d0,d0
    678a:	|  |         move.l d0,12(sp)
    678e:	|  |         clr.l 8(sp)
    6792:	|  |         move.l 16784 <SysBase>,d0
    6798:	|  |         movea.l d0,a6
    679a:	|  |         move.l 12(sp),d0
    679e:	|  |         move.l 8(sp),d1
    67a2:	|  |         jsr -684(a6)
    67a6:	|  |         move.l d0,4(sp)
    67aa:	|  |         move.l 4(sp),d0
    67ae:	|  |         movea.l 16(sp),a0
    67b2:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    67b6:	|  |         movea.l 16(sp),a0
    67ba:	|  |         move.l 4(a0),d0
    67be:	|  |     /-- bne.s 67d4 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    67c0:	|  |     |   pea 14932 <custom.c.9a493ead+0x182>
    67c6:	|  |     |   jsr 13046 <KPrintF>
    67cc:	|  |     |   addq.l #4,sp
			return NULL;
    67ce:	|  |     |   moveq #0,d0
    67d0:	+--|-----|-- bra.w 68a4 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    67d4:	|  |     \-> clr.l 36(sp)
    67d8:	|  |     /-- bra.w 688a <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    67dc:	|  |  /--|-> movea.l 44(sp),a0
    67e0:	|  |  |  |   movea.l 4(a0),a0
    67e4:	|  |  |  |   move.l 36(sp),d1
    67e8:	|  |  |  |   move.l d1,d0
    67ea:	|  |  |  |   add.l d0,d0
    67ec:	|  |  |  |   add.l d1,d0
    67ee:	|  |  |  |   add.l d0,d0
    67f0:	|  |  |  |   add.l d0,d0
    67f2:	|  |  |  |   lea (0,a0,d0.l),a1
    67f6:	|  |  |  |   movea.l 16(sp),a0
    67fa:	|  |  |  |   movea.l 4(a0),a0
    67fe:	|  |  |  |   move.l 36(sp),d1
    6802:	|  |  |  |   move.l d1,d0
    6804:	|  |  |  |   add.l d0,d0
    6806:	|  |  |  |   add.l d1,d0
    6808:	|  |  |  |   add.l d0,d0
    680a:	|  |  |  |   add.l d0,d0
    680c:	|  |  |  |   adda.l d0,a0
    680e:	|  |  |  |   move.l (a1),d0
    6810:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6812:	|  |  |  |   movea.l 44(sp),a0
    6816:	|  |  |  |   movea.l 4(a0),a0
    681a:	|  |  |  |   move.l 36(sp),d1
    681e:	|  |  |  |   move.l d1,d0
    6820:	|  |  |  |   add.l d0,d0
    6822:	|  |  |  |   add.l d1,d0
    6824:	|  |  |  |   add.l d0,d0
    6826:	|  |  |  |   add.l d0,d0
    6828:	|  |  |  |   lea (0,a0,d0.l),a1
    682c:	|  |  |  |   movea.l 16(sp),a0
    6830:	|  |  |  |   movea.l 4(a0),a0
    6834:	|  |  |  |   move.l 36(sp),d1
    6838:	|  |  |  |   move.l d1,d0
    683a:	|  |  |  |   add.l d0,d0
    683c:	|  |  |  |   add.l d1,d0
    683e:	|  |  |  |   add.l d0,d0
    6840:	|  |  |  |   add.l d0,d0
    6842:	|  |  |  |   adda.l d0,a0
    6844:	|  |  |  |   move.l 4(a1),d0
    6848:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    684c:	|  |  |  |   movea.l 44(sp),a0
    6850:	|  |  |  |   movea.l 4(a0),a0
    6854:	|  |  |  |   move.l 36(sp),d1
    6858:	|  |  |  |   move.l d1,d0
    685a:	|  |  |  |   add.l d0,d0
    685c:	|  |  |  |   add.l d1,d0
    685e:	|  |  |  |   add.l d0,d0
    6860:	|  |  |  |   add.l d0,d0
    6862:	|  |  |  |   lea (0,a0,d0.l),a1
    6866:	|  |  |  |   movea.l 16(sp),a0
    686a:	|  |  |  |   movea.l 4(a0),a0
    686e:	|  |  |  |   move.l 36(sp),d1
    6872:	|  |  |  |   move.l d1,d0
    6874:	|  |  |  |   add.l d0,d0
    6876:	|  |  |  |   add.l d1,d0
    6878:	|  |  |  |   add.l d0,d0
    687a:	|  |  |  |   add.l d0,d0
    687c:	|  |  |  |   adda.l d0,a0
    687e:	|  |  |  |   move.l 8(a1),d0
    6882:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6886:	|  |  |  |   addq.l #1,36(sp)
    688a:	|  |  |  \-> move.l 36(sp),d0
    688e:	|  |  |      cmp.l 32(sp),d0
    6892:	|  |  \----- blt.w 67dc <copyAnim+0xca>
    6896:	|  |     /-- bra.s 68a0 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6898:	|  \-----|-> movea.l 16(sp),a0
    689c:	|        |   clr.l 4(a0)
	}

	return newAnim;
    68a0:	|        \-> move.l 16(sp),d0
}
    68a4:	\----------> movea.l (sp)+,a6
    68a6:	             lea 36(sp),sp
    68aa:	             rts

000068ac <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    68ac:	                lea -44(sp),sp
    68b0:	                move.l a6,-(sp)
    68b2:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    68b4:	                moveq #12,d0
    68b6:	                move.l d0,40(sp)
    68ba:	                clr.l 36(sp)
    68be:	                move.l 16784 <SysBase>,d0
    68c4:	                movea.l d0,a6
    68c6:	                move.l 40(sp),d0
    68ca:	                move.l 36(sp),d1
    68ce:	                jsr -684(a6)
    68d2:	                move.l d0,32(sp)
    68d6:	                move.l 32(sp),d0
    68da:	                move.l d0,28(sp)
	if( !newP) {
    68de:	            /-- bne.s 68f4 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    68e0:	            |   pea 14953 <custom.c.9a493ead+0x1a3>
    68e6:	            |   jsr 13046 <KPrintF>
    68ec:	            |   addq.l #4,sp
		return NULL;
    68ee:	            |   moveq #0,d0
    68f0:	/-----------|-- bra.w 6ac4 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    68f4:	|           \-> movea.l 28(sp),a0
    68f8:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    68fe:	|               move.l 56(sp),d1
    6902:	|               move.l d1,d0
    6904:	|               add.l d0,d0
    6906:	|               add.l d1,d0
    6908:	|               add.l d0,d0
    690a:	|               add.l d0,d0
    690c:	|               move.l d0,24(sp)
    6910:	|               clr.l 20(sp)
    6914:	|               move.l 16784 <SysBase>,d0
    691a:	|               movea.l d0,a6
    691c:	|               move.l 24(sp),d0
    6920:	|               move.l 20(sp),d1
    6924:	|               jsr -684(a6)
    6928:	|               move.l d0,16(sp)
    692c:	|               move.l 16(sp),d0
    6930:	|               movea.l 28(sp),a0
    6934:	|               move.l d0,4(a0)
	if( !newP->frames) {
    6938:	|               movea.l 28(sp),a0
    693c:	|               move.l 4(a0),d0
    6940:	|           /-- bne.s 6956 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    6942:	|           |   pea 14953 <custom.c.9a493ead+0x1a3>
    6948:	|           |   jsr 13046 <KPrintF>
    694e:	|           |   addq.l #4,sp
		return NULL;
    6950:	|           |   moveq #0,d0
    6952:	+-----------|-- bra.w 6ac4 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    6956:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    695c:	|               movea.l 60(sp),a0
    6960:	|               move.l (a0),44(sp)
	while (a) {
    6964:	|     /-------- bra.w 6ab8 <createPersonaAnim+0x20c>
		a --;
    6968:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    696c:	|  |  |         movea.l 28(sp),a0
    6970:	|  |  |         movea.l 4(a0),a0
    6974:	|  |  |         move.l 48(sp),d1
    6978:	|  |  |         move.l d1,d0
    697a:	|  |  |         add.l d0,d0
    697c:	|  |  |         add.l d1,d0
    697e:	|  |  |         add.l d0,d0
    6980:	|  |  |         add.l d0,d0
    6982:	|  |  |         adda.l d0,a0
    6984:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    6988:	|  |  |         movea.l 44(sp),a0
    698c:	|  |  |         move.l (a0),d0
    698e:	|  |  |         moveq #5,d1
    6990:	|  |  |         cmp.l d0,d1
    6992:	|  |  |     /-- bne.s 69be <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    6994:	|  |  |     |   movea.l 28(sp),a0
    6998:	|  |  |     |   movea.l 4(a0),a0
    699c:	|  |  |     |   move.l 48(sp),d1
    69a0:	|  |  |     |   move.l d1,d0
    69a2:	|  |  |     |   add.l d0,d0
    69a4:	|  |  |     |   add.l d1,d0
    69a6:	|  |  |     |   add.l d0,d0
    69a8:	|  |  |     |   add.l d0,d0
    69aa:	|  |  |     |   lea (0,a0,d0.l),a1
    69ae:	|  |  |     |   movea.l 44(sp),a0
    69b2:	|  |  |     |   move.l 4(a0),d0
    69b6:	|  |  |     |   move.l d0,8(a1)
    69ba:	|  |  |  /--|-- bra.w 6a66 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    69be:	|  |  |  |  \-> movea.l 44(sp),a0
    69c2:	|  |  |  |      move.l (a0),d0
    69c4:	|  |  |  |      moveq #2,d1
    69c6:	|  |  |  |      cmp.l d0,d1
    69c8:	|  |  |  |  /-- bne.s 69f4 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    69ca:	|  |  |  |  |   movea.l 44(sp),a0
    69ce:	|  |  |  |  |   move.l 4(a0),d2
    69d2:	|  |  |  |  |   movea.l 28(sp),a0
    69d6:	|  |  |  |  |   movea.l 4(a0),a0
    69da:	|  |  |  |  |   move.l 48(sp),d1
    69de:	|  |  |  |  |   move.l d1,d0
    69e0:	|  |  |  |  |   add.l d0,d0
    69e2:	|  |  |  |  |   add.l d1,d0
    69e4:	|  |  |  |  |   add.l d0,d0
    69e6:	|  |  |  |  |   add.l d0,d0
    69e8:	|  |  |  |  |   adda.l d0,a0
    69ea:	|  |  |  |  |   move.l d2,d0
    69ec:	|  |  |  |  |   neg.l d0
    69ee:	|  |  |  |  |   move.l d0,8(a0)
    69f2:	|  |  |  +--|-- bra.s 6a66 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    69f4:	|  |  |  |  \-> movea.l 44(sp),a0
    69f8:	|  |  |  |      move.l (a0),d0
    69fa:	|  |  |  |      moveq #6,d1
    69fc:	|  |  |  |      cmp.l d0,d1
    69fe:	|  |  |  |  /-- bne.s 6a46 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    6a00:	|  |  |  |  |   movea.l 44(sp),a0
    6a04:	|  |  |  |  |   movea.l 4(a0),a0
    6a08:	|  |  |  |  |   move.l (a0),d0
    6a0a:	|  |  |  |  |   move.l d0,-(sp)
    6a0c:	|  |  |  |  |   pea 1 <_start+0x1>
    6a10:	|  |  |  |  |   lea 20(sp),a0
    6a14:	|  |  |  |  |   move.l a0,-(sp)
    6a16:	|  |  |  |  |   jsr 10ffe <getValueType>
    6a1c:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    6a20:	|  |  |  |  |   movea.l 44(sp),a0
    6a24:	|  |  |  |  |   movea.l 4(a0),a0
    6a28:	|  |  |  |  |   movea.l (a0),a0
    6a2a:	|  |  |  |  |   move.l 8(a0),d0
    6a2e:	|  |  |  |  |   move.l d0,-(sp)
    6a30:	|  |  |  |  |   pea 1 <_start+0x1>
    6a34:	|  |  |  |  |   lea 16(sp),a0
    6a38:	|  |  |  |  |   move.l a0,-(sp)
    6a3a:	|  |  |  |  |   jsr 10ffe <getValueType>
    6a40:	|  |  |  |  |   lea 12(sp),sp
    6a44:	|  |  |  +--|-- bra.s 6a66 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    6a46:	|  |  |  |  \-> move.l 44(sp),d0
    6a4a:	|  |  |  |      move.l d0,-(sp)
    6a4c:	|  |  |  |      pea 1 <_start+0x1>
    6a50:	|  |  |  |      lea 20(sp),a0
    6a54:	|  |  |  |      move.l a0,-(sp)
    6a56:	|  |  |  |      jsr 10ffe <getValueType>
    6a5c:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    6a60:	|  |  |  |      moveq #1,d0
    6a62:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    6a66:	|  |  |  \----> move.l 60(sp),-(sp)
    6a6a:	|  |  |         jsr 11982 <trimStack>
    6a70:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    6a72:	|  |  |         movea.l 28(sp),a0
    6a76:	|  |  |         movea.l 4(a0),a0
    6a7a:	|  |  |         move.l 48(sp),d1
    6a7e:	|  |  |         move.l d1,d0
    6a80:	|  |  |         add.l d0,d0
    6a82:	|  |  |         add.l d1,d0
    6a84:	|  |  |         add.l d0,d0
    6a86:	|  |  |         add.l d0,d0
    6a88:	|  |  |         adda.l d0,a0
    6a8a:	|  |  |         move.l 12(sp),d0
    6a8e:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    6a90:	|  |  |         movea.l 28(sp),a0
    6a94:	|  |  |         movea.l 4(a0),a0
    6a98:	|  |  |         move.l 48(sp),d1
    6a9c:	|  |  |         move.l d1,d0
    6a9e:	|  |  |         add.l d0,d0
    6aa0:	|  |  |         add.l d1,d0
    6aa2:	|  |  |         add.l d0,d0
    6aa4:	|  |  |         add.l d0,d0
    6aa6:	|  |  |         adda.l d0,a0
    6aa8:	|  |  |         move.l 8(sp),d0
    6aac:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    6ab0:	|  |  |         movea.l 60(sp),a0
    6ab4:	|  |  |         move.l (a0),44(sp)
	while (a) {
    6ab8:	|  |  \-------> tst.l 48(sp)
    6abc:	|  \----------- bne.w 6968 <createPersonaAnim+0xbc>
	}

	return newP;
    6ac0:	|               move.l 28(sp),d0
}
    6ac4:	\-------------> move.l (sp)+,d2
    6ac6:	                movea.l (sp)+,a6
    6ac8:	                lea 44(sp),sp
    6acc:	                rts

00006ace <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    6ace:	       subq.l #8,sp
    6ad0:	       move.l a6,-(sp)

	if (orig)
    6ad2:	       tst.l 16(sp)
    6ad6:	/----- beq.s 6b16 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    6ad8:	|      movea.l 16(sp),a0
    6adc:	|      move.l 8(a0),d0
    6ae0:	|  /-- beq.s 6afc <deleteAnim+0x2e>
			FreeVec( orig->frames);
    6ae2:	|  |   movea.l 16(sp),a0
    6ae6:	|  |   move.l 4(a0),8(sp)
    6aec:	|  |   move.l 16784 <SysBase>,d0
    6af2:	|  |   movea.l d0,a6
    6af4:	|  |   movea.l 8(sp),a1
    6af8:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    6afc:	|  \-> move.l 16(sp),4(sp)
    6b02:	|      move.l 16784 <SysBase>,d0
    6b08:	|      movea.l d0,a6
    6b0a:	|      movea.l 4(sp),a1
    6b0e:	|      jsr -690(a6)
		orig = NULL;
    6b12:	|      clr.l 16(sp)
	}
}
    6b16:	\----> nop
    6b18:	       movea.l (sp)+,a6
    6b1a:	       addq.l #8,sp
    6b1c:	       rts

00006b1e <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    6b1e:	          lea -124(sp),sp
    6b22:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    6b26:	          movea.l 152(sp),a0
    6b2a:	          move.l 44(a0),d1
    6b2e:	          movea.l 152(sp),a0
    6b32:	          move.l 48(a0),d0
    6b36:	          cmp.l d1,d0
    6b38:	      /-- bne.s 6b68 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    6b3a:	      |   movea.l 152(sp),a0
    6b3e:	      |   moveq #-1,d0
    6b40:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    6b44:	      |   movea.l 152(sp),a0
    6b48:	      |   move.l 28(a0),d0
    6b4c:	      |   movea.l 152(sp),a0
    6b50:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    6b54:	      |   movea.l 152(sp),a0
    6b58:	      |   move.l 32(a0),d0
    6b5c:	      |   movea.l 152(sp),a0
    6b60:	      |   move.l d0,40(a0)
    6b64:	   /--|-- bra.w 70ce <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    6b68:	   |  \-> movea.l 168e4 <currentFloor>,a0
    6b6e:	   |      move.l 16(a0),d1
    6b72:	   |      movea.l 152(sp),a0
    6b76:	   |      move.l 44(a0),d0
    6b7a:	   |      add.l d0,d0
    6b7c:	   |      add.l d0,d0
    6b7e:	   |      movea.l d1,a0
    6b80:	   |      adda.l d0,a0
    6b82:	   |      move.l (a0),d1
    6b84:	   |      movea.l 152(sp),a0
    6b88:	   |      move.l 48(a0),d0
    6b8c:	   |      add.l d0,d0
    6b8e:	   |      add.l d0,d0
    6b90:	   |      movea.l d1,a0
    6b92:	   |      adda.l d0,a0
    6b94:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    6b98:	   |      moveq #-1,d0
    6b9a:	   |      cmp.l 144(sp),d0
    6b9e:	   |  /-- bne.s 6ba6 <doBorderStuff+0x88>
    6ba0:	   |  |   clr.w d0
    6ba2:	/--|--|-- bra.w 71ce <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    6ba6:	|  |  \-> movea.l 168e4 <currentFloor>,a0
    6bac:	|  |      move.l 12(a0),d1
    6bb0:	|  |      move.l 144(sp),d0
    6bb4:	|  |      lsl.l #3,d0
    6bb6:	|  |      add.l d0,d1
    6bb8:	|  |      movea.l 168e4 <currentFloor>,a0
    6bbe:	|  |      movea.l 12(a0),a1
    6bc2:	|  |      movea.l 152(sp),a0
    6bc6:	|  |      move.l 44(a0),d0
    6bca:	|  |      lsl.l #3,d0
    6bcc:	|  |      add.l a1,d0
    6bce:	|  |      lea 40(sp),a0
    6bd2:	|  |      move.l a0,-(sp)
    6bd4:	|  |      lea 48(sp),a0
    6bd8:	|  |      move.l a0,-(sp)
    6bda:	|  |      move.l d1,-(sp)
    6bdc:	|  |      move.l d0,-(sp)
    6bde:	|  |      jsr 122c8 <getMatchingCorners>
    6be4:	|  |      lea 16(sp),sp
    6be8:	|  |      tst.w d0
    6bea:	|  |  /-- bne.s 6c00 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    6bec:	|  |  |   pea 1497d <custom.c.9a493ead+0x1cd>
    6bf2:	|  |  |   jsr 13046 <KPrintF>
    6bf8:	|  |  |   addq.l #4,sp
            return FALSE;
    6bfa:	|  |  |   clr.w d0
    6bfc:	+--|--|-- bra.w 71ce <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    6c00:	|  |  \-> movea.l 152(sp),a0
    6c04:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    6c0a:	|  |      movea.l 152(sp),a0
    6c0e:	|  |      move.l (a0),d0
    6c10:	|  |      move.l d0,-(sp)
    6c12:	|  |      jsr 13296 <__fixsfsi>
    6c18:	|  |      addq.l #4,sp
    6c1a:	|  |      move.l d0,140(sp)
    6c1e:	|  |      movea.l 152(sp),a0
    6c22:	|  |      move.l 4(a0),d0
    6c26:	|  |      move.l d0,-(sp)
    6c28:	|  |      jsr 13296 <__fixsfsi>
    6c2e:	|  |      addq.l #4,sp
    6c30:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    6c34:	|  |      movea.l 152(sp),a0
    6c38:	|  |      move.l 28(a0),132(sp)
    6c3e:	|  |      movea.l 152(sp),a0
    6c42:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    6c48:	|  |      movea.l 168e4 <currentFloor>,a0
    6c4e:	|  |      move.l 4(a0),d1
    6c52:	|  |      move.l 44(sp),d0
    6c56:	|  |      lsl.l #3,d0
    6c58:	|  |      movea.l d1,a0
    6c5a:	|  |      adda.l d0,a0
    6c5c:	|  |      move.l (a0),124(sp)
    6c60:	|  |      movea.l 168e4 <currentFloor>,a0
    6c66:	|  |      move.l 4(a0),d1
    6c6a:	|  |      move.l 44(sp),d0
    6c6e:	|  |      lsl.l #3,d0
    6c70:	|  |      movea.l d1,a0
    6c72:	|  |      adda.l d0,a0
    6c74:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    6c7a:	|  |      movea.l 168e4 <currentFloor>,a0
    6c80:	|  |      move.l 4(a0),d1
    6c84:	|  |      move.l 40(sp),d0
    6c88:	|  |      lsl.l #3,d0
    6c8a:	|  |      movea.l d1,a0
    6c8c:	|  |      adda.l d0,a0
    6c8e:	|  |      move.l (a0),116(sp)
    6c92:	|  |      movea.l 168e4 <currentFloor>,a0
    6c98:	|  |      move.l 4(a0),d1
    6c9c:	|  |      move.l 40(sp),d0
    6ca0:	|  |      lsl.l #3,d0
    6ca2:	|  |      movea.l d1,a0
    6ca4:	|  |      adda.l d0,a0
    6ca6:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    6cac:	|  |      move.l 140(sp),d0
    6cb0:	|  |      sub.l 132(sp),d0
    6cb4:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    6cb8:	|  |      move.l 136(sp),d0
    6cbc:	|  |      sub.l 128(sp),d0
    6cc0:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    6cc4:	|  |      move.l 116(sp),d0
    6cc8:	|  |      sub.l 124(sp),d0
    6ccc:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    6cd0:	|  |      move.l 112(sp),d0
    6cd4:	|  |      sub.l 120(sp),d0
    6cd8:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    6cdc:	|  |      move.l 124(sp),d0
    6ce0:	|  |      sub.l 140(sp),d0
    6ce4:	|  |      move.l 104(sp),-(sp)
    6ce8:	|  |      move.l d0,-(sp)
    6cea:	|  |      jsr 13858 <__mulsi3>
    6cf0:	|  |      addq.l #8,sp
    6cf2:	|  |      move.l d0,d2
    6cf4:	|  |      move.l 120(sp),d0
    6cf8:	|  |      sub.l 136(sp),d0
    6cfc:	|  |      move.l 108(sp),-(sp)
    6d00:	|  |      move.l d0,-(sp)
    6d02:	|  |      jsr 13858 <__mulsi3>
    6d08:	|  |      addq.l #8,sp
    6d0a:	|  |      move.l d2,d1
    6d0c:	|  |      sub.l d0,d1
    6d0e:	|  |      move.l d1,-(sp)
    6d10:	|  |      jsr 132be <__floatsidf>
    6d16:	|  |      addq.l #4,sp
    6d18:	|  |      move.l d0,32(sp)
    6d1c:	|  |      move.l d1,36(sp)
    6d20:	|  |      move.l 32(sp),88(sp)
    6d26:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    6d2c:	|  |      move.l 96(sp),-(sp)
    6d30:	|  |      move.l 112(sp),-(sp)
    6d34:	|  |      jsr 13858 <__mulsi3>
    6d3a:	|  |      addq.l #8,sp
    6d3c:	|  |      move.l d0,d2
    6d3e:	|  |      move.l 100(sp),-(sp)
    6d42:	|  |      move.l 108(sp),-(sp)
    6d46:	|  |      jsr 13858 <__mulsi3>
    6d4c:	|  |      addq.l #8,sp
    6d4e:	|  |      move.l d2,d1
    6d50:	|  |      sub.l d0,d1
    6d52:	|  |      move.l d1,-(sp)
    6d54:	|  |      jsr 132be <__floatsidf>
    6d5a:	|  |      addq.l #4,sp
    6d5c:	|  |      move.l d1,-(sp)
    6d5e:	|  |      move.l d0,-(sp)
    6d60:	|  |      move.l 100(sp),-(sp)
    6d64:	|  |      move.l 100(sp),-(sp)
    6d68:	|  |      jsr 13148 <__divdf3>
    6d6e:	|  |      lea 16(sp),sp
    6d72:	|  |      move.l d0,24(sp)
    6d76:	|  |      move.l d1,28(sp)
    6d7a:	|  |      move.l 24(sp),88(sp)
    6d80:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    6d86:	|  |      clr.l -(sp)
    6d88:	|  |      clr.l -(sp)
    6d8a:	|  |      move.l 100(sp),-(sp)
    6d8e:	|  |      move.l 100(sp),-(sp)
    6d92:	|  |      jsr 1341c <__gtdf2>
    6d98:	|  |      lea 16(sp),sp
    6d9c:	|  |      tst.l d0
    6d9e:	|  |  /-- ble.w 6e76 <doBorderStuff+0x358>
    6da2:	|  |  |   clr.l -(sp)
    6da4:	|  |  |   move.l #1072693248,-(sp)
    6daa:	|  |  |   move.l 100(sp),-(sp)
    6dae:	|  |  |   move.l 100(sp),-(sp)
    6db2:	|  |  |   jsr 134d6 <__ltdf2>
    6db8:	|  |  |   lea 16(sp),sp
    6dbc:	|  |  |   tst.l d0
    6dbe:	|  |  +-- bge.w 6e76 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    6dc2:	|  |  |   move.l 124(sp),-(sp)
    6dc6:	|  |  |   jsr 132be <__floatsidf>
    6dcc:	|  |  |   addq.l #4,sp
    6dce:	|  |  |   move.l d0,d2
    6dd0:	|  |  |   move.l d1,d3
    6dd2:	|  |  |   move.l 100(sp),-(sp)
    6dd6:	|  |  |   jsr 132be <__floatsidf>
    6ddc:	|  |  |   addq.l #4,sp
    6dde:	|  |  |   move.l 92(sp),-(sp)
    6de2:	|  |  |   move.l 92(sp),-(sp)
    6de6:	|  |  |   move.l d1,-(sp)
    6de8:	|  |  |   move.l d0,-(sp)
    6dea:	|  |  |   jsr 1334e <__muldf3>
    6df0:	|  |  |   lea 16(sp),sp
    6df4:	|  |  |   move.l d1,-(sp)
    6df6:	|  |  |   move.l d0,-(sp)
    6df8:	|  |  |   move.l d3,-(sp)
    6dfa:	|  |  |   move.l d2,-(sp)
    6dfc:	|  |  |   jsr 130e6 <__adddf3>
    6e02:	|  |  |   lea 16(sp),sp
    6e06:	|  |  |   move.l d1,-(sp)
    6e08:	|  |  |   move.l d0,-(sp)
    6e0a:	|  |  |   jsr 13256 <__fixdfsi>
    6e10:	|  |  |   addq.l #8,sp
    6e12:	|  |  |   movea.l 152(sp),a0
    6e16:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    6e1a:	|  |  |   move.l 120(sp),-(sp)
    6e1e:	|  |  |   jsr 132be <__floatsidf>
    6e24:	|  |  |   addq.l #4,sp
    6e26:	|  |  |   move.l d0,d2
    6e28:	|  |  |   move.l d1,d3
    6e2a:	|  |  |   move.l 96(sp),-(sp)
    6e2e:	|  |  |   jsr 132be <__floatsidf>
    6e34:	|  |  |   addq.l #4,sp
    6e36:	|  |  |   move.l 92(sp),-(sp)
    6e3a:	|  |  |   move.l 92(sp),-(sp)
    6e3e:	|  |  |   move.l d1,-(sp)
    6e40:	|  |  |   move.l d0,-(sp)
    6e42:	|  |  |   jsr 1334e <__muldf3>
    6e48:	|  |  |   lea 16(sp),sp
    6e4c:	|  |  |   move.l d1,-(sp)
    6e4e:	|  |  |   move.l d0,-(sp)
    6e50:	|  |  |   move.l d3,-(sp)
    6e52:	|  |  |   move.l d2,-(sp)
    6e54:	|  |  |   jsr 130e6 <__adddf3>
    6e5a:	|  |  |   lea 16(sp),sp
    6e5e:	|  |  |   move.l d1,-(sp)
    6e60:	|  |  |   move.l d0,-(sp)
    6e62:	|  |  |   jsr 13256 <__fixdfsi>
    6e68:	|  |  |   addq.l #8,sp
    6e6a:	|  |  |   movea.l 152(sp),a0
    6e6e:	|  |  |   move.l d0,40(a0)
    6e72:	|  +--|-- bra.w 70ce <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    6e76:	|  |  \-> move.l 140(sp),d0
    6e7a:	|  |      sub.l 124(sp),d0
    6e7e:	|  |      move.l d0,84(sp)
    6e82:	|  |      move.l 140(sp),d0
    6e86:	|  |      sub.l 116(sp),d0
    6e8a:	|  |      move.l d0,80(sp)
    6e8e:	|  |      move.l 132(sp),d0
    6e92:	|  |      sub.l 124(sp),d0
    6e96:	|  |      move.l d0,76(sp)
    6e9a:	|  |      move.l 132(sp),d0
    6e9e:	|  |      sub.l 116(sp),d0
    6ea2:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6ea6:	|  |      move.l 136(sp),d0
    6eaa:	|  |      sub.l 120(sp),d0
    6eae:	|  |      move.l d0,68(sp)
    6eb2:	|  |      move.l 136(sp),d0
    6eb6:	|  |      sub.l 112(sp),d0
    6eba:	|  |      move.l d0,64(sp)
    6ebe:	|  |      move.l 128(sp),d0
    6ec2:	|  |      sub.l 120(sp),d0
    6ec6:	|  |      move.l d0,60(sp)
    6eca:	|  |      move.l 128(sp),d0
    6ece:	|  |      sub.l 112(sp),d0
    6ed2:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6ed6:	|  |      move.l 84(sp),-(sp)
    6eda:	|  |      move.l 88(sp),-(sp)
    6ede:	|  |      jsr 13858 <__mulsi3>
    6ee4:	|  |      addq.l #8,sp
    6ee6:	|  |      move.l d0,84(sp)
    6eea:	|  |      move.l 80(sp),-(sp)
    6eee:	|  |      move.l 84(sp),-(sp)
    6ef2:	|  |      jsr 13858 <__mulsi3>
    6ef8:	|  |      addq.l #8,sp
    6efa:	|  |      move.l d0,80(sp)
    6efe:	|  |      move.l 76(sp),-(sp)
    6f02:	|  |      move.l 80(sp),-(sp)
    6f06:	|  |      jsr 13858 <__mulsi3>
    6f0c:	|  |      addq.l #8,sp
    6f0e:	|  |      move.l d0,76(sp)
    6f12:	|  |      move.l 72(sp),-(sp)
    6f16:	|  |      move.l 76(sp),-(sp)
    6f1a:	|  |      jsr 13858 <__mulsi3>
    6f20:	|  |      addq.l #8,sp
    6f22:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6f26:	|  |      move.l 68(sp),-(sp)
    6f2a:	|  |      move.l 72(sp),-(sp)
    6f2e:	|  |      jsr 13858 <__mulsi3>
    6f34:	|  |      addq.l #8,sp
    6f36:	|  |      move.l d0,68(sp)
    6f3a:	|  |      move.l 64(sp),-(sp)
    6f3e:	|  |      move.l 68(sp),-(sp)
    6f42:	|  |      jsr 13858 <__mulsi3>
    6f48:	|  |      addq.l #8,sp
    6f4a:	|  |      move.l d0,64(sp)
    6f4e:	|  |      move.l 60(sp),-(sp)
    6f52:	|  |      move.l 64(sp),-(sp)
    6f56:	|  |      jsr 13858 <__mulsi3>
    6f5c:	|  |      addq.l #8,sp
    6f5e:	|  |      move.l d0,60(sp)
    6f62:	|  |      move.l 56(sp),-(sp)
    6f66:	|  |      move.l 60(sp),-(sp)
    6f6a:	|  |      jsr 13858 <__mulsi3>
    6f70:	|  |      addq.l #8,sp
    6f72:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6f76:	|  |      move.l 84(sp),-(sp)
    6f7a:	|  |      jsr 132be <__floatsidf>
    6f80:	|  |      addq.l #4,sp
    6f82:	|  |      move.l d0,d2
    6f84:	|  |      move.l d1,d3
    6f86:	|  |      move.l 68(sp),-(sp)
    6f8a:	|  |      jsr 132be <__floatsidf>
    6f90:	|  |      addq.l #4,sp
    6f92:	|  |      move.l d1,-(sp)
    6f94:	|  |      move.l d0,-(sp)
    6f96:	|  |      move.l d3,-(sp)
    6f98:	|  |      move.l d2,-(sp)
    6f9a:	|  |      jsr 130e6 <__adddf3>
    6fa0:	|  |      lea 16(sp),sp
    6fa4:	|  |      move.l d1,-(sp)
    6fa6:	|  |      move.l d0,-(sp)
    6fa8:	|  |      jsr 1380e <sqrt>
    6fae:	|  |      addq.l #8,sp
    6fb0:	|  |      move.l d0,d2
    6fb2:	|  |      move.l d1,d3
    6fb4:	|  |      move.l 76(sp),-(sp)
    6fb8:	|  |      jsr 132be <__floatsidf>
    6fbe:	|  |      addq.l #4,sp
    6fc0:	|  |      move.l d0,d4
    6fc2:	|  |      move.l d1,d5
    6fc4:	|  |      move.l 60(sp),-(sp)
    6fc8:	|  |      jsr 132be <__floatsidf>
    6fce:	|  |      addq.l #4,sp
    6fd0:	|  |      move.l d1,-(sp)
    6fd2:	|  |      move.l d0,-(sp)
    6fd4:	|  |      move.l d5,-(sp)
    6fd6:	|  |      move.l d4,-(sp)
    6fd8:	|  |      jsr 130e6 <__adddf3>
    6fde:	|  |      lea 16(sp),sp
    6fe2:	|  |      move.l d1,-(sp)
    6fe4:	|  |      move.l d0,-(sp)
    6fe6:	|  |      jsr 1380e <sqrt>
    6fec:	|  |      addq.l #8,sp
    6fee:	|  |      move.l d1,-(sp)
    6ff0:	|  |      move.l d0,-(sp)
    6ff2:	|  |      move.l d3,-(sp)
    6ff4:	|  |      move.l d2,-(sp)
    6ff6:	|  |      jsr 130e6 <__adddf3>
    6ffc:	|  |      lea 16(sp),sp
    7000:	|  |      move.l d0,d2
    7002:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    7004:	|  |      move.l 80(sp),-(sp)
    7008:	|  |      jsr 132be <__floatsidf>
    700e:	|  |      addq.l #4,sp
    7010:	|  |      move.l d0,d4
    7012:	|  |      move.l d1,d5
    7014:	|  |      move.l 64(sp),-(sp)
    7018:	|  |      jsr 132be <__floatsidf>
    701e:	|  |      addq.l #4,sp
    7020:	|  |      move.l d1,-(sp)
    7022:	|  |      move.l d0,-(sp)
    7024:	|  |      move.l d5,-(sp)
    7026:	|  |      move.l d4,-(sp)
    7028:	|  |      jsr 130e6 <__adddf3>
    702e:	|  |      lea 16(sp),sp
    7032:	|  |      move.l d1,-(sp)
    7034:	|  |      move.l d0,-(sp)
    7036:	|  |      jsr 1380e <sqrt>
    703c:	|  |      addq.l #8,sp
    703e:	|  |      move.l d0,d4
    7040:	|  |      move.l d1,d5
    7042:	|  |      move.l 72(sp),-(sp)
    7046:	|  |      jsr 132be <__floatsidf>
    704c:	|  |      addq.l #4,sp
    704e:	|  |      move.l d0,d6
    7050:	|  |      move.l d1,d7
    7052:	|  |      move.l 56(sp),-(sp)
    7056:	|  |      jsr 132be <__floatsidf>
    705c:	|  |      addq.l #4,sp
    705e:	|  |      move.l d1,-(sp)
    7060:	|  |      move.l d0,-(sp)
    7062:	|  |      move.l d7,-(sp)
    7064:	|  |      move.l d6,-(sp)
    7066:	|  |      jsr 130e6 <__adddf3>
    706c:	|  |      lea 16(sp),sp
    7070:	|  |      move.l d1,-(sp)
    7072:	|  |      move.l d0,-(sp)
    7074:	|  |      jsr 1380e <sqrt>
    707a:	|  |      addq.l #8,sp
    707c:	|  |      move.l d1,-(sp)
    707e:	|  |      move.l d0,-(sp)
    7080:	|  |      move.l d5,-(sp)
    7082:	|  |      move.l d4,-(sp)
    7084:	|  |      jsr 130e6 <__adddf3>
    708a:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    708e:	|  |      move.l d1,-(sp)
    7090:	|  |      move.l d0,-(sp)
    7092:	|  |      move.l d3,-(sp)
    7094:	|  |      move.l d2,-(sp)
    7096:	|  |      jsr 134d6 <__ltdf2>
    709c:	|  |      lea 16(sp),sp
    70a0:	|  |      tst.l d0
    70a2:	|  |  /-- bge.s 70ba <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    70a4:	|  |  |   movea.l 152(sp),a0
    70a8:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    70ae:	|  |  |   movea.l 152(sp),a0
    70b2:	|  |  |   move.l 120(sp),40(a0)
    70b8:	|  +--|-- bra.s 70ce <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    70ba:	|  |  \-> movea.l 152(sp),a0
    70be:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    70c4:	|  |      movea.l 152(sp),a0
    70c8:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    70ce:	|  \----> movea.l 152(sp),a0
    70d2:	|         move.l 40(a0),d0
    70d6:	|         move.l d0,-(sp)
    70d8:	|         jsr 132fe <__floatsisf>
    70de:	|         addq.l #4,sp
    70e0:	|         move.l d0,d1
    70e2:	|         movea.l 152(sp),a0
    70e6:	|         move.l 4(a0),d0
    70ea:	|         move.l d0,-(sp)
    70ec:	|         move.l d1,-(sp)
    70ee:	|         jsr 135f2 <__subsf3>
    70f4:	|         addq.l #8,sp
    70f6:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    70fa:	|         movea.l 152(sp),a0
    70fe:	|         move.l (a0),d2
    7100:	|         movea.l 152(sp),a0
    7104:	|         move.l 36(a0),d0
    7108:	|         move.l d0,-(sp)
    710a:	|         jsr 132fe <__floatsisf>
    7110:	|         addq.l #4,sp
    7112:	|         move.l d0,-(sp)
    7114:	|         move.l d2,-(sp)
    7116:	|         jsr 135f2 <__subsf3>
    711c:	|         addq.l #8,sp
    711e:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    7122:	|         clr.l -(sp)
    7124:	|         move.l 52(sp),-(sp)
    7128:	|         jsr 1355a <__nesf2>
    712e:	|         addq.l #8,sp
    7130:	|         tst.l d0
    7132:	|     /-- bne.s 7146 <doBorderStuff+0x628>
    7134:	|     |   clr.l -(sp)
    7136:	|     |   move.l 56(sp),-(sp)
    713a:	|     |   jsr 1355a <__nesf2>
    7140:	|     |   addq.l #8,sp
    7142:	|     |   tst.l d0
    7144:	|  /--|-- beq.s 71bc <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    7146:	|  |  \-> move.l 52(sp),d0
    714a:	|  |      move.l d0,-(sp)
    714c:	|  |      move.l d0,-(sp)
    714e:	|  |      jsr 130b0 <__addsf3>
    7154:	|  |      addq.l #8,sp
    7156:	|  |      move.l d0,-(sp)
    7158:	|  |      move.l 52(sp),-(sp)
    715c:	|  |      jsr 1365e <atan2f>
    7162:	|  |      addq.l #8,sp
    7164:	|  |      move.l d0,-(sp)
    7166:	|  |      jsr 13216 <__extendsfdf2>
    716c:	|  |      addq.l #4,sp
    716e:	|  |      move.l #-1540411785,-(sp)
    7174:	|  |      move.l #1078765033,-(sp)
    717a:	|  |      move.l d1,-(sp)
    717c:	|  |      move.l d0,-(sp)
    717e:	|  |      jsr 1334e <__muldf3>
    7184:	|  |      lea 16(sp),sp
    7188:	|  |      clr.l -(sp)
    718a:	|  |      move.l #1080459264,-(sp)
    7190:	|  |      move.l d1,-(sp)
    7192:	|  |      move.l d0,-(sp)
    7194:	|  |      jsr 130e6 <__adddf3>
    719a:	|  |      lea 16(sp),sp
    719e:	|  |      move.l d1,-(sp)
    71a0:	|  |      move.l d0,-(sp)
    71a2:	|  |      jsr 13256 <__fixdfsi>
    71a8:	|  |      addq.l #8,sp
    71aa:	|  |      movea.l 152(sp),a0
    71ae:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    71b2:	|  |      movea.l 152(sp),a0
    71b6:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    71bc:	|  \----> pea 1 <_start+0x1>
    71c0:	|         move.l 156(sp),-(sp)
    71c4:	|         jsr 58ce <setFrames>
    71ca:	|         addq.l #8,sp
    return TRUE;
    71cc:	|         moveq #1,d0
}
    71ce:	\-------> movem.l (sp)+,d2-d7
    71d2:	          lea 124(sp),sp
    71d6:	          rts

000071d8 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    71d8:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    71da:	          move.l 1683c <allPeople>,(sp)
	while (thisPerson) {
    71e0:	      /-- bra.s 71f8 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    71e2:	/-----|-> movea.l (sp),a0
    71e4:	|     |   movea.l 102(a0),a0
    71e8:	|     |   move.l 4(a0),d0
    71ec:	|     |   cmp.l 8(sp),d0
    71f0:	|  /--|-- beq.s 71fe <findPerson+0x26>
		thisPerson = thisPerson -> next;
    71f2:	|  |  |   movea.l (sp),a0
    71f4:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    71f8:	|  |  \-> tst.l (sp)
    71fa:	\--|----- bne.s 71e2 <findPerson+0xa>
    71fc:	   |  /-- bra.s 7200 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    71fe:	   \--|-> nop
	}
	return thisPerson;
    7200:	      \-> move.l (sp),d0
}
    7202:	          addq.l #4,sp
    7204:	          rts

00007206 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    7206:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    7208:	       move.l 12(sp),-(sp)
    720c:	       jsr 71d8 <findPerson>
    7212:	       addq.l #4,sp
    7214:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    7216:	   /-- bne.s 721c <floatCharacter+0x16>
    7218:	   |   clr.w d0
    721a:	/--|-- bra.s 7226 <floatCharacter+0x20>
	moveMe -> floaty = f;
    721c:	|  \-> movea.l (sp),a0
    721e:	|      move.l 8(sp),12(a0)
	return TRUE;
    7224:	|      moveq #1,d0
}
    7226:	\----> addq.l #4,sp
    7228:	       rts

0000722a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    722a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    722c:	          tst.l 8(sp)
    7230:	      /-- bne.s 723e <forceWalkingPerson+0x14>
    7232:	      |   tst.l 12(sp)
    7236:	      +-- bne.s 723e <forceWalkingPerson+0x14>
    7238:	      |   clr.w d0
    723a:	/-----|-- bra.w 72d0 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    723e:	|     \-> move.l 16(sp),-(sp)
    7242:	|         jsr 71d8 <findPerson>
    7248:	|         addq.l #4,sp
    724a:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    724c:	|     /-- bne.s 7252 <forceWalkingPerson+0x28>
    724e:	|     |   clr.w d0
    7250:	+-----|-- bra.s 72d0 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7252:	|     \-> movea.l (sp),a0
    7254:	|         move.l 56(a0),d0
    7258:	|     /-- beq.s 726a <forceWalkingPerson+0x40>
    725a:	|     |   movea.l (sp),a0
    725c:	|     |   move.l 56(a0),d0
    7260:	|     |   move.l d0,-(sp)
    7262:	|     |   jsr 2154 <abortFunction>
    7268:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    726a:	|     \-> movea.l (sp),a0
    726c:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    7272:	|         movea.l (sp),a0
    7274:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    7278:	|         movea.l (sp),a0
    727a:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    7280:	|         movea.l (sp),a0
    7282:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    7288:	|         movea.l (sp),a0
    728a:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    7290:	|         movea.l (sp),a0
    7292:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7296:	|         movea.l (sp),a0
    7298:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    729c:	|         move.l (sp),-(sp)
    729e:	|         jsr 6b1e <doBorderStuff>
    72a4:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    72a6:	|         pea 1 <_start+0x1>
    72aa:	|         move.l 4(sp),-(sp)
    72ae:	|         jsr 8966 <walkMe>
    72b4:	|         addq.l #8,sp
    72b6:	|         tst.w d0
    72b8:	|     /-- bne.s 72c2 <forceWalkingPerson+0x98>
    72ba:	|     |   movea.l (sp),a0
    72bc:	|     |   move.w 54(a0),d0
    72c0:	|  /--|-- beq.s 72ce <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    72c2:	|  |  \-> movea.l (sp),a0
    72c4:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    72ca:	|  |      moveq #1,d0
    72cc:	+--|----- bra.s 72d0 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    72ce:	|  \----> clr.w d0
    }
}
    72d0:	\-------> addq.l #4,sp
    72d2:	          rts

000072d4 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    72d4:	                lea -56(sp),sp
    72d8:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    72da:	                move.l #320,56(sp)
    72e2:	                move.l #200,52(sp)
    72ea:	                moveq #-1,d0
    72ec:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    72f0:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    72f8:	                clr.l 44(sp)
    72fc:	   /----------- bra.w 74d4 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    7300:	/--|----------> movea.l 168e4 <currentFloor>,a0
    7306:	|  |            move.l 12(a0),d1
    730a:	|  |            move.l 44(sp),d0
    730e:	|  |            lsl.l #3,d0
    7310:	|  |            movea.l d1,a0
    7312:	|  |            adda.l d0,a0
    7314:	|  |            move.l (a0),d0
    7316:	|  |            move.l d0,d1
    7318:	|  |            subq.l #1,d1
    731a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    731e:	|  |            clr.l 40(sp)
    7322:	|  |     /----- bra.w 74b2 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    7326:	|  |  /--|----> movea.l 168e4 <currentFloor>,a0
    732c:	|  |  |  |      move.l 4(a0),d1
    7330:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    7336:	|  |  |  |      movea.l 12(a0),a0
    733a:	|  |  |  |      move.l 44(sp),d0
    733e:	|  |  |  |      lsl.l #3,d0
    7340:	|  |  |  |      adda.l d0,a0
    7342:	|  |  |  |      movea.l 4(a0),a0
    7346:	|  |  |  |      move.l 40(sp),d0
    734a:	|  |  |  |      add.l d0,d0
    734c:	|  |  |  |      add.l d0,d0
    734e:	|  |  |  |      adda.l d0,a0
    7350:	|  |  |  |      move.l (a0),d0
    7352:	|  |  |  |      lsl.l #3,d0
    7354:	|  |  |  |      movea.l d1,a0
    7356:	|  |  |  |      adda.l d0,a0
    7358:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    735c:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    7362:	|  |  |  |      move.l 4(a0),d1
    7366:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    736c:	|  |  |  |      movea.l 12(a0),a0
    7370:	|  |  |  |      move.l 44(sp),d0
    7374:	|  |  |  |      lsl.l #3,d0
    7376:	|  |  |  |      adda.l d0,a0
    7378:	|  |  |  |      movea.l 4(a0),a0
    737c:	|  |  |  |      move.l 40(sp),d0
    7380:	|  |  |  |      add.l d0,d0
    7382:	|  |  |  |      add.l d0,d0
    7384:	|  |  |  |      adda.l d0,a0
    7386:	|  |  |  |      move.l (a0),d0
    7388:	|  |  |  |      lsl.l #3,d0
    738a:	|  |  |  |      movea.l d1,a0
    738c:	|  |  |  |      adda.l d0,a0
    738e:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    7394:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    739a:	|  |  |  |      move.l 4(a0),d1
    739e:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    73a4:	|  |  |  |      movea.l 12(a0),a0
    73a8:	|  |  |  |      move.l 44(sp),d0
    73ac:	|  |  |  |      lsl.l #3,d0
    73ae:	|  |  |  |      adda.l d0,a0
    73b0:	|  |  |  |      movea.l 4(a0),a0
    73b4:	|  |  |  |      move.l 36(sp),d0
    73b8:	|  |  |  |      add.l d0,d0
    73ba:	|  |  |  |      add.l d0,d0
    73bc:	|  |  |  |      adda.l d0,a0
    73be:	|  |  |  |      move.l (a0),d0
    73c0:	|  |  |  |      lsl.l #3,d0
    73c2:	|  |  |  |      movea.l d1,a0
    73c4:	|  |  |  |      adda.l d0,a0
    73c6:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    73ca:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    73d0:	|  |  |  |      move.l 4(a0),d1
    73d4:	|  |  |  |      movea.l 168e4 <currentFloor>,a0
    73da:	|  |  |  |      movea.l 12(a0),a0
    73de:	|  |  |  |      move.l 44(sp),d0
    73e2:	|  |  |  |      lsl.l #3,d0
    73e4:	|  |  |  |      adda.l d0,a0
    73e6:	|  |  |  |      movea.l 4(a0),a0
    73ea:	|  |  |  |      move.l 36(sp),d0
    73ee:	|  |  |  |      add.l d0,d0
    73f0:	|  |  |  |      add.l d0,d0
    73f2:	|  |  |  |      adda.l d0,a0
    73f4:	|  |  |  |      move.l (a0),d0
    73f6:	|  |  |  |      lsl.l #3,d0
    73f8:	|  |  |  |      movea.l d1,a0
    73fa:	|  |  |  |      adda.l d0,a0
    73fc:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    7402:	|  |  |  |      movea.l 68(sp),a0
    7406:	|  |  |  |      move.l (a0),d1
    7408:	|  |  |  |      movea.l 64(sp),a0
    740c:	|  |  |  |      move.l (a0),d0
    740e:	|  |  |  |      move.l d1,-(sp)
    7410:	|  |  |  |      move.l d0,-(sp)
    7412:	|  |  |  |      move.l 24(sp),-(sp)
    7416:	|  |  |  |      move.l 32(sp),-(sp)
    741a:	|  |  |  |      move.l 40(sp),-(sp)
    741e:	|  |  |  |      move.l 48(sp),-(sp)
    7422:	|  |  |  |      lea 28(sp),a0
    7426:	|  |  |  |      move.l a0,-(sp)
    7428:	|  |  |  |      lea 36(sp),a0
    742c:	|  |  |  |      move.l a0,-(sp)
    742e:	|  |  |  |      jsr 11ea6 <closestPointOnLine>
    7434:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    7438:	|  |  |  |      movea.l 64(sp),a0
    743c:	|  |  |  |      move.l (a0),d0
    743e:	|  |  |  |      move.l 8(sp),d1
    7442:	|  |  |  |      move.l d0,d2
    7444:	|  |  |  |      sub.l d1,d2
    7446:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    744a:	|  |  |  |      movea.l 68(sp),a0
    744e:	|  |  |  |      move.l (a0),d0
    7450:	|  |  |  |      move.l 4(sp),d1
    7454:	|  |  |  |      move.l d0,d2
    7456:	|  |  |  |      sub.l d1,d2
    7458:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    745c:	|  |  |  |      move.l 28(sp),-(sp)
    7460:	|  |  |  |      move.l 32(sp),-(sp)
    7464:	|  |  |  |      jsr 13858 <__mulsi3>
    746a:	|  |  |  |      addq.l #8,sp
    746c:	|  |  |  |      move.l d0,d2
    746e:	|  |  |  |      move.l 24(sp),-(sp)
    7472:	|  |  |  |      move.l 28(sp),-(sp)
    7476:	|  |  |  |      jsr 13858 <__mulsi3>
    747c:	|  |  |  |      addq.l #8,sp
    747e:	|  |  |  |      move.l d2,d1
    7480:	|  |  |  |      add.l d0,d1
    7482:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    7486:	|  |  |  |      move.l 12(sp),d2
    748a:	|  |  |  |      cmp.l 32(sp),d2
    748e:	|  |  |  |  /-- bge.s 74a8 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    7490:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    7496:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    749c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    74a2:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    74a8:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    74ae:	|  |  |  |      addq.l #1,40(sp)
    74b2:	|  |  |  \----> movea.l 168e4 <currentFloor>,a0
    74b8:	|  |  |         move.l 12(a0),d1
    74bc:	|  |  |         move.l 44(sp),d0
    74c0:	|  |  |         lsl.l #3,d0
    74c2:	|  |  |         movea.l d1,a0
    74c4:	|  |  |         adda.l d0,a0
    74c6:	|  |  |         move.l (a0),d0
    74c8:	|  |  |         cmp.l 40(sp),d0
    74cc:	|  |  \-------- bgt.w 7326 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    74d0:	|  |            addq.l #1,44(sp)
    74d4:	|  \----------> movea.l 168e4 <currentFloor>,a0
    74da:	|               move.l 8(a0),d0
    74de:	|               cmp.l 44(sp),d0
    74e2:	\-------------- bgt.w 7300 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    74e6:	                moveq #-1,d0
    74e8:	                cmp.l 48(sp),d0
    74ec:	            /-- bne.s 74f2 <handleClosestPoint+0x21e>
    74ee:	            |   clr.w d0
    74f0:	         /--|-- bra.s 750c <handleClosestPoint+0x238>
	*setX = gotX;
    74f2:	         |  \-> movea.l 64(sp),a0
    74f6:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    74fa:	         |      movea.l 68(sp),a0
    74fe:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    7502:	         |      movea.l 72(sp),a0
    7506:	         |      move.l 48(sp),(a0)

	return TRUE;
    750a:	         |      moveq #1,d0
}
    750c:	         \----> move.l (sp)+,d2
    750e:	                lea 56(sp),sp
    7512:	                rts

00007514 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    7514:	clr.l 16850 <personRegion+0x10>
	personRegion.sY = 0;
    751a:	clr.l 16854 <personRegion+0x14>
	personRegion.di = -1;
    7520:	moveq #-1,d0
    7522:	move.l d0,16858 <personRegion+0x18>
	allScreenRegions = NULL;
    7528:	clr.l 168dc <allScreenRegions>

	return TRUE;
    752e:	moveq #1,d0
}
    7530:	rts

00007532 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    7532:	          subq.l #4,sp
    7534:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    7536:	          tst.l 12(sp)
    753a:	      /-- bne.s 7542 <jumpPerson+0x10>
    753c:	      |   tst.l 16(sp)
    7540:	/-----|-- beq.s 75b6 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    7542:	|     \-> move.l 20(sp),-(sp)
    7546:	|         jsr 71d8 <findPerson>
    754c:	|         addq.l #4,sp
    754e:	|         move.l d0,4(sp)
    if (!moveMe) return;
    7552:	|  /----- beq.s 75ba <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7554:	|  |      movea.l 4(sp),a0
    7558:	|  |      move.l 56(a0),d0
    755c:	|  |  /-- beq.s 7570 <jumpPerson+0x3e>
    755e:	|  |  |   movea.l 4(sp),a0
    7562:	|  |  |   move.l 56(a0),d0
    7566:	|  |  |   move.l d0,-(sp)
    7568:	|  |  |   jsr 2154 <abortFunction>
    756e:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    7570:	|  |  \-> movea.l 4(sp),a0
    7574:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    7578:	|  |      movea.l 4(sp),a0
    757c:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    7580:	|  |      movea.l 4(sp),a0
    7584:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    7588:	|  |      move.l 16(sp),-(sp)
    758c:	|  |      jsr 132fe <__floatsisf>
    7592:	|  |      addq.l #4,sp
    7594:	|  |      move.l d0,d2
    7596:	|  |      move.l 12(sp),-(sp)
    759a:	|  |      jsr 132fe <__floatsisf>
    75a0:	|  |      addq.l #4,sp
    75a2:	|  |      move.l d2,-(sp)
    75a4:	|  |      move.l d0,-(sp)
    75a6:	|  |      move.l 12(sp),-(sp)
    75aa:	|  |      jsr 7920 <moveAndScale>
    75b0:	|  |      lea 12(sp),sp
    75b4:	|  |  /-- bra.s 75bc <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    75b6:	\--|--|-> nop
    75b8:	   |  +-- bra.s 75bc <jumpPerson+0x8a>
    if (!moveMe) return;
    75ba:	   \--|-> nop
}
    75bc:	      \-> move.l (sp)+,d2
    75be:	          addq.l #4,sp
    75c0:	          rts

000075c2 <killAllPeople>:


void killAllPeople () {
    75c2:	          subq.l #8,sp
    75c4:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    75c6:	   /----- bra.s 7632 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    75c8:	/--|----> movea.l 1683c <allPeople>,a0
    75ce:	|  |      move.l 56(a0),d0
    75d2:	|  |  /-- beq.s 75e8 <killAllPeople+0x26>
    75d4:	|  |  |   movea.l 1683c <allPeople>,a0
    75da:	|  |  |   move.l 56(a0),d0
    75de:	|  |  |   move.l d0,-(sp)
    75e0:	|  |  |   jsr 2154 <abortFunction>
    75e6:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    75e8:	|  |  \-> movea.l 1683c <allPeople>,a0
    75ee:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    75f2:	|  |      move.l 1683c <allPeople>,8(sp)
		allPeople = allPeople -> next;
    75fa:	|  |      movea.l 1683c <allPeople>,a0
    7600:	|  |      move.l 24(a0),d0
    7604:	|  |      move.l d0,1683c <allPeople>
		removeObjectType (killPeople -> thisType);
    760a:	|  |      movea.l 8(sp),a0
    760e:	|  |      move.l 102(a0),d0
    7612:	|  |      move.l d0,-(sp)
    7614:	|  |      jsr a1dc <removeObjectType>
    761a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    761c:	|  |      move.l 8(sp),4(sp)
    7622:	|  |      move.l 16784 <SysBase>,d0
    7628:	|  |      movea.l d0,a6
    762a:	|  |      movea.l 4(sp),a1
    762e:	|  |      jsr -690(a6)
	while (allPeople) {
    7632:	|  \----> move.l 1683c <allPeople>,d0
    7638:	\-------- bne.s 75c8 <killAllPeople+0x6>
	}
}
    763a:	          nop
    763c:	          nop
    763e:	          movea.l (sp)+,a6
    7640:	          addq.l #8,sp
    7642:	          rts

00007644 <killMostPeople>:

void killMostPeople() {
    7644:	          lea -12(sp),sp
    7648:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    764a:	          move.l #92220,12(sp)

    while (*lookyHere) {
    7652:	   /----- bra.w 76d8 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    7656:	/--|----> movea.l 12(sp),a0
    765a:	|  |      movea.l (a0),a0
    765c:	|  |      move.l 106(a0),d0
    7660:	|  |      moveq #32,d1
    7662:	|  |      and.l d1,d0
    7664:	|  |  /-- beq.s 7676 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    7666:	|  |  |   movea.l 12(sp),a0
    766a:	|  |  |   move.l (a0),d0
    766c:	|  |  |   moveq #24,d1
    766e:	|  |  |   add.l d0,d1
    7670:	|  |  |   move.l d1,12(sp)
    7674:	|  +--|-- bra.s 76d8 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    7676:	|  |  \-> movea.l 12(sp),a0
    767a:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    767e:	|  |      movea.l 8(sp),a0
    7682:	|  |      move.l 24(a0),d0
    7686:	|  |      movea.l 12(sp),a0
    768a:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    768c:	|  |      movea.l 8(sp),a0
    7690:	|  |      move.l 56(a0),d0
    7694:	|  |  /-- beq.s 76a8 <killMostPeople+0x64>
    7696:	|  |  |   movea.l 8(sp),a0
    769a:	|  |  |   move.l 56(a0),d0
    769e:	|  |  |   move.l d0,-(sp)
    76a0:	|  |  |   jsr 2154 <abortFunction>
    76a6:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    76a8:	|  |  \-> movea.l 8(sp),a0
    76ac:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    76b0:	|  |      movea.l 8(sp),a0
    76b4:	|  |      move.l 102(a0),d0
    76b8:	|  |      move.l d0,-(sp)
    76ba:	|  |      jsr a1dc <removeObjectType>
    76c0:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    76c2:	|  |      move.l 8(sp),4(sp)
    76c8:	|  |      move.l 16784 <SysBase>,d0
    76ce:	|  |      movea.l d0,a6
    76d0:	|  |      movea.l 4(sp),a1
    76d4:	|  |      jsr -690(a6)
    while (*lookyHere) {
    76d8:	|  \----> movea.l 12(sp),a0
    76dc:	|         move.l (a0),d0
    76de:	\-------- bne.w 7656 <killMostPeople+0x12>
        }
    }
}
    76e2:	          nop
    76e4:	          nop
    76e6:	          movea.l (sp)+,a6
    76e8:	          lea 12(sp),sp
    76ec:	          rts

000076ee <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    76ee:	clr.l -(sp)
    76f0:	move.l sp,d0
    76f2:	addq.l #8,d0
    76f4:	move.l d0,-(sp)
    76f6:	jsr 58ce <setFrames>
    76fc:	addq.l #8,sp
}
    76fe:	nop
    7700:	rts

00007702 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7702:	          lea -12(sp),sp
    7706:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    7708:	          tst.l 20(sp)
    770c:	      /-- bne.s 771a <makeWalkingPerson+0x18>
    770e:	      |   tst.l 24(sp)
    7712:	      +-- bne.s 771a <makeWalkingPerson+0x18>
    7714:	      |   clr.w d0
    7716:	/-----|-- bra.w 78b2 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    771a:	|     \-> movea.l 168e4 <currentFloor>,a0
    7720:	|         move.l 8(a0),d0
    7724:	|     /-- bne.s 772c <makeWalkingPerson+0x2a>
    7726:	|     |   clr.w d0
    7728:	+-----|-- bra.w 78b2 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    772c:	|     \-> move.l 28(sp),-(sp)
    7730:	|         jsr 71d8 <findPerson>
    7736:	|         addq.l #4,sp
    7738:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    773c:	|     /-- bne.s 7744 <makeWalkingPerson+0x42>
    773e:	|     |   clr.w d0
    7740:	+-----|-- bra.w 78b2 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    7744:	|     \-> movea.l 12(sp),a0
    7748:	|         move.l 56(a0),d0
    774c:	|     /-- beq.s 7760 <makeWalkingPerson+0x5e>
    774e:	|     |   movea.l 12(sp),a0
    7752:	|     |   move.l 56(a0),d0
    7756:	|     |   move.l d0,-(sp)
    7758:	|     |   jsr 2154 <abortFunction>
    775e:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    7760:	|     \-> movea.l 12(sp),a0
    7764:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    7768:	|         movea.l 12(sp),a0
    776c:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    7772:	|         movea.l 12(sp),a0
    7776:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    777c:	|         movea.l 12(sp),a0
    7780:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    7786:	|         movea.l 12(sp),a0
    778a:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    7790:	|         move.l 24(sp),-(sp)
    7794:	|         move.l 24(sp),-(sp)
    7798:	|         jsr 123a8 <inFloor>
    779e:	|         addq.l #8,sp
    77a0:	|         movea.l 12(sp),a0
    77a4:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    77a8:	|         movea.l 12(sp),a0
    77ac:	|         move.l 48(a0),d0
    77b0:	|         moveq #-1,d1
    77b2:	|         cmp.l d0,d1
    77b4:	|     /-- bne.s 77e4 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    77b6:	|     |   movea.w #48,a0
    77ba:	|     |   adda.l 12(sp),a0
    77be:	|     |   moveq #32,d1
    77c0:	|     |   add.l 12(sp),d1
    77c4:	|     |   moveq #28,d0
    77c6:	|     |   add.l 12(sp),d0
    77ca:	|     |   move.l a0,-(sp)
    77cc:	|     |   move.l d1,-(sp)
    77ce:	|     |   move.l d0,-(sp)
    77d0:	|     |   jsr 72d4 <handleClosestPoint>
    77d6:	|     |   lea 12(sp),sp
    77da:	|     |   tst.w d0
    77dc:	|     +-- bne.s 77e4 <makeWalkingPerson+0xe2>
    77de:	|     |   clr.w d0
    77e0:	+-----|-- bra.w 78b2 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    77e4:	|     \-> movea.l 12(sp),a0
    77e8:	|         move.l 4(a0),d0
    77ec:	|         move.l d0,-(sp)
    77ee:	|         jsr 13296 <__fixsfsi>
    77f4:	|         addq.l #4,sp
    77f6:	|         move.l d0,d2
    77f8:	|         movea.l 12(sp),a0
    77fc:	|         move.l (a0),d0
    77fe:	|         move.l d0,-(sp)
    7800:	|         jsr 13296 <__fixsfsi>
    7806:	|         addq.l #4,sp
    7808:	|         move.l d2,-(sp)
    780a:	|         move.l d0,-(sp)
    780c:	|         jsr 123a8 <inFloor>
    7812:	|         addq.l #8,sp
    7814:	|         movea.l 12(sp),a0
    7818:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    781c:	|         movea.l 12(sp),a0
    7820:	|         move.l 44(a0),d0
    7824:	|         moveq #-1,d1
    7826:	|         cmp.l d0,d1
    7828:	|     /-- bne.s 787a <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    782a:	|     |   movea.l 12(sp),a0
    782e:	|     |   move.l (a0),d0
    7830:	|     |   move.l d0,-(sp)
    7832:	|     |   jsr 13296 <__fixsfsi>
    7838:	|     |   addq.l #4,sp
    783a:	|     |   move.l d0,8(sp)
    783e:	|     |   movea.l 12(sp),a0
    7842:	|     |   move.l 4(a0),d0
    7846:	|     |   move.l d0,-(sp)
    7848:	|     |   jsr 13296 <__fixsfsi>
    784e:	|     |   addq.l #4,sp
    7850:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    7854:	|     |   moveq #44,d0
    7856:	|     |   add.l 12(sp),d0
    785a:	|     |   move.l d0,-(sp)
    785c:	|     |   lea 8(sp),a0
    7860:	|     |   move.l a0,-(sp)
    7862:	|     |   moveq #16,d0
    7864:	|     |   add.l sp,d0
    7866:	|     |   move.l d0,-(sp)
    7868:	|     |   jsr 72d4 <handleClosestPoint>
    786e:	|     |   lea 12(sp),sp
    7872:	|     |   tst.w d0
    7874:	|     +-- bne.s 787a <makeWalkingPerson+0x178>
    7876:	|     |   clr.w d0
    7878:	+-----|-- bra.s 78b2 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    787a:	|     \-> move.l 12(sp),-(sp)
    787e:	|         jsr 6b1e <doBorderStuff>
    7884:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    7886:	|         clr.l -(sp)
    7888:	|         move.l 16(sp),-(sp)
    788c:	|         jsr 8966 <walkMe>
    7892:	|         addq.l #8,sp
    7894:	|         tst.w d0
    7896:	|     /-- bne.s 78a2 <makeWalkingPerson+0x1a0>
    7898:	|     |   movea.l 12(sp),a0
    789c:	|     |   move.w 54(a0),d0
    78a0:	|  /--|-- beq.s 78b0 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    78a2:	|  |  \-> movea.l 12(sp),a0
    78a6:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    78ac:	|  |      moveq #1,d0
    78ae:	+--|----- bra.s 78b2 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    78b0:	|  \----> clr.w d0
	}
}
    78b2:	\-------> move.l (sp)+,d2
    78b4:	          lea 12(sp),sp
    78b8:	          rts

000078ba <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    78ba:	       lea -16(sp),sp
    78be:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    78c0:	       moveq #12,d0
    78c2:	       move.l d0,16(sp)
    78c6:	       clr.l 12(sp)
    78ca:	       move.l 16784 <SysBase>,d0
    78d0:	       movea.l d0,a6
    78d2:	       move.l 16(sp),d0
    78d6:	       move.l 12(sp),d1
    78da:	       jsr -684(a6)
    78de:	       move.l d0,8(sp)
    78e2:	       move.l 8(sp),d0
    78e6:	       move.l d0,4(sp)
    if(newAnim == 0) {
    78ea:	   /-- bne.s 78fe <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    78ec:	   |   pea 149fd <custom.c.9a493ead+0x24d>
    78f2:	   |   jsr 13046 <KPrintF>
    78f8:	   |   addq.l #4,sp
        return NULL;    
    78fa:	   |   moveq #0,d0
    78fc:	/--|-- bra.s 7918 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    78fe:	|  \-> movea.l 4(sp),a0
    7902:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    7904:	|      movea.l 4(sp),a0
    7908:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    790c:	|      movea.l 4(sp),a0
    7910:	|      clr.l 4(a0)
	return newAnim;
    7914:	|      move.l 4(sp),d0
}
    7918:	\----> movea.l (sp)+,a6
    791a:	       lea 16(sp),sp
    791e:	       rts

00007920 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    7920:	    move.l d2,-(sp)
	me->x = x;
    7922:	    movea.l 8(sp),a0
    7926:	    move.l 12(sp),(a0)
	me->y = y;
    792a:	    movea.l 8(sp),a0
    792e:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    7934:	    movea.l 8(sp),a0
    7938:	    move.l 106(a0),d0
    793c:	    moveq #2,d1
    793e:	    and.l d1,d0
    7940:	/-- bne.s 7998 <moveAndScale+0x78>
    7942:	|   move.w 16138 <scaleDivide>,d0
    7948:	+-- beq.s 7998 <moveAndScale+0x78>
    794a:	|   movea.l 8(sp),a0
    794e:	|   move.l 4(a0),d2
    7952:	|   move.w 16136 <scaleHorizon>,d0
    7958:	|   movea.w d0,a0
    795a:	|   move.l a0,-(sp)
    795c:	|   jsr 132fe <__floatsisf>
    7962:	|   addq.l #4,sp
    7964:	|   move.l d0,-(sp)
    7966:	|   move.l d2,-(sp)
    7968:	|   jsr 135f2 <__subsf3>
    796e:	|   addq.l #8,sp
    7970:	|   move.l d0,d2
    7972:	|   move.w 16138 <scaleDivide>,d0
    7978:	|   movea.w d0,a0
    797a:	|   move.l a0,-(sp)
    797c:	|   jsr 132fe <__floatsisf>
    7982:	|   addq.l #4,sp
    7984:	|   move.l d0,-(sp)
    7986:	|   move.l d2,-(sp)
    7988:	|   jsr 131aa <__divsf3>
    798e:	|   addq.l #8,sp
    7990:	|   movea.l 8(sp),a0
    7994:	|   move.l d0,20(a0)
}
    7998:	\-> nop
    799a:	    move.l (sp)+,d2
    799c:	    rts

0000799e <removeOneCharacter>:

void removeOneCharacter (int i) {
    799e:	          lea -12(sp),sp
    79a2:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    79a4:	          move.l 20(sp),-(sp)
    79a8:	          jsr 71d8 <findPerson>
    79ae:	          addq.l #4,sp
    79b0:	          move.l d0,8(sp)

    if (p) {
    79b4:	/-------- beq.w 7a60 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    79b8:	|         move.l 168e0 <overRegion>,d0
    79be:	|         cmpi.l #92224,d0
    79c4:	|     /-- bne.s 79e2 <removeOneCharacter+0x44>
    79c6:	|     |   movea.l 168e0 <overRegion>,a0
    79cc:	|     |   move.l 28(a0),d1
    79d0:	|     |   movea.l 8(sp),a0
    79d4:	|     |   move.l 102(a0),d0
    79d8:	|     |   cmp.l d1,d0
    79da:	|     +-- bne.s 79e2 <removeOneCharacter+0x44>
            overRegion = NULL;
    79dc:	|     |   clr.l 168e0 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    79e2:	|     \-> movea.l 8(sp),a0
    79e6:	|         move.l 56(a0),d0
    79ea:	|     /-- beq.s 79fe <removeOneCharacter+0x60>
    79ec:	|     |   movea.l 8(sp),a0
    79f0:	|     |   move.l 56(a0),d0
    79f4:	|     |   move.l d0,-(sp)
    79f6:	|     |   jsr 2154 <abortFunction>
    79fc:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    79fe:	|     \-> movea.l 8(sp),a0
    7a02:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    7a06:	|         move.l #92220,12(sp)
    7a0e:	|     /-- bra.s 7a1e <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    7a10:	|  /--|-> movea.l 12(sp),a0
    7a14:	|  |  |   move.l (a0),d0
    7a16:	|  |  |   moveq #24,d1
    7a18:	|  |  |   add.l d0,d1
    7a1a:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    7a1e:	|  |  \-> movea.l 12(sp),a0
    7a22:	|  |      move.l (a0),d0
    7a24:	|  |      cmp.l 8(sp),d0
    7a28:	|  \----- bne.s 7a10 <removeOneCharacter+0x72>

        *killPeople = p->next;
    7a2a:	|         movea.l 8(sp),a0
    7a2e:	|         move.l 24(a0),d0
    7a32:	|         movea.l 12(sp),a0
    7a36:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    7a38:	|         movea.l 8(sp),a0
    7a3c:	|         move.l 102(a0),d0
    7a40:	|         move.l d0,-(sp)
    7a42:	|         jsr a1dc <removeObjectType>
    7a48:	|         addq.l #4,sp
        FreeVec(p);
    7a4a:	|         move.l 8(sp),4(sp)
    7a50:	|         move.l 16784 <SysBase>,d0
    7a56:	|         movea.l d0,a6
    7a58:	|         movea.l 4(sp),a1
    7a5c:	|         jsr -690(a6)
    }
}
    7a60:	\-------> nop
    7a62:	          movea.l (sp)+,a6
    7a64:	          lea 12(sp),sp
    7a68:	          rts

00007a6a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    7a6a:	       subq.l #8,sp
    7a6c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    7a6e:	       movea.l 16(sp),a0
    7a72:	       movea.l 68(a0),a0
    7a76:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    7a7c:	       movea.l 16(sp),a0
    7a80:	       move.l 80(a0),d2
    7a84:	       move.l 4(sp),-(sp)
    7a88:	       pea b4 <_start+0xb4>
    7a8c:	       jsr 138d6 <__divsi3>
    7a92:	       addq.l #8,sp
    7a94:	       add.l d2,d0
    7a96:	       move.l d0,d1
    7a98:	       addi.l #180,d1
    7a9e:	       movea.l 16(sp),a0
    7aa2:	       move.l 88(a0),d0
    7aa6:	       move.l d1,d2
    7aa8:	       add.l d0,d2
    7aaa:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    7aae:	   /-- bra.s 7ab8 <rethinkAngle+0x4e>
    7ab0:	/--|-> addi.l #-360,8(sp)
    7ab8:	|  \-> cmpi.l #359,8(sp)
    7ac0:	\----- bgt.s 7ab0 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    7ac2:	       move.l 4(sp),-(sp)
    7ac6:	       move.l 12(sp),-(sp)
    7aca:	       jsr 13858 <__mulsi3>
    7ad0:	       addq.l #8,sp
    7ad2:	       pea 168 <decodeFilename+0x50>
    7ad6:	       move.l d0,-(sp)
    7ad8:	       jsr 138d6 <__divsi3>
    7ade:	       addq.l #8,sp
    7ae0:	       movea.l 16(sp),a0
    7ae4:	       move.l d0,94(a0)
}
    7ae8:	       nop
    7aea:	       move.l (sp)+,d2
    7aec:	       addq.l #8,sp
    7aee:	       rts

00007af0 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    7af0:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    7af2:	          movea.l 8(sp),a0
    7af6:	          move.l 8(a0),d0
    7afa:	          move.l 12(sp),-(sp)
    7afe:	          move.l d0,-(sp)
    7b00:	          jsr 8d0 <put2bytes>
    7b06:	          addq.l #8,sp
	if (p -> numFrames) {
    7b08:	          movea.l 8(sp),a0
    7b0c:	          move.l 8(a0),d0
    7b10:	/-------- beq.w 7bb4 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    7b14:	|         movea.l 8(sp),a0
    7b18:	|         movea.l (a0),a0
    7b1a:	|         move.l (a0),d0
    7b1c:	|         move.l 12(sp),-(sp)
    7b20:	|         move.l d0,-(sp)
    7b22:	|         jsr 958 <put4bytes>
    7b28:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    7b2a:	|         clr.l (sp)
    7b2c:	|     /-- bra.s 7ba6 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    7b2e:	|  /--|-> movea.l 8(sp),a0
    7b32:	|  |  |   movea.l 4(a0),a0
    7b36:	|  |  |   move.l (sp),d1
    7b38:	|  |  |   move.l d1,d0
    7b3a:	|  |  |   add.l d0,d0
    7b3c:	|  |  |   add.l d1,d0
    7b3e:	|  |  |   add.l d0,d0
    7b40:	|  |  |   add.l d0,d0
    7b42:	|  |  |   adda.l d0,a0
    7b44:	|  |  |   move.l (a0),d0
    7b46:	|  |  |   move.l 12(sp),-(sp)
    7b4a:	|  |  |   move.l d0,-(sp)
    7b4c:	|  |  |   jsr 958 <put4bytes>
    7b52:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    7b54:	|  |  |   movea.l 8(sp),a0
    7b58:	|  |  |   movea.l 4(a0),a0
    7b5c:	|  |  |   move.l (sp),d1
    7b5e:	|  |  |   move.l d1,d0
    7b60:	|  |  |   add.l d0,d0
    7b62:	|  |  |   add.l d1,d0
    7b64:	|  |  |   add.l d0,d0
    7b66:	|  |  |   add.l d0,d0
    7b68:	|  |  |   adda.l d0,a0
    7b6a:	|  |  |   move.l 4(a0),d0
    7b6e:	|  |  |   move.l 12(sp),-(sp)
    7b72:	|  |  |   move.l d0,-(sp)
    7b74:	|  |  |   jsr 958 <put4bytes>
    7b7a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    7b7c:	|  |  |   movea.l 8(sp),a0
    7b80:	|  |  |   movea.l 4(a0),a0
    7b84:	|  |  |   move.l (sp),d1
    7b86:	|  |  |   move.l d1,d0
    7b88:	|  |  |   add.l d0,d0
    7b8a:	|  |  |   add.l d1,d0
    7b8c:	|  |  |   add.l d0,d0
    7b8e:	|  |  |   add.l d0,d0
    7b90:	|  |  |   adda.l d0,a0
    7b92:	|  |  |   move.l 8(a0),d0
    7b96:	|  |  |   move.l 12(sp),-(sp)
    7b9a:	|  |  |   move.l d0,-(sp)
    7b9c:	|  |  |   jsr 958 <put4bytes>
    7ba2:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    7ba4:	|  |  |   addq.l #1,(sp)
    7ba6:	|  |  \-> movea.l 8(sp),a0
    7baa:	|  |      move.l 8(a0),d0
    7bae:	|  |      cmp.l (sp),d0
    7bb0:	|  \----- bgt.w 7b2e <saveAnim+0x3e>
		}
	}
	return TRUE;
    7bb4:	\-------> moveq #1,d0
}
    7bb6:	          addq.l #4,sp
    7bb8:	          rts

00007bba <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    7bba:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    7bbc:	             movea.l 8(sp),a0
    7bc0:	             move.l 4(a0),d0
    7bc4:	             move.l 12(sp),-(sp)
    7bc8:	             move.l d0,-(sp)
    7bca:	             jsr 8d0 <put2bytes>
    7bd0:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7bd2:	             clr.l (sp)
    7bd4:	   /-------- bra.s 7c00 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    7bd6:	/--|-------> movea.l 8(sp),a0
    7bda:	|  |         move.l (a0),d1
    7bdc:	|  |         move.l (sp),d0
    7bde:	|  |         add.l d0,d0
    7be0:	|  |         add.l d0,d0
    7be2:	|  |         movea.l d1,a0
    7be4:	|  |         adda.l d0,a0
    7be6:	|  |         move.l (a0),d0
    7be8:	|  |         move.l 12(sp),-(sp)
    7bec:	|  |         move.l d0,-(sp)
    7bee:	|  |         jsr 7af0 <saveAnim>
    7bf4:	|  |         addq.l #8,sp
    7bf6:	|  |         tst.w d0
    7bf8:	|  |     /-- bne.s 7bfe <saveCostume+0x44>
    7bfa:	|  |     |   clr.w d0
    7bfc:	|  |  /--|-- bra.s 7c14 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7bfe:	|  |  |  \-> addq.l #1,(sp)
    7c00:	|  \--|----> movea.l 8(sp),a0
    7c04:	|     |      move.l 4(a0),d1
    7c08:	|     |      move.l d1,d0
    7c0a:	|     |      add.l d0,d0
    7c0c:	|     |      add.l d1,d0
    7c0e:	|     |      cmp.l (sp),d0
    7c10:	\-----|----- bgt.s 7bd6 <saveCostume+0x1c>
	}

	return TRUE;
    7c12:	      |      moveq #1,d0
}
    7c14:	      \----> addq.l #4,sp
    7c16:	             rts

00007c18 <savePeople>:

BOOL savePeople (BPTR fp) {
    7c18:	             lea -144(sp),sp
    7c1c:	             move.l a6,-(sp)
    7c1e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    7c20:	             move.l 1683c <allPeople>,148(sp)
	int countPeople = 0, a;
    7c28:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    7c2c:	             move.w 16136 <scaleHorizon>,d0
    7c32:	             movea.w d0,a0
    7c34:	             move.l 156(sp),-(sp)
    7c38:	             move.l a0,-(sp)
    7c3a:	             jsr a9c <putSigned>
    7c40:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    7c42:	             move.w 16138 <scaleDivide>,d0
    7c48:	             movea.w d0,a0
    7c4a:	             move.l 156(sp),-(sp)
    7c4e:	             move.l a0,-(sp)
    7c50:	             jsr a9c <putSigned>
    7c56:	             addq.l #8,sp

	while (me) {
    7c58:	         /-- bra.s 7c68 <savePeople+0x50>
		countPeople ++;
    7c5a:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    7c5e:	      |  |   movea.l 148(sp),a0
    7c62:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    7c68:	      |  \-> tst.l 148(sp)
    7c6c:	      \----- bne.s 7c5a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    7c6e:	             move.l 156(sp),-(sp)
    7c72:	             move.l 148(sp),-(sp)
    7c76:	             jsr 8d0 <put2bytes>
    7c7c:	             addq.l #8,sp

	me = allPeople;
    7c7e:	             move.l 1683c <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    7c86:	             clr.l 140(sp)
    7c8a:	   /-------- bra.w 80e2 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    7c8e:	/--|-------> movea.l 148(sp),a0
    7c92:	|  |         move.l (a0),d0
    7c94:	|  |         move.l 156(sp),-(sp)
    7c98:	|  |         move.l d0,-(sp)
    7c9a:	|  |         jsr a46 <putFloat>
    7ca0:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    7ca2:	|  |         movea.l 148(sp),a0
    7ca6:	|  |         move.l 4(a0),d0
    7caa:	|  |         move.l 156(sp),-(sp)
    7cae:	|  |         move.l d0,-(sp)
    7cb0:	|  |         jsr a46 <putFloat>
    7cb6:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    7cb8:	|  |         movea.l 148(sp),a0
    7cbc:	|  |         move.l 68(a0),d0
    7cc0:	|  |         move.l 156(sp),-(sp)
    7cc4:	|  |         move.l d0,-(sp)
    7cc6:	|  |         jsr 7bba <saveCostume>
    7ccc:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    7cce:	|  |         movea.l 148(sp),a0
    7cd2:	|  |         move.l 60(a0),d0
    7cd6:	|  |         move.l 156(sp),-(sp)
    7cda:	|  |         move.l d0,-(sp)
    7cdc:	|  |         jsr 7af0 <saveAnim>
    7ce2:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    7ce4:	|  |         move.l 156(sp),136(sp)
    7cea:	|  |         movea.l 148(sp),a0
    7cee:	|  |         move.l 60(a0),d1
    7cf2:	|  |         movea.l 148(sp),a0
    7cf6:	|  |         move.l 64(a0),d0
    7cfa:	|  |         cmp.l d1,d0
    7cfc:	|  |         seq d0
    7cfe:	|  |         neg.b d0
    7d00:	|  |         move.b d0,d0
    7d02:	|  |         andi.l #255,d0
    7d08:	|  |         move.l d0,132(sp)
    7d0c:	|  |         move.l 1678c <DOSBase>,d0
    7d12:	|  |         movea.l d0,a6
    7d14:	|  |         move.l 136(sp),d1
    7d18:	|  |         move.l 132(sp),d2
    7d1c:	|  |         jsr -312(a6)
    7d20:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    7d24:	|  |         movea.l 148(sp),a0
    7d28:	|  |         move.l 20(a0),d0
    7d2c:	|  |         move.l 156(sp),-(sp)
    7d30:	|  |         move.l d0,-(sp)
    7d32:	|  |         jsr a46 <putFloat>
    7d38:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    7d3a:	|  |         movea.l 148(sp),a0
    7d3e:	|  |         move.l 106(a0),d0
    7d42:	|  |         move.l 156(sp),-(sp)
    7d46:	|  |         move.l d0,-(sp)
    7d48:	|  |         jsr 8d0 <put2bytes>
    7d4e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    7d50:	|  |         movea.l 148(sp),a0
    7d54:	|  |         move.l 8(a0),d0
    7d58:	|  |         move.l 156(sp),-(sp)
    7d5c:	|  |         move.l d0,-(sp)
    7d5e:	|  |         jsr 8d0 <put2bytes>
    7d64:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    7d66:	|  |         movea.l 148(sp),a0
    7d6a:	|  |         move.l 28(a0),d0
    7d6e:	|  |         move.l 156(sp),-(sp)
    7d72:	|  |         move.l d0,-(sp)
    7d74:	|  |         jsr 8d0 <put2bytes>
    7d7a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    7d7c:	|  |         movea.l 148(sp),a0
    7d80:	|  |         move.l 32(a0),d0
    7d84:	|  |         move.l 156(sp),-(sp)
    7d88:	|  |         move.l d0,-(sp)
    7d8a:	|  |         jsr 8d0 <put2bytes>
    7d90:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    7d92:	|  |         movea.l 148(sp),a0
    7d96:	|  |         move.l 36(a0),d0
    7d9a:	|  |         move.l 156(sp),-(sp)
    7d9e:	|  |         move.l d0,-(sp)
    7da0:	|  |         jsr 8d0 <put2bytes>
    7da6:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    7da8:	|  |         movea.l 148(sp),a0
    7dac:	|  |         move.l 40(a0),d0
    7db0:	|  |         move.l 156(sp),-(sp)
    7db4:	|  |         move.l d0,-(sp)
    7db6:	|  |         jsr 8d0 <put2bytes>
    7dbc:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    7dbe:	|  |         movea.l 148(sp),a0
    7dc2:	|  |         move.l 72(a0),d0
    7dc6:	|  |         move.l 156(sp),-(sp)
    7dca:	|  |         move.l d0,-(sp)
    7dcc:	|  |         jsr 8d0 <put2bytes>
    7dd2:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    7dd4:	|  |         movea.l 148(sp),a0
    7dd8:	|  |         move.l 76(a0),d0
    7ddc:	|  |         move.l 156(sp),-(sp)
    7de0:	|  |         move.l d0,-(sp)
    7de2:	|  |         jsr 8d0 <put2bytes>
    7de8:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    7dea:	|  |         movea.l 148(sp),a0
    7dee:	|  |         move.l 16(a0),d0
    7df2:	|  |         move.l 156(sp),-(sp)
    7df6:	|  |         move.l d0,-(sp)
    7df8:	|  |         jsr 8d0 <put2bytes>
    7dfe:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    7e00:	|  |         movea.l 148(sp),a0
    7e04:	|  |         move.l 110(a0),d0
    7e08:	|  |         move.l 156(sp),-(sp)
    7e0c:	|  |         move.l d0,-(sp)
    7e0e:	|  |         jsr 8d0 <put2bytes>
    7e14:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    7e16:	|  |         movea.l 148(sp),a0
    7e1a:	|  |         move.l 12(a0),d0
    7e1e:	|  |         move.l d0,d0
    7e20:	|  |         movea.w d0,a0
    7e22:	|  |         move.l 156(sp),-(sp)
    7e26:	|  |         move.l a0,-(sp)
    7e28:	|  |         jsr a9c <putSigned>
    7e2e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    7e30:	|  |         move.l 156(sp),124(sp)
    7e36:	|  |         movea.l 148(sp),a0
    7e3a:	|  |         move.w 92(a0),d0
    7e3e:	|  |         movea.w d0,a0
    7e40:	|  |         move.l a0,120(sp)
    7e44:	|  |         move.l 1678c <DOSBase>,d0
    7e4a:	|  |         movea.l d0,a6
    7e4c:	|  |         move.l 124(sp),d1
    7e50:	|  |         move.l 120(sp),d2
    7e54:	|  |         jsr -312(a6)
    7e58:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    7e5c:	|  |         move.l 156(sp),112(sp)
    7e62:	|  |         movea.l 148(sp),a0
    7e66:	|  |         move.w 52(a0),d0
    7e6a:	|  |         movea.w d0,a0
    7e6c:	|  |         move.l a0,108(sp)
    7e70:	|  |         move.l 1678c <DOSBase>,d0
    7e76:	|  |         movea.l d0,a6
    7e78:	|  |         move.l 112(sp),d1
    7e7c:	|  |         move.l 108(sp),d2
    7e80:	|  |         jsr -312(a6)
    7e84:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    7e88:	|  |         move.l 156(sp),100(sp)
    7e8e:	|  |         movea.l 148(sp),a0
    7e92:	|  |         move.w 54(a0),d0
    7e96:	|  |         movea.w d0,a0
    7e98:	|  |         move.l a0,96(sp)
    7e9c:	|  |         move.l 1678c <DOSBase>,d0
    7ea2:	|  |         movea.l d0,a6
    7ea4:	|  |         move.l 100(sp),d1
    7ea8:	|  |         move.l 96(sp),d2
    7eac:	|  |         jsr -312(a6)
    7eb0:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7eb4:	|  |         movea.l 148(sp),a0
    7eb8:	|  |         move.l 56(a0),d0
    7ebc:	|  |  /----- beq.s 7efa <savePeople+0x2e2>
			FPutC (fp, 1);
    7ebe:	|  |  |      move.l 156(sp),76(sp)
    7ec4:	|  |  |      moveq #1,d0
    7ec6:	|  |  |      move.l d0,72(sp)
    7eca:	|  |  |      move.l 1678c <DOSBase>,d0
    7ed0:	|  |  |      movea.l d0,a6
    7ed2:	|  |  |      move.l 76(sp),d1
    7ed6:	|  |  |      move.l 72(sp),d2
    7eda:	|  |  |      jsr -312(a6)
    7ede:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    7ee2:	|  |  |      movea.l 148(sp),a0
    7ee6:	|  |  |      move.l 56(a0),d0
    7eea:	|  |  |      move.l 156(sp),-(sp)
    7eee:	|  |  |      move.l d0,-(sp)
    7ef0:	|  |  |      jsr 9088 <saveFunction>
    7ef6:	|  |  |      addq.l #8,sp
    7ef8:	|  |  |  /-- bra.s 7f1e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    7efa:	|  |  \--|-> move.l 156(sp),88(sp)
    7f00:	|  |     |   moveq #1,d0
    7f02:	|  |     |   move.l d0,84(sp)
    7f06:	|  |     |   move.l 1678c <DOSBase>,d0
    7f0c:	|  |     |   movea.l d0,a6
    7f0e:	|  |     |   move.l 88(sp),d1
    7f12:	|  |     |   move.l 84(sp),d2
    7f16:	|  |     |   jsr -312(a6)
    7f1a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    7f1e:	|  |     \-> movea.l 148(sp),a0
    7f22:	|  |         move.l 94(a0),d0
    7f26:	|  |         move.l 156(sp),-(sp)
    7f2a:	|  |         move.l d0,-(sp)
    7f2c:	|  |         jsr 8d0 <put2bytes>
    7f32:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7f34:	|  |         movea.l 148(sp),a0
    7f38:	|  |         move.l 80(a0),d0
    7f3c:	|  |         move.l 156(sp),-(sp)
    7f40:	|  |         move.l d0,-(sp)
    7f42:	|  |         jsr 8d0 <put2bytes>
    7f48:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    7f4a:	|  |         movea.l 148(sp),a0
    7f4e:	|  |         move.l 88(a0),d0
    7f52:	|  |         move.l 156(sp),-(sp)
    7f56:	|  |         move.l d0,-(sp)
    7f58:	|  |         jsr 8d0 <put2bytes>
    7f5e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    7f60:	|  |         movea.l 148(sp),a0
    7f64:	|  |         move.l 84(a0),d0
    7f68:	|  |         move.l 156(sp),-(sp)
    7f6c:	|  |         move.l d0,-(sp)
    7f6e:	|  |         jsr 8d0 <put2bytes>
    7f74:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    7f76:	|  |         movea.l 148(sp),a0
    7f7a:	|  |         move.l 98(a0),d0
    7f7e:	|  |         move.l d0,d0
    7f80:	|  |         movea.w d0,a0
    7f82:	|  |         move.l 156(sp),-(sp)
    7f86:	|  |         move.l a0,-(sp)
    7f88:	|  |         jsr a9c <putSigned>
    7f8e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    7f90:	|  |         movea.l 148(sp),a0
    7f94:	|  |         move.l 44(a0),d0
    7f98:	|  |         move.l d0,d0
    7f9a:	|  |         movea.w d0,a0
    7f9c:	|  |         move.l 156(sp),-(sp)
    7fa0:	|  |         move.l a0,-(sp)
    7fa2:	|  |         jsr a9c <putSigned>
    7fa8:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    7faa:	|  |         movea.l 148(sp),a0
    7fae:	|  |         move.l 48(a0),d0
    7fb2:	|  |         move.l d0,d0
    7fb4:	|  |         movea.w d0,a0
    7fb6:	|  |         move.l 156(sp),-(sp)
    7fba:	|  |         move.l a0,-(sp)
    7fbc:	|  |         jsr a9c <putSigned>
    7fc2:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7fc4:	|  |         move.l 156(sp),64(sp)
    7fca:	|  |         movea.l 148(sp),a0
    7fce:	|  |         move.b 114(a0),d0
    7fd2:	|  |         move.b d0,d0
    7fd4:	|  |         andi.l #255,d0
    7fda:	|  |         move.l d0,60(sp)
    7fde:	|  |         move.l 1678c <DOSBase>,d0
    7fe4:	|  |         movea.l d0,a6
    7fe6:	|  |         move.l 64(sp),d1
    7fea:	|  |         move.l 60(sp),d2
    7fee:	|  |         jsr -312(a6)
    7ff2:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7ff6:	|  |         move.l 156(sp),52(sp)
    7ffc:	|  |         movea.l 148(sp),a0
    8000:	|  |         move.b 115(a0),d0
    8004:	|  |         move.b d0,d0
    8006:	|  |         andi.l #255,d0
    800c:	|  |         move.l d0,48(sp)
    8010:	|  |         move.l 1678c <DOSBase>,d0
    8016:	|  |         movea.l d0,a6
    8018:	|  |         move.l 52(sp),d1
    801c:	|  |         move.l 48(sp),d2
    8020:	|  |         jsr -312(a6)
    8024:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    8028:	|  |         move.l 156(sp),40(sp)
    802e:	|  |         movea.l 148(sp),a0
    8032:	|  |         move.b 116(a0),d0
    8036:	|  |         move.b d0,d0
    8038:	|  |         andi.l #255,d0
    803e:	|  |         move.l d0,36(sp)
    8042:	|  |         move.l 1678c <DOSBase>,d0
    8048:	|  |         movea.l d0,a6
    804a:	|  |         move.l 40(sp),d1
    804e:	|  |         move.l 36(sp),d2
    8052:	|  |         jsr -312(a6)
    8056:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    805a:	|  |         move.l 156(sp),28(sp)
    8060:	|  |         movea.l 148(sp),a0
    8064:	|  |         move.b 117(a0),d0
    8068:	|  |         move.b d0,d0
    806a:	|  |         andi.l #255,d0
    8070:	|  |         move.l d0,24(sp)
    8074:	|  |         move.l 1678c <DOSBase>,d0
    807a:	|  |         movea.l d0,a6
    807c:	|  |         move.l 28(sp),d1
    8080:	|  |         move.l 24(sp),d2
    8084:	|  |         jsr -312(a6)
    8088:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    808c:	|  |         move.l 156(sp),16(sp)
    8092:	|  |         movea.l 148(sp),a0
    8096:	|  |         move.b 118(a0),d0
    809a:	|  |         move.b d0,d0
    809c:	|  |         andi.l #255,d0
    80a2:	|  |         move.l d0,12(sp)
    80a6:	|  |         move.l 1678c <DOSBase>,d0
    80ac:	|  |         movea.l d0,a6
    80ae:	|  |         move.l 16(sp),d1
    80b2:	|  |         move.l 12(sp),d2
    80b6:	|  |         jsr -312(a6)
    80ba:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    80be:	|  |         movea.l 148(sp),a0
    80c2:	|  |         move.l 102(a0),d0
    80c6:	|  |         move.l 156(sp),-(sp)
    80ca:	|  |         move.l d0,-(sp)
    80cc:	|  |         jsr a27c <saveObjectRef>
    80d2:	|  |         addq.l #8,sp

		me = me -> next;
    80d4:	|  |         movea.l 148(sp),a0
    80d8:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    80de:	|  |         addq.l #1,140(sp)
    80e2:	|  \-------> movea.l 140(sp),a0
    80e6:	|            cmpa.l 144(sp),a0
    80ea:	\----------- blt.w 7c8e <savePeople+0x76>
	}
	return TRUE;
    80ee:	             moveq #1,d0
}
    80f0:	             move.l (sp)+,d2
    80f2:	             movea.l (sp)+,a6
    80f4:	             lea 144(sp),sp
    80f8:	             rts

000080fa <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    80fa:	movea.l 4(sp),a0
    80fe:	move.l 8(sp),(a0)
}
    8102:	nop
    8104:	rts

00008106 <setDrawMode>:


void setDrawMode (int h, int ob) {
    8106:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    8108:	       move.l 12(sp),-(sp)
    810c:	       jsr 71d8 <findPerson>
    8112:	       addq.l #4,sp
    8114:	       move.l d0,(sp)
	if (! moveMe) return;
    8116:	/----- beq.s 812a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    8118:	|      move.l 8(sp),-(sp)
    811c:	|      move.l 4(sp),-(sp)
    8120:	|      jsr 8130 <setMyDrawMode>
    8126:	|      addq.l #8,sp
    8128:	|  /-- bra.s 812c <setDrawMode+0x26>
	if (! moveMe) return;
    812a:	\--|-> nop
}
    812c:	   \-> addq.l #4,sp
    812e:	       rts

00008130 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    8130:	       moveq #19,d0
    8132:	       cmp.l 8(sp),d0
    8136:	/----- bcs.w 860e <setMyDrawMode+0x4de>
    813a:	|      move.l 8(sp),d0
    813e:	|      add.l d0,d0
    8140:	|      movea.l d0,a0
    8142:	|      adda.l #33102,a0
    8148:	|      move.w (a0),d0
    814a:	|      jmp (814e <setMyDrawMode+0x1e>,pc,d0.w)
    814e:	|      .short 0x04c0
    8150:	|      ori.l #6684712,-(a4)
    8156:	|      btst d0,-(a0)
    8158:	|      bchg d0,(a6)+
    815a:	|      bclr d0,(a4)+
    815c:	|      bset d0,(a2)+
    815e:	|      andi.b #84,(a6)
    8162:	|      andi.l #55575312,(a2)
    8168:	|      .short 0x02d0
    816a:	|      bclr d1,(a0)
    816c:	|      .short 0x044a
    816e:	|      .short 0x040c
    8170:	|      movep.l d1,1158(a6)
    8174:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8176:	|      movea.l 4(sp),a0
    817a:	|      clr.b 116(a0)
    817e:	|      movea.l 4(sp),a0
    8182:	|      move.b 116(a0),d0
    8186:	|      movea.l 4(sp),a0
    818a:	|      move.b d0,115(a0)
    818e:	|      movea.l 4(sp),a0
    8192:	|      move.b 115(a0),d0
    8196:	|      movea.l 4(sp),a0
    819a:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    819e:	|      movea.l 4(sp),a0
    81a2:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    81a6:	|      movea.l 4(sp),a0
    81aa:	|      move.b #64,118(a0)
			break;
    81b0:	|  /-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    81b4:	|  |   movea.l 4(sp),a0
    81b8:	|  |   clr.b 116(a0)
    81bc:	|  |   movea.l 4(sp),a0
    81c0:	|  |   move.b 116(a0),d0
    81c4:	|  |   movea.l 4(sp),a0
    81c8:	|  |   move.b d0,115(a0)
    81cc:	|  |   movea.l 4(sp),a0
    81d0:	|  |   move.b 115(a0),d0
    81d4:	|  |   movea.l 4(sp),a0
    81d8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    81dc:	|  |   movea.l 4(sp),a0
    81e0:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    81e4:	|  |   movea.l 4(sp),a0
    81e8:	|  |   move.b #-128,118(a0)
			break;
    81ee:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    81f2:	|  |   movea.l 4(sp),a0
    81f6:	|  |   clr.b 116(a0)
    81fa:	|  |   movea.l 4(sp),a0
    81fe:	|  |   move.b 116(a0),d0
    8202:	|  |   movea.l 4(sp),a0
    8206:	|  |   move.b d0,115(a0)
    820a:	|  |   movea.l 4(sp),a0
    820e:	|  |   move.b 115(a0),d0
    8212:	|  |   movea.l 4(sp),a0
    8216:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    821a:	|  |   movea.l 4(sp),a0
    821e:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    8222:	|  |   movea.l 4(sp),a0
    8226:	|  |   move.b #-64,118(a0)
			break;
    822c:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8230:	|  |   movea.l 4(sp),a0
    8234:	|  |   clr.b 116(a0)
    8238:	|  |   movea.l 4(sp),a0
    823c:	|  |   move.b 116(a0),d0
    8240:	|  |   movea.l 4(sp),a0
    8244:	|  |   move.b d0,115(a0)
    8248:	|  |   movea.l 4(sp),a0
    824c:	|  |   move.b 115(a0),d0
    8250:	|  |   movea.l 4(sp),a0
    8254:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8258:	|  |   movea.l 4(sp),a0
    825c:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    8260:	|  |   movea.l 4(sp),a0
    8264:	|  |   move.b #-2,118(a0)
			break;
    826a:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    826e:	|  |   movea.l 4(sp),a0
    8272:	|  |   clr.b 116(a0)
    8276:	|  |   movea.l 4(sp),a0
    827a:	|  |   move.b 116(a0),d0
    827e:	|  |   movea.l 4(sp),a0
    8282:	|  |   move.b d0,115(a0)
    8286:	|  |   movea.l 4(sp),a0
    828a:	|  |   move.b 115(a0),d0
    828e:	|  |   movea.l 4(sp),a0
    8292:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8296:	|  |   movea.l 4(sp),a0
    829a:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    82a0:	|  |   movea.l 4(sp),a0
    82a4:	|  |   clr.b 118(a0)
			break;
    82a8:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    82ac:	|  |   movea.l 4(sp),a0
    82b0:	|  |   clr.b 116(a0)
    82b4:	|  |   movea.l 4(sp),a0
    82b8:	|  |   move.b 116(a0),d0
    82bc:	|  |   movea.l 4(sp),a0
    82c0:	|  |   move.b d0,115(a0)
    82c4:	|  |   movea.l 4(sp),a0
    82c8:	|  |   move.b 115(a0),d0
    82cc:	|  |   movea.l 4(sp),a0
    82d0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    82d4:	|  |   movea.l 4(sp),a0
    82d8:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    82de:	|  |   movea.l 4(sp),a0
    82e2:	|  |   clr.b 118(a0)
			break;
    82e6:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    82ea:	|  |   movea.l 4(sp),a0
    82ee:	|  |   clr.b 116(a0)
    82f2:	|  |   movea.l 4(sp),a0
    82f6:	|  |   move.b 116(a0),d0
    82fa:	|  |   movea.l 4(sp),a0
    82fe:	|  |   move.b d0,115(a0)
    8302:	|  |   movea.l 4(sp),a0
    8306:	|  |   move.b 115(a0),d0
    830a:	|  |   movea.l 4(sp),a0
    830e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8312:	|  |   movea.l 4(sp),a0
    8316:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    831c:	|  |   movea.l 4(sp),a0
    8320:	|  |   clr.b 118(a0)
			break;
    8324:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8328:	|  |   movea.l 4(sp),a0
    832c:	|  |   clr.b 116(a0)
    8330:	|  |   movea.l 4(sp),a0
    8334:	|  |   move.b 116(a0),d0
    8338:	|  |   movea.l 4(sp),a0
    833c:	|  |   move.b d0,115(a0)
    8340:	|  |   movea.l 4(sp),a0
    8344:	|  |   move.b 115(a0),d0
    8348:	|  |   movea.l 4(sp),a0
    834c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8350:	|  |   movea.l 4(sp),a0
    8354:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8358:	|  |   movea.l 4(sp),a0
    835c:	|  |   clr.b 118(a0)
			break;
    8360:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8364:	|  |   movea.l 4(sp),a0
    8368:	|  |   clr.b 116(a0)
    836c:	|  |   movea.l 4(sp),a0
    8370:	|  |   move.b 116(a0),d0
    8374:	|  |   movea.l 4(sp),a0
    8378:	|  |   move.b d0,115(a0)
    837c:	|  |   movea.l 4(sp),a0
    8380:	|  |   move.b 115(a0),d0
    8384:	|  |   movea.l 4(sp),a0
    8388:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    838c:	|  |   movea.l 4(sp),a0
    8390:	|  |   st 117(a0)
			moveMe->transparency = 64;
    8394:	|  |   movea.l 4(sp),a0
    8398:	|  |   move.b #64,118(a0)
			break;
    839e:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    83a2:	|  |   movea.l 4(sp),a0
    83a6:	|  |   clr.b 116(a0)
    83aa:	|  |   movea.l 4(sp),a0
    83ae:	|  |   move.b 116(a0),d0
    83b2:	|  |   movea.l 4(sp),a0
    83b6:	|  |   move.b d0,115(a0)
    83ba:	|  |   movea.l 4(sp),a0
    83be:	|  |   move.b 115(a0),d0
    83c2:	|  |   movea.l 4(sp),a0
    83c6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    83ca:	|  |   movea.l 4(sp),a0
    83ce:	|  |   st 117(a0)
			moveMe->transparency = 128;
    83d2:	|  |   movea.l 4(sp),a0
    83d6:	|  |   move.b #-128,118(a0)
			break;
    83dc:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    83e0:	|  |   movea.l 4(sp),a0
    83e4:	|  |   clr.b 116(a0)
    83e8:	|  |   movea.l 4(sp),a0
    83ec:	|  |   move.b 116(a0),d0
    83f0:	|  |   movea.l 4(sp),a0
    83f4:	|  |   move.b d0,115(a0)
    83f8:	|  |   movea.l 4(sp),a0
    83fc:	|  |   move.b 115(a0),d0
    8400:	|  |   movea.l 4(sp),a0
    8404:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8408:	|  |   movea.l 4(sp),a0
    840c:	|  |   st 117(a0)
			moveMe->transparency = 192;
    8410:	|  |   movea.l 4(sp),a0
    8414:	|  |   move.b #-64,118(a0)
			break;
    841a:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    841e:	|  |   movea.l 4(sp),a0
    8422:	|  |   move.b #-128,116(a0)
    8428:	|  |   movea.l 4(sp),a0
    842c:	|  |   move.b 116(a0),d0
    8430:	|  |   movea.l 4(sp),a0
    8434:	|  |   move.b d0,115(a0)
    8438:	|  |   movea.l 4(sp),a0
    843c:	|  |   move.b 115(a0),d0
    8440:	|  |   movea.l 4(sp),a0
    8444:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8448:	|  |   movea.l 4(sp),a0
    844c:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8452:	|  |   movea.l 4(sp),a0
    8456:	|  |   clr.b 118(a0)
			break;
    845a:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    845e:	|  |   movea.l 4(sp),a0
    8462:	|  |   move.b #-128,116(a0)
    8468:	|  |   movea.l 4(sp),a0
    846c:	|  |   move.b 116(a0),d0
    8470:	|  |   movea.l 4(sp),a0
    8474:	|  |   move.b d0,115(a0)
    8478:	|  |   movea.l 4(sp),a0
    847c:	|  |   move.b 115(a0),d0
    8480:	|  |   movea.l 4(sp),a0
    8484:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8488:	|  |   movea.l 4(sp),a0
    848c:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8492:	|  |   movea.l 4(sp),a0
    8496:	|  |   clr.b 118(a0)
			break;
    849a:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    849e:	|  |   movea.l 4(sp),a0
    84a2:	|  |   move.b #-128,116(a0)
    84a8:	|  |   movea.l 4(sp),a0
    84ac:	|  |   move.b 116(a0),d0
    84b0:	|  |   movea.l 4(sp),a0
    84b4:	|  |   move.b d0,115(a0)
    84b8:	|  |   movea.l 4(sp),a0
    84bc:	|  |   move.b 115(a0),d0
    84c0:	|  |   movea.l 4(sp),a0
    84c4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    84c8:	|  |   movea.l 4(sp),a0
    84cc:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    84d2:	|  |   movea.l 4(sp),a0
    84d6:	|  |   clr.b 118(a0)
			break;
    84da:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    84de:	|  |   movea.l 4(sp),a0
    84e2:	|  |   move.b #-128,116(a0)
    84e8:	|  |   movea.l 4(sp),a0
    84ec:	|  |   move.b 116(a0),d0
    84f0:	|  |   movea.l 4(sp),a0
    84f4:	|  |   move.b d0,115(a0)
    84f8:	|  |   movea.l 4(sp),a0
    84fc:	|  |   move.b 115(a0),d0
    8500:	|  |   movea.l 4(sp),a0
    8504:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8508:	|  |   movea.l 4(sp),a0
    850c:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8510:	|  |   movea.l 4(sp),a0
    8514:	|  |   clr.b 118(a0)
			break;
    8518:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    851c:	|  |   movea.l 4(sp),a0
    8520:	|  |   st 116(a0)
    8524:	|  |   movea.l 4(sp),a0
    8528:	|  |   move.b 116(a0),d0
    852c:	|  |   movea.l 4(sp),a0
    8530:	|  |   move.b d0,115(a0)
    8534:	|  |   movea.l 4(sp),a0
    8538:	|  |   move.b 115(a0),d0
    853c:	|  |   movea.l 4(sp),a0
    8540:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8544:	|  |   movea.l 4(sp),a0
    8548:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    854e:	|  |   movea.l 4(sp),a0
    8552:	|  |   clr.b 118(a0)
			break;
    8556:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    855a:	|  |   movea.l 4(sp),a0
    855e:	|  |   st 116(a0)
    8562:	|  |   movea.l 4(sp),a0
    8566:	|  |   move.b 116(a0),d0
    856a:	|  |   movea.l 4(sp),a0
    856e:	|  |   move.b d0,115(a0)
    8572:	|  |   movea.l 4(sp),a0
    8576:	|  |   move.b 115(a0),d0
    857a:	|  |   movea.l 4(sp),a0
    857e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8582:	|  |   movea.l 4(sp),a0
    8586:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    858c:	|  |   movea.l 4(sp),a0
    8590:	|  |   clr.b 118(a0)
			break;
    8594:	|  +-- bra.w 8648 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8598:	|  |   movea.l 4(sp),a0
    859c:	|  |   st 116(a0)
    85a0:	|  |   movea.l 4(sp),a0
    85a4:	|  |   move.b 116(a0),d0
    85a8:	|  |   movea.l 4(sp),a0
    85ac:	|  |   move.b d0,115(a0)
    85b0:	|  |   movea.l 4(sp),a0
    85b4:	|  |   move.b 115(a0),d0
    85b8:	|  |   movea.l 4(sp),a0
    85bc:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    85c0:	|  |   movea.l 4(sp),a0
    85c4:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    85ca:	|  |   movea.l 4(sp),a0
    85ce:	|  |   clr.b 118(a0)
			break;
    85d2:	|  +-- bra.s 8648 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    85d4:	|  |   movea.l 4(sp),a0
    85d8:	|  |   st 116(a0)
    85dc:	|  |   movea.l 4(sp),a0
    85e0:	|  |   move.b 116(a0),d0
    85e4:	|  |   movea.l 4(sp),a0
    85e8:	|  |   move.b d0,115(a0)
    85ec:	|  |   movea.l 4(sp),a0
    85f0:	|  |   move.b 115(a0),d0
    85f4:	|  |   movea.l 4(sp),a0
    85f8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    85fc:	|  |   movea.l 4(sp),a0
    8600:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8604:	|  |   movea.l 4(sp),a0
    8608:	|  |   clr.b 118(a0)
			break;
    860c:	|  +-- bra.s 8648 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    860e:	\--|-> movea.l 4(sp),a0
    8612:	   |   clr.b 116(a0)
    8616:	   |   movea.l 4(sp),a0
    861a:	   |   move.b 116(a0),d0
    861e:	   |   movea.l 4(sp),a0
    8622:	   |   move.b d0,115(a0)
    8626:	   |   movea.l 4(sp),a0
    862a:	   |   move.b 115(a0),d0
    862e:	   |   movea.l 4(sp),a0
    8632:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8636:	   |   movea.l 4(sp),a0
    863a:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    863e:	   |   movea.l 4(sp),a0
    8642:	   |   clr.b 118(a0)
			break;
    8646:	   |   nop
	}
}
    8648:	   \-> nop
    864a:	       rts

0000864c <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    864c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    864e:	       tst.l 8(sp)
    8652:	   /-- bgt.s 8658 <setCharacterWalkSpeed+0xc>
    8654:	   |   clr.w d0
    8656:	/--|-- bra.s 8676 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    8658:	|  \-> move.l 12(sp),-(sp)
    865c:	|      jsr 71d8 <findPerson>
    8662:	|      addq.l #4,sp
    8664:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    8666:	|  /-- bne.s 866c <setCharacterWalkSpeed+0x20>
    8668:	|  |   clr.w d0
    866a:	+--|-- bra.s 8676 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    866c:	|  \-> movea.l (sp),a0
    866e:	|      move.l 8(sp),16(a0)
	return TRUE;
    8674:	|      moveq #1,d0
}
    8676:	\----> addq.l #4,sp
    8678:	       rts

0000867a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    867a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    867c:	       move.l 8(sp),-(sp)
    8680:	       jsr 71d8 <findPerson>
    8686:	       addq.l #4,sp
    8688:	       move.l d0,(sp)
    if (thisPerson) {
    868a:	/----- beq.s 86aa <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    868c:	|      movea.l (sp),a0
    868e:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    8694:	|      moveq #2,d0
    8696:	|      and.l 12(sp),d0
    869a:	|  /-- beq.s 86a6 <setPersonExtra+0x2c>
    869c:	|  |   movea.l (sp),a0
    869e:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    86a6:	|  \-> moveq #1,d0
    86a8:	|  /-- bra.s 86ac <setPersonExtra+0x32>
    }
    return FALSE;
    86aa:	\--|-> clr.w d0
}
    86ac:	   \-> addq.l #4,sp
    86ae:	       rts

000086b0 <setScale>:


void setScale (short int h, short int d) {
    86b0:	subq.l #4,sp
    86b2:	move.l 8(sp),d1
    86b6:	move.l 12(sp),d0
    86ba:	move.w d1,d1
    86bc:	move.w d1,2(sp)
    86c0:	move.w d0,d0
    86c2:	move.w d0,(sp)
	scaleHorizon = h;
    86c4:	move.w 2(sp),16136 <scaleHorizon>
	scaleDivide = d;
    86cc:	move.w (sp),16138 <scaleDivide>
}
    86d2:	nop
    86d4:	addq.l #4,sp
    86d6:	rts

000086d8 <setShown>:

void setShown (BOOL h, int ob) {
    86d8:	    subq.l #8,sp
    86da:	    move.l 12(sp),d0
    86de:	    move.w d0,d0
    86e0:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    86e4:	    move.l 16(sp),-(sp)
    86e8:	    jsr 71d8 <findPerson>
    86ee:	    addq.l #4,sp
    86f0:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    86f4:	/-- beq.s 8700 <setShown+0x28>
    86f6:	|   movea.l 4(sp),a0
    86fa:	|   move.w 2(sp),92(a0)
}
    8700:	\-> nop
    8702:	    addq.l #8,sp
    8704:	    rts

00008706 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    8706:	       subq.l #8,sp
    8708:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    870a:	       movea.l 16(sp),a0
    870e:	       move.l 80(a0),d0
    8712:	       move.l d0,d1
    8714:	       addi.l #360,d1
    871a:	       movea.l 16(sp),a0
    871e:	       move.l 84(a0),d0
    8722:	       move.l d1,d2
    8724:	       sub.l d0,d2
    8726:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    872a:	       movea.l 16(sp),a0
    872e:	       move.l 110(a0),d0
    8732:	   /-- beq.s 873e <spinStep+0x38>
    8734:	   |   movea.l 16(sp),a0
    8738:	   |   move.l 110(a0),d0
    873c:	/--|-- bra.s 8758 <spinStep+0x52>
    873e:	|  \-> movea.l 16(sp),a0
    8742:	|      movea.l 68(a0),a0
    8746:	|      move.l 4(a0),d0
    874a:	|      move.l d0,-(sp)
    874c:	|      pea 168 <decodeFilename+0x50>
    8750:	|      jsr 138d6 <__divsi3>
    8756:	|      addq.l #8,sp
    8758:	\----> move.l d0,4(sp)
	while (diff > 180) {
    875c:	   /-- bra.s 8766 <spinStep+0x60>
		diff -= 360;
    875e:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    8766:	|  \-> cmpi.l #180,8(sp)
    876e:	\----- bgt.s 875e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    8770:	       move.l 8(sp),d0
    8774:	       cmp.l 4(sp),d0
    8778:	   /-- blt.s 8796 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    877a:	   |   movea.l 16(sp),a0
    877e:	   |   move.l 80(a0),d0
    8782:	   |   sub.l 4(sp),d0
    8786:	   |   move.l d0,-(sp)
    8788:	   |   move.l 20(sp),-(sp)
    878c:	   |   jsr 8876 <turnMeAngle>
    8792:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    8794:	/--|-- bra.s 87dc <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    8796:	|  \-> move.l 4(sp),d0
    879a:	|      neg.l d0
    879c:	|      cmp.l 8(sp),d0
    87a0:	|  /-- blt.s 87be <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    87a2:	|  |   movea.l 16(sp),a0
    87a6:	|  |   move.l 80(a0),d0
    87aa:	|  |   add.l 4(sp),d0
    87ae:	|  |   move.l d0,-(sp)
    87b0:	|  |   move.l 20(sp),-(sp)
    87b4:	|  |   jsr 8876 <turnMeAngle>
    87ba:	|  |   addq.l #8,sp
}
    87bc:	+--|-- bra.s 87dc <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    87be:	|  \-> movea.l 16(sp),a0
    87c2:	|      move.l 84(a0),d0
    87c6:	|      move.l d0,-(sp)
    87c8:	|      move.l 20(sp),-(sp)
    87cc:	|      jsr 8876 <turnMeAngle>
    87d2:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    87d4:	|      movea.l 16(sp),a0
    87d8:	|      clr.w 54(a0)
}
    87dc:	\----> nop
    87de:	       move.l (sp)+,d2
    87e0:	       addq.l #8,sp
    87e2:	       rts

000087e4 <stopPerson>:


BOOL stopPerson (int o) {
    87e4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    87e6:	       move.l 8(sp),-(sp)
    87ea:	       jsr 71d8 <findPerson>
    87f0:	       addq.l #4,sp
    87f2:	       move.l d0,(sp)
    if (moveMe)
    87f4:	/----- beq.s 8832 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    87f6:	|      movea.l (sp),a0
    87f8:	|      move.l 56(a0),d0
    87fc:	+----- beq.s 8832 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    87fe:	|      movea.l (sp),a0
    8800:	|      move.l 56(a0),d0
    8804:	|      move.l d0,-(sp)
    8806:	|      jsr 2154 <abortFunction>
    880c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    880e:	|      movea.l (sp),a0
    8810:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    8814:	|      movea.l (sp),a0
    8816:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    881a:	|      movea.l (sp),a0
    881c:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    8820:	|      clr.l -(sp)
    8822:	|      move.l 4(sp),-(sp)
    8826:	|      jsr 58ce <setFrames>
    882c:	|      addq.l #8,sp
            return TRUE;
    882e:	|      moveq #1,d0
    8830:	|  /-- bra.s 8834 <stopPerson+0x50>
        }
    return FALSE;
    8832:	\--|-> clr.w d0
}
    8834:	   \-> addq.l #4,sp
    8836:	       rts

00008838 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    8838:	       subq.l #8,sp
	int total = 0;
    883a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    883e:	       clr.l (sp)
    8840:	   /-- bra.s 8862 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    8842:	/--|-> movea.l 12(sp),a0
    8846:	|  |   movea.l 4(a0),a0
    884a:	|  |   move.l (sp),d1
    884c:	|  |   move.l d1,d0
    884e:	|  |   add.l d0,d0
    8850:	|  |   add.l d1,d0
    8852:	|  |   add.l d0,d0
    8854:	|  |   add.l d0,d0
    8856:	|  |   adda.l d0,a0
    8858:	|  |   move.l 4(a0),d0
    885c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    8860:	|  |   addq.l #1,(sp)
    8862:	|  \-> movea.l 12(sp),a0
    8866:	|      move.l 8(a0),d0
    886a:	|      cmp.l (sp),d0
    886c:	\----- bgt.s 8842 <timeForAnim+0xa>
	}
	return total;
    886e:	       move.l 4(sp),d0
}
    8872:	       addq.l #8,sp
    8874:	       rts

00008876 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    8876:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    8878:	       movea.l 8(sp),a0
    887c:	       movea.l 68(a0),a0
    8880:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    8884:	       movea.l 8(sp),a0
    8888:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    888e:	       move.l (sp),-(sp)
    8890:	       pea b4 <_start+0xb4>
    8894:	       jsr 138d6 <__divsi3>
    889a:	       addq.l #8,sp
    889c:	       move.l d0,d1
    889e:	       addi.l #180,d1
    88a4:	       movea.l 8(sp),a0
    88a8:	       move.l 88(a0),d0
    88ac:	       add.l d1,d0
    88ae:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    88b2:	   /-- bra.s 88bc <turnMeAngle+0x46>
    88b4:	/--|-> addi.l #-360,12(sp)
    88bc:	|  \-> cmpi.l #359,12(sp)
    88c4:	\----- bgt.s 88b4 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    88c6:	       move.l (sp),-(sp)
    88c8:	       move.l 16(sp),-(sp)
    88cc:	       jsr 13858 <__mulsi3>
    88d2:	       addq.l #8,sp
    88d4:	       pea 168 <decodeFilename+0x50>
    88d8:	       move.l d0,-(sp)
    88da:	       jsr 138d6 <__divsi3>
    88e0:	       addq.l #8,sp
    88e2:	       movea.l 8(sp),a0
    88e6:	       move.l d0,94(a0)
}
    88ea:	       nop
    88ec:	       addq.l #4,sp
    88ee:	       rts

000088f0 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    88f0:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    88f2:	          move.l 8(sp),-(sp)
    88f6:	          jsr 71d8 <findPerson>
    88fc:	          addq.l #4,sp
    88fe:	          move.l d0,(sp)
    if (thisPerson) {
    8900:	/-------- beq.s 8960 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    8902:	|         movea.l (sp),a0
    8904:	|         move.l 56(a0),d0
    8908:	|     /-- beq.s 891a <turnPersonToFace+0x2a>
    890a:	|     |   movea.l (sp),a0
    890c:	|     |   move.l 56(a0),d0
    8910:	|     |   move.l d0,-(sp)
    8912:	|     |   jsr 2154 <abortFunction>
    8918:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    891a:	|     \-> movea.l (sp),a0
    891c:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    8920:	|         movea.l (sp),a0
    8922:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    8926:	|         movea.l (sp),a0
    8928:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    892c:	|         move.l 12(sp),-(sp)
    8930:	|         move.l 4(sp),-(sp)
    8934:	|         jsr 8876 <turnMeAngle>
    893a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    893c:	|         movea.l 167e0 <speech>,a0
    8942:	|         move.l (a0),d0
    8944:	|         cmp.l (sp),d0
    8946:	|  /----- bne.s 894c <turnPersonToFace+0x5c>
    8948:	|  |      moveq #2,d0
    894a:	|  |  /-- bra.s 894e <turnPersonToFace+0x5e>
    894c:	|  \--|-> moveq #0,d0
    894e:	|     \-> move.l d0,-(sp)
    8950:	|         move.l 4(sp),-(sp)
    8954:	|         jsr 58ce <setFrames>
    895a:	|         addq.l #8,sp
        return TRUE;
    895c:	|         moveq #1,d0
    895e:	|     /-- bra.s 8962 <turnPersonToFace+0x72>
    }
    return FALSE;
    8960:	\-----|-> clr.w d0
}
    8962:	      \-> addq.l #4,sp
    8964:	          rts

00008966 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    8966:	                lea -20(sp),sp
    896a:	                move.l d3,-(sp)
    896c:	                move.l d2,-(sp)
    896e:	                move.l 36(sp),d0
    8972:	                move.w d0,d0
    8974:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    8978:	                cmpi.w #-1,10(sp)
    897e:	/-------------- bne.s 8986 <walkMe+0x20>
    8980:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8986:	>-------------> movea.l 32(sp),a0
    898a:	|               move.l 36(a0),d0
    898e:	|               move.l d0,-(sp)
    8990:	|               jsr 132fe <__floatsisf>
    8996:	|               addq.l #4,sp
    8998:	|               move.l d0,d1
    899a:	|               movea.l 32(sp),a0
    899e:	|               move.l (a0),d0
    89a0:	|               move.l d0,-(sp)
    89a2:	|               move.l d1,-(sp)
    89a4:	|               jsr 135f2 <__subsf3>
    89aa:	|               addq.l #8,sp
    89ac:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    89b0:	|               movea.l 32(sp),a0
    89b4:	|               move.l 40(a0),d0
    89b8:	|               move.l d0,-(sp)
    89ba:	|               jsr 132fe <__floatsisf>
    89c0:	|               addq.l #4,sp
    89c2:	|               move.l d0,d1
    89c4:	|               movea.l 32(sp),a0
    89c8:	|               move.l 4(a0),d0
    89cc:	|               move.l d0,-(sp)
    89ce:	|               move.l d1,-(sp)
    89d0:	|               jsr 135f2 <__subsf3>
    89d6:	|               addq.l #8,sp
    89d8:	|               move.l d0,-(sp)
    89da:	|               move.l d0,-(sp)
    89dc:	|               jsr 130b0 <__addsf3>
    89e2:	|               addq.l #8,sp
    89e4:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    89e8:	|               movea.l 32(sp),a0
    89ec:	|               move.l 20(a0),d2
    89f0:	|               movea.l 32(sp),a0
    89f4:	|               move.l 16(a0),d0
    89f8:	|               move.l d0,-(sp)
    89fa:	|               jsr 132fe <__floatsisf>
    8a00:	|               addq.l #4,sp
    8a02:	|               move.l d0,-(sp)
    8a04:	|               move.l d2,-(sp)
    8a06:	|               jsr 133b0 <__mulsf3>
    8a0c:	|               addq.l #8,sp
    8a0e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    8a12:	|               move.l 24(sp),-(sp)
    8a16:	|               jsr 13216 <__extendsfdf2>
    8a1c:	|               addq.l #4,sp
    8a1e:	|               move.l #-1717986918,-(sp)
    8a24:	|               move.l #1070176665,-(sp)
    8a2a:	|               move.l d1,-(sp)
    8a2c:	|               move.l d0,-(sp)
    8a2e:	|               jsr 134d6 <__ltdf2>
    8a34:	|               lea 16(sp),sp
    8a38:	|               tst.l d0
    8a3a:	|           /-- bge.s 8a44 <walkMe+0xde>
    8a3c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    8a44:	|           \-> move.l 20(sp),-(sp)
    8a48:	|               jsr 13296 <__fixsfsi>
    8a4e:	|               addq.l #4,sp
    8a50:	|               move.l d0,-(sp)
    8a52:	|               jsr 63f4 <TF_abs>
    8a58:	|               addq.l #4,sp
    8a5a:	|               move.l d0,d2
    8a5c:	|               move.l 16(sp),-(sp)
    8a60:	|               jsr 13296 <__fixsfsi>
    8a66:	|               addq.l #4,sp
    8a68:	|               move.l d0,-(sp)
    8a6a:	|               jsr 63f4 <TF_abs>
    8a70:	|               addq.l #4,sp
    8a72:	|               cmp.l d2,d0
    8a74:	|        /----- bgt.s 8a98 <walkMe+0x132>
    8a76:	|        |      move.l 20(sp),-(sp)
    8a7a:	|        |      jsr 13296 <__fixsfsi>
    8a80:	|        |      addq.l #4,sp
    8a82:	|        |      move.l d0,-(sp)
    8a84:	|        |      jsr 63f4 <TF_abs>
    8a8a:	|        |      addq.l #4,sp
    8a8c:	|        |      move.l d0,-(sp)
    8a8e:	|        |      jsr 132fe <__floatsisf>
    8a94:	|        |      addq.l #4,sp
    8a96:	|        |  /-- bra.s 8ab8 <walkMe+0x152>
    8a98:	|        \--|-> move.l 16(sp),-(sp)
    8a9c:	|           |   jsr 13296 <__fixsfsi>
    8aa2:	|           |   addq.l #4,sp
    8aa4:	|           |   move.l d0,-(sp)
    8aa6:	|           |   jsr 63f4 <TF_abs>
    8aac:	|           |   addq.l #4,sp
    8aae:	|           |   move.l d0,-(sp)
    8ab0:	|           |   jsr 132fe <__floatsisf>
    8ab6:	|           |   addq.l #4,sp
    8ab8:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    8abc:	|               move.l 12(sp),-(sp)
    8ac0:	|               jsr 13296 <__fixsfsi>
    8ac6:	|               addq.l #4,sp
    8ac8:	|               move.l d0,-(sp)
    8aca:	|               jsr 63f4 <TF_abs>
    8ad0:	|               addq.l #4,sp
    8ad2:	|               move.l d0,-(sp)
    8ad4:	|               jsr 132fe <__floatsisf>
    8ada:	|               addq.l #4,sp
    8adc:	|               move.l d0,-(sp)
    8ade:	|               move.l 28(sp),-(sp)
    8ae2:	|               jsr 13524 <__ltsf2>
    8ae8:	|               addq.l #8,sp
    8aea:	|               tst.l d0
    8aec:	|        /----- bge.w 8b9e <walkMe+0x238>
			if (thisPerson->spinning) {
    8af0:	|        |      movea.l 32(sp),a0
    8af4:	|        |      move.w 54(a0),d0
    8af8:	|        |  /-- beq.s 8b16 <walkMe+0x1b0>
				spinStep(thisPerson);
    8afa:	|        |  |   move.l 32(sp),-(sp)
    8afe:	|        |  |   jsr 8706 <spinStep>
    8b04:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    8b06:	|        |  |   pea 1 <_start+0x1>
    8b0a:	|        |  |   move.l 36(sp),-(sp)
    8b0e:	|        |  |   jsr 58ce <setFrames>
    8b14:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    8b16:	|        |  \-> move.l 24(sp),-(sp)
    8b1a:	|        |      move.l 16(sp),-(sp)
    8b1e:	|        |      jsr 131aa <__divsf3>
    8b24:	|        |      addq.l #8,sp
    8b26:	|        |      move.l d0,24(sp)
			if (move)
    8b2a:	|        |      tst.w 10(sp)
    8b2e:	|        |  /-- beq.s 8b98 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    8b30:	|        |  |   movea.l 32(sp),a0
    8b34:	|        |  |   move.l 4(a0),d2
    8b38:	|        |  |   move.l 24(sp),d0
    8b3c:	|        |  |   move.l d0,-(sp)
    8b3e:	|        |  |   move.l d0,-(sp)
    8b40:	|        |  |   jsr 130b0 <__addsf3>
    8b46:	|        |  |   addq.l #8,sp
    8b48:	|        |  |   move.l d0,-(sp)
    8b4a:	|        |  |   move.l 20(sp),-(sp)
    8b4e:	|        |  |   jsr 131aa <__divsf3>
    8b54:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8b56:	|        |  |   move.l d0,-(sp)
    8b58:	|        |  |   move.l d2,-(sp)
    8b5a:	|        |  |   jsr 130b0 <__addsf3>
    8b60:	|        |  |   addq.l #8,sp
    8b62:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    8b64:	|        |  |   movea.l 32(sp),a0
    8b68:	|        |  |   move.l (a0),d3
    8b6a:	|        |  |   move.l 24(sp),-(sp)
    8b6e:	|        |  |   move.l 24(sp),-(sp)
    8b72:	|        |  |   jsr 131aa <__divsf3>
    8b78:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8b7a:	|        |  |   move.l d0,-(sp)
    8b7c:	|        |  |   move.l d3,-(sp)
    8b7e:	|        |  |   jsr 130b0 <__addsf3>
    8b84:	|        |  |   addq.l #8,sp
    8b86:	|        |  |   move.l d2,-(sp)
    8b88:	|        |  |   move.l d0,-(sp)
    8b8a:	|        |  |   move.l 40(sp),-(sp)
    8b8e:	|        |  |   jsr 7920 <moveAndScale>
    8b94:	|        |  |   lea 12(sp),sp
			return TRUE;
    8b98:	|        |  \-> moveq #1,d0
    8b9a:	|  /-----|----- bra.w 8c4c <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    8b9e:	|  |     \----> movea.l 32(sp),a0
    8ba2:	|  |            move.l 44(a0),d0
    8ba6:	|  |            moveq #-1,d1
    8ba8:	|  |            cmp.l d0,d1
    8baa:	|  |        /-- bne.s 8be2 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    8bac:	|  |        |   movea.l 32(sp),a0
    8bb0:	|  |        |   move.l 98(a0),d0
    8bb4:	|  |        |   moveq #-1,d1
    8bb6:	|  |        |   cmp.l d0,d1
    8bb8:	|  |  /-----|-- beq.s 8bf6 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    8bba:	|  |  |     |   movea.l 32(sp),a0
    8bbe:	|  |  |     |   move.l 98(a0),d0
    8bc2:	|  |  |     |   movea.l 32(sp),a0
    8bc6:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    8bca:	|  |  |     |   movea.l 32(sp),a0
    8bce:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    8bd4:	|  |  |     |   move.l 32(sp),-(sp)
    8bd8:	|  |  |     |   jsr 8706 <spinStep>
    8bde:	|  |  |     |   addq.l #4,sp
			}
			break;
    8be0:	|  |  +-----|-- bra.s 8bf6 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    8be2:	|  |  |     \-> move.l 32(sp),-(sp)
    8be6:	|  |  |         jsr 6b1e <doBorderStuff>
    8bec:	|  |  |         addq.l #4,sp
    8bee:	|  |  |         tst.w d0
    8bf0:	|  |  |  /----- beq.s 8bfa <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8bf2:	\--|--|--|----- bra.w 8986 <walkMe+0x20>
			break;
    8bf6:	   |  \--|----> nop
    8bf8:	   |     |  /-- bra.s 8bfc <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    8bfa:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    8bfc:	   |        \-> movea.l 32(sp),a0
    8c00:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    8c04:	   |            clr.l -(sp)
    8c06:	   |            move.l 36(sp),-(sp)
    8c0a:	   |            jsr 58ce <setFrames>
    8c10:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    8c12:	   |            movea.l 32(sp),a0
    8c16:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    8c1a:	   |            move.l d0,-(sp)
    8c1c:	   |            jsr 132fe <__floatsisf>
    8c22:	   |            addq.l #4,sp
    8c24:	   |            move.l d0,d2
				 thisPerson->walkToX,
    8c26:	   |            movea.l 32(sp),a0
    8c2a:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    8c2e:	   |            move.l d0,-(sp)
    8c30:	   |            jsr 132fe <__floatsisf>
    8c36:	   |            addq.l #4,sp
    8c38:	   |            move.l d2,-(sp)
    8c3a:	   |            move.l d0,-(sp)
    8c3c:	   |            move.l 40(sp),-(sp)
    8c40:	   |            jsr 7920 <moveAndScale>
    8c46:	   |            lea 12(sp),sp
	return FALSE;
    8c4a:	   |            clr.w d0
}
    8c4c:	   \----------> move.l (sp)+,d2
    8c4e:	                move.l (sp)+,d3
    8c50:	                lea 20(sp),sp
    8c54:	                rts

00008c56 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    8c56:	             lea -20(sp),sp
    8c5a:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    8c5c:	             move.l 16864 <allLoadedBanks>,20(sp)
	while (returnMe) {
    8c64:	      /----- bra.s 8c84 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    8c66:	   /--|----> movea.l 20(sp),a0
    8c6a:	   |  |      move.l (a0),d0
    8c6c:	   |  |      cmp.l 28(sp),d0
    8c70:	   |  |  /-- bne.s 8c7a <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    8c72:	   |  |  |   move.l 20(sp),d0
    8c76:	/--|--|--|-- bra.w 8d36 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    8c7a:	|  |  |  \-> movea.l 20(sp),a0
    8c7e:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    8c84:	|  |  \----> tst.l 20(sp)
    8c88:	|  \-------- bne.s 8c66 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    8c8a:	|            moveq #26,d0
    8c8c:	|            move.l d0,16(sp)
    8c90:	|            clr.l 12(sp)
    8c94:	|            move.l 16784 <SysBase>,d0
    8c9a:	|            movea.l d0,a6
    8c9c:	|            move.l 16(sp),d0
    8ca0:	|            move.l 12(sp),d1
    8ca4:	|            jsr -684(a6)
    8ca8:	|            move.l d0,8(sp)
    8cac:	|            move.l 8(sp),d0
    8cb0:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    8cb4:	|     /----- beq.s 8d34 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    8cb6:	|     |      movea.l 20(sp),a0
    8cba:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    8cbe:	|     |      move.l 20(sp),d0
    8cc2:	|     |      addq.l #8,d0
    8cc4:	|     |      clr.l -(sp)
    8cc6:	|     |      move.l d0,-(sp)
    8cc8:	|     |      move.l 36(sp),-(sp)
    8ccc:	|     |      jsr 63d4 <loadSpriteBank>
    8cd2:	|     |      lea 12(sp),sp
    8cd6:	|     |      tst.w d0
    8cd8:	|     |  /-- beq.s 8d0c <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    8cda:	|     |  |   movea.l 20(sp),a0
    8cde:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    8ce2:	|     |  |   move.l 16864 <allLoadedBanks>,d0
    8ce8:	|     |  |   movea.l 20(sp),a0
    8cec:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    8cf0:	|     |  |   move.l 20(sp),16864 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    8cf8:	|     |  |   pea 14a21 <custom.c.9a493ead+0x271>
    8cfe:	|     |  |   jsr 13046 <KPrintF>
    8d04:	|     |  |   addq.l #4,sp
			return returnMe;
    8d06:	|     |  |   move.l 20(sp),d0
    8d0a:	+-----|--|-- bra.s 8d36 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    8d0c:	|     |  \-> pea 14a4e <custom.c.9a493ead+0x29e>
    8d12:	|     |      jsr 13046 <KPrintF>
    8d18:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    8d1a:	|     |      move.l 20(sp),4(sp)
    8d20:	|     |      move.l 16784 <SysBase>,d0
    8d26:	|     |      movea.l d0,a6
    8d28:	|     |      movea.l 4(sp),a1
    8d2c:	|     |      jsr -690(a6)
			return NULL;
    8d30:	|     |      moveq #0,d0
    8d32:	+-----|----- bra.s 8d36 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    8d34:	|     \----> moveq #0,d0
}
    8d36:	\----------> movea.l (sp)+,a6
    8d38:	             lea 20(sp),sp
    8d3c:	             rts

00008d3e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    8d3e:	       subq.l #8,sp
    8d40:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    8d42:	   /-- bra.s 8d72 <clearStackLib+0x34>
		k = stackLib;
    8d44:	/--|-> move.l 1686c <stackLib>,8(sp)
		stackLib = stackLib -> next;
    8d4c:	|  |   movea.l 1686c <stackLib>,a0
    8d52:	|  |   move.l 4(a0),d0
    8d56:	|  |   move.l d0,1686c <stackLib>
		FreeVec(k);
    8d5c:	|  |   move.l 8(sp),4(sp)
    8d62:	|  |   move.l 16784 <SysBase>,d0
    8d68:	|  |   movea.l d0,a6
    8d6a:	|  |   movea.l 4(sp),a1
    8d6e:	|  |   jsr -690(a6)
	while (stackLib) {
    8d72:	|  \-> move.l 1686c <stackLib>,d0
    8d78:	\----- bne.s 8d44 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    8d7a:	       clr.l 16868 <stackLibTotal>
}
    8d80:	       nop
    8d82:	       movea.l (sp)+,a6
    8d84:	       addq.l #8,sp
    8d86:	       rts

00008d88 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    8d88:	          lea -128(sp),sp
    8d8c:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    8d90:	      /-- bra.s 8da2 <loadGame+0x1a>
    8d92:	   /--|-> move.l 16720 <allRunningFunctions>,d0
    8d98:	   |  |   move.l d0,-(sp)
    8d9a:	   |  |   jsr 316e <finishFunction>
    8da0:	   |  |   addq.l #4,sp
    8da2:	   |  \-> move.l 16720 <allRunningFunctions>,d0
    8da8:	   \----- bne.s 8d92 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    8daa:	          pea 16870 <ssgVersion>
    8db0:	          pea 14aac <custom.c.9a493ead+0x2fc>
    8db6:	          pea 41 <_start+0x41>
    8dba:	          pea 53 <_start+0x53>
    8dbe:	          move.l 160(sp),-(sp)
    8dc2:	          jsr 3c96 <openAndVerify>
    8dc8:	          lea 20(sp),sp
    8dcc:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    8dd0:	      /-- bne.s 8dd8 <loadGame+0x50>
    8dd2:	      |   clr.w d0
    8dd4:	/-----|-- bra.w 907e <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    8dd8:	|     \-> move.l 112(sp),108(sp)
    8dde:	|         lea 140(sp),a0
    8de2:	|         lea -126(a0),a0
    8de6:	|         move.l a0,120(sp)
    8dea:	|         moveq #8,d0
    8dec:	|         move.l d0,116(sp)
    8df0:	|         move.l 1678c <DOSBase>,d0
    8df6:	|         movea.l d0,a6
    8df8:	|         move.l 108(sp),d1
    8dfc:	|         move.l 120(sp),d2
    8e00:	|         move.l 116(sp),d3
    8e04:	|         jsr -42(a6)
    8e08:	|         move.l d0,132(sp)
    8e0c:	|         move.l 132(sp),d0
    8e10:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    8e14:	|         moveq #8,d0
    8e16:	|         cmp.l 128(sp),d0
    8e1a:	|     /-- beq.s 8e2a <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    8e1c:	|     |   pea 14acd <custom.c.9a493ead+0x31d>
    8e22:	|     |   jsr 13046 <KPrintF>
    8e28:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8e2a:	|     \-> move.l 14(sp),d1
    8e2e:	|         move.l 1672a <fileTime>,d0
    8e34:	|         cmp.l d1,d0
    8e36:	|     /-- bne.s 8e46 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    8e38:	|     |   move.l 18(sp),d1
    8e3c:	|     |   move.l 1672e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8e42:	|     |   cmp.l d1,d0
    8e44:	|  /--|-- beq.s 8e66 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8e46:	|  |  \-> move.l 144(sp),-(sp)
    8e4a:	|  |      pea 14ae9 <custom.c.9a493ead+0x339>
    8e50:	|  |      pea 14bb0 <custom.c.9a493ead+0x400>
    8e56:	|  |      jsr 13046 <KPrintF>
    8e5c:	|  |      lea 12(sp),sp
		return FALSE; 
    8e60:	|  |      clr.w d0
    8e62:	+--|----- bra.w 907e <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    8e66:	|  \----> move.l 112(sp),124(sp)
    8e6c:	|         move.l 1678c <DOSBase>,d0
    8e72:	|         movea.l d0,a6
    8e74:	|         move.l 124(sp),d1
    8e78:	|         jsr -306(a6)
    8e7c:	|         move.l d0,136(sp)
    8e80:	|         move.l 136(sp),d0
    8e84:	|         move.l d0,d0
    8e86:	|         move.w d0,16000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    8e8c:	|         move.l 112(sp),100(sp)
    8e92:	|         move.l 1678c <DOSBase>,d0
    8e98:	|         movea.l d0,a6
    8e9a:	|         move.l 100(sp),d1
    8e9e:	|         jsr -306(a6)
    8ea2:	|         move.l d0,96(sp)
    8ea6:	|         move.l 96(sp),d0
    8eaa:	|         move.l d0,d0
    8eac:	|         move.w d0,16728 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    8eb2:	|         move.l 112(sp),92(sp)
    8eb8:	|         move.l 1678c <DOSBase>,d0
    8ebe:	|         movea.l d0,a6
    8ec0:	|         move.l 92(sp),d1
    8ec4:	|         jsr -306(a6)
    8ec8:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    8ecc:	|         move.l 112(sp),84(sp)
    8ed2:	|         move.l 1678c <DOSBase>,d0
    8ed8:	|         movea.l d0,a6
    8eda:	|         move.l 84(sp),d1
    8ede:	|         jsr -306(a6)
    8ee2:	|         move.l d0,80(sp)
    8ee6:	|         move.l 80(sp),d0
    8eea:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    8eee:	|     /-- beq.s 8f22 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    8ef0:	|     |   move.l 112(sp),-(sp)
    8ef4:	|     |   jsr 6bc <get2bytes>
    8efa:	|     |   addq.l #4,sp
    8efc:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    8f00:	|     |   move.l 112(sp),-(sp)
    8f04:	|     |   jsr 6bc <get2bytes>
    8f0a:	|     |   addq.l #4,sp
    8f0c:	|     |   move.l d0,168cc <fontHeight>
		charOrder = readString(fp);		
    8f12:	|     |   move.l 112(sp),-(sp)
    8f16:	|     |   jsr b02 <readString>
    8f1c:	|     |   addq.l #4,sp
    8f1e:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    8f22:	|     \-> move.l 104(sp),70(sp)
    8f28:	|         move.l 16784 <SysBase>,d0
    8f2e:	|         movea.l d0,a6
    8f30:	|         movea.l 70(sp),a1
    8f34:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    8f38:	|         move.l 112(sp),-(sp)
    8f3c:	|         jsr 854 <getSigned>
    8f42:	|         addq.l #4,sp
    8f44:	|         move.w d0,166a8 <fontSpace>

	killAllPeople ();
    8f4a:	|         jsr 75c2 <killAllPeople>
	killAllRegions ();
    8f50:	|         jsr 11af6 <killAllRegions>

	int camerX = get2bytes (fp);
    8f56:	|         move.l 112(sp),-(sp)
    8f5a:	|         jsr 6bc <get2bytes>
    8f60:	|         addq.l #4,sp
    8f62:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    8f66:	|         move.l 112(sp),-(sp)
    8f6a:	|         jsr 6bc <get2bytes>
    8f70:	|         addq.l #4,sp
    8f72:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    8f76:	|         move.l 112(sp),-(sp)
    8f7a:	|         jsr 7d8 <getFloat>
    8f80:	|         addq.l #4,sp
    8f82:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    8f86:	|         move.l 112(sp),54(sp)
    8f8c:	|         move.l 1678c <DOSBase>,d0
    8f92:	|         movea.l d0,a6
    8f94:	|         move.l 54(sp),d1
    8f98:	|         jsr -306(a6)
    8f9c:	|         move.l d0,50(sp)
    8fa0:	|         move.l 50(sp),d0
    8fa4:	|         move.l d0,d0
    8fa6:	|         move.b d0,1611a <brightnessLevel>

	loadHandlers (fp);
    8fac:	|         move.l 112(sp),-(sp)
    8fb0:	|         jsr 3bf6 <loadHandlers>
    8fb6:	|         addq.l #4,sp
	loadRegions (fp);
    8fb8:	|         move.l 112(sp),-(sp)
    8fbc:	|         jsr 11b52 <loadRegions>
    8fc2:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8fc4:	|         moveq #12,d0
    8fc6:	|         move.l d0,46(sp)
    8fca:	|         clr.l 42(sp)
    8fce:	|         move.l 16784 <SysBase>,d0
    8fd4:	|         movea.l d0,a6
    8fd6:	|         move.l 46(sp),d0
    8fda:	|         move.l 42(sp),d1
    8fde:	|         jsr -684(a6)
    8fe2:	|         move.l d0,38(sp)
    8fe6:	|         move.l 38(sp),d0
    8fea:	|         move.l d0,166aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    8ff0:	|         move.l 166aa <mouseCursorAnim>,d0
    8ff6:	|     /-- bne.s 900a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8ff8:	|     |   pea 14bba <custom.c.9a493ead+0x40a>
    8ffe:	|     |   jsr 13046 <KPrintF>
    9004:	|     |   addq.l #4,sp
		return FALSE;
    9006:	|     |   clr.w d0
    9008:	+-----|-- bra.s 907e <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    900a:	|     \-> jsr 9cda <nosnapshot>
	if (FGetC (fp)) {
    9010:	|         move.l 112(sp),34(sp)
    9016:	|         move.l 1678c <DOSBase>,d0
    901c:	|         movea.l d0,a6
    901e:	|         move.l 34(sp),d1
    9022:	|         jsr -306(a6)
    9026:	|         move.l d0,30(sp)
    902a:	|         move.l 30(sp),d0
    902e:	|     /-- beq.s 9044 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    9030:	|     |   move.l 112(sp),-(sp)
    9034:	|     |   jsr 9d4e <restoreSnapshot>
    903a:	|     |   addq.l #4,sp
    903c:	|     |   tst.w d0
    903e:	|     +-- bne.s 9044 <loadGame+0x2bc>
    9040:	|     |   clr.w d0
    9042:	+-----|-- bra.s 907e <loadGame+0x2f6>
	}

	Close (fp);
    9044:	|     \-> move.l 112(sp),26(sp)
    904a:	|         move.l 1678c <DOSBase>,d0
    9050:	|         movea.l d0,a6
    9052:	|         move.l 26(sp),d1
    9056:	|         jsr -36(a6)
    905a:	|         move.l d0,22(sp)
	clearStackLib ();
    905e:	|         jsr 8d3e <clearStackLib>

	cameraX = camerX;
    9064:	|         move.l 66(sp),16892 <cameraX>
	cameraY = camerY;
    906c:	|         move.l 62(sp),16896 <cameraY>
	cameraZoom = camerZ;
    9074:	|         move.l 58(sp),16142 <cameraZoom>

	return TRUE;
    907c:	|         moveq #1,d0
}
    907e:	\-------> movem.l (sp)+,d2-d3/a6
    9082:	          lea 128(sp),sp
    9086:	          rts

00009088 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    9088:	   /-> lea -64(sp),sp
    908c:	   |   move.l a6,-(sp)
    908e:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    9090:	   |   movea.l 76(sp),a0
    9094:	   |   move.l (a0),d0
    9096:	   |   move.l 80(sp),-(sp)
    909a:	   |   move.l d0,-(sp)
    909c:	   |   jsr 8d0 <put2bytes>
    90a2:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    90a4:	   |   movea.l 76(sp),a0
    90a8:	   |   move.l 40(a0),d0
    90ac:	/--|-- beq.s 90e8 <saveFunction+0x60>
		FPutC (fp, 1);
    90ae:	|  |   move.l 80(sp),52(sp)
    90b4:	|  |   moveq #1,d0
    90b6:	|  |   move.l d0,48(sp)
    90ba:	|  |   move.l 1678c <DOSBase>,d0
    90c0:	|  |   movea.l d0,a6
    90c2:	|  |   move.l 52(sp),d1
    90c6:	|  |   move.l 48(sp),d2
    90ca:	|  |   jsr -312(a6)
    90ce:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    90d2:	|  |   movea.l 76(sp),a0
    90d6:	|  |   move.l 40(a0),d0
    90da:	|  |   move.l 80(sp),-(sp)
    90de:	|  |   move.l d0,-(sp)
    90e0:	|  \-- jsr 9088 <saveFunction>(pc)
    90e4:	|      addq.l #8,sp
    90e6:	|  /-- bra.s 910a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    90e8:	\--|-> move.l 80(sp),64(sp)
    90ee:	   |   clr.l 60(sp)
    90f2:	   |   move.l 1678c <DOSBase>,d0
    90f8:	   |   movea.l d0,a6
    90fa:	   |   move.l 64(sp),d1
    90fe:	   |   move.l 60(sp),d2
    9102:	   |   jsr -312(a6)
    9106:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    910a:	   \-> movea.l 76(sp),a0
    910e:	       move.l 12(a0),d0
    9112:	       move.l 80(sp),-(sp)
    9116:	       move.l d0,-(sp)
    9118:	       jsr 958 <put4bytes>
    911e:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    9120:	       movea.l 76(sp),a0
    9124:	       move.l 36(a0),d0
    9128:	       move.l 80(sp),-(sp)
    912c:	       move.l d0,-(sp)
    912e:	       jsr 8d0 <put2bytes>
    9134:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    9136:	       move.l 80(sp),40(sp)
    913c:	       movea.l 76(sp),a0
    9140:	       move.w 54(a0),d0
    9144:	       movea.w d0,a0
    9146:	       move.l a0,36(sp)
    914a:	       move.l 1678c <DOSBase>,d0
    9150:	       movea.l d0,a6
    9152:	       move.l 40(sp),d1
    9156:	       move.l 36(sp),d2
    915a:	       jsr -312(a6)
    915e:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    9162:	       move.l 80(sp),28(sp)
    9168:	       movea.l 76(sp),a0
    916c:	       move.w 48(a0),d0
    9170:	       movea.w d0,a0
    9172:	       move.l a0,24(sp)
    9176:	       move.l 1678c <DOSBase>,d0
    917c:	       movea.l d0,a6
    917e:	       move.l 28(sp),d1
    9182:	       move.l 24(sp),d2
    9186:	       jsr -312(a6)
    918a:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    918e:	       move.l 80(sp),16(sp)
    9194:	       movea.l 76(sp),a0
    9198:	       move.w 50(a0),d0
    919c:	       movea.w d0,a0
    919e:	       move.l a0,12(sp)
    91a2:	       move.l 1678c <DOSBase>,d0
    91a8:	       movea.l d0,a6
    91aa:	       move.l 16(sp),d1
    91ae:	       move.l 12(sp),d2
    91b2:	       jsr -312(a6)
    91b6:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    91ba:	       moveq #28,d0
    91bc:	       add.l 76(sp),d0
    91c0:	       move.l 80(sp),-(sp)
    91c4:	       move.l d0,-(sp)
    91c6:	       jsr 9944 <saveVariable>
    91cc:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    91ce:	       movea.l 76(sp),a0
    91d2:	       move.b 56(a0),d0
    91d6:	   /-- beq.s 91e6 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    91d8:	   |   pea 14bdb <custom.c.9a493ead+0x42b>
    91de:	   |   jsr 13046 <KPrintF>
    91e4:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    91e6:	   \-> movea.l 76(sp),a0
    91ea:	       move.l 24(a0),d0
    91ee:	       move.l 80(sp),-(sp)
    91f2:	       move.l d0,-(sp)
    91f4:	       jsr 97b8 <saveStack>
    91fa:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    91fc:	       clr.l 68(sp)
    9200:	   /-- bra.s 9224 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    9202:	/--|-> movea.l 76(sp),a0
    9206:	|  |   move.l 20(a0),d1
    920a:	|  |   move.l 68(sp),d0
    920e:	|  |   lsl.l #3,d0
    9210:	|  |   add.l d1,d0
    9212:	|  |   move.l 80(sp),-(sp)
    9216:	|  |   move.l d0,-(sp)
    9218:	|  |   jsr 9944 <saveVariable>
    921e:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9220:	|  |   addq.l #1,68(sp)
    9224:	|  \-> movea.l 76(sp),a0
    9228:	|      move.l 8(a0),d0
    922c:	|      cmp.l 68(sp),d0
    9230:	\----- bgt.s 9202 <saveFunction+0x17a>
	}
}
    9232:	       nop
    9234:	       nop
    9236:	       move.l (sp)+,d2
    9238:	       movea.l (sp)+,a6
    923a:	       lea 64(sp),sp
    923e:	       rts

00009240 <saveGame>:

BOOL saveGame (char * fname) {
    9240:	          lea -272(sp),sp
    9244:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    9248:	          move.l 288(sp),268(sp)
    924e:	          move.l #1006,264(sp)
    9256:	          move.l 1678c <DOSBase>,d0
    925c:	          movea.l d0,a6
    925e:	          move.l 268(sp),d1
    9262:	          move.l 264(sp),d2
    9266:	          jsr -30(a6)
    926a:	          move.l d0,260(sp)
    926e:	          move.l 260(sp),d0
    9272:	          move.l d0,256(sp)
	if (fp == NULL) {
    9276:	      /-- bne.s 928c <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    9278:	      |   pea 14bfd <custom.c.9a493ead+0x44d>
    927e:	      |   jsr 13046 <KPrintF>
    9284:	      |   addq.l #4,sp
		return FALSE;
    9286:	      |   clr.w d0
    9288:	/-----|-- bra.w 97ae <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    928c:	|     \-> move.l 256(sp),252(sp)
    9292:	|         move.l #85018,248(sp)
    929a:	|         moveq #6,d0
    929c:	|         move.l d0,244(sp)
    92a0:	|         move.l 1678c <DOSBase>,d0
    92a6:	|         movea.l d0,a6
    92a8:	|         move.l 252(sp),d1
    92ac:	|         move.l 248(sp),d2
    92b0:	|         move.l 244(sp),d3
    92b4:	|         jsr -48(a6)
    92b8:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    92bc:	|         move.l 256(sp),236(sp)
    92c2:	|         clr.l 232(sp)
    92c6:	|         move.l 1678c <DOSBase>,d0
    92cc:	|         movea.l d0,a6
    92ce:	|         move.l 236(sp),d1
    92d2:	|         move.l 232(sp),d2
    92d6:	|         jsr -312(a6)
    92da:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    92de:	|         move.l 256(sp),224(sp)
    92e4:	|         clr.l 220(sp)
    92e8:	|         move.l 1678c <DOSBase>,d0
    92ee:	|         movea.l d0,a6
    92f0:	|         move.l 224(sp),d1
    92f4:	|         move.l 220(sp),d2
    92f8:	|         jsr -312(a6)
    92fc:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    9300:	|         move.l 256(sp),212(sp)
    9306:	|         moveq #2,d0
    9308:	|         move.l d0,208(sp)
    930c:	|         move.l 1678c <DOSBase>,d0
    9312:	|         movea.l d0,a6
    9314:	|         move.l 212(sp),d1
    9318:	|         move.l 208(sp),d2
    931c:	|         jsr -312(a6)
    9320:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    9324:	|         move.l 256(sp),200(sp)
    932a:	|         moveq #2,d0
    932c:	|         move.l d0,196(sp)
    9330:	|         move.l 1678c <DOSBase>,d0
    9336:	|         movea.l d0,a6
    9338:	|         move.l 200(sp),d1
    933c:	|         move.l 196(sp),d2
    9340:	|         jsr -312(a6)
    9344:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    9348:	|         move.l 256(sp),188(sp)
    934e:	|         move.l #91946,184(sp)
    9356:	|         moveq #8,d0
    9358:	|         move.l d0,180(sp)
    935c:	|         move.l 1678c <DOSBase>,d0
    9362:	|         movea.l d0,a6
    9364:	|         move.l 188(sp),d1
    9368:	|         move.l 184(sp),d2
    936c:	|         move.l 180(sp),d3
    9370:	|         jsr -48(a6)
    9374:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    9378:	|         move.l 256(sp),172(sp)
    937e:	|         move.w 16000 <allowAnyFilename>,d0
    9384:	|         movea.w d0,a0
    9386:	|         move.l a0,168(sp)
    938a:	|         move.l 1678c <DOSBase>,d0
    9390:	|         movea.l d0,a6
    9392:	|         move.l 172(sp),d1
    9396:	|         move.l 168(sp),d2
    939a:	|         jsr -312(a6)
    939e:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    93a2:	|         move.l 256(sp),160(sp)
    93a8:	|         move.w 16728 <captureAllKeys>,d0
    93ae:	|         movea.w d0,a0
    93b0:	|         move.l a0,156(sp)
    93b4:	|         move.l 1678c <DOSBase>,d0
    93ba:	|         movea.l d0,a6
    93bc:	|         move.l 160(sp),d1
    93c0:	|         move.l 156(sp),d2
    93c4:	|         jsr -312(a6)
    93c8:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    93cc:	|         move.l 256(sp),148(sp)
    93d2:	|         moveq #1,d0
    93d4:	|         move.l d0,144(sp)
    93d8:	|         move.l 1678c <DOSBase>,d0
    93de:	|         movea.l d0,a6
    93e0:	|         move.l 148(sp),d1
    93e4:	|         move.l 144(sp),d2
    93e8:	|         jsr -312(a6)
    93ec:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    93f0:	|         move.l 256(sp),136(sp)
    93f6:	|         move.l 168d8 <fontTableSize>,d0
    93fc:	|         sgt d0
    93fe:	|         neg.b d0
    9400:	|         move.b d0,d0
    9402:	|         andi.l #255,d0
    9408:	|         move.l d0,132(sp)
    940c:	|         move.l 1678c <DOSBase>,d0
    9412:	|         movea.l d0,a6
    9414:	|         move.l 136(sp),d1
    9418:	|         move.l 132(sp),d2
    941c:	|         jsr -312(a6)
    9420:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    9424:	|         move.l 168d8 <fontTableSize>,d0
    942a:	|     /-- ble.s 9468 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    942c:	|     |   move.l 168d0 <loadedFontNum>,d0
    9432:	|     |   move.l 256(sp),-(sp)
    9436:	|     |   move.l d0,-(sp)
    9438:	|     |   jsr 8d0 <put2bytes>
    943e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    9440:	|     |   move.l 168cc <fontHeight>,d0
    9446:	|     |   move.l 256(sp),-(sp)
    944a:	|     |   move.l d0,-(sp)
    944c:	|     |   jsr 8d0 <put2bytes>
    9452:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    9454:	|     |   move.l 168d4 <fontOrderString>,d0
    945a:	|     |   move.l 256(sp),-(sp)
    945e:	|     |   move.l d0,-(sp)
    9460:	|     |   jsr bd8 <writeString>
    9466:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    9468:	|     \-> move.w 166a8 <fontSpace>,d0
    946e:	|         movea.w d0,a0
    9470:	|         move.l 256(sp),-(sp)
    9474:	|         move.l a0,-(sp)
    9476:	|         jsr a9c <putSigned>
    947c:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    947e:	|         move.l 16892 <cameraX>,d0
    9484:	|         move.l 256(sp),-(sp)
    9488:	|         move.l d0,-(sp)
    948a:	|         jsr 8d0 <put2bytes>
    9490:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    9492:	|         move.l 16896 <cameraY>,d0
    9498:	|         move.l 256(sp),-(sp)
    949c:	|         move.l d0,-(sp)
    949e:	|         jsr 8d0 <put2bytes>
    94a4:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    94a6:	|         move.l 16142 <cameraZoom>,d0
    94ac:	|         move.l 256(sp),-(sp)
    94b0:	|         move.l d0,-(sp)
    94b2:	|         jsr a46 <putFloat>
    94b8:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    94ba:	|         move.l 256(sp),124(sp)
    94c0:	|         move.b 1611a <brightnessLevel>,d0
    94c6:	|         move.b d0,d0
    94c8:	|         andi.l #255,d0
    94ce:	|         move.l d0,120(sp)
    94d2:	|         move.l 1678c <DOSBase>,d0
    94d8:	|         movea.l d0,a6
    94da:	|         move.l 124(sp),d1
    94de:	|         move.l 120(sp),d2
    94e2:	|         jsr -312(a6)
    94e6:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    94ea:	|         move.l 256(sp),-(sp)
    94ee:	|         jsr 417a <saveHandlers>
    94f4:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    94f6:	|         move.l 256(sp),-(sp)
    94fa:	|         jsr 11d0c <saveRegions>
    9500:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    9502:	|         move.l 166aa <mouseCursorAnim>,d0
    9508:	|         move.l 256(sp),-(sp)
    950c:	|         move.l d0,-(sp)
    950e:	|         jsr 7af0 <saveAnim>
    9514:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    9516:	|         move.l 166ae <mouseCursorFrameNum>,d0
    951c:	|         move.l 256(sp),-(sp)
    9520:	|         move.l d0,-(sp)
    9522:	|         jsr 8d0 <put2bytes>
    9528:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    952a:	|         move.l 16720 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    9532:	|         clr.l 272(sp)
	while (thisFunction) {
    9536:	|     /-- bra.s 9546 <saveGame+0x306>
		countFunctions ++;
    9538:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    953c:	|  |  |   movea.l 276(sp),a0
    9540:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    9546:	|  |  \-> tst.l 276(sp)
    954a:	|  \----- bne.s 9538 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    954c:	|         move.l 256(sp),-(sp)
    9550:	|         move.l 276(sp),-(sp)
    9554:	|         jsr 8d0 <put2bytes>
    955a:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    955c:	|         move.l 16720 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    9564:	|     /-- bra.s 9580 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    9566:	|  /--|-> move.l 256(sp),-(sp)
    956a:	|  |  |   move.l 280(sp),-(sp)
    956e:	|  |  |   jsr 9088 <saveFunction>
    9574:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    9576:	|  |  |   movea.l 276(sp),a0
    957a:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    9580:	|  |  \-> tst.l 276(sp)
    9584:	|  \----- bne.s 9566 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    9586:	|         clr.l 280(sp)
    958a:	|     /-- bra.s 95ac <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    958c:	|  /--|-> move.l 16736 <globalVars>,d1
    9592:	|  |  |   move.l 280(sp),d0
    9596:	|  |  |   lsl.l #3,d0
    9598:	|  |  |   add.l d1,d0
    959a:	|  |  |   move.l 256(sp),-(sp)
    959e:	|  |  |   move.l d0,-(sp)
    95a0:	|  |  |   jsr 9944 <saveVariable>
    95a6:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    95a8:	|  |  |   addq.l #1,280(sp)
    95ac:	|  |  \-> move.l 1675c <numGlobals>,d0
    95b2:	|  |      cmp.l 280(sp),d0
    95b6:	|  \----- bgt.s 958c <saveGame+0x34c>
	}

	savePeople (fp);
    95b8:	|         move.l 256(sp),-(sp)
    95bc:	|         jsr 7c18 <savePeople>
    95c2:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    95c4:	|         movea.l 168e4 <currentFloor>,a0
    95ca:	|         move.l 8(a0),d0
    95ce:	|  /----- beq.s 960c <saveGame+0x3cc>
		FPutC (fp, 1);
    95d0:	|  |      move.l 256(sp),100(sp)
    95d6:	|  |      moveq #1,d0
    95d8:	|  |      move.l d0,96(sp)
    95dc:	|  |      move.l 1678c <DOSBase>,d0
    95e2:	|  |      movea.l d0,a6
    95e4:	|  |      move.l 100(sp),d1
    95e8:	|  |      move.l 96(sp),d2
    95ec:	|  |      jsr -312(a6)
    95f0:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    95f4:	|  |      movea.l 168e4 <currentFloor>,a0
    95fa:	|  |      move.l (a0),d0
    95fc:	|  |      move.l 256(sp),-(sp)
    9600:	|  |      move.l d0,-(sp)
    9602:	|  |      jsr 8d0 <put2bytes>
    9608:	|  |      addq.l #8,sp
    960a:	|  |  /-- bra.s 962e <saveGame+0x3ee>
	} else FPutC (fp, 0);
    960c:	|  \--|-> move.l 256(sp),112(sp)
    9612:	|     |   clr.l 108(sp)
    9616:	|     |   move.l 1678c <DOSBase>,d0
    961c:	|     |   movea.l d0,a6
    961e:	|     |   move.l 112(sp),d1
    9622:	|     |   move.l 108(sp),d2
    9626:	|     |   jsr -312(a6)
    962a:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    962e:	|     \-> move.l 16834 <line.c.05397aaf+0x40>,d0
    9634:	|  /----- beq.s 9670 <saveGame+0x430>
		FPutC (fp, 1);
    9636:	|  |      move.l 256(sp),76(sp)
    963c:	|  |      moveq #1,d0
    963e:	|  |      move.l d0,72(sp)
    9642:	|  |      move.l 1678c <DOSBase>,d0
    9648:	|  |      movea.l d0,a6
    964a:	|  |      move.l 76(sp),d1
    964e:	|  |      move.l 72(sp),d2
    9652:	|  |      jsr -312(a6)
    9656:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    965a:	|  |      move.l 16830 <line.c.05397aaf+0x3c>,d0
    9660:	|  |      move.l 256(sp),-(sp)
    9664:	|  |      move.l d0,-(sp)
    9666:	|  |      jsr 8d0 <put2bytes>
    966c:	|  |      addq.l #8,sp
    966e:	|  |  /-- bra.s 9692 <saveGame+0x452>
	} else FPutC (fp,0);
    9670:	|  \--|-> move.l 256(sp),88(sp)
    9676:	|     |   clr.l 84(sp)
    967a:	|     |   move.l 1678c <DOSBase>,d0
    9680:	|     |   movea.l d0,a6
    9682:	|     |   move.l 88(sp),d1
    9686:	|     |   move.l 84(sp),d2
    968a:	|     |   jsr -312(a6)
    968e:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    9692:	|     \-> move.l 256(sp),64(sp)
    9698:	|         move.l 168a6 <speechMode>,60(sp)
    96a0:	|         move.l 1678c <DOSBase>,d0
    96a6:	|         movea.l d0,a6
    96a8:	|         move.l 64(sp),d1
    96ac:	|         move.l 60(sp),d2
    96b0:	|         jsr -312(a6)
    96b4:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    96b8:	|         move.b 1667e <fadeMode>,d0
    96be:	|         move.b d0,d0
    96c0:	|         andi.l #255,d0
    96c6:	|         move.l d0,52(sp)
    96ca:	|         move.l 256(sp),48(sp)
    96d0:	|         move.l 1678c <DOSBase>,d0
    96d6:	|         movea.l d0,a6
    96d8:	|         move.l 52(sp),d1
    96dc:	|         move.l 48(sp),d2
    96e0:	|         jsr -312(a6)
    96e4:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    96e8:	|         move.l 167e0 <speech>,d0
    96ee:	|         move.l 256(sp),-(sp)
    96f2:	|         move.l d0,-(sp)
    96f4:	|         jsr 5782 <saveSpeech>
    96fa:	|         addq.l #8,sp
	saveStatusBars (fp);
    96fc:	|         move.l 256(sp),-(sp)
    9700:	|         jsr 517e <saveStatusBars>
    9706:	|         addq.l #4,sp
	saveSounds (fp);
    9708:	|         move.l 256(sp),-(sp)
    970c:	|         jsr 9a88 <saveSounds>
    9712:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    9714:	|         move.w 16890 <saveEncoding>,d0
    971a:	|         move.w d0,d0
    971c:	|         andi.l #65535,d0
    9722:	|         move.l 256(sp),-(sp)
    9726:	|         move.l d0,-(sp)
    9728:	|         jsr 8d0 <put2bytes>
    972e:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    9730:	|         move.l 16882 <parallaxStuff>,d0
    9736:	|         move.l 256(sp),-(sp)
    973a:	|         move.l d0,-(sp)
    973c:	|         jsr 9d74 <saveParallaxRecursive>
    9742:	|         addq.l #8,sp
	FPutC (fp, 0);
    9744:	|         move.l 256(sp),40(sp)
    974a:	|         clr.l 36(sp)
    974e:	|         move.l 1678c <DOSBase>,d0
    9754:	|         movea.l d0,a6
    9756:	|         move.l 40(sp),d1
    975a:	|         move.l 36(sp),d2
    975e:	|         jsr -312(a6)
    9762:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    9766:	|         move.l 256(sp),28(sp)
    976c:	|         move.l 16120 <languageNum>,24(sp)
    9774:	|         move.l 1678c <DOSBase>,d0
    977a:	|         movea.l d0,a6
    977c:	|         move.l 28(sp),d1
    9780:	|         move.l 24(sp),d2
    9784:	|         jsr -312(a6)
    9788:	|         move.l d0,20(sp)

	Close(fp);
    978c:	|         move.l 256(sp),16(sp)
    9792:	|         move.l 1678c <DOSBase>,d0
    9798:	|         movea.l d0,a6
    979a:	|         move.l 16(sp),d1
    979e:	|         jsr -36(a6)
    97a2:	|         move.l d0,12(sp)
	clearStackLib ();
    97a6:	|         jsr 8d3e <clearStackLib>
	return TRUE;
    97ac:	|         moveq #1,d0
}
    97ae:	\-------> movem.l (sp)+,d2-d3/a6
    97b2:	          lea 272(sp),sp
    97b6:	          rts

000097b8 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    97b8:	       lea -12(sp),sp
	int elements = 0;
    97bc:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    97c0:	       move.l 16(sp),(sp)
	while (search) {
    97c4:	   /-- bra.s 97d0 <saveStack+0x18>
		elements ++;
    97c6:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    97ca:	|  |   movea.l (sp),a0
    97cc:	|  |   move.l 8(a0),(sp)
	while (search) {
    97d0:	|  \-> tst.l (sp)
    97d2:	\----- bne.s 97c6 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    97d4:	       move.l 20(sp),-(sp)
    97d8:	       move.l 12(sp),-(sp)
    97dc:	       jsr 8d0 <put2bytes>
    97e2:	       addq.l #8,sp
	search = vs;
    97e4:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    97e8:	       clr.l 4(sp)
    97ec:	   /-- bra.s 9808 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    97ee:	/--|-> move.l (sp),d0
    97f0:	|  |   move.l 20(sp),-(sp)
    97f4:	|  |   move.l d0,-(sp)
    97f6:	|  |   jsr 9944 <saveVariable>
    97fc:	|  |   addq.l #8,sp
		search = search -> next;
    97fe:	|  |   movea.l (sp),a0
    9800:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    9804:	|  |   addq.l #1,4(sp)
    9808:	|  \-> move.l 4(sp),d0
    980c:	|      cmp.l 8(sp),d0
    9810:	\----- blt.s 97ee <saveStack+0x36>
	}
}
    9812:	       nop
    9814:	       nop
    9816:	       lea 12(sp),sp
    981a:	       rts

0000981c <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    981c:	             lea -44(sp),sp
    9820:	             move.l a6,-(sp)
    9822:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    9824:	             move.l 1686c <stackLib>,48(sp)
	int a = 0;
    982c:	             clr.l 44(sp)
	while (s) {
    9830:	      /----- bra.s 988e <saveStackRef+0x72>
		if (s -> stack == vs) {
    9832:	   /--|----> movea.l 48(sp),a0
    9836:	   |  |      move.l (a0),d0
    9838:	   |  |      cmp.l 56(sp),d0
    983c:	   |  |  /-- bne.s 9880 <saveStackRef+0x64>
			FPutC (fp, 1);
    983e:	   |  |  |   move.l 60(sp),16(sp)
    9844:	   |  |  |   moveq #1,d0
    9846:	   |  |  |   move.l d0,12(sp)
    984a:	   |  |  |   move.l 1678c <DOSBase>,d0
    9850:	   |  |  |   movea.l d0,a6
    9852:	   |  |  |   move.l 16(sp),d1
    9856:	   |  |  |   move.l 12(sp),d2
    985a:	   |  |  |   jsr -312(a6)
    985e:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    9862:	   |  |  |   move.l 16868 <stackLibTotal>,d0
    9868:	   |  |  |   sub.l 44(sp),d0
    986c:	   |  |  |   move.l 60(sp),-(sp)
    9870:	   |  |  |   move.l d0,-(sp)
    9872:	   |  |  |   jsr 8d0 <put2bytes>
    9878:	   |  |  |   addq.l #8,sp
			return TRUE;
    987a:	   |  |  |   moveq #1,d0
    987c:	/--|--|--|-- bra.w 993a <saveStackRef+0x11e>
		}
		s = s -> next;
    9880:	|  |  |  \-> movea.l 48(sp),a0
    9884:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    988a:	|  |  |      addq.l #1,44(sp)
	while (s) {
    988e:	|  |  \----> tst.l 48(sp)
    9892:	|  \-------- bne.s 9832 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    9894:	|            move.l 60(sp),40(sp)
    989a:	|            clr.l 36(sp)
    989e:	|            move.l 1678c <DOSBase>,d0
    98a4:	|            movea.l d0,a6
    98a6:	|            move.l 40(sp),d1
    98aa:	|            move.l 36(sp),d2
    98ae:	|            jsr -312(a6)
    98b2:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    98b6:	|            movea.l 56(sp),a0
    98ba:	|            move.l (a0),d0
    98bc:	|            move.l 60(sp),-(sp)
    98c0:	|            move.l d0,-(sp)
    98c2:	|            jsr 97b8 <saveStack>
    98c8:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    98ca:	|            moveq #8,d0
    98cc:	|            move.l d0,28(sp)
    98d0:	|            clr.l 24(sp)
    98d4:	|            move.l 16784 <SysBase>,d0
    98da:	|            movea.l d0,a6
    98dc:	|            move.l 28(sp),d0
    98e0:	|            move.l 24(sp),d1
    98e4:	|            jsr -684(a6)
    98e8:	|            move.l d0,20(sp)
    98ec:	|            move.l 20(sp),d0
    98f0:	|            move.l d0,48(sp)
	stackLibTotal ++;
    98f4:	|            move.l 16868 <stackLibTotal>,d0
    98fa:	|            addq.l #1,d0
    98fc:	|            move.l d0,16868 <stackLibTotal>
	if (! s) {
    9902:	|            tst.l 48(sp)
    9906:	|        /-- bne.s 991a <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    9908:	|        |   pea 14c49 <custom.c.9a493ead+0x499>
    990e:	|        |   jsr 13046 <KPrintF>
    9914:	|        |   addq.l #4,sp
		return FALSE;
    9916:	|        |   clr.w d0
    9918:	+--------|-- bra.s 993a <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    991a:	|        \-> move.l 1686c <stackLib>,d0
    9920:	|            movea.l 48(sp),a0
    9924:	|            move.l d0,4(a0)
	s -> stack = vs;
    9928:	|            movea.l 48(sp),a0
    992c:	|            move.l 56(sp),(a0)
	stackLib = s;
    9930:	|            move.l 48(sp),1686c <stackLib>
	return TRUE;
    9938:	|            moveq #1,d0
}
    993a:	\----------> move.l (sp)+,d2
    993c:	             movea.l (sp)+,a6
    993e:	             lea 44(sp),sp
    9942:	             rts

00009944 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    9944:	          lea -12(sp),sp
    9948:	          move.l a6,-(sp)
    994a:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    994c:	          move.l 28(sp),16(sp)
    9952:	          movea.l 24(sp),a0
    9956:	          move.l (a0),d0
    9958:	          move.l d0,12(sp)
    995c:	          move.l 1678c <DOSBase>,d0
    9962:	          movea.l d0,a6
    9964:	          move.l 16(sp),d1
    9968:	          move.l 12(sp),d2
    996c:	          jsr -312(a6)
    9970:	          move.l d0,8(sp)
	switch (from -> varType) {
    9974:	          movea.l 24(sp),a0
    9978:	          move.l (a0),d0
    997a:	          moveq #9,d1
    997c:	          cmp.l d0,d1
    997e:	      /-- bcs.w 9a2e <saveVariable+0xea>
    9982:	      |   add.l d0,d0
    9984:	      |   movea.l d0,a0
    9986:	      |   adda.l #39314,a0
    998c:	      |   move.w (a0),d0
    998e:	      |   jmp (9992 <saveVariable+0x4e>,pc,d0.w)
    9992:	      |   ori.l #1310740,(a0)+
    9998:	      |   ori.b #20,(20,a0,d0.w)
    999e:	      |   .short 0x004c
    99a0:	      |   ori.b #126,(a4)
    99a4:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    99a8:	      |   ori.b #40,(a0)+
    99ac:	      |   ori.b #47,d4
    99b0:	      |   ori.b #0,(a4)+
    99b4:	      |   jsr 958 <put4bytes>
    99ba:	      |   addq.l #8,sp
		return TRUE;
    99bc:	      |   moveq #1,d0
    99be:	/-----|-- bra.w 9a6a <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    99c2:	|     |   movea.l 24(sp),a0
    99c6:	|     |   move.l 4(a0),d0
    99ca:	|     |   move.l 28(sp),-(sp)
    99ce:	|     |   move.l d0,-(sp)
    99d0:	|     |   jsr bd8 <writeString>
    99d6:	|     |   addq.l #8,sp
		return TRUE;
    99d8:	|     |   moveq #1,d0
    99da:	+-----|-- bra.w 9a6a <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    99de:	|     |   movea.l 24(sp),a0
    99e2:	|     |   move.l 4(a0),d0
    99e6:	|     |   move.l 28(sp),-(sp)
    99ea:	|     |   move.l d0,-(sp)
    99ec:	|     |   jsr 981c <saveStackRef>
    99f2:	|     |   addq.l #8,sp
    99f4:	+-----|-- bra.s 9a6a <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    99f6:	|     |   movea.l 24(sp),a0
    99fa:	|     |   move.l 4(a0),d0
    99fe:	|     |   move.l 28(sp),-(sp)
    9a02:	|     |   move.l d0,-(sp)
    9a04:	|     |   jsr 7bba <saveCostume>
    9a0a:	|     |   addq.l #8,sp
		return FALSE;
    9a0c:	|     |   clr.w d0
    9a0e:	+-----|-- bra.s 9a6a <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    9a10:	|     |   movea.l 24(sp),a0
    9a14:	|     |   move.l 4(a0),d0
    9a18:	|     |   move.l 28(sp),-(sp)
    9a1c:	|     |   move.l d0,-(sp)
    9a1e:	|     |   jsr 7af0 <saveAnim>
    9a24:	|     |   addq.l #8,sp
		return FALSE;
    9a26:	|     |   clr.w d0
    9a28:	+-----|-- bra.s 9a6a <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    9a2a:	|     |   clr.w d0
    9a2c:	+-----|-- bra.s 9a6a <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    9a2e:	|     \-> movea.l 24(sp),a0
    9a32:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    9a34:	|         moveq #10,d1
    9a36:	|         cmp.l d0,d1
    9a38:	|  /----- bcs.s 9a52 <saveVariable+0x10e>
						typeName[from->varType] :
    9a3a:	|  |      movea.l 24(sp),a0
    9a3e:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    9a40:	|  |      add.l d0,d0
    9a42:	|  |      movea.l d0,a1
    9a44:	|  |      adda.l d0,a1
    9a46:	|  |      lea 16680 <typeName>,a0
    9a4c:	|  |      move.l (0,a1,a0.l),d0
    9a50:	|  |  /-- bra.s 9a58 <saveVariable+0x114>
    9a52:	|  \--|-> move.l #85102,d0
    9a58:	|     \-> move.l d0,-(sp)
    9a5a:	|         pea 14c75 <custom.c.9a493ead+0x4c5>
    9a60:	|         jsr 13046 <KPrintF>
    9a66:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    9a68:	|         moveq #1,d0
    9a6a:	\-------> move.l (sp)+,d2
    9a6c:	          movea.l (sp)+,a6
    9a6e:	          lea 12(sp),sp
    9a72:	          rts

00009a74 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    9a74:	moveq #0,d0
}
    9a76:	rts

00009a78 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    9a78:	nop
    9a7a:	rts

00009a7c <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    9a7c:	nop
    9a7e:	rts

00009a80 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    9a80:	moveq #1,d0
}
    9a82:	rts

00009a84 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    9a84:	nop
    9a86:	rts

00009a88 <saveSounds>:

void saveSounds (BPTR fp) {
    9a88:	lea -12(sp),sp
    9a8c:	move.l a6,-(sp)
    9a8e:	move.l d2,-(sp)
	FPutC (fp,0);
    9a90:	move.l 24(sp),16(sp)
    9a96:	clr.l 12(sp)
    9a9a:	move.l 1678c <DOSBase>,d0
    9aa0:	movea.l d0,a6
    9aa2:	move.l 16(sp),d1
    9aa6:	move.l 12(sp),d2
    9aaa:	jsr -312(a6)
    9aae:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    9ab2:	move.l 1613e <defSoundVol>,d0
    9ab8:	move.l 24(sp),-(sp)
    9abc:	move.l d0,-(sp)
    9abe:	jsr 8d0 <put2bytes>
    9ac4:	addq.l #8,sp
	put2bytes (defVol, fp);
    9ac6:	move.l 1613a <defVol>,d0
    9acc:	move.l 24(sp),-(sp)
    9ad0:	move.l d0,-(sp)
    9ad2:	jsr 8d0 <put2bytes>
    9ad8:	addq.l #8,sp
}
    9ada:	nop
    9adc:	move.l (sp)+,d2
    9ade:	movea.l (sp)+,a6
    9ae0:	lea 12(sp),sp
    9ae4:	rts

00009ae6 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    9ae6:	move.l 4(sp),1613a <defVol>
}
    9aee:	nop
    9af0:	rts

00009af2 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    9af2:	move.l 4(sp),1613e <defSoundVol>
}
    9afa:	nop
    9afc:	rts

00009afe <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    9afe:	nop
    9b00:	rts

00009b02 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    9b02:	nop
    9b04:	rts

00009b06 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    9b06:	nop
    9b08:	rts

00009b0a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    9b0a:	subq.l #4,sp
    9b0c:	move.l 12(sp),d0
    9b10:	move.w d0,d0
    9b12:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    9b16:	moveq #1,d0
}
    9b18:	addq.l #4,sp
    9b1a:	rts

00009b1c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    9b1c:	nop
    9b1e:	rts

00009b20 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    9b20:	move.l 16(sp),-(sp)
    9b24:	move.l 16(sp),-(sp)
    9b28:	jsr df4 <CstBlankScreen>
    9b2e:	addq.l #8,sp
}
    9b30:	nop
    9b32:	rts

00009b34 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    9b34:	pea 14c98 <custom.c.9a493ead+0x4e8>
    9b3a:	jsr 13046 <KPrintF>
    9b40:	addq.l #4,sp
}
    9b42:	nop
    9b44:	rts

00009b46 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    9b46:	movea.l 8(sp),a1
    9b4a:	movea.l 12(sp),a0
    9b4e:	move.l 8(sp),d1
    9b52:	move.l 4(sp),d0
    9b56:	move.l a1,-(sp)
    9b58:	move.l a0,-(sp)
    9b5a:	move.l d1,-(sp)
    9b5c:	move.l d0,-(sp)
    9b5e:	jsr 18b8 <drawLine>
    9b64:	lea 16(sp),sp
}
    9b68:	nop
    9b6a:	rts

00009b6c <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    9b6c:	movea.l 12(sp),a1
    9b70:	movea.l 4(sp),a0
    9b74:	move.l 8(sp),d1
    9b78:	move.l 4(sp),d0
    9b7c:	move.l a1,-(sp)
    9b7e:	move.l a0,-(sp)
    9b80:	move.l d1,-(sp)
    9b82:	move.l d0,-(sp)
    9b84:	jsr 18b8 <drawLine>
    9b8a:	lea 16(sp),sp
}
    9b8e:	nop
    9b90:	rts

00009b92 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    9b92:	pea 14cd1 <custom.c.9a493ead+0x521>
    9b98:	jsr 13046 <KPrintF>
    9b9e:	addq.l #4,sp
}
    9ba0:	nop
    9ba2:	rts

00009ba4 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    9ba4:	jsr 1848 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    9baa:	pea 1687c <backdropTextureName>
    9bb0:	pea 1 <_start+0x1>
    9bb4:	jsr 1a3a <deleteTextures>
    9bba:	addq.l #8,sp
	backdropTextureName = 0;
    9bbc:	clr.l 1687c <backdropTextureName>
	backdropExists = FALSE;
    9bc2:	clr.w 16880 <backdropExists>
}
    9bc8:	nop
    9bca:	rts

00009bcc <killParallax>:

void killParallax () {
    9bcc:	          lea -12(sp),sp
    9bd0:	          move.l a6,-(sp)
	while (parallaxStuff) {
    9bd2:	   /----- bra.s 9c3e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    9bd4:	/--|----> move.l 16882 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    9bdc:	|  |      movea.l 12(sp),a0
    9be0:	|  |      move.l 42(a0),d0
    9be4:	|  |      move.l d0,16882 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    9bea:	|  |      move.l 12(sp),d0
    9bee:	|  |      addq.l #4,d0
    9bf0:	|  |      move.l d0,-(sp)
    9bf2:	|  |      pea 1 <_start+0x1>
    9bf6:	|  |      jsr 1a3a <deleteTextures>
    9bfc:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    9bfe:	|  |      movea.l 12(sp),a0
    9c02:	|  |      move.l (a0),d0
    9c04:	|  |  /-- beq.s 9c1e <killParallax+0x52>
    9c06:	|  |  |   movea.l 12(sp),a0
    9c0a:	|  |  |   move.l (a0),8(sp)
    9c0e:	|  |  |   move.l 16784 <SysBase>,d0
    9c14:	|  |  |   movea.l d0,a6
    9c16:	|  |  |   movea.l 8(sp),a1
    9c1a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    9c1e:	|  |  \-> tst.l 12(sp)
    9c22:	|  |  /-- beq.s 9c3a <killParallax+0x6e>
    9c24:	|  |  |   move.l 12(sp),4(sp)
    9c2a:	|  |  |   move.l 16784 <SysBase>,d0
    9c30:	|  |  |   movea.l d0,a6
    9c32:	|  |  |   movea.l 4(sp),a1
    9c36:	|  |  |   jsr -690(a6)
		k = NULL;
    9c3a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    9c3e:	|  \----> move.l 16882 <parallaxStuff>,d0
    9c44:	\-------- bne.s 9bd4 <killParallax+0x8>
	}
}
    9c46:	          nop
    9c48:	          nop
    9c4a:	          movea.l (sp)+,a6
    9c4c:	          lea 12(sp),sp
    9c50:	          rts

00009c52 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    9c52:	       move.l 4(sp),-(sp)
    9c56:	       jsr 44e8 <openFileFromNum>
    9c5c:	       addq.l #4,sp
    9c5e:	       tst.l d0
    9c60:	   /-- bne.s 9c72 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    9c62:	   |   pea 14cf2 <custom.c.9a493ead+0x542>
    9c68:	   |   jsr 13046 <KPrintF>
    9c6e:	   |   addq.l #4,sp
		return;
    9c70:	/--|-- bra.s 9c92 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    9c72:	|  \-> move.l 1676c <bigDataFile>,d0
    9c78:	|      move.l 12(sp),-(sp)
    9c7c:	|      move.l 12(sp),-(sp)
    9c80:	|      move.l d0,-(sp)
    9c82:	|      jsr 11b4 <CstLoadBackdrop>
    9c88:	|      lea 12(sp),sp
	finishAccess ();
    9c8c:	|      jsr 43e0 <finishAccess>
	
}
    9c92:	\----> rts

00009c94 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9c94:	subq.l #8,sp
    9c96:	movea.l 12(sp),a0
    9c9a:	move.l 16(sp),d1
    9c9e:	move.l 20(sp),d0
    9ca2:	movea.w a0,a0
    9ca4:	move.w a0,6(sp)
    9ca8:	move.w d1,d1
    9caa:	move.w d1,4(sp)
    9cae:	move.w d0,d0
    9cb0:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9cb4:	pea 14d41 <custom.c.9a493ead+0x591>
    9cba:	jsr 13046 <KPrintF>
    9cc0:	addq.l #4,sp

}
    9cc2:	nop
    9cc4:	addq.l #8,sp
    9cc6:	rts

00009cc8 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9cc8:	pea 14d64 <custom.c.9a493ead+0x5b4>
    9cce:	jsr 13046 <KPrintF>
    9cd4:	addq.l #4,sp
}
    9cd6:	nop
    9cd8:	rts

00009cda <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    9cda:	pea 16886 <snapshotTextureName>
    9ce0:	pea 1 <_start+0x1>
    9ce4:	jsr 1a3a <deleteTextures>
    9cea:	addq.l #8,sp
	snapshotTextureName = 0;
    9cec:	clr.l 16886 <snapshotTextureName>
}
    9cf2:	nop
    9cf4:	rts

00009cf6 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    9cf6:	move.l 16878 <sceneHeight>,d0
    9cfc:	move.l d0,d1
    9cfe:	move.l 16874 <sceneWidth>,d0
    9d04:	move.l d1,-(sp)
    9d06:	move.l d0,-(sp)
    9d08:	jsr 169c <CstReserveBackdrop>
    9d0e:	addq.l #8,sp
}
    9d10:	rts

00009d12 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    9d12:	jsr 9ba4 <killBackDrop>
	killParallax ();
    9d18:	jsr 9bcc <killParallax>
	killZBuffer ();
    9d1e:	jsr 5e7c <killZBuffer>
	sceneWidth = x;
    9d24:	move.l 4(sp),d0
    9d28:	move.l d0,16874 <sceneWidth>
	sceneHeight = y;
    9d2e:	move.l 8(sp),d0
    9d32:	move.l d0,16878 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    9d38:	pea 14d9d <custom.c.9a493ead+0x5ed>
    9d3e:	jsr 13046 <KPrintF>
    9d44:	addq.l #4,sp
	return reserveBackdrop();
    9d46:	jsr 9cf6 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    9d4c:	rts

00009d4e <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    9d4e:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    9d50:	move.l 12(sp),-(sp)
    9d54:	jsr 6bc <get2bytes>
    9d5a:	addq.l #4,sp
    9d5c:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    9d60:	move.l 12(sp),-(sp)
    9d64:	jsr 6bc <get2bytes>
    9d6a:	addq.l #4,sp
    9d6c:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    9d6e:	moveq #1,d0
}
    9d70:	addq.l #8,sp
    9d72:	rts

00009d74 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    9d74:	   /-> lea -12(sp),sp
    9d78:	   |   move.l a6,-(sp)
    9d7a:	   |   move.l d2,-(sp)
	if (me) {
    9d7c:	   |   tst.l 24(sp)
    9d80:	/--|-- beq.w 9e16 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    9d84:	|  |   movea.l 24(sp),a0
    9d88:	|  |   move.l 42(a0),d0
    9d8c:	|  |   move.l 28(sp),-(sp)
    9d90:	|  |   move.l d0,-(sp)
    9d92:	|  \-- jsr 9d74 <saveParallaxRecursive>(pc)
    9d96:	|      addq.l #8,sp
		FPutC (fp, 1);
    9d98:	|      move.l 28(sp),16(sp)
    9d9e:	|      moveq #1,d0
    9da0:	|      move.l d0,12(sp)
    9da4:	|      move.l 1678c <DOSBase>,d0
    9daa:	|      movea.l d0,a6
    9dac:	|      move.l 16(sp),d1
    9db0:	|      move.l 12(sp),d2
    9db4:	|      jsr -312(a6)
    9db8:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    9dbc:	|      movea.l 24(sp),a0
    9dc0:	|      move.w 28(a0),d0
    9dc4:	|      move.w d0,d0
    9dc6:	|      andi.l #65535,d0
    9dcc:	|      move.l 28(sp),-(sp)
    9dd0:	|      move.l d0,-(sp)
    9dd2:	|      jsr 8d0 <put2bytes>
    9dd8:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    9dda:	|      movea.l 24(sp),a0
    9dde:	|      move.w 30(a0),d0
    9de2:	|      move.w d0,d0
    9de4:	|      andi.l #65535,d0
    9dea:	|      move.l 28(sp),-(sp)
    9dee:	|      move.l d0,-(sp)
    9df0:	|      jsr 8d0 <put2bytes>
    9df6:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    9df8:	|      movea.l 24(sp),a0
    9dfc:	|      move.w 32(a0),d0
    9e00:	|      move.w d0,d0
    9e02:	|      andi.l #65535,d0
    9e08:	|      move.l 28(sp),-(sp)
    9e0c:	|      move.l d0,-(sp)
    9e0e:	|      jsr 8d0 <put2bytes>
    9e14:	|      addq.l #8,sp
	}
}
    9e16:	\----> nop
    9e18:	       move.l (sp)+,d2
    9e1a:	       movea.l (sp)+,a6
    9e1c:	       lea 12(sp),sp
    9e20:	       rts

00009e22 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    9e22:	pea 14dc4 <custom.c.9a493ead+0x614>
    9e28:	jsr 13046 <KPrintF>
    9e2e:	addq.l #4,sp
	return TRUE;
    9e30:	moveq #1,d0
    9e32:	rts

00009e34 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    9e34:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    9e36:	             move.l 1688a <allObjectTypes>,(sp)

	while (huntType) {
    9e3c:	      /----- bra.s 9e54 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    9e3e:	   /--|----> movea.l (sp),a0
    9e40:	   |  |      move.l 4(a0),d0
    9e44:	   |  |      cmp.l 8(sp),d0
    9e48:	   |  |  /-- bne.s 9e4e <findObjectType+0x1a>
    9e4a:	   |  |  |   move.l (sp),d0
    9e4c:	/--|--|--|-- bra.s 9e64 <findObjectType+0x30>
		huntType = huntType -> next;
    9e4e:	|  |  |  \-> movea.l (sp),a0
    9e50:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    9e54:	|  |  \----> tst.l (sp)
    9e56:	|  \-------- bne.s 9e3e <findObjectType+0xa>
	}

	return loadObjectType (i);
    9e58:	|            move.l 8(sp),-(sp)
    9e5c:	|            jsr 9f24 <loadObjectType>
    9e62:	|            addq.l #4,sp
}
    9e64:	\----------> addq.l #4,sp
    9e66:	             rts

00009e68 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    9e68:	             lea -12(sp),sp
	int i, num = 0;
    9e6c:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    9e70:	             move.l 20(sp),-(sp)
    9e74:	             jsr 9e34 <findObjectType>
    9e7a:	             addq.l #4,sp
    9e7c:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    9e7e:	             clr.l 8(sp)
    9e82:	   /-------- bra.s 9eb8 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    9e84:	/--|-------> movea.l (sp),a0
    9e86:	|  |         move.l 38(a0),d1
    9e8a:	|  |         move.l 8(sp),d0
    9e8e:	|  |         lsl.l #3,d0
    9e90:	|  |         movea.l d1,a0
    9e92:	|  |         adda.l d0,a0
    9e94:	|  |         move.l (a0),d0
    9e96:	|  |         cmp.l 16(sp),d0
    9e9a:	|  |  /----- bne.s 9eb4 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    9e9c:	|  |  |      movea.l (sp),a0
    9e9e:	|  |  |      move.l 38(a0),d1
    9ea2:	|  |  |      move.l 8(sp),d0
    9ea6:	|  |  |      lsl.l #3,d0
    9ea8:	|  |  |      movea.l d1,a0
    9eaa:	|  |  |      adda.l d0,a0
    9eac:	|  |  |      move.l 4(a0),4(sp)
			break;
    9eb2:	|  |  |  /-- bra.s 9ec4 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9eb4:	|  |  \--|-> addq.l #1,8(sp)
    9eb8:	|  \-----|-> movea.l (sp),a0
    9eba:	|        |   move.l 16(a0),d0
    9ebe:	|        |   cmp.l 8(sp),d0
    9ec2:	\--------|-- bgt.s 9e84 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9ec4:	         \-> move.l 4(sp),d0
}
    9ec8:	             lea 12(sp),sp
    9ecc:	             rts

00009ece <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    9ece:	moveq #1,d0
}
    9ed0:	rts

00009ed2 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    9ed2:	subq.l #8,sp
    9ed4:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    9ed6:	move.l 16(sp),-(sp)
    9eda:	jsr 6bc <get2bytes>
    9ee0:	addq.l #4,sp
    9ee2:	move.l d0,-(sp)
    9ee4:	jsr 9f24 <loadObjectType>
    9eea:	addq.l #4,sp
    9eec:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    9ef0:	movea.l 8(sp),a0
    9ef4:	move.l (a0),4(sp)
    9ef8:	move.l 16784 <SysBase>,d0
    9efe:	movea.l d0,a6
    9f00:	movea.l 4(sp),a1
    9f04:	jsr -690(a6)
	r -> screenName = readString (fp);
    9f08:	move.l 16(sp),-(sp)
    9f0c:	jsr b02 <readString>
    9f12:	addq.l #4,sp
    9f14:	movea.l 8(sp),a0
    9f18:	move.l d0,(a0)
	return r;
    9f1a:	move.l 8(sp),d0
}
    9f1e:	movea.l (sp)+,a6
    9f20:	addq.l #8,sp
    9f22:	rts

00009f24 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    9f24:	          lea -84(sp),sp
    9f28:	          move.l a6,-(sp)
    9f2a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9f2c:	          moveq #42,d0
    9f2e:	          move.l d0,84(sp)
    9f32:	          clr.l 80(sp)
    9f36:	          move.l 16784 <SysBase>,d0
    9f3c:	          movea.l d0,a6
    9f3e:	          move.l 84(sp),d0
    9f42:	          move.l 80(sp),d1
    9f46:	          jsr -684(a6)
    9f4a:	          move.l d0,76(sp)
    9f4e:	          move.l 76(sp),d0
    9f52:	          move.l d0,72(sp)

    if (newType) {
    9f56:	/-------- beq.w a1d0 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9f5a:	|         move.l 96(sp),-(sp)
    9f5e:	|         jsr 45b0 <openObjectSlice>
    9f64:	|         addq.l #4,sp
    9f66:	|         tst.w d0
    9f68:	+-------- beq.w a1d0 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9f6c:	|         move.l 1676c <bigDataFile>,d0
    9f72:	|         move.l d0,-(sp)
    9f74:	|         jsr 6bc <get2bytes>
    9f7a:	|         addq.l #4,sp
    9f7c:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    9f80:	|         move.l 1676c <bigDataFile>,64(sp)
    9f88:	|         move.l 1678c <DOSBase>,d0
    9f8e:	|         movea.l d0,a6
    9f90:	|         move.l 64(sp),d1
    9f94:	|         jsr -306(a6)
    9f98:	|         move.l d0,60(sp)
    9f9c:	|         move.l 60(sp),d0
    9fa0:	|         move.l d0,d0
    9fa2:	|         movea.l 72(sp),a0
    9fa6:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9faa:	|         move.l 1676c <bigDataFile>,56(sp)
    9fb2:	|         move.l 1678c <DOSBase>,d0
    9fb8:	|         movea.l d0,a6
    9fba:	|         move.l 56(sp),d1
    9fbe:	|         jsr -306(a6)
    9fc2:	|         move.l d0,52(sp)
    9fc6:	|         move.l 52(sp),d0
    9fca:	|         move.l d0,d0
    9fcc:	|         movea.l 72(sp),a0
    9fd0:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    9fd4:	|         move.l 1676c <bigDataFile>,48(sp)
    9fdc:	|         move.l 1678c <DOSBase>,d0
    9fe2:	|         movea.l d0,a6
    9fe4:	|         move.l 48(sp),d1
    9fe8:	|         jsr -306(a6)
    9fec:	|         move.l d0,44(sp)
    9ff0:	|         move.l 44(sp),d0
    9ff4:	|         move.l d0,d0
    9ff6:	|         movea.l 72(sp),a0
    9ffa:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    9ffe:	|         move.l 1676c <bigDataFile>,40(sp)
    a006:	|         move.l 1678c <DOSBase>,d0
    a00c:	|         movea.l d0,a6
    a00e:	|         move.l 40(sp),d1
    a012:	|         jsr -306(a6)
    a016:	|         move.l d0,36(sp)
    a01a:	|         move.l 36(sp),d0
    a01e:	|         movea.l 72(sp),a0
    a022:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    a026:	|         move.l 1676c <bigDataFile>,32(sp)
    a02e:	|         move.l 1678c <DOSBase>,d0
    a034:	|         movea.l d0,a6
    a036:	|         move.l 32(sp),d1
    a03a:	|         jsr -306(a6)
    a03e:	|         move.l d0,28(sp)
    a042:	|         move.l 28(sp),d0
    a046:	|         movea.l 72(sp),a0
    a04a:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    a04e:	|         move.l 1676c <bigDataFile>,d0
    a054:	|         move.l d0,-(sp)
    a056:	|         jsr 718 <get4bytes>
    a05c:	|         addq.l #4,sp
    a05e:	|         movea.l 72(sp),a0
    a062:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    a066:	|         move.l 1676c <bigDataFile>,d0
    a06c:	|         move.l d0,-(sp)
    a06e:	|         jsr 6bc <get2bytes>
    a074:	|         addq.l #4,sp
    a076:	|         movea.l 72(sp),a0
    a07a:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    a07e:	|         move.l 1676c <bigDataFile>,24(sp)
    a086:	|         move.l 1678c <DOSBase>,d0
    a08c:	|         movea.l d0,a6
    a08e:	|         move.l 24(sp),d1
    a092:	|         jsr -306(a6)
    a096:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    a09a:	|         move.l 1676c <bigDataFile>,d0
    a0a0:	|         move.l d0,-(sp)
    a0a2:	|         jsr 7d8 <getFloat>
    a0a8:	|         addq.l #4,sp
            getFloat(bigDataFile);
    a0aa:	|         move.l 1676c <bigDataFile>,d0
    a0b0:	|         move.l d0,-(sp)
    a0b2:	|         jsr 7d8 <getFloat>
    a0b8:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    a0ba:	|         move.l 1676c <bigDataFile>,d0
    a0c0:	|         move.l d0,-(sp)
    a0c2:	|         jsr 6bc <get2bytes>
    a0c8:	|         addq.l #4,sp
    a0ca:	|         move.l d0,d0
    a0cc:	|         movea.l 72(sp),a0
    a0d0:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    a0d4:	|         move.l 1676c <bigDataFile>,d0
    a0da:	|         move.l d0,-(sp)
    a0dc:	|         jsr 6bc <get2bytes>
    a0e2:	|         addq.l #4,sp
    a0e4:	|         movea.l 72(sp),a0
    a0e8:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    a0ec:	|         movea.l 72(sp),a0
    a0f0:	|         move.l 16(a0),d0
    a0f4:	|  /----- beq.s a126 <loadObjectType+0x202>
    a0f6:	|  |      movea.l 72(sp),a0
    a0fa:	|  |      move.l 16(a0),d0
    a0fe:	|  |      lsl.l #3,d0
    a100:	|  |      move.l d0,16(sp)
    a104:	|  |      clr.l 12(sp)
    a108:	|  |      move.l 16784 <SysBase>,d0
    a10e:	|  |      movea.l d0,a6
    a110:	|  |      move.l 16(sp),d0
    a114:	|  |      move.l 12(sp),d1
    a118:	|  |      jsr -684(a6)
    a11c:	|  |      move.l d0,8(sp)
    a120:	|  |      move.l 8(sp),d0
    a124:	|  |  /-- bra.s a128 <loadObjectType+0x204>
    a126:	|  \--|-> moveq #0,d0
    a128:	|     \-> movea.l 72(sp),a0
    a12c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    a130:	|         clr.l 88(sp)
    a134:	|     /-- bra.s a184 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    a136:	|  /--|-> move.l 1676c <bigDataFile>,d1
    a13c:	|  |  |   movea.l 72(sp),a0
    a140:	|  |  |   movea.l 38(a0),a0
    a144:	|  |  |   move.l 88(sp),d0
    a148:	|  |  |   lsl.l #3,d0
    a14a:	|  |  |   lea (0,a0,d0.l),a2
    a14e:	|  |  |   move.l d1,-(sp)
    a150:	|  |  |   jsr 6bc <get2bytes>
    a156:	|  |  |   addq.l #4,sp
    a158:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    a15a:	|  |  |   move.l 1676c <bigDataFile>,d1
    a160:	|  |  |   movea.l 72(sp),a0
    a164:	|  |  |   movea.l 38(a0),a0
    a168:	|  |  |   move.l 88(sp),d0
    a16c:	|  |  |   lsl.l #3,d0
    a16e:	|  |  |   lea (0,a0,d0.l),a2
    a172:	|  |  |   move.l d1,-(sp)
    a174:	|  |  |   jsr 6bc <get2bytes>
    a17a:	|  |  |   addq.l #4,sp
    a17c:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    a180:	|  |  |   addq.l #1,88(sp)
    a184:	|  |  \-> movea.l 72(sp),a0
    a188:	|  |      move.l 16(a0),d0
    a18c:	|  |      cmp.l 88(sp),d0
    a190:	|  \----- bgt.s a136 <loadObjectType+0x212>
            }
            finishAccess();
    a192:	|         jsr 43e0 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    a198:	|         move.l 68(sp),-(sp)
    a19c:	|         jsr 43ea <getNumberedString>
    a1a2:	|         addq.l #4,sp
    a1a4:	|         movea.l 72(sp),a0
    a1a8:	|         move.l d0,(a0)
            newType->objectNum = i;
    a1aa:	|         movea.l 72(sp),a0
    a1ae:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    a1b4:	|         move.l 1688a <allObjectTypes>,d0
    a1ba:	|         movea.l 72(sp),a0
    a1be:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    a1c2:	|         move.l 72(sp),1688a <allObjectTypes>
            return newType;
    a1ca:	|         move.l 72(sp),d0
    a1ce:	|     /-- bra.s a1d2 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    a1d0:	\-----|-> moveq #0,d0
}
    a1d2:	      \-> movea.l (sp)+,a2
    a1d4:	          movea.l (sp)+,a6
    a1d6:	          lea 84(sp),sp
    a1da:	          rts

0000a1dc <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    a1dc:	             lea -16(sp),sp
    a1e0:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    a1e2:	             move.l #92298,16(sp)

	while (* huntRegion) {
    a1ea:	   /-------- bra.s a25e <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    a1ec:	/--|-------> movea.l 16(sp),a0
    a1f0:	|  |         move.l (a0),d0
    a1f2:	|  |         cmp.l 24(sp),d0
    a1f6:	|  |  /----- bne.s a250 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    a1f8:	|  |  |      movea.l 24(sp),a0
    a1fc:	|  |  |      move.l 8(a0),d0
    a200:	|  |  |      movea.l 16(sp),a0
    a204:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    a206:	|  |  |      movea.l 24(sp),a0
    a20a:	|  |  |      move.l 38(a0),12(sp)
    a210:	|  |  |      move.l 16784 <SysBase>,d0
    a216:	|  |  |      movea.l d0,a6
    a218:	|  |  |      movea.l 12(sp),a1
    a21c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    a220:	|  |  |      movea.l 24(sp),a0
    a224:	|  |  |      move.l (a0),8(sp)
    a228:	|  |  |      move.l 16784 <SysBase>,d0
    a22e:	|  |  |      movea.l d0,a6
    a230:	|  |  |      movea.l 8(sp),a1
    a234:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    a238:	|  |  |      move.l 24(sp),4(sp)
    a23e:	|  |  |      move.l 16784 <SysBase>,d0
    a244:	|  |  |      movea.l d0,a6
    a246:	|  |  |      movea.l 4(sp),a1
    a24a:	|  |  |      jsr -690(a6)
			return;
    a24e:	|  |  |  /-- bra.s a274 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    a250:	|  |  \--|-> movea.l 16(sp),a0
    a254:	|  |     |   move.l (a0),d0
    a256:	|  |     |   move.l d0,d1
    a258:	|  |     |   addq.l #8,d1
    a25a:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    a25e:	|  \-----|-> movea.l 16(sp),a0
    a262:	|        |   move.l (a0),d0
    a264:	\--------|-- bne.s a1ec <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    a266:	         |   pea 14deb <custom.c.9a493ead+0x63b>
    a26c:	         |   jsr 13046 <KPrintF>
    a272:	         |   addq.l #4,sp
}
    a274:	         \-> movea.l (sp)+,a6
    a276:	             lea 16(sp),sp
    a27a:	             rts

0000a27c <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    a27c:	movea.l 4(sp),a0
    a280:	move.l 4(a0),d0
    a284:	move.l 8(sp),-(sp)
    a288:	move.l d0,-(sp)
    a28a:	jsr 8d0 <put2bytes>
    a290:	addq.l #8,sp
	writeString (r -> screenName, fp);
    a292:	movea.l 4(sp),a0
    a296:	move.l (a0),d0
    a298:	move.l 8(sp),-(sp)
    a29c:	move.l d0,-(sp)
    a29e:	jsr bd8 <writeString>
    a2a4:	addq.l #8,sp
    a2a6:	nop
    a2a8:	rts

0000a2aa <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    a2aa:	                         lea -112(sp),sp
    a2ae:	                         move.l a6,-(sp)
    a2b0:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    a2b2:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    a2b6:	                         move.w 16890 <saveEncoding>,d0
    a2bc:	                  /----- beq.s a2c6 <fileToStack+0x1c>
    a2be:	                  |      move.l #85521,d0
    a2c4:	                  |  /-- bra.s a2cc <fileToStack+0x22>
    a2c6:	                  \--|-> move.l #85547,d0
    a2cc:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    a2d0:	                         move.l 124(sp),112(sp)
    a2d6:	                         move.l #1005,108(sp)
    a2de:	                         move.l 1678c <DOSBase>,d0
    a2e4:	                         movea.l d0,a6
    a2e6:	                         move.l 112(sp),d1
    a2ea:	                         move.l 108(sp),d2
    a2ee:	                         jsr -30(a6)
    a2f2:	                         move.l d0,104(sp)
    a2f6:	                         move.l 104(sp),d0
    a2fa:	                         move.l d0,100(sp)
    if (!fp) {
    a2fe:	                     /-- bne.s a318 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    a300:	                     |   move.l 124(sp),-(sp)
    a304:	                     |   pea 14e42 <custom.c.9a493ead+0x692>
    a30a:	                     |   jsr 13046 <KPrintF>
    a310:	                     |   addq.l #8,sp
        return FALSE;
    a312:	                     |   clr.w d0
    a314:	/--------------------|-- bra.w a60e <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    a318:	|                    \-> move.w 16890 <saveEncoding>,d0
    a31e:	|                        move.l d0,d0
    a320:	|                        move.b d0,1688e <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    a326:	|                        move.w 16890 <saveEncoding>,d0
    a32c:	|                        lsr.w #8,d0
    a32e:	|                        move.l d0,d0
    a330:	|                        move.b d0,1688f <encode2>

    while (*checker) {
    a336:	|                 /----- bra.s a39a <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    a338:	|              /--|----> move.l 100(sp),30(sp)
    a33e:	|              |  |      move.l 1678c <DOSBase>,d0
    a344:	|              |  |      movea.l d0,a6
    a346:	|              |  |      move.l 30(sp),d1
    a34a:	|              |  |      jsr -306(a6)
    a34e:	|              |  |      move.l d0,26(sp)
    a352:	|              |  |      move.l 26(sp),d1
    a356:	|              |  |      movea.l 116(sp),a0
    a35a:	|              |  |      move.b (a0),d0
    a35c:	|              |  |      ext.w d0
    a35e:	|              |  |      movea.w d0,a0
    a360:	|              |  |      cmpa.l d1,a0
    a362:	|              |  |  /-- beq.s a396 <fileToStack+0xec>
            Close(fp);
    a364:	|              |  |  |   move.l 100(sp),22(sp)
    a36a:	|              |  |  |   move.l 1678c <DOSBase>,d0
    a370:	|              |  |  |   movea.l d0,a6
    a372:	|              |  |  |   move.l 22(sp),d1
    a376:	|              |  |  |   jsr -36(a6)
    a37a:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    a37e:	|              |  |  |   move.l 124(sp),-(sp)
    a382:	|              |  |  |   pea 14e4f <custom.c.9a493ead+0x69f>
    a388:	|              |  |  |   jsr 13046 <KPrintF>
    a38e:	|              |  |  |   addq.l #8,sp
            return FALSE;
    a390:	|              |  |  |   clr.w d0
    a392:	+--------------|--|--|-- bra.w a60e <fileToStack+0x364>
        }
        checker++;
    a396:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    a39a:	|              |  \----> movea.l 116(sp),a0
    a39e:	|              |         move.b (a0),d0
    a3a0:	|              \-------- bne.s a338 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    a3a2:	|                        move.w 16890 <saveEncoding>,d0
    a3a8:	|  /-------------------- beq.s a41c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    a3aa:	|  |                     move.l 100(sp),-(sp)
    a3ae:	|  |                     jsr a618 <readStringEncoded>
    a3b4:	|  |                     addq.l #4,sp
    a3b6:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    a3ba:	|  |                     pea 14e90 <custom.c.9a493ead+0x6e0>
    a3c0:	|  |                     move.l 100(sp),-(sp)
    a3c4:	|  |                     jsr 104aa <strcmp>
    a3ca:	|  |                     addq.l #8,sp
    a3cc:	|  |                     tst.l d0
    a3ce:	|  |                 /-- beq.s a402 <fileToStack+0x158>
            Close(fp);
    a3d0:	|  |                 |   move.l 100(sp),88(sp)
    a3d6:	|  |                 |   move.l 1678c <DOSBase>,d0
    a3dc:	|  |                 |   movea.l d0,a6
    a3de:	|  |                 |   move.l 88(sp),d1
    a3e2:	|  |                 |   jsr -36(a6)
    a3e6:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    a3ea:	|  |                 |   move.l 124(sp),-(sp)
    a3ee:	|  |                 |   pea 14e9f <custom.c.9a493ead+0x6ef>
    a3f4:	|  |                 |   jsr 13046 <KPrintF>
    a3fa:	|  |                 |   addq.l #8,sp
            return FALSE;
    a3fc:	|  |                 |   clr.w d0
    a3fe:	+--|-----------------|-- bra.w a60e <fileToStack+0x364>
        }
        FreeVec(checker);
    a402:	|  |                 \-> move.l 96(sp),92(sp)
    a408:	|  |                     move.l 16784 <SysBase>,d0
    a40e:	|  |                     movea.l d0,a6
    a410:	|  |                     movea.l 92(sp),a1
    a414:	|  |                     jsr -690(a6)
        checker = NULL;
    a418:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    a41c:	|  >-------------------> move.w 16890 <saveEncoding>,d0
    a422:	|  |     /-------------- beq.w a556 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    a426:	|  |     |               move.l 100(sp),76(sp)
    a42c:	|  |     |               move.l 1678c <DOSBase>,d0
    a432:	|  |     |               movea.l d0,a6
    a434:	|  |     |               move.l 76(sp),d1
    a438:	|  |     |               jsr -306(a6)
    a43c:	|  |     |               move.l d0,72(sp)
    a440:	|  |     |               move.l 72(sp),d0
    a444:	|  |     |               move.b 1688e <encode1>,d1
    a44a:	|  |     |               ext.w d1
    a44c:	|  |     |               ext.l d1
    a44e:	|  |     |               move.l d0,d2
    a450:	|  |     |               eor.l d1,d2
    a452:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    a456:	|  |     |               moveq #-1,d0
    a458:	|  |     |               cmp.l 68(sp),d0
    a45c:	|  |  /--|-------------- beq.w a5ec <fileToStack+0x342>

            char i = (char) tmp;
    a460:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    a466:	|  |  |  |               move.b 67(sp),d0
    a46a:	|  |  |  |               ext.w d0
    a46c:	|  |  |  |               movea.w d0,a0
    a46e:	|  |  |  |               moveq #2,d2
    a470:	|  |  |  |               cmp.l a0,d2
    a472:	|  |  |  |     /-------- beq.s a4ee <fileToStack+0x244>
    a474:	|  |  |  |     |         moveq #2,d0
    a476:	|  |  |  |     |         cmp.l a0,d0
    a478:	|  |  |  |  /--|-------- blt.w a524 <fileToStack+0x27a>
    a47c:	|  |  |  |  |  |         cmpa.w #0,a0
    a480:	|  |  |  |  |  |     /-- beq.s a48c <fileToStack+0x1e2>
    a482:	|  |  |  |  |  |     |   moveq #1,d2
    a484:	|  |  |  |  |  |     |   cmp.l a0,d2
    a486:	|  |  |  |  |  |  /--|-- beq.s a4c8 <fileToStack+0x21e>
    a488:	|  |  |  |  +--|--|--|-- bra.w a524 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    a48c:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    a490:	|  |  |  |  |  |  |      jsr a618 <readStringEncoded>
    a496:	|  |  |  |  |  |  |      addq.l #4,sp
    a498:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    a49c:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    a4a0:	|  |  |  |  |  |  |      lea 14(sp),a0
    a4a4:	|  |  |  |  |  |  |      move.l a0,-(sp)
    a4a6:	|  |  |  |  |  |  |      jsr 11220 <makeTextVar>
    a4ac:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    a4ae:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    a4b4:	|  |  |  |  |  |  |      move.l 16784 <SysBase>,d0
    a4ba:	|  |  |  |  |  |  |      movea.l d0,a6
    a4bc:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    a4c0:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    a4c4:	|  |  |  |  |  |  |  /-- bra.w a57c <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    a4c8:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    a4cc:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    a4d2:	|  |  |  |  |  |     |   addq.l #4,sp
    a4d4:	|  |  |  |  |  |     |   move.l d0,-(sp)
    a4d6:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    a4da:	|  |  |  |  |  |     |   lea 18(sp),a0
    a4de:	|  |  |  |  |  |     |   move.l a0,-(sp)
    a4e0:	|  |  |  |  |  |     |   jsr 118f0 <setVariable>
    a4e6:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    a4ea:	|  |  |  |  |  |     +-- bra.w a57c <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    a4ee:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    a4f4:	|  |  |  |  |        |   move.l 1678c <DOSBase>,d0
    a4fa:	|  |  |  |  |        |   movea.l d0,a6
    a4fc:	|  |  |  |  |        |   move.l 62(sp),d1
    a500:	|  |  |  |  |        |   jsr -306(a6)
    a504:	|  |  |  |  |        |   move.l d0,58(sp)
    a508:	|  |  |  |  |        |   move.l 58(sp),d0
    a50c:	|  |  |  |  |        |   move.l d0,-(sp)
    a50e:	|  |  |  |  |        |   pea 1 <_start+0x1>
    a512:	|  |  |  |  |        |   lea 18(sp),a0
    a516:	|  |  |  |  |        |   move.l a0,-(sp)
    a518:	|  |  |  |  |        |   jsr 118f0 <setVariable>
    a51e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    a522:	|  |  |  |  |        +-- bra.s a57c <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    a524:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    a528:	|  |  |  |           |   pea 14f21 <custom.c.9a493ead+0x771>
    a52e:	|  |  |  |           |   jsr 13046 <KPrintF>
    a534:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    a536:	|  |  |  |           |   move.l 100(sp),46(sp)
    a53c:	|  |  |  |           |   move.l 1678c <DOSBase>,d0
    a542:	|  |  |  |           |   movea.l d0,a6
    a544:	|  |  |  |           |   move.l 46(sp),d1
    a548:	|  |  |  |           |   jsr -36(a6)
    a54c:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    a550:	|  |  |  |           |   clr.w d0
    a552:	+--|--|--|-----------|-- bra.w a60e <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    a556:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    a55a:	|  |  |              |   jsr a6de <readTextPlain>
    a560:	|  |  |              |   addq.l #4,sp
    a562:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    a566:	|  |  |        /-----|-- beq.w a5f0 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    a56a:	|  |  |        |     |   move.l 80(sp),-(sp)
    a56e:	|  |  |        |     |   lea 14(sp),a0
    a572:	|  |  |        |     |   move.l a0,-(sp)
    a574:	|  |  |        |     |   jsr 11220 <makeTextVar>
    a57a:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    a57c:	|  |  |        |     \-> movea.l 128(sp),a0
    a580:	|  |  |        |         move.l (a0),d0
    a582:	|  |  |        |  /----- bne.s a5b2 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    a584:	|  |  |        |  |      move.l 128(sp),d0
    a588:	|  |  |        |  |      move.l d0,-(sp)
    a58a:	|  |  |        |  |      lea 14(sp),a0
    a58e:	|  |  |        |  |      move.l a0,-(sp)
    a590:	|  |  |        |  |      jsr 108c0 <addVarToStackQuick>
    a596:	|  |  |        |  |      addq.l #8,sp
    a598:	|  |  |        |  |      tst.w d0
    a59a:	|  |  |        |  |  /-- bne.s a5a0 <fileToStack+0x2f6>
    a59c:	|  |  |        |  |  |   clr.w d0
    a59e:	+--|--|--------|--|--|-- bra.s a60e <fileToStack+0x364>
            sH->last = sH->first;
    a5a0:	|  |  |        |  |  \-> movea.l 128(sp),a0
    a5a4:	|  |  |        |  |      move.l (a0),d0
    a5a6:	|  |  |        |  |      movea.l 128(sp),a0
    a5aa:	|  |  |        |  |      move.l d0,4(a0)
    a5ae:	|  +--|--------|--|----- bra.w a41c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    a5b2:	|  |  |        |  \----> movea.l 128(sp),a0
    a5b6:	|  |  |        |         move.l 4(a0),d0
    a5ba:	|  |  |        |         addq.l #8,d0
    a5bc:	|  |  |        |         move.l d0,-(sp)
    a5be:	|  |  |        |         lea 14(sp),a0
    a5c2:	|  |  |        |         move.l a0,-(sp)
    a5c4:	|  |  |        |         jsr 108c0 <addVarToStackQuick>
    a5ca:	|  |  |        |         addq.l #8,sp
    a5cc:	|  |  |        |         tst.w d0
    a5ce:	|  |  |        |     /-- bne.s a5d4 <fileToStack+0x32a>
    a5d0:	|  |  |        |     |   clr.w d0
    a5d2:	+--|--|--------|-----|-- bra.s a60e <fileToStack+0x364>
            sH->last = sH->last->next;
    a5d4:	|  |  |        |     \-> movea.l 128(sp),a0
    a5d8:	|  |  |        |         movea.l 4(a0),a0
    a5dc:	|  |  |        |         move.l 8(a0),d0
    a5e0:	|  |  |        |         movea.l 128(sp),a0
    a5e4:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    a5e8:	|  \--|--------|-------- bra.w a41c <fileToStack+0x172>
            if (tmp == -1) break;
    a5ec:	|     \--------|-------> nop
    a5ee:	|              |     /-- bra.s a5f2 <fileToStack+0x348>
            if (!line) break;
    a5f0:	|              \-----|-> nop
        }
    }
    Close(fp);
    a5f2:	|                    \-> move.l 100(sp),38(sp)
    a5f8:	|                        move.l 1678c <DOSBase>,d0
    a5fe:	|                        movea.l d0,a6
    a600:	|                        move.l 38(sp),d1
    a604:	|                        jsr -36(a6)
    a608:	|                        move.l d0,34(sp)
    return TRUE;
    a60c:	|                        moveq #1,d0
}
    a60e:	\----------------------> move.l (sp)+,d2
    a610:	                         movea.l (sp)+,a6
    a612:	                         lea 112(sp),sp
    a616:	                         rts

0000a618 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    a618:	          lea -32(sp),sp
    a61c:	          move.l a6,-(sp)
    a61e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    a620:	          move.l 44(sp),-(sp)
    a624:	          jsr 6bc <get2bytes>
    a62a:	          addq.l #4,sp
    a62c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    a630:	          move.l 32(sp),d0
    a634:	          addq.l #1,d0
    a636:	          move.l d0,28(sp)
    a63a:	          clr.l 24(sp)
    a63e:	          move.l 16784 <SysBase>,d0
    a644:	          movea.l d0,a6
    a646:	          move.l 28(sp),d0
    a64a:	          move.l 24(sp),d1
    a64e:	          jsr -684(a6)
    a652:	          move.l d0,20(sp)
    a656:	          move.l 20(sp),d0
    a65a:	          move.l d0,16(sp)
    if (!s) return NULL;
    a65e:	      /-- bne.s a664 <readStringEncoded+0x4c>
    a660:	      |   moveq #0,d0
    a662:	/-----|-- bra.s a6d4 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    a664:	|     \-> clr.l 36(sp)
    a668:	|     /-- bra.s a6ba <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    a66a:	|  /--|-> move.l 44(sp),12(sp)
    a670:	|  |  |   move.l 1678c <DOSBase>,d0
    a676:	|  |  |   movea.l d0,a6
    a678:	|  |  |   move.l 12(sp),d1
    a67c:	|  |  |   jsr -306(a6)
    a680:	|  |  |   move.l d0,8(sp)
    a684:	|  |  |   move.l 8(sp),d0
    a688:	|  |  |   move.l d0,d1
    a68a:	|  |  |   move.b 1688e <encode1>,d2
    a690:	|  |  |   move.l 36(sp),d0
    a694:	|  |  |   movea.l 16(sp),a0
    a698:	|  |  |   adda.l d0,a0
    a69a:	|  |  |   move.b d1,d0
    a69c:	|  |  |   eor.b d2,d0
    a69e:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    a6a0:	|  |  |   move.b 1688e <encode1>,d0
    a6a6:	|  |  |   move.b d0,d1
    a6a8:	|  |  |   move.b 1688f <encode2>,d0
    a6ae:	|  |  |   add.b d1,d0
    a6b0:	|  |  |   move.b d0,1688e <encode1>
    for (a = 0; a < len; a++) {
    a6b6:	|  |  |   addq.l #1,36(sp)
    a6ba:	|  |  \-> move.l 36(sp),d0
    a6be:	|  |      cmp.l 32(sp),d0
    a6c2:	|  \----- blt.s a66a <readStringEncoded+0x52>
    }
    s[len] = 0;
    a6c4:	|         move.l 32(sp),d0
    a6c8:	|         movea.l 16(sp),a0
    a6cc:	|         adda.l d0,a0
    a6ce:	|         clr.b (a0)
    return s;
    a6d0:	|         move.l 16(sp),d0
}
    a6d4:	\-------> move.l (sp)+,d2
    a6d6:	          movea.l (sp)+,a6
    a6d8:	          lea 32(sp),sp
    a6dc:	          rts

0000a6de <readTextPlain>:

char *readTextPlain(BPTR fp) {
    a6de:	             lea -104(sp),sp
    a6e2:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    a6e6:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    a6ea:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    a6f0:	             move.l 124(sp),106(sp)
    a6f6:	             clr.l 102(sp)
    a6fa:	             clr.l 98(sp)
    a6fe:	             move.l 1678c <DOSBase>,d0
    a704:	             movea.l d0,a6
    a706:	             move.l 106(sp),d1
    a70a:	             move.l 102(sp),d2
    a70e:	             move.l 98(sp),d3
    a712:	             jsr -66(a6)
    a716:	             move.l d0,94(sp)
    a71a:	             move.l 94(sp),d0
    a71e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    a722:	   /-------- bra.s a766 <readTextPlain+0x88>
        tmp = FGetC(fp);
    a724:	/--|-------> move.l 124(sp),22(sp)
    a72a:	|  |         move.l 1678c <DOSBase>,d0
    a730:	|  |         movea.l d0,a6
    a732:	|  |         move.l 22(sp),d1
    a736:	|  |         jsr -306(a6)
    a73a:	|  |         move.l d0,18(sp)
    a73e:	|  |         move.l 18(sp),d0
    a742:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    a746:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    a74c:	|  |         cmpi.b #10,17(sp)
    a752:	|  |  /----- beq.s a75c <readTextPlain+0x7e>
    a754:	|  |  |      moveq #-1,d0
    a756:	|  |  |      cmp.l 110(sp),d0
    a75a:	|  |  |  /-- bne.s a762 <readTextPlain+0x84>
            keepGoing = FALSE;
    a75c:	|  |  \--|-> clr.w 114(sp)
    a760:	|  +-----|-- bra.s a766 <readTextPlain+0x88>
        } else {
            stringSize++;
    a762:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    a766:	|  \-------> tst.w 114(sp)
    a76a:	\----------- bne.s a724 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    a76c:	             tst.l 116(sp)
    a770:	         /-- bne.s a780 <readTextPlain+0xa2>
    a772:	         |   moveq #-1,d0
    a774:	         |   cmp.l 110(sp),d0
    a778:	         +-- bne.s a780 <readTextPlain+0xa2>
        return NULL;
    a77a:	         |   moveq #0,d0
    a77c:	      /--|-- bra.w a866 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    a780:	      |  \-> move.l 124(sp),86(sp)
    a786:	      |      move.l 90(sp),82(sp)
    a78c:	      |      moveq #-1,d0
    a78e:	      |      move.l d0,78(sp)
    a792:	      |      move.l 1678c <DOSBase>,d0
    a798:	      |      movea.l d0,a6
    a79a:	      |      move.l 86(sp),d1
    a79e:	      |      move.l 82(sp),d2
    a7a2:	      |      move.l 78(sp),d3
    a7a6:	      |      jsr -66(a6)
    a7aa:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    a7ae:	      |      move.l 116(sp),d0
    a7b2:	      |      addq.l #1,d0
    a7b4:	      |      move.l d0,70(sp)
    a7b8:	      |      clr.l 66(sp)
    a7bc:	      |      move.l 16784 <SysBase>,d0
    a7c2:	      |      movea.l d0,a6
    a7c4:	      |      move.l 70(sp),d0
    a7c8:	      |      move.l 66(sp),d1
    a7cc:	      |      jsr -684(a6)
    a7d0:	      |      move.l d0,62(sp)
    a7d4:	      |      move.l 62(sp),d0
    a7d8:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    a7dc:	      |  /-- bne.s a7e4 <readTextPlain+0x106>
    a7de:	      |  |   moveq #0,d0
    a7e0:	      +--|-- bra.w a866 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    a7e4:	      |  \-> move.l 124(sp),54(sp)
    a7ea:	      |      move.l 58(sp),50(sp)
    a7f0:	      |      moveq #1,d0
    a7f2:	      |      move.l d0,46(sp)
    a7f6:	      |      move.l 116(sp),42(sp)
    a7fc:	      |      move.l 1678c <DOSBase>,d0
    a802:	      |      movea.l d0,a6
    a804:	      |      move.l 54(sp),d1
    a808:	      |      move.l 50(sp),d2
    a80c:	      |      move.l 46(sp),d3
    a810:	      |      move.l 42(sp),d4
    a814:	      |      jsr -324(a6)
    a818:	      |      move.l d0,38(sp)
    a81c:	      |      move.l 38(sp),d0
    a820:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    a824:	      |      move.l 34(sp),d0
    a828:	      |      cmp.l 116(sp),d0
    a82c:	      |  /-- beq.s a83c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    a82e:	      |  |   pea 14f56 <custom.c.9a493ead+0x7a6>
    a834:	      |  |   jsr 13046 <KPrintF>
    a83a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    a83c:	      |  \-> move.l 124(sp),30(sp)
    a842:	      |      move.l 1678c <DOSBase>,d0
    a848:	      |      movea.l d0,a6
    a84a:	      |      move.l 30(sp),d1
    a84e:	      |      jsr -306(a6)
    a852:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    a856:	      |      move.l 116(sp),d0
    a85a:	      |      movea.l 58(sp),a0
    a85e:	      |      adda.l d0,a0
    a860:	      |      clr.b (a0)
    }

    return reply;
    a862:	      |      move.l 58(sp),d0
}
    a866:	      \----> movem.l (sp)+,d2-d4/a6
    a86a:	             lea 104(sp),sp
    a86e:	             rts

0000a870 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    a870:	                      lea -144(sp),sp
    a874:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    a878:	                      move.l 160(sp),148(sp)
    a87e:	                      move.l #1006,144(sp)
    a886:	                      move.l 1678c <DOSBase>,d0
    a88c:	                      movea.l d0,a6
    a88e:	                      move.l 148(sp),d1
    a892:	                      move.l 144(sp),d2
    a896:	                      jsr -30(a6)
    a89a:	                      move.l d0,140(sp)
    a89e:	                      move.l 140(sp),d0
    a8a2:	                      move.l d0,136(sp)

    if (!fp) {
    a8a6:	                  /-- bne.s a8c0 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a8a8:	                  |   move.l 160(sp),-(sp)
    a8ac:	                  |   pea 14f77 <custom.c.9a493ead+0x7c7>
    a8b2:	                  |   jsr 13046 <KPrintF>
    a8b8:	                  |   addq.l #8,sp
        return FALSE;
    a8ba:	                  |   clr.w d0
    a8bc:	/-----------------|-- bra.w ab7c <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a8c0:	|                 \-> movea.l 164(sp),a0
    a8c4:	|                     movea.l 4(a0),a0
    a8c8:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a8cc:	|                     move.w 16890 <saveEncoding>,d0
    a8d2:	|                     move.l d0,d0
    a8d4:	|                     move.b d0,1688e <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a8da:	|                     move.w 16890 <saveEncoding>,d0
    a8e0:	|                     lsr.w #8,d0
    a8e2:	|                     move.l d0,d0
    a8e4:	|                     move.b d0,1688f <encode2>

    if (saveEncoding) {
    a8ea:	|                     move.w 16890 <saveEncoding>,d0
    a8f0:	|                 /-- beq.s a942 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a8f2:	|                 |   move.l 136(sp),116(sp)
    a8f8:	|                 |   move.l #85521,112(sp)
    a900:	|                 |   moveq #99,d0
    a902:	|                 |   not.b d0
    a904:	|                 |   add.l sp,d0
    a906:	|                 |   addi.l #-144,d0
    a90c:	|                 |   move.l d0,108(sp)
    a910:	|                 |   move.l 1678c <DOSBase>,d0
    a916:	|                 |   movea.l d0,a6
    a918:	|                 |   move.l 116(sp),d1
    a91c:	|                 |   move.l 112(sp),d2
    a920:	|                 |   move.l 108(sp),d3
    a924:	|                 |   jsr -354(a6)
    a928:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a92c:	|                 |   move.l 136(sp),-(sp)
    a930:	|                 |   pea 14e90 <custom.c.9a493ead+0x6e0>
    a936:	|                 |   jsr ab86 <writeStringEncoded>
    a93c:	|                 |   addq.l #8,sp
    a93e:	|  /--------------|-- bra.w ab54 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a942:	|  |              \-> move.l 136(sp),132(sp)
    a948:	|  |                  move.l #85547,128(sp)
    a950:	|  |                  moveq #99,d1
    a952:	|  |                  not.b d1
    a954:	|  |                  add.l sp,d1
    a956:	|  |                  addi.l #-144,d1
    a95c:	|  |                  move.l d1,124(sp)
    a960:	|  |                  move.l 1678c <DOSBase>,d0
    a966:	|  |                  movea.l d0,a6
    a968:	|  |                  move.l 132(sp),d1
    a96c:	|  |                  move.l 128(sp),d2
    a970:	|  |                  move.l 124(sp),d3
    a974:	|  |                  jsr -354(a6)
    a978:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a97c:	|  +----------------- bra.w ab54 <stackToFile+0x2e4>
        if (saveEncoding) {
    a980:	|  |  /-------------> move.w 16890 <saveEncoding>,d0
    a986:	|  |  |     /-------- beq.w aad8 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a98a:	|  |  |     |         movea.l 152(sp),a0
    a98e:	|  |  |     |         move.l (a0),d0
    a990:	|  |  |     |         moveq #1,d1
    a992:	|  |  |     |         cmp.l d0,d1
    a994:	|  |  |     |     /-- beq.s a9e4 <stackToFile+0x174>
    a996:	|  |  |     |     |   moveq #3,d1
    a998:	|  |  |     |     |   cmp.l d0,d1
    a99a:	|  |  |     |  /--|-- bne.w aaa6 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a99e:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a9a4:	|  |  |     |  |  |   move.b 1688e <encode1>,d0
    a9aa:	|  |  |     |  |  |   ext.w d0
    a9ac:	|  |  |     |  |  |   movea.w d0,a0
    a9ae:	|  |  |     |  |  |   move.l a0,72(sp)
    a9b2:	|  |  |     |  |  |   move.l 1678c <DOSBase>,d0
    a9b8:	|  |  |     |  |  |   movea.l d0,a6
    a9ba:	|  |  |     |  |  |   move.l 76(sp),d1
    a9be:	|  |  |     |  |  |   move.l 72(sp),d2
    a9c2:	|  |  |     |  |  |   jsr -312(a6)
    a9c6:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a9ca:	|  |  |     |  |  |   movea.l 152(sp),a0
    a9ce:	|  |  |     |  |  |   move.l 4(a0),d0
    a9d2:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a9d6:	|  |  |     |  |  |   move.l d0,-(sp)
    a9d8:	|  |  |     |  |  |   jsr ab86 <writeStringEncoded>
    a9de:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a9e0:	|  |  |  /--|--|--|-- bra.w ab4a <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a9e4:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a9e8:	|  |  |  |  |  |      move.l 4(a0),d0
    a9ec:	|  |  |  |  |  |  /-- bmi.s aa5c <stackToFile+0x1ec>
    a9ee:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a9f2:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a9f6:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a9fc:	|  |  |  |  |  |  +-- bgt.s aa5c <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a9fe:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    aa04:	|  |  |  |  |  |  |   move.b 1688e <encode1>,d0
    aa0a:	|  |  |  |  |  |  |   eori.b #2,d0
    aa0e:	|  |  |  |  |  |  |   ext.w d0
    aa10:	|  |  |  |  |  |  |   movea.w d0,a0
    aa12:	|  |  |  |  |  |  |   move.l a0,60(sp)
    aa16:	|  |  |  |  |  |  |   move.l 1678c <DOSBase>,d0
    aa1c:	|  |  |  |  |  |  |   movea.l d0,a6
    aa1e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    aa22:	|  |  |  |  |  |  |   move.l 60(sp),d2
    aa26:	|  |  |  |  |  |  |   jsr -312(a6)
    aa2a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    aa2e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    aa34:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    aa38:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    aa3e:	|  |  |  |  |  |  |   move.l 1678c <DOSBase>,d0
    aa44:	|  |  |  |  |  |  |   movea.l d0,a6
    aa46:	|  |  |  |  |  |  |   move.l 52(sp),d1
    aa4a:	|  |  |  |  |  |  |   move.l 48(sp),d2
    aa4e:	|  |  |  |  |  |  |   jsr -312(a6)
    aa52:	|  |  |  |  |  |  |   move.l d0,44(sp)
    aa56:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    aa58:	|  |  |  +--|--|--|-- bra.w ab4a <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    aa5c:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    aa62:	|  |  |  |  |  |      move.b 1688e <encode1>,d0
    aa68:	|  |  |  |  |  |      eori.b #1,d0
    aa6c:	|  |  |  |  |  |      ext.w d0
    aa6e:	|  |  |  |  |  |      movea.w d0,a0
    aa70:	|  |  |  |  |  |      move.l a0,36(sp)
    aa74:	|  |  |  |  |  |      move.l 1678c <DOSBase>,d0
    aa7a:	|  |  |  |  |  |      movea.l d0,a6
    aa7c:	|  |  |  |  |  |      move.l 40(sp),d1
    aa80:	|  |  |  |  |  |      move.l 36(sp),d2
    aa84:	|  |  |  |  |  |      jsr -312(a6)
    aa88:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    aa8c:	|  |  |  |  |  |      movea.l 152(sp),a0
    aa90:	|  |  |  |  |  |      move.l 4(a0),d0
    aa94:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    aa98:	|  |  |  |  |  |      move.l d0,-(sp)
    aa9a:	|  |  |  |  |  |      jsr 958 <put4bytes>
    aaa0:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    aaa2:	|  |  |  +--|--|----- bra.w ab4a <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    aaa6:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    aaaa:	|  |  |  |  |         pea 14f89 <custom.c.9a493ead+0x7d9>
    aab0:	|  |  |  |  |         jsr 13046 <KPrintF>
    aab6:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    aab8:	|  |  |  |  |         move.l 136(sp),28(sp)
    aabe:	|  |  |  |  |         move.l 1678c <DOSBase>,d0
    aac4:	|  |  |  |  |         movea.l d0,a6
    aac6:	|  |  |  |  |         move.l 28(sp),d1
    aaca:	|  |  |  |  |         jsr -36(a6)
    aace:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    aad2:	|  |  |  |  |         clr.w d0
    aad4:	+--|--|--|--|-------- bra.w ab7c <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    aad8:	|  |  |  |  \-------> move.l 152(sp),d0
    aadc:	|  |  |  |            move.l d0,-(sp)
    aade:	|  |  |  |            jsr 115d4 <getTextFromAnyVar>
    aae4:	|  |  |  |            addq.l #4,sp
    aae6:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    aaea:	|  |  |  |     /----- beq.s ab5e <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    aaec:	|  |  |  |     |      movea.l 100(sp),a0
    aaf0:	|  |  |  |     |      move.b (a0),d0
    aaf2:	|  |  |  |     |      ext.w d0
    aaf4:	|  |  |  |     |      movea.w d0,a0
    aaf6:	|  |  |  |     |      move.l a0,12(sp)
    aafa:	|  |  |  |     |      move.l 136(sp),96(sp)
    ab00:	|  |  |  |     |      move.l #85989,92(sp)
    ab08:	|  |  |  |     |      moveq #99,d0
    ab0a:	|  |  |  |     |      not.b d0
    ab0c:	|  |  |  |     |      add.l sp,d0
    ab0e:	|  |  |  |     |      addi.l #-144,d0
    ab14:	|  |  |  |     |      move.l d0,88(sp)
    ab18:	|  |  |  |     |      move.l 1678c <DOSBase>,d0
    ab1e:	|  |  |  |     |      movea.l d0,a6
    ab20:	|  |  |  |     |      move.l 96(sp),d1
    ab24:	|  |  |  |     |      move.l 92(sp),d2
    ab28:	|  |  |  |     |      move.l 88(sp),d3
    ab2c:	|  |  |  |     |      jsr -354(a6)
    ab30:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    ab34:	|  |  |  |     |      move.l 100(sp),80(sp)
    ab3a:	|  |  |  |     |      move.l 16784 <SysBase>,d0
    ab40:	|  |  |  |     |      movea.l d0,a6
    ab42:	|  |  |  |     |      movea.l 80(sp),a1
    ab46:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    ab4a:	|  |  |  \-----|----> movea.l 152(sp),a0
    ab4e:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    ab54:	|  \--|--------|----> tst.l 152(sp)
    ab58:	|     \--------|----- bne.w a980 <stackToFile+0x110>
    ab5c:	|              |  /-- bra.s ab60 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    ab5e:	|              \--|-> nop
    }
    Close(fp);
    ab60:	|                 \-> move.l 136(sp),20(sp)
    ab66:	|                     move.l 1678c <DOSBase>,d0
    ab6c:	|                     movea.l d0,a6
    ab6e:	|                     move.l 20(sp),d1
    ab72:	|                     jsr -36(a6)
    ab76:	|                     move.l d0,16(sp)
    return TRUE;
    ab7a:	|                     moveq #1,d0
}
    ab7c:	\-------------------> movem.l (sp)+,d2-d3/a6
    ab80:	                      lea 144(sp),sp
    ab84:	                      rts

0000ab86 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    ab86:	       lea -20(sp),sp
    ab8a:	       move.l a6,-(sp)
    ab8c:	       move.l d2,-(sp)
	int a, len = strlen (s);
    ab8e:	       move.l 32(sp),-(sp)
    ab92:	       jsr 104ea <strlen>
    ab98:	       addq.l #4,sp
    ab9a:	       move.l d0,20(sp)

	put2bytes (len, fp);
    ab9e:	       move.l 36(sp),-(sp)
    aba2:	       move.l 24(sp),-(sp)
    aba6:	       jsr 8d0 <put2bytes>
    abac:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    abae:	       clr.l 24(sp)
    abb2:	   /-- bra.s ac08 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    abb4:	/--|-> move.l 36(sp),16(sp)
    abba:	|  |   move.l 24(sp),d0
    abbe:	|  |   movea.l 32(sp),a0
    abc2:	|  |   adda.l d0,a0
    abc4:	|  |   move.b (a0),d1
    abc6:	|  |   move.b 1688e <encode1>,d0
    abcc:	|  |   eor.b d1,d0
    abce:	|  |   ext.w d0
    abd0:	|  |   movea.w d0,a0
    abd2:	|  |   move.l a0,12(sp)
    abd6:	|  |   move.l 1678c <DOSBase>,d0
    abdc:	|  |   movea.l d0,a6
    abde:	|  |   move.l 16(sp),d1
    abe2:	|  |   move.l 12(sp),d2
    abe6:	|  |   jsr -312(a6)
    abea:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    abee:	|  |   move.b 1688e <encode1>,d0
    abf4:	|  |   move.b d0,d1
    abf6:	|  |   move.b 1688f <encode2>,d0
    abfc:	|  |   add.b d1,d0
    abfe:	|  |   move.b d0,1688e <encode1>
	for (a = 0; a < len; a ++) {
    ac04:	|  |   addq.l #1,24(sp)
    ac08:	|  \-> move.l 24(sp),d0
    ac0c:	|      cmp.l 20(sp),d0
    ac10:	\----- blt.s abb4 <writeStringEncoded+0x2e>
	}
}
    ac12:	       nop
    ac14:	       nop
    ac16:	       move.l (sp)+,d2
    ac18:	       movea.l (sp)+,a6
    ac1a:	       lea 20(sp),sp
    ac1e:	       rts

0000ac20 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ac20:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ac22:	                   tst.l 8(sp)
    ac26:	               /-- bne.s ac2c <failSecurityCheck+0xc>
    ac28:	               |   moveq #1,d0
    ac2a:	/--------------|-- bra.s acaa <failSecurityCheck+0x8a>

	int a = 0;
    ac2c:	|              \-> clr.l (sp)

	while (fn[a]) {
    ac2e:	|     /----------- bra.s ac9c <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ac30:	|  /--|----------> move.l (sp),d0
    ac32:	|  |  |            movea.l 8(sp),a0
    ac36:	|  |  |            adda.l d0,a0
    ac38:	|  |  |            move.b (a0),d0
    ac3a:	|  |  |            ext.w d0
    ac3c:	|  |  |            movea.w d0,a0
    ac3e:	|  |  |            moveq #124,d0
    ac40:	|  |  |            cmp.l a0,d0
    ac42:	|  |  |     /----- beq.s ac84 <failSecurityCheck+0x64>
    ac44:	|  |  |     |      moveq #124,d1
    ac46:	|  |  |     |      cmp.l a0,d1
    ac48:	|  |  |  /--|----- blt.s ac9a <failSecurityCheck+0x7a>
    ac4a:	|  |  |  |  |      moveq #92,d0
    ac4c:	|  |  |  |  |      cmp.l a0,d0
    ac4e:	|  |  |  |  +----- beq.s ac84 <failSecurityCheck+0x64>
    ac50:	|  |  |  |  |      moveq #92,d1
    ac52:	|  |  |  |  |      cmp.l a0,d1
    ac54:	|  |  |  +--|----- blt.s ac9a <failSecurityCheck+0x7a>
    ac56:	|  |  |  |  |      moveq #60,d0
    ac58:	|  |  |  |  |      cmp.l a0,d0
    ac5a:	|  |  |  |  |  /-- blt.s ac7a <failSecurityCheck+0x5a>
    ac5c:	|  |  |  |  |  |   moveq #34,d1
    ac5e:	|  |  |  |  |  |   cmp.l a0,d1
    ac60:	|  |  |  +--|--|-- bgt.s ac9a <failSecurityCheck+0x7a>
    ac62:	|  |  |  |  |  |   moveq #-34,d1
    ac64:	|  |  |  |  |  |   add.l a0,d1
    ac66:	|  |  |  |  |  |   move.l #83894529,d0
    ac6c:	|  |  |  |  |  |   lsr.l d1,d0
    ac6e:	|  |  |  |  |  |   moveq #1,d1
    ac70:	|  |  |  |  |  |   and.l d1,d0
    ac72:	|  |  |  |  |  |   sne d0
    ac74:	|  |  |  |  |  |   neg.b d0
    ac76:	|  |  |  |  +--|-- bne.s ac84 <failSecurityCheck+0x64>
    ac78:	|  |  |  +--|--|-- bra.s ac9a <failSecurityCheck+0x7a>
    ac7a:	|  |  |  |  |  \-> lea -62(a0),a0
    ac7e:	|  |  |  |  |      moveq #1,d0
    ac80:	|  |  |  |  |      cmp.l a0,d0
    ac82:	|  |  |  +--|----- bcs.s ac9a <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ac84:	|  |  |  |  \----> move.l 8(sp),-(sp)
    ac88:	|  |  |  |         pea 14fe9 <custom.c.9a493ead+0x839>
    ac8e:	|  |  |  |         jsr 13046 <KPrintF>
    ac94:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ac96:	|  |  |  |         moveq #1,d0
    ac98:	+--|--|--|-------- bra.s acaa <failSecurityCheck+0x8a>
		}
		a++;
    ac9a:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    ac9c:	|  |  \----------> move.l (sp),d0
    ac9e:	|  |               movea.l 8(sp),a0
    aca2:	|  |               adda.l d0,a0
    aca4:	|  |               move.b (a0),d0
    aca6:	|  \-------------- bne.s ac30 <failSecurityCheck+0x10>
	}
	return FALSE;
    aca8:	|                  clr.w d0
}
    acaa:	\----------------> addq.l #4,sp
    acac:	                   rts

0000acae <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    acae:	             lea -24(sp),sp
    acb2:	             move.l a6,-(sp)
    acb4:	             move.l 40(sp),d0
    acb8:	             move.w d0,d0
    acba:	             move.w d0,6(sp)
	int fileNum = -1;
    acbe:	             moveq #-1,d0
    acc0:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    acc4:	             jsr 39c0 <killSpeechTimers>

	switch (numParams) {
    acca:	             moveq #2,d0
    accc:	             cmp.l 32(sp),d0
    acd0:	      /----- beq.s ad14 <sayCore+0x66>
    acd2:	      |      moveq #3,d0
    acd4:	      |      cmp.l 32(sp),d0
    acd8:	/-----|----- bne.w adf6 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    acdc:	|     |      movea.l 36(sp),a0
    ace0:	|     |      move.l 24(a0),d0
    ace4:	|     |      move.l d0,-(sp)
    ace6:	|     |      pea 5 <_start+0x5>
    acea:	|     |      lea 20(sp),a0
    acee:	|     |      move.l a0,-(sp)
    acf0:	|     |      jsr 10ffe <getValueType>
    acf6:	|     |      lea 12(sp),sp
    acfa:	|     |      tst.w d0
    acfc:	|     |  /-- bne.s ad04 <sayCore+0x56>
    acfe:	|     |  |   moveq #1,d0
    ad00:	|  /--|--|-- bra.w ae06 <sayCore+0x158>
			trimStack (&fun -> stack);
    ad04:	|  |  |  \-> moveq #24,d0
    ad06:	|  |  |      add.l 36(sp),d0
    ad0a:	|  |  |      move.l d0,-(sp)
    ad0c:	|  |  |      jsr 11982 <trimStack>
    ad12:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ad14:	|  |  \----> movea.l 36(sp),a0
    ad18:	|  |         move.l 24(a0),d0
    ad1c:	|  |         move.l d0,-(sp)
    ad1e:	|  |         jsr 115d4 <getTextFromAnyVar>
    ad24:	|  |         addq.l #4,sp
    ad26:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ad2a:	|  |     /-- bne.s ad32 <sayCore+0x84>
    ad2c:	|  |     |   moveq #1,d0
    ad2e:	|  +-----|-- bra.w ae06 <sayCore+0x158>
			trimStack (&fun -> stack);
    ad32:	|  |     \-> moveq #24,d0
    ad34:	|  |         add.l 36(sp),d0
    ad38:	|  |         move.l d0,-(sp)
    ad3a:	|  |         jsr 11982 <trimStack>
    ad40:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ad42:	|  |         movea.l 36(sp),a0
    ad46:	|  |         move.l 24(a0),d0
    ad4a:	|  |         move.l d0,-(sp)
    ad4c:	|  |         pea 7 <_start+0x7>
    ad50:	|  |         lea 16(sp),a0
    ad54:	|  |         move.l a0,-(sp)
    ad56:	|  |         jsr 10ffe <getValueType>
    ad5c:	|  |         lea 12(sp),sp
    ad60:	|  |         tst.w d0
    ad62:	|  |     /-- bne.s ad6a <sayCore+0xbc>
    ad64:	|  |     |   moveq #1,d0
    ad66:	|  +-----|-- bra.w ae06 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ad6a:	|  |     \-> movea.l 36(sp),a0
    ad6e:	|  |         move.l 24(a0),d0
    ad72:	|  |         move.l d0,-(sp)
    ad74:	|  |         pea 7 <_start+0x7>
    ad78:	|  |         lea 16(sp),a0
    ad7c:	|  |         move.l a0,-(sp)
    ad7e:	|  |         jsr 10ffe <getValueType>
    ad84:	|  |         lea 12(sp),sp
    ad88:	|  |         tst.w d0
    ad8a:	|  |     /-- bne.s ad90 <sayCore+0xe2>
    ad8c:	|  |     |   moveq #1,d0
    ad8e:	|  +-----|-- bra.s ae06 <sayCore+0x158>
			trimStack (&fun -> stack);
    ad90:	|  |     \-> moveq #24,d0
    ad92:	|  |         add.l 36(sp),d0
    ad96:	|  |         move.l d0,-(sp)
    ad98:	|  |         jsr 11982 <trimStack>
    ad9e:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ada0:	|  |         movea.w 6(sp),a0
    ada4:	|  |         move.l 12(sp),d1
    ada8:	|  |         move.l 8(sp),d0
    adac:	|  |         move.l a0,-(sp)
    adae:	|  |         move.l d1,-(sp)
    adb0:	|  |         move.l d0,-(sp)
    adb2:	|  |         move.l 36(sp),-(sp)
    adb6:	|  |         jsr 5918 <wrapSpeech>
    adbc:	|  |         lea 16(sp),sp
    adc0:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    adc4:	|  |         movea.l 36(sp),a0
    adc8:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    adce:	|  |         movea.l 36(sp),a0
    add2:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    add8:	|  |         move.l 24(sp),16(sp)
    adde:	|  |         move.l 16784 <SysBase>,d0
    ade4:	|  |         movea.l d0,a6
    ade6:	|  |         movea.l 16(sp),a1
    adea:	|  |         jsr -690(a6)
			newText = NULL;
    adee:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    adf2:	|  |         moveq #0,d0
    adf4:	|  +-------- bra.s ae06 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    adf6:	\--|-------> pea 1506f <custom.c.9a493ead+0x8bf>
    adfc:	   |         jsr 13046 <KPrintF>
    ae02:	   |         addq.l #4,sp
	return BR_ERROR;
    ae04:	   |         moveq #1,d0
}
    ae06:	   \-------> movea.l (sp)+,a6
    ae08:	             lea 24(sp),sp
    ae0c:	             rts

0000ae0e <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    ae0e:	pea 1 <_start+0x1>
    ae12:	move.l 12(sp),-(sp)
    ae16:	move.l 12(sp),-(sp)
    ae1a:	jsr acae <sayCore>
    ae20:	lea 12(sp),sp
}
    ae24:	rts

0000ae26 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    ae26:	clr.l -(sp)
    ae28:	move.l 12(sp),-(sp)
    ae2c:	move.l 12(sp),-(sp)
    ae30:	jsr acae <sayCore>
    ae36:	lea 12(sp),sp
}
    ae3a:	rts

0000ae3c <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    ae3c:	moveq #2,d0
}
    ae3e:	rts

0000ae40 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    ae40:	moveq #2,d0
}
    ae42:	rts

0000ae44 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    ae44:	nop
    ae46:	rts

0000ae48 <builtIn_setCursor>:

builtIn(setCursor)
{
    ae48:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ae4a:	movea.l 12(sp),a0
    ae4e:	move.l 24(a0),d0
    ae52:	move.l d0,-(sp)
    ae54:	jsr 114d6 <getAnimationFromVar>
    ae5a:	addq.l #4,sp
    ae5c:	move.l d0,(sp)
	pickAnimCursor (aa);
    ae5e:	move.l (sp),-(sp)
    ae60:	jsr dba <pickAnimCursor>
    ae66:	addq.l #4,sp
	trimStack (&fun -> stack);
    ae68:	moveq #24,d0
    ae6a:	add.l 12(sp),d0
    ae6e:	move.l d0,-(sp)
    ae70:	jsr 11982 <trimStack>
    ae76:	addq.l #4,sp
	return BR_CONTINUE;
    ae78:	moveq #2,d0
}
    ae7a:	addq.l #4,sp
    ae7c:	rts

0000ae7e <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ae7e:	move.l 16744 <input+0xa>,d1
    ae84:	move.l 16892 <cameraX>,d0
    ae8a:	add.l d0,d1
    ae8c:	moveq #28,d0
    ae8e:	add.l 8(sp),d0
    ae92:	move.l d1,-(sp)
    ae94:	pea 1 <_start+0x1>
    ae98:	move.l d0,-(sp)
    ae9a:	jsr 118f0 <setVariable>
    aea0:	lea 12(sp),sp
	return BR_CONTINUE;
    aea4:	moveq #2,d0
}
    aea6:	rts

0000aea8 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    aea8:	move.l 16748 <input+0xe>,d1
    aeae:	move.l 16896 <cameraY>,d0
    aeb4:	add.l d0,d1
    aeb6:	moveq #28,d0
    aeb8:	add.l 8(sp),d0
    aebc:	move.l d1,-(sp)
    aebe:	pea 1 <_start+0x1>
    aec2:	move.l d0,-(sp)
    aec4:	jsr 118f0 <setVariable>
    aeca:	lea 12(sp),sp
	return BR_CONTINUE;
    aece:	moveq #2,d0
}
    aed0:	rts

0000aed2 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    aed2:	move.l 16744 <input+0xa>,d0
    aed8:	move.l d0,-(sp)
    aeda:	jsr 132fe <__floatsisf>
    aee0:	addq.l #4,sp
    aee2:	move.l d0,d1
    aee4:	move.l 16142 <cameraZoom>,d0
    aeea:	move.l d0,-(sp)
    aeec:	move.l d1,-(sp)
    aeee:	jsr 133b0 <__mulsf3>
    aef4:	addq.l #8,sp
    aef6:	move.l d0,-(sp)
    aef8:	jsr 13296 <__fixsfsi>
    aefe:	addq.l #4,sp
    af00:	move.l d0,d1
    af02:	moveq #28,d0
    af04:	add.l 8(sp),d0
    af08:	move.l d1,-(sp)
    af0a:	pea 1 <_start+0x1>
    af0e:	move.l d0,-(sp)
    af10:	jsr 118f0 <setVariable>
    af16:	lea 12(sp),sp
	return BR_CONTINUE;
    af1a:	moveq #2,d0
}
    af1c:	rts

0000af1e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    af1e:	move.l 16748 <input+0xe>,d0
    af24:	move.l d0,-(sp)
    af26:	jsr 132fe <__floatsisf>
    af2c:	addq.l #4,sp
    af2e:	move.l d0,d1
    af30:	move.l 16142 <cameraZoom>,d0
    af36:	move.l d0,-(sp)
    af38:	move.l d1,-(sp)
    af3a:	jsr 133b0 <__mulsf3>
    af40:	addq.l #8,sp
    af42:	move.l d0,-(sp)
    af44:	jsr 13296 <__fixsfsi>
    af4a:	addq.l #4,sp
    af4c:	move.l d0,d1
    af4e:	moveq #28,d0
    af50:	add.l 8(sp),d0
    af54:	move.l d1,-(sp)
    af56:	pea 1 <_start+0x1>
    af5a:	move.l d0,-(sp)
    af5c:	jsr 118f0 <setVariable>
    af62:	lea 12(sp),sp
	return BR_CONTINUE;
    af66:	moveq #2,d0
}
    af68:	rts

0000af6a <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    af6a:	jsr 53cc <statusBarText>
    af70:	move.l d0,d1
    af72:	moveq #28,d0
    af74:	add.l 8(sp),d0
    af78:	move.l d1,-(sp)
    af7a:	move.l d0,-(sp)
    af7c:	jsr 11220 <makeTextVar>
    af82:	addq.l #8,sp
	return BR_CONTINUE;
    af84:	moveq #2,d0
}
    af86:	rts

0000af88 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    af88:	       lea -20(sp),sp
    af8c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    af8e:	       movea.l 32(sp),a0
    af92:	       move.l 24(a0),d0
    af96:	       move.l d0,-(sp)
    af98:	       jsr 115d4 <getTextFromAnyVar>
    af9e:	       addq.l #4,sp
    afa0:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    afa4:	   /-- bne.s afac <builtIn_getMatchingFiles+0x24>
    afa6:	   |   moveq #1,d0
    afa8:	/--|-- bra.w b06e <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    afac:	|  \-> moveq #24,d0
    afae:	|      add.l 32(sp),d0
    afb2:	|      move.l d0,-(sp)
    afb4:	|      jsr 11982 <trimStack>
    afba:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    afbc:	|      moveq #28,d0
    afbe:	|      add.l 32(sp),d0
    afc2:	|      move.l d0,-(sp)
    afc4:	|      jsr 1124c <unlinkVar>
    afca:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    afcc:	|      movea.l 32(sp),a0
    afd0:	|      moveq #6,d0
    afd2:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    afd6:	|      moveq #12,d0
    afd8:	|      move.l d0,16(sp)
    afdc:	|      clr.l 12(sp)
    afe0:	|      move.l 16784 <SysBase>,d0
    afe6:	|      movea.l d0,a6
    afe8:	|      move.l 16(sp),d0
    afec:	|      move.l 12(sp),d1
    aff0:	|      jsr -684(a6)
    aff4:	|      move.l d0,8(sp)
    aff8:	|      move.l 8(sp),d0
    affc:	|      movea.l 32(sp),a0
    b000:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    b004:	|      moveq #32,d0
    b006:	|      add.l 32(sp),d0
    b00a:	|  /-- bne.s b010 <builtIn_getMatchingFiles+0x88>
    b00c:	|  |   moveq #1,d0
    b00e:	+--|-- bra.s b06e <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    b010:	|  \-> movea.l 32(sp),a0
    b014:	|      movea.l 32(a0),a0
    b018:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    b01a:	|      movea.l 32(sp),a0
    b01e:	|      movea.l 32(a0),a0
    b022:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    b026:	|      movea.l 32(sp),a0
    b02a:	|      movea.l 32(a0),a0
    b02e:	|      moveq #1,d0
    b030:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    b034:	|      movea.l 32(sp),a0
    b038:	|      move.l 32(a0),d0
    b03c:	|      move.l 20(sp),-(sp)
    b040:	|      move.l d0,-(sp)
    b042:	|      jsr 10dba <getSavedGamesStack>
    b048:	|      addq.l #8,sp
    b04a:	|      tst.w d0
    b04c:	|  /-- bne.s b052 <builtIn_getMatchingFiles+0xca>
    b04e:	|  |   moveq #1,d0
    b050:	+--|-- bra.s b06e <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    b052:	|  \-> move.l 20(sp),4(sp)
    b058:	|      move.l 16784 <SysBase>,d0
    b05e:	|      movea.l d0,a6
    b060:	|      movea.l 4(sp),a1
    b064:	|      jsr -690(a6)
	newText = NULL;
    b068:	|      clr.l 20(sp)
	return BR_CONTINUE;
    b06c:	|      moveq #2,d0
}
    b06e:	\----> movea.l (sp)+,a6
    b070:	       lea 20(sp),sp
    b074:	       rts

0000b076 <builtIn_saveGame>:

builtIn(saveGame)
{
    b076:	       lea -12(sp),sp
    b07a:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    b07c:	       movea.l 24(sp),a0
    b080:	       move.l 24(a0),d0
    b084:	       move.l d0,-(sp)
    b086:	       jsr 115d4 <getTextFromAnyVar>
    b08c:	       addq.l #4,sp
    b08e:	       move.l d0,16750 <loadNow>
    trimStack(&fun->stack);
    b094:	       moveq #24,d0
    b096:	       add.l 24(sp),d0
    b09a:	       move.l d0,-(sp)
    b09c:	       jsr 11982 <trimStack>
    b0a2:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    b0a4:	       move.l 16750 <loadNow>,d0
    b0aa:	       move.l d0,-(sp)
    b0ac:	       jsr 2fe <encodeFilename>
    b0b2:	       addq.l #4,sp
    b0b4:	       move.l d0,12(sp)
    FreeVec(loadNow);
    b0b8:	       move.l 16750 <loadNow>,8(sp)
    b0c0:	       move.l 16784 <SysBase>,d0
    b0c6:	       movea.l d0,a6
    b0c8:	       movea.l 8(sp),a1
    b0cc:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    b0d0:	       move.l 12(sp),-(sp)
    b0d4:	       jsr ac20 <failSecurityCheck>
    b0da:	       addq.l #4,sp
    b0dc:	       tst.w d0
    b0de:	   /-- beq.s b0e4 <builtIn_saveGame+0x6e>
    b0e0:	   |   moveq #1,d0
    b0e2:	/--|-- bra.s b134 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    b0e4:	|  \-> move.l 12(sp),-(sp)
    b0e8:	|      pea 1509d <custom.c.9a493ead+0x8ed>
    b0ee:	|      jsr 1052a <joinStrings>
    b0f4:	|      addq.l #8,sp
    b0f6:	|      move.l d0,16750 <loadNow>
    FreeVec(aaaaa);
    b0fc:	|      move.l 12(sp),4(sp)
    b102:	|      move.l 16784 <SysBase>,d0
    b108:	|      movea.l d0,a6
    b10a:	|      movea.l 4(sp),a1
    b10e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    b112:	|      moveq #28,d0
    b114:	|      add.l 24(sp),d0
    b118:	|      clr.l -(sp)
    b11a:	|      pea 1 <_start+0x1>
    b11e:	|      move.l d0,-(sp)
    b120:	|      jsr 118f0 <setVariable>
    b126:	|      lea 12(sp),sp
    saverFunc = fun;
    b12a:	|      move.l 24(sp),168a2 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    b132:	|      moveq #0,d0
}
    b134:	\----> movea.l (sp)+,a6
    b136:	       lea 12(sp),sp
    b13a:	       rts

0000b13c <builtIn_fileExists>:

builtIn(fileExists)
{
    b13c:	       lea -36(sp),sp
    b140:	       move.l a6,-(sp)
    b142:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    b144:	       movea.l 52(sp),a0
    b148:	       move.l 24(a0),d0
    b14c:	       move.l d0,-(sp)
    b14e:	       jsr 115d4 <getTextFromAnyVar>
    b154:	       addq.l #4,sp
    b156:	       move.l d0,16750 <loadNow>
    trimStack(&fun->stack);
    b15c:	       moveq #24,d0
    b15e:	       add.l 52(sp),d0
    b162:	       move.l d0,-(sp)
    b164:	       jsr 11982 <trimStack>
    b16a:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    b16c:	       move.l 16750 <loadNow>,d0
    b172:	       move.l d0,-(sp)
    b174:	       jsr 2fe <encodeFilename>
    b17a:	       addq.l #4,sp
    b17c:	       move.l d0,40(sp)
    FreeVec(loadNow);
    b180:	       move.l 16750 <loadNow>,36(sp)
    b188:	       move.l 16784 <SysBase>,d0
    b18e:	       movea.l d0,a6
    b190:	       movea.l 36(sp),a1
    b194:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    b198:	       move.l 40(sp),-(sp)
    b19c:	       jsr ac20 <failSecurityCheck>
    b1a2:	       addq.l #4,sp
    b1a4:	       tst.w d0
    b1a6:	   /-- beq.s b1ae <builtIn_fileExists+0x72>
    b1a8:	   |   moveq #1,d0
    b1aa:	/--|-- bra.w b24e <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    b1ae:	|  \-> move.l 40(sp),32(sp)
    b1b4:	|      move.l #1005,28(sp)
    b1bc:	|      move.l 1678c <DOSBase>,d0
    b1c2:	|      movea.l d0,a6
    b1c4:	|      move.l 32(sp),d1
    b1c8:	|      move.l 28(sp),d2
    b1cc:	|      jsr -30(a6)
    b1d0:	|      move.l d0,24(sp)
    b1d4:	|      move.l 24(sp),d0
    b1d8:	|      move.l d0,20(sp)
    if (!fp) {        
    b1dc:	|  /-- bne.s b1ec <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    b1de:	|  |   pea 1509f <custom.c.9a493ead+0x8ef>
    b1e4:	|  |   jsr 13046 <KPrintF>
    b1ea:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    b1ec:	|  \-> tst.l 20(sp)
    b1f0:	|      sne d0
    b1f2:	|      neg.b d0
    b1f4:	|      moveq #0,d1
    b1f6:	|      move.b d0,d1
    b1f8:	|      moveq #28,d0
    b1fa:	|      add.l 52(sp),d0
    b1fe:	|      move.l d1,-(sp)
    b200:	|      pea 1 <_start+0x1>
    b204:	|      move.l d0,-(sp)
    b206:	|      jsr 118f0 <setVariable>
    b20c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    b210:	|      tst.l 20(sp)
    b214:	|  /-- beq.s b230 <builtIn_fileExists+0xf4>
    b216:	|  |   move.l 20(sp),16(sp)
    b21c:	|  |   move.l 1678c <DOSBase>,d0
    b222:	|  |   movea.l d0,a6
    b224:	|  |   move.l 16(sp),d1
    b228:	|  |   jsr -36(a6)
    b22c:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    b230:	|  \-> move.l 40(sp),8(sp)
    b236:	|      move.l 16784 <SysBase>,d0
    b23c:	|      movea.l d0,a6
    b23e:	|      movea.l 8(sp),a1
    b242:	|      jsr -690(a6)
    loadNow = NULL;
    b246:	|      clr.l 16750 <loadNow>
    return BR_CONTINUE;
    b24c:	|      moveq #2,d0
}
    b24e:	\----> move.l (sp)+,d2
    b250:	       movea.l (sp)+,a6
    b252:	       lea 36(sp),sp
    b256:	       rts

0000b258 <builtIn_loadGame>:

builtIn(loadGame)
{
    b258:	       lea -36(sp),sp
    b25c:	       move.l a6,-(sp)
    b25e:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    b260:	       movea.l 52(sp),a0
    b264:	       move.l 24(a0),d0
    b268:	       move.l d0,-(sp)
    b26a:	       jsr 115d4 <getTextFromAnyVar>
    b270:	       addq.l #4,sp
    b272:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    b276:	       moveq #24,d0
    b278:	       add.l 52(sp),d0
    b27c:	       move.l d0,-(sp)
    b27e:	       jsr 11982 <trimStack>
    b284:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    b286:	       move.l 40(sp),-(sp)
    b28a:	       jsr 2fe <encodeFilename>
    b290:	       addq.l #4,sp
    b292:	       move.l d0,16750 <loadNow>
    FreeVec(aaaaa);
    b298:	       move.l 40(sp),36(sp)
    b29e:	       move.l 16784 <SysBase>,d0
    b2a4:	       movea.l d0,a6
    b2a6:	       movea.l 36(sp),a1
    b2aa:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    b2ae:	       move.l 16750 <loadNow>,d0
    b2b4:	       move.l d0,-(sp)
    b2b6:	       jsr ac20 <failSecurityCheck>
    b2bc:	       addq.l #4,sp
    b2be:	       tst.w d0
    b2c0:	   /-- beq.s b2c6 <builtIn_loadGame+0x6e>
    b2c2:	   |   moveq #1,d0
    b2c4:	/--|-- bra.s b336 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    b2c6:	|  \-> move.l 16750 <loadNow>,32(sp)
    b2ce:	|      move.l #1005,28(sp)
    b2d6:	|      move.l 1678c <DOSBase>,d0
    b2dc:	|      movea.l d0,a6
    b2de:	|      move.l 32(sp),d1
    b2e2:	|      move.l 28(sp),d2
    b2e6:	|      jsr -30(a6)
    b2ea:	|      move.l d0,24(sp)
    b2ee:	|      move.l 24(sp),d0
    b2f2:	|      move.l d0,20(sp)
    if (fp) {
    b2f6:	|  /-- beq.s b316 <builtIn_loadGame+0xbe>
        Close(fp);
    b2f8:	|  |   move.l 20(sp),12(sp)
    b2fe:	|  |   move.l 1678c <DOSBase>,d0
    b304:	|  |   movea.l d0,a6
    b306:	|  |   move.l 12(sp),d1
    b30a:	|  |   jsr -36(a6)
    b30e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    b312:	|  |   moveq #0,d0
    b314:	+--|-- bra.s b336 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    b316:	|  \-> move.l 16750 <loadNow>,16(sp)
    b31e:	|      move.l 16784 <SysBase>,d0
    b324:	|      movea.l d0,a6
    b326:	|      movea.l 16(sp),a1
    b32a:	|      jsr -690(a6)
    loadNow = NULL;
    b32e:	|      clr.l 16750 <loadNow>
    return BR_CONTINUE;
    b334:	|      moveq #2,d0
}
    b336:	\----> move.l (sp)+,d2
    b338:	       movea.l (sp)+,a6
    b33a:	       lea 36(sp),sp
    b33e:	       rts

0000b340 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    b340:	move.l 16878 <sceneHeight>,d0
    b346:	move.l d0,d1
    b348:	move.l 16874 <sceneWidth>,d0
    b34e:	move.l d1,-(sp)
    b350:	move.l d0,-(sp)
    b352:	clr.l -(sp)
    b354:	clr.l -(sp)
    b356:	jsr 9b20 <blankScreen>
    b35c:	lea 16(sp),sp
	return BR_CONTINUE;
    b360:	moveq #2,d0
}
    b362:	rts

0000b364 <builtIn_blankArea>:

builtIn(blankArea)
{
    b364:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b368:	       movea.l 24(sp),a0
    b36c:	       move.l 24(a0),d0
    b370:	       move.l d0,-(sp)
    b372:	       pea 1 <_start+0x1>
    b376:	       lea 8(sp),a0
    b37a:	       move.l a0,-(sp)
    b37c:	       jsr 10ffe <getValueType>
    b382:	       lea 12(sp),sp
    b386:	       tst.w d0
    b388:	   /-- bne.s b390 <builtIn_blankArea+0x2c>
    b38a:	   |   moveq #1,d0
    b38c:	/--|-- bra.w b466 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b390:	|  \-> moveq #24,d0
    b392:	|      add.l 24(sp),d0
    b396:	|      move.l d0,-(sp)
    b398:	|      jsr 11982 <trimStack>
    b39e:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b3a0:	|      movea.l 24(sp),a0
    b3a4:	|      move.l 24(a0),d0
    b3a8:	|      move.l d0,-(sp)
    b3aa:	|      pea 1 <_start+0x1>
    b3ae:	|      lea 12(sp),a0
    b3b2:	|      move.l a0,-(sp)
    b3b4:	|      jsr 10ffe <getValueType>
    b3ba:	|      lea 12(sp),sp
    b3be:	|      tst.w d0
    b3c0:	|  /-- bne.s b3c8 <builtIn_blankArea+0x64>
    b3c2:	|  |   moveq #1,d0
    b3c4:	+--|-- bra.w b466 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b3c8:	|  \-> moveq #24,d0
    b3ca:	|      add.l 24(sp),d0
    b3ce:	|      move.l d0,-(sp)
    b3d0:	|      jsr 11982 <trimStack>
    b3d6:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b3d8:	|      movea.l 24(sp),a0
    b3dc:	|      move.l 24(a0),d0
    b3e0:	|      move.l d0,-(sp)
    b3e2:	|      pea 1 <_start+0x1>
    b3e6:	|      moveq #16,d0
    b3e8:	|      add.l sp,d0
    b3ea:	|      move.l d0,-(sp)
    b3ec:	|      jsr 10ffe <getValueType>
    b3f2:	|      lea 12(sp),sp
    b3f6:	|      tst.w d0
    b3f8:	|  /-- bne.s b3fe <builtIn_blankArea+0x9a>
    b3fa:	|  |   moveq #1,d0
    b3fc:	+--|-- bra.s b466 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b3fe:	|  \-> moveq #24,d0
    b400:	|      add.l 24(sp),d0
    b404:	|      move.l d0,-(sp)
    b406:	|      jsr 11982 <trimStack>
    b40c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b40e:	|      movea.l 24(sp),a0
    b412:	|      move.l 24(a0),d0
    b416:	|      move.l d0,-(sp)
    b418:	|      pea 1 <_start+0x1>
    b41c:	|      moveq #20,d0
    b41e:	|      add.l sp,d0
    b420:	|      move.l d0,-(sp)
    b422:	|      jsr 10ffe <getValueType>
    b428:	|      lea 12(sp),sp
    b42c:	|      tst.w d0
    b42e:	|  /-- bne.s b434 <builtIn_blankArea+0xd0>
    b430:	|  |   moveq #1,d0
    b432:	+--|-- bra.s b466 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b434:	|  \-> moveq #24,d0
    b436:	|      add.l 24(sp),d0
    b43a:	|      move.l d0,-(sp)
    b43c:	|      jsr 11982 <trimStack>
    b442:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    b444:	|      movea.l (sp),a1
    b446:	|      movea.l 4(sp),a0
    b44a:	|      move.l 8(sp),d1
    b44e:	|      move.l 12(sp),d0
    b452:	|      move.l a1,-(sp)
    b454:	|      move.l a0,-(sp)
    b456:	|      move.l d1,-(sp)
    b458:	|      move.l d0,-(sp)
    b45a:	|      jsr 9b20 <blankScreen>
    b460:	|      lea 16(sp),sp
	return BR_CONTINUE;
    b464:	|      moveq #2,d0
}
    b466:	\----> lea 16(sp),sp
    b46a:	       rts

0000b46c <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    b46c:	jsr 9b34 <darkScreen>
	return BR_CONTINUE;
    b472:	moveq #2,d0
}
    b474:	rts

0000b476 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    b476:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b47a:	       movea.l 20(sp),a0
    b47e:	       move.l 24(a0),d0
    b482:	       move.l d0,-(sp)
    b484:	       pea 1 <_start+0x1>
    b488:	       lea 8(sp),a0
    b48c:	       move.l a0,-(sp)
    b48e:	       jsr 10ffe <getValueType>
    b494:	       lea 12(sp),sp
    b498:	       tst.w d0
    b49a:	   /-- bne.s b4a2 <builtIn_addOverlay+0x2c>
    b49c:	   |   moveq #1,d0
    b49e:	/--|-- bra.w b53a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b4a2:	|  \-> moveq #24,d0
    b4a4:	|      add.l 20(sp),d0
    b4a8:	|      move.l d0,-(sp)
    b4aa:	|      jsr 11982 <trimStack>
    b4b0:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4b2:	|      movea.l 20(sp),a0
    b4b6:	|      move.l 24(a0),d0
    b4ba:	|      move.l d0,-(sp)
    b4bc:	|      pea 1 <_start+0x1>
    b4c0:	|      moveq #12,d0
    b4c2:	|      add.l sp,d0
    b4c4:	|      move.l d0,-(sp)
    b4c6:	|      jsr 10ffe <getValueType>
    b4cc:	|      lea 12(sp),sp
    b4d0:	|      tst.w d0
    b4d2:	|  /-- bne.s b4d8 <builtIn_addOverlay+0x62>
    b4d4:	|  |   moveq #1,d0
    b4d6:	+--|-- bra.s b53a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b4d8:	|  \-> moveq #24,d0
    b4da:	|      add.l 20(sp),d0
    b4de:	|      move.l d0,-(sp)
    b4e0:	|      jsr 11982 <trimStack>
    b4e6:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b4e8:	|      movea.l 20(sp),a0
    b4ec:	|      move.l 24(a0),d0
    b4f0:	|      move.l d0,-(sp)
    b4f2:	|      pea 5 <_start+0x5>
    b4f6:	|      moveq #16,d0
    b4f8:	|      add.l sp,d0
    b4fa:	|      move.l d0,-(sp)
    b4fc:	|      jsr 10ffe <getValueType>
    b502:	|      lea 12(sp),sp
    b506:	|      tst.w d0
    b508:	|  /-- bne.s b50e <builtIn_addOverlay+0x98>
    b50a:	|  |   moveq #1,d0
    b50c:	+--|-- bra.s b53a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b50e:	|  \-> moveq #24,d0
    b510:	|      add.l 20(sp),d0
    b514:	|      move.l d0,-(sp)
    b516:	|      jsr 11982 <trimStack>
    b51c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    b51e:	|      movea.l (sp),a0
    b520:	|      move.l 4(sp),d1
    b524:	|      move.l 8(sp),d0
    b528:	|      move.l a0,-(sp)
    b52a:	|      move.l d1,-(sp)
    b52c:	|      move.l d0,-(sp)
    b52e:	|      jsr 9c52 <loadBackDrop>
    b534:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b538:	|      moveq #2,d0
}
    b53a:	\----> lea 12(sp),sp
    b53e:	       rts

0000b540 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    b540:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b544:	       movea.l 20(sp),a0
    b548:	       move.l 24(a0),d0
    b54c:	       move.l d0,-(sp)
    b54e:	       pea 1 <_start+0x1>
    b552:	       lea 8(sp),a0
    b556:	       move.l a0,-(sp)
    b558:	       jsr 10ffe <getValueType>
    b55e:	       lea 12(sp),sp
    b562:	       tst.w d0
    b564:	   /-- bne.s b56c <builtIn_mixOverlay+0x2c>
    b566:	   |   moveq #1,d0
    b568:	/--|-- bra.w b604 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b56c:	|  \-> moveq #24,d0
    b56e:	|      add.l 20(sp),d0
    b572:	|      move.l d0,-(sp)
    b574:	|      jsr 11982 <trimStack>
    b57a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b57c:	|      movea.l 20(sp),a0
    b580:	|      move.l 24(a0),d0
    b584:	|      move.l d0,-(sp)
    b586:	|      pea 1 <_start+0x1>
    b58a:	|      moveq #12,d0
    b58c:	|      add.l sp,d0
    b58e:	|      move.l d0,-(sp)
    b590:	|      jsr 10ffe <getValueType>
    b596:	|      lea 12(sp),sp
    b59a:	|      tst.w d0
    b59c:	|  /-- bne.s b5a2 <builtIn_mixOverlay+0x62>
    b59e:	|  |   moveq #1,d0
    b5a0:	+--|-- bra.s b604 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b5a2:	|  \-> moveq #24,d0
    b5a4:	|      add.l 20(sp),d0
    b5a8:	|      move.l d0,-(sp)
    b5aa:	|      jsr 11982 <trimStack>
    b5b0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b5b2:	|      movea.l 20(sp),a0
    b5b6:	|      move.l 24(a0),d0
    b5ba:	|      move.l d0,-(sp)
    b5bc:	|      pea 5 <_start+0x5>
    b5c0:	|      moveq #16,d0
    b5c2:	|      add.l sp,d0
    b5c4:	|      move.l d0,-(sp)
    b5c6:	|      jsr 10ffe <getValueType>
    b5cc:	|      lea 12(sp),sp
    b5d0:	|      tst.w d0
    b5d2:	|  /-- bne.s b5d8 <builtIn_mixOverlay+0x98>
    b5d4:	|  |   moveq #1,d0
    b5d6:	+--|-- bra.s b604 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b5d8:	|  \-> moveq #24,d0
    b5da:	|      add.l 20(sp),d0
    b5de:	|      move.l d0,-(sp)
    b5e0:	|      jsr 11982 <trimStack>
    b5e6:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    b5e8:	|      movea.l (sp),a0
    b5ea:	|      move.l 4(sp),d1
    b5ee:	|      move.l 8(sp),d0
    b5f2:	|      move.l a0,-(sp)
    b5f4:	|      move.l d1,-(sp)
    b5f6:	|      move.l d0,-(sp)
    b5f8:	|      jsr 9cc8 <mixBackDrop>
    b5fe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b602:	|      moveq #2,d0
}
    b604:	\----> lea 12(sp),sp
    b608:	       rts

0000b60a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    b60a:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b60e:	       movea.l 20(sp),a0
    b612:	       move.l 24(a0),d0
    b616:	       move.l d0,-(sp)
    b618:	       pea 1 <_start+0x1>
    b61c:	       lea 8(sp),a0
    b620:	       move.l a0,-(sp)
    b622:	       jsr 10ffe <getValueType>
    b628:	       lea 12(sp),sp
    b62c:	       tst.w d0
    b62e:	   /-- bne.s b636 <builtIn_pasteImage+0x2c>
    b630:	   |   moveq #1,d0
    b632:	/--|-- bra.w b6c6 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b636:	|  \-> moveq #24,d0
    b638:	|      add.l 20(sp),d0
    b63c:	|      move.l d0,-(sp)
    b63e:	|      jsr 11982 <trimStack>
    b644:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b646:	|      movea.l 20(sp),a0
    b64a:	|      move.l 24(a0),d0
    b64e:	|      move.l d0,-(sp)
    b650:	|      pea 1 <_start+0x1>
    b654:	|      moveq #12,d0
    b656:	|      add.l sp,d0
    b658:	|      move.l d0,-(sp)
    b65a:	|      jsr 10ffe <getValueType>
    b660:	|      lea 12(sp),sp
    b664:	|      tst.w d0
    b666:	|  /-- bne.s b66c <builtIn_pasteImage+0x62>
    b668:	|  |   moveq #1,d0
    b66a:	+--|-- bra.s b6c6 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b66c:	|  \-> moveq #24,d0
    b66e:	|      add.l 20(sp),d0
    b672:	|      move.l d0,-(sp)
    b674:	|      jsr 11982 <trimStack>
    b67a:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    b67c:	|      movea.l 20(sp),a0
    b680:	|      move.l 24(a0),d0
    b684:	|      move.l d0,-(sp)
    b686:	|      jsr 114d6 <getAnimationFromVar>
    b68c:	|      addq.l #4,sp
    b68e:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    b692:	|      moveq #24,d0
    b694:	|      add.l 20(sp),d0
    b698:	|      move.l d0,-(sp)
    b69a:	|      jsr 11982 <trimStack>
    b6a0:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    b6a2:	|      tst.l 8(sp)
    b6a6:	|  /-- bne.s b6ac <builtIn_pasteImage+0xa2>
    b6a8:	|  |   moveq #2,d0
    b6aa:	+--|-- bra.s b6c6 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    b6ac:	|  \-> move.l (sp),d1
    b6ae:	|      move.l 4(sp),d0
    b6b2:	|      move.l 8(sp),-(sp)
    b6b6:	|      move.l d1,-(sp)
    b6b8:	|      move.l d0,-(sp)
    b6ba:	|      jsr de2 <pasteCursor>
    b6c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b6c4:	|      moveq #2,d0
}
    b6c6:	\----> lea 12(sp),sp
    b6ca:	       rts

0000b6cc <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    b6cc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b6ce:	       movea.l 16(sp),a0
    b6d2:	       move.l 24(a0),d0
    b6d6:	       move.l d0,-(sp)
    b6d8:	       pea 1 <_start+0x1>
    b6dc:	       move.l sp,d0
    b6de:	       addq.l #8,d0
    b6e0:	       move.l d0,-(sp)
    b6e2:	       jsr 10ffe <getValueType>
    b6e8:	       lea 12(sp),sp
    b6ec:	       tst.w d0
    b6ee:	   /-- bne.s b6f6 <builtIn_setSceneDimensions+0x2a>
    b6f0:	   |   moveq #1,d0
    b6f2:	/--|-- bra.w b77e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b6f6:	|  \-> moveq #24,d0
    b6f8:	|      add.l 16(sp),d0
    b6fc:	|      move.l d0,-(sp)
    b6fe:	|      jsr 11982 <trimStack>
    b704:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b706:	|      movea.l 16(sp),a0
    b70a:	|      move.l 24(a0),d0
    b70e:	|      move.l d0,-(sp)
    b710:	|      pea 1 <_start+0x1>
    b714:	|      moveq #12,d0
    b716:	|      add.l sp,d0
    b718:	|      move.l d0,-(sp)
    b71a:	|      jsr 10ffe <getValueType>
    b720:	|      lea 12(sp),sp
    b724:	|      tst.w d0
    b726:	|  /-- bne.s b72c <builtIn_setSceneDimensions+0x60>
    b728:	|  |   moveq #1,d0
    b72a:	+--|-- bra.s b77e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b72c:	|  \-> moveq #24,d0
    b72e:	|      add.l 16(sp),d0
    b732:	|      move.l d0,-(sp)
    b734:	|      jsr 11982 <trimStack>
    b73a:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    b73c:	|      move.l (sp),d1
    b73e:	|      move.l 4(sp),d0
    b742:	|      move.l d1,-(sp)
    b744:	|      move.l d0,-(sp)
    b746:	|      jsr 9d12 <resizeBackdrop>
    b74c:	|      addq.l #8,sp
    b74e:	|      tst.w d0
    b750:	|  /-- beq.s b76e <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    b752:	|  |   move.l (sp),d1
    b754:	|  |   move.l 4(sp),d0
    b758:	|  |   move.l d1,-(sp)
    b75a:	|  |   move.l d0,-(sp)
    b75c:	|  |   clr.l -(sp)
    b75e:	|  |   clr.l -(sp)
    b760:	|  |   jsr 9b20 <blankScreen>
    b766:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    b76a:	|  |   moveq #2,d0
    b76c:	+--|-- bra.s b77e <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    b76e:	|  \-> pea 150bd <custom.c.9a493ead+0x90d>
    b774:	|      jsr 13046 <KPrintF>
    b77a:	|      addq.l #4,sp
	return BR_ERROR;
    b77c:	|      moveq #1,d0
}
    b77e:	\----> addq.l #8,sp
    b780:	       rts

0000b782 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    b782:	          move.l d3,-(sp)
    b784:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b786:	          movea.l 16(sp),a0
    b78a:	          move.l 24(a0),d0
    b78e:	          move.l d0,-(sp)
    b790:	          pea 1 <_start+0x1>
    b794:	          pea 16896 <cameraY>
    b79a:	          jsr 10ffe <getValueType>
    b7a0:	          lea 12(sp),sp
    b7a4:	          tst.w d0
    b7a6:	      /-- bne.s b7ae <builtIn_aimCamera+0x2c>
    b7a8:	      |   moveq #1,d0
    b7aa:	/-----|-- bra.w ba30 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b7ae:	|     \-> moveq #24,d0
    b7b0:	|         add.l 16(sp),d0
    b7b4:	|         move.l d0,-(sp)
    b7b6:	|         jsr 11982 <trimStack>
    b7bc:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b7be:	|         movea.l 16(sp),a0
    b7c2:	|         move.l 24(a0),d0
    b7c6:	|         move.l d0,-(sp)
    b7c8:	|         pea 1 <_start+0x1>
    b7cc:	|         pea 16892 <cameraX>
    b7d2:	|         jsr 10ffe <getValueType>
    b7d8:	|         lea 12(sp),sp
    b7dc:	|         tst.w d0
    b7de:	|     /-- bne.s b7e6 <builtIn_aimCamera+0x64>
    b7e0:	|     |   moveq #1,d0
    b7e2:	+-----|-- bra.w ba30 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b7e6:	|     \-> moveq #24,d0
    b7e8:	|         add.l 16(sp),d0
    b7ec:	|         move.l d0,-(sp)
    b7ee:	|         jsr 11982 <trimStack>
    b7f4:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    b7f6:	|         move.l 16892 <cameraX>,d0
    b7fc:	|         move.l d0,-(sp)
    b7fe:	|         jsr 132fe <__floatsisf>
    b804:	|         addq.l #4,sp
    b806:	|         move.l d0,d2
    b808:	|         move.l 166dc <winWidth>,d0
    b80e:	|         lsr.l #1,d0
    b810:	|         move.l d0,-(sp)
    b812:	|         jsr 13326 <__floatunsisf>
    b818:	|         addq.l #4,sp
    b81a:	|         move.l d0,d1
    b81c:	|         move.l 16142 <cameraZoom>,d0
    b822:	|         move.l d0,-(sp)
    b824:	|         move.l d1,-(sp)
    b826:	|         jsr 131aa <__divsf3>
    b82c:	|         addq.l #8,sp
    b82e:	|         move.l d0,-(sp)
    b830:	|         move.l d2,-(sp)
    b832:	|         jsr 135f2 <__subsf3>
    b838:	|         addq.l #8,sp
    b83a:	|         move.l d0,-(sp)
    b83c:	|         jsr 13296 <__fixsfsi>
    b842:	|         addq.l #4,sp
    b844:	|         move.l d0,16892 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    b84a:	|         move.l 16896 <cameraY>,d0
    b850:	|         move.l d0,-(sp)
    b852:	|         jsr 132fe <__floatsisf>
    b858:	|         addq.l #4,sp
    b85a:	|         move.l d0,d2
    b85c:	|         move.l 166e0 <winHeight>,d0
    b862:	|         lsr.l #1,d0
    b864:	|         move.l d0,-(sp)
    b866:	|         jsr 13326 <__floatunsisf>
    b86c:	|         addq.l #4,sp
    b86e:	|         move.l d0,d1
    b870:	|         move.l 16142 <cameraZoom>,d0
    b876:	|         move.l d0,-(sp)
    b878:	|         move.l d1,-(sp)
    b87a:	|         jsr 131aa <__divsf3>
    b880:	|         addq.l #8,sp
    b882:	|         move.l d0,-(sp)
    b884:	|         move.l d2,-(sp)
    b886:	|         jsr 135f2 <__subsf3>
    b88c:	|         addq.l #8,sp
    b88e:	|         move.l d0,-(sp)
    b890:	|         jsr 13296 <__fixsfsi>
    b896:	|         addq.l #4,sp
    b898:	|         move.l d0,16896 <cameraY>

	if (cameraX < 0) cameraX = 0;
    b89e:	|         move.l 16892 <cameraX>,d0
    b8a4:	|     /-- bpl.s b8b0 <builtIn_aimCamera+0x12e>
    b8a6:	|     |   clr.l 16892 <cameraX>
    b8ac:	|  /--|-- bra.w b966 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b8b0:	|  |  \-> move.l 16892 <cameraX>,d0
    b8b6:	|  |      move.l d0,-(sp)
    b8b8:	|  |      jsr 132fe <__floatsisf>
    b8be:	|  |      addq.l #4,sp
    b8c0:	|  |      move.l d0,d2
    b8c2:	|  |      move.l 16874 <sceneWidth>,d0
    b8c8:	|  |      move.l d0,-(sp)
    b8ca:	|  |      jsr 13326 <__floatunsisf>
    b8d0:	|  |      addq.l #4,sp
    b8d2:	|  |      move.l d0,d3
    b8d4:	|  |      move.l 166dc <winWidth>,d0
    b8da:	|  |      move.l d0,-(sp)
    b8dc:	|  |      jsr 13326 <__floatunsisf>
    b8e2:	|  |      addq.l #4,sp
    b8e4:	|  |      move.l d0,d1
    b8e6:	|  |      move.l 16142 <cameraZoom>,d0
    b8ec:	|  |      move.l d0,-(sp)
    b8ee:	|  |      move.l d1,-(sp)
    b8f0:	|  |      jsr 131aa <__divsf3>
    b8f6:	|  |      addq.l #8,sp
    b8f8:	|  |      move.l d0,-(sp)
    b8fa:	|  |      move.l d3,-(sp)
    b8fc:	|  |      jsr 135f2 <__subsf3>
    b902:	|  |      addq.l #8,sp
    b904:	|  |      move.l d0,-(sp)
    b906:	|  |      move.l d2,-(sp)
    b908:	|  |      jsr 1346a <__gtsf2>
    b90e:	|  |      addq.l #8,sp
    b910:	|  |      tst.l d0
    b912:	|  +----- ble.s b966 <builtIn_aimCamera+0x1e4>
    b914:	|  |      move.l 16874 <sceneWidth>,d0
    b91a:	|  |      move.l d0,-(sp)
    b91c:	|  |      jsr 13326 <__floatunsisf>
    b922:	|  |      addq.l #4,sp
    b924:	|  |      move.l d0,d2
    b926:	|  |      move.l 166dc <winWidth>,d0
    b92c:	|  |      move.l d0,-(sp)
    b92e:	|  |      jsr 13326 <__floatunsisf>
    b934:	|  |      addq.l #4,sp
    b936:	|  |      move.l d0,d1
    b938:	|  |      move.l 16142 <cameraZoom>,d0
    b93e:	|  |      move.l d0,-(sp)
    b940:	|  |      move.l d1,-(sp)
    b942:	|  |      jsr 131aa <__divsf3>
    b948:	|  |      addq.l #8,sp
    b94a:	|  |      move.l d0,-(sp)
    b94c:	|  |      move.l d2,-(sp)
    b94e:	|  |      jsr 135f2 <__subsf3>
    b954:	|  |      addq.l #8,sp
    b956:	|  |      move.l d0,-(sp)
    b958:	|  |      jsr 13296 <__fixsfsi>
    b95e:	|  |      addq.l #4,sp
    b960:	|  |      move.l d0,16892 <cameraX>
	if (cameraY < 0) cameraY = 0;
    b966:	|  \----> move.l 16896 <cameraY>,d0
    b96c:	|     /-- bpl.s b978 <builtIn_aimCamera+0x1f6>
    b96e:	|     |   clr.l 16896 <cameraY>
    b974:	|  /--|-- bra.w ba2e <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b978:	|  |  \-> move.l 16896 <cameraY>,d0
    b97e:	|  |      move.l d0,-(sp)
    b980:	|  |      jsr 132fe <__floatsisf>
    b986:	|  |      addq.l #4,sp
    b988:	|  |      move.l d0,d2
    b98a:	|  |      move.l 16878 <sceneHeight>,d0
    b990:	|  |      move.l d0,-(sp)
    b992:	|  |      jsr 13326 <__floatunsisf>
    b998:	|  |      addq.l #4,sp
    b99a:	|  |      move.l d0,d3
    b99c:	|  |      move.l 166e0 <winHeight>,d0
    b9a2:	|  |      move.l d0,-(sp)
    b9a4:	|  |      jsr 13326 <__floatunsisf>
    b9aa:	|  |      addq.l #4,sp
    b9ac:	|  |      move.l d0,d1
    b9ae:	|  |      move.l 16142 <cameraZoom>,d0
    b9b4:	|  |      move.l d0,-(sp)
    b9b6:	|  |      move.l d1,-(sp)
    b9b8:	|  |      jsr 131aa <__divsf3>
    b9be:	|  |      addq.l #8,sp
    b9c0:	|  |      move.l d0,-(sp)
    b9c2:	|  |      move.l d3,-(sp)
    b9c4:	|  |      jsr 135f2 <__subsf3>
    b9ca:	|  |      addq.l #8,sp
    b9cc:	|  |      move.l d0,-(sp)
    b9ce:	|  |      move.l d2,-(sp)
    b9d0:	|  |      jsr 1346a <__gtsf2>
    b9d6:	|  |      addq.l #8,sp
    b9d8:	|  |      tst.l d0
    b9da:	|  +----- ble.s ba2e <builtIn_aimCamera+0x2ac>
    b9dc:	|  |      move.l 16878 <sceneHeight>,d0
    b9e2:	|  |      move.l d0,-(sp)
    b9e4:	|  |      jsr 13326 <__floatunsisf>
    b9ea:	|  |      addq.l #4,sp
    b9ec:	|  |      move.l d0,d2
    b9ee:	|  |      move.l 166e0 <winHeight>,d0
    b9f4:	|  |      move.l d0,-(sp)
    b9f6:	|  |      jsr 13326 <__floatunsisf>
    b9fc:	|  |      addq.l #4,sp
    b9fe:	|  |      move.l d0,d1
    ba00:	|  |      move.l 16142 <cameraZoom>,d0
    ba06:	|  |      move.l d0,-(sp)
    ba08:	|  |      move.l d1,-(sp)
    ba0a:	|  |      jsr 131aa <__divsf3>
    ba10:	|  |      addq.l #8,sp
    ba12:	|  |      move.l d0,-(sp)
    ba14:	|  |      move.l d2,-(sp)
    ba16:	|  |      jsr 135f2 <__subsf3>
    ba1c:	|  |      addq.l #8,sp
    ba1e:	|  |      move.l d0,-(sp)
    ba20:	|  |      jsr 13296 <__fixsfsi>
    ba26:	|  |      addq.l #4,sp
    ba28:	|  |      move.l d0,16896 <cameraY>
	return BR_CONTINUE;
    ba2e:	|  \----> moveq #2,d0
}
    ba30:	\-------> move.l (sp)+,d2
    ba32:	          move.l (sp)+,d3
    ba34:	          rts

0000ba36 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ba36:	       subq.l #4,sp
    ba38:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ba3a:	       movea.l 16(sp),a0
    ba3e:	       move.l 24(a0),d0
    ba42:	       move.l d0,-(sp)
    ba44:	       pea 1 <_start+0x1>
    ba48:	       moveq #12,d0
    ba4a:	       add.l sp,d0
    ba4c:	       move.l d0,-(sp)
    ba4e:	       jsr 10ffe <getValueType>
    ba54:	       lea 12(sp),sp
    ba58:	       tst.w d0
    ba5a:	   /-- bne.s ba62 <builtIn_zoomCamera+0x2c>
    ba5c:	   |   moveq #1,d0
    ba5e:	/--|-- bra.w bc5c <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ba62:	|  \-> moveq #24,d0
    ba64:	|      add.l 16(sp),d0
    ba68:	|      move.l d0,-(sp)
    ba6a:	|      jsr 11982 <trimStack>
    ba70:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ba72:	|      move.l 16744 <input+0xa>,d0
    ba78:	|      move.l d0,-(sp)
    ba7a:	|      jsr 132fe <__floatsisf>
    ba80:	|      addq.l #4,sp
    ba82:	|      move.l d0,d1
    ba84:	|      move.l 16142 <cameraZoom>,d0
    ba8a:	|      move.l d0,-(sp)
    ba8c:	|      move.l d1,-(sp)
    ba8e:	|      jsr 133b0 <__mulsf3>
    ba94:	|      addq.l #8,sp
    ba96:	|      move.l d0,-(sp)
    ba98:	|      jsr 13296 <__fixsfsi>
    ba9e:	|      addq.l #4,sp
    baa0:	|      move.l d0,16744 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    baa6:	|      move.l 16748 <input+0xe>,d0
    baac:	|      move.l d0,-(sp)
    baae:	|      jsr 132fe <__floatsisf>
    bab4:	|      addq.l #4,sp
    bab6:	|      move.l d0,d1
    bab8:	|      move.l 16142 <cameraZoom>,d0
    babe:	|      move.l d0,-(sp)
    bac0:	|      move.l d1,-(sp)
    bac2:	|      jsr 133b0 <__mulsf3>
    bac8:	|      addq.l #8,sp
    baca:	|      move.l d0,-(sp)
    bacc:	|      jsr 13296 <__fixsfsi>
    bad2:	|      addq.l #4,sp
    bad4:	|      move.l d0,16748 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    bada:	|      move.l 4(sp),d0
    bade:	|      move.l d0,-(sp)
    bae0:	|      jsr 132fe <__floatsisf>
    bae6:	|      addq.l #4,sp
    bae8:	|      move.l #1008981770,-(sp)
    baee:	|      move.l d0,-(sp)
    baf0:	|      jsr 133b0 <__mulsf3>
    baf6:	|      addq.l #8,sp
    baf8:	|      move.l d0,16142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    bafe:	|      move.l 166dc <winWidth>,d0
    bb04:	|      move.l d0,-(sp)
    bb06:	|      jsr 13326 <__floatunsisf>
    bb0c:	|      addq.l #4,sp
    bb0e:	|      move.l d0,d1
    bb10:	|      move.l 16142 <cameraZoom>,d0
    bb16:	|      move.l d0,-(sp)
    bb18:	|      move.l d1,-(sp)
    bb1a:	|      jsr 131aa <__divsf3>
    bb20:	|      addq.l #8,sp
    bb22:	|      move.l d0,d2
    bb24:	|      move.l 16874 <sceneWidth>,d0
    bb2a:	|      move.l d0,-(sp)
    bb2c:	|      jsr 13326 <__floatunsisf>
    bb32:	|      addq.l #4,sp
    bb34:	|      move.l d0,-(sp)
    bb36:	|      move.l d2,-(sp)
    bb38:	|      jsr 1346a <__gtsf2>
    bb3e:	|      addq.l #8,sp
    bb40:	|      tst.l d0
    bb42:	|  /-- ble.s bb78 <builtIn_zoomCamera+0x142>
    bb44:	|  |   move.l 166dc <winWidth>,d0
    bb4a:	|  |   move.l d0,-(sp)
    bb4c:	|  |   jsr 13326 <__floatunsisf>
    bb52:	|  |   addq.l #4,sp
    bb54:	|  |   move.l d0,d2
    bb56:	|  |   move.l 16874 <sceneWidth>,d0
    bb5c:	|  |   move.l d0,-(sp)
    bb5e:	|  |   jsr 13326 <__floatunsisf>
    bb64:	|  |   addq.l #4,sp
    bb66:	|  |   move.l d0,-(sp)
    bb68:	|  |   move.l d2,-(sp)
    bb6a:	|  |   jsr 131aa <__divsf3>
    bb70:	|  |   addq.l #8,sp
    bb72:	|  |   move.l d0,16142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    bb78:	|  \-> move.l 166e0 <winHeight>,d0
    bb7e:	|      move.l d0,-(sp)
    bb80:	|      jsr 13326 <__floatunsisf>
    bb86:	|      addq.l #4,sp
    bb88:	|      move.l d0,d1
    bb8a:	|      move.l 16142 <cameraZoom>,d0
    bb90:	|      move.l d0,-(sp)
    bb92:	|      move.l d1,-(sp)
    bb94:	|      jsr 131aa <__divsf3>
    bb9a:	|      addq.l #8,sp
    bb9c:	|      move.l d0,d2
    bb9e:	|      move.l 16878 <sceneHeight>,d0
    bba4:	|      move.l d0,-(sp)
    bba6:	|      jsr 13326 <__floatunsisf>
    bbac:	|      addq.l #4,sp
    bbae:	|      move.l d0,-(sp)
    bbb0:	|      move.l d2,-(sp)
    bbb2:	|      jsr 1346a <__gtsf2>
    bbb8:	|      addq.l #8,sp
    bbba:	|      tst.l d0
    bbbc:	|  /-- ble.s bbf2 <builtIn_zoomCamera+0x1bc>
    bbbe:	|  |   move.l 166e0 <winHeight>,d0
    bbc4:	|  |   move.l d0,-(sp)
    bbc6:	|  |   jsr 13326 <__floatunsisf>
    bbcc:	|  |   addq.l #4,sp
    bbce:	|  |   move.l d0,d2
    bbd0:	|  |   move.l 16878 <sceneHeight>,d0
    bbd6:	|  |   move.l d0,-(sp)
    bbd8:	|  |   jsr 13326 <__floatunsisf>
    bbde:	|  |   addq.l #4,sp
    bbe0:	|  |   move.l d0,-(sp)
    bbe2:	|  |   move.l d2,-(sp)
    bbe4:	|  |   jsr 131aa <__divsf3>
    bbea:	|  |   addq.l #8,sp
    bbec:	|  |   move.l d0,16142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    bbf2:	|  \-> move.l 16744 <input+0xa>,d0
    bbf8:	|      move.l d0,-(sp)
    bbfa:	|      jsr 132fe <__floatsisf>
    bc00:	|      addq.l #4,sp
    bc02:	|      move.l d0,d1
    bc04:	|      move.l 16142 <cameraZoom>,d0
    bc0a:	|      move.l d0,-(sp)
    bc0c:	|      move.l d1,-(sp)
    bc0e:	|      jsr 131aa <__divsf3>
    bc14:	|      addq.l #8,sp
    bc16:	|      move.l d0,-(sp)
    bc18:	|      jsr 13296 <__fixsfsi>
    bc1e:	|      addq.l #4,sp
    bc20:	|      move.l d0,16744 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    bc26:	|      move.l 16748 <input+0xe>,d0
    bc2c:	|      move.l d0,-(sp)
    bc2e:	|      jsr 132fe <__floatsisf>
    bc34:	|      addq.l #4,sp
    bc36:	|      move.l d0,d1
    bc38:	|      move.l 16142 <cameraZoom>,d0
    bc3e:	|      move.l d0,-(sp)
    bc40:	|      move.l d1,-(sp)
    bc42:	|      jsr 131aa <__divsf3>
    bc48:	|      addq.l #8,sp
    bc4a:	|      move.l d0,-(sp)
    bc4c:	|      jsr 13296 <__fixsfsi>
    bc52:	|      addq.l #4,sp
    bc54:	|      move.l d0,16748 <input+0xe>

	return BR_CONTINUE;
    bc5a:	|      moveq #2,d0
}
    bc5c:	\----> move.l (sp)+,d2
    bc5e:	       addq.l #4,sp
    bc60:	       rts

0000bc62 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    bc62:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    bc64:	             tst.l 8(sp)
    bc68:	         /-- bne.s bc7c <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    bc6a:	         |   pea 150e2 <custom.c.9a493ead+0x932>
    bc70:	         |   jsr 13046 <KPrintF>
    bc76:	         |   addq.l #4,sp
		return BR_ERROR;
    bc78:	         |   moveq #1,d0
    bc7a:	/--------|-- bra.s bcdc <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    bc7c:	|        \-> jsr c58 <rand>
    bc82:	|            move.l d0,d1
    bc84:	|            move.l 8(sp),d0
    bc88:	|            move.l d0,-(sp)
    bc8a:	|            move.l d1,-(sp)
    bc8c:	|            jsr 13932 <__umodsi3>
    bc92:	|            addq.l #8,sp
    bc94:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    bc96:	|     /----- bra.s bcca <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    bc98:	|  /--|----> move.l (sp),d0
    bc9a:	|  |  |      cmp.l 8(sp),d0
    bc9e:	|  |  |  /-- bne.s bcba <builtIn_pickOne+0x58>
    bca0:	|  |  |  |   moveq #28,d0
    bca2:	|  |  |  |   add.l 12(sp),d0
    bca6:	|  |  |  |   movea.l 12(sp),a0
    bcaa:	|  |  |  |   move.l 24(a0),d1
    bcae:	|  |  |  |   move.l d0,-(sp)
    bcb0:	|  |  |  |   move.l d1,-(sp)
    bcb2:	|  |  |  |   jsr 114b8 <copyVariable>
    bcb8:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    bcba:	|  |  |  \-> moveq #24,d0
    bcbc:	|  |  |      add.l 12(sp),d0
    bcc0:	|  |  |      move.l d0,-(sp)
    bcc2:	|  |  |      jsr 11982 <trimStack>
    bcc8:	|  |  |      addq.l #4,sp
	while (numParams --) {
    bcca:	|  |  \----> move.l 8(sp),d0
    bcce:	|  |         move.l d0,d1
    bcd0:	|  |         subq.l #1,d1
    bcd2:	|  |         move.l d1,8(sp)
    bcd6:	|  |         tst.l d0
    bcd8:	|  \-------- bne.s bc98 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    bcda:	|            moveq #2,d0
}
    bcdc:	\----------> addq.l #4,sp
    bcde:	             rts

0000bce0 <builtIn_substring>:

builtIn(substring)
{
    bce0:	       lea -40(sp),sp
    bce4:	       move.l a6,-(sp)
    bce6:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bce8:	       movea.l 56(sp),a0
    bcec:	       move.l 24(a0),d0
    bcf0:	       move.l d0,-(sp)
    bcf2:	       pea 1 <_start+0x1>
    bcf6:	       lea 16(sp),a0
    bcfa:	       move.l a0,-(sp)
    bcfc:	       jsr 10ffe <getValueType>
    bd02:	       lea 12(sp),sp
    bd06:	       tst.w d0
    bd08:	   /-- bne.s bd10 <builtIn_substring+0x30>
    bd0a:	   |   moveq #1,d0
    bd0c:	/--|-- bra.w be88 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bd10:	|  \-> moveq #24,d0
    bd12:	|      add.l 56(sp),d0
    bd16:	|      move.l d0,-(sp)
    bd18:	|      jsr 11982 <trimStack>
    bd1e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bd20:	|      movea.l 56(sp),a0
    bd24:	|      move.l 24(a0),d0
    bd28:	|      move.l d0,-(sp)
    bd2a:	|      pea 1 <_start+0x1>
    bd2e:	|      lea 20(sp),a0
    bd32:	|      move.l a0,-(sp)
    bd34:	|      jsr 10ffe <getValueType>
    bd3a:	|      lea 12(sp),sp
    bd3e:	|      tst.w d0
    bd40:	|  /-- bne.s bd48 <builtIn_substring+0x68>
    bd42:	|  |   moveq #1,d0
    bd44:	+--|-- bra.w be88 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bd48:	|  \-> moveq #24,d0
    bd4a:	|      add.l 56(sp),d0
    bd4e:	|      move.l d0,-(sp)
    bd50:	|      jsr 11982 <trimStack>
    bd56:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    bd58:	|      movea.l 56(sp),a0
    bd5c:	|      move.l 24(a0),d0
    bd60:	|      move.l d0,-(sp)
    bd62:	|      jsr 115d4 <getTextFromAnyVar>
    bd68:	|      addq.l #4,sp
    bd6a:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    bd6e:	|      moveq #24,d0
    bd70:	|      add.l 56(sp),d0
    bd74:	|      move.l d0,-(sp)
    bd76:	|      jsr 11982 <trimStack>
    bd7c:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    bd7e:	|      move.l 44(sp),-(sp)
    bd82:	|      jsr 104ea <strlen>
    bd88:	|      addq.l #4,sp
    bd8a:	|      move.l d0,d1
    bd8c:	|      move.l 12(sp),d0
    bd90:	|      movea.l d0,a0
    bd92:	|      move.l 8(sp),d0
    bd96:	|      add.l a0,d0
    bd98:	|      cmp.l d1,d0
    bd9a:	|  /-- bls.s bdd0 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    bd9c:	|  |   move.l 44(sp),-(sp)
    bda0:	|  |   jsr 104ea <strlen>
    bda6:	|  |   addq.l #4,sp
    bda8:	|  |   move.l d0,d1
    bdaa:	|  |   move.l 12(sp),d0
    bdae:	|  |   sub.l d0,d1
    bdb0:	|  |   move.l d1,d0
    bdb2:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    bdb6:	|  |   move.l 44(sp),-(sp)
    bdba:	|  |   jsr 104ea <strlen>
    bdc0:	|  |   addq.l #4,sp
    bdc2:	|  |   move.l d0,d1
    bdc4:	|  |   move.l 12(sp),d0
    bdc8:	|  |   cmp.l d1,d0
    bdca:	|  +-- bls.s bdd0 <builtIn_substring+0xf0>
            start = 0;
    bdcc:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    bdd0:	|  \-> move.l 8(sp),d0
    bdd4:	|  /-- bpl.s bdda <builtIn_substring+0xfa>
        length = 0;
    bdd6:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    bdda:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    bde0:	|      move.l 12(sp),d1
    bde4:	|      move.l 8(sp),d0
    bde8:	|      move.l d1,d2
    bdea:	|      add.l d0,d2
    bdec:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    bdf0:	|      move.l 36(sp),d0
    bdf4:	|      sub.l 40(sp),d0
    bdf8:	|      addq.l #1,d0
    bdfa:	|      move.l d0,32(sp)
    bdfe:	|      clr.l 28(sp)
    be02:	|      move.l 16784 <SysBase>,d0
    be08:	|      movea.l d0,a6
    be0a:	|      move.l 32(sp),d0
    be0e:	|      move.l 28(sp),d1
    be12:	|      jsr -684(a6)
    be16:	|      move.l d0,24(sp)
    be1a:	|      move.l 24(sp),d0
    be1e:	|      move.l d0,20(sp)
    if (!newString) {
    be22:	|  /-- bne.s be28 <builtIn_substring+0x148>
        return BR_ERROR;
    be24:	|  |   moveq #1,d0
    be26:	+--|-- bra.s be88 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    be28:	|  \-> move.l 36(sp),d0
    be2c:	|      sub.l 40(sp),d0
    be30:	|      move.l d0,d1
    be32:	|      move.l 40(sp),d0
    be36:	|      add.l 44(sp),d0
    be3a:	|      move.l d1,-(sp)
    be3c:	|      move.l d0,-(sp)
    be3e:	|      move.l 28(sp),-(sp)
    be42:	|      jsr 12ffa <memcpy>
    be48:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    be4c:	|      move.l 36(sp),d0
    be50:	|      sub.l 40(sp),d0
    be54:	|      movea.l 20(sp),a0
    be58:	|      adda.l d0,a0
    be5a:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    be5c:	|      moveq #28,d0
    be5e:	|      add.l 56(sp),d0
    be62:	|      move.l 20(sp),-(sp)
    be66:	|      move.l d0,-(sp)
    be68:	|      jsr 11220 <makeTextVar>
    be6e:	|      addq.l #8,sp
    FreeVec(newString);
    be70:	|      move.l 20(sp),16(sp)
    be76:	|      move.l 16784 <SysBase>,d0
    be7c:	|      movea.l d0,a6
    be7e:	|      movea.l 16(sp),a1
    be82:	|      jsr -690(a6)
    return BR_CONTINUE;
    be86:	|      moveq #2,d0
}
    be88:	\----> move.l (sp)+,d2
    be8a:	       movea.l (sp)+,a6
    be8c:	       lea 40(sp),sp
    be90:	       rts

0000be92 <builtIn_stringLength>:

builtIn(stringLength)
{
    be92:	subq.l #8,sp
    be94:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    be96:	movea.l 20(sp),a0
    be9a:	move.l 24(a0),d0
    be9e:	move.l d0,-(sp)
    bea0:	jsr 115d4 <getTextFromAnyVar>
    bea6:	addq.l #4,sp
    bea8:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    beac:	moveq #24,d0
    beae:	add.l 20(sp),d0
    beb2:	move.l d0,-(sp)
    beb4:	jsr 11982 <trimStack>
    beba:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    bebc:	move.l 8(sp),-(sp)
    bec0:	jsr 104ea <strlen>
    bec6:	addq.l #4,sp
    bec8:	move.l d0,d1
    beca:	moveq #28,d0
    becc:	add.l 20(sp),d0
    bed0:	move.l d1,-(sp)
    bed2:	pea 1 <_start+0x1>
    bed6:	move.l d0,-(sp)
    bed8:	jsr 118f0 <setVariable>
    bede:	lea 12(sp),sp
	FreeVec(newText);
    bee2:	move.l 8(sp),4(sp)
    bee8:	move.l 16784 <SysBase>,d0
    beee:	movea.l d0,a6
    bef0:	movea.l 4(sp),a1
    bef4:	jsr -690(a6)
	return BR_CONTINUE;
    bef8:	moveq #2,d0
}
    befa:	movea.l (sp)+,a6
    befc:	addq.l #8,sp
    befe:	rts

0000bf00 <builtIn_newStack>:

builtIn(newStack)
{
    bf00:	             lea -12(sp),sp
    bf04:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    bf06:	             moveq #28,d0
    bf08:	             add.l 24(sp),d0
    bf0c:	             move.l d0,-(sp)
    bf0e:	             jsr 1124c <unlinkVar>
    bf14:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    bf16:	             movea.l 24(sp),a0
    bf1a:	             moveq #6,d0
    bf1c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    bf20:	             moveq #12,d1
    bf22:	             move.l d1,12(sp)
    bf26:	             clr.l 8(sp)
    bf2a:	             move.l 16784 <SysBase>,d0
    bf30:	             movea.l d0,a6
    bf32:	             move.l 12(sp),d0
    bf36:	             move.l 8(sp),d1
    bf3a:	             jsr -684(a6)
    bf3e:	             move.l d0,4(sp)
    bf42:	             move.l 4(sp),d0
    bf46:	             movea.l 24(sp),a0
    bf4a:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    bf4e:	             movea.l 24(sp),a0
    bf52:	             move.l 32(a0),d0
    bf56:	         /-- bne.s bf5e <builtIn_newStack+0x5e>
    bf58:	         |   moveq #1,d0
    bf5a:	/--------|-- bra.w bff0 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    bf5e:	|        \-> movea.l 24(sp),a0
    bf62:	|            movea.l 32(a0),a0
    bf66:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    bf68:	|            movea.l 24(sp),a0
    bf6c:	|            movea.l 32(a0),a0
    bf70:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    bf74:	|            movea.l 24(sp),a0
    bf78:	|            movea.l 32(a0),a0
    bf7c:	|            moveq #1,d0
    bf7e:	|            move.l d0,8(a0)
    
    while (numParams--) {
    bf82:	|     /----- bra.s bfde <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    bf84:	|  /--|----> movea.l 24(sp),a0
    bf88:	|  |  |      move.l 32(a0),d0
    bf8c:	|  |  |      move.l d0,d1
    bf8e:	|  |  |      movea.l 24(sp),a0
    bf92:	|  |  |      move.l 24(a0),d0
    bf96:	|  |  |      move.l d1,-(sp)
    bf98:	|  |  |      move.l d0,-(sp)
    bf9a:	|  |  |      jsr 1083a <addVarToStack>
    bfa0:	|  |  |      addq.l #8,sp
    bfa2:	|  |  |      tst.w d0
    bfa4:	|  |  |  /-- bne.s bfaa <builtIn_newStack+0xaa>
    bfa6:	|  |  |  |   moveq #1,d0
    bfa8:	+--|--|--|-- bra.s bff0 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    bfaa:	|  |  |  \-> movea.l 24(sp),a0
    bfae:	|  |  |      movea.l 32(a0),a0
    bfb2:	|  |  |      move.l 4(a0),d0
    bfb6:	|  |  |  /-- bne.s bfce <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    bfb8:	|  |  |  |   movea.l 24(sp),a0
    bfbc:	|  |  |  |   movea.l 32(a0),a1
    bfc0:	|  |  |  |   movea.l 24(sp),a0
    bfc4:	|  |  |  |   movea.l 32(a0),a0
    bfc8:	|  |  |  |   move.l (a1),d0
    bfca:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    bfce:	|  |  |  \-> moveq #24,d0
    bfd0:	|  |  |      add.l 24(sp),d0
    bfd4:	|  |  |      move.l d0,-(sp)
    bfd6:	|  |  |      jsr 11982 <trimStack>
    bfdc:	|  |  |      addq.l #4,sp
    while (numParams--) {
    bfde:	|  |  \----> move.l 20(sp),d0
    bfe2:	|  |         move.l d0,d1
    bfe4:	|  |         subq.l #1,d1
    bfe6:	|  |         move.l d1,20(sp)
    bfea:	|  |         tst.l d0
    bfec:	|  \-------- bne.s bf84 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    bfee:	|            moveq #2,d0
}
    bff0:	\----------> movea.l (sp)+,a6
    bff2:	             lea 12(sp),sp
    bff6:	             rts

0000bff8 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    bff8:	          movea.l 8(sp),a0
    bffc:	          movea.l 24(a0),a0
    c000:	          move.l (a0),d0
    c002:	          moveq #6,d1
    c004:	          cmp.l d0,d1
    c006:	      /-- beq.s c022 <builtIn_stackSize+0x2a>
    c008:	      |   moveq #10,d1
    c00a:	      |   cmp.l d0,d1
    c00c:	   /--|-- beq.s c066 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    c00e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    c010:	   |  |   pea 15115 <custom.c.9a493ead+0x965>
    c016:	   |  |   jsr 13046 <KPrintF>
    c01c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    c01e:	   |  |   moveq #1,d0
    c020:	/--|--|-- bra.s c0a0 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    c022:	|  |  \-> movea.l 8(sp),a0
    c026:	|  |      movea.l 24(a0),a0
    c02a:	|  |      move.l 4(a0),d0
    c02e:	|  |      move.l d0,-(sp)
    c030:	|  |      jsr 1195e <stackSize>
    c036:	|  |      addq.l #4,sp
    c038:	|  |      move.l d0,d1
    c03a:	|  |      moveq #28,d0
    c03c:	|  |      add.l 8(sp),d0
    c040:	|  |      move.l d1,-(sp)
    c042:	|  |      pea 1 <_start+0x1>
    c046:	|  |      move.l d0,-(sp)
    c048:	|  |      jsr 118f0 <setVariable>
    c04e:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    c052:	|  |      moveq #24,d0
    c054:	|  |      add.l 8(sp),d0
    c058:	|  |      move.l d0,-(sp)
    c05a:	|  |      jsr 11982 <trimStack>
    c060:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    c062:	|  |      moveq #2,d0
    c064:	+--|----- bra.s c0a0 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    c066:	|  \----> movea.l 8(sp),a0
    c06a:	|         movea.l 24(a0),a0
    c06e:	|         movea.l 4(a0),a0
    c072:	|         move.l 4(a0),d1
    c076:	|         moveq #28,d0
    c078:	|         add.l 8(sp),d0
    c07c:	|         move.l d1,-(sp)
    c07e:	|         pea 1 <_start+0x1>
    c082:	|         move.l d0,-(sp)
    c084:	|         jsr 118f0 <setVariable>
    c08a:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    c08e:	|         moveq #24,d0
    c090:	|         add.l 8(sp),d0
    c094:	|         move.l d0,-(sp)
    c096:	|         jsr 11982 <trimStack>
    c09c:	|         addq.l #4,sp
			return BR_CONTINUE;
    c09e:	|         moveq #2,d0
}
    c0a0:	\-------> rts

0000c0a2 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c0a2:	       movea.l 8(sp),a0
    c0a6:	       movea.l 24(a0),a0
    c0aa:	       move.l (a0),d0
    c0ac:	       moveq #6,d1
    c0ae:	       cmp.l d0,d1
    c0b0:	   /-- beq.s c0c4 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    c0b2:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c0b8:	   |   jsr 13046 <KPrintF>
    c0be:	   |   addq.l #4,sp
		return BR_ERROR;
    c0c0:	   |   moveq #1,d0
    c0c2:	/--|-- bra.s c0f8 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    c0c4:	|  \-> moveq #28,d0
    c0c6:	|      add.l 8(sp),d0
    c0ca:	|      movea.l 8(sp),a0
    c0ce:	|      move.l 24(a0),d1
    c0d2:	|      move.l d0,-(sp)
    c0d4:	|      move.l d1,-(sp)
    c0d6:	|      jsr 10b04 <copyStack>
    c0dc:	|      addq.l #8,sp
    c0de:	|      tst.w d0
    c0e0:	|  /-- bne.s c0e6 <builtIn_copyStack+0x44>
    c0e2:	|  |   moveq #1,d0
    c0e4:	+--|-- bra.s c0f8 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    c0e6:	|  \-> moveq #24,d0
    c0e8:	|      add.l 8(sp),d0
    c0ec:	|      move.l d0,-(sp)
    c0ee:	|      jsr 11982 <trimStack>
    c0f4:	|      addq.l #4,sp
	return BR_CONTINUE;
    c0f6:	|      moveq #2,d0
}
    c0f8:	\----> rts

0000c0fa <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c0fa:	       movea.l 8(sp),a0
    c0fe:	       movea.l 24(a0),a0
    c102:	       movea.l 8(a0),a0
    c106:	       move.l (a0),d0
    c108:	       moveq #6,d1
    c10a:	       cmp.l d0,d1
    c10c:	   /-- beq.s c122 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    c10e:	   |   pea 15157 <custom.c.9a493ead+0x9a7>
    c114:	   |   jsr 13046 <KPrintF>
    c11a:	   |   addq.l #4,sp
		return BR_ERROR;
    c11c:	   |   moveq #1,d0
    c11e:	/--|-- bra.w c1b0 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    c122:	|  \-> movea.l 8(sp),a0
    c126:	|      movea.l 24(a0),a0
    c12a:	|      movea.l 8(a0),a0
    c12e:	|      move.l 4(a0),d0
    c132:	|      move.l d0,d1
    c134:	|      movea.l 8(sp),a0
    c138:	|      move.l 24(a0),d0
    c13c:	|      move.l d1,-(sp)
    c13e:	|      move.l d0,-(sp)
    c140:	|      jsr 1083a <addVarToStack>
    c146:	|      addq.l #8,sp
    c148:	|      tst.w d0
    c14a:	|  /-- bne.s c150 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    c14c:	|  |   moveq #1,d0
    c14e:	+--|-- bra.s c1b0 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    c150:	|  \-> movea.l 8(sp),a0
    c154:	|      movea.l 24(a0),a0
    c158:	|      movea.l 8(a0),a0
    c15c:	|      movea.l 4(a0),a0
    c160:	|      movea.l (a0),a0
    c162:	|      move.l 8(a0),d0
    c166:	|  /-- bne.s c18e <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c168:	|  |   movea.l 8(sp),a0
    c16c:	|  |   movea.l 24(a0),a0
    c170:	|  |   movea.l 8(a0),a0
    c174:	|  |   movea.l 4(a0),a1
    c178:	|  |   movea.l 8(sp),a0
    c17c:	|  |   movea.l 24(a0),a0
    c180:	|  |   movea.l 8(a0),a0
    c184:	|  |   movea.l 4(a0),a0
    c188:	|  |   move.l (a1),d0
    c18a:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    c18e:	|  \-> moveq #24,d0
    c190:	|      add.l 8(sp),d0
    c194:	|      move.l d0,-(sp)
    c196:	|      jsr 11982 <trimStack>
    c19c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c19e:	|      moveq #24,d0
    c1a0:	|      add.l 8(sp),d0
    c1a4:	|      move.l d0,-(sp)
    c1a6:	|      jsr 11982 <trimStack>
    c1ac:	|      addq.l #4,sp
	return BR_CONTINUE;
    c1ae:	|      moveq #2,d0
}
    c1b0:	\----> rts

0000c1b2 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c1b2:	             movea.l 8(sp),a0
    c1b6:	             movea.l 24(a0),a0
    c1ba:	             movea.l 8(a0),a0
    c1be:	             move.l (a0),d0
    c1c0:	             moveq #6,d1
    c1c2:	             cmp.l d0,d1
    c1c4:	         /-- beq.s c1da <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    c1c6:	         |   pea 15157 <custom.c.9a493ead+0x9a7>
    c1cc:	         |   jsr 13046 <KPrintF>
    c1d2:	         |   addq.l #4,sp
		return BR_ERROR;
    c1d4:	         |   moveq #1,d0
    c1d6:	/--------|-- bra.w c2c8 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    c1da:	|        \-> movea.l 8(sp),a0
    c1de:	|            movea.l 24(a0),a0
    c1e2:	|            movea.l 8(a0),a0
    c1e6:	|            movea.l 4(a0),a0
    c1ea:	|            move.l (a0),d0
    c1ec:	|     /----- bne.s c246 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    c1ee:	|     |      movea.l 8(sp),a0
    c1f2:	|     |      movea.l 24(a0),a0
    c1f6:	|     |      movea.l 8(a0),a0
    c1fa:	|     |      move.l 4(a0),d0
    c1fe:	|     |      move.l d0,d1
    c200:	|     |      movea.l 8(sp),a0
    c204:	|     |      move.l 24(a0),d0
    c208:	|     |      move.l d1,-(sp)
    c20a:	|     |      move.l d0,-(sp)
    c20c:	|     |      jsr 1083a <addVarToStack>
    c212:	|     |      addq.l #8,sp
    c214:	|     |      tst.w d0
    c216:	|     |  /-- bne.s c21e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    c218:	|     |  |   moveq #1,d0
    c21a:	+-----|--|-- bra.w c2c8 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c21e:	|     |  \-> movea.l 8(sp),a0
    c222:	|     |      movea.l 24(a0),a0
    c226:	|     |      movea.l 8(a0),a0
    c22a:	|     |      movea.l 4(a0),a1
    c22e:	|     |      movea.l 8(sp),a0
    c232:	|     |      movea.l 24(a0),a0
    c236:	|     |      movea.l 8(a0),a0
    c23a:	|     |      movea.l 4(a0),a0
    c23e:	|     |      move.l (a1),d0
    c240:	|     |      move.l d0,4(a0)
    c244:	|  /--|----- bra.s c2a6 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    c246:	|  |  \----> movea.l 8(sp),a0
    c24a:	|  |         movea.l 24(a0),a0
    c24e:	|  |         movea.l 8(a0),a0
    c252:	|  |         movea.l 4(a0),a0
    c256:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    c25a:	|  |         move.l d0,d1
    c25c:	|  |         addq.l #8,d1
    c25e:	|  |         movea.l 8(sp),a0
    c262:	|  |         move.l 24(a0),d0
    c266:	|  |         move.l d1,-(sp)
    c268:	|  |         move.l d0,-(sp)
    c26a:	|  |         jsr 1083a <addVarToStack>
    c270:	|  |         addq.l #8,sp
    c272:	|  |         tst.w d0
    c274:	|  |     /-- bne.s c27a <builtIn_enqueue+0xc8>
			return BR_ERROR;
    c276:	|  |     |   moveq #1,d0
    c278:	+--|-----|-- bra.s c2c8 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    c27a:	|  |     \-> movea.l 8(sp),a0
    c27e:	|  |         movea.l 24(a0),a0
    c282:	|  |         movea.l 8(a0),a0
    c286:	|  |         movea.l 4(a0),a0
    c28a:	|  |         movea.l 4(a0),a1
    c28e:	|  |         movea.l 8(sp),a0
    c292:	|  |         movea.l 24(a0),a0
    c296:	|  |         movea.l 8(a0),a0
    c29a:	|  |         movea.l 4(a0),a0
    c29e:	|  |         move.l 8(a1),d0
    c2a2:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    c2a6:	|  \-------> moveq #24,d0
    c2a8:	|            add.l 8(sp),d0
    c2ac:	|            move.l d0,-(sp)
    c2ae:	|            jsr 11982 <trimStack>
    c2b4:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    c2b6:	|            moveq #24,d0
    c2b8:	|            add.l 8(sp),d0
    c2bc:	|            move.l d0,-(sp)
    c2be:	|            jsr 11982 <trimStack>
    c2c4:	|            addq.l #4,sp
	return BR_CONTINUE;
    c2c6:	|            moveq #2,d0
}
    c2c8:	\----------> rts

0000c2ca <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    c2ca:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c2cc:	       movea.l 12(sp),a0
    c2d0:	       movea.l 24(a0),a0
    c2d4:	       movea.l 8(a0),a0
    c2d8:	       move.l (a0),d0
    c2da:	       moveq #6,d1
    c2dc:	       cmp.l d0,d1
    c2de:	   /-- beq.s c2f4 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c2e0:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c2e6:	   |   jsr 13046 <KPrintF>
    c2ec:	   |   addq.l #4,sp
		return BR_ERROR;
    c2ee:	   |   moveq #1,d0
    c2f0:	/--|-- bra.w c38a <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    c2f4:	|  \-> movea.l 12(sp),a0
    c2f8:	|      movea.l 24(a0),a0
    c2fc:	|      movea.l 8(a0),a0
    c300:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c304:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c306:	|      movea.l 12(sp),a0
    c30a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c30e:	|      clr.l -(sp)
    c310:	|      move.l d1,-(sp)
    c312:	|      move.l d0,-(sp)
    c314:	|      jsr 10bda <deleteVarFromStack>
    c31a:	|      lea 12(sp),sp
    c31e:	|      move.l d0,d1
    c320:	|      moveq #28,d0
    c322:	|      add.l 12(sp),d0
    c326:	|      move.l d1,-(sp)
    c328:	|      pea 1 <_start+0x1>
    c32c:	|      move.l d0,-(sp)
    c32e:	|      jsr 118f0 <setVariable>
    c334:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c338:	|      movea.l 12(sp),a0
    c33c:	|      movea.l 24(a0),a0
    c340:	|      movea.l 8(a0),a0
    c344:	|      movea.l 4(a0),a0
    c348:	|      move.l (a0),d0
    c34a:	|      movea.l 12(sp),a0
    c34e:	|      movea.l 24(a0),a0
    c352:	|      movea.l 8(a0),a0
    c356:	|      movea.l 4(a0),a2
    c35a:	|      move.l d0,-(sp)
    c35c:	|      jsr 1193a <stackFindLast>
    c362:	|      addq.l #4,sp
    c364:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c368:	|      moveq #24,d0
    c36a:	|      add.l 12(sp),d0
    c36e:	|      move.l d0,-(sp)
    c370:	|      jsr 11982 <trimStack>
    c376:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c378:	|      moveq #24,d0
    c37a:	|      add.l 12(sp),d0
    c37e:	|      move.l d0,-(sp)
    c380:	|      jsr 11982 <trimStack>
    c386:	|      addq.l #4,sp
	return BR_CONTINUE;
    c388:	|      moveq #2,d0
}
    c38a:	\----> movea.l (sp)+,a2
    c38c:	       rts

0000c38e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    c38e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c390:	       movea.l 12(sp),a0
    c394:	       movea.l 24(a0),a0
    c398:	       movea.l 8(a0),a0
    c39c:	       move.l (a0),d0
    c39e:	       moveq #6,d1
    c3a0:	       cmp.l d0,d1
    c3a2:	   /-- beq.s c3b8 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c3a4:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c3aa:	   |   jsr 13046 <KPrintF>
    c3b0:	   |   addq.l #4,sp
		return BR_ERROR;
    c3b2:	   |   moveq #1,d0
    c3b4:	/--|-- bra.w c450 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    c3b8:	|  \-> movea.l 12(sp),a0
    c3bc:	|      movea.l 24(a0),a0
    c3c0:	|      movea.l 8(a0),a0
    c3c4:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c3c8:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c3ca:	|      movea.l 12(sp),a0
    c3ce:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c3d2:	|      pea 1 <_start+0x1>
    c3d6:	|      move.l d1,-(sp)
    c3d8:	|      move.l d0,-(sp)
    c3da:	|      jsr 10bda <deleteVarFromStack>
    c3e0:	|      lea 12(sp),sp
    c3e4:	|      move.l d0,d1
    c3e6:	|      moveq #28,d0
    c3e8:	|      add.l 12(sp),d0
    c3ec:	|      move.l d1,-(sp)
    c3ee:	|      pea 1 <_start+0x1>
    c3f2:	|      move.l d0,-(sp)
    c3f4:	|      jsr 118f0 <setVariable>
    c3fa:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c3fe:	|      movea.l 12(sp),a0
    c402:	|      movea.l 24(a0),a0
    c406:	|      movea.l 8(a0),a0
    c40a:	|      movea.l 4(a0),a0
    c40e:	|      move.l (a0),d0
    c410:	|      movea.l 12(sp),a0
    c414:	|      movea.l 24(a0),a0
    c418:	|      movea.l 8(a0),a0
    c41c:	|      movea.l 4(a0),a2
    c420:	|      move.l d0,-(sp)
    c422:	|      jsr 1193a <stackFindLast>
    c428:	|      addq.l #4,sp
    c42a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c42e:	|      moveq #24,d0
    c430:	|      add.l 12(sp),d0
    c434:	|      move.l d0,-(sp)
    c436:	|      jsr 11982 <trimStack>
    c43c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c43e:	|      moveq #24,d0
    c440:	|      add.l 12(sp),d0
    c444:	|      move.l d0,-(sp)
    c446:	|      jsr 11982 <trimStack>
    c44c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c44e:	|      moveq #2,d0
}
    c450:	\----> movea.l (sp)+,a2
    c452:	       rts

0000c454 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c454:	       movea.l 8(sp),a0
    c458:	       movea.l 24(a0),a0
    c45c:	       move.l (a0),d0
    c45e:	       moveq #6,d1
    c460:	       cmp.l d0,d1
    c462:	   /-- beq.s c476 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    c464:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c46a:	   |   jsr 13046 <KPrintF>
    c470:	   |   addq.l #4,sp
		return BR_ERROR;
    c472:	   |   moveq #1,d0
    c474:	/--|-- bra.s c4e0 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c476:	|  \-> movea.l 8(sp),a0
    c47a:	|      movea.l 24(a0),a0
    c47e:	|      movea.l 4(a0),a0
    c482:	|      move.l (a0),d0
    c484:	|  /-- bne.s c498 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    c486:	|  |   pea 1516f <custom.c.9a493ead+0x9bf>
    c48c:	|  |   jsr 13046 <KPrintF>
    c492:	|  |   addq.l #4,sp
		return BR_ERROR;
    c494:	|  |   moveq #1,d0
    c496:	+--|-- bra.s c4e0 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c498:	|  \-> moveq #28,d0
    c49a:	|      add.l 8(sp),d0
    c49e:	|      movea.l 8(sp),a0
    c4a2:	|      movea.l 24(a0),a0
    c4a6:	|      movea.l 4(a0),a0
    c4aa:	|      move.l (a0),d1
    c4ac:	|      move.l d0,-(sp)
    c4ae:	|      move.l d1,-(sp)
    c4b0:	|      jsr 114b8 <copyVariable>
    c4b6:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    c4b8:	|      movea.l 8(sp),a0
    c4bc:	|      movea.l 24(a0),a0
    c4c0:	|      move.l 4(a0),d0
    c4c4:	|      move.l d0,-(sp)
    c4c6:	|      jsr 11982 <trimStack>
    c4cc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c4ce:	|      moveq #24,d0
    c4d0:	|      add.l 8(sp),d0
    c4d4:	|      move.l d0,-(sp)
    c4d6:	|      jsr 11982 <trimStack>
    c4dc:	|      addq.l #4,sp
	return BR_CONTINUE;
    c4de:	|      moveq #2,d0
}
    c4e0:	\----> rts

0000c4e2 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c4e2:	       movea.l 8(sp),a0
    c4e6:	       movea.l 24(a0),a0
    c4ea:	       move.l (a0),d0
    c4ec:	       moveq #6,d1
    c4ee:	       cmp.l d0,d1
    c4f0:	   /-- beq.s c504 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    c4f2:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c4f8:	   |   jsr 13046 <KPrintF>
    c4fe:	   |   addq.l #4,sp
		return BR_ERROR;
    c500:	   |   moveq #1,d0
    c502:	/--|-- bra.s c558 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c504:	|  \-> movea.l 8(sp),a0
    c508:	|      movea.l 24(a0),a0
    c50c:	|      movea.l 4(a0),a0
    c510:	|      move.l (a0),d0
    c512:	|  /-- bne.s c526 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    c514:	|  |   pea 1516f <custom.c.9a493ead+0x9bf>
    c51a:	|  |   jsr 13046 <KPrintF>
    c520:	|  |   addq.l #4,sp
		return BR_ERROR;
    c522:	|  |   moveq #1,d0
    c524:	+--|-- bra.s c558 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c526:	|  \-> moveq #28,d0
    c528:	|      add.l 8(sp),d0
    c52c:	|      movea.l 8(sp),a0
    c530:	|      movea.l 24(a0),a0
    c534:	|      movea.l 4(a0),a0
    c538:	|      move.l (a0),d1
    c53a:	|      move.l d0,-(sp)
    c53c:	|      move.l d1,-(sp)
    c53e:	|      jsr 114b8 <copyVariable>
    c544:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c546:	|      moveq #24,d0
    c548:	|      add.l 8(sp),d0
    c54c:	|      move.l d0,-(sp)
    c54e:	|      jsr 11982 <trimStack>
    c554:	|      addq.l #4,sp
	return BR_CONTINUE;
    c556:	|      moveq #2,d0
}
    c558:	\----> rts

0000c55a <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c55a:	       movea.l 8(sp),a0
    c55e:	       movea.l 24(a0),a0
    c562:	       move.l (a0),d0
    c564:	       moveq #6,d1
    c566:	       cmp.l d0,d1
    c568:	   /-- beq.s c57c <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    c56a:	   |   pea 1513e <custom.c.9a493ead+0x98e>
    c570:	   |   jsr 13046 <KPrintF>
    c576:	   |   addq.l #4,sp
		return BR_ERROR;
    c578:	   |   moveq #1,d0
    c57a:	/--|-- bra.s c5d2 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c57c:	|  \-> movea.l 8(sp),a0
    c580:	|      movea.l 24(a0),a0
    c584:	|      movea.l 4(a0),a0
    c588:	|      move.l (a0),d0
    c58a:	|  /-- bne.s c59e <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    c58c:	|  |   pea 1516f <custom.c.9a493ead+0x9bf>
    c592:	|  |   jsr 13046 <KPrintF>
    c598:	|  |   addq.l #4,sp
		return BR_ERROR;
    c59a:	|  |   moveq #1,d0
    c59c:	+--|-- bra.s c5d2 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    c59e:	|  \-> moveq #28,d0
    c5a0:	|      add.l 8(sp),d0
    c5a4:	|      movea.l 8(sp),a0
    c5a8:	|      movea.l 24(a0),a0
    c5ac:	|      movea.l 4(a0),a0
    c5b0:	|      move.l 4(a0),d1
    c5b4:	|      move.l d0,-(sp)
    c5b6:	|      move.l d1,-(sp)
    c5b8:	|      jsr 114b8 <copyVariable>
    c5be:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c5c0:	|      moveq #24,d0
    c5c2:	|      add.l 8(sp),d0
    c5c6:	|      move.l d0,-(sp)
    c5c8:	|      jsr 11982 <trimStack>
    c5ce:	|      addq.l #4,sp
	return BR_CONTINUE;
    c5d0:	|      moveq #2,d0
}
    c5d2:	\----> rts

0000c5d4 <builtIn_random>:

builtIn(random)
{
    c5d4:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    c5d6:	       movea.l 12(sp),a0
    c5da:	       move.l 24(a0),d0
    c5de:	       move.l d0,-(sp)
    c5e0:	       pea 1 <_start+0x1>
    c5e4:	       move.l sp,d0
    c5e6:	       addq.l #8,d0
    c5e8:	       move.l d0,-(sp)
    c5ea:	       jsr 10ffe <getValueType>
    c5f0:	       lea 12(sp),sp
    c5f4:	       tst.w d0
    c5f6:	   /-- bne.s c5fc <builtIn_random+0x28>
		return BR_ERROR;
    c5f8:	   |   moveq #1,d0
    c5fa:	/--|-- bra.s c646 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    c5fc:	|  \-> moveq #24,d0
    c5fe:	|      add.l 12(sp),d0
    c602:	|      move.l d0,-(sp)
    c604:	|      jsr 11982 <trimStack>
    c60a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    c60c:	|      move.l (sp),d0
    c60e:	|  /-- bgt.s c614 <builtIn_random+0x40>
    c610:	|  |   moveq #1,d0
    c612:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    c614:	|  \-> jsr c58 <rand>
    c61a:	|      move.l d0,d1
    c61c:	|      move.l (sp),d0
    c61e:	|      move.l d0,-(sp)
    c620:	|      move.l d1,-(sp)
    c622:	|      jsr 13932 <__umodsi3>
    c628:	|      addq.l #8,sp
    c62a:	|      move.l d0,d1
    c62c:	|      moveq #28,d0
    c62e:	|      add.l 12(sp),d0
    c632:	|      move.l d1,-(sp)
    c634:	|      pea 1 <_start+0x1>
    c638:	|      move.l d0,-(sp)
    c63a:	|      jsr 118f0 <setVariable>
    c640:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c644:	|      moveq #2,d0
}
    c646:	\----> addq.l #4,sp
    c648:	       rts

0000c64a <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    c64a:	nop
    c64c:	rts

0000c64e <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    c64e:	moveq #2,d0
}
    c650:	rts

0000c652 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    c652:	moveq #2,d0
}
    c654:	rts

0000c656 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c656:	moveq #2,d0
}
    c658:	rts

0000c65a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c65a:	moveq #2,d0
}
    c65c:	rts

0000c65e <builtIn_setFont>:


builtIn(setFont)
{
    c65e:	       lea -16(sp),sp
    c662:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c664:	       movea.l 28(sp),a0
    c668:	       move.l 24(a0),d0
    c66c:	       move.l d0,-(sp)
    c66e:	       pea 1 <_start+0x1>
    c672:	       lea 12(sp),a0
    c676:	       move.l a0,-(sp)
    c678:	       jsr 10ffe <getValueType>
    c67e:	       lea 12(sp),sp
    c682:	       tst.w d0
    c684:	   /-- bne.s c68c <builtIn_setFont+0x2e>
    c686:	   |   moveq #1,d0
    c688:	/--|-- bra.w c73a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    c68c:	|  \-> moveq #24,d0
    c68e:	|      add.l 28(sp),d0
    c692:	|      move.l d0,-(sp)
    c694:	|      jsr 11982 <trimStack>
    c69a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c69c:	|      movea.l 28(sp),a0
    c6a0:	|      move.l 24(a0),d0
    c6a4:	|      move.l d0,-(sp)
    c6a6:	|      jsr 115d4 <getTextFromAnyVar>
    c6ac:	|      addq.l #4,sp
    c6ae:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    c6b2:	|  /-- bne.s c6ba <builtIn_setFont+0x5c>
    c6b4:	|  |   moveq #1,d0
    c6b6:	+--|-- bra.w c73a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    c6ba:	|  \-> moveq #24,d0
    c6bc:	|      add.l 28(sp),d0
    c6c0:	|      move.l d0,-(sp)
    c6c2:	|      jsr 11982 <trimStack>
    c6c8:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c6ca:	|      movea.l 28(sp),a0
    c6ce:	|      move.l 24(a0),d0
    c6d2:	|      move.l d0,-(sp)
    c6d4:	|      pea 5 <_start+0x5>
    c6d8:	|      lea 16(sp),a0
    c6dc:	|      move.l a0,-(sp)
    c6de:	|      jsr 10ffe <getValueType>
    c6e4:	|      lea 12(sp),sp
    c6e8:	|      tst.w d0
    c6ea:	|  /-- bne.s c6f0 <builtIn_setFont+0x92>
    c6ec:	|  |   moveq #1,d0
    c6ee:	+--|-- bra.s c73a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    c6f0:	|  \-> moveq #24,d0
    c6f2:	|      add.l 28(sp),d0
    c6f6:	|      move.l d0,-(sp)
    c6f8:	|      jsr 11982 <trimStack>
    c6fe:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    c700:	|      move.l 4(sp),d1
    c704:	|      move.l 8(sp),d0
    c708:	|      move.l d1,-(sp)
    c70a:	|      move.l 20(sp),-(sp)
    c70e:	|      move.l d0,-(sp)
    c710:	|      jsr 119f6 <loadFont>
    c716:	|      lea 12(sp),sp
    c71a:	|      tst.w d0
    c71c:	|  /-- bne.s c722 <builtIn_setFont+0xc4>
    c71e:	|  |   moveq #1,d0
    c720:	+--|-- bra.s c73a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    c722:	|  \-> move.l 16(sp),12(sp)
    c728:	|      move.l 16784 <SysBase>,d0
    c72e:	|      movea.l d0,a6
    c730:	|      movea.l 12(sp),a1
    c734:	|      jsr -690(a6)

    return BR_CONTINUE;
    c738:	|      moveq #2,d0
}
    c73a:	\----> movea.l (sp)+,a6
    c73c:	       lea 16(sp),sp
    c740:	       rts

0000c742 <builtIn_inFont>:

builtIn(inFont)
{
    c742:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c744:	       movea.l 12(sp),a0
    c748:	       move.l 24(a0),d0
    c74c:	       move.l d0,-(sp)
    c74e:	       jsr 115d4 <getTextFromAnyVar>
    c754:	       addq.l #4,sp
    c756:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    c758:	   /-- bne.s c75e <builtIn_inFont+0x1c>
    c75a:	   |   moveq #1,d0
    c75c:	/--|-- bra.s c794 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    c75e:	|  \-> moveq #24,d0
    c760:	|      add.l 12(sp),d0
    c764:	|      move.l d0,-(sp)
    c766:	|      jsr 11982 <trimStack>
    c76c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    c76e:	|      move.l (sp),-(sp)
    c770:	|      jsr 119ca <isInFont>
    c776:	|      addq.l #4,sp
    c778:	|      movea.w d0,a0
    c77a:	|      moveq #28,d0
    c77c:	|      add.l 12(sp),d0
    c780:	|      move.l a0,-(sp)
    c782:	|      pea 1 <_start+0x1>
    c786:	|      move.l d0,-(sp)
    c788:	|      jsr 118f0 <setVariable>
    c78e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c792:	|      moveq #2,d0
}
    c794:	\----> addq.l #4,sp
    c796:	       rts

0000c798 <builtIn_pasteString>:

builtIn(pasteString)
{
    c798:	       lea -16(sp),sp
    c79c:	       move.l a6,-(sp)
    c79e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c7a0:	       movea.l 32(sp),a0
    c7a4:	       move.l 24(a0),d0
    c7a8:	       move.l d0,-(sp)
    c7aa:	       jsr 115d4 <getTextFromAnyVar>
    c7b0:	       addq.l #4,sp
    c7b2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    c7b6:	       moveq #24,d0
    c7b8:	       add.l 32(sp),d0
    c7bc:	       move.l d0,-(sp)
    c7be:	       jsr 11982 <trimStack>
    c7c4:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c7c6:	       movea.l 32(sp),a0
    c7ca:	       move.l 24(a0),d0
    c7ce:	       move.l d0,-(sp)
    c7d0:	       pea 1 <_start+0x1>
    c7d4:	       lea 20(sp),a0
    c7d8:	       move.l a0,-(sp)
    c7da:	       jsr 10ffe <getValueType>
    c7e0:	       lea 12(sp),sp
    c7e4:	       tst.w d0
    c7e6:	   /-- bne.s c7ee <builtIn_pasteString+0x56>
    c7e8:	   |   moveq #1,d0
    c7ea:	/--|-- bra.w c876 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c7ee:	|  \-> moveq #24,d0
    c7f0:	|      add.l 32(sp),d0
    c7f4:	|      move.l d0,-(sp)
    c7f6:	|      jsr 11982 <trimStack>
    c7fc:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c7fe:	|      movea.l 32(sp),a0
    c802:	|      move.l 24(a0),d0
    c806:	|      move.l d0,-(sp)
    c808:	|      pea 1 <_start+0x1>
    c80c:	|      lea 16(sp),a0
    c810:	|      move.l a0,-(sp)
    c812:	|      jsr 10ffe <getValueType>
    c818:	|      lea 12(sp),sp
    c81c:	|      tst.w d0
    c81e:	|  /-- bne.s c824 <builtIn_pasteString+0x8c>
    c820:	|  |   moveq #1,d0
    c822:	+--|-- bra.s c876 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c824:	|  \-> moveq #24,d0
    c826:	|      add.l 32(sp),d0
    c82a:	|      move.l d0,-(sp)
    c82c:	|      jsr 11982 <trimStack>
    c832:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    c834:	|      move.l 8(sp),d0
    c838:	|      cmpi.l #65535,d0
    c83e:	|  /-- bne.s c85e <builtIn_pasteString+0xc6>
    c840:	|  |   move.l 166dc <winWidth>,d2
    c846:	|  |   move.l 20(sp),-(sp)
    c84a:	|  |   jsr 119dc <stringWidth>
    c850:	|  |   addq.l #4,sp
    c852:	|  |   move.l d2,d1
    c854:	|  |   sub.l d0,d1
    c856:	|  |   move.l d1,d0
    c858:	|  |   lsr.l #1,d0
    c85a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    c85e:	|  \-> move.l 20(sp),16(sp)
    c864:	|      move.l 16784 <SysBase>,d0
    c86a:	|      movea.l d0,a6
    c86c:	|      movea.l 16(sp),a1
    c870:	|      jsr -690(a6)
    return BR_CONTINUE;
    c874:	|      moveq #2,d0
}
    c876:	\----> move.l (sp)+,d2
    c878:	       movea.l (sp)+,a6
    c87a:	       lea 16(sp),sp
    c87e:	       rts

0000c880 <builtIn_anim>:

builtIn(anim)
{
    c880:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    c884:	       moveq #1,d0
    c886:	       cmp.l 16(sp),d0
    c88a:	   /-- blt.s c8a0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    c88c:	   |   pea 15182 <custom.c.9a493ead+0x9d2>
    c892:	   |   jsr 13046 <KPrintF>
    c898:	   |   addq.l #4,sp
		return BR_ERROR;
    c89a:	   |   moveq #1,d0
    c89c:	/--|-- bra.w c92e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c8a0:	|  \-> moveq #24,d1
    c8a2:	|      add.l 20(sp),d1
    c8a6:	|      move.l 16(sp),d0
    c8aa:	|      subq.l #1,d0
    c8ac:	|      move.l d1,-(sp)
    c8ae:	|      move.l d0,-(sp)
    c8b0:	|      jsr 68ac <createPersonaAnim>
    c8b6:	|      addq.l #8,sp
    c8b8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c8bc:	|      movea.l 20(sp),a0
    c8c0:	|      move.l 24(a0),d0
    c8c4:	|      move.l d0,-(sp)
    c8c6:	|      pea 5 <_start+0x5>
    c8ca:	|      lea 8(sp),a0
    c8ce:	|      move.l a0,-(sp)
    c8d0:	|      jsr 10ffe <getValueType>
    c8d6:	|      lea 12(sp),sp
    c8da:	|      tst.w d0
    c8dc:	|  /-- bne.s c8e2 <builtIn_anim+0x62>
    c8de:	|  |   moveq #1,d0
    c8e0:	+--|-- bra.s c92e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c8e2:	|  \-> moveq #24,d0
    c8e4:	|      add.l 20(sp),d0
    c8e8:	|      move.l d0,-(sp)
    c8ea:	|      jsr 11982 <trimStack>
    c8f0:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c8f2:	|      move.l (sp),d0
    c8f4:	|      move.l d0,-(sp)
    c8f6:	|      jsr 8c56 <loadBankForAnim>
    c8fc:	|      addq.l #4,sp
    c8fe:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c902:	|  /-- bne.s c908 <builtIn_anim+0x88>
    c904:	|  |   moveq #1,d0
    c906:	+--|-- bra.s c92e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c908:	|  \-> move.l 4(sp),-(sp)
    c90c:	|      move.l 12(sp),-(sp)
    c910:	|      jsr 80fa <setBankFile>
    c916:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c918:	|      moveq #28,d0
    c91a:	|      add.l 20(sp),d0
    c91e:	|      move.l 8(sp),-(sp)
    c922:	|      move.l d0,-(sp)
    c924:	|      jsr 118ac <newAnimationVariable>
    c92a:	|      addq.l #8,sp
	return BR_CONTINUE;
    c92c:	|      moveq #2,d0
}
    c92e:	\----> lea 12(sp),sp
    c932:	       rts

0000c934 <builtIn_costume>:

builtIn(costume)
{
    c934:	          lea -32(sp),sp
    c938:	          move.l a6,-(sp)
    c93a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c93c:	          moveq #8,d0
    c93e:	          move.l d0,32(sp)
    c942:	          clr.l 28(sp)
    c946:	          move.l 16784 <SysBase>,d0
    c94c:	          movea.l d0,a6
    c94e:	          move.l 32(sp),d0
    c952:	          move.l 28(sp),d1
    c956:	          jsr -684(a6)
    c95a:	          move.l d0,24(sp)
    c95e:	          move.l 24(sp),d0
    c962:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c966:	      /-- bne.s c96e <builtIn_costume+0x3a>
    c968:	      |   moveq #1,d0
    c96a:	/-----|-- bra.w ca56 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c96e:	|     \-> move.l 44(sp),d0
    c972:	|         pea 3 <_start+0x3>
    c976:	|         move.l d0,-(sp)
    c978:	|         jsr 138d6 <__divsi3>
    c97e:	|         addq.l #8,sp
    c980:	|         movea.l 20(sp),a0
    c984:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c988:	|         tst.l 44(sp)
    c98c:	|     /-- beq.s c9a2 <builtIn_costume+0x6e>
    c98e:	|     |   movea.l 20(sp),a0
    c992:	|     |   move.l 4(a0),d1
    c996:	|     |   move.l d1,d0
    c998:	|     |   add.l d0,d0
    c99a:	|     |   add.l d1,d0
    c99c:	|     |   cmp.l 44(sp),d0
    c9a0:	|  /--|-- beq.s c9b6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c9a2:	|  |  \-> pea 151bc <custom.c.9a493ead+0xa0c>
    c9a8:	|  |      jsr 13046 <KPrintF>
    c9ae:	|  |      addq.l #4,sp
        return BR_ERROR;
    c9b0:	|  |      moveq #1,d0
    c9b2:	+--|----- bra.w ca56 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c9b6:	|  \----> move.l 44(sp),d0
    c9ba:	|         add.l d0,d0
    c9bc:	|         add.l d0,d0
    c9be:	|         move.l d0,16(sp)
    c9c2:	|         clr.l 12(sp)
    c9c6:	|         move.l 16784 <SysBase>,d0
    c9cc:	|         movea.l d0,a6
    c9ce:	|         move.l 16(sp),d0
    c9d2:	|         move.l 12(sp),d1
    c9d6:	|         jsr -684(a6)
    c9da:	|         move.l d0,8(sp)
    c9de:	|         move.l 8(sp),d0
    c9e2:	|         movea.l 20(sp),a0
    c9e6:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c9e8:	|         movea.l 20(sp),a0
    c9ec:	|         move.l (a0),d0
    c9ee:	|     /-- bne.s c9f4 <builtIn_costume+0xc0>
    c9f0:	|     |   moveq #1,d0
    c9f2:	+-----|-- bra.s ca56 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c9f4:	|     \-> move.l 44(sp),d0
    c9f8:	|         subq.l #1,d0
    c9fa:	|         move.l d0,36(sp)
    c9fe:	|     /-- bra.s ca3a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    ca00:	|  /--|-> movea.l 48(sp),a0
    ca04:	|  |  |   move.l 24(a0),d0
    ca08:	|  |  |   movea.l 20(sp),a0
    ca0c:	|  |  |   movea.l (a0),a0
    ca0e:	|  |  |   move.l 36(sp),d1
    ca12:	|  |  |   add.l d1,d1
    ca14:	|  |  |   add.l d1,d1
    ca16:	|  |  |   lea (0,a0,d1.l),a2
    ca1a:	|  |  |   move.l d0,-(sp)
    ca1c:	|  |  |   jsr 114d6 <getAnimationFromVar>
    ca22:	|  |  |   addq.l #4,sp
    ca24:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    ca26:	|  |  |   moveq #24,d0
    ca28:	|  |  |   add.l 48(sp),d0
    ca2c:	|  |  |   move.l d0,-(sp)
    ca2e:	|  |  |   jsr 11982 <trimStack>
    ca34:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    ca36:	|  |  |   subq.l #1,36(sp)
    ca3a:	|  |  \-> tst.l 36(sp)
    ca3e:	|  \----- bge.s ca00 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    ca40:	|         moveq #28,d0
    ca42:	|         add.l 48(sp),d0
    ca46:	|         move.l 20(sp),-(sp)
    ca4a:	|         move.l d0,-(sp)
    ca4c:	|         jsr 118ce <newCostumeVariable>
    ca52:	|         addq.l #8,sp
    return BR_CONTINUE;
    ca54:	|         moveq #2,d0
}
    ca56:	\-------> movea.l (sp)+,a2
    ca58:	          movea.l (sp)+,a6
    ca5a:	          lea 32(sp),sp
    ca5e:	          rts

0000ca60 <builtIn_launch>:

builtIn(launch)
{
    ca60:	          lea -20(sp),sp
    ca64:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ca66:	          movea.l 32(sp),a0
    ca6a:	          move.l 24(a0),d0
    ca6e:	          move.l d0,-(sp)
    ca70:	          jsr 115d4 <getTextFromAnyVar>
    ca76:	          addq.l #4,sp
    ca78:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    ca7c:	      /-- bne.s ca84 <builtIn_launch+0x24>
    ca7e:	      |   moveq #1,d0
    ca80:	/-----|-- bra.w cbb2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    ca84:	|     \-> move.l 20(sp),-(sp)
    ca88:	|         jsr 2fe <encodeFilename>
    ca8e:	|         addq.l #4,sp
    ca90:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    ca94:	|         moveq #24,d0
    ca96:	|         add.l 32(sp),d0
    ca9a:	|         move.l d0,-(sp)
    ca9c:	|         jsr 11982 <trimStack>
    caa2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    caa4:	|         movea.l 20(sp),a0
    caa8:	|         move.b (a0),d0
    caaa:	|         cmpi.b #104,d0
    caae:	|  /----- bne.s cb18 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    cab0:	|  |      movea.l 20(sp),a0
    cab4:	|  |      addq.l #1,a0
    cab6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    cab8:	|  |      cmpi.b #116,d0
    cabc:	|  +----- bne.s cb18 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    cabe:	|  |      movea.l 20(sp),a0
    cac2:	|  |      addq.l #2,a0
    cac4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    cac6:	|  |      cmpi.b #116,d0
    caca:	|  +----- bne.s cb18 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    cacc:	|  |      movea.l 20(sp),a0
    cad0:	|  |      addq.l #3,a0
    cad2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    cad4:	|  |      cmpi.b #112,d0
    cad8:	|  +----- bne.s cb18 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    cada:	|  |      movea.l 20(sp),a0
    cade:	|  |      addq.l #4,a0
    cae0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    cae2:	|  |      cmpi.b #58,d0
    cae6:	|  |  /-- beq.s cb04 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    cae8:	|  |  |   movea.l 20(sp),a0
    caec:	|  |  |   addq.l #4,a0
    caee:	|  |  |   move.b (a0),d0
    caf0:	|  |  |   cmpi.b #115,d0
    caf4:	|  +--|-- bne.s cb18 <builtIn_launch+0xb8>
    caf6:	|  |  |   movea.l 20(sp),a0
    cafa:	|  |  |   addq.l #5,a0
    cafc:	|  |  |   move.b (a0),d0
    cafe:	|  |  |   cmpi.b #58,d0
    cb02:	|  +--|-- bne.s cb18 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    cb04:	|  |  \-> move.l 20(sp),-(sp)
    cb08:	|  |      jsr b8 <copyString>
    cb0e:	|  |      addq.l #4,sp
    cb10:	|  |      move.l d0,1689a <launchMe>
    cb16:	|  |  /-- bra.s cb6a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    cb18:	|  \--|-> move.l 166f0 <gamePath>,d0
    cb1e:	|     |   pea 15207 <custom.c.9a493ead+0xa57>
    cb24:	|     |   move.l d0,-(sp)
    cb26:	|     |   jsr 1052a <joinStrings>
    cb2c:	|     |   addq.l #8,sp
    cb2e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    cb32:	|     |   move.l 16(sp),-(sp)
    cb36:	|     |   move.l 16(sp),-(sp)
    cb3a:	|     |   jsr 1052a <joinStrings>
    cb40:	|     |   addq.l #8,sp
    cb42:	|     |   move.l d0,1689a <launchMe>
        FreeVec(newText);
    cb48:	|     |   move.l 16(sp),8(sp)
    cb4e:	|     |   move.l 16784 <SysBase>,d0
    cb54:	|     |   movea.l d0,a6
    cb56:	|     |   movea.l 8(sp),a1
    cb5a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    cb5e:	|     |   move.l 1689a <launchMe>,d0
    cb64:	|     +-- bne.s cb6a <builtIn_launch+0x10a>
    cb66:	|     |   moveq #1,d0
    cb68:	+-----|-- bra.s cbb2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    cb6a:	|     \-> move.l 20(sp),4(sp)
    cb70:	|         move.l 16784 <SysBase>,d0
    cb76:	|         movea.l d0,a6
    cb78:	|         movea.l 4(sp),a1
    cb7c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    cb80:	|         clr.l -(sp)
    cb82:	|         jsr 1b2e <setGraphicsWindow>
    cb88:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    cb8a:	|         moveq #28,d0
    cb8c:	|         add.l 32(sp),d0
    cb90:	|         pea 1 <_start+0x1>
    cb94:	|         pea 1 <_start+0x1>
    cb98:	|         move.l d0,-(sp)
    cb9a:	|         jsr 118f0 <setVariable>
    cba0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    cba4:	|         moveq #28,d0
    cba6:	|         add.l 32(sp),d0
    cbaa:	|         move.l d0,1689e <launchResult>

    return BR_KEEP_AND_PAUSE;
    cbb0:	|         moveq #0,d0
}
    cbb2:	\-------> movea.l (sp)+,a6
    cbb4:	          lea 20(sp),sp
    cbb8:	          rts

0000cbba <builtIn_pause>:

builtIn(pause)
{
    cbba:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbbc:	       movea.l 12(sp),a0
    cbc0:	       move.l 24(a0),d0
    cbc4:	       move.l d0,-(sp)
    cbc6:	       pea 1 <_start+0x1>
    cbca:	       move.l sp,d0
    cbcc:	       addq.l #8,d0
    cbce:	       move.l d0,-(sp)
    cbd0:	       jsr 10ffe <getValueType>
    cbd6:	       lea 12(sp),sp
    cbda:	       tst.w d0
    cbdc:	   /-- bne.s cbe2 <builtIn_pause+0x28>
    cbde:	   |   moveq #1,d0
    cbe0:	/--|-- bra.s cc10 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    cbe2:	|  \-> moveq #24,d0
    cbe4:	|      add.l 12(sp),d0
    cbe8:	|      move.l d0,-(sp)
    cbea:	|      jsr 11982 <trimStack>
    cbf0:	|      addq.l #4,sp
	if (theTime > 0) {
    cbf2:	|      move.l (sp),d0
    cbf4:	|  /-- ble.s cc0e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    cbf6:	|  |   move.l (sp),d0
    cbf8:	|  |   subq.l #1,d0
    cbfa:	|  |   movea.l 12(sp),a0
    cbfe:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    cc02:	|  |   movea.l 12(sp),a0
    cc06:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    cc0a:	|  |   moveq #0,d0
    cc0c:	+--|-- bra.s cc10 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    cc0e:	|  \-> moveq #2,d0
}
    cc10:	\----> addq.l #4,sp
    cc12:	       rts

0000cc14 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    cc14:	jsr 2282 <completeTimers>
	return BR_CONTINUE;
    cc1a:	moveq #2,d0
}
    cc1c:	rts

0000cc1e <builtIn_callEvent>:

builtIn(callEvent)
{
    cc1e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc22:	       movea.l 20(sp),a0
    cc26:	       move.l 24(a0),d0
    cc2a:	       move.l d0,-(sp)
    cc2c:	       pea 7 <_start+0x7>
    cc30:	       lea 8(sp),a0
    cc34:	       move.l a0,-(sp)
    cc36:	       jsr 10ffe <getValueType>
    cc3c:	       lea 12(sp),sp
    cc40:	       tst.w d0
    cc42:	   /-- bne.s cc4a <builtIn_callEvent+0x2c>
    cc44:	   |   moveq #1,d0
    cc46:	/--|-- bra.w cce0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    cc4a:	|  \-> moveq #24,d0
    cc4c:	|      add.l 20(sp),d0
    cc50:	|      move.l d0,-(sp)
    cc52:	|      jsr 11982 <trimStack>
    cc58:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc5a:	|      movea.l 20(sp),a0
    cc5e:	|      move.l 24(a0),d0
    cc62:	|      move.l d0,-(sp)
    cc64:	|      pea 7 <_start+0x7>
    cc68:	|      moveq #12,d0
    cc6a:	|      add.l sp,d0
    cc6c:	|      move.l d0,-(sp)
    cc6e:	|      jsr 10ffe <getValueType>
    cc74:	|      lea 12(sp),sp
    cc78:	|      tst.w d0
    cc7a:	|  /-- bne.s cc80 <builtIn_callEvent+0x62>
    cc7c:	|  |   moveq #1,d0
    cc7e:	+--|-- bra.s cce0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    cc80:	|  \-> moveq #24,d0
    cc82:	|      add.l 20(sp),d0
    cc86:	|      move.l d0,-(sp)
    cc88:	|      jsr 11982 <trimStack>
    cc8e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    cc90:	|      move.l (sp),d1
    cc92:	|      move.l 4(sp),d0
    cc96:	|      move.l d1,-(sp)
    cc98:	|      move.l d0,-(sp)
    cc9a:	|      jsr 9e68 <getCombinationFunction>
    cca0:	|      addq.l #8,sp
    cca2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    cca6:	|  /-- beq.s ccc6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    cca8:	|  |   moveq #28,d0
    ccaa:	|  |   add.l 20(sp),d0
    ccae:	|  |   move.l 8(sp),-(sp)
    ccb2:	|  |   pea 2 <_start+0x2>
    ccb6:	|  |   move.l d0,-(sp)
    ccb8:	|  |   jsr 118f0 <setVariable>
    ccbe:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    ccc2:	|  |   moveq #4,d0
    ccc4:	+--|-- bra.s cce0 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    ccc6:	|  \-> moveq #28,d0
    ccc8:	|      add.l 20(sp),d0
    cccc:	|      clr.l -(sp)
    ccce:	|      pea 1 <_start+0x1>
    ccd2:	|      move.l d0,-(sp)
    ccd4:	|      jsr 118f0 <setVariable>
    ccda:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ccde:	|      moveq #2,d0
}
    cce0:	\----> lea 12(sp),sp
    cce4:	       rts

0000cce6 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    cce6:	move.w #1,168aa <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    ccee:	moveq #2,d0
}
    ccf0:	rts

0000ccf2 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    ccf2:	moveq #24,d0
    ccf4:	add.l 8(sp),d0
    ccf8:	move.l d0,-(sp)
    ccfa:	jsr 11982 <trimStack>
    cd00:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    cd02:	pea 15209 <custom.c.9a493ead+0xa59>
    cd08:	jsr 13046 <KPrintF>
    cd0e:	addq.l #4,sp
	return BR_CONTINUE;
    cd10:	moveq #2,d0
}
    cd12:	rts

0000cd14 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    cd14:	pea 15209 <custom.c.9a493ead+0xa59>
    cd1a:	jsr 13046 <KPrintF>
    cd20:	addq.l #4,sp
	return BR_CONTINUE;
    cd22:	moveq #2,d0
}
    cd24:	rts

0000cd26 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    cd26:	pea 15209 <custom.c.9a493ead+0xa59>
    cd2c:	jsr 13046 <KPrintF>
    cd32:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    cd34:	moveq #2,d0
}
    cd36:	rts

0000cd38 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    cd38:	pea 15209 <custom.c.9a493ead+0xa59>
    cd3e:	jsr 13046 <KPrintF>
    cd44:	addq.l #4,sp
	return BR_CONTINUE;
    cd46:	moveq #2,d0
}
    cd48:	rts

0000cd4a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cd4a:	pea 15209 <custom.c.9a493ead+0xa59>
    cd50:	jsr 13046 <KPrintF>
    cd56:	addq.l #4,sp
	return BR_CONTINUE;
    cd58:	moveq #2,d0
}
    cd5a:	rts

0000cd5c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cd5c:	pea 15209 <custom.c.9a493ead+0xa59>
    cd62:	jsr 13046 <KPrintF>
    cd68:	addq.l #4,sp
	return BR_CONTINUE;
    cd6a:	moveq #2,d0
}
    cd6c:	rts

0000cd6e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    cd6e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd72:	       movea.l 20(sp),a0
    cd76:	       move.l 24(a0),d0
    cd7a:	       move.l d0,-(sp)
    cd7c:	       pea 1 <_start+0x1>
    cd80:	       moveq #16,d0
    cd82:	       add.l sp,d0
    cd84:	       move.l d0,-(sp)
    cd86:	       jsr 10ffe <getValueType>
    cd8c:	       lea 12(sp),sp
    cd90:	       tst.w d0
    cd92:	   /-- bne.s cd9a <builtIn_startMusic+0x2c>
    cd94:	   |   moveq #1,d0
    cd96:	/--|-- bra.w ce3a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cd9a:	|  \-> moveq #24,d0
    cd9c:	|      add.l 20(sp),d0
    cda0:	|      move.l d0,-(sp)
    cda2:	|      jsr 11982 <trimStack>
    cda8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdaa:	|      movea.l 20(sp),a0
    cdae:	|      move.l 24(a0),d0
    cdb2:	|      move.l d0,-(sp)
    cdb4:	|      pea 1 <_start+0x1>
    cdb8:	|      moveq #12,d0
    cdba:	|      add.l sp,d0
    cdbc:	|      move.l d0,-(sp)
    cdbe:	|      jsr 10ffe <getValueType>
    cdc4:	|      lea 12(sp),sp
    cdc8:	|      tst.w d0
    cdca:	|  /-- bne.s cdd0 <builtIn_startMusic+0x62>
    cdcc:	|  |   moveq #1,d0
    cdce:	+--|-- bra.s ce3a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cdd0:	|  \-> moveq #24,d0
    cdd2:	|      add.l 20(sp),d0
    cdd6:	|      move.l d0,-(sp)
    cdd8:	|      jsr 11982 <trimStack>
    cdde:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cde0:	|      movea.l 20(sp),a0
    cde4:	|      move.l 24(a0),d0
    cde8:	|      move.l d0,-(sp)
    cdea:	|      pea 5 <_start+0x5>
    cdee:	|      lea 8(sp),a0
    cdf2:	|      move.l a0,-(sp)
    cdf4:	|      jsr 10ffe <getValueType>
    cdfa:	|      lea 12(sp),sp
    cdfe:	|      tst.w d0
    ce00:	|  /-- bne.s ce06 <builtIn_startMusic+0x98>
    ce02:	|  |   moveq #1,d0
    ce04:	+--|-- bra.s ce3a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    ce06:	|  \-> moveq #24,d0
    ce08:	|      add.l 20(sp),d0
    ce0c:	|      move.l d0,-(sp)
    ce0e:	|      jsr 11982 <trimStack>
    ce14:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    ce16:	|      movea.l 8(sp),a0
    ce1a:	|      move.l 4(sp),d1
    ce1e:	|      move.l (sp),d0
    ce20:	|      move.l a0,-(sp)
    ce22:	|      move.l d1,-(sp)
    ce24:	|      move.l d0,-(sp)
    ce26:	|      jsr 9a80 <playMOD>
    ce2c:	|      lea 12(sp),sp
    ce30:	|      tst.w d0
    ce32:	|  /-- bne.s ce38 <builtIn_startMusic+0xca>
    ce34:	|  |   moveq #2,d0
    ce36:	+--|-- bra.s ce3a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    ce38:	|  \-> moveq #2,d0
}
    ce3a:	\----> lea 12(sp),sp
    ce3e:	       rts

0000ce40 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    ce40:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ce42:	       movea.l 12(sp),a0
    ce46:	       move.l 24(a0),d0
    ce4a:	       move.l d0,-(sp)
    ce4c:	       pea 1 <_start+0x1>
    ce50:	       move.l sp,d0
    ce52:	       addq.l #8,d0
    ce54:	       move.l d0,-(sp)
    ce56:	       jsr 10ffe <getValueType>
    ce5c:	       lea 12(sp),sp
    ce60:	       tst.w d0
    ce62:	   /-- bne.s ce68 <builtIn_stopMusic+0x28>
    ce64:	   |   moveq #1,d0
    ce66:	/--|-- bra.s ce86 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    ce68:	|  \-> moveq #24,d0
    ce6a:	|      add.l 12(sp),d0
    ce6e:	|      move.l d0,-(sp)
    ce70:	|      jsr 11982 <trimStack>
    ce76:	|      addq.l #4,sp
	stopMOD (v);
    ce78:	|      move.l (sp),d0
    ce7a:	|      move.l d0,-(sp)
    ce7c:	|      jsr 9b1c <stopMOD>
    ce82:	|      addq.l #4,sp
	return BR_CONTINUE;
    ce84:	|      moveq #2,d0
}
    ce86:	\----> addq.l #4,sp
    ce88:	       rts

0000ce8a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    ce8a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ce8c:	       movea.l 16(sp),a0
    ce90:	       move.l 24(a0),d0
    ce94:	       move.l d0,-(sp)
    ce96:	       pea 1 <_start+0x1>
    ce9a:	       move.l sp,d0
    ce9c:	       addq.l #8,d0
    ce9e:	       move.l d0,-(sp)
    cea0:	       jsr 10ffe <getValueType>
    cea6:	       lea 12(sp),sp
    ceaa:	       tst.w d0
    ceac:	   /-- bne.s ceb2 <builtIn_setMusicVolume+0x28>
    ceae:	   |   moveq #1,d0
    ceb0:	/--|-- bra.s cf0c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    ceb2:	|  \-> moveq #24,d0
    ceb4:	|      add.l 16(sp),d0
    ceb8:	|      move.l d0,-(sp)
    ceba:	|      jsr 11982 <trimStack>
    cec0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cec2:	|      movea.l 16(sp),a0
    cec6:	|      move.l 24(a0),d0
    ceca:	|      move.l d0,-(sp)
    cecc:	|      pea 1 <_start+0x1>
    ced0:	|      moveq #12,d0
    ced2:	|      add.l sp,d0
    ced4:	|      move.l d0,-(sp)
    ced6:	|      jsr 10ffe <getValueType>
    cedc:	|      lea 12(sp),sp
    cee0:	|      tst.w d0
    cee2:	|  /-- bne.s cee8 <builtIn_setMusicVolume+0x5e>
    cee4:	|  |   moveq #1,d0
    cee6:	+--|-- bra.s cf0c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cee8:	|  \-> moveq #24,d0
    ceea:	|      add.l 16(sp),d0
    ceee:	|      move.l d0,-(sp)
    cef0:	|      jsr 11982 <trimStack>
    cef6:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    cef8:	|      move.l (sp),d1
    cefa:	|      move.l 4(sp),d0
    cefe:	|      move.l d1,-(sp)
    cf00:	|      move.l d0,-(sp)
    cf02:	|      jsr 9b02 <setMusicVolume>
    cf08:	|      addq.l #8,sp
	return BR_CONTINUE;
    cf0a:	|      moveq #2,d0
}
    cf0c:	\----> addq.l #8,sp
    cf0e:	       rts

0000cf10 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    cf10:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf12:	       movea.l 12(sp),a0
    cf16:	       move.l 24(a0),d0
    cf1a:	       move.l d0,-(sp)
    cf1c:	       pea 1 <_start+0x1>
    cf20:	       move.l sp,d0
    cf22:	       addq.l #8,d0
    cf24:	       move.l d0,-(sp)
    cf26:	       jsr 10ffe <getValueType>
    cf2c:	       lea 12(sp),sp
    cf30:	       tst.w d0
    cf32:	   /-- bne.s cf38 <builtIn_setDefaultMusicVolume+0x28>
    cf34:	   |   moveq #1,d0
    cf36:	/--|-- bra.s cf56 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    cf38:	|  \-> moveq #24,d0
    cf3a:	|      add.l 12(sp),d0
    cf3e:	|      move.l d0,-(sp)
    cf40:	|      jsr 11982 <trimStack>
    cf46:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    cf48:	|      move.l (sp),d0
    cf4a:	|      move.l d0,-(sp)
    cf4c:	|      jsr 9ae6 <setDefaultMusicVolume>
    cf52:	|      addq.l #4,sp
	return BR_CONTINUE;
    cf54:	|      moveq #2,d0
}
    cf56:	\----> addq.l #4,sp
    cf58:	       rts

0000cf5a <builtIn_playSound>:

builtIn(playSound)
{
    cf5a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf5c:	       movea.l 12(sp),a0
    cf60:	       move.l 24(a0),d0
    cf64:	       move.l d0,-(sp)
    cf66:	       pea 5 <_start+0x5>
    cf6a:	       move.l sp,d0
    cf6c:	       addq.l #8,d0
    cf6e:	       move.l d0,-(sp)
    cf70:	       jsr 10ffe <getValueType>
    cf76:	       lea 12(sp),sp
    cf7a:	       tst.w d0
    cf7c:	   /-- bne.s cf82 <builtIn_playSound+0x28>
    cf7e:	   |   moveq #1,d0
    cf80:	/--|-- bra.s cfaa <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    cf82:	|  \-> moveq #24,d0
    cf84:	|      add.l 12(sp),d0
    cf88:	|      move.l d0,-(sp)
    cf8a:	|      jsr 11982 <trimStack>
    cf90:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    cf92:	|      move.l (sp),d0
    cf94:	|      clr.l -(sp)
    cf96:	|      move.l d0,-(sp)
    cf98:	|      jsr 9b0a <startSound>
    cf9e:	|      addq.l #8,sp
    cfa0:	|      tst.w d0
    cfa2:	|  /-- bne.s cfa8 <builtIn_playSound+0x4e>
    cfa4:	|  |   moveq #2,d0
    cfa6:	+--|-- bra.s cfaa <builtIn_playSound+0x50>
	return BR_CONTINUE;
    cfa8:	|  \-> moveq #2,d0
}
    cfaa:	\----> addq.l #4,sp
    cfac:	       rts

0000cfae <builtIn_loopSound>:

builtIn(loopSound)
{
    cfae:	             lea -28(sp),sp
    cfb2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    cfb4:	             tst.l 36(sp)
    cfb8:	         /-- bgt.s cfce <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    cfba:	         |   pea 1522c <custom.c.9a493ead+0xa7c>
    cfc0:	         |   jsr 13046 <KPrintF>
    cfc6:	         |   addq.l #4,sp
		return BR_ERROR;
    cfc8:	         |   moveq #1,d0
    cfca:	/--------|-- bra.w d18a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    cfce:	|        \-> moveq #1,d0
    cfd0:	|            cmp.l 36(sp),d0
    cfd4:	|     /----- blt.s d030 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    cfd6:	|     |      movea.l 40(sp),a0
    cfda:	|     |      move.l 24(a0),d0
    cfde:	|     |      move.l d0,-(sp)
    cfe0:	|     |      pea 5 <_start+0x5>
    cfe4:	|     |      lea 16(sp),a0
    cfe8:	|     |      move.l a0,-(sp)
    cfea:	|     |      jsr 10ffe <getValueType>
    cff0:	|     |      lea 12(sp),sp
    cff4:	|     |      tst.w d0
    cff6:	|     |  /-- bne.s cffe <builtIn_loopSound+0x50>
    cff8:	|     |  |   moveq #1,d0
    cffa:	+-----|--|-- bra.w d18a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    cffe:	|     |  \-> moveq #24,d0
    d000:	|     |      add.l 40(sp),d0
    d004:	|     |      move.l d0,-(sp)
    d006:	|     |      jsr 11982 <trimStack>
    d00c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    d00e:	|     |      move.l 8(sp),d0
    d012:	|     |      pea 1 <_start+0x1>
    d016:	|     |      move.l d0,-(sp)
    d018:	|     |      jsr 9b0a <startSound>
    d01e:	|     |      addq.l #8,sp
    d020:	|     |      tst.w d0
    d022:	|     |  /-- bne.s d02a <builtIn_loopSound+0x7c>
    d024:	|     |  |   moveq #2,d0
    d026:	+-----|--|-- bra.w d18a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    d02a:	|     |  \-> moveq #2,d0
    d02c:	+-----|----- bra.w d18a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    d030:	|     \----> moveq #2,d1
    d032:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    d036:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    d03a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    d03e:	|            movea.l 40(sp),a0
    d042:	|            movea.l 24(a0),a0
    d046:	|            move.l (a0),d0
    d048:	|            moveq #5,d1
    d04a:	|            cmp.l d0,d1
    d04c:	|  /-------- beq.w d124 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    d050:	|  |         movea.l 40(sp),a0
    d054:	|  |         move.l 24(a0),d0
    d058:	|  |         move.l d0,-(sp)
    d05a:	|  |         pea 1 <_start+0x1>
    d05e:	|  |         lea 12(sp),a0
    d062:	|  |         move.l a0,-(sp)
    d064:	|  |         jsr 10ffe <getValueType>
    d06a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    d06e:	|  |         moveq #24,d0
    d070:	|  |         add.l 40(sp),d0
    d074:	|  |         move.l d0,-(sp)
    d076:	|  |         jsr 11982 <trimStack>
    d07c:	|  |         addq.l #4,sp
			numParams--;
    d07e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    d082:	|  +-------- bra.w d124 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    d086:	|  |  /----> movea.l 40(sp),a0
    d08a:	|  |  |      move.l 24(a0),d0
    d08e:	|  |  |      move.l d0,-(sp)
    d090:	|  |  |      pea 5 <_start+0x5>
    d094:	|  |  |      lea 16(sp),a0
    d098:	|  |  |      move.l a0,-(sp)
    d09a:	|  |  |      jsr 10ffe <getValueType>
    d0a0:	|  |  |      lea 12(sp),sp
    d0a4:	|  |  |      tst.w d0
    d0a6:	|  |  |  /-- bne.s d0bc <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    d0a8:	|  |  |  |   pea 1526a <custom.c.9a493ead+0xaba>
    d0ae:	|  |  |  |   jsr 13046 <KPrintF>
    d0b4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    d0b6:	|  |  |  |   moveq #1,d0
    d0b8:	+--|--|--|-- bra.w d18a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    d0bc:	|  |  |  \-> moveq #20,d0
    d0be:	|  |  |      move.l d0,20(sp)
    d0c2:	|  |  |      clr.l 16(sp)
    d0c6:	|  |  |      move.l 16784 <SysBase>,d0
    d0cc:	|  |  |      movea.l d0,a6
    d0ce:	|  |  |      move.l 20(sp),d0
    d0d2:	|  |  |      move.l 16(sp),d1
    d0d6:	|  |  |      jsr -684(a6)
    d0da:	|  |  |      move.l d0,12(sp)
    d0de:	|  |  |      move.l 12(sp),d0
    d0e2:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    d0e6:	|  |  |  /-- bne.s d0ee <builtIn_loopSound+0x140>
    d0e8:	|  |  |  |   moveq #1,d0
    d0ea:	+--|--|--|-- bra.w d18a <builtIn_loopSound+0x1dc>

			s->next = old;
    d0ee:	|  |  |  \-> movea.l 28(sp),a0
    d0f2:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    d0f8:	|  |  |      movea.l 28(sp),a0
    d0fc:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    d100:	|  |  |      move.l 8(sp),d0
    d104:	|  |  |      movea.l 28(sp),a0
    d108:	|  |  |      move.l d0,(a0)
			old = s;
    d10a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    d110:	|  |  |      moveq #24,d0
    d112:	|  |  |      add.l 40(sp),d0
    d116:	|  |  |      move.l d0,-(sp)
    d118:	|  |  |      jsr 11982 <trimStack>
    d11e:	|  |  |      addq.l #4,sp
			numParams--;
    d120:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    d124:	|  \--|----> tst.l 36(sp)
    d128:	|     \----- bne.w d086 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    d12c:	|        /-- bra.s d138 <builtIn_loopSound+0x18a>
    d12e:	|     /--|-> movea.l 28(sp),a0
    d132:	|     |  |   move.l 4(a0),28(sp)
    d138:	|     |  \-> movea.l 28(sp),a0
    d13c:	|     |      move.l 4(a0),d0
    d140:	|     \----- bne.s d12e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    d142:	|            move.l 4(sp),d0
    d146:	|            moveq #1,d1
    d148:	|            cmp.l d0,d1
    d14a:	|     /----- bge.s d162 <builtIn_loopSound+0x1b4>
			s->next = old;
    d14c:	|     |      movea.l 28(sp),a0
    d150:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    d156:	|     |      movea.l 24(sp),a0
    d15a:	|     |      move.l 28(sp),8(a0)
    d160:	|     |  /-- bra.s d172 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    d162:	|     \--|-> move.l 4(sp),d0
    d166:	|        +-- beq.s d172 <builtIn_loopSound+0x1c4>
			s->next = s;
    d168:	|        |   movea.l 28(sp),a0
    d16c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    d172:	|        \-> movea.l 24(sp),a0
    d176:	|            moveq #-1,d0
    d178:	|            move.l d0,16(a0)
		playSoundList(old);
    d17c:	|            move.l 24(sp),-(sp)
    d180:	|            jsr 9a84 <playSoundList>
    d186:	|            addq.l #4,sp
		return BR_CONTINUE;
    d188:	|            moveq #2,d0
	}
}
    d18a:	\----------> movea.l (sp)+,a6
    d18c:	             lea 28(sp),sp
    d190:	             rts

0000d192 <builtIn_stopSound>:

builtIn(stopSound)
{
    d192:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d194:	       movea.l 12(sp),a0
    d198:	       move.l 24(a0),d0
    d19c:	       move.l d0,-(sp)
    d19e:	       pea 5 <_start+0x5>
    d1a2:	       move.l sp,d0
    d1a4:	       addq.l #8,d0
    d1a6:	       move.l d0,-(sp)
    d1a8:	       jsr 10ffe <getValueType>
    d1ae:	       lea 12(sp),sp
    d1b2:	       tst.w d0
    d1b4:	   /-- bne.s d1ba <builtIn_stopSound+0x28>
    d1b6:	   |   moveq #1,d0
    d1b8:	/--|-- bra.s d1d8 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    d1ba:	|  \-> moveq #24,d0
    d1bc:	|      add.l 12(sp),d0
    d1c0:	|      move.l d0,-(sp)
    d1c2:	|      jsr 11982 <trimStack>
    d1c8:	|      addq.l #4,sp
	huntKillSound (v);
    d1ca:	|      move.l (sp),d0
    d1cc:	|      move.l d0,-(sp)
    d1ce:	|      jsr 9a7c <huntKillSound>
    d1d4:	|      addq.l #4,sp
	return BR_CONTINUE;
    d1d6:	|      moveq #2,d0
}
    d1d8:	\----> addq.l #4,sp
    d1da:	       rts

0000d1dc <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    d1dc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1de:	       movea.l 12(sp),a0
    d1e2:	       move.l 24(a0),d0
    d1e6:	       move.l d0,-(sp)
    d1e8:	       pea 1 <_start+0x1>
    d1ec:	       move.l sp,d0
    d1ee:	       addq.l #8,d0
    d1f0:	       move.l d0,-(sp)
    d1f2:	       jsr 10ffe <getValueType>
    d1f8:	       lea 12(sp),sp
    d1fc:	       tst.w d0
    d1fe:	   /-- bne.s d204 <builtIn_setDefaultSoundVolume+0x28>
    d200:	   |   moveq #1,d0
    d202:	/--|-- bra.s d222 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    d204:	|  \-> moveq #24,d0
    d206:	|      add.l 12(sp),d0
    d20a:	|      move.l d0,-(sp)
    d20c:	|      jsr 11982 <trimStack>
    d212:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    d214:	|      move.l (sp),d0
    d216:	|      move.l d0,-(sp)
    d218:	|      jsr 9af2 <setDefaultSoundVolume>
    d21e:	|      addq.l #4,sp
	return BR_CONTINUE;
    d220:	|      moveq #2,d0
}
    d222:	\----> addq.l #4,sp
    d224:	       rts

0000d226 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    d226:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d228:	       movea.l 16(sp),a0
    d22c:	       move.l 24(a0),d0
    d230:	       move.l d0,-(sp)
    d232:	       pea 1 <_start+0x1>
    d236:	       move.l sp,d0
    d238:	       addq.l #8,d0
    d23a:	       move.l d0,-(sp)
    d23c:	       jsr 10ffe <getValueType>
    d242:	       lea 12(sp),sp
    d246:	       tst.w d0
    d248:	   /-- bne.s d24e <builtIn_setSoundVolume+0x28>
    d24a:	   |   moveq #1,d0
    d24c:	/--|-- bra.s d2a8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d24e:	|  \-> moveq #24,d0
    d250:	|      add.l 16(sp),d0
    d254:	|      move.l d0,-(sp)
    d256:	|      jsr 11982 <trimStack>
    d25c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d25e:	|      movea.l 16(sp),a0
    d262:	|      move.l 24(a0),d0
    d266:	|      move.l d0,-(sp)
    d268:	|      pea 5 <_start+0x5>
    d26c:	|      moveq #12,d0
    d26e:	|      add.l sp,d0
    d270:	|      move.l d0,-(sp)
    d272:	|      jsr 10ffe <getValueType>
    d278:	|      lea 12(sp),sp
    d27c:	|      tst.w d0
    d27e:	|  /-- bne.s d284 <builtIn_setSoundVolume+0x5e>
    d280:	|  |   moveq #1,d0
    d282:	+--|-- bra.s d2a8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d284:	|  \-> moveq #24,d0
    d286:	|      add.l 16(sp),d0
    d28a:	|      move.l d0,-(sp)
    d28c:	|      jsr 11982 <trimStack>
    d292:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    d294:	|      move.l (sp),d1
    d296:	|      move.l 4(sp),d0
    d29a:	|      move.l d1,-(sp)
    d29c:	|      move.l d0,-(sp)
    d29e:	|      jsr 9b06 <setSoundVolume>
    d2a4:	|      addq.l #8,sp
	return BR_CONTINUE;
    d2a6:	|      moveq #2,d0
}
    d2a8:	\----> addq.l #8,sp
    d2aa:	       rts

0000d2ac <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    d2ac:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2b0:	       movea.l 20(sp),a0
    d2b4:	       move.l 24(a0),d0
    d2b8:	       move.l d0,-(sp)
    d2ba:	       pea 1 <_start+0x1>
    d2be:	       moveq #12,d0
    d2c0:	       add.l sp,d0
    d2c2:	       move.l d0,-(sp)
    d2c4:	       jsr 10ffe <getValueType>
    d2ca:	       lea 12(sp),sp
    d2ce:	       tst.w d0
    d2d0:	   /-- bne.s d2d8 <builtIn_setSoundLoopPoints+0x2c>
    d2d2:	   |   moveq #1,d0
    d2d4:	/--|-- bra.w d370 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d2d8:	|  \-> moveq #24,d0
    d2da:	|      add.l 20(sp),d0
    d2de:	|      move.l d0,-(sp)
    d2e0:	|      jsr 11982 <trimStack>
    d2e6:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2e8:	|      movea.l 20(sp),a0
    d2ec:	|      move.l 24(a0),d0
    d2f0:	|      move.l d0,-(sp)
    d2f2:	|      pea 1 <_start+0x1>
    d2f6:	|      lea 8(sp),a0
    d2fa:	|      move.l a0,-(sp)
    d2fc:	|      jsr 10ffe <getValueType>
    d302:	|      lea 12(sp),sp
    d306:	|      tst.w d0
    d308:	|  /-- bne.s d30e <builtIn_setSoundLoopPoints+0x62>
    d30a:	|  |   moveq #1,d0
    d30c:	+--|-- bra.s d370 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d30e:	|  \-> moveq #24,d0
    d310:	|      add.l 20(sp),d0
    d314:	|      move.l d0,-(sp)
    d316:	|      jsr 11982 <trimStack>
    d31c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d31e:	|      movea.l 20(sp),a0
    d322:	|      move.l 24(a0),d0
    d326:	|      move.l d0,-(sp)
    d328:	|      pea 5 <_start+0x5>
    d32c:	|      moveq #16,d0
    d32e:	|      add.l sp,d0
    d330:	|      move.l d0,-(sp)
    d332:	|      jsr 10ffe <getValueType>
    d338:	|      lea 12(sp),sp
    d33c:	|      tst.w d0
    d33e:	|  /-- bne.s d344 <builtIn_setSoundLoopPoints+0x98>
    d340:	|  |   moveq #1,d0
    d342:	+--|-- bra.s d370 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d344:	|  \-> moveq #24,d0
    d346:	|      add.l 20(sp),d0
    d34a:	|      move.l d0,-(sp)
    d34c:	|      jsr 11982 <trimStack>
    d352:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    d354:	|      movea.l 4(sp),a0
    d358:	|      move.l (sp),d1
    d35a:	|      move.l 8(sp),d0
    d35e:	|      move.l a0,-(sp)
    d360:	|      move.l d1,-(sp)
    d362:	|      move.l d0,-(sp)
    d364:	|      jsr 9afe <setSoundLoop>
    d36a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d36e:	|      moveq #2,d0
}
    d370:	\----> lea 12(sp),sp
    d374:	       rts

0000d376 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    d376:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d378:	          movea.l 12(sp),a0
    d37c:	          movea.l 24(a0),a0
    d380:	          move.l (a0),d0
    d382:	          moveq #5,d1
    d384:	          cmp.l d0,d1
    d386:	/-------- bne.s d3ca <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d388:	|         movea.l 12(sp),a0
    d38c:	|         move.l 24(a0),d0
    d390:	|         move.l d0,-(sp)
    d392:	|         pea 5 <_start+0x5>
    d396:	|         move.l sp,d0
    d398:	|         addq.l #8,d0
    d39a:	|         move.l d0,-(sp)
    d39c:	|         jsr 10ffe <getValueType>
    d3a2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d3a6:	|         moveq #24,d0
    d3a8:	|         add.l 12(sp),d0
    d3ac:	|         move.l d0,-(sp)
    d3ae:	|         jsr 11982 <trimStack>
    d3b4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    d3b6:	|         move.l (sp),d0
    d3b8:	|         move.l d0,-(sp)
    d3ba:	|         jsr 127f0 <setFloor>
    d3c0:	|         addq.l #4,sp
    d3c2:	|         tst.w d0
    d3c4:	|  /----- bne.s d3e0 <builtIn_setFloor+0x6a>
    d3c6:	|  |      moveq #1,d0
    d3c8:	|  |  /-- bra.s d3e2 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    d3ca:	\--|--|-> moveq #24,d0
    d3cc:	   |  |   add.l 12(sp),d0
    d3d0:	   |  |   move.l d0,-(sp)
    d3d2:	   |  |   jsr 11982 <trimStack>
    d3d8:	   |  |   addq.l #4,sp
		setFloorNull ();
    d3da:	   |  |   jsr 12f6a <setFloorNull>
	}
	return BR_CONTINUE;
    d3e0:	   \--|-> moveq #2,d0
}
    d3e2:	      \-> addq.l #4,sp
    d3e4:	          rts

0000d3e6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    d3e6:	jsr 12088 <drawFloor>
	return BR_CONTINUE;
    d3ec:	moveq #2,d0
}
    d3ee:	rts

0000d3f0 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    d3f0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d3f2:	          movea.l 12(sp),a0
    d3f6:	          movea.l 24(a0),a0
    d3fa:	          move.l (a0),d0
    d3fc:	          moveq #5,d1
    d3fe:	          cmp.l d0,d1
    d400:	/-------- bne.s d444 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d402:	|         movea.l 12(sp),a0
    d406:	|         move.l 24(a0),d0
    d40a:	|         move.l d0,-(sp)
    d40c:	|         pea 5 <_start+0x5>
    d410:	|         move.l sp,d0
    d412:	|         addq.l #8,d0
    d414:	|         move.l d0,-(sp)
    d416:	|         jsr 10ffe <getValueType>
    d41c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d420:	|         moveq #24,d0
    d422:	|         add.l 12(sp),d0
    d426:	|         move.l d0,-(sp)
    d428:	|         jsr 11982 <trimStack>
    d42e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    d430:	|         move.l (sp),d0
    d432:	|         move.l d0,-(sp)
    d434:	|         jsr 5ed2 <setZBuffer>
    d43a:	|         addq.l #4,sp
    d43c:	|         tst.w d0
    d43e:	|  /----- bne.s d45a <builtIn_setZBuffer+0x6a>
    d440:	|  |      moveq #1,d0
    d442:	|  |  /-- bra.s d45c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    d444:	\--|--|-> moveq #24,d0
    d446:	   |  |   add.l 12(sp),d0
    d44a:	   |  |   move.l d0,-(sp)
    d44c:	   |  |   jsr 11982 <trimStack>
    d452:	   |  |   addq.l #4,sp
		killZBuffer ();
    d454:	   |  |   jsr 5e7c <killZBuffer>
	}
	return BR_CONTINUE;
    d45a:	   \--|-> moveq #2,d0
}
    d45c:	      \-> addq.l #4,sp
    d45e:	          rts

0000d460 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    d460:	pea 152a1 <custom.c.9a493ead+0xaf1>
    d466:	jsr 13046 <KPrintF>
    d46c:	addq.l #4,sp
	return BR_CONTINUE;
    d46e:	moveq #2,d0
}
    d470:	rts

0000d472 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d472:	          movea.l 8(sp),a0
    d476:	          move.l 24(a0),d0
    d47a:	          move.l d0,-(sp)
    d47c:	          pea 1 <_start+0x1>
    d480:	          pea 168a6 <speechMode>
    d486:	          jsr 10ffe <getValueType>
    d48c:	          lea 12(sp),sp
    d490:	          tst.w d0
    d492:	      /-- bne.s d498 <builtIn_setSpeechMode+0x26>
    d494:	      |   moveq #1,d0
    d496:	/-----|-- bra.s d4d0 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    d498:	|     \-> moveq #24,d0
    d49a:	|         add.l 8(sp),d0
    d49e:	|         move.l d0,-(sp)
    d4a0:	|         jsr 11982 <trimStack>
    d4a6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    d4a8:	|         move.l 168a6 <speechMode>,d0
    d4ae:	|     /-- bmi.s d4bc <builtIn_setSpeechMode+0x4a>
    d4b0:	|     |   move.l 168a6 <speechMode>,d0
    d4b6:	|     |   moveq #2,d1
    d4b8:	|     |   cmp.l d0,d1
    d4ba:	|  /--|-- bge.s d4ce <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    d4bc:	|  |  \-> pea 152ba <custom.c.9a493ead+0xb0a>
    d4c2:	|  |      jsr 13046 <KPrintF>
    d4c8:	|  |      addq.l #4,sp
		return BR_ERROR;
    d4ca:	|  |      moveq #1,d0
    d4cc:	+--|----- bra.s d4d0 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    d4ce:	|  \----> moveq #2,d0
}
    d4d0:	\-------> rts

0000d4d2 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    d4d2:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    d4d4:	       jsr 5684 <isThereAnySpeechGoingOn>
    d4da:	       move.l d0,(sp)
	if (i == -1) {
    d4dc:	       moveq #-1,d0
    d4de:	       cmp.l (sp),d0
    d4e0:	/----- bne.s d4fc <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    d4e2:	|      moveq #28,d0
    d4e4:	|      add.l 12(sp),d0
    d4e8:	|      clr.l -(sp)
    d4ea:	|      pea 1 <_start+0x1>
    d4ee:	|      move.l d0,-(sp)
    d4f0:	|      jsr 118f0 <setVariable>
    d4f6:	|      lea 12(sp),sp
    d4fa:	|  /-- bra.s d514 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    d4fc:	\--|-> moveq #28,d0
    d4fe:	   |   add.l 12(sp),d0
    d502:	   |   move.l (sp),-(sp)
    d504:	   |   pea 7 <_start+0x7>
    d508:	   |   move.l d0,-(sp)
    d50a:	   |   jsr 118f0 <setVariable>
    d510:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    d514:	   \-> moveq #2,d0
}
    d516:	       addq.l #4,sp
    d518:	       rts

0000d51a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    d51a:	jsr 39c0 <killSpeechTimers>
	return BR_CONTINUE;
    d520:	moveq #2,d0
}
    d522:	rts

0000d524 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    d524:	       move.l 168e0 <overRegion>,d0
    d52a:	/----- beq.s d554 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    d52c:	|      movea.l 168e0 <overRegion>,a0
    d532:	|      movea.l 28(a0),a0
    d536:	|      move.l 4(a0),d1
    d53a:	|      moveq #28,d0
    d53c:	|      add.l 8(sp),d0
    d540:	|      move.l d1,-(sp)
    d542:	|      pea 7 <_start+0x7>
    d546:	|      move.l d0,-(sp)
    d548:	|      jsr 118f0 <setVariable>
    d54e:	|      lea 12(sp),sp
    d552:	|  /-- bra.s d56c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    d554:	\--|-> moveq #28,d0
    d556:	   |   add.l 8(sp),d0
    d55a:	   |   clr.l -(sp)
    d55c:	   |   pea 1 <_start+0x1>
    d560:	   |   move.l d0,-(sp)
    d562:	   |   jsr 118f0 <setVariable>
    d568:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    d56c:	   \-> moveq #2,d0
}
    d56e:	       rts

0000d570 <builtIn_rename>:

builtIn(rename)
{
    d570:	       lea -16(sp),sp
    d574:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d576:	       movea.l 28(sp),a0
    d57a:	       move.l 24(a0),d0
    d57e:	       move.l d0,-(sp)
    d580:	       jsr 115d4 <getTextFromAnyVar>
    d586:	       addq.l #4,sp
    d588:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    d58c:	   /-- bne.s d592 <builtIn_rename+0x22>
    d58e:	   |   moveq #1,d0
    d590:	/--|-- bra.s d60c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d592:	|  \-> moveq #24,d0
    d594:	|      add.l 28(sp),d0
    d598:	|      move.l d0,-(sp)
    d59a:	|      jsr 11982 <trimStack>
    d5a0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    d5a2:	|      movea.l 28(sp),a0
    d5a6:	|      move.l 24(a0),d0
    d5aa:	|      move.l d0,-(sp)
    d5ac:	|      pea 7 <_start+0x7>
    d5b0:	|      lea 12(sp),a0
    d5b4:	|      move.l a0,-(sp)
    d5b6:	|      jsr 10ffe <getValueType>
    d5bc:	|      lea 12(sp),sp
    d5c0:	|      tst.w d0
    d5c2:	|  /-- bne.s d5c8 <builtIn_rename+0x58>
    d5c4:	|  |   moveq #1,d0
    d5c6:	+--|-- bra.s d60c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d5c8:	|  \-> moveq #24,d0
    d5ca:	|      add.l 28(sp),d0
    d5ce:	|      move.l d0,-(sp)
    d5d0:	|      jsr 11982 <trimStack>
    d5d6:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    d5d8:	|      move.l 4(sp),d0
    d5dc:	|      move.l d0,-(sp)
    d5de:	|      jsr 9e34 <findObjectType>
    d5e4:	|      addq.l #4,sp
    d5e6:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    d5ea:	|      movea.l 12(sp),a0
    d5ee:	|      move.l (a0),8(sp)
    d5f2:	|      move.l 16784 <SysBase>,d0
    d5f8:	|      movea.l d0,a6
    d5fa:	|      movea.l 8(sp),a1
    d5fe:	|      jsr -690(a6)
	o->screenName = newText;
    d602:	|      movea.l 12(sp),a0
    d606:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    d60a:	|      moveq #2,d0
}
    d60c:	\----> movea.l (sp)+,a6
    d60e:	       lea 16(sp),sp
    d612:	       rts

0000d614 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    d614:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d618:	          movea.l 20(sp),a0
    d61c:	          move.l 24(a0),d0
    d620:	          move.l d0,-(sp)
    d622:	          pea 7 <_start+0x7>
    d626:	          lea 8(sp),a0
    d62a:	          move.l a0,-(sp)
    d62c:	          jsr 10ffe <getValueType>
    d632:	          lea 12(sp),sp
    d636:	          tst.w d0
    d638:	      /-- bne.s d640 <builtIn_getObjectX+0x2c>
    d63a:	      |   moveq #1,d0
    d63c:	/-----|-- bra.w d6dc <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    d640:	|     \-> moveq #24,d0
    d642:	|         add.l 20(sp),d0
    d646:	|         move.l d0,-(sp)
    d648:	|         jsr 11982 <trimStack>
    d64e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d650:	|         move.l (sp),d0
    d652:	|         move.l d0,-(sp)
    d654:	|         jsr 71d8 <findPerson>
    d65a:	|         addq.l #4,sp
    d65c:	|         move.l d0,8(sp)
	if (pers) {
    d660:	|     /-- beq.s d68e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    d662:	|     |   movea.l 8(sp),a0
    d666:	|     |   move.l (a0),d0
    d668:	|     |   move.l d0,-(sp)
    d66a:	|     |   jsr 13296 <__fixsfsi>
    d670:	|     |   addq.l #4,sp
    d672:	|     |   move.l d0,d1
    d674:	|     |   moveq #28,d0
    d676:	|     |   add.l 20(sp),d0
    d67a:	|     |   move.l d1,-(sp)
    d67c:	|     |   pea 1 <_start+0x1>
    d680:	|     |   move.l d0,-(sp)
    d682:	|     |   jsr 118f0 <setVariable>
    d688:	|     |   lea 12(sp),sp
    d68c:	|  /--|-- bra.s d6da <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d68e:	|  |  \-> move.l (sp),d0
    d690:	|  |      move.l d0,-(sp)
    d692:	|  |      jsr 11ac8 <getRegionForObject>
    d698:	|  |      addq.l #4,sp
    d69a:	|  |      move.l d0,4(sp)
		if (la) {
    d69e:	|  |  /-- beq.s d6c2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    d6a0:	|  |  |   movea.l 4(sp),a0
    d6a4:	|  |  |   move.l 16(a0),d1
    d6a8:	|  |  |   moveq #28,d0
    d6aa:	|  |  |   add.l 20(sp),d0
    d6ae:	|  |  |   move.l d1,-(sp)
    d6b0:	|  |  |   pea 1 <_start+0x1>
    d6b4:	|  |  |   move.l d0,-(sp)
    d6b6:	|  |  |   jsr 118f0 <setVariable>
    d6bc:	|  |  |   lea 12(sp),sp
    d6c0:	|  +--|-- bra.s d6da <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d6c2:	|  |  \-> moveq #28,d0
    d6c4:	|  |      add.l 20(sp),d0
    d6c8:	|  |      clr.l -(sp)
    d6ca:	|  |      pea 1 <_start+0x1>
    d6ce:	|  |      move.l d0,-(sp)
    d6d0:	|  |      jsr 118f0 <setVariable>
    d6d6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d6da:	|  \----> moveq #2,d0
}
    d6dc:	\-------> lea 12(sp),sp
    d6e0:	          rts

0000d6e2 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    d6e2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d6e6:	          movea.l 20(sp),a0
    d6ea:	          move.l 24(a0),d0
    d6ee:	          move.l d0,-(sp)
    d6f0:	          pea 7 <_start+0x7>
    d6f4:	          lea 8(sp),a0
    d6f8:	          move.l a0,-(sp)
    d6fa:	          jsr 10ffe <getValueType>
    d700:	          lea 12(sp),sp
    d704:	          tst.w d0
    d706:	      /-- bne.s d70e <builtIn_getObjectY+0x2c>
    d708:	      |   moveq #1,d0
    d70a:	/-----|-- bra.w d7ac <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    d70e:	|     \-> moveq #24,d0
    d710:	|         add.l 20(sp),d0
    d714:	|         move.l d0,-(sp)
    d716:	|         jsr 11982 <trimStack>
    d71c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d71e:	|         move.l (sp),d0
    d720:	|         move.l d0,-(sp)
    d722:	|         jsr 71d8 <findPerson>
    d728:	|         addq.l #4,sp
    d72a:	|         move.l d0,8(sp)
	if (pers) {
    d72e:	|     /-- beq.s d75e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    d730:	|     |   movea.l 8(sp),a0
    d734:	|     |   move.l 4(a0),d0
    d738:	|     |   move.l d0,-(sp)
    d73a:	|     |   jsr 13296 <__fixsfsi>
    d740:	|     |   addq.l #4,sp
    d742:	|     |   move.l d0,d1
    d744:	|     |   moveq #28,d0
    d746:	|     |   add.l 20(sp),d0
    d74a:	|     |   move.l d1,-(sp)
    d74c:	|     |   pea 1 <_start+0x1>
    d750:	|     |   move.l d0,-(sp)
    d752:	|     |   jsr 118f0 <setVariable>
    d758:	|     |   lea 12(sp),sp
    d75c:	|  /--|-- bra.s d7aa <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d75e:	|  |  \-> move.l (sp),d0
    d760:	|  |      move.l d0,-(sp)
    d762:	|  |      jsr 11ac8 <getRegionForObject>
    d768:	|  |      addq.l #4,sp
    d76a:	|  |      move.l d0,4(sp)
		if (la) {
    d76e:	|  |  /-- beq.s d792 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    d770:	|  |  |   movea.l 4(sp),a0
    d774:	|  |  |   move.l 20(a0),d1
    d778:	|  |  |   moveq #28,d0
    d77a:	|  |  |   add.l 20(sp),d0
    d77e:	|  |  |   move.l d1,-(sp)
    d780:	|  |  |   pea 1 <_start+0x1>
    d784:	|  |  |   move.l d0,-(sp)
    d786:	|  |  |   jsr 118f0 <setVariable>
    d78c:	|  |  |   lea 12(sp),sp
    d790:	|  +--|-- bra.s d7aa <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d792:	|  |  \-> moveq #28,d0
    d794:	|  |      add.l 20(sp),d0
    d798:	|  |      clr.l -(sp)
    d79a:	|  |      pea 1 <_start+0x1>
    d79e:	|  |      move.l d0,-(sp)
    d7a0:	|  |      jsr 118f0 <setVariable>
    d7a6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d7aa:	|  \----> moveq #2,d0
}
    d7ac:	\-------> lea 12(sp),sp
    d7b0:	          rts

0000d7b2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    d7b2:	       lea -32(sp),sp
    d7b6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7ba:	       movea.l 56(sp),a0
    d7be:	       move.l 24(a0),d0
    d7c2:	       move.l d0,-(sp)
    d7c4:	       pea 1 <_start+0x1>
    d7c8:	       lea 28(sp),a0
    d7cc:	       move.l a0,-(sp)
    d7ce:	       jsr 10ffe <getValueType>
    d7d4:	       lea 12(sp),sp
    d7d8:	       tst.w d0
    d7da:	   /-- bne.s d7e2 <builtIn_addScreenRegion+0x30>
    d7dc:	   |   moveq #1,d0
    d7de:	/--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d7e2:	|  \-> moveq #24,d0
    d7e4:	|      add.l 56(sp),d0
    d7e8:	|      move.l d0,-(sp)
    d7ea:	|      jsr 11982 <trimStack>
    d7f0:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7f2:	|      movea.l 56(sp),a0
    d7f6:	|      move.l 24(a0),d0
    d7fa:	|      move.l d0,-(sp)
    d7fc:	|      pea 1 <_start+0x1>
    d800:	|      moveq #48,d0
    d802:	|      add.l sp,d0
    d804:	|      move.l d0,-(sp)
    d806:	|      jsr 10ffe <getValueType>
    d80c:	|      lea 12(sp),sp
    d810:	|      tst.w d0
    d812:	|  /-- bne.s d81a <builtIn_addScreenRegion+0x68>
    d814:	|  |   moveq #1,d0
    d816:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d81a:	|  \-> moveq #24,d0
    d81c:	|      add.l 56(sp),d0
    d820:	|      move.l d0,-(sp)
    d822:	|      jsr 11982 <trimStack>
    d828:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d82a:	|      movea.l 56(sp),a0
    d82e:	|      move.l 24(a0),d0
    d832:	|      move.l d0,-(sp)
    d834:	|      pea 1 <_start+0x1>
    d838:	|      moveq #52,d0
    d83a:	|      add.l sp,d0
    d83c:	|      move.l d0,-(sp)
    d83e:	|      jsr 10ffe <getValueType>
    d844:	|      lea 12(sp),sp
    d848:	|      tst.w d0
    d84a:	|  /-- bne.s d852 <builtIn_addScreenRegion+0xa0>
    d84c:	|  |   moveq #1,d0
    d84e:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d852:	|  \-> moveq #24,d0
    d854:	|      add.l 56(sp),d0
    d858:	|      move.l d0,-(sp)
    d85a:	|      jsr 11982 <trimStack>
    d860:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d862:	|      movea.l 56(sp),a0
    d866:	|      move.l 24(a0),d0
    d86a:	|      move.l d0,-(sp)
    d86c:	|      pea 1 <_start+0x1>
    d870:	|      lea 32(sp),a0
    d874:	|      move.l a0,-(sp)
    d876:	|      jsr 10ffe <getValueType>
    d87c:	|      lea 12(sp),sp
    d880:	|      tst.w d0
    d882:	|  /-- bne.s d88a <builtIn_addScreenRegion+0xd8>
    d884:	|  |   moveq #1,d0
    d886:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d88a:	|  \-> moveq #24,d0
    d88c:	|      add.l 56(sp),d0
    d890:	|      move.l d0,-(sp)
    d892:	|      jsr 11982 <trimStack>
    d898:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d89a:	|      movea.l 56(sp),a0
    d89e:	|      move.l 24(a0),d0
    d8a2:	|      move.l d0,-(sp)
    d8a4:	|      pea 1 <_start+0x1>
    d8a8:	|      lea 36(sp),a0
    d8ac:	|      move.l a0,-(sp)
    d8ae:	|      jsr 10ffe <getValueType>
    d8b4:	|      lea 12(sp),sp
    d8b8:	|      tst.w d0
    d8ba:	|  /-- bne.s d8c2 <builtIn_addScreenRegion+0x110>
    d8bc:	|  |   moveq #1,d0
    d8be:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d8c2:	|  \-> moveq #24,d0
    d8c4:	|      add.l 56(sp),d0
    d8c8:	|      move.l d0,-(sp)
    d8ca:	|      jsr 11982 <trimStack>
    d8d0:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d8d2:	|      movea.l 56(sp),a0
    d8d6:	|      move.l 24(a0),d0
    d8da:	|      move.l d0,-(sp)
    d8dc:	|      pea 1 <_start+0x1>
    d8e0:	|      lea 40(sp),a0
    d8e4:	|      move.l a0,-(sp)
    d8e6:	|      jsr 10ffe <getValueType>
    d8ec:	|      lea 12(sp),sp
    d8f0:	|      tst.w d0
    d8f2:	|  /-- bne.s d8fa <builtIn_addScreenRegion+0x148>
    d8f4:	|  |   moveq #1,d0
    d8f6:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d8fa:	|  \-> moveq #24,d0
    d8fc:	|      add.l 56(sp),d0
    d900:	|      move.l d0,-(sp)
    d902:	|      jsr 11982 <trimStack>
    d908:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d90a:	|      movea.l 56(sp),a0
    d90e:	|      move.l 24(a0),d0
    d912:	|      move.l d0,-(sp)
    d914:	|      pea 1 <_start+0x1>
    d918:	|      lea 44(sp),a0
    d91c:	|      move.l a0,-(sp)
    d91e:	|      jsr 10ffe <getValueType>
    d924:	|      lea 12(sp),sp
    d928:	|      tst.w d0
    d92a:	|  /-- bne.s d932 <builtIn_addScreenRegion+0x180>
    d92c:	|  |   moveq #1,d0
    d92e:	+--|-- bra.w d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d932:	|  \-> moveq #24,d0
    d934:	|      add.l 56(sp),d0
    d938:	|      move.l d0,-(sp)
    d93a:	|      jsr 11982 <trimStack>
    d940:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d942:	|      movea.l 56(sp),a0
    d946:	|      move.l 24(a0),d0
    d94a:	|      move.l d0,-(sp)
    d94c:	|      pea 7 <_start+0x7>
    d950:	|      lea 24(sp),a0
    d954:	|      move.l a0,-(sp)
    d956:	|      jsr 10ffe <getValueType>
    d95c:	|      lea 12(sp),sp
    d960:	|      tst.w d0
    d962:	|  /-- bne.s d968 <builtIn_addScreenRegion+0x1b6>
    d964:	|  |   moveq #1,d0
    d966:	+--|-- bra.s d9bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d968:	|  \-> moveq #24,d0
    d96a:	|      add.l 56(sp),d0
    d96e:	|      move.l d0,-(sp)
    d970:	|      jsr 11982 <trimStack>
    d976:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d978:	|      move.l 16(sp),d5
    d97c:	|      move.l 20(sp),d4
    d980:	|      move.l 40(sp),d3
    d984:	|      move.l 44(sp),d2
    d988:	|      movea.l 24(sp),a1
    d98c:	|      movea.l 28(sp),a0
    d990:	|      move.l 32(sp),d1
    d994:	|      move.l 36(sp),d0
    d998:	|      move.l d5,-(sp)
    d99a:	|      move.l d4,-(sp)
    d99c:	|      move.l d3,-(sp)
    d99e:	|      move.l d2,-(sp)
    d9a0:	|      move.l a1,-(sp)
    d9a2:	|      move.l a0,-(sp)
    d9a4:	|      move.l d1,-(sp)
    d9a6:	|      move.l d0,-(sp)
    d9a8:	|      jsr 11a08 <addScreenRegion>
    d9ae:	|      lea 32(sp),sp
    d9b2:	|      tst.w d0
    d9b4:	|  /-- beq.s d9ba <builtIn_addScreenRegion+0x208>
    d9b6:	|  |   moveq #2,d0
    d9b8:	+--|-- bra.s d9bc <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d9ba:	|  \-> moveq #1,d0

}
    d9bc:	\----> movem.l (sp)+,d2-d5
    d9c0:	       lea 32(sp),sp
    d9c4:	       rts

0000d9c6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d9c6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9c8:	       movea.l 12(sp),a0
    d9cc:	       move.l 24(a0),d0
    d9d0:	       move.l d0,-(sp)
    d9d2:	       pea 7 <_start+0x7>
    d9d6:	       move.l sp,d0
    d9d8:	       addq.l #8,d0
    d9da:	       move.l d0,-(sp)
    d9dc:	       jsr 10ffe <getValueType>
    d9e2:	       lea 12(sp),sp
    d9e6:	       tst.w d0
    d9e8:	   /-- bne.s d9ee <builtIn_removeScreenRegion+0x28>
    d9ea:	   |   moveq #1,d0
    d9ec:	/--|-- bra.s da0c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d9ee:	|  \-> moveq #24,d0
    d9f0:	|      add.l 12(sp),d0
    d9f4:	|      move.l d0,-(sp)
    d9f6:	|      jsr 11982 <trimStack>
    d9fc:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d9fe:	|      move.l (sp),d0
    da00:	|      move.l d0,-(sp)
    da02:	|      jsr 11c70 <removeScreenRegion>
    da08:	|      addq.l #4,sp
	return BR_CONTINUE;
    da0a:	|      moveq #2,d0
}
    da0c:	\----> addq.l #4,sp
    da0e:	       rts

0000da10 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    da10:	jsr 11df4 <showBoxes>
	return BR_CONTINUE;
    da16:	moveq #2,d0
}
    da18:	rts

0000da1a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    da1a:	jsr 11af6 <killAllRegions>
	return BR_CONTINUE;
    da20:	moveq #2,d0
}
    da22:	rts

0000da24 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    da24:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    da28:	       movea.l 24(sp),a0
    da2c:	       move.l 24(a0),d0
    da30:	       move.l d0,-(sp)
    da32:	       jsr 10caa <getCostumeFromVar>
    da38:	       addq.l #4,sp
    da3a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    da3e:	   /-- bne.s da46 <builtIn_addCharacter+0x22>
    da40:	   |   moveq #1,d0
    da42:	/--|-- bra.w db22 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    da46:	|  \-> moveq #24,d0
    da48:	|      add.l 24(sp),d0
    da4c:	|      move.l d0,-(sp)
    da4e:	|      jsr 11982 <trimStack>
    da54:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da56:	|      movea.l 24(sp),a0
    da5a:	|      move.l 24(a0),d0
    da5e:	|      move.l d0,-(sp)
    da60:	|      pea 1 <_start+0x1>
    da64:	|      lea 12(sp),a0
    da68:	|      move.l a0,-(sp)
    da6a:	|      jsr 10ffe <getValueType>
    da70:	|      lea 12(sp),sp
    da74:	|      tst.w d0
    da76:	|  /-- bne.s da7e <builtIn_addCharacter+0x5a>
    da78:	|  |   moveq #1,d0
    da7a:	+--|-- bra.w db22 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    da7e:	|  \-> moveq #24,d0
    da80:	|      add.l 24(sp),d0
    da84:	|      move.l d0,-(sp)
    da86:	|      jsr 11982 <trimStack>
    da8c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da8e:	|      movea.l 24(sp),a0
    da92:	|      move.l 24(a0),d0
    da96:	|      move.l d0,-(sp)
    da98:	|      pea 1 <_start+0x1>
    da9c:	|      moveq #16,d0
    da9e:	|      add.l sp,d0
    daa0:	|      move.l d0,-(sp)
    daa2:	|      jsr 10ffe <getValueType>
    daa8:	|      lea 12(sp),sp
    daac:	|      tst.w d0
    daae:	|  /-- bne.s dab4 <builtIn_addCharacter+0x90>
    dab0:	|  |   moveq #1,d0
    dab2:	+--|-- bra.s db22 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    dab4:	|  \-> moveq #24,d0
    dab6:	|      add.l 24(sp),d0
    daba:	|      move.l d0,-(sp)
    dabc:	|      jsr 11982 <trimStack>
    dac2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dac4:	|      movea.l 24(sp),a0
    dac8:	|      move.l 24(a0),d0
    dacc:	|      move.l d0,-(sp)
    dace:	|      pea 7 <_start+0x7>
    dad2:	|      lea 8(sp),a0
    dad6:	|      move.l a0,-(sp)
    dad8:	|      jsr 10ffe <getValueType>
    dade:	|      lea 12(sp),sp
    dae2:	|      tst.w d0
    dae4:	|  /-- bne.s daea <builtIn_addCharacter+0xc6>
    dae6:	|  |   moveq #1,d0
    dae8:	+--|-- bra.s db22 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    daea:	|  \-> moveq #24,d0
    daec:	|      add.l 24(sp),d0
    daf0:	|      move.l d0,-(sp)
    daf2:	|      jsr 11982 <trimStack>
    daf8:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    dafa:	|      movea.l (sp),a0
    dafc:	|      move.l 4(sp),d1
    db00:	|      move.l 8(sp),d0
    db04:	|      move.l 12(sp),-(sp)
    db08:	|      move.l a0,-(sp)
    db0a:	|      move.l d1,-(sp)
    db0c:	|      move.l d0,-(sp)
    db0e:	|      jsr 63fe <addPerson>
    db14:	|      lea 16(sp),sp
    db18:	|      tst.w d0
    db1a:	|  /-- beq.s db20 <builtIn_addCharacter+0xfc>
    db1c:	|  |   moveq #2,d0
    db1e:	+--|-- bra.s db22 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    db20:	|  \-> moveq #1,d0
}
    db22:	\----> lea 16(sp),sp
    db26:	       rts

0000db28 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    db28:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db2a:	       movea.l 12(sp),a0
    db2e:	       move.l 24(a0),d0
    db32:	       move.l d0,-(sp)
    db34:	       pea 7 <_start+0x7>
    db38:	       move.l sp,d0
    db3a:	       addq.l #8,d0
    db3c:	       move.l d0,-(sp)
    db3e:	       jsr 10ffe <getValueType>
    db44:	       lea 12(sp),sp
    db48:	       tst.w d0
    db4a:	   /-- bne.s db50 <builtIn_hideCharacter+0x28>
    db4c:	   |   moveq #1,d0
    db4e:	/--|-- bra.s db70 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    db50:	|  \-> moveq #24,d0
    db52:	|      add.l 12(sp),d0
    db56:	|      move.l d0,-(sp)
    db58:	|      jsr 11982 <trimStack>
    db5e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    db60:	|      move.l (sp),d0
    db62:	|      move.l d0,-(sp)
    db64:	|      clr.l -(sp)
    db66:	|      jsr 86d8 <setShown>
    db6c:	|      addq.l #8,sp
	return BR_CONTINUE;
    db6e:	|      moveq #2,d0
}
    db70:	\----> addq.l #4,sp
    db72:	       rts

0000db74 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    db74:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db76:	       movea.l 12(sp),a0
    db7a:	       move.l 24(a0),d0
    db7e:	       move.l d0,-(sp)
    db80:	       pea 7 <_start+0x7>
    db84:	       move.l sp,d0
    db86:	       addq.l #8,d0
    db88:	       move.l d0,-(sp)
    db8a:	       jsr 10ffe <getValueType>
    db90:	       lea 12(sp),sp
    db94:	       tst.w d0
    db96:	   /-- bne.s db9c <builtIn_showCharacter+0x28>
    db98:	   |   moveq #1,d0
    db9a:	/--|-- bra.s dbbe <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    db9c:	|  \-> moveq #24,d0
    db9e:	|      add.l 12(sp),d0
    dba2:	|      move.l d0,-(sp)
    dba4:	|      jsr 11982 <trimStack>
    dbaa:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    dbac:	|      move.l (sp),d0
    dbae:	|      move.l d0,-(sp)
    dbb0:	|      pea 1 <_start+0x1>
    dbb4:	|      jsr 86d8 <setShown>
    dbba:	|      addq.l #8,sp
	return BR_CONTINUE;
    dbbc:	|      moveq #2,d0
}
    dbbe:	\----> addq.l #4,sp
    dbc0:	       rts

0000dbc2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    dbc2:	jsr 39c0 <killSpeechTimers>
	killMostPeople ();
    dbc8:	jsr 7644 <killMostPeople>
	return BR_CONTINUE;
    dbce:	moveq #2,d0
}
    dbd0:	rts

0000dbd2 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    dbd2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbd4:	       movea.l 16(sp),a0
    dbd8:	       move.l 24(a0),d0
    dbdc:	       move.l d0,-(sp)
    dbde:	       pea 1 <_start+0x1>
    dbe2:	       move.l sp,d0
    dbe4:	       addq.l #8,d0
    dbe6:	       move.l d0,-(sp)
    dbe8:	       jsr 10ffe <getValueType>
    dbee:	       lea 12(sp),sp
    dbf2:	       tst.w d0
    dbf4:	   /-- bne.s dbfa <builtIn_setCharacterDrawMode+0x28>
    dbf6:	   |   moveq #1,d0
    dbf8:	/--|-- bra.s dc54 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    dbfa:	|  \-> moveq #24,d0
    dbfc:	|      add.l 16(sp),d0
    dc00:	|      move.l d0,-(sp)
    dc02:	|      jsr 11982 <trimStack>
    dc08:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc0a:	|      movea.l 16(sp),a0
    dc0e:	|      move.l 24(a0),d0
    dc12:	|      move.l d0,-(sp)
    dc14:	|      pea 7 <_start+0x7>
    dc18:	|      moveq #12,d0
    dc1a:	|      add.l sp,d0
    dc1c:	|      move.l d0,-(sp)
    dc1e:	|      jsr 10ffe <getValueType>
    dc24:	|      lea 12(sp),sp
    dc28:	|      tst.w d0
    dc2a:	|  /-- bne.s dc30 <builtIn_setCharacterDrawMode+0x5e>
    dc2c:	|  |   moveq #1,d0
    dc2e:	+--|-- bra.s dc54 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    dc30:	|  \-> moveq #24,d0
    dc32:	|      add.l 16(sp),d0
    dc36:	|      move.l d0,-(sp)
    dc38:	|      jsr 11982 <trimStack>
    dc3e:	|      addq.l #4,sp
	setDrawMode (di, obj);
    dc40:	|      move.l 4(sp),d1
    dc44:	|      move.l (sp),d0
    dc46:	|      move.l d1,-(sp)
    dc48:	|      move.l d0,-(sp)
    dc4a:	|      jsr 8106 <setDrawMode>
    dc50:	|      addq.l #8,sp
	return BR_CONTINUE;
    dc52:	|      moveq #2,d0
}
    dc54:	\----> addq.l #8,sp
    dc56:	       rts

0000dc58 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    dc58:	pea 152f8 <custom.c.9a493ead+0xb48>
    dc5e:	jsr 13046 <KPrintF>
    dc64:	addq.l #4,sp
	return BR_CONTINUE;
    dc66:	moveq #2,d0
}
    dc68:	rts

0000dc6a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    dc6a:	pea 1532b <custom.c.9a493ead+0xb7b>
    dc70:	jsr 13046 <KPrintF>
    dc76:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    dc78:	moveq #2,d0
}
    dc7a:	rts

0000dc7c <builtIn_setScale>:

builtIn(setScale)
{
    dc7c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc7e:	       movea.l 16(sp),a0
    dc82:	       move.l 24(a0),d0
    dc86:	       move.l d0,-(sp)
    dc88:	       pea 1 <_start+0x1>
    dc8c:	       move.l sp,d0
    dc8e:	       addq.l #8,d0
    dc90:	       move.l d0,-(sp)
    dc92:	       jsr 10ffe <getValueType>
    dc98:	       lea 12(sp),sp
    dc9c:	       tst.w d0
    dc9e:	   /-- bne.s dca4 <builtIn_setScale+0x28>
    dca0:	   |   moveq #1,d0
    dca2:	/--|-- bra.s dd06 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    dca4:	|  \-> moveq #24,d0
    dca6:	|      add.l 16(sp),d0
    dcaa:	|      move.l d0,-(sp)
    dcac:	|      jsr 11982 <trimStack>
    dcb2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcb4:	|      movea.l 16(sp),a0
    dcb8:	|      move.l 24(a0),d0
    dcbc:	|      move.l d0,-(sp)
    dcbe:	|      pea 1 <_start+0x1>
    dcc2:	|      moveq #12,d0
    dcc4:	|      add.l sp,d0
    dcc6:	|      move.l d0,-(sp)
    dcc8:	|      jsr 10ffe <getValueType>
    dcce:	|      lea 12(sp),sp
    dcd2:	|      tst.w d0
    dcd4:	|  /-- bne.s dcda <builtIn_setScale+0x5e>
    dcd6:	|  |   moveq #1,d0
    dcd8:	+--|-- bra.s dd06 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    dcda:	|  \-> moveq #24,d0
    dcdc:	|      add.l 16(sp),d0
    dce0:	|      move.l d0,-(sp)
    dce2:	|      jsr 11982 <trimStack>
    dce8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    dcea:	|      move.l (sp),d0
    dcec:	|      move.l d0,d0
    dcee:	|      movea.w d0,a1
    dcf0:	|      move.l 4(sp),d0
    dcf4:	|      move.l d0,d0
    dcf6:	|      movea.w d0,a0
    dcf8:	|      move.l a1,-(sp)
    dcfa:	|      move.l a0,-(sp)
    dcfc:	|      jsr 86b0 <setScale>
    dd02:	|      addq.l #8,sp
	return BR_CONTINUE;
    dd04:	|      moveq #2,d0
}
    dd06:	\----> addq.l #8,sp
    dd08:	       rts

0000dd0a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    dd0a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd0c:	       movea.l 12(sp),a0
    dd10:	       move.l 24(a0),d0
    dd14:	       move.l d0,-(sp)
    dd16:	       pea 7 <_start+0x7>
    dd1a:	       move.l sp,d0
    dd1c:	       addq.l #8,d0
    dd1e:	       move.l d0,-(sp)
    dd20:	       jsr 10ffe <getValueType>
    dd26:	       lea 12(sp),sp
    dd2a:	       tst.w d0
    dd2c:	   /-- bne.s dd32 <builtIn_stopCharacter+0x28>
    dd2e:	   |   moveq #1,d0
    dd30:	/--|-- bra.s dd6a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    dd32:	|  \-> moveq #24,d0
    dd34:	|      add.l 12(sp),d0
    dd38:	|      move.l d0,-(sp)
    dd3a:	|      jsr 11982 <trimStack>
    dd40:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    dd42:	|      move.l (sp),d0
    dd44:	|      move.l d0,-(sp)
    dd46:	|      jsr 87e4 <stopPerson>
    dd4c:	|      addq.l #4,sp
    dd4e:	|      movea.w d0,a0
    dd50:	|      moveq #28,d0
    dd52:	|      add.l 12(sp),d0
    dd56:	|      move.l a0,-(sp)
    dd58:	|      pea 1 <_start+0x1>
    dd5c:	|      move.l d0,-(sp)
    dd5e:	|      jsr 118f0 <setVariable>
    dd64:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dd68:	|      moveq #2,d0
}
    dd6a:	\----> addq.l #4,sp
    dd6c:	       rts

0000dd6e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    dd6e:	pea 15365 <custom.c.9a493ead+0xbb5>
    dd74:	jsr 13046 <KPrintF>
    dd7a:	addq.l #4,sp
	return BR_CONTINUE;
    dd7c:	moveq #2,d0
}
    dd7e:	rts

0000dd80 <builtIn_animate>:

builtIn(animate)
{
    dd80:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dd82:	       movea.l 16(sp),a0
    dd86:	       move.l 24(a0),d0
    dd8a:	       move.l d0,-(sp)
    dd8c:	       jsr 114d6 <getAnimationFromVar>
    dd92:	       addq.l #4,sp
    dd94:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dd98:	   /-- bne.s dd9e <builtIn_animate+0x1e>
    dd9a:	   |   moveq #1,d0
    dd9c:	/--|-- bra.s de1c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dd9e:	|  \-> moveq #24,d0
    dda0:	|      add.l 16(sp),d0
    dda4:	|      move.l d0,-(sp)
    dda6:	|      jsr 11982 <trimStack>
    ddac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddae:	|      movea.l 16(sp),a0
    ddb2:	|      move.l 24(a0),d0
    ddb6:	|      move.l d0,-(sp)
    ddb8:	|      pea 7 <_start+0x7>
    ddbc:	|      move.l sp,d0
    ddbe:	|      addq.l #8,d0
    ddc0:	|      move.l d0,-(sp)
    ddc2:	|      jsr 10ffe <getValueType>
    ddc8:	|      lea 12(sp),sp
    ddcc:	|      tst.w d0
    ddce:	|  /-- bne.s ddd4 <builtIn_animate+0x54>
    ddd0:	|  |   moveq #1,d0
    ddd2:	+--|-- bra.s de1c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    ddd4:	|  \-> moveq #24,d0
    ddd6:	|      add.l 16(sp),d0
    ddda:	|      move.l d0,-(sp)
    dddc:	|      jsr 11982 <trimStack>
    dde2:	|      addq.l #4,sp
	animatePerson (obj, pp);
    dde4:	|      move.l (sp),d0
    dde6:	|      move.l 4(sp),-(sp)
    ddea:	|      move.l d0,-(sp)
    ddec:	|      jsr 6670 <animatePerson>
    ddf2:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    ddf4:	|      move.l 4(sp),-(sp)
    ddf8:	|      jsr 8838 <timeForAnim>
    ddfe:	|      addq.l #4,sp
    de00:	|      move.l d0,d1
    de02:	|      moveq #28,d0
    de04:	|      add.l 16(sp),d0
    de08:	|      move.l d1,-(sp)
    de0a:	|      pea 1 <_start+0x1>
    de0e:	|      move.l d0,-(sp)
    de10:	|      jsr 118f0 <setVariable>
    de16:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de1a:	|      moveq #2,d0
}
    de1c:	\----> addq.l #8,sp
    de1e:	       rts

0000de20 <builtIn_setCostume>:

builtIn(setCostume)
{
    de20:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    de22:	       movea.l 16(sp),a0
    de26:	       move.l 24(a0),d0
    de2a:	       move.l d0,-(sp)
    de2c:	       jsr 10caa <getCostumeFromVar>
    de32:	       addq.l #4,sp
    de34:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    de38:	   /-- bne.s de3e <builtIn_setCostume+0x1e>
    de3a:	   |   moveq #1,d0
    de3c:	/--|-- bra.s de96 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    de3e:	|  \-> moveq #24,d0
    de40:	|      add.l 16(sp),d0
    de44:	|      move.l d0,-(sp)
    de46:	|      jsr 11982 <trimStack>
    de4c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de4e:	|      movea.l 16(sp),a0
    de52:	|      move.l 24(a0),d0
    de56:	|      move.l d0,-(sp)
    de58:	|      pea 7 <_start+0x7>
    de5c:	|      move.l sp,d0
    de5e:	|      addq.l #8,d0
    de60:	|      move.l d0,-(sp)
    de62:	|      jsr 10ffe <getValueType>
    de68:	|      lea 12(sp),sp
    de6c:	|      tst.w d0
    de6e:	|  /-- bne.s de74 <builtIn_setCostume+0x54>
    de70:	|  |   moveq #1,d0
    de72:	+--|-- bra.s de96 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    de74:	|  \-> moveq #24,d0
    de76:	|      add.l 16(sp),d0
    de7a:	|      move.l d0,-(sp)
    de7c:	|      jsr 11982 <trimStack>
    de82:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    de84:	|      move.l (sp),d0
    de86:	|      move.l 4(sp),-(sp)
    de8a:	|      move.l d0,-(sp)
    de8c:	|      jsr 66ba <animatePersonUsingPersona>
    de92:	|      addq.l #8,sp
	return BR_CONTINUE;
    de94:	|      moveq #2,d0
}
    de96:	\----> addq.l #8,sp
    de98:	       rts

0000de9a <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    de9a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de9c:	       movea.l 16(sp),a0
    dea0:	       move.l 24(a0),d0
    dea4:	       move.l d0,-(sp)
    dea6:	       pea 1 <_start+0x1>
    deaa:	       move.l sp,d0
    deac:	       addq.l #8,d0
    deae:	       move.l d0,-(sp)
    deb0:	       jsr 10ffe <getValueType>
    deb6:	       lea 12(sp),sp
    deba:	       tst.w d0
    debc:	   /-- bne.s dec2 <builtIn_floatCharacter+0x28>
    debe:	   |   moveq #1,d0
    dec0:	/--|-- bra.s df36 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dec2:	|  \-> moveq #24,d0
    dec4:	|      add.l 16(sp),d0
    dec8:	|      move.l d0,-(sp)
    deca:	|      jsr 11982 <trimStack>
    ded0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ded2:	|      movea.l 16(sp),a0
    ded6:	|      move.l 24(a0),d0
    deda:	|      move.l d0,-(sp)
    dedc:	|      pea 7 <_start+0x7>
    dee0:	|      moveq #12,d0
    dee2:	|      add.l sp,d0
    dee4:	|      move.l d0,-(sp)
    dee6:	|      jsr 10ffe <getValueType>
    deec:	|      lea 12(sp),sp
    def0:	|      tst.w d0
    def2:	|  /-- bne.s def8 <builtIn_floatCharacter+0x5e>
    def4:	|  |   moveq #1,d0
    def6:	+--|-- bra.s df36 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    def8:	|  \-> moveq #24,d0
    defa:	|      add.l 16(sp),d0
    defe:	|      move.l d0,-(sp)
    df00:	|      jsr 11982 <trimStack>
    df06:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    df08:	|      move.l 4(sp),d1
    df0c:	|      move.l (sp),d0
    df0e:	|      move.l d1,-(sp)
    df10:	|      move.l d0,-(sp)
    df12:	|      jsr 7206 <floatCharacter>
    df18:	|      addq.l #8,sp
    df1a:	|      movea.w d0,a0
    df1c:	|      moveq #28,d0
    df1e:	|      add.l 16(sp),d0
    df22:	|      move.l a0,-(sp)
    df24:	|      pea 1 <_start+0x1>
    df28:	|      move.l d0,-(sp)
    df2a:	|      jsr 118f0 <setVariable>
    df30:	|      lea 12(sp),sp
	return BR_CONTINUE;
    df34:	|      moveq #2,d0
}
    df36:	\----> addq.l #8,sp
    df38:	       rts

0000df3a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    df3a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df3c:	       movea.l 16(sp),a0
    df40:	       move.l 24(a0),d0
    df44:	       move.l d0,-(sp)
    df46:	       pea 1 <_start+0x1>
    df4a:	       move.l sp,d0
    df4c:	       addq.l #8,d0
    df4e:	       move.l d0,-(sp)
    df50:	       jsr 10ffe <getValueType>
    df56:	       lea 12(sp),sp
    df5a:	       tst.w d0
    df5c:	   /-- bne.s df62 <builtIn_setCharacterWalkSpeed+0x28>
    df5e:	   |   moveq #1,d0
    df60:	/--|-- bra.s dfd6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    df62:	|  \-> moveq #24,d0
    df64:	|      add.l 16(sp),d0
    df68:	|      move.l d0,-(sp)
    df6a:	|      jsr 11982 <trimStack>
    df70:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df72:	|      movea.l 16(sp),a0
    df76:	|      move.l 24(a0),d0
    df7a:	|      move.l d0,-(sp)
    df7c:	|      pea 7 <_start+0x7>
    df80:	|      moveq #12,d0
    df82:	|      add.l sp,d0
    df84:	|      move.l d0,-(sp)
    df86:	|      jsr 10ffe <getValueType>
    df8c:	|      lea 12(sp),sp
    df90:	|      tst.w d0
    df92:	|  /-- bne.s df98 <builtIn_setCharacterWalkSpeed+0x5e>
    df94:	|  |   moveq #1,d0
    df96:	+--|-- bra.s dfd6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    df98:	|  \-> moveq #24,d0
    df9a:	|      add.l 16(sp),d0
    df9e:	|      move.l d0,-(sp)
    dfa0:	|      jsr 11982 <trimStack>
    dfa6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    dfa8:	|      move.l 4(sp),d1
    dfac:	|      move.l (sp),d0
    dfae:	|      move.l d1,-(sp)
    dfb0:	|      move.l d0,-(sp)
    dfb2:	|      jsr 864c <setCharacterWalkSpeed>
    dfb8:	|      addq.l #8,sp
    dfba:	|      movea.w d0,a0
    dfbc:	|      moveq #28,d0
    dfbe:	|      add.l 16(sp),d0
    dfc2:	|      move.l a0,-(sp)
    dfc4:	|      pea 1 <_start+0x1>
    dfc8:	|      move.l d0,-(sp)
    dfca:	|      jsr 118f0 <setVariable>
    dfd0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dfd4:	|      moveq #2,d0
}
    dfd6:	\----> addq.l #8,sp
    dfd8:	       rts

0000dfda <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    dfda:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dfdc:	       movea.l 16(sp),a0
    dfe0:	       move.l 24(a0),d0
    dfe4:	       move.l d0,-(sp)
    dfe6:	       pea 1 <_start+0x1>
    dfea:	       move.l sp,d0
    dfec:	       addq.l #8,d0
    dfee:	       move.l d0,-(sp)
    dff0:	       jsr 10ffe <getValueType>
    dff6:	       lea 12(sp),sp
    dffa:	       tst.w d0
    dffc:	   /-- bne.s e002 <builtIn_turnCharacter+0x28>
    dffe:	   |   moveq #1,d0
    e000:	/--|-- bra.s e076 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    e002:	|  \-> moveq #24,d0
    e004:	|      add.l 16(sp),d0
    e008:	|      move.l d0,-(sp)
    e00a:	|      jsr 11982 <trimStack>
    e010:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e012:	|      movea.l 16(sp),a0
    e016:	|      move.l 24(a0),d0
    e01a:	|      move.l d0,-(sp)
    e01c:	|      pea 7 <_start+0x7>
    e020:	|      moveq #12,d0
    e022:	|      add.l sp,d0
    e024:	|      move.l d0,-(sp)
    e026:	|      jsr 10ffe <getValueType>
    e02c:	|      lea 12(sp),sp
    e030:	|      tst.w d0
    e032:	|  /-- bne.s e038 <builtIn_turnCharacter+0x5e>
    e034:	|  |   moveq #1,d0
    e036:	+--|-- bra.s e076 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    e038:	|  \-> moveq #24,d0
    e03a:	|      add.l 16(sp),d0
    e03e:	|      move.l d0,-(sp)
    e040:	|      jsr 11982 <trimStack>
    e046:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    e048:	|      move.l (sp),d1
    e04a:	|      move.l 4(sp),d0
    e04e:	|      move.l d1,-(sp)
    e050:	|      move.l d0,-(sp)
    e052:	|      jsr 88f0 <turnPersonToFace>
    e058:	|      addq.l #8,sp
    e05a:	|      movea.w d0,a0
    e05c:	|      moveq #28,d0
    e05e:	|      add.l 16(sp),d0
    e062:	|      move.l a0,-(sp)
    e064:	|      pea 1 <_start+0x1>
    e068:	|      move.l d0,-(sp)
    e06a:	|      jsr 118f0 <setVariable>
    e070:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e074:	|      moveq #2,d0
}
    e076:	\----> addq.l #8,sp
    e078:	       rts

0000e07a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    e07a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e07c:	       movea.l 16(sp),a0
    e080:	       move.l 24(a0),d0
    e084:	       move.l d0,-(sp)
    e086:	       pea 1 <_start+0x1>
    e08a:	       move.l sp,d0
    e08c:	       addq.l #8,d0
    e08e:	       move.l d0,-(sp)
    e090:	       jsr 10ffe <getValueType>
    e096:	       lea 12(sp),sp
    e09a:	       tst.w d0
    e09c:	   /-- bne.s e0a2 <builtIn_setCharacterExtra+0x28>
    e09e:	   |   moveq #1,d0
    e0a0:	/--|-- bra.s e116 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    e0a2:	|  \-> moveq #24,d0
    e0a4:	|      add.l 16(sp),d0
    e0a8:	|      move.l d0,-(sp)
    e0aa:	|      jsr 11982 <trimStack>
    e0b0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0b2:	|      movea.l 16(sp),a0
    e0b6:	|      move.l 24(a0),d0
    e0ba:	|      move.l d0,-(sp)
    e0bc:	|      pea 7 <_start+0x7>
    e0c0:	|      moveq #12,d0
    e0c2:	|      add.l sp,d0
    e0c4:	|      move.l d0,-(sp)
    e0c6:	|      jsr 10ffe <getValueType>
    e0cc:	|      lea 12(sp),sp
    e0d0:	|      tst.w d0
    e0d2:	|  /-- bne.s e0d8 <builtIn_setCharacterExtra+0x5e>
    e0d4:	|  |   moveq #1,d0
    e0d6:	+--|-- bra.s e116 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    e0d8:	|  \-> moveq #24,d0
    e0da:	|      add.l 16(sp),d0
    e0de:	|      move.l d0,-(sp)
    e0e0:	|      jsr 11982 <trimStack>
    e0e6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    e0e8:	|      move.l (sp),d1
    e0ea:	|      move.l 4(sp),d0
    e0ee:	|      move.l d1,-(sp)
    e0f0:	|      move.l d0,-(sp)
    e0f2:	|      jsr 867a <setPersonExtra>
    e0f8:	|      addq.l #8,sp
    e0fa:	|      movea.w d0,a0
    e0fc:	|      moveq #28,d0
    e0fe:	|      add.l 16(sp),d0
    e102:	|      move.l a0,-(sp)
    e104:	|      pea 1 <_start+0x1>
    e108:	|      move.l d0,-(sp)
    e10a:	|      jsr 118f0 <setVariable>
    e110:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e114:	|      moveq #2,d0
}
    e116:	\----> addq.l #8,sp
    e118:	       rts

0000e11a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    e11a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e11c:	       movea.l 12(sp),a0
    e120:	       move.l 24(a0),d0
    e124:	       move.l d0,-(sp)
    e126:	       pea 7 <_start+0x7>
    e12a:	       move.l sp,d0
    e12c:	       addq.l #8,d0
    e12e:	       move.l d0,-(sp)
    e130:	       jsr 10ffe <getValueType>
    e136:	       lea 12(sp),sp
    e13a:	       tst.w d0
    e13c:	   /-- bne.s e142 <builtIn_removeCharacter+0x28>
    e13e:	   |   moveq #1,d0
    e140:	/--|-- bra.s e160 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    e142:	|  \-> moveq #24,d0
    e144:	|      add.l 12(sp),d0
    e148:	|      move.l d0,-(sp)
    e14a:	|      jsr 11982 <trimStack>
    e150:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    e152:	|      move.l (sp),d0
    e154:	|      move.l d0,-(sp)
    e156:	|      jsr 799e <removeOneCharacter>
    e15c:	|      addq.l #4,sp
	return BR_CONTINUE;
    e15e:	|      moveq #2,d0
}
    e160:	\----> addq.l #4,sp
    e162:	       rts

0000e164 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    e164:	                lea -28(sp),sp
    e168:	                move.l d2,-(sp)
    e16a:	                move.l 44(sp),d1
    e16e:	                move.l 48(sp),d0
    e172:	                move.w d1,d1
    e174:	                move.w d1,6(sp)
    e178:	                move.w d0,d0
    e17a:	                move.w d0,4(sp)
	switch (numParams) {
    e17e:	                moveq #2,d0
    e180:	                cmp.l 36(sp),d0
    e184:	      /-------- beq.w e2c6 <moveChr+0x162>
    e188:	      |         moveq #3,d0
    e18a:	      |         cmp.l 36(sp),d0
    e18e:	/-----|-------- bne.w e3fa <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e192:	|     |         movea.l 40(sp),a0
    e196:	|     |         move.l 24(a0),d0
    e19a:	|     |         move.l d0,-(sp)
    e19c:	|     |         pea 1 <_start+0x1>
    e1a0:	|     |         lea 20(sp),a0
    e1a4:	|     |         move.l a0,-(sp)
    e1a6:	|     |         jsr 10ffe <getValueType>
    e1ac:	|     |         lea 12(sp),sp
    e1b0:	|     |         tst.w d0
    e1b2:	|     |     /-- bne.s e1ba <moveChr+0x56>
    e1b4:	|     |     |   moveq #1,d0
    e1b6:	|  /--|-----|-- bra.w e40a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e1ba:	|  |  |     \-> moveq #24,d0
    e1bc:	|  |  |         add.l 40(sp),d0
    e1c0:	|  |  |         move.l d0,-(sp)
    e1c2:	|  |  |         jsr 11982 <trimStack>
    e1c8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1ca:	|  |  |         movea.l 40(sp),a0
    e1ce:	|  |  |         move.l 24(a0),d0
    e1d2:	|  |  |         move.l d0,-(sp)
    e1d4:	|  |  |         pea 1 <_start+0x1>
    e1d8:	|  |  |         lea 24(sp),a0
    e1dc:	|  |  |         move.l a0,-(sp)
    e1de:	|  |  |         jsr 10ffe <getValueType>
    e1e4:	|  |  |         lea 12(sp),sp
    e1e8:	|  |  |         tst.w d0
    e1ea:	|  |  |     /-- bne.s e1f2 <moveChr+0x8e>
    e1ec:	|  |  |     |   moveq #1,d0
    e1ee:	|  +--|-----|-- bra.w e40a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e1f2:	|  |  |     \-> moveq #24,d0
    e1f4:	|  |  |         add.l 40(sp),d0
    e1f8:	|  |  |         move.l d0,-(sp)
    e1fa:	|  |  |         jsr 11982 <trimStack>
    e200:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e202:	|  |  |         movea.l 40(sp),a0
    e206:	|  |  |         move.l 24(a0),d0
    e20a:	|  |  |         move.l d0,-(sp)
    e20c:	|  |  |         pea 7 <_start+0x7>
    e210:	|  |  |         lea 16(sp),a0
    e214:	|  |  |         move.l a0,-(sp)
    e216:	|  |  |         jsr 10ffe <getValueType>
    e21c:	|  |  |         lea 12(sp),sp
    e220:	|  |  |         tst.w d0
    e222:	|  |  |     /-- bne.s e22a <moveChr+0xc6>
    e224:	|  |  |     |   moveq #1,d0
    e226:	|  +--|-----|-- bra.w e40a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e22a:	|  |  |     \-> moveq #24,d0
    e22c:	|  |  |         add.l 40(sp),d0
    e230:	|  |  |         move.l d0,-(sp)
    e232:	|  |  |         jsr 11982 <trimStack>
    e238:	|  |  |         addq.l #4,sp

			if (force) {
    e23a:	|  |  |         tst.w 6(sp)
    e23e:	|  |  |     /-- beq.s e26e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e240:	|  |  |     |   movea.l 8(sp),a0
    e244:	|  |  |     |   move.l 12(sp),d1
    e248:	|  |  |     |   move.l 16(sp),d0
    e24c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.a78f820e+0xfffbeaa1>
    e250:	|  |  |     |   move.l 44(sp),-(sp)
    e254:	|  |  |     |   move.l a0,-(sp)
    e256:	|  |  |     |   move.l d1,-(sp)
    e258:	|  |  |     |   move.l d0,-(sp)
    e25a:	|  |  |     |   jsr 722a <forceWalkingPerson>
    e260:	|  |  |     |   lea 20(sp),sp
    e264:	|  |  |     |   tst.w d0
    e266:	|  |  |  /--|-- beq.s e2c0 <moveChr+0x15c>
    e268:	|  |  |  |  |   moveq #3,d0
    e26a:	|  +--|--|--|-- bra.w e40a <moveChr+0x2a6>
			} else if (immediate) {
    e26e:	|  |  |  |  \-> tst.w 4(sp)
    e272:	|  |  |  |  /-- beq.s e292 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    e274:	|  |  |  |  |   movea.l 8(sp),a0
    e278:	|  |  |  |  |   move.l 12(sp),d1
    e27c:	|  |  |  |  |   move.l 16(sp),d0
    e280:	|  |  |  |  |   move.l a0,-(sp)
    e282:	|  |  |  |  |   move.l d1,-(sp)
    e284:	|  |  |  |  |   move.l d0,-(sp)
    e286:	|  |  |  |  |   jsr 7532 <jumpPerson>
    e28c:	|  |  |  |  |   lea 12(sp),sp
    e290:	|  |  |  +--|-- bra.s e2c0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e292:	|  |  |  |  \-> movea.l 8(sp),a0
    e296:	|  |  |  |      move.l 12(sp),d1
    e29a:	|  |  |  |      move.l 16(sp),d0
    e29e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.a78f820e+0xfffbeaa1>
    e2a2:	|  |  |  |      move.l 44(sp),-(sp)
    e2a6:	|  |  |  |      move.l a0,-(sp)
    e2a8:	|  |  |  |      move.l d1,-(sp)
    e2aa:	|  |  |  |      move.l d0,-(sp)
    e2ac:	|  |  |  |      jsr 7702 <makeWalkingPerson>
    e2b2:	|  |  |  |      lea 20(sp),sp
    e2b6:	|  |  |  |      tst.w d0
    e2b8:	|  |  |  +----- beq.s e2c0 <moveChr+0x15c>
    e2ba:	|  |  |  |      moveq #3,d0
    e2bc:	|  +--|--|----- bra.w e40a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e2c0:	|  |  |  \----> moveq #2,d0
    e2c2:	|  +--|-------- bra.w e40a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2c6:	|  |  \-------> movea.l 40(sp),a0
    e2ca:	|  |            move.l 24(a0),d0
    e2ce:	|  |            move.l d0,-(sp)
    e2d0:	|  |            pea 7 <_start+0x7>
    e2d4:	|  |            moveq #32,d0
    e2d6:	|  |            add.l sp,d0
    e2d8:	|  |            move.l d0,-(sp)
    e2da:	|  |            jsr 10ffe <getValueType>
    e2e0:	|  |            lea 12(sp),sp
    e2e4:	|  |            tst.w d0
    e2e6:	|  |        /-- bne.s e2ee <moveChr+0x18a>
    e2e8:	|  |        |   moveq #1,d0
    e2ea:	|  +--------|-- bra.w e40a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e2ee:	|  |        \-> moveq #24,d0
    e2f0:	|  |            add.l 40(sp),d0
    e2f4:	|  |            move.l d0,-(sp)
    e2f6:	|  |            jsr 11982 <trimStack>
    e2fc:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2fe:	|  |            movea.l 40(sp),a0
    e302:	|  |            move.l 24(a0),d0
    e306:	|  |            move.l d0,-(sp)
    e308:	|  |            pea 7 <_start+0x7>
    e30c:	|  |            lea 28(sp),a0
    e310:	|  |            move.l a0,-(sp)
    e312:	|  |            jsr 10ffe <getValueType>
    e318:	|  |            lea 12(sp),sp
    e31c:	|  |            tst.w d0
    e31e:	|  |        /-- bne.s e326 <moveChr+0x1c2>
    e320:	|  |        |   moveq #1,d0
    e322:	|  +--------|-- bra.w e40a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e326:	|  |        \-> moveq #24,d0
    e328:	|  |            add.l 40(sp),d0
    e32c:	|  |            move.l d0,-(sp)
    e32e:	|  |            jsr 11982 <trimStack>
    e334:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    e336:	|  |            move.l 24(sp),d0
    e33a:	|  |            move.l d0,-(sp)
    e33c:	|  |            jsr 11ac8 <getRegionForObject>
    e342:	|  |            addq.l #4,sp
    e344:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    e348:	|  |        /-- bne.s e350 <moveChr+0x1ec>
    e34a:	|  |        |   moveq #2,d0
    e34c:	|  +--------|-- bra.w e40a <moveChr+0x2a6>

			if (force)
    e350:	|  |        \-> tst.w 6(sp)
    e354:	|  |        /-- beq.s e390 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e356:	|  |        |   movea.l 28(sp),a0
    e35a:	|  |        |   move.l 24(a0),d2
    e35e:	|  |        |   movea.l 20(sp),a1
    e362:	|  |        |   movea.l 28(sp),a0
    e366:	|  |        |   move.l 20(a0),d1
    e36a:	|  |        |   movea.l 28(sp),a0
    e36e:	|  |        |   move.l 16(a0),d0
    e372:	|  |        |   move.l d2,-(sp)
    e374:	|  |        |   move.l 44(sp),-(sp)
    e378:	|  |        |   move.l a1,-(sp)
    e37a:	|  |        |   move.l d1,-(sp)
    e37c:	|  |        |   move.l d0,-(sp)
    e37e:	|  |        |   jsr 722a <forceWalkingPerson>
    e384:	|  |        |   lea 20(sp),sp
    e388:	|  |        |   tst.w d0
    e38a:	|  |     /--|-- beq.s e3f6 <moveChr+0x292>
    e38c:	|  |     |  |   moveq #3,d0
    e38e:	|  +-----|--|-- bra.s e40a <moveChr+0x2a6>
			}
			else if (immediate)
    e390:	|  |     |  \-> tst.w 4(sp)
    e394:	|  |     |  /-- beq.s e3bc <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    e396:	|  |     |  |   movea.l 20(sp),a1
    e39a:	|  |     |  |   movea.l 28(sp),a0
    e39e:	|  |     |  |   move.l 20(a0),d1
    e3a2:	|  |     |  |   movea.l 28(sp),a0
    e3a6:	|  |     |  |   move.l 16(a0),d0
    e3aa:	|  |     |  |   move.l a1,-(sp)
    e3ac:	|  |     |  |   move.l d1,-(sp)
    e3ae:	|  |     |  |   move.l d0,-(sp)
    e3b0:	|  |     |  |   jsr 7532 <jumpPerson>
    e3b6:	|  |     |  |   lea 12(sp),sp
    e3ba:	|  |     +--|-- bra.s e3f6 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e3bc:	|  |     |  \-> movea.l 28(sp),a0
    e3c0:	|  |     |      move.l 24(a0),d2
    e3c4:	|  |     |      movea.l 20(sp),a1
    e3c8:	|  |     |      movea.l 28(sp),a0
    e3cc:	|  |     |      move.l 20(a0),d1
    e3d0:	|  |     |      movea.l 28(sp),a0
    e3d4:	|  |     |      move.l 16(a0),d0
    e3d8:	|  |     |      move.l d2,-(sp)
    e3da:	|  |     |      move.l 44(sp),-(sp)
    e3de:	|  |     |      move.l a1,-(sp)
    e3e0:	|  |     |      move.l d1,-(sp)
    e3e2:	|  |     |      move.l d0,-(sp)
    e3e4:	|  |     |      jsr 7702 <makeWalkingPerson>
    e3ea:	|  |     |      lea 20(sp),sp
    e3ee:	|  |     |      tst.w d0
    e3f0:	|  |     +----- beq.s e3f6 <moveChr+0x292>
    e3f2:	|  |     |      moveq #3,d0
    e3f4:	|  +-----|----- bra.s e40a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e3f6:	|  |     \----> moveq #2,d0
    e3f8:	|  +----------- bra.s e40a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    e3fa:	\--|----------> pea 15383 <custom.c.9a493ead+0xbd3>
    e400:	   |            jsr 13046 <KPrintF>
    e406:	   |            addq.l #4,sp
			return BR_ERROR;
    e408:	   |            moveq #1,d0
	}
}
    e40a:	   \----------> move.l (sp)+,d2
    e40c:	                lea 28(sp),sp
    e410:	                rts

0000e412 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    e412:	clr.l -(sp)
    e414:	clr.l -(sp)
    e416:	move.l 16(sp),-(sp)
    e41a:	move.l 16(sp),-(sp)
    e41e:	jsr e164 <moveChr>
    e424:	lea 16(sp),sp
}
    e428:	rts

0000e42a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    e42a:	clr.l -(sp)
    e42c:	pea 1 <_start+0x1>
    e430:	move.l 16(sp),-(sp)
    e434:	move.l 16(sp),-(sp)
    e438:	jsr e164 <moveChr>
    e43e:	lea 16(sp),sp
}
    e442:	rts

0000e444 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    e444:	pea 1 <_start+0x1>
    e448:	clr.l -(sp)
    e44a:	move.l 16(sp),-(sp)
    e44e:	move.l 16(sp),-(sp)
    e452:	jsr e164 <moveChr>
    e458:	lea 16(sp),sp
}
    e45c:	rts

0000e45e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    e45e:	jsr 5058 <clearStatusBar>
	return BR_CONTINUE;
    e464:	moveq #2,d0
}
    e466:	rts

0000e468 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    e468:	jsr 5100 <killLastStatus>
	return BR_CONTINUE;
    e46e:	moveq #2,d0
}
    e470:	rts

0000e472 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    e472:	jsr 4fee <addStatusBar>
	return BR_CONTINUE;
    e478:	moveq #2,d0
}
    e47a:	rts

0000e47c <builtIn_statusText>:

builtIn(statusText)
{
    e47c:	       subq.l #8,sp
    e47e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e480:	       movea.l 20(sp),a0
    e484:	       move.l 24(a0),d0
    e488:	       move.l d0,-(sp)
    e48a:	       jsr 115d4 <getTextFromAnyVar>
    e490:	       addq.l #4,sp
    e492:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    e496:	   /-- bne.s e49c <builtIn_statusText+0x20>
    e498:	   |   moveq #1,d0
    e49a:	/--|-- bra.s e4d0 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    e49c:	|  \-> moveq #24,d0
    e49e:	|      add.l 20(sp),d0
    e4a2:	|      move.l d0,-(sp)
    e4a4:	|      jsr 11982 <trimStack>
    e4aa:	|      addq.l #4,sp
	setStatusBar(newText);
    e4ac:	|      move.l 8(sp),-(sp)
    e4b0:	|      jsr 5380 <setStatusBar>
    e4b6:	|      addq.l #4,sp
	FreeVec(newText);
    e4b8:	|      move.l 8(sp),4(sp)
    e4be:	|      move.l 16784 <SysBase>,d0
    e4c4:	|      movea.l d0,a6
    e4c6:	|      movea.l 4(sp),a1
    e4ca:	|      jsr -690(a6)
	return BR_CONTINUE;
    e4ce:	|      moveq #2,d0
}
    e4d0:	\----> movea.l (sp)+,a6
    e4d2:	       addq.l #8,sp
    e4d4:	       rts

0000e4d6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    e4d6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e4d8:	       movea.l 12(sp),a0
    e4dc:	       move.l 24(a0),d0
    e4e0:	       move.l d0,-(sp)
    e4e2:	       pea 1 <_start+0x1>
    e4e6:	       move.l sp,d0
    e4e8:	       addq.l #8,d0
    e4ea:	       move.l d0,-(sp)
    e4ec:	       jsr 10ffe <getValueType>
    e4f2:	       lea 12(sp),sp
    e4f6:	       tst.w d0
    e4f8:	   /-- bne.s e4fe <builtIn_lightStatus+0x28>
    e4fa:	   |   moveq #1,d0
    e4fc:	/--|-- bra.s e51c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    e4fe:	|  \-> moveq #24,d0
    e500:	|      add.l 12(sp),d0
    e504:	|      move.l d0,-(sp)
    e506:	|      jsr 11982 <trimStack>
    e50c:	|      addq.l #4,sp
	setLitStatus (val);
    e50e:	|      move.l (sp),d0
    e510:	|      move.l d0,-(sp)
    e512:	|      jsr 5370 <setLitStatus>
    e518:	|      addq.l #4,sp
	return BR_CONTINUE;
    e51a:	|      moveq #2,d0
}
    e51c:	\----> addq.l #4,sp
    e51e:	       rts

0000e520 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    e520:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e522:	       movea.l 16(sp),a0
    e526:	       move.l 24(a0),d0
    e52a:	       move.l d0,-(sp)
    e52c:	       pea 1 <_start+0x1>
    e530:	       move.l sp,d0
    e532:	       addq.l #8,d0
    e534:	       move.l d0,-(sp)
    e536:	       jsr 10ffe <getValueType>
    e53c:	       lea 12(sp),sp
    e540:	       tst.w d0
    e542:	   /-- bne.s e548 <builtIn_positionStatus+0x28>
    e544:	   |   moveq #1,d0
    e546:	/--|-- bra.s e5a2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e548:	|  \-> moveq #24,d0
    e54a:	|      add.l 16(sp),d0
    e54e:	|      move.l d0,-(sp)
    e550:	|      jsr 11982 <trimStack>
    e556:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e558:	|      movea.l 16(sp),a0
    e55c:	|      move.l 24(a0),d0
    e560:	|      move.l d0,-(sp)
    e562:	|      pea 1 <_start+0x1>
    e566:	|      moveq #12,d0
    e568:	|      add.l sp,d0
    e56a:	|      move.l d0,-(sp)
    e56c:	|      jsr 10ffe <getValueType>
    e572:	|      lea 12(sp),sp
    e576:	|      tst.w d0
    e578:	|  /-- bne.s e57e <builtIn_positionStatus+0x5e>
    e57a:	|  |   moveq #1,d0
    e57c:	+--|-- bra.s e5a2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e57e:	|  \-> moveq #24,d0
    e580:	|      add.l 16(sp),d0
    e584:	|      move.l d0,-(sp)
    e586:	|      jsr 11982 <trimStack>
    e58c:	|      addq.l #4,sp
	positionStatus (x, y);
    e58e:	|      move.l (sp),d1
    e590:	|      move.l 4(sp),d0
    e594:	|      move.l d1,-(sp)
    e596:	|      move.l d0,-(sp)
    e598:	|      jsr 5162 <positionStatus>
    e59e:	|      addq.l #8,sp
	return BR_CONTINUE;
    e5a0:	|      moveq #2,d0
}
    e5a2:	\----> addq.l #8,sp
    e5a4:	       rts

0000e5a6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    e5a6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5a8:	       movea.l 12(sp),a0
    e5ac:	       move.l 24(a0),d0
    e5b0:	       move.l d0,-(sp)
    e5b2:	       pea 1 <_start+0x1>
    e5b6:	       move.l sp,d0
    e5b8:	       addq.l #8,d0
    e5ba:	       move.l d0,-(sp)
    e5bc:	       jsr 10ffe <getValueType>
    e5c2:	       lea 12(sp),sp
    e5c6:	       tst.w d0
    e5c8:	   /-- bne.s e5ce <builtIn_alignStatus+0x28>
    e5ca:	   |   moveq #1,d0
    e5cc:	/--|-- bra.s e5ee <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    e5ce:	|  \-> moveq #24,d0
    e5d0:	|      add.l 12(sp),d0
    e5d4:	|      move.l d0,-(sp)
    e5d6:	|      jsr 11982 <trimStack>
    e5dc:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    e5de:	|      move.l (sp),d0
    e5e0:	|      movea.l 1612a <nowStatus>,a0
    e5e6:	|      move.l d0,d0
    e5e8:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    e5ec:	|      moveq #2,d0
}
    e5ee:	\----> addq.l #4,sp
    e5f0:	       rts

0000e5f2 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    e5f2:	             tst.l 4(sp)
    e5f6:	      /----- beq.s e602 <getFuncNumForCallback+0x10>
    e5f8:	      |      moveq #1,d0
    e5fa:	      |      cmp.l 4(sp),d0
    e5fe:	      |  /-- beq.s e608 <getFuncNumForCallback+0x16>
    e600:	   /--|--|-- bra.s e63e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    e602:	   |  \--|-> clr.l 12(sp)
			break;
    e606:	/--|-----|-- bra.s e650 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    e608:	|  |     \-> movea.l 8(sp),a0
    e60c:	|  |         move.l 24(a0),d0
    e610:	|  |         move.l d0,-(sp)
    e612:	|  |         pea 2 <_start+0x2>
    e616:	|  |         move.l 20(sp),-(sp)
    e61a:	|  |         jsr 10ffe <getValueType>
    e620:	|  |         lea 12(sp),sp
    e624:	|  |         tst.w d0
    e626:	|  |     /-- bne.s e62c <getFuncNumForCallback+0x3a>
    e628:	|  |     |   clr.w d0
    e62a:	|  |  /--|-- bra.s e652 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    e62c:	|  |  |  \-> moveq #24,d0
    e62e:	|  |  |      add.l 8(sp),d0
    e632:	|  |  |      move.l d0,-(sp)
    e634:	|  |  |      jsr 11982 <trimStack>
    e63a:	|  |  |      addq.l #4,sp
			break;
    e63c:	+--|--|----- bra.s e650 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    e63e:	|  \--|----> pea 153b9 <custom.c.9a493ead+0xc09>
    e644:	|     |      jsr 13046 <KPrintF>
    e64a:	|     |      addq.l #4,sp
			return FALSE;
    e64c:	|     |      clr.w d0
    e64e:	|     +----- bra.s e652 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    e650:	\-----|----> moveq #1,d0
}
    e652:	      \----> rts

0000e654 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    e654:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e656:	       move.l sp,d0
    e658:	       move.l d0,-(sp)
    e65a:	       move.l 16(sp),-(sp)
    e65e:	       move.l 16(sp),-(sp)
    e662:	       jsr e5f2 <getFuncNumForCallback>
    e668:	       lea 12(sp),sp
    e66c:	       tst.w d0
    e66e:	/----- beq.s e67e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    e670:	|      movea.l 1611c <currentEvents>,a0
    e676:	|      move.l (sp),d0
    e678:	|      move.l d0,(a0)
		return BR_CONTINUE;
    e67a:	|      moveq #2,d0
    e67c:	|  /-- bra.s e680 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    e67e:	\--|-> moveq #1,d0
}
    e680:	   \-> addq.l #4,sp
    e682:	       rts

0000e684 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    e684:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e686:	       move.l sp,d0
    e688:	       move.l d0,-(sp)
    e68a:	       move.l 16(sp),-(sp)
    e68e:	       move.l 16(sp),-(sp)
    e692:	       jsr e5f2 <getFuncNumForCallback>
    e698:	       lea 12(sp),sp
    e69c:	       tst.w d0
    e69e:	/----- beq.s e6b0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    e6a0:	|      movea.l 1611c <currentEvents>,a0
    e6a6:	|      move.l (sp),d0
    e6a8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    e6ac:	|      moveq #2,d0
    e6ae:	|  /-- bra.s e6b2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    e6b0:	\--|-> moveq #1,d0
}
    e6b2:	   \-> addq.l #4,sp
    e6b4:	       rts

0000e6b6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    e6b6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e6b8:	       move.l sp,d0
    e6ba:	       move.l d0,-(sp)
    e6bc:	       move.l 16(sp),-(sp)
    e6c0:	       move.l 16(sp),-(sp)
    e6c4:	       jsr e5f2 <getFuncNumForCallback>
    e6ca:	       lea 12(sp),sp
    e6ce:	       tst.w d0
    e6d0:	/----- beq.s e6e2 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    e6d2:	|      movea.l 1611c <currentEvents>,a0
    e6d8:	|      move.l (sp),d0
    e6da:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    e6de:	|      moveq #2,d0
    e6e0:	|  /-- bra.s e6e4 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    e6e2:	\--|-> moveq #1,d0
}
    e6e4:	   \-> addq.l #4,sp
    e6e6:	       rts

0000e6e8 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    e6e8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e6ea:	       move.l sp,d0
    e6ec:	       move.l d0,-(sp)
    e6ee:	       move.l 16(sp),-(sp)
    e6f2:	       move.l 16(sp),-(sp)
    e6f6:	       jsr e5f2 <getFuncNumForCallback>
    e6fc:	       lea 12(sp),sp
    e700:	       tst.w d0
    e702:	/----- beq.s e714 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    e704:	|      movea.l 1611c <currentEvents>,a0
    e70a:	|      move.l (sp),d0
    e70c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    e710:	|      moveq #2,d0
    e712:	|  /-- bra.s e716 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    e714:	\--|-> moveq #1,d0
}
    e716:	   \-> addq.l #4,sp
    e718:	       rts

0000e71a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    e71a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e71c:	       move.l sp,d0
    e71e:	       move.l d0,-(sp)
    e720:	       move.l 16(sp),-(sp)
    e724:	       move.l 16(sp),-(sp)
    e728:	       jsr e5f2 <getFuncNumForCallback>
    e72e:	       lea 12(sp),sp
    e732:	       tst.w d0
    e734:	/----- beq.s e746 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    e736:	|      movea.l 1611c <currentEvents>,a0
    e73c:	|      move.l (sp),d0
    e73e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    e742:	|      moveq #2,d0
    e744:	|  /-- bra.s e748 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    e746:	\--|-> moveq #1,d0
}
    e748:	   \-> addq.l #4,sp
    e74a:	       rts

0000e74c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    e74c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e74e:	       move.l sp,d0
    e750:	       move.l d0,-(sp)
    e752:	       move.l 16(sp),-(sp)
    e756:	       move.l 16(sp),-(sp)
    e75a:	       jsr e5f2 <getFuncNumForCallback>
    e760:	       lea 12(sp),sp
    e764:	       tst.w d0
    e766:	/----- beq.s e778 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    e768:	|      movea.l 1611c <currentEvents>,a0
    e76e:	|      move.l (sp),d0
    e770:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    e774:	|      moveq #2,d0
    e776:	|  /-- bra.s e77a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    e778:	\--|-> moveq #1,d0
}
    e77a:	   \-> addq.l #4,sp
    e77c:	       rts

0000e77e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    e77e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e780:	       move.l sp,d0
    e782:	       move.l d0,-(sp)
    e784:	       move.l 16(sp),-(sp)
    e788:	       move.l 16(sp),-(sp)
    e78c:	       jsr e5f2 <getFuncNumForCallback>
    e792:	       lea 12(sp),sp
    e796:	       tst.w d0
    e798:	/----- beq.s e7aa <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    e79a:	|      movea.l 1611c <currentEvents>,a0
    e7a0:	|      move.l (sp),d0
    e7a2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    e7a6:	|      moveq #2,d0
    e7a8:	|  /-- bra.s e7ac <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    e7aa:	\--|-> moveq #1,d0
}
    e7ac:	   \-> addq.l #4,sp
    e7ae:	       rts

0000e7b0 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    e7b0:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e7b2:	          move.l sp,d0
    e7b4:	          move.l d0,-(sp)
    e7b6:	          move.l 16(sp),-(sp)
    e7ba:	          move.l 16(sp),-(sp)
    e7be:	          jsr e5f2 <getFuncNumForCallback>
    e7c4:	          lea 12(sp),sp
    e7c8:	          tst.w d0
    e7ca:	/-------- beq.s e7f6 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    e7cc:	|         move.l 16754 <noStack>,d1
    e7d2:	|         move.l (sp),d0
    e7d4:	|         pea 1 <_start+0x1>
    e7d8:	|         move.l d1,-(sp)
    e7da:	|         clr.l -(sp)
    e7dc:	|         clr.l -(sp)
    e7de:	|         move.l d0,-(sp)
    e7e0:	|         jsr 4272 <startNewFunctionNum>
    e7e6:	|         lea 20(sp),sp
    e7ea:	|         tst.l d0
    e7ec:	|     /-- bne.s e7f2 <builtIn_spawnSub+0x42>
    e7ee:	|     |   moveq #1,d0
    e7f0:	|  /--|-- bra.s e7f8 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    e7f2:	|  |  \-> moveq #2,d0
    e7f4:	|  +----- bra.s e7f8 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    e7f6:	\--|----> moveq #1,d0
}
    e7f8:	   \----> addq.l #4,sp
    e7fa:	          rts

0000e7fc <builtIn_cancelSub>:

builtIn (cancelSub)
{
    e7fc:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e7fe:	          move.l sp,d0
    e800:	          addq.l #4,d0
    e802:	          move.l d0,-(sp)
    e804:	          move.l 20(sp),-(sp)
    e808:	          move.l 20(sp),-(sp)
    e80c:	          jsr e5f2 <getFuncNumForCallback>
    e812:	          lea 12(sp),sp
    e816:	          tst.w d0
    e818:	/-------- beq.s e84e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    e81a:	|         move.l 4(sp),d1
    e81e:	|         move.l sp,d0
    e820:	|         addq.l #2,d0
    e822:	|         move.l d0,-(sp)
    e824:	|         move.l 20(sp),-(sp)
    e828:	|         move.l d1,-(sp)
    e82a:	|         jsr 2236 <cancelAFunction>
    e830:	|         lea 12(sp),sp
		if (killedMyself) {
    e834:	|         move.w 2(sp),d0
    e838:	|  /----- beq.s e84a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    e83a:	|  |      move.l 16(sp),-(sp)
    e83e:	|  |      jsr 2154 <abortFunction>
    e844:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    e846:	|  |      moveq #5,d0
    e848:	|  |  /-- bra.s e850 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    e84a:	|  \--|-> moveq #2,d0
    e84c:	|     +-- bra.s e850 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    e84e:	\-----|-> moveq #1,d0
}
    e850:	      \-> addq.l #8,sp
    e852:	          rts

0000e854 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    e854:	       subq.l #8,sp
    e856:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    e858:	       movea.l 20(sp),a0
    e85c:	       move.l 24(a0),d0
    e860:	       move.l d0,-(sp)
    e862:	       jsr 115d4 <getTextFromAnyVar>
    e868:	       addq.l #4,sp
    e86a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    e86e:	   /-- bne.s e874 <builtIn_stringWidth+0x20>
    e870:	   |   moveq #1,d0
    e872:	/--|-- bra.s e8c2 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    e874:	|  \-> moveq #24,d0
    e876:	|      add.l 20(sp),d0
    e87a:	|      move.l d0,-(sp)
    e87c:	|      jsr 11982 <trimStack>
    e882:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    e884:	|      move.l 8(sp),-(sp)
    e888:	|      jsr 119dc <stringWidth>
    e88e:	|      addq.l #4,sp
    e890:	|      move.l d0,d1
    e892:	|      moveq #28,d0
    e894:	|      add.l 20(sp),d0
    e898:	|      move.l d1,-(sp)
    e89a:	|      pea 1 <_start+0x1>
    e89e:	|      move.l d0,-(sp)
    e8a0:	|      jsr 118f0 <setVariable>
    e8a6:	|      lea 12(sp),sp
	FreeVec(theText);
    e8aa:	|      move.l 8(sp),4(sp)
    e8b0:	|      move.l 16784 <SysBase>,d0
    e8b6:	|      movea.l d0,a6
    e8b8:	|      movea.l 4(sp),a1
    e8bc:	|      jsr -690(a6)
	return BR_CONTINUE;
    e8c0:	|      moveq #2,d0
}
    e8c2:	\----> movea.l (sp)+,a6
    e8c4:	       addq.l #8,sp
    e8c6:	       rts

0000e8c8 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e8c8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8ca:	       movea.l 12(sp),a0
    e8ce:	       move.l 24(a0),d0
    e8d2:	       move.l d0,-(sp)
    e8d4:	       pea 1 <_start+0x1>
    e8d8:	       move.l sp,d0
    e8da:	       addq.l #8,d0
    e8dc:	       move.l d0,-(sp)
    e8de:	       jsr 10ffe <getValueType>
    e8e4:	       lea 12(sp),sp
    e8e8:	       tst.w d0
    e8ea:	   /-- bne.s e8f0 <builtIn_hardScroll+0x28>
    e8ec:	   |   moveq #1,d0
    e8ee:	/--|-- bra.s e90e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e8f0:	|  \-> moveq #24,d0
    e8f2:	|      add.l 12(sp),d0
    e8f6:	|      move.l d0,-(sp)
    e8f8:	|      jsr 11982 <trimStack>
    e8fe:	|      addq.l #4,sp
	hardScroll (v);
    e900:	|      move.l (sp),d0
    e902:	|      move.l d0,-(sp)
    e904:	|      jsr 9b92 <hardScroll>
    e90a:	|      addq.l #4,sp
	return BR_CONTINUE;
    e90c:	|      moveq #2,d0
}
    e90e:	\----> addq.l #4,sp
    e910:	       rts

0000e912 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e912:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e914:	       movea.l 12(sp),a0
    e918:	       move.l 24(a0),d0
    e91c:	       move.l d0,-(sp)
    e91e:	       pea 7 <_start+0x7>
    e922:	       move.l sp,d0
    e924:	       addq.l #8,d0
    e926:	       move.l d0,-(sp)
    e928:	       jsr 10ffe <getValueType>
    e92e:	       lea 12(sp),sp
    e932:	       tst.w d0
    e934:	   /-- bne.s e93a <builtIn_isScreenRegion+0x28>
    e936:	   |   moveq #1,d0
    e938:	/--|-- bra.s e97a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e93a:	|  \-> moveq #24,d0
    e93c:	|      add.l 12(sp),d0
    e940:	|      move.l d0,-(sp)
    e942:	|      jsr 11982 <trimStack>
    e948:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e94a:	|      move.l (sp),d0
    e94c:	|      move.l d0,-(sp)
    e94e:	|      jsr 11ac8 <getRegionForObject>
    e954:	|      addq.l #4,sp
    e956:	|      tst.l d0
    e958:	|      sne d0
    e95a:	|      neg.b d0
    e95c:	|      moveq #0,d1
    e95e:	|      move.b d0,d1
    e960:	|      moveq #28,d0
    e962:	|      add.l 12(sp),d0
    e966:	|      move.l d1,-(sp)
    e968:	|      pea 1 <_start+0x1>
    e96c:	|      move.l d0,-(sp)
    e96e:	|      jsr 118f0 <setVariable>
    e974:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e978:	|      moveq #2,d0
}
    e97a:	\----> addq.l #4,sp
    e97c:	       rts

0000e97e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e97e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e980:	       movea.l 12(sp),a0
    e984:	       move.l 24(a0),d0
    e988:	       move.l d0,-(sp)
    e98a:	       pea 1 <_start+0x1>
    e98e:	       move.l sp,d0
    e990:	       addq.l #8,d0
    e992:	       move.l d0,-(sp)
    e994:	       jsr 10ffe <getValueType>
    e99a:	       lea 12(sp),sp
    e99e:	       tst.w d0
    e9a0:	   /-- bne.s e9a6 <builtIn_setSpeechSpeed+0x28>
    e9a2:	   |   moveq #1,d0
    e9a4:	/--|-- bra.s e9f4 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e9a6:	|  \-> moveq #24,d0
    e9a8:	|      add.l 12(sp),d0
    e9ac:	|      move.l d0,-(sp)
    e9ae:	|      jsr 11982 <trimStack>
    e9b4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e9b6:	|      move.l (sp),d0
    e9b8:	|      move.l d0,-(sp)
    e9ba:	|      jsr 132fe <__floatsisf>
    e9c0:	|      addq.l #4,sp
    e9c2:	|      move.l #1008981770,-(sp)
    e9c8:	|      move.l d0,-(sp)
    e9ca:	|      jsr 133b0 <__mulsf3>
    e9d0:	|      addq.l #8,sp
    e9d2:	|      move.l d0,1612e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e9d8:	|      moveq #28,d0
    e9da:	|      add.l 12(sp),d0
    e9de:	|      pea 1 <_start+0x1>
    e9e2:	|      pea 1 <_start+0x1>
    e9e6:	|      move.l d0,-(sp)
    e9e8:	|      jsr 118f0 <setVariable>
    e9ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e9f2:	|      moveq #2,d0
}
    e9f4:	\----> addq.l #4,sp
    e9f6:	       rts

0000e9f8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e9f8:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9fa:	       movea.l 12(sp),a0
    e9fe:	       move.l 24(a0),d0
    ea02:	       move.l d0,-(sp)
    ea04:	       pea 1 <_start+0x1>
    ea08:	       move.l sp,d0
    ea0a:	       addq.l #8,d0
    ea0c:	       move.l d0,-(sp)
    ea0e:	       jsr 10ffe <getValueType>
    ea14:	       lea 12(sp),sp
    ea18:	       tst.w d0
    ea1a:	   /-- bne.s ea20 <builtIn_setFontSpacing+0x28>
    ea1c:	   |   moveq #1,d0
    ea1e:	/--|-- bra.s ea56 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    ea20:	|  \-> move.l (sp),d0
    ea22:	|      move.l d0,d0
    ea24:	|      move.w d0,166a8 <fontSpace>
	trimStack (&fun -> stack);
    ea2a:	|      moveq #24,d0
    ea2c:	|      add.l 12(sp),d0
    ea30:	|      move.l d0,-(sp)
    ea32:	|      jsr 11982 <trimStack>
    ea38:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    ea3a:	|      moveq #28,d0
    ea3c:	|      add.l 12(sp),d0
    ea40:	|      pea 1 <_start+0x1>
    ea44:	|      pea 1 <_start+0x1>
    ea48:	|      move.l d0,-(sp)
    ea4a:	|      jsr 118f0 <setVariable>
    ea50:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea54:	|      moveq #2,d0
}
    ea56:	\----> addq.l #4,sp
    ea58:	       rts

0000ea5a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    ea5a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea5c:	          movea.l 12(sp),a0
    ea60:	          move.l 24(a0),d0
    ea64:	          move.l d0,-(sp)
    ea66:	          pea 1 <_start+0x1>
    ea6a:	          move.l sp,d0
    ea6c:	          addq.l #8,d0
    ea6e:	          move.l d0,-(sp)
    ea70:	          jsr 10ffe <getValueType>
    ea76:	          lea 12(sp),sp
    ea7a:	          tst.w d0
    ea7c:	      /-- bne.s ea82 <builtIn_transitionLevel+0x28>
    ea7e:	      |   moveq #1,d0
    ea80:	/-----|-- bra.s ead6 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    ea82:	|     \-> moveq #24,d0
    ea84:	|         add.l 12(sp),d0
    ea88:	|         move.l d0,-(sp)
    ea8a:	|         jsr 11982 <trimStack>
    ea90:	|         addq.l #4,sp

	if (number < 0)
    ea92:	|         move.l (sp),d0
    ea94:	|     /-- bpl.s ea9e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    ea96:	|     |   clr.b 1611a <brightnessLevel>
    ea9c:	|  /--|-- bra.s eaba <builtIn_transitionLevel+0x60>
	else if (number > 255)
    ea9e:	|  |  \-> move.l (sp),d0
    eaa0:	|  |      cmpi.l #255,d0
    eaa6:	|  |  /-- ble.s eab0 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    eaa8:	|  |  |   st 1611a <brightnessLevel>
    eaae:	|  +--|-- bra.s eaba <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    eab0:	|  |  \-> move.l (sp),d0
    eab2:	|  |      move.l d0,d0
    eab4:	|  |      move.b d0,1611a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    eaba:	|  \----> moveq #28,d0
    eabc:	|         add.l 12(sp),d0
    eac0:	|         pea 1 <_start+0x1>
    eac4:	|         pea 1 <_start+0x1>
    eac8:	|         move.l d0,-(sp)
    eaca:	|         jsr 118f0 <setVariable>
    ead0:	|         lea 12(sp),sp
	return BR_CONTINUE;
    ead4:	|         moveq #2,d0
}
    ead6:	\-------> addq.l #4,sp
    ead8:	          rts

0000eada <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    eada:	movea.l 8(sp),a0
    eade:	move.l 24(a0),d0
    eae2:	move.l d0,-(sp)
    eae4:	jsr 1153e <getBoolean>
    eaea:	addq.l #4,sp
    eaec:	move.w d0,16728 <captureAllKeys>
	trimStack (&fun -> stack);
    eaf2:	moveq #24,d0
    eaf4:	add.l 8(sp),d0
    eaf8:	move.l d0,-(sp)
    eafa:	jsr 11982 <trimStack>
    eb00:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    eb02:	move.w 16728 <captureAllKeys>,d0
    eb08:	movea.w d0,a0
    eb0a:	moveq #28,d0
    eb0c:	add.l 8(sp),d0
    eb10:	move.l a0,-(sp)
    eb12:	pea 1 <_start+0x1>
    eb16:	move.l d0,-(sp)
    eb18:	jsr 118f0 <setVariable>
    eb1e:	lea 12(sp),sp
	return BR_CONTINUE;
    eb22:	moveq #2,d0
}
    eb24:	rts

0000eb26 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    eb26:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb2a:	       movea.l 20(sp),a0
    eb2e:	       move.l 24(a0),d0
    eb32:	       move.l d0,-(sp)
    eb34:	       pea 1 <_start+0x1>
    eb38:	       moveq #12,d0
    eb3a:	       add.l sp,d0
    eb3c:	       move.l d0,-(sp)
    eb3e:	       jsr 10ffe <getValueType>
    eb44:	       lea 12(sp),sp
    eb48:	       tst.w d0
    eb4a:	   /-- bne.s eb52 <builtIn_spinCharacter+0x2c>
    eb4c:	   |   moveq #1,d0
    eb4e:	/--|-- bra.w ec02 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    eb52:	|  \-> moveq #24,d0
    eb54:	|      add.l 20(sp),d0
    eb58:	|      move.l d0,-(sp)
    eb5a:	|      jsr 11982 <trimStack>
    eb60:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb62:	|      movea.l 20(sp),a0
    eb66:	|      move.l 24(a0),d0
    eb6a:	|      move.l d0,-(sp)
    eb6c:	|      pea 7 <_start+0x7>
    eb70:	|      lea 8(sp),a0
    eb74:	|      move.l a0,-(sp)
    eb76:	|      jsr 10ffe <getValueType>
    eb7c:	|      lea 12(sp),sp
    eb80:	|      tst.w d0
    eb82:	|  /-- bne.s eb88 <builtIn_spinCharacter+0x62>
    eb84:	|  |   moveq #1,d0
    eb86:	+--|-- bra.s ec02 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    eb88:	|  \-> moveq #24,d0
    eb8a:	|      add.l 20(sp),d0
    eb8e:	|      move.l d0,-(sp)
    eb90:	|      jsr 11982 <trimStack>
    eb96:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eb98:	|      move.l (sp),d0
    eb9a:	|      move.l d0,-(sp)
    eb9c:	|      jsr 71d8 <findPerson>
    eba2:	|      addq.l #4,sp
    eba4:	|      move.l d0,8(sp)
	if (thisPerson) {
    eba8:	|  /-- beq.s ebe8 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    ebaa:	|  |   move.l 4(sp),d0
    ebae:	|  |   movea.l 8(sp),a0
    ebb2:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    ebb6:	|  |   movea.l 8(sp),a0
    ebba:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    ebc0:	|  |   movea.l 8(sp),a0
    ebc4:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ebca:	|  |   moveq #28,d0
    ebcc:	|  |   add.l 20(sp),d0
    ebd0:	|  |   pea 1 <_start+0x1>
    ebd4:	|  |   pea 1 <_start+0x1>
    ebd8:	|  |   move.l d0,-(sp)
    ebda:	|  |   jsr 118f0 <setVariable>
    ebe0:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    ebe4:	|  |   moveq #3,d0
    ebe6:	+--|-- bra.s ec02 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ebe8:	|  \-> moveq #28,d0
    ebea:	|      add.l 20(sp),d0
    ebee:	|      clr.l -(sp)
    ebf0:	|      pea 1 <_start+0x1>
    ebf4:	|      move.l d0,-(sp)
    ebf6:	|      jsr 118f0 <setVariable>
    ebfc:	|      lea 12(sp),sp
		return BR_CONTINUE;
    ec00:	|      moveq #2,d0
	}
}
    ec02:	\----> lea 12(sp),sp
    ec06:	       rts

0000ec08 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    ec08:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec0a:	          movea.l 16(sp),a0
    ec0e:	          move.l 24(a0),d0
    ec12:	          move.l d0,-(sp)
    ec14:	          pea 7 <_start+0x7>
    ec18:	          move.l sp,d0
    ec1a:	          addq.l #8,d0
    ec1c:	          move.l d0,-(sp)
    ec1e:	          jsr 10ffe <getValueType>
    ec24:	          lea 12(sp),sp
    ec28:	          tst.w d0
    ec2a:	      /-- bne.s ec30 <builtIn_getCharacterDirection+0x28>
    ec2c:	      |   moveq #1,d0
    ec2e:	/-----|-- bra.s ec8e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    ec30:	|     \-> moveq #24,d0
    ec32:	|         add.l 16(sp),d0
    ec36:	|         move.l d0,-(sp)
    ec38:	|         jsr 11982 <trimStack>
    ec3e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ec40:	|         move.l (sp),d0
    ec42:	|         move.l d0,-(sp)
    ec44:	|         jsr 71d8 <findPerson>
    ec4a:	|         addq.l #4,sp
    ec4c:	|         move.l d0,4(sp)
	if (thisPerson) {
    ec50:	|  /----- beq.s ec74 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    ec52:	|  |      movea.l 4(sp),a0
    ec56:	|  |      move.l 94(a0),d1
    ec5a:	|  |      moveq #28,d0
    ec5c:	|  |      add.l 16(sp),d0
    ec60:	|  |      move.l d1,-(sp)
    ec62:	|  |      pea 1 <_start+0x1>
    ec66:	|  |      move.l d0,-(sp)
    ec68:	|  |      jsr 118f0 <setVariable>
    ec6e:	|  |      lea 12(sp),sp
    ec72:	|  |  /-- bra.s ec8c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ec74:	|  \--|-> moveq #28,d0
    ec76:	|     |   add.l 16(sp),d0
    ec7a:	|     |   clr.l -(sp)
    ec7c:	|     |   pea 1 <_start+0x1>
    ec80:	|     |   move.l d0,-(sp)
    ec82:	|     |   jsr 118f0 <setVariable>
    ec88:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ec8c:	|     \-> moveq #2,d0
}
    ec8e:	\-------> addq.l #8,sp
    ec90:	          rts

0000ec92 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    ec92:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec94:	       movea.l 16(sp),a0
    ec98:	       move.l 24(a0),d0
    ec9c:	       move.l d0,-(sp)
    ec9e:	       pea 7 <_start+0x7>
    eca2:	       move.l sp,d0
    eca4:	       addq.l #8,d0
    eca6:	       move.l d0,-(sp)
    eca8:	       jsr 10ffe <getValueType>
    ecae:	       lea 12(sp),sp
    ecb2:	       tst.w d0
    ecb4:	   /-- bne.s ecba <builtIn_isCharacter+0x28>
    ecb6:	   |   moveq #1,d0
    ecb8:	/--|-- bra.s ecfc <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    ecba:	|  \-> moveq #24,d0
    ecbc:	|      add.l 16(sp),d0
    ecc0:	|      move.l d0,-(sp)
    ecc2:	|      jsr 11982 <trimStack>
    ecc8:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ecca:	|      move.l (sp),d0
    eccc:	|      move.l d0,-(sp)
    ecce:	|      jsr 71d8 <findPerson>
    ecd4:	|      addq.l #4,sp
    ecd6:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    ecda:	|      sne d0
    ecdc:	|      neg.b d0
    ecde:	|      moveq #0,d1
    ece0:	|      move.b d0,d1
    ece2:	|      moveq #28,d0
    ece4:	|      add.l 16(sp),d0
    ece8:	|      move.l d1,-(sp)
    ecea:	|      pea 1 <_start+0x1>
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 118f0 <setVariable>
    ecf6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ecfa:	|      moveq #2,d0
}
    ecfc:	\----> addq.l #8,sp
    ecfe:	       rts

0000ed00 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    ed00:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed02:	          movea.l 16(sp),a0
    ed06:	          move.l 24(a0),d0
    ed0a:	          move.l d0,-(sp)
    ed0c:	          pea 7 <_start+0x7>
    ed10:	          move.l sp,d0
    ed12:	          addq.l #8,d0
    ed14:	          move.l d0,-(sp)
    ed16:	          jsr 10ffe <getValueType>
    ed1c:	          lea 12(sp),sp
    ed20:	          tst.w d0
    ed22:	      /-- bne.s ed28 <builtIn_normalCharacter+0x28>
    ed24:	      |   moveq #1,d0
    ed26:	/-----|-- bra.s eda4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    ed28:	|     \-> moveq #24,d0
    ed2a:	|         add.l 16(sp),d0
    ed2e:	|         move.l d0,-(sp)
    ed30:	|         jsr 11982 <trimStack>
    ed36:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ed38:	|         move.l (sp),d0
    ed3a:	|         move.l d0,-(sp)
    ed3c:	|         jsr 71d8 <findPerson>
    ed42:	|         addq.l #4,sp
    ed44:	|         move.l d0,4(sp)
	if (thisPerson)
    ed48:	|  /----- beq.s ed8a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    ed4a:	|  |      movea.l 4(sp),a0
    ed4e:	|  |      movea.l 68(a0),a0
    ed52:	|  |      move.l (a0),d1
    ed54:	|  |      movea.l 4(sp),a0
    ed58:	|  |      move.l 94(a0),d0
    ed5c:	|  |      add.l d0,d0
    ed5e:	|  |      add.l d0,d0
    ed60:	|  |      movea.l d1,a0
    ed62:	|  |      adda.l d0,a0
    ed64:	|  |      move.l (a0),d0
    ed66:	|  |      movea.l 4(sp),a0
    ed6a:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ed6e:	|  |      moveq #28,d0
    ed70:	|  |      add.l 16(sp),d0
    ed74:	|  |      pea 1 <_start+0x1>
    ed78:	|  |      pea 1 <_start+0x1>
    ed7c:	|  |      move.l d0,-(sp)
    ed7e:	|  |      jsr 118f0 <setVariable>
    ed84:	|  |      lea 12(sp),sp
    ed88:	|  |  /-- bra.s eda2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ed8a:	|  \--|-> moveq #28,d0
    ed8c:	|     |   add.l 16(sp),d0
    ed90:	|     |   clr.l -(sp)
    ed92:	|     |   pea 1 <_start+0x1>
    ed96:	|     |   move.l d0,-(sp)
    ed98:	|     |   jsr 118f0 <setVariable>
    ed9e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eda2:	|     \-> moveq #2,d0
}
    eda4:	\-------> addq.l #8,sp
    eda6:	          rts

0000eda8 <builtIn_isMoving>:

builtIn(isMoving)
{
    eda8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    edaa:	          movea.l 16(sp),a0
    edae:	          move.l 24(a0),d0
    edb2:	          move.l d0,-(sp)
    edb4:	          pea 7 <_start+0x7>
    edb8:	          move.l sp,d0
    edba:	          addq.l #8,d0
    edbc:	          move.l d0,-(sp)
    edbe:	          jsr 10ffe <getValueType>
    edc4:	          lea 12(sp),sp
    edc8:	          tst.w d0
    edca:	      /-- bne.s edd0 <builtIn_isMoving+0x28>
    edcc:	      |   moveq #1,d0
    edce:	/-----|-- bra.s ee30 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    edd0:	|     \-> moveq #24,d0
    edd2:	|         add.l 16(sp),d0
    edd6:	|         move.l d0,-(sp)
    edd8:	|         jsr 11982 <trimStack>
    edde:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ede0:	|         move.l (sp),d0
    ede2:	|         move.l d0,-(sp)
    ede4:	|         jsr 71d8 <findPerson>
    edea:	|         addq.l #4,sp
    edec:	|         move.l d0,4(sp)
	if (thisPerson)
    edf0:	|  /----- beq.s ee16 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    edf2:	|  |      movea.l 4(sp),a0
    edf6:	|  |      move.w 52(a0),d0
    edfa:	|  |      movea.w d0,a0
    edfc:	|  |      moveq #28,d0
    edfe:	|  |      add.l 16(sp),d0
    ee02:	|  |      move.l a0,-(sp)
    ee04:	|  |      pea 1 <_start+0x1>
    ee08:	|  |      move.l d0,-(sp)
    ee0a:	|  |      jsr 118f0 <setVariable>
    ee10:	|  |      lea 12(sp),sp
    ee14:	|  |  /-- bra.s ee2e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ee16:	|  \--|-> moveq #28,d0
    ee18:	|     |   add.l 16(sp),d0
    ee1c:	|     |   clr.l -(sp)
    ee1e:	|     |   pea 1 <_start+0x1>
    ee22:	|     |   move.l d0,-(sp)
    ee24:	|     |   jsr 118f0 <setVariable>
    ee2a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ee2e:	|     \-> moveq #2,d0
}
    ee30:	\-------> addq.l #8,sp
    ee32:	          rts

0000ee34 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ee34:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee38:	          movea.l 20(sp),a0
    ee3c:	          move.l 24(a0),d0
    ee40:	          move.l d0,-(sp)
    ee42:	          pea 7 <_start+0x7>
    ee46:	          lea 8(sp),a0
    ee4a:	          move.l a0,-(sp)
    ee4c:	          jsr 10ffe <getValueType>
    ee52:	          lea 12(sp),sp
    ee56:	          tst.w d0
    ee58:	      /-- bne.s ee60 <builtIn_fetchEvent+0x2c>
    ee5a:	      |   moveq #1,d0
    ee5c:	/-----|-- bra.w eef4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ee60:	|     \-> moveq #24,d0
    ee62:	|         add.l 20(sp),d0
    ee66:	|         move.l d0,-(sp)
    ee68:	|         jsr 11982 <trimStack>
    ee6e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee70:	|         movea.l 20(sp),a0
    ee74:	|         move.l 24(a0),d0
    ee78:	|         move.l d0,-(sp)
    ee7a:	|         pea 7 <_start+0x7>
    ee7e:	|         moveq #12,d0
    ee80:	|         add.l sp,d0
    ee82:	|         move.l d0,-(sp)
    ee84:	|         jsr 10ffe <getValueType>
    ee8a:	|         lea 12(sp),sp
    ee8e:	|         tst.w d0
    ee90:	|     /-- bne.s ee96 <builtIn_fetchEvent+0x62>
    ee92:	|     |   moveq #1,d0
    ee94:	+-----|-- bra.s eef4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ee96:	|     \-> moveq #24,d0
    ee98:	|         add.l 20(sp),d0
    ee9c:	|         move.l d0,-(sp)
    ee9e:	|         jsr 11982 <trimStack>
    eea4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    eea6:	|         move.l (sp),d1
    eea8:	|         move.l 4(sp),d0
    eeac:	|         move.l d1,-(sp)
    eeae:	|         move.l d0,-(sp)
    eeb0:	|         jsr 9e68 <getCombinationFunction>
    eeb6:	|         addq.l #8,sp
    eeb8:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    eebc:	|  /----- beq.s eeda <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    eebe:	|  |      moveq #28,d0
    eec0:	|  |      add.l 20(sp),d0
    eec4:	|  |      move.l 8(sp),-(sp)
    eec8:	|  |      pea 2 <_start+0x2>
    eecc:	|  |      move.l d0,-(sp)
    eece:	|  |      jsr 118f0 <setVariable>
    eed4:	|  |      lea 12(sp),sp
    eed8:	|  |  /-- bra.s eef2 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eeda:	|  \--|-> moveq #28,d0
    eedc:	|     |   add.l 20(sp),d0
    eee0:	|     |   clr.l -(sp)
    eee2:	|     |   pea 1 <_start+0x1>
    eee6:	|     |   move.l d0,-(sp)
    eee8:	|     |   jsr 118f0 <setVariable>
    eeee:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eef2:	|     \-> moveq #2,d0
}
    eef4:	\-------> lea 12(sp),sp
    eef8:	          rts

0000eefa <builtIn_deleteFile>:

builtIn(deleteFile)
{
    eefa:	       lea -24(sp),sp
    eefe:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    ef00:	       movea.l 36(sp),a0
    ef04:	       move.l 24(a0),d0
    ef08:	       move.l d0,-(sp)
    ef0a:	       jsr 115d4 <getTextFromAnyVar>
    ef10:	       addq.l #4,sp
    ef12:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    ef16:	       moveq #24,d0
    ef18:	       add.l 36(sp),d0
    ef1c:	       move.l d0,-(sp)
    ef1e:	       jsr 11982 <trimStack>
    ef24:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    ef26:	       move.l 24(sp),-(sp)
    ef2a:	       jsr 2fe <encodeFilename>
    ef30:	       addq.l #4,sp
    ef32:	       move.l d0,20(sp)
    FreeVec(namNormal);
    ef36:	       move.l 24(sp),16(sp)
    ef3c:	       move.l 16784 <SysBase>,d0
    ef42:	       movea.l d0,a6
    ef44:	       movea.l 16(sp),a1
    ef48:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    ef4c:	       move.l 20(sp),-(sp)
    ef50:	       jsr ac20 <failSecurityCheck>
    ef56:	       addq.l #4,sp
    ef58:	       tst.w d0
    ef5a:	   /-- beq.s ef60 <builtIn_deleteFile+0x66>
    ef5c:	   |   moveq #1,d0
    ef5e:	/--|-- bra.s efae <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    ef60:	|  \-> move.l 20(sp),12(sp)
    ef66:	|      move.l 1678c <DOSBase>,d0
    ef6c:	|      movea.l d0,a6
    ef6e:	|      move.l 12(sp),d1
    ef72:	|      jsr -72(a6)
    ef76:	|      move.l d0,8(sp)
    ef7a:	|      move.l 8(sp),d1
    ef7e:	|      moveq #28,d0
    ef80:	|      add.l 36(sp),d0
    ef84:	|      move.l d1,-(sp)
    ef86:	|      pea 1 <_start+0x1>
    ef8a:	|      move.l d0,-(sp)
    ef8c:	|      jsr 118f0 <setVariable>
    ef92:	|      lea 12(sp),sp
    FreeVec(nam);
    ef96:	|      move.l 20(sp),4(sp)
    ef9c:	|      move.l 16784 <SysBase>,d0
    efa2:	|      movea.l d0,a6
    efa4:	|      movea.l 4(sp),a1
    efa8:	|      jsr -690(a6)

    return BR_CONTINUE;
    efac:	|      moveq #2,d0
}
    efae:	\----> movea.l (sp)+,a6
    efb0:	       lea 24(sp),sp
    efb4:	       rts

0000efb6 <builtIn_renameFile>:

builtIn(renameFile)
{
    efb6:	       lea -40(sp),sp
    efba:	       move.l a6,-(sp)
    efbc:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    efbe:	       movea.l 56(sp),a0
    efc2:	       move.l 24(a0),d0
    efc6:	       move.l d0,-(sp)
    efc8:	       jsr 115d4 <getTextFromAnyVar>
    efce:	       addq.l #4,sp
    efd0:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    efd4:	       move.l 44(sp),-(sp)
    efd8:	       jsr 2fe <encodeFilename>
    efde:	       addq.l #4,sp
    efe0:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    efe4:	       moveq #24,d0
    efe6:	       add.l 56(sp),d0
    efea:	       move.l d0,-(sp)
    efec:	       jsr 11982 <trimStack>
    eff2:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    eff4:	       move.l 40(sp),-(sp)
    eff8:	       jsr ac20 <failSecurityCheck>
    effe:	       addq.l #4,sp
    f000:	       tst.w d0
    f002:	   /-- beq.s f00a <builtIn_renameFile+0x54>
    f004:	   |   moveq #1,d0
    f006:	/--|-- bra.w f0f0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    f00a:	|  \-> move.l 44(sp),36(sp)
    f010:	|      move.l 16784 <SysBase>,d0
    f016:	|      movea.l d0,a6
    f018:	|      movea.l 36(sp),a1
    f01c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    f020:	|      movea.l 56(sp),a0
    f024:	|      move.l 24(a0),d0
    f028:	|      move.l d0,-(sp)
    f02a:	|      jsr 115d4 <getTextFromAnyVar>
    f030:	|      addq.l #4,sp
    f032:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    f036:	|      move.l 44(sp),-(sp)
    f03a:	|      jsr 2fe <encodeFilename>
    f040:	|      addq.l #4,sp
    f042:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    f046:	|      moveq #24,d0
    f048:	|      add.l 56(sp),d0
    f04c:	|      move.l d0,-(sp)
    f04e:	|      jsr 11982 <trimStack>
    f054:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    f056:	|      move.l 32(sp),-(sp)
    f05a:	|      jsr ac20 <failSecurityCheck>
    f060:	|      addq.l #4,sp
    f062:	|      tst.w d0
    f064:	|  /-- beq.s f06c <builtIn_renameFile+0xb6>
    f066:	|  |   moveq #1,d0
    f068:	+--|-- bra.w f0f0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    f06c:	|  \-> move.l 44(sp),28(sp)
    f072:	|      move.l 16784 <SysBase>,d0
    f078:	|      movea.l d0,a6
    f07a:	|      movea.l 28(sp),a1
    f07e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    f082:	|      move.l 32(sp),24(sp)
    f088:	|      move.l 40(sp),20(sp)
    f08e:	|      move.l 1678c <DOSBase>,d0
    f094:	|      movea.l d0,a6
    f096:	|      move.l 24(sp),d1
    f09a:	|      move.l 20(sp),d2
    f09e:	|      jsr -78(a6)
    f0a2:	|      move.l d0,16(sp)
    f0a6:	|      move.l 16(sp),d1
    f0aa:	|      moveq #28,d0
    f0ac:	|      add.l 56(sp),d0
    f0b0:	|      move.l d1,-(sp)
    f0b2:	|      pea 1 <_start+0x1>
    f0b6:	|      move.l d0,-(sp)
    f0b8:	|      jsr 118f0 <setVariable>
    f0be:	|      lea 12(sp),sp
	FreeVec(nam);
    f0c2:	|      move.l 32(sp),12(sp)
    f0c8:	|      move.l 16784 <SysBase>,d0
    f0ce:	|      movea.l d0,a6
    f0d0:	|      movea.l 12(sp),a1
    f0d4:	|      jsr -690(a6)
	FreeVec(newnam);
    f0d8:	|      move.l 40(sp),8(sp)
    f0de:	|      move.l 16784 <SysBase>,d0
    f0e4:	|      movea.l d0,a6
    f0e6:	|      movea.l 8(sp),a1
    f0ea:	|      jsr -690(a6)

	return BR_CONTINUE;
    f0ee:	|      moveq #2,d0
}
    f0f0:	\----> move.l (sp)+,d2
    f0f2:	       movea.l (sp)+,a6
    f0f4:	       lea 40(sp),sp
    f0f8:	       rts

0000f0fa <builtIn_cacheSound>:

builtIn(cacheSound)
{
    f0fa:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f0fc:	       movea.l 12(sp),a0
    f100:	       move.l 24(a0),d0
    f104:	       move.l d0,-(sp)
    f106:	       pea 5 <_start+0x5>
    f10a:	       move.l sp,d0
    f10c:	       addq.l #8,d0
    f10e:	       move.l d0,-(sp)
    f110:	       jsr 10ffe <getValueType>
    f116:	       lea 12(sp),sp
    f11a:	       tst.w d0
    f11c:	   /-- bne.s f122 <builtIn_cacheSound+0x28>
    f11e:	   |   moveq #1,d0
    f120:	/--|-- bra.s f14a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    f122:	|  \-> moveq #24,d0
    f124:	|      add.l 12(sp),d0
    f128:	|      move.l d0,-(sp)
    f12a:	|      jsr 11982 <trimStack>
    f130:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    f132:	|      move.l (sp),d0
    f134:	|      move.l d0,-(sp)
    f136:	|      jsr 9a74 <cacheSound>
    f13c:	|      addq.l #4,sp
    f13e:	|      moveq #-1,d1
    f140:	|      cmp.l d0,d1
    f142:	|  /-- bne.s f148 <builtIn_cacheSound+0x4e>
    f144:	|  |   moveq #1,d0
    f146:	+--|-- bra.s f14a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    f148:	|  \-> moveq #2,d0
}
    f14a:	\----> addq.l #4,sp
    f14c:	       rts

0000f14e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    f14e:	pea 153ce <custom.c.9a493ead+0xc1e>
    f154:	jsr 13046 <KPrintF>
    f15a:	addq.l #4,sp
	return BR_CONTINUE;
    f15c:	moveq #2,d0
}
    f15e:	rts

0000f160 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    f160:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f164:	          movea.l 20(sp),a0
    f168:	          move.l 24(a0),d0
    f16c:	          move.l d0,-(sp)
    f16e:	          pea 1 <_start+0x1>
    f172:	          moveq #12,d0
    f174:	          add.l sp,d0
    f176:	          move.l d0,-(sp)
    f178:	          jsr 10ffe <getValueType>
    f17e:	          lea 12(sp),sp
    f182:	          tst.w d0
    f184:	      /-- bne.s f18c <builtIn_setCharacterSpinSpeed+0x2c>
    f186:	      |   moveq #1,d0
    f188:	/-----|-- bra.w f226 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f18c:	|     \-> moveq #24,d0
    f18e:	|         add.l 20(sp),d0
    f192:	|         move.l d0,-(sp)
    f194:	|         jsr 11982 <trimStack>
    f19a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f19c:	|         movea.l 20(sp),a0
    f1a0:	|         move.l 24(a0),d0
    f1a4:	|         move.l d0,-(sp)
    f1a6:	|         pea 7 <_start+0x7>
    f1aa:	|         lea 8(sp),a0
    f1ae:	|         move.l a0,-(sp)
    f1b0:	|         jsr 10ffe <getValueType>
    f1b6:	|         lea 12(sp),sp
    f1ba:	|         tst.w d0
    f1bc:	|     /-- bne.s f1c2 <builtIn_setCharacterSpinSpeed+0x62>
    f1be:	|     |   moveq #1,d0
    f1c0:	+-----|-- bra.s f226 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f1c2:	|     \-> moveq #24,d0
    f1c4:	|         add.l 20(sp),d0
    f1c8:	|         move.l d0,-(sp)
    f1ca:	|         jsr 11982 <trimStack>
    f1d0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f1d2:	|         move.l (sp),d0
    f1d4:	|         move.l d0,-(sp)
    f1d6:	|         jsr 71d8 <findPerson>
    f1dc:	|         addq.l #4,sp
    f1de:	|         move.l d0,8(sp)

	if (thisPerson) {
    f1e2:	|  /----- beq.s f20c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    f1e4:	|  |      move.l 4(sp),d0
    f1e8:	|  |      movea.l 8(sp),a0
    f1ec:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f1f0:	|  |      moveq #28,d0
    f1f2:	|  |      add.l 20(sp),d0
    f1f6:	|  |      pea 1 <_start+0x1>
    f1fa:	|  |      pea 1 <_start+0x1>
    f1fe:	|  |      move.l d0,-(sp)
    f200:	|  |      jsr 118f0 <setVariable>
    f206:	|  |      lea 12(sp),sp
    f20a:	|  |  /-- bra.s f224 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f20c:	|  \--|-> moveq #28,d0
    f20e:	|     |   add.l 20(sp),d0
    f212:	|     |   clr.l -(sp)
    f214:	|     |   pea 1 <_start+0x1>
    f218:	|     |   move.l d0,-(sp)
    f21a:	|     |   jsr 118f0 <setVariable>
    f220:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f224:	|     \-> moveq #2,d0
}
    f226:	\-------> lea 12(sp),sp
    f22a:	          rts

0000f22c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    f22c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f230:	          movea.l 20(sp),a0
    f234:	          move.l 24(a0),d0
    f238:	          move.l d0,-(sp)
    f23a:	          pea 1 <_start+0x1>
    f23e:	          moveq #12,d0
    f240:	          add.l sp,d0
    f242:	          move.l d0,-(sp)
    f244:	          jsr 10ffe <getValueType>
    f24a:	          lea 12(sp),sp
    f24e:	          tst.w d0
    f250:	      /-- bne.s f258 <builtIn_setCharacterAngleOffset+0x2c>
    f252:	      |   moveq #1,d0
    f254:	/-----|-- bra.w f2f2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f258:	|     \-> moveq #24,d0
    f25a:	|         add.l 20(sp),d0
    f25e:	|         move.l d0,-(sp)
    f260:	|         jsr 11982 <trimStack>
    f266:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f268:	|         movea.l 20(sp),a0
    f26c:	|         move.l 24(a0),d0
    f270:	|         move.l d0,-(sp)
    f272:	|         pea 7 <_start+0x7>
    f276:	|         lea 8(sp),a0
    f27a:	|         move.l a0,-(sp)
    f27c:	|         jsr 10ffe <getValueType>
    f282:	|         lea 12(sp),sp
    f286:	|         tst.w d0
    f288:	|     /-- bne.s f28e <builtIn_setCharacterAngleOffset+0x62>
    f28a:	|     |   moveq #1,d0
    f28c:	+-----|-- bra.s f2f2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f28e:	|     \-> moveq #24,d0
    f290:	|         add.l 20(sp),d0
    f294:	|         move.l d0,-(sp)
    f296:	|         jsr 11982 <trimStack>
    f29c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f29e:	|         move.l (sp),d0
    f2a0:	|         move.l d0,-(sp)
    f2a2:	|         jsr 71d8 <findPerson>
    f2a8:	|         addq.l #4,sp
    f2aa:	|         move.l d0,8(sp)

	if (thisPerson) {
    f2ae:	|  /----- beq.s f2d8 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    f2b0:	|  |      move.l 4(sp),d0
    f2b4:	|  |      movea.l 8(sp),a0
    f2b8:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f2bc:	|  |      moveq #28,d0
    f2be:	|  |      add.l 20(sp),d0
    f2c2:	|  |      pea 1 <_start+0x1>
    f2c6:	|  |      pea 1 <_start+0x1>
    f2ca:	|  |      move.l d0,-(sp)
    f2cc:	|  |      jsr 118f0 <setVariable>
    f2d2:	|  |      lea 12(sp),sp
    f2d6:	|  |  /-- bra.s f2f0 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f2d8:	|  \--|-> moveq #28,d0
    f2da:	|     |   add.l 20(sp),d0
    f2de:	|     |   clr.l -(sp)
    f2e0:	|     |   pea 1 <_start+0x1>
    f2e4:	|     |   move.l d0,-(sp)
    f2e6:	|     |   jsr 118f0 <setVariable>
    f2ec:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f2f0:	|     \-> moveq #2,d0
}
    f2f2:	\-------> lea 12(sp),sp
    f2f6:	          rts

0000f2f8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    f2f8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2fa:	       movea.l 12(sp),a0
    f2fe:	       move.l 24(a0),d0
    f302:	       move.l d0,-(sp)
    f304:	       pea 1 <_start+0x1>
    f308:	       move.l sp,d0
    f30a:	       addq.l #8,d0
    f30c:	       move.l d0,-(sp)
    f30e:	       jsr 10ffe <getValueType>
    f314:	       lea 12(sp),sp
    f318:	       tst.w d0
    f31a:	   /-- bne.s f320 <builtIn_transitionMode+0x28>
    f31c:	   |   moveq #1,d0
    f31e:	/--|-- bra.s f356 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    f320:	|  \-> move.l (sp),d0
    f322:	|      move.l d0,d0
    f324:	|      move.b d0,1667e <fadeMode>
	trimStack (&fun -> stack);
    f32a:	|      moveq #24,d0
    f32c:	|      add.l 12(sp),d0
    f330:	|      move.l d0,-(sp)
    f332:	|      jsr 11982 <trimStack>
    f338:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f33a:	|      moveq #28,d0
    f33c:	|      add.l 12(sp),d0
    f340:	|      pea 1 <_start+0x1>
    f344:	|      pea 1 <_start+0x1>
    f348:	|      move.l d0,-(sp)
    f34a:	|      jsr 118f0 <setVariable>
    f350:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f354:	|      moveq #2,d0
}
    f356:	\----> addq.l #4,sp
    f358:	       rts

0000f35a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f35a:	moveq #24,d0
    f35c:	add.l 8(sp),d0
    f360:	move.l d0,-(sp)
    f362:	jsr 11982 <trimStack>
    f368:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    f36a:	moveq #28,d0
    f36c:	add.l 8(sp),d0
    f370:	pea 1 <_start+0x1>
    f374:	pea 1 <_start+0x1>
    f378:	move.l d0,-(sp)
    f37a:	jsr 118f0 <setVariable>
    f380:	lea 12(sp),sp
	return BR_CONTINUE;
    f384:	moveq #2,d0
}
    f386:	rts

0000f388 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    f388:	pea 153f8 <custom.c.9a493ead+0xc48>
    f38e:	jsr 13046 <KPrintF>
    f394:	addq.l #4,sp
	return BR_CONTINUE;
    f396:	moveq #2,d0
}
    f398:	rts

0000f39a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    f39a:	       lea -16(sp),sp
    f39e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    f3a0:	       movea.l 28(sp),a0
    f3a4:	       move.l 24(a0),d0
    f3a8:	       move.l d0,-(sp)
    f3aa:	       jsr 115d4 <getTextFromAnyVar>
    f3b0:	       addq.l #4,sp
    f3b2:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    f3b6:	   /-- bne.s f3be <builtIn_saveCustomData+0x24>
    f3b8:	   |   moveq #1,d0
    f3ba:	/--|-- bra.w f470 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    f3be:	|  \-> move.l 16(sp),-(sp)
    f3c2:	|      jsr 2fe <encodeFilename>
    f3c8:	|      addq.l #4,sp
    f3ca:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    f3ce:	|      move.l 16(sp),8(sp)
    f3d4:	|      move.l 16784 <SysBase>,d0
    f3da:	|      movea.l d0,a6
    f3dc:	|      movea.l 8(sp),a1
    f3e0:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    f3e4:	|      move.l 12(sp),-(sp)
    f3e8:	|      jsr ac20 <failSecurityCheck>
    f3ee:	|      addq.l #4,sp
    f3f0:	|      tst.w d0
    f3f2:	|  /-- beq.s f3f8 <builtIn_saveCustomData+0x5e>
    f3f4:	|  |   moveq #1,d0
    f3f6:	+--|-- bra.s f470 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f3f8:	|  \-> moveq #24,d0
    f3fa:	|      add.l 28(sp),d0
    f3fe:	|      move.l d0,-(sp)
    f400:	|      jsr 11982 <trimStack>
    f406:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    f408:	|      movea.l 28(sp),a0
    f40c:	|      movea.l 24(a0),a0
    f410:	|      move.l (a0),d0
    f412:	|      moveq #6,d1
    f414:	|      cmp.l d0,d1
    f416:	|  /-- beq.s f42a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    f418:	|  |   pea 15425 <custom.c.9a493ead+0xc75>
    f41e:	|  |   jsr 13046 <KPrintF>
    f424:	|  |   addq.l #4,sp
		return BR_ERROR;
    f426:	|  |   moveq #1,d0
    f428:	+--|-- bra.s f470 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    f42a:	|  \-> movea.l 28(sp),a0
    f42e:	|      move.l 24(a0),d0
    f432:	|      move.l d0,-(sp)
    f434:	|      move.l 16(sp),-(sp)
    f438:	|      jsr a870 <stackToFile>
    f43e:	|      addq.l #8,sp
    f440:	|      tst.w d0
    f442:	|  /-- bne.s f448 <builtIn_saveCustomData+0xae>
    f444:	|  |   moveq #1,d0
    f446:	+--|-- bra.s f470 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f448:	|  \-> moveq #24,d0
    f44a:	|      add.l 28(sp),d0
    f44e:	|      move.l d0,-(sp)
    f450:	|      jsr 11982 <trimStack>
    f456:	|      addq.l #4,sp
	FreeVec(fileName);
    f458:	|      move.l 12(sp),4(sp)
    f45e:	|      move.l 16784 <SysBase>,d0
    f464:	|      movea.l d0,a6
    f466:	|      movea.l 4(sp),a1
    f46a:	|      jsr -690(a6)
	return BR_CONTINUE;
    f46e:	|      moveq #2,d0
}
    f470:	\----> movea.l (sp)+,a6
    f472:	       lea 16(sp),sp
    f476:	       rts

0000f478 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    f478:	       lea -28(sp),sp
    f47c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f47e:	       movea.l 40(sp),a0
    f482:	       move.l 24(a0),d0
    f486:	       move.l d0,-(sp)
    f488:	       jsr 115d4 <getTextFromAnyVar>
    f48e:	       addq.l #4,sp
    f490:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    f494:	   /-- bne.s f49c <builtIn_loadCustomData+0x24>
    f496:	   |   moveq #1,d0
    f498:	/--|-- bra.w f598 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    f49c:	|  \-> move.l 28(sp),-(sp)
    f4a0:	|      jsr 2fe <encodeFilename>
    f4a6:	|      addq.l #4,sp
    f4a8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    f4ac:	|      move.l 28(sp),20(sp)
    f4b2:	|      move.l 16784 <SysBase>,d0
    f4b8:	|      movea.l d0,a6
    f4ba:	|      movea.l 20(sp),a1
    f4be:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    f4c2:	|      move.l 24(sp),-(sp)
    f4c6:	|      jsr ac20 <failSecurityCheck>
    f4cc:	|      addq.l #4,sp
    f4ce:	|      tst.w d0
    f4d0:	|  /-- beq.s f4d8 <builtIn_loadCustomData+0x60>
    f4d2:	|  |   moveq #1,d0
    f4d4:	+--|-- bra.w f598 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    f4d8:	|  \-> moveq #24,d0
    f4da:	|      add.l 40(sp),d0
    f4de:	|      move.l d0,-(sp)
    f4e0:	|      jsr 11982 <trimStack>
    f4e6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    f4e8:	|      moveq #28,d0
    f4ea:	|      add.l 40(sp),d0
    f4ee:	|      move.l d0,-(sp)
    f4f0:	|      jsr 1124c <unlinkVar>
    f4f6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    f4f8:	|      movea.l 40(sp),a0
    f4fc:	|      moveq #6,d0
    f4fe:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f502:	|      moveq #12,d0
    f504:	|      move.l d0,16(sp)
    f508:	|      clr.l 12(sp)
    f50c:	|      move.l 16784 <SysBase>,d0
    f512:	|      movea.l d0,a6
    f514:	|      move.l 16(sp),d0
    f518:	|      move.l 12(sp),d1
    f51c:	|      jsr -684(a6)
    f520:	|      move.l d0,8(sp)
    f524:	|      move.l 8(sp),d0
    f528:	|      movea.l 40(sp),a0
    f52c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    f530:	|      movea.l 40(sp),a0
    f534:	|      move.l 32(a0),d0
    f538:	|  /-- bne.s f53e <builtIn_loadCustomData+0xc6>
    f53a:	|  |   moveq #1,d0
    f53c:	+--|-- bra.s f598 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    f53e:	|  \-> movea.l 40(sp),a0
    f542:	|      movea.l 32(a0),a0
    f546:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    f548:	|      movea.l 40(sp),a0
    f54c:	|      movea.l 32(a0),a0
    f550:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    f554:	|      movea.l 40(sp),a0
    f558:	|      movea.l 32(a0),a0
    f55c:	|      moveq #1,d0
    f55e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    f562:	|      movea.l 40(sp),a0
    f566:	|      move.l 32(a0),d0
    f56a:	|      move.l d0,-(sp)
    f56c:	|      move.l 28(sp),-(sp)
    f570:	|      jsr a2aa <fileToStack>
    f576:	|      addq.l #8,sp
    f578:	|      tst.w d0
    f57a:	|  /-- bne.s f580 <builtIn_loadCustomData+0x108>
    f57c:	|  |   moveq #1,d0
    f57e:	+--|-- bra.s f598 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    f580:	|  \-> move.l 24(sp),4(sp)
    f586:	|      move.l 16784 <SysBase>,d0
    f58c:	|      movea.l d0,a6
    f58e:	|      movea.l 4(sp),a1
    f592:	|      jsr -690(a6)
	return BR_CONTINUE;
    f596:	|      moveq #2,d0
}
    f598:	\----> movea.l (sp)+,a6
    f59a:	       lea 28(sp),sp
    f59e:	       rts

0000f5a0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    f5a0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f5a2:	       movea.l 12(sp),a0
    f5a6:	       move.l 24(a0),d0
    f5aa:	       move.l d0,-(sp)
    f5ac:	       pea 1 <_start+0x1>
    f5b0:	       move.l sp,d0
    f5b2:	       addq.l #8,d0
    f5b4:	       move.l d0,-(sp)
    f5b6:	       jsr 10ffe <getValueType>
    f5bc:	       lea 12(sp),sp
    f5c0:	       tst.w d0
    f5c2:	   /-- bne.s f5c8 <builtIn_setCustomEncoding+0x28>
    f5c4:	   |   moveq #1,d0
    f5c6:	/--|-- bra.s f5fe <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    f5c8:	|  \-> move.l (sp),d0
    f5ca:	|      move.l d0,d0
    f5cc:	|      move.w d0,16890 <saveEncoding>
	trimStack (&fun -> stack);
    f5d2:	|      moveq #24,d0
    f5d4:	|      add.l 12(sp),d0
    f5d8:	|      move.l d0,-(sp)
    f5da:	|      jsr 11982 <trimStack>
    f5e0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f5e2:	|      moveq #28,d0
    f5e4:	|      add.l 12(sp),d0
    f5e8:	|      pea 1 <_start+0x1>
    f5ec:	|      pea 1 <_start+0x1>
    f5f0:	|      move.l d0,-(sp)
    f5f2:	|      jsr 118f0 <setVariable>
    f5f8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f5fc:	|      moveq #2,d0
}
    f5fe:	\----> addq.l #4,sp
    f600:	       rts

0000f602 <builtIn_freeSound>:

builtIn(freeSound)
{
    f602:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f604:	       movea.l 12(sp),a0
    f608:	       move.l 24(a0),d0
    f60c:	       move.l d0,-(sp)
    f60e:	       pea 5 <_start+0x5>
    f612:	       move.l sp,d0
    f614:	       addq.l #8,d0
    f616:	       move.l d0,-(sp)
    f618:	       jsr 10ffe <getValueType>
    f61e:	       lea 12(sp),sp
    f622:	       tst.w d0
    f624:	   /-- bne.s f62a <builtIn_freeSound+0x28>
    f626:	   |   moveq #1,d0
    f628:	/--|-- bra.s f648 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    f62a:	|  \-> moveq #24,d0
    f62c:	|      add.l 12(sp),d0
    f630:	|      move.l d0,-(sp)
    f632:	|      jsr 11982 <trimStack>
    f638:	|      addq.l #4,sp
	huntKillFreeSound (v);
    f63a:	|      move.l (sp),d0
    f63c:	|      move.l d0,-(sp)
    f63e:	|      jsr 9a78 <huntKillFreeSound>
    f644:	|      addq.l #4,sp
	return BR_CONTINUE;
    f646:	|      moveq #2,d0
}
    f648:	\----> addq.l #4,sp
    f64a:	       rts

0000f64c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    f64c:	       lea -12(sp),sp
    f650:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f652:	       movea.l 24(sp),a0
    f656:	       move.l 24(a0),d0
    f65a:	       move.l d0,-(sp)
    f65c:	       pea 1 <_start+0x1>
    f660:	       moveq #16,d0
    f662:	       add.l sp,d0
    f664:	       move.l d0,-(sp)
    f666:	       jsr 10ffe <getValueType>
    f66c:	       lea 12(sp),sp
    f670:	       tst.w d0
    f672:	   /-- bne.s f67a <builtIn_parallaxAdd+0x2e>
    f674:	   |   moveq #1,d0
    f676:	/--|-- bra.w f74e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f67a:	|  \-> moveq #24,d0
    f67c:	|      add.l 24(sp),d0
    f680:	|      move.l d0,-(sp)
    f682:	|      jsr 11982 <trimStack>
    f688:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f68a:	|      movea.l 24(sp),a0
    f68e:	|      move.l 24(a0),d0
    f692:	|      move.l d0,-(sp)
    f694:	|      pea 1 <_start+0x1>
    f698:	|      moveq #20,d0
    f69a:	|      add.l sp,d0
    f69c:	|      move.l d0,-(sp)
    f69e:	|      jsr 10ffe <getValueType>
    f6a4:	|      lea 12(sp),sp
    f6a8:	|      tst.w d0
    f6aa:	|  /-- bne.s f6b2 <builtIn_parallaxAdd+0x66>
    f6ac:	|  |   moveq #1,d0
    f6ae:	+--|-- bra.w f74e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f6b2:	|  \-> moveq #24,d0
    f6b4:	|      add.l 24(sp),d0
    f6b8:	|      move.l d0,-(sp)
    f6ba:	|      jsr 11982 <trimStack>
    f6c0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f6c2:	|      movea.l 24(sp),a0
    f6c6:	|      move.l 24(a0),d0
    f6ca:	|      move.l d0,-(sp)
    f6cc:	|      pea 5 <_start+0x5>
    f6d0:	|      lea 12(sp),a0
    f6d4:	|      move.l a0,-(sp)
    f6d6:	|      jsr 10ffe <getValueType>
    f6dc:	|      lea 12(sp),sp
    f6e0:	|      tst.w d0
    f6e2:	|  /-- bne.s f6e8 <builtIn_parallaxAdd+0x9c>
    f6e4:	|  |   moveq #1,d0
    f6e6:	+--|-- bra.s f74e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f6e8:	|  \-> moveq #24,d0
    f6ea:	|      add.l 24(sp),d0
    f6ee:	|      move.l d0,-(sp)
    f6f0:	|      jsr 11982 <trimStack>
    f6f6:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    f6f8:	|      move.l 8(sp),d0
    f6fc:	|      move.l d0,d0
    f6fe:	|      moveq #0,d2
    f700:	|      move.w d0,d2
    f702:	|      move.l 12(sp),d0
    f706:	|      move.l d0,d0
    f708:	|      moveq #0,d1
    f70a:	|      move.w d0,d1
    f70c:	|      move.l 4(sp),d0
    f710:	|      move.l d0,d0
    f712:	|      move.w d0,d0
    f714:	|      andi.l #65535,d0
    f71a:	|      move.l d2,-(sp)
    f71c:	|      move.l d1,-(sp)
    f71e:	|      move.l d0,-(sp)
    f720:	|      jsr 9c94 <loadParallax>
    f726:	|      lea 12(sp),sp
    f72a:	|      tst.w d0
    f72c:	|  /-- bne.s f732 <builtIn_parallaxAdd+0xe6>
    f72e:	|  |   moveq #1,d0
    f730:	+--|-- bra.s f74e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    f732:	|  \-> moveq #28,d0
    f734:	|      add.l 24(sp),d0
    f738:	|      pea 1 <_start+0x1>
    f73c:	|      pea 1 <_start+0x1>
    f740:	|      move.l d0,-(sp)
    f742:	|      jsr 118f0 <setVariable>
    f748:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    f74c:	|      moveq #2,d0
}
    f74e:	\----> move.l (sp)+,d2
    f750:	       lea 12(sp),sp
    f754:	       rts

0000f756 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    f756:	jsr 9bcc <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    f75c:	moveq #28,d0
    f75e:	add.l 8(sp),d0
    f762:	pea 1 <_start+0x1>
    f766:	pea 1 <_start+0x1>
    f76a:	move.l d0,-(sp)
    f76c:	jsr 118f0 <setVariable>
    f772:	lea 12(sp),sp
	return BR_CONTINUE;
    f776:	moveq #2,d0
}
    f778:	rts

0000f77a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    f77a:	pea 15443 <custom.c.9a493ead+0xc93>
    f780:	jsr 13046 <KPrintF>
    f786:	addq.l #4,sp

	return BR_CONTINUE;
    f788:	moveq #2,d0
}
    f78a:	rts

0000f78c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    f78c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f78e:	             movea.l 16(sp),a0
    f792:	             movea.l 24(a0),a0
    f796:	             move.l (a0),d0
    f798:	             moveq #1,d1
    f79a:	             cmp.l d0,d1
    f79c:	      /----- beq.s f7e4 <builtIn_makeFastArray+0x58>
    f79e:	      |      moveq #6,d1
    f7a0:	      |      cmp.l d0,d1
    f7a2:	/-----|----- bne.s f822 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    f7a4:	|     |      movea.l 16(sp),a0
    f7a8:	|     |      movea.l 24(a0),a0
    f7ac:	|     |      move.l 4(a0),d1
    f7b0:	|     |      moveq #28,d0
    f7b2:	|     |      add.l 16(sp),d0
    f7b6:	|     |      move.l d1,-(sp)
    f7b8:	|     |      move.l d0,-(sp)
    f7ba:	|     |      jsr 110b0 <makeFastArrayFromStack>
    f7c0:	|     |      addq.l #8,sp
    f7c2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    f7c6:	|     |      moveq #24,d0
    f7c8:	|     |      add.l 16(sp),d0
    f7cc:	|     |      move.l d0,-(sp)
    f7ce:	|     |      jsr 11982 <trimStack>
    f7d4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    f7d6:	|     |      tst.w 6(sp)
    f7da:	|     |  /-- beq.s f7e0 <builtIn_makeFastArray+0x54>
    f7dc:	|     |  |   moveq #2,d0
    f7de:	|  /--|--|-- bra.s f834 <builtIn_makeFastArray+0xa8>
    f7e0:	|  |  |  \-> moveq #1,d0
    f7e2:	|  +--|----- bra.s f834 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    f7e4:	|  |  \----> movea.l 16(sp),a0
    f7e8:	|  |         movea.l 24(a0),a0
    f7ec:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    f7f2:	|  |         moveq #24,d0
    f7f4:	|  |         add.l 16(sp),d0
    f7f8:	|  |         move.l d0,-(sp)
    f7fa:	|  |         jsr 11982 <trimStack>
    f800:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    f802:	|  |         moveq #28,d0
    f804:	|  |         add.l 16(sp),d0
    f808:	|  |         move.l 2(sp),-(sp)
    f80c:	|  |         move.l d0,-(sp)
    f80e:	|  |         jsr 1111a <makeFastArraySize>
    f814:	|  |         addq.l #8,sp
    f816:	|  |         tst.w d0
    f818:	|  |     /-- beq.s f81e <builtIn_makeFastArray+0x92>
    f81a:	|  |     |   moveq #2,d0
    f81c:	|  +-----|-- bra.s f834 <builtIn_makeFastArray+0xa8>
    f81e:	|  |     \-> moveq #1,d0
    f820:	|  +-------- bra.s f834 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    f822:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    f824:	   |         pea 1546c <custom.c.9a493ead+0xcbc>
    f82a:	   |         jsr 13046 <KPrintF>
    f830:	   |         addq.l #4,sp
	return BR_ERROR;
    f832:	   |         moveq #1,d0
}
    f834:	   \-------> addq.l #8,sp
    f836:	             rts

0000f838 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    f838:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f83a:	          movea.l 16(sp),a0
    f83e:	          move.l 24(a0),d0
    f842:	          move.l d0,-(sp)
    f844:	          pea 7 <_start+0x7>
    f848:	          move.l sp,d0
    f84a:	          addq.l #8,d0
    f84c:	          move.l d0,-(sp)
    f84e:	          jsr 10ffe <getValueType>
    f854:	          lea 12(sp),sp
    f858:	          tst.w d0
    f85a:	      /-- bne.s f860 <builtIn_getCharacterScale+0x28>
    f85c:	      |   moveq #1,d0
    f85e:	/-----|-- bra.s f8da <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    f860:	|     \-> moveq #24,d0
    f862:	|         add.l 16(sp),d0
    f866:	|         move.l d0,-(sp)
    f868:	|         jsr 11982 <trimStack>
    f86e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f870:	|         move.l (sp),d0
    f872:	|         move.l d0,-(sp)
    f874:	|         jsr 71d8 <findPerson>
    f87a:	|         addq.l #4,sp
    f87c:	|         move.l d0,4(sp)
	if (pers) {
    f880:	|  /----- beq.s f8c0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    f882:	|  |      movea.l 4(sp),a0
    f886:	|  |      move.l 20(a0),d0
    f88a:	|  |      move.l #1120403456,-(sp)
    f890:	|  |      move.l d0,-(sp)
    f892:	|  |      jsr 133b0 <__mulsf3>
    f898:	|  |      addq.l #8,sp
    f89a:	|  |      move.l d0,-(sp)
    f89c:	|  |      jsr 13296 <__fixsfsi>
    f8a2:	|  |      addq.l #4,sp
    f8a4:	|  |      move.l d0,d1
    f8a6:	|  |      moveq #28,d0
    f8a8:	|  |      add.l 16(sp),d0
    f8ac:	|  |      move.l d1,-(sp)
    f8ae:	|  |      pea 1 <_start+0x1>
    f8b2:	|  |      move.l d0,-(sp)
    f8b4:	|  |      jsr 118f0 <setVariable>
    f8ba:	|  |      lea 12(sp),sp
    f8be:	|  |  /-- bra.s f8d8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f8c0:	|  \--|-> moveq #28,d0
    f8c2:	|     |   add.l 16(sp),d0
    f8c6:	|     |   clr.l -(sp)
    f8c8:	|     |   pea 1 <_start+0x1>
    f8cc:	|     |   move.l d0,-(sp)
    f8ce:	|     |   jsr 118f0 <setVariable>
    f8d4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f8d8:	|     \-> moveq #2,d0
}
    f8da:	\-------> addq.l #8,sp
    f8dc:	          rts

0000f8de <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f8de:	move.l 168b4 <gameSettings>,d0
    f8e4:	move.l d0,d1
    f8e6:	moveq #28,d0
    f8e8:	add.l 8(sp),d0
    f8ec:	move.l d1,-(sp)
    f8ee:	pea 1 <_start+0x1>
    f8f2:	move.l d0,-(sp)
    f8f4:	jsr 118f0 <setVariable>
    f8fa:	lea 12(sp),sp
	return BR_CONTINUE;
    f8fe:	moveq #2,d0
}
    f900:	rts

0000f902 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f902:	moveq #24,d0
    f904:	add.l 8(sp),d0
    f908:	move.l d0,-(sp)
    f90a:	jsr 11982 <trimStack>
    f910:	addq.l #4,sp
	trimStack (&fun -> stack);
    f912:	moveq #24,d0
    f914:	add.l 8(sp),d0
    f918:	move.l d0,-(sp)
    f91a:	jsr 11982 <trimStack>
    f920:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f922:	moveq #28,d0
    f924:	add.l 8(sp),d0
    f928:	clr.l -(sp)
    f92a:	pea 1 <_start+0x1>
    f92e:	move.l d0,-(sp)
    f930:	jsr 118f0 <setVariable>
    f936:	lea 12(sp),sp

	return BR_CONTINUE;
    f93a:	moveq #2,d0

}
    f93c:	rts

0000f93e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f93e:	move.l 16124 <lastFramesPerSecond>,d1
    f944:	moveq #28,d0
    f946:	add.l 8(sp),d0
    f94a:	move.l d1,-(sp)
    f94c:	pea 1 <_start+0x1>
    f950:	move.l d0,-(sp)
    f952:	jsr 118f0 <setVariable>
    f958:	lea 12(sp),sp
	return BR_CONTINUE;
    f95c:	moveq #2,d0
}
    f95e:	rts

0000f960 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f960:	moveq #2,d0
}
    f962:	rts

0000f964 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f964:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f968:	          movea.l 60(sp),a0
    f96c:	          move.l 24(a0),d0
    f970:	          move.l d0,-(sp)
    f972:	          pea 1 <_start+0x1>
    f976:	          pea 166ba <thumbHeight>
    f97c:	          jsr 10ffe <getValueType>
    f982:	          lea 12(sp),sp
    f986:	          tst.w d0
    f988:	      /-- bne.s f990 <builtIn_setThumbnailSize+0x2c>
    f98a:	      |   moveq #1,d0
    f98c:	/-----|-- bra.w fa4c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f990:	|     \-> moveq #24,d0
    f992:	|         add.l 60(sp),d0
    f996:	|         move.l d0,-(sp)
    f998:	|         jsr 11982 <trimStack>
    f99e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9a0:	|         movea.l 60(sp),a0
    f9a4:	|         move.l 24(a0),d0
    f9a8:	|         move.l d0,-(sp)
    f9aa:	|         pea 1 <_start+0x1>
    f9ae:	|         pea 166b6 <thumbWidth>
    f9b4:	|         jsr 10ffe <getValueType>
    f9ba:	|         lea 12(sp),sp
    f9be:	|         tst.w d0
    f9c0:	|     /-- bne.s f9c8 <builtIn_setThumbnailSize+0x64>
    f9c2:	|     |   moveq #1,d0
    f9c4:	+-----|-- bra.w fa4c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f9c8:	|     \-> moveq #24,d0
    f9ca:	|         add.l 60(sp),d0
    f9ce:	|         move.l d0,-(sp)
    f9d0:	|         jsr 11982 <trimStack>
    f9d6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f9d8:	|         move.l 166b6 <thumbWidth>,d0
    f9de:	|     /-- bmi.s fa0c <builtIn_setThumbnailSize+0xa8>
    f9e0:	|     |   move.l 166ba <thumbHeight>,d0
    f9e6:	|     +-- bmi.s fa0c <builtIn_setThumbnailSize+0xa8>
    f9e8:	|     |   move.l 166b6 <thumbWidth>,d0
    f9ee:	|     |   move.l d0,d1
    f9f0:	|     |   move.l 166dc <winWidth>,d0
    f9f6:	|     |   cmp.l d1,d0
    f9f8:	|     +-- bcs.s fa0c <builtIn_setThumbnailSize+0xa8>
    f9fa:	|     |   move.l 166ba <thumbHeight>,d0
    fa00:	|     |   move.l d0,d1
    fa02:	|     |   move.l 166e0 <winHeight>,d0
    fa08:	|     |   cmp.l d1,d0
    fa0a:	|  /--|-- bcc.s fa4a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    fa0c:	|  |  \-> move.l 166ba <thumbHeight>,d1
    fa12:	|  |      move.l 166b6 <thumbWidth>,d0
    fa18:	|  |      move.l d1,-(sp)
    fa1a:	|  |      move.l d0,-(sp)
    fa1c:	|  |      pea 15493 <custom.c.9a493ead+0xce3>
    fa22:	|  |      lea 14(sp),a0
    fa26:	|  |      move.l a0,-(sp)
    fa28:	|  |      jsr 10808 <sprintf>
    fa2e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    fa32:	|  |      lea 2(sp),a0
    fa36:	|  |      move.l a0,-(sp)
    fa38:	|  |      pea 1549b <custom.c.9a493ead+0xceb>
    fa3e:	|  |      jsr 13046 <KPrintF>
    fa44:	|  |      addq.l #8,sp
		return BR_ERROR;
    fa46:	|  |      moveq #1,d0
    fa48:	+--|----- bra.s fa4c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    fa4a:	|  \----> moveq #2,d0
}
    fa4c:	\-------> lea 52(sp),sp
    fa50:	          rts

0000fa52 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    fa52:	       lea -12(sp),sp
    fa56:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa58:	       movea.l 24(sp),a0
    fa5c:	       move.l 24(a0),d0
    fa60:	       move.l d0,-(sp)
    fa62:	       pea 1 <_start+0x1>
    fa66:	       lea 12(sp),a0
    fa6a:	       move.l a0,-(sp)
    fa6c:	       jsr 10ffe <getValueType>
    fa72:	       lea 12(sp),sp
    fa76:	       tst.w d0
    fa78:	   /-- bne.s fa80 <builtIn_hasFlag+0x2e>
    fa7a:	   |   moveq #1,d0
    fa7c:	/--|-- bra.w fb10 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    fa80:	|  \-> moveq #24,d0
    fa82:	|      add.l 24(sp),d0
    fa86:	|      move.l d0,-(sp)
    fa88:	|      jsr 11982 <trimStack>
    fa8e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa90:	|      movea.l 24(sp),a0
    fa94:	|      move.l 24(a0),d0
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      pea 7 <_start+0x7>
    fa9e:	|      moveq #16,d0
    faa0:	|      add.l sp,d0
    faa2:	|      move.l d0,-(sp)
    faa4:	|      jsr 10ffe <getValueType>
    faaa:	|      lea 12(sp),sp
    faae:	|      tst.w d0
    fab0:	|  /-- bne.s fab6 <builtIn_hasFlag+0x64>
    fab2:	|  |   moveq #1,d0
    fab4:	+--|-- bra.s fb10 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    fab6:	|  \-> moveq #24,d0
    fab8:	|      add.l 24(sp),d0
    fabc:	|      move.l d0,-(sp)
    fabe:	|      jsr 11982 <trimStack>
    fac4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    fac6:	|      move.l 8(sp),d0
    faca:	|      move.l d0,-(sp)
    facc:	|      jsr 9e34 <findObjectType>
    fad2:	|      addq.l #4,sp
    fad4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    fad8:	|  /-- bne.s fade <builtIn_hasFlag+0x8c>
    fada:	|  |   moveq #1,d0
    fadc:	+--|-- bra.s fb10 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    fade:	|  \-> movea.l 12(sp),a0
    fae2:	|      move.w 36(a0),d0
    fae6:	|      moveq #0,d2
    fae8:	|      move.w d0,d2
    faea:	|      move.l 4(sp),d1
    faee:	|      moveq #1,d0
    faf0:	|      lsl.l d1,d0
    faf2:	|      move.l d2,d1
    faf4:	|      and.l d0,d1
    faf6:	|      moveq #28,d0
    faf8:	|      add.l 24(sp),d0
    fafc:	|      move.l d1,-(sp)
    fafe:	|      pea 1 <_start+0x1>
    fb02:	|      move.l d0,-(sp)
    fb04:	|      jsr 118f0 <setVariable>
    fb0a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb0e:	|      moveq #2,d0
}
    fb10:	\----> move.l (sp)+,d2
    fb12:	       lea 12(sp),sp
    fb16:	       rts

0000fb18 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    fb18:	       jsr 9e22 <snapshot>
    fb1e:	       tst.w d0
    fb20:	/----- beq.s fb26 <builtIn_snapshotGrab+0xe>
    fb22:	|      moveq #2,d0
    fb24:	|  /-- bra.s fb28 <builtIn_snapshotGrab+0x10>
    fb26:	\--|-> moveq #1,d0
}
    fb28:	   \-> rts

0000fb2a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    fb2a:	jsr 9cda <nosnapshot>
	return BR_CONTINUE;
    fb30:	moveq #2,d0
}
    fb32:	rts

0000fb34 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    fb34:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    fb36:	move.w 16000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    fb3e:	movea.l 12(sp),a0
    fb42:	move.l 24(a0),d0
    fb46:	move.l d0,-(sp)
    fb48:	jsr 1153e <getBoolean>
    fb4e:	addq.l #4,sp
    fb50:	move.w d0,16000 <allowAnyFilename>
	trimStack (&fun -> stack);
    fb56:	moveq #24,d0
    fb58:	add.l 12(sp),d0
    fb5c:	move.l d0,-(sp)
    fb5e:	jsr 11982 <trimStack>
    fb64:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    fb66:	movea.w 2(sp),a0
    fb6a:	moveq #28,d0
    fb6c:	add.l 12(sp),d0
    fb70:	move.l a0,-(sp)
    fb72:	pea 1 <_start+0x1>
    fb76:	move.l d0,-(sp)
    fb78:	jsr 118f0 <setVariable>
    fb7e:	lea 12(sp),sp
	return BR_CONTINUE;
    fb82:	moveq #2,d0
}
    fb84:	addq.l #4,sp
    fb86:	rts

0000fb88 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fb88:	moveq #24,d0
    fb8a:	add.l 8(sp),d0
    fb8e:	move.l d0,-(sp)
    fb90:	jsr 11982 <trimStack>
    fb96:	addq.l #4,sp
	trimStack (&fun -> stack);
    fb98:	moveq #24,d0
    fb9a:	add.l 8(sp),d0
    fb9e:	move.l d0,-(sp)
    fba0:	jsr 11982 <trimStack>
    fba6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    fba8:	moveq #28,d0
    fbaa:	add.l 8(sp),d0
    fbae:	clr.l -(sp)
    fbb0:	pea 1 <_start+0x1>
    fbb4:	move.l d0,-(sp)
    fbb6:	jsr 118f0 <setVariable>
    fbbc:	lea 12(sp),sp

	return BR_CONTINUE;
    fbc0:	moveq #2,d0
}
    fbc2:	rts

0000fbc4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    fbc4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    fbc6:	movea.l 12(sp),a0
    fbca:	move.l 24(a0),d0
    fbce:	move.l d0,-(sp)
    fbd0:	jsr 115d4 <getTextFromAnyVar>
    fbd6:	addq.l #4,sp
    fbd8:	move.l d0,(sp)
	trimStack (&fun -> stack);
    fbda:	moveq #24,d0
    fbdc:	add.l 12(sp),d0
    fbe0:	move.l d0,-(sp)
    fbe2:	jsr 11982 <trimStack>
    fbe8:	addq.l #4,sp
	KPrintF (mess);
    fbea:	move.l (sp),-(sp)
    fbec:	jsr 13046 <KPrintF>
    fbf2:	addq.l #4,sp
	return BR_ERROR;
    fbf4:	moveq #1,d0
}
    fbf6:	addq.l #4,sp
    fbf8:	rts

0000fbfa <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fbfa:	moveq #24,d0
    fbfc:	add.l 8(sp),d0
    fc00:	move.l d0,-(sp)
    fc02:	jsr 11982 <trimStack>
    fc08:	addq.l #4,sp
	trimStack (&fun -> stack);
    fc0a:	moveq #24,d0
    fc0c:	add.l 8(sp),d0
    fc10:	move.l d0,-(sp)
    fc12:	jsr 11982 <trimStack>
    fc18:	addq.l #4,sp
	trimStack (&fun -> stack);
    fc1a:	moveq #24,d0
    fc1c:	add.l 8(sp),d0
    fc20:	move.l d0,-(sp)
    fc22:	jsr 11982 <trimStack>
    fc28:	addq.l #4,sp
	trimStack (&fun -> stack);
    fc2a:	moveq #24,d0
    fc2c:	add.l 8(sp),d0
    fc30:	move.l d0,-(sp)
    fc32:	jsr 11982 <trimStack>
    fc38:	addq.l #4,sp

	return BR_CONTINUE;
    fc3a:	moveq #2,d0
}
    fc3c:	rts

0000fc3e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fc3e:	moveq #24,d0
    fc40:	add.l 8(sp),d0
    fc44:	move.l d0,-(sp)
    fc46:	jsr 11982 <trimStack>
    fc4c:	addq.l #4,sp
	trimStack (&fun -> stack);
    fc4e:	moveq #24,d0
    fc50:	add.l 8(sp),d0
    fc54:	move.l d0,-(sp)
    fc56:	jsr 11982 <trimStack>
    fc5c:	addq.l #4,sp
	trimStack (&fun -> stack);
    fc5e:	moveq #24,d0
    fc60:	add.l 8(sp),d0
    fc64:	move.l d0,-(sp)
    fc66:	jsr 11982 <trimStack>
    fc6c:	addq.l #4,sp

	return BR_CONTINUE;
    fc6e:	moveq #2,d0

}
    fc70:	rts

0000fc72 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    fc72:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    fc74:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fc7a:	sne d0
    fc7c:	neg.b d0
    fc7e:	moveq #0,d1
    fc80:	move.b d0,d1
    fc82:	moveq #28,d0
    fc84:	add.l 12(sp),d0
    fc88:	move.l d1,-(sp)
    fc8a:	pea 1 <_start+0x1>
    fc8e:	move.l d0,-(sp)
    fc90:	jsr 118f0 <setVariable>
    fc96:	lea 12(sp),sp
	return BR_CONTINUE;
    fc9a:	moveq #2,d0
}
    fc9c:	addq.l #4,sp
    fc9e:	rts

0000fca0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    fca0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    fca2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    fca8:	pea 154b2 <custom.c.9a493ead+0xd02>
    fcae:	jsr 13046 <KPrintF>
    fcb4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fcb6:	tst.w 2(sp)
    fcba:	sne d0
    fcbc:	neg.b d0
    fcbe:	moveq #0,d1
    fcc0:	move.b d0,d1
    fcc2:	moveq #28,d0
    fcc4:	add.l 12(sp),d0
    fcc8:	move.l d1,-(sp)
    fcca:	pea 1 <_start+0x1>
    fcce:	move.l d0,-(sp)
    fcd0:	jsr 118f0 <setVariable>
    fcd6:	lea 12(sp),sp
	return BR_CONTINUE;
    fcda:	moveq #2,d0
}
    fcdc:	addq.l #4,sp
    fcde:	rts

0000fce0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    fce0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    fce4:	             move.l 104(sp),d0
    fce8:	             cmpi.l #166,d0
    fcee:	/----------- bhi.w fdd0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    fcf2:	|            move.l 104(sp),d0
    fcf6:	|            add.l d0,d0
    fcf8:	|            movea.l d0,a1
    fcfa:	|            adda.l d0,a1
    fcfc:	|            lea 16146 <paramNum>,a0
    fd02:	|            move.l (0,a1,a0.l),d0
    fd06:	|            moveq #-1,d1
    fd08:	|            cmp.l d0,d1
    fd0a:	|  /-------- beq.w fd98 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    fd0e:	|  |         move.l 104(sp),d0
    fd12:	|  |         add.l d0,d0
    fd14:	|  |         movea.l d0,a1
    fd16:	|  |         adda.l d0,a1
    fd18:	|  |         lea 16146 <paramNum>,a0
    fd1e:	|  |         move.l (0,a1,a0.l),d0
    fd22:	|  |         cmp.l 108(sp),d0
    fd26:	|  +-------- beq.s fd98 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    fd28:	|  |         move.l 104(sp),d0
    fd2c:	|  |         add.l d0,d0
    fd2e:	|  |         movea.l d0,a1
    fd30:	|  |         adda.l d0,a1
    fd32:	|  |         lea 16146 <paramNum>,a0
    fd38:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    fd3c:	|  |         moveq #1,d1
    fd3e:	|  |         cmp.l d0,d1
    fd40:	|  |  /----- bne.s fd4a <callBuiltIn+0x6a>
    fd42:	|  |  |      move.l #82464,d0
    fd48:	|  |  |  /-- bra.s fd50 <callBuiltIn+0x70>
    fd4a:	|  |  \--|-> move.l #87272,d0
    fd50:	|  |     \-> move.l 104(sp),d1
    fd54:	|  |         add.l d1,d1
    fd56:	|  |         movea.l d1,a1
    fd58:	|  |         adda.l d1,a1
    fd5a:	|  |         lea 16146 <paramNum>,a0
    fd60:	|  |         move.l (0,a1,a0.l),d1
    fd64:	|  |         move.l d0,-(sp)
    fd66:	|  |         move.l d1,-(sp)
    fd68:	|  |         pea 154ea <custom.c.9a493ead+0xd3a>
    fd6e:	|  |         lea 12(sp),a0
    fd72:	|  |         move.l a0,-(sp)
    fd74:	|  |         jsr 10808 <sprintf>
    fd7a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    fd7e:	|  |         movea.l sp,a0
    fd80:	|  |         move.l a0,-(sp)
    fd82:	|  |         jsr b8 <copyString>
    fd88:	|  |         addq.l #4,sp
    fd8a:	|  |         move.l d0,-(sp)
    fd8c:	|  |         jsr 13046 <KPrintF>
    fd92:	|  |         addq.l #4,sp
				return BR_ERROR;
    fd94:	|  |         moveq #1,d0
    fd96:	|  |     /-- bra.s fde0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    fd98:	|  \-----|-> move.l 104(sp),d0
    fd9c:	|        |   add.l d0,d0
    fd9e:	|        |   movea.l d0,a1
    fda0:	|        |   adda.l d0,a1
    fda2:	|        |   lea 163e2 <builtInFunctionArray>,a0
    fda8:	|        |   move.l (0,a1,a0.l),d0
    fdac:	+--------|-- beq.s fdd0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    fdae:	|        |   move.l 104(sp),d0
    fdb2:	|        |   add.l d0,d0
    fdb4:	|        |   movea.l d0,a1
    fdb6:	|        |   adda.l d0,a1
    fdb8:	|        |   lea 163e2 <builtInFunctionArray>,a0
    fdbe:	|        |   movea.l (0,a1,a0.l),a0
    fdc2:	|        |   move.l 112(sp),-(sp)
    fdc6:	|        |   move.l 112(sp),-(sp)
    fdca:	|        |   jsr (a0)
    fdcc:	|        |   addq.l #8,sp
    fdce:	|        +-- bra.s fde0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    fdd0:	\--------|-> pea 15515 <custom.c.9a493ead+0xd65>
    fdd6:	         |   jsr 13046 <KPrintF>
    fddc:	         |   addq.l #4,sp
	return BR_ERROR;
    fdde:	         |   moveq #1,d0
}
    fde0:	         \-> lea 100(sp),sp
    fde4:	             rts

0000fde6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    fde6:	          subq.l #8,sp
	int indexNum = -1;
    fde8:	          moveq #-1,d0
    fdea:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fdee:	          clr.l (sp)
    fdf0:	   /----- bra.s fe16 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    fdf2:	/--|----> move.l 168ac <languageTable>,d1
    fdf8:	|  |      move.l (sp),d0
    fdfa:	|  |      add.l d0,d0
    fdfc:	|  |      add.l d0,d0
    fdfe:	|  |      movea.l d1,a0
    fe00:	|  |      adda.l d0,a0
    fe02:	|  |      move.l (a0),d0
    fe04:	|  |      move.l d0,d1
    fe06:	|  |      move.l 168b4 <gameSettings>,d0
    fe0c:	|  |      cmp.l d1,d0
    fe0e:	|  |  /-- bne.s fe14 <getLanguageForFileB+0x2e>
    fe10:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fe14:	|  |  \-> addq.l #1,(sp)
    fe16:	|  \----> move.l 168b8 <gameSettings+0x4>,d0
    fe1c:	|         cmp.l (sp),d0
    fe1e:	\-------- bcc.s fdf2 <getLanguageForFileB+0xc>
	}

	return indexNum;
    fe20:	          move.l 4(sp),d0
}
    fe24:	          addq.l #8,sp
    fe26:	          rts

0000fe28 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    fe28:	          lea -20(sp),sp
    fe2c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    fe2e:	          move.l 28(sp),-(sp)
    fe32:	          jsr 104ea <strlen>
    fe38:	          addq.l #4,sp
    fe3a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    fe3e:	          moveq #4,d0
    fe40:	          cmp.l 12(sp),d0
    fe44:	      /-- bge.s fe68 <getPrefsFilename+0x40>
    fe46:	      |   move.l 12(sp),d0
    fe4a:	      |   subq.l #4,d0
    fe4c:	      |   movea.l 28(sp),a0
    fe50:	      |   adda.l d0,a0
    fe52:	      |   move.b (a0),d0
    fe54:	      |   cmpi.b #46,d0
    fe58:	      +-- bne.s fe68 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    fe5a:	      |   move.l 12(sp),d0
    fe5e:	      |   subq.l #4,d0
    fe60:	      |   movea.l 28(sp),a0
    fe64:	      |   adda.l d0,a0
    fe66:	      |   clr.b (a0)
	}

	char * f = filename;
    fe68:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    fe6e:	          clr.l 20(sp)
    fe72:	   /----- bra.s fe9a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    fe74:	/--|----> move.l 20(sp),d0
    fe78:	|  |      movea.l 28(sp),a0
    fe7c:	|  |      adda.l d0,a0
    fe7e:	|  |      move.b (a0),d0
    fe80:	|  |      cmpi.b #47,d0
    fe84:	|  |  /-- bne.s fe96 <getPrefsFilename+0x6e>
    fe86:	|  |  |   move.l 20(sp),d0
    fe8a:	|  |  |   addq.l #1,d0
    fe8c:	|  |  |   move.l 28(sp),d1
    fe90:	|  |  |   add.l d0,d1
    fe92:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    fe96:	|  |  \-> addq.l #1,20(sp)
    fe9a:	|  \----> move.l 20(sp),d0
    fe9e:	|         cmp.l 12(sp),d0
    fea2:	\-------- blt.s fe74 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    fea4:	          pea 15540 <custom.c.9a493ead+0xd90>
    feaa:	          move.l 20(sp),-(sp)
    feae:	          jsr 1052a <joinStrings>
    feb4:	          addq.l #8,sp
    feb6:	          move.l d0,8(sp)

	FreeVec(filename);
    feba:	          move.l 28(sp),4(sp)
    fec0:	          move.l 16784 <SysBase>,d0
    fec6:	          movea.l d0,a6
    fec8:	          movea.l 4(sp),a1
    fecc:	          jsr -690(a6)
	filename = NULL;
    fed0:	          clr.l 28(sp)
	return joined;
    fed4:	          move.l 8(sp),d0
}
    fed8:	          movea.l (sp)+,a6
    feda:	          lea 20(sp),sp
    fede:	          rts

0000fee0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    fee0:	             lea -28(sp),sp
    fee4:	             move.l a6,-(sp)
    fee6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fee8:	             move.l 168b8 <gameSettings+0x4>,d0
    feee:	             move.l d0,d1
    fef0:	             addq.l #1,d1
    fef2:	             move.l d1,28(sp)
    fef6:	             clr.l 24(sp)
    fefa:	             move.l 16784 <SysBase>,d0
    ff00:	             movea.l d0,a6
    ff02:	             move.l 28(sp),d0
    ff06:	             move.l 24(sp),d1
    ff0a:	             jsr -684(a6)
    ff0e:	             move.l d0,20(sp)
    ff12:	             move.l 20(sp),d0
    ff16:	             move.l d0,168ac <languageTable>
    if( languageTable == 0) {
    ff1c:	             move.l 168ac <languageTable>,d0
    ff22:	         /-- bne.s ff32 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    ff24:	         |   pea 15545 <custom.c.9a493ead+0xd95>
    ff2a:	         |   jsr 13046 <KPrintF>
    ff30:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ff32:	         \-> move.l 168b8 <gameSettings+0x4>,d0
    ff38:	             move.l d0,d1
    ff3a:	             addq.l #1,d1
    ff3c:	             move.l d1,16(sp)
    ff40:	             clr.l 12(sp)
    ff44:	             move.l 16784 <SysBase>,d0
    ff4a:	             movea.l d0,a6
    ff4c:	             move.l 16(sp),d0
    ff50:	             move.l 12(sp),d1
    ff54:	             jsr -684(a6)
    ff58:	             move.l d0,8(sp)
    ff5c:	             move.l 8(sp),d0
    ff60:	             move.l d0,168b0 <languageName>
	if( languageName == 0) {
    ff66:	             move.l 168b0 <languageName>,d0
    ff6c:	         /-- bne.s ff7c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    ff6e:	         |   pea 1557b <custom.c.9a493ead+0xdcb>
    ff74:	         |   jsr 13046 <KPrintF>
    ff7a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ff7c:	         \-> clr.l 32(sp)
    ff80:	   /-------- bra.s fff8 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    ff82:	/--|-------> tst.l 32(sp)
    ff86:	|  |  /----- beq.s ff96 <makeLanguageTable+0xb6>
    ff88:	|  |  |      move.l 40(sp),-(sp)
    ff8c:	|  |  |      jsr 6bc <get2bytes>
    ff92:	|  |  |      addq.l #4,sp
    ff94:	|  |  |  /-- bra.s ff98 <makeLanguageTable+0xb8>
    ff96:	|  |  \--|-> moveq #0,d0
    ff98:	|  |     \-> movea.l 168ac <languageTable>,a0
    ff9e:	|  |         move.l 32(sp),d1
    ffa2:	|  |         add.l d1,d1
    ffa4:	|  |         add.l d1,d1
    ffa6:	|  |         adda.l d1,a0
    ffa8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    ffaa:	|  |         move.l 168b0 <languageName>,d1
    ffb0:	|  |         move.l 32(sp),d0
    ffb4:	|  |         add.l d0,d0
    ffb6:	|  |         add.l d0,d0
    ffb8:	|  |         movea.l d1,a0
    ffba:	|  |         adda.l d0,a0
    ffbc:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    ffbe:	|  |         move.l 16732 <gameVersion>,d0
    ffc4:	|  |         cmpi.l #511,d0
    ffca:	|  |     /-- ble.s fff4 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    ffcc:	|  |     |   move.l 168b8 <gameSettings+0x4>,d0
    ffd2:	|  |     +-- beq.s fff4 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    ffd4:	|  |     |   move.l 168b0 <languageName>,d1
    ffda:	|  |     |   move.l 32(sp),d0
    ffde:	|  |     |   add.l d0,d0
    ffe0:	|  |     |   add.l d0,d0
    ffe2:	|  |     |   movea.l d1,a2
    ffe4:	|  |     |   adda.l d0,a2
    ffe6:	|  |     |   move.l 40(sp),-(sp)
    ffea:	|  |     |   jsr b02 <readString>
    fff0:	|  |     |   addq.l #4,sp
    fff2:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fff4:	|  |     \-> addq.l #1,32(sp)
    fff8:	|  \-------> move.l 168b8 <gameSettings+0x4>,d0
    fffe:	|            cmp.l 32(sp),d0
   10002:	\----------- bcc.w ff82 <makeLanguageTable+0xa2>
		}
	}
}
   10006:	             nop
   10008:	             nop
   1000a:	             movea.l (sp)+,a2
   1000c:	             movea.l (sp)+,a6
   1000e:	             lea 28(sp),sp
   10012:	             rts

00010014 <readIniFile>:

void readIniFile (char * filename) {
   10014:	                      lea -564(sp),sp
   10018:	                      move.l a6,-(sp)
   1001a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1001c:	                      move.l 576(sp),-(sp)
   10020:	                      jsr b8 <copyString>
   10026:	                      addq.l #4,sp
   10028:	                      move.l d0,-(sp)
   1002a:	                      jsr fe28 <getPrefsFilename>
   10030:	                      addq.l #4,sp
   10032:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   10036:	                      move.l 562(sp),558(sp)
   1003c:	                      move.l #1005,554(sp)
   10044:	                      move.l 1678c <DOSBase>,d0
   1004a:	                      movea.l d0,a6
   1004c:	                      move.l 558(sp),d1
   10050:	                      move.l 554(sp),d2
   10054:	                      jsr -30(a6)
   10058:	                      move.l d0,550(sp)
   1005c:	                      move.l 550(sp),d0
   10060:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   10064:	                      clr.l 168b4 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1006a:	                      move.w #1,168bc <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   10072:	                      clr.l 168be <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   10078:	                      moveq #1,d0
   1007a:	                      move.l d0,168c2 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   10080:	                      clr.w 168c6 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   10086:	                      clr.w 168c8 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1008c:	                      clr.w 168ca <gameSettings+0x16>

	FreeVec(langName);
   10092:	                      move.l 562(sp),542(sp)
   10098:	                      move.l 16784 <SysBase>,d0
   1009e:	                      movea.l d0,a6
   100a0:	                      movea.l 542(sp),a1
   100a4:	                      jsr -690(a6)
	langName = NULL;
   100a8:	                      clr.l 562(sp)

	if (fp) {
   100ac:	                      tst.l 546(sp)
   100b0:	/-------------------- beq.w 1038e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   100b4:	|                     move.l sp,d0
   100b6:	|                     addi.l #265,d0
   100bc:	|                     move.l #257,d1
   100c2:	|                     move.l d1,-(sp)
   100c4:	|                     clr.l -(sp)
   100c6:	|                     move.l d0,-(sp)
   100c8:	|                     jsr 12fca <memset>
   100ce:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   100d2:	|                     move.l sp,d0
   100d4:	|                     addq.l #8,d0
   100d6:	|                     move.l #257,d1
   100dc:	|                     move.l d1,-(sp)
   100de:	|                     clr.l -(sp)
   100e0:	|                     move.l d0,-(sp)
   100e2:	|                     jsr 12fca <memset>
   100e8:	|                     lea 12(sp),sp
		unsigned char here = 0;
   100ec:	|                     clr.b 571(sp)
		char readChar = ' ';
   100f0:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   100f6:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   100fc:	|                     clr.w 566(sp)
		LONG tmp = 0;
   10100:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   10104:	|  /----------------> move.l 546(sp),534(sp)
   1010a:	|  |                  move.l 1678c <DOSBase>,d0
   10110:	|  |                  movea.l d0,a6
   10112:	|  |                  move.l 534(sp),d1
   10116:	|  |                  jsr -306(a6)
   1011a:	|  |                  move.l d0,530(sp)
   1011e:	|  |                  move.l 530(sp),d0
   10122:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   10126:	|  |                  moveq #-1,d1
   10128:	|  |                  cmp.l 538(sp),d1
   1012c:	|  |           /----- bne.s 1013a <readIniFile+0x126>
				readChar = '\n';
   1012e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   10134:	|  |           |      clr.w 568(sp)
   10138:	|  |           |  /-- bra.s 10140 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1013a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   10140:	|  |              \-> move.b 570(sp),d0
   10144:	|  |                  ext.w d0
   10146:	|  |                  movea.w d0,a0
   10148:	|  |                  moveq #61,d0
   1014a:	|  |                  cmp.l a0,d0
   1014c:	|  |     /----------- beq.w 102f6 <readIniFile+0x2e2>
   10150:	|  |     |            moveq #61,d1
   10152:	|  |     |            cmp.l a0,d1
   10154:	|  |  /--|----------- blt.w 10302 <readIniFile+0x2ee>
   10158:	|  |  |  |            moveq #10,d0
   1015a:	|  |  |  |            cmp.l a0,d0
   1015c:	|  |  |  |        /-- beq.s 10166 <readIniFile+0x152>
   1015e:	|  |  |  |        |   moveq #13,d1
   10160:	|  |  |  |        |   cmp.l a0,d1
   10162:	|  |  +--|--------|-- bne.w 10302 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10166:	|  |  |  |        \-> tst.w 566(sp)
   1016a:	|  |  |  |     /----- beq.w 102e4 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1016e:	|  |  |  |     |      pea 155af <custom.c.9a493ead+0xdff>
   10174:	|  |  |  |     |      move.l sp,d0
   10176:	|  |  |  |     |      addi.l #269,d0
   1017c:	|  |  |  |     |      move.l d0,-(sp)
   1017e:	|  |  |  |     |      jsr 104aa <strcmp>
   10184:	|  |  |  |     |      addq.l #8,sp
   10186:	|  |  |  |     |      tst.l d0
   10188:	|  |  |  |     |  /-- bne.s 101a2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1018a:	|  |  |  |     |  |   move.l sp,d0
   1018c:	|  |  |  |     |  |   addq.l #8,d0
   1018e:	|  |  |  |     |  |   move.l d0,-(sp)
   10190:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   10196:	|  |  |  |     |  |   addq.l #4,sp
   10198:	|  |  |  |     |  |   move.l d0,168b4 <gameSettings>
   1019e:	|  |  |  |     +--|-- bra.w 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   101a2:	|  |  |  |     |  \-> pea 155b8 <custom.c.9a493ead+0xe08>
   101a8:	|  |  |  |     |      move.l sp,d0
   101aa:	|  |  |  |     |      addi.l #269,d0
   101b0:	|  |  |  |     |      move.l d0,-(sp)
   101b2:	|  |  |  |     |      jsr 104aa <strcmp>
   101b8:	|  |  |  |     |      addq.l #8,sp
   101ba:	|  |  |  |     |      tst.l d0
   101bc:	|  |  |  |     |  /-- bne.s 101e2 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   101be:	|  |  |  |     |  |   move.l sp,d0
   101c0:	|  |  |  |     |  |   addq.l #8,d0
   101c2:	|  |  |  |     |  |   move.l d0,-(sp)
   101c4:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   101ca:	|  |  |  |     |  |   addq.l #4,sp
   101cc:	|  |  |  |     |  |   tst.l d0
   101ce:	|  |  |  |     |  |   seq d0
   101d0:	|  |  |  |     |  |   neg.b d0
   101d2:	|  |  |  |     |  |   move.b d0,d0
   101d4:	|  |  |  |     |  |   andi.w #255,d0
   101d8:	|  |  |  |     |  |   move.w d0,168bc <gameSettings+0x8>
   101de:	|  |  |  |     +--|-- bra.w 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   101e2:	|  |  |  |     |  \-> pea 155bf <custom.c.9a493ead+0xe0f>
   101e8:	|  |  |  |     |      move.l sp,d0
   101ea:	|  |  |  |     |      addi.l #269,d0
   101f0:	|  |  |  |     |      move.l d0,-(sp)
   101f2:	|  |  |  |     |      jsr 104aa <strcmp>
   101f8:	|  |  |  |     |      addq.l #8,sp
   101fa:	|  |  |  |     |      tst.l d0
   101fc:	|  |  |  |     |  /-- bne.s 10216 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   101fe:	|  |  |  |     |  |   move.l sp,d0
   10200:	|  |  |  |     |  |   addq.l #8,d0
   10202:	|  |  |  |     |  |   move.l d0,-(sp)
   10204:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   1020a:	|  |  |  |     |  |   addq.l #4,sp
   1020c:	|  |  |  |     |  |   move.l d0,168be <gameSettings+0xa>
   10212:	|  |  |  |     +--|-- bra.w 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   10216:	|  |  |  |     |  \-> pea 155c7 <custom.c.9a493ead+0xe17>
   1021c:	|  |  |  |     |      move.l sp,d0
   1021e:	|  |  |  |     |      addi.l #269,d0
   10224:	|  |  |  |     |      move.l d0,-(sp)
   10226:	|  |  |  |     |      jsr 104aa <strcmp>
   1022c:	|  |  |  |     |      addq.l #8,sp
   1022e:	|  |  |  |     |      tst.l d0
   10230:	|  |  |  |     |  /-- bne.s 1024a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10232:	|  |  |  |     |  |   move.l sp,d0
   10234:	|  |  |  |     |  |   addq.l #8,d0
   10236:	|  |  |  |     |  |   move.l d0,-(sp)
   10238:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   1023e:	|  |  |  |     |  |   addq.l #4,sp
   10240:	|  |  |  |     |  |   move.l d0,168c2 <gameSettings+0xe>
   10246:	|  |  |  |     +--|-- bra.w 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1024a:	|  |  |  |     |  \-> pea 155d1 <custom.c.9a493ead+0xe21>
   10250:	|  |  |  |     |      move.l sp,d0
   10252:	|  |  |  |     |      addi.l #269,d0
   10258:	|  |  |  |     |      move.l d0,-(sp)
   1025a:	|  |  |  |     |      jsr 104aa <strcmp>
   10260:	|  |  |  |     |      addq.l #8,sp
   10262:	|  |  |  |     |      tst.l d0
   10264:	|  |  |  |     |  /-- bne.s 1027e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10266:	|  |  |  |     |  |   move.l sp,d0
   10268:	|  |  |  |     |  |   addq.l #8,d0
   1026a:	|  |  |  |     |  |   move.l d0,-(sp)
   1026c:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   10272:	|  |  |  |     |  |   addq.l #4,sp
   10274:	|  |  |  |     |  |   move.l d0,d0
   10276:	|  |  |  |     |  |   move.w d0,168c6 <gameSettings+0x12>
   1027c:	|  |  |  |     +--|-- bra.s 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1027e:	|  |  |  |     |  \-> pea 155dd <custom.c.9a493ead+0xe2d>
   10284:	|  |  |  |     |      move.l sp,d0
   10286:	|  |  |  |     |      addi.l #269,d0
   1028c:	|  |  |  |     |      move.l d0,-(sp)
   1028e:	|  |  |  |     |      jsr 104aa <strcmp>
   10294:	|  |  |  |     |      addq.l #8,sp
   10296:	|  |  |  |     |      tst.l d0
   10298:	|  |  |  |     |  /-- bne.s 102b2 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1029a:	|  |  |  |     |  |   move.l sp,d0
   1029c:	|  |  |  |     |  |   addq.l #8,d0
   1029e:	|  |  |  |     |  |   move.l d0,-(sp)
   102a0:	|  |  |  |     |  |   jsr 1039a <stringToInt>
   102a6:	|  |  |  |     |  |   addq.l #4,sp
   102a8:	|  |  |  |     |  |   move.l d0,d0
   102aa:	|  |  |  |     |  |   move.w d0,168c8 <gameSettings+0x14>
   102b0:	|  |  |  |     +--|-- bra.s 102e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   102b2:	|  |  |  |     |  \-> pea 155eb <custom.c.9a493ead+0xe3b>
   102b8:	|  |  |  |     |      move.l sp,d0
   102ba:	|  |  |  |     |      addi.l #269,d0
   102c0:	|  |  |  |     |      move.l d0,-(sp)
   102c2:	|  |  |  |     |      jsr 104aa <strcmp>
   102c8:	|  |  |  |     |      addq.l #8,sp
   102ca:	|  |  |  |     |      tst.l d0
   102cc:	|  |  |  |     +----- bne.s 102e4 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   102ce:	|  |  |  |     |      move.l sp,d0
   102d0:	|  |  |  |     |      addq.l #8,d0
   102d2:	|  |  |  |     |      move.l d0,-(sp)
   102d4:	|  |  |  |     |      jsr 1039a <stringToInt>
   102da:	|  |  |  |     |      addq.l #4,sp
   102dc:	|  |  |  |     |      move.l d0,d0
   102de:	|  |  |  |     |      move.w d0,168ca <gameSettings+0x16>
					}
				}
				here = 0;
   102e4:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   102e8:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   102ec:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   102f0:	|  |  |  |            clr.b 8(sp)
				break;
   102f4:	|  |  |  |  /-------- bra.s 1036c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   102f6:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   102fc:	|  |  |     |         clr.b 571(sp)
				break;
   10300:	|  |  |     +-------- bra.s 1036c <readIniFile+0x358>

				default:
				if (doingSecond) {
   10302:	|  |  \-----|-------> tst.w 566(sp)
   10306:	|  |        |  /----- beq.s 1033a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   10308:	|  |        |  |      move.b 571(sp),d0
   1030c:	|  |        |  |      move.b d0,d1
   1030e:	|  |        |  |      addq.b #1,d1
   10310:	|  |        |  |      move.b d1,571(sp)
   10314:	|  |        |  |      move.b d0,d0
   10316:	|  |        |  |      andi.l #255,d0
   1031c:	|  |        |  |      lea 572(sp),a0
   10320:	|  |        |  |      adda.l d0,a0
   10322:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   10328:	|  |        |  |      moveq #0,d0
   1032a:	|  |        |  |      move.b 571(sp),d0
   1032e:	|  |        |  |      lea 572(sp),a0
   10332:	|  |        |  |      adda.l d0,a0
   10334:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   10338:	|  |        |  |  /-- bra.s 1036a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1033a:	|  |        |  \--|-> move.b 571(sp),d0
   1033e:	|  |        |     |   move.b d0,d1
   10340:	|  |        |     |   addq.b #1,d1
   10342:	|  |        |     |   move.b d1,571(sp)
   10346:	|  |        |     |   move.b d0,d0
   10348:	|  |        |     |   andi.l #255,d0
   1034e:	|  |        |     |   lea 572(sp),a0
   10352:	|  |        |     |   adda.l d0,a0
   10354:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1035a:	|  |        |     |   moveq #0,d0
   1035c:	|  |        |     |   move.b 571(sp),d0
   10360:	|  |        |     |   lea 572(sp),a0
   10364:	|  |        |     |   adda.l d0,a0
   10366:	|  |        |     |   clr.b -307(a0)
				break;
   1036a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1036c:	|  |        \-------> tst.w 568(sp)
   10370:	|  \----------------- bne.w 10104 <readIniFile+0xf0>

		Close(fp);
   10374:	|                     move.l 546(sp),526(sp)
   1037a:	|                     move.l 1678c <DOSBase>,d0
   10380:	|                     movea.l d0,a6
   10382:	|                     move.l 526(sp),d1
   10386:	|                     jsr -36(a6)
   1038a:	|                     move.l d0,522(sp)
	}
}
   1038e:	\-------------------> nop
   10390:	                      move.l (sp)+,d2
   10392:	                      movea.l (sp)+,a6
   10394:	                      lea 564(sp),sp
   10398:	                      rts

0001039a <stringToInt>:

unsigned int stringToInt (char * s) {
   1039a:	             subq.l #8,sp
	int i = 0;
   1039c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   103a0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   103a4:	/----------> movea.l 12(sp),a0
   103a8:	|            move.b (a0),d0
   103aa:	|            cmpi.b #47,d0
   103ae:	|        /-- ble.s 103e6 <stringToInt+0x4c>
   103b0:	|        |   movea.l 12(sp),a0
   103b4:	|        |   move.b (a0),d0
   103b6:	|        |   cmpi.b #57,d0
   103ba:	|        +-- bgt.s 103e6 <stringToInt+0x4c>
			i *= 10;
   103bc:	|        |   move.l 4(sp),d1
   103c0:	|        |   move.l d1,d0
   103c2:	|        |   add.l d0,d0
   103c4:	|        |   add.l d0,d0
   103c6:	|        |   add.l d1,d0
   103c8:	|        |   add.l d0,d0
   103ca:	|        |   move.l d0,4(sp)
			i += *s - '0';
   103ce:	|        |   movea.l 12(sp),a0
   103d2:	|        |   move.b (a0),d0
   103d4:	|        |   ext.w d0
   103d6:	|        |   movea.w d0,a0
   103d8:	|        |   moveq #-48,d0
   103da:	|        |   add.l a0,d0
   103dc:	|        |   add.l d0,4(sp)
			s ++;
   103e0:	|        |   addq.l #1,12(sp)
   103e4:	|  /-----|-- bra.s 1041e <stringToInt+0x84>
		} else if (*s == '-') {
   103e6:	|  |     \-> movea.l 12(sp),a0
   103ea:	|  |         move.b (a0),d0
   103ec:	|  |         cmpi.b #45,d0
   103f0:	|  |     /-- bne.s 1040a <stringToInt+0x70>
			negative = ! negative;
   103f2:	|  |     |   tst.w 2(sp)
   103f6:	|  |     |   seq d0
   103f8:	|  |     |   neg.b d0
   103fa:	|  |     |   move.b d0,d0
   103fc:	|  |     |   andi.w #255,d0
   10400:	|  |     |   move.w d0,2(sp)
			s++;
   10404:	|  |     |   addq.l #1,12(sp)
   10408:	+--|-----|-- bra.s 103a4 <stringToInt+0xa>
		} else {
			if (negative)
   1040a:	|  |     \-> tst.w 2(sp)
   1040e:	|  |     /-- beq.s 10418 <stringToInt+0x7e>
				return -i;
   10410:	|  |     |   move.l 4(sp),d0
   10414:	|  |     |   neg.l d0
   10416:	|  |  /--|-- bra.s 10420 <stringToInt+0x86>
			return i;
   10418:	|  |  |  \-> move.l 4(sp),d0
   1041c:	|  |  +----- bra.s 10420 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   1041e:	\--\--|----X bra.s 103a4 <stringToInt+0xa>
		}
	}
   10420:	      \----> addq.l #8,sp
   10422:	             rts

00010424 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   10424:	    lea -28(sp),sp
   10428:	    move.l a6,-(sp)
   1042a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1042c:	    pea 155f5 <custom.c.9a493ead+0xe45>
   10432:	    jsr 13046 <KPrintF>
   10438:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1043a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1043e:	    move.l 40(sp),30(sp)
   10444:	    move.l #1005,26(sp)
   1044c:	    move.l 1678c <DOSBase>,d0
   10452:	    movea.l d0,a6
   10454:	    move.l 30(sp),d1
   10458:	    move.l 26(sp),d2
   1045c:	    jsr -30(a6)
   10460:	    move.l d0,22(sp)
   10464:	    move.l 22(sp),d0
   10468:	    move.l d0,18(sp)
	if (tester) {
   1046c:	/-- beq.s 1049c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   1046e:	|   pea 1560f <custom.c.9a493ead+0xe5f>
   10474:	|   jsr 13046 <KPrintF>
   1047a:	|   addq.l #4,sp
		retval = 1;
   1047c:	|   move.b #1,35(sp)
		Close(tester);
   10482:	|   move.l 18(sp),14(sp)
   10488:	|   move.l 1678c <DOSBase>,d0
   1048e:	|   movea.l d0,a6
   10490:	|   move.l 14(sp),d1
   10494:	|   jsr -36(a6)
   10498:	|   move.l d0,10(sp)
	}
	return retval;
   1049c:	\-> move.b 35(sp),d0
   104a0:	    move.l (sp)+,d2
   104a2:	    movea.l (sp)+,a6
   104a4:	    lea 28(sp),sp
   104a8:	    rts

000104aa <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   104aa:	   /-- bra.s 104b4 <strcmp+0xa>
    {
        s1++;
   104ac:	/--|-> addq.l #1,4(sp)
        s2++;
   104b0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   104b4:	|  \-> movea.l 4(sp),a0
   104b8:	|      move.b (a0),d0
   104ba:	|  /-- beq.s 104cc <strcmp+0x22>
   104bc:	|  |   movea.l 4(sp),a0
   104c0:	|  |   move.b (a0),d1
   104c2:	|  |   movea.l 8(sp),a0
   104c6:	|  |   move.b (a0),d0
   104c8:	|  |   cmp.b d1,d0
   104ca:	\--|-- beq.s 104ac <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   104cc:	   \-> movea.l 4(sp),a0
   104d0:	       move.b (a0),d0
   104d2:	       moveq #0,d1
   104d4:	       move.b d0,d1
   104d6:	       movea.l 8(sp),a0
   104da:	       move.b (a0),d0
   104dc:	       move.b d0,d0
   104de:	       andi.l #255,d0
   104e4:	       sub.l d0,d1
   104e6:	       move.l d1,d0
}
   104e8:	       rts

000104ea <strlen>:

long unsigned int strlen (const char *s) 
{  
   104ea:	       subq.l #4,sp
	long unsigned int i = 0;
   104ec:	       clr.l (sp)
	while(s[i]) i++; 
   104ee:	   /-- bra.s 104f2 <strlen+0x8>
   104f0:	/--|-> addq.l #1,(sp)
   104f2:	|  \-> movea.l 8(sp),a0
   104f6:	|      adda.l (sp),a0
   104f8:	|      move.b (a0),d0
   104fa:	\----- bne.s 104f0 <strlen+0x6>
	return(i);
   104fc:	       move.l (sp),d0
}
   104fe:	       addq.l #4,sp
   10500:	       rts

00010502 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   10502:	    nop
   10504:	/-> move.l 8(sp),d0
   10508:	|   move.l d0,d1
   1050a:	|   addq.l #1,d1
   1050c:	|   move.l d1,8(sp)
   10510:	|   movea.l 4(sp),a0
   10514:	|   lea 1(a0),a1
   10518:	|   move.l a1,4(sp)
   1051c:	|   movea.l d0,a1
   1051e:	|   move.b (a1),d0
   10520:	|   move.b d0,(a0)
   10522:	|   move.b (a0),d0
   10524:	\-- bne.s 10504 <strcpy+0x2>
}
   10526:	    nop
   10528:	    rts

0001052a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   1052a:	    lea -20(sp),sp
   1052e:	    move.l a6,-(sp)
   10530:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   10532:	    move.l 32(sp),-(sp)
   10536:	    jsr 104ea <strlen>
   1053c:	    addq.l #4,sp
   1053e:	    move.l d0,d2
   10540:	    move.l 36(sp),-(sp)
   10544:	    jsr 104ea <strlen>
   1054a:	    addq.l #4,sp
   1054c:	    add.l d2,d0
   1054e:	    move.l d0,d1
   10550:	    addq.l #1,d1
   10552:	    move.l d1,20(sp)
   10556:	    clr.l 16(sp)
   1055a:	    move.l 16784 <SysBase>,d0
   10560:	    movea.l d0,a6
   10562:	    move.l 20(sp),d0
   10566:	    move.l 16(sp),d1
   1056a:	    jsr -684(a6)
   1056e:	    move.l d0,12(sp)
   10572:	    move.l 12(sp),d0
   10576:	    move.l d0,8(sp)
	char * t = newString;
   1057a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   10580:	    nop
   10582:	/-> move.l 32(sp),d0
   10586:	|   move.l d0,d1
   10588:	|   addq.l #1,d1
   1058a:	|   move.l d1,32(sp)
   1058e:	|   movea.l 24(sp),a0
   10592:	|   lea 1(a0),a1
   10596:	|   move.l a1,24(sp)
   1059a:	|   movea.l d0,a1
   1059c:	|   move.b (a1),d0
   1059e:	|   move.b d0,(a0)
   105a0:	|   move.b (a0),d0
   105a2:	\-- bne.s 10582 <joinStrings+0x58>
	t--;
   105a4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   105a8:	    nop
   105aa:	/-> move.l 36(sp),d0
   105ae:	|   move.l d0,d1
   105b0:	|   addq.l #1,d1
   105b2:	|   move.l d1,36(sp)
   105b6:	|   movea.l 24(sp),a0
   105ba:	|   lea 1(a0),a1
   105be:	|   move.l a1,24(sp)
   105c2:	|   movea.l d0,a1
   105c4:	|   move.b (a1),d0
   105c6:	|   move.b d0,(a0)
   105c8:	|   move.b (a0),d0
   105ca:	\-- bne.s 105aa <joinStrings+0x80>

	return newString;
   105cc:	    move.l 8(sp),d0
}
   105d0:	    move.l (sp)+,d2
   105d2:	    movea.l (sp)+,a6
   105d4:	    lea 20(sp),sp
   105d8:	    rts

000105da <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   105da:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   105de:	       moveq #10,d0
   105e0:	       cmp.l 28(sp),d0
   105e4:	   /-- bne.s 10602 <itoa+0x28>
   105e6:	   |   tst.l 20(sp)
   105ea:	   +-- bge.s 10602 <itoa+0x28>
        *str++ = '-';
   105ec:	   |   move.l 24(sp),d0
   105f0:	   |   move.l d0,d1
   105f2:	   |   addq.l #1,d1
   105f4:	   |   move.l d1,24(sp)
   105f8:	   |   movea.l d0,a0
   105fa:	   |   move.b #45,(a0)
        value *= -1;
   105fe:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   10602:	   \-> move.l 24(sp),12(sp)
   10608:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   1060e:	   /-> move.l 20(sp),d0
   10612:	   |   move.l 28(sp),-(sp)
   10616:	   |   move.l d0,-(sp)
   10618:	   |   jsr 13904 <__modsi3>
   1061e:	   |   addq.l #8,sp
   10620:	   |   movea.l d0,a1
   10622:	   |   move.l 12(sp),d0
   10626:	   |   move.l d0,d1
   10628:	   |   addq.l #1,d1
   1062a:	   |   move.l d1,12(sp)
   1062e:	   |   lea 15627 <custom.c.9a493ead+0xe77>,a0
   10634:	   |   move.b (0,a1,a0.l),d1
   10638:	   |   movea.l d0,a0
   1063a:	   |   move.b d1,(a0)
        value /= base;
   1063c:	   |   move.l 28(sp),-(sp)
   10640:	   |   move.l 24(sp),-(sp)
   10644:	   |   jsr 138d6 <__divsi3>
   1064a:	   |   addq.l #8,sp
   1064c:	   |   move.l d0,20(sp)
    } while (value);
   10650:	   \-- bne.s 1060e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   10652:	       move.l 12(sp),d0
   10656:	       move.l d0,d1
   10658:	       subq.l #1,d1
   1065a:	       move.l d1,12(sp)
   1065e:	       movea.l d0,a0
   10660:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   10662:	       move.l 4(sp),8(sp)
   10668:	   /-- bra.s 1068e <itoa+0xb4>
        char temp = *low;
   1066a:	/--|-> movea.l 8(sp),a0
   1066e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   10672:	|  |   movea.l 12(sp),a0
   10676:	|  |   move.b (a0),d0
   10678:	|  |   movea.l 8(sp),a0
   1067c:	|  |   move.b d0,(a0)
        *ptr = temp;
   1067e:	|  |   movea.l 12(sp),a0
   10682:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   10686:	|  |   addq.l #1,8(sp)
   1068a:	|  |   subq.l #1,12(sp)
   1068e:	|  \-> move.l 8(sp),d0
   10692:	|      cmp.l 12(sp),d0
   10696:	\----- bcs.s 1066a <itoa+0x90>
    }
    return rc;
   10698:	       move.l 4(sp),d0
}
   1069c:	       lea 16(sp),sp
   106a0:	       rts

000106a2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   106a2:	                            lea -40(sp),sp
   106a6:	                            move.l d2,-(sp)
    char* s = str;
   106a8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   106ae:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   106b4:	   /----------------------- bra.w 107e8 <vsprintf2+0x146>
        if (*p == '%') {
   106b8:	/--|----------------------> movea.l 36(sp),a0
   106bc:	|  |                        move.b (a0),d0
   106be:	|  |                        cmpi.b #37,d0
   106c2:	|  |  /-------------------- bne.w 107ce <vsprintf2+0x12c>
            switch (*++p) {
   106c6:	|  |  |                     addq.l #1,36(sp)
   106ca:	|  |  |                     movea.l 36(sp),a0
   106ce:	|  |  |                     move.b (a0),d0
   106d0:	|  |  |                     ext.w d0
   106d2:	|  |  |                     movea.w d0,a0
   106d4:	|  |  |                     moveq #115,d0
   106d6:	|  |  |                     cmp.l a0,d0
   106d8:	|  |  |           /-------- beq.s 10750 <vsprintf2+0xae>
   106da:	|  |  |           |         moveq #115,d1
   106dc:	|  |  |           |         cmp.l a0,d1
   106de:	|  |  |  /--------|-------- blt.w 107b6 <vsprintf2+0x114>
   106e2:	|  |  |  |        |         moveq #99,d2
   106e4:	|  |  |  |        |         cmp.l a0,d2
   106e6:	|  |  |  |  /-----|-------- beq.w 1078e <vsprintf2+0xec>
   106ea:	|  |  |  |  |     |         moveq #100,d0
   106ec:	|  |  |  |  |     |         cmp.l a0,d0
   106ee:	|  |  |  +--|-----|-------- bne.w 107b6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   106f2:	|  |  |  |  |     |         addq.l #4,56(sp)
   106f6:	|  |  |  |  |     |         movea.l 56(sp),a0
   106fa:	|  |  |  |  |     |         move.l (a0),d0
   106fc:	|  |  |  |  |     |         move.l d0,d1
   106fe:	|  |  |  |  |     |         subq.l #1,d1
   10700:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   10704:	|  |  |  |  |     |         pea a <_start+0xa>
   10708:	|  |  |  |  |     |         lea 8(sp),a0
   1070c:	|  |  |  |  |     |         move.l a0,-(sp)
   1070e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   10712:	|  |  |  |  |     |         jsr 105da <itoa>
   10718:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1071c:	|  |  |  |  |     |         lea 44(sp),a0
   10720:	|  |  |  |  |     |         lea -40(a0),a0
   10724:	|  |  |  |  |     |         move.l a0,28(sp)
   10728:	|  |  |  |  |     |     /-- bra.s 10744 <vsprintf2+0xa2>
                        *s++ = *b;
   1072a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   1072e:	|  |  |  |  |     |  |  |   move.l d0,d1
   10730:	|  |  |  |  |     |  |  |   addq.l #1,d1
   10732:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   10736:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1073a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1073c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1073e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   10740:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   10744:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   10748:	|  |  |  |  |     |  |      move.b (a0),d0
   1074a:	|  |  |  |  |     |  \----- bne.s 1072a <vsprintf2+0x88>
                    }
                    break;
   1074c:	|  |  |  |  |  /--|-------- bra.w 107e4 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   10750:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   10754:	|  |  |  |  |  |            movea.l 56(sp),a0
   10758:	|  |  |  |  |  |            move.l (a0),d0
   1075a:	|  |  |  |  |  |            move.l d0,d1
   1075c:	|  |  |  |  |  |            subq.l #1,d1
   1075e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   10762:	|  |  |  |  |  |        /-- bra.s 10784 <vsprintf2+0xe2>
                        *s++ = *sval++;
   10764:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   10768:	|  |  |  |  |  |     |  |   move.l d1,d2
   1076a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1076c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   10770:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   10774:	|  |  |  |  |  |     |  |   move.l d0,d2
   10776:	|  |  |  |  |  |     |  |   addq.l #1,d2
   10778:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1077c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1077e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   10780:	|  |  |  |  |  |     |  |   movea.l d0,a0
   10782:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   10784:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   10788:	|  |  |  |  |  |     |      move.b (a0),d0
   1078a:	|  |  |  |  |  |     \----- bne.s 10764 <vsprintf2+0xc2>
                    }
                    break;
   1078c:	|  |  |  |  |  +----------- bra.s 107e4 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1078e:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   10792:	|  |  |  |     |            movea.l 56(sp),a0
   10796:	|  |  |  |     |            move.l (a0),d0
   10798:	|  |  |  |     |            move.l d0,d1
   1079a:	|  |  |  |     |            subq.l #1,d1
   1079c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   107a0:	|  |  |  |     |            move.l 40(sp),d0
   107a4:	|  |  |  |     |            move.l d0,d2
   107a6:	|  |  |  |     |            addq.l #1,d2
   107a8:	|  |  |  |     |            move.l d2,40(sp)
   107ac:	|  |  |  |     |            move.l 24(sp),d1
   107b0:	|  |  |  |     |            movea.l d0,a0
   107b2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   107b4:	|  |  |  |     +----------- bra.s 107e4 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   107b6:	|  |  |  \-----|----------> move.l 40(sp),d0
   107ba:	|  |  |        |            move.l d0,d1
   107bc:	|  |  |        |            addq.l #1,d1
   107be:	|  |  |        |            move.l d1,40(sp)
   107c2:	|  |  |        |            movea.l 36(sp),a0
   107c6:	|  |  |        |            move.b (a0),d1
   107c8:	|  |  |        |            movea.l d0,a0
   107ca:	|  |  |        |            move.b d1,(a0)
                    break;
   107cc:	|  |  |        +----------- bra.s 107e4 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   107ce:	|  |  \--------|----------> move.l 40(sp),d0
   107d2:	|  |           |            move.l d0,d1
   107d4:	|  |           |            addq.l #1,d1
   107d6:	|  |           |            move.l d1,40(sp)
   107da:	|  |           |            movea.l 36(sp),a0
   107de:	|  |           |            move.b (a0),d1
   107e0:	|  |           |            movea.l d0,a0
   107e2:	|  |           |            move.b d1,(a0)
        }
        p++;
   107e4:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   107e8:	|  \----------------------> movea.l 36(sp),a0
   107ec:	|                           move.b (a0),d0
   107ee:	\-------------------------- bne.w 106b8 <vsprintf2+0x16>
    }
    *s = '\0';
   107f2:	                            movea.l 40(sp),a0
   107f6:	                            clr.b (a0)
    return s - str;
   107f8:	                            move.l 40(sp),d0
   107fc:	                            sub.l 48(sp),d0
}
   10800:	                            move.l (sp)+,d2
   10802:	                            lea 40(sp),sp
   10806:	                            rts

00010808 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   10808:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1080a:	moveq #16,d0
   1080c:	add.l sp,d0
   1080e:	move.l d0,d1
   10810:	addq.l #4,d1
   10812:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   10816:	move.l 16(sp),d0
   1081a:	move.l 4(sp),-(sp)
   1081e:	move.l d0,-(sp)
   10820:	move.l 20(sp),-(sp)
   10824:	jsr 106a2 <vsprintf2>
   1082a:	lea 12(sp),sp
   1082e:	move.l d0,(sp)
    va_end(args);
   10830:	clr.l 4(sp)

    return done;
   10834:	move.l (sp),d0
}
   10836:	addq.l #8,sp
   10838:	rts

0001083a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1083a:	       lea -20(sp),sp
   1083e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   10840:	       moveq #12,d0
   10842:	       move.l d0,20(sp)
   10846:	       clr.l 16(sp)
   1084a:	       move.l 16784 <SysBase>,d0
   10850:	       movea.l d0,a6
   10852:	       move.l 20(sp),d0
   10856:	       move.l 16(sp),d1
   1085a:	       jsr -684(a6)
   1085e:	       move.l d0,12(sp)
   10862:	       move.l 12(sp),d0
   10866:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1086a:	   /-- bne.s 10870 <addVarToStack+0x36>
   1086c:	   |   clr.w d0
   1086e:	/--|-- bra.s 108b8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   10870:	|  \-> move.l 8(sp),d0
   10874:	|      move.l d0,-(sp)
   10876:	|      move.l 32(sp),-(sp)
   1087a:	|      jsr 1139c <copyMain>
   10880:	|      addq.l #8,sp
   10882:	|      tst.w d0
   10884:	|  /-- bne.s 108a0 <addVarToStack+0x66>
        FreeVec(newStack);
   10886:	|  |   move.l 8(sp),4(sp)
   1088c:	|  |   move.l 16784 <SysBase>,d0
   10892:	|  |   movea.l d0,a6
   10894:	|  |   movea.l 4(sp),a1
   10898:	|  |   jsr -690(a6)
        return FALSE;
   1089c:	|  |   clr.w d0
   1089e:	+--|-- bra.s 108b8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   108a0:	|  \-> movea.l 32(sp),a0
   108a4:	|      move.l (a0),d0
   108a6:	|      movea.l 8(sp),a0
   108aa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   108ae:	|      movea.l 32(sp),a0
   108b2:	|      move.l 8(sp),(a0)
    return TRUE;
   108b6:	|      moveq #1,d0
}
   108b8:	\----> movea.l (sp)+,a6
   108ba:	       lea 20(sp),sp
   108be:	       rts

000108c0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   108c0:	       lea -16(sp),sp
   108c4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   108c6:	       moveq #12,d0
   108c8:	       move.l d0,16(sp)
   108cc:	       clr.l 12(sp)
   108d0:	       move.l 16784 <SysBase>,d0
   108d6:	       movea.l d0,a6
   108d8:	       move.l 16(sp),d0
   108dc:	       move.l 12(sp),d1
   108e0:	       jsr -684(a6)
   108e4:	       move.l d0,8(sp)
   108e8:	       move.l 8(sp),d0
   108ec:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   108f0:	   /-- bne.s 108f6 <addVarToStackQuick+0x36>
   108f2:	   |   clr.w d0
   108f4:	/--|-- bra.s 1092c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   108f6:	|  \-> move.l 4(sp),d0
   108fa:	|      pea 8 <_start+0x8>
   108fe:	|      move.l 28(sp),-(sp)
   10902:	|      move.l d0,-(sp)
   10904:	|      jsr 12ffa <memcpy>
   1090a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1090e:	|      movea.l 24(sp),a0
   10912:	|      clr.l (a0)

    newStack->next = *thisStack;
   10914:	|      movea.l 28(sp),a0
   10918:	|      move.l (a0),d0
   1091a:	|      movea.l 4(sp),a0
   1091e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10922:	|      movea.l 28(sp),a0
   10926:	|      move.l 4(sp),(a0)
    return TRUE;
   1092a:	|      moveq #1,d0
}
   1092c:	\----> movea.l (sp)+,a6
   1092e:	       lea 16(sp),sp
   10932:	       rts

00010934 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   10934:	       lea -16(sp),sp
   10938:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1093a:	       movea.l 24(sp),a0
   1093e:	       move.l (a0),d0
   10940:	       moveq #1,d1
   10942:	       cmp.l d0,d1
   10944:	   /-- bne.s 1096e <addVariablesInSecond+0x3a>
   10946:	   |   movea.l 28(sp),a0
   1094a:	   |   move.l (a0),d0
   1094c:	   |   moveq #1,d1
   1094e:	   |   cmp.l d0,d1
   10950:	   +-- bne.s 1096e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   10952:	   |   movea.l 28(sp),a0
   10956:	   |   move.l 4(a0),d1
   1095a:	   |   movea.l 24(sp),a0
   1095e:	   |   move.l 4(a0),d0
   10962:	   |   add.l d1,d0
   10964:	   |   movea.l 28(sp),a0
   10968:	   |   move.l d0,4(a0)
   1096c:	/--|-- bra.s 109e8 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1096e:	|  \-> move.l 24(sp),-(sp)
   10972:	|      jsr 115d4 <getTextFromAnyVar>
   10978:	|      addq.l #4,sp
   1097a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1097e:	|      move.l 28(sp),-(sp)
   10982:	|      jsr 115d4 <getTextFromAnyVar>
   10988:	|      addq.l #4,sp
   1098a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1098e:	|      move.l 28(sp),-(sp)
   10992:	|      jsr 1124c <unlinkVar>
   10998:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1099a:	|      move.l 12(sp),-(sp)
   1099e:	|      move.l 20(sp),-(sp)
   109a2:	|      jsr 1052a <joinStrings>
   109a8:	|      addq.l #8,sp
   109aa:	|      movea.l 28(sp),a0
   109ae:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   109b2:	|      movea.l 28(sp),a0
   109b6:	|      moveq #3,d0
   109b8:	|      move.l d0,(a0)
		FreeVec(string1);
   109ba:	|      move.l 16(sp),8(sp)
   109c0:	|      move.l 16784 <SysBase>,d0
   109c6:	|      movea.l d0,a6
   109c8:	|      movea.l 8(sp),a1
   109cc:	|      jsr -690(a6)
		FreeVec(string2);
   109d0:	|      move.l 12(sp),4(sp)
   109d6:	|      move.l 16784 <SysBase>,d0
   109dc:	|      movea.l d0,a6
   109de:	|      movea.l 4(sp),a1
   109e2:	|      jsr -690(a6)
	}
}
   109e6:	|      nop
   109e8:	\----> nop
   109ea:	       movea.l (sp)+,a6
   109ec:	       lea 16(sp),sp
   109f0:	       rts

000109f2 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   109f2:	movea.l 8(sp),a0
   109f6:	move.l 4(a0),-(sp)
   109fa:	move.l (a0),-(sp)
   109fc:	movea.l 12(sp),a0
   10a00:	move.l 4(a0),-(sp)
   10a04:	move.l (a0),-(sp)
   10a06:	jsr 10a28 <compareVars>
   10a0c:	lea 16(sp),sp
   10a10:	move.l d0,-(sp)
   10a12:	pea 1 <_start+0x1>
   10a16:	move.l 16(sp),-(sp)
   10a1a:	jsr 118f0 <setVariable>
   10a20:	lea 12(sp),sp
}
   10a24:	nop
   10a26:	rts

00010a28 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   10a28:	       subq.l #4,sp
	int re = 0;
   10a2a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   10a2c:	       move.l 8(sp),d1
   10a30:	       move.l 16(sp),d0
   10a34:	       cmp.l d1,d0
   10a36:	/----- bne.w 10afe <compareVars+0xd6>
		switch (var1.varType) {
   10a3a:	|      move.l 8(sp),d0
   10a3e:	|      moveq #9,d1
   10a40:	|      cmp.l d0,d1
   10a42:	|  /-- bcs.w 10ae6 <compareVars+0xbe>
   10a46:	|  |   add.l d0,d0
   10a48:	|  |   movea.l d0,a0
   10a4a:	|  |   adda.l #68182,a0
   10a50:	|  |   move.w (a0),d0
   10a52:	|  |   jmp (10a56 <compareVars+0x2e>,pc,d0.w)
   10a56:	|  |   ori.b #-112,(a4)
   10a5a:	|  |   ori.l #5243024,(a0)
   10a60:	|  |   ori.l #7733392,(a0)
   10a66:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   10a6c:	|  |   move.l d0,(sp)
			break;
   10a6e:	+--|-- bra.w 10afe <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   10a72:	|  |   move.l 12(sp),d1
   10a76:	|  |   move.l 20(sp),d0
   10a7a:	|  |   cmp.l d1,d0
   10a7c:	|  |   seq d0
   10a7e:	|  |   neg.b d0
   10a80:	|  |   move.b d0,d0
   10a82:	|  |   andi.l #255,d0
   10a88:	|  |   move.l d0,(sp)
			break;
   10a8a:	+--|-- bra.s 10afe <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   10a8c:	|  |   move.l 12(sp),d1
   10a90:	|  |   move.l 20(sp),d0
   10a94:	|  |   cmp.l d1,d0
   10a96:	|  |   seq d0
   10a98:	|  |   neg.b d0
   10a9a:	|  |   move.b d0,d0
   10a9c:	|  |   andi.l #255,d0
   10aa2:	|  |   move.l d0,(sp)
			break;
   10aa4:	+--|-- bra.s 10afe <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   10aa6:	|  |   move.l 20(sp),d1
   10aaa:	|  |   move.l 12(sp),d0
   10aae:	|  |   move.l d1,-(sp)
   10ab0:	|  |   move.l d0,-(sp)
   10ab2:	|  |   jsr 104aa <strcmp>
   10ab8:	|  |   addq.l #8,sp
   10aba:	|  |   tst.l d0
   10abc:	|  |   seq d0
   10abe:	|  |   neg.b d0
   10ac0:	|  |   move.b d0,d0
   10ac2:	|  |   andi.l #255,d0
   10ac8:	|  |   move.l d0,(sp)
			break;
   10aca:	+--|-- bra.s 10afe <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   10acc:	|  |   move.l 12(sp),d1
   10ad0:	|  |   move.l 20(sp),d0
   10ad4:	|  |   cmp.l d1,d0
   10ad6:	|  |   seq d0
   10ad8:	|  |   neg.b d0
   10ada:	|  |   move.b d0,d0
   10adc:	|  |   andi.l #255,d0
   10ae2:	|  |   move.l d0,(sp)
			break;
   10ae4:	+--|-- bra.s 10afe <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   10ae6:	|  \-> move.l 12(sp),d1
   10aea:	|      move.l 20(sp),d0
   10aee:	|      cmp.l d1,d0
   10af0:	|      seq d0
   10af2:	|      neg.b d0
   10af4:	|      move.b d0,d0
   10af6:	|      andi.l #255,d0
   10afc:	|      move.l d0,(sp)
		}
	}
	return re;
   10afe:	\----> move.l (sp),d0
}
   10b00:	       addq.l #4,sp
   10b02:	       rts

00010b04 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   10b04:	             lea -16(sp),sp
   10b08:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   10b0a:	             movea.l 28(sp),a0
   10b0e:	             moveq #6,d0
   10b10:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10b12:	             moveq #12,d0
   10b14:	             move.l d0,12(sp)
   10b18:	             clr.l 8(sp)
   10b1c:	             move.l 16784 <SysBase>,d0
   10b22:	             movea.l d0,a6
   10b24:	             move.l 12(sp),d0
   10b28:	             move.l 8(sp),d1
   10b2c:	             jsr -684(a6)
   10b30:	             move.l d0,4(sp)
   10b34:	             move.l 4(sp),d0
   10b38:	             movea.l 28(sp),a0
   10b3c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   10b40:	             movea.l 28(sp),a0
   10b44:	             move.l 4(a0),d0
   10b48:	         /-- bne.s 10b50 <copyStack+0x4c>
   10b4a:	         |   clr.w d0
   10b4c:	/--------|-- bra.w 10bd2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   10b50:	|        \-> movea.l 28(sp),a0
   10b54:	|            movea.l 4(a0),a0
   10b58:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   10b5a:	|            movea.l 28(sp),a0
   10b5e:	|            movea.l 4(a0),a0
   10b62:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   10b66:	|            movea.l 28(sp),a0
   10b6a:	|            movea.l 4(a0),a0
   10b6e:	|            moveq #1,d0
   10b70:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   10b74:	|            movea.l 24(sp),a0
   10b78:	|            movea.l 4(a0),a0
   10b7c:	|            move.l (a0),16(sp)

	while (a) {
   10b80:	|     /----- bra.s 10bca <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   10b82:	|  /--|----> movea.l 28(sp),a0
   10b86:	|  |  |      move.l 4(a0),d0
   10b8a:	|  |  |      move.l d0,d1
   10b8c:	|  |  |      move.l 16(sp),d0
   10b90:	|  |  |      move.l d1,-(sp)
   10b92:	|  |  |      move.l d0,-(sp)
   10b94:	|  |  |      jsr 1083a <addVarToStack>
   10b9a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   10b9c:	|  |  |      movea.l 28(sp),a0
   10ba0:	|  |  |      movea.l 4(a0),a0
   10ba4:	|  |  |      move.l 4(a0),d0
   10ba8:	|  |  |  /-- bne.s 10bc0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   10baa:	|  |  |  |   movea.l 28(sp),a0
   10bae:	|  |  |  |   movea.l 4(a0),a1
   10bb2:	|  |  |  |   movea.l 28(sp),a0
   10bb6:	|  |  |  |   movea.l 4(a0),a0
   10bba:	|  |  |  |   move.l (a1),d0
   10bbc:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10bc0:	|  |  |  \-> movea.l 16(sp),a0
   10bc4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   10bca:	|  |  \----> tst.l 16(sp)
   10bce:	|  \-------- bne.s 10b82 <copyStack+0x7e>
	}

	return TRUE;
   10bd0:	|            moveq #1,d0
}
   10bd2:	\----------> movea.l (sp)+,a6
   10bd4:	             lea 16(sp),sp
   10bd8:	             rts

00010bda <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   10bda:	                lea -20(sp),sp
   10bde:	                move.l a6,-(sp)
   10be0:	                move.l 36(sp),d0
   10be4:	                move.w d0,d0
   10be6:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   10bea:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   10bf0:	                clr.l 16(sp)

    while (*huntVar) {
   10bf4:	   /----------- bra.s 10c72 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   10bf6:	/--|----------> movea.l 20(sp),a0
   10bfa:	|  |            movea.l (a0),a0
   10bfc:	|  |            movea.l 28(sp),a1
   10c00:	|  |            move.l 4(a1),-(sp)
   10c04:	|  |            move.l (a1),-(sp)
   10c06:	|  |            move.l 4(a0),-(sp)
   10c0a:	|  |            move.l (a0),-(sp)
   10c0c:	|  |            jsr 10a28 <compareVars>
   10c12:	|  |            lea 16(sp),sp
   10c16:	|  |            tst.l d0
   10c18:	|  |  /-------- beq.s 10c64 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   10c1a:	|  |  |         movea.l 20(sp),a0
   10c1e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   10c22:	|  |  |         movea.l 12(sp),a0
   10c26:	|  |  |         move.l 8(a0),d0
   10c2a:	|  |  |         movea.l 20(sp),a0
   10c2e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   10c30:	|  |  |         move.l 12(sp),d0
   10c34:	|  |  |         move.l d0,-(sp)
   10c36:	|  |  |         jsr 1124c <unlinkVar>
   10c3c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   10c3e:	|  |  |         move.l 12(sp),8(sp)
   10c44:	|  |  |         move.l 16784 <SysBase>,d0
   10c4a:	|  |  |         movea.l d0,a6
   10c4c:	|  |  |         movea.l 8(sp),a1
   10c50:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   10c54:	|  |  |         tst.w 6(sp)
   10c58:	|  |  |     /-- bne.s 10c5e <deleteVarFromStack+0x84>
   10c5a:	|  |  |     |   moveq #1,d0
   10c5c:	|  |  |  /--|-- bra.s 10c80 <deleteVarFromStack+0xa6>
            reply++;
   10c5e:	|  |  |  |  \-> addq.l #1,16(sp)
   10c62:	|  +--|--|----- bra.s 10c72 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   10c64:	|  |  \--|----> movea.l 20(sp),a0
   10c68:	|  |     |      move.l (a0),d0
   10c6a:	|  |     |      move.l d0,d1
   10c6c:	|  |     |      addq.l #8,d1
   10c6e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   10c72:	|  \-----|----> movea.l 20(sp),a0
   10c76:	|        |      move.l (a0),d0
   10c78:	\--------|----- bne.w 10bf6 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   10c7c:	         |      move.l 16(sp),d0
}
   10c80:	         \----> movea.l (sp)+,a6
   10c82:	                lea 20(sp),sp
   10c86:	                rts

00010c88 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   10c88:	       movea.l 4(sp),a0
   10c8c:	       move.l 4(a0),d0
   10c90:	       cmp.l 8(sp),d0
   10c94:	   /-- bhi.s 10c9a <fastArrayGetByIndex+0x12>
   10c96:	   |   moveq #0,d0
   10c98:	/--|-- bra.s 10ca8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   10c9a:	|  \-> movea.l 4(sp),a0
   10c9e:	|      move.l (a0),d1
   10ca0:	|      move.l 8(sp),d0
   10ca4:	|      lsl.l #3,d0
   10ca6:	|      add.l d1,d0
}
   10ca8:	\----> rts

00010caa <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   10caa:	                lea -32(sp),sp
   10cae:	                move.l a6,-(sp)
   10cb0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10cb2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10cb6:	                movea.l 44(sp),a0
   10cba:	                move.l (a0),d0
   10cbc:	                moveq #8,d1
   10cbe:	                cmp.l d0,d1
   10cc0:	            /-- beq.s 10cce <getCostumeFromVar+0x24>
   10cc2:	            |   moveq #9,d1
   10cc4:	            |   cmp.l d0,d1
   10cc6:	   /--------|-- beq.w 10d7c <getCostumeFromVar+0xd2>
   10cca:	/--|--------|-- bra.w 10d86 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10cce:	|  |        \-> moveq #8,d0
   10cd0:	|  |            move.l d0,28(sp)
   10cd4:	|  |            clr.l 24(sp)
   10cd8:	|  |            move.l 16784 <SysBase>,d0
   10cde:	|  |            movea.l d0,a6
   10ce0:	|  |            move.l 28(sp),d0
   10ce4:	|  |            move.l 24(sp),d1
   10ce8:	|  |            jsr -684(a6)
   10cec:	|  |            move.l d0,20(sp)
   10cf0:	|  |            move.l 20(sp),d0
   10cf4:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   10cf8:	|  |        /-- bne.s 10d00 <getCostumeFromVar+0x56>
   10cfa:	|  |        |   moveq #0,d0
   10cfc:	|  |  /-----|-- bra.w 10db0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   10d00:	|  |  |     \-> movea.l 36(sp),a0
   10d04:	|  |  |         moveq #1,d1
   10d06:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   10d0a:	|  |  |         moveq #12,d0
   10d0c:	|  |  |         move.l d0,16(sp)
   10d10:	|  |  |         clr.l 12(sp)
   10d14:	|  |  |         move.l 16784 <SysBase>,d0
   10d1a:	|  |  |         movea.l d0,a6
   10d1c:	|  |  |         move.l 16(sp),d0
   10d20:	|  |  |         move.l 12(sp),d1
   10d24:	|  |  |         jsr -684(a6)
   10d28:	|  |  |         move.l d0,8(sp)
   10d2c:	|  |  |         move.l 8(sp),d0
   10d30:	|  |  |         movea.l 36(sp),a0
   10d34:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   10d36:	|  |  |         movea.l 36(sp),a0
   10d3a:	|  |  |         move.l (a0),d0
   10d3c:	|  |  |     /-- bne.s 10d42 <getCostumeFromVar+0x98>
   10d3e:	|  |  |     |   moveq #0,d0
   10d40:	|  |  +-----|-- bra.s 10db0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   10d42:	|  |  |     \-> clr.l 32(sp)
   10d46:	|  |  |     /-- bra.s 10d72 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   10d48:	|  |  |  /--|-> movea.l 44(sp),a0
   10d4c:	|  |  |  |  |   move.l 4(a0),d0
   10d50:	|  |  |  |  |   movea.l 36(sp),a0
   10d54:	|  |  |  |  |   movea.l (a0),a0
   10d56:	|  |  |  |  |   move.l 32(sp),d1
   10d5a:	|  |  |  |  |   add.l d1,d1
   10d5c:	|  |  |  |  |   add.l d1,d1
   10d5e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   10d62:	|  |  |  |  |   move.l d0,-(sp)
   10d64:	|  |  |  |  |   jsr 6712 <copyAnim>
   10d6a:	|  |  |  |  |   addq.l #4,sp
   10d6c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   10d6e:	|  |  |  |  |   addq.l #1,32(sp)
   10d72:	|  |  |  |  \-> moveq #2,d1
   10d74:	|  |  |  |      cmp.l 32(sp),d1
   10d78:	|  |  |  \----- bge.s 10d48 <getCostumeFromVar+0x9e>
            }
            break;
   10d7a:	|  |  |     /-- bra.s 10dac <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   10d7c:	|  \--|-----|-> movea.l 44(sp),a0
   10d80:	|     |     |   move.l 4(a0),d0
   10d84:	|     +-----|-- bra.s 10db0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10d86:	\-----|-----|-> movea.l 44(sp),a0
   10d8a:	      |     |   move.l (a0),d0
   10d8c:	      |     |   add.l d0,d0
   10d8e:	      |     |   movea.l d0,a1
   10d90:	      |     |   adda.l d0,a1
   10d92:	      |     |   lea 16680 <typeName>,a0
   10d98:	      |     |   move.l (0,a1,a0.l),d0
   10d9c:	      |     |   move.l d0,-(sp)
   10d9e:	      |     |   pea 15699 <custom.c.9a493ead+0xee9>
   10da4:	      |     |   jsr 13046 <KPrintF>
   10daa:	      |     |   addq.l #8,sp
    }

    return p;
   10dac:	      |     \-> move.l 36(sp),d0
}
   10db0:	      \-------> movea.l (sp)+,a2
   10db2:	                movea.l (sp)+,a6
   10db4:	                lea 32(sp),sp
   10db8:	                rts

00010dba <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   10dba:	                lea -96(sp),sp
   10dbe:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10dc2:	                move.l 116(sp),-(sp)
   10dc6:	                pea 156d1 <custom.c.9a493ead+0xf21>
   10dcc:	                jsr 1052a <joinStrings>
   10dd2:	                addq.l #8,sp
   10dd4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   10dd8:	            /-- bne.s 10de0 <getSavedGamesStack+0x26>
   10dda:	            |   clr.w d0
   10ddc:	/-----------|-- bra.w 10ff4 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10de0:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10de4:	|               move.l #87763,98(sp)
   10dec:	|               moveq #-2,d0
   10dee:	|               move.l d0,94(sp)
   10df2:	|               move.l 1678c <DOSBase>,d0
   10df8:	|               movea.l d0,a6
   10dfa:	|               move.l 98(sp),d1
   10dfe:	|               move.l 94(sp),d2
   10e02:	|               jsr -84(a6)
   10e06:	|               move.l d0,90(sp)
   10e0a:	|               move.l 90(sp),d0
   10e0e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   10e12:	|           /-- bne.s 10e1a <getSavedGamesStack+0x60>
   10e14:	|           |   clr.w d0
   10e16:	+-----------|-- bra.w 10ff4 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   10e1a:	|           \-> move.l #260,82(sp)
   10e22:	|               move.l #65536,78(sp)
   10e2a:	|               move.l 16784 <SysBase>,d0
   10e30:	|               movea.l d0,a6
   10e32:	|               move.l 82(sp),d0
   10e36:	|               move.l 78(sp),d1
   10e3a:	|               jsr -684(a6)
   10e3e:	|               move.l d0,74(sp)
   10e42:	|               move.l 74(sp),d0
   10e46:	|               move.l d0,70(sp)
	if (!fib) {
   10e4a:	|           /-- bne.s 10e68 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   10e4c:	|           |   move.l 86(sp),22(sp)
   10e52:	|           |   move.l 1678c <DOSBase>,d0
   10e58:	|           |   movea.l d0,a6
   10e5a:	|           |   move.l 22(sp),d1
   10e5e:	|           |   jsr -90(a6)
		return FALSE;
   10e62:	|           |   clr.w d0
   10e64:	+-----------|-- bra.w 10ff4 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   10e68:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   10e6c:	|               move.l 86(sp),66(sp)
   10e72:	|               move.l 70(sp),62(sp)
   10e78:	|               move.l 1678c <DOSBase>,d0
   10e7e:	|               movea.l d0,a6
   10e80:	|               move.l 66(sp),d1
   10e84:	|               move.l 62(sp),d2
   10e88:	|               jsr -102(a6)
   10e8c:	|               move.l d0,58(sp)
   10e90:	|               move.l 58(sp),d0
   10e94:	|  /----------- beq.w 10fa8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   10e98:	|  |        /-- bra.w 10f74 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   10e9c:	|  |  /-----|-> move.l 70(sp),d2
   10ea0:	|  |  |     |   addq.l #8,d2
   10ea2:	|  |  |     |   move.l 70(sp),d0
   10ea6:	|  |  |     |   addq.l #8,d0
   10ea8:	|  |  |     |   move.l d0,-(sp)
   10eaa:	|  |  |     |   jsr 104ea <strlen>
   10eb0:	|  |  |     |   addq.l #4,sp
   10eb2:	|  |  |     |   move.l d0,d3
   10eb4:	|  |  |     |   move.l 116(sp),-(sp)
   10eb8:	|  |  |     |   jsr 104ea <strlen>
   10ebe:	|  |  |     |   addq.l #4,sp
   10ec0:	|  |  |     |   move.l d3,d1
   10ec2:	|  |  |     |   sub.l d0,d1
   10ec4:	|  |  |     |   move.l d2,d0
   10ec6:	|  |  |     |   add.l d1,d0
   10ec8:	|  |  |     |   move.l 116(sp),-(sp)
   10ecc:	|  |  |     |   move.l d0,-(sp)
   10ece:	|  |  |     |   jsr 104aa <strcmp>
   10ed4:	|  |  |     |   addq.l #8,sp
   10ed6:	|  |  |     |   tst.l d0
   10ed8:	|  |  |     +-- bne.w 10f74 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   10edc:	|  |  |     |   move.l 70(sp),d0
   10ee0:	|  |  |     |   addq.l #8,d0
   10ee2:	|  |  |     |   move.l d0,-(sp)
   10ee4:	|  |  |     |   jsr 104ea <strlen>
   10eea:	|  |  |     |   addq.l #4,sp
   10eec:	|  |  |     |   move.l d0,d2
   10eee:	|  |  |     |   move.l 116(sp),-(sp)
   10ef2:	|  |  |     |   jsr 104ea <strlen>
   10ef8:	|  |  |     |   addq.l #4,sp
   10efa:	|  |  |     |   move.l d0,d1
   10efc:	|  |  |     |   move.l d2,d0
   10efe:	|  |  |     |   sub.l d1,d0
   10f00:	|  |  |     |   movea.l 70(sp),a0
   10f04:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   10f08:	|  |  |     |   move.l 70(sp),d0
   10f0c:	|  |  |     |   addq.l #8,d0
   10f0e:	|  |  |     |   move.l d0,-(sp)
   10f10:	|  |  |     |   jsr 118 <decodeFilename>
   10f16:	|  |  |     |   addq.l #4,sp
   10f18:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   10f1c:	|  |  |     |   move.l 42(sp),-(sp)
   10f20:	|  |  |     |   lea 18(sp),a0
   10f24:	|  |  |     |   move.l a0,-(sp)
   10f26:	|  |  |     |   jsr 11220 <makeTextVar>
   10f2c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   10f2e:	|  |  |     |   move.l 42(sp),38(sp)
   10f34:	|  |  |     |   move.l 16784 <SysBase>,d0
   10f3a:	|  |  |     |   movea.l d0,a6
   10f3c:	|  |  |     |   movea.l 38(sp),a1
   10f40:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10f44:	|  |  |     |   move.l 112(sp),d0
   10f48:	|  |  |     |   move.l d0,-(sp)
   10f4a:	|  |  |     |   lea 18(sp),a0
   10f4e:	|  |  |     |   move.l a0,-(sp)
   10f50:	|  |  |     |   jsr 1083a <addVarToStack>
   10f56:	|  |  |     |   addq.l #8,sp
   10f58:	|  |  |     |   tst.w d0
   10f5a:	|  |  |  /--|-- beq.s 10fac <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   10f5c:	|  |  |  |  |   movea.l 112(sp),a0
   10f60:	|  |  |  |  |   move.l 4(a0),d0
   10f64:	|  |  |  |  +-- bne.s 10f74 <getSavedGamesStack+0x1ba>
   10f66:	|  |  |  |  |   movea.l 112(sp),a0
   10f6a:	|  |  |  |  |   move.l (a0),d0
   10f6c:	|  |  |  |  |   movea.l 112(sp),a0
   10f70:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10f74:	|  |  |  |  \-> move.l 86(sp),54(sp)
   10f7a:	|  |  |  |      move.l 70(sp),50(sp)
   10f80:	|  |  |  |      move.l 1678c <DOSBase>,d0
   10f86:	|  |  |  |      movea.l d0,a6
   10f88:	|  |  |  |      move.l 54(sp),d1
   10f8c:	|  |  |  |      move.l 50(sp),d2
   10f90:	|  |  |  |      jsr -108(a6)
   10f94:	|  |  |  |      move.l d0,46(sp)
   10f98:	|  |  |  |      move.l 46(sp),d0
   10f9c:	|  |  \--|----- bne.w 10e9c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   10fa0:	|  |     |      move.w #1,106(sp)
   10fa6:	|  |     |  /-- bra.s 10fae <getSavedGamesStack+0x1f4>
	}

cleanup:
   10fa8:	|  \-----|--|-> nop
   10faa:	|        |  +-- bra.s 10fae <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10fac:	|        \--|-> nop
	FreeVec(fib);
   10fae:	|           \-> move.l 70(sp),34(sp)
   10fb4:	|               move.l 16784 <SysBase>,d0
   10fba:	|               movea.l d0,a6
   10fbc:	|               movea.l 34(sp),a1
   10fc0:	|               jsr -690(a6)
	UnLock(dirLock);
   10fc4:	|               move.l 86(sp),30(sp)
   10fca:	|               move.l 1678c <DOSBase>,d0
   10fd0:	|               movea.l d0,a6
   10fd2:	|               move.l 30(sp),d1
   10fd6:	|               jsr -90(a6)
	FreeVec(pattern);
   10fda:	|               move.l 102(sp),26(sp)
   10fe0:	|               move.l 16784 <SysBase>,d0
   10fe6:	|               movea.l d0,a6
   10fe8:	|               movea.l 26(sp),a1
   10fec:	|               jsr -690(a6)
	return result;
   10ff0:	|               move.w 106(sp),d0
}
   10ff4:	\-------------> movem.l (sp)+,d2-d3/a6
   10ff8:	                lea 96(sp),sp
   10ffc:	                rts

00010ffe <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10ffe:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   11000:	       movea.l 20(sp),a0
   11004:	       move.l (a0),d0
   11006:	       cmp.l 16(sp),d0
   1100a:	/----- beq.s 1106e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1100c:	|      move.l 16(sp),d0
   11010:	|      add.l d0,d0
   11012:	|      movea.l d0,a1
   11014:	|      adda.l d0,a1
   11016:	|      lea 16680 <typeName>,a0
   1101c:	|      move.l (0,a1,a0.l),d0
   11020:	|      move.l d0,-(sp)
   11022:	|      pea 156d5 <custom.c.9a493ead+0xf25>
   11028:	|      jsr 1052a <joinStrings>
   1102e:	|      addq.l #8,sp
   11030:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   11034:	|      movea.l 20(sp),a0
   11038:	|      move.l (a0),d0
   1103a:	|      add.l d0,d0
   1103c:	|      movea.l d0,a1
   1103e:	|      adda.l d0,a1
   11040:	|      lea 16680 <typeName>,a0
   11046:	|      move.l (0,a1,a0.l),d0
   1104a:	|      move.l d0,-(sp)
   1104c:	|      pea 15717 <custom.c.9a493ead+0xf67>
   11052:	|      jsr 1052a <joinStrings>
   11058:	|      addq.l #8,sp
   1105a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1105c:	|      move.l (sp),-(sp)
   1105e:	|      move.l 8(sp),-(sp)
   11062:	|      jsr 13046 <KPrintF>
   11068:	|      addq.l #8,sp

		return FALSE;
   1106a:	|      clr.w d0
   1106c:	|  /-- bra.s 1107e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1106e:	\--|-> movea.l 20(sp),a0
   11072:	   |   move.l 4(a0),d0
   11076:	   |   movea.l 12(sp),a0
   1107a:	   |   move.l d0,(a0)
	return TRUE;
   1107c:	   |   moveq #1,d0
}
   1107e:	   \-> addq.l #8,sp
   11080:	       rts

00011082 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   11082:	move.l 8(sp),-(sp)
   11086:	jsr 43ea <getNumberedString>
   1108c:	addq.l #4,sp
   1108e:	move.l d0,-(sp)
   11090:	move.l 8(sp),-(sp)
   11094:	jsr 11220 <makeTextVar>
   1109a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1109c:	movea.l 4(sp),a0
   110a0:	move.l 4(a0),d0
   110a4:	sne d0
   110a6:	neg.b d0
   110a8:	move.b d0,d0
   110aa:	andi.w #255,d0
}
   110ae:	rts

000110b0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   110b0:	          subq.l #8,sp
    int size = stackSize(stacky);
   110b2:	          move.l 16(sp),-(sp)
   110b6:	          jsr 1195e <stackSize>
   110bc:	          addq.l #4,sp
   110be:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   110c2:	          move.l 4(sp),-(sp)
   110c6:	          move.l 16(sp),-(sp)
   110ca:	          jsr 1111a <makeFastArraySize>
   110d0:	          addq.l #8,sp
   110d2:	          tst.w d0
   110d4:	      /-- bne.s 110da <makeFastArrayFromStack+0x2a>
   110d6:	      |   clr.w d0
   110d8:	/-----|-- bra.s 11116 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   110da:	|     \-> movea.l 16(sp),a0
   110de:	|         move.l (a0),(sp)
    size = 0;
   110e0:	|         clr.l 4(sp)
    while (allV) {
   110e4:	|     /-- bra.s 11110 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   110e6:	|  /--|-> movea.l 12(sp),a0
   110ea:	|  |  |   movea.l 4(a0),a0
   110ee:	|  |  |   move.l (a0),d1
   110f0:	|  |  |   move.l 4(sp),d0
   110f4:	|  |  |   lsl.l #3,d0
   110f6:	|  |  |   add.l d0,d1
   110f8:	|  |  |   move.l (sp),d0
   110fa:	|  |  |   move.l d1,-(sp)
   110fc:	|  |  |   move.l d0,-(sp)
   110fe:	|  |  |   jsr 1139c <copyMain>
   11104:	|  |  |   addq.l #8,sp
        size++;
   11106:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1110a:	|  |  |   movea.l (sp),a0
   1110c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   11110:	|  |  \-> tst.l (sp)
   11112:	|  \----- bne.s 110e6 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   11114:	|         moveq #1,d0
}
   11116:	\-------> addq.l #8,sp
   11118:	          rts

0001111a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1111a:	          lea -28(sp),sp
   1111e:	          move.l a6,-(sp)
    if (size < 0) {
   11120:	          tst.l 40(sp)
   11124:	      /-- bge.s 1113a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   11126:	      |   pea 1575c <custom.c.9a493ead+0xfac>
   1112c:	      |   jsr 13046 <KPrintF>
   11132:	      |   addq.l #4,sp
		return FALSE;
   11134:	      |   clr.w d0
   11136:	/-----|-- bra.w 11218 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1113a:	|     \-> move.l 36(sp),-(sp)
   1113e:	|         jsr 1124c <unlinkVar>
   11144:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   11146:	|         movea.l 36(sp),a0
   1114a:	|         moveq #10,d0
   1114c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1114e:	|         moveq #12,d0
   11150:	|         move.l d0,24(sp)
   11154:	|         clr.l 20(sp)
   11158:	|         move.l 16784 <SysBase>,d0
   1115e:	|         movea.l d0,a6
   11160:	|         move.l 24(sp),d0
   11164:	|         move.l 20(sp),d1
   11168:	|         jsr -684(a6)
   1116c:	|         move.l d0,16(sp)
   11170:	|         move.l 16(sp),d0
   11174:	|         movea.l 36(sp),a0
   11178:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1117c:	|         movea.l 36(sp),a0
   11180:	|         move.l 4(a0),d0
   11184:	|     /-- bne.s 1118c <makeFastArraySize+0x72>
   11186:	|     |   clr.w d0
   11188:	+-----|-- bra.w 11218 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1118c:	|     \-> move.l 40(sp),d0
   11190:	|         lsl.l #3,d0
   11192:	|         move.l d0,12(sp)
   11196:	|         clr.l 8(sp)
   1119a:	|         move.l 16784 <SysBase>,d0
   111a0:	|         movea.l d0,a6
   111a2:	|         move.l 12(sp),d0
   111a6:	|         move.l 8(sp),d1
   111aa:	|         jsr -684(a6)
   111ae:	|         move.l d0,4(sp)
   111b2:	|         move.l 4(sp),d0
   111b6:	|         movea.l 36(sp),a0
   111ba:	|         movea.l 4(a0),a0
   111be:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   111c0:	|         movea.l 36(sp),a0
   111c4:	|         movea.l 4(a0),a0
   111c8:	|         move.l (a0),d0
   111ca:	|     /-- bne.s 111d0 <makeFastArraySize+0xb6>
   111cc:	|     |   clr.w d0
   111ce:	+-----|-- bra.s 11218 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   111d0:	|     \-> clr.l 28(sp)
   111d4:	|     /-- bra.s 111f0 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   111d6:	|  /--|-> movea.l 36(sp),a0
   111da:	|  |  |   movea.l 4(a0),a0
   111de:	|  |  |   move.l (a0),d1
   111e0:	|  |  |   move.l 28(sp),d0
   111e4:	|  |  |   lsl.l #3,d0
   111e6:	|  |  |   movea.l d1,a0
   111e8:	|  |  |   adda.l d0,a0
   111ea:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   111ec:	|  |  |   addq.l #1,28(sp)
   111f0:	|  |  \-> move.l 28(sp),d0
   111f4:	|  |      cmp.l 40(sp),d0
   111f8:	|  \----- blt.s 111d6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   111fa:	|         movea.l 36(sp),a0
   111fe:	|         movea.l 4(a0),a0
   11202:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   11208:	|         movea.l 36(sp),a0
   1120c:	|         movea.l 4(a0),a0
   11210:	|         moveq #1,d0
   11212:	|         move.l d0,8(a0)
    return TRUE;
   11216:	|         moveq #1,d0
}
   11218:	\-------> movea.l (sp)+,a6
   1121a:	          lea 28(sp),sp
   1121e:	          rts

00011220 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   11220:	move.l 4(sp),-(sp)
   11224:	jsr 1124c <unlinkVar>
   1122a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1122c:	movea.l 4(sp),a0
   11230:	moveq #3,d0
   11232:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   11234:	move.l 8(sp),-(sp)
   11238:	jsr b8 <copyString>
   1123e:	addq.l #4,sp
   11240:	movea.l 4(sp),a0
   11244:	move.l d0,4(a0)
}
   11248:	nop
   1124a:	rts

0001124c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1124c:	                      lea -16(sp),sp
   11250:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11252:	                      movea.l 24(sp),a0
   11256:	                      move.l (a0),d0
   11258:	                      moveq #10,d1
   1125a:	                      cmp.l d0,d1
   1125c:	            /-------- beq.w 11314 <unlinkVar+0xc8>
   11260:	            |         moveq #10,d1
   11262:	            |         cmp.l d0,d1
   11264:	/-----------|-------- bcs.w 11388 <unlinkVar+0x13c>
   11268:	|           |         moveq #8,d1
   1126a:	|           |         cmp.l d0,d1
   1126c:	|  /--------|-------- beq.w 11374 <unlinkVar+0x128>
   11270:	|  |        |         moveq #8,d1
   11272:	|  |        |         cmp.l d0,d1
   11274:	+--|--------|-------- bcs.w 11388 <unlinkVar+0x13c>
   11278:	|  |        |         moveq #3,d1
   1127a:	|  |        |         cmp.l d0,d1
   1127c:	|  |        |     /-- beq.s 11288 <unlinkVar+0x3c>
   1127e:	|  |        |     |   moveq #6,d1
   11280:	|  |        |     |   cmp.l d0,d1
   11282:	|  |        |  /--|-- beq.s 112ae <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11284:	+--|--------|--|--|-- bra.w 11388 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   11288:	|  |        |  |  \-> movea.l 24(sp),a0
   1128c:	|  |        |  |      move.l 4(a0),4(sp)
   11292:	|  |        |  |      move.l 16784 <SysBase>,d0
   11298:	|  |        |  |      movea.l d0,a6
   1129a:	|  |        |  |      movea.l 4(sp),a1
   1129e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   112a2:	|  |        |  |      movea.l 24(sp),a0
   112a6:	|  |        |  |      clr.l 4(a0)
		break;
   112aa:	|  |  /-----|--|----- bra.w 11392 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   112ae:	|  |  |     |  \----> movea.l 24(sp),a0
   112b2:	|  |  |     |         movea.l 4(a0),a0
   112b6:	|  |  |     |         move.l 8(a0),d0
   112ba:	|  |  |     |         subq.l #1,d0
   112bc:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   112c0:	|  |  |     |         movea.l 24(sp),a0
   112c4:	|  |  |     |         movea.l 4(a0),a0
   112c8:	|  |  |     |         move.l 8(a0),d0
   112cc:	|  |  |  /--|-------- bgt.w 1138c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   112d0:	|  |  |  |  |     /-- bra.s 112e4 <unlinkVar+0x98>
   112d2:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   112d6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   112da:	|  |  |  |  |  |  |   move.l d0,-(sp)
   112dc:	|  |  |  |  |  |  |   jsr 11982 <trimStack>
   112e2:	|  |  |  |  |  |  |   addq.l #4,sp
   112e4:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   112e8:	|  |  |  |  |  |      movea.l 4(a0),a0
   112ec:	|  |  |  |  |  |      move.l (a0),d0
   112ee:	|  |  |  |  |  \----- bne.s 112d2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   112f0:	|  |  |  |  |         movea.l 24(sp),a0
   112f4:	|  |  |  |  |         move.l 4(a0),8(sp)
   112fa:	|  |  |  |  |         move.l 16784 <SysBase>,d0
   11300:	|  |  |  |  |         movea.l d0,a6
   11302:	|  |  |  |  |         movea.l 8(sp),a1
   11306:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1130a:	|  |  |  |  |         movea.l 24(sp),a0
   1130e:	|  |  |  |  |         clr.l 4(a0)
		break;
   11312:	|  |  |  +--|-------- bra.s 1138c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   11314:	|  |  |  |  \-------> movea.l 24(sp),a0
   11318:	|  |  |  |            movea.l 4(a0),a0
   1131c:	|  |  |  |            move.l 8(a0),d0
   11320:	|  |  |  |            subq.l #1,d0
   11322:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11326:	|  |  |  |            movea.l 24(sp),a0
   1132a:	|  |  |  |            movea.l 4(a0),a0
   1132e:	|  |  |  |            move.l 8(a0),d0
   11332:	|  |  |  |        /-- bgt.s 11390 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   11334:	|  |  |  |        |   movea.l 24(sp),a0
   11338:	|  |  |  |        |   movea.l 4(a0),a0
   1133c:	|  |  |  |        |   move.l (a0),16(sp)
   11340:	|  |  |  |        |   move.l 16784 <SysBase>,d0
   11346:	|  |  |  |        |   movea.l d0,a6
   11348:	|  |  |  |        |   movea.l 16(sp),a1
   1134c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   11350:	|  |  |  |        |   movea.l 24(sp),a0
   11354:	|  |  |  |        |   move.l 4(a0),12(sp)
   1135a:	|  |  |  |        |   move.l 16784 <SysBase>,d0
   11360:	|  |  |  |        |   movea.l d0,a6
   11362:	|  |  |  |        |   movea.l 12(sp),a1
   11366:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1136a:	|  |  |  |        |   movea.l 24(sp),a0
   1136e:	|  |  |  |        |   clr.l 4(a0)
		break;
   11372:	|  |  |  |        +-- bra.s 11390 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   11374:	|  \--|--|--------|-> movea.l 24(sp),a0
   11378:	|     |  |        |   move.l 4(a0),d0
   1137c:	|     |  |        |   move.l d0,-(sp)
   1137e:	|     |  |        |   jsr 6ace <deleteAnim>
   11384:	|     |  |        |   addq.l #4,sp
		break;
   11386:	|     +--|--------|-- bra.s 11392 <unlinkVar+0x146>
		break;
   11388:	\-----|--|--------|-> nop
   1138a:	      +--|--------|-- bra.s 11392 <unlinkVar+0x146>
		break;
   1138c:	      |  \--------|-> nop
   1138e:	      +-----------|-- bra.s 11392 <unlinkVar+0x146>
		break;
   11390:	      |           \-> nop
	}
}
   11392:	      \-------------> nop
   11394:	                      movea.l (sp)+,a6
   11396:	                      lea 16(sp),sp
   1139a:	                      rts

0001139c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1139c:	       movea.l 4(sp),a0
   113a0:	       move.l (a0),d0
   113a2:	       movea.l 8(sp),a0
   113a6:	       move.l d0,(a0)
	switch (to->varType) {
   113a8:	       movea.l 8(sp),a0
   113ac:	       move.l (a0),d0
   113ae:	       moveq #10,d1
   113b0:	       cmp.l d0,d1
   113b2:	/----- bcs.w 114a4 <copyMain+0x108>
   113b6:	|      add.l d0,d0
   113b8:	|      movea.l d0,a0
   113ba:	|      adda.l #70598,a0
   113c0:	|      move.w (a0),d0
   113c2:	|      jmp (113c6 <copyMain+0x2a>,pc,d0.w)
   113c6:	|      .short 0x00da
   113c8:	|      ori.b #22,(a6)
   113cc:	|      ori.w #22,(a4)
   113d0:	|      ori.b #-126,(a6)
   113d4:	|      ori.b #-68,(a6)
   113d8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   113e0:	|      move.l 4(a0),d0
   113e4:	|      movea.l 8(sp),a0
   113e8:	|      move.l d0,4(a0)
		return TRUE;
   113ec:	|      moveq #1,d0
   113ee:	|  /-- bra.w 114b6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   113f2:	|  |   movea.l 4(sp),a0
   113f6:	|  |   move.l 4(a0),d0
   113fa:	|  |   movea.l 8(sp),a0
   113fe:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   11402:	|  |   movea.l 8(sp),a0
   11406:	|  |   movea.l 4(a0),a0
   1140a:	|  |   move.l 8(a0),d0
   1140e:	|  |   addq.l #1,d0
   11410:	|  |   move.l d0,8(a0)
		return TRUE;
   11414:	|  |   moveq #1,d0
   11416:	|  +-- bra.w 114b6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1141a:	|  |   movea.l 4(sp),a0
   1141e:	|  |   move.l 4(a0),d0
   11422:	|  |   move.l d0,-(sp)
   11424:	|  |   jsr b8 <copyString>
   1142a:	|  |   addq.l #4,sp
   1142c:	|  |   movea.l 8(sp),a0
   11430:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   11434:	|  |   movea.l 8(sp),a0
   11438:	|  |   move.l 4(a0),d0
   1143c:	|  |   sne d0
   1143e:	|  |   neg.b d0
   11440:	|  |   move.b d0,d0
   11442:	|  |   andi.w #255,d0
   11446:	|  +-- bra.s 114b6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   11448:	|  |   movea.l 4(sp),a0
   1144c:	|  |   move.l 4(a0),d0
   11450:	|  |   movea.l 8(sp),a0
   11454:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   11458:	|  |   movea.l 8(sp),a0
   1145c:	|  |   movea.l 4(a0),a0
   11460:	|  |   move.l 8(a0),d0
   11464:	|  |   addq.l #1,d0
   11466:	|  |   move.l d0,8(a0)
		return TRUE;
   1146a:	|  |   moveq #1,d0
   1146c:	|  +-- bra.s 114b6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1146e:	|  |   movea.l 4(sp),a0
   11472:	|  |   move.l 4(a0),d0
   11476:	|  |   movea.l 8(sp),a0
   1147a:	|  |   move.l d0,4(a0)
		return TRUE;
   1147e:	|  |   moveq #1,d0
   11480:	|  +-- bra.s 114b6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   11482:	|  |   movea.l 4(sp),a0
   11486:	|  |   move.l 4(a0),d0
   1148a:	|  |   move.l d0,-(sp)
   1148c:	|  |   jsr 6712 <copyAnim>
   11492:	|  |   addq.l #4,sp
   11494:	|  |   movea.l 8(sp),a0
   11498:	|  |   move.l d0,4(a0)
		return TRUE;
   1149c:	|  |   moveq #1,d0
   1149e:	|  +-- bra.s 114b6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   114a0:	|  |   moveq #1,d0
   114a2:	|  +-- bra.s 114b6 <copyMain+0x11a>

		default:
		break;
   114a4:	\--|-> nop
	}
	KPrintF("Unknown value type");
   114a6:	   |   pea 157ad <custom.c.9a493ead+0xffd>
   114ac:	   |   jsr 13046 <KPrintF>
   114b2:	   |   addq.l #4,sp
	return FALSE;
   114b4:	   |   clr.w d0
}
   114b6:	   \-> rts

000114b8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   114b8:	move.l 8(sp),-(sp)
   114bc:	jsr 1124c <unlinkVar>
   114c2:	addq.l #4,sp
	return copyMain(from, to);
   114c4:	move.l 8(sp),-(sp)
   114c8:	move.l 8(sp),-(sp)
   114cc:	jsr 1139c <copyMain>
   114d2:	addq.l #8,sp
}
   114d4:	rts

000114d6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   114d6:	       movea.l 4(sp),a0
   114da:	       move.l (a0),d0
   114dc:	       moveq #8,d1
   114de:	       cmp.l d0,d1
   114e0:	   /-- bne.s 114f6 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   114e2:	   |   movea.l 4(sp),a0
   114e6:	   |   move.l 4(a0),d0
   114ea:	   |   move.l d0,-(sp)
   114ec:	   |   jsr 6712 <copyAnim>
   114f2:	   |   addq.l #4,sp
   114f4:	/--|-- bra.s 1153c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   114f6:	|  \-> movea.l 4(sp),a0
   114fa:	|      move.l (a0),d0
   114fc:	|      moveq #1,d1
   114fe:	|      cmp.l d0,d1
   11500:	|  /-- bne.s 11514 <getAnimationFromVar+0x3e>
   11502:	|  |   movea.l 4(sp),a0
   11506:	|  |   move.l 4(a0),d0
   1150a:	|  +-- bne.s 11514 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   1150c:	|  |   jsr 78ba <makeNullAnim>
   11512:	+--|-- bra.s 1153c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11514:	|  \-> movea.l 4(sp),a0
   11518:	|      move.l (a0),d0
   1151a:	|      add.l d0,d0
   1151c:	|      movea.l d0,a1
   1151e:	|      adda.l d0,a1
   11520:	|      lea 16680 <typeName>,a0
   11526:	|      move.l (0,a1,a0.l),d0
   1152a:	|      move.l d0,-(sp)
   1152c:	|      pea 15699 <custom.c.9a493ead+0xee9>
   11532:	|      jsr 13046 <KPrintF>
   11538:	|      addq.l #8,sp
	return NULL;
   1153a:	|      moveq #0,d0
}
   1153c:	\----> rts

0001153e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1153e:	       movea.l 4(sp),a0
   11542:	       move.l (a0),d0
   11544:	       moveq #10,d1
   11546:	       cmp.l d0,d1
   11548:	/----- bcs.w 115ce <getBoolean+0x90>
   1154c:	|      add.l d0,d0
   1154e:	|      movea.l d0,a0
   11550:	|      adda.l #71004,a0
   11556:	|      move.w (a0),d0
   11558:	|      jmp (1155c <getBoolean+0x1e>,pc,d0.w)
   1155c:	|      ori.b #26,(a6)
   11560:	|      ori.w #68,(114,a2,d0.w)
   11566:	|      ori.w #46,(114,a2,d0.w)
   1156c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   11572:	|      clr.w d0
   11574:	|  /-- bra.s 115d2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   11576:	|  |   movea.l 4(sp),a0
   1157a:	|  |   move.l 4(a0),d0
   1157e:	|  |   sne d0
   11580:	|  |   neg.b d0
   11582:	|  |   move.b d0,d0
   11584:	|  |   andi.w #255,d0
   11588:	|  +-- bra.s 115d2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1158a:	|  |   movea.l 4(sp),a0
   1158e:	|  |   movea.l 4(a0),a0
   11592:	|  |   move.l (a0),d0
   11594:	|  |   sne d0
   11596:	|  |   neg.b d0
   11598:	|  |   move.b d0,d0
   1159a:	|  |   andi.w #255,d0
   1159e:	|  +-- bra.s 115d2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   115a0:	|  |   movea.l 4(sp),a0
   115a4:	|  |   movea.l 4(a0),a0
   115a8:	|  |   move.b (a0),d0
   115aa:	|  |   sne d0
   115ac:	|  |   neg.b d0
   115ae:	|  |   move.b d0,d0
   115b0:	|  |   andi.w #255,d0
   115b4:	|  +-- bra.s 115d2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   115b6:	|  |   movea.l 4(sp),a0
   115ba:	|  |   movea.l 4(a0),a0
   115be:	|  |   move.l 4(a0),d0
   115c2:	|  |   sne d0
   115c4:	|  |   neg.b d0
   115c6:	|  |   move.b d0,d0
   115c8:	|  |   andi.w #255,d0
   115cc:	|  +-- bra.s 115d2 <getBoolean+0x94>

		default:
		break;
   115ce:	\--|-> nop
	}
	return TRUE;
   115d0:	   |   moveq #1,d0
}
   115d2:	   \-> rts

000115d4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   115d4:	      /----------> lea -76(sp),sp
   115d8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   115da:	      |            movea.l 84(sp),a0
   115de:	      |            move.l (a0),d0
   115e0:	      |            moveq #10,d1
   115e2:	      |            cmp.l d0,d1
   115e4:	/-----|----------- bcs.w 11882 <getTextFromAnyVar+0x2ae>
   115e8:	|     |            add.l d0,d0
   115ea:	|     |            movea.l d0,a0
   115ec:	|     |            adda.l #71160,a0
   115f2:	|     |            move.w (a0),d0
   115f4:	|     |            jmp (115f8 <getTextFromAnyVar+0x24>,pc,d0.w)
   115f8:	|     |            .short 0x028a
   115fa:	|     |            bset d0,(a0)+
   115fc:	|     |            .short 0x028a
   115fe:	|     |            ori.b #-118,(a6)
   11602:	|     |            andi.b #8,ccr
   11606:	|     |            andi.w #650,-(a0)
   1160a:	|     |            .short 0x028a
   1160c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   11612:	|     |            move.l 4(a0),d0
   11616:	|     |            move.l d0,-(sp)
   11618:	|     |            jsr b8 <copyString>
   1161e:	|     |            addq.l #4,sp
   11620:	|  /--|----------- bra.w 118a4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   11624:	|  |  |            pea 157c0 <custom.c.9a493ead+0x1010>
   1162a:	|  |  |            jsr b8 <copyString>
   11630:	|  |  |            addq.l #4,sp
   11632:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   11636:	|  |  |            clr.l 72(sp)
   1163a:	|  |  |     /----- bra.w 116e4 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1163e:	|  |  |  /--|----> pea 157c6 <custom.c.9a493ead+0x1016>
   11644:	|  |  |  |  |      move.l 80(sp),-(sp)
   11648:	|  |  |  |  |      jsr 1052a <joinStrings>
   1164e:	|  |  |  |  |      addq.l #8,sp
   11650:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   11654:	|  |  |  |  |  /-- bne.s 1165c <getTextFromAnyVar+0x88>
   11656:	|  |  |  |  |  |   moveq #0,d0
   11658:	|  +--|--|--|--|-- bra.w 118a4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1165c:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   11662:	|  |  |  |  |      move.l 16784 <SysBase>,d0
   11668:	|  |  |  |  |      movea.l d0,a6
   1166a:	|  |  |  |  |      movea.l 56(sp),a1
   1166e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   11672:	|  |  |  |  |      movea.l 84(sp),a0
   11676:	|  |  |  |  |      movea.l 4(a0),a0
   1167a:	|  |  |  |  |      move.l (a0),d1
   1167c:	|  |  |  |  |      move.l 72(sp),d0
   11680:	|  |  |  |  |      lsl.l #3,d0
   11682:	|  |  |  |  |      add.l d1,d0
   11684:	|  |  |  |  |      move.l d0,-(sp)
   11686:	|  |  +--|--|----- jsr 115d4 <getTextFromAnyVar>(pc)
   1168a:	|  |  |  |  |      addq.l #4,sp
   1168c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   11690:	|  |  |  |  |      move.l 52(sp),-(sp)
   11694:	|  |  |  |  |      move.l 64(sp),-(sp)
   11698:	|  |  |  |  |      jsr 1052a <joinStrings>
   1169e:	|  |  |  |  |      addq.l #8,sp
   116a0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   116a4:	|  |  |  |  |  /-- bne.s 116ac <getTextFromAnyVar+0xd8>
   116a6:	|  |  |  |  |  |   moveq #0,d0
   116a8:	|  +--|--|--|--|-- bra.w 118a4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   116ac:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   116b2:	|  |  |  |  |      move.l 16784 <SysBase>,d0
   116b8:	|  |  |  |  |      movea.l d0,a6
   116ba:	|  |  |  |  |      movea.l 48(sp),a1
   116be:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   116c2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   116c6:	|  |  |  |  |      move.l 60(sp),44(sp)
   116cc:	|  |  |  |  |      move.l 16784 <SysBase>,d0
   116d2:	|  |  |  |  |      movea.l d0,a6
   116d4:	|  |  |  |  |      movea.l 44(sp),a1
   116d8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   116dc:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   116e0:	|  |  |  |  |      addq.l #1,72(sp)
   116e4:	|  |  |  |  \----> movea.l 84(sp),a0
   116e8:	|  |  |  |         movea.l 4(a0),a0
   116ec:	|  |  |  |         move.l 4(a0),d0
   116f0:	|  |  |  |         cmp.l 72(sp),d0
   116f4:	|  |  |  \-------- bgt.w 1163e <getTextFromAnyVar+0x6a>
			}
			return builder;
   116f8:	|  |  |            move.l 76(sp),d0
   116fc:	|  +--|----------- bra.w 118a4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   11700:	|  |  |            pea 157c8 <custom.c.9a493ead+0x1018>
   11706:	|  |  |            jsr b8 <copyString>
   1170c:	|  |  |            addq.l #4,sp
   1170e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   11712:	|  |  |            movea.l 84(sp),a0
   11716:	|  |  |            movea.l 4(a0),a0
   1171a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1171e:	|  |  |     /----- bra.w 117c0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   11722:	|  |  |  /--|----> pea 157c6 <custom.c.9a493ead+0x1016>
   11728:	|  |  |  |  |      move.l 72(sp),-(sp)
   1172c:	|  |  |  |  |      jsr 1052a <joinStrings>
   11732:	|  |  |  |  |      addq.l #8,sp
   11734:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   11738:	|  |  |  |  |  /-- bne.s 11740 <getTextFromAnyVar+0x16c>
   1173a:	|  |  |  |  |  |   moveq #0,d0
   1173c:	|  +--|--|--|--|-- bra.w 118a4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   11740:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   11746:	|  |  |  |  |      move.l 16784 <SysBase>,d0
   1174c:	|  |  |  |  |      movea.l d0,a6
   1174e:	|  |  |  |  |      movea.l 32(sp),a1
   11752:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   11756:	|  |  |  |  |      move.l 64(sp),d0
   1175a:	|  |  |  |  |      move.l d0,-(sp)
   1175c:	|  |  \--|--|----- jsr 115d4 <getTextFromAnyVar>(pc)
   11760:	|  |     |  |      addq.l #4,sp
   11762:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   11766:	|  |     |  |      move.l 28(sp),-(sp)
   1176a:	|  |     |  |      move.l 40(sp),-(sp)
   1176e:	|  |     |  |      jsr 1052a <joinStrings>
   11774:	|  |     |  |      addq.l #8,sp
   11776:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1177a:	|  |     |  |  /-- bne.s 11782 <getTextFromAnyVar+0x1ae>
   1177c:	|  |     |  |  |   moveq #0,d0
   1177e:	|  +-----|--|--|-- bra.w 118a4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11782:	|  |     |  |  \-> move.l 28(sp),24(sp)
   11788:	|  |     |  |      move.l 16784 <SysBase>,d0
   1178e:	|  |     |  |      movea.l d0,a6
   11790:	|  |     |  |      movea.l 24(sp),a1
   11794:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   11798:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1179c:	|  |     |  |      move.l 36(sp),20(sp)
   117a2:	|  |     |  |      move.l 16784 <SysBase>,d0
   117a8:	|  |     |  |      movea.l d0,a6
   117aa:	|  |     |  |      movea.l 20(sp),a1
   117ae:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   117b2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   117b6:	|  |     |  |      movea.l 64(sp),a0
   117ba:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   117c0:	|  |     |  \----> tst.l 64(sp)
   117c4:	|  |     \-------- bne.w 11722 <getTextFromAnyVar+0x14e>
			}
			return builder;
   117c8:	|  |               move.l 68(sp),d0
   117cc:	|  +-------------- bra.w 118a4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   117d0:	|  |               moveq #10,d0
   117d2:	|  |               move.l d0,16(sp)
   117d6:	|  |               clr.l 12(sp)
   117da:	|  |               move.l 16784 <SysBase>,d0
   117e0:	|  |               movea.l d0,a6
   117e2:	|  |               move.l 16(sp),d0
   117e6:	|  |               move.l 12(sp),d1
   117ea:	|  |               jsr -684(a6)
   117ee:	|  |               move.l d0,8(sp)
   117f2:	|  |               move.l 8(sp),d0
   117f6:	|  |               move.l d0,4(sp)
			if (! buff) {
   117fa:	|  |           /-- bne.s 11810 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   117fc:	|  |           |   pea 157cf <custom.c.9a493ead+0x101f>
   11802:	|  |           |   jsr 13046 <KPrintF>
   11808:	|  |           |   addq.l #4,sp
				return NULL;
   1180a:	|  |           |   moveq #0,d0
   1180c:	|  +-----------|-- bra.w 118a4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   11810:	|  |           \-> movea.l 84(sp),a0
   11814:	|  |               move.l 4(a0),d0
   11818:	|  |               move.l d0,-(sp)
   1181a:	|  |               pea 157f9 <custom.c.9a493ead+0x1049>
   11820:	|  |               move.l 12(sp),-(sp)
   11824:	|  |               jsr 10808 <sprintf>
   1182a:	|  |               lea 12(sp),sp
			return buff;
   1182e:	|  |               move.l 4(sp),d0
   11832:	|  +-------------- bra.s 118a4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   11834:	|  |               movea.l 84(sp),a0
   11838:	|  |               move.l 4(a0),d0
   1183c:	|  |               move.l d0,-(sp)
   1183e:	|  |               jsr 1b4e <resourceNameFromNum>
   11844:	|  |               addq.l #4,sp
   11846:	|  |               move.l d0,-(sp)
   11848:	|  |               pea 14220 <PutChar+0x8b2>
   1184e:	|  |               jsr 1052a <joinStrings>
   11854:	|  |               addq.l #8,sp
   11856:	|  +-------------- bra.s 118a4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   11858:	|  |               movea.l 84(sp),a0
   1185c:	|  |               move.l 4(a0),d0
   11860:	|  |               move.l d0,-(sp)
   11862:	|  |               jsr 9e34 <findObjectType>
   11868:	|  |               addq.l #4,sp
   1186a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1186e:	+--|-------------- beq.s 11882 <getTextFromAnyVar+0x2ae>
   11870:	|  |               movea.l 40(sp),a0
   11874:	|  |               move.l (a0),d0
   11876:	|  |               move.l d0,-(sp)
   11878:	|  |               jsr b8 <copyString>
   1187e:	|  |               addq.l #4,sp
   11880:	|  +-------------- bra.s 118a4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   11882:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   11884:	   |               movea.l 84(sp),a0
   11888:	   |               move.l (a0),d0
   1188a:	   |               add.l d0,d0
   1188c:	   |               movea.l d0,a1
   1188e:	   |               adda.l d0,a1
   11890:	   |               lea 16680 <typeName>,a0
   11896:	   |               move.l (0,a1,a0.l),d0
   1189a:	   |               move.l d0,-(sp)
   1189c:	   |               jsr b8 <copyString>
   118a2:	   |               addq.l #4,sp
}
   118a4:	   \-------------> movea.l (sp)+,a6
   118a6:	                   lea 76(sp),sp
   118aa:	                   rts

000118ac <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   118ac:	move.l 4(sp),-(sp)
   118b0:	jsr 1124c <unlinkVar>
   118b6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   118b8:	movea.l 4(sp),a0
   118bc:	moveq #8,d0
   118be:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   118c0:	movea.l 4(sp),a0
   118c4:	move.l 8(sp),4(a0)
}
   118ca:	nop
   118cc:	rts

000118ce <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   118ce:	move.l 4(sp),-(sp)
   118d2:	jsr 1124c <unlinkVar>
   118d8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   118da:	movea.l 4(sp),a0
   118de:	moveq #9,d0
   118e0:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   118e2:	movea.l 4(sp),a0
   118e6:	move.l 8(sp),4(a0)
}
   118ec:	nop
   118ee:	rts

000118f0 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   118f0:	move.l 4(sp),-(sp)
   118f4:	jsr 1124c <unlinkVar>
   118fa:	addq.l #4,sp
	thisVar->varType = vT;
   118fc:	movea.l 4(sp),a0
   11900:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   11904:	movea.l 4(sp),a0
   11908:	move.l 12(sp),4(a0)
}
   1190e:	nop
   11910:	rts

00011912 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   11912:	      /-- bra.s 11924 <stackGetByIndex+0x12>
        vS = vS->next;
   11914:	/-----|-> movea.l 4(sp),a0
   11918:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1191e:	|     +-- bne.s 11924 <stackGetByIndex+0x12>
            return NULL;
   11920:	|     |   moveq #0,d0
   11922:	|  /--|-- bra.s 11938 <stackGetByIndex+0x26>
    while (theIndex--) {
   11924:	|  |  \-> move.l 8(sp),d0
   11928:	|  |      move.l d0,d1
   1192a:	|  |      subq.l #1,d1
   1192c:	|  |      move.l d1,8(sp)
   11930:	|  |      tst.l d0
   11932:	\--|----- bne.s 11914 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   11934:	   |      move.l 4(sp),d0
}
   11938:	   \----> rts

0001193a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1193a:	          tst.l 4(sp)
   1193e:	      /-- bne.s 1194e <stackFindLast+0x14>
		return NULL;
   11940:	      |   moveq #0,d0
   11942:	/-----|-- bra.s 1195c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   11944:	|  /--|-> movea.l 4(sp),a0
   11948:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1194e:	|  |  \-> movea.l 4(sp),a0
   11952:	|  |      move.l 8(a0),d0
   11956:	|  \----- bne.s 11944 <stackFindLast+0xa>

	return hunt;
   11958:	|         move.l 4(sp),d0
}
   1195c:	\-------> rts

0001195e <stackSize>:

int stackSize (const struct stackHandler * me) {
   1195e:	       subq.l #8,sp
	int r = 0;
   11960:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   11964:	       movea.l 12(sp),a0
   11968:	       move.l (a0),(sp)
	while (a) {
   1196a:	   /-- bra.s 11976 <stackSize+0x18>
		r ++;
   1196c:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   11970:	|  |   movea.l (sp),a0
   11972:	|  |   move.l 8(a0),(sp)
	while (a) {
   11976:	|  \-> tst.l (sp)
   11978:	\----- bne.s 1196c <stackSize+0xe>
	}
	return r;
   1197a:	       move.l 4(sp),d0
}
   1197e:	       addq.l #8,sp
   11980:	       rts

00011982 <trimStack>:

void trimStack (struct variableStack ** stack) {
   11982:	subq.l #8,sp
   11984:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   11986:	movea.l 16(sp),a0
   1198a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1198e:	movea.l 16(sp),a0
   11992:	movea.l (a0),a0
   11994:	move.l 8(a0),d0
   11998:	movea.l 16(sp),a0
   1199c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1199e:	move.l 8(sp),d0
   119a2:	move.l d0,-(sp)
   119a4:	jsr 1124c <unlinkVar>
   119aa:	addq.l #4,sp
	FreeVec(killMe);
   119ac:	move.l 8(sp),4(sp)
   119b2:	move.l 16784 <SysBase>,d0
   119b8:	movea.l d0,a6
   119ba:	movea.l 4(sp),a1
   119be:	jsr -690(a6)
   119c2:	nop
   119c4:	movea.l (sp)+,a6
   119c6:	addq.l #8,sp
   119c8:	rts

000119ca <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   119ca:	pea 157fc <custom.c.9a493ead+0x104c>
   119d0:	jsr 13046 <KPrintF>
   119d6:	addq.l #4,sp
	return FALSE;
   119d8:	clr.w d0
}
   119da:	rts

000119dc <stringWidth>:

int stringWidth (char * theText) {
   119dc:	       subq.l #8,sp
	int a = 0;
   119de:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   119e2:	       clr.l (sp)

	if (! fontTableSize) return 0;
   119e4:	       move.l 168d8 <fontTableSize>,d0
   119ea:	/----- bne.s 119f0 <stringWidth+0x14>
   119ec:	|      moveq #0,d0
   119ee:	|  /-- bra.s 119f2 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   119f0:	\--|-> move.l (sp),d0
}
   119f2:	   \-> addq.l #8,sp
   119f4:	       rts

000119f6 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   119f6:	pea 15823 <custom.c.9a493ead+0x1073>
   119fc:	jsr 13046 <KPrintF>
   11a02:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   11a04:	moveq #1,d0
}
   11a06:	rts

00011a08 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   11a08:	       lea -16(sp),sp
   11a0c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   11a0e:	       moveq #36,d0
   11a10:	       move.l d0,16(sp)
   11a14:	       clr.l 12(sp)
   11a18:	       move.l 16784 <SysBase>,d0
   11a1e:	       movea.l d0,a6
   11a20:	       move.l 16(sp),d0
   11a24:	       move.l 12(sp),d1
   11a28:	       jsr -684(a6)
   11a2c:	       move.l d0,8(sp)
   11a30:	       move.l 8(sp),d0
   11a34:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   11a38:	   /-- bne.s 11a40 <addScreenRegion+0x38>
   11a3a:	   |   clr.w d0
   11a3c:	/--|-- bra.w 11ac0 <addScreenRegion+0xb8>
    newRegion->di = di;
   11a40:	|  \-> movea.l 4(sp),a0
   11a44:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   11a4a:	|      movea.l 4(sp),a0
   11a4e:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   11a52:	|      movea.l 4(sp),a0
   11a56:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   11a5c:	|      movea.l 4(sp),a0
   11a60:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   11a66:	|      movea.l 4(sp),a0
   11a6a:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   11a70:	|      movea.l 4(sp),a0
   11a74:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   11a7a:	|      movea.l 4(sp),a0
   11a7e:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   11a84:	|      move.l 52(sp),-(sp)
   11a88:	|      jsr 9f24 <loadObjectType>
   11a8e:	|      addq.l #4,sp
   11a90:	|      movea.l 4(sp),a0
   11a94:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   11a98:	|      move.l 168dc <allScreenRegions>,d0
   11a9e:	|      movea.l 4(sp),a0
   11aa2:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   11aa6:	|      move.l 4(sp),168dc <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11aae:	|      movea.l 4(sp),a0
   11ab2:	|      move.l 28(a0),d0
   11ab6:	|      sne d0
   11ab8:	|      neg.b d0
   11aba:	|      move.b d0,d0
   11abc:	|      andi.w #255,d0
}
   11ac0:	\----> movea.l (sp)+,a6
   11ac2:	       lea 16(sp),sp
   11ac6:	       rts

00011ac8 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   11ac8:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   11aca:	             move.l 168dc <allScreenRegions>,(sp)

	while (thisRegion) {
   11ad0:	   /-------- bra.s 11aec <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11ad2:	/--|-------> movea.l (sp),a0
   11ad4:	|  |         movea.l 28(a0),a0
   11ad8:	|  |         move.l 4(a0),d0
   11adc:	|  |         cmp.l 8(sp),d0
   11ae0:	|  |     /-- bne.s 11ae6 <getRegionForObject+0x1e>
			return thisRegion;
   11ae2:	|  |     |   move.l (sp),d0
   11ae4:	|  |  /--|-- bra.s 11af2 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   11ae6:	|  |  |  \-> movea.l (sp),a0
   11ae8:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   11aec:	|  \--|----> tst.l (sp)
   11aee:	\-----|----- bne.s 11ad2 <getRegionForObject+0xa>
	}

	return NULL;
   11af0:	      |      moveq #0,d0
}
   11af2:	      \----> addq.l #4,sp
   11af4:	             rts

00011af6 <killAllRegions>:

void killAllRegions () {
   11af6:	       subq.l #8,sp
   11af8:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   11afa:	   /-- bra.s 11b3c <killAllRegions+0x46>
		killRegion = allScreenRegions;
   11afc:	/--|-> move.l 168dc <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   11b04:	|  |   movea.l 168dc <allScreenRegions>,a0
   11b0a:	|  |   move.l 32(a0),d0
   11b0e:	|  |   move.l d0,168dc <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   11b14:	|  |   movea.l 8(sp),a0
   11b18:	|  |   move.l 28(a0),d0
   11b1c:	|  |   move.l d0,-(sp)
   11b1e:	|  |   jsr a1dc <removeObjectType>
   11b24:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   11b26:	|  |   move.l 8(sp),4(sp)
   11b2c:	|  |   move.l 16784 <SysBase>,d0
   11b32:	|  |   movea.l d0,a6
   11b34:	|  |   movea.l 4(sp),a1
   11b38:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   11b3c:	|  \-> move.l 168dc <allScreenRegions>,d0
   11b42:	\----- bne.s 11afc <killAllRegions+0x6>
	}
	overRegion = NULL;
   11b44:	       clr.l 168e0 <overRegion>
}
   11b4a:	       nop
   11b4c:	       movea.l (sp)+,a6
   11b4e:	       addq.l #8,sp
   11b50:	       rts

00011b52 <loadRegions>:

void loadRegions (BPTR fp) {
   11b52:	       lea -24(sp),sp
   11b56:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   11b58:	       move.l 32(sp),-(sp)
   11b5c:	       jsr 6bc <get2bytes>
   11b62:	       addq.l #4,sp
   11b64:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   11b68:	       move.l #92380,20(sp)

	while (numRegions --) {
   11b70:	   /-- bra.w 11c4e <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   11b74:	/--|-> moveq #36,d0
   11b76:	|  |   move.l d0,16(sp)
   11b7a:	|  |   clr.l 12(sp)
   11b7e:	|  |   move.l 16784 <SysBase>,d0
   11b84:	|  |   movea.l d0,a6
   11b86:	|  |   move.l 16(sp),d0
   11b8a:	|  |   move.l 12(sp),d1
   11b8e:	|  |   jsr -684(a6)
   11b92:	|  |   move.l d0,8(sp)
   11b96:	|  |   move.l 8(sp),d0
   11b9a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   11b9e:	|  |   movea.l 20(sp),a0
   11ba2:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   11ba6:	|  |   moveq #32,d1
   11ba8:	|  |   add.l 4(sp),d1
   11bac:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11bb0:	|  |   move.l 32(sp),-(sp)
   11bb4:	|  |   jsr 6bc <get2bytes>
   11bba:	|  |   addq.l #4,sp
   11bbc:	|  |   movea.l 4(sp),a0
   11bc0:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11bc2:	|  |   move.l 32(sp),-(sp)
   11bc6:	|  |   jsr 6bc <get2bytes>
   11bcc:	|  |   addq.l #4,sp
   11bce:	|  |   movea.l 4(sp),a0
   11bd2:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   11bd6:	|  |   move.l 32(sp),-(sp)
   11bda:	|  |   jsr 6bc <get2bytes>
   11be0:	|  |   addq.l #4,sp
   11be2:	|  |   movea.l 4(sp),a0
   11be6:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   11bea:	|  |   move.l 32(sp),-(sp)
   11bee:	|  |   jsr 6bc <get2bytes>
   11bf4:	|  |   addq.l #4,sp
   11bf6:	|  |   movea.l 4(sp),a0
   11bfa:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   11bfe:	|  |   move.l 32(sp),-(sp)
   11c02:	|  |   jsr 6bc <get2bytes>
   11c08:	|  |   addq.l #4,sp
   11c0a:	|  |   movea.l 4(sp),a0
   11c0e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   11c12:	|  |   move.l 32(sp),-(sp)
   11c16:	|  |   jsr 6bc <get2bytes>
   11c1c:	|  |   addq.l #4,sp
   11c1e:	|  |   movea.l 4(sp),a0
   11c22:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   11c26:	|  |   move.l 32(sp),-(sp)
   11c2a:	|  |   jsr 6bc <get2bytes>
   11c30:	|  |   addq.l #4,sp
   11c32:	|  |   movea.l 4(sp),a0
   11c36:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   11c3a:	|  |   move.l 32(sp),-(sp)
   11c3e:	|  |   jsr 9ed2 <loadObjectRef>
   11c44:	|  |   addq.l #4,sp
   11c46:	|  |   movea.l 4(sp),a0
   11c4a:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   11c4e:	|  \-> move.l 24(sp),d0
   11c52:	|      move.l d0,d1
   11c54:	|      subq.l #1,d1
   11c56:	|      move.l d1,24(sp)
   11c5a:	|      tst.l d0
   11c5c:	\----- bne.w 11b74 <loadRegions+0x22>
	}
	* pointy = NULL;
   11c60:	       movea.l 20(sp),a0
   11c64:	       clr.l (a0)
}
   11c66:	       nop
   11c68:	       movea.l (sp)+,a6
   11c6a:	       lea 24(sp),sp
   11c6e:	       rts

00011c70 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   11c70:	             lea -12(sp),sp
   11c74:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   11c76:	             move.l #92380,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   11c7e:	   /-------- bra.s 11cf8 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   11c80:	/--|-------> movea.l 12(sp),a0
   11c84:	|  |         movea.l (a0),a0
   11c86:	|  |         movea.l 28(a0),a0
   11c8a:	|  |         move.l 4(a0),d0
   11c8e:	|  |         cmp.l 20(sp),d0
   11c92:	|  |  /----- bne.s 11cea <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   11c94:	|  |  |      movea.l 12(sp),a0
   11c98:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   11c9c:	|  |  |      movea.l 8(sp),a0
   11ca0:	|  |  |      move.l 32(a0),d0
   11ca4:	|  |  |      movea.l 12(sp),a0
   11ca8:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   11caa:	|  |  |      movea.l 8(sp),a0
   11cae:	|  |  |      move.l 28(a0),d0
   11cb2:	|  |  |      move.l d0,-(sp)
   11cb4:	|  |  |      jsr a1dc <removeObjectType>
   11cba:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   11cbc:	|  |  |      move.l 168e0 <overRegion>,d0
   11cc2:	|  |  |      cmp.l 8(sp),d0
   11cc6:	|  |  |  /-- bne.s 11cce <removeScreenRegion+0x5e>
   11cc8:	|  |  |  |   clr.l 168e0 <overRegion>
            FreeVec(killMe);
   11cce:	|  |  |  \-> move.l 8(sp),4(sp)
   11cd4:	|  |  |      move.l 16784 <SysBase>,d0
   11cda:	|  |  |      movea.l d0,a6
   11cdc:	|  |  |      movea.l 4(sp),a1
   11ce0:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11ce4:	|  |  |      clr.l 8(sp)
   11ce8:	|  +--|----- bra.s 11cf8 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   11cea:	|  |  \----> movea.l 12(sp),a0
   11cee:	|  |         move.l (a0),d0
   11cf0:	|  |         moveq #32,d1
   11cf2:	|  |         add.l d0,d1
   11cf4:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   11cf8:	|  \-------> movea.l 12(sp),a0
   11cfc:	|            move.l (a0),d0
   11cfe:	\----------- bne.s 11c80 <removeScreenRegion+0x10>
        }
    }
}
   11d00:	             nop
   11d02:	             nop
   11d04:	             movea.l (sp)+,a6
   11d06:	             lea 12(sp),sp
   11d0a:	             rts

00011d0c <saveRegions>:

void saveRegions (BPTR fp) {
   11d0c:	       subq.l #8,sp
	int numRegions = 0;
   11d0e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   11d12:	       move.l 168dc <allScreenRegions>,(sp)
	while (thisRegion) {
   11d18:	   /-- bra.s 11d24 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   11d1a:	/--|-> movea.l (sp),a0
   11d1c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   11d20:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   11d24:	|  \-> tst.l (sp)
   11d26:	\----- bne.s 11d1a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   11d28:	       move.l 12(sp),-(sp)
   11d2c:	       move.l 8(sp),-(sp)
   11d30:	       jsr 8d0 <put2bytes>
   11d36:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   11d38:	       move.l 168dc <allScreenRegions>,(sp)
	while (thisRegion) {
   11d3e:	/----- bra.w 11de6 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   11d42:	|  /-> movea.l (sp),a0
   11d44:	|  |   move.l (a0),d0
   11d46:	|  |   move.l 12(sp),-(sp)
   11d4a:	|  |   move.l d0,-(sp)
   11d4c:	|  |   jsr 8d0 <put2bytes>
   11d52:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   11d54:	|  |   movea.l (sp),a0
   11d56:	|  |   move.l 4(a0),d0
   11d5a:	|  |   move.l 12(sp),-(sp)
   11d5e:	|  |   move.l d0,-(sp)
   11d60:	|  |   jsr 8d0 <put2bytes>
   11d66:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   11d68:	|  |   movea.l (sp),a0
   11d6a:	|  |   move.l 8(a0),d0
   11d6e:	|  |   move.l 12(sp),-(sp)
   11d72:	|  |   move.l d0,-(sp)
   11d74:	|  |   jsr 8d0 <put2bytes>
   11d7a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   11d7c:	|  |   movea.l (sp),a0
   11d7e:	|  |   move.l 12(a0),d0
   11d82:	|  |   move.l 12(sp),-(sp)
   11d86:	|  |   move.l d0,-(sp)
   11d88:	|  |   jsr 8d0 <put2bytes>
   11d8e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   11d90:	|  |   movea.l (sp),a0
   11d92:	|  |   move.l 16(a0),d0
   11d96:	|  |   move.l 12(sp),-(sp)
   11d9a:	|  |   move.l d0,-(sp)
   11d9c:	|  |   jsr 8d0 <put2bytes>
   11da2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   11da4:	|  |   movea.l (sp),a0
   11da6:	|  |   move.l 20(a0),d0
   11daa:	|  |   move.l 12(sp),-(sp)
   11dae:	|  |   move.l d0,-(sp)
   11db0:	|  |   jsr 8d0 <put2bytes>
   11db6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   11db8:	|  |   movea.l (sp),a0
   11dba:	|  |   move.l 24(a0),d0
   11dbe:	|  |   move.l 12(sp),-(sp)
   11dc2:	|  |   move.l d0,-(sp)
   11dc4:	|  |   jsr 8d0 <put2bytes>
   11dca:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   11dcc:	|  |   movea.l (sp),a0
   11dce:	|  |   move.l 28(a0),d0
   11dd2:	|  |   move.l 12(sp),-(sp)
   11dd6:	|  |   move.l d0,-(sp)
   11dd8:	|  |   jsr a27c <saveObjectRef>
   11dde:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11de0:	|  |   movea.l (sp),a0
   11de2:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11de6:	\--|-> tst.l (sp)
   11de8:	   \-- bne.w 11d42 <saveRegions+0x36>
	}
}
   11dec:	       nop
   11dee:	       nop
   11df0:	       addq.l #8,sp
   11df2:	       rts

00011df4 <showBoxes>:

void showBoxes () {
   11df4:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   11df6:	       move.l 168dc <allScreenRegions>,(sp)

	while (huntRegion) {
   11dfc:	/----- bra.w 11e98 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   11e00:	|  /-> movea.l (sp),a0
   11e02:	|  |   move.l 12(a0),d0
   11e06:	|  |   movea.l d0,a1
   11e08:	|  |   movea.l (sp),a0
   11e0a:	|  |   move.l 4(a0),d0
   11e0e:	|  |   move.l d0,d1
   11e10:	|  |   movea.l (sp),a0
   11e12:	|  |   move.l (a0),d0
   11e14:	|  |   move.l a1,-(sp)
   11e16:	|  |   move.l d1,-(sp)
   11e18:	|  |   move.l d0,-(sp)
   11e1a:	|  |   jsr 9b6c <drawVerticalLine>
   11e20:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   11e24:	|  |   movea.l (sp),a0
   11e26:	|  |   move.l 12(a0),d0
   11e2a:	|  |   movea.l d0,a1
   11e2c:	|  |   movea.l (sp),a0
   11e2e:	|  |   move.l 4(a0),d0
   11e32:	|  |   move.l d0,d1
   11e34:	|  |   movea.l (sp),a0
   11e36:	|  |   move.l 8(a0),d0
   11e3a:	|  |   move.l a1,-(sp)
   11e3c:	|  |   move.l d1,-(sp)
   11e3e:	|  |   move.l d0,-(sp)
   11e40:	|  |   jsr 9b6c <drawVerticalLine>
   11e46:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   11e4a:	|  |   movea.l (sp),a0
   11e4c:	|  |   move.l 8(a0),d0
   11e50:	|  |   movea.l d0,a1
   11e52:	|  |   movea.l (sp),a0
   11e54:	|  |   move.l 4(a0),d0
   11e58:	|  |   move.l d0,d1
   11e5a:	|  |   movea.l (sp),a0
   11e5c:	|  |   move.l (a0),d0
   11e5e:	|  |   move.l a1,-(sp)
   11e60:	|  |   move.l d1,-(sp)
   11e62:	|  |   move.l d0,-(sp)
   11e64:	|  |   jsr 9b46 <drawHorizontalLine>
   11e6a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   11e6e:	|  |   movea.l (sp),a0
   11e70:	|  |   move.l 8(a0),d0
   11e74:	|  |   movea.l d0,a1
   11e76:	|  |   movea.l (sp),a0
   11e78:	|  |   move.l 12(a0),d0
   11e7c:	|  |   move.l d0,d1
   11e7e:	|  |   movea.l (sp),a0
   11e80:	|  |   move.l (a0),d0
   11e82:	|  |   move.l a1,-(sp)
   11e84:	|  |   move.l d1,-(sp)
   11e86:	|  |   move.l d0,-(sp)
   11e88:	|  |   jsr 9b46 <drawHorizontalLine>
   11e8e:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   11e92:	|  |   movea.l (sp),a0
   11e94:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   11e98:	\--|-> tst.l (sp)
   11e9a:	   \-- bne.w 11e00 <showBoxes+0xc>
	}
   11e9e:	       nop
   11ea0:	       nop
   11ea2:	       addq.l #4,sp
   11ea4:	       rts

00011ea6 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   11ea6:	       lea -32(sp),sp
   11eaa:	       move.l d3,-(sp)
   11eac:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11eae:	       move.l 60(sp),d0
   11eb2:	       sub.l 52(sp),d0
   11eb6:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   11eba:	       move.l 64(sp),d0
   11ebe:	       sub.l 56(sp),d0
   11ec2:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11ec6:	       move.l 68(sp),d0
   11eca:	       sub.l 52(sp),d0
   11ece:	       move.l 36(sp),-(sp)
   11ed2:	       move.l d0,-(sp)
   11ed4:	       jsr 13858 <__mulsi3>
   11eda:	       addq.l #8,sp
   11edc:	       move.l d0,d2
   11ede:	       move.l 72(sp),d0
   11ee2:	       sub.l 56(sp),d0
   11ee6:	       move.l 32(sp),-(sp)
   11eea:	       move.l d0,-(sp)
   11eec:	       jsr 13858 <__mulsi3>
   11ef2:	       addq.l #8,sp
   11ef4:	       add.l d2,d0
   11ef6:	       move.l d0,-(sp)
   11ef8:	       jsr 132be <__floatsidf>
   11efe:	       addq.l #4,sp
   11f00:	       move.l d0,16(sp)
   11f04:	       move.l d1,20(sp)
   11f08:	       move.l 16(sp),24(sp)
   11f0e:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   11f14:	       move.l 36(sp),-(sp)
   11f18:	       move.l 40(sp),-(sp)
   11f1c:	       jsr 13858 <__mulsi3>
   11f22:	       addq.l #8,sp
   11f24:	       move.l d0,d2
   11f26:	       move.l 32(sp),-(sp)
   11f2a:	       move.l 36(sp),-(sp)
   11f2e:	       jsr 13858 <__mulsi3>
   11f34:	       addq.l #8,sp
   11f36:	       add.l d2,d0
   11f38:	       move.l d0,-(sp)
   11f3a:	       jsr 132be <__floatsidf>
   11f40:	       addq.l #4,sp
   11f42:	       move.l d1,-(sp)
   11f44:	       move.l d0,-(sp)
   11f46:	       move.l 36(sp),-(sp)
   11f4a:	       move.l 36(sp),-(sp)
   11f4e:	       jsr 13148 <__divdf3>
   11f54:	       lea 16(sp),sp
   11f58:	       move.l d0,8(sp)
   11f5c:	       move.l d1,12(sp)
   11f60:	       move.l 8(sp),24(sp)
   11f66:	       move.l 12(sp),28(sp)

	if (m < 0) {
   11f6c:	       clr.l -(sp)
   11f6e:	       clr.l -(sp)
   11f70:	       move.l 36(sp),-(sp)
   11f74:	       move.l 36(sp),-(sp)
   11f78:	       jsr 134d6 <__ltdf2>
   11f7e:	       lea 16(sp),sp
   11f82:	       tst.l d0
   11f84:	   /-- bge.s 11f9a <closestPointOnLine+0xf4>
		*closestX = x1;
   11f86:	   |   movea.l 44(sp),a0
   11f8a:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   11f8e:	   |   movea.l 48(sp),a0
   11f92:	   |   move.l 56(sp),(a0)
   11f96:	/--|-- bra.w 1207c <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   11f9a:	|  \-> clr.l -(sp)
   11f9c:	|      move.l #1072693248,-(sp)
   11fa2:	|      move.l 36(sp),-(sp)
   11fa6:	|      move.l 36(sp),-(sp)
   11faa:	|      jsr 1341c <__gtdf2>
   11fb0:	|      lea 16(sp),sp
   11fb4:	|      tst.l d0
   11fb6:	|  /-- ble.s 11fcc <closestPointOnLine+0x126>
		*closestX = x2;
   11fb8:	|  |   movea.l 44(sp),a0
   11fbc:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11fc0:	|  |   movea.l 48(sp),a0
   11fc4:	|  |   move.l 64(sp),(a0)
   11fc8:	+--|-- bra.w 1207c <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   11fcc:	|  \-> move.l 52(sp),-(sp)
   11fd0:	|      jsr 132be <__floatsidf>
   11fd6:	|      addq.l #4,sp
   11fd8:	|      move.l d0,d2
   11fda:	|      move.l d1,d3
   11fdc:	|      move.l 36(sp),-(sp)
   11fe0:	|      jsr 132be <__floatsidf>
   11fe6:	|      addq.l #4,sp
   11fe8:	|      move.l 28(sp),-(sp)
   11fec:	|      move.l 28(sp),-(sp)
   11ff0:	|      move.l d1,-(sp)
   11ff2:	|      move.l d0,-(sp)
   11ff4:	|      jsr 1334e <__muldf3>
   11ffa:	|      lea 16(sp),sp
   11ffe:	|      move.l d1,-(sp)
   12000:	|      move.l d0,-(sp)
   12002:	|      move.l d3,-(sp)
   12004:	|      move.l d2,-(sp)
   12006:	|      jsr 130e6 <__adddf3>
   1200c:	|      lea 16(sp),sp
   12010:	|      move.l d1,-(sp)
   12012:	|      move.l d0,-(sp)
   12014:	|      jsr 13256 <__fixdfsi>
   1201a:	|      addq.l #8,sp
   1201c:	|      movea.l 44(sp),a0
   12020:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   12022:	|      move.l 56(sp),-(sp)
   12026:	|      jsr 132be <__floatsidf>
   1202c:	|      addq.l #4,sp
   1202e:	|      move.l d0,d2
   12030:	|      move.l d1,d3
   12032:	|      move.l 32(sp),-(sp)
   12036:	|      jsr 132be <__floatsidf>
   1203c:	|      addq.l #4,sp
   1203e:	|      move.l 28(sp),-(sp)
   12042:	|      move.l 28(sp),-(sp)
   12046:	|      move.l d1,-(sp)
   12048:	|      move.l d0,-(sp)
   1204a:	|      jsr 1334e <__muldf3>
   12050:	|      lea 16(sp),sp
   12054:	|      move.l d1,-(sp)
   12056:	|      move.l d0,-(sp)
   12058:	|      move.l d3,-(sp)
   1205a:	|      move.l d2,-(sp)
   1205c:	|      jsr 130e6 <__adddf3>
   12062:	|      lea 16(sp),sp
   12066:	|      move.l d1,-(sp)
   12068:	|      move.l d0,-(sp)
   1206a:	|      jsr 13256 <__fixdfsi>
   12070:	|      addq.l #8,sp
   12072:	|      movea.l 48(sp),a0
   12076:	|      move.l d0,(a0)
		return TRUE;
   12078:	|      moveq #1,d0
   1207a:	|  /-- bra.s 1207e <closestPointOnLine+0x1d8>
	}
	return FALSE;
   1207c:	\--|-> clr.w d0
}
   1207e:	   \-> move.l (sp)+,d2
   12080:	       move.l (sp)+,d3
   12082:	       lea 32(sp),sp
   12086:	       rts

00012088 <drawFloor>:

void drawFloor() {
   12088:	                lea -12(sp),sp
   1208c:	                move.l d3,-(sp)
   1208e:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12090:	                clr.l 16(sp)
   12094:	   /----------- bra.w 122a8 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   12098:	/--|----------> movea.l 168e4 <currentFloor>,a0
   1209e:	|  |            move.l 12(a0),d1
   120a2:	|  |            move.l 16(sp),d0
   120a6:	|  |            lsl.l #3,d0
   120a8:	|  |            movea.l d1,a0
   120aa:	|  |            adda.l d0,a0
   120ac:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   120b0:	|  |            moveq #1,d0
   120b2:	|  |            cmp.l 8(sp),d0
   120b6:	|  |  /-------- bge.w 122a4 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   120ba:	|  |  |         moveq #1,d0
   120bc:	|  |  |         move.l d0,12(sp)
   120c0:	|  |  |     /-- bra.w 121ba <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   120c4:	|  |  |  /--|-> movea.l 168e4 <currentFloor>,a0
   120ca:	|  |  |  |  |   move.l 4(a0),d1
   120ce:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   120d4:	|  |  |  |  |   movea.l 12(a0),a0
   120d8:	|  |  |  |  |   move.l 16(sp),d0
   120dc:	|  |  |  |  |   lsl.l #3,d0
   120de:	|  |  |  |  |   adda.l d0,a0
   120e0:	|  |  |  |  |   movea.l 4(a0),a0
   120e4:	|  |  |  |  |   move.l 12(sp),d0
   120e8:	|  |  |  |  |   add.l d0,d0
   120ea:	|  |  |  |  |   add.l d0,d0
   120ec:	|  |  |  |  |   adda.l d0,a0
   120ee:	|  |  |  |  |   move.l (a0),d0
   120f0:	|  |  |  |  |   lsl.l #3,d0
   120f2:	|  |  |  |  |   movea.l d1,a0
   120f4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   120f6:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   120fa:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12100:	|  |  |  |  |   move.l 4(a0),d1
   12104:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   1210a:	|  |  |  |  |   movea.l 12(a0),a0
   1210e:	|  |  |  |  |   move.l 16(sp),d0
   12112:	|  |  |  |  |   lsl.l #3,d0
   12114:	|  |  |  |  |   adda.l d0,a0
   12116:	|  |  |  |  |   movea.l 4(a0),a0
   1211a:	|  |  |  |  |   move.l 12(sp),d0
   1211e:	|  |  |  |  |   add.l d0,d0
   12120:	|  |  |  |  |   add.l d0,d0
   12122:	|  |  |  |  |   adda.l d0,a0
   12124:	|  |  |  |  |   move.l (a0),d0
   12126:	|  |  |  |  |   lsl.l #3,d0
   12128:	|  |  |  |  |   movea.l d1,a0
   1212a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1212c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1212e:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12134:	|  |  |  |  |   move.l 4(a0),d1
   12138:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   1213e:	|  |  |  |  |   movea.l 12(a0),a0
   12142:	|  |  |  |  |   move.l 16(sp),d0
   12146:	|  |  |  |  |   lsl.l #3,d0
   12148:	|  |  |  |  |   adda.l d0,a0
   1214a:	|  |  |  |  |   movea.l 4(a0),a0
   1214e:	|  |  |  |  |   move.l 12(sp),d0
   12152:	|  |  |  |  |   addi.l #1073741823,d0
   12158:	|  |  |  |  |   add.l d0,d0
   1215a:	|  |  |  |  |   add.l d0,d0
   1215c:	|  |  |  |  |   adda.l d0,a0
   1215e:	|  |  |  |  |   move.l (a0),d0
   12160:	|  |  |  |  |   lsl.l #3,d0
   12162:	|  |  |  |  |   movea.l d1,a0
   12164:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12166:	|  |  |  |  |   move.l 4(a0),d1
   1216a:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12170:	|  |  |  |  |   move.l 4(a0),d3
   12174:	|  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   1217a:	|  |  |  |  |   movea.l 12(a0),a0
   1217e:	|  |  |  |  |   move.l 16(sp),d0
   12182:	|  |  |  |  |   lsl.l #3,d0
   12184:	|  |  |  |  |   adda.l d0,a0
   12186:	|  |  |  |  |   movea.l 4(a0),a0
   1218a:	|  |  |  |  |   move.l 12(sp),d0
   1218e:	|  |  |  |  |   addi.l #1073741823,d0
   12194:	|  |  |  |  |   add.l d0,d0
   12196:	|  |  |  |  |   add.l d0,d0
   12198:	|  |  |  |  |   adda.l d0,a0
   1219a:	|  |  |  |  |   move.l (a0),d0
   1219c:	|  |  |  |  |   lsl.l #3,d0
   1219e:	|  |  |  |  |   movea.l d3,a0
   121a0:	|  |  |  |  |   adda.l d0,a0
   121a2:	|  |  |  |  |   move.l (a0),d0
   121a4:	|  |  |  |  |   move.l d2,-(sp)
   121a6:	|  |  |  |  |   move.l a1,-(sp)
   121a8:	|  |  |  |  |   move.l d1,-(sp)
   121aa:	|  |  |  |  |   move.l d0,-(sp)
   121ac:	|  |  |  |  |   jsr 18b8 <drawLine>
   121b2:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   121b6:	|  |  |  |  |   addq.l #1,12(sp)
   121ba:	|  |  |  |  \-> move.l 12(sp),d0
   121be:	|  |  |  |      cmp.l 8(sp),d0
   121c2:	|  |  |  \----- blt.w 120c4 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   121c6:	|  |  |         movea.l 168e4 <currentFloor>,a0
   121cc:	|  |  |         move.l 4(a0),d1
   121d0:	|  |  |         movea.l 168e4 <currentFloor>,a0
   121d6:	|  |  |         movea.l 12(a0),a0
   121da:	|  |  |         move.l 16(sp),d0
   121de:	|  |  |         lsl.l #3,d0
   121e0:	|  |  |         adda.l d0,a0
   121e2:	|  |  |         movea.l 4(a0),a0
   121e6:	|  |  |         move.l 8(sp),d0
   121ea:	|  |  |         addi.l #1073741823,d0
   121f0:	|  |  |         add.l d0,d0
   121f2:	|  |  |         add.l d0,d0
   121f4:	|  |  |         adda.l d0,a0
   121f6:	|  |  |         move.l (a0),d0
   121f8:	|  |  |         lsl.l #3,d0
   121fa:	|  |  |         movea.l d1,a0
   121fc:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   121fe:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   12202:	|  |  |         movea.l 168e4 <currentFloor>,a0
   12208:	|  |  |         move.l 4(a0),d1
   1220c:	|  |  |         movea.l 168e4 <currentFloor>,a0
   12212:	|  |  |         movea.l 12(a0),a0
   12216:	|  |  |         move.l 16(sp),d0
   1221a:	|  |  |         lsl.l #3,d0
   1221c:	|  |  |         adda.l d0,a0
   1221e:	|  |  |         movea.l 4(a0),a0
   12222:	|  |  |         move.l 8(sp),d0
   12226:	|  |  |         addi.l #1073741823,d0
   1222c:	|  |  |         add.l d0,d0
   1222e:	|  |  |         add.l d0,d0
   12230:	|  |  |         adda.l d0,a0
   12232:	|  |  |         move.l (a0),d0
   12234:	|  |  |         lsl.l #3,d0
   12236:	|  |  |         movea.l d1,a0
   12238:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1223a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1223c:	|  |  |         movea.l 168e4 <currentFloor>,a0
   12242:	|  |  |         move.l 4(a0),d1
   12246:	|  |  |         movea.l 168e4 <currentFloor>,a0
   1224c:	|  |  |         movea.l 12(a0),a0
   12250:	|  |  |         move.l 16(sp),d0
   12254:	|  |  |         lsl.l #3,d0
   12256:	|  |  |         adda.l d0,a0
   12258:	|  |  |         movea.l 4(a0),a0
   1225c:	|  |  |         move.l (a0),d0
   1225e:	|  |  |         lsl.l #3,d0
   12260:	|  |  |         movea.l d1,a0
   12262:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12264:	|  |  |         move.l 4(a0),d1
   12268:	|  |  |         movea.l 168e4 <currentFloor>,a0
   1226e:	|  |  |         move.l 4(a0),d3
   12272:	|  |  |         movea.l 168e4 <currentFloor>,a0
   12278:	|  |  |         movea.l 12(a0),a0
   1227c:	|  |  |         move.l 16(sp),d0
   12280:	|  |  |         lsl.l #3,d0
   12282:	|  |  |         adda.l d0,a0
   12284:	|  |  |         movea.l 4(a0),a0
   12288:	|  |  |         move.l (a0),d0
   1228a:	|  |  |         lsl.l #3,d0
   1228c:	|  |  |         movea.l d3,a0
   1228e:	|  |  |         adda.l d0,a0
   12290:	|  |  |         move.l (a0),d0
   12292:	|  |  |         move.l d2,-(sp)
   12294:	|  |  |         move.l a1,-(sp)
   12296:	|  |  |         move.l d1,-(sp)
   12298:	|  |  |         move.l d0,-(sp)
   1229a:	|  |  |         jsr 18b8 <drawLine>
   122a0:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   122a4:	|  |  \-------> addq.l #1,16(sp)
   122a8:	|  \----------> movea.l 168e4 <currentFloor>,a0
   122ae:	|               move.l 8(a0),d0
   122b2:	|               cmp.l 16(sp),d0
   122b6:	\-------------- bgt.w 12098 <drawFloor+0x10>
        }
    }
}
   122ba:	                nop
   122bc:	                nop
   122be:	                move.l (sp)+,d2
   122c0:	                move.l (sp)+,d3
   122c2:	                lea 12(sp),sp
   122c6:	                rts

000122c8 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   122c8:	                      lea -12(sp),sp
    int sharedVertices = 0;
   122cc:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   122d0:	                      clr.l 4(sp)
   122d4:	   /----------------- bra.w 12366 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   122d8:	/--|----------------> clr.l (sp)
   122da:	|  |     /----------- bra.s 12356 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   122dc:	|  |  /--|----------> movea.l 16(sp),a0
   122e0:	|  |  |  |            move.l 4(a0),d1
   122e4:	|  |  |  |            move.l 4(sp),d0
   122e8:	|  |  |  |            add.l d0,d0
   122ea:	|  |  |  |            add.l d0,d0
   122ec:	|  |  |  |            movea.l d1,a0
   122ee:	|  |  |  |            adda.l d0,a0
   122f0:	|  |  |  |            move.l (a0),d1
   122f2:	|  |  |  |            movea.l 20(sp),a0
   122f6:	|  |  |  |            movea.l 4(a0),a0
   122fa:	|  |  |  |            move.l (sp),d0
   122fc:	|  |  |  |            add.l d0,d0
   122fe:	|  |  |  |            add.l d0,d0
   12300:	|  |  |  |            adda.l d0,a0
   12302:	|  |  |  |            move.l (a0),d0
   12304:	|  |  |  |            cmp.l d1,d0
   12306:	|  |  |  |  /-------- bne.s 12354 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   12308:	|  |  |  |  |         move.l 8(sp),d0
   1230c:	|  |  |  |  |         move.l d0,d1
   1230e:	|  |  |  |  |         addq.l #1,d1
   12310:	|  |  |  |  |         move.l d1,8(sp)
   12314:	|  |  |  |  |         tst.l d0
   12316:	|  |  |  |  |     /-- beq.s 12338 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   12318:	|  |  |  |  |     |   movea.l 16(sp),a0
   1231c:	|  |  |  |  |     |   move.l 4(a0),d1
   12320:	|  |  |  |  |     |   move.l 4(sp),d0
   12324:	|  |  |  |  |     |   add.l d0,d0
   12326:	|  |  |  |  |     |   add.l d0,d0
   12328:	|  |  |  |  |     |   movea.l d1,a0
   1232a:	|  |  |  |  |     |   adda.l d0,a0
   1232c:	|  |  |  |  |     |   move.l (a0),d0
   1232e:	|  |  |  |  |     |   movea.l 28(sp),a0
   12332:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   12334:	|  |  |  |  |     |   moveq #1,d0
   12336:	|  |  |  |  |  /--|-- bra.s 12376 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   12338:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1233c:	|  |  |  |  |  |      move.l 4(a0),d1
   12340:	|  |  |  |  |  |      move.l 4(sp),d0
   12344:	|  |  |  |  |  |      add.l d0,d0
   12346:	|  |  |  |  |  |      add.l d0,d0
   12348:	|  |  |  |  |  |      movea.l d1,a0
   1234a:	|  |  |  |  |  |      adda.l d0,a0
   1234c:	|  |  |  |  |  |      move.l (a0),d0
   1234e:	|  |  |  |  |  |      movea.l 24(sp),a0
   12352:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   12354:	|  |  |  |  \--|----> addq.l #1,(sp)
   12356:	|  |  |  \-----|----> movea.l 20(sp),a0
   1235a:	|  |  |        |      move.l (a0),d0
   1235c:	|  |  |        |      cmp.l (sp),d0
   1235e:	|  |  \--------|----- bgt.w 122dc <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   12362:	|  |           |      addq.l #1,4(sp)
   12366:	|  \-----------|----> movea.l 16(sp),a0
   1236a:	|              |      move.l (a0),d0
   1236c:	|              |      cmp.l 4(sp),d0
   12370:	\--------------|----- bgt.w 122d8 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   12374:	               |      clr.w d0
}
   12376:	               \----> lea 12(sp),sp
   1237a:	                      rts

0001237c <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1237c:	movea.l 168e4 <currentFloor>,a0
   12382:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   12386:	movea.l 168e4 <currentFloor>,a0
   1238c:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   12390:	movea.l 168e4 <currentFloor>,a0
   12396:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1239a:	movea.l 168e4 <currentFloor>,a0
   123a0:	clr.l 16(a0)
}
   123a4:	nop
   123a6:	rts

000123a8 <inFloor>:

int inFloor (int x, int y) {
   123a8:	          subq.l #8,sp
	int i, r = -1;
   123aa:	          moveq #-1,d0
   123ac:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   123ae:	          clr.l 4(sp)
   123b2:	   /----- bra.s 123e6 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   123b4:	/--|----> movea.l 168e4 <currentFloor>,a0
   123ba:	|  |      move.l 12(a0),d1
   123be:	|  |      move.l 4(sp),d0
   123c2:	|  |      lsl.l #3,d0
   123c4:	|  |      add.l d1,d0
   123c6:	|  |      move.l 16(sp),-(sp)
   123ca:	|  |      move.l 16(sp),-(sp)
   123ce:	|  |      move.l d0,-(sp)
   123d0:	|  |      jsr 125b2 <pointInFloorPolygon>
   123d6:	|  |      lea 12(sp),sp
   123da:	|  |      tst.w d0
   123dc:	|  |  /-- beq.s 123e2 <inFloor+0x3a>
			r = i;
   123de:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   123e2:	|  |  \-> addq.l #1,4(sp)
   123e6:	|  \----> movea.l 168e4 <currentFloor>,a0
   123ec:	|         move.l 8(a0),d0
   123f0:	|         cmp.l 4(sp),d0
   123f4:	\-------- bgt.s 123b4 <inFloor+0xc>

	return r;
   123f6:	          move.l (sp),d0
}
   123f8:	          addq.l #8,sp
   123fa:	          rts

000123fc <initFloor>:

BOOL initFloor () {
   123fc:	       lea -12(sp),sp
   12400:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   12402:	       moveq #20,d0
   12404:	       move.l d0,12(sp)
   12408:	       clr.l 8(sp)
   1240c:	       move.l 16784 <SysBase>,d0
   12412:	       movea.l d0,a6
   12414:	       move.l 12(sp),d0
   12418:	       move.l 8(sp),d1
   1241c:	       jsr -684(a6)
   12420:	       move.l d0,4(sp)
   12424:	       move.l 4(sp),d0
   12428:	       move.l d0,168e4 <currentFloor>

    if(currentFloor == 0) {
   1242e:	       move.l 168e4 <currentFloor>,d0
   12434:	/----- bne.s 12448 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   12436:	|      pea 15846 <custom.c.9a493ead+0x1096>
   1243c:	|      jsr 13046 <KPrintF>
   12442:	|      addq.l #4,sp
        return FALSE;
   12444:	|      clr.w d0
   12446:	|  /-- bra.s 12450 <initFloor+0x54>
    }

	noFloor ();
   12448:	\--|-> jsr 1237c <noFloor>
	return TRUE;
   1244e:	   |   moveq #1,d0
}
   12450:	   \-> movea.l (sp)+,a6
   12452:	       lea 12(sp),sp
   12456:	       rts

00012458 <killFloor>:

void killFloor () {
   12458:	       lea -24(sp),sp
   1245c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1245e:	       clr.l 24(sp)
   12462:	   /-- bra.s 124bc <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   12464:	/--|-> movea.l 168e4 <currentFloor>,a0
   1246a:	|  |   move.l 12(a0),d1
   1246e:	|  |   move.l 24(sp),d0
   12472:	|  |   lsl.l #3,d0
   12474:	|  |   movea.l d1,a0
   12476:	|  |   adda.l d0,a0
   12478:	|  |   move.l 4(a0),8(sp)
   1247e:	|  |   move.l 16784 <SysBase>,d0
   12484:	|  |   movea.l d0,a6
   12486:	|  |   movea.l 8(sp),a1
   1248a:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1248e:	|  |   movea.l 168e4 <currentFloor>,a0
   12494:	|  |   move.l 16(a0),d1
   12498:	|  |   move.l 24(sp),d0
   1249c:	|  |   add.l d0,d0
   1249e:	|  |   add.l d0,d0
   124a0:	|  |   movea.l d1,a0
   124a2:	|  |   adda.l d0,a0
   124a4:	|  |   move.l (a0),4(sp)
   124a8:	|  |   move.l 16784 <SysBase>,d0
   124ae:	|  |   movea.l d0,a6
   124b0:	|  |   movea.l 4(sp),a1
   124b4:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   124b8:	|  |   addq.l #1,24(sp)
   124bc:	|  \-> movea.l 168e4 <currentFloor>,a0
   124c2:	|      move.l 8(a0),d0
   124c6:	|      cmp.l 24(sp),d0
   124ca:	\----- bgt.s 12464 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   124cc:	       movea.l 168e4 <currentFloor>,a0
   124d2:	       move.l 12(a0),20(sp)
   124d8:	       move.l 16784 <SysBase>,d0
   124de:	       movea.l d0,a6
   124e0:	       movea.l 20(sp),a1
   124e4:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   124e8:	       movea.l 168e4 <currentFloor>,a0
   124ee:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   124f2:	       movea.l 168e4 <currentFloor>,a0
   124f8:	       move.l 4(a0),16(sp)
   124fe:	       move.l 16784 <SysBase>,d0
   12504:	       movea.l d0,a6
   12506:	       movea.l 16(sp),a1
   1250a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1250e:	       movea.l 168e4 <currentFloor>,a0
   12514:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   12518:	       movea.l 168e4 <currentFloor>,a0
   1251e:	       move.l 16(a0),12(sp)
   12524:	       move.l 16784 <SysBase>,d0
   1252a:	       movea.l d0,a6
   1252c:	       movea.l 12(sp),a1
   12530:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   12534:	       movea.l 168e4 <currentFloor>,a0
   1253a:	       clr.l 16(a0)
}
   1253e:	       nop
   12540:	       movea.l (sp)+,a6
   12542:	       lea 24(sp),sp
   12546:	       rts

00012548 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   12548:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1254c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   12550:	                   clr.l 4(sp)
   12554:	   /-------------- bra.s 125a0 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   12556:	/--|-------------> clr.l (sp)
   12558:	|  |     /-------- bra.s 12594 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1255a:	|  |  /--|-------> move.l 20(sp),d1
   1255e:	|  |  |  |         move.l 4(sp),d0
   12562:	|  |  |  |         add.l d0,d0
   12564:	|  |  |  |         add.l d0,d0
   12566:	|  |  |  |         movea.l d1,a0
   12568:	|  |  |  |         adda.l d0,a0
   1256a:	|  |  |  |         move.l (a0),d1
   1256c:	|  |  |  |         movea.l 28(sp),a0
   12570:	|  |  |  |         move.l (sp),d0
   12572:	|  |  |  |         add.l d0,d0
   12574:	|  |  |  |         add.l d0,d0
   12576:	|  |  |  |         adda.l d0,a0
   12578:	|  |  |  |         move.l (a0),d0
   1257a:	|  |  |  |         cmp.l d1,d0
   1257c:	|  |  |  |     /-- bne.s 12592 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1257e:	|  |  |  |     |   move.l 8(sp),d0
   12582:	|  |  |  |     |   move.l d0,d1
   12584:	|  |  |  |     |   addq.l #1,d1
   12586:	|  |  |  |     |   move.l d1,8(sp)
   1258a:	|  |  |  |     |   tst.l d0
   1258c:	|  |  |  |     +-- beq.s 12592 <polysShareSide+0x4a>
   1258e:	|  |  |  |     |   moveq #1,d0
   12590:	|  |  |  |  /--|-- bra.s 125ac <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   12592:	|  |  |  |  |  \-> addq.l #1,(sp)
   12594:	|  |  |  \--|----> move.l 24(sp),d0
   12598:	|  |  |     |      cmp.l (sp),d0
   1259a:	|  |  \-----|----- bgt.s 1255a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1259c:	|  |        |      addq.l #1,4(sp)
   125a0:	|  \--------|----> move.l 16(sp),d0
   125a4:	|           |      cmp.l 4(sp),d0
   125a8:	\-----------|----- bgt.s 12556 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   125aa:	            |      clr.w d0
}
   125ac:	            \----> lea 12(sp),sp
   125b0:	                   rts

000125b2 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   125b2:	             lea -28(sp),sp
   125b6:	             move.l d3,-(sp)
   125b8:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   125ba:	             clr.l 32(sp)
   125be:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   125c2:	             movea.l 40(sp),a0
   125c6:	             move.l (a0),d0
   125c8:	             move.l d0,d1
   125ca:	             subq.l #1,d1
   125cc:	             move.l d1,28(sp)
   125d0:	   /-------- bra.w 127ca <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   125d4:	/--|-------> movea.l 168e4 <currentFloor>,a0
   125da:	|  |         move.l 4(a0),d1
   125de:	|  |         movea.l 40(sp),a0
   125e2:	|  |         movea.l 4(a0),a0
   125e6:	|  |         move.l 32(sp),d0
   125ea:	|  |         add.l d0,d0
   125ec:	|  |         add.l d0,d0
   125ee:	|  |         adda.l d0,a0
   125f0:	|  |         move.l (a0),d0
   125f2:	|  |         lsl.l #3,d0
   125f4:	|  |         movea.l d1,a0
   125f6:	|  |         adda.l d0,a0
   125f8:	|  |         move.l (a0),d0
   125fa:	|  |         move.l d0,-(sp)
   125fc:	|  |         jsr 132fe <__floatsisf>
   12602:	|  |         addq.l #4,sp
   12604:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   12608:	|  |         movea.l 168e4 <currentFloor>,a0
   1260e:	|  |         move.l 4(a0),d1
   12612:	|  |         movea.l 40(sp),a0
   12616:	|  |         movea.l 4(a0),a0
   1261a:	|  |         move.l 32(sp),d0
   1261e:	|  |         add.l d0,d0
   12620:	|  |         add.l d0,d0
   12622:	|  |         adda.l d0,a0
   12624:	|  |         move.l (a0),d0
   12626:	|  |         lsl.l #3,d0
   12628:	|  |         movea.l d1,a0
   1262a:	|  |         adda.l d0,a0
   1262c:	|  |         move.l 4(a0),d0
   12630:	|  |         move.l d0,-(sp)
   12632:	|  |         jsr 132fe <__floatsisf>
   12638:	|  |         addq.l #4,sp
   1263a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1263e:	|  |         movea.l 168e4 <currentFloor>,a0
   12644:	|  |         move.l 4(a0),d1
   12648:	|  |         movea.l 40(sp),a0
   1264c:	|  |         movea.l 4(a0),a0
   12650:	|  |         move.l 28(sp),d0
   12654:	|  |         add.l d0,d0
   12656:	|  |         add.l d0,d0
   12658:	|  |         adda.l d0,a0
   1265a:	|  |         move.l (a0),d0
   1265c:	|  |         lsl.l #3,d0
   1265e:	|  |         movea.l d1,a0
   12660:	|  |         adda.l d0,a0
   12662:	|  |         move.l (a0),d0
   12664:	|  |         move.l d0,-(sp)
   12666:	|  |         jsr 132fe <__floatsisf>
   1266c:	|  |         addq.l #4,sp
   1266e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   12672:	|  |         movea.l 168e4 <currentFloor>,a0
   12678:	|  |         move.l 4(a0),d1
   1267c:	|  |         movea.l 40(sp),a0
   12680:	|  |         movea.l 4(a0),a0
   12684:	|  |         move.l 28(sp),d0
   12688:	|  |         add.l d0,d0
   1268a:	|  |         add.l d0,d0
   1268c:	|  |         adda.l d0,a0
   1268e:	|  |         move.l (a0),d0
   12690:	|  |         lsl.l #3,d0
   12692:	|  |         movea.l d1,a0
   12694:	|  |         adda.l d0,a0
   12696:	|  |         move.l 4(a0),d0
   1269a:	|  |         move.l d0,-(sp)
   1269c:	|  |         jsr 132fe <__floatsisf>
   126a2:	|  |         addq.l #4,sp
   126a4:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   126a8:	|  |         move.l 48(sp),-(sp)
   126ac:	|  |         jsr 132fe <__floatsisf>
   126b2:	|  |         addq.l #4,sp
   126b4:	|  |         move.l d0,-(sp)
   126b6:	|  |         move.l 20(sp),-(sp)
   126ba:	|  |         jsr 134a0 <__lesf2>
   126c0:	|  |         addq.l #8,sp
   126c2:	|  |         tst.l d0
   126c4:	|  |     /-- bgt.s 126e4 <pointInFloorPolygon+0x132>
   126c6:	|  |     |   move.l 48(sp),-(sp)
   126ca:	|  |     |   jsr 132fe <__floatsisf>
   126d0:	|  |     |   addq.l #4,sp
   126d2:	|  |     |   move.l d0,-(sp)
   126d4:	|  |     |   move.l 12(sp),-(sp)
   126d8:	|  |     |   jsr 1346a <__gtsf2>
   126de:	|  |     |   addq.l #8,sp
   126e0:	|  |     |   tst.l d0
   126e2:	|  |  /--|-- bgt.s 12724 <pointInFloorPolygon+0x172>
   126e4:	|  |  |  \-> move.l 48(sp),-(sp)
   126e8:	|  |  |      jsr 132fe <__floatsisf>
   126ee:	|  |  |      addq.l #4,sp
   126f0:	|  |  |      move.l d0,-(sp)
   126f2:	|  |  |      move.l 12(sp),-(sp)
   126f6:	|  |  |      jsr 134a0 <__lesf2>
   126fc:	|  |  |      addq.l #8,sp
   126fe:	|  |  |      tst.l d0
   12700:	|  |  |  /-- bgt.w 127ba <pointInFloorPolygon+0x208>
   12704:	|  |  |  |   move.l 48(sp),-(sp)
   12708:	|  |  |  |   jsr 132fe <__floatsisf>
   1270e:	|  |  |  |   addq.l #4,sp
   12710:	|  |  |  |   move.l d0,-(sp)
   12712:	|  |  |  |   move.l 20(sp),-(sp)
   12716:	|  |  |  |   jsr 1346a <__gtsf2>
   1271c:	|  |  |  |   addq.l #8,sp
   1271e:	|  |  |  |   tst.l d0
   12720:	|  |  |  +-- ble.w 127ba <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   12724:	|  |  \--|-> move.l 44(sp),-(sp)
   12728:	|  |     |   jsr 132fe <__floatsisf>
   1272e:	|  |     |   addq.l #4,sp
   12730:	|  |     |   move.l d0,d3
   12732:	|  |     |   move.l 20(sp),-(sp)
   12736:	|  |     |   move.l 16(sp),-(sp)
   1273a:	|  |     |   jsr 135f2 <__subsf3>
   12740:	|  |     |   addq.l #8,sp
   12742:	|  |     |   move.l d0,d2
   12744:	|  |     |   move.l 48(sp),-(sp)
   12748:	|  |     |   jsr 132fe <__floatsisf>
   1274e:	|  |     |   addq.l #4,sp
   12750:	|  |     |   move.l 16(sp),-(sp)
   12754:	|  |     |   move.l d0,-(sp)
   12756:	|  |     |   jsr 135f2 <__subsf3>
   1275c:	|  |     |   addq.l #8,sp
   1275e:	|  |     |   move.l d0,-(sp)
   12760:	|  |     |   move.l d2,-(sp)
   12762:	|  |     |   jsr 133b0 <__mulsf3>
   12768:	|  |     |   addq.l #8,sp
   1276a:	|  |     |   move.l d0,d2
   1276c:	|  |     |   move.l 16(sp),-(sp)
   12770:	|  |     |   move.l 12(sp),-(sp)
   12774:	|  |     |   jsr 135f2 <__subsf3>
   1277a:	|  |     |   addq.l #8,sp
   1277c:	|  |     |   move.l d0,-(sp)
   1277e:	|  |     |   move.l d2,-(sp)
   12780:	|  |     |   jsr 131aa <__divsf3>
   12786:	|  |     |   addq.l #8,sp
   12788:	|  |     |   move.l 20(sp),-(sp)
   1278c:	|  |     |   move.l d0,-(sp)
   1278e:	|  |     |   jsr 130b0 <__addsf3>
   12794:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   12796:	|  |     |   move.l d0,-(sp)
   12798:	|  |     |   move.l d3,-(sp)
   1279a:	|  |     |   jsr 13524 <__ltsf2>
   127a0:	|  |     |   addq.l #8,sp
   127a2:	|  |     |   tst.l d0
   127a4:	|  |     +-- bge.s 127ba <pointInFloorPolygon+0x208>

			c = !c;
   127a6:	|  |     |   tst.l 24(sp)
   127aa:	|  |     |   seq d0
   127ac:	|  |     |   neg.b d0
   127ae:	|  |     |   move.b d0,d0
   127b0:	|  |     |   andi.l #255,d0
   127b6:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   127ba:	|  |     \-> move.l 32(sp),d0
   127be:	|  |         move.l d0,d1
   127c0:	|  |         addq.l #1,d1
   127c2:	|  |         move.l d1,32(sp)
   127c6:	|  |         move.l d0,28(sp)
   127ca:	|  \-------> movea.l 40(sp),a0
   127ce:	|            move.l (a0),d0
   127d0:	|            cmp.l 32(sp),d0
   127d4:	\----------- bgt.w 125d4 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   127d8:	             tst.l 24(sp)
   127dc:	             sne d0
   127de:	             neg.b d0
   127e0:	             move.b d0,d0
   127e2:	             andi.w #255,d0
}
   127e6:	             move.l (sp)+,d2
   127e8:	             move.l (sp)+,d3
   127ea:	             lea 28(sp),sp
   127ee:	             rts

000127f0 <setFloor>:

BOOL setFloor (int fileNum) {
   127f0:	                               lea -132(sp),sp
   127f4:	                               move.l a6,-(sp)
   127f6:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   127f8:	                               jsr 12458 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   127fe:	                               move.l 144(sp),-(sp)
   12802:	                               jsr 44e8 <openFileFromNum>
   12808:	                               addq.l #4,sp
   1280a:	                               tst.l d0
   1280c:	                           /-- bne.s 12814 <setFloor+0x24>
   1280e:	                           |   clr.w d0
   12810:	/--------------------------|-- bra.w 12f60 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   12814:	|                          \-> movea.l 168e4 <currentFloor>,a0
   1281a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1281e:	|                              move.l 1676c <bigDataFile>,118(sp)
   12826:	|                              move.l 1678c <DOSBase>,d0
   1282c:	|                              movea.l d0,a6
   1282e:	|                              move.l 118(sp),d1
   12832:	|                              jsr -306(a6)
   12836:	|                              move.l d0,114(sp)
   1283a:	|                              move.l 114(sp),d0
   1283e:	|                              movea.l 168e4 <currentFloor>,a0
   12844:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   12848:	|                              movea.l 168e4 <currentFloor>,a0
   1284e:	|                              move.l 8(a0),d0
   12852:	|                              lsl.l #3,d0
   12854:	|                              move.l d0,110(sp)
   12858:	|                              clr.l 106(sp)
   1285c:	|                              move.l 16784 <SysBase>,d0
   12862:	|                              movea.l d0,a6
   12864:	|                              move.l 110(sp),d0
   12868:	|                              move.l 106(sp),d1
   1286c:	|                              jsr -684(a6)
   12870:	|                              move.l d0,102(sp)
   12874:	|                              move.l 102(sp),d0
   12878:	|                              movea.l 168e4 <currentFloor>,a0
   1287e:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   12882:	|                              movea.l 168e4 <currentFloor>,a0
   12888:	|                              move.l 12(a0),d0
   1288c:	|                          /-- bne.s 128a2 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1288e:	|                          |   pea 1586a <custom.c.9a493ead+0x10ba>
   12894:	|                          |   jsr 13046 <KPrintF>
   1289a:	|                          |   addq.l #4,sp
		return FALSE;
   1289c:	|                          |   clr.w d0
   1289e:	+--------------------------|-- bra.w 12f60 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   128a2:	|                          \-> clr.l 136(sp)
   128a6:	|                    /-------- bra.w 129be <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   128aa:	|                 /--|-------> move.l 1676c <bigDataFile>,26(sp)
   128b2:	|                 |  |         move.l 1678c <DOSBase>,d0
   128b8:	|                 |  |         movea.l d0,a6
   128ba:	|                 |  |         move.l 26(sp),d1
   128be:	|                 |  |         jsr -306(a6)
   128c2:	|                 |  |         move.l d0,22(sp)
   128c6:	|                 |  |         move.l 22(sp),d1
   128ca:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   128d0:	|                 |  |         movea.l 12(a0),a0
   128d4:	|                 |  |         move.l 136(sp),d0
   128d8:	|                 |  |         lsl.l #3,d0
   128da:	|                 |  |         adda.l d0,a0
   128dc:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   128de:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   128e4:	|                 |  |         move.l 12(a0),d1
   128e8:	|                 |  |         move.l 136(sp),d0
   128ec:	|                 |  |         lsl.l #3,d0
   128ee:	|                 |  |         movea.l d1,a0
   128f0:	|                 |  |         adda.l d0,a0
   128f2:	|                 |  |         move.l (a0),d0
   128f4:	|                 |  |         add.l d0,d0
   128f6:	|                 |  |         add.l d0,d0
   128f8:	|                 |  |         move.l d0,18(sp)
   128fc:	|                 |  |         clr.l 14(sp)
   12900:	|                 |  |         move.l 16784 <SysBase>,d0
   12906:	|                 |  |         movea.l d0,a6
   12908:	|                 |  |         move.l 18(sp),d0
   1290c:	|                 |  |         move.l 14(sp),d1
   12910:	|                 |  |         jsr -684(a6)
   12914:	|                 |  |         move.l d0,10(sp)
   12918:	|                 |  |         move.l 10(sp),d1
   1291c:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   12922:	|                 |  |         movea.l 12(a0),a0
   12926:	|                 |  |         move.l 136(sp),d0
   1292a:	|                 |  |         lsl.l #3,d0
   1292c:	|                 |  |         adda.l d0,a0
   1292e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   12932:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   12938:	|                 |  |         move.l 12(a0),d1
   1293c:	|                 |  |         move.l 136(sp),d0
   12940:	|                 |  |         lsl.l #3,d0
   12942:	|                 |  |         movea.l d1,a0
   12944:	|                 |  |         adda.l d0,a0
   12946:	|                 |  |         move.l 4(a0),d0
   1294a:	|                 |  |     /-- bne.s 12960 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1294c:	|                 |  |     |   pea 1586a <custom.c.9a493ead+0x10ba>
   12952:	|                 |  |     |   jsr 13046 <KPrintF>
   12958:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1295a:	|                 |  |     |   clr.w d0
   1295c:	+-----------------|--|-----|-- bra.w 12f60 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   12960:	|                 |  |     \-> clr.l 132(sp)
   12964:	|                 |  |     /-- bra.s 1299e <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   12966:	|                 |  |  /--|-> move.l 1676c <bigDataFile>,d1
   1296c:	|                 |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12972:	|                 |  |  |  |   movea.l 12(a0),a0
   12976:	|                 |  |  |  |   move.l 136(sp),d0
   1297a:	|                 |  |  |  |   lsl.l #3,d0
   1297c:	|                 |  |  |  |   adda.l d0,a0
   1297e:	|                 |  |  |  |   movea.l 4(a0),a0
   12982:	|                 |  |  |  |   move.l 132(sp),d0
   12986:	|                 |  |  |  |   add.l d0,d0
   12988:	|                 |  |  |  |   add.l d0,d0
   1298a:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1298e:	|                 |  |  |  |   move.l d1,-(sp)
   12990:	|                 |  |  |  |   jsr 6bc <get2bytes>
   12996:	|                 |  |  |  |   addq.l #4,sp
   12998:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1299a:	|                 |  |  |  |   addq.l #1,132(sp)
   1299e:	|                 |  |  |  \-> movea.l 168e4 <currentFloor>,a0
   129a4:	|                 |  |  |      move.l 12(a0),d1
   129a8:	|                 |  |  |      move.l 136(sp),d0
   129ac:	|                 |  |  |      lsl.l #3,d0
   129ae:	|                 |  |  |      movea.l d1,a0
   129b0:	|                 |  |  |      adda.l d0,a0
   129b2:	|                 |  |  |      move.l (a0),d0
   129b4:	|                 |  |  |      cmp.l 132(sp),d0
   129b8:	|                 |  |  \----- bgt.s 12966 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   129ba:	|                 |  |         addq.l #1,136(sp)
   129be:	|                 |  \-------> movea.l 168e4 <currentFloor>,a0
   129c4:	|                 |            move.l 8(a0),d0
   129c8:	|                 |            cmp.l 136(sp),d0
   129cc:	|                 \----------- bgt.w 128aa <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   129d0:	|                              move.l 1676c <bigDataFile>,d0
   129d6:	|                              move.l d0,-(sp)
   129d8:	|                              jsr 6bc <get2bytes>
   129de:	|                              addq.l #4,sp
   129e0:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   129e4:	|                              move.l 136(sp),d0
   129e8:	|                              lsl.l #3,d0
   129ea:	|                              move.l d0,98(sp)
   129ee:	|                              clr.l 94(sp)
   129f2:	|                              move.l 16784 <SysBase>,d0
   129f8:	|                              movea.l d0,a6
   129fa:	|                              move.l 98(sp),d0
   129fe:	|                              move.l 94(sp),d1
   12a02:	|                              jsr -684(a6)
   12a06:	|                              move.l d0,90(sp)
   12a0a:	|                              move.l 90(sp),d0
   12a0e:	|                              movea.l 168e4 <currentFloor>,a0
   12a14:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   12a18:	|                              movea.l 168e4 <currentFloor>,a0
   12a1e:	|                              move.l 4(a0),d0
   12a22:	|                          /-- bne.s 12a38 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   12a24:	|                          |   pea 1586a <custom.c.9a493ead+0x10ba>
   12a2a:	|                          |   jsr 13046 <KPrintF>
   12a30:	|                          |   addq.l #4,sp
		return FALSE;
   12a32:	|                          |   clr.w d0
   12a34:	+--------------------------|-- bra.w 12f60 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   12a38:	|                          \-> clr.l 132(sp)
   12a3c:	|                          /-- bra.s 12a90 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   12a3e:	|                       /--|-> move.l 1676c <bigDataFile>,d1
   12a44:	|                       |  |   movea.l 168e4 <currentFloor>,a0
   12a4a:	|                       |  |   movea.l 4(a0),a0
   12a4e:	|                       |  |   move.l 132(sp),d0
   12a52:	|                       |  |   lsl.l #3,d0
   12a54:	|                       |  |   lea (0,a0,d0.l),a2
   12a58:	|                       |  |   move.l d1,-(sp)
   12a5a:	|                       |  |   jsr 6bc <get2bytes>
   12a60:	|                       |  |   addq.l #4,sp
   12a62:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   12a64:	|                       |  |   move.l 1676c <bigDataFile>,d1
   12a6a:	|                       |  |   movea.l 168e4 <currentFloor>,a0
   12a70:	|                       |  |   movea.l 4(a0),a0
   12a74:	|                       |  |   move.l 132(sp),d0
   12a78:	|                       |  |   lsl.l #3,d0
   12a7a:	|                       |  |   lea (0,a0,d0.l),a2
   12a7e:	|                       |  |   move.l d1,-(sp)
   12a80:	|                       |  |   jsr 6bc <get2bytes>
   12a86:	|                       |  |   addq.l #4,sp
   12a88:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   12a8c:	|                       |  |   addq.l #1,132(sp)
   12a90:	|                       |  \-> move.l 132(sp),d0
   12a94:	|                       |      cmp.l 136(sp),d0
   12a98:	|                       \----- blt.s 12a3e <setFloor+0x24e>
	}

	finishAccess ();
   12a9a:	|                              jsr 43e0 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12aa0:	|                              movea.l 168e4 <currentFloor>,a0
   12aa6:	|                              move.l 8(a0),d0
   12aaa:	|                              add.l d0,d0
   12aac:	|                              add.l d0,d0
   12aae:	|                              move.l d0,86(sp)
   12ab2:	|                              clr.l 82(sp)
   12ab6:	|                              move.l 16784 <SysBase>,d0
   12abc:	|                              movea.l d0,a6
   12abe:	|                              move.l 86(sp),d0
   12ac2:	|                              move.l 82(sp),d1
   12ac6:	|                              jsr -684(a6)
   12aca:	|                              move.l d0,78(sp)
   12ace:	|                              move.l 78(sp),d0
   12ad2:	|                              movea.l 168e4 <currentFloor>,a0
   12ad8:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12adc:	|                              movea.l 168e4 <currentFloor>,a0
   12ae2:	|                              move.l 8(a0),d0
   12ae6:	|                              add.l d0,d0
   12ae8:	|                              add.l d0,d0
   12aea:	|                              move.l d0,74(sp)
   12aee:	|                              clr.l 70(sp)
   12af2:	|                              move.l 16784 <SysBase>,d0
   12af8:	|                              movea.l d0,a6
   12afa:	|                              move.l 74(sp),d0
   12afe:	|                              move.l 70(sp),d1
   12b02:	|                              jsr -684(a6)
   12b06:	|                              move.l d0,66(sp)
   12b0a:	|                              move.l 66(sp),d0
   12b0e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   12b12:	|                              movea.l 168e4 <currentFloor>,a0
   12b18:	|                              move.l 16(a0),d0
   12b1c:	|                          /-- bne.s 12b32 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   12b1e:	|                          |   pea 1586a <custom.c.9a493ead+0x10ba>
   12b24:	|                          |   jsr 13046 <KPrintF>
   12b2a:	|                          |   addq.l #4,sp
		return FALSE;
   12b2c:	|                          |   clr.w d0
   12b2e:	+--------------------------|-- bra.w 12f60 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12b32:	|                          \-> clr.l 136(sp)
   12b36:	|                    /-------- bra.w 12c5a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12b3a:	|                 /--|-------> movea.l 168e4 <currentFloor>,a0
   12b40:	|                 |  |         move.l 8(a0),d0
   12b44:	|                 |  |         add.l d0,d0
   12b46:	|                 |  |         add.l d0,d0
   12b48:	|                 |  |         move.l d0,50(sp)
   12b4c:	|                 |  |         clr.l 46(sp)
   12b50:	|                 |  |         move.l 16784 <SysBase>,d0
   12b56:	|                 |  |         movea.l d0,a6
   12b58:	|                 |  |         move.l 50(sp),d0
   12b5c:	|                 |  |         move.l 46(sp),d1
   12b60:	|                 |  |         jsr -684(a6)
   12b64:	|                 |  |         move.l d0,42(sp)
   12b68:	|                 |  |         move.l 42(sp),d0
   12b6c:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   12b72:	|                 |  |         movea.l 16(a0),a0
   12b76:	|                 |  |         move.l 136(sp),d1
   12b7a:	|                 |  |         add.l d1,d1
   12b7c:	|                 |  |         add.l d1,d1
   12b7e:	|                 |  |         adda.l d1,a0
   12b80:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12b82:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   12b88:	|                 |  |         move.l 8(a0),d0
   12b8c:	|                 |  |         add.l d0,d0
   12b8e:	|                 |  |         add.l d0,d0
   12b90:	|                 |  |         move.l d0,38(sp)
   12b94:	|                 |  |         clr.l 34(sp)
   12b98:	|                 |  |         move.l 16784 <SysBase>,d0
   12b9e:	|                 |  |         movea.l d0,a6
   12ba0:	|                 |  |         move.l 38(sp),d0
   12ba4:	|                 |  |         move.l 34(sp),d1
   12ba8:	|                 |  |         jsr -684(a6)
   12bac:	|                 |  |         move.l d0,30(sp)
   12bb0:	|                 |  |         move.l 30(sp),d1
   12bb4:	|                 |  |         move.l 136(sp),d0
   12bb8:	|                 |  |         add.l d0,d0
   12bba:	|                 |  |         add.l d0,d0
   12bbc:	|                 |  |         movea.l 62(sp),a0
   12bc0:	|                 |  |         adda.l d0,a0
   12bc2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   12bc4:	|                 |  |         movea.l 168e4 <currentFloor>,a0
   12bca:	|                 |  |         move.l 16(a0),d1
   12bce:	|                 |  |         move.l 136(sp),d0
   12bd2:	|                 |  |         add.l d0,d0
   12bd4:	|                 |  |         add.l d0,d0
   12bd6:	|                 |  |         movea.l d1,a0
   12bd8:	|                 |  |         adda.l d0,a0
   12bda:	|                 |  |         move.l (a0),d0
   12bdc:	|                 |  |     /-- bne.s 12bf2 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12bde:	|                 |  |     |   pea 1586a <custom.c.9a493ead+0x10ba>
   12be4:	|                 |  |     |   jsr 13046 <KPrintF>
   12bea:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   12bec:	|                 |  |     |   clr.w d0
   12bee:	+-----------------|--|-----|-- bra.w 12f60 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12bf2:	|                 |  |     \-> clr.l 132(sp)
   12bf6:	|                 |  |     /-- bra.s 12c46 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   12bf8:	|                 |  |  /--|-> movea.l 168e4 <currentFloor>,a0
   12bfe:	|                 |  |  |  |   move.l 16(a0),d1
   12c02:	|                 |  |  |  |   move.l 136(sp),d0
   12c06:	|                 |  |  |  |   add.l d0,d0
   12c08:	|                 |  |  |  |   add.l d0,d0
   12c0a:	|                 |  |  |  |   movea.l d1,a0
   12c0c:	|                 |  |  |  |   adda.l d0,a0
   12c0e:	|                 |  |  |  |   move.l (a0),d1
   12c10:	|                 |  |  |  |   move.l 132(sp),d0
   12c14:	|                 |  |  |  |   add.l d0,d0
   12c16:	|                 |  |  |  |   add.l d0,d0
   12c18:	|                 |  |  |  |   movea.l d1,a0
   12c1a:	|                 |  |  |  |   adda.l d0,a0
   12c1c:	|                 |  |  |  |   moveq #-1,d1
   12c1e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   12c20:	|                 |  |  |  |   move.l 136(sp),d0
   12c24:	|                 |  |  |  |   add.l d0,d0
   12c26:	|                 |  |  |  |   add.l d0,d0
   12c28:	|                 |  |  |  |   movea.l 62(sp),a0
   12c2c:	|                 |  |  |  |   adda.l d0,a0
   12c2e:	|                 |  |  |  |   move.l (a0),d1
   12c30:	|                 |  |  |  |   move.l 132(sp),d0
   12c34:	|                 |  |  |  |   add.l d0,d0
   12c36:	|                 |  |  |  |   add.l d0,d0
   12c38:	|                 |  |  |  |   movea.l d1,a0
   12c3a:	|                 |  |  |  |   adda.l d0,a0
   12c3c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c42:	|                 |  |  |  |   addq.l #1,132(sp)
   12c46:	|                 |  |  |  \-> movea.l 168e4 <currentFloor>,a0
   12c4c:	|                 |  |  |      move.l 8(a0),d0
   12c50:	|                 |  |  |      cmp.l 132(sp),d0
   12c54:	|                 |  |  \----- bgt.s 12bf8 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12c56:	|                 |  |         addq.l #1,136(sp)
   12c5a:	|                 |  \-------> movea.l 168e4 <currentFloor>,a0
   12c60:	|                 |            move.l 8(a0),d0
   12c64:	|                 |            cmp.l 136(sp),d0
   12c68:	|                 \----------- bgt.w 12b3a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12c6c:	|                              clr.l 136(sp)
   12c70:	|              /-------------- bra.w 12d76 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c74:	|           /--|-------------> clr.l 132(sp)
   12c78:	|           |  |     /-------- bra.w 12d60 <setFloor+0x570>
			if (i != j) {
   12c7c:	|           |  |  /--|-------> move.l 136(sp),d0
   12c80:	|           |  |  |  |         cmp.l 132(sp),d0
   12c84:	|           |  |  |  |     /-- beq.w 12d16 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   12c88:	|           |  |  |  |     |   movea.l 168e4 <currentFloor>,a0
   12c8e:	|           |  |  |  |     |   move.l 12(a0),d1
   12c92:	|           |  |  |  |     |   move.l 132(sp),d0
   12c96:	|           |  |  |  |     |   lsl.l #3,d0
   12c98:	|           |  |  |  |     |   movea.l d1,a1
   12c9a:	|           |  |  |  |     |   adda.l d0,a1
   12c9c:	|           |  |  |  |     |   movea.l 168e4 <currentFloor>,a0
   12ca2:	|           |  |  |  |     |   move.l 12(a0),d1
   12ca6:	|           |  |  |  |     |   move.l 136(sp),d0
   12caa:	|           |  |  |  |     |   lsl.l #3,d0
   12cac:	|           |  |  |  |     |   movea.l d1,a0
   12cae:	|           |  |  |  |     |   adda.l d0,a0
   12cb0:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12cb4:	|           |  |  |  |     |   move.l (a1),-(sp)
   12cb6:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   12cba:	|           |  |  |  |     |   move.l (a0),-(sp)
   12cbc:	|           |  |  |  |     |   jsr 12548 <polysShareSide>
   12cc2:	|           |  |  |  |     |   lea 16(sp),sp
   12cc6:	|           |  |  |  |     |   tst.w d0
   12cc8:	|           |  |  |  |  /--|-- beq.w 12d5c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   12ccc:	|           |  |  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12cd2:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12cd6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12cda:	|           |  |  |  |  |  |   add.l d0,d0
   12cdc:	|           |  |  |  |  |  |   add.l d0,d0
   12cde:	|           |  |  |  |  |  |   movea.l d1,a0
   12ce0:	|           |  |  |  |  |  |   adda.l d0,a0
   12ce2:	|           |  |  |  |  |  |   move.l (a0),d1
   12ce4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12ce8:	|           |  |  |  |  |  |   add.l d0,d0
   12cea:	|           |  |  |  |  |  |   add.l d0,d0
   12cec:	|           |  |  |  |  |  |   movea.l d1,a0
   12cee:	|           |  |  |  |  |  |   adda.l d0,a0
   12cf0:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   12cf4:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12cf8:	|           |  |  |  |  |  |   add.l d0,d0
   12cfa:	|           |  |  |  |  |  |   add.l d0,d0
   12cfc:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   12d00:	|           |  |  |  |  |  |   adda.l d0,a0
   12d02:	|           |  |  |  |  |  |   move.l (a0),d1
   12d04:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12d08:	|           |  |  |  |  |  |   add.l d0,d0
   12d0a:	|           |  |  |  |  |  |   add.l d0,d0
   12d0c:	|           |  |  |  |  |  |   movea.l d1,a0
   12d0e:	|           |  |  |  |  |  |   adda.l d0,a0
   12d10:	|           |  |  |  |  |  |   moveq #1,d1
   12d12:	|           |  |  |  |  |  |   move.l d1,(a0)
   12d14:	|           |  |  |  |  +--|-- bra.s 12d5c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   12d16:	|           |  |  |  |  |  \-> movea.l 168e4 <currentFloor>,a0
   12d1c:	|           |  |  |  |  |      move.l 16(a0),d1
   12d20:	|           |  |  |  |  |      move.l 136(sp),d0
   12d24:	|           |  |  |  |  |      add.l d0,d0
   12d26:	|           |  |  |  |  |      add.l d0,d0
   12d28:	|           |  |  |  |  |      movea.l d1,a0
   12d2a:	|           |  |  |  |  |      adda.l d0,a0
   12d2c:	|           |  |  |  |  |      move.l (a0),d1
   12d2e:	|           |  |  |  |  |      move.l 132(sp),d0
   12d32:	|           |  |  |  |  |      add.l d0,d0
   12d34:	|           |  |  |  |  |      add.l d0,d0
   12d36:	|           |  |  |  |  |      movea.l d1,a0
   12d38:	|           |  |  |  |  |      adda.l d0,a0
   12d3a:	|           |  |  |  |  |      moveq #-2,d0
   12d3c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   12d3e:	|           |  |  |  |  |      move.l 136(sp),d0
   12d42:	|           |  |  |  |  |      add.l d0,d0
   12d44:	|           |  |  |  |  |      add.l d0,d0
   12d46:	|           |  |  |  |  |      movea.l 62(sp),a0
   12d4a:	|           |  |  |  |  |      adda.l d0,a0
   12d4c:	|           |  |  |  |  |      move.l (a0),d1
   12d4e:	|           |  |  |  |  |      move.l 132(sp),d0
   12d52:	|           |  |  |  |  |      add.l d0,d0
   12d54:	|           |  |  |  |  |      add.l d0,d0
   12d56:	|           |  |  |  |  |      movea.l d1,a0
   12d58:	|           |  |  |  |  |      adda.l d0,a0
   12d5a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12d5c:	|           |  |  |  |  \----> addq.l #1,132(sp)
   12d60:	|           |  |  |  \-------> movea.l 168e4 <currentFloor>,a0
   12d66:	|           |  |  |            move.l 8(a0),d0
   12d6a:	|           |  |  |            cmp.l 132(sp),d0
   12d6e:	|           |  |  \----------- bgt.w 12c7c <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12d72:	|           |  |               addq.l #1,136(sp)
   12d76:	|           |  \-------------> movea.l 168e4 <currentFloor>,a0
   12d7c:	|           |                  move.l 8(a0),d0
   12d80:	|           |                  cmp.l 136(sp),d0
   12d84:	|           \----------------- bgt.w 12c74 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   12d88:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   12d8c:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   12d90:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12d94:	|  |                           clr.l 136(sp)
   12d98:	|  |     /-------------------- bra.w 12eee <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12d9c:	|  |  /--|-------------------> clr.l 132(sp)
   12da0:	|  |  |  |     /-------------- bra.w 12ed8 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   12da4:	|  |  |  |  /--|-------------> movea.l 168e4 <currentFloor>,a0
   12daa:	|  |  |  |  |  |               move.l 16(a0),d1
   12dae:	|  |  |  |  |  |               move.l 136(sp),d0
   12db2:	|  |  |  |  |  |               add.l d0,d0
   12db4:	|  |  |  |  |  |               add.l d0,d0
   12db6:	|  |  |  |  |  |               movea.l d1,a0
   12db8:	|  |  |  |  |  |               adda.l d0,a0
   12dba:	|  |  |  |  |  |               move.l (a0),d1
   12dbc:	|  |  |  |  |  |               move.l 132(sp),d0
   12dc0:	|  |  |  |  |  |               add.l d0,d0
   12dc2:	|  |  |  |  |  |               add.l d0,d0
   12dc4:	|  |  |  |  |  |               movea.l d1,a0
   12dc6:	|  |  |  |  |  |               adda.l d0,a0
   12dc8:	|  |  |  |  |  |               move.l (a0),d0
   12dca:	|  |  |  |  |  |               moveq #-1,d1
   12dcc:	|  |  |  |  |  |               cmp.l d0,d1
   12dce:	|  |  |  |  |  |  /----------- bne.w 12ed4 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12dd2:	|  |  |  |  |  |  |            clr.l 122(sp)
   12dd6:	|  |  |  |  |  |  |     /----- bra.w 12ec2 <setFloor+0x6d2>
						if (d != i && d != j) {
   12dda:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12dde:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12de2:	|  |  |  |  |  |  |  |  |  /-- beq.w 12ebe <setFloor+0x6ce>
   12de6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   12dea:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   12dee:	|  |  |  |  |  |  |  |  |  +-- beq.w 12ebe <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   12df2:	|  |  |  |  |  |  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12df8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12dfc:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12e00:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e02:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e04:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e06:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e08:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12e0a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12e0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e10:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e12:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e14:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e16:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   12e18:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   12e1c:	|  |  |  |  |  |  |  |  |  +-- bne.w 12ebe <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   12e20:	|  |  |  |  |  |  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12e26:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12e2a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12e2e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e30:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e32:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e34:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e36:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12e38:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12e3c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e40:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e42:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e44:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   12e46:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12ebe <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   12e48:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12e4c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e4e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e50:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12e54:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e56:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12e58:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12e5c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e60:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e62:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e64:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   12e66:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   12e6a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12ebe <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   12e6c:	|  |  |  |  |  |  |  |  |  |   movea.l 168e4 <currentFloor>,a0
   12e72:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12e76:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12e7a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e7c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e7e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e80:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e82:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12e84:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12e88:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e8a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e8c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12e8e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12e90:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   12e94:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12e98:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e9a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12e9c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12ea0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12ea2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12ea4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12ea8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12eaa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12eac:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12eae:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12eb0:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12eb4:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12eb6:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   12eb8:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12ebe:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12ec2:	|  |  |  |  |  |  |  |  \----> movea.l 168e4 <currentFloor>,a0
   12ec8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   12ecc:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12ed0:	|  |  |  |  |  |  |  \-------- bgt.w 12dda <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12ed4:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   12ed8:	|  |  |  |  |  \-------------> movea.l 168e4 <currentFloor>,a0
   12ede:	|  |  |  |  |                  move.l 8(a0),d0
   12ee2:	|  |  |  |  |                  cmp.l 132(sp),d0
   12ee6:	|  |  |  |  \----------------- bgt.w 12da4 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12eea:	|  |  |  |                     addq.l #1,136(sp)
   12eee:	|  |  |  \-------------------> movea.l 168e4 <currentFloor>,a0
   12ef4:	|  |  |                        move.l 8(a0),d0
   12ef8:	|  |  |                        cmp.l 136(sp),d0
   12efc:	|  |  \----------------------- bgt.w 12d9c <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   12f00:	|  |                           tst.w 130(sp)
   12f04:	|  \-------------------------- bne.w 12d8c <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12f08:	|                              clr.l 136(sp)
   12f0c:	|                          /-- bra.s 12f34 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   12f0e:	|                       /--|-> move.l 136(sp),d0
   12f12:	|                       |  |   add.l d0,d0
   12f14:	|                       |  |   add.l d0,d0
   12f16:	|                       |  |   movea.l 62(sp),a0
   12f1a:	|                       |  |   adda.l d0,a0
   12f1c:	|                       |  |   move.l (a0),54(sp)
   12f20:	|                       |  |   move.l 16784 <SysBase>,d0
   12f26:	|                       |  |   movea.l d0,a6
   12f28:	|                       |  |   movea.l 54(sp),a1
   12f2c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12f30:	|                       |  |   addq.l #1,136(sp)
   12f34:	|                       |  \-> movea.l 168e4 <currentFloor>,a0
   12f3a:	|                       |      move.l 8(a0),d0
   12f3e:	|                       |      cmp.l 136(sp),d0
   12f42:	|                       \----- bgt.s 12f0e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12f44:	|                              move.l 62(sp),58(sp)
   12f4a:	|                              move.l 16784 <SysBase>,d0
   12f50:	|                              movea.l d0,a6
   12f52:	|                              movea.l 58(sp),a1
   12f56:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   12f5a:	|                              clr.l 62(sp)

	return TRUE;
   12f5e:	|                              moveq #1,d0
}
   12f60:	\----------------------------> movea.l (sp)+,a2
   12f62:	                               movea.l (sp)+,a6
   12f64:	                               lea 132(sp),sp
   12f68:	                               rts

00012f6a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   12f6a:	jsr 12458 <killFloor>
	noFloor ();
   12f70:	jsr 1237c <noFloor>
   12f76:	nop
   12f78:	rts

00012f7a <WaitVbl>:
void WaitVbl() {
   12f7a:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12f7c:	   /-> movea.l #14675972,a0
   12f82:	   |   move.l (a0),d0
   12f84:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   12f86:	   |   move.l (sp),d0
   12f88:	   |   andi.l #130816,d0
   12f8e:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   12f90:	   |   move.l (sp),d0
   12f92:	   |   cmpi.l #76800,d0
   12f98:	   \-- beq.s 12f7c <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12f9a:	/----> movea.l #14675972,a0
   12fa0:	|      move.l (a0),d0
   12fa2:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   12fa6:	|      move.l 4(sp),d0
   12faa:	|      andi.l #130816,d0
   12fb0:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   12fb4:	|      move.l 4(sp),d0
   12fb8:	|      cmpi.l #76800,d0
   12fbe:	|  /-- beq.s 12fc2 <WaitVbl+0x48>
	while (1) {
   12fc0:	\--|-- bra.s 12f9a <WaitVbl+0x20>
			break;
   12fc2:	   \-> nop
}
   12fc4:	       nop
   12fc6:	       addq.l #8,sp
   12fc8:	       rts

00012fca <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12fca:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   12fcc:	       move.l 8(sp),(sp)
	while(len-- > 0)
   12fd0:	   /-- bra.s 12fe2 <memset+0x18>
		*ptr++ = val;
   12fd2:	/--|-> move.l (sp),d0
   12fd4:	|  |   move.l d0,d1
   12fd6:	|  |   addq.l #1,d1
   12fd8:	|  |   move.l d1,(sp)
   12fda:	|  |   move.l 12(sp),d1
   12fde:	|  |   movea.l d0,a0
   12fe0:	|  |   move.b d1,(a0)
	while(len-- > 0)
   12fe2:	|  \-> move.l 16(sp),d0
   12fe6:	|      move.l d0,d1
   12fe8:	|      subq.l #1,d1
   12fea:	|      move.l d1,16(sp)
   12fee:	|      tst.l d0
   12ff0:	\----- bne.s 12fd2 <memset+0x8>
	return dest;
   12ff2:	       move.l 8(sp),d0
}
   12ff6:	       addq.l #4,sp
   12ff8:	       rts

00012ffa <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   12ffa:	       subq.l #8,sp
   12ffc:	       move.l d2,-(sp)
	char *d = (char *)dest;
   12ffe:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   13004:	       move.l 20(sp),4(sp)
	while(len--)
   1300a:	   /-- bra.s 1302c <memcpy+0x32>
		*d++ = *s++;
   1300c:	/--|-> move.l 4(sp),d1
   13010:	|  |   move.l d1,d0
   13012:	|  |   addq.l #1,d0
   13014:	|  |   move.l d0,4(sp)
   13018:	|  |   move.l 8(sp),d0
   1301c:	|  |   move.l d0,d2
   1301e:	|  |   addq.l #1,d2
   13020:	|  |   move.l d2,8(sp)
   13024:	|  |   movea.l d1,a0
   13026:	|  |   move.b (a0),d1
   13028:	|  |   movea.l d0,a0
   1302a:	|  |   move.b d1,(a0)
	while(len--)
   1302c:	|  \-> move.l 24(sp),d0
   13030:	|      move.l d0,d1
   13032:	|      subq.l #1,d1
   13034:	|      move.l d1,24(sp)
   13038:	|      tst.l d0
   1303a:	\----- bne.s 1300c <memcpy+0x12>
	return dest;
   1303c:	       move.l 16(sp),d0
}
   13040:	       move.l (sp)+,d2
   13042:	       addq.l #8,sp
   13044:	       rts

00013046 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   13046:	       lea -128(sp),sp
   1304a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1304e:	       move.w f0ff60 <gcc8_c_support.c.a78f820e+0xecea02>,d0
   13054:	       cmpi.w #20153,d0
   13058:	   /-- beq.s 1307c <KPrintF+0x36>
   1305a:	   |   cmpi.w #-24562,d0
   1305e:	   +-- beq.s 1307c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   13060:	   |   movea.l 16784 <SysBase>,a6
   13066:	   |   movea.l 144(sp),a0
   1306a:	   |   lea 148(sp),a1
   1306e:	   |   lea 13960 <KPutCharX>,a2
   13074:	   |   suba.l a3,a3
   13076:	   |   jsr -522(a6)
}
   1307a:	/--|-- bra.s 130a6 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1307c:	|  \-> movea.l 16784 <SysBase>,a6
   13082:	|      movea.l 144(sp),a0
   13086:	|      lea 148(sp),a1
   1308a:	|      lea 1396e <PutChar>,a2
   13090:	|      lea 12(sp),a3
   13094:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   13098:	|      move.l a3,-(sp)
   1309a:	|      pea 56 <_start+0x56>
   1309e:	|      jsr f0ff60 <gcc8_c_support.c.a78f820e+0xecea02>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   130a4:	|      addq.l #8,sp
}
   130a6:	\----> movem.l (sp)+,a2-a3/a6
   130aa:	       lea 128(sp),sp
   130ae:	       rts

000130b0 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   130b0:	lea -12(sp),sp
   130b4:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   130b6:	move.l 20(sp),12(sp)
   130bc:	move.l 24(sp),8(sp)
   130c2:	move.l 16794 <MathIeeeSingBasBase>,d0
   130c8:	movea.l d0,a6
   130ca:	move.l 12(sp),d0
   130ce:	move.l 8(sp),d1
   130d2:	jsr -66(a6)
   130d6:	move.l d0,4(sp)
   130da:	move.l 4(sp),d0
}
   130de:	movea.l (sp)+,a6
   130e0:	lea 12(sp),sp
   130e4:	rts

000130e6 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   130e6:	lea -32(sp),sp
   130ea:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   130ee:	move.l 48(sp),36(sp)
   130f4:	move.l 52(sp),40(sp)
   130fa:	move.l 56(sp),28(sp)
   13100:	move.l 60(sp),32(sp)
   13106:	move.l 1679c <MathIeeeDoubBasBase>,d0
   1310c:	movea.l d0,a6
   1310e:	move.l 36(sp),d0
   13112:	move.l 40(sp),d1
   13116:	move.l 28(sp),d2
   1311a:	move.l 32(sp),d3
   1311e:	jsr -66(a6)
   13122:	move.l d0,12(sp)
   13126:	move.l d1,16(sp)
   1312a:	move.l 12(sp),20(sp)
   13130:	move.l 16(sp),24(sp)
   13136:	move.l 20(sp),d0
   1313a:	move.l 24(sp),d1
}
   1313e:	movem.l (sp)+,d2-d3/a6
   13142:	lea 32(sp),sp
   13146:	rts

00013148 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   13148:	lea -32(sp),sp
   1314c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   13150:	move.l 48(sp),36(sp)
   13156:	move.l 52(sp),40(sp)
   1315c:	move.l 56(sp),28(sp)
   13162:	move.l 60(sp),32(sp)
   13168:	move.l 1679c <MathIeeeDoubBasBase>,d0
   1316e:	movea.l d0,a6
   13170:	move.l 36(sp),d0
   13174:	move.l 40(sp),d1
   13178:	move.l 28(sp),d2
   1317c:	move.l 32(sp),d3
   13180:	jsr -84(a6)
   13184:	move.l d0,12(sp)
   13188:	move.l d1,16(sp)
   1318c:	move.l 12(sp),20(sp)
   13192:	move.l 16(sp),24(sp)
   13198:	move.l 20(sp),d0
   1319c:	move.l 24(sp),d1
}
   131a0:	movem.l (sp)+,d2-d3/a6
   131a4:	lea 32(sp),sp
   131a8:	rts

000131aa <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   131aa:	lea -12(sp),sp
   131ae:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   131b0:	move.l 20(sp),12(sp)
   131b6:	move.l 24(sp),8(sp)
   131bc:	move.l 16794 <MathIeeeSingBasBase>,d0
   131c2:	movea.l d0,a6
   131c4:	move.l 12(sp),d0
   131c8:	move.l 8(sp),d1
   131cc:	jsr -84(a6)
   131d0:	move.l d0,4(sp)
   131d4:	move.l 4(sp),d0
}
   131d8:	movea.l (sp)+,a6
   131da:	lea 12(sp),sp
   131de:	rts

000131e0 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   131e0:	lea -12(sp),sp
   131e4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   131e6:	move.l 20(sp),12(sp)
   131ec:	move.l 24(sp),8(sp)
   131f2:	move.l 16794 <MathIeeeSingBasBase>,d0
   131f8:	movea.l d0,a6
   131fa:	move.l 12(sp),d0
   131fe:	move.l 8(sp),d1
   13202:	jsr -42(a6)
   13206:	move.l d0,4(sp)
   1320a:	move.l 4(sp),d0
}
   1320e:	movea.l (sp)+,a6
   13210:	lea 12(sp),sp
   13214:	rts

00013216 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   13216:	lea -20(sp),sp
   1321a:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1321c:	move.l 28(sp),20(sp)
   13222:	move.l 167a0 <MathIeeeDoubTransBase>,d0
   13228:	movea.l d0,a6
   1322a:	move.l 20(sp),d0
   1322e:	jsr -108(a6)
   13232:	move.l d0,4(sp)
   13236:	move.l d1,8(sp)
   1323a:	move.l 4(sp),12(sp)
   13240:	move.l 8(sp),16(sp)
   13246:	move.l 12(sp),d0
   1324a:	move.l 16(sp),d1
}
   1324e:	movea.l (sp)+,a6
   13250:	lea 20(sp),sp
   13254:	rts

00013256 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   13256:	lea -12(sp),sp
   1325a:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1325c:	move.l 20(sp),8(sp)
   13262:	move.l 24(sp),12(sp)
   13268:	move.l 1679c <MathIeeeDoubBasBase>,d0
   1326e:	movea.l d0,a6
   13270:	move.l 8(sp),d0
   13274:	move.l 12(sp),d1
   13278:	jsr -30(a6)
   1327c:	move.l d0,4(sp)
   13280:	move.l 4(sp),d0
   13284:	move.l d0,-(sp)
   13286:	jsr 132be <__floatsidf>
   1328c:	addq.l #4,sp
}
   1328e:	movea.l (sp)+,a6
   13290:	lea 12(sp),sp
   13294:	rts

00013296 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   13296:	subq.l #8,sp
   13298:	move.l a6,-(sp)
	return IEEESPFix(value);
   1329a:	move.l 16(sp),8(sp)
   132a0:	move.l 16794 <MathIeeeSingBasBase>,d0
   132a6:	movea.l d0,a6
   132a8:	move.l 8(sp),d0
   132ac:	jsr -30(a6)
   132b0:	move.l d0,4(sp)
   132b4:	move.l 4(sp),d0
}
   132b8:	movea.l (sp)+,a6
   132ba:	addq.l #8,sp
   132bc:	rts

000132be <__floatsidf>:


DOUBLE __floatsidf (int i) {
   132be:	lea -20(sp),sp
   132c2:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   132c4:	move.l 28(sp),20(sp)
   132ca:	move.l 1679c <MathIeeeDoubBasBase>,d0
   132d0:	movea.l d0,a6
   132d2:	move.l 20(sp),d0
   132d6:	jsr -36(a6)
   132da:	move.l d0,4(sp)
   132de:	move.l d1,8(sp)
   132e2:	move.l 4(sp),12(sp)
   132e8:	move.l 8(sp),16(sp)
   132ee:	move.l 12(sp),d0
   132f2:	move.l 16(sp),d1
}
   132f6:	movea.l (sp)+,a6
   132f8:	lea 20(sp),sp
   132fc:	rts

000132fe <__floatsisf>:

FLOAT __floatsisf(int i) {
   132fe:	subq.l #8,sp
   13300:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   13302:	move.l 16(sp),8(sp)
   13308:	move.l 16794 <MathIeeeSingBasBase>,d0
   1330e:	movea.l d0,a6
   13310:	move.l 8(sp),d0
   13314:	jsr -36(a6)
   13318:	move.l d0,4(sp)
   1331c:	move.l 4(sp),d0
}
   13320:	movea.l (sp)+,a6
   13322:	addq.l #8,sp
   13324:	rts

00013326 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   13326:	subq.l #8,sp
   13328:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1332a:	move.l 16(sp),8(sp)
   13330:	move.l 16794 <MathIeeeSingBasBase>,d0
   13336:	movea.l d0,a6
   13338:	move.l 8(sp),d0
   1333c:	jsr -36(a6)
   13340:	move.l d0,4(sp)
   13344:	move.l 4(sp),d0
}
   13348:	movea.l (sp)+,a6
   1334a:	addq.l #8,sp
   1334c:	rts

0001334e <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1334e:	lea -32(sp),sp
   13352:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   13356:	move.l 48(sp),36(sp)
   1335c:	move.l 52(sp),40(sp)
   13362:	move.l 56(sp),28(sp)
   13368:	move.l 60(sp),32(sp)
   1336e:	move.l 1679c <MathIeeeDoubBasBase>,d0
   13374:	movea.l d0,a6
   13376:	move.l 36(sp),d0
   1337a:	move.l 40(sp),d1
   1337e:	move.l 28(sp),d2
   13382:	move.l 32(sp),d3
   13386:	jsr -78(a6)
   1338a:	move.l d0,12(sp)
   1338e:	move.l d1,16(sp)
   13392:	move.l 12(sp),20(sp)
   13398:	move.l 16(sp),24(sp)
   1339e:	move.l 20(sp),d0
   133a2:	move.l 24(sp),d1
}
   133a6:	movem.l (sp)+,d2-d3/a6
   133aa:	lea 32(sp),sp
   133ae:	rts

000133b0 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   133b0:	lea -12(sp),sp
   133b4:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   133b6:	move.l 20(sp),12(sp)
   133bc:	move.l 24(sp),8(sp)
   133c2:	move.l 16794 <MathIeeeSingBasBase>,d0
   133c8:	movea.l d0,a6
   133ca:	move.l 12(sp),d0
   133ce:	move.l 8(sp),d1
   133d2:	jsr -78(a6)
   133d6:	move.l d0,4(sp)
   133da:	move.l 4(sp),d0
}
   133de:	movea.l (sp)+,a6
   133e0:	lea 12(sp),sp
   133e4:	rts

000133e6 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   133e6:	lea -12(sp),sp
   133ea:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   133ec:	move.l 20(sp),12(sp)
   133f2:	move.l 24(sp),8(sp)
   133f8:	move.l 16794 <MathIeeeSingBasBase>,d0
   133fe:	movea.l d0,a6
   13400:	move.l 12(sp),d0
   13404:	move.l 8(sp),d1
   13408:	jsr -42(a6)
   1340c:	move.l d0,4(sp)
   13410:	move.l 4(sp),d0
}
   13414:	movea.l (sp)+,a6
   13416:	lea 12(sp),sp
   1341a:	rts

0001341c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1341c:	lea -20(sp),sp
   13420:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13424:	move.l 36(sp),24(sp)
   1342a:	move.l 40(sp),28(sp)
   13430:	move.l 44(sp),16(sp)
   13436:	move.l 48(sp),20(sp)
   1343c:	move.l 1679c <MathIeeeDoubBasBase>,d0
   13442:	movea.l d0,a6
   13444:	move.l 24(sp),d0
   13448:	move.l 28(sp),d1
   1344c:	move.l 16(sp),d2
   13450:	move.l 20(sp),d3
   13454:	jsr -42(a6)
   13458:	move.l d0,12(sp)
   1345c:	move.l 12(sp),d0
}
   13460:	movem.l (sp)+,d2-d3/a6
   13464:	lea 20(sp),sp
   13468:	rts

0001346a <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1346a:	lea -12(sp),sp
   1346e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13470:	move.l 20(sp),12(sp)
   13476:	move.l 24(sp),8(sp)
   1347c:	move.l 16794 <MathIeeeSingBasBase>,d0
   13482:	movea.l d0,a6
   13484:	move.l 12(sp),d0
   13488:	move.l 8(sp),d1
   1348c:	jsr -42(a6)
   13490:	move.l d0,4(sp)
   13494:	move.l 4(sp),d0
}
   13498:	movea.l (sp)+,a6
   1349a:	lea 12(sp),sp
   1349e:	rts

000134a0 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   134a0:	lea -12(sp),sp
   134a4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   134a6:	move.l 20(sp),12(sp)
   134ac:	move.l 24(sp),8(sp)
   134b2:	move.l 16794 <MathIeeeSingBasBase>,d0
   134b8:	movea.l d0,a6
   134ba:	move.l 12(sp),d0
   134be:	move.l 8(sp),d1
   134c2:	jsr -42(a6)
   134c6:	move.l d0,4(sp)
   134ca:	move.l 4(sp),d0
}
   134ce:	movea.l (sp)+,a6
   134d0:	lea 12(sp),sp
   134d4:	rts

000134d6 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   134d6:	lea -20(sp),sp
   134da:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   134de:	move.l 36(sp),24(sp)
   134e4:	move.l 40(sp),28(sp)
   134ea:	move.l 44(sp),16(sp)
   134f0:	move.l 48(sp),20(sp)
   134f6:	move.l 1679c <MathIeeeDoubBasBase>,d0
   134fc:	movea.l d0,a6
   134fe:	move.l 24(sp),d0
   13502:	move.l 28(sp),d1
   13506:	move.l 16(sp),d2
   1350a:	move.l 20(sp),d3
   1350e:	jsr -42(a6)
   13512:	move.l d0,12(sp)
   13516:	move.l 12(sp),d0
}
   1351a:	movem.l (sp)+,d2-d3/a6
   1351e:	lea 20(sp),sp
   13522:	rts

00013524 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   13524:	lea -12(sp),sp
   13528:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1352a:	move.l 20(sp),12(sp)
   13530:	move.l 24(sp),8(sp)
   13536:	move.l 16794 <MathIeeeSingBasBase>,d0
   1353c:	movea.l d0,a6
   1353e:	move.l 12(sp),d0
   13542:	move.l 8(sp),d1
   13546:	jsr -42(a6)
   1354a:	move.l d0,4(sp)
   1354e:	move.l 4(sp),d0
}
   13552:	movea.l (sp)+,a6
   13554:	lea 12(sp),sp
   13558:	rts

0001355a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1355a:	lea -12(sp),sp
   1355e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13560:	move.l 20(sp),12(sp)
   13566:	move.l 24(sp),8(sp)
   1356c:	move.l 16794 <MathIeeeSingBasBase>,d0
   13572:	movea.l d0,a6
   13574:	move.l 12(sp),d0
   13578:	move.l 8(sp),d1
   1357c:	jsr -42(a6)
   13580:	move.l d0,4(sp)
   13584:	move.l 4(sp),d0
}
   13588:	movea.l (sp)+,a6
   1358a:	lea 12(sp),sp
   1358e:	rts

00013590 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   13590:	lea -32(sp),sp
   13594:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   13598:	move.l 48(sp),36(sp)
   1359e:	move.l 52(sp),40(sp)
   135a4:	move.l 56(sp),28(sp)
   135aa:	move.l 60(sp),32(sp)
   135b0:	move.l 1679c <MathIeeeDoubBasBase>,d0
   135b6:	movea.l d0,a6
   135b8:	move.l 36(sp),d0
   135bc:	move.l 40(sp),d1
   135c0:	move.l 28(sp),d2
   135c4:	move.l 32(sp),d3
   135c8:	jsr -72(a6)
   135cc:	move.l d0,12(sp)
   135d0:	move.l d1,16(sp)
   135d4:	move.l 12(sp),20(sp)
   135da:	move.l 16(sp),24(sp)
   135e0:	move.l 20(sp),d0
   135e4:	move.l 24(sp),d1
}
   135e8:	movem.l (sp)+,d2-d3/a6
   135ec:	lea 32(sp),sp
   135f0:	rts

000135f2 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   135f2:	lea -12(sp),sp
   135f6:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   135f8:	move.l 20(sp),12(sp)
   135fe:	move.l 24(sp),8(sp)
   13604:	move.l 16794 <MathIeeeSingBasBase>,d0
   1360a:	movea.l d0,a6
   1360c:	move.l 12(sp),d0
   13610:	move.l 8(sp),d1
   13614:	jsr -72(a6)
   13618:	move.l d0,4(sp)
   1361c:	move.l 4(sp),d0
}
   13620:	movea.l (sp)+,a6
   13622:	lea 12(sp),sp
   13626:	rts

00013628 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   13628:	lea -12(sp),sp
   1362c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1362e:	move.l 20(sp),8(sp)
   13634:	move.l 24(sp),12(sp)
   1363a:	move.l 167a0 <MathIeeeDoubTransBase>,d0
   13640:	movea.l d0,a6
   13642:	move.l 8(sp),d0
   13646:	move.l 12(sp),d1
   1364a:	jsr -102(a6)
   1364e:	move.l d0,4(sp)
   13652:	move.l 4(sp),d0
}
   13656:	movea.l (sp)+,a6
   13658:	lea 12(sp),sp
   1365c:	rts

0001365e <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1365e:	       lea -24(sp),sp
   13662:	       move.l a6,-(sp)
    if (x > 0) {
   13664:	       clr.l -(sp)
   13666:	       move.l 40(sp),-(sp)
   1366a:	       jsr 1346a <__gtsf2>
   13670:	       addq.l #8,sp
   13672:	       tst.l d0
   13674:	   /-- ble.s 136a6 <atan2f+0x48>
        return IEEESPAtan(y / x);
   13676:	   |   move.l 36(sp),-(sp)
   1367a:	   |   move.l 36(sp),-(sp)
   1367e:	   |   jsr 131aa <__divsf3>
   13684:	   |   addq.l #8,sp
   13686:	   |   move.l d0,8(sp)
   1368a:	   |   move.l 16798 <MathIeeeSingTransBase>,d0
   13690:	   |   movea.l d0,a6
   13692:	   |   move.l 8(sp),d0
   13696:	   |   jsr -30(a6)
   1369a:	   |   move.l d0,4(sp)
   1369e:	   |   move.l 4(sp),d0
   136a2:	/--|-- bra.w 13806 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   136a6:	|  \-> clr.l -(sp)
   136a8:	|      move.l 40(sp),-(sp)
   136ac:	|      jsr 13524 <__ltsf2>
   136b2:	|      addq.l #8,sp
   136b4:	|      tst.l d0
   136b6:	|  /-- bge.s 1372a <atan2f+0xcc>
   136b8:	|  |   clr.l -(sp)
   136ba:	|  |   move.l 36(sp),-(sp)
   136be:	|  |   jsr 133e6 <__gesf2>
   136c4:	|  |   addq.l #8,sp
   136c6:	|  |   tst.l d0
   136c8:	|  +-- blt.s 1372a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   136ca:	|  |   move.l 36(sp),-(sp)
   136ce:	|  |   move.l 36(sp),-(sp)
   136d2:	|  |   jsr 131aa <__divsf3>
   136d8:	|  |   addq.l #8,sp
   136da:	|  |   move.l d0,24(sp)
   136de:	|  |   move.l 16798 <MathIeeeSingTransBase>,d0
   136e4:	|  |   movea.l d0,a6
   136e6:	|  |   move.l 24(sp),d0
   136ea:	|  |   jsr -30(a6)
   136ee:	|  |   move.l d0,20(sp)
   136f2:	|  |   move.l 20(sp),d0
   136f6:	|  |   move.l d0,-(sp)
   136f8:	|  |   jsr 13216 <__extendsfdf2>
   136fe:	|  |   addq.l #4,sp
   13700:	|  |   move.l #1413754136,-(sp)
   13706:	|  |   move.l #1074340347,-(sp)
   1370c:	|  |   move.l d1,-(sp)
   1370e:	|  |   move.l d0,-(sp)
   13710:	|  |   jsr 130e6 <__adddf3>
   13716:	|  |   lea 16(sp),sp
   1371a:	|  |   move.l d1,-(sp)
   1371c:	|  |   move.l d0,-(sp)
   1371e:	|  |   jsr 13628 <__truncdfsf2>
   13724:	|  |   addq.l #8,sp
   13726:	+--|-- bra.w 13806 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1372a:	|  \-> clr.l -(sp)
   1372c:	|      move.l 40(sp),-(sp)
   13730:	|      jsr 13524 <__ltsf2>
   13736:	|      addq.l #8,sp
   13738:	|      tst.l d0
   1373a:	|  /-- bge.s 137ac <atan2f+0x14e>
   1373c:	|  |   clr.l -(sp)
   1373e:	|  |   move.l 36(sp),-(sp)
   13742:	|  |   jsr 13524 <__ltsf2>
   13748:	|  |   addq.l #8,sp
   1374a:	|  |   tst.l d0
   1374c:	|  +-- bge.s 137ac <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1374e:	|  |   move.l 36(sp),-(sp)
   13752:	|  |   move.l 36(sp),-(sp)
   13756:	|  |   jsr 131aa <__divsf3>
   1375c:	|  |   addq.l #8,sp
   1375e:	|  |   move.l d0,16(sp)
   13762:	|  |   move.l 16798 <MathIeeeSingTransBase>,d0
   13768:	|  |   movea.l d0,a6
   1376a:	|  |   move.l 16(sp),d0
   1376e:	|  |   jsr -30(a6)
   13772:	|  |   move.l d0,12(sp)
   13776:	|  |   move.l 12(sp),d0
   1377a:	|  |   move.l d0,-(sp)
   1377c:	|  |   jsr 13216 <__extendsfdf2>
   13782:	|  |   addq.l #4,sp
   13784:	|  |   move.l #1413754136,-(sp)
   1378a:	|  |   move.l #1074340347,-(sp)
   13790:	|  |   move.l d1,-(sp)
   13792:	|  |   move.l d0,-(sp)
   13794:	|  |   jsr 13590 <__subdf3>
   1379a:	|  |   lea 16(sp),sp
   1379e:	|  |   move.l d1,-(sp)
   137a0:	|  |   move.l d0,-(sp)
   137a2:	|  |   jsr 13628 <__truncdfsf2>
   137a8:	|  |   addq.l #8,sp
   137aa:	+--|-- bra.s 13806 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   137ac:	|  \-> clr.l -(sp)
   137ae:	|      move.l 40(sp),-(sp)
   137b2:	|      jsr 131e0 <__eqsf2>
   137b8:	|      addq.l #8,sp
   137ba:	|      tst.l d0
   137bc:	|  /-- bne.s 137d8 <atan2f+0x17a>
   137be:	|  |   clr.l -(sp)
   137c0:	|  |   move.l 36(sp),-(sp)
   137c4:	|  |   jsr 1346a <__gtsf2>
   137ca:	|  |   addq.l #8,sp
   137cc:	|  |   tst.l d0
   137ce:	|  +-- ble.s 137d8 <atan2f+0x17a>
        return PI / 2;
   137d0:	|  |   move.l #1070141403,d0
   137d6:	+--|-- bra.s 13806 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   137d8:	|  \-> clr.l -(sp)
   137da:	|      move.l 40(sp),-(sp)
   137de:	|      jsr 131e0 <__eqsf2>
   137e4:	|      addq.l #8,sp
   137e6:	|      tst.l d0
   137e8:	|  /-- bne.s 13804 <atan2f+0x1a6>
   137ea:	|  |   clr.l -(sp)
   137ec:	|  |   move.l 36(sp),-(sp)
   137f0:	|  |   jsr 13524 <__ltsf2>
   137f6:	|  |   addq.l #8,sp
   137f8:	|  |   tst.l d0
   137fa:	|  +-- bge.s 13804 <atan2f+0x1a6>
        return -PI / 2;
   137fc:	|  |   move.l #-1077342245,d0
   13802:	+--|-- bra.s 13806 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   13804:	|  \-> moveq #0,d0
    }
}
   13806:	\----> movea.l (sp)+,a6
   13808:	       lea 24(sp),sp
   1380c:	       rts

0001380e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1380e:	lea -24(sp),sp
   13812:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   13814:	move.l 32(sp),20(sp)
   1381a:	move.l 36(sp),24(sp)
   13820:	move.l 167a0 <MathIeeeDoubTransBase>,d0
   13826:	movea.l d0,a6
   13828:	move.l 20(sp),d0
   1382c:	move.l 24(sp),d1
   13830:	jsr -96(a6)
   13834:	move.l d0,4(sp)
   13838:	move.l d1,8(sp)
   1383c:	move.l 4(sp),12(sp)
   13842:	move.l 8(sp),16(sp)
   13848:	move.l 12(sp),d0
   1384c:	move.l 16(sp),d1
}
   13850:	movea.l (sp)+,a6
   13852:	lea 24(sp),sp
   13856:	rts

00013858 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   13858:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1385c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13860:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   13864:	mulu.w 8(sp),d1
	addw	d1, d0
   13868:	add.w d1,d0
	swap	d0
   1386a:	swap d0
	clrw	d0
   1386c:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1386e:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   13872:	mulu.w 10(sp),d1
	addl	d1, d0
   13876:	add.l d1,d0
	rts
   13878:	rts

0001387a <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1387a:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1387c:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   13880:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   13884:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1388a:	   /-- bcc.s 138a2 <__udivsi3+0x28>
	movel	d0, d2
   1388c:	   |   move.l d0,d2
	clrw	d2
   1388e:	   |   clr.w d2
	swap	d2
   13890:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   13892:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   13894:	   |   move.w d2,d0
	swap	d0
   13896:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   13898:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1389c:	   |   divu.w d1,d2
	movew	d2, d0
   1389e:	   |   move.w d2,d0
	jra	6f
   138a0:	/--|-- bra.s 138d2 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   138a2:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   138a4:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   138a6:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   138a8:	|  |   cmpi.l #65536,d1
	jcc	4b
   138ae:	|  \-- bcc.s 138a4 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   138b0:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   138b2:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   138b8:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   138ba:	|      mulu.w d0,d1
	swap	d2
   138bc:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   138be:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   138c0:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   138c2:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   138c4:	|  /-- bne.s 138d0 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   138c6:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   138c8:	|  +-- bcs.s 138d0 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   138ca:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   138ce:	+--|-- bls.s 138d2 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   138d0:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   138d2:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   138d4:	       rts

000138d6 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   138d6:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   138d8:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   138da:	    move.l 12(sp),d1
	jpl	1f
   138de:	/-- bpl.s 138e4 <__divsi3+0xe>
	negl	d1
   138e0:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   138e2:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   138e4:	\-> move.l 8(sp),d0
	jpl	2f
   138e8:	/-- bpl.s 138ee <__divsi3+0x18>
	negl	d0
   138ea:	|   neg.l d0
	negb	d2
   138ec:	|   neg.b d2

2:	movel	d1, sp@-
   138ee:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   138f0:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   138f2:	    jsr 1387a <__udivsi3>
	addql	#8, sp
   138f8:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   138fa:	    tst.b d2
	jpl	3f
   138fc:	/-- bpl.s 13900 <__divsi3+0x2a>
	negl	d0
   138fe:	|   neg.l d0

3:	movel	sp@+, d2
   13900:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13902:	    rts

00013904 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13904:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13908:	move.l 4(sp),d0
	movel	d1, sp@-
   1390c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1390e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   13910:	jsr 138d6 <__divsi3>
	addql	#8, sp
   13916:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13918:	move.l 8(sp),d1
	movel	d1, sp@-
   1391c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1391e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   13920:	jsr 13858 <__mulsi3>
	addql	#8, sp
   13926:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13928:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1392c:	sub.l d0,d1
	movel	d1, d0
   1392e:	move.l d1,d0
	rts
   13930:	rts

00013932 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13932:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13936:	move.l 4(sp),d0
	movel	d1, sp@-
   1393a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1393c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1393e:	jsr 1387a <__udivsi3>
	addql	#8, sp
   13944:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13946:	move.l 8(sp),d1
	movel	d1, sp@-
   1394a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1394c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1394e:	jsr 13858 <__mulsi3>
	addql	#8, sp
   13954:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13956:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1395a:	sub.l d0,d1
	movel	d1, d0
   1395c:	move.l d1,d0
	rts
   1395e:	rts

00013960 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   13960:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   13962:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   13966:	jsr -516(a6)
    move.l (sp)+, a6
   1396a:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1396c:	rts

0001396e <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1396e:	move.b d0,(a3)+
	rts
   13970:	rts
