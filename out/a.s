
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #101377,d0
       8:	       subi.l #101377,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18c01 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #101377,d0
      40:	       subi.l #101377,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18c01 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 54de <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #101377,d0
      7e:	       subi.l #101377,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18c01 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 11686 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1938c <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 1169e <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18c02 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 11686 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1938c <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18c02 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 11686 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1938c <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 14b36 <PutChar+0x4>
     35c:	|  |              |   jsr 141e2 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19394 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19394 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19394 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19394 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19394 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19394 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19394 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 14b60 <PutChar+0x2e>
     834:	|   jsr 141e2 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19394 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 14b7c <PutChar+0x4a>
     8a6:	|   jsr 141e2 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19394 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19394 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19394 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19394 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19394 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19394 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19394 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19394 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1938c <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19394 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 11686 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19394 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 1938c <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 1938c <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #84900,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 1938c <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 14bb1 <PutChar+0x7f>
     cea:	   |   jsr 141e2 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 14a1c <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 14af6 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 14bce <PutChar+0x9c>
     d66:	|      jsr 141e2 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 1938c <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 1938c <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 1938c <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 192ac <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 7626 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),192ac <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 192b0 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 192b4 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 14be1 <PutChar+0xaf>
     de8:	jsr 141e2 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -24(sp),sp
     df8:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     dfa:	             move.l 192dc <CstPalette>,d0
     e00:	         /-- beq.s e1a <CstBlankScreen+0x26>
     e02:	         |   move.l 192dc <CstPalette>,12(sp)
     e0a:	         |   move.l 1938c <SysBase>,d0
     e10:	         |   movea.l d0,a6
     e12:	         |   movea.l 12(sp),a1
     e16:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e1a:	         \-> clr.w 192c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e20:	             move.l #14675968,8(sp)

  width /= 16;
     e28:	             move.l 32(sp),d0
     e2c:	             movea.l d0,a0
     e2e:	             cmpa.w #0,a0
     e32:	         /-- bge.s e38 <CstBlankScreen+0x44>
     e34:	         |   lea 15(a0),a0
     e38:	         \-> move.l a0,d0
     e3a:	             asr.l #4,d0
     e3c:	             move.l d0,32(sp)

  WaitBlit();
     e40:	             move.l 19398 <GfxBase>,d0
     e46:	             movea.l d0,a6
     e48:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e4c:	             clr.l 24(sp)
     e50:	   /-------- bra.w f2a <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     e54:	/--|-------> movea.l 8(sp),a0
     e58:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e5e:	|  |         movea.l 8(sp),a0
     e62:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e68:	|  |         movea.l 8(sp),a0
     e6c:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e72:	|  |         movea.l 8(sp),a0
     e76:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e7c:	|  |         movea.l 8(sp),a0
     e80:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e86:	|  |         movea.l 8(sp),a0
     e8a:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e90:	|  |         movea.l 8(sp),a0
     e94:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e9a:	|  |         movea.l 8(sp),a0
     e9e:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ea4:	|  |         move.l 192d4 <CstDrawBuffer>,d0
     eaa:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     eae:	|  |         move.l 36(sp),d0
     eb2:	|  |         lsl.w #6,d0
     eb4:	|  |         move.l 32(sp),d1
     eb8:	|  |         movea.w d0,a0
     eba:	|  |         adda.w d1,a0
     ebc:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     ec0:	|  |         move.l 32(sp),d1
     ec4:	|  |         move.l 36(sp),d0
     ec8:	|  |         muls.w d1,d0
     eca:	|  |         add.w d0,d0
     ecc:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     ed0:	|  |         clr.l 16(sp)
     ed4:	|  |     /-- bra.s f06 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     ed6:	|  |  /--|-> move.l 20(sp),d0
     eda:	|  |  |  |   movea.l 8(sp),a0
     ede:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ee2:	|  |  |  |   movea.l 8(sp),a0
     ee6:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     eec:	|  |  |  |   move.l 19398 <GfxBase>,d0
     ef2:	|  |  |  |   movea.l d0,a6
     ef4:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ef8:	|  |  |  |   moveq #0,d0
     efa:	|  |  |  |   move.w 4(sp),d0
     efe:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f02:	|  |  |  |   addq.l #1,16(sp)
     f06:	|  |  |  \-> moveq #4,d0
     f08:	|  |  |      cmp.l 16(sp),d0
     f0c:	|  |  \----- bge.s ed6 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f0e:	|  |         move.l 19398 <GfxBase>,d0
     f14:	|  |         movea.l d0,a6
     f16:	|  |         jsr -228(a6)
    WaitVbl();
     f1a:	|  |         jsr 14116 <WaitVbl>
    CstSwapBuffer();
     f20:	|  |         jsr 1cf4 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f26:	|  |         addq.l #1,24(sp)
     f2a:	|  \-------> moveq #1,d0
     f2c:	|            cmp.l 24(sp),d0
     f30:	\----------- bge.w e54 <CstBlankScreen+0x60>
  }

}
     f34:	             nop
     f36:	             nop
     f38:	             movea.l (sp)+,a6
     f3a:	             lea 24(sp),sp
     f3e:	             rts

00000f40 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f40:	       lea -52(sp),sp
     f44:	       move.l a6,-(sp)
     f46:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f48:	       move.l #400,32(sp)
     f50:	       moveq #2,d0
     f52:	       move.l d0,28(sp)
     f56:	       move.l 1938c <SysBase>,d0
     f5c:	       movea.l d0,a6
     f5e:	       move.l 32(sp),d0
     f62:	       move.l 28(sp),d1
     f66:	       jsr -198(a6)
     f6a:	       move.l d0,24(sp)
     f6e:	       move.l 24(sp),d0
     f72:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f76:	   /-- bne.s fa0 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f78:	   |   pea 28 <_start+0x28>
     f7c:	   |   pea 14c1a <thumbnail.c.7eb31449+0x22>
     f82:	   |   jsr 141e2 <KPrintF>
     f88:	   |   addq.l #8,sp
    Exit(1);
     f8a:	   |   moveq #1,d1
     f8c:	   |   move.l d1,16(sp)
     f90:	   |   move.l 19394 <DOSBase>,d0
     f96:	   |   movea.l d0,a6
     f98:	   |   move.l 16(sp),d1
     f9c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fa0:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     fa6:	       move.l #101380,52(sp)
  for(int i=0; i<16;i++)
     fae:	       clr.l 48(sp)
     fb2:	   /-- bra.s fd8 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     fb4:	/--|-> move.l 52(sp),d1
     fb8:	|  |   move.l d1,d2
     fba:	|  |   addq.l #4,d2
     fbc:	|  |   move.l d2,52(sp)
     fc0:	|  |   move.l 56(sp),d0
     fc4:	|  |   move.l d0,d2
     fc6:	|  |   addq.l #4,d2
     fc8:	|  |   move.l d2,56(sp)
     fcc:	|  |   movea.l d1,a0
     fce:	|  |   move.l (a0),d1
     fd0:	|  |   movea.l d0,a0
     fd2:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fd4:	|  |   addq.l #1,48(sp)
     fd8:	|  \-> moveq #15,d0
     fda:	|      cmp.l 48(sp),d0
     fde:	\----- bge.s fb4 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fe0:	       move.l #101444,52(sp)

  for(int i=0; i<12;i++)
     fe8:	       clr.l 44(sp)
     fec:	   /-- bra.s 1012 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fee:	/--|-> move.l 52(sp),d1
     ff2:	|  |   move.l d1,d2
     ff4:	|  |   addq.l #4,d2
     ff6:	|  |   move.l d2,52(sp)
     ffa:	|  |   move.l 56(sp),d0
     ffe:	|  |   move.l d0,d2
    1000:	|  |   addq.l #4,d2
    1002:	|  |   move.l d2,56(sp)
    1006:	|  |   movea.l d1,a0
    1008:	|  |   move.l (a0),d1
    100a:	|  |   movea.l d0,a0
    100c:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    100e:	|  |   addq.l #1,44(sp)
    1012:	|  \-> moveq #11,d0
    1014:	|      cmp.l 44(sp),d0
    1018:	\----- bge.s fee <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    101a:	       move.l #101492,52(sp)
  for(int i=0; i<10;i++)
    1022:	       clr.l 40(sp)
    1026:	   /-- bra.s 104c <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1028:	/--|-> move.l 52(sp),d1
    102c:	|  |   move.l d1,d2
    102e:	|  |   addq.l #4,d2
    1030:	|  |   move.l d2,52(sp)
    1034:	|  |   move.l 56(sp),d0
    1038:	|  |   move.l d0,d2
    103a:	|  |   addq.l #4,d2
    103c:	|  |   move.l d2,56(sp)
    1040:	|  |   movea.l d1,a0
    1042:	|  |   move.l (a0),d1
    1044:	|  |   movea.l d0,a0
    1046:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1048:	|  |   addq.l #1,40(sp)
    104c:	|  \-> moveq #9,d0
    104e:	|      cmp.l 40(sp),d0
    1052:	\----- bge.s 1028 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    1054:	       move.l #101532,52(sp)
  CstClColor = (UWORD *) cl;
    105c:	       move.l 56(sp),192d8 <CstClColor>
  for(int i=0; i<32;i++)
    1064:	       clr.l 36(sp)
    1068:	   /-- bra.s 108e <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    106a:	/--|-> move.l 52(sp),d1
    106e:	|  |   move.l d1,d2
    1070:	|  |   addq.l #4,d2
    1072:	|  |   move.l d2,52(sp)
    1076:	|  |   move.l 56(sp),d0
    107a:	|  |   move.l d0,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,56(sp)
    1082:	|  |   movea.l d1,a0
    1084:	|  |   move.l (a0),d1
    1086:	|  |   movea.l d0,a0
    1088:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    108a:	|  |   addq.l #1,36(sp)
    108e:	|  \-> moveq #31,d0
    1090:	|      cmp.l 36(sp),d0
    1094:	\----- bge.s 106a <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1096:	       moveq #40,d1
    1098:	       cmp.l 64(sp),d1
    109c:	   /-- bge.s 10fa <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    109e:	   |   moveq #-40,d2
    10a0:	   |   add.l 64(sp),d2
    10a4:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10a8:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #264,(a0)
    *cw++ = tmp;
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10d4:	   |   move.l 8(sp),d0
    10d8:	   |   move.l d0,d1
    10da:	   |   addq.l #2,d1
    10dc:	   |   move.l d1,8(sp)
    10e0:	   |   movea.l d0,a0
    10e2:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10e6:	   |   move.l 8(sp),d0
    10ea:	   |   move.l d0,d1
    10ec:	   |   addq.l #2,d1
    10ee:	   |   move.l d1,8(sp)
    10f2:	   |   move.l 12(sp),d1
    10f6:	   |   movea.l d0,a0
    10f8:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10fa:	   \-> move.l 56(sp),d0
    10fe:	       move.l d0,d1
    1100:	       addq.l #4,d1
    1102:	       move.l d1,56(sp)
    1106:	       moveq #-2,d2
    1108:	       movea.l d0,a0
    110a:	       move.l d2,(a0)
  return (UWORD *) retval;  
    110c:	       move.l 20(sp),d0
}
    1110:	       move.l (sp)+,d2
    1112:	       movea.l (sp)+,a6
    1114:	       lea 52(sp),sp
    1118:	       rts

0000111a <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    111a:	       lea -28(sp),sp
    111e:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    1120:	       move.l 192c6 <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1128:	       move.l 192d4 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	       clr.l 20(sp)
    1134:	   /-- bra.s 115a <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1136:	/--|-> move.l 28(sp),d1
    113a:	|  |   move.l d1,d0
    113c:	|  |   addq.l #4,d0
    113e:	|  |   move.l d0,28(sp)
    1142:	|  |   move.l 24(sp),d0
    1146:	|  |   move.l d0,d2
    1148:	|  |   addq.l #4,d2
    114a:	|  |   move.l d2,24(sp)
    114e:	|  |   movea.l d1,a0
    1150:	|  |   move.l (a0),d1
    1152:	|  |   movea.l d0,a0
    1154:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1156:	|  |   addq.l #1,20(sp)
    115a:	|  \-> move.w 192c2 <CstBackdropSize>,d0
    1160:	|      lsr.w #2,d0
    1162:	|      move.w d0,d0
    1164:	|      andi.l #65535,d0
    116a:	|      cmp.l 20(sp),d0
    116e:	\----- bgt.s 1136 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    1170:	       move.l 192d8 <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1178:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    117e:	       move.l 192dc <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1186:	       clr.l 6(sp)
    118a:	   /-- bra.s 11c6 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    118c:	/--|-> move.l 16(sp),d0
    1190:	|  |   move.l d0,d1
    1192:	|  |   addq.l #2,d1
    1194:	|  |   move.l d1,16(sp)
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w 14(sp),(a0)
    reg +=2;
    119e:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    11a2:	|  |   move.l 10(sp),d1
    11a6:	|  |   move.l d1,d0
    11a8:	|  |   addq.l #2,d0
    11aa:	|  |   move.l d0,10(sp)
    11ae:	|  |   move.l 16(sp),d0
    11b2:	|  |   move.l d0,d2
    11b4:	|  |   addq.l #2,d2
    11b6:	|  |   move.l d2,16(sp)
    11ba:	|  |   movea.l d1,a0
    11bc:	|  |   move.w (a0),d1
    11be:	|  |   movea.l d0,a0
    11c0:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11c2:	|  |   addq.l #1,6(sp)
    11c6:	|  \-> moveq #31,d0
    11c8:	|      cmp.l 6(sp),d0
    11cc:	\----- bge.s 118c <CstDisplayBackDrop+0x72>
  }
}
    11ce:	       nop
    11d0:	       nop
    11d2:	       move.l (sp)+,d2
    11d4:	       lea 28(sp),sp
    11d8:	       rts

000011da <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    11da:	    move.w 192ce <CstApplyBackDropCounter>,d0
    11e0:	/-- ble.s 11f6 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    11e2:	|   jsr 111a <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    11e8:	|   move.w 192ce <CstApplyBackDropCounter>,d0
    11ee:	|   subq.w #1,d0
    11f0:	|   move.w d0,192ce <CstApplyBackDropCounter>
  }    
}
    11f6:	\-> nop
    11f8:	    rts

000011fa <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11fa:	             lea -140(sp),sp
    11fe:	             movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    1202:	             pea 14c55 <thumbnail.c.7eb31449+0x5d>
    1208:	             jsr 141e2 <KPrintF>
    120e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1210:	             move.l 160(sp),-(sp)
    1214:	             jsr 6bc <get2bytes>
    121a:	             addq.l #4,sp
    121c:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    1220:	             move.l 160(sp),-(sp)
    1224:	             jsr 6bc <get2bytes>
    122a:	             addq.l #4,sp
    122c:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    1230:	             move.w 130(sp),d0
    1234:	             lsr.w #3,d0
    1236:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    123a:	             move.w 126(sp),d0
    123e:	             lsr.w #1,d0
    1240:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1244:	             move.l 192e0 <winWidth>,d0
    124a:	             lsr.l #3,d0
    124c:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1250:	             move.w 126(sp),d0
    1254:	             muls.w 128(sp),d0
    1258:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    125c:	             move.w 120(sp),d1
    1260:	             move.w d1,d0
    1262:	             add.w d0,d0
    1264:	             add.w d0,d0
    1266:	             move.w d0,d2
    1268:	             add.w d1,d2
    126a:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    126e:	             move.w 192c0 <CstPaletteLoaded>,d0
    1274:	/----------- bne.s 12ec <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    1276:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    127c:	|            moveq #64,d0
    127e:	|            move.l d0,112(sp)
    1282:	|            clr.l 108(sp)
    1286:	|            move.l 1938c <SysBase>,d0
    128c:	|            movea.l d0,a6
    128e:	|            move.l 112(sp),d0
    1292:	|            move.l 108(sp),d1
    1296:	|            jsr -684(a6)
    129a:	|            move.l d0,104(sp)
    129e:	|            move.l 104(sp),d0
    12a2:	|            move.l d0,192dc <CstPalette>
    CstPaletteLoaded = 1;
    12a8:	|            move.w #1,192c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    12b0:	|            move.l 192dc <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12b8:	|            clr.l 148(sp)
    12bc:	|        /-- bra.s 12e2 <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    12be:	|     /--|-> move.l 160(sp),-(sp)
    12c2:	|     |  |   jsr 6bc <get2bytes>
    12c8:	|     |  |   addq.l #4,sp
    12ca:	|     |  |   move.l d0,d1
    12cc:	|     |  |   move.l 152(sp),d0
    12d0:	|     |  |   move.l d0,d2
    12d2:	|     |  |   addq.l #2,d2
    12d4:	|     |  |   move.l d2,152(sp)
    12d8:	|     |  |   move.l d1,d1
    12da:	|     |  |   movea.l d0,a0
    12dc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12de:	|     |  |   addq.l #1,148(sp)
    12e2:	|     |  \-> moveq #31,d0
    12e4:	|     |      cmp.l 148(sp),d0
    12e8:	|     \----- bge.s 12be <CstLoadBackdrop+0xc4>
    12ea:	|  /-------- bra.s 130a <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12ec:	\--|-------> clr.l 144(sp)
    12f0:	   |     /-- bra.s 1302 <CstLoadBackdrop+0x108>
      get2bytes(fp);
    12f2:	   |  /--|-> move.l 160(sp),-(sp)
    12f6:	   |  |  |   jsr 6bc <get2bytes>
    12fc:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12fe:	   |  |  |   addq.l #1,144(sp)
    1302:	   |  |  \-> moveq #31,d2
    1304:	   |  |      cmp.l 144(sp),d2
    1308:	   |  \----- bge.s 12f2 <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    130a:	   \-------> moveq #0,d0
    130c:	             move.w 118(sp),d0
    1310:	             move.l d0,100(sp)
    1314:	             moveq #2,d0
    1316:	             move.l d0,96(sp)
    131a:	             move.l 1938c <SysBase>,d0
    1320:	             movea.l d0,a6
    1322:	             move.l 100(sp),d0
    1326:	             move.l 96(sp),d1
    132a:	             jsr -684(a6)
    132e:	             move.l d0,92(sp)
    1332:	             move.l 92(sp),d0
    1336:	             move.l d0,88(sp)
   UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    133a:	             moveq #0,d0
    133c:	             move.w 120(sp),d0
    1340:	             move.l d0,84(sp)
    1344:	             moveq #2,d2
    1346:	             move.l d2,80(sp)
    134a:	             move.l 1938c <SysBase>,d0
    1350:	             movea.l d0,a6
    1352:	             move.l 84(sp),d0
    1356:	             move.l 80(sp),d1
    135a:	             jsr -684(a6)
    135e:	             move.l d0,76(sp)
    1362:	             move.l 76(sp),d0
    1366:	             move.l d0,72(sp)
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    136a:	             move.l 160(sp),68(sp)
    1370:	             move.l 88(sp),64(sp)
    1376:	             moveq #2,d0
    1378:	             move.l d0,60(sp)
    137c:	             move.w 118(sp),d0
    1380:	             lsr.w #1,d0
    1382:	             move.w d0,d0
    1384:	             andi.l #65535,d0
    138a:	             move.l d0,56(sp)
    138e:	             move.l 19394 <DOSBase>,d0
    1394:	             movea.l d0,a6
    1396:	             move.l 68(sp),d1
    139a:	             move.l 64(sp),d2
    139e:	             move.l 60(sp),d3
    13a2:	             move.l 56(sp),d4
    13a6:	             jsr -324(a6)
    13aa:	             move.l d0,52(sp)
    13ae:	             move.l 52(sp),d0
    13b2:	             move.w d0,50(sp)
  if(!count) {
    13b6:	         /-- bne.s 13ca <CstLoadBackdrop+0x1d0>
    KPrintF("Error while reading stream");
    13b8:	         |   pea 14c84 <thumbnail.c.7eb31449+0x8c>
    13be:	         |   jsr 141e2 <KPrintF>
    13c4:	         |   addq.l #4,sp
    return;
    13c6:	   /-----|-- bra.w 15aa <CstLoadBackdrop+0x3b0>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    13ca:	   |     \-> move.l 160(sp),46(sp)
    13d0:	   |         move.l 72(sp),42(sp)
    13d6:	   |         moveq #2,d2
    13d8:	   |         move.l d2,38(sp)
    13dc:	   |         move.w 120(sp),d0
    13e0:	   |         lsr.w #1,d0
    13e2:	   |         move.w d0,d0
    13e4:	   |         andi.l #65535,d0
    13ea:	   |         move.l d0,34(sp)
    13ee:	   |         move.l 19394 <DOSBase>,d0
    13f4:	   |         movea.l d0,a6
    13f6:	   |         move.l 46(sp),d1
    13fa:	   |         move.l 42(sp),d2
    13fe:	   |         move.l 38(sp),d3
    1402:	   |         move.l 34(sp),d4
    1406:	   |         jsr -324(a6)
    140a:	   |         move.l d0,30(sp)
    140e:	   |         move.l 30(sp),d0
    1412:	   |         move.w d0,50(sp)
   

  if(!count) {
    1416:	   |     /-- bne.s 142a <CstLoadBackdrop+0x230>
    KPrintF("Error while reading stream");
    1418:	   |     |   pea 14c84 <thumbnail.c.7eb31449+0x8c>
    141e:	   |     |   jsr 141e2 <KPrintF>
    1424:	   |     |   addq.l #4,sp
    return;
    1426:	   +-----|-- bra.w 15aa <CstLoadBackdrop+0x3b0>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    142a:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1432:	   |         move.l 192c6 <CstBackDrop>,d0
    1438:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    143c:	   |         move.l 168(sp),d0
    1440:	   |         move.w d0,d1
    1442:	   |         muls.w 122(sp),d1
    1446:	   |         move.l 164(sp),d0
    144a:	   |     /-- bpl.s 144e <CstLoadBackdrop+0x254>
    144c:	   |     |   addq.l #7,d0
    144e:	   |     \-> asr.l #3,d0
    1450:	   |         move.l d0,d0
    1452:	   |         movea.w d1,a0
    1454:	   |         adda.w d0,a0
    1456:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    145a:	   |         moveq #0,d0
    145c:	   |         move.w 24(sp),d0
    1460:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1464:	   |         pea 14c9f <thumbnail.c.7eb31449+0xa7>
    146a:	   |         jsr 141e2 <KPrintF>
    1470:	   |         addq.l #4,sp


  WaitBlit();
    1472:	   |         move.l 19398 <GfxBase>,d0
    1478:	   |         movea.l d0,a6
    147a:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    147e:	   |         movea.l 26(sp),a0
    1482:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1488:	   |         movea.l 26(sp),a0
    148c:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1492:	   |         movea.l 26(sp),a0
    1496:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    149c:	   |         movea.l 26(sp),a0
    14a0:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    14a6:	   |         move.w 122(sp),d0
    14aa:	   |         sub.w 126(sp),d0
    14ae:	   |         movea.l 26(sp),a0
    14b2:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    14b6:	   |         move.w 122(sp),d0
    14ba:	   |         sub.w 126(sp),d0
    14be:	   |         movea.l 26(sp),a0
    14c2:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    14c6:	   |         movea.l 26(sp),a0
    14ca:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    14d0:	   |         movea.l 26(sp),a0
    14d4:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    14da:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    14e0:	   |         clr.l 132(sp)
    14e4:	   |     /-- bra.s 1546 <CstLoadBackdrop+0x34c>
  {    
    custom->bltapt = (APTR) tmpmask;
    14e6:	   |  /--|-> movea.l 26(sp),a0
    14ea:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    14f0:	   |  |  |   move.l 136(sp),d0
    14f4:	   |  |  |   movea.l 26(sp),a0
    14f8:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    14fc:	   |  |  |   move.l 140(sp),d0
    1500:	   |  |  |   movea.l 26(sp),a0
    1504:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1508:	   |  |  |   move.l 140(sp),d0
    150c:	   |  |  |   movea.l 26(sp),a0
    1510:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1514:	   |  |  |   move.w 128(sp),d0
    1518:	   |  |  |   lsl.w #6,d0
    151a:	   |  |  |   add.w 124(sp),d0
    151e:	   |  |  |   movea.l 26(sp),a0
    1522:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1526:	   |  |  |   moveq #0,d0
    1528:	   |  |  |   move.w 120(sp),d0
    152c:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    1530:	   |  |  |   move.w 192c4 <CstBackdropSizePlane>,d0
    1536:	   |  |  |   move.w d0,d0
    1538:	   |  |  |   andi.l #65535,d0
    153e:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1542:	   |  |  |   addq.l #1,132(sp)
    1546:	   |  |  \-> moveq #4,d0
    1548:	   |  |      cmp.l 132(sp),d0
    154c:	   |  \----- bge.s 14e6 <CstLoadBackdrop+0x2ec>
  }    

  WaitBlit();
    154e:	   |         move.l 19398 <GfxBase>,d0
    1554:	   |         movea.l d0,a6
    1556:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    155a:	   |         pea 14cbe <thumbnail.c.7eb31449+0xc6>
    1560:	   |         jsr 141e2 <KPrintF>
    1566:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1568:	   |         move.l 88(sp),20(sp)
    156e:	   |         move.l 1938c <SysBase>,d0
    1574:	   |         movea.l d0,a6
    1576:	   |         movea.l 20(sp),a1
    157a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    157e:	   |         move.l 72(sp),16(sp)
    1584:	   |         move.l 1938c <SysBase>,d0
    158a:	   |         movea.l d0,a6
    158c:	   |         movea.l 16(sp),a1
    1590:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1594:	   |         move.w #2,192ce <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    159c:	   |         pea 14cde <thumbnail.c.7eb31449+0xe6>
    15a2:	   |         jsr 141e2 <KPrintF>
    15a8:	   |         addq.l #4,sp

}
    15aa:	   \-------> movem.l (sp)+,d2-d4/a6
    15ae:	             lea 140(sp),sp
    15b2:	             rts

000015b4 <CstScaleSprite>:

ULONG test = 0;

void CstScaleSprite( struct sprite *single, WORD x, WORD y)
{
    15b4:	             lea -68(sp),sp
    15b8:	             movem.l d2-d3/a6,-(sp)
    15bc:	             move.l 88(sp),d1
    15c0:	             move.l 92(sp),d0
    15c4:	             move.w d1,d1
    15c6:	             move.w d1,16(sp)
    15ca:	             move.w d0,d0
    15cc:	             move.w d0,14(sp)
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  x = -20;
    15d0:	             move.w #-20,16(sp)
  y = -20;
    15d6:	             move.w #-20,14(sp)

  if( y < 0) {
    15dc:	      /----- bpl.s 1624 <CstScaleSprite+0x70>
    if(y + single->height < 0) {
    15de:	      |      movea.w 14(sp),a1
    15e2:	      |      movea.l 84(sp),a0
    15e6:	      |      move.l 4(a0),d0
    15ea:	      |      add.l a1,d0
    15ec:	      |  /-- bpl.s 1600 <CstScaleSprite+0x4c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    15ee:	      |  |   pea 14cf8 <thumbnail.c.7eb31449+0x100>
    15f4:	      |  |   jsr 141e2 <KPrintF>
    15fa:	      |  |   addq.l #4,sp
      return;
    15fc:	/-----|--|-- bra.w 1cd2 <CstScaleSprite+0x71e>
    }
    ystartdst = 0;
    1600:	|     |  \-> clr.l 44(sp)
    ystartsrc = y*-1;
    1604:	|     |      move.w 14(sp),d0
    1608:	|     |      ext.l d0
    160a:	|     |      neg.l d0
    160c:	|     |      move.l d0,40(sp)
    blitheight = single->height+y;
    1610:	|     |      movea.l 84(sp),a0
    1614:	|     |      move.l 4(a0),d0
    1618:	|     |      movea.w 14(sp),a0
    161c:	|     |      add.l a0,d0
    161e:	|     |      move.l d0,36(sp)
    1622:	|  /--|----- bra.s 1696 <CstScaleSprite+0xe2>
  } else if(y+single->height > winHeight) {
    1624:	|  |  \----> movea.w 14(sp),a1
    1628:	|  |         movea.l 84(sp),a0
    162c:	|  |         move.l 4(a0),d0
    1630:	|  |         add.l a1,d0
    1632:	|  |         move.l d0,d1
    1634:	|  |         move.l 192e4 <winHeight>,d0
    163a:	|  |         cmp.l d1,d0
    163c:	|  |  /----- bcc.s 167e <CstScaleSprite+0xca>
    if(y  > winHeight) {
    163e:	|  |  |      movea.w 14(sp),a0
    1642:	|  |  |      move.l 192e4 <winHeight>,d0
    1648:	|  |  |      cmp.l a0,d0
    164a:	|  |  |  /-- bcc.s 165e <CstScaleSprite+0xaa>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    164c:	|  |  |  |   pea 14cf8 <thumbnail.c.7eb31449+0x100>
    1652:	|  |  |  |   jsr 141e2 <KPrintF>
    1658:	|  |  |  |   addq.l #4,sp
      return;
    165a:	+--|--|--|-- bra.w 1cd2 <CstScaleSprite+0x71e>
    }
    ystartdst = y;
    165e:	|  |  |  \-> movea.w 14(sp),a0
    1662:	|  |  |      move.l a0,44(sp)
    ystartsrc = 0;
    1666:	|  |  |      clr.l 40(sp)
    blitheight = winHeight-y;
    166a:	|  |  |      move.l 192e4 <winHeight>,d0
    1670:	|  |  |      movea.w 14(sp),a0
    1674:	|  |  |      move.l d0,d1
    1676:	|  |  |      sub.l a0,d1
    1678:	|  |  |      move.l d1,36(sp)
    167c:	|  +--|----- bra.s 1696 <CstScaleSprite+0xe2>
  } else {
    ystartdst = y;
    167e:	|  |  \----> movea.w 14(sp),a0
    1682:	|  |         move.l a0,44(sp)
    ystartsrc = 0;
    1686:	|  |         clr.l 40(sp)
    blitheight = single->height;
    168a:	|  |         movea.l 84(sp),a0
    168e:	|  |         move.l 4(a0),d0
    1692:	|  |         move.l d0,36(sp)
  }

  if( x < 0) { //Leftmost part outside screen
    1696:	|  \-------> tst.w 16(sp)
    169a:	|     /----- bge.w 180c <CstScaleSprite+0x258>
    if(x + single->width < 0) {
    169e:	|     |      movea.w 16(sp),a1
    16a2:	|     |      movea.l 84(sp),a0
    16a6:	|     |      move.l (a0),d0
    16a8:	|     |      add.l a1,d0
    16aa:	|     |  /-- bpl.s 16be <CstScaleSprite+0x10a>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    16ac:	|     |  |   pea 14cf8 <thumbnail.c.7eb31449+0x100>
    16b2:	|     |  |   jsr 141e2 <KPrintF>
    16b8:	|     |  |   addq.l #4,sp
      return;
    16ba:	+-----|--|-- bra.w 1cd2 <CstScaleSprite+0x71e>
    }
    extrawords = 1;
    16be:	|     |  \-> move.w #1,78(sp)
    cutwordssource = (x*-1)/16; 
    16c4:	|     |      move.w 16(sp),d0
    16c8:	|     |  /-- bpl.s 16ce <CstScaleSprite+0x11a>
    16ca:	|     |  |   addi.w #15,d0
    16ce:	|     |  \-> asr.w #4,d0
    16d0:	|     |      neg.w d0
    16d2:	|     |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    16d6:	|     |      move.w 16(sp),d0
    16da:	|     |      ext.l d0
    16dc:	|     |      neg.l d0
    16de:	|     |      andi.l #-2147483633,d0
    16e4:	|     |  /-- bpl.s 16ee <CstScaleSprite+0x13a>
    16e6:	|     |  |   subq.l #1,d0
    16e8:	|     |  |   moveq #-16,d1
    16ea:	|     |  |   or.l d1,d0
    16ec:	|     |  |   addq.l #1,d0
    16ee:	|     |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    16f2:	|     |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    16f6:	|     |      movea.l 84(sp),a0
    16fa:	|     |      move.l 24(a0),d0
    16fe:	|     |      move.l d0,d2
    1700:	|     |      moveq #0,d0
    1702:	|     |      move.w 76(sp),d0
    1706:	|     |      add.l d0,d0
    1708:	|     |      move.l d0,d3
    170a:	|     |      movea.l 84(sp),a0
    170e:	|     |      move.l (a0),d0
    1710:	|     |  /-- bpl.s 1714 <CstScaleSprite+0x160>
    1712:	|     |  |   addq.l #7,d0
    1714:	|     |  \-> asr.l #3,d0
    1716:	|     |      movea.l 84(sp),a0
    171a:	|     |      move.l 4(a0),d1
    171e:	|     |      move.l d1,-(sp)
    1720:	|     |      move.l d0,-(sp)
    1722:	|     |      jsr 14a1c <__mulsi3>
    1728:	|     |      addq.l #8,sp
    172a:	|     |      move.l d0,d1
    172c:	|     |      move.l d1,d0
    172e:	|     |      add.l d0,d0
    1730:	|     |      add.l d0,d0
    1732:	|     |      add.l d1,d0
    1734:	|     |      add.l d3,d0
    1736:	|     |      add.l d0,d2
    1738:	|     |      movea.l 84(sp),a0
    173c:	|     |      move.l (a0),d0
    173e:	|     |      move.l 40(sp),-(sp)
    1742:	|     |      move.l d0,-(sp)
    1744:	|     |      jsr 14a1c <__mulsi3>
    174a:	|     |      addq.l #8,sp
    174c:	|     |      lsr.l #3,d0
    174e:	|     |      move.l d2,d1
    1750:	|     |      add.l d0,d1
    1752:	|     |      move.l d1,68(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1756:	|     |      movea.l 84(sp),a0
    175a:	|     |      move.l 24(a0),d0
    175e:	|     |      move.l d0,d1
    1760:	|     |      moveq #0,d0
    1762:	|     |      move.w 76(sp),d0
    1766:	|     |      add.l d0,d0
    1768:	|     |      move.l d1,d2
    176a:	|     |      add.l d0,d2
    176c:	|     |      movea.l 84(sp),a0
    1770:	|     |      move.l (a0),d0
    1772:	|     |      move.l 40(sp),-(sp)
    1776:	|     |      move.l d0,-(sp)
    1778:	|     |      jsr 14a1c <__mulsi3>
    177e:	|     |      addq.l #8,sp
    1780:	|     |      lsr.l #3,d0
    1782:	|     |      move.l d2,d1
    1784:	|     |      add.l d0,d1
    1786:	|     |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 - 2;
    178a:	|     |      move.l 192e0 <winWidth>,d0
    1790:	|     |      move.l 44(sp),-(sp)
    1794:	|     |      move.l d0,-(sp)
    1796:	|     |      jsr 14a1c <__mulsi3>
    179c:	|     |      addq.l #8,sp
    179e:	|     |      move.l d0,d1
    17a0:	|     |      lsr.l #3,d1
    17a2:	|     |      move.l 192c6 <CstBackDrop>,d0
    17a8:	|     |      add.l d1,d0
    17aa:	|     |      move.l d0,d2
    17ac:	|     |      subq.l #2,d2
    17ae:	|     |      move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 - 2;
    17b2:	|     |      move.l 192e0 <winWidth>,d0
    17b8:	|     |      move.l 44(sp),-(sp)
    17bc:	|     |      move.l d0,-(sp)
    17be:	|     |      jsr 14a1c <__mulsi3>
    17c4:	|     |      addq.l #8,sp
    17c6:	|     |      move.l d0,d1
    17c8:	|     |      lsr.l #3,d1
    17ca:	|     |      move.l 192d4 <CstDrawBuffer>,d0
    17d0:	|     |      add.l d1,d0
    17d2:	|     |      move.l d0,d1
    17d4:	|     |      subq.l #2,d1
    17d6:	|     |      move.l d1,56(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    17da:	|     |      moveq #0,d0
    17dc:	|     |      move.w 74(sp),d0
    17e0:	|     |      moveq #16,d1
    17e2:	|     |      sub.l d0,d1
    17e4:	|     |      move.l d1,d0
    17e6:	|     |      moveq #12,d2
    17e8:	|     |      lsl.l d2,d0
    17ea:	|     |      addi.l #4042,d0
    17f0:	|     |      move.l d0,52(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    17f4:	|     |      moveq #0,d0
    17f6:	|     |      move.w 74(sp),d0
    17fa:	|     |      moveq #16,d1
    17fc:	|     |      sub.l d0,d1
    17fe:	|     |      move.l d1,d0
    1800:	|     |      moveq #12,d1
    1802:	|     |      lsl.l d1,d0
    1804:	|     |      move.l d0,48(sp)
    1808:	|  /--|----- bra.w 1af2 <CstScaleSprite+0x53e>

  } else if(x + single->width > winWidth) { //Rightmost part outside screen
    180c:	|  |  \----> movea.w 16(sp),a1
    1810:	|  |         movea.l 84(sp),a0
    1814:	|  |         move.l (a0),d0
    1816:	|  |         add.l a1,d0
    1818:	|  |         move.l d0,d1
    181a:	|  |         move.l 192e0 <winWidth>,d0
    1820:	|  |         cmp.l d1,d0
    1822:	|  |  /----- bcc.w 19b2 <CstScaleSprite+0x3fe>
    if(x - single->width > winWidth)
    1826:	|  |  |      movea.w 16(sp),a1
    182a:	|  |  |      movea.l 84(sp),a0
    182e:	|  |  |      move.l (a0),d0
    1830:	|  |  |      move.l a1,d1
    1832:	|  |  |      sub.l d0,d1
    1834:	|  |  |      move.l 192e0 <winWidth>,d0
    183a:	|  |  |      cmp.l d1,d0
    183c:	|  |  |  /-- bcc.s 1850 <CstScaleSprite+0x29c>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    183e:	|  |  |  |   pea 14cf8 <thumbnail.c.7eb31449+0x100>
    1844:	|  |  |  |   jsr 141e2 <KPrintF>
    184a:	|  |  |  |   addq.l #4,sp
      return;
    184c:	+--|--|--|-- bra.w 1cd2 <CstScaleSprite+0x71e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1850:	|  |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1854:	|  |  |      movea.w 16(sp),a1
    1858:	|  |  |      movea.l 84(sp),a0
    185c:	|  |  |      move.l (a0),d0
    185e:	|  |  |      add.l a1,d0
    1860:	|  |  |      move.l d0,d1
    1862:	|  |  |      move.l 192e0 <winWidth>,d0
    1868:	|  |  |      sub.l d0,d1
    186a:	|  |  |      move.l d1,d0
    186c:	|  |  |      lsr.l #4,d0
    186e:	|  |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    1872:	|  |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1876:	|  |  |      move.w #-1,72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    187c:	|  |  |      movea.l 84(sp),a0
    1880:	|  |  |      move.l 24(a0),d0
    1884:	|  |  |      move.l d0,d2
    1886:	|  |  |      movea.l 84(sp),a0
    188a:	|  |  |      move.l (a0),d0
    188c:	|  |  |  /-- bpl.s 1890 <CstScaleSprite+0x2dc>
    188e:	|  |  |  |   addq.l #7,d0
    1890:	|  |  |  \-> asr.l #3,d0
    1892:	|  |  |      movea.l 84(sp),a0
    1896:	|  |  |      move.l 4(a0),d1
    189a:	|  |  |      move.l d1,-(sp)
    189c:	|  |  |      move.l d0,-(sp)
    189e:	|  |  |      jsr 14a1c <__mulsi3>
    18a4:	|  |  |      addq.l #8,sp
    18a6:	|  |  |      move.l d0,d1
    18a8:	|  |  |      move.l d1,d0
    18aa:	|  |  |      add.l d0,d0
    18ac:	|  |  |      add.l d0,d0
    18ae:	|  |  |      add.l d1,d0
    18b0:	|  |  |      add.l d0,d2
    18b2:	|  |  |      movea.l 84(sp),a0
    18b6:	|  |  |      move.l (a0),d0
    18b8:	|  |  |      move.l 40(sp),-(sp)
    18bc:	|  |  |      move.l d0,-(sp)
    18be:	|  |  |      jsr 14a1c <__mulsi3>
    18c4:	|  |  |      addq.l #8,sp
    18c6:	|  |  |      lsr.l #3,d0
    18c8:	|  |  |      move.l d2,d1
    18ca:	|  |  |      add.l d0,d1
    18cc:	|  |  |      move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    18d0:	|  |  |      movea.l 84(sp),a0
    18d4:	|  |  |      move.l 24(a0),d0
    18d8:	|  |  |      move.l d0,d2
    18da:	|  |  |      movea.l 84(sp),a0
    18de:	|  |  |      move.l (a0),d0
    18e0:	|  |  |      move.l 40(sp),-(sp)
    18e4:	|  |  |      move.l d0,-(sp)
    18e6:	|  |  |      jsr 14a1c <__mulsi3>
    18ec:	|  |  |      addq.l #8,sp
    18ee:	|  |  |      lsr.l #3,d0
    18f0:	|  |  |      move.l d2,d1
    18f2:	|  |  |      add.l d0,d1
    18f4:	|  |  |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    18f8:	|  |  |      move.l 192e0 <winWidth>,d0
    18fe:	|  |  |      move.l 44(sp),-(sp)
    1902:	|  |  |      move.l d0,-(sp)
    1904:	|  |  |      jsr 14a1c <__mulsi3>
    190a:	|  |  |      addq.l #8,sp
    190c:	|  |  |      move.l d0,d1
    190e:	|  |  |      lsr.l #3,d1
    1910:	|  |  |      move.l 192c6 <CstBackDrop>,d0
    1916:	|  |  |      add.l d0,d1
    1918:	|  |  |      move.w 16(sp),d0
    191c:	|  |  |  /-- bpl.s 1922 <CstScaleSprite+0x36e>
    191e:	|  |  |  |   addi.w #15,d0
    1922:	|  |  |  \-> asr.w #4,d0
    1924:	|  |  |      movea.w d0,a0
    1926:	|  |  |      move.l a0,d0
    1928:	|  |  |      add.l a0,d0
    192a:	|  |  |      move.l d1,d2
    192c:	|  |  |      add.l d0,d2
    192e:	|  |  |      move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 + (x/16)*2;
    1932:	|  |  |      move.l 192e0 <winWidth>,d0
    1938:	|  |  |      move.l 44(sp),-(sp)
    193c:	|  |  |      move.l d0,-(sp)
    193e:	|  |  |      jsr 14a1c <__mulsi3>
    1944:	|  |  |      addq.l #8,sp
    1946:	|  |  |      move.l d0,d1
    1948:	|  |  |      lsr.l #3,d1
    194a:	|  |  |      move.l 192d4 <CstDrawBuffer>,d0
    1950:	|  |  |      add.l d0,d1
    1952:	|  |  |      move.w 16(sp),d0
    1956:	|  |  |  /-- bpl.s 195c <CstScaleSprite+0x3a8>
    1958:	|  |  |  |   addi.w #15,d0
    195c:	|  |  |  \-> asr.w #4,d0
    195e:	|  |  |      movea.w d0,a0
    1960:	|  |  |      move.l a0,d0
    1962:	|  |  |      add.l a0,d0
    1964:	|  |  |      move.l d1,d2
    1966:	|  |  |      add.l d0,d2
    1968:	|  |  |      move.l d2,56(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    196c:	|  |  |      movea.l 84(sp),a0
    1970:	|  |  |      move.l (a0),d0
    1972:	|  |  |      andi.l #-2147483633,d0
    1978:	|  |  |  /-- bpl.s 1982 <CstScaleSprite+0x3ce>
    197a:	|  |  |  |   subq.l #1,d0
    197c:	|  |  |  |   moveq #-16,d1
    197e:	|  |  |  |   or.l d1,d0
    1980:	|  |  |  |   addq.l #1,d0
    1982:	|  |  |  \-> moveq #12,d2
    1984:	|  |  |      lsl.l d2,d0
    1986:	|  |  |      addi.l #4042,d0
    198c:	|  |  |      move.l d0,52(sp)
    bltcon1 = ((single->width%16) << 12);
    1990:	|  |  |      movea.l 84(sp),a0
    1994:	|  |  |      move.l (a0),d0
    1996:	|  |  |      andi.l #-2147483633,d0
    199c:	|  |  |  /-- bpl.s 19a6 <CstScaleSprite+0x3f2>
    199e:	|  |  |  |   subq.l #1,d0
    19a0:	|  |  |  |   moveq #-16,d1
    19a2:	|  |  |  |   or.l d1,d0
    19a4:	|  |  |  |   addq.l #1,d0
    19a6:	|  |  |  \-> moveq #12,d2
    19a8:	|  |  |      lsl.l d2,d0
    19aa:	|  |  |      move.l d0,48(sp)
    19ae:	|  +--|----- bra.w 1af2 <CstScaleSprite+0x53e>
  } else { //Whole Sprite on Screen
    extrawords = 1;
    19b2:	|  |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    19b8:	|  |         clr.w 76(sp)
    cutmaskpixel = 0;
    19bc:	|  |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    19c0:	|  |         clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    19c4:	|  |         movea.l 84(sp),a0
    19c8:	|  |         move.l 24(a0),d0
    19cc:	|  |         move.l d0,d2
    19ce:	|  |         movea.l 84(sp),a0
    19d2:	|  |         move.l (a0),d0
    19d4:	|  |     /-- bpl.s 19d8 <CstScaleSprite+0x424>
    19d6:	|  |     |   addq.l #7,d0
    19d8:	|  |     \-> asr.l #3,d0
    19da:	|  |         movea.l 84(sp),a0
    19de:	|  |         move.l 4(a0),d1
    19e2:	|  |         move.l d1,-(sp)
    19e4:	|  |         move.l d0,-(sp)
    19e6:	|  |         jsr 14a1c <__mulsi3>
    19ec:	|  |         addq.l #8,sp
    19ee:	|  |         move.l d0,d1
    19f0:	|  |         move.l d1,d0
    19f2:	|  |         add.l d0,d0
    19f4:	|  |         add.l d0,d0
    19f6:	|  |         add.l d1,d0
    19f8:	|  |         add.l d0,d2
    19fa:	|  |         movea.l 84(sp),a0
    19fe:	|  |         move.l (a0),d0
    1a00:	|  |         move.l 40(sp),-(sp)
    1a04:	|  |         move.l d0,-(sp)
    1a06:	|  |         jsr 14a1c <__mulsi3>
    1a0c:	|  |         addq.l #8,sp
    1a0e:	|  |         lsr.l #3,d0
    1a10:	|  |         move.l d2,d1
    1a12:	|  |         add.l d0,d1
    1a14:	|  |         move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    1a18:	|  |         movea.l 84(sp),a0
    1a1c:	|  |         move.l 24(a0),d0
    1a20:	|  |         move.l d0,d2
    1a22:	|  |         movea.l 84(sp),a0
    1a26:	|  |         move.l (a0),d0
    1a28:	|  |         move.l 40(sp),-(sp)
    1a2c:	|  |         move.l d0,-(sp)
    1a2e:	|  |         jsr 14a1c <__mulsi3>
    1a34:	|  |         addq.l #8,sp
    1a36:	|  |         lsr.l #3,d0
    1a38:	|  |         move.l d2,d1
    1a3a:	|  |         add.l d0,d1
    1a3c:	|  |         move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    1a40:	|  |         move.l 192e0 <winWidth>,d0
    1a46:	|  |         move.l 44(sp),-(sp)
    1a4a:	|  |         move.l d0,-(sp)
    1a4c:	|  |         jsr 14a1c <__mulsi3>
    1a52:	|  |         addq.l #8,sp
    1a54:	|  |         move.l d0,d1
    1a56:	|  |         lsr.l #3,d1
    1a58:	|  |         move.l 192c6 <CstBackDrop>,d0
    1a5e:	|  |         add.l d0,d1
    1a60:	|  |         move.w 16(sp),d0
    1a64:	|  |     /-- bpl.s 1a6a <CstScaleSprite+0x4b6>
    1a66:	|  |     |   addi.w #15,d0
    1a6a:	|  |     \-> asr.w #4,d0
    1a6c:	|  |         movea.w d0,a0
    1a6e:	|  |         move.l a0,d0
    1a70:	|  |         add.l a0,d0
    1a72:	|  |         move.l d1,d2
    1a74:	|  |         add.l d0,d2
    1a76:	|  |         move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 + (x/16)*2;
    1a7a:	|  |         move.l 192e0 <winWidth>,d0
    1a80:	|  |         move.l 44(sp),-(sp)
    1a84:	|  |         move.l d0,-(sp)
    1a86:	|  |         jsr 14a1c <__mulsi3>
    1a8c:	|  |         addq.l #8,sp
    1a8e:	|  |         move.l d0,d1
    1a90:	|  |         lsr.l #3,d1
    1a92:	|  |         move.l 192d4 <CstDrawBuffer>,d0
    1a98:	|  |         add.l d0,d1
    1a9a:	|  |         move.w 16(sp),d0
    1a9e:	|  |     /-- bpl.s 1aa4 <CstScaleSprite+0x4f0>
    1aa0:	|  |     |   addi.w #15,d0
    1aa4:	|  |     \-> asr.w #4,d0
    1aa6:	|  |         movea.w d0,a0
    1aa8:	|  |         move.l a0,d0
    1aaa:	|  |         add.l a0,d0
    1aac:	|  |         move.l d1,d2
    1aae:	|  |         add.l d0,d2
    1ab0:	|  |         move.l d2,56(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    1ab4:	|  |         move.w 16(sp),d0
    1ab8:	|  |         andi.w #-32753,d0
    1abc:	|  |     /-- bpl.s 1ac6 <CstScaleSprite+0x512>
    1abe:	|  |     |   subq.w #1,d0
    1ac0:	|  |     |   ori.w #-16,d0
    1ac4:	|  |     |   addq.w #1,d0
    1ac6:	|  |     \-> ext.l d0
    1ac8:	|  |         moveq #12,d1
    1aca:	|  |         lsl.l d1,d0
    1acc:	|  |         addi.l #4042,d0
    1ad2:	|  |         move.l d0,52(sp)
    bltcon1 = ((x%16) << 12);
    1ad6:	|  |         move.w 16(sp),d0
    1ada:	|  |         andi.w #-32753,d0
    1ade:	|  |     /-- bpl.s 1ae8 <CstScaleSprite+0x534>
    1ae0:	|  |     |   subq.w #1,d0
    1ae2:	|  |     |   ori.w #-16,d0
    1ae6:	|  |     |   addq.w #1,d0
    1ae8:	|  |     \-> ext.l d0
    1aea:	|  |         moveq #12,d2
    1aec:	|  |         lsl.l d2,d0
    1aee:	|  |         move.l d0,48(sp)
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    1af2:	|  \-------> moveq #0,d0
    1af4:	|            move.w 74(sp),d0
    1af8:	|            moveq #0,d1
    1afa:	|            not.w d1
    1afc:	|            asr.l d0,d1
    1afe:	|            move.w d1,30(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    1b02:	|            moveq #0,d1
    1b04:	|            move.w 76(sp),d1
    1b08:	|            moveq #0,d0
    1b0a:	|            move.w 78(sp),d0
    1b0e:	|            sub.l d0,d1
    1b10:	|            move.l d1,d0
    1b12:	|            add.w d0,d0
    1b14:	|            move.w d0,28(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    1b18:	|            moveq #0,d1
    1b1a:	|            move.w 76(sp),d1
    1b1e:	|            moveq #0,d0
    1b20:	|            move.w 78(sp),d0
    1b24:	|            sub.l d0,d1
    1b26:	|            move.l d1,d0
    1b28:	|            add.w d0,d0
    1b2a:	|            move.w d0,26(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    1b2e:	|            move.l 192e0 <winWidth>,d0
    1b34:	|            lsr.l #3,d0
    1b36:	|            move.l d0,d1
    1b38:	|            movea.l 84(sp),a0
    1b3c:	|            move.l (a0),d0
    1b3e:	|        /-- bpl.s 1b42 <CstScaleSprite+0x58e>
    1b40:	|        |   addq.l #7,d0
    1b42:	|        \-> asr.l #3,d0
    1b44:	|            move.l d0,d0
    1b46:	|            sub.w d0,d1
    1b48:	|            move.w 76(sp),d0
    1b4c:	|            sub.w 78(sp),d0
    1b50:	|            add.w d0,d0
    1b52:	|            add.w d1,d0
    1b54:	|            move.w d0,24(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    1b58:	|            move.l 192e0 <winWidth>,d0
    1b5e:	|            lsr.l #3,d0
    1b60:	|            move.l d0,d1
    1b62:	|            movea.l 84(sp),a0
    1b66:	|            move.l (a0),d0
    1b68:	|        /-- bpl.s 1b6c <CstScaleSprite+0x5b8>
    1b6a:	|        |   addq.l #7,d0
    1b6c:	|        \-> asr.l #3,d0
    1b6e:	|            move.l d0,d0
    1b70:	|            sub.w d0,d1
    1b72:	|            move.w 76(sp),d0
    1b76:	|            sub.w 78(sp),d0
    1b7a:	|            add.w d0,d0
    1b7c:	|            add.w d1,d0
    1b7e:	|            move.w d0,22(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1b82:	|            move.l #14675968,18(sp)
  WaitBlit();
    1b8a:	|            move.l 19398 <GfxBase>,d0
    1b90:	|            movea.l d0,a6
    1b92:	|            jsr -228(a6)

  custom->bltafwm = bltafwm;
    1b96:	|            movea.l 18(sp),a0
    1b9a:	|            move.w 30(sp),68(a0)
  custom->bltalwm = bltalwm;
    1ba0:	|            movea.l 18(sp),a0
    1ba4:	|            move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    1baa:	|            move.w 28(sp),d0
    1bae:	|            movea.l 18(sp),a0
    1bb2:	|            move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    1bb6:	|            move.w 26(sp),d0
    1bba:	|            movea.l 18(sp),a0
    1bbe:	|            move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    1bc2:	|            move.w 24(sp),d0
    1bc6:	|            movea.l 18(sp),a0
    1bca:	|            move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    1bce:	|            move.w 22(sp),d0
    1bd2:	|            movea.l 18(sp),a0
    1bd6:	|            move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    1bda:	|            move.l 52(sp),d0
    1bde:	|            movea.l 18(sp),a0
    1be2:	|            move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    1be6:	|            move.l 48(sp),d0
    1bea:	|            movea.l 18(sp),a0
    1bee:	|            move.w d0,66(a0)

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1bf2:	|            clr.l 32(sp)
    1bf6:	|     /----- bra.w 1cc8 <CstScaleSprite+0x714>
  {
    custom->bltapt = (APTR) bltapt;
    1bfa:	|  /--|----> move.l 68(sp),d0
    1bfe:	|  |  |      movea.l 18(sp),a0
    1c02:	|  |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    1c06:	|  |  |      move.l 64(sp),d0
    1c0a:	|  |  |      movea.l 18(sp),a0
    1c0e:	|  |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    1c12:	|  |  |      move.l 60(sp),d0
    1c16:	|  |  |      movea.l 18(sp),a0
    1c1a:	|  |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    1c1e:	|  |  |      move.l 56(sp),d0
    1c22:	|  |  |      movea.l 18(sp),a0
    1c26:	|  |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    1c2a:	|  |  |      move.l 36(sp),d0
    1c2e:	|  |  |      move.w d0,d1
    1c30:	|  |  |      lsl.w #6,d1
    1c32:	|  |  |      movea.l 84(sp),a0
    1c36:	|  |  |      move.l (a0),d0
    1c38:	|  |  |      movea.l d0,a0
    1c3a:	|  |  |      cmpa.w #0,a0
    1c3e:	|  |  |  /-- bge.s 1c44 <CstScaleSprite+0x690>
    1c40:	|  |  |  |   lea 15(a0),a0
    1c44:	|  |  |  \-> move.l a0,d0
    1c46:	|  |  |      asr.l #4,d0
    1c48:	|  |  |      move.l d0,d0
    1c4a:	|  |  |      add.w d1,d0
    1c4c:	|  |  |      sub.w 76(sp),d0
    1c50:	|  |  |      add.w 78(sp),d0
    1c54:	|  |  |      movea.l 18(sp),a0
    1c58:	|  |  |      move.w d0,88(a0)
    bltbpt += (single->width >> 3)*single->height;
    1c5c:	|  |  |      movea.l 84(sp),a0
    1c60:	|  |  |      move.l (a0),d0
    1c62:	|  |  |      asr.l #3,d0
    1c64:	|  |  |      movea.l 84(sp),a0
    1c68:	|  |  |      move.l 4(a0),d1
    1c6c:	|  |  |      move.l d1,-(sp)
    1c6e:	|  |  |      move.l d0,-(sp)
    1c70:	|  |  |      jsr 14a1c <__mulsi3>
    1c76:	|  |  |      addq.l #8,sp
    1c78:	|  |  |      add.l d0,64(sp)
    bltcpt += winWidth/8*winHeight;
    1c7c:	|  |  |      move.l 192e0 <winWidth>,d0
    1c82:	|  |  |      lsr.l #3,d0
    1c84:	|  |  |      move.l 192e4 <winHeight>,d1
    1c8a:	|  |  |      move.l d1,-(sp)
    1c8c:	|  |  |      move.l d0,-(sp)
    1c8e:	|  |  |      jsr 14a1c <__mulsi3>
    1c94:	|  |  |      addq.l #8,sp
    1c96:	|  |  |      add.l d0,60(sp)
    bltdpt += winWidth/8*winHeight;
    1c9a:	|  |  |      move.l 192e0 <winWidth>,d0
    1ca0:	|  |  |      lsr.l #3,d0
    1ca2:	|  |  |      move.l 192e4 <winHeight>,d1
    1ca8:	|  |  |      move.l d1,-(sp)
    1caa:	|  |  |      move.l d0,-(sp)
    1cac:	|  |  |      jsr 14a1c <__mulsi3>
    1cb2:	|  |  |      addq.l #8,sp
    1cb4:	|  |  |      add.l d0,56(sp)
    WaitBlit();
    1cb8:	|  |  |      move.l 19398 <GfxBase>,d0
    1cbe:	|  |  |      movea.l d0,a6
    1cc0:	|  |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1cc4:	|  |  |      addq.l #1,32(sp)
    1cc8:	|  |  \----> moveq #4,d0
    1cca:	|  |         cmp.l 32(sp),d0
    1cce:	|  \-------- bge.w 1bfa <CstScaleSprite+0x646>
  }   
}
    1cd2:	\----------> movem.l (sp)+,d2-d3/a6
    1cd6:	             lea 68(sp),sp
    1cda:	             rts

00001cdc <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    1cdc:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1cde:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    1ce4:	move.l 8(sp),d0
    1ce8:	movea.l (sp),a0
    1cea:	move.l d0,128(a0)
}
    1cee:	nop
    1cf0:	addq.l #4,sp
    1cf2:	rts

00001cf4 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    1cf4:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    1cf8:	move.l 192d0 <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    1d00:	move.l 192d4 <CstDrawBuffer>,d0
    1d06:	move.l d0,192d0 <CstViewBuffer>
  CstDrawBuffer = tmp;
    1d0c:	move.l 12(sp),192d4 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    1d14:	move.l 192ca <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    1d1c:	move.l 192d0 <CstViewBuffer>,d0
    1d22:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    1d26:	move.l 4(sp),d0
    1d2a:	clr.w d0
    1d2c:	swap d0
    1d2e:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    1d32:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    1d36:	movea.w #118,a0
    1d3a:	adda.l 8(sp),a0
    1d3e:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    1d40:	movea.w #114,a0
    1d44:	adda.l 8(sp),a0
    1d48:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1d4c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1d54:	move.l 4(sp),d0
    1d58:	clr.w d0
    1d5a:	swap d0
    1d5c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1d60:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    1d64:	movea.w #126,a0
    1d68:	adda.l 8(sp),a0
    1d6c:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    1d6e:	movea.w #122,a0
    1d72:	adda.l 8(sp),a0
    1d76:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    1d7a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1d82:	move.l 4(sp),d0
    1d86:	clr.w d0
    1d88:	swap d0
    1d8a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1d8e:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1d92:	movea.l 8(sp),a0
    1d96:	lea 134(a0),a0
    1d9a:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    1d9c:	movea.l 8(sp),a0
    1da0:	lea 130(a0),a0
    1da4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1da8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1db0:	move.l 4(sp),d0
    1db4:	clr.w d0
    1db6:	swap d0
    1db8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1dbc:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    1dc0:	movea.l 8(sp),a0
    1dc4:	lea 142(a0),a0
    1dc8:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    1dca:	movea.l 8(sp),a0
    1dce:	lea 138(a0),a0
    1dd2:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1dd6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1dde:	move.l 4(sp),d0
    1de2:	clr.w d0
    1de4:	swap d0
    1de6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1dea:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    1dee:	movea.l 8(sp),a0
    1df2:	lea 150(a0),a0
    1df6:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    1df8:	movea.l 8(sp),a0
    1dfc:	lea 146(a0),a0
    1e00:	move.w 2(sp),(a0)

}
    1e04:	nop
    1e06:	lea 16(sp),sp
    1e0a:	rts

00001e0c <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    1e0c:	          lea -44(sp),sp
    1e10:	          move.l a6,-(sp)

  width = width / 8;
    1e12:	          move.l 52(sp),d0
    1e16:	      /-- bpl.s 1e1a <CstReserveBackdrop+0xe>
    1e18:	      |   addq.l #7,d0
    1e1a:	      \-> asr.l #3,d0
    1e1c:	          move.l d0,52(sp)

  if( width < 40) 
    1e20:	          moveq #39,d0
    1e22:	          cmp.l 52(sp),d0
    1e26:	      /-- blt.s 1e3c <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    1e28:	      |   pea 14d2b <thumbnail.c.7eb31449+0x133>
    1e2e:	      |   jsr 141e2 <KPrintF>
    1e34:	      |   addq.l #4,sp
    return FALSE;
    1e36:	      |   clr.w d0
    1e38:	/-----|-- bra.w 1ff8 <CstReserveBackdrop+0x1ec>
  }  

  CstCopperList = CstCreateCopperlist( width);
    1e3c:	|     \-> move.l 52(sp),-(sp)
    1e40:	|         jsr f40 <CstCreateCopperlist>
    1e46:	|         addq.l #4,sp
    1e48:	|         move.l d0,192ca <CstCopperList>
  CstBackdropSizePlane = width*height;
    1e4e:	|         move.l 52(sp),d1
    1e52:	|         move.l 56(sp),d0
    1e56:	|         muls.w d1,d0
    1e58:	|         move.w d0,192c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    1e5e:	|         move.w 192c4 <CstBackdropSizePlane>,d1
    1e64:	|         move.w d1,d0
    1e66:	|         add.w d0,d0
    1e68:	|         add.w d0,d0
    1e6a:	|         add.w d1,d0
    1e6c:	|         move.w d0,192c2 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    1e72:	|         move.w 192c2 <CstBackdropSize>,d0
    1e78:	|         move.w d0,d0
    1e7a:	|         andi.l #65535,d0
    1e80:	|         move.l d0,36(sp)
    1e84:	|         moveq #2,d1
    1e86:	|         move.l d1,32(sp)
    1e8a:	|         move.l 1938c <SysBase>,d0
    1e90:	|         movea.l d0,a6
    1e92:	|         move.l 36(sp),d0
    1e96:	|         move.l 32(sp),d1
    1e9a:	|         jsr -684(a6)
    1e9e:	|         move.l d0,28(sp)
    1ea2:	|         move.l 28(sp),d0
    1ea6:	|         move.l d0,192c6 <CstBackDrop>
  if( !CstBackDrop)
    1eac:	|         move.l 192c6 <CstBackDrop>,d0
    1eb2:	|     /-- bne.s 1ec8 <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    1eb4:	|     |   pea 14d69 <custom.c.49191367+0x3d>
    1eba:	|     |   jsr 141e2 <KPrintF>
    1ec0:	|     |   addq.l #4,sp
    return FALSE;  
    1ec2:	|     |   clr.w d0
    1ec4:	+-----|-- bra.w 1ff8 <CstReserveBackdrop+0x1ec>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    1ec8:	|     \-> move.l 192c6 <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1ed0:	|         clr.l 40(sp)
    1ed4:	|     /-- bra.s 1eea <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    1ed6:	|  /--|-> move.l 44(sp),d0
    1eda:	|  |  |   move.l d0,d1
    1edc:	|  |  |   addq.l #4,d1
    1ede:	|  |  |   move.l d1,44(sp)
    1ee2:	|  |  |   movea.l d0,a0
    1ee4:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1ee6:	|  |  |   addq.l #1,40(sp)
    1eea:	|  |  \-> move.w 192c2 <CstBackdropSize>,d0
    1ef0:	|  |      lsr.w #2,d0
    1ef2:	|  |      move.w d0,d0
    1ef4:	|  |      andi.l #65535,d0
    1efa:	|  |      cmp.l 40(sp),d0
    1efe:	|  \----- bgt.s 1ed6 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    1f00:	|         move.w 192c2 <CstBackdropSize>,d0
    1f06:	|         move.w d0,d0
    1f08:	|         andi.l #65535,d0
    1f0e:	|         move.l 52(sp),d1
    1f12:	|         add.l d1,d1
    1f14:	|         add.l d1,d0
    1f16:	|         move.l d0,24(sp)
    1f1a:	|         moveq #2,d0
    1f1c:	|         move.l d0,20(sp)
    1f20:	|         move.l 1938c <SysBase>,d0
    1f26:	|         movea.l d0,a6
    1f28:	|         move.l 24(sp),d0
    1f2c:	|         move.l 20(sp),d1
    1f30:	|         jsr -684(a6)
    1f34:	|         move.l d0,16(sp)
    1f38:	|         move.l 16(sp),d0
    1f3c:	|         move.l d0,192d4 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    1f42:	|         move.w 192c2 <CstBackdropSize>,d0
    1f48:	|         move.w d0,d0
    1f4a:	|         andi.l #65535,d0
    1f50:	|         move.l 52(sp),d1
    1f54:	|         add.l d1,d1
    1f56:	|         add.l d1,d0
    1f58:	|         move.l d0,12(sp)
    1f5c:	|         moveq #2,d1
    1f5e:	|         move.l d1,8(sp)
    1f62:	|         move.l 1938c <SysBase>,d0
    1f68:	|         movea.l d0,a6
    1f6a:	|         move.l 12(sp),d0
    1f6e:	|         move.l 8(sp),d1
    1f72:	|         jsr -684(a6)
    1f76:	|         move.l d0,4(sp)
    1f7a:	|         move.l 4(sp),d0
    1f7e:	|         move.l d0,192d0 <CstViewBuffer>
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    1f84:	|         move.l 192d4 <CstDrawBuffer>,d1
    1f8a:	|         move.l 52(sp),d0
    1f8e:	|     /-- bpl.s 1f92 <CstReserveBackdrop+0x186>
    1f90:	|     |   addq.l #3,d0
    1f92:	|     \-> asr.l #2,d0
    1f94:	|         add.l d0,d0
    1f96:	|         add.l d0,d0
    1f98:	|         add.l d1,d0
    1f9a:	|         move.l d0,192d4 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    1fa0:	|         move.l 192d0 <CstViewBuffer>,d1
    1fa6:	|         move.l 52(sp),d0
    1faa:	|     /-- bpl.s 1fae <CstReserveBackdrop+0x1a2>
    1fac:	|     |   addq.l #3,d0
    1fae:	|     \-> asr.l #2,d0
    1fb0:	|         add.l d0,d0
    1fb2:	|         add.l d0,d0
    1fb4:	|         add.l d1,d0
    1fb6:	|         move.l d0,192d0 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1fbc:	|         move.l 192ca <CstCopperList>,d0
    1fc2:	|     /-- beq.s 1fd4 <CstReserveBackdrop+0x1c8>
    1fc4:	|     |   move.l 192d4 <CstDrawBuffer>,d0
    1fca:	|     +-- beq.s 1fd4 <CstReserveBackdrop+0x1c8>
    1fcc:	|     |   move.l 192d0 <CstViewBuffer>,d0
    1fd2:	|  /--|-- bne.s 1fe6 <CstReserveBackdrop+0x1da>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1fd4:	|  |  \-> pea 14da1 <custom.c.49191367+0x75>
    1fda:	|  |      jsr 141e2 <KPrintF>
    1fe0:	|  |      addq.l #4,sp
    return FALSE;
    1fe2:	|  |      clr.w d0
    1fe4:	+--|----- bra.s 1ff8 <CstReserveBackdrop+0x1ec>
  }

  CstSetCl( CstCopperList);
    1fe6:	|  \----> move.l 192ca <CstCopperList>,d0
    1fec:	|         move.l d0,-(sp)
    1fee:	|         jsr 1cdc <CstSetCl>
    1ff4:	|         addq.l #4,sp
  return TRUE;
    1ff6:	|         moveq #1,d0

}
    1ff8:	\-------> movea.l (sp)+,a6
    1ffa:	          lea 44(sp),sp
    1ffe:	          rts

00002000 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    2000:	    lea -12(sp),sp
    2004:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    2006:	    move.l 192d4 <CstDrawBuffer>,d0
    200c:	/-- beq.s 2026 <CstFreeBuffer+0x26>
    200e:	|   move.l 192d4 <CstDrawBuffer>,12(sp)
    2016:	|   move.l 1938c <SysBase>,d0
    201c:	|   movea.l d0,a6
    201e:	|   movea.l 12(sp),a1
    2022:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    2026:	\-> move.l 192d0 <CstViewBuffer>,d0
    202c:	/-- beq.s 2046 <CstFreeBuffer+0x46>
    202e:	|   move.l 192d0 <CstViewBuffer>,8(sp)
    2036:	|   move.l 1938c <SysBase>,d0
    203c:	|   movea.l d0,a6
    203e:	|   movea.l 8(sp),a1
    2042:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    2046:	\-> move.l 192ca <CstCopperList>,d0
    204c:	/-- beq.s 2066 <CstFreeBuffer+0x66>
    204e:	|   move.l 192ca <CstCopperList>,4(sp)
    2056:	|   move.l 1938c <SysBase>,d0
    205c:	|   movea.l d0,a6
    205e:	|   movea.l 4(sp),a1
    2062:	|   jsr -690(a6)
}
    2066:	\-> nop
    2068:	    movea.l (sp)+,a6
    206a:	    lea 12(sp),sp
    206e:	    rts

00002070 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2070:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2074:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2078:	       tst.l 24(sp)
    207c:	   /-- bge.s 2082 <drawLine+0x12>
    207e:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2082:	   \-> tst.l 28(sp)
    2086:	   /-- bge.s 208c <drawLine+0x1c>
    2088:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    208c:	   \-> tst.l 32(sp)
    2090:	   /-- bge.s 2096 <drawLine+0x26>
    2092:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2096:	   \-> tst.l 36(sp)
    209a:	   /-- bge.s 20a0 <drawLine+0x30>
    209c:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    20a0:	   \-> move.l 1947c <sceneWidth>,d0
    20a6:	       cmp.l 24(sp),d0
    20aa:	   /-- bge.s 20ba <drawLine+0x4a>
    20ac:	   |   move.l 1947c <sceneWidth>,d0
    20b2:	   |   move.l d0,d1
    20b4:	   |   subq.l #1,d1
    20b6:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    20ba:	   \-> move.l 1947c <sceneWidth>,d0
    20c0:	       cmp.l 32(sp),d0
    20c4:	   /-- bge.s 20d4 <drawLine+0x64>
    20c6:	   |   move.l 1947c <sceneWidth>,d0
    20cc:	   |   move.l d0,d1
    20ce:	   |   subq.l #1,d1
    20d0:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    20d4:	   \-> move.l 19480 <sceneHeight>,d0
    20da:	       cmp.l 28(sp),d0
    20de:	   /-- bge.s 20ee <drawLine+0x7e>
    20e0:	   |   move.l 19480 <sceneHeight>,d0
    20e6:	   |   move.l d0,d1
    20e8:	   |   subq.l #1,d1
    20ea:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    20ee:	   \-> move.l 19480 <sceneHeight>,d0
    20f4:	       cmp.l 36(sp),d0
    20f8:	   /-- bge.s 2108 <drawLine+0x98>
    20fa:	   |   move.l 19480 <sceneHeight>,d0
    2100:	   |   move.l d0,d1
    2102:	   |   subq.l #1,d1
    2104:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2108:	   \-> move.l 24(sp),d0
    210c:	       cmp.l 32(sp),d0
    2110:	/----- ble.s 212c <drawLine+0xbc>
		x = x2; 
    2112:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2118:	|      tst.w 10(sp)
    211c:	|      seq d0
    211e:	|      neg.b d0
    2120:	|      move.b d0,d0
    2122:	|      andi.w #255,d0
    2126:	|      move.w d0,10(sp)
    212a:	|  /-- bra.s 2132 <drawLine+0xc2>
	} else x = x1;
    212c:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2132:	   \-> move.l 28(sp),d1
    2136:	       cmp.l 36(sp),d1
    213a:	/----- ble.s 2156 <drawLine+0xe6>
		y = y2; 
    213c:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2142:	|      tst.w 10(sp)
    2146:	|      seq d0
    2148:	|      neg.b d0
    214a:	|      move.b d0,d0
    214c:	|      andi.w #255,d0
    2150:	|      move.w d0,10(sp)
    2154:	|  /-- bra.s 215c <drawLine+0xec>
	} else y = y1;	
    2156:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    215c:	   \-> move.l 32(sp),d0
    2160:	       sub.l 24(sp),d0
    2164:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2168:	       move.l 6(sp),d0
    216c:	   /-- bpl.s 2170 <drawLine+0x100>
    216e:	   |   neg.l d0
    2170:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2174:	       move.l 36(sp),d1
    2178:	       sub.l 28(sp),d1
    217c:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2180:	       move.l 2(sp),d0
    2184:	   /-- bpl.s 2188 <drawLine+0x118>
    2186:	   |   neg.l d0
    2188:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    218c:	       tst.l 6(sp)
    2190:	   /-- bne.s 21b4 <drawLine+0x144>
		diffX = 1;
    2192:	   |   moveq #1,d0
    2194:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2198:	   |   move.l 1947c <sceneWidth>,d0
    219e:	   |   subq.l #1,d0
    21a0:	   |   cmp.l 16(sp),d0
    21a4:	   +-- bne.s 21b4 <drawLine+0x144>
    21a6:	   |   move.l 1947c <sceneWidth>,d0
    21ac:	   |   move.l d0,d1
    21ae:	   |   subq.l #2,d1
    21b0:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    21b4:	   \-> tst.l 2(sp)
    21b8:	   /-- bne.s 21dc <drawLine+0x16c>
		diffY = 1;
    21ba:	   |   moveq #1,d0
    21bc:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    21c0:	   |   move.l 19480 <sceneHeight>,d0
    21c6:	   |   subq.l #1,d0
    21c8:	   |   cmp.l 12(sp),d0
    21cc:	   +-- bne.s 21dc <drawLine+0x16c>
    21ce:	   |   move.l 19480 <sceneHeight>,d0
    21d4:	   |   move.l d0,d1
    21d6:	   |   subq.l #2,d1
    21d8:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    21dc:	   \-> pea 14dce <custom.c.49191367+0xa2>
    21e2:	       jsr 141e2 <KPrintF>
    21e8:	       addq.l #4,sp
	
}
    21ea:	       nop
    21ec:	       lea 20(sp),sp
    21f0:	       rts

000021f2 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    21f2:	                      lea -24(sp),sp
    21f6:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    21f8:	                      move.l 192e8 <firstTexture>,d0
    21fe:	/-------------------- beq.w 22dc <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2202:	|                     clr.l 24(sp)
    2206:	|     /-------------- bra.w 22d0 <deleteTextures+0xde>
			BOOL found = FALSE;
    220a:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    220e:	|  |  |               move.l 192e8 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    2216:	|  |  |               movea.l 20(sp),a0
    221a:	|  |  |               move.l (a0),d1
    221c:	|  |  |               move.l 24(sp),d0
    2220:	|  |  |               add.l d0,d0
    2222:	|  |  |               add.l d0,d0
    2224:	|  |  |               movea.l 36(sp),a0
    2228:	|  |  |               adda.l d0,a0
    222a:	|  |  |               move.l (a0),d0
    222c:	|  |  |               cmp.l d1,d0
    222e:	|  |  |  /----------- bne.w 22c2 <deleteTextures+0xd0>
				found = TRUE;
    2232:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    2238:	|  |  |  |            movea.l 20(sp),a0
    223c:	|  |  |  |            move.l 12(a0),d0
    2240:	|  |  |  |            move.l d0,192e8 <firstTexture>
				FreeVec(list);
    2246:	|  |  |  |            move.l 20(sp),6(sp)
    224c:	|  |  |  |            move.l 1938c <SysBase>,d0
    2252:	|  |  |  |            movea.l d0,a6
    2254:	|  |  |  |            movea.l 6(sp),a1
    2258:	|  |  |  |            jsr -690(a6)
				continue;
    225c:	|  |  |  |  /-------- bra.s 22cc <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    225e:	|  |  |  |  |  /----> movea.l 20(sp),a0
    2262:	|  |  |  |  |  |      movea.l 12(a0),a0
    2266:	|  |  |  |  |  |      move.l (a0),d1
    2268:	|  |  |  |  |  |      move.l 24(sp),d0
    226c:	|  |  |  |  |  |      add.l d0,d0
    226e:	|  |  |  |  |  |      add.l d0,d0
    2270:	|  |  |  |  |  |      movea.l 36(sp),a0
    2274:	|  |  |  |  |  |      adda.l d0,a0
    2276:	|  |  |  |  |  |      move.l (a0),d0
    2278:	|  |  |  |  |  |      cmp.l d1,d0
    227a:	|  |  |  |  |  |  /-- bne.s 22b8 <deleteTextures+0xc6>
					found = TRUE;
    227c:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2282:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2286:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    228c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2290:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2294:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2298:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    229c:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    22a0:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    22a6:	|  |  |  |  |  |  |   move.l 1938c <SysBase>,d0
    22ac:	|  |  |  |  |  |  |   movea.l d0,a6
    22ae:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    22b2:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    22b6:	|  |  |  |  +--|--|-- bra.s 22cc <deleteTextures+0xda>
				}
				list = list->next;
    22b8:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    22bc:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    22c2:	|  |  |  \--|--|----> movea.l 20(sp),a0
    22c6:	|  |  |     |  |      move.l 12(a0),d0
    22ca:	|  |  |     |  \----- bne.s 225e <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    22cc:	|  |  |     \-------> addq.l #1,24(sp)
    22d0:	|  |  \-------------> move.l 24(sp),d0
    22d4:	|  |                  cmp.l 32(sp),d0
    22d8:	|  \----------------- bcs.w 220a <deleteTextures+0x18>
			}
		}
	}
}
    22dc:	\-------------------> nop
    22de:	                      movea.l (sp)+,a6
    22e0:	                      lea 24(sp),sp
    22e4:	                      rts

000022e6 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    22e6:	subq.l #4,sp
    22e8:	move.l 8(sp),d0
    22ec:	move.w d0,d0
    22ee:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    22f2:	pea 14df1 <custom.c.49191367+0xc5>
    22f8:	jsr 141e2 <KPrintF>
    22fe:	addq.l #4,sp
}
    2300:	nop
    2302:	addq.l #4,sp
    2304:	rts

00002306 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    2306:	       moveq #-1,d0
    2308:	       cmp.l 4(sp),d0
    230c:	   /-- bne.s 2312 <resourceNameFromNum+0xc>
    230e:	   |   moveq #0,d0
    2310:	/--|-- bra.s 234a <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    2312:	|  \-> move.l 19368 <numResourceNames>,d0
    2318:	|  /-- bne.s 2322 <resourceNameFromNum+0x1c>
    231a:	|  |   move.l #85537,d0
    2320:	+--|-- bra.s 234a <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    2322:	|  \-> move.l 19368 <numResourceNames>,d0
    2328:	|      cmp.l 4(sp),d0
    232c:	|  /-- ble.s 2344 <resourceNameFromNum+0x3e>
    232e:	|  |   move.l 19320 <allResourceNames>,d1
    2334:	|  |   move.l 4(sp),d0
    2338:	|  |   add.l d0,d0
    233a:	|  |   add.l d0,d0
    233c:	|  |   movea.l d1,a0
    233e:	|  |   adda.l d0,a0
    2340:	|  |   move.l (a0),d0
    2342:	+--|-- bra.s 234a <resourceNameFromNum+0x44>
	return "Unknown resource";
    2344:	|  \-> move.l #85546,d0
    234a:	\----> rts

0000234c <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    234c:	          lea -40(sp),sp
    2350:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    2354:	          move.l #320,192e0 <winWidth>
    winHeight = 256;
    235e:	          move.l #256,192e4 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    2368:	          tst.l 56(sp)
    236c:	      /-- bne.s 2384 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    236e:	      |   pea 14e3b <custom.c.49191367+0x10f>
    2374:	      |   jsr b8 <copyString>
    237a:	      |   addq.l #4,sp
    237c:	      |   move.l d0,192f8 <bundleFolder>
    2382:	   /--|-- bra.s 239a <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    2384:	   |  \-> movea.l 60(sp),a0
    2388:	   |      move.l (a0),d0
    238a:	   |      move.l d0,-(sp)
    238c:	   |      jsr b8 <copyString>
    2392:	   |      addq.l #4,sp
    2394:	   |      move.l d0,192f8 <bundleFolder>
	}
    
	int lastSlash = -1;
    239a:	   \----> moveq #-1,d0
    239c:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    23a0:	          clr.l 40(sp)
    23a4:	   /----- bra.s 23c6 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    23a6:	/--|----> move.l 192f8 <bundleFolder>,d1
    23ac:	|  |      move.l 40(sp),d0
    23b0:	|  |      movea.l d1,a0
    23b2:	|  |      adda.l d0,a0
    23b4:	|  |      move.b (a0),d0
    23b6:	|  |      cmpi.b #47,d0
    23ba:	|  |  /-- bne.s 23c2 <main_sludge+0x76>
    23bc:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    23c2:	|  |  \-> addq.l #1,40(sp)
    23c6:	|  \----> move.l 192f8 <bundleFolder>,d1
    23cc:	|         move.l 40(sp),d0
    23d0:	|         movea.l d1,a0
    23d2:	|         adda.l d0,a0
    23d4:	|         move.b (a0),d0
    23d6:	\-------- bne.s 23a6 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    23d8:	          move.l 192f8 <bundleFolder>,d0
    23de:	          move.l 44(sp),d1
    23e2:	          addq.l #1,d1
    23e4:	          movea.l d0,a0
    23e6:	          adda.l d1,a0
    23e8:	          clr.b (a0)

	if (argc > 1) {
    23ea:	          moveq #1,d0
    23ec:	          cmp.l 56(sp),d0
    23f0:	      /-- bge.s 240c <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    23f2:	      |   move.l 56(sp),d0
    23f6:	      |   addi.l #1073741823,d0
    23fc:	      |   add.l d0,d0
    23fe:	      |   add.l d0,d0
    2400:	      |   movea.l 60(sp),a0
    2404:	      |   adda.l d0,a0
    2406:	      |   move.l (a0),48(sp)
    240a:	   /--|-- bra.s 2466 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    240c:	   |  \-> move.l 192f8 <bundleFolder>,d0
    2412:	   |      pea 14e41 <custom.c.49191367+0x115>
    2418:	   |      move.l d0,-(sp)
    241a:	   |      jsr 116c6 <joinStrings>
    2420:	   |      addq.l #8,sp
    2422:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    2426:	   |      move.l 48(sp),-(sp)
    242a:	   |      jsr 115c0 <fileExists>
    2430:	   |      addq.l #4,sp
    2432:	   |      tst.b d0
    2434:	   +----- bne.s 2466 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    2436:	   |      move.l 48(sp),36(sp)
    243c:	   |      move.l 1938c <SysBase>,d0
    2442:	   |      movea.l d0,a6
    2444:	   |      movea.l 36(sp),a1
    2448:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    244c:	   |      move.l 192f8 <bundleFolder>,d0
    2452:	   |      pea 14e4e <custom.c.49191367+0x122>
    2458:	   |      move.l d0,-(sp)
    245a:	   |      jsr 116c6 <joinStrings>
    2460:	   |      addq.l #8,sp
    2462:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    2466:	   \----> pea 14e57 <custom.c.49191367+0x12b>
    246c:	          jsr 141e2 <KPrintF>
    2472:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    2474:	          move.l 48(sp),-(sp)
    2478:	          jsr 115c0 <fileExists>
    247e:	          addq.l #4,sp
    2480:	          tst.b d0
    2482:	      /-- bne.s 24da <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    2484:	      |   move.l 19394 <DOSBase>,d0
    248a:	      |   movea.l d0,a6
    248c:	      |   jsr -60(a6)
    2490:	      |   move.l d0,28(sp)
    2494:	      |   move.l 28(sp),d0
    2498:	      |   move.l d0,24(sp)
    249c:	      |   move.l #85591,20(sp)
    24a4:	      |   moveq #21,d0
    24a6:	      |   move.l d0,16(sp)
    24aa:	      |   move.l 19394 <DOSBase>,d0
    24b0:	      |   movea.l d0,a6
    24b2:	      |   move.l 24(sp),d1
    24b6:	      |   move.l 20(sp),d2
    24ba:	      |   move.l 16(sp),d3
    24be:	      |   jsr -48(a6)
    24c2:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    24c6:	      |   pea 14e57 <custom.c.49191367+0x12b>
    24cc:	      |   jsr 141e2 <KPrintF>
    24d2:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    24d4:	      |   moveq #0,d0
    24d6:	/-----|-- bra.w 26c4 <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    24da:	|     \-> pea 14e6d <custom.c.49191367+0x141>
    24e0:	|         jsr 141e2 <KPrintF>
    24e6:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    24e8:	|         move.l 48(sp),-(sp)
    24ec:	|         jsr 26ce <setGameFilePath>
    24f2:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    24f4:	|         move.l 48(sp),-(sp)
    24f8:	|         jsr 3a02 <initSludge>
    24fe:	|         addq.l #4,sp
    2500:	|         tst.w d0
    2502:	|     /-- bne.s 250a <main_sludge+0x1be>
    2504:	|     |   moveq #0,d0
    2506:	+-----|-- bra.w 26c4 <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    250a:	|     \-> move.l 192e0 <winWidth>,d0
    2510:	|         cmpi.l #320,d0
    2516:	|     /-- bne.s 2526 <main_sludge+0x1da>
    2518:	|     |   move.l 192e4 <winHeight>,d0
    251e:	|     |   cmpi.l #256,d0
    2524:	|  /--|-- beq.s 2548 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    2526:	|  |  \-> pea 14e7e <custom.c.49191367+0x152>
    252c:	|  |      jsr 141e2 <KPrintF>
    2532:	|  |      addq.l #4,sp
		winWidth = 320;
    2534:	|  |      move.l #320,192e0 <winWidth>
		winHeight = 256;
    253e:	|  |      move.l #256,192e4 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    2548:	|  \----> pea 14efb <custom.c.49191367+0x1cf>
    254e:	|         jsr 141e2 <KPrintF>
    2554:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    2556:	|         move.l 192e4 <winHeight>,d0
    255c:	|         move.l d0,d1
    255e:	|         move.l 192e0 <winWidth>,d0
    2564:	|         move.l d1,-(sp)
    2566:	|         move.l d0,-(sp)
    2568:	|         jsr aeae <resizeBackdrop>
    256e:	|         addq.l #8,sp
    2570:	|         tst.w d0
    2572:	|     /-- bne.s 2588 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    2574:	|     |   pea 14f0e <custom.c.49191367+0x1e2>
    257a:	|     |   jsr 141e2 <KPrintF>
    2580:	|     |   addq.l #4,sp
		return FALSE;
    2582:	|     |   moveq #0,d0
    2584:	+-----|-- bra.w 26c4 <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    2588:	|     \-> pea 14f34 <custom.c.49191367+0x208>
    258e:	|         jsr 141e2 <KPrintF>
    2594:	|         addq.l #4,sp
	if (! initPeople ())
    2596:	|         jsr 85c0 <initPeople>
    259c:	|         tst.w d0
    259e:	|     /-- bne.s 25b4 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    25a0:	|     |   pea 14f41 <custom.c.49191367+0x215>
    25a6:	|     |   jsr 141e2 <KPrintF>
    25ac:	|     |   addq.l #4,sp
		return FALSE;
    25ae:	|     |   moveq #0,d0
    25b0:	+-----|-- bra.w 26c4 <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    25b4:	|     \-> pea 14f62 <custom.c.49191367+0x236>
    25ba:	|         jsr 141e2 <KPrintF>
    25c0:	|         addq.l #4,sp
	if (! initFloor ())
    25c2:	|         jsr 13598 <initFloor>
    25c8:	|         tst.w d0
    25ca:	|     /-- bne.s 25e0 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    25cc:	|     |   pea 14f6e <custom.c.49191367+0x242>
    25d2:	|     |   jsr 141e2 <KPrintF>
    25d8:	|     |   addq.l #4,sp
		
		return FALSE;
    25da:	|     |   moveq #0,d0
    25dc:	+-----|-- bra.w 26c4 <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    25e0:	|     \-> pea 14f8e <custom.c.49191367+0x262>
    25e6:	|         jsr 141e2 <KPrintF>
    25ec:	|         addq.l #4,sp
	if (! initObjectTypes ())
    25ee:	|         jsr b06a <initObjectTypes>
    25f4:	|         tst.w d0
    25f6:	|     /-- bne.s 260c <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    25f8:	|     |   pea 14f9f <custom.c.49191367+0x273>
    25fe:	|     |   jsr 141e2 <KPrintF>
    2604:	|     |   addq.l #4,sp
		return FALSE;
    2606:	|     |   moveq #0,d0
    2608:	+-----|-- bra.w 26c4 <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    260c:	|     \-> pea 14fc5 <custom.c.49191367+0x299>
    2612:	|         jsr 141e2 <KPrintF>
    2618:	|         addq.l #4,sp
	initSpeech ();
    261a:	|         jsr 5dcc <initSpeech>
	KPrintF("Init status bar\n");
    2620:	|         pea 14fd2 <custom.c.49191367+0x2a6>
    2626:	|         jsr 141e2 <KPrintF>
    262c:	|         addq.l #4,sp
	initStatusBar ();
    262e:	|         jsr 5890 <initStatusBar>

	KPrintF("Get numbered string\n");
    2634:	|         pea 14fe3 <custom.c.49191367+0x2b7>
    263a:	|         jsr 141e2 <KPrintF>
    2640:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    2642:	|         pea 1 <_start+0x1>
    2646:	|         jsr 4bae <getNumberedString>
    264c:	|         addq.l #4,sp
    264e:	|         move.l d0,192f0 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    2654:	|         pea 14ff8 <custom.c.49191367+0x2cc>
    265a:	|         jsr 141e2 <KPrintF>
    2660:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    2662:	|         move.l 1935c <noStack>,d0
    2668:	|         pea 1 <_start+0x1>
    266c:	|         move.l d0,-(sp)
    266e:	|         clr.l -(sp)
    2670:	|         clr.l -(sp)
    2672:	|         clr.l -(sp)
    2674:	|         jsr 4a36 <startNewFunctionNum>
    267a:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    267e:	|         pea 15010 <custom.c.49191367+0x2e4>
    2684:	|         jsr 141e2 <KPrintF>
    268a:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    268c:	|         clr.l 192fc <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    2692:	|     /-- bra.s 26a6 <main_sludge+0x35a>
		sludgeDisplay ();
    2694:	|  /--|-> jsr 49dc <sludgeDisplay>
		handleInput();
    269a:	|  |  |   jsr 39fa <handleInput>
		WaitVbl();
    26a0:	|  |  |   jsr 14116 <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    26a6:	|  |  \-> move.l 192fc <weAreDoneSoQuit>,d0
    26ac:	|  \----- beq.s 2694 <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    26ae:	|         move.l 48(sp),32(sp)
    26b4:	|         move.l 1938c <SysBase>,d0
    26ba:	|         movea.l d0,a6
    26bc:	|         movea.l 32(sp),a1
    26c0:	|         jsr -690(a6)
}
    26c4:	\-------> movem.l (sp)+,d2-d3/a6
    26c8:	          lea 40(sp),sp
    26cc:	          rts

000026ce <setGameFilePath>:

void setGameFilePath (char * f) {
    26ce:	          lea -1104(sp),sp
    26d2:	          move.l a6,-(sp)
    26d4:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    26d6:	          move.l #1112,d0
    26dc:	          add.l sp,d0
    26de:	          addi.l #-1102,d0
    26e4:	          move.l d0,1100(sp)
    26e8:	          move.l #998,1096(sp)
    26f0:	          move.l 19394 <DOSBase>,d0
    26f6:	          movea.l d0,a6
    26f8:	          move.l 1100(sp),d1
    26fc:	          move.l 1096(sp),d2
    2700:	          jsr -564(a6)
    2704:	          move.w d0,1094(sp)
    2708:	          move.w 1094(sp),d0
    270c:	      /-- bne.s 271c <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    270e:	      |   pea 15023 <custom.c.49191367+0x2f7>
    2714:	      |   jsr 141e2 <KPrintF>
    271a:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    271c:	      \-> moveq #-1,d0
    271e:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    2722:	          clr.l 1104(sp)
    2726:	   /----- bra.s 2744 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    2728:	/--|----> move.l 1104(sp),d0
    272c:	|  |      movea.l 1116(sp),a0
    2730:	|  |      adda.l d0,a0
    2732:	|  |      move.b (a0),d0
    2734:	|  |      cmpi.b #47,d0
    2738:	|  |  /-- bne.s 2740 <setGameFilePath+0x72>
    273a:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    2740:	|  |  \-> addq.l #1,1104(sp)
    2744:	|  \----> move.l 1104(sp),d0
    2748:	|         movea.l 1116(sp),a0
    274c:	|         adda.l d0,a0
    274e:	|         move.b (a0),d0
    2750:	\-------- bne.s 2728 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    2752:	          moveq #-1,d0
    2754:	          cmp.l 1108(sp),d0
    2758:	   /----- beq.s 27d2 <setGameFilePath+0x104>
		f[got] = 0;	
    275a:	   |      move.l 1108(sp),d0
    275e:	   |      movea.l 1116(sp),a0
    2762:	   |      adda.l d0,a0
    2764:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2766:	   |      move.l 1116(sp),1090(sp)
    276c:	   |      moveq #-2,d0
    276e:	   |      move.l d0,1086(sp)
    2772:	   |      move.l 19394 <DOSBase>,d0
    2778:	   |      movea.l d0,a6
    277a:	   |      move.l 1090(sp),d1
    277e:	   |      move.l 1086(sp),d2
    2782:	   |      jsr -84(a6)
    2786:	   |      move.l d0,1082(sp)
    278a:	   |      move.l 1082(sp),d0
    278e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    2792:	   |      move.l 1078(sp),1074(sp)
    2798:	   |      move.l 19394 <DOSBase>,d0
    279e:	   |      movea.l d0,a6
    27a0:	   |      move.l 1074(sp),d1
    27a4:	   |      jsr -126(a6)
    27a8:	   |      move.l d0,1070(sp)
    27ac:	   |      move.l 1070(sp),d0
    27b0:	   |  /-- bne.s 27c4 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    27b2:	   |  |   move.l 1116(sp),-(sp)
    27b6:	   |  |   pea 15049 <custom.c.49191367+0x31d>
    27bc:	   |  |   jsr 141e2 <KPrintF>
    27c2:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    27c4:	   |  \-> move.l 1108(sp),d0
    27c8:	   |      movea.l 1116(sp),a0
    27cc:	   |      adda.l d0,a0
    27ce:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    27d2:	   \----> move.l #400,1066(sp)
    27da:	          clr.l 1062(sp)
    27de:	          move.l 1938c <SysBase>,d0
    27e4:	          movea.l d0,a6
    27e6:	          move.l 1066(sp),d0
    27ea:	          move.l 1062(sp),d1
    27ee:	          jsr -684(a6)
    27f2:	          move.l d0,1058(sp)
    27f6:	          move.l 1058(sp),d0
    27fa:	          move.l d0,192f4 <gamePath>
	if (gamePath==0) {
    2800:	          move.l 192f4 <gamePath>,d0
    2806:	      /-- bne.s 281a <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    2808:	      |   pea 1507c <custom.c.49191367+0x350>
    280e:	      |   jsr 141e2 <KPrintF>
    2814:	      |   addq.l #4,sp
    2816:	   /--|-- bra.w 2902 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    281a:	   |  \-> move.l 192f4 <gamePath>,1054(sp)
    2822:	   |      moveq #-2,d0
    2824:	   |      move.l d0,1050(sp)
    2828:	   |      move.l 19394 <DOSBase>,d0
    282e:	   |      movea.l d0,a6
    2830:	   |      move.l 1054(sp),d1
    2834:	   |      move.l 1050(sp),d2
    2838:	   |      jsr -84(a6)
    283c:	   |      move.l d0,1046(sp)
    2840:	   |      move.l 1046(sp),d0
    2844:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2848:	   |      move.l 1042(sp),1038(sp)
    284e:	   |      move.l 19394 <DOSBase>,d0
    2854:	   |      movea.l d0,a6
    2856:	   |      move.l 1038(sp),d1
    285a:	   |      jsr -126(a6)
    285e:	   |      move.l d0,1034(sp)
    2862:	   |      move.l 1034(sp),d0
    2866:	   |  /-- bne.s 2876 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2868:	   |  |   pea 150b7 <custom.c.49191367+0x38b>
    286e:	   |  |   jsr 141e2 <KPrintF>
    2874:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2876:	   |  \-> move.l #1112,d0
    287c:	   |      add.l sp,d0
    287e:	   |      addi.l #-1102,d0
    2884:	   |      move.l d0,1030(sp)
    2888:	   |      moveq #-2,d0
    288a:	   |      move.l d0,1026(sp)
    288e:	   |      move.l 19394 <DOSBase>,d0
    2894:	   |      movea.l d0,a6
    2896:	   |      move.l 1030(sp),d1
    289a:	   |      move.l 1026(sp),d2
    289e:	   |      jsr -84(a6)
    28a2:	   |      move.l d0,1022(sp)
    28a6:	   |      move.l 1022(sp),d0
    28aa:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    28ae:	   |      move.l 1042(sp),1018(sp)
    28b4:	   |      move.l 19394 <DOSBase>,d0
    28ba:	   |      movea.l d0,a6
    28bc:	   |      move.l 1018(sp),d1
    28c0:	   |      jsr -126(a6)
    28c4:	   |      move.l d0,1014(sp)
    28c8:	   |      move.l 1014(sp),d0
    28cc:	   |  /-- bne.s 28e2 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    28ce:	   |  |   moveq #10,d0
    28d0:	   |  |   add.l sp,d0
    28d2:	   |  |   move.l d0,-(sp)
    28d4:	   |  |   pea 150e3 <custom.c.49191367+0x3b7>
    28da:	   |  |   jsr 141e2 <KPrintF>
    28e0:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    28e2:	   |  \-> move.l 192f4 <gamePath>,d0
    28e8:	   +----- beq.s 2902 <setGameFilePath+0x234>
    28ea:	   |      move.l 192f4 <gamePath>,1010(sp)
    28f2:	   |      move.l 1938c <SysBase>,d0
    28f8:	   |      movea.l d0,a6
    28fa:	   |      movea.l 1010(sp),a1
    28fe:	   |      jsr -690(a6)
}
    2902:	   \----> move.l (sp)+,d2
    2904:	          movea.l (sp)+,a6
    2906:	          lea 1104(sp),sp
    290a:	          rts

0000290c <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    290c:	/-------> lea -16(sp),sp
    2910:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2912:	|         move.l 24(sp),-(sp)
    2916:	|         jsr 47be <pauseFunction>
    291c:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    291e:	|     /-- bra.s 2930 <abortFunction+0x24>
    2920:	|  /--|-> moveq #24,d0
    2922:	|  |  |   add.l 24(sp),d0
    2926:	|  |  |   move.l d0,-(sp)
    2928:	|  |  |   jsr 12b1e <trimStack>
    292e:	|  |  |   addq.l #4,sp
    2930:	|  |  \-> movea.l 24(sp),a0
    2934:	|  |      move.l 24(a0),d0
    2938:	|  \----- bne.s 2920 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    293a:	|         movea.l 24(sp),a0
    293e:	|         move.l 4(a0),12(sp)
    2944:	|         move.l 1938c <SysBase>,d0
    294a:	|         movea.l d0,a6
    294c:	|         movea.l 12(sp),a1
    2950:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2954:	|         clr.l 16(sp)
    2958:	|     /-- bra.s 2978 <abortFunction+0x6c>
    295a:	|  /--|-> movea.l 24(sp),a0
    295e:	|  |  |   move.l 20(a0),d1
    2962:	|  |  |   move.l 16(sp),d0
    2966:	|  |  |   lsl.l #3,d0
    2968:	|  |  |   add.l d1,d0
    296a:	|  |  |   move.l d0,-(sp)
    296c:	|  |  |   jsr 123e8 <unlinkVar>
    2972:	|  |  |   addq.l #4,sp
    2974:	|  |  |   addq.l #1,16(sp)
    2978:	|  |  \-> movea.l 24(sp),a0
    297c:	|  |      move.l 8(a0),d0
    2980:	|  |      cmp.l 16(sp),d0
    2984:	|  \----- bgt.s 295a <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2986:	|         movea.l 24(sp),a0
    298a:	|         move.l 20(a0),8(sp)
    2990:	|         move.l 1938c <SysBase>,d0
    2996:	|         movea.l d0,a6
    2998:	|         movea.l 8(sp),a1
    299c:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    29a0:	|         moveq #28,d0
    29a2:	|         add.l 24(sp),d0
    29a6:	|         move.l d0,-(sp)
    29a8:	|         jsr 123e8 <unlinkVar>
    29ae:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    29b0:	|         movea.l 24(sp),a0
    29b4:	|         move.l 40(a0),d0
    29b8:	|     /-- beq.s 29ca <abortFunction+0xbe>
    29ba:	|     |   movea.l 24(sp),a0
    29be:	|     |   move.l 40(a0),d0
    29c2:	|     |   move.l d0,-(sp)
    29c4:	\-----|-- jsr 290c <abortFunction>(pc)
    29c8:	      |   addq.l #4,sp
	FreeVec(fun);
    29ca:	      \-> move.l 24(sp),4(sp)
    29d0:	          move.l 1938c <SysBase>,d0
    29d6:	          movea.l d0,a6
    29d8:	          movea.l 4(sp),a1
    29dc:	          jsr -690(a6)
	fun = NULL;
    29e0:	          clr.l 24(sp)
}
    29e4:	          nop
    29e6:	          movea.l (sp)+,a6
    29e8:	          lea 16(sp),sp
    29ec:	          rts

000029ee <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    29ee:	          subq.l #8,sp
	int n = 0;
    29f0:	          clr.l 4(sp)
	*killedMyself = FALSE;
    29f4:	          movea.l 20(sp),a0
    29f8:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    29fa:	          move.l 19324 <allRunningFunctions>,(sp)
	while (fun) {
    2a00:	   /----- bra.s 2a2e <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    2a02:	/--|----> movea.l (sp),a0
    2a04:	|  |      move.l (a0),d0
    2a06:	|  |      cmp.l 12(sp),d0
    2a0a:	|  |  /-- bne.s 2a28 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    2a0c:	|  |  |   movea.l (sp),a0
    2a0e:	|  |  |   move.w #1,54(a0)
			n++;
    2a14:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    2a18:	|  |  |   move.l (sp),d0
    2a1a:	|  |  |   cmp.l 16(sp),d0
    2a1e:	|  |  +-- bne.s 2a28 <cancelAFunction+0x3a>
    2a20:	|  |  |   movea.l 20(sp),a0
    2a24:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    2a28:	|  |  \-> movea.l (sp),a0
    2a2a:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2a2e:	|  \----> tst.l (sp)
    2a30:	\-------- bne.s 2a02 <cancelAFunction+0x14>
	}
	return n;
    2a32:	          move.l 4(sp),d0
}
    2a36:	          addq.l #8,sp
    2a38:	          rts

00002a3a <completeTimers>:


void completeTimers () {
    2a3a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    2a3c:	          move.l 19324 <allRunningFunctions>,(sp)

	while (thisFunction) {
    2a42:	   /----- bra.s 2a58 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2a44:	/--|----> movea.l (sp),a0
    2a46:	|  |      move.b 56(a0),d0
    2a4a:	|  |  /-- bne.s 2a52 <completeTimers+0x18>
    2a4c:	|  |  |   movea.l (sp),a0
    2a4e:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2a52:	|  |  \-> movea.l (sp),a0
    2a54:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2a58:	|  \----> tst.l (sp)
    2a5a:	\-------- bne.s 2a44 <completeTimers+0xa>
	}
}
    2a5c:	          nop
    2a5e:	          nop
    2a60:	          addq.l #4,sp
    2a62:	          rts

00002a64 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2a64:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2a68:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2a6e:	                                                             movea.l 80(sp),a0
    2a72:	                                                             move.w 54(a0),d0
    2a76:	/----------------------------------------------------------- beq.w 3916 <continueFunction+0xeb2>
		abortFunction (fun);
    2a7a:	|                                                            move.l 80(sp),-(sp)
    2a7e:	|                                                            jsr 290c <abortFunction>
    2a84:	|                                                            addq.l #4,sp
		return TRUE;
    2a86:	|                                                            moveq #1,d0
    2a88:	|  /-------------------------------------------------------- bra.w 3920 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2a8c:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2a92:	|  |  |                                                      movea.l 80(sp),a0
    2a96:	|  |  |                                                      move.l 4(a0),d1
    2a9a:	|  |  |                                                      movea.l 80(sp),a0
    2a9e:	|  |  |                                                      move.l 36(a0),d0
    2aa2:	|  |  |                                                      lsl.l #3,d0
    2aa4:	|  |  |                                                      movea.l d1,a0
    2aa6:	|  |  |                                                      adda.l d0,a0
    2aa8:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    2aae:	|  |  |                                                      movea.l 80(sp),a0
    2ab2:	|  |  |                                                      move.l 4(a0),d1
    2ab6:	|  |  |                                                      movea.l 80(sp),a0
    2aba:	|  |  |                                                      move.l 36(a0),d0
    2abe:	|  |  |                                                      lsl.l #3,d0
    2ac0:	|  |  |                                                      movea.l d1,a0
    2ac2:	|  |  |                                                      adda.l d0,a0
    2ac4:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2ac8:	|  |  |                                                      move.l 64(sp),-(sp)
    2acc:	|  |  |                                                      pea 151eb <custom.c.49191367+0x4bf>
    2ad2:	|  |  |                                                      jsr 141e2 <KPrintF>
    2ad8:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2ada:	|  |  |                                                      moveq #41,d0
    2adc:	|  |  |                                                      cmp.l 64(sp),d0
    2ae0:	|  |  |  /-------------------------------------------------- bcs.w 38ca <continueFunction+0xe66>
    2ae4:	|  |  |  |                                                   move.l 64(sp),d0
    2ae8:	|  |  |  |                                                   add.l d0,d0
    2aea:	|  |  |  |                                                   movea.l d0,a0
    2aec:	|  |  |  |                                                   adda.l #11000,a0
    2af2:	|  |  |  |                                                   move.w (a0),d0
    2af4:	|  |  |  |                                                   jmp (2af8 <continueFunction+0x94>,pc,d0.w)
    2af8:	|  |  |  |                                                   bset d6,(a2)
    2afa:	|  |  |  |                                                   ori.w #2670,(a4)
    2afe:	|  |  |  |                                                   eori.w #2416,d6
    2b02:	|  |  |  |                                                   bchg d4,d2
    2b04:	|  |  |  |                                                   bclr d4,(a4)+
    2b06:	|  |  |  |                                                   andi.l #181013194,d4
    2b0c:	|  |  |  |                                                   .short 0x0aca
    2b0e:	|  |  |  |                                                   .short 0x0aca
    2b10:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    2b18:	|  |  |  |                                                   .short 0x0aca
    2b1a:	|  |  |  |                                                   andi.w #906,-(a4)
    2b1e:	|  |  |  |                                                   bchg d1,196(a2)
    2b22:	|  |  |  |                                                   bset d1,580(a4)
    2b26:	|  |  |  |                                                   bclr d1,2576(a2)
    2b2a:	|  |  |  |                                                   andi.b #-56,2762(a2)
    2b30:	|  |  |  |                                                   .short 0x0aca
    2b32:	|  |  |  |                                                   eori.l #63572682,d0
    2b38:	|  |  |  |                                                   .short 0x0aca
    2b3a:	|  |  |  |                                                   bchg d3,-(a2)
    2b3c:	|  |  |  |                                                   bchg #-36,(a2)
    2b40:	|  |  |  |                                                   .short 0x08cc
    2b42:	|  |  |  |                                                   addi.b #14,1038(a0)
    2b48:	|  |  |  |                                                   .short 0x040e
    2b4a:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2b4e:	|  |  |  |                                                   ori.w #8232,(a0)
    2b52:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2b58:	|  |  |  |                                                   ori.w #12136,(a0)
    2b5c:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2b62:	|  |  |  |                                                   ori.w #12328,(a0)
    2b66:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    2b6c:	|  |  |  |                                                   add.l 44(sp),d1
    2b70:	|  |  |  |                                                   moveq #28,d0
    2b72:	|  |  |  |                                                   add.l 80(sp),d0
    2b76:	|  |  |  |                                                   move.l d1,-(sp)
    2b78:	|  |  |  |                                                   move.l d0,-(sp)
    2b7a:	|  |  |  |                                                   jsr 12654 <copyVariable>
    2b80:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    2b82:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2b86:	|  |  |  |                                                   jsr 3926 <finishFunction>
    2b8c:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    2b8e:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2b94:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2b98:	|  |  |  |                                                   jsr 4800 <restartFunction>
    2b9e:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    2ba0:	|  |  |  |  /----------------------------------------------- bra.w 38fe <continueFunction+0xe9a>
				finishFunction (fun);
    2ba4:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    2ba8:	|  |  |  |  |                                                jsr 3926 <finishFunction>
    2bae:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2bb0:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    2bb4:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    2bb8:	|  |  |  |  +----------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2bbc:	|  |  |  |  |                                                movea.l 80(sp),a0
    2bc0:	|  |  |  |  |                                                move.l 28(a0),d0
    2bc4:	|  |  |  |  |                                                moveq #2,d1
    2bc6:	|  |  |  |  |                                                cmp.l d0,d1
    2bc8:	|  |  |  |  |                                            /-- beq.s 2bd4 <continueFunction+0x170>
    2bca:	|  |  |  |  |                                            |   moveq #4,d1
    2bcc:	|  |  |  |  |                                            |   cmp.l d0,d1
    2bce:	|  |  |  |  |                                         /--|-- beq.s 2c22 <continueFunction+0x1be>
    2bd0:	|  |  |  |  |                                /--------|--|-- bra.w 2d0a <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    2bd4:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2bd8:	|  |  |  |  |                                |        |      jsr 47be <pauseFunction>
    2bde:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    2be0:	|  |  |  |  |                                |        |      moveq #24,d0
    2be2:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    2be6:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    2bea:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    2bee:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    2bf2:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    2bf4:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    2bf8:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    2bfc:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    2bfe:	|  |  |  |  |                                |        |      jsr 4a36 <startNewFunctionNum>
    2c04:	|  |  |  |  |                                |        |      lea 20(sp),sp
    2c08:	|  |  |  |  |                                |        |      tst.l d0
    2c0a:	|  |  |  |  |                                |        |  /-- bne.s 2c12 <continueFunction+0x1ae>
    2c0c:	|  |  |  |  |                                |        |  |   clr.w d0
    2c0e:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 3920 <continueFunction+0xebc>
				fun = allRunningFunctions;
    2c12:	|  |  |  |  |                                |        |  \-> move.l 19324 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2c1a:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    2c1e:	|  |  |  |  |                                |  /-----|----- bra.w 2d1e <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    2c22:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    2c26:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    2c2a:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    2c2e:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    2c32:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    2c34:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    2c36:	|  |  |  |  |                                |  |            jsr 10e7c <callBuiltIn>
    2c3c:	|  |  |  |  |                                |  |            lea 12(sp),sp
    2c40:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2c44:	|  |  |  |  |                                |  |            moveq #5,d0
    2c46:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2c4a:	|  |  |  |  |                                |  |  /-------- bcs.w 2d06 <continueFunction+0x2a2>
    2c4e:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    2c52:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2c54:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2c56:	|  |  |  |  |                                |  |  |         adda.l #11362,a0
    2c5c:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    2c5e:	|  |  |  |  |                                |  |  |         jmp (2c62 <continueFunction+0x1fe>,pc,d0.w)
    2c62:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    2c68:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    2c6c:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    2c72:	|  |  |  |  |                                |  |  |         .short 0x51ff
    2c74:	|  |  |  |  |                                |  |  |         jsr 141e2 <KPrintF>
    2c7a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    2c7c:	|  |  |  |  |                                |  |  |         clr.w d0
    2c7e:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 3920 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    2c82:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    2c86:	|  |  |  |  |                                |  |  |         jsr 47be <pauseFunction>
    2c8c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    2c8e:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    2c92:	|  |  |  |  |                                |  |  |  /----- bra.s 2d08 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2c94:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    2c98:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    2c9c:	|  |  |  |  |                                |  |  |  +----- bra.s 2d08 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    2c9e:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    2ca2:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    2ca8:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    2caa:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    2cae:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2cb2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2cb6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2cb8:	|  |  |  |  |                                |  |  |  |      jsr 12a8c <setVariable>
    2cbe:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    2cc2:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    2cc6:	|  |  |  |  |                                |  |  |  |      jsr 47be <pauseFunction>
    2ccc:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    2cce:	|  |  |  |  |                                |  |  |  |      move.l 1935c <noStack>,d1
    2cd4:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2cd8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2cda:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2cdc:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    2ce0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2ce2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2ce4:	|  |  |  |  |                                |  |  |  |      jsr 4a36 <startNewFunctionNum>
    2cea:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    2cee:	|  |  |  |  |                                |  |  |  |      tst.l d0
    2cf0:	|  |  |  |  |                                |  |  |  |  /-- bne.s 2cf8 <continueFunction+0x294>
    2cf2:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    2cf4:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 3920 <continueFunction+0xebc>
							fun = allRunningFunctions;
    2cf8:	|  |  |  |  |                                |  |  |  |  \-> move.l 19324 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    2d00:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    2d04:	|  |  |  |  |                                |  |  |  +----- bra.s 2d08 <continueFunction+0x2a4>

						default:
						break;
    2d06:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    2d08:	|  |  |  |  |                                |  +-----\----X bra.s 2d1e <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    2d0a:	|  |  |  |  |                                \--|----------> pea 1524a <custom.c.49191367+0x51e>
    2d10:	|  |  |  |  |                                   |            jsr 141e2 <KPrintF>
    2d16:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    2d18:	|  |  |  |  |                                   |            clr.w d0
    2d1a:	|  +--|--|--|-----------------------------------|----------- bra.w 3920 <continueFunction+0xebc>
			}
			break;
    2d1e:	|  |  |  |  +-----------------------------------\----------X bra.w 38fe <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    2d22:	|  |  |  |  |                                                moveq #28,d0
    2d24:	|  |  |  |  |                                                add.l 80(sp),d0
    2d28:	|  |  |  |  |                                                clr.l -(sp)
    2d2a:	|  |  |  |  |                                                clr.l -(sp)
    2d2c:	|  |  |  |  |                                                move.l d0,-(sp)
    2d2e:	|  |  |  |  |                                                jsr 12a8c <setVariable>
    2d34:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2d38:	|  |  |  |  +----------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    2d3c:	|  |  |  |  |                                                move.l 68(sp),d1
    2d40:	|  |  |  |  |                                                moveq #28,d0
    2d42:	|  |  |  |  |                                                add.l 80(sp),d0
    2d46:	|  |  |  |  |                                                move.l d1,-(sp)
    2d48:	|  |  |  |  |                                                pea 5 <_start+0x5>
    2d4c:	|  |  |  |  |                                                move.l d0,-(sp)
    2d4e:	|  |  |  |  |                                                jsr 12a8c <setVariable>
    2d54:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2d58:	|  |  |  |  +----------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    2d5c:	|  |  |  |  |                                                move.l 68(sp),d1
    2d60:	|  |  |  |  |                                                moveq #28,d0
    2d62:	|  |  |  |  |                                                add.l 80(sp),d0
    2d66:	|  |  |  |  |                                                move.l d1,-(sp)
    2d68:	|  |  |  |  |                                                pea 1 <_start+0x1>
    2d6c:	|  |  |  |  |                                                move.l d0,-(sp)
    2d6e:	|  |  |  |  |                                                jsr 12a8c <setVariable>
    2d74:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2d78:	|  |  |  |  +----------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    2d7c:	|  |  |  |  |                                                moveq #28,d0
    2d7e:	|  |  |  |  |                                                add.l 80(sp),d0
    2d82:	|  |  |  |  |                                                movea.l 80(sp),a0
    2d86:	|  |  |  |  |                                                movea.l 20(a0),a0
    2d8a:	|  |  |  |  |                                                move.l 68(sp),d1
    2d8e:	|  |  |  |  |                                                lsl.l #3,d1
    2d90:	|  |  |  |  |                                                add.l a0,d1
    2d92:	|  |  |  |  |                                                move.l d0,-(sp)
    2d94:	|  |  |  |  |                                                move.l d1,-(sp)
    2d96:	|  |  |  |  |                                                jsr 12654 <copyVariable>
    2d9c:	|  |  |  |  |                                                addq.l #8,sp
    2d9e:	|  |  |  |  |                                                tst.w d0
    2da0:	|  |  |  |  |  /-------------------------------------------- bne.w 38dc <continueFunction+0xe78>
    2da4:	|  |  |  |  |  |                                             clr.w d0
    2da6:	|  +--|--|--|--|-------------------------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    2daa:	|  |  |  |  |  |                                             moveq #28,d0
    2dac:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2db0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2db2:	|  |  |  |  |  |                                             jsr 126da <getBoolean>
    2db8:	|  |  |  |  |  |                                             addq.l #4,sp
    2dba:	|  |  |  |  |  |                                             tst.w d0
    2dbc:	|  |  |  |  |  |                                      /----- beq.s 2dd8 <continueFunction+0x374>
    2dbe:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    2dc2:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    2dc6:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2dc8:	|  |  |  |  |  |                                      |      jsr 126da <getBoolean>
    2dce:	|  |  |  |  |  |                                      |      addq.l #4,sp
    2dd0:	|  |  |  |  |  |                                      |      tst.w d0
    2dd2:	|  |  |  |  |  |                                      +----- beq.s 2dd8 <continueFunction+0x374>
    2dd4:	|  |  |  |  |  |                                      |      moveq #1,d0
    2dd6:	|  |  |  |  |  |                                      |  /-- bra.s 2dda <continueFunction+0x376>
    2dd8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2dda:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2ddc:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2de0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2de2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2de6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2de8:	|  |  |  |  |  |                                             jsr 12a8c <setVariable>
    2dee:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2df2:	|  |  |  |  |  |                                             moveq #24,d0
    2df4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2df8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2dfa:	|  |  |  |  |  |                                             jsr 12b1e <trimStack>
    2e00:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2e02:	|  |  |  |  +--|-------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    2e06:	|  |  |  |  |  |                                             moveq #28,d0
    2e08:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2e0c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2e0e:	|  |  |  |  |  |                                             jsr 126da <getBoolean>
    2e14:	|  |  |  |  |  |                                             addq.l #4,sp
    2e16:	|  |  |  |  |  |                                             tst.w d0
    2e18:	|  |  |  |  |  |                                         /-- bne.s 2e30 <continueFunction+0x3cc>
    2e1a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2e1e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2e22:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2e24:	|  |  |  |  |  |                                         |   jsr 126da <getBoolean>
    2e2a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2e2c:	|  |  |  |  |  |                                         |   tst.w d0
    2e2e:	|  |  |  |  |  |                                      /--|-- beq.s 2e34 <continueFunction+0x3d0>
    2e30:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2e32:	|  |  |  |  |  |                                      |  /-- bra.s 2e36 <continueFunction+0x3d2>
    2e34:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2e36:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2e38:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2e3c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2e3e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2e42:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2e44:	|  |  |  |  |  |                                             jsr 12a8c <setVariable>
    2e4a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2e4e:	|  |  |  |  |  |                                             moveq #24,d0
    2e50:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2e54:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2e56:	|  |  |  |  |  |                                             jsr 12b1e <trimStack>
    2e5c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2e5e:	|  |  |  |  +--|-------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2e62:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2e66:	|  |  |  |  |  |                                             moveq #28,d0
    2e68:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2e6c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2e6e:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2e72:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2e74:	|  |  |  |  |  |                                             jsr 12a8c <setVariable>
    2e7a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2e7e:	|  |  |  |  +--|-------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2e82:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2e86:	|  |  |  |  |  |                                             moveq #28,d0
    2e88:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2e8c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2e8e:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2e92:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2e94:	|  |  |  |  |  |                                             jsr 12a8c <setVariable>
    2e9a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2e9e:	|  |  |  |  +--|-------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2ea2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2ea6:	|  |  |  |  |  |                                             moveq #28,d0
    2ea8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2eac:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2eae:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2eb2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2eb4:	|  |  |  |  |  |                                             jsr 12a8c <setVariable>
    2eba:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2ebe:	|  |  |  |  +--|-------------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2ec2:	|  |  |  |  |  |                                             move.l 192ec <dialogValue>,d0
    2ec8:	|  |  |  |  |  |                                             moveq #1,d1
    2eca:	|  |  |  |  |  |                                             cmp.l d0,d1
    2ecc:	|  |  |  |  |  |  /----------------------------------------- beq.w 38e0 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    2ed0:	|  |  |  |  |  |  |                                          pea 1525f <custom.c.49191367+0x533>
    2ed6:	|  |  |  |  |  |  |                                          jsr 141e2 <KPrintF>
    2edc:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2ede:	|  |  |  |  |  |  |                                          clr.w d0
    2ee0:	|  +--|--|--|--|--|----------------------------------------- bra.w 3920 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2ee4:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2ee8:	|  |  |  |  |  |  |                                          moveq #28,d0
    2eea:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2eee:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2ef0:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2ef2:	|  |  |  |  |  |  |                                          jsr 1221e <loadStringToVar>
    2ef8:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2efa:	|  |  |  |  |  |  |                                          tst.w d0
    2efc:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 38e4 <continueFunction+0xe80>
					return FALSE;
    2f00:	|  |  |  |  |  |  |  |                                       clr.w d0
    2f02:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2f06:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f0a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2f0e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2f10:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2f12:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2f14:	|  |  |  |  |  |  |  |                                /----- beq.s 2f72 <continueFunction+0x50e>
    2f16:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2f18:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2f1a:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3106 <continueFunction+0x6a2>
    2f1e:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2f20:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2f2c <continueFunction+0x4c8>
    2f22:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2f24:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2f26:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2f72 <continueFunction+0x50e>
    2f28:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3106 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2f2c:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2f2e:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2f32:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2f5e <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2f34:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2f36:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2f3a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2f3c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2f3e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2f40:	|  |  |  |  |  |  |  |              |                 |  |   jsr 12a8c <setVariable>
    2f46:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2f4a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2f4c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2f50:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2f52:	|  |  |  |  |  |  |  |              |                 |  |   jsr 12b1e <trimStack>
    2f58:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2f5a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 311c <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2f5e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 152a0 <custom.c.49191367+0x574>
    2f64:	|  |  |  |  |  |  |  |              |  |              |      jsr 141e2 <KPrintF>
    2f6a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2f6c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2f6e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 3920 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2f72:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2f76:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2f7a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2f7e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2f80:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2f96 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2f82:	|  |  |  |  |  |  |  |              |  |                 |   pea 152dc <custom.c.49191367+0x5b0>
    2f88:	|  |  |  |  |  |  |  |              |  |                 |   jsr 141e2 <KPrintF>
    2f8e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2f90:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2f92:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3920 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2f96:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2f98:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2f9c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2f9e:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2fa2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2fa6:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2fa8:	|  |  |  |  |  |  |  |              |  |                     jsr 1219a <getValueType>
    2fae:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2fb2:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2fb4:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2fbc <continueFunction+0x558>
    2fb6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2fb8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3920 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2fbc:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2fc0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2fc4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2fc6:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2fc8:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2fca:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2fec <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2fcc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2fd0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2fd2:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2fd6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2fda:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2fde:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2fe0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2fe2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 11e24 <fastArrayGetByIndex>
    2fe8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2fea:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 300c <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2fec:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2ff0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2ff2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2ff6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2ffa:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2ffe:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3000:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3002:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3004:	|  |  |  |  |  |  |  |              |  |              |      jsr 12aae <stackGetByIndex>
    300a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    300c:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3010:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3012:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3016:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3018:	|  |  |  |  |  |  |  |              |  |                     jsr 12b1e <trimStack>
    301e:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3020:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3024:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3040 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3026:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3028:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    302c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    302e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3030:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3032:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12a8c <setVariable>
    3038:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    303c:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 311a <continueFunction+0x6b6>
    3040:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3042:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3046:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3054 <continueFunction+0x5f0>
    3048:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    304a:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    304e:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 309e <continueFunction+0x63a>
    3050:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 30e6 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3054:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3058:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    305c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3060:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3062:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1219a <getValueType>
    3068:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    306c:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    306e:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3076 <continueFunction+0x612>
    3070:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3072:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3100 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3076:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3078:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    307a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    307e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3080:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3084:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3086:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 12a8c <setVariable>
    308c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3090:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3092:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3094:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3098:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    309c:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3104 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    309e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    30a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    30a6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    30aa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    30ac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1219a <getValueType>
    30b2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    30b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    30b8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 30be <continueFunction+0x65a>
    30ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    30bc:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3100 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    30be:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    30c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    30c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    30c6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    30c8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    30cc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    30ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 12a8c <setVariable>
    30d4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    30d8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    30da:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    30dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    30e0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    30e4:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3104 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    30e6:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    30e8:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    30ec:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    30ee:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    30f2:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 12654 <copyVariable>
    30f8:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    30fa:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    30fc:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 311a <continueFunction+0x6b6>
    30fe:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3100:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 3920 <continueFunction+0xebc>
				break;
    3104:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 311a <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3106:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 152fa <custom.c.49191367+0x5ce>
    310c:	|  |  |  |  |  |  |  |                 |  |                  jsr 141e2 <KPrintF>
    3112:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3114:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3116:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 3920 <continueFunction+0xebc>
				break;
    311a:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    311c:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 38fe <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3120:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3124:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3128:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    312a:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    312c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    312e:	|  |  |  |  |  |  |  |                                   /-- beq.s 313c <continueFunction+0x6d8>
    3130:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3132:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3134:	|  |  |  |  |  |  |  |                                /--|-- beq.w 31e8 <continueFunction+0x784>
    3138:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 3246 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    313c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3140:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3144:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3148:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    314a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3160 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    314c:	|  |  |  |  |  |  |  |                             |  |  |   pea 152dc <custom.c.49191367+0x5b0>
    3152:	|  |  |  |  |  |  |  |                             |  |  |   jsr 141e2 <KPrintF>
    3158:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    315a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    315c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3920 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3160:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3162:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3166:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3168:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    316c:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3170:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3172:	|  |  |  |  |  |  |  |                             |  |      jsr 1219a <getValueType>
    3178:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    317c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    317e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3186 <continueFunction+0x722>
    3180:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3182:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3920 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3186:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    318a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    318e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3192:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3194:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3198:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    319a:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    319e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    31a2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    31a6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    31a8:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    31aa:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    31ac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    31ae:	|  |  |  |  |  |  |  |                             |  |      jsr 49f2 <stackSetByIndex>
    31b4:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    31b8:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    31ba:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 31c2 <continueFunction+0x75e>
						return FALSE;
    31bc:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    31be:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3920 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    31c2:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    31c4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    31c8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    31ca:	|  |  |  |  |  |  |  |                             |  |      jsr 12b1e <trimStack>
    31d0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    31d2:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    31d4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    31d8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    31da:	|  |  |  |  |  |  |  |                             |  |      jsr 12b1e <trimStack>
    31e0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    31e2:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    31e4:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 38fe <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    31e8:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    31ea:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    31ee:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    31f0:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    31f4:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    31f8:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    31fa:	|  |  |  |  |  |  |  |                             |         jsr 1219a <getValueType>
    3200:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3204:	|  |  |  |  |  |  |  |                             |         tst.w d0
    3206:	|  |  |  |  |  |  |  |                             |     /-- bne.s 320e <continueFunction+0x7aa>
    3208:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    320a:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 3920 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    320e:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3212:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3214:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    3218:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    321c:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    3220:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    3222:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3224:	|  |  |  |  |  |  |  |                             |         jsr 11e24 <fastArrayGetByIndex>
    322a:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    322c:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    3230:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3240 <continueFunction+0x7dc>
    3232:	|  |  |  |  |  |  |  |                             |     |   pea 1531e <custom.c.49191367+0x5f2>
    3238:	|  |  |  |  |  |  |  |                             |     |   jsr 141e2 <KPrintF>
    323e:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    3240:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    3242:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 3920 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    3246:	|  |  |  |  |  |  |  |                             \-------> pea 152fa <custom.c.49191367+0x5ce>
    324c:	|  |  |  |  |  |  |  |                                       jsr 141e2 <KPrintF>
    3252:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    3254:	|  |  |  |  |  |  |  |                                       clr.w d0
    3256:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3920 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    325a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    325e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3262:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3266:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3268:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    326a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    326c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3270:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    3274:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3276:	|  |  |  |  |  |  |  |                                       jsr 1219a <getValueType>
    327c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3280:	|  |  |  |  |  |  |  |                                       tst.w d0
    3282:	|  |  |  |  |  |  |  |                                   /-- bne.s 328a <continueFunction+0x826>
    3284:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3286:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3920 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    328a:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    328e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3290:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3294:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3296:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    329a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    329c:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    32a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    32a6:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    32aa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    32ac:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    32ae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    32b2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    32b6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    32ba:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    32bc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    32be:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    32c0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    32c4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    32c6:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    32cc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    32d0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    32d4:	|  |  |  |  |  |  |  |                                       move.l 1933a <globalVars>,d1
    32da:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    32de:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    32e0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    32e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    32e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    32e8:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    32ec:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    32ee:	|  |  |  |  |  |  |  |                                       jsr 1219a <getValueType>
    32f4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    32f8:	|  |  |  |  |  |  |  |                                       tst.w d0
    32fa:	|  |  |  |  |  |  |  |                                   /-- bne.s 3302 <continueFunction+0x89e>
    32fc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    32fe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3920 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3302:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    3306:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3308:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    330c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    330e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3312:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3314:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    331a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    331e:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    3322:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3324:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3326:	|  |  |  |  |  |  |  |                                       movea.l 1933a <globalVars>,a0
    332c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3330:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3332:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3334:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3336:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    333a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    333c:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    3342:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3346:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    334a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    334e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3352:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3356:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3358:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    335a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    335c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3360:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    3364:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3366:	|  |  |  |  |  |  |  |                                       jsr 1219a <getValueType>
    336c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3370:	|  |  |  |  |  |  |  |                                       tst.w d0
    3372:	|  |  |  |  |  |  |  |                                   /-- bne.s 337a <continueFunction+0x916>
    3374:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3376:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3920 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    337a:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    337e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3380:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3384:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3386:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    338a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    338c:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    3392:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    3396:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    339a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    339c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    339e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    33a2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    33a6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    33aa:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    33ac:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    33ae:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    33b0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    33b4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    33b6:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    33bc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    33c0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    33c4:	|  |  |  |  |  |  |  |                                       move.l 1933a <globalVars>,d1
    33ca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    33ce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    33d0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    33d2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    33d4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    33d8:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    33dc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    33de:	|  |  |  |  |  |  |  |                                       jsr 1219a <getValueType>
    33e4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    33e8:	|  |  |  |  |  |  |  |                                       tst.w d0
    33ea:	|  |  |  |  |  |  |  |                                   /-- bne.s 33f2 <continueFunction+0x98e>
    33ec:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    33ee:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3920 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    33f2:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    33f6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    33f8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    33fc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    33fe:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3402:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3404:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    340a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    340e:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    3412:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3414:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    3416:	|  |  |  |  |  |  |  |                                       movea.l 1933a <globalVars>,a0
    341c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3420:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3422:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3424:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3426:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    342a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    342c:	|  |  |  |  |  |  |  |                                       jsr 12a8c <setVariable>
    3432:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3436:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    343a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    343e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3442:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3446:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3448:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    344a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    344c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3450:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3452:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3454:	|  |  |  |  |  |  |  |                                       jsr 12654 <copyVariable>
    345a:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    345c:	|  |  |  |  |  |  |  |                                       tst.w d0
    345e:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 38e8 <continueFunction+0xe84>
    3462:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    3464:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    3468:	|  |  |  |  |  |  |  |  |                                    move.l 1933a <globalVars>,d1
    346e:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    3472:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    3474:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    3476:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    3478:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    347c:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    347e:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    3480:	|  |  |  |  |  |  |  |  |                                    jsr 12654 <copyVariable>
    3486:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    3488:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    348a:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 38ec <continueFunction+0xe88>
    348e:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    3490:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    3494:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    3496:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    349a:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1933a <globalVars>,a0
    34a0:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    34a4:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    34a6:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    34a8:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    34aa:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    34ac:	|  |  |  |  |  |  |  |  |  |                                 jsr 12654 <copyVariable>
    34b2:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    34b4:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    34b6:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 38f0 <continueFunction+0xe8c>
    34ba:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    34bc:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    34c0:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    34c2:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    34c6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    34c8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    34ce:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    34d0:	|  |  |  |  |  |  |  |  |  |  |                              jsr 119d6 <addVarToStack>
    34d6:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    34d8:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    34da:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 38f4 <continueFunction+0xe90>
    34de:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    34e0:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    34e4:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 11a5c <addVarToStackQuick>
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 38f8 <continueFunction+0xe94>
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    3504:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 3920 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    3508:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    350e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 126da <getBoolean>
    3516:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    351a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    3520:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3530:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 12a8c <setVariable>
    3536:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    353a:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    353e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3544:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 126da <getBoolean>
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    3550:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 38fc <continueFunction+0xe98>
				advanceNow = FALSE;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 38fc <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    3566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    356a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    356e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    3574:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 38fe <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    3578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    357a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    357e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    3588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1219a <getValueType>
    3590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    3594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    3596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 359e <continueFunction+0xb3a>
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    359a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 3920 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    359e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    35a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    35a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    35a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    35ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    35ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    35b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 12a8c <setVariable>
    35ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    35be:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 38fe <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    35c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 38b4 <continueFunction+0xe50>
    35ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    35d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 3650 <continueFunction+0xbec>
    35d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    35d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    35dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 369a <continueFunction+0xc36>
    35e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    35e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    35e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 35f4 <continueFunction+0xb90>
    35e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    35ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    35ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 3622 <continueFunction+0xbbe>
    35f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 369a <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    35f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    35fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    3602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    3606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11ad0 <addVariablesInSecond>
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    360e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    3610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12b1e <trimStack>
    361c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 38c8 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    3624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    362c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    3630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    3634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11b8e <compareVariablesInSecond>
    363a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    363c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 12b1e <trimStack>
    364a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    364c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 38c8 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    3652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    3662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11b8e <compareVariablesInSecond>
    3668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    366a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 12b1e <trimStack>
    3678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    367e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    3684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    3686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    3696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 38c8 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    369a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    36a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    36a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    36ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    36ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1219a <getValueType>
    36b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    36ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 36c2 <continueFunction+0xc5e>
    36bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    36be:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3920 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    36c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    36ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    36d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    36d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1219a <getValueType>
    36da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    36de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    36e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 36e8 <continueFunction+0xc84>
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    36e4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3920 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    36e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    36ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    36f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 12b1e <trimStack>
    36f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    36fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    3700:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    3702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 38c6 <continueFunction+0xe62>
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    3708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    370a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #14102,a0
    3710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    3712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (3716 <continueFunction+0xcb2>,pc,d0.w)
    3716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    371a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    371c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    3726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    372e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    373e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3746:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    374a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    374e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3752:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14a1c <__mulsi3>
    3758:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    375a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    375c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    375e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3762:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3764:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    376a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    3770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 38c8 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    377c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    3782:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3784:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3788:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    378a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    378e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3790:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    3796:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    379a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 38c8 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    379e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    37a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    37a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    37a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    37aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ac8 <__modsi3>
    37b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    37b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    37b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    37b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    37ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    37bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    37c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    37c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    37c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    37cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 38c8 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    37d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    37d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    37d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    37da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    37dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14a9a <__divsi3>
    37e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    37e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    37e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    37e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    37ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    37ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    37f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    37f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    37fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    37fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 38c8 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    3802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    380a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    380c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    380e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3810:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3812:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3814:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3816:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    381a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    381c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3820:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    3828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    382c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 38c8 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3830:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3838:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    383a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    383c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    383e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3840:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    384a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    384e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3850:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    3856:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    385a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 38c8 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    385c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3864:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3868:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    386a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    386c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    386e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3870:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3874:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3876:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    387a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    387c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    3882:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3886:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 38c8 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    3888:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    388c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3890:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3892:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3894:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3896:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3898:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    389a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    389c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    38a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    38a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    38a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    38a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12a8c <setVariable>
    38ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    38b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 38c8 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    38b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1533f <custom.c.49191367+0x613>
    38ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 141e2 <KPrintF>
    38c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    38c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    38c4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 3920 <continueFunction+0xebc>
						break;
    38c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    38c8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 38fe <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    38ca:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 15357 <custom.c.49191367+0x62b>
    38d0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 141e2 <KPrintF>
    38d6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    38d8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    38da:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 3920 <continueFunction+0xebc>
			break;
    38dc:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    38de:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38e0:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    38e2:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38e4:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    38e6:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38e8:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    38ea:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38ec:	|  |  |     |              \--|--|--|--|-------------------> nop
    38ee:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38f0:	|  |  |     |                 \--|--|--|-------------------> nop
    38f2:	|  |  |     +--------------------|--|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38f4:	|  |  |     |                    \--|--|-------------------> nop
    38f6:	|  |  |     +-----------------------|--|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38f8:	|  |  |     |                       \--|-------------------> nop
    38fa:	|  |  |     +--------------------------|-------------------- bra.s 38fe <continueFunction+0xe9a>
			break;
    38fc:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    38fe:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    3902:	+--|--|----------------------------------------------------- beq.s 3916 <continueFunction+0xeb2>
    3904:	|  |  |                                                      movea.l 80(sp),a0
    3908:	|  |  |                                                      move.l 36(a0),d0
    390c:	|  |  |                                                      addq.l #1,d0
    390e:	|  |  |                                                      movea.l 80(sp),a0
    3912:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    3916:	\--|--|----------------------------------------------------> tst.w 74(sp)
    391a:	   |  \----------------------------------------------------- bne.w 2a8c <continueFunction+0x28>

	}
	return TRUE;
    391e:	   |                                                         moveq #1,d0
}
    3920:	   \-------------------------------------------------------> lea 76(sp),sp
    3924:	                                                             rts

00003926 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    3926:	       lea -16(sp),sp
    392a:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    392c:	       move.l 24(sp),-(sp)
    3930:	       jsr 47be <pauseFunction>
    3936:	       addq.l #4,sp
	if (fun -> stack) 
    3938:	       movea.l 24(sp),a0
    393c:	       move.l 24(a0),d0
    3940:	   /-- beq.s 3956 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3942:	   |   pea 15383 <custom.c.49191367+0x657>
    3948:	   |   pea 153b0 <custom.c.49191367+0x684>
    394e:	   |   jsr 141e2 <KPrintF>
    3954:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3956:	   \-> movea.l 24(sp),a0
    395a:	       move.l 4(a0),12(sp)
    3960:	       move.l 1938c <SysBase>,d0
    3966:	       movea.l d0,a6
    3968:	       movea.l 12(sp),a1
    396c:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3970:	       clr.l 16(sp)
    3974:	   /-- bra.s 3994 <finishFunction+0x6e>
    3976:	/--|-> movea.l 24(sp),a0
    397a:	|  |   move.l 20(a0),d1
    397e:	|  |   move.l 16(sp),d0
    3982:	|  |   lsl.l #3,d0
    3984:	|  |   add.l d1,d0
    3986:	|  |   move.l d0,-(sp)
    3988:	|  |   jsr 123e8 <unlinkVar>
    398e:	|  |   addq.l #4,sp
    3990:	|  |   addq.l #1,16(sp)
    3994:	|  \-> movea.l 24(sp),a0
    3998:	|      move.l 8(a0),d0
    399c:	|      cmp.l 16(sp),d0
    39a0:	\----- bgt.s 3976 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    39a2:	       movea.l 24(sp),a0
    39a6:	       move.l 8(a0),d0
    39aa:	   /-- ble.s 39c6 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    39ac:	   |   movea.l 24(sp),a0
    39b0:	   |   move.l 20(a0),8(sp)
    39b6:	   |   move.l 1938c <SysBase>,d0
    39bc:	   |   movea.l d0,a6
    39be:	   |   movea.l 8(sp),a1
    39c2:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    39c6:	   \-> moveq #28,d0
    39c8:	       add.l 24(sp),d0
    39cc:	       move.l d0,-(sp)
    39ce:	       jsr 123e8 <unlinkVar>
    39d4:	       addq.l #4,sp
	FreeVec(fun);
    39d6:	       move.l 24(sp),4(sp)
    39dc:	       move.l 1938c <SysBase>,d0
    39e2:	       movea.l d0,a6
    39e4:	       movea.l 4(sp),a1
    39e8:	       jsr -690(a6)
	fun = NULL;
    39ec:	       clr.l 24(sp)
}
    39f0:	       nop
    39f2:	       movea.l (sp)+,a6
    39f4:	       lea 16(sp),sp
    39f8:	       rts

000039fa <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    39fa:	jsr 481a <runSludge>
}
    3a00:	rts

00003a02 <initSludge>:

BOOL initSludge (char * filename) {
    3a02:	             lea -296(sp),sp
    3a06:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    3a0a:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    3a0e:	             jsr 8966 <makeNullAnim>
    3a14:	             move.l d0,192ac <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    3a1a:	             pea 19336 <gameVersion>
    3a20:	             pea 153c0 <custom.c.49191367+0x694>
    3a26:	             pea 45 <_start+0x45>
    3a2a:	             pea 47 <_start+0x47>
    3a2e:	             move.l 336(sp),-(sp)
    3a32:	             jsr 444e <openAndVerify>
    3a38:	             lea 20(sp),sp
    3a3c:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    3a40:	         /-- bne.s 3a48 <initSludge+0x46>
    3a42:	         |   clr.w d0
    3a44:	/--------|-- bra.w 416e <initSludge+0x76c>
	if (FGetC (fp)) {
    3a48:	|        \-> move.l 292(sp),288(sp)
    3a4e:	|            move.l 19394 <DOSBase>,d0
    3a54:	|            movea.l d0,a6
    3a56:	|            move.l 288(sp),d1
    3a5a:	|            jsr -306(a6)
    3a5e:	|            move.l d0,284(sp)
    3a62:	|            move.l 284(sp),d0
    3a66:	|  /-------- beq.w 3c0c <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3a6a:	|  |         move.l 292(sp),-(sp)
    3a6e:	|  |         jsr 6bc <get2bytes>
    3a74:	|  |         addq.l #4,sp
    3a76:	|  |         move.l d0,19360 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3a7c:	|  |         move.l 19360 <numBIFNames>,d0
    3a82:	|  |         move.l d0,280(sp)
    3a86:	|  |         clr.l 276(sp)
    3a8a:	|  |         move.l 1938c <SysBase>,d0
    3a90:	|  |         movea.l d0,a6
    3a92:	|  |         move.l 280(sp),d0
    3a96:	|  |         move.l 276(sp),d1
    3a9a:	|  |         jsr -684(a6)
    3a9e:	|  |         move.l d0,272(sp)
    3aa2:	|  |         move.l 272(sp),d0
    3aa6:	|  |         move.l d0,1931c <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3aac:	|  |         move.l 1931c <allBIFNames>,d0
    3ab2:	|  |     /-- bne.s 3aba <initSludge+0xb8>
    3ab4:	|  |     |   clr.w d0
    3ab6:	+--|-----|-- bra.w 416e <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3aba:	|  |     \-> clr.l 308(sp)
    3abe:	|  |     /-- bra.s 3ae4 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    3ac0:	|  |  /--|-> move.l 1931c <allBIFNames>,d1
    3ac6:	|  |  |  |   move.l 308(sp),d0
    3aca:	|  |  |  |   add.l d0,d0
    3acc:	|  |  |  |   add.l d0,d0
    3ace:	|  |  |  |   movea.l d1,a2
    3ad0:	|  |  |  |   adda.l d0,a2
    3ad2:	|  |  |  |   move.l 292(sp),-(sp)
    3ad6:	|  |  |  |   jsr b02 <readString>
    3adc:	|  |  |  |   addq.l #4,sp
    3ade:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3ae0:	|  |  |  |   addq.l #1,308(sp)
    3ae4:	|  |  |  \-> move.l 19360 <numBIFNames>,d0
    3aea:	|  |  |      cmp.l 308(sp),d0
    3aee:	|  |  \----- bgt.s 3ac0 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    3af0:	|  |         move.l 292(sp),-(sp)
    3af4:	|  |         jsr 6bc <get2bytes>
    3afa:	|  |         addq.l #4,sp
    3afc:	|  |         move.l d0,1936c <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    3b02:	|  |         move.l 1936c <numUserFunc>,d0
    3b08:	|  |         move.l d0,268(sp)
    3b0c:	|  |         clr.l 264(sp)
    3b10:	|  |         move.l 1938c <SysBase>,d0
    3b16:	|  |         movea.l d0,a6
    3b18:	|  |         move.l 268(sp),d0
    3b1c:	|  |         move.l 264(sp),d1
    3b20:	|  |         jsr -684(a6)
    3b24:	|  |         move.l d0,260(sp)
    3b28:	|  |         move.l 260(sp),d0
    3b2c:	|  |         move.l d0,19328 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3b32:	|  |         move.l 19328 <allUserFunc>,d0
    3b38:	|  |     /-- bne.s 3b40 <initSludge+0x13e>
    3b3a:	|  |     |   clr.w d0
    3b3c:	+--|-----|-- bra.w 416e <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    3b40:	|  |     \-> clr.l 304(sp)
    3b44:	|  |     /-- bra.s 3b6a <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3b46:	|  |  /--|-> move.l 19328 <allUserFunc>,d1
    3b4c:	|  |  |  |   move.l 304(sp),d0
    3b50:	|  |  |  |   add.l d0,d0
    3b52:	|  |  |  |   add.l d0,d0
    3b54:	|  |  |  |   movea.l d1,a2
    3b56:	|  |  |  |   adda.l d0,a2
    3b58:	|  |  |  |   move.l 292(sp),-(sp)
    3b5c:	|  |  |  |   jsr b02 <readString>
    3b62:	|  |  |  |   addq.l #4,sp
    3b64:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3b66:	|  |  |  |   addq.l #1,304(sp)
    3b6a:	|  |  |  \-> move.l 1936c <numUserFunc>,d0
    3b70:	|  |  |      cmp.l 304(sp),d0
    3b74:	|  |  \----- bgt.s 3b46 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3b76:	|  |         move.l 19336 <gameVersion>,d0
    3b7c:	|  |         cmpi.l #258,d0
    3b82:	|  +-------- ble.w 3c0c <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    3b86:	|  |         move.l 292(sp),-(sp)
    3b8a:	|  |         jsr 6bc <get2bytes>
    3b90:	|  |         addq.l #4,sp
    3b92:	|  |         move.l d0,19368 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    3b98:	|  |         move.l 19368 <numResourceNames>,d0
    3b9e:	|  |         move.l d0,256(sp)
    3ba2:	|  |         clr.l 252(sp)
    3ba6:	|  |         move.l 1938c <SysBase>,d0
    3bac:	|  |         movea.l d0,a6
    3bae:	|  |         move.l 256(sp),d0
    3bb2:	|  |         move.l 252(sp),d1
    3bb6:	|  |         jsr -684(a6)
    3bba:	|  |         move.l d0,248(sp)
    3bbe:	|  |         move.l 248(sp),d0
    3bc2:	|  |         move.l d0,19320 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3bc8:	|  |         move.l 19320 <allResourceNames>,d0
    3bce:	|  |     /-- bne.s 3bd6 <initSludge+0x1d4>
    3bd0:	|  |     |   clr.w d0
    3bd2:	+--|-----|-- bra.w 416e <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    3bd6:	|  |     \-> clr.l 300(sp)
    3bda:	|  |     /-- bra.s 3c00 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3bdc:	|  |  /--|-> move.l 19320 <allResourceNames>,d1
    3be2:	|  |  |  |   move.l 300(sp),d0
    3be6:	|  |  |  |   add.l d0,d0
    3be8:	|  |  |  |   add.l d0,d0
    3bea:	|  |  |  |   movea.l d1,a2
    3bec:	|  |  |  |   adda.l d0,a2
    3bee:	|  |  |  |   move.l 292(sp),-(sp)
    3bf2:	|  |  |  |   jsr b02 <readString>
    3bf8:	|  |  |  |   addq.l #4,sp
    3bfa:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    3bfc:	|  |  |  |   addq.l #1,300(sp)
    3c00:	|  |  |  \-> move.l 19368 <numResourceNames>,d0
    3c06:	|  |  |      cmp.l 300(sp),d0
    3c0a:	|  |  \----- bgt.s 3bdc <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    3c0c:	|  \-------> move.l 292(sp),-(sp)
    3c10:	|            jsr 6bc <get2bytes>
    3c16:	|            addq.l #4,sp
    3c18:	|            move.l d0,192e0 <winWidth>
	winHeight = get2bytes (fp);
    3c1e:	|            move.l 292(sp),-(sp)
    3c22:	|            jsr 6bc <get2bytes>
    3c28:	|            addq.l #4,sp
    3c2a:	|            move.l d0,192e4 <winHeight>
	specialSettings = FGetC (fp);
    3c30:	|            move.l 292(sp),244(sp)
    3c36:	|            move.l 19394 <DOSBase>,d0
    3c3c:	|            movea.l d0,a6
    3c3e:	|            move.l 244(sp),d1
    3c42:	|            jsr -306(a6)
    3c46:	|            move.l d0,240(sp)
    3c4a:	|            move.l 240(sp),d0
    3c4e:	|            move.l d0,19370 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3c54:	|            move.l 292(sp),236(sp)
    3c5a:	|            move.l 19394 <DOSBase>,d0
    3c60:	|            movea.l d0,a6
    3c62:	|            move.l 236(sp),d1
    3c66:	|            jsr -306(a6)
    3c6a:	|            move.l d0,232(sp)
    3c6e:	|            move.l 232(sp),d0
    3c72:	|            move.l d0,-(sp)
    3c74:	|            pea 3e8 <encodeFilename+0xea>
    3c78:	|            jsr 14a9a <__divsi3>
    3c7e:	|            addq.l #8,sp
    3c80:	|            move.l d0,18d34 <desiredfps>

	FreeVec(readString (fp));
    3c86:	|            move.l 292(sp),-(sp)
    3c8a:	|            jsr b02 <readString>
    3c90:	|            addq.l #4,sp
    3c92:	|            move.l d0,228(sp)
    3c96:	|            move.l 1938c <SysBase>,d0
    3c9c:	|            movea.l d0,a6
    3c9e:	|            movea.l 228(sp),a1
    3ca2:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    3ca6:	|            move.l 292(sp),224(sp)
    3cac:	|            move.l #103214,220(sp)
    3cb4:	|            moveq #8,d0
    3cb6:	|            move.l d0,216(sp)
    3cba:	|            moveq #1,d1
    3cbc:	|            move.l d1,212(sp)
    3cc0:	|            move.l 19394 <DOSBase>,d0
    3cc6:	|            movea.l d0,a6
    3cc8:	|            move.l 224(sp),d1
    3ccc:	|            move.l 220(sp),d2
    3cd0:	|            move.l 216(sp),d3
    3cd4:	|            move.l 212(sp),d4
    3cd8:	|            jsr -324(a6)
    3cdc:	|            move.l d0,208(sp)
    3ce0:	|            move.l 208(sp),d0
    3ce4:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    3ce8:	|            moveq #1,d0
    3cea:	|            cmp.l 204(sp),d0
    3cee:	|        /-- beq.s 3cfe <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    3cf0:	|        |   pea 153f9 <custom.c.49191367+0x6cd>
    3cf6:	|        |   jsr 141e2 <KPrintF>
    3cfc:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    3cfe:	|        \-> move.l 19336 <gameVersion>,d0
    3d04:	|            cmpi.l #258,d0
    3d0a:	|        /-- ble.s 3d1a <initSludge+0x318>
    3d0c:	|        |   move.l 292(sp),-(sp)
    3d10:	|        |   jsr b02 <readString>
    3d16:	|        |   addq.l #4,sp
    3d18:	|     /--|-- bra.s 3d2e <initSludge+0x32c>
    3d1a:	|     |  \-> pea 15417 <custom.c.49191367+0x6eb>
    3d20:	|     |      pea 15417 <custom.c.49191367+0x6eb>
    3d26:	|     |      jsr 116c6 <joinStrings>
    3d2c:	|     |      addq.l #8,sp
    3d2e:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    3d32:	|            move.l 19336 <gameVersion>,d0
    3d38:	|            cmpi.l #258,d0
    3d3e:	|     /----- ble.s 3d60 <initSludge+0x35e>
    3d40:	|     |      move.l 292(sp),196(sp)
    3d46:	|     |      move.l 19394 <DOSBase>,d0
    3d4c:	|     |      movea.l d0,a6
    3d4e:	|     |      move.l 196(sp),d1
    3d52:	|     |      jsr -306(a6)
    3d56:	|     |      move.l d0,192(sp)
    3d5a:	|     |      move.l 192(sp),d0
    3d5e:	|     |  /-- bra.s 3d62 <initSludge+0x360>
    3d60:	|     \--|-> moveq #0,d0
    3d62:	|        \-> move.l d0,194c0 <gameSettings+0x4>
	makeLanguageTable (fp);
    3d68:	|            move.l 292(sp),-(sp)
    3d6c:	|            jsr 1107c <makeLanguageTable>
    3d72:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    3d74:	|            move.l 19336 <gameVersion>,d0
    3d7a:	|            cmpi.l #261,d0
    3d80:	|        /-- ble.s 3dce <initSludge+0x3cc>
	{
		FGetC(fp);
    3d82:	|        |   move.l 292(sp),188(sp)
    3d88:	|        |   move.l 19394 <DOSBase>,d0
    3d8e:	|        |   movea.l d0,a6
    3d90:	|        |   move.l 188(sp),d1
    3d94:	|        |   jsr -306(a6)
    3d98:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3d9c:	|        |   move.l 292(sp),180(sp)
    3da2:	|        |   move.l 19394 <DOSBase>,d0
    3da8:	|        |   movea.l d0,a6
    3daa:	|        |   move.l 180(sp),d1
    3dae:	|        |   jsr -306(a6)
    3db2:	|        |   move.l d0,176(sp)
		getFloat (fp);
    3db6:	|        |   move.l 292(sp),-(sp)
    3dba:	|        |   jsr 7d8 <getFloat>
    3dc0:	|        |   addq.l #4,sp
		getFloat (fp);
    3dc2:	|        |   move.l 292(sp),-(sp)
    3dc6:	|        |   jsr 7d8 <getFloat>
    3dcc:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3dce:	|        \-> move.l 292(sp),-(sp)
    3dd2:	|            jsr b02 <readString>
    3dd8:	|            addq.l #4,sp
    3dda:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3dde:	|            pea 15418 <custom.c.49191367+0x6ec>
    3de4:	|            move.l 176(sp),-(sp)
    3de8:	|            jsr 11646 <strcmp>
    3dee:	|            addq.l #8,sp
    3df0:	|            tst.l d0
    3df2:	|        /-- beq.s 3dfa <initSludge+0x3f8>
		return FALSE;
    3df4:	|        |   clr.w d0
    3df6:	+--------|-- bra.w 416e <initSludge+0x76c>
	}
	FreeVec( checker);
    3dfa:	|        \-> move.l 172(sp),168(sp)
    3e00:	|            move.l 1938c <SysBase>,d0
    3e06:	|            movea.l d0,a6
    3e08:	|            movea.l 168(sp),a1
    3e0c:	|            jsr -690(a6)
	checker = NULL;
    3e10:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    3e14:	|            move.l 292(sp),164(sp)
    3e1a:	|            move.l 19394 <DOSBase>,d0
    3e20:	|            movea.l d0,a6
    3e22:	|            move.l 164(sp),d1
    3e26:	|            jsr -306(a6)
    3e2a:	|            move.l d0,160(sp)
    3e2e:	|            move.l 160(sp),d0
    3e32:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3e36:	|            moveq #0,d0
    3e38:	|            move.b 159(sp),d0
    3e3c:	|            moveq #1,d1
    3e3e:	|            and.l d1,d0
    3e40:	|        /-- beq.s 3e98 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3e42:	|        |   move.l 19394 <DOSBase>,d0
    3e48:	|        |   movea.l d0,a6
    3e4a:	|        |   jsr -60(a6)
    3e4e:	|        |   move.l d0,38(sp)
    3e52:	|        |   move.l 38(sp),d0
    3e56:	|        |   move.l d0,34(sp)
    3e5a:	|        |   move.l #87072,30(sp)
    3e62:	|        |   moveq #54,d0
    3e64:	|        |   move.l d0,26(sp)
    3e68:	|        |   move.l 19394 <DOSBase>,d0
    3e6e:	|        |   movea.l d0,a6
    3e70:	|        |   move.l 34(sp),d1
    3e74:	|        |   move.l 30(sp),d2
    3e78:	|        |   move.l 26(sp),d3
    3e7c:	|        |   jsr -48(a6)
    3e80:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3e84:	|        |   pea 15457 <custom.c.49191367+0x72b>
    3e8a:	|        |   jsr 141e2 <KPrintF>
    3e90:	|        |   addq.l #4,sp
		return FALSE;
    3e92:	|        |   clr.w d0
    3e94:	+--------|-- bra.w 416e <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    3e98:	|        \-> move.l 292(sp),-(sp)
    3e9c:	|            jsr 6bc <get2bytes>
    3ea2:	|            addq.l #4,sp
    3ea4:	|            move.l d0,19364 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3eaa:	|            move.l 19364 <numGlobals>,d0
    3eb0:	|            lsl.l #3,d0
    3eb2:	|            move.l d0,154(sp)
    3eb6:	|            clr.l 150(sp)
    3eba:	|            move.l 1938c <SysBase>,d0
    3ec0:	|            movea.l d0,a6
    3ec2:	|            move.l 154(sp),d0
    3ec6:	|            move.l 150(sp),d1
    3eca:	|            jsr -684(a6)
    3ece:	|            move.l d0,146(sp)
    3ed2:	|            move.l 146(sp),d0
    3ed6:	|            move.l d0,1933a <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3edc:	|            move.l 1933a <globalVars>,d0
    3ee2:	|        /-- bne.s 3f00 <initSludge+0x4fe>
    3ee4:	|        |   move.l 19364 <numGlobals>,d0
    3eea:	|        +-- ble.s 3f00 <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3eec:	|        |   pea 1548f <custom.c.49191367+0x763>
    3ef2:	|        |   jsr 141e2 <KPrintF>
    3ef8:	|        |   addq.l #4,sp
		return FALSE;
    3efa:	|        |   clr.w d0
    3efc:	+--------|-- bra.w 416e <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3f00:	|        \-> clr.l 312(sp)
    3f04:	|        /-- bra.s 3f1c <initSludge+0x51a>
    3f06:	|     /--|-> move.l 1933a <globalVars>,d1
    3f0c:	|     |  |   move.l 312(sp),d0
    3f10:	|     |  |   lsl.l #3,d0
    3f12:	|     |  |   movea.l d1,a0
    3f14:	|     |  |   adda.l d0,a0
    3f16:	|     |  |   clr.l (a0)
    3f18:	|     |  |   addq.l #1,312(sp)
    3f1c:	|     |  \-> move.l 19364 <numGlobals>,d0
    3f22:	|     |      cmp.l 312(sp),d0
    3f26:	|     \----- bgt.s 3f06 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3f28:	|            move.l 194c0 <gameSettings+0x4>,d0
    3f2e:	|            clr.l -(sp)
    3f30:	|            move.l d0,-(sp)
    3f32:	|            move.l 300(sp),-(sp)
    3f36:	|            jsr 4ef4 <setFileIndices>
    3f3c:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3f40:	|            pea 1 <_start+0x1>
    3f44:	|            jsr 4bae <getNumberedString>
    3f4a:	|            addq.l #4,sp
    3f4c:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3f50:	|            move.l 142(sp),-(sp)
    3f54:	|            jsr 2fe <encodeFilename>
    3f5a:	|            addq.l #4,sp
    3f5c:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3f60:	|            move.l 142(sp),134(sp)
    3f66:	|            move.l 1938c <SysBase>,d0
    3f6c:	|            movea.l d0,a6
    3f6e:	|            movea.l 134(sp),a1
    3f72:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3f76:	|            move.l 138(sp),130(sp)
    3f7c:	|            move.l 19394 <DOSBase>,d0
    3f82:	|            movea.l d0,a6
    3f84:	|            move.l 130(sp),d1
    3f88:	|            jsr -120(a6)
    3f8c:	|            move.l d0,126(sp)
    3f90:	|            move.l 126(sp),d0
    3f94:	|            move.l d0,296(sp)
	if(lock == 0) {
    3f98:	|        /-- bne.s 3fc6 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3f9a:	|        |   move.l 138(sp),122(sp)
    3fa0:	|        |   moveq #-2,d1
    3fa2:	|        |   move.l d1,118(sp)
    3fa6:	|        |   move.l 19394 <DOSBase>,d0
    3fac:	|        |   movea.l d0,a6
    3fae:	|        |   move.l 122(sp),d1
    3fb2:	|        |   move.l 118(sp),d2
    3fb6:	|        |   jsr -84(a6)
    3fba:	|        |   move.l d0,114(sp)
    3fbe:	|        |   move.l 114(sp),d0
    3fc2:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3fc6:	|        \-> move.l 296(sp),110(sp)
    3fcc:	|            move.l 19394 <DOSBase>,d0
    3fd2:	|            movea.l d0,a6
    3fd4:	|            move.l 110(sp),d1
    3fd8:	|            jsr -126(a6)
    3fdc:	|            move.l d0,106(sp)
    3fe0:	|            move.l 106(sp),d0
    3fe4:	|        /-- bne.s 4040 <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3fe6:	|        |   move.l 138(sp),-(sp)
    3fea:	|        |   pea 154c2 <custom.c.49191367+0x796>
    3ff0:	|        |   jsr 141e2 <KPrintF>
    3ff6:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3ff8:	|        |   move.l 19394 <DOSBase>,d0
    3ffe:	|        |   movea.l d0,a6
    4000:	|        |   jsr -60(a6)
    4004:	|        |   move.l d0,58(sp)
    4008:	|        |   move.l 58(sp),d0
    400c:	|        |   move.l d0,54(sp)
    4010:	|        |   move.l #87279,50(sp)
    4018:	|        |   moveq #40,d0
    401a:	|        |   move.l d0,46(sp)
    401e:	|        |   move.l 19394 <DOSBase>,d0
    4024:	|        |   movea.l d0,a6
    4026:	|        |   move.l 54(sp),d1
    402a:	|        |   move.l 50(sp),d2
    402e:	|        |   move.l 46(sp),d3
    4032:	|        |   jsr -48(a6)
    4036:	|        |   move.l d0,42(sp)
		return FALSE;
    403a:	|        |   clr.w d0
    403c:	+--------|-- bra.w 416e <initSludge+0x76c>
	}

	FreeVec(gameName);
    4040:	|        \-> move.l 138(sp),102(sp)
    4046:	|            move.l 1938c <SysBase>,d0
    404c:	|            movea.l d0,a6
    404e:	|            movea.l 102(sp),a1
    4052:	|            jsr -690(a6)

	readIniFile (filename);
    4056:	|            move.l 320(sp),-(sp)
    405a:	|            jsr 111b0 <readIniFile>
    4060:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    4062:	|            jsr 10f82 <getLanguageForFileB>
    4068:	|            move.l d0,18d22 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    406e:	|            move.l 18d22 <languageNum>,d0
    4074:	|        /-- bpl.s 4084 <initSludge+0x682>
    4076:	|        |   pea 15518 <custom.c.49191367+0x7ec>
    407c:	|        |   jsr 141e2 <KPrintF>
    4082:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    4084:	|        \-> move.l 18d22 <languageNum>,d0
    408a:	|            move.l d0,d1
    408c:	|            move.l 194c0 <gameSettings+0x4>,d0
    4092:	|            move.l d1,-(sp)
    4094:	|            move.l d0,-(sp)
    4096:	|            clr.l -(sp)
    4098:	|            jsr 4ef4 <setFileIndices>
    409e:	|            lea 12(sp),sp

	if (dataFol[0]) {
    40a2:	|            movea.l 200(sp),a0
    40a6:	|            move.b (a0),d0
    40a8:	|     /----- beq.w 4152 <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    40ac:	|     |      move.l 200(sp),-(sp)
    40b0:	|     |      jsr 2fe <encodeFilename>
    40b6:	|     |      addq.l #4,sp
    40b8:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    40bc:	|     |      move.l 98(sp),94(sp)
    40c2:	|     |      move.l 19394 <DOSBase>,d0
    40c8:	|     |      movea.l d0,a6
    40ca:	|     |      move.l 94(sp),d1
    40ce:	|     |      jsr -120(a6)
    40d2:	|     |      move.l d0,90(sp)
    40d6:	|     |      move.l 90(sp),d0
    40da:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    40de:	|     |  /-- bne.s 410c <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    40e0:	|     |  |   move.l 98(sp),86(sp)
    40e6:	|     |  |   moveq #-2,d1
    40e8:	|     |  |   move.l d1,82(sp)
    40ec:	|     |  |   move.l 19394 <DOSBase>,d0
    40f2:	|     |  |   movea.l d0,a6
    40f4:	|     |  |   move.l 86(sp),d1
    40f8:	|     |  |   move.l 82(sp),d2
    40fc:	|     |  |   jsr -84(a6)
    4100:	|     |  |   move.l d0,78(sp)
    4104:	|     |  |   move.l 78(sp),d0
    4108:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    410c:	|     |  \-> move.l 296(sp),74(sp)
    4112:	|     |      move.l 19394 <DOSBase>,d0
    4118:	|     |      movea.l d0,a6
    411a:	|     |      move.l 74(sp),d1
    411e:	|     |      jsr -126(a6)
    4122:	|     |      move.l d0,70(sp)
    4126:	|     |      move.l 70(sp),d0
    412a:	|     |  /-- bne.s 413c <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    412c:	|     |  |   move.l 19394 <DOSBase>,d0
    4132:	|     |  |   movea.l d0,a6
    4134:	|     |  |   jsr -60(a6)
    4138:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    413c:	|     |  \-> move.l 98(sp),62(sp)
    4142:	|     |      move.l 1938c <SysBase>,d0
    4148:	|     |      movea.l d0,a6
    414a:	|     |      movea.l 62(sp),a1
    414e:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    4152:	|     \----> movea.l 192e4 <winHeight>,a0
    4158:	|            lea -15(a0),a0
    415c:	|            move.l a0,d0
    415e:	|            move.l d0,-(sp)
    4160:	|            pea a <_start+0xa>
    4164:	|            jsr 5926 <positionStatus>
    416a:	|            addq.l #8,sp

	return TRUE;
    416c:	|            moveq #1,d0
}
    416e:	\----------> movem.l (sp)+,d2-d4/a2/a6
    4172:	             lea 296(sp),sp
    4176:	             rts

00004178 <killSpeechTimers>:

void killSpeechTimers () {
    4178:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    417a:	          move.l 19324 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4180:	   /----- bra.s 41ac <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    4182:	/--|----> movea.l (sp),a0
    4184:	|  |      move.b 56(a0),d0
    4188:	|  |  /-- bne.s 41a6 <killSpeechTimers+0x2e>
    418a:	|  |  |   movea.l (sp),a0
    418c:	|  |  |   move.w 50(a0),d0
    4190:	|  |  +-- beq.s 41a6 <killSpeechTimers+0x2e>
    4192:	|  |  |   movea.l (sp),a0
    4194:	|  |  |   move.l 12(a0),d0
    4198:	|  |  +-- beq.s 41a6 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    419a:	|  |  |   movea.l (sp),a0
    419c:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    41a0:	|  |  |   movea.l (sp),a0
    41a2:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    41a6:	|  |  \-> movea.l (sp),a0
    41a8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    41ac:	|  \----> tst.l (sp)
    41ae:	\-------- bne.s 4182 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    41b0:	          jsr 5e64 <killAllSpeech>
}
    41b6:	          nop
    41b8:	          addq.l #4,sp
    41ba:	          rts

000041bc <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    41bc:	             lea -52(sp),sp
    41c0:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    41c2:	             movea.l 60(sp),a0
    41c6:	             move.l (a0),d0
    41c8:	             move.l d0,-(sp)
    41ca:	             jsr 4e34 <openSubSlice>
    41d0:	             addq.l #4,sp
    41d2:	             tst.w d0
    41d4:	         /-- bne.s 41dc <loadFunctionCode+0x20>
    41d6:	         |   clr.w d0
    41d8:	/--------|-- bra.w 43a6 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    41dc:	|        \-> move.l 19374 <bigDataFile>,44(sp)
    41e4:	|            move.l 19394 <DOSBase>,d0
    41ea:	|            movea.l d0,a6
    41ec:	|            move.l 44(sp),d1
    41f0:	|            jsr -306(a6)
    41f4:	|            move.l d0,40(sp)
    41f8:	|            move.l 40(sp),d0
    41fc:	|            move.l d0,d0
    41fe:	|            movea.l 60(sp),a0
    4202:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    4206:	|            move.l 19374 <bigDataFile>,d0
    420c:	|            move.l d0,-(sp)
    420e:	|            jsr 6bc <get2bytes>
    4214:	|            addq.l #4,sp
    4216:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    421a:	|            move.l 19374 <bigDataFile>,d0
    4220:	|            move.l d0,-(sp)
    4222:	|            jsr 6bc <get2bytes>
    4228:	|            addq.l #4,sp
    422a:	|            movea.l 60(sp),a0
    422e:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    4232:	|            move.l 19374 <bigDataFile>,d0
    4238:	|            move.l d0,-(sp)
    423a:	|            jsr 6bc <get2bytes>
    4240:	|            addq.l #4,sp
    4242:	|            movea.l 60(sp),a0
    4246:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    424a:	|            move.l 36(sp),d0
    424e:	|            lsl.l #3,d0
    4250:	|            move.l d0,32(sp)
    4254:	|            clr.l 28(sp)
    4258:	|            move.l 1938c <SysBase>,d0
    425e:	|            movea.l d0,a6
    4260:	|            move.l 32(sp),d0
    4264:	|            move.l 28(sp),d1
    4268:	|            jsr -684(a6)
    426c:	|            move.l d0,24(sp)
    4270:	|            move.l 24(sp),d0
    4274:	|            movea.l 60(sp),a0
    4278:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    427c:	|            movea.l 60(sp),a0
    4280:	|            move.l 4(a0),d0
    4284:	|        /-- bne.s 429a <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    4286:	|        |   pea 15543 <custom.c.49191367+0x817>
    428c:	|        |   jsr 141e2 <KPrintF>
    4292:	|        |   addq.l #4,sp
		return FALSE;
    4294:	|        |   clr.w d0
    4296:	+--------|-- bra.w 43a6 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    429a:	|        \-> clr.l 52(sp)
    429e:	|        /-- bra.s 4300 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    42a0:	|     /--|-> move.l 19374 <bigDataFile>,8(sp)
    42a8:	|     |  |   move.l 19394 <DOSBase>,d0
    42ae:	|     |  |   movea.l d0,a6
    42b0:	|     |  |   move.l 8(sp),d1
    42b4:	|     |  |   jsr -306(a6)
    42b8:	|     |  |   move.l d0,4(sp)
    42bc:	|     |  |   move.l 4(sp),d1
    42c0:	|     |  |   movea.l 60(sp),a0
    42c4:	|     |  |   movea.l 4(a0),a0
    42c8:	|     |  |   move.l 52(sp),d0
    42cc:	|     |  |   lsl.l #3,d0
    42ce:	|     |  |   adda.l d0,a0
    42d0:	|     |  |   move.l d1,d0
    42d2:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    42d4:	|     |  |   move.l 19374 <bigDataFile>,d0
    42da:	|     |  |   move.l d0,-(sp)
    42dc:	|     |  |   jsr 6bc <get2bytes>
    42e2:	|     |  |   addq.l #4,sp
    42e4:	|     |  |   move.l d0,d1
    42e6:	|     |  |   movea.l 60(sp),a0
    42ea:	|     |  |   movea.l 4(a0),a0
    42ee:	|     |  |   move.l 52(sp),d0
    42f2:	|     |  |   lsl.l #3,d0
    42f4:	|     |  |   adda.l d0,a0
    42f6:	|     |  |   move.l d1,d0
    42f8:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    42fc:	|     |  |   addq.l #1,52(sp)
    4300:	|     |  \-> move.l 52(sp),d0
    4304:	|     |      cmp.l 36(sp),d0
    4308:	|     \----- bcs.s 42a0 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    430a:	|            jsr 4ba4 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    4310:	|            movea.l 60(sp),a0
    4314:	|            move.l 8(a0),d0
    4318:	|  /-------- ble.w 439c <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    431c:	|  |         movea.l 60(sp),a0
    4320:	|  |         move.l 8(a0),d0
    4324:	|  |         lsl.l #3,d0
    4326:	|  |         move.l d0,20(sp)
    432a:	|  |         clr.l 16(sp)
    432e:	|  |         move.l 1938c <SysBase>,d0
    4334:	|  |         movea.l d0,a6
    4336:	|  |         move.l 20(sp),d0
    433a:	|  |         move.l 16(sp),d1
    433e:	|  |         jsr -684(a6)
    4342:	|  |         move.l d0,12(sp)
    4346:	|  |         move.l 12(sp),d0
    434a:	|  |         movea.l 60(sp),a0
    434e:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    4352:	|  |         movea.l 60(sp),a0
    4356:	|  |         move.l 20(a0),d0
    435a:	|  |     /-- bne.s 436e <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    435c:	|  |     |   pea 15543 <custom.c.49191367+0x817>
    4362:	|  |     |   jsr 141e2 <KPrintF>
    4368:	|  |     |   addq.l #4,sp
			return FALSE;
    436a:	|  |     |   clr.w d0
    436c:	+--|-----|-- bra.s 43a6 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    436e:	|  |     \-> clr.l 48(sp)
    4372:	|  |     /-- bra.s 438c <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    4374:	|  |  /--|-> movea.l 60(sp),a0
    4378:	|  |  |  |   move.l 20(a0),d1
    437c:	|  |  |  |   move.l 48(sp),d0
    4380:	|  |  |  |   lsl.l #3,d0
    4382:	|  |  |  |   movea.l d1,a0
    4384:	|  |  |  |   adda.l d0,a0
    4386:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    4388:	|  |  |  |   addq.l #1,48(sp)
    438c:	|  |  |  \-> movea.l 60(sp),a0
    4390:	|  |  |      move.l 8(a0),d0
    4394:	|  |  |      cmp.l 48(sp),d0
    4398:	|  |  \----- bgt.s 4374 <loadFunctionCode+0x1b8>
    439a:	|  |     /-- bra.s 43a4 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    439c:	|  \-----|-> movea.l 60(sp),a0
    43a0:	|        |   clr.l 8(a0)
	}
	return TRUE;
    43a4:	|        \-> moveq #1,d0
}
    43a6:	\----------> movea.l (sp)+,a6
    43a8:	             lea 52(sp),sp
    43ac:	             rts

000043ae <loadHandlers>:

void loadHandlers (BPTR fp) {
    43ae:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    43b0:	movea.l 18d1e <currentEvents>,a2
    43b6:	move.l 8(sp),-(sp)
    43ba:	jsr 6bc <get2bytes>
    43c0:	addq.l #4,sp
    43c2:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    43c4:	movea.l 18d1e <currentEvents>,a2
    43ca:	move.l 8(sp),-(sp)
    43ce:	jsr 6bc <get2bytes>
    43d4:	addq.l #4,sp
    43d6:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    43da:	movea.l 18d1e <currentEvents>,a2
    43e0:	move.l 8(sp),-(sp)
    43e4:	jsr 6bc <get2bytes>
    43ea:	addq.l #4,sp
    43ec:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    43f0:	movea.l 18d1e <currentEvents>,a2
    43f6:	move.l 8(sp),-(sp)
    43fa:	jsr 6bc <get2bytes>
    4400:	addq.l #4,sp
    4402:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    4406:	movea.l 18d1e <currentEvents>,a2
    440c:	move.l 8(sp),-(sp)
    4410:	jsr 6bc <get2bytes>
    4416:	addq.l #4,sp
    4418:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    441c:	movea.l 18d1e <currentEvents>,a2
    4422:	move.l 8(sp),-(sp)
    4426:	jsr 6bc <get2bytes>
    442c:	addq.l #4,sp
    442e:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    4432:	movea.l 18d1e <currentEvents>,a2
    4438:	move.l 8(sp),-(sp)
    443c:	jsr 6bc <get2bytes>
    4442:	addq.l #4,sp
    4444:	move.l d0,24(a2)
}
    4448:	nop
    444a:	movea.l (sp)+,a2
    444c:	rts

0000444e <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    444e:	       lea -312(sp),sp
    4452:	       movem.l d2-d3/a6,-(sp)
    4456:	       move.l 332(sp),d1
    445a:	       move.l 336(sp),d0
    445e:	       move.b d1,d1
    4460:	       move.b d1,16(sp)
    4464:	       move.b d0,d0
    4466:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    446a:	       move.l 328(sp),318(sp)
    4470:	       move.l #1005,314(sp)
    4478:	       move.l 19394 <DOSBase>,d0
    447e:	       movea.l d0,a6
    4480:	       move.l 318(sp),d1
    4484:	       move.l 314(sp),d2
    4488:	       jsr -30(a6)
    448c:	       move.l d0,310(sp)
    4490:	       move.l 310(sp),d0
    4494:	       move.l d0,306(sp)

	if (! fp) {
    4498:	   /-- bne.s 44f4 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    449a:	   |   move.l 19394 <DOSBase>,d0
    44a0:	   |   movea.l d0,a6
    44a2:	   |   jsr -60(a6)
    44a6:	   |   move.l d0,154(sp)
    44aa:	   |   move.l 154(sp),d0
    44ae:	   |   move.l d0,150(sp)
    44b2:	   |   move.l #87404,146(sp)
    44ba:	   |   moveq #31,d0
    44bc:	   |   move.l d0,142(sp)
    44c0:	   |   move.l 19394 <DOSBase>,d0
    44c6:	   |   movea.l d0,a6
    44c8:	   |   move.l 150(sp),d1
    44cc:	   |   move.l 146(sp),d2
    44d0:	   |   move.l 142(sp),d3
    44d4:	   |   jsr -48(a6)
    44d8:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    44dc:	   |   move.l 328(sp),-(sp)
    44e0:	   |   pea 1558c <custom.c.49191367+0x860>
    44e6:	   |   jsr 141e2 <KPrintF>
    44ec:	   |   addq.l #8,sp
		return NULL;
    44ee:	   |   moveq #0,d0
    44f0:	/--|-- bra.w 47b4 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    44f4:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    44f8:	|      move.l 306(sp),302(sp)
    44fe:	|      move.l 19394 <DOSBase>,d0
    4504:	|      movea.l d0,a6
    4506:	|      move.l 302(sp),d1
    450a:	|      jsr -306(a6)
    450e:	|      move.l d0,298(sp)
    4512:	|      move.l 298(sp),d0
    4516:	|      moveq #83,d1
    4518:	|      cmp.l d0,d1
    451a:	|  /-- beq.s 4522 <openAndVerify+0xd4>
    451c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    4522:	|  \-> move.l 306(sp),294(sp)
    4528:	|      move.l 19394 <DOSBase>,d0
    452e:	|      movea.l d0,a6
    4530:	|      move.l 294(sp),d1
    4534:	|      jsr -306(a6)
    4538:	|      move.l d0,290(sp)
    453c:	|      move.l 290(sp),d0
    4540:	|      moveq #76,d1
    4542:	|      cmp.l d0,d1
    4544:	|  /-- beq.s 454c <openAndVerify+0xfe>
    4546:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    454c:	|  \-> move.l 306(sp),286(sp)
    4552:	|      move.l 19394 <DOSBase>,d0
    4558:	|      movea.l d0,a6
    455a:	|      move.l 286(sp),d1
    455e:	|      jsr -306(a6)
    4562:	|      move.l d0,282(sp)
    4566:	|      move.l 282(sp),d0
    456a:	|      moveq #85,d1
    456c:	|      cmp.l d0,d1
    456e:	|  /-- beq.s 4576 <openAndVerify+0x128>
    4570:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    4576:	|  \-> move.l 306(sp),278(sp)
    457c:	|      move.l 19394 <DOSBase>,d0
    4582:	|      movea.l d0,a6
    4584:	|      move.l 278(sp),d1
    4588:	|      jsr -306(a6)
    458c:	|      move.l d0,274(sp)
    4590:	|      move.l 274(sp),d0
    4594:	|      moveq #68,d1
    4596:	|      cmp.l d0,d1
    4598:	|  /-- beq.s 45a0 <openAndVerify+0x152>
    459a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    45a0:	|  \-> move.l 306(sp),270(sp)
    45a6:	|      move.l 19394 <DOSBase>,d0
    45ac:	|      movea.l d0,a6
    45ae:	|      move.l 270(sp),d1
    45b2:	|      jsr -306(a6)
    45b6:	|      move.l d0,266(sp)
    45ba:	|      move.l 266(sp),d1
    45be:	|      move.b 16(sp),d0
    45c2:	|      ext.w d0
    45c4:	|      movea.w d0,a0
    45c6:	|      cmpa.l d1,a0
    45c8:	|  /-- beq.s 45d0 <openAndVerify+0x182>
    45ca:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    45d0:	|  \-> move.l 306(sp),262(sp)
    45d6:	|      move.l 19394 <DOSBase>,d0
    45dc:	|      movea.l d0,a6
    45de:	|      move.l 262(sp),d1
    45e2:	|      jsr -306(a6)
    45e6:	|      move.l d0,258(sp)
    45ea:	|      move.l 258(sp),d1
    45ee:	|      move.b 14(sp),d0
    45f2:	|      ext.w d0
    45f4:	|      movea.w d0,a0
    45f6:	|      cmpa.l d1,a0
    45f8:	|  /-- beq.s 4600 <openAndVerify+0x1b2>
    45fa:	|  |   move.w #1,322(sp)
	if (headerBad) {
    4600:	|  \-> tst.w 322(sp)
    4604:	|  /-- beq.s 465c <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    4606:	|  |   move.l 19394 <DOSBase>,d0
    460c:	|  |   movea.l d0,a6
    460e:	|  |   jsr -60(a6)
    4612:	|  |   move.l d0,174(sp)
    4616:	|  |   move.l 174(sp),d0
    461a:	|  |   move.l d0,170(sp)
    461e:	|  |   move.l #87467,166(sp)
    4626:	|  |   moveq #31,d0
    4628:	|  |   move.l d0,162(sp)
    462c:	|  |   move.l 19394 <DOSBase>,d0
    4632:	|  |   movea.l d0,a6
    4634:	|  |   move.l 170(sp),d1
    4638:	|  |   move.l 166(sp),d2
    463c:	|  |   move.l 162(sp),d3
    4640:	|  |   jsr -48(a6)
    4644:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4648:	|  |   pea 155ab <custom.c.49191367+0x87f>
    464e:	|  |   jsr 141e2 <KPrintF>
    4654:	|  |   addq.l #4,sp
		return NULL;
    4656:	|  |   moveq #0,d0
    4658:	+--|-- bra.w 47b4 <openAndVerify+0x366>
	}
	FGetC (fp);
    465c:	|  \-> move.l 306(sp),254(sp)
    4662:	|      move.l 19394 <DOSBase>,d0
    4668:	|      movea.l d0,a6
    466a:	|      move.l 254(sp),d1
    466e:	|      jsr -306(a6)
    4672:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    4676:	|      nop
    4678:	|  /-> move.l 306(sp),246(sp)
    467e:	|  |   move.l 19394 <DOSBase>,d0
    4684:	|  |   movea.l d0,a6
    4686:	|  |   move.l 246(sp),d1
    468a:	|  |   jsr -306(a6)
    468e:	|  |   move.l d0,242(sp)
    4692:	|  |   move.l 242(sp),d0
    4696:	|  \-- bne.s 4678 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    4698:	|      move.l 306(sp),238(sp)
    469e:	|      move.l 19394 <DOSBase>,d0
    46a4:	|      movea.l d0,a6
    46a6:	|      move.l 238(sp),d1
    46aa:	|      jsr -306(a6)
    46ae:	|      move.l d0,234(sp)
    46b2:	|      move.l 234(sp),d0
    46b6:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    46ba:	|      move.l 306(sp),226(sp)
    46c0:	|      move.l 19394 <DOSBase>,d0
    46c6:	|      movea.l d0,a6
    46c8:	|      move.l 226(sp),d1
    46cc:	|      jsr -306(a6)
    46d0:	|      move.l d0,222(sp)
    46d4:	|      move.l 222(sp),d0
    46d8:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    46dc:	|      move.l 230(sp),d0
    46e0:	|      lsl.l #8,d0
    46e2:	|      add.l 218(sp),d0
    46e6:	|      movea.l 344(sp),a0
    46ea:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    46ec:	|      movea.l 344(sp),a0
    46f0:	|      move.l (a0),d0
    46f2:	|      cmpi.l #514,d0
    46f8:	|  /-- ble.s 474e <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    46fa:	|  |   move.l 19394 <DOSBase>,d0
    4700:	|  |   movea.l d0,a6
    4702:	|  |   jsr -60(a6)
    4706:	|  |   move.l d0,194(sp)
    470a:	|  |   move.l 194(sp),d0
    470e:	|  |   move.l d0,190(sp)
    4712:	|  |   move.l #87494,186(sp)
    471a:	|  |   moveq #100,d1
    471c:	|  |   move.l d1,182(sp)
    4720:	|  |   move.l 19394 <DOSBase>,d0
    4726:	|  |   movea.l d0,a6
    4728:	|  |   move.l 190(sp),d1
    472c:	|  |   move.l 186(sp),d2
    4730:	|  |   move.l 182(sp),d3
    4734:	|  |   jsr -48(a6)
    4738:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    473c:	|  |   pea 155c6 <custom.c.49191367+0x89a>
    4742:	|  |   jsr 141e2 <KPrintF>
    4748:	|  |   addq.l #4,sp
		return NULL;
    474a:	|  |   moveq #0,d0
    474c:	+--|-- bra.s 47b4 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    474e:	|  \-> movea.l 344(sp),a0
    4752:	|      move.l (a0),d0
    4754:	|      cmpi.l #257,d0
    475a:	|  /-- bgt.s 47b0 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    475c:	|  |   move.l 19394 <DOSBase>,d0
    4762:	|  |   movea.l d0,a6
    4764:	|  |   jsr -60(a6)
    4768:	|  |   move.l d0,214(sp)
    476c:	|  |   move.l 214(sp),d0
    4770:	|  |   move.l d0,210(sp)
    4774:	|  |   move.l #87563,206(sp)
    477c:	|  |   moveq #100,d0
    477e:	|  |   move.l d0,202(sp)
    4782:	|  |   move.l 19394 <DOSBase>,d0
    4788:	|  |   movea.l d0,a6
    478a:	|  |   move.l 210(sp),d1
    478e:	|  |   move.l 206(sp),d2
    4792:	|  |   move.l 202(sp),d3
    4796:	|  |   jsr -48(a6)
    479a:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    479e:	|  |   pea 1560b <custom.c.49191367+0x8df>
    47a4:	|  |   jsr 141e2 <KPrintF>
    47aa:	|  |   addq.l #4,sp
		return NULL;
    47ac:	|  |   moveq #0,d0
    47ae:	+--|-- bra.s 47b4 <openAndVerify+0x366>
	}
	return fp;
    47b0:	|  \-> move.l 306(sp),d0
}
    47b4:	\----> movem.l (sp)+,d2-d3/a6
    47b8:	       lea 312(sp),sp
    47bc:	       rts

000047be <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    47be:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    47c0:	          move.l #103204,(sp)
	while (* huntAndDestroy) {
    47c6:	   /----- bra.s 47f2 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    47c8:	/--|----> movea.l (sp),a0
    47ca:	|  |      move.l (a0),d0
    47cc:	|  |      cmp.l 8(sp),d0
    47d0:	|  |  /-- bne.s 47e8 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    47d2:	|  |  |   movea.l (sp),a0
    47d4:	|  |  |   movea.l (a0),a0
    47d6:	|  |  |   move.l 44(a0),d0
    47da:	|  |  |   movea.l (sp),a0
    47dc:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    47de:	|  |  |   movea.l 8(sp),a0
    47e2:	|  |  |   clr.l 44(a0)
    47e6:	|  +--|-- bra.s 47f2 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    47e8:	|  |  \-> movea.l (sp),a0
    47ea:	|  |      move.l (a0),d0
    47ec:	|  |      moveq #44,d1
    47ee:	|  |      add.l d0,d1
    47f0:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    47f2:	|  \----> movea.l (sp),a0
    47f4:	|         move.l (a0),d0
    47f6:	\-------- bne.s 47c8 <pauseFunction+0xa>
		}
	}
}
    47f8:	          nop
    47fa:	          nop
    47fc:	          addq.l #4,sp
    47fe:	          rts

00004800 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    4800:	move.l 19324 <allRunningFunctions>,d0
    4806:	movea.l 4(sp),a0
    480a:	move.l d0,44(a0)
	allRunningFunctions = fun;
    480e:	move.l 4(sp),19324 <allRunningFunctions>
}
    4816:	nop
    4818:	rts

0000481a <runSludge>:

BOOL runSludge () {
    481a:	                   lea -12(sp),sp
    481e:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    4820:	                   move.l 19324 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4828:	      /----------- bra.s 48a4 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    482a:	   /--|----------> movea.l 12(sp),a0
    482e:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4834:	   |  |            movea.l 12(sp),a0
    4838:	   |  |            move.b 56(a0),d0
    483c:	   |  |  /-------- bne.s 489e <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    483e:	   |  |  |         movea.l 12(sp),a0
    4842:	   |  |  |         move.l 12(a0),d0
    4846:	   |  |  |  /----- beq.s 4870 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4848:	   |  |  |  |      movea.l 12(sp),a0
    484c:	   |  |  |  |      move.l 12(a0),d0
    4850:	   |  |  |  |  /-- bpl.s 485c <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4852:	   |  |  |  |  |   movea.l 12(sp),a0
    4856:	   |  |  |  |  |   clr.l 12(a0)
    485a:	   |  |  +--|--|-- bra.s 489e <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    485c:	   |  |  |  |  \-> movea.l 12(sp),a0
    4860:	   |  |  |  |      move.l 12(a0),d0
    4864:	   |  |  |  |      subq.l #1,d0
    4866:	   |  |  |  |      movea.l 12(sp),a0
    486a:	   |  |  |  |      move.l d0,12(a0)
    486e:	   |  |  +--|----- bra.s 489e <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    4870:	   |  |  |  \----> movea.l 12(sp),a0
    4874:	   |  |  |         move.w 50(a0),d0
    4878:	   |  |  |     /-- beq.s 4888 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    487a:	   |  |  |     |   movea.l 12(sp),a0
    487e:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    4882:	   |  |  |     |   jsr 5e64 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4888:	   |  |  |     \-> move.l 12(sp),-(sp)
    488c:	   |  |  |         jsr 2a64 <continueFunction>
    4892:	   |  |  |         addq.l #4,sp
    4894:	   |  |  |         tst.w d0
    4896:	   |  |  +-------- bne.s 489e <runSludge+0x84>
					return FALSE;
    4898:	   |  |  |         clr.w d0
    489a:	/--|--|--|-------- bra.w 492a <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    489e:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    48a4:	|  |  \----------> tst.l 12(sp)
    48a8:	|  \-------------- bne.s 482a <runSludge+0x10>
	}

	if (loadNow) {
    48aa:	|                  move.l 19358 <loadNow>,d0
    48b0:	|        /-------- beq.s 4928 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    48b2:	|        |         movea.l 19358 <loadNow>,a0
    48b8:	|        |         move.b (a0),d0
    48ba:	|        |         cmpi.b #58,d0
    48be:	|        |  /----- bne.s 48f2 <runSludge+0xd8>
			saveGame (loadNow + 1);
    48c0:	|        |  |      move.l 19358 <loadNow>,d0
    48c6:	|        |  |      addq.l #1,d0
    48c8:	|        |  |      move.l d0,-(sp)
    48ca:	|        |  |      jsr a3dc <saveGame>
    48d0:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    48d2:	|        |  |      movea.l 194aa <saverFunc>,a0
    48d8:	|        |  |      lea 28(a0),a0
    48dc:	|        |  |      pea 1 <_start+0x1>
    48e0:	|        |  |      pea 1 <_start+0x1>
    48e4:	|        |  |      move.l a0,-(sp)
    48e6:	|        |  |      jsr 12a8c <setVariable>
    48ec:	|        |  |      lea 12(sp),sp
    48f0:	|        |  |  /-- bra.s 490a <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    48f2:	|        |  \--|-> move.l 19358 <loadNow>,d0
    48f8:	|        |     |   move.l d0,-(sp)
    48fa:	|        |     |   jsr 9f24 <loadGame>
    4900:	|        |     |   addq.l #4,sp
    4902:	|        |     |   tst.w d0
    4904:	|        |     +-- bne.s 490a <runSludge+0xf0>
    4906:	|        |     |   clr.w d0
    4908:	+--------|-----|-- bra.s 492a <runSludge+0x110>
		}
		FreeVec(loadNow);
    490a:	|        |     \-> move.l 19358 <loadNow>,8(sp)
    4912:	|        |         move.l 1938c <SysBase>,d0
    4918:	|        |         movea.l d0,a6
    491a:	|        |         movea.l 8(sp),a1
    491e:	|        |         jsr -690(a6)
		loadNow = NULL;
    4922:	|        |         clr.l 19358 <loadNow>
	}

	return TRUE;
    4928:	|        \-------> moveq #1,d0
}
    492a:	\----------------> movea.l (sp)+,a6
    492c:	                   lea 12(sp),sp
    4930:	                   rts

00004932 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    4932:	movea.l 18d1e <currentEvents>,a0
    4938:	move.l (a0),d0
    493a:	move.l 4(sp),-(sp)
    493e:	move.l d0,-(sp)
    4940:	jsr 8d0 <put2bytes>
    4946:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4948:	movea.l 18d1e <currentEvents>,a0
    494e:	move.l 4(a0),d0
    4952:	move.l 4(sp),-(sp)
    4956:	move.l d0,-(sp)
    4958:	jsr 8d0 <put2bytes>
    495e:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    4960:	movea.l 18d1e <currentEvents>,a0
    4966:	move.l 8(a0),d0
    496a:	move.l 4(sp),-(sp)
    496e:	move.l d0,-(sp)
    4970:	jsr 8d0 <put2bytes>
    4976:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4978:	movea.l 18d1e <currentEvents>,a0
    497e:	move.l 12(a0),d0
    4982:	move.l 4(sp),-(sp)
    4986:	move.l d0,-(sp)
    4988:	jsr 8d0 <put2bytes>
    498e:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    4990:	movea.l 18d1e <currentEvents>,a0
    4996:	move.l 16(a0),d0
    499a:	move.l 4(sp),-(sp)
    499e:	move.l d0,-(sp)
    49a0:	jsr 8d0 <put2bytes>
    49a6:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    49a8:	movea.l 18d1e <currentEvents>,a0
    49ae:	move.l 20(a0),d0
    49b2:	move.l 4(sp),-(sp)
    49b6:	move.l d0,-(sp)
    49b8:	jsr 8d0 <put2bytes>
    49be:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    49c0:	movea.l 18d1e <currentEvents>,a0
    49c6:	move.l 24(a0),d0
    49ca:	move.l 4(sp),-(sp)
    49ce:	move.l d0,-(sp)
    49d0:	jsr 8d0 <put2bytes>
    49d6:	addq.l #8,sp
}
    49d8:	nop
    49da:	rts

000049dc <sludgeDisplay>:

void sludgeDisplay () {	
	CstDrawBackdrop();
    49dc:	jsr 11da <CstDrawBackdrop>
	drawPeople();
    49e2:	jsr 7d30 <drawPeople>
	CstSwapBuffer();
    49e8:	jsr 1cf4 <CstSwapBuffer>
}
    49ee:	nop
    49f0:	rts

000049f2 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    49f2:	      /-- bra.s 4a12 <stackSetByIndex+0x20>
		vS = vS->next;
    49f4:	/-----|-> movea.l 4(sp),a0
    49f8:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    49fe:	|     +-- bne.s 4a12 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    4a00:	|     |   pea 15652 <custom.c.49191367+0x926>
    4a06:	|     |   jsr 141e2 <KPrintF>
    4a0c:	|     |   addq.l #4,sp
			return FALSE;
    4a0e:	|     |   clr.w d0
    4a10:	|  /--|-- bra.s 4a34 <stackSetByIndex+0x42>
	while (theIndex--) {
    4a12:	|  |  \-> move.l 8(sp),d0
    4a16:	|  |      move.l d0,d1
    4a18:	|  |      subq.l #1,d1
    4a1a:	|  |      move.l d1,8(sp)
    4a1e:	|  |      tst.l d0
    4a20:	\--|----- bne.s 49f4 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    4a22:	   |      move.l 4(sp),d0
    4a26:	   |      move.l d0,-(sp)
    4a28:	   |      move.l 16(sp),-(sp)
    4a2c:	   |      jsr 12654 <copyVariable>
    4a32:	   |      addq.l #8,sp
}
    4a34:	   \----> rts

00004a36 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4a36:	             lea -24(sp),sp
    4a3a:	             move.l a6,-(sp)
    4a3c:	             move.l 48(sp),d0
    4a40:	             move.w d0,d0
    4a42:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4a46:	             moveq #58,d0
    4a48:	             move.l d0,24(sp)
    4a4c:	             clr.l 20(sp)
    4a50:	             move.l 1938c <SysBase>,d0
    4a56:	             movea.l d0,a6
    4a58:	             move.l 24(sp),d0
    4a5c:	             move.l 20(sp),d1
    4a60:	             jsr -684(a6)
    4a64:	             move.l d0,16(sp)
    4a68:	             move.l 16(sp),d0
    4a6c:	             move.l d0,12(sp)
	if(!newFunc) {
    4a70:	         /-- bne.s 4a86 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4a72:	         |   pea 1566b <custom.c.49191367+0x93f>
    4a78:	         |   jsr 141e2 <KPrintF>
    4a7e:	         |   addq.l #4,sp
		return 0;
    4a80:	         |   moveq #0,d0
    4a82:	/--------|-- bra.w 4b9c <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4a86:	|        \-> move.l 32(sp),d0
    4a8a:	|            movea.l 12(sp),a0
    4a8e:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    4a90:	|            move.l 12(sp),-(sp)
    4a94:	|            jsr 41bc <loadFunctionCode>
    4a9a:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    4a9c:	|            movea.l 12(sp),a0
    4aa0:	|            move.l 16(a0),d1
    4aa4:	|            move.l 36(sp),d0
    4aa8:	|            cmp.l d1,d0
    4aaa:	|        /-- beq.s 4ac0 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    4aac:	|        |   pea 15694 <custom.c.49191367+0x968>
    4ab2:	|        |   jsr 141e2 <KPrintF>
    4ab8:	|        |   addq.l #4,sp
		return NULL; 
    4aba:	|        |   moveq #0,d0
    4abc:	+--------|-- bra.w 4b9c <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    4ac0:	|        \-> movea.l 12(sp),a0
    4ac4:	|            move.l 16(a0),d1
    4ac8:	|            movea.l 12(sp),a0
    4acc:	|            move.l 8(a0),d0
    4ad0:	|            cmp.l d1,d0
    4ad2:	|  /-------- bge.s 4b3c <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4ad4:	|  |         pea 156b0 <custom.c.49191367+0x984>
    4ada:	|  |         jsr 141e2 <KPrintF>
    4ae0:	|  |         addq.l #4,sp
		return NULL; 
    4ae2:	|  |         moveq #0,d0
    4ae4:	+--|-------- bra.w 4b9c <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4ae8:	|  |  /----> movea.l 44(sp),a0
    4aec:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    4af0:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4af4:	|  |  |      movea.l 44(sp),a0
    4af8:	|  |  |      move.l (a0),d0
    4afa:	|  |  |  /-- bne.s 4b10 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    4afc:	|  |  |  |   pea 156da <custom.c.49191367+0x9ae>
    4b02:	|  |  |  |   jsr 141e2 <KPrintF>
    4b08:	|  |  |  |   addq.l #4,sp
			return NULL;
    4b0a:	|  |  |  |   moveq #0,d0
    4b0c:	+--|--|--|-- bra.w 4b9c <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    4b10:	|  |  |  \-> movea.l 12(sp),a0
    4b14:	|  |  |      move.l 20(a0),d1
    4b18:	|  |  |      move.l 36(sp),d0
    4b1c:	|  |  |      lsl.l #3,d0
    4b1e:	|  |  |      add.l d0,d1
    4b20:	|  |  |      move.l 8(sp),d0
    4b24:	|  |  |      move.l d1,-(sp)
    4b26:	|  |  |      move.l d0,-(sp)
    4b28:	|  |  |      jsr 12654 <copyVariable>
    4b2e:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    4b30:	|  |  |      move.l 44(sp),-(sp)
    4b34:	|  |  |      jsr 12b1e <trimStack>
    4b3a:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    4b3c:	|  \--|----> tst.l 36(sp)
    4b40:	|     \----- bne.s 4ae8 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4b42:	|            movea.l 12(sp),a0
    4b46:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4b4a:	|            movea.l 12(sp),a0
    4b4e:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4b52:	|            movea.l 12(sp),a0
    4b56:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4b5c:	|            movea.l 12(sp),a0
    4b60:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4b66:	|            movea.l 12(sp),a0
    4b6a:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    4b6e:	|            movea.l 12(sp),a0
    4b72:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4b76:	|            movea.l 12(sp),a0
    4b7a:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    4b7e:	|            movea.l 12(sp),a0
    4b82:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    4b86:	|            movea.l 12(sp),a0
    4b8a:	|            clr.l 28(a0)

	restartFunction (newFunc);
    4b8e:	|            move.l 12(sp),-(sp)
    4b92:	|            jsr 4800 <restartFunction>
    4b98:	|            addq.l #4,sp
	return 1;
    4b9a:	|            moveq #1,d0
}
    4b9c:	\----------> movea.l (sp)+,a6
    4b9e:	             lea 24(sp),sp
    4ba2:	             rts

00004ba4 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    4ba4:	clr.w 18d2a <sliceBusy>
}
    4baa:	nop
    4bac:	rts

00004bae <getNumberedString>:

char * getNumberedString (int value) {
    4bae:	       lea -56(sp),sp
    4bb2:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4bb6:	       move.w 18d2a <sliceBusy>,d0
    4bbc:	   /-- beq.s 4c06 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    4bbe:	   |   move.l 19394 <DOSBase>,d0
    4bc4:	   |   movea.l d0,a6
    4bc6:	   |   jsr -60(a6)
    4bca:	   |   move.l d0,28(sp)
    4bce:	   |   move.l 28(sp),d0
    4bd2:	   |   move.l d0,24(sp)
    4bd6:	   |   move.l #87845,20(sp)
    4bde:	   |   moveq #76,d0
    4be0:	   |   move.l d0,16(sp)
    4be4:	   |   move.l 19394 <DOSBase>,d0
    4bea:	   |   movea.l d0,a6
    4bec:	   |   move.l 24(sp),d1
    4bf0:	   |   move.l 20(sp),d2
    4bf4:	   |   move.l 16(sp),d3
    4bf8:	   |   jsr -48(a6)
    4bfc:	   |   move.l d0,12(sp)
		return NULL;
    4c00:	   |   moveq #0,d0
    4c02:	/--|-- bra.w 4ca2 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    4c06:	|  \-> move.l 19374 <bigDataFile>,64(sp)
    4c0e:	|      move.l 72(sp),d0
    4c12:	|      add.l d0,d0
    4c14:	|      add.l d0,d0
    4c16:	|      move.l d0,d1
    4c18:	|      move.l 19380 <startOfTextIndex>,d0
    4c1e:	|      add.l d1,d0
    4c20:	|      move.l d0,60(sp)
    4c24:	|      moveq #-1,d0
    4c26:	|      move.l d0,56(sp)
    4c2a:	|      move.l 19394 <DOSBase>,d0
    4c30:	|      movea.l d0,a6
    4c32:	|      move.l 64(sp),d1
    4c36:	|      move.l 60(sp),d2
    4c3a:	|      move.l 56(sp),d3
    4c3e:	|      jsr -66(a6)
    4c42:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4c46:	|      move.l 19374 <bigDataFile>,d0
    4c4c:	|      move.l d0,-(sp)
    4c4e:	|      jsr 718 <get4bytes>
    4c54:	|      addq.l #4,sp
    4c56:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4c5a:	|      move.l 19374 <bigDataFile>,48(sp)
    4c62:	|      move.l 72(sp),44(sp)
    4c68:	|      moveq #-1,d0
    4c6a:	|      move.l d0,40(sp)
    4c6e:	|      move.l 19394 <DOSBase>,d0
    4c74:	|      movea.l d0,a6
    4c76:	|      move.l 48(sp),d1
    4c7a:	|      move.l 44(sp),d2
    4c7e:	|      move.l 40(sp),d3
    4c82:	|      jsr -66(a6)
    4c86:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    4c8a:	|      move.l 19374 <bigDataFile>,d0
    4c90:	|      move.l d0,-(sp)
    4c92:	|      jsr b02 <readString>
    4c98:	|      addq.l #4,sp
    4c9a:	|      move.l d0,32(sp)
	
	return s;
    4c9e:	|      move.l 32(sp),d0
}
    4ca2:	\----> movem.l (sp)+,d2-d3/a6
    4ca6:	       lea 56(sp),sp
    4caa:	       rts

00004cac <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    4cac:	       lea -32(sp),sp
    4cb0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    4cb4:	       move.w 18d2a <sliceBusy>,d0
    4cba:	   /-- beq.s 4cd6 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4cbc:	   |   pea 15772 <custom.c.49191367+0xa46>
    4cc2:	   |   pea 15790 <custom.c.49191367+0xa64>
    4cc8:	   |   jsr 141e2 <KPrintF>
    4cce:	   |   addq.l #8,sp
		return 0;
    4cd0:	   |   moveq #0,d0
    4cd2:	/--|-- bra.w 4d6a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4cd6:	|  \-> move.l 19374 <bigDataFile>,40(sp)
    4cde:	|      move.l 48(sp),d0
    4ce2:	|      add.l d0,d0
    4ce4:	|      add.l d0,d0
    4ce6:	|      move.l d0,d1
    4ce8:	|      move.l 1937c <startOfDataIndex>,d0
    4cee:	|      add.l d1,d0
    4cf0:	|      move.l d0,36(sp)
    4cf4:	|      moveq #-1,d0
    4cf6:	|      move.l d0,32(sp)
    4cfa:	|      move.l 19394 <DOSBase>,d0
    4d00:	|      movea.l d0,a6
    4d02:	|      move.l 40(sp),d1
    4d06:	|      move.l 36(sp),d2
    4d0a:	|      move.l 32(sp),d3
    4d0e:	|      jsr -66(a6)
    4d12:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    4d16:	|      move.l 19374 <bigDataFile>,24(sp)
    4d1e:	|      move.l 19374 <bigDataFile>,d0
    4d24:	|      move.l d0,-(sp)
    4d26:	|      jsr 718 <get4bytes>
    4d2c:	|      addq.l #4,sp
    4d2e:	|      move.l d0,20(sp)
    4d32:	|      clr.l 16(sp)
    4d36:	|      move.l 19394 <DOSBase>,d0
    4d3c:	|      movea.l d0,a6
    4d3e:	|      move.l 24(sp),d1
    4d42:	|      move.l 20(sp),d2
    4d46:	|      move.l 16(sp),d3
    4d4a:	|      jsr -66(a6)
    4d4e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4d52:	|      move.w #1,18d2a <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4d5a:	|      move.l 19374 <bigDataFile>,d0
    4d60:	|      move.l d0,-(sp)
    4d62:	|      jsr 718 <get4bytes>
    4d68:	|      addq.l #4,sp
}
    4d6a:	\----> movem.l (sp)+,d2-d3/a6
    4d6e:	       lea 32(sp),sp
    4d72:	       rts

00004d74 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    4d74:	       lea -32(sp),sp
    4d78:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    4d7c:	       move.w 18d2a <sliceBusy>,d0
    4d82:	   /-- beq.s 4d9e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    4d84:	   |   pea 15772 <custom.c.49191367+0xa46>
    4d8a:	   |   pea 15790 <custom.c.49191367+0xa64>
    4d90:	   |   jsr 141e2 <KPrintF>
    4d96:	   |   addq.l #8,sp
        return FALSE;
    4d98:	   |   clr.w d0
    4d9a:	/--|-- bra.w 4e2a <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    4d9e:	|  \-> move.l 19374 <bigDataFile>,40(sp)
    4da6:	|      move.l 48(sp),d0
    4daa:	|      add.l d0,d0
    4dac:	|      add.l d0,d0
    4dae:	|      move.l d0,d1
    4db0:	|      move.l 19388 <startOfObjectIndex>,d0
    4db6:	|      add.l d1,d0
    4db8:	|      move.l d0,36(sp)
    4dbc:	|      moveq #-1,d0
    4dbe:	|      move.l d0,32(sp)
    4dc2:	|      move.l 19394 <DOSBase>,d0
    4dc8:	|      movea.l d0,a6
    4dca:	|      move.l 40(sp),d1
    4dce:	|      move.l 36(sp),d2
    4dd2:	|      move.l 32(sp),d3
    4dd6:	|      jsr -66(a6)
    4dda:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    4dde:	|      move.l 19374 <bigDataFile>,24(sp)
    4de6:	|      move.l 19374 <bigDataFile>,d0
    4dec:	|      move.l d0,-(sp)
    4dee:	|      jsr 718 <get4bytes>
    4df4:	|      addq.l #4,sp
    4df6:	|      move.l d0,20(sp)
    4dfa:	|      moveq #-1,d0
    4dfc:	|      move.l d0,16(sp)
    4e00:	|      move.l 19394 <DOSBase>,d0
    4e06:	|      movea.l d0,a6
    4e08:	|      move.l 24(sp),d1
    4e0c:	|      move.l 20(sp),d2
    4e10:	|      move.l 16(sp),d3
    4e14:	|      jsr -66(a6)
    4e18:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    4e1c:	|      move.w #1,18d2a <sliceBusy>
    4e24:	|      move.w 18d2a <sliceBusy>,d0
}
    4e2a:	\----> movem.l (sp)+,d2-d3/a6
    4e2e:	       lea 32(sp),sp
    4e32:	       rts

00004e34 <openSubSlice>:

BOOL openSubSlice (int num) {
    4e34:	       lea -32(sp),sp
    4e38:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4e3c:	       move.w 18d2a <sliceBusy>,d0
    4e42:	   /-- beq.s 4e5e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4e44:	   |   pea 15772 <custom.c.49191367+0xa46>
    4e4a:	   |   pea 15790 <custom.c.49191367+0xa64>
    4e50:	   |   jsr 141e2 <KPrintF>
    4e56:	   |   addq.l #8,sp
		return FALSE;
    4e58:	   |   clr.w d0
    4e5a:	/--|-- bra.w 4eea <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4e5e:	|  \-> move.l 19374 <bigDataFile>,40(sp)
    4e66:	|      move.l 48(sp),d0
    4e6a:	|      add.l d0,d0
    4e6c:	|      add.l d0,d0
    4e6e:	|      move.l d0,d1
    4e70:	|      move.l 19384 <startOfSubIndex>,d0
    4e76:	|      add.l d1,d0
    4e78:	|      move.l d0,36(sp)
    4e7c:	|      moveq #-1,d0
    4e7e:	|      move.l d0,32(sp)
    4e82:	|      move.l 19394 <DOSBase>,d0
    4e88:	|      movea.l d0,a6
    4e8a:	|      move.l 40(sp),d1
    4e8e:	|      move.l 36(sp),d2
    4e92:	|      move.l 32(sp),d3
    4e96:	|      jsr -66(a6)
    4e9a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4e9e:	|      move.l 19374 <bigDataFile>,24(sp)
    4ea6:	|      move.l 19374 <bigDataFile>,d0
    4eac:	|      move.l d0,-(sp)
    4eae:	|      jsr 718 <get4bytes>
    4eb4:	|      addq.l #4,sp
    4eb6:	|      move.l d0,20(sp)
    4eba:	|      moveq #-1,d0
    4ebc:	|      move.l d0,16(sp)
    4ec0:	|      move.l 19394 <DOSBase>,d0
    4ec6:	|      movea.l d0,a6
    4ec8:	|      move.l 24(sp),d1
    4ecc:	|      move.l 20(sp),d2
    4ed0:	|      move.l 16(sp),d3
    4ed4:	|      jsr -66(a6)
    4ed8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4edc:	|      move.w #1,18d2a <sliceBusy>
    4ee4:	|      move.w 18d2a <sliceBusy>,d0
}
    4eea:	\----> movem.l (sp)+,d2-d3/a6
    4eee:	       lea 32(sp),sp
    4ef2:	       rts

00004ef4 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4ef4:	       lea -180(sp),sp
    4ef8:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4efc:	       tst.l 196(sp)
    4f00:	/----- beq.s 4f40 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4f02:	|      move.l 196(sp),19374 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4f0a:	|      move.l 196(sp),168(sp)
    4f10:	|      clr.l 164(sp)
    4f14:	|      clr.l 160(sp)
    4f18:	|      move.l 19394 <DOSBase>,d0
    4f1e:	|      movea.l d0,a6
    4f20:	|      move.l 168(sp),d1
    4f24:	|      move.l 164(sp),d2
    4f28:	|      move.l 160(sp),d3
    4f2c:	|      jsr -66(a6)
    4f30:	|      move.l d0,156(sp)
    4f34:	|      move.l 156(sp),d0
    4f38:	|      move.l d0,19378 <startIndex>
    4f3e:	|  /-- bra.s 4f7a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4f40:	\--|-> move.l 19374 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4f48:	   |   move.l 196(sp),184(sp)
    4f4e:	   |   move.l 19378 <startIndex>,d0
    4f54:	   |   move.l d0,180(sp)
    4f58:	   |   moveq #-1,d0
    4f5a:	   |   move.l d0,176(sp)
    4f5e:	   |   move.l 19394 <DOSBase>,d0
    4f64:	   |   movea.l d0,a6
    4f66:	   |   move.l 184(sp),d1
    4f6a:	   |   move.l 180(sp),d2
    4f6e:	   |   move.l 176(sp),d3
    4f72:	   |   jsr -66(a6)
    4f76:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4f7a:	   \-> clr.w 18d2a <sliceBusy>

	if (skipBefore > numLanguages) {
    4f80:	       move.l 204(sp),d0
    4f84:	       cmp.l 200(sp),d0
    4f88:	   /-- bls.s 4f9c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4f8a:	   |   pea 157aa <custom.c.49191367+0xa7e>
    4f90:	   |   jsr 141e2 <KPrintF>
    4f96:	   |   addq.l #4,sp
		skipBefore = 0;
    4f98:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4f9c:	   \-> move.l 200(sp),d0
    4fa0:	       sub.l 204(sp),d0
    4fa4:	       move.l d0,188(sp)
	while (skipBefore) {
    4fa8:	   /-- bra.s 4fe6 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4faa:	/--|-> move.l 196(sp),24(sp)
    4fb0:	|  |   move.l 196(sp),-(sp)
    4fb4:	|  |   jsr 718 <get4bytes>
    4fba:	|  |   addq.l #4,sp
    4fbc:	|  |   move.l d0,20(sp)
    4fc0:	|  |   moveq #-1,d0
    4fc2:	|  |   move.l d0,16(sp)
    4fc6:	|  |   move.l 19394 <DOSBase>,d0
    4fcc:	|  |   movea.l d0,a6
    4fce:	|  |   move.l 24(sp),d1
    4fd2:	|  |   move.l 20(sp),d2
    4fd6:	|  |   move.l 16(sp),d3
    4fda:	|  |   jsr -66(a6)
    4fde:	|  |   move.l d0,12(sp)
		skipBefore --;
    4fe2:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4fe6:	|  \-> tst.l 204(sp)
    4fea:	\----- bne.s 4faa <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4fec:	       move.l 196(sp),152(sp)
    4ff2:	       clr.l 148(sp)
    4ff6:	       clr.l 144(sp)
    4ffa:	       move.l 19394 <DOSBase>,d0
    5000:	       movea.l d0,a6
    5002:	       move.l 152(sp),d1
    5006:	       move.l 148(sp),d2
    500a:	       move.l 144(sp),d3
    500e:	       jsr -66(a6)
    5012:	       move.l d0,140(sp)
    5016:	       move.l 140(sp),d0
    501a:	       addq.l #4,d0
    501c:	       move.l d0,19380 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    5022:	       move.l 196(sp),136(sp)
    5028:	       move.l 196(sp),-(sp)
    502c:	       jsr 718 <get4bytes>
    5032:	       addq.l #4,sp
    5034:	       move.l d0,132(sp)
    5038:	       moveq #-1,d0
    503a:	       move.l d0,128(sp)
    503e:	       move.l 19394 <DOSBase>,d0
    5044:	       movea.l d0,a6
    5046:	       move.l 136(sp),d1
    504a:	       move.l 132(sp),d2
    504e:	       move.l 128(sp),d3
    5052:	       jsr -66(a6)
    5056:	       move.l d0,124(sp)

	while (skipAfter) {
    505a:	   /-- bra.s 5098 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    505c:	/--|-> move.l 196(sp),40(sp)
    5062:	|  |   move.l 196(sp),-(sp)
    5066:	|  |   jsr 718 <get4bytes>
    506c:	|  |   addq.l #4,sp
    506e:	|  |   move.l d0,36(sp)
    5072:	|  |   moveq #-1,d0
    5074:	|  |   move.l d0,32(sp)
    5078:	|  |   move.l 19394 <DOSBase>,d0
    507e:	|  |   movea.l d0,a6
    5080:	|  |   move.l 40(sp),d1
    5084:	|  |   move.l 36(sp),d2
    5088:	|  |   move.l 32(sp),d3
    508c:	|  |   jsr -66(a6)
    5090:	|  |   move.l d0,28(sp)
		skipAfter --;
    5094:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    5098:	|  \-> tst.l 188(sp)
    509c:	\----- bne.s 505c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    509e:	       move.l 196(sp),120(sp)
    50a4:	       clr.l 116(sp)
    50a8:	       clr.l 112(sp)
    50ac:	       move.l 19394 <DOSBase>,d0
    50b2:	       movea.l d0,a6
    50b4:	       move.l 120(sp),d1
    50b8:	       move.l 116(sp),d2
    50bc:	       move.l 112(sp),d3
    50c0:	       jsr -66(a6)
    50c4:	       move.l d0,108(sp)
    50c8:	       move.l 108(sp),d0
    50cc:	       addq.l #4,d0
    50ce:	       move.l d0,19384 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    50d4:	       move.l 196(sp),104(sp)
    50da:	       move.l 196(sp),-(sp)
    50de:	       jsr 718 <get4bytes>
    50e4:	       addq.l #4,sp
    50e6:	       move.l d0,100(sp)
    50ea:	       clr.l 96(sp)
    50ee:	       move.l 19394 <DOSBase>,d0
    50f4:	       movea.l d0,a6
    50f6:	       move.l 104(sp),d1
    50fa:	       move.l 100(sp),d2
    50fe:	       move.l 96(sp),d3
    5102:	       jsr -66(a6)
    5106:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    510a:	       move.l 196(sp),88(sp)
    5110:	       clr.l 84(sp)
    5114:	       clr.l 80(sp)
    5118:	       move.l 19394 <DOSBase>,d0
    511e:	       movea.l d0,a6
    5120:	       move.l 88(sp),d1
    5124:	       move.l 84(sp),d2
    5128:	       move.l 80(sp),d3
    512c:	       jsr -66(a6)
    5130:	       move.l d0,76(sp)
    5134:	       move.l 76(sp),d0
    5138:	       addq.l #4,d0
    513a:	       move.l d0,19388 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    5140:	       move.l 196(sp),72(sp)
    5146:	       move.l 196(sp),-(sp)
    514a:	       jsr 718 <get4bytes>
    5150:	       addq.l #4,sp
    5152:	       move.l d0,68(sp)
    5156:	       clr.l 64(sp)
    515a:	       move.l 19394 <DOSBase>,d0
    5160:	       movea.l d0,a6
    5162:	       move.l 72(sp),d1
    5166:	       move.l 68(sp),d2
    516a:	       move.l 64(sp),d3
    516e:	       jsr -66(a6)
    5172:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    5176:	       move.l 196(sp),56(sp)
    517c:	       clr.l 52(sp)
    5180:	       clr.l 48(sp)
    5184:	       move.l 19394 <DOSBase>,d0
    518a:	       movea.l d0,a6
    518c:	       move.l 56(sp),d1
    5190:	       move.l 52(sp),d2
    5194:	       move.l 48(sp),d3
    5198:	       jsr -66(a6)
    519c:	       move.l d0,44(sp)
    51a0:	       move.l 44(sp),d0
    51a4:	       move.l d0,1937c <startOfDataIndex>
    51aa:	       nop
    51ac:	       movem.l (sp)+,d2-d3/a6
    51b0:	       lea 180(sp),sp
    51b4:	       rts

000051b6 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    51b6:	    lea -20(sp),sp
    51ba:	    move.l a6,-(sp)
    51bc:	    move.l d7,-(sp)
	APTR vbr = 0;
    51be:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    51c2:	    move.w #20090,10(sp)
    51c8:	    move.w #2049,12(sp)
    51ce:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    51d4:	    movea.l 1938c <SysBase>,a0
    51da:	    move.w 296(a0),d0
    51de:	    move.w d0,d0
    51e0:	    andi.l #65535,d0
    51e6:	    moveq #1,d1
    51e8:	    and.l d1,d0
    51ea:	/-- beq.s 5218 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    51ec:	|   lea 28(sp),a0
    51f0:	|   lea -18(a0),a0
    51f4:	|   move.l a0,20(sp)
    51f8:	|   move.l 1938c <SysBase>,d0
    51fe:	|   movea.l d0,a6
    5200:	|   move.l 20(sp),d7
    5204:	|   exg d7,a5
    5206:	|   jsr -30(a6)
    520a:	|   exg d7,a5
    520c:	|   move.l d0,16(sp)
    5210:	|   move.l 16(sp),d0
    5214:	|   move.l d0,24(sp)

	return vbr;
    5218:	\-> move.l 24(sp),d0
}
    521c:	    move.l (sp)+,d7
    521e:	    movea.l (sp)+,a6
    5220:	    lea 20(sp),sp
    5224:	    rts

00005226 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    5226:	movea.l 193b2 <VBR>,a0
    522c:	lea 108(a0),a0
    5230:	move.l 4(sp),(a0)
}
    5234:	nop
    5236:	rts

00005238 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    5238:	movea.l 193b2 <VBR>,a0
    523e:	move.l 108(a0),d0
}
    5242:	rts

00005244 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    5244:	       subq.l #8,sp
    5246:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    5248:	       pea 157f3 <custom.c.49191367+0xac7>
    524e:	       jsr 141e2 <KPrintF>
    5254:	       addq.l #4,sp
	Forbid();
    5256:	       move.l 1938c <SysBase>,d0
    525c:	       movea.l d0,a6
    525e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    5262:	       pea 1580b <custom.c.49191367+0xadf>
    5268:	       jsr 141e2 <KPrintF>
    526e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    5270:	       movea.l 19390 <custom>,a0
    5276:	       move.w 16(a0),d0
    527a:	       move.w d0,193b0 <SystemADKCON>
	SystemInts=custom->intenar;
    5280:	       movea.l 19390 <custom>,a0
    5286:	       move.w 28(a0),d0
    528a:	       move.w d0,193ac <SystemInts>
	SystemDMA=custom->dmaconr;
    5290:	       movea.l 19390 <custom>,a0
    5296:	       move.w 2(a0),d0
    529a:	       move.w d0,193ae <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    52a0:	       movea.l 19398 <GfxBase>,a0
    52a6:	       move.l 34(a0),d0
    52aa:	       move.l d0,193ba <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    52b0:	       pea 15829 <custom.c.49191367+0xafd>
    52b6:	       jsr 141e2 <KPrintF>
    52bc:	       addq.l #4,sp
	LoadView(0);
    52be:	       clr.l 4(sp)
    52c2:	       move.l 19398 <GfxBase>,d0
    52c8:	       movea.l d0,a6
    52ca:	       movea.l 4(sp),a1
    52ce:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    52d2:	       pea 1583f <custom.c.49191367+0xb13>
    52d8:	       jsr 141e2 <KPrintF>
    52de:	       addq.l #4,sp
	WaitTOF();
    52e0:	       move.l 19398 <GfxBase>,d0
    52e6:	       movea.l d0,a6
    52e8:	       jsr -270(a6)
	WaitTOF();
    52ec:	       move.l 19398 <GfxBase>,d0
    52f2:	       movea.l d0,a6
    52f4:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    52f8:	       pea 15854 <custom.c.49191367+0xb28>
    52fe:	       jsr 141e2 <KPrintF>
    5304:	       addq.l #4,sp
	WaitVbl();
    5306:	       jsr 14116 <WaitVbl>
	WaitVbl();
    530c:	       jsr 14116 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    5312:	       pea 15869 <custom.c.49191367+0xb3d>
    5318:	       jsr 141e2 <KPrintF>
    531e:	       addq.l #4,sp
	OwnBlitter();
    5320:	       move.l 19398 <GfxBase>,d0
    5326:	       movea.l d0,a6
    5328:	       jsr -456(a6)
	WaitBlit();	
    532c:	       move.l 19398 <GfxBase>,d0
    5332:	       movea.l d0,a6
    5334:	       jsr -228(a6)
	Disable();
    5338:	       move.l 1938c <SysBase>,d0
    533e:	       movea.l d0,a6
    5340:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    5344:	       pea 1588a <custom.c.49191367+0xb5e>
    534a:	       jsr 141e2 <KPrintF>
    5350:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    5352:	       movea.l 19390 <custom>,a0
    5358:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    535e:	       pea 158a1 <custom.c.49191367+0xb75>
    5364:	       jsr 141e2 <KPrintF>
    536a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    536c:	       clr.l 8(sp)
    5370:	   /-- bra.s 538e <TakeSystem+0x14a>
		custom->color[a]=0;
    5372:	/--|-> movea.l 19390 <custom>,a0
    5378:	|  |   move.l 8(sp),d0
    537c:	|  |   addi.l #192,d0
    5382:	|  |   add.l d0,d0
    5384:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    538a:	|  |   addq.l #1,8(sp)
    538e:	|  \-> moveq #31,d0
    5390:	|      cmp.l 8(sp),d0
    5394:	\----- bge.s 5372 <TakeSystem+0x12e>

	WaitVbl();
    5396:	       jsr 14116 <WaitVbl>
	WaitVbl();
    539c:	       jsr 14116 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    53a2:	       pea 158c6 <custom.c.49191367+0xb9a>
    53a8:	       jsr 141e2 <KPrintF>
    53ae:	       addq.l #4,sp
	VBR=GetVBR();
    53b0:	       jsr 51b6 <GetVBR>
    53b6:	       move.l d0,193b2 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    53bc:	       jsr 5238 <GetInterruptHandler>
    53c2:	       move.l d0,193b6 <SystemIrq>
}
    53c8:	       nop
    53ca:	       movea.l (sp)+,a6
    53cc:	       addq.l #8,sp
    53ce:	       rts

000053d0 <FreeSystem>:

void FreeSystem() { 
    53d0:	subq.l #4,sp
    53d2:	move.l a6,-(sp)
	WaitVbl();
    53d4:	jsr 14116 <WaitVbl>
	WaitBlit();
    53da:	move.l 19398 <GfxBase>,d0
    53e0:	movea.l d0,a6
    53e2:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    53e6:	movea.l 19390 <custom>,a0
    53ec:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    53f2:	movea.l 19390 <custom>,a0
    53f8:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    53fe:	movea.l 19390 <custom>,a0
    5404:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    540a:	move.l 193b6 <SystemIrq>,d0
    5410:	move.l d0,-(sp)
    5412:	jsr 5226 <SetInterruptHandler>
    5418:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    541a:	movea.l 19398 <GfxBase>,a0
    5420:	move.l 38(a0),d0
    5424:	movea.l 19390 <custom>,a0
    542a:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    542e:	movea.l 19398 <GfxBase>,a0
    5434:	move.l 50(a0),d0
    5438:	movea.l 19390 <custom>,a0
    543e:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    5442:	movea.l 19390 <custom>,a0
    5448:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    544e:	move.w 193ae <SystemDMA>,d0
    5454:	movea.l 19390 <custom>,a0
    545a:	ori.w #-32768,d0
    545e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    5462:	move.w 193b0 <SystemADKCON>,d0
    5468:	movea.l 19390 <custom>,a0
    546e:	ori.w #-32768,d0
    5472:	move.w d0,158(a0)

	WaitBlit();	
    5476:	move.l 19398 <GfxBase>,d0
    547c:	movea.l d0,a6
    547e:	jsr -228(a6)
	DisownBlitter();
    5482:	move.l 19398 <GfxBase>,d0
    5488:	movea.l d0,a6
    548a:	jsr -462(a6)
	Enable();
    548e:	move.l 1938c <SysBase>,d0
    5494:	movea.l d0,a6
    5496:	jsr -126(a6)

	LoadView(ActiView);
    549a:	move.l 193ba <ActiView>,4(sp)
    54a2:	move.l 19398 <GfxBase>,d0
    54a8:	movea.l d0,a6
    54aa:	movea.l 4(sp),a1
    54ae:	jsr -222(a6)
	WaitTOF();
    54b2:	move.l 19398 <GfxBase>,d0
    54b8:	movea.l d0,a6
    54ba:	jsr -270(a6)
	WaitTOF();
    54be:	move.l 19398 <GfxBase>,d0
    54c4:	movea.l d0,a6
    54c6:	jsr -270(a6)

	Permit();
    54ca:	move.l 1938c <SysBase>,d0
    54d0:	movea.l d0,a6
    54d2:	jsr -138(a6)
}
    54d6:	nop
    54d8:	movea.l (sp)+,a6
    54da:	addq.l #4,sp
    54dc:	rts

000054de <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    54de:	    lea -128(sp),sp
    54e2:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    54e6:	    movea.w #4,a0
    54ea:	    move.l (a0),d0
    54ec:	    move.l d0,1938c <SysBase>
	custom = (struct Custom*)0xdff000;	
    54f2:	    move.l #14675968,19390 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    54fc:	    move.l #88298,136(sp)
    5504:	    clr.l 132(sp)
    5508:	    move.l 1938c <SysBase>,d0
    550e:	    movea.l d0,a6
    5510:	    movea.l 136(sp),a1
    5514:	    move.l 132(sp),d0
    5518:	    jsr -552(a6)
    551c:	    move.l d0,128(sp)
    5520:	    move.l 128(sp),d0
    5524:	    move.l d0,19398 <GfxBase>
	if (!GfxBase)
    552a:	    move.l 19398 <GfxBase>,d0
    5530:	/-- bne.s 5546 <main+0x68>
		Exit(0);
    5532:	|   clr.l 124(sp)
    5536:	|   move.l 19394 <DOSBase>,d0
    553c:	|   movea.l d0,a6
    553e:	|   move.l 124(sp),d1
    5542:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5546:	\-> move.l #88315,120(sp)
    554e:	    clr.l 116(sp)
    5552:	    move.l 1938c <SysBase>,d0
    5558:	    movea.l d0,a6
    555a:	    movea.l 120(sp),a1
    555e:	    move.l 116(sp),d0
    5562:	    jsr -552(a6)
    5566:	    move.l d0,112(sp)
    556a:	    move.l 112(sp),d0
    556e:	    move.l d0,19394 <DOSBase>
	if (!DOSBase)
    5574:	    move.l 19394 <DOSBase>,d0
    557a:	/-- bne.s 5590 <main+0xb2>
		Exit(0);
    557c:	|   clr.l 108(sp)
    5580:	|   move.l 19394 <DOSBase>,d0
    5586:	|   movea.l d0,a6
    5588:	|   move.l 108(sp),d1
    558c:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    5590:	\-> move.l #88327,104(sp)
    5598:	    clr.l 100(sp)
    559c:	    move.l 1938c <SysBase>,d0
    55a2:	    movea.l d0,a6
    55a4:	    movea.l 104(sp),a1
    55a8:	    move.l 100(sp),d0
    55ac:	    jsr -552(a6)
    55b0:	    move.l d0,96(sp)
    55b4:	    move.l 96(sp),d0
    55b8:	    move.l d0,1939c <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    55be:	    move.l 1939c <MathIeeeSingBasBase>,d0
    55c4:	/-- bne.s 55da <main+0xfc>
		Exit(0);	
    55c6:	|   clr.l 92(sp)
    55ca:	|   move.l 19394 <DOSBase>,d0
    55d0:	|   movea.l d0,a6
    55d2:	|   move.l 92(sp),d1
    55d6:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    55da:	\-> move.l #88351,88(sp)
    55e2:	    clr.l 84(sp)
    55e6:	    move.l 1938c <SysBase>,d0
    55ec:	    movea.l d0,a6
    55ee:	    movea.l 88(sp),a1
    55f2:	    move.l 84(sp),d0
    55f6:	    jsr -552(a6)
    55fa:	    move.l d0,80(sp)
    55fe:	    move.l 80(sp),d0
    5602:	    move.l d0,193a0 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    5608:	    move.l 193a0 <MathIeeeSingTransBase>,d0
    560e:	/-- bne.s 5624 <main+0x146>
		Exit(0);
    5610:	|   clr.l 76(sp)
    5614:	|   move.l 19394 <DOSBase>,d0
    561a:	|   movea.l d0,a6
    561c:	|   move.l 76(sp),d1
    5620:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    5624:	\-> move.l #88377,72(sp)
    562c:	    clr.l 68(sp)
    5630:	    move.l 1938c <SysBase>,d0
    5636:	    movea.l d0,a6
    5638:	    movea.l 72(sp),a1
    563c:	    move.l 68(sp),d0
    5640:	    jsr -552(a6)
    5644:	    move.l d0,64(sp)
    5648:	    move.l 64(sp),d0
    564c:	    move.l d0,193a8 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    5652:	    move.l 193a8 <MathIeeeDoubTransBase>,d0
    5658:	/-- bne.s 566e <main+0x190>
		Exit(0);
    565a:	|   clr.l 60(sp)
    565e:	|   move.l 19394 <DOSBase>,d0
    5664:	|   movea.l d0,a6
    5666:	|   move.l 60(sp),d1
    566a:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    566e:	\-> move.l #88403,56(sp)
    5676:	    clr.l 52(sp)
    567a:	    move.l 1938c <SysBase>,d0
    5680:	    movea.l d0,a6
    5682:	    movea.l 56(sp),a1
    5686:	    move.l 52(sp),d0
    568a:	    jsr -552(a6)
    568e:	    move.l d0,48(sp)
    5692:	    move.l 48(sp),d0
    5696:	    move.l d0,193a4 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    569c:	    move.l 193a4 <MathIeeeDoubBasBase>,d0
    56a2:	/-- bne.s 56b8 <main+0x1da>
		Exit(0);
    56a4:	|   clr.l 44(sp)
    56a8:	|   move.l 19394 <DOSBase>,d0
    56ae:	|   movea.l d0,a6
    56b0:	|   move.l 44(sp),d1
    56b4:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    56b8:	\-> pea 1596b <custom.c.49191367+0xc3f>
    56be:	    jsr 141e2 <KPrintF>
    56c4:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    56c6:	    move.l 19394 <DOSBase>,d0
    56cc:	    movea.l d0,a6
    56ce:	    jsr -60(a6)
    56d2:	    move.l d0,40(sp)
    56d6:	    move.l 40(sp),d0
    56da:	    move.l d0,36(sp)
    56de:	    move.l #88455,32(sp)
    56e6:	    moveq #15,d0
    56e8:	    move.l d0,28(sp)
    56ec:	    move.l 19394 <DOSBase>,d0
    56f2:	    movea.l d0,a6
    56f4:	    move.l 36(sp),d1
    56f8:	    move.l 32(sp),d2
    56fc:	    move.l 28(sp),d3
    5700:	    jsr -48(a6)
    5704:	    move.l d0,24(sp)
	Delay(50);
    5708:	    moveq #50,d0
    570a:	    move.l d0,20(sp)
    570e:	    move.l 19394 <DOSBase>,d0
    5714:	    movea.l d0,a6
    5716:	    move.l 20(sp),d1
    571a:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    571e:	    pea 15997 <custom.c.49191367+0xc6b>
    5724:	    jsr 141e2 <KPrintF>
    572a:	    addq.l #4,sp
	TakeSystem();
    572c:	    jsr 5244 <TakeSystem>
	KPrintF("System Taken\n");
    5732:	    pea 159a6 <custom.c.49191367+0xc7a>
    5738:	    jsr 141e2 <KPrintF>
    573e:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    5740:	    movea.l 19390 <custom>,a0
    5746:	    move.w #-30721,150(a0)
	WaitVbl();
    574c:	    jsr 14116 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    5752:	    pea 159b4 <custom.c.49191367+0xc88>
    5758:	    jsr 141e2 <KPrintF>
    575e:	    addq.l #4,sp
	main_sludge(argc, argv);	
    5760:	    move.l 148(sp),-(sp)
    5764:	    move.l 148(sp),-(sp)
    5768:	    jsr 234c <main_sludge>
    576e:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    5770:	    jsr 53d0 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5776:	    move.l 19394 <DOSBase>,16(sp)
    577e:	    move.l 1938c <SysBase>,d0
    5784:	    movea.l d0,a6
    5786:	    movea.l 16(sp),a1
    578a:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    578e:	    move.l 19398 <GfxBase>,12(sp)
    5796:	    move.l 1938c <SysBase>,d0
    579c:	    movea.l d0,a6
    579e:	    movea.l 12(sp),a1
    57a2:	    jsr -414(a6)
    57a6:	    moveq #0,d0
}
    57a8:	    movem.l (sp)+,d2-d3/a6
    57ac:	    lea 128(sp),sp
    57b0:	    rts

000057b2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    57b2:	    lea -16(sp),sp
    57b6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    57b8:	    moveq #8,d0
    57ba:	    move.l d0,16(sp)
    57be:	    clr.l 12(sp)
    57c2:	    move.l 1938c <SysBase>,d0
    57c8:	    movea.l d0,a6
    57ca:	    move.l 16(sp),d0
    57ce:	    move.l 12(sp),d1
    57d2:	    jsr -684(a6)
    57d6:	    move.l d0,8(sp)
    57da:	    move.l 8(sp),d0
    57de:	    move.l d0,4(sp)
	if (!newStat) {
    57e2:	/-- bne.s 5812 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    57e4:	|   movea.l 18d2c <nowStatus>,a0
    57ea:	|   move.l (a0),d0
    57ec:	|   movea.l 4(sp),a0
    57f0:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    57f4:	|   pea 15417 <custom.c.49191367+0x6eb>
    57fa:	|   jsr b8 <copyString>
    5800:	|   addq.l #4,sp
    5802:	|   movea.l 4(sp),a0
    5806:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    5808:	|   movea.l 18d2c <nowStatus>,a0
    580e:	|   move.l 4(sp),(a0)
	}
}
    5812:	\-> nop
    5814:	    movea.l (sp)+,a6
    5816:	    lea 16(sp),sp
    581a:	    rts

0000581c <clearStatusBar>:

void clearStatusBar () {
    581c:	       lea -16(sp),sp
    5820:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    5822:	       movea.l 18d2c <nowStatus>,a0
    5828:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    582c:	       movea.l 18d2c <nowStatus>,a0
    5832:	       moveq #-1,d0
    5834:	       move.l d0,6(a0)
	while (stat) {
    5838:	   /-- bra.s 5878 <clearStatusBar+0x5c>
		kill = stat;
    583a:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    5840:	|  |   movea.l 16(sp),a0
    5844:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    584a:	|  |   movea.l 12(sp),a0
    584e:	|  |   move.l (a0),8(sp)
    5852:	|  |   move.l 1938c <SysBase>,d0
    5858:	|  |   movea.l d0,a6
    585a:	|  |   movea.l 8(sp),a1
    585e:	|  |   jsr -690(a6)
		FreeVec(kill);
    5862:	|  |   move.l 12(sp),4(sp)
    5868:	|  |   move.l 1938c <SysBase>,d0
    586e:	|  |   movea.l d0,a6
    5870:	|  |   movea.l 4(sp),a1
    5874:	|  |   jsr -690(a6)
	while (stat) {
    5878:	|  \-> tst.l 16(sp)
    587c:	\----- bne.s 583a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    587e:	       movea.l 18d2c <nowStatus>,a0
    5884:	       clr.l (a0)
}
    5886:	       nop
    5888:	       movea.l (sp)+,a6
    588a:	       lea 16(sp),sp
    588e:	       rts

00005890 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    5890:	clr.l 193be <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5896:	move.w #-1,193c2 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    589e:	moveq #-1,d0
    58a0:	move.l d0,193c4 <mainStatus+0x6>
	mainStatus.statusX = 10;
    58a6:	moveq #10,d0
    58a8:	move.l d0,193c8 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    58ae:	movea.l 192e4 <winHeight>,a0
    58b4:	lea -15(a0),a0
    58b8:	move.l a0,d0
    58ba:	move.l d0,193cc <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    58c0:	nop
    58c2:	rts

000058c4 <killLastStatus>:

void killLastStatus () {
    58c4:	    lea -12(sp),sp
    58c8:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    58ca:	    movea.l 18d2c <nowStatus>,a0
    58d0:	    move.l (a0),d0
    58d2:	/-- beq.s 591c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    58d4:	|   movea.l 18d2c <nowStatus>,a0
    58da:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    58de:	|   movea.l 18d2c <nowStatus>,a0
    58e4:	|   movea.l 12(sp),a1
    58e8:	|   move.l 4(a1),d0
    58ec:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    58ee:	|   movea.l 12(sp),a0
    58f2:	|   move.l (a0),8(sp)
    58f6:	|   move.l 1938c <SysBase>,d0
    58fc:	|   movea.l d0,a6
    58fe:	|   movea.l 8(sp),a1
    5902:	|   jsr -690(a6)
		FreeVec(kill);
    5906:	|   move.l 12(sp),4(sp)
    590c:	|   move.l 1938c <SysBase>,d0
    5912:	|   movea.l d0,a6
    5914:	|   movea.l 4(sp),a1
    5918:	|   jsr -690(a6)
	}
}
    591c:	\-> nop
    591e:	    movea.l (sp)+,a6
    5920:	    lea 12(sp),sp
    5924:	    rts

00005926 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    5926:	movea.l 18d2c <nowStatus>,a0
    592c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5932:	movea.l 18d2c <nowStatus>,a0
    5938:	move.l 8(sp),14(a0)
}
    593e:	nop
    5940:	rts

00005942 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5942:	       lea -100(sp),sp
    5946:	       move.l a6,-(sp)
    5948:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    594a:	       movea.l 18d2c <nowStatus>,a0
    5950:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5954:	       movea.l 18d2c <nowStatus>,a0
    595a:	       move.w 4(a0),d0
    595e:	       move.w d0,d0
    5960:	       andi.l #65535,d0
    5966:	       move.l 112(sp),-(sp)
    596a:	       move.l d0,-(sp)
    596c:	       jsr 8d0 <put2bytes>
    5972:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5974:	       movea.l 18d2c <nowStatus>,a0
    597a:	       move.l 6(a0),d0
    597e:	       move.l d0,d0
    5980:	       movea.w d0,a0
    5982:	       move.l 112(sp),-(sp)
    5986:	       move.l a0,-(sp)
    5988:	       jsr a9c <putSigned>
    598e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    5990:	       movea.l 18d2c <nowStatus>,a0
    5996:	       move.l 10(a0),d0
    599a:	       move.l 112(sp),-(sp)
    599e:	       move.l d0,-(sp)
    59a0:	       jsr 8d0 <put2bytes>
    59a6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    59a8:	       movea.l 18d2c <nowStatus>,a0
    59ae:	       move.l 14(a0),d0
    59b2:	       move.l 112(sp),-(sp)
    59b6:	       move.l d0,-(sp)
    59b8:	       jsr 8d0 <put2bytes>
    59be:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    59c0:	       move.l 112(sp),100(sp)
    59c6:	       movea.l 18d2c <nowStatus>,a0
    59cc:	       move.l 18(a0),96(sp)
    59d2:	       move.l 19394 <DOSBase>,d0
    59d8:	       movea.l d0,a6
    59da:	       move.l 100(sp),d1
    59de:	       move.l 96(sp),d2
    59e2:	       jsr -312(a6)
    59e6:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    59ea:	       move.l 112(sp),88(sp)
    59f0:	       movea.l 18d2c <nowStatus>,a0
    59f6:	       move.l 22(a0),84(sp)
    59fc:	       move.l 19394 <DOSBase>,d0
    5a02:	       movea.l d0,a6
    5a04:	       move.l 88(sp),d1
    5a08:	       move.l 84(sp),d2
    5a0c:	       jsr -312(a6)
    5a10:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    5a14:	       move.l 112(sp),76(sp)
    5a1a:	       movea.l 18d2c <nowStatus>,a0
    5a20:	       move.l 26(a0),72(sp)
    5a26:	       move.l 19394 <DOSBase>,d0
    5a2c:	       movea.l d0,a6
    5a2e:	       move.l 76(sp),d1
    5a32:	       move.l 72(sp),d2
    5a36:	       jsr -312(a6)
    5a3a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    5a3e:	       move.l 112(sp),64(sp)
    5a44:	       movea.l 18d2c <nowStatus>,a0
    5a4a:	       move.l 30(a0),60(sp)
    5a50:	       move.l 19394 <DOSBase>,d0
    5a56:	       movea.l d0,a6
    5a58:	       move.l 64(sp),d1
    5a5c:	       move.l 60(sp),d2
    5a60:	       jsr -312(a6)
    5a64:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5a68:	       move.l 112(sp),52(sp)
    5a6e:	       movea.l 18d2c <nowStatus>,a0
    5a74:	       move.l 34(a0),48(sp)
    5a7a:	       move.l 19394 <DOSBase>,d0
    5a80:	       movea.l d0,a6
    5a82:	       move.l 52(sp),d1
    5a86:	       move.l 48(sp),d2
    5a8a:	       jsr -312(a6)
    5a8e:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5a92:	       move.l 112(sp),40(sp)
    5a98:	       movea.l 18d2c <nowStatus>,a0
    5a9e:	       move.l 38(a0),36(sp)
    5aa4:	       move.l 19394 <DOSBase>,d0
    5aaa:	       movea.l d0,a6
    5aac:	       move.l 40(sp),d1
    5ab0:	       move.l 36(sp),d2
    5ab4:	       jsr -312(a6)
    5ab8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    5abc:	   /-- bra.s 5b00 <saveStatusBars+0x1be>
		FPutC (fp,1);
    5abe:	/--|-> move.l 112(sp),16(sp)
    5ac4:	|  |   moveq #1,d0
    5ac6:	|  |   move.l d0,12(sp)
    5aca:	|  |   move.l 19394 <DOSBase>,d0
    5ad0:	|  |   movea.l d0,a6
    5ad2:	|  |   move.l 16(sp),d1
    5ad6:	|  |   move.l 12(sp),d2
    5ada:	|  |   jsr -312(a6)
    5ade:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    5ae2:	|  |   movea.l 104(sp),a0
    5ae6:	|  |   move.l (a0),d0
    5ae8:	|  |   move.l 112(sp),-(sp)
    5aec:	|  |   move.l d0,-(sp)
    5aee:	|  |   jsr bd8 <writeString>
    5af4:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5af6:	|  |   movea.l 104(sp),a0
    5afa:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    5b00:	|  \-> tst.l 104(sp)
    5b04:	\----- bne.s 5abe <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5b06:	       move.l 112(sp),28(sp)
    5b0c:	       clr.l 24(sp)
    5b10:	       move.l 19394 <DOSBase>,d0
    5b16:	       movea.l d0,a6
    5b18:	       move.l 28(sp),d1
    5b1c:	       move.l 24(sp),d2
    5b20:	       jsr -312(a6)
    5b24:	       move.l d0,20(sp)
}
    5b28:	       nop
    5b2a:	       move.l (sp)+,d2
    5b2c:	       movea.l (sp)+,a6
    5b2e:	       lea 100(sp),sp
    5b32:	       rts

00005b34 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5b34:	movea.l 18d2c <nowStatus>,a0
    5b3a:	move.l 4(sp),6(a0)
}
    5b40:	nop
    5b42:	rts

00005b44 <setStatusBar>:

void setStatusBar (char * txt) {
    5b44:	    subq.l #4,sp
    5b46:	    move.l a6,-(sp)
    5b48:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5b4a:	    movea.l 18d2c <nowStatus>,a0
    5b50:	    move.l (a0),d0
    5b52:	/-- beq.s 5b86 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5b54:	|   movea.l 18d2c <nowStatus>,a0
    5b5a:	|   movea.l (a0),a0
    5b5c:	|   move.l (a0),8(sp)
    5b60:	|   move.l 1938c <SysBase>,d0
    5b66:	|   movea.l d0,a6
    5b68:	|   movea.l 8(sp),a1
    5b6c:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    5b70:	|   movea.l 18d2c <nowStatus>,a0
    5b76:	|   movea.l (a0),a2
    5b78:	|   move.l 16(sp),-(sp)
    5b7c:	|   jsr b8 <copyString>
    5b82:	|   addq.l #4,sp
    5b84:	|   move.l d0,(a2)
	}
}
    5b86:	\-> nop
    5b88:	    movea.l (sp)+,a2
    5b8a:	    movea.l (sp)+,a6
    5b8c:	    addq.l #4,sp
    5b8e:	    rts

00005b90 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    5b90:	       movea.l 18d2c <nowStatus>,a0
    5b96:	       move.l (a0),d0
    5b98:	/----- beq.s 5ba6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    5b9a:	|      movea.l 18d2c <nowStatus>,a0
    5ba0:	|      movea.l (a0),a0
    5ba2:	|      move.l (a0),d0
    5ba4:	|  /-- bra.s 5bac <statusBarText+0x1c>
	} else {
		return "";
    5ba6:	\--|-> move.l #87063,d0
	}
    5bac:	   \-> rts

00005bae <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    5bae:	       lea -28(sp),sp
    5bb2:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5bb6:	       move.l 52(sp),-(sp)
    5bba:	       jsr 12b78 <stringWidth>
    5bc0:	       addq.l #4,sp
    5bc2:	       asr.l #1,d0
    5bc4:	       move.l d0,-(sp)
    5bc6:	       jsr 1449a <__floatsisf>
    5bcc:	       addq.l #4,sp
    5bce:	       move.l d0,d1
    5bd0:	       move.l 18d44 <cameraZoom>,d0
    5bd6:	       move.l d0,-(sp)
    5bd8:	       move.l d1,-(sp)
    5bda:	       jsr 14346 <__divsf3>
    5be0:	       addq.l #8,sp
    5be2:	       move.l d0,-(sp)
    5be4:	       jsr 14432 <__fixsfsi>
    5bea:	       addq.l #4,sp
    5bec:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    5bf0:	       move.l 56(sp),d0
    5bf4:	       sub.l 44(sp),d0
    5bf8:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    5bfc:	       move.l 56(sp),d0
    5c00:	       add.l 44(sp),d0
    5c04:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    5c08:	       moveq #12,d0
    5c0a:	       move.l d0,32(sp)
    5c0e:	       clr.l 28(sp)
    5c12:	       move.l 1938c <SysBase>,d0
    5c18:	       movea.l d0,a6
    5c1a:	       move.l 32(sp),d0
    5c1e:	       move.l 28(sp),d1
    5c22:	       jsr -684(a6)
    5c26:	       move.l d0,24(sp)
    5c2a:	       move.l 24(sp),d0
    5c2e:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5c32:	       movea.l 193e8 <speech>,a0
    5c38:	       move.l 4(a0),d0
    5c3c:	       movea.l 20(sp),a0
    5c40:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5c44:	       move.l 52(sp),-(sp)
    5c48:	       jsr b8 <copyString>
    5c4e:	       addq.l #4,sp
    5c50:	       movea.l 20(sp),a0
    5c54:	       move.l d0,(a0)
	newLine -> x = xx1;
    5c56:	       movea.l 20(sp),a0
    5c5a:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    5c60:	       movea.l 193e8 <speech>,a0
    5c66:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    5c6c:	       moveq #4,d0
    5c6e:	       cmp.l 40(sp),d0
    5c72:	   /-- blt.s 5c94 <addSpeechLine+0xe6>
    5c74:	   |   movea.l 60(sp),a0
    5c78:	   |   move.l (a0),d1
    5c7a:	   |   moveq #5,d0
    5c7c:	   |   sub.l 40(sp),d0
    5c80:	   |   cmp.l d1,d0
    5c82:	   +-- ble.s 5c94 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5c84:	   |   moveq #5,d0
    5c86:	   |   sub.l 40(sp),d0
    5c8a:	   |   movea.l 60(sp),a0
    5c8e:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    5c90:	/--|-- bra.w 5dc0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5c94:	|  \-> move.l 36(sp),-(sp)
    5c98:	|      jsr 1449a <__floatsisf>
    5c9e:	|      addq.l #4,sp
    5ca0:	|      move.l d0,d2
    5ca2:	|      move.l 192e0 <winWidth>,d0
    5ca8:	|      move.l d0,-(sp)
    5caa:	|      jsr 144c2 <__floatunsisf>
    5cb0:	|      addq.l #4,sp
    5cb2:	|      move.l d0,d1
    5cb4:	|      move.l 18d44 <cameraZoom>,d0
    5cba:	|      move.l d0,-(sp)
    5cbc:	|      move.l d1,-(sp)
    5cbe:	|      jsr 14346 <__divsf3>
    5cc4:	|      addq.l #8,sp
    5cc6:	|      move.l #1084227584,-(sp)
    5ccc:	|      move.l d0,-(sp)
    5cce:	|      jsr 1478e <__subsf3>
    5cd4:	|      addq.l #8,sp
    5cd6:	|      move.l d0,-(sp)
    5cd8:	|      move.l d2,-(sp)
    5cda:	|      jsr 14582 <__gesf2>
    5ce0:	|      addq.l #8,sp
    5ce2:	|      tst.l d0
    5ce4:	|  /-- bge.s 5cea <addSpeechLine+0x13c>
}
    5ce6:	+--|-- bra.w 5dc0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5cea:	|  \-> movea.l 60(sp),a0
    5cee:	|      move.l (a0),d0
    5cf0:	|      move.l d0,-(sp)
    5cf2:	|      jsr 1449a <__floatsisf>
    5cf8:	|      addq.l #4,sp
    5cfa:	|      move.l d0,-(sp)
    5cfc:	|      jsr 143b2 <__extendsfdf2>
    5d02:	|      addq.l #4,sp
    5d04:	|      move.l d0,d4
    5d06:	|      move.l d1,d5
    5d08:	|      move.l 192e0 <winWidth>,d0
    5d0e:	|      move.l d0,-(sp)
    5d10:	|      jsr 144c2 <__floatunsisf>
    5d16:	|      addq.l #4,sp
    5d18:	|      move.l d0,d1
    5d1a:	|      move.l 18d44 <cameraZoom>,d0
    5d20:	|      move.l d0,-(sp)
    5d22:	|      move.l d1,-(sp)
    5d24:	|      jsr 14346 <__divsf3>
    5d2a:	|      addq.l #8,sp
    5d2c:	|      move.l d0,-(sp)
    5d2e:	|      jsr 143b2 <__extendsfdf2>
    5d34:	|      addq.l #4,sp
    5d36:	|      clr.l -(sp)
    5d38:	|      move.l #1075052544,-(sp)
    5d3e:	|      move.l d1,-(sp)
    5d40:	|      move.l d0,-(sp)
    5d42:	|      jsr 1472c <__subdf3>
    5d48:	|      lea 16(sp),sp
    5d4c:	|      move.l d0,d2
    5d4e:	|      move.l d1,d3
    5d50:	|      move.l 36(sp),-(sp)
    5d54:	|      jsr 1445a <__floatsidf>
    5d5a:	|      addq.l #4,sp
    5d5c:	|      move.l d1,-(sp)
    5d5e:	|      move.l d0,-(sp)
    5d60:	|      move.l d3,-(sp)
    5d62:	|      move.l d2,-(sp)
    5d64:	|      jsr 1472c <__subdf3>
    5d6a:	|      lea 16(sp),sp
    5d6e:	|      move.l d1,-(sp)
    5d70:	|      move.l d0,-(sp)
    5d72:	|      move.l d5,-(sp)
    5d74:	|      move.l d4,-(sp)
    5d76:	|      jsr 145b8 <__gtdf2>
    5d7c:	|      lea 16(sp),sp
    5d80:	|      tst.l d0
    5d82:	|  /-- bgt.s 5d86 <addSpeechLine+0x1d8>
}
    5d84:	+--|-- bra.s 5dc0 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5d86:	|  \-> move.l 192e0 <winWidth>,d0
    5d8c:	|      move.l d0,-(sp)
    5d8e:	|      jsr 144c2 <__floatunsisf>
    5d94:	|      addq.l #4,sp
    5d96:	|      move.l d0,d1
    5d98:	|      move.l 18d44 <cameraZoom>,d0
    5d9e:	|      move.l d0,-(sp)
    5da0:	|      move.l d1,-(sp)
    5da2:	|      jsr 14346 <__divsf3>
    5da8:	|      addq.l #8,sp
    5daa:	|      move.l d0,-(sp)
    5dac:	|      jsr 14432 <__fixsfsi>
    5db2:	|      addq.l #4,sp
    5db4:	|      subq.l #5,d0
    5db6:	|      sub.l 36(sp),d0
    5dba:	|      movea.l 60(sp),a0
    5dbe:	|      move.l d0,(a0)
}
    5dc0:	\----> nop
    5dc2:	       movem.l (sp)+,d2-d5/a6
    5dc6:	       lea 28(sp),sp
    5dca:	       rts

00005dcc <initSpeech>:


void initSpeech () {
    5dcc:	       lea -12(sp),sp
    5dd0:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    5dd2:	       moveq #20,d0
    5dd4:	       move.l d0,12(sp)
    5dd8:	       clr.l 8(sp)
    5ddc:	       move.l 1938c <SysBase>,d0
    5de2:	       movea.l d0,a6
    5de4:	       move.l 12(sp),d0
    5de8:	       move.l 8(sp),d1
    5dec:	       jsr -684(a6)
    5df0:	       move.l d0,4(sp)
    5df4:	       move.l 4(sp),d0
    5df8:	       move.l d0,193e8 <speech>
	if (speech) {
    5dfe:	       move.l 193e8 <speech>,d0
    5e04:	/----- beq.s 5e30 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    5e06:	|      movea.l 193e8 <speech>,a0
    5e0c:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    5e0e:	|      movea.l 193e8 <speech>,a0
    5e14:	|      clr.l 4(a0)
		speech -> speechY = 0;
    5e18:	|      movea.l 193e8 <speech>,a0
    5e1e:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    5e22:	|      movea.l 193e8 <speech>,a0
    5e28:	|      moveq #-1,d0
    5e2a:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    5e2e:	|  /-- bra.s 5e3e <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    5e30:	\--|-> pea 159f1 <custom.c.49191367+0xcc5>
    5e36:	   |   jsr 141e2 <KPrintF>
    5e3c:	   |   addq.l #4,sp
}
    5e3e:	   \-> nop
    5e40:	       movea.l (sp)+,a6
    5e42:	       lea 12(sp),sp
    5e46:	       rts

00005e48 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5e48:	       movea.l 193e8 <speech>,a0
    5e4e:	       move.l 4(a0),d0
    5e52:	/----- beq.s 5e60 <isThereAnySpeechGoingOn+0x18>
    5e54:	|      movea.l 193e8 <speech>,a0
    5e5a:	|      move.l 16(a0),d0
    5e5e:	|  /-- bra.s 5e62 <isThereAnySpeechGoingOn+0x1a>
    5e60:	\--|-> moveq #-1,d0
}
    5e62:	   \-> rts

00005e64 <killAllSpeech>:

void killAllSpeech () {
    5e64:	       lea -12(sp),sp
    5e68:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5e6a:	       movea.l 193e8 <speech>,a0
    5e70:	       move.l 12(a0),d0
    5e74:	       moveq #-1,d1
    5e76:	       cmp.l d0,d1
    5e78:	   /-- beq.s 5e86 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5e7a:	   |   movea.l 193e8 <speech>,a0
    5e80:	   |   moveq #-1,d0
    5e82:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5e86:	   \-> movea.l 193e8 <speech>,a0
    5e8c:	       move.l (a0),d0
    5e8e:	/----- beq.w 5f1a <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5e92:	|      movea.l 193e8 <speech>,a0
    5e98:	|      move.l (a0),d0
    5e9a:	|      lea -120(sp),sp
    5e9e:	|      move.l sp,d1
    5ea0:	|      movea.l d0,a0
    5ea2:	|      moveq #120,d0
    5ea4:	|      move.l d0,-(sp)
    5ea6:	|      move.l a0,-(sp)
    5ea8:	|      move.l d1,-(sp)
    5eaa:	|      jsr 14196 <memcpy>
    5eb0:	|      lea 12(sp),sp
    5eb4:	|      jsr 879a <makeSilent>
    5eba:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5ebe:	|      movea.l 193e8 <speech>,a0
    5ec4:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5ec6:	+----- bra.s 5f1a <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5ec8:	|  /-> movea.l 193e8 <speech>,a0
    5ece:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5ed4:	|  |   movea.l 193e8 <speech>,a0
    5eda:	|  |   movea.l 4(a0),a1
    5ede:	|  |   movea.l 193e8 <speech>,a0
    5ee4:	|  |   move.l 4(a1),d0
    5ee8:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5eec:	|  |   movea.l 12(sp),a0
    5ef0:	|  |   move.l (a0),8(sp)
    5ef4:	|  |   move.l 1938c <SysBase>,d0
    5efa:	|  |   movea.l d0,a6
    5efc:	|  |   movea.l 8(sp),a1
    5f00:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5f04:	|  |   move.l 12(sp),4(sp)
    5f0a:	|  |   move.l 1938c <SysBase>,d0
    5f10:	|  |   movea.l d0,a6
    5f12:	|  |   movea.l 4(sp),a1
    5f16:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5f1a:	\--|-> movea.l 193e8 <speech>,a0
    5f20:	   |   move.l 4(a0),d0
    5f24:	   \-- bne.s 5ec8 <killAllSpeech+0x64>
	}
}
    5f26:	       nop
    5f28:	       nop
    5f2a:	       movea.l (sp)+,a6
    5f2c:	       lea 12(sp),sp
    5f30:	       rts

00005f32 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5f32:	pea 2 <_start+0x2>
    5f36:	move.l 8(sp),-(sp)
    5f3a:	jsr 6092 <setFrames>
    5f40:	addq.l #8,sp
}
    5f42:	nop
    5f44:	rts

00005f46 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5f46:	       lea -52(sp),sp
    5f4a:	       move.l a6,-(sp)
    5f4c:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5f4e:	       movea.l 64(sp),a0
    5f52:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5f58:	       move.l 18d30 <speechSpeed>,d0
    5f5e:	       move.l 68(sp),-(sp)
    5f62:	       move.l d0,-(sp)
    5f64:	       jsr a46 <putFloat>
    5f6a:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5f6c:	       movea.l 64(sp),a0
    5f70:	       move.l 8(a0),d0
    5f74:	       move.l 68(sp),-(sp)
    5f78:	       move.l d0,-(sp)
    5f7a:	       jsr 8d0 <put2bytes>
    5f80:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5f82:	       movea.l 64(sp),a0
    5f86:	       move.l 16(a0),d0
    5f8a:	       move.l 68(sp),-(sp)
    5f8e:	       move.l d0,-(sp)
    5f90:	       jsr 8d0 <put2bytes>
    5f96:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5f98:	       movea.l 64(sp),a0
    5f9c:	       move.l (a0),d0
    5f9e:	   /-- beq.s 5fe2 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5fa0:	   |   move.l 68(sp),40(sp)
    5fa6:	   |   moveq #1,d0
    5fa8:	   |   move.l d0,36(sp)
    5fac:	   |   move.l 19394 <DOSBase>,d0
    5fb2:	   |   movea.l d0,a6
    5fb4:	   |   move.l 40(sp),d1
    5fb8:	   |   move.l 36(sp),d2
    5fbc:	   |   jsr -312(a6)
    5fc0:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5fc4:	   |   movea.l 64(sp),a0
    5fc8:	   |   movea.l (a0),a0
    5fca:	   |   movea.l 102(a0),a0
    5fce:	   |   move.l 4(a0),d0
    5fd2:	   |   move.l 68(sp),-(sp)
    5fd6:	   |   move.l d0,-(sp)
    5fd8:	   |   jsr 8d0 <put2bytes>
    5fde:	   |   addq.l #8,sp
    5fe0:	/--|-- bra.s 605e <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5fe2:	|  \-> move.l 68(sp),52(sp)
    5fe8:	|      clr.l 48(sp)
    5fec:	|      move.l 19394 <DOSBase>,d0
    5ff2:	|      movea.l d0,a6
    5ff4:	|      move.l 52(sp),d1
    5ff8:	|      move.l 48(sp),d2
    5ffc:	|      jsr -312(a6)
    6000:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6004:	+----- bra.s 605e <saveSpeech+0x118>
			FPutC (fp, 1);
    6006:	|  /-> move.l 68(sp),16(sp)
    600c:	|  |   moveq #1,d0
    600e:	|  |   move.l d0,12(sp)
    6012:	|  |   move.l 19394 <DOSBase>,d0
    6018:	|  |   movea.l d0,a6
    601a:	|  |   move.l 16(sp),d1
    601e:	|  |   move.l 12(sp),d2
    6022:	|  |   jsr -312(a6)
    6026:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    602a:	|  |   movea.l 56(sp),a0
    602e:	|  |   move.l (a0),d0
    6030:	|  |   move.l 68(sp),-(sp)
    6034:	|  |   move.l d0,-(sp)
    6036:	|  |   jsr bd8 <writeString>
    603c:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    603e:	|  |   movea.l 56(sp),a0
    6042:	|  |   move.l 8(a0),d0
    6046:	|  |   move.l 68(sp),-(sp)
    604a:	|  |   move.l d0,-(sp)
    604c:	|  |   jsr 8d0 <put2bytes>
    6052:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    6054:	|  |   movea.l 56(sp),a0
    6058:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    605e:	\--|-> tst.l 56(sp)
    6062:	   \-- bne.s 6006 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    6064:	       move.l 68(sp),28(sp)
    606a:	       clr.l 24(sp)
    606e:	       move.l 19394 <DOSBase>,d0
    6074:	       movea.l d0,a6
    6076:	       move.l 28(sp),d1
    607a:	       move.l 24(sp),d2
    607e:	       jsr -312(a6)
    6082:	       move.l d0,20(sp)
}
    6086:	       nop
    6088:	       move.l (sp)+,d2
    608a:	       movea.l (sp)+,a6
    608c:	       lea 52(sp),sp
    6090:	       rts

00006092 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    6092:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    6094:	movea.l 8(sp),a0
    6098:	movea.l 68(a0),a0
    609c:	move.l (a0),d2
    609e:	movea.l 8(sp),a0
    60a2:	movea.l 68(a0),a0
    60a6:	move.l 4(a0),d0
    60aa:	move.l 12(sp),-(sp)
    60ae:	move.l d0,-(sp)
    60b0:	jsr 14a1c <__mulsi3>
    60b6:	addq.l #8,sp
    60b8:	move.l d0,d1
    60ba:	movea.l 8(sp),a0
    60be:	move.l 94(a0),d0
    60c2:	add.l d1,d0
    60c4:	add.l d0,d0
    60c6:	add.l d0,d0
    60c8:	movea.l d2,a0
    60ca:	adda.l d0,a0
    60cc:	move.l (a0),d0
    60ce:	movea.l 8(sp),a0
    60d2:	move.l d0,60(a0)
}
    60d6:	nop
    60d8:	move.l (sp)+,d2
    60da:	rts

000060dc <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    60dc:	       lea -20(sp),sp
    60e0:	       move.l d2,-(sp)
    60e2:	       move.l 40(sp),d0
    60e6:	       move.w d0,d0
    60e8:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    60ec:	       movea.l 193e8 <speech>,a0
    60f2:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    60f8:	       move.l 32(sp),-(sp)
    60fc:	       jsr 8284 <findPerson>
    6102:	       addq.l #4,sp
    6104:	       move.l d0,16(sp)
    if (thisPerson) {
    6108:	   /-- beq.s 612e <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    610a:	   |   movea.w 6(sp),a0
    610e:	   |   move.l a0,-(sp)
    6110:	   |   move.l 40(sp),-(sp)
    6114:	   |   move.l 24(sp),-(sp)
    6118:	   |   move.l 40(sp),-(sp)
    611c:	   |   jsr 61f4 <wrapSpeechPerson>
    6122:	   |   lea 16(sp),sp
    6126:	   |   move.l d0,20(sp)
    612a:	/--|-- bra.w 61e8 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    612e:	|  \-> move.l 32(sp),-(sp)
    6132:	|      jsr 12c64 <getRegionForObject>
    6138:	|      addq.l #4,sp
    613a:	|      move.l d0,12(sp)
        if (thisRegion) {
    613e:	|  /-- beq.s 61aa <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    6140:	|  |   movea.l 12(sp),a0
    6144:	|  |   movea.l 28(a0),a0
    6148:	|  |   move.l 28(a0),d0
    614c:	|  |   movea.l 12(sp),a0
    6150:	|  |   movea.l 4(a0),a1
    6154:	|  |   movea.l 12(sp),a0
    6158:	|  |   movea.l 28(a0),a0
    615c:	|  |   move.l 20(a0),d1
    6160:	|  |   movea.l a1,a0
    6162:	|  |   suba.l d1,a0
    6164:	|  |   move.l 1949e <cameraY>,d1
    616a:	|  |   movea.l a0,a1
    616c:	|  |   suba.l d1,a1
    616e:	|  |   movea.l 12(sp),a0
    6172:	|  |   move.l (a0),d2
    6174:	|  |   movea.l 12(sp),a0
    6178:	|  |   move.l 8(a0),d1
    617c:	|  |   add.l d2,d1
    617e:	|  |   move.l d1,d2
    6180:	|  |   asr.l #1,d2
    6182:	|  |   move.l 1949a <cameraX>,d1
    6188:	|  |   movea.l d2,a0
    618a:	|  |   suba.l d1,a0
    618c:	|  |   move.l 36(sp),-(sp)
    6190:	|  |   move.l d0,-(sp)
    6192:	|  |   move.l a1,-(sp)
    6194:	|  |   move.l a0,-(sp)
    6196:	|  |   move.l 44(sp),-(sp)
    619a:	|  |   jsr 6312 <wrapSpeechXY>
    61a0:	|  |   lea 20(sp),sp
    61a4:	|  |   move.l d0,20(sp)
    61a8:	+--|-- bra.s 61e8 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    61aa:	|  \-> move.l 32(sp),-(sp)
    61ae:	|      jsr afd0 <findObjectType>
    61b4:	|      addq.l #4,sp
    61b6:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    61ba:	|      movea.l 8(sp),a0
    61be:	|      move.l 28(a0),d1
    61c2:	|      move.l 192e0 <winWidth>,d0
    61c8:	|      lsr.l #1,d0
    61ca:	|      move.l 36(sp),-(sp)
    61ce:	|      move.l d1,-(sp)
    61d0:	|      pea a <_start+0xa>
    61d4:	|      move.l d0,-(sp)
    61d6:	|      move.l 44(sp),-(sp)
    61da:	|      jsr 6312 <wrapSpeechXY>
    61e0:	|      lea 20(sp),sp
    61e4:	|      move.l d0,20(sp)
        }
    }
    return i;
    61e8:	\----> move.l 20(sp),d0
}
    61ec:	       move.l (sp)+,d2
    61ee:	       lea 20(sp),sp
    61f2:	       rts

000061f4 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    61f4:	    subq.l #8,sp
    61f6:	    movem.l d2-d4,-(sp)
    61fa:	    move.l 36(sp),d0
    61fe:	    move.w d0,d0
    6200:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    6204:	    movea.l 28(sp),a0
    6208:	    movea.l 102(a0),a0
    620c:	    move.l 28(a0),d2
    6210:	    movea.l 28(sp),a0
    6214:	    move.l 4(a0),d3
    6218:	    move.l 1949e <cameraY>,d0
    621e:	    move.l d0,-(sp)
    6220:	    jsr 1449a <__floatsisf>
    6226:	    addq.l #4,sp
    6228:	    move.l d0,-(sp)
    622a:	    move.l d3,-(sp)
    622c:	    jsr 1478e <__subsf3>
    6232:	    addq.l #8,sp
    6234:	    move.l d0,d3
    6236:	    movea.l 28(sp),a0
    623a:	    move.l 20(a0),d4
    623e:	    movea.l 28(sp),a0
    6242:	    move.l 8(a0),d1
    6246:	    movea.l 28(sp),a0
    624a:	    move.l 12(a0),d0
    624e:	    sub.l d0,d1
    6250:	    move.l d1,-(sp)
    6252:	    jsr 1449a <__floatsisf>
    6258:	    addq.l #4,sp
    625a:	    move.l d0,-(sp)
    625c:	    move.l d4,-(sp)
    625e:	    jsr 1454c <__mulsf3>
    6264:	    addq.l #8,sp
    6266:	    move.l d0,-(sp)
    6268:	    move.l d3,-(sp)
    626a:	    jsr 1478e <__subsf3>
    6270:	    addq.l #8,sp
    6272:	    move.l d0,d3
    6274:	    movea.l 28(sp),a0
    6278:	    movea.l 102(a0),a0
    627c:	    move.l 20(a0),d0
    6280:	    move.l d0,-(sp)
    6282:	    jsr 1449a <__floatsisf>
    6288:	    addq.l #4,sp
    628a:	    move.l d0,-(sp)
    628c:	    move.l d3,-(sp)
    628e:	    jsr 1478e <__subsf3>
    6294:	    addq.l #8,sp
    6296:	    move.l d0,-(sp)
    6298:	    jsr 14432 <__fixsfsi>
    629e:	    addq.l #4,sp
    62a0:	    move.l d0,d4
    62a2:	    movea.l 28(sp),a0
    62a6:	    move.l (a0),d3
    62a8:	    move.l 1949a <cameraX>,d0
    62ae:	    move.l d0,-(sp)
    62b0:	    jsr 1449a <__floatsisf>
    62b6:	    addq.l #4,sp
    62b8:	    move.l d0,-(sp)
    62ba:	    move.l d3,-(sp)
    62bc:	    jsr 1478e <__subsf3>
    62c2:	    addq.l #8,sp
    62c4:	    move.l d0,-(sp)
    62c6:	    jsr 14432 <__fixsfsi>
    62cc:	    addq.l #4,sp
    62ce:	    move.l 32(sp),-(sp)
    62d2:	    move.l d2,-(sp)
    62d4:	    move.l d4,-(sp)
    62d6:	    move.l d0,-(sp)
    62d8:	    move.l 40(sp),-(sp)
    62dc:	    jsr 6312 <wrapSpeechXY>
    62e2:	    lea 20(sp),sp
    62e6:	    move.l d0,16(sp)
	if (animPerson) {
    62ea:	    tst.w 14(sp)
    62ee:	/-- beq.s 6306 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    62f0:	|   move.l 28(sp),-(sp)
    62f4:	|   jsr 5f32 <makeTalker>
    62fa:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    62fc:	|   movea.l 193e8 <speech>,a0
    6302:	|   move.l 28(sp),(a0)
	}
	return i;
    6306:	\-> move.l 16(sp),d0
}
    630a:	    movem.l (sp)+,d2-d4
    630e:	    addq.l #8,sp
    6310:	    rts

00006312 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    6312:	                   lea -16(sp),sp
    6316:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    631a:	                   clr.l 16(sp)
    killAllSpeech();
    631e:	                   jsr 5e64 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    6324:	                   move.l 36(sp),-(sp)
    6328:	                   jsr 11686 <strlen>
    632e:	                   addq.l #4,sp
    6330:	                   movea.l d0,a0
    6332:	                   lea 20(a0),a0
    6336:	                   move.l a0,-(sp)
    6338:	                   jsr 144c2 <__floatunsisf>
    633e:	                   addq.l #4,sp
    6340:	                   move.l d0,d1
    6342:	                   move.l 18d30 <speechSpeed>,d0
    6348:	                   move.l d0,-(sp)
    634a:	                   move.l d1,-(sp)
    634c:	                   jsr 1454c <__mulsf3>
    6352:	                   addq.l #8,sp
    6354:	                   move.l d0,-(sp)
    6356:	                   jsr 14432 <__fixsfsi>
    635c:	                   addq.l #4,sp
    635e:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    6362:	               /-- bgt.s 636a <wrapSpeechXY+0x58>
    6364:	               |   moveq #1,d0
    6366:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    636a:	               \-> moveq #-1,d1
    636c:	                   cmp.l 52(sp),d1
    6370:	               /-- beq.s 63b0 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    6372:	               |   move.l 194ae <speechMode>,d0
    6378:	               +-- ble.s 63b0 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    637a:	               |   clr.l -(sp)
    637c:	               |   move.l 56(sp),-(sp)
    6380:	               |   jsr aca6 <startSound>
    6386:	               |   addq.l #8,sp
    6388:	               |   tst.w d0
    638a:	               +-- beq.s 63b0 <wrapSpeechXY+0x9e>
                speechTime = -10;
    638c:	               |   moveq #-10,d0
    638e:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    6392:	               |   movea.l 193e8 <speech>,a0
    6398:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    639e:	               |   move.l 194ae <speechMode>,d0
    63a4:	               |   moveq #2,d1
    63a6:	               |   cmp.l d0,d1
    63a8:	               +-- bne.s 63b0 <wrapSpeechXY+0x9e>
    63aa:	               |   moveq #-10,d0
    63ac:	/--------------|-- bra.w 6636 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    63b0:	|              \-> movea.l 193e8 <speech>,a0
    63b6:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    63bc:	|     /----------- bra.w 6470 <wrapSpeechXY+0x15e>
        a = wrap;
    63c0:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    63c6:	|  |  |        /-- bra.s 63d6 <wrapSpeechXY+0xc4>
            a--;
    63c8:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    63cc:	|  |  |  |     +-- bne.s 63d6 <wrapSpeechXY+0xc4>
                a = wrap;
    63ce:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    63d4:	|  |  |  |  /--|-- bra.s 63e8 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    63d6:	|  |  |  |  |  \-> move.l 28(sp),d0
    63da:	|  |  |  |  |      movea.l 36(sp),a0
    63de:	|  |  |  |  |      adda.l d0,a0
    63e0:	|  |  |  |  |      move.b (a0),d0
    63e2:	|  |  |  |  |      cmpi.b #32,d0
    63e6:	|  |  |  \--|----- bne.s 63c8 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    63e8:	|  |  |     \----> move.l 28(sp),d0
    63ec:	|  |  |            movea.l 36(sp),a0
    63f0:	|  |  |            adda.l d0,a0
    63f2:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    63f4:	|  |  |            lea 16(sp),a0
    63f8:	|  |  |            move.l a0,-(sp)
    63fa:	|  |  |            move.l 44(sp),-(sp)
    63fe:	|  |  |            move.l 44(sp),-(sp)
    6402:	|  |  |            jsr 5bae <addSpeechLine>
    6408:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    640c:	|  |  |            move.l 28(sp),d0
    6410:	|  |  |            movea.l 36(sp),a0
    6414:	|  |  |            adda.l d0,a0
    6416:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    641a:	|  |  |            move.l 28(sp),d0
    641e:	|  |  |            addq.l #1,d0
    6420:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    6424:	|  |  |            move.l 44(sp),-(sp)
    6428:	|  |  |            jsr 1449a <__floatsisf>
    642e:	|  |  |            addq.l #4,sp
    6430:	|  |  |            move.l d0,d2
    6432:	|  |  |            move.l 194d4 <fontHeight>,d0
    6438:	|  |  |            move.l d0,-(sp)
    643a:	|  |  |            jsr 1449a <__floatsisf>
    6440:	|  |  |            addq.l #4,sp
    6442:	|  |  |            move.l d0,d1
    6444:	|  |  |            move.l 18d44 <cameraZoom>,d0
    644a:	|  |  |            move.l d0,-(sp)
    644c:	|  |  |            move.l d1,-(sp)
    644e:	|  |  |            jsr 14346 <__divsf3>
    6454:	|  |  |            addq.l #8,sp
    6456:	|  |  |            move.l d0,-(sp)
    6458:	|  |  |            move.l d2,-(sp)
    645a:	|  |  |            jsr 1478e <__subsf3>
    6460:	|  |  |            addq.l #8,sp
    6462:	|  |  |            move.l d0,-(sp)
    6464:	|  |  |            jsr 14432 <__fixsfsi>
    646a:	|  |  |            addq.l #4,sp
    646c:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    6470:	|  |  \----------> move.l 36(sp),-(sp)
    6474:	|  |               jsr 11686 <strlen>
    647a:	|  |               addq.l #4,sp
    647c:	|  |               move.l d0,d1
    647e:	|  |               move.l 48(sp),d0
    6482:	|  |               cmp.l d1,d0
    6484:	|  \-------------- bcs.w 63c0 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6488:	|                  lea 16(sp),a0
    648c:	|                  move.l a0,-(sp)
    648e:	|                  move.l 44(sp),-(sp)
    6492:	|                  move.l 44(sp),-(sp)
    6496:	|                  jsr 5bae <addSpeechLine>
    649c:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    64a0:	|                  move.l 44(sp),-(sp)
    64a4:	|                  jsr 1449a <__floatsisf>
    64aa:	|                  addq.l #4,sp
    64ac:	|                  move.l d0,d2
    64ae:	|                  move.l 194d4 <fontHeight>,d0
    64b4:	|                  move.l d0,-(sp)
    64b6:	|                  jsr 1449a <__floatsisf>
    64bc:	|                  addq.l #4,sp
    64be:	|                  move.l d0,d1
    64c0:	|                  move.l 18d44 <cameraZoom>,d0
    64c6:	|                  move.l d0,-(sp)
    64c8:	|                  move.l d1,-(sp)
    64ca:	|                  jsr 14346 <__divsf3>
    64d0:	|                  addq.l #8,sp
    64d2:	|                  move.l d0,-(sp)
    64d4:	|                  move.l d2,-(sp)
    64d6:	|                  jsr 1478e <__subsf3>
    64dc:	|                  addq.l #8,sp
    64de:	|                  move.l d0,-(sp)
    64e0:	|                  jsr 14432 <__fixsfsi>
    64e6:	|                  addq.l #4,sp
    64e8:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    64ec:	|              /-- bpl.s 650a <wrapSpeechXY+0x1f8>
    64ee:	|              |   movea.l 193e8 <speech>,a0
    64f4:	|              |   move.l 8(a0),d0
    64f8:	|              |   movea.l 193e8 <speech>,a0
    64fe:	|              |   sub.l 44(sp),d0
    6502:	|              |   move.l d0,8(a0)
    6506:	|           /--|-- bra.w 65f8 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    650a:	|           |  \-> movea.l 193e8 <speech>,a0
    6510:	|           |      move.l 8(a0),d0
    6514:	|           |      move.l d0,-(sp)
    6516:	|           |      jsr 1449a <__floatsisf>
    651c:	|           |      addq.l #4,sp
    651e:	|           |      move.l d0,d2
    6520:	|           |      move.l 1949e <cameraY>,d0
    6526:	|           |      move.l d0,-(sp)
    6528:	|           |      jsr 1449a <__floatsisf>
    652e:	|           |      addq.l #4,sp
    6530:	|           |      move.l d0,d3
    6532:	|           |      move.l 192e4 <winHeight>,d4
    6538:	|           |      move.l 194d4 <fontHeight>,d0
    653e:	|           |      pea 3 <_start+0x3>
    6542:	|           |      move.l d0,-(sp)
    6544:	|           |      jsr 14a9a <__divsi3>
    654a:	|           |      addq.l #8,sp
    654c:	|           |      move.l d4,d1
    654e:	|           |      sub.l d0,d1
    6550:	|           |      move.l d1,-(sp)
    6552:	|           |      jsr 144c2 <__floatunsisf>
    6558:	|           |      addq.l #4,sp
    655a:	|           |      move.l d0,d1
    655c:	|           |      move.l 18d44 <cameraZoom>,d0
    6562:	|           |      move.l d0,-(sp)
    6564:	|           |      move.l d1,-(sp)
    6566:	|           |      jsr 14346 <__divsf3>
    656c:	|           |      addq.l #8,sp
    656e:	|           |      move.l d0,-(sp)
    6570:	|           |      move.l d3,-(sp)
    6572:	|           |      jsr 1424c <__addsf3>
    6578:	|           |      addq.l #8,sp
    657a:	|           |      move.l d0,-(sp)
    657c:	|           |      move.l d2,-(sp)
    657e:	|           |      jsr 14606 <__gtsf2>
    6584:	|           |      addq.l #8,sp
    6586:	|           |      tst.l d0
    6588:	|           +----- ble.s 65f8 <wrapSpeechXY+0x2e6>
    658a:	|           |      move.l 1949e <cameraY>,d0
    6590:	|           |      move.l d0,-(sp)
    6592:	|           |      jsr 1449a <__floatsisf>
    6598:	|           |      addq.l #4,sp
    659a:	|           |      move.l d0,d2
    659c:	|           |      move.l 192e4 <winHeight>,d3
    65a2:	|           |      move.l 194d4 <fontHeight>,d0
    65a8:	|           |      pea 3 <_start+0x3>
    65ac:	|           |      move.l d0,-(sp)
    65ae:	|           |      jsr 14a9a <__divsi3>
    65b4:	|           |      addq.l #8,sp
    65b6:	|           |      move.l d3,d1
    65b8:	|           |      sub.l d0,d1
    65ba:	|           |      move.l d1,-(sp)
    65bc:	|           |      jsr 144c2 <__floatunsisf>
    65c2:	|           |      addq.l #4,sp
    65c4:	|           |      move.l d0,d1
    65c6:	|           |      move.l 18d44 <cameraZoom>,d0
    65cc:	|           |      move.l d0,-(sp)
    65ce:	|           |      move.l d1,-(sp)
    65d0:	|           |      jsr 14346 <__divsf3>
    65d6:	|           |      addq.l #8,sp
    65d8:	|           |      move.l d0,-(sp)
    65da:	|           |      move.l d2,-(sp)
    65dc:	|           |      jsr 1424c <__addsf3>
    65e2:	|           |      addq.l #8,sp
    65e4:	|           |      movea.l 193e8 <speech>,a2
    65ea:	|           |      move.l d0,-(sp)
    65ec:	|           |      jsr 14432 <__fixsfsi>
    65f2:	|           |      addq.l #4,sp
    65f4:	|           |      move.l d0,8(a2)

    if (offset) {
    65f8:	|           \----> move.l 16(sp),d0
    65fc:	|        /-------- beq.s 6632 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    65fe:	|        |         movea.l 193e8 <speech>,a0
    6604:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    660a:	|        |     /-- bra.s 662c <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    660c:	|        |  /--|-> movea.l 20(sp),a0
    6610:	|        |  |  |   move.l 8(a0),d1
    6614:	|        |  |  |   move.l 16(sp),d0
    6618:	|        |  |  |   add.l d1,d0
    661a:	|        |  |  |   movea.l 20(sp),a0
    661e:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    6622:	|        |  |  |   movea.l 20(sp),a0
    6626:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    662c:	|        |  |  \-> tst.l 20(sp)
    6630:	|        |  \----- bne.s 660c <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6632:	|        \-------> move.l 24(sp),d0
}
    6636:	\----------------> movem.l (sp)+,d2-d4/a2
    663a:	                   lea 16(sp),sp
    663e:	                   rts

00006640 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    6640:	    subq.l #4,sp
    6642:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    6644:	    move.l 1943c <tga.c.c5785d2a+0x1f>,d0
    664a:	/-- beq.s 6682 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    664c:	|   pea 19440 <tga.c.c5785d2a+0x23>
    6652:	|   pea 1 <_start+0x1>
    6656:	|   jsr 21f2 <deleteTextures>
    665c:	|   addq.l #8,sp
		zBuffer.texName = 0;
    665e:	|   clr.l 19440 <tga.c.c5785d2a+0x23>
        FreeVec(zBuffer.tex);
    6664:	|   move.l 1943c <tga.c.c5785d2a+0x1f>,4(sp)
    666c:	|   move.l 1938c <SysBase>,d0
    6672:	|   movea.l d0,a6
    6674:	|   movea.l 4(sp),a1
    6678:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    667c:	|   clr.l 1943c <tga.c.c5785d2a+0x1f>
	}
	zBuffer.numPanels = 0;
    6682:	\-> clr.l 193f4 <zBuffer+0x8>
	zBuffer.originalNum =0;
    6688:	    clr.l 19438 <tga.c.c5785d2a+0x1b>
}
    668e:	    nop
    6690:	    movea.l (sp)+,a6
    6692:	    addq.l #4,sp
    6694:	    rts

00006696 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    6696:	                         lea -528(sp),sp
    669a:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    669e:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    66a2:	                         jsr 6640 <killZBuffer>

	zBuffer.originalNum = y;
    66a8:	                         move.l 544(sp),d0
    66ac:	                         move.l d0,19438 <tga.c.c5785d2a+0x1b>
	if (! openFileFromNum (y)) return FALSE;
    66b2:	                         move.l 544(sp),d0
    66b6:	                         move.l d0,-(sp)
    66b8:	                         jsr 4cac <openFileFromNum>
    66be:	                         addq.l #4,sp
    66c0:	                         tst.l d0
    66c2:	                     /-- bne.s 66ca <setZBuffer+0x34>
    66c4:	                     |   clr.w d0
    66c6:	/--------------------|-- bra.w 6aa8 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    66ca:	|                    \-> move.l 19374 <bigDataFile>,524(sp)
    66d2:	|                        move.l 19394 <DOSBase>,d0
    66d8:	|                        movea.l d0,a6
    66da:	|                        move.l 524(sp),d1
    66de:	|                        jsr -306(a6)
    66e2:	|                        move.l d0,520(sp)
    66e6:	|                        move.l 520(sp),d0
    66ea:	|                        moveq #83,d1
    66ec:	|                        cmp.l d0,d1
    66ee:	|                    /-- beq.s 6750 <setZBuffer+0xba>
    66f0:	|                    |   move.l 19374 <bigDataFile>,516(sp)
    66f8:	|                    |   move.l 19394 <DOSBase>,d0
    66fe:	|                    |   movea.l d0,a6
    6700:	|                    |   move.l 516(sp),d1
    6704:	|                    |   jsr -306(a6)
    6708:	|                    |   move.l d0,512(sp)
    670c:	|                    |   move.l 512(sp),d0
    6710:	|                    |   moveq #122,d1
    6712:	|                    |   cmp.l d0,d1
    6714:	|                    +-- beq.s 6750 <setZBuffer+0xba>
    6716:	|                    |   move.l 19374 <bigDataFile>,508(sp)
    671e:	|                    |   move.l 19394 <DOSBase>,d0
    6724:	|                    |   movea.l d0,a6
    6726:	|                    |   move.l 508(sp),d1
    672a:	|                    |   jsr -306(a6)
    672e:	|                    |   move.l d0,504(sp)
    6732:	|                    |   move.l 504(sp),d0
    6736:	|                    |   moveq #98,d1
    6738:	|                    |   cmp.l d0,d1
    673a:	|                    +-- beq.s 6750 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    673c:	|                    |   pea 15a2e <custom.c.49191367+0xd02>
    6742:	|                    |   jsr 141e2 <KPrintF>
    6748:	|                    |   addq.l #4,sp
		 return FALSE;
    674a:	|                    |   clr.w d0
    674c:	+--------------------|-- bra.w 6aa8 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    6750:	|                    \-> move.l 19374 <bigDataFile>,500(sp)
    6758:	|                        move.l 19394 <DOSBase>,d0
    675e:	|                        movea.l d0,a6
    6760:	|                        move.l 500(sp),d1
    6764:	|                        jsr -306(a6)
    6768:	|                        move.l d0,496(sp)
    676c:	|                        move.l 496(sp),d0
    6770:	|                    /-- beq.s 677a <setZBuffer+0xe4>
    6772:	|                    |   moveq #1,d1
    6774:	|                    |   cmp.l d0,d1
    6776:	|                 /--|-- beq.s 6790 <setZBuffer+0xfa>
    6778:	|              /--|--|-- bra.s 67be <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    677a:	|              |  |  \-> move.l #640,193ec <zBuffer>
		zBuffer.height = 480;
    6784:	|              |  |      move.l #480,193f0 <zBuffer+0x4>
		break;
    678e:	|              |  |  /-- bra.s 67d2 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    6790:	|              |  \--|-> move.l 19374 <bigDataFile>,d0
    6796:	|              |     |   move.l d0,-(sp)
    6798:	|              |     |   jsr 6bc <get2bytes>
    679e:	|              |     |   addq.l #4,sp
    67a0:	|              |     |   move.l d0,193ec <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    67a6:	|              |     |   move.l 19374 <bigDataFile>,d0
    67ac:	|              |     |   move.l d0,-(sp)
    67ae:	|              |     |   jsr 6bc <get2bytes>
    67b4:	|              |     |   addq.l #4,sp
    67b6:	|              |     |   move.l d0,193f0 <zBuffer+0x4>
		break;
    67bc:	|              |     +-- bra.s 67d2 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    67be:	|              \-----|-> pea 15a42 <custom.c.49191367+0xd16>
    67c4:	|                    |   jsr 141e2 <KPrintF>
    67ca:	|                    |   addq.l #4,sp
		return FALSE;
    67cc:	|                    |   clr.w d0
    67ce:	+--------------------|-- bra.w 6aa8 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    67d2:	|                    \-> move.l 193ec <zBuffer>,d0
    67d8:	|                        move.l d0,d1
    67da:	|                        move.l 1947c <sceneWidth>,d0
    67e0:	|                        cmp.l d1,d0
    67e2:	|                    /-- bne.s 67f6 <setZBuffer+0x160>
    67e4:	|                    |   move.l 193f0 <zBuffer+0x4>,d0
    67ea:	|                    |   move.l d0,d1
    67ec:	|                    |   move.l 19480 <sceneHeight>,d0
    67f2:	|                    |   cmp.l d1,d0
    67f4:	|                 /--|-- beq.s 6846 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    67f6:	|                 |  \-> movea.l 19480 <sceneHeight>,a1
    67fc:	|                 |      movea.l 1947c <sceneWidth>,a0
    6802:	|                 |      move.l 193f0 <zBuffer+0x4>,d1
    6808:	|                 |      move.l 193ec <zBuffer>,d0
    680e:	|                 |      move.l a1,-(sp)
    6810:	|                 |      move.l a0,-(sp)
    6812:	|                 |      move.l d1,-(sp)
    6814:	|                 |      move.l d0,-(sp)
    6816:	|                 |      pea 15a8e <custom.c.49191367+0xd62>
    681c:	|                 |      moveq #32,d0
    681e:	|                 |      add.l sp,d0
    6820:	|                 |      move.l d0,-(sp)
    6822:	|                 |      jsr 119a4 <sprintf>
    6828:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    682c:	|                 |      moveq #12,d0
    682e:	|                 |      add.l sp,d0
    6830:	|                 |      move.l d0,-(sp)
    6832:	|                 |      pea 15aa9 <custom.c.49191367+0xd7d>
    6838:	|                 |      jsr 141e2 <KPrintF>
    683e:	|                 |      addq.l #8,sp
		return FALSE;
    6840:	|                 |      clr.w d0
    6842:	+-----------------|----- bra.w 6aa8 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6846:	|                 \----> move.l 19374 <bigDataFile>,492(sp)
    684e:	|                        move.l 19394 <DOSBase>,d0
    6854:	|                        movea.l d0,a6
    6856:	|                        move.l 492(sp),d1
    685a:	|                        jsr -306(a6)
    685e:	|                        move.l d0,488(sp)
    6862:	|                        move.l 488(sp),d0
    6866:	|                        move.l d0,193f4 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    686c:	|                        clr.l 544(sp)
    6870:	|                    /-- bra.s 689c <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    6872:	|                 /--|-> move.l 19374 <bigDataFile>,d0
    6878:	|                 |  |   move.l d0,-(sp)
    687a:	|                 |  |   jsr 6bc <get2bytes>
    6880:	|                 |  |   addq.l #4,sp
    6882:	|                 |  |   move.l 544(sp),d1
    6886:	|                 |  |   add.l d1,d1
    6888:	|                 |  |   add.l d1,d1
    688a:	|                 |  |   lea 540(sp),a0
    688e:	|                 |  |   add.l a0,d1
    6890:	|                 |  |   movea.l d1,a0
    6892:	|                 |  |   lea -144(a0),a0
    6896:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6898:	|                 |  |   addq.l #1,544(sp)
    689c:	|                 |  \-> move.l 193f4 <zBuffer+0x8>,d0
    68a2:	|                 |      cmp.l 544(sp),d0
    68a6:	|                 \----- bhi.s 6872 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    68a8:	|                        move.l 193f4 <zBuffer+0x8>,d0
    68ae:	|                        move.l d0,-(sp)
    68b0:	|                        move.l sp,d0
    68b2:	|                        addi.l #336,d0
    68b8:	|                        move.l d0,-(sp)
    68ba:	|                        move.l sp,d0
    68bc:	|                        addi.l #404,d0
    68c2:	|                        move.l d0,-(sp)
    68c4:	|                        jsr 6ab2 <sortZPal>
    68ca:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    68ce:	|                        clr.l 544(sp)
    68d2:	|                    /-- bra.s 694a <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    68d4:	|                 /--|-> move.l 544(sp),d0
    68d8:	|                 |  |   add.l d0,d0
    68da:	|                 |  |   add.l d0,d0
    68dc:	|                 |  |   move.l #540,d1
    68e2:	|                 |  |   add.l sp,d1
    68e4:	|                 |  |   add.l d1,d0
    68e6:	|                 |  |   movea.l d0,a0
    68e8:	|                 |  |   lea -208(a0),a0
    68ec:	|                 |  |   move.l (a0),d0
    68ee:	|                 |  |   add.l d0,d0
    68f0:	|                 |  |   add.l d0,d0
    68f2:	|                 |  |   lea 540(sp),a0
    68f6:	|                 |  |   add.l a0,d0
    68f8:	|                 |  |   movea.l d0,a0
    68fa:	|                 |  |   lea -144(a0),a0
    68fe:	|                 |  |   move.l (a0),d0
    6900:	|                 |  |   move.l 544(sp),d1
    6904:	|                 |  |   addq.l #3,d1
    6906:	|                 |  |   add.l d1,d1
    6908:	|                 |  |   movea.l d1,a1
    690a:	|                 |  |   adda.l d1,a1
    690c:	|                 |  |   lea 193ec <zBuffer>,a0
    6912:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    6916:	|                 |  |   move.l 544(sp),d0
    691a:	|                 |  |   add.l d0,d0
    691c:	|                 |  |   add.l d0,d0
    691e:	|                 |  |   move.l #540,d1
    6924:	|                 |  |   add.l sp,d1
    6926:	|                 |  |   add.l d1,d0
    6928:	|                 |  |   movea.l d0,a0
    692a:	|                 |  |   lea -208(a0),a0
    692e:	|                 |  |   move.l (a0),d1
    6930:	|                 |  |   move.l 544(sp),d0
    6934:	|                 |  |   add.l d1,d1
    6936:	|                 |  |   add.l d1,d1
    6938:	|                 |  |   lea 540(sp),a0
    693c:	|                 |  |   add.l a0,d1
    693e:	|                 |  |   movea.l d1,a0
    6940:	|                 |  |   lea -272(a0),a0
    6944:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6946:	|                 |  |   addq.l #1,544(sp)
    694a:	|                 |  \-> move.l 193f4 <zBuffer+0x8>,d0
    6950:	|                 |      cmp.l 544(sp),d0
    6954:	|                 \----- bhi.w 68d4 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6958:	|                        move.l 1947c <sceneWidth>,d0
    695e:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    6962:	|                        move.l 19480 <sceneHeight>,d0
    6968:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    696c:	|                        move.l 484(sp),-(sp)
    6970:	|                        move.l 484(sp),-(sp)
    6974:	|                        jsr 14a1c <__mulsi3>
    697a:	|                        addq.l #8,sp
    697c:	|                        move.l d0,476(sp)
    6980:	|                        clr.l 472(sp)
    6984:	|                        move.l 1938c <SysBase>,d0
    698a:	|                        movea.l d0,a6
    698c:	|                        move.l 476(sp),d0
    6990:	|                        move.l 472(sp),d1
    6994:	|                        jsr -684(a6)
    6998:	|                        move.l d0,468(sp)
    699c:	|                        move.l 468(sp),d0
    69a0:	|                        move.l d0,1943c <tga.c.c5785d2a+0x1f>
	if (!zBuffer.tex) {
    69a6:	|                        move.l 1943c <tga.c.c5785d2a+0x1f>,d0
    69ac:	|                    /-- bne.s 69c2 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    69ae:	|                    |   pea 15ae6 <custom.c.49191367+0xdba>
    69b4:	|                    |   jsr 141e2 <KPrintF>
    69ba:	|                    |   addq.l #4,sp
		return FALSE;
    69bc:	|                    |   clr.w d0
    69be:	+--------------------|-- bra.w 6aa8 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    69c2:	|                    \-> clr.l 544(sp)
    69c6:	|     /----------------- bra.w 6a92 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    69ca:	|  /--|----------------> clr.l 536(sp)
    69ce:	|  |  |     /----------- bra.w 6a7e <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    69d2:	|  |  |  /--|----------> tst.l 528(sp)
    69d6:	|  |  |  |  |  /-------- bne.s 6a34 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    69d8:	|  |  |  |  |  |         move.l 19374 <bigDataFile>,464(sp)
    69e0:	|  |  |  |  |  |         move.l 19394 <DOSBase>,d0
    69e6:	|  |  |  |  |  |         movea.l d0,a6
    69e8:	|  |  |  |  |  |         move.l 464(sp),d1
    69ec:	|  |  |  |  |  |         jsr -306(a6)
    69f0:	|  |  |  |  |  |         move.l d0,460(sp)
    69f4:	|  |  |  |  |  |         move.l 460(sp),d0
    69f8:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    69fc:	|  |  |  |  |  |         move.l 532(sp),d0
    6a00:	|  |  |  |  |  |         asr.l #4,d0
    6a02:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    6a06:	|  |  |  |  |  |         moveq #15,d0
    6a08:	|  |  |  |  |  |         cmp.l 528(sp),d0
    6a0c:	|  |  |  |  |  |  /----- bne.s 6a2a <setZBuffer+0x394>
    6a0e:	|  |  |  |  |  |  |      move.l 19374 <bigDataFile>,d0
    6a14:	|  |  |  |  |  |  |      move.l d0,-(sp)
    6a16:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    6a1c:	|  |  |  |  |  |  |      addq.l #4,sp
    6a1e:	|  |  |  |  |  |  |      movea.l d0,a0
    6a20:	|  |  |  |  |  |  |      lea 16(a0),a0
    6a24:	|  |  |  |  |  |  |      move.l a0,528(sp)
    6a28:	|  |  |  |  |  |  |  /-- bra.s 6a2e <setZBuffer+0x398>
				else stillToGo ++;
    6a2a:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    6a2e:	|  |  |  |  |  |     \-> moveq #15,d1
    6a30:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    6a34:	|  |  |  |  |  \-------> move.l 532(sp),d0
    6a38:	|  |  |  |  |            add.l d0,d0
    6a3a:	|  |  |  |  |            add.l d0,d0
    6a3c:	|  |  |  |  |            lea 540(sp),a0
    6a40:	|  |  |  |  |            add.l a0,d0
    6a42:	|  |  |  |  |            movea.l d0,a0
    6a44:	|  |  |  |  |            lea -272(a0),a0
    6a48:	|  |  |  |  |            move.l (a0),d0
    6a4a:	|  |  |  |  |            move.l d0,d2
    6a4c:	|  |  |  |  |            move.l 1943c <tga.c.c5785d2a+0x1f>,d3
    6a52:	|  |  |  |  |            move.l 484(sp),d0
    6a56:	|  |  |  |  |            move.l 544(sp),-(sp)
    6a5a:	|  |  |  |  |            move.l d0,-(sp)
    6a5c:	|  |  |  |  |            jsr 14a1c <__mulsi3>
    6a62:	|  |  |  |  |            addq.l #8,sp
    6a64:	|  |  |  |  |            move.l d0,d1
    6a66:	|  |  |  |  |            move.l 536(sp),d0
    6a6a:	|  |  |  |  |            add.l d1,d0
    6a6c:	|  |  |  |  |            movea.l d3,a0
    6a6e:	|  |  |  |  |            adda.l d0,a0
    6a70:	|  |  |  |  |            move.b d2,d0
    6a72:	|  |  |  |  |            lsl.b #4,d0
    6a74:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    6a76:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6a7a:	|  |  |  |  |            addq.l #1,536(sp)
    6a7e:	|  |  |  |  \----------> move.l 536(sp),d1
    6a82:	|  |  |  |               move.l 1947c <sceneWidth>,d0
    6a88:	|  |  |  |               cmp.l d1,d0
    6a8a:	|  |  |  \-------------- bhi.w 69d2 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    6a8e:	|  |  |                  addq.l #1,544(sp)
    6a92:	|  |  \----------------> move.l 19480 <sceneHeight>,d0
    6a98:	|  |                     cmp.l 544(sp),d0
    6a9c:	|  \-------------------- bhi.w 69ca <setZBuffer+0x334>
		}
	}

	finishAccess ();
    6aa0:	|                        jsr 4ba4 <finishAccess>
	
	return TRUE;
    6aa6:	|                        moveq #1,d0
}
    6aa8:	\----------------------> movem.l (sp)+,d2-d3/a6
    6aac:	                         lea 528(sp),sp
    6ab0:	                         rts

00006ab2 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    6ab2:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    6ab4:	             clr.l 4(sp)
    6ab8:	         /-- bra.s 6ad0 <sortZPal+0x1e>
		newpal[i] = i;
    6aba:	      /--|-> move.l 4(sp),d0
    6abe:	      |  |   add.l d0,d0
    6ac0:	      |  |   add.l d0,d0
    6ac2:	      |  |   movea.l 16(sp),a0
    6ac6:	      |  |   adda.l d0,a0
    6ac8:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    6acc:	      |  |   addq.l #1,4(sp)
    6ad0:	      |  \-> move.l 4(sp),d0
    6ad4:	      |      cmp.l 20(sp),d0
    6ad8:	      \----- blt.s 6aba <sortZPal+0x8>
	}

	if (size < 2) return;		
    6ada:	             moveq #1,d0
    6adc:	             cmp.l 20(sp),d0
    6ae0:	/----------- bge.w 6b92 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    6ae4:	|            moveq #1,d0
    6ae6:	|            move.l d0,4(sp)
    6aea:	|     /----- bra.w 6b84 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    6aee:	|  /--|----> move.l 4(sp),d0
    6af2:	|  |  |      add.l d0,d0
    6af4:	|  |  |      add.l d0,d0
    6af6:	|  |  |      movea.l 16(sp),a0
    6afa:	|  |  |      adda.l d0,a0
    6afc:	|  |  |      move.l (a0),d0
    6afe:	|  |  |      add.l d0,d0
    6b00:	|  |  |      add.l d0,d0
    6b02:	|  |  |      movea.l 12(sp),a0
    6b06:	|  |  |      adda.l d0,a0
    6b08:	|  |  |      move.l (a0),d1
    6b0a:	|  |  |      move.l 4(sp),d0
    6b0e:	|  |  |      addi.l #1073741823,d0
    6b14:	|  |  |      add.l d0,d0
    6b16:	|  |  |      add.l d0,d0
    6b18:	|  |  |      movea.l 16(sp),a0
    6b1c:	|  |  |      adda.l d0,a0
    6b1e:	|  |  |      move.l (a0),d0
    6b20:	|  |  |      add.l d0,d0
    6b22:	|  |  |      add.l d0,d0
    6b24:	|  |  |      movea.l 12(sp),a0
    6b28:	|  |  |      adda.l d0,a0
    6b2a:	|  |  |      move.l (a0),d0
    6b2c:	|  |  |      cmp.l d1,d0
    6b2e:	|  |  |  /-- ble.s 6b80 <sortZPal+0xce>
			tmp = newpal[i];
    6b30:	|  |  |  |   move.l 4(sp),d0
    6b34:	|  |  |  |   add.l d0,d0
    6b36:	|  |  |  |   add.l d0,d0
    6b38:	|  |  |  |   movea.l 16(sp),a0
    6b3c:	|  |  |  |   adda.l d0,a0
    6b3e:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    6b40:	|  |  |  |   move.l 4(sp),d0
    6b44:	|  |  |  |   addi.l #1073741823,d0
    6b4a:	|  |  |  |   add.l d0,d0
    6b4c:	|  |  |  |   add.l d0,d0
    6b4e:	|  |  |  |   movea.l 16(sp),a1
    6b52:	|  |  |  |   adda.l d0,a1
    6b54:	|  |  |  |   move.l 4(sp),d0
    6b58:	|  |  |  |   add.l d0,d0
    6b5a:	|  |  |  |   add.l d0,d0
    6b5c:	|  |  |  |   movea.l 16(sp),a0
    6b60:	|  |  |  |   adda.l d0,a0
    6b62:	|  |  |  |   move.l (a1),d0
    6b64:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    6b66:	|  |  |  |   move.l 4(sp),d0
    6b6a:	|  |  |  |   addi.l #1073741823,d0
    6b70:	|  |  |  |   add.l d0,d0
    6b72:	|  |  |  |   add.l d0,d0
    6b74:	|  |  |  |   movea.l 16(sp),a0
    6b78:	|  |  |  |   adda.l d0,a0
    6b7a:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    6b7c:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    6b80:	|  |  |  \-> addq.l #1,4(sp)
    6b84:	|  |  \----> move.l 4(sp),d0
    6b88:	|  |         cmp.l 20(sp),d0
    6b8c:	|  \-------- blt.w 6aee <sortZPal+0x3c>
    6b90:	|        /-- bra.s 6b94 <sortZPal+0xe2>
	if (size < 2) return;		
    6b92:	\--------|-> nop
		}
	}
    6b94:	         \-> addq.l #8,sp
    6b96:	             rts

00006b98 <loadSpriteBank>:
#include "sprites.h"
#include "fileset.h"
#include "moreio.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    6b98:	             lea -84(sp),sp
    6b9c:	             movem.l d2-d4/a2/a6,-(sp)
    6ba0:	             move.l 116(sp),d0
    6ba4:	             move.w d0,d0
    6ba6:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    6baa:	             clr.l 96(sp)
    6bae:	             clr.l 92(sp)
    6bb2:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    6bb6:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    6bba:	             move.l 108(sp),-(sp)
    6bbe:	             jsr 4cac <openFileFromNum>
    6bc4:	             addq.l #4,sp
    6bc6:	             tst.l d0
    6bc8:	         /-- bne.s 6bde <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    6bca:	         |   pea 15b09 <custom.c.49191367+0xddd>
    6bd0:	         |   jsr 141e2 <KPrintF>
    6bd6:	         |   addq.l #4,sp
		return FALSE;
    6bd8:	         |   clr.w d0
    6bda:	/--------|-- bra.w 6ea4 <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    6bde:	|        \-> movea.l 112(sp),a0
    6be2:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    6be8:	|            move.l 19374 <bigDataFile>,d0
    6bee:	|            move.l d0,-(sp)
    6bf0:	|            jsr 6bc <get2bytes>
    6bf6:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    6bf8:	|            move.l 19374 <bigDataFile>,80(sp)
    6c00:	|            move.l 19394 <DOSBase>,d0
    6c06:	|            movea.l d0,a6
    6c08:	|            move.l 80(sp),d1
    6c0c:	|            jsr -306(a6)
    6c10:	|            move.l d0,76(sp)
    6c14:	|            move.l 76(sp),d0
    6c18:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    6c1c:	|            move.l 19374 <bigDataFile>,d0
    6c22:	|            move.l d0,-(sp)
    6c24:	|            jsr 6bc <get2bytes>
    6c2a:	|            addq.l #4,sp
    6c2c:	|            move.l d0,72(sp)

	if (total <= 0) {
    6c30:	|        /-- bgt.s 6c46 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    6c32:	|        |   pea 15b37 <custom.c.49191367+0xe0b>
    6c38:	|        |   jsr 141e2 <KPrintF>
    6c3e:	|        |   addq.l #4,sp
		return FALSE;
    6c40:	|        |   clr.w d0
    6c42:	+--------|-- bra.w 6ea4 <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    6c46:	|        \-> moveq #3,d0
    6c48:	|            cmp.l 96(sp),d0
    6c4c:	|        /-- bge.s 6c62 <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    6c4e:	|        |   pea 15b77 <custom.c.49191367+0xe4b>
    6c54:	|        |   jsr 141e2 <KPrintF>
    6c5a:	|        |   addq.l #4,sp
		return FALSE;
    6c5c:	|        |   clr.w d0
    6c5e:	+--------|-- bra.w 6ea4 <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    6c62:	|        \-> movea.l 112(sp),a0
    6c66:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    6c6a:	|            move.l 72(sp),d1
    6c6e:	|            move.l d1,d0
    6c70:	|            lsl.l #3,d0
    6c72:	|            sub.l d1,d0
    6c74:	|            add.l d0,d0
    6c76:	|            add.l d0,d0
    6c78:	|            move.l d0,68(sp)
    6c7c:	|            clr.l 64(sp)
    6c80:	|            move.l 1938c <SysBase>,d0
    6c86:	|            movea.l d0,a6
    6c88:	|            move.l 68(sp),d0
    6c8c:	|            move.l 64(sp),d1
    6c90:	|            jsr -684(a6)
    6c94:	|            move.l d0,60(sp)
    6c98:	|            move.l 60(sp),d0
    6c9c:	|            movea.l 112(sp),a0
    6ca0:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    6ca4:	|            movea.l 112(sp),a0
    6ca8:	|            move.l 8(a0),d0
    6cac:	|        /-- bne.s 6cb4 <loadSpriteBank+0x11c>
    6cae:	|        |   clr.w d0
    6cb0:	+--------|-- bra.w 6ea4 <loadSpriteBank+0x30c>
	
	startIndex = 1;
    6cb4:	|        \-> moveq #1,d0
    6cb6:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    6cba:	|            clr.l 100(sp)
    6cbe:	|     /----- bra.w 6e90 <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    6cc2:	|  /--|----> movea.l 19374 <bigDataFile>,a1
    6cc8:	|  |  |      movea.l 112(sp),a0
    6ccc:	|  |  |      movea.l 8(a0),a0
    6cd0:	|  |  |      move.l 100(sp),d1
    6cd4:	|  |  |      move.l d1,d0
    6cd6:	|  |  |      lsl.l #3,d0
    6cd8:	|  |  |      sub.l d1,d0
    6cda:	|  |  |      add.l d0,d0
    6cdc:	|  |  |      add.l d0,d0
    6cde:	|  |  |      lea (0,a0,d0.l),a2
    6ce2:	|  |  |      move.l a1,-(sp)
    6ce4:	|  |  |      jsr 6bc <get2bytes>
    6cea:	|  |  |      addq.l #4,sp
    6cec:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    6cee:	|  |  |      movea.l 19374 <bigDataFile>,a1
    6cf4:	|  |  |      movea.l 112(sp),a0
    6cf8:	|  |  |      movea.l 8(a0),a0
    6cfc:	|  |  |      move.l 100(sp),d1
    6d00:	|  |  |      move.l d1,d0
    6d02:	|  |  |      lsl.l #3,d0
    6d04:	|  |  |      sub.l d1,d0
    6d06:	|  |  |      add.l d0,d0
    6d08:	|  |  |      add.l d0,d0
    6d0a:	|  |  |      lea (0,a0,d0.l),a2
    6d0e:	|  |  |      move.l a1,-(sp)
    6d10:	|  |  |      jsr 6bc <get2bytes>
    6d16:	|  |  |      addq.l #4,sp
    6d18:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    6d1c:	|  |  |      movea.l 19374 <bigDataFile>,a1
    6d22:	|  |  |      movea.l 112(sp),a0
    6d26:	|  |  |      movea.l 8(a0),a0
    6d2a:	|  |  |      move.l 100(sp),d1
    6d2e:	|  |  |      move.l d1,d0
    6d30:	|  |  |      lsl.l #3,d0
    6d32:	|  |  |      sub.l d1,d0
    6d34:	|  |  |      add.l d0,d0
    6d36:	|  |  |      add.l d0,d0
    6d38:	|  |  |      lea (0,a0,d0.l),a2
    6d3c:	|  |  |      move.l a1,-(sp)
    6d3e:	|  |  |      jsr 6bc <get2bytes>
    6d44:	|  |  |      addq.l #4,sp
    6d46:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    6d4a:	|  |  |      movea.l 19374 <bigDataFile>,a1
    6d50:	|  |  |      movea.l 112(sp),a0
    6d54:	|  |  |      movea.l 8(a0),a0
    6d58:	|  |  |      move.l 100(sp),d1
    6d5c:	|  |  |      move.l d1,d0
    6d5e:	|  |  |      lsl.l #3,d0
    6d60:	|  |  |      sub.l d1,d0
    6d62:	|  |  |      add.l d0,d0
    6d64:	|  |  |      add.l d0,d0
    6d66:	|  |  |      lea (0,a0,d0.l),a2
    6d6a:	|  |  |      move.l a1,-(sp)
    6d6c:	|  |  |      jsr 6bc <get2bytes>
    6d72:	|  |  |      addq.l #4,sp
    6d74:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    6d78:	|  |  |      movea.l 112(sp),a0
    6d7c:	|  |  |      movea.l 8(a0),a0
    6d80:	|  |  |      move.l 100(sp),d1
    6d84:	|  |  |      move.l d1,d0
    6d86:	|  |  |      lsl.l #3,d0
    6d88:	|  |  |      sub.l d1,d0
    6d8a:	|  |  |      add.l d0,d0
    6d8c:	|  |  |      add.l d0,d0
    6d8e:	|  |  |      adda.l d0,a0
    6d90:	|  |  |      move.l (a0),d0
    6d92:	|  |  |  /-- bpl.s 6d96 <loadSpriteBank+0x1fe>
    6d94:	|  |  |  |   addq.l #7,d0
    6d96:	|  |  |  \-> asr.l #3,d0
    6d98:	|  |  |      move.l d0,d2
    6d9a:	|  |  |      movea.l 112(sp),a0
    6d9e:	|  |  |      movea.l 8(a0),a0
    6da2:	|  |  |      move.l 100(sp),d1
    6da6:	|  |  |      move.l d1,d0
    6da8:	|  |  |      lsl.l #3,d0
    6daa:	|  |  |      sub.l d1,d0
    6dac:	|  |  |      add.l d0,d0
    6dae:	|  |  |      add.l d0,d0
    6db0:	|  |  |      adda.l d0,a0
    6db2:	|  |  |      move.l 4(a0),d0
    6db6:	|  |  |      move.l d0,d0
    6db8:	|  |  |      move.w d2,d1
    6dba:	|  |  |      muls.w d0,d1
    6dbc:	|  |  |      move.w d1,d0
    6dbe:	|  |  |      add.w d0,d0
    6dc0:	|  |  |      add.w d1,d0
    6dc2:	|  |  |      add.w d0,d0
    6dc4:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    6dc8:	|  |  |      moveq #0,d0
    6dca:	|  |  |      move.w 58(sp),d0
    6dce:	|  |  |      add.l d0,d0
    6dd0:	|  |  |      move.l d0,54(sp)
    6dd4:	|  |  |      moveq #2,d0
    6dd6:	|  |  |      move.l d0,50(sp)
    6dda:	|  |  |      move.l 1938c <SysBase>,d0
    6de0:	|  |  |      movea.l d0,a6
    6de2:	|  |  |      move.l 54(sp),d0
    6de6:	|  |  |      move.l 50(sp),d1
    6dea:	|  |  |      jsr -684(a6)
    6dee:	|  |  |      move.l d0,46(sp)
    6df2:	|  |  |      movea.l 46(sp),a1
    6df6:	|  |  |      movea.l 112(sp),a0
    6dfa:	|  |  |      movea.l 8(a0),a0
    6dfe:	|  |  |      move.l 100(sp),d1
    6e02:	|  |  |      move.l d1,d0
    6e04:	|  |  |      lsl.l #3,d0
    6e06:	|  |  |      sub.l d1,d0
    6e08:	|  |  |      add.l d0,d0
    6e0a:	|  |  |      add.l d0,d0
    6e0c:	|  |  |      adda.l d0,a0
    6e0e:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    6e12:	|  |  |      move.l 19374 <bigDataFile>,42(sp)
    6e1a:	|  |  |      movea.l 112(sp),a0
    6e1e:	|  |  |      movea.l 8(a0),a0
    6e22:	|  |  |      move.l 100(sp),d1
    6e26:	|  |  |      move.l d1,d0
    6e28:	|  |  |      lsl.l #3,d0
    6e2a:	|  |  |      sub.l d1,d0
    6e2c:	|  |  |      add.l d0,d0
    6e2e:	|  |  |      add.l d0,d0
    6e30:	|  |  |      adda.l d0,a0
    6e32:	|  |  |      move.l 24(a0),38(sp)
    6e38:	|  |  |      moveq #2,d0
    6e3a:	|  |  |      move.l d0,34(sp)
    6e3e:	|  |  |      move.w 58(sp),d0
    6e42:	|  |  |      lsr.w #1,d0
    6e44:	|  |  |      move.w d0,d0
    6e46:	|  |  |      andi.l #65535,d0
    6e4c:	|  |  |      move.l d0,30(sp)
    6e50:	|  |  |      move.l 19394 <DOSBase>,d0
    6e56:	|  |  |      movea.l d0,a6
    6e58:	|  |  |      move.l 42(sp),d1
    6e5c:	|  |  |      move.l 38(sp),d2
    6e60:	|  |  |      move.l 34(sp),d3
    6e64:	|  |  |      move.l 30(sp),d4
    6e68:	|  |  |      jsr -324(a6)
    6e6c:	|  |  |      move.l d0,26(sp)
    6e70:	|  |  |      move.l 26(sp),d0
    6e74:	|  |  |      move.w d0,24(sp)
		if (!count) {
    6e78:	|  |  |  /-- bne.s 6e8c <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    6e7a:	|  |  |  |   pea 15bac <custom.c.49191367+0xe80>
    6e80:	|  |  |  |   jsr 141e2 <KPrintF>
    6e86:	|  |  |  |   addq.l #4,sp
			return FALSE;
    6e88:	|  |  |  |   clr.w d0
    6e8a:	+--|--|--|-- bra.s 6ea4 <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    6e8c:	|  |  |  \-> addq.l #1,100(sp)
    6e90:	|  |  \----> move.l 100(sp),d0
    6e94:	|  |         cmp.l 72(sp),d0
    6e98:	|  \-------- blt.w 6cc2 <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    6e9c:	|            jsr 4ba4 <finishAccess>

	return TRUE;
    6ea2:	|            moveq #1,d0
}
    6ea4:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6ea8:	             lea 84(sp),sp
    6eac:	             rts

00006eae <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    6eae:	subq.l #8,sp
    6eb0:	move.l a2,-(sp)
    6eb2:	move.l 24(sp),d0
    6eb6:	move.w d0,d0
    6eb8:	move.w d0,6(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    6ebc:	movea.l 20(sp),a0
    6ec0:	move.l (a0),d0
    6ec2:	move.l d0,-(sp)
    6ec4:	jsr 147fa <__fixunssfsi>
    6eca:	addq.l #4,sp
    6ecc:	move.l d0,d0
    6ece:	movea.l 16(sp),a0
    6ed2:	move.l 8(a0),d1
    6ed6:	move.l d1,d1
    6ed8:	movea.w d0,a0
    6eda:	suba.w d1,a0
    6edc:	move.w a0,10(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    6ee0:	movea.l 20(sp),a0
    6ee4:	move.l 4(a0),d0
    6ee8:	move.l d0,-(sp)
    6eea:	jsr 147fa <__fixunssfsi>
    6ef0:	addq.l #4,sp
    6ef2:	move.l d0,d0
    6ef4:	movea.l 16(sp),a0
    6ef8:	move.l 12(a0),d1
    6efc:	move.l d1,d1
    6efe:	movea.w d0,a0
    6f00:	suba.w d1,a0
    6f02:	move.w a0,8(sp)

	CstScaleSprite( single, (WORD) thisPerson->x, (WORD) thisPerson->y);
    6f06:	movea.l 20(sp),a0
    6f0a:	move.l 4(a0),d0
    6f0e:	move.l d0,-(sp)
    6f10:	jsr 14432 <__fixsfsi>
    6f16:	addq.l #4,sp
    6f18:	move.l d0,d0
    6f1a:	movea.w d0,a2
    6f1c:	movea.l 20(sp),a0
    6f20:	move.l (a0),d0
    6f22:	move.l d0,-(sp)
    6f24:	jsr 14432 <__fixsfsi>
    6f2a:	addq.l #4,sp
    6f2c:	move.l d0,d0
    6f2e:	movea.w d0,a0
    6f30:	move.l a2,-(sp)
    6f32:	move.l a0,-(sp)
    6f34:	move.l 24(sp),-(sp)
    6f38:	jsr 15b4 <CstScaleSprite>
    6f3e:	lea 12(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    6f42:	nop
    6f44:	movea.l (sp)+,a2
    6f46:	addq.l #8,sp
    6f48:	rts

00006f4a <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    6f4a:	    move.l 4(sp),d0
    6f4e:	/-- bpl.s 6f52 <TF_abs+0x8>
    6f50:	|   neg.l d0
}
    6f52:	\-> rts

00006f54 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    6f54:	             lea -28(sp),sp
    6f58:	             move.l a6,-(sp)
    6f5a:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6f5c:	             moveq #120,d0
    6f5e:	             move.l d0,28(sp)
    6f62:	             clr.l 24(sp)
    6f66:	             move.l 1938c <SysBase>,d0
    6f6c:	             movea.l d0,a6
    6f6e:	             move.l 28(sp),d0
    6f72:	             move.l 24(sp),d1
    6f76:	             jsr -684(a6)
    6f7a:	             move.l d0,20(sp)
    6f7e:	             move.l 20(sp),d0
    6f82:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    6f86:	         /-- bne.s 6f8e <addPerson+0x3a>
    6f88:	         |   clr.w d0
    6f8a:	/--------|-- bra.w 71be <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    6f8e:	|        \-> move.l 48(sp),-(sp)
    6f92:	|            jsr b0c0 <loadObjectType>
    6f98:	|            addq.l #4,sp
    6f9a:	|            movea.l 16(sp),a0
    6f9e:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    6fa2:	|            movea.l 16(sp),a0
    6fa6:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    6fae:	|            movea.l 16(sp),a0
    6fb2:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    6fb6:	|            movea.l 16(sp),a0
    6fba:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    6fbe:	|            move.l 44(sp),-(sp)
    6fc2:	|            jsr 1449a <__floatsisf>
    6fc8:	|            addq.l #4,sp
    6fca:	|            move.l d0,d2
    6fcc:	|            move.l 40(sp),-(sp)
    6fd0:	|            jsr 1449a <__floatsisf>
    6fd6:	|            addq.l #4,sp
    6fd8:	|            move.l d2,-(sp)
    6fda:	|            move.l d0,-(sp)
    6fdc:	|            move.l 24(sp),-(sp)
    6fe0:	|            jsr 89cc <moveAndScale>
    6fe6:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6fea:	|            movea.l 16(sp),a0
    6fee:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    6ff2:	|            movea.l 16(sp),a0
    6ff6:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6ffc:	|            movea.l 16(sp),a0
    7000:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    7006:	|            movea.l 16(sp),a0
    700a:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    700e:	|            movea.l 16(sp),a0
    7012:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    7016:	|            movea.l 16(sp),a0
    701a:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    7020:	|            movea.l 16(sp),a0
    7024:	|            clr.l 94(a0)
    newPerson->angle = 180;
    7028:	|            movea.l 16(sp),a0
    702c:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    7034:	|            movea.l 16(sp),a0
    7038:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    7040:	|            movea.l 16(sp),a0
    7044:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    7048:	|            movea.l 16(sp),a0
    704c:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    7050:	|            movea.l 16(sp),a0
    7054:	|            movea.l 102(a0),a0
    7058:	|            move.l 24(a0),d0
    705c:	|            movea.l 16(sp),a0
    7060:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    7064:	|            movea.l 16(sp),a0
    7068:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    706c:	|            movea.l 16(sp),a0
    7070:	|            movea.l 102(a0),a0
    7074:	|            move.l 32(a0),d0
    7078:	|            movea.l 16(sp),a0
    707c:	|            move.l d0,110(a0)
    newPerson->r = 0;
    7080:	|            movea.l 16(sp),a0
    7084:	|            clr.b 114(a0)
    newPerson->g = 0;
    7088:	|            movea.l 16(sp),a0
    708c:	|            clr.b 115(a0)
    newPerson->b = 0;
    7090:	|            movea.l 16(sp),a0
    7094:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    7098:	|            movea.l 16(sp),a0
    709c:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    70a0:	|            movea.l 16(sp),a0
    70a4:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    70a8:	|            movea.l 16(sp),a0
    70ac:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    70b2:	|            clr.l -(sp)
    70b4:	|            move.l 20(sp),-(sp)
    70b8:	|            jsr 6092 <setFrames>
    70be:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    70c0:	|            movea.l 52(sp),a0
    70c4:	|            movea.l (a0),a0
    70c6:	|            movea.l (a0),a0
    70c8:	|            movea.l 4(a0),a0
    70cc:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    70d0:	|     /----- bpl.s 70da <addPerson+0x186>
    70d2:	|     |      move.l 12(sp),d0
    70d6:	|     |      neg.l d0
    70d8:	|     |  /-- bra.s 70dc <addPerson+0x188>
    70da:	|     \--|-> moveq #1,d0
    70dc:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    70e0:	|            movea.l 52(sp),a0
    70e4:	|            movea.l (a0),a0
    70e6:	|            movea.l (a0),a0
    70e8:	|            movea.l (a0),a0
    70ea:	|            move.l 8(a0),d0
    70ee:	|            cmp.l 8(sp),d0
    70f2:	|     /----- bgt.s 7124 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    70f4:	|     |      tst.l 12(sp)
    70f8:	|     |  /-- bge.s 7106 <addPerson+0x1b2>
            newPerson->height = 5;
    70fa:	|     |  |   movea.l 16(sp),a0
    70fe:	|     |  |   moveq #5,d1
    7100:	|     |  |   move.l d1,8(a0)
    7104:	|  /--|--|-- bra.s 7150 <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    7106:	|  |  |  \-> movea.l 52(sp),a0
    710a:	|  |  |      movea.l (a0),a0
    710c:	|  |  |      movea.l (a0),a0
    710e:	|  |  |      movea.l (a0),a0
    7110:	|  |  |      movea.l 16(a0),a0
    7114:	|  |  |      move.l 12(a0),d0
    7118:	|  |  |      addq.l #5,d0
    711a:	|  |  |      movea.l 16(sp),a0
    711e:	|  |  |      move.l d0,8(a0)
    7122:	|  +--|----- bra.s 7150 <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    7124:	|  |  \----> movea.l 52(sp),a0
    7128:	|  |         movea.l (a0),a0
    712a:	|  |         movea.l (a0),a0
    712c:	|  |         movea.l (a0),a0
    712e:	|  |         movea.l 16(a0),a0
    7132:	|  |         move.l 8(sp),d1
    7136:	|  |         move.l d1,d0
    7138:	|  |         lsl.l #3,d0
    713a:	|  |         sub.l d1,d0
    713c:	|  |         add.l d0,d0
    713e:	|  |         add.l d0,d0
    7140:	|  |         adda.l d0,a0
    7142:	|  |         move.l 12(a0),d0
    7146:	|  |         addq.l #5,d0
    7148:	|  |         movea.l 16(sp),a0
    714c:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    7150:	|  \-------> move.l #103492,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7158:	|        /-- bra.s 7168 <addPerson+0x214>
        changethat = &((*changethat)->next);
    715a:	|     /--|-> movea.l 32(sp),a0
    715e:	|     |  |   move.l (a0),d0
    7160:	|     |  |   moveq #24,d1
    7162:	|     |  |   add.l d0,d1
    7164:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7168:	|     |  \-> movea.l 32(sp),a0
    716c:	|     |      move.l (a0),d0
    716e:	|     |  /-- beq.s 7196 <addPerson+0x242>
    7170:	|     |  |   movea.l 32(sp),a0
    7174:	|     |  |   movea.l (a0),a0
    7176:	|     |  |   move.l 4(a0),d2
    717a:	|     |  |   move.l 44(sp),-(sp)
    717e:	|     |  |   jsr 1449a <__floatsisf>
    7184:	|     |  |   addq.l #4,sp
    7186:	|     |  |   move.l d0,-(sp)
    7188:	|     |  |   move.l d2,-(sp)
    718a:	|     |  |   jsr 146c0 <__ltsf2>
    7190:	|     |  |   addq.l #8,sp
    7192:	|     |  |   tst.l d0
    7194:	|     \--|-- blt.s 715a <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    7196:	|        \-> movea.l 32(sp),a0
    719a:	|            move.l (a0),d0
    719c:	|            movea.l 16(sp),a0
    71a0:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    71a4:	|            movea.l 32(sp),a0
    71a8:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    71ac:	|            movea.l 16(sp),a0
    71b0:	|            move.l 102(a0),d0
    71b4:	|            sne d0
    71b6:	|            neg.b d0
    71b8:	|            move.b d0,d0
    71ba:	|            andi.w #255,d0
}
    71be:	\----------> move.l (sp)+,d2
    71c0:	             movea.l (sp)+,a6
    71c2:	             lea 28(sp),sp
    71c6:	             rts

000071c8 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    71c8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    71ca:	       move.l 8(sp),-(sp)
    71ce:	       jsr 8284 <findPerson>
    71d4:	       addq.l #4,sp
    71d6:	       move.l d0,(sp)
    if (moveMe) {
    71d8:	/----- beq.s 720c <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    71da:	|      movea.l (sp),a0
    71dc:	|      move.l 56(a0),d0
    71e0:	|  /-- beq.s 71f2 <animatePerson+0x2a>
    71e2:	|  |   movea.l (sp),a0
    71e4:	|  |   move.l 56(a0),d0
    71e8:	|  |   move.l d0,-(sp)
    71ea:	|  |   jsr 290c <abortFunction>
    71f0:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    71f2:	|  \-> movea.l (sp),a0
    71f4:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    71f8:	|      movea.l (sp),a0
    71fa:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    71fe:	|      movea.l (sp),a0
    7200:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    7204:	|      movea.l (sp),a0
    7206:	|      move.l 12(sp),60(a0)
    }
}
    720c:	\----> nop
    720e:	       addq.l #4,sp
    7210:	       rts

00007212 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    7212:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    7214:	       move.l 8(sp),-(sp)
    7218:	       jsr 8284 <findPerson>
    721e:	       addq.l #4,sp
    7220:	       move.l d0,(sp)
    if (moveMe) {
    7222:	/----- beq.s 7264 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    7224:	|      movea.l (sp),a0
    7226:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    722a:	|      movea.l (sp),a0
    722c:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    7232:	|      move.l (sp),-(sp)
    7234:	|      jsr 8b16 <rethinkAngle>
    723a:	|      addq.l #4,sp
        if (moveMe->walking) {
    723c:	|      movea.l (sp),a0
    723e:	|      move.w 52(a0),d0
    7242:	|  /-- beq.s 7256 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    7244:	|  |   pea 1 <_start+0x1>
    7248:	|  |   move.l 4(sp),-(sp)
    724c:	|  |   jsr 6092 <setFrames>
    7252:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    7254:	+--|-- bra.s 7264 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    7256:	|  \-> clr.l -(sp)
    7258:	|      move.l 4(sp),-(sp)
    725c:	|      jsr 6092 <setFrames>
    7262:	|      addq.l #8,sp
}
    7264:	\----> nop
    7266:	       addq.l #4,sp
    7268:	       rts

0000726a <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    726a:	             lea -36(sp),sp
    726e:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    7270:	             movea.l 44(sp),a0
    7274:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    727a:	             moveq #12,d0
    727c:	             move.l d0,28(sp)
    7280:	             clr.l 24(sp)
    7284:	             move.l 1938c <SysBase>,d0
    728a:	             movea.l d0,a6
    728c:	             move.l 28(sp),d0
    7290:	             move.l 24(sp),d1
    7294:	             jsr -684(a6)
    7298:	             move.l d0,20(sp)
    729c:	             move.l 20(sp),d0
    72a0:	             move.l d0,16(sp)
	if (!(newAnim)) {
    72a4:	         /-- bne.s 72ba <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    72a6:	         |   pea 15bdf <custom.c.49191367+0xeb3>
    72ac:	         |   jsr 141e2 <KPrintF>
    72b2:	         |   addq.l #4,sp
		return NULL;
    72b4:	         |   moveq #0,d0
    72b6:	/--------|-- bra.w 73fc <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    72ba:	|        \-> movea.l 44(sp),a0
    72be:	|            move.l (a0),d0
    72c0:	|            movea.l 16(sp),a0
    72c4:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    72c6:	|            movea.l 16(sp),a0
    72ca:	|            move.l 32(sp),8(a0)

	if (num) {
    72d0:	|  /-------- beq.w 73f0 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    72d4:	|  |         move.l 32(sp),d1
    72d8:	|  |         move.l d1,d0
    72da:	|  |         add.l d0,d0
    72dc:	|  |         add.l d1,d0
    72de:	|  |         add.l d0,d0
    72e0:	|  |         add.l d0,d0
    72e2:	|  |         move.l d0,12(sp)
    72e6:	|  |         clr.l 8(sp)
    72ea:	|  |         move.l 1938c <SysBase>,d0
    72f0:	|  |         movea.l d0,a6
    72f2:	|  |         move.l 12(sp),d0
    72f6:	|  |         move.l 8(sp),d1
    72fa:	|  |         jsr -684(a6)
    72fe:	|  |         move.l d0,4(sp)
    7302:	|  |         move.l 4(sp),d0
    7306:	|  |         movea.l 16(sp),a0
    730a:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    730e:	|  |         movea.l 16(sp),a0
    7312:	|  |         move.l 4(a0),d0
    7316:	|  |     /-- bne.s 732c <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    7318:	|  |     |   pea 15bdf <custom.c.49191367+0xeb3>
    731e:	|  |     |   jsr 141e2 <KPrintF>
    7324:	|  |     |   addq.l #4,sp
			return NULL;
    7326:	|  |     |   moveq #0,d0
    7328:	+--|-----|-- bra.w 73fc <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    732c:	|  |     \-> clr.l 36(sp)
    7330:	|  |     /-- bra.w 73e2 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    7334:	|  |  /--|-> movea.l 44(sp),a0
    7338:	|  |  |  |   movea.l 4(a0),a0
    733c:	|  |  |  |   move.l 36(sp),d1
    7340:	|  |  |  |   move.l d1,d0
    7342:	|  |  |  |   add.l d0,d0
    7344:	|  |  |  |   add.l d1,d0
    7346:	|  |  |  |   add.l d0,d0
    7348:	|  |  |  |   add.l d0,d0
    734a:	|  |  |  |   lea (0,a0,d0.l),a1
    734e:	|  |  |  |   movea.l 16(sp),a0
    7352:	|  |  |  |   movea.l 4(a0),a0
    7356:	|  |  |  |   move.l 36(sp),d1
    735a:	|  |  |  |   move.l d1,d0
    735c:	|  |  |  |   add.l d0,d0
    735e:	|  |  |  |   add.l d1,d0
    7360:	|  |  |  |   add.l d0,d0
    7362:	|  |  |  |   add.l d0,d0
    7364:	|  |  |  |   adda.l d0,a0
    7366:	|  |  |  |   move.l (a1),d0
    7368:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    736a:	|  |  |  |   movea.l 44(sp),a0
    736e:	|  |  |  |   movea.l 4(a0),a0
    7372:	|  |  |  |   move.l 36(sp),d1
    7376:	|  |  |  |   move.l d1,d0
    7378:	|  |  |  |   add.l d0,d0
    737a:	|  |  |  |   add.l d1,d0
    737c:	|  |  |  |   add.l d0,d0
    737e:	|  |  |  |   add.l d0,d0
    7380:	|  |  |  |   lea (0,a0,d0.l),a1
    7384:	|  |  |  |   movea.l 16(sp),a0
    7388:	|  |  |  |   movea.l 4(a0),a0
    738c:	|  |  |  |   move.l 36(sp),d1
    7390:	|  |  |  |   move.l d1,d0
    7392:	|  |  |  |   add.l d0,d0
    7394:	|  |  |  |   add.l d1,d0
    7396:	|  |  |  |   add.l d0,d0
    7398:	|  |  |  |   add.l d0,d0
    739a:	|  |  |  |   adda.l d0,a0
    739c:	|  |  |  |   move.l 4(a1),d0
    73a0:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    73a4:	|  |  |  |   movea.l 44(sp),a0
    73a8:	|  |  |  |   movea.l 4(a0),a0
    73ac:	|  |  |  |   move.l 36(sp),d1
    73b0:	|  |  |  |   move.l d1,d0
    73b2:	|  |  |  |   add.l d0,d0
    73b4:	|  |  |  |   add.l d1,d0
    73b6:	|  |  |  |   add.l d0,d0
    73b8:	|  |  |  |   add.l d0,d0
    73ba:	|  |  |  |   lea (0,a0,d0.l),a1
    73be:	|  |  |  |   movea.l 16(sp),a0
    73c2:	|  |  |  |   movea.l 4(a0),a0
    73c6:	|  |  |  |   move.l 36(sp),d1
    73ca:	|  |  |  |   move.l d1,d0
    73cc:	|  |  |  |   add.l d0,d0
    73ce:	|  |  |  |   add.l d1,d0
    73d0:	|  |  |  |   add.l d0,d0
    73d2:	|  |  |  |   add.l d0,d0
    73d4:	|  |  |  |   adda.l d0,a0
    73d6:	|  |  |  |   move.l 8(a1),d0
    73da:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    73de:	|  |  |  |   addq.l #1,36(sp)
    73e2:	|  |  |  \-> move.l 36(sp),d0
    73e6:	|  |  |      cmp.l 32(sp),d0
    73ea:	|  |  \----- blt.w 7334 <copyAnim+0xca>
    73ee:	|  |     /-- bra.s 73f8 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    73f0:	|  \-----|-> movea.l 16(sp),a0
    73f4:	|        |   clr.l 4(a0)
	}

	return newAnim;
    73f8:	|        \-> move.l 16(sp),d0
}
    73fc:	\----------> movea.l (sp)+,a6
    73fe:	             lea 36(sp),sp
    7402:	             rts

00007404 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    7404:	                lea -44(sp),sp
    7408:	                move.l a6,-(sp)
    740a:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    740c:	                moveq #12,d0
    740e:	                move.l d0,40(sp)
    7412:	                clr.l 36(sp)
    7416:	                move.l 1938c <SysBase>,d0
    741c:	                movea.l d0,a6
    741e:	                move.l 40(sp),d0
    7422:	                move.l 36(sp),d1
    7426:	                jsr -684(a6)
    742a:	                move.l d0,32(sp)
    742e:	                move.l 32(sp),d0
    7432:	                move.l d0,28(sp)
	if( !newP) {
    7436:	            /-- bne.s 744c <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7438:	            |   pea 15c00 <custom.c.49191367+0xed4>
    743e:	            |   jsr 141e2 <KPrintF>
    7444:	            |   addq.l #4,sp
		return NULL;
    7446:	            |   moveq #0,d0
    7448:	/-----------|-- bra.w 761c <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    744c:	|           \-> movea.l 28(sp),a0
    7450:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    7456:	|               move.l 56(sp),d1
    745a:	|               move.l d1,d0
    745c:	|               add.l d0,d0
    745e:	|               add.l d1,d0
    7460:	|               add.l d0,d0
    7462:	|               add.l d0,d0
    7464:	|               move.l d0,24(sp)
    7468:	|               clr.l 20(sp)
    746c:	|               move.l 1938c <SysBase>,d0
    7472:	|               movea.l d0,a6
    7474:	|               move.l 24(sp),d0
    7478:	|               move.l 20(sp),d1
    747c:	|               jsr -684(a6)
    7480:	|               move.l d0,16(sp)
    7484:	|               move.l 16(sp),d0
    7488:	|               movea.l 28(sp),a0
    748c:	|               move.l d0,4(a0)
	if( !newP->frames) {
    7490:	|               movea.l 28(sp),a0
    7494:	|               move.l 4(a0),d0
    7498:	|           /-- bne.s 74ae <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    749a:	|           |   pea 15c00 <custom.c.49191367+0xed4>
    74a0:	|           |   jsr 141e2 <KPrintF>
    74a6:	|           |   addq.l #4,sp
		return NULL;
    74a8:	|           |   moveq #0,d0
    74aa:	+-----------|-- bra.w 761c <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    74ae:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    74b4:	|               movea.l 60(sp),a0
    74b8:	|               move.l (a0),44(sp)
	while (a) {
    74bc:	|     /-------- bra.w 7610 <createPersonaAnim+0x20c>
		a --;
    74c0:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    74c4:	|  |  |         movea.l 28(sp),a0
    74c8:	|  |  |         movea.l 4(a0),a0
    74cc:	|  |  |         move.l 48(sp),d1
    74d0:	|  |  |         move.l d1,d0
    74d2:	|  |  |         add.l d0,d0
    74d4:	|  |  |         add.l d1,d0
    74d6:	|  |  |         add.l d0,d0
    74d8:	|  |  |         add.l d0,d0
    74da:	|  |  |         adda.l d0,a0
    74dc:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    74e0:	|  |  |         movea.l 44(sp),a0
    74e4:	|  |  |         move.l (a0),d0
    74e6:	|  |  |         moveq #5,d1
    74e8:	|  |  |         cmp.l d0,d1
    74ea:	|  |  |     /-- bne.s 7516 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    74ec:	|  |  |     |   movea.l 28(sp),a0
    74f0:	|  |  |     |   movea.l 4(a0),a0
    74f4:	|  |  |     |   move.l 48(sp),d1
    74f8:	|  |  |     |   move.l d1,d0
    74fa:	|  |  |     |   add.l d0,d0
    74fc:	|  |  |     |   add.l d1,d0
    74fe:	|  |  |     |   add.l d0,d0
    7500:	|  |  |     |   add.l d0,d0
    7502:	|  |  |     |   lea (0,a0,d0.l),a1
    7506:	|  |  |     |   movea.l 44(sp),a0
    750a:	|  |  |     |   move.l 4(a0),d0
    750e:	|  |  |     |   move.l d0,8(a1)
    7512:	|  |  |  /--|-- bra.w 75be <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    7516:	|  |  |  |  \-> movea.l 44(sp),a0
    751a:	|  |  |  |      move.l (a0),d0
    751c:	|  |  |  |      moveq #2,d1
    751e:	|  |  |  |      cmp.l d0,d1
    7520:	|  |  |  |  /-- bne.s 754c <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    7522:	|  |  |  |  |   movea.l 44(sp),a0
    7526:	|  |  |  |  |   move.l 4(a0),d2
    752a:	|  |  |  |  |   movea.l 28(sp),a0
    752e:	|  |  |  |  |   movea.l 4(a0),a0
    7532:	|  |  |  |  |   move.l 48(sp),d1
    7536:	|  |  |  |  |   move.l d1,d0
    7538:	|  |  |  |  |   add.l d0,d0
    753a:	|  |  |  |  |   add.l d1,d0
    753c:	|  |  |  |  |   add.l d0,d0
    753e:	|  |  |  |  |   add.l d0,d0
    7540:	|  |  |  |  |   adda.l d0,a0
    7542:	|  |  |  |  |   move.l d2,d0
    7544:	|  |  |  |  |   neg.l d0
    7546:	|  |  |  |  |   move.l d0,8(a0)
    754a:	|  |  |  +--|-- bra.s 75be <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    754c:	|  |  |  |  \-> movea.l 44(sp),a0
    7550:	|  |  |  |      move.l (a0),d0
    7552:	|  |  |  |      moveq #6,d1
    7554:	|  |  |  |      cmp.l d0,d1
    7556:	|  |  |  |  /-- bne.s 759e <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    7558:	|  |  |  |  |   movea.l 44(sp),a0
    755c:	|  |  |  |  |   movea.l 4(a0),a0
    7560:	|  |  |  |  |   move.l (a0),d0
    7562:	|  |  |  |  |   move.l d0,-(sp)
    7564:	|  |  |  |  |   pea 1 <_start+0x1>
    7568:	|  |  |  |  |   lea 20(sp),a0
    756c:	|  |  |  |  |   move.l a0,-(sp)
    756e:	|  |  |  |  |   jsr 1219a <getValueType>
    7574:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    7578:	|  |  |  |  |   movea.l 44(sp),a0
    757c:	|  |  |  |  |   movea.l 4(a0),a0
    7580:	|  |  |  |  |   movea.l (a0),a0
    7582:	|  |  |  |  |   move.l 8(a0),d0
    7586:	|  |  |  |  |   move.l d0,-(sp)
    7588:	|  |  |  |  |   pea 1 <_start+0x1>
    758c:	|  |  |  |  |   lea 16(sp),a0
    7590:	|  |  |  |  |   move.l a0,-(sp)
    7592:	|  |  |  |  |   jsr 1219a <getValueType>
    7598:	|  |  |  |  |   lea 12(sp),sp
    759c:	|  |  |  +--|-- bra.s 75be <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    759e:	|  |  |  |  \-> move.l 44(sp),d0
    75a2:	|  |  |  |      move.l d0,-(sp)
    75a4:	|  |  |  |      pea 1 <_start+0x1>
    75a8:	|  |  |  |      lea 20(sp),a0
    75ac:	|  |  |  |      move.l a0,-(sp)
    75ae:	|  |  |  |      jsr 1219a <getValueType>
    75b4:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    75b8:	|  |  |  |      moveq #1,d0
    75ba:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    75be:	|  |  |  \----> move.l 60(sp),-(sp)
    75c2:	|  |  |         jsr 12b1e <trimStack>
    75c8:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    75ca:	|  |  |         movea.l 28(sp),a0
    75ce:	|  |  |         movea.l 4(a0),a0
    75d2:	|  |  |         move.l 48(sp),d1
    75d6:	|  |  |         move.l d1,d0
    75d8:	|  |  |         add.l d0,d0
    75da:	|  |  |         add.l d1,d0
    75dc:	|  |  |         add.l d0,d0
    75de:	|  |  |         add.l d0,d0
    75e0:	|  |  |         adda.l d0,a0
    75e2:	|  |  |         move.l 12(sp),d0
    75e6:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    75e8:	|  |  |         movea.l 28(sp),a0
    75ec:	|  |  |         movea.l 4(a0),a0
    75f0:	|  |  |         move.l 48(sp),d1
    75f4:	|  |  |         move.l d1,d0
    75f6:	|  |  |         add.l d0,d0
    75f8:	|  |  |         add.l d1,d0
    75fa:	|  |  |         add.l d0,d0
    75fc:	|  |  |         add.l d0,d0
    75fe:	|  |  |         adda.l d0,a0
    7600:	|  |  |         move.l 8(sp),d0
    7604:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    7608:	|  |  |         movea.l 60(sp),a0
    760c:	|  |  |         move.l (a0),44(sp)
	while (a) {
    7610:	|  |  \-------> tst.l 48(sp)
    7614:	|  \----------- bne.w 74c0 <createPersonaAnim+0xbc>
	}

	return newP;
    7618:	|               move.l 28(sp),d0
}
    761c:	\-------------> move.l (sp)+,d2
    761e:	                movea.l (sp)+,a6
    7620:	                lea 44(sp),sp
    7624:	                rts

00007626 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    7626:	       subq.l #8,sp
    7628:	       move.l a6,-(sp)

	if (orig)
    762a:	       tst.l 16(sp)
    762e:	/----- beq.s 766e <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    7630:	|      movea.l 16(sp),a0
    7634:	|      move.l 8(a0),d0
    7638:	|  /-- beq.s 7654 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    763a:	|  |   movea.l 16(sp),a0
    763e:	|  |   move.l 4(a0),8(sp)
    7644:	|  |   move.l 1938c <SysBase>,d0
    764a:	|  |   movea.l d0,a6
    764c:	|  |   movea.l 8(sp),a1
    7650:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    7654:	|  \-> move.l 16(sp),4(sp)
    765a:	|      move.l 1938c <SysBase>,d0
    7660:	|      movea.l d0,a6
    7662:	|      movea.l 4(sp),a1
    7666:	|      jsr -690(a6)
		orig = NULL;
    766a:	|      clr.l 16(sp)
	}
}
    766e:	\----> nop
    7670:	       movea.l (sp)+,a6
    7672:	       addq.l #8,sp
    7674:	       rts

00007676 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    7676:	          lea -124(sp),sp
    767a:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    767e:	          movea.l 152(sp),a0
    7682:	          move.l 44(a0),d1
    7686:	          movea.l 152(sp),a0
    768a:	          move.l 48(a0),d0
    768e:	          cmp.l d1,d0
    7690:	      /-- bne.s 76c0 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    7692:	      |   movea.l 152(sp),a0
    7696:	      |   moveq #-1,d0
    7698:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    769c:	      |   movea.l 152(sp),a0
    76a0:	      |   move.l 28(a0),d0
    76a4:	      |   movea.l 152(sp),a0
    76a8:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    76ac:	      |   movea.l 152(sp),a0
    76b0:	      |   move.l 32(a0),d0
    76b4:	      |   movea.l 152(sp),a0
    76b8:	      |   move.l d0,40(a0)
    76bc:	   /--|-- bra.w 7c26 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    76c0:	   |  \-> movea.l 194ec <currentFloor>,a0
    76c6:	   |      move.l 16(a0),d1
    76ca:	   |      movea.l 152(sp),a0
    76ce:	   |      move.l 44(a0),d0
    76d2:	   |      add.l d0,d0
    76d4:	   |      add.l d0,d0
    76d6:	   |      movea.l d1,a0
    76d8:	   |      adda.l d0,a0
    76da:	   |      move.l (a0),d1
    76dc:	   |      movea.l 152(sp),a0
    76e0:	   |      move.l 48(a0),d0
    76e4:	   |      add.l d0,d0
    76e6:	   |      add.l d0,d0
    76e8:	   |      movea.l d1,a0
    76ea:	   |      adda.l d0,a0
    76ec:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    76f0:	   |      moveq #-1,d0
    76f2:	   |      cmp.l 144(sp),d0
    76f6:	   |  /-- bne.s 76fe <doBorderStuff+0x88>
    76f8:	   |  |   clr.w d0
    76fa:	/--|--|-- bra.w 7d26 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    76fe:	|  |  \-> movea.l 194ec <currentFloor>,a0
    7704:	|  |      move.l 12(a0),d1
    7708:	|  |      move.l 144(sp),d0
    770c:	|  |      lsl.l #3,d0
    770e:	|  |      add.l d0,d1
    7710:	|  |      movea.l 194ec <currentFloor>,a0
    7716:	|  |      movea.l 12(a0),a1
    771a:	|  |      movea.l 152(sp),a0
    771e:	|  |      move.l 44(a0),d0
    7722:	|  |      lsl.l #3,d0
    7724:	|  |      add.l a1,d0
    7726:	|  |      lea 40(sp),a0
    772a:	|  |      move.l a0,-(sp)
    772c:	|  |      lea 48(sp),a0
    7730:	|  |      move.l a0,-(sp)
    7732:	|  |      move.l d1,-(sp)
    7734:	|  |      move.l d0,-(sp)
    7736:	|  |      jsr 13464 <getMatchingCorners>
    773c:	|  |      lea 16(sp),sp
    7740:	|  |      tst.w d0
    7742:	|  |  /-- bne.s 7758 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    7744:	|  |  |   pea 15c2a <custom.c.49191367+0xefe>
    774a:	|  |  |   jsr 141e2 <KPrintF>
    7750:	|  |  |   addq.l #4,sp
            return FALSE;
    7752:	|  |  |   clr.w d0
    7754:	+--|--|-- bra.w 7d26 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    7758:	|  |  \-> movea.l 152(sp),a0
    775c:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    7762:	|  |      movea.l 152(sp),a0
    7766:	|  |      move.l (a0),d0
    7768:	|  |      move.l d0,-(sp)
    776a:	|  |      jsr 14432 <__fixsfsi>
    7770:	|  |      addq.l #4,sp
    7772:	|  |      move.l d0,140(sp)
    7776:	|  |      movea.l 152(sp),a0
    777a:	|  |      move.l 4(a0),d0
    777e:	|  |      move.l d0,-(sp)
    7780:	|  |      jsr 14432 <__fixsfsi>
    7786:	|  |      addq.l #4,sp
    7788:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    778c:	|  |      movea.l 152(sp),a0
    7790:	|  |      move.l 28(a0),132(sp)
    7796:	|  |      movea.l 152(sp),a0
    779a:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    77a0:	|  |      movea.l 194ec <currentFloor>,a0
    77a6:	|  |      move.l 4(a0),d1
    77aa:	|  |      move.l 44(sp),d0
    77ae:	|  |      lsl.l #3,d0
    77b0:	|  |      movea.l d1,a0
    77b2:	|  |      adda.l d0,a0
    77b4:	|  |      move.l (a0),124(sp)
    77b8:	|  |      movea.l 194ec <currentFloor>,a0
    77be:	|  |      move.l 4(a0),d1
    77c2:	|  |      move.l 44(sp),d0
    77c6:	|  |      lsl.l #3,d0
    77c8:	|  |      movea.l d1,a0
    77ca:	|  |      adda.l d0,a0
    77cc:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    77d2:	|  |      movea.l 194ec <currentFloor>,a0
    77d8:	|  |      move.l 4(a0),d1
    77dc:	|  |      move.l 40(sp),d0
    77e0:	|  |      lsl.l #3,d0
    77e2:	|  |      movea.l d1,a0
    77e4:	|  |      adda.l d0,a0
    77e6:	|  |      move.l (a0),116(sp)
    77ea:	|  |      movea.l 194ec <currentFloor>,a0
    77f0:	|  |      move.l 4(a0),d1
    77f4:	|  |      move.l 40(sp),d0
    77f8:	|  |      lsl.l #3,d0
    77fa:	|  |      movea.l d1,a0
    77fc:	|  |      adda.l d0,a0
    77fe:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    7804:	|  |      move.l 140(sp),d0
    7808:	|  |      sub.l 132(sp),d0
    780c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    7810:	|  |      move.l 136(sp),d0
    7814:	|  |      sub.l 128(sp),d0
    7818:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    781c:	|  |      move.l 116(sp),d0
    7820:	|  |      sub.l 124(sp),d0
    7824:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    7828:	|  |      move.l 112(sp),d0
    782c:	|  |      sub.l 120(sp),d0
    7830:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    7834:	|  |      move.l 124(sp),d0
    7838:	|  |      sub.l 140(sp),d0
    783c:	|  |      move.l 104(sp),-(sp)
    7840:	|  |      move.l d0,-(sp)
    7842:	|  |      jsr 14a1c <__mulsi3>
    7848:	|  |      addq.l #8,sp
    784a:	|  |      move.l d0,d2
    784c:	|  |      move.l 120(sp),d0
    7850:	|  |      sub.l 136(sp),d0
    7854:	|  |      move.l 108(sp),-(sp)
    7858:	|  |      move.l d0,-(sp)
    785a:	|  |      jsr 14a1c <__mulsi3>
    7860:	|  |      addq.l #8,sp
    7862:	|  |      move.l d2,d1
    7864:	|  |      sub.l d0,d1
    7866:	|  |      move.l d1,-(sp)
    7868:	|  |      jsr 1445a <__floatsidf>
    786e:	|  |      addq.l #4,sp
    7870:	|  |      move.l d0,32(sp)
    7874:	|  |      move.l d1,36(sp)
    7878:	|  |      move.l 32(sp),88(sp)
    787e:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    7884:	|  |      move.l 96(sp),-(sp)
    7888:	|  |      move.l 112(sp),-(sp)
    788c:	|  |      jsr 14a1c <__mulsi3>
    7892:	|  |      addq.l #8,sp
    7894:	|  |      move.l d0,d2
    7896:	|  |      move.l 100(sp),-(sp)
    789a:	|  |      move.l 108(sp),-(sp)
    789e:	|  |      jsr 14a1c <__mulsi3>
    78a4:	|  |      addq.l #8,sp
    78a6:	|  |      move.l d2,d1
    78a8:	|  |      sub.l d0,d1
    78aa:	|  |      move.l d1,-(sp)
    78ac:	|  |      jsr 1445a <__floatsidf>
    78b2:	|  |      addq.l #4,sp
    78b4:	|  |      move.l d1,-(sp)
    78b6:	|  |      move.l d0,-(sp)
    78b8:	|  |      move.l 100(sp),-(sp)
    78bc:	|  |      move.l 100(sp),-(sp)
    78c0:	|  |      jsr 142e4 <__divdf3>
    78c6:	|  |      lea 16(sp),sp
    78ca:	|  |      move.l d0,24(sp)
    78ce:	|  |      move.l d1,28(sp)
    78d2:	|  |      move.l 24(sp),88(sp)
    78d8:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    78de:	|  |      clr.l -(sp)
    78e0:	|  |      clr.l -(sp)
    78e2:	|  |      move.l 100(sp),-(sp)
    78e6:	|  |      move.l 100(sp),-(sp)
    78ea:	|  |      jsr 145b8 <__gtdf2>
    78f0:	|  |      lea 16(sp),sp
    78f4:	|  |      tst.l d0
    78f6:	|  |  /-- ble.w 79ce <doBorderStuff+0x358>
    78fa:	|  |  |   clr.l -(sp)
    78fc:	|  |  |   move.l #1072693248,-(sp)
    7902:	|  |  |   move.l 100(sp),-(sp)
    7906:	|  |  |   move.l 100(sp),-(sp)
    790a:	|  |  |   jsr 14672 <__ltdf2>
    7910:	|  |  |   lea 16(sp),sp
    7914:	|  |  |   tst.l d0
    7916:	|  |  +-- bge.w 79ce <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    791a:	|  |  |   move.l 124(sp),-(sp)
    791e:	|  |  |   jsr 1445a <__floatsidf>
    7924:	|  |  |   addq.l #4,sp
    7926:	|  |  |   move.l d0,d2
    7928:	|  |  |   move.l d1,d3
    792a:	|  |  |   move.l 100(sp),-(sp)
    792e:	|  |  |   jsr 1445a <__floatsidf>
    7934:	|  |  |   addq.l #4,sp
    7936:	|  |  |   move.l 92(sp),-(sp)
    793a:	|  |  |   move.l 92(sp),-(sp)
    793e:	|  |  |   move.l d1,-(sp)
    7940:	|  |  |   move.l d0,-(sp)
    7942:	|  |  |   jsr 144ea <__muldf3>
    7948:	|  |  |   lea 16(sp),sp
    794c:	|  |  |   move.l d1,-(sp)
    794e:	|  |  |   move.l d0,-(sp)
    7950:	|  |  |   move.l d3,-(sp)
    7952:	|  |  |   move.l d2,-(sp)
    7954:	|  |  |   jsr 14282 <__adddf3>
    795a:	|  |  |   lea 16(sp),sp
    795e:	|  |  |   move.l d1,-(sp)
    7960:	|  |  |   move.l d0,-(sp)
    7962:	|  |  |   jsr 143f2 <__fixdfsi>
    7968:	|  |  |   addq.l #8,sp
    796a:	|  |  |   movea.l 152(sp),a0
    796e:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    7972:	|  |  |   move.l 120(sp),-(sp)
    7976:	|  |  |   jsr 1445a <__floatsidf>
    797c:	|  |  |   addq.l #4,sp
    797e:	|  |  |   move.l d0,d2
    7980:	|  |  |   move.l d1,d3
    7982:	|  |  |   move.l 96(sp),-(sp)
    7986:	|  |  |   jsr 1445a <__floatsidf>
    798c:	|  |  |   addq.l #4,sp
    798e:	|  |  |   move.l 92(sp),-(sp)
    7992:	|  |  |   move.l 92(sp),-(sp)
    7996:	|  |  |   move.l d1,-(sp)
    7998:	|  |  |   move.l d0,-(sp)
    799a:	|  |  |   jsr 144ea <__muldf3>
    79a0:	|  |  |   lea 16(sp),sp
    79a4:	|  |  |   move.l d1,-(sp)
    79a6:	|  |  |   move.l d0,-(sp)
    79a8:	|  |  |   move.l d3,-(sp)
    79aa:	|  |  |   move.l d2,-(sp)
    79ac:	|  |  |   jsr 14282 <__adddf3>
    79b2:	|  |  |   lea 16(sp),sp
    79b6:	|  |  |   move.l d1,-(sp)
    79b8:	|  |  |   move.l d0,-(sp)
    79ba:	|  |  |   jsr 143f2 <__fixdfsi>
    79c0:	|  |  |   addq.l #8,sp
    79c2:	|  |  |   movea.l 152(sp),a0
    79c6:	|  |  |   move.l d0,40(a0)
    79ca:	|  +--|-- bra.w 7c26 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    79ce:	|  |  \-> move.l 140(sp),d0
    79d2:	|  |      sub.l 124(sp),d0
    79d6:	|  |      move.l d0,84(sp)
    79da:	|  |      move.l 140(sp),d0
    79de:	|  |      sub.l 116(sp),d0
    79e2:	|  |      move.l d0,80(sp)
    79e6:	|  |      move.l 132(sp),d0
    79ea:	|  |      sub.l 124(sp),d0
    79ee:	|  |      move.l d0,76(sp)
    79f2:	|  |      move.l 132(sp),d0
    79f6:	|  |      sub.l 116(sp),d0
    79fa:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    79fe:	|  |      move.l 136(sp),d0
    7a02:	|  |      sub.l 120(sp),d0
    7a06:	|  |      move.l d0,68(sp)
    7a0a:	|  |      move.l 136(sp),d0
    7a0e:	|  |      sub.l 112(sp),d0
    7a12:	|  |      move.l d0,64(sp)
    7a16:	|  |      move.l 128(sp),d0
    7a1a:	|  |      sub.l 120(sp),d0
    7a1e:	|  |      move.l d0,60(sp)
    7a22:	|  |      move.l 128(sp),d0
    7a26:	|  |      sub.l 112(sp),d0
    7a2a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    7a2e:	|  |      move.l 84(sp),-(sp)
    7a32:	|  |      move.l 88(sp),-(sp)
    7a36:	|  |      jsr 14a1c <__mulsi3>
    7a3c:	|  |      addq.l #8,sp
    7a3e:	|  |      move.l d0,84(sp)
    7a42:	|  |      move.l 80(sp),-(sp)
    7a46:	|  |      move.l 84(sp),-(sp)
    7a4a:	|  |      jsr 14a1c <__mulsi3>
    7a50:	|  |      addq.l #8,sp
    7a52:	|  |      move.l d0,80(sp)
    7a56:	|  |      move.l 76(sp),-(sp)
    7a5a:	|  |      move.l 80(sp),-(sp)
    7a5e:	|  |      jsr 14a1c <__mulsi3>
    7a64:	|  |      addq.l #8,sp
    7a66:	|  |      move.l d0,76(sp)
    7a6a:	|  |      move.l 72(sp),-(sp)
    7a6e:	|  |      move.l 76(sp),-(sp)
    7a72:	|  |      jsr 14a1c <__mulsi3>
    7a78:	|  |      addq.l #8,sp
    7a7a:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    7a7e:	|  |      move.l 68(sp),-(sp)
    7a82:	|  |      move.l 72(sp),-(sp)
    7a86:	|  |      jsr 14a1c <__mulsi3>
    7a8c:	|  |      addq.l #8,sp
    7a8e:	|  |      move.l d0,68(sp)
    7a92:	|  |      move.l 64(sp),-(sp)
    7a96:	|  |      move.l 68(sp),-(sp)
    7a9a:	|  |      jsr 14a1c <__mulsi3>
    7aa0:	|  |      addq.l #8,sp
    7aa2:	|  |      move.l d0,64(sp)
    7aa6:	|  |      move.l 60(sp),-(sp)
    7aaa:	|  |      move.l 64(sp),-(sp)
    7aae:	|  |      jsr 14a1c <__mulsi3>
    7ab4:	|  |      addq.l #8,sp
    7ab6:	|  |      move.l d0,60(sp)
    7aba:	|  |      move.l 56(sp),-(sp)
    7abe:	|  |      move.l 60(sp),-(sp)
    7ac2:	|  |      jsr 14a1c <__mulsi3>
    7ac8:	|  |      addq.l #8,sp
    7aca:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    7ace:	|  |      move.l 84(sp),-(sp)
    7ad2:	|  |      jsr 1445a <__floatsidf>
    7ad8:	|  |      addq.l #4,sp
    7ada:	|  |      move.l d0,d2
    7adc:	|  |      move.l d1,d3
    7ade:	|  |      move.l 68(sp),-(sp)
    7ae2:	|  |      jsr 1445a <__floatsidf>
    7ae8:	|  |      addq.l #4,sp
    7aea:	|  |      move.l d1,-(sp)
    7aec:	|  |      move.l d0,-(sp)
    7aee:	|  |      move.l d3,-(sp)
    7af0:	|  |      move.l d2,-(sp)
    7af2:	|  |      jsr 14282 <__adddf3>
    7af8:	|  |      lea 16(sp),sp
    7afc:	|  |      move.l d1,-(sp)
    7afe:	|  |      move.l d0,-(sp)
    7b00:	|  |      jsr 149d2 <sqrt>
    7b06:	|  |      addq.l #8,sp
    7b08:	|  |      move.l d0,d2
    7b0a:	|  |      move.l d1,d3
    7b0c:	|  |      move.l 76(sp),-(sp)
    7b10:	|  |      jsr 1445a <__floatsidf>
    7b16:	|  |      addq.l #4,sp
    7b18:	|  |      move.l d0,d4
    7b1a:	|  |      move.l d1,d5
    7b1c:	|  |      move.l 60(sp),-(sp)
    7b20:	|  |      jsr 1445a <__floatsidf>
    7b26:	|  |      addq.l #4,sp
    7b28:	|  |      move.l d1,-(sp)
    7b2a:	|  |      move.l d0,-(sp)
    7b2c:	|  |      move.l d5,-(sp)
    7b2e:	|  |      move.l d4,-(sp)
    7b30:	|  |      jsr 14282 <__adddf3>
    7b36:	|  |      lea 16(sp),sp
    7b3a:	|  |      move.l d1,-(sp)
    7b3c:	|  |      move.l d0,-(sp)
    7b3e:	|  |      jsr 149d2 <sqrt>
    7b44:	|  |      addq.l #8,sp
    7b46:	|  |      move.l d1,-(sp)
    7b48:	|  |      move.l d0,-(sp)
    7b4a:	|  |      move.l d3,-(sp)
    7b4c:	|  |      move.l d2,-(sp)
    7b4e:	|  |      jsr 14282 <__adddf3>
    7b54:	|  |      lea 16(sp),sp
    7b58:	|  |      move.l d0,d2
    7b5a:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    7b5c:	|  |      move.l 80(sp),-(sp)
    7b60:	|  |      jsr 1445a <__floatsidf>
    7b66:	|  |      addq.l #4,sp
    7b68:	|  |      move.l d0,d4
    7b6a:	|  |      move.l d1,d5
    7b6c:	|  |      move.l 64(sp),-(sp)
    7b70:	|  |      jsr 1445a <__floatsidf>
    7b76:	|  |      addq.l #4,sp
    7b78:	|  |      move.l d1,-(sp)
    7b7a:	|  |      move.l d0,-(sp)
    7b7c:	|  |      move.l d5,-(sp)
    7b7e:	|  |      move.l d4,-(sp)
    7b80:	|  |      jsr 14282 <__adddf3>
    7b86:	|  |      lea 16(sp),sp
    7b8a:	|  |      move.l d1,-(sp)
    7b8c:	|  |      move.l d0,-(sp)
    7b8e:	|  |      jsr 149d2 <sqrt>
    7b94:	|  |      addq.l #8,sp
    7b96:	|  |      move.l d0,d4
    7b98:	|  |      move.l d1,d5
    7b9a:	|  |      move.l 72(sp),-(sp)
    7b9e:	|  |      jsr 1445a <__floatsidf>
    7ba4:	|  |      addq.l #4,sp
    7ba6:	|  |      move.l d0,d6
    7ba8:	|  |      move.l d1,d7
    7baa:	|  |      move.l 56(sp),-(sp)
    7bae:	|  |      jsr 1445a <__floatsidf>
    7bb4:	|  |      addq.l #4,sp
    7bb6:	|  |      move.l d1,-(sp)
    7bb8:	|  |      move.l d0,-(sp)
    7bba:	|  |      move.l d7,-(sp)
    7bbc:	|  |      move.l d6,-(sp)
    7bbe:	|  |      jsr 14282 <__adddf3>
    7bc4:	|  |      lea 16(sp),sp
    7bc8:	|  |      move.l d1,-(sp)
    7bca:	|  |      move.l d0,-(sp)
    7bcc:	|  |      jsr 149d2 <sqrt>
    7bd2:	|  |      addq.l #8,sp
    7bd4:	|  |      move.l d1,-(sp)
    7bd6:	|  |      move.l d0,-(sp)
    7bd8:	|  |      move.l d5,-(sp)
    7bda:	|  |      move.l d4,-(sp)
    7bdc:	|  |      jsr 14282 <__adddf3>
    7be2:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    7be6:	|  |      move.l d1,-(sp)
    7be8:	|  |      move.l d0,-(sp)
    7bea:	|  |      move.l d3,-(sp)
    7bec:	|  |      move.l d2,-(sp)
    7bee:	|  |      jsr 14672 <__ltdf2>
    7bf4:	|  |      lea 16(sp),sp
    7bf8:	|  |      tst.l d0
    7bfa:	|  |  /-- bge.s 7c12 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    7bfc:	|  |  |   movea.l 152(sp),a0
    7c00:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    7c06:	|  |  |   movea.l 152(sp),a0
    7c0a:	|  |  |   move.l 120(sp),40(a0)
    7c10:	|  +--|-- bra.s 7c26 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    7c12:	|  |  \-> movea.l 152(sp),a0
    7c16:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    7c1c:	|  |      movea.l 152(sp),a0
    7c20:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    7c26:	|  \----> movea.l 152(sp),a0
    7c2a:	|         move.l 40(a0),d0
    7c2e:	|         move.l d0,-(sp)
    7c30:	|         jsr 1449a <__floatsisf>
    7c36:	|         addq.l #4,sp
    7c38:	|         move.l d0,d1
    7c3a:	|         movea.l 152(sp),a0
    7c3e:	|         move.l 4(a0),d0
    7c42:	|         move.l d0,-(sp)
    7c44:	|         move.l d1,-(sp)
    7c46:	|         jsr 1478e <__subsf3>
    7c4c:	|         addq.l #8,sp
    7c4e:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    7c52:	|         movea.l 152(sp),a0
    7c56:	|         move.l (a0),d2
    7c58:	|         movea.l 152(sp),a0
    7c5c:	|         move.l 36(a0),d0
    7c60:	|         move.l d0,-(sp)
    7c62:	|         jsr 1449a <__floatsisf>
    7c68:	|         addq.l #4,sp
    7c6a:	|         move.l d0,-(sp)
    7c6c:	|         move.l d2,-(sp)
    7c6e:	|         jsr 1478e <__subsf3>
    7c74:	|         addq.l #8,sp
    7c76:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    7c7a:	|         clr.l -(sp)
    7c7c:	|         move.l 52(sp),-(sp)
    7c80:	|         jsr 146f6 <__nesf2>
    7c86:	|         addq.l #8,sp
    7c88:	|         tst.l d0
    7c8a:	|     /-- bne.s 7c9e <doBorderStuff+0x628>
    7c8c:	|     |   clr.l -(sp)
    7c8e:	|     |   move.l 56(sp),-(sp)
    7c92:	|     |   jsr 146f6 <__nesf2>
    7c98:	|     |   addq.l #8,sp
    7c9a:	|     |   tst.l d0
    7c9c:	|  /--|-- beq.s 7d14 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    7c9e:	|  |  \-> move.l 52(sp),d0
    7ca2:	|  |      move.l d0,-(sp)
    7ca4:	|  |      move.l d0,-(sp)
    7ca6:	|  |      jsr 1424c <__addsf3>
    7cac:	|  |      addq.l #8,sp
    7cae:	|  |      move.l d0,-(sp)
    7cb0:	|  |      move.l 52(sp),-(sp)
    7cb4:	|  |      jsr 14822 <atan2f>
    7cba:	|  |      addq.l #8,sp
    7cbc:	|  |      move.l d0,-(sp)
    7cbe:	|  |      jsr 143b2 <__extendsfdf2>
    7cc4:	|  |      addq.l #4,sp
    7cc6:	|  |      move.l #-1540411785,-(sp)
    7ccc:	|  |      move.l #1078765033,-(sp)
    7cd2:	|  |      move.l d1,-(sp)
    7cd4:	|  |      move.l d0,-(sp)
    7cd6:	|  |      jsr 144ea <__muldf3>
    7cdc:	|  |      lea 16(sp),sp
    7ce0:	|  |      clr.l -(sp)
    7ce2:	|  |      move.l #1080459264,-(sp)
    7ce8:	|  |      move.l d1,-(sp)
    7cea:	|  |      move.l d0,-(sp)
    7cec:	|  |      jsr 14282 <__adddf3>
    7cf2:	|  |      lea 16(sp),sp
    7cf6:	|  |      move.l d1,-(sp)
    7cf8:	|  |      move.l d0,-(sp)
    7cfa:	|  |      jsr 143f2 <__fixdfsi>
    7d00:	|  |      addq.l #8,sp
    7d02:	|  |      movea.l 152(sp),a0
    7d06:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    7d0a:	|  |      movea.l 152(sp),a0
    7d0e:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    7d14:	|  \----> pea 1 <_start+0x1>
    7d18:	|         move.l 156(sp),-(sp)
    7d1c:	|         jsr 6092 <setFrames>
    7d22:	|         addq.l #8,sp
    return TRUE;
    7d24:	|         moveq #1,d0
}
    7d26:	\-------> movem.l (sp)+,d2-d7
    7d2a:	          lea 124(sp),sp
    7d2e:	          rts

00007d30 <drawPeople>:

void drawPeople () {
    7d30:	                lea -24(sp),sp
    7d34:	                move.l d2,-(sp)
	shufflePeople ();
    7d36:	                jsr 96f8 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    7d3c:	                move.l 19444 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    7d44:	                clr.l 20(sp)
	overRegion = NULL;
    7d48:	                clr.l 194e8 <overRegion>

	while (thisPerson) {
    7d4e:	   /----------- bra.w 8270 <drawPeople+0x540>
		if (thisPerson -> show) {
    7d52:	/--|----------> movea.l 24(sp),a0
    7d56:	|  |            move.w 92(a0),d0
    7d5a:	|  |  /-------- beq.w 8024 <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    7d5e:	|  |  |         movea.l 24(sp),a0
    7d62:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    7d68:	|  |  |         movea.l 24(sp),a0
    7d6c:	|  |  |         move.l 64(a0),d0
    7d70:	|  |  |         cmp.l 20(sp),d0
    7d74:	|  |  |  /----- beq.w 7f38 <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    7d78:	|  |  |  |      movea.l 24(sp),a0
    7d7c:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    7d82:	|  |  |  |      movea.l 24(sp),a0
    7d86:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    7d8a:	|  |  |  |      movea.l 20(sp),a0
    7d8e:	|  |  |  |      movea.l 4(a0),a0
    7d92:	|  |  |  |      move.l 4(a0),d0
    7d96:	|  |  |  |      movea.l 24(sp),a0
    7d9a:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7d9e:	|  |  |  |      movea.l 20(sp),a0
    7da2:	|  |  |  |      movea.l 4(a0),a1
    7da6:	|  |  |  |      movea.l 24(sp),a0
    7daa:	|  |  |  |      move.l 72(a0),d0
    7dae:	|  |  |  |      move.l d0,d1
    7db0:	|  |  |  |      move.l d1,d0
    7db2:	|  |  |  |      add.l d0,d0
    7db4:	|  |  |  |      add.l d1,d0
    7db6:	|  |  |  |      add.l d0,d0
    7db8:	|  |  |  |      add.l d0,d0
    7dba:	|  |  |  |      lea (0,a1,d0.l),a0
    7dbe:	|  |  |  |      move.l 8(a0),d0
    7dc2:	|  |  |  |  /-- ble.w 7e64 <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    7dc6:	|  |  |  |  |   movea.l 20(sp),a0
    7dca:	|  |  |  |  |   movea.l 4(a0),a1
    7dce:	|  |  |  |  |   movea.l 24(sp),a0
    7dd2:	|  |  |  |  |   move.l 72(a0),d0
    7dd6:	|  |  |  |  |   move.l d0,d1
    7dd8:	|  |  |  |  |   move.l d1,d0
    7dda:	|  |  |  |  |   add.l d0,d0
    7ddc:	|  |  |  |  |   add.l d1,d0
    7dde:	|  |  |  |  |   add.l d0,d0
    7de0:	|  |  |  |  |   add.l d0,d0
    7de2:	|  |  |  |  |   lea (0,a1,d0.l),a0
    7de6:	|  |  |  |  |   move.l 8(a0),d0
    7dea:	|  |  |  |  |   clr.l -(sp)
    7dec:	|  |  |  |  |   move.l d0,-(sp)
    7dee:	|  |  |  |  |   jsr aca6 <startSound>
    7df4:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    7df6:	|  |  |  |  |   movea.l 24(sp),a0
    7dfa:	|  |  |  |  |   move.l 72(a0),d0
    7dfe:	|  |  |  |  |   addq.l #1,d0
    7e00:	|  |  |  |  |   movea.l 24(sp),a0
    7e04:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7e08:	|  |  |  |  |   movea.l 24(sp),a0
    7e0c:	|  |  |  |  |   move.l 72(a0),d0
    7e10:	|  |  |  |  |   movea.l 24(sp),a0
    7e14:	|  |  |  |  |   movea.l 60(a0),a0
    7e18:	|  |  |  |  |   move.l 8(a0),d1
    7e1c:	|  |  |  |  |   move.l d1,-(sp)
    7e1e:	|  |  |  |  |   move.l d0,-(sp)
    7e20:	|  |  |  |  |   jsr 14ac8 <__modsi3>
    7e26:	|  |  |  |  |   addq.l #8,sp
    7e28:	|  |  |  |  |   movea.l 24(sp),a0
    7e2c:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7e30:	|  |  |  |  |   movea.l 24(sp),a0
    7e34:	|  |  |  |  |   movea.l 60(a0),a0
    7e38:	|  |  |  |  |   movea.l 4(a0),a1
    7e3c:	|  |  |  |  |   movea.l 24(sp),a0
    7e40:	|  |  |  |  |   move.l 72(a0),d0
    7e44:	|  |  |  |  |   move.l d0,d1
    7e46:	|  |  |  |  |   move.l d1,d0
    7e48:	|  |  |  |  |   add.l d0,d0
    7e4a:	|  |  |  |  |   add.l d1,d0
    7e4c:	|  |  |  |  |   add.l d0,d0
    7e4e:	|  |  |  |  |   add.l d0,d0
    7e50:	|  |  |  |  |   lea (0,a1,d0.l),a0
    7e54:	|  |  |  |  |   move.l 4(a0),d0
    7e58:	|  |  |  |  |   movea.l 24(sp),a0
    7e5c:	|  |  |  |  |   move.l d0,76(a0)
    7e60:	|  |  |  +--|-- bra.w 7f38 <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    7e64:	|  |  |  |  \-> movea.l 20(sp),a0
    7e68:	|  |  |  |      movea.l 4(a0),a1
    7e6c:	|  |  |  |      movea.l 24(sp),a0
    7e70:	|  |  |  |      move.l 72(a0),d0
    7e74:	|  |  |  |      move.l d0,d1
    7e76:	|  |  |  |      move.l d1,d0
    7e78:	|  |  |  |      add.l d0,d0
    7e7a:	|  |  |  |      add.l d1,d0
    7e7c:	|  |  |  |      add.l d0,d0
    7e7e:	|  |  |  |      add.l d0,d0
    7e80:	|  |  |  |      lea (0,a1,d0.l),a0
    7e84:	|  |  |  |      move.l 8(a0),d0
    7e88:	|  |  |  +----- beq.w 7f38 <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7e8c:	|  |  |  |      movea.l 1935c <noStack>,a1
    7e92:	|  |  |  |      movea.l 20(sp),a0
    7e96:	|  |  |  |      move.l 4(a0),d2
    7e9a:	|  |  |  |      movea.l 24(sp),a0
    7e9e:	|  |  |  |      move.l 72(a0),d0
    7ea2:	|  |  |  |      move.l d0,d1
    7ea4:	|  |  |  |      move.l d1,d0
    7ea6:	|  |  |  |      add.l d0,d0
    7ea8:	|  |  |  |      add.l d1,d0
    7eaa:	|  |  |  |      add.l d0,d0
    7eac:	|  |  |  |      add.l d0,d0
    7eae:	|  |  |  |      movea.l d2,a0
    7eb0:	|  |  |  |      adda.l d0,a0
    7eb2:	|  |  |  |      move.l 8(a0),d0
    7eb6:	|  |  |  |      neg.l d0
    7eb8:	|  |  |  |      pea 1 <_start+0x1>
    7ebc:	|  |  |  |      move.l a1,-(sp)
    7ebe:	|  |  |  |      clr.l -(sp)
    7ec0:	|  |  |  |      clr.l -(sp)
    7ec2:	|  |  |  |      move.l d0,-(sp)
    7ec4:	|  |  |  |      jsr 4a36 <startNewFunctionNum>
    7eca:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7ece:	|  |  |  |      movea.l 24(sp),a0
    7ed2:	|  |  |  |      move.l 72(a0),d0
    7ed6:	|  |  |  |      addq.l #1,d0
    7ed8:	|  |  |  |      movea.l 24(sp),a0
    7edc:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7ee0:	|  |  |  |      movea.l 24(sp),a0
    7ee4:	|  |  |  |      move.l 72(a0),d0
    7ee8:	|  |  |  |      movea.l 24(sp),a0
    7eec:	|  |  |  |      movea.l 60(a0),a0
    7ef0:	|  |  |  |      move.l 8(a0),d1
    7ef4:	|  |  |  |      move.l d1,-(sp)
    7ef6:	|  |  |  |      move.l d0,-(sp)
    7ef8:	|  |  |  |      jsr 14ac8 <__modsi3>
    7efe:	|  |  |  |      addq.l #8,sp
    7f00:	|  |  |  |      movea.l 24(sp),a0
    7f04:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7f08:	|  |  |  |      movea.l 24(sp),a0
    7f0c:	|  |  |  |      movea.l 60(a0),a0
    7f10:	|  |  |  |      movea.l 4(a0),a1
    7f14:	|  |  |  |      movea.l 24(sp),a0
    7f18:	|  |  |  |      move.l 72(a0),d0
    7f1c:	|  |  |  |      move.l d0,d1
    7f1e:	|  |  |  |      move.l d1,d0
    7f20:	|  |  |  |      add.l d0,d0
    7f22:	|  |  |  |      add.l d1,d0
    7f24:	|  |  |  |      add.l d0,d0
    7f26:	|  |  |  |      add.l d0,d0
    7f28:	|  |  |  |      lea (0,a1,d0.l),a0
    7f2c:	|  |  |  |      move.l 4(a0),d0
    7f30:	|  |  |  |      movea.l 24(sp),a0
    7f34:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    7f38:	|  |  |  \----> movea.l 20(sp),a0
    7f3c:	|  |  |         movea.l 4(a0),a1
    7f40:	|  |  |         movea.l 24(sp),a0
    7f44:	|  |  |         move.l 72(a0),d0
    7f48:	|  |  |         move.l d0,d1
    7f4a:	|  |  |         move.l d1,d0
    7f4c:	|  |  |         add.l d0,d0
    7f4e:	|  |  |         add.l d1,d0
    7f50:	|  |  |         add.l d0,d0
    7f52:	|  |  |         add.l d0,d0
    7f54:	|  |  |         lea (0,a1,d0.l),a0
    7f58:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    7f5c:	|  |  |         move.l 8(sp),d0
    7f60:	|  |  |         add.l d0,d0
    7f62:	|  |  |         subx.l d0,d0
    7f64:	|  |  |         neg.l d0
    7f66:	|  |  |         move.b d0,d0
    7f68:	|  |  |         move.b d0,d0
    7f6a:	|  |  |         andi.l #255,d0
    7f70:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    7f74:	|  |  |         move.l 8(sp),-(sp)
    7f78:	|  |  |         jsr 6f4a <TF_abs>
    7f7e:	|  |  |         addq.l #4,sp
    7f80:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    7f84:	|  |  |         movea.l 20(sp),a0
    7f88:	|  |  |         movea.l (a0),a0
    7f8a:	|  |  |         move.l 8(a0),d0
    7f8e:	|  |  |         cmp.l 12(sp),d0
    7f92:	|  |  |     /-- bgt.s 7fa2 <drawPeople+0x272>
				fNum = 0;
    7f94:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    7f98:	|  |  |     |   moveq #2,d0
    7f9a:	|  |  |     |   sub.l 16(sp),d0
    7f9e:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    7fa2:	|  |  |     \-> moveq #2,d0
    7fa4:	|  |  |         cmp.l 16(sp),d0
    7fa8:	|  |  +-------- beq.s 8024 <drawPeople+0x2f4>
				BOOL r = FALSE;
    7faa:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    7fae:	|  |  |         move.l 16(sp),d0
    7fb2:	|  |  |         movea.w d0,a0
    7fb4:	|  |  |         movea.l 20(sp),a1
    7fb8:	|  |  |         movea.l (a1),a1
    7fba:	|  |  |         movea.l 16(a1),a1
    7fbe:	|  |  |         move.l 12(sp),d1
    7fc2:	|  |  |         move.l d1,d0
    7fc4:	|  |  |         lsl.l #3,d0
    7fc6:	|  |  |         sub.l d1,d0
    7fc8:	|  |  |         add.l d0,d0
    7fca:	|  |  |         add.l d0,d0
    7fcc:	|  |  |         add.l a1,d0
    7fce:	|  |  |         move.l a0,-(sp)
    7fd0:	|  |  |         move.l 28(sp),-(sp)
    7fd4:	|  |  |         move.l d0,-(sp)
    7fd6:	|  |  |         jsr 6eae <scaleSprite>
    7fdc:	|  |  |         lea 12(sp),sp
    7fe0:	|  |  |         move.w d0,6(sp)
				if (r) {
    7fe4:	|  |  +-------- beq.s 8024 <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    7fe6:	|  |  |         movea.l 24(sp),a0
    7fea:	|  |  |         movea.l 102(a0),a0
    7fee:	|  |  |         movea.l (a0),a0
    7ff0:	|  |  |         move.b (a0),d0
    7ff2:	|  |  +-------- beq.s 8024 <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    7ff4:	|  |  |         move.l 19464 <personRegion+0x1c>,d1
    7ffa:	|  |  |         movea.l 24(sp),a0
    7ffe:	|  |  |         move.l 102(a0),d0
    8002:	|  |  |         cmp.l d1,d0
    8004:	|  |  |     /-- beq.s 800c <drawPeople+0x2dc>
    8006:	|  |  |     |   clr.l 19354 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    800c:	|  |  |     \-> movea.l 24(sp),a0
    8010:	|  |  |         move.l 102(a0),d0
    8014:	|  |  |         move.l d0,19464 <personRegion+0x1c>
						overRegion = & personRegion;
    801a:	|  |  |         move.l #103496,194e8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    8024:	|  |  \-------> movea.l 24(sp),a0
    8028:	|  |            move.l 76(a0),d0
    802c:	|  |            subq.l #1,d0
    802e:	|  |            movea.l 24(sp),a0
    8032:	|  |            move.l d0,76(a0)
    8036:	|  |            movea.l 24(sp),a0
    803a:	|  |            move.l 76(a0),d0
    803e:	|  |     /----- bne.w 8266 <drawPeople+0x536>
			thisPerson -> frameNum ++;
    8042:	|  |     |      movea.l 24(sp),a0
    8046:	|  |     |      move.l 72(a0),d0
    804a:	|  |     |      addq.l #1,d0
    804c:	|  |     |      movea.l 24(sp),a0
    8050:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    8054:	|  |     |      movea.l 24(sp),a0
    8058:	|  |     |      move.l 72(a0),d0
    805c:	|  |     |      movea.l 24(sp),a0
    8060:	|  |     |      movea.l 60(a0),a0
    8064:	|  |     |      move.l 8(a0),d1
    8068:	|  |     |      move.l d1,-(sp)
    806a:	|  |     |      move.l d0,-(sp)
    806c:	|  |     |      jsr 14ac8 <__modsi3>
    8072:	|  |     |      addq.l #8,sp
    8074:	|  |     |      movea.l 24(sp),a0
    8078:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    807c:	|  |     |      movea.l 24(sp),a0
    8080:	|  |     |      movea.l 60(a0),a0
    8084:	|  |     |      movea.l 4(a0),a1
    8088:	|  |     |      movea.l 24(sp),a0
    808c:	|  |     |      move.l 72(a0),d0
    8090:	|  |     |      move.l d0,d1
    8092:	|  |     |      move.l d1,d0
    8094:	|  |     |      add.l d0,d0
    8096:	|  |     |      add.l d1,d0
    8098:	|  |     |      add.l d0,d0
    809a:	|  |     |      add.l d0,d0
    809c:	|  |     |      lea (0,a1,d0.l),a0
    80a0:	|  |     |      move.l 4(a0),d0
    80a4:	|  |     |      movea.l 24(sp),a0
    80a8:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    80ac:	|  |     |      movea.l 24(sp),a0
    80b0:	|  |     |      move.w 92(a0),d0
    80b4:	|  |     +----- beq.w 8266 <drawPeople+0x536>
    80b8:	|  |     |      tst.l 20(sp)
    80bc:	|  |     +----- beq.w 8266 <drawPeople+0x536>
    80c0:	|  |     |      movea.l 20(sp),a0
    80c4:	|  |     |      move.l 4(a0),d0
    80c8:	|  |     +----- beq.w 8266 <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    80cc:	|  |     |      movea.l 20(sp),a0
    80d0:	|  |     |      movea.l 4(a0),a1
    80d4:	|  |     |      movea.l 24(sp),a0
    80d8:	|  |     |      move.l 72(a0),d0
    80dc:	|  |     |      move.l d0,d1
    80de:	|  |     |      move.l d1,d0
    80e0:	|  |     |      add.l d0,d0
    80e2:	|  |     |      add.l d1,d0
    80e4:	|  |     |      add.l d0,d0
    80e6:	|  |     |      add.l d0,d0
    80e8:	|  |     |      lea (0,a1,d0.l),a0
    80ec:	|  |     |      move.l 8(a0),d0
    80f0:	|  |     |  /-- ble.w 8192 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    80f4:	|  |     |  |   movea.l 20(sp),a0
    80f8:	|  |     |  |   movea.l 4(a0),a1
    80fc:	|  |     |  |   movea.l 24(sp),a0
    8100:	|  |     |  |   move.l 72(a0),d0
    8104:	|  |     |  |   move.l d0,d1
    8106:	|  |     |  |   move.l d1,d0
    8108:	|  |     |  |   add.l d0,d0
    810a:	|  |     |  |   add.l d1,d0
    810c:	|  |     |  |   add.l d0,d0
    810e:	|  |     |  |   add.l d0,d0
    8110:	|  |     |  |   lea (0,a1,d0.l),a0
    8114:	|  |     |  |   move.l 8(a0),d0
    8118:	|  |     |  |   clr.l -(sp)
    811a:	|  |     |  |   move.l d0,-(sp)
    811c:	|  |     |  |   jsr aca6 <startSound>
    8122:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    8124:	|  |     |  |   movea.l 24(sp),a0
    8128:	|  |     |  |   move.l 72(a0),d0
    812c:	|  |     |  |   addq.l #1,d0
    812e:	|  |     |  |   movea.l 24(sp),a0
    8132:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    8136:	|  |     |  |   movea.l 24(sp),a0
    813a:	|  |     |  |   move.l 72(a0),d0
    813e:	|  |     |  |   movea.l 24(sp),a0
    8142:	|  |     |  |   movea.l 60(a0),a0
    8146:	|  |     |  |   move.l 8(a0),d1
    814a:	|  |     |  |   move.l d1,-(sp)
    814c:	|  |     |  |   move.l d0,-(sp)
    814e:	|  |     |  |   jsr 14ac8 <__modsi3>
    8154:	|  |     |  |   addq.l #8,sp
    8156:	|  |     |  |   movea.l 24(sp),a0
    815a:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    815e:	|  |     |  |   movea.l 24(sp),a0
    8162:	|  |     |  |   movea.l 60(a0),a0
    8166:	|  |     |  |   movea.l 4(a0),a1
    816a:	|  |     |  |   movea.l 24(sp),a0
    816e:	|  |     |  |   move.l 72(a0),d0
    8172:	|  |     |  |   move.l d0,d1
    8174:	|  |     |  |   move.l d1,d0
    8176:	|  |     |  |   add.l d0,d0
    8178:	|  |     |  |   add.l d1,d0
    817a:	|  |     |  |   add.l d0,d0
    817c:	|  |     |  |   add.l d0,d0
    817e:	|  |     |  |   lea (0,a1,d0.l),a0
    8182:	|  |     |  |   move.l 4(a0),d0
    8186:	|  |     |  |   movea.l 24(sp),a0
    818a:	|  |     |  |   move.l d0,76(a0)
    818e:	|  |     +--|-- bra.w 8266 <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    8192:	|  |     |  \-> movea.l 20(sp),a0
    8196:	|  |     |      movea.l 4(a0),a1
    819a:	|  |     |      movea.l 24(sp),a0
    819e:	|  |     |      move.l 72(a0),d0
    81a2:	|  |     |      move.l d0,d1
    81a4:	|  |     |      move.l d1,d0
    81a6:	|  |     |      add.l d0,d0
    81a8:	|  |     |      add.l d1,d0
    81aa:	|  |     |      add.l d0,d0
    81ac:	|  |     |      add.l d0,d0
    81ae:	|  |     |      lea (0,a1,d0.l),a0
    81b2:	|  |     |      move.l 8(a0),d0
    81b6:	|  |     +----- beq.w 8266 <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    81ba:	|  |     |      movea.l 1935c <noStack>,a1
    81c0:	|  |     |      movea.l 20(sp),a0
    81c4:	|  |     |      move.l 4(a0),d2
    81c8:	|  |     |      movea.l 24(sp),a0
    81cc:	|  |     |      move.l 72(a0),d0
    81d0:	|  |     |      move.l d0,d1
    81d2:	|  |     |      move.l d1,d0
    81d4:	|  |     |      add.l d0,d0
    81d6:	|  |     |      add.l d1,d0
    81d8:	|  |     |      add.l d0,d0
    81da:	|  |     |      add.l d0,d0
    81dc:	|  |     |      movea.l d2,a0
    81de:	|  |     |      adda.l d0,a0
    81e0:	|  |     |      move.l 8(a0),d0
    81e4:	|  |     |      neg.l d0
    81e6:	|  |     |      pea 1 <_start+0x1>
    81ea:	|  |     |      move.l a1,-(sp)
    81ec:	|  |     |      clr.l -(sp)
    81ee:	|  |     |      clr.l -(sp)
    81f0:	|  |     |      move.l d0,-(sp)
    81f2:	|  |     |      jsr 4a36 <startNewFunctionNum>
    81f8:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    81fc:	|  |     |      movea.l 24(sp),a0
    8200:	|  |     |      move.l 72(a0),d0
    8204:	|  |     |      addq.l #1,d0
    8206:	|  |     |      movea.l 24(sp),a0
    820a:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    820e:	|  |     |      movea.l 24(sp),a0
    8212:	|  |     |      move.l 72(a0),d0
    8216:	|  |     |      movea.l 24(sp),a0
    821a:	|  |     |      movea.l 60(a0),a0
    821e:	|  |     |      move.l 8(a0),d1
    8222:	|  |     |      move.l d1,-(sp)
    8224:	|  |     |      move.l d0,-(sp)
    8226:	|  |     |      jsr 14ac8 <__modsi3>
    822c:	|  |     |      addq.l #8,sp
    822e:	|  |     |      movea.l 24(sp),a0
    8232:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8236:	|  |     |      movea.l 24(sp),a0
    823a:	|  |     |      movea.l 60(a0),a0
    823e:	|  |     |      movea.l 4(a0),a1
    8242:	|  |     |      movea.l 24(sp),a0
    8246:	|  |     |      move.l 72(a0),d0
    824a:	|  |     |      move.l d0,d1
    824c:	|  |     |      move.l d1,d0
    824e:	|  |     |      add.l d0,d0
    8250:	|  |     |      add.l d1,d0
    8252:	|  |     |      add.l d0,d0
    8254:	|  |     |      add.l d0,d0
    8256:	|  |     |      lea (0,a1,d0.l),a0
    825a:	|  |     |      move.l 4(a0),d0
    825e:	|  |     |      movea.l 24(sp),a0
    8262:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    8266:	|  |     \----> movea.l 24(sp),a0
    826a:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    8270:	|  \----------> tst.l 24(sp)
    8274:	\-------------- bne.w 7d52 <drawPeople+0x22>
	}
}
    8278:	                nop
    827a:	                nop
    827c:	                move.l (sp)+,d2
    827e:	                lea 24(sp),sp
    8282:	                rts

00008284 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    8284:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    8286:	          move.l 19444 <allPeople>,(sp)
	while (thisPerson) {
    828c:	      /-- bra.s 82a4 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    828e:	/-----|-> movea.l (sp),a0
    8290:	|     |   movea.l 102(a0),a0
    8294:	|     |   move.l 4(a0),d0
    8298:	|     |   cmp.l 8(sp),d0
    829c:	|  /--|-- beq.s 82aa <findPerson+0x26>
		thisPerson = thisPerson -> next;
    829e:	|  |  |   movea.l (sp),a0
    82a0:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    82a4:	|  |  \-> tst.l (sp)
    82a6:	\--|----- bne.s 828e <findPerson+0xa>
    82a8:	   |  /-- bra.s 82ac <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    82aa:	   \--|-> nop
	}
	return thisPerson;
    82ac:	      \-> move.l (sp),d0
}
    82ae:	          addq.l #4,sp
    82b0:	          rts

000082b2 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    82b2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    82b4:	       move.l 12(sp),-(sp)
    82b8:	       jsr 8284 <findPerson>
    82be:	       addq.l #4,sp
    82c0:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    82c2:	   /-- bne.s 82c8 <floatCharacter+0x16>
    82c4:	   |   clr.w d0
    82c6:	/--|-- bra.s 82d2 <floatCharacter+0x20>
	moveMe -> floaty = f;
    82c8:	|  \-> movea.l (sp),a0
    82ca:	|      move.l 8(sp),12(a0)
	return TRUE;
    82d0:	|      moveq #1,d0
}
    82d2:	\----> addq.l #4,sp
    82d4:	       rts

000082d6 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    82d6:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    82d8:	          tst.l 8(sp)
    82dc:	      /-- bne.s 82ea <forceWalkingPerson+0x14>
    82de:	      |   tst.l 12(sp)
    82e2:	      +-- bne.s 82ea <forceWalkingPerson+0x14>
    82e4:	      |   clr.w d0
    82e6:	/-----|-- bra.w 837c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    82ea:	|     \-> move.l 16(sp),-(sp)
    82ee:	|         jsr 8284 <findPerson>
    82f4:	|         addq.l #4,sp
    82f6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    82f8:	|     /-- bne.s 82fe <forceWalkingPerson+0x28>
    82fa:	|     |   clr.w d0
    82fc:	+-----|-- bra.s 837c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    82fe:	|     \-> movea.l (sp),a0
    8300:	|         move.l 56(a0),d0
    8304:	|     /-- beq.s 8316 <forceWalkingPerson+0x40>
    8306:	|     |   movea.l (sp),a0
    8308:	|     |   move.l 56(a0),d0
    830c:	|     |   move.l d0,-(sp)
    830e:	|     |   jsr 290c <abortFunction>
    8314:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    8316:	|     \-> movea.l (sp),a0
    8318:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    831e:	|         movea.l (sp),a0
    8320:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    8324:	|         movea.l (sp),a0
    8326:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    832c:	|         movea.l (sp),a0
    832e:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    8334:	|         movea.l (sp),a0
    8336:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    833c:	|         movea.l (sp),a0
    833e:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    8342:	|         movea.l (sp),a0
    8344:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    8348:	|         move.l (sp),-(sp)
    834a:	|         jsr 7676 <doBorderStuff>
    8350:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    8352:	|         pea 1 <_start+0x1>
    8356:	|         move.l 4(sp),-(sp)
    835a:	|         jsr 9b02 <walkMe>
    8360:	|         addq.l #8,sp
    8362:	|         tst.w d0
    8364:	|     /-- bne.s 836e <forceWalkingPerson+0x98>
    8366:	|     |   movea.l (sp),a0
    8368:	|     |   move.w 54(a0),d0
    836c:	|  /--|-- beq.s 837a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    836e:	|  |  \-> movea.l (sp),a0
    8370:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    8376:	|  |      moveq #1,d0
    8378:	+--|----- bra.s 837c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    837a:	|  \----> clr.w d0
    }
}
    837c:	\-------> addq.l #4,sp
    837e:	          rts

00008380 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    8380:	                lea -56(sp),sp
    8384:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    8386:	                move.l #320,56(sp)
    838e:	                move.l #200,52(sp)
    8396:	                moveq #-1,d0
    8398:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    839c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    83a4:	                clr.l 44(sp)
    83a8:	   /----------- bra.w 8580 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    83ac:	/--|----------> movea.l 194ec <currentFloor>,a0
    83b2:	|  |            move.l 12(a0),d1
    83b6:	|  |            move.l 44(sp),d0
    83ba:	|  |            lsl.l #3,d0
    83bc:	|  |            movea.l d1,a0
    83be:	|  |            adda.l d0,a0
    83c0:	|  |            move.l (a0),d0
    83c2:	|  |            move.l d0,d1
    83c4:	|  |            subq.l #1,d1
    83c6:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    83ca:	|  |            clr.l 40(sp)
    83ce:	|  |     /----- bra.w 855e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    83d2:	|  |  /--|----> movea.l 194ec <currentFloor>,a0
    83d8:	|  |  |  |      move.l 4(a0),d1
    83dc:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    83e2:	|  |  |  |      movea.l 12(a0),a0
    83e6:	|  |  |  |      move.l 44(sp),d0
    83ea:	|  |  |  |      lsl.l #3,d0
    83ec:	|  |  |  |      adda.l d0,a0
    83ee:	|  |  |  |      movea.l 4(a0),a0
    83f2:	|  |  |  |      move.l 40(sp),d0
    83f6:	|  |  |  |      add.l d0,d0
    83f8:	|  |  |  |      add.l d0,d0
    83fa:	|  |  |  |      adda.l d0,a0
    83fc:	|  |  |  |      move.l (a0),d0
    83fe:	|  |  |  |      lsl.l #3,d0
    8400:	|  |  |  |      movea.l d1,a0
    8402:	|  |  |  |      adda.l d0,a0
    8404:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    8408:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    840e:	|  |  |  |      move.l 4(a0),d1
    8412:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    8418:	|  |  |  |      movea.l 12(a0),a0
    841c:	|  |  |  |      move.l 44(sp),d0
    8420:	|  |  |  |      lsl.l #3,d0
    8422:	|  |  |  |      adda.l d0,a0
    8424:	|  |  |  |      movea.l 4(a0),a0
    8428:	|  |  |  |      move.l 40(sp),d0
    842c:	|  |  |  |      add.l d0,d0
    842e:	|  |  |  |      add.l d0,d0
    8430:	|  |  |  |      adda.l d0,a0
    8432:	|  |  |  |      move.l (a0),d0
    8434:	|  |  |  |      lsl.l #3,d0
    8436:	|  |  |  |      movea.l d1,a0
    8438:	|  |  |  |      adda.l d0,a0
    843a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    8440:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    8446:	|  |  |  |      move.l 4(a0),d1
    844a:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    8450:	|  |  |  |      movea.l 12(a0),a0
    8454:	|  |  |  |      move.l 44(sp),d0
    8458:	|  |  |  |      lsl.l #3,d0
    845a:	|  |  |  |      adda.l d0,a0
    845c:	|  |  |  |      movea.l 4(a0),a0
    8460:	|  |  |  |      move.l 36(sp),d0
    8464:	|  |  |  |      add.l d0,d0
    8466:	|  |  |  |      add.l d0,d0
    8468:	|  |  |  |      adda.l d0,a0
    846a:	|  |  |  |      move.l (a0),d0
    846c:	|  |  |  |      lsl.l #3,d0
    846e:	|  |  |  |      movea.l d1,a0
    8470:	|  |  |  |      adda.l d0,a0
    8472:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    8476:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    847c:	|  |  |  |      move.l 4(a0),d1
    8480:	|  |  |  |      movea.l 194ec <currentFloor>,a0
    8486:	|  |  |  |      movea.l 12(a0),a0
    848a:	|  |  |  |      move.l 44(sp),d0
    848e:	|  |  |  |      lsl.l #3,d0
    8490:	|  |  |  |      adda.l d0,a0
    8492:	|  |  |  |      movea.l 4(a0),a0
    8496:	|  |  |  |      move.l 36(sp),d0
    849a:	|  |  |  |      add.l d0,d0
    849c:	|  |  |  |      add.l d0,d0
    849e:	|  |  |  |      adda.l d0,a0
    84a0:	|  |  |  |      move.l (a0),d0
    84a2:	|  |  |  |      lsl.l #3,d0
    84a4:	|  |  |  |      movea.l d1,a0
    84a6:	|  |  |  |      adda.l d0,a0
    84a8:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    84ae:	|  |  |  |      movea.l 68(sp),a0
    84b2:	|  |  |  |      move.l (a0),d1
    84b4:	|  |  |  |      movea.l 64(sp),a0
    84b8:	|  |  |  |      move.l (a0),d0
    84ba:	|  |  |  |      move.l d1,-(sp)
    84bc:	|  |  |  |      move.l d0,-(sp)
    84be:	|  |  |  |      move.l 24(sp),-(sp)
    84c2:	|  |  |  |      move.l 32(sp),-(sp)
    84c6:	|  |  |  |      move.l 40(sp),-(sp)
    84ca:	|  |  |  |      move.l 48(sp),-(sp)
    84ce:	|  |  |  |      lea 28(sp),a0
    84d2:	|  |  |  |      move.l a0,-(sp)
    84d4:	|  |  |  |      lea 36(sp),a0
    84d8:	|  |  |  |      move.l a0,-(sp)
    84da:	|  |  |  |      jsr 13042 <closestPointOnLine>
    84e0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    84e4:	|  |  |  |      movea.l 64(sp),a0
    84e8:	|  |  |  |      move.l (a0),d0
    84ea:	|  |  |  |      move.l 8(sp),d1
    84ee:	|  |  |  |      move.l d0,d2
    84f0:	|  |  |  |      sub.l d1,d2
    84f2:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    84f6:	|  |  |  |      movea.l 68(sp),a0
    84fa:	|  |  |  |      move.l (a0),d0
    84fc:	|  |  |  |      move.l 4(sp),d1
    8500:	|  |  |  |      move.l d0,d2
    8502:	|  |  |  |      sub.l d1,d2
    8504:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    8508:	|  |  |  |      move.l 28(sp),-(sp)
    850c:	|  |  |  |      move.l 32(sp),-(sp)
    8510:	|  |  |  |      jsr 14a1c <__mulsi3>
    8516:	|  |  |  |      addq.l #8,sp
    8518:	|  |  |  |      move.l d0,d2
    851a:	|  |  |  |      move.l 24(sp),-(sp)
    851e:	|  |  |  |      move.l 28(sp),-(sp)
    8522:	|  |  |  |      jsr 14a1c <__mulsi3>
    8528:	|  |  |  |      addq.l #8,sp
    852a:	|  |  |  |      move.l d2,d1
    852c:	|  |  |  |      add.l d0,d1
    852e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    8532:	|  |  |  |      move.l 12(sp),d2
    8536:	|  |  |  |      cmp.l 32(sp),d2
    853a:	|  |  |  |  /-- bge.s 8554 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    853c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    8542:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    8548:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    854e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    8554:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    855a:	|  |  |  |      addq.l #1,40(sp)
    855e:	|  |  |  \----> movea.l 194ec <currentFloor>,a0
    8564:	|  |  |         move.l 12(a0),d1
    8568:	|  |  |         move.l 44(sp),d0
    856c:	|  |  |         lsl.l #3,d0
    856e:	|  |  |         movea.l d1,a0
    8570:	|  |  |         adda.l d0,a0
    8572:	|  |  |         move.l (a0),d0
    8574:	|  |  |         cmp.l 40(sp),d0
    8578:	|  |  \-------- bgt.w 83d2 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    857c:	|  |            addq.l #1,44(sp)
    8580:	|  \----------> movea.l 194ec <currentFloor>,a0
    8586:	|               move.l 8(a0),d0
    858a:	|               cmp.l 44(sp),d0
    858e:	\-------------- bgt.w 83ac <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    8592:	                moveq #-1,d0
    8594:	                cmp.l 48(sp),d0
    8598:	            /-- bne.s 859e <handleClosestPoint+0x21e>
    859a:	            |   clr.w d0
    859c:	         /--|-- bra.s 85b8 <handleClosestPoint+0x238>
	*setX = gotX;
    859e:	         |  \-> movea.l 64(sp),a0
    85a2:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    85a6:	         |      movea.l 68(sp),a0
    85aa:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    85ae:	         |      movea.l 72(sp),a0
    85b2:	         |      move.l 48(sp),(a0)

	return TRUE;
    85b6:	         |      moveq #1,d0
}
    85b8:	         \----> move.l (sp)+,d2
    85ba:	                lea 56(sp),sp
    85be:	                rts

000085c0 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    85c0:	clr.l 19458 <personRegion+0x10>
	personRegion.sY = 0;
    85c6:	clr.l 1945c <personRegion+0x14>
	personRegion.di = -1;
    85cc:	moveq #-1,d0
    85ce:	move.l d0,19460 <personRegion+0x18>
	allScreenRegions = NULL;
    85d4:	clr.l 194e4 <allScreenRegions>

	return TRUE;
    85da:	moveq #1,d0
}
    85dc:	rts

000085de <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    85de:	          subq.l #4,sp
    85e0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    85e2:	          tst.l 12(sp)
    85e6:	      /-- bne.s 85ee <jumpPerson+0x10>
    85e8:	      |   tst.l 16(sp)
    85ec:	/-----|-- beq.s 8662 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    85ee:	|     \-> move.l 20(sp),-(sp)
    85f2:	|         jsr 8284 <findPerson>
    85f8:	|         addq.l #4,sp
    85fa:	|         move.l d0,4(sp)
    if (!moveMe) return;
    85fe:	|  /----- beq.s 8666 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    8600:	|  |      movea.l 4(sp),a0
    8604:	|  |      move.l 56(a0),d0
    8608:	|  |  /-- beq.s 861c <jumpPerson+0x3e>
    860a:	|  |  |   movea.l 4(sp),a0
    860e:	|  |  |   move.l 56(a0),d0
    8612:	|  |  |   move.l d0,-(sp)
    8614:	|  |  |   jsr 290c <abortFunction>
    861a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    861c:	|  |  \-> movea.l 4(sp),a0
    8620:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    8624:	|  |      movea.l 4(sp),a0
    8628:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    862c:	|  |      movea.l 4(sp),a0
    8630:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    8634:	|  |      move.l 16(sp),-(sp)
    8638:	|  |      jsr 1449a <__floatsisf>
    863e:	|  |      addq.l #4,sp
    8640:	|  |      move.l d0,d2
    8642:	|  |      move.l 12(sp),-(sp)
    8646:	|  |      jsr 1449a <__floatsisf>
    864c:	|  |      addq.l #4,sp
    864e:	|  |      move.l d2,-(sp)
    8650:	|  |      move.l d0,-(sp)
    8652:	|  |      move.l 12(sp),-(sp)
    8656:	|  |      jsr 89cc <moveAndScale>
    865c:	|  |      lea 12(sp),sp
    8660:	|  |  /-- bra.s 8668 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    8662:	\--|--|-> nop
    8664:	   |  +-- bra.s 8668 <jumpPerson+0x8a>
    if (!moveMe) return;
    8666:	   \--|-> nop
}
    8668:	      \-> move.l (sp)+,d2
    866a:	          addq.l #4,sp
    866c:	          rts

0000866e <killAllPeople>:


void killAllPeople () {
    866e:	          subq.l #8,sp
    8670:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    8672:	   /----- bra.s 86de <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    8674:	/--|----> movea.l 19444 <allPeople>,a0
    867a:	|  |      move.l 56(a0),d0
    867e:	|  |  /-- beq.s 8694 <killAllPeople+0x26>
    8680:	|  |  |   movea.l 19444 <allPeople>,a0
    8686:	|  |  |   move.l 56(a0),d0
    868a:	|  |  |   move.l d0,-(sp)
    868c:	|  |  |   jsr 290c <abortFunction>
    8692:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    8694:	|  |  \-> movea.l 19444 <allPeople>,a0
    869a:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    869e:	|  |      move.l 19444 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    86a6:	|  |      movea.l 19444 <allPeople>,a0
    86ac:	|  |      move.l 24(a0),d0
    86b0:	|  |      move.l d0,19444 <allPeople>
		removeObjectType (killPeople -> thisType);
    86b6:	|  |      movea.l 8(sp),a0
    86ba:	|  |      move.l 102(a0),d0
    86be:	|  |      move.l d0,-(sp)
    86c0:	|  |      jsr b378 <removeObjectType>
    86c6:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    86c8:	|  |      move.l 8(sp),4(sp)
    86ce:	|  |      move.l 1938c <SysBase>,d0
    86d4:	|  |      movea.l d0,a6
    86d6:	|  |      movea.l 4(sp),a1
    86da:	|  |      jsr -690(a6)
	while (allPeople) {
    86de:	|  \----> move.l 19444 <allPeople>,d0
    86e4:	\-------- bne.s 8674 <killAllPeople+0x6>
	}
}
    86e6:	          nop
    86e8:	          nop
    86ea:	          movea.l (sp)+,a6
    86ec:	          addq.l #8,sp
    86ee:	          rts

000086f0 <killMostPeople>:

void killMostPeople() {
    86f0:	          lea -12(sp),sp
    86f4:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    86f6:	          move.l #103492,12(sp)

    while (*lookyHere) {
    86fe:	   /----- bra.w 8784 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    8702:	/--|----> movea.l 12(sp),a0
    8706:	|  |      movea.l (a0),a0
    8708:	|  |      move.l 106(a0),d0
    870c:	|  |      moveq #32,d1
    870e:	|  |      and.l d1,d0
    8710:	|  |  /-- beq.s 8722 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    8712:	|  |  |   movea.l 12(sp),a0
    8716:	|  |  |   move.l (a0),d0
    8718:	|  |  |   moveq #24,d1
    871a:	|  |  |   add.l d0,d1
    871c:	|  |  |   move.l d1,12(sp)
    8720:	|  +--|-- bra.s 8784 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    8722:	|  |  \-> movea.l 12(sp),a0
    8726:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    872a:	|  |      movea.l 8(sp),a0
    872e:	|  |      move.l 24(a0),d0
    8732:	|  |      movea.l 12(sp),a0
    8736:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    8738:	|  |      movea.l 8(sp),a0
    873c:	|  |      move.l 56(a0),d0
    8740:	|  |  /-- beq.s 8754 <killMostPeople+0x64>
    8742:	|  |  |   movea.l 8(sp),a0
    8746:	|  |  |   move.l 56(a0),d0
    874a:	|  |  |   move.l d0,-(sp)
    874c:	|  |  |   jsr 290c <abortFunction>
    8752:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    8754:	|  |  \-> movea.l 8(sp),a0
    8758:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    875c:	|  |      movea.l 8(sp),a0
    8760:	|  |      move.l 102(a0),d0
    8764:	|  |      move.l d0,-(sp)
    8766:	|  |      jsr b378 <removeObjectType>
    876c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    876e:	|  |      move.l 8(sp),4(sp)
    8774:	|  |      move.l 1938c <SysBase>,d0
    877a:	|  |      movea.l d0,a6
    877c:	|  |      movea.l 4(sp),a1
    8780:	|  |      jsr -690(a6)
    while (*lookyHere) {
    8784:	|  \----> movea.l 12(sp),a0
    8788:	|         move.l (a0),d0
    878a:	\-------- bne.w 8702 <killMostPeople+0x12>
        }
    }
}
    878e:	          nop
    8790:	          nop
    8792:	          movea.l (sp)+,a6
    8794:	          lea 12(sp),sp
    8798:	          rts

0000879a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    879a:	clr.l -(sp)
    879c:	move.l sp,d0
    879e:	addq.l #8,d0
    87a0:	move.l d0,-(sp)
    87a2:	jsr 6092 <setFrames>
    87a8:	addq.l #8,sp
}
    87aa:	nop
    87ac:	rts

000087ae <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    87ae:	          lea -12(sp),sp
    87b2:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    87b4:	          tst.l 20(sp)
    87b8:	      /-- bne.s 87c6 <makeWalkingPerson+0x18>
    87ba:	      |   tst.l 24(sp)
    87be:	      +-- bne.s 87c6 <makeWalkingPerson+0x18>
    87c0:	      |   clr.w d0
    87c2:	/-----|-- bra.w 895e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    87c6:	|     \-> movea.l 194ec <currentFloor>,a0
    87cc:	|         move.l 8(a0),d0
    87d0:	|     /-- bne.s 87d8 <makeWalkingPerson+0x2a>
    87d2:	|     |   clr.w d0
    87d4:	+-----|-- bra.w 895e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    87d8:	|     \-> move.l 28(sp),-(sp)
    87dc:	|         jsr 8284 <findPerson>
    87e2:	|         addq.l #4,sp
    87e4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    87e8:	|     /-- bne.s 87f0 <makeWalkingPerson+0x42>
    87ea:	|     |   clr.w d0
    87ec:	+-----|-- bra.w 895e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    87f0:	|     \-> movea.l 12(sp),a0
    87f4:	|         move.l 56(a0),d0
    87f8:	|     /-- beq.s 880c <makeWalkingPerson+0x5e>
    87fa:	|     |   movea.l 12(sp),a0
    87fe:	|     |   move.l 56(a0),d0
    8802:	|     |   move.l d0,-(sp)
    8804:	|     |   jsr 290c <abortFunction>
    880a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    880c:	|     \-> movea.l 12(sp),a0
    8810:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    8814:	|         movea.l 12(sp),a0
    8818:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    881e:	|         movea.l 12(sp),a0
    8822:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    8828:	|         movea.l 12(sp),a0
    882c:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    8832:	|         movea.l 12(sp),a0
    8836:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    883c:	|         move.l 24(sp),-(sp)
    8840:	|         move.l 24(sp),-(sp)
    8844:	|         jsr 13544 <inFloor>
    884a:	|         addq.l #8,sp
    884c:	|         movea.l 12(sp),a0
    8850:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    8854:	|         movea.l 12(sp),a0
    8858:	|         move.l 48(a0),d0
    885c:	|         moveq #-1,d1
    885e:	|         cmp.l d0,d1
    8860:	|     /-- bne.s 8890 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    8862:	|     |   movea.w #48,a0
    8866:	|     |   adda.l 12(sp),a0
    886a:	|     |   moveq #32,d1
    886c:	|     |   add.l 12(sp),d1
    8870:	|     |   moveq #28,d0
    8872:	|     |   add.l 12(sp),d0
    8876:	|     |   move.l a0,-(sp)
    8878:	|     |   move.l d1,-(sp)
    887a:	|     |   move.l d0,-(sp)
    887c:	|     |   jsr 8380 <handleClosestPoint>
    8882:	|     |   lea 12(sp),sp
    8886:	|     |   tst.w d0
    8888:	|     +-- bne.s 8890 <makeWalkingPerson+0xe2>
    888a:	|     |   clr.w d0
    888c:	+-----|-- bra.w 895e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    8890:	|     \-> movea.l 12(sp),a0
    8894:	|         move.l 4(a0),d0
    8898:	|         move.l d0,-(sp)
    889a:	|         jsr 14432 <__fixsfsi>
    88a0:	|         addq.l #4,sp
    88a2:	|         move.l d0,d2
    88a4:	|         movea.l 12(sp),a0
    88a8:	|         move.l (a0),d0
    88aa:	|         move.l d0,-(sp)
    88ac:	|         jsr 14432 <__fixsfsi>
    88b2:	|         addq.l #4,sp
    88b4:	|         move.l d2,-(sp)
    88b6:	|         move.l d0,-(sp)
    88b8:	|         jsr 13544 <inFloor>
    88be:	|         addq.l #8,sp
    88c0:	|         movea.l 12(sp),a0
    88c4:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    88c8:	|         movea.l 12(sp),a0
    88cc:	|         move.l 44(a0),d0
    88d0:	|         moveq #-1,d1
    88d2:	|         cmp.l d0,d1
    88d4:	|     /-- bne.s 8926 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    88d6:	|     |   movea.l 12(sp),a0
    88da:	|     |   move.l (a0),d0
    88dc:	|     |   move.l d0,-(sp)
    88de:	|     |   jsr 14432 <__fixsfsi>
    88e4:	|     |   addq.l #4,sp
    88e6:	|     |   move.l d0,8(sp)
    88ea:	|     |   movea.l 12(sp),a0
    88ee:	|     |   move.l 4(a0),d0
    88f2:	|     |   move.l d0,-(sp)
    88f4:	|     |   jsr 14432 <__fixsfsi>
    88fa:	|     |   addq.l #4,sp
    88fc:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    8900:	|     |   moveq #44,d0
    8902:	|     |   add.l 12(sp),d0
    8906:	|     |   move.l d0,-(sp)
    8908:	|     |   lea 8(sp),a0
    890c:	|     |   move.l a0,-(sp)
    890e:	|     |   moveq #16,d0
    8910:	|     |   add.l sp,d0
    8912:	|     |   move.l d0,-(sp)
    8914:	|     |   jsr 8380 <handleClosestPoint>
    891a:	|     |   lea 12(sp),sp
    891e:	|     |   tst.w d0
    8920:	|     +-- bne.s 8926 <makeWalkingPerson+0x178>
    8922:	|     |   clr.w d0
    8924:	+-----|-- bra.s 895e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    8926:	|     \-> move.l 12(sp),-(sp)
    892a:	|         jsr 7676 <doBorderStuff>
    8930:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    8932:	|         clr.l -(sp)
    8934:	|         move.l 16(sp),-(sp)
    8938:	|         jsr 9b02 <walkMe>
    893e:	|         addq.l #8,sp
    8940:	|         tst.w d0
    8942:	|     /-- bne.s 894e <makeWalkingPerson+0x1a0>
    8944:	|     |   movea.l 12(sp),a0
    8948:	|     |   move.w 54(a0),d0
    894c:	|  /--|-- beq.s 895c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    894e:	|  |  \-> movea.l 12(sp),a0
    8952:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    8958:	|  |      moveq #1,d0
    895a:	+--|----- bra.s 895e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    895c:	|  \----> clr.w d0
	}
}
    895e:	\-------> move.l (sp)+,d2
    8960:	          lea 12(sp),sp
    8964:	          rts

00008966 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    8966:	       lea -16(sp),sp
    896a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    896c:	       moveq #12,d0
    896e:	       move.l d0,16(sp)
    8972:	       clr.l 12(sp)
    8976:	       move.l 1938c <SysBase>,d0
    897c:	       movea.l d0,a6
    897e:	       move.l 16(sp),d0
    8982:	       move.l 12(sp),d1
    8986:	       jsr -684(a6)
    898a:	       move.l d0,8(sp)
    898e:	       move.l 8(sp),d0
    8992:	       move.l d0,4(sp)
    if(newAnim == 0) {
    8996:	   /-- bne.s 89aa <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    8998:	   |   pea 15caa <custom.c.49191367+0xf7e>
    899e:	   |   jsr 141e2 <KPrintF>
    89a4:	   |   addq.l #4,sp
        return NULL;    
    89a6:	   |   moveq #0,d0
    89a8:	/--|-- bra.s 89c4 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    89aa:	|  \-> movea.l 4(sp),a0
    89ae:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    89b0:	|      movea.l 4(sp),a0
    89b4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    89b8:	|      movea.l 4(sp),a0
    89bc:	|      clr.l 4(a0)
	return newAnim;
    89c0:	|      move.l 4(sp),d0
}
    89c4:	\----> movea.l (sp)+,a6
    89c6:	       lea 16(sp),sp
    89ca:	       rts

000089cc <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    89cc:	    move.l d2,-(sp)
	me->x = x;
    89ce:	    movea.l 8(sp),a0
    89d2:	    move.l 12(sp),(a0)
	me->y = y;
    89d6:	    movea.l 8(sp),a0
    89da:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    89e0:	    movea.l 8(sp),a0
    89e4:	    move.l 106(a0),d0
    89e8:	    moveq #2,d1
    89ea:	    and.l d1,d0
    89ec:	/-- bne.s 8a44 <moveAndScale+0x78>
    89ee:	|   move.w 18d3a <scaleDivide>,d0
    89f4:	+-- beq.s 8a44 <moveAndScale+0x78>
    89f6:	|   movea.l 8(sp),a0
    89fa:	|   move.l 4(a0),d2
    89fe:	|   move.w 18d38 <scaleHorizon>,d0
    8a04:	|   movea.w d0,a0
    8a06:	|   move.l a0,-(sp)
    8a08:	|   jsr 1449a <__floatsisf>
    8a0e:	|   addq.l #4,sp
    8a10:	|   move.l d0,-(sp)
    8a12:	|   move.l d2,-(sp)
    8a14:	|   jsr 1478e <__subsf3>
    8a1a:	|   addq.l #8,sp
    8a1c:	|   move.l d0,d2
    8a1e:	|   move.w 18d3a <scaleDivide>,d0
    8a24:	|   movea.w d0,a0
    8a26:	|   move.l a0,-(sp)
    8a28:	|   jsr 1449a <__floatsisf>
    8a2e:	|   addq.l #4,sp
    8a30:	|   move.l d0,-(sp)
    8a32:	|   move.l d2,-(sp)
    8a34:	|   jsr 14346 <__divsf3>
    8a3a:	|   addq.l #8,sp
    8a3c:	|   movea.l 8(sp),a0
    8a40:	|   move.l d0,20(a0)
}
    8a44:	\-> nop
    8a46:	    move.l (sp)+,d2
    8a48:	    rts

00008a4a <removeOneCharacter>:

void removeOneCharacter (int i) {
    8a4a:	          lea -12(sp),sp
    8a4e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    8a50:	          move.l 20(sp),-(sp)
    8a54:	          jsr 8284 <findPerson>
    8a5a:	          addq.l #4,sp
    8a5c:	          move.l d0,8(sp)

    if (p) {
    8a60:	/-------- beq.w 8b0c <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    8a64:	|         move.l 194e8 <overRegion>,d0
    8a6a:	|         cmpi.l #103496,d0
    8a70:	|     /-- bne.s 8a8e <removeOneCharacter+0x44>
    8a72:	|     |   movea.l 194e8 <overRegion>,a0
    8a78:	|     |   move.l 28(a0),d1
    8a7c:	|     |   movea.l 8(sp),a0
    8a80:	|     |   move.l 102(a0),d0
    8a84:	|     |   cmp.l d1,d0
    8a86:	|     +-- bne.s 8a8e <removeOneCharacter+0x44>
            overRegion = NULL;
    8a88:	|     |   clr.l 194e8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    8a8e:	|     \-> movea.l 8(sp),a0
    8a92:	|         move.l 56(a0),d0
    8a96:	|     /-- beq.s 8aaa <removeOneCharacter+0x60>
    8a98:	|     |   movea.l 8(sp),a0
    8a9c:	|     |   move.l 56(a0),d0
    8aa0:	|     |   move.l d0,-(sp)
    8aa2:	|     |   jsr 290c <abortFunction>
    8aa8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    8aaa:	|     \-> movea.l 8(sp),a0
    8aae:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    8ab2:	|         move.l #103492,12(sp)
    8aba:	|     /-- bra.s 8aca <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    8abc:	|  /--|-> movea.l 12(sp),a0
    8ac0:	|  |  |   move.l (a0),d0
    8ac2:	|  |  |   moveq #24,d1
    8ac4:	|  |  |   add.l d0,d1
    8ac6:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    8aca:	|  |  \-> movea.l 12(sp),a0
    8ace:	|  |      move.l (a0),d0
    8ad0:	|  |      cmp.l 8(sp),d0
    8ad4:	|  \----- bne.s 8abc <removeOneCharacter+0x72>

        *killPeople = p->next;
    8ad6:	|         movea.l 8(sp),a0
    8ada:	|         move.l 24(a0),d0
    8ade:	|         movea.l 12(sp),a0
    8ae2:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    8ae4:	|         movea.l 8(sp),a0
    8ae8:	|         move.l 102(a0),d0
    8aec:	|         move.l d0,-(sp)
    8aee:	|         jsr b378 <removeObjectType>
    8af4:	|         addq.l #4,sp
        FreeVec(p);
    8af6:	|         move.l 8(sp),4(sp)
    8afc:	|         move.l 1938c <SysBase>,d0
    8b02:	|         movea.l d0,a6
    8b04:	|         movea.l 4(sp),a1
    8b08:	|         jsr -690(a6)
    }
}
    8b0c:	\-------> nop
    8b0e:	          movea.l (sp)+,a6
    8b10:	          lea 12(sp),sp
    8b14:	          rts

00008b16 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    8b16:	       subq.l #8,sp
    8b18:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    8b1a:	       movea.l 16(sp),a0
    8b1e:	       movea.l 68(a0),a0
    8b22:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    8b28:	       movea.l 16(sp),a0
    8b2c:	       move.l 80(a0),d2
    8b30:	       move.l 4(sp),-(sp)
    8b34:	       pea b4 <_start+0xb4>
    8b38:	       jsr 14a9a <__divsi3>
    8b3e:	       addq.l #8,sp
    8b40:	       add.l d2,d0
    8b42:	       move.l d0,d1
    8b44:	       addi.l #180,d1
    8b4a:	       movea.l 16(sp),a0
    8b4e:	       move.l 88(a0),d0
    8b52:	       move.l d1,d2
    8b54:	       add.l d0,d2
    8b56:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    8b5a:	   /-- bra.s 8b64 <rethinkAngle+0x4e>
    8b5c:	/--|-> addi.l #-360,8(sp)
    8b64:	|  \-> cmpi.l #359,8(sp)
    8b6c:	\----- bgt.s 8b5c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    8b6e:	       move.l 4(sp),-(sp)
    8b72:	       move.l 12(sp),-(sp)
    8b76:	       jsr 14a1c <__mulsi3>
    8b7c:	       addq.l #8,sp
    8b7e:	       pea 168 <decodeFilename+0x50>
    8b82:	       move.l d0,-(sp)
    8b84:	       jsr 14a9a <__divsi3>
    8b8a:	       addq.l #8,sp
    8b8c:	       movea.l 16(sp),a0
    8b90:	       move.l d0,94(a0)
}
    8b94:	       nop
    8b96:	       move.l (sp)+,d2
    8b98:	       addq.l #8,sp
    8b9a:	       rts

00008b9c <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    8b9c:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    8b9e:	          movea.l 8(sp),a0
    8ba2:	          move.l 8(a0),d0
    8ba6:	          move.l 12(sp),-(sp)
    8baa:	          move.l d0,-(sp)
    8bac:	          jsr 8d0 <put2bytes>
    8bb2:	          addq.l #8,sp
	if (p -> numFrames) {
    8bb4:	          movea.l 8(sp),a0
    8bb8:	          move.l 8(a0),d0
    8bbc:	/-------- beq.w 8c60 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    8bc0:	|         movea.l 8(sp),a0
    8bc4:	|         movea.l (a0),a0
    8bc6:	|         move.l (a0),d0
    8bc8:	|         move.l 12(sp),-(sp)
    8bcc:	|         move.l d0,-(sp)
    8bce:	|         jsr 958 <put4bytes>
    8bd4:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    8bd6:	|         clr.l (sp)
    8bd8:	|     /-- bra.s 8c52 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    8bda:	|  /--|-> movea.l 8(sp),a0
    8bde:	|  |  |   movea.l 4(a0),a0
    8be2:	|  |  |   move.l (sp),d1
    8be4:	|  |  |   move.l d1,d0
    8be6:	|  |  |   add.l d0,d0
    8be8:	|  |  |   add.l d1,d0
    8bea:	|  |  |   add.l d0,d0
    8bec:	|  |  |   add.l d0,d0
    8bee:	|  |  |   adda.l d0,a0
    8bf0:	|  |  |   move.l (a0),d0
    8bf2:	|  |  |   move.l 12(sp),-(sp)
    8bf6:	|  |  |   move.l d0,-(sp)
    8bf8:	|  |  |   jsr 958 <put4bytes>
    8bfe:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    8c00:	|  |  |   movea.l 8(sp),a0
    8c04:	|  |  |   movea.l 4(a0),a0
    8c08:	|  |  |   move.l (sp),d1
    8c0a:	|  |  |   move.l d1,d0
    8c0c:	|  |  |   add.l d0,d0
    8c0e:	|  |  |   add.l d1,d0
    8c10:	|  |  |   add.l d0,d0
    8c12:	|  |  |   add.l d0,d0
    8c14:	|  |  |   adda.l d0,a0
    8c16:	|  |  |   move.l 4(a0),d0
    8c1a:	|  |  |   move.l 12(sp),-(sp)
    8c1e:	|  |  |   move.l d0,-(sp)
    8c20:	|  |  |   jsr 958 <put4bytes>
    8c26:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    8c28:	|  |  |   movea.l 8(sp),a0
    8c2c:	|  |  |   movea.l 4(a0),a0
    8c30:	|  |  |   move.l (sp),d1
    8c32:	|  |  |   move.l d1,d0
    8c34:	|  |  |   add.l d0,d0
    8c36:	|  |  |   add.l d1,d0
    8c38:	|  |  |   add.l d0,d0
    8c3a:	|  |  |   add.l d0,d0
    8c3c:	|  |  |   adda.l d0,a0
    8c3e:	|  |  |   move.l 8(a0),d0
    8c42:	|  |  |   move.l 12(sp),-(sp)
    8c46:	|  |  |   move.l d0,-(sp)
    8c48:	|  |  |   jsr 958 <put4bytes>
    8c4e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    8c50:	|  |  |   addq.l #1,(sp)
    8c52:	|  |  \-> movea.l 8(sp),a0
    8c56:	|  |      move.l 8(a0),d0
    8c5a:	|  |      cmp.l (sp),d0
    8c5c:	|  \----- bgt.w 8bda <saveAnim+0x3e>
		}
	}
	return TRUE;
    8c60:	\-------> moveq #1,d0
}
    8c62:	          addq.l #4,sp
    8c64:	          rts

00008c66 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    8c66:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    8c68:	             movea.l 8(sp),a0
    8c6c:	             move.l 4(a0),d0
    8c70:	             move.l 12(sp),-(sp)
    8c74:	             move.l d0,-(sp)
    8c76:	             jsr 8d0 <put2bytes>
    8c7c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8c7e:	             clr.l (sp)
    8c80:	   /-------- bra.s 8cac <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    8c82:	/--|-------> movea.l 8(sp),a0
    8c86:	|  |         move.l (a0),d1
    8c88:	|  |         move.l (sp),d0
    8c8a:	|  |         add.l d0,d0
    8c8c:	|  |         add.l d0,d0
    8c8e:	|  |         movea.l d1,a0
    8c90:	|  |         adda.l d0,a0
    8c92:	|  |         move.l (a0),d0
    8c94:	|  |         move.l 12(sp),-(sp)
    8c98:	|  |         move.l d0,-(sp)
    8c9a:	|  |         jsr 8b9c <saveAnim>
    8ca0:	|  |         addq.l #8,sp
    8ca2:	|  |         tst.w d0
    8ca4:	|  |     /-- bne.s 8caa <saveCostume+0x44>
    8ca6:	|  |     |   clr.w d0
    8ca8:	|  |  /--|-- bra.s 8cc0 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8caa:	|  |  |  \-> addq.l #1,(sp)
    8cac:	|  \--|----> movea.l 8(sp),a0
    8cb0:	|     |      move.l 4(a0),d1
    8cb4:	|     |      move.l d1,d0
    8cb6:	|     |      add.l d0,d0
    8cb8:	|     |      add.l d1,d0
    8cba:	|     |      cmp.l (sp),d0
    8cbc:	\-----|----- bgt.s 8c82 <saveCostume+0x1c>
	}

	return TRUE;
    8cbe:	      |      moveq #1,d0
}
    8cc0:	      \----> addq.l #4,sp
    8cc2:	             rts

00008cc4 <savePeople>:

BOOL savePeople (BPTR fp) {
    8cc4:	             lea -144(sp),sp
    8cc8:	             move.l a6,-(sp)
    8cca:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    8ccc:	             move.l 19444 <allPeople>,148(sp)
	int countPeople = 0, a;
    8cd4:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    8cd8:	             move.w 18d38 <scaleHorizon>,d0
    8cde:	             movea.w d0,a0
    8ce0:	             move.l 156(sp),-(sp)
    8ce4:	             move.l a0,-(sp)
    8ce6:	             jsr a9c <putSigned>
    8cec:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    8cee:	             move.w 18d3a <scaleDivide>,d0
    8cf4:	             movea.w d0,a0
    8cf6:	             move.l 156(sp),-(sp)
    8cfa:	             move.l a0,-(sp)
    8cfc:	             jsr a9c <putSigned>
    8d02:	             addq.l #8,sp

	while (me) {
    8d04:	         /-- bra.s 8d14 <savePeople+0x50>
		countPeople ++;
    8d06:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    8d0a:	      |  |   movea.l 148(sp),a0
    8d0e:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    8d14:	      |  \-> tst.l 148(sp)
    8d18:	      \----- bne.s 8d06 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    8d1a:	             move.l 156(sp),-(sp)
    8d1e:	             move.l 148(sp),-(sp)
    8d22:	             jsr 8d0 <put2bytes>
    8d28:	             addq.l #8,sp

	me = allPeople;
    8d2a:	             move.l 19444 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    8d32:	             clr.l 140(sp)
    8d36:	   /-------- bra.w 918e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    8d3a:	/--|-------> movea.l 148(sp),a0
    8d3e:	|  |         move.l (a0),d0
    8d40:	|  |         move.l 156(sp),-(sp)
    8d44:	|  |         move.l d0,-(sp)
    8d46:	|  |         jsr a46 <putFloat>
    8d4c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    8d4e:	|  |         movea.l 148(sp),a0
    8d52:	|  |         move.l 4(a0),d0
    8d56:	|  |         move.l 156(sp),-(sp)
    8d5a:	|  |         move.l d0,-(sp)
    8d5c:	|  |         jsr a46 <putFloat>
    8d62:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    8d64:	|  |         movea.l 148(sp),a0
    8d68:	|  |         move.l 68(a0),d0
    8d6c:	|  |         move.l 156(sp),-(sp)
    8d70:	|  |         move.l d0,-(sp)
    8d72:	|  |         jsr 8c66 <saveCostume>
    8d78:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    8d7a:	|  |         movea.l 148(sp),a0
    8d7e:	|  |         move.l 60(a0),d0
    8d82:	|  |         move.l 156(sp),-(sp)
    8d86:	|  |         move.l d0,-(sp)
    8d88:	|  |         jsr 8b9c <saveAnim>
    8d8e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    8d90:	|  |         move.l 156(sp),136(sp)
    8d96:	|  |         movea.l 148(sp),a0
    8d9a:	|  |         move.l 60(a0),d1
    8d9e:	|  |         movea.l 148(sp),a0
    8da2:	|  |         move.l 64(a0),d0
    8da6:	|  |         cmp.l d1,d0
    8da8:	|  |         seq d0
    8daa:	|  |         neg.b d0
    8dac:	|  |         move.b d0,d0
    8dae:	|  |         andi.l #255,d0
    8db4:	|  |         move.l d0,132(sp)
    8db8:	|  |         move.l 19394 <DOSBase>,d0
    8dbe:	|  |         movea.l d0,a6
    8dc0:	|  |         move.l 136(sp),d1
    8dc4:	|  |         move.l 132(sp),d2
    8dc8:	|  |         jsr -312(a6)
    8dcc:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    8dd0:	|  |         movea.l 148(sp),a0
    8dd4:	|  |         move.l 20(a0),d0
    8dd8:	|  |         move.l 156(sp),-(sp)
    8ddc:	|  |         move.l d0,-(sp)
    8dde:	|  |         jsr a46 <putFloat>
    8de4:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    8de6:	|  |         movea.l 148(sp),a0
    8dea:	|  |         move.l 106(a0),d0
    8dee:	|  |         move.l 156(sp),-(sp)
    8df2:	|  |         move.l d0,-(sp)
    8df4:	|  |         jsr 8d0 <put2bytes>
    8dfa:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    8dfc:	|  |         movea.l 148(sp),a0
    8e00:	|  |         move.l 8(a0),d0
    8e04:	|  |         move.l 156(sp),-(sp)
    8e08:	|  |         move.l d0,-(sp)
    8e0a:	|  |         jsr 8d0 <put2bytes>
    8e10:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    8e12:	|  |         movea.l 148(sp),a0
    8e16:	|  |         move.l 28(a0),d0
    8e1a:	|  |         move.l 156(sp),-(sp)
    8e1e:	|  |         move.l d0,-(sp)
    8e20:	|  |         jsr 8d0 <put2bytes>
    8e26:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    8e28:	|  |         movea.l 148(sp),a0
    8e2c:	|  |         move.l 32(a0),d0
    8e30:	|  |         move.l 156(sp),-(sp)
    8e34:	|  |         move.l d0,-(sp)
    8e36:	|  |         jsr 8d0 <put2bytes>
    8e3c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    8e3e:	|  |         movea.l 148(sp),a0
    8e42:	|  |         move.l 36(a0),d0
    8e46:	|  |         move.l 156(sp),-(sp)
    8e4a:	|  |         move.l d0,-(sp)
    8e4c:	|  |         jsr 8d0 <put2bytes>
    8e52:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    8e54:	|  |         movea.l 148(sp),a0
    8e58:	|  |         move.l 40(a0),d0
    8e5c:	|  |         move.l 156(sp),-(sp)
    8e60:	|  |         move.l d0,-(sp)
    8e62:	|  |         jsr 8d0 <put2bytes>
    8e68:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    8e6a:	|  |         movea.l 148(sp),a0
    8e6e:	|  |         move.l 72(a0),d0
    8e72:	|  |         move.l 156(sp),-(sp)
    8e76:	|  |         move.l d0,-(sp)
    8e78:	|  |         jsr 8d0 <put2bytes>
    8e7e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    8e80:	|  |         movea.l 148(sp),a0
    8e84:	|  |         move.l 76(a0),d0
    8e88:	|  |         move.l 156(sp),-(sp)
    8e8c:	|  |         move.l d0,-(sp)
    8e8e:	|  |         jsr 8d0 <put2bytes>
    8e94:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    8e96:	|  |         movea.l 148(sp),a0
    8e9a:	|  |         move.l 16(a0),d0
    8e9e:	|  |         move.l 156(sp),-(sp)
    8ea2:	|  |         move.l d0,-(sp)
    8ea4:	|  |         jsr 8d0 <put2bytes>
    8eaa:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    8eac:	|  |         movea.l 148(sp),a0
    8eb0:	|  |         move.l 110(a0),d0
    8eb4:	|  |         move.l 156(sp),-(sp)
    8eb8:	|  |         move.l d0,-(sp)
    8eba:	|  |         jsr 8d0 <put2bytes>
    8ec0:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    8ec2:	|  |         movea.l 148(sp),a0
    8ec6:	|  |         move.l 12(a0),d0
    8eca:	|  |         move.l d0,d0
    8ecc:	|  |         movea.w d0,a0
    8ece:	|  |         move.l 156(sp),-(sp)
    8ed2:	|  |         move.l a0,-(sp)
    8ed4:	|  |         jsr a9c <putSigned>
    8eda:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    8edc:	|  |         move.l 156(sp),124(sp)
    8ee2:	|  |         movea.l 148(sp),a0
    8ee6:	|  |         move.w 92(a0),d0
    8eea:	|  |         movea.w d0,a0
    8eec:	|  |         move.l a0,120(sp)
    8ef0:	|  |         move.l 19394 <DOSBase>,d0
    8ef6:	|  |         movea.l d0,a6
    8ef8:	|  |         move.l 124(sp),d1
    8efc:	|  |         move.l 120(sp),d2
    8f00:	|  |         jsr -312(a6)
    8f04:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    8f08:	|  |         move.l 156(sp),112(sp)
    8f0e:	|  |         movea.l 148(sp),a0
    8f12:	|  |         move.w 52(a0),d0
    8f16:	|  |         movea.w d0,a0
    8f18:	|  |         move.l a0,108(sp)
    8f1c:	|  |         move.l 19394 <DOSBase>,d0
    8f22:	|  |         movea.l d0,a6
    8f24:	|  |         move.l 112(sp),d1
    8f28:	|  |         move.l 108(sp),d2
    8f2c:	|  |         jsr -312(a6)
    8f30:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    8f34:	|  |         move.l 156(sp),100(sp)
    8f3a:	|  |         movea.l 148(sp),a0
    8f3e:	|  |         move.w 54(a0),d0
    8f42:	|  |         movea.w d0,a0
    8f44:	|  |         move.l a0,96(sp)
    8f48:	|  |         move.l 19394 <DOSBase>,d0
    8f4e:	|  |         movea.l d0,a6
    8f50:	|  |         move.l 100(sp),d1
    8f54:	|  |         move.l 96(sp),d2
    8f58:	|  |         jsr -312(a6)
    8f5c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    8f60:	|  |         movea.l 148(sp),a0
    8f64:	|  |         move.l 56(a0),d0
    8f68:	|  |  /----- beq.s 8fa6 <savePeople+0x2e2>
			FPutC (fp, 1);
    8f6a:	|  |  |      move.l 156(sp),76(sp)
    8f70:	|  |  |      moveq #1,d0
    8f72:	|  |  |      move.l d0,72(sp)
    8f76:	|  |  |      move.l 19394 <DOSBase>,d0
    8f7c:	|  |  |      movea.l d0,a6
    8f7e:	|  |  |      move.l 76(sp),d1
    8f82:	|  |  |      move.l 72(sp),d2
    8f86:	|  |  |      jsr -312(a6)
    8f8a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    8f8e:	|  |  |      movea.l 148(sp),a0
    8f92:	|  |  |      move.l 56(a0),d0
    8f96:	|  |  |      move.l 156(sp),-(sp)
    8f9a:	|  |  |      move.l d0,-(sp)
    8f9c:	|  |  |      jsr a224 <saveFunction>
    8fa2:	|  |  |      addq.l #8,sp
    8fa4:	|  |  |  /-- bra.s 8fca <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    8fa6:	|  |  \--|-> move.l 156(sp),88(sp)
    8fac:	|  |     |   moveq #1,d0
    8fae:	|  |     |   move.l d0,84(sp)
    8fb2:	|  |     |   move.l 19394 <DOSBase>,d0
    8fb8:	|  |     |   movea.l d0,a6
    8fba:	|  |     |   move.l 88(sp),d1
    8fbe:	|  |     |   move.l 84(sp),d2
    8fc2:	|  |     |   jsr -312(a6)
    8fc6:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    8fca:	|  |     \-> movea.l 148(sp),a0
    8fce:	|  |         move.l 94(a0),d0
    8fd2:	|  |         move.l 156(sp),-(sp)
    8fd6:	|  |         move.l d0,-(sp)
    8fd8:	|  |         jsr 8d0 <put2bytes>
    8fde:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    8fe0:	|  |         movea.l 148(sp),a0
    8fe4:	|  |         move.l 80(a0),d0
    8fe8:	|  |         move.l 156(sp),-(sp)
    8fec:	|  |         move.l d0,-(sp)
    8fee:	|  |         jsr 8d0 <put2bytes>
    8ff4:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    8ff6:	|  |         movea.l 148(sp),a0
    8ffa:	|  |         move.l 88(a0),d0
    8ffe:	|  |         move.l 156(sp),-(sp)
    9002:	|  |         move.l d0,-(sp)
    9004:	|  |         jsr 8d0 <put2bytes>
    900a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    900c:	|  |         movea.l 148(sp),a0
    9010:	|  |         move.l 84(a0),d0
    9014:	|  |         move.l 156(sp),-(sp)
    9018:	|  |         move.l d0,-(sp)
    901a:	|  |         jsr 8d0 <put2bytes>
    9020:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    9022:	|  |         movea.l 148(sp),a0
    9026:	|  |         move.l 98(a0),d0
    902a:	|  |         move.l d0,d0
    902c:	|  |         movea.w d0,a0
    902e:	|  |         move.l 156(sp),-(sp)
    9032:	|  |         move.l a0,-(sp)
    9034:	|  |         jsr a9c <putSigned>
    903a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    903c:	|  |         movea.l 148(sp),a0
    9040:	|  |         move.l 44(a0),d0
    9044:	|  |         move.l d0,d0
    9046:	|  |         movea.w d0,a0
    9048:	|  |         move.l 156(sp),-(sp)
    904c:	|  |         move.l a0,-(sp)
    904e:	|  |         jsr a9c <putSigned>
    9054:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    9056:	|  |         movea.l 148(sp),a0
    905a:	|  |         move.l 48(a0),d0
    905e:	|  |         move.l d0,d0
    9060:	|  |         movea.w d0,a0
    9062:	|  |         move.l 156(sp),-(sp)
    9066:	|  |         move.l a0,-(sp)
    9068:	|  |         jsr a9c <putSigned>
    906e:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    9070:	|  |         move.l 156(sp),64(sp)
    9076:	|  |         movea.l 148(sp),a0
    907a:	|  |         move.b 114(a0),d0
    907e:	|  |         move.b d0,d0
    9080:	|  |         andi.l #255,d0
    9086:	|  |         move.l d0,60(sp)
    908a:	|  |         move.l 19394 <DOSBase>,d0
    9090:	|  |         movea.l d0,a6
    9092:	|  |         move.l 64(sp),d1
    9096:	|  |         move.l 60(sp),d2
    909a:	|  |         jsr -312(a6)
    909e:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    90a2:	|  |         move.l 156(sp),52(sp)
    90a8:	|  |         movea.l 148(sp),a0
    90ac:	|  |         move.b 115(a0),d0
    90b0:	|  |         move.b d0,d0
    90b2:	|  |         andi.l #255,d0
    90b8:	|  |         move.l d0,48(sp)
    90bc:	|  |         move.l 19394 <DOSBase>,d0
    90c2:	|  |         movea.l d0,a6
    90c4:	|  |         move.l 52(sp),d1
    90c8:	|  |         move.l 48(sp),d2
    90cc:	|  |         jsr -312(a6)
    90d0:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    90d4:	|  |         move.l 156(sp),40(sp)
    90da:	|  |         movea.l 148(sp),a0
    90de:	|  |         move.b 116(a0),d0
    90e2:	|  |         move.b d0,d0
    90e4:	|  |         andi.l #255,d0
    90ea:	|  |         move.l d0,36(sp)
    90ee:	|  |         move.l 19394 <DOSBase>,d0
    90f4:	|  |         movea.l d0,a6
    90f6:	|  |         move.l 40(sp),d1
    90fa:	|  |         move.l 36(sp),d2
    90fe:	|  |         jsr -312(a6)
    9102:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    9106:	|  |         move.l 156(sp),28(sp)
    910c:	|  |         movea.l 148(sp),a0
    9110:	|  |         move.b 117(a0),d0
    9114:	|  |         move.b d0,d0
    9116:	|  |         andi.l #255,d0
    911c:	|  |         move.l d0,24(sp)
    9120:	|  |         move.l 19394 <DOSBase>,d0
    9126:	|  |         movea.l d0,a6
    9128:	|  |         move.l 28(sp),d1
    912c:	|  |         move.l 24(sp),d2
    9130:	|  |         jsr -312(a6)
    9134:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    9138:	|  |         move.l 156(sp),16(sp)
    913e:	|  |         movea.l 148(sp),a0
    9142:	|  |         move.b 118(a0),d0
    9146:	|  |         move.b d0,d0
    9148:	|  |         andi.l #255,d0
    914e:	|  |         move.l d0,12(sp)
    9152:	|  |         move.l 19394 <DOSBase>,d0
    9158:	|  |         movea.l d0,a6
    915a:	|  |         move.l 16(sp),d1
    915e:	|  |         move.l 12(sp),d2
    9162:	|  |         jsr -312(a6)
    9166:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    916a:	|  |         movea.l 148(sp),a0
    916e:	|  |         move.l 102(a0),d0
    9172:	|  |         move.l 156(sp),-(sp)
    9176:	|  |         move.l d0,-(sp)
    9178:	|  |         jsr b418 <saveObjectRef>
    917e:	|  |         addq.l #8,sp

		me = me -> next;
    9180:	|  |         movea.l 148(sp),a0
    9184:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    918a:	|  |         addq.l #1,140(sp)
    918e:	|  \-------> movea.l 140(sp),a0
    9192:	|            cmpa.l 144(sp),a0
    9196:	\----------- blt.w 8d3a <savePeople+0x76>
	}
	return TRUE;
    919a:	             moveq #1,d0
}
    919c:	             move.l (sp)+,d2
    919e:	             movea.l (sp)+,a6
    91a0:	             lea 144(sp),sp
    91a4:	             rts

000091a6 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    91a6:	movea.l 4(sp),a0
    91aa:	move.l 8(sp),(a0)
}
    91ae:	nop
    91b0:	rts

000091b2 <setDrawMode>:


void setDrawMode (int h, int ob) {
    91b2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    91b4:	       move.l 12(sp),-(sp)
    91b8:	       jsr 8284 <findPerson>
    91be:	       addq.l #4,sp
    91c0:	       move.l d0,(sp)
	if (! moveMe) return;
    91c2:	/----- beq.s 91d6 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    91c4:	|      move.l 8(sp),-(sp)
    91c8:	|      move.l 4(sp),-(sp)
    91cc:	|      jsr 91dc <setMyDrawMode>
    91d2:	|      addq.l #8,sp
    91d4:	|  /-- bra.s 91d8 <setDrawMode+0x26>
	if (! moveMe) return;
    91d6:	\--|-> nop
}
    91d8:	   \-> addq.l #4,sp
    91da:	       rts

000091dc <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    91dc:	       moveq #19,d0
    91de:	       cmp.l 8(sp),d0
    91e2:	/----- bcs.w 96ba <setMyDrawMode+0x4de>
    91e6:	|      move.l 8(sp),d0
    91ea:	|      add.l d0,d0
    91ec:	|      movea.l d0,a0
    91ee:	|      adda.l #37370,a0
    91f4:	|      move.w (a0),d0
    91f6:	|      jmp (91fa <setMyDrawMode+0x1e>,pc,d0.w)
    91fa:	|      .short 0x04c0
    91fc:	|      ori.l #6684712,-(a4)
    9202:	|      btst d0,-(a0)
    9204:	|      bchg d0,(a6)+
    9206:	|      bclr d0,(a4)+
    9208:	|      bset d0,(a2)+
    920a:	|      andi.b #84,(a6)
    920e:	|      andi.l #55575312,(a2)
    9214:	|      .short 0x02d0
    9216:	|      bclr d1,(a0)
    9218:	|      .short 0x044a
    921a:	|      .short 0x040c
    921c:	|      movep.l d1,1158(a6)
    9220:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9222:	|      movea.l 4(sp),a0
    9226:	|      clr.b 116(a0)
    922a:	|      movea.l 4(sp),a0
    922e:	|      move.b 116(a0),d0
    9232:	|      movea.l 4(sp),a0
    9236:	|      move.b d0,115(a0)
    923a:	|      movea.l 4(sp),a0
    923e:	|      move.b 115(a0),d0
    9242:	|      movea.l 4(sp),a0
    9246:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    924a:	|      movea.l 4(sp),a0
    924e:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    9252:	|      movea.l 4(sp),a0
    9256:	|      move.b #64,118(a0)
			break;
    925c:	|  /-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9260:	|  |   movea.l 4(sp),a0
    9264:	|  |   clr.b 116(a0)
    9268:	|  |   movea.l 4(sp),a0
    926c:	|  |   move.b 116(a0),d0
    9270:	|  |   movea.l 4(sp),a0
    9274:	|  |   move.b d0,115(a0)
    9278:	|  |   movea.l 4(sp),a0
    927c:	|  |   move.b 115(a0),d0
    9280:	|  |   movea.l 4(sp),a0
    9284:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9288:	|  |   movea.l 4(sp),a0
    928c:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    9290:	|  |   movea.l 4(sp),a0
    9294:	|  |   move.b #-128,118(a0)
			break;
    929a:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    929e:	|  |   movea.l 4(sp),a0
    92a2:	|  |   clr.b 116(a0)
    92a6:	|  |   movea.l 4(sp),a0
    92aa:	|  |   move.b 116(a0),d0
    92ae:	|  |   movea.l 4(sp),a0
    92b2:	|  |   move.b d0,115(a0)
    92b6:	|  |   movea.l 4(sp),a0
    92ba:	|  |   move.b 115(a0),d0
    92be:	|  |   movea.l 4(sp),a0
    92c2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    92c6:	|  |   movea.l 4(sp),a0
    92ca:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    92ce:	|  |   movea.l 4(sp),a0
    92d2:	|  |   move.b #-64,118(a0)
			break;
    92d8:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    92dc:	|  |   movea.l 4(sp),a0
    92e0:	|  |   clr.b 116(a0)
    92e4:	|  |   movea.l 4(sp),a0
    92e8:	|  |   move.b 116(a0),d0
    92ec:	|  |   movea.l 4(sp),a0
    92f0:	|  |   move.b d0,115(a0)
    92f4:	|  |   movea.l 4(sp),a0
    92f8:	|  |   move.b 115(a0),d0
    92fc:	|  |   movea.l 4(sp),a0
    9300:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9304:	|  |   movea.l 4(sp),a0
    9308:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    930c:	|  |   movea.l 4(sp),a0
    9310:	|  |   move.b #-2,118(a0)
			break;
    9316:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    931a:	|  |   movea.l 4(sp),a0
    931e:	|  |   clr.b 116(a0)
    9322:	|  |   movea.l 4(sp),a0
    9326:	|  |   move.b 116(a0),d0
    932a:	|  |   movea.l 4(sp),a0
    932e:	|  |   move.b d0,115(a0)
    9332:	|  |   movea.l 4(sp),a0
    9336:	|  |   move.b 115(a0),d0
    933a:	|  |   movea.l 4(sp),a0
    933e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9342:	|  |   movea.l 4(sp),a0
    9346:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    934c:	|  |   movea.l 4(sp),a0
    9350:	|  |   clr.b 118(a0)
			break;
    9354:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9358:	|  |   movea.l 4(sp),a0
    935c:	|  |   clr.b 116(a0)
    9360:	|  |   movea.l 4(sp),a0
    9364:	|  |   move.b 116(a0),d0
    9368:	|  |   movea.l 4(sp),a0
    936c:	|  |   move.b d0,115(a0)
    9370:	|  |   movea.l 4(sp),a0
    9374:	|  |   move.b 115(a0),d0
    9378:	|  |   movea.l 4(sp),a0
    937c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9380:	|  |   movea.l 4(sp),a0
    9384:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    938a:	|  |   movea.l 4(sp),a0
    938e:	|  |   clr.b 118(a0)
			break;
    9392:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9396:	|  |   movea.l 4(sp),a0
    939a:	|  |   clr.b 116(a0)
    939e:	|  |   movea.l 4(sp),a0
    93a2:	|  |   move.b 116(a0),d0
    93a6:	|  |   movea.l 4(sp),a0
    93aa:	|  |   move.b d0,115(a0)
    93ae:	|  |   movea.l 4(sp),a0
    93b2:	|  |   move.b 115(a0),d0
    93b6:	|  |   movea.l 4(sp),a0
    93ba:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    93be:	|  |   movea.l 4(sp),a0
    93c2:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    93c8:	|  |   movea.l 4(sp),a0
    93cc:	|  |   clr.b 118(a0)
			break;
    93d0:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    93d4:	|  |   movea.l 4(sp),a0
    93d8:	|  |   clr.b 116(a0)
    93dc:	|  |   movea.l 4(sp),a0
    93e0:	|  |   move.b 116(a0),d0
    93e4:	|  |   movea.l 4(sp),a0
    93e8:	|  |   move.b d0,115(a0)
    93ec:	|  |   movea.l 4(sp),a0
    93f0:	|  |   move.b 115(a0),d0
    93f4:	|  |   movea.l 4(sp),a0
    93f8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    93fc:	|  |   movea.l 4(sp),a0
    9400:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9404:	|  |   movea.l 4(sp),a0
    9408:	|  |   clr.b 118(a0)
			break;
    940c:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9410:	|  |   movea.l 4(sp),a0
    9414:	|  |   clr.b 116(a0)
    9418:	|  |   movea.l 4(sp),a0
    941c:	|  |   move.b 116(a0),d0
    9420:	|  |   movea.l 4(sp),a0
    9424:	|  |   move.b d0,115(a0)
    9428:	|  |   movea.l 4(sp),a0
    942c:	|  |   move.b 115(a0),d0
    9430:	|  |   movea.l 4(sp),a0
    9434:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9438:	|  |   movea.l 4(sp),a0
    943c:	|  |   st 117(a0)
			moveMe->transparency = 64;
    9440:	|  |   movea.l 4(sp),a0
    9444:	|  |   move.b #64,118(a0)
			break;
    944a:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    944e:	|  |   movea.l 4(sp),a0
    9452:	|  |   clr.b 116(a0)
    9456:	|  |   movea.l 4(sp),a0
    945a:	|  |   move.b 116(a0),d0
    945e:	|  |   movea.l 4(sp),a0
    9462:	|  |   move.b d0,115(a0)
    9466:	|  |   movea.l 4(sp),a0
    946a:	|  |   move.b 115(a0),d0
    946e:	|  |   movea.l 4(sp),a0
    9472:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9476:	|  |   movea.l 4(sp),a0
    947a:	|  |   st 117(a0)
			moveMe->transparency = 128;
    947e:	|  |   movea.l 4(sp),a0
    9482:	|  |   move.b #-128,118(a0)
			break;
    9488:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    948c:	|  |   movea.l 4(sp),a0
    9490:	|  |   clr.b 116(a0)
    9494:	|  |   movea.l 4(sp),a0
    9498:	|  |   move.b 116(a0),d0
    949c:	|  |   movea.l 4(sp),a0
    94a0:	|  |   move.b d0,115(a0)
    94a4:	|  |   movea.l 4(sp),a0
    94a8:	|  |   move.b 115(a0),d0
    94ac:	|  |   movea.l 4(sp),a0
    94b0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    94b4:	|  |   movea.l 4(sp),a0
    94b8:	|  |   st 117(a0)
			moveMe->transparency = 192;
    94bc:	|  |   movea.l 4(sp),a0
    94c0:	|  |   move.b #-64,118(a0)
			break;
    94c6:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    94ca:	|  |   movea.l 4(sp),a0
    94ce:	|  |   move.b #-128,116(a0)
    94d4:	|  |   movea.l 4(sp),a0
    94d8:	|  |   move.b 116(a0),d0
    94dc:	|  |   movea.l 4(sp),a0
    94e0:	|  |   move.b d0,115(a0)
    94e4:	|  |   movea.l 4(sp),a0
    94e8:	|  |   move.b 115(a0),d0
    94ec:	|  |   movea.l 4(sp),a0
    94f0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    94f4:	|  |   movea.l 4(sp),a0
    94f8:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    94fe:	|  |   movea.l 4(sp),a0
    9502:	|  |   clr.b 118(a0)
			break;
    9506:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    950a:	|  |   movea.l 4(sp),a0
    950e:	|  |   move.b #-128,116(a0)
    9514:	|  |   movea.l 4(sp),a0
    9518:	|  |   move.b 116(a0),d0
    951c:	|  |   movea.l 4(sp),a0
    9520:	|  |   move.b d0,115(a0)
    9524:	|  |   movea.l 4(sp),a0
    9528:	|  |   move.b 115(a0),d0
    952c:	|  |   movea.l 4(sp),a0
    9530:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9534:	|  |   movea.l 4(sp),a0
    9538:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    953e:	|  |   movea.l 4(sp),a0
    9542:	|  |   clr.b 118(a0)
			break;
    9546:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    954a:	|  |   movea.l 4(sp),a0
    954e:	|  |   move.b #-128,116(a0)
    9554:	|  |   movea.l 4(sp),a0
    9558:	|  |   move.b 116(a0),d0
    955c:	|  |   movea.l 4(sp),a0
    9560:	|  |   move.b d0,115(a0)
    9564:	|  |   movea.l 4(sp),a0
    9568:	|  |   move.b 115(a0),d0
    956c:	|  |   movea.l 4(sp),a0
    9570:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9574:	|  |   movea.l 4(sp),a0
    9578:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    957e:	|  |   movea.l 4(sp),a0
    9582:	|  |   clr.b 118(a0)
			break;
    9586:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    958a:	|  |   movea.l 4(sp),a0
    958e:	|  |   move.b #-128,116(a0)
    9594:	|  |   movea.l 4(sp),a0
    9598:	|  |   move.b 116(a0),d0
    959c:	|  |   movea.l 4(sp),a0
    95a0:	|  |   move.b d0,115(a0)
    95a4:	|  |   movea.l 4(sp),a0
    95a8:	|  |   move.b 115(a0),d0
    95ac:	|  |   movea.l 4(sp),a0
    95b0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    95b4:	|  |   movea.l 4(sp),a0
    95b8:	|  |   st 117(a0)
			moveMe->transparency = 0;
    95bc:	|  |   movea.l 4(sp),a0
    95c0:	|  |   clr.b 118(a0)
			break;
    95c4:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    95c8:	|  |   movea.l 4(sp),a0
    95cc:	|  |   st 116(a0)
    95d0:	|  |   movea.l 4(sp),a0
    95d4:	|  |   move.b 116(a0),d0
    95d8:	|  |   movea.l 4(sp),a0
    95dc:	|  |   move.b d0,115(a0)
    95e0:	|  |   movea.l 4(sp),a0
    95e4:	|  |   move.b 115(a0),d0
    95e8:	|  |   movea.l 4(sp),a0
    95ec:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    95f0:	|  |   movea.l 4(sp),a0
    95f4:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    95fa:	|  |   movea.l 4(sp),a0
    95fe:	|  |   clr.b 118(a0)
			break;
    9602:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9606:	|  |   movea.l 4(sp),a0
    960a:	|  |   st 116(a0)
    960e:	|  |   movea.l 4(sp),a0
    9612:	|  |   move.b 116(a0),d0
    9616:	|  |   movea.l 4(sp),a0
    961a:	|  |   move.b d0,115(a0)
    961e:	|  |   movea.l 4(sp),a0
    9622:	|  |   move.b 115(a0),d0
    9626:	|  |   movea.l 4(sp),a0
    962a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    962e:	|  |   movea.l 4(sp),a0
    9632:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9638:	|  |   movea.l 4(sp),a0
    963c:	|  |   clr.b 118(a0)
			break;
    9640:	|  +-- bra.w 96f4 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9644:	|  |   movea.l 4(sp),a0
    9648:	|  |   st 116(a0)
    964c:	|  |   movea.l 4(sp),a0
    9650:	|  |   move.b 116(a0),d0
    9654:	|  |   movea.l 4(sp),a0
    9658:	|  |   move.b d0,115(a0)
    965c:	|  |   movea.l 4(sp),a0
    9660:	|  |   move.b 115(a0),d0
    9664:	|  |   movea.l 4(sp),a0
    9668:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    966c:	|  |   movea.l 4(sp),a0
    9670:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9676:	|  |   movea.l 4(sp),a0
    967a:	|  |   clr.b 118(a0)
			break;
    967e:	|  +-- bra.s 96f4 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9680:	|  |   movea.l 4(sp),a0
    9684:	|  |   st 116(a0)
    9688:	|  |   movea.l 4(sp),a0
    968c:	|  |   move.b 116(a0),d0
    9690:	|  |   movea.l 4(sp),a0
    9694:	|  |   move.b d0,115(a0)
    9698:	|  |   movea.l 4(sp),a0
    969c:	|  |   move.b 115(a0),d0
    96a0:	|  |   movea.l 4(sp),a0
    96a4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    96a8:	|  |   movea.l 4(sp),a0
    96ac:	|  |   st 117(a0)
			moveMe->transparency = 0;
    96b0:	|  |   movea.l 4(sp),a0
    96b4:	|  |   clr.b 118(a0)
			break;
    96b8:	|  +-- bra.s 96f4 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    96ba:	\--|-> movea.l 4(sp),a0
    96be:	   |   clr.b 116(a0)
    96c2:	   |   movea.l 4(sp),a0
    96c6:	   |   move.b 116(a0),d0
    96ca:	   |   movea.l 4(sp),a0
    96ce:	   |   move.b d0,115(a0)
    96d2:	   |   movea.l 4(sp),a0
    96d6:	   |   move.b 115(a0),d0
    96da:	   |   movea.l 4(sp),a0
    96de:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    96e2:	   |   movea.l 4(sp),a0
    96e6:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    96ea:	   |   movea.l 4(sp),a0
    96ee:	   |   clr.b 118(a0)
			break;
    96f2:	   |   nop
	}
}
    96f4:	   \-> nop
    96f6:	       rts

000096f8 <shufflePeople>:

void shufflePeople () {
    96f8:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    96fc:	             move.l #103492,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    9704:	             move.l 19444 <allPeople>,d0
    970a:	/----------- beq.w 97e0 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    970e:	|     /----- bra.w 97d0 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    9712:	|  /--|----> movea.l 16(sp),a0
    9716:	|  |  |      movea.l (a0),a0
    9718:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    971e:	|  |  |      movea.l 16(sp),a0
    9722:	|  |  |      movea.l (a0),a0
    9724:	|  |  |      move.l 106(a0),d0
    9728:	|  |  |      moveq #1,d1
    972a:	|  |  |      and.l d1,d0
    972c:	|  |  |  /-- beq.s 9744 <shufflePeople+0x4c>
    972e:	|  |  |  |   move.l #1148846080,-(sp)
    9734:	|  |  |  |   move.l 16(sp),-(sp)
    9738:	|  |  |  |   jsr 1424c <__addsf3>
    973e:	|  |  |  |   addq.l #8,sp
    9740:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    9744:	|  |  |  \-> movea.l 16(sp),a0
    9748:	|  |  |      movea.l (a0),a0
    974a:	|  |  |      movea.l 24(a0),a0
    974e:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    9754:	|  |  |      movea.l 16(sp),a0
    9758:	|  |  |      movea.l (a0),a0
    975a:	|  |  |      movea.l 24(a0),a0
    975e:	|  |  |      move.l 106(a0),d0
    9762:	|  |  |      moveq #1,d1
    9764:	|  |  |      and.l d1,d0
    9766:	|  |  |  /-- beq.s 977e <shufflePeople+0x86>
    9768:	|  |  |  |   move.l #1148846080,-(sp)
    976e:	|  |  |  |   move.l 12(sp),-(sp)
    9772:	|  |  |  |   jsr 1424c <__addsf3>
    9778:	|  |  |  |   addq.l #8,sp
    977a:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    977e:	|  |  |  \-> move.l 8(sp),-(sp)
    9782:	|  |  |      move.l 16(sp),-(sp)
    9786:	|  |  |      jsr 14606 <__gtsf2>
    978c:	|  |  |      addq.l #8,sp
    978e:	|  |  |      tst.l d0
    9790:	|  |  |  /-- ble.s 97c2 <shufflePeople+0xca>
			A = (*thisReference);
    9792:	|  |  |  |   movea.l 16(sp),a0
    9796:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    979a:	|  |  |  |   movea.l 16(sp),a0
    979e:	|  |  |  |   movea.l (a0),a0
    97a0:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    97a4:	|  |  |  |   movea.l (sp),a0
    97a6:	|  |  |  |   move.l 24(a0),d0
    97aa:	|  |  |  |   movea.l 4(sp),a0
    97ae:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    97b2:	|  |  |  |   movea.l (sp),a0
    97b4:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    97ba:	|  |  |  |   movea.l 16(sp),a0
    97be:	|  |  |  |   move.l (sp),(a0)
    97c0:	|  |  +--|-- bra.s 97d0 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    97c2:	|  |  |  \-> movea.l 16(sp),a0
    97c6:	|  |  |      move.l (a0),d0
    97c8:	|  |  |      moveq #24,d1
    97ca:	|  |  |      add.l d0,d1
    97cc:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    97d0:	|  |  \----> movea.l 16(sp),a0
    97d4:	|  |         movea.l (a0),a0
    97d6:	|  |         move.l 24(a0),d0
    97da:	|  \-------- bne.w 9712 <shufflePeople+0x1a>
    97de:	|        /-- bra.s 97e2 <shufflePeople+0xea>
	if (!allPeople) return;
    97e0:	\--------|-> nop
		}
	}
}
    97e2:	         \-> lea 20(sp),sp
    97e6:	             rts

000097e8 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    97e8:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    97ea:	       tst.l 8(sp)
    97ee:	   /-- bgt.s 97f4 <setCharacterWalkSpeed+0xc>
    97f0:	   |   clr.w d0
    97f2:	/--|-- bra.s 9812 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    97f4:	|  \-> move.l 12(sp),-(sp)
    97f8:	|      jsr 8284 <findPerson>
    97fe:	|      addq.l #4,sp
    9800:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    9802:	|  /-- bne.s 9808 <setCharacterWalkSpeed+0x20>
    9804:	|  |   clr.w d0
    9806:	+--|-- bra.s 9812 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    9808:	|  \-> movea.l (sp),a0
    980a:	|      move.l 8(sp),16(a0)
	return TRUE;
    9810:	|      moveq #1,d0
}
    9812:	\----> addq.l #4,sp
    9814:	       rts

00009816 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    9816:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9818:	       move.l 8(sp),-(sp)
    981c:	       jsr 8284 <findPerson>
    9822:	       addq.l #4,sp
    9824:	       move.l d0,(sp)
    if (thisPerson) {
    9826:	/----- beq.s 9846 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    9828:	|      movea.l (sp),a0
    982a:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    9830:	|      moveq #2,d0
    9832:	|      and.l 12(sp),d0
    9836:	|  /-- beq.s 9842 <setPersonExtra+0x2c>
    9838:	|  |   movea.l (sp),a0
    983a:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    9842:	|  \-> moveq #1,d0
    9844:	|  /-- bra.s 9848 <setPersonExtra+0x32>
    }
    return FALSE;
    9846:	\--|-> clr.w d0
}
    9848:	   \-> addq.l #4,sp
    984a:	       rts

0000984c <setScale>:


void setScale (short int h, short int d) {
    984c:	subq.l #4,sp
    984e:	move.l 8(sp),d1
    9852:	move.l 12(sp),d0
    9856:	move.w d1,d1
    9858:	move.w d1,2(sp)
    985c:	move.w d0,d0
    985e:	move.w d0,(sp)
	scaleHorizon = h;
    9860:	move.w 2(sp),18d38 <scaleHorizon>
	scaleDivide = d;
    9868:	move.w (sp),18d3a <scaleDivide>
}
    986e:	nop
    9870:	addq.l #4,sp
    9872:	rts

00009874 <setShown>:

void setShown (BOOL h, int ob) {
    9874:	    subq.l #8,sp
    9876:	    move.l 12(sp),d0
    987a:	    move.w d0,d0
    987c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    9880:	    move.l 16(sp),-(sp)
    9884:	    jsr 8284 <findPerson>
    988a:	    addq.l #4,sp
    988c:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    9890:	/-- beq.s 989c <setShown+0x28>
    9892:	|   movea.l 4(sp),a0
    9896:	|   move.w 2(sp),92(a0)
}
    989c:	\-> nop
    989e:	    addq.l #8,sp
    98a0:	    rts

000098a2 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    98a2:	       subq.l #8,sp
    98a4:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    98a6:	       movea.l 16(sp),a0
    98aa:	       move.l 80(a0),d0
    98ae:	       move.l d0,d1
    98b0:	       addi.l #360,d1
    98b6:	       movea.l 16(sp),a0
    98ba:	       move.l 84(a0),d0
    98be:	       move.l d1,d2
    98c0:	       sub.l d0,d2
    98c2:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    98c6:	       movea.l 16(sp),a0
    98ca:	       move.l 110(a0),d0
    98ce:	   /-- beq.s 98da <spinStep+0x38>
    98d0:	   |   movea.l 16(sp),a0
    98d4:	   |   move.l 110(a0),d0
    98d8:	/--|-- bra.s 98f4 <spinStep+0x52>
    98da:	|  \-> movea.l 16(sp),a0
    98de:	|      movea.l 68(a0),a0
    98e2:	|      move.l 4(a0),d0
    98e6:	|      move.l d0,-(sp)
    98e8:	|      pea 168 <decodeFilename+0x50>
    98ec:	|      jsr 14a9a <__divsi3>
    98f2:	|      addq.l #8,sp
    98f4:	\----> move.l d0,4(sp)
	while (diff > 180) {
    98f8:	   /-- bra.s 9902 <spinStep+0x60>
		diff -= 360;
    98fa:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    9902:	|  \-> cmpi.l #180,8(sp)
    990a:	\----- bgt.s 98fa <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    990c:	       move.l 8(sp),d0
    9910:	       cmp.l 4(sp),d0
    9914:	   /-- blt.s 9932 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    9916:	   |   movea.l 16(sp),a0
    991a:	   |   move.l 80(a0),d0
    991e:	   |   sub.l 4(sp),d0
    9922:	   |   move.l d0,-(sp)
    9924:	   |   move.l 20(sp),-(sp)
    9928:	   |   jsr 9a12 <turnMeAngle>
    992e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    9930:	/--|-- bra.s 9978 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    9932:	|  \-> move.l 4(sp),d0
    9936:	|      neg.l d0
    9938:	|      cmp.l 8(sp),d0
    993c:	|  /-- blt.s 995a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    993e:	|  |   movea.l 16(sp),a0
    9942:	|  |   move.l 80(a0),d0
    9946:	|  |   add.l 4(sp),d0
    994a:	|  |   move.l d0,-(sp)
    994c:	|  |   move.l 20(sp),-(sp)
    9950:	|  |   jsr 9a12 <turnMeAngle>
    9956:	|  |   addq.l #8,sp
}
    9958:	+--|-- bra.s 9978 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    995a:	|  \-> movea.l 16(sp),a0
    995e:	|      move.l 84(a0),d0
    9962:	|      move.l d0,-(sp)
    9964:	|      move.l 20(sp),-(sp)
    9968:	|      jsr 9a12 <turnMeAngle>
    996e:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    9970:	|      movea.l 16(sp),a0
    9974:	|      clr.w 54(a0)
}
    9978:	\----> nop
    997a:	       move.l (sp)+,d2
    997c:	       addq.l #8,sp
    997e:	       rts

00009980 <stopPerson>:


BOOL stopPerson (int o) {
    9980:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    9982:	       move.l 8(sp),-(sp)
    9986:	       jsr 8284 <findPerson>
    998c:	       addq.l #4,sp
    998e:	       move.l d0,(sp)
    if (moveMe)
    9990:	/----- beq.s 99ce <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    9992:	|      movea.l (sp),a0
    9994:	|      move.l 56(a0),d0
    9998:	+----- beq.s 99ce <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    999a:	|      movea.l (sp),a0
    999c:	|      move.l 56(a0),d0
    99a0:	|      move.l d0,-(sp)
    99a2:	|      jsr 290c <abortFunction>
    99a8:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    99aa:	|      movea.l (sp),a0
    99ac:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    99b0:	|      movea.l (sp),a0
    99b2:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    99b6:	|      movea.l (sp),a0
    99b8:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    99bc:	|      clr.l -(sp)
    99be:	|      move.l 4(sp),-(sp)
    99c2:	|      jsr 6092 <setFrames>
    99c8:	|      addq.l #8,sp
            return TRUE;
    99ca:	|      moveq #1,d0
    99cc:	|  /-- bra.s 99d0 <stopPerson+0x50>
        }
    return FALSE;
    99ce:	\--|-> clr.w d0
}
    99d0:	   \-> addq.l #4,sp
    99d2:	       rts

000099d4 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    99d4:	       subq.l #8,sp
	int total = 0;
    99d6:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    99da:	       clr.l (sp)
    99dc:	   /-- bra.s 99fe <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    99de:	/--|-> movea.l 12(sp),a0
    99e2:	|  |   movea.l 4(a0),a0
    99e6:	|  |   move.l (sp),d1
    99e8:	|  |   move.l d1,d0
    99ea:	|  |   add.l d0,d0
    99ec:	|  |   add.l d1,d0
    99ee:	|  |   add.l d0,d0
    99f0:	|  |   add.l d0,d0
    99f2:	|  |   adda.l d0,a0
    99f4:	|  |   move.l 4(a0),d0
    99f8:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    99fc:	|  |   addq.l #1,(sp)
    99fe:	|  \-> movea.l 12(sp),a0
    9a02:	|      move.l 8(a0),d0
    9a06:	|      cmp.l (sp),d0
    9a08:	\----- bgt.s 99de <timeForAnim+0xa>
	}
	return total;
    9a0a:	       move.l 4(sp),d0
}
    9a0e:	       addq.l #8,sp
    9a10:	       rts

00009a12 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    9a12:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    9a14:	       movea.l 8(sp),a0
    9a18:	       movea.l 68(a0),a0
    9a1c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    9a20:	       movea.l 8(sp),a0
    9a24:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    9a2a:	       move.l (sp),-(sp)
    9a2c:	       pea b4 <_start+0xb4>
    9a30:	       jsr 14a9a <__divsi3>
    9a36:	       addq.l #8,sp
    9a38:	       move.l d0,d1
    9a3a:	       addi.l #180,d1
    9a40:	       movea.l 8(sp),a0
    9a44:	       move.l 88(a0),d0
    9a48:	       add.l d1,d0
    9a4a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    9a4e:	   /-- bra.s 9a58 <turnMeAngle+0x46>
    9a50:	/--|-> addi.l #-360,12(sp)
    9a58:	|  \-> cmpi.l #359,12(sp)
    9a60:	\----- bgt.s 9a50 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    9a62:	       move.l (sp),-(sp)
    9a64:	       move.l 16(sp),-(sp)
    9a68:	       jsr 14a1c <__mulsi3>
    9a6e:	       addq.l #8,sp
    9a70:	       pea 168 <decodeFilename+0x50>
    9a74:	       move.l d0,-(sp)
    9a76:	       jsr 14a9a <__divsi3>
    9a7c:	       addq.l #8,sp
    9a7e:	       movea.l 8(sp),a0
    9a82:	       move.l d0,94(a0)
}
    9a86:	       nop
    9a88:	       addq.l #4,sp
    9a8a:	       rts

00009a8c <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    9a8c:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9a8e:	          move.l 8(sp),-(sp)
    9a92:	          jsr 8284 <findPerson>
    9a98:	          addq.l #4,sp
    9a9a:	          move.l d0,(sp)
    if (thisPerson) {
    9a9c:	/-------- beq.s 9afc <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    9a9e:	|         movea.l (sp),a0
    9aa0:	|         move.l 56(a0),d0
    9aa4:	|     /-- beq.s 9ab6 <turnPersonToFace+0x2a>
    9aa6:	|     |   movea.l (sp),a0
    9aa8:	|     |   move.l 56(a0),d0
    9aac:	|     |   move.l d0,-(sp)
    9aae:	|     |   jsr 290c <abortFunction>
    9ab4:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    9ab6:	|     \-> movea.l (sp),a0
    9ab8:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    9abc:	|         movea.l (sp),a0
    9abe:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    9ac2:	|         movea.l (sp),a0
    9ac4:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    9ac8:	|         move.l 12(sp),-(sp)
    9acc:	|         move.l 4(sp),-(sp)
    9ad0:	|         jsr 9a12 <turnMeAngle>
    9ad6:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    9ad8:	|         movea.l 193e8 <speech>,a0
    9ade:	|         move.l (a0),d0
    9ae0:	|         cmp.l (sp),d0
    9ae2:	|  /----- bne.s 9ae8 <turnPersonToFace+0x5c>
    9ae4:	|  |      moveq #2,d0
    9ae6:	|  |  /-- bra.s 9aea <turnPersonToFace+0x5e>
    9ae8:	|  \--|-> moveq #0,d0
    9aea:	|     \-> move.l d0,-(sp)
    9aec:	|         move.l 4(sp),-(sp)
    9af0:	|         jsr 6092 <setFrames>
    9af6:	|         addq.l #8,sp
        return TRUE;
    9af8:	|         moveq #1,d0
    9afa:	|     /-- bra.s 9afe <turnPersonToFace+0x72>
    }
    return FALSE;
    9afc:	\-----|-> clr.w d0
}
    9afe:	      \-> addq.l #4,sp
    9b00:	          rts

00009b02 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    9b02:	                lea -20(sp),sp
    9b06:	                move.l d3,-(sp)
    9b08:	                move.l d2,-(sp)
    9b0a:	                move.l 36(sp),d0
    9b0e:	                move.w d0,d0
    9b10:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    9b14:	                cmpi.w #-1,10(sp)
    9b1a:	/-------------- bne.s 9b22 <walkMe+0x20>
    9b1c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    9b22:	>-------------> movea.l 32(sp),a0
    9b26:	|               move.l 36(a0),d0
    9b2a:	|               move.l d0,-(sp)
    9b2c:	|               jsr 1449a <__floatsisf>
    9b32:	|               addq.l #4,sp
    9b34:	|               move.l d0,d1
    9b36:	|               movea.l 32(sp),a0
    9b3a:	|               move.l (a0),d0
    9b3c:	|               move.l d0,-(sp)
    9b3e:	|               move.l d1,-(sp)
    9b40:	|               jsr 1478e <__subsf3>
    9b46:	|               addq.l #8,sp
    9b48:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    9b4c:	|               movea.l 32(sp),a0
    9b50:	|               move.l 40(a0),d0
    9b54:	|               move.l d0,-(sp)
    9b56:	|               jsr 1449a <__floatsisf>
    9b5c:	|               addq.l #4,sp
    9b5e:	|               move.l d0,d1
    9b60:	|               movea.l 32(sp),a0
    9b64:	|               move.l 4(a0),d0
    9b68:	|               move.l d0,-(sp)
    9b6a:	|               move.l d1,-(sp)
    9b6c:	|               jsr 1478e <__subsf3>
    9b72:	|               addq.l #8,sp
    9b74:	|               move.l d0,-(sp)
    9b76:	|               move.l d0,-(sp)
    9b78:	|               jsr 1424c <__addsf3>
    9b7e:	|               addq.l #8,sp
    9b80:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    9b84:	|               movea.l 32(sp),a0
    9b88:	|               move.l 20(a0),d2
    9b8c:	|               movea.l 32(sp),a0
    9b90:	|               move.l 16(a0),d0
    9b94:	|               move.l d0,-(sp)
    9b96:	|               jsr 1449a <__floatsisf>
    9b9c:	|               addq.l #4,sp
    9b9e:	|               move.l d0,-(sp)
    9ba0:	|               move.l d2,-(sp)
    9ba2:	|               jsr 1454c <__mulsf3>
    9ba8:	|               addq.l #8,sp
    9baa:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    9bae:	|               move.l 24(sp),-(sp)
    9bb2:	|               jsr 143b2 <__extendsfdf2>
    9bb8:	|               addq.l #4,sp
    9bba:	|               move.l #-1717986918,-(sp)
    9bc0:	|               move.l #1070176665,-(sp)
    9bc6:	|               move.l d1,-(sp)
    9bc8:	|               move.l d0,-(sp)
    9bca:	|               jsr 14672 <__ltdf2>
    9bd0:	|               lea 16(sp),sp
    9bd4:	|               tst.l d0
    9bd6:	|           /-- bge.s 9be0 <walkMe+0xde>
    9bd8:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    9be0:	|           \-> move.l 20(sp),-(sp)
    9be4:	|               jsr 14432 <__fixsfsi>
    9bea:	|               addq.l #4,sp
    9bec:	|               move.l d0,-(sp)
    9bee:	|               jsr 6f4a <TF_abs>
    9bf4:	|               addq.l #4,sp
    9bf6:	|               move.l d0,d2
    9bf8:	|               move.l 16(sp),-(sp)
    9bfc:	|               jsr 14432 <__fixsfsi>
    9c02:	|               addq.l #4,sp
    9c04:	|               move.l d0,-(sp)
    9c06:	|               jsr 6f4a <TF_abs>
    9c0c:	|               addq.l #4,sp
    9c0e:	|               cmp.l d2,d0
    9c10:	|        /----- bgt.s 9c34 <walkMe+0x132>
    9c12:	|        |      move.l 20(sp),-(sp)
    9c16:	|        |      jsr 14432 <__fixsfsi>
    9c1c:	|        |      addq.l #4,sp
    9c1e:	|        |      move.l d0,-(sp)
    9c20:	|        |      jsr 6f4a <TF_abs>
    9c26:	|        |      addq.l #4,sp
    9c28:	|        |      move.l d0,-(sp)
    9c2a:	|        |      jsr 1449a <__floatsisf>
    9c30:	|        |      addq.l #4,sp
    9c32:	|        |  /-- bra.s 9c54 <walkMe+0x152>
    9c34:	|        \--|-> move.l 16(sp),-(sp)
    9c38:	|           |   jsr 14432 <__fixsfsi>
    9c3e:	|           |   addq.l #4,sp
    9c40:	|           |   move.l d0,-(sp)
    9c42:	|           |   jsr 6f4a <TF_abs>
    9c48:	|           |   addq.l #4,sp
    9c4a:	|           |   move.l d0,-(sp)
    9c4c:	|           |   jsr 1449a <__floatsisf>
    9c52:	|           |   addq.l #4,sp
    9c54:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    9c58:	|               move.l 12(sp),-(sp)
    9c5c:	|               jsr 14432 <__fixsfsi>
    9c62:	|               addq.l #4,sp
    9c64:	|               move.l d0,-(sp)
    9c66:	|               jsr 6f4a <TF_abs>
    9c6c:	|               addq.l #4,sp
    9c6e:	|               move.l d0,-(sp)
    9c70:	|               jsr 1449a <__floatsisf>
    9c76:	|               addq.l #4,sp
    9c78:	|               move.l d0,-(sp)
    9c7a:	|               move.l 28(sp),-(sp)
    9c7e:	|               jsr 146c0 <__ltsf2>
    9c84:	|               addq.l #8,sp
    9c86:	|               tst.l d0
    9c88:	|        /----- bge.w 9d3a <walkMe+0x238>
			if (thisPerson->spinning) {
    9c8c:	|        |      movea.l 32(sp),a0
    9c90:	|        |      move.w 54(a0),d0
    9c94:	|        |  /-- beq.s 9cb2 <walkMe+0x1b0>
				spinStep(thisPerson);
    9c96:	|        |  |   move.l 32(sp),-(sp)
    9c9a:	|        |  |   jsr 98a2 <spinStep>
    9ca0:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    9ca2:	|        |  |   pea 1 <_start+0x1>
    9ca6:	|        |  |   move.l 36(sp),-(sp)
    9caa:	|        |  |   jsr 6092 <setFrames>
    9cb0:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    9cb2:	|        |  \-> move.l 24(sp),-(sp)
    9cb6:	|        |      move.l 16(sp),-(sp)
    9cba:	|        |      jsr 14346 <__divsf3>
    9cc0:	|        |      addq.l #8,sp
    9cc2:	|        |      move.l d0,24(sp)
			if (move)
    9cc6:	|        |      tst.w 10(sp)
    9cca:	|        |  /-- beq.s 9d34 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    9ccc:	|        |  |   movea.l 32(sp),a0
    9cd0:	|        |  |   move.l 4(a0),d2
    9cd4:	|        |  |   move.l 24(sp),d0
    9cd8:	|        |  |   move.l d0,-(sp)
    9cda:	|        |  |   move.l d0,-(sp)
    9cdc:	|        |  |   jsr 1424c <__addsf3>
    9ce2:	|        |  |   addq.l #8,sp
    9ce4:	|        |  |   move.l d0,-(sp)
    9ce6:	|        |  |   move.l 20(sp),-(sp)
    9cea:	|        |  |   jsr 14346 <__divsf3>
    9cf0:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    9cf2:	|        |  |   move.l d0,-(sp)
    9cf4:	|        |  |   move.l d2,-(sp)
    9cf6:	|        |  |   jsr 1424c <__addsf3>
    9cfc:	|        |  |   addq.l #8,sp
    9cfe:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    9d00:	|        |  |   movea.l 32(sp),a0
    9d04:	|        |  |   move.l (a0),d3
    9d06:	|        |  |   move.l 24(sp),-(sp)
    9d0a:	|        |  |   move.l 24(sp),-(sp)
    9d0e:	|        |  |   jsr 14346 <__divsf3>
    9d14:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    9d16:	|        |  |   move.l d0,-(sp)
    9d18:	|        |  |   move.l d3,-(sp)
    9d1a:	|        |  |   jsr 1424c <__addsf3>
    9d20:	|        |  |   addq.l #8,sp
    9d22:	|        |  |   move.l d2,-(sp)
    9d24:	|        |  |   move.l d0,-(sp)
    9d26:	|        |  |   move.l 40(sp),-(sp)
    9d2a:	|        |  |   jsr 89cc <moveAndScale>
    9d30:	|        |  |   lea 12(sp),sp
			return TRUE;
    9d34:	|        |  \-> moveq #1,d0
    9d36:	|  /-----|----- bra.w 9de8 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    9d3a:	|  |     \----> movea.l 32(sp),a0
    9d3e:	|  |            move.l 44(a0),d0
    9d42:	|  |            moveq #-1,d1
    9d44:	|  |            cmp.l d0,d1
    9d46:	|  |        /-- bne.s 9d7e <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    9d48:	|  |        |   movea.l 32(sp),a0
    9d4c:	|  |        |   move.l 98(a0),d0
    9d50:	|  |        |   moveq #-1,d1
    9d52:	|  |        |   cmp.l d0,d1
    9d54:	|  |  /-----|-- beq.s 9d92 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    9d56:	|  |  |     |   movea.l 32(sp),a0
    9d5a:	|  |  |     |   move.l 98(a0),d0
    9d5e:	|  |  |     |   movea.l 32(sp),a0
    9d62:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    9d66:	|  |  |     |   movea.l 32(sp),a0
    9d6a:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    9d70:	|  |  |     |   move.l 32(sp),-(sp)
    9d74:	|  |  |     |   jsr 98a2 <spinStep>
    9d7a:	|  |  |     |   addq.l #4,sp
			}
			break;
    9d7c:	|  |  +-----|-- bra.s 9d92 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    9d7e:	|  |  |     \-> move.l 32(sp),-(sp)
    9d82:	|  |  |         jsr 7676 <doBorderStuff>
    9d88:	|  |  |         addq.l #4,sp
    9d8a:	|  |  |         tst.w d0
    9d8c:	|  |  |  /----- beq.s 9d96 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    9d8e:	\--|--|--|----- bra.w 9b22 <walkMe+0x20>
			break;
    9d92:	   |  \--|----> nop
    9d94:	   |     |  /-- bra.s 9d98 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    9d96:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    9d98:	   |        \-> movea.l 32(sp),a0
    9d9c:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    9da0:	   |            clr.l -(sp)
    9da2:	   |            move.l 36(sp),-(sp)
    9da6:	   |            jsr 6092 <setFrames>
    9dac:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    9dae:	   |            movea.l 32(sp),a0
    9db2:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    9db6:	   |            move.l d0,-(sp)
    9db8:	   |            jsr 1449a <__floatsisf>
    9dbe:	   |            addq.l #4,sp
    9dc0:	   |            move.l d0,d2
				 thisPerson->walkToX,
    9dc2:	   |            movea.l 32(sp),a0
    9dc6:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    9dca:	   |            move.l d0,-(sp)
    9dcc:	   |            jsr 1449a <__floatsisf>
    9dd2:	   |            addq.l #4,sp
    9dd4:	   |            move.l d2,-(sp)
    9dd6:	   |            move.l d0,-(sp)
    9dd8:	   |            move.l 40(sp),-(sp)
    9ddc:	   |            jsr 89cc <moveAndScale>
    9de2:	   |            lea 12(sp),sp
	return FALSE;
    9de6:	   |            clr.w d0
}
    9de8:	   \----------> move.l (sp)+,d2
    9dea:	                move.l (sp)+,d3
    9dec:	                lea 20(sp),sp
    9df0:	                rts

00009df2 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    9df2:	             lea -20(sp),sp
    9df6:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    9df8:	             move.l 1946c <allLoadedBanks>,20(sp)
	while (returnMe) {
    9e00:	      /----- bra.s 9e20 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    9e02:	   /--|----> movea.l 20(sp),a0
    9e06:	   |  |      move.l (a0),d0
    9e08:	   |  |      cmp.l 28(sp),d0
    9e0c:	   |  |  /-- bne.s 9e16 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    9e0e:	   |  |  |   move.l 20(sp),d0
    9e12:	/--|--|--|-- bra.w 9ed2 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    9e16:	|  |  |  \-> movea.l 20(sp),a0
    9e1a:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    9e20:	|  |  \----> tst.l 20(sp)
    9e24:	|  \-------- bne.s 9e02 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    9e26:	|            moveq #26,d0
    9e28:	|            move.l d0,16(sp)
    9e2c:	|            clr.l 12(sp)
    9e30:	|            move.l 1938c <SysBase>,d0
    9e36:	|            movea.l d0,a6
    9e38:	|            move.l 16(sp),d0
    9e3c:	|            move.l 12(sp),d1
    9e40:	|            jsr -684(a6)
    9e44:	|            move.l d0,8(sp)
    9e48:	|            move.l 8(sp),d0
    9e4c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    9e50:	|     /----- beq.s 9ed0 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    9e52:	|     |      movea.l 20(sp),a0
    9e56:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    9e5a:	|     |      move.l 20(sp),d0
    9e5e:	|     |      addq.l #8,d0
    9e60:	|     |      clr.l -(sp)
    9e62:	|     |      move.l d0,-(sp)
    9e64:	|     |      move.l 36(sp),-(sp)
    9e68:	|     |      jsr 6b98 <loadSpriteBank>
    9e6e:	|     |      lea 12(sp),sp
    9e72:	|     |      tst.w d0
    9e74:	|     |  /-- beq.s 9ea8 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    9e76:	|     |  |   movea.l 20(sp),a0
    9e7a:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    9e7e:	|     |  |   move.l 1946c <allLoadedBanks>,d0
    9e84:	|     |  |   movea.l 20(sp),a0
    9e88:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    9e8c:	|     |  |   move.l 20(sp),1946c <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    9e94:	|     |  |   pea 15cce <custom.c.49191367+0xfa2>
    9e9a:	|     |  |   jsr 141e2 <KPrintF>
    9ea0:	|     |  |   addq.l #4,sp
			return returnMe;
    9ea2:	|     |  |   move.l 20(sp),d0
    9ea6:	+-----|--|-- bra.s 9ed2 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    9ea8:	|     |  \-> pea 15cfb <custom.c.49191367+0xfcf>
    9eae:	|     |      jsr 141e2 <KPrintF>
    9eb4:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    9eb6:	|     |      move.l 20(sp),4(sp)
    9ebc:	|     |      move.l 1938c <SysBase>,d0
    9ec2:	|     |      movea.l d0,a6
    9ec4:	|     |      movea.l 4(sp),a1
    9ec8:	|     |      jsr -690(a6)
			return NULL;
    9ecc:	|     |      moveq #0,d0
    9ece:	+-----|----- bra.s 9ed2 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    9ed0:	|     \----> moveq #0,d0
}
    9ed2:	\----------> movea.l (sp)+,a6
    9ed4:	             lea 20(sp),sp
    9ed8:	             rts

00009eda <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    9eda:	       subq.l #8,sp
    9edc:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    9ede:	   /-- bra.s 9f0e <clearStackLib+0x34>
		k = stackLib;
    9ee0:	/--|-> move.l 19474 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    9ee8:	|  |   movea.l 19474 <stackLib>,a0
    9eee:	|  |   move.l 4(a0),d0
    9ef2:	|  |   move.l d0,19474 <stackLib>
		FreeVec(k);
    9ef8:	|  |   move.l 8(sp),4(sp)
    9efe:	|  |   move.l 1938c <SysBase>,d0
    9f04:	|  |   movea.l d0,a6
    9f06:	|  |   movea.l 4(sp),a1
    9f0a:	|  |   jsr -690(a6)
	while (stackLib) {
    9f0e:	|  \-> move.l 19474 <stackLib>,d0
    9f14:	\----- bne.s 9ee0 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    9f16:	       clr.l 19470 <stackLibTotal>
}
    9f1c:	       nop
    9f1e:	       movea.l (sp)+,a6
    9f20:	       addq.l #8,sp
    9f22:	       rts

00009f24 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    9f24:	          lea -128(sp),sp
    9f28:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    9f2c:	      /-- bra.s 9f3e <loadGame+0x1a>
    9f2e:	   /--|-> move.l 19324 <allRunningFunctions>,d0
    9f34:	   |  |   move.l d0,-(sp)
    9f36:	   |  |   jsr 3926 <finishFunction>
    9f3c:	   |  |   addq.l #4,sp
    9f3e:	   |  \-> move.l 19324 <allRunningFunctions>,d0
    9f44:	   \----- bne.s 9f2e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    9f46:	          pea 19478 <ssgVersion>
    9f4c:	          pea 15d59 <custom.c.49191367+0x102d>
    9f52:	          pea 41 <_start+0x41>
    9f56:	          pea 53 <_start+0x53>
    9f5a:	          move.l 160(sp),-(sp)
    9f5e:	          jsr 444e <openAndVerify>
    9f64:	          lea 20(sp),sp
    9f68:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    9f6c:	      /-- bne.s 9f74 <loadGame+0x50>
    9f6e:	      |   clr.w d0
    9f70:	/-----|-- bra.w a21a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    9f74:	|     \-> move.l 112(sp),108(sp)
    9f7a:	|         lea 140(sp),a0
    9f7e:	|         lea -126(a0),a0
    9f82:	|         move.l a0,120(sp)
    9f86:	|         moveq #8,d0
    9f88:	|         move.l d0,116(sp)
    9f8c:	|         move.l 19394 <DOSBase>,d0
    9f92:	|         movea.l d0,a6
    9f94:	|         move.l 108(sp),d1
    9f98:	|         move.l 120(sp),d2
    9f9c:	|         move.l 116(sp),d3
    9fa0:	|         jsr -42(a6)
    9fa4:	|         move.l d0,132(sp)
    9fa8:	|         move.l 132(sp),d0
    9fac:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    9fb0:	|         moveq #8,d0
    9fb2:	|         cmp.l 128(sp),d0
    9fb6:	|     /-- beq.s 9fc6 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    9fb8:	|     |   pea 15d7a <custom.c.49191367+0x104e>
    9fbe:	|     |   jsr 141e2 <KPrintF>
    9fc4:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9fc6:	|     \-> move.l 14(sp),d1
    9fca:	|         move.l 1932e <fileTime>,d0
    9fd0:	|         cmp.l d1,d0
    9fd2:	|     /-- bne.s 9fe2 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    9fd4:	|     |   move.l 18(sp),d1
    9fd8:	|     |   move.l 19332 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9fde:	|     |   cmp.l d1,d0
    9fe0:	|  /--|-- beq.s a002 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    9fe2:	|  |  \-> move.l 144(sp),-(sp)
    9fe6:	|  |      pea 15d96 <custom.c.49191367+0x106a>
    9fec:	|  |      pea 15e5d <custom.c.49191367+0x1131>
    9ff2:	|  |      jsr 141e2 <KPrintF>
    9ff8:	|  |      lea 12(sp),sp
		return FALSE; 
    9ffc:	|  |      clr.w d0
    9ffe:	+--|----- bra.w a21a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    a002:	|  \----> move.l 112(sp),124(sp)
    a008:	|         move.l 19394 <DOSBase>,d0
    a00e:	|         movea.l d0,a6
    a010:	|         move.l 124(sp),d1
    a014:	|         jsr -306(a6)
    a018:	|         move.l d0,136(sp)
    a01c:	|         move.l 136(sp),d0
    a020:	|         move.l d0,d0
    a022:	|         move.w d0,18c02 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    a028:	|         move.l 112(sp),100(sp)
    a02e:	|         move.l 19394 <DOSBase>,d0
    a034:	|         movea.l d0,a6
    a036:	|         move.l 100(sp),d1
    a03a:	|         jsr -306(a6)
    a03e:	|         move.l d0,96(sp)
    a042:	|         move.l 96(sp),d0
    a046:	|         move.l d0,d0
    a048:	|         move.w d0,1932c <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    a04e:	|         move.l 112(sp),92(sp)
    a054:	|         move.l 19394 <DOSBase>,d0
    a05a:	|         movea.l d0,a6
    a05c:	|         move.l 92(sp),d1
    a060:	|         jsr -306(a6)
    a064:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    a068:	|         move.l 112(sp),84(sp)
    a06e:	|         move.l 19394 <DOSBase>,d0
    a074:	|         movea.l d0,a6
    a076:	|         move.l 84(sp),d1
    a07a:	|         jsr -306(a6)
    a07e:	|         move.l d0,80(sp)
    a082:	|         move.l 80(sp),d0
    a086:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    a08a:	|     /-- beq.s a0be <loadGame+0x19a>
		fontNum = get2bytes (fp);
    a08c:	|     |   move.l 112(sp),-(sp)
    a090:	|     |   jsr 6bc <get2bytes>
    a096:	|     |   addq.l #4,sp
    a098:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    a09c:	|     |   move.l 112(sp),-(sp)
    a0a0:	|     |   jsr 6bc <get2bytes>
    a0a6:	|     |   addq.l #4,sp
    a0a8:	|     |   move.l d0,194d4 <fontHeight>
		charOrder = readString(fp);		
    a0ae:	|     |   move.l 112(sp),-(sp)
    a0b2:	|     |   jsr b02 <readString>
    a0b8:	|     |   addq.l #4,sp
    a0ba:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    a0be:	|     \-> move.l 104(sp),70(sp)
    a0c4:	|         move.l 1938c <SysBase>,d0
    a0ca:	|         movea.l d0,a6
    a0cc:	|         movea.l 70(sp),a1
    a0d0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    a0d4:	|         move.l 112(sp),-(sp)
    a0d8:	|         jsr 854 <getSigned>
    a0de:	|         addq.l #4,sp
    a0e0:	|         move.w d0,192aa <fontSpace>

	killAllPeople ();
    a0e6:	|         jsr 866e <killAllPeople>
	killAllRegions ();
    a0ec:	|         jsr 12c92 <killAllRegions>

	int camerX = get2bytes (fp);
    a0f2:	|         move.l 112(sp),-(sp)
    a0f6:	|         jsr 6bc <get2bytes>
    a0fc:	|         addq.l #4,sp
    a0fe:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    a102:	|         move.l 112(sp),-(sp)
    a106:	|         jsr 6bc <get2bytes>
    a10c:	|         addq.l #4,sp
    a10e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    a112:	|         move.l 112(sp),-(sp)
    a116:	|         jsr 7d8 <getFloat>
    a11c:	|         addq.l #4,sp
    a11e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    a122:	|         move.l 112(sp),54(sp)
    a128:	|         move.l 19394 <DOSBase>,d0
    a12e:	|         movea.l d0,a6
    a130:	|         move.l 54(sp),d1
    a134:	|         jsr -306(a6)
    a138:	|         move.l d0,50(sp)
    a13c:	|         move.l 50(sp),d0
    a140:	|         move.l d0,d0
    a142:	|         move.b d0,18d1c <brightnessLevel>

	loadHandlers (fp);
    a148:	|         move.l 112(sp),-(sp)
    a14c:	|         jsr 43ae <loadHandlers>
    a152:	|         addq.l #4,sp
	loadRegions (fp);
    a154:	|         move.l 112(sp),-(sp)
    a158:	|         jsr 12cee <loadRegions>
    a15e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    a160:	|         moveq #12,d0
    a162:	|         move.l d0,46(sp)
    a166:	|         clr.l 42(sp)
    a16a:	|         move.l 1938c <SysBase>,d0
    a170:	|         movea.l d0,a6
    a172:	|         move.l 46(sp),d0
    a176:	|         move.l 42(sp),d1
    a17a:	|         jsr -684(a6)
    a17e:	|         move.l d0,38(sp)
    a182:	|         move.l 38(sp),d0
    a186:	|         move.l d0,192ac <mouseCursorAnim>
	if (! mouseCursorAnim) {
    a18c:	|         move.l 192ac <mouseCursorAnim>,d0
    a192:	|     /-- bne.s a1a6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    a194:	|     |   pea 15e67 <custom.c.49191367+0x113b>
    a19a:	|     |   jsr 141e2 <KPrintF>
    a1a0:	|     |   addq.l #4,sp
		return FALSE;
    a1a2:	|     |   clr.w d0
    a1a4:	+-----|-- bra.s a21a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    a1a6:	|     \-> jsr ae76 <nosnapshot>
	if (FGetC (fp)) {
    a1ac:	|         move.l 112(sp),34(sp)
    a1b2:	|         move.l 19394 <DOSBase>,d0
    a1b8:	|         movea.l d0,a6
    a1ba:	|         move.l 34(sp),d1
    a1be:	|         jsr -306(a6)
    a1c2:	|         move.l d0,30(sp)
    a1c6:	|         move.l 30(sp),d0
    a1ca:	|     /-- beq.s a1e0 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    a1cc:	|     |   move.l 112(sp),-(sp)
    a1d0:	|     |   jsr aeea <restoreSnapshot>
    a1d6:	|     |   addq.l #4,sp
    a1d8:	|     |   tst.w d0
    a1da:	|     +-- bne.s a1e0 <loadGame+0x2bc>
    a1dc:	|     |   clr.w d0
    a1de:	+-----|-- bra.s a21a <loadGame+0x2f6>
	}

	Close (fp);
    a1e0:	|     \-> move.l 112(sp),26(sp)
    a1e6:	|         move.l 19394 <DOSBase>,d0
    a1ec:	|         movea.l d0,a6
    a1ee:	|         move.l 26(sp),d1
    a1f2:	|         jsr -36(a6)
    a1f6:	|         move.l d0,22(sp)
	clearStackLib ();
    a1fa:	|         jsr 9eda <clearStackLib>

	cameraX = camerX;
    a200:	|         move.l 66(sp),1949a <cameraX>
	cameraY = camerY;
    a208:	|         move.l 62(sp),1949e <cameraY>
	cameraZoom = camerZ;
    a210:	|         move.l 58(sp),18d44 <cameraZoom>

	return TRUE;
    a218:	|         moveq #1,d0
}
    a21a:	\-------> movem.l (sp)+,d2-d3/a6
    a21e:	          lea 128(sp),sp
    a222:	          rts

0000a224 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    a224:	   /-> lea -64(sp),sp
    a228:	   |   move.l a6,-(sp)
    a22a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    a22c:	   |   movea.l 76(sp),a0
    a230:	   |   move.l (a0),d0
    a232:	   |   move.l 80(sp),-(sp)
    a236:	   |   move.l d0,-(sp)
    a238:	   |   jsr 8d0 <put2bytes>
    a23e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    a240:	   |   movea.l 76(sp),a0
    a244:	   |   move.l 40(a0),d0
    a248:	/--|-- beq.s a284 <saveFunction+0x60>
		FPutC (fp, 1);
    a24a:	|  |   move.l 80(sp),52(sp)
    a250:	|  |   moveq #1,d0
    a252:	|  |   move.l d0,48(sp)
    a256:	|  |   move.l 19394 <DOSBase>,d0
    a25c:	|  |   movea.l d0,a6
    a25e:	|  |   move.l 52(sp),d1
    a262:	|  |   move.l 48(sp),d2
    a266:	|  |   jsr -312(a6)
    a26a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    a26e:	|  |   movea.l 76(sp),a0
    a272:	|  |   move.l 40(a0),d0
    a276:	|  |   move.l 80(sp),-(sp)
    a27a:	|  |   move.l d0,-(sp)
    a27c:	|  \-- jsr a224 <saveFunction>(pc)
    a280:	|      addq.l #8,sp
    a282:	|  /-- bra.s a2a6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    a284:	\--|-> move.l 80(sp),64(sp)
    a28a:	   |   clr.l 60(sp)
    a28e:	   |   move.l 19394 <DOSBase>,d0
    a294:	   |   movea.l d0,a6
    a296:	   |   move.l 64(sp),d1
    a29a:	   |   move.l 60(sp),d2
    a29e:	   |   jsr -312(a6)
    a2a2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    a2a6:	   \-> movea.l 76(sp),a0
    a2aa:	       move.l 12(a0),d0
    a2ae:	       move.l 80(sp),-(sp)
    a2b2:	       move.l d0,-(sp)
    a2b4:	       jsr 958 <put4bytes>
    a2ba:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    a2bc:	       movea.l 76(sp),a0
    a2c0:	       move.l 36(a0),d0
    a2c4:	       move.l 80(sp),-(sp)
    a2c8:	       move.l d0,-(sp)
    a2ca:	       jsr 8d0 <put2bytes>
    a2d0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    a2d2:	       move.l 80(sp),40(sp)
    a2d8:	       movea.l 76(sp),a0
    a2dc:	       move.w 54(a0),d0
    a2e0:	       movea.w d0,a0
    a2e2:	       move.l a0,36(sp)
    a2e6:	       move.l 19394 <DOSBase>,d0
    a2ec:	       movea.l d0,a6
    a2ee:	       move.l 40(sp),d1
    a2f2:	       move.l 36(sp),d2
    a2f6:	       jsr -312(a6)
    a2fa:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    a2fe:	       move.l 80(sp),28(sp)
    a304:	       movea.l 76(sp),a0
    a308:	       move.w 48(a0),d0
    a30c:	       movea.w d0,a0
    a30e:	       move.l a0,24(sp)
    a312:	       move.l 19394 <DOSBase>,d0
    a318:	       movea.l d0,a6
    a31a:	       move.l 28(sp),d1
    a31e:	       move.l 24(sp),d2
    a322:	       jsr -312(a6)
    a326:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    a32a:	       move.l 80(sp),16(sp)
    a330:	       movea.l 76(sp),a0
    a334:	       move.w 50(a0),d0
    a338:	       movea.w d0,a0
    a33a:	       move.l a0,12(sp)
    a33e:	       move.l 19394 <DOSBase>,d0
    a344:	       movea.l d0,a6
    a346:	       move.l 16(sp),d1
    a34a:	       move.l 12(sp),d2
    a34e:	       jsr -312(a6)
    a352:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    a356:	       moveq #28,d0
    a358:	       add.l 76(sp),d0
    a35c:	       move.l 80(sp),-(sp)
    a360:	       move.l d0,-(sp)
    a362:	       jsr aae0 <saveVariable>
    a368:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    a36a:	       movea.l 76(sp),a0
    a36e:	       move.b 56(a0),d0
    a372:	   /-- beq.s a382 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    a374:	   |   pea 15e88 <custom.c.49191367+0x115c>
    a37a:	   |   jsr 141e2 <KPrintF>
    a380:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    a382:	   \-> movea.l 76(sp),a0
    a386:	       move.l 24(a0),d0
    a38a:	       move.l 80(sp),-(sp)
    a38e:	       move.l d0,-(sp)
    a390:	       jsr a954 <saveStack>
    a396:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    a398:	       clr.l 68(sp)
    a39c:	   /-- bra.s a3c0 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    a39e:	/--|-> movea.l 76(sp),a0
    a3a2:	|  |   move.l 20(a0),d1
    a3a6:	|  |   move.l 68(sp),d0
    a3aa:	|  |   lsl.l #3,d0
    a3ac:	|  |   add.l d1,d0
    a3ae:	|  |   move.l 80(sp),-(sp)
    a3b2:	|  |   move.l d0,-(sp)
    a3b4:	|  |   jsr aae0 <saveVariable>
    a3ba:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    a3bc:	|  |   addq.l #1,68(sp)
    a3c0:	|  \-> movea.l 76(sp),a0
    a3c4:	|      move.l 8(a0),d0
    a3c8:	|      cmp.l 68(sp),d0
    a3cc:	\----- bgt.s a39e <saveFunction+0x17a>
	}
}
    a3ce:	       nop
    a3d0:	       nop
    a3d2:	       move.l (sp)+,d2
    a3d4:	       movea.l (sp)+,a6
    a3d6:	       lea 64(sp),sp
    a3da:	       rts

0000a3dc <saveGame>:

BOOL saveGame (char * fname) {
    a3dc:	          lea -272(sp),sp
    a3e0:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    a3e4:	          move.l 288(sp),268(sp)
    a3ea:	          move.l #1006,264(sp)
    a3f2:	          move.l 19394 <DOSBase>,d0
    a3f8:	          movea.l d0,a6
    a3fa:	          move.l 268(sp),d1
    a3fe:	          move.l 264(sp),d2
    a402:	          jsr -30(a6)
    a406:	          move.l d0,260(sp)
    a40a:	          move.l 260(sp),d0
    a40e:	          move.l d0,256(sp)
	if (fp == NULL) {
    a412:	      /-- bne.s a428 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    a414:	      |   pea 15eaa <custom.c.49191367+0x117e>
    a41a:	      |   jsr 141e2 <KPrintF>
    a420:	      |   addq.l #4,sp
		return FALSE;
    a422:	      |   clr.w d0
    a424:	/-----|-- bra.w a94a <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    a428:	|     \-> move.l 256(sp),252(sp)
    a42e:	|         move.l #89799,248(sp)
    a436:	|         moveq #6,d0
    a438:	|         move.l d0,244(sp)
    a43c:	|         move.l 19394 <DOSBase>,d0
    a442:	|         movea.l d0,a6
    a444:	|         move.l 252(sp),d1
    a448:	|         move.l 248(sp),d2
    a44c:	|         move.l 244(sp),d3
    a450:	|         jsr -48(a6)
    a454:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    a458:	|         move.l 256(sp),236(sp)
    a45e:	|         clr.l 232(sp)
    a462:	|         move.l 19394 <DOSBase>,d0
    a468:	|         movea.l d0,a6
    a46a:	|         move.l 236(sp),d1
    a46e:	|         move.l 232(sp),d2
    a472:	|         jsr -312(a6)
    a476:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    a47a:	|         move.l 256(sp),224(sp)
    a480:	|         clr.l 220(sp)
    a484:	|         move.l 19394 <DOSBase>,d0
    a48a:	|         movea.l d0,a6
    a48c:	|         move.l 224(sp),d1
    a490:	|         move.l 220(sp),d2
    a494:	|         jsr -312(a6)
    a498:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    a49c:	|         move.l 256(sp),212(sp)
    a4a2:	|         moveq #2,d0
    a4a4:	|         move.l d0,208(sp)
    a4a8:	|         move.l 19394 <DOSBase>,d0
    a4ae:	|         movea.l d0,a6
    a4b0:	|         move.l 212(sp),d1
    a4b4:	|         move.l 208(sp),d2
    a4b8:	|         jsr -312(a6)
    a4bc:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    a4c0:	|         move.l 256(sp),200(sp)
    a4c6:	|         moveq #2,d0
    a4c8:	|         move.l d0,196(sp)
    a4cc:	|         move.l 19394 <DOSBase>,d0
    a4d2:	|         movea.l d0,a6
    a4d4:	|         move.l 200(sp),d1
    a4d8:	|         move.l 196(sp),d2
    a4dc:	|         jsr -312(a6)
    a4e0:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    a4e4:	|         move.l 256(sp),188(sp)
    a4ea:	|         move.l #103214,184(sp)
    a4f2:	|         moveq #8,d0
    a4f4:	|         move.l d0,180(sp)
    a4f8:	|         move.l 19394 <DOSBase>,d0
    a4fe:	|         movea.l d0,a6
    a500:	|         move.l 188(sp),d1
    a504:	|         move.l 184(sp),d2
    a508:	|         move.l 180(sp),d3
    a50c:	|         jsr -48(a6)
    a510:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    a514:	|         move.l 256(sp),172(sp)
    a51a:	|         move.w 18c02 <allowAnyFilename>,d0
    a520:	|         movea.w d0,a0
    a522:	|         move.l a0,168(sp)
    a526:	|         move.l 19394 <DOSBase>,d0
    a52c:	|         movea.l d0,a6
    a52e:	|         move.l 172(sp),d1
    a532:	|         move.l 168(sp),d2
    a536:	|         jsr -312(a6)
    a53a:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    a53e:	|         move.l 256(sp),160(sp)
    a544:	|         move.w 1932c <captureAllKeys>,d0
    a54a:	|         movea.w d0,a0
    a54c:	|         move.l a0,156(sp)
    a550:	|         move.l 19394 <DOSBase>,d0
    a556:	|         movea.l d0,a6
    a558:	|         move.l 160(sp),d1
    a55c:	|         move.l 156(sp),d2
    a560:	|         jsr -312(a6)
    a564:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    a568:	|         move.l 256(sp),148(sp)
    a56e:	|         moveq #1,d0
    a570:	|         move.l d0,144(sp)
    a574:	|         move.l 19394 <DOSBase>,d0
    a57a:	|         movea.l d0,a6
    a57c:	|         move.l 148(sp),d1
    a580:	|         move.l 144(sp),d2
    a584:	|         jsr -312(a6)
    a588:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    a58c:	|         move.l 256(sp),136(sp)
    a592:	|         move.l 194e0 <fontTableSize>,d0
    a598:	|         sgt d0
    a59a:	|         neg.b d0
    a59c:	|         move.b d0,d0
    a59e:	|         andi.l #255,d0
    a5a4:	|         move.l d0,132(sp)
    a5a8:	|         move.l 19394 <DOSBase>,d0
    a5ae:	|         movea.l d0,a6
    a5b0:	|         move.l 136(sp),d1
    a5b4:	|         move.l 132(sp),d2
    a5b8:	|         jsr -312(a6)
    a5bc:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    a5c0:	|         move.l 194e0 <fontTableSize>,d0
    a5c6:	|     /-- ble.s a604 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    a5c8:	|     |   move.l 194d8 <loadedFontNum>,d0
    a5ce:	|     |   move.l 256(sp),-(sp)
    a5d2:	|     |   move.l d0,-(sp)
    a5d4:	|     |   jsr 8d0 <put2bytes>
    a5da:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    a5dc:	|     |   move.l 194d4 <fontHeight>,d0
    a5e2:	|     |   move.l 256(sp),-(sp)
    a5e6:	|     |   move.l d0,-(sp)
    a5e8:	|     |   jsr 8d0 <put2bytes>
    a5ee:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    a5f0:	|     |   move.l 194dc <fontOrderString>,d0
    a5f6:	|     |   move.l 256(sp),-(sp)
    a5fa:	|     |   move.l d0,-(sp)
    a5fc:	|     |   jsr bd8 <writeString>
    a602:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    a604:	|     \-> move.w 192aa <fontSpace>,d0
    a60a:	|         movea.w d0,a0
    a60c:	|         move.l 256(sp),-(sp)
    a610:	|         move.l a0,-(sp)
    a612:	|         jsr a9c <putSigned>
    a618:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    a61a:	|         move.l 1949a <cameraX>,d0
    a620:	|         move.l 256(sp),-(sp)
    a624:	|         move.l d0,-(sp)
    a626:	|         jsr 8d0 <put2bytes>
    a62c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    a62e:	|         move.l 1949e <cameraY>,d0
    a634:	|         move.l 256(sp),-(sp)
    a638:	|         move.l d0,-(sp)
    a63a:	|         jsr 8d0 <put2bytes>
    a640:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    a642:	|         move.l 18d44 <cameraZoom>,d0
    a648:	|         move.l 256(sp),-(sp)
    a64c:	|         move.l d0,-(sp)
    a64e:	|         jsr a46 <putFloat>
    a654:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    a656:	|         move.l 256(sp),124(sp)
    a65c:	|         move.b 18d1c <brightnessLevel>,d0
    a662:	|         move.b d0,d0
    a664:	|         andi.l #255,d0
    a66a:	|         move.l d0,120(sp)
    a66e:	|         move.l 19394 <DOSBase>,d0
    a674:	|         movea.l d0,a6
    a676:	|         move.l 124(sp),d1
    a67a:	|         move.l 120(sp),d2
    a67e:	|         jsr -312(a6)
    a682:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    a686:	|         move.l 256(sp),-(sp)
    a68a:	|         jsr 4932 <saveHandlers>
    a690:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    a692:	|         move.l 256(sp),-(sp)
    a696:	|         jsr 12ea8 <saveRegions>
    a69c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    a69e:	|         move.l 192ac <mouseCursorAnim>,d0
    a6a4:	|         move.l 256(sp),-(sp)
    a6a8:	|         move.l d0,-(sp)
    a6aa:	|         jsr 8b9c <saveAnim>
    a6b0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    a6b2:	|         move.l 192b0 <mouseCursorFrameNum>,d0
    a6b8:	|         move.l 256(sp),-(sp)
    a6bc:	|         move.l d0,-(sp)
    a6be:	|         jsr 8d0 <put2bytes>
    a6c4:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    a6c6:	|         move.l 19324 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    a6ce:	|         clr.l 272(sp)
	while (thisFunction) {
    a6d2:	|     /-- bra.s a6e2 <saveGame+0x306>
		countFunctions ++;
    a6d4:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    a6d8:	|  |  |   movea.l 276(sp),a0
    a6dc:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a6e2:	|  |  \-> tst.l 276(sp)
    a6e6:	|  \----- bne.s a6d4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    a6e8:	|         move.l 256(sp),-(sp)
    a6ec:	|         move.l 276(sp),-(sp)
    a6f0:	|         jsr 8d0 <put2bytes>
    a6f6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    a6f8:	|         move.l 19324 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    a700:	|     /-- bra.s a71c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    a702:	|  /--|-> move.l 256(sp),-(sp)
    a706:	|  |  |   move.l 280(sp),-(sp)
    a70a:	|  |  |   jsr a224 <saveFunction>
    a710:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    a712:	|  |  |   movea.l 276(sp),a0
    a716:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a71c:	|  |  \-> tst.l 276(sp)
    a720:	|  \----- bne.s a702 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    a722:	|         clr.l 280(sp)
    a726:	|     /-- bra.s a748 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    a728:	|  /--|-> move.l 1933a <globalVars>,d1
    a72e:	|  |  |   move.l 280(sp),d0
    a732:	|  |  |   lsl.l #3,d0
    a734:	|  |  |   add.l d1,d0
    a736:	|  |  |   move.l 256(sp),-(sp)
    a73a:	|  |  |   move.l d0,-(sp)
    a73c:	|  |  |   jsr aae0 <saveVariable>
    a742:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    a744:	|  |  |   addq.l #1,280(sp)
    a748:	|  |  \-> move.l 19364 <numGlobals>,d0
    a74e:	|  |      cmp.l 280(sp),d0
    a752:	|  \----- bgt.s a728 <saveGame+0x34c>
	}

	savePeople (fp);
    a754:	|         move.l 256(sp),-(sp)
    a758:	|         jsr 8cc4 <savePeople>
    a75e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    a760:	|         movea.l 194ec <currentFloor>,a0
    a766:	|         move.l 8(a0),d0
    a76a:	|  /----- beq.s a7a8 <saveGame+0x3cc>
		FPutC (fp, 1);
    a76c:	|  |      move.l 256(sp),100(sp)
    a772:	|  |      moveq #1,d0
    a774:	|  |      move.l d0,96(sp)
    a778:	|  |      move.l 19394 <DOSBase>,d0
    a77e:	|  |      movea.l d0,a6
    a780:	|  |      move.l 100(sp),d1
    a784:	|  |      move.l 96(sp),d2
    a788:	|  |      jsr -312(a6)
    a78c:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    a790:	|  |      movea.l 194ec <currentFloor>,a0
    a796:	|  |      move.l (a0),d0
    a798:	|  |      move.l 256(sp),-(sp)
    a79c:	|  |      move.l d0,-(sp)
    a79e:	|  |      jsr 8d0 <put2bytes>
    a7a4:	|  |      addq.l #8,sp
    a7a6:	|  |  /-- bra.s a7ca <saveGame+0x3ee>
	} else FPutC (fp, 0);
    a7a8:	|  \--|-> move.l 256(sp),112(sp)
    a7ae:	|     |   clr.l 108(sp)
    a7b2:	|     |   move.l 19394 <DOSBase>,d0
    a7b8:	|     |   movea.l d0,a6
    a7ba:	|     |   move.l 112(sp),d1
    a7be:	|     |   move.l 108(sp),d2
    a7c2:	|     |   jsr -312(a6)
    a7c6:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    a7ca:	|     \-> move.l 1943c <tga.c.c5785d2a+0x1f>,d0
    a7d0:	|  /----- beq.s a80c <saveGame+0x430>
		FPutC (fp, 1);
    a7d2:	|  |      move.l 256(sp),76(sp)
    a7d8:	|  |      moveq #1,d0
    a7da:	|  |      move.l d0,72(sp)
    a7de:	|  |      move.l 19394 <DOSBase>,d0
    a7e4:	|  |      movea.l d0,a6
    a7e6:	|  |      move.l 76(sp),d1
    a7ea:	|  |      move.l 72(sp),d2
    a7ee:	|  |      jsr -312(a6)
    a7f2:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    a7f6:	|  |      move.l 19438 <tga.c.c5785d2a+0x1b>,d0
    a7fc:	|  |      move.l 256(sp),-(sp)
    a800:	|  |      move.l d0,-(sp)
    a802:	|  |      jsr 8d0 <put2bytes>
    a808:	|  |      addq.l #8,sp
    a80a:	|  |  /-- bra.s a82e <saveGame+0x452>
	} else FPutC (fp,0);
    a80c:	|  \--|-> move.l 256(sp),88(sp)
    a812:	|     |   clr.l 84(sp)
    a816:	|     |   move.l 19394 <DOSBase>,d0
    a81c:	|     |   movea.l d0,a6
    a81e:	|     |   move.l 88(sp),d1
    a822:	|     |   move.l 84(sp),d2
    a826:	|     |   jsr -312(a6)
    a82a:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    a82e:	|     \-> move.l 256(sp),64(sp)
    a834:	|         move.l 194ae <speechMode>,60(sp)
    a83c:	|         move.l 19394 <DOSBase>,d0
    a842:	|         movea.l d0,a6
    a844:	|         move.l 64(sp),d1
    a848:	|         move.l 60(sp),d2
    a84c:	|         jsr -312(a6)
    a850:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    a854:	|         move.b 19280 <fadeMode>,d0
    a85a:	|         move.b d0,d0
    a85c:	|         andi.l #255,d0
    a862:	|         move.l d0,52(sp)
    a866:	|         move.l 256(sp),48(sp)
    a86c:	|         move.l 19394 <DOSBase>,d0
    a872:	|         movea.l d0,a6
    a874:	|         move.l 52(sp),d1
    a878:	|         move.l 48(sp),d2
    a87c:	|         jsr -312(a6)
    a880:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    a884:	|         move.l 193e8 <speech>,d0
    a88a:	|         move.l 256(sp),-(sp)
    a88e:	|         move.l d0,-(sp)
    a890:	|         jsr 5f46 <saveSpeech>
    a896:	|         addq.l #8,sp
	saveStatusBars (fp);
    a898:	|         move.l 256(sp),-(sp)
    a89c:	|         jsr 5942 <saveStatusBars>
    a8a2:	|         addq.l #4,sp
	saveSounds (fp);
    a8a4:	|         move.l 256(sp),-(sp)
    a8a8:	|         jsr ac24 <saveSounds>
    a8ae:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    a8b0:	|         move.w 19498 <saveEncoding>,d0
    a8b6:	|         move.w d0,d0
    a8b8:	|         andi.l #65535,d0
    a8be:	|         move.l 256(sp),-(sp)
    a8c2:	|         move.l d0,-(sp)
    a8c4:	|         jsr 8d0 <put2bytes>
    a8ca:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    a8cc:	|         move.l 1948a <parallaxStuff>,d0
    a8d2:	|         move.l 256(sp),-(sp)
    a8d6:	|         move.l d0,-(sp)
    a8d8:	|         jsr af10 <saveParallaxRecursive>
    a8de:	|         addq.l #8,sp
	FPutC (fp, 0);
    a8e0:	|         move.l 256(sp),40(sp)
    a8e6:	|         clr.l 36(sp)
    a8ea:	|         move.l 19394 <DOSBase>,d0
    a8f0:	|         movea.l d0,a6
    a8f2:	|         move.l 40(sp),d1
    a8f6:	|         move.l 36(sp),d2
    a8fa:	|         jsr -312(a6)
    a8fe:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    a902:	|         move.l 256(sp),28(sp)
    a908:	|         move.l 18d22 <languageNum>,24(sp)
    a910:	|         move.l 19394 <DOSBase>,d0
    a916:	|         movea.l d0,a6
    a918:	|         move.l 28(sp),d1
    a91c:	|         move.l 24(sp),d2
    a920:	|         jsr -312(a6)
    a924:	|         move.l d0,20(sp)

	Close(fp);
    a928:	|         move.l 256(sp),16(sp)
    a92e:	|         move.l 19394 <DOSBase>,d0
    a934:	|         movea.l d0,a6
    a936:	|         move.l 16(sp),d1
    a93a:	|         jsr -36(a6)
    a93e:	|         move.l d0,12(sp)
	clearStackLib ();
    a942:	|         jsr 9eda <clearStackLib>
	return TRUE;
    a948:	|         moveq #1,d0
}
    a94a:	\-------> movem.l (sp)+,d2-d3/a6
    a94e:	          lea 272(sp),sp
    a952:	          rts

0000a954 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    a954:	       lea -12(sp),sp
	int elements = 0;
    a958:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    a95c:	       move.l 16(sp),(sp)
	while (search) {
    a960:	   /-- bra.s a96c <saveStack+0x18>
		elements ++;
    a962:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    a966:	|  |   movea.l (sp),a0
    a968:	|  |   move.l 8(a0),(sp)
	while (search) {
    a96c:	|  \-> tst.l (sp)
    a96e:	\----- bne.s a962 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    a970:	       move.l 20(sp),-(sp)
    a974:	       move.l 12(sp),-(sp)
    a978:	       jsr 8d0 <put2bytes>
    a97e:	       addq.l #8,sp
	search = vs;
    a980:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    a984:	       clr.l 4(sp)
    a988:	   /-- bra.s a9a4 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    a98a:	/--|-> move.l (sp),d0
    a98c:	|  |   move.l 20(sp),-(sp)
    a990:	|  |   move.l d0,-(sp)
    a992:	|  |   jsr aae0 <saveVariable>
    a998:	|  |   addq.l #8,sp
		search = search -> next;
    a99a:	|  |   movea.l (sp),a0
    a99c:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    a9a0:	|  |   addq.l #1,4(sp)
    a9a4:	|  \-> move.l 4(sp),d0
    a9a8:	|      cmp.l 8(sp),d0
    a9ac:	\----- blt.s a98a <saveStack+0x36>
	}
}
    a9ae:	       nop
    a9b0:	       nop
    a9b2:	       lea 12(sp),sp
    a9b6:	       rts

0000a9b8 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    a9b8:	             lea -44(sp),sp
    a9bc:	             move.l a6,-(sp)
    a9be:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    a9c0:	             move.l 19474 <stackLib>,48(sp)
	int a = 0;
    a9c8:	             clr.l 44(sp)
	while (s) {
    a9cc:	      /----- bra.s aa2a <saveStackRef+0x72>
		if (s -> stack == vs) {
    a9ce:	   /--|----> movea.l 48(sp),a0
    a9d2:	   |  |      move.l (a0),d0
    a9d4:	   |  |      cmp.l 56(sp),d0
    a9d8:	   |  |  /-- bne.s aa1c <saveStackRef+0x64>
			FPutC (fp, 1);
    a9da:	   |  |  |   move.l 60(sp),16(sp)
    a9e0:	   |  |  |   moveq #1,d0
    a9e2:	   |  |  |   move.l d0,12(sp)
    a9e6:	   |  |  |   move.l 19394 <DOSBase>,d0
    a9ec:	   |  |  |   movea.l d0,a6
    a9ee:	   |  |  |   move.l 16(sp),d1
    a9f2:	   |  |  |   move.l 12(sp),d2
    a9f6:	   |  |  |   jsr -312(a6)
    a9fa:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    a9fe:	   |  |  |   move.l 19470 <stackLibTotal>,d0
    aa04:	   |  |  |   sub.l 44(sp),d0
    aa08:	   |  |  |   move.l 60(sp),-(sp)
    aa0c:	   |  |  |   move.l d0,-(sp)
    aa0e:	   |  |  |   jsr 8d0 <put2bytes>
    aa14:	   |  |  |   addq.l #8,sp
			return TRUE;
    aa16:	   |  |  |   moveq #1,d0
    aa18:	/--|--|--|-- bra.w aad6 <saveStackRef+0x11e>
		}
		s = s -> next;
    aa1c:	|  |  |  \-> movea.l 48(sp),a0
    aa20:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    aa26:	|  |  |      addq.l #1,44(sp)
	while (s) {
    aa2a:	|  |  \----> tst.l 48(sp)
    aa2e:	|  \-------- bne.s a9ce <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    aa30:	|            move.l 60(sp),40(sp)
    aa36:	|            clr.l 36(sp)
    aa3a:	|            move.l 19394 <DOSBase>,d0
    aa40:	|            movea.l d0,a6
    aa42:	|            move.l 40(sp),d1
    aa46:	|            move.l 36(sp),d2
    aa4a:	|            jsr -312(a6)
    aa4e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    aa52:	|            movea.l 56(sp),a0
    aa56:	|            move.l (a0),d0
    aa58:	|            move.l 60(sp),-(sp)
    aa5c:	|            move.l d0,-(sp)
    aa5e:	|            jsr a954 <saveStack>
    aa64:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    aa66:	|            moveq #8,d0
    aa68:	|            move.l d0,28(sp)
    aa6c:	|            clr.l 24(sp)
    aa70:	|            move.l 1938c <SysBase>,d0
    aa76:	|            movea.l d0,a6
    aa78:	|            move.l 28(sp),d0
    aa7c:	|            move.l 24(sp),d1
    aa80:	|            jsr -684(a6)
    aa84:	|            move.l d0,20(sp)
    aa88:	|            move.l 20(sp),d0
    aa8c:	|            move.l d0,48(sp)
	stackLibTotal ++;
    aa90:	|            move.l 19470 <stackLibTotal>,d0
    aa96:	|            addq.l #1,d0
    aa98:	|            move.l d0,19470 <stackLibTotal>
	if (! s) {
    aa9e:	|            tst.l 48(sp)
    aaa2:	|        /-- bne.s aab6 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    aaa4:	|        |   pea 15ef6 <custom.c.49191367+0x11ca>
    aaaa:	|        |   jsr 141e2 <KPrintF>
    aab0:	|        |   addq.l #4,sp
		return FALSE;
    aab2:	|        |   clr.w d0
    aab4:	+--------|-- bra.s aad6 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    aab6:	|        \-> move.l 19474 <stackLib>,d0
    aabc:	|            movea.l 48(sp),a0
    aac0:	|            move.l d0,4(a0)
	s -> stack = vs;
    aac4:	|            movea.l 48(sp),a0
    aac8:	|            move.l 56(sp),(a0)
	stackLib = s;
    aacc:	|            move.l 48(sp),19474 <stackLib>
	return TRUE;
    aad4:	|            moveq #1,d0
}
    aad6:	\----------> move.l (sp)+,d2
    aad8:	             movea.l (sp)+,a6
    aada:	             lea 44(sp),sp
    aade:	             rts

0000aae0 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    aae0:	          lea -12(sp),sp
    aae4:	          move.l a6,-(sp)
    aae6:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    aae8:	          move.l 28(sp),16(sp)
    aaee:	          movea.l 24(sp),a0
    aaf2:	          move.l (a0),d0
    aaf4:	          move.l d0,12(sp)
    aaf8:	          move.l 19394 <DOSBase>,d0
    aafe:	          movea.l d0,a6
    ab00:	          move.l 16(sp),d1
    ab04:	          move.l 12(sp),d2
    ab08:	          jsr -312(a6)
    ab0c:	          move.l d0,8(sp)
	switch (from -> varType) {
    ab10:	          movea.l 24(sp),a0
    ab14:	          move.l (a0),d0
    ab16:	          moveq #9,d1
    ab18:	          cmp.l d0,d1
    ab1a:	      /-- bcs.w abca <saveVariable+0xea>
    ab1e:	      |   add.l d0,d0
    ab20:	      |   movea.l d0,a0
    ab22:	      |   adda.l #43822,a0
    ab28:	      |   move.w (a0),d0
    ab2a:	      |   jmp (ab2e <saveVariable+0x4e>,pc,d0.w)
    ab2e:	      |   ori.l #1310740,(a0)+
    ab34:	      |   ori.b #20,(20,a0,d0.w)
    ab3a:	      |   .short 0x004c
    ab3c:	      |   ori.b #126,(a4)
    ab40:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ab44:	      |   ori.b #40,(a0)+
    ab48:	      |   ori.b #47,d4
    ab4c:	      |   ori.b #0,(a4)+
    ab50:	      |   jsr 958 <put4bytes>
    ab56:	      |   addq.l #8,sp
		return TRUE;
    ab58:	      |   moveq #1,d0
    ab5a:	/-----|-- bra.w ac06 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ab5e:	|     |   movea.l 24(sp),a0
    ab62:	|     |   move.l 4(a0),d0
    ab66:	|     |   move.l 28(sp),-(sp)
    ab6a:	|     |   move.l d0,-(sp)
    ab6c:	|     |   jsr bd8 <writeString>
    ab72:	|     |   addq.l #8,sp
		return TRUE;
    ab74:	|     |   moveq #1,d0
    ab76:	+-----|-- bra.w ac06 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ab7a:	|     |   movea.l 24(sp),a0
    ab7e:	|     |   move.l 4(a0),d0
    ab82:	|     |   move.l 28(sp),-(sp)
    ab86:	|     |   move.l d0,-(sp)
    ab88:	|     |   jsr a9b8 <saveStackRef>
    ab8e:	|     |   addq.l #8,sp
    ab90:	+-----|-- bra.s ac06 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ab92:	|     |   movea.l 24(sp),a0
    ab96:	|     |   move.l 4(a0),d0
    ab9a:	|     |   move.l 28(sp),-(sp)
    ab9e:	|     |   move.l d0,-(sp)
    aba0:	|     |   jsr 8c66 <saveCostume>
    aba6:	|     |   addq.l #8,sp
		return FALSE;
    aba8:	|     |   clr.w d0
    abaa:	+-----|-- bra.s ac06 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    abac:	|     |   movea.l 24(sp),a0
    abb0:	|     |   move.l 4(a0),d0
    abb4:	|     |   move.l 28(sp),-(sp)
    abb8:	|     |   move.l d0,-(sp)
    abba:	|     |   jsr 8b9c <saveAnim>
    abc0:	|     |   addq.l #8,sp
		return FALSE;
    abc2:	|     |   clr.w d0
    abc4:	+-----|-- bra.s ac06 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    abc6:	|     |   clr.w d0
    abc8:	+-----|-- bra.s ac06 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    abca:	|     \-> movea.l 24(sp),a0
    abce:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    abd0:	|         moveq #10,d1
    abd2:	|         cmp.l d0,d1
    abd4:	|  /----- bcs.s abee <saveVariable+0x10e>
						typeName[from->varType] :
    abd6:	|  |      movea.l 24(sp),a0
    abda:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    abdc:	|  |      add.l d0,d0
    abde:	|  |      movea.l d0,a1
    abe0:	|  |      adda.l d0,a1
    abe2:	|  |      lea 19282 <typeName>,a0
    abe8:	|  |      move.l (0,a1,a0.l),d0
    abec:	|  |  /-- bra.s abf4 <saveVariable+0x114>
    abee:	|  \--|-> move.l #89883,d0
    abf4:	|     \-> move.l d0,-(sp)
    abf6:	|         pea 15f22 <custom.c.49191367+0x11f6>
    abfc:	|         jsr 141e2 <KPrintF>
    ac02:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    ac04:	|         moveq #1,d0
    ac06:	\-------> move.l (sp)+,d2
    ac08:	          movea.l (sp)+,a6
    ac0a:	          lea 12(sp),sp
    ac0e:	          rts

0000ac10 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    ac10:	moveq #0,d0
}
    ac12:	rts

0000ac14 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    ac14:	nop
    ac16:	rts

0000ac18 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    ac18:	nop
    ac1a:	rts

0000ac1c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    ac1c:	moveq #1,d0
}
    ac1e:	rts

0000ac20 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    ac20:	nop
    ac22:	rts

0000ac24 <saveSounds>:

void saveSounds (BPTR fp) {
    ac24:	lea -12(sp),sp
    ac28:	move.l a6,-(sp)
    ac2a:	move.l d2,-(sp)
	FPutC (fp,0);
    ac2c:	move.l 24(sp),16(sp)
    ac32:	clr.l 12(sp)
    ac36:	move.l 19394 <DOSBase>,d0
    ac3c:	movea.l d0,a6
    ac3e:	move.l 16(sp),d1
    ac42:	move.l 12(sp),d2
    ac46:	jsr -312(a6)
    ac4a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    ac4e:	move.l 18d40 <defSoundVol>,d0
    ac54:	move.l 24(sp),-(sp)
    ac58:	move.l d0,-(sp)
    ac5a:	jsr 8d0 <put2bytes>
    ac60:	addq.l #8,sp
	put2bytes (defVol, fp);
    ac62:	move.l 18d3c <defVol>,d0
    ac68:	move.l 24(sp),-(sp)
    ac6c:	move.l d0,-(sp)
    ac6e:	jsr 8d0 <put2bytes>
    ac74:	addq.l #8,sp
}
    ac76:	nop
    ac78:	move.l (sp)+,d2
    ac7a:	movea.l (sp)+,a6
    ac7c:	lea 12(sp),sp
    ac80:	rts

0000ac82 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    ac82:	move.l 4(sp),18d3c <defVol>
}
    ac8a:	nop
    ac8c:	rts

0000ac8e <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    ac8e:	move.l 4(sp),18d40 <defSoundVol>
}
    ac96:	nop
    ac98:	rts

0000ac9a <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    ac9a:	nop
    ac9c:	rts

0000ac9e <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    ac9e:	nop
    aca0:	rts

0000aca2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    aca2:	nop
    aca4:	rts

0000aca6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    aca6:	subq.l #4,sp
    aca8:	move.l 12(sp),d0
    acac:	move.w d0,d0
    acae:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    acb2:	moveq #1,d0
}
    acb4:	addq.l #4,sp
    acb6:	rts

0000acb8 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    acb8:	nop
    acba:	rts

0000acbc <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    acbc:	move.l 16(sp),-(sp)
    acc0:	move.l 16(sp),-(sp)
    acc4:	jsr df4 <CstBlankScreen>
    acca:	addq.l #8,sp
}
    accc:	nop
    acce:	rts

0000acd0 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    acd0:	pea 15f45 <custom.c.49191367+0x1219>
    acd6:	jsr 141e2 <KPrintF>
    acdc:	addq.l #4,sp
}
    acde:	nop
    ace0:	rts

0000ace2 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    ace2:	movea.l 8(sp),a1
    ace6:	movea.l 12(sp),a0
    acea:	move.l 8(sp),d1
    acee:	move.l 4(sp),d0
    acf2:	move.l a1,-(sp)
    acf4:	move.l a0,-(sp)
    acf6:	move.l d1,-(sp)
    acf8:	move.l d0,-(sp)
    acfa:	jsr 2070 <drawLine>
    ad00:	lea 16(sp),sp
}
    ad04:	nop
    ad06:	rts

0000ad08 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    ad08:	movea.l 12(sp),a1
    ad0c:	movea.l 4(sp),a0
    ad10:	move.l 8(sp),d1
    ad14:	move.l 4(sp),d0
    ad18:	move.l a1,-(sp)
    ad1a:	move.l a0,-(sp)
    ad1c:	move.l d1,-(sp)
    ad1e:	move.l d0,-(sp)
    ad20:	jsr 2070 <drawLine>
    ad26:	lea 16(sp),sp
}
    ad2a:	nop
    ad2c:	rts

0000ad2e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    ad2e:	pea 15f7e <custom.c.49191367+0x1252>
    ad34:	jsr 141e2 <KPrintF>
    ad3a:	addq.l #4,sp
}
    ad3c:	nop
    ad3e:	rts

0000ad40 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    ad40:	jsr 2000 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    ad46:	pea 19484 <backdropTextureName>
    ad4c:	pea 1 <_start+0x1>
    ad50:	jsr 21f2 <deleteTextures>
    ad56:	addq.l #8,sp
	backdropTextureName = 0;
    ad58:	clr.l 19484 <backdropTextureName>
	backdropExists = FALSE;
    ad5e:	clr.w 19488 <backdropExists>
}
    ad64:	nop
    ad66:	rts

0000ad68 <killParallax>:

void killParallax () {
    ad68:	          lea -12(sp),sp
    ad6c:	          move.l a6,-(sp)
	while (parallaxStuff) {
    ad6e:	   /----- bra.s adda <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    ad70:	/--|----> move.l 1948a <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    ad78:	|  |      movea.l 12(sp),a0
    ad7c:	|  |      move.l 42(a0),d0
    ad80:	|  |      move.l d0,1948a <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    ad86:	|  |      move.l 12(sp),d0
    ad8a:	|  |      addq.l #4,d0
    ad8c:	|  |      move.l d0,-(sp)
    ad8e:	|  |      pea 1 <_start+0x1>
    ad92:	|  |      jsr 21f2 <deleteTextures>
    ad98:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    ad9a:	|  |      movea.l 12(sp),a0
    ad9e:	|  |      move.l (a0),d0
    ada0:	|  |  /-- beq.s adba <killParallax+0x52>
    ada2:	|  |  |   movea.l 12(sp),a0
    ada6:	|  |  |   move.l (a0),8(sp)
    adaa:	|  |  |   move.l 1938c <SysBase>,d0
    adb0:	|  |  |   movea.l d0,a6
    adb2:	|  |  |   movea.l 8(sp),a1
    adb6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    adba:	|  |  \-> tst.l 12(sp)
    adbe:	|  |  /-- beq.s add6 <killParallax+0x6e>
    adc0:	|  |  |   move.l 12(sp),4(sp)
    adc6:	|  |  |   move.l 1938c <SysBase>,d0
    adcc:	|  |  |   movea.l d0,a6
    adce:	|  |  |   movea.l 4(sp),a1
    add2:	|  |  |   jsr -690(a6)
		k = NULL;
    add6:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    adda:	|  \----> move.l 1948a <parallaxStuff>,d0
    ade0:	\-------- bne.s ad70 <killParallax+0x8>
	}
}
    ade2:	          nop
    ade4:	          nop
    ade6:	          movea.l (sp)+,a6
    ade8:	          lea 12(sp),sp
    adec:	          rts

0000adee <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    adee:	       move.l 4(sp),-(sp)
    adf2:	       jsr 4cac <openFileFromNum>
    adf8:	       addq.l #4,sp
    adfa:	       tst.l d0
    adfc:	   /-- bne.s ae0e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    adfe:	   |   pea 15f9f <custom.c.49191367+0x1273>
    ae04:	   |   jsr 141e2 <KPrintF>
    ae0a:	   |   addq.l #4,sp
		return;
    ae0c:	/--|-- bra.s ae2e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    ae0e:	|  \-> move.l 19374 <bigDataFile>,d0
    ae14:	|      move.l 12(sp),-(sp)
    ae18:	|      move.l 12(sp),-(sp)
    ae1c:	|      move.l d0,-(sp)
    ae1e:	|      jsr 11fa <CstLoadBackdrop>
    ae24:	|      lea 12(sp),sp
	finishAccess ();
    ae28:	|      jsr 4ba4 <finishAccess>
	
}
    ae2e:	\----> rts

0000ae30 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    ae30:	subq.l #8,sp
    ae32:	movea.l 12(sp),a0
    ae36:	move.l 16(sp),d1
    ae3a:	move.l 20(sp),d0
    ae3e:	movea.w a0,a0
    ae40:	move.w a0,6(sp)
    ae44:	move.w d1,d1
    ae46:	move.w d1,4(sp)
    ae4a:	move.w d0,d0
    ae4c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    ae50:	pea 15fee <custom.c.49191367+0x12c2>
    ae56:	jsr 141e2 <KPrintF>
    ae5c:	addq.l #4,sp

}
    ae5e:	nop
    ae60:	addq.l #8,sp
    ae62:	rts

0000ae64 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    ae64:	pea 16011 <custom.c.49191367+0x12e5>
    ae6a:	jsr 141e2 <KPrintF>
    ae70:	addq.l #4,sp
}
    ae72:	nop
    ae74:	rts

0000ae76 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    ae76:	pea 1948e <snapshotTextureName>
    ae7c:	pea 1 <_start+0x1>
    ae80:	jsr 21f2 <deleteTextures>
    ae86:	addq.l #8,sp
	snapshotTextureName = 0;
    ae88:	clr.l 1948e <snapshotTextureName>
}
    ae8e:	nop
    ae90:	rts

0000ae92 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    ae92:	move.l 19480 <sceneHeight>,d0
    ae98:	move.l d0,d1
    ae9a:	move.l 1947c <sceneWidth>,d0
    aea0:	move.l d1,-(sp)
    aea2:	move.l d0,-(sp)
    aea4:	jsr 1e0c <CstReserveBackdrop>
    aeaa:	addq.l #8,sp
}
    aeac:	rts

0000aeae <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    aeae:	jsr ad40 <killBackDrop>
	killParallax ();
    aeb4:	jsr ad68 <killParallax>
	killZBuffer ();
    aeba:	jsr 6640 <killZBuffer>
	sceneWidth = x;
    aec0:	move.l 4(sp),d0
    aec4:	move.l d0,1947c <sceneWidth>
	sceneHeight = y;
    aeca:	move.l 8(sp),d0
    aece:	move.l d0,19480 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    aed4:	pea 1604a <custom.c.49191367+0x131e>
    aeda:	jsr 141e2 <KPrintF>
    aee0:	addq.l #4,sp
	return reserveBackdrop();
    aee2:	jsr ae92 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    aee8:	rts

0000aeea <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    aeea:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    aeec:	move.l 12(sp),-(sp)
    aef0:	jsr 6bc <get2bytes>
    aef6:	addq.l #4,sp
    aef8:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    aefc:	move.l 12(sp),-(sp)
    af00:	jsr 6bc <get2bytes>
    af06:	addq.l #4,sp
    af08:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    af0a:	moveq #1,d0
}
    af0c:	addq.l #8,sp
    af0e:	rts

0000af10 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    af10:	   /-> lea -12(sp),sp
    af14:	   |   move.l a6,-(sp)
    af16:	   |   move.l d2,-(sp)
	if (me) {
    af18:	   |   tst.l 24(sp)
    af1c:	/--|-- beq.w afb2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    af20:	|  |   movea.l 24(sp),a0
    af24:	|  |   move.l 42(a0),d0
    af28:	|  |   move.l 28(sp),-(sp)
    af2c:	|  |   move.l d0,-(sp)
    af2e:	|  \-- jsr af10 <saveParallaxRecursive>(pc)
    af32:	|      addq.l #8,sp
		FPutC (fp, 1);
    af34:	|      move.l 28(sp),16(sp)
    af3a:	|      moveq #1,d0
    af3c:	|      move.l d0,12(sp)
    af40:	|      move.l 19394 <DOSBase>,d0
    af46:	|      movea.l d0,a6
    af48:	|      move.l 16(sp),d1
    af4c:	|      move.l 12(sp),d2
    af50:	|      jsr -312(a6)
    af54:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    af58:	|      movea.l 24(sp),a0
    af5c:	|      move.w 28(a0),d0
    af60:	|      move.w d0,d0
    af62:	|      andi.l #65535,d0
    af68:	|      move.l 28(sp),-(sp)
    af6c:	|      move.l d0,-(sp)
    af6e:	|      jsr 8d0 <put2bytes>
    af74:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    af76:	|      movea.l 24(sp),a0
    af7a:	|      move.w 30(a0),d0
    af7e:	|      move.w d0,d0
    af80:	|      andi.l #65535,d0
    af86:	|      move.l 28(sp),-(sp)
    af8a:	|      move.l d0,-(sp)
    af8c:	|      jsr 8d0 <put2bytes>
    af92:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    af94:	|      movea.l 24(sp),a0
    af98:	|      move.w 32(a0),d0
    af9c:	|      move.w d0,d0
    af9e:	|      andi.l #65535,d0
    afa4:	|      move.l 28(sp),-(sp)
    afa8:	|      move.l d0,-(sp)
    afaa:	|      jsr 8d0 <put2bytes>
    afb0:	|      addq.l #8,sp
	}
}
    afb2:	\----> nop
    afb4:	       move.l (sp)+,d2
    afb6:	       movea.l (sp)+,a6
    afb8:	       lea 12(sp),sp
    afbc:	       rts

0000afbe <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    afbe:	pea 16071 <custom.c.49191367+0x1345>
    afc4:	jsr 141e2 <KPrintF>
    afca:	addq.l #4,sp
	return TRUE;
    afcc:	moveq #1,d0
    afce:	rts

0000afd0 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    afd0:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    afd2:	             move.l 19492 <allObjectTypes>,(sp)

	while (huntType) {
    afd8:	      /----- bra.s aff0 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    afda:	   /--|----> movea.l (sp),a0
    afdc:	   |  |      move.l 4(a0),d0
    afe0:	   |  |      cmp.l 8(sp),d0
    afe4:	   |  |  /-- bne.s afea <findObjectType+0x1a>
    afe6:	   |  |  |   move.l (sp),d0
    afe8:	/--|--|--|-- bra.s b000 <findObjectType+0x30>
		huntType = huntType -> next;
    afea:	|  |  |  \-> movea.l (sp),a0
    afec:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    aff0:	|  |  \----> tst.l (sp)
    aff2:	|  \-------- bne.s afda <findObjectType+0xa>
	}

	return loadObjectType (i);
    aff4:	|            move.l 8(sp),-(sp)
    aff8:	|            jsr b0c0 <loadObjectType>
    affe:	|            addq.l #4,sp
}
    b000:	\----------> addq.l #4,sp
    b002:	             rts

0000b004 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    b004:	             lea -12(sp),sp
	int i, num = 0;
    b008:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    b00c:	             move.l 20(sp),-(sp)
    b010:	             jsr afd0 <findObjectType>
    b016:	             addq.l #4,sp
    b018:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    b01a:	             clr.l 8(sp)
    b01e:	   /-------- bra.s b054 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    b020:	/--|-------> movea.l (sp),a0
    b022:	|  |         move.l 38(a0),d1
    b026:	|  |         move.l 8(sp),d0
    b02a:	|  |         lsl.l #3,d0
    b02c:	|  |         movea.l d1,a0
    b02e:	|  |         adda.l d0,a0
    b030:	|  |         move.l (a0),d0
    b032:	|  |         cmp.l 16(sp),d0
    b036:	|  |  /----- bne.s b050 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    b038:	|  |  |      movea.l (sp),a0
    b03a:	|  |  |      move.l 38(a0),d1
    b03e:	|  |  |      move.l 8(sp),d0
    b042:	|  |  |      lsl.l #3,d0
    b044:	|  |  |      movea.l d1,a0
    b046:	|  |  |      adda.l d0,a0
    b048:	|  |  |      move.l 4(a0),4(sp)
			break;
    b04e:	|  |  |  /-- bra.s b060 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    b050:	|  |  \--|-> addq.l #1,8(sp)
    b054:	|  \-----|-> movea.l (sp),a0
    b056:	|        |   move.l 16(a0),d0
    b05a:	|        |   cmp.l 8(sp),d0
    b05e:	\--------|-- bgt.s b020 <getCombinationFunction+0x1c>
		}
	}

	return num;
    b060:	         \-> move.l 4(sp),d0
}
    b064:	             lea 12(sp),sp
    b068:	             rts

0000b06a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    b06a:	moveq #1,d0
}
    b06c:	rts

0000b06e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    b06e:	subq.l #8,sp
    b070:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    b072:	move.l 16(sp),-(sp)
    b076:	jsr 6bc <get2bytes>
    b07c:	addq.l #4,sp
    b07e:	move.l d0,-(sp)
    b080:	jsr b0c0 <loadObjectType>
    b086:	addq.l #4,sp
    b088:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    b08c:	movea.l 8(sp),a0
    b090:	move.l (a0),4(sp)
    b094:	move.l 1938c <SysBase>,d0
    b09a:	movea.l d0,a6
    b09c:	movea.l 4(sp),a1
    b0a0:	jsr -690(a6)
	r -> screenName = readString (fp);
    b0a4:	move.l 16(sp),-(sp)
    b0a8:	jsr b02 <readString>
    b0ae:	addq.l #4,sp
    b0b0:	movea.l 8(sp),a0
    b0b4:	move.l d0,(a0)
	return r;
    b0b6:	move.l 8(sp),d0
}
    b0ba:	movea.l (sp)+,a6
    b0bc:	addq.l #8,sp
    b0be:	rts

0000b0c0 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    b0c0:	          lea -84(sp),sp
    b0c4:	          move.l a6,-(sp)
    b0c6:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    b0c8:	          moveq #42,d0
    b0ca:	          move.l d0,84(sp)
    b0ce:	          clr.l 80(sp)
    b0d2:	          move.l 1938c <SysBase>,d0
    b0d8:	          movea.l d0,a6
    b0da:	          move.l 84(sp),d0
    b0de:	          move.l 80(sp),d1
    b0e2:	          jsr -684(a6)
    b0e6:	          move.l d0,76(sp)
    b0ea:	          move.l 76(sp),d0
    b0ee:	          move.l d0,72(sp)

    if (newType) {
    b0f2:	/-------- beq.w b36c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    b0f6:	|         move.l 96(sp),-(sp)
    b0fa:	|         jsr 4d74 <openObjectSlice>
    b100:	|         addq.l #4,sp
    b102:	|         tst.w d0
    b104:	+-------- beq.w b36c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    b108:	|         move.l 19374 <bigDataFile>,d0
    b10e:	|         move.l d0,-(sp)
    b110:	|         jsr 6bc <get2bytes>
    b116:	|         addq.l #4,sp
    b118:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    b11c:	|         move.l 19374 <bigDataFile>,64(sp)
    b124:	|         move.l 19394 <DOSBase>,d0
    b12a:	|         movea.l d0,a6
    b12c:	|         move.l 64(sp),d1
    b130:	|         jsr -306(a6)
    b134:	|         move.l d0,60(sp)
    b138:	|         move.l 60(sp),d0
    b13c:	|         move.l d0,d0
    b13e:	|         movea.l 72(sp),a0
    b142:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    b146:	|         move.l 19374 <bigDataFile>,56(sp)
    b14e:	|         move.l 19394 <DOSBase>,d0
    b154:	|         movea.l d0,a6
    b156:	|         move.l 56(sp),d1
    b15a:	|         jsr -306(a6)
    b15e:	|         move.l d0,52(sp)
    b162:	|         move.l 52(sp),d0
    b166:	|         move.l d0,d0
    b168:	|         movea.l 72(sp),a0
    b16c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    b170:	|         move.l 19374 <bigDataFile>,48(sp)
    b178:	|         move.l 19394 <DOSBase>,d0
    b17e:	|         movea.l d0,a6
    b180:	|         move.l 48(sp),d1
    b184:	|         jsr -306(a6)
    b188:	|         move.l d0,44(sp)
    b18c:	|         move.l 44(sp),d0
    b190:	|         move.l d0,d0
    b192:	|         movea.l 72(sp),a0
    b196:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    b19a:	|         move.l 19374 <bigDataFile>,40(sp)
    b1a2:	|         move.l 19394 <DOSBase>,d0
    b1a8:	|         movea.l d0,a6
    b1aa:	|         move.l 40(sp),d1
    b1ae:	|         jsr -306(a6)
    b1b2:	|         move.l d0,36(sp)
    b1b6:	|         move.l 36(sp),d0
    b1ba:	|         movea.l 72(sp),a0
    b1be:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    b1c2:	|         move.l 19374 <bigDataFile>,32(sp)
    b1ca:	|         move.l 19394 <DOSBase>,d0
    b1d0:	|         movea.l d0,a6
    b1d2:	|         move.l 32(sp),d1
    b1d6:	|         jsr -306(a6)
    b1da:	|         move.l d0,28(sp)
    b1de:	|         move.l 28(sp),d0
    b1e2:	|         movea.l 72(sp),a0
    b1e6:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    b1ea:	|         move.l 19374 <bigDataFile>,d0
    b1f0:	|         move.l d0,-(sp)
    b1f2:	|         jsr 718 <get4bytes>
    b1f8:	|         addq.l #4,sp
    b1fa:	|         movea.l 72(sp),a0
    b1fe:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    b202:	|         move.l 19374 <bigDataFile>,d0
    b208:	|         move.l d0,-(sp)
    b20a:	|         jsr 6bc <get2bytes>
    b210:	|         addq.l #4,sp
    b212:	|         movea.l 72(sp),a0
    b216:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    b21a:	|         move.l 19374 <bigDataFile>,24(sp)
    b222:	|         move.l 19394 <DOSBase>,d0
    b228:	|         movea.l d0,a6
    b22a:	|         move.l 24(sp),d1
    b22e:	|         jsr -306(a6)
    b232:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    b236:	|         move.l 19374 <bigDataFile>,d0
    b23c:	|         move.l d0,-(sp)
    b23e:	|         jsr 7d8 <getFloat>
    b244:	|         addq.l #4,sp
            getFloat(bigDataFile);
    b246:	|         move.l 19374 <bigDataFile>,d0
    b24c:	|         move.l d0,-(sp)
    b24e:	|         jsr 7d8 <getFloat>
    b254:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    b256:	|         move.l 19374 <bigDataFile>,d0
    b25c:	|         move.l d0,-(sp)
    b25e:	|         jsr 6bc <get2bytes>
    b264:	|         addq.l #4,sp
    b266:	|         move.l d0,d0
    b268:	|         movea.l 72(sp),a0
    b26c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    b270:	|         move.l 19374 <bigDataFile>,d0
    b276:	|         move.l d0,-(sp)
    b278:	|         jsr 6bc <get2bytes>
    b27e:	|         addq.l #4,sp
    b280:	|         movea.l 72(sp),a0
    b284:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    b288:	|         movea.l 72(sp),a0
    b28c:	|         move.l 16(a0),d0
    b290:	|  /----- beq.s b2c2 <loadObjectType+0x202>
    b292:	|  |      movea.l 72(sp),a0
    b296:	|  |      move.l 16(a0),d0
    b29a:	|  |      lsl.l #3,d0
    b29c:	|  |      move.l d0,16(sp)
    b2a0:	|  |      clr.l 12(sp)
    b2a4:	|  |      move.l 1938c <SysBase>,d0
    b2aa:	|  |      movea.l d0,a6
    b2ac:	|  |      move.l 16(sp),d0
    b2b0:	|  |      move.l 12(sp),d1
    b2b4:	|  |      jsr -684(a6)
    b2b8:	|  |      move.l d0,8(sp)
    b2bc:	|  |      move.l 8(sp),d0
    b2c0:	|  |  /-- bra.s b2c4 <loadObjectType+0x204>
    b2c2:	|  \--|-> moveq #0,d0
    b2c4:	|     \-> movea.l 72(sp),a0
    b2c8:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    b2cc:	|         clr.l 88(sp)
    b2d0:	|     /-- bra.s b320 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    b2d2:	|  /--|-> move.l 19374 <bigDataFile>,d1
    b2d8:	|  |  |   movea.l 72(sp),a0
    b2dc:	|  |  |   movea.l 38(a0),a0
    b2e0:	|  |  |   move.l 88(sp),d0
    b2e4:	|  |  |   lsl.l #3,d0
    b2e6:	|  |  |   lea (0,a0,d0.l),a2
    b2ea:	|  |  |   move.l d1,-(sp)
    b2ec:	|  |  |   jsr 6bc <get2bytes>
    b2f2:	|  |  |   addq.l #4,sp
    b2f4:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    b2f6:	|  |  |   move.l 19374 <bigDataFile>,d1
    b2fc:	|  |  |   movea.l 72(sp),a0
    b300:	|  |  |   movea.l 38(a0),a0
    b304:	|  |  |   move.l 88(sp),d0
    b308:	|  |  |   lsl.l #3,d0
    b30a:	|  |  |   lea (0,a0,d0.l),a2
    b30e:	|  |  |   move.l d1,-(sp)
    b310:	|  |  |   jsr 6bc <get2bytes>
    b316:	|  |  |   addq.l #4,sp
    b318:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    b31c:	|  |  |   addq.l #1,88(sp)
    b320:	|  |  \-> movea.l 72(sp),a0
    b324:	|  |      move.l 16(a0),d0
    b328:	|  |      cmp.l 88(sp),d0
    b32c:	|  \----- bgt.s b2d2 <loadObjectType+0x212>
            }
            finishAccess();
    b32e:	|         jsr 4ba4 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    b334:	|         move.l 68(sp),-(sp)
    b338:	|         jsr 4bae <getNumberedString>
    b33e:	|         addq.l #4,sp
    b340:	|         movea.l 72(sp),a0
    b344:	|         move.l d0,(a0)
            newType->objectNum = i;
    b346:	|         movea.l 72(sp),a0
    b34a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    b350:	|         move.l 19492 <allObjectTypes>,d0
    b356:	|         movea.l 72(sp),a0
    b35a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    b35e:	|         move.l 72(sp),19492 <allObjectTypes>
            return newType;
    b366:	|         move.l 72(sp),d0
    b36a:	|     /-- bra.s b36e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    b36c:	\-----|-> moveq #0,d0
}
    b36e:	      \-> movea.l (sp)+,a2
    b370:	          movea.l (sp)+,a6
    b372:	          lea 84(sp),sp
    b376:	          rts

0000b378 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    b378:	             lea -16(sp),sp
    b37c:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    b37e:	             move.l #103570,16(sp)

	while (* huntRegion) {
    b386:	   /-------- bra.s b3fa <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    b388:	/--|-------> movea.l 16(sp),a0
    b38c:	|  |         move.l (a0),d0
    b38e:	|  |         cmp.l 24(sp),d0
    b392:	|  |  /----- bne.s b3ec <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    b394:	|  |  |      movea.l 24(sp),a0
    b398:	|  |  |      move.l 8(a0),d0
    b39c:	|  |  |      movea.l 16(sp),a0
    b3a0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    b3a2:	|  |  |      movea.l 24(sp),a0
    b3a6:	|  |  |      move.l 38(a0),12(sp)
    b3ac:	|  |  |      move.l 1938c <SysBase>,d0
    b3b2:	|  |  |      movea.l d0,a6
    b3b4:	|  |  |      movea.l 12(sp),a1
    b3b8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    b3bc:	|  |  |      movea.l 24(sp),a0
    b3c0:	|  |  |      move.l (a0),8(sp)
    b3c4:	|  |  |      move.l 1938c <SysBase>,d0
    b3ca:	|  |  |      movea.l d0,a6
    b3cc:	|  |  |      movea.l 8(sp),a1
    b3d0:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    b3d4:	|  |  |      move.l 24(sp),4(sp)
    b3da:	|  |  |      move.l 1938c <SysBase>,d0
    b3e0:	|  |  |      movea.l d0,a6
    b3e2:	|  |  |      movea.l 4(sp),a1
    b3e6:	|  |  |      jsr -690(a6)
			return;
    b3ea:	|  |  |  /-- bra.s b410 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    b3ec:	|  |  \--|-> movea.l 16(sp),a0
    b3f0:	|  |     |   move.l (a0),d0
    b3f2:	|  |     |   move.l d0,d1
    b3f4:	|  |     |   addq.l #8,d1
    b3f6:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    b3fa:	|  \-----|-> movea.l 16(sp),a0
    b3fe:	|        |   move.l (a0),d0
    b400:	\--------|-- bne.s b388 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    b402:	         |   pea 16098 <custom.c.49191367+0x136c>
    b408:	         |   jsr 141e2 <KPrintF>
    b40e:	         |   addq.l #4,sp
}
    b410:	         \-> movea.l (sp)+,a6
    b412:	             lea 16(sp),sp
    b416:	             rts

0000b418 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    b418:	movea.l 4(sp),a0
    b41c:	move.l 4(a0),d0
    b420:	move.l 8(sp),-(sp)
    b424:	move.l d0,-(sp)
    b426:	jsr 8d0 <put2bytes>
    b42c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    b42e:	movea.l 4(sp),a0
    b432:	move.l (a0),d0
    b434:	move.l 8(sp),-(sp)
    b438:	move.l d0,-(sp)
    b43a:	jsr bd8 <writeString>
    b440:	addq.l #8,sp
    b442:	nop
    b444:	rts

0000b446 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    b446:	                         lea -112(sp),sp
    b44a:	                         move.l a6,-(sp)
    b44c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    b44e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    b452:	                         move.w 19498 <saveEncoding>,d0
    b458:	                  /----- beq.s b462 <fileToStack+0x1c>
    b45a:	                  |      move.l #90302,d0
    b460:	                  |  /-- bra.s b468 <fileToStack+0x22>
    b462:	                  \--|-> move.l #90328,d0
    b468:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    b46c:	                         move.l 124(sp),112(sp)
    b472:	                         move.l #1005,108(sp)
    b47a:	                         move.l 19394 <DOSBase>,d0
    b480:	                         movea.l d0,a6
    b482:	                         move.l 112(sp),d1
    b486:	                         move.l 108(sp),d2
    b48a:	                         jsr -30(a6)
    b48e:	                         move.l d0,104(sp)
    b492:	                         move.l 104(sp),d0
    b496:	                         move.l d0,100(sp)
    if (!fp) {
    b49a:	                     /-- bne.s b4b4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    b49c:	                     |   move.l 124(sp),-(sp)
    b4a0:	                     |   pea 160ef <custom.c.49191367+0x13c3>
    b4a6:	                     |   jsr 141e2 <KPrintF>
    b4ac:	                     |   addq.l #8,sp
        return FALSE;
    b4ae:	                     |   clr.w d0
    b4b0:	/--------------------|-- bra.w b7aa <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    b4b4:	|                    \-> move.w 19498 <saveEncoding>,d0
    b4ba:	|                        move.l d0,d0
    b4bc:	|                        move.b d0,19496 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    b4c2:	|                        move.w 19498 <saveEncoding>,d0
    b4c8:	|                        lsr.w #8,d0
    b4ca:	|                        move.l d0,d0
    b4cc:	|                        move.b d0,19497 <encode2>

    while (*checker) {
    b4d2:	|                 /----- bra.s b536 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    b4d4:	|              /--|----> move.l 100(sp),30(sp)
    b4da:	|              |  |      move.l 19394 <DOSBase>,d0
    b4e0:	|              |  |      movea.l d0,a6
    b4e2:	|              |  |      move.l 30(sp),d1
    b4e6:	|              |  |      jsr -306(a6)
    b4ea:	|              |  |      move.l d0,26(sp)
    b4ee:	|              |  |      move.l 26(sp),d1
    b4f2:	|              |  |      movea.l 116(sp),a0
    b4f6:	|              |  |      move.b (a0),d0
    b4f8:	|              |  |      ext.w d0
    b4fa:	|              |  |      movea.w d0,a0
    b4fc:	|              |  |      cmpa.l d1,a0
    b4fe:	|              |  |  /-- beq.s b532 <fileToStack+0xec>
            Close(fp);
    b500:	|              |  |  |   move.l 100(sp),22(sp)
    b506:	|              |  |  |   move.l 19394 <DOSBase>,d0
    b50c:	|              |  |  |   movea.l d0,a6
    b50e:	|              |  |  |   move.l 22(sp),d1
    b512:	|              |  |  |   jsr -36(a6)
    b516:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    b51a:	|              |  |  |   move.l 124(sp),-(sp)
    b51e:	|              |  |  |   pea 160fc <custom.c.49191367+0x13d0>
    b524:	|              |  |  |   jsr 141e2 <KPrintF>
    b52a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    b52c:	|              |  |  |   clr.w d0
    b52e:	+--------------|--|--|-- bra.w b7aa <fileToStack+0x364>
        }
        checker++;
    b532:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    b536:	|              |  \----> movea.l 116(sp),a0
    b53a:	|              |         move.b (a0),d0
    b53c:	|              \-------- bne.s b4d4 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    b53e:	|                        move.w 19498 <saveEncoding>,d0
    b544:	|  /-------------------- beq.s b5b8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    b546:	|  |                     move.l 100(sp),-(sp)
    b54a:	|  |                     jsr b7b4 <readStringEncoded>
    b550:	|  |                     addq.l #4,sp
    b552:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    b556:	|  |                     pea 1613d <custom.c.49191367+0x1411>
    b55c:	|  |                     move.l 100(sp),-(sp)
    b560:	|  |                     jsr 11646 <strcmp>
    b566:	|  |                     addq.l #8,sp
    b568:	|  |                     tst.l d0
    b56a:	|  |                 /-- beq.s b59e <fileToStack+0x158>
            Close(fp);
    b56c:	|  |                 |   move.l 100(sp),88(sp)
    b572:	|  |                 |   move.l 19394 <DOSBase>,d0
    b578:	|  |                 |   movea.l d0,a6
    b57a:	|  |                 |   move.l 88(sp),d1
    b57e:	|  |                 |   jsr -36(a6)
    b582:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    b586:	|  |                 |   move.l 124(sp),-(sp)
    b58a:	|  |                 |   pea 1614c <custom.c.49191367+0x1420>
    b590:	|  |                 |   jsr 141e2 <KPrintF>
    b596:	|  |                 |   addq.l #8,sp
            return FALSE;
    b598:	|  |                 |   clr.w d0
    b59a:	+--|-----------------|-- bra.w b7aa <fileToStack+0x364>
        }
        FreeVec(checker);
    b59e:	|  |                 \-> move.l 96(sp),92(sp)
    b5a4:	|  |                     move.l 1938c <SysBase>,d0
    b5aa:	|  |                     movea.l d0,a6
    b5ac:	|  |                     movea.l 92(sp),a1
    b5b0:	|  |                     jsr -690(a6)
        checker = NULL;
    b5b4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    b5b8:	|  >-------------------> move.w 19498 <saveEncoding>,d0
    b5be:	|  |     /-------------- beq.w b6f2 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    b5c2:	|  |     |               move.l 100(sp),76(sp)
    b5c8:	|  |     |               move.l 19394 <DOSBase>,d0
    b5ce:	|  |     |               movea.l d0,a6
    b5d0:	|  |     |               move.l 76(sp),d1
    b5d4:	|  |     |               jsr -306(a6)
    b5d8:	|  |     |               move.l d0,72(sp)
    b5dc:	|  |     |               move.l 72(sp),d0
    b5e0:	|  |     |               move.b 19496 <encode1>,d1
    b5e6:	|  |     |               ext.w d1
    b5e8:	|  |     |               ext.l d1
    b5ea:	|  |     |               move.l d0,d2
    b5ec:	|  |     |               eor.l d1,d2
    b5ee:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    b5f2:	|  |     |               moveq #-1,d0
    b5f4:	|  |     |               cmp.l 68(sp),d0
    b5f8:	|  |  /--|-------------- beq.w b788 <fileToStack+0x342>

            char i = (char) tmp;
    b5fc:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    b602:	|  |  |  |               move.b 67(sp),d0
    b606:	|  |  |  |               ext.w d0
    b608:	|  |  |  |               movea.w d0,a0
    b60a:	|  |  |  |               moveq #2,d2
    b60c:	|  |  |  |               cmp.l a0,d2
    b60e:	|  |  |  |     /-------- beq.s b68a <fileToStack+0x244>
    b610:	|  |  |  |     |         moveq #2,d0
    b612:	|  |  |  |     |         cmp.l a0,d0
    b614:	|  |  |  |  /--|-------- blt.w b6c0 <fileToStack+0x27a>
    b618:	|  |  |  |  |  |         cmpa.w #0,a0
    b61c:	|  |  |  |  |  |     /-- beq.s b628 <fileToStack+0x1e2>
    b61e:	|  |  |  |  |  |     |   moveq #1,d2
    b620:	|  |  |  |  |  |     |   cmp.l a0,d2
    b622:	|  |  |  |  |  |  /--|-- beq.s b664 <fileToStack+0x21e>
    b624:	|  |  |  |  +--|--|--|-- bra.w b6c0 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    b628:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    b62c:	|  |  |  |  |  |  |      jsr b7b4 <readStringEncoded>
    b632:	|  |  |  |  |  |  |      addq.l #4,sp
    b634:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    b638:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    b63c:	|  |  |  |  |  |  |      lea 14(sp),a0
    b640:	|  |  |  |  |  |  |      move.l a0,-(sp)
    b642:	|  |  |  |  |  |  |      jsr 123bc <makeTextVar>
    b648:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    b64a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    b650:	|  |  |  |  |  |  |      move.l 1938c <SysBase>,d0
    b656:	|  |  |  |  |  |  |      movea.l d0,a6
    b658:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    b65c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    b660:	|  |  |  |  |  |  |  /-- bra.w b718 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    b664:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    b668:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    b66e:	|  |  |  |  |  |     |   addq.l #4,sp
    b670:	|  |  |  |  |  |     |   move.l d0,-(sp)
    b672:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    b676:	|  |  |  |  |  |     |   lea 18(sp),a0
    b67a:	|  |  |  |  |  |     |   move.l a0,-(sp)
    b67c:	|  |  |  |  |  |     |   jsr 12a8c <setVariable>
    b682:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    b686:	|  |  |  |  |  |     +-- bra.w b718 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    b68a:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    b690:	|  |  |  |  |        |   move.l 19394 <DOSBase>,d0
    b696:	|  |  |  |  |        |   movea.l d0,a6
    b698:	|  |  |  |  |        |   move.l 62(sp),d1
    b69c:	|  |  |  |  |        |   jsr -306(a6)
    b6a0:	|  |  |  |  |        |   move.l d0,58(sp)
    b6a4:	|  |  |  |  |        |   move.l 58(sp),d0
    b6a8:	|  |  |  |  |        |   move.l d0,-(sp)
    b6aa:	|  |  |  |  |        |   pea 1 <_start+0x1>
    b6ae:	|  |  |  |  |        |   lea 18(sp),a0
    b6b2:	|  |  |  |  |        |   move.l a0,-(sp)
    b6b4:	|  |  |  |  |        |   jsr 12a8c <setVariable>
    b6ba:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    b6be:	|  |  |  |  |        +-- bra.s b718 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    b6c0:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    b6c4:	|  |  |  |           |   pea 161ce <custom.c.49191367+0x14a2>
    b6ca:	|  |  |  |           |   jsr 141e2 <KPrintF>
    b6d0:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    b6d2:	|  |  |  |           |   move.l 100(sp),46(sp)
    b6d8:	|  |  |  |           |   move.l 19394 <DOSBase>,d0
    b6de:	|  |  |  |           |   movea.l d0,a6
    b6e0:	|  |  |  |           |   move.l 46(sp),d1
    b6e4:	|  |  |  |           |   jsr -36(a6)
    b6e8:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    b6ec:	|  |  |  |           |   clr.w d0
    b6ee:	+--|--|--|-----------|-- bra.w b7aa <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    b6f2:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    b6f6:	|  |  |              |   jsr b87a <readTextPlain>
    b6fc:	|  |  |              |   addq.l #4,sp
    b6fe:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    b702:	|  |  |        /-----|-- beq.w b78c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    b706:	|  |  |        |     |   move.l 80(sp),-(sp)
    b70a:	|  |  |        |     |   lea 14(sp),a0
    b70e:	|  |  |        |     |   move.l a0,-(sp)
    b710:	|  |  |        |     |   jsr 123bc <makeTextVar>
    b716:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    b718:	|  |  |        |     \-> movea.l 128(sp),a0
    b71c:	|  |  |        |         move.l (a0),d0
    b71e:	|  |  |        |  /----- bne.s b74e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    b720:	|  |  |        |  |      move.l 128(sp),d0
    b724:	|  |  |        |  |      move.l d0,-(sp)
    b726:	|  |  |        |  |      lea 14(sp),a0
    b72a:	|  |  |        |  |      move.l a0,-(sp)
    b72c:	|  |  |        |  |      jsr 11a5c <addVarToStackQuick>
    b732:	|  |  |        |  |      addq.l #8,sp
    b734:	|  |  |        |  |      tst.w d0
    b736:	|  |  |        |  |  /-- bne.s b73c <fileToStack+0x2f6>
    b738:	|  |  |        |  |  |   clr.w d0
    b73a:	+--|--|--------|--|--|-- bra.s b7aa <fileToStack+0x364>
            sH->last = sH->first;
    b73c:	|  |  |        |  |  \-> movea.l 128(sp),a0
    b740:	|  |  |        |  |      move.l (a0),d0
    b742:	|  |  |        |  |      movea.l 128(sp),a0
    b746:	|  |  |        |  |      move.l d0,4(a0)
    b74a:	|  +--|--------|--|----- bra.w b5b8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    b74e:	|  |  |        |  \----> movea.l 128(sp),a0
    b752:	|  |  |        |         move.l 4(a0),d0
    b756:	|  |  |        |         addq.l #8,d0
    b758:	|  |  |        |         move.l d0,-(sp)
    b75a:	|  |  |        |         lea 14(sp),a0
    b75e:	|  |  |        |         move.l a0,-(sp)
    b760:	|  |  |        |         jsr 11a5c <addVarToStackQuick>
    b766:	|  |  |        |         addq.l #8,sp
    b768:	|  |  |        |         tst.w d0
    b76a:	|  |  |        |     /-- bne.s b770 <fileToStack+0x32a>
    b76c:	|  |  |        |     |   clr.w d0
    b76e:	+--|--|--------|-----|-- bra.s b7aa <fileToStack+0x364>
            sH->last = sH->last->next;
    b770:	|  |  |        |     \-> movea.l 128(sp),a0
    b774:	|  |  |        |         movea.l 4(a0),a0
    b778:	|  |  |        |         move.l 8(a0),d0
    b77c:	|  |  |        |         movea.l 128(sp),a0
    b780:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    b784:	|  \--|--------|-------- bra.w b5b8 <fileToStack+0x172>
            if (tmp == -1) break;
    b788:	|     \--------|-------> nop
    b78a:	|              |     /-- bra.s b78e <fileToStack+0x348>
            if (!line) break;
    b78c:	|              \-----|-> nop
        }
    }
    Close(fp);
    b78e:	|                    \-> move.l 100(sp),38(sp)
    b794:	|                        move.l 19394 <DOSBase>,d0
    b79a:	|                        movea.l d0,a6
    b79c:	|                        move.l 38(sp),d1
    b7a0:	|                        jsr -36(a6)
    b7a4:	|                        move.l d0,34(sp)
    return TRUE;
    b7a8:	|                        moveq #1,d0
}
    b7aa:	\----------------------> move.l (sp)+,d2
    b7ac:	                         movea.l (sp)+,a6
    b7ae:	                         lea 112(sp),sp
    b7b2:	                         rts

0000b7b4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    b7b4:	          lea -32(sp),sp
    b7b8:	          move.l a6,-(sp)
    b7ba:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    b7bc:	          move.l 44(sp),-(sp)
    b7c0:	          jsr 6bc <get2bytes>
    b7c6:	          addq.l #4,sp
    b7c8:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    b7cc:	          move.l 32(sp),d0
    b7d0:	          addq.l #1,d0
    b7d2:	          move.l d0,28(sp)
    b7d6:	          clr.l 24(sp)
    b7da:	          move.l 1938c <SysBase>,d0
    b7e0:	          movea.l d0,a6
    b7e2:	          move.l 28(sp),d0
    b7e6:	          move.l 24(sp),d1
    b7ea:	          jsr -684(a6)
    b7ee:	          move.l d0,20(sp)
    b7f2:	          move.l 20(sp),d0
    b7f6:	          move.l d0,16(sp)
    if (!s) return NULL;
    b7fa:	      /-- bne.s b800 <readStringEncoded+0x4c>
    b7fc:	      |   moveq #0,d0
    b7fe:	/-----|-- bra.s b870 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    b800:	|     \-> clr.l 36(sp)
    b804:	|     /-- bra.s b856 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    b806:	|  /--|-> move.l 44(sp),12(sp)
    b80c:	|  |  |   move.l 19394 <DOSBase>,d0
    b812:	|  |  |   movea.l d0,a6
    b814:	|  |  |   move.l 12(sp),d1
    b818:	|  |  |   jsr -306(a6)
    b81c:	|  |  |   move.l d0,8(sp)
    b820:	|  |  |   move.l 8(sp),d0
    b824:	|  |  |   move.l d0,d1
    b826:	|  |  |   move.b 19496 <encode1>,d2
    b82c:	|  |  |   move.l 36(sp),d0
    b830:	|  |  |   movea.l 16(sp),a0
    b834:	|  |  |   adda.l d0,a0
    b836:	|  |  |   move.b d1,d0
    b838:	|  |  |   eor.b d2,d0
    b83a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    b83c:	|  |  |   move.b 19496 <encode1>,d0
    b842:	|  |  |   move.b d0,d1
    b844:	|  |  |   move.b 19497 <encode2>,d0
    b84a:	|  |  |   add.b d1,d0
    b84c:	|  |  |   move.b d0,19496 <encode1>
    for (a = 0; a < len; a++) {
    b852:	|  |  |   addq.l #1,36(sp)
    b856:	|  |  \-> move.l 36(sp),d0
    b85a:	|  |      cmp.l 32(sp),d0
    b85e:	|  \----- blt.s b806 <readStringEncoded+0x52>
    }
    s[len] = 0;
    b860:	|         move.l 32(sp),d0
    b864:	|         movea.l 16(sp),a0
    b868:	|         adda.l d0,a0
    b86a:	|         clr.b (a0)
    return s;
    b86c:	|         move.l 16(sp),d0
}
    b870:	\-------> move.l (sp)+,d2
    b872:	          movea.l (sp)+,a6
    b874:	          lea 32(sp),sp
    b878:	          rts

0000b87a <readTextPlain>:

char *readTextPlain(BPTR fp) {
    b87a:	             lea -104(sp),sp
    b87e:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    b882:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    b886:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    b88c:	             move.l 124(sp),106(sp)
    b892:	             clr.l 102(sp)
    b896:	             clr.l 98(sp)
    b89a:	             move.l 19394 <DOSBase>,d0
    b8a0:	             movea.l d0,a6
    b8a2:	             move.l 106(sp),d1
    b8a6:	             move.l 102(sp),d2
    b8aa:	             move.l 98(sp),d3
    b8ae:	             jsr -66(a6)
    b8b2:	             move.l d0,94(sp)
    b8b6:	             move.l 94(sp),d0
    b8ba:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    b8be:	   /-------- bra.s b902 <readTextPlain+0x88>
        tmp = FGetC(fp);
    b8c0:	/--|-------> move.l 124(sp),22(sp)
    b8c6:	|  |         move.l 19394 <DOSBase>,d0
    b8cc:	|  |         movea.l d0,a6
    b8ce:	|  |         move.l 22(sp),d1
    b8d2:	|  |         jsr -306(a6)
    b8d6:	|  |         move.l d0,18(sp)
    b8da:	|  |         move.l 18(sp),d0
    b8de:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    b8e2:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    b8e8:	|  |         cmpi.b #10,17(sp)
    b8ee:	|  |  /----- beq.s b8f8 <readTextPlain+0x7e>
    b8f0:	|  |  |      moveq #-1,d0
    b8f2:	|  |  |      cmp.l 110(sp),d0
    b8f6:	|  |  |  /-- bne.s b8fe <readTextPlain+0x84>
            keepGoing = FALSE;
    b8f8:	|  |  \--|-> clr.w 114(sp)
    b8fc:	|  +-----|-- bra.s b902 <readTextPlain+0x88>
        } else {
            stringSize++;
    b8fe:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    b902:	|  \-------> tst.w 114(sp)
    b906:	\----------- bne.s b8c0 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    b908:	             tst.l 116(sp)
    b90c:	         /-- bne.s b91c <readTextPlain+0xa2>
    b90e:	         |   moveq #-1,d0
    b910:	         |   cmp.l 110(sp),d0
    b914:	         +-- bne.s b91c <readTextPlain+0xa2>
        return NULL;
    b916:	         |   moveq #0,d0
    b918:	      /--|-- bra.w ba02 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    b91c:	      |  \-> move.l 124(sp),86(sp)
    b922:	      |      move.l 90(sp),82(sp)
    b928:	      |      moveq #-1,d0
    b92a:	      |      move.l d0,78(sp)
    b92e:	      |      move.l 19394 <DOSBase>,d0
    b934:	      |      movea.l d0,a6
    b936:	      |      move.l 86(sp),d1
    b93a:	      |      move.l 82(sp),d2
    b93e:	      |      move.l 78(sp),d3
    b942:	      |      jsr -66(a6)
    b946:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    b94a:	      |      move.l 116(sp),d0
    b94e:	      |      addq.l #1,d0
    b950:	      |      move.l d0,70(sp)
    b954:	      |      clr.l 66(sp)
    b958:	      |      move.l 1938c <SysBase>,d0
    b95e:	      |      movea.l d0,a6
    b960:	      |      move.l 70(sp),d0
    b964:	      |      move.l 66(sp),d1
    b968:	      |      jsr -684(a6)
    b96c:	      |      move.l d0,62(sp)
    b970:	      |      move.l 62(sp),d0
    b974:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    b978:	      |  /-- bne.s b980 <readTextPlain+0x106>
    b97a:	      |  |   moveq #0,d0
    b97c:	      +--|-- bra.w ba02 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    b980:	      |  \-> move.l 124(sp),54(sp)
    b986:	      |      move.l 58(sp),50(sp)
    b98c:	      |      moveq #1,d0
    b98e:	      |      move.l d0,46(sp)
    b992:	      |      move.l 116(sp),42(sp)
    b998:	      |      move.l 19394 <DOSBase>,d0
    b99e:	      |      movea.l d0,a6
    b9a0:	      |      move.l 54(sp),d1
    b9a4:	      |      move.l 50(sp),d2
    b9a8:	      |      move.l 46(sp),d3
    b9ac:	      |      move.l 42(sp),d4
    b9b0:	      |      jsr -324(a6)
    b9b4:	      |      move.l d0,38(sp)
    b9b8:	      |      move.l 38(sp),d0
    b9bc:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    b9c0:	      |      move.l 34(sp),d0
    b9c4:	      |      cmp.l 116(sp),d0
    b9c8:	      |  /-- beq.s b9d8 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    b9ca:	      |  |   pea 16203 <custom.c.49191367+0x14d7>
    b9d0:	      |  |   jsr 141e2 <KPrintF>
    b9d6:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    b9d8:	      |  \-> move.l 124(sp),30(sp)
    b9de:	      |      move.l 19394 <DOSBase>,d0
    b9e4:	      |      movea.l d0,a6
    b9e6:	      |      move.l 30(sp),d1
    b9ea:	      |      jsr -306(a6)
    b9ee:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    b9f2:	      |      move.l 116(sp),d0
    b9f6:	      |      movea.l 58(sp),a0
    b9fa:	      |      adda.l d0,a0
    b9fc:	      |      clr.b (a0)
    }

    return reply;
    b9fe:	      |      move.l 58(sp),d0
}
    ba02:	      \----> movem.l (sp)+,d2-d4/a6
    ba06:	             lea 104(sp),sp
    ba0a:	             rts

0000ba0c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ba0c:	                      lea -144(sp),sp
    ba10:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    ba14:	                      move.l 160(sp),148(sp)
    ba1a:	                      move.l #1006,144(sp)
    ba22:	                      move.l 19394 <DOSBase>,d0
    ba28:	                      movea.l d0,a6
    ba2a:	                      move.l 148(sp),d1
    ba2e:	                      move.l 144(sp),d2
    ba32:	                      jsr -30(a6)
    ba36:	                      move.l d0,140(sp)
    ba3a:	                      move.l 140(sp),d0
    ba3e:	                      move.l d0,136(sp)

    if (!fp) {
    ba42:	                  /-- bne.s ba5c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ba44:	                  |   move.l 160(sp),-(sp)
    ba48:	                  |   pea 16224 <custom.c.49191367+0x14f8>
    ba4e:	                  |   jsr 141e2 <KPrintF>
    ba54:	                  |   addq.l #8,sp
        return FALSE;
    ba56:	                  |   clr.w d0
    ba58:	/-----------------|-- bra.w bd18 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    ba5c:	|                 \-> movea.l 164(sp),a0
    ba60:	|                     movea.l 4(a0),a0
    ba64:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    ba68:	|                     move.w 19498 <saveEncoding>,d0
    ba6e:	|                     move.l d0,d0
    ba70:	|                     move.b d0,19496 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    ba76:	|                     move.w 19498 <saveEncoding>,d0
    ba7c:	|                     lsr.w #8,d0
    ba7e:	|                     move.l d0,d0
    ba80:	|                     move.b d0,19497 <encode2>

    if (saveEncoding) {
    ba86:	|                     move.w 19498 <saveEncoding>,d0
    ba8c:	|                 /-- beq.s bade <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    ba8e:	|                 |   move.l 136(sp),116(sp)
    ba94:	|                 |   move.l #90302,112(sp)
    ba9c:	|                 |   moveq #99,d0
    ba9e:	|                 |   not.b d0
    baa0:	|                 |   add.l sp,d0
    baa2:	|                 |   addi.l #-144,d0
    baa8:	|                 |   move.l d0,108(sp)
    baac:	|                 |   move.l 19394 <DOSBase>,d0
    bab2:	|                 |   movea.l d0,a6
    bab4:	|                 |   move.l 116(sp),d1
    bab8:	|                 |   move.l 112(sp),d2
    babc:	|                 |   move.l 108(sp),d3
    bac0:	|                 |   jsr -354(a6)
    bac4:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    bac8:	|                 |   move.l 136(sp),-(sp)
    bacc:	|                 |   pea 1613d <custom.c.49191367+0x1411>
    bad2:	|                 |   jsr bd22 <writeStringEncoded>
    bad8:	|                 |   addq.l #8,sp
    bada:	|  /--------------|-- bra.w bcf0 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    bade:	|  |              \-> move.l 136(sp),132(sp)
    bae4:	|  |                  move.l #90328,128(sp)
    baec:	|  |                  moveq #99,d1
    baee:	|  |                  not.b d1
    baf0:	|  |                  add.l sp,d1
    baf2:	|  |                  addi.l #-144,d1
    baf8:	|  |                  move.l d1,124(sp)
    bafc:	|  |                  move.l 19394 <DOSBase>,d0
    bb02:	|  |                  movea.l d0,a6
    bb04:	|  |                  move.l 132(sp),d1
    bb08:	|  |                  move.l 128(sp),d2
    bb0c:	|  |                  move.l 124(sp),d3
    bb10:	|  |                  jsr -354(a6)
    bb14:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    bb18:	|  +----------------- bra.w bcf0 <stackToFile+0x2e4>
        if (saveEncoding) {
    bb1c:	|  |  /-------------> move.w 19498 <saveEncoding>,d0
    bb22:	|  |  |     /-------- beq.w bc74 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    bb26:	|  |  |     |         movea.l 152(sp),a0
    bb2a:	|  |  |     |         move.l (a0),d0
    bb2c:	|  |  |     |         moveq #1,d1
    bb2e:	|  |  |     |         cmp.l d0,d1
    bb30:	|  |  |     |     /-- beq.s bb80 <stackToFile+0x174>
    bb32:	|  |  |     |     |   moveq #3,d1
    bb34:	|  |  |     |     |   cmp.l d0,d1
    bb36:	|  |  |     |  /--|-- bne.w bc42 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    bb3a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    bb40:	|  |  |     |  |  |   move.b 19496 <encode1>,d0
    bb46:	|  |  |     |  |  |   ext.w d0
    bb48:	|  |  |     |  |  |   movea.w d0,a0
    bb4a:	|  |  |     |  |  |   move.l a0,72(sp)
    bb4e:	|  |  |     |  |  |   move.l 19394 <DOSBase>,d0
    bb54:	|  |  |     |  |  |   movea.l d0,a6
    bb56:	|  |  |     |  |  |   move.l 76(sp),d1
    bb5a:	|  |  |     |  |  |   move.l 72(sp),d2
    bb5e:	|  |  |     |  |  |   jsr -312(a6)
    bb62:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    bb66:	|  |  |     |  |  |   movea.l 152(sp),a0
    bb6a:	|  |  |     |  |  |   move.l 4(a0),d0
    bb6e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    bb72:	|  |  |     |  |  |   move.l d0,-(sp)
    bb74:	|  |  |     |  |  |   jsr bd22 <writeStringEncoded>
    bb7a:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    bb7c:	|  |  |  /--|--|--|-- bra.w bce6 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    bb80:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    bb84:	|  |  |  |  |  |      move.l 4(a0),d0
    bb88:	|  |  |  |  |  |  /-- bmi.s bbf8 <stackToFile+0x1ec>
    bb8a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    bb8e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    bb92:	|  |  |  |  |  |  |   cmpi.l #255,d0
    bb98:	|  |  |  |  |  |  +-- bgt.s bbf8 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    bb9a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    bba0:	|  |  |  |  |  |  |   move.b 19496 <encode1>,d0
    bba6:	|  |  |  |  |  |  |   eori.b #2,d0
    bbaa:	|  |  |  |  |  |  |   ext.w d0
    bbac:	|  |  |  |  |  |  |   movea.w d0,a0
    bbae:	|  |  |  |  |  |  |   move.l a0,60(sp)
    bbb2:	|  |  |  |  |  |  |   move.l 19394 <DOSBase>,d0
    bbb8:	|  |  |  |  |  |  |   movea.l d0,a6
    bbba:	|  |  |  |  |  |  |   move.l 64(sp),d1
    bbbe:	|  |  |  |  |  |  |   move.l 60(sp),d2
    bbc2:	|  |  |  |  |  |  |   jsr -312(a6)
    bbc6:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    bbca:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    bbd0:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    bbd4:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    bbda:	|  |  |  |  |  |  |   move.l 19394 <DOSBase>,d0
    bbe0:	|  |  |  |  |  |  |   movea.l d0,a6
    bbe2:	|  |  |  |  |  |  |   move.l 52(sp),d1
    bbe6:	|  |  |  |  |  |  |   move.l 48(sp),d2
    bbea:	|  |  |  |  |  |  |   jsr -312(a6)
    bbee:	|  |  |  |  |  |  |   move.l d0,44(sp)
    bbf2:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    bbf4:	|  |  |  +--|--|--|-- bra.w bce6 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    bbf8:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    bbfe:	|  |  |  |  |  |      move.b 19496 <encode1>,d0
    bc04:	|  |  |  |  |  |      eori.b #1,d0
    bc08:	|  |  |  |  |  |      ext.w d0
    bc0a:	|  |  |  |  |  |      movea.w d0,a0
    bc0c:	|  |  |  |  |  |      move.l a0,36(sp)
    bc10:	|  |  |  |  |  |      move.l 19394 <DOSBase>,d0
    bc16:	|  |  |  |  |  |      movea.l d0,a6
    bc18:	|  |  |  |  |  |      move.l 40(sp),d1
    bc1c:	|  |  |  |  |  |      move.l 36(sp),d2
    bc20:	|  |  |  |  |  |      jsr -312(a6)
    bc24:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    bc28:	|  |  |  |  |  |      movea.l 152(sp),a0
    bc2c:	|  |  |  |  |  |      move.l 4(a0),d0
    bc30:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    bc34:	|  |  |  |  |  |      move.l d0,-(sp)
    bc36:	|  |  |  |  |  |      jsr 958 <put4bytes>
    bc3c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    bc3e:	|  |  |  +--|--|----- bra.w bce6 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    bc42:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    bc46:	|  |  |  |  |         pea 16236 <custom.c.49191367+0x150a>
    bc4c:	|  |  |  |  |         jsr 141e2 <KPrintF>
    bc52:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    bc54:	|  |  |  |  |         move.l 136(sp),28(sp)
    bc5a:	|  |  |  |  |         move.l 19394 <DOSBase>,d0
    bc60:	|  |  |  |  |         movea.l d0,a6
    bc62:	|  |  |  |  |         move.l 28(sp),d1
    bc66:	|  |  |  |  |         jsr -36(a6)
    bc6a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    bc6e:	|  |  |  |  |         clr.w d0
    bc70:	+--|--|--|--|-------- bra.w bd18 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    bc74:	|  |  |  |  \-------> move.l 152(sp),d0
    bc78:	|  |  |  |            move.l d0,-(sp)
    bc7a:	|  |  |  |            jsr 12770 <getTextFromAnyVar>
    bc80:	|  |  |  |            addq.l #4,sp
    bc82:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    bc86:	|  |  |  |     /----- beq.s bcfa <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    bc88:	|  |  |  |     |      movea.l 100(sp),a0
    bc8c:	|  |  |  |     |      move.b (a0),d0
    bc8e:	|  |  |  |     |      ext.w d0
    bc90:	|  |  |  |     |      movea.w d0,a0
    bc92:	|  |  |  |     |      move.l a0,12(sp)
    bc96:	|  |  |  |     |      move.l 136(sp),96(sp)
    bc9c:	|  |  |  |     |      move.l #90770,92(sp)
    bca4:	|  |  |  |     |      moveq #99,d0
    bca6:	|  |  |  |     |      not.b d0
    bca8:	|  |  |  |     |      add.l sp,d0
    bcaa:	|  |  |  |     |      addi.l #-144,d0
    bcb0:	|  |  |  |     |      move.l d0,88(sp)
    bcb4:	|  |  |  |     |      move.l 19394 <DOSBase>,d0
    bcba:	|  |  |  |     |      movea.l d0,a6
    bcbc:	|  |  |  |     |      move.l 96(sp),d1
    bcc0:	|  |  |  |     |      move.l 92(sp),d2
    bcc4:	|  |  |  |     |      move.l 88(sp),d3
    bcc8:	|  |  |  |     |      jsr -354(a6)
    bccc:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    bcd0:	|  |  |  |     |      move.l 100(sp),80(sp)
    bcd6:	|  |  |  |     |      move.l 1938c <SysBase>,d0
    bcdc:	|  |  |  |     |      movea.l d0,a6
    bcde:	|  |  |  |     |      movea.l 80(sp),a1
    bce2:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    bce6:	|  |  |  \-----|----> movea.l 152(sp),a0
    bcea:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    bcf0:	|  \--|--------|----> tst.l 152(sp)
    bcf4:	|     \--------|----- bne.w bb1c <stackToFile+0x110>
    bcf8:	|              |  /-- bra.s bcfc <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    bcfa:	|              \--|-> nop
    }
    Close(fp);
    bcfc:	|                 \-> move.l 136(sp),20(sp)
    bd02:	|                     move.l 19394 <DOSBase>,d0
    bd08:	|                     movea.l d0,a6
    bd0a:	|                     move.l 20(sp),d1
    bd0e:	|                     jsr -36(a6)
    bd12:	|                     move.l d0,16(sp)
    return TRUE;
    bd16:	|                     moveq #1,d0
}
    bd18:	\-------------------> movem.l (sp)+,d2-d3/a6
    bd1c:	                      lea 144(sp),sp
    bd20:	                      rts

0000bd22 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    bd22:	       lea -20(sp),sp
    bd26:	       move.l a6,-(sp)
    bd28:	       move.l d2,-(sp)
	int a, len = strlen (s);
    bd2a:	       move.l 32(sp),-(sp)
    bd2e:	       jsr 11686 <strlen>
    bd34:	       addq.l #4,sp
    bd36:	       move.l d0,20(sp)

	put2bytes (len, fp);
    bd3a:	       move.l 36(sp),-(sp)
    bd3e:	       move.l 24(sp),-(sp)
    bd42:	       jsr 8d0 <put2bytes>
    bd48:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    bd4a:	       clr.l 24(sp)
    bd4e:	   /-- bra.s bda4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    bd50:	/--|-> move.l 36(sp),16(sp)
    bd56:	|  |   move.l 24(sp),d0
    bd5a:	|  |   movea.l 32(sp),a0
    bd5e:	|  |   adda.l d0,a0
    bd60:	|  |   move.b (a0),d1
    bd62:	|  |   move.b 19496 <encode1>,d0
    bd68:	|  |   eor.b d1,d0
    bd6a:	|  |   ext.w d0
    bd6c:	|  |   movea.w d0,a0
    bd6e:	|  |   move.l a0,12(sp)
    bd72:	|  |   move.l 19394 <DOSBase>,d0
    bd78:	|  |   movea.l d0,a6
    bd7a:	|  |   move.l 16(sp),d1
    bd7e:	|  |   move.l 12(sp),d2
    bd82:	|  |   jsr -312(a6)
    bd86:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    bd8a:	|  |   move.b 19496 <encode1>,d0
    bd90:	|  |   move.b d0,d1
    bd92:	|  |   move.b 19497 <encode2>,d0
    bd98:	|  |   add.b d1,d0
    bd9a:	|  |   move.b d0,19496 <encode1>
	for (a = 0; a < len; a ++) {
    bda0:	|  |   addq.l #1,24(sp)
    bda4:	|  \-> move.l 24(sp),d0
    bda8:	|      cmp.l 20(sp),d0
    bdac:	\----- blt.s bd50 <writeStringEncoded+0x2e>
	}
}
    bdae:	       nop
    bdb0:	       nop
    bdb2:	       move.l (sp)+,d2
    bdb4:	       movea.l (sp)+,a6
    bdb6:	       lea 20(sp),sp
    bdba:	       rts

0000bdbc <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    bdbc:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    bdbe:	                   tst.l 8(sp)
    bdc2:	               /-- bne.s bdc8 <failSecurityCheck+0xc>
    bdc4:	               |   moveq #1,d0
    bdc6:	/--------------|-- bra.s be46 <failSecurityCheck+0x8a>

	int a = 0;
    bdc8:	|              \-> clr.l (sp)

	while (fn[a]) {
    bdca:	|     /----------- bra.s be38 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    bdcc:	|  /--|----------> move.l (sp),d0
    bdce:	|  |  |            movea.l 8(sp),a0
    bdd2:	|  |  |            adda.l d0,a0
    bdd4:	|  |  |            move.b (a0),d0
    bdd6:	|  |  |            ext.w d0
    bdd8:	|  |  |            movea.w d0,a0
    bdda:	|  |  |            moveq #124,d0
    bddc:	|  |  |            cmp.l a0,d0
    bdde:	|  |  |     /----- beq.s be20 <failSecurityCheck+0x64>
    bde0:	|  |  |     |      moveq #124,d1
    bde2:	|  |  |     |      cmp.l a0,d1
    bde4:	|  |  |  /--|----- blt.s be36 <failSecurityCheck+0x7a>
    bde6:	|  |  |  |  |      moveq #92,d0
    bde8:	|  |  |  |  |      cmp.l a0,d0
    bdea:	|  |  |  |  +----- beq.s be20 <failSecurityCheck+0x64>
    bdec:	|  |  |  |  |      moveq #92,d1
    bdee:	|  |  |  |  |      cmp.l a0,d1
    bdf0:	|  |  |  +--|----- blt.s be36 <failSecurityCheck+0x7a>
    bdf2:	|  |  |  |  |      moveq #60,d0
    bdf4:	|  |  |  |  |      cmp.l a0,d0
    bdf6:	|  |  |  |  |  /-- blt.s be16 <failSecurityCheck+0x5a>
    bdf8:	|  |  |  |  |  |   moveq #34,d1
    bdfa:	|  |  |  |  |  |   cmp.l a0,d1
    bdfc:	|  |  |  +--|--|-- bgt.s be36 <failSecurityCheck+0x7a>
    bdfe:	|  |  |  |  |  |   moveq #-34,d1
    be00:	|  |  |  |  |  |   add.l a0,d1
    be02:	|  |  |  |  |  |   move.l #83894529,d0
    be08:	|  |  |  |  |  |   lsr.l d1,d0
    be0a:	|  |  |  |  |  |   moveq #1,d1
    be0c:	|  |  |  |  |  |   and.l d1,d0
    be0e:	|  |  |  |  |  |   sne d0
    be10:	|  |  |  |  |  |   neg.b d0
    be12:	|  |  |  |  +--|-- bne.s be20 <failSecurityCheck+0x64>
    be14:	|  |  |  +--|--|-- bra.s be36 <failSecurityCheck+0x7a>
    be16:	|  |  |  |  |  \-> lea -62(a0),a0
    be1a:	|  |  |  |  |      moveq #1,d0
    be1c:	|  |  |  |  |      cmp.l a0,d0
    be1e:	|  |  |  +--|----- bcs.s be36 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    be20:	|  |  |  |  \----> move.l 8(sp),-(sp)
    be24:	|  |  |  |         pea 16296 <custom.c.49191367+0x156a>
    be2a:	|  |  |  |         jsr 141e2 <KPrintF>
    be30:	|  |  |  |         addq.l #8,sp
				return TRUE;
    be32:	|  |  |  |         moveq #1,d0
    be34:	+--|--|--|-------- bra.s be46 <failSecurityCheck+0x8a>
		}
		a++;
    be36:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    be38:	|  |  \----------> move.l (sp),d0
    be3a:	|  |               movea.l 8(sp),a0
    be3e:	|  |               adda.l d0,a0
    be40:	|  |               move.b (a0),d0
    be42:	|  \-------------- bne.s bdcc <failSecurityCheck+0x10>
	}
	return FALSE;
    be44:	|                  clr.w d0
}
    be46:	\----------------> addq.l #4,sp
    be48:	                   rts

0000be4a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    be4a:	             lea -24(sp),sp
    be4e:	             move.l a6,-(sp)
    be50:	             move.l 40(sp),d0
    be54:	             move.w d0,d0
    be56:	             move.w d0,6(sp)
	int fileNum = -1;
    be5a:	             moveq #-1,d0
    be5c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    be60:	             jsr 4178 <killSpeechTimers>

	switch (numParams) {
    be66:	             moveq #2,d0
    be68:	             cmp.l 32(sp),d0
    be6c:	      /----- beq.s beb0 <sayCore+0x66>
    be6e:	      |      moveq #3,d0
    be70:	      |      cmp.l 32(sp),d0
    be74:	/-----|----- bne.w bf92 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    be78:	|     |      movea.l 36(sp),a0
    be7c:	|     |      move.l 24(a0),d0
    be80:	|     |      move.l d0,-(sp)
    be82:	|     |      pea 5 <_start+0x5>
    be86:	|     |      lea 20(sp),a0
    be8a:	|     |      move.l a0,-(sp)
    be8c:	|     |      jsr 1219a <getValueType>
    be92:	|     |      lea 12(sp),sp
    be96:	|     |      tst.w d0
    be98:	|     |  /-- bne.s bea0 <sayCore+0x56>
    be9a:	|     |  |   moveq #1,d0
    be9c:	|  /--|--|-- bra.w bfa2 <sayCore+0x158>
			trimStack (&fun -> stack);
    bea0:	|  |  |  \-> moveq #24,d0
    bea2:	|  |  |      add.l 36(sp),d0
    bea6:	|  |  |      move.l d0,-(sp)
    bea8:	|  |  |      jsr 12b1e <trimStack>
    beae:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    beb0:	|  |  \----> movea.l 36(sp),a0
    beb4:	|  |         move.l 24(a0),d0
    beb8:	|  |         move.l d0,-(sp)
    beba:	|  |         jsr 12770 <getTextFromAnyVar>
    bec0:	|  |         addq.l #4,sp
    bec2:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    bec6:	|  |     /-- bne.s bece <sayCore+0x84>
    bec8:	|  |     |   moveq #1,d0
    beca:	|  +-----|-- bra.w bfa2 <sayCore+0x158>
			trimStack (&fun -> stack);
    bece:	|  |     \-> moveq #24,d0
    bed0:	|  |         add.l 36(sp),d0
    bed4:	|  |         move.l d0,-(sp)
    bed6:	|  |         jsr 12b1e <trimStack>
    bedc:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bede:	|  |         movea.l 36(sp),a0
    bee2:	|  |         move.l 24(a0),d0
    bee6:	|  |         move.l d0,-(sp)
    bee8:	|  |         pea 7 <_start+0x7>
    beec:	|  |         lea 16(sp),a0
    bef0:	|  |         move.l a0,-(sp)
    bef2:	|  |         jsr 1219a <getValueType>
    bef8:	|  |         lea 12(sp),sp
    befc:	|  |         tst.w d0
    befe:	|  |     /-- bne.s bf06 <sayCore+0xbc>
    bf00:	|  |     |   moveq #1,d0
    bf02:	|  +-----|-- bra.w bfa2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bf06:	|  |     \-> movea.l 36(sp),a0
    bf0a:	|  |         move.l 24(a0),d0
    bf0e:	|  |         move.l d0,-(sp)
    bf10:	|  |         pea 7 <_start+0x7>
    bf14:	|  |         lea 16(sp),a0
    bf18:	|  |         move.l a0,-(sp)
    bf1a:	|  |         jsr 1219a <getValueType>
    bf20:	|  |         lea 12(sp),sp
    bf24:	|  |         tst.w d0
    bf26:	|  |     /-- bne.s bf2c <sayCore+0xe2>
    bf28:	|  |     |   moveq #1,d0
    bf2a:	|  +-----|-- bra.s bfa2 <sayCore+0x158>
			trimStack (&fun -> stack);
    bf2c:	|  |     \-> moveq #24,d0
    bf2e:	|  |         add.l 36(sp),d0
    bf32:	|  |         move.l d0,-(sp)
    bf34:	|  |         jsr 12b1e <trimStack>
    bf3a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    bf3c:	|  |         movea.w 6(sp),a0
    bf40:	|  |         move.l 12(sp),d1
    bf44:	|  |         move.l 8(sp),d0
    bf48:	|  |         move.l a0,-(sp)
    bf4a:	|  |         move.l d1,-(sp)
    bf4c:	|  |         move.l d0,-(sp)
    bf4e:	|  |         move.l 36(sp),-(sp)
    bf52:	|  |         jsr 60dc <wrapSpeech>
    bf58:	|  |         lea 16(sp),sp
    bf5c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    bf60:	|  |         movea.l 36(sp),a0
    bf64:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    bf6a:	|  |         movea.l 36(sp),a0
    bf6e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    bf74:	|  |         move.l 24(sp),16(sp)
    bf7a:	|  |         move.l 1938c <SysBase>,d0
    bf80:	|  |         movea.l d0,a6
    bf82:	|  |         movea.l 16(sp),a1
    bf86:	|  |         jsr -690(a6)
			newText = NULL;
    bf8a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    bf8e:	|  |         moveq #0,d0
    bf90:	|  +-------- bra.s bfa2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    bf92:	\--|-------> pea 1631c <custom.c.49191367+0x15f0>
    bf98:	   |         jsr 141e2 <KPrintF>
    bf9e:	   |         addq.l #4,sp
	return BR_ERROR;
    bfa0:	   |         moveq #1,d0
}
    bfa2:	   \-------> movea.l (sp)+,a6
    bfa4:	             lea 24(sp),sp
    bfa8:	             rts

0000bfaa <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    bfaa:	pea 1 <_start+0x1>
    bfae:	move.l 12(sp),-(sp)
    bfb2:	move.l 12(sp),-(sp)
    bfb6:	jsr be4a <sayCore>
    bfbc:	lea 12(sp),sp
}
    bfc0:	rts

0000bfc2 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    bfc2:	clr.l -(sp)
    bfc4:	move.l 12(sp),-(sp)
    bfc8:	move.l 12(sp),-(sp)
    bfcc:	jsr be4a <sayCore>
    bfd2:	lea 12(sp),sp
}
    bfd6:	rts

0000bfd8 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    bfd8:	moveq #2,d0
}
    bfda:	rts

0000bfdc <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    bfdc:	moveq #2,d0
}
    bfde:	rts

0000bfe0 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    bfe0:	nop
    bfe2:	rts

0000bfe4 <builtIn_setCursor>:

builtIn(setCursor)
{
    bfe4:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    bfe6:	movea.l 12(sp),a0
    bfea:	move.l 24(a0),d0
    bfee:	move.l d0,-(sp)
    bff0:	jsr 12672 <getAnimationFromVar>
    bff6:	addq.l #4,sp
    bff8:	move.l d0,(sp)
	pickAnimCursor (aa);
    bffa:	move.l (sp),-(sp)
    bffc:	jsr dba <pickAnimCursor>
    c002:	addq.l #4,sp
	trimStack (&fun -> stack);
    c004:	moveq #24,d0
    c006:	add.l 12(sp),d0
    c00a:	move.l d0,-(sp)
    c00c:	jsr 12b1e <trimStack>
    c012:	addq.l #4,sp
	return BR_CONTINUE;
    c014:	moveq #2,d0
}
    c016:	addq.l #4,sp
    c018:	rts

0000c01a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    c01a:	move.l 19348 <input+0xa>,d1
    c020:	move.l 1949a <cameraX>,d0
    c026:	add.l d0,d1
    c028:	moveq #28,d0
    c02a:	add.l 8(sp),d0
    c02e:	move.l d1,-(sp)
    c030:	pea 1 <_start+0x1>
    c034:	move.l d0,-(sp)
    c036:	jsr 12a8c <setVariable>
    c03c:	lea 12(sp),sp
	return BR_CONTINUE;
    c040:	moveq #2,d0
}
    c042:	rts

0000c044 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    c044:	move.l 1934c <input+0xe>,d1
    c04a:	move.l 1949e <cameraY>,d0
    c050:	add.l d0,d1
    c052:	moveq #28,d0
    c054:	add.l 8(sp),d0
    c058:	move.l d1,-(sp)
    c05a:	pea 1 <_start+0x1>
    c05e:	move.l d0,-(sp)
    c060:	jsr 12a8c <setVariable>
    c066:	lea 12(sp),sp
	return BR_CONTINUE;
    c06a:	moveq #2,d0
}
    c06c:	rts

0000c06e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    c06e:	move.l 19348 <input+0xa>,d0
    c074:	move.l d0,-(sp)
    c076:	jsr 1449a <__floatsisf>
    c07c:	addq.l #4,sp
    c07e:	move.l d0,d1
    c080:	move.l 18d44 <cameraZoom>,d0
    c086:	move.l d0,-(sp)
    c088:	move.l d1,-(sp)
    c08a:	jsr 1454c <__mulsf3>
    c090:	addq.l #8,sp
    c092:	move.l d0,-(sp)
    c094:	jsr 14432 <__fixsfsi>
    c09a:	addq.l #4,sp
    c09c:	move.l d0,d1
    c09e:	moveq #28,d0
    c0a0:	add.l 8(sp),d0
    c0a4:	move.l d1,-(sp)
    c0a6:	pea 1 <_start+0x1>
    c0aa:	move.l d0,-(sp)
    c0ac:	jsr 12a8c <setVariable>
    c0b2:	lea 12(sp),sp
	return BR_CONTINUE;
    c0b6:	moveq #2,d0
}
    c0b8:	rts

0000c0ba <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    c0ba:	move.l 1934c <input+0xe>,d0
    c0c0:	move.l d0,-(sp)
    c0c2:	jsr 1449a <__floatsisf>
    c0c8:	addq.l #4,sp
    c0ca:	move.l d0,d1
    c0cc:	move.l 18d44 <cameraZoom>,d0
    c0d2:	move.l d0,-(sp)
    c0d4:	move.l d1,-(sp)
    c0d6:	jsr 1454c <__mulsf3>
    c0dc:	addq.l #8,sp
    c0de:	move.l d0,-(sp)
    c0e0:	jsr 14432 <__fixsfsi>
    c0e6:	addq.l #4,sp
    c0e8:	move.l d0,d1
    c0ea:	moveq #28,d0
    c0ec:	add.l 8(sp),d0
    c0f0:	move.l d1,-(sp)
    c0f2:	pea 1 <_start+0x1>
    c0f6:	move.l d0,-(sp)
    c0f8:	jsr 12a8c <setVariable>
    c0fe:	lea 12(sp),sp
	return BR_CONTINUE;
    c102:	moveq #2,d0
}
    c104:	rts

0000c106 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    c106:	jsr 5b90 <statusBarText>
    c10c:	move.l d0,d1
    c10e:	moveq #28,d0
    c110:	add.l 8(sp),d0
    c114:	move.l d1,-(sp)
    c116:	move.l d0,-(sp)
    c118:	jsr 123bc <makeTextVar>
    c11e:	addq.l #8,sp
	return BR_CONTINUE;
    c120:	moveq #2,d0
}
    c122:	rts

0000c124 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    c124:	       lea -20(sp),sp
    c128:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c12a:	       movea.l 32(sp),a0
    c12e:	       move.l 24(a0),d0
    c132:	       move.l d0,-(sp)
    c134:	       jsr 12770 <getTextFromAnyVar>
    c13a:	       addq.l #4,sp
    c13c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    c140:	   /-- bne.s c148 <builtIn_getMatchingFiles+0x24>
    c142:	   |   moveq #1,d0
    c144:	/--|-- bra.w c20a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    c148:	|  \-> moveq #24,d0
    c14a:	|      add.l 32(sp),d0
    c14e:	|      move.l d0,-(sp)
    c150:	|      jsr 12b1e <trimStack>
    c156:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    c158:	|      moveq #28,d0
    c15a:	|      add.l 32(sp),d0
    c15e:	|      move.l d0,-(sp)
    c160:	|      jsr 123e8 <unlinkVar>
    c166:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    c168:	|      movea.l 32(sp),a0
    c16c:	|      moveq #6,d0
    c16e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    c172:	|      moveq #12,d0
    c174:	|      move.l d0,16(sp)
    c178:	|      clr.l 12(sp)
    c17c:	|      move.l 1938c <SysBase>,d0
    c182:	|      movea.l d0,a6
    c184:	|      move.l 16(sp),d0
    c188:	|      move.l 12(sp),d1
    c18c:	|      jsr -684(a6)
    c190:	|      move.l d0,8(sp)
    c194:	|      move.l 8(sp),d0
    c198:	|      movea.l 32(sp),a0
    c19c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    c1a0:	|      moveq #32,d0
    c1a2:	|      add.l 32(sp),d0
    c1a6:	|  /-- bne.s c1ac <builtIn_getMatchingFiles+0x88>
    c1a8:	|  |   moveq #1,d0
    c1aa:	+--|-- bra.s c20a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    c1ac:	|  \-> movea.l 32(sp),a0
    c1b0:	|      movea.l 32(a0),a0
    c1b4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    c1b6:	|      movea.l 32(sp),a0
    c1ba:	|      movea.l 32(a0),a0
    c1be:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    c1c2:	|      movea.l 32(sp),a0
    c1c6:	|      movea.l 32(a0),a0
    c1ca:	|      moveq #1,d0
    c1cc:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    c1d0:	|      movea.l 32(sp),a0
    c1d4:	|      move.l 32(a0),d0
    c1d8:	|      move.l 20(sp),-(sp)
    c1dc:	|      move.l d0,-(sp)
    c1de:	|      jsr 11f56 <getSavedGamesStack>
    c1e4:	|      addq.l #8,sp
    c1e6:	|      tst.w d0
    c1e8:	|  /-- bne.s c1ee <builtIn_getMatchingFiles+0xca>
    c1ea:	|  |   moveq #1,d0
    c1ec:	+--|-- bra.s c20a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    c1ee:	|  \-> move.l 20(sp),4(sp)
    c1f4:	|      move.l 1938c <SysBase>,d0
    c1fa:	|      movea.l d0,a6
    c1fc:	|      movea.l 4(sp),a1
    c200:	|      jsr -690(a6)
	newText = NULL;
    c204:	|      clr.l 20(sp)
	return BR_CONTINUE;
    c208:	|      moveq #2,d0
}
    c20a:	\----> movea.l (sp)+,a6
    c20c:	       lea 20(sp),sp
    c210:	       rts

0000c212 <builtIn_saveGame>:

builtIn(saveGame)
{
    c212:	       lea -12(sp),sp
    c216:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    c218:	       movea.l 24(sp),a0
    c21c:	       move.l 24(a0),d0
    c220:	       move.l d0,-(sp)
    c222:	       jsr 12770 <getTextFromAnyVar>
    c228:	       addq.l #4,sp
    c22a:	       move.l d0,19358 <loadNow>
    trimStack(&fun->stack);
    c230:	       moveq #24,d0
    c232:	       add.l 24(sp),d0
    c236:	       move.l d0,-(sp)
    c238:	       jsr 12b1e <trimStack>
    c23e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    c240:	       move.l 19358 <loadNow>,d0
    c246:	       move.l d0,-(sp)
    c248:	       jsr 2fe <encodeFilename>
    c24e:	       addq.l #4,sp
    c250:	       move.l d0,12(sp)
    FreeVec(loadNow);
    c254:	       move.l 19358 <loadNow>,8(sp)
    c25c:	       move.l 1938c <SysBase>,d0
    c262:	       movea.l d0,a6
    c264:	       movea.l 8(sp),a1
    c268:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    c26c:	       move.l 12(sp),-(sp)
    c270:	       jsr bdbc <failSecurityCheck>
    c276:	       addq.l #4,sp
    c278:	       tst.w d0
    c27a:	   /-- beq.s c280 <builtIn_saveGame+0x6e>
    c27c:	   |   moveq #1,d0
    c27e:	/--|-- bra.s c2d0 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    c280:	|  \-> move.l 12(sp),-(sp)
    c284:	|      pea 1634a <custom.c.49191367+0x161e>
    c28a:	|      jsr 116c6 <joinStrings>
    c290:	|      addq.l #8,sp
    c292:	|      move.l d0,19358 <loadNow>
    FreeVec(aaaaa);
    c298:	|      move.l 12(sp),4(sp)
    c29e:	|      move.l 1938c <SysBase>,d0
    c2a4:	|      movea.l d0,a6
    c2a6:	|      movea.l 4(sp),a1
    c2aa:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    c2ae:	|      moveq #28,d0
    c2b0:	|      add.l 24(sp),d0
    c2b4:	|      clr.l -(sp)
    c2b6:	|      pea 1 <_start+0x1>
    c2ba:	|      move.l d0,-(sp)
    c2bc:	|      jsr 12a8c <setVariable>
    c2c2:	|      lea 12(sp),sp
    saverFunc = fun;
    c2c6:	|      move.l 24(sp),194aa <saverFunc>
    return BR_KEEP_AND_PAUSE;
    c2ce:	|      moveq #0,d0
}
    c2d0:	\----> movea.l (sp)+,a6
    c2d2:	       lea 12(sp),sp
    c2d6:	       rts

0000c2d8 <builtIn_fileExists>:

builtIn(fileExists)
{
    c2d8:	       lea -36(sp),sp
    c2dc:	       move.l a6,-(sp)
    c2de:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    c2e0:	       movea.l 52(sp),a0
    c2e4:	       move.l 24(a0),d0
    c2e8:	       move.l d0,-(sp)
    c2ea:	       jsr 12770 <getTextFromAnyVar>
    c2f0:	       addq.l #4,sp
    c2f2:	       move.l d0,19358 <loadNow>
    trimStack(&fun->stack);
    c2f8:	       moveq #24,d0
    c2fa:	       add.l 52(sp),d0
    c2fe:	       move.l d0,-(sp)
    c300:	       jsr 12b1e <trimStack>
    c306:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    c308:	       move.l 19358 <loadNow>,d0
    c30e:	       move.l d0,-(sp)
    c310:	       jsr 2fe <encodeFilename>
    c316:	       addq.l #4,sp
    c318:	       move.l d0,40(sp)
    FreeVec(loadNow);
    c31c:	       move.l 19358 <loadNow>,36(sp)
    c324:	       move.l 1938c <SysBase>,d0
    c32a:	       movea.l d0,a6
    c32c:	       movea.l 36(sp),a1
    c330:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    c334:	       move.l 40(sp),-(sp)
    c338:	       jsr bdbc <failSecurityCheck>
    c33e:	       addq.l #4,sp
    c340:	       tst.w d0
    c342:	   /-- beq.s c34a <builtIn_fileExists+0x72>
    c344:	   |   moveq #1,d0
    c346:	/--|-- bra.w c3ea <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    c34a:	|  \-> move.l 40(sp),32(sp)
    c350:	|      move.l #1005,28(sp)
    c358:	|      move.l 19394 <DOSBase>,d0
    c35e:	|      movea.l d0,a6
    c360:	|      move.l 32(sp),d1
    c364:	|      move.l 28(sp),d2
    c368:	|      jsr -30(a6)
    c36c:	|      move.l d0,24(sp)
    c370:	|      move.l 24(sp),d0
    c374:	|      move.l d0,20(sp)
    if (!fp) {        
    c378:	|  /-- bne.s c388 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    c37a:	|  |   pea 1634c <custom.c.49191367+0x1620>
    c380:	|  |   jsr 141e2 <KPrintF>
    c386:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    c388:	|  \-> tst.l 20(sp)
    c38c:	|      sne d0
    c38e:	|      neg.b d0
    c390:	|      moveq #0,d1
    c392:	|      move.b d0,d1
    c394:	|      moveq #28,d0
    c396:	|      add.l 52(sp),d0
    c39a:	|      move.l d1,-(sp)
    c39c:	|      pea 1 <_start+0x1>
    c3a0:	|      move.l d0,-(sp)
    c3a2:	|      jsr 12a8c <setVariable>
    c3a8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    c3ac:	|      tst.l 20(sp)
    c3b0:	|  /-- beq.s c3cc <builtIn_fileExists+0xf4>
    c3b2:	|  |   move.l 20(sp),16(sp)
    c3b8:	|  |   move.l 19394 <DOSBase>,d0
    c3be:	|  |   movea.l d0,a6
    c3c0:	|  |   move.l 16(sp),d1
    c3c4:	|  |   jsr -36(a6)
    c3c8:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    c3cc:	|  \-> move.l 40(sp),8(sp)
    c3d2:	|      move.l 1938c <SysBase>,d0
    c3d8:	|      movea.l d0,a6
    c3da:	|      movea.l 8(sp),a1
    c3de:	|      jsr -690(a6)
    loadNow = NULL;
    c3e2:	|      clr.l 19358 <loadNow>
    return BR_CONTINUE;
    c3e8:	|      moveq #2,d0
}
    c3ea:	\----> move.l (sp)+,d2
    c3ec:	       movea.l (sp)+,a6
    c3ee:	       lea 36(sp),sp
    c3f2:	       rts

0000c3f4 <builtIn_loadGame>:

builtIn(loadGame)
{
    c3f4:	       lea -36(sp),sp
    c3f8:	       move.l a6,-(sp)
    c3fa:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    c3fc:	       movea.l 52(sp),a0
    c400:	       move.l 24(a0),d0
    c404:	       move.l d0,-(sp)
    c406:	       jsr 12770 <getTextFromAnyVar>
    c40c:	       addq.l #4,sp
    c40e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    c412:	       moveq #24,d0
    c414:	       add.l 52(sp),d0
    c418:	       move.l d0,-(sp)
    c41a:	       jsr 12b1e <trimStack>
    c420:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    c422:	       move.l 40(sp),-(sp)
    c426:	       jsr 2fe <encodeFilename>
    c42c:	       addq.l #4,sp
    c42e:	       move.l d0,19358 <loadNow>
    FreeVec(aaaaa);
    c434:	       move.l 40(sp),36(sp)
    c43a:	       move.l 1938c <SysBase>,d0
    c440:	       movea.l d0,a6
    c442:	       movea.l 36(sp),a1
    c446:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    c44a:	       move.l 19358 <loadNow>,d0
    c450:	       move.l d0,-(sp)
    c452:	       jsr bdbc <failSecurityCheck>
    c458:	       addq.l #4,sp
    c45a:	       tst.w d0
    c45c:	   /-- beq.s c462 <builtIn_loadGame+0x6e>
    c45e:	   |   moveq #1,d0
    c460:	/--|-- bra.s c4d2 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    c462:	|  \-> move.l 19358 <loadNow>,32(sp)
    c46a:	|      move.l #1005,28(sp)
    c472:	|      move.l 19394 <DOSBase>,d0
    c478:	|      movea.l d0,a6
    c47a:	|      move.l 32(sp),d1
    c47e:	|      move.l 28(sp),d2
    c482:	|      jsr -30(a6)
    c486:	|      move.l d0,24(sp)
    c48a:	|      move.l 24(sp),d0
    c48e:	|      move.l d0,20(sp)
    if (fp) {
    c492:	|  /-- beq.s c4b2 <builtIn_loadGame+0xbe>
        Close(fp);
    c494:	|  |   move.l 20(sp),12(sp)
    c49a:	|  |   move.l 19394 <DOSBase>,d0
    c4a0:	|  |   movea.l d0,a6
    c4a2:	|  |   move.l 12(sp),d1
    c4a6:	|  |   jsr -36(a6)
    c4aa:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    c4ae:	|  |   moveq #0,d0
    c4b0:	+--|-- bra.s c4d2 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    c4b2:	|  \-> move.l 19358 <loadNow>,16(sp)
    c4ba:	|      move.l 1938c <SysBase>,d0
    c4c0:	|      movea.l d0,a6
    c4c2:	|      movea.l 16(sp),a1
    c4c6:	|      jsr -690(a6)
    loadNow = NULL;
    c4ca:	|      clr.l 19358 <loadNow>
    return BR_CONTINUE;
    c4d0:	|      moveq #2,d0
}
    c4d2:	\----> move.l (sp)+,d2
    c4d4:	       movea.l (sp)+,a6
    c4d6:	       lea 36(sp),sp
    c4da:	       rts

0000c4dc <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    c4dc:	move.l 19480 <sceneHeight>,d0
    c4e2:	move.l d0,d1
    c4e4:	move.l 1947c <sceneWidth>,d0
    c4ea:	move.l d1,-(sp)
    c4ec:	move.l d0,-(sp)
    c4ee:	clr.l -(sp)
    c4f0:	clr.l -(sp)
    c4f2:	jsr acbc <blankScreen>
    c4f8:	lea 16(sp),sp
	return BR_CONTINUE;
    c4fc:	moveq #2,d0
}
    c4fe:	rts

0000c500 <builtIn_blankArea>:

builtIn(blankArea)
{
    c500:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c504:	       movea.l 24(sp),a0
    c508:	       move.l 24(a0),d0
    c50c:	       move.l d0,-(sp)
    c50e:	       pea 1 <_start+0x1>
    c512:	       lea 8(sp),a0
    c516:	       move.l a0,-(sp)
    c518:	       jsr 1219a <getValueType>
    c51e:	       lea 12(sp),sp
    c522:	       tst.w d0
    c524:	   /-- bne.s c52c <builtIn_blankArea+0x2c>
    c526:	   |   moveq #1,d0
    c528:	/--|-- bra.w c602 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c52c:	|  \-> moveq #24,d0
    c52e:	|      add.l 24(sp),d0
    c532:	|      move.l d0,-(sp)
    c534:	|      jsr 12b1e <trimStack>
    c53a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c53c:	|      movea.l 24(sp),a0
    c540:	|      move.l 24(a0),d0
    c544:	|      move.l d0,-(sp)
    c546:	|      pea 1 <_start+0x1>
    c54a:	|      lea 12(sp),a0
    c54e:	|      move.l a0,-(sp)
    c550:	|      jsr 1219a <getValueType>
    c556:	|      lea 12(sp),sp
    c55a:	|      tst.w d0
    c55c:	|  /-- bne.s c564 <builtIn_blankArea+0x64>
    c55e:	|  |   moveq #1,d0
    c560:	+--|-- bra.w c602 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c564:	|  \-> moveq #24,d0
    c566:	|      add.l 24(sp),d0
    c56a:	|      move.l d0,-(sp)
    c56c:	|      jsr 12b1e <trimStack>
    c572:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c574:	|      movea.l 24(sp),a0
    c578:	|      move.l 24(a0),d0
    c57c:	|      move.l d0,-(sp)
    c57e:	|      pea 1 <_start+0x1>
    c582:	|      moveq #16,d0
    c584:	|      add.l sp,d0
    c586:	|      move.l d0,-(sp)
    c588:	|      jsr 1219a <getValueType>
    c58e:	|      lea 12(sp),sp
    c592:	|      tst.w d0
    c594:	|  /-- bne.s c59a <builtIn_blankArea+0x9a>
    c596:	|  |   moveq #1,d0
    c598:	+--|-- bra.s c602 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c59a:	|  \-> moveq #24,d0
    c59c:	|      add.l 24(sp),d0
    c5a0:	|      move.l d0,-(sp)
    c5a2:	|      jsr 12b1e <trimStack>
    c5a8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c5aa:	|      movea.l 24(sp),a0
    c5ae:	|      move.l 24(a0),d0
    c5b2:	|      move.l d0,-(sp)
    c5b4:	|      pea 1 <_start+0x1>
    c5b8:	|      moveq #20,d0
    c5ba:	|      add.l sp,d0
    c5bc:	|      move.l d0,-(sp)
    c5be:	|      jsr 1219a <getValueType>
    c5c4:	|      lea 12(sp),sp
    c5c8:	|      tst.w d0
    c5ca:	|  /-- bne.s c5d0 <builtIn_blankArea+0xd0>
    c5cc:	|  |   moveq #1,d0
    c5ce:	+--|-- bra.s c602 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c5d0:	|  \-> moveq #24,d0
    c5d2:	|      add.l 24(sp),d0
    c5d6:	|      move.l d0,-(sp)
    c5d8:	|      jsr 12b1e <trimStack>
    c5de:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    c5e0:	|      movea.l (sp),a1
    c5e2:	|      movea.l 4(sp),a0
    c5e6:	|      move.l 8(sp),d1
    c5ea:	|      move.l 12(sp),d0
    c5ee:	|      move.l a1,-(sp)
    c5f0:	|      move.l a0,-(sp)
    c5f2:	|      move.l d1,-(sp)
    c5f4:	|      move.l d0,-(sp)
    c5f6:	|      jsr acbc <blankScreen>
    c5fc:	|      lea 16(sp),sp
	return BR_CONTINUE;
    c600:	|      moveq #2,d0
}
    c602:	\----> lea 16(sp),sp
    c606:	       rts

0000c608 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    c608:	jsr acd0 <darkScreen>
	return BR_CONTINUE;
    c60e:	moveq #2,d0
}
    c610:	rts

0000c612 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    c612:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c616:	       movea.l 20(sp),a0
    c61a:	       move.l 24(a0),d0
    c61e:	       move.l d0,-(sp)
    c620:	       pea 1 <_start+0x1>
    c624:	       lea 8(sp),a0
    c628:	       move.l a0,-(sp)
    c62a:	       jsr 1219a <getValueType>
    c630:	       lea 12(sp),sp
    c634:	       tst.w d0
    c636:	   /-- bne.s c63e <builtIn_addOverlay+0x2c>
    c638:	   |   moveq #1,d0
    c63a:	/--|-- bra.w c6d6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c63e:	|  \-> moveq #24,d0
    c640:	|      add.l 20(sp),d0
    c644:	|      move.l d0,-(sp)
    c646:	|      jsr 12b1e <trimStack>
    c64c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c64e:	|      movea.l 20(sp),a0
    c652:	|      move.l 24(a0),d0
    c656:	|      move.l d0,-(sp)
    c658:	|      pea 1 <_start+0x1>
    c65c:	|      moveq #12,d0
    c65e:	|      add.l sp,d0
    c660:	|      move.l d0,-(sp)
    c662:	|      jsr 1219a <getValueType>
    c668:	|      lea 12(sp),sp
    c66c:	|      tst.w d0
    c66e:	|  /-- bne.s c674 <builtIn_addOverlay+0x62>
    c670:	|  |   moveq #1,d0
    c672:	+--|-- bra.s c6d6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c674:	|  \-> moveq #24,d0
    c676:	|      add.l 20(sp),d0
    c67a:	|      move.l d0,-(sp)
    c67c:	|      jsr 12b1e <trimStack>
    c682:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c684:	|      movea.l 20(sp),a0
    c688:	|      move.l 24(a0),d0
    c68c:	|      move.l d0,-(sp)
    c68e:	|      pea 5 <_start+0x5>
    c692:	|      moveq #16,d0
    c694:	|      add.l sp,d0
    c696:	|      move.l d0,-(sp)
    c698:	|      jsr 1219a <getValueType>
    c69e:	|      lea 12(sp),sp
    c6a2:	|      tst.w d0
    c6a4:	|  /-- bne.s c6aa <builtIn_addOverlay+0x98>
    c6a6:	|  |   moveq #1,d0
    c6a8:	+--|-- bra.s c6d6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c6aa:	|  \-> moveq #24,d0
    c6ac:	|      add.l 20(sp),d0
    c6b0:	|      move.l d0,-(sp)
    c6b2:	|      jsr 12b1e <trimStack>
    c6b8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    c6ba:	|      movea.l (sp),a0
    c6bc:	|      move.l 4(sp),d1
    c6c0:	|      move.l 8(sp),d0
    c6c4:	|      move.l a0,-(sp)
    c6c6:	|      move.l d1,-(sp)
    c6c8:	|      move.l d0,-(sp)
    c6ca:	|      jsr adee <loadBackDrop>
    c6d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c6d4:	|      moveq #2,d0
}
    c6d6:	\----> lea 12(sp),sp
    c6da:	       rts

0000c6dc <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    c6dc:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c6e0:	       movea.l 20(sp),a0
    c6e4:	       move.l 24(a0),d0
    c6e8:	       move.l d0,-(sp)
    c6ea:	       pea 1 <_start+0x1>
    c6ee:	       lea 8(sp),a0
    c6f2:	       move.l a0,-(sp)
    c6f4:	       jsr 1219a <getValueType>
    c6fa:	       lea 12(sp),sp
    c6fe:	       tst.w d0
    c700:	   /-- bne.s c708 <builtIn_mixOverlay+0x2c>
    c702:	   |   moveq #1,d0
    c704:	/--|-- bra.w c7a0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c708:	|  \-> moveq #24,d0
    c70a:	|      add.l 20(sp),d0
    c70e:	|      move.l d0,-(sp)
    c710:	|      jsr 12b1e <trimStack>
    c716:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c718:	|      movea.l 20(sp),a0
    c71c:	|      move.l 24(a0),d0
    c720:	|      move.l d0,-(sp)
    c722:	|      pea 1 <_start+0x1>
    c726:	|      moveq #12,d0
    c728:	|      add.l sp,d0
    c72a:	|      move.l d0,-(sp)
    c72c:	|      jsr 1219a <getValueType>
    c732:	|      lea 12(sp),sp
    c736:	|      tst.w d0
    c738:	|  /-- bne.s c73e <builtIn_mixOverlay+0x62>
    c73a:	|  |   moveq #1,d0
    c73c:	+--|-- bra.s c7a0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c73e:	|  \-> moveq #24,d0
    c740:	|      add.l 20(sp),d0
    c744:	|      move.l d0,-(sp)
    c746:	|      jsr 12b1e <trimStack>
    c74c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c74e:	|      movea.l 20(sp),a0
    c752:	|      move.l 24(a0),d0
    c756:	|      move.l d0,-(sp)
    c758:	|      pea 5 <_start+0x5>
    c75c:	|      moveq #16,d0
    c75e:	|      add.l sp,d0
    c760:	|      move.l d0,-(sp)
    c762:	|      jsr 1219a <getValueType>
    c768:	|      lea 12(sp),sp
    c76c:	|      tst.w d0
    c76e:	|  /-- bne.s c774 <builtIn_mixOverlay+0x98>
    c770:	|  |   moveq #1,d0
    c772:	+--|-- bra.s c7a0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c774:	|  \-> moveq #24,d0
    c776:	|      add.l 20(sp),d0
    c77a:	|      move.l d0,-(sp)
    c77c:	|      jsr 12b1e <trimStack>
    c782:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    c784:	|      movea.l (sp),a0
    c786:	|      move.l 4(sp),d1
    c78a:	|      move.l 8(sp),d0
    c78e:	|      move.l a0,-(sp)
    c790:	|      move.l d1,-(sp)
    c792:	|      move.l d0,-(sp)
    c794:	|      jsr ae64 <mixBackDrop>
    c79a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c79e:	|      moveq #2,d0
}
    c7a0:	\----> lea 12(sp),sp
    c7a4:	       rts

0000c7a6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    c7a6:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7aa:	       movea.l 20(sp),a0
    c7ae:	       move.l 24(a0),d0
    c7b2:	       move.l d0,-(sp)
    c7b4:	       pea 1 <_start+0x1>
    c7b8:	       lea 8(sp),a0
    c7bc:	       move.l a0,-(sp)
    c7be:	       jsr 1219a <getValueType>
    c7c4:	       lea 12(sp),sp
    c7c8:	       tst.w d0
    c7ca:	   /-- bne.s c7d2 <builtIn_pasteImage+0x2c>
    c7cc:	   |   moveq #1,d0
    c7ce:	/--|-- bra.w c862 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c7d2:	|  \-> moveq #24,d0
    c7d4:	|      add.l 20(sp),d0
    c7d8:	|      move.l d0,-(sp)
    c7da:	|      jsr 12b1e <trimStack>
    c7e0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7e2:	|      movea.l 20(sp),a0
    c7e6:	|      move.l 24(a0),d0
    c7ea:	|      move.l d0,-(sp)
    c7ec:	|      pea 1 <_start+0x1>
    c7f0:	|      moveq #12,d0
    c7f2:	|      add.l sp,d0
    c7f4:	|      move.l d0,-(sp)
    c7f6:	|      jsr 1219a <getValueType>
    c7fc:	|      lea 12(sp),sp
    c800:	|      tst.w d0
    c802:	|  /-- bne.s c808 <builtIn_pasteImage+0x62>
    c804:	|  |   moveq #1,d0
    c806:	+--|-- bra.s c862 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c808:	|  \-> moveq #24,d0
    c80a:	|      add.l 20(sp),d0
    c80e:	|      move.l d0,-(sp)
    c810:	|      jsr 12b1e <trimStack>
    c816:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    c818:	|      movea.l 20(sp),a0
    c81c:	|      move.l 24(a0),d0
    c820:	|      move.l d0,-(sp)
    c822:	|      jsr 12672 <getAnimationFromVar>
    c828:	|      addq.l #4,sp
    c82a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    c82e:	|      moveq #24,d0
    c830:	|      add.l 20(sp),d0
    c834:	|      move.l d0,-(sp)
    c836:	|      jsr 12b1e <trimStack>
    c83c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    c83e:	|      tst.l 8(sp)
    c842:	|  /-- bne.s c848 <builtIn_pasteImage+0xa2>
    c844:	|  |   moveq #2,d0
    c846:	+--|-- bra.s c862 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    c848:	|  \-> move.l (sp),d1
    c84a:	|      move.l 4(sp),d0
    c84e:	|      move.l 8(sp),-(sp)
    c852:	|      move.l d1,-(sp)
    c854:	|      move.l d0,-(sp)
    c856:	|      jsr de2 <pasteCursor>
    c85c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c860:	|      moveq #2,d0
}
    c862:	\----> lea 12(sp),sp
    c866:	       rts

0000c868 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    c868:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c86a:	       movea.l 16(sp),a0
    c86e:	       move.l 24(a0),d0
    c872:	       move.l d0,-(sp)
    c874:	       pea 1 <_start+0x1>
    c878:	       move.l sp,d0
    c87a:	       addq.l #8,d0
    c87c:	       move.l d0,-(sp)
    c87e:	       jsr 1219a <getValueType>
    c884:	       lea 12(sp),sp
    c888:	       tst.w d0
    c88a:	   /-- bne.s c892 <builtIn_setSceneDimensions+0x2a>
    c88c:	   |   moveq #1,d0
    c88e:	/--|-- bra.w c91a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c892:	|  \-> moveq #24,d0
    c894:	|      add.l 16(sp),d0
    c898:	|      move.l d0,-(sp)
    c89a:	|      jsr 12b1e <trimStack>
    c8a0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8a2:	|      movea.l 16(sp),a0
    c8a6:	|      move.l 24(a0),d0
    c8aa:	|      move.l d0,-(sp)
    c8ac:	|      pea 1 <_start+0x1>
    c8b0:	|      moveq #12,d0
    c8b2:	|      add.l sp,d0
    c8b4:	|      move.l d0,-(sp)
    c8b6:	|      jsr 1219a <getValueType>
    c8bc:	|      lea 12(sp),sp
    c8c0:	|      tst.w d0
    c8c2:	|  /-- bne.s c8c8 <builtIn_setSceneDimensions+0x60>
    c8c4:	|  |   moveq #1,d0
    c8c6:	+--|-- bra.s c91a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c8c8:	|  \-> moveq #24,d0
    c8ca:	|      add.l 16(sp),d0
    c8ce:	|      move.l d0,-(sp)
    c8d0:	|      jsr 12b1e <trimStack>
    c8d6:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    c8d8:	|      move.l (sp),d1
    c8da:	|      move.l 4(sp),d0
    c8de:	|      move.l d1,-(sp)
    c8e0:	|      move.l d0,-(sp)
    c8e2:	|      jsr aeae <resizeBackdrop>
    c8e8:	|      addq.l #8,sp
    c8ea:	|      tst.w d0
    c8ec:	|  /-- beq.s c90a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    c8ee:	|  |   move.l (sp),d1
    c8f0:	|  |   move.l 4(sp),d0
    c8f4:	|  |   move.l d1,-(sp)
    c8f6:	|  |   move.l d0,-(sp)
    c8f8:	|  |   clr.l -(sp)
    c8fa:	|  |   clr.l -(sp)
    c8fc:	|  |   jsr acbc <blankScreen>
    c902:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    c906:	|  |   moveq #2,d0
    c908:	+--|-- bra.s c91a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    c90a:	|  \-> pea 1636a <custom.c.49191367+0x163e>
    c910:	|      jsr 141e2 <KPrintF>
    c916:	|      addq.l #4,sp
	return BR_ERROR;
    c918:	|      moveq #1,d0
}
    c91a:	\----> addq.l #8,sp
    c91c:	       rts

0000c91e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    c91e:	          move.l d3,-(sp)
    c920:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c922:	          movea.l 16(sp),a0
    c926:	          move.l 24(a0),d0
    c92a:	          move.l d0,-(sp)
    c92c:	          pea 1 <_start+0x1>
    c930:	          pea 1949e <cameraY>
    c936:	          jsr 1219a <getValueType>
    c93c:	          lea 12(sp),sp
    c940:	          tst.w d0
    c942:	      /-- bne.s c94a <builtIn_aimCamera+0x2c>
    c944:	      |   moveq #1,d0
    c946:	/-----|-- bra.w cbcc <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c94a:	|     \-> moveq #24,d0
    c94c:	|         add.l 16(sp),d0
    c950:	|         move.l d0,-(sp)
    c952:	|         jsr 12b1e <trimStack>
    c958:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c95a:	|         movea.l 16(sp),a0
    c95e:	|         move.l 24(a0),d0
    c962:	|         move.l d0,-(sp)
    c964:	|         pea 1 <_start+0x1>
    c968:	|         pea 1949a <cameraX>
    c96e:	|         jsr 1219a <getValueType>
    c974:	|         lea 12(sp),sp
    c978:	|         tst.w d0
    c97a:	|     /-- bne.s c982 <builtIn_aimCamera+0x64>
    c97c:	|     |   moveq #1,d0
    c97e:	+-----|-- bra.w cbcc <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c982:	|     \-> moveq #24,d0
    c984:	|         add.l 16(sp),d0
    c988:	|         move.l d0,-(sp)
    c98a:	|         jsr 12b1e <trimStack>
    c990:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    c992:	|         move.l 1949a <cameraX>,d0
    c998:	|         move.l d0,-(sp)
    c99a:	|         jsr 1449a <__floatsisf>
    c9a0:	|         addq.l #4,sp
    c9a2:	|         move.l d0,d2
    c9a4:	|         move.l 192e0 <winWidth>,d0
    c9aa:	|         lsr.l #1,d0
    c9ac:	|         move.l d0,-(sp)
    c9ae:	|         jsr 144c2 <__floatunsisf>
    c9b4:	|         addq.l #4,sp
    c9b6:	|         move.l d0,d1
    c9b8:	|         move.l 18d44 <cameraZoom>,d0
    c9be:	|         move.l d0,-(sp)
    c9c0:	|         move.l d1,-(sp)
    c9c2:	|         jsr 14346 <__divsf3>
    c9c8:	|         addq.l #8,sp
    c9ca:	|         move.l d0,-(sp)
    c9cc:	|         move.l d2,-(sp)
    c9ce:	|         jsr 1478e <__subsf3>
    c9d4:	|         addq.l #8,sp
    c9d6:	|         move.l d0,-(sp)
    c9d8:	|         jsr 14432 <__fixsfsi>
    c9de:	|         addq.l #4,sp
    c9e0:	|         move.l d0,1949a <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    c9e6:	|         move.l 1949e <cameraY>,d0
    c9ec:	|         move.l d0,-(sp)
    c9ee:	|         jsr 1449a <__floatsisf>
    c9f4:	|         addq.l #4,sp
    c9f6:	|         move.l d0,d2
    c9f8:	|         move.l 192e4 <winHeight>,d0
    c9fe:	|         lsr.l #1,d0
    ca00:	|         move.l d0,-(sp)
    ca02:	|         jsr 144c2 <__floatunsisf>
    ca08:	|         addq.l #4,sp
    ca0a:	|         move.l d0,d1
    ca0c:	|         move.l 18d44 <cameraZoom>,d0
    ca12:	|         move.l d0,-(sp)
    ca14:	|         move.l d1,-(sp)
    ca16:	|         jsr 14346 <__divsf3>
    ca1c:	|         addq.l #8,sp
    ca1e:	|         move.l d0,-(sp)
    ca20:	|         move.l d2,-(sp)
    ca22:	|         jsr 1478e <__subsf3>
    ca28:	|         addq.l #8,sp
    ca2a:	|         move.l d0,-(sp)
    ca2c:	|         jsr 14432 <__fixsfsi>
    ca32:	|         addq.l #4,sp
    ca34:	|         move.l d0,1949e <cameraY>

	if (cameraX < 0) cameraX = 0;
    ca3a:	|         move.l 1949a <cameraX>,d0
    ca40:	|     /-- bpl.s ca4c <builtIn_aimCamera+0x12e>
    ca42:	|     |   clr.l 1949a <cameraX>
    ca48:	|  /--|-- bra.w cb02 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ca4c:	|  |  \-> move.l 1949a <cameraX>,d0
    ca52:	|  |      move.l d0,-(sp)
    ca54:	|  |      jsr 1449a <__floatsisf>
    ca5a:	|  |      addq.l #4,sp
    ca5c:	|  |      move.l d0,d2
    ca5e:	|  |      move.l 1947c <sceneWidth>,d0
    ca64:	|  |      move.l d0,-(sp)
    ca66:	|  |      jsr 144c2 <__floatunsisf>
    ca6c:	|  |      addq.l #4,sp
    ca6e:	|  |      move.l d0,d3
    ca70:	|  |      move.l 192e0 <winWidth>,d0
    ca76:	|  |      move.l d0,-(sp)
    ca78:	|  |      jsr 144c2 <__floatunsisf>
    ca7e:	|  |      addq.l #4,sp
    ca80:	|  |      move.l d0,d1
    ca82:	|  |      move.l 18d44 <cameraZoom>,d0
    ca88:	|  |      move.l d0,-(sp)
    ca8a:	|  |      move.l d1,-(sp)
    ca8c:	|  |      jsr 14346 <__divsf3>
    ca92:	|  |      addq.l #8,sp
    ca94:	|  |      move.l d0,-(sp)
    ca96:	|  |      move.l d3,-(sp)
    ca98:	|  |      jsr 1478e <__subsf3>
    ca9e:	|  |      addq.l #8,sp
    caa0:	|  |      move.l d0,-(sp)
    caa2:	|  |      move.l d2,-(sp)
    caa4:	|  |      jsr 14606 <__gtsf2>
    caaa:	|  |      addq.l #8,sp
    caac:	|  |      tst.l d0
    caae:	|  +----- ble.s cb02 <builtIn_aimCamera+0x1e4>
    cab0:	|  |      move.l 1947c <sceneWidth>,d0
    cab6:	|  |      move.l d0,-(sp)
    cab8:	|  |      jsr 144c2 <__floatunsisf>
    cabe:	|  |      addq.l #4,sp
    cac0:	|  |      move.l d0,d2
    cac2:	|  |      move.l 192e0 <winWidth>,d0
    cac8:	|  |      move.l d0,-(sp)
    caca:	|  |      jsr 144c2 <__floatunsisf>
    cad0:	|  |      addq.l #4,sp
    cad2:	|  |      move.l d0,d1
    cad4:	|  |      move.l 18d44 <cameraZoom>,d0
    cada:	|  |      move.l d0,-(sp)
    cadc:	|  |      move.l d1,-(sp)
    cade:	|  |      jsr 14346 <__divsf3>
    cae4:	|  |      addq.l #8,sp
    cae6:	|  |      move.l d0,-(sp)
    cae8:	|  |      move.l d2,-(sp)
    caea:	|  |      jsr 1478e <__subsf3>
    caf0:	|  |      addq.l #8,sp
    caf2:	|  |      move.l d0,-(sp)
    caf4:	|  |      jsr 14432 <__fixsfsi>
    cafa:	|  |      addq.l #4,sp
    cafc:	|  |      move.l d0,1949a <cameraX>
	if (cameraY < 0) cameraY = 0;
    cb02:	|  \----> move.l 1949e <cameraY>,d0
    cb08:	|     /-- bpl.s cb14 <builtIn_aimCamera+0x1f6>
    cb0a:	|     |   clr.l 1949e <cameraY>
    cb10:	|  /--|-- bra.w cbca <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    cb14:	|  |  \-> move.l 1949e <cameraY>,d0
    cb1a:	|  |      move.l d0,-(sp)
    cb1c:	|  |      jsr 1449a <__floatsisf>
    cb22:	|  |      addq.l #4,sp
    cb24:	|  |      move.l d0,d2
    cb26:	|  |      move.l 19480 <sceneHeight>,d0
    cb2c:	|  |      move.l d0,-(sp)
    cb2e:	|  |      jsr 144c2 <__floatunsisf>
    cb34:	|  |      addq.l #4,sp
    cb36:	|  |      move.l d0,d3
    cb38:	|  |      move.l 192e4 <winHeight>,d0
    cb3e:	|  |      move.l d0,-(sp)
    cb40:	|  |      jsr 144c2 <__floatunsisf>
    cb46:	|  |      addq.l #4,sp
    cb48:	|  |      move.l d0,d1
    cb4a:	|  |      move.l 18d44 <cameraZoom>,d0
    cb50:	|  |      move.l d0,-(sp)
    cb52:	|  |      move.l d1,-(sp)
    cb54:	|  |      jsr 14346 <__divsf3>
    cb5a:	|  |      addq.l #8,sp
    cb5c:	|  |      move.l d0,-(sp)
    cb5e:	|  |      move.l d3,-(sp)
    cb60:	|  |      jsr 1478e <__subsf3>
    cb66:	|  |      addq.l #8,sp
    cb68:	|  |      move.l d0,-(sp)
    cb6a:	|  |      move.l d2,-(sp)
    cb6c:	|  |      jsr 14606 <__gtsf2>
    cb72:	|  |      addq.l #8,sp
    cb74:	|  |      tst.l d0
    cb76:	|  +----- ble.s cbca <builtIn_aimCamera+0x2ac>
    cb78:	|  |      move.l 19480 <sceneHeight>,d0
    cb7e:	|  |      move.l d0,-(sp)
    cb80:	|  |      jsr 144c2 <__floatunsisf>
    cb86:	|  |      addq.l #4,sp
    cb88:	|  |      move.l d0,d2
    cb8a:	|  |      move.l 192e4 <winHeight>,d0
    cb90:	|  |      move.l d0,-(sp)
    cb92:	|  |      jsr 144c2 <__floatunsisf>
    cb98:	|  |      addq.l #4,sp
    cb9a:	|  |      move.l d0,d1
    cb9c:	|  |      move.l 18d44 <cameraZoom>,d0
    cba2:	|  |      move.l d0,-(sp)
    cba4:	|  |      move.l d1,-(sp)
    cba6:	|  |      jsr 14346 <__divsf3>
    cbac:	|  |      addq.l #8,sp
    cbae:	|  |      move.l d0,-(sp)
    cbb0:	|  |      move.l d2,-(sp)
    cbb2:	|  |      jsr 1478e <__subsf3>
    cbb8:	|  |      addq.l #8,sp
    cbba:	|  |      move.l d0,-(sp)
    cbbc:	|  |      jsr 14432 <__fixsfsi>
    cbc2:	|  |      addq.l #4,sp
    cbc4:	|  |      move.l d0,1949e <cameraY>
	return BR_CONTINUE;
    cbca:	|  \----> moveq #2,d0
}
    cbcc:	\-------> move.l (sp)+,d2
    cbce:	          move.l (sp)+,d3
    cbd0:	          rts

0000cbd2 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    cbd2:	       subq.l #4,sp
    cbd4:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbd6:	       movea.l 16(sp),a0
    cbda:	       move.l 24(a0),d0
    cbde:	       move.l d0,-(sp)
    cbe0:	       pea 1 <_start+0x1>
    cbe4:	       moveq #12,d0
    cbe6:	       add.l sp,d0
    cbe8:	       move.l d0,-(sp)
    cbea:	       jsr 1219a <getValueType>
    cbf0:	       lea 12(sp),sp
    cbf4:	       tst.w d0
    cbf6:	   /-- bne.s cbfe <builtIn_zoomCamera+0x2c>
    cbf8:	   |   moveq #1,d0
    cbfa:	/--|-- bra.w cdf8 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    cbfe:	|  \-> moveq #24,d0
    cc00:	|      add.l 16(sp),d0
    cc04:	|      move.l d0,-(sp)
    cc06:	|      jsr 12b1e <trimStack>
    cc0c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    cc0e:	|      move.l 19348 <input+0xa>,d0
    cc14:	|      move.l d0,-(sp)
    cc16:	|      jsr 1449a <__floatsisf>
    cc1c:	|      addq.l #4,sp
    cc1e:	|      move.l d0,d1
    cc20:	|      move.l 18d44 <cameraZoom>,d0
    cc26:	|      move.l d0,-(sp)
    cc28:	|      move.l d1,-(sp)
    cc2a:	|      jsr 1454c <__mulsf3>
    cc30:	|      addq.l #8,sp
    cc32:	|      move.l d0,-(sp)
    cc34:	|      jsr 14432 <__fixsfsi>
    cc3a:	|      addq.l #4,sp
    cc3c:	|      move.l d0,19348 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    cc42:	|      move.l 1934c <input+0xe>,d0
    cc48:	|      move.l d0,-(sp)
    cc4a:	|      jsr 1449a <__floatsisf>
    cc50:	|      addq.l #4,sp
    cc52:	|      move.l d0,d1
    cc54:	|      move.l 18d44 <cameraZoom>,d0
    cc5a:	|      move.l d0,-(sp)
    cc5c:	|      move.l d1,-(sp)
    cc5e:	|      jsr 1454c <__mulsf3>
    cc64:	|      addq.l #8,sp
    cc66:	|      move.l d0,-(sp)
    cc68:	|      jsr 14432 <__fixsfsi>
    cc6e:	|      addq.l #4,sp
    cc70:	|      move.l d0,1934c <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    cc76:	|      move.l 4(sp),d0
    cc7a:	|      move.l d0,-(sp)
    cc7c:	|      jsr 1449a <__floatsisf>
    cc82:	|      addq.l #4,sp
    cc84:	|      move.l #1008981770,-(sp)
    cc8a:	|      move.l d0,-(sp)
    cc8c:	|      jsr 1454c <__mulsf3>
    cc92:	|      addq.l #8,sp
    cc94:	|      move.l d0,18d44 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    cc9a:	|      move.l 192e0 <winWidth>,d0
    cca0:	|      move.l d0,-(sp)
    cca2:	|      jsr 144c2 <__floatunsisf>
    cca8:	|      addq.l #4,sp
    ccaa:	|      move.l d0,d1
    ccac:	|      move.l 18d44 <cameraZoom>,d0
    ccb2:	|      move.l d0,-(sp)
    ccb4:	|      move.l d1,-(sp)
    ccb6:	|      jsr 14346 <__divsf3>
    ccbc:	|      addq.l #8,sp
    ccbe:	|      move.l d0,d2
    ccc0:	|      move.l 1947c <sceneWidth>,d0
    ccc6:	|      move.l d0,-(sp)
    ccc8:	|      jsr 144c2 <__floatunsisf>
    ccce:	|      addq.l #4,sp
    ccd0:	|      move.l d0,-(sp)
    ccd2:	|      move.l d2,-(sp)
    ccd4:	|      jsr 14606 <__gtsf2>
    ccda:	|      addq.l #8,sp
    ccdc:	|      tst.l d0
    ccde:	|  /-- ble.s cd14 <builtIn_zoomCamera+0x142>
    cce0:	|  |   move.l 192e0 <winWidth>,d0
    cce6:	|  |   move.l d0,-(sp)
    cce8:	|  |   jsr 144c2 <__floatunsisf>
    ccee:	|  |   addq.l #4,sp
    ccf0:	|  |   move.l d0,d2
    ccf2:	|  |   move.l 1947c <sceneWidth>,d0
    ccf8:	|  |   move.l d0,-(sp)
    ccfa:	|  |   jsr 144c2 <__floatunsisf>
    cd00:	|  |   addq.l #4,sp
    cd02:	|  |   move.l d0,-(sp)
    cd04:	|  |   move.l d2,-(sp)
    cd06:	|  |   jsr 14346 <__divsf3>
    cd0c:	|  |   addq.l #8,sp
    cd0e:	|  |   move.l d0,18d44 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    cd14:	|  \-> move.l 192e4 <winHeight>,d0
    cd1a:	|      move.l d0,-(sp)
    cd1c:	|      jsr 144c2 <__floatunsisf>
    cd22:	|      addq.l #4,sp
    cd24:	|      move.l d0,d1
    cd26:	|      move.l 18d44 <cameraZoom>,d0
    cd2c:	|      move.l d0,-(sp)
    cd2e:	|      move.l d1,-(sp)
    cd30:	|      jsr 14346 <__divsf3>
    cd36:	|      addq.l #8,sp
    cd38:	|      move.l d0,d2
    cd3a:	|      move.l 19480 <sceneHeight>,d0
    cd40:	|      move.l d0,-(sp)
    cd42:	|      jsr 144c2 <__floatunsisf>
    cd48:	|      addq.l #4,sp
    cd4a:	|      move.l d0,-(sp)
    cd4c:	|      move.l d2,-(sp)
    cd4e:	|      jsr 14606 <__gtsf2>
    cd54:	|      addq.l #8,sp
    cd56:	|      tst.l d0
    cd58:	|  /-- ble.s cd8e <builtIn_zoomCamera+0x1bc>
    cd5a:	|  |   move.l 192e4 <winHeight>,d0
    cd60:	|  |   move.l d0,-(sp)
    cd62:	|  |   jsr 144c2 <__floatunsisf>
    cd68:	|  |   addq.l #4,sp
    cd6a:	|  |   move.l d0,d2
    cd6c:	|  |   move.l 19480 <sceneHeight>,d0
    cd72:	|  |   move.l d0,-(sp)
    cd74:	|  |   jsr 144c2 <__floatunsisf>
    cd7a:	|  |   addq.l #4,sp
    cd7c:	|  |   move.l d0,-(sp)
    cd7e:	|  |   move.l d2,-(sp)
    cd80:	|  |   jsr 14346 <__divsf3>
    cd86:	|  |   addq.l #8,sp
    cd88:	|  |   move.l d0,18d44 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    cd8e:	|  \-> move.l 19348 <input+0xa>,d0
    cd94:	|      move.l d0,-(sp)
    cd96:	|      jsr 1449a <__floatsisf>
    cd9c:	|      addq.l #4,sp
    cd9e:	|      move.l d0,d1
    cda0:	|      move.l 18d44 <cameraZoom>,d0
    cda6:	|      move.l d0,-(sp)
    cda8:	|      move.l d1,-(sp)
    cdaa:	|      jsr 14346 <__divsf3>
    cdb0:	|      addq.l #8,sp
    cdb2:	|      move.l d0,-(sp)
    cdb4:	|      jsr 14432 <__fixsfsi>
    cdba:	|      addq.l #4,sp
    cdbc:	|      move.l d0,19348 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    cdc2:	|      move.l 1934c <input+0xe>,d0
    cdc8:	|      move.l d0,-(sp)
    cdca:	|      jsr 1449a <__floatsisf>
    cdd0:	|      addq.l #4,sp
    cdd2:	|      move.l d0,d1
    cdd4:	|      move.l 18d44 <cameraZoom>,d0
    cdda:	|      move.l d0,-(sp)
    cddc:	|      move.l d1,-(sp)
    cdde:	|      jsr 14346 <__divsf3>
    cde4:	|      addq.l #8,sp
    cde6:	|      move.l d0,-(sp)
    cde8:	|      jsr 14432 <__fixsfsi>
    cdee:	|      addq.l #4,sp
    cdf0:	|      move.l d0,1934c <input+0xe>

	return BR_CONTINUE;
    cdf6:	|      moveq #2,d0
}
    cdf8:	\----> move.l (sp)+,d2
    cdfa:	       addq.l #4,sp
    cdfc:	       rts

0000cdfe <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    cdfe:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ce00:	             tst.l 8(sp)
    ce04:	         /-- bne.s ce18 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ce06:	         |   pea 1638f <custom.c.49191367+0x1663>
    ce0c:	         |   jsr 141e2 <KPrintF>
    ce12:	         |   addq.l #4,sp
		return BR_ERROR;
    ce14:	         |   moveq #1,d0
    ce16:	/--------|-- bra.s ce78 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ce18:	|        \-> jsr c58 <rand>
    ce1e:	|            move.l d0,d1
    ce20:	|            move.l 8(sp),d0
    ce24:	|            move.l d0,-(sp)
    ce26:	|            move.l d1,-(sp)
    ce28:	|            jsr 14af6 <__umodsi3>
    ce2e:	|            addq.l #8,sp
    ce30:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ce32:	|     /----- bra.s ce66 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ce34:	|  /--|----> move.l (sp),d0
    ce36:	|  |  |      cmp.l 8(sp),d0
    ce3a:	|  |  |  /-- bne.s ce56 <builtIn_pickOne+0x58>
    ce3c:	|  |  |  |   moveq #28,d0
    ce3e:	|  |  |  |   add.l 12(sp),d0
    ce42:	|  |  |  |   movea.l 12(sp),a0
    ce46:	|  |  |  |   move.l 24(a0),d1
    ce4a:	|  |  |  |   move.l d0,-(sp)
    ce4c:	|  |  |  |   move.l d1,-(sp)
    ce4e:	|  |  |  |   jsr 12654 <copyVariable>
    ce54:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ce56:	|  |  |  \-> moveq #24,d0
    ce58:	|  |  |      add.l 12(sp),d0
    ce5c:	|  |  |      move.l d0,-(sp)
    ce5e:	|  |  |      jsr 12b1e <trimStack>
    ce64:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ce66:	|  |  \----> move.l 8(sp),d0
    ce6a:	|  |         move.l d0,d1
    ce6c:	|  |         subq.l #1,d1
    ce6e:	|  |         move.l d1,8(sp)
    ce72:	|  |         tst.l d0
    ce74:	|  \-------- bne.s ce34 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    ce76:	|            moveq #2,d0
}
    ce78:	\----------> addq.l #4,sp
    ce7a:	             rts

0000ce7c <builtIn_substring>:

builtIn(substring)
{
    ce7c:	       lea -40(sp),sp
    ce80:	       move.l a6,-(sp)
    ce82:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ce84:	       movea.l 56(sp),a0
    ce88:	       move.l 24(a0),d0
    ce8c:	       move.l d0,-(sp)
    ce8e:	       pea 1 <_start+0x1>
    ce92:	       lea 16(sp),a0
    ce96:	       move.l a0,-(sp)
    ce98:	       jsr 1219a <getValueType>
    ce9e:	       lea 12(sp),sp
    cea2:	       tst.w d0
    cea4:	   /-- bne.s ceac <builtIn_substring+0x30>
    cea6:	   |   moveq #1,d0
    cea8:	/--|-- bra.w d024 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ceac:	|  \-> moveq #24,d0
    ceae:	|      add.l 56(sp),d0
    ceb2:	|      move.l d0,-(sp)
    ceb4:	|      jsr 12b1e <trimStack>
    ceba:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    cebc:	|      movea.l 56(sp),a0
    cec0:	|      move.l 24(a0),d0
    cec4:	|      move.l d0,-(sp)
    cec6:	|      pea 1 <_start+0x1>
    ceca:	|      lea 20(sp),a0
    cece:	|      move.l a0,-(sp)
    ced0:	|      jsr 1219a <getValueType>
    ced6:	|      lea 12(sp),sp
    ceda:	|      tst.w d0
    cedc:	|  /-- bne.s cee4 <builtIn_substring+0x68>
    cede:	|  |   moveq #1,d0
    cee0:	+--|-- bra.w d024 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    cee4:	|  \-> moveq #24,d0
    cee6:	|      add.l 56(sp),d0
    ceea:	|      move.l d0,-(sp)
    ceec:	|      jsr 12b1e <trimStack>
    cef2:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    cef4:	|      movea.l 56(sp),a0
    cef8:	|      move.l 24(a0),d0
    cefc:	|      move.l d0,-(sp)
    cefe:	|      jsr 12770 <getTextFromAnyVar>
    cf04:	|      addq.l #4,sp
    cf06:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    cf0a:	|      moveq #24,d0
    cf0c:	|      add.l 56(sp),d0
    cf10:	|      move.l d0,-(sp)
    cf12:	|      jsr 12b1e <trimStack>
    cf18:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    cf1a:	|      move.l 44(sp),-(sp)
    cf1e:	|      jsr 11686 <strlen>
    cf24:	|      addq.l #4,sp
    cf26:	|      move.l d0,d1
    cf28:	|      move.l 12(sp),d0
    cf2c:	|      movea.l d0,a0
    cf2e:	|      move.l 8(sp),d0
    cf32:	|      add.l a0,d0
    cf34:	|      cmp.l d1,d0
    cf36:	|  /-- bls.s cf6c <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    cf38:	|  |   move.l 44(sp),-(sp)
    cf3c:	|  |   jsr 11686 <strlen>
    cf42:	|  |   addq.l #4,sp
    cf44:	|  |   move.l d0,d1
    cf46:	|  |   move.l 12(sp),d0
    cf4a:	|  |   sub.l d0,d1
    cf4c:	|  |   move.l d1,d0
    cf4e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    cf52:	|  |   move.l 44(sp),-(sp)
    cf56:	|  |   jsr 11686 <strlen>
    cf5c:	|  |   addq.l #4,sp
    cf5e:	|  |   move.l d0,d1
    cf60:	|  |   move.l 12(sp),d0
    cf64:	|  |   cmp.l d1,d0
    cf66:	|  +-- bls.s cf6c <builtIn_substring+0xf0>
            start = 0;
    cf68:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    cf6c:	|  \-> move.l 8(sp),d0
    cf70:	|  /-- bpl.s cf76 <builtIn_substring+0xfa>
        length = 0;
    cf72:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    cf76:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    cf7c:	|      move.l 12(sp),d1
    cf80:	|      move.l 8(sp),d0
    cf84:	|      move.l d1,d2
    cf86:	|      add.l d0,d2
    cf88:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    cf8c:	|      move.l 36(sp),d0
    cf90:	|      sub.l 40(sp),d0
    cf94:	|      addq.l #1,d0
    cf96:	|      move.l d0,32(sp)
    cf9a:	|      clr.l 28(sp)
    cf9e:	|      move.l 1938c <SysBase>,d0
    cfa4:	|      movea.l d0,a6
    cfa6:	|      move.l 32(sp),d0
    cfaa:	|      move.l 28(sp),d1
    cfae:	|      jsr -684(a6)
    cfb2:	|      move.l d0,24(sp)
    cfb6:	|      move.l 24(sp),d0
    cfba:	|      move.l d0,20(sp)
    if (!newString) {
    cfbe:	|  /-- bne.s cfc4 <builtIn_substring+0x148>
        return BR_ERROR;
    cfc0:	|  |   moveq #1,d0
    cfc2:	+--|-- bra.s d024 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    cfc4:	|  \-> move.l 36(sp),d0
    cfc8:	|      sub.l 40(sp),d0
    cfcc:	|      move.l d0,d1
    cfce:	|      move.l 40(sp),d0
    cfd2:	|      add.l 44(sp),d0
    cfd6:	|      move.l d1,-(sp)
    cfd8:	|      move.l d0,-(sp)
    cfda:	|      move.l 28(sp),-(sp)
    cfde:	|      jsr 14196 <memcpy>
    cfe4:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    cfe8:	|      move.l 36(sp),d0
    cfec:	|      sub.l 40(sp),d0
    cff0:	|      movea.l 20(sp),a0
    cff4:	|      adda.l d0,a0
    cff6:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    cff8:	|      moveq #28,d0
    cffa:	|      add.l 56(sp),d0
    cffe:	|      move.l 20(sp),-(sp)
    d002:	|      move.l d0,-(sp)
    d004:	|      jsr 123bc <makeTextVar>
    d00a:	|      addq.l #8,sp
    FreeVec(newString);
    d00c:	|      move.l 20(sp),16(sp)
    d012:	|      move.l 1938c <SysBase>,d0
    d018:	|      movea.l d0,a6
    d01a:	|      movea.l 16(sp),a1
    d01e:	|      jsr -690(a6)
    return BR_CONTINUE;
    d022:	|      moveq #2,d0
}
    d024:	\----> move.l (sp)+,d2
    d026:	       movea.l (sp)+,a6
    d028:	       lea 40(sp),sp
    d02c:	       rts

0000d02e <builtIn_stringLength>:

builtIn(stringLength)
{
    d02e:	subq.l #8,sp
    d030:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d032:	movea.l 20(sp),a0
    d036:	move.l 24(a0),d0
    d03a:	move.l d0,-(sp)
    d03c:	jsr 12770 <getTextFromAnyVar>
    d042:	addq.l #4,sp
    d044:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    d048:	moveq #24,d0
    d04a:	add.l 20(sp),d0
    d04e:	move.l d0,-(sp)
    d050:	jsr 12b1e <trimStack>
    d056:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    d058:	move.l 8(sp),-(sp)
    d05c:	jsr 11686 <strlen>
    d062:	addq.l #4,sp
    d064:	move.l d0,d1
    d066:	moveq #28,d0
    d068:	add.l 20(sp),d0
    d06c:	move.l d1,-(sp)
    d06e:	pea 1 <_start+0x1>
    d072:	move.l d0,-(sp)
    d074:	jsr 12a8c <setVariable>
    d07a:	lea 12(sp),sp
	FreeVec(newText);
    d07e:	move.l 8(sp),4(sp)
    d084:	move.l 1938c <SysBase>,d0
    d08a:	movea.l d0,a6
    d08c:	movea.l 4(sp),a1
    d090:	jsr -690(a6)
	return BR_CONTINUE;
    d094:	moveq #2,d0
}
    d096:	movea.l (sp)+,a6
    d098:	addq.l #8,sp
    d09a:	rts

0000d09c <builtIn_newStack>:

builtIn(newStack)
{
    d09c:	             lea -12(sp),sp
    d0a0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    d0a2:	             moveq #28,d0
    d0a4:	             add.l 24(sp),d0
    d0a8:	             move.l d0,-(sp)
    d0aa:	             jsr 123e8 <unlinkVar>
    d0b0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    d0b2:	             movea.l 24(sp),a0
    d0b6:	             moveq #6,d0
    d0b8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    d0bc:	             moveq #12,d1
    d0be:	             move.l d1,12(sp)
    d0c2:	             clr.l 8(sp)
    d0c6:	             move.l 1938c <SysBase>,d0
    d0cc:	             movea.l d0,a6
    d0ce:	             move.l 12(sp),d0
    d0d2:	             move.l 8(sp),d1
    d0d6:	             jsr -684(a6)
    d0da:	             move.l d0,4(sp)
    d0de:	             move.l 4(sp),d0
    d0e2:	             movea.l 24(sp),a0
    d0e6:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    d0ea:	             movea.l 24(sp),a0
    d0ee:	             move.l 32(a0),d0
    d0f2:	         /-- bne.s d0fa <builtIn_newStack+0x5e>
    d0f4:	         |   moveq #1,d0
    d0f6:	/--------|-- bra.w d18c <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    d0fa:	|        \-> movea.l 24(sp),a0
    d0fe:	|            movea.l 32(a0),a0
    d102:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    d104:	|            movea.l 24(sp),a0
    d108:	|            movea.l 32(a0),a0
    d10c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    d110:	|            movea.l 24(sp),a0
    d114:	|            movea.l 32(a0),a0
    d118:	|            moveq #1,d0
    d11a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    d11e:	|     /----- bra.s d17a <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    d120:	|  /--|----> movea.l 24(sp),a0
    d124:	|  |  |      move.l 32(a0),d0
    d128:	|  |  |      move.l d0,d1
    d12a:	|  |  |      movea.l 24(sp),a0
    d12e:	|  |  |      move.l 24(a0),d0
    d132:	|  |  |      move.l d1,-(sp)
    d134:	|  |  |      move.l d0,-(sp)
    d136:	|  |  |      jsr 119d6 <addVarToStack>
    d13c:	|  |  |      addq.l #8,sp
    d13e:	|  |  |      tst.w d0
    d140:	|  |  |  /-- bne.s d146 <builtIn_newStack+0xaa>
    d142:	|  |  |  |   moveq #1,d0
    d144:	+--|--|--|-- bra.s d18c <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    d146:	|  |  |  \-> movea.l 24(sp),a0
    d14a:	|  |  |      movea.l 32(a0),a0
    d14e:	|  |  |      move.l 4(a0),d0
    d152:	|  |  |  /-- bne.s d16a <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    d154:	|  |  |  |   movea.l 24(sp),a0
    d158:	|  |  |  |   movea.l 32(a0),a1
    d15c:	|  |  |  |   movea.l 24(sp),a0
    d160:	|  |  |  |   movea.l 32(a0),a0
    d164:	|  |  |  |   move.l (a1),d0
    d166:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    d16a:	|  |  |  \-> moveq #24,d0
    d16c:	|  |  |      add.l 24(sp),d0
    d170:	|  |  |      move.l d0,-(sp)
    d172:	|  |  |      jsr 12b1e <trimStack>
    d178:	|  |  |      addq.l #4,sp
    while (numParams--) {
    d17a:	|  |  \----> move.l 20(sp),d0
    d17e:	|  |         move.l d0,d1
    d180:	|  |         subq.l #1,d1
    d182:	|  |         move.l d1,20(sp)
    d186:	|  |         tst.l d0
    d188:	|  \-------- bne.s d120 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    d18a:	|            moveq #2,d0
}
    d18c:	\----------> movea.l (sp)+,a6
    d18e:	             lea 12(sp),sp
    d192:	             rts

0000d194 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    d194:	          movea.l 8(sp),a0
    d198:	          movea.l 24(a0),a0
    d19c:	          move.l (a0),d0
    d19e:	          moveq #6,d1
    d1a0:	          cmp.l d0,d1
    d1a2:	      /-- beq.s d1be <builtIn_stackSize+0x2a>
    d1a4:	      |   moveq #10,d1
    d1a6:	      |   cmp.l d0,d1
    d1a8:	   /--|-- beq.s d202 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    d1aa:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    d1ac:	   |  |   pea 163c2 <custom.c.49191367+0x1696>
    d1b2:	   |  |   jsr 141e2 <KPrintF>
    d1b8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    d1ba:	   |  |   moveq #1,d0
    d1bc:	/--|--|-- bra.s d23c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    d1be:	|  |  \-> movea.l 8(sp),a0
    d1c2:	|  |      movea.l 24(a0),a0
    d1c6:	|  |      move.l 4(a0),d0
    d1ca:	|  |      move.l d0,-(sp)
    d1cc:	|  |      jsr 12afa <stackSize>
    d1d2:	|  |      addq.l #4,sp
    d1d4:	|  |      move.l d0,d1
    d1d6:	|  |      moveq #28,d0
    d1d8:	|  |      add.l 8(sp),d0
    d1dc:	|  |      move.l d1,-(sp)
    d1de:	|  |      pea 1 <_start+0x1>
    d1e2:	|  |      move.l d0,-(sp)
    d1e4:	|  |      jsr 12a8c <setVariable>
    d1ea:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    d1ee:	|  |      moveq #24,d0
    d1f0:	|  |      add.l 8(sp),d0
    d1f4:	|  |      move.l d0,-(sp)
    d1f6:	|  |      jsr 12b1e <trimStack>
    d1fc:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    d1fe:	|  |      moveq #2,d0
    d200:	+--|----- bra.s d23c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    d202:	|  \----> movea.l 8(sp),a0
    d206:	|         movea.l 24(a0),a0
    d20a:	|         movea.l 4(a0),a0
    d20e:	|         move.l 4(a0),d1
    d212:	|         moveq #28,d0
    d214:	|         add.l 8(sp),d0
    d218:	|         move.l d1,-(sp)
    d21a:	|         pea 1 <_start+0x1>
    d21e:	|         move.l d0,-(sp)
    d220:	|         jsr 12a8c <setVariable>
    d226:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    d22a:	|         moveq #24,d0
    d22c:	|         add.l 8(sp),d0
    d230:	|         move.l d0,-(sp)
    d232:	|         jsr 12b1e <trimStack>
    d238:	|         addq.l #4,sp
			return BR_CONTINUE;
    d23a:	|         moveq #2,d0
}
    d23c:	\-------> rts

0000d23e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d23e:	       movea.l 8(sp),a0
    d242:	       movea.l 24(a0),a0
    d246:	       move.l (a0),d0
    d248:	       moveq #6,d1
    d24a:	       cmp.l d0,d1
    d24c:	   /-- beq.s d260 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    d24e:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d254:	   |   jsr 141e2 <KPrintF>
    d25a:	   |   addq.l #4,sp
		return BR_ERROR;
    d25c:	   |   moveq #1,d0
    d25e:	/--|-- bra.s d294 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    d260:	|  \-> moveq #28,d0
    d262:	|      add.l 8(sp),d0
    d266:	|      movea.l 8(sp),a0
    d26a:	|      move.l 24(a0),d1
    d26e:	|      move.l d0,-(sp)
    d270:	|      move.l d1,-(sp)
    d272:	|      jsr 11ca0 <copyStack>
    d278:	|      addq.l #8,sp
    d27a:	|      tst.w d0
    d27c:	|  /-- bne.s d282 <builtIn_copyStack+0x44>
    d27e:	|  |   moveq #1,d0
    d280:	+--|-- bra.s d294 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    d282:	|  \-> moveq #24,d0
    d284:	|      add.l 8(sp),d0
    d288:	|      move.l d0,-(sp)
    d28a:	|      jsr 12b1e <trimStack>
    d290:	|      addq.l #4,sp
	return BR_CONTINUE;
    d292:	|      moveq #2,d0
}
    d294:	\----> rts

0000d296 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d296:	       movea.l 8(sp),a0
    d29a:	       movea.l 24(a0),a0
    d29e:	       movea.l 8(a0),a0
    d2a2:	       move.l (a0),d0
    d2a4:	       moveq #6,d1
    d2a6:	       cmp.l d0,d1
    d2a8:	   /-- beq.s d2be <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    d2aa:	   |   pea 16404 <custom.c.49191367+0x16d8>
    d2b0:	   |   jsr 141e2 <KPrintF>
    d2b6:	   |   addq.l #4,sp
		return BR_ERROR;
    d2b8:	   |   moveq #1,d0
    d2ba:	/--|-- bra.w d34c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    d2be:	|  \-> movea.l 8(sp),a0
    d2c2:	|      movea.l 24(a0),a0
    d2c6:	|      movea.l 8(a0),a0
    d2ca:	|      move.l 4(a0),d0
    d2ce:	|      move.l d0,d1
    d2d0:	|      movea.l 8(sp),a0
    d2d4:	|      move.l 24(a0),d0
    d2d8:	|      move.l d1,-(sp)
    d2da:	|      move.l d0,-(sp)
    d2dc:	|      jsr 119d6 <addVarToStack>
    d2e2:	|      addq.l #8,sp
    d2e4:	|      tst.w d0
    d2e6:	|  /-- bne.s d2ec <builtIn_pushToStack+0x56>
		return BR_ERROR;
    d2e8:	|  |   moveq #1,d0
    d2ea:	+--|-- bra.s d34c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    d2ec:	|  \-> movea.l 8(sp),a0
    d2f0:	|      movea.l 24(a0),a0
    d2f4:	|      movea.l 8(a0),a0
    d2f8:	|      movea.l 4(a0),a0
    d2fc:	|      movea.l (a0),a0
    d2fe:	|      move.l 8(a0),d0
    d302:	|  /-- bne.s d32a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    d304:	|  |   movea.l 8(sp),a0
    d308:	|  |   movea.l 24(a0),a0
    d30c:	|  |   movea.l 8(a0),a0
    d310:	|  |   movea.l 4(a0),a1
    d314:	|  |   movea.l 8(sp),a0
    d318:	|  |   movea.l 24(a0),a0
    d31c:	|  |   movea.l 8(a0),a0
    d320:	|  |   movea.l 4(a0),a0
    d324:	|  |   move.l (a1),d0
    d326:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    d32a:	|  \-> moveq #24,d0
    d32c:	|      add.l 8(sp),d0
    d330:	|      move.l d0,-(sp)
    d332:	|      jsr 12b1e <trimStack>
    d338:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d33a:	|      moveq #24,d0
    d33c:	|      add.l 8(sp),d0
    d340:	|      move.l d0,-(sp)
    d342:	|      jsr 12b1e <trimStack>
    d348:	|      addq.l #4,sp
	return BR_CONTINUE;
    d34a:	|      moveq #2,d0
}
    d34c:	\----> rts

0000d34e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d34e:	             movea.l 8(sp),a0
    d352:	             movea.l 24(a0),a0
    d356:	             movea.l 8(a0),a0
    d35a:	             move.l (a0),d0
    d35c:	             moveq #6,d1
    d35e:	             cmp.l d0,d1
    d360:	         /-- beq.s d376 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    d362:	         |   pea 16404 <custom.c.49191367+0x16d8>
    d368:	         |   jsr 141e2 <KPrintF>
    d36e:	         |   addq.l #4,sp
		return BR_ERROR;
    d370:	         |   moveq #1,d0
    d372:	/--------|-- bra.w d464 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    d376:	|        \-> movea.l 8(sp),a0
    d37a:	|            movea.l 24(a0),a0
    d37e:	|            movea.l 8(a0),a0
    d382:	|            movea.l 4(a0),a0
    d386:	|            move.l (a0),d0
    d388:	|     /----- bne.s d3e2 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    d38a:	|     |      movea.l 8(sp),a0
    d38e:	|     |      movea.l 24(a0),a0
    d392:	|     |      movea.l 8(a0),a0
    d396:	|     |      move.l 4(a0),d0
    d39a:	|     |      move.l d0,d1
    d39c:	|     |      movea.l 8(sp),a0
    d3a0:	|     |      move.l 24(a0),d0
    d3a4:	|     |      move.l d1,-(sp)
    d3a6:	|     |      move.l d0,-(sp)
    d3a8:	|     |      jsr 119d6 <addVarToStack>
    d3ae:	|     |      addq.l #8,sp
    d3b0:	|     |      tst.w d0
    d3b2:	|     |  /-- bne.s d3ba <builtIn_enqueue+0x6c>
			return BR_ERROR;
    d3b4:	|     |  |   moveq #1,d0
    d3b6:	+-----|--|-- bra.w d464 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    d3ba:	|     |  \-> movea.l 8(sp),a0
    d3be:	|     |      movea.l 24(a0),a0
    d3c2:	|     |      movea.l 8(a0),a0
    d3c6:	|     |      movea.l 4(a0),a1
    d3ca:	|     |      movea.l 8(sp),a0
    d3ce:	|     |      movea.l 24(a0),a0
    d3d2:	|     |      movea.l 8(a0),a0
    d3d6:	|     |      movea.l 4(a0),a0
    d3da:	|     |      move.l (a1),d0
    d3dc:	|     |      move.l d0,4(a0)
    d3e0:	|  /--|----- bra.s d442 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    d3e2:	|  |  \----> movea.l 8(sp),a0
    d3e6:	|  |         movea.l 24(a0),a0
    d3ea:	|  |         movea.l 8(a0),a0
    d3ee:	|  |         movea.l 4(a0),a0
    d3f2:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    d3f6:	|  |         move.l d0,d1
    d3f8:	|  |         addq.l #8,d1
    d3fa:	|  |         movea.l 8(sp),a0
    d3fe:	|  |         move.l 24(a0),d0
    d402:	|  |         move.l d1,-(sp)
    d404:	|  |         move.l d0,-(sp)
    d406:	|  |         jsr 119d6 <addVarToStack>
    d40c:	|  |         addq.l #8,sp
    d40e:	|  |         tst.w d0
    d410:	|  |     /-- bne.s d416 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    d412:	|  |     |   moveq #1,d0
    d414:	+--|-----|-- bra.s d464 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    d416:	|  |     \-> movea.l 8(sp),a0
    d41a:	|  |         movea.l 24(a0),a0
    d41e:	|  |         movea.l 8(a0),a0
    d422:	|  |         movea.l 4(a0),a0
    d426:	|  |         movea.l 4(a0),a1
    d42a:	|  |         movea.l 8(sp),a0
    d42e:	|  |         movea.l 24(a0),a0
    d432:	|  |         movea.l 8(a0),a0
    d436:	|  |         movea.l 4(a0),a0
    d43a:	|  |         move.l 8(a1),d0
    d43e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    d442:	|  \-------> moveq #24,d0
    d444:	|            add.l 8(sp),d0
    d448:	|            move.l d0,-(sp)
    d44a:	|            jsr 12b1e <trimStack>
    d450:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    d452:	|            moveq #24,d0
    d454:	|            add.l 8(sp),d0
    d458:	|            move.l d0,-(sp)
    d45a:	|            jsr 12b1e <trimStack>
    d460:	|            addq.l #4,sp
	return BR_CONTINUE;
    d462:	|            moveq #2,d0
}
    d464:	\----------> rts

0000d466 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    d466:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d468:	       movea.l 12(sp),a0
    d46c:	       movea.l 24(a0),a0
    d470:	       movea.l 8(a0),a0
    d474:	       move.l (a0),d0
    d476:	       moveq #6,d1
    d478:	       cmp.l d0,d1
    d47a:	   /-- beq.s d490 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d47c:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d482:	   |   jsr 141e2 <KPrintF>
    d488:	   |   addq.l #4,sp
		return BR_ERROR;
    d48a:	   |   moveq #1,d0
    d48c:	/--|-- bra.w d526 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    d490:	|  \-> movea.l 12(sp),a0
    d494:	|      movea.l 24(a0),a0
    d498:	|      movea.l 8(a0),a0
    d49c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d4a0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d4a2:	|      movea.l 12(sp),a0
    d4a6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d4aa:	|      clr.l -(sp)
    d4ac:	|      move.l d1,-(sp)
    d4ae:	|      move.l d0,-(sp)
    d4b0:	|      jsr 11d76 <deleteVarFromStack>
    d4b6:	|      lea 12(sp),sp
    d4ba:	|      move.l d0,d1
    d4bc:	|      moveq #28,d0
    d4be:	|      add.l 12(sp),d0
    d4c2:	|      move.l d1,-(sp)
    d4c4:	|      pea 1 <_start+0x1>
    d4c8:	|      move.l d0,-(sp)
    d4ca:	|      jsr 12a8c <setVariable>
    d4d0:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d4d4:	|      movea.l 12(sp),a0
    d4d8:	|      movea.l 24(a0),a0
    d4dc:	|      movea.l 8(a0),a0
    d4e0:	|      movea.l 4(a0),a0
    d4e4:	|      move.l (a0),d0
    d4e6:	|      movea.l 12(sp),a0
    d4ea:	|      movea.l 24(a0),a0
    d4ee:	|      movea.l 8(a0),a0
    d4f2:	|      movea.l 4(a0),a2
    d4f6:	|      move.l d0,-(sp)
    d4f8:	|      jsr 12ad6 <stackFindLast>
    d4fe:	|      addq.l #4,sp
    d500:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d504:	|      moveq #24,d0
    d506:	|      add.l 12(sp),d0
    d50a:	|      move.l d0,-(sp)
    d50c:	|      jsr 12b1e <trimStack>
    d512:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d514:	|      moveq #24,d0
    d516:	|      add.l 12(sp),d0
    d51a:	|      move.l d0,-(sp)
    d51c:	|      jsr 12b1e <trimStack>
    d522:	|      addq.l #4,sp
	return BR_CONTINUE;
    d524:	|      moveq #2,d0
}
    d526:	\----> movea.l (sp)+,a2
    d528:	       rts

0000d52a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    d52a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d52c:	       movea.l 12(sp),a0
    d530:	       movea.l 24(a0),a0
    d534:	       movea.l 8(a0),a0
    d538:	       move.l (a0),d0
    d53a:	       moveq #6,d1
    d53c:	       cmp.l d0,d1
    d53e:	   /-- beq.s d554 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d540:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d546:	   |   jsr 141e2 <KPrintF>
    d54c:	   |   addq.l #4,sp
		return BR_ERROR;
    d54e:	   |   moveq #1,d0
    d550:	/--|-- bra.w d5ec <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    d554:	|  \-> movea.l 12(sp),a0
    d558:	|      movea.l 24(a0),a0
    d55c:	|      movea.l 8(a0),a0
    d560:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d564:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d566:	|      movea.l 12(sp),a0
    d56a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d56e:	|      pea 1 <_start+0x1>
    d572:	|      move.l d1,-(sp)
    d574:	|      move.l d0,-(sp)
    d576:	|      jsr 11d76 <deleteVarFromStack>
    d57c:	|      lea 12(sp),sp
    d580:	|      move.l d0,d1
    d582:	|      moveq #28,d0
    d584:	|      add.l 12(sp),d0
    d588:	|      move.l d1,-(sp)
    d58a:	|      pea 1 <_start+0x1>
    d58e:	|      move.l d0,-(sp)
    d590:	|      jsr 12a8c <setVariable>
    d596:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d59a:	|      movea.l 12(sp),a0
    d59e:	|      movea.l 24(a0),a0
    d5a2:	|      movea.l 8(a0),a0
    d5a6:	|      movea.l 4(a0),a0
    d5aa:	|      move.l (a0),d0
    d5ac:	|      movea.l 12(sp),a0
    d5b0:	|      movea.l 24(a0),a0
    d5b4:	|      movea.l 8(a0),a0
    d5b8:	|      movea.l 4(a0),a2
    d5bc:	|      move.l d0,-(sp)
    d5be:	|      jsr 12ad6 <stackFindLast>
    d5c4:	|      addq.l #4,sp
    d5c6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d5ca:	|      moveq #24,d0
    d5cc:	|      add.l 12(sp),d0
    d5d0:	|      move.l d0,-(sp)
    d5d2:	|      jsr 12b1e <trimStack>
    d5d8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d5da:	|      moveq #24,d0
    d5dc:	|      add.l 12(sp),d0
    d5e0:	|      move.l d0,-(sp)
    d5e2:	|      jsr 12b1e <trimStack>
    d5e8:	|      addq.l #4,sp
	return BR_CONTINUE;
    d5ea:	|      moveq #2,d0
}
    d5ec:	\----> movea.l (sp)+,a2
    d5ee:	       rts

0000d5f0 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d5f0:	       movea.l 8(sp),a0
    d5f4:	       movea.l 24(a0),a0
    d5f8:	       move.l (a0),d0
    d5fa:	       moveq #6,d1
    d5fc:	       cmp.l d0,d1
    d5fe:	   /-- beq.s d612 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    d600:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d606:	   |   jsr 141e2 <KPrintF>
    d60c:	   |   addq.l #4,sp
		return BR_ERROR;
    d60e:	   |   moveq #1,d0
    d610:	/--|-- bra.s d67c <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d612:	|  \-> movea.l 8(sp),a0
    d616:	|      movea.l 24(a0),a0
    d61a:	|      movea.l 4(a0),a0
    d61e:	|      move.l (a0),d0
    d620:	|  /-- bne.s d634 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    d622:	|  |   pea 1641c <custom.c.49191367+0x16f0>
    d628:	|  |   jsr 141e2 <KPrintF>
    d62e:	|  |   addq.l #4,sp
		return BR_ERROR;
    d630:	|  |   moveq #1,d0
    d632:	+--|-- bra.s d67c <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d634:	|  \-> moveq #28,d0
    d636:	|      add.l 8(sp),d0
    d63a:	|      movea.l 8(sp),a0
    d63e:	|      movea.l 24(a0),a0
    d642:	|      movea.l 4(a0),a0
    d646:	|      move.l (a0),d1
    d648:	|      move.l d0,-(sp)
    d64a:	|      move.l d1,-(sp)
    d64c:	|      jsr 12654 <copyVariable>
    d652:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    d654:	|      movea.l 8(sp),a0
    d658:	|      movea.l 24(a0),a0
    d65c:	|      move.l 4(a0),d0
    d660:	|      move.l d0,-(sp)
    d662:	|      jsr 12b1e <trimStack>
    d668:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d66a:	|      moveq #24,d0
    d66c:	|      add.l 8(sp),d0
    d670:	|      move.l d0,-(sp)
    d672:	|      jsr 12b1e <trimStack>
    d678:	|      addq.l #4,sp
	return BR_CONTINUE;
    d67a:	|      moveq #2,d0
}
    d67c:	\----> rts

0000d67e <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d67e:	       movea.l 8(sp),a0
    d682:	       movea.l 24(a0),a0
    d686:	       move.l (a0),d0
    d688:	       moveq #6,d1
    d68a:	       cmp.l d0,d1
    d68c:	   /-- beq.s d6a0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    d68e:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d694:	   |   jsr 141e2 <KPrintF>
    d69a:	   |   addq.l #4,sp
		return BR_ERROR;
    d69c:	   |   moveq #1,d0
    d69e:	/--|-- bra.s d6f4 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d6a0:	|  \-> movea.l 8(sp),a0
    d6a4:	|      movea.l 24(a0),a0
    d6a8:	|      movea.l 4(a0),a0
    d6ac:	|      move.l (a0),d0
    d6ae:	|  /-- bne.s d6c2 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    d6b0:	|  |   pea 1641c <custom.c.49191367+0x16f0>
    d6b6:	|  |   jsr 141e2 <KPrintF>
    d6bc:	|  |   addq.l #4,sp
		return BR_ERROR;
    d6be:	|  |   moveq #1,d0
    d6c0:	+--|-- bra.s d6f4 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d6c2:	|  \-> moveq #28,d0
    d6c4:	|      add.l 8(sp),d0
    d6c8:	|      movea.l 8(sp),a0
    d6cc:	|      movea.l 24(a0),a0
    d6d0:	|      movea.l 4(a0),a0
    d6d4:	|      move.l (a0),d1
    d6d6:	|      move.l d0,-(sp)
    d6d8:	|      move.l d1,-(sp)
    d6da:	|      jsr 12654 <copyVariable>
    d6e0:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d6e2:	|      moveq #24,d0
    d6e4:	|      add.l 8(sp),d0
    d6e8:	|      move.l d0,-(sp)
    d6ea:	|      jsr 12b1e <trimStack>
    d6f0:	|      addq.l #4,sp
	return BR_CONTINUE;
    d6f2:	|      moveq #2,d0
}
    d6f4:	\----> rts

0000d6f6 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d6f6:	       movea.l 8(sp),a0
    d6fa:	       movea.l 24(a0),a0
    d6fe:	       move.l (a0),d0
    d700:	       moveq #6,d1
    d702:	       cmp.l d0,d1
    d704:	   /-- beq.s d718 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    d706:	   |   pea 163eb <custom.c.49191367+0x16bf>
    d70c:	   |   jsr 141e2 <KPrintF>
    d712:	   |   addq.l #4,sp
		return BR_ERROR;
    d714:	   |   moveq #1,d0
    d716:	/--|-- bra.s d76e <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d718:	|  \-> movea.l 8(sp),a0
    d71c:	|      movea.l 24(a0),a0
    d720:	|      movea.l 4(a0),a0
    d724:	|      move.l (a0),d0
    d726:	|  /-- bne.s d73a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    d728:	|  |   pea 1641c <custom.c.49191367+0x16f0>
    d72e:	|  |   jsr 141e2 <KPrintF>
    d734:	|  |   addq.l #4,sp
		return BR_ERROR;
    d736:	|  |   moveq #1,d0
    d738:	+--|-- bra.s d76e <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    d73a:	|  \-> moveq #28,d0
    d73c:	|      add.l 8(sp),d0
    d740:	|      movea.l 8(sp),a0
    d744:	|      movea.l 24(a0),a0
    d748:	|      movea.l 4(a0),a0
    d74c:	|      move.l 4(a0),d1
    d750:	|      move.l d0,-(sp)
    d752:	|      move.l d1,-(sp)
    d754:	|      jsr 12654 <copyVariable>
    d75a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d75c:	|      moveq #24,d0
    d75e:	|      add.l 8(sp),d0
    d762:	|      move.l d0,-(sp)
    d764:	|      jsr 12b1e <trimStack>
    d76a:	|      addq.l #4,sp
	return BR_CONTINUE;
    d76c:	|      moveq #2,d0
}
    d76e:	\----> rts

0000d770 <builtIn_random>:

builtIn(random)
{
    d770:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    d772:	       movea.l 12(sp),a0
    d776:	       move.l 24(a0),d0
    d77a:	       move.l d0,-(sp)
    d77c:	       pea 1 <_start+0x1>
    d780:	       move.l sp,d0
    d782:	       addq.l #8,d0
    d784:	       move.l d0,-(sp)
    d786:	       jsr 1219a <getValueType>
    d78c:	       lea 12(sp),sp
    d790:	       tst.w d0
    d792:	   /-- bne.s d798 <builtIn_random+0x28>
		return BR_ERROR;
    d794:	   |   moveq #1,d0
    d796:	/--|-- bra.s d7e2 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    d798:	|  \-> moveq #24,d0
    d79a:	|      add.l 12(sp),d0
    d79e:	|      move.l d0,-(sp)
    d7a0:	|      jsr 12b1e <trimStack>
    d7a6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    d7a8:	|      move.l (sp),d0
    d7aa:	|  /-- bgt.s d7b0 <builtIn_random+0x40>
    d7ac:	|  |   moveq #1,d0
    d7ae:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    d7b0:	|  \-> jsr c58 <rand>
    d7b6:	|      move.l d0,d1
    d7b8:	|      move.l (sp),d0
    d7ba:	|      move.l d0,-(sp)
    d7bc:	|      move.l d1,-(sp)
    d7be:	|      jsr 14af6 <__umodsi3>
    d7c4:	|      addq.l #8,sp
    d7c6:	|      move.l d0,d1
    d7c8:	|      moveq #28,d0
    d7ca:	|      add.l 12(sp),d0
    d7ce:	|      move.l d1,-(sp)
    d7d0:	|      pea 1 <_start+0x1>
    d7d4:	|      move.l d0,-(sp)
    d7d6:	|      jsr 12a8c <setVariable>
    d7dc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d7e0:	|      moveq #2,d0
}
    d7e2:	\----> addq.l #4,sp
    d7e4:	       rts

0000d7e6 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    d7e6:	nop
    d7e8:	rts

0000d7ea <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    d7ea:	moveq #2,d0
}
    d7ec:	rts

0000d7ee <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    d7ee:	moveq #2,d0
}
    d7f0:	rts

0000d7f2 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d7f2:	moveq #2,d0
}
    d7f4:	rts

0000d7f6 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d7f6:	moveq #2,d0
}
    d7f8:	rts

0000d7fa <builtIn_setFont>:


builtIn(setFont)
{
    d7fa:	       lea -16(sp),sp
    d7fe:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d800:	       movea.l 28(sp),a0
    d804:	       move.l 24(a0),d0
    d808:	       move.l d0,-(sp)
    d80a:	       pea 1 <_start+0x1>
    d80e:	       lea 12(sp),a0
    d812:	       move.l a0,-(sp)
    d814:	       jsr 1219a <getValueType>
    d81a:	       lea 12(sp),sp
    d81e:	       tst.w d0
    d820:	   /-- bne.s d828 <builtIn_setFont+0x2e>
    d822:	   |   moveq #1,d0
    d824:	/--|-- bra.w d8d6 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    d828:	|  \-> moveq #24,d0
    d82a:	|      add.l 28(sp),d0
    d82e:	|      move.l d0,-(sp)
    d830:	|      jsr 12b1e <trimStack>
    d836:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d838:	|      movea.l 28(sp),a0
    d83c:	|      move.l 24(a0),d0
    d840:	|      move.l d0,-(sp)
    d842:	|      jsr 12770 <getTextFromAnyVar>
    d848:	|      addq.l #4,sp
    d84a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    d84e:	|  /-- bne.s d856 <builtIn_setFont+0x5c>
    d850:	|  |   moveq #1,d0
    d852:	+--|-- bra.w d8d6 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    d856:	|  \-> moveq #24,d0
    d858:	|      add.l 28(sp),d0
    d85c:	|      move.l d0,-(sp)
    d85e:	|      jsr 12b1e <trimStack>
    d864:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    d866:	|      movea.l 28(sp),a0
    d86a:	|      move.l 24(a0),d0
    d86e:	|      move.l d0,-(sp)
    d870:	|      pea 5 <_start+0x5>
    d874:	|      lea 16(sp),a0
    d878:	|      move.l a0,-(sp)
    d87a:	|      jsr 1219a <getValueType>
    d880:	|      lea 12(sp),sp
    d884:	|      tst.w d0
    d886:	|  /-- bne.s d88c <builtIn_setFont+0x92>
    d888:	|  |   moveq #1,d0
    d88a:	+--|-- bra.s d8d6 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    d88c:	|  \-> moveq #24,d0
    d88e:	|      add.l 28(sp),d0
    d892:	|      move.l d0,-(sp)
    d894:	|      jsr 12b1e <trimStack>
    d89a:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    d89c:	|      move.l 4(sp),d1
    d8a0:	|      move.l 8(sp),d0
    d8a4:	|      move.l d1,-(sp)
    d8a6:	|      move.l 20(sp),-(sp)
    d8aa:	|      move.l d0,-(sp)
    d8ac:	|      jsr 12b92 <loadFont>
    d8b2:	|      lea 12(sp),sp
    d8b6:	|      tst.w d0
    d8b8:	|  /-- bne.s d8be <builtIn_setFont+0xc4>
    d8ba:	|  |   moveq #1,d0
    d8bc:	+--|-- bra.s d8d6 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    d8be:	|  \-> move.l 16(sp),12(sp)
    d8c4:	|      move.l 1938c <SysBase>,d0
    d8ca:	|      movea.l d0,a6
    d8cc:	|      movea.l 12(sp),a1
    d8d0:	|      jsr -690(a6)

    return BR_CONTINUE;
    d8d4:	|      moveq #2,d0
}
    d8d6:	\----> movea.l (sp)+,a6
    d8d8:	       lea 16(sp),sp
    d8dc:	       rts

0000d8de <builtIn_inFont>:

builtIn(inFont)
{
    d8de:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d8e0:	       movea.l 12(sp),a0
    d8e4:	       move.l 24(a0),d0
    d8e8:	       move.l d0,-(sp)
    d8ea:	       jsr 12770 <getTextFromAnyVar>
    d8f0:	       addq.l #4,sp
    d8f2:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    d8f4:	   /-- bne.s d8fa <builtIn_inFont+0x1c>
    d8f6:	   |   moveq #1,d0
    d8f8:	/--|-- bra.s d930 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    d8fa:	|  \-> moveq #24,d0
    d8fc:	|      add.l 12(sp),d0
    d900:	|      move.l d0,-(sp)
    d902:	|      jsr 12b1e <trimStack>
    d908:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    d90a:	|      move.l (sp),-(sp)
    d90c:	|      jsr 12b66 <isInFont>
    d912:	|      addq.l #4,sp
    d914:	|      movea.w d0,a0
    d916:	|      moveq #28,d0
    d918:	|      add.l 12(sp),d0
    d91c:	|      move.l a0,-(sp)
    d91e:	|      pea 1 <_start+0x1>
    d922:	|      move.l d0,-(sp)
    d924:	|      jsr 12a8c <setVariable>
    d92a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d92e:	|      moveq #2,d0
}
    d930:	\----> addq.l #4,sp
    d932:	       rts

0000d934 <builtIn_pasteString>:

builtIn(pasteString)
{
    d934:	       lea -16(sp),sp
    d938:	       move.l a6,-(sp)
    d93a:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d93c:	       movea.l 32(sp),a0
    d940:	       move.l 24(a0),d0
    d944:	       move.l d0,-(sp)
    d946:	       jsr 12770 <getTextFromAnyVar>
    d94c:	       addq.l #4,sp
    d94e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    d952:	       moveq #24,d0
    d954:	       add.l 32(sp),d0
    d958:	       move.l d0,-(sp)
    d95a:	       jsr 12b1e <trimStack>
    d960:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d962:	       movea.l 32(sp),a0
    d966:	       move.l 24(a0),d0
    d96a:	       move.l d0,-(sp)
    d96c:	       pea 1 <_start+0x1>
    d970:	       lea 20(sp),a0
    d974:	       move.l a0,-(sp)
    d976:	       jsr 1219a <getValueType>
    d97c:	       lea 12(sp),sp
    d980:	       tst.w d0
    d982:	   /-- bne.s d98a <builtIn_pasteString+0x56>
    d984:	   |   moveq #1,d0
    d986:	/--|-- bra.w da12 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d98a:	|  \-> moveq #24,d0
    d98c:	|      add.l 32(sp),d0
    d990:	|      move.l d0,-(sp)
    d992:	|      jsr 12b1e <trimStack>
    d998:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d99a:	|      movea.l 32(sp),a0
    d99e:	|      move.l 24(a0),d0
    d9a2:	|      move.l d0,-(sp)
    d9a4:	|      pea 1 <_start+0x1>
    d9a8:	|      lea 16(sp),a0
    d9ac:	|      move.l a0,-(sp)
    d9ae:	|      jsr 1219a <getValueType>
    d9b4:	|      lea 12(sp),sp
    d9b8:	|      tst.w d0
    d9ba:	|  /-- bne.s d9c0 <builtIn_pasteString+0x8c>
    d9bc:	|  |   moveq #1,d0
    d9be:	+--|-- bra.s da12 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d9c0:	|  \-> moveq #24,d0
    d9c2:	|      add.l 32(sp),d0
    d9c6:	|      move.l d0,-(sp)
    d9c8:	|      jsr 12b1e <trimStack>
    d9ce:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    d9d0:	|      move.l 8(sp),d0
    d9d4:	|      cmpi.l #65535,d0
    d9da:	|  /-- bne.s d9fa <builtIn_pasteString+0xc6>
    d9dc:	|  |   move.l 192e0 <winWidth>,d2
    d9e2:	|  |   move.l 20(sp),-(sp)
    d9e6:	|  |   jsr 12b78 <stringWidth>
    d9ec:	|  |   addq.l #4,sp
    d9ee:	|  |   move.l d2,d1
    d9f0:	|  |   sub.l d0,d1
    d9f2:	|  |   move.l d1,d0
    d9f4:	|  |   lsr.l #1,d0
    d9f6:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    d9fa:	|  \-> move.l 20(sp),16(sp)
    da00:	|      move.l 1938c <SysBase>,d0
    da06:	|      movea.l d0,a6
    da08:	|      movea.l 16(sp),a1
    da0c:	|      jsr -690(a6)
    return BR_CONTINUE;
    da10:	|      moveq #2,d0
}
    da12:	\----> move.l (sp)+,d2
    da14:	       movea.l (sp)+,a6
    da16:	       lea 16(sp),sp
    da1a:	       rts

0000da1c <builtIn_anim>:

builtIn(anim)
{
    da1c:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    da20:	       moveq #1,d0
    da22:	       cmp.l 16(sp),d0
    da26:	   /-- blt.s da3c <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    da28:	   |   pea 1642f <custom.c.49191367+0x1703>
    da2e:	   |   jsr 141e2 <KPrintF>
    da34:	   |   addq.l #4,sp
		return BR_ERROR;
    da36:	   |   moveq #1,d0
    da38:	/--|-- bra.w daca <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    da3c:	|  \-> moveq #24,d1
    da3e:	|      add.l 20(sp),d1
    da42:	|      move.l 16(sp),d0
    da46:	|      subq.l #1,d0
    da48:	|      move.l d1,-(sp)
    da4a:	|      move.l d0,-(sp)
    da4c:	|      jsr 7404 <createPersonaAnim>
    da52:	|      addq.l #8,sp
    da54:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    da58:	|      movea.l 20(sp),a0
    da5c:	|      move.l 24(a0),d0
    da60:	|      move.l d0,-(sp)
    da62:	|      pea 5 <_start+0x5>
    da66:	|      lea 8(sp),a0
    da6a:	|      move.l a0,-(sp)
    da6c:	|      jsr 1219a <getValueType>
    da72:	|      lea 12(sp),sp
    da76:	|      tst.w d0
    da78:	|  /-- bne.s da7e <builtIn_anim+0x62>
    da7a:	|  |   moveq #1,d0
    da7c:	+--|-- bra.s daca <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    da7e:	|  \-> moveq #24,d0
    da80:	|      add.l 20(sp),d0
    da84:	|      move.l d0,-(sp)
    da86:	|      jsr 12b1e <trimStack>
    da8c:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    da8e:	|      move.l (sp),d0
    da90:	|      move.l d0,-(sp)
    da92:	|      jsr 9df2 <loadBankForAnim>
    da98:	|      addq.l #4,sp
    da9a:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    da9e:	|  /-- bne.s daa4 <builtIn_anim+0x88>
    daa0:	|  |   moveq #1,d0
    daa2:	+--|-- bra.s daca <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    daa4:	|  \-> move.l 4(sp),-(sp)
    daa8:	|      move.l 12(sp),-(sp)
    daac:	|      jsr 91a6 <setBankFile>
    dab2:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    dab4:	|      moveq #28,d0
    dab6:	|      add.l 20(sp),d0
    daba:	|      move.l 8(sp),-(sp)
    dabe:	|      move.l d0,-(sp)
    dac0:	|      jsr 12a48 <newAnimationVariable>
    dac6:	|      addq.l #8,sp
	return BR_CONTINUE;
    dac8:	|      moveq #2,d0
}
    daca:	\----> lea 12(sp),sp
    dace:	       rts

0000dad0 <builtIn_costume>:

builtIn(costume)
{
    dad0:	          lea -32(sp),sp
    dad4:	          move.l a6,-(sp)
    dad6:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    dad8:	          moveq #8,d0
    dada:	          move.l d0,32(sp)
    dade:	          clr.l 28(sp)
    dae2:	          move.l 1938c <SysBase>,d0
    dae8:	          movea.l d0,a6
    daea:	          move.l 32(sp),d0
    daee:	          move.l 28(sp),d1
    daf2:	          jsr -684(a6)
    daf6:	          move.l d0,24(sp)
    dafa:	          move.l 24(sp),d0
    dafe:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    db02:	      /-- bne.s db0a <builtIn_costume+0x3a>
    db04:	      |   moveq #1,d0
    db06:	/-----|-- bra.w dbf2 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    db0a:	|     \-> move.l 44(sp),d0
    db0e:	|         pea 3 <_start+0x3>
    db12:	|         move.l d0,-(sp)
    db14:	|         jsr 14a9a <__divsi3>
    db1a:	|         addq.l #8,sp
    db1c:	|         movea.l 20(sp),a0
    db20:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    db24:	|         tst.l 44(sp)
    db28:	|     /-- beq.s db3e <builtIn_costume+0x6e>
    db2a:	|     |   movea.l 20(sp),a0
    db2e:	|     |   move.l 4(a0),d1
    db32:	|     |   move.l d1,d0
    db34:	|     |   add.l d0,d0
    db36:	|     |   add.l d1,d0
    db38:	|     |   cmp.l 44(sp),d0
    db3c:	|  /--|-- beq.s db52 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    db3e:	|  |  \-> pea 16469 <custom.c.49191367+0x173d>
    db44:	|  |      jsr 141e2 <KPrintF>
    db4a:	|  |      addq.l #4,sp
        return BR_ERROR;
    db4c:	|  |      moveq #1,d0
    db4e:	+--|----- bra.w dbf2 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    db52:	|  \----> move.l 44(sp),d0
    db56:	|         add.l d0,d0
    db58:	|         add.l d0,d0
    db5a:	|         move.l d0,16(sp)
    db5e:	|         clr.l 12(sp)
    db62:	|         move.l 1938c <SysBase>,d0
    db68:	|         movea.l d0,a6
    db6a:	|         move.l 16(sp),d0
    db6e:	|         move.l 12(sp),d1
    db72:	|         jsr -684(a6)
    db76:	|         move.l d0,8(sp)
    db7a:	|         move.l 8(sp),d0
    db7e:	|         movea.l 20(sp),a0
    db82:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    db84:	|         movea.l 20(sp),a0
    db88:	|         move.l (a0),d0
    db8a:	|     /-- bne.s db90 <builtIn_costume+0xc0>
    db8c:	|     |   moveq #1,d0
    db8e:	+-----|-- bra.s dbf2 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    db90:	|     \-> move.l 44(sp),d0
    db94:	|         subq.l #1,d0
    db96:	|         move.l d0,36(sp)
    db9a:	|     /-- bra.s dbd6 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    db9c:	|  /--|-> movea.l 48(sp),a0
    dba0:	|  |  |   move.l 24(a0),d0
    dba4:	|  |  |   movea.l 20(sp),a0
    dba8:	|  |  |   movea.l (a0),a0
    dbaa:	|  |  |   move.l 36(sp),d1
    dbae:	|  |  |   add.l d1,d1
    dbb0:	|  |  |   add.l d1,d1
    dbb2:	|  |  |   lea (0,a0,d1.l),a2
    dbb6:	|  |  |   move.l d0,-(sp)
    dbb8:	|  |  |   jsr 12672 <getAnimationFromVar>
    dbbe:	|  |  |   addq.l #4,sp
    dbc0:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    dbc2:	|  |  |   moveq #24,d0
    dbc4:	|  |  |   add.l 48(sp),d0
    dbc8:	|  |  |   move.l d0,-(sp)
    dbca:	|  |  |   jsr 12b1e <trimStack>
    dbd0:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    dbd2:	|  |  |   subq.l #1,36(sp)
    dbd6:	|  |  \-> tst.l 36(sp)
    dbda:	|  \----- bge.s db9c <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    dbdc:	|         moveq #28,d0
    dbde:	|         add.l 48(sp),d0
    dbe2:	|         move.l 20(sp),-(sp)
    dbe6:	|         move.l d0,-(sp)
    dbe8:	|         jsr 12a6a <newCostumeVariable>
    dbee:	|         addq.l #8,sp
    return BR_CONTINUE;
    dbf0:	|         moveq #2,d0
}
    dbf2:	\-------> movea.l (sp)+,a2
    dbf4:	          movea.l (sp)+,a6
    dbf6:	          lea 32(sp),sp
    dbfa:	          rts

0000dbfc <builtIn_launch>:

builtIn(launch)
{
    dbfc:	          lea -20(sp),sp
    dc00:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    dc02:	          movea.l 32(sp),a0
    dc06:	          move.l 24(a0),d0
    dc0a:	          move.l d0,-(sp)
    dc0c:	          jsr 12770 <getTextFromAnyVar>
    dc12:	          addq.l #4,sp
    dc14:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    dc18:	      /-- bne.s dc20 <builtIn_launch+0x24>
    dc1a:	      |   moveq #1,d0
    dc1c:	/-----|-- bra.w dd4e <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    dc20:	|     \-> move.l 20(sp),-(sp)
    dc24:	|         jsr 2fe <encodeFilename>
    dc2a:	|         addq.l #4,sp
    dc2c:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    dc30:	|         moveq #24,d0
    dc32:	|         add.l 32(sp),d0
    dc36:	|         move.l d0,-(sp)
    dc38:	|         jsr 12b1e <trimStack>
    dc3e:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    dc40:	|         movea.l 20(sp),a0
    dc44:	|         move.b (a0),d0
    dc46:	|         cmpi.b #104,d0
    dc4a:	|  /----- bne.s dcb4 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    dc4c:	|  |      movea.l 20(sp),a0
    dc50:	|  |      addq.l #1,a0
    dc52:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    dc54:	|  |      cmpi.b #116,d0
    dc58:	|  +----- bne.s dcb4 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    dc5a:	|  |      movea.l 20(sp),a0
    dc5e:	|  |      addq.l #2,a0
    dc60:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    dc62:	|  |      cmpi.b #116,d0
    dc66:	|  +----- bne.s dcb4 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    dc68:	|  |      movea.l 20(sp),a0
    dc6c:	|  |      addq.l #3,a0
    dc6e:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    dc70:	|  |      cmpi.b #112,d0
    dc74:	|  +----- bne.s dcb4 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    dc76:	|  |      movea.l 20(sp),a0
    dc7a:	|  |      addq.l #4,a0
    dc7c:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    dc7e:	|  |      cmpi.b #58,d0
    dc82:	|  |  /-- beq.s dca0 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    dc84:	|  |  |   movea.l 20(sp),a0
    dc88:	|  |  |   addq.l #4,a0
    dc8a:	|  |  |   move.b (a0),d0
    dc8c:	|  |  |   cmpi.b #115,d0
    dc90:	|  +--|-- bne.s dcb4 <builtIn_launch+0xb8>
    dc92:	|  |  |   movea.l 20(sp),a0
    dc96:	|  |  |   addq.l #5,a0
    dc98:	|  |  |   move.b (a0),d0
    dc9a:	|  |  |   cmpi.b #58,d0
    dc9e:	|  +--|-- bne.s dcb4 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    dca0:	|  |  \-> move.l 20(sp),-(sp)
    dca4:	|  |      jsr b8 <copyString>
    dcaa:	|  |      addq.l #4,sp
    dcac:	|  |      move.l d0,194a2 <launchMe>
    dcb2:	|  |  /-- bra.s dd06 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    dcb4:	|  \--|-> move.l 192f4 <gamePath>,d0
    dcba:	|     |   pea 164b4 <custom.c.49191367+0x1788>
    dcc0:	|     |   move.l d0,-(sp)
    dcc2:	|     |   jsr 116c6 <joinStrings>
    dcc8:	|     |   addq.l #8,sp
    dcca:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    dcce:	|     |   move.l 16(sp),-(sp)
    dcd2:	|     |   move.l 16(sp),-(sp)
    dcd6:	|     |   jsr 116c6 <joinStrings>
    dcdc:	|     |   addq.l #8,sp
    dcde:	|     |   move.l d0,194a2 <launchMe>
        FreeVec(newText);
    dce4:	|     |   move.l 16(sp),8(sp)
    dcea:	|     |   move.l 1938c <SysBase>,d0
    dcf0:	|     |   movea.l d0,a6
    dcf2:	|     |   movea.l 8(sp),a1
    dcf6:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    dcfa:	|     |   move.l 194a2 <launchMe>,d0
    dd00:	|     +-- bne.s dd06 <builtIn_launch+0x10a>
    dd02:	|     |   moveq #1,d0
    dd04:	+-----|-- bra.s dd4e <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    dd06:	|     \-> move.l 20(sp),4(sp)
    dd0c:	|         move.l 1938c <SysBase>,d0
    dd12:	|         movea.l d0,a6
    dd14:	|         movea.l 4(sp),a1
    dd18:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    dd1c:	|         clr.l -(sp)
    dd1e:	|         jsr 22e6 <setGraphicsWindow>
    dd24:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    dd26:	|         moveq #28,d0
    dd28:	|         add.l 32(sp),d0
    dd2c:	|         pea 1 <_start+0x1>
    dd30:	|         pea 1 <_start+0x1>
    dd34:	|         move.l d0,-(sp)
    dd36:	|         jsr 12a8c <setVariable>
    dd3c:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    dd40:	|         moveq #28,d0
    dd42:	|         add.l 32(sp),d0
    dd46:	|         move.l d0,194a6 <launchResult>

    return BR_KEEP_AND_PAUSE;
    dd4c:	|         moveq #0,d0
}
    dd4e:	\-------> movea.l (sp)+,a6
    dd50:	          lea 20(sp),sp
    dd54:	          rts

0000dd56 <builtIn_pause>:

builtIn(pause)
{
    dd56:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd58:	       movea.l 12(sp),a0
    dd5c:	       move.l 24(a0),d0
    dd60:	       move.l d0,-(sp)
    dd62:	       pea 1 <_start+0x1>
    dd66:	       move.l sp,d0
    dd68:	       addq.l #8,d0
    dd6a:	       move.l d0,-(sp)
    dd6c:	       jsr 1219a <getValueType>
    dd72:	       lea 12(sp),sp
    dd76:	       tst.w d0
    dd78:	   /-- bne.s dd7e <builtIn_pause+0x28>
    dd7a:	   |   moveq #1,d0
    dd7c:	/--|-- bra.s ddac <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    dd7e:	|  \-> moveq #24,d0
    dd80:	|      add.l 12(sp),d0
    dd84:	|      move.l d0,-(sp)
    dd86:	|      jsr 12b1e <trimStack>
    dd8c:	|      addq.l #4,sp
	if (theTime > 0) {
    dd8e:	|      move.l (sp),d0
    dd90:	|  /-- ble.s ddaa <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    dd92:	|  |   move.l (sp),d0
    dd94:	|  |   subq.l #1,d0
    dd96:	|  |   movea.l 12(sp),a0
    dd9a:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    dd9e:	|  |   movea.l 12(sp),a0
    dda2:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    dda6:	|  |   moveq #0,d0
    dda8:	+--|-- bra.s ddac <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    ddaa:	|  \-> moveq #2,d0
}
    ddac:	\----> addq.l #4,sp
    ddae:	       rts

0000ddb0 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    ddb0:	jsr 2a3a <completeTimers>
	return BR_CONTINUE;
    ddb6:	moveq #2,d0
}
    ddb8:	rts

0000ddba <builtIn_callEvent>:

builtIn(callEvent)
{
    ddba:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddbe:	       movea.l 20(sp),a0
    ddc2:	       move.l 24(a0),d0
    ddc6:	       move.l d0,-(sp)
    ddc8:	       pea 7 <_start+0x7>
    ddcc:	       lea 8(sp),a0
    ddd0:	       move.l a0,-(sp)
    ddd2:	       jsr 1219a <getValueType>
    ddd8:	       lea 12(sp),sp
    dddc:	       tst.w d0
    ddde:	   /-- bne.s dde6 <builtIn_callEvent+0x2c>
    dde0:	   |   moveq #1,d0
    dde2:	/--|-- bra.w de7c <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    dde6:	|  \-> moveq #24,d0
    dde8:	|      add.l 20(sp),d0
    ddec:	|      move.l d0,-(sp)
    ddee:	|      jsr 12b1e <trimStack>
    ddf4:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddf6:	|      movea.l 20(sp),a0
    ddfa:	|      move.l 24(a0),d0
    ddfe:	|      move.l d0,-(sp)
    de00:	|      pea 7 <_start+0x7>
    de04:	|      moveq #12,d0
    de06:	|      add.l sp,d0
    de08:	|      move.l d0,-(sp)
    de0a:	|      jsr 1219a <getValueType>
    de10:	|      lea 12(sp),sp
    de14:	|      tst.w d0
    de16:	|  /-- bne.s de1c <builtIn_callEvent+0x62>
    de18:	|  |   moveq #1,d0
    de1a:	+--|-- bra.s de7c <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    de1c:	|  \-> moveq #24,d0
    de1e:	|      add.l 20(sp),d0
    de22:	|      move.l d0,-(sp)
    de24:	|      jsr 12b1e <trimStack>
    de2a:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    de2c:	|      move.l (sp),d1
    de2e:	|      move.l 4(sp),d0
    de32:	|      move.l d1,-(sp)
    de34:	|      move.l d0,-(sp)
    de36:	|      jsr b004 <getCombinationFunction>
    de3c:	|      addq.l #8,sp
    de3e:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    de42:	|  /-- beq.s de62 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    de44:	|  |   moveq #28,d0
    de46:	|  |   add.l 20(sp),d0
    de4a:	|  |   move.l 8(sp),-(sp)
    de4e:	|  |   pea 2 <_start+0x2>
    de52:	|  |   move.l d0,-(sp)
    de54:	|  |   jsr 12a8c <setVariable>
    de5a:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    de5e:	|  |   moveq #4,d0
    de60:	+--|-- bra.s de7c <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    de62:	|  \-> moveq #28,d0
    de64:	|      add.l 20(sp),d0
    de68:	|      clr.l -(sp)
    de6a:	|      pea 1 <_start+0x1>
    de6e:	|      move.l d0,-(sp)
    de70:	|      jsr 12a8c <setVariable>
    de76:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de7a:	|      moveq #2,d0
}
    de7c:	\----> lea 12(sp),sp
    de80:	       rts

0000de82 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    de82:	move.w #1,194b2 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    de8a:	moveq #2,d0
}
    de8c:	rts

0000de8e <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    de8e:	moveq #24,d0
    de90:	add.l 8(sp),d0
    de94:	move.l d0,-(sp)
    de96:	jsr 12b1e <trimStack>
    de9c:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    de9e:	pea 164b6 <custom.c.49191367+0x178a>
    dea4:	jsr 141e2 <KPrintF>
    deaa:	addq.l #4,sp
	return BR_CONTINUE;
    deac:	moveq #2,d0
}
    deae:	rts

0000deb0 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    deb0:	pea 164b6 <custom.c.49191367+0x178a>
    deb6:	jsr 141e2 <KPrintF>
    debc:	addq.l #4,sp
	return BR_CONTINUE;
    debe:	moveq #2,d0
}
    dec0:	rts

0000dec2 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    dec2:	pea 164b6 <custom.c.49191367+0x178a>
    dec8:	jsr 141e2 <KPrintF>
    dece:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    ded0:	moveq #2,d0
}
    ded2:	rts

0000ded4 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    ded4:	pea 164b6 <custom.c.49191367+0x178a>
    deda:	jsr 141e2 <KPrintF>
    dee0:	addq.l #4,sp
	return BR_CONTINUE;
    dee2:	moveq #2,d0
}
    dee4:	rts

0000dee6 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    dee6:	pea 164b6 <custom.c.49191367+0x178a>
    deec:	jsr 141e2 <KPrintF>
    def2:	addq.l #4,sp
	return BR_CONTINUE;
    def4:	moveq #2,d0
}
    def6:	rts

0000def8 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    def8:	pea 164b6 <custom.c.49191367+0x178a>
    defe:	jsr 141e2 <KPrintF>
    df04:	addq.l #4,sp
	return BR_CONTINUE;
    df06:	moveq #2,d0
}
    df08:	rts

0000df0a <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    df0a:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df0e:	       movea.l 20(sp),a0
    df12:	       move.l 24(a0),d0
    df16:	       move.l d0,-(sp)
    df18:	       pea 1 <_start+0x1>
    df1c:	       moveq #16,d0
    df1e:	       add.l sp,d0
    df20:	       move.l d0,-(sp)
    df22:	       jsr 1219a <getValueType>
    df28:	       lea 12(sp),sp
    df2c:	       tst.w d0
    df2e:	   /-- bne.s df36 <builtIn_startMusic+0x2c>
    df30:	   |   moveq #1,d0
    df32:	/--|-- bra.w dfd6 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    df36:	|  \-> moveq #24,d0
    df38:	|      add.l 20(sp),d0
    df3c:	|      move.l d0,-(sp)
    df3e:	|      jsr 12b1e <trimStack>
    df44:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df46:	|      movea.l 20(sp),a0
    df4a:	|      move.l 24(a0),d0
    df4e:	|      move.l d0,-(sp)
    df50:	|      pea 1 <_start+0x1>
    df54:	|      moveq #12,d0
    df56:	|      add.l sp,d0
    df58:	|      move.l d0,-(sp)
    df5a:	|      jsr 1219a <getValueType>
    df60:	|      lea 12(sp),sp
    df64:	|      tst.w d0
    df66:	|  /-- bne.s df6c <builtIn_startMusic+0x62>
    df68:	|  |   moveq #1,d0
    df6a:	+--|-- bra.s dfd6 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    df6c:	|  \-> moveq #24,d0
    df6e:	|      add.l 20(sp),d0
    df72:	|      move.l d0,-(sp)
    df74:	|      jsr 12b1e <trimStack>
    df7a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    df7c:	|      movea.l 20(sp),a0
    df80:	|      move.l 24(a0),d0
    df84:	|      move.l d0,-(sp)
    df86:	|      pea 5 <_start+0x5>
    df8a:	|      lea 8(sp),a0
    df8e:	|      move.l a0,-(sp)
    df90:	|      jsr 1219a <getValueType>
    df96:	|      lea 12(sp),sp
    df9a:	|      tst.w d0
    df9c:	|  /-- bne.s dfa2 <builtIn_startMusic+0x98>
    df9e:	|  |   moveq #1,d0
    dfa0:	+--|-- bra.s dfd6 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    dfa2:	|  \-> moveq #24,d0
    dfa4:	|      add.l 20(sp),d0
    dfa8:	|      move.l d0,-(sp)
    dfaa:	|      jsr 12b1e <trimStack>
    dfb0:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    dfb2:	|      movea.l 8(sp),a0
    dfb6:	|      move.l 4(sp),d1
    dfba:	|      move.l (sp),d0
    dfbc:	|      move.l a0,-(sp)
    dfbe:	|      move.l d1,-(sp)
    dfc0:	|      move.l d0,-(sp)
    dfc2:	|      jsr ac1c <playMOD>
    dfc8:	|      lea 12(sp),sp
    dfcc:	|      tst.w d0
    dfce:	|  /-- bne.s dfd4 <builtIn_startMusic+0xca>
    dfd0:	|  |   moveq #2,d0
    dfd2:	+--|-- bra.s dfd6 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    dfd4:	|  \-> moveq #2,d0
}
    dfd6:	\----> lea 12(sp),sp
    dfda:	       rts

0000dfdc <builtIn_stopMusic>:

builtIn(stopMusic)
{
    dfdc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dfde:	       movea.l 12(sp),a0
    dfe2:	       move.l 24(a0),d0
    dfe6:	       move.l d0,-(sp)
    dfe8:	       pea 1 <_start+0x1>
    dfec:	       move.l sp,d0
    dfee:	       addq.l #8,d0
    dff0:	       move.l d0,-(sp)
    dff2:	       jsr 1219a <getValueType>
    dff8:	       lea 12(sp),sp
    dffc:	       tst.w d0
    dffe:	   /-- bne.s e004 <builtIn_stopMusic+0x28>
    e000:	   |   moveq #1,d0
    e002:	/--|-- bra.s e022 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    e004:	|  \-> moveq #24,d0
    e006:	|      add.l 12(sp),d0
    e00a:	|      move.l d0,-(sp)
    e00c:	|      jsr 12b1e <trimStack>
    e012:	|      addq.l #4,sp
	stopMOD (v);
    e014:	|      move.l (sp),d0
    e016:	|      move.l d0,-(sp)
    e018:	|      jsr acb8 <stopMOD>
    e01e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e020:	|      moveq #2,d0
}
    e022:	\----> addq.l #4,sp
    e024:	       rts

0000e026 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    e026:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e028:	       movea.l 16(sp),a0
    e02c:	       move.l 24(a0),d0
    e030:	       move.l d0,-(sp)
    e032:	       pea 1 <_start+0x1>
    e036:	       move.l sp,d0
    e038:	       addq.l #8,d0
    e03a:	       move.l d0,-(sp)
    e03c:	       jsr 1219a <getValueType>
    e042:	       lea 12(sp),sp
    e046:	       tst.w d0
    e048:	   /-- bne.s e04e <builtIn_setMusicVolume+0x28>
    e04a:	   |   moveq #1,d0
    e04c:	/--|-- bra.s e0a8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e04e:	|  \-> moveq #24,d0
    e050:	|      add.l 16(sp),d0
    e054:	|      move.l d0,-(sp)
    e056:	|      jsr 12b1e <trimStack>
    e05c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e05e:	|      movea.l 16(sp),a0
    e062:	|      move.l 24(a0),d0
    e066:	|      move.l d0,-(sp)
    e068:	|      pea 1 <_start+0x1>
    e06c:	|      moveq #12,d0
    e06e:	|      add.l sp,d0
    e070:	|      move.l d0,-(sp)
    e072:	|      jsr 1219a <getValueType>
    e078:	|      lea 12(sp),sp
    e07c:	|      tst.w d0
    e07e:	|  /-- bne.s e084 <builtIn_setMusicVolume+0x5e>
    e080:	|  |   moveq #1,d0
    e082:	+--|-- bra.s e0a8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e084:	|  \-> moveq #24,d0
    e086:	|      add.l 16(sp),d0
    e08a:	|      move.l d0,-(sp)
    e08c:	|      jsr 12b1e <trimStack>
    e092:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    e094:	|      move.l (sp),d1
    e096:	|      move.l 4(sp),d0
    e09a:	|      move.l d1,-(sp)
    e09c:	|      move.l d0,-(sp)
    e09e:	|      jsr ac9e <setMusicVolume>
    e0a4:	|      addq.l #8,sp
	return BR_CONTINUE;
    e0a6:	|      moveq #2,d0
}
    e0a8:	\----> addq.l #8,sp
    e0aa:	       rts

0000e0ac <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    e0ac:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e0ae:	       movea.l 12(sp),a0
    e0b2:	       move.l 24(a0),d0
    e0b6:	       move.l d0,-(sp)
    e0b8:	       pea 1 <_start+0x1>
    e0bc:	       move.l sp,d0
    e0be:	       addq.l #8,d0
    e0c0:	       move.l d0,-(sp)
    e0c2:	       jsr 1219a <getValueType>
    e0c8:	       lea 12(sp),sp
    e0cc:	       tst.w d0
    e0ce:	   /-- bne.s e0d4 <builtIn_setDefaultMusicVolume+0x28>
    e0d0:	   |   moveq #1,d0
    e0d2:	/--|-- bra.s e0f2 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    e0d4:	|  \-> moveq #24,d0
    e0d6:	|      add.l 12(sp),d0
    e0da:	|      move.l d0,-(sp)
    e0dc:	|      jsr 12b1e <trimStack>
    e0e2:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    e0e4:	|      move.l (sp),d0
    e0e6:	|      move.l d0,-(sp)
    e0e8:	|      jsr ac82 <setDefaultMusicVolume>
    e0ee:	|      addq.l #4,sp
	return BR_CONTINUE;
    e0f0:	|      moveq #2,d0
}
    e0f2:	\----> addq.l #4,sp
    e0f4:	       rts

0000e0f6 <builtIn_playSound>:

builtIn(playSound)
{
    e0f6:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0f8:	       movea.l 12(sp),a0
    e0fc:	       move.l 24(a0),d0
    e100:	       move.l d0,-(sp)
    e102:	       pea 5 <_start+0x5>
    e106:	       move.l sp,d0
    e108:	       addq.l #8,d0
    e10a:	       move.l d0,-(sp)
    e10c:	       jsr 1219a <getValueType>
    e112:	       lea 12(sp),sp
    e116:	       tst.w d0
    e118:	   /-- bne.s e11e <builtIn_playSound+0x28>
    e11a:	   |   moveq #1,d0
    e11c:	/--|-- bra.s e146 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    e11e:	|  \-> moveq #24,d0
    e120:	|      add.l 12(sp),d0
    e124:	|      move.l d0,-(sp)
    e126:	|      jsr 12b1e <trimStack>
    e12c:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    e12e:	|      move.l (sp),d0
    e130:	|      clr.l -(sp)
    e132:	|      move.l d0,-(sp)
    e134:	|      jsr aca6 <startSound>
    e13a:	|      addq.l #8,sp
    e13c:	|      tst.w d0
    e13e:	|  /-- bne.s e144 <builtIn_playSound+0x4e>
    e140:	|  |   moveq #2,d0
    e142:	+--|-- bra.s e146 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    e144:	|  \-> moveq #2,d0
}
    e146:	\----> addq.l #4,sp
    e148:	       rts

0000e14a <builtIn_loopSound>:

builtIn(loopSound)
{
    e14a:	             lea -28(sp),sp
    e14e:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    e150:	             tst.l 36(sp)
    e154:	         /-- bgt.s e16a <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    e156:	         |   pea 164d9 <custom.c.49191367+0x17ad>
    e15c:	         |   jsr 141e2 <KPrintF>
    e162:	         |   addq.l #4,sp
		return BR_ERROR;
    e164:	         |   moveq #1,d0
    e166:	/--------|-- bra.w e326 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    e16a:	|        \-> moveq #1,d0
    e16c:	|            cmp.l 36(sp),d0
    e170:	|     /----- blt.s e1cc <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    e172:	|     |      movea.l 40(sp),a0
    e176:	|     |      move.l 24(a0),d0
    e17a:	|     |      move.l d0,-(sp)
    e17c:	|     |      pea 5 <_start+0x5>
    e180:	|     |      lea 16(sp),a0
    e184:	|     |      move.l a0,-(sp)
    e186:	|     |      jsr 1219a <getValueType>
    e18c:	|     |      lea 12(sp),sp
    e190:	|     |      tst.w d0
    e192:	|     |  /-- bne.s e19a <builtIn_loopSound+0x50>
    e194:	|     |  |   moveq #1,d0
    e196:	+-----|--|-- bra.w e326 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    e19a:	|     |  \-> moveq #24,d0
    e19c:	|     |      add.l 40(sp),d0
    e1a0:	|     |      move.l d0,-(sp)
    e1a2:	|     |      jsr 12b1e <trimStack>
    e1a8:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    e1aa:	|     |      move.l 8(sp),d0
    e1ae:	|     |      pea 1 <_start+0x1>
    e1b2:	|     |      move.l d0,-(sp)
    e1b4:	|     |      jsr aca6 <startSound>
    e1ba:	|     |      addq.l #8,sp
    e1bc:	|     |      tst.w d0
    e1be:	|     |  /-- bne.s e1c6 <builtIn_loopSound+0x7c>
    e1c0:	|     |  |   moveq #2,d0
    e1c2:	+-----|--|-- bra.w e326 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    e1c6:	|     |  \-> moveq #2,d0
    e1c8:	+-----|----- bra.w e326 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    e1cc:	|     \----> moveq #2,d1
    e1ce:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    e1d2:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    e1d6:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    e1da:	|            movea.l 40(sp),a0
    e1de:	|            movea.l 24(a0),a0
    e1e2:	|            move.l (a0),d0
    e1e4:	|            moveq #5,d1
    e1e6:	|            cmp.l d0,d1
    e1e8:	|  /-------- beq.w e2c0 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    e1ec:	|  |         movea.l 40(sp),a0
    e1f0:	|  |         move.l 24(a0),d0
    e1f4:	|  |         move.l d0,-(sp)
    e1f6:	|  |         pea 1 <_start+0x1>
    e1fa:	|  |         lea 12(sp),a0
    e1fe:	|  |         move.l a0,-(sp)
    e200:	|  |         jsr 1219a <getValueType>
    e206:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    e20a:	|  |         moveq #24,d0
    e20c:	|  |         add.l 40(sp),d0
    e210:	|  |         move.l d0,-(sp)
    e212:	|  |         jsr 12b1e <trimStack>
    e218:	|  |         addq.l #4,sp
			numParams--;
    e21a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    e21e:	|  +-------- bra.w e2c0 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    e222:	|  |  /----> movea.l 40(sp),a0
    e226:	|  |  |      move.l 24(a0),d0
    e22a:	|  |  |      move.l d0,-(sp)
    e22c:	|  |  |      pea 5 <_start+0x5>
    e230:	|  |  |      lea 16(sp),a0
    e234:	|  |  |      move.l a0,-(sp)
    e236:	|  |  |      jsr 1219a <getValueType>
    e23c:	|  |  |      lea 12(sp),sp
    e240:	|  |  |      tst.w d0
    e242:	|  |  |  /-- bne.s e258 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    e244:	|  |  |  |   pea 16517 <custom.c.49191367+0x17eb>
    e24a:	|  |  |  |   jsr 141e2 <KPrintF>
    e250:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    e252:	|  |  |  |   moveq #1,d0
    e254:	+--|--|--|-- bra.w e326 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    e258:	|  |  |  \-> moveq #20,d0
    e25a:	|  |  |      move.l d0,20(sp)
    e25e:	|  |  |      clr.l 16(sp)
    e262:	|  |  |      move.l 1938c <SysBase>,d0
    e268:	|  |  |      movea.l d0,a6
    e26a:	|  |  |      move.l 20(sp),d0
    e26e:	|  |  |      move.l 16(sp),d1
    e272:	|  |  |      jsr -684(a6)
    e276:	|  |  |      move.l d0,12(sp)
    e27a:	|  |  |      move.l 12(sp),d0
    e27e:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    e282:	|  |  |  /-- bne.s e28a <builtIn_loopSound+0x140>
    e284:	|  |  |  |   moveq #1,d0
    e286:	+--|--|--|-- bra.w e326 <builtIn_loopSound+0x1dc>

			s->next = old;
    e28a:	|  |  |  \-> movea.l 28(sp),a0
    e28e:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    e294:	|  |  |      movea.l 28(sp),a0
    e298:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    e29c:	|  |  |      move.l 8(sp),d0
    e2a0:	|  |  |      movea.l 28(sp),a0
    e2a4:	|  |  |      move.l d0,(a0)
			old = s;
    e2a6:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    e2ac:	|  |  |      moveq #24,d0
    e2ae:	|  |  |      add.l 40(sp),d0
    e2b2:	|  |  |      move.l d0,-(sp)
    e2b4:	|  |  |      jsr 12b1e <trimStack>
    e2ba:	|  |  |      addq.l #4,sp
			numParams--;
    e2bc:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    e2c0:	|  \--|----> tst.l 36(sp)
    e2c4:	|     \----- bne.w e222 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    e2c8:	|        /-- bra.s e2d4 <builtIn_loopSound+0x18a>
    e2ca:	|     /--|-> movea.l 28(sp),a0
    e2ce:	|     |  |   move.l 4(a0),28(sp)
    e2d4:	|     |  \-> movea.l 28(sp),a0
    e2d8:	|     |      move.l 4(a0),d0
    e2dc:	|     \----- bne.s e2ca <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    e2de:	|            move.l 4(sp),d0
    e2e2:	|            moveq #1,d1
    e2e4:	|            cmp.l d0,d1
    e2e6:	|     /----- bge.s e2fe <builtIn_loopSound+0x1b4>
			s->next = old;
    e2e8:	|     |      movea.l 28(sp),a0
    e2ec:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    e2f2:	|     |      movea.l 24(sp),a0
    e2f6:	|     |      move.l 28(sp),8(a0)
    e2fc:	|     |  /-- bra.s e30e <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    e2fe:	|     \--|-> move.l 4(sp),d0
    e302:	|        +-- beq.s e30e <builtIn_loopSound+0x1c4>
			s->next = s;
    e304:	|        |   movea.l 28(sp),a0
    e308:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    e30e:	|        \-> movea.l 24(sp),a0
    e312:	|            moveq #-1,d0
    e314:	|            move.l d0,16(a0)
		playSoundList(old);
    e318:	|            move.l 24(sp),-(sp)
    e31c:	|            jsr ac20 <playSoundList>
    e322:	|            addq.l #4,sp
		return BR_CONTINUE;
    e324:	|            moveq #2,d0
	}
}
    e326:	\----------> movea.l (sp)+,a6
    e328:	             lea 28(sp),sp
    e32c:	             rts

0000e32e <builtIn_stopSound>:

builtIn(stopSound)
{
    e32e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e330:	       movea.l 12(sp),a0
    e334:	       move.l 24(a0),d0
    e338:	       move.l d0,-(sp)
    e33a:	       pea 5 <_start+0x5>
    e33e:	       move.l sp,d0
    e340:	       addq.l #8,d0
    e342:	       move.l d0,-(sp)
    e344:	       jsr 1219a <getValueType>
    e34a:	       lea 12(sp),sp
    e34e:	       tst.w d0
    e350:	   /-- bne.s e356 <builtIn_stopSound+0x28>
    e352:	   |   moveq #1,d0
    e354:	/--|-- bra.s e374 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    e356:	|  \-> moveq #24,d0
    e358:	|      add.l 12(sp),d0
    e35c:	|      move.l d0,-(sp)
    e35e:	|      jsr 12b1e <trimStack>
    e364:	|      addq.l #4,sp
	huntKillSound (v);
    e366:	|      move.l (sp),d0
    e368:	|      move.l d0,-(sp)
    e36a:	|      jsr ac18 <huntKillSound>
    e370:	|      addq.l #4,sp
	return BR_CONTINUE;
    e372:	|      moveq #2,d0
}
    e374:	\----> addq.l #4,sp
    e376:	       rts

0000e378 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    e378:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e37a:	       movea.l 12(sp),a0
    e37e:	       move.l 24(a0),d0
    e382:	       move.l d0,-(sp)
    e384:	       pea 1 <_start+0x1>
    e388:	       move.l sp,d0
    e38a:	       addq.l #8,d0
    e38c:	       move.l d0,-(sp)
    e38e:	       jsr 1219a <getValueType>
    e394:	       lea 12(sp),sp
    e398:	       tst.w d0
    e39a:	   /-- bne.s e3a0 <builtIn_setDefaultSoundVolume+0x28>
    e39c:	   |   moveq #1,d0
    e39e:	/--|-- bra.s e3be <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    e3a0:	|  \-> moveq #24,d0
    e3a2:	|      add.l 12(sp),d0
    e3a6:	|      move.l d0,-(sp)
    e3a8:	|      jsr 12b1e <trimStack>
    e3ae:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    e3b0:	|      move.l (sp),d0
    e3b2:	|      move.l d0,-(sp)
    e3b4:	|      jsr ac8e <setDefaultSoundVolume>
    e3ba:	|      addq.l #4,sp
	return BR_CONTINUE;
    e3bc:	|      moveq #2,d0
}
    e3be:	\----> addq.l #4,sp
    e3c0:	       rts

0000e3c2 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    e3c2:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3c4:	       movea.l 16(sp),a0
    e3c8:	       move.l 24(a0),d0
    e3cc:	       move.l d0,-(sp)
    e3ce:	       pea 1 <_start+0x1>
    e3d2:	       move.l sp,d0
    e3d4:	       addq.l #8,d0
    e3d6:	       move.l d0,-(sp)
    e3d8:	       jsr 1219a <getValueType>
    e3de:	       lea 12(sp),sp
    e3e2:	       tst.w d0
    e3e4:	   /-- bne.s e3ea <builtIn_setSoundVolume+0x28>
    e3e6:	   |   moveq #1,d0
    e3e8:	/--|-- bra.s e444 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    e3ea:	|  \-> moveq #24,d0
    e3ec:	|      add.l 16(sp),d0
    e3f0:	|      move.l d0,-(sp)
    e3f2:	|      jsr 12b1e <trimStack>
    e3f8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3fa:	|      movea.l 16(sp),a0
    e3fe:	|      move.l 24(a0),d0
    e402:	|      move.l d0,-(sp)
    e404:	|      pea 5 <_start+0x5>
    e408:	|      moveq #12,d0
    e40a:	|      add.l sp,d0
    e40c:	|      move.l d0,-(sp)
    e40e:	|      jsr 1219a <getValueType>
    e414:	|      lea 12(sp),sp
    e418:	|      tst.w d0
    e41a:	|  /-- bne.s e420 <builtIn_setSoundVolume+0x5e>
    e41c:	|  |   moveq #1,d0
    e41e:	+--|-- bra.s e444 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    e420:	|  \-> moveq #24,d0
    e422:	|      add.l 16(sp),d0
    e426:	|      move.l d0,-(sp)
    e428:	|      jsr 12b1e <trimStack>
    e42e:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    e430:	|      move.l (sp),d1
    e432:	|      move.l 4(sp),d0
    e436:	|      move.l d1,-(sp)
    e438:	|      move.l d0,-(sp)
    e43a:	|      jsr aca2 <setSoundVolume>
    e440:	|      addq.l #8,sp
	return BR_CONTINUE;
    e442:	|      moveq #2,d0
}
    e444:	\----> addq.l #8,sp
    e446:	       rts

0000e448 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    e448:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e44c:	       movea.l 20(sp),a0
    e450:	       move.l 24(a0),d0
    e454:	       move.l d0,-(sp)
    e456:	       pea 1 <_start+0x1>
    e45a:	       moveq #12,d0
    e45c:	       add.l sp,d0
    e45e:	       move.l d0,-(sp)
    e460:	       jsr 1219a <getValueType>
    e466:	       lea 12(sp),sp
    e46a:	       tst.w d0
    e46c:	   /-- bne.s e474 <builtIn_setSoundLoopPoints+0x2c>
    e46e:	   |   moveq #1,d0
    e470:	/--|-- bra.w e50c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e474:	|  \-> moveq #24,d0
    e476:	|      add.l 20(sp),d0
    e47a:	|      move.l d0,-(sp)
    e47c:	|      jsr 12b1e <trimStack>
    e482:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e484:	|      movea.l 20(sp),a0
    e488:	|      move.l 24(a0),d0
    e48c:	|      move.l d0,-(sp)
    e48e:	|      pea 1 <_start+0x1>
    e492:	|      lea 8(sp),a0
    e496:	|      move.l a0,-(sp)
    e498:	|      jsr 1219a <getValueType>
    e49e:	|      lea 12(sp),sp
    e4a2:	|      tst.w d0
    e4a4:	|  /-- bne.s e4aa <builtIn_setSoundLoopPoints+0x62>
    e4a6:	|  |   moveq #1,d0
    e4a8:	+--|-- bra.s e50c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e4aa:	|  \-> moveq #24,d0
    e4ac:	|      add.l 20(sp),d0
    e4b0:	|      move.l d0,-(sp)
    e4b2:	|      jsr 12b1e <trimStack>
    e4b8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e4ba:	|      movea.l 20(sp),a0
    e4be:	|      move.l 24(a0),d0
    e4c2:	|      move.l d0,-(sp)
    e4c4:	|      pea 5 <_start+0x5>
    e4c8:	|      moveq #16,d0
    e4ca:	|      add.l sp,d0
    e4cc:	|      move.l d0,-(sp)
    e4ce:	|      jsr 1219a <getValueType>
    e4d4:	|      lea 12(sp),sp
    e4d8:	|      tst.w d0
    e4da:	|  /-- bne.s e4e0 <builtIn_setSoundLoopPoints+0x98>
    e4dc:	|  |   moveq #1,d0
    e4de:	+--|-- bra.s e50c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e4e0:	|  \-> moveq #24,d0
    e4e2:	|      add.l 20(sp),d0
    e4e6:	|      move.l d0,-(sp)
    e4e8:	|      jsr 12b1e <trimStack>
    e4ee:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    e4f0:	|      movea.l 4(sp),a0
    e4f4:	|      move.l (sp),d1
    e4f6:	|      move.l 8(sp),d0
    e4fa:	|      move.l a0,-(sp)
    e4fc:	|      move.l d1,-(sp)
    e4fe:	|      move.l d0,-(sp)
    e500:	|      jsr ac9a <setSoundLoop>
    e506:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e50a:	|      moveq #2,d0
}
    e50c:	\----> lea 12(sp),sp
    e510:	       rts

0000e512 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    e512:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e514:	          movea.l 12(sp),a0
    e518:	          movea.l 24(a0),a0
    e51c:	          move.l (a0),d0
    e51e:	          moveq #5,d1
    e520:	          cmp.l d0,d1
    e522:	/-------- bne.s e566 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e524:	|         movea.l 12(sp),a0
    e528:	|         move.l 24(a0),d0
    e52c:	|         move.l d0,-(sp)
    e52e:	|         pea 5 <_start+0x5>
    e532:	|         move.l sp,d0
    e534:	|         addq.l #8,d0
    e536:	|         move.l d0,-(sp)
    e538:	|         jsr 1219a <getValueType>
    e53e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e542:	|         moveq #24,d0
    e544:	|         add.l 12(sp),d0
    e548:	|         move.l d0,-(sp)
    e54a:	|         jsr 12b1e <trimStack>
    e550:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    e552:	|         move.l (sp),d0
    e554:	|         move.l d0,-(sp)
    e556:	|         jsr 1398c <setFloor>
    e55c:	|         addq.l #4,sp
    e55e:	|         tst.w d0
    e560:	|  /----- bne.s e57c <builtIn_setFloor+0x6a>
    e562:	|  |      moveq #1,d0
    e564:	|  |  /-- bra.s e57e <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    e566:	\--|--|-> moveq #24,d0
    e568:	   |  |   add.l 12(sp),d0
    e56c:	   |  |   move.l d0,-(sp)
    e56e:	   |  |   jsr 12b1e <trimStack>
    e574:	   |  |   addq.l #4,sp
		setFloorNull ();
    e576:	   |  |   jsr 14106 <setFloorNull>
	}
	return BR_CONTINUE;
    e57c:	   \--|-> moveq #2,d0
}
    e57e:	      \-> addq.l #4,sp
    e580:	          rts

0000e582 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    e582:	jsr 13224 <drawFloor>
	return BR_CONTINUE;
    e588:	moveq #2,d0
}
    e58a:	rts

0000e58c <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    e58c:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e58e:	          movea.l 12(sp),a0
    e592:	          movea.l 24(a0),a0
    e596:	          move.l (a0),d0
    e598:	          moveq #5,d1
    e59a:	          cmp.l d0,d1
    e59c:	/-------- bne.s e5e0 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e59e:	|         movea.l 12(sp),a0
    e5a2:	|         move.l 24(a0),d0
    e5a6:	|         move.l d0,-(sp)
    e5a8:	|         pea 5 <_start+0x5>
    e5ac:	|         move.l sp,d0
    e5ae:	|         addq.l #8,d0
    e5b0:	|         move.l d0,-(sp)
    e5b2:	|         jsr 1219a <getValueType>
    e5b8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e5bc:	|         moveq #24,d0
    e5be:	|         add.l 12(sp),d0
    e5c2:	|         move.l d0,-(sp)
    e5c4:	|         jsr 12b1e <trimStack>
    e5ca:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    e5cc:	|         move.l (sp),d0
    e5ce:	|         move.l d0,-(sp)
    e5d0:	|         jsr 6696 <setZBuffer>
    e5d6:	|         addq.l #4,sp
    e5d8:	|         tst.w d0
    e5da:	|  /----- bne.s e5f6 <builtIn_setZBuffer+0x6a>
    e5dc:	|  |      moveq #1,d0
    e5de:	|  |  /-- bra.s e5f8 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    e5e0:	\--|--|-> moveq #24,d0
    e5e2:	   |  |   add.l 12(sp),d0
    e5e6:	   |  |   move.l d0,-(sp)
    e5e8:	   |  |   jsr 12b1e <trimStack>
    e5ee:	   |  |   addq.l #4,sp
		killZBuffer ();
    e5f0:	   |  |   jsr 6640 <killZBuffer>
	}
	return BR_CONTINUE;
    e5f6:	   \--|-> moveq #2,d0
}
    e5f8:	      \-> addq.l #4,sp
    e5fa:	          rts

0000e5fc <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    e5fc:	pea 1654e <custom.c.49191367+0x1822>
    e602:	jsr 141e2 <KPrintF>
    e608:	addq.l #4,sp
	return BR_CONTINUE;
    e60a:	moveq #2,d0
}
    e60c:	rts

0000e60e <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e60e:	          movea.l 8(sp),a0
    e612:	          move.l 24(a0),d0
    e616:	          move.l d0,-(sp)
    e618:	          pea 1 <_start+0x1>
    e61c:	          pea 194ae <speechMode>
    e622:	          jsr 1219a <getValueType>
    e628:	          lea 12(sp),sp
    e62c:	          tst.w d0
    e62e:	      /-- bne.s e634 <builtIn_setSpeechMode+0x26>
    e630:	      |   moveq #1,d0
    e632:	/-----|-- bra.s e66c <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    e634:	|     \-> moveq #24,d0
    e636:	|         add.l 8(sp),d0
    e63a:	|         move.l d0,-(sp)
    e63c:	|         jsr 12b1e <trimStack>
    e642:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    e644:	|         move.l 194ae <speechMode>,d0
    e64a:	|     /-- bmi.s e658 <builtIn_setSpeechMode+0x4a>
    e64c:	|     |   move.l 194ae <speechMode>,d0
    e652:	|     |   moveq #2,d1
    e654:	|     |   cmp.l d0,d1
    e656:	|  /--|-- bge.s e66a <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    e658:	|  |  \-> pea 16567 <custom.c.49191367+0x183b>
    e65e:	|  |      jsr 141e2 <KPrintF>
    e664:	|  |      addq.l #4,sp
		return BR_ERROR;
    e666:	|  |      moveq #1,d0
    e668:	+--|----- bra.s e66c <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    e66a:	|  \----> moveq #2,d0
}
    e66c:	\-------> rts

0000e66e <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    e66e:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    e670:	       jsr 5e48 <isThereAnySpeechGoingOn>
    e676:	       move.l d0,(sp)
	if (i == -1) {
    e678:	       moveq #-1,d0
    e67a:	       cmp.l (sp),d0
    e67c:	/----- bne.s e698 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    e67e:	|      moveq #28,d0
    e680:	|      add.l 12(sp),d0
    e684:	|      clr.l -(sp)
    e686:	|      pea 1 <_start+0x1>
    e68a:	|      move.l d0,-(sp)
    e68c:	|      jsr 12a8c <setVariable>
    e692:	|      lea 12(sp),sp
    e696:	|  /-- bra.s e6b0 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    e698:	\--|-> moveq #28,d0
    e69a:	   |   add.l 12(sp),d0
    e69e:	   |   move.l (sp),-(sp)
    e6a0:	   |   pea 7 <_start+0x7>
    e6a4:	   |   move.l d0,-(sp)
    e6a6:	   |   jsr 12a8c <setVariable>
    e6ac:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e6b0:	   \-> moveq #2,d0
}
    e6b2:	       addq.l #4,sp
    e6b4:	       rts

0000e6b6 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    e6b6:	jsr 4178 <killSpeechTimers>
	return BR_CONTINUE;
    e6bc:	moveq #2,d0
}
    e6be:	rts

0000e6c0 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    e6c0:	       move.l 194e8 <overRegion>,d0
    e6c6:	/----- beq.s e6f0 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    e6c8:	|      movea.l 194e8 <overRegion>,a0
    e6ce:	|      movea.l 28(a0),a0
    e6d2:	|      move.l 4(a0),d1
    e6d6:	|      moveq #28,d0
    e6d8:	|      add.l 8(sp),d0
    e6dc:	|      move.l d1,-(sp)
    e6de:	|      pea 7 <_start+0x7>
    e6e2:	|      move.l d0,-(sp)
    e6e4:	|      jsr 12a8c <setVariable>
    e6ea:	|      lea 12(sp),sp
    e6ee:	|  /-- bra.s e708 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    e6f0:	\--|-> moveq #28,d0
    e6f2:	   |   add.l 8(sp),d0
    e6f6:	   |   clr.l -(sp)
    e6f8:	   |   pea 1 <_start+0x1>
    e6fc:	   |   move.l d0,-(sp)
    e6fe:	   |   jsr 12a8c <setVariable>
    e704:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    e708:	   \-> moveq #2,d0
}
    e70a:	       rts

0000e70c <builtIn_rename>:

builtIn(rename)
{
    e70c:	       lea -16(sp),sp
    e710:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e712:	       movea.l 28(sp),a0
    e716:	       move.l 24(a0),d0
    e71a:	       move.l d0,-(sp)
    e71c:	       jsr 12770 <getTextFromAnyVar>
    e722:	       addq.l #4,sp
    e724:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    e728:	   /-- bne.s e72e <builtIn_rename+0x22>
    e72a:	   |   moveq #1,d0
    e72c:	/--|-- bra.s e7a8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e72e:	|  \-> moveq #24,d0
    e730:	|      add.l 28(sp),d0
    e734:	|      move.l d0,-(sp)
    e736:	|      jsr 12b1e <trimStack>
    e73c:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    e73e:	|      movea.l 28(sp),a0
    e742:	|      move.l 24(a0),d0
    e746:	|      move.l d0,-(sp)
    e748:	|      pea 7 <_start+0x7>
    e74c:	|      lea 12(sp),a0
    e750:	|      move.l a0,-(sp)
    e752:	|      jsr 1219a <getValueType>
    e758:	|      lea 12(sp),sp
    e75c:	|      tst.w d0
    e75e:	|  /-- bne.s e764 <builtIn_rename+0x58>
    e760:	|  |   moveq #1,d0
    e762:	+--|-- bra.s e7a8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e764:	|  \-> moveq #24,d0
    e766:	|      add.l 28(sp),d0
    e76a:	|      move.l d0,-(sp)
    e76c:	|      jsr 12b1e <trimStack>
    e772:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    e774:	|      move.l 4(sp),d0
    e778:	|      move.l d0,-(sp)
    e77a:	|      jsr afd0 <findObjectType>
    e780:	|      addq.l #4,sp
    e782:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    e786:	|      movea.l 12(sp),a0
    e78a:	|      move.l (a0),8(sp)
    e78e:	|      move.l 1938c <SysBase>,d0
    e794:	|      movea.l d0,a6
    e796:	|      movea.l 8(sp),a1
    e79a:	|      jsr -690(a6)
	o->screenName = newText;
    e79e:	|      movea.l 12(sp),a0
    e7a2:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    e7a6:	|      moveq #2,d0
}
    e7a8:	\----> movea.l (sp)+,a6
    e7aa:	       lea 16(sp),sp
    e7ae:	       rts

0000e7b0 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    e7b0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7b4:	          movea.l 20(sp),a0
    e7b8:	          move.l 24(a0),d0
    e7bc:	          move.l d0,-(sp)
    e7be:	          pea 7 <_start+0x7>
    e7c2:	          lea 8(sp),a0
    e7c6:	          move.l a0,-(sp)
    e7c8:	          jsr 1219a <getValueType>
    e7ce:	          lea 12(sp),sp
    e7d2:	          tst.w d0
    e7d4:	      /-- bne.s e7dc <builtIn_getObjectX+0x2c>
    e7d6:	      |   moveq #1,d0
    e7d8:	/-----|-- bra.w e878 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    e7dc:	|     \-> moveq #24,d0
    e7de:	|         add.l 20(sp),d0
    e7e2:	|         move.l d0,-(sp)
    e7e4:	|         jsr 12b1e <trimStack>
    e7ea:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e7ec:	|         move.l (sp),d0
    e7ee:	|         move.l d0,-(sp)
    e7f0:	|         jsr 8284 <findPerson>
    e7f6:	|         addq.l #4,sp
    e7f8:	|         move.l d0,8(sp)
	if (pers) {
    e7fc:	|     /-- beq.s e82a <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    e7fe:	|     |   movea.l 8(sp),a0
    e802:	|     |   move.l (a0),d0
    e804:	|     |   move.l d0,-(sp)
    e806:	|     |   jsr 14432 <__fixsfsi>
    e80c:	|     |   addq.l #4,sp
    e80e:	|     |   move.l d0,d1
    e810:	|     |   moveq #28,d0
    e812:	|     |   add.l 20(sp),d0
    e816:	|     |   move.l d1,-(sp)
    e818:	|     |   pea 1 <_start+0x1>
    e81c:	|     |   move.l d0,-(sp)
    e81e:	|     |   jsr 12a8c <setVariable>
    e824:	|     |   lea 12(sp),sp
    e828:	|  /--|-- bra.s e876 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e82a:	|  |  \-> move.l (sp),d0
    e82c:	|  |      move.l d0,-(sp)
    e82e:	|  |      jsr 12c64 <getRegionForObject>
    e834:	|  |      addq.l #4,sp
    e836:	|  |      move.l d0,4(sp)
		if (la) {
    e83a:	|  |  /-- beq.s e85e <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    e83c:	|  |  |   movea.l 4(sp),a0
    e840:	|  |  |   move.l 16(a0),d1
    e844:	|  |  |   moveq #28,d0
    e846:	|  |  |   add.l 20(sp),d0
    e84a:	|  |  |   move.l d1,-(sp)
    e84c:	|  |  |   pea 1 <_start+0x1>
    e850:	|  |  |   move.l d0,-(sp)
    e852:	|  |  |   jsr 12a8c <setVariable>
    e858:	|  |  |   lea 12(sp),sp
    e85c:	|  +--|-- bra.s e876 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e85e:	|  |  \-> moveq #28,d0
    e860:	|  |      add.l 20(sp),d0
    e864:	|  |      clr.l -(sp)
    e866:	|  |      pea 1 <_start+0x1>
    e86a:	|  |      move.l d0,-(sp)
    e86c:	|  |      jsr 12a8c <setVariable>
    e872:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e876:	|  \----> moveq #2,d0
}
    e878:	\-------> lea 12(sp),sp
    e87c:	          rts

0000e87e <builtIn_getObjectY>:

builtIn (getObjectY)
{
    e87e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e882:	          movea.l 20(sp),a0
    e886:	          move.l 24(a0),d0
    e88a:	          move.l d0,-(sp)
    e88c:	          pea 7 <_start+0x7>
    e890:	          lea 8(sp),a0
    e894:	          move.l a0,-(sp)
    e896:	          jsr 1219a <getValueType>
    e89c:	          lea 12(sp),sp
    e8a0:	          tst.w d0
    e8a2:	      /-- bne.s e8aa <builtIn_getObjectY+0x2c>
    e8a4:	      |   moveq #1,d0
    e8a6:	/-----|-- bra.w e948 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    e8aa:	|     \-> moveq #24,d0
    e8ac:	|         add.l 20(sp),d0
    e8b0:	|         move.l d0,-(sp)
    e8b2:	|         jsr 12b1e <trimStack>
    e8b8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e8ba:	|         move.l (sp),d0
    e8bc:	|         move.l d0,-(sp)
    e8be:	|         jsr 8284 <findPerson>
    e8c4:	|         addq.l #4,sp
    e8c6:	|         move.l d0,8(sp)
	if (pers) {
    e8ca:	|     /-- beq.s e8fa <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    e8cc:	|     |   movea.l 8(sp),a0
    e8d0:	|     |   move.l 4(a0),d0
    e8d4:	|     |   move.l d0,-(sp)
    e8d6:	|     |   jsr 14432 <__fixsfsi>
    e8dc:	|     |   addq.l #4,sp
    e8de:	|     |   move.l d0,d1
    e8e0:	|     |   moveq #28,d0
    e8e2:	|     |   add.l 20(sp),d0
    e8e6:	|     |   move.l d1,-(sp)
    e8e8:	|     |   pea 1 <_start+0x1>
    e8ec:	|     |   move.l d0,-(sp)
    e8ee:	|     |   jsr 12a8c <setVariable>
    e8f4:	|     |   lea 12(sp),sp
    e8f8:	|  /--|-- bra.s e946 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e8fa:	|  |  \-> move.l (sp),d0
    e8fc:	|  |      move.l d0,-(sp)
    e8fe:	|  |      jsr 12c64 <getRegionForObject>
    e904:	|  |      addq.l #4,sp
    e906:	|  |      move.l d0,4(sp)
		if (la) {
    e90a:	|  |  /-- beq.s e92e <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    e90c:	|  |  |   movea.l 4(sp),a0
    e910:	|  |  |   move.l 20(a0),d1
    e914:	|  |  |   moveq #28,d0
    e916:	|  |  |   add.l 20(sp),d0
    e91a:	|  |  |   move.l d1,-(sp)
    e91c:	|  |  |   pea 1 <_start+0x1>
    e920:	|  |  |   move.l d0,-(sp)
    e922:	|  |  |   jsr 12a8c <setVariable>
    e928:	|  |  |   lea 12(sp),sp
    e92c:	|  +--|-- bra.s e946 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e92e:	|  |  \-> moveq #28,d0
    e930:	|  |      add.l 20(sp),d0
    e934:	|  |      clr.l -(sp)
    e936:	|  |      pea 1 <_start+0x1>
    e93a:	|  |      move.l d0,-(sp)
    e93c:	|  |      jsr 12a8c <setVariable>
    e942:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e946:	|  \----> moveq #2,d0
}
    e948:	\-------> lea 12(sp),sp
    e94c:	          rts

0000e94e <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    e94e:	       lea -32(sp),sp
    e952:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e956:	       movea.l 56(sp),a0
    e95a:	       move.l 24(a0),d0
    e95e:	       move.l d0,-(sp)
    e960:	       pea 1 <_start+0x1>
    e964:	       lea 28(sp),a0
    e968:	       move.l a0,-(sp)
    e96a:	       jsr 1219a <getValueType>
    e970:	       lea 12(sp),sp
    e974:	       tst.w d0
    e976:	   /-- bne.s e97e <builtIn_addScreenRegion+0x30>
    e978:	   |   moveq #1,d0
    e97a:	/--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e97e:	|  \-> moveq #24,d0
    e980:	|      add.l 56(sp),d0
    e984:	|      move.l d0,-(sp)
    e986:	|      jsr 12b1e <trimStack>
    e98c:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e98e:	|      movea.l 56(sp),a0
    e992:	|      move.l 24(a0),d0
    e996:	|      move.l d0,-(sp)
    e998:	|      pea 1 <_start+0x1>
    e99c:	|      moveq #48,d0
    e99e:	|      add.l sp,d0
    e9a0:	|      move.l d0,-(sp)
    e9a2:	|      jsr 1219a <getValueType>
    e9a8:	|      lea 12(sp),sp
    e9ac:	|      tst.w d0
    e9ae:	|  /-- bne.s e9b6 <builtIn_addScreenRegion+0x68>
    e9b0:	|  |   moveq #1,d0
    e9b2:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e9b6:	|  \-> moveq #24,d0
    e9b8:	|      add.l 56(sp),d0
    e9bc:	|      move.l d0,-(sp)
    e9be:	|      jsr 12b1e <trimStack>
    e9c4:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9c6:	|      movea.l 56(sp),a0
    e9ca:	|      move.l 24(a0),d0
    e9ce:	|      move.l d0,-(sp)
    e9d0:	|      pea 1 <_start+0x1>
    e9d4:	|      moveq #52,d0
    e9d6:	|      add.l sp,d0
    e9d8:	|      move.l d0,-(sp)
    e9da:	|      jsr 1219a <getValueType>
    e9e0:	|      lea 12(sp),sp
    e9e4:	|      tst.w d0
    e9e6:	|  /-- bne.s e9ee <builtIn_addScreenRegion+0xa0>
    e9e8:	|  |   moveq #1,d0
    e9ea:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e9ee:	|  \-> moveq #24,d0
    e9f0:	|      add.l 56(sp),d0
    e9f4:	|      move.l d0,-(sp)
    e9f6:	|      jsr 12b1e <trimStack>
    e9fc:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9fe:	|      movea.l 56(sp),a0
    ea02:	|      move.l 24(a0),d0
    ea06:	|      move.l d0,-(sp)
    ea08:	|      pea 1 <_start+0x1>
    ea0c:	|      lea 32(sp),a0
    ea10:	|      move.l a0,-(sp)
    ea12:	|      jsr 1219a <getValueType>
    ea18:	|      lea 12(sp),sp
    ea1c:	|      tst.w d0
    ea1e:	|  /-- bne.s ea26 <builtIn_addScreenRegion+0xd8>
    ea20:	|  |   moveq #1,d0
    ea22:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ea26:	|  \-> moveq #24,d0
    ea28:	|      add.l 56(sp),d0
    ea2c:	|      move.l d0,-(sp)
    ea2e:	|      jsr 12b1e <trimStack>
    ea34:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea36:	|      movea.l 56(sp),a0
    ea3a:	|      move.l 24(a0),d0
    ea3e:	|      move.l d0,-(sp)
    ea40:	|      pea 1 <_start+0x1>
    ea44:	|      lea 36(sp),a0
    ea48:	|      move.l a0,-(sp)
    ea4a:	|      jsr 1219a <getValueType>
    ea50:	|      lea 12(sp),sp
    ea54:	|      tst.w d0
    ea56:	|  /-- bne.s ea5e <builtIn_addScreenRegion+0x110>
    ea58:	|  |   moveq #1,d0
    ea5a:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ea5e:	|  \-> moveq #24,d0
    ea60:	|      add.l 56(sp),d0
    ea64:	|      move.l d0,-(sp)
    ea66:	|      jsr 12b1e <trimStack>
    ea6c:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6e:	|      movea.l 56(sp),a0
    ea72:	|      move.l 24(a0),d0
    ea76:	|      move.l d0,-(sp)
    ea78:	|      pea 1 <_start+0x1>
    ea7c:	|      lea 40(sp),a0
    ea80:	|      move.l a0,-(sp)
    ea82:	|      jsr 1219a <getValueType>
    ea88:	|      lea 12(sp),sp
    ea8c:	|      tst.w d0
    ea8e:	|  /-- bne.s ea96 <builtIn_addScreenRegion+0x148>
    ea90:	|  |   moveq #1,d0
    ea92:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ea96:	|  \-> moveq #24,d0
    ea98:	|      add.l 56(sp),d0
    ea9c:	|      move.l d0,-(sp)
    ea9e:	|      jsr 12b1e <trimStack>
    eaa4:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa6:	|      movea.l 56(sp),a0
    eaaa:	|      move.l 24(a0),d0
    eaae:	|      move.l d0,-(sp)
    eab0:	|      pea 1 <_start+0x1>
    eab4:	|      lea 44(sp),a0
    eab8:	|      move.l a0,-(sp)
    eaba:	|      jsr 1219a <getValueType>
    eac0:	|      lea 12(sp),sp
    eac4:	|      tst.w d0
    eac6:	|  /-- bne.s eace <builtIn_addScreenRegion+0x180>
    eac8:	|  |   moveq #1,d0
    eaca:	+--|-- bra.w eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    eace:	|  \-> moveq #24,d0
    ead0:	|      add.l 56(sp),d0
    ead4:	|      move.l d0,-(sp)
    ead6:	|      jsr 12b1e <trimStack>
    eadc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eade:	|      movea.l 56(sp),a0
    eae2:	|      move.l 24(a0),d0
    eae6:	|      move.l d0,-(sp)
    eae8:	|      pea 7 <_start+0x7>
    eaec:	|      lea 24(sp),a0
    eaf0:	|      move.l a0,-(sp)
    eaf2:	|      jsr 1219a <getValueType>
    eaf8:	|      lea 12(sp),sp
    eafc:	|      tst.w d0
    eafe:	|  /-- bne.s eb04 <builtIn_addScreenRegion+0x1b6>
    eb00:	|  |   moveq #1,d0
    eb02:	+--|-- bra.s eb58 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    eb04:	|  \-> moveq #24,d0
    eb06:	|      add.l 56(sp),d0
    eb0a:	|      move.l d0,-(sp)
    eb0c:	|      jsr 12b1e <trimStack>
    eb12:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    eb14:	|      move.l 16(sp),d5
    eb18:	|      move.l 20(sp),d4
    eb1c:	|      move.l 40(sp),d3
    eb20:	|      move.l 44(sp),d2
    eb24:	|      movea.l 24(sp),a1
    eb28:	|      movea.l 28(sp),a0
    eb2c:	|      move.l 32(sp),d1
    eb30:	|      move.l 36(sp),d0
    eb34:	|      move.l d5,-(sp)
    eb36:	|      move.l d4,-(sp)
    eb38:	|      move.l d3,-(sp)
    eb3a:	|      move.l d2,-(sp)
    eb3c:	|      move.l a1,-(sp)
    eb3e:	|      move.l a0,-(sp)
    eb40:	|      move.l d1,-(sp)
    eb42:	|      move.l d0,-(sp)
    eb44:	|      jsr 12ba4 <addScreenRegion>
    eb4a:	|      lea 32(sp),sp
    eb4e:	|      tst.w d0
    eb50:	|  /-- beq.s eb56 <builtIn_addScreenRegion+0x208>
    eb52:	|  |   moveq #2,d0
    eb54:	+--|-- bra.s eb58 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    eb56:	|  \-> moveq #1,d0

}
    eb58:	\----> movem.l (sp)+,d2-d5
    eb5c:	       lea 32(sp),sp
    eb60:	       rts

0000eb62 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    eb62:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb64:	       movea.l 12(sp),a0
    eb68:	       move.l 24(a0),d0
    eb6c:	       move.l d0,-(sp)
    eb6e:	       pea 7 <_start+0x7>
    eb72:	       move.l sp,d0
    eb74:	       addq.l #8,d0
    eb76:	       move.l d0,-(sp)
    eb78:	       jsr 1219a <getValueType>
    eb7e:	       lea 12(sp),sp
    eb82:	       tst.w d0
    eb84:	   /-- bne.s eb8a <builtIn_removeScreenRegion+0x28>
    eb86:	   |   moveq #1,d0
    eb88:	/--|-- bra.s eba8 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    eb8a:	|  \-> moveq #24,d0
    eb8c:	|      add.l 12(sp),d0
    eb90:	|      move.l d0,-(sp)
    eb92:	|      jsr 12b1e <trimStack>
    eb98:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    eb9a:	|      move.l (sp),d0
    eb9c:	|      move.l d0,-(sp)
    eb9e:	|      jsr 12e0c <removeScreenRegion>
    eba4:	|      addq.l #4,sp
	return BR_CONTINUE;
    eba6:	|      moveq #2,d0
}
    eba8:	\----> addq.l #4,sp
    ebaa:	       rts

0000ebac <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    ebac:	jsr 12f90 <showBoxes>
	return BR_CONTINUE;
    ebb2:	moveq #2,d0
}
    ebb4:	rts

0000ebb6 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    ebb6:	jsr 12c92 <killAllRegions>
	return BR_CONTINUE;
    ebbc:	moveq #2,d0
}
    ebbe:	rts

0000ebc0 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    ebc0:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    ebc4:	       movea.l 24(sp),a0
    ebc8:	       move.l 24(a0),d0
    ebcc:	       move.l d0,-(sp)
    ebce:	       jsr 11e46 <getCostumeFromVar>
    ebd4:	       addq.l #4,sp
    ebd6:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    ebda:	   /-- bne.s ebe2 <builtIn_addCharacter+0x22>
    ebdc:	   |   moveq #1,d0
    ebde:	/--|-- bra.w ecbe <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    ebe2:	|  \-> moveq #24,d0
    ebe4:	|      add.l 24(sp),d0
    ebe8:	|      move.l d0,-(sp)
    ebea:	|      jsr 12b1e <trimStack>
    ebf0:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebf2:	|      movea.l 24(sp),a0
    ebf6:	|      move.l 24(a0),d0
    ebfa:	|      move.l d0,-(sp)
    ebfc:	|      pea 1 <_start+0x1>
    ec00:	|      lea 12(sp),a0
    ec04:	|      move.l a0,-(sp)
    ec06:	|      jsr 1219a <getValueType>
    ec0c:	|      lea 12(sp),sp
    ec10:	|      tst.w d0
    ec12:	|  /-- bne.s ec1a <builtIn_addCharacter+0x5a>
    ec14:	|  |   moveq #1,d0
    ec16:	+--|-- bra.w ecbe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    ec1a:	|  \-> moveq #24,d0
    ec1c:	|      add.l 24(sp),d0
    ec20:	|      move.l d0,-(sp)
    ec22:	|      jsr 12b1e <trimStack>
    ec28:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec2a:	|      movea.l 24(sp),a0
    ec2e:	|      move.l 24(a0),d0
    ec32:	|      move.l d0,-(sp)
    ec34:	|      pea 1 <_start+0x1>
    ec38:	|      moveq #16,d0
    ec3a:	|      add.l sp,d0
    ec3c:	|      move.l d0,-(sp)
    ec3e:	|      jsr 1219a <getValueType>
    ec44:	|      lea 12(sp),sp
    ec48:	|      tst.w d0
    ec4a:	|  /-- bne.s ec50 <builtIn_addCharacter+0x90>
    ec4c:	|  |   moveq #1,d0
    ec4e:	+--|-- bra.s ecbe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    ec50:	|  \-> moveq #24,d0
    ec52:	|      add.l 24(sp),d0
    ec56:	|      move.l d0,-(sp)
    ec58:	|      jsr 12b1e <trimStack>
    ec5e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec60:	|      movea.l 24(sp),a0
    ec64:	|      move.l 24(a0),d0
    ec68:	|      move.l d0,-(sp)
    ec6a:	|      pea 7 <_start+0x7>
    ec6e:	|      lea 8(sp),a0
    ec72:	|      move.l a0,-(sp)
    ec74:	|      jsr 1219a <getValueType>
    ec7a:	|      lea 12(sp),sp
    ec7e:	|      tst.w d0
    ec80:	|  /-- bne.s ec86 <builtIn_addCharacter+0xc6>
    ec82:	|  |   moveq #1,d0
    ec84:	+--|-- bra.s ecbe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    ec86:	|  \-> moveq #24,d0
    ec88:	|      add.l 24(sp),d0
    ec8c:	|      move.l d0,-(sp)
    ec8e:	|      jsr 12b1e <trimStack>
    ec94:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    ec96:	|      movea.l (sp),a0
    ec98:	|      move.l 4(sp),d1
    ec9c:	|      move.l 8(sp),d0
    eca0:	|      move.l 12(sp),-(sp)
    eca4:	|      move.l a0,-(sp)
    eca6:	|      move.l d1,-(sp)
    eca8:	|      move.l d0,-(sp)
    ecaa:	|      jsr 6f54 <addPerson>
    ecb0:	|      lea 16(sp),sp
    ecb4:	|      tst.w d0
    ecb6:	|  /-- beq.s ecbc <builtIn_addCharacter+0xfc>
    ecb8:	|  |   moveq #2,d0
    ecba:	+--|-- bra.s ecbe <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    ecbc:	|  \-> moveq #1,d0
}
    ecbe:	\----> lea 16(sp),sp
    ecc2:	       rts

0000ecc4 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    ecc4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc6:	       movea.l 12(sp),a0
    ecca:	       move.l 24(a0),d0
    ecce:	       move.l d0,-(sp)
    ecd0:	       pea 7 <_start+0x7>
    ecd4:	       move.l sp,d0
    ecd6:	       addq.l #8,d0
    ecd8:	       move.l d0,-(sp)
    ecda:	       jsr 1219a <getValueType>
    ece0:	       lea 12(sp),sp
    ece4:	       tst.w d0
    ece6:	   /-- bne.s ecec <builtIn_hideCharacter+0x28>
    ece8:	   |   moveq #1,d0
    ecea:	/--|-- bra.s ed0c <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    ecec:	|  \-> moveq #24,d0
    ecee:	|      add.l 12(sp),d0
    ecf2:	|      move.l d0,-(sp)
    ecf4:	|      jsr 12b1e <trimStack>
    ecfa:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    ecfc:	|      move.l (sp),d0
    ecfe:	|      move.l d0,-(sp)
    ed00:	|      clr.l -(sp)
    ed02:	|      jsr 9874 <setShown>
    ed08:	|      addq.l #8,sp
	return BR_CONTINUE;
    ed0a:	|      moveq #2,d0
}
    ed0c:	\----> addq.l #4,sp
    ed0e:	       rts

0000ed10 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    ed10:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed12:	       movea.l 12(sp),a0
    ed16:	       move.l 24(a0),d0
    ed1a:	       move.l d0,-(sp)
    ed1c:	       pea 7 <_start+0x7>
    ed20:	       move.l sp,d0
    ed22:	       addq.l #8,d0
    ed24:	       move.l d0,-(sp)
    ed26:	       jsr 1219a <getValueType>
    ed2c:	       lea 12(sp),sp
    ed30:	       tst.w d0
    ed32:	   /-- bne.s ed38 <builtIn_showCharacter+0x28>
    ed34:	   |   moveq #1,d0
    ed36:	/--|-- bra.s ed5a <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    ed38:	|  \-> moveq #24,d0
    ed3a:	|      add.l 12(sp),d0
    ed3e:	|      move.l d0,-(sp)
    ed40:	|      jsr 12b1e <trimStack>
    ed46:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    ed48:	|      move.l (sp),d0
    ed4a:	|      move.l d0,-(sp)
    ed4c:	|      pea 1 <_start+0x1>
    ed50:	|      jsr 9874 <setShown>
    ed56:	|      addq.l #8,sp
	return BR_CONTINUE;
    ed58:	|      moveq #2,d0
}
    ed5a:	\----> addq.l #4,sp
    ed5c:	       rts

0000ed5e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    ed5e:	jsr 4178 <killSpeechTimers>
	killMostPeople ();
    ed64:	jsr 86f0 <killMostPeople>
	return BR_CONTINUE;
    ed6a:	moveq #2,d0
}
    ed6c:	rts

0000ed6e <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    ed6e:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed70:	       movea.l 16(sp),a0
    ed74:	       move.l 24(a0),d0
    ed78:	       move.l d0,-(sp)
    ed7a:	       pea 1 <_start+0x1>
    ed7e:	       move.l sp,d0
    ed80:	       addq.l #8,d0
    ed82:	       move.l d0,-(sp)
    ed84:	       jsr 1219a <getValueType>
    ed8a:	       lea 12(sp),sp
    ed8e:	       tst.w d0
    ed90:	   /-- bne.s ed96 <builtIn_setCharacterDrawMode+0x28>
    ed92:	   |   moveq #1,d0
    ed94:	/--|-- bra.s edf0 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    ed96:	|  \-> moveq #24,d0
    ed98:	|      add.l 16(sp),d0
    ed9c:	|      move.l d0,-(sp)
    ed9e:	|      jsr 12b1e <trimStack>
    eda4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eda6:	|      movea.l 16(sp),a0
    edaa:	|      move.l 24(a0),d0
    edae:	|      move.l d0,-(sp)
    edb0:	|      pea 7 <_start+0x7>
    edb4:	|      moveq #12,d0
    edb6:	|      add.l sp,d0
    edb8:	|      move.l d0,-(sp)
    edba:	|      jsr 1219a <getValueType>
    edc0:	|      lea 12(sp),sp
    edc4:	|      tst.w d0
    edc6:	|  /-- bne.s edcc <builtIn_setCharacterDrawMode+0x5e>
    edc8:	|  |   moveq #1,d0
    edca:	+--|-- bra.s edf0 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    edcc:	|  \-> moveq #24,d0
    edce:	|      add.l 16(sp),d0
    edd2:	|      move.l d0,-(sp)
    edd4:	|      jsr 12b1e <trimStack>
    edda:	|      addq.l #4,sp
	setDrawMode (di, obj);
    eddc:	|      move.l 4(sp),d1
    ede0:	|      move.l (sp),d0
    ede2:	|      move.l d1,-(sp)
    ede4:	|      move.l d0,-(sp)
    ede6:	|      jsr 91b2 <setDrawMode>
    edec:	|      addq.l #8,sp
	return BR_CONTINUE;
    edee:	|      moveq #2,d0
}
    edf0:	\----> addq.l #8,sp
    edf2:	       rts

0000edf4 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    edf4:	pea 165a5 <custom.c.49191367+0x1879>
    edfa:	jsr 141e2 <KPrintF>
    ee00:	addq.l #4,sp
	return BR_CONTINUE;
    ee02:	moveq #2,d0
}
    ee04:	rts

0000ee06 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    ee06:	pea 165d8 <custom.c.49191367+0x18ac>
    ee0c:	jsr 141e2 <KPrintF>
    ee12:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    ee14:	moveq #2,d0
}
    ee16:	rts

0000ee18 <builtIn_setScale>:

builtIn(setScale)
{
    ee18:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee1a:	       movea.l 16(sp),a0
    ee1e:	       move.l 24(a0),d0
    ee22:	       move.l d0,-(sp)
    ee24:	       pea 1 <_start+0x1>
    ee28:	       move.l sp,d0
    ee2a:	       addq.l #8,d0
    ee2c:	       move.l d0,-(sp)
    ee2e:	       jsr 1219a <getValueType>
    ee34:	       lea 12(sp),sp
    ee38:	       tst.w d0
    ee3a:	   /-- bne.s ee40 <builtIn_setScale+0x28>
    ee3c:	   |   moveq #1,d0
    ee3e:	/--|-- bra.s eea2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ee40:	|  \-> moveq #24,d0
    ee42:	|      add.l 16(sp),d0
    ee46:	|      move.l d0,-(sp)
    ee48:	|      jsr 12b1e <trimStack>
    ee4e:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee50:	|      movea.l 16(sp),a0
    ee54:	|      move.l 24(a0),d0
    ee58:	|      move.l d0,-(sp)
    ee5a:	|      pea 1 <_start+0x1>
    ee5e:	|      moveq #12,d0
    ee60:	|      add.l sp,d0
    ee62:	|      move.l d0,-(sp)
    ee64:	|      jsr 1219a <getValueType>
    ee6a:	|      lea 12(sp),sp
    ee6e:	|      tst.w d0
    ee70:	|  /-- bne.s ee76 <builtIn_setScale+0x5e>
    ee72:	|  |   moveq #1,d0
    ee74:	+--|-- bra.s eea2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ee76:	|  \-> moveq #24,d0
    ee78:	|      add.l 16(sp),d0
    ee7c:	|      move.l d0,-(sp)
    ee7e:	|      jsr 12b1e <trimStack>
    ee84:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    ee86:	|      move.l (sp),d0
    ee88:	|      move.l d0,d0
    ee8a:	|      movea.w d0,a1
    ee8c:	|      move.l 4(sp),d0
    ee90:	|      move.l d0,d0
    ee92:	|      movea.w d0,a0
    ee94:	|      move.l a1,-(sp)
    ee96:	|      move.l a0,-(sp)
    ee98:	|      jsr 984c <setScale>
    ee9e:	|      addq.l #8,sp
	return BR_CONTINUE;
    eea0:	|      moveq #2,d0
}
    eea2:	\----> addq.l #8,sp
    eea4:	       rts

0000eea6 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    eea6:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eea8:	       movea.l 12(sp),a0
    eeac:	       move.l 24(a0),d0
    eeb0:	       move.l d0,-(sp)
    eeb2:	       pea 7 <_start+0x7>
    eeb6:	       move.l sp,d0
    eeb8:	       addq.l #8,d0
    eeba:	       move.l d0,-(sp)
    eebc:	       jsr 1219a <getValueType>
    eec2:	       lea 12(sp),sp
    eec6:	       tst.w d0
    eec8:	   /-- bne.s eece <builtIn_stopCharacter+0x28>
    eeca:	   |   moveq #1,d0
    eecc:	/--|-- bra.s ef06 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    eece:	|  \-> moveq #24,d0
    eed0:	|      add.l 12(sp),d0
    eed4:	|      move.l d0,-(sp)
    eed6:	|      jsr 12b1e <trimStack>
    eedc:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    eede:	|      move.l (sp),d0
    eee0:	|      move.l d0,-(sp)
    eee2:	|      jsr 9980 <stopPerson>
    eee8:	|      addq.l #4,sp
    eeea:	|      movea.w d0,a0
    eeec:	|      moveq #28,d0
    eeee:	|      add.l 12(sp),d0
    eef2:	|      move.l a0,-(sp)
    eef4:	|      pea 1 <_start+0x1>
    eef8:	|      move.l d0,-(sp)
    eefa:	|      jsr 12a8c <setVariable>
    ef00:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ef04:	|      moveq #2,d0
}
    ef06:	\----> addq.l #4,sp
    ef08:	       rts

0000ef0a <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    ef0a:	pea 16612 <custom.c.49191367+0x18e6>
    ef10:	jsr 141e2 <KPrintF>
    ef16:	addq.l #4,sp
	return BR_CONTINUE;
    ef18:	moveq #2,d0
}
    ef1a:	rts

0000ef1c <builtIn_animate>:

builtIn(animate)
{
    ef1c:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ef1e:	       movea.l 16(sp),a0
    ef22:	       move.l 24(a0),d0
    ef26:	       move.l d0,-(sp)
    ef28:	       jsr 12672 <getAnimationFromVar>
    ef2e:	       addq.l #4,sp
    ef30:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    ef34:	   /-- bne.s ef3a <builtIn_animate+0x1e>
    ef36:	   |   moveq #1,d0
    ef38:	/--|-- bra.s efb8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    ef3a:	|  \-> moveq #24,d0
    ef3c:	|      add.l 16(sp),d0
    ef40:	|      move.l d0,-(sp)
    ef42:	|      jsr 12b1e <trimStack>
    ef48:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef4a:	|      movea.l 16(sp),a0
    ef4e:	|      move.l 24(a0),d0
    ef52:	|      move.l d0,-(sp)
    ef54:	|      pea 7 <_start+0x7>
    ef58:	|      move.l sp,d0
    ef5a:	|      addq.l #8,d0
    ef5c:	|      move.l d0,-(sp)
    ef5e:	|      jsr 1219a <getValueType>
    ef64:	|      lea 12(sp),sp
    ef68:	|      tst.w d0
    ef6a:	|  /-- bne.s ef70 <builtIn_animate+0x54>
    ef6c:	|  |   moveq #1,d0
    ef6e:	+--|-- bra.s efb8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    ef70:	|  \-> moveq #24,d0
    ef72:	|      add.l 16(sp),d0
    ef76:	|      move.l d0,-(sp)
    ef78:	|      jsr 12b1e <trimStack>
    ef7e:	|      addq.l #4,sp
	animatePerson (obj, pp);
    ef80:	|      move.l (sp),d0
    ef82:	|      move.l 4(sp),-(sp)
    ef86:	|      move.l d0,-(sp)
    ef88:	|      jsr 71c8 <animatePerson>
    ef8e:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    ef90:	|      move.l 4(sp),-(sp)
    ef94:	|      jsr 99d4 <timeForAnim>
    ef9a:	|      addq.l #4,sp
    ef9c:	|      move.l d0,d1
    ef9e:	|      moveq #28,d0
    efa0:	|      add.l 16(sp),d0
    efa4:	|      move.l d1,-(sp)
    efa6:	|      pea 1 <_start+0x1>
    efaa:	|      move.l d0,-(sp)
    efac:	|      jsr 12a8c <setVariable>
    efb2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    efb6:	|      moveq #2,d0
}
    efb8:	\----> addq.l #8,sp
    efba:	       rts

0000efbc <builtIn_setCostume>:

builtIn(setCostume)
{
    efbc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    efbe:	       movea.l 16(sp),a0
    efc2:	       move.l 24(a0),d0
    efc6:	       move.l d0,-(sp)
    efc8:	       jsr 11e46 <getCostumeFromVar>
    efce:	       addq.l #4,sp
    efd0:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    efd4:	   /-- bne.s efda <builtIn_setCostume+0x1e>
    efd6:	   |   moveq #1,d0
    efd8:	/--|-- bra.s f032 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    efda:	|  \-> moveq #24,d0
    efdc:	|      add.l 16(sp),d0
    efe0:	|      move.l d0,-(sp)
    efe2:	|      jsr 12b1e <trimStack>
    efe8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    efea:	|      movea.l 16(sp),a0
    efee:	|      move.l 24(a0),d0
    eff2:	|      move.l d0,-(sp)
    eff4:	|      pea 7 <_start+0x7>
    eff8:	|      move.l sp,d0
    effa:	|      addq.l #8,d0
    effc:	|      move.l d0,-(sp)
    effe:	|      jsr 1219a <getValueType>
    f004:	|      lea 12(sp),sp
    f008:	|      tst.w d0
    f00a:	|  /-- bne.s f010 <builtIn_setCostume+0x54>
    f00c:	|  |   moveq #1,d0
    f00e:	+--|-- bra.s f032 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    f010:	|  \-> moveq #24,d0
    f012:	|      add.l 16(sp),d0
    f016:	|      move.l d0,-(sp)
    f018:	|      jsr 12b1e <trimStack>
    f01e:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    f020:	|      move.l (sp),d0
    f022:	|      move.l 4(sp),-(sp)
    f026:	|      move.l d0,-(sp)
    f028:	|      jsr 7212 <animatePersonUsingPersona>
    f02e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f030:	|      moveq #2,d0
}
    f032:	\----> addq.l #8,sp
    f034:	       rts

0000f036 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    f036:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f038:	       movea.l 16(sp),a0
    f03c:	       move.l 24(a0),d0
    f040:	       move.l d0,-(sp)
    f042:	       pea 1 <_start+0x1>
    f046:	       move.l sp,d0
    f048:	       addq.l #8,d0
    f04a:	       move.l d0,-(sp)
    f04c:	       jsr 1219a <getValueType>
    f052:	       lea 12(sp),sp
    f056:	       tst.w d0
    f058:	   /-- bne.s f05e <builtIn_floatCharacter+0x28>
    f05a:	   |   moveq #1,d0
    f05c:	/--|-- bra.s f0d2 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f05e:	|  \-> moveq #24,d0
    f060:	|      add.l 16(sp),d0
    f064:	|      move.l d0,-(sp)
    f066:	|      jsr 12b1e <trimStack>
    f06c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f06e:	|      movea.l 16(sp),a0
    f072:	|      move.l 24(a0),d0
    f076:	|      move.l d0,-(sp)
    f078:	|      pea 7 <_start+0x7>
    f07c:	|      moveq #12,d0
    f07e:	|      add.l sp,d0
    f080:	|      move.l d0,-(sp)
    f082:	|      jsr 1219a <getValueType>
    f088:	|      lea 12(sp),sp
    f08c:	|      tst.w d0
    f08e:	|  /-- bne.s f094 <builtIn_floatCharacter+0x5e>
    f090:	|  |   moveq #1,d0
    f092:	+--|-- bra.s f0d2 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f094:	|  \-> moveq #24,d0
    f096:	|      add.l 16(sp),d0
    f09a:	|      move.l d0,-(sp)
    f09c:	|      jsr 12b1e <trimStack>
    f0a2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    f0a4:	|      move.l 4(sp),d1
    f0a8:	|      move.l (sp),d0
    f0aa:	|      move.l d1,-(sp)
    f0ac:	|      move.l d0,-(sp)
    f0ae:	|      jsr 82b2 <floatCharacter>
    f0b4:	|      addq.l #8,sp
    f0b6:	|      movea.w d0,a0
    f0b8:	|      moveq #28,d0
    f0ba:	|      add.l 16(sp),d0
    f0be:	|      move.l a0,-(sp)
    f0c0:	|      pea 1 <_start+0x1>
    f0c4:	|      move.l d0,-(sp)
    f0c6:	|      jsr 12a8c <setVariable>
    f0cc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f0d0:	|      moveq #2,d0
}
    f0d2:	\----> addq.l #8,sp
    f0d4:	       rts

0000f0d6 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    f0d6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0d8:	       movea.l 16(sp),a0
    f0dc:	       move.l 24(a0),d0
    f0e0:	       move.l d0,-(sp)
    f0e2:	       pea 1 <_start+0x1>
    f0e6:	       move.l sp,d0
    f0e8:	       addq.l #8,d0
    f0ea:	       move.l d0,-(sp)
    f0ec:	       jsr 1219a <getValueType>
    f0f2:	       lea 12(sp),sp
    f0f6:	       tst.w d0
    f0f8:	   /-- bne.s f0fe <builtIn_setCharacterWalkSpeed+0x28>
    f0fa:	   |   moveq #1,d0
    f0fc:	/--|-- bra.s f172 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    f0fe:	|  \-> moveq #24,d0
    f100:	|      add.l 16(sp),d0
    f104:	|      move.l d0,-(sp)
    f106:	|      jsr 12b1e <trimStack>
    f10c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f10e:	|      movea.l 16(sp),a0
    f112:	|      move.l 24(a0),d0
    f116:	|      move.l d0,-(sp)
    f118:	|      pea 7 <_start+0x7>
    f11c:	|      moveq #12,d0
    f11e:	|      add.l sp,d0
    f120:	|      move.l d0,-(sp)
    f122:	|      jsr 1219a <getValueType>
    f128:	|      lea 12(sp),sp
    f12c:	|      tst.w d0
    f12e:	|  /-- bne.s f134 <builtIn_setCharacterWalkSpeed+0x5e>
    f130:	|  |   moveq #1,d0
    f132:	+--|-- bra.s f172 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    f134:	|  \-> moveq #24,d0
    f136:	|      add.l 16(sp),d0
    f13a:	|      move.l d0,-(sp)
    f13c:	|      jsr 12b1e <trimStack>
    f142:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    f144:	|      move.l 4(sp),d1
    f148:	|      move.l (sp),d0
    f14a:	|      move.l d1,-(sp)
    f14c:	|      move.l d0,-(sp)
    f14e:	|      jsr 97e8 <setCharacterWalkSpeed>
    f154:	|      addq.l #8,sp
    f156:	|      movea.w d0,a0
    f158:	|      moveq #28,d0
    f15a:	|      add.l 16(sp),d0
    f15e:	|      move.l a0,-(sp)
    f160:	|      pea 1 <_start+0x1>
    f164:	|      move.l d0,-(sp)
    f166:	|      jsr 12a8c <setVariable>
    f16c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f170:	|      moveq #2,d0
}
    f172:	\----> addq.l #8,sp
    f174:	       rts

0000f176 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    f176:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f178:	       movea.l 16(sp),a0
    f17c:	       move.l 24(a0),d0
    f180:	       move.l d0,-(sp)
    f182:	       pea 1 <_start+0x1>
    f186:	       move.l sp,d0
    f188:	       addq.l #8,d0
    f18a:	       move.l d0,-(sp)
    f18c:	       jsr 1219a <getValueType>
    f192:	       lea 12(sp),sp
    f196:	       tst.w d0
    f198:	   /-- bne.s f19e <builtIn_turnCharacter+0x28>
    f19a:	   |   moveq #1,d0
    f19c:	/--|-- bra.s f212 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    f19e:	|  \-> moveq #24,d0
    f1a0:	|      add.l 16(sp),d0
    f1a4:	|      move.l d0,-(sp)
    f1a6:	|      jsr 12b1e <trimStack>
    f1ac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1ae:	|      movea.l 16(sp),a0
    f1b2:	|      move.l 24(a0),d0
    f1b6:	|      move.l d0,-(sp)
    f1b8:	|      pea 7 <_start+0x7>
    f1bc:	|      moveq #12,d0
    f1be:	|      add.l sp,d0
    f1c0:	|      move.l d0,-(sp)
    f1c2:	|      jsr 1219a <getValueType>
    f1c8:	|      lea 12(sp),sp
    f1cc:	|      tst.w d0
    f1ce:	|  /-- bne.s f1d4 <builtIn_turnCharacter+0x5e>
    f1d0:	|  |   moveq #1,d0
    f1d2:	+--|-- bra.s f212 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    f1d4:	|  \-> moveq #24,d0
    f1d6:	|      add.l 16(sp),d0
    f1da:	|      move.l d0,-(sp)
    f1dc:	|      jsr 12b1e <trimStack>
    f1e2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    f1e4:	|      move.l (sp),d1
    f1e6:	|      move.l 4(sp),d0
    f1ea:	|      move.l d1,-(sp)
    f1ec:	|      move.l d0,-(sp)
    f1ee:	|      jsr 9a8c <turnPersonToFace>
    f1f4:	|      addq.l #8,sp
    f1f6:	|      movea.w d0,a0
    f1f8:	|      moveq #28,d0
    f1fa:	|      add.l 16(sp),d0
    f1fe:	|      move.l a0,-(sp)
    f200:	|      pea 1 <_start+0x1>
    f204:	|      move.l d0,-(sp)
    f206:	|      jsr 12a8c <setVariable>
    f20c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f210:	|      moveq #2,d0
}
    f212:	\----> addq.l #8,sp
    f214:	       rts

0000f216 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    f216:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f218:	       movea.l 16(sp),a0
    f21c:	       move.l 24(a0),d0
    f220:	       move.l d0,-(sp)
    f222:	       pea 1 <_start+0x1>
    f226:	       move.l sp,d0
    f228:	       addq.l #8,d0
    f22a:	       move.l d0,-(sp)
    f22c:	       jsr 1219a <getValueType>
    f232:	       lea 12(sp),sp
    f236:	       tst.w d0
    f238:	   /-- bne.s f23e <builtIn_setCharacterExtra+0x28>
    f23a:	   |   moveq #1,d0
    f23c:	/--|-- bra.s f2b2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    f23e:	|  \-> moveq #24,d0
    f240:	|      add.l 16(sp),d0
    f244:	|      move.l d0,-(sp)
    f246:	|      jsr 12b1e <trimStack>
    f24c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f24e:	|      movea.l 16(sp),a0
    f252:	|      move.l 24(a0),d0
    f256:	|      move.l d0,-(sp)
    f258:	|      pea 7 <_start+0x7>
    f25c:	|      moveq #12,d0
    f25e:	|      add.l sp,d0
    f260:	|      move.l d0,-(sp)
    f262:	|      jsr 1219a <getValueType>
    f268:	|      lea 12(sp),sp
    f26c:	|      tst.w d0
    f26e:	|  /-- bne.s f274 <builtIn_setCharacterExtra+0x5e>
    f270:	|  |   moveq #1,d0
    f272:	+--|-- bra.s f2b2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    f274:	|  \-> moveq #24,d0
    f276:	|      add.l 16(sp),d0
    f27a:	|      move.l d0,-(sp)
    f27c:	|      jsr 12b1e <trimStack>
    f282:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    f284:	|      move.l (sp),d1
    f286:	|      move.l 4(sp),d0
    f28a:	|      move.l d1,-(sp)
    f28c:	|      move.l d0,-(sp)
    f28e:	|      jsr 9816 <setPersonExtra>
    f294:	|      addq.l #8,sp
    f296:	|      movea.w d0,a0
    f298:	|      moveq #28,d0
    f29a:	|      add.l 16(sp),d0
    f29e:	|      move.l a0,-(sp)
    f2a0:	|      pea 1 <_start+0x1>
    f2a4:	|      move.l d0,-(sp)
    f2a6:	|      jsr 12a8c <setVariable>
    f2ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f2b0:	|      moveq #2,d0
}
    f2b2:	\----> addq.l #8,sp
    f2b4:	       rts

0000f2b6 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    f2b6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f2b8:	       movea.l 12(sp),a0
    f2bc:	       move.l 24(a0),d0
    f2c0:	       move.l d0,-(sp)
    f2c2:	       pea 7 <_start+0x7>
    f2c6:	       move.l sp,d0
    f2c8:	       addq.l #8,d0
    f2ca:	       move.l d0,-(sp)
    f2cc:	       jsr 1219a <getValueType>
    f2d2:	       lea 12(sp),sp
    f2d6:	       tst.w d0
    f2d8:	   /-- bne.s f2de <builtIn_removeCharacter+0x28>
    f2da:	   |   moveq #1,d0
    f2dc:	/--|-- bra.s f2fc <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    f2de:	|  \-> moveq #24,d0
    f2e0:	|      add.l 12(sp),d0
    f2e4:	|      move.l d0,-(sp)
    f2e6:	|      jsr 12b1e <trimStack>
    f2ec:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    f2ee:	|      move.l (sp),d0
    f2f0:	|      move.l d0,-(sp)
    f2f2:	|      jsr 8a4a <removeOneCharacter>
    f2f8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f2fa:	|      moveq #2,d0
}
    f2fc:	\----> addq.l #4,sp
    f2fe:	       rts

0000f300 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    f300:	                lea -28(sp),sp
    f304:	                move.l d2,-(sp)
    f306:	                move.l 44(sp),d1
    f30a:	                move.l 48(sp),d0
    f30e:	                move.w d1,d1
    f310:	                move.w d1,6(sp)
    f314:	                move.w d0,d0
    f316:	                move.w d0,4(sp)
	switch (numParams) {
    f31a:	                moveq #2,d0
    f31c:	                cmp.l 36(sp),d0
    f320:	      /-------- beq.w f462 <moveChr+0x162>
    f324:	      |         moveq #3,d0
    f326:	      |         cmp.l 36(sp),d0
    f32a:	/-----|-------- bne.w f596 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f32e:	|     |         movea.l 40(sp),a0
    f332:	|     |         move.l 24(a0),d0
    f336:	|     |         move.l d0,-(sp)
    f338:	|     |         pea 1 <_start+0x1>
    f33c:	|     |         lea 20(sp),a0
    f340:	|     |         move.l a0,-(sp)
    f342:	|     |         jsr 1219a <getValueType>
    f348:	|     |         lea 12(sp),sp
    f34c:	|     |         tst.w d0
    f34e:	|     |     /-- bne.s f356 <moveChr+0x56>
    f350:	|     |     |   moveq #1,d0
    f352:	|  /--|-----|-- bra.w f5a6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f356:	|  |  |     \-> moveq #24,d0
    f358:	|  |  |         add.l 40(sp),d0
    f35c:	|  |  |         move.l d0,-(sp)
    f35e:	|  |  |         jsr 12b1e <trimStack>
    f364:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f366:	|  |  |         movea.l 40(sp),a0
    f36a:	|  |  |         move.l 24(a0),d0
    f36e:	|  |  |         move.l d0,-(sp)
    f370:	|  |  |         pea 1 <_start+0x1>
    f374:	|  |  |         lea 24(sp),a0
    f378:	|  |  |         move.l a0,-(sp)
    f37a:	|  |  |         jsr 1219a <getValueType>
    f380:	|  |  |         lea 12(sp),sp
    f384:	|  |  |         tst.w d0
    f386:	|  |  |     /-- bne.s f38e <moveChr+0x8e>
    f388:	|  |  |     |   moveq #1,d0
    f38a:	|  +--|-----|-- bra.w f5a6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f38e:	|  |  |     \-> moveq #24,d0
    f390:	|  |  |         add.l 40(sp),d0
    f394:	|  |  |         move.l d0,-(sp)
    f396:	|  |  |         jsr 12b1e <trimStack>
    f39c:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f39e:	|  |  |         movea.l 40(sp),a0
    f3a2:	|  |  |         move.l 24(a0),d0
    f3a6:	|  |  |         move.l d0,-(sp)
    f3a8:	|  |  |         pea 7 <_start+0x7>
    f3ac:	|  |  |         lea 16(sp),a0
    f3b0:	|  |  |         move.l a0,-(sp)
    f3b2:	|  |  |         jsr 1219a <getValueType>
    f3b8:	|  |  |         lea 12(sp),sp
    f3bc:	|  |  |         tst.w d0
    f3be:	|  |  |     /-- bne.s f3c6 <moveChr+0xc6>
    f3c0:	|  |  |     |   moveq #1,d0
    f3c2:	|  +--|-----|-- bra.w f5a6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f3c6:	|  |  |     \-> moveq #24,d0
    f3c8:	|  |  |         add.l 40(sp),d0
    f3cc:	|  |  |         move.l d0,-(sp)
    f3ce:	|  |  |         jsr 12b1e <trimStack>
    f3d4:	|  |  |         addq.l #4,sp

			if (force) {
    f3d6:	|  |  |         tst.w 6(sp)
    f3da:	|  |  |     /-- beq.s f40a <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    f3dc:	|  |  |     |   movea.l 8(sp),a0
    f3e0:	|  |  |     |   move.l 12(sp),d1
    f3e4:	|  |  |     |   move.l 16(sp),d0
    f3e8:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd05c>
    f3ec:	|  |  |     |   move.l 44(sp),-(sp)
    f3f0:	|  |  |     |   move.l a0,-(sp)
    f3f2:	|  |  |     |   move.l d1,-(sp)
    f3f4:	|  |  |     |   move.l d0,-(sp)
    f3f6:	|  |  |     |   jsr 82d6 <forceWalkingPerson>
    f3fc:	|  |  |     |   lea 20(sp),sp
    f400:	|  |  |     |   tst.w d0
    f402:	|  |  |  /--|-- beq.s f45c <moveChr+0x15c>
    f404:	|  |  |  |  |   moveq #3,d0
    f406:	|  +--|--|--|-- bra.w f5a6 <moveChr+0x2a6>
			} else if (immediate) {
    f40a:	|  |  |  |  \-> tst.w 4(sp)
    f40e:	|  |  |  |  /-- beq.s f42e <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    f410:	|  |  |  |  |   movea.l 8(sp),a0
    f414:	|  |  |  |  |   move.l 12(sp),d1
    f418:	|  |  |  |  |   move.l 16(sp),d0
    f41c:	|  |  |  |  |   move.l a0,-(sp)
    f41e:	|  |  |  |  |   move.l d1,-(sp)
    f420:	|  |  |  |  |   move.l d0,-(sp)
    f422:	|  |  |  |  |   jsr 85de <jumpPerson>
    f428:	|  |  |  |  |   lea 12(sp),sp
    f42c:	|  |  |  +--|-- bra.s f45c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    f42e:	|  |  |  |  \-> movea.l 8(sp),a0
    f432:	|  |  |  |      move.l 12(sp),d1
    f436:	|  |  |  |      move.l 16(sp),d0
    f43a:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd05c>
    f43e:	|  |  |  |      move.l 44(sp),-(sp)
    f442:	|  |  |  |      move.l a0,-(sp)
    f444:	|  |  |  |      move.l d1,-(sp)
    f446:	|  |  |  |      move.l d0,-(sp)
    f448:	|  |  |  |      jsr 87ae <makeWalkingPerson>
    f44e:	|  |  |  |      lea 20(sp),sp
    f452:	|  |  |  |      tst.w d0
    f454:	|  |  |  +----- beq.s f45c <moveChr+0x15c>
    f456:	|  |  |  |      moveq #3,d0
    f458:	|  +--|--|----- bra.w f5a6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f45c:	|  |  |  \----> moveq #2,d0
    f45e:	|  +--|-------- bra.w f5a6 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f462:	|  |  \-------> movea.l 40(sp),a0
    f466:	|  |            move.l 24(a0),d0
    f46a:	|  |            move.l d0,-(sp)
    f46c:	|  |            pea 7 <_start+0x7>
    f470:	|  |            moveq #32,d0
    f472:	|  |            add.l sp,d0
    f474:	|  |            move.l d0,-(sp)
    f476:	|  |            jsr 1219a <getValueType>
    f47c:	|  |            lea 12(sp),sp
    f480:	|  |            tst.w d0
    f482:	|  |        /-- bne.s f48a <moveChr+0x18a>
    f484:	|  |        |   moveq #1,d0
    f486:	|  +--------|-- bra.w f5a6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f48a:	|  |        \-> moveq #24,d0
    f48c:	|  |            add.l 40(sp),d0
    f490:	|  |            move.l d0,-(sp)
    f492:	|  |            jsr 12b1e <trimStack>
    f498:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f49a:	|  |            movea.l 40(sp),a0
    f49e:	|  |            move.l 24(a0),d0
    f4a2:	|  |            move.l d0,-(sp)
    f4a4:	|  |            pea 7 <_start+0x7>
    f4a8:	|  |            lea 28(sp),a0
    f4ac:	|  |            move.l a0,-(sp)
    f4ae:	|  |            jsr 1219a <getValueType>
    f4b4:	|  |            lea 12(sp),sp
    f4b8:	|  |            tst.w d0
    f4ba:	|  |        /-- bne.s f4c2 <moveChr+0x1c2>
    f4bc:	|  |        |   moveq #1,d0
    f4be:	|  +--------|-- bra.w f5a6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f4c2:	|  |        \-> moveq #24,d0
    f4c4:	|  |            add.l 40(sp),d0
    f4c8:	|  |            move.l d0,-(sp)
    f4ca:	|  |            jsr 12b1e <trimStack>
    f4d0:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    f4d2:	|  |            move.l 24(sp),d0
    f4d6:	|  |            move.l d0,-(sp)
    f4d8:	|  |            jsr 12c64 <getRegionForObject>
    f4de:	|  |            addq.l #4,sp
    f4e0:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    f4e4:	|  |        /-- bne.s f4ec <moveChr+0x1ec>
    f4e6:	|  |        |   moveq #2,d0
    f4e8:	|  +--------|-- bra.w f5a6 <moveChr+0x2a6>

			if (force)
    f4ec:	|  |        \-> tst.w 6(sp)
    f4f0:	|  |        /-- beq.s f52c <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f4f2:	|  |        |   movea.l 28(sp),a0
    f4f6:	|  |        |   move.l 24(a0),d2
    f4fa:	|  |        |   movea.l 20(sp),a1
    f4fe:	|  |        |   movea.l 28(sp),a0
    f502:	|  |        |   move.l 20(a0),d1
    f506:	|  |        |   movea.l 28(sp),a0
    f50a:	|  |        |   move.l 16(a0),d0
    f50e:	|  |        |   move.l d2,-(sp)
    f510:	|  |        |   move.l 44(sp),-(sp)
    f514:	|  |        |   move.l a1,-(sp)
    f516:	|  |        |   move.l d1,-(sp)
    f518:	|  |        |   move.l d0,-(sp)
    f51a:	|  |        |   jsr 82d6 <forceWalkingPerson>
    f520:	|  |        |   lea 20(sp),sp
    f524:	|  |        |   tst.w d0
    f526:	|  |     /--|-- beq.s f592 <moveChr+0x292>
    f528:	|  |     |  |   moveq #3,d0
    f52a:	|  +-----|--|-- bra.s f5a6 <moveChr+0x2a6>
			}
			else if (immediate)
    f52c:	|  |     |  \-> tst.w 4(sp)
    f530:	|  |     |  /-- beq.s f558 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    f532:	|  |     |  |   movea.l 20(sp),a1
    f536:	|  |     |  |   movea.l 28(sp),a0
    f53a:	|  |     |  |   move.l 20(a0),d1
    f53e:	|  |     |  |   movea.l 28(sp),a0
    f542:	|  |     |  |   move.l 16(a0),d0
    f546:	|  |     |  |   move.l a1,-(sp)
    f548:	|  |     |  |   move.l d1,-(sp)
    f54a:	|  |     |  |   move.l d0,-(sp)
    f54c:	|  |     |  |   jsr 85de <jumpPerson>
    f552:	|  |     |  |   lea 12(sp),sp
    f556:	|  |     +--|-- bra.s f592 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f558:	|  |     |  \-> movea.l 28(sp),a0
    f55c:	|  |     |      move.l 24(a0),d2
    f560:	|  |     |      movea.l 20(sp),a1
    f564:	|  |     |      movea.l 28(sp),a0
    f568:	|  |     |      move.l 20(a0),d1
    f56c:	|  |     |      movea.l 28(sp),a0
    f570:	|  |     |      move.l 16(a0),d0
    f574:	|  |     |      move.l d2,-(sp)
    f576:	|  |     |      move.l 44(sp),-(sp)
    f57a:	|  |     |      move.l a1,-(sp)
    f57c:	|  |     |      move.l d1,-(sp)
    f57e:	|  |     |      move.l d0,-(sp)
    f580:	|  |     |      jsr 87ae <makeWalkingPerson>
    f586:	|  |     |      lea 20(sp),sp
    f58a:	|  |     |      tst.w d0
    f58c:	|  |     +----- beq.s f592 <moveChr+0x292>
    f58e:	|  |     |      moveq #3,d0
    f590:	|  +-----|----- bra.s f5a6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f592:	|  |     \----> moveq #2,d0
    f594:	|  +----------- bra.s f5a6 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    f596:	\--|----------> pea 16630 <custom.c.49191367+0x1904>
    f59c:	   |            jsr 141e2 <KPrintF>
    f5a2:	   |            addq.l #4,sp
			return BR_ERROR;
    f5a4:	   |            moveq #1,d0
	}
}
    f5a6:	   \----------> move.l (sp)+,d2
    f5a8:	                lea 28(sp),sp
    f5ac:	                rts

0000f5ae <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    f5ae:	clr.l -(sp)
    f5b0:	clr.l -(sp)
    f5b2:	move.l 16(sp),-(sp)
    f5b6:	move.l 16(sp),-(sp)
    f5ba:	jsr f300 <moveChr>
    f5c0:	lea 16(sp),sp
}
    f5c4:	rts

0000f5c6 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    f5c6:	clr.l -(sp)
    f5c8:	pea 1 <_start+0x1>
    f5cc:	move.l 16(sp),-(sp)
    f5d0:	move.l 16(sp),-(sp)
    f5d4:	jsr f300 <moveChr>
    f5da:	lea 16(sp),sp
}
    f5de:	rts

0000f5e0 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    f5e0:	pea 1 <_start+0x1>
    f5e4:	clr.l -(sp)
    f5e6:	move.l 16(sp),-(sp)
    f5ea:	move.l 16(sp),-(sp)
    f5ee:	jsr f300 <moveChr>
    f5f4:	lea 16(sp),sp
}
    f5f8:	rts

0000f5fa <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    f5fa:	jsr 581c <clearStatusBar>
	return BR_CONTINUE;
    f600:	moveq #2,d0
}
    f602:	rts

0000f604 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    f604:	jsr 58c4 <killLastStatus>
	return BR_CONTINUE;
    f60a:	moveq #2,d0
}
    f60c:	rts

0000f60e <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    f60e:	jsr 57b2 <addStatusBar>
	return BR_CONTINUE;
    f614:	moveq #2,d0
}
    f616:	rts

0000f618 <builtIn_statusText>:

builtIn(statusText)
{
    f618:	       subq.l #8,sp
    f61a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f61c:	       movea.l 20(sp),a0
    f620:	       move.l 24(a0),d0
    f624:	       move.l d0,-(sp)
    f626:	       jsr 12770 <getTextFromAnyVar>
    f62c:	       addq.l #4,sp
    f62e:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    f632:	   /-- bne.s f638 <builtIn_statusText+0x20>
    f634:	   |   moveq #1,d0
    f636:	/--|-- bra.s f66c <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    f638:	|  \-> moveq #24,d0
    f63a:	|      add.l 20(sp),d0
    f63e:	|      move.l d0,-(sp)
    f640:	|      jsr 12b1e <trimStack>
    f646:	|      addq.l #4,sp
	setStatusBar(newText);
    f648:	|      move.l 8(sp),-(sp)
    f64c:	|      jsr 5b44 <setStatusBar>
    f652:	|      addq.l #4,sp
	FreeVec(newText);
    f654:	|      move.l 8(sp),4(sp)
    f65a:	|      move.l 1938c <SysBase>,d0
    f660:	|      movea.l d0,a6
    f662:	|      movea.l 4(sp),a1
    f666:	|      jsr -690(a6)
	return BR_CONTINUE;
    f66a:	|      moveq #2,d0
}
    f66c:	\----> movea.l (sp)+,a6
    f66e:	       addq.l #8,sp
    f670:	       rts

0000f672 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    f672:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f674:	       movea.l 12(sp),a0
    f678:	       move.l 24(a0),d0
    f67c:	       move.l d0,-(sp)
    f67e:	       pea 1 <_start+0x1>
    f682:	       move.l sp,d0
    f684:	       addq.l #8,d0
    f686:	       move.l d0,-(sp)
    f688:	       jsr 1219a <getValueType>
    f68e:	       lea 12(sp),sp
    f692:	       tst.w d0
    f694:	   /-- bne.s f69a <builtIn_lightStatus+0x28>
    f696:	   |   moveq #1,d0
    f698:	/--|-- bra.s f6b8 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    f69a:	|  \-> moveq #24,d0
    f69c:	|      add.l 12(sp),d0
    f6a0:	|      move.l d0,-(sp)
    f6a2:	|      jsr 12b1e <trimStack>
    f6a8:	|      addq.l #4,sp
	setLitStatus (val);
    f6aa:	|      move.l (sp),d0
    f6ac:	|      move.l d0,-(sp)
    f6ae:	|      jsr 5b34 <setLitStatus>
    f6b4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f6b6:	|      moveq #2,d0
}
    f6b8:	\----> addq.l #4,sp
    f6ba:	       rts

0000f6bc <builtIn_positionStatus>:

builtIn(positionStatus)
{
    f6bc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6be:	       movea.l 16(sp),a0
    f6c2:	       move.l 24(a0),d0
    f6c6:	       move.l d0,-(sp)
    f6c8:	       pea 1 <_start+0x1>
    f6cc:	       move.l sp,d0
    f6ce:	       addq.l #8,d0
    f6d0:	       move.l d0,-(sp)
    f6d2:	       jsr 1219a <getValueType>
    f6d8:	       lea 12(sp),sp
    f6dc:	       tst.w d0
    f6de:	   /-- bne.s f6e4 <builtIn_positionStatus+0x28>
    f6e0:	   |   moveq #1,d0
    f6e2:	/--|-- bra.s f73e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f6e4:	|  \-> moveq #24,d0
    f6e6:	|      add.l 16(sp),d0
    f6ea:	|      move.l d0,-(sp)
    f6ec:	|      jsr 12b1e <trimStack>
    f6f2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6f4:	|      movea.l 16(sp),a0
    f6f8:	|      move.l 24(a0),d0
    f6fc:	|      move.l d0,-(sp)
    f6fe:	|      pea 1 <_start+0x1>
    f702:	|      moveq #12,d0
    f704:	|      add.l sp,d0
    f706:	|      move.l d0,-(sp)
    f708:	|      jsr 1219a <getValueType>
    f70e:	|      lea 12(sp),sp
    f712:	|      tst.w d0
    f714:	|  /-- bne.s f71a <builtIn_positionStatus+0x5e>
    f716:	|  |   moveq #1,d0
    f718:	+--|-- bra.s f73e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f71a:	|  \-> moveq #24,d0
    f71c:	|      add.l 16(sp),d0
    f720:	|      move.l d0,-(sp)
    f722:	|      jsr 12b1e <trimStack>
    f728:	|      addq.l #4,sp
	positionStatus (x, y);
    f72a:	|      move.l (sp),d1
    f72c:	|      move.l 4(sp),d0
    f730:	|      move.l d1,-(sp)
    f732:	|      move.l d0,-(sp)
    f734:	|      jsr 5926 <positionStatus>
    f73a:	|      addq.l #8,sp
	return BR_CONTINUE;
    f73c:	|      moveq #2,d0
}
    f73e:	\----> addq.l #8,sp
    f740:	       rts

0000f742 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    f742:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f744:	       movea.l 12(sp),a0
    f748:	       move.l 24(a0),d0
    f74c:	       move.l d0,-(sp)
    f74e:	       pea 1 <_start+0x1>
    f752:	       move.l sp,d0
    f754:	       addq.l #8,d0
    f756:	       move.l d0,-(sp)
    f758:	       jsr 1219a <getValueType>
    f75e:	       lea 12(sp),sp
    f762:	       tst.w d0
    f764:	   /-- bne.s f76a <builtIn_alignStatus+0x28>
    f766:	   |   moveq #1,d0
    f768:	/--|-- bra.s f78a <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    f76a:	|  \-> moveq #24,d0
    f76c:	|      add.l 12(sp),d0
    f770:	|      move.l d0,-(sp)
    f772:	|      jsr 12b1e <trimStack>
    f778:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    f77a:	|      move.l (sp),d0
    f77c:	|      movea.l 18d2c <nowStatus>,a0
    f782:	|      move.l d0,d0
    f784:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    f788:	|      moveq #2,d0
}
    f78a:	\----> addq.l #4,sp
    f78c:	       rts

0000f78e <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    f78e:	             tst.l 4(sp)
    f792:	      /----- beq.s f79e <getFuncNumForCallback+0x10>
    f794:	      |      moveq #1,d0
    f796:	      |      cmp.l 4(sp),d0
    f79a:	      |  /-- beq.s f7a4 <getFuncNumForCallback+0x16>
    f79c:	   /--|--|-- bra.s f7da <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    f79e:	   |  \--|-> clr.l 12(sp)
			break;
    f7a2:	/--|-----|-- bra.s f7ec <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    f7a4:	|  |     \-> movea.l 8(sp),a0
    f7a8:	|  |         move.l 24(a0),d0
    f7ac:	|  |         move.l d0,-(sp)
    f7ae:	|  |         pea 2 <_start+0x2>
    f7b2:	|  |         move.l 20(sp),-(sp)
    f7b6:	|  |         jsr 1219a <getValueType>
    f7bc:	|  |         lea 12(sp),sp
    f7c0:	|  |         tst.w d0
    f7c2:	|  |     /-- bne.s f7c8 <getFuncNumForCallback+0x3a>
    f7c4:	|  |     |   clr.w d0
    f7c6:	|  |  /--|-- bra.s f7ee <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    f7c8:	|  |  |  \-> moveq #24,d0
    f7ca:	|  |  |      add.l 8(sp),d0
    f7ce:	|  |  |      move.l d0,-(sp)
    f7d0:	|  |  |      jsr 12b1e <trimStack>
    f7d6:	|  |  |      addq.l #4,sp
			break;
    f7d8:	+--|--|----- bra.s f7ec <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    f7da:	|  \--|----> pea 16666 <custom.c.49191367+0x193a>
    f7e0:	|     |      jsr 141e2 <KPrintF>
    f7e6:	|     |      addq.l #4,sp
			return FALSE;
    f7e8:	|     |      clr.w d0
    f7ea:	|     +----- bra.s f7ee <getFuncNumForCallback+0x60>
	}
	return TRUE;
    f7ec:	\-----|----> moveq #1,d0
}
    f7ee:	      \----> rts

0000f7f0 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    f7f0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f7f2:	       move.l sp,d0
    f7f4:	       move.l d0,-(sp)
    f7f6:	       move.l 16(sp),-(sp)
    f7fa:	       move.l 16(sp),-(sp)
    f7fe:	       jsr f78e <getFuncNumForCallback>
    f804:	       lea 12(sp),sp
    f808:	       tst.w d0
    f80a:	/----- beq.s f81a <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    f80c:	|      movea.l 18d1e <currentEvents>,a0
    f812:	|      move.l (sp),d0
    f814:	|      move.l d0,(a0)
		return BR_CONTINUE;
    f816:	|      moveq #2,d0
    f818:	|  /-- bra.s f81c <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    f81a:	\--|-> moveq #1,d0
}
    f81c:	   \-> addq.l #4,sp
    f81e:	       rts

0000f820 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    f820:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f822:	       move.l sp,d0
    f824:	       move.l d0,-(sp)
    f826:	       move.l 16(sp),-(sp)
    f82a:	       move.l 16(sp),-(sp)
    f82e:	       jsr f78e <getFuncNumForCallback>
    f834:	       lea 12(sp),sp
    f838:	       tst.w d0
    f83a:	/----- beq.s f84c <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    f83c:	|      movea.l 18d1e <currentEvents>,a0
    f842:	|      move.l (sp),d0
    f844:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    f848:	|      moveq #2,d0
    f84a:	|  /-- bra.s f84e <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    f84c:	\--|-> moveq #1,d0
}
    f84e:	   \-> addq.l #4,sp
    f850:	       rts

0000f852 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    f852:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f854:	       move.l sp,d0
    f856:	       move.l d0,-(sp)
    f858:	       move.l 16(sp),-(sp)
    f85c:	       move.l 16(sp),-(sp)
    f860:	       jsr f78e <getFuncNumForCallback>
    f866:	       lea 12(sp),sp
    f86a:	       tst.w d0
    f86c:	/----- beq.s f87e <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    f86e:	|      movea.l 18d1e <currentEvents>,a0
    f874:	|      move.l (sp),d0
    f876:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    f87a:	|      moveq #2,d0
    f87c:	|  /-- bra.s f880 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    f87e:	\--|-> moveq #1,d0
}
    f880:	   \-> addq.l #4,sp
    f882:	       rts

0000f884 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    f884:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f886:	       move.l sp,d0
    f888:	       move.l d0,-(sp)
    f88a:	       move.l 16(sp),-(sp)
    f88e:	       move.l 16(sp),-(sp)
    f892:	       jsr f78e <getFuncNumForCallback>
    f898:	       lea 12(sp),sp
    f89c:	       tst.w d0
    f89e:	/----- beq.s f8b0 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    f8a0:	|      movea.l 18d1e <currentEvents>,a0
    f8a6:	|      move.l (sp),d0
    f8a8:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    f8ac:	|      moveq #2,d0
    f8ae:	|  /-- bra.s f8b2 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    f8b0:	\--|-> moveq #1,d0
}
    f8b2:	   \-> addq.l #4,sp
    f8b4:	       rts

0000f8b6 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    f8b6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f8b8:	       move.l sp,d0
    f8ba:	       move.l d0,-(sp)
    f8bc:	       move.l 16(sp),-(sp)
    f8c0:	       move.l 16(sp),-(sp)
    f8c4:	       jsr f78e <getFuncNumForCallback>
    f8ca:	       lea 12(sp),sp
    f8ce:	       tst.w d0
    f8d0:	/----- beq.s f8e2 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    f8d2:	|      movea.l 18d1e <currentEvents>,a0
    f8d8:	|      move.l (sp),d0
    f8da:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    f8de:	|      moveq #2,d0
    f8e0:	|  /-- bra.s f8e4 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    f8e2:	\--|-> moveq #1,d0
}
    f8e4:	   \-> addq.l #4,sp
    f8e6:	       rts

0000f8e8 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    f8e8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f8ea:	       move.l sp,d0
    f8ec:	       move.l d0,-(sp)
    f8ee:	       move.l 16(sp),-(sp)
    f8f2:	       move.l 16(sp),-(sp)
    f8f6:	       jsr f78e <getFuncNumForCallback>
    f8fc:	       lea 12(sp),sp
    f900:	       tst.w d0
    f902:	/----- beq.s f914 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    f904:	|      movea.l 18d1e <currentEvents>,a0
    f90a:	|      move.l (sp),d0
    f90c:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    f910:	|      moveq #2,d0
    f912:	|  /-- bra.s f916 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    f914:	\--|-> moveq #1,d0
}
    f916:	   \-> addq.l #4,sp
    f918:	       rts

0000f91a <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    f91a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f91c:	       move.l sp,d0
    f91e:	       move.l d0,-(sp)
    f920:	       move.l 16(sp),-(sp)
    f924:	       move.l 16(sp),-(sp)
    f928:	       jsr f78e <getFuncNumForCallback>
    f92e:	       lea 12(sp),sp
    f932:	       tst.w d0
    f934:	/----- beq.s f946 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    f936:	|      movea.l 18d1e <currentEvents>,a0
    f93c:	|      move.l (sp),d0
    f93e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    f942:	|      moveq #2,d0
    f944:	|  /-- bra.s f948 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    f946:	\--|-> moveq #1,d0
}
    f948:	   \-> addq.l #4,sp
    f94a:	       rts

0000f94c <builtIn_spawnSub>:

builtIn (spawnSub)
{
    f94c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f94e:	          move.l sp,d0
    f950:	          move.l d0,-(sp)
    f952:	          move.l 16(sp),-(sp)
    f956:	          move.l 16(sp),-(sp)
    f95a:	          jsr f78e <getFuncNumForCallback>
    f960:	          lea 12(sp),sp
    f964:	          tst.w d0
    f966:	/-------- beq.s f992 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    f968:	|         move.l 1935c <noStack>,d1
    f96e:	|         move.l (sp),d0
    f970:	|         pea 1 <_start+0x1>
    f974:	|         move.l d1,-(sp)
    f976:	|         clr.l -(sp)
    f978:	|         clr.l -(sp)
    f97a:	|         move.l d0,-(sp)
    f97c:	|         jsr 4a36 <startNewFunctionNum>
    f982:	|         lea 20(sp),sp
    f986:	|         tst.l d0
    f988:	|     /-- bne.s f98e <builtIn_spawnSub+0x42>
    f98a:	|     |   moveq #1,d0
    f98c:	|  /--|-- bra.s f994 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    f98e:	|  |  \-> moveq #2,d0
    f990:	|  +----- bra.s f994 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    f992:	\--|----> moveq #1,d0
}
    f994:	   \----> addq.l #4,sp
    f996:	          rts

0000f998 <builtIn_cancelSub>:

builtIn (cancelSub)
{
    f998:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f99a:	          move.l sp,d0
    f99c:	          addq.l #4,d0
    f99e:	          move.l d0,-(sp)
    f9a0:	          move.l 20(sp),-(sp)
    f9a4:	          move.l 20(sp),-(sp)
    f9a8:	          jsr f78e <getFuncNumForCallback>
    f9ae:	          lea 12(sp),sp
    f9b2:	          tst.w d0
    f9b4:	/-------- beq.s f9ea <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    f9b6:	|         move.l 4(sp),d1
    f9ba:	|         move.l sp,d0
    f9bc:	|         addq.l #2,d0
    f9be:	|         move.l d0,-(sp)
    f9c0:	|         move.l 20(sp),-(sp)
    f9c4:	|         move.l d1,-(sp)
    f9c6:	|         jsr 29ee <cancelAFunction>
    f9cc:	|         lea 12(sp),sp
		if (killedMyself) {
    f9d0:	|         move.w 2(sp),d0
    f9d4:	|  /----- beq.s f9e6 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    f9d6:	|  |      move.l 16(sp),-(sp)
    f9da:	|  |      jsr 290c <abortFunction>
    f9e0:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    f9e2:	|  |      moveq #5,d0
    f9e4:	|  |  /-- bra.s f9ec <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    f9e6:	|  \--|-> moveq #2,d0
    f9e8:	|     +-- bra.s f9ec <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    f9ea:	\-----|-> moveq #1,d0
}
    f9ec:	      \-> addq.l #8,sp
    f9ee:	          rts

0000f9f0 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    f9f0:	       subq.l #8,sp
    f9f2:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    f9f4:	       movea.l 20(sp),a0
    f9f8:	       move.l 24(a0),d0
    f9fc:	       move.l d0,-(sp)
    f9fe:	       jsr 12770 <getTextFromAnyVar>
    fa04:	       addq.l #4,sp
    fa06:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    fa0a:	   /-- bne.s fa10 <builtIn_stringWidth+0x20>
    fa0c:	   |   moveq #1,d0
    fa0e:	/--|-- bra.s fa5e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    fa10:	|  \-> moveq #24,d0
    fa12:	|      add.l 20(sp),d0
    fa16:	|      move.l d0,-(sp)
    fa18:	|      jsr 12b1e <trimStack>
    fa1e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    fa20:	|      move.l 8(sp),-(sp)
    fa24:	|      jsr 12b78 <stringWidth>
    fa2a:	|      addq.l #4,sp
    fa2c:	|      move.l d0,d1
    fa2e:	|      moveq #28,d0
    fa30:	|      add.l 20(sp),d0
    fa34:	|      move.l d1,-(sp)
    fa36:	|      pea 1 <_start+0x1>
    fa3a:	|      move.l d0,-(sp)
    fa3c:	|      jsr 12a8c <setVariable>
    fa42:	|      lea 12(sp),sp
	FreeVec(theText);
    fa46:	|      move.l 8(sp),4(sp)
    fa4c:	|      move.l 1938c <SysBase>,d0
    fa52:	|      movea.l d0,a6
    fa54:	|      movea.l 4(sp),a1
    fa58:	|      jsr -690(a6)
	return BR_CONTINUE;
    fa5c:	|      moveq #2,d0
}
    fa5e:	\----> movea.l (sp)+,a6
    fa60:	       addq.l #8,sp
    fa62:	       rts

0000fa64 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    fa64:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa66:	       movea.l 12(sp),a0
    fa6a:	       move.l 24(a0),d0
    fa6e:	       move.l d0,-(sp)
    fa70:	       pea 1 <_start+0x1>
    fa74:	       move.l sp,d0
    fa76:	       addq.l #8,d0
    fa78:	       move.l d0,-(sp)
    fa7a:	       jsr 1219a <getValueType>
    fa80:	       lea 12(sp),sp
    fa84:	       tst.w d0
    fa86:	   /-- bne.s fa8c <builtIn_hardScroll+0x28>
    fa88:	   |   moveq #1,d0
    fa8a:	/--|-- bra.s faaa <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    fa8c:	|  \-> moveq #24,d0
    fa8e:	|      add.l 12(sp),d0
    fa92:	|      move.l d0,-(sp)
    fa94:	|      jsr 12b1e <trimStack>
    fa9a:	|      addq.l #4,sp
	hardScroll (v);
    fa9c:	|      move.l (sp),d0
    fa9e:	|      move.l d0,-(sp)
    faa0:	|      jsr ad2e <hardScroll>
    faa6:	|      addq.l #4,sp
	return BR_CONTINUE;
    faa8:	|      moveq #2,d0
}
    faaa:	\----> addq.l #4,sp
    faac:	       rts

0000faae <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    faae:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fab0:	       movea.l 12(sp),a0
    fab4:	       move.l 24(a0),d0
    fab8:	       move.l d0,-(sp)
    faba:	       pea 7 <_start+0x7>
    fabe:	       move.l sp,d0
    fac0:	       addq.l #8,d0
    fac2:	       move.l d0,-(sp)
    fac4:	       jsr 1219a <getValueType>
    faca:	       lea 12(sp),sp
    face:	       tst.w d0
    fad0:	   /-- bne.s fad6 <builtIn_isScreenRegion+0x28>
    fad2:	   |   moveq #1,d0
    fad4:	/--|-- bra.s fb16 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    fad6:	|  \-> moveq #24,d0
    fad8:	|      add.l 12(sp),d0
    fadc:	|      move.l d0,-(sp)
    fade:	|      jsr 12b1e <trimStack>
    fae4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    fae6:	|      move.l (sp),d0
    fae8:	|      move.l d0,-(sp)
    faea:	|      jsr 12c64 <getRegionForObject>
    faf0:	|      addq.l #4,sp
    faf2:	|      tst.l d0
    faf4:	|      sne d0
    faf6:	|      neg.b d0
    faf8:	|      moveq #0,d1
    fafa:	|      move.b d0,d1
    fafc:	|      moveq #28,d0
    fafe:	|      add.l 12(sp),d0
    fb02:	|      move.l d1,-(sp)
    fb04:	|      pea 1 <_start+0x1>
    fb08:	|      move.l d0,-(sp)
    fb0a:	|      jsr 12a8c <setVariable>
    fb10:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb14:	|      moveq #2,d0
}
    fb16:	\----> addq.l #4,sp
    fb18:	       rts

0000fb1a <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    fb1a:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb1c:	       movea.l 12(sp),a0
    fb20:	       move.l 24(a0),d0
    fb24:	       move.l d0,-(sp)
    fb26:	       pea 1 <_start+0x1>
    fb2a:	       move.l sp,d0
    fb2c:	       addq.l #8,d0
    fb2e:	       move.l d0,-(sp)
    fb30:	       jsr 1219a <getValueType>
    fb36:	       lea 12(sp),sp
    fb3a:	       tst.w d0
    fb3c:	   /-- bne.s fb42 <builtIn_setSpeechSpeed+0x28>
    fb3e:	   |   moveq #1,d0
    fb40:	/--|-- bra.s fb90 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    fb42:	|  \-> moveq #24,d0
    fb44:	|      add.l 12(sp),d0
    fb48:	|      move.l d0,-(sp)
    fb4a:	|      jsr 12b1e <trimStack>
    fb50:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    fb52:	|      move.l (sp),d0
    fb54:	|      move.l d0,-(sp)
    fb56:	|      jsr 1449a <__floatsisf>
    fb5c:	|      addq.l #4,sp
    fb5e:	|      move.l #1008981770,-(sp)
    fb64:	|      move.l d0,-(sp)
    fb66:	|      jsr 1454c <__mulsf3>
    fb6c:	|      addq.l #8,sp
    fb6e:	|      move.l d0,18d30 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    fb74:	|      moveq #28,d0
    fb76:	|      add.l 12(sp),d0
    fb7a:	|      pea 1 <_start+0x1>
    fb7e:	|      pea 1 <_start+0x1>
    fb82:	|      move.l d0,-(sp)
    fb84:	|      jsr 12a8c <setVariable>
    fb8a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb8e:	|      moveq #2,d0
}
    fb90:	\----> addq.l #4,sp
    fb92:	       rts

0000fb94 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    fb94:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb96:	       movea.l 12(sp),a0
    fb9a:	       move.l 24(a0),d0
    fb9e:	       move.l d0,-(sp)
    fba0:	       pea 1 <_start+0x1>
    fba4:	       move.l sp,d0
    fba6:	       addq.l #8,d0
    fba8:	       move.l d0,-(sp)
    fbaa:	       jsr 1219a <getValueType>
    fbb0:	       lea 12(sp),sp
    fbb4:	       tst.w d0
    fbb6:	   /-- bne.s fbbc <builtIn_setFontSpacing+0x28>
    fbb8:	   |   moveq #1,d0
    fbba:	/--|-- bra.s fbf2 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    fbbc:	|  \-> move.l (sp),d0
    fbbe:	|      move.l d0,d0
    fbc0:	|      move.w d0,192aa <fontSpace>
	trimStack (&fun -> stack);
    fbc6:	|      moveq #24,d0
    fbc8:	|      add.l 12(sp),d0
    fbcc:	|      move.l d0,-(sp)
    fbce:	|      jsr 12b1e <trimStack>
    fbd4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    fbd6:	|      moveq #28,d0
    fbd8:	|      add.l 12(sp),d0
    fbdc:	|      pea 1 <_start+0x1>
    fbe0:	|      pea 1 <_start+0x1>
    fbe4:	|      move.l d0,-(sp)
    fbe6:	|      jsr 12a8c <setVariable>
    fbec:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fbf0:	|      moveq #2,d0
}
    fbf2:	\----> addq.l #4,sp
    fbf4:	       rts

0000fbf6 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    fbf6:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fbf8:	          movea.l 12(sp),a0
    fbfc:	          move.l 24(a0),d0
    fc00:	          move.l d0,-(sp)
    fc02:	          pea 1 <_start+0x1>
    fc06:	          move.l sp,d0
    fc08:	          addq.l #8,d0
    fc0a:	          move.l d0,-(sp)
    fc0c:	          jsr 1219a <getValueType>
    fc12:	          lea 12(sp),sp
    fc16:	          tst.w d0
    fc18:	      /-- bne.s fc1e <builtIn_transitionLevel+0x28>
    fc1a:	      |   moveq #1,d0
    fc1c:	/-----|-- bra.s fc72 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    fc1e:	|     \-> moveq #24,d0
    fc20:	|         add.l 12(sp),d0
    fc24:	|         move.l d0,-(sp)
    fc26:	|         jsr 12b1e <trimStack>
    fc2c:	|         addq.l #4,sp

	if (number < 0)
    fc2e:	|         move.l (sp),d0
    fc30:	|     /-- bpl.s fc3a <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    fc32:	|     |   clr.b 18d1c <brightnessLevel>
    fc38:	|  /--|-- bra.s fc56 <builtIn_transitionLevel+0x60>
	else if (number > 255)
    fc3a:	|  |  \-> move.l (sp),d0
    fc3c:	|  |      cmpi.l #255,d0
    fc42:	|  |  /-- ble.s fc4c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    fc44:	|  |  |   st 18d1c <brightnessLevel>
    fc4a:	|  +--|-- bra.s fc56 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    fc4c:	|  |  \-> move.l (sp),d0
    fc4e:	|  |      move.l d0,d0
    fc50:	|  |      move.b d0,18d1c <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    fc56:	|  \----> moveq #28,d0
    fc58:	|         add.l 12(sp),d0
    fc5c:	|         pea 1 <_start+0x1>
    fc60:	|         pea 1 <_start+0x1>
    fc64:	|         move.l d0,-(sp)
    fc66:	|         jsr 12a8c <setVariable>
    fc6c:	|         lea 12(sp),sp
	return BR_CONTINUE;
    fc70:	|         moveq #2,d0
}
    fc72:	\-------> addq.l #4,sp
    fc74:	          rts

0000fc76 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    fc76:	movea.l 8(sp),a0
    fc7a:	move.l 24(a0),d0
    fc7e:	move.l d0,-(sp)
    fc80:	jsr 126da <getBoolean>
    fc86:	addq.l #4,sp
    fc88:	move.w d0,1932c <captureAllKeys>
	trimStack (&fun -> stack);
    fc8e:	moveq #24,d0
    fc90:	add.l 8(sp),d0
    fc94:	move.l d0,-(sp)
    fc96:	jsr 12b1e <trimStack>
    fc9c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    fc9e:	move.w 1932c <captureAllKeys>,d0
    fca4:	movea.w d0,a0
    fca6:	moveq #28,d0
    fca8:	add.l 8(sp),d0
    fcac:	move.l a0,-(sp)
    fcae:	pea 1 <_start+0x1>
    fcb2:	move.l d0,-(sp)
    fcb4:	jsr 12a8c <setVariable>
    fcba:	lea 12(sp),sp
	return BR_CONTINUE;
    fcbe:	moveq #2,d0
}
    fcc0:	rts

0000fcc2 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    fcc2:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcc6:	       movea.l 20(sp),a0
    fcca:	       move.l 24(a0),d0
    fcce:	       move.l d0,-(sp)
    fcd0:	       pea 1 <_start+0x1>
    fcd4:	       moveq #12,d0
    fcd6:	       add.l sp,d0
    fcd8:	       move.l d0,-(sp)
    fcda:	       jsr 1219a <getValueType>
    fce0:	       lea 12(sp),sp
    fce4:	       tst.w d0
    fce6:	   /-- bne.s fcee <builtIn_spinCharacter+0x2c>
    fce8:	   |   moveq #1,d0
    fcea:	/--|-- bra.w fd9e <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    fcee:	|  \-> moveq #24,d0
    fcf0:	|      add.l 20(sp),d0
    fcf4:	|      move.l d0,-(sp)
    fcf6:	|      jsr 12b1e <trimStack>
    fcfc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fcfe:	|      movea.l 20(sp),a0
    fd02:	|      move.l 24(a0),d0
    fd06:	|      move.l d0,-(sp)
    fd08:	|      pea 7 <_start+0x7>
    fd0c:	|      lea 8(sp),a0
    fd10:	|      move.l a0,-(sp)
    fd12:	|      jsr 1219a <getValueType>
    fd18:	|      lea 12(sp),sp
    fd1c:	|      tst.w d0
    fd1e:	|  /-- bne.s fd24 <builtIn_spinCharacter+0x62>
    fd20:	|  |   moveq #1,d0
    fd22:	+--|-- bra.s fd9e <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    fd24:	|  \-> moveq #24,d0
    fd26:	|      add.l 20(sp),d0
    fd2a:	|      move.l d0,-(sp)
    fd2c:	|      jsr 12b1e <trimStack>
    fd32:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fd34:	|      move.l (sp),d0
    fd36:	|      move.l d0,-(sp)
    fd38:	|      jsr 8284 <findPerson>
    fd3e:	|      addq.l #4,sp
    fd40:	|      move.l d0,8(sp)
	if (thisPerson) {
    fd44:	|  /-- beq.s fd84 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    fd46:	|  |   move.l 4(sp),d0
    fd4a:	|  |   movea.l 8(sp),a0
    fd4e:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    fd52:	|  |   movea.l 8(sp),a0
    fd56:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    fd5c:	|  |   movea.l 8(sp),a0
    fd60:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    fd66:	|  |   moveq #28,d0
    fd68:	|  |   add.l 20(sp),d0
    fd6c:	|  |   pea 1 <_start+0x1>
    fd70:	|  |   pea 1 <_start+0x1>
    fd74:	|  |   move.l d0,-(sp)
    fd76:	|  |   jsr 12a8c <setVariable>
    fd7c:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    fd80:	|  |   moveq #3,d0
    fd82:	+--|-- bra.s fd9e <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fd84:	|  \-> moveq #28,d0
    fd86:	|      add.l 20(sp),d0
    fd8a:	|      clr.l -(sp)
    fd8c:	|      pea 1 <_start+0x1>
    fd90:	|      move.l d0,-(sp)
    fd92:	|      jsr 12a8c <setVariable>
    fd98:	|      lea 12(sp),sp
		return BR_CONTINUE;
    fd9c:	|      moveq #2,d0
	}
}
    fd9e:	\----> lea 12(sp),sp
    fda2:	       rts

0000fda4 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    fda4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fda6:	          movea.l 16(sp),a0
    fdaa:	          move.l 24(a0),d0
    fdae:	          move.l d0,-(sp)
    fdb0:	          pea 7 <_start+0x7>
    fdb4:	          move.l sp,d0
    fdb6:	          addq.l #8,d0
    fdb8:	          move.l d0,-(sp)
    fdba:	          jsr 1219a <getValueType>
    fdc0:	          lea 12(sp),sp
    fdc4:	          tst.w d0
    fdc6:	      /-- bne.s fdcc <builtIn_getCharacterDirection+0x28>
    fdc8:	      |   moveq #1,d0
    fdca:	/-----|-- bra.s fe2a <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    fdcc:	|     \-> moveq #24,d0
    fdce:	|         add.l 16(sp),d0
    fdd2:	|         move.l d0,-(sp)
    fdd4:	|         jsr 12b1e <trimStack>
    fdda:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fddc:	|         move.l (sp),d0
    fdde:	|         move.l d0,-(sp)
    fde0:	|         jsr 8284 <findPerson>
    fde6:	|         addq.l #4,sp
    fde8:	|         move.l d0,4(sp)
	if (thisPerson) {
    fdec:	|  /----- beq.s fe10 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    fdee:	|  |      movea.l 4(sp),a0
    fdf2:	|  |      move.l 94(a0),d1
    fdf6:	|  |      moveq #28,d0
    fdf8:	|  |      add.l 16(sp),d0
    fdfc:	|  |      move.l d1,-(sp)
    fdfe:	|  |      pea 1 <_start+0x1>
    fe02:	|  |      move.l d0,-(sp)
    fe04:	|  |      jsr 12a8c <setVariable>
    fe0a:	|  |      lea 12(sp),sp
    fe0e:	|  |  /-- bra.s fe28 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fe10:	|  \--|-> moveq #28,d0
    fe12:	|     |   add.l 16(sp),d0
    fe16:	|     |   clr.l -(sp)
    fe18:	|     |   pea 1 <_start+0x1>
    fe1c:	|     |   move.l d0,-(sp)
    fe1e:	|     |   jsr 12a8c <setVariable>
    fe24:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fe28:	|     \-> moveq #2,d0
}
    fe2a:	\-------> addq.l #8,sp
    fe2c:	          rts

0000fe2e <builtIn_isCharacter>:

builtIn(isCharacter)
{
    fe2e:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe30:	       movea.l 16(sp),a0
    fe34:	       move.l 24(a0),d0
    fe38:	       move.l d0,-(sp)
    fe3a:	       pea 7 <_start+0x7>
    fe3e:	       move.l sp,d0
    fe40:	       addq.l #8,d0
    fe42:	       move.l d0,-(sp)
    fe44:	       jsr 1219a <getValueType>
    fe4a:	       lea 12(sp),sp
    fe4e:	       tst.w d0
    fe50:	   /-- bne.s fe56 <builtIn_isCharacter+0x28>
    fe52:	   |   moveq #1,d0
    fe54:	/--|-- bra.s fe98 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    fe56:	|  \-> moveq #24,d0
    fe58:	|      add.l 16(sp),d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      jsr 12b1e <trimStack>
    fe64:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fe66:	|      move.l (sp),d0
    fe68:	|      move.l d0,-(sp)
    fe6a:	|      jsr 8284 <findPerson>
    fe70:	|      addq.l #4,sp
    fe72:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    fe76:	|      sne d0
    fe78:	|      neg.b d0
    fe7a:	|      moveq #0,d1
    fe7c:	|      move.b d0,d1
    fe7e:	|      moveq #28,d0
    fe80:	|      add.l 16(sp),d0
    fe84:	|      move.l d1,-(sp)
    fe86:	|      pea 1 <_start+0x1>
    fe8a:	|      move.l d0,-(sp)
    fe8c:	|      jsr 12a8c <setVariable>
    fe92:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fe96:	|      moveq #2,d0
}
    fe98:	\----> addq.l #8,sp
    fe9a:	       rts

0000fe9c <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    fe9c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe9e:	          movea.l 16(sp),a0
    fea2:	          move.l 24(a0),d0
    fea6:	          move.l d0,-(sp)
    fea8:	          pea 7 <_start+0x7>
    feac:	          move.l sp,d0
    feae:	          addq.l #8,d0
    feb0:	          move.l d0,-(sp)
    feb2:	          jsr 1219a <getValueType>
    feb8:	          lea 12(sp),sp
    febc:	          tst.w d0
    febe:	      /-- bne.s fec4 <builtIn_normalCharacter+0x28>
    fec0:	      |   moveq #1,d0
    fec2:	/-----|-- bra.s ff40 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    fec4:	|     \-> moveq #24,d0
    fec6:	|         add.l 16(sp),d0
    feca:	|         move.l d0,-(sp)
    fecc:	|         jsr 12b1e <trimStack>
    fed2:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fed4:	|         move.l (sp),d0
    fed6:	|         move.l d0,-(sp)
    fed8:	|         jsr 8284 <findPerson>
    fede:	|         addq.l #4,sp
    fee0:	|         move.l d0,4(sp)
	if (thisPerson)
    fee4:	|  /----- beq.s ff26 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    fee6:	|  |      movea.l 4(sp),a0
    feea:	|  |      movea.l 68(a0),a0
    feee:	|  |      move.l (a0),d1
    fef0:	|  |      movea.l 4(sp),a0
    fef4:	|  |      move.l 94(a0),d0
    fef8:	|  |      add.l d0,d0
    fefa:	|  |      add.l d0,d0
    fefc:	|  |      movea.l d1,a0
    fefe:	|  |      adda.l d0,a0
    ff00:	|  |      move.l (a0),d0
    ff02:	|  |      movea.l 4(sp),a0
    ff06:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ff0a:	|  |      moveq #28,d0
    ff0c:	|  |      add.l 16(sp),d0
    ff10:	|  |      pea 1 <_start+0x1>
    ff14:	|  |      pea 1 <_start+0x1>
    ff18:	|  |      move.l d0,-(sp)
    ff1a:	|  |      jsr 12a8c <setVariable>
    ff20:	|  |      lea 12(sp),sp
    ff24:	|  |  /-- bra.s ff3e <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ff26:	|  \--|-> moveq #28,d0
    ff28:	|     |   add.l 16(sp),d0
    ff2c:	|     |   clr.l -(sp)
    ff2e:	|     |   pea 1 <_start+0x1>
    ff32:	|     |   move.l d0,-(sp)
    ff34:	|     |   jsr 12a8c <setVariable>
    ff3a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ff3e:	|     \-> moveq #2,d0
}
    ff40:	\-------> addq.l #8,sp
    ff42:	          rts

0000ff44 <builtIn_isMoving>:

builtIn(isMoving)
{
    ff44:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff46:	          movea.l 16(sp),a0
    ff4a:	          move.l 24(a0),d0
    ff4e:	          move.l d0,-(sp)
    ff50:	          pea 7 <_start+0x7>
    ff54:	          move.l sp,d0
    ff56:	          addq.l #8,d0
    ff58:	          move.l d0,-(sp)
    ff5a:	          jsr 1219a <getValueType>
    ff60:	          lea 12(sp),sp
    ff64:	          tst.w d0
    ff66:	      /-- bne.s ff6c <builtIn_isMoving+0x28>
    ff68:	      |   moveq #1,d0
    ff6a:	/-----|-- bra.s ffcc <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    ff6c:	|     \-> moveq #24,d0
    ff6e:	|         add.l 16(sp),d0
    ff72:	|         move.l d0,-(sp)
    ff74:	|         jsr 12b1e <trimStack>
    ff7a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ff7c:	|         move.l (sp),d0
    ff7e:	|         move.l d0,-(sp)
    ff80:	|         jsr 8284 <findPerson>
    ff86:	|         addq.l #4,sp
    ff88:	|         move.l d0,4(sp)
	if (thisPerson)
    ff8c:	|  /----- beq.s ffb2 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    ff8e:	|  |      movea.l 4(sp),a0
    ff92:	|  |      move.w 52(a0),d0
    ff96:	|  |      movea.w d0,a0
    ff98:	|  |      moveq #28,d0
    ff9a:	|  |      add.l 16(sp),d0
    ff9e:	|  |      move.l a0,-(sp)
    ffa0:	|  |      pea 1 <_start+0x1>
    ffa4:	|  |      move.l d0,-(sp)
    ffa6:	|  |      jsr 12a8c <setVariable>
    ffac:	|  |      lea 12(sp),sp
    ffb0:	|  |  /-- bra.s ffca <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ffb2:	|  \--|-> moveq #28,d0
    ffb4:	|     |   add.l 16(sp),d0
    ffb8:	|     |   clr.l -(sp)
    ffba:	|     |   pea 1 <_start+0x1>
    ffbe:	|     |   move.l d0,-(sp)
    ffc0:	|     |   jsr 12a8c <setVariable>
    ffc6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ffca:	|     \-> moveq #2,d0
}
    ffcc:	\-------> addq.l #8,sp
    ffce:	          rts

0000ffd0 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ffd0:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ffd4:	          movea.l 20(sp),a0
    ffd8:	          move.l 24(a0),d0
    ffdc:	          move.l d0,-(sp)
    ffde:	          pea 7 <_start+0x7>
    ffe2:	          lea 8(sp),a0
    ffe6:	          move.l a0,-(sp)
    ffe8:	          jsr 1219a <getValueType>
    ffee:	          lea 12(sp),sp
    fff2:	          tst.w d0
    fff4:	      /-- bne.s fffc <builtIn_fetchEvent+0x2c>
    fff6:	      |   moveq #1,d0
    fff8:	/-----|-- bra.w 10090 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    fffc:	|     \-> moveq #24,d0
    fffe:	|         add.l 20(sp),d0
   10002:	|         move.l d0,-(sp)
   10004:	|         jsr 12b1e <trimStack>
   1000a:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1000c:	|         movea.l 20(sp),a0
   10010:	|         move.l 24(a0),d0
   10014:	|         move.l d0,-(sp)
   10016:	|         pea 7 <_start+0x7>
   1001a:	|         moveq #12,d0
   1001c:	|         add.l sp,d0
   1001e:	|         move.l d0,-(sp)
   10020:	|         jsr 1219a <getValueType>
   10026:	|         lea 12(sp),sp
   1002a:	|         tst.w d0
   1002c:	|     /-- bne.s 10032 <builtIn_fetchEvent+0x62>
   1002e:	|     |   moveq #1,d0
   10030:	+-----|-- bra.s 10090 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   10032:	|     \-> moveq #24,d0
   10034:	|         add.l 20(sp),d0
   10038:	|         move.l d0,-(sp)
   1003a:	|         jsr 12b1e <trimStack>
   10040:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10042:	|         move.l (sp),d1
   10044:	|         move.l 4(sp),d0
   10048:	|         move.l d1,-(sp)
   1004a:	|         move.l d0,-(sp)
   1004c:	|         jsr b004 <getCombinationFunction>
   10052:	|         addq.l #8,sp
   10054:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   10058:	|  /----- beq.s 10076 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1005a:	|  |      moveq #28,d0
   1005c:	|  |      add.l 20(sp),d0
   10060:	|  |      move.l 8(sp),-(sp)
   10064:	|  |      pea 2 <_start+0x2>
   10068:	|  |      move.l d0,-(sp)
   1006a:	|  |      jsr 12a8c <setVariable>
   10070:	|  |      lea 12(sp),sp
   10074:	|  |  /-- bra.s 1008e <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10076:	|  \--|-> moveq #28,d0
   10078:	|     |   add.l 20(sp),d0
   1007c:	|     |   clr.l -(sp)
   1007e:	|     |   pea 1 <_start+0x1>
   10082:	|     |   move.l d0,-(sp)
   10084:	|     |   jsr 12a8c <setVariable>
   1008a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1008e:	|     \-> moveq #2,d0
}
   10090:	\-------> lea 12(sp),sp
   10094:	          rts

00010096 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   10096:	       lea -24(sp),sp
   1009a:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1009c:	       movea.l 36(sp),a0
   100a0:	       move.l 24(a0),d0
   100a4:	       move.l d0,-(sp)
   100a6:	       jsr 12770 <getTextFromAnyVar>
   100ac:	       addq.l #4,sp
   100ae:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   100b2:	       moveq #24,d0
   100b4:	       add.l 36(sp),d0
   100b8:	       move.l d0,-(sp)
   100ba:	       jsr 12b1e <trimStack>
   100c0:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   100c2:	       move.l 24(sp),-(sp)
   100c6:	       jsr 2fe <encodeFilename>
   100cc:	       addq.l #4,sp
   100ce:	       move.l d0,20(sp)
    FreeVec(namNormal);
   100d2:	       move.l 24(sp),16(sp)
   100d8:	       move.l 1938c <SysBase>,d0
   100de:	       movea.l d0,a6
   100e0:	       movea.l 16(sp),a1
   100e4:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   100e8:	       move.l 20(sp),-(sp)
   100ec:	       jsr bdbc <failSecurityCheck>
   100f2:	       addq.l #4,sp
   100f4:	       tst.w d0
   100f6:	   /-- beq.s 100fc <builtIn_deleteFile+0x66>
   100f8:	   |   moveq #1,d0
   100fa:	/--|-- bra.s 1014a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   100fc:	|  \-> move.l 20(sp),12(sp)
   10102:	|      move.l 19394 <DOSBase>,d0
   10108:	|      movea.l d0,a6
   1010a:	|      move.l 12(sp),d1
   1010e:	|      jsr -72(a6)
   10112:	|      move.l d0,8(sp)
   10116:	|      move.l 8(sp),d1
   1011a:	|      moveq #28,d0
   1011c:	|      add.l 36(sp),d0
   10120:	|      move.l d1,-(sp)
   10122:	|      pea 1 <_start+0x1>
   10126:	|      move.l d0,-(sp)
   10128:	|      jsr 12a8c <setVariable>
   1012e:	|      lea 12(sp),sp
    FreeVec(nam);
   10132:	|      move.l 20(sp),4(sp)
   10138:	|      move.l 1938c <SysBase>,d0
   1013e:	|      movea.l d0,a6
   10140:	|      movea.l 4(sp),a1
   10144:	|      jsr -690(a6)

    return BR_CONTINUE;
   10148:	|      moveq #2,d0
}
   1014a:	\----> movea.l (sp)+,a6
   1014c:	       lea 24(sp),sp
   10150:	       rts

00010152 <builtIn_renameFile>:

builtIn(renameFile)
{
   10152:	       lea -40(sp),sp
   10156:	       move.l a6,-(sp)
   10158:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1015a:	       movea.l 56(sp),a0
   1015e:	       move.l 24(a0),d0
   10162:	       move.l d0,-(sp)
   10164:	       jsr 12770 <getTextFromAnyVar>
   1016a:	       addq.l #4,sp
   1016c:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   10170:	       move.l 44(sp),-(sp)
   10174:	       jsr 2fe <encodeFilename>
   1017a:	       addq.l #4,sp
   1017c:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   10180:	       moveq #24,d0
   10182:	       add.l 56(sp),d0
   10186:	       move.l d0,-(sp)
   10188:	       jsr 12b1e <trimStack>
   1018e:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   10190:	       move.l 40(sp),-(sp)
   10194:	       jsr bdbc <failSecurityCheck>
   1019a:	       addq.l #4,sp
   1019c:	       tst.w d0
   1019e:	   /-- beq.s 101a6 <builtIn_renameFile+0x54>
   101a0:	   |   moveq #1,d0
   101a2:	/--|-- bra.w 1028c <builtIn_renameFile+0x13a>
	FreeVec(temp);
   101a6:	|  \-> move.l 44(sp),36(sp)
   101ac:	|      move.l 1938c <SysBase>,d0
   101b2:	|      movea.l d0,a6
   101b4:	|      movea.l 36(sp),a1
   101b8:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   101bc:	|      movea.l 56(sp),a0
   101c0:	|      move.l 24(a0),d0
   101c4:	|      move.l d0,-(sp)
   101c6:	|      jsr 12770 <getTextFromAnyVar>
   101cc:	|      addq.l #4,sp
   101ce:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   101d2:	|      move.l 44(sp),-(sp)
   101d6:	|      jsr 2fe <encodeFilename>
   101dc:	|      addq.l #4,sp
   101de:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   101e2:	|      moveq #24,d0
   101e4:	|      add.l 56(sp),d0
   101e8:	|      move.l d0,-(sp)
   101ea:	|      jsr 12b1e <trimStack>
   101f0:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   101f2:	|      move.l 32(sp),-(sp)
   101f6:	|      jsr bdbc <failSecurityCheck>
   101fc:	|      addq.l #4,sp
   101fe:	|      tst.w d0
   10200:	|  /-- beq.s 10208 <builtIn_renameFile+0xb6>
   10202:	|  |   moveq #1,d0
   10204:	+--|-- bra.w 1028c <builtIn_renameFile+0x13a>
	FreeVec(temp);
   10208:	|  \-> move.l 44(sp),28(sp)
   1020e:	|      move.l 1938c <SysBase>,d0
   10214:	|      movea.l d0,a6
   10216:	|      movea.l 28(sp),a1
   1021a:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1021e:	|      move.l 32(sp),24(sp)
   10224:	|      move.l 40(sp),20(sp)
   1022a:	|      move.l 19394 <DOSBase>,d0
   10230:	|      movea.l d0,a6
   10232:	|      move.l 24(sp),d1
   10236:	|      move.l 20(sp),d2
   1023a:	|      jsr -78(a6)
   1023e:	|      move.l d0,16(sp)
   10242:	|      move.l 16(sp),d1
   10246:	|      moveq #28,d0
   10248:	|      add.l 56(sp),d0
   1024c:	|      move.l d1,-(sp)
   1024e:	|      pea 1 <_start+0x1>
   10252:	|      move.l d0,-(sp)
   10254:	|      jsr 12a8c <setVariable>
   1025a:	|      lea 12(sp),sp
	FreeVec(nam);
   1025e:	|      move.l 32(sp),12(sp)
   10264:	|      move.l 1938c <SysBase>,d0
   1026a:	|      movea.l d0,a6
   1026c:	|      movea.l 12(sp),a1
   10270:	|      jsr -690(a6)
	FreeVec(newnam);
   10274:	|      move.l 40(sp),8(sp)
   1027a:	|      move.l 1938c <SysBase>,d0
   10280:	|      movea.l d0,a6
   10282:	|      movea.l 8(sp),a1
   10286:	|      jsr -690(a6)

	return BR_CONTINUE;
   1028a:	|      moveq #2,d0
}
   1028c:	\----> move.l (sp)+,d2
   1028e:	       movea.l (sp)+,a6
   10290:	       lea 40(sp),sp
   10294:	       rts

00010296 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   10296:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10298:	       movea.l 12(sp),a0
   1029c:	       move.l 24(a0),d0
   102a0:	       move.l d0,-(sp)
   102a2:	       pea 5 <_start+0x5>
   102a6:	       move.l sp,d0
   102a8:	       addq.l #8,d0
   102aa:	       move.l d0,-(sp)
   102ac:	       jsr 1219a <getValueType>
   102b2:	       lea 12(sp),sp
   102b6:	       tst.w d0
   102b8:	   /-- bne.s 102be <builtIn_cacheSound+0x28>
   102ba:	   |   moveq #1,d0
   102bc:	/--|-- bra.s 102e6 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   102be:	|  \-> moveq #24,d0
   102c0:	|      add.l 12(sp),d0
   102c4:	|      move.l d0,-(sp)
   102c6:	|      jsr 12b1e <trimStack>
   102cc:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   102ce:	|      move.l (sp),d0
   102d0:	|      move.l d0,-(sp)
   102d2:	|      jsr ac10 <cacheSound>
   102d8:	|      addq.l #4,sp
   102da:	|      moveq #-1,d1
   102dc:	|      cmp.l d0,d1
   102de:	|  /-- bne.s 102e4 <builtIn_cacheSound+0x4e>
   102e0:	|  |   moveq #1,d0
   102e2:	+--|-- bra.s 102e6 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   102e4:	|  \-> moveq #2,d0
}
   102e6:	\----> addq.l #4,sp
   102e8:	       rts

000102ea <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   102ea:	pea 1667b <custom.c.49191367+0x194f>
   102f0:	jsr 141e2 <KPrintF>
   102f6:	addq.l #4,sp
	return BR_CONTINUE;
   102f8:	moveq #2,d0
}
   102fa:	rts

000102fc <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   102fc:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10300:	          movea.l 20(sp),a0
   10304:	          move.l 24(a0),d0
   10308:	          move.l d0,-(sp)
   1030a:	          pea 1 <_start+0x1>
   1030e:	          moveq #12,d0
   10310:	          add.l sp,d0
   10312:	          move.l d0,-(sp)
   10314:	          jsr 1219a <getValueType>
   1031a:	          lea 12(sp),sp
   1031e:	          tst.w d0
   10320:	      /-- bne.s 10328 <builtIn_setCharacterSpinSpeed+0x2c>
   10322:	      |   moveq #1,d0
   10324:	/-----|-- bra.w 103c2 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   10328:	|     \-> moveq #24,d0
   1032a:	|         add.l 20(sp),d0
   1032e:	|         move.l d0,-(sp)
   10330:	|         jsr 12b1e <trimStack>
   10336:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10338:	|         movea.l 20(sp),a0
   1033c:	|         move.l 24(a0),d0
   10340:	|         move.l d0,-(sp)
   10342:	|         pea 7 <_start+0x7>
   10346:	|         lea 8(sp),a0
   1034a:	|         move.l a0,-(sp)
   1034c:	|         jsr 1219a <getValueType>
   10352:	|         lea 12(sp),sp
   10356:	|         tst.w d0
   10358:	|     /-- bne.s 1035e <builtIn_setCharacterSpinSpeed+0x62>
   1035a:	|     |   moveq #1,d0
   1035c:	+-----|-- bra.s 103c2 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1035e:	|     \-> moveq #24,d0
   10360:	|         add.l 20(sp),d0
   10364:	|         move.l d0,-(sp)
   10366:	|         jsr 12b1e <trimStack>
   1036c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1036e:	|         move.l (sp),d0
   10370:	|         move.l d0,-(sp)
   10372:	|         jsr 8284 <findPerson>
   10378:	|         addq.l #4,sp
   1037a:	|         move.l d0,8(sp)

	if (thisPerson) {
   1037e:	|  /----- beq.s 103a8 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   10380:	|  |      move.l 4(sp),d0
   10384:	|  |      movea.l 8(sp),a0
   10388:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1038c:	|  |      moveq #28,d0
   1038e:	|  |      add.l 20(sp),d0
   10392:	|  |      pea 1 <_start+0x1>
   10396:	|  |      pea 1 <_start+0x1>
   1039a:	|  |      move.l d0,-(sp)
   1039c:	|  |      jsr 12a8c <setVariable>
   103a2:	|  |      lea 12(sp),sp
   103a6:	|  |  /-- bra.s 103c0 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   103a8:	|  \--|-> moveq #28,d0
   103aa:	|     |   add.l 20(sp),d0
   103ae:	|     |   clr.l -(sp)
   103b0:	|     |   pea 1 <_start+0x1>
   103b4:	|     |   move.l d0,-(sp)
   103b6:	|     |   jsr 12a8c <setVariable>
   103bc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   103c0:	|     \-> moveq #2,d0
}
   103c2:	\-------> lea 12(sp),sp
   103c6:	          rts

000103c8 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   103c8:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103cc:	          movea.l 20(sp),a0
   103d0:	          move.l 24(a0),d0
   103d4:	          move.l d0,-(sp)
   103d6:	          pea 1 <_start+0x1>
   103da:	          moveq #12,d0
   103dc:	          add.l sp,d0
   103de:	          move.l d0,-(sp)
   103e0:	          jsr 1219a <getValueType>
   103e6:	          lea 12(sp),sp
   103ea:	          tst.w d0
   103ec:	      /-- bne.s 103f4 <builtIn_setCharacterAngleOffset+0x2c>
   103ee:	      |   moveq #1,d0
   103f0:	/-----|-- bra.w 1048e <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   103f4:	|     \-> moveq #24,d0
   103f6:	|         add.l 20(sp),d0
   103fa:	|         move.l d0,-(sp)
   103fc:	|         jsr 12b1e <trimStack>
   10402:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10404:	|         movea.l 20(sp),a0
   10408:	|         move.l 24(a0),d0
   1040c:	|         move.l d0,-(sp)
   1040e:	|         pea 7 <_start+0x7>
   10412:	|         lea 8(sp),a0
   10416:	|         move.l a0,-(sp)
   10418:	|         jsr 1219a <getValueType>
   1041e:	|         lea 12(sp),sp
   10422:	|         tst.w d0
   10424:	|     /-- bne.s 1042a <builtIn_setCharacterAngleOffset+0x62>
   10426:	|     |   moveq #1,d0
   10428:	+-----|-- bra.s 1048e <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1042a:	|     \-> moveq #24,d0
   1042c:	|         add.l 20(sp),d0
   10430:	|         move.l d0,-(sp)
   10432:	|         jsr 12b1e <trimStack>
   10438:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1043a:	|         move.l (sp),d0
   1043c:	|         move.l d0,-(sp)
   1043e:	|         jsr 8284 <findPerson>
   10444:	|         addq.l #4,sp
   10446:	|         move.l d0,8(sp)

	if (thisPerson) {
   1044a:	|  /----- beq.s 10474 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   1044c:	|  |      move.l 4(sp),d0
   10450:	|  |      movea.l 8(sp),a0
   10454:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   10458:	|  |      moveq #28,d0
   1045a:	|  |      add.l 20(sp),d0
   1045e:	|  |      pea 1 <_start+0x1>
   10462:	|  |      pea 1 <_start+0x1>
   10466:	|  |      move.l d0,-(sp)
   10468:	|  |      jsr 12a8c <setVariable>
   1046e:	|  |      lea 12(sp),sp
   10472:	|  |  /-- bra.s 1048c <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10474:	|  \--|-> moveq #28,d0
   10476:	|     |   add.l 20(sp),d0
   1047a:	|     |   clr.l -(sp)
   1047c:	|     |   pea 1 <_start+0x1>
   10480:	|     |   move.l d0,-(sp)
   10482:	|     |   jsr 12a8c <setVariable>
   10488:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1048c:	|     \-> moveq #2,d0
}
   1048e:	\-------> lea 12(sp),sp
   10492:	          rts

00010494 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   10494:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10496:	       movea.l 12(sp),a0
   1049a:	       move.l 24(a0),d0
   1049e:	       move.l d0,-(sp)
   104a0:	       pea 1 <_start+0x1>
   104a4:	       move.l sp,d0
   104a6:	       addq.l #8,d0
   104a8:	       move.l d0,-(sp)
   104aa:	       jsr 1219a <getValueType>
   104b0:	       lea 12(sp),sp
   104b4:	       tst.w d0
   104b6:	   /-- bne.s 104bc <builtIn_transitionMode+0x28>
   104b8:	   |   moveq #1,d0
   104ba:	/--|-- bra.s 104f2 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   104bc:	|  \-> move.l (sp),d0
   104be:	|      move.l d0,d0
   104c0:	|      move.b d0,19280 <fadeMode>
	trimStack (&fun -> stack);
   104c6:	|      moveq #24,d0
   104c8:	|      add.l 12(sp),d0
   104cc:	|      move.l d0,-(sp)
   104ce:	|      jsr 12b1e <trimStack>
   104d4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   104d6:	|      moveq #28,d0
   104d8:	|      add.l 12(sp),d0
   104dc:	|      pea 1 <_start+0x1>
   104e0:	|      pea 1 <_start+0x1>
   104e4:	|      move.l d0,-(sp)
   104e6:	|      jsr 12a8c <setVariable>
   104ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104f0:	|      moveq #2,d0
}
   104f2:	\----> addq.l #4,sp
   104f4:	       rts

000104f6 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   104f6:	moveq #24,d0
   104f8:	add.l 8(sp),d0
   104fc:	move.l d0,-(sp)
   104fe:	jsr 12b1e <trimStack>
   10504:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   10506:	moveq #28,d0
   10508:	add.l 8(sp),d0
   1050c:	pea 1 <_start+0x1>
   10510:	pea 1 <_start+0x1>
   10514:	move.l d0,-(sp)
   10516:	jsr 12a8c <setVariable>
   1051c:	lea 12(sp),sp
	return BR_CONTINUE;
   10520:	moveq #2,d0
}
   10522:	rts

00010524 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   10524:	pea 166a5 <custom.c.49191367+0x1979>
   1052a:	jsr 141e2 <KPrintF>
   10530:	addq.l #4,sp
	return BR_CONTINUE;
   10532:	moveq #2,d0
}
   10534:	rts

00010536 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   10536:	       lea -16(sp),sp
   1053a:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   1053c:	       movea.l 28(sp),a0
   10540:	       move.l 24(a0),d0
   10544:	       move.l d0,-(sp)
   10546:	       jsr 12770 <getTextFromAnyVar>
   1054c:	       addq.l #4,sp
   1054e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   10552:	   /-- bne.s 1055a <builtIn_saveCustomData+0x24>
   10554:	   |   moveq #1,d0
   10556:	/--|-- bra.w 1060c <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   1055a:	|  \-> move.l 16(sp),-(sp)
   1055e:	|      jsr 2fe <encodeFilename>
   10564:	|      addq.l #4,sp
   10566:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   1056a:	|      move.l 16(sp),8(sp)
   10570:	|      move.l 1938c <SysBase>,d0
   10576:	|      movea.l d0,a6
   10578:	|      movea.l 8(sp),a1
   1057c:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   10580:	|      move.l 12(sp),-(sp)
   10584:	|      jsr bdbc <failSecurityCheck>
   1058a:	|      addq.l #4,sp
   1058c:	|      tst.w d0
   1058e:	|  /-- beq.s 10594 <builtIn_saveCustomData+0x5e>
   10590:	|  |   moveq #1,d0
   10592:	+--|-- bra.s 1060c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10594:	|  \-> moveq #24,d0
   10596:	|      add.l 28(sp),d0
   1059a:	|      move.l d0,-(sp)
   1059c:	|      jsr 12b1e <trimStack>
   105a2:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   105a4:	|      movea.l 28(sp),a0
   105a8:	|      movea.l 24(a0),a0
   105ac:	|      move.l (a0),d0
   105ae:	|      moveq #6,d1
   105b0:	|      cmp.l d0,d1
   105b2:	|  /-- beq.s 105c6 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   105b4:	|  |   pea 166d2 <custom.c.49191367+0x19a6>
   105ba:	|  |   jsr 141e2 <KPrintF>
   105c0:	|  |   addq.l #4,sp
		return BR_ERROR;
   105c2:	|  |   moveq #1,d0
   105c4:	+--|-- bra.s 1060c <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   105c6:	|  \-> movea.l 28(sp),a0
   105ca:	|      move.l 24(a0),d0
   105ce:	|      move.l d0,-(sp)
   105d0:	|      move.l 16(sp),-(sp)
   105d4:	|      jsr ba0c <stackToFile>
   105da:	|      addq.l #8,sp
   105dc:	|      tst.w d0
   105de:	|  /-- bne.s 105e4 <builtIn_saveCustomData+0xae>
   105e0:	|  |   moveq #1,d0
   105e2:	+--|-- bra.s 1060c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   105e4:	|  \-> moveq #24,d0
   105e6:	|      add.l 28(sp),d0
   105ea:	|      move.l d0,-(sp)
   105ec:	|      jsr 12b1e <trimStack>
   105f2:	|      addq.l #4,sp
	FreeVec(fileName);
   105f4:	|      move.l 12(sp),4(sp)
   105fa:	|      move.l 1938c <SysBase>,d0
   10600:	|      movea.l d0,a6
   10602:	|      movea.l 4(sp),a1
   10606:	|      jsr -690(a6)
	return BR_CONTINUE;
   1060a:	|      moveq #2,d0
}
   1060c:	\----> movea.l (sp)+,a6
   1060e:	       lea 16(sp),sp
   10612:	       rts

00010614 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   10614:	       lea -28(sp),sp
   10618:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1061a:	       movea.l 40(sp),a0
   1061e:	       move.l 24(a0),d0
   10622:	       move.l d0,-(sp)
   10624:	       jsr 12770 <getTextFromAnyVar>
   1062a:	       addq.l #4,sp
   1062c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   10630:	   /-- bne.s 10638 <builtIn_loadCustomData+0x24>
   10632:	   |   moveq #1,d0
   10634:	/--|-- bra.w 10734 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   10638:	|  \-> move.l 28(sp),-(sp)
   1063c:	|      jsr 2fe <encodeFilename>
   10642:	|      addq.l #4,sp
   10644:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   10648:	|      move.l 28(sp),20(sp)
   1064e:	|      move.l 1938c <SysBase>,d0
   10654:	|      movea.l d0,a6
   10656:	|      movea.l 20(sp),a1
   1065a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   1065e:	|      move.l 24(sp),-(sp)
   10662:	|      jsr bdbc <failSecurityCheck>
   10668:	|      addq.l #4,sp
   1066a:	|      tst.w d0
   1066c:	|  /-- beq.s 10674 <builtIn_loadCustomData+0x60>
   1066e:	|  |   moveq #1,d0
   10670:	+--|-- bra.w 10734 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   10674:	|  \-> moveq #24,d0
   10676:	|      add.l 40(sp),d0
   1067a:	|      move.l d0,-(sp)
   1067c:	|      jsr 12b1e <trimStack>
   10682:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   10684:	|      moveq #28,d0
   10686:	|      add.l 40(sp),d0
   1068a:	|      move.l d0,-(sp)
   1068c:	|      jsr 123e8 <unlinkVar>
   10692:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   10694:	|      movea.l 40(sp),a0
   10698:	|      moveq #6,d0
   1069a:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1069e:	|      moveq #12,d0
   106a0:	|      move.l d0,16(sp)
   106a4:	|      clr.l 12(sp)
   106a8:	|      move.l 1938c <SysBase>,d0
   106ae:	|      movea.l d0,a6
   106b0:	|      move.l 16(sp),d0
   106b4:	|      move.l 12(sp),d1
   106b8:	|      jsr -684(a6)
   106bc:	|      move.l d0,8(sp)
   106c0:	|      move.l 8(sp),d0
   106c4:	|      movea.l 40(sp),a0
   106c8:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   106cc:	|      movea.l 40(sp),a0
   106d0:	|      move.l 32(a0),d0
   106d4:	|  /-- bne.s 106da <builtIn_loadCustomData+0xc6>
   106d6:	|  |   moveq #1,d0
   106d8:	+--|-- bra.s 10734 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   106da:	|  \-> movea.l 40(sp),a0
   106de:	|      movea.l 32(a0),a0
   106e2:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   106e4:	|      movea.l 40(sp),a0
   106e8:	|      movea.l 32(a0),a0
   106ec:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   106f0:	|      movea.l 40(sp),a0
   106f4:	|      movea.l 32(a0),a0
   106f8:	|      moveq #1,d0
   106fa:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   106fe:	|      movea.l 40(sp),a0
   10702:	|      move.l 32(a0),d0
   10706:	|      move.l d0,-(sp)
   10708:	|      move.l 28(sp),-(sp)
   1070c:	|      jsr b446 <fileToStack>
   10712:	|      addq.l #8,sp
   10714:	|      tst.w d0
   10716:	|  /-- bne.s 1071c <builtIn_loadCustomData+0x108>
   10718:	|  |   moveq #1,d0
   1071a:	+--|-- bra.s 10734 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   1071c:	|  \-> move.l 24(sp),4(sp)
   10722:	|      move.l 1938c <SysBase>,d0
   10728:	|      movea.l d0,a6
   1072a:	|      movea.l 4(sp),a1
   1072e:	|      jsr -690(a6)
	return BR_CONTINUE;
   10732:	|      moveq #2,d0
}
   10734:	\----> movea.l (sp)+,a6
   10736:	       lea 28(sp),sp
   1073a:	       rts

0001073c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   1073c:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1073e:	       movea.l 12(sp),a0
   10742:	       move.l 24(a0),d0
   10746:	       move.l d0,-(sp)
   10748:	       pea 1 <_start+0x1>
   1074c:	       move.l sp,d0
   1074e:	       addq.l #8,d0
   10750:	       move.l d0,-(sp)
   10752:	       jsr 1219a <getValueType>
   10758:	       lea 12(sp),sp
   1075c:	       tst.w d0
   1075e:	   /-- bne.s 10764 <builtIn_setCustomEncoding+0x28>
   10760:	   |   moveq #1,d0
   10762:	/--|-- bra.s 1079a <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   10764:	|  \-> move.l (sp),d0
   10766:	|      move.l d0,d0
   10768:	|      move.w d0,19498 <saveEncoding>
	trimStack (&fun -> stack);
   1076e:	|      moveq #24,d0
   10770:	|      add.l 12(sp),d0
   10774:	|      move.l d0,-(sp)
   10776:	|      jsr 12b1e <trimStack>
   1077c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1077e:	|      moveq #28,d0
   10780:	|      add.l 12(sp),d0
   10784:	|      pea 1 <_start+0x1>
   10788:	|      pea 1 <_start+0x1>
   1078c:	|      move.l d0,-(sp)
   1078e:	|      jsr 12a8c <setVariable>
   10794:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10798:	|      moveq #2,d0
}
   1079a:	\----> addq.l #4,sp
   1079c:	       rts

0001079e <builtIn_freeSound>:

builtIn(freeSound)
{
   1079e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a0:	       movea.l 12(sp),a0
   107a4:	       move.l 24(a0),d0
   107a8:	       move.l d0,-(sp)
   107aa:	       pea 5 <_start+0x5>
   107ae:	       move.l sp,d0
   107b0:	       addq.l #8,d0
   107b2:	       move.l d0,-(sp)
   107b4:	       jsr 1219a <getValueType>
   107ba:	       lea 12(sp),sp
   107be:	       tst.w d0
   107c0:	   /-- bne.s 107c6 <builtIn_freeSound+0x28>
   107c2:	   |   moveq #1,d0
   107c4:	/--|-- bra.s 107e4 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   107c6:	|  \-> moveq #24,d0
   107c8:	|      add.l 12(sp),d0
   107cc:	|      move.l d0,-(sp)
   107ce:	|      jsr 12b1e <trimStack>
   107d4:	|      addq.l #4,sp
	huntKillFreeSound (v);
   107d6:	|      move.l (sp),d0
   107d8:	|      move.l d0,-(sp)
   107da:	|      jsr ac14 <huntKillFreeSound>
   107e0:	|      addq.l #4,sp
	return BR_CONTINUE;
   107e2:	|      moveq #2,d0
}
   107e4:	\----> addq.l #4,sp
   107e6:	       rts

000107e8 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   107e8:	       lea -12(sp),sp
   107ec:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ee:	       movea.l 24(sp),a0
   107f2:	       move.l 24(a0),d0
   107f6:	       move.l d0,-(sp)
   107f8:	       pea 1 <_start+0x1>
   107fc:	       moveq #16,d0
   107fe:	       add.l sp,d0
   10800:	       move.l d0,-(sp)
   10802:	       jsr 1219a <getValueType>
   10808:	       lea 12(sp),sp
   1080c:	       tst.w d0
   1080e:	   /-- bne.s 10816 <builtIn_parallaxAdd+0x2e>
   10810:	   |   moveq #1,d0
   10812:	/--|-- bra.w 108ea <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10816:	|  \-> moveq #24,d0
   10818:	|      add.l 24(sp),d0
   1081c:	|      move.l d0,-(sp)
   1081e:	|      jsr 12b1e <trimStack>
   10824:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10826:	|      movea.l 24(sp),a0
   1082a:	|      move.l 24(a0),d0
   1082e:	|      move.l d0,-(sp)
   10830:	|      pea 1 <_start+0x1>
   10834:	|      moveq #20,d0
   10836:	|      add.l sp,d0
   10838:	|      move.l d0,-(sp)
   1083a:	|      jsr 1219a <getValueType>
   10840:	|      lea 12(sp),sp
   10844:	|      tst.w d0
   10846:	|  /-- bne.s 1084e <builtIn_parallaxAdd+0x66>
   10848:	|  |   moveq #1,d0
   1084a:	+--|-- bra.w 108ea <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1084e:	|  \-> moveq #24,d0
   10850:	|      add.l 24(sp),d0
   10854:	|      move.l d0,-(sp)
   10856:	|      jsr 12b1e <trimStack>
   1085c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1085e:	|      movea.l 24(sp),a0
   10862:	|      move.l 24(a0),d0
   10866:	|      move.l d0,-(sp)
   10868:	|      pea 5 <_start+0x5>
   1086c:	|      lea 12(sp),a0
   10870:	|      move.l a0,-(sp)
   10872:	|      jsr 1219a <getValueType>
   10878:	|      lea 12(sp),sp
   1087c:	|      tst.w d0
   1087e:	|  /-- bne.s 10884 <builtIn_parallaxAdd+0x9c>
   10880:	|  |   moveq #1,d0
   10882:	+--|-- bra.s 108ea <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10884:	|  \-> moveq #24,d0
   10886:	|      add.l 24(sp),d0
   1088a:	|      move.l d0,-(sp)
   1088c:	|      jsr 12b1e <trimStack>
   10892:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   10894:	|      move.l 8(sp),d0
   10898:	|      move.l d0,d0
   1089a:	|      moveq #0,d2
   1089c:	|      move.w d0,d2
   1089e:	|      move.l 12(sp),d0
   108a2:	|      move.l d0,d0
   108a4:	|      moveq #0,d1
   108a6:	|      move.w d0,d1
   108a8:	|      move.l 4(sp),d0
   108ac:	|      move.l d0,d0
   108ae:	|      move.w d0,d0
   108b0:	|      andi.l #65535,d0
   108b6:	|      move.l d2,-(sp)
   108b8:	|      move.l d1,-(sp)
   108ba:	|      move.l d0,-(sp)
   108bc:	|      jsr ae30 <loadParallax>
   108c2:	|      lea 12(sp),sp
   108c6:	|      tst.w d0
   108c8:	|  /-- bne.s 108ce <builtIn_parallaxAdd+0xe6>
   108ca:	|  |   moveq #1,d0
   108cc:	+--|-- bra.s 108ea <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   108ce:	|  \-> moveq #28,d0
   108d0:	|      add.l 24(sp),d0
   108d4:	|      pea 1 <_start+0x1>
   108d8:	|      pea 1 <_start+0x1>
   108dc:	|      move.l d0,-(sp)
   108de:	|      jsr 12a8c <setVariable>
   108e4:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   108e8:	|      moveq #2,d0
}
   108ea:	\----> move.l (sp)+,d2
   108ec:	       lea 12(sp),sp
   108f0:	       rts

000108f2 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   108f2:	jsr ad68 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   108f8:	moveq #28,d0
   108fa:	add.l 8(sp),d0
   108fe:	pea 1 <_start+0x1>
   10902:	pea 1 <_start+0x1>
   10906:	move.l d0,-(sp)
   10908:	jsr 12a8c <setVariable>
   1090e:	lea 12(sp),sp
	return BR_CONTINUE;
   10912:	moveq #2,d0
}
   10914:	rts

00010916 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   10916:	pea 166f0 <custom.c.49191367+0x19c4>
   1091c:	jsr 141e2 <KPrintF>
   10922:	addq.l #4,sp

	return BR_CONTINUE;
   10924:	moveq #2,d0
}
   10926:	rts

00010928 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   10928:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1092a:	             movea.l 16(sp),a0
   1092e:	             movea.l 24(a0),a0
   10932:	             move.l (a0),d0
   10934:	             moveq #1,d1
   10936:	             cmp.l d0,d1
   10938:	      /----- beq.s 10980 <builtIn_makeFastArray+0x58>
   1093a:	      |      moveq #6,d1
   1093c:	      |      cmp.l d0,d1
   1093e:	/-----|----- bne.s 109be <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   10940:	|     |      movea.l 16(sp),a0
   10944:	|     |      movea.l 24(a0),a0
   10948:	|     |      move.l 4(a0),d1
   1094c:	|     |      moveq #28,d0
   1094e:	|     |      add.l 16(sp),d0
   10952:	|     |      move.l d1,-(sp)
   10954:	|     |      move.l d0,-(sp)
   10956:	|     |      jsr 1224c <makeFastArrayFromStack>
   1095c:	|     |      addq.l #8,sp
   1095e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   10962:	|     |      moveq #24,d0
   10964:	|     |      add.l 16(sp),d0
   10968:	|     |      move.l d0,-(sp)
   1096a:	|     |      jsr 12b1e <trimStack>
   10970:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   10972:	|     |      tst.w 6(sp)
   10976:	|     |  /-- beq.s 1097c <builtIn_makeFastArray+0x54>
   10978:	|     |  |   moveq #2,d0
   1097a:	|  /--|--|-- bra.s 109d0 <builtIn_makeFastArray+0xa8>
   1097c:	|  |  |  \-> moveq #1,d0
   1097e:	|  +--|----- bra.s 109d0 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   10980:	|  |  \----> movea.l 16(sp),a0
   10984:	|  |         movea.l 24(a0),a0
   10988:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1098e:	|  |         moveq #24,d0
   10990:	|  |         add.l 16(sp),d0
   10994:	|  |         move.l d0,-(sp)
   10996:	|  |         jsr 12b1e <trimStack>
   1099c:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1099e:	|  |         moveq #28,d0
   109a0:	|  |         add.l 16(sp),d0
   109a4:	|  |         move.l 2(sp),-(sp)
   109a8:	|  |         move.l d0,-(sp)
   109aa:	|  |         jsr 122b6 <makeFastArraySize>
   109b0:	|  |         addq.l #8,sp
   109b2:	|  |         tst.w d0
   109b4:	|  |     /-- beq.s 109ba <builtIn_makeFastArray+0x92>
   109b6:	|  |     |   moveq #2,d0
   109b8:	|  +-----|-- bra.s 109d0 <builtIn_makeFastArray+0xa8>
   109ba:	|  |     \-> moveq #1,d0
   109bc:	|  +-------- bra.s 109d0 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   109be:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   109c0:	   |         pea 16719 <custom.c.49191367+0x19ed>
   109c6:	   |         jsr 141e2 <KPrintF>
   109cc:	   |         addq.l #4,sp
	return BR_ERROR;
   109ce:	   |         moveq #1,d0
}
   109d0:	   \-------> addq.l #8,sp
   109d2:	             rts

000109d4 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   109d4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109d6:	          movea.l 16(sp),a0
   109da:	          move.l 24(a0),d0
   109de:	          move.l d0,-(sp)
   109e0:	          pea 7 <_start+0x7>
   109e4:	          move.l sp,d0
   109e6:	          addq.l #8,d0
   109e8:	          move.l d0,-(sp)
   109ea:	          jsr 1219a <getValueType>
   109f0:	          lea 12(sp),sp
   109f4:	          tst.w d0
   109f6:	      /-- bne.s 109fc <builtIn_getCharacterScale+0x28>
   109f8:	      |   moveq #1,d0
   109fa:	/-----|-- bra.s 10a76 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   109fc:	|     \-> moveq #24,d0
   109fe:	|         add.l 16(sp),d0
   10a02:	|         move.l d0,-(sp)
   10a04:	|         jsr 12b1e <trimStack>
   10a0a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10a0c:	|         move.l (sp),d0
   10a0e:	|         move.l d0,-(sp)
   10a10:	|         jsr 8284 <findPerson>
   10a16:	|         addq.l #4,sp
   10a18:	|         move.l d0,4(sp)
	if (pers) {
   10a1c:	|  /----- beq.s 10a5c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   10a1e:	|  |      movea.l 4(sp),a0
   10a22:	|  |      move.l 20(a0),d0
   10a26:	|  |      move.l #1120403456,-(sp)
   10a2c:	|  |      move.l d0,-(sp)
   10a2e:	|  |      jsr 1454c <__mulsf3>
   10a34:	|  |      addq.l #8,sp
   10a36:	|  |      move.l d0,-(sp)
   10a38:	|  |      jsr 14432 <__fixsfsi>
   10a3e:	|  |      addq.l #4,sp
   10a40:	|  |      move.l d0,d1
   10a42:	|  |      moveq #28,d0
   10a44:	|  |      add.l 16(sp),d0
   10a48:	|  |      move.l d1,-(sp)
   10a4a:	|  |      pea 1 <_start+0x1>
   10a4e:	|  |      move.l d0,-(sp)
   10a50:	|  |      jsr 12a8c <setVariable>
   10a56:	|  |      lea 12(sp),sp
   10a5a:	|  |  /-- bra.s 10a74 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10a5c:	|  \--|-> moveq #28,d0
   10a5e:	|     |   add.l 16(sp),d0
   10a62:	|     |   clr.l -(sp)
   10a64:	|     |   pea 1 <_start+0x1>
   10a68:	|     |   move.l d0,-(sp)
   10a6a:	|     |   jsr 12a8c <setVariable>
   10a70:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10a74:	|     \-> moveq #2,d0
}
   10a76:	\-------> addq.l #8,sp
   10a78:	          rts

00010a7a <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   10a7a:	move.l 194bc <gameSettings>,d0
   10a80:	move.l d0,d1
   10a82:	moveq #28,d0
   10a84:	add.l 8(sp),d0
   10a88:	move.l d1,-(sp)
   10a8a:	pea 1 <_start+0x1>
   10a8e:	move.l d0,-(sp)
   10a90:	jsr 12a8c <setVariable>
   10a96:	lea 12(sp),sp
	return BR_CONTINUE;
   10a9a:	moveq #2,d0
}
   10a9c:	rts

00010a9e <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10a9e:	moveq #24,d0
   10aa0:	add.l 8(sp),d0
   10aa4:	move.l d0,-(sp)
   10aa6:	jsr 12b1e <trimStack>
   10aac:	addq.l #4,sp
	trimStack (&fun -> stack);
   10aae:	moveq #24,d0
   10ab0:	add.l 8(sp),d0
   10ab4:	move.l d0,-(sp)
   10ab6:	jsr 12b1e <trimStack>
   10abc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   10abe:	moveq #28,d0
   10ac0:	add.l 8(sp),d0
   10ac4:	clr.l -(sp)
   10ac6:	pea 1 <_start+0x1>
   10aca:	move.l d0,-(sp)
   10acc:	jsr 12a8c <setVariable>
   10ad2:	lea 12(sp),sp

	return BR_CONTINUE;
   10ad6:	moveq #2,d0

}
   10ad8:	rts

00010ada <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   10ada:	move.l 18d26 <lastFramesPerSecond>,d1
   10ae0:	moveq #28,d0
   10ae2:	add.l 8(sp),d0
   10ae6:	move.l d1,-(sp)
   10ae8:	pea 1 <_start+0x1>
   10aec:	move.l d0,-(sp)
   10aee:	jsr 12a8c <setVariable>
   10af4:	lea 12(sp),sp
	return BR_CONTINUE;
   10af8:	moveq #2,d0
}
   10afa:	rts

00010afc <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   10afc:	moveq #2,d0
}
   10afe:	rts

00010b00 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   10b00:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b04:	          movea.l 60(sp),a0
   10b08:	          move.l 24(a0),d0
   10b0c:	          move.l d0,-(sp)
   10b0e:	          pea 1 <_start+0x1>
   10b12:	          pea 192bc <thumbHeight>
   10b18:	          jsr 1219a <getValueType>
   10b1e:	          lea 12(sp),sp
   10b22:	          tst.w d0
   10b24:	      /-- bne.s 10b2c <builtIn_setThumbnailSize+0x2c>
   10b26:	      |   moveq #1,d0
   10b28:	/-----|-- bra.w 10be8 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   10b2c:	|     \-> moveq #24,d0
   10b2e:	|         add.l 60(sp),d0
   10b32:	|         move.l d0,-(sp)
   10b34:	|         jsr 12b1e <trimStack>
   10b3a:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b3c:	|         movea.l 60(sp),a0
   10b40:	|         move.l 24(a0),d0
   10b44:	|         move.l d0,-(sp)
   10b46:	|         pea 1 <_start+0x1>
   10b4a:	|         pea 192b8 <thumbWidth>
   10b50:	|         jsr 1219a <getValueType>
   10b56:	|         lea 12(sp),sp
   10b5a:	|         tst.w d0
   10b5c:	|     /-- bne.s 10b64 <builtIn_setThumbnailSize+0x64>
   10b5e:	|     |   moveq #1,d0
   10b60:	+-----|-- bra.w 10be8 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   10b64:	|     \-> moveq #24,d0
   10b66:	|         add.l 60(sp),d0
   10b6a:	|         move.l d0,-(sp)
   10b6c:	|         jsr 12b1e <trimStack>
   10b72:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   10b74:	|         move.l 192b8 <thumbWidth>,d0
   10b7a:	|     /-- bmi.s 10ba8 <builtIn_setThumbnailSize+0xa8>
   10b7c:	|     |   move.l 192bc <thumbHeight>,d0
   10b82:	|     +-- bmi.s 10ba8 <builtIn_setThumbnailSize+0xa8>
   10b84:	|     |   move.l 192b8 <thumbWidth>,d0
   10b8a:	|     |   move.l d0,d1
   10b8c:	|     |   move.l 192e0 <winWidth>,d0
   10b92:	|     |   cmp.l d1,d0
   10b94:	|     +-- bcs.s 10ba8 <builtIn_setThumbnailSize+0xa8>
   10b96:	|     |   move.l 192bc <thumbHeight>,d0
   10b9c:	|     |   move.l d0,d1
   10b9e:	|     |   move.l 192e4 <winHeight>,d0
   10ba4:	|     |   cmp.l d1,d0
   10ba6:	|  /--|-- bcc.s 10be6 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   10ba8:	|  |  \-> move.l 192bc <thumbHeight>,d1
   10bae:	|  |      move.l 192b8 <thumbWidth>,d0
   10bb4:	|  |      move.l d1,-(sp)
   10bb6:	|  |      move.l d0,-(sp)
   10bb8:	|  |      pea 16740 <custom.c.49191367+0x1a14>
   10bbe:	|  |      lea 14(sp),a0
   10bc2:	|  |      move.l a0,-(sp)
   10bc4:	|  |      jsr 119a4 <sprintf>
   10bca:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   10bce:	|  |      lea 2(sp),a0
   10bd2:	|  |      move.l a0,-(sp)
   10bd4:	|  |      pea 16748 <custom.c.49191367+0x1a1c>
   10bda:	|  |      jsr 141e2 <KPrintF>
   10be0:	|  |      addq.l #8,sp
		return BR_ERROR;
   10be2:	|  |      moveq #1,d0
   10be4:	+--|----- bra.s 10be8 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   10be6:	|  \----> moveq #2,d0
}
   10be8:	\-------> lea 52(sp),sp
   10bec:	          rts

00010bee <builtIn_hasFlag>:

builtIn(hasFlag)
{
   10bee:	       lea -12(sp),sp
   10bf2:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bf4:	       movea.l 24(sp),a0
   10bf8:	       move.l 24(a0),d0
   10bfc:	       move.l d0,-(sp)
   10bfe:	       pea 1 <_start+0x1>
   10c02:	       lea 12(sp),a0
   10c06:	       move.l a0,-(sp)
   10c08:	       jsr 1219a <getValueType>
   10c0e:	       lea 12(sp),sp
   10c12:	       tst.w d0
   10c14:	   /-- bne.s 10c1c <builtIn_hasFlag+0x2e>
   10c16:	   |   moveq #1,d0
   10c18:	/--|-- bra.w 10cac <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   10c1c:	|  \-> moveq #24,d0
   10c1e:	|      add.l 24(sp),d0
   10c22:	|      move.l d0,-(sp)
   10c24:	|      jsr 12b1e <trimStack>
   10c2a:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c2c:	|      movea.l 24(sp),a0
   10c30:	|      move.l 24(a0),d0
   10c34:	|      move.l d0,-(sp)
   10c36:	|      pea 7 <_start+0x7>
   10c3a:	|      moveq #16,d0
   10c3c:	|      add.l sp,d0
   10c3e:	|      move.l d0,-(sp)
   10c40:	|      jsr 1219a <getValueType>
   10c46:	|      lea 12(sp),sp
   10c4a:	|      tst.w d0
   10c4c:	|  /-- bne.s 10c52 <builtIn_hasFlag+0x64>
   10c4e:	|  |   moveq #1,d0
   10c50:	+--|-- bra.s 10cac <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   10c52:	|  \-> moveq #24,d0
   10c54:	|      add.l 24(sp),d0
   10c58:	|      move.l d0,-(sp)
   10c5a:	|      jsr 12b1e <trimStack>
   10c60:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   10c62:	|      move.l 8(sp),d0
   10c66:	|      move.l d0,-(sp)
   10c68:	|      jsr afd0 <findObjectType>
   10c6e:	|      addq.l #4,sp
   10c70:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   10c74:	|  /-- bne.s 10c7a <builtIn_hasFlag+0x8c>
   10c76:	|  |   moveq #1,d0
   10c78:	+--|-- bra.s 10cac <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   10c7a:	|  \-> movea.l 12(sp),a0
   10c7e:	|      move.w 36(a0),d0
   10c82:	|      moveq #0,d2
   10c84:	|      move.w d0,d2
   10c86:	|      move.l 4(sp),d1
   10c8a:	|      moveq #1,d0
   10c8c:	|      lsl.l d1,d0
   10c8e:	|      move.l d2,d1
   10c90:	|      and.l d0,d1
   10c92:	|      moveq #28,d0
   10c94:	|      add.l 24(sp),d0
   10c98:	|      move.l d1,-(sp)
   10c9a:	|      pea 1 <_start+0x1>
   10c9e:	|      move.l d0,-(sp)
   10ca0:	|      jsr 12a8c <setVariable>
   10ca6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10caa:	|      moveq #2,d0
}
   10cac:	\----> move.l (sp)+,d2
   10cae:	       lea 12(sp),sp
   10cb2:	       rts

00010cb4 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   10cb4:	       jsr afbe <snapshot>
   10cba:	       tst.w d0
   10cbc:	/----- beq.s 10cc2 <builtIn_snapshotGrab+0xe>
   10cbe:	|      moveq #2,d0
   10cc0:	|  /-- bra.s 10cc4 <builtIn_snapshotGrab+0x10>
   10cc2:	\--|-> moveq #1,d0
}
   10cc4:	   \-> rts

00010cc6 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   10cc6:	jsr ae76 <nosnapshot>
	return BR_CONTINUE;
   10ccc:	moveq #2,d0
}
   10cce:	rts

00010cd0 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   10cd0:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   10cd2:	move.w 18c02 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   10cda:	movea.l 12(sp),a0
   10cde:	move.l 24(a0),d0
   10ce2:	move.l d0,-(sp)
   10ce4:	jsr 126da <getBoolean>
   10cea:	addq.l #4,sp
   10cec:	move.w d0,18c02 <allowAnyFilename>
	trimStack (&fun -> stack);
   10cf2:	moveq #24,d0
   10cf4:	add.l 12(sp),d0
   10cf8:	move.l d0,-(sp)
   10cfa:	jsr 12b1e <trimStack>
   10d00:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   10d02:	movea.w 2(sp),a0
   10d06:	moveq #28,d0
   10d08:	add.l 12(sp),d0
   10d0c:	move.l a0,-(sp)
   10d0e:	pea 1 <_start+0x1>
   10d12:	move.l d0,-(sp)
   10d14:	jsr 12a8c <setVariable>
   10d1a:	lea 12(sp),sp
	return BR_CONTINUE;
   10d1e:	moveq #2,d0
}
   10d20:	addq.l #4,sp
   10d22:	rts

00010d24 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10d24:	moveq #24,d0
   10d26:	add.l 8(sp),d0
   10d2a:	move.l d0,-(sp)
   10d2c:	jsr 12b1e <trimStack>
   10d32:	addq.l #4,sp
	trimStack (&fun -> stack);
   10d34:	moveq #24,d0
   10d36:	add.l 8(sp),d0
   10d3a:	move.l d0,-(sp)
   10d3c:	jsr 12b1e <trimStack>
   10d42:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   10d44:	moveq #28,d0
   10d46:	add.l 8(sp),d0
   10d4a:	clr.l -(sp)
   10d4c:	pea 1 <_start+0x1>
   10d50:	move.l d0,-(sp)
   10d52:	jsr 12a8c <setVariable>
   10d58:	lea 12(sp),sp

	return BR_CONTINUE;
   10d5c:	moveq #2,d0
}
   10d5e:	rts

00010d60 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   10d60:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   10d62:	movea.l 12(sp),a0
   10d66:	move.l 24(a0),d0
   10d6a:	move.l d0,-(sp)
   10d6c:	jsr 12770 <getTextFromAnyVar>
   10d72:	addq.l #4,sp
   10d74:	move.l d0,(sp)
	trimStack (&fun -> stack);
   10d76:	moveq #24,d0
   10d78:	add.l 12(sp),d0
   10d7c:	move.l d0,-(sp)
   10d7e:	jsr 12b1e <trimStack>
   10d84:	addq.l #4,sp
	KPrintF (mess);
   10d86:	move.l (sp),-(sp)
   10d88:	jsr 141e2 <KPrintF>
   10d8e:	addq.l #4,sp
	return BR_ERROR;
   10d90:	moveq #1,d0
}
   10d92:	addq.l #4,sp
   10d94:	rts

00010d96 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10d96:	moveq #24,d0
   10d98:	add.l 8(sp),d0
   10d9c:	move.l d0,-(sp)
   10d9e:	jsr 12b1e <trimStack>
   10da4:	addq.l #4,sp
	trimStack (&fun -> stack);
   10da6:	moveq #24,d0
   10da8:	add.l 8(sp),d0
   10dac:	move.l d0,-(sp)
   10dae:	jsr 12b1e <trimStack>
   10db4:	addq.l #4,sp
	trimStack (&fun -> stack);
   10db6:	moveq #24,d0
   10db8:	add.l 8(sp),d0
   10dbc:	move.l d0,-(sp)
   10dbe:	jsr 12b1e <trimStack>
   10dc4:	addq.l #4,sp
	trimStack (&fun -> stack);
   10dc6:	moveq #24,d0
   10dc8:	add.l 8(sp),d0
   10dcc:	move.l d0,-(sp)
   10dce:	jsr 12b1e <trimStack>
   10dd4:	addq.l #4,sp

	return BR_CONTINUE;
   10dd6:	moveq #2,d0
}
   10dd8:	rts

00010dda <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10dda:	moveq #24,d0
   10ddc:	add.l 8(sp),d0
   10de0:	move.l d0,-(sp)
   10de2:	jsr 12b1e <trimStack>
   10de8:	addq.l #4,sp
	trimStack (&fun -> stack);
   10dea:	moveq #24,d0
   10dec:	add.l 8(sp),d0
   10df0:	move.l d0,-(sp)
   10df2:	jsr 12b1e <trimStack>
   10df8:	addq.l #4,sp
	trimStack (&fun -> stack);
   10dfa:	moveq #24,d0
   10dfc:	add.l 8(sp),d0
   10e00:	move.l d0,-(sp)
   10e02:	jsr 12b1e <trimStack>
   10e08:	addq.l #4,sp

	return BR_CONTINUE;
   10e0a:	moveq #2,d0

}
   10e0c:	rts

00010e0e <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   10e0e:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   10e10:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   10e16:	sne d0
   10e18:	neg.b d0
   10e1a:	moveq #0,d1
   10e1c:	move.b d0,d1
   10e1e:	moveq #28,d0
   10e20:	add.l 12(sp),d0
   10e24:	move.l d1,-(sp)
   10e26:	pea 1 <_start+0x1>
   10e2a:	move.l d0,-(sp)
   10e2c:	jsr 12a8c <setVariable>
   10e32:	lea 12(sp),sp
	return BR_CONTINUE;
   10e36:	moveq #2,d0
}
   10e38:	addq.l #4,sp
   10e3a:	rts

00010e3c <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   10e3c:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   10e3e:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   10e44:	pea 1675f <custom.c.49191367+0x1a33>
   10e4a:	jsr 141e2 <KPrintF>
   10e50:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   10e52:	tst.w 2(sp)
   10e56:	sne d0
   10e58:	neg.b d0
   10e5a:	moveq #0,d1
   10e5c:	move.b d0,d1
   10e5e:	moveq #28,d0
   10e60:	add.l 12(sp),d0
   10e64:	move.l d1,-(sp)
   10e66:	pea 1 <_start+0x1>
   10e6a:	move.l d0,-(sp)
   10e6c:	jsr 12a8c <setVariable>
   10e72:	lea 12(sp),sp
	return BR_CONTINUE;
   10e76:	moveq #2,d0
}
   10e78:	addq.l #4,sp
   10e7a:	rts

00010e7c <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   10e7c:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   10e80:	             move.l 104(sp),d0
   10e84:	             cmpi.l #166,d0
   10e8a:	/----------- bhi.w 10f6c <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   10e8e:	|            move.l 104(sp),d0
   10e92:	|            add.l d0,d0
   10e94:	|            movea.l d0,a1
   10e96:	|            adda.l d0,a1
   10e98:	|            lea 18d48 <paramNum>,a0
   10e9e:	|            move.l (0,a1,a0.l),d0
   10ea2:	|            moveq #-1,d1
   10ea4:	|            cmp.l d0,d1
   10ea6:	|  /-------- beq.w 10f34 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   10eaa:	|  |         move.l 104(sp),d0
   10eae:	|  |         add.l d0,d0
   10eb0:	|  |         movea.l d0,a1
   10eb2:	|  |         adda.l d0,a1
   10eb4:	|  |         lea 18d48 <paramNum>,a0
   10eba:	|  |         move.l (0,a1,a0.l),d0
   10ebe:	|  |         cmp.l 108(sp),d0
   10ec2:	|  +-------- beq.s 10f34 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   10ec4:	|  |         move.l 104(sp),d0
   10ec8:	|  |         add.l d0,d0
   10eca:	|  |         movea.l d0,a1
   10ecc:	|  |         adda.l d0,a1
   10ece:	|  |         lea 18d48 <paramNum>,a0
   10ed4:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   10ed8:	|  |         moveq #1,d1
   10eda:	|  |         cmp.l d0,d1
   10edc:	|  |  /----- bne.s 10ee6 <callBuiltIn+0x6a>
   10ede:	|  |  |      move.l #87063,d0
   10ee4:	|  |  |  /-- bra.s 10eec <callBuiltIn+0x70>
   10ee6:	|  |  \--|-> move.l #92053,d0
   10eec:	|  |     \-> move.l 104(sp),d1
   10ef0:	|  |         add.l d1,d1
   10ef2:	|  |         movea.l d1,a1
   10ef4:	|  |         adda.l d1,a1
   10ef6:	|  |         lea 18d48 <paramNum>,a0
   10efc:	|  |         move.l (0,a1,a0.l),d1
   10f00:	|  |         move.l d0,-(sp)
   10f02:	|  |         move.l d1,-(sp)
   10f04:	|  |         pea 16797 <custom.c.49191367+0x1a6b>
   10f0a:	|  |         lea 12(sp),a0
   10f0e:	|  |         move.l a0,-(sp)
   10f10:	|  |         jsr 119a4 <sprintf>
   10f16:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   10f1a:	|  |         movea.l sp,a0
   10f1c:	|  |         move.l a0,-(sp)
   10f1e:	|  |         jsr b8 <copyString>
   10f24:	|  |         addq.l #4,sp
   10f26:	|  |         move.l d0,-(sp)
   10f28:	|  |         jsr 141e2 <KPrintF>
   10f2e:	|  |         addq.l #4,sp
				return BR_ERROR;
   10f30:	|  |         moveq #1,d0
   10f32:	|  |     /-- bra.s 10f7c <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   10f34:	|  \-----|-> move.l 104(sp),d0
   10f38:	|        |   add.l d0,d0
   10f3a:	|        |   movea.l d0,a1
   10f3c:	|        |   adda.l d0,a1
   10f3e:	|        |   lea 18fe4 <builtInFunctionArray>,a0
   10f44:	|        |   move.l (0,a1,a0.l),d0
   10f48:	+--------|-- beq.s 10f6c <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   10f4a:	|        |   move.l 104(sp),d0
   10f4e:	|        |   add.l d0,d0
   10f50:	|        |   movea.l d0,a1
   10f52:	|        |   adda.l d0,a1
   10f54:	|        |   lea 18fe4 <builtInFunctionArray>,a0
   10f5a:	|        |   movea.l (0,a1,a0.l),a0
   10f5e:	|        |   move.l 112(sp),-(sp)
   10f62:	|        |   move.l 112(sp),-(sp)
   10f66:	|        |   jsr (a0)
   10f68:	|        |   addq.l #8,sp
   10f6a:	|        +-- bra.s 10f7c <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   10f6c:	\--------|-> pea 167c2 <custom.c.49191367+0x1a96>
   10f72:	         |   jsr 141e2 <KPrintF>
   10f78:	         |   addq.l #4,sp
	return BR_ERROR;
   10f7a:	         |   moveq #1,d0
}
   10f7c:	         \-> lea 100(sp),sp
   10f80:	             rts

00010f82 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   10f82:	          subq.l #8,sp
	int indexNum = -1;
   10f84:	          moveq #-1,d0
   10f86:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10f8a:	          clr.l (sp)
   10f8c:	   /----- bra.s 10fb2 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   10f8e:	/--|----> move.l 194b4 <languageTable>,d1
   10f94:	|  |      move.l (sp),d0
   10f96:	|  |      add.l d0,d0
   10f98:	|  |      add.l d0,d0
   10f9a:	|  |      movea.l d1,a0
   10f9c:	|  |      adda.l d0,a0
   10f9e:	|  |      move.l (a0),d0
   10fa0:	|  |      move.l d0,d1
   10fa2:	|  |      move.l 194bc <gameSettings>,d0
   10fa8:	|  |      cmp.l d1,d0
   10faa:	|  |  /-- bne.s 10fb0 <getLanguageForFileB+0x2e>
   10fac:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10fb0:	|  |  \-> addq.l #1,(sp)
   10fb2:	|  \----> move.l 194c0 <gameSettings+0x4>,d0
   10fb8:	|         cmp.l (sp),d0
   10fba:	\-------- bcc.s 10f8e <getLanguageForFileB+0xc>
	}

	return indexNum;
   10fbc:	          move.l 4(sp),d0
}
   10fc0:	          addq.l #8,sp
   10fc2:	          rts

00010fc4 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   10fc4:	          lea -20(sp),sp
   10fc8:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   10fca:	          move.l 28(sp),-(sp)
   10fce:	          jsr 11686 <strlen>
   10fd4:	          addq.l #4,sp
   10fd6:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   10fda:	          moveq #4,d0
   10fdc:	          cmp.l 12(sp),d0
   10fe0:	      /-- bge.s 11004 <getPrefsFilename+0x40>
   10fe2:	      |   move.l 12(sp),d0
   10fe6:	      |   subq.l #4,d0
   10fe8:	      |   movea.l 28(sp),a0
   10fec:	      |   adda.l d0,a0
   10fee:	      |   move.b (a0),d0
   10ff0:	      |   cmpi.b #46,d0
   10ff4:	      +-- bne.s 11004 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   10ff6:	      |   move.l 12(sp),d0
   10ffa:	      |   subq.l #4,d0
   10ffc:	      |   movea.l 28(sp),a0
   11000:	      |   adda.l d0,a0
   11002:	      |   clr.b (a0)
	}

	char * f = filename;
   11004:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1100a:	          clr.l 20(sp)
   1100e:	   /----- bra.s 11036 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   11010:	/--|----> move.l 20(sp),d0
   11014:	|  |      movea.l 28(sp),a0
   11018:	|  |      adda.l d0,a0
   1101a:	|  |      move.b (a0),d0
   1101c:	|  |      cmpi.b #47,d0
   11020:	|  |  /-- bne.s 11032 <getPrefsFilename+0x6e>
   11022:	|  |  |   move.l 20(sp),d0
   11026:	|  |  |   addq.l #1,d0
   11028:	|  |  |   move.l 28(sp),d1
   1102c:	|  |  |   add.l d0,d1
   1102e:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   11032:	|  |  \-> addq.l #1,20(sp)
   11036:	|  \----> move.l 20(sp),d0
   1103a:	|         cmp.l 12(sp),d0
   1103e:	\-------- blt.s 11010 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   11040:	          pea 167ed <custom.c.49191367+0x1ac1>
   11046:	          move.l 20(sp),-(sp)
   1104a:	          jsr 116c6 <joinStrings>
   11050:	          addq.l #8,sp
   11052:	          move.l d0,8(sp)

	FreeVec(filename);
   11056:	          move.l 28(sp),4(sp)
   1105c:	          move.l 1938c <SysBase>,d0
   11062:	          movea.l d0,a6
   11064:	          movea.l 4(sp),a1
   11068:	          jsr -690(a6)
	filename = NULL;
   1106c:	          clr.l 28(sp)
	return joined;
   11070:	          move.l 8(sp),d0
}
   11074:	          movea.l (sp)+,a6
   11076:	          lea 20(sp),sp
   1107a:	          rts

0001107c <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1107c:	             lea -28(sp),sp
   11080:	             move.l a6,-(sp)
   11082:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   11084:	             move.l 194c0 <gameSettings+0x4>,d0
   1108a:	             move.l d0,d1
   1108c:	             addq.l #1,d1
   1108e:	             move.l d1,28(sp)
   11092:	             clr.l 24(sp)
   11096:	             move.l 1938c <SysBase>,d0
   1109c:	             movea.l d0,a6
   1109e:	             move.l 28(sp),d0
   110a2:	             move.l 24(sp),d1
   110a6:	             jsr -684(a6)
   110aa:	             move.l d0,20(sp)
   110ae:	             move.l 20(sp),d0
   110b2:	             move.l d0,194b4 <languageTable>
    if( languageTable == 0) {
   110b8:	             move.l 194b4 <languageTable>,d0
   110be:	         /-- bne.s 110ce <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   110c0:	         |   pea 167f2 <custom.c.49191367+0x1ac6>
   110c6:	         |   jsr 141e2 <KPrintF>
   110cc:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   110ce:	         \-> move.l 194c0 <gameSettings+0x4>,d0
   110d4:	             move.l d0,d1
   110d6:	             addq.l #1,d1
   110d8:	             move.l d1,16(sp)
   110dc:	             clr.l 12(sp)
   110e0:	             move.l 1938c <SysBase>,d0
   110e6:	             movea.l d0,a6
   110e8:	             move.l 16(sp),d0
   110ec:	             move.l 12(sp),d1
   110f0:	             jsr -684(a6)
   110f4:	             move.l d0,8(sp)
   110f8:	             move.l 8(sp),d0
   110fc:	             move.l d0,194b8 <languageName>
	if( languageName == 0) {
   11102:	             move.l 194b8 <languageName>,d0
   11108:	         /-- bne.s 11118 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1110a:	         |   pea 16828 <custom.c.49191367+0x1afc>
   11110:	         |   jsr 141e2 <KPrintF>
   11116:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   11118:	         \-> clr.l 32(sp)
   1111c:	   /-------- bra.s 11194 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1111e:	/--|-------> tst.l 32(sp)
   11122:	|  |  /----- beq.s 11132 <makeLanguageTable+0xb6>
   11124:	|  |  |      move.l 40(sp),-(sp)
   11128:	|  |  |      jsr 6bc <get2bytes>
   1112e:	|  |  |      addq.l #4,sp
   11130:	|  |  |  /-- bra.s 11134 <makeLanguageTable+0xb8>
   11132:	|  |  \--|-> moveq #0,d0
   11134:	|  |     \-> movea.l 194b4 <languageTable>,a0
   1113a:	|  |         move.l 32(sp),d1
   1113e:	|  |         add.l d1,d1
   11140:	|  |         add.l d1,d1
   11142:	|  |         adda.l d1,a0
   11144:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   11146:	|  |         move.l 194b8 <languageName>,d1
   1114c:	|  |         move.l 32(sp),d0
   11150:	|  |         add.l d0,d0
   11152:	|  |         add.l d0,d0
   11154:	|  |         movea.l d1,a0
   11156:	|  |         adda.l d0,a0
   11158:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1115a:	|  |         move.l 19336 <gameVersion>,d0
   11160:	|  |         cmpi.l #511,d0
   11166:	|  |     /-- ble.s 11190 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   11168:	|  |     |   move.l 194c0 <gameSettings+0x4>,d0
   1116e:	|  |     +-- beq.s 11190 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   11170:	|  |     |   move.l 194b8 <languageName>,d1
   11176:	|  |     |   move.l 32(sp),d0
   1117a:	|  |     |   add.l d0,d0
   1117c:	|  |     |   add.l d0,d0
   1117e:	|  |     |   movea.l d1,a2
   11180:	|  |     |   adda.l d0,a2
   11182:	|  |     |   move.l 40(sp),-(sp)
   11186:	|  |     |   jsr b02 <readString>
   1118c:	|  |     |   addq.l #4,sp
   1118e:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   11190:	|  |     \-> addq.l #1,32(sp)
   11194:	|  \-------> move.l 194c0 <gameSettings+0x4>,d0
   1119a:	|            cmp.l 32(sp),d0
   1119e:	\----------- bcc.w 1111e <makeLanguageTable+0xa2>
		}
	}
}
   111a2:	             nop
   111a4:	             nop
   111a6:	             movea.l (sp)+,a2
   111a8:	             movea.l (sp)+,a6
   111aa:	             lea 28(sp),sp
   111ae:	             rts

000111b0 <readIniFile>:

void readIniFile (char * filename) {
   111b0:	                      lea -564(sp),sp
   111b4:	                      move.l a6,-(sp)
   111b6:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   111b8:	                      move.l 576(sp),-(sp)
   111bc:	                      jsr b8 <copyString>
   111c2:	                      addq.l #4,sp
   111c4:	                      move.l d0,-(sp)
   111c6:	                      jsr 10fc4 <getPrefsFilename>
   111cc:	                      addq.l #4,sp
   111ce:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   111d2:	                      move.l 562(sp),558(sp)
   111d8:	                      move.l #1005,554(sp)
   111e0:	                      move.l 19394 <DOSBase>,d0
   111e6:	                      movea.l d0,a6
   111e8:	                      move.l 558(sp),d1
   111ec:	                      move.l 554(sp),d2
   111f0:	                      jsr -30(a6)
   111f4:	                      move.l d0,550(sp)
   111f8:	                      move.l 550(sp),d0
   111fc:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   11200:	                      clr.l 194bc <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   11206:	                      move.w #1,194c4 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1120e:	                      clr.l 194c6 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   11214:	                      moveq #1,d0
   11216:	                      move.l d0,194ca <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1121c:	                      clr.w 194ce <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   11222:	                      clr.w 194d0 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   11228:	                      clr.w 194d2 <gameSettings+0x16>

	FreeVec(langName);
   1122e:	                      move.l 562(sp),542(sp)
   11234:	                      move.l 1938c <SysBase>,d0
   1123a:	                      movea.l d0,a6
   1123c:	                      movea.l 542(sp),a1
   11240:	                      jsr -690(a6)
	langName = NULL;
   11244:	                      clr.l 562(sp)

	if (fp) {
   11248:	                      tst.l 546(sp)
   1124c:	/-------------------- beq.w 1152a <readIniFile+0x37a>
		char lineSoFar[257] = "";
   11250:	|                     move.l sp,d0
   11252:	|                     addi.l #265,d0
   11258:	|                     move.l #257,d1
   1125e:	|                     move.l d1,-(sp)
   11260:	|                     clr.l -(sp)
   11262:	|                     move.l d0,-(sp)
   11264:	|                     jsr 14166 <memset>
   1126a:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   1126e:	|                     move.l sp,d0
   11270:	|                     addq.l #8,d0
   11272:	|                     move.l #257,d1
   11278:	|                     move.l d1,-(sp)
   1127a:	|                     clr.l -(sp)
   1127c:	|                     move.l d0,-(sp)
   1127e:	|                     jsr 14166 <memset>
   11284:	|                     lea 12(sp),sp
		unsigned char here = 0;
   11288:	|                     clr.b 571(sp)
		char readChar = ' ';
   1128c:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   11292:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   11298:	|                     clr.w 566(sp)
		LONG tmp = 0;
   1129c:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   112a0:	|  /----------------> move.l 546(sp),534(sp)
   112a6:	|  |                  move.l 19394 <DOSBase>,d0
   112ac:	|  |                  movea.l d0,a6
   112ae:	|  |                  move.l 534(sp),d1
   112b2:	|  |                  jsr -306(a6)
   112b6:	|  |                  move.l d0,530(sp)
   112ba:	|  |                  move.l 530(sp),d0
   112be:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   112c2:	|  |                  moveq #-1,d1
   112c4:	|  |                  cmp.l 538(sp),d1
   112c8:	|  |           /----- bne.s 112d6 <readIniFile+0x126>
				readChar = '\n';
   112ca:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   112d0:	|  |           |      clr.w 568(sp)
   112d4:	|  |           |  /-- bra.s 112dc <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   112d6:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   112dc:	|  |              \-> move.b 570(sp),d0
   112e0:	|  |                  ext.w d0
   112e2:	|  |                  movea.w d0,a0
   112e4:	|  |                  moveq #61,d0
   112e6:	|  |                  cmp.l a0,d0
   112e8:	|  |     /----------- beq.w 11492 <readIniFile+0x2e2>
   112ec:	|  |     |            moveq #61,d1
   112ee:	|  |     |            cmp.l a0,d1
   112f0:	|  |  /--|----------- blt.w 1149e <readIniFile+0x2ee>
   112f4:	|  |  |  |            moveq #10,d0
   112f6:	|  |  |  |            cmp.l a0,d0
   112f8:	|  |  |  |        /-- beq.s 11302 <readIniFile+0x152>
   112fa:	|  |  |  |        |   moveq #13,d1
   112fc:	|  |  |  |        |   cmp.l a0,d1
   112fe:	|  |  +--|--------|-- bne.w 1149e <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   11302:	|  |  |  |        \-> tst.w 566(sp)
   11306:	|  |  |  |     /----- beq.w 11480 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1130a:	|  |  |  |     |      pea 1685c <custom.c.49191367+0x1b30>
   11310:	|  |  |  |     |      move.l sp,d0
   11312:	|  |  |  |     |      addi.l #269,d0
   11318:	|  |  |  |     |      move.l d0,-(sp)
   1131a:	|  |  |  |     |      jsr 11646 <strcmp>
   11320:	|  |  |  |     |      addq.l #8,sp
   11322:	|  |  |  |     |      tst.l d0
   11324:	|  |  |  |     |  /-- bne.s 1133e <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   11326:	|  |  |  |     |  |   move.l sp,d0
   11328:	|  |  |  |     |  |   addq.l #8,d0
   1132a:	|  |  |  |     |  |   move.l d0,-(sp)
   1132c:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   11332:	|  |  |  |     |  |   addq.l #4,sp
   11334:	|  |  |  |     |  |   move.l d0,194bc <gameSettings>
   1133a:	|  |  |  |     +--|-- bra.w 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1133e:	|  |  |  |     |  \-> pea 16865 <custom.c.49191367+0x1b39>
   11344:	|  |  |  |     |      move.l sp,d0
   11346:	|  |  |  |     |      addi.l #269,d0
   1134c:	|  |  |  |     |      move.l d0,-(sp)
   1134e:	|  |  |  |     |      jsr 11646 <strcmp>
   11354:	|  |  |  |     |      addq.l #8,sp
   11356:	|  |  |  |     |      tst.l d0
   11358:	|  |  |  |     |  /-- bne.s 1137e <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1135a:	|  |  |  |     |  |   move.l sp,d0
   1135c:	|  |  |  |     |  |   addq.l #8,d0
   1135e:	|  |  |  |     |  |   move.l d0,-(sp)
   11360:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   11366:	|  |  |  |     |  |   addq.l #4,sp
   11368:	|  |  |  |     |  |   tst.l d0
   1136a:	|  |  |  |     |  |   seq d0
   1136c:	|  |  |  |     |  |   neg.b d0
   1136e:	|  |  |  |     |  |   move.b d0,d0
   11370:	|  |  |  |     |  |   andi.w #255,d0
   11374:	|  |  |  |     |  |   move.w d0,194c4 <gameSettings+0x8>
   1137a:	|  |  |  |     +--|-- bra.w 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1137e:	|  |  |  |     |  \-> pea 1686c <custom.c.49191367+0x1b40>
   11384:	|  |  |  |     |      move.l sp,d0
   11386:	|  |  |  |     |      addi.l #269,d0
   1138c:	|  |  |  |     |      move.l d0,-(sp)
   1138e:	|  |  |  |     |      jsr 11646 <strcmp>
   11394:	|  |  |  |     |      addq.l #8,sp
   11396:	|  |  |  |     |      tst.l d0
   11398:	|  |  |  |     |  /-- bne.s 113b2 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1139a:	|  |  |  |     |  |   move.l sp,d0
   1139c:	|  |  |  |     |  |   addq.l #8,d0
   1139e:	|  |  |  |     |  |   move.l d0,-(sp)
   113a0:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   113a6:	|  |  |  |     |  |   addq.l #4,sp
   113a8:	|  |  |  |     |  |   move.l d0,194c6 <gameSettings+0xa>
   113ae:	|  |  |  |     +--|-- bra.w 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   113b2:	|  |  |  |     |  \-> pea 16874 <custom.c.49191367+0x1b48>
   113b8:	|  |  |  |     |      move.l sp,d0
   113ba:	|  |  |  |     |      addi.l #269,d0
   113c0:	|  |  |  |     |      move.l d0,-(sp)
   113c2:	|  |  |  |     |      jsr 11646 <strcmp>
   113c8:	|  |  |  |     |      addq.l #8,sp
   113ca:	|  |  |  |     |      tst.l d0
   113cc:	|  |  |  |     |  /-- bne.s 113e6 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   113ce:	|  |  |  |     |  |   move.l sp,d0
   113d0:	|  |  |  |     |  |   addq.l #8,d0
   113d2:	|  |  |  |     |  |   move.l d0,-(sp)
   113d4:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   113da:	|  |  |  |     |  |   addq.l #4,sp
   113dc:	|  |  |  |     |  |   move.l d0,194ca <gameSettings+0xe>
   113e2:	|  |  |  |     +--|-- bra.w 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   113e6:	|  |  |  |     |  \-> pea 1687e <custom.c.49191367+0x1b52>
   113ec:	|  |  |  |     |      move.l sp,d0
   113ee:	|  |  |  |     |      addi.l #269,d0
   113f4:	|  |  |  |     |      move.l d0,-(sp)
   113f6:	|  |  |  |     |      jsr 11646 <strcmp>
   113fc:	|  |  |  |     |      addq.l #8,sp
   113fe:	|  |  |  |     |      tst.l d0
   11400:	|  |  |  |     |  /-- bne.s 1141a <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   11402:	|  |  |  |     |  |   move.l sp,d0
   11404:	|  |  |  |     |  |   addq.l #8,d0
   11406:	|  |  |  |     |  |   move.l d0,-(sp)
   11408:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   1140e:	|  |  |  |     |  |   addq.l #4,sp
   11410:	|  |  |  |     |  |   move.l d0,d0
   11412:	|  |  |  |     |  |   move.w d0,194ce <gameSettings+0x12>
   11418:	|  |  |  |     +--|-- bra.s 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1141a:	|  |  |  |     |  \-> pea 1688a <custom.c.49191367+0x1b5e>
   11420:	|  |  |  |     |      move.l sp,d0
   11422:	|  |  |  |     |      addi.l #269,d0
   11428:	|  |  |  |     |      move.l d0,-(sp)
   1142a:	|  |  |  |     |      jsr 11646 <strcmp>
   11430:	|  |  |  |     |      addq.l #8,sp
   11432:	|  |  |  |     |      tst.l d0
   11434:	|  |  |  |     |  /-- bne.s 1144e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   11436:	|  |  |  |     |  |   move.l sp,d0
   11438:	|  |  |  |     |  |   addq.l #8,d0
   1143a:	|  |  |  |     |  |   move.l d0,-(sp)
   1143c:	|  |  |  |     |  |   jsr 11536 <stringToInt>
   11442:	|  |  |  |     |  |   addq.l #4,sp
   11444:	|  |  |  |     |  |   move.l d0,d0
   11446:	|  |  |  |     |  |   move.w d0,194d0 <gameSettings+0x14>
   1144c:	|  |  |  |     +--|-- bra.s 11480 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1144e:	|  |  |  |     |  \-> pea 16898 <custom.c.49191367+0x1b6c>
   11454:	|  |  |  |     |      move.l sp,d0
   11456:	|  |  |  |     |      addi.l #269,d0
   1145c:	|  |  |  |     |      move.l d0,-(sp)
   1145e:	|  |  |  |     |      jsr 11646 <strcmp>
   11464:	|  |  |  |     |      addq.l #8,sp
   11466:	|  |  |  |     |      tst.l d0
   11468:	|  |  |  |     +----- bne.s 11480 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   1146a:	|  |  |  |     |      move.l sp,d0
   1146c:	|  |  |  |     |      addq.l #8,d0
   1146e:	|  |  |  |     |      move.l d0,-(sp)
   11470:	|  |  |  |     |      jsr 11536 <stringToInt>
   11476:	|  |  |  |     |      addq.l #4,sp
   11478:	|  |  |  |     |      move.l d0,d0
   1147a:	|  |  |  |     |      move.w d0,194d2 <gameSettings+0x16>
					}
				}
				here = 0;
   11480:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   11484:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   11488:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   1148c:	|  |  |  |            clr.b 8(sp)
				break;
   11490:	|  |  |  |  /-------- bra.s 11508 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   11492:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   11498:	|  |  |     |         clr.b 571(sp)
				break;
   1149c:	|  |  |     +-------- bra.s 11508 <readIniFile+0x358>

				default:
				if (doingSecond) {
   1149e:	|  |  \-----|-------> tst.w 566(sp)
   114a2:	|  |        |  /----- beq.s 114d6 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   114a4:	|  |        |  |      move.b 571(sp),d0
   114a8:	|  |        |  |      move.b d0,d1
   114aa:	|  |        |  |      addq.b #1,d1
   114ac:	|  |        |  |      move.b d1,571(sp)
   114b0:	|  |        |  |      move.b d0,d0
   114b2:	|  |        |  |      andi.l #255,d0
   114b8:	|  |        |  |      lea 572(sp),a0
   114bc:	|  |        |  |      adda.l d0,a0
   114be:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   114c4:	|  |        |  |      moveq #0,d0
   114c6:	|  |        |  |      move.b 571(sp),d0
   114ca:	|  |        |  |      lea 572(sp),a0
   114ce:	|  |        |  |      adda.l d0,a0
   114d0:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   114d4:	|  |        |  |  /-- bra.s 11506 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   114d6:	|  |        |  \--|-> move.b 571(sp),d0
   114da:	|  |        |     |   move.b d0,d1
   114dc:	|  |        |     |   addq.b #1,d1
   114de:	|  |        |     |   move.b d1,571(sp)
   114e2:	|  |        |     |   move.b d0,d0
   114e4:	|  |        |     |   andi.l #255,d0
   114ea:	|  |        |     |   lea 572(sp),a0
   114ee:	|  |        |     |   adda.l d0,a0
   114f0:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   114f6:	|  |        |     |   moveq #0,d0
   114f8:	|  |        |     |   move.b 571(sp),d0
   114fc:	|  |        |     |   lea 572(sp),a0
   11500:	|  |        |     |   adda.l d0,a0
   11502:	|  |        |     |   clr.b -307(a0)
				break;
   11506:	|  |        |     \-> nop
			}
		} while (keepGoing);
   11508:	|  |        \-------> tst.w 568(sp)
   1150c:	|  \----------------- bne.w 112a0 <readIniFile+0xf0>

		Close(fp);
   11510:	|                     move.l 546(sp),526(sp)
   11516:	|                     move.l 19394 <DOSBase>,d0
   1151c:	|                     movea.l d0,a6
   1151e:	|                     move.l 526(sp),d1
   11522:	|                     jsr -36(a6)
   11526:	|                     move.l d0,522(sp)
	}
}
   1152a:	\-------------------> nop
   1152c:	                      move.l (sp)+,d2
   1152e:	                      movea.l (sp)+,a6
   11530:	                      lea 564(sp),sp
   11534:	                      rts

00011536 <stringToInt>:

unsigned int stringToInt (char * s) {
   11536:	             subq.l #8,sp
	int i = 0;
   11538:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1153c:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   11540:	/----------> movea.l 12(sp),a0
   11544:	|            move.b (a0),d0
   11546:	|            cmpi.b #47,d0
   1154a:	|        /-- ble.s 11582 <stringToInt+0x4c>
   1154c:	|        |   movea.l 12(sp),a0
   11550:	|        |   move.b (a0),d0
   11552:	|        |   cmpi.b #57,d0
   11556:	|        +-- bgt.s 11582 <stringToInt+0x4c>
			i *= 10;
   11558:	|        |   move.l 4(sp),d1
   1155c:	|        |   move.l d1,d0
   1155e:	|        |   add.l d0,d0
   11560:	|        |   add.l d0,d0
   11562:	|        |   add.l d1,d0
   11564:	|        |   add.l d0,d0
   11566:	|        |   move.l d0,4(sp)
			i += *s - '0';
   1156a:	|        |   movea.l 12(sp),a0
   1156e:	|        |   move.b (a0),d0
   11570:	|        |   ext.w d0
   11572:	|        |   movea.w d0,a0
   11574:	|        |   moveq #-48,d0
   11576:	|        |   add.l a0,d0
   11578:	|        |   add.l d0,4(sp)
			s ++;
   1157c:	|        |   addq.l #1,12(sp)
   11580:	|  /-----|-- bra.s 115ba <stringToInt+0x84>
		} else if (*s == '-') {
   11582:	|  |     \-> movea.l 12(sp),a0
   11586:	|  |         move.b (a0),d0
   11588:	|  |         cmpi.b #45,d0
   1158c:	|  |     /-- bne.s 115a6 <stringToInt+0x70>
			negative = ! negative;
   1158e:	|  |     |   tst.w 2(sp)
   11592:	|  |     |   seq d0
   11594:	|  |     |   neg.b d0
   11596:	|  |     |   move.b d0,d0
   11598:	|  |     |   andi.w #255,d0
   1159c:	|  |     |   move.w d0,2(sp)
			s++;
   115a0:	|  |     |   addq.l #1,12(sp)
   115a4:	+--|-----|-- bra.s 11540 <stringToInt+0xa>
		} else {
			if (negative)
   115a6:	|  |     \-> tst.w 2(sp)
   115aa:	|  |     /-- beq.s 115b4 <stringToInt+0x7e>
				return -i;
   115ac:	|  |     |   move.l 4(sp),d0
   115b0:	|  |     |   neg.l d0
   115b2:	|  |  /--|-- bra.s 115bc <stringToInt+0x86>
			return i;
   115b4:	|  |  |  \-> move.l 4(sp),d0
   115b8:	|  |  +----- bra.s 115bc <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   115ba:	\--\--|----X bra.s 11540 <stringToInt+0xa>
		}
	}
   115bc:	      \----> addq.l #8,sp
   115be:	             rts

000115c0 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   115c0:	    lea -28(sp),sp
   115c4:	    move.l a6,-(sp)
   115c6:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   115c8:	    pea 168a2 <custom.c.49191367+0x1b76>
   115ce:	    jsr 141e2 <KPrintF>
   115d4:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   115d6:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   115da:	    move.l 40(sp),30(sp)
   115e0:	    move.l #1005,26(sp)
   115e8:	    move.l 19394 <DOSBase>,d0
   115ee:	    movea.l d0,a6
   115f0:	    move.l 30(sp),d1
   115f4:	    move.l 26(sp),d2
   115f8:	    jsr -30(a6)
   115fc:	    move.l d0,22(sp)
   11600:	    move.l 22(sp),d0
   11604:	    move.l d0,18(sp)
	if (tester) {
   11608:	/-- beq.s 11638 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   1160a:	|   pea 168bc <custom.c.49191367+0x1b90>
   11610:	|   jsr 141e2 <KPrintF>
   11616:	|   addq.l #4,sp
		retval = 1;
   11618:	|   move.b #1,35(sp)
		Close(tester);
   1161e:	|   move.l 18(sp),14(sp)
   11624:	|   move.l 19394 <DOSBase>,d0
   1162a:	|   movea.l d0,a6
   1162c:	|   move.l 14(sp),d1
   11630:	|   jsr -36(a6)
   11634:	|   move.l d0,10(sp)
	}
	return retval;
   11638:	\-> move.b 35(sp),d0
   1163c:	    move.l (sp)+,d2
   1163e:	    movea.l (sp)+,a6
   11640:	    lea 28(sp),sp
   11644:	    rts

00011646 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   11646:	   /-- bra.s 11650 <strcmp+0xa>
    {
        s1++;
   11648:	/--|-> addq.l #1,4(sp)
        s2++;
   1164c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   11650:	|  \-> movea.l 4(sp),a0
   11654:	|      move.b (a0),d0
   11656:	|  /-- beq.s 11668 <strcmp+0x22>
   11658:	|  |   movea.l 4(sp),a0
   1165c:	|  |   move.b (a0),d1
   1165e:	|  |   movea.l 8(sp),a0
   11662:	|  |   move.b (a0),d0
   11664:	|  |   cmp.b d1,d0
   11666:	\--|-- beq.s 11648 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   11668:	   \-> movea.l 4(sp),a0
   1166c:	       move.b (a0),d0
   1166e:	       moveq #0,d1
   11670:	       move.b d0,d1
   11672:	       movea.l 8(sp),a0
   11676:	       move.b (a0),d0
   11678:	       move.b d0,d0
   1167a:	       andi.l #255,d0
   11680:	       sub.l d0,d1
   11682:	       move.l d1,d0
}
   11684:	       rts

00011686 <strlen>:

long unsigned int strlen (const char *s) 
{  
   11686:	       subq.l #4,sp
	long unsigned int i = 0;
   11688:	       clr.l (sp)
	while(s[i]) i++; 
   1168a:	   /-- bra.s 1168e <strlen+0x8>
   1168c:	/--|-> addq.l #1,(sp)
   1168e:	|  \-> movea.l 8(sp),a0
   11692:	|      adda.l (sp),a0
   11694:	|      move.b (a0),d0
   11696:	\----- bne.s 1168c <strlen+0x6>
	return(i);
   11698:	       move.l (sp),d0
}
   1169a:	       addq.l #4,sp
   1169c:	       rts

0001169e <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   1169e:	    nop
   116a0:	/-> move.l 8(sp),d0
   116a4:	|   move.l d0,d1
   116a6:	|   addq.l #1,d1
   116a8:	|   move.l d1,8(sp)
   116ac:	|   movea.l 4(sp),a0
   116b0:	|   lea 1(a0),a1
   116b4:	|   move.l a1,4(sp)
   116b8:	|   movea.l d0,a1
   116ba:	|   move.b (a1),d0
   116bc:	|   move.b d0,(a0)
   116be:	|   move.b (a0),d0
   116c0:	\-- bne.s 116a0 <strcpy+0x2>
}
   116c2:	    nop
   116c4:	    rts

000116c6 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   116c6:	    lea -20(sp),sp
   116ca:	    move.l a6,-(sp)
   116cc:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   116ce:	    move.l 32(sp),-(sp)
   116d2:	    jsr 11686 <strlen>
   116d8:	    addq.l #4,sp
   116da:	    move.l d0,d2
   116dc:	    move.l 36(sp),-(sp)
   116e0:	    jsr 11686 <strlen>
   116e6:	    addq.l #4,sp
   116e8:	    add.l d2,d0
   116ea:	    move.l d0,d1
   116ec:	    addq.l #1,d1
   116ee:	    move.l d1,20(sp)
   116f2:	    clr.l 16(sp)
   116f6:	    move.l 1938c <SysBase>,d0
   116fc:	    movea.l d0,a6
   116fe:	    move.l 20(sp),d0
   11702:	    move.l 16(sp),d1
   11706:	    jsr -684(a6)
   1170a:	    move.l d0,12(sp)
   1170e:	    move.l 12(sp),d0
   11712:	    move.l d0,8(sp)
	char * t = newString;
   11716:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   1171c:	    nop
   1171e:	/-> move.l 32(sp),d0
   11722:	|   move.l d0,d1
   11724:	|   addq.l #1,d1
   11726:	|   move.l d1,32(sp)
   1172a:	|   movea.l 24(sp),a0
   1172e:	|   lea 1(a0),a1
   11732:	|   move.l a1,24(sp)
   11736:	|   movea.l d0,a1
   11738:	|   move.b (a1),d0
   1173a:	|   move.b d0,(a0)
   1173c:	|   move.b (a0),d0
   1173e:	\-- bne.s 1171e <joinStrings+0x58>
	t--;
   11740:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   11744:	    nop
   11746:	/-> move.l 36(sp),d0
   1174a:	|   move.l d0,d1
   1174c:	|   addq.l #1,d1
   1174e:	|   move.l d1,36(sp)
   11752:	|   movea.l 24(sp),a0
   11756:	|   lea 1(a0),a1
   1175a:	|   move.l a1,24(sp)
   1175e:	|   movea.l d0,a1
   11760:	|   move.b (a1),d0
   11762:	|   move.b d0,(a0)
   11764:	|   move.b (a0),d0
   11766:	\-- bne.s 11746 <joinStrings+0x80>

	return newString;
   11768:	    move.l 8(sp),d0
}
   1176c:	    move.l (sp)+,d2
   1176e:	    movea.l (sp)+,a6
   11770:	    lea 20(sp),sp
   11774:	    rts

00011776 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   11776:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   1177a:	       moveq #10,d0
   1177c:	       cmp.l 28(sp),d0
   11780:	   /-- bne.s 1179e <itoa+0x28>
   11782:	   |   tst.l 20(sp)
   11786:	   +-- bge.s 1179e <itoa+0x28>
        *str++ = '-';
   11788:	   |   move.l 24(sp),d0
   1178c:	   |   move.l d0,d1
   1178e:	   |   addq.l #1,d1
   11790:	   |   move.l d1,24(sp)
   11794:	   |   movea.l d0,a0
   11796:	   |   move.b #45,(a0)
        value *= -1;
   1179a:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   1179e:	   \-> move.l 24(sp),12(sp)
   117a4:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   117aa:	   /-> move.l 20(sp),d0
   117ae:	   |   move.l 28(sp),-(sp)
   117b2:	   |   move.l d0,-(sp)
   117b4:	   |   jsr 14ac8 <__modsi3>
   117ba:	   |   addq.l #8,sp
   117bc:	   |   movea.l d0,a1
   117be:	   |   move.l 12(sp),d0
   117c2:	   |   move.l d0,d1
   117c4:	   |   addq.l #1,d1
   117c6:	   |   move.l d1,12(sp)
   117ca:	   |   lea 168d4 <custom.c.49191367+0x1ba8>,a0
   117d0:	   |   move.b (0,a1,a0.l),d1
   117d4:	   |   movea.l d0,a0
   117d6:	   |   move.b d1,(a0)
        value /= base;
   117d8:	   |   move.l 28(sp),-(sp)
   117dc:	   |   move.l 24(sp),-(sp)
   117e0:	   |   jsr 14a9a <__divsi3>
   117e6:	   |   addq.l #8,sp
   117e8:	   |   move.l d0,20(sp)
    } while (value);
   117ec:	   \-- bne.s 117aa <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   117ee:	       move.l 12(sp),d0
   117f2:	       move.l d0,d1
   117f4:	       subq.l #1,d1
   117f6:	       move.l d1,12(sp)
   117fa:	       movea.l d0,a0
   117fc:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   117fe:	       move.l 4(sp),8(sp)
   11804:	   /-- bra.s 1182a <itoa+0xb4>
        char temp = *low;
   11806:	/--|-> movea.l 8(sp),a0
   1180a:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   1180e:	|  |   movea.l 12(sp),a0
   11812:	|  |   move.b (a0),d0
   11814:	|  |   movea.l 8(sp),a0
   11818:	|  |   move.b d0,(a0)
        *ptr = temp;
   1181a:	|  |   movea.l 12(sp),a0
   1181e:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   11822:	|  |   addq.l #1,8(sp)
   11826:	|  |   subq.l #1,12(sp)
   1182a:	|  \-> move.l 8(sp),d0
   1182e:	|      cmp.l 12(sp),d0
   11832:	\----- bcs.s 11806 <itoa+0x90>
    }
    return rc;
   11834:	       move.l 4(sp),d0
}
   11838:	       lea 16(sp),sp
   1183c:	       rts

0001183e <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1183e:	                            lea -40(sp),sp
   11842:	                            move.l d2,-(sp)
    char* s = str;
   11844:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1184a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   11850:	   /----------------------- bra.w 11984 <vsprintf2+0x146>
        if (*p == '%') {
   11854:	/--|----------------------> movea.l 36(sp),a0
   11858:	|  |                        move.b (a0),d0
   1185a:	|  |                        cmpi.b #37,d0
   1185e:	|  |  /-------------------- bne.w 1196a <vsprintf2+0x12c>
            switch (*++p) {
   11862:	|  |  |                     addq.l #1,36(sp)
   11866:	|  |  |                     movea.l 36(sp),a0
   1186a:	|  |  |                     move.b (a0),d0
   1186c:	|  |  |                     ext.w d0
   1186e:	|  |  |                     movea.w d0,a0
   11870:	|  |  |                     moveq #115,d0
   11872:	|  |  |                     cmp.l a0,d0
   11874:	|  |  |           /-------- beq.s 118ec <vsprintf2+0xae>
   11876:	|  |  |           |         moveq #115,d1
   11878:	|  |  |           |         cmp.l a0,d1
   1187a:	|  |  |  /--------|-------- blt.w 11952 <vsprintf2+0x114>
   1187e:	|  |  |  |        |         moveq #99,d2
   11880:	|  |  |  |        |         cmp.l a0,d2
   11882:	|  |  |  |  /-----|-------- beq.w 1192a <vsprintf2+0xec>
   11886:	|  |  |  |  |     |         moveq #100,d0
   11888:	|  |  |  |  |     |         cmp.l a0,d0
   1188a:	|  |  |  +--|-----|-------- bne.w 11952 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1188e:	|  |  |  |  |     |         addq.l #4,56(sp)
   11892:	|  |  |  |  |     |         movea.l 56(sp),a0
   11896:	|  |  |  |  |     |         move.l (a0),d0
   11898:	|  |  |  |  |     |         move.l d0,d1
   1189a:	|  |  |  |  |     |         subq.l #1,d1
   1189c:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   118a0:	|  |  |  |  |     |         pea a <_start+0xa>
   118a4:	|  |  |  |  |     |         lea 8(sp),a0
   118a8:	|  |  |  |  |     |         move.l a0,-(sp)
   118aa:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   118ae:	|  |  |  |  |     |         jsr 11776 <itoa>
   118b4:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   118b8:	|  |  |  |  |     |         lea 44(sp),a0
   118bc:	|  |  |  |  |     |         lea -40(a0),a0
   118c0:	|  |  |  |  |     |         move.l a0,28(sp)
   118c4:	|  |  |  |  |     |     /-- bra.s 118e0 <vsprintf2+0xa2>
                        *s++ = *b;
   118c6:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   118ca:	|  |  |  |  |     |  |  |   move.l d0,d1
   118cc:	|  |  |  |  |     |  |  |   addq.l #1,d1
   118ce:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   118d2:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   118d6:	|  |  |  |  |     |  |  |   move.b (a0),d1
   118d8:	|  |  |  |  |     |  |  |   movea.l d0,a0
   118da:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   118dc:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   118e0:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   118e4:	|  |  |  |  |     |  |      move.b (a0),d0
   118e6:	|  |  |  |  |     |  \----- bne.s 118c6 <vsprintf2+0x88>
                    }
                    break;
   118e8:	|  |  |  |  |  /--|-------- bra.w 11980 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   118ec:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   118f0:	|  |  |  |  |  |            movea.l 56(sp),a0
   118f4:	|  |  |  |  |  |            move.l (a0),d0
   118f6:	|  |  |  |  |  |            move.l d0,d1
   118f8:	|  |  |  |  |  |            subq.l #1,d1
   118fa:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   118fe:	|  |  |  |  |  |        /-- bra.s 11920 <vsprintf2+0xe2>
                        *s++ = *sval++;
   11900:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   11904:	|  |  |  |  |  |     |  |   move.l d1,d2
   11906:	|  |  |  |  |  |     |  |   addq.l #1,d2
   11908:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1190c:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   11910:	|  |  |  |  |  |     |  |   move.l d0,d2
   11912:	|  |  |  |  |  |     |  |   addq.l #1,d2
   11914:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   11918:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1191a:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1191c:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1191e:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   11920:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   11924:	|  |  |  |  |  |     |      move.b (a0),d0
   11926:	|  |  |  |  |  |     \----- bne.s 11900 <vsprintf2+0xc2>
                    }
                    break;
   11928:	|  |  |  |  |  +----------- bra.s 11980 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1192a:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   1192e:	|  |  |  |     |            movea.l 56(sp),a0
   11932:	|  |  |  |     |            move.l (a0),d0
   11934:	|  |  |  |     |            move.l d0,d1
   11936:	|  |  |  |     |            subq.l #1,d1
   11938:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1193c:	|  |  |  |     |            move.l 40(sp),d0
   11940:	|  |  |  |     |            move.l d0,d2
   11942:	|  |  |  |     |            addq.l #1,d2
   11944:	|  |  |  |     |            move.l d2,40(sp)
   11948:	|  |  |  |     |            move.l 24(sp),d1
   1194c:	|  |  |  |     |            movea.l d0,a0
   1194e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   11950:	|  |  |  |     +----------- bra.s 11980 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   11952:	|  |  |  \-----|----------> move.l 40(sp),d0
   11956:	|  |  |        |            move.l d0,d1
   11958:	|  |  |        |            addq.l #1,d1
   1195a:	|  |  |        |            move.l d1,40(sp)
   1195e:	|  |  |        |            movea.l 36(sp),a0
   11962:	|  |  |        |            move.b (a0),d1
   11964:	|  |  |        |            movea.l d0,a0
   11966:	|  |  |        |            move.b d1,(a0)
                    break;
   11968:	|  |  |        +----------- bra.s 11980 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1196a:	|  |  \--------|----------> move.l 40(sp),d0
   1196e:	|  |           |            move.l d0,d1
   11970:	|  |           |            addq.l #1,d1
   11972:	|  |           |            move.l d1,40(sp)
   11976:	|  |           |            movea.l 36(sp),a0
   1197a:	|  |           |            move.b (a0),d1
   1197c:	|  |           |            movea.l d0,a0
   1197e:	|  |           |            move.b d1,(a0)
        }
        p++;
   11980:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   11984:	|  \----------------------> movea.l 36(sp),a0
   11988:	|                           move.b (a0),d0
   1198a:	\-------------------------- bne.w 11854 <vsprintf2+0x16>
    }
    *s = '\0';
   1198e:	                            movea.l 40(sp),a0
   11992:	                            clr.b (a0)
    return s - str;
   11994:	                            move.l 40(sp),d0
   11998:	                            sub.l 48(sp),d0
}
   1199c:	                            move.l (sp)+,d2
   1199e:	                            lea 40(sp),sp
   119a2:	                            rts

000119a4 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   119a4:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   119a6:	moveq #16,d0
   119a8:	add.l sp,d0
   119aa:	move.l d0,d1
   119ac:	addq.l #4,d1
   119ae:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   119b2:	move.l 16(sp),d0
   119b6:	move.l 4(sp),-(sp)
   119ba:	move.l d0,-(sp)
   119bc:	move.l 20(sp),-(sp)
   119c0:	jsr 1183e <vsprintf2>
   119c6:	lea 12(sp),sp
   119ca:	move.l d0,(sp)
    va_end(args);
   119cc:	clr.l 4(sp)

    return done;
   119d0:	move.l (sp),d0
}
   119d2:	addq.l #8,sp
   119d4:	rts

000119d6 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   119d6:	       lea -20(sp),sp
   119da:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   119dc:	       moveq #12,d0
   119de:	       move.l d0,20(sp)
   119e2:	       clr.l 16(sp)
   119e6:	       move.l 1938c <SysBase>,d0
   119ec:	       movea.l d0,a6
   119ee:	       move.l 20(sp),d0
   119f2:	       move.l 16(sp),d1
   119f6:	       jsr -684(a6)
   119fa:	       move.l d0,12(sp)
   119fe:	       move.l 12(sp),d0
   11a02:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   11a06:	   /-- bne.s 11a0c <addVarToStack+0x36>
   11a08:	   |   clr.w d0
   11a0a:	/--|-- bra.s 11a54 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   11a0c:	|  \-> move.l 8(sp),d0
   11a10:	|      move.l d0,-(sp)
   11a12:	|      move.l 32(sp),-(sp)
   11a16:	|      jsr 12538 <copyMain>
   11a1c:	|      addq.l #8,sp
   11a1e:	|      tst.w d0
   11a20:	|  /-- bne.s 11a3c <addVarToStack+0x66>
        FreeVec(newStack);
   11a22:	|  |   move.l 8(sp),4(sp)
   11a28:	|  |   move.l 1938c <SysBase>,d0
   11a2e:	|  |   movea.l d0,a6
   11a30:	|  |   movea.l 4(sp),a1
   11a34:	|  |   jsr -690(a6)
        return FALSE;
   11a38:	|  |   clr.w d0
   11a3a:	+--|-- bra.s 11a54 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   11a3c:	|  \-> movea.l 32(sp),a0
   11a40:	|      move.l (a0),d0
   11a42:	|      movea.l 8(sp),a0
   11a46:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11a4a:	|      movea.l 32(sp),a0
   11a4e:	|      move.l 8(sp),(a0)
    return TRUE;
   11a52:	|      moveq #1,d0
}
   11a54:	\----> movea.l (sp)+,a6
   11a56:	       lea 20(sp),sp
   11a5a:	       rts

00011a5c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   11a5c:	       lea -16(sp),sp
   11a60:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   11a62:	       moveq #12,d0
   11a64:	       move.l d0,16(sp)
   11a68:	       clr.l 12(sp)
   11a6c:	       move.l 1938c <SysBase>,d0
   11a72:	       movea.l d0,a6
   11a74:	       move.l 16(sp),d0
   11a78:	       move.l 12(sp),d1
   11a7c:	       jsr -684(a6)
   11a80:	       move.l d0,8(sp)
   11a84:	       move.l 8(sp),d0
   11a88:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   11a8c:	   /-- bne.s 11a92 <addVarToStackQuick+0x36>
   11a8e:	   |   clr.w d0
   11a90:	/--|-- bra.s 11ac8 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   11a92:	|  \-> move.l 4(sp),d0
   11a96:	|      pea 8 <_start+0x8>
   11a9a:	|      move.l 28(sp),-(sp)
   11a9e:	|      move.l d0,-(sp)
   11aa0:	|      jsr 14196 <memcpy>
   11aa6:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   11aaa:	|      movea.l 24(sp),a0
   11aae:	|      clr.l (a0)

    newStack->next = *thisStack;
   11ab0:	|      movea.l 28(sp),a0
   11ab4:	|      move.l (a0),d0
   11ab6:	|      movea.l 4(sp),a0
   11aba:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11abe:	|      movea.l 28(sp),a0
   11ac2:	|      move.l 4(sp),(a0)
    return TRUE;
   11ac6:	|      moveq #1,d0
}
   11ac8:	\----> movea.l (sp)+,a6
   11aca:	       lea 16(sp),sp
   11ace:	       rts

00011ad0 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   11ad0:	       lea -16(sp),sp
   11ad4:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   11ad6:	       movea.l 24(sp),a0
   11ada:	       move.l (a0),d0
   11adc:	       moveq #1,d1
   11ade:	       cmp.l d0,d1
   11ae0:	   /-- bne.s 11b0a <addVariablesInSecond+0x3a>
   11ae2:	   |   movea.l 28(sp),a0
   11ae6:	   |   move.l (a0),d0
   11ae8:	   |   moveq #1,d1
   11aea:	   |   cmp.l d0,d1
   11aec:	   +-- bne.s 11b0a <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   11aee:	   |   movea.l 28(sp),a0
   11af2:	   |   move.l 4(a0),d1
   11af6:	   |   movea.l 24(sp),a0
   11afa:	   |   move.l 4(a0),d0
   11afe:	   |   add.l d1,d0
   11b00:	   |   movea.l 28(sp),a0
   11b04:	   |   move.l d0,4(a0)
   11b08:	/--|-- bra.s 11b84 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   11b0a:	|  \-> move.l 24(sp),-(sp)
   11b0e:	|      jsr 12770 <getTextFromAnyVar>
   11b14:	|      addq.l #4,sp
   11b16:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   11b1a:	|      move.l 28(sp),-(sp)
   11b1e:	|      jsr 12770 <getTextFromAnyVar>
   11b24:	|      addq.l #4,sp
   11b26:	|      move.l d0,12(sp)

		unlinkVar(var2);
   11b2a:	|      move.l 28(sp),-(sp)
   11b2e:	|      jsr 123e8 <unlinkVar>
   11b34:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   11b36:	|      move.l 12(sp),-(sp)
   11b3a:	|      move.l 20(sp),-(sp)
   11b3e:	|      jsr 116c6 <joinStrings>
   11b44:	|      addq.l #8,sp
   11b46:	|      movea.l 28(sp),a0
   11b4a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   11b4e:	|      movea.l 28(sp),a0
   11b52:	|      moveq #3,d0
   11b54:	|      move.l d0,(a0)
		FreeVec(string1);
   11b56:	|      move.l 16(sp),8(sp)
   11b5c:	|      move.l 1938c <SysBase>,d0
   11b62:	|      movea.l d0,a6
   11b64:	|      movea.l 8(sp),a1
   11b68:	|      jsr -690(a6)
		FreeVec(string2);
   11b6c:	|      move.l 12(sp),4(sp)
   11b72:	|      move.l 1938c <SysBase>,d0
   11b78:	|      movea.l d0,a6
   11b7a:	|      movea.l 4(sp),a1
   11b7e:	|      jsr -690(a6)
	}
}
   11b82:	|      nop
   11b84:	\----> nop
   11b86:	       movea.l (sp)+,a6
   11b88:	       lea 16(sp),sp
   11b8c:	       rts

00011b8e <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   11b8e:	movea.l 8(sp),a0
   11b92:	move.l 4(a0),-(sp)
   11b96:	move.l (a0),-(sp)
   11b98:	movea.l 12(sp),a0
   11b9c:	move.l 4(a0),-(sp)
   11ba0:	move.l (a0),-(sp)
   11ba2:	jsr 11bc4 <compareVars>
   11ba8:	lea 16(sp),sp
   11bac:	move.l d0,-(sp)
   11bae:	pea 1 <_start+0x1>
   11bb2:	move.l 16(sp),-(sp)
   11bb6:	jsr 12a8c <setVariable>
   11bbc:	lea 12(sp),sp
}
   11bc0:	nop
   11bc2:	rts

00011bc4 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   11bc4:	       subq.l #4,sp
	int re = 0;
   11bc6:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   11bc8:	       move.l 8(sp),d1
   11bcc:	       move.l 16(sp),d0
   11bd0:	       cmp.l d1,d0
   11bd2:	/----- bne.w 11c9a <compareVars+0xd6>
		switch (var1.varType) {
   11bd6:	|      move.l 8(sp),d0
   11bda:	|      moveq #9,d1
   11bdc:	|      cmp.l d0,d1
   11bde:	|  /-- bcs.w 11c82 <compareVars+0xbe>
   11be2:	|  |   add.l d0,d0
   11be4:	|  |   movea.l d0,a0
   11be6:	|  |   adda.l #72690,a0
   11bec:	|  |   move.w (a0),d0
   11bee:	|  |   jmp (11bf2 <compareVars+0x2e>,pc,d0.w)
   11bf2:	|  |   ori.b #-112,(a4)
   11bf6:	|  |   ori.l #5243024,(a0)
   11bfc:	|  |   ori.l #7733392,(a0)
   11c02:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   11c08:	|  |   move.l d0,(sp)
			break;
   11c0a:	+--|-- bra.w 11c9a <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   11c0e:	|  |   move.l 12(sp),d1
   11c12:	|  |   move.l 20(sp),d0
   11c16:	|  |   cmp.l d1,d0
   11c18:	|  |   seq d0
   11c1a:	|  |   neg.b d0
   11c1c:	|  |   move.b d0,d0
   11c1e:	|  |   andi.l #255,d0
   11c24:	|  |   move.l d0,(sp)
			break;
   11c26:	+--|-- bra.s 11c9a <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   11c28:	|  |   move.l 12(sp),d1
   11c2c:	|  |   move.l 20(sp),d0
   11c30:	|  |   cmp.l d1,d0
   11c32:	|  |   seq d0
   11c34:	|  |   neg.b d0
   11c36:	|  |   move.b d0,d0
   11c38:	|  |   andi.l #255,d0
   11c3e:	|  |   move.l d0,(sp)
			break;
   11c40:	+--|-- bra.s 11c9a <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   11c42:	|  |   move.l 20(sp),d1
   11c46:	|  |   move.l 12(sp),d0
   11c4a:	|  |   move.l d1,-(sp)
   11c4c:	|  |   move.l d0,-(sp)
   11c4e:	|  |   jsr 11646 <strcmp>
   11c54:	|  |   addq.l #8,sp
   11c56:	|  |   tst.l d0
   11c58:	|  |   seq d0
   11c5a:	|  |   neg.b d0
   11c5c:	|  |   move.b d0,d0
   11c5e:	|  |   andi.l #255,d0
   11c64:	|  |   move.l d0,(sp)
			break;
   11c66:	+--|-- bra.s 11c9a <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   11c68:	|  |   move.l 12(sp),d1
   11c6c:	|  |   move.l 20(sp),d0
   11c70:	|  |   cmp.l d1,d0
   11c72:	|  |   seq d0
   11c74:	|  |   neg.b d0
   11c76:	|  |   move.b d0,d0
   11c78:	|  |   andi.l #255,d0
   11c7e:	|  |   move.l d0,(sp)
			break;
   11c80:	+--|-- bra.s 11c9a <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   11c82:	|  \-> move.l 12(sp),d1
   11c86:	|      move.l 20(sp),d0
   11c8a:	|      cmp.l d1,d0
   11c8c:	|      seq d0
   11c8e:	|      neg.b d0
   11c90:	|      move.b d0,d0
   11c92:	|      andi.l #255,d0
   11c98:	|      move.l d0,(sp)
		}
	}
	return re;
   11c9a:	\----> move.l (sp),d0
}
   11c9c:	       addq.l #4,sp
   11c9e:	       rts

00011ca0 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   11ca0:	             lea -16(sp),sp
   11ca4:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   11ca6:	             movea.l 28(sp),a0
   11caa:	             moveq #6,d0
   11cac:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11cae:	             moveq #12,d0
   11cb0:	             move.l d0,12(sp)
   11cb4:	             clr.l 8(sp)
   11cb8:	             move.l 1938c <SysBase>,d0
   11cbe:	             movea.l d0,a6
   11cc0:	             move.l 12(sp),d0
   11cc4:	             move.l 8(sp),d1
   11cc8:	             jsr -684(a6)
   11ccc:	             move.l d0,4(sp)
   11cd0:	             move.l 4(sp),d0
   11cd4:	             movea.l 28(sp),a0
   11cd8:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   11cdc:	             movea.l 28(sp),a0
   11ce0:	             move.l 4(a0),d0
   11ce4:	         /-- bne.s 11cec <copyStack+0x4c>
   11ce6:	         |   clr.w d0
   11ce8:	/--------|-- bra.w 11d6e <copyStack+0xce>
	to->varData.theStack->first = NULL;
   11cec:	|        \-> movea.l 28(sp),a0
   11cf0:	|            movea.l 4(a0),a0
   11cf4:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   11cf6:	|            movea.l 28(sp),a0
   11cfa:	|            movea.l 4(a0),a0
   11cfe:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   11d02:	|            movea.l 28(sp),a0
   11d06:	|            movea.l 4(a0),a0
   11d0a:	|            moveq #1,d0
   11d0c:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   11d10:	|            movea.l 24(sp),a0
   11d14:	|            movea.l 4(a0),a0
   11d18:	|            move.l (a0),16(sp)

	while (a) {
   11d1c:	|     /----- bra.s 11d66 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   11d1e:	|  /--|----> movea.l 28(sp),a0
   11d22:	|  |  |      move.l 4(a0),d0
   11d26:	|  |  |      move.l d0,d1
   11d28:	|  |  |      move.l 16(sp),d0
   11d2c:	|  |  |      move.l d1,-(sp)
   11d2e:	|  |  |      move.l d0,-(sp)
   11d30:	|  |  |      jsr 119d6 <addVarToStack>
   11d36:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   11d38:	|  |  |      movea.l 28(sp),a0
   11d3c:	|  |  |      movea.l 4(a0),a0
   11d40:	|  |  |      move.l 4(a0),d0
   11d44:	|  |  |  /-- bne.s 11d5c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   11d46:	|  |  |  |   movea.l 28(sp),a0
   11d4a:	|  |  |  |   movea.l 4(a0),a1
   11d4e:	|  |  |  |   movea.l 28(sp),a0
   11d52:	|  |  |  |   movea.l 4(a0),a0
   11d56:	|  |  |  |   move.l (a1),d0
   11d58:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   11d5c:	|  |  |  \-> movea.l 16(sp),a0
   11d60:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   11d66:	|  |  \----> tst.l 16(sp)
   11d6a:	|  \-------- bne.s 11d1e <copyStack+0x7e>
	}

	return TRUE;
   11d6c:	|            moveq #1,d0
}
   11d6e:	\----------> movea.l (sp)+,a6
   11d70:	             lea 16(sp),sp
   11d74:	             rts

00011d76 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   11d76:	                lea -20(sp),sp
   11d7a:	                move.l a6,-(sp)
   11d7c:	                move.l 36(sp),d0
   11d80:	                move.w d0,d0
   11d82:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   11d86:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   11d8c:	                clr.l 16(sp)

    while (*huntVar) {
   11d90:	   /----------- bra.s 11e0e <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   11d92:	/--|----------> movea.l 20(sp),a0
   11d96:	|  |            movea.l (a0),a0
   11d98:	|  |            movea.l 28(sp),a1
   11d9c:	|  |            move.l 4(a1),-(sp)
   11da0:	|  |            move.l (a1),-(sp)
   11da2:	|  |            move.l 4(a0),-(sp)
   11da6:	|  |            move.l (a0),-(sp)
   11da8:	|  |            jsr 11bc4 <compareVars>
   11dae:	|  |            lea 16(sp),sp
   11db2:	|  |            tst.l d0
   11db4:	|  |  /-------- beq.s 11e00 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   11db6:	|  |  |         movea.l 20(sp),a0
   11dba:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   11dbe:	|  |  |         movea.l 12(sp),a0
   11dc2:	|  |  |         move.l 8(a0),d0
   11dc6:	|  |  |         movea.l 20(sp),a0
   11dca:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   11dcc:	|  |  |         move.l 12(sp),d0
   11dd0:	|  |  |         move.l d0,-(sp)
   11dd2:	|  |  |         jsr 123e8 <unlinkVar>
   11dd8:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   11dda:	|  |  |         move.l 12(sp),8(sp)
   11de0:	|  |  |         move.l 1938c <SysBase>,d0
   11de6:	|  |  |         movea.l d0,a6
   11de8:	|  |  |         movea.l 8(sp),a1
   11dec:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   11df0:	|  |  |         tst.w 6(sp)
   11df4:	|  |  |     /-- bne.s 11dfa <deleteVarFromStack+0x84>
   11df6:	|  |  |     |   moveq #1,d0
   11df8:	|  |  |  /--|-- bra.s 11e1c <deleteVarFromStack+0xa6>
            reply++;
   11dfa:	|  |  |  |  \-> addq.l #1,16(sp)
   11dfe:	|  +--|--|----- bra.s 11e0e <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   11e00:	|  |  \--|----> movea.l 20(sp),a0
   11e04:	|  |     |      move.l (a0),d0
   11e06:	|  |     |      move.l d0,d1
   11e08:	|  |     |      addq.l #8,d1
   11e0a:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   11e0e:	|  \-----|----> movea.l 20(sp),a0
   11e12:	|        |      move.l (a0),d0
   11e14:	\--------|----- bne.w 11d92 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   11e18:	         |      move.l 16(sp),d0
}
   11e1c:	         \----> movea.l (sp)+,a6
   11e1e:	                lea 20(sp),sp
   11e22:	                rts

00011e24 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   11e24:	       movea.l 4(sp),a0
   11e28:	       move.l 4(a0),d0
   11e2c:	       cmp.l 8(sp),d0
   11e30:	   /-- bhi.s 11e36 <fastArrayGetByIndex+0x12>
   11e32:	   |   moveq #0,d0
   11e34:	/--|-- bra.s 11e44 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   11e36:	|  \-> movea.l 4(sp),a0
   11e3a:	|      move.l (a0),d1
   11e3c:	|      move.l 8(sp),d0
   11e40:	|      lsl.l #3,d0
   11e42:	|      add.l d1,d0
}
   11e44:	\----> rts

00011e46 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   11e46:	                lea -32(sp),sp
   11e4a:	                move.l a6,-(sp)
   11e4c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   11e4e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   11e52:	                movea.l 44(sp),a0
   11e56:	                move.l (a0),d0
   11e58:	                moveq #8,d1
   11e5a:	                cmp.l d0,d1
   11e5c:	            /-- beq.s 11e6a <getCostumeFromVar+0x24>
   11e5e:	            |   moveq #9,d1
   11e60:	            |   cmp.l d0,d1
   11e62:	   /--------|-- beq.w 11f18 <getCostumeFromVar+0xd2>
   11e66:	/--|--------|-- bra.w 11f22 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   11e6a:	|  |        \-> moveq #8,d0
   11e6c:	|  |            move.l d0,28(sp)
   11e70:	|  |            clr.l 24(sp)
   11e74:	|  |            move.l 1938c <SysBase>,d0
   11e7a:	|  |            movea.l d0,a6
   11e7c:	|  |            move.l 28(sp),d0
   11e80:	|  |            move.l 24(sp),d1
   11e84:	|  |            jsr -684(a6)
   11e88:	|  |            move.l d0,20(sp)
   11e8c:	|  |            move.l 20(sp),d0
   11e90:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   11e94:	|  |        /-- bne.s 11e9c <getCostumeFromVar+0x56>
   11e96:	|  |        |   moveq #0,d0
   11e98:	|  |  /-----|-- bra.w 11f4c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   11e9c:	|  |  |     \-> movea.l 36(sp),a0
   11ea0:	|  |  |         moveq #1,d1
   11ea2:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   11ea6:	|  |  |         moveq #12,d0
   11ea8:	|  |  |         move.l d0,16(sp)
   11eac:	|  |  |         clr.l 12(sp)
   11eb0:	|  |  |         move.l 1938c <SysBase>,d0
   11eb6:	|  |  |         movea.l d0,a6
   11eb8:	|  |  |         move.l 16(sp),d0
   11ebc:	|  |  |         move.l 12(sp),d1
   11ec0:	|  |  |         jsr -684(a6)
   11ec4:	|  |  |         move.l d0,8(sp)
   11ec8:	|  |  |         move.l 8(sp),d0
   11ecc:	|  |  |         movea.l 36(sp),a0
   11ed0:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   11ed2:	|  |  |         movea.l 36(sp),a0
   11ed6:	|  |  |         move.l (a0),d0
   11ed8:	|  |  |     /-- bne.s 11ede <getCostumeFromVar+0x98>
   11eda:	|  |  |     |   moveq #0,d0
   11edc:	|  |  +-----|-- bra.s 11f4c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   11ede:	|  |  |     \-> clr.l 32(sp)
   11ee2:	|  |  |     /-- bra.s 11f0e <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   11ee4:	|  |  |  /--|-> movea.l 44(sp),a0
   11ee8:	|  |  |  |  |   move.l 4(a0),d0
   11eec:	|  |  |  |  |   movea.l 36(sp),a0
   11ef0:	|  |  |  |  |   movea.l (a0),a0
   11ef2:	|  |  |  |  |   move.l 32(sp),d1
   11ef6:	|  |  |  |  |   add.l d1,d1
   11ef8:	|  |  |  |  |   add.l d1,d1
   11efa:	|  |  |  |  |   lea (0,a0,d1.l),a2
   11efe:	|  |  |  |  |   move.l d0,-(sp)
   11f00:	|  |  |  |  |   jsr 726a <copyAnim>
   11f06:	|  |  |  |  |   addq.l #4,sp
   11f08:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   11f0a:	|  |  |  |  |   addq.l #1,32(sp)
   11f0e:	|  |  |  |  \-> moveq #2,d1
   11f10:	|  |  |  |      cmp.l 32(sp),d1
   11f14:	|  |  |  \----- bge.s 11ee4 <getCostumeFromVar+0x9e>
            }
            break;
   11f16:	|  |  |     /-- bra.s 11f48 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   11f18:	|  \--|-----|-> movea.l 44(sp),a0
   11f1c:	|     |     |   move.l 4(a0),d0
   11f20:	|     +-----|-- bra.s 11f4c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11f22:	\-----|-----|-> movea.l 44(sp),a0
   11f26:	      |     |   move.l (a0),d0
   11f28:	      |     |   add.l d0,d0
   11f2a:	      |     |   movea.l d0,a1
   11f2c:	      |     |   adda.l d0,a1
   11f2e:	      |     |   lea 19282 <typeName>,a0
   11f34:	      |     |   move.l (0,a1,a0.l),d0
   11f38:	      |     |   move.l d0,-(sp)
   11f3a:	      |     |   pea 16946 <custom.c.49191367+0x1c1a>
   11f40:	      |     |   jsr 141e2 <KPrintF>
   11f46:	      |     |   addq.l #8,sp
    }

    return p;
   11f48:	      |     \-> move.l 36(sp),d0
}
   11f4c:	      \-------> movea.l (sp)+,a2
   11f4e:	                movea.l (sp)+,a6
   11f50:	                lea 32(sp),sp
   11f54:	                rts

00011f56 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   11f56:	                lea -96(sp),sp
   11f5a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   11f5e:	                move.l 116(sp),-(sp)
   11f62:	                pea 1697e <custom.c.49191367+0x1c52>
   11f68:	                jsr 116c6 <joinStrings>
   11f6e:	                addq.l #8,sp
   11f70:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   11f74:	            /-- bne.s 11f7c <getSavedGamesStack+0x26>
   11f76:	            |   clr.w d0
   11f78:	/-----------|-- bra.w 12190 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   11f7c:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   11f80:	|               move.l #92544,98(sp)
   11f88:	|               moveq #-2,d0
   11f8a:	|               move.l d0,94(sp)
   11f8e:	|               move.l 19394 <DOSBase>,d0
   11f94:	|               movea.l d0,a6
   11f96:	|               move.l 98(sp),d1
   11f9a:	|               move.l 94(sp),d2
   11f9e:	|               jsr -84(a6)
   11fa2:	|               move.l d0,90(sp)
   11fa6:	|               move.l 90(sp),d0
   11faa:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   11fae:	|           /-- bne.s 11fb6 <getSavedGamesStack+0x60>
   11fb0:	|           |   clr.w d0
   11fb2:	+-----------|-- bra.w 12190 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   11fb6:	|           \-> move.l #260,82(sp)
   11fbe:	|               move.l #65536,78(sp)
   11fc6:	|               move.l 1938c <SysBase>,d0
   11fcc:	|               movea.l d0,a6
   11fce:	|               move.l 82(sp),d0
   11fd2:	|               move.l 78(sp),d1
   11fd6:	|               jsr -684(a6)
   11fda:	|               move.l d0,74(sp)
   11fde:	|               move.l 74(sp),d0
   11fe2:	|               move.l d0,70(sp)
	if (!fib) {
   11fe6:	|           /-- bne.s 12004 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   11fe8:	|           |   move.l 86(sp),22(sp)
   11fee:	|           |   move.l 19394 <DOSBase>,d0
   11ff4:	|           |   movea.l d0,a6
   11ff6:	|           |   move.l 22(sp),d1
   11ffa:	|           |   jsr -90(a6)
		return FALSE;
   11ffe:	|           |   clr.w d0
   12000:	+-----------|-- bra.w 12190 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   12004:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   12008:	|               move.l 86(sp),66(sp)
   1200e:	|               move.l 70(sp),62(sp)
   12014:	|               move.l 19394 <DOSBase>,d0
   1201a:	|               movea.l d0,a6
   1201c:	|               move.l 66(sp),d1
   12020:	|               move.l 62(sp),d2
   12024:	|               jsr -102(a6)
   12028:	|               move.l d0,58(sp)
   1202c:	|               move.l 58(sp),d0
   12030:	|  /----------- beq.w 12144 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   12034:	|  |        /-- bra.w 12110 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   12038:	|  |  /-----|-> move.l 70(sp),d2
   1203c:	|  |  |     |   addq.l #8,d2
   1203e:	|  |  |     |   move.l 70(sp),d0
   12042:	|  |  |     |   addq.l #8,d0
   12044:	|  |  |     |   move.l d0,-(sp)
   12046:	|  |  |     |   jsr 11686 <strlen>
   1204c:	|  |  |     |   addq.l #4,sp
   1204e:	|  |  |     |   move.l d0,d3
   12050:	|  |  |     |   move.l 116(sp),-(sp)
   12054:	|  |  |     |   jsr 11686 <strlen>
   1205a:	|  |  |     |   addq.l #4,sp
   1205c:	|  |  |     |   move.l d3,d1
   1205e:	|  |  |     |   sub.l d0,d1
   12060:	|  |  |     |   move.l d2,d0
   12062:	|  |  |     |   add.l d1,d0
   12064:	|  |  |     |   move.l 116(sp),-(sp)
   12068:	|  |  |     |   move.l d0,-(sp)
   1206a:	|  |  |     |   jsr 11646 <strcmp>
   12070:	|  |  |     |   addq.l #8,sp
   12072:	|  |  |     |   tst.l d0
   12074:	|  |  |     +-- bne.w 12110 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   12078:	|  |  |     |   move.l 70(sp),d0
   1207c:	|  |  |     |   addq.l #8,d0
   1207e:	|  |  |     |   move.l d0,-(sp)
   12080:	|  |  |     |   jsr 11686 <strlen>
   12086:	|  |  |     |   addq.l #4,sp
   12088:	|  |  |     |   move.l d0,d2
   1208a:	|  |  |     |   move.l 116(sp),-(sp)
   1208e:	|  |  |     |   jsr 11686 <strlen>
   12094:	|  |  |     |   addq.l #4,sp
   12096:	|  |  |     |   move.l d0,d1
   12098:	|  |  |     |   move.l d2,d0
   1209a:	|  |  |     |   sub.l d1,d0
   1209c:	|  |  |     |   movea.l 70(sp),a0
   120a0:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   120a4:	|  |  |     |   move.l 70(sp),d0
   120a8:	|  |  |     |   addq.l #8,d0
   120aa:	|  |  |     |   move.l d0,-(sp)
   120ac:	|  |  |     |   jsr 118 <decodeFilename>
   120b2:	|  |  |     |   addq.l #4,sp
   120b4:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   120b8:	|  |  |     |   move.l 42(sp),-(sp)
   120bc:	|  |  |     |   lea 18(sp),a0
   120c0:	|  |  |     |   move.l a0,-(sp)
   120c2:	|  |  |     |   jsr 123bc <makeTextVar>
   120c8:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   120ca:	|  |  |     |   move.l 42(sp),38(sp)
   120d0:	|  |  |     |   move.l 1938c <SysBase>,d0
   120d6:	|  |  |     |   movea.l d0,a6
   120d8:	|  |  |     |   movea.l 38(sp),a1
   120dc:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   120e0:	|  |  |     |   move.l 112(sp),d0
   120e4:	|  |  |     |   move.l d0,-(sp)
   120e6:	|  |  |     |   lea 18(sp),a0
   120ea:	|  |  |     |   move.l a0,-(sp)
   120ec:	|  |  |     |   jsr 119d6 <addVarToStack>
   120f2:	|  |  |     |   addq.l #8,sp
   120f4:	|  |  |     |   tst.w d0
   120f6:	|  |  |  /--|-- beq.s 12148 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   120f8:	|  |  |  |  |   movea.l 112(sp),a0
   120fc:	|  |  |  |  |   move.l 4(a0),d0
   12100:	|  |  |  |  +-- bne.s 12110 <getSavedGamesStack+0x1ba>
   12102:	|  |  |  |  |   movea.l 112(sp),a0
   12106:	|  |  |  |  |   move.l (a0),d0
   12108:	|  |  |  |  |   movea.l 112(sp),a0
   1210c:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   12110:	|  |  |  |  \-> move.l 86(sp),54(sp)
   12116:	|  |  |  |      move.l 70(sp),50(sp)
   1211c:	|  |  |  |      move.l 19394 <DOSBase>,d0
   12122:	|  |  |  |      movea.l d0,a6
   12124:	|  |  |  |      move.l 54(sp),d1
   12128:	|  |  |  |      move.l 50(sp),d2
   1212c:	|  |  |  |      jsr -108(a6)
   12130:	|  |  |  |      move.l d0,46(sp)
   12134:	|  |  |  |      move.l 46(sp),d0
   12138:	|  |  \--|----- bne.w 12038 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1213c:	|  |     |      move.w #1,106(sp)
   12142:	|  |     |  /-- bra.s 1214a <getSavedGamesStack+0x1f4>
	}

cleanup:
   12144:	|  \-----|--|-> nop
   12146:	|        |  +-- bra.s 1214a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   12148:	|        \--|-> nop
	FreeVec(fib);
   1214a:	|           \-> move.l 70(sp),34(sp)
   12150:	|               move.l 1938c <SysBase>,d0
   12156:	|               movea.l d0,a6
   12158:	|               movea.l 34(sp),a1
   1215c:	|               jsr -690(a6)
	UnLock(dirLock);
   12160:	|               move.l 86(sp),30(sp)
   12166:	|               move.l 19394 <DOSBase>,d0
   1216c:	|               movea.l d0,a6
   1216e:	|               move.l 30(sp),d1
   12172:	|               jsr -90(a6)
	FreeVec(pattern);
   12176:	|               move.l 102(sp),26(sp)
   1217c:	|               move.l 1938c <SysBase>,d0
   12182:	|               movea.l d0,a6
   12184:	|               movea.l 26(sp),a1
   12188:	|               jsr -690(a6)
	return result;
   1218c:	|               move.w 106(sp),d0
}
   12190:	\-------------> movem.l (sp)+,d2-d3/a6
   12194:	                lea 96(sp),sp
   12198:	                rts

0001219a <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1219a:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1219c:	       movea.l 20(sp),a0
   121a0:	       move.l (a0),d0
   121a2:	       cmp.l 16(sp),d0
   121a6:	/----- beq.s 1220a <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   121a8:	|      move.l 16(sp),d0
   121ac:	|      add.l d0,d0
   121ae:	|      movea.l d0,a1
   121b0:	|      adda.l d0,a1
   121b2:	|      lea 19282 <typeName>,a0
   121b8:	|      move.l (0,a1,a0.l),d0
   121bc:	|      move.l d0,-(sp)
   121be:	|      pea 16982 <custom.c.49191367+0x1c56>
   121c4:	|      jsr 116c6 <joinStrings>
   121ca:	|      addq.l #8,sp
   121cc:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   121d0:	|      movea.l 20(sp),a0
   121d4:	|      move.l (a0),d0
   121d6:	|      add.l d0,d0
   121d8:	|      movea.l d0,a1
   121da:	|      adda.l d0,a1
   121dc:	|      lea 19282 <typeName>,a0
   121e2:	|      move.l (0,a1,a0.l),d0
   121e6:	|      move.l d0,-(sp)
   121e8:	|      pea 169c4 <custom.c.49191367+0x1c98>
   121ee:	|      jsr 116c6 <joinStrings>
   121f4:	|      addq.l #8,sp
   121f6:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   121f8:	|      move.l (sp),-(sp)
   121fa:	|      move.l 8(sp),-(sp)
   121fe:	|      jsr 141e2 <KPrintF>
   12204:	|      addq.l #8,sp

		return FALSE;
   12206:	|      clr.w d0
   12208:	|  /-- bra.s 1221a <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1220a:	\--|-> movea.l 20(sp),a0
   1220e:	   |   move.l 4(a0),d0
   12212:	   |   movea.l 12(sp),a0
   12216:	   |   move.l d0,(a0)
	return TRUE;
   12218:	   |   moveq #1,d0
}
   1221a:	   \-> addq.l #8,sp
   1221c:	       rts

0001221e <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1221e:	move.l 8(sp),-(sp)
   12222:	jsr 4bae <getNumberedString>
   12228:	addq.l #4,sp
   1222a:	move.l d0,-(sp)
   1222c:	move.l 8(sp),-(sp)
   12230:	jsr 123bc <makeTextVar>
   12236:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   12238:	movea.l 4(sp),a0
   1223c:	move.l 4(a0),d0
   12240:	sne d0
   12242:	neg.b d0
   12244:	move.b d0,d0
   12246:	andi.w #255,d0
}
   1224a:	rts

0001224c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1224c:	          subq.l #8,sp
    int size = stackSize(stacky);
   1224e:	          move.l 16(sp),-(sp)
   12252:	          jsr 12afa <stackSize>
   12258:	          addq.l #4,sp
   1225a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1225e:	          move.l 4(sp),-(sp)
   12262:	          move.l 16(sp),-(sp)
   12266:	          jsr 122b6 <makeFastArraySize>
   1226c:	          addq.l #8,sp
   1226e:	          tst.w d0
   12270:	      /-- bne.s 12276 <makeFastArrayFromStack+0x2a>
   12272:	      |   clr.w d0
   12274:	/-----|-- bra.s 122b2 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   12276:	|     \-> movea.l 16(sp),a0
   1227a:	|         move.l (a0),(sp)
    size = 0;
   1227c:	|         clr.l 4(sp)
    while (allV) {
   12280:	|     /-- bra.s 122ac <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   12282:	|  /--|-> movea.l 12(sp),a0
   12286:	|  |  |   movea.l 4(a0),a0
   1228a:	|  |  |   move.l (a0),d1
   1228c:	|  |  |   move.l 4(sp),d0
   12290:	|  |  |   lsl.l #3,d0
   12292:	|  |  |   add.l d0,d1
   12294:	|  |  |   move.l (sp),d0
   12296:	|  |  |   move.l d1,-(sp)
   12298:	|  |  |   move.l d0,-(sp)
   1229a:	|  |  |   jsr 12538 <copyMain>
   122a0:	|  |  |   addq.l #8,sp
        size++;
   122a2:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   122a6:	|  |  |   movea.l (sp),a0
   122a8:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   122ac:	|  |  \-> tst.l (sp)
   122ae:	|  \----- bne.s 12282 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   122b0:	|         moveq #1,d0
}
   122b2:	\-------> addq.l #8,sp
   122b4:	          rts

000122b6 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   122b6:	          lea -28(sp),sp
   122ba:	          move.l a6,-(sp)
    if (size < 0) {
   122bc:	          tst.l 40(sp)
   122c0:	      /-- bge.s 122d6 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   122c2:	      |   pea 16a09 <custom.c.49191367+0x1cdd>
   122c8:	      |   jsr 141e2 <KPrintF>
   122ce:	      |   addq.l #4,sp
		return FALSE;
   122d0:	      |   clr.w d0
   122d2:	/-----|-- bra.w 123b4 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   122d6:	|     \-> move.l 36(sp),-(sp)
   122da:	|         jsr 123e8 <unlinkVar>
   122e0:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   122e2:	|         movea.l 36(sp),a0
   122e6:	|         moveq #10,d0
   122e8:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   122ea:	|         moveq #12,d0
   122ec:	|         move.l d0,24(sp)
   122f0:	|         clr.l 20(sp)
   122f4:	|         move.l 1938c <SysBase>,d0
   122fa:	|         movea.l d0,a6
   122fc:	|         move.l 24(sp),d0
   12300:	|         move.l 20(sp),d1
   12304:	|         jsr -684(a6)
   12308:	|         move.l d0,16(sp)
   1230c:	|         move.l 16(sp),d0
   12310:	|         movea.l 36(sp),a0
   12314:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   12318:	|         movea.l 36(sp),a0
   1231c:	|         move.l 4(a0),d0
   12320:	|     /-- bne.s 12328 <makeFastArraySize+0x72>
   12322:	|     |   clr.w d0
   12324:	+-----|-- bra.w 123b4 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   12328:	|     \-> move.l 40(sp),d0
   1232c:	|         lsl.l #3,d0
   1232e:	|         move.l d0,12(sp)
   12332:	|         clr.l 8(sp)
   12336:	|         move.l 1938c <SysBase>,d0
   1233c:	|         movea.l d0,a6
   1233e:	|         move.l 12(sp),d0
   12342:	|         move.l 8(sp),d1
   12346:	|         jsr -684(a6)
   1234a:	|         move.l d0,4(sp)
   1234e:	|         move.l 4(sp),d0
   12352:	|         movea.l 36(sp),a0
   12356:	|         movea.l 4(a0),a0
   1235a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1235c:	|         movea.l 36(sp),a0
   12360:	|         movea.l 4(a0),a0
   12364:	|         move.l (a0),d0
   12366:	|     /-- bne.s 1236c <makeFastArraySize+0xb6>
   12368:	|     |   clr.w d0
   1236a:	+-----|-- bra.s 123b4 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1236c:	|     \-> clr.l 28(sp)
   12370:	|     /-- bra.s 1238c <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   12372:	|  /--|-> movea.l 36(sp),a0
   12376:	|  |  |   movea.l 4(a0),a0
   1237a:	|  |  |   move.l (a0),d1
   1237c:	|  |  |   move.l 28(sp),d0
   12380:	|  |  |   lsl.l #3,d0
   12382:	|  |  |   movea.l d1,a0
   12384:	|  |  |   adda.l d0,a0
   12386:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   12388:	|  |  |   addq.l #1,28(sp)
   1238c:	|  |  \-> move.l 28(sp),d0
   12390:	|  |      cmp.l 40(sp),d0
   12394:	|  \----- blt.s 12372 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   12396:	|         movea.l 36(sp),a0
   1239a:	|         movea.l 4(a0),a0
   1239e:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   123a4:	|         movea.l 36(sp),a0
   123a8:	|         movea.l 4(a0),a0
   123ac:	|         moveq #1,d0
   123ae:	|         move.l d0,8(a0)
    return TRUE;
   123b2:	|         moveq #1,d0
}
   123b4:	\-------> movea.l (sp)+,a6
   123b6:	          lea 28(sp),sp
   123ba:	          rts

000123bc <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   123bc:	move.l 4(sp),-(sp)
   123c0:	jsr 123e8 <unlinkVar>
   123c6:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   123c8:	movea.l 4(sp),a0
   123cc:	moveq #3,d0
   123ce:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   123d0:	move.l 8(sp),-(sp)
   123d4:	jsr b8 <copyString>
   123da:	addq.l #4,sp
   123dc:	movea.l 4(sp),a0
   123e0:	move.l d0,4(a0)
}
   123e4:	nop
   123e6:	rts

000123e8 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   123e8:	                      lea -16(sp),sp
   123ec:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   123ee:	                      movea.l 24(sp),a0
   123f2:	                      move.l (a0),d0
   123f4:	                      moveq #10,d1
   123f6:	                      cmp.l d0,d1
   123f8:	            /-------- beq.w 124b0 <unlinkVar+0xc8>
   123fc:	            |         moveq #10,d1
   123fe:	            |         cmp.l d0,d1
   12400:	/-----------|-------- bcs.w 12524 <unlinkVar+0x13c>
   12404:	|           |         moveq #8,d1
   12406:	|           |         cmp.l d0,d1
   12408:	|  /--------|-------- beq.w 12510 <unlinkVar+0x128>
   1240c:	|  |        |         moveq #8,d1
   1240e:	|  |        |         cmp.l d0,d1
   12410:	+--|--------|-------- bcs.w 12524 <unlinkVar+0x13c>
   12414:	|  |        |         moveq #3,d1
   12416:	|  |        |         cmp.l d0,d1
   12418:	|  |        |     /-- beq.s 12424 <unlinkVar+0x3c>
   1241a:	|  |        |     |   moveq #6,d1
   1241c:	|  |        |     |   cmp.l d0,d1
   1241e:	|  |        |  /--|-- beq.s 1244a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   12420:	+--|--------|--|--|-- bra.w 12524 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   12424:	|  |        |  |  \-> movea.l 24(sp),a0
   12428:	|  |        |  |      move.l 4(a0),4(sp)
   1242e:	|  |        |  |      move.l 1938c <SysBase>,d0
   12434:	|  |        |  |      movea.l d0,a6
   12436:	|  |        |  |      movea.l 4(sp),a1
   1243a:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   1243e:	|  |        |  |      movea.l 24(sp),a0
   12442:	|  |        |  |      clr.l 4(a0)
		break;
   12446:	|  |  /-----|--|----- bra.w 1252e <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1244a:	|  |  |     |  \----> movea.l 24(sp),a0
   1244e:	|  |  |     |         movea.l 4(a0),a0
   12452:	|  |  |     |         move.l 8(a0),d0
   12456:	|  |  |     |         subq.l #1,d0
   12458:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1245c:	|  |  |     |         movea.l 24(sp),a0
   12460:	|  |  |     |         movea.l 4(a0),a0
   12464:	|  |  |     |         move.l 8(a0),d0
   12468:	|  |  |  /--|-------- bgt.w 12528 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   1246c:	|  |  |  |  |     /-- bra.s 12480 <unlinkVar+0x98>
   1246e:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   12472:	|  |  |  |  |  |  |   move.l 4(a0),d0
   12476:	|  |  |  |  |  |  |   move.l d0,-(sp)
   12478:	|  |  |  |  |  |  |   jsr 12b1e <trimStack>
   1247e:	|  |  |  |  |  |  |   addq.l #4,sp
   12480:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   12484:	|  |  |  |  |  |      movea.l 4(a0),a0
   12488:	|  |  |  |  |  |      move.l (a0),d0
   1248a:	|  |  |  |  |  \----- bne.s 1246e <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   1248c:	|  |  |  |  |         movea.l 24(sp),a0
   12490:	|  |  |  |  |         move.l 4(a0),8(sp)
   12496:	|  |  |  |  |         move.l 1938c <SysBase>,d0
   1249c:	|  |  |  |  |         movea.l d0,a6
   1249e:	|  |  |  |  |         movea.l 8(sp),a1
   124a2:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   124a6:	|  |  |  |  |         movea.l 24(sp),a0
   124aa:	|  |  |  |  |         clr.l 4(a0)
		break;
   124ae:	|  |  |  +--|-------- bra.s 12528 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   124b0:	|  |  |  |  \-------> movea.l 24(sp),a0
   124b4:	|  |  |  |            movea.l 4(a0),a0
   124b8:	|  |  |  |            move.l 8(a0),d0
   124bc:	|  |  |  |            subq.l #1,d0
   124be:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   124c2:	|  |  |  |            movea.l 24(sp),a0
   124c6:	|  |  |  |            movea.l 4(a0),a0
   124ca:	|  |  |  |            move.l 8(a0),d0
   124ce:	|  |  |  |        /-- bgt.s 1252c <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   124d0:	|  |  |  |        |   movea.l 24(sp),a0
   124d4:	|  |  |  |        |   movea.l 4(a0),a0
   124d8:	|  |  |  |        |   move.l (a0),16(sp)
   124dc:	|  |  |  |        |   move.l 1938c <SysBase>,d0
   124e2:	|  |  |  |        |   movea.l d0,a6
   124e4:	|  |  |  |        |   movea.l 16(sp),a1
   124e8:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   124ec:	|  |  |  |        |   movea.l 24(sp),a0
   124f0:	|  |  |  |        |   move.l 4(a0),12(sp)
   124f6:	|  |  |  |        |   move.l 1938c <SysBase>,d0
   124fc:	|  |  |  |        |   movea.l d0,a6
   124fe:	|  |  |  |        |   movea.l 12(sp),a1
   12502:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   12506:	|  |  |  |        |   movea.l 24(sp),a0
   1250a:	|  |  |  |        |   clr.l 4(a0)
		break;
   1250e:	|  |  |  |        +-- bra.s 1252c <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   12510:	|  \--|--|--------|-> movea.l 24(sp),a0
   12514:	|     |  |        |   move.l 4(a0),d0
   12518:	|     |  |        |   move.l d0,-(sp)
   1251a:	|     |  |        |   jsr 7626 <deleteAnim>
   12520:	|     |  |        |   addq.l #4,sp
		break;
   12522:	|     +--|--------|-- bra.s 1252e <unlinkVar+0x146>
		break;
   12524:	\-----|--|--------|-> nop
   12526:	      +--|--------|-- bra.s 1252e <unlinkVar+0x146>
		break;
   12528:	      |  \--------|-> nop
   1252a:	      +-----------|-- bra.s 1252e <unlinkVar+0x146>
		break;
   1252c:	      |           \-> nop
	}
}
   1252e:	      \-------------> nop
   12530:	                      movea.l (sp)+,a6
   12532:	                      lea 16(sp),sp
   12536:	                      rts

00012538 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   12538:	       movea.l 4(sp),a0
   1253c:	       move.l (a0),d0
   1253e:	       movea.l 8(sp),a0
   12542:	       move.l d0,(a0)
	switch (to->varType) {
   12544:	       movea.l 8(sp),a0
   12548:	       move.l (a0),d0
   1254a:	       moveq #10,d1
   1254c:	       cmp.l d0,d1
   1254e:	/----- bcs.w 12640 <copyMain+0x108>
   12552:	|      add.l d0,d0
   12554:	|      movea.l d0,a0
   12556:	|      adda.l #75106,a0
   1255c:	|      move.w (a0),d0
   1255e:	|      jmp (12562 <copyMain+0x2a>,pc,d0.w)
   12562:	|      .short 0x00da
   12564:	|      ori.b #22,(a6)
   12568:	|      ori.w #22,(a4)
   1256c:	|      ori.b #-126,(a6)
   12570:	|      ori.b #-68,(a6)
   12574:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   1257c:	|      move.l 4(a0),d0
   12580:	|      movea.l 8(sp),a0
   12584:	|      move.l d0,4(a0)
		return TRUE;
   12588:	|      moveq #1,d0
   1258a:	|  /-- bra.w 12652 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   1258e:	|  |   movea.l 4(sp),a0
   12592:	|  |   move.l 4(a0),d0
   12596:	|  |   movea.l 8(sp),a0
   1259a:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   1259e:	|  |   movea.l 8(sp),a0
   125a2:	|  |   movea.l 4(a0),a0
   125a6:	|  |   move.l 8(a0),d0
   125aa:	|  |   addq.l #1,d0
   125ac:	|  |   move.l d0,8(a0)
		return TRUE;
   125b0:	|  |   moveq #1,d0
   125b2:	|  +-- bra.w 12652 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   125b6:	|  |   movea.l 4(sp),a0
   125ba:	|  |   move.l 4(a0),d0
   125be:	|  |   move.l d0,-(sp)
   125c0:	|  |   jsr b8 <copyString>
   125c6:	|  |   addq.l #4,sp
   125c8:	|  |   movea.l 8(sp),a0
   125cc:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   125d0:	|  |   movea.l 8(sp),a0
   125d4:	|  |   move.l 4(a0),d0
   125d8:	|  |   sne d0
   125da:	|  |   neg.b d0
   125dc:	|  |   move.b d0,d0
   125de:	|  |   andi.w #255,d0
   125e2:	|  +-- bra.s 12652 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   125e4:	|  |   movea.l 4(sp),a0
   125e8:	|  |   move.l 4(a0),d0
   125ec:	|  |   movea.l 8(sp),a0
   125f0:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   125f4:	|  |   movea.l 8(sp),a0
   125f8:	|  |   movea.l 4(a0),a0
   125fc:	|  |   move.l 8(a0),d0
   12600:	|  |   addq.l #1,d0
   12602:	|  |   move.l d0,8(a0)
		return TRUE;
   12606:	|  |   moveq #1,d0
   12608:	|  +-- bra.s 12652 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1260a:	|  |   movea.l 4(sp),a0
   1260e:	|  |   move.l 4(a0),d0
   12612:	|  |   movea.l 8(sp),a0
   12616:	|  |   move.l d0,4(a0)
		return TRUE;
   1261a:	|  |   moveq #1,d0
   1261c:	|  +-- bra.s 12652 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   1261e:	|  |   movea.l 4(sp),a0
   12622:	|  |   move.l 4(a0),d0
   12626:	|  |   move.l d0,-(sp)
   12628:	|  |   jsr 726a <copyAnim>
   1262e:	|  |   addq.l #4,sp
   12630:	|  |   movea.l 8(sp),a0
   12634:	|  |   move.l d0,4(a0)
		return TRUE;
   12638:	|  |   moveq #1,d0
   1263a:	|  +-- bra.s 12652 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   1263c:	|  |   moveq #1,d0
   1263e:	|  +-- bra.s 12652 <copyMain+0x11a>

		default:
		break;
   12640:	\--|-> nop
	}
	KPrintF("Unknown value type");
   12642:	   |   pea 16a5a <custom.c.49191367+0x1d2e>
   12648:	   |   jsr 141e2 <KPrintF>
   1264e:	   |   addq.l #4,sp
	return FALSE;
   12650:	   |   clr.w d0
}
   12652:	   \-> rts

00012654 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   12654:	move.l 8(sp),-(sp)
   12658:	jsr 123e8 <unlinkVar>
   1265e:	addq.l #4,sp
	return copyMain(from, to);
   12660:	move.l 8(sp),-(sp)
   12664:	move.l 8(sp),-(sp)
   12668:	jsr 12538 <copyMain>
   1266e:	addq.l #8,sp
}
   12670:	rts

00012672 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   12672:	       movea.l 4(sp),a0
   12676:	       move.l (a0),d0
   12678:	       moveq #8,d1
   1267a:	       cmp.l d0,d1
   1267c:	   /-- bne.s 12692 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   1267e:	   |   movea.l 4(sp),a0
   12682:	   |   move.l 4(a0),d0
   12686:	   |   move.l d0,-(sp)
   12688:	   |   jsr 726a <copyAnim>
   1268e:	   |   addq.l #4,sp
   12690:	/--|-- bra.s 126d8 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   12692:	|  \-> movea.l 4(sp),a0
   12696:	|      move.l (a0),d0
   12698:	|      moveq #1,d1
   1269a:	|      cmp.l d0,d1
   1269c:	|  /-- bne.s 126b0 <getAnimationFromVar+0x3e>
   1269e:	|  |   movea.l 4(sp),a0
   126a2:	|  |   move.l 4(a0),d0
   126a6:	|  +-- bne.s 126b0 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   126a8:	|  |   jsr 8966 <makeNullAnim>
   126ae:	+--|-- bra.s 126d8 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   126b0:	|  \-> movea.l 4(sp),a0
   126b4:	|      move.l (a0),d0
   126b6:	|      add.l d0,d0
   126b8:	|      movea.l d0,a1
   126ba:	|      adda.l d0,a1
   126bc:	|      lea 19282 <typeName>,a0
   126c2:	|      move.l (0,a1,a0.l),d0
   126c6:	|      move.l d0,-(sp)
   126c8:	|      pea 16946 <custom.c.49191367+0x1c1a>
   126ce:	|      jsr 141e2 <KPrintF>
   126d4:	|      addq.l #8,sp
	return NULL;
   126d6:	|      moveq #0,d0
}
   126d8:	\----> rts

000126da <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   126da:	       movea.l 4(sp),a0
   126de:	       move.l (a0),d0
   126e0:	       moveq #10,d1
   126e2:	       cmp.l d0,d1
   126e4:	/----- bcs.w 1276a <getBoolean+0x90>
   126e8:	|      add.l d0,d0
   126ea:	|      movea.l d0,a0
   126ec:	|      adda.l #75512,a0
   126f2:	|      move.w (a0),d0
   126f4:	|      jmp (126f8 <getBoolean+0x1e>,pc,d0.w)
   126f8:	|      ori.b #26,(a6)
   126fc:	|      ori.w #68,(114,a2,d0.w)
   12702:	|      ori.w #46,(114,a2,d0.w)
   12708:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   1270e:	|      clr.w d0
   12710:	|  /-- bra.s 1276e <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   12712:	|  |   movea.l 4(sp),a0
   12716:	|  |   move.l 4(a0),d0
   1271a:	|  |   sne d0
   1271c:	|  |   neg.b d0
   1271e:	|  |   move.b d0,d0
   12720:	|  |   andi.w #255,d0
   12724:	|  +-- bra.s 1276e <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   12726:	|  |   movea.l 4(sp),a0
   1272a:	|  |   movea.l 4(a0),a0
   1272e:	|  |   move.l (a0),d0
   12730:	|  |   sne d0
   12732:	|  |   neg.b d0
   12734:	|  |   move.b d0,d0
   12736:	|  |   andi.w #255,d0
   1273a:	|  +-- bra.s 1276e <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   1273c:	|  |   movea.l 4(sp),a0
   12740:	|  |   movea.l 4(a0),a0
   12744:	|  |   move.b (a0),d0
   12746:	|  |   sne d0
   12748:	|  |   neg.b d0
   1274a:	|  |   move.b d0,d0
   1274c:	|  |   andi.w #255,d0
   12750:	|  +-- bra.s 1276e <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   12752:	|  |   movea.l 4(sp),a0
   12756:	|  |   movea.l 4(a0),a0
   1275a:	|  |   move.l 4(a0),d0
   1275e:	|  |   sne d0
   12760:	|  |   neg.b d0
   12762:	|  |   move.b d0,d0
   12764:	|  |   andi.w #255,d0
   12768:	|  +-- bra.s 1276e <getBoolean+0x94>

		default:
		break;
   1276a:	\--|-> nop
	}
	return TRUE;
   1276c:	   |   moveq #1,d0
}
   1276e:	   \-> rts

00012770 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   12770:	      /----------> lea -76(sp),sp
   12774:	      |            move.l a6,-(sp)
	switch (from->varType) {
   12776:	      |            movea.l 84(sp),a0
   1277a:	      |            move.l (a0),d0
   1277c:	      |            moveq #10,d1
   1277e:	      |            cmp.l d0,d1
   12780:	/-----|----------- bcs.w 12a1e <getTextFromAnyVar+0x2ae>
   12784:	|     |            add.l d0,d0
   12786:	|     |            movea.l d0,a0
   12788:	|     |            adda.l #75668,a0
   1278e:	|     |            move.w (a0),d0
   12790:	|     |            jmp (12794 <getTextFromAnyVar+0x24>,pc,d0.w)
   12794:	|     |            .short 0x028a
   12796:	|     |            bset d0,(a0)+
   12798:	|     |            .short 0x028a
   1279a:	|     |            ori.b #-118,(a6)
   1279e:	|     |            andi.b #8,ccr
   127a2:	|     |            andi.w #650,-(a0)
   127a6:	|     |            .short 0x028a
   127a8:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   127ae:	|     |            move.l 4(a0),d0
   127b2:	|     |            move.l d0,-(sp)
   127b4:	|     |            jsr b8 <copyString>
   127ba:	|     |            addq.l #4,sp
   127bc:	|  /--|----------- bra.w 12a40 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   127c0:	|  |  |            pea 16a6d <custom.c.49191367+0x1d41>
   127c6:	|  |  |            jsr b8 <copyString>
   127cc:	|  |  |            addq.l #4,sp
   127ce:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   127d2:	|  |  |            clr.l 72(sp)
   127d6:	|  |  |     /----- bra.w 12880 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   127da:	|  |  |  /--|----> pea 16a73 <custom.c.49191367+0x1d47>
   127e0:	|  |  |  |  |      move.l 80(sp),-(sp)
   127e4:	|  |  |  |  |      jsr 116c6 <joinStrings>
   127ea:	|  |  |  |  |      addq.l #8,sp
   127ec:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   127f0:	|  |  |  |  |  /-- bne.s 127f8 <getTextFromAnyVar+0x88>
   127f2:	|  |  |  |  |  |   moveq #0,d0
   127f4:	|  +--|--|--|--|-- bra.w 12a40 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   127f8:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   127fe:	|  |  |  |  |      move.l 1938c <SysBase>,d0
   12804:	|  |  |  |  |      movea.l d0,a6
   12806:	|  |  |  |  |      movea.l 56(sp),a1
   1280a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   1280e:	|  |  |  |  |      movea.l 84(sp),a0
   12812:	|  |  |  |  |      movea.l 4(a0),a0
   12816:	|  |  |  |  |      move.l (a0),d1
   12818:	|  |  |  |  |      move.l 72(sp),d0
   1281c:	|  |  |  |  |      lsl.l #3,d0
   1281e:	|  |  |  |  |      add.l d1,d0
   12820:	|  |  |  |  |      move.l d0,-(sp)
   12822:	|  |  +--|--|----- jsr 12770 <getTextFromAnyVar>(pc)
   12826:	|  |  |  |  |      addq.l #4,sp
   12828:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   1282c:	|  |  |  |  |      move.l 52(sp),-(sp)
   12830:	|  |  |  |  |      move.l 64(sp),-(sp)
   12834:	|  |  |  |  |      jsr 116c6 <joinStrings>
   1283a:	|  |  |  |  |      addq.l #8,sp
   1283c:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   12840:	|  |  |  |  |  /-- bne.s 12848 <getTextFromAnyVar+0xd8>
   12842:	|  |  |  |  |  |   moveq #0,d0
   12844:	|  +--|--|--|--|-- bra.w 12a40 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   12848:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   1284e:	|  |  |  |  |      move.l 1938c <SysBase>,d0
   12854:	|  |  |  |  |      movea.l d0,a6
   12856:	|  |  |  |  |      movea.l 48(sp),a1
   1285a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1285e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   12862:	|  |  |  |  |      move.l 60(sp),44(sp)
   12868:	|  |  |  |  |      move.l 1938c <SysBase>,d0
   1286e:	|  |  |  |  |      movea.l d0,a6
   12870:	|  |  |  |  |      movea.l 44(sp),a1
   12874:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   12878:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1287c:	|  |  |  |  |      addq.l #1,72(sp)
   12880:	|  |  |  |  \----> movea.l 84(sp),a0
   12884:	|  |  |  |         movea.l 4(a0),a0
   12888:	|  |  |  |         move.l 4(a0),d0
   1288c:	|  |  |  |         cmp.l 72(sp),d0
   12890:	|  |  |  \-------- bgt.w 127da <getTextFromAnyVar+0x6a>
			}
			return builder;
   12894:	|  |  |            move.l 76(sp),d0
   12898:	|  +--|----------- bra.w 12a40 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1289c:	|  |  |            pea 16a75 <custom.c.49191367+0x1d49>
   128a2:	|  |  |            jsr b8 <copyString>
   128a8:	|  |  |            addq.l #4,sp
   128aa:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   128ae:	|  |  |            movea.l 84(sp),a0
   128b2:	|  |  |            movea.l 4(a0),a0
   128b6:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   128ba:	|  |  |     /----- bra.w 1295c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   128be:	|  |  |  /--|----> pea 16a73 <custom.c.49191367+0x1d47>
   128c4:	|  |  |  |  |      move.l 72(sp),-(sp)
   128c8:	|  |  |  |  |      jsr 116c6 <joinStrings>
   128ce:	|  |  |  |  |      addq.l #8,sp
   128d0:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   128d4:	|  |  |  |  |  /-- bne.s 128dc <getTextFromAnyVar+0x16c>
   128d6:	|  |  |  |  |  |   moveq #0,d0
   128d8:	|  +--|--|--|--|-- bra.w 12a40 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   128dc:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   128e2:	|  |  |  |  |      move.l 1938c <SysBase>,d0
   128e8:	|  |  |  |  |      movea.l d0,a6
   128ea:	|  |  |  |  |      movea.l 32(sp),a1
   128ee:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   128f2:	|  |  |  |  |      move.l 64(sp),d0
   128f6:	|  |  |  |  |      move.l d0,-(sp)
   128f8:	|  |  \--|--|----- jsr 12770 <getTextFromAnyVar>(pc)
   128fc:	|  |     |  |      addq.l #4,sp
   128fe:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   12902:	|  |     |  |      move.l 28(sp),-(sp)
   12906:	|  |     |  |      move.l 40(sp),-(sp)
   1290a:	|  |     |  |      jsr 116c6 <joinStrings>
   12910:	|  |     |  |      addq.l #8,sp
   12912:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   12916:	|  |     |  |  /-- bne.s 1291e <getTextFromAnyVar+0x1ae>
   12918:	|  |     |  |  |   moveq #0,d0
   1291a:	|  +-----|--|--|-- bra.w 12a40 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1291e:	|  |     |  |  \-> move.l 28(sp),24(sp)
   12924:	|  |     |  |      move.l 1938c <SysBase>,d0
   1292a:	|  |     |  |      movea.l d0,a6
   1292c:	|  |     |  |      movea.l 24(sp),a1
   12930:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   12934:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   12938:	|  |     |  |      move.l 36(sp),20(sp)
   1293e:	|  |     |  |      move.l 1938c <SysBase>,d0
   12944:	|  |     |  |      movea.l d0,a6
   12946:	|  |     |  |      movea.l 20(sp),a1
   1294a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1294e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   12952:	|  |     |  |      movea.l 64(sp),a0
   12956:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1295c:	|  |     |  \----> tst.l 64(sp)
   12960:	|  |     \-------- bne.w 128be <getTextFromAnyVar+0x14e>
			}
			return builder;
   12964:	|  |               move.l 68(sp),d0
   12968:	|  +-------------- bra.w 12a40 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1296c:	|  |               moveq #10,d0
   1296e:	|  |               move.l d0,16(sp)
   12972:	|  |               clr.l 12(sp)
   12976:	|  |               move.l 1938c <SysBase>,d0
   1297c:	|  |               movea.l d0,a6
   1297e:	|  |               move.l 16(sp),d0
   12982:	|  |               move.l 12(sp),d1
   12986:	|  |               jsr -684(a6)
   1298a:	|  |               move.l d0,8(sp)
   1298e:	|  |               move.l 8(sp),d0
   12992:	|  |               move.l d0,4(sp)
			if (! buff) {
   12996:	|  |           /-- bne.s 129ac <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   12998:	|  |           |   pea 16a7c <custom.c.49191367+0x1d50>
   1299e:	|  |           |   jsr 141e2 <KPrintF>
   129a4:	|  |           |   addq.l #4,sp
				return NULL;
   129a6:	|  |           |   moveq #0,d0
   129a8:	|  +-----------|-- bra.w 12a40 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   129ac:	|  |           \-> movea.l 84(sp),a0
   129b0:	|  |               move.l 4(a0),d0
   129b4:	|  |               move.l d0,-(sp)
   129b6:	|  |               pea 16aa6 <custom.c.49191367+0x1d7a>
   129bc:	|  |               move.l 12(sp),-(sp)
   129c0:	|  |               jsr 119a4 <sprintf>
   129c6:	|  |               lea 12(sp),sp
			return buff;
   129ca:	|  |               move.l 4(sp),d0
   129ce:	|  +-------------- bra.s 12a40 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   129d0:	|  |               movea.l 84(sp),a0
   129d4:	|  |               move.l 4(a0),d0
   129d8:	|  |               move.l d0,-(sp)
   129da:	|  |               jsr 2306 <resourceNameFromNum>
   129e0:	|  |               addq.l #4,sp
   129e2:	|  |               move.l d0,-(sp)
   129e4:	|  |               pea 15417 <custom.c.49191367+0x6eb>
   129ea:	|  |               jsr 116c6 <joinStrings>
   129f0:	|  |               addq.l #8,sp
   129f2:	|  +-------------- bra.s 12a40 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   129f4:	|  |               movea.l 84(sp),a0
   129f8:	|  |               move.l 4(a0),d0
   129fc:	|  |               move.l d0,-(sp)
   129fe:	|  |               jsr afd0 <findObjectType>
   12a04:	|  |               addq.l #4,sp
   12a06:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   12a0a:	+--|-------------- beq.s 12a1e <getTextFromAnyVar+0x2ae>
   12a0c:	|  |               movea.l 40(sp),a0
   12a10:	|  |               move.l (a0),d0
   12a12:	|  |               move.l d0,-(sp)
   12a14:	|  |               jsr b8 <copyString>
   12a1a:	|  |               addq.l #4,sp
   12a1c:	|  +-------------- bra.s 12a40 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   12a1e:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   12a20:	   |               movea.l 84(sp),a0
   12a24:	   |               move.l (a0),d0
   12a26:	   |               add.l d0,d0
   12a28:	   |               movea.l d0,a1
   12a2a:	   |               adda.l d0,a1
   12a2c:	   |               lea 19282 <typeName>,a0
   12a32:	   |               move.l (0,a1,a0.l),d0
   12a36:	   |               move.l d0,-(sp)
   12a38:	   |               jsr b8 <copyString>
   12a3e:	   |               addq.l #4,sp
}
   12a40:	   \-------------> movea.l (sp)+,a6
   12a42:	                   lea 76(sp),sp
   12a46:	                   rts

00012a48 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   12a48:	move.l 4(sp),-(sp)
   12a4c:	jsr 123e8 <unlinkVar>
   12a52:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   12a54:	movea.l 4(sp),a0
   12a58:	moveq #8,d0
   12a5a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   12a5c:	movea.l 4(sp),a0
   12a60:	move.l 8(sp),4(a0)
}
   12a66:	nop
   12a68:	rts

00012a6a <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   12a6a:	move.l 4(sp),-(sp)
   12a6e:	jsr 123e8 <unlinkVar>
   12a74:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   12a76:	movea.l 4(sp),a0
   12a7a:	moveq #9,d0
   12a7c:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   12a7e:	movea.l 4(sp),a0
   12a82:	move.l 8(sp),4(a0)
}
   12a88:	nop
   12a8a:	rts

00012a8c <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   12a8c:	move.l 4(sp),-(sp)
   12a90:	jsr 123e8 <unlinkVar>
   12a96:	addq.l #4,sp
	thisVar->varType = vT;
   12a98:	movea.l 4(sp),a0
   12a9c:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   12aa0:	movea.l 4(sp),a0
   12aa4:	move.l 12(sp),4(a0)
}
   12aaa:	nop
   12aac:	rts

00012aae <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   12aae:	      /-- bra.s 12ac0 <stackGetByIndex+0x12>
        vS = vS->next;
   12ab0:	/-----|-> movea.l 4(sp),a0
   12ab4:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   12aba:	|     +-- bne.s 12ac0 <stackGetByIndex+0x12>
            return NULL;
   12abc:	|     |   moveq #0,d0
   12abe:	|  /--|-- bra.s 12ad4 <stackGetByIndex+0x26>
    while (theIndex--) {
   12ac0:	|  |  \-> move.l 8(sp),d0
   12ac4:	|  |      move.l d0,d1
   12ac6:	|  |      subq.l #1,d1
   12ac8:	|  |      move.l d1,8(sp)
   12acc:	|  |      tst.l d0
   12ace:	\--|----- bne.s 12ab0 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   12ad0:	   |      move.l 4(sp),d0
}
   12ad4:	   \----> rts

00012ad6 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   12ad6:	          tst.l 4(sp)
   12ada:	      /-- bne.s 12aea <stackFindLast+0x14>
		return NULL;
   12adc:	      |   moveq #0,d0
   12ade:	/-----|-- bra.s 12af8 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   12ae0:	|  /--|-> movea.l 4(sp),a0
   12ae4:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   12aea:	|  |  \-> movea.l 4(sp),a0
   12aee:	|  |      move.l 8(a0),d0
   12af2:	|  \----- bne.s 12ae0 <stackFindLast+0xa>

	return hunt;
   12af4:	|         move.l 4(sp),d0
}
   12af8:	\-------> rts

00012afa <stackSize>:

int stackSize (const struct stackHandler * me) {
   12afa:	       subq.l #8,sp
	int r = 0;
   12afc:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   12b00:	       movea.l 12(sp),a0
   12b04:	       move.l (a0),(sp)
	while (a) {
   12b06:	   /-- bra.s 12b12 <stackSize+0x18>
		r ++;
   12b08:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   12b0c:	|  |   movea.l (sp),a0
   12b0e:	|  |   move.l 8(a0),(sp)
	while (a) {
   12b12:	|  \-> tst.l (sp)
   12b14:	\----- bne.s 12b08 <stackSize+0xe>
	}
	return r;
   12b16:	       move.l 4(sp),d0
}
   12b1a:	       addq.l #8,sp
   12b1c:	       rts

00012b1e <trimStack>:

void trimStack (struct variableStack ** stack) {
   12b1e:	subq.l #8,sp
   12b20:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   12b22:	movea.l 16(sp),a0
   12b26:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   12b2a:	movea.l 16(sp),a0
   12b2e:	movea.l (a0),a0
   12b30:	move.l 8(a0),d0
   12b34:	movea.l 16(sp),a0
   12b38:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   12b3a:	move.l 8(sp),d0
   12b3e:	move.l d0,-(sp)
   12b40:	jsr 123e8 <unlinkVar>
   12b46:	addq.l #4,sp
	FreeVec(killMe);
   12b48:	move.l 8(sp),4(sp)
   12b4e:	move.l 1938c <SysBase>,d0
   12b54:	movea.l d0,a6
   12b56:	movea.l 4(sp),a1
   12b5a:	jsr -690(a6)
   12b5e:	nop
   12b60:	movea.l (sp)+,a6
   12b62:	addq.l #8,sp
   12b64:	rts

00012b66 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   12b66:	pea 16aa9 <custom.c.49191367+0x1d7d>
   12b6c:	jsr 141e2 <KPrintF>
   12b72:	addq.l #4,sp
	return FALSE;
   12b74:	clr.w d0
}
   12b76:	rts

00012b78 <stringWidth>:

int stringWidth (char * theText) {
   12b78:	       subq.l #8,sp
	int a = 0;
   12b7a:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   12b7e:	       clr.l (sp)

	if (! fontTableSize) return 0;
   12b80:	       move.l 194e0 <fontTableSize>,d0
   12b86:	/----- bne.s 12b8c <stringWidth+0x14>
   12b88:	|      moveq #0,d0
   12b8a:	|  /-- bra.s 12b8e <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   12b8c:	\--|-> move.l (sp),d0
}
   12b8e:	   \-> addq.l #8,sp
   12b90:	       rts

00012b92 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   12b92:	pea 16ad0 <custom.c.49191367+0x1da4>
   12b98:	jsr 141e2 <KPrintF>
   12b9e:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   12ba0:	moveq #1,d0
}
   12ba2:	rts

00012ba4 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   12ba4:	       lea -16(sp),sp
   12ba8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   12baa:	       moveq #36,d0
   12bac:	       move.l d0,16(sp)
   12bb0:	       clr.l 12(sp)
   12bb4:	       move.l 1938c <SysBase>,d0
   12bba:	       movea.l d0,a6
   12bbc:	       move.l 16(sp),d0
   12bc0:	       move.l 12(sp),d1
   12bc4:	       jsr -684(a6)
   12bc8:	       move.l d0,8(sp)
   12bcc:	       move.l 8(sp),d0
   12bd0:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   12bd4:	   /-- bne.s 12bdc <addScreenRegion+0x38>
   12bd6:	   |   clr.w d0
   12bd8:	/--|-- bra.w 12c5c <addScreenRegion+0xb8>
    newRegion->di = di;
   12bdc:	|  \-> movea.l 4(sp),a0
   12be0:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   12be6:	|      movea.l 4(sp),a0
   12bea:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   12bee:	|      movea.l 4(sp),a0
   12bf2:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   12bf8:	|      movea.l 4(sp),a0
   12bfc:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   12c02:	|      movea.l 4(sp),a0
   12c06:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   12c0c:	|      movea.l 4(sp),a0
   12c10:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   12c16:	|      movea.l 4(sp),a0
   12c1a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   12c20:	|      move.l 52(sp),-(sp)
   12c24:	|      jsr b0c0 <loadObjectType>
   12c2a:	|      addq.l #4,sp
   12c2c:	|      movea.l 4(sp),a0
   12c30:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   12c34:	|      move.l 194e4 <allScreenRegions>,d0
   12c3a:	|      movea.l 4(sp),a0
   12c3e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   12c42:	|      move.l 4(sp),194e4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   12c4a:	|      movea.l 4(sp),a0
   12c4e:	|      move.l 28(a0),d0
   12c52:	|      sne d0
   12c54:	|      neg.b d0
   12c56:	|      move.b d0,d0
   12c58:	|      andi.w #255,d0
}
   12c5c:	\----> movea.l (sp)+,a6
   12c5e:	       lea 16(sp),sp
   12c62:	       rts

00012c64 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   12c64:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   12c66:	             move.l 194e4 <allScreenRegions>,(sp)

	while (thisRegion) {
   12c6c:	   /-------- bra.s 12c88 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   12c6e:	/--|-------> movea.l (sp),a0
   12c70:	|  |         movea.l 28(a0),a0
   12c74:	|  |         move.l 4(a0),d0
   12c78:	|  |         cmp.l 8(sp),d0
   12c7c:	|  |     /-- bne.s 12c82 <getRegionForObject+0x1e>
			return thisRegion;
   12c7e:	|  |     |   move.l (sp),d0
   12c80:	|  |  /--|-- bra.s 12c8e <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   12c82:	|  |  |  \-> movea.l (sp),a0
   12c84:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   12c88:	|  \--|----> tst.l (sp)
   12c8a:	\-----|----- bne.s 12c6e <getRegionForObject+0xa>
	}

	return NULL;
   12c8c:	      |      moveq #0,d0
}
   12c8e:	      \----> addq.l #4,sp
   12c90:	             rts

00012c92 <killAllRegions>:

void killAllRegions () {
   12c92:	       subq.l #8,sp
   12c94:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   12c96:	   /-- bra.s 12cd8 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   12c98:	/--|-> move.l 194e4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   12ca0:	|  |   movea.l 194e4 <allScreenRegions>,a0
   12ca6:	|  |   move.l 32(a0),d0
   12caa:	|  |   move.l d0,194e4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   12cb0:	|  |   movea.l 8(sp),a0
   12cb4:	|  |   move.l 28(a0),d0
   12cb8:	|  |   move.l d0,-(sp)
   12cba:	|  |   jsr b378 <removeObjectType>
   12cc0:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   12cc2:	|  |   move.l 8(sp),4(sp)
   12cc8:	|  |   move.l 1938c <SysBase>,d0
   12cce:	|  |   movea.l d0,a6
   12cd0:	|  |   movea.l 4(sp),a1
   12cd4:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   12cd8:	|  \-> move.l 194e4 <allScreenRegions>,d0
   12cde:	\----- bne.s 12c98 <killAllRegions+0x6>
	}
	overRegion = NULL;
   12ce0:	       clr.l 194e8 <overRegion>
}
   12ce6:	       nop
   12ce8:	       movea.l (sp)+,a6
   12cea:	       addq.l #8,sp
   12cec:	       rts

00012cee <loadRegions>:

void loadRegions (BPTR fp) {
   12cee:	       lea -24(sp),sp
   12cf2:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   12cf4:	       move.l 32(sp),-(sp)
   12cf8:	       jsr 6bc <get2bytes>
   12cfe:	       addq.l #4,sp
   12d00:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   12d04:	       move.l #103652,20(sp)

	while (numRegions --) {
   12d0c:	   /-- bra.w 12dea <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   12d10:	/--|-> moveq #36,d0
   12d12:	|  |   move.l d0,16(sp)
   12d16:	|  |   clr.l 12(sp)
   12d1a:	|  |   move.l 1938c <SysBase>,d0
   12d20:	|  |   movea.l d0,a6
   12d22:	|  |   move.l 16(sp),d0
   12d26:	|  |   move.l 12(sp),d1
   12d2a:	|  |   jsr -684(a6)
   12d2e:	|  |   move.l d0,8(sp)
   12d32:	|  |   move.l 8(sp),d0
   12d36:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   12d3a:	|  |   movea.l 20(sp),a0
   12d3e:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   12d42:	|  |   moveq #32,d1
   12d44:	|  |   add.l 4(sp),d1
   12d48:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   12d4c:	|  |   move.l 32(sp),-(sp)
   12d50:	|  |   jsr 6bc <get2bytes>
   12d56:	|  |   addq.l #4,sp
   12d58:	|  |   movea.l 4(sp),a0
   12d5c:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   12d5e:	|  |   move.l 32(sp),-(sp)
   12d62:	|  |   jsr 6bc <get2bytes>
   12d68:	|  |   addq.l #4,sp
   12d6a:	|  |   movea.l 4(sp),a0
   12d6e:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   12d72:	|  |   move.l 32(sp),-(sp)
   12d76:	|  |   jsr 6bc <get2bytes>
   12d7c:	|  |   addq.l #4,sp
   12d7e:	|  |   movea.l 4(sp),a0
   12d82:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   12d86:	|  |   move.l 32(sp),-(sp)
   12d8a:	|  |   jsr 6bc <get2bytes>
   12d90:	|  |   addq.l #4,sp
   12d92:	|  |   movea.l 4(sp),a0
   12d96:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   12d9a:	|  |   move.l 32(sp),-(sp)
   12d9e:	|  |   jsr 6bc <get2bytes>
   12da4:	|  |   addq.l #4,sp
   12da6:	|  |   movea.l 4(sp),a0
   12daa:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   12dae:	|  |   move.l 32(sp),-(sp)
   12db2:	|  |   jsr 6bc <get2bytes>
   12db8:	|  |   addq.l #4,sp
   12dba:	|  |   movea.l 4(sp),a0
   12dbe:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   12dc2:	|  |   move.l 32(sp),-(sp)
   12dc6:	|  |   jsr 6bc <get2bytes>
   12dcc:	|  |   addq.l #4,sp
   12dce:	|  |   movea.l 4(sp),a0
   12dd2:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   12dd6:	|  |   move.l 32(sp),-(sp)
   12dda:	|  |   jsr b06e <loadObjectRef>
   12de0:	|  |   addq.l #4,sp
   12de2:	|  |   movea.l 4(sp),a0
   12de6:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   12dea:	|  \-> move.l 24(sp),d0
   12dee:	|      move.l d0,d1
   12df0:	|      subq.l #1,d1
   12df2:	|      move.l d1,24(sp)
   12df6:	|      tst.l d0
   12df8:	\----- bne.w 12d10 <loadRegions+0x22>
	}
	* pointy = NULL;
   12dfc:	       movea.l 20(sp),a0
   12e00:	       clr.l (a0)
}
   12e02:	       nop
   12e04:	       movea.l (sp)+,a6
   12e06:	       lea 24(sp),sp
   12e0a:	       rts

00012e0c <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   12e0c:	             lea -12(sp),sp
   12e10:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   12e12:	             move.l #103652,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   12e1a:	   /-------- bra.s 12e94 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   12e1c:	/--|-------> movea.l 12(sp),a0
   12e20:	|  |         movea.l (a0),a0
   12e22:	|  |         movea.l 28(a0),a0
   12e26:	|  |         move.l 4(a0),d0
   12e2a:	|  |         cmp.l 20(sp),d0
   12e2e:	|  |  /----- bne.s 12e86 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   12e30:	|  |  |      movea.l 12(sp),a0
   12e34:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   12e38:	|  |  |      movea.l 8(sp),a0
   12e3c:	|  |  |      move.l 32(a0),d0
   12e40:	|  |  |      movea.l 12(sp),a0
   12e44:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   12e46:	|  |  |      movea.l 8(sp),a0
   12e4a:	|  |  |      move.l 28(a0),d0
   12e4e:	|  |  |      move.l d0,-(sp)
   12e50:	|  |  |      jsr b378 <removeObjectType>
   12e56:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   12e58:	|  |  |      move.l 194e8 <overRegion>,d0
   12e5e:	|  |  |      cmp.l 8(sp),d0
   12e62:	|  |  |  /-- bne.s 12e6a <removeScreenRegion+0x5e>
   12e64:	|  |  |  |   clr.l 194e8 <overRegion>
            FreeVec(killMe);
   12e6a:	|  |  |  \-> move.l 8(sp),4(sp)
   12e70:	|  |  |      move.l 1938c <SysBase>,d0
   12e76:	|  |  |      movea.l d0,a6
   12e78:	|  |  |      movea.l 4(sp),a1
   12e7c:	|  |  |      jsr -690(a6)
            killMe = NULL;
   12e80:	|  |  |      clr.l 8(sp)
   12e84:	|  +--|----- bra.s 12e94 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   12e86:	|  |  \----> movea.l 12(sp),a0
   12e8a:	|  |         move.l (a0),d0
   12e8c:	|  |         moveq #32,d1
   12e8e:	|  |         add.l d0,d1
   12e90:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   12e94:	|  \-------> movea.l 12(sp),a0
   12e98:	|            move.l (a0),d0
   12e9a:	\----------- bne.s 12e1c <removeScreenRegion+0x10>
        }
    }
}
   12e9c:	             nop
   12e9e:	             nop
   12ea0:	             movea.l (sp)+,a6
   12ea2:	             lea 12(sp),sp
   12ea6:	             rts

00012ea8 <saveRegions>:

void saveRegions (BPTR fp) {
   12ea8:	       subq.l #8,sp
	int numRegions = 0;
   12eaa:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   12eae:	       move.l 194e4 <allScreenRegions>,(sp)
	while (thisRegion) {
   12eb4:	   /-- bra.s 12ec0 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   12eb6:	/--|-> movea.l (sp),a0
   12eb8:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   12ebc:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   12ec0:	|  \-> tst.l (sp)
   12ec2:	\----- bne.s 12eb6 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   12ec4:	       move.l 12(sp),-(sp)
   12ec8:	       move.l 8(sp),-(sp)
   12ecc:	       jsr 8d0 <put2bytes>
   12ed2:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   12ed4:	       move.l 194e4 <allScreenRegions>,(sp)
	while (thisRegion) {
   12eda:	/----- bra.w 12f82 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   12ede:	|  /-> movea.l (sp),a0
   12ee0:	|  |   move.l (a0),d0
   12ee2:	|  |   move.l 12(sp),-(sp)
   12ee6:	|  |   move.l d0,-(sp)
   12ee8:	|  |   jsr 8d0 <put2bytes>
   12eee:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   12ef0:	|  |   movea.l (sp),a0
   12ef2:	|  |   move.l 4(a0),d0
   12ef6:	|  |   move.l 12(sp),-(sp)
   12efa:	|  |   move.l d0,-(sp)
   12efc:	|  |   jsr 8d0 <put2bytes>
   12f02:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   12f04:	|  |   movea.l (sp),a0
   12f06:	|  |   move.l 8(a0),d0
   12f0a:	|  |   move.l 12(sp),-(sp)
   12f0e:	|  |   move.l d0,-(sp)
   12f10:	|  |   jsr 8d0 <put2bytes>
   12f16:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   12f18:	|  |   movea.l (sp),a0
   12f1a:	|  |   move.l 12(a0),d0
   12f1e:	|  |   move.l 12(sp),-(sp)
   12f22:	|  |   move.l d0,-(sp)
   12f24:	|  |   jsr 8d0 <put2bytes>
   12f2a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   12f2c:	|  |   movea.l (sp),a0
   12f2e:	|  |   move.l 16(a0),d0
   12f32:	|  |   move.l 12(sp),-(sp)
   12f36:	|  |   move.l d0,-(sp)
   12f38:	|  |   jsr 8d0 <put2bytes>
   12f3e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   12f40:	|  |   movea.l (sp),a0
   12f42:	|  |   move.l 20(a0),d0
   12f46:	|  |   move.l 12(sp),-(sp)
   12f4a:	|  |   move.l d0,-(sp)
   12f4c:	|  |   jsr 8d0 <put2bytes>
   12f52:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   12f54:	|  |   movea.l (sp),a0
   12f56:	|  |   move.l 24(a0),d0
   12f5a:	|  |   move.l 12(sp),-(sp)
   12f5e:	|  |   move.l d0,-(sp)
   12f60:	|  |   jsr 8d0 <put2bytes>
   12f66:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   12f68:	|  |   movea.l (sp),a0
   12f6a:	|  |   move.l 28(a0),d0
   12f6e:	|  |   move.l 12(sp),-(sp)
   12f72:	|  |   move.l d0,-(sp)
   12f74:	|  |   jsr b418 <saveObjectRef>
   12f7a:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   12f7c:	|  |   movea.l (sp),a0
   12f7e:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   12f82:	\--|-> tst.l (sp)
   12f84:	   \-- bne.w 12ede <saveRegions+0x36>
	}
}
   12f88:	       nop
   12f8a:	       nop
   12f8c:	       addq.l #8,sp
   12f8e:	       rts

00012f90 <showBoxes>:

void showBoxes () {
   12f90:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   12f92:	       move.l 194e4 <allScreenRegions>,(sp)

	while (huntRegion) {
   12f98:	/----- bra.w 13034 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   12f9c:	|  /-> movea.l (sp),a0
   12f9e:	|  |   move.l 12(a0),d0
   12fa2:	|  |   movea.l d0,a1
   12fa4:	|  |   movea.l (sp),a0
   12fa6:	|  |   move.l 4(a0),d0
   12faa:	|  |   move.l d0,d1
   12fac:	|  |   movea.l (sp),a0
   12fae:	|  |   move.l (a0),d0
   12fb0:	|  |   move.l a1,-(sp)
   12fb2:	|  |   move.l d1,-(sp)
   12fb4:	|  |   move.l d0,-(sp)
   12fb6:	|  |   jsr ad08 <drawVerticalLine>
   12fbc:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   12fc0:	|  |   movea.l (sp),a0
   12fc2:	|  |   move.l 12(a0),d0
   12fc6:	|  |   movea.l d0,a1
   12fc8:	|  |   movea.l (sp),a0
   12fca:	|  |   move.l 4(a0),d0
   12fce:	|  |   move.l d0,d1
   12fd0:	|  |   movea.l (sp),a0
   12fd2:	|  |   move.l 8(a0),d0
   12fd6:	|  |   move.l a1,-(sp)
   12fd8:	|  |   move.l d1,-(sp)
   12fda:	|  |   move.l d0,-(sp)
   12fdc:	|  |   jsr ad08 <drawVerticalLine>
   12fe2:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   12fe6:	|  |   movea.l (sp),a0
   12fe8:	|  |   move.l 8(a0),d0
   12fec:	|  |   movea.l d0,a1
   12fee:	|  |   movea.l (sp),a0
   12ff0:	|  |   move.l 4(a0),d0
   12ff4:	|  |   move.l d0,d1
   12ff6:	|  |   movea.l (sp),a0
   12ff8:	|  |   move.l (a0),d0
   12ffa:	|  |   move.l a1,-(sp)
   12ffc:	|  |   move.l d1,-(sp)
   12ffe:	|  |   move.l d0,-(sp)
   13000:	|  |   jsr ace2 <drawHorizontalLine>
   13006:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   1300a:	|  |   movea.l (sp),a0
   1300c:	|  |   move.l 8(a0),d0
   13010:	|  |   movea.l d0,a1
   13012:	|  |   movea.l (sp),a0
   13014:	|  |   move.l 12(a0),d0
   13018:	|  |   move.l d0,d1
   1301a:	|  |   movea.l (sp),a0
   1301c:	|  |   move.l (a0),d0
   1301e:	|  |   move.l a1,-(sp)
   13020:	|  |   move.l d1,-(sp)
   13022:	|  |   move.l d0,-(sp)
   13024:	|  |   jsr ace2 <drawHorizontalLine>
   1302a:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1302e:	|  |   movea.l (sp),a0
   13030:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   13034:	\--|-> tst.l (sp)
   13036:	   \-- bne.w 12f9c <showBoxes+0xc>
	}
   1303a:	       nop
   1303c:	       nop
   1303e:	       addq.l #4,sp
   13040:	       rts

00013042 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   13042:	       lea -32(sp),sp
   13046:	       move.l d3,-(sp)
   13048:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   1304a:	       move.l 60(sp),d0
   1304e:	       sub.l 52(sp),d0
   13052:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   13056:	       move.l 64(sp),d0
   1305a:	       sub.l 56(sp),d0
   1305e:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   13062:	       move.l 68(sp),d0
   13066:	       sub.l 52(sp),d0
   1306a:	       move.l 36(sp),-(sp)
   1306e:	       move.l d0,-(sp)
   13070:	       jsr 14a1c <__mulsi3>
   13076:	       addq.l #8,sp
   13078:	       move.l d0,d2
   1307a:	       move.l 72(sp),d0
   1307e:	       sub.l 56(sp),d0
   13082:	       move.l 32(sp),-(sp)
   13086:	       move.l d0,-(sp)
   13088:	       jsr 14a1c <__mulsi3>
   1308e:	       addq.l #8,sp
   13090:	       add.l d2,d0
   13092:	       move.l d0,-(sp)
   13094:	       jsr 1445a <__floatsidf>
   1309a:	       addq.l #4,sp
   1309c:	       move.l d0,16(sp)
   130a0:	       move.l d1,20(sp)
   130a4:	       move.l 16(sp),24(sp)
   130aa:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   130b0:	       move.l 36(sp),-(sp)
   130b4:	       move.l 40(sp),-(sp)
   130b8:	       jsr 14a1c <__mulsi3>
   130be:	       addq.l #8,sp
   130c0:	       move.l d0,d2
   130c2:	       move.l 32(sp),-(sp)
   130c6:	       move.l 36(sp),-(sp)
   130ca:	       jsr 14a1c <__mulsi3>
   130d0:	       addq.l #8,sp
   130d2:	       add.l d2,d0
   130d4:	       move.l d0,-(sp)
   130d6:	       jsr 1445a <__floatsidf>
   130dc:	       addq.l #4,sp
   130de:	       move.l d1,-(sp)
   130e0:	       move.l d0,-(sp)
   130e2:	       move.l 36(sp),-(sp)
   130e6:	       move.l 36(sp),-(sp)
   130ea:	       jsr 142e4 <__divdf3>
   130f0:	       lea 16(sp),sp
   130f4:	       move.l d0,8(sp)
   130f8:	       move.l d1,12(sp)
   130fc:	       move.l 8(sp),24(sp)
   13102:	       move.l 12(sp),28(sp)

	if (m < 0) {
   13108:	       clr.l -(sp)
   1310a:	       clr.l -(sp)
   1310c:	       move.l 36(sp),-(sp)
   13110:	       move.l 36(sp),-(sp)
   13114:	       jsr 14672 <__ltdf2>
   1311a:	       lea 16(sp),sp
   1311e:	       tst.l d0
   13120:	   /-- bge.s 13136 <closestPointOnLine+0xf4>
		*closestX = x1;
   13122:	   |   movea.l 44(sp),a0
   13126:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   1312a:	   |   movea.l 48(sp),a0
   1312e:	   |   move.l 56(sp),(a0)
   13132:	/--|-- bra.w 13218 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   13136:	|  \-> clr.l -(sp)
   13138:	|      move.l #1072693248,-(sp)
   1313e:	|      move.l 36(sp),-(sp)
   13142:	|      move.l 36(sp),-(sp)
   13146:	|      jsr 145b8 <__gtdf2>
   1314c:	|      lea 16(sp),sp
   13150:	|      tst.l d0
   13152:	|  /-- ble.s 13168 <closestPointOnLine+0x126>
		*closestX = x2;
   13154:	|  |   movea.l 44(sp),a0
   13158:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   1315c:	|  |   movea.l 48(sp),a0
   13160:	|  |   move.l 64(sp),(a0)
   13164:	+--|-- bra.w 13218 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   13168:	|  \-> move.l 52(sp),-(sp)
   1316c:	|      jsr 1445a <__floatsidf>
   13172:	|      addq.l #4,sp
   13174:	|      move.l d0,d2
   13176:	|      move.l d1,d3
   13178:	|      move.l 36(sp),-(sp)
   1317c:	|      jsr 1445a <__floatsidf>
   13182:	|      addq.l #4,sp
   13184:	|      move.l 28(sp),-(sp)
   13188:	|      move.l 28(sp),-(sp)
   1318c:	|      move.l d1,-(sp)
   1318e:	|      move.l d0,-(sp)
   13190:	|      jsr 144ea <__muldf3>
   13196:	|      lea 16(sp),sp
   1319a:	|      move.l d1,-(sp)
   1319c:	|      move.l d0,-(sp)
   1319e:	|      move.l d3,-(sp)
   131a0:	|      move.l d2,-(sp)
   131a2:	|      jsr 14282 <__adddf3>
   131a8:	|      lea 16(sp),sp
   131ac:	|      move.l d1,-(sp)
   131ae:	|      move.l d0,-(sp)
   131b0:	|      jsr 143f2 <__fixdfsi>
   131b6:	|      addq.l #8,sp
   131b8:	|      movea.l 44(sp),a0
   131bc:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   131be:	|      move.l 56(sp),-(sp)
   131c2:	|      jsr 1445a <__floatsidf>
   131c8:	|      addq.l #4,sp
   131ca:	|      move.l d0,d2
   131cc:	|      move.l d1,d3
   131ce:	|      move.l 32(sp),-(sp)
   131d2:	|      jsr 1445a <__floatsidf>
   131d8:	|      addq.l #4,sp
   131da:	|      move.l 28(sp),-(sp)
   131de:	|      move.l 28(sp),-(sp)
   131e2:	|      move.l d1,-(sp)
   131e4:	|      move.l d0,-(sp)
   131e6:	|      jsr 144ea <__muldf3>
   131ec:	|      lea 16(sp),sp
   131f0:	|      move.l d1,-(sp)
   131f2:	|      move.l d0,-(sp)
   131f4:	|      move.l d3,-(sp)
   131f6:	|      move.l d2,-(sp)
   131f8:	|      jsr 14282 <__adddf3>
   131fe:	|      lea 16(sp),sp
   13202:	|      move.l d1,-(sp)
   13204:	|      move.l d0,-(sp)
   13206:	|      jsr 143f2 <__fixdfsi>
   1320c:	|      addq.l #8,sp
   1320e:	|      movea.l 48(sp),a0
   13212:	|      move.l d0,(a0)
		return TRUE;
   13214:	|      moveq #1,d0
   13216:	|  /-- bra.s 1321a <closestPointOnLine+0x1d8>
	}
	return FALSE;
   13218:	\--|-> clr.w d0
}
   1321a:	   \-> move.l (sp)+,d2
   1321c:	       move.l (sp)+,d3
   1321e:	       lea 32(sp),sp
   13222:	       rts

00013224 <drawFloor>:

void drawFloor() {
   13224:	                lea -12(sp),sp
   13228:	                move.l d3,-(sp)
   1322a:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1322c:	                clr.l 16(sp)
   13230:	   /----------- bra.w 13444 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   13234:	/--|----------> movea.l 194ec <currentFloor>,a0
   1323a:	|  |            move.l 12(a0),d1
   1323e:	|  |            move.l 16(sp),d0
   13242:	|  |            lsl.l #3,d0
   13244:	|  |            movea.l d1,a0
   13246:	|  |            adda.l d0,a0
   13248:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1324c:	|  |            moveq #1,d0
   1324e:	|  |            cmp.l 8(sp),d0
   13252:	|  |  /-------- bge.w 13440 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   13256:	|  |  |         moveq #1,d0
   13258:	|  |  |         move.l d0,12(sp)
   1325c:	|  |  |     /-- bra.w 13356 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   13260:	|  |  |  /--|-> movea.l 194ec <currentFloor>,a0
   13266:	|  |  |  |  |   move.l 4(a0),d1
   1326a:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   13270:	|  |  |  |  |   movea.l 12(a0),a0
   13274:	|  |  |  |  |   move.l 16(sp),d0
   13278:	|  |  |  |  |   lsl.l #3,d0
   1327a:	|  |  |  |  |   adda.l d0,a0
   1327c:	|  |  |  |  |   movea.l 4(a0),a0
   13280:	|  |  |  |  |   move.l 12(sp),d0
   13284:	|  |  |  |  |   add.l d0,d0
   13286:	|  |  |  |  |   add.l d0,d0
   13288:	|  |  |  |  |   adda.l d0,a0
   1328a:	|  |  |  |  |   move.l (a0),d0
   1328c:	|  |  |  |  |   lsl.l #3,d0
   1328e:	|  |  |  |  |   movea.l d1,a0
   13290:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13292:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   13296:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   1329c:	|  |  |  |  |   move.l 4(a0),d1
   132a0:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   132a6:	|  |  |  |  |   movea.l 12(a0),a0
   132aa:	|  |  |  |  |   move.l 16(sp),d0
   132ae:	|  |  |  |  |   lsl.l #3,d0
   132b0:	|  |  |  |  |   adda.l d0,a0
   132b2:	|  |  |  |  |   movea.l 4(a0),a0
   132b6:	|  |  |  |  |   move.l 12(sp),d0
   132ba:	|  |  |  |  |   add.l d0,d0
   132bc:	|  |  |  |  |   add.l d0,d0
   132be:	|  |  |  |  |   adda.l d0,a0
   132c0:	|  |  |  |  |   move.l (a0),d0
   132c2:	|  |  |  |  |   lsl.l #3,d0
   132c4:	|  |  |  |  |   movea.l d1,a0
   132c6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   132c8:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   132ca:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   132d0:	|  |  |  |  |   move.l 4(a0),d1
   132d4:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   132da:	|  |  |  |  |   movea.l 12(a0),a0
   132de:	|  |  |  |  |   move.l 16(sp),d0
   132e2:	|  |  |  |  |   lsl.l #3,d0
   132e4:	|  |  |  |  |   adda.l d0,a0
   132e6:	|  |  |  |  |   movea.l 4(a0),a0
   132ea:	|  |  |  |  |   move.l 12(sp),d0
   132ee:	|  |  |  |  |   addi.l #1073741823,d0
   132f4:	|  |  |  |  |   add.l d0,d0
   132f6:	|  |  |  |  |   add.l d0,d0
   132f8:	|  |  |  |  |   adda.l d0,a0
   132fa:	|  |  |  |  |   move.l (a0),d0
   132fc:	|  |  |  |  |   lsl.l #3,d0
   132fe:	|  |  |  |  |   movea.l d1,a0
   13300:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13302:	|  |  |  |  |   move.l 4(a0),d1
   13306:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   1330c:	|  |  |  |  |   move.l 4(a0),d3
   13310:	|  |  |  |  |   movea.l 194ec <currentFloor>,a0
   13316:	|  |  |  |  |   movea.l 12(a0),a0
   1331a:	|  |  |  |  |   move.l 16(sp),d0
   1331e:	|  |  |  |  |   lsl.l #3,d0
   13320:	|  |  |  |  |   adda.l d0,a0
   13322:	|  |  |  |  |   movea.l 4(a0),a0
   13326:	|  |  |  |  |   move.l 12(sp),d0
   1332a:	|  |  |  |  |   addi.l #1073741823,d0
   13330:	|  |  |  |  |   add.l d0,d0
   13332:	|  |  |  |  |   add.l d0,d0
   13334:	|  |  |  |  |   adda.l d0,a0
   13336:	|  |  |  |  |   move.l (a0),d0
   13338:	|  |  |  |  |   lsl.l #3,d0
   1333a:	|  |  |  |  |   movea.l d3,a0
   1333c:	|  |  |  |  |   adda.l d0,a0
   1333e:	|  |  |  |  |   move.l (a0),d0
   13340:	|  |  |  |  |   move.l d2,-(sp)
   13342:	|  |  |  |  |   move.l a1,-(sp)
   13344:	|  |  |  |  |   move.l d1,-(sp)
   13346:	|  |  |  |  |   move.l d0,-(sp)
   13348:	|  |  |  |  |   jsr 2070 <drawLine>
   1334e:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   13352:	|  |  |  |  |   addq.l #1,12(sp)
   13356:	|  |  |  |  \-> move.l 12(sp),d0
   1335a:	|  |  |  |      cmp.l 8(sp),d0
   1335e:	|  |  |  \----- blt.w 13260 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   13362:	|  |  |         movea.l 194ec <currentFloor>,a0
   13368:	|  |  |         move.l 4(a0),d1
   1336c:	|  |  |         movea.l 194ec <currentFloor>,a0
   13372:	|  |  |         movea.l 12(a0),a0
   13376:	|  |  |         move.l 16(sp),d0
   1337a:	|  |  |         lsl.l #3,d0
   1337c:	|  |  |         adda.l d0,a0
   1337e:	|  |  |         movea.l 4(a0),a0
   13382:	|  |  |         move.l 8(sp),d0
   13386:	|  |  |         addi.l #1073741823,d0
   1338c:	|  |  |         add.l d0,d0
   1338e:	|  |  |         add.l d0,d0
   13390:	|  |  |         adda.l d0,a0
   13392:	|  |  |         move.l (a0),d0
   13394:	|  |  |         lsl.l #3,d0
   13396:	|  |  |         movea.l d1,a0
   13398:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1339a:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1339e:	|  |  |         movea.l 194ec <currentFloor>,a0
   133a4:	|  |  |         move.l 4(a0),d1
   133a8:	|  |  |         movea.l 194ec <currentFloor>,a0
   133ae:	|  |  |         movea.l 12(a0),a0
   133b2:	|  |  |         move.l 16(sp),d0
   133b6:	|  |  |         lsl.l #3,d0
   133b8:	|  |  |         adda.l d0,a0
   133ba:	|  |  |         movea.l 4(a0),a0
   133be:	|  |  |         move.l 8(sp),d0
   133c2:	|  |  |         addi.l #1073741823,d0
   133c8:	|  |  |         add.l d0,d0
   133ca:	|  |  |         add.l d0,d0
   133cc:	|  |  |         adda.l d0,a0
   133ce:	|  |  |         move.l (a0),d0
   133d0:	|  |  |         lsl.l #3,d0
   133d2:	|  |  |         movea.l d1,a0
   133d4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   133d6:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   133d8:	|  |  |         movea.l 194ec <currentFloor>,a0
   133de:	|  |  |         move.l 4(a0),d1
   133e2:	|  |  |         movea.l 194ec <currentFloor>,a0
   133e8:	|  |  |         movea.l 12(a0),a0
   133ec:	|  |  |         move.l 16(sp),d0
   133f0:	|  |  |         lsl.l #3,d0
   133f2:	|  |  |         adda.l d0,a0
   133f4:	|  |  |         movea.l 4(a0),a0
   133f8:	|  |  |         move.l (a0),d0
   133fa:	|  |  |         lsl.l #3,d0
   133fc:	|  |  |         movea.l d1,a0
   133fe:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13400:	|  |  |         move.l 4(a0),d1
   13404:	|  |  |         movea.l 194ec <currentFloor>,a0
   1340a:	|  |  |         move.l 4(a0),d3
   1340e:	|  |  |         movea.l 194ec <currentFloor>,a0
   13414:	|  |  |         movea.l 12(a0),a0
   13418:	|  |  |         move.l 16(sp),d0
   1341c:	|  |  |         lsl.l #3,d0
   1341e:	|  |  |         adda.l d0,a0
   13420:	|  |  |         movea.l 4(a0),a0
   13424:	|  |  |         move.l (a0),d0
   13426:	|  |  |         lsl.l #3,d0
   13428:	|  |  |         movea.l d3,a0
   1342a:	|  |  |         adda.l d0,a0
   1342c:	|  |  |         move.l (a0),d0
   1342e:	|  |  |         move.l d2,-(sp)
   13430:	|  |  |         move.l a1,-(sp)
   13432:	|  |  |         move.l d1,-(sp)
   13434:	|  |  |         move.l d0,-(sp)
   13436:	|  |  |         jsr 2070 <drawLine>
   1343c:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13440:	|  |  \-------> addq.l #1,16(sp)
   13444:	|  \----------> movea.l 194ec <currentFloor>,a0
   1344a:	|               move.l 8(a0),d0
   1344e:	|               cmp.l 16(sp),d0
   13452:	\-------------- bgt.w 13234 <drawFloor+0x10>
        }
    }
}
   13456:	                nop
   13458:	                nop
   1345a:	                move.l (sp)+,d2
   1345c:	                move.l (sp)+,d3
   1345e:	                lea 12(sp),sp
   13462:	                rts

00013464 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   13464:	                      lea -12(sp),sp
    int sharedVertices = 0;
   13468:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1346c:	                      clr.l 4(sp)
   13470:	   /----------------- bra.w 13502 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   13474:	/--|----------------> clr.l (sp)
   13476:	|  |     /----------- bra.s 134f2 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   13478:	|  |  /--|----------> movea.l 16(sp),a0
   1347c:	|  |  |  |            move.l 4(a0),d1
   13480:	|  |  |  |            move.l 4(sp),d0
   13484:	|  |  |  |            add.l d0,d0
   13486:	|  |  |  |            add.l d0,d0
   13488:	|  |  |  |            movea.l d1,a0
   1348a:	|  |  |  |            adda.l d0,a0
   1348c:	|  |  |  |            move.l (a0),d1
   1348e:	|  |  |  |            movea.l 20(sp),a0
   13492:	|  |  |  |            movea.l 4(a0),a0
   13496:	|  |  |  |            move.l (sp),d0
   13498:	|  |  |  |            add.l d0,d0
   1349a:	|  |  |  |            add.l d0,d0
   1349c:	|  |  |  |            adda.l d0,a0
   1349e:	|  |  |  |            move.l (a0),d0
   134a0:	|  |  |  |            cmp.l d1,d0
   134a2:	|  |  |  |  /-------- bne.s 134f0 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   134a4:	|  |  |  |  |         move.l 8(sp),d0
   134a8:	|  |  |  |  |         move.l d0,d1
   134aa:	|  |  |  |  |         addq.l #1,d1
   134ac:	|  |  |  |  |         move.l d1,8(sp)
   134b0:	|  |  |  |  |         tst.l d0
   134b2:	|  |  |  |  |     /-- beq.s 134d4 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   134b4:	|  |  |  |  |     |   movea.l 16(sp),a0
   134b8:	|  |  |  |  |     |   move.l 4(a0),d1
   134bc:	|  |  |  |  |     |   move.l 4(sp),d0
   134c0:	|  |  |  |  |     |   add.l d0,d0
   134c2:	|  |  |  |  |     |   add.l d0,d0
   134c4:	|  |  |  |  |     |   movea.l d1,a0
   134c6:	|  |  |  |  |     |   adda.l d0,a0
   134c8:	|  |  |  |  |     |   move.l (a0),d0
   134ca:	|  |  |  |  |     |   movea.l 28(sp),a0
   134ce:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   134d0:	|  |  |  |  |     |   moveq #1,d0
   134d2:	|  |  |  |  |  /--|-- bra.s 13512 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   134d4:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   134d8:	|  |  |  |  |  |      move.l 4(a0),d1
   134dc:	|  |  |  |  |  |      move.l 4(sp),d0
   134e0:	|  |  |  |  |  |      add.l d0,d0
   134e2:	|  |  |  |  |  |      add.l d0,d0
   134e4:	|  |  |  |  |  |      movea.l d1,a0
   134e6:	|  |  |  |  |  |      adda.l d0,a0
   134e8:	|  |  |  |  |  |      move.l (a0),d0
   134ea:	|  |  |  |  |  |      movea.l 24(sp),a0
   134ee:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   134f0:	|  |  |  |  \--|----> addq.l #1,(sp)
   134f2:	|  |  |  \-----|----> movea.l 20(sp),a0
   134f6:	|  |  |        |      move.l (a0),d0
   134f8:	|  |  |        |      cmp.l (sp),d0
   134fa:	|  |  \--------|----- bgt.w 13478 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   134fe:	|  |           |      addq.l #1,4(sp)
   13502:	|  \-----------|----> movea.l 16(sp),a0
   13506:	|              |      move.l (a0),d0
   13508:	|              |      cmp.l 4(sp),d0
   1350c:	\--------------|----- bgt.w 13474 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   13510:	               |      clr.w d0
}
   13512:	               \----> lea 12(sp),sp
   13516:	                      rts

00013518 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   13518:	movea.l 194ec <currentFloor>,a0
   1351e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   13522:	movea.l 194ec <currentFloor>,a0
   13528:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1352c:	movea.l 194ec <currentFloor>,a0
   13532:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   13536:	movea.l 194ec <currentFloor>,a0
   1353c:	clr.l 16(a0)
}
   13540:	nop
   13542:	rts

00013544 <inFloor>:

int inFloor (int x, int y) {
   13544:	          subq.l #8,sp
	int i, r = -1;
   13546:	          moveq #-1,d0
   13548:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1354a:	          clr.l 4(sp)
   1354e:	   /----- bra.s 13582 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   13550:	/--|----> movea.l 194ec <currentFloor>,a0
   13556:	|  |      move.l 12(a0),d1
   1355a:	|  |      move.l 4(sp),d0
   1355e:	|  |      lsl.l #3,d0
   13560:	|  |      add.l d1,d0
   13562:	|  |      move.l 16(sp),-(sp)
   13566:	|  |      move.l 16(sp),-(sp)
   1356a:	|  |      move.l d0,-(sp)
   1356c:	|  |      jsr 1374e <pointInFloorPolygon>
   13572:	|  |      lea 12(sp),sp
   13576:	|  |      tst.w d0
   13578:	|  |  /-- beq.s 1357e <inFloor+0x3a>
			r = i;
   1357a:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1357e:	|  |  \-> addq.l #1,4(sp)
   13582:	|  \----> movea.l 194ec <currentFloor>,a0
   13588:	|         move.l 8(a0),d0
   1358c:	|         cmp.l 4(sp),d0
   13590:	\-------- bgt.s 13550 <inFloor+0xc>

	return r;
   13592:	          move.l (sp),d0
}
   13594:	          addq.l #8,sp
   13596:	          rts

00013598 <initFloor>:

BOOL initFloor () {
   13598:	       lea -12(sp),sp
   1359c:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   1359e:	       moveq #20,d0
   135a0:	       move.l d0,12(sp)
   135a4:	       clr.l 8(sp)
   135a8:	       move.l 1938c <SysBase>,d0
   135ae:	       movea.l d0,a6
   135b0:	       move.l 12(sp),d0
   135b4:	       move.l 8(sp),d1
   135b8:	       jsr -684(a6)
   135bc:	       move.l d0,4(sp)
   135c0:	       move.l 4(sp),d0
   135c4:	       move.l d0,194ec <currentFloor>

    if(currentFloor == 0) {
   135ca:	       move.l 194ec <currentFloor>,d0
   135d0:	/----- bne.s 135e4 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   135d2:	|      pea 16af3 <custom.c.49191367+0x1dc7>
   135d8:	|      jsr 141e2 <KPrintF>
   135de:	|      addq.l #4,sp
        return FALSE;
   135e0:	|      clr.w d0
   135e2:	|  /-- bra.s 135ec <initFloor+0x54>
    }

	noFloor ();
   135e4:	\--|-> jsr 13518 <noFloor>
	return TRUE;
   135ea:	   |   moveq #1,d0
}
   135ec:	   \-> movea.l (sp)+,a6
   135ee:	       lea 12(sp),sp
   135f2:	       rts

000135f4 <killFloor>:

void killFloor () {
   135f4:	       lea -24(sp),sp
   135f8:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   135fa:	       clr.l 24(sp)
   135fe:	   /-- bra.s 13658 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   13600:	/--|-> movea.l 194ec <currentFloor>,a0
   13606:	|  |   move.l 12(a0),d1
   1360a:	|  |   move.l 24(sp),d0
   1360e:	|  |   lsl.l #3,d0
   13610:	|  |   movea.l d1,a0
   13612:	|  |   adda.l d0,a0
   13614:	|  |   move.l 4(a0),8(sp)
   1361a:	|  |   move.l 1938c <SysBase>,d0
   13620:	|  |   movea.l d0,a6
   13622:	|  |   movea.l 8(sp),a1
   13626:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1362a:	|  |   movea.l 194ec <currentFloor>,a0
   13630:	|  |   move.l 16(a0),d1
   13634:	|  |   move.l 24(sp),d0
   13638:	|  |   add.l d0,d0
   1363a:	|  |   add.l d0,d0
   1363c:	|  |   movea.l d1,a0
   1363e:	|  |   adda.l d0,a0
   13640:	|  |   move.l (a0),4(sp)
   13644:	|  |   move.l 1938c <SysBase>,d0
   1364a:	|  |   movea.l d0,a6
   1364c:	|  |   movea.l 4(sp),a1
   13650:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13654:	|  |   addq.l #1,24(sp)
   13658:	|  \-> movea.l 194ec <currentFloor>,a0
   1365e:	|      move.l 8(a0),d0
   13662:	|      cmp.l 24(sp),d0
   13666:	\----- bgt.s 13600 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   13668:	       movea.l 194ec <currentFloor>,a0
   1366e:	       move.l 12(a0),20(sp)
   13674:	       move.l 1938c <SysBase>,d0
   1367a:	       movea.l d0,a6
   1367c:	       movea.l 20(sp),a1
   13680:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   13684:	       movea.l 194ec <currentFloor>,a0
   1368a:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   1368e:	       movea.l 194ec <currentFloor>,a0
   13694:	       move.l 4(a0),16(sp)
   1369a:	       move.l 1938c <SysBase>,d0
   136a0:	       movea.l d0,a6
   136a2:	       movea.l 16(sp),a1
   136a6:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   136aa:	       movea.l 194ec <currentFloor>,a0
   136b0:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   136b4:	       movea.l 194ec <currentFloor>,a0
   136ba:	       move.l 16(a0),12(sp)
   136c0:	       move.l 1938c <SysBase>,d0
   136c6:	       movea.l d0,a6
   136c8:	       movea.l 12(sp),a1
   136cc:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   136d0:	       movea.l 194ec <currentFloor>,a0
   136d6:	       clr.l 16(a0)
}
   136da:	       nop
   136dc:	       movea.l (sp)+,a6
   136de:	       lea 24(sp),sp
   136e2:	       rts

000136e4 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   136e4:	                   lea -12(sp),sp
	int sharedVertices = 0;
   136e8:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   136ec:	                   clr.l 4(sp)
   136f0:	   /-------------- bra.s 1373c <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   136f2:	/--|-------------> clr.l (sp)
   136f4:	|  |     /-------- bra.s 13730 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   136f6:	|  |  /--|-------> move.l 20(sp),d1
   136fa:	|  |  |  |         move.l 4(sp),d0
   136fe:	|  |  |  |         add.l d0,d0
   13700:	|  |  |  |         add.l d0,d0
   13702:	|  |  |  |         movea.l d1,a0
   13704:	|  |  |  |         adda.l d0,a0
   13706:	|  |  |  |         move.l (a0),d1
   13708:	|  |  |  |         movea.l 28(sp),a0
   1370c:	|  |  |  |         move.l (sp),d0
   1370e:	|  |  |  |         add.l d0,d0
   13710:	|  |  |  |         add.l d0,d0
   13712:	|  |  |  |         adda.l d0,a0
   13714:	|  |  |  |         move.l (a0),d0
   13716:	|  |  |  |         cmp.l d1,d0
   13718:	|  |  |  |     /-- bne.s 1372e <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1371a:	|  |  |  |     |   move.l 8(sp),d0
   1371e:	|  |  |  |     |   move.l d0,d1
   13720:	|  |  |  |     |   addq.l #1,d1
   13722:	|  |  |  |     |   move.l d1,8(sp)
   13726:	|  |  |  |     |   tst.l d0
   13728:	|  |  |  |     +-- beq.s 1372e <polysShareSide+0x4a>
   1372a:	|  |  |  |     |   moveq #1,d0
   1372c:	|  |  |  |  /--|-- bra.s 13748 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   1372e:	|  |  |  |  |  \-> addq.l #1,(sp)
   13730:	|  |  |  \--|----> move.l 24(sp),d0
   13734:	|  |  |     |      cmp.l (sp),d0
   13736:	|  |  \-----|----- bgt.s 136f6 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   13738:	|  |        |      addq.l #1,4(sp)
   1373c:	|  \--------|----> move.l 16(sp),d0
   13740:	|           |      cmp.l 4(sp),d0
   13744:	\-----------|----- bgt.s 136f2 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   13746:	            |      clr.w d0
}
   13748:	            \----> lea 12(sp),sp
   1374c:	                   rts

0001374e <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1374e:	             lea -28(sp),sp
   13752:	             move.l d3,-(sp)
   13754:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   13756:	             clr.l 32(sp)
   1375a:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1375e:	             movea.l 40(sp),a0
   13762:	             move.l (a0),d0
   13764:	             move.l d0,d1
   13766:	             subq.l #1,d1
   13768:	             move.l d1,28(sp)
   1376c:	   /-------- bra.w 13966 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   13770:	/--|-------> movea.l 194ec <currentFloor>,a0
   13776:	|  |         move.l 4(a0),d1
   1377a:	|  |         movea.l 40(sp),a0
   1377e:	|  |         movea.l 4(a0),a0
   13782:	|  |         move.l 32(sp),d0
   13786:	|  |         add.l d0,d0
   13788:	|  |         add.l d0,d0
   1378a:	|  |         adda.l d0,a0
   1378c:	|  |         move.l (a0),d0
   1378e:	|  |         lsl.l #3,d0
   13790:	|  |         movea.l d1,a0
   13792:	|  |         adda.l d0,a0
   13794:	|  |         move.l (a0),d0
   13796:	|  |         move.l d0,-(sp)
   13798:	|  |         jsr 1449a <__floatsisf>
   1379e:	|  |         addq.l #4,sp
   137a0:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   137a4:	|  |         movea.l 194ec <currentFloor>,a0
   137aa:	|  |         move.l 4(a0),d1
   137ae:	|  |         movea.l 40(sp),a0
   137b2:	|  |         movea.l 4(a0),a0
   137b6:	|  |         move.l 32(sp),d0
   137ba:	|  |         add.l d0,d0
   137bc:	|  |         add.l d0,d0
   137be:	|  |         adda.l d0,a0
   137c0:	|  |         move.l (a0),d0
   137c2:	|  |         lsl.l #3,d0
   137c4:	|  |         movea.l d1,a0
   137c6:	|  |         adda.l d0,a0
   137c8:	|  |         move.l 4(a0),d0
   137cc:	|  |         move.l d0,-(sp)
   137ce:	|  |         jsr 1449a <__floatsisf>
   137d4:	|  |         addq.l #4,sp
   137d6:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   137da:	|  |         movea.l 194ec <currentFloor>,a0
   137e0:	|  |         move.l 4(a0),d1
   137e4:	|  |         movea.l 40(sp),a0
   137e8:	|  |         movea.l 4(a0),a0
   137ec:	|  |         move.l 28(sp),d0
   137f0:	|  |         add.l d0,d0
   137f2:	|  |         add.l d0,d0
   137f4:	|  |         adda.l d0,a0
   137f6:	|  |         move.l (a0),d0
   137f8:	|  |         lsl.l #3,d0
   137fa:	|  |         movea.l d1,a0
   137fc:	|  |         adda.l d0,a0
   137fe:	|  |         move.l (a0),d0
   13800:	|  |         move.l d0,-(sp)
   13802:	|  |         jsr 1449a <__floatsisf>
   13808:	|  |         addq.l #4,sp
   1380a:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   1380e:	|  |         movea.l 194ec <currentFloor>,a0
   13814:	|  |         move.l 4(a0),d1
   13818:	|  |         movea.l 40(sp),a0
   1381c:	|  |         movea.l 4(a0),a0
   13820:	|  |         move.l 28(sp),d0
   13824:	|  |         add.l d0,d0
   13826:	|  |         add.l d0,d0
   13828:	|  |         adda.l d0,a0
   1382a:	|  |         move.l (a0),d0
   1382c:	|  |         lsl.l #3,d0
   1382e:	|  |         movea.l d1,a0
   13830:	|  |         adda.l d0,a0
   13832:	|  |         move.l 4(a0),d0
   13836:	|  |         move.l d0,-(sp)
   13838:	|  |         jsr 1449a <__floatsisf>
   1383e:	|  |         addq.l #4,sp
   13840:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13844:	|  |         move.l 48(sp),-(sp)
   13848:	|  |         jsr 1449a <__floatsisf>
   1384e:	|  |         addq.l #4,sp
   13850:	|  |         move.l d0,-(sp)
   13852:	|  |         move.l 20(sp),-(sp)
   13856:	|  |         jsr 1463c <__lesf2>
   1385c:	|  |         addq.l #8,sp
   1385e:	|  |         tst.l d0
   13860:	|  |     /-- bgt.s 13880 <pointInFloorPolygon+0x132>
   13862:	|  |     |   move.l 48(sp),-(sp)
   13866:	|  |     |   jsr 1449a <__floatsisf>
   1386c:	|  |     |   addq.l #4,sp
   1386e:	|  |     |   move.l d0,-(sp)
   13870:	|  |     |   move.l 12(sp),-(sp)
   13874:	|  |     |   jsr 14606 <__gtsf2>
   1387a:	|  |     |   addq.l #8,sp
   1387c:	|  |     |   tst.l d0
   1387e:	|  |  /--|-- bgt.s 138c0 <pointInFloorPolygon+0x172>
   13880:	|  |  |  \-> move.l 48(sp),-(sp)
   13884:	|  |  |      jsr 1449a <__floatsisf>
   1388a:	|  |  |      addq.l #4,sp
   1388c:	|  |  |      move.l d0,-(sp)
   1388e:	|  |  |      move.l 12(sp),-(sp)
   13892:	|  |  |      jsr 1463c <__lesf2>
   13898:	|  |  |      addq.l #8,sp
   1389a:	|  |  |      tst.l d0
   1389c:	|  |  |  /-- bgt.w 13956 <pointInFloorPolygon+0x208>
   138a0:	|  |  |  |   move.l 48(sp),-(sp)
   138a4:	|  |  |  |   jsr 1449a <__floatsisf>
   138aa:	|  |  |  |   addq.l #4,sp
   138ac:	|  |  |  |   move.l d0,-(sp)
   138ae:	|  |  |  |   move.l 20(sp),-(sp)
   138b2:	|  |  |  |   jsr 14606 <__gtsf2>
   138b8:	|  |  |  |   addq.l #8,sp
   138ba:	|  |  |  |   tst.l d0
   138bc:	|  |  |  +-- ble.w 13956 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   138c0:	|  |  \--|-> move.l 44(sp),-(sp)
   138c4:	|  |     |   jsr 1449a <__floatsisf>
   138ca:	|  |     |   addq.l #4,sp
   138cc:	|  |     |   move.l d0,d3
   138ce:	|  |     |   move.l 20(sp),-(sp)
   138d2:	|  |     |   move.l 16(sp),-(sp)
   138d6:	|  |     |   jsr 1478e <__subsf3>
   138dc:	|  |     |   addq.l #8,sp
   138de:	|  |     |   move.l d0,d2
   138e0:	|  |     |   move.l 48(sp),-(sp)
   138e4:	|  |     |   jsr 1449a <__floatsisf>
   138ea:	|  |     |   addq.l #4,sp
   138ec:	|  |     |   move.l 16(sp),-(sp)
   138f0:	|  |     |   move.l d0,-(sp)
   138f2:	|  |     |   jsr 1478e <__subsf3>
   138f8:	|  |     |   addq.l #8,sp
   138fa:	|  |     |   move.l d0,-(sp)
   138fc:	|  |     |   move.l d2,-(sp)
   138fe:	|  |     |   jsr 1454c <__mulsf3>
   13904:	|  |     |   addq.l #8,sp
   13906:	|  |     |   move.l d0,d2
   13908:	|  |     |   move.l 16(sp),-(sp)
   1390c:	|  |     |   move.l 12(sp),-(sp)
   13910:	|  |     |   jsr 1478e <__subsf3>
   13916:	|  |     |   addq.l #8,sp
   13918:	|  |     |   move.l d0,-(sp)
   1391a:	|  |     |   move.l d2,-(sp)
   1391c:	|  |     |   jsr 14346 <__divsf3>
   13922:	|  |     |   addq.l #8,sp
   13924:	|  |     |   move.l 20(sp),-(sp)
   13928:	|  |     |   move.l d0,-(sp)
   1392a:	|  |     |   jsr 1424c <__addsf3>
   13930:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13932:	|  |     |   move.l d0,-(sp)
   13934:	|  |     |   move.l d3,-(sp)
   13936:	|  |     |   jsr 146c0 <__ltsf2>
   1393c:	|  |     |   addq.l #8,sp
   1393e:	|  |     |   tst.l d0
   13940:	|  |     +-- bge.s 13956 <pointInFloorPolygon+0x208>

			c = !c;
   13942:	|  |     |   tst.l 24(sp)
   13946:	|  |     |   seq d0
   13948:	|  |     |   neg.b d0
   1394a:	|  |     |   move.b d0,d0
   1394c:	|  |     |   andi.l #255,d0
   13952:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   13956:	|  |     \-> move.l 32(sp),d0
   1395a:	|  |         move.l d0,d1
   1395c:	|  |         addq.l #1,d1
   1395e:	|  |         move.l d1,32(sp)
   13962:	|  |         move.l d0,28(sp)
   13966:	|  \-------> movea.l 40(sp),a0
   1396a:	|            move.l (a0),d0
   1396c:	|            cmp.l 32(sp),d0
   13970:	\----------- bgt.w 13770 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   13974:	             tst.l 24(sp)
   13978:	             sne d0
   1397a:	             neg.b d0
   1397c:	             move.b d0,d0
   1397e:	             andi.w #255,d0
}
   13982:	             move.l (sp)+,d2
   13984:	             move.l (sp)+,d3
   13986:	             lea 28(sp),sp
   1398a:	             rts

0001398c <setFloor>:

BOOL setFloor (int fileNum) {
   1398c:	                               lea -132(sp),sp
   13990:	                               move.l a6,-(sp)
   13992:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   13994:	                               jsr 135f4 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1399a:	                               move.l 144(sp),-(sp)
   1399e:	                               jsr 4cac <openFileFromNum>
   139a4:	                               addq.l #4,sp
   139a6:	                               tst.l d0
   139a8:	                           /-- bne.s 139b0 <setFloor+0x24>
   139aa:	                           |   clr.w d0
   139ac:	/--------------------------|-- bra.w 140fc <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   139b0:	|                          \-> movea.l 194ec <currentFloor>,a0
   139b6:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   139ba:	|                              move.l 19374 <bigDataFile>,118(sp)
   139c2:	|                              move.l 19394 <DOSBase>,d0
   139c8:	|                              movea.l d0,a6
   139ca:	|                              move.l 118(sp),d1
   139ce:	|                              jsr -306(a6)
   139d2:	|                              move.l d0,114(sp)
   139d6:	|                              move.l 114(sp),d0
   139da:	|                              movea.l 194ec <currentFloor>,a0
   139e0:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   139e4:	|                              movea.l 194ec <currentFloor>,a0
   139ea:	|                              move.l 8(a0),d0
   139ee:	|                              lsl.l #3,d0
   139f0:	|                              move.l d0,110(sp)
   139f4:	|                              clr.l 106(sp)
   139f8:	|                              move.l 1938c <SysBase>,d0
   139fe:	|                              movea.l d0,a6
   13a00:	|                              move.l 110(sp),d0
   13a04:	|                              move.l 106(sp),d1
   13a08:	|                              jsr -684(a6)
   13a0c:	|                              move.l d0,102(sp)
   13a10:	|                              move.l 102(sp),d0
   13a14:	|                              movea.l 194ec <currentFloor>,a0
   13a1a:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   13a1e:	|                              movea.l 194ec <currentFloor>,a0
   13a24:	|                              move.l 12(a0),d0
   13a28:	|                          /-- bne.s 13a3e <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   13a2a:	|                          |   pea 16b17 <custom.c.49191367+0x1deb>
   13a30:	|                          |   jsr 141e2 <KPrintF>
   13a36:	|                          |   addq.l #4,sp
		return FALSE;
   13a38:	|                          |   clr.w d0
   13a3a:	+--------------------------|-- bra.w 140fc <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13a3e:	|                          \-> clr.l 136(sp)
   13a42:	|                    /-------- bra.w 13b5a <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   13a46:	|                 /--|-------> move.l 19374 <bigDataFile>,26(sp)
   13a4e:	|                 |  |         move.l 19394 <DOSBase>,d0
   13a54:	|                 |  |         movea.l d0,a6
   13a56:	|                 |  |         move.l 26(sp),d1
   13a5a:	|                 |  |         jsr -306(a6)
   13a5e:	|                 |  |         move.l d0,22(sp)
   13a62:	|                 |  |         move.l 22(sp),d1
   13a66:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13a6c:	|                 |  |         movea.l 12(a0),a0
   13a70:	|                 |  |         move.l 136(sp),d0
   13a74:	|                 |  |         lsl.l #3,d0
   13a76:	|                 |  |         adda.l d0,a0
   13a78:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   13a7a:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13a80:	|                 |  |         move.l 12(a0),d1
   13a84:	|                 |  |         move.l 136(sp),d0
   13a88:	|                 |  |         lsl.l #3,d0
   13a8a:	|                 |  |         movea.l d1,a0
   13a8c:	|                 |  |         adda.l d0,a0
   13a8e:	|                 |  |         move.l (a0),d0
   13a90:	|                 |  |         add.l d0,d0
   13a92:	|                 |  |         add.l d0,d0
   13a94:	|                 |  |         move.l d0,18(sp)
   13a98:	|                 |  |         clr.l 14(sp)
   13a9c:	|                 |  |         move.l 1938c <SysBase>,d0
   13aa2:	|                 |  |         movea.l d0,a6
   13aa4:	|                 |  |         move.l 18(sp),d0
   13aa8:	|                 |  |         move.l 14(sp),d1
   13aac:	|                 |  |         jsr -684(a6)
   13ab0:	|                 |  |         move.l d0,10(sp)
   13ab4:	|                 |  |         move.l 10(sp),d1
   13ab8:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13abe:	|                 |  |         movea.l 12(a0),a0
   13ac2:	|                 |  |         move.l 136(sp),d0
   13ac6:	|                 |  |         lsl.l #3,d0
   13ac8:	|                 |  |         adda.l d0,a0
   13aca:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   13ace:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13ad4:	|                 |  |         move.l 12(a0),d1
   13ad8:	|                 |  |         move.l 136(sp),d0
   13adc:	|                 |  |         lsl.l #3,d0
   13ade:	|                 |  |         movea.l d1,a0
   13ae0:	|                 |  |         adda.l d0,a0
   13ae2:	|                 |  |         move.l 4(a0),d0
   13ae6:	|                 |  |     /-- bne.s 13afc <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   13ae8:	|                 |  |     |   pea 16b17 <custom.c.49191367+0x1deb>
   13aee:	|                 |  |     |   jsr 141e2 <KPrintF>
   13af4:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   13af6:	|                 |  |     |   clr.w d0
   13af8:	+-----------------|--|-----|-- bra.w 140fc <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   13afc:	|                 |  |     \-> clr.l 132(sp)
   13b00:	|                 |  |     /-- bra.s 13b3a <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   13b02:	|                 |  |  /--|-> move.l 19374 <bigDataFile>,d1
   13b08:	|                 |  |  |  |   movea.l 194ec <currentFloor>,a0
   13b0e:	|                 |  |  |  |   movea.l 12(a0),a0
   13b12:	|                 |  |  |  |   move.l 136(sp),d0
   13b16:	|                 |  |  |  |   lsl.l #3,d0
   13b18:	|                 |  |  |  |   adda.l d0,a0
   13b1a:	|                 |  |  |  |   movea.l 4(a0),a0
   13b1e:	|                 |  |  |  |   move.l 132(sp),d0
   13b22:	|                 |  |  |  |   add.l d0,d0
   13b24:	|                 |  |  |  |   add.l d0,d0
   13b26:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   13b2a:	|                 |  |  |  |   move.l d1,-(sp)
   13b2c:	|                 |  |  |  |   jsr 6bc <get2bytes>
   13b32:	|                 |  |  |  |   addq.l #4,sp
   13b34:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   13b36:	|                 |  |  |  |   addq.l #1,132(sp)
   13b3a:	|                 |  |  |  \-> movea.l 194ec <currentFloor>,a0
   13b40:	|                 |  |  |      move.l 12(a0),d1
   13b44:	|                 |  |  |      move.l 136(sp),d0
   13b48:	|                 |  |  |      lsl.l #3,d0
   13b4a:	|                 |  |  |      movea.l d1,a0
   13b4c:	|                 |  |  |      adda.l d0,a0
   13b4e:	|                 |  |  |      move.l (a0),d0
   13b50:	|                 |  |  |      cmp.l 132(sp),d0
   13b54:	|                 |  |  \----- bgt.s 13b02 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13b56:	|                 |  |         addq.l #1,136(sp)
   13b5a:	|                 |  \-------> movea.l 194ec <currentFloor>,a0
   13b60:	|                 |            move.l 8(a0),d0
   13b64:	|                 |            cmp.l 136(sp),d0
   13b68:	|                 \----------- bgt.w 13a46 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   13b6c:	|                              move.l 19374 <bigDataFile>,d0
   13b72:	|                              move.l d0,-(sp)
   13b74:	|                              jsr 6bc <get2bytes>
   13b7a:	|                              addq.l #4,sp
   13b7c:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   13b80:	|                              move.l 136(sp),d0
   13b84:	|                              lsl.l #3,d0
   13b86:	|                              move.l d0,98(sp)
   13b8a:	|                              clr.l 94(sp)
   13b8e:	|                              move.l 1938c <SysBase>,d0
   13b94:	|                              movea.l d0,a6
   13b96:	|                              move.l 98(sp),d0
   13b9a:	|                              move.l 94(sp),d1
   13b9e:	|                              jsr -684(a6)
   13ba2:	|                              move.l d0,90(sp)
   13ba6:	|                              move.l 90(sp),d0
   13baa:	|                              movea.l 194ec <currentFloor>,a0
   13bb0:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   13bb4:	|                              movea.l 194ec <currentFloor>,a0
   13bba:	|                              move.l 4(a0),d0
   13bbe:	|                          /-- bne.s 13bd4 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   13bc0:	|                          |   pea 16b17 <custom.c.49191367+0x1deb>
   13bc6:	|                          |   jsr 141e2 <KPrintF>
   13bcc:	|                          |   addq.l #4,sp
		return FALSE;
   13bce:	|                          |   clr.w d0
   13bd0:	+--------------------------|-- bra.w 140fc <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   13bd4:	|                          \-> clr.l 132(sp)
   13bd8:	|                          /-- bra.s 13c2c <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   13bda:	|                       /--|-> move.l 19374 <bigDataFile>,d1
   13be0:	|                       |  |   movea.l 194ec <currentFloor>,a0
   13be6:	|                       |  |   movea.l 4(a0),a0
   13bea:	|                       |  |   move.l 132(sp),d0
   13bee:	|                       |  |   lsl.l #3,d0
   13bf0:	|                       |  |   lea (0,a0,d0.l),a2
   13bf4:	|                       |  |   move.l d1,-(sp)
   13bf6:	|                       |  |   jsr 6bc <get2bytes>
   13bfc:	|                       |  |   addq.l #4,sp
   13bfe:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   13c00:	|                       |  |   move.l 19374 <bigDataFile>,d1
   13c06:	|                       |  |   movea.l 194ec <currentFloor>,a0
   13c0c:	|                       |  |   movea.l 4(a0),a0
   13c10:	|                       |  |   move.l 132(sp),d0
   13c14:	|                       |  |   lsl.l #3,d0
   13c16:	|                       |  |   lea (0,a0,d0.l),a2
   13c1a:	|                       |  |   move.l d1,-(sp)
   13c1c:	|                       |  |   jsr 6bc <get2bytes>
   13c22:	|                       |  |   addq.l #4,sp
   13c24:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   13c28:	|                       |  |   addq.l #1,132(sp)
   13c2c:	|                       |  \-> move.l 132(sp),d0
   13c30:	|                       |      cmp.l 136(sp),d0
   13c34:	|                       \----- blt.s 13bda <setFloor+0x24e>
	}

	finishAccess ();
   13c36:	|                              jsr 4ba4 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   13c3c:	|                              movea.l 194ec <currentFloor>,a0
   13c42:	|                              move.l 8(a0),d0
   13c46:	|                              add.l d0,d0
   13c48:	|                              add.l d0,d0
   13c4a:	|                              move.l d0,86(sp)
   13c4e:	|                              clr.l 82(sp)
   13c52:	|                              move.l 1938c <SysBase>,d0
   13c58:	|                              movea.l d0,a6
   13c5a:	|                              move.l 86(sp),d0
   13c5e:	|                              move.l 82(sp),d1
   13c62:	|                              jsr -684(a6)
   13c66:	|                              move.l d0,78(sp)
   13c6a:	|                              move.l 78(sp),d0
   13c6e:	|                              movea.l 194ec <currentFloor>,a0
   13c74:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   13c78:	|                              movea.l 194ec <currentFloor>,a0
   13c7e:	|                              move.l 8(a0),d0
   13c82:	|                              add.l d0,d0
   13c84:	|                              add.l d0,d0
   13c86:	|                              move.l d0,74(sp)
   13c8a:	|                              clr.l 70(sp)
   13c8e:	|                              move.l 1938c <SysBase>,d0
   13c94:	|                              movea.l d0,a6
   13c96:	|                              move.l 74(sp),d0
   13c9a:	|                              move.l 70(sp),d1
   13c9e:	|                              jsr -684(a6)
   13ca2:	|                              move.l d0,66(sp)
   13ca6:	|                              move.l 66(sp),d0
   13caa:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   13cae:	|                              movea.l 194ec <currentFloor>,a0
   13cb4:	|                              move.l 16(a0),d0
   13cb8:	|                          /-- bne.s 13cce <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   13cba:	|                          |   pea 16b17 <custom.c.49191367+0x1deb>
   13cc0:	|                          |   jsr 141e2 <KPrintF>
   13cc6:	|                          |   addq.l #4,sp
		return FALSE;
   13cc8:	|                          |   clr.w d0
   13cca:	+--------------------------|-- bra.w 140fc <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13cce:	|                          \-> clr.l 136(sp)
   13cd2:	|                    /-------- bra.w 13df6 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   13cd6:	|                 /--|-------> movea.l 194ec <currentFloor>,a0
   13cdc:	|                 |  |         move.l 8(a0),d0
   13ce0:	|                 |  |         add.l d0,d0
   13ce2:	|                 |  |         add.l d0,d0
   13ce4:	|                 |  |         move.l d0,50(sp)
   13ce8:	|                 |  |         clr.l 46(sp)
   13cec:	|                 |  |         move.l 1938c <SysBase>,d0
   13cf2:	|                 |  |         movea.l d0,a6
   13cf4:	|                 |  |         move.l 50(sp),d0
   13cf8:	|                 |  |         move.l 46(sp),d1
   13cfc:	|                 |  |         jsr -684(a6)
   13d00:	|                 |  |         move.l d0,42(sp)
   13d04:	|                 |  |         move.l 42(sp),d0
   13d08:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13d0e:	|                 |  |         movea.l 16(a0),a0
   13d12:	|                 |  |         move.l 136(sp),d1
   13d16:	|                 |  |         add.l d1,d1
   13d18:	|                 |  |         add.l d1,d1
   13d1a:	|                 |  |         adda.l d1,a0
   13d1c:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   13d1e:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13d24:	|                 |  |         move.l 8(a0),d0
   13d28:	|                 |  |         add.l d0,d0
   13d2a:	|                 |  |         add.l d0,d0
   13d2c:	|                 |  |         move.l d0,38(sp)
   13d30:	|                 |  |         clr.l 34(sp)
   13d34:	|                 |  |         move.l 1938c <SysBase>,d0
   13d3a:	|                 |  |         movea.l d0,a6
   13d3c:	|                 |  |         move.l 38(sp),d0
   13d40:	|                 |  |         move.l 34(sp),d1
   13d44:	|                 |  |         jsr -684(a6)
   13d48:	|                 |  |         move.l d0,30(sp)
   13d4c:	|                 |  |         move.l 30(sp),d1
   13d50:	|                 |  |         move.l 136(sp),d0
   13d54:	|                 |  |         add.l d0,d0
   13d56:	|                 |  |         add.l d0,d0
   13d58:	|                 |  |         movea.l 62(sp),a0
   13d5c:	|                 |  |         adda.l d0,a0
   13d5e:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   13d60:	|                 |  |         movea.l 194ec <currentFloor>,a0
   13d66:	|                 |  |         move.l 16(a0),d1
   13d6a:	|                 |  |         move.l 136(sp),d0
   13d6e:	|                 |  |         add.l d0,d0
   13d70:	|                 |  |         add.l d0,d0
   13d72:	|                 |  |         movea.l d1,a0
   13d74:	|                 |  |         adda.l d0,a0
   13d76:	|                 |  |         move.l (a0),d0
   13d78:	|                 |  |     /-- bne.s 13d8e <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   13d7a:	|                 |  |     |   pea 16b17 <custom.c.49191367+0x1deb>
   13d80:	|                 |  |     |   jsr 141e2 <KPrintF>
   13d86:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   13d88:	|                 |  |     |   clr.w d0
   13d8a:	+-----------------|--|-----|-- bra.w 140fc <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13d8e:	|                 |  |     \-> clr.l 132(sp)
   13d92:	|                 |  |     /-- bra.s 13de2 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   13d94:	|                 |  |  /--|-> movea.l 194ec <currentFloor>,a0
   13d9a:	|                 |  |  |  |   move.l 16(a0),d1
   13d9e:	|                 |  |  |  |   move.l 136(sp),d0
   13da2:	|                 |  |  |  |   add.l d0,d0
   13da4:	|                 |  |  |  |   add.l d0,d0
   13da6:	|                 |  |  |  |   movea.l d1,a0
   13da8:	|                 |  |  |  |   adda.l d0,a0
   13daa:	|                 |  |  |  |   move.l (a0),d1
   13dac:	|                 |  |  |  |   move.l 132(sp),d0
   13db0:	|                 |  |  |  |   add.l d0,d0
   13db2:	|                 |  |  |  |   add.l d0,d0
   13db4:	|                 |  |  |  |   movea.l d1,a0
   13db6:	|                 |  |  |  |   adda.l d0,a0
   13db8:	|                 |  |  |  |   moveq #-1,d1
   13dba:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   13dbc:	|                 |  |  |  |   move.l 136(sp),d0
   13dc0:	|                 |  |  |  |   add.l d0,d0
   13dc2:	|                 |  |  |  |   add.l d0,d0
   13dc4:	|                 |  |  |  |   movea.l 62(sp),a0
   13dc8:	|                 |  |  |  |   adda.l d0,a0
   13dca:	|                 |  |  |  |   move.l (a0),d1
   13dcc:	|                 |  |  |  |   move.l 132(sp),d0
   13dd0:	|                 |  |  |  |   add.l d0,d0
   13dd2:	|                 |  |  |  |   add.l d0,d0
   13dd4:	|                 |  |  |  |   movea.l d1,a0
   13dd6:	|                 |  |  |  |   adda.l d0,a0
   13dd8:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13dde:	|                 |  |  |  |   addq.l #1,132(sp)
   13de2:	|                 |  |  |  \-> movea.l 194ec <currentFloor>,a0
   13de8:	|                 |  |  |      move.l 8(a0),d0
   13dec:	|                 |  |  |      cmp.l 132(sp),d0
   13df0:	|                 |  |  \----- bgt.s 13d94 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13df2:	|                 |  |         addq.l #1,136(sp)
   13df6:	|                 |  \-------> movea.l 194ec <currentFloor>,a0
   13dfc:	|                 |            move.l 8(a0),d0
   13e00:	|                 |            cmp.l 136(sp),d0
   13e04:	|                 \----------- bgt.w 13cd6 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13e08:	|                              clr.l 136(sp)
   13e0c:	|              /-------------- bra.w 13f12 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13e10:	|           /--|-------------> clr.l 132(sp)
   13e14:	|           |  |     /-------- bra.w 13efc <setFloor+0x570>
			if (i != j) {
   13e18:	|           |  |  /--|-------> move.l 136(sp),d0
   13e1c:	|           |  |  |  |         cmp.l 132(sp),d0
   13e20:	|           |  |  |  |     /-- beq.w 13eb2 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   13e24:	|           |  |  |  |     |   movea.l 194ec <currentFloor>,a0
   13e2a:	|           |  |  |  |     |   move.l 12(a0),d1
   13e2e:	|           |  |  |  |     |   move.l 132(sp),d0
   13e32:	|           |  |  |  |     |   lsl.l #3,d0
   13e34:	|           |  |  |  |     |   movea.l d1,a1
   13e36:	|           |  |  |  |     |   adda.l d0,a1
   13e38:	|           |  |  |  |     |   movea.l 194ec <currentFloor>,a0
   13e3e:	|           |  |  |  |     |   move.l 12(a0),d1
   13e42:	|           |  |  |  |     |   move.l 136(sp),d0
   13e46:	|           |  |  |  |     |   lsl.l #3,d0
   13e48:	|           |  |  |  |     |   movea.l d1,a0
   13e4a:	|           |  |  |  |     |   adda.l d0,a0
   13e4c:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   13e50:	|           |  |  |  |     |   move.l (a1),-(sp)
   13e52:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   13e56:	|           |  |  |  |     |   move.l (a0),-(sp)
   13e58:	|           |  |  |  |     |   jsr 136e4 <polysShareSide>
   13e5e:	|           |  |  |  |     |   lea 16(sp),sp
   13e62:	|           |  |  |  |     |   tst.w d0
   13e64:	|           |  |  |  |  /--|-- beq.w 13ef8 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   13e68:	|           |  |  |  |  |  |   movea.l 194ec <currentFloor>,a0
   13e6e:	|           |  |  |  |  |  |   move.l 16(a0),d1
   13e72:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13e76:	|           |  |  |  |  |  |   add.l d0,d0
   13e78:	|           |  |  |  |  |  |   add.l d0,d0
   13e7a:	|           |  |  |  |  |  |   movea.l d1,a0
   13e7c:	|           |  |  |  |  |  |   adda.l d0,a0
   13e7e:	|           |  |  |  |  |  |   move.l (a0),d1
   13e80:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13e84:	|           |  |  |  |  |  |   add.l d0,d0
   13e86:	|           |  |  |  |  |  |   add.l d0,d0
   13e88:	|           |  |  |  |  |  |   movea.l d1,a0
   13e8a:	|           |  |  |  |  |  |   adda.l d0,a0
   13e8c:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   13e90:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13e94:	|           |  |  |  |  |  |   add.l d0,d0
   13e96:	|           |  |  |  |  |  |   add.l d0,d0
   13e98:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   13e9c:	|           |  |  |  |  |  |   adda.l d0,a0
   13e9e:	|           |  |  |  |  |  |   move.l (a0),d1
   13ea0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13ea4:	|           |  |  |  |  |  |   add.l d0,d0
   13ea6:	|           |  |  |  |  |  |   add.l d0,d0
   13ea8:	|           |  |  |  |  |  |   movea.l d1,a0
   13eaa:	|           |  |  |  |  |  |   adda.l d0,a0
   13eac:	|           |  |  |  |  |  |   moveq #1,d1
   13eae:	|           |  |  |  |  |  |   move.l d1,(a0)
   13eb0:	|           |  |  |  |  +--|-- bra.s 13ef8 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   13eb2:	|           |  |  |  |  |  \-> movea.l 194ec <currentFloor>,a0
   13eb8:	|           |  |  |  |  |      move.l 16(a0),d1
   13ebc:	|           |  |  |  |  |      move.l 136(sp),d0
   13ec0:	|           |  |  |  |  |      add.l d0,d0
   13ec2:	|           |  |  |  |  |      add.l d0,d0
   13ec4:	|           |  |  |  |  |      movea.l d1,a0
   13ec6:	|           |  |  |  |  |      adda.l d0,a0
   13ec8:	|           |  |  |  |  |      move.l (a0),d1
   13eca:	|           |  |  |  |  |      move.l 132(sp),d0
   13ece:	|           |  |  |  |  |      add.l d0,d0
   13ed0:	|           |  |  |  |  |      add.l d0,d0
   13ed2:	|           |  |  |  |  |      movea.l d1,a0
   13ed4:	|           |  |  |  |  |      adda.l d0,a0
   13ed6:	|           |  |  |  |  |      moveq #-2,d0
   13ed8:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   13eda:	|           |  |  |  |  |      move.l 136(sp),d0
   13ede:	|           |  |  |  |  |      add.l d0,d0
   13ee0:	|           |  |  |  |  |      add.l d0,d0
   13ee2:	|           |  |  |  |  |      movea.l 62(sp),a0
   13ee6:	|           |  |  |  |  |      adda.l d0,a0
   13ee8:	|           |  |  |  |  |      move.l (a0),d1
   13eea:	|           |  |  |  |  |      move.l 132(sp),d0
   13eee:	|           |  |  |  |  |      add.l d0,d0
   13ef0:	|           |  |  |  |  |      add.l d0,d0
   13ef2:	|           |  |  |  |  |      movea.l d1,a0
   13ef4:	|           |  |  |  |  |      adda.l d0,a0
   13ef6:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13ef8:	|           |  |  |  |  \----> addq.l #1,132(sp)
   13efc:	|           |  |  |  \-------> movea.l 194ec <currentFloor>,a0
   13f02:	|           |  |  |            move.l 8(a0),d0
   13f06:	|           |  |  |            cmp.l 132(sp),d0
   13f0a:	|           |  |  \----------- bgt.w 13e18 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13f0e:	|           |  |               addq.l #1,136(sp)
   13f12:	|           |  \-------------> movea.l 194ec <currentFloor>,a0
   13f18:	|           |                  move.l 8(a0),d0
   13f1c:	|           |                  cmp.l 136(sp),d0
   13f20:	|           \----------------- bgt.w 13e10 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   13f24:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   13f28:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   13f2c:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13f30:	|  |                           clr.l 136(sp)
   13f34:	|  |     /-------------------- bra.w 1408a <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13f38:	|  |  /--|-------------------> clr.l 132(sp)
   13f3c:	|  |  |  |     /-------------- bra.w 14074 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   13f40:	|  |  |  |  /--|-------------> movea.l 194ec <currentFloor>,a0
   13f46:	|  |  |  |  |  |               move.l 16(a0),d1
   13f4a:	|  |  |  |  |  |               move.l 136(sp),d0
   13f4e:	|  |  |  |  |  |               add.l d0,d0
   13f50:	|  |  |  |  |  |               add.l d0,d0
   13f52:	|  |  |  |  |  |               movea.l d1,a0
   13f54:	|  |  |  |  |  |               adda.l d0,a0
   13f56:	|  |  |  |  |  |               move.l (a0),d1
   13f58:	|  |  |  |  |  |               move.l 132(sp),d0
   13f5c:	|  |  |  |  |  |               add.l d0,d0
   13f5e:	|  |  |  |  |  |               add.l d0,d0
   13f60:	|  |  |  |  |  |               movea.l d1,a0
   13f62:	|  |  |  |  |  |               adda.l d0,a0
   13f64:	|  |  |  |  |  |               move.l (a0),d0
   13f66:	|  |  |  |  |  |               moveq #-1,d1
   13f68:	|  |  |  |  |  |               cmp.l d0,d1
   13f6a:	|  |  |  |  |  |  /----------- bne.w 14070 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   13f6e:	|  |  |  |  |  |  |            clr.l 122(sp)
   13f72:	|  |  |  |  |  |  |     /----- bra.w 1405e <setFloor+0x6d2>
						if (d != i && d != j) {
   13f76:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   13f7a:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   13f7e:	|  |  |  |  |  |  |  |  |  /-- beq.w 1405a <setFloor+0x6ce>
   13f82:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   13f86:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   13f8a:	|  |  |  |  |  |  |  |  |  +-- beq.w 1405a <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   13f8e:	|  |  |  |  |  |  |  |  |  |   movea.l 194ec <currentFloor>,a0
   13f94:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13f98:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13f9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13f9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fa0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13fa2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13fa4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13fa6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13faa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13fb0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13fb2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   13fb4:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   13fb8:	|  |  |  |  |  |  |  |  |  +-- bne.w 1405a <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   13fbc:	|  |  |  |  |  |  |  |  |  |   movea.l 194ec <currentFloor>,a0
   13fc2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13fc6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13fca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fcc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fce:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13fd0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13fd2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13fd4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13fd8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fda:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fdc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13fde:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13fe0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   13fe2:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1405a <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   13fe4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13fe8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13fec:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13ff0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13ff2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13ff4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13ff8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13ffa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13ffc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13ffe:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14000:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   14002:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   14006:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1405a <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   14008:	|  |  |  |  |  |  |  |  |  |   movea.l 194ec <currentFloor>,a0
   1400e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   14012:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14016:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14018:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1401a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1401c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1401e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14020:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14024:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14026:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14028:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1402a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1402c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   14030:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14034:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14036:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14038:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1403c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1403e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14040:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14044:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14046:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14048:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1404a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1404c:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   14050:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   14052:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   14054:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1405a:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   1405e:	|  |  |  |  |  |  |  |  \----> movea.l 194ec <currentFloor>,a0
   14064:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   14068:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1406c:	|  |  |  |  |  |  |  \-------- bgt.w 13f76 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14070:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   14074:	|  |  |  |  |  \-------------> movea.l 194ec <currentFloor>,a0
   1407a:	|  |  |  |  |                  move.l 8(a0),d0
   1407e:	|  |  |  |  |                  cmp.l 132(sp),d0
   14082:	|  |  |  |  \----------------- bgt.w 13f40 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14086:	|  |  |  |                     addq.l #1,136(sp)
   1408a:	|  |  |  \-------------------> movea.l 194ec <currentFloor>,a0
   14090:	|  |  |                        move.l 8(a0),d0
   14094:	|  |  |                        cmp.l 136(sp),d0
   14098:	|  |  \----------------------- bgt.w 13f38 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1409c:	|  |                           tst.w 130(sp)
   140a0:	|  \-------------------------- bne.w 13f28 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   140a4:	|                              clr.l 136(sp)
   140a8:	|                          /-- bra.s 140d0 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   140aa:	|                       /--|-> move.l 136(sp),d0
   140ae:	|                       |  |   add.l d0,d0
   140b0:	|                       |  |   add.l d0,d0
   140b2:	|                       |  |   movea.l 62(sp),a0
   140b6:	|                       |  |   adda.l d0,a0
   140b8:	|                       |  |   move.l (a0),54(sp)
   140bc:	|                       |  |   move.l 1938c <SysBase>,d0
   140c2:	|                       |  |   movea.l d0,a6
   140c4:	|                       |  |   movea.l 54(sp),a1
   140c8:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   140cc:	|                       |  |   addq.l #1,136(sp)
   140d0:	|                       |  \-> movea.l 194ec <currentFloor>,a0
   140d6:	|                       |      move.l 8(a0),d0
   140da:	|                       |      cmp.l 136(sp),d0
   140de:	|                       \----- bgt.s 140aa <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   140e0:	|                              move.l 62(sp),58(sp)
   140e6:	|                              move.l 1938c <SysBase>,d0
   140ec:	|                              movea.l d0,a6
   140ee:	|                              movea.l 58(sp),a1
   140f2:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   140f6:	|                              clr.l 62(sp)

	return TRUE;
   140fa:	|                              moveq #1,d0
}
   140fc:	\----------------------------> movea.l (sp)+,a2
   140fe:	                               movea.l (sp)+,a6
   14100:	                               lea 132(sp),sp
   14104:	                               rts

00014106 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   14106:	jsr 135f4 <killFloor>
	noFloor ();
   1410c:	jsr 13518 <noFloor>
   14112:	nop
   14114:	rts

00014116 <WaitVbl>:
void WaitVbl() {
   14116:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14118:	   /-> movea.l #14675972,a0
   1411e:	   |   move.l (a0),d0
   14120:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   14122:	   |   move.l (sp),d0
   14124:	   |   andi.l #130816,d0
   1412a:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1412c:	   |   move.l (sp),d0
   1412e:	   |   cmpi.l #76800,d0
   14134:	   \-- beq.s 14118 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14136:	/----> movea.l #14675972,a0
   1413c:	|      move.l (a0),d0
   1413e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   14142:	|      move.l 4(sp),d0
   14146:	|      andi.l #130816,d0
   1414c:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   14150:	|      move.l 4(sp),d0
   14154:	|      cmpi.l #76800,d0
   1415a:	|  /-- beq.s 1415e <WaitVbl+0x48>
	while (1) {
   1415c:	\--|-- bra.s 14136 <WaitVbl+0x20>
			break;
   1415e:	   \-> nop
}
   14160:	       nop
   14162:	       addq.l #8,sp
   14164:	       rts

00014166 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   14166:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   14168:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1416c:	   /-- bra.s 1417e <memset+0x18>
		*ptr++ = val;
   1416e:	/--|-> move.l (sp),d0
   14170:	|  |   move.l d0,d1
   14172:	|  |   addq.l #1,d1
   14174:	|  |   move.l d1,(sp)
   14176:	|  |   move.l 12(sp),d1
   1417a:	|  |   movea.l d0,a0
   1417c:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1417e:	|  \-> move.l 16(sp),d0
   14182:	|      move.l d0,d1
   14184:	|      subq.l #1,d1
   14186:	|      move.l d1,16(sp)
   1418a:	|      tst.l d0
   1418c:	\----- bne.s 1416e <memset+0x8>
	return dest;
   1418e:	       move.l 8(sp),d0
}
   14192:	       addq.l #4,sp
   14194:	       rts

00014196 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   14196:	       subq.l #8,sp
   14198:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1419a:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   141a0:	       move.l 20(sp),4(sp)
	while(len--)
   141a6:	   /-- bra.s 141c8 <memcpy+0x32>
		*d++ = *s++;
   141a8:	/--|-> move.l 4(sp),d1
   141ac:	|  |   move.l d1,d0
   141ae:	|  |   addq.l #1,d0
   141b0:	|  |   move.l d0,4(sp)
   141b4:	|  |   move.l 8(sp),d0
   141b8:	|  |   move.l d0,d2
   141ba:	|  |   addq.l #1,d2
   141bc:	|  |   move.l d2,8(sp)
   141c0:	|  |   movea.l d1,a0
   141c2:	|  |   move.b (a0),d1
   141c4:	|  |   movea.l d0,a0
   141c6:	|  |   move.b d1,(a0)
	while(len--)
   141c8:	|  \-> move.l 24(sp),d0
   141cc:	|      move.l d0,d1
   141ce:	|      subq.l #1,d1
   141d0:	|      move.l d1,24(sp)
   141d4:	|      tst.l d0
   141d6:	\----- bne.s 141a8 <memcpy+0x12>
	return dest;
   141d8:	       move.l 16(sp),d0
}
   141dc:	       move.l (sp)+,d2
   141de:	       addq.l #8,sp
   141e0:	       rts

000141e2 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   141e2:	       lea -128(sp),sp
   141e6:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   141ea:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xeccfbd>,d0
   141f0:	       cmpi.w #20153,d0
   141f4:	   /-- beq.s 14218 <KPrintF+0x36>
   141f6:	   |   cmpi.w #-24562,d0
   141fa:	   +-- beq.s 14218 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   141fc:	   |   movea.l 1938c <SysBase>,a6
   14202:	   |   movea.l 144(sp),a0
   14206:	   |   lea 148(sp),a1
   1420a:	   |   lea 14b24 <KPutCharX>,a2
   14210:	   |   suba.l a3,a3
   14212:	   |   jsr -522(a6)
}
   14216:	/--|-- bra.s 14242 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   14218:	|  \-> movea.l 1938c <SysBase>,a6
   1421e:	|      movea.l 144(sp),a0
   14222:	|      lea 148(sp),a1
   14226:	|      lea 14b32 <PutChar>,a2
   1422c:	|      lea 12(sp),a3
   14230:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   14234:	|      move.l a3,-(sp)
   14236:	|      pea 56 <_start+0x56>
   1423a:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xeccfbd>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   14240:	|      addq.l #8,sp
}
   14242:	\----> movem.l (sp)+,a2-a3/a6
   14246:	       lea 128(sp),sp
   1424a:	       rts

0001424c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1424c:	lea -12(sp),sp
   14250:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   14252:	move.l 20(sp),12(sp)
   14258:	move.l 24(sp),8(sp)
   1425e:	move.l 1939c <MathIeeeSingBasBase>,d0
   14264:	movea.l d0,a6
   14266:	move.l 12(sp),d0
   1426a:	move.l 8(sp),d1
   1426e:	jsr -66(a6)
   14272:	move.l d0,4(sp)
   14276:	move.l 4(sp),d0
}
   1427a:	movea.l (sp)+,a6
   1427c:	lea 12(sp),sp
   14280:	rts

00014282 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   14282:	lea -32(sp),sp
   14286:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1428a:	move.l 48(sp),36(sp)
   14290:	move.l 52(sp),40(sp)
   14296:	move.l 56(sp),28(sp)
   1429c:	move.l 60(sp),32(sp)
   142a2:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   142a8:	movea.l d0,a6
   142aa:	move.l 36(sp),d0
   142ae:	move.l 40(sp),d1
   142b2:	move.l 28(sp),d2
   142b6:	move.l 32(sp),d3
   142ba:	jsr -66(a6)
   142be:	move.l d0,12(sp)
   142c2:	move.l d1,16(sp)
   142c6:	move.l 12(sp),20(sp)
   142cc:	move.l 16(sp),24(sp)
   142d2:	move.l 20(sp),d0
   142d6:	move.l 24(sp),d1
}
   142da:	movem.l (sp)+,d2-d3/a6
   142de:	lea 32(sp),sp
   142e2:	rts

000142e4 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   142e4:	lea -32(sp),sp
   142e8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   142ec:	move.l 48(sp),36(sp)
   142f2:	move.l 52(sp),40(sp)
   142f8:	move.l 56(sp),28(sp)
   142fe:	move.l 60(sp),32(sp)
   14304:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   1430a:	movea.l d0,a6
   1430c:	move.l 36(sp),d0
   14310:	move.l 40(sp),d1
   14314:	move.l 28(sp),d2
   14318:	move.l 32(sp),d3
   1431c:	jsr -84(a6)
   14320:	move.l d0,12(sp)
   14324:	move.l d1,16(sp)
   14328:	move.l 12(sp),20(sp)
   1432e:	move.l 16(sp),24(sp)
   14334:	move.l 20(sp),d0
   14338:	move.l 24(sp),d1
}
   1433c:	movem.l (sp)+,d2-d3/a6
   14340:	lea 32(sp),sp
   14344:	rts

00014346 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   14346:	lea -12(sp),sp
   1434a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1434c:	move.l 20(sp),12(sp)
   14352:	move.l 24(sp),8(sp)
   14358:	move.l 1939c <MathIeeeSingBasBase>,d0
   1435e:	movea.l d0,a6
   14360:	move.l 12(sp),d0
   14364:	move.l 8(sp),d1
   14368:	jsr -84(a6)
   1436c:	move.l d0,4(sp)
   14370:	move.l 4(sp),d0
}
   14374:	movea.l (sp)+,a6
   14376:	lea 12(sp),sp
   1437a:	rts

0001437c <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1437c:	lea -12(sp),sp
   14380:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14382:	move.l 20(sp),12(sp)
   14388:	move.l 24(sp),8(sp)
   1438e:	move.l 1939c <MathIeeeSingBasBase>,d0
   14394:	movea.l d0,a6
   14396:	move.l 12(sp),d0
   1439a:	move.l 8(sp),d1
   1439e:	jsr -42(a6)
   143a2:	move.l d0,4(sp)
   143a6:	move.l 4(sp),d0
}
   143aa:	movea.l (sp)+,a6
   143ac:	lea 12(sp),sp
   143b0:	rts

000143b2 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   143b2:	lea -20(sp),sp
   143b6:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   143b8:	move.l 28(sp),20(sp)
   143be:	move.l 193a8 <MathIeeeDoubTransBase>,d0
   143c4:	movea.l d0,a6
   143c6:	move.l 20(sp),d0
   143ca:	jsr -108(a6)
   143ce:	move.l d0,4(sp)
   143d2:	move.l d1,8(sp)
   143d6:	move.l 4(sp),12(sp)
   143dc:	move.l 8(sp),16(sp)
   143e2:	move.l 12(sp),d0
   143e6:	move.l 16(sp),d1
}
   143ea:	movea.l (sp)+,a6
   143ec:	lea 20(sp),sp
   143f0:	rts

000143f2 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   143f2:	lea -12(sp),sp
   143f6:	move.l a6,-(sp)
	return IEEEDPFix(value);
   143f8:	move.l 20(sp),8(sp)
   143fe:	move.l 24(sp),12(sp)
   14404:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   1440a:	movea.l d0,a6
   1440c:	move.l 8(sp),d0
   14410:	move.l 12(sp),d1
   14414:	jsr -30(a6)
   14418:	move.l d0,4(sp)
   1441c:	move.l 4(sp),d0
   14420:	move.l d0,-(sp)
   14422:	jsr 1445a <__floatsidf>
   14428:	addq.l #4,sp
}
   1442a:	movea.l (sp)+,a6
   1442c:	lea 12(sp),sp
   14430:	rts

00014432 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   14432:	subq.l #8,sp
   14434:	move.l a6,-(sp)
	return IEEESPFix(value);
   14436:	move.l 16(sp),8(sp)
   1443c:	move.l 1939c <MathIeeeSingBasBase>,d0
   14442:	movea.l d0,a6
   14444:	move.l 8(sp),d0
   14448:	jsr -30(a6)
   1444c:	move.l d0,4(sp)
   14450:	move.l 4(sp),d0
}
   14454:	movea.l (sp)+,a6
   14456:	addq.l #8,sp
   14458:	rts

0001445a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1445a:	lea -20(sp),sp
   1445e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   14460:	move.l 28(sp),20(sp)
   14466:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   1446c:	movea.l d0,a6
   1446e:	move.l 20(sp),d0
   14472:	jsr -36(a6)
   14476:	move.l d0,4(sp)
   1447a:	move.l d1,8(sp)
   1447e:	move.l 4(sp),12(sp)
   14484:	move.l 8(sp),16(sp)
   1448a:	move.l 12(sp),d0
   1448e:	move.l 16(sp),d1
}
   14492:	movea.l (sp)+,a6
   14494:	lea 20(sp),sp
   14498:	rts

0001449a <__floatsisf>:

FLOAT __floatsisf(int i) {
   1449a:	subq.l #8,sp
   1449c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1449e:	move.l 16(sp),8(sp)
   144a4:	move.l 1939c <MathIeeeSingBasBase>,d0
   144aa:	movea.l d0,a6
   144ac:	move.l 8(sp),d0
   144b0:	jsr -36(a6)
   144b4:	move.l d0,4(sp)
   144b8:	move.l 4(sp),d0
}
   144bc:	movea.l (sp)+,a6
   144be:	addq.l #8,sp
   144c0:	rts

000144c2 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   144c2:	subq.l #8,sp
   144c4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   144c6:	move.l 16(sp),8(sp)
   144cc:	move.l 1939c <MathIeeeSingBasBase>,d0
   144d2:	movea.l d0,a6
   144d4:	move.l 8(sp),d0
   144d8:	jsr -36(a6)
   144dc:	move.l d0,4(sp)
   144e0:	move.l 4(sp),d0
}
   144e4:	movea.l (sp)+,a6
   144e6:	addq.l #8,sp
   144e8:	rts

000144ea <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   144ea:	lea -32(sp),sp
   144ee:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   144f2:	move.l 48(sp),36(sp)
   144f8:	move.l 52(sp),40(sp)
   144fe:	move.l 56(sp),28(sp)
   14504:	move.l 60(sp),32(sp)
   1450a:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   14510:	movea.l d0,a6
   14512:	move.l 36(sp),d0
   14516:	move.l 40(sp),d1
   1451a:	move.l 28(sp),d2
   1451e:	move.l 32(sp),d3
   14522:	jsr -78(a6)
   14526:	move.l d0,12(sp)
   1452a:	move.l d1,16(sp)
   1452e:	move.l 12(sp),20(sp)
   14534:	move.l 16(sp),24(sp)
   1453a:	move.l 20(sp),d0
   1453e:	move.l 24(sp),d1
}
   14542:	movem.l (sp)+,d2-d3/a6
   14546:	lea 32(sp),sp
   1454a:	rts

0001454c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1454c:	lea -12(sp),sp
   14550:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   14552:	move.l 20(sp),12(sp)
   14558:	move.l 24(sp),8(sp)
   1455e:	move.l 1939c <MathIeeeSingBasBase>,d0
   14564:	movea.l d0,a6
   14566:	move.l 12(sp),d0
   1456a:	move.l 8(sp),d1
   1456e:	jsr -78(a6)
   14572:	move.l d0,4(sp)
   14576:	move.l 4(sp),d0
}
   1457a:	movea.l (sp)+,a6
   1457c:	lea 12(sp),sp
   14580:	rts

00014582 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   14582:	lea -12(sp),sp
   14586:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14588:	move.l 20(sp),12(sp)
   1458e:	move.l 24(sp),8(sp)
   14594:	move.l 1939c <MathIeeeSingBasBase>,d0
   1459a:	movea.l d0,a6
   1459c:	move.l 12(sp),d0
   145a0:	move.l 8(sp),d1
   145a4:	jsr -42(a6)
   145a8:	move.l d0,4(sp)
   145ac:	move.l 4(sp),d0
}
   145b0:	movea.l (sp)+,a6
   145b2:	lea 12(sp),sp
   145b6:	rts

000145b8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   145b8:	lea -20(sp),sp
   145bc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   145c0:	move.l 36(sp),24(sp)
   145c6:	move.l 40(sp),28(sp)
   145cc:	move.l 44(sp),16(sp)
   145d2:	move.l 48(sp),20(sp)
   145d8:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   145de:	movea.l d0,a6
   145e0:	move.l 24(sp),d0
   145e4:	move.l 28(sp),d1
   145e8:	move.l 16(sp),d2
   145ec:	move.l 20(sp),d3
   145f0:	jsr -42(a6)
   145f4:	move.l d0,12(sp)
   145f8:	move.l 12(sp),d0
}
   145fc:	movem.l (sp)+,d2-d3/a6
   14600:	lea 20(sp),sp
   14604:	rts

00014606 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   14606:	lea -12(sp),sp
   1460a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1460c:	move.l 20(sp),12(sp)
   14612:	move.l 24(sp),8(sp)
   14618:	move.l 1939c <MathIeeeSingBasBase>,d0
   1461e:	movea.l d0,a6
   14620:	move.l 12(sp),d0
   14624:	move.l 8(sp),d1
   14628:	jsr -42(a6)
   1462c:	move.l d0,4(sp)
   14630:	move.l 4(sp),d0
}
   14634:	movea.l (sp)+,a6
   14636:	lea 12(sp),sp
   1463a:	rts

0001463c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1463c:	lea -12(sp),sp
   14640:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14642:	move.l 20(sp),12(sp)
   14648:	move.l 24(sp),8(sp)
   1464e:	move.l 1939c <MathIeeeSingBasBase>,d0
   14654:	movea.l d0,a6
   14656:	move.l 12(sp),d0
   1465a:	move.l 8(sp),d1
   1465e:	jsr -42(a6)
   14662:	move.l d0,4(sp)
   14666:	move.l 4(sp),d0
}
   1466a:	movea.l (sp)+,a6
   1466c:	lea 12(sp),sp
   14670:	rts

00014672 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   14672:	lea -20(sp),sp
   14676:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1467a:	move.l 36(sp),24(sp)
   14680:	move.l 40(sp),28(sp)
   14686:	move.l 44(sp),16(sp)
   1468c:	move.l 48(sp),20(sp)
   14692:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   14698:	movea.l d0,a6
   1469a:	move.l 24(sp),d0
   1469e:	move.l 28(sp),d1
   146a2:	move.l 16(sp),d2
   146a6:	move.l 20(sp),d3
   146aa:	jsr -42(a6)
   146ae:	move.l d0,12(sp)
   146b2:	move.l 12(sp),d0
}
   146b6:	movem.l (sp)+,d2-d3/a6
   146ba:	lea 20(sp),sp
   146be:	rts

000146c0 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   146c0:	lea -12(sp),sp
   146c4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   146c6:	move.l 20(sp),12(sp)
   146cc:	move.l 24(sp),8(sp)
   146d2:	move.l 1939c <MathIeeeSingBasBase>,d0
   146d8:	movea.l d0,a6
   146da:	move.l 12(sp),d0
   146de:	move.l 8(sp),d1
   146e2:	jsr -42(a6)
   146e6:	move.l d0,4(sp)
   146ea:	move.l 4(sp),d0
}
   146ee:	movea.l (sp)+,a6
   146f0:	lea 12(sp),sp
   146f4:	rts

000146f6 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   146f6:	lea -12(sp),sp
   146fa:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   146fc:	move.l 20(sp),12(sp)
   14702:	move.l 24(sp),8(sp)
   14708:	move.l 1939c <MathIeeeSingBasBase>,d0
   1470e:	movea.l d0,a6
   14710:	move.l 12(sp),d0
   14714:	move.l 8(sp),d1
   14718:	jsr -42(a6)
   1471c:	move.l d0,4(sp)
   14720:	move.l 4(sp),d0
}
   14724:	movea.l (sp)+,a6
   14726:	lea 12(sp),sp
   1472a:	rts

0001472c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1472c:	lea -32(sp),sp
   14730:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   14734:	move.l 48(sp),36(sp)
   1473a:	move.l 52(sp),40(sp)
   14740:	move.l 56(sp),28(sp)
   14746:	move.l 60(sp),32(sp)
   1474c:	move.l 193a4 <MathIeeeDoubBasBase>,d0
   14752:	movea.l d0,a6
   14754:	move.l 36(sp),d0
   14758:	move.l 40(sp),d1
   1475c:	move.l 28(sp),d2
   14760:	move.l 32(sp),d3
   14764:	jsr -72(a6)
   14768:	move.l d0,12(sp)
   1476c:	move.l d1,16(sp)
   14770:	move.l 12(sp),20(sp)
   14776:	move.l 16(sp),24(sp)
   1477c:	move.l 20(sp),d0
   14780:	move.l 24(sp),d1
}
   14784:	movem.l (sp)+,d2-d3/a6
   14788:	lea 32(sp),sp
   1478c:	rts

0001478e <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1478e:	lea -12(sp),sp
   14792:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   14794:	move.l 20(sp),12(sp)
   1479a:	move.l 24(sp),8(sp)
   147a0:	move.l 1939c <MathIeeeSingBasBase>,d0
   147a6:	movea.l d0,a6
   147a8:	move.l 12(sp),d0
   147ac:	move.l 8(sp),d1
   147b0:	jsr -72(a6)
   147b4:	move.l d0,4(sp)
   147b8:	move.l 4(sp),d0
}
   147bc:	movea.l (sp)+,a6
   147be:	lea 12(sp),sp
   147c2:	rts

000147c4 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   147c4:	lea -12(sp),sp
   147c8:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   147ca:	move.l 20(sp),8(sp)
   147d0:	move.l 24(sp),12(sp)
   147d6:	move.l 193a8 <MathIeeeDoubTransBase>,d0
   147dc:	movea.l d0,a6
   147de:	move.l 8(sp),d0
   147e2:	move.l 12(sp),d1
   147e6:	jsr -102(a6)
   147ea:	move.l d0,4(sp)
   147ee:	move.l 4(sp),d0
}
   147f2:	movea.l (sp)+,a6
   147f4:	lea 12(sp),sp
   147f8:	rts

000147fa <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   147fa:	subq.l #8,sp
   147fc:	move.l a6,-(sp)
	return IEEESPFix(a);
   147fe:	move.l 16(sp),8(sp)
   14804:	move.l 1939c <MathIeeeSingBasBase>,d0
   1480a:	movea.l d0,a6
   1480c:	move.l 8(sp),d0
   14810:	jsr -30(a6)
   14814:	move.l d0,4(sp)
   14818:	move.l 4(sp),d0
}
   1481c:	movea.l (sp)+,a6
   1481e:	addq.l #8,sp
   14820:	rts

00014822 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   14822:	       lea -24(sp),sp
   14826:	       move.l a6,-(sp)
    if (x > 0) {
   14828:	       clr.l -(sp)
   1482a:	       move.l 40(sp),-(sp)
   1482e:	       jsr 14606 <__gtsf2>
   14834:	       addq.l #8,sp
   14836:	       tst.l d0
   14838:	   /-- ble.s 1486a <atan2f+0x48>
        return IEEESPAtan(y / x);
   1483a:	   |   move.l 36(sp),-(sp)
   1483e:	   |   move.l 36(sp),-(sp)
   14842:	   |   jsr 14346 <__divsf3>
   14848:	   |   addq.l #8,sp
   1484a:	   |   move.l d0,8(sp)
   1484e:	   |   move.l 193a0 <MathIeeeSingTransBase>,d0
   14854:	   |   movea.l d0,a6
   14856:	   |   move.l 8(sp),d0
   1485a:	   |   jsr -30(a6)
   1485e:	   |   move.l d0,4(sp)
   14862:	   |   move.l 4(sp),d0
   14866:	/--|-- bra.w 149ca <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1486a:	|  \-> clr.l -(sp)
   1486c:	|      move.l 40(sp),-(sp)
   14870:	|      jsr 146c0 <__ltsf2>
   14876:	|      addq.l #8,sp
   14878:	|      tst.l d0
   1487a:	|  /-- bge.s 148ee <atan2f+0xcc>
   1487c:	|  |   clr.l -(sp)
   1487e:	|  |   move.l 36(sp),-(sp)
   14882:	|  |   jsr 14582 <__gesf2>
   14888:	|  |   addq.l #8,sp
   1488a:	|  |   tst.l d0
   1488c:	|  +-- blt.s 148ee <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1488e:	|  |   move.l 36(sp),-(sp)
   14892:	|  |   move.l 36(sp),-(sp)
   14896:	|  |   jsr 14346 <__divsf3>
   1489c:	|  |   addq.l #8,sp
   1489e:	|  |   move.l d0,24(sp)
   148a2:	|  |   move.l 193a0 <MathIeeeSingTransBase>,d0
   148a8:	|  |   movea.l d0,a6
   148aa:	|  |   move.l 24(sp),d0
   148ae:	|  |   jsr -30(a6)
   148b2:	|  |   move.l d0,20(sp)
   148b6:	|  |   move.l 20(sp),d0
   148ba:	|  |   move.l d0,-(sp)
   148bc:	|  |   jsr 143b2 <__extendsfdf2>
   148c2:	|  |   addq.l #4,sp
   148c4:	|  |   move.l #1413754136,-(sp)
   148ca:	|  |   move.l #1074340347,-(sp)
   148d0:	|  |   move.l d1,-(sp)
   148d2:	|  |   move.l d0,-(sp)
   148d4:	|  |   jsr 14282 <__adddf3>
   148da:	|  |   lea 16(sp),sp
   148de:	|  |   move.l d1,-(sp)
   148e0:	|  |   move.l d0,-(sp)
   148e2:	|  |   jsr 147c4 <__truncdfsf2>
   148e8:	|  |   addq.l #8,sp
   148ea:	+--|-- bra.w 149ca <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   148ee:	|  \-> clr.l -(sp)
   148f0:	|      move.l 40(sp),-(sp)
   148f4:	|      jsr 146c0 <__ltsf2>
   148fa:	|      addq.l #8,sp
   148fc:	|      tst.l d0
   148fe:	|  /-- bge.s 14970 <atan2f+0x14e>
   14900:	|  |   clr.l -(sp)
   14902:	|  |   move.l 36(sp),-(sp)
   14906:	|  |   jsr 146c0 <__ltsf2>
   1490c:	|  |   addq.l #8,sp
   1490e:	|  |   tst.l d0
   14910:	|  +-- bge.s 14970 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   14912:	|  |   move.l 36(sp),-(sp)
   14916:	|  |   move.l 36(sp),-(sp)
   1491a:	|  |   jsr 14346 <__divsf3>
   14920:	|  |   addq.l #8,sp
   14922:	|  |   move.l d0,16(sp)
   14926:	|  |   move.l 193a0 <MathIeeeSingTransBase>,d0
   1492c:	|  |   movea.l d0,a6
   1492e:	|  |   move.l 16(sp),d0
   14932:	|  |   jsr -30(a6)
   14936:	|  |   move.l d0,12(sp)
   1493a:	|  |   move.l 12(sp),d0
   1493e:	|  |   move.l d0,-(sp)
   14940:	|  |   jsr 143b2 <__extendsfdf2>
   14946:	|  |   addq.l #4,sp
   14948:	|  |   move.l #1413754136,-(sp)
   1494e:	|  |   move.l #1074340347,-(sp)
   14954:	|  |   move.l d1,-(sp)
   14956:	|  |   move.l d0,-(sp)
   14958:	|  |   jsr 1472c <__subdf3>
   1495e:	|  |   lea 16(sp),sp
   14962:	|  |   move.l d1,-(sp)
   14964:	|  |   move.l d0,-(sp)
   14966:	|  |   jsr 147c4 <__truncdfsf2>
   1496c:	|  |   addq.l #8,sp
   1496e:	+--|-- bra.s 149ca <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   14970:	|  \-> clr.l -(sp)
   14972:	|      move.l 40(sp),-(sp)
   14976:	|      jsr 1437c <__eqsf2>
   1497c:	|      addq.l #8,sp
   1497e:	|      tst.l d0
   14980:	|  /-- bne.s 1499c <atan2f+0x17a>
   14982:	|  |   clr.l -(sp)
   14984:	|  |   move.l 36(sp),-(sp)
   14988:	|  |   jsr 14606 <__gtsf2>
   1498e:	|  |   addq.l #8,sp
   14990:	|  |   tst.l d0
   14992:	|  +-- ble.s 1499c <atan2f+0x17a>
        return PI / 2;
   14994:	|  |   move.l #1070141403,d0
   1499a:	+--|-- bra.s 149ca <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1499c:	|  \-> clr.l -(sp)
   1499e:	|      move.l 40(sp),-(sp)
   149a2:	|      jsr 1437c <__eqsf2>
   149a8:	|      addq.l #8,sp
   149aa:	|      tst.l d0
   149ac:	|  /-- bne.s 149c8 <atan2f+0x1a6>
   149ae:	|  |   clr.l -(sp)
   149b0:	|  |   move.l 36(sp),-(sp)
   149b4:	|  |   jsr 146c0 <__ltsf2>
   149ba:	|  |   addq.l #8,sp
   149bc:	|  |   tst.l d0
   149be:	|  +-- bge.s 149c8 <atan2f+0x1a6>
        return -PI / 2;
   149c0:	|  |   move.l #-1077342245,d0
   149c6:	+--|-- bra.s 149ca <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   149c8:	|  \-> moveq #0,d0
    }
}
   149ca:	\----> movea.l (sp)+,a6
   149cc:	       lea 24(sp),sp
   149d0:	       rts

000149d2 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   149d2:	lea -24(sp),sp
   149d6:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   149d8:	move.l 32(sp),20(sp)
   149de:	move.l 36(sp),24(sp)
   149e4:	move.l 193a8 <MathIeeeDoubTransBase>,d0
   149ea:	movea.l d0,a6
   149ec:	move.l 20(sp),d0
   149f0:	move.l 24(sp),d1
   149f4:	jsr -96(a6)
   149f8:	move.l d0,4(sp)
   149fc:	move.l d1,8(sp)
   14a00:	move.l 4(sp),12(sp)
   14a06:	move.l 8(sp),16(sp)
   14a0c:	move.l 12(sp),d0
   14a10:	move.l 16(sp),d1
}
   14a14:	movea.l (sp)+,a6
   14a16:	lea 24(sp),sp
   14a1a:	rts

00014a1c <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   14a1c:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   14a20:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   14a24:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   14a28:	mulu.w 8(sp),d1
	addw	d1, d0
   14a2c:	add.w d1,d0
	swap	d0
   14a2e:	swap d0
	clrw	d0
   14a30:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   14a32:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   14a36:	mulu.w 10(sp),d1
	addl	d1, d0
   14a3a:	add.l d1,d0
	rts
   14a3c:	rts

00014a3e <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   14a3e:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   14a40:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   14a44:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   14a48:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   14a4e:	   /-- bcc.s 14a66 <__udivsi3+0x28>
	movel	d0, d2
   14a50:	   |   move.l d0,d2
	clrw	d2
   14a52:	   |   clr.w d2
	swap	d2
   14a54:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   14a56:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   14a58:	   |   move.w d2,d0
	swap	d0
   14a5a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   14a5c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   14a60:	   |   divu.w d1,d2
	movew	d2, d0
   14a62:	   |   move.w d2,d0
	jra	6f
   14a64:	/--|-- bra.s 14a96 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   14a66:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   14a68:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   14a6a:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   14a6c:	|  |   cmpi.l #65536,d1
	jcc	4b
   14a72:	|  \-- bcc.s 14a68 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   14a74:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   14a76:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   14a7c:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   14a7e:	|      mulu.w d0,d1
	swap	d2
   14a80:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   14a82:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   14a84:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   14a86:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   14a88:	|  /-- bne.s 14a94 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   14a8a:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   14a8c:	|  +-- bcs.s 14a94 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   14a8e:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   14a92:	+--|-- bls.s 14a96 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   14a94:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   14a96:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   14a98:	       rts

00014a9a <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   14a9a:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   14a9c:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   14a9e:	    move.l 12(sp),d1
	jpl	1f
   14aa2:	/-- bpl.s 14aa8 <__divsi3+0xe>
	negl	d1
   14aa4:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   14aa6:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   14aa8:	\-> move.l 8(sp),d0
	jpl	2f
   14aac:	/-- bpl.s 14ab2 <__divsi3+0x18>
	negl	d0
   14aae:	|   neg.l d0
	negb	d2
   14ab0:	|   neg.b d2

2:	movel	d1, sp@-
   14ab2:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14ab4:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   14ab6:	    jsr 14a3e <__udivsi3>
	addql	#8, sp
   14abc:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   14abe:	    tst.b d2
	jpl	3f
   14ac0:	/-- bpl.s 14ac4 <__divsi3+0x2a>
	negl	d0
   14ac2:	|   neg.l d0

3:	movel	sp@+, d2
   14ac4:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   14ac6:	    rts

00014ac8 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14ac8:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14acc:	move.l 4(sp),d0
	movel	d1, sp@-
   14ad0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14ad2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   14ad4:	jsr 14a9a <__divsi3>
	addql	#8, sp
   14ada:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14adc:	move.l 8(sp),d1
	movel	d1, sp@-
   14ae0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14ae2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   14ae4:	jsr 14a1c <__mulsi3>
	addql	#8, sp
   14aea:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14aec:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14af0:	sub.l d0,d1
	movel	d1, d0
   14af2:	move.l d1,d0
	rts
   14af4:	rts

00014af6 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14af6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14afa:	move.l 4(sp),d0
	movel	d1, sp@-
   14afe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14b00:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   14b02:	jsr 14a3e <__udivsi3>
	addql	#8, sp
   14b08:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14b0a:	move.l 8(sp),d1
	movel	d1, sp@-
   14b0e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   14b10:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   14b12:	jsr 14a1c <__mulsi3>
	addql	#8, sp
   14b18:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14b1a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14b1e:	sub.l d0,d1
	movel	d1, d0
   14b20:	move.l d1,d0
	rts
   14b22:	rts

00014b24 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   14b24:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   14b26:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   14b2a:	jsr -516(a6)
    move.l (sp)+, a6
   14b2e:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   14b30:	rts

00014b32 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   14b32:	move.b d0,(a3)+
	rts
   14b34:	rts
