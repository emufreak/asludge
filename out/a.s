
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #108081,d0
       8:	       subi.l #108081,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a631 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #108081,d0
      40:	       subi.l #108081,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a631 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 63fe <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #108081,d0
      7e:	       subi.l #108081,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a631 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12aa4 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1add0 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12abc <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a632 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12aa4 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1add0 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a632 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12aa4 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1add0 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1625c <PutChar+0x4>
     35c:	|  |              |   jsr 15784 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1add8 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1add8 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1add8 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1add8 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1add8 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1add8 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1add8 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 16286 <PutChar+0x2e>
     834:	|   jsr 15784 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1add8 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 162a2 <PutChar+0x4a>
     8a6:	|   jsr 15784 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1add8 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1add8 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1add8 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1add8 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1add8 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1add8 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1add8 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1add8 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1add0 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1add8 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12aa4 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1add8 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 1add0 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 1add0 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #90826,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 1add0 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 162d7 <PutChar+0x7f>
     cea:	   |   jsr 15784 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 16142 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 1621c <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 162f4 <PutChar+0x9c>
     d66:	|      jsr 15784 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 1add0 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 1add0 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 1add0 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     dba:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     dbe:	    movea.l 1acdc <mouseCursorAnim>,a0
     dc4:	    move.l (a0),d0
     dc6:	/-- beq.w ec6 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     dca:	|   movea.l 1acdc <mouseCursorAnim>,a0
     dd0:	|   movea.l (a0),a0
     dd2:	|   movea.l 16(a0),a1
     dd6:	|   movea.l 1acdc <mouseCursorAnim>,a0
     ddc:	|   movea.l 4(a0),a0
     de0:	|   move.l (a0),d0
     de2:	|   move.l d0,d1
     de4:	|   move.l d1,d0
     de6:	|   lsl.l #3,d0
     de8:	|   sub.l d1,d0
     dea:	|   add.l d0,d0
     dec:	|   add.l d0,d0
     dee:	|   lea (0,a1,d0.l),a0
     df2:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     df6:	|   movea.l 1acdc <mouseCursorAnim>,a0
     dfc:	|   movea.l (a0),a0
     dfe:	|   move.l 16(a0),d2
     e02:	|   movea.l 1acdc <mouseCursorAnim>,a0
     e08:	|   movea.l 4(a0),a0
     e0c:	|   move.l (a0),d0
     e0e:	|   move.l d0,d1
     e10:	|   move.l d1,d0
     e12:	|   lsl.l #3,d0
     e14:	|   sub.l d1,d0
     e16:	|   add.l d0,d0
     e18:	|   add.l d0,d0
     e1a:	|   movea.l d2,a0
     e1c:	|   adda.l d0,a0
     e1e:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     e22:	|   move.l d0,d0
     e24:	|   moveq #0,d3
     e26:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     e28:	|   move.l 1ad90 <input+0xe>,d0
     e2e:	|   move.l d0,d2
     e30:	|   movea.l 1acdc <mouseCursorAnim>,a0
     e36:	|   movea.l (a0),a0
     e38:	|   move.l 16(a0),d4
     e3c:	|   movea.l 1acdc <mouseCursorAnim>,a0
     e42:	|   movea.l 4(a0),a0
     e46:	|   move.l (a0),d0
     e48:	|   move.l d0,d1
     e4a:	|   move.l d1,d0
     e4c:	|   lsl.l #3,d0
     e4e:	|   sub.l d1,d0
     e50:	|   add.l d0,d0
     e52:	|   add.l d0,d0
     e54:	|   movea.l d4,a0
     e56:	|   adda.l d0,a0
     e58:	|   move.l 12(a0),d0
     e5c:	|   move.l d0,d0
     e5e:	|   move.w d2,d1
     e60:	|   sub.w d0,d1
     e62:	|   move.w d1,d0
     e64:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     e68:	|   moveq #0,d2
     e6a:	|   move.w d0,d2
     e6c:	|   move.l 1ad8c <input+0xa>,d0
     e72:	|   move.l d0,d4
     e74:	|   movea.l 1acdc <mouseCursorAnim>,a0
     e7a:	|   movea.l (a0),a0
     e7c:	|   move.l 16(a0),d5
     e80:	|   movea.l 1acdc <mouseCursorAnim>,a0
     e86:	|   movea.l 4(a0),a0
     e8a:	|   move.l (a0),d0
     e8c:	|   move.l d0,d1
     e8e:	|   move.l d1,d0
     e90:	|   lsl.l #3,d0
     e92:	|   sub.l d1,d0
     e94:	|   add.l d0,d0
     e96:	|   add.l d0,d0
     e98:	|   movea.l d5,a0
     e9a:	|   adda.l d0,a0
     e9c:	|   move.l 8(a0),d0
     ea0:	|   move.l d0,d0
     ea2:	|   move.w d4,d1
     ea4:	|   sub.w d0,d1
     ea6:	|   move.w d1,d0
     ea8:	|   addi.w #128,d0
     eac:	|   move.w d0,d0
     eae:	|   andi.l #65535,d0
     eb4:	|   move.l a1,-(sp)
     eb6:	|   move.l d3,-(sp)
     eb8:	|   move.l d2,-(sp)
     eba:	|   move.l d0,-(sp)
     ebc:	|   jsr 1534 <CstDisplayCursor>
     ec2:	|   lea 16(sp),sp
	}
}
     ec6:	\-> nop
     ec8:	    movem.l (sp)+,d2-d5
     ecc:	    rts

00000ece <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     ece:	move.l 1acdc <mouseCursorAnim>,d0
     ed4:	move.l d0,-(sp)
     ed6:	jsr 8882 <deleteAnim>
     edc:	addq.l #4,sp
	mouseCursorAnim = pp;
     ede:	move.l 4(sp),1acdc <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     ee6:	clr.l 1ace0 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     eec:	clr.l 1ace4 <mouseCursorCountUp>
}
     ef2:	nop
     ef4:	rts

00000ef6 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     ef6:	subq.l #8,sp
	
	struct sprite *spritetouse = c->theSprites->bank.sprites;
     ef8:	movea.l 20(sp),a0
     efc:	movea.l (a0),a0
     efe:	move.l 16(a0),4(sp)

	UWORD absx =  x - spritetouse->xhot;
     f04:	move.l 12(sp),d0
     f08:	movea.l 4(sp),a0
     f0c:	move.l 8(a0),d1
     f10:	move.l d1,d1
     f12:	movea.w d0,a0
     f14:	suba.w d1,a0
     f16:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     f1a:	move.l 16(sp),d0
     f1e:	movea.l 4(sp),a0
     f22:	move.l 12(a0),d1
     f26:	move.l d1,d1
     f28:	movea.w d0,a0
     f2a:	suba.w d1,a0
     f2c:	move.w a0,(sp)

	CstScaleSprite( spritetouse, absx, absy, BACKDROP);
     f2e:	move.w (sp),d0
     f30:	movea.w d0,a1
     f32:	move.w 2(sp),d0
     f36:	movea.w d0,a0
     f38:	pea 2 <_start+0x2>
     f3c:	move.l a1,-(sp)
     f3e:	move.l a0,-(sp)
     f40:	move.l 16(sp),-(sp)
     f44:	jsr 1cea <CstScaleSprite>
     f4a:	lea 16(sp),sp
     f4e:	nop
     f50:	addq.l #8,sp
     f52:	rts

00000f54 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     f54:	          lea -16(sp),sp
     f58:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     f5a:	          pea 16307 <PutChar+0xaf>
     f60:	          jsr 15784 <KPrintF>
     f66:	          addq.l #4,sp

  if( !CstBackDrop) {
     f68:	          move.l 1acf6 <CstBackDrop>,d0
     f6e:	      /-- bne.s f82 <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     f70:	      |   pea 16320 <PutChar+0xc8>
     f76:	      |   jsr 15784 <KPrintF>
     f7c:	      |   addq.l #4,sp
    return;
     f7e:	/-----|-- bra.w 110c <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     f82:	|     \-> clr.w 1acf0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     f88:	|         move.l #14675968,8(sp)

  width /= 16;
     f90:	|         move.l 24(sp),d0
     f94:	|         movea.l d0,a0
     f96:	|         cmpa.w #0,a0
     f9a:	|     /-- bge.s fa0 <CstBlankScreen+0x4c>
     f9c:	|     |   lea 15(a0),a0
     fa0:	|     \-> move.l a0,d0
     fa2:	|         asr.l #4,d0
     fa4:	|         move.l d0,24(sp)

  WaitBlit();
     fa8:	|         move.l 1addc <GfxBase>,d0
     fae:	|         movea.l d0,a6
     fb0:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     fb4:	|         movea.l 8(sp),a0
     fb8:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     fbe:	|         movea.l 8(sp),a0
     fc2:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     fc8:	|         movea.l 8(sp),a0
     fcc:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     fd2:	|         movea.l 8(sp),a0
     fd6:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     fdc:	|         movea.l 8(sp),a0
     fe0:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     fe6:	|         movea.l 8(sp),a0
     fea:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     ff0:	|         movea.l 8(sp),a0
     ff4:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ffa:	|         movea.l 8(sp),a0
     ffe:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
    1004:	|         move.l 1acf6 <CstBackDrop>,d0
    100a:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
    100e:	|         move.l 28(sp),d0
    1012:	|         lsl.w #6,d0
    1014:	|         move.l 24(sp),d1
    1018:	|         movea.w d0,a0
    101a:	|         adda.w d1,a0
    101c:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
    1020:	|         move.l 24(sp),d1
    1024:	|         move.l 28(sp),d0
    1028:	|         muls.w d1,d0
    102a:	|         add.w d0,d0
    102c:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
    1030:	|         pea 1634e <PutChar+0xf6>
    1036:	|         jsr 15784 <KPrintF>
    103c:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
    103e:	|         clr.l 12(sp)
    1042:	|     /-- bra.s 1074 <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
    1044:	|  /--|-> move.l 16(sp),d0
    1048:	|  |  |   movea.l 8(sp),a0
    104c:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
    1050:	|  |  |   movea.l 8(sp),a0
    1054:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
    105a:	|  |  |   move.l 1addc <GfxBase>,d0
    1060:	|  |  |   movea.l d0,a6
    1062:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
    1066:	|  |  |   moveq #0,d0
    1068:	|  |  |   move.w 4(sp),d0
    106c:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
    1070:	|  |  |   addq.l #1,12(sp)
    1074:	|  |  \-> moveq #4,d0
    1076:	|  |      cmp.l 12(sp),d0
    107a:	|  \----- bge.s 1044 <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
    107c:	|         pea 1636e <PutChar+0x116>
    1082:	|         jsr 15784 <KPrintF>
    1088:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
    108a:	|         move.w #2,1acfe <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1092:	|         move.l 1ad24 <winWidth>,d0
    1098:	|         lsr.l #4,d0
    109a:	|         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    10a0:	|         move.l a0,d1
    10a2:	|         addq.l #2,d1
    10a4:	|         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    10aa:	|         move.l d0,d0
    10ac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    10ae:	|         move.l 1ad28 <winHeight>,d0
    10b4:	|         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    10ba:	|         move.l a0,d1
    10bc:	|         addq.l #2,d1
    10be:	|         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    10c4:	|         move.l d0,d0
    10c6:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10c8:	|         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    10ce:	|         move.l a0,d0
    10d0:	|         addq.l #2,d0
    10d2:	|         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    10d8:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10da:	|         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    10e0:	|         move.l a0,d0
    10e2:	|         addq.l #2,d0
    10e4:	|         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    10ea:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10ec:	|         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    10f2:	|         move.l a0,d0
    10f4:	|         addq.l #2,d0
    10f6:	|         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    10fc:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
    10fe:	|         pea 1638e <PutChar+0x136>
    1104:	|         jsr 15784 <KPrintF>
    110a:	|         addq.l #4,sp


}
    110c:	\-------> movea.l (sp)+,a6
    110e:	          lea 16(sp),sp
    1112:	          rts

00001114 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    1114:	       lea -52(sp),sp
    1118:	       move.l a6,-(sp)
    111a:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    111c:	       move.l #400,32(sp)
    1124:	       moveq #2,d0
    1126:	       move.l d0,28(sp)
    112a:	       move.l 1add0 <SysBase>,d0
    1130:	       movea.l d0,a6
    1132:	       move.l 32(sp),d0
    1136:	       move.l 28(sp),d1
    113a:	       jsr -198(a6)
    113e:	       move.l d0,24(sp)
    1142:	       move.l 24(sp),d0
    1146:	       move.l d0,20(sp)
  
  if( retval == 0) {
    114a:	   /-- bne.s 1174 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    114c:	   |   pea 28 <_start+0x28>
    1150:	   |   pea 163a3 <PutChar+0x14b>
    1156:	   |   jsr 15784 <KPrintF>
    115c:	   |   addq.l #8,sp
    Exit(1);
    115e:	   |   moveq #1,d1
    1160:	   |   move.l d1,16(sp)
    1164:	   |   move.l 1add8 <DOSBase>,d0
    116a:	   |   movea.l d0,a6
    116c:	   |   move.l 16(sp),d1
    1170:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    1174:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    117a:	       move.l 56(sp),1ad20 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1182:	       move.l #108084,52(sp)
  for(int i=0; i<16;i++)
    118a:	       clr.l 48(sp)
    118e:	   /-- bra.s 11b4 <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1190:	/--|-> move.l 52(sp),d1
    1194:	|  |   move.l d1,d2
    1196:	|  |   addq.l #4,d2
    1198:	|  |   move.l d2,52(sp)
    119c:	|  |   move.l 56(sp),d0
    11a0:	|  |   move.l d0,d2
    11a2:	|  |   addq.l #4,d2
    11a4:	|  |   move.l d2,56(sp)
    11a8:	|  |   movea.l d1,a0
    11aa:	|  |   move.l (a0),d1
    11ac:	|  |   movea.l d0,a0
    11ae:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    11b0:	|  |   addq.l #1,48(sp)
    11b4:	|  \-> moveq #15,d0
    11b6:	|      cmp.l 48(sp),d0
    11ba:	\----- bge.s 1190 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    11bc:	       move.l #108148,52(sp)

  for(int i=0; i<12;i++)
    11c4:	       clr.l 44(sp)
    11c8:	   /-- bra.s 11ee <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    11ca:	/--|-> move.l 52(sp),d1
    11ce:	|  |   move.l d1,d2
    11d0:	|  |   addq.l #4,d2
    11d2:	|  |   move.l d2,52(sp)
    11d6:	|  |   move.l 56(sp),d0
    11da:	|  |   move.l d0,d2
    11dc:	|  |   addq.l #4,d2
    11de:	|  |   move.l d2,56(sp)
    11e2:	|  |   movea.l d1,a0
    11e4:	|  |   move.l (a0),d1
    11e6:	|  |   movea.l d0,a0
    11e8:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11ea:	|  |   addq.l #1,44(sp)
    11ee:	|  \-> moveq #11,d0
    11f0:	|      cmp.l 44(sp),d0
    11f4:	\----- bge.s 11ca <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11f6:	       move.l #108196,52(sp)
  for(int i=0; i<10;i++)
    11fe:	       clr.l 40(sp)
    1202:	   /-- bra.s 1228 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    1204:	/--|-> move.l 52(sp),d1
    1208:	|  |   move.l d1,d2
    120a:	|  |   addq.l #4,d2
    120c:	|  |   move.l d2,52(sp)
    1210:	|  |   move.l 56(sp),d0
    1214:	|  |   move.l d0,d2
    1216:	|  |   addq.l #4,d2
    1218:	|  |   move.l d2,56(sp)
    121c:	|  |   movea.l d1,a0
    121e:	|  |   move.l (a0),d1
    1220:	|  |   movea.l d0,a0
    1222:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1224:	|  |   addq.l #1,40(sp)
    1228:	|  \-> moveq #9,d0
    122a:	|      cmp.l 40(sp),d0
    122e:	\----- bge.s 1204 <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    1230:	       move.l #108236,52(sp)
  CstClColor = (UWORD *) cl;
    1238:	       move.l 56(sp),1ad18 <CstClColor>
  for(int i=0; i<32;i++)
    1240:	       clr.l 36(sp)
    1244:	   /-- bra.s 126a <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1246:	/--|-> move.l 52(sp),d1
    124a:	|  |   move.l d1,d2
    124c:	|  |   addq.l #4,d2
    124e:	|  |   move.l d2,52(sp)
    1252:	|  |   move.l 56(sp),d0
    1256:	|  |   move.l d0,d2
    1258:	|  |   addq.l #4,d2
    125a:	|  |   move.l d2,56(sp)
    125e:	|  |   movea.l d1,a0
    1260:	|  |   move.l (a0),d1
    1262:	|  |   movea.l d0,a0
    1264:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1266:	|  |   addq.l #1,36(sp)
    126a:	|  \-> moveq #31,d0
    126c:	|      cmp.l 36(sp),d0
    1270:	\----- bge.s 1246 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1272:	       moveq #40,d1
    1274:	       cmp.l 64(sp),d1
    1278:	   /-- bge.s 12d6 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    127a:	   |   moveq #-40,d2
    127c:	   |   add.l 64(sp),d2
    1280:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1284:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    128a:	   |   move.l 8(sp),d0
    128e:	   |   move.l d0,d1
    1290:	   |   addq.l #2,d1
    1292:	   |   move.l d1,8(sp)
    1296:	   |   movea.l d0,a0
    1298:	   |   move.w #264,(a0)
    *cw++ = tmp;
    129c:	   |   move.l 8(sp),d0
    12a0:	   |   move.l d0,d1
    12a2:	   |   addq.l #2,d1
    12a4:	   |   move.l d1,8(sp)
    12a8:	   |   move.l 12(sp),d1
    12ac:	   |   movea.l d0,a0
    12ae:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    12b0:	   |   move.l 8(sp),d0
    12b4:	   |   move.l d0,d1
    12b6:	   |   addq.l #2,d1
    12b8:	   |   move.l d1,8(sp)
    12bc:	   |   movea.l d0,a0
    12be:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    12c2:	   |   move.l 8(sp),d0
    12c6:	   |   move.l d0,d1
    12c8:	   |   addq.l #2,d1
    12ca:	   |   move.l d1,8(sp)
    12ce:	   |   move.l 12(sp),d1
    12d2:	   |   movea.l d0,a0
    12d4:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    12d6:	   \-> move.l 56(sp),d0
    12da:	       move.l d0,d1
    12dc:	       addq.l #4,d1
    12de:	       move.l d1,56(sp)
    12e2:	       moveq #-2,d2
    12e4:	       movea.l d0,a0
    12e6:	       move.l d2,(a0)
  return (UWORD *) retval;  
    12e8:	       move.l 20(sp),d0
}
    12ec:	       move.l (sp)+,d2
    12ee:	       movea.l (sp)+,a6
    12f0:	       lea 52(sp),sp
    12f4:	       rts

000012f6 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12f6:	                lea -40(sp),sp
    12fa:	                move.l a6,-(sp)
    12fc:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12fe:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    1306:	                pea 163de <PutChar+0x186>
    130c:	                jsr 15784 <KPrintF>
    1312:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    1314:	                move.l 1ad10 <CstBackDropBufferApplyStart>,d0
    131a:	                move.l d0,1ad14 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1320:	                move.l 1ad10 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    1328:	                movea.l 44(sp),a0
    132c:	                move.w (a0),d0
    132e:	/-------------- beq.w 1528 <CstDisplayBackDrop+0x232>
    1332:	|               move.l 1ad04 <CstDrawBuffer>,d0
    1338:	+-------------- beq.w 1528 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    133c:	|               move.l 1addc <GfxBase>,d0
    1342:	|               movea.l d0,a6
    1344:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1348:	|               movea.l 16(sp),a0
    134c:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1352:	|               movea.l 16(sp),a0
    1356:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    135c:	|               movea.l 16(sp),a0
    1360:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1366:	|     /-------- bra.w 14ce <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    136a:	|  /--|-------> move.l 44(sp),d0
    136e:	|  |  |         move.l d0,d1
    1370:	|  |  |         addq.l #2,d1
    1372:	|  |  |         move.l d1,44(sp)
    1376:	|  |  |         movea.l d0,a0
    1378:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    137c:	|  |  |         move.l 44(sp),d0
    1380:	|  |  |         move.l d0,d1
    1382:	|  |  |         addq.l #2,d1
    1384:	|  |  |         move.l d1,44(sp)
    1388:	|  |  |         movea.l d0,a0
    138a:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    138e:	|  |  |         move.l 44(sp),d0
    1392:	|  |  |         move.l d0,d1
    1394:	|  |  |         addq.l #2,d1
    1396:	|  |  |         move.l d1,44(sp)
    139a:	|  |  |         movea.l d0,a0
    139c:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    13a0:	|  |  |         move.l 44(sp),d0
    13a4:	|  |  |         move.l d0,d1
    13a6:	|  |  |         addq.l #2,d1
    13a8:	|  |  |         move.l d1,44(sp)
    13ac:	|  |  |         movea.l d0,a0
    13ae:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    13b2:	|  |  |         move.l 1ad24 <winWidth>,d0
    13b8:	|  |  |         lsr.l #3,d0
    13ba:	|  |  |         move.l d0,d1
    13bc:	|  |  |         move.w 14(sp),d0
    13c0:	|  |  |         add.w d0,d0
    13c2:	|  |  |         sub.w d0,d1
    13c4:	|  |  |         movea.l 16(sp),a0
    13c8:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    13cc:	|  |  |         move.l 1ad24 <winWidth>,d0
    13d2:	|  |  |         lsr.l #3,d0
    13d4:	|  |  |         move.l d0,d1
    13d6:	|  |  |         move.w 14(sp),d0
    13da:	|  |  |         add.w d0,d0
    13dc:	|  |  |         sub.w d0,d1
    13de:	|  |  |         movea.l 16(sp),a0
    13e2:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    13e6:	|  |  |         moveq #0,d0
    13e8:	|  |  |         move.w 8(sp),d0
    13ec:	|  |  |         move.l 1ad24 <winWidth>,d1
    13f2:	|  |  |         move.l d1,-(sp)
    13f4:	|  |  |         move.l d0,-(sp)
    13f6:	|  |  |         jsr 16142 <__mulsi3>
    13fc:	|  |  |         addq.l #8,sp
    13fe:	|  |  |         move.l d0,d1
    1400:	|  |  |         lsr.l #3,d1
    1402:	|  |  |         move.l 1acf6 <CstBackDrop>,d0
    1408:	|  |  |         add.l d0,d1
    140a:	|  |  |         moveq #0,d0
    140c:	|  |  |         move.w 10(sp),d0
    1410:	|  |  |         move.l d1,d2
    1412:	|  |  |         add.l d0,d2
    1414:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    1418:	|  |  |         moveq #0,d0
    141a:	|  |  |         move.w 8(sp),d0
    141e:	|  |  |         move.l 1ad24 <winWidth>,d1
    1424:	|  |  |         move.l d1,-(sp)
    1426:	|  |  |         move.l d0,-(sp)
    1428:	|  |  |         jsr 16142 <__mulsi3>
    142e:	|  |  |         addq.l #8,sp
    1430:	|  |  |         move.l d0,d1
    1432:	|  |  |         lsr.l #3,d1
    1434:	|  |  |         move.l 1ad04 <CstDrawBuffer>,d0
    143a:	|  |  |         add.l d0,d1
    143c:	|  |  |         moveq #0,d0
    143e:	|  |  |         move.w 10(sp),d0
    1442:	|  |  |         move.l d1,d2
    1444:	|  |  |         add.l d0,d2
    1446:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    144a:	|  |  |         clr.l 32(sp)
    144e:	|  |  |     /-- bra.s 14c6 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1450:	|  |  |  /--|-> move.l 40(sp),d0
    1454:	|  |  |  |  |   movea.l 16(sp),a0
    1458:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    145c:	|  |  |  |  |   move.l 36(sp),d0
    1460:	|  |  |  |  |   movea.l 16(sp),a0
    1464:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1468:	|  |  |  |  |   move.w 12(sp),d0
    146c:	|  |  |  |  |   lsl.w #6,d0
    146e:	|  |  |  |  |   add.w 14(sp),d0
    1472:	|  |  |  |  |   movea.l 16(sp),a0
    1476:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    147a:	|  |  |  |  |   move.l 1ad24 <winWidth>,d0
    1480:	|  |  |  |  |   lsr.l #3,d0
    1482:	|  |  |  |  |   move.l 1ad28 <winHeight>,d1
    1488:	|  |  |  |  |   move.l d1,-(sp)
    148a:	|  |  |  |  |   move.l d0,-(sp)
    148c:	|  |  |  |  |   jsr 16142 <__mulsi3>
    1492:	|  |  |  |  |   addq.l #8,sp
    1494:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1498:	|  |  |  |  |   move.l 1ad24 <winWidth>,d0
    149e:	|  |  |  |  |   lsr.l #3,d0
    14a0:	|  |  |  |  |   move.l 1ad28 <winHeight>,d1
    14a6:	|  |  |  |  |   move.l d1,-(sp)
    14a8:	|  |  |  |  |   move.l d0,-(sp)
    14aa:	|  |  |  |  |   jsr 16142 <__mulsi3>
    14b0:	|  |  |  |  |   addq.l #8,sp
    14b2:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    14b6:	|  |  |  |  |   move.l 1addc <GfxBase>,d0
    14bc:	|  |  |  |  |   movea.l d0,a6
    14be:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    14c2:	|  |  |  |  |   addq.l #1,32(sp)
    14c6:	|  |  |  |  \-> moveq #4,d0
    14c8:	|  |  |  |      cmp.l 32(sp),d0
    14cc:	|  |  |  \----- bge.s 1450 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    14ce:	|  |  \-------> movea.l 44(sp),a0
    14d2:	|  |            move.w (a0),d0
    14d4:	|  \----------- bne.w 136a <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    14d8:	|               move.l 1ad1c <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    14e0:	|               move.l 1ad18 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    14e8:	|               clr.l 20(sp)
    14ec:	|           /-- bra.s 151e <CstDisplayBackDrop+0x228>
    *tmp++;
    14ee:	|        /--|-> move.l 24(sp),d0
    14f2:	|        |  |   move.l d0,d1
    14f4:	|        |  |   addq.l #2,d1
    14f6:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    14fa:	|        |  |   move.l 28(sp),d1
    14fe:	|        |  |   move.l d1,d2
    1500:	|        |  |   addq.l #2,d2
    1502:	|        |  |   move.l d2,28(sp)
    1506:	|        |  |   move.l 24(sp),d0
    150a:	|        |  |   move.l d0,d2
    150c:	|        |  |   addq.l #2,d2
    150e:	|        |  |   move.l d2,24(sp)
    1512:	|        |  |   movea.l d1,a0
    1514:	|        |  |   move.w (a0),d1
    1516:	|        |  |   movea.l d0,a0
    1518:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    151a:	|        |  |   addq.l #1,20(sp)
    151e:	|        |  \-> moveq #31,d0
    1520:	|        |      cmp.l 20(sp),d0
    1524:	|        \----- bge.s 14ee <CstDisplayBackDrop+0x1f8>
    1526:	|           /-- bra.s 152a <CstDisplayBackDrop+0x234>
    return;
    1528:	\-----------|-> nop
  }
}
    152a:	            \-> move.l (sp)+,d2
    152c:	                movea.l (sp)+,a6
    152e:	                lea 40(sp),sp
    1532:	                rts

00001534 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1534:	lea -20(sp),sp
    1538:	movea.l 24(sp),a0
    153c:	move.l 28(sp),d1
    1540:	move.l 32(sp),d0
    1544:	movea.w a0,a0
    1546:	move.w a0,4(sp)
    154a:	move.w d1,d1
    154c:	move.w d1,2(sp)
    1550:	move.w d0,d0
    1552:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1554:	move.w 2(sp),d0
    1558:	movea.l 36(sp),a0
    155c:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    155e:	move.w 4(sp),d0
    1562:	lsr.w #1,d0
    1564:	movea.l 36(sp),a0
    1568:	addq.l #1,a0
    156a:	move.l d0,d0
    156c:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    156e:	move.w 2(sp),d1
    1572:	move.w (sp),d0
    1574:	movea.l 36(sp),a0
    1578:	addq.l #2,a0
    157a:	add.b d1,d0
    157c:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    157e:	move.w 4(sp),d0
    1582:	andi.w #1,d0
    1586:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    158a:	move.w 2(sp),d0
    158e:	add.w (sp),d0
    1590:	move.w d0,d0
    1592:	andi.l #65535,d0
    1598:	asr.l #7,d0
    159a:	move.l d0,d0
    159c:	move.w d0,d1
    159e:	andi.w #2,d1
    15a2:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    15a6:	moveq #0,d0
    15a8:	move.w 2(sp),d0
    15ac:	asr.l #6,d0
    15ae:	move.l d0,d0
    15b0:	move.w d0,d1
    15b2:	andi.w #4,d1
    15b6:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    15ba:	move.w 18(sp),d1
    15be:	move.w 16(sp),d0
    15c2:	add.b d0,d1
    15c4:	move.w 14(sp),d0
    15c8:	movea.l 36(sp),a0
    15cc:	addq.l #3,a0
    15ce:	add.b d1,d0
    15d0:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    15d2:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    15d8:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    15de:	move.l 10(sp),d0
    15e2:	clr.w d0
    15e4:	swap d0
    15e6:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15ea:	move.l 1ad20 <CstClCursor>,d0
    15f0:	movea.l d0,a0
    15f2:	addq.l #2,a0
    15f4:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15f8:	move.l 1ad20 <CstClCursor>,d0
    15fe:	movea.l d0,a0
    1600:	addq.l #6,a0
    1602:	move.w 8(sp),(a0)

}
    1606:	nop
    1608:	lea 20(sp),sp
    160c:	rts

0000160e <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    160e:	    move.w 1acfe <CstApplyBackDropCounter>,d0
    1614:	/-- beq.s 162a <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    1616:	|   jsr 12f6 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    161c:	|   move.w 1acfe <CstApplyBackDropCounter>,d0
    1622:	|   subq.w #1,d0
    1624:	|   move.w d0,1acfe <CstApplyBackDropCounter>
  }    
}
    162a:	\-> nop
    162c:	    rts

0000162e <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    162e:	             lea -144(sp),sp
    1632:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1636:	             pea 163fa <PutChar+0x1a2>
    163c:	             jsr 15784 <KPrintF>
    1642:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1644:	             move.l 164(sp),-(sp)
    1648:	             jsr 6bc <get2bytes>
    164e:	             addq.l #4,sp
    1650:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1654:	             move.l 164(sp),-(sp)
    1658:	             jsr 6bc <get2bytes>
    165e:	             addq.l #4,sp
    1660:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1664:	             move.w 134(sp),d0
    1668:	             lsr.w #3,d0
    166a:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    166e:	             move.w 130(sp),d0
    1672:	             lsr.w #1,d0
    1674:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1678:	             move.l 1ad24 <winWidth>,d0
    167e:	             lsr.l #3,d0
    1680:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1684:	             move.w 130(sp),d0
    1688:	             muls.w 132(sp),d0
    168c:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1690:	             move.w 124(sp),d1
    1694:	             move.w d1,d0
    1696:	             add.w d0,d0
    1698:	             add.w d0,d0
    169a:	             move.w d0,d2
    169c:	             add.w d1,d2
    169e:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    16a2:	             move.w 1acf0 <CstPaletteLoaded>,d0
    16a8:	/----------- bne.w 1742 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    16ac:	|            move.w #384,120(sp)

    if(CstPalette) {
    16b2:	|            move.l 1ad1c <CstPalette>,d0
    16b8:	|        /-- beq.s 16d2 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    16ba:	|        |   move.l 1ad1c <CstPalette>,116(sp)
    16c2:	|        |   move.l 1add0 <SysBase>,d0
    16c8:	|        |   movea.l d0,a6
    16ca:	|        |   movea.l 116(sp),a1
    16ce:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    16d2:	|        \-> moveq #64,d0
    16d4:	|            move.l d0,112(sp)
    16d8:	|            clr.l 108(sp)
    16dc:	|            move.l 1add0 <SysBase>,d0
    16e2:	|            movea.l d0,a6
    16e4:	|            move.l 112(sp),d0
    16e8:	|            move.l 108(sp),d1
    16ec:	|            jsr -684(a6)
    16f0:	|            move.l d0,104(sp)
    16f4:	|            move.l 104(sp),d0
    16f8:	|            move.l d0,1ad1c <CstPalette>
    CstPaletteLoaded = 1;
    16fe:	|            move.w #1,1acf0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1706:	|            move.l 1ad1c <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    170e:	|            clr.l 152(sp)
    1712:	|        /-- bra.s 1738 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1714:	|     /--|-> move.l 164(sp),-(sp)
    1718:	|     |  |   jsr 6bc <get2bytes>
    171e:	|     |  |   addq.l #4,sp
    1720:	|     |  |   move.l d0,d1
    1722:	|     |  |   move.l 156(sp),d0
    1726:	|     |  |   move.l d0,d2
    1728:	|     |  |   addq.l #2,d2
    172a:	|     |  |   move.l d2,156(sp)
    172e:	|     |  |   move.l d1,d1
    1730:	|     |  |   movea.l d0,a0
    1732:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1734:	|     |  |   addq.l #1,152(sp)
    1738:	|     |  \-> moveq #31,d0
    173a:	|     |      cmp.l 152(sp),d0
    173e:	|     \----- bge.s 1714 <CstLoadBackdrop+0xe6>
    1740:	|  /-------- bra.s 1760 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1742:	\--|-------> clr.l 148(sp)
    1746:	   |     /-- bra.s 1758 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1748:	   |  /--|-> move.l 164(sp),-(sp)
    174c:	   |  |  |   jsr 6bc <get2bytes>
    1752:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1754:	   |  |  |   addq.l #1,148(sp)
    1758:	   |  |  \-> moveq #31,d2
    175a:	   |  |      cmp.l 148(sp),d2
    175e:	   |  \----- bge.s 1748 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1760:	   \-------> moveq #0,d0
    1762:	             move.w 122(sp),d0
    1766:	             move.l d0,100(sp)
    176a:	             moveq #2,d0
    176c:	             move.l d0,96(sp)
    1770:	             move.l 1add0 <SysBase>,d0
    1776:	             movea.l d0,a6
    1778:	             move.l 100(sp),d0
    177c:	             move.l 96(sp),d1
    1780:	             jsr -684(a6)
    1784:	             move.l d0,92(sp)
    1788:	             move.l 92(sp),d0
    178c:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1790:	         /-- bne.s 17a0 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1792:	         |   pea 16429 <PutChar+0x1d1>
    1798:	         |   jsr 15784 <KPrintF>
    179e:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    17a0:	         \-> moveq #0,d0
    17a2:	             move.w 124(sp),d0
    17a6:	             move.l d0,84(sp)
    17aa:	             moveq #2,d2
    17ac:	             move.l d2,80(sp)
    17b0:	             move.l 1add0 <SysBase>,d0
    17b6:	             movea.l d0,a6
    17b8:	             move.l 84(sp),d0
    17bc:	             move.l 80(sp),d1
    17c0:	             jsr -684(a6)
    17c4:	             move.l d0,76(sp)
    17c8:	             move.l 76(sp),d0
    17cc:	             move.l d0,72(sp)
  if( !tmpmask)
    17d0:	         /-- bne.s 17e0 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    17d2:	         |   pea 1645f <PutChar+0x207>
    17d8:	         |   jsr 15784 <KPrintF>
    17de:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    17e0:	         \-> move.w 132(sp),d0
    17e4:	             movea.w d0,a1
    17e6:	             move.w 134(sp),d0
    17ea:	             movea.w d0,a0
    17ec:	             clr.l -(sp)
    17ee:	             pea 5 <_start+0x5>
    17f2:	             move.l a1,-(sp)
    17f4:	             move.l a0,-(sp)
    17f6:	             pea 16493 <PutChar+0x23b>
    17fc:	             move.l 108(sp),-(sp)
    1800:	             jsr 1586c <debug_register_bitmap>
    1806:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    180a:	             move.w 132(sp),d0
    180e:	             movea.w d0,a1
    1810:	             move.w 134(sp),d0
    1814:	             movea.w d0,a0
    1816:	             clr.l -(sp)
    1818:	             pea 1 <_start+0x1>
    181c:	             move.l a1,-(sp)
    181e:	             move.l a0,-(sp)
    1820:	             pea 164a1 <PutChar+0x249>
    1826:	             move.l 108(sp),-(sp)
    182a:	             jsr 1586c <debug_register_bitmap>
    1830:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1834:	             move.l 164(sp),68(sp)
    183a:	             move.l 88(sp),64(sp)
    1840:	             moveq #2,d0
    1842:	             move.l d0,60(sp)
    1846:	             move.w 122(sp),d0
    184a:	             lsr.w #1,d0
    184c:	             move.w d0,d0
    184e:	             andi.l #65535,d0
    1854:	             move.l d0,56(sp)
    1858:	             move.l 1add8 <DOSBase>,d0
    185e:	             movea.l d0,a6
    1860:	             move.l 68(sp),d1
    1864:	             move.l 64(sp),d2
    1868:	             move.l 60(sp),d3
    186c:	             move.l 56(sp),d4
    1870:	             jsr -324(a6)
    1874:	             move.l d0,52(sp)
    1878:	             move.l 52(sp),d0
    187c:	             move.w d0,50(sp)
  if(!count) {
    1880:	         /-- bne.s 1894 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    1882:	         |   pea 164ad <PutChar+0x255>
    1888:	         |   jsr 15784 <KPrintF>
    188e:	         |   addq.l #4,sp
    return;
    1890:	   /-----|-- bra.w 1ae0 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1894:	   |     \-> move.l 164(sp),46(sp)
    189a:	   |         move.l 72(sp),42(sp)
    18a0:	   |         moveq #2,d2
    18a2:	   |         move.l d2,38(sp)
    18a6:	   |         move.w 124(sp),d0
    18aa:	   |         lsr.w #1,d0
    18ac:	   |         move.w d0,d0
    18ae:	   |         andi.l #65535,d0
    18b4:	   |         move.l d0,34(sp)
    18b8:	   |         move.l 1add8 <DOSBase>,d0
    18be:	   |         movea.l d0,a6
    18c0:	   |         move.l 46(sp),d1
    18c4:	   |         move.l 42(sp),d2
    18c8:	   |         move.l 38(sp),d3
    18cc:	   |         move.l 34(sp),d4
    18d0:	   |         jsr -324(a6)
    18d4:	   |         move.l d0,30(sp)
    18d8:	   |         move.l 30(sp),d0
    18dc:	   |         move.w d0,50(sp)
   

  if(!count) {
    18e0:	   |     /-- bne.s 18f4 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    18e2:	   |     |   pea 164ad <PutChar+0x255>
    18e8:	   |     |   jsr 15784 <KPrintF>
    18ee:	   |     |   addq.l #4,sp
    return;
    18f0:	   +-----|-- bra.w 1ae0 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    18f4:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    18fc:	   |         move.l 1acf6 <CstBackDrop>,d0
    1902:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1906:	   |         move.l 172(sp),d0
    190a:	   |         move.w d0,d1
    190c:	   |         muls.w 126(sp),d1
    1910:	   |         move.l 168(sp),d0
    1914:	   |     /-- bpl.s 1918 <CstLoadBackdrop+0x2ea>
    1916:	   |     |   addq.l #7,d0
    1918:	   |     \-> asr.l #3,d0
    191a:	   |         move.l d0,d0
    191c:	   |         movea.w d1,a0
    191e:	   |         adda.w d0,a0
    1920:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1924:	   |         moveq #0,d0
    1926:	   |         move.w 24(sp),d0
    192a:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    192e:	   |         pea 164c8 <PutChar+0x270>
    1934:	   |         jsr 15784 <KPrintF>
    193a:	   |         addq.l #4,sp


  WaitBlit();
    193c:	   |         move.l 1addc <GfxBase>,d0
    1942:	   |         movea.l d0,a6
    1944:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1948:	   |         movea.l 26(sp),a0
    194c:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1952:	   |         movea.l 26(sp),a0
    1956:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    195c:	   |         movea.l 26(sp),a0
    1960:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1966:	   |         movea.l 26(sp),a0
    196a:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1970:	   |         move.w 126(sp),d0
    1974:	   |         sub.w 130(sp),d0
    1978:	   |         movea.l 26(sp),a0
    197c:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1980:	   |         move.w 126(sp),d0
    1984:	   |         sub.w 130(sp),d0
    1988:	   |         movea.l 26(sp),a0
    198c:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1990:	   |         movea.l 26(sp),a0
    1994:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    199a:	   |         movea.l 26(sp),a0
    199e:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    19a4:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    19aa:	   |         clr.l 136(sp)
    19ae:	   |     /-- bra.s 1a10 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    19b0:	   |  /--|-> movea.l 26(sp),a0
    19b4:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    19ba:	   |  |  |   move.l 140(sp),d0
    19be:	   |  |  |   movea.l 26(sp),a0
    19c2:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    19c6:	   |  |  |   move.l 144(sp),d0
    19ca:	   |  |  |   movea.l 26(sp),a0
    19ce:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    19d2:	   |  |  |   move.l 144(sp),d0
    19d6:	   |  |  |   movea.l 26(sp),a0
    19da:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    19de:	   |  |  |   move.w 132(sp),d0
    19e2:	   |  |  |   lsl.w #6,d0
    19e4:	   |  |  |   add.w 128(sp),d0
    19e8:	   |  |  |   movea.l 26(sp),a0
    19ec:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    19f0:	   |  |  |   moveq #0,d0
    19f2:	   |  |  |   move.w 124(sp),d0
    19f6:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    19fa:	   |  |  |   move.w 1acf4 <CstBackdropSizePlane>,d0
    1a00:	   |  |  |   move.w d0,d0
    1a02:	   |  |  |   andi.l #65535,d0
    1a08:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a0c:	   |  |  |   addq.l #1,136(sp)
    1a10:	   |  |  \-> moveq #4,d0
    1a12:	   |  |      cmp.l 136(sp),d0
    1a16:	   |  \----- bge.s 19b0 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    1a18:	   |         move.l 1addc <GfxBase>,d0
    1a1e:	   |         movea.l d0,a6
    1a20:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1a24:	   |         pea 164e7 <PutChar+0x28f>
    1a2a:	   |         jsr 15784 <KPrintF>
    1a30:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1a32:	   |         move.l 88(sp),20(sp)
    1a38:	   |         move.l 1add0 <SysBase>,d0
    1a3e:	   |         movea.l d0,a6
    1a40:	   |         movea.l 20(sp),a1
    1a44:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1a48:	   |         move.l 72(sp),16(sp)
    1a4e:	   |         move.l 1add0 <SysBase>,d0
    1a54:	   |         movea.l d0,a6
    1a56:	   |         movea.l 16(sp),a1
    1a5a:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1a5e:	   |         move.w #2,1acfe <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1a66:	   |         move.l 1ad24 <winWidth>,d0
    1a6c:	   |         lsr.l #4,d0
    1a6e:	   |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    1a74:	   |         move.l a0,d1
    1a76:	   |         addq.l #2,d1
    1a78:	   |         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    1a7e:	   |         move.l d0,d0
    1a80:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1a82:	   |         move.l 1ad28 <winHeight>,d0
    1a88:	   |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    1a8e:	   |         move.l a0,d1
    1a90:	   |         addq.l #2,d1
    1a92:	   |         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    1a98:	   |         move.l d0,d0
    1a9a:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1a9c:	   |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    1aa2:	   |         move.l a0,d0
    1aa4:	   |         addq.l #2,d0
    1aa6:	   |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    1aac:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1aae:	   |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    1ab4:	   |         move.l a0,d0
    1ab6:	   |         addq.l #2,d0
    1ab8:	   |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    1abe:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ac0:	   |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    1ac6:	   |         move.l a0,d0
    1ac8:	   |         addq.l #2,d0
    1aca:	   |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    1ad0:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1ad2:	   |         pea 16507 <PutChar+0x2af>
    1ad8:	   |         jsr 15784 <KPrintF>
    1ade:	   |         addq.l #4,sp

}
    1ae0:	   \-------> movem.l (sp)+,d2-d4/a6
    1ae4:	             lea 144(sp),sp
    1ae8:	             rts

00001aea <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1aea:	                lea -24(sp),sp
    1aee:	                move.l a6,-(sp)
    1af0:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1af2:	                move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    1afa:	                move.l 1ad0c <CstCleanupQueueDrawBuffer>,d0
    1b00:	/-------------- beq.w 1cde <CstRestoreScreen+0x1f4>
    1b04:	|               move.l 1ad04 <CstDrawBuffer>,d0
    1b0a:	+-------------- beq.w 1cde <CstRestoreScreen+0x1f4>
    return;
  } 

  WaitBlit();
    1b0e:	|               move.l 1addc <GfxBase>,d0
    1b14:	|               movea.l d0,a6
    1b16:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1b1a:	|               movea.l 16(sp),a0
    1b1e:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1b24:	|               movea.l 16(sp),a0
    1b28:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1b2e:	|               movea.l 16(sp),a0
    1b32:	|               move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    1b38:	|     /-------- bra.w 1cd2 <CstRestoreScreen+0x1e8>
  {    

    custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1b3c:	|  /--|-------> move.l 1ad24 <winWidth>,d0
    1b42:	|  |  |         lsr.l #3,d0
    1b44:	|  |  |         move.l d0,d1
    1b46:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1b4c:	|  |  |         move.w (a0),d0
    1b4e:	|  |  |         add.w d0,d0
    1b50:	|  |  |         sub.w d0,d1
    1b52:	|  |  |         movea.l 16(sp),a0
    1b56:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1b5a:	|  |  |         move.l 1ad24 <winWidth>,d0
    1b60:	|  |  |         lsr.l #3,d0
    1b62:	|  |  |         move.l d0,d1
    1b64:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1b6a:	|  |  |         move.w (a0),d0
    1b6c:	|  |  |         add.w d0,d0
    1b6e:	|  |  |         sub.w d0,d1
    1b70:	|  |  |         movea.l 16(sp),a0
    1b74:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1b78:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1b7e:	|  |  |         move.w 6(a0),d0
    1b82:	|  |  |         move.w d0,d0
    1b84:	|  |  |         andi.l #65535,d0
    1b8a:	|  |  |         move.l 1ad24 <winWidth>,d1
    1b90:	|  |  |         move.l d1,-(sp)
    1b92:	|  |  |         move.l d0,-(sp)
    1b94:	|  |  |         jsr 16142 <__mulsi3>
    1b9a:	|  |  |         addq.l #8,sp
    1b9c:	|  |  |         move.l d0,d1
    1b9e:	|  |  |         lsr.l #3,d1
    1ba0:	|  |  |         move.l 1acf6 <CstBackDrop>,d0
    1ba6:	|  |  |         add.l d0,d1
    1ba8:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1bae:	|  |  |         move.w 4(a0),d0
    1bb2:	|  |  |         move.w d0,d0
    1bb4:	|  |  |         andi.l #65535,d0
    1bba:	|  |  |         move.l d1,d2
    1bbc:	|  |  |         add.l d0,d2
    1bbe:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1bc2:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1bc8:	|  |  |         move.w 6(a0),d0
    1bcc:	|  |  |         move.w d0,d0
    1bce:	|  |  |         andi.l #65535,d0
    1bd4:	|  |  |         move.l 1ad24 <winWidth>,d1
    1bda:	|  |  |         move.l d1,-(sp)
    1bdc:	|  |  |         move.l d0,-(sp)
    1bde:	|  |  |         jsr 16142 <__mulsi3>
    1be4:	|  |  |         addq.l #8,sp
    1be6:	|  |  |         move.l d0,d1
    1be8:	|  |  |         lsr.l #3,d1
    1bea:	|  |  |         move.l 1ad04 <CstDrawBuffer>,d0
    1bf0:	|  |  |         add.l d0,d1
    1bf2:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1bf8:	|  |  |         move.w 4(a0),d0
    1bfc:	|  |  |         move.w d0,d0
    1bfe:	|  |  |         andi.l #65535,d0
    1c04:	|  |  |         move.l d1,d2
    1c06:	|  |  |         add.l d0,d2
    1c08:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1c0c:	|  |  |         clr.l 20(sp)
    1c10:	|  |  |     /-- bra.w 1c96 <CstRestoreScreen+0x1ac>
    {
      custom->bltapt = (APTR) bltapt;
    1c14:	|  |  |  /--|-> move.l 28(sp),d0
    1c18:	|  |  |  |  |   movea.l 16(sp),a0
    1c1c:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1c20:	|  |  |  |  |   move.l 24(sp),d0
    1c24:	|  |  |  |  |   movea.l 16(sp),a0
    1c28:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    1c2c:	|  |  |  |  |   movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1c32:	|  |  |  |  |   move.w 2(a0),d0
    1c36:	|  |  |  |  |   lsl.w #6,d0
    1c38:	|  |  |  |  |   movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1c3e:	|  |  |  |  |   move.w (a0),d1
    1c40:	|  |  |  |  |   add.w d1,d0
    1c42:	|  |  |  |  |   movea.l 16(sp),a0
    1c46:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1c4a:	|  |  |  |  |   move.l 1ad24 <winWidth>,d0
    1c50:	|  |  |  |  |   lsr.l #3,d0
    1c52:	|  |  |  |  |   move.l 1ad28 <winHeight>,d1
    1c58:	|  |  |  |  |   move.l d1,-(sp)
    1c5a:	|  |  |  |  |   move.l d0,-(sp)
    1c5c:	|  |  |  |  |   jsr 16142 <__mulsi3>
    1c62:	|  |  |  |  |   addq.l #8,sp
    1c64:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    1c68:	|  |  |  |  |   move.l 1ad24 <winWidth>,d0
    1c6e:	|  |  |  |  |   lsr.l #3,d0
    1c70:	|  |  |  |  |   move.l 1ad28 <winHeight>,d1
    1c76:	|  |  |  |  |   move.l d1,-(sp)
    1c78:	|  |  |  |  |   move.l d0,-(sp)
    1c7a:	|  |  |  |  |   jsr 16142 <__mulsi3>
    1c80:	|  |  |  |  |   addq.l #8,sp
    1c82:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    1c86:	|  |  |  |  |   move.l 1addc <GfxBase>,d0
    1c8c:	|  |  |  |  |   movea.l d0,a6
    1c8e:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1c92:	|  |  |  |  |   addq.l #1,20(sp)
    1c96:	|  |  |  |  \-> moveq #4,d0
    1c98:	|  |  |  |      cmp.l 20(sp),d0
    1c9c:	|  |  |  \----- bge.w 1c14 <CstRestoreScreen+0x12a>
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    1ca0:	|  |  |         move.l 1ad0c <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    1ca8:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1cae:	|  |  |         move.l 8(a0),d0
    1cb2:	|  |  |         move.l d0,1ad0c <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    1cb8:	|  |  |         move.l 12(sp),8(sp)
    1cbe:	|  |  |         move.l 1add0 <SysBase>,d0
    1cc4:	|  |  |         movea.l d0,a6
    1cc6:	|  |  |         movea.l 8(sp),a1
    1cca:	|  |  |         jsr -690(a6)
    todelete = NULL;
    1cce:	|  |  |         clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    1cd2:	|  |  \-------> move.l 1ad0c <CstCleanupQueueDrawBuffer>,d0
    1cd8:	|  \----------- bne.w 1b3c <CstRestoreScreen+0x52>
    1cdc:	|           /-- bra.s 1ce0 <CstRestoreScreen+0x1f6>
    return;
    1cde:	\-----------|-> nop
  }
  
}
    1ce0:	            \-> move.l (sp)+,d2
    1ce2:	                movea.l (sp)+,a6
    1ce4:	                lea 24(sp),sp
    1ce8:	                rts

00001cea <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, WORD x, WORD y, UWORD destinationtype)
{
    1cea:	                lea -124(sp),sp
    1cee:	                movem.l d2-d3/a6,-(sp)
    1cf2:	                movea.l 144(sp),a0
    1cf6:	                move.l 148(sp),d1
    1cfa:	                move.l 152(sp),d0
    1cfe:	                movea.w a0,a0
    1d00:	                move.w a0,16(sp)
    1d04:	                move.w d1,d1
    1d06:	                move.w d1,14(sp)
    1d0a:	                move.w d0,d0
    1d0c:	                move.w d0,12(sp)

  UWORD *destination = 0;
    1d10:	                clr.l 132(sp)
  switch(destinationtype)
    1d14:	                moveq #0,d0
    1d16:	                move.w 12(sp),d0
    1d1a:	                moveq #1,d1
    1d1c:	                cmp.l d0,d1
    1d1e:	            /-- beq.s 1d28 <CstScaleSprite+0x3e>
    1d20:	            |   moveq #2,d2
    1d22:	            |   cmp.l d0,d2
    1d24:	         /--|-- beq.s 1d32 <CstScaleSprite+0x48>
    1d26:	      /--|--|-- bra.s 1d44 <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1d28:	      |  |  \-> move.l 1ad04 <CstDrawBuffer>,132(sp)
      break;
    1d30:	      +--|----- bra.s 1d44 <CstScaleSprite+0x5a>
    case BACKDROP:
      CstApplyBackDropCounter = 2;
    1d32:	      |  \----> move.w #2,1acfe <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1d3a:	      |         move.l 1acf6 <CstBackDrop>,132(sp)
      break;
    1d42:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1d44:	      \-------> tst.w 14(sp)
    1d48:	         /----- bge.s 1d90 <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1d4a:	         |      movea.w 14(sp),a1
    1d4e:	         |      movea.l 140(sp),a0
    1d52:	         |      move.l 4(a0),d0
    1d56:	         |      add.l a1,d0
    1d58:	         |  /-- bpl.s 1d6c <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d5a:	         |  |   pea 16521 <PutChar+0x2c9>
    1d60:	         |  |   jsr 15784 <KPrintF>
    1d66:	         |  |   addq.l #4,sp
      return;
    1d68:	/--------|--|-- bra.w 27a2 <CstScaleSprite+0xab8>
    }
    ystartdst = 0;
    1d6c:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    1d70:	|        |      move.w 14(sp),d0
    1d74:	|        |      ext.l d0
    1d76:	|        |      neg.l d0
    1d78:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    1d7c:	|        |      movea.l 140(sp),a0
    1d80:	|        |      move.l 4(a0),d0
    1d84:	|        |      movea.w 14(sp),a0
    1d88:	|        |      add.l a0,d0
    1d8a:	|        |      move.l d0,88(sp)
    1d8e:	|     /--|----- bra.s 1e02 <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1d90:	|     |  \----> movea.w 14(sp),a1
    1d94:	|     |         movea.l 140(sp),a0
    1d98:	|     |         move.l 4(a0),d0
    1d9c:	|     |         move.l a1,d1
    1d9e:	|     |         add.l d0,d1
    1da0:	|     |         move.l 1ad28 <winHeight>,d0
    1da6:	|     |         cmp.l d1,d0
    1da8:	|     |  /----- bge.s 1dea <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1daa:	|     |  |      movea.w 14(sp),a0
    1dae:	|     |  |      move.l 1ad28 <winHeight>,d0
    1db4:	|     |  |      cmp.l a0,d0
    1db6:	|     |  |  /-- bge.s 1dca <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1db8:	|     |  |  |   pea 16521 <PutChar+0x2c9>
    1dbe:	|     |  |  |   jsr 15784 <KPrintF>
    1dc4:	|     |  |  |   addq.l #4,sp
      return;
    1dc6:	+-----|--|--|-- bra.w 27a2 <CstScaleSprite+0xab8>
    }
    ystartdst = y;
    1dca:	|     |  |  \-> movea.w 14(sp),a0
    1dce:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    1dd2:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    1dd6:	|     |  |      move.l 1ad28 <winHeight>,d0
    1ddc:	|     |  |      movea.w 14(sp),a0
    1de0:	|     |  |      move.l d0,d1
    1de2:	|     |  |      sub.l a0,d1
    1de4:	|     |  |      move.l d1,88(sp)
    1de8:	|     +--|----- bra.s 1e02 <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1dea:	|     |  \----> movea.w 14(sp),a0
    1dee:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    1df2:	|     |         clr.l 92(sp)
    blitheight = single->height;
    1df6:	|     |         movea.l 140(sp),a0
    1dfa:	|     |         move.l 4(a0),d0
    1dfe:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1e02:	|     \-------> tst.w 16(sp)
    1e06:	|     /-------- bge.w 208c <CstScaleSprite+0x3a2>
    if(x + single->width < 0) {
    1e0a:	|     |         movea.w 16(sp),a1
    1e0e:	|     |         movea.l 140(sp),a0
    1e12:	|     |         move.l (a0),d0
    1e14:	|     |         add.l a1,d0
    1e16:	|     |     /-- bpl.s 1e2a <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1e18:	|     |     |   pea 16521 <PutChar+0x2c9>
    1e1e:	|     |     |   jsr 15784 <KPrintF>
    1e24:	|     |     |   addq.l #4,sp
      return;
    1e26:	+-----|-----|-- bra.w 27a2 <CstScaleSprite+0xab8>

    }
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1e2a:	|     |     \-> move.l 1ad0c <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    1e32:	|     |         moveq #12,d0
    1e34:	|     |         move.l d0,44(sp)
    1e38:	|     |         clr.l 40(sp)
    1e3c:	|     |         move.l 1add0 <SysBase>,d0
    1e42:	|     |         movea.l d0,a6
    1e44:	|     |         move.l 44(sp),d0
    1e48:	|     |         move.l 40(sp),d1
    1e4c:	|     |         jsr -684(a6)
    1e50:	|     |         move.l d0,36(sp)
    1e54:	|     |         move.l 36(sp),d0
    1e58:	|     |         move.l d0,1ad0c <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    1e5e:	|     |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1e64:	|     |         move.l 48(sp),8(a0)
    
    extrawords = 1;
    1e6a:	|     |         move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    1e70:	|     |         move.w 16(sp),d0
    1e74:	|     |     /-- bpl.s 1e7a <CstScaleSprite+0x190>
    1e76:	|     |     |   addi.w #15,d0
    1e7a:	|     |     \-> asr.w #4,d0
    1e7c:	|     |         neg.w d0
    1e7e:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    1e82:	|     |         move.w 16(sp),d0
    1e86:	|     |         ext.l d0
    1e88:	|     |         neg.l d0
    1e8a:	|     |         andi.l #-2147483633,d0
    1e90:	|     |     /-- bpl.s 1e9a <CstScaleSprite+0x1b0>
    1e92:	|     |     |   subq.l #1,d0
    1e94:	|     |     |   moveq #-16,d1
    1e96:	|     |     |   or.l d1,d0
    1e98:	|     |     |   addq.l #1,d0
    1e9a:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1e9e:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1ea2:	|     |         movea.l 140(sp),a0
    1ea6:	|     |         move.l 24(a0),d0
    1eaa:	|     |         move.l d0,d2
    1eac:	|     |         moveq #0,d0
    1eae:	|     |         move.w 128(sp),d0
    1eb2:	|     |         add.l d0,d0
    1eb4:	|     |         move.l d0,d3
    1eb6:	|     |         movea.l 140(sp),a0
    1eba:	|     |         move.l (a0),d0
    1ebc:	|     |     /-- bpl.s 1ec0 <CstScaleSprite+0x1d6>
    1ebe:	|     |     |   addq.l #7,d0
    1ec0:	|     |     \-> asr.l #3,d0
    1ec2:	|     |         movea.l 140(sp),a0
    1ec6:	|     |         move.l 4(a0),d1
    1eca:	|     |         move.l d1,-(sp)
    1ecc:	|     |         move.l d0,-(sp)
    1ece:	|     |         jsr 16142 <__mulsi3>
    1ed4:	|     |         addq.l #8,sp
    1ed6:	|     |         move.l d0,d1
    1ed8:	|     |         move.l d1,d0
    1eda:	|     |         add.l d0,d0
    1edc:	|     |         add.l d0,d0
    1ede:	|     |         add.l d1,d0
    1ee0:	|     |         add.l d3,d0
    1ee2:	|     |         add.l d0,d2
    1ee4:	|     |         movea.l 140(sp),a0
    1ee8:	|     |         move.l (a0),d0
    1eea:	|     |         move.l 92(sp),-(sp)
    1eee:	|     |         move.l d0,-(sp)
    1ef0:	|     |         jsr 16142 <__mulsi3>
    1ef6:	|     |         addq.l #8,sp
    1ef8:	|     |         lsr.l #3,d0
    1efa:	|     |         move.l d2,d1
    1efc:	|     |         add.l d0,d1
    1efe:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1f02:	|     |         movea.l 140(sp),a0
    1f06:	|     |         move.l 24(a0),d0
    1f0a:	|     |         move.l d0,d1
    1f0c:	|     |         moveq #0,d0
    1f0e:	|     |         move.w 128(sp),d0
    1f12:	|     |         add.l d0,d0
    1f14:	|     |         move.l d1,d2
    1f16:	|     |         add.l d0,d2
    1f18:	|     |         movea.l 140(sp),a0
    1f1c:	|     |         move.l (a0),d0
    1f1e:	|     |         move.l 92(sp),-(sp)
    1f22:	|     |         move.l d0,-(sp)
    1f24:	|     |         jsr 16142 <__mulsi3>
    1f2a:	|     |         addq.l #8,sp
    1f2c:	|     |         lsr.l #3,d0
    1f2e:	|     |         move.l d2,d1
    1f30:	|     |         add.l d0,d1
    1f32:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1f36:	|     |         move.l 1ad24 <winWidth>,d0
    1f3c:	|     |         move.l 96(sp),-(sp)
    1f40:	|     |         move.l d0,-(sp)
    1f42:	|     |         jsr 16142 <__mulsi3>
    1f48:	|     |         addq.l #8,sp
    1f4a:	|     |         lsr.l #3,d0
    1f4c:	|     |         move.l 132(sp),d1
    1f50:	|     |         add.l d1,d0
    1f52:	|     |         move.l d0,d2
    1f54:	|     |         subq.l #2,d2
    1f56:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1f5a:	|     |         move.l 1ad24 <winWidth>,d0
    1f60:	|     |         move.l 96(sp),-(sp)
    1f64:	|     |         move.l d0,-(sp)
    1f66:	|     |         jsr 16142 <__mulsi3>
    1f6c:	|     |         addq.l #8,sp
    1f6e:	|     |         lsr.l #3,d0
    1f70:	|     |         move.l 132(sp),d1
    1f74:	|     |         add.l d1,d0
    1f76:	|     |         move.l d0,d1
    1f78:	|     |         subq.l #2,d1
    1f7a:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    1f7e:	|     |         moveq #0,d0
    1f80:	|     |         move.w 126(sp),d0
    1f84:	|     |         moveq #16,d1
    1f86:	|     |         sub.l d0,d1
    1f88:	|     |         move.l d1,d0
    1f8a:	|     |         moveq #12,d2
    1f8c:	|     |         lsl.l d2,d0
    1f8e:	|     |         addi.l #4042,d0
    1f94:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    1f98:	|     |         moveq #0,d0
    1f9a:	|     |         move.w 126(sp),d0
    1f9e:	|     |         moveq #16,d1
    1fa0:	|     |         sub.l d0,d1
    1fa2:	|     |         move.l d1,d0
    1fa4:	|     |         moveq #12,d1
    1fa6:	|     |         lsl.l d1,d0
    1fa8:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    1fac:	|     |         cmpi.w #1,12(sp)
    1fb2:	|     |  /----- bne.s 2006 <CstScaleSprite+0x31c>
    {
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    1fb4:	|     |  |      movea.l 140(sp),a0
    1fb8:	|     |  |      move.l (a0),d0
    1fba:	|     |  |      movea.l d0,a0
    1fbc:	|     |  |      cmpa.w #0,a0
    1fc0:	|     |  |  /-- bge.s 1fc6 <CstScaleSprite+0x2dc>
    1fc2:	|     |  |  |   lea 15(a0),a0
    1fc6:	|     |  |  \-> move.l a0,d0
    1fc8:	|     |  |      asr.l #4,d0
    1fca:	|     |  |      move.l d0,d0
    1fcc:	|     |  |      add.w 128(sp),d0
    1fd0:	|     |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1fd6:	|     |  |      add.w 130(sp),d0
    1fda:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    1fdc:	|     |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1fe2:	|     |  |      move.l 88(sp),d0
    1fe6:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1fea:	|     |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1ff0:	|     |  |      clr.w 4(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    1ff4:	|     |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    1ffa:	|     |  |      move.l 96(sp),d0
    1ffe:	|     |  |      move.w d0,6(a0)
    2002:	|  /--|--|----- bra.w 25ca <CstScaleSprite+0x8e0>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2006:	|  |  |  \----> movea.l 140(sp),a0
    200a:	|  |  |         move.l (a0),d0
    200c:	|  |  |         movea.l d0,a0
    200e:	|  |  |         cmpa.w #0,a0
    2012:	|  |  |     /-- bge.s 2018 <CstScaleSprite+0x32e>
    2014:	|  |  |     |   lea 15(a0),a0
    2018:	|  |  |     \-> move.l a0,d0
    201a:	|  |  |         asr.l #4,d0
    201c:	|  |  |         move.l d0,d0
    201e:	|  |  |         add.w 128(sp),d0
    2022:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2028:	|  |  |         move.l a0,d1
    202a:	|  |  |         addq.l #2,d1
    202c:	|  |  |         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    2032:	|  |  |         add.w 130(sp),d0
    2036:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2038:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    203e:	|  |  |         move.l a0,d0
    2040:	|  |  |         addq.l #2,d0
    2042:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    2048:	|  |  |         move.l 88(sp),d0
    204c:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    204e:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2054:	|  |  |         move.l a0,d0
    2056:	|  |  |         addq.l #2,d0
    2058:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    205e:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2060:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2066:	|  |  |         move.l a0,d0
    2068:	|  |  |         addq.l #2,d0
    206a:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    2070:	|  |  |         move.l 96(sp),d0
    2074:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2076:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    207c:	|  |  |         move.l a0,d0
    207e:	|  |  |         addq.l #2,d0
    2080:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    2086:	|  |  |         clr.w (a0)
    2088:	|  +--|-------- bra.w 25ca <CstScaleSprite+0x8e0>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen
    208c:	|  |  \-------> movea.w 16(sp),a1
    2090:	|  |            movea.l 140(sp),a0
    2094:	|  |            move.l (a0),d0
    2096:	|  |            move.l a1,d1
    2098:	|  |            add.l d0,d1
    209a:	|  |            move.l 1ad24 <winWidth>,d0
    20a0:	|  |            cmp.l d1,d0
    20a2:	|  |  /-------- bge.w 235a <CstScaleSprite+0x670>
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    20a6:	|  |  |         move.l 1ad0c <CstCleanupQueueDrawBuffer>,64(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    20ae:	|  |  |         moveq #12,d2
    20b0:	|  |  |         move.l d2,60(sp)
    20b4:	|  |  |         clr.l 56(sp)
    20b8:	|  |  |         move.l 1add0 <SysBase>,d0
    20be:	|  |  |         movea.l d0,a6
    20c0:	|  |  |         move.l 60(sp),d0
    20c4:	|  |  |         move.l 56(sp),d1
    20c8:	|  |  |         jsr -684(a6)
    20cc:	|  |  |         move.l d0,52(sp)
    20d0:	|  |  |         move.l 52(sp),d0
    20d4:	|  |  |         move.l d0,1ad0c <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;    
    20da:	|  |  |         movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    20e0:	|  |  |         move.l 64(sp),8(a0)

    if(x - single->width > (int) winWidth)
    20e6:	|  |  |         movea.w 16(sp),a1
    20ea:	|  |  |         movea.l 140(sp),a0
    20ee:	|  |  |         move.l (a0),d0
    20f0:	|  |  |         move.l a1,d1
    20f2:	|  |  |         sub.l d0,d1
    20f4:	|  |  |         move.l 1ad24 <winWidth>,d0
    20fa:	|  |  |         cmp.l d1,d0
    20fc:	|  |  |     /-- bge.s 2110 <CstScaleSprite+0x426>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    20fe:	|  |  |     |   pea 16521 <PutChar+0x2c9>
    2104:	|  |  |     |   jsr 15784 <KPrintF>
    210a:	|  |  |     |   addq.l #4,sp
      return;
    210c:	+--|--|-----|-- bra.w 27a2 <CstScaleSprite+0xab8>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2110:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2114:	|  |  |         movea.w 16(sp),a1
    2118:	|  |  |         movea.l 140(sp),a0
    211c:	|  |  |         move.l (a0),d0
    211e:	|  |  |         add.l a1,d0
    2120:	|  |  |         move.l d0,d1
    2122:	|  |  |         move.l 1ad24 <winWidth>,d0
    2128:	|  |  |         sub.l d0,d1
    212a:	|  |  |         move.l d1,d0
    212c:	|  |  |         lsr.l #4,d0
    212e:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    2132:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2136:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    213c:	|  |  |         movea.l 140(sp),a0
    2140:	|  |  |         move.l 24(a0),d0
    2144:	|  |  |         move.l d0,d2
    2146:	|  |  |         movea.l 140(sp),a0
    214a:	|  |  |         move.l (a0),d0
    214c:	|  |  |     /-- bpl.s 2150 <CstScaleSprite+0x466>
    214e:	|  |  |     |   addq.l #7,d0
    2150:	|  |  |     \-> asr.l #3,d0
    2152:	|  |  |         movea.l 140(sp),a0
    2156:	|  |  |         move.l 4(a0),d1
    215a:	|  |  |         move.l d1,-(sp)
    215c:	|  |  |         move.l d0,-(sp)
    215e:	|  |  |         jsr 16142 <__mulsi3>
    2164:	|  |  |         addq.l #8,sp
    2166:	|  |  |         move.l d0,d1
    2168:	|  |  |         move.l d1,d0
    216a:	|  |  |         add.l d0,d0
    216c:	|  |  |         add.l d0,d0
    216e:	|  |  |         add.l d1,d0
    2170:	|  |  |         add.l d0,d2
    2172:	|  |  |         movea.l 140(sp),a0
    2176:	|  |  |         move.l (a0),d0
    2178:	|  |  |         move.l 92(sp),-(sp)
    217c:	|  |  |         move.l d0,-(sp)
    217e:	|  |  |         jsr 16142 <__mulsi3>
    2184:	|  |  |         addq.l #8,sp
    2186:	|  |  |         lsr.l #3,d0
    2188:	|  |  |         move.l d2,d1
    218a:	|  |  |         add.l d0,d1
    218c:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2190:	|  |  |         movea.l 140(sp),a0
    2194:	|  |  |         move.l 24(a0),d0
    2198:	|  |  |         move.l d0,d2
    219a:	|  |  |         movea.l 140(sp),a0
    219e:	|  |  |         move.l (a0),d0
    21a0:	|  |  |         move.l 92(sp),-(sp)
    21a4:	|  |  |         move.l d0,-(sp)
    21a6:	|  |  |         jsr 16142 <__mulsi3>
    21ac:	|  |  |         addq.l #8,sp
    21ae:	|  |  |         lsr.l #3,d0
    21b0:	|  |  |         move.l d2,d1
    21b2:	|  |  |         add.l d0,d1
    21b4:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    21b8:	|  |  |         move.l 1ad24 <winWidth>,d0
    21be:	|  |  |         move.l 96(sp),-(sp)
    21c2:	|  |  |         move.l d0,-(sp)
    21c4:	|  |  |         jsr 16142 <__mulsi3>
    21ca:	|  |  |         addq.l #8,sp
    21cc:	|  |  |         lsr.l #3,d0
    21ce:	|  |  |         move.l 132(sp),d1
    21d2:	|  |  |         add.l d0,d1
    21d4:	|  |  |         move.w 16(sp),d0
    21d8:	|  |  |     /-- bpl.s 21de <CstScaleSprite+0x4f4>
    21da:	|  |  |     |   addi.w #15,d0
    21de:	|  |  |     \-> asr.w #4,d0
    21e0:	|  |  |         movea.w d0,a0
    21e2:	|  |  |         move.l a0,d0
    21e4:	|  |  |         add.l a0,d0
    21e6:	|  |  |         move.l d1,d2
    21e8:	|  |  |         add.l d0,d2
    21ea:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    21ee:	|  |  |         move.l 1ad24 <winWidth>,d0
    21f4:	|  |  |         move.l 96(sp),-(sp)
    21f8:	|  |  |         move.l d0,-(sp)
    21fa:	|  |  |         jsr 16142 <__mulsi3>
    2200:	|  |  |         addq.l #8,sp
    2202:	|  |  |         lsr.l #3,d0
    2204:	|  |  |         move.l 132(sp),d1
    2208:	|  |  |         add.l d0,d1
    220a:	|  |  |         move.w 16(sp),d0
    220e:	|  |  |     /-- bpl.s 2214 <CstScaleSprite+0x52a>
    2210:	|  |  |     |   addi.w #15,d0
    2214:	|  |  |     \-> asr.w #4,d0
    2216:	|  |  |         movea.w d0,a0
    2218:	|  |  |         move.l a0,d0
    221a:	|  |  |         add.l a0,d0
    221c:	|  |  |         move.l d1,d2
    221e:	|  |  |         add.l d0,d2
    2220:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2224:	|  |  |         movea.l 140(sp),a0
    2228:	|  |  |         move.l (a0),d0
    222a:	|  |  |         andi.l #-2147483633,d0
    2230:	|  |  |     /-- bpl.s 223a <CstScaleSprite+0x550>
    2232:	|  |  |     |   subq.l #1,d0
    2234:	|  |  |     |   moveq #-16,d1
    2236:	|  |  |     |   or.l d1,d0
    2238:	|  |  |     |   addq.l #1,d0
    223a:	|  |  |     \-> moveq #12,d2
    223c:	|  |  |         lsl.l d2,d0
    223e:	|  |  |         addi.l #4042,d0
    2244:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    2248:	|  |  |         movea.l 140(sp),a0
    224c:	|  |  |         move.l (a0),d0
    224e:	|  |  |         andi.l #-2147483633,d0
    2254:	|  |  |     /-- bpl.s 225e <CstScaleSprite+0x574>
    2256:	|  |  |     |   subq.l #1,d0
    2258:	|  |  |     |   moveq #-16,d1
    225a:	|  |  |     |   or.l d1,d0
    225c:	|  |  |     |   addq.l #1,d0
    225e:	|  |  |     \-> moveq #12,d2
    2260:	|  |  |         lsl.l d2,d0
    2262:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2266:	|  |  |         cmpi.w #1,12(sp)
    226c:	|  |  |  /----- bne.s 22ca <CstScaleSprite+0x5e0>
    {
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    226e:	|  |  |  |      movea.l 140(sp),a0
    2272:	|  |  |  |      move.l (a0),d0
    2274:	|  |  |  |      movea.l d0,a0
    2276:	|  |  |  |      cmpa.w #0,a0
    227a:	|  |  |  |  /-- bge.s 2280 <CstScaleSprite+0x596>
    227c:	|  |  |  |  |   lea 15(a0),a0
    2280:	|  |  |  |  \-> move.l a0,d0
    2282:	|  |  |  |      asr.l #4,d0
    2284:	|  |  |  |      move.l d0,d0
    2286:	|  |  |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    228c:	|  |  |  |      add.w 128(sp),d0
    2290:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    2292:	|  |  |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    2298:	|  |  |  |      move.l 88(sp),d0
    229c:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    22a0:	|  |  |  |      move.w 16(sp),d0
    22a4:	|  |  |  |  /-- bpl.s 22aa <CstScaleSprite+0x5c0>
    22a6:	|  |  |  |  |   addi.w #15,d0
    22aa:	|  |  |  |  \-> asr.w #4,d0
    22ac:	|  |  |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    22b2:	|  |  |  |      add.w d0,d0
    22b4:	|  |  |  |      move.w d0,4(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    22b8:	|  |  |  |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    22be:	|  |  |  |      move.l 96(sp),d0
    22c2:	|  |  |  |      move.w d0,6(a0)
    22c6:	|  +--|--|----- bra.w 25ca <CstScaleSprite+0x8e0>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    22ca:	|  |  |  \----> movea.l 140(sp),a0
    22ce:	|  |  |         move.l (a0),d0
    22d0:	|  |  |         movea.l d0,a0
    22d2:	|  |  |         cmpa.w #0,a0
    22d6:	|  |  |     /-- bge.s 22dc <CstScaleSprite+0x5f2>
    22d8:	|  |  |     |   lea 15(a0),a0
    22dc:	|  |  |     \-> move.l a0,d0
    22de:	|  |  |         asr.l #4,d0
    22e0:	|  |  |         move.l d0,d0
    22e2:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    22e8:	|  |  |         move.l a0,d1
    22ea:	|  |  |         addq.l #2,d1
    22ec:	|  |  |         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    22f2:	|  |  |         add.w 128(sp),d0
    22f6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    22f8:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    22fe:	|  |  |         move.l a0,d0
    2300:	|  |  |         addq.l #2,d0
    2302:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    2308:	|  |  |         move.l 88(sp),d0
    230c:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    230e:	|  |  |         move.w 16(sp),d0
    2312:	|  |  |     /-- bpl.s 2318 <CstScaleSprite+0x62e>
    2314:	|  |  |     |   addi.w #15,d0
    2318:	|  |  |     \-> asr.w #4,d0
    231a:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2320:	|  |  |         move.l a0,d1
    2322:	|  |  |         addq.l #2,d1
    2324:	|  |  |         move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    232a:	|  |  |         add.w d0,d0
    232c:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    232e:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2334:	|  |  |         move.l a0,d0
    2336:	|  |  |         addq.l #2,d0
    2338:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    233e:	|  |  |         move.l 96(sp),d0
    2342:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2344:	|  |  |         movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    234a:	|  |  |         move.l a0,d0
    234c:	|  |  |         addq.l #2,d0
    234e:	|  |  |         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    2354:	|  |  |         clr.w (a0)
    2356:	|  +--|-------- bra.w 25ca <CstScaleSprite+0x8e0>
    }
  } else { //Whole Sprite on Screen
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    235a:	|  |  \-------> move.l 1ad0c <CstCleanupQueueDrawBuffer>,80(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2362:	|  |            moveq #12,d0
    2364:	|  |            move.l d0,76(sp)
    2368:	|  |            clr.l 72(sp)
    236c:	|  |            move.l 1add0 <SysBase>,d0
    2372:	|  |            movea.l d0,a6
    2374:	|  |            move.l 76(sp),d0
    2378:	|  |            move.l 72(sp),d1
    237c:	|  |            jsr -684(a6)
    2380:	|  |            move.l d0,68(sp)
    2384:	|  |            move.l 68(sp),d0
    2388:	|  |            move.l d0,1ad0c <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;    
    238e:	|  |            movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    2394:	|  |            move.l 80(sp),8(a0)

    extrawords = 1;
    239a:	|  |            move.w #1,130(sp)
    cutwordssource = 0;
    23a0:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    23a4:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23a8:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    23ac:	|  |            movea.l 140(sp),a0
    23b0:	|  |            move.l 24(a0),d0
    23b4:	|  |            move.l d0,d2
    23b6:	|  |            movea.l 140(sp),a0
    23ba:	|  |            move.l (a0),d0
    23bc:	|  |        /-- bpl.s 23c0 <CstScaleSprite+0x6d6>
    23be:	|  |        |   addq.l #7,d0
    23c0:	|  |        \-> asr.l #3,d0
    23c2:	|  |            movea.l 140(sp),a0
    23c6:	|  |            move.l 4(a0),d1
    23ca:	|  |            move.l d1,-(sp)
    23cc:	|  |            move.l d0,-(sp)
    23ce:	|  |            jsr 16142 <__mulsi3>
    23d4:	|  |            addq.l #8,sp
    23d6:	|  |            move.l d0,d1
    23d8:	|  |            move.l d1,d0
    23da:	|  |            add.l d0,d0
    23dc:	|  |            add.l d0,d0
    23de:	|  |            add.l d1,d0
    23e0:	|  |            add.l d0,d2
    23e2:	|  |            movea.l 140(sp),a0
    23e6:	|  |            move.l (a0),d0
    23e8:	|  |            move.l 92(sp),-(sp)
    23ec:	|  |            move.l d0,-(sp)
    23ee:	|  |            jsr 16142 <__mulsi3>
    23f4:	|  |            addq.l #8,sp
    23f6:	|  |            lsr.l #3,d0
    23f8:	|  |            move.l d2,d1
    23fa:	|  |            add.l d0,d1
    23fc:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2400:	|  |            movea.l 140(sp),a0
    2404:	|  |            move.l 24(a0),d0
    2408:	|  |            move.l d0,d2
    240a:	|  |            movea.l 140(sp),a0
    240e:	|  |            move.l (a0),d0
    2410:	|  |            move.l 92(sp),-(sp)
    2414:	|  |            move.l d0,-(sp)
    2416:	|  |            jsr 16142 <__mulsi3>
    241c:	|  |            addq.l #8,sp
    241e:	|  |            lsr.l #3,d0
    2420:	|  |            move.l d2,d1
    2422:	|  |            add.l d0,d1
    2424:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2428:	|  |            move.l 1ad24 <winWidth>,d0
    242e:	|  |            move.l 96(sp),-(sp)
    2432:	|  |            move.l d0,-(sp)
    2434:	|  |            jsr 16142 <__mulsi3>
    243a:	|  |            addq.l #8,sp
    243c:	|  |            lsr.l #3,d0
    243e:	|  |            move.l 132(sp),d1
    2442:	|  |            add.l d0,d1
    2444:	|  |            move.w 16(sp),d0
    2448:	|  |        /-- bpl.s 244e <CstScaleSprite+0x764>
    244a:	|  |        |   addi.w #15,d0
    244e:	|  |        \-> asr.w #4,d0
    2450:	|  |            movea.w d0,a0
    2452:	|  |            move.l a0,d0
    2454:	|  |            add.l a0,d0
    2456:	|  |            move.l d1,d2
    2458:	|  |            add.l d0,d2
    245a:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    245e:	|  |            move.l 1ad24 <winWidth>,d0
    2464:	|  |            move.l 96(sp),-(sp)
    2468:	|  |            move.l d0,-(sp)
    246a:	|  |            jsr 16142 <__mulsi3>
    2470:	|  |            addq.l #8,sp
    2472:	|  |            lsr.l #3,d0
    2474:	|  |            move.l 132(sp),d1
    2478:	|  |            add.l d0,d1
    247a:	|  |            move.w 16(sp),d0
    247e:	|  |        /-- bpl.s 2484 <CstScaleSprite+0x79a>
    2480:	|  |        |   addi.w #15,d0
    2484:	|  |        \-> asr.w #4,d0
    2486:	|  |            movea.w d0,a0
    2488:	|  |            move.l a0,d0
    248a:	|  |            add.l a0,d0
    248c:	|  |            move.l d1,d2
    248e:	|  |            add.l d0,d2
    2490:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    2494:	|  |            move.w 16(sp),d0
    2498:	|  |            andi.w #-32753,d0
    249c:	|  |        /-- bpl.s 24a6 <CstScaleSprite+0x7bc>
    249e:	|  |        |   subq.w #1,d0
    24a0:	|  |        |   ori.w #-16,d0
    24a4:	|  |        |   addq.w #1,d0
    24a6:	|  |        \-> ext.l d0
    24a8:	|  |            moveq #12,d1
    24aa:	|  |            lsl.l d1,d0
    24ac:	|  |            addi.l #4042,d0
    24b2:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    24b6:	|  |            move.w 16(sp),d0
    24ba:	|  |            andi.w #-32753,d0
    24be:	|  |        /-- bpl.s 24c8 <CstScaleSprite+0x7de>
    24c0:	|  |        |   subq.w #1,d0
    24c2:	|  |        |   ori.w #-16,d0
    24c6:	|  |        |   addq.w #1,d0
    24c8:	|  |        \-> ext.l d0
    24ca:	|  |            moveq #12,d2
    24cc:	|  |            lsl.l d2,d0
    24ce:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    24d2:	|  |            cmpi.w #1,12(sp)
    24d8:	|  |     /----- bne.s 253a <CstScaleSprite+0x850>
    {
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    24da:	|  |     |      movea.l 140(sp),a0
    24de:	|  |     |      move.l (a0),d0
    24e0:	|  |     |      movea.l d0,a0
    24e2:	|  |     |      cmpa.w #0,a0
    24e6:	|  |     |  /-- bge.s 24ec <CstScaleSprite+0x802>
    24e8:	|  |     |  |   lea 15(a0),a0
    24ec:	|  |     |  \-> move.l a0,d0
    24ee:	|  |     |      asr.l #4,d0
    24f0:	|  |     |      move.l d0,d0
    24f2:	|  |     |      add.w 128(sp),d0
    24f6:	|  |     |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    24fc:	|  |     |      add.w 130(sp),d0
    2500:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2502:	|  |     |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    2508:	|  |     |      move.l 88(sp),d0
    250c:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2510:	|  |     |      move.w 16(sp),d0
    2514:	|  |     |  /-- bpl.s 251a <CstScaleSprite+0x830>
    2516:	|  |     |  |   addi.w #15,d0
    251a:	|  |     |  \-> asr.w #4,d0
    251c:	|  |     |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    2522:	|  |     |      add.w d0,d0
    2524:	|  |     |      move.w d0,4(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2528:	|  |     |      movea.l 1ad0c <CstCleanupQueueDrawBuffer>,a0
    252e:	|  |     |      move.l 96(sp),d0
    2532:	|  |     |      move.w d0,6(a0)
    2536:	|  +-----|----- bra.w 25ca <CstScaleSprite+0x8e0>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    253a:	|  |     \----> movea.l 140(sp),a0
    253e:	|  |            move.l (a0),d0
    2540:	|  |            movea.l d0,a0
    2542:	|  |            cmpa.w #0,a0
    2546:	|  |        /-- bge.s 254c <CstScaleSprite+0x862>
    2548:	|  |        |   lea 15(a0),a0
    254c:	|  |        \-> move.l a0,d0
    254e:	|  |            asr.l #4,d0
    2550:	|  |            move.l d0,d0
    2552:	|  |            add.w 128(sp),d0
    2556:	|  |            movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    255c:	|  |            move.l a0,d1
    255e:	|  |            addq.l #2,d1
    2560:	|  |            move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    2566:	|  |            add.w 130(sp),d0
    256a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    256c:	|  |            movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2572:	|  |            move.l a0,d0
    2574:	|  |            addq.l #2,d0
    2576:	|  |            move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    257c:	|  |            move.l 88(sp),d0
    2580:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2582:	|  |            move.w 16(sp),d0
    2586:	|  |        /-- bpl.s 258c <CstScaleSprite+0x8a2>
    2588:	|  |        |   addi.w #15,d0
    258c:	|  |        \-> asr.w #4,d0
    258e:	|  |            movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    2594:	|  |            move.l a0,d1
    2596:	|  |            addq.l #2,d1
    2598:	|  |            move.l d1,1ad14 <CstBackDropBufferApplyCursor>
    259e:	|  |            add.w d0,d0
    25a0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    25a2:	|  |            movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    25a8:	|  |            move.l a0,d0
    25aa:	|  |            addq.l #2,d0
    25ac:	|  |            move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    25b2:	|  |            move.l 96(sp),d0
    25b6:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    25b8:	|  |            movea.l 1ad14 <CstBackDropBufferApplyCursor>,a0
    25be:	|  |            move.l a0,d0
    25c0:	|  |            addq.l #2,d0
    25c2:	|  |            move.l d0,1ad14 <CstBackDropBufferApplyCursor>
    25c8:	|  |            clr.w (a0)
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    25ca:	|  \----------> moveq #0,d0
    25cc:	|               move.w 126(sp),d0
    25d0:	|               moveq #0,d1
    25d2:	|               not.w d1
    25d4:	|               asr.l d0,d1
    25d6:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    25da:	|               moveq #0,d1
    25dc:	|               move.w 128(sp),d1
    25e0:	|               moveq #0,d0
    25e2:	|               move.w 130(sp),d0
    25e6:	|               sub.l d0,d1
    25e8:	|               move.l d1,d0
    25ea:	|               add.w d0,d0
    25ec:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    25f0:	|               moveq #0,d1
    25f2:	|               move.w 128(sp),d1
    25f6:	|               moveq #0,d0
    25f8:	|               move.w 130(sp),d0
    25fc:	|               sub.l d0,d1
    25fe:	|               move.l d1,d0
    2600:	|               add.w d0,d0
    2602:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2606:	|               move.l 1ad24 <winWidth>,d0
    260c:	|               lsr.l #3,d0
    260e:	|               move.l d0,d1
    2610:	|               movea.l 140(sp),a0
    2614:	|               move.l (a0),d0
    2616:	|           /-- bpl.s 261a <CstScaleSprite+0x930>
    2618:	|           |   addq.l #7,d0
    261a:	|           \-> asr.l #3,d0
    261c:	|               move.l d0,d0
    261e:	|               sub.w d0,d1
    2620:	|               move.w 128(sp),d0
    2624:	|               sub.w 130(sp),d0
    2628:	|               add.w d0,d0
    262a:	|               add.w d1,d0
    262c:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2630:	|               move.l 1ad24 <winWidth>,d0
    2636:	|               lsr.l #3,d0
    2638:	|               move.l d0,d1
    263a:	|               movea.l 140(sp),a0
    263e:	|               move.l (a0),d0
    2640:	|           /-- bpl.s 2644 <CstScaleSprite+0x95a>
    2642:	|           |   addq.l #7,d0
    2644:	|           \-> asr.l #3,d0
    2646:	|               move.l d0,d0
    2648:	|               sub.w d0,d1
    264a:	|               move.w 128(sp),d0
    264e:	|               sub.w 130(sp),d0
    2652:	|               add.w d0,d0
    2654:	|               add.w d1,d0
    2656:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    265a:	|               move.l #14675968,22(sp)
  WaitBlit();
    2662:	|               move.l 1addc <GfxBase>,d0
    2668:	|               movea.l d0,a6
    266a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    266e:	|               movea.l 22(sp),a0
    2672:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2678:	|               movea.l 22(sp),a0
    267c:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2682:	|               move.w 32(sp),d0
    2686:	|               movea.l 22(sp),a0
    268a:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    268e:	|               move.w 30(sp),d0
    2692:	|               movea.l 22(sp),a0
    2696:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    269a:	|               move.w 28(sp),d0
    269e:	|               movea.l 22(sp),a0
    26a2:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    26a6:	|               move.w 26(sp),d0
    26aa:	|               movea.l 22(sp),a0
    26ae:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    26b2:	|               move.l 104(sp),d0
    26b6:	|               movea.l 22(sp),a0
    26ba:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    26be:	|               move.l 100(sp),d0
    26c2:	|               movea.l 22(sp),a0
    26c6:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    26ca:	|               movea.l 140(sp),a0
    26ce:	|               move.l (a0),d0
    26d0:	|               asr.l #3,d0
    26d2:	|               move.l d0,d1
    26d4:	|               movea.l 140(sp),a0
    26d8:	|               move.l 4(a0),d0
    26dc:	|               move.l d0,d0
    26de:	|               move.w d1,d2
    26e0:	|               muls.w d0,d2
    26e2:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    26e6:	|               move.l 1ad24 <winWidth>,d0
    26ec:	|               lsr.l #3,d0
    26ee:	|               move.l d0,d1
    26f0:	|               move.l 1ad28 <winHeight>,d0
    26f6:	|               move.l d0,d0
    26f8:	|               move.w d1,d2
    26fa:	|               muls.w d0,d2
    26fc:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2700:	|               clr.l 84(sp)
    2704:	|        /----- bra.w 2798 <CstScaleSprite+0xaae>
  {
    custom->bltapt = (APTR) bltapt;
    2708:	|     /--|----> move.l 120(sp),d0
    270c:	|     |  |      movea.l 22(sp),a0
    2710:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    2714:	|     |  |      move.l 116(sp),d0
    2718:	|     |  |      movea.l 22(sp),a0
    271c:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    2720:	|     |  |      move.l 112(sp),d0
    2724:	|     |  |      movea.l 22(sp),a0
    2728:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    272c:	|     |  |      move.l 108(sp),d0
    2730:	|     |  |      movea.l 22(sp),a0
    2734:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2738:	|     |  |      move.l 88(sp),d0
    273c:	|     |  |      move.w d0,d1
    273e:	|     |  |      lsl.w #6,d1
    2740:	|     |  |      movea.l 140(sp),a0
    2744:	|     |  |      move.l (a0),d0
    2746:	|     |  |      movea.l d0,a0
    2748:	|     |  |      cmpa.w #0,a0
    274c:	|     |  |  /-- bge.s 2752 <CstScaleSprite+0xa68>
    274e:	|     |  |  |   lea 15(a0),a0
    2752:	|     |  |  \-> move.l a0,d0
    2754:	|     |  |      asr.l #4,d0
    2756:	|     |  |      move.l d0,d0
    2758:	|     |  |      add.w d1,d0
    275a:	|     |  |      sub.w 128(sp),d0
    275e:	|     |  |      add.w 130(sp),d0
    2762:	|     |  |      movea.l 22(sp),a0
    2766:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    276a:	|     |  |      moveq #0,d0
    276c:	|     |  |      move.w 20(sp),d0
    2770:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    2774:	|     |  |      moveq #0,d0
    2776:	|     |  |      move.w 18(sp),d0
    277a:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    277e:	|     |  |      moveq #0,d0
    2780:	|     |  |      move.w 18(sp),d0
    2784:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    2788:	|     |  |      move.l 1addc <GfxBase>,d0
    278e:	|     |  |      movea.l d0,a6
    2790:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2794:	|     |  |      addq.l #1,84(sp)
    2798:	|     |  \----> moveq #4,d0
    279a:	|     |         cmp.l 84(sp),d0
    279e:	|     \-------- bge.w 2708 <CstScaleSprite+0xa1e>
  }   
}
    27a2:	\-------------> movem.l (sp)+,d2-d3/a6
    27a6:	                lea 124(sp),sp
    27aa:	                rts

000027ac <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    27ac:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27ae:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    27b4:	move.l 8(sp),d0
    27b8:	movea.l (sp),a0
    27ba:	move.l d0,128(a0)
}
    27be:	nop
    27c0:	addq.l #4,sp
    27c2:	rts

000027c4 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    27c4:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    27c8:	move.l 1ad00 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    27d0:	move.l 1ad04 <CstDrawBuffer>,d0
    27d6:	move.l d0,1ad00 <CstViewBuffer>
  CstDrawBuffer = tmp;
    27dc:	move.l 16(sp),1ad04 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    27e4:	move.l 1ad08 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    27ec:	move.l 1ad0c <CstCleanupQueueDrawBuffer>,d0
    27f2:	move.l d0,1ad08 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    27f8:	move.l 12(sp),1ad0c <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    2800:	move.l 1acfa <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    2808:	move.l 1ad00 <CstViewBuffer>,d0
    280e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    2812:	move.l 4(sp),d0
    2816:	clr.w d0
    2818:	swap d0
    281a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    281e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    2822:	movea.w #118,a0
    2826:	adda.l 8(sp),a0
    282a:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    282c:	movea.w #114,a0
    2830:	adda.l 8(sp),a0
    2834:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2838:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2840:	move.l 4(sp),d0
    2844:	clr.w d0
    2846:	swap d0
    2848:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    284c:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    2850:	movea.w #126,a0
    2854:	adda.l 8(sp),a0
    2858:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    285a:	movea.w #122,a0
    285e:	adda.l 8(sp),a0
    2862:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    2866:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    286e:	move.l 4(sp),d0
    2872:	clr.w d0
    2874:	swap d0
    2876:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    287a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    287e:	movea.l 8(sp),a0
    2882:	lea 134(a0),a0
    2886:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2888:	movea.l 8(sp),a0
    288c:	lea 130(a0),a0
    2890:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2894:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    289c:	move.l 4(sp),d0
    28a0:	clr.w d0
    28a2:	swap d0
    28a4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    28a8:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    28ac:	movea.l 8(sp),a0
    28b0:	lea 142(a0),a0
    28b4:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    28b6:	movea.l 8(sp),a0
    28ba:	lea 138(a0),a0
    28be:	move.w 2(sp),(a0)

  ptr +=  40*256;
    28c2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    28ca:	move.l 4(sp),d0
    28ce:	clr.w d0
    28d0:	swap d0
    28d2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    28d6:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    28da:	movea.l 8(sp),a0
    28de:	lea 150(a0),a0
    28e2:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    28e4:	movea.l 8(sp),a0
    28e8:	lea 146(a0),a0
    28ec:	move.w 2(sp),(a0)

}
    28f0:	nop
    28f2:	lea 20(sp),sp
    28f6:	rts

000028f8 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    28f8:	          lea -56(sp),sp
    28fc:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    28fe:	          pea 16554 <PutChar+0x2fc>
    2904:	          jsr 15784 <KPrintF>
    290a:	          addq.l #4,sp

  width = width / 8;
    290c:	          move.l 64(sp),d0
    2910:	      /-- bpl.s 2914 <CstReserveBackdrop+0x1c>
    2912:	      |   addq.l #7,d0
    2914:	      \-> asr.l #3,d0
    2916:	          move.l d0,64(sp)

  if( width < 40) 
    291a:	          moveq #39,d0
    291c:	          cmp.l 64(sp),d0
    2920:	      /-- blt.s 2936 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2922:	      |   pea 1656e <PutChar+0x316>
    2928:	      |   jsr 15784 <KPrintF>
    292e:	      |   addq.l #4,sp
    return FALSE;
    2930:	      |   clr.w d0
    2932:	/-----|-- bra.w 2c5c <CstReserveBackdrop+0x364>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    2936:	|     \-> pea 165ac <PutChar+0x354>
    293c:	|         jsr 15784 <KPrintF>
    2942:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    2944:	|         move.l 64(sp),-(sp)
    2948:	|         jsr 1114 <CstCreateCopperlist>
    294e:	|         addq.l #4,sp
    2950:	|         move.l d0,1acfa <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    2956:	|         pea 165cc <PutChar+0x374>
    295c:	|         jsr 15784 <KPrintF>
    2962:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    2964:	|         move.l 64(sp),d1
    2968:	|         move.l 68(sp),d0
    296c:	|         muls.w d1,d0
    296e:	|         move.w d0,1acf4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2974:	|         move.w 1acf4 <CstBackdropSizePlane>,d1
    297a:	|         move.w d1,d0
    297c:	|         add.w d0,d0
    297e:	|         add.w d0,d0
    2980:	|         add.w d1,d0
    2982:	|         move.w d0,1acf2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2988:	|         move.w 1acf2 <CstBackdropSize>,d0
    298e:	|         move.w d0,d0
    2990:	|         andi.l #65535,d0
    2996:	|         move.l d0,48(sp)
    299a:	|         moveq #2,d1
    299c:	|         move.l d1,44(sp)
    29a0:	|         move.l 1add0 <SysBase>,d0
    29a6:	|         movea.l d0,a6
    29a8:	|         move.l 48(sp),d0
    29ac:	|         move.l 44(sp),d1
    29b0:	|         jsr -684(a6)
    29b4:	|         move.l d0,40(sp)
    29b8:	|         move.l 40(sp),d0
    29bc:	|         move.l d0,1acf6 <CstBackDrop>
  if( !CstBackDrop)
    29c2:	|         move.l 1acf6 <CstBackDrop>,d0
    29c8:	|     /-- bne.s 29de <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    29ca:	|     |   pea 165f3 <PutChar+0x39b>
    29d0:	|     |   jsr 15784 <KPrintF>
    29d6:	|     |   addq.l #4,sp
    return FALSE;  
    29d8:	|     |   clr.w d0
    29da:	+-----|-- bra.w 2c5c <CstReserveBackdrop+0x364>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    29de:	|     \-> pea 1662b <PutChar+0x3d3>
    29e4:	|         jsr 15784 <KPrintF>
    29ea:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    29ec:	|         move.l 1acf6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    29f4:	|         clr.l 52(sp)
    29f8:	|     /-- bra.s 2a0e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    29fa:	|  /--|-> move.l 56(sp),d0
    29fe:	|  |  |   move.l d0,d1
    2a00:	|  |  |   addq.l #4,d1
    2a02:	|  |  |   move.l d1,56(sp)
    2a06:	|  |  |   movea.l d0,a0
    2a08:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    2a0a:	|  |  |   addq.l #1,52(sp)
    2a0e:	|  |  \-> move.w 1acf2 <CstBackdropSize>,d0
    2a14:	|  |      lsr.w #2,d0
    2a16:	|  |      move.w d0,d0
    2a18:	|  |      andi.l #65535,d0
    2a1e:	|  |      cmp.l 52(sp),d0
    2a22:	|  \----- bgt.s 29fa <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2a24:	|         move.w 1acf2 <CstBackdropSize>,d0
    2a2a:	|         move.w d0,d0
    2a2c:	|         andi.l #65535,d0
    2a32:	|         move.l 64(sp),d1
    2a36:	|         add.l d1,d1
    2a38:	|         add.l d1,d0
    2a3a:	|         move.l d0,36(sp)
    2a3e:	|         moveq #2,d0
    2a40:	|         move.l d0,32(sp)
    2a44:	|         move.l 1add0 <SysBase>,d0
    2a4a:	|         movea.l d0,a6
    2a4c:	|         move.l 36(sp),d0
    2a50:	|         move.l 32(sp),d1
    2a54:	|         jsr -684(a6)
    2a58:	|         move.l d0,28(sp)
    2a5c:	|         move.l 28(sp),d0
    2a60:	|         move.l d0,1ad04 <CstDrawBuffer>
  if( !CstDrawBuffer)
    2a66:	|         move.l 1ad04 <CstDrawBuffer>,d0
    2a6c:	|     /-- bne.s 2a82 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2a6e:	|     |   pea 16651 <PutChar+0x3f9>
    2a74:	|     |   jsr 15784 <KPrintF>
    2a7a:	|     |   addq.l #4,sp
    return FALSE;  
    2a7c:	|     |   clr.w d0
    2a7e:	+-----|-- bra.w 2c5c <CstReserveBackdrop+0x364>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2a82:	|     \-> pea 1668b <PutChar+0x433>
    2a88:	|         jsr 15784 <KPrintF>
    2a8e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 100*3*2,MEMF_ANY);
    2a90:	|         move.l #600,24(sp)
    2a98:	|         clr.l 20(sp)
    2a9c:	|         move.l 1add0 <SysBase>,d0
    2aa2:	|         movea.l d0,a6
    2aa4:	|         move.l 24(sp),d0
    2aa8:	|         move.l 20(sp),d1
    2aac:	|         jsr -684(a6)
    2ab0:	|         move.l d0,16(sp)
    2ab4:	|         move.l 16(sp),d0
    2ab8:	|         move.l d0,1ad10 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2abe:	|         move.l 1ad10 <CstBackDropBufferApplyStart>,d0
    2ac4:	|     /-- bne.s 2ada <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    2ac6:	|     |   pea 166b3 <PutChar+0x45b>
    2acc:	|     |   jsr 15784 <KPrintF>
    2ad2:	|     |   addq.l #4,sp
    return FALSE;  
    2ad4:	|     |   clr.w d0
    2ad6:	+-----|-- bra.w 2c5c <CstReserveBackdrop+0x364>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2ada:	|     \-> move.l 1ad10 <CstBackDropBufferApplyStart>,d0
    2ae0:	|         move.l d0,1ad14 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    2ae6:	|         movea.l 1ad10 <CstBackDropBufferApplyStart>,a0
    2aec:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    2aee:	|         movea.l 1ad10 <CstBackDropBufferApplyStart>,a0
    2af4:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2af6:	|         move.w 1acf2 <CstBackdropSize>,d0
    2afc:	|         move.w d0,d0
    2afe:	|         andi.l #65535,d0
    2b04:	|         move.l 64(sp),d1
    2b08:	|         add.l d1,d1
    2b0a:	|         add.l d1,d0
    2b0c:	|         move.l d0,12(sp)
    2b10:	|         moveq #2,d1
    2b12:	|         move.l d1,8(sp)
    2b16:	|         move.l 1add0 <SysBase>,d0
    2b1c:	|         movea.l d0,a6
    2b1e:	|         move.l 12(sp),d0
    2b22:	|         move.l 8(sp),d1
    2b26:	|         jsr -684(a6)
    2b2a:	|         move.l d0,4(sp)
    2b2e:	|         move.l 4(sp),d0
    2b32:	|         move.l d0,1ad00 <CstViewBuffer>
  if( !CstViewBuffer)
    2b38:	|         move.l 1ad00 <CstViewBuffer>,d0
    2b3e:	|     /-- bne.s 2b54 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2b40:	|     |   pea 166fe <PutChar+0x4a6>
    2b46:	|     |   jsr 15784 <KPrintF>
    2b4c:	|     |   addq.l #4,sp
    return FALSE;  
    2b4e:	|     |   clr.w d0
    2b50:	+-----|-- bra.w 2c5c <CstReserveBackdrop+0x364>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2b54:	|     \-> pea 16738 <PutChar+0x4e0>
    2b5a:	|         jsr 15784 <KPrintF>
    2b60:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2b62:	|         move.l 1ad04 <CstDrawBuffer>,d1
    2b68:	|         move.l 64(sp),d0
    2b6c:	|     /-- bpl.s 2b70 <CstReserveBackdrop+0x278>
    2b6e:	|     |   addq.l #3,d0
    2b70:	|     \-> asr.l #2,d0
    2b72:	|         add.l d0,d0
    2b74:	|         add.l d0,d0
    2b76:	|         add.l d1,d0
    2b78:	|         move.l d0,1ad04 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2b7e:	|         move.l 1ad00 <CstViewBuffer>,d1
    2b84:	|         move.l 64(sp),d0
    2b88:	|     /-- bpl.s 2b8c <CstReserveBackdrop+0x294>
    2b8a:	|     |   addq.l #3,d0
    2b8c:	|     \-> asr.l #2,d0
    2b8e:	|         add.l d0,d0
    2b90:	|         add.l d0,d0
    2b92:	|         add.l d1,d0
    2b94:	|         move.l d0,1ad00 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    2b9a:	|         move.l 1acf6 <CstBackDrop>,d0
    2ba0:	|         clr.l -(sp)
    2ba2:	|         pea 5 <_start+0x5>
    2ba6:	|         pea 100 <copyString+0x48>
    2baa:	|         pea 140 <decodeFilename+0x28>
    2bae:	|         pea 16760 <PutChar+0x508>
    2bb4:	|         move.l d0,-(sp)
    2bb6:	|         jsr 1586c <debug_register_bitmap>
    2bbc:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    2bc0:	|         move.l 68(sp),d0
    2bc4:	|         movea.w d0,a1
    2bc6:	|         move.l 64(sp),d0
    2bca:	|         lsl.w #3,d0
    2bcc:	|         movea.w d0,a0
    2bce:	|         move.l 1ad04 <CstDrawBuffer>,d0
    2bd4:	|         clr.l -(sp)
    2bd6:	|         pea 5 <_start+0x5>
    2bda:	|         move.l a1,-(sp)
    2bdc:	|         move.l a0,-(sp)
    2bde:	|         pea 16770 <PutChar+0x518>
    2be4:	|         move.l d0,-(sp)
    2be6:	|         jsr 1586c <debug_register_bitmap>
    2bec:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    2bf0:	|         move.l 68(sp),d0
    2bf4:	|         movea.w d0,a1
    2bf6:	|         move.l 64(sp),d0
    2bfa:	|         lsl.w #3,d0
    2bfc:	|         movea.w d0,a0
    2bfe:	|         move.l 1ad00 <CstViewBuffer>,d0
    2c04:	|         clr.l -(sp)
    2c06:	|         pea 5 <_start+0x5>
    2c0a:	|         move.l a1,-(sp)
    2c0c:	|         move.l a0,-(sp)
    2c0e:	|         pea 1677f <PutChar+0x527>
    2c14:	|         move.l d0,-(sp)
    2c16:	|         jsr 1586c <debug_register_bitmap>
    2c1c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2c20:	|         move.l 1acfa <CstCopperList>,d0
    2c26:	|     /-- beq.s 2c38 <CstReserveBackdrop+0x340>
    2c28:	|     |   move.l 1ad04 <CstDrawBuffer>,d0
    2c2e:	|     +-- beq.s 2c38 <CstReserveBackdrop+0x340>
    2c30:	|     |   move.l 1ad00 <CstViewBuffer>,d0
    2c36:	|  /--|-- bne.s 2c4a <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2c38:	|  |  \-> pea 1678e <PutChar+0x536>
    2c3e:	|  |      jsr 15784 <KPrintF>
    2c44:	|  |      addq.l #4,sp
    return FALSE;
    2c46:	|  |      clr.w d0
    2c48:	+--|----- bra.s 2c5c <CstReserveBackdrop+0x364>
  }

  CstSetCl( CstCopperList);
    2c4a:	|  \----> move.l 1acfa <CstCopperList>,d0
    2c50:	|         move.l d0,-(sp)
    2c52:	|         jsr 27ac <CstSetCl>
    2c58:	|         addq.l #4,sp
  return TRUE;
    2c5a:	|         moveq #1,d0

}
    2c5c:	\-------> movea.l (sp)+,a6
    2c5e:	          lea 56(sp),sp
    2c62:	          rts

00002c64 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    2c64:	    lea -16(sp),sp
    2c68:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    2c6a:	    move.l 1ad04 <CstDrawBuffer>,d0
    2c70:	/-- beq.s 2c8a <CstFreeBuffer+0x26>
    2c72:	|   move.l 1ad04 <CstDrawBuffer>,16(sp)
    2c7a:	|   move.l 1add0 <SysBase>,d0
    2c80:	|   movea.l d0,a6
    2c82:	|   movea.l 16(sp),a1
    2c86:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    2c8a:	\-> move.l 1ad00 <CstViewBuffer>,d0
    2c90:	/-- beq.s 2caa <CstFreeBuffer+0x46>
    2c92:	|   move.l 1ad00 <CstViewBuffer>,12(sp)
    2c9a:	|   move.l 1add0 <SysBase>,d0
    2ca0:	|   movea.l d0,a6
    2ca2:	|   movea.l 12(sp),a1
    2ca6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    2caa:	\-> move.l 1acfa <CstCopperList>,d0
    2cb0:	/-- beq.s 2cca <CstFreeBuffer+0x66>
    2cb2:	|   move.l 1acfa <CstCopperList>,8(sp)
    2cba:	|   move.l 1add0 <SysBase>,d0
    2cc0:	|   movea.l d0,a6
    2cc2:	|   movea.l 8(sp),a1
    2cc6:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    2cca:	\-> move.l 1acf6 <CstBackDrop>,d0
    2cd0:	/-- beq.s 2cea <CstFreeBuffer+0x86>
    2cd2:	|   move.l 1acf6 <CstBackDrop>,4(sp)
    2cda:	|   move.l 1add0 <SysBase>,d0
    2ce0:	|   movea.l d0,a6
    2ce2:	|   movea.l 4(sp),a1
    2ce6:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    2cea:	\-> clr.l 1ad04 <CstDrawBuffer>
  CstViewBuffer = NULL;
    2cf0:	    clr.l 1ad00 <CstViewBuffer>
  CstCopperList = NULL;
    2cf6:	    clr.l 1acfa <CstCopperList>
  CstBackDrop = NULL;
    2cfc:	    clr.l 1acf6 <CstBackDrop>

}
    2d02:	    nop
    2d04:	    movea.l (sp)+,a6
    2d06:	    lea 16(sp),sp
    2d0a:	    rts

00002d0c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2d0c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2d10:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2d14:	       tst.l 24(sp)
    2d18:	   /-- bge.s 2d1e <drawLine+0x12>
    2d1a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2d1e:	   \-> tst.l 28(sp)
    2d22:	   /-- bge.s 2d28 <drawLine+0x1c>
    2d24:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2d28:	   \-> tst.l 32(sp)
    2d2c:	   /-- bge.s 2d32 <drawLine+0x26>
    2d2e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2d32:	   \-> tst.l 36(sp)
    2d36:	   /-- bge.s 2d3c <drawLine+0x30>
    2d38:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2d3c:	   \-> move.l 1aec4 <sceneWidth>,d0
    2d42:	       cmp.l 24(sp),d0
    2d46:	   /-- bge.s 2d56 <drawLine+0x4a>
    2d48:	   |   move.l 1aec4 <sceneWidth>,d0
    2d4e:	   |   move.l d0,d1
    2d50:	   |   subq.l #1,d1
    2d52:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2d56:	   \-> move.l 1aec4 <sceneWidth>,d0
    2d5c:	       cmp.l 32(sp),d0
    2d60:	   /-- bge.s 2d70 <drawLine+0x64>
    2d62:	   |   move.l 1aec4 <sceneWidth>,d0
    2d68:	   |   move.l d0,d1
    2d6a:	   |   subq.l #1,d1
    2d6c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2d70:	   \-> move.l 1aec8 <sceneHeight>,d0
    2d76:	       cmp.l 28(sp),d0
    2d7a:	   /-- bge.s 2d8a <drawLine+0x7e>
    2d7c:	   |   move.l 1aec8 <sceneHeight>,d0
    2d82:	   |   move.l d0,d1
    2d84:	   |   subq.l #1,d1
    2d86:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2d8a:	   \-> move.l 1aec8 <sceneHeight>,d0
    2d90:	       cmp.l 36(sp),d0
    2d94:	   /-- bge.s 2da4 <drawLine+0x98>
    2d96:	   |   move.l 1aec8 <sceneHeight>,d0
    2d9c:	   |   move.l d0,d1
    2d9e:	   |   subq.l #1,d1
    2da0:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2da4:	   \-> move.l 24(sp),d0
    2da8:	       cmp.l 32(sp),d0
    2dac:	/----- ble.s 2dc8 <drawLine+0xbc>
		x = x2; 
    2dae:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2db4:	|      tst.w 10(sp)
    2db8:	|      seq d0
    2dba:	|      neg.b d0
    2dbc:	|      move.b d0,d0
    2dbe:	|      andi.w #255,d0
    2dc2:	|      move.w d0,10(sp)
    2dc6:	|  /-- bra.s 2dce <drawLine+0xc2>
	} else x = x1;
    2dc8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2dce:	   \-> move.l 28(sp),d1
    2dd2:	       cmp.l 36(sp),d1
    2dd6:	/----- ble.s 2df2 <drawLine+0xe6>
		y = y2; 
    2dd8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2dde:	|      tst.w 10(sp)
    2de2:	|      seq d0
    2de4:	|      neg.b d0
    2de6:	|      move.b d0,d0
    2de8:	|      andi.w #255,d0
    2dec:	|      move.w d0,10(sp)
    2df0:	|  /-- bra.s 2df8 <drawLine+0xec>
	} else y = y1;	
    2df2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2df8:	   \-> move.l 32(sp),d0
    2dfc:	       sub.l 24(sp),d0
    2e00:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2e04:	       move.l 6(sp),d0
    2e08:	   /-- bpl.s 2e0c <drawLine+0x100>
    2e0a:	   |   neg.l d0
    2e0c:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2e10:	       move.l 36(sp),d1
    2e14:	       sub.l 28(sp),d1
    2e18:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2e1c:	       move.l 2(sp),d0
    2e20:	   /-- bpl.s 2e24 <drawLine+0x118>
    2e22:	   |   neg.l d0
    2e24:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2e28:	       tst.l 6(sp)
    2e2c:	   /-- bne.s 2e50 <drawLine+0x144>
		diffX = 1;
    2e2e:	   |   moveq #1,d0
    2e30:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2e34:	   |   move.l 1aec4 <sceneWidth>,d0
    2e3a:	   |   subq.l #1,d0
    2e3c:	   |   cmp.l 16(sp),d0
    2e40:	   +-- bne.s 2e50 <drawLine+0x144>
    2e42:	   |   move.l 1aec4 <sceneWidth>,d0
    2e48:	   |   move.l d0,d1
    2e4a:	   |   subq.l #2,d1
    2e4c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    2e50:	   \-> tst.l 2(sp)
    2e54:	   /-- bne.s 2e78 <drawLine+0x16c>
		diffY = 1;
    2e56:	   |   moveq #1,d0
    2e58:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2e5c:	   |   move.l 1aec8 <sceneHeight>,d0
    2e62:	   |   subq.l #1,d0
    2e64:	   |   cmp.l 12(sp),d0
    2e68:	   +-- bne.s 2e78 <drawLine+0x16c>
    2e6a:	   |   move.l 1aec8 <sceneHeight>,d0
    2e70:	   |   move.l d0,d1
    2e72:	   |   subq.l #2,d1
    2e74:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2e78:	   \-> pea 167bb <PutChar+0x563>
    2e7e:	       jsr 15784 <KPrintF>
    2e84:	       addq.l #4,sp
	
}
    2e86:	       nop
    2e88:	       lea 20(sp),sp
    2e8c:	       rts

00002e8e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    2e8e:	                      lea -24(sp),sp
    2e92:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    2e94:	                      move.l 1ad2c <firstTexture>,d0
    2e9a:	/-------------------- beq.w 2f78 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2e9e:	|                     clr.l 24(sp)
    2ea2:	|     /-------------- bra.w 2f6c <deleteTextures+0xde>
			BOOL found = FALSE;
    2ea6:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2eaa:	|  |  |               move.l 1ad2c <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    2eb2:	|  |  |               movea.l 20(sp),a0
    2eb6:	|  |  |               move.l (a0),d1
    2eb8:	|  |  |               move.l 24(sp),d0
    2ebc:	|  |  |               add.l d0,d0
    2ebe:	|  |  |               add.l d0,d0
    2ec0:	|  |  |               movea.l 36(sp),a0
    2ec4:	|  |  |               adda.l d0,a0
    2ec6:	|  |  |               move.l (a0),d0
    2ec8:	|  |  |               cmp.l d1,d0
    2eca:	|  |  |  /----------- bne.w 2f5e <deleteTextures+0xd0>
				found = TRUE;
    2ece:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    2ed4:	|  |  |  |            movea.l 20(sp),a0
    2ed8:	|  |  |  |            move.l 12(a0),d0
    2edc:	|  |  |  |            move.l d0,1ad2c <firstTexture>
				FreeVec(list);
    2ee2:	|  |  |  |            move.l 20(sp),6(sp)
    2ee8:	|  |  |  |            move.l 1add0 <SysBase>,d0
    2eee:	|  |  |  |            movea.l d0,a6
    2ef0:	|  |  |  |            movea.l 6(sp),a1
    2ef4:	|  |  |  |            jsr -690(a6)
				continue;
    2ef8:	|  |  |  |  /-------- bra.s 2f68 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    2efa:	|  |  |  |  |  /----> movea.l 20(sp),a0
    2efe:	|  |  |  |  |  |      movea.l 12(a0),a0
    2f02:	|  |  |  |  |  |      move.l (a0),d1
    2f04:	|  |  |  |  |  |      move.l 24(sp),d0
    2f08:	|  |  |  |  |  |      add.l d0,d0
    2f0a:	|  |  |  |  |  |      add.l d0,d0
    2f0c:	|  |  |  |  |  |      movea.l 36(sp),a0
    2f10:	|  |  |  |  |  |      adda.l d0,a0
    2f12:	|  |  |  |  |  |      move.l (a0),d0
    2f14:	|  |  |  |  |  |      cmp.l d1,d0
    2f16:	|  |  |  |  |  |  /-- bne.s 2f54 <deleteTextures+0xc6>
					found = TRUE;
    2f18:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2f1e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f22:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2f28:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f2c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2f30:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2f34:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f38:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2f3c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    2f42:	|  |  |  |  |  |  |   move.l 1add0 <SysBase>,d0
    2f48:	|  |  |  |  |  |  |   movea.l d0,a6
    2f4a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    2f4e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    2f52:	|  |  |  |  +--|--|-- bra.s 2f68 <deleteTextures+0xda>
				}
				list = list->next;
    2f54:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2f58:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    2f5e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    2f62:	|  |  |     |  |      move.l 12(a0),d0
    2f66:	|  |  |     |  \----- bne.s 2efa <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2f68:	|  |  |     \-------> addq.l #1,24(sp)
    2f6c:	|  |  \-------------> move.l 24(sp),d0
    2f70:	|  |                  cmp.l 32(sp),d0
    2f74:	|  \----------------- bcs.w 2ea6 <deleteTextures+0x18>
			}
		}
	}
}
    2f78:	\-------------------> nop
    2f7a:	                      movea.l (sp)+,a6
    2f7c:	                      lea 24(sp),sp
    2f80:	                      rts

00002f82 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    2f82:	subq.l #4,sp
    2f84:	move.l 8(sp),d0
    2f88:	move.w d0,d0
    2f8a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    2f8e:	pea 167de <PutChar+0x586>
    2f94:	jsr 15784 <KPrintF>
    2f9a:	addq.l #4,sp
}
    2f9c:	nop
    2f9e:	addq.l #4,sp
    2fa0:	rts

00002fa2 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    2fa2:	       moveq #-1,d0
    2fa4:	       cmp.l 4(sp),d0
    2fa8:	   /-- bne.s 2fae <resourceNameFromNum+0xc>
    2faa:	   |   moveq #0,d0
    2fac:	/--|-- bra.s 2fe6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    2fae:	|  \-> move.l 1adac <numResourceNames>,d0
    2fb4:	|  /-- bne.s 2fbe <resourceNameFromNum+0x1c>
    2fb6:	|  |   move.l #92174,d0
    2fbc:	+--|-- bra.s 2fe6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    2fbe:	|  \-> move.l 1adac <numResourceNames>,d0
    2fc4:	|      cmp.l 4(sp),d0
    2fc8:	|  /-- ble.s 2fe0 <resourceNameFromNum+0x3e>
    2fca:	|  |   move.l 1ad64 <allResourceNames>,d1
    2fd0:	|  |   move.l 4(sp),d0
    2fd4:	|  |   add.l d0,d0
    2fd6:	|  |   add.l d0,d0
    2fd8:	|  |   movea.l d1,a0
    2fda:	|  |   adda.l d0,a0
    2fdc:	|  |   move.l (a0),d0
    2fde:	+--|-- bra.s 2fe6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    2fe0:	|  \-> move.l #92183,d0
    2fe6:	\----> rts

00002fe8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    2fe8:	          lea -44(sp),sp
    2fec:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    2ff0:	          move.l #320,1ad24 <winWidth>
    winHeight = 256;
    2ffa:	          move.l #256,1ad28 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3004:	          tst.l 60(sp)
    3008:	      /-- bne.s 3020 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    300a:	      |   pea 16828 <PutChar+0x5d0>
    3010:	      |   jsr b8 <copyString>
    3016:	      |   addq.l #4,sp
    3018:	      |   move.l d0,1ad3c <bundleFolder>
    301e:	   /--|-- bra.s 3036 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3020:	   |  \-> movea.l 64(sp),a0
    3024:	   |      move.l (a0),d0
    3026:	   |      move.l d0,-(sp)
    3028:	   |      jsr b8 <copyString>
    302e:	   |      addq.l #4,sp
    3030:	   |      move.l d0,1ad3c <bundleFolder>
	}
    
	int lastSlash = -1;
    3036:	   \----> moveq #-1,d0
    3038:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    303c:	          clr.l 44(sp)
    3040:	   /----- bra.s 3062 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3042:	/--|----> move.l 1ad3c <bundleFolder>,d1
    3048:	|  |      move.l 44(sp),d0
    304c:	|  |      movea.l d1,a0
    304e:	|  |      adda.l d0,a0
    3050:	|  |      move.b (a0),d0
    3052:	|  |      cmpi.b #47,d0
    3056:	|  |  /-- bne.s 305e <main_sludge+0x76>
    3058:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    305e:	|  |  \-> addq.l #1,44(sp)
    3062:	|  \----> move.l 1ad3c <bundleFolder>,d1
    3068:	|         move.l 44(sp),d0
    306c:	|         movea.l d1,a0
    306e:	|         adda.l d0,a0
    3070:	|         move.b (a0),d0
    3072:	\-------- bne.s 3042 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3074:	          move.l 1ad3c <bundleFolder>,d0
    307a:	          move.l 48(sp),d1
    307e:	          addq.l #1,d1
    3080:	          movea.l d0,a0
    3082:	          adda.l d1,a0
    3084:	          clr.b (a0)

	if (argc > 1) {
    3086:	          moveq #1,d0
    3088:	          cmp.l 60(sp),d0
    308c:	      /-- bge.s 30a8 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    308e:	      |   move.l 60(sp),d0
    3092:	      |   addi.l #1073741823,d0
    3098:	      |   add.l d0,d0
    309a:	      |   add.l d0,d0
    309c:	      |   movea.l 64(sp),a0
    30a0:	      |   adda.l d0,a0
    30a2:	      |   move.l (a0),52(sp)
    30a6:	   /--|-- bra.s 3102 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    30a8:	   |  \-> move.l 1ad3c <bundleFolder>,d0
    30ae:	   |      pea 1682e <PutChar+0x5d6>
    30b4:	   |      move.l d0,-(sp)
    30b6:	   |      jsr 12ae4 <joinStrings>
    30bc:	   |      addq.l #8,sp
    30be:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    30c2:	   |      move.l 52(sp),-(sp)
    30c6:	   |      jsr 129de <fileExists>
    30cc:	   |      addq.l #4,sp
    30ce:	   |      tst.b d0
    30d0:	   +----- bne.s 3102 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    30d2:	   |      move.l 52(sp),40(sp)
    30d8:	   |      move.l 1add0 <SysBase>,d0
    30de:	   |      movea.l d0,a6
    30e0:	   |      movea.l 40(sp),a1
    30e4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    30e8:	   |      move.l 1ad3c <bundleFolder>,d0
    30ee:	   |      pea 1683b <PutChar+0x5e3>
    30f4:	   |      move.l d0,-(sp)
    30f6:	   |      jsr 12ae4 <joinStrings>
    30fc:	   |      addq.l #8,sp
    30fe:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3102:	   \----> pea 16844 <PutChar+0x5ec>
    3108:	          jsr 15784 <KPrintF>
    310e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3110:	          move.l 52(sp),-(sp)
    3114:	          jsr 129de <fileExists>
    311a:	          addq.l #4,sp
    311c:	          tst.b d0
    311e:	      /-- bne.s 3176 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3120:	      |   move.l 1add8 <DOSBase>,d0
    3126:	      |   movea.l d0,a6
    3128:	      |   jsr -60(a6)
    312c:	      |   move.l d0,28(sp)
    3130:	      |   move.l 28(sp),d0
    3134:	      |   move.l d0,24(sp)
    3138:	      |   move.l #92228,20(sp)
    3140:	      |   moveq #21,d0
    3142:	      |   move.l d0,16(sp)
    3146:	      |   move.l 1add8 <DOSBase>,d0
    314c:	      |   movea.l d0,a6
    314e:	      |   move.l 24(sp),d1
    3152:	      |   move.l 20(sp),d2
    3156:	      |   move.l 16(sp),d3
    315a:	      |   jsr -48(a6)
    315e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3162:	      |   pea 16844 <PutChar+0x5ec>
    3168:	      |   jsr 15784 <KPrintF>
    316e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3170:	      |   moveq #0,d0
    3172:	/-----|-- bra.w 336e <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3176:	|     \-> pea 1685a <PutChar+0x602>
    317c:	|         jsr 15784 <KPrintF>
    3182:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3184:	|         move.l 52(sp),-(sp)
    3188:	|         jsr 3378 <setGameFilePath>
    318e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3190:	|         move.l 52(sp),-(sp)
    3194:	|         jsr 490a <initSludge>
    319a:	|         addq.l #4,sp
    319c:	|         tst.w d0
    319e:	|     /-- bne.s 31a6 <main_sludge+0x1be>
    31a0:	|     |   moveq #0,d0
    31a2:	+-----|-- bra.w 336e <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    31a6:	|     \-> move.l 1ad24 <winWidth>,d0
    31ac:	|         cmpi.l #320,d0
    31b2:	|     /-- bne.s 31c2 <main_sludge+0x1da>
    31b4:	|     |   move.l 1ad28 <winHeight>,d0
    31ba:	|     |   cmpi.l #256,d0
    31c0:	|  /--|-- beq.s 31e4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    31c2:	|  |  \-> pea 1686b <PutChar+0x613>
    31c8:	|  |      jsr 15784 <KPrintF>
    31ce:	|  |      addq.l #4,sp
		winWidth = 320;
    31d0:	|  |      move.l #320,1ad24 <winWidth>
		winHeight = 256;
    31da:	|  |      move.l #256,1ad28 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    31e4:	|  \----> pea 168e8 <PutChar+0x690>
    31ea:	|         jsr 15784 <KPrintF>
    31f0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    31f2:	|         move.l 1ad28 <winHeight>,d0
    31f8:	|         move.l d0,d1
    31fa:	|         move.l 1ad24 <winWidth>,d0
    3200:	|         move.l d1,-(sp)
    3202:	|         move.l d0,-(sp)
    3204:	|         jsr c2cc <resizeBackdrop>
    320a:	|         addq.l #8,sp
    320c:	|         tst.w d0
    320e:	|     /-- bne.s 3224 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3210:	|     |   pea 168fb <PutChar+0x6a3>
    3216:	|     |   jsr 15784 <KPrintF>
    321c:	|     |   addq.l #4,sp
		return FALSE;
    321e:	|     |   moveq #0,d0
    3220:	+-----|-- bra.w 336e <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    3224:	|     \-> pea 16921 <PutChar+0x6c9>
    322a:	|         jsr 15784 <KPrintF>
    3230:	|         addq.l #4,sp
	if (! initPeople ())
    3232:	|         jsr 9850 <initPeople>
    3238:	|         tst.w d0
    323a:	|     /-- bne.s 3250 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    323c:	|     |   pea 1692e <PutChar+0x6d6>
    3242:	|     |   jsr 15784 <KPrintF>
    3248:	|     |   addq.l #4,sp
		return FALSE;
    324a:	|     |   moveq #0,d0
    324c:	+-----|-- bra.w 336e <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3250:	|     \-> pea 1694f <PutChar+0x6f7>
    3256:	|         jsr 15784 <KPrintF>
    325c:	|         addq.l #4,sp
	if (! initFloor ())
    325e:	|         jsr 14b3a <initFloor>
    3264:	|         tst.w d0
    3266:	|     /-- bne.s 327c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3268:	|     |   pea 1695b <PutChar+0x703>
    326e:	|     |   jsr 15784 <KPrintF>
    3274:	|     |   addq.l #4,sp
		
		return FALSE;
    3276:	|     |   moveq #0,d0
    3278:	+-----|-- bra.w 336e <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    327c:	|     \-> pea 1697b <PutChar+0x723>
    3282:	|         jsr 15784 <KPrintF>
    3288:	|         addq.l #4,sp
	if (! initObjectTypes ())
    328a:	|         jsr c488 <initObjectTypes>
    3290:	|         tst.w d0
    3292:	|     /-- bne.s 32a8 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3294:	|     |   pea 1698c <PutChar+0x734>
    329a:	|     |   jsr 15784 <KPrintF>
    32a0:	|     |   addq.l #4,sp
		return FALSE;
    32a2:	|     |   moveq #0,d0
    32a4:	+-----|-- bra.w 336e <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    32a8:	|     \-> pea 169b2 <PutChar+0x75a>
    32ae:	|         jsr 15784 <KPrintF>
    32b4:	|         addq.l #4,sp
	initSpeech ();
    32b6:	|         jsr 6cec <initSpeech>
	KPrintF("Init status bar\n");
    32bc:	|         pea 169bf <PutChar+0x767>
    32c2:	|         jsr 15784 <KPrintF>
    32c8:	|         addq.l #4,sp
	initStatusBar ();
    32ca:	|         jsr 67b0 <initStatusBar>

	KPrintF("Get numbered string\n");
    32d0:	|         pea 169d0 <PutChar+0x778>
    32d6:	|         jsr 15784 <KPrintF>
    32dc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    32de:	|         pea 1 <_start+0x1>
    32e2:	|         jsr 5ace <getNumberedString>
    32e8:	|         addq.l #4,sp
    32ea:	|         move.l d0,1ad34 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    32f0:	|         pea 169e5 <PutChar+0x78d>
    32f6:	|         jsr 15784 <KPrintF>
    32fc:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    32fe:	|         move.l 1ada0 <noStack>,d0
    3304:	|         pea 1 <_start+0x1>
    3308:	|         move.l d0,-(sp)
    330a:	|         clr.l -(sp)
    330c:	|         clr.l -(sp)
    330e:	|         clr.l -(sp)
    3310:	|         jsr 5956 <startNewFunctionNum>
    3316:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    331a:	|         pea 169fd <PutChar+0x7a5>
    3320:	|         jsr 15784 <KPrintF>
    3326:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    3328:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    3330:	|         clr.l 1ad40 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    3336:	|     /-- bra.s 3350 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    3338:	|  /--|-> jsr 58e6 <sludgeDisplay>
		CsiCheckInput();
    333e:	|  |  |   jsr bdfc <CsiCheckInput>
		handleInput();
    3344:	|  |  |   jsr 46a4 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    334a:	|  |  |   jsr 156b8 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3350:	|  |  \-> move.l 1ad40 <weAreDoneSoQuit>,d0
    3356:	|  \----- beq.s 3338 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3358:	|         move.l 52(sp),32(sp)
    335e:	|         move.l 1add0 <SysBase>,d0
    3364:	|         movea.l d0,a6
    3366:	|         movea.l 32(sp),a1
    336a:	|         jsr -690(a6)
}
    336e:	\-------> movem.l (sp)+,d2-d3/a6
    3372:	          lea 44(sp),sp
    3376:	          rts

00003378 <setGameFilePath>:

void setGameFilePath (char * f) {
    3378:	          lea -1104(sp),sp
    337c:	          move.l a6,-(sp)
    337e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3380:	          move.l #1112,d0
    3386:	          add.l sp,d0
    3388:	          addi.l #-1102,d0
    338e:	          move.l d0,1100(sp)
    3392:	          move.l #998,1096(sp)
    339a:	          move.l 1add8 <DOSBase>,d0
    33a0:	          movea.l d0,a6
    33a2:	          move.l 1100(sp),d1
    33a6:	          move.l 1096(sp),d2
    33aa:	          jsr -564(a6)
    33ae:	          move.w d0,1094(sp)
    33b2:	          move.w 1094(sp),d0
    33b6:	      /-- bne.s 33c6 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    33b8:	      |   pea 16a10 <PutChar+0x7b8>
    33be:	      |   jsr 15784 <KPrintF>
    33c4:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    33c6:	      \-> moveq #-1,d0
    33c8:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    33cc:	          clr.l 1104(sp)
    33d0:	   /----- bra.s 33ee <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    33d2:	/--|----> move.l 1104(sp),d0
    33d6:	|  |      movea.l 1116(sp),a0
    33da:	|  |      adda.l d0,a0
    33dc:	|  |      move.b (a0),d0
    33de:	|  |      cmpi.b #47,d0
    33e2:	|  |  /-- bne.s 33ea <setGameFilePath+0x72>
    33e4:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    33ea:	|  |  \-> addq.l #1,1104(sp)
    33ee:	|  \----> move.l 1104(sp),d0
    33f2:	|         movea.l 1116(sp),a0
    33f6:	|         adda.l d0,a0
    33f8:	|         move.b (a0),d0
    33fa:	\-------- bne.s 33d2 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    33fc:	          moveq #-1,d0
    33fe:	          cmp.l 1108(sp),d0
    3402:	   /----- beq.s 347c <setGameFilePath+0x104>
		f[got] = 0;	
    3404:	   |      move.l 1108(sp),d0
    3408:	   |      movea.l 1116(sp),a0
    340c:	   |      adda.l d0,a0
    340e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3410:	   |      move.l 1116(sp),1090(sp)
    3416:	   |      moveq #-2,d0
    3418:	   |      move.l d0,1086(sp)
    341c:	   |      move.l 1add8 <DOSBase>,d0
    3422:	   |      movea.l d0,a6
    3424:	   |      move.l 1090(sp),d1
    3428:	   |      move.l 1086(sp),d2
    342c:	   |      jsr -84(a6)
    3430:	   |      move.l d0,1082(sp)
    3434:	   |      move.l 1082(sp),d0
    3438:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    343c:	   |      move.l 1078(sp),1074(sp)
    3442:	   |      move.l 1add8 <DOSBase>,d0
    3448:	   |      movea.l d0,a6
    344a:	   |      move.l 1074(sp),d1
    344e:	   |      jsr -126(a6)
    3452:	   |      move.l d0,1070(sp)
    3456:	   |      move.l 1070(sp),d0
    345a:	   |  /-- bne.s 346e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    345c:	   |  |   move.l 1116(sp),-(sp)
    3460:	   |  |   pea 16a36 <PutChar+0x7de>
    3466:	   |  |   jsr 15784 <KPrintF>
    346c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    346e:	   |  \-> move.l 1108(sp),d0
    3472:	   |      movea.l 1116(sp),a0
    3476:	   |      adda.l d0,a0
    3478:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    347c:	   \----> move.l #400,1066(sp)
    3484:	          clr.l 1062(sp)
    3488:	          move.l 1add0 <SysBase>,d0
    348e:	          movea.l d0,a6
    3490:	          move.l 1066(sp),d0
    3494:	          move.l 1062(sp),d1
    3498:	          jsr -684(a6)
    349c:	          move.l d0,1058(sp)
    34a0:	          move.l 1058(sp),d0
    34a4:	          move.l d0,1ad38 <gamePath>
	if (gamePath==0) {
    34aa:	          move.l 1ad38 <gamePath>,d0
    34b0:	      /-- bne.s 34c4 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    34b2:	      |   pea 16a69 <PutChar+0x811>
    34b8:	      |   jsr 15784 <KPrintF>
    34be:	      |   addq.l #4,sp
    34c0:	   /--|-- bra.w 35ac <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    34c4:	   |  \-> move.l 1ad38 <gamePath>,1054(sp)
    34cc:	   |      moveq #-2,d0
    34ce:	   |      move.l d0,1050(sp)
    34d2:	   |      move.l 1add8 <DOSBase>,d0
    34d8:	   |      movea.l d0,a6
    34da:	   |      move.l 1054(sp),d1
    34de:	   |      move.l 1050(sp),d2
    34e2:	   |      jsr -84(a6)
    34e6:	   |      move.l d0,1046(sp)
    34ea:	   |      move.l 1046(sp),d0
    34ee:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    34f2:	   |      move.l 1042(sp),1038(sp)
    34f8:	   |      move.l 1add8 <DOSBase>,d0
    34fe:	   |      movea.l d0,a6
    3500:	   |      move.l 1038(sp),d1
    3504:	   |      jsr -126(a6)
    3508:	   |      move.l d0,1034(sp)
    350c:	   |      move.l 1034(sp),d0
    3510:	   |  /-- bne.s 3520 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    3512:	   |  |   pea 16aa4 <PutChar+0x84c>
    3518:	   |  |   jsr 15784 <KPrintF>
    351e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    3520:	   |  \-> move.l #1112,d0
    3526:	   |      add.l sp,d0
    3528:	   |      addi.l #-1102,d0
    352e:	   |      move.l d0,1030(sp)
    3532:	   |      moveq #-2,d0
    3534:	   |      move.l d0,1026(sp)
    3538:	   |      move.l 1add8 <DOSBase>,d0
    353e:	   |      movea.l d0,a6
    3540:	   |      move.l 1030(sp),d1
    3544:	   |      move.l 1026(sp),d2
    3548:	   |      jsr -84(a6)
    354c:	   |      move.l d0,1022(sp)
    3550:	   |      move.l 1022(sp),d0
    3554:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3558:	   |      move.l 1042(sp),1018(sp)
    355e:	   |      move.l 1add8 <DOSBase>,d0
    3564:	   |      movea.l d0,a6
    3566:	   |      move.l 1018(sp),d1
    356a:	   |      jsr -126(a6)
    356e:	   |      move.l d0,1014(sp)
    3572:	   |      move.l 1014(sp),d0
    3576:	   |  /-- bne.s 358c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3578:	   |  |   moveq #10,d0
    357a:	   |  |   add.l sp,d0
    357c:	   |  |   move.l d0,-(sp)
    357e:	   |  |   pea 16ad0 <PutChar+0x878>
    3584:	   |  |   jsr 15784 <KPrintF>
    358a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    358c:	   |  \-> move.l 1ad38 <gamePath>,d0
    3592:	   +----- beq.s 35ac <setGameFilePath+0x234>
    3594:	   |      move.l 1ad38 <gamePath>,1010(sp)
    359c:	   |      move.l 1add0 <SysBase>,d0
    35a2:	   |      movea.l d0,a6
    35a4:	   |      movea.l 1010(sp),a1
    35a8:	   |      jsr -690(a6)
}
    35ac:	   \----> move.l (sp)+,d2
    35ae:	          movea.l (sp)+,a6
    35b0:	          lea 1104(sp),sp
    35b4:	          rts

000035b6 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    35b6:	/-------> lea -16(sp),sp
    35ba:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    35bc:	|         move.l 24(sp),-(sp)
    35c0:	|         jsr 56c8 <pauseFunction>
    35c6:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    35c8:	|     /-- bra.s 35da <abortFunction+0x24>
    35ca:	|  /--|-> moveq #24,d0
    35cc:	|  |  |   add.l 24(sp),d0
    35d0:	|  |  |   move.l d0,-(sp)
    35d2:	|  |  |   jsr 13f3c <trimStack>
    35d8:	|  |  |   addq.l #4,sp
    35da:	|  |  \-> movea.l 24(sp),a0
    35de:	|  |      move.l 24(a0),d0
    35e2:	|  \----- bne.s 35ca <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    35e4:	|         movea.l 24(sp),a0
    35e8:	|         move.l 4(a0),12(sp)
    35ee:	|         move.l 1add0 <SysBase>,d0
    35f4:	|         movea.l d0,a6
    35f6:	|         movea.l 12(sp),a1
    35fa:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    35fe:	|         clr.l 16(sp)
    3602:	|     /-- bra.s 3622 <abortFunction+0x6c>
    3604:	|  /--|-> movea.l 24(sp),a0
    3608:	|  |  |   move.l 20(a0),d1
    360c:	|  |  |   move.l 16(sp),d0
    3610:	|  |  |   lsl.l #3,d0
    3612:	|  |  |   add.l d1,d0
    3614:	|  |  |   move.l d0,-(sp)
    3616:	|  |  |   jsr 13806 <unlinkVar>
    361c:	|  |  |   addq.l #4,sp
    361e:	|  |  |   addq.l #1,16(sp)
    3622:	|  |  \-> movea.l 24(sp),a0
    3626:	|  |      move.l 8(a0),d0
    362a:	|  |      cmp.l 16(sp),d0
    362e:	|  \----- bgt.s 3604 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    3630:	|         movea.l 24(sp),a0
    3634:	|         move.l 20(a0),8(sp)
    363a:	|         move.l 1add0 <SysBase>,d0
    3640:	|         movea.l d0,a6
    3642:	|         movea.l 8(sp),a1
    3646:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    364a:	|         moveq #28,d0
    364c:	|         add.l 24(sp),d0
    3650:	|         move.l d0,-(sp)
    3652:	|         jsr 13806 <unlinkVar>
    3658:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    365a:	|         movea.l 24(sp),a0
    365e:	|         move.l 40(a0),d0
    3662:	|     /-- beq.s 3674 <abortFunction+0xbe>
    3664:	|     |   movea.l 24(sp),a0
    3668:	|     |   move.l 40(a0),d0
    366c:	|     |   move.l d0,-(sp)
    366e:	\-----|-- jsr 35b6 <abortFunction>(pc)
    3672:	      |   addq.l #4,sp
	FreeVec(fun);
    3674:	      \-> move.l 24(sp),4(sp)
    367a:	          move.l 1add0 <SysBase>,d0
    3680:	          movea.l d0,a6
    3682:	          movea.l 4(sp),a1
    3686:	          jsr -690(a6)
	fun = NULL;
    368a:	          clr.l 24(sp)
}
    368e:	          nop
    3690:	          movea.l (sp)+,a6
    3692:	          lea 16(sp),sp
    3696:	          rts

00003698 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3698:	          subq.l #8,sp
	int n = 0;
    369a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    369e:	          movea.l 20(sp),a0
    36a2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    36a4:	          move.l 1ad68 <allRunningFunctions>,(sp)
	while (fun) {
    36aa:	   /----- bra.s 36d8 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    36ac:	/--|----> movea.l (sp),a0
    36ae:	|  |      move.l (a0),d0
    36b0:	|  |      cmp.l 12(sp),d0
    36b4:	|  |  /-- bne.s 36d2 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    36b6:	|  |  |   movea.l (sp),a0
    36b8:	|  |  |   move.w #1,54(a0)
			n++;
    36be:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    36c2:	|  |  |   move.l (sp),d0
    36c4:	|  |  |   cmp.l 16(sp),d0
    36c8:	|  |  +-- bne.s 36d2 <cancelAFunction+0x3a>
    36ca:	|  |  |   movea.l 20(sp),a0
    36ce:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    36d2:	|  |  \-> movea.l (sp),a0
    36d4:	|  |      move.l 44(a0),(sp)
	while (fun) {
    36d8:	|  \----> tst.l (sp)
    36da:	\-------- bne.s 36ac <cancelAFunction+0x14>
	}
	return n;
    36dc:	          move.l 4(sp),d0
}
    36e0:	          addq.l #8,sp
    36e2:	          rts

000036e4 <completeTimers>:


void completeTimers () {
    36e4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    36e6:	          move.l 1ad68 <allRunningFunctions>,(sp)

	while (thisFunction) {
    36ec:	   /----- bra.s 3702 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    36ee:	/--|----> movea.l (sp),a0
    36f0:	|  |      move.b 56(a0),d0
    36f4:	|  |  /-- bne.s 36fc <completeTimers+0x18>
    36f6:	|  |  |   movea.l (sp),a0
    36f8:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    36fc:	|  |  \-> movea.l (sp),a0
    36fe:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3702:	|  \----> tst.l (sp)
    3704:	\-------- bne.s 36ee <completeTimers+0xa>
	}
}
    3706:	          nop
    3708:	          nop
    370a:	          addq.l #4,sp
    370c:	          rts

0000370e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    370e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    3712:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    3718:	                                                             movea.l 80(sp),a0
    371c:	                                                             move.w 54(a0),d0
    3720:	/----------------------------------------------------------- beq.w 45c0 <continueFunction+0xeb2>
		abortFunction (fun);
    3724:	|                                                            move.l 80(sp),-(sp)
    3728:	|                                                            jsr 35b6 <abortFunction>
    372e:	|                                                            addq.l #4,sp
		return TRUE;
    3730:	|                                                            moveq #1,d0
    3732:	|  /-------------------------------------------------------- bra.w 45ca <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    3736:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    373c:	|  |  |                                                      movea.l 80(sp),a0
    3740:	|  |  |                                                      move.l 4(a0),d1
    3744:	|  |  |                                                      movea.l 80(sp),a0
    3748:	|  |  |                                                      move.l 36(a0),d0
    374c:	|  |  |                                                      lsl.l #3,d0
    374e:	|  |  |                                                      movea.l d1,a0
    3750:	|  |  |                                                      adda.l d0,a0
    3752:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    3758:	|  |  |                                                      movea.l 80(sp),a0
    375c:	|  |  |                                                      move.l 4(a0),d1
    3760:	|  |  |                                                      movea.l 80(sp),a0
    3764:	|  |  |                                                      move.l 36(a0),d0
    3768:	|  |  |                                                      lsl.l #3,d0
    376a:	|  |  |                                                      movea.l d1,a0
    376c:	|  |  |                                                      adda.l d0,a0
    376e:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    3772:	|  |  |                                                      move.l 64(sp),-(sp)
    3776:	|  |  |                                                      pea 16bd8 <PutChar+0x980>
    377c:	|  |  |                                                      jsr 15784 <KPrintF>
    3782:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    3784:	|  |  |                                                      moveq #41,d0
    3786:	|  |  |                                                      cmp.l 64(sp),d0
    378a:	|  |  |  /-------------------------------------------------- bcs.w 4574 <continueFunction+0xe66>
    378e:	|  |  |  |                                                   move.l 64(sp),d0
    3792:	|  |  |  |                                                   add.l d0,d0
    3794:	|  |  |  |                                                   movea.l d0,a0
    3796:	|  |  |  |                                                   adda.l #14242,a0
    379c:	|  |  |  |                                                   move.w (a0),d0
    379e:	|  |  |  |                                                   jmp (37a2 <continueFunction+0x94>,pc,d0.w)
    37a2:	|  |  |  |                                                   bset d6,(a2)
    37a4:	|  |  |  |                                                   ori.w #2670,(a4)
    37a8:	|  |  |  |                                                   eori.w #2416,d6
    37ac:	|  |  |  |                                                   bchg d4,d2
    37ae:	|  |  |  |                                                   bclr d4,(a4)+
    37b0:	|  |  |  |                                                   andi.l #181013194,d4
    37b6:	|  |  |  |                                                   .short 0x0aca
    37b8:	|  |  |  |                                                   .short 0x0aca
    37ba:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    37c2:	|  |  |  |                                                   .short 0x0aca
    37c4:	|  |  |  |                                                   andi.w #906,-(a4)
    37c8:	|  |  |  |                                                   bchg d1,196(a2)
    37cc:	|  |  |  |                                                   bset d1,580(a4)
    37d0:	|  |  |  |                                                   bclr d1,2576(a2)
    37d4:	|  |  |  |                                                   andi.b #-56,2762(a2)
    37da:	|  |  |  |                                                   .short 0x0aca
    37dc:	|  |  |  |                                                   eori.l #63572682,d0
    37e2:	|  |  |  |                                                   .short 0x0aca
    37e4:	|  |  |  |                                                   bchg d3,-(a2)
    37e6:	|  |  |  |                                                   bchg #-36,(a2)
    37ea:	|  |  |  |                                                   .short 0x08cc
    37ec:	|  |  |  |                                                   addi.b #14,1038(a0)
    37f2:	|  |  |  |                                                   .short 0x040e
    37f4:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    37f8:	|  |  |  |                                                   ori.w #8232,(a0)
    37fc:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    3802:	|  |  |  |                                                   ori.w #12136,(a0)
    3806:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    380c:	|  |  |  |                                                   ori.w #12328,(a0)
    3810:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    3816:	|  |  |  |                                                   add.l 44(sp),d1
    381a:	|  |  |  |                                                   moveq #28,d0
    381c:	|  |  |  |                                                   add.l 80(sp),d0
    3820:	|  |  |  |                                                   move.l d1,-(sp)
    3822:	|  |  |  |                                                   move.l d0,-(sp)
    3824:	|  |  |  |                                                   jsr 13a72 <copyVariable>
    382a:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    382c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    3830:	|  |  |  |                                                   jsr 45d0 <finishFunction>
    3836:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    3838:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    383e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    3842:	|  |  |  |                                                   jsr 570a <restartFunction>
    3848:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    384a:	|  |  |  |  /----------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>
				finishFunction (fun);
    384e:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    3852:	|  |  |  |  |                                                jsr 45d0 <finishFunction>
    3858:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    385a:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    385e:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    3862:	|  |  |  |  +----------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    3866:	|  |  |  |  |                                                movea.l 80(sp),a0
    386a:	|  |  |  |  |                                                move.l 28(a0),d0
    386e:	|  |  |  |  |                                                moveq #2,d1
    3870:	|  |  |  |  |                                                cmp.l d0,d1
    3872:	|  |  |  |  |                                            /-- beq.s 387e <continueFunction+0x170>
    3874:	|  |  |  |  |                                            |   moveq #4,d1
    3876:	|  |  |  |  |                                            |   cmp.l d0,d1
    3878:	|  |  |  |  |                                         /--|-- beq.s 38cc <continueFunction+0x1be>
    387a:	|  |  |  |  |                                /--------|--|-- bra.w 39b4 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    387e:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    3882:	|  |  |  |  |                                |        |      jsr 56c8 <pauseFunction>
    3888:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    388a:	|  |  |  |  |                                |        |      moveq #24,d0
    388c:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    3890:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    3894:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3898:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    389c:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    389e:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    38a2:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    38a6:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    38a8:	|  |  |  |  |                                |        |      jsr 5956 <startNewFunctionNum>
    38ae:	|  |  |  |  |                                |        |      lea 20(sp),sp
    38b2:	|  |  |  |  |                                |        |      tst.l d0
    38b4:	|  |  |  |  |                                |        |  /-- bne.s 38bc <continueFunction+0x1ae>
    38b6:	|  |  |  |  |                                |        |  |   clr.w d0
    38b8:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 45ca <continueFunction+0xebc>
				fun = allRunningFunctions;
    38bc:	|  |  |  |  |                                |        |  \-> move.l 1ad68 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    38c4:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    38c8:	|  |  |  |  |                                |  /-----|----- bra.w 39c8 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    38cc:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    38d0:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    38d4:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    38d8:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    38dc:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    38de:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    38e0:	|  |  |  |  |                                |  |            jsr 1229a <callBuiltIn>
    38e6:	|  |  |  |  |                                |  |            lea 12(sp),sp
    38ea:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    38ee:	|  |  |  |  |                                |  |            moveq #5,d0
    38f0:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    38f4:	|  |  |  |  |                                |  |  /-------- bcs.w 39b0 <continueFunction+0x2a2>
    38f8:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    38fc:	|  |  |  |  |                                |  |  |         add.l d0,d0
    38fe:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    3900:	|  |  |  |  |                                |  |  |         adda.l #14604,a0
    3906:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    3908:	|  |  |  |  |                                |  |  |         jmp (390c <continueFunction+0x1fe>,pc,d0.w)
    390c:	|  |  |  |  |                                |  |  |     |   ori.b #12,164(a4)
    3912:	|  |  |  |  |                                |  |  |     |   ori.b #60,-(a0)
    3916:	|  |  |  |  |                                |  |  |     |   ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    391c:	|  |  |  |  |                                |  |  |     \-- bmi.s 390a <continueFunction+0x1fc>
    391e:	|  |  |  |  |                                |  |  |         jsr 15784 <KPrintF>
    3924:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    3926:	|  |  |  |  |                                |  |  |         clr.w d0
    3928:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 45ca <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    392c:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    3930:	|  |  |  |  |                                |  |  |         jsr 56c8 <pauseFunction>
    3936:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    3938:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    393c:	|  |  |  |  |                                |  |  |  /----- bra.s 39b2 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    393e:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    3942:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    3946:	|  |  |  |  |                                |  |  |  +----- bra.s 39b2 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    3948:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    394c:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    3952:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    3954:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    3958:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    395c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3960:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3962:	|  |  |  |  |                                |  |  |  |      jsr 13eaa <setVariable>
    3968:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    396c:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    3970:	|  |  |  |  |                                |  |  |  |      jsr 56c8 <pauseFunction>
    3976:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3978:	|  |  |  |  |                                |  |  |  |      move.l 1ada0 <noStack>,d1
    397e:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    3982:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3984:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3986:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    398a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    398c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    398e:	|  |  |  |  |                                |  |  |  |      jsr 5956 <startNewFunctionNum>
    3994:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3998:	|  |  |  |  |                                |  |  |  |      tst.l d0
    399a:	|  |  |  |  |                                |  |  |  |  /-- bne.s 39a2 <continueFunction+0x294>
    399c:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    399e:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 45ca <continueFunction+0xebc>
							fun = allRunningFunctions;
    39a2:	|  |  |  |  |                                |  |  |  |  \-> move.l 1ad68 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    39aa:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    39ae:	|  |  |  |  |                                |  |  |  +----- bra.s 39b2 <continueFunction+0x2a4>

						default:
						break;
    39b0:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    39b2:	|  |  |  |  |                                |  +-----\----X bra.s 39c8 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    39b4:	|  |  |  |  |                                \--|----------> pea 16c37 <PutChar+0x9df>
    39ba:	|  |  |  |  |                                   |            jsr 15784 <KPrintF>
    39c0:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    39c2:	|  |  |  |  |                                   |            clr.w d0
    39c4:	|  +--|--|--|-----------------------------------|----------- bra.w 45ca <continueFunction+0xebc>
			}
			break;
    39c8:	|  |  |  |  +-----------------------------------\----------X bra.w 45a8 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    39cc:	|  |  |  |  |                                                moveq #28,d0
    39ce:	|  |  |  |  |                                                add.l 80(sp),d0
    39d2:	|  |  |  |  |                                                clr.l -(sp)
    39d4:	|  |  |  |  |                                                clr.l -(sp)
    39d6:	|  |  |  |  |                                                move.l d0,-(sp)
    39d8:	|  |  |  |  |                                                jsr 13eaa <setVariable>
    39de:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    39e2:	|  |  |  |  +----------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    39e6:	|  |  |  |  |                                                move.l 68(sp),d1
    39ea:	|  |  |  |  |                                                moveq #28,d0
    39ec:	|  |  |  |  |                                                add.l 80(sp),d0
    39f0:	|  |  |  |  |                                                move.l d1,-(sp)
    39f2:	|  |  |  |  |                                                pea 5 <_start+0x5>
    39f6:	|  |  |  |  |                                                move.l d0,-(sp)
    39f8:	|  |  |  |  |                                                jsr 13eaa <setVariable>
    39fe:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a02:	|  |  |  |  +----------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3a06:	|  |  |  |  |                                                move.l 68(sp),d1
    3a0a:	|  |  |  |  |                                                moveq #28,d0
    3a0c:	|  |  |  |  |                                                add.l 80(sp),d0
    3a10:	|  |  |  |  |                                                move.l d1,-(sp)
    3a12:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3a16:	|  |  |  |  |                                                move.l d0,-(sp)
    3a18:	|  |  |  |  |                                                jsr 13eaa <setVariable>
    3a1e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a22:	|  |  |  |  +----------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3a26:	|  |  |  |  |                                                moveq #28,d0
    3a28:	|  |  |  |  |                                                add.l 80(sp),d0
    3a2c:	|  |  |  |  |                                                movea.l 80(sp),a0
    3a30:	|  |  |  |  |                                                movea.l 20(a0),a0
    3a34:	|  |  |  |  |                                                move.l 68(sp),d1
    3a38:	|  |  |  |  |                                                lsl.l #3,d1
    3a3a:	|  |  |  |  |                                                add.l a0,d1
    3a3c:	|  |  |  |  |                                                move.l d0,-(sp)
    3a3e:	|  |  |  |  |                                                move.l d1,-(sp)
    3a40:	|  |  |  |  |                                                jsr 13a72 <copyVariable>
    3a46:	|  |  |  |  |                                                addq.l #8,sp
    3a48:	|  |  |  |  |                                                tst.w d0
    3a4a:	|  |  |  |  |  /-------------------------------------------- bne.w 4586 <continueFunction+0xe78>
    3a4e:	|  |  |  |  |  |                                             clr.w d0
    3a50:	|  +--|--|--|--|-------------------------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3a54:	|  |  |  |  |  |                                             moveq #28,d0
    3a56:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3a5a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3a5c:	|  |  |  |  |  |                                             jsr 13af8 <getBoolean>
    3a62:	|  |  |  |  |  |                                             addq.l #4,sp
    3a64:	|  |  |  |  |  |                                             tst.w d0
    3a66:	|  |  |  |  |  |                                      /----- beq.s 3a82 <continueFunction+0x374>
    3a68:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3a6c:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3a70:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3a72:	|  |  |  |  |  |                                      |      jsr 13af8 <getBoolean>
    3a78:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3a7a:	|  |  |  |  |  |                                      |      tst.w d0
    3a7c:	|  |  |  |  |  |                                      +----- beq.s 3a82 <continueFunction+0x374>
    3a7e:	|  |  |  |  |  |                                      |      moveq #1,d0
    3a80:	|  |  |  |  |  |                                      |  /-- bra.s 3a84 <continueFunction+0x376>
    3a82:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3a84:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3a86:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3a8a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3a8c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3a90:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3a92:	|  |  |  |  |  |                                             jsr 13eaa <setVariable>
    3a98:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3a9c:	|  |  |  |  |  |                                             moveq #24,d0
    3a9e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3aa2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3aa4:	|  |  |  |  |  |                                             jsr 13f3c <trimStack>
    3aaa:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3aac:	|  |  |  |  +--|-------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3ab0:	|  |  |  |  |  |                                             moveq #28,d0
    3ab2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3ab6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ab8:	|  |  |  |  |  |                                             jsr 13af8 <getBoolean>
    3abe:	|  |  |  |  |  |                                             addq.l #4,sp
    3ac0:	|  |  |  |  |  |                                             tst.w d0
    3ac2:	|  |  |  |  |  |                                         /-- bne.s 3ada <continueFunction+0x3cc>
    3ac4:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3ac8:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3acc:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3ace:	|  |  |  |  |  |                                         |   jsr 13af8 <getBoolean>
    3ad4:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3ad6:	|  |  |  |  |  |                                         |   tst.w d0
    3ad8:	|  |  |  |  |  |                                      /--|-- beq.s 3ade <continueFunction+0x3d0>
    3ada:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3adc:	|  |  |  |  |  |                                      |  /-- bra.s 3ae0 <continueFunction+0x3d2>
    3ade:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3ae0:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3ae2:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3ae6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ae8:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3aec:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3aee:	|  |  |  |  |  |                                             jsr 13eaa <setVariable>
    3af4:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3af8:	|  |  |  |  |  |                                             moveq #24,d0
    3afa:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3afe:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b00:	|  |  |  |  |  |                                             jsr 13f3c <trimStack>
    3b06:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b08:	|  |  |  |  +--|-------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3b0c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b10:	|  |  |  |  |  |                                             moveq #28,d0
    3b12:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b16:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b18:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3b1c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b1e:	|  |  |  |  |  |                                             jsr 13eaa <setVariable>
    3b24:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3b28:	|  |  |  |  +--|-------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3b2c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b30:	|  |  |  |  |  |                                             moveq #28,d0
    3b32:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b36:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b38:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3b3c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b3e:	|  |  |  |  |  |                                             jsr 13eaa <setVariable>
    3b44:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3b48:	|  |  |  |  +--|-------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3b4c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b50:	|  |  |  |  |  |                                             moveq #28,d0
    3b52:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b56:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b58:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3b5c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b5e:	|  |  |  |  |  |                                             jsr 13eaa <setVariable>
    3b64:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3b68:	|  |  |  |  +--|-------------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3b6c:	|  |  |  |  |  |                                             move.l 1ad30 <dialogValue>,d0
    3b72:	|  |  |  |  |  |                                             moveq #1,d1
    3b74:	|  |  |  |  |  |                                             cmp.l d0,d1
    3b76:	|  |  |  |  |  |  /----------------------------------------- beq.w 458a <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    3b7a:	|  |  |  |  |  |  |                                          pea 16c4c <PutChar+0x9f4>
    3b80:	|  |  |  |  |  |  |                                          jsr 15784 <KPrintF>
    3b86:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3b88:	|  |  |  |  |  |  |                                          clr.w d0
    3b8a:	|  +--|--|--|--|--|----------------------------------------- bra.w 45ca <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3b8e:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3b92:	|  |  |  |  |  |  |                                          moveq #28,d0
    3b94:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3b98:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3b9a:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3b9c:	|  |  |  |  |  |  |                                          jsr 1363c <loadStringToVar>
    3ba2:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3ba4:	|  |  |  |  |  |  |                                          tst.w d0
    3ba6:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 458e <continueFunction+0xe80>
					return FALSE;
    3baa:	|  |  |  |  |  |  |  |                                       clr.w d0
    3bac:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3bb0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3bb4:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3bb8:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3bba:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3bbc:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3bbe:	|  |  |  |  |  |  |  |                                /----- beq.s 3c1c <continueFunction+0x50e>
    3bc0:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3bc2:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3bc4:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3db0 <continueFunction+0x6a2>
    3bc8:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3bca:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3bd6 <continueFunction+0x4c8>
    3bcc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3bce:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3bd0:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3c1c <continueFunction+0x50e>
    3bd2:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3db0 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3bd6:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3bd8:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3bdc:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3c08 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3bde:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3be0:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3be4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3be6:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3be8:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3bea:	|  |  |  |  |  |  |  |              |                 |  |   jsr 13eaa <setVariable>
    3bf0:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3bf4:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3bf6:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3bfa:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3bfc:	|  |  |  |  |  |  |  |              |                 |  |   jsr 13f3c <trimStack>
    3c02:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3c04:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3dc6 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3c08:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 16c8d <PutChar+0xa35>
    3c0e:	|  |  |  |  |  |  |  |              |  |              |      jsr 15784 <KPrintF>
    3c14:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3c16:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3c18:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 45ca <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3c1c:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3c20:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3c24:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3c28:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3c2a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3c40 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    3c2c:	|  |  |  |  |  |  |  |              |  |                 |   pea 16cc9 <PutChar+0xa71>
    3c32:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15784 <KPrintF>
    3c38:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3c3a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3c3c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 45ca <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3c40:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3c42:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3c46:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3c48:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3c4c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3c50:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3c52:	|  |  |  |  |  |  |  |              |  |                     jsr 135b8 <getValueType>
    3c58:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3c5c:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3c5e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3c66 <continueFunction+0x558>
    3c60:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3c62:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 45ca <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3c66:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3c6a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3c6e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3c70:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3c72:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3c74:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3c96 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3c76:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3c7a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3c7c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3c80:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3c84:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3c88:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3c8a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3c8c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13242 <fastArrayGetByIndex>
    3c92:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3c94:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3cb6 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3c96:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3c9a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3c9c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3ca0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3ca4:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3ca8:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3caa:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3cac:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3cae:	|  |  |  |  |  |  |  |              |  |              |      jsr 13ecc <stackGetByIndex>
    3cb4:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3cb6:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3cba:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3cbc:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3cc0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3cc2:	|  |  |  |  |  |  |  |              |  |                     jsr 13f3c <trimStack>
    3cc8:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3cca:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3cce:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cea <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3cd0:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3cd2:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3cd6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3cd8:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3cda:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3cdc:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13eaa <setVariable>
    3ce2:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3ce6:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3dc4 <continueFunction+0x6b6>
    3cea:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3cec:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3cf0:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3cfe <continueFunction+0x5f0>
    3cf2:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3cf4:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3cf8:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3d48 <continueFunction+0x63a>
    3cfa:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3d90 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3cfe:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3d02:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3d06:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3d0a:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3d0c:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 135b8 <getValueType>
    3d12:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3d16:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3d18:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3d20 <continueFunction+0x612>
    3d1a:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3d1c:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3daa <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3d20:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3d22:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3d24:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3d28:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3d2a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3d2e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3d30:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 13eaa <setVariable>
    3d36:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3d3a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3d3c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3d3e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3d42:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3d46:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3dae <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3d48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3d4c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3d50:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3d54:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3d56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 135b8 <getValueType>
    3d5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3d60:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3d62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3d68 <continueFunction+0x65a>
    3d64:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3d66:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3daa <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3d68:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3d6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3d6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3d70:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3d72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3d76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3d78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13eaa <setVariable>
    3d7e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3d82:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3d84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3d86:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3d8a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3d8e:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3dae <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3d90:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3d92:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3d96:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3d98:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3d9c:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13a72 <copyVariable>
    3da2:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3da4:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3da6:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3dc4 <continueFunction+0x6b6>
    3da8:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3daa:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 45ca <continueFunction+0xebc>
				break;
    3dae:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3dc4 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3db0:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 16ce7 <PutChar+0xa8f>
    3db6:	|  |  |  |  |  |  |  |                 |  |                  jsr 15784 <KPrintF>
    3dbc:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3dbe:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3dc0:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 45ca <continueFunction+0xebc>
				break;
    3dc4:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3dc6:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 45a8 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3dca:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3dce:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3dd2:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3dd4:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3dd6:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3dd8:	|  |  |  |  |  |  |  |                                   /-- beq.s 3de6 <continueFunction+0x6d8>
    3dda:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3ddc:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3dde:	|  |  |  |  |  |  |  |                                /--|-- beq.w 3e92 <continueFunction+0x784>
    3de2:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 3ef0 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3de6:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3dea:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3dee:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3df2:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3df4:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e0a <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    3df6:	|  |  |  |  |  |  |  |                             |  |  |   pea 16cc9 <PutChar+0xa71>
    3dfc:	|  |  |  |  |  |  |  |                             |  |  |   jsr 15784 <KPrintF>
    3e02:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3e04:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e06:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 45ca <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e0a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3e0c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e10:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e12:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3e16:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3e1a:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3e1c:	|  |  |  |  |  |  |  |                             |  |      jsr 135b8 <getValueType>
    3e22:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3e26:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3e28:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e30 <continueFunction+0x722>
    3e2a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e2c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 45ca <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3e30:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3e34:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e38:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3e3c:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3e3e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3e42:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3e44:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3e48:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e4c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3e50:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3e52:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3e54:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3e56:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e58:	|  |  |  |  |  |  |  |                             |  |      jsr 5912 <stackSetByIndex>
    3e5e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3e62:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3e64:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e6c <continueFunction+0x75e>
						return FALSE;
    3e66:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e68:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 45ca <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    3e6c:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    3e6e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e72:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e74:	|  |  |  |  |  |  |  |                             |  |      jsr 13f3c <trimStack>
    3e7a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    3e7c:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    3e7e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e82:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e84:	|  |  |  |  |  |  |  |                             |  |      jsr 13f3c <trimStack>
    3e8a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    3e8c:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    3e8e:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 45a8 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    3e92:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    3e94:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3e98:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3e9a:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    3e9e:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    3ea2:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    3ea4:	|  |  |  |  |  |  |  |                             |         jsr 135b8 <getValueType>
    3eaa:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3eae:	|  |  |  |  |  |  |  |                             |         tst.w d0
    3eb0:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3eb8 <continueFunction+0x7aa>
    3eb2:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    3eb4:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 45ca <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3eb8:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3ebc:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3ebe:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    3ec2:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    3ec6:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    3eca:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    3ecc:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3ece:	|  |  |  |  |  |  |  |                             |         jsr 13242 <fastArrayGetByIndex>
    3ed4:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    3ed6:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    3eda:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3eea <continueFunction+0x7dc>
    3edc:	|  |  |  |  |  |  |  |                             |     |   pea 16d0b <PutChar+0xab3>
    3ee2:	|  |  |  |  |  |  |  |                             |     |   jsr 15784 <KPrintF>
    3ee8:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    3eea:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    3eec:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 45ca <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    3ef0:	|  |  |  |  |  |  |  |                             \-------> pea 16ce7 <PutChar+0xa8f>
    3ef6:	|  |  |  |  |  |  |  |                                       jsr 15784 <KPrintF>
    3efc:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    3efe:	|  |  |  |  |  |  |  |                                       clr.w d0
    3f00:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 45ca <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3f04:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f08:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3f0c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f10:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f12:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3f14:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f16:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f1a:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    3f1e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3f20:	|  |  |  |  |  |  |  |                                       jsr 135b8 <getValueType>
    3f26:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3f2a:	|  |  |  |  |  |  |  |                                       tst.w d0
    3f2c:	|  |  |  |  |  |  |  |                                   /-- bne.s 3f34 <continueFunction+0x826>
    3f2e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3f30:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 45ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3f34:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3f38:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3f3a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3f3e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3f40:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f44:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f46:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    3f4c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    3f50:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3f54:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3f56:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3f58:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f5c:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3f60:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f64:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f66:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3f68:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3f6a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f6e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f70:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    3f76:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3f7a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    3f7e:	|  |  |  |  |  |  |  |                                       move.l 1ad7e <globalVars>,d1
    3f84:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f88:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f8a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3f8c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f8e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f92:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    3f96:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3f98:	|  |  |  |  |  |  |  |                                       jsr 135b8 <getValueType>
    3f9e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3fa2:	|  |  |  |  |  |  |  |                                       tst.w d0
    3fa4:	|  |  |  |  |  |  |  |                                   /-- bne.s 3fac <continueFunction+0x89e>
    3fa6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3fa8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 45ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3fac:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    3fb0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3fb2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3fb6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fb8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fbc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fbe:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    3fc4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    3fc8:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    3fcc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3fce:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3fd0:	|  |  |  |  |  |  |  |                                       movea.l 1ad7e <globalVars>,a0
    3fd6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3fda:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3fdc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3fde:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fe0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fe4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fe6:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    3fec:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3ff0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3ff4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3ff8:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3ffc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4000:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4002:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4004:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4006:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    400a:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    400e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4010:	|  |  |  |  |  |  |  |                                       jsr 135b8 <getValueType>
    4016:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    401a:	|  |  |  |  |  |  |  |                                       tst.w d0
    401c:	|  |  |  |  |  |  |  |                                   /-- bne.s 4024 <continueFunction+0x916>
    401e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4020:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 45ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    4024:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    4028:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    402a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    402e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4030:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4034:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4036:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    403c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4040:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4044:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4046:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4048:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    404c:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4050:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4054:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4056:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4058:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    405a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    405e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4060:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    4066:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    406a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    406e:	|  |  |  |  |  |  |  |                                       move.l 1ad7e <globalVars>,d1
    4074:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4078:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    407a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    407c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    407e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4082:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4086:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4088:	|  |  |  |  |  |  |  |                                       jsr 135b8 <getValueType>
    408e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4092:	|  |  |  |  |  |  |  |                                       tst.w d0
    4094:	|  |  |  |  |  |  |  |                                   /-- bne.s 409c <continueFunction+0x98e>
    4096:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4098:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 45ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    409c:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    40a0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40a2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40a6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40a8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40ac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40ae:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    40b4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    40b8:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    40bc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    40be:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    40c0:	|  |  |  |  |  |  |  |                                       movea.l 1ad7e <globalVars>,a0
    40c6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40ca:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40cc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    40ce:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40d0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40d4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40d6:	|  |  |  |  |  |  |  |                                       jsr 13eaa <setVariable>
    40dc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    40e0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    40e4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40e8:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    40ec:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40f0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40f2:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    40f4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40f6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40fa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40fc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40fe:	|  |  |  |  |  |  |  |                                       jsr 13a72 <copyVariable>
    4104:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4106:	|  |  |  |  |  |  |  |                                       tst.w d0
    4108:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4592 <continueFunction+0xe84>
    410c:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    410e:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4112:	|  |  |  |  |  |  |  |  |                                    move.l 1ad7e <globalVars>,d1
    4118:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    411c:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    411e:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4120:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4122:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4126:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4128:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    412a:	|  |  |  |  |  |  |  |  |                                    jsr 13a72 <copyVariable>
    4130:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4132:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4134:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4596 <continueFunction+0xe88>
    4138:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    413a:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    413e:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4140:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4144:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1ad7e <globalVars>,a0
    414a:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    414e:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4150:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4152:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4154:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4156:	|  |  |  |  |  |  |  |  |  |                                 jsr 13a72 <copyVariable>
    415c:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    415e:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4160:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 459a <continueFunction+0xe8c>
    4164:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4166:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    416a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    416c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4170:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4172:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4176:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4178:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    417a:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12df4 <addVarToStack>
    4180:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4182:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4184:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 459e <continueFunction+0xe90>
    4188:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    418a:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    418e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4190:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4194:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4196:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    419a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    419c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    419e:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 12e7a <addVarToStackQuick>
    41a4:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    41a6:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    41a8:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 45a2 <continueFunction+0xe94>
    41ac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    41ae:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 45ca <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    41b2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    41b4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    41b8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    41ba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13af8 <getBoolean>
    41c0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    41c2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    41c4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    41c6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    41c8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    41ca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    41cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    41ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    41d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    41d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    41d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    41da:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13eaa <setVariable>
    41e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    41e4:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    41e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    41ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    41ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    41f0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13af8 <getBoolean>
    41f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    41f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    41fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 45a6 <continueFunction+0xe98>
				advanceNow = FALSE;
    41fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    420c:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 45a6 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    4214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    421e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 45a8 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    4222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    422a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    422e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    4232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    4234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 135b8 <getValueType>
    423a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    423e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    4240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 4248 <continueFunction+0xb3a>
    4242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    4244:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 45ca <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    4248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    424c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    424e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    4250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    4258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    425c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    425e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13eaa <setVariable>
    4264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4268:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 45a8 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    426c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 455e <continueFunction+0xe50>
    4278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    427a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    427e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 42fa <continueFunction+0xbec>
    4280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 4344 <continueFunction+0xc36>
    428a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    428c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    4290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 429e <continueFunction+0xb90>
    4292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 42cc <continueFunction+0xbbe>
    429a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 4344 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    429e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    42a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    42a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    42a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    42ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    42ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    42b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12eee <addVariablesInSecond>
    42b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    42b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    42ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    42be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    42c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f3c <trimStack>
    42c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    42c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4572 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    42cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    42ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    42d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    42d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    42da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    42dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    42de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 12fac <compareVariablesInSecond>
    42e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    42e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    42e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    42ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    42ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13f3c <trimStack>
    42f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    42f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4572 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    42fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    42fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    430a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    430c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 12fac <compareVariablesInSecond>
    4312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    4314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    4316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    431a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    431c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13f3c <trimStack>
    4322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    4324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    432c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    432e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    4330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    4332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    4338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    433c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    4340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4572 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    4344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    4348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    434c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    434e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    4356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 135b8 <getValueType>
    435e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 436c <continueFunction+0xc5e>
    4366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4368:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 45ca <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    436c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    436e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    437c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    437e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 135b8 <getValueType>
    4384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    438a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4392 <continueFunction+0xc84>
    438c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    438e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 45ca <continueFunction+0xebc>
					trimStack (&fun -> stack);
    4392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    439a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13f3c <trimStack>
    43a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    43a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    43a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    43ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 4570 <continueFunction+0xe62>
    43b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    43b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    43b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17344,a0
    43ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    43bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (43c0 <continueFunction+0xcb2>,pc,d0.w)
    43c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    43c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    43c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    43ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    43d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    43d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    43e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    43f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    43f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    43f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    43fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16142 <__mulsi3>
    4402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    440c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    440e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    441a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    441e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4572 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    4422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    442a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    442c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    442e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    443a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    4440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4572 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    4448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161ee <__modsi3>
    445a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    445c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    445e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    446a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    446c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    4472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4572 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    447a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    447e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161c0 <__divsi3>
    448c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    448e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    449c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    449e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    44a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4572 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    44ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    44b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    44b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    44b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    44b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    44ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    44bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    44be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    44d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4572 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    44da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    44de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    44e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    44e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    44e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    44ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    44ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    4500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4572 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    4506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    450e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    4512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    451a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    451e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    452c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4572 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    4532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    453a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    453c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    453e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    454a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    454c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13eaa <setVariable>
    4558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    455c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4572 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 16d2c <PutChar+0xad4>
    4564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 15784 <KPrintF>
    456a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    456c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    456e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 45ca <continueFunction+0xebc>
						break;
    4570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4572:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 45a8 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4574:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 16d44 <PutChar+0xaec>
    457a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 15784 <KPrintF>
    4580:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4582:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4584:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 45ca <continueFunction+0xebc>
			break;
    4586:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4588:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    458a:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    458c:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    458e:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    4590:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    4592:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4594:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    4596:	|  |  |     |              \--|--|--|--|-------------------> nop
    4598:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    459a:	|  |  |     |                 \--|--|--|-------------------> nop
    459c:	|  |  |     +--------------------|--|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    459e:	|  |  |     |                    \--|--|-------------------> nop
    45a0:	|  |  |     +-----------------------|--|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    45a2:	|  |  |     |                       \--|-------------------> nop
    45a4:	|  |  |     +--------------------------|-------------------- bra.s 45a8 <continueFunction+0xe9a>
			break;
    45a6:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    45a8:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    45ac:	+--|--|----------------------------------------------------- beq.s 45c0 <continueFunction+0xeb2>
    45ae:	|  |  |                                                      movea.l 80(sp),a0
    45b2:	|  |  |                                                      move.l 36(a0),d0
    45b6:	|  |  |                                                      addq.l #1,d0
    45b8:	|  |  |                                                      movea.l 80(sp),a0
    45bc:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    45c0:	\--|--|----------------------------------------------------> tst.w 74(sp)
    45c4:	   |  \----------------------------------------------------- bne.w 3736 <continueFunction+0x28>

	}
	return TRUE;
    45c8:	   |                                                         moveq #1,d0
}
    45ca:	   \-------------------------------------------------------> lea 76(sp),sp
    45ce:	                                                             rts

000045d0 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    45d0:	       lea -16(sp),sp
    45d4:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    45d6:	       move.l 24(sp),-(sp)
    45da:	       jsr 56c8 <pauseFunction>
    45e0:	       addq.l #4,sp
	if (fun -> stack) 
    45e2:	       movea.l 24(sp),a0
    45e6:	       move.l 24(a0),d0
    45ea:	   /-- beq.s 4600 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    45ec:	   |   pea 16d70 <PutChar+0xb18>
    45f2:	   |   pea 16d9d <PutChar+0xb45>
    45f8:	   |   jsr 15784 <KPrintF>
    45fe:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    4600:	   \-> movea.l 24(sp),a0
    4604:	       move.l 4(a0),12(sp)
    460a:	       move.l 1add0 <SysBase>,d0
    4610:	       movea.l d0,a6
    4612:	       movea.l 12(sp),a1
    4616:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    461a:	       clr.l 16(sp)
    461e:	   /-- bra.s 463e <finishFunction+0x6e>
    4620:	/--|-> movea.l 24(sp),a0
    4624:	|  |   move.l 20(a0),d1
    4628:	|  |   move.l 16(sp),d0
    462c:	|  |   lsl.l #3,d0
    462e:	|  |   add.l d1,d0
    4630:	|  |   move.l d0,-(sp)
    4632:	|  |   jsr 13806 <unlinkVar>
    4638:	|  |   addq.l #4,sp
    463a:	|  |   addq.l #1,16(sp)
    463e:	|  \-> movea.l 24(sp),a0
    4642:	|      move.l 8(a0),d0
    4646:	|      cmp.l 16(sp),d0
    464a:	\----- bgt.s 4620 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    464c:	       movea.l 24(sp),a0
    4650:	       move.l 8(a0),d0
    4654:	   /-- ble.s 4670 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    4656:	   |   movea.l 24(sp),a0
    465a:	   |   move.l 20(a0),8(sp)
    4660:	   |   move.l 1add0 <SysBase>,d0
    4666:	   |   movea.l d0,a6
    4668:	   |   movea.l 8(sp),a1
    466c:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    4670:	   \-> moveq #28,d0
    4672:	       add.l 24(sp),d0
    4676:	       move.l d0,-(sp)
    4678:	       jsr 13806 <unlinkVar>
    467e:	       addq.l #4,sp
	FreeVec(fun);
    4680:	       move.l 24(sp),4(sp)
    4686:	       move.l 1add0 <SysBase>,d0
    468c:	       movea.l d0,a6
    468e:	       movea.l 4(sp),a1
    4692:	       jsr -690(a6)
	fun = NULL;
    4696:	       clr.l 24(sp)
}
    469a:	       nop
    469c:	       movea.l (sp)+,a6
    469e:	       lea 16(sp),sp
    46a2:	       rts

000046a4 <handleInput>:

BOOL handleInput () {
    46a4:	             lea -16(sp),sp
    46a8:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    46aa:	             move.l 1af30 <overRegion>,d0
    46b0:	         /-- bne.s 46b8 <handleInput+0x14>
    46b2:	         |   jsr 14082 <getOverRegion>

	if (input.justMoved) {
    46b8:	         \-> move.w 1ad86 <input+0x4>,d0
    46be:	         /-- beq.s 46fc <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    46c0:	         |   movea.l 1a74e <currentEvents>,a0
    46c6:	         |   move.l 16(a0),d0
    46ca:	         +-- beq.s 46fc <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    46cc:	         |   move.l 1ada0 <noStack>,d1
    46d2:	         |   movea.l 1a74e <currentEvents>,a0
    46d8:	         |   move.l 16(a0),d0
    46dc:	         |   pea 1 <_start+0x1>
    46e0:	         |   move.l d1,-(sp)
    46e2:	         |   clr.l -(sp)
    46e4:	         |   clr.l -(sp)
    46e6:	         |   move.l d0,-(sp)
    46e8:	         |   jsr 5956 <startNewFunctionNum>
    46ee:	         |   lea 20(sp),sp
    46f2:	         |   tst.l d0
    46f4:	         +-- bne.s 46fc <handleInput+0x58>
    46f6:	         |   clr.w d0
    46f8:	/--------|-- bra.w 4902 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    46fc:	|        \-> clr.w 1ad86 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    4702:	|            move.l 1ad98 <lastRegion>,d1
    4708:	|            move.l 1af30 <overRegion>,d0
    470e:	|            cmp.l d1,d0
    4710:	|  /-------- beq.w 47e8 <handleInput+0x144>
    4714:	|  |         movea.l 1a74e <currentEvents>,a0
    471a:	|  |         move.l 20(a0),d0
    471e:	|  +-------- beq.w 47e8 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    4722:	|  |         moveq #12,d0
    4724:	|  |         move.l d0,16(sp)
    4728:	|  |         clr.l 12(sp)
    472c:	|  |         move.l 1add0 <SysBase>,d0
    4732:	|  |         movea.l d0,a6
    4734:	|  |         move.l 16(sp),d0
    4738:	|  |         move.l 12(sp),d1
    473c:	|  |         jsr -684(a6)
    4740:	|  |         move.l d0,8(sp)
    4744:	|  |         move.l 8(sp),d0
    4748:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    474c:	|  |         move.l 4(sp),d0
    4750:	|  |     /-- bne.s 4766 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    4752:	|  |     |   pea 16dad <PutChar+0xb55>
    4758:	|  |     |   jsr 15784 <KPrintF>
    475e:	|  |     |   addq.l #4,sp
			return FALSE;
    4760:	|  |     |   clr.w d0
    4762:	+--|-----|-- bra.w 4902 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    4766:	|  |     \-> movea.l 4(sp),a0
    476a:	|  |         clr.l (a0)
		if (overRegion) {
    476c:	|  |         move.l 1af30 <overRegion>,d0
    4772:	|  |  /----- beq.s 479a <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    4774:	|  |  |      movea.l 1af30 <overRegion>,a0
    477a:	|  |  |      movea.l 28(a0),a0
    477e:	|  |  |      move.l 4(a0),d1
    4782:	|  |  |      move.l 4(sp),d0
    4786:	|  |  |      move.l d1,-(sp)
    4788:	|  |  |      pea 7 <_start+0x7>
    478c:	|  |  |      move.l d0,-(sp)
    478e:	|  |  |      jsr 13eaa <setVariable>
    4794:	|  |  |      lea 12(sp),sp
    4798:	|  |  |  /-- bra.s 47b0 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    479a:	|  |  \--|-> move.l 4(sp),d0
    479e:	|  |     |   clr.l -(sp)
    47a0:	|  |     |   pea 1 <_start+0x1>
    47a4:	|  |     |   move.l d0,-(sp)
    47a6:	|  |     |   jsr 13eaa <setVariable>
    47ac:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    47b0:	|  |     \-> movea.l 4(sp),a0
    47b4:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    47b8:	|  |         movea.l 1a74e <currentEvents>,a0
    47be:	|  |         move.l 20(a0),d0
    47c2:	|  |         pea 1 <_start+0x1>
    47c6:	|  |         lea 8(sp),a0
    47ca:	|  |         move.l a0,-(sp)
    47cc:	|  |         clr.l -(sp)
    47ce:	|  |         pea 1 <_start+0x1>
    47d2:	|  |         move.l d0,-(sp)
    47d4:	|  |         jsr 5956 <startNewFunctionNum>
    47da:	|  |         lea 20(sp),sp
    47de:	|  |         tst.l d0
    47e0:	|  +-------- bne.s 47e8 <handleInput+0x144>
    47e2:	|  |         clr.w d0
    47e4:	+--|-------- bra.w 4902 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    47e8:	|  \-------> move.w 1ad88 <input+0x6>,d0
    47ee:	|        /-- beq.s 482c <handleInput+0x188>
    47f0:	|        |   movea.l 1a74e <currentEvents>,a0
    47f6:	|        |   move.l 4(a0),d0
    47fa:	|        +-- beq.s 482c <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    47fc:	|        |   move.l 1ada0 <noStack>,d1
    4802:	|        |   movea.l 1a74e <currentEvents>,a0
    4808:	|        |   move.l 4(a0),d0
    480c:	|        |   pea 1 <_start+0x1>
    4810:	|        |   move.l d1,-(sp)
    4812:	|        |   clr.l -(sp)
    4814:	|        |   clr.l -(sp)
    4816:	|        |   move.l d0,-(sp)
    4818:	|        |   jsr 5956 <startNewFunctionNum>
    481e:	|        |   lea 20(sp),sp
    4822:	|        |   tst.l d0
    4824:	|        +-- bne.s 482c <handleInput+0x188>
    4826:	|        |   clr.w d0
    4828:	+--------|-- bra.w 4902 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    482c:	|        \-> move.w 1ad8a <input+0x8>,d0
    4832:	|        /-- beq.s 4870 <handleInput+0x1cc>
    4834:	|        |   movea.l 1a74e <currentEvents>,a0
    483a:	|        |   move.l 12(a0),d0
    483e:	|        +-- beq.s 4870 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4840:	|        |   move.l 1ada0 <noStack>,d1
    4846:	|        |   movea.l 1a74e <currentEvents>,a0
    484c:	|        |   move.l 12(a0),d0
    4850:	|        |   pea 1 <_start+0x1>
    4854:	|        |   move.l d1,-(sp)
    4856:	|        |   clr.l -(sp)
    4858:	|        |   clr.l -(sp)
    485a:	|        |   move.l d0,-(sp)
    485c:	|        |   jsr 5956 <startNewFunctionNum>
    4862:	|        |   lea 20(sp),sp
    4866:	|        |   tst.l d0
    4868:	|        +-- bne.s 4870 <handleInput+0x1cc>
    486a:	|        |   clr.w d0
    486c:	+--------|-- bra.w 4902 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    4870:	|        \-> move.w 1ad82 <input>,d0
    4876:	|        /-- beq.s 48ae <handleInput+0x20a>
    4878:	|        |   movea.l 1a74e <currentEvents>,a0
    487e:	|        |   move.l (a0),d0
    4880:	|        +-- beq.s 48ae <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4882:	|        |   move.l 1ada0 <noStack>,d1
    4888:	|        |   movea.l 1a74e <currentEvents>,a0
    488e:	|        |   move.l (a0),d0
    4890:	|        |   pea 1 <_start+0x1>
    4894:	|        |   move.l d1,-(sp)
    4896:	|        |   clr.l -(sp)
    4898:	|        |   clr.l -(sp)
    489a:	|        |   move.l d0,-(sp)
    489c:	|        |   jsr 5956 <startNewFunctionNum>
    48a2:	|        |   lea 20(sp),sp
    48a6:	|        |   tst.l d0
    48a8:	|        +-- bne.s 48ae <handleInput+0x20a>
    48aa:	|        |   clr.w d0
    48ac:	+--------|-- bra.s 4902 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    48ae:	|        \-> move.w 1ad84 <input+0x2>,d0
    48b4:	|        /-- beq.s 48f0 <handleInput+0x24c>
    48b6:	|        |   movea.l 1a74e <currentEvents>,a0
    48bc:	|        |   move.l 8(a0),d0
    48c0:	|        +-- beq.s 48f0 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48c2:	|        |   move.l 1ada0 <noStack>,d1
    48c8:	|        |   movea.l 1a74e <currentEvents>,a0
    48ce:	|        |   move.l 8(a0),d0
    48d2:	|        |   pea 1 <_start+0x1>
    48d6:	|        |   move.l d1,-(sp)
    48d8:	|        |   clr.l -(sp)
    48da:	|        |   clr.l -(sp)
    48dc:	|        |   move.l d0,-(sp)
    48de:	|        |   jsr 5956 <startNewFunctionNum>
    48e4:	|        |   lea 20(sp),sp
    48e8:	|        |   tst.l d0
    48ea:	|        +-- bne.s 48f0 <handleInput+0x24c>
    48ec:	|        |   clr.w d0
    48ee:	+--------|-- bra.s 4902 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    48f0:	|        \-> move.l 1af30 <overRegion>,d0
    48f6:	|            move.l d0,1ad98 <lastRegion>
	return runSludge ();
    48fc:	|            jsr 5724 <runSludge>
}
    4902:	\----------> movea.l (sp)+,a6
    4904:	             lea 16(sp),sp
    4908:	             rts

0000490a <initSludge>:

BOOL initSludge (char * filename) {
    490a:	             lea -292(sp),sp
    490e:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    4912:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    4916:	             jsr 9bf6 <makeNullAnim>
    491c:	             move.l d0,1acdc <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    4922:	             pea 1ad7a <gameVersion>
    4928:	             pea 16de3 <PutChar+0xb8b>
    492e:	             pea 45 <_start+0x45>
    4932:	             pea 47 <_start+0x47>
    4936:	             move.l 332(sp),-(sp)
    493a:	             jsr 5358 <openAndVerify>
    4940:	             lea 20(sp),sp
    4944:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    4948:	         /-- bne.s 4950 <initSludge+0x46>
    494a:	         |   clr.w d0
    494c:	/--------|-- bra.w 5078 <initSludge+0x76e>
	if (FGetC (fp)) {
    4950:	|        \-> move.l 288(sp),284(sp)
    4956:	|            move.l 1add8 <DOSBase>,d0
    495c:	|            movea.l d0,a6
    495e:	|            move.l 284(sp),d1
    4962:	|            jsr -306(a6)
    4966:	|            move.l d0,280(sp)
    496a:	|            move.l 280(sp),d0
    496e:	|  /-------- beq.w 4b18 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    4972:	|  |         move.l 288(sp),-(sp)
    4976:	|  |         jsr 6bc <get2bytes>
    497c:	|  |         addq.l #4,sp
    497e:	|  |         move.l d0,1ada4 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4984:	|  |         move.l 1ada4 <numBIFNames>,d0
    498a:	|  |         move.l d0,276(sp)
    498e:	|  |         clr.l 272(sp)
    4992:	|  |         move.l 1add0 <SysBase>,d0
    4998:	|  |         movea.l d0,a6
    499a:	|  |         move.l 276(sp),d0
    499e:	|  |         move.l 272(sp),d1
    49a2:	|  |         jsr -684(a6)
    49a6:	|  |         move.l d0,268(sp)
    49aa:	|  |         move.l 268(sp),d0
    49ae:	|  |         move.l d0,1ad60 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    49b4:	|  |         move.l 1ad60 <allBIFNames>,d0
    49ba:	|  |     /-- bne.s 49c2 <initSludge+0xb8>
    49bc:	|  |     |   clr.w d0
    49be:	+--|-----|-- bra.w 5078 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    49c2:	|  |     \-> clr.l 304(sp)
    49c6:	|  |     /-- bra.s 49ec <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    49c8:	|  |  /--|-> move.l 1ad60 <allBIFNames>,d1
    49ce:	|  |  |  |   move.l 304(sp),d0
    49d2:	|  |  |  |   add.l d0,d0
    49d4:	|  |  |  |   add.l d0,d0
    49d6:	|  |  |  |   movea.l d1,a2
    49d8:	|  |  |  |   adda.l d0,a2
    49da:	|  |  |  |   move.l 288(sp),-(sp)
    49de:	|  |  |  |   jsr b02 <readString>
    49e4:	|  |  |  |   addq.l #4,sp
    49e6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    49e8:	|  |  |  |   addq.l #1,304(sp)
    49ec:	|  |  |  \-> move.l 1ada4 <numBIFNames>,d0
    49f2:	|  |  |      cmp.l 304(sp),d0
    49f6:	|  |  \----- bgt.s 49c8 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    49f8:	|  |         move.l 288(sp),-(sp)
    49fc:	|  |         jsr 6bc <get2bytes>
    4a02:	|  |         addq.l #4,sp
    4a04:	|  |         move.l d0,1adb0 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4a0a:	|  |         move.l 1adb0 <numUserFunc>,d0
    4a10:	|  |         move.l d0,264(sp)
    4a14:	|  |         clr.l 260(sp)
    4a18:	|  |         move.l 1add0 <SysBase>,d0
    4a1e:	|  |         movea.l d0,a6
    4a20:	|  |         move.l 264(sp),d0
    4a24:	|  |         move.l 260(sp),d1
    4a28:	|  |         jsr -684(a6)
    4a2c:	|  |         move.l d0,256(sp)
    4a30:	|  |         move.l 256(sp),d0
    4a34:	|  |         move.l d0,1ad6c <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4a3a:	|  |         move.l 1ad6c <allUserFunc>,d0
    4a40:	|  |     /-- bne.s 4a48 <initSludge+0x13e>
    4a42:	|  |     |   clr.w d0
    4a44:	+--|-----|-- bra.w 5078 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4a48:	|  |     \-> clr.l 300(sp)
    4a4c:	|  |     /-- bra.s 4a72 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4a4e:	|  |  /--|-> move.l 1ad6c <allUserFunc>,d1
    4a54:	|  |  |  |   move.l 300(sp),d0
    4a58:	|  |  |  |   add.l d0,d0
    4a5a:	|  |  |  |   add.l d0,d0
    4a5c:	|  |  |  |   movea.l d1,a2
    4a5e:	|  |  |  |   adda.l d0,a2
    4a60:	|  |  |  |   move.l 288(sp),-(sp)
    4a64:	|  |  |  |   jsr b02 <readString>
    4a6a:	|  |  |  |   addq.l #4,sp
    4a6c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4a6e:	|  |  |  |   addq.l #1,300(sp)
    4a72:	|  |  |  \-> move.l 1adb0 <numUserFunc>,d0
    4a78:	|  |  |      cmp.l 300(sp),d0
    4a7c:	|  |  \----- bgt.s 4a4e <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4a7e:	|  |         move.l 1ad7a <gameVersion>,d0
    4a84:	|  |         cmpi.l #258,d0
    4a8a:	|  +-------- ble.w 4b18 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4a8e:	|  |         move.l 288(sp),-(sp)
    4a92:	|  |         jsr 6bc <get2bytes>
    4a98:	|  |         addq.l #4,sp
    4a9a:	|  |         move.l d0,1adac <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4aa0:	|  |         move.l 1adac <numResourceNames>,d0
    4aa6:	|  |         add.l d0,d0
    4aa8:	|  |         add.l d0,d0
    4aaa:	|  |         move.l d0,252(sp)
    4aae:	|  |         clr.l 248(sp)
    4ab2:	|  |         move.l 1add0 <SysBase>,d0
    4ab8:	|  |         movea.l d0,a6
    4aba:	|  |         move.l 252(sp),d0
    4abe:	|  |         move.l 248(sp),d1
    4ac2:	|  |         jsr -684(a6)
    4ac6:	|  |         move.l d0,244(sp)
    4aca:	|  |         move.l 244(sp),d0
    4ace:	|  |         move.l d0,1ad64 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4ad4:	|  |         move.l 1ad64 <allResourceNames>,d0
    4ada:	|  |     /-- bne.s 4ae2 <initSludge+0x1d8>
    4adc:	|  |     |   clr.w d0
    4ade:	+--|-----|-- bra.w 5078 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4ae2:	|  |     \-> clr.l 296(sp)
    4ae6:	|  |     /-- bra.s 4b0c <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4ae8:	|  |  /--|-> move.l 1ad64 <allResourceNames>,d1
    4aee:	|  |  |  |   move.l 296(sp),d0
    4af2:	|  |  |  |   add.l d0,d0
    4af4:	|  |  |  |   add.l d0,d0
    4af6:	|  |  |  |   movea.l d1,a2
    4af8:	|  |  |  |   adda.l d0,a2
    4afa:	|  |  |  |   move.l 288(sp),-(sp)
    4afe:	|  |  |  |   jsr b02 <readString>
    4b04:	|  |  |  |   addq.l #4,sp
    4b06:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b08:	|  |  |  |   addq.l #1,296(sp)
    4b0c:	|  |  |  \-> move.l 1adac <numResourceNames>,d0
    4b12:	|  |  |      cmp.l 296(sp),d0
    4b16:	|  |  \----- bgt.s 4ae8 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4b18:	|  \-------> move.l #129,1ad8c <input+0xa>
	input.mouseY = 100;
    4b22:	|            moveq #100,d0
    4b24:	|            move.l d0,1ad90 <input+0xe>
	winWidth = get2bytes (fp);
    4b2a:	|            move.l 288(sp),-(sp)
    4b2e:	|            jsr 6bc <get2bytes>
    4b34:	|            addq.l #4,sp
    4b36:	|            move.l d0,1ad24 <winWidth>
	winHeight = get2bytes (fp);
    4b3c:	|            move.l 288(sp),-(sp)
    4b40:	|            jsr 6bc <get2bytes>
    4b46:	|            addq.l #4,sp
    4b48:	|            move.l d0,1ad28 <winHeight>
	specialSettings = FGetC (fp);
    4b4e:	|            move.l 288(sp),240(sp)
    4b54:	|            move.l 1add8 <DOSBase>,d0
    4b5a:	|            movea.l d0,a6
    4b5c:	|            move.l 240(sp),d1
    4b60:	|            jsr -306(a6)
    4b64:	|            move.l d0,236(sp)
    4b68:	|            move.l 236(sp),d0
    4b6c:	|            move.l d0,1adb4 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4b72:	|            move.l 288(sp),232(sp)
    4b78:	|            move.l 1add8 <DOSBase>,d0
    4b7e:	|            movea.l d0,a6
    4b80:	|            move.l 232(sp),d1
    4b84:	|            jsr -306(a6)
    4b88:	|            move.l d0,228(sp)
    4b8c:	|            move.l 228(sp),d0
    4b90:	|            move.l d0,-(sp)
    4b92:	|            pea 3e8 <encodeFilename+0xea>
    4b96:	|            jsr 161c0 <__divsi3>
    4b9c:	|            addq.l #8,sp
    4b9e:	|            move.l d0,1a764 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4ba4:	|            move.l 288(sp),-(sp)
    4ba8:	|            jsr b02 <readString>
    4bae:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4bb0:	|            move.l 288(sp),224(sp)
    4bb6:	|            move.l #109938,220(sp)
    4bbe:	|            moveq #8,d1
    4bc0:	|            move.l d1,216(sp)
    4bc4:	|            moveq #1,d0
    4bc6:	|            move.l d0,212(sp)
    4bca:	|            move.l 1add8 <DOSBase>,d0
    4bd0:	|            movea.l d0,a6
    4bd2:	|            move.l 224(sp),d1
    4bd6:	|            move.l 220(sp),d2
    4bda:	|            move.l 216(sp),d3
    4bde:	|            move.l 212(sp),d4
    4be2:	|            jsr -324(a6)
    4be6:	|            move.l d0,208(sp)
    4bea:	|            move.l 208(sp),d0
    4bee:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4bf2:	|            moveq #1,d1
    4bf4:	|            cmp.l 204(sp),d1
    4bf8:	|        /-- beq.s 4c08 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4bfa:	|        |   pea 16e1c <PutChar+0xbc4>
    4c00:	|        |   jsr 15784 <KPrintF>
    4c06:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4c08:	|        \-> move.l 1ad7a <gameVersion>,d0
    4c0e:	|            cmpi.l #258,d0
    4c14:	|        /-- ble.s 4c24 <initSludge+0x31a>
    4c16:	|        |   move.l 288(sp),-(sp)
    4c1a:	|        |   jsr b02 <readString>
    4c20:	|        |   addq.l #4,sp
    4c22:	|     /--|-- bra.s 4c38 <initSludge+0x32e>
    4c24:	|     |  \-> pea 16e3a <PutChar+0xbe2>
    4c2a:	|     |      pea 16e3a <PutChar+0xbe2>
    4c30:	|     |      jsr 12ae4 <joinStrings>
    4c36:	|     |      addq.l #8,sp
    4c38:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4c3c:	|            move.l 1ad7a <gameVersion>,d0
    4c42:	|            cmpi.l #258,d0
    4c48:	|     /----- ble.s 4c6a <initSludge+0x360>
    4c4a:	|     |      move.l 288(sp),196(sp)
    4c50:	|     |      move.l 1add8 <DOSBase>,d0
    4c56:	|     |      movea.l d0,a6
    4c58:	|     |      move.l 196(sp),d1
    4c5c:	|     |      jsr -306(a6)
    4c60:	|     |      move.l d0,192(sp)
    4c64:	|     |      move.l 192(sp),d0
    4c68:	|     |  /-- bra.s 4c6c <initSludge+0x362>
    4c6a:	|     \--|-> moveq #0,d0
    4c6c:	|        \-> move.l d0,1af08 <gameSettings+0x4>
	makeLanguageTable (fp);
    4c72:	|            move.l 288(sp),-(sp)
    4c76:	|            jsr 1249a <makeLanguageTable>
    4c7c:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4c7e:	|            move.l 1ad7a <gameVersion>,d0
    4c84:	|            cmpi.l #261,d0
    4c8a:	|        /-- ble.s 4cd8 <initSludge+0x3ce>
	{
		FGetC(fp);
    4c8c:	|        |   move.l 288(sp),188(sp)
    4c92:	|        |   move.l 1add8 <DOSBase>,d0
    4c98:	|        |   movea.l d0,a6
    4c9a:	|        |   move.l 188(sp),d1
    4c9e:	|        |   jsr -306(a6)
    4ca2:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4ca6:	|        |   move.l 288(sp),180(sp)
    4cac:	|        |   move.l 1add8 <DOSBase>,d0
    4cb2:	|        |   movea.l d0,a6
    4cb4:	|        |   move.l 180(sp),d1
    4cb8:	|        |   jsr -306(a6)
    4cbc:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4cc0:	|        |   move.l 288(sp),-(sp)
    4cc4:	|        |   jsr 7d8 <getFloat>
    4cca:	|        |   addq.l #4,sp
		getFloat (fp);
    4ccc:	|        |   move.l 288(sp),-(sp)
    4cd0:	|        |   jsr 7d8 <getFloat>
    4cd6:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4cd8:	|        \-> move.l 288(sp),-(sp)
    4cdc:	|            jsr b02 <readString>
    4ce2:	|            addq.l #4,sp
    4ce4:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4ce8:	|            pea 16e3b <PutChar+0xbe3>
    4cee:	|            move.l 176(sp),-(sp)
    4cf2:	|            jsr 12a64 <strcmp>
    4cf8:	|            addq.l #8,sp
    4cfa:	|            tst.l d0
    4cfc:	|        /-- beq.s 4d04 <initSludge+0x3fa>
		return FALSE;
    4cfe:	|        |   clr.w d0
    4d00:	+--------|-- bra.w 5078 <initSludge+0x76e>
	}
	FreeVec( checker);
    4d04:	|        \-> move.l 172(sp),168(sp)
    4d0a:	|            move.l 1add0 <SysBase>,d0
    4d10:	|            movea.l d0,a6
    4d12:	|            movea.l 168(sp),a1
    4d16:	|            jsr -690(a6)
	checker = NULL;
    4d1a:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4d1e:	|            move.l 288(sp),164(sp)
    4d24:	|            move.l 1add8 <DOSBase>,d0
    4d2a:	|            movea.l d0,a6
    4d2c:	|            move.l 164(sp),d1
    4d30:	|            jsr -306(a6)
    4d34:	|            move.l d0,160(sp)
    4d38:	|            move.l 160(sp),d0
    4d3c:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4d40:	|            moveq #0,d0
    4d42:	|            move.b 159(sp),d0
    4d46:	|            moveq #1,d1
    4d48:	|            and.l d1,d0
    4d4a:	|        /-- beq.s 4da2 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4d4c:	|        |   move.l 1add8 <DOSBase>,d0
    4d52:	|        |   movea.l d0,a6
    4d54:	|        |   jsr -60(a6)
    4d58:	|        |   move.l d0,38(sp)
    4d5c:	|        |   move.l 38(sp),d0
    4d60:	|        |   move.l d0,34(sp)
    4d64:	|        |   move.l #93763,30(sp)
    4d6c:	|        |   moveq #54,d0
    4d6e:	|        |   move.l d0,26(sp)
    4d72:	|        |   move.l 1add8 <DOSBase>,d0
    4d78:	|        |   movea.l d0,a6
    4d7a:	|        |   move.l 34(sp),d1
    4d7e:	|        |   move.l 30(sp),d2
    4d82:	|        |   move.l 26(sp),d3
    4d86:	|        |   jsr -48(a6)
    4d8a:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4d8e:	|        |   pea 16e7a <PutChar+0xc22>
    4d94:	|        |   jsr 15784 <KPrintF>
    4d9a:	|        |   addq.l #4,sp
		return FALSE;
    4d9c:	|        |   clr.w d0
    4d9e:	+--------|-- bra.w 5078 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4da2:	|        \-> move.l 288(sp),-(sp)
    4da6:	|            jsr 6bc <get2bytes>
    4dac:	|            addq.l #4,sp
    4dae:	|            move.l d0,1ada8 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4db4:	|            move.l 1ada8 <numGlobals>,d0
    4dba:	|            lsl.l #3,d0
    4dbc:	|            move.l d0,154(sp)
    4dc0:	|            clr.l 150(sp)
    4dc4:	|            move.l 1add0 <SysBase>,d0
    4dca:	|            movea.l d0,a6
    4dcc:	|            move.l 154(sp),d0
    4dd0:	|            move.l 150(sp),d1
    4dd4:	|            jsr -684(a6)
    4dd8:	|            move.l d0,146(sp)
    4ddc:	|            move.l 146(sp),d0
    4de0:	|            move.l d0,1ad7e <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4de6:	|            move.l 1ad7e <globalVars>,d0
    4dec:	|        /-- bne.s 4e0a <initSludge+0x500>
    4dee:	|        |   move.l 1ada8 <numGlobals>,d0
    4df4:	|        +-- ble.s 4e0a <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4df6:	|        |   pea 16eb2 <PutChar+0xc5a>
    4dfc:	|        |   jsr 15784 <KPrintF>
    4e02:	|        |   addq.l #4,sp
		return FALSE;
    4e04:	|        |   clr.w d0
    4e06:	+--------|-- bra.w 5078 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4e0a:	|        \-> clr.l 308(sp)
    4e0e:	|        /-- bra.s 4e26 <initSludge+0x51c>
    4e10:	|     /--|-> move.l 1ad7e <globalVars>,d1
    4e16:	|     |  |   move.l 308(sp),d0
    4e1a:	|     |  |   lsl.l #3,d0
    4e1c:	|     |  |   movea.l d1,a0
    4e1e:	|     |  |   adda.l d0,a0
    4e20:	|     |  |   clr.l (a0)
    4e22:	|     |  |   addq.l #1,308(sp)
    4e26:	|     |  \-> move.l 1ada8 <numGlobals>,d0
    4e2c:	|     |      cmp.l 308(sp),d0
    4e30:	|     \----- bgt.s 4e10 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4e32:	|            move.l 1af08 <gameSettings+0x4>,d0
    4e38:	|            clr.l -(sp)
    4e3a:	|            move.l d0,-(sp)
    4e3c:	|            move.l 296(sp),-(sp)
    4e40:	|            jsr 5e14 <setFileIndices>
    4e46:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    4e4a:	|            pea 1 <_start+0x1>
    4e4e:	|            jsr 5ace <getNumberedString>
    4e54:	|            addq.l #4,sp
    4e56:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    4e5a:	|            move.l 142(sp),-(sp)
    4e5e:	|            jsr 2fe <encodeFilename>
    4e64:	|            addq.l #4,sp
    4e66:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    4e6a:	|            move.l 142(sp),134(sp)
    4e70:	|            move.l 1add0 <SysBase>,d0
    4e76:	|            movea.l d0,a6
    4e78:	|            movea.l 134(sp),a1
    4e7c:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    4e80:	|            move.l 138(sp),130(sp)
    4e86:	|            move.l 1add8 <DOSBase>,d0
    4e8c:	|            movea.l d0,a6
    4e8e:	|            move.l 130(sp),d1
    4e92:	|            jsr -120(a6)
    4e96:	|            move.l d0,126(sp)
    4e9a:	|            move.l 126(sp),d0
    4e9e:	|            move.l d0,292(sp)
	if(lock == 0) {
    4ea2:	|        /-- bne.s 4ed0 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    4ea4:	|        |   move.l 138(sp),122(sp)
    4eaa:	|        |   moveq #-2,d1
    4eac:	|        |   move.l d1,118(sp)
    4eb0:	|        |   move.l 1add8 <DOSBase>,d0
    4eb6:	|        |   movea.l d0,a6
    4eb8:	|        |   move.l 122(sp),d1
    4ebc:	|        |   move.l 118(sp),d2
    4ec0:	|        |   jsr -84(a6)
    4ec4:	|        |   move.l d0,114(sp)
    4ec8:	|        |   move.l 114(sp),d0
    4ecc:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    4ed0:	|        \-> move.l 292(sp),110(sp)
    4ed6:	|            move.l 1add8 <DOSBase>,d0
    4edc:	|            movea.l d0,a6
    4ede:	|            move.l 110(sp),d1
    4ee2:	|            jsr -126(a6)
    4ee6:	|            move.l d0,106(sp)
    4eea:	|            move.l 106(sp),d0
    4eee:	|        /-- bne.s 4f4a <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    4ef0:	|        |   move.l 138(sp),-(sp)
    4ef4:	|        |   pea 16ee5 <PutChar+0xc8d>
    4efa:	|        |   jsr 15784 <KPrintF>
    4f00:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    4f02:	|        |   move.l 1add8 <DOSBase>,d0
    4f08:	|        |   movea.l d0,a6
    4f0a:	|        |   jsr -60(a6)
    4f0e:	|        |   move.l d0,58(sp)
    4f12:	|        |   move.l 58(sp),d0
    4f16:	|        |   move.l d0,54(sp)
    4f1a:	|        |   move.l #93970,50(sp)
    4f22:	|        |   moveq #40,d0
    4f24:	|        |   move.l d0,46(sp)
    4f28:	|        |   move.l 1add8 <DOSBase>,d0
    4f2e:	|        |   movea.l d0,a6
    4f30:	|        |   move.l 54(sp),d1
    4f34:	|        |   move.l 50(sp),d2
    4f38:	|        |   move.l 46(sp),d3
    4f3c:	|        |   jsr -48(a6)
    4f40:	|        |   move.l d0,42(sp)
		return FALSE;
    4f44:	|        |   clr.w d0
    4f46:	+--------|-- bra.w 5078 <initSludge+0x76e>
	}

	FreeVec(gameName);
    4f4a:	|        \-> move.l 138(sp),102(sp)
    4f50:	|            move.l 1add0 <SysBase>,d0
    4f56:	|            movea.l d0,a6
    4f58:	|            movea.l 102(sp),a1
    4f5c:	|            jsr -690(a6)

	readIniFile (filename);
    4f60:	|            move.l 316(sp),-(sp)
    4f64:	|            jsr 125ce <readIniFile>
    4f6a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    4f6c:	|            jsr 123a0 <getLanguageForFileB>
    4f72:	|            move.l d0,1a752 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    4f78:	|            move.l 1a752 <languageNum>,d0
    4f7e:	|        /-- bpl.s 4f8e <initSludge+0x684>
    4f80:	|        |   pea 16f3b <PutChar+0xce3>
    4f86:	|        |   jsr 15784 <KPrintF>
    4f8c:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    4f8e:	|        \-> move.l 1a752 <languageNum>,d0
    4f94:	|            move.l d0,d1
    4f96:	|            move.l 1af08 <gameSettings+0x4>,d0
    4f9c:	|            move.l d1,-(sp)
    4f9e:	|            move.l d0,-(sp)
    4fa0:	|            clr.l -(sp)
    4fa2:	|            jsr 5e14 <setFileIndices>
    4fa8:	|            lea 12(sp),sp

	if (dataFol[0]) {
    4fac:	|            movea.l 200(sp),a0
    4fb0:	|            move.b (a0),d0
    4fb2:	|     /----- beq.w 505c <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    4fb6:	|     |      move.l 200(sp),-(sp)
    4fba:	|     |      jsr 2fe <encodeFilename>
    4fc0:	|     |      addq.l #4,sp
    4fc2:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    4fc6:	|     |      move.l 98(sp),94(sp)
    4fcc:	|     |      move.l 1add8 <DOSBase>,d0
    4fd2:	|     |      movea.l d0,a6
    4fd4:	|     |      move.l 94(sp),d1
    4fd8:	|     |      jsr -120(a6)
    4fdc:	|     |      move.l d0,90(sp)
    4fe0:	|     |      move.l 90(sp),d0
    4fe4:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    4fe8:	|     |  /-- bne.s 5016 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    4fea:	|     |  |   move.l 98(sp),86(sp)
    4ff0:	|     |  |   moveq #-2,d1
    4ff2:	|     |  |   move.l d1,82(sp)
    4ff6:	|     |  |   move.l 1add8 <DOSBase>,d0
    4ffc:	|     |  |   movea.l d0,a6
    4ffe:	|     |  |   move.l 86(sp),d1
    5002:	|     |  |   move.l 82(sp),d2
    5006:	|     |  |   jsr -84(a6)
    500a:	|     |  |   move.l d0,78(sp)
    500e:	|     |  |   move.l 78(sp),d0
    5012:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5016:	|     |  \-> move.l 292(sp),74(sp)
    501c:	|     |      move.l 1add8 <DOSBase>,d0
    5022:	|     |      movea.l d0,a6
    5024:	|     |      move.l 74(sp),d1
    5028:	|     |      jsr -126(a6)
    502c:	|     |      move.l d0,70(sp)
    5030:	|     |      move.l 70(sp),d0
    5034:	|     |  /-- bne.s 5046 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5036:	|     |  |   move.l 1add8 <DOSBase>,d0
    503c:	|     |  |   movea.l d0,a6
    503e:	|     |  |   jsr -60(a6)
    5042:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5046:	|     |  \-> move.l 98(sp),62(sp)
    504c:	|     |      move.l 1add0 <SysBase>,d0
    5052:	|     |      movea.l d0,a6
    5054:	|     |      movea.l 62(sp),a1
    5058:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    505c:	|     \----> movea.l 1ad28 <winHeight>,a0
    5062:	|            lea -15(a0),a0
    5066:	|            move.l a0,d0
    5068:	|            move.l d0,-(sp)
    506a:	|            pea a <_start+0xa>
    506e:	|            jsr 6846 <positionStatus>
    5074:	|            addq.l #8,sp

	return TRUE;
    5076:	|            moveq #1,d0
}
    5078:	\----------> movem.l (sp)+,d2-d4/a2/a6
    507c:	             lea 292(sp),sp
    5080:	             rts

00005082 <killSpeechTimers>:

void killSpeechTimers () {
    5082:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5084:	          move.l 1ad68 <allRunningFunctions>,(sp)

	while (thisFunction) {
    508a:	   /----- bra.s 50b6 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    508c:	/--|----> movea.l (sp),a0
    508e:	|  |      move.b 56(a0),d0
    5092:	|  |  /-- bne.s 50b0 <killSpeechTimers+0x2e>
    5094:	|  |  |   movea.l (sp),a0
    5096:	|  |  |   move.w 50(a0),d0
    509a:	|  |  +-- beq.s 50b0 <killSpeechTimers+0x2e>
    509c:	|  |  |   movea.l (sp),a0
    509e:	|  |  |   move.l 12(a0),d0
    50a2:	|  |  +-- beq.s 50b0 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    50a4:	|  |  |   movea.l (sp),a0
    50a6:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    50aa:	|  |  |   movea.l (sp),a0
    50ac:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    50b0:	|  |  \-> movea.l (sp),a0
    50b2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50b6:	|  \----> tst.l (sp)
    50b8:	\-------- bne.s 508c <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    50ba:	          jsr 6d84 <killAllSpeech>
}
    50c0:	          nop
    50c2:	          addq.l #4,sp
    50c4:	          rts

000050c6 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    50c6:	             lea -52(sp),sp
    50ca:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    50cc:	             movea.l 60(sp),a0
    50d0:	             move.l (a0),d0
    50d2:	             move.l d0,-(sp)
    50d4:	             jsr 5d54 <openSubSlice>
    50da:	             addq.l #4,sp
    50dc:	             tst.w d0
    50de:	         /-- bne.s 50e6 <loadFunctionCode+0x20>
    50e0:	         |   clr.w d0
    50e2:	/--------|-- bra.w 52b0 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    50e6:	|        \-> move.l 1adb8 <bigDataFile>,44(sp)
    50ee:	|            move.l 1add8 <DOSBase>,d0
    50f4:	|            movea.l d0,a6
    50f6:	|            move.l 44(sp),d1
    50fa:	|            jsr -306(a6)
    50fe:	|            move.l d0,40(sp)
    5102:	|            move.l 40(sp),d0
    5106:	|            move.l d0,d0
    5108:	|            movea.l 60(sp),a0
    510c:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5110:	|            move.l 1adb8 <bigDataFile>,d0
    5116:	|            move.l d0,-(sp)
    5118:	|            jsr 6bc <get2bytes>
    511e:	|            addq.l #4,sp
    5120:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5124:	|            move.l 1adb8 <bigDataFile>,d0
    512a:	|            move.l d0,-(sp)
    512c:	|            jsr 6bc <get2bytes>
    5132:	|            addq.l #4,sp
    5134:	|            movea.l 60(sp),a0
    5138:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    513c:	|            move.l 1adb8 <bigDataFile>,d0
    5142:	|            move.l d0,-(sp)
    5144:	|            jsr 6bc <get2bytes>
    514a:	|            addq.l #4,sp
    514c:	|            movea.l 60(sp),a0
    5150:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5154:	|            move.l 36(sp),d0
    5158:	|            lsl.l #3,d0
    515a:	|            move.l d0,32(sp)
    515e:	|            clr.l 28(sp)
    5162:	|            move.l 1add0 <SysBase>,d0
    5168:	|            movea.l d0,a6
    516a:	|            move.l 32(sp),d0
    516e:	|            move.l 28(sp),d1
    5172:	|            jsr -684(a6)
    5176:	|            move.l d0,24(sp)
    517a:	|            move.l 24(sp),d0
    517e:	|            movea.l 60(sp),a0
    5182:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5186:	|            movea.l 60(sp),a0
    518a:	|            move.l 4(a0),d0
    518e:	|        /-- bne.s 51a4 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5190:	|        |   pea 16f66 <PutChar+0xd0e>
    5196:	|        |   jsr 15784 <KPrintF>
    519c:	|        |   addq.l #4,sp
		return FALSE;
    519e:	|        |   clr.w d0
    51a0:	+--------|-- bra.w 52b0 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    51a4:	|        \-> clr.l 52(sp)
    51a8:	|        /-- bra.s 520a <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    51aa:	|     /--|-> move.l 1adb8 <bigDataFile>,8(sp)
    51b2:	|     |  |   move.l 1add8 <DOSBase>,d0
    51b8:	|     |  |   movea.l d0,a6
    51ba:	|     |  |   move.l 8(sp),d1
    51be:	|     |  |   jsr -306(a6)
    51c2:	|     |  |   move.l d0,4(sp)
    51c6:	|     |  |   move.l 4(sp),d1
    51ca:	|     |  |   movea.l 60(sp),a0
    51ce:	|     |  |   movea.l 4(a0),a0
    51d2:	|     |  |   move.l 52(sp),d0
    51d6:	|     |  |   lsl.l #3,d0
    51d8:	|     |  |   adda.l d0,a0
    51da:	|     |  |   move.l d1,d0
    51dc:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    51de:	|     |  |   move.l 1adb8 <bigDataFile>,d0
    51e4:	|     |  |   move.l d0,-(sp)
    51e6:	|     |  |   jsr 6bc <get2bytes>
    51ec:	|     |  |   addq.l #4,sp
    51ee:	|     |  |   move.l d0,d1
    51f0:	|     |  |   movea.l 60(sp),a0
    51f4:	|     |  |   movea.l 4(a0),a0
    51f8:	|     |  |   move.l 52(sp),d0
    51fc:	|     |  |   lsl.l #3,d0
    51fe:	|     |  |   adda.l d0,a0
    5200:	|     |  |   move.l d1,d0
    5202:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5206:	|     |  |   addq.l #1,52(sp)
    520a:	|     |  \-> move.l 52(sp),d0
    520e:	|     |      cmp.l 36(sp),d0
    5212:	|     \----- bcs.s 51aa <loadFunctionCode+0xe4>
	}

	finishAccess ();
    5214:	|            jsr 5ac4 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    521a:	|            movea.l 60(sp),a0
    521e:	|            move.l 8(a0),d0
    5222:	|  /-------- ble.w 52a6 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    5226:	|  |         movea.l 60(sp),a0
    522a:	|  |         move.l 8(a0),d0
    522e:	|  |         lsl.l #3,d0
    5230:	|  |         move.l d0,20(sp)
    5234:	|  |         clr.l 16(sp)
    5238:	|  |         move.l 1add0 <SysBase>,d0
    523e:	|  |         movea.l d0,a6
    5240:	|  |         move.l 20(sp),d0
    5244:	|  |         move.l 16(sp),d1
    5248:	|  |         jsr -684(a6)
    524c:	|  |         move.l d0,12(sp)
    5250:	|  |         move.l 12(sp),d0
    5254:	|  |         movea.l 60(sp),a0
    5258:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    525c:	|  |         movea.l 60(sp),a0
    5260:	|  |         move.l 20(a0),d0
    5264:	|  |     /-- bne.s 5278 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5266:	|  |     |   pea 16f66 <PutChar+0xd0e>
    526c:	|  |     |   jsr 15784 <KPrintF>
    5272:	|  |     |   addq.l #4,sp
			return FALSE;
    5274:	|  |     |   clr.w d0
    5276:	+--|-----|-- bra.s 52b0 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5278:	|  |     \-> clr.l 48(sp)
    527c:	|  |     /-- bra.s 5296 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    527e:	|  |  /--|-> movea.l 60(sp),a0
    5282:	|  |  |  |   move.l 20(a0),d1
    5286:	|  |  |  |   move.l 48(sp),d0
    528a:	|  |  |  |   lsl.l #3,d0
    528c:	|  |  |  |   movea.l d1,a0
    528e:	|  |  |  |   adda.l d0,a0
    5290:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    5292:	|  |  |  |   addq.l #1,48(sp)
    5296:	|  |  |  \-> movea.l 60(sp),a0
    529a:	|  |  |      move.l 8(a0),d0
    529e:	|  |  |      cmp.l 48(sp),d0
    52a2:	|  |  \----- bgt.s 527e <loadFunctionCode+0x1b8>
    52a4:	|  |     /-- bra.s 52ae <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    52a6:	|  \-----|-> movea.l 60(sp),a0
    52aa:	|        |   clr.l 8(a0)
	}
	return TRUE;
    52ae:	|        \-> moveq #1,d0
}
    52b0:	\----------> movea.l (sp)+,a6
    52b2:	             lea 52(sp),sp
    52b6:	             rts

000052b8 <loadHandlers>:

void loadHandlers (BPTR fp) {
    52b8:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    52ba:	movea.l 1a74e <currentEvents>,a2
    52c0:	move.l 8(sp),-(sp)
    52c4:	jsr 6bc <get2bytes>
    52ca:	addq.l #4,sp
    52cc:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    52ce:	movea.l 1a74e <currentEvents>,a2
    52d4:	move.l 8(sp),-(sp)
    52d8:	jsr 6bc <get2bytes>
    52de:	addq.l #4,sp
    52e0:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    52e4:	movea.l 1a74e <currentEvents>,a2
    52ea:	move.l 8(sp),-(sp)
    52ee:	jsr 6bc <get2bytes>
    52f4:	addq.l #4,sp
    52f6:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    52fa:	movea.l 1a74e <currentEvents>,a2
    5300:	move.l 8(sp),-(sp)
    5304:	jsr 6bc <get2bytes>
    530a:	addq.l #4,sp
    530c:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5310:	movea.l 1a74e <currentEvents>,a2
    5316:	move.l 8(sp),-(sp)
    531a:	jsr 6bc <get2bytes>
    5320:	addq.l #4,sp
    5322:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    5326:	movea.l 1a74e <currentEvents>,a2
    532c:	move.l 8(sp),-(sp)
    5330:	jsr 6bc <get2bytes>
    5336:	addq.l #4,sp
    5338:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    533c:	movea.l 1a74e <currentEvents>,a2
    5342:	move.l 8(sp),-(sp)
    5346:	jsr 6bc <get2bytes>
    534c:	addq.l #4,sp
    534e:	move.l d0,24(a2)
}
    5352:	nop
    5354:	movea.l (sp)+,a2
    5356:	rts

00005358 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5358:	       lea -312(sp),sp
    535c:	       movem.l d2-d3/a6,-(sp)
    5360:	       move.l 332(sp),d1
    5364:	       move.l 336(sp),d0
    5368:	       move.b d1,d1
    536a:	       move.b d1,16(sp)
    536e:	       move.b d0,d0
    5370:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5374:	       move.l 328(sp),318(sp)
    537a:	       move.l #1005,314(sp)
    5382:	       move.l 1add8 <DOSBase>,d0
    5388:	       movea.l d0,a6
    538a:	       move.l 318(sp),d1
    538e:	       move.l 314(sp),d2
    5392:	       jsr -30(a6)
    5396:	       move.l d0,310(sp)
    539a:	       move.l 310(sp),d0
    539e:	       move.l d0,306(sp)

	if (! fp) {
    53a2:	   /-- bne.s 53fe <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    53a4:	   |   move.l 1add8 <DOSBase>,d0
    53aa:	   |   movea.l d0,a6
    53ac:	   |   jsr -60(a6)
    53b0:	   |   move.l d0,154(sp)
    53b4:	   |   move.l 154(sp),d0
    53b8:	   |   move.l d0,150(sp)
    53bc:	   |   move.l #94095,146(sp)
    53c4:	   |   moveq #31,d0
    53c6:	   |   move.l d0,142(sp)
    53ca:	   |   move.l 1add8 <DOSBase>,d0
    53d0:	   |   movea.l d0,a6
    53d2:	   |   move.l 150(sp),d1
    53d6:	   |   move.l 146(sp),d2
    53da:	   |   move.l 142(sp),d3
    53de:	   |   jsr -48(a6)
    53e2:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    53e6:	   |   move.l 328(sp),-(sp)
    53ea:	   |   pea 16faf <PutChar+0xd57>
    53f0:	   |   jsr 15784 <KPrintF>
    53f6:	   |   addq.l #8,sp
		return NULL;
    53f8:	   |   moveq #0,d0
    53fa:	/--|-- bra.w 56be <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    53fe:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    5402:	|      move.l 306(sp),302(sp)
    5408:	|      move.l 1add8 <DOSBase>,d0
    540e:	|      movea.l d0,a6
    5410:	|      move.l 302(sp),d1
    5414:	|      jsr -306(a6)
    5418:	|      move.l d0,298(sp)
    541c:	|      move.l 298(sp),d0
    5420:	|      moveq #83,d1
    5422:	|      cmp.l d0,d1
    5424:	|  /-- beq.s 542c <openAndVerify+0xd4>
    5426:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    542c:	|  \-> move.l 306(sp),294(sp)
    5432:	|      move.l 1add8 <DOSBase>,d0
    5438:	|      movea.l d0,a6
    543a:	|      move.l 294(sp),d1
    543e:	|      jsr -306(a6)
    5442:	|      move.l d0,290(sp)
    5446:	|      move.l 290(sp),d0
    544a:	|      moveq #76,d1
    544c:	|      cmp.l d0,d1
    544e:	|  /-- beq.s 5456 <openAndVerify+0xfe>
    5450:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5456:	|  \-> move.l 306(sp),286(sp)
    545c:	|      move.l 1add8 <DOSBase>,d0
    5462:	|      movea.l d0,a6
    5464:	|      move.l 286(sp),d1
    5468:	|      jsr -306(a6)
    546c:	|      move.l d0,282(sp)
    5470:	|      move.l 282(sp),d0
    5474:	|      moveq #85,d1
    5476:	|      cmp.l d0,d1
    5478:	|  /-- beq.s 5480 <openAndVerify+0x128>
    547a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    5480:	|  \-> move.l 306(sp),278(sp)
    5486:	|      move.l 1add8 <DOSBase>,d0
    548c:	|      movea.l d0,a6
    548e:	|      move.l 278(sp),d1
    5492:	|      jsr -306(a6)
    5496:	|      move.l d0,274(sp)
    549a:	|      move.l 274(sp),d0
    549e:	|      moveq #68,d1
    54a0:	|      cmp.l d0,d1
    54a2:	|  /-- beq.s 54aa <openAndVerify+0x152>
    54a4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    54aa:	|  \-> move.l 306(sp),270(sp)
    54b0:	|      move.l 1add8 <DOSBase>,d0
    54b6:	|      movea.l d0,a6
    54b8:	|      move.l 270(sp),d1
    54bc:	|      jsr -306(a6)
    54c0:	|      move.l d0,266(sp)
    54c4:	|      move.l 266(sp),d1
    54c8:	|      move.b 16(sp),d0
    54cc:	|      ext.w d0
    54ce:	|      movea.w d0,a0
    54d0:	|      cmpa.l d1,a0
    54d2:	|  /-- beq.s 54da <openAndVerify+0x182>
    54d4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    54da:	|  \-> move.l 306(sp),262(sp)
    54e0:	|      move.l 1add8 <DOSBase>,d0
    54e6:	|      movea.l d0,a6
    54e8:	|      move.l 262(sp),d1
    54ec:	|      jsr -306(a6)
    54f0:	|      move.l d0,258(sp)
    54f4:	|      move.l 258(sp),d1
    54f8:	|      move.b 14(sp),d0
    54fc:	|      ext.w d0
    54fe:	|      movea.w d0,a0
    5500:	|      cmpa.l d1,a0
    5502:	|  /-- beq.s 550a <openAndVerify+0x1b2>
    5504:	|  |   move.w #1,322(sp)
	if (headerBad) {
    550a:	|  \-> tst.w 322(sp)
    550e:	|  /-- beq.s 5566 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5510:	|  |   move.l 1add8 <DOSBase>,d0
    5516:	|  |   movea.l d0,a6
    5518:	|  |   jsr -60(a6)
    551c:	|  |   move.l d0,174(sp)
    5520:	|  |   move.l 174(sp),d0
    5524:	|  |   move.l d0,170(sp)
    5528:	|  |   move.l #94158,166(sp)
    5530:	|  |   moveq #31,d0
    5532:	|  |   move.l d0,162(sp)
    5536:	|  |   move.l 1add8 <DOSBase>,d0
    553c:	|  |   movea.l d0,a6
    553e:	|  |   move.l 170(sp),d1
    5542:	|  |   move.l 166(sp),d2
    5546:	|  |   move.l 162(sp),d3
    554a:	|  |   jsr -48(a6)
    554e:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    5552:	|  |   pea 16fce <PutChar+0xd76>
    5558:	|  |   jsr 15784 <KPrintF>
    555e:	|  |   addq.l #4,sp
		return NULL;
    5560:	|  |   moveq #0,d0
    5562:	+--|-- bra.w 56be <openAndVerify+0x366>
	}
	FGetC (fp);
    5566:	|  \-> move.l 306(sp),254(sp)
    556c:	|      move.l 1add8 <DOSBase>,d0
    5572:	|      movea.l d0,a6
    5574:	|      move.l 254(sp),d1
    5578:	|      jsr -306(a6)
    557c:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    5580:	|      nop
    5582:	|  /-> move.l 306(sp),246(sp)
    5588:	|  |   move.l 1add8 <DOSBase>,d0
    558e:	|  |   movea.l d0,a6
    5590:	|  |   move.l 246(sp),d1
    5594:	|  |   jsr -306(a6)
    5598:	|  |   move.l d0,242(sp)
    559c:	|  |   move.l 242(sp),d0
    55a0:	|  \-- bne.s 5582 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    55a2:	|      move.l 306(sp),238(sp)
    55a8:	|      move.l 1add8 <DOSBase>,d0
    55ae:	|      movea.l d0,a6
    55b0:	|      move.l 238(sp),d1
    55b4:	|      jsr -306(a6)
    55b8:	|      move.l d0,234(sp)
    55bc:	|      move.l 234(sp),d0
    55c0:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    55c4:	|      move.l 306(sp),226(sp)
    55ca:	|      move.l 1add8 <DOSBase>,d0
    55d0:	|      movea.l d0,a6
    55d2:	|      move.l 226(sp),d1
    55d6:	|      jsr -306(a6)
    55da:	|      move.l d0,222(sp)
    55de:	|      move.l 222(sp),d0
    55e2:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    55e6:	|      move.l 230(sp),d0
    55ea:	|      lsl.l #8,d0
    55ec:	|      add.l 218(sp),d0
    55f0:	|      movea.l 344(sp),a0
    55f4:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    55f6:	|      movea.l 344(sp),a0
    55fa:	|      move.l (a0),d0
    55fc:	|      cmpi.l #514,d0
    5602:	|  /-- ble.s 5658 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    5604:	|  |   move.l 1add8 <DOSBase>,d0
    560a:	|  |   movea.l d0,a6
    560c:	|  |   jsr -60(a6)
    5610:	|  |   move.l d0,194(sp)
    5614:	|  |   move.l 194(sp),d0
    5618:	|  |   move.l d0,190(sp)
    561c:	|  |   move.l #94185,186(sp)
    5624:	|  |   moveq #100,d1
    5626:	|  |   move.l d1,182(sp)
    562a:	|  |   move.l 1add8 <DOSBase>,d0
    5630:	|  |   movea.l d0,a6
    5632:	|  |   move.l 190(sp),d1
    5636:	|  |   move.l 186(sp),d2
    563a:	|  |   move.l 182(sp),d3
    563e:	|  |   jsr -48(a6)
    5642:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    5646:	|  |   pea 16fe9 <PutChar+0xd91>
    564c:	|  |   jsr 15784 <KPrintF>
    5652:	|  |   addq.l #4,sp
		return NULL;
    5654:	|  |   moveq #0,d0
    5656:	+--|-- bra.s 56be <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    5658:	|  \-> movea.l 344(sp),a0
    565c:	|      move.l (a0),d0
    565e:	|      cmpi.l #257,d0
    5664:	|  /-- bgt.s 56ba <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    5666:	|  |   move.l 1add8 <DOSBase>,d0
    566c:	|  |   movea.l d0,a6
    566e:	|  |   jsr -60(a6)
    5672:	|  |   move.l d0,214(sp)
    5676:	|  |   move.l 214(sp),d0
    567a:	|  |   move.l d0,210(sp)
    567e:	|  |   move.l #94254,206(sp)
    5686:	|  |   moveq #100,d0
    5688:	|  |   move.l d0,202(sp)
    568c:	|  |   move.l 1add8 <DOSBase>,d0
    5692:	|  |   movea.l d0,a6
    5694:	|  |   move.l 210(sp),d1
    5698:	|  |   move.l 206(sp),d2
    569c:	|  |   move.l 202(sp),d3
    56a0:	|  |   jsr -48(a6)
    56a4:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    56a8:	|  |   pea 1702e <PutChar+0xdd6>
    56ae:	|  |   jsr 15784 <KPrintF>
    56b4:	|  |   addq.l #4,sp
		return NULL;
    56b6:	|  |   moveq #0,d0
    56b8:	+--|-- bra.s 56be <openAndVerify+0x366>
	}
	return fp;
    56ba:	|  \-> move.l 306(sp),d0
}
    56be:	\----> movem.l (sp)+,d2-d3/a6
    56c2:	       lea 312(sp),sp
    56c6:	       rts

000056c8 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    56c8:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    56ca:	          move.l #109928,(sp)
	while (* huntAndDestroy) {
    56d0:	   /----- bra.s 56fc <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    56d2:	/--|----> movea.l (sp),a0
    56d4:	|  |      move.l (a0),d0
    56d6:	|  |      cmp.l 8(sp),d0
    56da:	|  |  /-- bne.s 56f2 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    56dc:	|  |  |   movea.l (sp),a0
    56de:	|  |  |   movea.l (a0),a0
    56e0:	|  |  |   move.l 44(a0),d0
    56e4:	|  |  |   movea.l (sp),a0
    56e6:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    56e8:	|  |  |   movea.l 8(sp),a0
    56ec:	|  |  |   clr.l 44(a0)
    56f0:	|  +--|-- bra.s 56fc <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    56f2:	|  |  \-> movea.l (sp),a0
    56f4:	|  |      move.l (a0),d0
    56f6:	|  |      moveq #44,d1
    56f8:	|  |      add.l d0,d1
    56fa:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    56fc:	|  \----> movea.l (sp),a0
    56fe:	|         move.l (a0),d0
    5700:	\-------- bne.s 56d2 <pauseFunction+0xa>
		}
	}
}
    5702:	          nop
    5704:	          nop
    5706:	          addq.l #4,sp
    5708:	          rts

0000570a <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    570a:	move.l 1ad68 <allRunningFunctions>,d0
    5710:	movea.l 4(sp),a0
    5714:	move.l d0,44(a0)
	allRunningFunctions = fun;
    5718:	move.l 4(sp),1ad68 <allRunningFunctions>
}
    5720:	nop
    5722:	rts

00005724 <runSludge>:

BOOL runSludge () {
    5724:	                   lea -12(sp),sp
    5728:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    572a:	                   move.l 1ad68 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    5732:	      /----------- bra.s 57ae <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    5734:	   /--|----------> movea.l 12(sp),a0
    5738:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    573e:	   |  |            movea.l 12(sp),a0
    5742:	   |  |            move.b 56(a0),d0
    5746:	   |  |  /-------- bne.s 57a8 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    5748:	   |  |  |         movea.l 12(sp),a0
    574c:	   |  |  |         move.l 12(a0),d0
    5750:	   |  |  |  /----- beq.s 577a <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    5752:	   |  |  |  |      movea.l 12(sp),a0
    5756:	   |  |  |  |      move.l 12(a0),d0
    575a:	   |  |  |  |  /-- bpl.s 5766 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    575c:	   |  |  |  |  |   movea.l 12(sp),a0
    5760:	   |  |  |  |  |   clr.l 12(a0)
    5764:	   |  |  +--|--|-- bra.s 57a8 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    5766:	   |  |  |  |  \-> movea.l 12(sp),a0
    576a:	   |  |  |  |      move.l 12(a0),d0
    576e:	   |  |  |  |      subq.l #1,d0
    5770:	   |  |  |  |      movea.l 12(sp),a0
    5774:	   |  |  |  |      move.l d0,12(a0)
    5778:	   |  |  +--|----- bra.s 57a8 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    577a:	   |  |  |  \----> movea.l 12(sp),a0
    577e:	   |  |  |         move.w 50(a0),d0
    5782:	   |  |  |     /-- beq.s 5792 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    5784:	   |  |  |     |   movea.l 12(sp),a0
    5788:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    578c:	   |  |  |     |   jsr 6d84 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    5792:	   |  |  |     \-> move.l 12(sp),-(sp)
    5796:	   |  |  |         jsr 370e <continueFunction>
    579c:	   |  |  |         addq.l #4,sp
    579e:	   |  |  |         tst.w d0
    57a0:	   |  |  +-------- bne.s 57a8 <runSludge+0x84>
					return FALSE;
    57a2:	   |  |  |         clr.w d0
    57a4:	/--|--|--|-------- bra.w 5834 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    57a8:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    57ae:	|  |  \----------> tst.l 12(sp)
    57b2:	|  \-------------- bne.s 5734 <runSludge+0x10>
	}

	if (loadNow) {
    57b4:	|                  move.l 1ad9c <loadNow>,d0
    57ba:	|        /-------- beq.s 5832 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    57bc:	|        |         movea.l 1ad9c <loadNow>,a0
    57c2:	|        |         move.b (a0),d0
    57c4:	|        |         cmpi.b #58,d0
    57c8:	|        |  /----- bne.s 57fc <runSludge+0xd8>
			saveGame (loadNow + 1);
    57ca:	|        |  |      move.l 1ad9c <loadNow>,d0
    57d0:	|        |  |      addq.l #1,d0
    57d2:	|        |  |      move.l d0,-(sp)
    57d4:	|        |  |      jsr b5c8 <saveGame>
    57da:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    57dc:	|        |  |      movea.l 1aef2 <saverFunc>,a0
    57e2:	|        |  |      lea 28(a0),a0
    57e6:	|        |  |      pea 1 <_start+0x1>
    57ea:	|        |  |      pea 1 <_start+0x1>
    57ee:	|        |  |      move.l a0,-(sp)
    57f0:	|        |  |      jsr 13eaa <setVariable>
    57f6:	|        |  |      lea 12(sp),sp
    57fa:	|        |  |  /-- bra.s 5814 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    57fc:	|        |  \--|-> move.l 1ad9c <loadNow>,d0
    5802:	|        |     |   move.l d0,-(sp)
    5804:	|        |     |   jsr b110 <loadGame>
    580a:	|        |     |   addq.l #4,sp
    580c:	|        |     |   tst.w d0
    580e:	|        |     +-- bne.s 5814 <runSludge+0xf0>
    5810:	|        |     |   clr.w d0
    5812:	+--------|-----|-- bra.s 5834 <runSludge+0x110>
		}
		FreeVec(loadNow);
    5814:	|        |     \-> move.l 1ad9c <loadNow>,8(sp)
    581c:	|        |         move.l 1add0 <SysBase>,d0
    5822:	|        |         movea.l d0,a6
    5824:	|        |         movea.l 8(sp),a1
    5828:	|        |         jsr -690(a6)
		loadNow = NULL;
    582c:	|        |         clr.l 1ad9c <loadNow>
	}

	return TRUE;
    5832:	|        \-------> moveq #1,d0
}
    5834:	\----------------> movea.l (sp)+,a6
    5836:	                   lea 12(sp),sp
    583a:	                   rts

0000583c <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    583c:	movea.l 1a74e <currentEvents>,a0
    5842:	move.l (a0),d0
    5844:	move.l 4(sp),-(sp)
    5848:	move.l d0,-(sp)
    584a:	jsr 8d0 <put2bytes>
    5850:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    5852:	movea.l 1a74e <currentEvents>,a0
    5858:	move.l 4(a0),d0
    585c:	move.l 4(sp),-(sp)
    5860:	move.l d0,-(sp)
    5862:	jsr 8d0 <put2bytes>
    5868:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    586a:	movea.l 1a74e <currentEvents>,a0
    5870:	move.l 8(a0),d0
    5874:	move.l 4(sp),-(sp)
    5878:	move.l d0,-(sp)
    587a:	jsr 8d0 <put2bytes>
    5880:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    5882:	movea.l 1a74e <currentEvents>,a0
    5888:	move.l 12(a0),d0
    588c:	move.l 4(sp),-(sp)
    5890:	move.l d0,-(sp)
    5892:	jsr 8d0 <put2bytes>
    5898:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    589a:	movea.l 1a74e <currentEvents>,a0
    58a0:	move.l 16(a0),d0
    58a4:	move.l 4(sp),-(sp)
    58a8:	move.l d0,-(sp)
    58aa:	jsr 8d0 <put2bytes>
    58b0:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    58b2:	movea.l 1a74e <currentEvents>,a0
    58b8:	move.l 20(a0),d0
    58bc:	move.l 4(sp),-(sp)
    58c0:	move.l d0,-(sp)
    58c2:	jsr 8d0 <put2bytes>
    58c8:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    58ca:	movea.l 1a74e <currentEvents>,a0
    58d0:	move.l 24(a0),d0
    58d4:	move.l 4(sp),-(sp)
    58d8:	move.l d0,-(sp)
    58da:	jsr 8d0 <put2bytes>
    58e0:	addq.l #8,sp
}
    58e2:	nop
    58e4:	rts

000058e6 <sludgeDisplay>:

void sludgeDisplay () {					
    58e6:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    58e8:	move.l #14675968,(sp)
	displayCursor();
    58ee:	jsr dba <displayCursor>
	CstDrawBackdrop();
    58f4:	jsr 160e <CstDrawBackdrop>
	CstRestoreScreen();
    58fa:	jsr 1aea <CstRestoreScreen>
	drawPeople();
    5900:	jsr 8fc0 <drawPeople>
	CstSwapBuffer();
    5906:	jsr 27c4 <CstSwapBuffer>
}
    590c:	nop
    590e:	addq.l #4,sp
    5910:	rts

00005912 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    5912:	      /-- bra.s 5932 <stackSetByIndex+0x20>
		vS = vS->next;
    5914:	/-----|-> movea.l 4(sp),a0
    5918:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    591e:	|     +-- bne.s 5932 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    5920:	|     |   pea 17075 <PutChar+0xe1d>
    5926:	|     |   jsr 15784 <KPrintF>
    592c:	|     |   addq.l #4,sp
			return FALSE;
    592e:	|     |   clr.w d0
    5930:	|  /--|-- bra.s 5954 <stackSetByIndex+0x42>
	while (theIndex--) {
    5932:	|  |  \-> move.l 8(sp),d0
    5936:	|  |      move.l d0,d1
    5938:	|  |      subq.l #1,d1
    593a:	|  |      move.l d1,8(sp)
    593e:	|  |      tst.l d0
    5940:	\--|----- bne.s 5914 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    5942:	   |      move.l 4(sp),d0
    5946:	   |      move.l d0,-(sp)
    5948:	   |      move.l 16(sp),-(sp)
    594c:	   |      jsr 13a72 <copyVariable>
    5952:	   |      addq.l #8,sp
}
    5954:	   \----> rts

00005956 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    5956:	             lea -24(sp),sp
    595a:	             move.l a6,-(sp)
    595c:	             move.l 48(sp),d0
    5960:	             move.w d0,d0
    5962:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    5966:	             moveq #58,d0
    5968:	             move.l d0,24(sp)
    596c:	             clr.l 20(sp)
    5970:	             move.l 1add0 <SysBase>,d0
    5976:	             movea.l d0,a6
    5978:	             move.l 24(sp),d0
    597c:	             move.l 20(sp),d1
    5980:	             jsr -684(a6)
    5984:	             move.l d0,16(sp)
    5988:	             move.l 16(sp),d0
    598c:	             move.l d0,12(sp)
	if(!newFunc) {
    5990:	         /-- bne.s 59a6 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5992:	         |   pea 1708e <PutChar+0xe36>
    5998:	         |   jsr 15784 <KPrintF>
    599e:	         |   addq.l #4,sp
		return 0;
    59a0:	         |   moveq #0,d0
    59a2:	/--------|-- bra.w 5abc <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    59a6:	|        \-> move.l 32(sp),d0
    59aa:	|            movea.l 12(sp),a0
    59ae:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    59b0:	|            move.l 12(sp),-(sp)
    59b4:	|            jsr 50c6 <loadFunctionCode>
    59ba:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    59bc:	|            movea.l 12(sp),a0
    59c0:	|            move.l 16(a0),d1
    59c4:	|            move.l 36(sp),d0
    59c8:	|            cmp.l d1,d0
    59ca:	|        /-- beq.s 59e0 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    59cc:	|        |   pea 170b7 <PutChar+0xe5f>
    59d2:	|        |   jsr 15784 <KPrintF>
    59d8:	|        |   addq.l #4,sp
		return NULL; 
    59da:	|        |   moveq #0,d0
    59dc:	+--------|-- bra.w 5abc <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    59e0:	|        \-> movea.l 12(sp),a0
    59e4:	|            move.l 16(a0),d1
    59e8:	|            movea.l 12(sp),a0
    59ec:	|            move.l 8(a0),d0
    59f0:	|            cmp.l d1,d0
    59f2:	|  /-------- bge.s 5a5c <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    59f4:	|  |         pea 170d3 <PutChar+0xe7b>
    59fa:	|  |         jsr 15784 <KPrintF>
    5a00:	|  |         addq.l #4,sp
		return NULL; 
    5a02:	|  |         moveq #0,d0
    5a04:	+--|-------- bra.w 5abc <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5a08:	|  |  /----> movea.l 44(sp),a0
    5a0c:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5a10:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5a14:	|  |  |      movea.l 44(sp),a0
    5a18:	|  |  |      move.l (a0),d0
    5a1a:	|  |  |  /-- bne.s 5a30 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5a1c:	|  |  |  |   pea 170fd <PutChar+0xea5>
    5a22:	|  |  |  |   jsr 15784 <KPrintF>
    5a28:	|  |  |  |   addq.l #4,sp
			return NULL;
    5a2a:	|  |  |  |   moveq #0,d0
    5a2c:	+--|--|--|-- bra.w 5abc <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5a30:	|  |  |  \-> movea.l 12(sp),a0
    5a34:	|  |  |      move.l 20(a0),d1
    5a38:	|  |  |      move.l 36(sp),d0
    5a3c:	|  |  |      lsl.l #3,d0
    5a3e:	|  |  |      add.l d0,d1
    5a40:	|  |  |      move.l 8(sp),d0
    5a44:	|  |  |      move.l d1,-(sp)
    5a46:	|  |  |      move.l d0,-(sp)
    5a48:	|  |  |      jsr 13a72 <copyVariable>
    5a4e:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5a50:	|  |  |      move.l 44(sp),-(sp)
    5a54:	|  |  |      jsr 13f3c <trimStack>
    5a5a:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5a5c:	|  \--|----> tst.l 36(sp)
    5a60:	|     \----- bne.s 5a08 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5a62:	|            movea.l 12(sp),a0
    5a66:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5a6a:	|            movea.l 12(sp),a0
    5a6e:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5a72:	|            movea.l 12(sp),a0
    5a76:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5a7c:	|            movea.l 12(sp),a0
    5a80:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5a86:	|            movea.l 12(sp),a0
    5a8a:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5a8e:	|            movea.l 12(sp),a0
    5a92:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5a96:	|            movea.l 12(sp),a0
    5a9a:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5a9e:	|            movea.l 12(sp),a0
    5aa2:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5aa6:	|            movea.l 12(sp),a0
    5aaa:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5aae:	|            move.l 12(sp),-(sp)
    5ab2:	|            jsr 570a <restartFunction>
    5ab8:	|            addq.l #4,sp
	return 1;
    5aba:	|            moveq #1,d0
}
    5abc:	\----------> movea.l (sp)+,a6
    5abe:	             lea 24(sp),sp
    5ac2:	             rts

00005ac4 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5ac4:	clr.w 1a75a <sliceBusy>
}
    5aca:	nop
    5acc:	rts

00005ace <getNumberedString>:

char * getNumberedString (int value) {
    5ace:	       lea -56(sp),sp
    5ad2:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5ad6:	       move.w 1a75a <sliceBusy>,d0
    5adc:	   /-- beq.s 5b26 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5ade:	   |   move.l 1add8 <DOSBase>,d0
    5ae4:	   |   movea.l d0,a6
    5ae6:	   |   jsr -60(a6)
    5aea:	   |   move.l d0,28(sp)
    5aee:	   |   move.l 28(sp),d0
    5af2:	   |   move.l d0,24(sp)
    5af6:	   |   move.l #94536,20(sp)
    5afe:	   |   moveq #76,d0
    5b00:	   |   move.l d0,16(sp)
    5b04:	   |   move.l 1add8 <DOSBase>,d0
    5b0a:	   |   movea.l d0,a6
    5b0c:	   |   move.l 24(sp),d1
    5b10:	   |   move.l 20(sp),d2
    5b14:	   |   move.l 16(sp),d3
    5b18:	   |   jsr -48(a6)
    5b1c:	   |   move.l d0,12(sp)
		return NULL;
    5b20:	   |   moveq #0,d0
    5b22:	/--|-- bra.w 5bc2 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5b26:	|  \-> move.l 1adb8 <bigDataFile>,64(sp)
    5b2e:	|      move.l 72(sp),d0
    5b32:	|      add.l d0,d0
    5b34:	|      add.l d0,d0
    5b36:	|      move.l d0,d1
    5b38:	|      move.l 1adc4 <startOfTextIndex>,d0
    5b3e:	|      add.l d1,d0
    5b40:	|      move.l d0,60(sp)
    5b44:	|      moveq #-1,d0
    5b46:	|      move.l d0,56(sp)
    5b4a:	|      move.l 1add8 <DOSBase>,d0
    5b50:	|      movea.l d0,a6
    5b52:	|      move.l 64(sp),d1
    5b56:	|      move.l 60(sp),d2
    5b5a:	|      move.l 56(sp),d3
    5b5e:	|      jsr -66(a6)
    5b62:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5b66:	|      move.l 1adb8 <bigDataFile>,d0
    5b6c:	|      move.l d0,-(sp)
    5b6e:	|      jsr 718 <get4bytes>
    5b74:	|      addq.l #4,sp
    5b76:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5b7a:	|      move.l 1adb8 <bigDataFile>,48(sp)
    5b82:	|      move.l 72(sp),44(sp)
    5b88:	|      moveq #-1,d0
    5b8a:	|      move.l d0,40(sp)
    5b8e:	|      move.l 1add8 <DOSBase>,d0
    5b94:	|      movea.l d0,a6
    5b96:	|      move.l 48(sp),d1
    5b9a:	|      move.l 44(sp),d2
    5b9e:	|      move.l 40(sp),d3
    5ba2:	|      jsr -66(a6)
    5ba6:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5baa:	|      move.l 1adb8 <bigDataFile>,d0
    5bb0:	|      move.l d0,-(sp)
    5bb2:	|      jsr b02 <readString>
    5bb8:	|      addq.l #4,sp
    5bba:	|      move.l d0,32(sp)
	
	return s;
    5bbe:	|      move.l 32(sp),d0
}
    5bc2:	\----> movem.l (sp)+,d2-d3/a6
    5bc6:	       lea 56(sp),sp
    5bca:	       rts

00005bcc <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5bcc:	       lea -32(sp),sp
    5bd0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5bd4:	       move.w 1a75a <sliceBusy>,d0
    5bda:	   /-- beq.s 5bf6 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5bdc:	   |   pea 17195 <PutChar+0xf3d>
    5be2:	   |   pea 171b3 <PutChar+0xf5b>
    5be8:	   |   jsr 15784 <KPrintF>
    5bee:	   |   addq.l #8,sp
		return 0;
    5bf0:	   |   moveq #0,d0
    5bf2:	/--|-- bra.w 5c8a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5bf6:	|  \-> move.l 1adb8 <bigDataFile>,40(sp)
    5bfe:	|      move.l 48(sp),d0
    5c02:	|      add.l d0,d0
    5c04:	|      add.l d0,d0
    5c06:	|      move.l d0,d1
    5c08:	|      move.l 1adc0 <startOfDataIndex>,d0
    5c0e:	|      add.l d1,d0
    5c10:	|      move.l d0,36(sp)
    5c14:	|      moveq #-1,d0
    5c16:	|      move.l d0,32(sp)
    5c1a:	|      move.l 1add8 <DOSBase>,d0
    5c20:	|      movea.l d0,a6
    5c22:	|      move.l 40(sp),d1
    5c26:	|      move.l 36(sp),d2
    5c2a:	|      move.l 32(sp),d3
    5c2e:	|      jsr -66(a6)
    5c32:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5c36:	|      move.l 1adb8 <bigDataFile>,24(sp)
    5c3e:	|      move.l 1adb8 <bigDataFile>,d0
    5c44:	|      move.l d0,-(sp)
    5c46:	|      jsr 718 <get4bytes>
    5c4c:	|      addq.l #4,sp
    5c4e:	|      move.l d0,20(sp)
    5c52:	|      clr.l 16(sp)
    5c56:	|      move.l 1add8 <DOSBase>,d0
    5c5c:	|      movea.l d0,a6
    5c5e:	|      move.l 24(sp),d1
    5c62:	|      move.l 20(sp),d2
    5c66:	|      move.l 16(sp),d3
    5c6a:	|      jsr -66(a6)
    5c6e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5c72:	|      move.w #1,1a75a <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5c7a:	|      move.l 1adb8 <bigDataFile>,d0
    5c80:	|      move.l d0,-(sp)
    5c82:	|      jsr 718 <get4bytes>
    5c88:	|      addq.l #4,sp
}
    5c8a:	\----> movem.l (sp)+,d2-d3/a6
    5c8e:	       lea 32(sp),sp
    5c92:	       rts

00005c94 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5c94:	       lea -32(sp),sp
    5c98:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5c9c:	       move.w 1a75a <sliceBusy>,d0
    5ca2:	   /-- beq.s 5cbe <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5ca4:	   |   pea 17195 <PutChar+0xf3d>
    5caa:	   |   pea 171b3 <PutChar+0xf5b>
    5cb0:	   |   jsr 15784 <KPrintF>
    5cb6:	   |   addq.l #8,sp
        return FALSE;
    5cb8:	   |   clr.w d0
    5cba:	/--|-- bra.w 5d4a <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5cbe:	|  \-> move.l 1adb8 <bigDataFile>,40(sp)
    5cc6:	|      move.l 48(sp),d0
    5cca:	|      add.l d0,d0
    5ccc:	|      add.l d0,d0
    5cce:	|      move.l d0,d1
    5cd0:	|      move.l 1adcc <startOfObjectIndex>,d0
    5cd6:	|      add.l d1,d0
    5cd8:	|      move.l d0,36(sp)
    5cdc:	|      moveq #-1,d0
    5cde:	|      move.l d0,32(sp)
    5ce2:	|      move.l 1add8 <DOSBase>,d0
    5ce8:	|      movea.l d0,a6
    5cea:	|      move.l 40(sp),d1
    5cee:	|      move.l 36(sp),d2
    5cf2:	|      move.l 32(sp),d3
    5cf6:	|      jsr -66(a6)
    5cfa:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5cfe:	|      move.l 1adb8 <bigDataFile>,24(sp)
    5d06:	|      move.l 1adb8 <bigDataFile>,d0
    5d0c:	|      move.l d0,-(sp)
    5d0e:	|      jsr 718 <get4bytes>
    5d14:	|      addq.l #4,sp
    5d16:	|      move.l d0,20(sp)
    5d1a:	|      moveq #-1,d0
    5d1c:	|      move.l d0,16(sp)
    5d20:	|      move.l 1add8 <DOSBase>,d0
    5d26:	|      movea.l d0,a6
    5d28:	|      move.l 24(sp),d1
    5d2c:	|      move.l 20(sp),d2
    5d30:	|      move.l 16(sp),d3
    5d34:	|      jsr -66(a6)
    5d38:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5d3c:	|      move.w #1,1a75a <sliceBusy>
    5d44:	|      move.w 1a75a <sliceBusy>,d0
}
    5d4a:	\----> movem.l (sp)+,d2-d3/a6
    5d4e:	       lea 32(sp),sp
    5d52:	       rts

00005d54 <openSubSlice>:

BOOL openSubSlice (int num) {
    5d54:	       lea -32(sp),sp
    5d58:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5d5c:	       move.w 1a75a <sliceBusy>,d0
    5d62:	   /-- beq.s 5d7e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5d64:	   |   pea 17195 <PutChar+0xf3d>
    5d6a:	   |   pea 171b3 <PutChar+0xf5b>
    5d70:	   |   jsr 15784 <KPrintF>
    5d76:	   |   addq.l #8,sp
		return FALSE;
    5d78:	   |   clr.w d0
    5d7a:	/--|-- bra.w 5e0a <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5d7e:	|  \-> move.l 1adb8 <bigDataFile>,40(sp)
    5d86:	|      move.l 48(sp),d0
    5d8a:	|      add.l d0,d0
    5d8c:	|      add.l d0,d0
    5d8e:	|      move.l d0,d1
    5d90:	|      move.l 1adc8 <startOfSubIndex>,d0
    5d96:	|      add.l d1,d0
    5d98:	|      move.l d0,36(sp)
    5d9c:	|      moveq #-1,d0
    5d9e:	|      move.l d0,32(sp)
    5da2:	|      move.l 1add8 <DOSBase>,d0
    5da8:	|      movea.l d0,a6
    5daa:	|      move.l 40(sp),d1
    5dae:	|      move.l 36(sp),d2
    5db2:	|      move.l 32(sp),d3
    5db6:	|      jsr -66(a6)
    5dba:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5dbe:	|      move.l 1adb8 <bigDataFile>,24(sp)
    5dc6:	|      move.l 1adb8 <bigDataFile>,d0
    5dcc:	|      move.l d0,-(sp)
    5dce:	|      jsr 718 <get4bytes>
    5dd4:	|      addq.l #4,sp
    5dd6:	|      move.l d0,20(sp)
    5dda:	|      moveq #-1,d0
    5ddc:	|      move.l d0,16(sp)
    5de0:	|      move.l 1add8 <DOSBase>,d0
    5de6:	|      movea.l d0,a6
    5de8:	|      move.l 24(sp),d1
    5dec:	|      move.l 20(sp),d2
    5df0:	|      move.l 16(sp),d3
    5df4:	|      jsr -66(a6)
    5df8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5dfc:	|      move.w #1,1a75a <sliceBusy>
    5e04:	|      move.w 1a75a <sliceBusy>,d0
}
    5e0a:	\----> movem.l (sp)+,d2-d3/a6
    5e0e:	       lea 32(sp),sp
    5e12:	       rts

00005e14 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    5e14:	       lea -180(sp),sp
    5e18:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5e1c:	       tst.l 196(sp)
    5e20:	/----- beq.s 5e60 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    5e22:	|      move.l 196(sp),1adb8 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    5e2a:	|      move.l 196(sp),168(sp)
    5e30:	|      clr.l 164(sp)
    5e34:	|      clr.l 160(sp)
    5e38:	|      move.l 1add8 <DOSBase>,d0
    5e3e:	|      movea.l d0,a6
    5e40:	|      move.l 168(sp),d1
    5e44:	|      move.l 164(sp),d2
    5e48:	|      move.l 160(sp),d3
    5e4c:	|      jsr -66(a6)
    5e50:	|      move.l d0,156(sp)
    5e54:	|      move.l 156(sp),d0
    5e58:	|      move.l d0,1adbc <startIndex>
    5e5e:	|  /-- bra.s 5e9a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    5e60:	\--|-> move.l 1adb8 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    5e68:	   |   move.l 196(sp),184(sp)
    5e6e:	   |   move.l 1adbc <startIndex>,d0
    5e74:	   |   move.l d0,180(sp)
    5e78:	   |   moveq #-1,d0
    5e7a:	   |   move.l d0,176(sp)
    5e7e:	   |   move.l 1add8 <DOSBase>,d0
    5e84:	   |   movea.l d0,a6
    5e86:	   |   move.l 184(sp),d1
    5e8a:	   |   move.l 180(sp),d2
    5e8e:	   |   move.l 176(sp),d3
    5e92:	   |   jsr -66(a6)
    5e96:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    5e9a:	   \-> clr.w 1a75a <sliceBusy>

	if (skipBefore > numLanguages) {
    5ea0:	       move.l 204(sp),d0
    5ea4:	       cmp.l 200(sp),d0
    5ea8:	   /-- bls.s 5ebc <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    5eaa:	   |   pea 171cd <PutChar+0xf75>
    5eb0:	   |   jsr 15784 <KPrintF>
    5eb6:	   |   addq.l #4,sp
		skipBefore = 0;
    5eb8:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5ebc:	   \-> move.l 200(sp),d0
    5ec0:	       sub.l 204(sp),d0
    5ec4:	       move.l d0,188(sp)
	while (skipBefore) {
    5ec8:	   /-- bra.s 5f06 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    5eca:	/--|-> move.l 196(sp),24(sp)
    5ed0:	|  |   move.l 196(sp),-(sp)
    5ed4:	|  |   jsr 718 <get4bytes>
    5eda:	|  |   addq.l #4,sp
    5edc:	|  |   move.l d0,20(sp)
    5ee0:	|  |   moveq #-1,d0
    5ee2:	|  |   move.l d0,16(sp)
    5ee6:	|  |   move.l 1add8 <DOSBase>,d0
    5eec:	|  |   movea.l d0,a6
    5eee:	|  |   move.l 24(sp),d1
    5ef2:	|  |   move.l 20(sp),d2
    5ef6:	|  |   move.l 16(sp),d3
    5efa:	|  |   jsr -66(a6)
    5efe:	|  |   move.l d0,12(sp)
		skipBefore --;
    5f02:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    5f06:	|  \-> tst.l 204(sp)
    5f0a:	\----- bne.s 5eca <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5f0c:	       move.l 196(sp),152(sp)
    5f12:	       clr.l 148(sp)
    5f16:	       clr.l 144(sp)
    5f1a:	       move.l 1add8 <DOSBase>,d0
    5f20:	       movea.l d0,a6
    5f22:	       move.l 152(sp),d1
    5f26:	       move.l 148(sp),d2
    5f2a:	       move.l 144(sp),d3
    5f2e:	       jsr -66(a6)
    5f32:	       move.l d0,140(sp)
    5f36:	       move.l 140(sp),d0
    5f3a:	       addq.l #4,d0
    5f3c:	       move.l d0,1adc4 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    5f42:	       move.l 196(sp),136(sp)
    5f48:	       move.l 196(sp),-(sp)
    5f4c:	       jsr 718 <get4bytes>
    5f52:	       addq.l #4,sp
    5f54:	       move.l d0,132(sp)
    5f58:	       moveq #-1,d0
    5f5a:	       move.l d0,128(sp)
    5f5e:	       move.l 1add8 <DOSBase>,d0
    5f64:	       movea.l d0,a6
    5f66:	       move.l 136(sp),d1
    5f6a:	       move.l 132(sp),d2
    5f6e:	       move.l 128(sp),d3
    5f72:	       jsr -66(a6)
    5f76:	       move.l d0,124(sp)

	while (skipAfter) {
    5f7a:	   /-- bra.s 5fb8 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    5f7c:	/--|-> move.l 196(sp),40(sp)
    5f82:	|  |   move.l 196(sp),-(sp)
    5f86:	|  |   jsr 718 <get4bytes>
    5f8c:	|  |   addq.l #4,sp
    5f8e:	|  |   move.l d0,36(sp)
    5f92:	|  |   moveq #-1,d0
    5f94:	|  |   move.l d0,32(sp)
    5f98:	|  |   move.l 1add8 <DOSBase>,d0
    5f9e:	|  |   movea.l d0,a6
    5fa0:	|  |   move.l 40(sp),d1
    5fa4:	|  |   move.l 36(sp),d2
    5fa8:	|  |   move.l 32(sp),d3
    5fac:	|  |   jsr -66(a6)
    5fb0:	|  |   move.l d0,28(sp)
		skipAfter --;
    5fb4:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    5fb8:	|  \-> tst.l 188(sp)
    5fbc:	\----- bne.s 5f7c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5fbe:	       move.l 196(sp),120(sp)
    5fc4:	       clr.l 116(sp)
    5fc8:	       clr.l 112(sp)
    5fcc:	       move.l 1add8 <DOSBase>,d0
    5fd2:	       movea.l d0,a6
    5fd4:	       move.l 120(sp),d1
    5fd8:	       move.l 116(sp),d2
    5fdc:	       move.l 112(sp),d3
    5fe0:	       jsr -66(a6)
    5fe4:	       move.l d0,108(sp)
    5fe8:	       move.l 108(sp),d0
    5fec:	       addq.l #4,d0
    5fee:	       move.l d0,1adc8 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    5ff4:	       move.l 196(sp),104(sp)
    5ffa:	       move.l 196(sp),-(sp)
    5ffe:	       jsr 718 <get4bytes>
    6004:	       addq.l #4,sp
    6006:	       move.l d0,100(sp)
    600a:	       clr.l 96(sp)
    600e:	       move.l 1add8 <DOSBase>,d0
    6014:	       movea.l d0,a6
    6016:	       move.l 104(sp),d1
    601a:	       move.l 100(sp),d2
    601e:	       move.l 96(sp),d3
    6022:	       jsr -66(a6)
    6026:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    602a:	       move.l 196(sp),88(sp)
    6030:	       clr.l 84(sp)
    6034:	       clr.l 80(sp)
    6038:	       move.l 1add8 <DOSBase>,d0
    603e:	       movea.l d0,a6
    6040:	       move.l 88(sp),d1
    6044:	       move.l 84(sp),d2
    6048:	       move.l 80(sp),d3
    604c:	       jsr -66(a6)
    6050:	       move.l d0,76(sp)
    6054:	       move.l 76(sp),d0
    6058:	       addq.l #4,d0
    605a:	       move.l d0,1adcc <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6060:	       move.l 196(sp),72(sp)
    6066:	       move.l 196(sp),-(sp)
    606a:	       jsr 718 <get4bytes>
    6070:	       addq.l #4,sp
    6072:	       move.l d0,68(sp)
    6076:	       clr.l 64(sp)
    607a:	       move.l 1add8 <DOSBase>,d0
    6080:	       movea.l d0,a6
    6082:	       move.l 72(sp),d1
    6086:	       move.l 68(sp),d2
    608a:	       move.l 64(sp),d3
    608e:	       jsr -66(a6)
    6092:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6096:	       move.l 196(sp),56(sp)
    609c:	       clr.l 52(sp)
    60a0:	       clr.l 48(sp)
    60a4:	       move.l 1add8 <DOSBase>,d0
    60aa:	       movea.l d0,a6
    60ac:	       move.l 56(sp),d1
    60b0:	       move.l 52(sp),d2
    60b4:	       move.l 48(sp),d3
    60b8:	       jsr -66(a6)
    60bc:	       move.l d0,44(sp)
    60c0:	       move.l 44(sp),d0
    60c4:	       move.l d0,1adc0 <startOfDataIndex>
    60ca:	       nop
    60cc:	       movem.l (sp)+,d2-d3/a6
    60d0:	       lea 180(sp),sp
    60d4:	       rts

000060d6 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    60d6:	    lea -20(sp),sp
    60da:	    move.l a6,-(sp)
    60dc:	    move.l d7,-(sp)
	APTR vbr = 0;
    60de:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    60e2:	    move.w #20090,10(sp)
    60e8:	    move.w #2049,12(sp)
    60ee:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    60f4:	    movea.l 1add0 <SysBase>,a0
    60fa:	    move.w 296(a0),d0
    60fe:	    move.w d0,d0
    6100:	    andi.l #65535,d0
    6106:	    moveq #1,d1
    6108:	    and.l d1,d0
    610a:	/-- beq.s 6138 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    610c:	|   lea 28(sp),a0
    6110:	|   lea -18(a0),a0
    6114:	|   move.l a0,20(sp)
    6118:	|   move.l 1add0 <SysBase>,d0
    611e:	|   movea.l d0,a6
    6120:	|   move.l 20(sp),d7
    6124:	|   exg d7,a5
    6126:	|   jsr -30(a6)
    612a:	|   exg d7,a5
    612c:	|   move.l d0,16(sp)
    6130:	|   move.l 16(sp),d0
    6134:	|   move.l d0,24(sp)

	return vbr;
    6138:	\-> move.l 24(sp),d0
}
    613c:	    move.l (sp)+,d7
    613e:	    movea.l (sp)+,a6
    6140:	    lea 20(sp),sp
    6144:	    rts

00006146 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6146:	movea.l 1adf6 <VBR>,a0
    614c:	lea 108(a0),a0
    6150:	move.l 4(sp),(a0)
}
    6154:	nop
    6156:	rts

00006158 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6158:	movea.l 1adf6 <VBR>,a0
    615e:	move.l 108(a0),d0
}
    6162:	rts

00006164 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6164:	       subq.l #8,sp
    6166:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6168:	       pea 17216 <PutChar+0xfbe>
    616e:	       jsr 15784 <KPrintF>
    6174:	       addq.l #4,sp
	Forbid();
    6176:	       move.l 1add0 <SysBase>,d0
    617c:	       movea.l d0,a6
    617e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6182:	       pea 1722e <PutChar+0xfd6>
    6188:	       jsr 15784 <KPrintF>
    618e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6190:	       movea.l 1add4 <custom>,a0
    6196:	       move.w 16(a0),d0
    619a:	       move.w d0,1adf4 <SystemADKCON>
	SystemInts=custom->intenar;
    61a0:	       movea.l 1add4 <custom>,a0
    61a6:	       move.w 28(a0),d0
    61aa:	       move.w d0,1adf0 <SystemInts>
	SystemDMA=custom->dmaconr;
    61b0:	       movea.l 1add4 <custom>,a0
    61b6:	       move.w 2(a0),d0
    61ba:	       move.w d0,1adf2 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    61c0:	       movea.l 1addc <GfxBase>,a0
    61c6:	       move.l 34(a0),d0
    61ca:	       move.l d0,1adfe <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    61d0:	       pea 1724c <PutChar+0xff4>
    61d6:	       jsr 15784 <KPrintF>
    61dc:	       addq.l #4,sp
	LoadView(0);
    61de:	       clr.l 4(sp)
    61e2:	       move.l 1addc <GfxBase>,d0
    61e8:	       movea.l d0,a6
    61ea:	       movea.l 4(sp),a1
    61ee:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    61f2:	       pea 17262 <PutChar+0x100a>
    61f8:	       jsr 15784 <KPrintF>
    61fe:	       addq.l #4,sp
	WaitTOF();
    6200:	       move.l 1addc <GfxBase>,d0
    6206:	       movea.l d0,a6
    6208:	       jsr -270(a6)
	WaitTOF();
    620c:	       move.l 1addc <GfxBase>,d0
    6212:	       movea.l d0,a6
    6214:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6218:	       pea 17277 <PutChar+0x101f>
    621e:	       jsr 15784 <KPrintF>
    6224:	       addq.l #4,sp
	WaitVbl();
    6226:	       jsr 156b8 <WaitVbl>
	WaitVbl();
    622c:	       jsr 156b8 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6232:	       pea 1728c <PutChar+0x1034>
    6238:	       jsr 15784 <KPrintF>
    623e:	       addq.l #4,sp
	OwnBlitter();
    6240:	       move.l 1addc <GfxBase>,d0
    6246:	       movea.l d0,a6
    6248:	       jsr -456(a6)
	WaitBlit();	
    624c:	       move.l 1addc <GfxBase>,d0
    6252:	       movea.l d0,a6
    6254:	       jsr -228(a6)
	Disable();
    6258:	       move.l 1add0 <SysBase>,d0
    625e:	       movea.l d0,a6
    6260:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6264:	       pea 172ad <PutChar+0x1055>
    626a:	       jsr 15784 <KPrintF>
    6270:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6272:	       movea.l 1add4 <custom>,a0
    6278:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    627e:	       pea 172c4 <PutChar+0x106c>
    6284:	       jsr 15784 <KPrintF>
    628a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    628c:	       clr.l 8(sp)
    6290:	   /-- bra.s 62ae <TakeSystem+0x14a>
		custom->color[a]=0;
    6292:	/--|-> movea.l 1add4 <custom>,a0
    6298:	|  |   move.l 8(sp),d0
    629c:	|  |   addi.l #192,d0
    62a2:	|  |   add.l d0,d0
    62a4:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    62aa:	|  |   addq.l #1,8(sp)
    62ae:	|  \-> moveq #31,d0
    62b0:	|      cmp.l 8(sp),d0
    62b4:	\----- bge.s 6292 <TakeSystem+0x12e>

	WaitVbl();
    62b6:	       jsr 156b8 <WaitVbl>
	WaitVbl();
    62bc:	       jsr 156b8 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    62c2:	       pea 172e9 <PutChar+0x1091>
    62c8:	       jsr 15784 <KPrintF>
    62ce:	       addq.l #4,sp
	VBR=GetVBR();
    62d0:	       jsr 60d6 <GetVBR>
    62d6:	       move.l d0,1adf6 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    62dc:	       jsr 6158 <GetInterruptHandler>
    62e2:	       move.l d0,1adfa <SystemIrq>
}
    62e8:	       nop
    62ea:	       movea.l (sp)+,a6
    62ec:	       addq.l #8,sp
    62ee:	       rts

000062f0 <FreeSystem>:

void FreeSystem() { 
    62f0:	subq.l #4,sp
    62f2:	move.l a6,-(sp)
	WaitVbl();
    62f4:	jsr 156b8 <WaitVbl>
	WaitBlit();
    62fa:	move.l 1addc <GfxBase>,d0
    6300:	movea.l d0,a6
    6302:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6306:	movea.l 1add4 <custom>,a0
    630c:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6312:	movea.l 1add4 <custom>,a0
    6318:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    631e:	movea.l 1add4 <custom>,a0
    6324:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    632a:	move.l 1adfa <SystemIrq>,d0
    6330:	move.l d0,-(sp)
    6332:	jsr 6146 <SetInterruptHandler>
    6338:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    633a:	movea.l 1addc <GfxBase>,a0
    6340:	move.l 38(a0),d0
    6344:	movea.l 1add4 <custom>,a0
    634a:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    634e:	movea.l 1addc <GfxBase>,a0
    6354:	move.l 50(a0),d0
    6358:	movea.l 1add4 <custom>,a0
    635e:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6362:	movea.l 1add4 <custom>,a0
    6368:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    636e:	move.w 1adf2 <SystemDMA>,d0
    6374:	movea.l 1add4 <custom>,a0
    637a:	ori.w #-32768,d0
    637e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6382:	move.w 1adf4 <SystemADKCON>,d0
    6388:	movea.l 1add4 <custom>,a0
    638e:	ori.w #-32768,d0
    6392:	move.w d0,158(a0)

	WaitBlit();	
    6396:	move.l 1addc <GfxBase>,d0
    639c:	movea.l d0,a6
    639e:	jsr -228(a6)
	DisownBlitter();
    63a2:	move.l 1addc <GfxBase>,d0
    63a8:	movea.l d0,a6
    63aa:	jsr -462(a6)
	Enable();
    63ae:	move.l 1add0 <SysBase>,d0
    63b4:	movea.l d0,a6
    63b6:	jsr -126(a6)

	LoadView(ActiView);
    63ba:	move.l 1adfe <ActiView>,4(sp)
    63c2:	move.l 1addc <GfxBase>,d0
    63c8:	movea.l d0,a6
    63ca:	movea.l 4(sp),a1
    63ce:	jsr -222(a6)
	WaitTOF();
    63d2:	move.l 1addc <GfxBase>,d0
    63d8:	movea.l d0,a6
    63da:	jsr -270(a6)
	WaitTOF();
    63de:	move.l 1addc <GfxBase>,d0
    63e4:	movea.l d0,a6
    63e6:	jsr -270(a6)

	Permit();
    63ea:	move.l 1add0 <SysBase>,d0
    63f0:	movea.l d0,a6
    63f2:	jsr -138(a6)
}
    63f6:	nop
    63f8:	movea.l (sp)+,a6
    63fa:	addq.l #4,sp
    63fc:	rts

000063fe <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    63fe:	    lea -128(sp),sp
    6402:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6406:	    movea.w #4,a0
    640a:	    move.l (a0),d0
    640c:	    move.l d0,1add0 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6412:	    move.l #14675968,1add4 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    641c:	    move.l #94989,136(sp)
    6424:	    clr.l 132(sp)
    6428:	    move.l 1add0 <SysBase>,d0
    642e:	    movea.l d0,a6
    6430:	    movea.l 136(sp),a1
    6434:	    move.l 132(sp),d0
    6438:	    jsr -552(a6)
    643c:	    move.l d0,128(sp)
    6440:	    move.l 128(sp),d0
    6444:	    move.l d0,1addc <GfxBase>
	if (!GfxBase)
    644a:	    move.l 1addc <GfxBase>,d0
    6450:	/-- bne.s 6466 <main+0x68>
		Exit(0);
    6452:	|   clr.l 124(sp)
    6456:	|   move.l 1add8 <DOSBase>,d0
    645c:	|   movea.l d0,a6
    645e:	|   move.l 124(sp),d1
    6462:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6466:	\-> move.l #95006,120(sp)
    646e:	    clr.l 116(sp)
    6472:	    move.l 1add0 <SysBase>,d0
    6478:	    movea.l d0,a6
    647a:	    movea.l 120(sp),a1
    647e:	    move.l 116(sp),d0
    6482:	    jsr -552(a6)
    6486:	    move.l d0,112(sp)
    648a:	    move.l 112(sp),d0
    648e:	    move.l d0,1add8 <DOSBase>
	if (!DOSBase)
    6494:	    move.l 1add8 <DOSBase>,d0
    649a:	/-- bne.s 64b0 <main+0xb2>
		Exit(0);
    649c:	|   clr.l 108(sp)
    64a0:	|   move.l 1add8 <DOSBase>,d0
    64a6:	|   movea.l d0,a6
    64a8:	|   move.l 108(sp),d1
    64ac:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    64b0:	\-> move.l #95018,104(sp)
    64b8:	    clr.l 100(sp)
    64bc:	    move.l 1add0 <SysBase>,d0
    64c2:	    movea.l d0,a6
    64c4:	    movea.l 104(sp),a1
    64c8:	    move.l 100(sp),d0
    64cc:	    jsr -552(a6)
    64d0:	    move.l d0,96(sp)
    64d4:	    move.l 96(sp),d0
    64d8:	    move.l d0,1ade0 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    64de:	    move.l 1ade0 <MathIeeeSingBasBase>,d0
    64e4:	/-- bne.s 64fa <main+0xfc>
		Exit(0);	
    64e6:	|   clr.l 92(sp)
    64ea:	|   move.l 1add8 <DOSBase>,d0
    64f0:	|   movea.l d0,a6
    64f2:	|   move.l 92(sp),d1
    64f6:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    64fa:	\-> move.l #95042,88(sp)
    6502:	    clr.l 84(sp)
    6506:	    move.l 1add0 <SysBase>,d0
    650c:	    movea.l d0,a6
    650e:	    movea.l 88(sp),a1
    6512:	    move.l 84(sp),d0
    6516:	    jsr -552(a6)
    651a:	    move.l d0,80(sp)
    651e:	    move.l 80(sp),d0
    6522:	    move.l d0,1ade4 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6528:	    move.l 1ade4 <MathIeeeSingTransBase>,d0
    652e:	/-- bne.s 6544 <main+0x146>
		Exit(0);
    6530:	|   clr.l 76(sp)
    6534:	|   move.l 1add8 <DOSBase>,d0
    653a:	|   movea.l d0,a6
    653c:	|   move.l 76(sp),d1
    6540:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6544:	\-> move.l #95068,72(sp)
    654c:	    clr.l 68(sp)
    6550:	    move.l 1add0 <SysBase>,d0
    6556:	    movea.l d0,a6
    6558:	    movea.l 72(sp),a1
    655c:	    move.l 68(sp),d0
    6560:	    jsr -552(a6)
    6564:	    move.l d0,64(sp)
    6568:	    move.l 64(sp),d0
    656c:	    move.l d0,1adec <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6572:	    move.l 1adec <MathIeeeDoubTransBase>,d0
    6578:	/-- bne.s 658e <main+0x190>
		Exit(0);
    657a:	|   clr.l 60(sp)
    657e:	|   move.l 1add8 <DOSBase>,d0
    6584:	|   movea.l d0,a6
    6586:	|   move.l 60(sp),d1
    658a:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    658e:	\-> move.l #95094,56(sp)
    6596:	    clr.l 52(sp)
    659a:	    move.l 1add0 <SysBase>,d0
    65a0:	    movea.l d0,a6
    65a2:	    movea.l 56(sp),a1
    65a6:	    move.l 52(sp),d0
    65aa:	    jsr -552(a6)
    65ae:	    move.l d0,48(sp)
    65b2:	    move.l 48(sp),d0
    65b6:	    move.l d0,1ade8 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    65bc:	    move.l 1ade8 <MathIeeeDoubBasBase>,d0
    65c2:	/-- bne.s 65d8 <main+0x1da>
		Exit(0);
    65c4:	|   clr.l 44(sp)
    65c8:	|   move.l 1add8 <DOSBase>,d0
    65ce:	|   movea.l d0,a6
    65d0:	|   move.l 44(sp),d1
    65d4:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 004!\n");
    65d8:	\-> pea 1738e <PutChar+0x1136>
    65de:	    jsr 15784 <KPrintF>
    65e4:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 004!\n", 25);
    65e6:	    move.l 1add8 <DOSBase>,d0
    65ec:	    movea.l d0,a6
    65ee:	    jsr -60(a6)
    65f2:	    move.l d0,40(sp)
    65f6:	    move.l 40(sp),d0
    65fa:	    move.l d0,36(sp)
    65fe:	    move.l #95150,32(sp)
    6606:	    moveq #25,d0
    6608:	    move.l d0,28(sp)
    660c:	    move.l 1add8 <DOSBase>,d0
    6612:	    movea.l d0,a6
    6614:	    move.l 36(sp),d1
    6618:	    move.l 32(sp),d2
    661c:	    move.l 28(sp),d3
    6620:	    jsr -48(a6)
    6624:	    move.l d0,24(sp)
	Delay(50);
    6628:	    moveq #50,d0
    662a:	    move.l d0,20(sp)
    662e:	    move.l 1add8 <DOSBase>,d0
    6634:	    movea.l d0,a6
    6636:	    move.l 20(sp),d1
    663a:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    663e:	    pea 173c7 <PutChar+0x116f>
    6644:	    jsr 15784 <KPrintF>
    664a:	    addq.l #4,sp
	TakeSystem();
    664c:	    jsr 6164 <TakeSystem>
	KPrintF("System Taken\n");
    6652:	    pea 173d6 <PutChar+0x117e>
    6658:	    jsr 15784 <KPrintF>
    665e:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    6660:	    movea.l 1add4 <custom>,a0
    6666:	    move.w #-30721,150(a0)
	WaitVbl();
    666c:	    jsr 156b8 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    6672:	    pea 173e4 <PutChar+0x118c>
    6678:	    jsr 15784 <KPrintF>
    667e:	    addq.l #4,sp
	main_sludge(argc, argv);	
    6680:	    move.l 148(sp),-(sp)
    6684:	    move.l 148(sp),-(sp)
    6688:	    jsr 2fe8 <main_sludge>
    668e:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    6690:	    jsr 62f0 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    6696:	    move.l 1add8 <DOSBase>,16(sp)
    669e:	    move.l 1add0 <SysBase>,d0
    66a4:	    movea.l d0,a6
    66a6:	    movea.l 16(sp),a1
    66aa:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    66ae:	    move.l 1addc <GfxBase>,12(sp)
    66b6:	    move.l 1add0 <SysBase>,d0
    66bc:	    movea.l d0,a6
    66be:	    movea.l 12(sp),a1
    66c2:	    jsr -414(a6)
    66c6:	    moveq #0,d0
}
    66c8:	    movem.l (sp)+,d2-d3/a6
    66cc:	    lea 128(sp),sp
    66d0:	    rts

000066d2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    66d2:	    lea -16(sp),sp
    66d6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    66d8:	    moveq #8,d0
    66da:	    move.l d0,16(sp)
    66de:	    clr.l 12(sp)
    66e2:	    move.l 1add0 <SysBase>,d0
    66e8:	    movea.l d0,a6
    66ea:	    move.l 16(sp),d0
    66ee:	    move.l 12(sp),d1
    66f2:	    jsr -684(a6)
    66f6:	    move.l d0,8(sp)
    66fa:	    move.l 8(sp),d0
    66fe:	    move.l d0,4(sp)
	if (!newStat) {
    6702:	/-- bne.s 6732 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    6704:	|   movea.l 1a75c <nowStatus>,a0
    670a:	|   move.l (a0),d0
    670c:	|   movea.l 4(sp),a0
    6710:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    6714:	|   pea 16e3a <PutChar+0xbe2>
    671a:	|   jsr b8 <copyString>
    6720:	|   addq.l #4,sp
    6722:	|   movea.l 4(sp),a0
    6726:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    6728:	|   movea.l 1a75c <nowStatus>,a0
    672e:	|   move.l 4(sp),(a0)
	}
}
    6732:	\-> nop
    6734:	    movea.l (sp)+,a6
    6736:	    lea 16(sp),sp
    673a:	    rts

0000673c <clearStatusBar>:

void clearStatusBar () {
    673c:	       lea -16(sp),sp
    6740:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    6742:	       movea.l 1a75c <nowStatus>,a0
    6748:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    674c:	       movea.l 1a75c <nowStatus>,a0
    6752:	       moveq #-1,d0
    6754:	       move.l d0,6(a0)
	while (stat) {
    6758:	   /-- bra.s 6798 <clearStatusBar+0x5c>
		kill = stat;
    675a:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    6760:	|  |   movea.l 16(sp),a0
    6764:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    676a:	|  |   movea.l 12(sp),a0
    676e:	|  |   move.l (a0),8(sp)
    6772:	|  |   move.l 1add0 <SysBase>,d0
    6778:	|  |   movea.l d0,a6
    677a:	|  |   movea.l 8(sp),a1
    677e:	|  |   jsr -690(a6)
		FreeVec(kill);
    6782:	|  |   move.l 12(sp),4(sp)
    6788:	|  |   move.l 1add0 <SysBase>,d0
    678e:	|  |   movea.l d0,a6
    6790:	|  |   movea.l 4(sp),a1
    6794:	|  |   jsr -690(a6)
	while (stat) {
    6798:	|  \-> tst.l 16(sp)
    679c:	\----- bne.s 675a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    679e:	       movea.l 1a75c <nowStatus>,a0
    67a4:	       clr.l (a0)
}
    67a6:	       nop
    67a8:	       movea.l (sp)+,a6
    67aa:	       lea 16(sp),sp
    67ae:	       rts

000067b0 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    67b0:	clr.l 1ae02 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    67b6:	move.w #-1,1ae06 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    67be:	moveq #-1,d0
    67c0:	move.l d0,1ae08 <mainStatus+0x6>
	mainStatus.statusX = 10;
    67c6:	moveq #10,d0
    67c8:	move.l d0,1ae0c <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    67ce:	movea.l 1ad28 <winHeight>,a0
    67d4:	lea -15(a0),a0
    67d8:	move.l a0,d0
    67da:	move.l d0,1ae10 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    67e0:	nop
    67e2:	rts

000067e4 <killLastStatus>:

void killLastStatus () {
    67e4:	    lea -12(sp),sp
    67e8:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    67ea:	    movea.l 1a75c <nowStatus>,a0
    67f0:	    move.l (a0),d0
    67f2:	/-- beq.s 683c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    67f4:	|   movea.l 1a75c <nowStatus>,a0
    67fa:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    67fe:	|   movea.l 1a75c <nowStatus>,a0
    6804:	|   movea.l 12(sp),a1
    6808:	|   move.l 4(a1),d0
    680c:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    680e:	|   movea.l 12(sp),a0
    6812:	|   move.l (a0),8(sp)
    6816:	|   move.l 1add0 <SysBase>,d0
    681c:	|   movea.l d0,a6
    681e:	|   movea.l 8(sp),a1
    6822:	|   jsr -690(a6)
		FreeVec(kill);
    6826:	|   move.l 12(sp),4(sp)
    682c:	|   move.l 1add0 <SysBase>,d0
    6832:	|   movea.l d0,a6
    6834:	|   movea.l 4(sp),a1
    6838:	|   jsr -690(a6)
	}
}
    683c:	\-> nop
    683e:	    movea.l (sp)+,a6
    6840:	    lea 12(sp),sp
    6844:	    rts

00006846 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    6846:	movea.l 1a75c <nowStatus>,a0
    684c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    6852:	movea.l 1a75c <nowStatus>,a0
    6858:	move.l 8(sp),14(a0)
}
    685e:	nop
    6860:	rts

00006862 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    6862:	       lea -100(sp),sp
    6866:	       move.l a6,-(sp)
    6868:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    686a:	       movea.l 1a75c <nowStatus>,a0
    6870:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    6874:	       movea.l 1a75c <nowStatus>,a0
    687a:	       move.w 4(a0),d0
    687e:	       move.w d0,d0
    6880:	       andi.l #65535,d0
    6886:	       move.l 112(sp),-(sp)
    688a:	       move.l d0,-(sp)
    688c:	       jsr 8d0 <put2bytes>
    6892:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    6894:	       movea.l 1a75c <nowStatus>,a0
    689a:	       move.l 6(a0),d0
    689e:	       move.l d0,d0
    68a0:	       movea.w d0,a0
    68a2:	       move.l 112(sp),-(sp)
    68a6:	       move.l a0,-(sp)
    68a8:	       jsr a9c <putSigned>
    68ae:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    68b0:	       movea.l 1a75c <nowStatus>,a0
    68b6:	       move.l 10(a0),d0
    68ba:	       move.l 112(sp),-(sp)
    68be:	       move.l d0,-(sp)
    68c0:	       jsr 8d0 <put2bytes>
    68c6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    68c8:	       movea.l 1a75c <nowStatus>,a0
    68ce:	       move.l 14(a0),d0
    68d2:	       move.l 112(sp),-(sp)
    68d6:	       move.l d0,-(sp)
    68d8:	       jsr 8d0 <put2bytes>
    68de:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    68e0:	       move.l 112(sp),100(sp)
    68e6:	       movea.l 1a75c <nowStatus>,a0
    68ec:	       move.l 18(a0),96(sp)
    68f2:	       move.l 1add8 <DOSBase>,d0
    68f8:	       movea.l d0,a6
    68fa:	       move.l 100(sp),d1
    68fe:	       move.l 96(sp),d2
    6902:	       jsr -312(a6)
    6906:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    690a:	       move.l 112(sp),88(sp)
    6910:	       movea.l 1a75c <nowStatus>,a0
    6916:	       move.l 22(a0),84(sp)
    691c:	       move.l 1add8 <DOSBase>,d0
    6922:	       movea.l d0,a6
    6924:	       move.l 88(sp),d1
    6928:	       move.l 84(sp),d2
    692c:	       jsr -312(a6)
    6930:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    6934:	       move.l 112(sp),76(sp)
    693a:	       movea.l 1a75c <nowStatus>,a0
    6940:	       move.l 26(a0),72(sp)
    6946:	       move.l 1add8 <DOSBase>,d0
    694c:	       movea.l d0,a6
    694e:	       move.l 76(sp),d1
    6952:	       move.l 72(sp),d2
    6956:	       jsr -312(a6)
    695a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    695e:	       move.l 112(sp),64(sp)
    6964:	       movea.l 1a75c <nowStatus>,a0
    696a:	       move.l 30(a0),60(sp)
    6970:	       move.l 1add8 <DOSBase>,d0
    6976:	       movea.l d0,a6
    6978:	       move.l 64(sp),d1
    697c:	       move.l 60(sp),d2
    6980:	       jsr -312(a6)
    6984:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    6988:	       move.l 112(sp),52(sp)
    698e:	       movea.l 1a75c <nowStatus>,a0
    6994:	       move.l 34(a0),48(sp)
    699a:	       move.l 1add8 <DOSBase>,d0
    69a0:	       movea.l d0,a6
    69a2:	       move.l 52(sp),d1
    69a6:	       move.l 48(sp),d2
    69aa:	       jsr -312(a6)
    69ae:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    69b2:	       move.l 112(sp),40(sp)
    69b8:	       movea.l 1a75c <nowStatus>,a0
    69be:	       move.l 38(a0),36(sp)
    69c4:	       move.l 1add8 <DOSBase>,d0
    69ca:	       movea.l d0,a6
    69cc:	       move.l 40(sp),d1
    69d0:	       move.l 36(sp),d2
    69d4:	       jsr -312(a6)
    69d8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    69dc:	   /-- bra.s 6a20 <saveStatusBars+0x1be>
		FPutC (fp,1);
    69de:	/--|-> move.l 112(sp),16(sp)
    69e4:	|  |   moveq #1,d0
    69e6:	|  |   move.l d0,12(sp)
    69ea:	|  |   move.l 1add8 <DOSBase>,d0
    69f0:	|  |   movea.l d0,a6
    69f2:	|  |   move.l 16(sp),d1
    69f6:	|  |   move.l 12(sp),d2
    69fa:	|  |   jsr -312(a6)
    69fe:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6a02:	|  |   movea.l 104(sp),a0
    6a06:	|  |   move.l (a0),d0
    6a08:	|  |   move.l 112(sp),-(sp)
    6a0c:	|  |   move.l d0,-(sp)
    6a0e:	|  |   jsr bd8 <writeString>
    6a14:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6a16:	|  |   movea.l 104(sp),a0
    6a1a:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6a20:	|  \-> tst.l 104(sp)
    6a24:	\----- bne.s 69de <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6a26:	       move.l 112(sp),28(sp)
    6a2c:	       clr.l 24(sp)
    6a30:	       move.l 1add8 <DOSBase>,d0
    6a36:	       movea.l d0,a6
    6a38:	       move.l 28(sp),d1
    6a3c:	       move.l 24(sp),d2
    6a40:	       jsr -312(a6)
    6a44:	       move.l d0,20(sp)
}
    6a48:	       nop
    6a4a:	       move.l (sp)+,d2
    6a4c:	       movea.l (sp)+,a6
    6a4e:	       lea 100(sp),sp
    6a52:	       rts

00006a54 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6a54:	movea.l 1a75c <nowStatus>,a0
    6a5a:	move.l 4(sp),6(a0)
}
    6a60:	nop
    6a62:	rts

00006a64 <setStatusBar>:

void setStatusBar (char * txt) {
    6a64:	    subq.l #4,sp
    6a66:	    move.l a6,-(sp)
    6a68:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6a6a:	    movea.l 1a75c <nowStatus>,a0
    6a70:	    move.l (a0),d0
    6a72:	/-- beq.s 6aa6 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6a74:	|   movea.l 1a75c <nowStatus>,a0
    6a7a:	|   movea.l (a0),a0
    6a7c:	|   move.l (a0),8(sp)
    6a80:	|   move.l 1add0 <SysBase>,d0
    6a86:	|   movea.l d0,a6
    6a88:	|   movea.l 8(sp),a1
    6a8c:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6a90:	|   movea.l 1a75c <nowStatus>,a0
    6a96:	|   movea.l (a0),a2
    6a98:	|   move.l 16(sp),-(sp)
    6a9c:	|   jsr b8 <copyString>
    6aa2:	|   addq.l #4,sp
    6aa4:	|   move.l d0,(a2)
	}
}
    6aa6:	\-> nop
    6aa8:	    movea.l (sp)+,a2
    6aaa:	    movea.l (sp)+,a6
    6aac:	    addq.l #4,sp
    6aae:	    rts

00006ab0 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6ab0:	       movea.l 1a75c <nowStatus>,a0
    6ab6:	       move.l (a0),d0
    6ab8:	/----- beq.s 6ac6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6aba:	|      movea.l 1a75c <nowStatus>,a0
    6ac0:	|      movea.l (a0),a0
    6ac2:	|      move.l (a0),d0
    6ac4:	|  /-- bra.s 6acc <statusBarText+0x1c>
	} else {
		return "";
    6ac6:	\--|-> move.l #93754,d0
	}
    6acc:	   \-> rts

00006ace <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6ace:	       lea -28(sp),sp
    6ad2:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6ad6:	       move.l 52(sp),-(sp)
    6ada:	       jsr 13f96 <stringWidth>
    6ae0:	       addq.l #4,sp
    6ae2:	       asr.l #1,d0
    6ae4:	       move.l d0,-(sp)
    6ae6:	       jsr 15bc0 <__floatsisf>
    6aec:	       addq.l #4,sp
    6aee:	       move.l d0,d1
    6af0:	       move.l 1a774 <cameraZoom>,d0
    6af6:	       move.l d0,-(sp)
    6af8:	       move.l d1,-(sp)
    6afa:	       jsr 15a6c <__divsf3>
    6b00:	       addq.l #8,sp
    6b02:	       move.l d0,-(sp)
    6b04:	       jsr 15b58 <__fixsfsi>
    6b0a:	       addq.l #4,sp
    6b0c:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6b10:	       move.l 56(sp),d0
    6b14:	       sub.l 44(sp),d0
    6b18:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6b1c:	       move.l 56(sp),d0
    6b20:	       add.l 44(sp),d0
    6b24:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6b28:	       moveq #12,d0
    6b2a:	       move.l d0,32(sp)
    6b2e:	       clr.l 28(sp)
    6b32:	       move.l 1add0 <SysBase>,d0
    6b38:	       movea.l d0,a6
    6b3a:	       move.l 32(sp),d0
    6b3e:	       move.l 28(sp),d1
    6b42:	       jsr -684(a6)
    6b46:	       move.l d0,24(sp)
    6b4a:	       move.l 24(sp),d0
    6b4e:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6b52:	       movea.l 1ae2c <speech>,a0
    6b58:	       move.l 4(a0),d0
    6b5c:	       movea.l 20(sp),a0
    6b60:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6b64:	       move.l 52(sp),-(sp)
    6b68:	       jsr b8 <copyString>
    6b6e:	       addq.l #4,sp
    6b70:	       movea.l 20(sp),a0
    6b74:	       move.l d0,(a0)
	newLine -> x = xx1;
    6b76:	       movea.l 20(sp),a0
    6b7a:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6b80:	       movea.l 1ae2c <speech>,a0
    6b86:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6b8c:	       moveq #4,d0
    6b8e:	       cmp.l 40(sp),d0
    6b92:	   /-- blt.s 6bb4 <addSpeechLine+0xe6>
    6b94:	   |   movea.l 60(sp),a0
    6b98:	   |   move.l (a0),d1
    6b9a:	   |   moveq #5,d0
    6b9c:	   |   sub.l 40(sp),d0
    6ba0:	   |   cmp.l d1,d0
    6ba2:	   +-- ble.s 6bb4 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6ba4:	   |   moveq #5,d0
    6ba6:	   |   sub.l 40(sp),d0
    6baa:	   |   movea.l 60(sp),a0
    6bae:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6bb0:	/--|-- bra.w 6ce0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6bb4:	|  \-> move.l 36(sp),-(sp)
    6bb8:	|      jsr 15bc0 <__floatsisf>
    6bbe:	|      addq.l #4,sp
    6bc0:	|      move.l d0,d2
    6bc2:	|      move.l 1ad24 <winWidth>,d0
    6bc8:	|      move.l d0,-(sp)
    6bca:	|      jsr 15be8 <__floatunsisf>
    6bd0:	|      addq.l #4,sp
    6bd2:	|      move.l d0,d1
    6bd4:	|      move.l 1a774 <cameraZoom>,d0
    6bda:	|      move.l d0,-(sp)
    6bdc:	|      move.l d1,-(sp)
    6bde:	|      jsr 15a6c <__divsf3>
    6be4:	|      addq.l #8,sp
    6be6:	|      move.l #1084227584,-(sp)
    6bec:	|      move.l d0,-(sp)
    6bee:	|      jsr 15eb4 <__subsf3>
    6bf4:	|      addq.l #8,sp
    6bf6:	|      move.l d0,-(sp)
    6bf8:	|      move.l d2,-(sp)
    6bfa:	|      jsr 15ca8 <__gesf2>
    6c00:	|      addq.l #8,sp
    6c02:	|      tst.l d0
    6c04:	|  /-- bge.s 6c0a <addSpeechLine+0x13c>
}
    6c06:	+--|-- bra.w 6ce0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c0a:	|  \-> movea.l 60(sp),a0
    6c0e:	|      move.l (a0),d0
    6c10:	|      move.l d0,-(sp)
    6c12:	|      jsr 15bc0 <__floatsisf>
    6c18:	|      addq.l #4,sp
    6c1a:	|      move.l d0,-(sp)
    6c1c:	|      jsr 15ad8 <__extendsfdf2>
    6c22:	|      addq.l #4,sp
    6c24:	|      move.l d0,d4
    6c26:	|      move.l d1,d5
    6c28:	|      move.l 1ad24 <winWidth>,d0
    6c2e:	|      move.l d0,-(sp)
    6c30:	|      jsr 15be8 <__floatunsisf>
    6c36:	|      addq.l #4,sp
    6c38:	|      move.l d0,d1
    6c3a:	|      move.l 1a774 <cameraZoom>,d0
    6c40:	|      move.l d0,-(sp)
    6c42:	|      move.l d1,-(sp)
    6c44:	|      jsr 15a6c <__divsf3>
    6c4a:	|      addq.l #8,sp
    6c4c:	|      move.l d0,-(sp)
    6c4e:	|      jsr 15ad8 <__extendsfdf2>
    6c54:	|      addq.l #4,sp
    6c56:	|      clr.l -(sp)
    6c58:	|      move.l #1075052544,-(sp)
    6c5e:	|      move.l d1,-(sp)
    6c60:	|      move.l d0,-(sp)
    6c62:	|      jsr 15e52 <__subdf3>
    6c68:	|      lea 16(sp),sp
    6c6c:	|      move.l d0,d2
    6c6e:	|      move.l d1,d3
    6c70:	|      move.l 36(sp),-(sp)
    6c74:	|      jsr 15b80 <__floatsidf>
    6c7a:	|      addq.l #4,sp
    6c7c:	|      move.l d1,-(sp)
    6c7e:	|      move.l d0,-(sp)
    6c80:	|      move.l d3,-(sp)
    6c82:	|      move.l d2,-(sp)
    6c84:	|      jsr 15e52 <__subdf3>
    6c8a:	|      lea 16(sp),sp
    6c8e:	|      move.l d1,-(sp)
    6c90:	|      move.l d0,-(sp)
    6c92:	|      move.l d5,-(sp)
    6c94:	|      move.l d4,-(sp)
    6c96:	|      jsr 15cde <__gtdf2>
    6c9c:	|      lea 16(sp),sp
    6ca0:	|      tst.l d0
    6ca2:	|  /-- bgt.s 6ca6 <addSpeechLine+0x1d8>
}
    6ca4:	+--|-- bra.s 6ce0 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6ca6:	|  \-> move.l 1ad24 <winWidth>,d0
    6cac:	|      move.l d0,-(sp)
    6cae:	|      jsr 15be8 <__floatunsisf>
    6cb4:	|      addq.l #4,sp
    6cb6:	|      move.l d0,d1
    6cb8:	|      move.l 1a774 <cameraZoom>,d0
    6cbe:	|      move.l d0,-(sp)
    6cc0:	|      move.l d1,-(sp)
    6cc2:	|      jsr 15a6c <__divsf3>
    6cc8:	|      addq.l #8,sp
    6cca:	|      move.l d0,-(sp)
    6ccc:	|      jsr 15b58 <__fixsfsi>
    6cd2:	|      addq.l #4,sp
    6cd4:	|      subq.l #5,d0
    6cd6:	|      sub.l 36(sp),d0
    6cda:	|      movea.l 60(sp),a0
    6cde:	|      move.l d0,(a0)
}
    6ce0:	\----> nop
    6ce2:	       movem.l (sp)+,d2-d5/a6
    6ce6:	       lea 28(sp),sp
    6cea:	       rts

00006cec <initSpeech>:


void initSpeech () {
    6cec:	       lea -12(sp),sp
    6cf0:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6cf2:	       moveq #20,d0
    6cf4:	       move.l d0,12(sp)
    6cf8:	       clr.l 8(sp)
    6cfc:	       move.l 1add0 <SysBase>,d0
    6d02:	       movea.l d0,a6
    6d04:	       move.l 12(sp),d0
    6d08:	       move.l 8(sp),d1
    6d0c:	       jsr -684(a6)
    6d10:	       move.l d0,4(sp)
    6d14:	       move.l 4(sp),d0
    6d18:	       move.l d0,1ae2c <speech>
	if (speech) {
    6d1e:	       move.l 1ae2c <speech>,d0
    6d24:	/----- beq.s 6d50 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6d26:	|      movea.l 1ae2c <speech>,a0
    6d2c:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6d2e:	|      movea.l 1ae2c <speech>,a0
    6d34:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6d38:	|      movea.l 1ae2c <speech>,a0
    6d3e:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6d42:	|      movea.l 1ae2c <speech>,a0
    6d48:	|      moveq #-1,d0
    6d4a:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6d4e:	|  /-- bra.s 6d5e <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6d50:	\--|-> pea 17421 <PutChar+0x11c9>
    6d56:	   |   jsr 15784 <KPrintF>
    6d5c:	   |   addq.l #4,sp
}
    6d5e:	   \-> nop
    6d60:	       movea.l (sp)+,a6
    6d62:	       lea 12(sp),sp
    6d66:	       rts

00006d68 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6d68:	       movea.l 1ae2c <speech>,a0
    6d6e:	       move.l 4(a0),d0
    6d72:	/----- beq.s 6d80 <isThereAnySpeechGoingOn+0x18>
    6d74:	|      movea.l 1ae2c <speech>,a0
    6d7a:	|      move.l 16(a0),d0
    6d7e:	|  /-- bra.s 6d82 <isThereAnySpeechGoingOn+0x1a>
    6d80:	\--|-> moveq #-1,d0
}
    6d82:	   \-> rts

00006d84 <killAllSpeech>:

void killAllSpeech () {
    6d84:	       lea -12(sp),sp
    6d88:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6d8a:	       movea.l 1ae2c <speech>,a0
    6d90:	       move.l 12(a0),d0
    6d94:	       moveq #-1,d1
    6d96:	       cmp.l d0,d1
    6d98:	   /-- beq.s 6da6 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6d9a:	   |   movea.l 1ae2c <speech>,a0
    6da0:	   |   moveq #-1,d0
    6da2:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6da6:	   \-> movea.l 1ae2c <speech>,a0
    6dac:	       move.l (a0),d0
    6dae:	/----- beq.w 6e3a <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6db2:	|      movea.l 1ae2c <speech>,a0
    6db8:	|      move.l (a0),d1
    6dba:	|      lea -128(sp),sp
    6dbe:	|      move.l sp,d0
    6dc0:	|      movea.w #128,a0
    6dc4:	|      move.l a0,-(sp)
    6dc6:	|      move.l d1,-(sp)
    6dc8:	|      move.l d0,-(sp)
    6dca:	|      jsr 15738 <memcpy>
    6dd0:	|      lea 12(sp),sp
    6dd4:	|      jsr 9a2a <makeSilent>
    6dda:	|      lea 128(sp),sp
		speech -> currentTalker = NULL;
    6dde:	|      movea.l 1ae2c <speech>,a0
    6de4:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6de6:	+----- bra.s 6e3a <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6de8:	|  /-> movea.l 1ae2c <speech>,a0
    6dee:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6df4:	|  |   movea.l 1ae2c <speech>,a0
    6dfa:	|  |   movea.l 4(a0),a1
    6dfe:	|  |   movea.l 1ae2c <speech>,a0
    6e04:	|  |   move.l 4(a1),d0
    6e08:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6e0c:	|  |   movea.l 12(sp),a0
    6e10:	|  |   move.l (a0),8(sp)
    6e14:	|  |   move.l 1add0 <SysBase>,d0
    6e1a:	|  |   movea.l d0,a6
    6e1c:	|  |   movea.l 8(sp),a1
    6e20:	|  |   jsr -690(a6)
		FreeVec(killMe);
    6e24:	|  |   move.l 12(sp),4(sp)
    6e2a:	|  |   move.l 1add0 <SysBase>,d0
    6e30:	|  |   movea.l d0,a6
    6e32:	|  |   movea.l 4(sp),a1
    6e36:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    6e3a:	\--|-> movea.l 1ae2c <speech>,a0
    6e40:	   |   move.l 4(a0),d0
    6e44:	   \-- bne.s 6de8 <killAllSpeech+0x64>
	}
}
    6e46:	       nop
    6e48:	       nop
    6e4a:	       movea.l (sp)+,a6
    6e4c:	       lea 12(sp),sp
    6e50:	       rts

00006e52 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    6e52:	pea 2 <_start+0x2>
    6e56:	move.l 8(sp),-(sp)
    6e5a:	jsr 6fb2 <setFrames>
    6e60:	addq.l #8,sp
}
    6e62:	nop
    6e64:	rts

00006e66 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    6e66:	       lea -52(sp),sp
    6e6a:	       move.l a6,-(sp)
    6e6c:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    6e6e:	       movea.l 64(sp),a0
    6e72:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    6e78:	       move.l 1a760 <speechSpeed>,d0
    6e7e:	       move.l 68(sp),-(sp)
    6e82:	       move.l d0,-(sp)
    6e84:	       jsr a46 <putFloat>
    6e8a:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6e8c:	       movea.l 64(sp),a0
    6e90:	       move.l 8(a0),d0
    6e94:	       move.l 68(sp),-(sp)
    6e98:	       move.l d0,-(sp)
    6e9a:	       jsr 8d0 <put2bytes>
    6ea0:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    6ea2:	       movea.l 64(sp),a0
    6ea6:	       move.l 16(a0),d0
    6eaa:	       move.l 68(sp),-(sp)
    6eae:	       move.l d0,-(sp)
    6eb0:	       jsr 8d0 <put2bytes>
    6eb6:	       addq.l #8,sp
		if (sS -> currentTalker) {
    6eb8:	       movea.l 64(sp),a0
    6ebc:	       move.l (a0),d0
    6ebe:	   /-- beq.s 6f02 <saveSpeech+0x9c>
			FPutC (fp, 1);
    6ec0:	   |   move.l 68(sp),40(sp)
    6ec6:	   |   moveq #1,d0
    6ec8:	   |   move.l d0,36(sp)
    6ecc:	   |   move.l 1add8 <DOSBase>,d0
    6ed2:	   |   movea.l d0,a6
    6ed4:	   |   move.l 40(sp),d1
    6ed8:	   |   move.l 36(sp),d2
    6edc:	   |   jsr -312(a6)
    6ee0:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    6ee4:	   |   movea.l 64(sp),a0
    6ee8:	   |   movea.l (a0),a0
    6eea:	   |   movea.l 110(a0),a0
    6eee:	   |   move.l 4(a0),d0
    6ef2:	   |   move.l 68(sp),-(sp)
    6ef6:	   |   move.l d0,-(sp)
    6ef8:	   |   jsr 8d0 <put2bytes>
    6efe:	   |   addq.l #8,sp
    6f00:	/--|-- bra.s 6f7e <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    6f02:	|  \-> move.l 68(sp),52(sp)
    6f08:	|      clr.l 48(sp)
    6f0c:	|      move.l 1add8 <DOSBase>,d0
    6f12:	|      movea.l d0,a6
    6f14:	|      move.l 52(sp),d1
    6f18:	|      move.l 48(sp),d2
    6f1c:	|      jsr -312(a6)
    6f20:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6f24:	+----- bra.s 6f7e <saveSpeech+0x118>
			FPutC (fp, 1);
    6f26:	|  /-> move.l 68(sp),16(sp)
    6f2c:	|  |   moveq #1,d0
    6f2e:	|  |   move.l d0,12(sp)
    6f32:	|  |   move.l 1add8 <DOSBase>,d0
    6f38:	|  |   movea.l d0,a6
    6f3a:	|  |   move.l 16(sp),d1
    6f3e:	|  |   move.l 12(sp),d2
    6f42:	|  |   jsr -312(a6)
    6f46:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    6f4a:	|  |   movea.l 56(sp),a0
    6f4e:	|  |   move.l (a0),d0
    6f50:	|  |   move.l 68(sp),-(sp)
    6f54:	|  |   move.l d0,-(sp)
    6f56:	|  |   jsr bd8 <writeString>
    6f5c:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    6f5e:	|  |   movea.l 56(sp),a0
    6f62:	|  |   move.l 8(a0),d0
    6f66:	|  |   move.l 68(sp),-(sp)
    6f6a:	|  |   move.l d0,-(sp)
    6f6c:	|  |   jsr 8d0 <put2bytes>
    6f72:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    6f74:	|  |   movea.l 56(sp),a0
    6f78:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    6f7e:	\--|-> tst.l 56(sp)
    6f82:	   \-- bne.s 6f26 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    6f84:	       move.l 68(sp),28(sp)
    6f8a:	       clr.l 24(sp)
    6f8e:	       move.l 1add8 <DOSBase>,d0
    6f94:	       movea.l d0,a6
    6f96:	       move.l 28(sp),d1
    6f9a:	       move.l 24(sp),d2
    6f9e:	       jsr -312(a6)
    6fa2:	       move.l d0,20(sp)
}
    6fa6:	       nop
    6fa8:	       move.l (sp)+,d2
    6faa:	       movea.l (sp)+,a6
    6fac:	       lea 52(sp),sp
    6fb0:	       rts

00006fb2 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    6fb2:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    6fb4:	movea.l 8(sp),a0
    6fb8:	movea.l 76(a0),a0
    6fbc:	move.l (a0),d2
    6fbe:	movea.l 8(sp),a0
    6fc2:	movea.l 76(a0),a0
    6fc6:	move.l 4(a0),d0
    6fca:	move.l 12(sp),-(sp)
    6fce:	move.l d0,-(sp)
    6fd0:	jsr 16142 <__mulsi3>
    6fd6:	addq.l #8,sp
    6fd8:	move.l d0,d1
    6fda:	movea.l 8(sp),a0
    6fde:	move.l 102(a0),d0
    6fe2:	add.l d1,d0
    6fe4:	add.l d0,d0
    6fe6:	add.l d0,d0
    6fe8:	movea.l d2,a0
    6fea:	adda.l d0,a0
    6fec:	move.l (a0),d0
    6fee:	movea.l 8(sp),a0
    6ff2:	move.l d0,68(a0)
}
    6ff6:	nop
    6ff8:	move.l (sp)+,d2
    6ffa:	rts

00006ffc <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    6ffc:	       lea -20(sp),sp
    7000:	       move.l d2,-(sp)
    7002:	       move.l 40(sp),d0
    7006:	       move.w d0,d0
    7008:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    700c:	       movea.l 1ae2c <speech>,a0
    7012:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7018:	       move.l 32(sp),-(sp)
    701c:	       jsr 9514 <findPerson>
    7022:	       addq.l #4,sp
    7024:	       move.l d0,16(sp)
    if (thisPerson) {
    7028:	   /-- beq.s 704e <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    702a:	   |   movea.w 6(sp),a0
    702e:	   |   move.l a0,-(sp)
    7030:	   |   move.l 40(sp),-(sp)
    7034:	   |   move.l 24(sp),-(sp)
    7038:	   |   move.l 40(sp),-(sp)
    703c:	   |   jsr 7114 <wrapSpeechPerson>
    7042:	   |   lea 16(sp),sp
    7046:	   |   move.l d0,20(sp)
    704a:	/--|-- bra.w 7108 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    704e:	|  \-> move.l 32(sp),-(sp)
    7052:	|      jsr 14108 <getRegionForObject>
    7058:	|      addq.l #4,sp
    705a:	|      move.l d0,12(sp)
        if (thisRegion) {
    705e:	|  /-- beq.s 70ca <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7060:	|  |   movea.l 12(sp),a0
    7064:	|  |   movea.l 28(a0),a0
    7068:	|  |   move.l 28(a0),d0
    706c:	|  |   movea.l 12(sp),a0
    7070:	|  |   movea.l 4(a0),a1
    7074:	|  |   movea.l 12(sp),a0
    7078:	|  |   movea.l 28(a0),a0
    707c:	|  |   move.l 20(a0),d1
    7080:	|  |   movea.l a1,a0
    7082:	|  |   suba.l d1,a0
    7084:	|  |   move.l 1aee6 <cameraY>,d1
    708a:	|  |   movea.l a0,a1
    708c:	|  |   suba.l d1,a1
    708e:	|  |   movea.l 12(sp),a0
    7092:	|  |   move.l (a0),d2
    7094:	|  |   movea.l 12(sp),a0
    7098:	|  |   move.l 8(a0),d1
    709c:	|  |   add.l d2,d1
    709e:	|  |   move.l d1,d2
    70a0:	|  |   asr.l #1,d2
    70a2:	|  |   move.l 1aee2 <cameraX>,d1
    70a8:	|  |   movea.l d2,a0
    70aa:	|  |   suba.l d1,a0
    70ac:	|  |   move.l 36(sp),-(sp)
    70b0:	|  |   move.l d0,-(sp)
    70b2:	|  |   move.l a1,-(sp)
    70b4:	|  |   move.l a0,-(sp)
    70b6:	|  |   move.l 44(sp),-(sp)
    70ba:	|  |   jsr 7232 <wrapSpeechXY>
    70c0:	|  |   lea 20(sp),sp
    70c4:	|  |   move.l d0,20(sp)
    70c8:	+--|-- bra.s 7108 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    70ca:	|  \-> move.l 32(sp),-(sp)
    70ce:	|      jsr c3ee <findObjectType>
    70d4:	|      addq.l #4,sp
    70d6:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    70da:	|      movea.l 8(sp),a0
    70de:	|      move.l 28(a0),d1
    70e2:	|      move.l 1ad24 <winWidth>,d0
    70e8:	|      lsr.l #1,d0
    70ea:	|      move.l 36(sp),-(sp)
    70ee:	|      move.l d1,-(sp)
    70f0:	|      pea a <_start+0xa>
    70f4:	|      move.l d0,-(sp)
    70f6:	|      move.l 44(sp),-(sp)
    70fa:	|      jsr 7232 <wrapSpeechXY>
    7100:	|      lea 20(sp),sp
    7104:	|      move.l d0,20(sp)
        }
    }
    return i;
    7108:	\----> move.l 20(sp),d0
}
    710c:	       move.l (sp)+,d2
    710e:	       lea 20(sp),sp
    7112:	       rts

00007114 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7114:	    subq.l #8,sp
    7116:	    movem.l d2-d4,-(sp)
    711a:	    move.l 36(sp),d0
    711e:	    move.w d0,d0
    7120:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7124:	    movea.l 28(sp),a0
    7128:	    movea.l 110(a0),a0
    712c:	    move.l 28(a0),d2
    7130:	    movea.l 28(sp),a0
    7134:	    move.l 4(a0),d3
    7138:	    move.l 1aee6 <cameraY>,d0
    713e:	    move.l d0,-(sp)
    7140:	    jsr 15bc0 <__floatsisf>
    7146:	    addq.l #4,sp
    7148:	    move.l d0,-(sp)
    714a:	    move.l d3,-(sp)
    714c:	    jsr 15eb4 <__subsf3>
    7152:	    addq.l #8,sp
    7154:	    move.l d0,d3
    7156:	    movea.l 28(sp),a0
    715a:	    move.l 28(a0),d4
    715e:	    movea.l 28(sp),a0
    7162:	    move.l 16(a0),d1
    7166:	    movea.l 28(sp),a0
    716a:	    move.l 20(a0),d0
    716e:	    sub.l d0,d1
    7170:	    move.l d1,-(sp)
    7172:	    jsr 15bc0 <__floatsisf>
    7178:	    addq.l #4,sp
    717a:	    move.l d0,-(sp)
    717c:	    move.l d4,-(sp)
    717e:	    jsr 15c72 <__mulsf3>
    7184:	    addq.l #8,sp
    7186:	    move.l d0,-(sp)
    7188:	    move.l d3,-(sp)
    718a:	    jsr 15eb4 <__subsf3>
    7190:	    addq.l #8,sp
    7192:	    move.l d0,d3
    7194:	    movea.l 28(sp),a0
    7198:	    movea.l 110(a0),a0
    719c:	    move.l 20(a0),d0
    71a0:	    move.l d0,-(sp)
    71a2:	    jsr 15bc0 <__floatsisf>
    71a8:	    addq.l #4,sp
    71aa:	    move.l d0,-(sp)
    71ac:	    move.l d3,-(sp)
    71ae:	    jsr 15eb4 <__subsf3>
    71b4:	    addq.l #8,sp
    71b6:	    move.l d0,-(sp)
    71b8:	    jsr 15b58 <__fixsfsi>
    71be:	    addq.l #4,sp
    71c0:	    move.l d0,d4
    71c2:	    movea.l 28(sp),a0
    71c6:	    move.l (a0),d3
    71c8:	    move.l 1aee2 <cameraX>,d0
    71ce:	    move.l d0,-(sp)
    71d0:	    jsr 15bc0 <__floatsisf>
    71d6:	    addq.l #4,sp
    71d8:	    move.l d0,-(sp)
    71da:	    move.l d3,-(sp)
    71dc:	    jsr 15eb4 <__subsf3>
    71e2:	    addq.l #8,sp
    71e4:	    move.l d0,-(sp)
    71e6:	    jsr 15b58 <__fixsfsi>
    71ec:	    addq.l #4,sp
    71ee:	    move.l 32(sp),-(sp)
    71f2:	    move.l d2,-(sp)
    71f4:	    move.l d4,-(sp)
    71f6:	    move.l d0,-(sp)
    71f8:	    move.l 40(sp),-(sp)
    71fc:	    jsr 7232 <wrapSpeechXY>
    7202:	    lea 20(sp),sp
    7206:	    move.l d0,16(sp)
	if (animPerson) {
    720a:	    tst.w 14(sp)
    720e:	/-- beq.s 7226 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7210:	|   move.l 28(sp),-(sp)
    7214:	|   jsr 6e52 <makeTalker>
    721a:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    721c:	|   movea.l 1ae2c <speech>,a0
    7222:	|   move.l 28(sp),(a0)
	}
	return i;
    7226:	\-> move.l 16(sp),d0
}
    722a:	    movem.l (sp)+,d2-d4
    722e:	    addq.l #8,sp
    7230:	    rts

00007232 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7232:	                   lea -16(sp),sp
    7236:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    723a:	                   clr.l 16(sp)
    killAllSpeech();
    723e:	                   jsr 6d84 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7244:	                   move.l 36(sp),-(sp)
    7248:	                   jsr 12aa4 <strlen>
    724e:	                   addq.l #4,sp
    7250:	                   movea.l d0,a0
    7252:	                   lea 20(a0),a0
    7256:	                   move.l a0,-(sp)
    7258:	                   jsr 15be8 <__floatunsisf>
    725e:	                   addq.l #4,sp
    7260:	                   move.l d0,d1
    7262:	                   move.l 1a760 <speechSpeed>,d0
    7268:	                   move.l d0,-(sp)
    726a:	                   move.l d1,-(sp)
    726c:	                   jsr 15c72 <__mulsf3>
    7272:	                   addq.l #8,sp
    7274:	                   move.l d0,-(sp)
    7276:	                   jsr 15b58 <__fixsfsi>
    727c:	                   addq.l #4,sp
    727e:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7282:	               /-- bgt.s 728a <wrapSpeechXY+0x58>
    7284:	               |   moveq #1,d0
    7286:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    728a:	               \-> moveq #-1,d1
    728c:	                   cmp.l 52(sp),d1
    7290:	               /-- beq.s 72d0 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7292:	               |   move.l 1aef6 <speechMode>,d0
    7298:	               +-- ble.s 72d0 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    729a:	               |   clr.l -(sp)
    729c:	               |   move.l 56(sp),-(sp)
    72a0:	               |   jsr c0b8 <startSound>
    72a6:	               |   addq.l #8,sp
    72a8:	               |   tst.w d0
    72aa:	               +-- beq.s 72d0 <wrapSpeechXY+0x9e>
                speechTime = -10;
    72ac:	               |   moveq #-10,d0
    72ae:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    72b2:	               |   movea.l 1ae2c <speech>,a0
    72b8:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    72be:	               |   move.l 1aef6 <speechMode>,d0
    72c4:	               |   moveq #2,d1
    72c6:	               |   cmp.l d0,d1
    72c8:	               +-- bne.s 72d0 <wrapSpeechXY+0x9e>
    72ca:	               |   moveq #-10,d0
    72cc:	/--------------|-- bra.w 7556 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    72d0:	|              \-> movea.l 1ae2c <speech>,a0
    72d6:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    72dc:	|     /----------- bra.w 7390 <wrapSpeechXY+0x15e>
        a = wrap;
    72e0:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    72e6:	|  |  |        /-- bra.s 72f6 <wrapSpeechXY+0xc4>
            a--;
    72e8:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    72ec:	|  |  |  |     +-- bne.s 72f6 <wrapSpeechXY+0xc4>
                a = wrap;
    72ee:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    72f4:	|  |  |  |  /--|-- bra.s 7308 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    72f6:	|  |  |  |  |  \-> move.l 28(sp),d0
    72fa:	|  |  |  |  |      movea.l 36(sp),a0
    72fe:	|  |  |  |  |      adda.l d0,a0
    7300:	|  |  |  |  |      move.b (a0),d0
    7302:	|  |  |  |  |      cmpi.b #32,d0
    7306:	|  |  |  \--|----- bne.s 72e8 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7308:	|  |  |     \----> move.l 28(sp),d0
    730c:	|  |  |            movea.l 36(sp),a0
    7310:	|  |  |            adda.l d0,a0
    7312:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7314:	|  |  |            lea 16(sp),a0
    7318:	|  |  |            move.l a0,-(sp)
    731a:	|  |  |            move.l 44(sp),-(sp)
    731e:	|  |  |            move.l 44(sp),-(sp)
    7322:	|  |  |            jsr 6ace <addSpeechLine>
    7328:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    732c:	|  |  |            move.l 28(sp),d0
    7330:	|  |  |            movea.l 36(sp),a0
    7334:	|  |  |            adda.l d0,a0
    7336:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    733a:	|  |  |            move.l 28(sp),d0
    733e:	|  |  |            addq.l #1,d0
    7340:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7344:	|  |  |            move.l 44(sp),-(sp)
    7348:	|  |  |            jsr 15bc0 <__floatsisf>
    734e:	|  |  |            addq.l #4,sp
    7350:	|  |  |            move.l d0,d2
    7352:	|  |  |            move.l 1af1c <fontHeight>,d0
    7358:	|  |  |            move.l d0,-(sp)
    735a:	|  |  |            jsr 15bc0 <__floatsisf>
    7360:	|  |  |            addq.l #4,sp
    7362:	|  |  |            move.l d0,d1
    7364:	|  |  |            move.l 1a774 <cameraZoom>,d0
    736a:	|  |  |            move.l d0,-(sp)
    736c:	|  |  |            move.l d1,-(sp)
    736e:	|  |  |            jsr 15a6c <__divsf3>
    7374:	|  |  |            addq.l #8,sp
    7376:	|  |  |            move.l d0,-(sp)
    7378:	|  |  |            move.l d2,-(sp)
    737a:	|  |  |            jsr 15eb4 <__subsf3>
    7380:	|  |  |            addq.l #8,sp
    7382:	|  |  |            move.l d0,-(sp)
    7384:	|  |  |            jsr 15b58 <__fixsfsi>
    738a:	|  |  |            addq.l #4,sp
    738c:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7390:	|  |  \----------> move.l 36(sp),-(sp)
    7394:	|  |               jsr 12aa4 <strlen>
    739a:	|  |               addq.l #4,sp
    739c:	|  |               move.l d0,d1
    739e:	|  |               move.l 48(sp),d0
    73a2:	|  |               cmp.l d1,d0
    73a4:	|  \-------------- bcs.w 72e0 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    73a8:	|                  lea 16(sp),a0
    73ac:	|                  move.l a0,-(sp)
    73ae:	|                  move.l 44(sp),-(sp)
    73b2:	|                  move.l 44(sp),-(sp)
    73b6:	|                  jsr 6ace <addSpeechLine>
    73bc:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    73c0:	|                  move.l 44(sp),-(sp)
    73c4:	|                  jsr 15bc0 <__floatsisf>
    73ca:	|                  addq.l #4,sp
    73cc:	|                  move.l d0,d2
    73ce:	|                  move.l 1af1c <fontHeight>,d0
    73d4:	|                  move.l d0,-(sp)
    73d6:	|                  jsr 15bc0 <__floatsisf>
    73dc:	|                  addq.l #4,sp
    73de:	|                  move.l d0,d1
    73e0:	|                  move.l 1a774 <cameraZoom>,d0
    73e6:	|                  move.l d0,-(sp)
    73e8:	|                  move.l d1,-(sp)
    73ea:	|                  jsr 15a6c <__divsf3>
    73f0:	|                  addq.l #8,sp
    73f2:	|                  move.l d0,-(sp)
    73f4:	|                  move.l d2,-(sp)
    73f6:	|                  jsr 15eb4 <__subsf3>
    73fc:	|                  addq.l #8,sp
    73fe:	|                  move.l d0,-(sp)
    7400:	|                  jsr 15b58 <__fixsfsi>
    7406:	|                  addq.l #4,sp
    7408:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    740c:	|              /-- bpl.s 742a <wrapSpeechXY+0x1f8>
    740e:	|              |   movea.l 1ae2c <speech>,a0
    7414:	|              |   move.l 8(a0),d0
    7418:	|              |   movea.l 1ae2c <speech>,a0
    741e:	|              |   sub.l 44(sp),d0
    7422:	|              |   move.l d0,8(a0)
    7426:	|           /--|-- bra.w 7518 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    742a:	|           |  \-> movea.l 1ae2c <speech>,a0
    7430:	|           |      move.l 8(a0),d0
    7434:	|           |      move.l d0,-(sp)
    7436:	|           |      jsr 15bc0 <__floatsisf>
    743c:	|           |      addq.l #4,sp
    743e:	|           |      move.l d0,d2
    7440:	|           |      move.l 1aee6 <cameraY>,d0
    7446:	|           |      move.l d0,-(sp)
    7448:	|           |      jsr 15bc0 <__floatsisf>
    744e:	|           |      addq.l #4,sp
    7450:	|           |      move.l d0,d3
    7452:	|           |      move.l 1ad28 <winHeight>,d4
    7458:	|           |      move.l 1af1c <fontHeight>,d0
    745e:	|           |      pea 3 <_start+0x3>
    7462:	|           |      move.l d0,-(sp)
    7464:	|           |      jsr 161c0 <__divsi3>
    746a:	|           |      addq.l #8,sp
    746c:	|           |      move.l d4,d1
    746e:	|           |      sub.l d0,d1
    7470:	|           |      move.l d1,-(sp)
    7472:	|           |      jsr 15be8 <__floatunsisf>
    7478:	|           |      addq.l #4,sp
    747a:	|           |      move.l d0,d1
    747c:	|           |      move.l 1a774 <cameraZoom>,d0
    7482:	|           |      move.l d0,-(sp)
    7484:	|           |      move.l d1,-(sp)
    7486:	|           |      jsr 15a6c <__divsf3>
    748c:	|           |      addq.l #8,sp
    748e:	|           |      move.l d0,-(sp)
    7490:	|           |      move.l d3,-(sp)
    7492:	|           |      jsr 15972 <__addsf3>
    7498:	|           |      addq.l #8,sp
    749a:	|           |      move.l d0,-(sp)
    749c:	|           |      move.l d2,-(sp)
    749e:	|           |      jsr 15d2c <__gtsf2>
    74a4:	|           |      addq.l #8,sp
    74a6:	|           |      tst.l d0
    74a8:	|           +----- ble.s 7518 <wrapSpeechXY+0x2e6>
    74aa:	|           |      move.l 1aee6 <cameraY>,d0
    74b0:	|           |      move.l d0,-(sp)
    74b2:	|           |      jsr 15bc0 <__floatsisf>
    74b8:	|           |      addq.l #4,sp
    74ba:	|           |      move.l d0,d2
    74bc:	|           |      move.l 1ad28 <winHeight>,d3
    74c2:	|           |      move.l 1af1c <fontHeight>,d0
    74c8:	|           |      pea 3 <_start+0x3>
    74cc:	|           |      move.l d0,-(sp)
    74ce:	|           |      jsr 161c0 <__divsi3>
    74d4:	|           |      addq.l #8,sp
    74d6:	|           |      move.l d3,d1
    74d8:	|           |      sub.l d0,d1
    74da:	|           |      move.l d1,-(sp)
    74dc:	|           |      jsr 15be8 <__floatunsisf>
    74e2:	|           |      addq.l #4,sp
    74e4:	|           |      move.l d0,d1
    74e6:	|           |      move.l 1a774 <cameraZoom>,d0
    74ec:	|           |      move.l d0,-(sp)
    74ee:	|           |      move.l d1,-(sp)
    74f0:	|           |      jsr 15a6c <__divsf3>
    74f6:	|           |      addq.l #8,sp
    74f8:	|           |      move.l d0,-(sp)
    74fa:	|           |      move.l d2,-(sp)
    74fc:	|           |      jsr 15972 <__addsf3>
    7502:	|           |      addq.l #8,sp
    7504:	|           |      movea.l 1ae2c <speech>,a2
    750a:	|           |      move.l d0,-(sp)
    750c:	|           |      jsr 15b58 <__fixsfsi>
    7512:	|           |      addq.l #4,sp
    7514:	|           |      move.l d0,8(a2)

    if (offset) {
    7518:	|           \----> move.l 16(sp),d0
    751c:	|        /-------- beq.s 7552 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    751e:	|        |         movea.l 1ae2c <speech>,a0
    7524:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    752a:	|        |     /-- bra.s 754c <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    752c:	|        |  /--|-> movea.l 20(sp),a0
    7530:	|        |  |  |   move.l 8(a0),d1
    7534:	|        |  |  |   move.l 16(sp),d0
    7538:	|        |  |  |   add.l d1,d0
    753a:	|        |  |  |   movea.l 20(sp),a0
    753e:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7542:	|        |  |  |   movea.l 20(sp),a0
    7546:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    754c:	|        |  |  \-> tst.l 20(sp)
    7550:	|        |  \----- bne.s 752c <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7552:	|        \-------> move.l 24(sp),d0
}
    7556:	\----------------> movem.l (sp)+,d2-d4/a2
    755a:	                   lea 16(sp),sp
    755e:	                   rts

00007560 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    7560:	    subq.l #4,sp
    7562:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    7564:	    move.l 1ae80 <zBuffer+0x50>,d0
    756a:	/-- beq.s 75a2 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    756c:	|   pea 1ae84 <zBuffer+0x54>
    7572:	|   pea 1 <_start+0x1>
    7576:	|   jsr 2e8e <deleteTextures>
    757c:	|   addq.l #8,sp
		zBuffer.texName = 0;
    757e:	|   clr.l 1ae84 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    7584:	|   move.l 1ae80 <zBuffer+0x50>,4(sp)
    758c:	|   move.l 1add0 <SysBase>,d0
    7592:	|   movea.l d0,a6
    7594:	|   movea.l 4(sp),a1
    7598:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    759c:	|   clr.l 1ae80 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    75a2:	\-> clr.l 1ae38 <zBuffer+0x8>
	zBuffer.originalNum =0;
    75a8:	    clr.l 1ae7c <zBuffer+0x4c>
}
    75ae:	    nop
    75b0:	    movea.l (sp)+,a6
    75b2:	    addq.l #4,sp
    75b4:	    rts

000075b6 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    75b6:	                         lea -528(sp),sp
    75ba:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    75be:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    75c2:	                         jsr 7560 <killZBuffer>

	zBuffer.originalNum = y;
    75c8:	                         move.l 544(sp),d0
    75cc:	                         move.l d0,1ae7c <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    75d2:	                         move.l 544(sp),d0
    75d6:	                         move.l d0,-(sp)
    75d8:	                         jsr 5bcc <openFileFromNum>
    75de:	                         addq.l #4,sp
    75e0:	                         tst.l d0
    75e2:	                     /-- bne.s 75ea <setZBuffer+0x34>
    75e4:	                     |   clr.w d0
    75e6:	/--------------------|-- bra.w 79c8 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    75ea:	|                    \-> move.l 1adb8 <bigDataFile>,524(sp)
    75f2:	|                        move.l 1add8 <DOSBase>,d0
    75f8:	|                        movea.l d0,a6
    75fa:	|                        move.l 524(sp),d1
    75fe:	|                        jsr -306(a6)
    7602:	|                        move.l d0,520(sp)
    7606:	|                        move.l 520(sp),d0
    760a:	|                        moveq #83,d1
    760c:	|                        cmp.l d0,d1
    760e:	|                    /-- beq.s 7670 <setZBuffer+0xba>
    7610:	|                    |   move.l 1adb8 <bigDataFile>,516(sp)
    7618:	|                    |   move.l 1add8 <DOSBase>,d0
    761e:	|                    |   movea.l d0,a6
    7620:	|                    |   move.l 516(sp),d1
    7624:	|                    |   jsr -306(a6)
    7628:	|                    |   move.l d0,512(sp)
    762c:	|                    |   move.l 512(sp),d0
    7630:	|                    |   moveq #122,d1
    7632:	|                    |   cmp.l d0,d1
    7634:	|                    +-- beq.s 7670 <setZBuffer+0xba>
    7636:	|                    |   move.l 1adb8 <bigDataFile>,508(sp)
    763e:	|                    |   move.l 1add8 <DOSBase>,d0
    7644:	|                    |   movea.l d0,a6
    7646:	|                    |   move.l 508(sp),d1
    764a:	|                    |   jsr -306(a6)
    764e:	|                    |   move.l d0,504(sp)
    7652:	|                    |   move.l 504(sp),d0
    7656:	|                    |   moveq #98,d1
    7658:	|                    |   cmp.l d0,d1
    765a:	|                    +-- beq.s 7670 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    765c:	|                    |   pea 1745e <PutChar+0x1206>
    7662:	|                    |   jsr 15784 <KPrintF>
    7668:	|                    |   addq.l #4,sp
		 return FALSE;
    766a:	|                    |   clr.w d0
    766c:	+--------------------|-- bra.w 79c8 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    7670:	|                    \-> move.l 1adb8 <bigDataFile>,500(sp)
    7678:	|                        move.l 1add8 <DOSBase>,d0
    767e:	|                        movea.l d0,a6
    7680:	|                        move.l 500(sp),d1
    7684:	|                        jsr -306(a6)
    7688:	|                        move.l d0,496(sp)
    768c:	|                        move.l 496(sp),d0
    7690:	|                    /-- beq.s 769a <setZBuffer+0xe4>
    7692:	|                    |   moveq #1,d1
    7694:	|                    |   cmp.l d0,d1
    7696:	|                 /--|-- beq.s 76b0 <setZBuffer+0xfa>
    7698:	|              /--|--|-- bra.s 76de <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    769a:	|              |  |  \-> move.l #640,1ae30 <zBuffer>
		zBuffer.height = 480;
    76a4:	|              |  |      move.l #480,1ae34 <zBuffer+0x4>
		break;
    76ae:	|              |  |  /-- bra.s 76f2 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    76b0:	|              |  \--|-> move.l 1adb8 <bigDataFile>,d0
    76b6:	|              |     |   move.l d0,-(sp)
    76b8:	|              |     |   jsr 6bc <get2bytes>
    76be:	|              |     |   addq.l #4,sp
    76c0:	|              |     |   move.l d0,1ae30 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    76c6:	|              |     |   move.l 1adb8 <bigDataFile>,d0
    76cc:	|              |     |   move.l d0,-(sp)
    76ce:	|              |     |   jsr 6bc <get2bytes>
    76d4:	|              |     |   addq.l #4,sp
    76d6:	|              |     |   move.l d0,1ae34 <zBuffer+0x4>
		break;
    76dc:	|              |     +-- bra.s 76f2 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    76de:	|              \-----|-> pea 17472 <PutChar+0x121a>
    76e4:	|                    |   jsr 15784 <KPrintF>
    76ea:	|                    |   addq.l #4,sp
		return FALSE;
    76ec:	|                    |   clr.w d0
    76ee:	+--------------------|-- bra.w 79c8 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    76f2:	|                    \-> move.l 1ae30 <zBuffer>,d0
    76f8:	|                        move.l d0,d1
    76fa:	|                        move.l 1aec4 <sceneWidth>,d0
    7700:	|                        cmp.l d1,d0
    7702:	|                    /-- bne.s 7716 <setZBuffer+0x160>
    7704:	|                    |   move.l 1ae34 <zBuffer+0x4>,d0
    770a:	|                    |   move.l d0,d1
    770c:	|                    |   move.l 1aec8 <sceneHeight>,d0
    7712:	|                    |   cmp.l d1,d0
    7714:	|                 /--|-- beq.s 7766 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    7716:	|                 |  \-> movea.l 1aec8 <sceneHeight>,a1
    771c:	|                 |      movea.l 1aec4 <sceneWidth>,a0
    7722:	|                 |      move.l 1ae34 <zBuffer+0x4>,d1
    7728:	|                 |      move.l 1ae30 <zBuffer>,d0
    772e:	|                 |      move.l a1,-(sp)
    7730:	|                 |      move.l a0,-(sp)
    7732:	|                 |      move.l d1,-(sp)
    7734:	|                 |      move.l d0,-(sp)
    7736:	|                 |      pea 174be <PutChar+0x1266>
    773c:	|                 |      moveq #32,d0
    773e:	|                 |      add.l sp,d0
    7740:	|                 |      move.l d0,-(sp)
    7742:	|                 |      jsr 12dc2 <sprintf>
    7748:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    774c:	|                 |      moveq #12,d0
    774e:	|                 |      add.l sp,d0
    7750:	|                 |      move.l d0,-(sp)
    7752:	|                 |      pea 174d9 <PutChar+0x1281>
    7758:	|                 |      jsr 15784 <KPrintF>
    775e:	|                 |      addq.l #8,sp
		return FALSE;
    7760:	|                 |      clr.w d0
    7762:	+-----------------|----- bra.w 79c8 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    7766:	|                 \----> move.l 1adb8 <bigDataFile>,492(sp)
    776e:	|                        move.l 1add8 <DOSBase>,d0
    7774:	|                        movea.l d0,a6
    7776:	|                        move.l 492(sp),d1
    777a:	|                        jsr -306(a6)
    777e:	|                        move.l d0,488(sp)
    7782:	|                        move.l 488(sp),d0
    7786:	|                        move.l d0,1ae38 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    778c:	|                        clr.l 544(sp)
    7790:	|                    /-- bra.s 77bc <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    7792:	|                 /--|-> move.l 1adb8 <bigDataFile>,d0
    7798:	|                 |  |   move.l d0,-(sp)
    779a:	|                 |  |   jsr 6bc <get2bytes>
    77a0:	|                 |  |   addq.l #4,sp
    77a2:	|                 |  |   move.l 544(sp),d1
    77a6:	|                 |  |   add.l d1,d1
    77a8:	|                 |  |   add.l d1,d1
    77aa:	|                 |  |   lea 540(sp),a0
    77ae:	|                 |  |   add.l a0,d1
    77b0:	|                 |  |   movea.l d1,a0
    77b2:	|                 |  |   lea -144(a0),a0
    77b6:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    77b8:	|                 |  |   addq.l #1,544(sp)
    77bc:	|                 |  \-> move.l 1ae38 <zBuffer+0x8>,d0
    77c2:	|                 |      cmp.l 544(sp),d0
    77c6:	|                 \----- bhi.s 7792 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    77c8:	|                        move.l 1ae38 <zBuffer+0x8>,d0
    77ce:	|                        move.l d0,-(sp)
    77d0:	|                        move.l sp,d0
    77d2:	|                        addi.l #336,d0
    77d8:	|                        move.l d0,-(sp)
    77da:	|                        move.l sp,d0
    77dc:	|                        addi.l #404,d0
    77e2:	|                        move.l d0,-(sp)
    77e4:	|                        jsr 79d2 <sortZPal>
    77ea:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    77ee:	|                        clr.l 544(sp)
    77f2:	|                    /-- bra.s 786a <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    77f4:	|                 /--|-> move.l 544(sp),d0
    77f8:	|                 |  |   add.l d0,d0
    77fa:	|                 |  |   add.l d0,d0
    77fc:	|                 |  |   move.l #540,d1
    7802:	|                 |  |   add.l sp,d1
    7804:	|                 |  |   add.l d1,d0
    7806:	|                 |  |   movea.l d0,a0
    7808:	|                 |  |   lea -208(a0),a0
    780c:	|                 |  |   move.l (a0),d0
    780e:	|                 |  |   add.l d0,d0
    7810:	|                 |  |   add.l d0,d0
    7812:	|                 |  |   lea 540(sp),a0
    7816:	|                 |  |   add.l a0,d0
    7818:	|                 |  |   movea.l d0,a0
    781a:	|                 |  |   lea -144(a0),a0
    781e:	|                 |  |   move.l (a0),d0
    7820:	|                 |  |   move.l 544(sp),d1
    7824:	|                 |  |   addq.l #3,d1
    7826:	|                 |  |   add.l d1,d1
    7828:	|                 |  |   movea.l d1,a1
    782a:	|                 |  |   adda.l d1,a1
    782c:	|                 |  |   lea 1ae30 <zBuffer>,a0
    7832:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    7836:	|                 |  |   move.l 544(sp),d0
    783a:	|                 |  |   add.l d0,d0
    783c:	|                 |  |   add.l d0,d0
    783e:	|                 |  |   move.l #540,d1
    7844:	|                 |  |   add.l sp,d1
    7846:	|                 |  |   add.l d1,d0
    7848:	|                 |  |   movea.l d0,a0
    784a:	|                 |  |   lea -208(a0),a0
    784e:	|                 |  |   move.l (a0),d1
    7850:	|                 |  |   move.l 544(sp),d0
    7854:	|                 |  |   add.l d1,d1
    7856:	|                 |  |   add.l d1,d1
    7858:	|                 |  |   lea 540(sp),a0
    785c:	|                 |  |   add.l a0,d1
    785e:	|                 |  |   movea.l d1,a0
    7860:	|                 |  |   lea -272(a0),a0
    7864:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7866:	|                 |  |   addq.l #1,544(sp)
    786a:	|                 |  \-> move.l 1ae38 <zBuffer+0x8>,d0
    7870:	|                 |      cmp.l 544(sp),d0
    7874:	|                 \----- bhi.w 77f4 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    7878:	|                        move.l 1aec4 <sceneWidth>,d0
    787e:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    7882:	|                        move.l 1aec8 <sceneHeight>,d0
    7888:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    788c:	|                        move.l 484(sp),-(sp)
    7890:	|                        move.l 484(sp),-(sp)
    7894:	|                        jsr 16142 <__mulsi3>
    789a:	|                        addq.l #8,sp
    789c:	|                        move.l d0,476(sp)
    78a0:	|                        clr.l 472(sp)
    78a4:	|                        move.l 1add0 <SysBase>,d0
    78aa:	|                        movea.l d0,a6
    78ac:	|                        move.l 476(sp),d0
    78b0:	|                        move.l 472(sp),d1
    78b4:	|                        jsr -684(a6)
    78b8:	|                        move.l d0,468(sp)
    78bc:	|                        move.l 468(sp),d0
    78c0:	|                        move.l d0,1ae80 <zBuffer+0x50>
	if (!zBuffer.tex) {
    78c6:	|                        move.l 1ae80 <zBuffer+0x50>,d0
    78cc:	|                    /-- bne.s 78e2 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    78ce:	|                    |   pea 17516 <PutChar+0x12be>
    78d4:	|                    |   jsr 15784 <KPrintF>
    78da:	|                    |   addq.l #4,sp
		return FALSE;
    78dc:	|                    |   clr.w d0
    78de:	+--------------------|-- bra.w 79c8 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    78e2:	|                    \-> clr.l 544(sp)
    78e6:	|     /----------------- bra.w 79b2 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    78ea:	|  /--|----------------> clr.l 536(sp)
    78ee:	|  |  |     /----------- bra.w 799e <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    78f2:	|  |  |  /--|----------> tst.l 528(sp)
    78f6:	|  |  |  |  |  /-------- bne.s 7954 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    78f8:	|  |  |  |  |  |         move.l 1adb8 <bigDataFile>,464(sp)
    7900:	|  |  |  |  |  |         move.l 1add8 <DOSBase>,d0
    7906:	|  |  |  |  |  |         movea.l d0,a6
    7908:	|  |  |  |  |  |         move.l 464(sp),d1
    790c:	|  |  |  |  |  |         jsr -306(a6)
    7910:	|  |  |  |  |  |         move.l d0,460(sp)
    7914:	|  |  |  |  |  |         move.l 460(sp),d0
    7918:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    791c:	|  |  |  |  |  |         move.l 532(sp),d0
    7920:	|  |  |  |  |  |         asr.l #4,d0
    7922:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    7926:	|  |  |  |  |  |         moveq #15,d0
    7928:	|  |  |  |  |  |         cmp.l 528(sp),d0
    792c:	|  |  |  |  |  |  /----- bne.s 794a <setZBuffer+0x394>
    792e:	|  |  |  |  |  |  |      move.l 1adb8 <bigDataFile>,d0
    7934:	|  |  |  |  |  |  |      move.l d0,-(sp)
    7936:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    793c:	|  |  |  |  |  |  |      addq.l #4,sp
    793e:	|  |  |  |  |  |  |      movea.l d0,a0
    7940:	|  |  |  |  |  |  |      lea 16(a0),a0
    7944:	|  |  |  |  |  |  |      move.l a0,528(sp)
    7948:	|  |  |  |  |  |  |  /-- bra.s 794e <setZBuffer+0x398>
				else stillToGo ++;
    794a:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    794e:	|  |  |  |  |  |     \-> moveq #15,d1
    7950:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    7954:	|  |  |  |  |  \-------> move.l 532(sp),d0
    7958:	|  |  |  |  |            add.l d0,d0
    795a:	|  |  |  |  |            add.l d0,d0
    795c:	|  |  |  |  |            lea 540(sp),a0
    7960:	|  |  |  |  |            add.l a0,d0
    7962:	|  |  |  |  |            movea.l d0,a0
    7964:	|  |  |  |  |            lea -272(a0),a0
    7968:	|  |  |  |  |            move.l (a0),d0
    796a:	|  |  |  |  |            move.l d0,d2
    796c:	|  |  |  |  |            move.l 1ae80 <zBuffer+0x50>,d3
    7972:	|  |  |  |  |            move.l 484(sp),d0
    7976:	|  |  |  |  |            move.l 544(sp),-(sp)
    797a:	|  |  |  |  |            move.l d0,-(sp)
    797c:	|  |  |  |  |            jsr 16142 <__mulsi3>
    7982:	|  |  |  |  |            addq.l #8,sp
    7984:	|  |  |  |  |            move.l d0,d1
    7986:	|  |  |  |  |            move.l 536(sp),d0
    798a:	|  |  |  |  |            add.l d1,d0
    798c:	|  |  |  |  |            movea.l d3,a0
    798e:	|  |  |  |  |            adda.l d0,a0
    7990:	|  |  |  |  |            move.b d2,d0
    7992:	|  |  |  |  |            lsl.b #4,d0
    7994:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7996:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    799a:	|  |  |  |  |            addq.l #1,536(sp)
    799e:	|  |  |  |  \----------> move.l 536(sp),d1
    79a2:	|  |  |  |               move.l 1aec4 <sceneWidth>,d0
    79a8:	|  |  |  |               cmp.l d1,d0
    79aa:	|  |  |  \-------------- bhi.w 78f2 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    79ae:	|  |  |                  addq.l #1,544(sp)
    79b2:	|  |  \----------------> move.l 1aec8 <sceneHeight>,d0
    79b8:	|  |                     cmp.l 544(sp),d0
    79bc:	|  \-------------------- bhi.w 78ea <setZBuffer+0x334>
		}
	}

	finishAccess ();
    79c0:	|                        jsr 5ac4 <finishAccess>
	
	return TRUE;
    79c6:	|                        moveq #1,d0
}
    79c8:	\----------------------> movem.l (sp)+,d2-d3/a6
    79cc:	                         lea 528(sp),sp
    79d0:	                         rts

000079d2 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    79d2:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    79d4:	             clr.l 4(sp)
    79d8:	         /-- bra.s 79f0 <sortZPal+0x1e>
		newpal[i] = i;
    79da:	      /--|-> move.l 4(sp),d0
    79de:	      |  |   add.l d0,d0
    79e0:	      |  |   add.l d0,d0
    79e2:	      |  |   movea.l 16(sp),a0
    79e6:	      |  |   adda.l d0,a0
    79e8:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    79ec:	      |  |   addq.l #1,4(sp)
    79f0:	      |  \-> move.l 4(sp),d0
    79f4:	      |      cmp.l 20(sp),d0
    79f8:	      \----- blt.s 79da <sortZPal+0x8>
	}

	if (size < 2) return;		
    79fa:	             moveq #1,d0
    79fc:	             cmp.l 20(sp),d0
    7a00:	/----------- bge.w 7ab2 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7a04:	|            moveq #1,d0
    7a06:	|            move.l d0,4(sp)
    7a0a:	|     /----- bra.w 7aa4 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7a0e:	|  /--|----> move.l 4(sp),d0
    7a12:	|  |  |      add.l d0,d0
    7a14:	|  |  |      add.l d0,d0
    7a16:	|  |  |      movea.l 16(sp),a0
    7a1a:	|  |  |      adda.l d0,a0
    7a1c:	|  |  |      move.l (a0),d0
    7a1e:	|  |  |      add.l d0,d0
    7a20:	|  |  |      add.l d0,d0
    7a22:	|  |  |      movea.l 12(sp),a0
    7a26:	|  |  |      adda.l d0,a0
    7a28:	|  |  |      move.l (a0),d1
    7a2a:	|  |  |      move.l 4(sp),d0
    7a2e:	|  |  |      addi.l #1073741823,d0
    7a34:	|  |  |      add.l d0,d0
    7a36:	|  |  |      add.l d0,d0
    7a38:	|  |  |      movea.l 16(sp),a0
    7a3c:	|  |  |      adda.l d0,a0
    7a3e:	|  |  |      move.l (a0),d0
    7a40:	|  |  |      add.l d0,d0
    7a42:	|  |  |      add.l d0,d0
    7a44:	|  |  |      movea.l 12(sp),a0
    7a48:	|  |  |      adda.l d0,a0
    7a4a:	|  |  |      move.l (a0),d0
    7a4c:	|  |  |      cmp.l d1,d0
    7a4e:	|  |  |  /-- ble.s 7aa0 <sortZPal+0xce>
			tmp = newpal[i];
    7a50:	|  |  |  |   move.l 4(sp),d0
    7a54:	|  |  |  |   add.l d0,d0
    7a56:	|  |  |  |   add.l d0,d0
    7a58:	|  |  |  |   movea.l 16(sp),a0
    7a5c:	|  |  |  |   adda.l d0,a0
    7a5e:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7a60:	|  |  |  |   move.l 4(sp),d0
    7a64:	|  |  |  |   addi.l #1073741823,d0
    7a6a:	|  |  |  |   add.l d0,d0
    7a6c:	|  |  |  |   add.l d0,d0
    7a6e:	|  |  |  |   movea.l 16(sp),a1
    7a72:	|  |  |  |   adda.l d0,a1
    7a74:	|  |  |  |   move.l 4(sp),d0
    7a78:	|  |  |  |   add.l d0,d0
    7a7a:	|  |  |  |   add.l d0,d0
    7a7c:	|  |  |  |   movea.l 16(sp),a0
    7a80:	|  |  |  |   adda.l d0,a0
    7a82:	|  |  |  |   move.l (a1),d0
    7a84:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7a86:	|  |  |  |   move.l 4(sp),d0
    7a8a:	|  |  |  |   addi.l #1073741823,d0
    7a90:	|  |  |  |   add.l d0,d0
    7a92:	|  |  |  |   add.l d0,d0
    7a94:	|  |  |  |   movea.l 16(sp),a0
    7a98:	|  |  |  |   adda.l d0,a0
    7a9a:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7a9c:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7aa0:	|  |  |  \-> addq.l #1,4(sp)
    7aa4:	|  |  \----> move.l 4(sp),d0
    7aa8:	|  |         cmp.l 20(sp),d0
    7aac:	|  \-------- blt.w 7a0e <sortZPal+0x3c>
    7ab0:	|        /-- bra.s 7ab4 <sortZPal+0xe2>
	if (size < 2) return;		
    7ab2:	\--------|-> nop
		}
	}
    7ab4:	         \-> addq.l #8,sp
    7ab6:	             rts

00007ab8 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7ab8:	          lea -36(sp),sp
    7abc:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7abe:	          move.l 44(sp),d0
    7ac2:	          addq.l #8,d0
    7ac4:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7ac8:	          clr.l 36(sp)
    7acc:	   /----- bra.s 7b12 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7ace:	/--|----> movea.l 28(sp),a0
    7ad2:	|  |      movea.l 8(a0),a0
    7ad6:	|  |      move.l 36(sp),d1
    7ada:	|  |      move.l d1,d0
    7adc:	|  |      lsl.l #3,d0
    7ade:	|  |      sub.l d1,d0
    7ae0:	|  |      add.l d0,d0
    7ae2:	|  |      add.l d0,d0
    7ae4:	|  |      adda.l d0,a0
    7ae6:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7aea:	|  |      movea.l 8(sp),a0
    7aee:	|  |      move.l 24(a0),d0
    7af2:	|  |  /-- beq.s 7b0e <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7af4:	|  |  |   movea.l 8(sp),a0
    7af8:	|  |  |   move.l 24(a0),4(sp)
    7afe:	|  |  |   move.l 1add0 <SysBase>,d0
    7b04:	|  |  |   movea.l d0,a6
    7b06:	|  |  |   movea.l 4(sp),a1
    7b0a:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b0e:	|  |  \-> addq.l #1,36(sp)
    7b12:	|  \----> movea.l 28(sp),a0
    7b16:	|         move.l (a0),d0
    7b18:	|         cmp.l 36(sp),d0
    7b1c:	\-------- bgt.s 7ace <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7b1e:	          movea.l 28(sp),a0
    7b22:	          move.l 8(a0),24(sp)
    7b28:	          move.l 1add0 <SysBase>,d0
    7b2e:	          movea.l d0,a6
    7b30:	          movea.l 24(sp),a1
    7b34:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7b38:	          move.l 28(sp),20(sp)
    7b3e:	          move.l 1add0 <SysBase>,d0
    7b44:	          movea.l d0,a6
    7b46:	          movea.l 20(sp),a1
    7b4a:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7b4e:	          move.l 1af34 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7b56:	      /-- bra.s 7b62 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7b58:	   /--|-> movea.l 32(sp),a0
    7b5c:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7b62:	   |  \-> movea.l 32(sp),a0
    7b66:	   |      movea.l 22(a0),a0
    7b6a:	   |      move.l (a0),d1
    7b6c:	   |      movea.l 44(sp),a0
    7b70:	   |      move.l (a0),d0
    7b72:	   |      cmp.l d1,d0
    7b74:	   |  /-- beq.s 7b7c <forgetSpriteBank+0xc4>
    7b76:	   |  |   tst.l 32(sp)
    7b7a:	   \--|-- bne.s 7b58 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7b7c:	      \-> tst.l 32(sp)
    7b80:	   /----- beq.s 7baa <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7b82:	   |      movea.l 44(sp),a0
    7b86:	   |      move.l 22(a0),d0
    7b8a:	   |      movea.l 32(sp),a0
    7b8e:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7b92:	   |      move.l 44(sp),12(sp)
    7b98:	   |      move.l 1add0 <SysBase>,d0
    7b9e:	   |      movea.l d0,a6
    7ba0:	   |      movea.l 12(sp),a1
    7ba4:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7ba8:	   |  /-- bra.s 7bd0 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7baa:	   \--|-> movea.l 1af34 <allLoadedBanks>,a0
    7bb0:	      |   move.l 22(a0),d0
    7bb4:	      |   move.l d0,1af34 <allLoadedBanks>
		FreeVec( forgetme);
    7bba:	      |   move.l 44(sp),16(sp)
    7bc0:	      |   move.l 1add0 <SysBase>,d0
    7bc6:	      |   movea.l d0,a6
    7bc8:	      |   movea.l 16(sp),a1
    7bcc:	      |   jsr -690(a6)
}
    7bd0:	      \-> nop
    7bd2:	          movea.l (sp)+,a6
    7bd4:	          lea 36(sp),sp
    7bd8:	          rts

00007bda <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7bda:	                lea -80(sp),sp
    7bde:	                movem.l d2-d4/a2/a6,-(sp)
    7be2:	                move.l 112(sp),d0
    7be6:	                move.w d0,d0
    7be8:	                move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7bec:	                clr.l 90(sp)
    7bf0:	                clr.l 86(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7bf4:	                clr.l 82(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7bf8:	                move.l 104(sp),-(sp)
    7bfc:	                jsr 5bcc <openFileFromNum>
    7c02:	                addq.l #4,sp
    7c04:	                tst.l d0
    7c06:	            /-- bne.s 7c1c <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7c08:	            |   pea 17539 <PutChar+0x12e1>
    7c0e:	            |   jsr 15784 <KPrintF>
    7c14:	            |   addq.l #4,sp
		return FALSE;
    7c16:	            |   clr.w d0
    7c18:	/-----------|-- bra.w 7f24 <loadSpriteBank+0x34a>
	}

	loadhere->isFont = isFont;
    7c1c:	|           \-> movea.l 108(sp),a0
    7c20:	|               move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7c26:	|               move.l 1adb8 <bigDataFile>,d0
    7c2c:	|               move.l d0,-(sp)
    7c2e:	|               jsr 6bc <get2bytes>
    7c34:	|               addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7c36:	|               move.l 1adb8 <bigDataFile>,78(sp)
    7c3e:	|               move.l 1add8 <DOSBase>,d0
    7c44:	|               movea.l d0,a6
    7c46:	|               move.l 78(sp),d1
    7c4a:	|               jsr -306(a6)
    7c4e:	|               move.l d0,74(sp)
    7c52:	|               move.l 74(sp),d0
    7c56:	|               movea.l 108(sp),a0
    7c5a:	|               move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7c5e:	|               move.l 1adb8 <bigDataFile>,d0
    7c64:	|               move.l d0,-(sp)
    7c66:	|               jsr 6bc <get2bytes>
    7c6c:	|               addq.l #4,sp
    7c6e:	|               move.l d0,70(sp)

	if (total <= 0) {
    7c72:	|           /-- bgt.s 7c88 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7c74:	|           |   pea 17567 <PutChar+0x130f>
    7c7a:	|           |   jsr 15784 <KPrintF>
    7c80:	|           |   addq.l #4,sp
		return FALSE;
    7c82:	|           |   clr.w d0
    7c84:	+-----------|-- bra.w 7f24 <loadSpriteBank+0x34a>
	}
	if (loadhere->type > 2) {
    7c88:	|           \-> movea.l 108(sp),a0
    7c8c:	|               move.l 4(a0),d0
    7c90:	|               moveq #2,d1
    7c92:	|               cmp.l d0,d1
    7c94:	|           /-- bge.s 7caa <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7c96:	|           |   pea 175a7 <PutChar+0x134f>
    7c9c:	|           |   jsr 15784 <KPrintF>
    7ca2:	|           |   addq.l #4,sp
		return FALSE;
    7ca4:	|           |   clr.w d0
    7ca6:	+-----------|-- bra.w 7f24 <loadSpriteBank+0x34a>
	}

	loadhere->total = total;
    7caa:	|           \-> movea.l 108(sp),a0
    7cae:	|               move.l 70(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7cb2:	|               move.l 70(sp),d1
    7cb6:	|               move.l d1,d0
    7cb8:	|               lsl.l #3,d0
    7cba:	|               sub.l d1,d0
    7cbc:	|               add.l d0,d0
    7cbe:	|               add.l d0,d0
    7cc0:	|               move.l d0,66(sp)
    7cc4:	|               clr.l 62(sp)
    7cc8:	|               move.l 1add0 <SysBase>,d0
    7cce:	|               movea.l d0,a6
    7cd0:	|               move.l 66(sp),d0
    7cd4:	|               move.l 62(sp),d1
    7cd8:	|               jsr -684(a6)
    7cdc:	|               move.l d0,58(sp)
    7ce0:	|               move.l 58(sp),d0
    7ce4:	|               movea.l 108(sp),a0
    7ce8:	|               move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7cec:	|               movea.l 108(sp),a0
    7cf0:	|               move.l 8(a0),d0
    7cf4:	|           /-- bne.s 7cfc <loadSpriteBank+0x122>
    7cf6:	|           |   clr.w d0
    7cf8:	+-----------|-- bra.w 7f24 <loadSpriteBank+0x34a>
	
	startIndex = 1;
    7cfc:	|           \-> moveq #1,d0
    7cfe:	|               move.l d0,86(sp)

	for (i = 0; i < total; i++) {
    7d02:	|               clr.l 96(sp)
    7d06:	|     /-------- bra.w 7f10 <loadSpriteBank+0x336>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7d0a:	|  /--|-------> movea.l 1adb8 <bigDataFile>,a1
    7d10:	|  |  |         movea.l 108(sp),a0
    7d14:	|  |  |         movea.l 8(a0),a0
    7d18:	|  |  |         move.l 96(sp),d1
    7d1c:	|  |  |         move.l d1,d0
    7d1e:	|  |  |         lsl.l #3,d0
    7d20:	|  |  |         sub.l d1,d0
    7d22:	|  |  |         add.l d0,d0
    7d24:	|  |  |         add.l d0,d0
    7d26:	|  |  |         lea (0,a0,d0.l),a2
    7d2a:	|  |  |         move.l a1,-(sp)
    7d2c:	|  |  |         jsr 6bc <get2bytes>
    7d32:	|  |  |         addq.l #4,sp
    7d34:	|  |  |         move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7d36:	|  |  |         movea.l 1adb8 <bigDataFile>,a1
    7d3c:	|  |  |         movea.l 108(sp),a0
    7d40:	|  |  |         movea.l 8(a0),a0
    7d44:	|  |  |         move.l 96(sp),d1
    7d48:	|  |  |         move.l d1,d0
    7d4a:	|  |  |         lsl.l #3,d0
    7d4c:	|  |  |         sub.l d1,d0
    7d4e:	|  |  |         add.l d0,d0
    7d50:	|  |  |         add.l d0,d0
    7d52:	|  |  |         lea (0,a0,d0.l),a2
    7d56:	|  |  |         move.l a1,-(sp)
    7d58:	|  |  |         jsr 6bc <get2bytes>
    7d5e:	|  |  |         addq.l #4,sp
    7d60:	|  |  |         move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7d64:	|  |  |         movea.l 1adb8 <bigDataFile>,a1
    7d6a:	|  |  |         movea.l 108(sp),a0
    7d6e:	|  |  |         movea.l 8(a0),a0
    7d72:	|  |  |         move.l 96(sp),d1
    7d76:	|  |  |         move.l d1,d0
    7d78:	|  |  |         lsl.l #3,d0
    7d7a:	|  |  |         sub.l d1,d0
    7d7c:	|  |  |         add.l d0,d0
    7d7e:	|  |  |         add.l d0,d0
    7d80:	|  |  |         lea (0,a0,d0.l),a2
    7d84:	|  |  |         move.l a1,-(sp)
    7d86:	|  |  |         jsr 6bc <get2bytes>
    7d8c:	|  |  |         addq.l #4,sp
    7d8e:	|  |  |         move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7d92:	|  |  |         movea.l 1adb8 <bigDataFile>,a1
    7d98:	|  |  |         movea.l 108(sp),a0
    7d9c:	|  |  |         movea.l 8(a0),a0
    7da0:	|  |  |         move.l 96(sp),d1
    7da4:	|  |  |         move.l d1,d0
    7da6:	|  |  |         lsl.l #3,d0
    7da8:	|  |  |         sub.l d1,d0
    7daa:	|  |  |         add.l d0,d0
    7dac:	|  |  |         add.l d0,d0
    7dae:	|  |  |         lea (0,a0,d0.l),a2
    7db2:	|  |  |         move.l a1,-(sp)
    7db4:	|  |  |         jsr 6bc <get2bytes>
    7dba:	|  |  |         addq.l #4,sp
    7dbc:	|  |  |         move.l d0,12(a2)

		UWORD size;
		// ToDo Load Data
		if( loadhere->type == 1) 
    7dc0:	|  |  |         movea.l 108(sp),a0
    7dc4:	|  |  |         move.l 4(a0),d0
    7dc8:	|  |  |         moveq #1,d1
    7dca:	|  |  |         cmp.l d0,d1
    7dcc:	|  |  |     /-- bne.s 7df8 <loadSpriteBank+0x21e>
		//Mousecursor Data (4 Colors HW-Sprite)
		{
			size = 4*loadhere->sprites[i].height+8;
    7dce:	|  |  |     |   movea.l 108(sp),a0
    7dd2:	|  |  |     |   movea.l 8(a0),a0
    7dd6:	|  |  |     |   move.l 96(sp),d1
    7dda:	|  |  |     |   move.l d1,d0
    7ddc:	|  |  |     |   lsl.l #3,d0
    7dde:	|  |  |     |   sub.l d1,d0
    7de0:	|  |  |     |   add.l d0,d0
    7de2:	|  |  |     |   add.l d0,d0
    7de4:	|  |  |     |   adda.l d0,a0
    7de6:	|  |  |     |   move.l 4(a0),d0
    7dea:	|  |  |     |   addq.l #2,d0
    7dec:	|  |  |     |   move.l d0,d0
    7dee:	|  |  |     |   add.w d0,d0
    7df0:	|  |  |     |   add.w d0,d0
    7df2:	|  |  |     |   move.w d0,94(sp)
    7df6:	|  |  |  /--|-- bra.s 7e48 <loadSpriteBank+0x26e>
		} else {
			size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7df8:	|  |  |  |  \-> movea.l 108(sp),a0
    7dfc:	|  |  |  |      movea.l 8(a0),a0
    7e00:	|  |  |  |      move.l 96(sp),d1
    7e04:	|  |  |  |      move.l d1,d0
    7e06:	|  |  |  |      lsl.l #3,d0
    7e08:	|  |  |  |      sub.l d1,d0
    7e0a:	|  |  |  |      add.l d0,d0
    7e0c:	|  |  |  |      add.l d0,d0
    7e0e:	|  |  |  |      adda.l d0,a0
    7e10:	|  |  |  |      move.l (a0),d0
    7e12:	|  |  |  |  /-- bpl.s 7e16 <loadSpriteBank+0x23c>
    7e14:	|  |  |  |  |   addq.l #7,d0
    7e16:	|  |  |  |  \-> asr.l #3,d0
    7e18:	|  |  |  |      move.l d0,d2
    7e1a:	|  |  |  |      movea.l 108(sp),a0
    7e1e:	|  |  |  |      movea.l 8(a0),a0
    7e22:	|  |  |  |      move.l 96(sp),d1
    7e26:	|  |  |  |      move.l d1,d0
    7e28:	|  |  |  |      lsl.l #3,d0
    7e2a:	|  |  |  |      sub.l d1,d0
    7e2c:	|  |  |  |      add.l d0,d0
    7e2e:	|  |  |  |      add.l d0,d0
    7e30:	|  |  |  |      adda.l d0,a0
    7e32:	|  |  |  |      move.l 4(a0),d0
    7e36:	|  |  |  |      move.l d0,d0
    7e38:	|  |  |  |      move.w d2,d1
    7e3a:	|  |  |  |      muls.w d0,d1
    7e3c:	|  |  |  |      move.w d1,d0
    7e3e:	|  |  |  |      add.w d0,d0
    7e40:	|  |  |  |      add.w d1,d0
    7e42:	|  |  |  |      add.w d0,d0
    7e44:	|  |  |  |      move.w d0,94(sp)
		}
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    7e48:	|  |  |  \----> moveq #0,d0
    7e4a:	|  |  |         move.w 94(sp),d0
    7e4e:	|  |  |         add.l d0,d0
    7e50:	|  |  |         move.l d0,54(sp)
    7e54:	|  |  |         moveq #2,d0
    7e56:	|  |  |         move.l d0,50(sp)
    7e5a:	|  |  |         move.l 1add0 <SysBase>,d0
    7e60:	|  |  |         movea.l d0,a6
    7e62:	|  |  |         move.l 54(sp),d0
    7e66:	|  |  |         move.l 50(sp),d1
    7e6a:	|  |  |         jsr -684(a6)
    7e6e:	|  |  |         move.l d0,46(sp)
    7e72:	|  |  |         movea.l 46(sp),a1
    7e76:	|  |  |         movea.l 108(sp),a0
    7e7a:	|  |  |         movea.l 8(a0),a0
    7e7e:	|  |  |         move.l 96(sp),d1
    7e82:	|  |  |         move.l d1,d0
    7e84:	|  |  |         lsl.l #3,d0
    7e86:	|  |  |         sub.l d1,d0
    7e88:	|  |  |         add.l d0,d0
    7e8a:	|  |  |         add.l d0,d0
    7e8c:	|  |  |         adda.l d0,a0
    7e8e:	|  |  |         move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    7e92:	|  |  |         move.l 1adb8 <bigDataFile>,42(sp)
    7e9a:	|  |  |         movea.l 108(sp),a0
    7e9e:	|  |  |         movea.l 8(a0),a0
    7ea2:	|  |  |         move.l 96(sp),d1
    7ea6:	|  |  |         move.l d1,d0
    7ea8:	|  |  |         lsl.l #3,d0
    7eaa:	|  |  |         sub.l d1,d0
    7eac:	|  |  |         add.l d0,d0
    7eae:	|  |  |         add.l d0,d0
    7eb0:	|  |  |         adda.l d0,a0
    7eb2:	|  |  |         move.l 24(a0),38(sp)
    7eb8:	|  |  |         moveq #2,d1
    7eba:	|  |  |         move.l d1,34(sp)
    7ebe:	|  |  |         move.w 94(sp),d0
    7ec2:	|  |  |         lsr.w #1,d0
    7ec4:	|  |  |         move.w d0,d0
    7ec6:	|  |  |         andi.l #65535,d0
    7ecc:	|  |  |         move.l d0,30(sp)
    7ed0:	|  |  |         move.l 1add8 <DOSBase>,d0
    7ed6:	|  |  |         movea.l d0,a6
    7ed8:	|  |  |         move.l 42(sp),d1
    7edc:	|  |  |         move.l 38(sp),d2
    7ee0:	|  |  |         move.l 34(sp),d3
    7ee4:	|  |  |         move.l 30(sp),d4
    7ee8:	|  |  |         jsr -324(a6)
    7eec:	|  |  |         move.l d0,26(sp)
    7ef0:	|  |  |         move.l 26(sp),d0
    7ef4:	|  |  |         move.w d0,24(sp)
		if (!count) {
    7ef8:	|  |  |     /-- bne.s 7f0c <loadSpriteBank+0x332>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7efa:	|  |  |     |   pea 175dc <PutChar+0x1384>
    7f00:	|  |  |     |   jsr 15784 <KPrintF>
    7f06:	|  |  |     |   addq.l #4,sp
			return FALSE;
    7f08:	|  |  |     |   clr.w d0
    7f0a:	+--|--|-----|-- bra.s 7f24 <loadSpriteBank+0x34a>
	for (i = 0; i < total; i++) {
    7f0c:	|  |  |     \-> addq.l #1,96(sp)
    7f10:	|  |  \-------> move.l 96(sp),d0
    7f14:	|  |            cmp.l 70(sp),d0
    7f18:	|  \----------- blt.w 7d0a <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    7f1c:	|               jsr 5ac4 <finishAccess>

	return TRUE;
    7f22:	|               moveq #1,d0
}
    7f24:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    7f28:	                lea 80(sp),sp
    7f2c:	                rts

00007f2e <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7f2e:	                   lea -16(sp),sp
    7f32:	                   move.l 28(sp),d0
    7f36:	                   move.w d0,d0
    7f38:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7f3c:	                   movea.l 24(sp),a0
    7f40:	                   move.l (a0),d0
    7f42:	                   move.l d0,-(sp)
    7f44:	                   jsr 15f20 <__fixunssfsi>
    7f4a:	                   addq.l #4,sp
    7f4c:	                   move.l d0,d0
    7f4e:	                   movea.l 20(sp),a0
    7f52:	                   move.l 8(a0),d1
    7f56:	                   move.l d1,d1
    7f58:	                   movea.w d0,a0
    7f5a:	                   suba.w d1,a0
    7f5c:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    7f60:	                   movea.l 24(sp),a0
    7f64:	                   move.l 4(a0),d0
    7f68:	                   move.l d0,-(sp)
    7f6a:	                   jsr 15f20 <__fixunssfsi>
    7f70:	                   addq.l #4,sp
    7f72:	                   move.l d0,d0
    7f74:	                   movea.l 20(sp),a0
    7f78:	                   move.l 12(a0),d1
    7f7c:	                   move.l d1,d1
    7f7e:	                   movea.w d0,a0
    7f80:	                   suba.w d1,a0
    7f82:	                   move.w a0,4(sp)

	CstScaleSprite( single, (WORD) x, (WORD) y,SCREEN);
    7f86:	                   move.w 4(sp),d0
    7f8a:	                   movea.w d0,a1
    7f8c:	                   move.w 6(sp),d0
    7f90:	                   movea.w d0,a0
    7f92:	                   pea 1 <_start+0x1>
    7f96:	                   move.l a1,-(sp)
    7f98:	                   move.l a0,-(sp)
    7f9a:	                   move.l 32(sp),-(sp)
    7f9e:	                   jsr 1cea <CstScaleSprite>
    7fa4:	                   lea 16(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    7fa8:	                   movea.l 24(sp),a0
    7fac:	                   move.l 114(a0),d0
    7fb0:	                   moveq #8,d1
    7fb2:	                   and.l d1,d0
    7fb4:	   /-------------- beq.w 8076 <scaleSprite+0x148>
		if (single->xhot < 0)
    7fb8:	   |               movea.l 20(sp),a0
    7fbc:	   |               move.l 8(a0),d0
    7fc0:	   |  /----------- bpl.s 7ff8 <scaleSprite+0xca>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    7fc2:	   |  |            tst.w 2(sp)
    7fc6:	   |  |     /----- beq.s 7fde <scaleSprite+0xb0>
    7fc8:	   |  |     |      movea.l 20(sp),a0
    7fcc:	   |  |     |      move.l (a0),d0
    7fce:	   |  |     |      move.l d0,d1
    7fd0:	   |  |     |      movea.l 20(sp),a0
    7fd4:	   |  |     |      move.l 8(a0),d0
    7fd8:	   |  |     |      move.l d0,d0
    7fda:	   |  |     |      sub.w d0,d1
    7fdc:	   |  |     |  /-- bra.s 7fec <scaleSprite+0xbe>
    7fde:	   |  |     \--|-> movea.l 20(sp),a0
    7fe2:	   |  |        |   move.l 8(a0),d0
    7fe6:	   |  |        |   move.l d0,d0
    7fe8:	   |  |        |   move.w d0,d1
    7fea:	   |  |        |   addq.w #1,d1
    7fec:	   |  |        \-> movea.w 6(sp),a0
    7ff0:	   |  |            suba.w d1,a0
    7ff2:	   |  |            move.w a0,14(sp)
    7ff6:	   |  |  /-------- bra.s 802c <scaleSprite+0xfe>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    7ff8:	   |  \--|-------> tst.w 2(sp)
    7ffc:	   |     |  /----- beq.s 8018 <scaleSprite+0xea>
    7ffe:	   |     |  |      movea.l 20(sp),a0
    8002:	   |     |  |      move.l (a0),d0
    8004:	   |     |  |      move.l d0,d1
    8006:	   |     |  |      movea.l 20(sp),a0
    800a:	   |     |  |      move.l 8(a0),d0
    800e:	   |     |  |      move.l d0,d0
    8010:	   |     |  |      sub.w d0,d1
    8012:	   |     |  |      move.w d1,d0
    8014:	   |     |  |      subq.w #1,d0
    8016:	   |     |  |  /-- bra.s 8022 <scaleSprite+0xf4>
    8018:	   |     |  \--|-> movea.l 20(sp),a0
    801c:	   |     |     |   move.l 8(a0),d0
    8020:	   |     |     |   move.l d0,d0
    8022:	   |     |     \-> move.w 6(sp),d1
    8026:	   |     |         sub.w d0,d1
    8028:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    802c:	   |     \-------> movea.l 24(sp),a0
    8030:	   |               move.l 20(a0),d0
    8034:	   |               move.l d0,d1
    8036:	   |               movea.l 20(sp),a0
    803a:	   |               move.l 12(a0),d0
    803e:	   |               move.l d0,d0
    8040:	   |               sub.w d0,d1
    8042:	   |               movea.w 4(sp),a0
    8046:	   |               adda.w d1,a0
    8048:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    804c:	   |               movea.l 20(sp),a0
    8050:	   |               move.l (a0),d0
    8052:	   |               move.l d0,d0
    8054:	   |               move.w 14(sp),d1
    8058:	   |               add.w d0,d1
    805a:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    805e:	   |               movea.l 20(sp),a0
    8062:	   |               move.l 4(a0),d0
    8066:	   |               move.l d0,d0
    8068:	   |               movea.w 12(sp),a0
    806c:	   |               adda.w d0,a0
    806e:	   |               move.w a0,8(sp)
    8072:	/--|-------------- bra.w 8148 <scaleSprite+0x21a>
	} else {
		x -= cameraX;
    8076:	|  \-------------> move.l 1aee2 <cameraX>,d0
    807c:	|                  move.l d0,d0
    807e:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8082:	|                  move.l 1aee6 <cameraY>,d0
    8088:	|                  move.l d0,d0
    808a:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    808e:	|                  movea.l 20(sp),a0
    8092:	|                  move.l 8(a0),d0
    8096:	|     /----------- bpl.s 80ce <scaleSprite+0x1a0>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8098:	|     |            tst.w 2(sp)
    809c:	|     |     /----- beq.s 80b4 <scaleSprite+0x186>
    809e:	|     |     |      movea.l 20(sp),a0
    80a2:	|     |     |      move.l (a0),d0
    80a4:	|     |     |      move.l d0,d1
    80a6:	|     |     |      movea.l 20(sp),a0
    80aa:	|     |     |      move.l 8(a0),d0
    80ae:	|     |     |      move.l d0,d0
    80b0:	|     |     |      sub.w d0,d1
    80b2:	|     |     |  /-- bra.s 80c2 <scaleSprite+0x194>
    80b4:	|     |     \--|-> movea.l 20(sp),a0
    80b8:	|     |        |   move.l 8(a0),d0
    80bc:	|     |        |   move.l d0,d0
    80be:	|     |        |   move.w d0,d1
    80c0:	|     |        |   addq.w #1,d1
    80c2:	|     |        \-> move.w 6(sp),d0
    80c6:	|     |            sub.w d1,d0
    80c8:	|     |            move.w d0,14(sp)
    80cc:	|     |  /-------- bra.s 8102 <scaleSprite+0x1d4>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    80ce:	|     \--|-------> tst.w 2(sp)
    80d2:	|        |  /----- beq.s 80ee <scaleSprite+0x1c0>
    80d4:	|        |  |      movea.l 20(sp),a0
    80d8:	|        |  |      move.l (a0),d0
    80da:	|        |  |      move.l d0,d1
    80dc:	|        |  |      movea.l 20(sp),a0
    80e0:	|        |  |      move.l 8(a0),d0
    80e4:	|        |  |      move.l d0,d0
    80e6:	|        |  |      sub.w d0,d1
    80e8:	|        |  |      move.w d1,d0
    80ea:	|        |  |      subq.w #1,d0
    80ec:	|        |  |  /-- bra.s 80f8 <scaleSprite+0x1ca>
    80ee:	|        |  \--|-> movea.l 20(sp),a0
    80f2:	|        |     |   move.l 8(a0),d0
    80f6:	|        |     |   move.l d0,d0
    80f8:	|        |     \-> move.w 6(sp),d1
    80fc:	|        |         sub.w d0,d1
    80fe:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8102:	|        \-------> movea.l 24(sp),a0
    8106:	|                  move.l 20(a0),d0
    810a:	|                  move.l d0,d1
    810c:	|                  movea.l 20(sp),a0
    8110:	|                  move.l 12(a0),d0
    8114:	|                  move.l d0,d0
    8116:	|                  sub.w d0,d1
    8118:	|                  movea.w 4(sp),a0
    811c:	|                  adda.w d1,a0
    811e:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    8122:	|                  movea.l 20(sp),a0
    8126:	|                  move.l (a0),d0
    8128:	|                  move.l d0,d0
    812a:	|                  move.w 14(sp),d1
    812e:	|                  add.w d0,d1
    8130:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    8134:	|                  movea.l 20(sp),a0
    8138:	|                  move.l 4(a0),d0
    813c:	|                  move.l d0,d0
    813e:	|                  movea.w 12(sp),a0
    8142:	|                  adda.w d0,a0
    8144:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8148:	\----------------> move.l 1ad8c <input+0xa>,d1
    814e:	                   moveq #0,d0
    8150:	                   move.w 14(sp),d0
    8154:	                   cmp.l d1,d0
    8156:	            /----- bgt.s 818c <scaleSprite+0x25e>
    8158:	            |      move.l 1ad8c <input+0xa>,d1
    815e:	            |      moveq #0,d0
    8160:	            |      move.w 10(sp),d0
    8164:	            |      cmp.l d1,d0
    8166:	            +----- blt.s 818c <scaleSprite+0x25e>
    8168:	            |      move.l 1ad90 <input+0xe>,d1
    816e:	            |      moveq #0,d0
    8170:	            |      move.w 12(sp),d0
    8174:	            |      cmp.l d1,d0
    8176:	            +----- bgt.s 818c <scaleSprite+0x25e>
    8178:	            |      move.l 1ad90 <input+0xe>,d1
    817e:	            |      moveq #0,d0
    8180:	            |      move.w 8(sp),d0
    8184:	            |      cmp.l d1,d0
    8186:	            +----- blt.s 818c <scaleSprite+0x25e>
		return TRUE;
    8188:	            |      moveq #1,d0
    818a:	            |  /-- bra.s 818e <scaleSprite+0x260>
	}
	return FALSE;
    818c:	            \--|-> clr.w d0
    818e:	               \-> lea 16(sp),sp
    8192:	                   rts

00008194 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8194:	    move.l 4(sp),d0
    8198:	/-- bpl.s 819c <TF_abs+0x8>
    819a:	|   neg.l d0
}
    819c:	\-> rts

0000819e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    819e:	             lea -28(sp),sp
    81a2:	             move.l a6,-(sp)
    81a4:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    81a6:	             move.l #128,28(sp)
    81ae:	             clr.l 24(sp)
    81b2:	             move.l 1add0 <SysBase>,d0
    81b8:	             movea.l d0,a6
    81ba:	             move.l 28(sp),d0
    81be:	             move.l 24(sp),d1
    81c2:	             jsr -684(a6)
    81c6:	             move.l d0,20(sp)
    81ca:	             move.l 20(sp),d0
    81ce:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    81d2:	         /-- bne.s 81da <addPerson+0x3c>
    81d4:	         |   clr.w d0
    81d6:	/--------|-- bra.w 840a <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    81da:	|        \-> move.l 48(sp),-(sp)
    81de:	|            jsr c4de <loadObjectType>
    81e4:	|            addq.l #4,sp
    81e6:	|            movea.l 16(sp),a0
    81ea:	|            move.l d0,110(a0)
    newPerson->scale = 1;
    81ee:	|            movea.l 16(sp),a0
    81f2:	|            move.l #1065353216,28(a0)
    newPerson->extra = 0;
    81fa:	|            movea.l 16(sp),a0
    81fe:	|            clr.l 114(a0)
    newPerson->continueAfterWalking = NULL;
    8202:	|            movea.l 16(sp),a0
    8206:	|            clr.l 64(a0)
    moveAndScale(newPerson, x, y);
    820a:	|            move.l 44(sp),-(sp)
    820e:	|            jsr 15bc0 <__floatsisf>
    8214:	|            addq.l #4,sp
    8216:	|            move.l d0,d2
    8218:	|            move.l 40(sp),-(sp)
    821c:	|            jsr 15bc0 <__floatsisf>
    8222:	|            addq.l #4,sp
    8224:	|            move.l d2,-(sp)
    8226:	|            move.l d0,-(sp)
    8228:	|            move.l 24(sp),-(sp)
    822c:	|            jsr 9c5c <moveAndScale>
    8232:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8236:	|            movea.l 16(sp),a0
    823a:	|            clr.l 80(a0)
    newPerson->walkToX = x;
    823e:	|            movea.l 16(sp),a0
    8242:	|            move.l 40(sp),36(a0)
    newPerson->walkToY = y;
    8248:	|            movea.l 16(sp),a0
    824c:	|            move.l 44(sp),40(a0)
    newPerson->walking = FALSE;
    8252:	|            movea.l 16(sp),a0
    8256:	|            clr.w 60(a0)
    newPerson->spinning = FALSE;
    825a:	|            movea.l 16(sp),a0
    825e:	|            clr.w 62(a0)
    newPerson->show = TRUE;
    8262:	|            movea.l 16(sp),a0
    8266:	|            move.w #1,100(a0)
    newPerson->direction = 0;
    826c:	|            movea.l 16(sp),a0
    8270:	|            clr.l 102(a0)
    newPerson->angle = 180;
    8274:	|            movea.l 16(sp),a0
    8278:	|            move.l #180,88(a0)
    newPerson->wantAngle = 180;
    8280:	|            movea.l 16(sp),a0
    8284:	|            move.l #180,92(a0)
    newPerson->angleOffset = 0;
    828c:	|            movea.l 16(sp),a0
    8290:	|            clr.l 96(a0)
    newPerson->floaty = 0;
    8294:	|            movea.l 16(sp),a0
    8298:	|            clr.l 20(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    829c:	|            movea.l 16(sp),a0
    82a0:	|            movea.l 110(a0),a0
    82a4:	|            move.l 24(a0),d0
    82a8:	|            movea.l 16(sp),a0
    82ac:	|            move.l d0,24(a0)
    newPerson->myAnim = NULL;
    82b0:	|            movea.l 16(sp),a0
    82b4:	|            clr.l 68(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    82b8:	|            movea.l 16(sp),a0
    82bc:	|            movea.l 110(a0),a0
    82c0:	|            move.l 32(a0),d0
    82c4:	|            movea.l 16(sp),a0
    82c8:	|            move.l d0,118(a0)
    newPerson->r = 0;
    82cc:	|            movea.l 16(sp),a0
    82d0:	|            clr.b 122(a0)
    newPerson->g = 0;
    82d4:	|            movea.l 16(sp),a0
    82d8:	|            clr.b 123(a0)
    newPerson->b = 0;
    82dc:	|            movea.l 16(sp),a0
    82e0:	|            clr.b 124(a0)
    newPerson->colourmix = 0;
    82e4:	|            movea.l 16(sp),a0
    82e8:	|            clr.b 125(a0)
    newPerson->transparency = 0;
    82ec:	|            movea.l 16(sp),a0
    82f0:	|            clr.b 126(a0)
    newPerson->myPersona = p;
    82f4:	|            movea.l 16(sp),a0
    82f8:	|            move.l 52(sp),76(a0)

    setFrames(newPerson, ANI_STAND);
    82fe:	|            clr.l -(sp)
    8300:	|            move.l 20(sp),-(sp)
    8304:	|            jsr 6fb2 <setFrames>
    830a:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    830c:	|            movea.l 52(sp),a0
    8310:	|            movea.l (a0),a0
    8312:	|            movea.l (a0),a0
    8314:	|            movea.l 4(a0),a0
    8318:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    831c:	|     /----- bpl.s 8326 <addPerson+0x188>
    831e:	|     |      move.l 12(sp),d0
    8322:	|     |      neg.l d0
    8324:	|     |  /-- bra.s 8328 <addPerson+0x18a>
    8326:	|     \--|-> moveq #1,d0
    8328:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    832c:	|            movea.l 52(sp),a0
    8330:	|            movea.l (a0),a0
    8332:	|            movea.l (a0),a0
    8334:	|            movea.l (a0),a0
    8336:	|            move.l 8(a0),d0
    833a:	|            cmp.l 8(sp),d0
    833e:	|     /----- bgt.s 8370 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8340:	|     |      tst.l 12(sp)
    8344:	|     |  /-- bge.s 8352 <addPerson+0x1b4>
            newPerson->height = 5;
    8346:	|     |  |   movea.l 16(sp),a0
    834a:	|     |  |   moveq #5,d0
    834c:	|     |  |   move.l d0,16(a0)
    8350:	|  /--|--|-- bra.s 839c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8352:	|  |  |  \-> movea.l 52(sp),a0
    8356:	|  |  |      movea.l (a0),a0
    8358:	|  |  |      movea.l (a0),a0
    835a:	|  |  |      movea.l (a0),a0
    835c:	|  |  |      movea.l 16(a0),a0
    8360:	|  |  |      move.l 12(a0),d0
    8364:	|  |  |      addq.l #5,d0
    8366:	|  |  |      movea.l 16(sp),a0
    836a:	|  |  |      move.l d0,16(a0)
    836e:	|  +--|----- bra.s 839c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8370:	|  |  \----> movea.l 52(sp),a0
    8374:	|  |         movea.l (a0),a0
    8376:	|  |         movea.l (a0),a0
    8378:	|  |         movea.l (a0),a0
    837a:	|  |         movea.l 16(a0),a0
    837e:	|  |         move.l 8(sp),d1
    8382:	|  |         move.l d1,d0
    8384:	|  |         lsl.l #3,d0
    8386:	|  |         sub.l d1,d0
    8388:	|  |         add.l d0,d0
    838a:	|  |         add.l d0,d0
    838c:	|  |         adda.l d0,a0
    838e:	|  |         move.l 12(a0),d0
    8392:	|  |         addq.l #5,d0
    8394:	|  |         movea.l 16(sp),a0
    8398:	|  |         move.l d0,16(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    839c:	|  \-------> move.l #110216,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    83a4:	|        /-- bra.s 83b4 <addPerson+0x216>
        changethat = &((*changethat)->next);
    83a6:	|     /--|-> movea.l 32(sp),a0
    83aa:	|     |  |   move.l (a0),d0
    83ac:	|     |  |   moveq #32,d1
    83ae:	|     |  |   add.l d0,d1
    83b0:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    83b4:	|     |  \-> movea.l 32(sp),a0
    83b8:	|     |      move.l (a0),d0
    83ba:	|     |  /-- beq.s 83e2 <addPerson+0x244>
    83bc:	|     |  |   movea.l 32(sp),a0
    83c0:	|     |  |   movea.l (a0),a0
    83c2:	|     |  |   move.l 4(a0),d2
    83c6:	|     |  |   move.l 44(sp),-(sp)
    83ca:	|     |  |   jsr 15bc0 <__floatsisf>
    83d0:	|     |  |   addq.l #4,sp
    83d2:	|     |  |   move.l d0,-(sp)
    83d4:	|     |  |   move.l d2,-(sp)
    83d6:	|     |  |   jsr 15de6 <__ltsf2>
    83dc:	|     |  |   addq.l #8,sp
    83de:	|     |  |   tst.l d0
    83e0:	|     \--|-- blt.s 83a6 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    83e2:	|        \-> movea.l 32(sp),a0
    83e6:	|            move.l (a0),d0
    83e8:	|            movea.l 16(sp),a0
    83ec:	|            move.l d0,32(a0)
    (*changethat) = newPerson;
    83f0:	|            movea.l 32(sp),a0
    83f4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    83f8:	|            movea.l 16(sp),a0
    83fc:	|            move.l 110(a0),d0
    8400:	|            sne d0
    8402:	|            neg.b d0
    8404:	|            move.b d0,d0
    8406:	|            andi.w #255,d0
}
    840a:	\----------> move.l (sp)+,d2
    840c:	             movea.l (sp)+,a6
    840e:	             lea 28(sp),sp
    8412:	             rts

00008414 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    8414:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8416:	       move.l 8(sp),-(sp)
    841a:	       jsr 9514 <findPerson>
    8420:	       addq.l #4,sp
    8422:	       move.l d0,(sp)
    if (moveMe) {
    8424:	/----- beq.s 8458 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    8426:	|      movea.l (sp),a0
    8428:	|      move.l 64(a0),d0
    842c:	|  /-- beq.s 843e <animatePerson+0x2a>
    842e:	|  |   movea.l (sp),a0
    8430:	|  |   move.l 64(a0),d0
    8434:	|  |   move.l d0,-(sp)
    8436:	|  |   jsr 35b6 <abortFunction>
    843c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    843e:	|  \-> movea.l (sp),a0
    8440:	|      clr.l 64(a0)
        moveMe -> walking = FALSE;
    8444:	|      movea.l (sp),a0
    8446:	|      clr.w 60(a0)
        moveMe -> spinning = FALSE;
    844a:	|      movea.l (sp),a0
    844c:	|      clr.w 62(a0)
        moveMe -> myAnim = fram;
    8450:	|      movea.l (sp),a0
    8452:	|      move.l 12(sp),68(a0)
    }
}
    8458:	\----> nop
    845a:	       addq.l #4,sp
    845c:	       rts

0000845e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    845e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8460:	       move.l 8(sp),-(sp)
    8464:	       jsr 9514 <findPerson>
    846a:	       addq.l #4,sp
    846c:	       move.l d0,(sp)
    if (moveMe) {
    846e:	/----- beq.s 84b0 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8470:	|      movea.l (sp),a0
    8472:	|      clr.w 62(a0)
        moveMe -> myPersona = per;
    8476:	|      movea.l (sp),a0
    8478:	|      move.l 12(sp),76(a0)
        rethinkAngle(moveMe);
    847e:	|      move.l (sp),-(sp)
    8480:	|      jsr 9dea <rethinkAngle>
    8486:	|      addq.l #4,sp
        if (moveMe->walking) {
    8488:	|      movea.l (sp),a0
    848a:	|      move.w 60(a0),d0
    848e:	|  /-- beq.s 84a2 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8490:	|  |   pea 1 <_start+0x1>
    8494:	|  |   move.l 4(sp),-(sp)
    8498:	|  |   jsr 6fb2 <setFrames>
    849e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    84a0:	+--|-- bra.s 84b0 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    84a2:	|  \-> clr.l -(sp)
    84a4:	|      move.l 4(sp),-(sp)
    84a8:	|      jsr 6fb2 <setFrames>
    84ae:	|      addq.l #8,sp
}
    84b0:	\----> nop
    84b2:	       addq.l #4,sp
    84b4:	       rts

000084b6 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    84b6:	             lea -36(sp),sp
    84ba:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    84bc:	             movea.l 44(sp),a0
    84c0:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    84c6:	             moveq #12,d0
    84c8:	             move.l d0,28(sp)
    84cc:	             clr.l 24(sp)
    84d0:	             move.l 1add0 <SysBase>,d0
    84d6:	             movea.l d0,a6
    84d8:	             move.l 28(sp),d0
    84dc:	             move.l 24(sp),d1
    84e0:	             jsr -684(a6)
    84e4:	             move.l d0,20(sp)
    84e8:	             move.l 20(sp),d0
    84ec:	             move.l d0,16(sp)
	if (!(newAnim)) {
    84f0:	         /-- bne.s 8506 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    84f2:	         |   pea 1760f <PutChar+0x13b7>
    84f8:	         |   jsr 15784 <KPrintF>
    84fe:	         |   addq.l #4,sp
		return NULL;
    8500:	         |   moveq #0,d0
    8502:	/--------|-- bra.w 8658 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    8506:	|        \-> movea.l 44(sp),a0
    850a:	|            move.l (a0),d0
    850c:	|            movea.l 16(sp),a0
    8510:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    8512:	|            movea.l 16(sp),a0
    8516:	|            movea.l (a0),a0
    8518:	|            move.l 4(a0),d0
    851c:	|            addq.l #1,d0
    851e:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    8522:	|            movea.l 16(sp),a0
    8526:	|            move.l 32(sp),8(a0)

	if (num) {
    852c:	|  /-------- beq.w 864c <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    8530:	|  |         move.l 32(sp),d1
    8534:	|  |         move.l d1,d0
    8536:	|  |         add.l d0,d0
    8538:	|  |         add.l d1,d0
    853a:	|  |         add.l d0,d0
    853c:	|  |         add.l d0,d0
    853e:	|  |         move.l d0,12(sp)
    8542:	|  |         clr.l 8(sp)
    8546:	|  |         move.l 1add0 <SysBase>,d0
    854c:	|  |         movea.l d0,a6
    854e:	|  |         move.l 12(sp),d0
    8552:	|  |         move.l 8(sp),d1
    8556:	|  |         jsr -684(a6)
    855a:	|  |         move.l d0,4(sp)
    855e:	|  |         move.l 4(sp),d0
    8562:	|  |         movea.l 16(sp),a0
    8566:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    856a:	|  |         movea.l 16(sp),a0
    856e:	|  |         move.l 4(a0),d0
    8572:	|  |     /-- bne.s 8588 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    8574:	|  |     |   pea 1760f <PutChar+0x13b7>
    857a:	|  |     |   jsr 15784 <KPrintF>
    8580:	|  |     |   addq.l #4,sp
			return NULL;
    8582:	|  |     |   moveq #0,d0
    8584:	+--|-----|-- bra.w 8658 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    8588:	|  |     \-> clr.l 36(sp)
    858c:	|  |     /-- bra.w 863e <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8590:	|  |  /--|-> movea.l 44(sp),a0
    8594:	|  |  |  |   movea.l 4(a0),a0
    8598:	|  |  |  |   move.l 36(sp),d1
    859c:	|  |  |  |   move.l d1,d0
    859e:	|  |  |  |   add.l d0,d0
    85a0:	|  |  |  |   add.l d1,d0
    85a2:	|  |  |  |   add.l d0,d0
    85a4:	|  |  |  |   add.l d0,d0
    85a6:	|  |  |  |   lea (0,a0,d0.l),a1
    85aa:	|  |  |  |   movea.l 16(sp),a0
    85ae:	|  |  |  |   movea.l 4(a0),a0
    85b2:	|  |  |  |   move.l 36(sp),d1
    85b6:	|  |  |  |   move.l d1,d0
    85b8:	|  |  |  |   add.l d0,d0
    85ba:	|  |  |  |   add.l d1,d0
    85bc:	|  |  |  |   add.l d0,d0
    85be:	|  |  |  |   add.l d0,d0
    85c0:	|  |  |  |   adda.l d0,a0
    85c2:	|  |  |  |   move.l (a1),d0
    85c4:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    85c6:	|  |  |  |   movea.l 44(sp),a0
    85ca:	|  |  |  |   movea.l 4(a0),a0
    85ce:	|  |  |  |   move.l 36(sp),d1
    85d2:	|  |  |  |   move.l d1,d0
    85d4:	|  |  |  |   add.l d0,d0
    85d6:	|  |  |  |   add.l d1,d0
    85d8:	|  |  |  |   add.l d0,d0
    85da:	|  |  |  |   add.l d0,d0
    85dc:	|  |  |  |   lea (0,a0,d0.l),a1
    85e0:	|  |  |  |   movea.l 16(sp),a0
    85e4:	|  |  |  |   movea.l 4(a0),a0
    85e8:	|  |  |  |   move.l 36(sp),d1
    85ec:	|  |  |  |   move.l d1,d0
    85ee:	|  |  |  |   add.l d0,d0
    85f0:	|  |  |  |   add.l d1,d0
    85f2:	|  |  |  |   add.l d0,d0
    85f4:	|  |  |  |   add.l d0,d0
    85f6:	|  |  |  |   adda.l d0,a0
    85f8:	|  |  |  |   move.l 4(a1),d0
    85fc:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    8600:	|  |  |  |   movea.l 44(sp),a0
    8604:	|  |  |  |   movea.l 4(a0),a0
    8608:	|  |  |  |   move.l 36(sp),d1
    860c:	|  |  |  |   move.l d1,d0
    860e:	|  |  |  |   add.l d0,d0
    8610:	|  |  |  |   add.l d1,d0
    8612:	|  |  |  |   add.l d0,d0
    8614:	|  |  |  |   add.l d0,d0
    8616:	|  |  |  |   lea (0,a0,d0.l),a1
    861a:	|  |  |  |   movea.l 16(sp),a0
    861e:	|  |  |  |   movea.l 4(a0),a0
    8622:	|  |  |  |   move.l 36(sp),d1
    8626:	|  |  |  |   move.l d1,d0
    8628:	|  |  |  |   add.l d0,d0
    862a:	|  |  |  |   add.l d1,d0
    862c:	|  |  |  |   add.l d0,d0
    862e:	|  |  |  |   add.l d0,d0
    8630:	|  |  |  |   adda.l d0,a0
    8632:	|  |  |  |   move.l 8(a1),d0
    8636:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    863a:	|  |  |  |   addq.l #1,36(sp)
    863e:	|  |  |  \-> move.l 36(sp),d0
    8642:	|  |  |      cmp.l 32(sp),d0
    8646:	|  |  \----- blt.w 8590 <copyAnim+0xda>
    864a:	|  |     /-- bra.s 8654 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    864c:	|  \-----|-> movea.l 16(sp),a0
    8650:	|        |   clr.l 4(a0)
	}

	return newAnim;
    8654:	|        \-> move.l 16(sp),d0
}
    8658:	\----------> movea.l (sp)+,a6
    865a:	             lea 36(sp),sp
    865e:	             rts

00008660 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    8660:	                lea -44(sp),sp
    8664:	                move.l a6,-(sp)
    8666:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    8668:	                moveq #12,d0
    866a:	                move.l d0,40(sp)
    866e:	                clr.l 36(sp)
    8672:	                move.l 1add0 <SysBase>,d0
    8678:	                movea.l d0,a6
    867a:	                move.l 40(sp),d0
    867e:	                move.l 36(sp),d1
    8682:	                jsr -684(a6)
    8686:	                move.l d0,32(sp)
    868a:	                move.l 32(sp),d0
    868e:	                move.l d0,28(sp)
	if( !newP) {
    8692:	            /-- bne.s 86a8 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8694:	            |   pea 17630 <PutChar+0x13d8>
    869a:	            |   jsr 15784 <KPrintF>
    86a0:	            |   addq.l #4,sp
		return NULL;
    86a2:	            |   moveq #0,d0
    86a4:	/-----------|-- bra.w 8878 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    86a8:	|           \-> movea.l 28(sp),a0
    86ac:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    86b2:	|               move.l 56(sp),d1
    86b6:	|               move.l d1,d0
    86b8:	|               add.l d0,d0
    86ba:	|               add.l d1,d0
    86bc:	|               add.l d0,d0
    86be:	|               add.l d0,d0
    86c0:	|               move.l d0,24(sp)
    86c4:	|               clr.l 20(sp)
    86c8:	|               move.l 1add0 <SysBase>,d0
    86ce:	|               movea.l d0,a6
    86d0:	|               move.l 24(sp),d0
    86d4:	|               move.l 20(sp),d1
    86d8:	|               jsr -684(a6)
    86dc:	|               move.l d0,16(sp)
    86e0:	|               move.l 16(sp),d0
    86e4:	|               movea.l 28(sp),a0
    86e8:	|               move.l d0,4(a0)
	if( !newP->frames) {
    86ec:	|               movea.l 28(sp),a0
    86f0:	|               move.l 4(a0),d0
    86f4:	|           /-- bne.s 870a <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    86f6:	|           |   pea 17630 <PutChar+0x13d8>
    86fc:	|           |   jsr 15784 <KPrintF>
    8702:	|           |   addq.l #4,sp
		return NULL;
    8704:	|           |   moveq #0,d0
    8706:	+-----------|-- bra.w 8878 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    870a:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    8710:	|               movea.l 60(sp),a0
    8714:	|               move.l (a0),44(sp)
	while (a) {
    8718:	|     /-------- bra.w 886c <createPersonaAnim+0x20c>
		a --;
    871c:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    8720:	|  |  |         movea.l 28(sp),a0
    8724:	|  |  |         movea.l 4(a0),a0
    8728:	|  |  |         move.l 48(sp),d1
    872c:	|  |  |         move.l d1,d0
    872e:	|  |  |         add.l d0,d0
    8730:	|  |  |         add.l d1,d0
    8732:	|  |  |         add.l d0,d0
    8734:	|  |  |         add.l d0,d0
    8736:	|  |  |         adda.l d0,a0
    8738:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    873c:	|  |  |         movea.l 44(sp),a0
    8740:	|  |  |         move.l (a0),d0
    8742:	|  |  |         moveq #5,d1
    8744:	|  |  |         cmp.l d0,d1
    8746:	|  |  |     /-- bne.s 8772 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    8748:	|  |  |     |   movea.l 28(sp),a0
    874c:	|  |  |     |   movea.l 4(a0),a0
    8750:	|  |  |     |   move.l 48(sp),d1
    8754:	|  |  |     |   move.l d1,d0
    8756:	|  |  |     |   add.l d0,d0
    8758:	|  |  |     |   add.l d1,d0
    875a:	|  |  |     |   add.l d0,d0
    875c:	|  |  |     |   add.l d0,d0
    875e:	|  |  |     |   lea (0,a0,d0.l),a1
    8762:	|  |  |     |   movea.l 44(sp),a0
    8766:	|  |  |     |   move.l 4(a0),d0
    876a:	|  |  |     |   move.l d0,8(a1)
    876e:	|  |  |  /--|-- bra.w 881a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    8772:	|  |  |  |  \-> movea.l 44(sp),a0
    8776:	|  |  |  |      move.l (a0),d0
    8778:	|  |  |  |      moveq #2,d1
    877a:	|  |  |  |      cmp.l d0,d1
    877c:	|  |  |  |  /-- bne.s 87a8 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    877e:	|  |  |  |  |   movea.l 44(sp),a0
    8782:	|  |  |  |  |   move.l 4(a0),d2
    8786:	|  |  |  |  |   movea.l 28(sp),a0
    878a:	|  |  |  |  |   movea.l 4(a0),a0
    878e:	|  |  |  |  |   move.l 48(sp),d1
    8792:	|  |  |  |  |   move.l d1,d0
    8794:	|  |  |  |  |   add.l d0,d0
    8796:	|  |  |  |  |   add.l d1,d0
    8798:	|  |  |  |  |   add.l d0,d0
    879a:	|  |  |  |  |   add.l d0,d0
    879c:	|  |  |  |  |   adda.l d0,a0
    879e:	|  |  |  |  |   move.l d2,d0
    87a0:	|  |  |  |  |   neg.l d0
    87a2:	|  |  |  |  |   move.l d0,8(a0)
    87a6:	|  |  |  +--|-- bra.s 881a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    87a8:	|  |  |  |  \-> movea.l 44(sp),a0
    87ac:	|  |  |  |      move.l (a0),d0
    87ae:	|  |  |  |      moveq #6,d1
    87b0:	|  |  |  |      cmp.l d0,d1
    87b2:	|  |  |  |  /-- bne.s 87fa <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    87b4:	|  |  |  |  |   movea.l 44(sp),a0
    87b8:	|  |  |  |  |   movea.l 4(a0),a0
    87bc:	|  |  |  |  |   move.l (a0),d0
    87be:	|  |  |  |  |   move.l d0,-(sp)
    87c0:	|  |  |  |  |   pea 1 <_start+0x1>
    87c4:	|  |  |  |  |   lea 20(sp),a0
    87c8:	|  |  |  |  |   move.l a0,-(sp)
    87ca:	|  |  |  |  |   jsr 135b8 <getValueType>
    87d0:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    87d4:	|  |  |  |  |   movea.l 44(sp),a0
    87d8:	|  |  |  |  |   movea.l 4(a0),a0
    87dc:	|  |  |  |  |   movea.l (a0),a0
    87de:	|  |  |  |  |   move.l 8(a0),d0
    87e2:	|  |  |  |  |   move.l d0,-(sp)
    87e4:	|  |  |  |  |   pea 1 <_start+0x1>
    87e8:	|  |  |  |  |   lea 16(sp),a0
    87ec:	|  |  |  |  |   move.l a0,-(sp)
    87ee:	|  |  |  |  |   jsr 135b8 <getValueType>
    87f4:	|  |  |  |  |   lea 12(sp),sp
    87f8:	|  |  |  +--|-- bra.s 881a <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    87fa:	|  |  |  |  \-> move.l 44(sp),d0
    87fe:	|  |  |  |      move.l d0,-(sp)
    8800:	|  |  |  |      pea 1 <_start+0x1>
    8804:	|  |  |  |      lea 20(sp),a0
    8808:	|  |  |  |      move.l a0,-(sp)
    880a:	|  |  |  |      jsr 135b8 <getValueType>
    8810:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    8814:	|  |  |  |      moveq #1,d0
    8816:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    881a:	|  |  |  \----> move.l 60(sp),-(sp)
    881e:	|  |  |         jsr 13f3c <trimStack>
    8824:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    8826:	|  |  |         movea.l 28(sp),a0
    882a:	|  |  |         movea.l 4(a0),a0
    882e:	|  |  |         move.l 48(sp),d1
    8832:	|  |  |         move.l d1,d0
    8834:	|  |  |         add.l d0,d0
    8836:	|  |  |         add.l d1,d0
    8838:	|  |  |         add.l d0,d0
    883a:	|  |  |         add.l d0,d0
    883c:	|  |  |         adda.l d0,a0
    883e:	|  |  |         move.l 12(sp),d0
    8842:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    8844:	|  |  |         movea.l 28(sp),a0
    8848:	|  |  |         movea.l 4(a0),a0
    884c:	|  |  |         move.l 48(sp),d1
    8850:	|  |  |         move.l d1,d0
    8852:	|  |  |         add.l d0,d0
    8854:	|  |  |         add.l d1,d0
    8856:	|  |  |         add.l d0,d0
    8858:	|  |  |         add.l d0,d0
    885a:	|  |  |         adda.l d0,a0
    885c:	|  |  |         move.l 8(sp),d0
    8860:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    8864:	|  |  |         movea.l 60(sp),a0
    8868:	|  |  |         move.l (a0),44(sp)
	while (a) {
    886c:	|  |  \-------> tst.l 48(sp)
    8870:	|  \----------- bne.w 871c <createPersonaAnim+0xbc>
	}

	return newP;
    8874:	|               move.l 28(sp),d0
}
    8878:	\-------------> move.l (sp)+,d2
    887a:	                movea.l (sp)+,a6
    887c:	                lea 44(sp),sp
    8880:	                rts

00008882 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    8882:	       lea -12(sp),sp
    8886:	       move.l a6,-(sp)

	if(orig->theSprites)
    8888:	       movea.l 20(sp),a0
    888c:	       move.l (a0),d0
    888e:	   /-- beq.s 88b8 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    8890:	   |   movea.l 20(sp),a0
    8894:	   |   movea.l (a0),a0
    8896:	   |   move.l 4(a0),d0
    889a:	   |   subq.l #1,d0
    889c:	   |   move.l d0,4(a0)
    88a0:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    88a6:	   +-- bne.s 88b8 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    88a8:	   |   movea.l 20(sp),a0
    88ac:	   |   move.l (a0),d0
    88ae:	   |   move.l d0,-(sp)
    88b0:	   |   jsr 7ab8 <forgetSpriteBank>
    88b6:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    88b8:	   \-> tst.l 20(sp)
    88bc:	/----- beq.s 88fc <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    88be:	|      movea.l 20(sp),a0
    88c2:	|      move.l 8(a0),d0
    88c6:	|  /-- beq.s 88e2 <deleteAnim+0x60>
			FreeVec( orig->frames);
    88c8:	|  |   movea.l 20(sp),a0
    88cc:	|  |   move.l 4(a0),8(sp)
    88d2:	|  |   move.l 1add0 <SysBase>,d0
    88d8:	|  |   movea.l d0,a6
    88da:	|  |   movea.l 8(sp),a1
    88de:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    88e2:	|  \-> move.l 20(sp),4(sp)
    88e8:	|      move.l 1add0 <SysBase>,d0
    88ee:	|      movea.l d0,a6
    88f0:	|      movea.l 4(sp),a1
    88f4:	|      jsr -690(a6)
		orig = NULL;
    88f8:	|      clr.l 20(sp)
	}	
	
}
    88fc:	\----> nop
    88fe:	       movea.l (sp)+,a6
    8900:	       lea 12(sp),sp
    8904:	       rts

00008906 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    8906:	          lea -124(sp),sp
    890a:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    890e:	          movea.l 152(sp),a0
    8912:	          move.l 52(a0),d1
    8916:	          movea.l 152(sp),a0
    891a:	          move.l 56(a0),d0
    891e:	          cmp.l d1,d0
    8920:	      /-- bne.s 8950 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    8922:	      |   movea.l 152(sp),a0
    8926:	      |   moveq #-1,d0
    8928:	      |   move.l d0,52(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    892c:	      |   movea.l 152(sp),a0
    8930:	      |   move.l 36(a0),d0
    8934:	      |   movea.l 152(sp),a0
    8938:	      |   move.l d0,44(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    893c:	      |   movea.l 152(sp),a0
    8940:	      |   move.l 40(a0),d0
    8944:	      |   movea.l 152(sp),a0
    8948:	      |   move.l d0,48(a0)
    894c:	   /--|-- bra.w 8eb6 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    8950:	   |  \-> movea.l 1af38 <currentFloor>,a0
    8956:	   |      move.l 16(a0),d1
    895a:	   |      movea.l 152(sp),a0
    895e:	   |      move.l 52(a0),d0
    8962:	   |      add.l d0,d0
    8964:	   |      add.l d0,d0
    8966:	   |      movea.l d1,a0
    8968:	   |      adda.l d0,a0
    896a:	   |      move.l (a0),d1
    896c:	   |      movea.l 152(sp),a0
    8970:	   |      move.l 56(a0),d0
    8974:	   |      add.l d0,d0
    8976:	   |      add.l d0,d0
    8978:	   |      movea.l d1,a0
    897a:	   |      adda.l d0,a0
    897c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    8980:	   |      moveq #-1,d0
    8982:	   |      cmp.l 144(sp),d0
    8986:	   |  /-- bne.s 898e <doBorderStuff+0x88>
    8988:	   |  |   clr.w d0
    898a:	/--|--|-- bra.w 8fb6 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    898e:	|  |  \-> movea.l 1af38 <currentFloor>,a0
    8994:	|  |      move.l 12(a0),d1
    8998:	|  |      move.l 144(sp),d0
    899c:	|  |      lsl.l #3,d0
    899e:	|  |      add.l d0,d1
    89a0:	|  |      movea.l 1af38 <currentFloor>,a0
    89a6:	|  |      movea.l 12(a0),a1
    89aa:	|  |      movea.l 152(sp),a0
    89ae:	|  |      move.l 52(a0),d0
    89b2:	|  |      lsl.l #3,d0
    89b4:	|  |      add.l a1,d0
    89b6:	|  |      lea 40(sp),a0
    89ba:	|  |      move.l a0,-(sp)
    89bc:	|  |      lea 48(sp),a0
    89c0:	|  |      move.l a0,-(sp)
    89c2:	|  |      move.l d1,-(sp)
    89c4:	|  |      move.l d0,-(sp)
    89c6:	|  |      jsr 14a06 <getMatchingCorners>
    89cc:	|  |      lea 16(sp),sp
    89d0:	|  |      tst.w d0
    89d2:	|  |  /-- bne.s 89e8 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    89d4:	|  |  |   pea 1765a <PutChar+0x1402>
    89da:	|  |  |   jsr 15784 <KPrintF>
    89e0:	|  |  |   addq.l #4,sp
            return FALSE;
    89e2:	|  |  |   clr.w d0
    89e4:	+--|--|-- bra.w 8fb6 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    89e8:	|  |  \-> movea.l 152(sp),a0
    89ec:	|  |      move.l 144(sp),52(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    89f2:	|  |      movea.l 152(sp),a0
    89f6:	|  |      move.l (a0),d0
    89f8:	|  |      move.l d0,-(sp)
    89fa:	|  |      jsr 15b58 <__fixsfsi>
    8a00:	|  |      addq.l #4,sp
    8a02:	|  |      move.l d0,140(sp)
    8a06:	|  |      movea.l 152(sp),a0
    8a0a:	|  |      move.l 4(a0),d0
    8a0e:	|  |      move.l d0,-(sp)
    8a10:	|  |      jsr 15b58 <__fixsfsi>
    8a16:	|  |      addq.l #4,sp
    8a18:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8a1c:	|  |      movea.l 152(sp),a0
    8a20:	|  |      move.l 36(a0),132(sp)
    8a26:	|  |      movea.l 152(sp),a0
    8a2a:	|  |      move.l 40(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8a30:	|  |      movea.l 1af38 <currentFloor>,a0
    8a36:	|  |      move.l 4(a0),d1
    8a3a:	|  |      move.l 44(sp),d0
    8a3e:	|  |      lsl.l #3,d0
    8a40:	|  |      movea.l d1,a0
    8a42:	|  |      adda.l d0,a0
    8a44:	|  |      move.l (a0),124(sp)
    8a48:	|  |      movea.l 1af38 <currentFloor>,a0
    8a4e:	|  |      move.l 4(a0),d1
    8a52:	|  |      move.l 44(sp),d0
    8a56:	|  |      lsl.l #3,d0
    8a58:	|  |      movea.l d1,a0
    8a5a:	|  |      adda.l d0,a0
    8a5c:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8a62:	|  |      movea.l 1af38 <currentFloor>,a0
    8a68:	|  |      move.l 4(a0),d1
    8a6c:	|  |      move.l 40(sp),d0
    8a70:	|  |      lsl.l #3,d0
    8a72:	|  |      movea.l d1,a0
    8a74:	|  |      adda.l d0,a0
    8a76:	|  |      move.l (a0),116(sp)
    8a7a:	|  |      movea.l 1af38 <currentFloor>,a0
    8a80:	|  |      move.l 4(a0),d1
    8a84:	|  |      move.l 40(sp),d0
    8a88:	|  |      lsl.l #3,d0
    8a8a:	|  |      movea.l d1,a0
    8a8c:	|  |      adda.l d0,a0
    8a8e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8a94:	|  |      move.l 140(sp),d0
    8a98:	|  |      sub.l 132(sp),d0
    8a9c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8aa0:	|  |      move.l 136(sp),d0
    8aa4:	|  |      sub.l 128(sp),d0
    8aa8:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8aac:	|  |      move.l 116(sp),d0
    8ab0:	|  |      sub.l 124(sp),d0
    8ab4:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8ab8:	|  |      move.l 112(sp),d0
    8abc:	|  |      sub.l 120(sp),d0
    8ac0:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8ac4:	|  |      move.l 124(sp),d0
    8ac8:	|  |      sub.l 140(sp),d0
    8acc:	|  |      move.l 104(sp),-(sp)
    8ad0:	|  |      move.l d0,-(sp)
    8ad2:	|  |      jsr 16142 <__mulsi3>
    8ad8:	|  |      addq.l #8,sp
    8ada:	|  |      move.l d0,d2
    8adc:	|  |      move.l 120(sp),d0
    8ae0:	|  |      sub.l 136(sp),d0
    8ae4:	|  |      move.l 108(sp),-(sp)
    8ae8:	|  |      move.l d0,-(sp)
    8aea:	|  |      jsr 16142 <__mulsi3>
    8af0:	|  |      addq.l #8,sp
    8af2:	|  |      move.l d2,d1
    8af4:	|  |      sub.l d0,d1
    8af6:	|  |      move.l d1,-(sp)
    8af8:	|  |      jsr 15b80 <__floatsidf>
    8afe:	|  |      addq.l #4,sp
    8b00:	|  |      move.l d0,32(sp)
    8b04:	|  |      move.l d1,36(sp)
    8b08:	|  |      move.l 32(sp),88(sp)
    8b0e:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8b14:	|  |      move.l 96(sp),-(sp)
    8b18:	|  |      move.l 112(sp),-(sp)
    8b1c:	|  |      jsr 16142 <__mulsi3>
    8b22:	|  |      addq.l #8,sp
    8b24:	|  |      move.l d0,d2
    8b26:	|  |      move.l 100(sp),-(sp)
    8b2a:	|  |      move.l 108(sp),-(sp)
    8b2e:	|  |      jsr 16142 <__mulsi3>
    8b34:	|  |      addq.l #8,sp
    8b36:	|  |      move.l d2,d1
    8b38:	|  |      sub.l d0,d1
    8b3a:	|  |      move.l d1,-(sp)
    8b3c:	|  |      jsr 15b80 <__floatsidf>
    8b42:	|  |      addq.l #4,sp
    8b44:	|  |      move.l d1,-(sp)
    8b46:	|  |      move.l d0,-(sp)
    8b48:	|  |      move.l 100(sp),-(sp)
    8b4c:	|  |      move.l 100(sp),-(sp)
    8b50:	|  |      jsr 15a0a <__divdf3>
    8b56:	|  |      lea 16(sp),sp
    8b5a:	|  |      move.l d0,24(sp)
    8b5e:	|  |      move.l d1,28(sp)
    8b62:	|  |      move.l 24(sp),88(sp)
    8b68:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8b6e:	|  |      clr.l -(sp)
    8b70:	|  |      clr.l -(sp)
    8b72:	|  |      move.l 100(sp),-(sp)
    8b76:	|  |      move.l 100(sp),-(sp)
    8b7a:	|  |      jsr 15cde <__gtdf2>
    8b80:	|  |      lea 16(sp),sp
    8b84:	|  |      tst.l d0
    8b86:	|  |  /-- ble.w 8c5e <doBorderStuff+0x358>
    8b8a:	|  |  |   clr.l -(sp)
    8b8c:	|  |  |   move.l #1072693248,-(sp)
    8b92:	|  |  |   move.l 100(sp),-(sp)
    8b96:	|  |  |   move.l 100(sp),-(sp)
    8b9a:	|  |  |   jsr 15d98 <__ltdf2>
    8ba0:	|  |  |   lea 16(sp),sp
    8ba4:	|  |  |   tst.l d0
    8ba6:	|  |  +-- bge.w 8c5e <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8baa:	|  |  |   move.l 124(sp),-(sp)
    8bae:	|  |  |   jsr 15b80 <__floatsidf>
    8bb4:	|  |  |   addq.l #4,sp
    8bb6:	|  |  |   move.l d0,d2
    8bb8:	|  |  |   move.l d1,d3
    8bba:	|  |  |   move.l 100(sp),-(sp)
    8bbe:	|  |  |   jsr 15b80 <__floatsidf>
    8bc4:	|  |  |   addq.l #4,sp
    8bc6:	|  |  |   move.l 92(sp),-(sp)
    8bca:	|  |  |   move.l 92(sp),-(sp)
    8bce:	|  |  |   move.l d1,-(sp)
    8bd0:	|  |  |   move.l d0,-(sp)
    8bd2:	|  |  |   jsr 15c10 <__muldf3>
    8bd8:	|  |  |   lea 16(sp),sp
    8bdc:	|  |  |   move.l d1,-(sp)
    8bde:	|  |  |   move.l d0,-(sp)
    8be0:	|  |  |   move.l d3,-(sp)
    8be2:	|  |  |   move.l d2,-(sp)
    8be4:	|  |  |   jsr 159a8 <__adddf3>
    8bea:	|  |  |   lea 16(sp),sp
    8bee:	|  |  |   move.l d1,-(sp)
    8bf0:	|  |  |   move.l d0,-(sp)
    8bf2:	|  |  |   jsr 15b18 <__fixdfsi>
    8bf8:	|  |  |   addq.l #8,sp
    8bfa:	|  |  |   movea.l 152(sp),a0
    8bfe:	|  |  |   move.l d0,44(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8c02:	|  |  |   move.l 120(sp),-(sp)
    8c06:	|  |  |   jsr 15b80 <__floatsidf>
    8c0c:	|  |  |   addq.l #4,sp
    8c0e:	|  |  |   move.l d0,d2
    8c10:	|  |  |   move.l d1,d3
    8c12:	|  |  |   move.l 96(sp),-(sp)
    8c16:	|  |  |   jsr 15b80 <__floatsidf>
    8c1c:	|  |  |   addq.l #4,sp
    8c1e:	|  |  |   move.l 92(sp),-(sp)
    8c22:	|  |  |   move.l 92(sp),-(sp)
    8c26:	|  |  |   move.l d1,-(sp)
    8c28:	|  |  |   move.l d0,-(sp)
    8c2a:	|  |  |   jsr 15c10 <__muldf3>
    8c30:	|  |  |   lea 16(sp),sp
    8c34:	|  |  |   move.l d1,-(sp)
    8c36:	|  |  |   move.l d0,-(sp)
    8c38:	|  |  |   move.l d3,-(sp)
    8c3a:	|  |  |   move.l d2,-(sp)
    8c3c:	|  |  |   jsr 159a8 <__adddf3>
    8c42:	|  |  |   lea 16(sp),sp
    8c46:	|  |  |   move.l d1,-(sp)
    8c48:	|  |  |   move.l d0,-(sp)
    8c4a:	|  |  |   jsr 15b18 <__fixdfsi>
    8c50:	|  |  |   addq.l #8,sp
    8c52:	|  |  |   movea.l 152(sp),a0
    8c56:	|  |  |   move.l d0,48(a0)
    8c5a:	|  +--|-- bra.w 8eb6 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8c5e:	|  |  \-> move.l 140(sp),d0
    8c62:	|  |      sub.l 124(sp),d0
    8c66:	|  |      move.l d0,84(sp)
    8c6a:	|  |      move.l 140(sp),d0
    8c6e:	|  |      sub.l 116(sp),d0
    8c72:	|  |      move.l d0,80(sp)
    8c76:	|  |      move.l 132(sp),d0
    8c7a:	|  |      sub.l 124(sp),d0
    8c7e:	|  |      move.l d0,76(sp)
    8c82:	|  |      move.l 132(sp),d0
    8c86:	|  |      sub.l 116(sp),d0
    8c8a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8c8e:	|  |      move.l 136(sp),d0
    8c92:	|  |      sub.l 120(sp),d0
    8c96:	|  |      move.l d0,68(sp)
    8c9a:	|  |      move.l 136(sp),d0
    8c9e:	|  |      sub.l 112(sp),d0
    8ca2:	|  |      move.l d0,64(sp)
    8ca6:	|  |      move.l 128(sp),d0
    8caa:	|  |      sub.l 120(sp),d0
    8cae:	|  |      move.l d0,60(sp)
    8cb2:	|  |      move.l 128(sp),d0
    8cb6:	|  |      sub.l 112(sp),d0
    8cba:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8cbe:	|  |      move.l 84(sp),-(sp)
    8cc2:	|  |      move.l 88(sp),-(sp)
    8cc6:	|  |      jsr 16142 <__mulsi3>
    8ccc:	|  |      addq.l #8,sp
    8cce:	|  |      move.l d0,84(sp)
    8cd2:	|  |      move.l 80(sp),-(sp)
    8cd6:	|  |      move.l 84(sp),-(sp)
    8cda:	|  |      jsr 16142 <__mulsi3>
    8ce0:	|  |      addq.l #8,sp
    8ce2:	|  |      move.l d0,80(sp)
    8ce6:	|  |      move.l 76(sp),-(sp)
    8cea:	|  |      move.l 80(sp),-(sp)
    8cee:	|  |      jsr 16142 <__mulsi3>
    8cf4:	|  |      addq.l #8,sp
    8cf6:	|  |      move.l d0,76(sp)
    8cfa:	|  |      move.l 72(sp),-(sp)
    8cfe:	|  |      move.l 76(sp),-(sp)
    8d02:	|  |      jsr 16142 <__mulsi3>
    8d08:	|  |      addq.l #8,sp
    8d0a:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8d0e:	|  |      move.l 68(sp),-(sp)
    8d12:	|  |      move.l 72(sp),-(sp)
    8d16:	|  |      jsr 16142 <__mulsi3>
    8d1c:	|  |      addq.l #8,sp
    8d1e:	|  |      move.l d0,68(sp)
    8d22:	|  |      move.l 64(sp),-(sp)
    8d26:	|  |      move.l 68(sp),-(sp)
    8d2a:	|  |      jsr 16142 <__mulsi3>
    8d30:	|  |      addq.l #8,sp
    8d32:	|  |      move.l d0,64(sp)
    8d36:	|  |      move.l 60(sp),-(sp)
    8d3a:	|  |      move.l 64(sp),-(sp)
    8d3e:	|  |      jsr 16142 <__mulsi3>
    8d44:	|  |      addq.l #8,sp
    8d46:	|  |      move.l d0,60(sp)
    8d4a:	|  |      move.l 56(sp),-(sp)
    8d4e:	|  |      move.l 60(sp),-(sp)
    8d52:	|  |      jsr 16142 <__mulsi3>
    8d58:	|  |      addq.l #8,sp
    8d5a:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8d5e:	|  |      move.l 84(sp),-(sp)
    8d62:	|  |      jsr 15b80 <__floatsidf>
    8d68:	|  |      addq.l #4,sp
    8d6a:	|  |      move.l d0,d2
    8d6c:	|  |      move.l d1,d3
    8d6e:	|  |      move.l 68(sp),-(sp)
    8d72:	|  |      jsr 15b80 <__floatsidf>
    8d78:	|  |      addq.l #4,sp
    8d7a:	|  |      move.l d1,-(sp)
    8d7c:	|  |      move.l d0,-(sp)
    8d7e:	|  |      move.l d3,-(sp)
    8d80:	|  |      move.l d2,-(sp)
    8d82:	|  |      jsr 159a8 <__adddf3>
    8d88:	|  |      lea 16(sp),sp
    8d8c:	|  |      move.l d1,-(sp)
    8d8e:	|  |      move.l d0,-(sp)
    8d90:	|  |      jsr 160f8 <sqrt>
    8d96:	|  |      addq.l #8,sp
    8d98:	|  |      move.l d0,d2
    8d9a:	|  |      move.l d1,d3
    8d9c:	|  |      move.l 76(sp),-(sp)
    8da0:	|  |      jsr 15b80 <__floatsidf>
    8da6:	|  |      addq.l #4,sp
    8da8:	|  |      move.l d0,d4
    8daa:	|  |      move.l d1,d5
    8dac:	|  |      move.l 60(sp),-(sp)
    8db0:	|  |      jsr 15b80 <__floatsidf>
    8db6:	|  |      addq.l #4,sp
    8db8:	|  |      move.l d1,-(sp)
    8dba:	|  |      move.l d0,-(sp)
    8dbc:	|  |      move.l d5,-(sp)
    8dbe:	|  |      move.l d4,-(sp)
    8dc0:	|  |      jsr 159a8 <__adddf3>
    8dc6:	|  |      lea 16(sp),sp
    8dca:	|  |      move.l d1,-(sp)
    8dcc:	|  |      move.l d0,-(sp)
    8dce:	|  |      jsr 160f8 <sqrt>
    8dd4:	|  |      addq.l #8,sp
    8dd6:	|  |      move.l d1,-(sp)
    8dd8:	|  |      move.l d0,-(sp)
    8dda:	|  |      move.l d3,-(sp)
    8ddc:	|  |      move.l d2,-(sp)
    8dde:	|  |      jsr 159a8 <__adddf3>
    8de4:	|  |      lea 16(sp),sp
    8de8:	|  |      move.l d0,d2
    8dea:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8dec:	|  |      move.l 80(sp),-(sp)
    8df0:	|  |      jsr 15b80 <__floatsidf>
    8df6:	|  |      addq.l #4,sp
    8df8:	|  |      move.l d0,d4
    8dfa:	|  |      move.l d1,d5
    8dfc:	|  |      move.l 64(sp),-(sp)
    8e00:	|  |      jsr 15b80 <__floatsidf>
    8e06:	|  |      addq.l #4,sp
    8e08:	|  |      move.l d1,-(sp)
    8e0a:	|  |      move.l d0,-(sp)
    8e0c:	|  |      move.l d5,-(sp)
    8e0e:	|  |      move.l d4,-(sp)
    8e10:	|  |      jsr 159a8 <__adddf3>
    8e16:	|  |      lea 16(sp),sp
    8e1a:	|  |      move.l d1,-(sp)
    8e1c:	|  |      move.l d0,-(sp)
    8e1e:	|  |      jsr 160f8 <sqrt>
    8e24:	|  |      addq.l #8,sp
    8e26:	|  |      move.l d0,d4
    8e28:	|  |      move.l d1,d5
    8e2a:	|  |      move.l 72(sp),-(sp)
    8e2e:	|  |      jsr 15b80 <__floatsidf>
    8e34:	|  |      addq.l #4,sp
    8e36:	|  |      move.l d0,d6
    8e38:	|  |      move.l d1,d7
    8e3a:	|  |      move.l 56(sp),-(sp)
    8e3e:	|  |      jsr 15b80 <__floatsidf>
    8e44:	|  |      addq.l #4,sp
    8e46:	|  |      move.l d1,-(sp)
    8e48:	|  |      move.l d0,-(sp)
    8e4a:	|  |      move.l d7,-(sp)
    8e4c:	|  |      move.l d6,-(sp)
    8e4e:	|  |      jsr 159a8 <__adddf3>
    8e54:	|  |      lea 16(sp),sp
    8e58:	|  |      move.l d1,-(sp)
    8e5a:	|  |      move.l d0,-(sp)
    8e5c:	|  |      jsr 160f8 <sqrt>
    8e62:	|  |      addq.l #8,sp
    8e64:	|  |      move.l d1,-(sp)
    8e66:	|  |      move.l d0,-(sp)
    8e68:	|  |      move.l d5,-(sp)
    8e6a:	|  |      move.l d4,-(sp)
    8e6c:	|  |      jsr 159a8 <__adddf3>
    8e72:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8e76:	|  |      move.l d1,-(sp)
    8e78:	|  |      move.l d0,-(sp)
    8e7a:	|  |      move.l d3,-(sp)
    8e7c:	|  |      move.l d2,-(sp)
    8e7e:	|  |      jsr 15d98 <__ltdf2>
    8e84:	|  |      lea 16(sp),sp
    8e88:	|  |      tst.l d0
    8e8a:	|  |  /-- bge.s 8ea2 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    8e8c:	|  |  |   movea.l 152(sp),a0
    8e90:	|  |  |   move.l 124(sp),44(a0)
                moveMe -> thisStepY = y3;
    8e96:	|  |  |   movea.l 152(sp),a0
    8e9a:	|  |  |   move.l 120(sp),48(a0)
    8ea0:	|  +--|-- bra.s 8eb6 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8ea2:	|  |  \-> movea.l 152(sp),a0
    8ea6:	|  |      move.l 116(sp),44(a0)
                moveMe -> thisStepY = y4;
    8eac:	|  |      movea.l 152(sp),a0
    8eb0:	|  |      move.l 112(sp),48(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    8eb6:	|  \----> movea.l 152(sp),a0
    8eba:	|         move.l 48(a0),d0
    8ebe:	|         move.l d0,-(sp)
    8ec0:	|         jsr 15bc0 <__floatsisf>
    8ec6:	|         addq.l #4,sp
    8ec8:	|         move.l d0,d1
    8eca:	|         movea.l 152(sp),a0
    8ece:	|         move.l 4(a0),d0
    8ed2:	|         move.l d0,-(sp)
    8ed4:	|         move.l d1,-(sp)
    8ed6:	|         jsr 15eb4 <__subsf3>
    8edc:	|         addq.l #8,sp
    8ede:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8ee2:	|         movea.l 152(sp),a0
    8ee6:	|         move.l (a0),d2
    8ee8:	|         movea.l 152(sp),a0
    8eec:	|         move.l 44(a0),d0
    8ef0:	|         move.l d0,-(sp)
    8ef2:	|         jsr 15bc0 <__floatsisf>
    8ef8:	|         addq.l #4,sp
    8efa:	|         move.l d0,-(sp)
    8efc:	|         move.l d2,-(sp)
    8efe:	|         jsr 15eb4 <__subsf3>
    8f04:	|         addq.l #8,sp
    8f06:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8f0a:	|         clr.l -(sp)
    8f0c:	|         move.l 52(sp),-(sp)
    8f10:	|         jsr 15e1c <__nesf2>
    8f16:	|         addq.l #8,sp
    8f18:	|         tst.l d0
    8f1a:	|     /-- bne.s 8f2e <doBorderStuff+0x628>
    8f1c:	|     |   clr.l -(sp)
    8f1e:	|     |   move.l 56(sp),-(sp)
    8f22:	|     |   jsr 15e1c <__nesf2>
    8f28:	|     |   addq.l #8,sp
    8f2a:	|     |   tst.l d0
    8f2c:	|  /--|-- beq.s 8fa4 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8f2e:	|  |  \-> move.l 52(sp),d0
    8f32:	|  |      move.l d0,-(sp)
    8f34:	|  |      move.l d0,-(sp)
    8f36:	|  |      jsr 15972 <__addsf3>
    8f3c:	|  |      addq.l #8,sp
    8f3e:	|  |      move.l d0,-(sp)
    8f40:	|  |      move.l 52(sp),-(sp)
    8f44:	|  |      jsr 15f48 <atan2f>
    8f4a:	|  |      addq.l #8,sp
    8f4c:	|  |      move.l d0,-(sp)
    8f4e:	|  |      jsr 15ad8 <__extendsfdf2>
    8f54:	|  |      addq.l #4,sp
    8f56:	|  |      move.l #-1540411785,-(sp)
    8f5c:	|  |      move.l #1078765033,-(sp)
    8f62:	|  |      move.l d1,-(sp)
    8f64:	|  |      move.l d0,-(sp)
    8f66:	|  |      jsr 15c10 <__muldf3>
    8f6c:	|  |      lea 16(sp),sp
    8f70:	|  |      clr.l -(sp)
    8f72:	|  |      move.l #1080459264,-(sp)
    8f78:	|  |      move.l d1,-(sp)
    8f7a:	|  |      move.l d0,-(sp)
    8f7c:	|  |      jsr 159a8 <__adddf3>
    8f82:	|  |      lea 16(sp),sp
    8f86:	|  |      move.l d1,-(sp)
    8f88:	|  |      move.l d0,-(sp)
    8f8a:	|  |      jsr 15b18 <__fixdfsi>
    8f90:	|  |      addq.l #8,sp
    8f92:	|  |      movea.l 152(sp),a0
    8f96:	|  |      move.l d0,92(a0)
        moveMe -> spinning = TRUE;
    8f9a:	|  |      movea.l 152(sp),a0
    8f9e:	|  |      move.w #1,62(a0)
    }

    setFrames (moveMe, ANI_WALK);
    8fa4:	|  \----> pea 1 <_start+0x1>
    8fa8:	|         move.l 156(sp),-(sp)
    8fac:	|         jsr 6fb2 <setFrames>
    8fb2:	|         addq.l #8,sp
    return TRUE;
    8fb4:	|         moveq #1,d0
}
    8fb6:	\-------> movem.l (sp)+,d2-d7
    8fba:	          lea 124(sp),sp
    8fbe:	          rts

00008fc0 <drawPeople>:

void drawPeople () {
    8fc0:	                lea -24(sp),sp
    8fc4:	                move.l d2,-(sp)

	shufflePeople ();
    8fc6:	                jsr a9cc <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    8fcc:	                move.l 1ae88 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    8fd4:	                clr.l 20(sp)
	overRegion = NULL;
    8fd8:	                clr.l 1af30 <overRegion>

	while (thisPerson) {
    8fde:	   /----------- bra.w 9500 <drawPeople+0x540>
		if (thisPerson -> show) {
    8fe2:	/--|----------> movea.l 24(sp),a0
    8fe6:	|  |            move.w 100(a0),d0
    8fea:	|  |  /-------- beq.w 92b4 <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    8fee:	|  |  |         movea.l 24(sp),a0
    8ff2:	|  |  |         move.l 68(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    8ff8:	|  |  |         movea.l 24(sp),a0
    8ffc:	|  |  |         move.l 72(a0),d0
    9000:	|  |  |         cmp.l 20(sp),d0
    9004:	|  |  |  /----- beq.w 91c8 <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    9008:	|  |  |  |      movea.l 24(sp),a0
    900c:	|  |  |  |      move.l 20(sp),72(a0)
				thisPerson -> frameNum = 0;
    9012:	|  |  |  |      movea.l 24(sp),a0
    9016:	|  |  |  |      clr.l 80(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    901a:	|  |  |  |      movea.l 20(sp),a0
    901e:	|  |  |  |      movea.l 4(a0),a0
    9022:	|  |  |  |      move.l 4(a0),d0
    9026:	|  |  |  |      movea.l 24(sp),a0
    902a:	|  |  |  |      move.l d0,84(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    902e:	|  |  |  |      movea.l 20(sp),a0
    9032:	|  |  |  |      movea.l 4(a0),a1
    9036:	|  |  |  |      movea.l 24(sp),a0
    903a:	|  |  |  |      move.l 80(a0),d0
    903e:	|  |  |  |      move.l d0,d1
    9040:	|  |  |  |      move.l d1,d0
    9042:	|  |  |  |      add.l d0,d0
    9044:	|  |  |  |      add.l d1,d0
    9046:	|  |  |  |      add.l d0,d0
    9048:	|  |  |  |      add.l d0,d0
    904a:	|  |  |  |      lea (0,a1,d0.l),a0
    904e:	|  |  |  |      move.l 8(a0),d0
    9052:	|  |  |  |  /-- ble.w 90f4 <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9056:	|  |  |  |  |   movea.l 20(sp),a0
    905a:	|  |  |  |  |   movea.l 4(a0),a1
    905e:	|  |  |  |  |   movea.l 24(sp),a0
    9062:	|  |  |  |  |   move.l 80(a0),d0
    9066:	|  |  |  |  |   move.l d0,d1
    9068:	|  |  |  |  |   move.l d1,d0
    906a:	|  |  |  |  |   add.l d0,d0
    906c:	|  |  |  |  |   add.l d1,d0
    906e:	|  |  |  |  |   add.l d0,d0
    9070:	|  |  |  |  |   add.l d0,d0
    9072:	|  |  |  |  |   lea (0,a1,d0.l),a0
    9076:	|  |  |  |  |   move.l 8(a0),d0
    907a:	|  |  |  |  |   clr.l -(sp)
    907c:	|  |  |  |  |   move.l d0,-(sp)
    907e:	|  |  |  |  |   jsr c0b8 <startSound>
    9084:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9086:	|  |  |  |  |   movea.l 24(sp),a0
    908a:	|  |  |  |  |   move.l 80(a0),d0
    908e:	|  |  |  |  |   addq.l #1,d0
    9090:	|  |  |  |  |   movea.l 24(sp),a0
    9094:	|  |  |  |  |   move.l d0,80(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9098:	|  |  |  |  |   movea.l 24(sp),a0
    909c:	|  |  |  |  |   move.l 80(a0),d0
    90a0:	|  |  |  |  |   movea.l 24(sp),a0
    90a4:	|  |  |  |  |   movea.l 68(a0),a0
    90a8:	|  |  |  |  |   move.l 8(a0),d1
    90ac:	|  |  |  |  |   move.l d1,-(sp)
    90ae:	|  |  |  |  |   move.l d0,-(sp)
    90b0:	|  |  |  |  |   jsr 161ee <__modsi3>
    90b6:	|  |  |  |  |   addq.l #8,sp
    90b8:	|  |  |  |  |   movea.l 24(sp),a0
    90bc:	|  |  |  |  |   move.l d0,80(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    90c0:	|  |  |  |  |   movea.l 24(sp),a0
    90c4:	|  |  |  |  |   movea.l 68(a0),a0
    90c8:	|  |  |  |  |   movea.l 4(a0),a1
    90cc:	|  |  |  |  |   movea.l 24(sp),a0
    90d0:	|  |  |  |  |   move.l 80(a0),d0
    90d4:	|  |  |  |  |   move.l d0,d1
    90d6:	|  |  |  |  |   move.l d1,d0
    90d8:	|  |  |  |  |   add.l d0,d0
    90da:	|  |  |  |  |   add.l d1,d0
    90dc:	|  |  |  |  |   add.l d0,d0
    90de:	|  |  |  |  |   add.l d0,d0
    90e0:	|  |  |  |  |   lea (0,a1,d0.l),a0
    90e4:	|  |  |  |  |   move.l 4(a0),d0
    90e8:	|  |  |  |  |   movea.l 24(sp),a0
    90ec:	|  |  |  |  |   move.l d0,84(a0)
    90f0:	|  |  |  +--|-- bra.w 91c8 <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    90f4:	|  |  |  |  \-> movea.l 20(sp),a0
    90f8:	|  |  |  |      movea.l 4(a0),a1
    90fc:	|  |  |  |      movea.l 24(sp),a0
    9100:	|  |  |  |      move.l 80(a0),d0
    9104:	|  |  |  |      move.l d0,d1
    9106:	|  |  |  |      move.l d1,d0
    9108:	|  |  |  |      add.l d0,d0
    910a:	|  |  |  |      add.l d1,d0
    910c:	|  |  |  |      add.l d0,d0
    910e:	|  |  |  |      add.l d0,d0
    9110:	|  |  |  |      lea (0,a1,d0.l),a0
    9114:	|  |  |  |      move.l 8(a0),d0
    9118:	|  |  |  +----- beq.w 91c8 <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    911c:	|  |  |  |      movea.l 1ada0 <noStack>,a1
    9122:	|  |  |  |      movea.l 20(sp),a0
    9126:	|  |  |  |      move.l 4(a0),d2
    912a:	|  |  |  |      movea.l 24(sp),a0
    912e:	|  |  |  |      move.l 80(a0),d0
    9132:	|  |  |  |      move.l d0,d1
    9134:	|  |  |  |      move.l d1,d0
    9136:	|  |  |  |      add.l d0,d0
    9138:	|  |  |  |      add.l d1,d0
    913a:	|  |  |  |      add.l d0,d0
    913c:	|  |  |  |      add.l d0,d0
    913e:	|  |  |  |      movea.l d2,a0
    9140:	|  |  |  |      adda.l d0,a0
    9142:	|  |  |  |      move.l 8(a0),d0
    9146:	|  |  |  |      neg.l d0
    9148:	|  |  |  |      pea 1 <_start+0x1>
    914c:	|  |  |  |      move.l a1,-(sp)
    914e:	|  |  |  |      clr.l -(sp)
    9150:	|  |  |  |      clr.l -(sp)
    9152:	|  |  |  |      move.l d0,-(sp)
    9154:	|  |  |  |      jsr 5956 <startNewFunctionNum>
    915a:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    915e:	|  |  |  |      movea.l 24(sp),a0
    9162:	|  |  |  |      move.l 80(a0),d0
    9166:	|  |  |  |      addq.l #1,d0
    9168:	|  |  |  |      movea.l 24(sp),a0
    916c:	|  |  |  |      move.l d0,80(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9170:	|  |  |  |      movea.l 24(sp),a0
    9174:	|  |  |  |      move.l 80(a0),d0
    9178:	|  |  |  |      movea.l 24(sp),a0
    917c:	|  |  |  |      movea.l 68(a0),a0
    9180:	|  |  |  |      move.l 8(a0),d1
    9184:	|  |  |  |      move.l d1,-(sp)
    9186:	|  |  |  |      move.l d0,-(sp)
    9188:	|  |  |  |      jsr 161ee <__modsi3>
    918e:	|  |  |  |      addq.l #8,sp
    9190:	|  |  |  |      movea.l 24(sp),a0
    9194:	|  |  |  |      move.l d0,80(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9198:	|  |  |  |      movea.l 24(sp),a0
    919c:	|  |  |  |      movea.l 68(a0),a0
    91a0:	|  |  |  |      movea.l 4(a0),a1
    91a4:	|  |  |  |      movea.l 24(sp),a0
    91a8:	|  |  |  |      move.l 80(a0),d0
    91ac:	|  |  |  |      move.l d0,d1
    91ae:	|  |  |  |      move.l d1,d0
    91b0:	|  |  |  |      add.l d0,d0
    91b2:	|  |  |  |      add.l d1,d0
    91b4:	|  |  |  |      add.l d0,d0
    91b6:	|  |  |  |      add.l d0,d0
    91b8:	|  |  |  |      lea (0,a1,d0.l),a0
    91bc:	|  |  |  |      move.l 4(a0),d0
    91c0:	|  |  |  |      movea.l 24(sp),a0
    91c4:	|  |  |  |      move.l d0,84(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    91c8:	|  |  |  \----> movea.l 20(sp),a0
    91cc:	|  |  |         movea.l 4(a0),a1
    91d0:	|  |  |         movea.l 24(sp),a0
    91d4:	|  |  |         move.l 80(a0),d0
    91d8:	|  |  |         move.l d0,d1
    91da:	|  |  |         move.l d1,d0
    91dc:	|  |  |         add.l d0,d0
    91de:	|  |  |         add.l d1,d0
    91e0:	|  |  |         add.l d0,d0
    91e2:	|  |  |         add.l d0,d0
    91e4:	|  |  |         lea (0,a1,d0.l),a0
    91e8:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    91ec:	|  |  |         move.l 8(sp),d0
    91f0:	|  |  |         add.l d0,d0
    91f2:	|  |  |         subx.l d0,d0
    91f4:	|  |  |         neg.l d0
    91f6:	|  |  |         move.b d0,d0
    91f8:	|  |  |         move.b d0,d0
    91fa:	|  |  |         andi.l #255,d0
    9200:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9204:	|  |  |         move.l 8(sp),-(sp)
    9208:	|  |  |         jsr 8194 <TF_abs>
    920e:	|  |  |         addq.l #4,sp
    9210:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9214:	|  |  |         movea.l 20(sp),a0
    9218:	|  |  |         movea.l (a0),a0
    921a:	|  |  |         move.l 8(a0),d0
    921e:	|  |  |         cmp.l 12(sp),d0
    9222:	|  |  |     /-- bgt.s 9232 <drawPeople+0x272>
				fNum = 0;
    9224:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    9228:	|  |  |     |   moveq #2,d0
    922a:	|  |  |     |   sub.l 16(sp),d0
    922e:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    9232:	|  |  |     \-> moveq #2,d0
    9234:	|  |  |         cmp.l 16(sp),d0
    9238:	|  |  +-------- beq.s 92b4 <drawPeople+0x2f4>
				BOOL r = FALSE;
    923a:	|  |  |         clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    923e:	|  |  |         move.l 16(sp),d0
    9242:	|  |  |         movea.w d0,a0
    9244:	|  |  |         movea.l 20(sp),a1
    9248:	|  |  |         movea.l (a1),a1
    924a:	|  |  |         movea.l 16(a1),a1
    924e:	|  |  |         move.l 12(sp),d1
    9252:	|  |  |         move.l d1,d0
    9254:	|  |  |         lsl.l #3,d0
    9256:	|  |  |         sub.l d1,d0
    9258:	|  |  |         add.l d0,d0
    925a:	|  |  |         add.l d0,d0
    925c:	|  |  |         add.l a1,d0
    925e:	|  |  |         move.l a0,-(sp)
    9260:	|  |  |         move.l 28(sp),-(sp)
    9264:	|  |  |         move.l d0,-(sp)
    9266:	|  |  |         jsr 7f2e <scaleSprite>
    926c:	|  |  |         lea 12(sp),sp
    9270:	|  |  |         move.w d0,6(sp)
				if (r) {
    9274:	|  |  +-------- beq.s 92b4 <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    9276:	|  |  |         movea.l 24(sp),a0
    927a:	|  |  |         movea.l 110(a0),a0
    927e:	|  |  |         movea.l (a0),a0
    9280:	|  |  |         move.b (a0),d0
    9282:	|  |  +-------- beq.s 92b4 <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    9284:	|  |  |         move.l 1aea8 <personRegion+0x1c>,d1
    928a:	|  |  |         movea.l 24(sp),a0
    928e:	|  |  |         move.l 110(a0),d0
    9292:	|  |  |         cmp.l d1,d0
    9294:	|  |  |     /-- beq.s 929c <drawPeople+0x2dc>
    9296:	|  |  |     |   clr.l 1ad98 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    929c:	|  |  |     \-> movea.l 24(sp),a0
    92a0:	|  |  |         move.l 110(a0),d0
    92a4:	|  |  |         move.l d0,1aea8 <personRegion+0x1c>
						overRegion = & personRegion;
    92aa:	|  |  |         move.l #110220,1af30 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    92b4:	|  |  \-------> movea.l 24(sp),a0
    92b8:	|  |            move.l 84(a0),d0
    92bc:	|  |            subq.l #1,d0
    92be:	|  |            movea.l 24(sp),a0
    92c2:	|  |            move.l d0,84(a0)
    92c6:	|  |            movea.l 24(sp),a0
    92ca:	|  |            move.l 84(a0),d0
    92ce:	|  |     /----- bne.w 94f6 <drawPeople+0x536>
			thisPerson -> frameNum ++;
    92d2:	|  |     |      movea.l 24(sp),a0
    92d6:	|  |     |      move.l 80(a0),d0
    92da:	|  |     |      addq.l #1,d0
    92dc:	|  |     |      movea.l 24(sp),a0
    92e0:	|  |     |      move.l d0,80(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    92e4:	|  |     |      movea.l 24(sp),a0
    92e8:	|  |     |      move.l 80(a0),d0
    92ec:	|  |     |      movea.l 24(sp),a0
    92f0:	|  |     |      movea.l 68(a0),a0
    92f4:	|  |     |      move.l 8(a0),d1
    92f8:	|  |     |      move.l d1,-(sp)
    92fa:	|  |     |      move.l d0,-(sp)
    92fc:	|  |     |      jsr 161ee <__modsi3>
    9302:	|  |     |      addq.l #8,sp
    9304:	|  |     |      movea.l 24(sp),a0
    9308:	|  |     |      move.l d0,80(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    930c:	|  |     |      movea.l 24(sp),a0
    9310:	|  |     |      movea.l 68(a0),a0
    9314:	|  |     |      movea.l 4(a0),a1
    9318:	|  |     |      movea.l 24(sp),a0
    931c:	|  |     |      move.l 80(a0),d0
    9320:	|  |     |      move.l d0,d1
    9322:	|  |     |      move.l d1,d0
    9324:	|  |     |      add.l d0,d0
    9326:	|  |     |      add.l d1,d0
    9328:	|  |     |      add.l d0,d0
    932a:	|  |     |      add.l d0,d0
    932c:	|  |     |      lea (0,a1,d0.l),a0
    9330:	|  |     |      move.l 4(a0),d0
    9334:	|  |     |      movea.l 24(sp),a0
    9338:	|  |     |      move.l d0,84(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    933c:	|  |     |      movea.l 24(sp),a0
    9340:	|  |     |      move.w 100(a0),d0
    9344:	|  |     +----- beq.w 94f6 <drawPeople+0x536>
    9348:	|  |     |      tst.l 20(sp)
    934c:	|  |     +----- beq.w 94f6 <drawPeople+0x536>
    9350:	|  |     |      movea.l 20(sp),a0
    9354:	|  |     |      move.l 4(a0),d0
    9358:	|  |     +----- beq.w 94f6 <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    935c:	|  |     |      movea.l 20(sp),a0
    9360:	|  |     |      movea.l 4(a0),a1
    9364:	|  |     |      movea.l 24(sp),a0
    9368:	|  |     |      move.l 80(a0),d0
    936c:	|  |     |      move.l d0,d1
    936e:	|  |     |      move.l d1,d0
    9370:	|  |     |      add.l d0,d0
    9372:	|  |     |      add.l d1,d0
    9374:	|  |     |      add.l d0,d0
    9376:	|  |     |      add.l d0,d0
    9378:	|  |     |      lea (0,a1,d0.l),a0
    937c:	|  |     |      move.l 8(a0),d0
    9380:	|  |     |  /-- ble.w 9422 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9384:	|  |     |  |   movea.l 20(sp),a0
    9388:	|  |     |  |   movea.l 4(a0),a1
    938c:	|  |     |  |   movea.l 24(sp),a0
    9390:	|  |     |  |   move.l 80(a0),d0
    9394:	|  |     |  |   move.l d0,d1
    9396:	|  |     |  |   move.l d1,d0
    9398:	|  |     |  |   add.l d0,d0
    939a:	|  |     |  |   add.l d1,d0
    939c:	|  |     |  |   add.l d0,d0
    939e:	|  |     |  |   add.l d0,d0
    93a0:	|  |     |  |   lea (0,a1,d0.l),a0
    93a4:	|  |     |  |   move.l 8(a0),d0
    93a8:	|  |     |  |   clr.l -(sp)
    93aa:	|  |     |  |   move.l d0,-(sp)
    93ac:	|  |     |  |   jsr c0b8 <startSound>
    93b2:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    93b4:	|  |     |  |   movea.l 24(sp),a0
    93b8:	|  |     |  |   move.l 80(a0),d0
    93bc:	|  |     |  |   addq.l #1,d0
    93be:	|  |     |  |   movea.l 24(sp),a0
    93c2:	|  |     |  |   move.l d0,80(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    93c6:	|  |     |  |   movea.l 24(sp),a0
    93ca:	|  |     |  |   move.l 80(a0),d0
    93ce:	|  |     |  |   movea.l 24(sp),a0
    93d2:	|  |     |  |   movea.l 68(a0),a0
    93d6:	|  |     |  |   move.l 8(a0),d1
    93da:	|  |     |  |   move.l d1,-(sp)
    93dc:	|  |     |  |   move.l d0,-(sp)
    93de:	|  |     |  |   jsr 161ee <__modsi3>
    93e4:	|  |     |  |   addq.l #8,sp
    93e6:	|  |     |  |   movea.l 24(sp),a0
    93ea:	|  |     |  |   move.l d0,80(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    93ee:	|  |     |  |   movea.l 24(sp),a0
    93f2:	|  |     |  |   movea.l 68(a0),a0
    93f6:	|  |     |  |   movea.l 4(a0),a1
    93fa:	|  |     |  |   movea.l 24(sp),a0
    93fe:	|  |     |  |   move.l 80(a0),d0
    9402:	|  |     |  |   move.l d0,d1
    9404:	|  |     |  |   move.l d1,d0
    9406:	|  |     |  |   add.l d0,d0
    9408:	|  |     |  |   add.l d1,d0
    940a:	|  |     |  |   add.l d0,d0
    940c:	|  |     |  |   add.l d0,d0
    940e:	|  |     |  |   lea (0,a1,d0.l),a0
    9412:	|  |     |  |   move.l 4(a0),d0
    9416:	|  |     |  |   movea.l 24(sp),a0
    941a:	|  |     |  |   move.l d0,84(a0)
    941e:	|  |     +--|-- bra.w 94f6 <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9422:	|  |     |  \-> movea.l 20(sp),a0
    9426:	|  |     |      movea.l 4(a0),a1
    942a:	|  |     |      movea.l 24(sp),a0
    942e:	|  |     |      move.l 80(a0),d0
    9432:	|  |     |      move.l d0,d1
    9434:	|  |     |      move.l d1,d0
    9436:	|  |     |      add.l d0,d0
    9438:	|  |     |      add.l d1,d0
    943a:	|  |     |      add.l d0,d0
    943c:	|  |     |      add.l d0,d0
    943e:	|  |     |      lea (0,a1,d0.l),a0
    9442:	|  |     |      move.l 8(a0),d0
    9446:	|  |     +----- beq.w 94f6 <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    944a:	|  |     |      movea.l 1ada0 <noStack>,a1
    9450:	|  |     |      movea.l 20(sp),a0
    9454:	|  |     |      move.l 4(a0),d2
    9458:	|  |     |      movea.l 24(sp),a0
    945c:	|  |     |      move.l 80(a0),d0
    9460:	|  |     |      move.l d0,d1
    9462:	|  |     |      move.l d1,d0
    9464:	|  |     |      add.l d0,d0
    9466:	|  |     |      add.l d1,d0
    9468:	|  |     |      add.l d0,d0
    946a:	|  |     |      add.l d0,d0
    946c:	|  |     |      movea.l d2,a0
    946e:	|  |     |      adda.l d0,a0
    9470:	|  |     |      move.l 8(a0),d0
    9474:	|  |     |      neg.l d0
    9476:	|  |     |      pea 1 <_start+0x1>
    947a:	|  |     |      move.l a1,-(sp)
    947c:	|  |     |      clr.l -(sp)
    947e:	|  |     |      clr.l -(sp)
    9480:	|  |     |      move.l d0,-(sp)
    9482:	|  |     |      jsr 5956 <startNewFunctionNum>
    9488:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    948c:	|  |     |      movea.l 24(sp),a0
    9490:	|  |     |      move.l 80(a0),d0
    9494:	|  |     |      addq.l #1,d0
    9496:	|  |     |      movea.l 24(sp),a0
    949a:	|  |     |      move.l d0,80(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    949e:	|  |     |      movea.l 24(sp),a0
    94a2:	|  |     |      move.l 80(a0),d0
    94a6:	|  |     |      movea.l 24(sp),a0
    94aa:	|  |     |      movea.l 68(a0),a0
    94ae:	|  |     |      move.l 8(a0),d1
    94b2:	|  |     |      move.l d1,-(sp)
    94b4:	|  |     |      move.l d0,-(sp)
    94b6:	|  |     |      jsr 161ee <__modsi3>
    94bc:	|  |     |      addq.l #8,sp
    94be:	|  |     |      movea.l 24(sp),a0
    94c2:	|  |     |      move.l d0,80(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    94c6:	|  |     |      movea.l 24(sp),a0
    94ca:	|  |     |      movea.l 68(a0),a0
    94ce:	|  |     |      movea.l 4(a0),a1
    94d2:	|  |     |      movea.l 24(sp),a0
    94d6:	|  |     |      move.l 80(a0),d0
    94da:	|  |     |      move.l d0,d1
    94dc:	|  |     |      move.l d1,d0
    94de:	|  |     |      add.l d0,d0
    94e0:	|  |     |      add.l d1,d0
    94e2:	|  |     |      add.l d0,d0
    94e4:	|  |     |      add.l d0,d0
    94e6:	|  |     |      lea (0,a1,d0.l),a0
    94ea:	|  |     |      move.l 4(a0),d0
    94ee:	|  |     |      movea.l 24(sp),a0
    94f2:	|  |     |      move.l d0,84(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    94f6:	|  |     \----> movea.l 24(sp),a0
    94fa:	|  |            move.l 32(a0),24(sp)
	while (thisPerson) {
    9500:	|  \----------> tst.l 24(sp)
    9504:	\-------------- bne.w 8fe2 <drawPeople+0x22>
	}
}
    9508:	                nop
    950a:	                nop
    950c:	                move.l (sp)+,d2
    950e:	                lea 24(sp),sp
    9512:	                rts

00009514 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    9514:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    9516:	          move.l 1ae88 <allPeople>,(sp)
	while (thisPerson) {
    951c:	      /-- bra.s 9534 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    951e:	/-----|-> movea.l (sp),a0
    9520:	|     |   movea.l 110(a0),a0
    9524:	|     |   move.l 4(a0),d0
    9528:	|     |   cmp.l 8(sp),d0
    952c:	|  /--|-- beq.s 953a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    952e:	|  |  |   movea.l (sp),a0
    9530:	|  |  |   move.l 32(a0),(sp)
	while (thisPerson) {
    9534:	|  |  \-> tst.l (sp)
    9536:	\--|----- bne.s 951e <findPerson+0xa>
    9538:	   |  /-- bra.s 953c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    953a:	   \--|-> nop
	}
	return thisPerson;
    953c:	      \-> move.l (sp),d0
}
    953e:	          addq.l #4,sp
    9540:	          rts

00009542 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    9542:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    9544:	       move.l 12(sp),-(sp)
    9548:	       jsr 9514 <findPerson>
    954e:	       addq.l #4,sp
    9550:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    9552:	   /-- bne.s 9558 <floatCharacter+0x16>
    9554:	   |   clr.w d0
    9556:	/--|-- bra.s 9562 <floatCharacter+0x20>
	moveMe -> floaty = f;
    9558:	|  \-> movea.l (sp),a0
    955a:	|      move.l 8(sp),20(a0)
	return TRUE;
    9560:	|      moveq #1,d0
}
    9562:	\----> addq.l #4,sp
    9564:	       rts

00009566 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9566:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    9568:	          tst.l 8(sp)
    956c:	      /-- bne.s 957a <forceWalkingPerson+0x14>
    956e:	      |   tst.l 12(sp)
    9572:	      +-- bne.s 957a <forceWalkingPerson+0x14>
    9574:	      |   clr.w d0
    9576:	/-----|-- bra.w 960c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    957a:	|     \-> move.l 16(sp),-(sp)
    957e:	|         jsr 9514 <findPerson>
    9584:	|         addq.l #4,sp
    9586:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    9588:	|     /-- bne.s 958e <forceWalkingPerson+0x28>
    958a:	|     |   clr.w d0
    958c:	+-----|-- bra.s 960c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    958e:	|     \-> movea.l (sp),a0
    9590:	|         move.l 64(a0),d0
    9594:	|     /-- beq.s 95a6 <forceWalkingPerson+0x40>
    9596:	|     |   movea.l (sp),a0
    9598:	|     |   move.l 64(a0),d0
    959c:	|     |   move.l d0,-(sp)
    959e:	|     |   jsr 35b6 <abortFunction>
    95a4:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    95a6:	|     \-> movea.l (sp),a0
    95a8:	|         move.w #1,60(a0)
    moveMe->continueAfterWalking = NULL;
    95ae:	|         movea.l (sp),a0
    95b0:	|         clr.l 64(a0)
    moveMe->directionWhenDoneWalking = di;
    95b4:	|         movea.l (sp),a0
    95b6:	|         move.l 24(sp),106(a0)

    moveMe->walkToX = x;
    95bc:	|         movea.l (sp),a0
    95be:	|         move.l 8(sp),36(a0)
    moveMe->walkToY = y;
    95c4:	|         movea.l (sp),a0
    95c6:	|         move.l 12(sp),40(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    95cc:	|         movea.l (sp),a0
    95ce:	|         clr.l 52(a0)
    moveMe->walkToPoly = 0;
    95d2:	|         movea.l (sp),a0
    95d4:	|         clr.l 56(a0)

    doBorderStuff(moveMe);
    95d8:	|         move.l (sp),-(sp)
    95da:	|         jsr 8906 <doBorderStuff>
    95e0:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    95e2:	|         pea 1 <_start+0x1>
    95e6:	|         move.l 4(sp),-(sp)
    95ea:	|         jsr add6 <walkMe>
    95f0:	|         addq.l #8,sp
    95f2:	|         tst.w d0
    95f4:	|     /-- bne.s 95fe <forceWalkingPerson+0x98>
    95f6:	|     |   movea.l (sp),a0
    95f8:	|     |   move.w 62(a0),d0
    95fc:	|  /--|-- beq.s 960a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    95fe:	|  |  \-> movea.l (sp),a0
    9600:	|  |      move.l 20(sp),64(a0)
        return TRUE;
    9606:	|  |      moveq #1,d0
    9608:	+--|----- bra.s 960c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    960a:	|  \----> clr.w d0
    }
}
    960c:	\-------> addq.l #4,sp
    960e:	          rts

00009610 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    9610:	                lea -56(sp),sp
    9614:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    9616:	                move.l #320,56(sp)
    961e:	                move.l #200,52(sp)
    9626:	                moveq #-1,d0
    9628:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    962c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9634:	                clr.l 44(sp)
    9638:	   /----------- bra.w 9810 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    963c:	/--|----------> movea.l 1af38 <currentFloor>,a0
    9642:	|  |            move.l 12(a0),d1
    9646:	|  |            move.l 44(sp),d0
    964a:	|  |            lsl.l #3,d0
    964c:	|  |            movea.l d1,a0
    964e:	|  |            adda.l d0,a0
    9650:	|  |            move.l (a0),d0
    9652:	|  |            move.l d0,d1
    9654:	|  |            subq.l #1,d1
    9656:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    965a:	|  |            clr.l 40(sp)
    965e:	|  |     /----- bra.w 97ee <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    9662:	|  |  /--|----> movea.l 1af38 <currentFloor>,a0
    9668:	|  |  |  |      move.l 4(a0),d1
    966c:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    9672:	|  |  |  |      movea.l 12(a0),a0
    9676:	|  |  |  |      move.l 44(sp),d0
    967a:	|  |  |  |      lsl.l #3,d0
    967c:	|  |  |  |      adda.l d0,a0
    967e:	|  |  |  |      movea.l 4(a0),a0
    9682:	|  |  |  |      move.l 40(sp),d0
    9686:	|  |  |  |      add.l d0,d0
    9688:	|  |  |  |      add.l d0,d0
    968a:	|  |  |  |      adda.l d0,a0
    968c:	|  |  |  |      move.l (a0),d0
    968e:	|  |  |  |      lsl.l #3,d0
    9690:	|  |  |  |      movea.l d1,a0
    9692:	|  |  |  |      adda.l d0,a0
    9694:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    9698:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    969e:	|  |  |  |      move.l 4(a0),d1
    96a2:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    96a8:	|  |  |  |      movea.l 12(a0),a0
    96ac:	|  |  |  |      move.l 44(sp),d0
    96b0:	|  |  |  |      lsl.l #3,d0
    96b2:	|  |  |  |      adda.l d0,a0
    96b4:	|  |  |  |      movea.l 4(a0),a0
    96b8:	|  |  |  |      move.l 40(sp),d0
    96bc:	|  |  |  |      add.l d0,d0
    96be:	|  |  |  |      add.l d0,d0
    96c0:	|  |  |  |      adda.l d0,a0
    96c2:	|  |  |  |      move.l (a0),d0
    96c4:	|  |  |  |      lsl.l #3,d0
    96c6:	|  |  |  |      movea.l d1,a0
    96c8:	|  |  |  |      adda.l d0,a0
    96ca:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    96d0:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    96d6:	|  |  |  |      move.l 4(a0),d1
    96da:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    96e0:	|  |  |  |      movea.l 12(a0),a0
    96e4:	|  |  |  |      move.l 44(sp),d0
    96e8:	|  |  |  |      lsl.l #3,d0
    96ea:	|  |  |  |      adda.l d0,a0
    96ec:	|  |  |  |      movea.l 4(a0),a0
    96f0:	|  |  |  |      move.l 36(sp),d0
    96f4:	|  |  |  |      add.l d0,d0
    96f6:	|  |  |  |      add.l d0,d0
    96f8:	|  |  |  |      adda.l d0,a0
    96fa:	|  |  |  |      move.l (a0),d0
    96fc:	|  |  |  |      lsl.l #3,d0
    96fe:	|  |  |  |      movea.l d1,a0
    9700:	|  |  |  |      adda.l d0,a0
    9702:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    9706:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    970c:	|  |  |  |      move.l 4(a0),d1
    9710:	|  |  |  |      movea.l 1af38 <currentFloor>,a0
    9716:	|  |  |  |      movea.l 12(a0),a0
    971a:	|  |  |  |      move.l 44(sp),d0
    971e:	|  |  |  |      lsl.l #3,d0
    9720:	|  |  |  |      adda.l d0,a0
    9722:	|  |  |  |      movea.l 4(a0),a0
    9726:	|  |  |  |      move.l 36(sp),d0
    972a:	|  |  |  |      add.l d0,d0
    972c:	|  |  |  |      add.l d0,d0
    972e:	|  |  |  |      adda.l d0,a0
    9730:	|  |  |  |      move.l (a0),d0
    9732:	|  |  |  |      lsl.l #3,d0
    9734:	|  |  |  |      movea.l d1,a0
    9736:	|  |  |  |      adda.l d0,a0
    9738:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    973e:	|  |  |  |      movea.l 68(sp),a0
    9742:	|  |  |  |      move.l (a0),d1
    9744:	|  |  |  |      movea.l 64(sp),a0
    9748:	|  |  |  |      move.l (a0),d0
    974a:	|  |  |  |      move.l d1,-(sp)
    974c:	|  |  |  |      move.l d0,-(sp)
    974e:	|  |  |  |      move.l 24(sp),-(sp)
    9752:	|  |  |  |      move.l 32(sp),-(sp)
    9756:	|  |  |  |      move.l 40(sp),-(sp)
    975a:	|  |  |  |      move.l 48(sp),-(sp)
    975e:	|  |  |  |      lea 28(sp),a0
    9762:	|  |  |  |      move.l a0,-(sp)
    9764:	|  |  |  |      lea 36(sp),a0
    9768:	|  |  |  |      move.l a0,-(sp)
    976a:	|  |  |  |      jsr 145e4 <closestPointOnLine>
    9770:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    9774:	|  |  |  |      movea.l 64(sp),a0
    9778:	|  |  |  |      move.l (a0),d0
    977a:	|  |  |  |      move.l 8(sp),d1
    977e:	|  |  |  |      move.l d0,d2
    9780:	|  |  |  |      sub.l d1,d2
    9782:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    9786:	|  |  |  |      movea.l 68(sp),a0
    978a:	|  |  |  |      move.l (a0),d0
    978c:	|  |  |  |      move.l 4(sp),d1
    9790:	|  |  |  |      move.l d0,d2
    9792:	|  |  |  |      sub.l d1,d2
    9794:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    9798:	|  |  |  |      move.l 28(sp),-(sp)
    979c:	|  |  |  |      move.l 32(sp),-(sp)
    97a0:	|  |  |  |      jsr 16142 <__mulsi3>
    97a6:	|  |  |  |      addq.l #8,sp
    97a8:	|  |  |  |      move.l d0,d2
    97aa:	|  |  |  |      move.l 24(sp),-(sp)
    97ae:	|  |  |  |      move.l 28(sp),-(sp)
    97b2:	|  |  |  |      jsr 16142 <__mulsi3>
    97b8:	|  |  |  |      addq.l #8,sp
    97ba:	|  |  |  |      move.l d2,d1
    97bc:	|  |  |  |      add.l d0,d1
    97be:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    97c2:	|  |  |  |      move.l 12(sp),d2
    97c6:	|  |  |  |      cmp.l 32(sp),d2
    97ca:	|  |  |  |  /-- bge.s 97e4 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    97cc:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    97d2:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    97d8:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    97de:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    97e4:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    97ea:	|  |  |  |      addq.l #1,40(sp)
    97ee:	|  |  |  \----> movea.l 1af38 <currentFloor>,a0
    97f4:	|  |  |         move.l 12(a0),d1
    97f8:	|  |  |         move.l 44(sp),d0
    97fc:	|  |  |         lsl.l #3,d0
    97fe:	|  |  |         movea.l d1,a0
    9800:	|  |  |         adda.l d0,a0
    9802:	|  |  |         move.l (a0),d0
    9804:	|  |  |         cmp.l 40(sp),d0
    9808:	|  |  \-------- bgt.w 9662 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    980c:	|  |            addq.l #1,44(sp)
    9810:	|  \----------> movea.l 1af38 <currentFloor>,a0
    9816:	|               move.l 8(a0),d0
    981a:	|               cmp.l 44(sp),d0
    981e:	\-------------- bgt.w 963c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    9822:	                moveq #-1,d0
    9824:	                cmp.l 48(sp),d0
    9828:	            /-- bne.s 982e <handleClosestPoint+0x21e>
    982a:	            |   clr.w d0
    982c:	         /--|-- bra.s 9848 <handleClosestPoint+0x238>
	*setX = gotX;
    982e:	         |  \-> movea.l 64(sp),a0
    9832:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    9836:	         |      movea.l 68(sp),a0
    983a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    983e:	         |      movea.l 72(sp),a0
    9842:	         |      move.l 48(sp),(a0)

	return TRUE;
    9846:	         |      moveq #1,d0
}
    9848:	         \----> move.l (sp)+,d2
    984a:	                lea 56(sp),sp
    984e:	                rts

00009850 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    9850:	clr.l 1ae9c <personRegion+0x10>
	personRegion.sY = 0;
    9856:	clr.l 1aea0 <personRegion+0x14>
	personRegion.di = -1;
    985c:	moveq #-1,d0
    985e:	move.l d0,1aea4 <personRegion+0x18>
	allScreenRegions = NULL;
    9864:	clr.l 1af2c <allScreenRegions>

	return TRUE;
    986a:	moveq #1,d0
}
    986c:	rts

0000986e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    986e:	          subq.l #4,sp
    9870:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    9872:	          tst.l 12(sp)
    9876:	      /-- bne.s 987e <jumpPerson+0x10>
    9878:	      |   tst.l 16(sp)
    987c:	/-----|-- beq.s 98f2 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    987e:	|     \-> move.l 20(sp),-(sp)
    9882:	|         jsr 9514 <findPerson>
    9888:	|         addq.l #4,sp
    988a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    988e:	|  /----- beq.s 98f6 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9890:	|  |      movea.l 4(sp),a0
    9894:	|  |      move.l 64(a0),d0
    9898:	|  |  /-- beq.s 98ac <jumpPerson+0x3e>
    989a:	|  |  |   movea.l 4(sp),a0
    989e:	|  |  |   move.l 64(a0),d0
    98a2:	|  |  |   move.l d0,-(sp)
    98a4:	|  |  |   jsr 35b6 <abortFunction>
    98aa:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    98ac:	|  |  \-> movea.l 4(sp),a0
    98b0:	|  |      clr.l 64(a0)
    moveMe->walking = FALSE;
    98b4:	|  |      movea.l 4(sp),a0
    98b8:	|  |      clr.w 60(a0)
    moveMe->spinning = FALSE;
    98bc:	|  |      movea.l 4(sp),a0
    98c0:	|  |      clr.w 62(a0)
    moveAndScale(moveMe, x, y);
    98c4:	|  |      move.l 16(sp),-(sp)
    98c8:	|  |      jsr 15bc0 <__floatsisf>
    98ce:	|  |      addq.l #4,sp
    98d0:	|  |      move.l d0,d2
    98d2:	|  |      move.l 12(sp),-(sp)
    98d6:	|  |      jsr 15bc0 <__floatsisf>
    98dc:	|  |      addq.l #4,sp
    98de:	|  |      move.l d2,-(sp)
    98e0:	|  |      move.l d0,-(sp)
    98e2:	|  |      move.l 12(sp),-(sp)
    98e6:	|  |      jsr 9c5c <moveAndScale>
    98ec:	|  |      lea 12(sp),sp
    98f0:	|  |  /-- bra.s 98f8 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    98f2:	\--|--|-> nop
    98f4:	   |  +-- bra.s 98f8 <jumpPerson+0x8a>
    if (!moveMe) return;
    98f6:	   \--|-> nop
}
    98f8:	      \-> move.l (sp)+,d2
    98fa:	          addq.l #4,sp
    98fc:	          rts

000098fe <killAllPeople>:


void killAllPeople () {
    98fe:	          subq.l #8,sp
    9900:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9902:	   /----- bra.s 996e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    9904:	/--|----> movea.l 1ae88 <allPeople>,a0
    990a:	|  |      move.l 64(a0),d0
    990e:	|  |  /-- beq.s 9924 <killAllPeople+0x26>
    9910:	|  |  |   movea.l 1ae88 <allPeople>,a0
    9916:	|  |  |   move.l 64(a0),d0
    991a:	|  |  |   move.l d0,-(sp)
    991c:	|  |  |   jsr 35b6 <abortFunction>
    9922:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    9924:	|  |  \-> movea.l 1ae88 <allPeople>,a0
    992a:	|  |      clr.l 64(a0)
		killPeople = allPeople;
    992e:	|  |      move.l 1ae88 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    9936:	|  |      movea.l 1ae88 <allPeople>,a0
    993c:	|  |      move.l 32(a0),d0
    9940:	|  |      move.l d0,1ae88 <allPeople>
		removeObjectType (killPeople -> thisType);
    9946:	|  |      movea.l 8(sp),a0
    994a:	|  |      move.l 110(a0),d0
    994e:	|  |      move.l d0,-(sp)
    9950:	|  |      jsr c796 <removeObjectType>
    9956:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    9958:	|  |      move.l 8(sp),4(sp)
    995e:	|  |      move.l 1add0 <SysBase>,d0
    9964:	|  |      movea.l d0,a6
    9966:	|  |      movea.l 4(sp),a1
    996a:	|  |      jsr -690(a6)
	while (allPeople) {
    996e:	|  \----> move.l 1ae88 <allPeople>,d0
    9974:	\-------- bne.s 9904 <killAllPeople+0x6>
	}
}
    9976:	          nop
    9978:	          nop
    997a:	          movea.l (sp)+,a6
    997c:	          addq.l #8,sp
    997e:	          rts

00009980 <killMostPeople>:

void killMostPeople() {
    9980:	          lea -12(sp),sp
    9984:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9986:	          move.l #110216,12(sp)

    while (*lookyHere) {
    998e:	   /----- bra.w 9a14 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9992:	/--|----> movea.l 12(sp),a0
    9996:	|  |      movea.l (a0),a0
    9998:	|  |      move.l 114(a0),d0
    999c:	|  |      moveq #32,d1
    999e:	|  |      and.l d1,d0
    99a0:	|  |  /-- beq.s 99b2 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    99a2:	|  |  |   movea.l 12(sp),a0
    99a6:	|  |  |   move.l (a0),d0
    99a8:	|  |  |   moveq #32,d1
    99aa:	|  |  |   add.l d0,d1
    99ac:	|  |  |   move.l d1,12(sp)
    99b0:	|  +--|-- bra.s 9a14 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    99b2:	|  |  \-> movea.l 12(sp),a0
    99b6:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    99ba:	|  |      movea.l 8(sp),a0
    99be:	|  |      move.l 32(a0),d0
    99c2:	|  |      movea.l 12(sp),a0
    99c6:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    99c8:	|  |      movea.l 8(sp),a0
    99cc:	|  |      move.l 64(a0),d0
    99d0:	|  |  /-- beq.s 99e4 <killMostPeople+0x64>
    99d2:	|  |  |   movea.l 8(sp),a0
    99d6:	|  |  |   move.l 64(a0),d0
    99da:	|  |  |   move.l d0,-(sp)
    99dc:	|  |  |   jsr 35b6 <abortFunction>
    99e2:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    99e4:	|  |  \-> movea.l 8(sp),a0
    99e8:	|  |      clr.l 64(a0)
            removeObjectType(killPeople->thisType);
    99ec:	|  |      movea.l 8(sp),a0
    99f0:	|  |      move.l 110(a0),d0
    99f4:	|  |      move.l d0,-(sp)
    99f6:	|  |      jsr c796 <removeObjectType>
    99fc:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    99fe:	|  |      move.l 8(sp),4(sp)
    9a04:	|  |      move.l 1add0 <SysBase>,d0
    9a0a:	|  |      movea.l d0,a6
    9a0c:	|  |      movea.l 4(sp),a1
    9a10:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9a14:	|  \----> movea.l 12(sp),a0
    9a18:	|         move.l (a0),d0
    9a1a:	\-------- bne.w 9992 <killMostPeople+0x12>
        }
    }
}
    9a1e:	          nop
    9a20:	          nop
    9a22:	          movea.l (sp)+,a6
    9a24:	          lea 12(sp),sp
    9a28:	          rts

00009a2a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9a2a:	clr.l -(sp)
    9a2c:	move.l sp,d0
    9a2e:	addq.l #8,d0
    9a30:	move.l d0,-(sp)
    9a32:	jsr 6fb2 <setFrames>
    9a38:	addq.l #8,sp
}
    9a3a:	nop
    9a3c:	rts

00009a3e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9a3e:	          lea -12(sp),sp
    9a42:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9a44:	          tst.l 20(sp)
    9a48:	      /-- bne.s 9a56 <makeWalkingPerson+0x18>
    9a4a:	      |   tst.l 24(sp)
    9a4e:	      +-- bne.s 9a56 <makeWalkingPerson+0x18>
    9a50:	      |   clr.w d0
    9a52:	/-----|-- bra.w 9bee <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9a56:	|     \-> movea.l 1af38 <currentFloor>,a0
    9a5c:	|         move.l 8(a0),d0
    9a60:	|     /-- bne.s 9a68 <makeWalkingPerson+0x2a>
    9a62:	|     |   clr.w d0
    9a64:	+-----|-- bra.w 9bee <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9a68:	|     \-> move.l 28(sp),-(sp)
    9a6c:	|         jsr 9514 <findPerson>
    9a72:	|         addq.l #4,sp
    9a74:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9a78:	|     /-- bne.s 9a80 <makeWalkingPerson+0x42>
    9a7a:	|     |   clr.w d0
    9a7c:	+-----|-- bra.w 9bee <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9a80:	|     \-> movea.l 12(sp),a0
    9a84:	|         move.l 64(a0),d0
    9a88:	|     /-- beq.s 9a9c <makeWalkingPerson+0x5e>
    9a8a:	|     |   movea.l 12(sp),a0
    9a8e:	|     |   move.l 64(a0),d0
    9a92:	|     |   move.l d0,-(sp)
    9a94:	|     |   jsr 35b6 <abortFunction>
    9a9a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9a9c:	|     \-> movea.l 12(sp),a0
    9aa0:	|         clr.l 64(a0)
	moveMe -> walking = TRUE;
    9aa4:	|         movea.l 12(sp),a0
    9aa8:	|         move.w #1,60(a0)
	moveMe -> directionWhenDoneWalking = di;
    9aae:	|         movea.l 12(sp),a0
    9ab2:	|         move.l 36(sp),106(a0)

	moveMe -> walkToX = x;
    9ab8:	|         movea.l 12(sp),a0
    9abc:	|         move.l 20(sp),36(a0)
	moveMe -> walkToY = y;
    9ac2:	|         movea.l 12(sp),a0
    9ac6:	|         move.l 24(sp),40(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9acc:	|         move.l 24(sp),-(sp)
    9ad0:	|         move.l 24(sp),-(sp)
    9ad4:	|         jsr 14ae6 <inFloor>
    9ada:	|         addq.l #8,sp
    9adc:	|         movea.l 12(sp),a0
    9ae0:	|         move.l d0,56(a0)
	if (moveMe -> walkToPoly == -1) {
    9ae4:	|         movea.l 12(sp),a0
    9ae8:	|         move.l 56(a0),d0
    9aec:	|         moveq #-1,d1
    9aee:	|         cmp.l d0,d1
    9af0:	|     /-- bne.s 9b20 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9af2:	|     |   movea.w #56,a0
    9af6:	|     |   adda.l 12(sp),a0
    9afa:	|     |   moveq #40,d1
    9afc:	|     |   add.l 12(sp),d1
    9b00:	|     |   moveq #36,d0
    9b02:	|     |   add.l 12(sp),d0
    9b06:	|     |   move.l a0,-(sp)
    9b08:	|     |   move.l d1,-(sp)
    9b0a:	|     |   move.l d0,-(sp)
    9b0c:	|     |   jsr 9610 <handleClosestPoint>
    9b12:	|     |   lea 12(sp),sp
    9b16:	|     |   tst.w d0
    9b18:	|     +-- bne.s 9b20 <makeWalkingPerson+0xe2>
    9b1a:	|     |   clr.w d0
    9b1c:	+-----|-- bra.w 9bee <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9b20:	|     \-> movea.l 12(sp),a0
    9b24:	|         move.l 4(a0),d0
    9b28:	|         move.l d0,-(sp)
    9b2a:	|         jsr 15b58 <__fixsfsi>
    9b30:	|         addq.l #4,sp
    9b32:	|         move.l d0,d2
    9b34:	|         movea.l 12(sp),a0
    9b38:	|         move.l (a0),d0
    9b3a:	|         move.l d0,-(sp)
    9b3c:	|         jsr 15b58 <__fixsfsi>
    9b42:	|         addq.l #4,sp
    9b44:	|         move.l d2,-(sp)
    9b46:	|         move.l d0,-(sp)
    9b48:	|         jsr 14ae6 <inFloor>
    9b4e:	|         addq.l #8,sp
    9b50:	|         movea.l 12(sp),a0
    9b54:	|         move.l d0,52(a0)
	if (moveMe -> inPoly == -1) {
    9b58:	|         movea.l 12(sp),a0
    9b5c:	|         move.l 52(a0),d0
    9b60:	|         moveq #-1,d1
    9b62:	|         cmp.l d0,d1
    9b64:	|     /-- bne.s 9bb6 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9b66:	|     |   movea.l 12(sp),a0
    9b6a:	|     |   move.l (a0),d0
    9b6c:	|     |   move.l d0,-(sp)
    9b6e:	|     |   jsr 15b58 <__fixsfsi>
    9b74:	|     |   addq.l #4,sp
    9b76:	|     |   move.l d0,8(sp)
    9b7a:	|     |   movea.l 12(sp),a0
    9b7e:	|     |   move.l 4(a0),d0
    9b82:	|     |   move.l d0,-(sp)
    9b84:	|     |   jsr 15b58 <__fixsfsi>
    9b8a:	|     |   addq.l #4,sp
    9b8c:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9b90:	|     |   moveq #52,d0
    9b92:	|     |   add.l 12(sp),d0
    9b96:	|     |   move.l d0,-(sp)
    9b98:	|     |   lea 8(sp),a0
    9b9c:	|     |   move.l a0,-(sp)
    9b9e:	|     |   moveq #16,d0
    9ba0:	|     |   add.l sp,d0
    9ba2:	|     |   move.l d0,-(sp)
    9ba4:	|     |   jsr 9610 <handleClosestPoint>
    9baa:	|     |   lea 12(sp),sp
    9bae:	|     |   tst.w d0
    9bb0:	|     +-- bne.s 9bb6 <makeWalkingPerson+0x178>
    9bb2:	|     |   clr.w d0
    9bb4:	+-----|-- bra.s 9bee <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9bb6:	|     \-> move.l 12(sp),-(sp)
    9bba:	|         jsr 8906 <doBorderStuff>
    9bc0:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9bc2:	|         clr.l -(sp)
    9bc4:	|         move.l 16(sp),-(sp)
    9bc8:	|         jsr add6 <walkMe>
    9bce:	|         addq.l #8,sp
    9bd0:	|         tst.w d0
    9bd2:	|     /-- bne.s 9bde <makeWalkingPerson+0x1a0>
    9bd4:	|     |   movea.l 12(sp),a0
    9bd8:	|     |   move.w 62(a0),d0
    9bdc:	|  /--|-- beq.s 9bec <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9bde:	|  |  \-> movea.l 12(sp),a0
    9be2:	|  |      move.l 32(sp),64(a0)
		return TRUE;
    9be8:	|  |      moveq #1,d0
    9bea:	+--|----- bra.s 9bee <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9bec:	|  \----> clr.w d0
	}
}
    9bee:	\-------> move.l (sp)+,d2
    9bf0:	          lea 12(sp),sp
    9bf4:	          rts

00009bf6 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9bf6:	       lea -16(sp),sp
    9bfa:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9bfc:	       moveq #12,d0
    9bfe:	       move.l d0,16(sp)
    9c02:	       clr.l 12(sp)
    9c06:	       move.l 1add0 <SysBase>,d0
    9c0c:	       movea.l d0,a6
    9c0e:	       move.l 16(sp),d0
    9c12:	       move.l 12(sp),d1
    9c16:	       jsr -684(a6)
    9c1a:	       move.l d0,8(sp)
    9c1e:	       move.l 8(sp),d0
    9c22:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9c26:	   /-- bne.s 9c3a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9c28:	   |   pea 176da <PutChar+0x1482>
    9c2e:	   |   jsr 15784 <KPrintF>
    9c34:	   |   addq.l #4,sp
        return NULL;    
    9c36:	   |   moveq #0,d0
    9c38:	/--|-- bra.s 9c54 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9c3a:	|  \-> movea.l 4(sp),a0
    9c3e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9c40:	|      movea.l 4(sp),a0
    9c44:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9c48:	|      movea.l 4(sp),a0
    9c4c:	|      clr.l 4(a0)
	return newAnim;
    9c50:	|      move.l 4(sp),d0
}
    9c54:	\----> movea.l (sp)+,a6
    9c56:	       lea 16(sp),sp
    9c5a:	       rts

00009c5c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9c5c:	    move.l d2,-(sp)
	me->x = x;
    9c5e:	    movea.l 8(sp),a0
    9c62:	    move.l 12(sp),(a0)
	me->y = y;
    9c66:	    movea.l 8(sp),a0
    9c6a:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    9c70:	    movea.l 8(sp),a0
    9c74:	    clr.l 8(a0)
	me->oldy = 0;
    9c78:	    movea.l 8(sp),a0
    9c7c:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9c80:	    movea.l 8(sp),a0
    9c84:	    move.l 114(a0),d0
    9c88:	    moveq #2,d1
    9c8a:	    and.l d1,d0
    9c8c:	/-- bne.s 9ce4 <moveAndScale+0x88>
    9c8e:	|   move.w 1a76a <scaleDivide>,d0
    9c94:	+-- beq.s 9ce4 <moveAndScale+0x88>
    9c96:	|   movea.l 8(sp),a0
    9c9a:	|   move.l 4(a0),d2
    9c9e:	|   move.w 1a768 <scaleHorizon>,d0
    9ca4:	|   movea.w d0,a0
    9ca6:	|   move.l a0,-(sp)
    9ca8:	|   jsr 15bc0 <__floatsisf>
    9cae:	|   addq.l #4,sp
    9cb0:	|   move.l d0,-(sp)
    9cb2:	|   move.l d2,-(sp)
    9cb4:	|   jsr 15eb4 <__subsf3>
    9cba:	|   addq.l #8,sp
    9cbc:	|   move.l d0,d2
    9cbe:	|   move.w 1a76a <scaleDivide>,d0
    9cc4:	|   movea.w d0,a0
    9cc6:	|   move.l a0,-(sp)
    9cc8:	|   jsr 15bc0 <__floatsisf>
    9cce:	|   addq.l #4,sp
    9cd0:	|   move.l d0,-(sp)
    9cd2:	|   move.l d2,-(sp)
    9cd4:	|   jsr 15a6c <__divsf3>
    9cda:	|   addq.l #8,sp
    9cdc:	|   movea.l 8(sp),a0
    9ce0:	|   move.l d0,28(a0)
}
    9ce4:	\-> nop
    9ce6:	    move.l (sp)+,d2
    9ce8:	    rts

00009cea <removeOneCharacter>:

void removeOneCharacter (int i) {
    9cea:	          lea -16(sp),sp
    9cee:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9cf0:	          move.l 24(sp),-(sp)
    9cf4:	          jsr 9514 <findPerson>
    9cfa:	          addq.l #4,sp
    9cfc:	          move.l d0,8(sp)

    if (p) {
    9d00:	/-------- beq.w 9de0 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    9d04:	|         move.l 1af30 <overRegion>,d0
    9d0a:	|         cmpi.l #110220,d0
    9d10:	|     /-- bne.s 9d2e <removeOneCharacter+0x44>
    9d12:	|     |   movea.l 1af30 <overRegion>,a0
    9d18:	|     |   move.l 28(a0),d1
    9d1c:	|     |   movea.l 8(sp),a0
    9d20:	|     |   move.l 110(a0),d0
    9d24:	|     |   cmp.l d1,d0
    9d26:	|     +-- bne.s 9d2e <removeOneCharacter+0x44>
            overRegion = NULL;
    9d28:	|     |   clr.l 1af30 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9d2e:	|     \-> movea.l 8(sp),a0
    9d32:	|         move.l 64(a0),d0
    9d36:	|     /-- beq.s 9d4a <removeOneCharacter+0x60>
    9d38:	|     |   movea.l 8(sp),a0
    9d3c:	|     |   move.l 64(a0),d0
    9d40:	|     |   move.l d0,-(sp)
    9d42:	|     |   jsr 35b6 <abortFunction>
    9d48:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    9d4a:	|     \-> movea.l 8(sp),a0
    9d4e:	|         clr.l 64(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    9d52:	|         clr.l 12(sp)
    9d56:	|     /-- bra.s 9d7e <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    9d58:	|  /--|-> movea.l 8(sp),a0
    9d5c:	|  |  |   movea.l 76(a0),a0
    9d60:	|  |  |   move.l (a0),d1
    9d62:	|  |  |   move.l 12(sp),d0
    9d66:	|  |  |   add.l d0,d0
    9d68:	|  |  |   add.l d0,d0
    9d6a:	|  |  |   movea.l d1,a0
    9d6c:	|  |  |   adda.l d0,a0
    9d6e:	|  |  |   move.l (a0),d0
    9d70:	|  |  |   move.l d0,-(sp)
    9d72:	|  |  |   jsr 8882 <deleteAnim>
    9d78:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    9d7a:	|  |  |   addq.l #1,12(sp)
    9d7e:	|  |  \-> moveq #2,d0
    9d80:	|  |      cmp.l 12(sp),d0
    9d84:	|  \----- bge.s 9d58 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    9d86:	|         move.l #110216,16(sp)
    9d8e:	|     /-- bra.s 9d9e <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    9d90:	|  /--|-> movea.l 16(sp),a0
    9d94:	|  |  |   move.l (a0),d0
    9d96:	|  |  |   moveq #32,d1
    9d98:	|  |  |   add.l d0,d1
    9d9a:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    9d9e:	|  |  \-> movea.l 16(sp),a0
    9da2:	|  |      move.l (a0),d0
    9da4:	|  |      cmp.l 8(sp),d0
    9da8:	|  \----- bne.s 9d90 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9daa:	|         movea.l 8(sp),a0
    9dae:	|         move.l 32(a0),d0
    9db2:	|         movea.l 16(sp),a0
    9db6:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    9db8:	|         movea.l 8(sp),a0
    9dbc:	|         move.l 110(a0),d0
    9dc0:	|         move.l d0,-(sp)
    9dc2:	|         jsr c796 <removeObjectType>
    9dc8:	|         addq.l #4,sp
        FreeVec(p);
    9dca:	|         move.l 8(sp),4(sp)
    9dd0:	|         move.l 1add0 <SysBase>,d0
    9dd6:	|         movea.l d0,a6
    9dd8:	|         movea.l 4(sp),a1
    9ddc:	|         jsr -690(a6)
    }
}
    9de0:	\-------> nop
    9de2:	          movea.l (sp)+,a6
    9de4:	          lea 16(sp),sp
    9de8:	          rts

00009dea <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9dea:	       subq.l #8,sp
    9dec:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9dee:	       movea.l 16(sp),a0
    9df2:	       movea.l 76(a0),a0
    9df6:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9dfc:	       movea.l 16(sp),a0
    9e00:	       move.l 88(a0),d2
    9e04:	       move.l 4(sp),-(sp)
    9e08:	       pea b4 <_start+0xb4>
    9e0c:	       jsr 161c0 <__divsi3>
    9e12:	       addq.l #8,sp
    9e14:	       add.l d2,d0
    9e16:	       move.l d0,d1
    9e18:	       addi.l #180,d1
    9e1e:	       movea.l 16(sp),a0
    9e22:	       move.l 96(a0),d0
    9e26:	       move.l d1,d2
    9e28:	       add.l d0,d2
    9e2a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9e2e:	   /-- bra.s 9e38 <rethinkAngle+0x4e>
    9e30:	/--|-> addi.l #-360,8(sp)
    9e38:	|  \-> cmpi.l #359,8(sp)
    9e40:	\----- bgt.s 9e30 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9e42:	       move.l 4(sp),-(sp)
    9e46:	       move.l 12(sp),-(sp)
    9e4a:	       jsr 16142 <__mulsi3>
    9e50:	       addq.l #8,sp
    9e52:	       pea 168 <decodeFilename+0x50>
    9e56:	       move.l d0,-(sp)
    9e58:	       jsr 161c0 <__divsi3>
    9e5e:	       addq.l #8,sp
    9e60:	       movea.l 16(sp),a0
    9e64:	       move.l d0,102(a0)
}
    9e68:	       nop
    9e6a:	       move.l (sp)+,d2
    9e6c:	       addq.l #8,sp
    9e6e:	       rts

00009e70 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    9e70:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    9e72:	          movea.l 8(sp),a0
    9e76:	          move.l 8(a0),d0
    9e7a:	          move.l 12(sp),-(sp)
    9e7e:	          move.l d0,-(sp)
    9e80:	          jsr 8d0 <put2bytes>
    9e86:	          addq.l #8,sp
	if (p -> numFrames) {
    9e88:	          movea.l 8(sp),a0
    9e8c:	          move.l 8(a0),d0
    9e90:	/-------- beq.w 9f34 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    9e94:	|         movea.l 8(sp),a0
    9e98:	|         movea.l (a0),a0
    9e9a:	|         move.l (a0),d0
    9e9c:	|         move.l 12(sp),-(sp)
    9ea0:	|         move.l d0,-(sp)
    9ea2:	|         jsr 958 <put4bytes>
    9ea8:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9eaa:	|         clr.l (sp)
    9eac:	|     /-- bra.s 9f26 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9eae:	|  /--|-> movea.l 8(sp),a0
    9eb2:	|  |  |   movea.l 4(a0),a0
    9eb6:	|  |  |   move.l (sp),d1
    9eb8:	|  |  |   move.l d1,d0
    9eba:	|  |  |   add.l d0,d0
    9ebc:	|  |  |   add.l d1,d0
    9ebe:	|  |  |   add.l d0,d0
    9ec0:	|  |  |   add.l d0,d0
    9ec2:	|  |  |   adda.l d0,a0
    9ec4:	|  |  |   move.l (a0),d0
    9ec6:	|  |  |   move.l 12(sp),-(sp)
    9eca:	|  |  |   move.l d0,-(sp)
    9ecc:	|  |  |   jsr 958 <put4bytes>
    9ed2:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    9ed4:	|  |  |   movea.l 8(sp),a0
    9ed8:	|  |  |   movea.l 4(a0),a0
    9edc:	|  |  |   move.l (sp),d1
    9ede:	|  |  |   move.l d1,d0
    9ee0:	|  |  |   add.l d0,d0
    9ee2:	|  |  |   add.l d1,d0
    9ee4:	|  |  |   add.l d0,d0
    9ee6:	|  |  |   add.l d0,d0
    9ee8:	|  |  |   adda.l d0,a0
    9eea:	|  |  |   move.l 4(a0),d0
    9eee:	|  |  |   move.l 12(sp),-(sp)
    9ef2:	|  |  |   move.l d0,-(sp)
    9ef4:	|  |  |   jsr 958 <put4bytes>
    9efa:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    9efc:	|  |  |   movea.l 8(sp),a0
    9f00:	|  |  |   movea.l 4(a0),a0
    9f04:	|  |  |   move.l (sp),d1
    9f06:	|  |  |   move.l d1,d0
    9f08:	|  |  |   add.l d0,d0
    9f0a:	|  |  |   add.l d1,d0
    9f0c:	|  |  |   add.l d0,d0
    9f0e:	|  |  |   add.l d0,d0
    9f10:	|  |  |   adda.l d0,a0
    9f12:	|  |  |   move.l 8(a0),d0
    9f16:	|  |  |   move.l 12(sp),-(sp)
    9f1a:	|  |  |   move.l d0,-(sp)
    9f1c:	|  |  |   jsr 958 <put4bytes>
    9f22:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    9f24:	|  |  |   addq.l #1,(sp)
    9f26:	|  |  \-> movea.l 8(sp),a0
    9f2a:	|  |      move.l 8(a0),d0
    9f2e:	|  |      cmp.l (sp),d0
    9f30:	|  \----- bgt.w 9eae <saveAnim+0x3e>
		}
	}
	return TRUE;
    9f34:	\-------> moveq #1,d0
}
    9f36:	          addq.l #4,sp
    9f38:	          rts

00009f3a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    9f3a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    9f3c:	             movea.l 8(sp),a0
    9f40:	             move.l 4(a0),d0
    9f44:	             move.l 12(sp),-(sp)
    9f48:	             move.l d0,-(sp)
    9f4a:	             jsr 8d0 <put2bytes>
    9f50:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    9f52:	             clr.l (sp)
    9f54:	   /-------- bra.s 9f80 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    9f56:	/--|-------> movea.l 8(sp),a0
    9f5a:	|  |         move.l (a0),d1
    9f5c:	|  |         move.l (sp),d0
    9f5e:	|  |         add.l d0,d0
    9f60:	|  |         add.l d0,d0
    9f62:	|  |         movea.l d1,a0
    9f64:	|  |         adda.l d0,a0
    9f66:	|  |         move.l (a0),d0
    9f68:	|  |         move.l 12(sp),-(sp)
    9f6c:	|  |         move.l d0,-(sp)
    9f6e:	|  |         jsr 9e70 <saveAnim>
    9f74:	|  |         addq.l #8,sp
    9f76:	|  |         tst.w d0
    9f78:	|  |     /-- bne.s 9f7e <saveCostume+0x44>
    9f7a:	|  |     |   clr.w d0
    9f7c:	|  |  /--|-- bra.s 9f94 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    9f7e:	|  |  |  \-> addq.l #1,(sp)
    9f80:	|  \--|----> movea.l 8(sp),a0
    9f84:	|     |      move.l 4(a0),d1
    9f88:	|     |      move.l d1,d0
    9f8a:	|     |      add.l d0,d0
    9f8c:	|     |      add.l d1,d0
    9f8e:	|     |      cmp.l (sp),d0
    9f90:	\-----|----- bgt.s 9f56 <saveCostume+0x1c>
	}

	return TRUE;
    9f92:	      |      moveq #1,d0
}
    9f94:	      \----> addq.l #4,sp
    9f96:	             rts

00009f98 <savePeople>:

BOOL savePeople (BPTR fp) {
    9f98:	             lea -144(sp),sp
    9f9c:	             move.l a6,-(sp)
    9f9e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    9fa0:	             move.l 1ae88 <allPeople>,148(sp)
	int countPeople = 0, a;
    9fa8:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    9fac:	             move.w 1a768 <scaleHorizon>,d0
    9fb2:	             movea.w d0,a0
    9fb4:	             move.l 156(sp),-(sp)
    9fb8:	             move.l a0,-(sp)
    9fba:	             jsr a9c <putSigned>
    9fc0:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    9fc2:	             move.w 1a76a <scaleDivide>,d0
    9fc8:	             movea.w d0,a0
    9fca:	             move.l 156(sp),-(sp)
    9fce:	             move.l a0,-(sp)
    9fd0:	             jsr a9c <putSigned>
    9fd6:	             addq.l #8,sp

	while (me) {
    9fd8:	         /-- bra.s 9fe8 <savePeople+0x50>
		countPeople ++;
    9fda:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    9fde:	      |  |   movea.l 148(sp),a0
    9fe2:	      |  |   move.l 32(a0),148(sp)
	while (me) {
    9fe8:	      |  \-> tst.l 148(sp)
    9fec:	      \----- bne.s 9fda <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    9fee:	             move.l 156(sp),-(sp)
    9ff2:	             move.l 148(sp),-(sp)
    9ff6:	             jsr 8d0 <put2bytes>
    9ffc:	             addq.l #8,sp

	me = allPeople;
    9ffe:	             move.l 1ae88 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a006:	             clr.l 140(sp)
    a00a:	   /-------- bra.w a462 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a00e:	/--|-------> movea.l 148(sp),a0
    a012:	|  |         move.l (a0),d0
    a014:	|  |         move.l 156(sp),-(sp)
    a018:	|  |         move.l d0,-(sp)
    a01a:	|  |         jsr a46 <putFloat>
    a020:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a022:	|  |         movea.l 148(sp),a0
    a026:	|  |         move.l 4(a0),d0
    a02a:	|  |         move.l 156(sp),-(sp)
    a02e:	|  |         move.l d0,-(sp)
    a030:	|  |         jsr a46 <putFloat>
    a036:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a038:	|  |         movea.l 148(sp),a0
    a03c:	|  |         move.l 76(a0),d0
    a040:	|  |         move.l 156(sp),-(sp)
    a044:	|  |         move.l d0,-(sp)
    a046:	|  |         jsr 9f3a <saveCostume>
    a04c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a04e:	|  |         movea.l 148(sp),a0
    a052:	|  |         move.l 68(a0),d0
    a056:	|  |         move.l 156(sp),-(sp)
    a05a:	|  |         move.l d0,-(sp)
    a05c:	|  |         jsr 9e70 <saveAnim>
    a062:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a064:	|  |         move.l 156(sp),136(sp)
    a06a:	|  |         movea.l 148(sp),a0
    a06e:	|  |         move.l 68(a0),d1
    a072:	|  |         movea.l 148(sp),a0
    a076:	|  |         move.l 72(a0),d0
    a07a:	|  |         cmp.l d1,d0
    a07c:	|  |         seq d0
    a07e:	|  |         neg.b d0
    a080:	|  |         move.b d0,d0
    a082:	|  |         andi.l #255,d0
    a088:	|  |         move.l d0,132(sp)
    a08c:	|  |         move.l 1add8 <DOSBase>,d0
    a092:	|  |         movea.l d0,a6
    a094:	|  |         move.l 136(sp),d1
    a098:	|  |         move.l 132(sp),d2
    a09c:	|  |         jsr -312(a6)
    a0a0:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a0a4:	|  |         movea.l 148(sp),a0
    a0a8:	|  |         move.l 28(a0),d0
    a0ac:	|  |         move.l 156(sp),-(sp)
    a0b0:	|  |         move.l d0,-(sp)
    a0b2:	|  |         jsr a46 <putFloat>
    a0b8:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a0ba:	|  |         movea.l 148(sp),a0
    a0be:	|  |         move.l 114(a0),d0
    a0c2:	|  |         move.l 156(sp),-(sp)
    a0c6:	|  |         move.l d0,-(sp)
    a0c8:	|  |         jsr 8d0 <put2bytes>
    a0ce:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a0d0:	|  |         movea.l 148(sp),a0
    a0d4:	|  |         move.l 16(a0),d0
    a0d8:	|  |         move.l 156(sp),-(sp)
    a0dc:	|  |         move.l d0,-(sp)
    a0de:	|  |         jsr 8d0 <put2bytes>
    a0e4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a0e6:	|  |         movea.l 148(sp),a0
    a0ea:	|  |         move.l 36(a0),d0
    a0ee:	|  |         move.l 156(sp),-(sp)
    a0f2:	|  |         move.l d0,-(sp)
    a0f4:	|  |         jsr 8d0 <put2bytes>
    a0fa:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a0fc:	|  |         movea.l 148(sp),a0
    a100:	|  |         move.l 40(a0),d0
    a104:	|  |         move.l 156(sp),-(sp)
    a108:	|  |         move.l d0,-(sp)
    a10a:	|  |         jsr 8d0 <put2bytes>
    a110:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a112:	|  |         movea.l 148(sp),a0
    a116:	|  |         move.l 44(a0),d0
    a11a:	|  |         move.l 156(sp),-(sp)
    a11e:	|  |         move.l d0,-(sp)
    a120:	|  |         jsr 8d0 <put2bytes>
    a126:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a128:	|  |         movea.l 148(sp),a0
    a12c:	|  |         move.l 48(a0),d0
    a130:	|  |         move.l 156(sp),-(sp)
    a134:	|  |         move.l d0,-(sp)
    a136:	|  |         jsr 8d0 <put2bytes>
    a13c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a13e:	|  |         movea.l 148(sp),a0
    a142:	|  |         move.l 80(a0),d0
    a146:	|  |         move.l 156(sp),-(sp)
    a14a:	|  |         move.l d0,-(sp)
    a14c:	|  |         jsr 8d0 <put2bytes>
    a152:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a154:	|  |         movea.l 148(sp),a0
    a158:	|  |         move.l 84(a0),d0
    a15c:	|  |         move.l 156(sp),-(sp)
    a160:	|  |         move.l d0,-(sp)
    a162:	|  |         jsr 8d0 <put2bytes>
    a168:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a16a:	|  |         movea.l 148(sp),a0
    a16e:	|  |         move.l 24(a0),d0
    a172:	|  |         move.l 156(sp),-(sp)
    a176:	|  |         move.l d0,-(sp)
    a178:	|  |         jsr 8d0 <put2bytes>
    a17e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a180:	|  |         movea.l 148(sp),a0
    a184:	|  |         move.l 118(a0),d0
    a188:	|  |         move.l 156(sp),-(sp)
    a18c:	|  |         move.l d0,-(sp)
    a18e:	|  |         jsr 8d0 <put2bytes>
    a194:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a196:	|  |         movea.l 148(sp),a0
    a19a:	|  |         move.l 20(a0),d0
    a19e:	|  |         move.l d0,d0
    a1a0:	|  |         movea.w d0,a0
    a1a2:	|  |         move.l 156(sp),-(sp)
    a1a6:	|  |         move.l a0,-(sp)
    a1a8:	|  |         jsr a9c <putSigned>
    a1ae:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a1b0:	|  |         move.l 156(sp),124(sp)
    a1b6:	|  |         movea.l 148(sp),a0
    a1ba:	|  |         move.w 100(a0),d0
    a1be:	|  |         movea.w d0,a0
    a1c0:	|  |         move.l a0,120(sp)
    a1c4:	|  |         move.l 1add8 <DOSBase>,d0
    a1ca:	|  |         movea.l d0,a6
    a1cc:	|  |         move.l 124(sp),d1
    a1d0:	|  |         move.l 120(sp),d2
    a1d4:	|  |         jsr -312(a6)
    a1d8:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a1dc:	|  |         move.l 156(sp),112(sp)
    a1e2:	|  |         movea.l 148(sp),a0
    a1e6:	|  |         move.w 60(a0),d0
    a1ea:	|  |         movea.w d0,a0
    a1ec:	|  |         move.l a0,108(sp)
    a1f0:	|  |         move.l 1add8 <DOSBase>,d0
    a1f6:	|  |         movea.l d0,a6
    a1f8:	|  |         move.l 112(sp),d1
    a1fc:	|  |         move.l 108(sp),d2
    a200:	|  |         jsr -312(a6)
    a204:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a208:	|  |         move.l 156(sp),100(sp)
    a20e:	|  |         movea.l 148(sp),a0
    a212:	|  |         move.w 62(a0),d0
    a216:	|  |         movea.w d0,a0
    a218:	|  |         move.l a0,96(sp)
    a21c:	|  |         move.l 1add8 <DOSBase>,d0
    a222:	|  |         movea.l d0,a6
    a224:	|  |         move.l 100(sp),d1
    a228:	|  |         move.l 96(sp),d2
    a22c:	|  |         jsr -312(a6)
    a230:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a234:	|  |         movea.l 148(sp),a0
    a238:	|  |         move.l 64(a0),d0
    a23c:	|  |  /----- beq.s a27a <savePeople+0x2e2>
			FPutC (fp, 1);
    a23e:	|  |  |      move.l 156(sp),76(sp)
    a244:	|  |  |      moveq #1,d0
    a246:	|  |  |      move.l d0,72(sp)
    a24a:	|  |  |      move.l 1add8 <DOSBase>,d0
    a250:	|  |  |      movea.l d0,a6
    a252:	|  |  |      move.l 76(sp),d1
    a256:	|  |  |      move.l 72(sp),d2
    a25a:	|  |  |      jsr -312(a6)
    a25e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a262:	|  |  |      movea.l 148(sp),a0
    a266:	|  |  |      move.l 64(a0),d0
    a26a:	|  |  |      move.l 156(sp),-(sp)
    a26e:	|  |  |      move.l d0,-(sp)
    a270:	|  |  |      jsr b410 <saveFunction>
    a276:	|  |  |      addq.l #8,sp
    a278:	|  |  |  /-- bra.s a29e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a27a:	|  |  \--|-> move.l 156(sp),88(sp)
    a280:	|  |     |   moveq #1,d0
    a282:	|  |     |   move.l d0,84(sp)
    a286:	|  |     |   move.l 1add8 <DOSBase>,d0
    a28c:	|  |     |   movea.l d0,a6
    a28e:	|  |     |   move.l 88(sp),d1
    a292:	|  |     |   move.l 84(sp),d2
    a296:	|  |     |   jsr -312(a6)
    a29a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a29e:	|  |     \-> movea.l 148(sp),a0
    a2a2:	|  |         move.l 102(a0),d0
    a2a6:	|  |         move.l 156(sp),-(sp)
    a2aa:	|  |         move.l d0,-(sp)
    a2ac:	|  |         jsr 8d0 <put2bytes>
    a2b2:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a2b4:	|  |         movea.l 148(sp),a0
    a2b8:	|  |         move.l 88(a0),d0
    a2bc:	|  |         move.l 156(sp),-(sp)
    a2c0:	|  |         move.l d0,-(sp)
    a2c2:	|  |         jsr 8d0 <put2bytes>
    a2c8:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a2ca:	|  |         movea.l 148(sp),a0
    a2ce:	|  |         move.l 96(a0),d0
    a2d2:	|  |         move.l 156(sp),-(sp)
    a2d6:	|  |         move.l d0,-(sp)
    a2d8:	|  |         jsr 8d0 <put2bytes>
    a2de:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a2e0:	|  |         movea.l 148(sp),a0
    a2e4:	|  |         move.l 92(a0),d0
    a2e8:	|  |         move.l 156(sp),-(sp)
    a2ec:	|  |         move.l d0,-(sp)
    a2ee:	|  |         jsr 8d0 <put2bytes>
    a2f4:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a2f6:	|  |         movea.l 148(sp),a0
    a2fa:	|  |         move.l 106(a0),d0
    a2fe:	|  |         move.l d0,d0
    a300:	|  |         movea.w d0,a0
    a302:	|  |         move.l 156(sp),-(sp)
    a306:	|  |         move.l a0,-(sp)
    a308:	|  |         jsr a9c <putSigned>
    a30e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a310:	|  |         movea.l 148(sp),a0
    a314:	|  |         move.l 52(a0),d0
    a318:	|  |         move.l d0,d0
    a31a:	|  |         movea.w d0,a0
    a31c:	|  |         move.l 156(sp),-(sp)
    a320:	|  |         move.l a0,-(sp)
    a322:	|  |         jsr a9c <putSigned>
    a328:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a32a:	|  |         movea.l 148(sp),a0
    a32e:	|  |         move.l 56(a0),d0
    a332:	|  |         move.l d0,d0
    a334:	|  |         movea.w d0,a0
    a336:	|  |         move.l 156(sp),-(sp)
    a33a:	|  |         move.l a0,-(sp)
    a33c:	|  |         jsr a9c <putSigned>
    a342:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a344:	|  |         move.l 156(sp),64(sp)
    a34a:	|  |         movea.l 148(sp),a0
    a34e:	|  |         move.b 122(a0),d0
    a352:	|  |         move.b d0,d0
    a354:	|  |         andi.l #255,d0
    a35a:	|  |         move.l d0,60(sp)
    a35e:	|  |         move.l 1add8 <DOSBase>,d0
    a364:	|  |         movea.l d0,a6
    a366:	|  |         move.l 64(sp),d1
    a36a:	|  |         move.l 60(sp),d2
    a36e:	|  |         jsr -312(a6)
    a372:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a376:	|  |         move.l 156(sp),52(sp)
    a37c:	|  |         movea.l 148(sp),a0
    a380:	|  |         move.b 123(a0),d0
    a384:	|  |         move.b d0,d0
    a386:	|  |         andi.l #255,d0
    a38c:	|  |         move.l d0,48(sp)
    a390:	|  |         move.l 1add8 <DOSBase>,d0
    a396:	|  |         movea.l d0,a6
    a398:	|  |         move.l 52(sp),d1
    a39c:	|  |         move.l 48(sp),d2
    a3a0:	|  |         jsr -312(a6)
    a3a4:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a3a8:	|  |         move.l 156(sp),40(sp)
    a3ae:	|  |         movea.l 148(sp),a0
    a3b2:	|  |         move.b 124(a0),d0
    a3b6:	|  |         move.b d0,d0
    a3b8:	|  |         andi.l #255,d0
    a3be:	|  |         move.l d0,36(sp)
    a3c2:	|  |         move.l 1add8 <DOSBase>,d0
    a3c8:	|  |         movea.l d0,a6
    a3ca:	|  |         move.l 40(sp),d1
    a3ce:	|  |         move.l 36(sp),d2
    a3d2:	|  |         jsr -312(a6)
    a3d6:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a3da:	|  |         move.l 156(sp),28(sp)
    a3e0:	|  |         movea.l 148(sp),a0
    a3e4:	|  |         move.b 125(a0),d0
    a3e8:	|  |         move.b d0,d0
    a3ea:	|  |         andi.l #255,d0
    a3f0:	|  |         move.l d0,24(sp)
    a3f4:	|  |         move.l 1add8 <DOSBase>,d0
    a3fa:	|  |         movea.l d0,a6
    a3fc:	|  |         move.l 28(sp),d1
    a400:	|  |         move.l 24(sp),d2
    a404:	|  |         jsr -312(a6)
    a408:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a40c:	|  |         move.l 156(sp),16(sp)
    a412:	|  |         movea.l 148(sp),a0
    a416:	|  |         move.b 126(a0),d0
    a41a:	|  |         move.b d0,d0
    a41c:	|  |         andi.l #255,d0
    a422:	|  |         move.l d0,12(sp)
    a426:	|  |         move.l 1add8 <DOSBase>,d0
    a42c:	|  |         movea.l d0,a6
    a42e:	|  |         move.l 16(sp),d1
    a432:	|  |         move.l 12(sp),d2
    a436:	|  |         jsr -312(a6)
    a43a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a43e:	|  |         movea.l 148(sp),a0
    a442:	|  |         move.l 110(a0),d0
    a446:	|  |         move.l 156(sp),-(sp)
    a44a:	|  |         move.l d0,-(sp)
    a44c:	|  |         jsr c836 <saveObjectRef>
    a452:	|  |         addq.l #8,sp

		me = me -> next;
    a454:	|  |         movea.l 148(sp),a0
    a458:	|  |         move.l 32(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a45e:	|  |         addq.l #1,140(sp)
    a462:	|  \-------> movea.l 140(sp),a0
    a466:	|            cmpa.l 144(sp),a0
    a46a:	\----------- blt.w a00e <savePeople+0x76>
	}
	return TRUE;
    a46e:	             moveq #1,d0
}
    a470:	             move.l (sp)+,d2
    a472:	             movea.l (sp)+,a6
    a474:	             lea 144(sp),sp
    a478:	             rts

0000a47a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a47a:	movea.l 4(sp),a0
    a47e:	move.l 8(sp),(a0)
}
    a482:	nop
    a484:	rts

0000a486 <setDrawMode>:


void setDrawMode (int h, int ob) {
    a486:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a488:	       move.l 12(sp),-(sp)
    a48c:	       jsr 9514 <findPerson>
    a492:	       addq.l #4,sp
    a494:	       move.l d0,(sp)
	if (! moveMe) return;
    a496:	/----- beq.s a4aa <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a498:	|      move.l 8(sp),-(sp)
    a49c:	|      move.l 4(sp),-(sp)
    a4a0:	|      jsr a4b0 <setMyDrawMode>
    a4a6:	|      addq.l #8,sp
    a4a8:	|  /-- bra.s a4ac <setDrawMode+0x26>
	if (! moveMe) return;
    a4aa:	\--|-> nop
}
    a4ac:	   \-> addq.l #4,sp
    a4ae:	       rts

0000a4b0 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a4b0:	       moveq #19,d0
    a4b2:	       cmp.l 8(sp),d0
    a4b6:	/----- bcs.w a98e <setMyDrawMode+0x4de>
    a4ba:	|      move.l 8(sp),d0
    a4be:	|      add.l d0,d0
    a4c0:	|      movea.l d0,a0
    a4c2:	|      adda.l #42190,a0
    a4c8:	|      move.w (a0),d0
    a4ca:	|      jmp (a4ce <setMyDrawMode+0x1e>,pc,d0.w)
    a4ce:	|      .short 0x04c0
    a4d0:	|      ori.l #6684712,-(a4)
    a4d6:	|      btst d0,-(a0)
    a4d8:	|      bchg d0,(a6)+
    a4da:	|      bclr d0,(a4)+
    a4dc:	|      bset d0,(a2)+
    a4de:	|      andi.b #84,(a6)
    a4e2:	|      andi.l #55575312,(a2)
    a4e8:	|      .short 0x02d0
    a4ea:	|      bclr d1,(a0)
    a4ec:	|      .short 0x044a
    a4ee:	|      .short 0x040c
    a4f0:	|      movep.l d1,1158(a6)
    a4f4:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a4f6:	|      movea.l 4(sp),a0
    a4fa:	|      clr.b 124(a0)
    a4fe:	|      movea.l 4(sp),a0
    a502:	|      move.b 124(a0),d0
    a506:	|      movea.l 4(sp),a0
    a50a:	|      move.b d0,123(a0)
    a50e:	|      movea.l 4(sp),a0
    a512:	|      move.b 123(a0),d0
    a516:	|      movea.l 4(sp),a0
    a51a:	|      move.b d0,122(a0)
			moveMe->colourmix = 0;
    a51e:	|      movea.l 4(sp),a0
    a522:	|      clr.b 125(a0)
			moveMe->transparency = 64;
    a526:	|      movea.l 4(sp),a0
    a52a:	|      move.b #64,126(a0)
			break;
    a530:	|  /-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a534:	|  |   movea.l 4(sp),a0
    a538:	|  |   clr.b 124(a0)
    a53c:	|  |   movea.l 4(sp),a0
    a540:	|  |   move.b 124(a0),d0
    a544:	|  |   movea.l 4(sp),a0
    a548:	|  |   move.b d0,123(a0)
    a54c:	|  |   movea.l 4(sp),a0
    a550:	|  |   move.b 123(a0),d0
    a554:	|  |   movea.l 4(sp),a0
    a558:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 0;
    a55c:	|  |   movea.l 4(sp),a0
    a560:	|  |   clr.b 125(a0)
			moveMe->transparency = 128;
    a564:	|  |   movea.l 4(sp),a0
    a568:	|  |   move.b #-128,126(a0)
			break;
    a56e:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a572:	|  |   movea.l 4(sp),a0
    a576:	|  |   clr.b 124(a0)
    a57a:	|  |   movea.l 4(sp),a0
    a57e:	|  |   move.b 124(a0),d0
    a582:	|  |   movea.l 4(sp),a0
    a586:	|  |   move.b d0,123(a0)
    a58a:	|  |   movea.l 4(sp),a0
    a58e:	|  |   move.b 123(a0),d0
    a592:	|  |   movea.l 4(sp),a0
    a596:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 0;
    a59a:	|  |   movea.l 4(sp),a0
    a59e:	|  |   clr.b 125(a0)
			moveMe->transparency = 192;
    a5a2:	|  |   movea.l 4(sp),a0
    a5a6:	|  |   move.b #-64,126(a0)
			break;
    a5ac:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a5b0:	|  |   movea.l 4(sp),a0
    a5b4:	|  |   clr.b 124(a0)
    a5b8:	|  |   movea.l 4(sp),a0
    a5bc:	|  |   move.b 124(a0),d0
    a5c0:	|  |   movea.l 4(sp),a0
    a5c4:	|  |   move.b d0,123(a0)
    a5c8:	|  |   movea.l 4(sp),a0
    a5cc:	|  |   move.b 123(a0),d0
    a5d0:	|  |   movea.l 4(sp),a0
    a5d4:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 0;
    a5d8:	|  |   movea.l 4(sp),a0
    a5dc:	|  |   clr.b 125(a0)
			moveMe->transparency = 254;
    a5e0:	|  |   movea.l 4(sp),a0
    a5e4:	|  |   move.b #-2,126(a0)
			break;
    a5ea:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a5ee:	|  |   movea.l 4(sp),a0
    a5f2:	|  |   clr.b 124(a0)
    a5f6:	|  |   movea.l 4(sp),a0
    a5fa:	|  |   move.b 124(a0),d0
    a5fe:	|  |   movea.l 4(sp),a0
    a602:	|  |   move.b d0,123(a0)
    a606:	|  |   movea.l 4(sp),a0
    a60a:	|  |   move.b 123(a0),d0
    a60e:	|  |   movea.l 4(sp),a0
    a612:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 192;
    a616:	|  |   movea.l 4(sp),a0
    a61a:	|  |   move.b #-64,125(a0)
			moveMe->transparency = 0;
    a620:	|  |   movea.l 4(sp),a0
    a624:	|  |   clr.b 126(a0)
			break;
    a628:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a62c:	|  |   movea.l 4(sp),a0
    a630:	|  |   clr.b 124(a0)
    a634:	|  |   movea.l 4(sp),a0
    a638:	|  |   move.b 124(a0),d0
    a63c:	|  |   movea.l 4(sp),a0
    a640:	|  |   move.b d0,123(a0)
    a644:	|  |   movea.l 4(sp),a0
    a648:	|  |   move.b 123(a0),d0
    a64c:	|  |   movea.l 4(sp),a0
    a650:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 128;
    a654:	|  |   movea.l 4(sp),a0
    a658:	|  |   move.b #-128,125(a0)
			moveMe->transparency = 0;
    a65e:	|  |   movea.l 4(sp),a0
    a662:	|  |   clr.b 126(a0)
			break;
    a666:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a66a:	|  |   movea.l 4(sp),a0
    a66e:	|  |   clr.b 124(a0)
    a672:	|  |   movea.l 4(sp),a0
    a676:	|  |   move.b 124(a0),d0
    a67a:	|  |   movea.l 4(sp),a0
    a67e:	|  |   move.b d0,123(a0)
    a682:	|  |   movea.l 4(sp),a0
    a686:	|  |   move.b 123(a0),d0
    a68a:	|  |   movea.l 4(sp),a0
    a68e:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 64;
    a692:	|  |   movea.l 4(sp),a0
    a696:	|  |   move.b #64,125(a0)
			moveMe->transparency = 0;
    a69c:	|  |   movea.l 4(sp),a0
    a6a0:	|  |   clr.b 126(a0)
			break;
    a6a4:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6a8:	|  |   movea.l 4(sp),a0
    a6ac:	|  |   clr.b 124(a0)
    a6b0:	|  |   movea.l 4(sp),a0
    a6b4:	|  |   move.b 124(a0),d0
    a6b8:	|  |   movea.l 4(sp),a0
    a6bc:	|  |   move.b d0,123(a0)
    a6c0:	|  |   movea.l 4(sp),a0
    a6c4:	|  |   move.b 123(a0),d0
    a6c8:	|  |   movea.l 4(sp),a0
    a6cc:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a6d0:	|  |   movea.l 4(sp),a0
    a6d4:	|  |   st 125(a0)
			moveMe->transparency = 0;
    a6d8:	|  |   movea.l 4(sp),a0
    a6dc:	|  |   clr.b 126(a0)
			break;
    a6e0:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6e4:	|  |   movea.l 4(sp),a0
    a6e8:	|  |   clr.b 124(a0)
    a6ec:	|  |   movea.l 4(sp),a0
    a6f0:	|  |   move.b 124(a0),d0
    a6f4:	|  |   movea.l 4(sp),a0
    a6f8:	|  |   move.b d0,123(a0)
    a6fc:	|  |   movea.l 4(sp),a0
    a700:	|  |   move.b 123(a0),d0
    a704:	|  |   movea.l 4(sp),a0
    a708:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a70c:	|  |   movea.l 4(sp),a0
    a710:	|  |   st 125(a0)
			moveMe->transparency = 64;
    a714:	|  |   movea.l 4(sp),a0
    a718:	|  |   move.b #64,126(a0)
			break;
    a71e:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a722:	|  |   movea.l 4(sp),a0
    a726:	|  |   clr.b 124(a0)
    a72a:	|  |   movea.l 4(sp),a0
    a72e:	|  |   move.b 124(a0),d0
    a732:	|  |   movea.l 4(sp),a0
    a736:	|  |   move.b d0,123(a0)
    a73a:	|  |   movea.l 4(sp),a0
    a73e:	|  |   move.b 123(a0),d0
    a742:	|  |   movea.l 4(sp),a0
    a746:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a74a:	|  |   movea.l 4(sp),a0
    a74e:	|  |   st 125(a0)
			moveMe->transparency = 128;
    a752:	|  |   movea.l 4(sp),a0
    a756:	|  |   move.b #-128,126(a0)
			break;
    a75c:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a760:	|  |   movea.l 4(sp),a0
    a764:	|  |   clr.b 124(a0)
    a768:	|  |   movea.l 4(sp),a0
    a76c:	|  |   move.b 124(a0),d0
    a770:	|  |   movea.l 4(sp),a0
    a774:	|  |   move.b d0,123(a0)
    a778:	|  |   movea.l 4(sp),a0
    a77c:	|  |   move.b 123(a0),d0
    a780:	|  |   movea.l 4(sp),a0
    a784:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a788:	|  |   movea.l 4(sp),a0
    a78c:	|  |   st 125(a0)
			moveMe->transparency = 192;
    a790:	|  |   movea.l 4(sp),a0
    a794:	|  |   move.b #-64,126(a0)
			break;
    a79a:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a79e:	|  |   movea.l 4(sp),a0
    a7a2:	|  |   move.b #-128,124(a0)
    a7a8:	|  |   movea.l 4(sp),a0
    a7ac:	|  |   move.b 124(a0),d0
    a7b0:	|  |   movea.l 4(sp),a0
    a7b4:	|  |   move.b d0,123(a0)
    a7b8:	|  |   movea.l 4(sp),a0
    a7bc:	|  |   move.b 123(a0),d0
    a7c0:	|  |   movea.l 4(sp),a0
    a7c4:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 192;
    a7c8:	|  |   movea.l 4(sp),a0
    a7cc:	|  |   move.b #-64,125(a0)
			moveMe->transparency = 0;
    a7d2:	|  |   movea.l 4(sp),a0
    a7d6:	|  |   clr.b 126(a0)
			break;
    a7da:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a7de:	|  |   movea.l 4(sp),a0
    a7e2:	|  |   move.b #-128,124(a0)
    a7e8:	|  |   movea.l 4(sp),a0
    a7ec:	|  |   move.b 124(a0),d0
    a7f0:	|  |   movea.l 4(sp),a0
    a7f4:	|  |   move.b d0,123(a0)
    a7f8:	|  |   movea.l 4(sp),a0
    a7fc:	|  |   move.b 123(a0),d0
    a800:	|  |   movea.l 4(sp),a0
    a804:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 128;
    a808:	|  |   movea.l 4(sp),a0
    a80c:	|  |   move.b #-128,125(a0)
			moveMe->transparency = 0;
    a812:	|  |   movea.l 4(sp),a0
    a816:	|  |   clr.b 126(a0)
			break;
    a81a:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a81e:	|  |   movea.l 4(sp),a0
    a822:	|  |   move.b #-128,124(a0)
    a828:	|  |   movea.l 4(sp),a0
    a82c:	|  |   move.b 124(a0),d0
    a830:	|  |   movea.l 4(sp),a0
    a834:	|  |   move.b d0,123(a0)
    a838:	|  |   movea.l 4(sp),a0
    a83c:	|  |   move.b 123(a0),d0
    a840:	|  |   movea.l 4(sp),a0
    a844:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 64;
    a848:	|  |   movea.l 4(sp),a0
    a84c:	|  |   move.b #64,125(a0)
			moveMe->transparency = 0;
    a852:	|  |   movea.l 4(sp),a0
    a856:	|  |   clr.b 126(a0)
			break;
    a85a:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a85e:	|  |   movea.l 4(sp),a0
    a862:	|  |   move.b #-128,124(a0)
    a868:	|  |   movea.l 4(sp),a0
    a86c:	|  |   move.b 124(a0),d0
    a870:	|  |   movea.l 4(sp),a0
    a874:	|  |   move.b d0,123(a0)
    a878:	|  |   movea.l 4(sp),a0
    a87c:	|  |   move.b 123(a0),d0
    a880:	|  |   movea.l 4(sp),a0
    a884:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a888:	|  |   movea.l 4(sp),a0
    a88c:	|  |   st 125(a0)
			moveMe->transparency = 0;
    a890:	|  |   movea.l 4(sp),a0
    a894:	|  |   clr.b 126(a0)
			break;
    a898:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a89c:	|  |   movea.l 4(sp),a0
    a8a0:	|  |   st 124(a0)
    a8a4:	|  |   movea.l 4(sp),a0
    a8a8:	|  |   move.b 124(a0),d0
    a8ac:	|  |   movea.l 4(sp),a0
    a8b0:	|  |   move.b d0,123(a0)
    a8b4:	|  |   movea.l 4(sp),a0
    a8b8:	|  |   move.b 123(a0),d0
    a8bc:	|  |   movea.l 4(sp),a0
    a8c0:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 192;
    a8c4:	|  |   movea.l 4(sp),a0
    a8c8:	|  |   move.b #-64,125(a0)
			moveMe->transparency = 0;
    a8ce:	|  |   movea.l 4(sp),a0
    a8d2:	|  |   clr.b 126(a0)
			break;
    a8d6:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a8da:	|  |   movea.l 4(sp),a0
    a8de:	|  |   st 124(a0)
    a8e2:	|  |   movea.l 4(sp),a0
    a8e6:	|  |   move.b 124(a0),d0
    a8ea:	|  |   movea.l 4(sp),a0
    a8ee:	|  |   move.b d0,123(a0)
    a8f2:	|  |   movea.l 4(sp),a0
    a8f6:	|  |   move.b 123(a0),d0
    a8fa:	|  |   movea.l 4(sp),a0
    a8fe:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 128;
    a902:	|  |   movea.l 4(sp),a0
    a906:	|  |   move.b #-128,125(a0)
			moveMe->transparency = 0;
    a90c:	|  |   movea.l 4(sp),a0
    a910:	|  |   clr.b 126(a0)
			break;
    a914:	|  +-- bra.w a9c8 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a918:	|  |   movea.l 4(sp),a0
    a91c:	|  |   st 124(a0)
    a920:	|  |   movea.l 4(sp),a0
    a924:	|  |   move.b 124(a0),d0
    a928:	|  |   movea.l 4(sp),a0
    a92c:	|  |   move.b d0,123(a0)
    a930:	|  |   movea.l 4(sp),a0
    a934:	|  |   move.b 123(a0),d0
    a938:	|  |   movea.l 4(sp),a0
    a93c:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 64;
    a940:	|  |   movea.l 4(sp),a0
    a944:	|  |   move.b #64,125(a0)
			moveMe->transparency = 0;
    a94a:	|  |   movea.l 4(sp),a0
    a94e:	|  |   clr.b 126(a0)
			break;
    a952:	|  +-- bra.s a9c8 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a954:	|  |   movea.l 4(sp),a0
    a958:	|  |   st 124(a0)
    a95c:	|  |   movea.l 4(sp),a0
    a960:	|  |   move.b 124(a0),d0
    a964:	|  |   movea.l 4(sp),a0
    a968:	|  |   move.b d0,123(a0)
    a96c:	|  |   movea.l 4(sp),a0
    a970:	|  |   move.b 123(a0),d0
    a974:	|  |   movea.l 4(sp),a0
    a978:	|  |   move.b d0,122(a0)
			moveMe->colourmix = 255;
    a97c:	|  |   movea.l 4(sp),a0
    a980:	|  |   st 125(a0)
			moveMe->transparency = 0;
    a984:	|  |   movea.l 4(sp),a0
    a988:	|  |   clr.b 126(a0)
			break;
    a98c:	|  +-- bra.s a9c8 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a98e:	\--|-> movea.l 4(sp),a0
    a992:	   |   clr.b 124(a0)
    a996:	   |   movea.l 4(sp),a0
    a99a:	   |   move.b 124(a0),d0
    a99e:	   |   movea.l 4(sp),a0
    a9a2:	   |   move.b d0,123(a0)
    a9a6:	   |   movea.l 4(sp),a0
    a9aa:	   |   move.b 123(a0),d0
    a9ae:	   |   movea.l 4(sp),a0
    a9b2:	   |   move.b d0,122(a0)
			moveMe->colourmix = 0;
    a9b6:	   |   movea.l 4(sp),a0
    a9ba:	   |   clr.b 125(a0)
			moveMe->transparency = 0;
    a9be:	   |   movea.l 4(sp),a0
    a9c2:	   |   clr.b 126(a0)
			break;
    a9c6:	   |   nop
	}
}
    a9c8:	   \-> nop
    a9ca:	       rts

0000a9cc <shufflePeople>:

void shufflePeople () {
    a9cc:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    a9d0:	             move.l #110216,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    a9d8:	             move.l 1ae88 <allPeople>,d0
    a9de:	/----------- beq.w aab4 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    a9e2:	|     /----- bra.w aaa4 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    a9e6:	|  /--|----> movea.l 16(sp),a0
    a9ea:	|  |  |      movea.l (a0),a0
    a9ec:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    a9f2:	|  |  |      movea.l 16(sp),a0
    a9f6:	|  |  |      movea.l (a0),a0
    a9f8:	|  |  |      move.l 114(a0),d0
    a9fc:	|  |  |      moveq #1,d1
    a9fe:	|  |  |      and.l d1,d0
    aa00:	|  |  |  /-- beq.s aa18 <shufflePeople+0x4c>
    aa02:	|  |  |  |   move.l #1148846080,-(sp)
    aa08:	|  |  |  |   move.l 16(sp),-(sp)
    aa0c:	|  |  |  |   jsr 15972 <__addsf3>
    aa12:	|  |  |  |   addq.l #8,sp
    aa14:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    aa18:	|  |  |  \-> movea.l 16(sp),a0
    aa1c:	|  |  |      movea.l (a0),a0
    aa1e:	|  |  |      movea.l 32(a0),a0
    aa22:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    aa28:	|  |  |      movea.l 16(sp),a0
    aa2c:	|  |  |      movea.l (a0),a0
    aa2e:	|  |  |      movea.l 32(a0),a0
    aa32:	|  |  |      move.l 114(a0),d0
    aa36:	|  |  |      moveq #1,d1
    aa38:	|  |  |      and.l d1,d0
    aa3a:	|  |  |  /-- beq.s aa52 <shufflePeople+0x86>
    aa3c:	|  |  |  |   move.l #1148846080,-(sp)
    aa42:	|  |  |  |   move.l 12(sp),-(sp)
    aa46:	|  |  |  |   jsr 15972 <__addsf3>
    aa4c:	|  |  |  |   addq.l #8,sp
    aa4e:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    aa52:	|  |  |  \-> move.l 8(sp),-(sp)
    aa56:	|  |  |      move.l 16(sp),-(sp)
    aa5a:	|  |  |      jsr 15d2c <__gtsf2>
    aa60:	|  |  |      addq.l #8,sp
    aa62:	|  |  |      tst.l d0
    aa64:	|  |  |  /-- ble.s aa96 <shufflePeople+0xca>
			A = (*thisReference);
    aa66:	|  |  |  |   movea.l 16(sp),a0
    aa6a:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    aa6e:	|  |  |  |   movea.l 16(sp),a0
    aa72:	|  |  |  |   movea.l (a0),a0
    aa74:	|  |  |  |   move.l 32(a0),(sp)
			A->next = B->next;
    aa78:	|  |  |  |   movea.l (sp),a0
    aa7a:	|  |  |  |   move.l 32(a0),d0
    aa7e:	|  |  |  |   movea.l 4(sp),a0
    aa82:	|  |  |  |   move.l d0,32(a0)
			B->next = A;
    aa86:	|  |  |  |   movea.l (sp),a0
    aa88:	|  |  |  |   move.l 4(sp),32(a0)
			(*thisReference) = B;
    aa8e:	|  |  |  |   movea.l 16(sp),a0
    aa92:	|  |  |  |   move.l (sp),(a0)
    aa94:	|  |  +--|-- bra.s aaa4 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    aa96:	|  |  |  \-> movea.l 16(sp),a0
    aa9a:	|  |  |      move.l (a0),d0
    aa9c:	|  |  |      moveq #32,d1
    aa9e:	|  |  |      add.l d0,d1
    aaa0:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    aaa4:	|  |  \----> movea.l 16(sp),a0
    aaa8:	|  |         movea.l (a0),a0
    aaaa:	|  |         move.l 32(a0),d0
    aaae:	|  \-------- bne.w a9e6 <shufflePeople+0x1a>
    aab2:	|        /-- bra.s aab6 <shufflePeople+0xea>
	if (!allPeople) return;
    aab4:	\--------|-> nop
		}
	}
}
    aab6:	         \-> lea 20(sp),sp
    aaba:	             rts

0000aabc <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    aabc:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    aabe:	       tst.l 8(sp)
    aac2:	   /-- bgt.s aac8 <setCharacterWalkSpeed+0xc>
    aac4:	   |   clr.w d0
    aac6:	/--|-- bra.s aae6 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    aac8:	|  \-> move.l 12(sp),-(sp)
    aacc:	|      jsr 9514 <findPerson>
    aad2:	|      addq.l #4,sp
    aad4:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    aad6:	|  /-- bne.s aadc <setCharacterWalkSpeed+0x20>
    aad8:	|  |   clr.w d0
    aada:	+--|-- bra.s aae6 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    aadc:	|  \-> movea.l (sp),a0
    aade:	|      move.l 8(sp),24(a0)
	return TRUE;
    aae4:	|      moveq #1,d0
}
    aae6:	\----> addq.l #4,sp
    aae8:	       rts

0000aaea <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    aaea:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    aaec:	       move.l 8(sp),-(sp)
    aaf0:	       jsr 9514 <findPerson>
    aaf6:	       addq.l #4,sp
    aaf8:	       move.l d0,(sp)
    if (thisPerson) {
    aafa:	/----- beq.s ab1a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    aafc:	|      movea.l (sp),a0
    aafe:	|      move.l 12(sp),114(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ab04:	|      moveq #2,d0
    ab06:	|      and.l 12(sp),d0
    ab0a:	|  /-- beq.s ab16 <setPersonExtra+0x2c>
    ab0c:	|  |   movea.l (sp),a0
    ab0e:	|  |   move.l #1065353216,28(a0)
        return TRUE;
    ab16:	|  \-> moveq #1,d0
    ab18:	|  /-- bra.s ab1c <setPersonExtra+0x32>
    }
    return FALSE;
    ab1a:	\--|-> clr.w d0
}
    ab1c:	   \-> addq.l #4,sp
    ab1e:	       rts

0000ab20 <setScale>:


void setScale (short int h, short int d) {
    ab20:	subq.l #4,sp
    ab22:	move.l 8(sp),d1
    ab26:	move.l 12(sp),d0
    ab2a:	move.w d1,d1
    ab2c:	move.w d1,2(sp)
    ab30:	move.w d0,d0
    ab32:	move.w d0,(sp)
	scaleHorizon = h;
    ab34:	move.w 2(sp),1a768 <scaleHorizon>
	scaleDivide = d;
    ab3c:	move.w (sp),1a76a <scaleDivide>
}
    ab42:	nop
    ab44:	addq.l #4,sp
    ab46:	rts

0000ab48 <setShown>:

void setShown (BOOL h, int ob) {
    ab48:	    subq.l #8,sp
    ab4a:	    move.l 12(sp),d0
    ab4e:	    move.w d0,d0
    ab50:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ab54:	    move.l 16(sp),-(sp)
    ab58:	    jsr 9514 <findPerson>
    ab5e:	    addq.l #4,sp
    ab60:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    ab64:	/-- beq.s ab70 <setShown+0x28>
    ab66:	|   movea.l 4(sp),a0
    ab6a:	|   move.w 2(sp),100(a0)
}
    ab70:	\-> nop
    ab72:	    addq.l #8,sp
    ab74:	    rts

0000ab76 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    ab76:	       subq.l #8,sp
    ab78:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    ab7a:	       movea.l 16(sp),a0
    ab7e:	       move.l 88(a0),d0
    ab82:	       move.l d0,d1
    ab84:	       addi.l #360,d1
    ab8a:	       movea.l 16(sp),a0
    ab8e:	       move.l 92(a0),d0
    ab92:	       move.l d1,d2
    ab94:	       sub.l d0,d2
    ab96:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    ab9a:	       movea.l 16(sp),a0
    ab9e:	       move.l 118(a0),d0
    aba2:	   /-- beq.s abae <spinStep+0x38>
    aba4:	   |   movea.l 16(sp),a0
    aba8:	   |   move.l 118(a0),d0
    abac:	/--|-- bra.s abc8 <spinStep+0x52>
    abae:	|  \-> movea.l 16(sp),a0
    abb2:	|      movea.l 76(a0),a0
    abb6:	|      move.l 4(a0),d0
    abba:	|      move.l d0,-(sp)
    abbc:	|      pea 168 <decodeFilename+0x50>
    abc0:	|      jsr 161c0 <__divsi3>
    abc6:	|      addq.l #8,sp
    abc8:	\----> move.l d0,4(sp)
	while (diff > 180) {
    abcc:	   /-- bra.s abd6 <spinStep+0x60>
		diff -= 360;
    abce:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    abd6:	|  \-> cmpi.l #180,8(sp)
    abde:	\----- bgt.s abce <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    abe0:	       move.l 8(sp),d0
    abe4:	       cmp.l 4(sp),d0
    abe8:	   /-- blt.s ac06 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    abea:	   |   movea.l 16(sp),a0
    abee:	   |   move.l 88(a0),d0
    abf2:	   |   sub.l 4(sp),d0
    abf6:	   |   move.l d0,-(sp)
    abf8:	   |   move.l 20(sp),-(sp)
    abfc:	   |   jsr ace6 <turnMeAngle>
    ac02:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ac04:	/--|-- bra.s ac4c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ac06:	|  \-> move.l 4(sp),d0
    ac0a:	|      neg.l d0
    ac0c:	|      cmp.l 8(sp),d0
    ac10:	|  /-- blt.s ac2e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ac12:	|  |   movea.l 16(sp),a0
    ac16:	|  |   move.l 88(a0),d0
    ac1a:	|  |   add.l 4(sp),d0
    ac1e:	|  |   move.l d0,-(sp)
    ac20:	|  |   move.l 20(sp),-(sp)
    ac24:	|  |   jsr ace6 <turnMeAngle>
    ac2a:	|  |   addq.l #8,sp
}
    ac2c:	+--|-- bra.s ac4c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    ac2e:	|  \-> movea.l 16(sp),a0
    ac32:	|      move.l 92(a0),d0
    ac36:	|      move.l d0,-(sp)
    ac38:	|      move.l 20(sp),-(sp)
    ac3c:	|      jsr ace6 <turnMeAngle>
    ac42:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    ac44:	|      movea.l 16(sp),a0
    ac48:	|      clr.w 62(a0)
}
    ac4c:	\----> nop
    ac4e:	       move.l (sp)+,d2
    ac50:	       addq.l #8,sp
    ac52:	       rts

0000ac54 <stopPerson>:


BOOL stopPerson (int o) {
    ac54:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    ac56:	       move.l 8(sp),-(sp)
    ac5a:	       jsr 9514 <findPerson>
    ac60:	       addq.l #4,sp
    ac62:	       move.l d0,(sp)
    if (moveMe)
    ac64:	/----- beq.s aca2 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    ac66:	|      movea.l (sp),a0
    ac68:	|      move.l 64(a0),d0
    ac6c:	+----- beq.s aca2 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    ac6e:	|      movea.l (sp),a0
    ac70:	|      move.l 64(a0),d0
    ac74:	|      move.l d0,-(sp)
    ac76:	|      jsr 35b6 <abortFunction>
    ac7c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    ac7e:	|      movea.l (sp),a0
    ac80:	|      clr.l 64(a0)
            moveMe -> walking = FALSE;
    ac84:	|      movea.l (sp),a0
    ac86:	|      clr.w 60(a0)
            moveMe -> spinning = FALSE;
    ac8a:	|      movea.l (sp),a0
    ac8c:	|      clr.w 62(a0)
            setFrames(moveMe, ANI_STAND);
    ac90:	|      clr.l -(sp)
    ac92:	|      move.l 4(sp),-(sp)
    ac96:	|      jsr 6fb2 <setFrames>
    ac9c:	|      addq.l #8,sp
            return TRUE;
    ac9e:	|      moveq #1,d0
    aca0:	|  /-- bra.s aca4 <stopPerson+0x50>
        }
    return FALSE;
    aca2:	\--|-> clr.w d0
}
    aca4:	   \-> addq.l #4,sp
    aca6:	       rts

0000aca8 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    aca8:	       subq.l #8,sp
	int total = 0;
    acaa:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    acae:	       clr.l (sp)
    acb0:	   /-- bra.s acd2 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    acb2:	/--|-> movea.l 12(sp),a0
    acb6:	|  |   movea.l 4(a0),a0
    acba:	|  |   move.l (sp),d1
    acbc:	|  |   move.l d1,d0
    acbe:	|  |   add.l d0,d0
    acc0:	|  |   add.l d1,d0
    acc2:	|  |   add.l d0,d0
    acc4:	|  |   add.l d0,d0
    acc6:	|  |   adda.l d0,a0
    acc8:	|  |   move.l 4(a0),d0
    accc:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    acd0:	|  |   addq.l #1,(sp)
    acd2:	|  \-> movea.l 12(sp),a0
    acd6:	|      move.l 8(a0),d0
    acda:	|      cmp.l (sp),d0
    acdc:	\----- bgt.s acb2 <timeForAnim+0xa>
	}
	return total;
    acde:	       move.l 4(sp),d0
}
    ace2:	       addq.l #8,sp
    ace4:	       rts

0000ace6 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    ace6:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    ace8:	       movea.l 8(sp),a0
    acec:	       movea.l 76(a0),a0
    acf0:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    acf4:	       movea.l 8(sp),a0
    acf8:	       move.l 12(sp),88(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    acfe:	       move.l (sp),-(sp)
    ad00:	       pea b4 <_start+0xb4>
    ad04:	       jsr 161c0 <__divsi3>
    ad0a:	       addq.l #8,sp
    ad0c:	       move.l d0,d1
    ad0e:	       addi.l #180,d1
    ad14:	       movea.l 8(sp),a0
    ad18:	       move.l 96(a0),d0
    ad1c:	       add.l d1,d0
    ad1e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    ad22:	   /-- bra.s ad2c <turnMeAngle+0x46>
    ad24:	/--|-> addi.l #-360,12(sp)
    ad2c:	|  \-> cmpi.l #359,12(sp)
    ad34:	\----- bgt.s ad24 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    ad36:	       move.l (sp),-(sp)
    ad38:	       move.l 16(sp),-(sp)
    ad3c:	       jsr 16142 <__mulsi3>
    ad42:	       addq.l #8,sp
    ad44:	       pea 168 <decodeFilename+0x50>
    ad48:	       move.l d0,-(sp)
    ad4a:	       jsr 161c0 <__divsi3>
    ad50:	       addq.l #8,sp
    ad52:	       movea.l 8(sp),a0
    ad56:	       move.l d0,102(a0)
}
    ad5a:	       nop
    ad5c:	       addq.l #4,sp
    ad5e:	       rts

0000ad60 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    ad60:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ad62:	          move.l 8(sp),-(sp)
    ad66:	          jsr 9514 <findPerson>
    ad6c:	          addq.l #4,sp
    ad6e:	          move.l d0,(sp)
    if (thisPerson) {
    ad70:	/-------- beq.s add0 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    ad72:	|         movea.l (sp),a0
    ad74:	|         move.l 64(a0),d0
    ad78:	|     /-- beq.s ad8a <turnPersonToFace+0x2a>
    ad7a:	|     |   movea.l (sp),a0
    ad7c:	|     |   move.l 64(a0),d0
    ad80:	|     |   move.l d0,-(sp)
    ad82:	|     |   jsr 35b6 <abortFunction>
    ad88:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    ad8a:	|     \-> movea.l (sp),a0
    ad8c:	|         clr.l 64(a0)
        thisPerson -> walking = FALSE;
    ad90:	|         movea.l (sp),a0
    ad92:	|         clr.w 60(a0)
        thisPerson -> spinning = FALSE;
    ad96:	|         movea.l (sp),a0
    ad98:	|         clr.w 62(a0)
        turnMeAngle(thisPerson, direc);
    ad9c:	|         move.l 12(sp),-(sp)
    ada0:	|         move.l 4(sp),-(sp)
    ada4:	|         jsr ace6 <turnMeAngle>
    adaa:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    adac:	|         movea.l 1ae2c <speech>,a0
    adb2:	|         move.l (a0),d0
    adb4:	|         cmp.l (sp),d0
    adb6:	|  /----- bne.s adbc <turnPersonToFace+0x5c>
    adb8:	|  |      moveq #2,d0
    adba:	|  |  /-- bra.s adbe <turnPersonToFace+0x5e>
    adbc:	|  \--|-> moveq #0,d0
    adbe:	|     \-> move.l d0,-(sp)
    adc0:	|         move.l 4(sp),-(sp)
    adc4:	|         jsr 6fb2 <setFrames>
    adca:	|         addq.l #8,sp
        return TRUE;
    adcc:	|         moveq #1,d0
    adce:	|     /-- bra.s add2 <turnPersonToFace+0x72>
    }
    return FALSE;
    add0:	\-----|-> clr.w d0
}
    add2:	      \-> addq.l #4,sp
    add4:	          rts

0000add6 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    add6:	                lea -20(sp),sp
    adda:	                move.l d3,-(sp)
    addc:	                move.l d2,-(sp)
    adde:	                move.l 36(sp),d0
    ade2:	                move.w d0,d0
    ade4:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    ade8:	                cmpi.w #-1,10(sp)
    adee:	/-------------- bne.s adf6 <walkMe+0x20>
    adf0:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    adf6:	>-------------> movea.l 32(sp),a0
    adfa:	|               move.l 44(a0),d0
    adfe:	|               move.l d0,-(sp)
    ae00:	|               jsr 15bc0 <__floatsisf>
    ae06:	|               addq.l #4,sp
    ae08:	|               move.l d0,d1
    ae0a:	|               movea.l 32(sp),a0
    ae0e:	|               move.l (a0),d0
    ae10:	|               move.l d0,-(sp)
    ae12:	|               move.l d1,-(sp)
    ae14:	|               jsr 15eb4 <__subsf3>
    ae1a:	|               addq.l #8,sp
    ae1c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    ae20:	|               movea.l 32(sp),a0
    ae24:	|               move.l 48(a0),d0
    ae28:	|               move.l d0,-(sp)
    ae2a:	|               jsr 15bc0 <__floatsisf>
    ae30:	|               addq.l #4,sp
    ae32:	|               move.l d0,d1
    ae34:	|               movea.l 32(sp),a0
    ae38:	|               move.l 4(a0),d0
    ae3c:	|               move.l d0,-(sp)
    ae3e:	|               move.l d1,-(sp)
    ae40:	|               jsr 15eb4 <__subsf3>
    ae46:	|               addq.l #8,sp
    ae48:	|               move.l d0,-(sp)
    ae4a:	|               move.l d0,-(sp)
    ae4c:	|               jsr 15972 <__addsf3>
    ae52:	|               addq.l #8,sp
    ae54:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    ae58:	|               movea.l 32(sp),a0
    ae5c:	|               move.l 28(a0),d2
    ae60:	|               movea.l 32(sp),a0
    ae64:	|               move.l 24(a0),d0
    ae68:	|               move.l d0,-(sp)
    ae6a:	|               jsr 15bc0 <__floatsisf>
    ae70:	|               addq.l #4,sp
    ae72:	|               move.l d0,-(sp)
    ae74:	|               move.l d2,-(sp)
    ae76:	|               jsr 15c72 <__mulsf3>
    ae7c:	|               addq.l #8,sp
    ae7e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    ae82:	|               move.l 24(sp),-(sp)
    ae86:	|               jsr 15ad8 <__extendsfdf2>
    ae8c:	|               addq.l #4,sp
    ae8e:	|               move.l #-1717986918,-(sp)
    ae94:	|               move.l #1070176665,-(sp)
    ae9a:	|               move.l d1,-(sp)
    ae9c:	|               move.l d0,-(sp)
    ae9e:	|               jsr 15d98 <__ltdf2>
    aea4:	|               lea 16(sp),sp
    aea8:	|               tst.l d0
    aeaa:	|           /-- bge.s aeb4 <walkMe+0xde>
    aeac:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    aeb4:	|           \-> move.l 20(sp),-(sp)
    aeb8:	|               jsr 15b58 <__fixsfsi>
    aebe:	|               addq.l #4,sp
    aec0:	|               move.l d0,-(sp)
    aec2:	|               jsr 8194 <TF_abs>
    aec8:	|               addq.l #4,sp
    aeca:	|               move.l d0,d2
    aecc:	|               move.l 16(sp),-(sp)
    aed0:	|               jsr 15b58 <__fixsfsi>
    aed6:	|               addq.l #4,sp
    aed8:	|               move.l d0,-(sp)
    aeda:	|               jsr 8194 <TF_abs>
    aee0:	|               addq.l #4,sp
    aee2:	|               cmp.l d2,d0
    aee4:	|        /----- bgt.s af08 <walkMe+0x132>
    aee6:	|        |      move.l 20(sp),-(sp)
    aeea:	|        |      jsr 15b58 <__fixsfsi>
    aef0:	|        |      addq.l #4,sp
    aef2:	|        |      move.l d0,-(sp)
    aef4:	|        |      jsr 8194 <TF_abs>
    aefa:	|        |      addq.l #4,sp
    aefc:	|        |      move.l d0,-(sp)
    aefe:	|        |      jsr 15bc0 <__floatsisf>
    af04:	|        |      addq.l #4,sp
    af06:	|        |  /-- bra.s af28 <walkMe+0x152>
    af08:	|        \--|-> move.l 16(sp),-(sp)
    af0c:	|           |   jsr 15b58 <__fixsfsi>
    af12:	|           |   addq.l #4,sp
    af14:	|           |   move.l d0,-(sp)
    af16:	|           |   jsr 8194 <TF_abs>
    af1c:	|           |   addq.l #4,sp
    af1e:	|           |   move.l d0,-(sp)
    af20:	|           |   jsr 15bc0 <__floatsisf>
    af26:	|           |   addq.l #4,sp
    af28:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    af2c:	|               move.l 12(sp),-(sp)
    af30:	|               jsr 15b58 <__fixsfsi>
    af36:	|               addq.l #4,sp
    af38:	|               move.l d0,-(sp)
    af3a:	|               jsr 8194 <TF_abs>
    af40:	|               addq.l #4,sp
    af42:	|               move.l d0,-(sp)
    af44:	|               jsr 15bc0 <__floatsisf>
    af4a:	|               addq.l #4,sp
    af4c:	|               move.l d0,-(sp)
    af4e:	|               move.l 28(sp),-(sp)
    af52:	|               jsr 15de6 <__ltsf2>
    af58:	|               addq.l #8,sp
    af5a:	|               tst.l d0
    af5c:	|        /----- bge.w b00e <walkMe+0x238>
			if (thisPerson->spinning) {
    af60:	|        |      movea.l 32(sp),a0
    af64:	|        |      move.w 62(a0),d0
    af68:	|        |  /-- beq.s af86 <walkMe+0x1b0>
				spinStep(thisPerson);
    af6a:	|        |  |   move.l 32(sp),-(sp)
    af6e:	|        |  |   jsr ab76 <spinStep>
    af74:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    af76:	|        |  |   pea 1 <_start+0x1>
    af7a:	|        |  |   move.l 36(sp),-(sp)
    af7e:	|        |  |   jsr 6fb2 <setFrames>
    af84:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    af86:	|        |  \-> move.l 24(sp),-(sp)
    af8a:	|        |      move.l 16(sp),-(sp)
    af8e:	|        |      jsr 15a6c <__divsf3>
    af94:	|        |      addq.l #8,sp
    af96:	|        |      move.l d0,24(sp)
			if (move)
    af9a:	|        |      tst.w 10(sp)
    af9e:	|        |  /-- beq.s b008 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    afa0:	|        |  |   movea.l 32(sp),a0
    afa4:	|        |  |   move.l 4(a0),d2
    afa8:	|        |  |   move.l 24(sp),d0
    afac:	|        |  |   move.l d0,-(sp)
    afae:	|        |  |   move.l d0,-(sp)
    afb0:	|        |  |   jsr 15972 <__addsf3>
    afb6:	|        |  |   addq.l #8,sp
    afb8:	|        |  |   move.l d0,-(sp)
    afba:	|        |  |   move.l 20(sp),-(sp)
    afbe:	|        |  |   jsr 15a6c <__divsf3>
    afc4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    afc6:	|        |  |   move.l d0,-(sp)
    afc8:	|        |  |   move.l d2,-(sp)
    afca:	|        |  |   jsr 15972 <__addsf3>
    afd0:	|        |  |   addq.l #8,sp
    afd2:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    afd4:	|        |  |   movea.l 32(sp),a0
    afd8:	|        |  |   move.l (a0),d3
    afda:	|        |  |   move.l 24(sp),-(sp)
    afde:	|        |  |   move.l 24(sp),-(sp)
    afe2:	|        |  |   jsr 15a6c <__divsf3>
    afe8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    afea:	|        |  |   move.l d0,-(sp)
    afec:	|        |  |   move.l d3,-(sp)
    afee:	|        |  |   jsr 15972 <__addsf3>
    aff4:	|        |  |   addq.l #8,sp
    aff6:	|        |  |   move.l d2,-(sp)
    aff8:	|        |  |   move.l d0,-(sp)
    affa:	|        |  |   move.l 40(sp),-(sp)
    affe:	|        |  |   jsr 9c5c <moveAndScale>
    b004:	|        |  |   lea 12(sp),sp
			return TRUE;
    b008:	|        |  \-> moveq #1,d0
    b00a:	|  /-----|----- bra.w b0bc <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b00e:	|  |     \----> movea.l 32(sp),a0
    b012:	|  |            move.l 52(a0),d0
    b016:	|  |            moveq #-1,d1
    b018:	|  |            cmp.l d0,d1
    b01a:	|  |        /-- bne.s b052 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b01c:	|  |        |   movea.l 32(sp),a0
    b020:	|  |        |   move.l 106(a0),d0
    b024:	|  |        |   moveq #-1,d1
    b026:	|  |        |   cmp.l d0,d1
    b028:	|  |  /-----|-- beq.s b066 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b02a:	|  |  |     |   movea.l 32(sp),a0
    b02e:	|  |  |     |   move.l 106(a0),d0
    b032:	|  |  |     |   movea.l 32(sp),a0
    b036:	|  |  |     |   move.l d0,92(a0)
				thisPerson->spinning = TRUE;
    b03a:	|  |  |     |   movea.l 32(sp),a0
    b03e:	|  |  |     |   move.w #1,62(a0)
				spinStep(thisPerson);
    b044:	|  |  |     |   move.l 32(sp),-(sp)
    b048:	|  |  |     |   jsr ab76 <spinStep>
    b04e:	|  |  |     |   addq.l #4,sp
			}
			break;
    b050:	|  |  +-----|-- bra.s b066 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b052:	|  |  |     \-> move.l 32(sp),-(sp)
    b056:	|  |  |         jsr 8906 <doBorderStuff>
    b05c:	|  |  |         addq.l #4,sp
    b05e:	|  |  |         tst.w d0
    b060:	|  |  |  /----- beq.s b06a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b062:	\--|--|--|----- bra.w adf6 <walkMe+0x20>
			break;
    b066:	   |  \--|----> nop
    b068:	   |     |  /-- bra.s b06c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b06a:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b06c:	   |        \-> movea.l 32(sp),a0
    b070:	   |            clr.w 60(a0)
	setFrames(thisPerson, ANI_STAND);
    b074:	   |            clr.l -(sp)
    b076:	   |            move.l 36(sp),-(sp)
    b07a:	   |            jsr 6fb2 <setFrames>
    b080:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b082:	   |            movea.l 32(sp),a0
    b086:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b08a:	   |            move.l d0,-(sp)
    b08c:	   |            jsr 15bc0 <__floatsisf>
    b092:	   |            addq.l #4,sp
    b094:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b096:	   |            movea.l 32(sp),a0
    b09a:	   |            move.l 36(a0),d0
	moveAndScale(thisPerson,
    b09e:	   |            move.l d0,-(sp)
    b0a0:	   |            jsr 15bc0 <__floatsisf>
    b0a6:	   |            addq.l #4,sp
    b0a8:	   |            move.l d2,-(sp)
    b0aa:	   |            move.l d0,-(sp)
    b0ac:	   |            move.l 40(sp),-(sp)
    b0b0:	   |            jsr 9c5c <moveAndScale>
    b0b6:	   |            lea 12(sp),sp
	return FALSE;
    b0ba:	   |            clr.w d0
}
    b0bc:	   \----------> move.l (sp)+,d2
    b0be:	                move.l (sp)+,d3
    b0c0:	                lea 20(sp),sp
    b0c4:	                rts

0000b0c6 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b0c6:	       subq.l #8,sp
    b0c8:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b0ca:	   /-- bra.s b0fa <clearStackLib+0x34>
		k = stackLib;
    b0cc:	/--|-> move.l 1aeb4 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b0d4:	|  |   movea.l 1aeb4 <stackLib>,a0
    b0da:	|  |   move.l 4(a0),d0
    b0de:	|  |   move.l d0,1aeb4 <stackLib>
		FreeVec(k);
    b0e4:	|  |   move.l 8(sp),4(sp)
    b0ea:	|  |   move.l 1add0 <SysBase>,d0
    b0f0:	|  |   movea.l d0,a6
    b0f2:	|  |   movea.l 4(sp),a1
    b0f6:	|  |   jsr -690(a6)
	while (stackLib) {
    b0fa:	|  \-> move.l 1aeb4 <stackLib>,d0
    b100:	\----- bne.s b0cc <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b102:	       clr.l 1aeb0 <stackLibTotal>
}
    b108:	       nop
    b10a:	       movea.l (sp)+,a6
    b10c:	       addq.l #8,sp
    b10e:	       rts

0000b110 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b110:	          lea -128(sp),sp
    b114:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b118:	      /-- bra.s b12a <loadGame+0x1a>
    b11a:	   /--|-> move.l 1ad68 <allRunningFunctions>,d0
    b120:	   |  |   move.l d0,-(sp)
    b122:	   |  |   jsr 45d0 <finishFunction>
    b128:	   |  |   addq.l #4,sp
    b12a:	   |  \-> move.l 1ad68 <allRunningFunctions>,d0
    b130:	   \----- bne.s b11a <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b132:	          pea 1aeb8 <ssgVersion>
    b138:	          pea 17723 <PutChar+0x14cb>
    b13e:	          pea 41 <_start+0x41>
    b142:	          pea 53 <_start+0x53>
    b146:	          move.l 160(sp),-(sp)
    b14a:	          jsr 5358 <openAndVerify>
    b150:	          lea 20(sp),sp
    b154:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b158:	      /-- bne.s b160 <loadGame+0x50>
    b15a:	      |   clr.w d0
    b15c:	/-----|-- bra.w b406 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b160:	|     \-> move.l 112(sp),108(sp)
    b166:	|         lea 140(sp),a0
    b16a:	|         lea -126(a0),a0
    b16e:	|         move.l a0,120(sp)
    b172:	|         moveq #8,d0
    b174:	|         move.l d0,116(sp)
    b178:	|         move.l 1add8 <DOSBase>,d0
    b17e:	|         movea.l d0,a6
    b180:	|         move.l 108(sp),d1
    b184:	|         move.l 120(sp),d2
    b188:	|         move.l 116(sp),d3
    b18c:	|         jsr -42(a6)
    b190:	|         move.l d0,132(sp)
    b194:	|         move.l 132(sp),d0
    b198:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b19c:	|         moveq #8,d0
    b19e:	|         cmp.l 128(sp),d0
    b1a2:	|     /-- beq.s b1b2 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b1a4:	|     |   pea 17744 <PutChar+0x14ec>
    b1aa:	|     |   jsr 15784 <KPrintF>
    b1b0:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b1b2:	|     \-> move.l 14(sp),d1
    b1b6:	|         move.l 1ad72 <fileTime>,d0
    b1bc:	|         cmp.l d1,d0
    b1be:	|     /-- bne.s b1ce <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b1c0:	|     |   move.l 18(sp),d1
    b1c4:	|     |   move.l 1ad76 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b1ca:	|     |   cmp.l d1,d0
    b1cc:	|  /--|-- beq.s b1ee <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b1ce:	|  |  \-> move.l 144(sp),-(sp)
    b1d2:	|  |      pea 17760 <PutChar+0x1508>
    b1d8:	|  |      pea 17827 <PutChar+0x15cf>
    b1de:	|  |      jsr 15784 <KPrintF>
    b1e4:	|  |      lea 12(sp),sp
		return FALSE; 
    b1e8:	|  |      clr.w d0
    b1ea:	+--|----- bra.w b406 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b1ee:	|  \----> move.l 112(sp),124(sp)
    b1f4:	|         move.l 1add8 <DOSBase>,d0
    b1fa:	|         movea.l d0,a6
    b1fc:	|         move.l 124(sp),d1
    b200:	|         jsr -306(a6)
    b204:	|         move.l d0,136(sp)
    b208:	|         move.l 136(sp),d0
    b20c:	|         move.l d0,d0
    b20e:	|         move.w d0,1a632 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b214:	|         move.l 112(sp),100(sp)
    b21a:	|         move.l 1add8 <DOSBase>,d0
    b220:	|         movea.l d0,a6
    b222:	|         move.l 100(sp),d1
    b226:	|         jsr -306(a6)
    b22a:	|         move.l d0,96(sp)
    b22e:	|         move.l 96(sp),d0
    b232:	|         move.l d0,d0
    b234:	|         move.w d0,1ad70 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b23a:	|         move.l 112(sp),92(sp)
    b240:	|         move.l 1add8 <DOSBase>,d0
    b246:	|         movea.l d0,a6
    b248:	|         move.l 92(sp),d1
    b24c:	|         jsr -306(a6)
    b250:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b254:	|         move.l 112(sp),84(sp)
    b25a:	|         move.l 1add8 <DOSBase>,d0
    b260:	|         movea.l d0,a6
    b262:	|         move.l 84(sp),d1
    b266:	|         jsr -306(a6)
    b26a:	|         move.l d0,80(sp)
    b26e:	|         move.l 80(sp),d0
    b272:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b276:	|     /-- beq.s b2aa <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b278:	|     |   move.l 112(sp),-(sp)
    b27c:	|     |   jsr 6bc <get2bytes>
    b282:	|     |   addq.l #4,sp
    b284:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b288:	|     |   move.l 112(sp),-(sp)
    b28c:	|     |   jsr 6bc <get2bytes>
    b292:	|     |   addq.l #4,sp
    b294:	|     |   move.l d0,1af1c <fontHeight>
		charOrder = readString(fp);		
    b29a:	|     |   move.l 112(sp),-(sp)
    b29e:	|     |   jsr b02 <readString>
    b2a4:	|     |   addq.l #4,sp
    b2a6:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b2aa:	|     \-> move.l 104(sp),70(sp)
    b2b0:	|         move.l 1add0 <SysBase>,d0
    b2b6:	|         movea.l d0,a6
    b2b8:	|         movea.l 70(sp),a1
    b2bc:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b2c0:	|         move.l 112(sp),-(sp)
    b2c4:	|         jsr 854 <getSigned>
    b2ca:	|         addq.l #4,sp
    b2cc:	|         move.w d0,1acda <fontSpace>

	killAllPeople ();
    b2d2:	|         jsr 98fe <killAllPeople>
	killAllRegions ();
    b2d8:	|         jsr 14136 <killAllRegions>

	int camerX = get2bytes (fp);
    b2de:	|         move.l 112(sp),-(sp)
    b2e2:	|         jsr 6bc <get2bytes>
    b2e8:	|         addq.l #4,sp
    b2ea:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b2ee:	|         move.l 112(sp),-(sp)
    b2f2:	|         jsr 6bc <get2bytes>
    b2f8:	|         addq.l #4,sp
    b2fa:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b2fe:	|         move.l 112(sp),-(sp)
    b302:	|         jsr 7d8 <getFloat>
    b308:	|         addq.l #4,sp
    b30a:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b30e:	|         move.l 112(sp),54(sp)
    b314:	|         move.l 1add8 <DOSBase>,d0
    b31a:	|         movea.l d0,a6
    b31c:	|         move.l 54(sp),d1
    b320:	|         jsr -306(a6)
    b324:	|         move.l d0,50(sp)
    b328:	|         move.l 50(sp),d0
    b32c:	|         move.l d0,d0
    b32e:	|         move.b d0,1a74c <brightnessLevel>

	loadHandlers (fp);
    b334:	|         move.l 112(sp),-(sp)
    b338:	|         jsr 52b8 <loadHandlers>
    b33e:	|         addq.l #4,sp
	loadRegions (fp);
    b340:	|         move.l 112(sp),-(sp)
    b344:	|         jsr 14192 <loadRegions>
    b34a:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b34c:	|         moveq #12,d0
    b34e:	|         move.l d0,46(sp)
    b352:	|         clr.l 42(sp)
    b356:	|         move.l 1add0 <SysBase>,d0
    b35c:	|         movea.l d0,a6
    b35e:	|         move.l 46(sp),d0
    b362:	|         move.l 42(sp),d1
    b366:	|         jsr -684(a6)
    b36a:	|         move.l d0,38(sp)
    b36e:	|         move.l 38(sp),d0
    b372:	|         move.l d0,1acdc <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b378:	|         move.l 1acdc <mouseCursorAnim>,d0
    b37e:	|     /-- bne.s b392 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b380:	|     |   pea 17831 <PutChar+0x15d9>
    b386:	|     |   jsr 15784 <KPrintF>
    b38c:	|     |   addq.l #4,sp
		return FALSE;
    b38e:	|     |   clr.w d0
    b390:	+-----|-- bra.s b406 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b392:	|     \-> jsr c288 <nosnapshot>
	if (FGetC (fp)) {
    b398:	|         move.l 112(sp),34(sp)
    b39e:	|         move.l 1add8 <DOSBase>,d0
    b3a4:	|         movea.l d0,a6
    b3a6:	|         move.l 34(sp),d1
    b3aa:	|         jsr -306(a6)
    b3ae:	|         move.l d0,30(sp)
    b3b2:	|         move.l 30(sp),d0
    b3b6:	|     /-- beq.s b3cc <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b3b8:	|     |   move.l 112(sp),-(sp)
    b3bc:	|     |   jsr c308 <restoreSnapshot>
    b3c2:	|     |   addq.l #4,sp
    b3c4:	|     |   tst.w d0
    b3c6:	|     +-- bne.s b3cc <loadGame+0x2bc>
    b3c8:	|     |   clr.w d0
    b3ca:	+-----|-- bra.s b406 <loadGame+0x2f6>
	}

	Close (fp);
    b3cc:	|     \-> move.l 112(sp),26(sp)
    b3d2:	|         move.l 1add8 <DOSBase>,d0
    b3d8:	|         movea.l d0,a6
    b3da:	|         move.l 26(sp),d1
    b3de:	|         jsr -36(a6)
    b3e2:	|         move.l d0,22(sp)
	clearStackLib ();
    b3e6:	|         jsr b0c6 <clearStackLib>

	cameraX = camerX;
    b3ec:	|         move.l 66(sp),1aee2 <cameraX>
	cameraY = camerY;
    b3f4:	|         move.l 62(sp),1aee6 <cameraY>
	cameraZoom = camerZ;
    b3fc:	|         move.l 58(sp),1a774 <cameraZoom>

	return TRUE;
    b404:	|         moveq #1,d0
}
    b406:	\-------> movem.l (sp)+,d2-d3/a6
    b40a:	          lea 128(sp),sp
    b40e:	          rts

0000b410 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b410:	   /-> lea -64(sp),sp
    b414:	   |   move.l a6,-(sp)
    b416:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b418:	   |   movea.l 76(sp),a0
    b41c:	   |   move.l (a0),d0
    b41e:	   |   move.l 80(sp),-(sp)
    b422:	   |   move.l d0,-(sp)
    b424:	   |   jsr 8d0 <put2bytes>
    b42a:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b42c:	   |   movea.l 76(sp),a0
    b430:	   |   move.l 40(a0),d0
    b434:	/--|-- beq.s b470 <saveFunction+0x60>
		FPutC (fp, 1);
    b436:	|  |   move.l 80(sp),52(sp)
    b43c:	|  |   moveq #1,d0
    b43e:	|  |   move.l d0,48(sp)
    b442:	|  |   move.l 1add8 <DOSBase>,d0
    b448:	|  |   movea.l d0,a6
    b44a:	|  |   move.l 52(sp),d1
    b44e:	|  |   move.l 48(sp),d2
    b452:	|  |   jsr -312(a6)
    b456:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b45a:	|  |   movea.l 76(sp),a0
    b45e:	|  |   move.l 40(a0),d0
    b462:	|  |   move.l 80(sp),-(sp)
    b466:	|  |   move.l d0,-(sp)
    b468:	|  \-- jsr b410 <saveFunction>(pc)
    b46c:	|      addq.l #8,sp
    b46e:	|  /-- bra.s b492 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b470:	\--|-> move.l 80(sp),64(sp)
    b476:	   |   clr.l 60(sp)
    b47a:	   |   move.l 1add8 <DOSBase>,d0
    b480:	   |   movea.l d0,a6
    b482:	   |   move.l 64(sp),d1
    b486:	   |   move.l 60(sp),d2
    b48a:	   |   jsr -312(a6)
    b48e:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b492:	   \-> movea.l 76(sp),a0
    b496:	       move.l 12(a0),d0
    b49a:	       move.l 80(sp),-(sp)
    b49e:	       move.l d0,-(sp)
    b4a0:	       jsr 958 <put4bytes>
    b4a6:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b4a8:	       movea.l 76(sp),a0
    b4ac:	       move.l 36(a0),d0
    b4b0:	       move.l 80(sp),-(sp)
    b4b4:	       move.l d0,-(sp)
    b4b6:	       jsr 8d0 <put2bytes>
    b4bc:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b4be:	       move.l 80(sp),40(sp)
    b4c4:	       movea.l 76(sp),a0
    b4c8:	       move.w 54(a0),d0
    b4cc:	       movea.w d0,a0
    b4ce:	       move.l a0,36(sp)
    b4d2:	       move.l 1add8 <DOSBase>,d0
    b4d8:	       movea.l d0,a6
    b4da:	       move.l 40(sp),d1
    b4de:	       move.l 36(sp),d2
    b4e2:	       jsr -312(a6)
    b4e6:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b4ea:	       move.l 80(sp),28(sp)
    b4f0:	       movea.l 76(sp),a0
    b4f4:	       move.w 48(a0),d0
    b4f8:	       movea.w d0,a0
    b4fa:	       move.l a0,24(sp)
    b4fe:	       move.l 1add8 <DOSBase>,d0
    b504:	       movea.l d0,a6
    b506:	       move.l 28(sp),d1
    b50a:	       move.l 24(sp),d2
    b50e:	       jsr -312(a6)
    b512:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b516:	       move.l 80(sp),16(sp)
    b51c:	       movea.l 76(sp),a0
    b520:	       move.w 50(a0),d0
    b524:	       movea.w d0,a0
    b526:	       move.l a0,12(sp)
    b52a:	       move.l 1add8 <DOSBase>,d0
    b530:	       movea.l d0,a6
    b532:	       move.l 16(sp),d1
    b536:	       move.l 12(sp),d2
    b53a:	       jsr -312(a6)
    b53e:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b542:	       moveq #28,d0
    b544:	       add.l 76(sp),d0
    b548:	       move.l 80(sp),-(sp)
    b54c:	       move.l d0,-(sp)
    b54e:	       jsr bccc <saveVariable>
    b554:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b556:	       movea.l 76(sp),a0
    b55a:	       move.b 56(a0),d0
    b55e:	   /-- beq.s b56e <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b560:	   |   pea 17852 <PutChar+0x15fa>
    b566:	   |   jsr 15784 <KPrintF>
    b56c:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b56e:	   \-> movea.l 76(sp),a0
    b572:	       move.l 24(a0),d0
    b576:	       move.l 80(sp),-(sp)
    b57a:	       move.l d0,-(sp)
    b57c:	       jsr bb40 <saveStack>
    b582:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b584:	       clr.l 68(sp)
    b588:	   /-- bra.s b5ac <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b58a:	/--|-> movea.l 76(sp),a0
    b58e:	|  |   move.l 20(a0),d1
    b592:	|  |   move.l 68(sp),d0
    b596:	|  |   lsl.l #3,d0
    b598:	|  |   add.l d1,d0
    b59a:	|  |   move.l 80(sp),-(sp)
    b59e:	|  |   move.l d0,-(sp)
    b5a0:	|  |   jsr bccc <saveVariable>
    b5a6:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b5a8:	|  |   addq.l #1,68(sp)
    b5ac:	|  \-> movea.l 76(sp),a0
    b5b0:	|      move.l 8(a0),d0
    b5b4:	|      cmp.l 68(sp),d0
    b5b8:	\----- bgt.s b58a <saveFunction+0x17a>
	}
}
    b5ba:	       nop
    b5bc:	       nop
    b5be:	       move.l (sp)+,d2
    b5c0:	       movea.l (sp)+,a6
    b5c2:	       lea 64(sp),sp
    b5c6:	       rts

0000b5c8 <saveGame>:

BOOL saveGame (char * fname) {
    b5c8:	          lea -272(sp),sp
    b5cc:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b5d0:	          move.l 288(sp),268(sp)
    b5d6:	          move.l #1006,264(sp)
    b5de:	          move.l 1add8 <DOSBase>,d0
    b5e4:	          movea.l d0,a6
    b5e6:	          move.l 268(sp),d1
    b5ea:	          move.l 264(sp),d2
    b5ee:	          jsr -30(a6)
    b5f2:	          move.l d0,260(sp)
    b5f6:	          move.l 260(sp),d0
    b5fa:	          move.l d0,256(sp)
	if (fp == NULL) {
    b5fe:	      /-- bne.s b614 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b600:	      |   pea 17874 <PutChar+0x161c>
    b606:	      |   jsr 15784 <KPrintF>
    b60c:	      |   addq.l #4,sp
		return FALSE;
    b60e:	      |   clr.w d0
    b610:	/-----|-- bra.w bb36 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b614:	|     \-> move.l 256(sp),252(sp)
    b61a:	|         move.l #96401,248(sp)
    b622:	|         moveq #6,d0
    b624:	|         move.l d0,244(sp)
    b628:	|         move.l 1add8 <DOSBase>,d0
    b62e:	|         movea.l d0,a6
    b630:	|         move.l 252(sp),d1
    b634:	|         move.l 248(sp),d2
    b638:	|         move.l 244(sp),d3
    b63c:	|         jsr -48(a6)
    b640:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b644:	|         move.l 256(sp),236(sp)
    b64a:	|         clr.l 232(sp)
    b64e:	|         move.l 1add8 <DOSBase>,d0
    b654:	|         movea.l d0,a6
    b656:	|         move.l 236(sp),d1
    b65a:	|         move.l 232(sp),d2
    b65e:	|         jsr -312(a6)
    b662:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b666:	|         move.l 256(sp),224(sp)
    b66c:	|         clr.l 220(sp)
    b670:	|         move.l 1add8 <DOSBase>,d0
    b676:	|         movea.l d0,a6
    b678:	|         move.l 224(sp),d1
    b67c:	|         move.l 220(sp),d2
    b680:	|         jsr -312(a6)
    b684:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b688:	|         move.l 256(sp),212(sp)
    b68e:	|         moveq #2,d0
    b690:	|         move.l d0,208(sp)
    b694:	|         move.l 1add8 <DOSBase>,d0
    b69a:	|         movea.l d0,a6
    b69c:	|         move.l 212(sp),d1
    b6a0:	|         move.l 208(sp),d2
    b6a4:	|         jsr -312(a6)
    b6a8:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b6ac:	|         move.l 256(sp),200(sp)
    b6b2:	|         moveq #2,d0
    b6b4:	|         move.l d0,196(sp)
    b6b8:	|         move.l 1add8 <DOSBase>,d0
    b6be:	|         movea.l d0,a6
    b6c0:	|         move.l 200(sp),d1
    b6c4:	|         move.l 196(sp),d2
    b6c8:	|         jsr -312(a6)
    b6cc:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    b6d0:	|         move.l 256(sp),188(sp)
    b6d6:	|         move.l #109938,184(sp)
    b6de:	|         moveq #8,d0
    b6e0:	|         move.l d0,180(sp)
    b6e4:	|         move.l 1add8 <DOSBase>,d0
    b6ea:	|         movea.l d0,a6
    b6ec:	|         move.l 188(sp),d1
    b6f0:	|         move.l 184(sp),d2
    b6f4:	|         move.l 180(sp),d3
    b6f8:	|         jsr -48(a6)
    b6fc:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    b700:	|         move.l 256(sp),172(sp)
    b706:	|         move.w 1a632 <allowAnyFilename>,d0
    b70c:	|         movea.w d0,a0
    b70e:	|         move.l a0,168(sp)
    b712:	|         move.l 1add8 <DOSBase>,d0
    b718:	|         movea.l d0,a6
    b71a:	|         move.l 172(sp),d1
    b71e:	|         move.l 168(sp),d2
    b722:	|         jsr -312(a6)
    b726:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    b72a:	|         move.l 256(sp),160(sp)
    b730:	|         move.w 1ad70 <captureAllKeys>,d0
    b736:	|         movea.w d0,a0
    b738:	|         move.l a0,156(sp)
    b73c:	|         move.l 1add8 <DOSBase>,d0
    b742:	|         movea.l d0,a6
    b744:	|         move.l 160(sp),d1
    b748:	|         move.l 156(sp),d2
    b74c:	|         jsr -312(a6)
    b750:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    b754:	|         move.l 256(sp),148(sp)
    b75a:	|         moveq #1,d0
    b75c:	|         move.l d0,144(sp)
    b760:	|         move.l 1add8 <DOSBase>,d0
    b766:	|         movea.l d0,a6
    b768:	|         move.l 148(sp),d1
    b76c:	|         move.l 144(sp),d2
    b770:	|         jsr -312(a6)
    b774:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    b778:	|         move.l 256(sp),136(sp)
    b77e:	|         move.l 1af28 <fontTableSize>,d0
    b784:	|         sgt d0
    b786:	|         neg.b d0
    b788:	|         move.b d0,d0
    b78a:	|         andi.l #255,d0
    b790:	|         move.l d0,132(sp)
    b794:	|         move.l 1add8 <DOSBase>,d0
    b79a:	|         movea.l d0,a6
    b79c:	|         move.l 136(sp),d1
    b7a0:	|         move.l 132(sp),d2
    b7a4:	|         jsr -312(a6)
    b7a8:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    b7ac:	|         move.l 1af28 <fontTableSize>,d0
    b7b2:	|     /-- ble.s b7f0 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    b7b4:	|     |   move.l 1af20 <loadedFontNum>,d0
    b7ba:	|     |   move.l 256(sp),-(sp)
    b7be:	|     |   move.l d0,-(sp)
    b7c0:	|     |   jsr 8d0 <put2bytes>
    b7c6:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    b7c8:	|     |   move.l 1af1c <fontHeight>,d0
    b7ce:	|     |   move.l 256(sp),-(sp)
    b7d2:	|     |   move.l d0,-(sp)
    b7d4:	|     |   jsr 8d0 <put2bytes>
    b7da:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    b7dc:	|     |   move.l 1af24 <fontOrderString>,d0
    b7e2:	|     |   move.l 256(sp),-(sp)
    b7e6:	|     |   move.l d0,-(sp)
    b7e8:	|     |   jsr bd8 <writeString>
    b7ee:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    b7f0:	|     \-> move.w 1acda <fontSpace>,d0
    b7f6:	|         movea.w d0,a0
    b7f8:	|         move.l 256(sp),-(sp)
    b7fc:	|         move.l a0,-(sp)
    b7fe:	|         jsr a9c <putSigned>
    b804:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    b806:	|         move.l 1aee2 <cameraX>,d0
    b80c:	|         move.l 256(sp),-(sp)
    b810:	|         move.l d0,-(sp)
    b812:	|         jsr 8d0 <put2bytes>
    b818:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    b81a:	|         move.l 1aee6 <cameraY>,d0
    b820:	|         move.l 256(sp),-(sp)
    b824:	|         move.l d0,-(sp)
    b826:	|         jsr 8d0 <put2bytes>
    b82c:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    b82e:	|         move.l 1a774 <cameraZoom>,d0
    b834:	|         move.l 256(sp),-(sp)
    b838:	|         move.l d0,-(sp)
    b83a:	|         jsr a46 <putFloat>
    b840:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    b842:	|         move.l 256(sp),124(sp)
    b848:	|         move.b 1a74c <brightnessLevel>,d0
    b84e:	|         move.b d0,d0
    b850:	|         andi.l #255,d0
    b856:	|         move.l d0,120(sp)
    b85a:	|         move.l 1add8 <DOSBase>,d0
    b860:	|         movea.l d0,a6
    b862:	|         move.l 124(sp),d1
    b866:	|         move.l 120(sp),d2
    b86a:	|         jsr -312(a6)
    b86e:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    b872:	|         move.l 256(sp),-(sp)
    b876:	|         jsr 583c <saveHandlers>
    b87c:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    b87e:	|         move.l 256(sp),-(sp)
    b882:	|         jsr 1434c <saveRegions>
    b888:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    b88a:	|         move.l 1acdc <mouseCursorAnim>,d0
    b890:	|         move.l 256(sp),-(sp)
    b894:	|         move.l d0,-(sp)
    b896:	|         jsr 9e70 <saveAnim>
    b89c:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    b89e:	|         move.l 1ace0 <mouseCursorFrameNum>,d0
    b8a4:	|         move.l 256(sp),-(sp)
    b8a8:	|         move.l d0,-(sp)
    b8aa:	|         jsr 8d0 <put2bytes>
    b8b0:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    b8b2:	|         move.l 1ad68 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    b8ba:	|         clr.l 272(sp)
	while (thisFunction) {
    b8be:	|     /-- bra.s b8ce <saveGame+0x306>
		countFunctions ++;
    b8c0:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    b8c4:	|  |  |   movea.l 276(sp),a0
    b8c8:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b8ce:	|  |  \-> tst.l 276(sp)
    b8d2:	|  \----- bne.s b8c0 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    b8d4:	|         move.l 256(sp),-(sp)
    b8d8:	|         move.l 276(sp),-(sp)
    b8dc:	|         jsr 8d0 <put2bytes>
    b8e2:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    b8e4:	|         move.l 1ad68 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    b8ec:	|     /-- bra.s b908 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    b8ee:	|  /--|-> move.l 256(sp),-(sp)
    b8f2:	|  |  |   move.l 280(sp),-(sp)
    b8f6:	|  |  |   jsr b410 <saveFunction>
    b8fc:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    b8fe:	|  |  |   movea.l 276(sp),a0
    b902:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b908:	|  |  \-> tst.l 276(sp)
    b90c:	|  \----- bne.s b8ee <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    b90e:	|         clr.l 280(sp)
    b912:	|     /-- bra.s b934 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    b914:	|  /--|-> move.l 1ad7e <globalVars>,d1
    b91a:	|  |  |   move.l 280(sp),d0
    b91e:	|  |  |   lsl.l #3,d0
    b920:	|  |  |   add.l d1,d0
    b922:	|  |  |   move.l 256(sp),-(sp)
    b926:	|  |  |   move.l d0,-(sp)
    b928:	|  |  |   jsr bccc <saveVariable>
    b92e:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    b930:	|  |  |   addq.l #1,280(sp)
    b934:	|  |  \-> move.l 1ada8 <numGlobals>,d0
    b93a:	|  |      cmp.l 280(sp),d0
    b93e:	|  \----- bgt.s b914 <saveGame+0x34c>
	}

	savePeople (fp);
    b940:	|         move.l 256(sp),-(sp)
    b944:	|         jsr 9f98 <savePeople>
    b94a:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    b94c:	|         movea.l 1af38 <currentFloor>,a0
    b952:	|         move.l 8(a0),d0
    b956:	|  /----- beq.s b994 <saveGame+0x3cc>
		FPutC (fp, 1);
    b958:	|  |      move.l 256(sp),100(sp)
    b95e:	|  |      moveq #1,d0
    b960:	|  |      move.l d0,96(sp)
    b964:	|  |      move.l 1add8 <DOSBase>,d0
    b96a:	|  |      movea.l d0,a6
    b96c:	|  |      move.l 100(sp),d1
    b970:	|  |      move.l 96(sp),d2
    b974:	|  |      jsr -312(a6)
    b978:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    b97c:	|  |      movea.l 1af38 <currentFloor>,a0
    b982:	|  |      move.l (a0),d0
    b984:	|  |      move.l 256(sp),-(sp)
    b988:	|  |      move.l d0,-(sp)
    b98a:	|  |      jsr 8d0 <put2bytes>
    b990:	|  |      addq.l #8,sp
    b992:	|  |  /-- bra.s b9b6 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    b994:	|  \--|-> move.l 256(sp),112(sp)
    b99a:	|     |   clr.l 108(sp)
    b99e:	|     |   move.l 1add8 <DOSBase>,d0
    b9a4:	|     |   movea.l d0,a6
    b9a6:	|     |   move.l 112(sp),d1
    b9aa:	|     |   move.l 108(sp),d2
    b9ae:	|     |   jsr -312(a6)
    b9b2:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    b9b6:	|     \-> move.l 1ae80 <zBuffer+0x50>,d0
    b9bc:	|  /----- beq.s b9f8 <saveGame+0x430>
		FPutC (fp, 1);
    b9be:	|  |      move.l 256(sp),76(sp)
    b9c4:	|  |      moveq #1,d0
    b9c6:	|  |      move.l d0,72(sp)
    b9ca:	|  |      move.l 1add8 <DOSBase>,d0
    b9d0:	|  |      movea.l d0,a6
    b9d2:	|  |      move.l 76(sp),d1
    b9d6:	|  |      move.l 72(sp),d2
    b9da:	|  |      jsr -312(a6)
    b9de:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    b9e2:	|  |      move.l 1ae7c <zBuffer+0x4c>,d0
    b9e8:	|  |      move.l 256(sp),-(sp)
    b9ec:	|  |      move.l d0,-(sp)
    b9ee:	|  |      jsr 8d0 <put2bytes>
    b9f4:	|  |      addq.l #8,sp
    b9f6:	|  |  /-- bra.s ba1a <saveGame+0x452>
	} else FPutC (fp,0);
    b9f8:	|  \--|-> move.l 256(sp),88(sp)
    b9fe:	|     |   clr.l 84(sp)
    ba02:	|     |   move.l 1add8 <DOSBase>,d0
    ba08:	|     |   movea.l d0,a6
    ba0a:	|     |   move.l 88(sp),d1
    ba0e:	|     |   move.l 84(sp),d2
    ba12:	|     |   jsr -312(a6)
    ba16:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    ba1a:	|     \-> move.l 256(sp),64(sp)
    ba20:	|         move.l 1aef6 <speechMode>,60(sp)
    ba28:	|         move.l 1add8 <DOSBase>,d0
    ba2e:	|         movea.l d0,a6
    ba30:	|         move.l 64(sp),d1
    ba34:	|         move.l 60(sp),d2
    ba38:	|         jsr -312(a6)
    ba3c:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    ba40:	|         move.b 1acb0 <fadeMode>,d0
    ba46:	|         move.b d0,d0
    ba48:	|         andi.l #255,d0
    ba4e:	|         move.l d0,52(sp)
    ba52:	|         move.l 256(sp),48(sp)
    ba58:	|         move.l 1add8 <DOSBase>,d0
    ba5e:	|         movea.l d0,a6
    ba60:	|         move.l 52(sp),d1
    ba64:	|         move.l 48(sp),d2
    ba68:	|         jsr -312(a6)
    ba6c:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    ba70:	|         move.l 1ae2c <speech>,d0
    ba76:	|         move.l 256(sp),-(sp)
    ba7a:	|         move.l d0,-(sp)
    ba7c:	|         jsr 6e66 <saveSpeech>
    ba82:	|         addq.l #8,sp
	saveStatusBars (fp);
    ba84:	|         move.l 256(sp),-(sp)
    ba88:	|         jsr 6862 <saveStatusBars>
    ba8e:	|         addq.l #4,sp
	saveSounds (fp);
    ba90:	|         move.l 256(sp),-(sp)
    ba94:	|         jsr c036 <saveSounds>
    ba9a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    ba9c:	|         move.w 1aee0 <saveEncoding>,d0
    baa2:	|         move.w d0,d0
    baa4:	|         andi.l #65535,d0
    baaa:	|         move.l 256(sp),-(sp)
    baae:	|         move.l d0,-(sp)
    bab0:	|         jsr 8d0 <put2bytes>
    bab6:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    bab8:	|         move.l 1aed2 <parallaxStuff>,d0
    babe:	|         move.l 256(sp),-(sp)
    bac2:	|         move.l d0,-(sp)
    bac4:	|         jsr c32e <saveParallaxRecursive>
    baca:	|         addq.l #8,sp
	FPutC (fp, 0);
    bacc:	|         move.l 256(sp),40(sp)
    bad2:	|         clr.l 36(sp)
    bad6:	|         move.l 1add8 <DOSBase>,d0
    badc:	|         movea.l d0,a6
    bade:	|         move.l 40(sp),d1
    bae2:	|         move.l 36(sp),d2
    bae6:	|         jsr -312(a6)
    baea:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    baee:	|         move.l 256(sp),28(sp)
    baf4:	|         move.l 1a752 <languageNum>,24(sp)
    bafc:	|         move.l 1add8 <DOSBase>,d0
    bb02:	|         movea.l d0,a6
    bb04:	|         move.l 28(sp),d1
    bb08:	|         move.l 24(sp),d2
    bb0c:	|         jsr -312(a6)
    bb10:	|         move.l d0,20(sp)

	Close(fp);
    bb14:	|         move.l 256(sp),16(sp)
    bb1a:	|         move.l 1add8 <DOSBase>,d0
    bb20:	|         movea.l d0,a6
    bb22:	|         move.l 16(sp),d1
    bb26:	|         jsr -36(a6)
    bb2a:	|         move.l d0,12(sp)
	clearStackLib ();
    bb2e:	|         jsr b0c6 <clearStackLib>
	return TRUE;
    bb34:	|         moveq #1,d0
}
    bb36:	\-------> movem.l (sp)+,d2-d3/a6
    bb3a:	          lea 272(sp),sp
    bb3e:	          rts

0000bb40 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    bb40:	       lea -12(sp),sp
	int elements = 0;
    bb44:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    bb48:	       move.l 16(sp),(sp)
	while (search) {
    bb4c:	   /-- bra.s bb58 <saveStack+0x18>
		elements ++;
    bb4e:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bb52:	|  |   movea.l (sp),a0
    bb54:	|  |   move.l 8(a0),(sp)
	while (search) {
    bb58:	|  \-> tst.l (sp)
    bb5a:	\----- bne.s bb4e <saveStack+0xe>
	}

	put2bytes (elements, fp);
    bb5c:	       move.l 20(sp),-(sp)
    bb60:	       move.l 12(sp),-(sp)
    bb64:	       jsr 8d0 <put2bytes>
    bb6a:	       addq.l #8,sp
	search = vs;
    bb6c:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    bb70:	       clr.l 4(sp)
    bb74:	   /-- bra.s bb90 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    bb76:	/--|-> move.l (sp),d0
    bb78:	|  |   move.l 20(sp),-(sp)
    bb7c:	|  |   move.l d0,-(sp)
    bb7e:	|  |   jsr bccc <saveVariable>
    bb84:	|  |   addq.l #8,sp
		search = search -> next;
    bb86:	|  |   movea.l (sp),a0
    bb88:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    bb8c:	|  |   addq.l #1,4(sp)
    bb90:	|  \-> move.l 4(sp),d0
    bb94:	|      cmp.l 8(sp),d0
    bb98:	\----- blt.s bb76 <saveStack+0x36>
	}
}
    bb9a:	       nop
    bb9c:	       nop
    bb9e:	       lea 12(sp),sp
    bba2:	       rts

0000bba4 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    bba4:	             lea -44(sp),sp
    bba8:	             move.l a6,-(sp)
    bbaa:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    bbac:	             move.l 1aeb4 <stackLib>,48(sp)
	int a = 0;
    bbb4:	             clr.l 44(sp)
	while (s) {
    bbb8:	      /----- bra.s bc16 <saveStackRef+0x72>
		if (s -> stack == vs) {
    bbba:	   /--|----> movea.l 48(sp),a0
    bbbe:	   |  |      move.l (a0),d0
    bbc0:	   |  |      cmp.l 56(sp),d0
    bbc4:	   |  |  /-- bne.s bc08 <saveStackRef+0x64>
			FPutC (fp, 1);
    bbc6:	   |  |  |   move.l 60(sp),16(sp)
    bbcc:	   |  |  |   moveq #1,d0
    bbce:	   |  |  |   move.l d0,12(sp)
    bbd2:	   |  |  |   move.l 1add8 <DOSBase>,d0
    bbd8:	   |  |  |   movea.l d0,a6
    bbda:	   |  |  |   move.l 16(sp),d1
    bbde:	   |  |  |   move.l 12(sp),d2
    bbe2:	   |  |  |   jsr -312(a6)
    bbe6:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    bbea:	   |  |  |   move.l 1aeb0 <stackLibTotal>,d0
    bbf0:	   |  |  |   sub.l 44(sp),d0
    bbf4:	   |  |  |   move.l 60(sp),-(sp)
    bbf8:	   |  |  |   move.l d0,-(sp)
    bbfa:	   |  |  |   jsr 8d0 <put2bytes>
    bc00:	   |  |  |   addq.l #8,sp
			return TRUE;
    bc02:	   |  |  |   moveq #1,d0
    bc04:	/--|--|--|-- bra.w bcc2 <saveStackRef+0x11e>
		}
		s = s -> next;
    bc08:	|  |  |  \-> movea.l 48(sp),a0
    bc0c:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bc12:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bc16:	|  |  \----> tst.l 48(sp)
    bc1a:	|  \-------- bne.s bbba <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    bc1c:	|            move.l 60(sp),40(sp)
    bc22:	|            clr.l 36(sp)
    bc26:	|            move.l 1add8 <DOSBase>,d0
    bc2c:	|            movea.l d0,a6
    bc2e:	|            move.l 40(sp),d1
    bc32:	|            move.l 36(sp),d2
    bc36:	|            jsr -312(a6)
    bc3a:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bc3e:	|            movea.l 56(sp),a0
    bc42:	|            move.l (a0),d0
    bc44:	|            move.l 60(sp),-(sp)
    bc48:	|            move.l d0,-(sp)
    bc4a:	|            jsr bb40 <saveStack>
    bc50:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bc52:	|            moveq #8,d0
    bc54:	|            move.l d0,28(sp)
    bc58:	|            clr.l 24(sp)
    bc5c:	|            move.l 1add0 <SysBase>,d0
    bc62:	|            movea.l d0,a6
    bc64:	|            move.l 28(sp),d0
    bc68:	|            move.l 24(sp),d1
    bc6c:	|            jsr -684(a6)
    bc70:	|            move.l d0,20(sp)
    bc74:	|            move.l 20(sp),d0
    bc78:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bc7c:	|            move.l 1aeb0 <stackLibTotal>,d0
    bc82:	|            addq.l #1,d0
    bc84:	|            move.l d0,1aeb0 <stackLibTotal>
	if (! s) {
    bc8a:	|            tst.l 48(sp)
    bc8e:	|        /-- bne.s bca2 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bc90:	|        |   pea 178c0 <PutChar+0x1668>
    bc96:	|        |   jsr 15784 <KPrintF>
    bc9c:	|        |   addq.l #4,sp
		return FALSE;
    bc9e:	|        |   clr.w d0
    bca0:	+--------|-- bra.s bcc2 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bca2:	|        \-> move.l 1aeb4 <stackLib>,d0
    bca8:	|            movea.l 48(sp),a0
    bcac:	|            move.l d0,4(a0)
	s -> stack = vs;
    bcb0:	|            movea.l 48(sp),a0
    bcb4:	|            move.l 56(sp),(a0)
	stackLib = s;
    bcb8:	|            move.l 48(sp),1aeb4 <stackLib>
	return TRUE;
    bcc0:	|            moveq #1,d0
}
    bcc2:	\----------> move.l (sp)+,d2
    bcc4:	             movea.l (sp)+,a6
    bcc6:	             lea 44(sp),sp
    bcca:	             rts

0000bccc <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    bccc:	          lea -12(sp),sp
    bcd0:	          move.l a6,-(sp)
    bcd2:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    bcd4:	          move.l 28(sp),16(sp)
    bcda:	          movea.l 24(sp),a0
    bcde:	          move.l (a0),d0
    bce0:	          move.l d0,12(sp)
    bce4:	          move.l 1add8 <DOSBase>,d0
    bcea:	          movea.l d0,a6
    bcec:	          move.l 16(sp),d1
    bcf0:	          move.l 12(sp),d2
    bcf4:	          jsr -312(a6)
    bcf8:	          move.l d0,8(sp)
	switch (from -> varType) {
    bcfc:	          movea.l 24(sp),a0
    bd00:	          move.l (a0),d0
    bd02:	          moveq #9,d1
    bd04:	          cmp.l d0,d1
    bd06:	      /-- bcs.w bdb6 <saveVariable+0xea>
    bd0a:	      |   add.l d0,d0
    bd0c:	      |   movea.l d0,a0
    bd0e:	      |   adda.l #48410,a0
    bd14:	      |   move.w (a0),d0
    bd16:	      |   jmp (bd1a <saveVariable+0x4e>,pc,d0.w)
    bd1a:	      |   ori.l #1310740,(a0)+
    bd20:	      |   ori.b #20,(20,a0,d0.w)
    bd26:	      |   .short 0x004c
    bd28:	      |   ori.b #126,(a4)
    bd2c:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    bd30:	      |   ori.b #40,(a0)+
    bd34:	      |   ori.b #47,d4
    bd38:	      |   ori.b #0,(a4)+
    bd3c:	      |   jsr 958 <put4bytes>
    bd42:	      |   addq.l #8,sp
		return TRUE;
    bd44:	      |   moveq #1,d0
    bd46:	/-----|-- bra.w bdf2 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    bd4a:	|     |   movea.l 24(sp),a0
    bd4e:	|     |   move.l 4(a0),d0
    bd52:	|     |   move.l 28(sp),-(sp)
    bd56:	|     |   move.l d0,-(sp)
    bd58:	|     |   jsr bd8 <writeString>
    bd5e:	|     |   addq.l #8,sp
		return TRUE;
    bd60:	|     |   moveq #1,d0
    bd62:	+-----|-- bra.w bdf2 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    bd66:	|     |   movea.l 24(sp),a0
    bd6a:	|     |   move.l 4(a0),d0
    bd6e:	|     |   move.l 28(sp),-(sp)
    bd72:	|     |   move.l d0,-(sp)
    bd74:	|     |   jsr bba4 <saveStackRef>
    bd7a:	|     |   addq.l #8,sp
    bd7c:	+-----|-- bra.s bdf2 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    bd7e:	|     |   movea.l 24(sp),a0
    bd82:	|     |   move.l 4(a0),d0
    bd86:	|     |   move.l 28(sp),-(sp)
    bd8a:	|     |   move.l d0,-(sp)
    bd8c:	|     |   jsr 9f3a <saveCostume>
    bd92:	|     |   addq.l #8,sp
		return FALSE;
    bd94:	|     |   clr.w d0
    bd96:	+-----|-- bra.s bdf2 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    bd98:	|     |   movea.l 24(sp),a0
    bd9c:	|     |   move.l 4(a0),d0
    bda0:	|     |   move.l 28(sp),-(sp)
    bda4:	|     |   move.l d0,-(sp)
    bda6:	|     |   jsr 9e70 <saveAnim>
    bdac:	|     |   addq.l #8,sp
		return FALSE;
    bdae:	|     |   clr.w d0
    bdb0:	+-----|-- bra.s bdf2 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    bdb2:	|     |   clr.w d0
    bdb4:	+-----|-- bra.s bdf2 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    bdb6:	|     \-> movea.l 24(sp),a0
    bdba:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    bdbc:	|         moveq #10,d1
    bdbe:	|         cmp.l d0,d1
    bdc0:	|  /----- bcs.s bdda <saveVariable+0x10e>
						typeName[from->varType] :
    bdc2:	|  |      movea.l 24(sp),a0
    bdc6:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    bdc8:	|  |      add.l d0,d0
    bdca:	|  |      movea.l d0,a1
    bdcc:	|  |      adda.l d0,a1
    bdce:	|  |      lea 1acb2 <typeName>,a0
    bdd4:	|  |      move.l (0,a1,a0.l),d0
    bdd8:	|  |  /-- bra.s bde0 <saveVariable+0x114>
    bdda:	|  \--|-> move.l #96485,d0
    bde0:	|     \-> move.l d0,-(sp)
    bde2:	|         pea 178ec <PutChar+0x1694>
    bde8:	|         jsr 15784 <KPrintF>
    bdee:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    bdf0:	|         moveq #1,d0
    bdf2:	\-------> move.l (sp)+,d2
    bdf4:	          movea.l (sp)+,a6
    bdf6:	          lea 12(sp),sp
    bdfa:	          rts

0000bdfc <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    bdfc:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    be00:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    be08:	          movea.l 4(sp),a0
    be0c:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    be12:	          movea.l 4(sp),a0
    be16:	          move.w 10(a0),d0
    be1a:	          lsr.w #8,d0
    be1c:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    be20:	          movea.l 4(sp),a0
    be24:	          move.w 10(a0),d0
    be28:	          move.b d0,(sp)

    if(counterx_new)
    be2a:	/-------- beq.w bed2 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    be2e:	|         clr.w d1
    be30:	|         move.b (sp),d1
    be32:	|         move.l 1aebc <counterx_old>,d0
    be38:	|         move.l d0,d0
    be3a:	|         sub.w d0,d1
    be3c:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    be40:	|         cmpi.w #128,10(sp)
    be46:	|     /-- blt.s be5e <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    be48:	|     |   move.w #1,1ad86 <input+0x4>
            counterx_diff -= 256;    
    be50:	|     |   move.w 10(sp),d0
    be54:	|     |   addi.w #-256,d0
    be58:	|     |   move.w d0,10(sp)
    be5c:	|  /--|-- bra.s be8a <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    be5e:	|  |  \-> cmpi.w #-129,10(sp)
    be64:	|  |  /-- bgt.s be7c <CsiCheckInput+0x80>
            counterx_diff += 256;
    be66:	|  |  |   move.w 10(sp),d0
    be6a:	|  |  |   addi.w #256,d0
    be6e:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    be72:	|  |  |   move.w #1,1ad86 <input+0x4>
    be7a:	|  +--|-- bra.s be8a <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    be7c:	|  |  \-> tst.w 10(sp)
    be80:	|  +----- beq.s be8a <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    be82:	|  |      move.w #1,1ad86 <input+0x4>
        }

        input.mouseX += counterx_diff;
    be8a:	|  \----> move.l 1ad8c <input+0xa>,d0
    be90:	|         movea.w 10(sp),a0
    be94:	|         add.l a0,d0
    be96:	|         move.l d0,1ad8c <input+0xa>

        if( input.mouseX > (int) winWidth) {
    be9c:	|         move.l 1ad8c <input+0xa>,d1
    bea2:	|         move.l 1ad24 <winWidth>,d0
    bea8:	|         cmp.l d1,d0
    beaa:	|     /-- bge.s beba <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    beac:	|     |   move.l 1ad24 <winWidth>,d0
    beb2:	|     |   move.l d0,1ad8c <input+0xa>
    beb8:	|  /--|-- bra.s bec8 <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    beba:	|  |  \-> move.l 1ad8c <input+0xa>,d0
    bec0:	|  +----- bpl.s bec8 <CsiCheckInput+0xcc>
            input.mouseX = 0;
    bec2:	|  |      clr.l 1ad8c <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    bec8:	|  \----> moveq #0,d0
    beca:	|         move.b (sp),d0
    becc:	|         move.l d0,1aebc <counterx_old>
    }    

    if(countery_new)
    bed2:	\-------> tst.b 1(sp)
    bed6:	/-------- beq.w bf82 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    beda:	|         clr.w d1
    bedc:	|         move.b 1(sp),d1
    bee0:	|         move.l 1aec0 <countery_old>,d0
    bee6:	|         move.l d0,d0
    bee8:	|         sub.w d0,d1
    beea:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    beee:	|         cmpi.w #128,8(sp)
    bef4:	|     /-- blt.s bf0c <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    bef6:	|     |   move.w #1,1ad86 <input+0x4>
            countery_diff -= 256;    
    befe:	|     |   move.w 8(sp),d0
    bf02:	|     |   addi.w #-256,d0
    bf06:	|     |   move.w d0,8(sp)
    bf0a:	|  /--|-- bra.s bf38 <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    bf0c:	|  |  \-> cmpi.w #-129,8(sp)
    bf12:	|  |  /-- bgt.s bf2a <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    bf14:	|  |  |   move.w #1,1ad86 <input+0x4>
            countery_diff += 256;
    bf1c:	|  |  |   move.w 8(sp),d0
    bf20:	|  |  |   addi.w #256,d0
    bf24:	|  |  |   move.w d0,8(sp)
    bf28:	|  +--|-- bra.s bf38 <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    bf2a:	|  |  \-> tst.w 8(sp)
    bf2e:	|  +----- beq.s bf38 <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    bf30:	|  |      move.w #1,1ad86 <input+0x4>
        }

        input.mouseY += countery_diff;
    bf38:	|  \----> move.l 1ad90 <input+0xe>,d0
    bf3e:	|         movea.w 8(sp),a0
    bf42:	|         add.l a0,d0
    bf44:	|         move.l d0,1ad90 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    bf4a:	|         move.l 1ad90 <input+0xe>,d1
    bf50:	|         move.l 1ad28 <winHeight>,d0
    bf56:	|         cmp.l d1,d0
    bf58:	|     /-- bge.s bf68 <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    bf5a:	|     |   move.l 1ad28 <winHeight>,d0
    bf60:	|     |   move.l d0,1ad90 <input+0xe>
    bf66:	|  /--|-- bra.s bf76 <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    bf68:	|  |  \-> move.l 1ad90 <input+0xe>,d0
    bf6e:	|  +----- bpl.s bf76 <CsiCheckInput+0x17a>
            input.mouseY = 0;
    bf70:	|  |      clr.l 1ad90 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    bf76:	|  \----> moveq #0,d0
    bf78:	|         move.b 1(sp),d0
    bf7c:	|         move.l d0,1aec0 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    bf82:	\-------> move.w 1ad82 <input>,d0
    bf88:	      /-- beq.s bfae <CsiCheckInput+0x1b2>
    bf8a:	      |   movea.l #12574721,a0
    bf90:	      |   move.b (a0),d0
    bf92:	      |   move.b d0,d0
    bf94:	      |   andi.l #255,d0
    bf9a:	      |   moveq #64,d1
    bf9c:	      |   and.l d1,d0
    bf9e:	      +-- beq.s bfae <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    bfa0:	      |   clr.w 1ad82 <input>
        input.leftRelease = TRUE;
    bfa6:	      |   move.w #1,1ad88 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    bfae:	      \-> move.w 1ad84 <input+0x2>,d0
    bfb4:	      /-- beq.s bfdc <CsiCheckInput+0x1e0>
    bfb6:	      |   movea.l #14675990,a0
    bfbc:	      |   move.w (a0),d0
    bfbe:	      |   move.w d0,d0
    bfc0:	      |   andi.l #65535,d0
    bfc6:	      |   andi.l #1024,d0
    bfcc:	      +-- beq.s bfdc <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    bfce:	      |   clr.w 1ad84 <input+0x2>
        input.rightRelease = TRUE;
    bfd4:	      |   move.w #1,1ad8a <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    bfdc:	      \-> movea.l #12574721,a0
    bfe2:	          move.b (a0),d0
    bfe4:	          move.b d0,d0
    bfe6:	          andi.l #255,d0
    bfec:	          moveq #64,d1
    bfee:	          and.l d1,d0
    bff0:	      /-- bne.s bffa <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    bff2:	      |   move.w #1,1ad82 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    bffa:	      \-> movea.l #14675990,a0
    c000:	          move.w (a0),d0
    c002:	          move.w d0,d0
    c004:	          andi.l #65535,d0
    c00a:	          andi.l #1024,d0
    c010:	      /-- bne.s c01a <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c012:	      |   move.w #1,1ad84 <input+0x2>
    }

    c01a:	      \-> nop
    c01c:	          lea 12(sp),sp
    c020:	          rts

0000c022 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c022:	moveq #0,d0
}
    c024:	rts

0000c026 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c026:	nop
    c028:	rts

0000c02a <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c02a:	nop
    c02c:	rts

0000c02e <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c02e:	moveq #1,d0
}
    c030:	rts

0000c032 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c032:	nop
    c034:	rts

0000c036 <saveSounds>:

void saveSounds (BPTR fp) {
    c036:	lea -12(sp),sp
    c03a:	move.l a6,-(sp)
    c03c:	move.l d2,-(sp)
	FPutC (fp,0);
    c03e:	move.l 24(sp),16(sp)
    c044:	clr.l 12(sp)
    c048:	move.l 1add8 <DOSBase>,d0
    c04e:	movea.l d0,a6
    c050:	move.l 16(sp),d1
    c054:	move.l 12(sp),d2
    c058:	jsr -312(a6)
    c05c:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c060:	move.l 1a770 <defSoundVol>,d0
    c066:	move.l 24(sp),-(sp)
    c06a:	move.l d0,-(sp)
    c06c:	jsr 8d0 <put2bytes>
    c072:	addq.l #8,sp
	put2bytes (defVol, fp);
    c074:	move.l 1a76c <defVol>,d0
    c07a:	move.l 24(sp),-(sp)
    c07e:	move.l d0,-(sp)
    c080:	jsr 8d0 <put2bytes>
    c086:	addq.l #8,sp
}
    c088:	nop
    c08a:	move.l (sp)+,d2
    c08c:	movea.l (sp)+,a6
    c08e:	lea 12(sp),sp
    c092:	rts

0000c094 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c094:	move.l 4(sp),1a76c <defVol>
}
    c09c:	nop
    c09e:	rts

0000c0a0 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c0a0:	move.l 4(sp),1a770 <defSoundVol>
}
    c0a8:	nop
    c0aa:	rts

0000c0ac <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c0ac:	nop
    c0ae:	rts

0000c0b0 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c0b0:	nop
    c0b2:	rts

0000c0b4 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c0b4:	nop
    c0b6:	rts

0000c0b8 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c0b8:	subq.l #4,sp
    c0ba:	move.l 12(sp),d0
    c0be:	move.w d0,d0
    c0c0:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c0c4:	moveq #1,d0
}
    c0c6:	addq.l #4,sp
    c0c8:	rts

0000c0ca <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c0ca:	nop
    c0cc:	rts

0000c0ce <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c0ce:	move.l 16(sp),-(sp)
    c0d2:	move.l 16(sp),-(sp)
    c0d6:	jsr f54 <CstBlankScreen>
    c0dc:	addq.l #8,sp
}
    c0de:	nop
    c0e0:	rts

0000c0e2 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c0e2:	pea 1790f <PutChar+0x16b7>
    c0e8:	jsr 15784 <KPrintF>
    c0ee:	addq.l #4,sp
}
    c0f0:	nop
    c0f2:	rts

0000c0f4 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c0f4:	movea.l 8(sp),a1
    c0f8:	movea.l 12(sp),a0
    c0fc:	move.l 8(sp),d1
    c100:	move.l 4(sp),d0
    c104:	move.l a1,-(sp)
    c106:	move.l a0,-(sp)
    c108:	move.l d1,-(sp)
    c10a:	move.l d0,-(sp)
    c10c:	jsr 2d0c <drawLine>
    c112:	lea 16(sp),sp
}
    c116:	nop
    c118:	rts

0000c11a <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c11a:	movea.l 12(sp),a1
    c11e:	movea.l 4(sp),a0
    c122:	move.l 8(sp),d1
    c126:	move.l 4(sp),d0
    c12a:	move.l a1,-(sp)
    c12c:	move.l a0,-(sp)
    c12e:	move.l d1,-(sp)
    c130:	move.l d0,-(sp)
    c132:	jsr 2d0c <drawLine>
    c138:	lea 16(sp),sp
}
    c13c:	nop
    c13e:	rts

0000c140 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c140:	pea 17948 <PutChar+0x16f0>
    c146:	jsr 15784 <KPrintF>
    c14c:	addq.l #4,sp
}
    c14e:	nop
    c150:	rts

0000c152 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c152:	jsr 2c64 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c158:	pea 1aecc <backdropTextureName>
    c15e:	pea 1 <_start+0x1>
    c162:	jsr 2e8e <deleteTextures>
    c168:	addq.l #8,sp
	backdropTextureName = 0;
    c16a:	clr.l 1aecc <backdropTextureName>
	backdropExists = FALSE;
    c170:	clr.w 1aed0 <backdropExists>
}
    c176:	nop
    c178:	rts

0000c17a <killParallax>:

void killParallax () {
    c17a:	          lea -12(sp),sp
    c17e:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c180:	   /----- bra.s c1ec <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c182:	/--|----> move.l 1aed2 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c18a:	|  |      movea.l 12(sp),a0
    c18e:	|  |      move.l 42(a0),d0
    c192:	|  |      move.l d0,1aed2 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c198:	|  |      move.l 12(sp),d0
    c19c:	|  |      addq.l #4,d0
    c19e:	|  |      move.l d0,-(sp)
    c1a0:	|  |      pea 1 <_start+0x1>
    c1a4:	|  |      jsr 2e8e <deleteTextures>
    c1aa:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c1ac:	|  |      movea.l 12(sp),a0
    c1b0:	|  |      move.l (a0),d0
    c1b2:	|  |  /-- beq.s c1cc <killParallax+0x52>
    c1b4:	|  |  |   movea.l 12(sp),a0
    c1b8:	|  |  |   move.l (a0),8(sp)
    c1bc:	|  |  |   move.l 1add0 <SysBase>,d0
    c1c2:	|  |  |   movea.l d0,a6
    c1c4:	|  |  |   movea.l 8(sp),a1
    c1c8:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c1cc:	|  |  \-> tst.l 12(sp)
    c1d0:	|  |  /-- beq.s c1e8 <killParallax+0x6e>
    c1d2:	|  |  |   move.l 12(sp),4(sp)
    c1d8:	|  |  |   move.l 1add0 <SysBase>,d0
    c1de:	|  |  |   movea.l d0,a6
    c1e0:	|  |  |   movea.l 4(sp),a1
    c1e4:	|  |  |   jsr -690(a6)
		k = NULL;
    c1e8:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c1ec:	|  \----> move.l 1aed2 <parallaxStuff>,d0
    c1f2:	\-------- bne.s c182 <killParallax+0x8>
	}
}
    c1f4:	          nop
    c1f6:	          nop
    c1f8:	          movea.l (sp)+,a6
    c1fa:	          lea 12(sp),sp
    c1fe:	          rts

0000c200 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c200:	       move.l 4(sp),-(sp)
    c204:	       jsr 5bcc <openFileFromNum>
    c20a:	       addq.l #4,sp
    c20c:	       tst.l d0
    c20e:	   /-- bne.s c220 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c210:	   |   pea 17969 <PutChar+0x1711>
    c216:	   |   jsr 15784 <KPrintF>
    c21c:	   |   addq.l #4,sp
		return;
    c21e:	/--|-- bra.s c240 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c220:	|  \-> move.l 1adb8 <bigDataFile>,d0
    c226:	|      move.l 12(sp),-(sp)
    c22a:	|      move.l 12(sp),-(sp)
    c22e:	|      move.l d0,-(sp)
    c230:	|      jsr 162e <CstLoadBackdrop>
    c236:	|      lea 12(sp),sp
	finishAccess ();
    c23a:	|      jsr 5ac4 <finishAccess>
	
}
    c240:	\----> rts

0000c242 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c242:	subq.l #8,sp
    c244:	movea.l 12(sp),a0
    c248:	move.l 16(sp),d1
    c24c:	move.l 20(sp),d0
    c250:	movea.w a0,a0
    c252:	move.w a0,6(sp)
    c256:	move.w d1,d1
    c258:	move.w d1,4(sp)
    c25c:	move.w d0,d0
    c25e:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c262:	pea 179b8 <PutChar+0x1760>
    c268:	jsr 15784 <KPrintF>
    c26e:	addq.l #4,sp

}
    c270:	nop
    c272:	addq.l #8,sp
    c274:	rts

0000c276 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c276:	pea 179db <PutChar+0x1783>
    c27c:	jsr 15784 <KPrintF>
    c282:	addq.l #4,sp
}
    c284:	nop
    c286:	rts

0000c288 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c288:	pea 1aed6 <snapshotTextureName>
    c28e:	pea 1 <_start+0x1>
    c292:	jsr 2e8e <deleteTextures>
    c298:	addq.l #8,sp
	snapshotTextureName = 0;
    c29a:	clr.l 1aed6 <snapshotTextureName>
}
    c2a0:	nop
    c2a2:	rts

0000c2a4 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c2a4:	clr.l 1aee2 <cameraX>
	cameraY = 0;
    c2aa:	clr.l 1aee6 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c2b0:	move.l 1aec8 <sceneHeight>,d0
    c2b6:	move.l d0,d1
    c2b8:	move.l 1aec4 <sceneWidth>,d0
    c2be:	move.l d1,-(sp)
    c2c0:	move.l d0,-(sp)
    c2c2:	jsr 28f8 <CstReserveBackdrop>
    c2c8:	addq.l #8,sp
}
    c2ca:	rts

0000c2cc <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c2cc:	jsr c152 <killBackDrop>
	killParallax ();
    c2d2:	jsr c17a <killParallax>
	killZBuffer ();
    c2d8:	jsr 7560 <killZBuffer>
	sceneWidth = x;
    c2de:	move.l 4(sp),d0
    c2e2:	move.l d0,1aec4 <sceneWidth>
	sceneHeight = y;
    c2e8:	move.l 8(sp),d0
    c2ec:	move.l d0,1aec8 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c2f2:	pea 17a14 <PutChar+0x17bc>
    c2f8:	jsr 15784 <KPrintF>
    c2fe:	addq.l #4,sp
	return reserveBackdrop();
    c300:	jsr c2a4 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c306:	rts

0000c308 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c308:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c30a:	move.l 12(sp),-(sp)
    c30e:	jsr 6bc <get2bytes>
    c314:	addq.l #4,sp
    c316:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c31a:	move.l 12(sp),-(sp)
    c31e:	jsr 6bc <get2bytes>
    c324:	addq.l #4,sp
    c326:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c328:	moveq #1,d0
}
    c32a:	addq.l #8,sp
    c32c:	rts

0000c32e <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c32e:	   /-> lea -12(sp),sp
    c332:	   |   move.l a6,-(sp)
    c334:	   |   move.l d2,-(sp)
	if (me) {
    c336:	   |   tst.l 24(sp)
    c33a:	/--|-- beq.w c3d0 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c33e:	|  |   movea.l 24(sp),a0
    c342:	|  |   move.l 42(a0),d0
    c346:	|  |   move.l 28(sp),-(sp)
    c34a:	|  |   move.l d0,-(sp)
    c34c:	|  \-- jsr c32e <saveParallaxRecursive>(pc)
    c350:	|      addq.l #8,sp
		FPutC (fp, 1);
    c352:	|      move.l 28(sp),16(sp)
    c358:	|      moveq #1,d0
    c35a:	|      move.l d0,12(sp)
    c35e:	|      move.l 1add8 <DOSBase>,d0
    c364:	|      movea.l d0,a6
    c366:	|      move.l 16(sp),d1
    c36a:	|      move.l 12(sp),d2
    c36e:	|      jsr -312(a6)
    c372:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c376:	|      movea.l 24(sp),a0
    c37a:	|      move.w 28(a0),d0
    c37e:	|      move.w d0,d0
    c380:	|      andi.l #65535,d0
    c386:	|      move.l 28(sp),-(sp)
    c38a:	|      move.l d0,-(sp)
    c38c:	|      jsr 8d0 <put2bytes>
    c392:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c394:	|      movea.l 24(sp),a0
    c398:	|      move.w 30(a0),d0
    c39c:	|      move.w d0,d0
    c39e:	|      andi.l #65535,d0
    c3a4:	|      move.l 28(sp),-(sp)
    c3a8:	|      move.l d0,-(sp)
    c3aa:	|      jsr 8d0 <put2bytes>
    c3b0:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c3b2:	|      movea.l 24(sp),a0
    c3b6:	|      move.w 32(a0),d0
    c3ba:	|      move.w d0,d0
    c3bc:	|      andi.l #65535,d0
    c3c2:	|      move.l 28(sp),-(sp)
    c3c6:	|      move.l d0,-(sp)
    c3c8:	|      jsr 8d0 <put2bytes>
    c3ce:	|      addq.l #8,sp
	}
}
    c3d0:	\----> nop
    c3d2:	       move.l (sp)+,d2
    c3d4:	       movea.l (sp)+,a6
    c3d6:	       lea 12(sp),sp
    c3da:	       rts

0000c3dc <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c3dc:	pea 17a3b <PutChar+0x17e3>
    c3e2:	jsr 15784 <KPrintF>
    c3e8:	addq.l #4,sp
	return TRUE;
    c3ea:	moveq #1,d0
    c3ec:	rts

0000c3ee <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c3ee:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c3f0:	             move.l 1aeda <allObjectTypes>,(sp)

	while (huntType) {
    c3f6:	      /----- bra.s c40e <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c3f8:	   /--|----> movea.l (sp),a0
    c3fa:	   |  |      move.l 4(a0),d0
    c3fe:	   |  |      cmp.l 8(sp),d0
    c402:	   |  |  /-- bne.s c408 <findObjectType+0x1a>
    c404:	   |  |  |   move.l (sp),d0
    c406:	/--|--|--|-- bra.s c41e <findObjectType+0x30>
		huntType = huntType -> next;
    c408:	|  |  |  \-> movea.l (sp),a0
    c40a:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c40e:	|  |  \----> tst.l (sp)
    c410:	|  \-------- bne.s c3f8 <findObjectType+0xa>
	}

	return loadObjectType (i);
    c412:	|            move.l 8(sp),-(sp)
    c416:	|            jsr c4de <loadObjectType>
    c41c:	|            addq.l #4,sp
}
    c41e:	\----------> addq.l #4,sp
    c420:	             rts

0000c422 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c422:	             lea -12(sp),sp
	int i, num = 0;
    c426:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c42a:	             move.l 20(sp),-(sp)
    c42e:	             jsr c3ee <findObjectType>
    c434:	             addq.l #4,sp
    c436:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c438:	             clr.l 8(sp)
    c43c:	   /-------- bra.s c472 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c43e:	/--|-------> movea.l (sp),a0
    c440:	|  |         move.l 38(a0),d1
    c444:	|  |         move.l 8(sp),d0
    c448:	|  |         lsl.l #3,d0
    c44a:	|  |         movea.l d1,a0
    c44c:	|  |         adda.l d0,a0
    c44e:	|  |         move.l (a0),d0
    c450:	|  |         cmp.l 16(sp),d0
    c454:	|  |  /----- bne.s c46e <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c456:	|  |  |      movea.l (sp),a0
    c458:	|  |  |      move.l 38(a0),d1
    c45c:	|  |  |      move.l 8(sp),d0
    c460:	|  |  |      lsl.l #3,d0
    c462:	|  |  |      movea.l d1,a0
    c464:	|  |  |      adda.l d0,a0
    c466:	|  |  |      move.l 4(a0),4(sp)
			break;
    c46c:	|  |  |  /-- bra.s c47e <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c46e:	|  |  \--|-> addq.l #1,8(sp)
    c472:	|  \-----|-> movea.l (sp),a0
    c474:	|        |   move.l 16(a0),d0
    c478:	|        |   cmp.l 8(sp),d0
    c47c:	\--------|-- bgt.s c43e <getCombinationFunction+0x1c>
		}
	}

	return num;
    c47e:	         \-> move.l 4(sp),d0
}
    c482:	             lea 12(sp),sp
    c486:	             rts

0000c488 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c488:	moveq #1,d0
}
    c48a:	rts

0000c48c <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c48c:	subq.l #8,sp
    c48e:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c490:	move.l 16(sp),-(sp)
    c494:	jsr 6bc <get2bytes>
    c49a:	addq.l #4,sp
    c49c:	move.l d0,-(sp)
    c49e:	jsr c4de <loadObjectType>
    c4a4:	addq.l #4,sp
    c4a6:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c4aa:	movea.l 8(sp),a0
    c4ae:	move.l (a0),4(sp)
    c4b2:	move.l 1add0 <SysBase>,d0
    c4b8:	movea.l d0,a6
    c4ba:	movea.l 4(sp),a1
    c4be:	jsr -690(a6)
	r -> screenName = readString (fp);
    c4c2:	move.l 16(sp),-(sp)
    c4c6:	jsr b02 <readString>
    c4cc:	addq.l #4,sp
    c4ce:	movea.l 8(sp),a0
    c4d2:	move.l d0,(a0)
	return r;
    c4d4:	move.l 8(sp),d0
}
    c4d8:	movea.l (sp)+,a6
    c4da:	addq.l #8,sp
    c4dc:	rts

0000c4de <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c4de:	          lea -84(sp),sp
    c4e2:	          move.l a6,-(sp)
    c4e4:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c4e6:	          moveq #42,d0
    c4e8:	          move.l d0,84(sp)
    c4ec:	          clr.l 80(sp)
    c4f0:	          move.l 1add0 <SysBase>,d0
    c4f6:	          movea.l d0,a6
    c4f8:	          move.l 84(sp),d0
    c4fc:	          move.l 80(sp),d1
    c500:	          jsr -684(a6)
    c504:	          move.l d0,76(sp)
    c508:	          move.l 76(sp),d0
    c50c:	          move.l d0,72(sp)

    if (newType) {
    c510:	/-------- beq.w c78a <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c514:	|         move.l 96(sp),-(sp)
    c518:	|         jsr 5c94 <openObjectSlice>
    c51e:	|         addq.l #4,sp
    c520:	|         tst.w d0
    c522:	+-------- beq.w c78a <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c526:	|         move.l 1adb8 <bigDataFile>,d0
    c52c:	|         move.l d0,-(sp)
    c52e:	|         jsr 6bc <get2bytes>
    c534:	|         addq.l #4,sp
    c536:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c53a:	|         move.l 1adb8 <bigDataFile>,64(sp)
    c542:	|         move.l 1add8 <DOSBase>,d0
    c548:	|         movea.l d0,a6
    c54a:	|         move.l 64(sp),d1
    c54e:	|         jsr -306(a6)
    c552:	|         move.l d0,60(sp)
    c556:	|         move.l 60(sp),d0
    c55a:	|         move.l d0,d0
    c55c:	|         movea.l 72(sp),a0
    c560:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c564:	|         move.l 1adb8 <bigDataFile>,56(sp)
    c56c:	|         move.l 1add8 <DOSBase>,d0
    c572:	|         movea.l d0,a6
    c574:	|         move.l 56(sp),d1
    c578:	|         jsr -306(a6)
    c57c:	|         move.l d0,52(sp)
    c580:	|         move.l 52(sp),d0
    c584:	|         move.l d0,d0
    c586:	|         movea.l 72(sp),a0
    c58a:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c58e:	|         move.l 1adb8 <bigDataFile>,48(sp)
    c596:	|         move.l 1add8 <DOSBase>,d0
    c59c:	|         movea.l d0,a6
    c59e:	|         move.l 48(sp),d1
    c5a2:	|         jsr -306(a6)
    c5a6:	|         move.l d0,44(sp)
    c5aa:	|         move.l 44(sp),d0
    c5ae:	|         move.l d0,d0
    c5b0:	|         movea.l 72(sp),a0
    c5b4:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c5b8:	|         move.l 1adb8 <bigDataFile>,40(sp)
    c5c0:	|         move.l 1add8 <DOSBase>,d0
    c5c6:	|         movea.l d0,a6
    c5c8:	|         move.l 40(sp),d1
    c5cc:	|         jsr -306(a6)
    c5d0:	|         move.l d0,36(sp)
    c5d4:	|         move.l 36(sp),d0
    c5d8:	|         movea.l 72(sp),a0
    c5dc:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c5e0:	|         move.l 1adb8 <bigDataFile>,32(sp)
    c5e8:	|         move.l 1add8 <DOSBase>,d0
    c5ee:	|         movea.l d0,a6
    c5f0:	|         move.l 32(sp),d1
    c5f4:	|         jsr -306(a6)
    c5f8:	|         move.l d0,28(sp)
    c5fc:	|         move.l 28(sp),d0
    c600:	|         movea.l 72(sp),a0
    c604:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c608:	|         move.l 1adb8 <bigDataFile>,d0
    c60e:	|         move.l d0,-(sp)
    c610:	|         jsr 718 <get4bytes>
    c616:	|         addq.l #4,sp
    c618:	|         movea.l 72(sp),a0
    c61c:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c620:	|         move.l 1adb8 <bigDataFile>,d0
    c626:	|         move.l d0,-(sp)
    c628:	|         jsr 6bc <get2bytes>
    c62e:	|         addq.l #4,sp
    c630:	|         movea.l 72(sp),a0
    c634:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c638:	|         move.l 1adb8 <bigDataFile>,24(sp)
    c640:	|         move.l 1add8 <DOSBase>,d0
    c646:	|         movea.l d0,a6
    c648:	|         move.l 24(sp),d1
    c64c:	|         jsr -306(a6)
    c650:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c654:	|         move.l 1adb8 <bigDataFile>,d0
    c65a:	|         move.l d0,-(sp)
    c65c:	|         jsr 7d8 <getFloat>
    c662:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c664:	|         move.l 1adb8 <bigDataFile>,d0
    c66a:	|         move.l d0,-(sp)
    c66c:	|         jsr 7d8 <getFloat>
    c672:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c674:	|         move.l 1adb8 <bigDataFile>,d0
    c67a:	|         move.l d0,-(sp)
    c67c:	|         jsr 6bc <get2bytes>
    c682:	|         addq.l #4,sp
    c684:	|         move.l d0,d0
    c686:	|         movea.l 72(sp),a0
    c68a:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c68e:	|         move.l 1adb8 <bigDataFile>,d0
    c694:	|         move.l d0,-(sp)
    c696:	|         jsr 6bc <get2bytes>
    c69c:	|         addq.l #4,sp
    c69e:	|         movea.l 72(sp),a0
    c6a2:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c6a6:	|         movea.l 72(sp),a0
    c6aa:	|         move.l 16(a0),d0
    c6ae:	|  /----- beq.s c6e0 <loadObjectType+0x202>
    c6b0:	|  |      movea.l 72(sp),a0
    c6b4:	|  |      move.l 16(a0),d0
    c6b8:	|  |      lsl.l #3,d0
    c6ba:	|  |      move.l d0,16(sp)
    c6be:	|  |      clr.l 12(sp)
    c6c2:	|  |      move.l 1add0 <SysBase>,d0
    c6c8:	|  |      movea.l d0,a6
    c6ca:	|  |      move.l 16(sp),d0
    c6ce:	|  |      move.l 12(sp),d1
    c6d2:	|  |      jsr -684(a6)
    c6d6:	|  |      move.l d0,8(sp)
    c6da:	|  |      move.l 8(sp),d0
    c6de:	|  |  /-- bra.s c6e2 <loadObjectType+0x204>
    c6e0:	|  \--|-> moveq #0,d0
    c6e2:	|     \-> movea.l 72(sp),a0
    c6e6:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    c6ea:	|         clr.l 88(sp)
    c6ee:	|     /-- bra.s c73e <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    c6f0:	|  /--|-> move.l 1adb8 <bigDataFile>,d1
    c6f6:	|  |  |   movea.l 72(sp),a0
    c6fa:	|  |  |   movea.l 38(a0),a0
    c6fe:	|  |  |   move.l 88(sp),d0
    c702:	|  |  |   lsl.l #3,d0
    c704:	|  |  |   lea (0,a0,d0.l),a2
    c708:	|  |  |   move.l d1,-(sp)
    c70a:	|  |  |   jsr 6bc <get2bytes>
    c710:	|  |  |   addq.l #4,sp
    c712:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    c714:	|  |  |   move.l 1adb8 <bigDataFile>,d1
    c71a:	|  |  |   movea.l 72(sp),a0
    c71e:	|  |  |   movea.l 38(a0),a0
    c722:	|  |  |   move.l 88(sp),d0
    c726:	|  |  |   lsl.l #3,d0
    c728:	|  |  |   lea (0,a0,d0.l),a2
    c72c:	|  |  |   move.l d1,-(sp)
    c72e:	|  |  |   jsr 6bc <get2bytes>
    c734:	|  |  |   addq.l #4,sp
    c736:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    c73a:	|  |  |   addq.l #1,88(sp)
    c73e:	|  |  \-> movea.l 72(sp),a0
    c742:	|  |      move.l 16(a0),d0
    c746:	|  |      cmp.l 88(sp),d0
    c74a:	|  \----- bgt.s c6f0 <loadObjectType+0x212>
            }
            finishAccess();
    c74c:	|         jsr 5ac4 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    c752:	|         move.l 68(sp),-(sp)
    c756:	|         jsr 5ace <getNumberedString>
    c75c:	|         addq.l #4,sp
    c75e:	|         movea.l 72(sp),a0
    c762:	|         move.l d0,(a0)
            newType->objectNum = i;
    c764:	|         movea.l 72(sp),a0
    c768:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    c76e:	|         move.l 1aeda <allObjectTypes>,d0
    c774:	|         movea.l 72(sp),a0
    c778:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    c77c:	|         move.l 72(sp),1aeda <allObjectTypes>
            return newType;
    c784:	|         move.l 72(sp),d0
    c788:	|     /-- bra.s c78c <loadObjectType+0x2ae>
        }
    }
    return NULL;
    c78a:	\-----|-> moveq #0,d0
}
    c78c:	      \-> movea.l (sp)+,a2
    c78e:	          movea.l (sp)+,a6
    c790:	          lea 84(sp),sp
    c794:	          rts

0000c796 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    c796:	             lea -16(sp),sp
    c79a:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    c79c:	             move.l #110298,16(sp)

	while (* huntRegion) {
    c7a4:	   /-------- bra.s c818 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    c7a6:	/--|-------> movea.l 16(sp),a0
    c7aa:	|  |         move.l (a0),d0
    c7ac:	|  |         cmp.l 24(sp),d0
    c7b0:	|  |  /----- bne.s c80a <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    c7b2:	|  |  |      movea.l 24(sp),a0
    c7b6:	|  |  |      move.l 8(a0),d0
    c7ba:	|  |  |      movea.l 16(sp),a0
    c7be:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    c7c0:	|  |  |      movea.l 24(sp),a0
    c7c4:	|  |  |      move.l 38(a0),12(sp)
    c7ca:	|  |  |      move.l 1add0 <SysBase>,d0
    c7d0:	|  |  |      movea.l d0,a6
    c7d2:	|  |  |      movea.l 12(sp),a1
    c7d6:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    c7da:	|  |  |      movea.l 24(sp),a0
    c7de:	|  |  |      move.l (a0),8(sp)
    c7e2:	|  |  |      move.l 1add0 <SysBase>,d0
    c7e8:	|  |  |      movea.l d0,a6
    c7ea:	|  |  |      movea.l 8(sp),a1
    c7ee:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    c7f2:	|  |  |      move.l 24(sp),4(sp)
    c7f8:	|  |  |      move.l 1add0 <SysBase>,d0
    c7fe:	|  |  |      movea.l d0,a6
    c800:	|  |  |      movea.l 4(sp),a1
    c804:	|  |  |      jsr -690(a6)
			return;
    c808:	|  |  |  /-- bra.s c82e <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    c80a:	|  |  \--|-> movea.l 16(sp),a0
    c80e:	|  |     |   move.l (a0),d0
    c810:	|  |     |   move.l d0,d1
    c812:	|  |     |   addq.l #8,d1
    c814:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    c818:	|  \-----|-> movea.l 16(sp),a0
    c81c:	|        |   move.l (a0),d0
    c81e:	\--------|-- bne.s c7a6 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    c820:	         |   pea 17a62 <PutChar+0x180a>
    c826:	         |   jsr 15784 <KPrintF>
    c82c:	         |   addq.l #4,sp
}
    c82e:	         \-> movea.l (sp)+,a6
    c830:	             lea 16(sp),sp
    c834:	             rts

0000c836 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    c836:	movea.l 4(sp),a0
    c83a:	move.l 4(a0),d0
    c83e:	move.l 8(sp),-(sp)
    c842:	move.l d0,-(sp)
    c844:	jsr 8d0 <put2bytes>
    c84a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    c84c:	movea.l 4(sp),a0
    c850:	move.l (a0),d0
    c852:	move.l 8(sp),-(sp)
    c856:	move.l d0,-(sp)
    c858:	jsr bd8 <writeString>
    c85e:	addq.l #8,sp
    c860:	nop
    c862:	rts

0000c864 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    c864:	                         lea -112(sp),sp
    c868:	                         move.l a6,-(sp)
    c86a:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    c86c:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    c870:	                         move.w 1aee0 <saveEncoding>,d0
    c876:	                  /----- beq.s c880 <fileToStack+0x1c>
    c878:	                  |      move.l #96904,d0
    c87e:	                  |  /-- bra.s c886 <fileToStack+0x22>
    c880:	                  \--|-> move.l #96930,d0
    c886:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    c88a:	                         move.l 124(sp),112(sp)
    c890:	                         move.l #1005,108(sp)
    c898:	                         move.l 1add8 <DOSBase>,d0
    c89e:	                         movea.l d0,a6
    c8a0:	                         move.l 112(sp),d1
    c8a4:	                         move.l 108(sp),d2
    c8a8:	                         jsr -30(a6)
    c8ac:	                         move.l d0,104(sp)
    c8b0:	                         move.l 104(sp),d0
    c8b4:	                         move.l d0,100(sp)
    if (!fp) {
    c8b8:	                     /-- bne.s c8d2 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    c8ba:	                     |   move.l 124(sp),-(sp)
    c8be:	                     |   pea 17ab9 <PutChar+0x1861>
    c8c4:	                     |   jsr 15784 <KPrintF>
    c8ca:	                     |   addq.l #8,sp
        return FALSE;
    c8cc:	                     |   clr.w d0
    c8ce:	/--------------------|-- bra.w cbc8 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    c8d2:	|                    \-> move.w 1aee0 <saveEncoding>,d0
    c8d8:	|                        move.l d0,d0
    c8da:	|                        move.b d0,1aede <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    c8e0:	|                        move.w 1aee0 <saveEncoding>,d0
    c8e6:	|                        lsr.w #8,d0
    c8e8:	|                        move.l d0,d0
    c8ea:	|                        move.b d0,1aedf <encode2>

    while (*checker) {
    c8f0:	|                 /----- bra.s c954 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    c8f2:	|              /--|----> move.l 100(sp),30(sp)
    c8f8:	|              |  |      move.l 1add8 <DOSBase>,d0
    c8fe:	|              |  |      movea.l d0,a6
    c900:	|              |  |      move.l 30(sp),d1
    c904:	|              |  |      jsr -306(a6)
    c908:	|              |  |      move.l d0,26(sp)
    c90c:	|              |  |      move.l 26(sp),d1
    c910:	|              |  |      movea.l 116(sp),a0
    c914:	|              |  |      move.b (a0),d0
    c916:	|              |  |      ext.w d0
    c918:	|              |  |      movea.w d0,a0
    c91a:	|              |  |      cmpa.l d1,a0
    c91c:	|              |  |  /-- beq.s c950 <fileToStack+0xec>
            Close(fp);
    c91e:	|              |  |  |   move.l 100(sp),22(sp)
    c924:	|              |  |  |   move.l 1add8 <DOSBase>,d0
    c92a:	|              |  |  |   movea.l d0,a6
    c92c:	|              |  |  |   move.l 22(sp),d1
    c930:	|              |  |  |   jsr -36(a6)
    c934:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    c938:	|              |  |  |   move.l 124(sp),-(sp)
    c93c:	|              |  |  |   pea 17ac6 <PutChar+0x186e>
    c942:	|              |  |  |   jsr 15784 <KPrintF>
    c948:	|              |  |  |   addq.l #8,sp
            return FALSE;
    c94a:	|              |  |  |   clr.w d0
    c94c:	+--------------|--|--|-- bra.w cbc8 <fileToStack+0x364>
        }
        checker++;
    c950:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    c954:	|              |  \----> movea.l 116(sp),a0
    c958:	|              |         move.b (a0),d0
    c95a:	|              \-------- bne.s c8f2 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    c95c:	|                        move.w 1aee0 <saveEncoding>,d0
    c962:	|  /-------------------- beq.s c9d6 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    c964:	|  |                     move.l 100(sp),-(sp)
    c968:	|  |                     jsr cbd2 <readStringEncoded>
    c96e:	|  |                     addq.l #4,sp
    c970:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    c974:	|  |                     pea 17b07 <PutChar+0x18af>
    c97a:	|  |                     move.l 100(sp),-(sp)
    c97e:	|  |                     jsr 12a64 <strcmp>
    c984:	|  |                     addq.l #8,sp
    c986:	|  |                     tst.l d0
    c988:	|  |                 /-- beq.s c9bc <fileToStack+0x158>
            Close(fp);
    c98a:	|  |                 |   move.l 100(sp),88(sp)
    c990:	|  |                 |   move.l 1add8 <DOSBase>,d0
    c996:	|  |                 |   movea.l d0,a6
    c998:	|  |                 |   move.l 88(sp),d1
    c99c:	|  |                 |   jsr -36(a6)
    c9a0:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    c9a4:	|  |                 |   move.l 124(sp),-(sp)
    c9a8:	|  |                 |   pea 17b16 <PutChar+0x18be>
    c9ae:	|  |                 |   jsr 15784 <KPrintF>
    c9b4:	|  |                 |   addq.l #8,sp
            return FALSE;
    c9b6:	|  |                 |   clr.w d0
    c9b8:	+--|-----------------|-- bra.w cbc8 <fileToStack+0x364>
        }
        FreeVec(checker);
    c9bc:	|  |                 \-> move.l 96(sp),92(sp)
    c9c2:	|  |                     move.l 1add0 <SysBase>,d0
    c9c8:	|  |                     movea.l d0,a6
    c9ca:	|  |                     movea.l 92(sp),a1
    c9ce:	|  |                     jsr -690(a6)
        checker = NULL;
    c9d2:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    c9d6:	|  >-------------------> move.w 1aee0 <saveEncoding>,d0
    c9dc:	|  |     /-------------- beq.w cb10 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    c9e0:	|  |     |               move.l 100(sp),76(sp)
    c9e6:	|  |     |               move.l 1add8 <DOSBase>,d0
    c9ec:	|  |     |               movea.l d0,a6
    c9ee:	|  |     |               move.l 76(sp),d1
    c9f2:	|  |     |               jsr -306(a6)
    c9f6:	|  |     |               move.l d0,72(sp)
    c9fa:	|  |     |               move.l 72(sp),d0
    c9fe:	|  |     |               move.b 1aede <encode1>,d1
    ca04:	|  |     |               ext.w d1
    ca06:	|  |     |               ext.l d1
    ca08:	|  |     |               move.l d0,d2
    ca0a:	|  |     |               eor.l d1,d2
    ca0c:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    ca10:	|  |     |               moveq #-1,d0
    ca12:	|  |     |               cmp.l 68(sp),d0
    ca16:	|  |  /--|-------------- beq.w cba6 <fileToStack+0x342>

            char i = (char) tmp;
    ca1a:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    ca20:	|  |  |  |               move.b 67(sp),d0
    ca24:	|  |  |  |               ext.w d0
    ca26:	|  |  |  |               movea.w d0,a0
    ca28:	|  |  |  |               moveq #2,d2
    ca2a:	|  |  |  |               cmp.l a0,d2
    ca2c:	|  |  |  |     /-------- beq.s caa8 <fileToStack+0x244>
    ca2e:	|  |  |  |     |         moveq #2,d0
    ca30:	|  |  |  |     |         cmp.l a0,d0
    ca32:	|  |  |  |  /--|-------- blt.w cade <fileToStack+0x27a>
    ca36:	|  |  |  |  |  |         cmpa.w #0,a0
    ca3a:	|  |  |  |  |  |     /-- beq.s ca46 <fileToStack+0x1e2>
    ca3c:	|  |  |  |  |  |     |   moveq #1,d2
    ca3e:	|  |  |  |  |  |     |   cmp.l a0,d2
    ca40:	|  |  |  |  |  |  /--|-- beq.s ca82 <fileToStack+0x21e>
    ca42:	|  |  |  |  +--|--|--|-- bra.w cade <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    ca46:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    ca4a:	|  |  |  |  |  |  |      jsr cbd2 <readStringEncoded>
    ca50:	|  |  |  |  |  |  |      addq.l #4,sp
    ca52:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    ca56:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    ca5a:	|  |  |  |  |  |  |      lea 14(sp),a0
    ca5e:	|  |  |  |  |  |  |      move.l a0,-(sp)
    ca60:	|  |  |  |  |  |  |      jsr 137da <makeTextVar>
    ca66:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    ca68:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    ca6e:	|  |  |  |  |  |  |      move.l 1add0 <SysBase>,d0
    ca74:	|  |  |  |  |  |  |      movea.l d0,a6
    ca76:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    ca7a:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    ca7e:	|  |  |  |  |  |  |  /-- bra.w cb36 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    ca82:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    ca86:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    ca8c:	|  |  |  |  |  |     |   addq.l #4,sp
    ca8e:	|  |  |  |  |  |     |   move.l d0,-(sp)
    ca90:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    ca94:	|  |  |  |  |  |     |   lea 18(sp),a0
    ca98:	|  |  |  |  |  |     |   move.l a0,-(sp)
    ca9a:	|  |  |  |  |  |     |   jsr 13eaa <setVariable>
    caa0:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    caa4:	|  |  |  |  |  |     +-- bra.w cb36 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    caa8:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    caae:	|  |  |  |  |        |   move.l 1add8 <DOSBase>,d0
    cab4:	|  |  |  |  |        |   movea.l d0,a6
    cab6:	|  |  |  |  |        |   move.l 62(sp),d1
    caba:	|  |  |  |  |        |   jsr -306(a6)
    cabe:	|  |  |  |  |        |   move.l d0,58(sp)
    cac2:	|  |  |  |  |        |   move.l 58(sp),d0
    cac6:	|  |  |  |  |        |   move.l d0,-(sp)
    cac8:	|  |  |  |  |        |   pea 1 <_start+0x1>
    cacc:	|  |  |  |  |        |   lea 18(sp),a0
    cad0:	|  |  |  |  |        |   move.l a0,-(sp)
    cad2:	|  |  |  |  |        |   jsr 13eaa <setVariable>
    cad8:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    cadc:	|  |  |  |  |        +-- bra.s cb36 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    cade:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    cae2:	|  |  |  |           |   pea 17b98 <PutChar+0x1940>
    cae8:	|  |  |  |           |   jsr 15784 <KPrintF>
    caee:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    caf0:	|  |  |  |           |   move.l 100(sp),46(sp)
    caf6:	|  |  |  |           |   move.l 1add8 <DOSBase>,d0
    cafc:	|  |  |  |           |   movea.l d0,a6
    cafe:	|  |  |  |           |   move.l 46(sp),d1
    cb02:	|  |  |  |           |   jsr -36(a6)
    cb06:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    cb0a:	|  |  |  |           |   clr.w d0
    cb0c:	+--|--|--|-----------|-- bra.w cbc8 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    cb10:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    cb14:	|  |  |              |   jsr cc98 <readTextPlain>
    cb1a:	|  |  |              |   addq.l #4,sp
    cb1c:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    cb20:	|  |  |        /-----|-- beq.w cbaa <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    cb24:	|  |  |        |     |   move.l 80(sp),-(sp)
    cb28:	|  |  |        |     |   lea 14(sp),a0
    cb2c:	|  |  |        |     |   move.l a0,-(sp)
    cb2e:	|  |  |        |     |   jsr 137da <makeTextVar>
    cb34:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    cb36:	|  |  |        |     \-> movea.l 128(sp),a0
    cb3a:	|  |  |        |         move.l (a0),d0
    cb3c:	|  |  |        |  /----- bne.s cb6c <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    cb3e:	|  |  |        |  |      move.l 128(sp),d0
    cb42:	|  |  |        |  |      move.l d0,-(sp)
    cb44:	|  |  |        |  |      lea 14(sp),a0
    cb48:	|  |  |        |  |      move.l a0,-(sp)
    cb4a:	|  |  |        |  |      jsr 12e7a <addVarToStackQuick>
    cb50:	|  |  |        |  |      addq.l #8,sp
    cb52:	|  |  |        |  |      tst.w d0
    cb54:	|  |  |        |  |  /-- bne.s cb5a <fileToStack+0x2f6>
    cb56:	|  |  |        |  |  |   clr.w d0
    cb58:	+--|--|--------|--|--|-- bra.s cbc8 <fileToStack+0x364>
            sH->last = sH->first;
    cb5a:	|  |  |        |  |  \-> movea.l 128(sp),a0
    cb5e:	|  |  |        |  |      move.l (a0),d0
    cb60:	|  |  |        |  |      movea.l 128(sp),a0
    cb64:	|  |  |        |  |      move.l d0,4(a0)
    cb68:	|  +--|--------|--|----- bra.w c9d6 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    cb6c:	|  |  |        |  \----> movea.l 128(sp),a0
    cb70:	|  |  |        |         move.l 4(a0),d0
    cb74:	|  |  |        |         addq.l #8,d0
    cb76:	|  |  |        |         move.l d0,-(sp)
    cb78:	|  |  |        |         lea 14(sp),a0
    cb7c:	|  |  |        |         move.l a0,-(sp)
    cb7e:	|  |  |        |         jsr 12e7a <addVarToStackQuick>
    cb84:	|  |  |        |         addq.l #8,sp
    cb86:	|  |  |        |         tst.w d0
    cb88:	|  |  |        |     /-- bne.s cb8e <fileToStack+0x32a>
    cb8a:	|  |  |        |     |   clr.w d0
    cb8c:	+--|--|--------|-----|-- bra.s cbc8 <fileToStack+0x364>
            sH->last = sH->last->next;
    cb8e:	|  |  |        |     \-> movea.l 128(sp),a0
    cb92:	|  |  |        |         movea.l 4(a0),a0
    cb96:	|  |  |        |         move.l 8(a0),d0
    cb9a:	|  |  |        |         movea.l 128(sp),a0
    cb9e:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    cba2:	|  \--|--------|-------- bra.w c9d6 <fileToStack+0x172>
            if (tmp == -1) break;
    cba6:	|     \--------|-------> nop
    cba8:	|              |     /-- bra.s cbac <fileToStack+0x348>
            if (!line) break;
    cbaa:	|              \-----|-> nop
        }
    }
    Close(fp);
    cbac:	|                    \-> move.l 100(sp),38(sp)
    cbb2:	|                        move.l 1add8 <DOSBase>,d0
    cbb8:	|                        movea.l d0,a6
    cbba:	|                        move.l 38(sp),d1
    cbbe:	|                        jsr -36(a6)
    cbc2:	|                        move.l d0,34(sp)
    return TRUE;
    cbc6:	|                        moveq #1,d0
}
    cbc8:	\----------------------> move.l (sp)+,d2
    cbca:	                         movea.l (sp)+,a6
    cbcc:	                         lea 112(sp),sp
    cbd0:	                         rts

0000cbd2 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    cbd2:	          lea -32(sp),sp
    cbd6:	          move.l a6,-(sp)
    cbd8:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    cbda:	          move.l 44(sp),-(sp)
    cbde:	          jsr 6bc <get2bytes>
    cbe4:	          addq.l #4,sp
    cbe6:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    cbea:	          move.l 32(sp),d0
    cbee:	          addq.l #1,d0
    cbf0:	          move.l d0,28(sp)
    cbf4:	          clr.l 24(sp)
    cbf8:	          move.l 1add0 <SysBase>,d0
    cbfe:	          movea.l d0,a6
    cc00:	          move.l 28(sp),d0
    cc04:	          move.l 24(sp),d1
    cc08:	          jsr -684(a6)
    cc0c:	          move.l d0,20(sp)
    cc10:	          move.l 20(sp),d0
    cc14:	          move.l d0,16(sp)
    if (!s) return NULL;
    cc18:	      /-- bne.s cc1e <readStringEncoded+0x4c>
    cc1a:	      |   moveq #0,d0
    cc1c:	/-----|-- bra.s cc8e <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    cc1e:	|     \-> clr.l 36(sp)
    cc22:	|     /-- bra.s cc74 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    cc24:	|  /--|-> move.l 44(sp),12(sp)
    cc2a:	|  |  |   move.l 1add8 <DOSBase>,d0
    cc30:	|  |  |   movea.l d0,a6
    cc32:	|  |  |   move.l 12(sp),d1
    cc36:	|  |  |   jsr -306(a6)
    cc3a:	|  |  |   move.l d0,8(sp)
    cc3e:	|  |  |   move.l 8(sp),d0
    cc42:	|  |  |   move.l d0,d1
    cc44:	|  |  |   move.b 1aede <encode1>,d2
    cc4a:	|  |  |   move.l 36(sp),d0
    cc4e:	|  |  |   movea.l 16(sp),a0
    cc52:	|  |  |   adda.l d0,a0
    cc54:	|  |  |   move.b d1,d0
    cc56:	|  |  |   eor.b d2,d0
    cc58:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    cc5a:	|  |  |   move.b 1aede <encode1>,d0
    cc60:	|  |  |   move.b d0,d1
    cc62:	|  |  |   move.b 1aedf <encode2>,d0
    cc68:	|  |  |   add.b d1,d0
    cc6a:	|  |  |   move.b d0,1aede <encode1>
    for (a = 0; a < len; a++) {
    cc70:	|  |  |   addq.l #1,36(sp)
    cc74:	|  |  \-> move.l 36(sp),d0
    cc78:	|  |      cmp.l 32(sp),d0
    cc7c:	|  \----- blt.s cc24 <readStringEncoded+0x52>
    }
    s[len] = 0;
    cc7e:	|         move.l 32(sp),d0
    cc82:	|         movea.l 16(sp),a0
    cc86:	|         adda.l d0,a0
    cc88:	|         clr.b (a0)
    return s;
    cc8a:	|         move.l 16(sp),d0
}
    cc8e:	\-------> move.l (sp)+,d2
    cc90:	          movea.l (sp)+,a6
    cc92:	          lea 32(sp),sp
    cc96:	          rts

0000cc98 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cc98:	             lea -104(sp),sp
    cc9c:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cca0:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cca4:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ccaa:	             move.l 124(sp),106(sp)
    ccb0:	             clr.l 102(sp)
    ccb4:	             clr.l 98(sp)
    ccb8:	             move.l 1add8 <DOSBase>,d0
    ccbe:	             movea.l d0,a6
    ccc0:	             move.l 106(sp),d1
    ccc4:	             move.l 102(sp),d2
    ccc8:	             move.l 98(sp),d3
    cccc:	             jsr -66(a6)
    ccd0:	             move.l d0,94(sp)
    ccd4:	             move.l 94(sp),d0
    ccd8:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    ccdc:	   /-------- bra.s cd20 <readTextPlain+0x88>
        tmp = FGetC(fp);
    ccde:	/--|-------> move.l 124(sp),22(sp)
    cce4:	|  |         move.l 1add8 <DOSBase>,d0
    ccea:	|  |         movea.l d0,a6
    ccec:	|  |         move.l 22(sp),d1
    ccf0:	|  |         jsr -306(a6)
    ccf4:	|  |         move.l d0,18(sp)
    ccf8:	|  |         move.l 18(sp),d0
    ccfc:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    cd00:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    cd06:	|  |         cmpi.b #10,17(sp)
    cd0c:	|  |  /----- beq.s cd16 <readTextPlain+0x7e>
    cd0e:	|  |  |      moveq #-1,d0
    cd10:	|  |  |      cmp.l 110(sp),d0
    cd14:	|  |  |  /-- bne.s cd1c <readTextPlain+0x84>
            keepGoing = FALSE;
    cd16:	|  |  \--|-> clr.w 114(sp)
    cd1a:	|  +-----|-- bra.s cd20 <readTextPlain+0x88>
        } else {
            stringSize++;
    cd1c:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    cd20:	|  \-------> tst.w 114(sp)
    cd24:	\----------- bne.s ccde <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    cd26:	             tst.l 116(sp)
    cd2a:	         /-- bne.s cd3a <readTextPlain+0xa2>
    cd2c:	         |   moveq #-1,d0
    cd2e:	         |   cmp.l 110(sp),d0
    cd32:	         +-- bne.s cd3a <readTextPlain+0xa2>
        return NULL;
    cd34:	         |   moveq #0,d0
    cd36:	      /--|-- bra.w ce20 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    cd3a:	      |  \-> move.l 124(sp),86(sp)
    cd40:	      |      move.l 90(sp),82(sp)
    cd46:	      |      moveq #-1,d0
    cd48:	      |      move.l d0,78(sp)
    cd4c:	      |      move.l 1add8 <DOSBase>,d0
    cd52:	      |      movea.l d0,a6
    cd54:	      |      move.l 86(sp),d1
    cd58:	      |      move.l 82(sp),d2
    cd5c:	      |      move.l 78(sp),d3
    cd60:	      |      jsr -66(a6)
    cd64:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    cd68:	      |      move.l 116(sp),d0
    cd6c:	      |      addq.l #1,d0
    cd6e:	      |      move.l d0,70(sp)
    cd72:	      |      clr.l 66(sp)
    cd76:	      |      move.l 1add0 <SysBase>,d0
    cd7c:	      |      movea.l d0,a6
    cd7e:	      |      move.l 70(sp),d0
    cd82:	      |      move.l 66(sp),d1
    cd86:	      |      jsr -684(a6)
    cd8a:	      |      move.l d0,62(sp)
    cd8e:	      |      move.l 62(sp),d0
    cd92:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    cd96:	      |  /-- bne.s cd9e <readTextPlain+0x106>
    cd98:	      |  |   moveq #0,d0
    cd9a:	      +--|-- bra.w ce20 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    cd9e:	      |  \-> move.l 124(sp),54(sp)
    cda4:	      |      move.l 58(sp),50(sp)
    cdaa:	      |      moveq #1,d0
    cdac:	      |      move.l d0,46(sp)
    cdb0:	      |      move.l 116(sp),42(sp)
    cdb6:	      |      move.l 1add8 <DOSBase>,d0
    cdbc:	      |      movea.l d0,a6
    cdbe:	      |      move.l 54(sp),d1
    cdc2:	      |      move.l 50(sp),d2
    cdc6:	      |      move.l 46(sp),d3
    cdca:	      |      move.l 42(sp),d4
    cdce:	      |      jsr -324(a6)
    cdd2:	      |      move.l d0,38(sp)
    cdd6:	      |      move.l 38(sp),d0
    cdda:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    cdde:	      |      move.l 34(sp),d0
    cde2:	      |      cmp.l 116(sp),d0
    cde6:	      |  /-- beq.s cdf6 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    cde8:	      |  |   pea 17bcd <PutChar+0x1975>
    cdee:	      |  |   jsr 15784 <KPrintF>
    cdf4:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    cdf6:	      |  \-> move.l 124(sp),30(sp)
    cdfc:	      |      move.l 1add8 <DOSBase>,d0
    ce02:	      |      movea.l d0,a6
    ce04:	      |      move.l 30(sp),d1
    ce08:	      |      jsr -306(a6)
    ce0c:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    ce10:	      |      move.l 116(sp),d0
    ce14:	      |      movea.l 58(sp),a0
    ce18:	      |      adda.l d0,a0
    ce1a:	      |      clr.b (a0)
    }

    return reply;
    ce1c:	      |      move.l 58(sp),d0
}
    ce20:	      \----> movem.l (sp)+,d2-d4/a6
    ce24:	             lea 104(sp),sp
    ce28:	             rts

0000ce2a <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ce2a:	                      lea -144(sp),sp
    ce2e:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    ce32:	                      move.l 160(sp),148(sp)
    ce38:	                      move.l #1006,144(sp)
    ce40:	                      move.l 1add8 <DOSBase>,d0
    ce46:	                      movea.l d0,a6
    ce48:	                      move.l 148(sp),d1
    ce4c:	                      move.l 144(sp),d2
    ce50:	                      jsr -30(a6)
    ce54:	                      move.l d0,140(sp)
    ce58:	                      move.l 140(sp),d0
    ce5c:	                      move.l d0,136(sp)

    if (!fp) {
    ce60:	                  /-- bne.s ce7a <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ce62:	                  |   move.l 160(sp),-(sp)
    ce66:	                  |   pea 17bee <PutChar+0x1996>
    ce6c:	                  |   jsr 15784 <KPrintF>
    ce72:	                  |   addq.l #8,sp
        return FALSE;
    ce74:	                  |   clr.w d0
    ce76:	/-----------------|-- bra.w d136 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    ce7a:	|                 \-> movea.l 164(sp),a0
    ce7e:	|                     movea.l 4(a0),a0
    ce82:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    ce86:	|                     move.w 1aee0 <saveEncoding>,d0
    ce8c:	|                     move.l d0,d0
    ce8e:	|                     move.b d0,1aede <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    ce94:	|                     move.w 1aee0 <saveEncoding>,d0
    ce9a:	|                     lsr.w #8,d0
    ce9c:	|                     move.l d0,d0
    ce9e:	|                     move.b d0,1aedf <encode2>

    if (saveEncoding) {
    cea4:	|                     move.w 1aee0 <saveEncoding>,d0
    ceaa:	|                 /-- beq.s cefc <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    ceac:	|                 |   move.l 136(sp),116(sp)
    ceb2:	|                 |   move.l #96904,112(sp)
    ceba:	|                 |   moveq #99,d0
    cebc:	|                 |   not.b d0
    cebe:	|                 |   add.l sp,d0
    cec0:	|                 |   addi.l #-144,d0
    cec6:	|                 |   move.l d0,108(sp)
    ceca:	|                 |   move.l 1add8 <DOSBase>,d0
    ced0:	|                 |   movea.l d0,a6
    ced2:	|                 |   move.l 116(sp),d1
    ced6:	|                 |   move.l 112(sp),d2
    ceda:	|                 |   move.l 108(sp),d3
    cede:	|                 |   jsr -354(a6)
    cee2:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    cee6:	|                 |   move.l 136(sp),-(sp)
    ceea:	|                 |   pea 17b07 <PutChar+0x18af>
    cef0:	|                 |   jsr d140 <writeStringEncoded>
    cef6:	|                 |   addq.l #8,sp
    cef8:	|  /--------------|-- bra.w d10e <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    cefc:	|  |              \-> move.l 136(sp),132(sp)
    cf02:	|  |                  move.l #96930,128(sp)
    cf0a:	|  |                  moveq #99,d1
    cf0c:	|  |                  not.b d1
    cf0e:	|  |                  add.l sp,d1
    cf10:	|  |                  addi.l #-144,d1
    cf16:	|  |                  move.l d1,124(sp)
    cf1a:	|  |                  move.l 1add8 <DOSBase>,d0
    cf20:	|  |                  movea.l d0,a6
    cf22:	|  |                  move.l 132(sp),d1
    cf26:	|  |                  move.l 128(sp),d2
    cf2a:	|  |                  move.l 124(sp),d3
    cf2e:	|  |                  jsr -354(a6)
    cf32:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    cf36:	|  +----------------- bra.w d10e <stackToFile+0x2e4>
        if (saveEncoding) {
    cf3a:	|  |  /-------------> move.w 1aee0 <saveEncoding>,d0
    cf40:	|  |  |     /-------- beq.w d092 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    cf44:	|  |  |     |         movea.l 152(sp),a0
    cf48:	|  |  |     |         move.l (a0),d0
    cf4a:	|  |  |     |         moveq #1,d1
    cf4c:	|  |  |     |         cmp.l d0,d1
    cf4e:	|  |  |     |     /-- beq.s cf9e <stackToFile+0x174>
    cf50:	|  |  |     |     |   moveq #3,d1
    cf52:	|  |  |     |     |   cmp.l d0,d1
    cf54:	|  |  |     |  /--|-- bne.w d060 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    cf58:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    cf5e:	|  |  |     |  |  |   move.b 1aede <encode1>,d0
    cf64:	|  |  |     |  |  |   ext.w d0
    cf66:	|  |  |     |  |  |   movea.w d0,a0
    cf68:	|  |  |     |  |  |   move.l a0,72(sp)
    cf6c:	|  |  |     |  |  |   move.l 1add8 <DOSBase>,d0
    cf72:	|  |  |     |  |  |   movea.l d0,a6
    cf74:	|  |  |     |  |  |   move.l 76(sp),d1
    cf78:	|  |  |     |  |  |   move.l 72(sp),d2
    cf7c:	|  |  |     |  |  |   jsr -312(a6)
    cf80:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    cf84:	|  |  |     |  |  |   movea.l 152(sp),a0
    cf88:	|  |  |     |  |  |   move.l 4(a0),d0
    cf8c:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    cf90:	|  |  |     |  |  |   move.l d0,-(sp)
    cf92:	|  |  |     |  |  |   jsr d140 <writeStringEncoded>
    cf98:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    cf9a:	|  |  |  /--|--|--|-- bra.w d104 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    cf9e:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    cfa2:	|  |  |  |  |  |      move.l 4(a0),d0
    cfa6:	|  |  |  |  |  |  /-- bmi.s d016 <stackToFile+0x1ec>
    cfa8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    cfac:	|  |  |  |  |  |  |   move.l 4(a0),d0
    cfb0:	|  |  |  |  |  |  |   cmpi.l #255,d0
    cfb6:	|  |  |  |  |  |  +-- bgt.s d016 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    cfb8:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    cfbe:	|  |  |  |  |  |  |   move.b 1aede <encode1>,d0
    cfc4:	|  |  |  |  |  |  |   eori.b #2,d0
    cfc8:	|  |  |  |  |  |  |   ext.w d0
    cfca:	|  |  |  |  |  |  |   movea.w d0,a0
    cfcc:	|  |  |  |  |  |  |   move.l a0,60(sp)
    cfd0:	|  |  |  |  |  |  |   move.l 1add8 <DOSBase>,d0
    cfd6:	|  |  |  |  |  |  |   movea.l d0,a6
    cfd8:	|  |  |  |  |  |  |   move.l 64(sp),d1
    cfdc:	|  |  |  |  |  |  |   move.l 60(sp),d2
    cfe0:	|  |  |  |  |  |  |   jsr -312(a6)
    cfe4:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    cfe8:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    cfee:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    cff2:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    cff8:	|  |  |  |  |  |  |   move.l 1add8 <DOSBase>,d0
    cffe:	|  |  |  |  |  |  |   movea.l d0,a6
    d000:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d004:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d008:	|  |  |  |  |  |  |   jsr -312(a6)
    d00c:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d010:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d012:	|  |  |  +--|--|--|-- bra.w d104 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d016:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d01c:	|  |  |  |  |  |      move.b 1aede <encode1>,d0
    d022:	|  |  |  |  |  |      eori.b #1,d0
    d026:	|  |  |  |  |  |      ext.w d0
    d028:	|  |  |  |  |  |      movea.w d0,a0
    d02a:	|  |  |  |  |  |      move.l a0,36(sp)
    d02e:	|  |  |  |  |  |      move.l 1add8 <DOSBase>,d0
    d034:	|  |  |  |  |  |      movea.l d0,a6
    d036:	|  |  |  |  |  |      move.l 40(sp),d1
    d03a:	|  |  |  |  |  |      move.l 36(sp),d2
    d03e:	|  |  |  |  |  |      jsr -312(a6)
    d042:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d046:	|  |  |  |  |  |      movea.l 152(sp),a0
    d04a:	|  |  |  |  |  |      move.l 4(a0),d0
    d04e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d052:	|  |  |  |  |  |      move.l d0,-(sp)
    d054:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d05a:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d05c:	|  |  |  +--|--|----- bra.w d104 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d060:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d064:	|  |  |  |  |         pea 17c00 <PutChar+0x19a8>
    d06a:	|  |  |  |  |         jsr 15784 <KPrintF>
    d070:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d072:	|  |  |  |  |         move.l 136(sp),28(sp)
    d078:	|  |  |  |  |         move.l 1add8 <DOSBase>,d0
    d07e:	|  |  |  |  |         movea.l d0,a6
    d080:	|  |  |  |  |         move.l 28(sp),d1
    d084:	|  |  |  |  |         jsr -36(a6)
    d088:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d08c:	|  |  |  |  |         clr.w d0
    d08e:	+--|--|--|--|-------- bra.w d136 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d092:	|  |  |  |  \-------> move.l 152(sp),d0
    d096:	|  |  |  |            move.l d0,-(sp)
    d098:	|  |  |  |            jsr 13b8e <getTextFromAnyVar>
    d09e:	|  |  |  |            addq.l #4,sp
    d0a0:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d0a4:	|  |  |  |     /----- beq.s d118 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d0a6:	|  |  |  |     |      movea.l 100(sp),a0
    d0aa:	|  |  |  |     |      move.b (a0),d0
    d0ac:	|  |  |  |     |      ext.w d0
    d0ae:	|  |  |  |     |      movea.w d0,a0
    d0b0:	|  |  |  |     |      move.l a0,12(sp)
    d0b4:	|  |  |  |     |      move.l 136(sp),96(sp)
    d0ba:	|  |  |  |     |      move.l #97372,92(sp)
    d0c2:	|  |  |  |     |      moveq #99,d0
    d0c4:	|  |  |  |     |      not.b d0
    d0c6:	|  |  |  |     |      add.l sp,d0
    d0c8:	|  |  |  |     |      addi.l #-144,d0
    d0ce:	|  |  |  |     |      move.l d0,88(sp)
    d0d2:	|  |  |  |     |      move.l 1add8 <DOSBase>,d0
    d0d8:	|  |  |  |     |      movea.l d0,a6
    d0da:	|  |  |  |     |      move.l 96(sp),d1
    d0de:	|  |  |  |     |      move.l 92(sp),d2
    d0e2:	|  |  |  |     |      move.l 88(sp),d3
    d0e6:	|  |  |  |     |      jsr -354(a6)
    d0ea:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d0ee:	|  |  |  |     |      move.l 100(sp),80(sp)
    d0f4:	|  |  |  |     |      move.l 1add0 <SysBase>,d0
    d0fa:	|  |  |  |     |      movea.l d0,a6
    d0fc:	|  |  |  |     |      movea.l 80(sp),a1
    d100:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d104:	|  |  |  \-----|----> movea.l 152(sp),a0
    d108:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d10e:	|  \--|--------|----> tst.l 152(sp)
    d112:	|     \--------|----- bne.w cf3a <stackToFile+0x110>
    d116:	|              |  /-- bra.s d11a <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d118:	|              \--|-> nop
    }
    Close(fp);
    d11a:	|                 \-> move.l 136(sp),20(sp)
    d120:	|                     move.l 1add8 <DOSBase>,d0
    d126:	|                     movea.l d0,a6
    d128:	|                     move.l 20(sp),d1
    d12c:	|                     jsr -36(a6)
    d130:	|                     move.l d0,16(sp)
    return TRUE;
    d134:	|                     moveq #1,d0
}
    d136:	\-------------------> movem.l (sp)+,d2-d3/a6
    d13a:	                      lea 144(sp),sp
    d13e:	                      rts

0000d140 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d140:	       lea -20(sp),sp
    d144:	       move.l a6,-(sp)
    d146:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d148:	       move.l 32(sp),-(sp)
    d14c:	       jsr 12aa4 <strlen>
    d152:	       addq.l #4,sp
    d154:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d158:	       move.l 36(sp),-(sp)
    d15c:	       move.l 24(sp),-(sp)
    d160:	       jsr 8d0 <put2bytes>
    d166:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d168:	       clr.l 24(sp)
    d16c:	   /-- bra.s d1c2 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d16e:	/--|-> move.l 36(sp),16(sp)
    d174:	|  |   move.l 24(sp),d0
    d178:	|  |   movea.l 32(sp),a0
    d17c:	|  |   adda.l d0,a0
    d17e:	|  |   move.b (a0),d1
    d180:	|  |   move.b 1aede <encode1>,d0
    d186:	|  |   eor.b d1,d0
    d188:	|  |   ext.w d0
    d18a:	|  |   movea.w d0,a0
    d18c:	|  |   move.l a0,12(sp)
    d190:	|  |   move.l 1add8 <DOSBase>,d0
    d196:	|  |   movea.l d0,a6
    d198:	|  |   move.l 16(sp),d1
    d19c:	|  |   move.l 12(sp),d2
    d1a0:	|  |   jsr -312(a6)
    d1a4:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d1a8:	|  |   move.b 1aede <encode1>,d0
    d1ae:	|  |   move.b d0,d1
    d1b0:	|  |   move.b 1aedf <encode2>,d0
    d1b6:	|  |   add.b d1,d0
    d1b8:	|  |   move.b d0,1aede <encode1>
	for (a = 0; a < len; a ++) {
    d1be:	|  |   addq.l #1,24(sp)
    d1c2:	|  \-> move.l 24(sp),d0
    d1c6:	|      cmp.l 20(sp),d0
    d1ca:	\----- blt.s d16e <writeStringEncoded+0x2e>
	}
}
    d1cc:	       nop
    d1ce:	       nop
    d1d0:	       move.l (sp)+,d2
    d1d2:	       movea.l (sp)+,a6
    d1d4:	       lea 20(sp),sp
    d1d8:	       rts

0000d1da <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d1da:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d1dc:	                   tst.l 8(sp)
    d1e0:	               /-- bne.s d1e6 <failSecurityCheck+0xc>
    d1e2:	               |   moveq #1,d0
    d1e4:	/--------------|-- bra.s d264 <failSecurityCheck+0x8a>

	int a = 0;
    d1e6:	|              \-> clr.l (sp)

	while (fn[a]) {
    d1e8:	|     /----------- bra.s d256 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d1ea:	|  /--|----------> move.l (sp),d0
    d1ec:	|  |  |            movea.l 8(sp),a0
    d1f0:	|  |  |            adda.l d0,a0
    d1f2:	|  |  |            move.b (a0),d0
    d1f4:	|  |  |            ext.w d0
    d1f6:	|  |  |            movea.w d0,a0
    d1f8:	|  |  |            moveq #124,d0
    d1fa:	|  |  |            cmp.l a0,d0
    d1fc:	|  |  |     /----- beq.s d23e <failSecurityCheck+0x64>
    d1fe:	|  |  |     |      moveq #124,d1
    d200:	|  |  |     |      cmp.l a0,d1
    d202:	|  |  |  /--|----- blt.s d254 <failSecurityCheck+0x7a>
    d204:	|  |  |  |  |      moveq #92,d0
    d206:	|  |  |  |  |      cmp.l a0,d0
    d208:	|  |  |  |  +----- beq.s d23e <failSecurityCheck+0x64>
    d20a:	|  |  |  |  |      moveq #92,d1
    d20c:	|  |  |  |  |      cmp.l a0,d1
    d20e:	|  |  |  +--|----- blt.s d254 <failSecurityCheck+0x7a>
    d210:	|  |  |  |  |      moveq #60,d0
    d212:	|  |  |  |  |      cmp.l a0,d0
    d214:	|  |  |  |  |  /-- blt.s d234 <failSecurityCheck+0x5a>
    d216:	|  |  |  |  |  |   moveq #34,d1
    d218:	|  |  |  |  |  |   cmp.l a0,d1
    d21a:	|  |  |  +--|--|-- bgt.s d254 <failSecurityCheck+0x7a>
    d21c:	|  |  |  |  |  |   moveq #-34,d1
    d21e:	|  |  |  |  |  |   add.l a0,d1
    d220:	|  |  |  |  |  |   move.l #83894529,d0
    d226:	|  |  |  |  |  |   lsr.l d1,d0
    d228:	|  |  |  |  |  |   moveq #1,d1
    d22a:	|  |  |  |  |  |   and.l d1,d0
    d22c:	|  |  |  |  |  |   sne d0
    d22e:	|  |  |  |  |  |   neg.b d0
    d230:	|  |  |  |  +--|-- bne.s d23e <failSecurityCheck+0x64>
    d232:	|  |  |  +--|--|-- bra.s d254 <failSecurityCheck+0x7a>
    d234:	|  |  |  |  |  \-> lea -62(a0),a0
    d238:	|  |  |  |  |      moveq #1,d0
    d23a:	|  |  |  |  |      cmp.l a0,d0
    d23c:	|  |  |  +--|----- bcs.s d254 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d23e:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d242:	|  |  |  |         pea 17c60 <PutChar+0x1a08>
    d248:	|  |  |  |         jsr 15784 <KPrintF>
    d24e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d250:	|  |  |  |         moveq #1,d0
    d252:	+--|--|--|-------- bra.s d264 <failSecurityCheck+0x8a>
		}
		a++;
    d254:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d256:	|  |  \----------> move.l (sp),d0
    d258:	|  |               movea.l 8(sp),a0
    d25c:	|  |               adda.l d0,a0
    d25e:	|  |               move.b (a0),d0
    d260:	|  \-------------- bne.s d1ea <failSecurityCheck+0x10>
	}
	return FALSE;
    d262:	|                  clr.w d0
}
    d264:	\----------------> addq.l #4,sp
    d266:	                   rts

0000d268 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d268:	             lea -24(sp),sp
    d26c:	             move.l a6,-(sp)
    d26e:	             move.l 40(sp),d0
    d272:	             move.w d0,d0
    d274:	             move.w d0,6(sp)
	int fileNum = -1;
    d278:	             moveq #-1,d0
    d27a:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d27e:	             jsr 5082 <killSpeechTimers>

	switch (numParams) {
    d284:	             moveq #2,d0
    d286:	             cmp.l 32(sp),d0
    d28a:	      /----- beq.s d2ce <sayCore+0x66>
    d28c:	      |      moveq #3,d0
    d28e:	      |      cmp.l 32(sp),d0
    d292:	/-----|----- bne.w d3b0 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d296:	|     |      movea.l 36(sp),a0
    d29a:	|     |      move.l 24(a0),d0
    d29e:	|     |      move.l d0,-(sp)
    d2a0:	|     |      pea 5 <_start+0x5>
    d2a4:	|     |      lea 20(sp),a0
    d2a8:	|     |      move.l a0,-(sp)
    d2aa:	|     |      jsr 135b8 <getValueType>
    d2b0:	|     |      lea 12(sp),sp
    d2b4:	|     |      tst.w d0
    d2b6:	|     |  /-- bne.s d2be <sayCore+0x56>
    d2b8:	|     |  |   moveq #1,d0
    d2ba:	|  /--|--|-- bra.w d3c0 <sayCore+0x158>
			trimStack (&fun -> stack);
    d2be:	|  |  |  \-> moveq #24,d0
    d2c0:	|  |  |      add.l 36(sp),d0
    d2c4:	|  |  |      move.l d0,-(sp)
    d2c6:	|  |  |      jsr 13f3c <trimStack>
    d2cc:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d2ce:	|  |  \----> movea.l 36(sp),a0
    d2d2:	|  |         move.l 24(a0),d0
    d2d6:	|  |         move.l d0,-(sp)
    d2d8:	|  |         jsr 13b8e <getTextFromAnyVar>
    d2de:	|  |         addq.l #4,sp
    d2e0:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d2e4:	|  |     /-- bne.s d2ec <sayCore+0x84>
    d2e6:	|  |     |   moveq #1,d0
    d2e8:	|  +-----|-- bra.w d3c0 <sayCore+0x158>
			trimStack (&fun -> stack);
    d2ec:	|  |     \-> moveq #24,d0
    d2ee:	|  |         add.l 36(sp),d0
    d2f2:	|  |         move.l d0,-(sp)
    d2f4:	|  |         jsr 13f3c <trimStack>
    d2fa:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d2fc:	|  |         movea.l 36(sp),a0
    d300:	|  |         move.l 24(a0),d0
    d304:	|  |         move.l d0,-(sp)
    d306:	|  |         pea 7 <_start+0x7>
    d30a:	|  |         lea 16(sp),a0
    d30e:	|  |         move.l a0,-(sp)
    d310:	|  |         jsr 135b8 <getValueType>
    d316:	|  |         lea 12(sp),sp
    d31a:	|  |         tst.w d0
    d31c:	|  |     /-- bne.s d324 <sayCore+0xbc>
    d31e:	|  |     |   moveq #1,d0
    d320:	|  +-----|-- bra.w d3c0 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d324:	|  |     \-> movea.l 36(sp),a0
    d328:	|  |         move.l 24(a0),d0
    d32c:	|  |         move.l d0,-(sp)
    d32e:	|  |         pea 7 <_start+0x7>
    d332:	|  |         lea 16(sp),a0
    d336:	|  |         move.l a0,-(sp)
    d338:	|  |         jsr 135b8 <getValueType>
    d33e:	|  |         lea 12(sp),sp
    d342:	|  |         tst.w d0
    d344:	|  |     /-- bne.s d34a <sayCore+0xe2>
    d346:	|  |     |   moveq #1,d0
    d348:	|  +-----|-- bra.s d3c0 <sayCore+0x158>
			trimStack (&fun -> stack);
    d34a:	|  |     \-> moveq #24,d0
    d34c:	|  |         add.l 36(sp),d0
    d350:	|  |         move.l d0,-(sp)
    d352:	|  |         jsr 13f3c <trimStack>
    d358:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d35a:	|  |         movea.w 6(sp),a0
    d35e:	|  |         move.l 12(sp),d1
    d362:	|  |         move.l 8(sp),d0
    d366:	|  |         move.l a0,-(sp)
    d368:	|  |         move.l d1,-(sp)
    d36a:	|  |         move.l d0,-(sp)
    d36c:	|  |         move.l 36(sp),-(sp)
    d370:	|  |         jsr 6ffc <wrapSpeech>
    d376:	|  |         lea 16(sp),sp
    d37a:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d37e:	|  |         movea.l 36(sp),a0
    d382:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d388:	|  |         movea.l 36(sp),a0
    d38c:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d392:	|  |         move.l 24(sp),16(sp)
    d398:	|  |         move.l 1add0 <SysBase>,d0
    d39e:	|  |         movea.l d0,a6
    d3a0:	|  |         movea.l 16(sp),a1
    d3a4:	|  |         jsr -690(a6)
			newText = NULL;
    d3a8:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d3ac:	|  |         moveq #0,d0
    d3ae:	|  +-------- bra.s d3c0 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d3b0:	\--|-------> pea 17ce6 <PutChar+0x1a8e>
    d3b6:	   |         jsr 15784 <KPrintF>
    d3bc:	   |         addq.l #4,sp
	return BR_ERROR;
    d3be:	   |         moveq #1,d0
}
    d3c0:	   \-------> movea.l (sp)+,a6
    d3c2:	             lea 24(sp),sp
    d3c6:	             rts

0000d3c8 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d3c8:	pea 1 <_start+0x1>
    d3cc:	move.l 12(sp),-(sp)
    d3d0:	move.l 12(sp),-(sp)
    d3d4:	jsr d268 <sayCore>
    d3da:	lea 12(sp),sp
}
    d3de:	rts

0000d3e0 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d3e0:	clr.l -(sp)
    d3e2:	move.l 12(sp),-(sp)
    d3e6:	move.l 12(sp),-(sp)
    d3ea:	jsr d268 <sayCore>
    d3f0:	lea 12(sp),sp
}
    d3f4:	rts

0000d3f6 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    d3f6:	moveq #2,d0
}
    d3f8:	rts

0000d3fa <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    d3fa:	moveq #2,d0
}
    d3fc:	rts

0000d3fe <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d3fe:	nop
    d400:	rts

0000d402 <builtIn_setCursor>:

builtIn(setCursor)
{
    d402:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d404:	movea.l 12(sp),a0
    d408:	move.l 24(a0),d0
    d40c:	move.l d0,-(sp)
    d40e:	jsr 13a90 <getAnimationFromVar>
    d414:	addq.l #4,sp
    d416:	move.l d0,(sp)
	pickAnimCursor (aa);
    d418:	move.l (sp),-(sp)
    d41a:	jsr ece <pickAnimCursor>
    d420:	addq.l #4,sp
	trimStack (&fun -> stack);
    d422:	moveq #24,d0
    d424:	add.l 12(sp),d0
    d428:	move.l d0,-(sp)
    d42a:	jsr 13f3c <trimStack>
    d430:	addq.l #4,sp
	return BR_CONTINUE;
    d432:	moveq #2,d0
}
    d434:	addq.l #4,sp
    d436:	rts

0000d438 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d438:	move.l 1ad8c <input+0xa>,d1
    d43e:	move.l 1aee2 <cameraX>,d0
    d444:	add.l d0,d1
    d446:	moveq #28,d0
    d448:	add.l 8(sp),d0
    d44c:	move.l d1,-(sp)
    d44e:	pea 1 <_start+0x1>
    d452:	move.l d0,-(sp)
    d454:	jsr 13eaa <setVariable>
    d45a:	lea 12(sp),sp
	return BR_CONTINUE;
    d45e:	moveq #2,d0
}
    d460:	rts

0000d462 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d462:	move.l 1ad90 <input+0xe>,d1
    d468:	move.l 1aee6 <cameraY>,d0
    d46e:	add.l d0,d1
    d470:	moveq #28,d0
    d472:	add.l 8(sp),d0
    d476:	move.l d1,-(sp)
    d478:	pea 1 <_start+0x1>
    d47c:	move.l d0,-(sp)
    d47e:	jsr 13eaa <setVariable>
    d484:	lea 12(sp),sp
	return BR_CONTINUE;
    d488:	moveq #2,d0
}
    d48a:	rts

0000d48c <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d48c:	move.l 1ad8c <input+0xa>,d0
    d492:	move.l d0,-(sp)
    d494:	jsr 15bc0 <__floatsisf>
    d49a:	addq.l #4,sp
    d49c:	move.l d0,d1
    d49e:	move.l 1a774 <cameraZoom>,d0
    d4a4:	move.l d0,-(sp)
    d4a6:	move.l d1,-(sp)
    d4a8:	jsr 15c72 <__mulsf3>
    d4ae:	addq.l #8,sp
    d4b0:	move.l d0,-(sp)
    d4b2:	jsr 15b58 <__fixsfsi>
    d4b8:	addq.l #4,sp
    d4ba:	move.l d0,d1
    d4bc:	moveq #28,d0
    d4be:	add.l 8(sp),d0
    d4c2:	move.l d1,-(sp)
    d4c4:	pea 1 <_start+0x1>
    d4c8:	move.l d0,-(sp)
    d4ca:	jsr 13eaa <setVariable>
    d4d0:	lea 12(sp),sp
	return BR_CONTINUE;
    d4d4:	moveq #2,d0
}
    d4d6:	rts

0000d4d8 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d4d8:	move.l 1ad90 <input+0xe>,d0
    d4de:	move.l d0,-(sp)
    d4e0:	jsr 15bc0 <__floatsisf>
    d4e6:	addq.l #4,sp
    d4e8:	move.l d0,d1
    d4ea:	move.l 1a774 <cameraZoom>,d0
    d4f0:	move.l d0,-(sp)
    d4f2:	move.l d1,-(sp)
    d4f4:	jsr 15c72 <__mulsf3>
    d4fa:	addq.l #8,sp
    d4fc:	move.l d0,-(sp)
    d4fe:	jsr 15b58 <__fixsfsi>
    d504:	addq.l #4,sp
    d506:	move.l d0,d1
    d508:	moveq #28,d0
    d50a:	add.l 8(sp),d0
    d50e:	move.l d1,-(sp)
    d510:	pea 1 <_start+0x1>
    d514:	move.l d0,-(sp)
    d516:	jsr 13eaa <setVariable>
    d51c:	lea 12(sp),sp
	return BR_CONTINUE;
    d520:	moveq #2,d0
}
    d522:	rts

0000d524 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d524:	jsr 6ab0 <statusBarText>
    d52a:	move.l d0,d1
    d52c:	moveq #28,d0
    d52e:	add.l 8(sp),d0
    d532:	move.l d1,-(sp)
    d534:	move.l d0,-(sp)
    d536:	jsr 137da <makeTextVar>
    d53c:	addq.l #8,sp
	return BR_CONTINUE;
    d53e:	moveq #2,d0
}
    d540:	rts

0000d542 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d542:	       lea -20(sp),sp
    d546:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d548:	       movea.l 32(sp),a0
    d54c:	       move.l 24(a0),d0
    d550:	       move.l d0,-(sp)
    d552:	       jsr 13b8e <getTextFromAnyVar>
    d558:	       addq.l #4,sp
    d55a:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d55e:	   /-- bne.s d566 <builtIn_getMatchingFiles+0x24>
    d560:	   |   moveq #1,d0
    d562:	/--|-- bra.w d628 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d566:	|  \-> moveq #24,d0
    d568:	|      add.l 32(sp),d0
    d56c:	|      move.l d0,-(sp)
    d56e:	|      jsr 13f3c <trimStack>
    d574:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d576:	|      moveq #28,d0
    d578:	|      add.l 32(sp),d0
    d57c:	|      move.l d0,-(sp)
    d57e:	|      jsr 13806 <unlinkVar>
    d584:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d586:	|      movea.l 32(sp),a0
    d58a:	|      moveq #6,d0
    d58c:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d590:	|      moveq #12,d0
    d592:	|      move.l d0,16(sp)
    d596:	|      clr.l 12(sp)
    d59a:	|      move.l 1add0 <SysBase>,d0
    d5a0:	|      movea.l d0,a6
    d5a2:	|      move.l 16(sp),d0
    d5a6:	|      move.l 12(sp),d1
    d5aa:	|      jsr -684(a6)
    d5ae:	|      move.l d0,8(sp)
    d5b2:	|      move.l 8(sp),d0
    d5b6:	|      movea.l 32(sp),a0
    d5ba:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d5be:	|      moveq #32,d0
    d5c0:	|      add.l 32(sp),d0
    d5c4:	|  /-- bne.s d5ca <builtIn_getMatchingFiles+0x88>
    d5c6:	|  |   moveq #1,d0
    d5c8:	+--|-- bra.s d628 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d5ca:	|  \-> movea.l 32(sp),a0
    d5ce:	|      movea.l 32(a0),a0
    d5d2:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d5d4:	|      movea.l 32(sp),a0
    d5d8:	|      movea.l 32(a0),a0
    d5dc:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d5e0:	|      movea.l 32(sp),a0
    d5e4:	|      movea.l 32(a0),a0
    d5e8:	|      moveq #1,d0
    d5ea:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d5ee:	|      movea.l 32(sp),a0
    d5f2:	|      move.l 32(a0),d0
    d5f6:	|      move.l 20(sp),-(sp)
    d5fa:	|      move.l d0,-(sp)
    d5fc:	|      jsr 13374 <getSavedGamesStack>
    d602:	|      addq.l #8,sp
    d604:	|      tst.w d0
    d606:	|  /-- bne.s d60c <builtIn_getMatchingFiles+0xca>
    d608:	|  |   moveq #1,d0
    d60a:	+--|-- bra.s d628 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d60c:	|  \-> move.l 20(sp),4(sp)
    d612:	|      move.l 1add0 <SysBase>,d0
    d618:	|      movea.l d0,a6
    d61a:	|      movea.l 4(sp),a1
    d61e:	|      jsr -690(a6)
	newText = NULL;
    d622:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d626:	|      moveq #2,d0
}
    d628:	\----> movea.l (sp)+,a6
    d62a:	       lea 20(sp),sp
    d62e:	       rts

0000d630 <builtIn_saveGame>:

builtIn(saveGame)
{
    d630:	       lea -12(sp),sp
    d634:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d636:	       movea.l 24(sp),a0
    d63a:	       move.l 24(a0),d0
    d63e:	       move.l d0,-(sp)
    d640:	       jsr 13b8e <getTextFromAnyVar>
    d646:	       addq.l #4,sp
    d648:	       move.l d0,1ad9c <loadNow>
    trimStack(&fun->stack);
    d64e:	       moveq #24,d0
    d650:	       add.l 24(sp),d0
    d654:	       move.l d0,-(sp)
    d656:	       jsr 13f3c <trimStack>
    d65c:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d65e:	       move.l 1ad9c <loadNow>,d0
    d664:	       move.l d0,-(sp)
    d666:	       jsr 2fe <encodeFilename>
    d66c:	       addq.l #4,sp
    d66e:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d672:	       move.l 1ad9c <loadNow>,8(sp)
    d67a:	       move.l 1add0 <SysBase>,d0
    d680:	       movea.l d0,a6
    d682:	       movea.l 8(sp),a1
    d686:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d68a:	       move.l 12(sp),-(sp)
    d68e:	       jsr d1da <failSecurityCheck>
    d694:	       addq.l #4,sp
    d696:	       tst.w d0
    d698:	   /-- beq.s d69e <builtIn_saveGame+0x6e>
    d69a:	   |   moveq #1,d0
    d69c:	/--|-- bra.s d6ee <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    d69e:	|  \-> move.l 12(sp),-(sp)
    d6a2:	|      pea 17d14 <PutChar+0x1abc>
    d6a8:	|      jsr 12ae4 <joinStrings>
    d6ae:	|      addq.l #8,sp
    d6b0:	|      move.l d0,1ad9c <loadNow>
    FreeVec(aaaaa);
    d6b6:	|      move.l 12(sp),4(sp)
    d6bc:	|      move.l 1add0 <SysBase>,d0
    d6c2:	|      movea.l d0,a6
    d6c4:	|      movea.l 4(sp),a1
    d6c8:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    d6cc:	|      moveq #28,d0
    d6ce:	|      add.l 24(sp),d0
    d6d2:	|      clr.l -(sp)
    d6d4:	|      pea 1 <_start+0x1>
    d6d8:	|      move.l d0,-(sp)
    d6da:	|      jsr 13eaa <setVariable>
    d6e0:	|      lea 12(sp),sp
    saverFunc = fun;
    d6e4:	|      move.l 24(sp),1aef2 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    d6ec:	|      moveq #0,d0
}
    d6ee:	\----> movea.l (sp)+,a6
    d6f0:	       lea 12(sp),sp
    d6f4:	       rts

0000d6f6 <builtIn_fileExists>:

builtIn(fileExists)
{
    d6f6:	       lea -36(sp),sp
    d6fa:	       move.l a6,-(sp)
    d6fc:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d6fe:	       movea.l 52(sp),a0
    d702:	       move.l 24(a0),d0
    d706:	       move.l d0,-(sp)
    d708:	       jsr 13b8e <getTextFromAnyVar>
    d70e:	       addq.l #4,sp
    d710:	       move.l d0,1ad9c <loadNow>
    trimStack(&fun->stack);
    d716:	       moveq #24,d0
    d718:	       add.l 52(sp),d0
    d71c:	       move.l d0,-(sp)
    d71e:	       jsr 13f3c <trimStack>
    d724:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    d726:	       move.l 1ad9c <loadNow>,d0
    d72c:	       move.l d0,-(sp)
    d72e:	       jsr 2fe <encodeFilename>
    d734:	       addq.l #4,sp
    d736:	       move.l d0,40(sp)
    FreeVec(loadNow);
    d73a:	       move.l 1ad9c <loadNow>,36(sp)
    d742:	       move.l 1add0 <SysBase>,d0
    d748:	       movea.l d0,a6
    d74a:	       movea.l 36(sp),a1
    d74e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    d752:	       move.l 40(sp),-(sp)
    d756:	       jsr d1da <failSecurityCheck>
    d75c:	       addq.l #4,sp
    d75e:	       tst.w d0
    d760:	   /-- beq.s d768 <builtIn_fileExists+0x72>
    d762:	   |   moveq #1,d0
    d764:	/--|-- bra.w d808 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    d768:	|  \-> move.l 40(sp),32(sp)
    d76e:	|      move.l #1005,28(sp)
    d776:	|      move.l 1add8 <DOSBase>,d0
    d77c:	|      movea.l d0,a6
    d77e:	|      move.l 32(sp),d1
    d782:	|      move.l 28(sp),d2
    d786:	|      jsr -30(a6)
    d78a:	|      move.l d0,24(sp)
    d78e:	|      move.l 24(sp),d0
    d792:	|      move.l d0,20(sp)
    if (!fp) {        
    d796:	|  /-- bne.s d7a6 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    d798:	|  |   pea 17d16 <PutChar+0x1abe>
    d79e:	|  |   jsr 15784 <KPrintF>
    d7a4:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    d7a6:	|  \-> tst.l 20(sp)
    d7aa:	|      sne d0
    d7ac:	|      neg.b d0
    d7ae:	|      moveq #0,d1
    d7b0:	|      move.b d0,d1
    d7b2:	|      moveq #28,d0
    d7b4:	|      add.l 52(sp),d0
    d7b8:	|      move.l d1,-(sp)
    d7ba:	|      pea 1 <_start+0x1>
    d7be:	|      move.l d0,-(sp)
    d7c0:	|      jsr 13eaa <setVariable>
    d7c6:	|      lea 12(sp),sp
    if (fp) Close(fp);
    d7ca:	|      tst.l 20(sp)
    d7ce:	|  /-- beq.s d7ea <builtIn_fileExists+0xf4>
    d7d0:	|  |   move.l 20(sp),16(sp)
    d7d6:	|  |   move.l 1add8 <DOSBase>,d0
    d7dc:	|  |   movea.l d0,a6
    d7de:	|  |   move.l 16(sp),d1
    d7e2:	|  |   jsr -36(a6)
    d7e6:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    d7ea:	|  \-> move.l 40(sp),8(sp)
    d7f0:	|      move.l 1add0 <SysBase>,d0
    d7f6:	|      movea.l d0,a6
    d7f8:	|      movea.l 8(sp),a1
    d7fc:	|      jsr -690(a6)
    loadNow = NULL;
    d800:	|      clr.l 1ad9c <loadNow>
    return BR_CONTINUE;
    d806:	|      moveq #2,d0
}
    d808:	\----> move.l (sp)+,d2
    d80a:	       movea.l (sp)+,a6
    d80c:	       lea 36(sp),sp
    d810:	       rts

0000d812 <builtIn_loadGame>:

builtIn(loadGame)
{
    d812:	       lea -36(sp),sp
    d816:	       move.l a6,-(sp)
    d818:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    d81a:	       movea.l 52(sp),a0
    d81e:	       move.l 24(a0),d0
    d822:	       move.l d0,-(sp)
    d824:	       jsr 13b8e <getTextFromAnyVar>
    d82a:	       addq.l #4,sp
    d82c:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    d830:	       moveq #24,d0
    d832:	       add.l 52(sp),d0
    d836:	       move.l d0,-(sp)
    d838:	       jsr 13f3c <trimStack>
    d83e:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    d840:	       move.l 40(sp),-(sp)
    d844:	       jsr 2fe <encodeFilename>
    d84a:	       addq.l #4,sp
    d84c:	       move.l d0,1ad9c <loadNow>
    FreeVec(aaaaa);
    d852:	       move.l 40(sp),36(sp)
    d858:	       move.l 1add0 <SysBase>,d0
    d85e:	       movea.l d0,a6
    d860:	       movea.l 36(sp),a1
    d864:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    d868:	       move.l 1ad9c <loadNow>,d0
    d86e:	       move.l d0,-(sp)
    d870:	       jsr d1da <failSecurityCheck>
    d876:	       addq.l #4,sp
    d878:	       tst.w d0
    d87a:	   /-- beq.s d880 <builtIn_loadGame+0x6e>
    d87c:	   |   moveq #1,d0
    d87e:	/--|-- bra.s d8f0 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    d880:	|  \-> move.l 1ad9c <loadNow>,32(sp)
    d888:	|      move.l #1005,28(sp)
    d890:	|      move.l 1add8 <DOSBase>,d0
    d896:	|      movea.l d0,a6
    d898:	|      move.l 32(sp),d1
    d89c:	|      move.l 28(sp),d2
    d8a0:	|      jsr -30(a6)
    d8a4:	|      move.l d0,24(sp)
    d8a8:	|      move.l 24(sp),d0
    d8ac:	|      move.l d0,20(sp)
    if (fp) {
    d8b0:	|  /-- beq.s d8d0 <builtIn_loadGame+0xbe>
        Close(fp);
    d8b2:	|  |   move.l 20(sp),12(sp)
    d8b8:	|  |   move.l 1add8 <DOSBase>,d0
    d8be:	|  |   movea.l d0,a6
    d8c0:	|  |   move.l 12(sp),d1
    d8c4:	|  |   jsr -36(a6)
    d8c8:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    d8cc:	|  |   moveq #0,d0
    d8ce:	+--|-- bra.s d8f0 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    d8d0:	|  \-> move.l 1ad9c <loadNow>,16(sp)
    d8d8:	|      move.l 1add0 <SysBase>,d0
    d8de:	|      movea.l d0,a6
    d8e0:	|      movea.l 16(sp),a1
    d8e4:	|      jsr -690(a6)
    loadNow = NULL;
    d8e8:	|      clr.l 1ad9c <loadNow>
    return BR_CONTINUE;
    d8ee:	|      moveq #2,d0
}
    d8f0:	\----> move.l (sp)+,d2
    d8f2:	       movea.l (sp)+,a6
    d8f4:	       lea 36(sp),sp
    d8f8:	       rts

0000d8fa <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    d8fa:	move.l 1aec8 <sceneHeight>,d0
    d900:	move.l d0,d1
    d902:	move.l 1aec4 <sceneWidth>,d0
    d908:	move.l d1,-(sp)
    d90a:	move.l d0,-(sp)
    d90c:	clr.l -(sp)
    d90e:	clr.l -(sp)
    d910:	jsr c0ce <blankScreen>
    d916:	lea 16(sp),sp
	return BR_CONTINUE;
    d91a:	moveq #2,d0
}
    d91c:	rts

0000d91e <builtIn_blankArea>:

builtIn(blankArea)
{
    d91e:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d922:	       movea.l 24(sp),a0
    d926:	       move.l 24(a0),d0
    d92a:	       move.l d0,-(sp)
    d92c:	       pea 1 <_start+0x1>
    d930:	       lea 8(sp),a0
    d934:	       move.l a0,-(sp)
    d936:	       jsr 135b8 <getValueType>
    d93c:	       lea 12(sp),sp
    d940:	       tst.w d0
    d942:	   /-- bne.s d94a <builtIn_blankArea+0x2c>
    d944:	   |   moveq #1,d0
    d946:	/--|-- bra.w da20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d94a:	|  \-> moveq #24,d0
    d94c:	|      add.l 24(sp),d0
    d950:	|      move.l d0,-(sp)
    d952:	|      jsr 13f3c <trimStack>
    d958:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d95a:	|      movea.l 24(sp),a0
    d95e:	|      move.l 24(a0),d0
    d962:	|      move.l d0,-(sp)
    d964:	|      pea 1 <_start+0x1>
    d968:	|      lea 12(sp),a0
    d96c:	|      move.l a0,-(sp)
    d96e:	|      jsr 135b8 <getValueType>
    d974:	|      lea 12(sp),sp
    d978:	|      tst.w d0
    d97a:	|  /-- bne.s d982 <builtIn_blankArea+0x64>
    d97c:	|  |   moveq #1,d0
    d97e:	+--|-- bra.w da20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d982:	|  \-> moveq #24,d0
    d984:	|      add.l 24(sp),d0
    d988:	|      move.l d0,-(sp)
    d98a:	|      jsr 13f3c <trimStack>
    d990:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d992:	|      movea.l 24(sp),a0
    d996:	|      move.l 24(a0),d0
    d99a:	|      move.l d0,-(sp)
    d99c:	|      pea 1 <_start+0x1>
    d9a0:	|      moveq #16,d0
    d9a2:	|      add.l sp,d0
    d9a4:	|      move.l d0,-(sp)
    d9a6:	|      jsr 135b8 <getValueType>
    d9ac:	|      lea 12(sp),sp
    d9b0:	|      tst.w d0
    d9b2:	|  /-- bne.s d9b8 <builtIn_blankArea+0x9a>
    d9b4:	|  |   moveq #1,d0
    d9b6:	+--|-- bra.s da20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d9b8:	|  \-> moveq #24,d0
    d9ba:	|      add.l 24(sp),d0
    d9be:	|      move.l d0,-(sp)
    d9c0:	|      jsr 13f3c <trimStack>
    d9c6:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d9c8:	|      movea.l 24(sp),a0
    d9cc:	|      move.l 24(a0),d0
    d9d0:	|      move.l d0,-(sp)
    d9d2:	|      pea 1 <_start+0x1>
    d9d6:	|      moveq #20,d0
    d9d8:	|      add.l sp,d0
    d9da:	|      move.l d0,-(sp)
    d9dc:	|      jsr 135b8 <getValueType>
    d9e2:	|      lea 12(sp),sp
    d9e6:	|      tst.w d0
    d9e8:	|  /-- bne.s d9ee <builtIn_blankArea+0xd0>
    d9ea:	|  |   moveq #1,d0
    d9ec:	+--|-- bra.s da20 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d9ee:	|  \-> moveq #24,d0
    d9f0:	|      add.l 24(sp),d0
    d9f4:	|      move.l d0,-(sp)
    d9f6:	|      jsr 13f3c <trimStack>
    d9fc:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    d9fe:	|      movea.l (sp),a1
    da00:	|      movea.l 4(sp),a0
    da04:	|      move.l 8(sp),d1
    da08:	|      move.l 12(sp),d0
    da0c:	|      move.l a1,-(sp)
    da0e:	|      move.l a0,-(sp)
    da10:	|      move.l d1,-(sp)
    da12:	|      move.l d0,-(sp)
    da14:	|      jsr c0ce <blankScreen>
    da1a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    da1e:	|      moveq #2,d0
}
    da20:	\----> lea 16(sp),sp
    da24:	       rts

0000da26 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    da26:	jsr c0e2 <darkScreen>
	return BR_CONTINUE;
    da2c:	moveq #2,d0
}
    da2e:	rts

0000da30 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    da30:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da34:	       movea.l 20(sp),a0
    da38:	       move.l 24(a0),d0
    da3c:	       move.l d0,-(sp)
    da3e:	       pea 1 <_start+0x1>
    da42:	       lea 8(sp),a0
    da46:	       move.l a0,-(sp)
    da48:	       jsr 135b8 <getValueType>
    da4e:	       lea 12(sp),sp
    da52:	       tst.w d0
    da54:	   /-- bne.s da5c <builtIn_addOverlay+0x2c>
    da56:	   |   moveq #1,d0
    da58:	/--|-- bra.w daf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    da5c:	|  \-> moveq #24,d0
    da5e:	|      add.l 20(sp),d0
    da62:	|      move.l d0,-(sp)
    da64:	|      jsr 13f3c <trimStack>
    da6a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da6c:	|      movea.l 20(sp),a0
    da70:	|      move.l 24(a0),d0
    da74:	|      move.l d0,-(sp)
    da76:	|      pea 1 <_start+0x1>
    da7a:	|      moveq #12,d0
    da7c:	|      add.l sp,d0
    da7e:	|      move.l d0,-(sp)
    da80:	|      jsr 135b8 <getValueType>
    da86:	|      lea 12(sp),sp
    da8a:	|      tst.w d0
    da8c:	|  /-- bne.s da92 <builtIn_addOverlay+0x62>
    da8e:	|  |   moveq #1,d0
    da90:	+--|-- bra.s daf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    da92:	|  \-> moveq #24,d0
    da94:	|      add.l 20(sp),d0
    da98:	|      move.l d0,-(sp)
    da9a:	|      jsr 13f3c <trimStack>
    daa0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    daa2:	|      movea.l 20(sp),a0
    daa6:	|      move.l 24(a0),d0
    daaa:	|      move.l d0,-(sp)
    daac:	|      pea 5 <_start+0x5>
    dab0:	|      moveq #16,d0
    dab2:	|      add.l sp,d0
    dab4:	|      move.l d0,-(sp)
    dab6:	|      jsr 135b8 <getValueType>
    dabc:	|      lea 12(sp),sp
    dac0:	|      tst.w d0
    dac2:	|  /-- bne.s dac8 <builtIn_addOverlay+0x98>
    dac4:	|  |   moveq #1,d0
    dac6:	+--|-- bra.s daf4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dac8:	|  \-> moveq #24,d0
    daca:	|      add.l 20(sp),d0
    dace:	|      move.l d0,-(sp)
    dad0:	|      jsr 13f3c <trimStack>
    dad6:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    dad8:	|      movea.l (sp),a0
    dada:	|      move.l 4(sp),d1
    dade:	|      move.l 8(sp),d0
    dae2:	|      move.l a0,-(sp)
    dae4:	|      move.l d1,-(sp)
    dae6:	|      move.l d0,-(sp)
    dae8:	|      jsr c200 <loadBackDrop>
    daee:	|      lea 12(sp),sp
	return BR_CONTINUE;
    daf2:	|      moveq #2,d0
}
    daf4:	\----> lea 12(sp),sp
    daf8:	       rts

0000dafa <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    dafa:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dafe:	       movea.l 20(sp),a0
    db02:	       move.l 24(a0),d0
    db06:	       move.l d0,-(sp)
    db08:	       pea 1 <_start+0x1>
    db0c:	       lea 8(sp),a0
    db10:	       move.l a0,-(sp)
    db12:	       jsr 135b8 <getValueType>
    db18:	       lea 12(sp),sp
    db1c:	       tst.w d0
    db1e:	   /-- bne.s db26 <builtIn_mixOverlay+0x2c>
    db20:	   |   moveq #1,d0
    db22:	/--|-- bra.w dbbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    db26:	|  \-> moveq #24,d0
    db28:	|      add.l 20(sp),d0
    db2c:	|      move.l d0,-(sp)
    db2e:	|      jsr 13f3c <trimStack>
    db34:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db36:	|      movea.l 20(sp),a0
    db3a:	|      move.l 24(a0),d0
    db3e:	|      move.l d0,-(sp)
    db40:	|      pea 1 <_start+0x1>
    db44:	|      moveq #12,d0
    db46:	|      add.l sp,d0
    db48:	|      move.l d0,-(sp)
    db4a:	|      jsr 135b8 <getValueType>
    db50:	|      lea 12(sp),sp
    db54:	|      tst.w d0
    db56:	|  /-- bne.s db5c <builtIn_mixOverlay+0x62>
    db58:	|  |   moveq #1,d0
    db5a:	+--|-- bra.s dbbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    db5c:	|  \-> moveq #24,d0
    db5e:	|      add.l 20(sp),d0
    db62:	|      move.l d0,-(sp)
    db64:	|      jsr 13f3c <trimStack>
    db6a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    db6c:	|      movea.l 20(sp),a0
    db70:	|      move.l 24(a0),d0
    db74:	|      move.l d0,-(sp)
    db76:	|      pea 5 <_start+0x5>
    db7a:	|      moveq #16,d0
    db7c:	|      add.l sp,d0
    db7e:	|      move.l d0,-(sp)
    db80:	|      jsr 135b8 <getValueType>
    db86:	|      lea 12(sp),sp
    db8a:	|      tst.w d0
    db8c:	|  /-- bne.s db92 <builtIn_mixOverlay+0x98>
    db8e:	|  |   moveq #1,d0
    db90:	+--|-- bra.s dbbe <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    db92:	|  \-> moveq #24,d0
    db94:	|      add.l 20(sp),d0
    db98:	|      move.l d0,-(sp)
    db9a:	|      jsr 13f3c <trimStack>
    dba0:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    dba2:	|      movea.l (sp),a0
    dba4:	|      move.l 4(sp),d1
    dba8:	|      move.l 8(sp),d0
    dbac:	|      move.l a0,-(sp)
    dbae:	|      move.l d1,-(sp)
    dbb0:	|      move.l d0,-(sp)
    dbb2:	|      jsr c276 <mixBackDrop>
    dbb8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dbbc:	|      moveq #2,d0
}
    dbbe:	\----> lea 12(sp),sp
    dbc2:	       rts

0000dbc4 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    dbc4:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbc8:	       movea.l 20(sp),a0
    dbcc:	       move.l 24(a0),d0
    dbd0:	       move.l d0,-(sp)
    dbd2:	       pea 1 <_start+0x1>
    dbd6:	       lea 8(sp),a0
    dbda:	       move.l a0,-(sp)
    dbdc:	       jsr 135b8 <getValueType>
    dbe2:	       lea 12(sp),sp
    dbe6:	       tst.w d0
    dbe8:	   /-- bne.s dbf0 <builtIn_pasteImage+0x2c>
    dbea:	   |   moveq #1,d0
    dbec:	/--|-- bra.w dc80 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    dbf0:	|  \-> moveq #24,d0
    dbf2:	|      add.l 20(sp),d0
    dbf6:	|      move.l d0,-(sp)
    dbf8:	|      jsr 13f3c <trimStack>
    dbfe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc00:	|      movea.l 20(sp),a0
    dc04:	|      move.l 24(a0),d0
    dc08:	|      move.l d0,-(sp)
    dc0a:	|      pea 1 <_start+0x1>
    dc0e:	|      moveq #12,d0
    dc10:	|      add.l sp,d0
    dc12:	|      move.l d0,-(sp)
    dc14:	|      jsr 135b8 <getValueType>
    dc1a:	|      lea 12(sp),sp
    dc1e:	|      tst.w d0
    dc20:	|  /-- bne.s dc26 <builtIn_pasteImage+0x62>
    dc22:	|  |   moveq #1,d0
    dc24:	+--|-- bra.s dc80 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    dc26:	|  \-> moveq #24,d0
    dc28:	|      add.l 20(sp),d0
    dc2c:	|      move.l d0,-(sp)
    dc2e:	|      jsr 13f3c <trimStack>
    dc34:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dc36:	|      movea.l 20(sp),a0
    dc3a:	|      move.l 24(a0),d0
    dc3e:	|      move.l d0,-(sp)
    dc40:	|      jsr 13a90 <getAnimationFromVar>
    dc46:	|      addq.l #4,sp
    dc48:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    dc4c:	|      moveq #24,d0
    dc4e:	|      add.l 20(sp),d0
    dc52:	|      move.l d0,-(sp)
    dc54:	|      jsr 13f3c <trimStack>
    dc5a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    dc5c:	|      tst.l 8(sp)
    dc60:	|  /-- bne.s dc66 <builtIn_pasteImage+0xa2>
    dc62:	|  |   moveq #2,d0
    dc64:	+--|-- bra.s dc80 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    dc66:	|  \-> move.l (sp),d1
    dc68:	|      move.l 4(sp),d0
    dc6c:	|      move.l 8(sp),-(sp)
    dc70:	|      move.l d1,-(sp)
    dc72:	|      move.l d0,-(sp)
    dc74:	|      jsr ef6 <pasteCursor>
    dc7a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc7e:	|      moveq #2,d0
}
    dc80:	\----> lea 12(sp),sp
    dc84:	       rts

0000dc86 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    dc86:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc88:	       movea.l 16(sp),a0
    dc8c:	       move.l 24(a0),d0
    dc90:	       move.l d0,-(sp)
    dc92:	       pea 1 <_start+0x1>
    dc96:	       move.l sp,d0
    dc98:	       addq.l #8,d0
    dc9a:	       move.l d0,-(sp)
    dc9c:	       jsr 135b8 <getValueType>
    dca2:	       lea 12(sp),sp
    dca6:	       tst.w d0
    dca8:	   /-- bne.s dcb0 <builtIn_setSceneDimensions+0x2a>
    dcaa:	   |   moveq #1,d0
    dcac:	/--|-- bra.w dd38 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dcb0:	|  \-> moveq #24,d0
    dcb2:	|      add.l 16(sp),d0
    dcb6:	|      move.l d0,-(sp)
    dcb8:	|      jsr 13f3c <trimStack>
    dcbe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcc0:	|      movea.l 16(sp),a0
    dcc4:	|      move.l 24(a0),d0
    dcc8:	|      move.l d0,-(sp)
    dcca:	|      pea 1 <_start+0x1>
    dcce:	|      moveq #12,d0
    dcd0:	|      add.l sp,d0
    dcd2:	|      move.l d0,-(sp)
    dcd4:	|      jsr 135b8 <getValueType>
    dcda:	|      lea 12(sp),sp
    dcde:	|      tst.w d0
    dce0:	|  /-- bne.s dce6 <builtIn_setSceneDimensions+0x60>
    dce2:	|  |   moveq #1,d0
    dce4:	+--|-- bra.s dd38 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dce6:	|  \-> moveq #24,d0
    dce8:	|      add.l 16(sp),d0
    dcec:	|      move.l d0,-(sp)
    dcee:	|      jsr 13f3c <trimStack>
    dcf4:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    dcf6:	|      move.l (sp),d1
    dcf8:	|      move.l 4(sp),d0
    dcfc:	|      move.l d1,-(sp)
    dcfe:	|      move.l d0,-(sp)
    dd00:	|      jsr c2cc <resizeBackdrop>
    dd06:	|      addq.l #8,sp
    dd08:	|      tst.w d0
    dd0a:	|  /-- beq.s dd28 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    dd0c:	|  |   move.l (sp),d1
    dd0e:	|  |   move.l 4(sp),d0
    dd12:	|  |   move.l d1,-(sp)
    dd14:	|  |   move.l d0,-(sp)
    dd16:	|  |   clr.l -(sp)
    dd18:	|  |   clr.l -(sp)
    dd1a:	|  |   jsr c0ce <blankScreen>
    dd20:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    dd24:	|  |   moveq #2,d0
    dd26:	+--|-- bra.s dd38 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    dd28:	|  \-> pea 17d34 <PutChar+0x1adc>
    dd2e:	|      jsr 15784 <KPrintF>
    dd34:	|      addq.l #4,sp
	return BR_ERROR;
    dd36:	|      moveq #1,d0
}
    dd38:	\----> addq.l #8,sp
    dd3a:	       rts

0000dd3c <builtIn_aimCamera>:

builtIn(aimCamera)
{
    dd3c:	          move.l d3,-(sp)
    dd3e:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd40:	          movea.l 16(sp),a0
    dd44:	          move.l 24(a0),d0
    dd48:	          move.l d0,-(sp)
    dd4a:	          pea 1 <_start+0x1>
    dd4e:	          pea 1aee6 <cameraY>
    dd54:	          jsr 135b8 <getValueType>
    dd5a:	          lea 12(sp),sp
    dd5e:	          tst.w d0
    dd60:	      /-- bne.s dd68 <builtIn_aimCamera+0x2c>
    dd62:	      |   moveq #1,d0
    dd64:	/-----|-- bra.w dfea <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    dd68:	|     \-> moveq #24,d0
    dd6a:	|         add.l 16(sp),d0
    dd6e:	|         move.l d0,-(sp)
    dd70:	|         jsr 13f3c <trimStack>
    dd76:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd78:	|         movea.l 16(sp),a0
    dd7c:	|         move.l 24(a0),d0
    dd80:	|         move.l d0,-(sp)
    dd82:	|         pea 1 <_start+0x1>
    dd86:	|         pea 1aee2 <cameraX>
    dd8c:	|         jsr 135b8 <getValueType>
    dd92:	|         lea 12(sp),sp
    dd96:	|         tst.w d0
    dd98:	|     /-- bne.s dda0 <builtIn_aimCamera+0x64>
    dd9a:	|     |   moveq #1,d0
    dd9c:	+-----|-- bra.w dfea <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    dda0:	|     \-> moveq #24,d0
    dda2:	|         add.l 16(sp),d0
    dda6:	|         move.l d0,-(sp)
    dda8:	|         jsr 13f3c <trimStack>
    ddae:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ddb0:	|         move.l 1aee2 <cameraX>,d0
    ddb6:	|         move.l d0,-(sp)
    ddb8:	|         jsr 15bc0 <__floatsisf>
    ddbe:	|         addq.l #4,sp
    ddc0:	|         move.l d0,d2
    ddc2:	|         move.l 1ad24 <winWidth>,d0
    ddc8:	|         lsr.l #1,d0
    ddca:	|         move.l d0,-(sp)
    ddcc:	|         jsr 15be8 <__floatunsisf>
    ddd2:	|         addq.l #4,sp
    ddd4:	|         move.l d0,d1
    ddd6:	|         move.l 1a774 <cameraZoom>,d0
    dddc:	|         move.l d0,-(sp)
    ddde:	|         move.l d1,-(sp)
    dde0:	|         jsr 15a6c <__divsf3>
    dde6:	|         addq.l #8,sp
    dde8:	|         move.l d0,-(sp)
    ddea:	|         move.l d2,-(sp)
    ddec:	|         jsr 15eb4 <__subsf3>
    ddf2:	|         addq.l #8,sp
    ddf4:	|         move.l d0,-(sp)
    ddf6:	|         jsr 15b58 <__fixsfsi>
    ddfc:	|         addq.l #4,sp
    ddfe:	|         move.l d0,1aee2 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    de04:	|         move.l 1aee6 <cameraY>,d0
    de0a:	|         move.l d0,-(sp)
    de0c:	|         jsr 15bc0 <__floatsisf>
    de12:	|         addq.l #4,sp
    de14:	|         move.l d0,d2
    de16:	|         move.l 1ad28 <winHeight>,d0
    de1c:	|         lsr.l #1,d0
    de1e:	|         move.l d0,-(sp)
    de20:	|         jsr 15be8 <__floatunsisf>
    de26:	|         addq.l #4,sp
    de28:	|         move.l d0,d1
    de2a:	|         move.l 1a774 <cameraZoom>,d0
    de30:	|         move.l d0,-(sp)
    de32:	|         move.l d1,-(sp)
    de34:	|         jsr 15a6c <__divsf3>
    de3a:	|         addq.l #8,sp
    de3c:	|         move.l d0,-(sp)
    de3e:	|         move.l d2,-(sp)
    de40:	|         jsr 15eb4 <__subsf3>
    de46:	|         addq.l #8,sp
    de48:	|         move.l d0,-(sp)
    de4a:	|         jsr 15b58 <__fixsfsi>
    de50:	|         addq.l #4,sp
    de52:	|         move.l d0,1aee6 <cameraY>

	if (cameraX < 0) cameraX = 0;
    de58:	|         move.l 1aee2 <cameraX>,d0
    de5e:	|     /-- bpl.s de6a <builtIn_aimCamera+0x12e>
    de60:	|     |   clr.l 1aee2 <cameraX>
    de66:	|  /--|-- bra.w df20 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    de6a:	|  |  \-> move.l 1aee2 <cameraX>,d0
    de70:	|  |      move.l d0,-(sp)
    de72:	|  |      jsr 15bc0 <__floatsisf>
    de78:	|  |      addq.l #4,sp
    de7a:	|  |      move.l d0,d2
    de7c:	|  |      move.l 1aec4 <sceneWidth>,d0
    de82:	|  |      move.l d0,-(sp)
    de84:	|  |      jsr 15be8 <__floatunsisf>
    de8a:	|  |      addq.l #4,sp
    de8c:	|  |      move.l d0,d3
    de8e:	|  |      move.l 1ad24 <winWidth>,d0
    de94:	|  |      move.l d0,-(sp)
    de96:	|  |      jsr 15be8 <__floatunsisf>
    de9c:	|  |      addq.l #4,sp
    de9e:	|  |      move.l d0,d1
    dea0:	|  |      move.l 1a774 <cameraZoom>,d0
    dea6:	|  |      move.l d0,-(sp)
    dea8:	|  |      move.l d1,-(sp)
    deaa:	|  |      jsr 15a6c <__divsf3>
    deb0:	|  |      addq.l #8,sp
    deb2:	|  |      move.l d0,-(sp)
    deb4:	|  |      move.l d3,-(sp)
    deb6:	|  |      jsr 15eb4 <__subsf3>
    debc:	|  |      addq.l #8,sp
    debe:	|  |      move.l d0,-(sp)
    dec0:	|  |      move.l d2,-(sp)
    dec2:	|  |      jsr 15d2c <__gtsf2>
    dec8:	|  |      addq.l #8,sp
    deca:	|  |      tst.l d0
    decc:	|  +----- ble.s df20 <builtIn_aimCamera+0x1e4>
    dece:	|  |      move.l 1aec4 <sceneWidth>,d0
    ded4:	|  |      move.l d0,-(sp)
    ded6:	|  |      jsr 15be8 <__floatunsisf>
    dedc:	|  |      addq.l #4,sp
    dede:	|  |      move.l d0,d2
    dee0:	|  |      move.l 1ad24 <winWidth>,d0
    dee6:	|  |      move.l d0,-(sp)
    dee8:	|  |      jsr 15be8 <__floatunsisf>
    deee:	|  |      addq.l #4,sp
    def0:	|  |      move.l d0,d1
    def2:	|  |      move.l 1a774 <cameraZoom>,d0
    def8:	|  |      move.l d0,-(sp)
    defa:	|  |      move.l d1,-(sp)
    defc:	|  |      jsr 15a6c <__divsf3>
    df02:	|  |      addq.l #8,sp
    df04:	|  |      move.l d0,-(sp)
    df06:	|  |      move.l d2,-(sp)
    df08:	|  |      jsr 15eb4 <__subsf3>
    df0e:	|  |      addq.l #8,sp
    df10:	|  |      move.l d0,-(sp)
    df12:	|  |      jsr 15b58 <__fixsfsi>
    df18:	|  |      addq.l #4,sp
    df1a:	|  |      move.l d0,1aee2 <cameraX>
	if (cameraY < 0) cameraY = 0;
    df20:	|  \----> move.l 1aee6 <cameraY>,d0
    df26:	|     /-- bpl.s df32 <builtIn_aimCamera+0x1f6>
    df28:	|     |   clr.l 1aee6 <cameraY>
    df2e:	|  /--|-- bra.w dfe8 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    df32:	|  |  \-> move.l 1aee6 <cameraY>,d0
    df38:	|  |      move.l d0,-(sp)
    df3a:	|  |      jsr 15bc0 <__floatsisf>
    df40:	|  |      addq.l #4,sp
    df42:	|  |      move.l d0,d2
    df44:	|  |      move.l 1aec8 <sceneHeight>,d0
    df4a:	|  |      move.l d0,-(sp)
    df4c:	|  |      jsr 15be8 <__floatunsisf>
    df52:	|  |      addq.l #4,sp
    df54:	|  |      move.l d0,d3
    df56:	|  |      move.l 1ad28 <winHeight>,d0
    df5c:	|  |      move.l d0,-(sp)
    df5e:	|  |      jsr 15be8 <__floatunsisf>
    df64:	|  |      addq.l #4,sp
    df66:	|  |      move.l d0,d1
    df68:	|  |      move.l 1a774 <cameraZoom>,d0
    df6e:	|  |      move.l d0,-(sp)
    df70:	|  |      move.l d1,-(sp)
    df72:	|  |      jsr 15a6c <__divsf3>
    df78:	|  |      addq.l #8,sp
    df7a:	|  |      move.l d0,-(sp)
    df7c:	|  |      move.l d3,-(sp)
    df7e:	|  |      jsr 15eb4 <__subsf3>
    df84:	|  |      addq.l #8,sp
    df86:	|  |      move.l d0,-(sp)
    df88:	|  |      move.l d2,-(sp)
    df8a:	|  |      jsr 15d2c <__gtsf2>
    df90:	|  |      addq.l #8,sp
    df92:	|  |      tst.l d0
    df94:	|  +----- ble.s dfe8 <builtIn_aimCamera+0x2ac>
    df96:	|  |      move.l 1aec8 <sceneHeight>,d0
    df9c:	|  |      move.l d0,-(sp)
    df9e:	|  |      jsr 15be8 <__floatunsisf>
    dfa4:	|  |      addq.l #4,sp
    dfa6:	|  |      move.l d0,d2
    dfa8:	|  |      move.l 1ad28 <winHeight>,d0
    dfae:	|  |      move.l d0,-(sp)
    dfb0:	|  |      jsr 15be8 <__floatunsisf>
    dfb6:	|  |      addq.l #4,sp
    dfb8:	|  |      move.l d0,d1
    dfba:	|  |      move.l 1a774 <cameraZoom>,d0
    dfc0:	|  |      move.l d0,-(sp)
    dfc2:	|  |      move.l d1,-(sp)
    dfc4:	|  |      jsr 15a6c <__divsf3>
    dfca:	|  |      addq.l #8,sp
    dfcc:	|  |      move.l d0,-(sp)
    dfce:	|  |      move.l d2,-(sp)
    dfd0:	|  |      jsr 15eb4 <__subsf3>
    dfd6:	|  |      addq.l #8,sp
    dfd8:	|  |      move.l d0,-(sp)
    dfda:	|  |      jsr 15b58 <__fixsfsi>
    dfe0:	|  |      addq.l #4,sp
    dfe2:	|  |      move.l d0,1aee6 <cameraY>
	return BR_CONTINUE;
    dfe8:	|  \----> moveq #2,d0
}
    dfea:	\-------> move.l (sp)+,d2
    dfec:	          move.l (sp)+,d3
    dfee:	          rts

0000dff0 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    dff0:	       subq.l #4,sp
    dff2:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dff4:	       movea.l 16(sp),a0
    dff8:	       move.l 24(a0),d0
    dffc:	       move.l d0,-(sp)
    dffe:	       pea 1 <_start+0x1>
    e002:	       moveq #12,d0
    e004:	       add.l sp,d0
    e006:	       move.l d0,-(sp)
    e008:	       jsr 135b8 <getValueType>
    e00e:	       lea 12(sp),sp
    e012:	       tst.w d0
    e014:	   /-- bne.s e01c <builtIn_zoomCamera+0x2c>
    e016:	   |   moveq #1,d0
    e018:	/--|-- bra.w e216 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e01c:	|  \-> moveq #24,d0
    e01e:	|      add.l 16(sp),d0
    e022:	|      move.l d0,-(sp)
    e024:	|      jsr 13f3c <trimStack>
    e02a:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e02c:	|      move.l 1ad8c <input+0xa>,d0
    e032:	|      move.l d0,-(sp)
    e034:	|      jsr 15bc0 <__floatsisf>
    e03a:	|      addq.l #4,sp
    e03c:	|      move.l d0,d1
    e03e:	|      move.l 1a774 <cameraZoom>,d0
    e044:	|      move.l d0,-(sp)
    e046:	|      move.l d1,-(sp)
    e048:	|      jsr 15c72 <__mulsf3>
    e04e:	|      addq.l #8,sp
    e050:	|      move.l d0,-(sp)
    e052:	|      jsr 15b58 <__fixsfsi>
    e058:	|      addq.l #4,sp
    e05a:	|      move.l d0,1ad8c <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e060:	|      move.l 1ad90 <input+0xe>,d0
    e066:	|      move.l d0,-(sp)
    e068:	|      jsr 15bc0 <__floatsisf>
    e06e:	|      addq.l #4,sp
    e070:	|      move.l d0,d1
    e072:	|      move.l 1a774 <cameraZoom>,d0
    e078:	|      move.l d0,-(sp)
    e07a:	|      move.l d1,-(sp)
    e07c:	|      jsr 15c72 <__mulsf3>
    e082:	|      addq.l #8,sp
    e084:	|      move.l d0,-(sp)
    e086:	|      jsr 15b58 <__fixsfsi>
    e08c:	|      addq.l #4,sp
    e08e:	|      move.l d0,1ad90 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e094:	|      move.l 4(sp),d0
    e098:	|      move.l d0,-(sp)
    e09a:	|      jsr 15bc0 <__floatsisf>
    e0a0:	|      addq.l #4,sp
    e0a2:	|      move.l #1008981770,-(sp)
    e0a8:	|      move.l d0,-(sp)
    e0aa:	|      jsr 15c72 <__mulsf3>
    e0b0:	|      addq.l #8,sp
    e0b2:	|      move.l d0,1a774 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e0b8:	|      move.l 1ad24 <winWidth>,d0
    e0be:	|      move.l d0,-(sp)
    e0c0:	|      jsr 15be8 <__floatunsisf>
    e0c6:	|      addq.l #4,sp
    e0c8:	|      move.l d0,d1
    e0ca:	|      move.l 1a774 <cameraZoom>,d0
    e0d0:	|      move.l d0,-(sp)
    e0d2:	|      move.l d1,-(sp)
    e0d4:	|      jsr 15a6c <__divsf3>
    e0da:	|      addq.l #8,sp
    e0dc:	|      move.l d0,d2
    e0de:	|      move.l 1aec4 <sceneWidth>,d0
    e0e4:	|      move.l d0,-(sp)
    e0e6:	|      jsr 15be8 <__floatunsisf>
    e0ec:	|      addq.l #4,sp
    e0ee:	|      move.l d0,-(sp)
    e0f0:	|      move.l d2,-(sp)
    e0f2:	|      jsr 15d2c <__gtsf2>
    e0f8:	|      addq.l #8,sp
    e0fa:	|      tst.l d0
    e0fc:	|  /-- ble.s e132 <builtIn_zoomCamera+0x142>
    e0fe:	|  |   move.l 1ad24 <winWidth>,d0
    e104:	|  |   move.l d0,-(sp)
    e106:	|  |   jsr 15be8 <__floatunsisf>
    e10c:	|  |   addq.l #4,sp
    e10e:	|  |   move.l d0,d2
    e110:	|  |   move.l 1aec4 <sceneWidth>,d0
    e116:	|  |   move.l d0,-(sp)
    e118:	|  |   jsr 15be8 <__floatunsisf>
    e11e:	|  |   addq.l #4,sp
    e120:	|  |   move.l d0,-(sp)
    e122:	|  |   move.l d2,-(sp)
    e124:	|  |   jsr 15a6c <__divsf3>
    e12a:	|  |   addq.l #8,sp
    e12c:	|  |   move.l d0,1a774 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e132:	|  \-> move.l 1ad28 <winHeight>,d0
    e138:	|      move.l d0,-(sp)
    e13a:	|      jsr 15be8 <__floatunsisf>
    e140:	|      addq.l #4,sp
    e142:	|      move.l d0,d1
    e144:	|      move.l 1a774 <cameraZoom>,d0
    e14a:	|      move.l d0,-(sp)
    e14c:	|      move.l d1,-(sp)
    e14e:	|      jsr 15a6c <__divsf3>
    e154:	|      addq.l #8,sp
    e156:	|      move.l d0,d2
    e158:	|      move.l 1aec8 <sceneHeight>,d0
    e15e:	|      move.l d0,-(sp)
    e160:	|      jsr 15be8 <__floatunsisf>
    e166:	|      addq.l #4,sp
    e168:	|      move.l d0,-(sp)
    e16a:	|      move.l d2,-(sp)
    e16c:	|      jsr 15d2c <__gtsf2>
    e172:	|      addq.l #8,sp
    e174:	|      tst.l d0
    e176:	|  /-- ble.s e1ac <builtIn_zoomCamera+0x1bc>
    e178:	|  |   move.l 1ad28 <winHeight>,d0
    e17e:	|  |   move.l d0,-(sp)
    e180:	|  |   jsr 15be8 <__floatunsisf>
    e186:	|  |   addq.l #4,sp
    e188:	|  |   move.l d0,d2
    e18a:	|  |   move.l 1aec8 <sceneHeight>,d0
    e190:	|  |   move.l d0,-(sp)
    e192:	|  |   jsr 15be8 <__floatunsisf>
    e198:	|  |   addq.l #4,sp
    e19a:	|  |   move.l d0,-(sp)
    e19c:	|  |   move.l d2,-(sp)
    e19e:	|  |   jsr 15a6c <__divsf3>
    e1a4:	|  |   addq.l #8,sp
    e1a6:	|  |   move.l d0,1a774 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e1ac:	|  \-> move.l 1ad8c <input+0xa>,d0
    e1b2:	|      move.l d0,-(sp)
    e1b4:	|      jsr 15bc0 <__floatsisf>
    e1ba:	|      addq.l #4,sp
    e1bc:	|      move.l d0,d1
    e1be:	|      move.l 1a774 <cameraZoom>,d0
    e1c4:	|      move.l d0,-(sp)
    e1c6:	|      move.l d1,-(sp)
    e1c8:	|      jsr 15a6c <__divsf3>
    e1ce:	|      addq.l #8,sp
    e1d0:	|      move.l d0,-(sp)
    e1d2:	|      jsr 15b58 <__fixsfsi>
    e1d8:	|      addq.l #4,sp
    e1da:	|      move.l d0,1ad8c <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e1e0:	|      move.l 1ad90 <input+0xe>,d0
    e1e6:	|      move.l d0,-(sp)
    e1e8:	|      jsr 15bc0 <__floatsisf>
    e1ee:	|      addq.l #4,sp
    e1f0:	|      move.l d0,d1
    e1f2:	|      move.l 1a774 <cameraZoom>,d0
    e1f8:	|      move.l d0,-(sp)
    e1fa:	|      move.l d1,-(sp)
    e1fc:	|      jsr 15a6c <__divsf3>
    e202:	|      addq.l #8,sp
    e204:	|      move.l d0,-(sp)
    e206:	|      jsr 15b58 <__fixsfsi>
    e20c:	|      addq.l #4,sp
    e20e:	|      move.l d0,1ad90 <input+0xe>

	return BR_CONTINUE;
    e214:	|      moveq #2,d0
}
    e216:	\----> move.l (sp)+,d2
    e218:	       addq.l #4,sp
    e21a:	       rts

0000e21c <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e21c:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e21e:	             tst.l 8(sp)
    e222:	         /-- bne.s e236 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e224:	         |   pea 17d59 <PutChar+0x1b01>
    e22a:	         |   jsr 15784 <KPrintF>
    e230:	         |   addq.l #4,sp
		return BR_ERROR;
    e232:	         |   moveq #1,d0
    e234:	/--------|-- bra.s e296 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e236:	|        \-> jsr c58 <rand>
    e23c:	|            move.l d0,d1
    e23e:	|            move.l 8(sp),d0
    e242:	|            move.l d0,-(sp)
    e244:	|            move.l d1,-(sp)
    e246:	|            jsr 1621c <__umodsi3>
    e24c:	|            addq.l #8,sp
    e24e:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e250:	|     /----- bra.s e284 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e252:	|  /--|----> move.l (sp),d0
    e254:	|  |  |      cmp.l 8(sp),d0
    e258:	|  |  |  /-- bne.s e274 <builtIn_pickOne+0x58>
    e25a:	|  |  |  |   moveq #28,d0
    e25c:	|  |  |  |   add.l 12(sp),d0
    e260:	|  |  |  |   movea.l 12(sp),a0
    e264:	|  |  |  |   move.l 24(a0),d1
    e268:	|  |  |  |   move.l d0,-(sp)
    e26a:	|  |  |  |   move.l d1,-(sp)
    e26c:	|  |  |  |   jsr 13a72 <copyVariable>
    e272:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e274:	|  |  |  \-> moveq #24,d0
    e276:	|  |  |      add.l 12(sp),d0
    e27a:	|  |  |      move.l d0,-(sp)
    e27c:	|  |  |      jsr 13f3c <trimStack>
    e282:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e284:	|  |  \----> move.l 8(sp),d0
    e288:	|  |         move.l d0,d1
    e28a:	|  |         subq.l #1,d1
    e28c:	|  |         move.l d1,8(sp)
    e290:	|  |         tst.l d0
    e292:	|  \-------- bne.s e252 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e294:	|            moveq #2,d0
}
    e296:	\----------> addq.l #4,sp
    e298:	             rts

0000e29a <builtIn_substring>:

builtIn(substring)
{
    e29a:	       lea -40(sp),sp
    e29e:	       move.l a6,-(sp)
    e2a0:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e2a2:	       movea.l 56(sp),a0
    e2a6:	       move.l 24(a0),d0
    e2aa:	       move.l d0,-(sp)
    e2ac:	       pea 1 <_start+0x1>
    e2b0:	       lea 16(sp),a0
    e2b4:	       move.l a0,-(sp)
    e2b6:	       jsr 135b8 <getValueType>
    e2bc:	       lea 12(sp),sp
    e2c0:	       tst.w d0
    e2c2:	   /-- bne.s e2ca <builtIn_substring+0x30>
    e2c4:	   |   moveq #1,d0
    e2c6:	/--|-- bra.w e442 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e2ca:	|  \-> moveq #24,d0
    e2cc:	|      add.l 56(sp),d0
    e2d0:	|      move.l d0,-(sp)
    e2d2:	|      jsr 13f3c <trimStack>
    e2d8:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e2da:	|      movea.l 56(sp),a0
    e2de:	|      move.l 24(a0),d0
    e2e2:	|      move.l d0,-(sp)
    e2e4:	|      pea 1 <_start+0x1>
    e2e8:	|      lea 20(sp),a0
    e2ec:	|      move.l a0,-(sp)
    e2ee:	|      jsr 135b8 <getValueType>
    e2f4:	|      lea 12(sp),sp
    e2f8:	|      tst.w d0
    e2fa:	|  /-- bne.s e302 <builtIn_substring+0x68>
    e2fc:	|  |   moveq #1,d0
    e2fe:	+--|-- bra.w e442 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e302:	|  \-> moveq #24,d0
    e304:	|      add.l 56(sp),d0
    e308:	|      move.l d0,-(sp)
    e30a:	|      jsr 13f3c <trimStack>
    e310:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e312:	|      movea.l 56(sp),a0
    e316:	|      move.l 24(a0),d0
    e31a:	|      move.l d0,-(sp)
    e31c:	|      jsr 13b8e <getTextFromAnyVar>
    e322:	|      addq.l #4,sp
    e324:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e328:	|      moveq #24,d0
    e32a:	|      add.l 56(sp),d0
    e32e:	|      move.l d0,-(sp)
    e330:	|      jsr 13f3c <trimStack>
    e336:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e338:	|      move.l 44(sp),-(sp)
    e33c:	|      jsr 12aa4 <strlen>
    e342:	|      addq.l #4,sp
    e344:	|      move.l d0,d1
    e346:	|      move.l 12(sp),d0
    e34a:	|      movea.l d0,a0
    e34c:	|      move.l 8(sp),d0
    e350:	|      add.l a0,d0
    e352:	|      cmp.l d1,d0
    e354:	|  /-- bls.s e38a <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e356:	|  |   move.l 44(sp),-(sp)
    e35a:	|  |   jsr 12aa4 <strlen>
    e360:	|  |   addq.l #4,sp
    e362:	|  |   move.l d0,d1
    e364:	|  |   move.l 12(sp),d0
    e368:	|  |   sub.l d0,d1
    e36a:	|  |   move.l d1,d0
    e36c:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e370:	|  |   move.l 44(sp),-(sp)
    e374:	|  |   jsr 12aa4 <strlen>
    e37a:	|  |   addq.l #4,sp
    e37c:	|  |   move.l d0,d1
    e37e:	|  |   move.l 12(sp),d0
    e382:	|  |   cmp.l d1,d0
    e384:	|  +-- bls.s e38a <builtIn_substring+0xf0>
            start = 0;
    e386:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e38a:	|  \-> move.l 8(sp),d0
    e38e:	|  /-- bpl.s e394 <builtIn_substring+0xfa>
        length = 0;
    e390:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e394:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e39a:	|      move.l 12(sp),d1
    e39e:	|      move.l 8(sp),d0
    e3a2:	|      move.l d1,d2
    e3a4:	|      add.l d0,d2
    e3a6:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e3aa:	|      move.l 36(sp),d0
    e3ae:	|      sub.l 40(sp),d0
    e3b2:	|      addq.l #1,d0
    e3b4:	|      move.l d0,32(sp)
    e3b8:	|      clr.l 28(sp)
    e3bc:	|      move.l 1add0 <SysBase>,d0
    e3c2:	|      movea.l d0,a6
    e3c4:	|      move.l 32(sp),d0
    e3c8:	|      move.l 28(sp),d1
    e3cc:	|      jsr -684(a6)
    e3d0:	|      move.l d0,24(sp)
    e3d4:	|      move.l 24(sp),d0
    e3d8:	|      move.l d0,20(sp)
    if (!newString) {
    e3dc:	|  /-- bne.s e3e2 <builtIn_substring+0x148>
        return BR_ERROR;
    e3de:	|  |   moveq #1,d0
    e3e0:	+--|-- bra.s e442 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e3e2:	|  \-> move.l 36(sp),d0
    e3e6:	|      sub.l 40(sp),d0
    e3ea:	|      move.l d0,d1
    e3ec:	|      move.l 40(sp),d0
    e3f0:	|      add.l 44(sp),d0
    e3f4:	|      move.l d1,-(sp)
    e3f6:	|      move.l d0,-(sp)
    e3f8:	|      move.l 28(sp),-(sp)
    e3fc:	|      jsr 15738 <memcpy>
    e402:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e406:	|      move.l 36(sp),d0
    e40a:	|      sub.l 40(sp),d0
    e40e:	|      movea.l 20(sp),a0
    e412:	|      adda.l d0,a0
    e414:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e416:	|      moveq #28,d0
    e418:	|      add.l 56(sp),d0
    e41c:	|      move.l 20(sp),-(sp)
    e420:	|      move.l d0,-(sp)
    e422:	|      jsr 137da <makeTextVar>
    e428:	|      addq.l #8,sp
    FreeVec(newString);
    e42a:	|      move.l 20(sp),16(sp)
    e430:	|      move.l 1add0 <SysBase>,d0
    e436:	|      movea.l d0,a6
    e438:	|      movea.l 16(sp),a1
    e43c:	|      jsr -690(a6)
    return BR_CONTINUE;
    e440:	|      moveq #2,d0
}
    e442:	\----> move.l (sp)+,d2
    e444:	       movea.l (sp)+,a6
    e446:	       lea 40(sp),sp
    e44a:	       rts

0000e44c <builtIn_stringLength>:

builtIn(stringLength)
{
    e44c:	subq.l #8,sp
    e44e:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e450:	movea.l 20(sp),a0
    e454:	move.l 24(a0),d0
    e458:	move.l d0,-(sp)
    e45a:	jsr 13b8e <getTextFromAnyVar>
    e460:	addq.l #4,sp
    e462:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e466:	moveq #24,d0
    e468:	add.l 20(sp),d0
    e46c:	move.l d0,-(sp)
    e46e:	jsr 13f3c <trimStack>
    e474:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e476:	move.l 8(sp),-(sp)
    e47a:	jsr 12aa4 <strlen>
    e480:	addq.l #4,sp
    e482:	move.l d0,d1
    e484:	moveq #28,d0
    e486:	add.l 20(sp),d0
    e48a:	move.l d1,-(sp)
    e48c:	pea 1 <_start+0x1>
    e490:	move.l d0,-(sp)
    e492:	jsr 13eaa <setVariable>
    e498:	lea 12(sp),sp
	FreeVec(newText);
    e49c:	move.l 8(sp),4(sp)
    e4a2:	move.l 1add0 <SysBase>,d0
    e4a8:	movea.l d0,a6
    e4aa:	movea.l 4(sp),a1
    e4ae:	jsr -690(a6)
	return BR_CONTINUE;
    e4b2:	moveq #2,d0
}
    e4b4:	movea.l (sp)+,a6
    e4b6:	addq.l #8,sp
    e4b8:	rts

0000e4ba <builtIn_newStack>:

builtIn(newStack)
{
    e4ba:	             lea -12(sp),sp
    e4be:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e4c0:	             moveq #28,d0
    e4c2:	             add.l 24(sp),d0
    e4c6:	             move.l d0,-(sp)
    e4c8:	             jsr 13806 <unlinkVar>
    e4ce:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e4d0:	             movea.l 24(sp),a0
    e4d4:	             moveq #6,d0
    e4d6:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e4da:	             moveq #12,d1
    e4dc:	             move.l d1,12(sp)
    e4e0:	             clr.l 8(sp)
    e4e4:	             move.l 1add0 <SysBase>,d0
    e4ea:	             movea.l d0,a6
    e4ec:	             move.l 12(sp),d0
    e4f0:	             move.l 8(sp),d1
    e4f4:	             jsr -684(a6)
    e4f8:	             move.l d0,4(sp)
    e4fc:	             move.l 4(sp),d0
    e500:	             movea.l 24(sp),a0
    e504:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e508:	             movea.l 24(sp),a0
    e50c:	             move.l 32(a0),d0
    e510:	         /-- bne.s e518 <builtIn_newStack+0x5e>
    e512:	         |   moveq #1,d0
    e514:	/--------|-- bra.w e5aa <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e518:	|        \-> movea.l 24(sp),a0
    e51c:	|            movea.l 32(a0),a0
    e520:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e522:	|            movea.l 24(sp),a0
    e526:	|            movea.l 32(a0),a0
    e52a:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e52e:	|            movea.l 24(sp),a0
    e532:	|            movea.l 32(a0),a0
    e536:	|            moveq #1,d0
    e538:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e53c:	|     /----- bra.s e598 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e53e:	|  /--|----> movea.l 24(sp),a0
    e542:	|  |  |      move.l 32(a0),d0
    e546:	|  |  |      move.l d0,d1
    e548:	|  |  |      movea.l 24(sp),a0
    e54c:	|  |  |      move.l 24(a0),d0
    e550:	|  |  |      move.l d1,-(sp)
    e552:	|  |  |      move.l d0,-(sp)
    e554:	|  |  |      jsr 12df4 <addVarToStack>
    e55a:	|  |  |      addq.l #8,sp
    e55c:	|  |  |      tst.w d0
    e55e:	|  |  |  /-- bne.s e564 <builtIn_newStack+0xaa>
    e560:	|  |  |  |   moveq #1,d0
    e562:	+--|--|--|-- bra.s e5aa <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e564:	|  |  |  \-> movea.l 24(sp),a0
    e568:	|  |  |      movea.l 32(a0),a0
    e56c:	|  |  |      move.l 4(a0),d0
    e570:	|  |  |  /-- bne.s e588 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e572:	|  |  |  |   movea.l 24(sp),a0
    e576:	|  |  |  |   movea.l 32(a0),a1
    e57a:	|  |  |  |   movea.l 24(sp),a0
    e57e:	|  |  |  |   movea.l 32(a0),a0
    e582:	|  |  |  |   move.l (a1),d0
    e584:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e588:	|  |  |  \-> moveq #24,d0
    e58a:	|  |  |      add.l 24(sp),d0
    e58e:	|  |  |      move.l d0,-(sp)
    e590:	|  |  |      jsr 13f3c <trimStack>
    e596:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e598:	|  |  \----> move.l 20(sp),d0
    e59c:	|  |         move.l d0,d1
    e59e:	|  |         subq.l #1,d1
    e5a0:	|  |         move.l d1,20(sp)
    e5a4:	|  |         tst.l d0
    e5a6:	|  \-------- bne.s e53e <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e5a8:	|            moveq #2,d0
}
    e5aa:	\----------> movea.l (sp)+,a6
    e5ac:	             lea 12(sp),sp
    e5b0:	             rts

0000e5b2 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e5b2:	          movea.l 8(sp),a0
    e5b6:	          movea.l 24(a0),a0
    e5ba:	          move.l (a0),d0
    e5bc:	          moveq #6,d1
    e5be:	          cmp.l d0,d1
    e5c0:	      /-- beq.s e5dc <builtIn_stackSize+0x2a>
    e5c2:	      |   moveq #10,d1
    e5c4:	      |   cmp.l d0,d1
    e5c6:	   /--|-- beq.s e620 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e5c8:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e5ca:	   |  |   pea 17d8c <PutChar+0x1b34>
    e5d0:	   |  |   jsr 15784 <KPrintF>
    e5d6:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e5d8:	   |  |   moveq #1,d0
    e5da:	/--|--|-- bra.s e65a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e5dc:	|  |  \-> movea.l 8(sp),a0
    e5e0:	|  |      movea.l 24(a0),a0
    e5e4:	|  |      move.l 4(a0),d0
    e5e8:	|  |      move.l d0,-(sp)
    e5ea:	|  |      jsr 13f18 <stackSize>
    e5f0:	|  |      addq.l #4,sp
    e5f2:	|  |      move.l d0,d1
    e5f4:	|  |      moveq #28,d0
    e5f6:	|  |      add.l 8(sp),d0
    e5fa:	|  |      move.l d1,-(sp)
    e5fc:	|  |      pea 1 <_start+0x1>
    e600:	|  |      move.l d0,-(sp)
    e602:	|  |      jsr 13eaa <setVariable>
    e608:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e60c:	|  |      moveq #24,d0
    e60e:	|  |      add.l 8(sp),d0
    e612:	|  |      move.l d0,-(sp)
    e614:	|  |      jsr 13f3c <trimStack>
    e61a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e61c:	|  |      moveq #2,d0
    e61e:	+--|----- bra.s e65a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e620:	|  \----> movea.l 8(sp),a0
    e624:	|         movea.l 24(a0),a0
    e628:	|         movea.l 4(a0),a0
    e62c:	|         move.l 4(a0),d1
    e630:	|         moveq #28,d0
    e632:	|         add.l 8(sp),d0
    e636:	|         move.l d1,-(sp)
    e638:	|         pea 1 <_start+0x1>
    e63c:	|         move.l d0,-(sp)
    e63e:	|         jsr 13eaa <setVariable>
    e644:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e648:	|         moveq #24,d0
    e64a:	|         add.l 8(sp),d0
    e64e:	|         move.l d0,-(sp)
    e650:	|         jsr 13f3c <trimStack>
    e656:	|         addq.l #4,sp
			return BR_CONTINUE;
    e658:	|         moveq #2,d0
}
    e65a:	\-------> rts

0000e65c <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e65c:	       movea.l 8(sp),a0
    e660:	       movea.l 24(a0),a0
    e664:	       move.l (a0),d0
    e666:	       moveq #6,d1
    e668:	       cmp.l d0,d1
    e66a:	   /-- beq.s e67e <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e66c:	   |   pea 17db5 <PutChar+0x1b5d>
    e672:	   |   jsr 15784 <KPrintF>
    e678:	   |   addq.l #4,sp
		return BR_ERROR;
    e67a:	   |   moveq #1,d0
    e67c:	/--|-- bra.s e6b2 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    e67e:	|  \-> moveq #28,d0
    e680:	|      add.l 8(sp),d0
    e684:	|      movea.l 8(sp),a0
    e688:	|      move.l 24(a0),d1
    e68c:	|      move.l d0,-(sp)
    e68e:	|      move.l d1,-(sp)
    e690:	|      jsr 130be <copyStack>
    e696:	|      addq.l #8,sp
    e698:	|      tst.w d0
    e69a:	|  /-- bne.s e6a0 <builtIn_copyStack+0x44>
    e69c:	|  |   moveq #1,d0
    e69e:	+--|-- bra.s e6b2 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    e6a0:	|  \-> moveq #24,d0
    e6a2:	|      add.l 8(sp),d0
    e6a6:	|      move.l d0,-(sp)
    e6a8:	|      jsr 13f3c <trimStack>
    e6ae:	|      addq.l #4,sp
	return BR_CONTINUE;
    e6b0:	|      moveq #2,d0
}
    e6b2:	\----> rts

0000e6b4 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e6b4:	       movea.l 8(sp),a0
    e6b8:	       movea.l 24(a0),a0
    e6bc:	       movea.l 8(a0),a0
    e6c0:	       move.l (a0),d0
    e6c2:	       moveq #6,d1
    e6c4:	       cmp.l d0,d1
    e6c6:	   /-- beq.s e6dc <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    e6c8:	   |   pea 17dce <PutChar+0x1b76>
    e6ce:	   |   jsr 15784 <KPrintF>
    e6d4:	   |   addq.l #4,sp
		return BR_ERROR;
    e6d6:	   |   moveq #1,d0
    e6d8:	/--|-- bra.w e76a <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e6dc:	|  \-> movea.l 8(sp),a0
    e6e0:	|      movea.l 24(a0),a0
    e6e4:	|      movea.l 8(a0),a0
    e6e8:	|      move.l 4(a0),d0
    e6ec:	|      move.l d0,d1
    e6ee:	|      movea.l 8(sp),a0
    e6f2:	|      move.l 24(a0),d0
    e6f6:	|      move.l d1,-(sp)
    e6f8:	|      move.l d0,-(sp)
    e6fa:	|      jsr 12df4 <addVarToStack>
    e700:	|      addq.l #8,sp
    e702:	|      tst.w d0
    e704:	|  /-- bne.s e70a <builtIn_pushToStack+0x56>
		return BR_ERROR;
    e706:	|  |   moveq #1,d0
    e708:	+--|-- bra.s e76a <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    e70a:	|  \-> movea.l 8(sp),a0
    e70e:	|      movea.l 24(a0),a0
    e712:	|      movea.l 8(a0),a0
    e716:	|      movea.l 4(a0),a0
    e71a:	|      movea.l (a0),a0
    e71c:	|      move.l 8(a0),d0
    e720:	|  /-- bne.s e748 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e722:	|  |   movea.l 8(sp),a0
    e726:	|  |   movea.l 24(a0),a0
    e72a:	|  |   movea.l 8(a0),a0
    e72e:	|  |   movea.l 4(a0),a1
    e732:	|  |   movea.l 8(sp),a0
    e736:	|  |   movea.l 24(a0),a0
    e73a:	|  |   movea.l 8(a0),a0
    e73e:	|  |   movea.l 4(a0),a0
    e742:	|  |   move.l (a1),d0
    e744:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    e748:	|  \-> moveq #24,d0
    e74a:	|      add.l 8(sp),d0
    e74e:	|      move.l d0,-(sp)
    e750:	|      jsr 13f3c <trimStack>
    e756:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e758:	|      moveq #24,d0
    e75a:	|      add.l 8(sp),d0
    e75e:	|      move.l d0,-(sp)
    e760:	|      jsr 13f3c <trimStack>
    e766:	|      addq.l #4,sp
	return BR_CONTINUE;
    e768:	|      moveq #2,d0
}
    e76a:	\----> rts

0000e76c <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e76c:	             movea.l 8(sp),a0
    e770:	             movea.l 24(a0),a0
    e774:	             movea.l 8(a0),a0
    e778:	             move.l (a0),d0
    e77a:	             moveq #6,d1
    e77c:	             cmp.l d0,d1
    e77e:	         /-- beq.s e794 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    e780:	         |   pea 17dce <PutChar+0x1b76>
    e786:	         |   jsr 15784 <KPrintF>
    e78c:	         |   addq.l #4,sp
		return BR_ERROR;
    e78e:	         |   moveq #1,d0
    e790:	/--------|-- bra.w e882 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    e794:	|        \-> movea.l 8(sp),a0
    e798:	|            movea.l 24(a0),a0
    e79c:	|            movea.l 8(a0),a0
    e7a0:	|            movea.l 4(a0),a0
    e7a4:	|            move.l (a0),d0
    e7a6:	|     /----- bne.s e800 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e7a8:	|     |      movea.l 8(sp),a0
    e7ac:	|     |      movea.l 24(a0),a0
    e7b0:	|     |      movea.l 8(a0),a0
    e7b4:	|     |      move.l 4(a0),d0
    e7b8:	|     |      move.l d0,d1
    e7ba:	|     |      movea.l 8(sp),a0
    e7be:	|     |      move.l 24(a0),d0
    e7c2:	|     |      move.l d1,-(sp)
    e7c4:	|     |      move.l d0,-(sp)
    e7c6:	|     |      jsr 12df4 <addVarToStack>
    e7cc:	|     |      addq.l #8,sp
    e7ce:	|     |      tst.w d0
    e7d0:	|     |  /-- bne.s e7d8 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    e7d2:	|     |  |   moveq #1,d0
    e7d4:	+-----|--|-- bra.w e882 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e7d8:	|     |  \-> movea.l 8(sp),a0
    e7dc:	|     |      movea.l 24(a0),a0
    e7e0:	|     |      movea.l 8(a0),a0
    e7e4:	|     |      movea.l 4(a0),a1
    e7e8:	|     |      movea.l 8(sp),a0
    e7ec:	|     |      movea.l 24(a0),a0
    e7f0:	|     |      movea.l 8(a0),a0
    e7f4:	|     |      movea.l 4(a0),a0
    e7f8:	|     |      move.l (a1),d0
    e7fa:	|     |      move.l d0,4(a0)
    e7fe:	|  /--|----- bra.s e860 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    e800:	|  |  \----> movea.l 8(sp),a0
    e804:	|  |         movea.l 24(a0),a0
    e808:	|  |         movea.l 8(a0),a0
    e80c:	|  |         movea.l 4(a0),a0
    e810:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    e814:	|  |         move.l d0,d1
    e816:	|  |         addq.l #8,d1
    e818:	|  |         movea.l 8(sp),a0
    e81c:	|  |         move.l 24(a0),d0
    e820:	|  |         move.l d1,-(sp)
    e822:	|  |         move.l d0,-(sp)
    e824:	|  |         jsr 12df4 <addVarToStack>
    e82a:	|  |         addq.l #8,sp
    e82c:	|  |         tst.w d0
    e82e:	|  |     /-- bne.s e834 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    e830:	|  |     |   moveq #1,d0
    e832:	+--|-----|-- bra.s e882 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    e834:	|  |     \-> movea.l 8(sp),a0
    e838:	|  |         movea.l 24(a0),a0
    e83c:	|  |         movea.l 8(a0),a0
    e840:	|  |         movea.l 4(a0),a0
    e844:	|  |         movea.l 4(a0),a1
    e848:	|  |         movea.l 8(sp),a0
    e84c:	|  |         movea.l 24(a0),a0
    e850:	|  |         movea.l 8(a0),a0
    e854:	|  |         movea.l 4(a0),a0
    e858:	|  |         move.l 8(a1),d0
    e85c:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    e860:	|  \-------> moveq #24,d0
    e862:	|            add.l 8(sp),d0
    e866:	|            move.l d0,-(sp)
    e868:	|            jsr 13f3c <trimStack>
    e86e:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    e870:	|            moveq #24,d0
    e872:	|            add.l 8(sp),d0
    e876:	|            move.l d0,-(sp)
    e878:	|            jsr 13f3c <trimStack>
    e87e:	|            addq.l #4,sp
	return BR_CONTINUE;
    e880:	|            moveq #2,d0
}
    e882:	\----------> rts

0000e884 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    e884:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e886:	       movea.l 12(sp),a0
    e88a:	       movea.l 24(a0),a0
    e88e:	       movea.l 8(a0),a0
    e892:	       move.l (a0),d0
    e894:	       moveq #6,d1
    e896:	       cmp.l d0,d1
    e898:	   /-- beq.s e8ae <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    e89a:	   |   pea 17db5 <PutChar+0x1b5d>
    e8a0:	   |   jsr 15784 <KPrintF>
    e8a6:	   |   addq.l #4,sp
		return BR_ERROR;
    e8a8:	   |   moveq #1,d0
    e8aa:	/--|-- bra.w e944 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    e8ae:	|  \-> movea.l 12(sp),a0
    e8b2:	|      movea.l 24(a0),a0
    e8b6:	|      movea.l 8(a0),a0
    e8ba:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e8be:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    e8c0:	|      movea.l 12(sp),a0
    e8c4:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e8c8:	|      clr.l -(sp)
    e8ca:	|      move.l d1,-(sp)
    e8cc:	|      move.l d0,-(sp)
    e8ce:	|      jsr 13194 <deleteVarFromStack>
    e8d4:	|      lea 12(sp),sp
    e8d8:	|      move.l d0,d1
    e8da:	|      moveq #28,d0
    e8dc:	|      add.l 12(sp),d0
    e8e0:	|      move.l d1,-(sp)
    e8e2:	|      pea 1 <_start+0x1>
    e8e6:	|      move.l d0,-(sp)
    e8e8:	|      jsr 13eaa <setVariable>
    e8ee:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    e8f2:	|      movea.l 12(sp),a0
    e8f6:	|      movea.l 24(a0),a0
    e8fa:	|      movea.l 8(a0),a0
    e8fe:	|      movea.l 4(a0),a0
    e902:	|      move.l (a0),d0
    e904:	|      movea.l 12(sp),a0
    e908:	|      movea.l 24(a0),a0
    e90c:	|      movea.l 8(a0),a0
    e910:	|      movea.l 4(a0),a2
    e914:	|      move.l d0,-(sp)
    e916:	|      jsr 13ef4 <stackFindLast>
    e91c:	|      addq.l #4,sp
    e91e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    e922:	|      moveq #24,d0
    e924:	|      add.l 12(sp),d0
    e928:	|      move.l d0,-(sp)
    e92a:	|      jsr 13f3c <trimStack>
    e930:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e932:	|      moveq #24,d0
    e934:	|      add.l 12(sp),d0
    e938:	|      move.l d0,-(sp)
    e93a:	|      jsr 13f3c <trimStack>
    e940:	|      addq.l #4,sp
	return BR_CONTINUE;
    e942:	|      moveq #2,d0
}
    e944:	\----> movea.l (sp)+,a2
    e946:	       rts

0000e948 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    e948:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e94a:	       movea.l 12(sp),a0
    e94e:	       movea.l 24(a0),a0
    e952:	       movea.l 8(a0),a0
    e956:	       move.l (a0),d0
    e958:	       moveq #6,d1
    e95a:	       cmp.l d0,d1
    e95c:	   /-- beq.s e972 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    e95e:	   |   pea 17db5 <PutChar+0x1b5d>
    e964:	   |   jsr 15784 <KPrintF>
    e96a:	   |   addq.l #4,sp
		return BR_ERROR;
    e96c:	   |   moveq #1,d0
    e96e:	/--|-- bra.w ea0a <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    e972:	|  \-> movea.l 12(sp),a0
    e976:	|      movea.l 24(a0),a0
    e97a:	|      movea.l 8(a0),a0
    e97e:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e982:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    e984:	|      movea.l 12(sp),a0
    e988:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e98c:	|      pea 1 <_start+0x1>
    e990:	|      move.l d1,-(sp)
    e992:	|      move.l d0,-(sp)
    e994:	|      jsr 13194 <deleteVarFromStack>
    e99a:	|      lea 12(sp),sp
    e99e:	|      move.l d0,d1
    e9a0:	|      moveq #28,d0
    e9a2:	|      add.l 12(sp),d0
    e9a6:	|      move.l d1,-(sp)
    e9a8:	|      pea 1 <_start+0x1>
    e9ac:	|      move.l d0,-(sp)
    e9ae:	|      jsr 13eaa <setVariable>
    e9b4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    e9b8:	|      movea.l 12(sp),a0
    e9bc:	|      movea.l 24(a0),a0
    e9c0:	|      movea.l 8(a0),a0
    e9c4:	|      movea.l 4(a0),a0
    e9c8:	|      move.l (a0),d0
    e9ca:	|      movea.l 12(sp),a0
    e9ce:	|      movea.l 24(a0),a0
    e9d2:	|      movea.l 8(a0),a0
    e9d6:	|      movea.l 4(a0),a2
    e9da:	|      move.l d0,-(sp)
    e9dc:	|      jsr 13ef4 <stackFindLast>
    e9e2:	|      addq.l #4,sp
    e9e4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    e9e8:	|      moveq #24,d0
    e9ea:	|      add.l 12(sp),d0
    e9ee:	|      move.l d0,-(sp)
    e9f0:	|      jsr 13f3c <trimStack>
    e9f6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e9f8:	|      moveq #24,d0
    e9fa:	|      add.l 12(sp),d0
    e9fe:	|      move.l d0,-(sp)
    ea00:	|      jsr 13f3c <trimStack>
    ea06:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea08:	|      moveq #2,d0
}
    ea0a:	\----> movea.l (sp)+,a2
    ea0c:	       rts

0000ea0e <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ea0e:	       movea.l 8(sp),a0
    ea12:	       movea.l 24(a0),a0
    ea16:	       move.l (a0),d0
    ea18:	       moveq #6,d1
    ea1a:	       cmp.l d0,d1
    ea1c:	   /-- beq.s ea30 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ea1e:	   |   pea 17db5 <PutChar+0x1b5d>
    ea24:	   |   jsr 15784 <KPrintF>
    ea2a:	   |   addq.l #4,sp
		return BR_ERROR;
    ea2c:	   |   moveq #1,d0
    ea2e:	/--|-- bra.s ea9a <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ea30:	|  \-> movea.l 8(sp),a0
    ea34:	|      movea.l 24(a0),a0
    ea38:	|      movea.l 4(a0),a0
    ea3c:	|      move.l (a0),d0
    ea3e:	|  /-- bne.s ea52 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ea40:	|  |   pea 17de6 <PutChar+0x1b8e>
    ea46:	|  |   jsr 15784 <KPrintF>
    ea4c:	|  |   addq.l #4,sp
		return BR_ERROR;
    ea4e:	|  |   moveq #1,d0
    ea50:	+--|-- bra.s ea9a <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ea52:	|  \-> moveq #28,d0
    ea54:	|      add.l 8(sp),d0
    ea58:	|      movea.l 8(sp),a0
    ea5c:	|      movea.l 24(a0),a0
    ea60:	|      movea.l 4(a0),a0
    ea64:	|      move.l (a0),d1
    ea66:	|      move.l d0,-(sp)
    ea68:	|      move.l d1,-(sp)
    ea6a:	|      jsr 13a72 <copyVariable>
    ea70:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ea72:	|      movea.l 8(sp),a0
    ea76:	|      movea.l 24(a0),a0
    ea7a:	|      move.l 4(a0),d0
    ea7e:	|      move.l d0,-(sp)
    ea80:	|      jsr 13f3c <trimStack>
    ea86:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ea88:	|      moveq #24,d0
    ea8a:	|      add.l 8(sp),d0
    ea8e:	|      move.l d0,-(sp)
    ea90:	|      jsr 13f3c <trimStack>
    ea96:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea98:	|      moveq #2,d0
}
    ea9a:	\----> rts

0000ea9c <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ea9c:	       movea.l 8(sp),a0
    eaa0:	       movea.l 24(a0),a0
    eaa4:	       move.l (a0),d0
    eaa6:	       moveq #6,d1
    eaa8:	       cmp.l d0,d1
    eaaa:	   /-- beq.s eabe <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    eaac:	   |   pea 17db5 <PutChar+0x1b5d>
    eab2:	   |   jsr 15784 <KPrintF>
    eab8:	   |   addq.l #4,sp
		return BR_ERROR;
    eaba:	   |   moveq #1,d0
    eabc:	/--|-- bra.s eb12 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eabe:	|  \-> movea.l 8(sp),a0
    eac2:	|      movea.l 24(a0),a0
    eac6:	|      movea.l 4(a0),a0
    eaca:	|      move.l (a0),d0
    eacc:	|  /-- bne.s eae0 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    eace:	|  |   pea 17de6 <PutChar+0x1b8e>
    ead4:	|  |   jsr 15784 <KPrintF>
    eada:	|  |   addq.l #4,sp
		return BR_ERROR;
    eadc:	|  |   moveq #1,d0
    eade:	+--|-- bra.s eb12 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    eae0:	|  \-> moveq #28,d0
    eae2:	|      add.l 8(sp),d0
    eae6:	|      movea.l 8(sp),a0
    eaea:	|      movea.l 24(a0),a0
    eaee:	|      movea.l 4(a0),a0
    eaf2:	|      move.l (a0),d1
    eaf4:	|      move.l d0,-(sp)
    eaf6:	|      move.l d1,-(sp)
    eaf8:	|      jsr 13a72 <copyVariable>
    eafe:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    eb00:	|      moveq #24,d0
    eb02:	|      add.l 8(sp),d0
    eb06:	|      move.l d0,-(sp)
    eb08:	|      jsr 13f3c <trimStack>
    eb0e:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb10:	|      moveq #2,d0
}
    eb12:	\----> rts

0000eb14 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eb14:	       movea.l 8(sp),a0
    eb18:	       movea.l 24(a0),a0
    eb1c:	       move.l (a0),d0
    eb1e:	       moveq #6,d1
    eb20:	       cmp.l d0,d1
    eb22:	   /-- beq.s eb36 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    eb24:	   |   pea 17db5 <PutChar+0x1b5d>
    eb2a:	   |   jsr 15784 <KPrintF>
    eb30:	   |   addq.l #4,sp
		return BR_ERROR;
    eb32:	   |   moveq #1,d0
    eb34:	/--|-- bra.s eb8c <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eb36:	|  \-> movea.l 8(sp),a0
    eb3a:	|      movea.l 24(a0),a0
    eb3e:	|      movea.l 4(a0),a0
    eb42:	|      move.l (a0),d0
    eb44:	|  /-- bne.s eb58 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    eb46:	|  |   pea 17de6 <PutChar+0x1b8e>
    eb4c:	|  |   jsr 15784 <KPrintF>
    eb52:	|  |   addq.l #4,sp
		return BR_ERROR;
    eb54:	|  |   moveq #1,d0
    eb56:	+--|-- bra.s eb8c <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    eb58:	|  \-> moveq #28,d0
    eb5a:	|      add.l 8(sp),d0
    eb5e:	|      movea.l 8(sp),a0
    eb62:	|      movea.l 24(a0),a0
    eb66:	|      movea.l 4(a0),a0
    eb6a:	|      move.l 4(a0),d1
    eb6e:	|      move.l d0,-(sp)
    eb70:	|      move.l d1,-(sp)
    eb72:	|      jsr 13a72 <copyVariable>
    eb78:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    eb7a:	|      moveq #24,d0
    eb7c:	|      add.l 8(sp),d0
    eb80:	|      move.l d0,-(sp)
    eb82:	|      jsr 13f3c <trimStack>
    eb88:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb8a:	|      moveq #2,d0
}
    eb8c:	\----> rts

0000eb8e <builtIn_random>:

builtIn(random)
{
    eb8e:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    eb90:	       movea.l 12(sp),a0
    eb94:	       move.l 24(a0),d0
    eb98:	       move.l d0,-(sp)
    eb9a:	       pea 1 <_start+0x1>
    eb9e:	       move.l sp,d0
    eba0:	       addq.l #8,d0
    eba2:	       move.l d0,-(sp)
    eba4:	       jsr 135b8 <getValueType>
    ebaa:	       lea 12(sp),sp
    ebae:	       tst.w d0
    ebb0:	   /-- bne.s ebb6 <builtIn_random+0x28>
		return BR_ERROR;
    ebb2:	   |   moveq #1,d0
    ebb4:	/--|-- bra.s ec00 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ebb6:	|  \-> moveq #24,d0
    ebb8:	|      add.l 12(sp),d0
    ebbc:	|      move.l d0,-(sp)
    ebbe:	|      jsr 13f3c <trimStack>
    ebc4:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ebc6:	|      move.l (sp),d0
    ebc8:	|  /-- bgt.s ebce <builtIn_random+0x40>
    ebca:	|  |   moveq #1,d0
    ebcc:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ebce:	|  \-> jsr c58 <rand>
    ebd4:	|      move.l d0,d1
    ebd6:	|      move.l (sp),d0
    ebd8:	|      move.l d0,-(sp)
    ebda:	|      move.l d1,-(sp)
    ebdc:	|      jsr 1621c <__umodsi3>
    ebe2:	|      addq.l #8,sp
    ebe4:	|      move.l d0,d1
    ebe6:	|      moveq #28,d0
    ebe8:	|      add.l 12(sp),d0
    ebec:	|      move.l d1,-(sp)
    ebee:	|      pea 1 <_start+0x1>
    ebf2:	|      move.l d0,-(sp)
    ebf4:	|      jsr 13eaa <setVariable>
    ebfa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ebfe:	|      moveq #2,d0
}
    ec00:	\----> addq.l #4,sp
    ec02:	       rts

0000ec04 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ec04:	nop
    ec06:	rts

0000ec08 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ec08:	moveq #2,d0
}
    ec0a:	rts

0000ec0c <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    ec0c:	moveq #2,d0
}
    ec0e:	rts

0000ec10 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ec10:	moveq #2,d0
}
    ec12:	rts

0000ec14 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ec14:	moveq #2,d0
}
    ec16:	rts

0000ec18 <builtIn_setFont>:


builtIn(setFont)
{
    ec18:	       lea -16(sp),sp
    ec1c:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ec1e:	       movea.l 28(sp),a0
    ec22:	       move.l 24(a0),d0
    ec26:	       move.l d0,-(sp)
    ec28:	       pea 1 <_start+0x1>
    ec2c:	       lea 12(sp),a0
    ec30:	       move.l a0,-(sp)
    ec32:	       jsr 135b8 <getValueType>
    ec38:	       lea 12(sp),sp
    ec3c:	       tst.w d0
    ec3e:	   /-- bne.s ec46 <builtIn_setFont+0x2e>
    ec40:	   |   moveq #1,d0
    ec42:	/--|-- bra.w ecf4 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ec46:	|  \-> moveq #24,d0
    ec48:	|      add.l 28(sp),d0
    ec4c:	|      move.l d0,-(sp)
    ec4e:	|      jsr 13f3c <trimStack>
    ec54:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ec56:	|      movea.l 28(sp),a0
    ec5a:	|      move.l 24(a0),d0
    ec5e:	|      move.l d0,-(sp)
    ec60:	|      jsr 13b8e <getTextFromAnyVar>
    ec66:	|      addq.l #4,sp
    ec68:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ec6c:	|  /-- bne.s ec74 <builtIn_setFont+0x5c>
    ec6e:	|  |   moveq #1,d0
    ec70:	+--|-- bra.w ecf4 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ec74:	|  \-> moveq #24,d0
    ec76:	|      add.l 28(sp),d0
    ec7a:	|      move.l d0,-(sp)
    ec7c:	|      jsr 13f3c <trimStack>
    ec82:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ec84:	|      movea.l 28(sp),a0
    ec88:	|      move.l 24(a0),d0
    ec8c:	|      move.l d0,-(sp)
    ec8e:	|      pea 5 <_start+0x5>
    ec92:	|      lea 16(sp),a0
    ec96:	|      move.l a0,-(sp)
    ec98:	|      jsr 135b8 <getValueType>
    ec9e:	|      lea 12(sp),sp
    eca2:	|      tst.w d0
    eca4:	|  /-- bne.s ecaa <builtIn_setFont+0x92>
    eca6:	|  |   moveq #1,d0
    eca8:	+--|-- bra.s ecf4 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ecaa:	|  \-> moveq #24,d0
    ecac:	|      add.l 28(sp),d0
    ecb0:	|      move.l d0,-(sp)
    ecb2:	|      jsr 13f3c <trimStack>
    ecb8:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ecba:	|      move.l 4(sp),d1
    ecbe:	|      move.l 8(sp),d0
    ecc2:	|      move.l d1,-(sp)
    ecc4:	|      move.l 20(sp),-(sp)
    ecc8:	|      move.l d0,-(sp)
    ecca:	|      jsr 13fb0 <loadFont>
    ecd0:	|      lea 12(sp),sp
    ecd4:	|      tst.w d0
    ecd6:	|  /-- bne.s ecdc <builtIn_setFont+0xc4>
    ecd8:	|  |   moveq #1,d0
    ecda:	+--|-- bra.s ecf4 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ecdc:	|  \-> move.l 16(sp),12(sp)
    ece2:	|      move.l 1add0 <SysBase>,d0
    ece8:	|      movea.l d0,a6
    ecea:	|      movea.l 12(sp),a1
    ecee:	|      jsr -690(a6)

    return BR_CONTINUE;
    ecf2:	|      moveq #2,d0
}
    ecf4:	\----> movea.l (sp)+,a6
    ecf6:	       lea 16(sp),sp
    ecfa:	       rts

0000ecfc <builtIn_inFont>:

builtIn(inFont)
{
    ecfc:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ecfe:	       movea.l 12(sp),a0
    ed02:	       move.l 24(a0),d0
    ed06:	       move.l d0,-(sp)
    ed08:	       jsr 13b8e <getTextFromAnyVar>
    ed0e:	       addq.l #4,sp
    ed10:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ed12:	   /-- bne.s ed18 <builtIn_inFont+0x1c>
    ed14:	   |   moveq #1,d0
    ed16:	/--|-- bra.s ed4e <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ed18:	|  \-> moveq #24,d0
    ed1a:	|      add.l 12(sp),d0
    ed1e:	|      move.l d0,-(sp)
    ed20:	|      jsr 13f3c <trimStack>
    ed26:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ed28:	|      move.l (sp),-(sp)
    ed2a:	|      jsr 13f84 <isInFont>
    ed30:	|      addq.l #4,sp
    ed32:	|      movea.w d0,a0
    ed34:	|      moveq #28,d0
    ed36:	|      add.l 12(sp),d0
    ed3a:	|      move.l a0,-(sp)
    ed3c:	|      pea 1 <_start+0x1>
    ed40:	|      move.l d0,-(sp)
    ed42:	|      jsr 13eaa <setVariable>
    ed48:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed4c:	|      moveq #2,d0
}
    ed4e:	\----> addq.l #4,sp
    ed50:	       rts

0000ed52 <builtIn_pasteString>:

builtIn(pasteString)
{
    ed52:	       lea -16(sp),sp
    ed56:	       move.l a6,-(sp)
    ed58:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ed5a:	       movea.l 32(sp),a0
    ed5e:	       move.l 24(a0),d0
    ed62:	       move.l d0,-(sp)
    ed64:	       jsr 13b8e <getTextFromAnyVar>
    ed6a:	       addq.l #4,sp
    ed6c:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ed70:	       moveq #24,d0
    ed72:	       add.l 32(sp),d0
    ed76:	       move.l d0,-(sp)
    ed78:	       jsr 13f3c <trimStack>
    ed7e:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ed80:	       movea.l 32(sp),a0
    ed84:	       move.l 24(a0),d0
    ed88:	       move.l d0,-(sp)
    ed8a:	       pea 1 <_start+0x1>
    ed8e:	       lea 20(sp),a0
    ed92:	       move.l a0,-(sp)
    ed94:	       jsr 135b8 <getValueType>
    ed9a:	       lea 12(sp),sp
    ed9e:	       tst.w d0
    eda0:	   /-- bne.s eda8 <builtIn_pasteString+0x56>
    eda2:	   |   moveq #1,d0
    eda4:	/--|-- bra.w ee30 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    eda8:	|  \-> moveq #24,d0
    edaa:	|      add.l 32(sp),d0
    edae:	|      move.l d0,-(sp)
    edb0:	|      jsr 13f3c <trimStack>
    edb6:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    edb8:	|      movea.l 32(sp),a0
    edbc:	|      move.l 24(a0),d0
    edc0:	|      move.l d0,-(sp)
    edc2:	|      pea 1 <_start+0x1>
    edc6:	|      lea 16(sp),a0
    edca:	|      move.l a0,-(sp)
    edcc:	|      jsr 135b8 <getValueType>
    edd2:	|      lea 12(sp),sp
    edd6:	|      tst.w d0
    edd8:	|  /-- bne.s edde <builtIn_pasteString+0x8c>
    edda:	|  |   moveq #1,d0
    eddc:	+--|-- bra.s ee30 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    edde:	|  \-> moveq #24,d0
    ede0:	|      add.l 32(sp),d0
    ede4:	|      move.l d0,-(sp)
    ede6:	|      jsr 13f3c <trimStack>
    edec:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    edee:	|      move.l 8(sp),d0
    edf2:	|      cmpi.l #65535,d0
    edf8:	|  /-- bne.s ee18 <builtIn_pasteString+0xc6>
    edfa:	|  |   move.l 1ad24 <winWidth>,d2
    ee00:	|  |   move.l 20(sp),-(sp)
    ee04:	|  |   jsr 13f96 <stringWidth>
    ee0a:	|  |   addq.l #4,sp
    ee0c:	|  |   move.l d2,d1
    ee0e:	|  |   sub.l d0,d1
    ee10:	|  |   move.l d1,d0
    ee12:	|  |   lsr.l #1,d0
    ee14:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    ee18:	|  \-> move.l 20(sp),16(sp)
    ee1e:	|      move.l 1add0 <SysBase>,d0
    ee24:	|      movea.l d0,a6
    ee26:	|      movea.l 16(sp),a1
    ee2a:	|      jsr -690(a6)
    return BR_CONTINUE;
    ee2e:	|      moveq #2,d0
}
    ee30:	\----> move.l (sp)+,d2
    ee32:	       movea.l (sp)+,a6
    ee34:	       lea 16(sp),sp
    ee38:	       rts

0000ee3a <builtIn_anim>:

builtIn(anim)
{
    ee3a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    ee3e:	       moveq #1,d0
    ee40:	       cmp.l 16(sp),d0
    ee44:	   /-- blt.s ee5a <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    ee46:	   |   pea 17df9 <PutChar+0x1ba1>
    ee4c:	   |   jsr 15784 <KPrintF>
    ee52:	   |   addq.l #4,sp
		return BR_ERROR;
    ee54:	   |   moveq #1,d0
    ee56:	/--|-- bra.w eee8 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    ee5a:	|  \-> moveq #24,d1
    ee5c:	|      add.l 20(sp),d1
    ee60:	|      move.l 16(sp),d0
    ee64:	|      subq.l #1,d0
    ee66:	|      move.l d1,-(sp)
    ee68:	|      move.l d0,-(sp)
    ee6a:	|      jsr 8660 <createPersonaAnim>
    ee70:	|      addq.l #8,sp
    ee72:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee76:	|      movea.l 20(sp),a0
    ee7a:	|      move.l 24(a0),d0
    ee7e:	|      move.l d0,-(sp)
    ee80:	|      pea 5 <_start+0x5>
    ee84:	|      lea 8(sp),a0
    ee88:	|      move.l a0,-(sp)
    ee8a:	|      jsr 135b8 <getValueType>
    ee90:	|      lea 12(sp),sp
    ee94:	|      tst.w d0
    ee96:	|  /-- bne.s ee9c <builtIn_anim+0x62>
    ee98:	|  |   moveq #1,d0
    ee9a:	+--|-- bra.s eee8 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    ee9c:	|  \-> moveq #24,d0
    ee9e:	|      add.l 20(sp),d0
    eea2:	|      move.l d0,-(sp)
    eea4:	|      jsr 13f3c <trimStack>
    eeaa:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    eeac:	|      move.l (sp),d0
    eeae:	|      move.l d0,-(sp)
    eeb0:	|      jsr 144e6 <loadBankForAnim>
    eeb6:	|      addq.l #4,sp
    eeb8:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    eebc:	|  /-- bne.s eec2 <builtIn_anim+0x88>
    eebe:	|  |   moveq #1,d0
    eec0:	+--|-- bra.s eee8 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    eec2:	|  \-> move.l 4(sp),-(sp)
    eec6:	|      move.l 12(sp),-(sp)
    eeca:	|      jsr a47a <setBankFile>
    eed0:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    eed2:	|      moveq #28,d0
    eed4:	|      add.l 20(sp),d0
    eed8:	|      move.l 8(sp),-(sp)
    eedc:	|      move.l d0,-(sp)
    eede:	|      jsr 13e66 <newAnimationVariable>
    eee4:	|      addq.l #8,sp
	return BR_CONTINUE;
    eee6:	|      moveq #2,d0
}
    eee8:	\----> lea 12(sp),sp
    eeec:	       rts

0000eeee <builtIn_costume>:

builtIn(costume)
{
    eeee:	          lea -32(sp),sp
    eef2:	          move.l a6,-(sp)
    eef4:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    eef6:	          moveq #8,d0
    eef8:	          move.l d0,32(sp)
    eefc:	          clr.l 28(sp)
    ef00:	          move.l 1add0 <SysBase>,d0
    ef06:	          movea.l d0,a6
    ef08:	          move.l 32(sp),d0
    ef0c:	          move.l 28(sp),d1
    ef10:	          jsr -684(a6)
    ef14:	          move.l d0,24(sp)
    ef18:	          move.l 24(sp),d0
    ef1c:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ef20:	      /-- bne.s ef28 <builtIn_costume+0x3a>
    ef22:	      |   moveq #1,d0
    ef24:	/-----|-- bra.w f010 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ef28:	|     \-> move.l 44(sp),d0
    ef2c:	|         pea 3 <_start+0x3>
    ef30:	|         move.l d0,-(sp)
    ef32:	|         jsr 161c0 <__divsi3>
    ef38:	|         addq.l #8,sp
    ef3a:	|         movea.l 20(sp),a0
    ef3e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ef42:	|         tst.l 44(sp)
    ef46:	|     /-- beq.s ef5c <builtIn_costume+0x6e>
    ef48:	|     |   movea.l 20(sp),a0
    ef4c:	|     |   move.l 4(a0),d1
    ef50:	|     |   move.l d1,d0
    ef52:	|     |   add.l d0,d0
    ef54:	|     |   add.l d1,d0
    ef56:	|     |   cmp.l 44(sp),d0
    ef5a:	|  /--|-- beq.s ef70 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ef5c:	|  |  \-> pea 17e33 <PutChar+0x1bdb>
    ef62:	|  |      jsr 15784 <KPrintF>
    ef68:	|  |      addq.l #4,sp
        return BR_ERROR;
    ef6a:	|  |      moveq #1,d0
    ef6c:	+--|----- bra.w f010 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    ef70:	|  \----> move.l 44(sp),d0
    ef74:	|         add.l d0,d0
    ef76:	|         add.l d0,d0
    ef78:	|         move.l d0,16(sp)
    ef7c:	|         clr.l 12(sp)
    ef80:	|         move.l 1add0 <SysBase>,d0
    ef86:	|         movea.l d0,a6
    ef88:	|         move.l 16(sp),d0
    ef8c:	|         move.l 12(sp),d1
    ef90:	|         jsr -684(a6)
    ef94:	|         move.l d0,8(sp)
    ef98:	|         move.l 8(sp),d0
    ef9c:	|         movea.l 20(sp),a0
    efa0:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    efa2:	|         movea.l 20(sp),a0
    efa6:	|         move.l (a0),d0
    efa8:	|     /-- bne.s efae <builtIn_costume+0xc0>
    efaa:	|     |   moveq #1,d0
    efac:	+-----|-- bra.s f010 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    efae:	|     \-> move.l 44(sp),d0
    efb2:	|         subq.l #1,d0
    efb4:	|         move.l d0,36(sp)
    efb8:	|     /-- bra.s eff4 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    efba:	|  /--|-> movea.l 48(sp),a0
    efbe:	|  |  |   move.l 24(a0),d0
    efc2:	|  |  |   movea.l 20(sp),a0
    efc6:	|  |  |   movea.l (a0),a0
    efc8:	|  |  |   move.l 36(sp),d1
    efcc:	|  |  |   add.l d1,d1
    efce:	|  |  |   add.l d1,d1
    efd0:	|  |  |   lea (0,a0,d1.l),a2
    efd4:	|  |  |   move.l d0,-(sp)
    efd6:	|  |  |   jsr 13a90 <getAnimationFromVar>
    efdc:	|  |  |   addq.l #4,sp
    efde:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    efe0:	|  |  |   moveq #24,d0
    efe2:	|  |  |   add.l 48(sp),d0
    efe6:	|  |  |   move.l d0,-(sp)
    efe8:	|  |  |   jsr 13f3c <trimStack>
    efee:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    eff0:	|  |  |   subq.l #1,36(sp)
    eff4:	|  |  \-> tst.l 36(sp)
    eff8:	|  \----- bge.s efba <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    effa:	|         moveq #28,d0
    effc:	|         add.l 48(sp),d0
    f000:	|         move.l 20(sp),-(sp)
    f004:	|         move.l d0,-(sp)
    f006:	|         jsr 13e88 <newCostumeVariable>
    f00c:	|         addq.l #8,sp
    return BR_CONTINUE;
    f00e:	|         moveq #2,d0
}
    f010:	\-------> movea.l (sp)+,a2
    f012:	          movea.l (sp)+,a6
    f014:	          lea 32(sp),sp
    f018:	          rts

0000f01a <builtIn_launch>:

builtIn(launch)
{
    f01a:	          lea -20(sp),sp
    f01e:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f020:	          movea.l 32(sp),a0
    f024:	          move.l 24(a0),d0
    f028:	          move.l d0,-(sp)
    f02a:	          jsr 13b8e <getTextFromAnyVar>
    f030:	          addq.l #4,sp
    f032:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f036:	      /-- bne.s f03e <builtIn_launch+0x24>
    f038:	      |   moveq #1,d0
    f03a:	/-----|-- bra.w f16c <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f03e:	|     \-> move.l 20(sp),-(sp)
    f042:	|         jsr 2fe <encodeFilename>
    f048:	|         addq.l #4,sp
    f04a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f04e:	|         moveq #24,d0
    f050:	|         add.l 32(sp),d0
    f054:	|         move.l d0,-(sp)
    f056:	|         jsr 13f3c <trimStack>
    f05c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f05e:	|         movea.l 20(sp),a0
    f062:	|         move.b (a0),d0
    f064:	|         cmpi.b #104,d0
    f068:	|  /----- bne.s f0d2 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f06a:	|  |      movea.l 20(sp),a0
    f06e:	|  |      addq.l #1,a0
    f070:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f072:	|  |      cmpi.b #116,d0
    f076:	|  +----- bne.s f0d2 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f078:	|  |      movea.l 20(sp),a0
    f07c:	|  |      addq.l #2,a0
    f07e:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f080:	|  |      cmpi.b #116,d0
    f084:	|  +----- bne.s f0d2 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f086:	|  |      movea.l 20(sp),a0
    f08a:	|  |      addq.l #3,a0
    f08c:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f08e:	|  |      cmpi.b #112,d0
    f092:	|  +----- bne.s f0d2 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f094:	|  |      movea.l 20(sp),a0
    f098:	|  |      addq.l #4,a0
    f09a:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f09c:	|  |      cmpi.b #58,d0
    f0a0:	|  |  /-- beq.s f0be <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f0a2:	|  |  |   movea.l 20(sp),a0
    f0a6:	|  |  |   addq.l #4,a0
    f0a8:	|  |  |   move.b (a0),d0
    f0aa:	|  |  |   cmpi.b #115,d0
    f0ae:	|  +--|-- bne.s f0d2 <builtIn_launch+0xb8>
    f0b0:	|  |  |   movea.l 20(sp),a0
    f0b4:	|  |  |   addq.l #5,a0
    f0b6:	|  |  |   move.b (a0),d0
    f0b8:	|  |  |   cmpi.b #58,d0
    f0bc:	|  +--|-- bne.s f0d2 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f0be:	|  |  \-> move.l 20(sp),-(sp)
    f0c2:	|  |      jsr b8 <copyString>
    f0c8:	|  |      addq.l #4,sp
    f0ca:	|  |      move.l d0,1aeea <launchMe>
    f0d0:	|  |  /-- bra.s f124 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f0d2:	|  \--|-> move.l 1ad38 <gamePath>,d0
    f0d8:	|     |   pea 17e7e <PutChar+0x1c26>
    f0de:	|     |   move.l d0,-(sp)
    f0e0:	|     |   jsr 12ae4 <joinStrings>
    f0e6:	|     |   addq.l #8,sp
    f0e8:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f0ec:	|     |   move.l 16(sp),-(sp)
    f0f0:	|     |   move.l 16(sp),-(sp)
    f0f4:	|     |   jsr 12ae4 <joinStrings>
    f0fa:	|     |   addq.l #8,sp
    f0fc:	|     |   move.l d0,1aeea <launchMe>
        FreeVec(newText);
    f102:	|     |   move.l 16(sp),8(sp)
    f108:	|     |   move.l 1add0 <SysBase>,d0
    f10e:	|     |   movea.l d0,a6
    f110:	|     |   movea.l 8(sp),a1
    f114:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f118:	|     |   move.l 1aeea <launchMe>,d0
    f11e:	|     +-- bne.s f124 <builtIn_launch+0x10a>
    f120:	|     |   moveq #1,d0
    f122:	+-----|-- bra.s f16c <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f124:	|     \-> move.l 20(sp),4(sp)
    f12a:	|         move.l 1add0 <SysBase>,d0
    f130:	|         movea.l d0,a6
    f132:	|         movea.l 4(sp),a1
    f136:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f13a:	|         clr.l -(sp)
    f13c:	|         jsr 2f82 <setGraphicsWindow>
    f142:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f144:	|         moveq #28,d0
    f146:	|         add.l 32(sp),d0
    f14a:	|         pea 1 <_start+0x1>
    f14e:	|         pea 1 <_start+0x1>
    f152:	|         move.l d0,-(sp)
    f154:	|         jsr 13eaa <setVariable>
    f15a:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f15e:	|         moveq #28,d0
    f160:	|         add.l 32(sp),d0
    f164:	|         move.l d0,1aeee <launchResult>

    return BR_KEEP_AND_PAUSE;
    f16a:	|         moveq #0,d0
}
    f16c:	\-------> movea.l (sp)+,a6
    f16e:	          lea 20(sp),sp
    f172:	          rts

0000f174 <builtIn_pause>:

builtIn(pause)
{
    f174:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f176:	       movea.l 12(sp),a0
    f17a:	       move.l 24(a0),d0
    f17e:	       move.l d0,-(sp)
    f180:	       pea 1 <_start+0x1>
    f184:	       move.l sp,d0
    f186:	       addq.l #8,d0
    f188:	       move.l d0,-(sp)
    f18a:	       jsr 135b8 <getValueType>
    f190:	       lea 12(sp),sp
    f194:	       tst.w d0
    f196:	   /-- bne.s f19c <builtIn_pause+0x28>
    f198:	   |   moveq #1,d0
    f19a:	/--|-- bra.s f1ca <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f19c:	|  \-> moveq #24,d0
    f19e:	|      add.l 12(sp),d0
    f1a2:	|      move.l d0,-(sp)
    f1a4:	|      jsr 13f3c <trimStack>
    f1aa:	|      addq.l #4,sp
	if (theTime > 0) {
    f1ac:	|      move.l (sp),d0
    f1ae:	|  /-- ble.s f1c8 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f1b0:	|  |   move.l (sp),d0
    f1b2:	|  |   subq.l #1,d0
    f1b4:	|  |   movea.l 12(sp),a0
    f1b8:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f1bc:	|  |   movea.l 12(sp),a0
    f1c0:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f1c4:	|  |   moveq #0,d0
    f1c6:	+--|-- bra.s f1ca <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f1c8:	|  \-> moveq #2,d0
}
    f1ca:	\----> addq.l #4,sp
    f1cc:	       rts

0000f1ce <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f1ce:	jsr 36e4 <completeTimers>
	return BR_CONTINUE;
    f1d4:	moveq #2,d0
}
    f1d6:	rts

0000f1d8 <builtIn_callEvent>:

builtIn(callEvent)
{
    f1d8:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1dc:	       movea.l 20(sp),a0
    f1e0:	       move.l 24(a0),d0
    f1e4:	       move.l d0,-(sp)
    f1e6:	       pea 7 <_start+0x7>
    f1ea:	       lea 8(sp),a0
    f1ee:	       move.l a0,-(sp)
    f1f0:	       jsr 135b8 <getValueType>
    f1f6:	       lea 12(sp),sp
    f1fa:	       tst.w d0
    f1fc:	   /-- bne.s f204 <builtIn_callEvent+0x2c>
    f1fe:	   |   moveq #1,d0
    f200:	/--|-- bra.w f29a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f204:	|  \-> moveq #24,d0
    f206:	|      add.l 20(sp),d0
    f20a:	|      move.l d0,-(sp)
    f20c:	|      jsr 13f3c <trimStack>
    f212:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f214:	|      movea.l 20(sp),a0
    f218:	|      move.l 24(a0),d0
    f21c:	|      move.l d0,-(sp)
    f21e:	|      pea 7 <_start+0x7>
    f222:	|      moveq #12,d0
    f224:	|      add.l sp,d0
    f226:	|      move.l d0,-(sp)
    f228:	|      jsr 135b8 <getValueType>
    f22e:	|      lea 12(sp),sp
    f232:	|      tst.w d0
    f234:	|  /-- bne.s f23a <builtIn_callEvent+0x62>
    f236:	|  |   moveq #1,d0
    f238:	+--|-- bra.s f29a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f23a:	|  \-> moveq #24,d0
    f23c:	|      add.l 20(sp),d0
    f240:	|      move.l d0,-(sp)
    f242:	|      jsr 13f3c <trimStack>
    f248:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f24a:	|      move.l (sp),d1
    f24c:	|      move.l 4(sp),d0
    f250:	|      move.l d1,-(sp)
    f252:	|      move.l d0,-(sp)
    f254:	|      jsr c422 <getCombinationFunction>
    f25a:	|      addq.l #8,sp
    f25c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f260:	|  /-- beq.s f280 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f262:	|  |   moveq #28,d0
    f264:	|  |   add.l 20(sp),d0
    f268:	|  |   move.l 8(sp),-(sp)
    f26c:	|  |   pea 2 <_start+0x2>
    f270:	|  |   move.l d0,-(sp)
    f272:	|  |   jsr 13eaa <setVariable>
    f278:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f27c:	|  |   moveq #4,d0
    f27e:	+--|-- bra.s f29a <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f280:	|  \-> moveq #28,d0
    f282:	|      add.l 20(sp),d0
    f286:	|      clr.l -(sp)
    f288:	|      pea 1 <_start+0x1>
    f28c:	|      move.l d0,-(sp)
    f28e:	|      jsr 13eaa <setVariable>
    f294:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f298:	|      moveq #2,d0
}
    f29a:	\----> lea 12(sp),sp
    f29e:	       rts

0000f2a0 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f2a0:	move.w #1,1aefa <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f2a8:	moveq #2,d0
}
    f2aa:	rts

0000f2ac <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f2ac:	moveq #24,d0
    f2ae:	add.l 8(sp),d0
    f2b2:	move.l d0,-(sp)
    f2b4:	jsr 13f3c <trimStack>
    f2ba:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f2bc:	pea 17e80 <PutChar+0x1c28>
    f2c2:	jsr 15784 <KPrintF>
    f2c8:	addq.l #4,sp
	return BR_CONTINUE;
    f2ca:	moveq #2,d0
}
    f2cc:	rts

0000f2ce <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f2ce:	pea 17e80 <PutChar+0x1c28>
    f2d4:	jsr 15784 <KPrintF>
    f2da:	addq.l #4,sp
	return BR_CONTINUE;
    f2dc:	moveq #2,d0
}
    f2de:	rts

0000f2e0 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f2e0:	pea 17e80 <PutChar+0x1c28>
    f2e6:	jsr 15784 <KPrintF>
    f2ec:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f2ee:	moveq #2,d0
}
    f2f0:	rts

0000f2f2 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f2f2:	pea 17e80 <PutChar+0x1c28>
    f2f8:	jsr 15784 <KPrintF>
    f2fe:	addq.l #4,sp
	return BR_CONTINUE;
    f300:	moveq #2,d0
}
    f302:	rts

0000f304 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f304:	pea 17e80 <PutChar+0x1c28>
    f30a:	jsr 15784 <KPrintF>
    f310:	addq.l #4,sp
	return BR_CONTINUE;
    f312:	moveq #2,d0
}
    f314:	rts

0000f316 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f316:	pea 17e80 <PutChar+0x1c28>
    f31c:	jsr 15784 <KPrintF>
    f322:	addq.l #4,sp
	return BR_CONTINUE;
    f324:	moveq #2,d0
}
    f326:	rts

0000f328 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f328:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f32c:	       movea.l 20(sp),a0
    f330:	       move.l 24(a0),d0
    f334:	       move.l d0,-(sp)
    f336:	       pea 1 <_start+0x1>
    f33a:	       moveq #16,d0
    f33c:	       add.l sp,d0
    f33e:	       move.l d0,-(sp)
    f340:	       jsr 135b8 <getValueType>
    f346:	       lea 12(sp),sp
    f34a:	       tst.w d0
    f34c:	   /-- bne.s f354 <builtIn_startMusic+0x2c>
    f34e:	   |   moveq #1,d0
    f350:	/--|-- bra.w f3f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f354:	|  \-> moveq #24,d0
    f356:	|      add.l 20(sp),d0
    f35a:	|      move.l d0,-(sp)
    f35c:	|      jsr 13f3c <trimStack>
    f362:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f364:	|      movea.l 20(sp),a0
    f368:	|      move.l 24(a0),d0
    f36c:	|      move.l d0,-(sp)
    f36e:	|      pea 1 <_start+0x1>
    f372:	|      moveq #12,d0
    f374:	|      add.l sp,d0
    f376:	|      move.l d0,-(sp)
    f378:	|      jsr 135b8 <getValueType>
    f37e:	|      lea 12(sp),sp
    f382:	|      tst.w d0
    f384:	|  /-- bne.s f38a <builtIn_startMusic+0x62>
    f386:	|  |   moveq #1,d0
    f388:	+--|-- bra.s f3f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f38a:	|  \-> moveq #24,d0
    f38c:	|      add.l 20(sp),d0
    f390:	|      move.l d0,-(sp)
    f392:	|      jsr 13f3c <trimStack>
    f398:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f39a:	|      movea.l 20(sp),a0
    f39e:	|      move.l 24(a0),d0
    f3a2:	|      move.l d0,-(sp)
    f3a4:	|      pea 5 <_start+0x5>
    f3a8:	|      lea 8(sp),a0
    f3ac:	|      move.l a0,-(sp)
    f3ae:	|      jsr 135b8 <getValueType>
    f3b4:	|      lea 12(sp),sp
    f3b8:	|      tst.w d0
    f3ba:	|  /-- bne.s f3c0 <builtIn_startMusic+0x98>
    f3bc:	|  |   moveq #1,d0
    f3be:	+--|-- bra.s f3f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f3c0:	|  \-> moveq #24,d0
    f3c2:	|      add.l 20(sp),d0
    f3c6:	|      move.l d0,-(sp)
    f3c8:	|      jsr 13f3c <trimStack>
    f3ce:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f3d0:	|      movea.l 8(sp),a0
    f3d4:	|      move.l 4(sp),d1
    f3d8:	|      move.l (sp),d0
    f3da:	|      move.l a0,-(sp)
    f3dc:	|      move.l d1,-(sp)
    f3de:	|      move.l d0,-(sp)
    f3e0:	|      jsr c02e <playMOD>
    f3e6:	|      lea 12(sp),sp
    f3ea:	|      tst.w d0
    f3ec:	|  /-- bne.s f3f2 <builtIn_startMusic+0xca>
    f3ee:	|  |   moveq #2,d0
    f3f0:	+--|-- bra.s f3f4 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f3f2:	|  \-> moveq #2,d0
}
    f3f4:	\----> lea 12(sp),sp
    f3f8:	       rts

0000f3fa <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f3fa:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3fc:	       movea.l 12(sp),a0
    f400:	       move.l 24(a0),d0
    f404:	       move.l d0,-(sp)
    f406:	       pea 1 <_start+0x1>
    f40a:	       move.l sp,d0
    f40c:	       addq.l #8,d0
    f40e:	       move.l d0,-(sp)
    f410:	       jsr 135b8 <getValueType>
    f416:	       lea 12(sp),sp
    f41a:	       tst.w d0
    f41c:	   /-- bne.s f422 <builtIn_stopMusic+0x28>
    f41e:	   |   moveq #1,d0
    f420:	/--|-- bra.s f440 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f422:	|  \-> moveq #24,d0
    f424:	|      add.l 12(sp),d0
    f428:	|      move.l d0,-(sp)
    f42a:	|      jsr 13f3c <trimStack>
    f430:	|      addq.l #4,sp
	stopMOD (v);
    f432:	|      move.l (sp),d0
    f434:	|      move.l d0,-(sp)
    f436:	|      jsr c0ca <stopMOD>
    f43c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f43e:	|      moveq #2,d0
}
    f440:	\----> addq.l #4,sp
    f442:	       rts

0000f444 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f444:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f446:	       movea.l 16(sp),a0
    f44a:	       move.l 24(a0),d0
    f44e:	       move.l d0,-(sp)
    f450:	       pea 1 <_start+0x1>
    f454:	       move.l sp,d0
    f456:	       addq.l #8,d0
    f458:	       move.l d0,-(sp)
    f45a:	       jsr 135b8 <getValueType>
    f460:	       lea 12(sp),sp
    f464:	       tst.w d0
    f466:	   /-- bne.s f46c <builtIn_setMusicVolume+0x28>
    f468:	   |   moveq #1,d0
    f46a:	/--|-- bra.s f4c6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f46c:	|  \-> moveq #24,d0
    f46e:	|      add.l 16(sp),d0
    f472:	|      move.l d0,-(sp)
    f474:	|      jsr 13f3c <trimStack>
    f47a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f47c:	|      movea.l 16(sp),a0
    f480:	|      move.l 24(a0),d0
    f484:	|      move.l d0,-(sp)
    f486:	|      pea 1 <_start+0x1>
    f48a:	|      moveq #12,d0
    f48c:	|      add.l sp,d0
    f48e:	|      move.l d0,-(sp)
    f490:	|      jsr 135b8 <getValueType>
    f496:	|      lea 12(sp),sp
    f49a:	|      tst.w d0
    f49c:	|  /-- bne.s f4a2 <builtIn_setMusicVolume+0x5e>
    f49e:	|  |   moveq #1,d0
    f4a0:	+--|-- bra.s f4c6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f4a2:	|  \-> moveq #24,d0
    f4a4:	|      add.l 16(sp),d0
    f4a8:	|      move.l d0,-(sp)
    f4aa:	|      jsr 13f3c <trimStack>
    f4b0:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f4b2:	|      move.l (sp),d1
    f4b4:	|      move.l 4(sp),d0
    f4b8:	|      move.l d1,-(sp)
    f4ba:	|      move.l d0,-(sp)
    f4bc:	|      jsr c0b0 <setMusicVolume>
    f4c2:	|      addq.l #8,sp
	return BR_CONTINUE;
    f4c4:	|      moveq #2,d0
}
    f4c6:	\----> addq.l #8,sp
    f4c8:	       rts

0000f4ca <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f4ca:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4cc:	       movea.l 12(sp),a0
    f4d0:	       move.l 24(a0),d0
    f4d4:	       move.l d0,-(sp)
    f4d6:	       pea 1 <_start+0x1>
    f4da:	       move.l sp,d0
    f4dc:	       addq.l #8,d0
    f4de:	       move.l d0,-(sp)
    f4e0:	       jsr 135b8 <getValueType>
    f4e6:	       lea 12(sp),sp
    f4ea:	       tst.w d0
    f4ec:	   /-- bne.s f4f2 <builtIn_setDefaultMusicVolume+0x28>
    f4ee:	   |   moveq #1,d0
    f4f0:	/--|-- bra.s f510 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f4f2:	|  \-> moveq #24,d0
    f4f4:	|      add.l 12(sp),d0
    f4f8:	|      move.l d0,-(sp)
    f4fa:	|      jsr 13f3c <trimStack>
    f500:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f502:	|      move.l (sp),d0
    f504:	|      move.l d0,-(sp)
    f506:	|      jsr c094 <setDefaultMusicVolume>
    f50c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f50e:	|      moveq #2,d0
}
    f510:	\----> addq.l #4,sp
    f512:	       rts

0000f514 <builtIn_playSound>:

builtIn(playSound)
{
    f514:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f516:	       movea.l 12(sp),a0
    f51a:	       move.l 24(a0),d0
    f51e:	       move.l d0,-(sp)
    f520:	       pea 5 <_start+0x5>
    f524:	       move.l sp,d0
    f526:	       addq.l #8,d0
    f528:	       move.l d0,-(sp)
    f52a:	       jsr 135b8 <getValueType>
    f530:	       lea 12(sp),sp
    f534:	       tst.w d0
    f536:	   /-- bne.s f53c <builtIn_playSound+0x28>
    f538:	   |   moveq #1,d0
    f53a:	/--|-- bra.s f564 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f53c:	|  \-> moveq #24,d0
    f53e:	|      add.l 12(sp),d0
    f542:	|      move.l d0,-(sp)
    f544:	|      jsr 13f3c <trimStack>
    f54a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f54c:	|      move.l (sp),d0
    f54e:	|      clr.l -(sp)
    f550:	|      move.l d0,-(sp)
    f552:	|      jsr c0b8 <startSound>
    f558:	|      addq.l #8,sp
    f55a:	|      tst.w d0
    f55c:	|  /-- bne.s f562 <builtIn_playSound+0x4e>
    f55e:	|  |   moveq #2,d0
    f560:	+--|-- bra.s f564 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f562:	|  \-> moveq #2,d0
}
    f564:	\----> addq.l #4,sp
    f566:	       rts

0000f568 <builtIn_loopSound>:

builtIn(loopSound)
{
    f568:	             lea -28(sp),sp
    f56c:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f56e:	             tst.l 36(sp)
    f572:	         /-- bgt.s f588 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f574:	         |   pea 17ea3 <PutChar+0x1c4b>
    f57a:	         |   jsr 15784 <KPrintF>
    f580:	         |   addq.l #4,sp
		return BR_ERROR;
    f582:	         |   moveq #1,d0
    f584:	/--------|-- bra.w f744 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f588:	|        \-> moveq #1,d0
    f58a:	|            cmp.l 36(sp),d0
    f58e:	|     /----- blt.s f5ea <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f590:	|     |      movea.l 40(sp),a0
    f594:	|     |      move.l 24(a0),d0
    f598:	|     |      move.l d0,-(sp)
    f59a:	|     |      pea 5 <_start+0x5>
    f59e:	|     |      lea 16(sp),a0
    f5a2:	|     |      move.l a0,-(sp)
    f5a4:	|     |      jsr 135b8 <getValueType>
    f5aa:	|     |      lea 12(sp),sp
    f5ae:	|     |      tst.w d0
    f5b0:	|     |  /-- bne.s f5b8 <builtIn_loopSound+0x50>
    f5b2:	|     |  |   moveq #1,d0
    f5b4:	+-----|--|-- bra.w f744 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f5b8:	|     |  \-> moveq #24,d0
    f5ba:	|     |      add.l 40(sp),d0
    f5be:	|     |      move.l d0,-(sp)
    f5c0:	|     |      jsr 13f3c <trimStack>
    f5c6:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f5c8:	|     |      move.l 8(sp),d0
    f5cc:	|     |      pea 1 <_start+0x1>
    f5d0:	|     |      move.l d0,-(sp)
    f5d2:	|     |      jsr c0b8 <startSound>
    f5d8:	|     |      addq.l #8,sp
    f5da:	|     |      tst.w d0
    f5dc:	|     |  /-- bne.s f5e4 <builtIn_loopSound+0x7c>
    f5de:	|     |  |   moveq #2,d0
    f5e0:	+-----|--|-- bra.w f744 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f5e4:	|     |  \-> moveq #2,d0
    f5e6:	+-----|----- bra.w f744 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f5ea:	|     \----> moveq #2,d1
    f5ec:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f5f0:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f5f4:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f5f8:	|            movea.l 40(sp),a0
    f5fc:	|            movea.l 24(a0),a0
    f600:	|            move.l (a0),d0
    f602:	|            moveq #5,d1
    f604:	|            cmp.l d0,d1
    f606:	|  /-------- beq.w f6de <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f60a:	|  |         movea.l 40(sp),a0
    f60e:	|  |         move.l 24(a0),d0
    f612:	|  |         move.l d0,-(sp)
    f614:	|  |         pea 1 <_start+0x1>
    f618:	|  |         lea 12(sp),a0
    f61c:	|  |         move.l a0,-(sp)
    f61e:	|  |         jsr 135b8 <getValueType>
    f624:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f628:	|  |         moveq #24,d0
    f62a:	|  |         add.l 40(sp),d0
    f62e:	|  |         move.l d0,-(sp)
    f630:	|  |         jsr 13f3c <trimStack>
    f636:	|  |         addq.l #4,sp
			numParams--;
    f638:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f63c:	|  +-------- bra.w f6de <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f640:	|  |  /----> movea.l 40(sp),a0
    f644:	|  |  |      move.l 24(a0),d0
    f648:	|  |  |      move.l d0,-(sp)
    f64a:	|  |  |      pea 5 <_start+0x5>
    f64e:	|  |  |      lea 16(sp),a0
    f652:	|  |  |      move.l a0,-(sp)
    f654:	|  |  |      jsr 135b8 <getValueType>
    f65a:	|  |  |      lea 12(sp),sp
    f65e:	|  |  |      tst.w d0
    f660:	|  |  |  /-- bne.s f676 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f662:	|  |  |  |   pea 17ee1 <PutChar+0x1c89>
    f668:	|  |  |  |   jsr 15784 <KPrintF>
    f66e:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    f670:	|  |  |  |   moveq #1,d0
    f672:	+--|--|--|-- bra.w f744 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    f676:	|  |  |  \-> moveq #20,d0
    f678:	|  |  |      move.l d0,20(sp)
    f67c:	|  |  |      clr.l 16(sp)
    f680:	|  |  |      move.l 1add0 <SysBase>,d0
    f686:	|  |  |      movea.l d0,a6
    f688:	|  |  |      move.l 20(sp),d0
    f68c:	|  |  |      move.l 16(sp),d1
    f690:	|  |  |      jsr -684(a6)
    f694:	|  |  |      move.l d0,12(sp)
    f698:	|  |  |      move.l 12(sp),d0
    f69c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    f6a0:	|  |  |  /-- bne.s f6a8 <builtIn_loopSound+0x140>
    f6a2:	|  |  |  |   moveq #1,d0
    f6a4:	+--|--|--|-- bra.w f744 <builtIn_loopSound+0x1dc>

			s->next = old;
    f6a8:	|  |  |  \-> movea.l 28(sp),a0
    f6ac:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    f6b2:	|  |  |      movea.l 28(sp),a0
    f6b6:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    f6ba:	|  |  |      move.l 8(sp),d0
    f6be:	|  |  |      movea.l 28(sp),a0
    f6c2:	|  |  |      move.l d0,(a0)
			old = s;
    f6c4:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    f6ca:	|  |  |      moveq #24,d0
    f6cc:	|  |  |      add.l 40(sp),d0
    f6d0:	|  |  |      move.l d0,-(sp)
    f6d2:	|  |  |      jsr 13f3c <trimStack>
    f6d8:	|  |  |      addq.l #4,sp
			numParams--;
    f6da:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    f6de:	|  \--|----> tst.l 36(sp)
    f6e2:	|     \----- bne.w f640 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    f6e6:	|        /-- bra.s f6f2 <builtIn_loopSound+0x18a>
    f6e8:	|     /--|-> movea.l 28(sp),a0
    f6ec:	|     |  |   move.l 4(a0),28(sp)
    f6f2:	|     |  \-> movea.l 28(sp),a0
    f6f6:	|     |      move.l 4(a0),d0
    f6fa:	|     \----- bne.s f6e8 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    f6fc:	|            move.l 4(sp),d0
    f700:	|            moveq #1,d1
    f702:	|            cmp.l d0,d1
    f704:	|     /----- bge.s f71c <builtIn_loopSound+0x1b4>
			s->next = old;
    f706:	|     |      movea.l 28(sp),a0
    f70a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    f710:	|     |      movea.l 24(sp),a0
    f714:	|     |      move.l 28(sp),8(a0)
    f71a:	|     |  /-- bra.s f72c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    f71c:	|     \--|-> move.l 4(sp),d0
    f720:	|        +-- beq.s f72c <builtIn_loopSound+0x1c4>
			s->next = s;
    f722:	|        |   movea.l 28(sp),a0
    f726:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    f72c:	|        \-> movea.l 24(sp),a0
    f730:	|            moveq #-1,d0
    f732:	|            move.l d0,16(a0)
		playSoundList(old);
    f736:	|            move.l 24(sp),-(sp)
    f73a:	|            jsr c032 <playSoundList>
    f740:	|            addq.l #4,sp
		return BR_CONTINUE;
    f742:	|            moveq #2,d0
	}
}
    f744:	\----------> movea.l (sp)+,a6
    f746:	             lea 28(sp),sp
    f74a:	             rts

0000f74c <builtIn_stopSound>:

builtIn(stopSound)
{
    f74c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f74e:	       movea.l 12(sp),a0
    f752:	       move.l 24(a0),d0
    f756:	       move.l d0,-(sp)
    f758:	       pea 5 <_start+0x5>
    f75c:	       move.l sp,d0
    f75e:	       addq.l #8,d0
    f760:	       move.l d0,-(sp)
    f762:	       jsr 135b8 <getValueType>
    f768:	       lea 12(sp),sp
    f76c:	       tst.w d0
    f76e:	   /-- bne.s f774 <builtIn_stopSound+0x28>
    f770:	   |   moveq #1,d0
    f772:	/--|-- bra.s f792 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    f774:	|  \-> moveq #24,d0
    f776:	|      add.l 12(sp),d0
    f77a:	|      move.l d0,-(sp)
    f77c:	|      jsr 13f3c <trimStack>
    f782:	|      addq.l #4,sp
	huntKillSound (v);
    f784:	|      move.l (sp),d0
    f786:	|      move.l d0,-(sp)
    f788:	|      jsr c02a <huntKillSound>
    f78e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f790:	|      moveq #2,d0
}
    f792:	\----> addq.l #4,sp
    f794:	       rts

0000f796 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    f796:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f798:	       movea.l 12(sp),a0
    f79c:	       move.l 24(a0),d0
    f7a0:	       move.l d0,-(sp)
    f7a2:	       pea 1 <_start+0x1>
    f7a6:	       move.l sp,d0
    f7a8:	       addq.l #8,d0
    f7aa:	       move.l d0,-(sp)
    f7ac:	       jsr 135b8 <getValueType>
    f7b2:	       lea 12(sp),sp
    f7b6:	       tst.w d0
    f7b8:	   /-- bne.s f7be <builtIn_setDefaultSoundVolume+0x28>
    f7ba:	   |   moveq #1,d0
    f7bc:	/--|-- bra.s f7dc <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    f7be:	|  \-> moveq #24,d0
    f7c0:	|      add.l 12(sp),d0
    f7c4:	|      move.l d0,-(sp)
    f7c6:	|      jsr 13f3c <trimStack>
    f7cc:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    f7ce:	|      move.l (sp),d0
    f7d0:	|      move.l d0,-(sp)
    f7d2:	|      jsr c0a0 <setDefaultSoundVolume>
    f7d8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7da:	|      moveq #2,d0
}
    f7dc:	\----> addq.l #4,sp
    f7de:	       rts

0000f7e0 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    f7e0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7e2:	       movea.l 16(sp),a0
    f7e6:	       move.l 24(a0),d0
    f7ea:	       move.l d0,-(sp)
    f7ec:	       pea 1 <_start+0x1>
    f7f0:	       move.l sp,d0
    f7f2:	       addq.l #8,d0
    f7f4:	       move.l d0,-(sp)
    f7f6:	       jsr 135b8 <getValueType>
    f7fc:	       lea 12(sp),sp
    f800:	       tst.w d0
    f802:	   /-- bne.s f808 <builtIn_setSoundVolume+0x28>
    f804:	   |   moveq #1,d0
    f806:	/--|-- bra.s f862 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f808:	|  \-> moveq #24,d0
    f80a:	|      add.l 16(sp),d0
    f80e:	|      move.l d0,-(sp)
    f810:	|      jsr 13f3c <trimStack>
    f816:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f818:	|      movea.l 16(sp),a0
    f81c:	|      move.l 24(a0),d0
    f820:	|      move.l d0,-(sp)
    f822:	|      pea 5 <_start+0x5>
    f826:	|      moveq #12,d0
    f828:	|      add.l sp,d0
    f82a:	|      move.l d0,-(sp)
    f82c:	|      jsr 135b8 <getValueType>
    f832:	|      lea 12(sp),sp
    f836:	|      tst.w d0
    f838:	|  /-- bne.s f83e <builtIn_setSoundVolume+0x5e>
    f83a:	|  |   moveq #1,d0
    f83c:	+--|-- bra.s f862 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f83e:	|  \-> moveq #24,d0
    f840:	|      add.l 16(sp),d0
    f844:	|      move.l d0,-(sp)
    f846:	|      jsr 13f3c <trimStack>
    f84c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    f84e:	|      move.l (sp),d1
    f850:	|      move.l 4(sp),d0
    f854:	|      move.l d1,-(sp)
    f856:	|      move.l d0,-(sp)
    f858:	|      jsr c0b4 <setSoundVolume>
    f85e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f860:	|      moveq #2,d0
}
    f862:	\----> addq.l #8,sp
    f864:	       rts

0000f866 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    f866:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f86a:	       movea.l 20(sp),a0
    f86e:	       move.l 24(a0),d0
    f872:	       move.l d0,-(sp)
    f874:	       pea 1 <_start+0x1>
    f878:	       moveq #12,d0
    f87a:	       add.l sp,d0
    f87c:	       move.l d0,-(sp)
    f87e:	       jsr 135b8 <getValueType>
    f884:	       lea 12(sp),sp
    f888:	       tst.w d0
    f88a:	   /-- bne.s f892 <builtIn_setSoundLoopPoints+0x2c>
    f88c:	   |   moveq #1,d0
    f88e:	/--|-- bra.w f92a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f892:	|  \-> moveq #24,d0
    f894:	|      add.l 20(sp),d0
    f898:	|      move.l d0,-(sp)
    f89a:	|      jsr 13f3c <trimStack>
    f8a0:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8a2:	|      movea.l 20(sp),a0
    f8a6:	|      move.l 24(a0),d0
    f8aa:	|      move.l d0,-(sp)
    f8ac:	|      pea 1 <_start+0x1>
    f8b0:	|      lea 8(sp),a0
    f8b4:	|      move.l a0,-(sp)
    f8b6:	|      jsr 135b8 <getValueType>
    f8bc:	|      lea 12(sp),sp
    f8c0:	|      tst.w d0
    f8c2:	|  /-- bne.s f8c8 <builtIn_setSoundLoopPoints+0x62>
    f8c4:	|  |   moveq #1,d0
    f8c6:	+--|-- bra.s f92a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f8c8:	|  \-> moveq #24,d0
    f8ca:	|      add.l 20(sp),d0
    f8ce:	|      move.l d0,-(sp)
    f8d0:	|      jsr 13f3c <trimStack>
    f8d6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8d8:	|      movea.l 20(sp),a0
    f8dc:	|      move.l 24(a0),d0
    f8e0:	|      move.l d0,-(sp)
    f8e2:	|      pea 5 <_start+0x5>
    f8e6:	|      moveq #16,d0
    f8e8:	|      add.l sp,d0
    f8ea:	|      move.l d0,-(sp)
    f8ec:	|      jsr 135b8 <getValueType>
    f8f2:	|      lea 12(sp),sp
    f8f6:	|      tst.w d0
    f8f8:	|  /-- bne.s f8fe <builtIn_setSoundLoopPoints+0x98>
    f8fa:	|  |   moveq #1,d0
    f8fc:	+--|-- bra.s f92a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f8fe:	|  \-> moveq #24,d0
    f900:	|      add.l 20(sp),d0
    f904:	|      move.l d0,-(sp)
    f906:	|      jsr 13f3c <trimStack>
    f90c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    f90e:	|      movea.l 4(sp),a0
    f912:	|      move.l (sp),d1
    f914:	|      move.l 8(sp),d0
    f918:	|      move.l a0,-(sp)
    f91a:	|      move.l d1,-(sp)
    f91c:	|      move.l d0,-(sp)
    f91e:	|      jsr c0ac <setSoundLoop>
    f924:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f928:	|      moveq #2,d0
}
    f92a:	\----> lea 12(sp),sp
    f92e:	       rts

0000f930 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    f930:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    f932:	          movea.l 12(sp),a0
    f936:	          movea.l 24(a0),a0
    f93a:	          move.l (a0),d0
    f93c:	          moveq #5,d1
    f93e:	          cmp.l d0,d1
    f940:	/-------- bne.s f984 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    f942:	|         movea.l 12(sp),a0
    f946:	|         move.l 24(a0),d0
    f94a:	|         move.l d0,-(sp)
    f94c:	|         pea 5 <_start+0x5>
    f950:	|         move.l sp,d0
    f952:	|         addq.l #8,d0
    f954:	|         move.l d0,-(sp)
    f956:	|         jsr 135b8 <getValueType>
    f95c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    f960:	|         moveq #24,d0
    f962:	|         add.l 12(sp),d0
    f966:	|         move.l d0,-(sp)
    f968:	|         jsr 13f3c <trimStack>
    f96e:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    f970:	|         move.l (sp),d0
    f972:	|         move.l d0,-(sp)
    f974:	|         jsr 14f2e <setFloor>
    f97a:	|         addq.l #4,sp
    f97c:	|         tst.w d0
    f97e:	|  /----- bne.s f99a <builtIn_setFloor+0x6a>
    f980:	|  |      moveq #1,d0
    f982:	|  |  /-- bra.s f99c <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    f984:	\--|--|-> moveq #24,d0
    f986:	   |  |   add.l 12(sp),d0
    f98a:	   |  |   move.l d0,-(sp)
    f98c:	   |  |   jsr 13f3c <trimStack>
    f992:	   |  |   addq.l #4,sp
		setFloorNull ();
    f994:	   |  |   jsr 156a8 <setFloorNull>
	}
	return BR_CONTINUE;
    f99a:	   \--|-> moveq #2,d0
}
    f99c:	      \-> addq.l #4,sp
    f99e:	          rts

0000f9a0 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    f9a0:	jsr 147c6 <drawFloor>
	return BR_CONTINUE;
    f9a6:	moveq #2,d0
}
    f9a8:	rts

0000f9aa <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    f9aa:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    f9ac:	          movea.l 12(sp),a0
    f9b0:	          movea.l 24(a0),a0
    f9b4:	          move.l (a0),d0
    f9b6:	          moveq #5,d1
    f9b8:	          cmp.l d0,d1
    f9ba:	/-------- bne.s f9fe <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    f9bc:	|         movea.l 12(sp),a0
    f9c0:	|         move.l 24(a0),d0
    f9c4:	|         move.l d0,-(sp)
    f9c6:	|         pea 5 <_start+0x5>
    f9ca:	|         move.l sp,d0
    f9cc:	|         addq.l #8,d0
    f9ce:	|         move.l d0,-(sp)
    f9d0:	|         jsr 135b8 <getValueType>
    f9d6:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    f9da:	|         moveq #24,d0
    f9dc:	|         add.l 12(sp),d0
    f9e0:	|         move.l d0,-(sp)
    f9e2:	|         jsr 13f3c <trimStack>
    f9e8:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    f9ea:	|         move.l (sp),d0
    f9ec:	|         move.l d0,-(sp)
    f9ee:	|         jsr 75b6 <setZBuffer>
    f9f4:	|         addq.l #4,sp
    f9f6:	|         tst.w d0
    f9f8:	|  /----- bne.s fa14 <builtIn_setZBuffer+0x6a>
    f9fa:	|  |      moveq #1,d0
    f9fc:	|  |  /-- bra.s fa16 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    f9fe:	\--|--|-> moveq #24,d0
    fa00:	   |  |   add.l 12(sp),d0
    fa04:	   |  |   move.l d0,-(sp)
    fa06:	   |  |   jsr 13f3c <trimStack>
    fa0c:	   |  |   addq.l #4,sp
		killZBuffer ();
    fa0e:	   |  |   jsr 7560 <killZBuffer>
	}
	return BR_CONTINUE;
    fa14:	   \--|-> moveq #2,d0
}
    fa16:	      \-> addq.l #4,sp
    fa18:	          rts

0000fa1a <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fa1a:	pea 17f18 <PutChar+0x1cc0>
    fa20:	jsr 15784 <KPrintF>
    fa26:	addq.l #4,sp
	return BR_CONTINUE;
    fa28:	moveq #2,d0
}
    fa2a:	rts

0000fa2c <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa2c:	          movea.l 8(sp),a0
    fa30:	          move.l 24(a0),d0
    fa34:	          move.l d0,-(sp)
    fa36:	          pea 1 <_start+0x1>
    fa3a:	          pea 1aef6 <speechMode>
    fa40:	          jsr 135b8 <getValueType>
    fa46:	          lea 12(sp),sp
    fa4a:	          tst.w d0
    fa4c:	      /-- bne.s fa52 <builtIn_setSpeechMode+0x26>
    fa4e:	      |   moveq #1,d0
    fa50:	/-----|-- bra.s fa8a <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fa52:	|     \-> moveq #24,d0
    fa54:	|         add.l 8(sp),d0
    fa58:	|         move.l d0,-(sp)
    fa5a:	|         jsr 13f3c <trimStack>
    fa60:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fa62:	|         move.l 1aef6 <speechMode>,d0
    fa68:	|     /-- bmi.s fa76 <builtIn_setSpeechMode+0x4a>
    fa6a:	|     |   move.l 1aef6 <speechMode>,d0
    fa70:	|     |   moveq #2,d1
    fa72:	|     |   cmp.l d0,d1
    fa74:	|  /--|-- bge.s fa88 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    fa76:	|  |  \-> pea 17f31 <PutChar+0x1cd9>
    fa7c:	|  |      jsr 15784 <KPrintF>
    fa82:	|  |      addq.l #4,sp
		return BR_ERROR;
    fa84:	|  |      moveq #1,d0
    fa86:	+--|----- bra.s fa8a <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fa88:	|  \----> moveq #2,d0
}
    fa8a:	\-------> rts

0000fa8c <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fa8c:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fa8e:	       jsr 6d68 <isThereAnySpeechGoingOn>
    fa94:	       move.l d0,(sp)
	if (i == -1) {
    fa96:	       moveq #-1,d0
    fa98:	       cmp.l (sp),d0
    fa9a:	/----- bne.s fab6 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fa9c:	|      moveq #28,d0
    fa9e:	|      add.l 12(sp),d0
    faa2:	|      clr.l -(sp)
    faa4:	|      pea 1 <_start+0x1>
    faa8:	|      move.l d0,-(sp)
    faaa:	|      jsr 13eaa <setVariable>
    fab0:	|      lea 12(sp),sp
    fab4:	|  /-- bra.s face <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fab6:	\--|-> moveq #28,d0
    fab8:	   |   add.l 12(sp),d0
    fabc:	   |   move.l (sp),-(sp)
    fabe:	   |   pea 7 <_start+0x7>
    fac2:	   |   move.l d0,-(sp)
    fac4:	   |   jsr 13eaa <setVariable>
    faca:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    face:	   \-> moveq #2,d0
}
    fad0:	       addq.l #4,sp
    fad2:	       rts

0000fad4 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fad4:	jsr 5082 <killSpeechTimers>
	return BR_CONTINUE;
    fada:	moveq #2,d0
}
    fadc:	rts

0000fade <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fade:	       move.l 1af30 <overRegion>,d0
    fae4:	/----- beq.s fb0e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fae6:	|      movea.l 1af30 <overRegion>,a0
    faec:	|      movea.l 28(a0),a0
    faf0:	|      move.l 4(a0),d1
    faf4:	|      moveq #28,d0
    faf6:	|      add.l 8(sp),d0
    fafa:	|      move.l d1,-(sp)
    fafc:	|      pea 7 <_start+0x7>
    fb00:	|      move.l d0,-(sp)
    fb02:	|      jsr 13eaa <setVariable>
    fb08:	|      lea 12(sp),sp
    fb0c:	|  /-- bra.s fb26 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    fb0e:	\--|-> moveq #28,d0
    fb10:	   |   add.l 8(sp),d0
    fb14:	   |   clr.l -(sp)
    fb16:	   |   pea 1 <_start+0x1>
    fb1a:	   |   move.l d0,-(sp)
    fb1c:	   |   jsr 13eaa <setVariable>
    fb22:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fb26:	   \-> moveq #2,d0
}
    fb28:	       rts

0000fb2a <builtIn_rename>:

builtIn(rename)
{
    fb2a:	       lea -16(sp),sp
    fb2e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fb30:	       movea.l 28(sp),a0
    fb34:	       move.l 24(a0),d0
    fb38:	       move.l d0,-(sp)
    fb3a:	       jsr 13b8e <getTextFromAnyVar>
    fb40:	       addq.l #4,sp
    fb42:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fb46:	   /-- bne.s fb4c <builtIn_rename+0x22>
    fb48:	   |   moveq #1,d0
    fb4a:	/--|-- bra.s fbc6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fb4c:	|  \-> moveq #24,d0
    fb4e:	|      add.l 28(sp),d0
    fb52:	|      move.l d0,-(sp)
    fb54:	|      jsr 13f3c <trimStack>
    fb5a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fb5c:	|      movea.l 28(sp),a0
    fb60:	|      move.l 24(a0),d0
    fb64:	|      move.l d0,-(sp)
    fb66:	|      pea 7 <_start+0x7>
    fb6a:	|      lea 12(sp),a0
    fb6e:	|      move.l a0,-(sp)
    fb70:	|      jsr 135b8 <getValueType>
    fb76:	|      lea 12(sp),sp
    fb7a:	|      tst.w d0
    fb7c:	|  /-- bne.s fb82 <builtIn_rename+0x58>
    fb7e:	|  |   moveq #1,d0
    fb80:	+--|-- bra.s fbc6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fb82:	|  \-> moveq #24,d0
    fb84:	|      add.l 28(sp),d0
    fb88:	|      move.l d0,-(sp)
    fb8a:	|      jsr 13f3c <trimStack>
    fb90:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    fb92:	|      move.l 4(sp),d0
    fb96:	|      move.l d0,-(sp)
    fb98:	|      jsr c3ee <findObjectType>
    fb9e:	|      addq.l #4,sp
    fba0:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    fba4:	|      movea.l 12(sp),a0
    fba8:	|      move.l (a0),8(sp)
    fbac:	|      move.l 1add0 <SysBase>,d0
    fbb2:	|      movea.l d0,a6
    fbb4:	|      movea.l 8(sp),a1
    fbb8:	|      jsr -690(a6)
	o->screenName = newText;
    fbbc:	|      movea.l 12(sp),a0
    fbc0:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    fbc4:	|      moveq #2,d0
}
    fbc6:	\----> movea.l (sp)+,a6
    fbc8:	       lea 16(sp),sp
    fbcc:	       rts

0000fbce <builtIn_getObjectX>:

builtIn (getObjectX)
{
    fbce:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbd2:	          movea.l 20(sp),a0
    fbd6:	          move.l 24(a0),d0
    fbda:	          move.l d0,-(sp)
    fbdc:	          pea 7 <_start+0x7>
    fbe0:	          lea 8(sp),a0
    fbe4:	          move.l a0,-(sp)
    fbe6:	          jsr 135b8 <getValueType>
    fbec:	          lea 12(sp),sp
    fbf0:	          tst.w d0
    fbf2:	      /-- bne.s fbfa <builtIn_getObjectX+0x2c>
    fbf4:	      |   moveq #1,d0
    fbf6:	/-----|-- bra.w fc96 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    fbfa:	|     \-> moveq #24,d0
    fbfc:	|         add.l 20(sp),d0
    fc00:	|         move.l d0,-(sp)
    fc02:	|         jsr 13f3c <trimStack>
    fc08:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fc0a:	|         move.l (sp),d0
    fc0c:	|         move.l d0,-(sp)
    fc0e:	|         jsr 9514 <findPerson>
    fc14:	|         addq.l #4,sp
    fc16:	|         move.l d0,8(sp)
	if (pers) {
    fc1a:	|     /-- beq.s fc48 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    fc1c:	|     |   movea.l 8(sp),a0
    fc20:	|     |   move.l (a0),d0
    fc22:	|     |   move.l d0,-(sp)
    fc24:	|     |   jsr 15b58 <__fixsfsi>
    fc2a:	|     |   addq.l #4,sp
    fc2c:	|     |   move.l d0,d1
    fc2e:	|     |   moveq #28,d0
    fc30:	|     |   add.l 20(sp),d0
    fc34:	|     |   move.l d1,-(sp)
    fc36:	|     |   pea 1 <_start+0x1>
    fc3a:	|     |   move.l d0,-(sp)
    fc3c:	|     |   jsr 13eaa <setVariable>
    fc42:	|     |   lea 12(sp),sp
    fc46:	|  /--|-- bra.s fc94 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fc48:	|  |  \-> move.l (sp),d0
    fc4a:	|  |      move.l d0,-(sp)
    fc4c:	|  |      jsr 14108 <getRegionForObject>
    fc52:	|  |      addq.l #4,sp
    fc54:	|  |      move.l d0,4(sp)
		if (la) {
    fc58:	|  |  /-- beq.s fc7c <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    fc5a:	|  |  |   movea.l 4(sp),a0
    fc5e:	|  |  |   move.l 16(a0),d1
    fc62:	|  |  |   moveq #28,d0
    fc64:	|  |  |   add.l 20(sp),d0
    fc68:	|  |  |   move.l d1,-(sp)
    fc6a:	|  |  |   pea 1 <_start+0x1>
    fc6e:	|  |  |   move.l d0,-(sp)
    fc70:	|  |  |   jsr 13eaa <setVariable>
    fc76:	|  |  |   lea 12(sp),sp
    fc7a:	|  +--|-- bra.s fc94 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fc7c:	|  |  \-> moveq #28,d0
    fc7e:	|  |      add.l 20(sp),d0
    fc82:	|  |      clr.l -(sp)
    fc84:	|  |      pea 1 <_start+0x1>
    fc88:	|  |      move.l d0,-(sp)
    fc8a:	|  |      jsr 13eaa <setVariable>
    fc90:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fc94:	|  \----> moveq #2,d0
}
    fc96:	\-------> lea 12(sp),sp
    fc9a:	          rts

0000fc9c <builtIn_getObjectY>:

builtIn (getObjectY)
{
    fc9c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fca0:	          movea.l 20(sp),a0
    fca4:	          move.l 24(a0),d0
    fca8:	          move.l d0,-(sp)
    fcaa:	          pea 7 <_start+0x7>
    fcae:	          lea 8(sp),a0
    fcb2:	          move.l a0,-(sp)
    fcb4:	          jsr 135b8 <getValueType>
    fcba:	          lea 12(sp),sp
    fcbe:	          tst.w d0
    fcc0:	      /-- bne.s fcc8 <builtIn_getObjectY+0x2c>
    fcc2:	      |   moveq #1,d0
    fcc4:	/-----|-- bra.w fd66 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    fcc8:	|     \-> moveq #24,d0
    fcca:	|         add.l 20(sp),d0
    fcce:	|         move.l d0,-(sp)
    fcd0:	|         jsr 13f3c <trimStack>
    fcd6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fcd8:	|         move.l (sp),d0
    fcda:	|         move.l d0,-(sp)
    fcdc:	|         jsr 9514 <findPerson>
    fce2:	|         addq.l #4,sp
    fce4:	|         move.l d0,8(sp)
	if (pers) {
    fce8:	|     /-- beq.s fd18 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    fcea:	|     |   movea.l 8(sp),a0
    fcee:	|     |   move.l 4(a0),d0
    fcf2:	|     |   move.l d0,-(sp)
    fcf4:	|     |   jsr 15b58 <__fixsfsi>
    fcfa:	|     |   addq.l #4,sp
    fcfc:	|     |   move.l d0,d1
    fcfe:	|     |   moveq #28,d0
    fd00:	|     |   add.l 20(sp),d0
    fd04:	|     |   move.l d1,-(sp)
    fd06:	|     |   pea 1 <_start+0x1>
    fd0a:	|     |   move.l d0,-(sp)
    fd0c:	|     |   jsr 13eaa <setVariable>
    fd12:	|     |   lea 12(sp),sp
    fd16:	|  /--|-- bra.s fd64 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fd18:	|  |  \-> move.l (sp),d0
    fd1a:	|  |      move.l d0,-(sp)
    fd1c:	|  |      jsr 14108 <getRegionForObject>
    fd22:	|  |      addq.l #4,sp
    fd24:	|  |      move.l d0,4(sp)
		if (la) {
    fd28:	|  |  /-- beq.s fd4c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    fd2a:	|  |  |   movea.l 4(sp),a0
    fd2e:	|  |  |   move.l 20(a0),d1
    fd32:	|  |  |   moveq #28,d0
    fd34:	|  |  |   add.l 20(sp),d0
    fd38:	|  |  |   move.l d1,-(sp)
    fd3a:	|  |  |   pea 1 <_start+0x1>
    fd3e:	|  |  |   move.l d0,-(sp)
    fd40:	|  |  |   jsr 13eaa <setVariable>
    fd46:	|  |  |   lea 12(sp),sp
    fd4a:	|  +--|-- bra.s fd64 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fd4c:	|  |  \-> moveq #28,d0
    fd4e:	|  |      add.l 20(sp),d0
    fd52:	|  |      clr.l -(sp)
    fd54:	|  |      pea 1 <_start+0x1>
    fd58:	|  |      move.l d0,-(sp)
    fd5a:	|  |      jsr 13eaa <setVariable>
    fd60:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fd64:	|  \----> moveq #2,d0
}
    fd66:	\-------> lea 12(sp),sp
    fd6a:	          rts

0000fd6c <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    fd6c:	       lea -32(sp),sp
    fd70:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd74:	       movea.l 56(sp),a0
    fd78:	       move.l 24(a0),d0
    fd7c:	       move.l d0,-(sp)
    fd7e:	       pea 1 <_start+0x1>
    fd82:	       lea 28(sp),a0
    fd86:	       move.l a0,-(sp)
    fd88:	       jsr 135b8 <getValueType>
    fd8e:	       lea 12(sp),sp
    fd92:	       tst.w d0
    fd94:	   /-- bne.s fd9c <builtIn_addScreenRegion+0x30>
    fd96:	   |   moveq #1,d0
    fd98:	/--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fd9c:	|  \-> moveq #24,d0
    fd9e:	|      add.l 56(sp),d0
    fda2:	|      move.l d0,-(sp)
    fda4:	|      jsr 13f3c <trimStack>
    fdaa:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fdac:	|      movea.l 56(sp),a0
    fdb0:	|      move.l 24(a0),d0
    fdb4:	|      move.l d0,-(sp)
    fdb6:	|      pea 1 <_start+0x1>
    fdba:	|      moveq #48,d0
    fdbc:	|      add.l sp,d0
    fdbe:	|      move.l d0,-(sp)
    fdc0:	|      jsr 135b8 <getValueType>
    fdc6:	|      lea 12(sp),sp
    fdca:	|      tst.w d0
    fdcc:	|  /-- bne.s fdd4 <builtIn_addScreenRegion+0x68>
    fdce:	|  |   moveq #1,d0
    fdd0:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fdd4:	|  \-> moveq #24,d0
    fdd6:	|      add.l 56(sp),d0
    fdda:	|      move.l d0,-(sp)
    fddc:	|      jsr 13f3c <trimStack>
    fde2:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fde4:	|      movea.l 56(sp),a0
    fde8:	|      move.l 24(a0),d0
    fdec:	|      move.l d0,-(sp)
    fdee:	|      pea 1 <_start+0x1>
    fdf2:	|      moveq #52,d0
    fdf4:	|      add.l sp,d0
    fdf6:	|      move.l d0,-(sp)
    fdf8:	|      jsr 135b8 <getValueType>
    fdfe:	|      lea 12(sp),sp
    fe02:	|      tst.w d0
    fe04:	|  /-- bne.s fe0c <builtIn_addScreenRegion+0xa0>
    fe06:	|  |   moveq #1,d0
    fe08:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe0c:	|  \-> moveq #24,d0
    fe0e:	|      add.l 56(sp),d0
    fe12:	|      move.l d0,-(sp)
    fe14:	|      jsr 13f3c <trimStack>
    fe1a:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe1c:	|      movea.l 56(sp),a0
    fe20:	|      move.l 24(a0),d0
    fe24:	|      move.l d0,-(sp)
    fe26:	|      pea 1 <_start+0x1>
    fe2a:	|      lea 32(sp),a0
    fe2e:	|      move.l a0,-(sp)
    fe30:	|      jsr 135b8 <getValueType>
    fe36:	|      lea 12(sp),sp
    fe3a:	|      tst.w d0
    fe3c:	|  /-- bne.s fe44 <builtIn_addScreenRegion+0xd8>
    fe3e:	|  |   moveq #1,d0
    fe40:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe44:	|  \-> moveq #24,d0
    fe46:	|      add.l 56(sp),d0
    fe4a:	|      move.l d0,-(sp)
    fe4c:	|      jsr 13f3c <trimStack>
    fe52:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe54:	|      movea.l 56(sp),a0
    fe58:	|      move.l 24(a0),d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      pea 1 <_start+0x1>
    fe62:	|      lea 36(sp),a0
    fe66:	|      move.l a0,-(sp)
    fe68:	|      jsr 135b8 <getValueType>
    fe6e:	|      lea 12(sp),sp
    fe72:	|      tst.w d0
    fe74:	|  /-- bne.s fe7c <builtIn_addScreenRegion+0x110>
    fe76:	|  |   moveq #1,d0
    fe78:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe7c:	|  \-> moveq #24,d0
    fe7e:	|      add.l 56(sp),d0
    fe82:	|      move.l d0,-(sp)
    fe84:	|      jsr 13f3c <trimStack>
    fe8a:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe8c:	|      movea.l 56(sp),a0
    fe90:	|      move.l 24(a0),d0
    fe94:	|      move.l d0,-(sp)
    fe96:	|      pea 1 <_start+0x1>
    fe9a:	|      lea 40(sp),a0
    fe9e:	|      move.l a0,-(sp)
    fea0:	|      jsr 135b8 <getValueType>
    fea6:	|      lea 12(sp),sp
    feaa:	|      tst.w d0
    feac:	|  /-- bne.s feb4 <builtIn_addScreenRegion+0x148>
    feae:	|  |   moveq #1,d0
    feb0:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    feb4:	|  \-> moveq #24,d0
    feb6:	|      add.l 56(sp),d0
    feba:	|      move.l d0,-(sp)
    febc:	|      jsr 13f3c <trimStack>
    fec2:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fec4:	|      movea.l 56(sp),a0
    fec8:	|      move.l 24(a0),d0
    fecc:	|      move.l d0,-(sp)
    fece:	|      pea 1 <_start+0x1>
    fed2:	|      lea 44(sp),a0
    fed6:	|      move.l a0,-(sp)
    fed8:	|      jsr 135b8 <getValueType>
    fede:	|      lea 12(sp),sp
    fee2:	|      tst.w d0
    fee4:	|  /-- bne.s feec <builtIn_addScreenRegion+0x180>
    fee6:	|  |   moveq #1,d0
    fee8:	+--|-- bra.w ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    feec:	|  \-> moveq #24,d0
    feee:	|      add.l 56(sp),d0
    fef2:	|      move.l d0,-(sp)
    fef4:	|      jsr 13f3c <trimStack>
    fefa:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fefc:	|      movea.l 56(sp),a0
    ff00:	|      move.l 24(a0),d0
    ff04:	|      move.l d0,-(sp)
    ff06:	|      pea 7 <_start+0x7>
    ff0a:	|      lea 24(sp),a0
    ff0e:	|      move.l a0,-(sp)
    ff10:	|      jsr 135b8 <getValueType>
    ff16:	|      lea 12(sp),sp
    ff1a:	|      tst.w d0
    ff1c:	|  /-- bne.s ff22 <builtIn_addScreenRegion+0x1b6>
    ff1e:	|  |   moveq #1,d0
    ff20:	+--|-- bra.s ff76 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff22:	|  \-> moveq #24,d0
    ff24:	|      add.l 56(sp),d0
    ff28:	|      move.l d0,-(sp)
    ff2a:	|      jsr 13f3c <trimStack>
    ff30:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    ff32:	|      move.l 16(sp),d5
    ff36:	|      move.l 20(sp),d4
    ff3a:	|      move.l 40(sp),d3
    ff3e:	|      move.l 44(sp),d2
    ff42:	|      movea.l 24(sp),a1
    ff46:	|      movea.l 28(sp),a0
    ff4a:	|      move.l 32(sp),d1
    ff4e:	|      move.l 36(sp),d0
    ff52:	|      move.l d5,-(sp)
    ff54:	|      move.l d4,-(sp)
    ff56:	|      move.l d3,-(sp)
    ff58:	|      move.l d2,-(sp)
    ff5a:	|      move.l a1,-(sp)
    ff5c:	|      move.l a0,-(sp)
    ff5e:	|      move.l d1,-(sp)
    ff60:	|      move.l d0,-(sp)
    ff62:	|      jsr 13fc2 <addScreenRegion>
    ff68:	|      lea 32(sp),sp
    ff6c:	|      tst.w d0
    ff6e:	|  /-- beq.s ff74 <builtIn_addScreenRegion+0x208>
    ff70:	|  |   moveq #2,d0
    ff72:	+--|-- bra.s ff76 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    ff74:	|  \-> moveq #1,d0

}
    ff76:	\----> movem.l (sp)+,d2-d5
    ff7a:	       lea 32(sp),sp
    ff7e:	       rts

0000ff80 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    ff80:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff82:	       movea.l 12(sp),a0
    ff86:	       move.l 24(a0),d0
    ff8a:	       move.l d0,-(sp)
    ff8c:	       pea 7 <_start+0x7>
    ff90:	       move.l sp,d0
    ff92:	       addq.l #8,d0
    ff94:	       move.l d0,-(sp)
    ff96:	       jsr 135b8 <getValueType>
    ff9c:	       lea 12(sp),sp
    ffa0:	       tst.w d0
    ffa2:	   /-- bne.s ffa8 <builtIn_removeScreenRegion+0x28>
    ffa4:	   |   moveq #1,d0
    ffa6:	/--|-- bra.s ffc6 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    ffa8:	|  \-> moveq #24,d0
    ffaa:	|      add.l 12(sp),d0
    ffae:	|      move.l d0,-(sp)
    ffb0:	|      jsr 13f3c <trimStack>
    ffb6:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    ffb8:	|      move.l (sp),d0
    ffba:	|      move.l d0,-(sp)
    ffbc:	|      jsr 142b0 <removeScreenRegion>
    ffc2:	|      addq.l #4,sp
	return BR_CONTINUE;
    ffc4:	|      moveq #2,d0
}
    ffc6:	\----> addq.l #4,sp
    ffc8:	       rts

0000ffca <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    ffca:	jsr 14434 <showBoxes>
	return BR_CONTINUE;
    ffd0:	moveq #2,d0
}
    ffd2:	rts

0000ffd4 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    ffd4:	jsr 14136 <killAllRegions>
	return BR_CONTINUE;
    ffda:	moveq #2,d0
}
    ffdc:	rts

0000ffde <builtIn_addCharacter>:

builtIn(addCharacter)
{
    ffde:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    ffe2:	       movea.l 24(sp),a0
    ffe6:	       move.l 24(a0),d0
    ffea:	       move.l d0,-(sp)
    ffec:	       jsr 13264 <getCostumeFromVar>
    fff2:	       addq.l #4,sp
    fff4:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    fff8:	   /-- bne.s 10000 <builtIn_addCharacter+0x22>
    fffa:	   |   moveq #1,d0
    fffc:	/--|-- bra.w 100dc <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10000:	|  \-> moveq #24,d0
   10002:	|      add.l 24(sp),d0
   10006:	|      move.l d0,-(sp)
   10008:	|      jsr 13f3c <trimStack>
   1000e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10010:	|      movea.l 24(sp),a0
   10014:	|      move.l 24(a0),d0
   10018:	|      move.l d0,-(sp)
   1001a:	|      pea 1 <_start+0x1>
   1001e:	|      lea 12(sp),a0
   10022:	|      move.l a0,-(sp)
   10024:	|      jsr 135b8 <getValueType>
   1002a:	|      lea 12(sp),sp
   1002e:	|      tst.w d0
   10030:	|  /-- bne.s 10038 <builtIn_addCharacter+0x5a>
   10032:	|  |   moveq #1,d0
   10034:	+--|-- bra.w 100dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10038:	|  \-> moveq #24,d0
   1003a:	|      add.l 24(sp),d0
   1003e:	|      move.l d0,-(sp)
   10040:	|      jsr 13f3c <trimStack>
   10046:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10048:	|      movea.l 24(sp),a0
   1004c:	|      move.l 24(a0),d0
   10050:	|      move.l d0,-(sp)
   10052:	|      pea 1 <_start+0x1>
   10056:	|      moveq #16,d0
   10058:	|      add.l sp,d0
   1005a:	|      move.l d0,-(sp)
   1005c:	|      jsr 135b8 <getValueType>
   10062:	|      lea 12(sp),sp
   10066:	|      tst.w d0
   10068:	|  /-- bne.s 1006e <builtIn_addCharacter+0x90>
   1006a:	|  |   moveq #1,d0
   1006c:	+--|-- bra.s 100dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1006e:	|  \-> moveq #24,d0
   10070:	|      add.l 24(sp),d0
   10074:	|      move.l d0,-(sp)
   10076:	|      jsr 13f3c <trimStack>
   1007c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1007e:	|      movea.l 24(sp),a0
   10082:	|      move.l 24(a0),d0
   10086:	|      move.l d0,-(sp)
   10088:	|      pea 7 <_start+0x7>
   1008c:	|      lea 8(sp),a0
   10090:	|      move.l a0,-(sp)
   10092:	|      jsr 135b8 <getValueType>
   10098:	|      lea 12(sp),sp
   1009c:	|      tst.w d0
   1009e:	|  /-- bne.s 100a4 <builtIn_addCharacter+0xc6>
   100a0:	|  |   moveq #1,d0
   100a2:	+--|-- bra.s 100dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   100a4:	|  \-> moveq #24,d0
   100a6:	|      add.l 24(sp),d0
   100aa:	|      move.l d0,-(sp)
   100ac:	|      jsr 13f3c <trimStack>
   100b2:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   100b4:	|      movea.l (sp),a0
   100b6:	|      move.l 4(sp),d1
   100ba:	|      move.l 8(sp),d0
   100be:	|      move.l 12(sp),-(sp)
   100c2:	|      move.l a0,-(sp)
   100c4:	|      move.l d1,-(sp)
   100c6:	|      move.l d0,-(sp)
   100c8:	|      jsr 819e <addPerson>
   100ce:	|      lea 16(sp),sp
   100d2:	|      tst.w d0
   100d4:	|  /-- beq.s 100da <builtIn_addCharacter+0xfc>
   100d6:	|  |   moveq #2,d0
   100d8:	+--|-- bra.s 100dc <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   100da:	|  \-> moveq #1,d0
}
   100dc:	\----> lea 16(sp),sp
   100e0:	       rts

000100e2 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   100e2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   100e4:	       movea.l 12(sp),a0
   100e8:	       move.l 24(a0),d0
   100ec:	       move.l d0,-(sp)
   100ee:	       pea 7 <_start+0x7>
   100f2:	       move.l sp,d0
   100f4:	       addq.l #8,d0
   100f6:	       move.l d0,-(sp)
   100f8:	       jsr 135b8 <getValueType>
   100fe:	       lea 12(sp),sp
   10102:	       tst.w d0
   10104:	   /-- bne.s 1010a <builtIn_hideCharacter+0x28>
   10106:	   |   moveq #1,d0
   10108:	/--|-- bra.s 1012a <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1010a:	|  \-> moveq #24,d0
   1010c:	|      add.l 12(sp),d0
   10110:	|      move.l d0,-(sp)
   10112:	|      jsr 13f3c <trimStack>
   10118:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1011a:	|      move.l (sp),d0
   1011c:	|      move.l d0,-(sp)
   1011e:	|      clr.l -(sp)
   10120:	|      jsr ab48 <setShown>
   10126:	|      addq.l #8,sp
	return BR_CONTINUE;
   10128:	|      moveq #2,d0
}
   1012a:	\----> addq.l #4,sp
   1012c:	       rts

0001012e <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1012e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10130:	       movea.l 12(sp),a0
   10134:	       move.l 24(a0),d0
   10138:	       move.l d0,-(sp)
   1013a:	       pea 7 <_start+0x7>
   1013e:	       move.l sp,d0
   10140:	       addq.l #8,d0
   10142:	       move.l d0,-(sp)
   10144:	       jsr 135b8 <getValueType>
   1014a:	       lea 12(sp),sp
   1014e:	       tst.w d0
   10150:	   /-- bne.s 10156 <builtIn_showCharacter+0x28>
   10152:	   |   moveq #1,d0
   10154:	/--|-- bra.s 10178 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   10156:	|  \-> moveq #24,d0
   10158:	|      add.l 12(sp),d0
   1015c:	|      move.l d0,-(sp)
   1015e:	|      jsr 13f3c <trimStack>
   10164:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10166:	|      move.l (sp),d0
   10168:	|      move.l d0,-(sp)
   1016a:	|      pea 1 <_start+0x1>
   1016e:	|      jsr ab48 <setShown>
   10174:	|      addq.l #8,sp
	return BR_CONTINUE;
   10176:	|      moveq #2,d0
}
   10178:	\----> addq.l #4,sp
   1017a:	       rts

0001017c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1017c:	jsr 5082 <killSpeechTimers>
	killMostPeople ();
   10182:	jsr 9980 <killMostPeople>
	return BR_CONTINUE;
   10188:	moveq #2,d0
}
   1018a:	rts

0001018c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1018c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1018e:	       movea.l 16(sp),a0
   10192:	       move.l 24(a0),d0
   10196:	       move.l d0,-(sp)
   10198:	       pea 1 <_start+0x1>
   1019c:	       move.l sp,d0
   1019e:	       addq.l #8,d0
   101a0:	       move.l d0,-(sp)
   101a2:	       jsr 135b8 <getValueType>
   101a8:	       lea 12(sp),sp
   101ac:	       tst.w d0
   101ae:	   /-- bne.s 101b4 <builtIn_setCharacterDrawMode+0x28>
   101b0:	   |   moveq #1,d0
   101b2:	/--|-- bra.s 1020e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   101b4:	|  \-> moveq #24,d0
   101b6:	|      add.l 16(sp),d0
   101ba:	|      move.l d0,-(sp)
   101bc:	|      jsr 13f3c <trimStack>
   101c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101c4:	|      movea.l 16(sp),a0
   101c8:	|      move.l 24(a0),d0
   101cc:	|      move.l d0,-(sp)
   101ce:	|      pea 7 <_start+0x7>
   101d2:	|      moveq #12,d0
   101d4:	|      add.l sp,d0
   101d6:	|      move.l d0,-(sp)
   101d8:	|      jsr 135b8 <getValueType>
   101de:	|      lea 12(sp),sp
   101e2:	|      tst.w d0
   101e4:	|  /-- bne.s 101ea <builtIn_setCharacterDrawMode+0x5e>
   101e6:	|  |   moveq #1,d0
   101e8:	+--|-- bra.s 1020e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   101ea:	|  \-> moveq #24,d0
   101ec:	|      add.l 16(sp),d0
   101f0:	|      move.l d0,-(sp)
   101f2:	|      jsr 13f3c <trimStack>
   101f8:	|      addq.l #4,sp
	setDrawMode (di, obj);
   101fa:	|      move.l 4(sp),d1
   101fe:	|      move.l (sp),d0
   10200:	|      move.l d1,-(sp)
   10202:	|      move.l d0,-(sp)
   10204:	|      jsr a486 <setDrawMode>
   1020a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1020c:	|      moveq #2,d0
}
   1020e:	\----> addq.l #8,sp
   10210:	       rts

00010212 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10212:	pea 17f6f <PutChar+0x1d17>
   10218:	jsr 15784 <KPrintF>
   1021e:	addq.l #4,sp
	return BR_CONTINUE;
   10220:	moveq #2,d0
}
   10222:	rts

00010224 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   10224:	pea 17fa2 <PutChar+0x1d4a>
   1022a:	jsr 15784 <KPrintF>
   10230:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   10232:	moveq #2,d0
}
   10234:	rts

00010236 <builtIn_setScale>:

builtIn(setScale)
{
   10236:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10238:	       movea.l 16(sp),a0
   1023c:	       move.l 24(a0),d0
   10240:	       move.l d0,-(sp)
   10242:	       pea 1 <_start+0x1>
   10246:	       move.l sp,d0
   10248:	       addq.l #8,d0
   1024a:	       move.l d0,-(sp)
   1024c:	       jsr 135b8 <getValueType>
   10252:	       lea 12(sp),sp
   10256:	       tst.w d0
   10258:	   /-- bne.s 1025e <builtIn_setScale+0x28>
   1025a:	   |   moveq #1,d0
   1025c:	/--|-- bra.s 102c0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1025e:	|  \-> moveq #24,d0
   10260:	|      add.l 16(sp),d0
   10264:	|      move.l d0,-(sp)
   10266:	|      jsr 13f3c <trimStack>
   1026c:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1026e:	|      movea.l 16(sp),a0
   10272:	|      move.l 24(a0),d0
   10276:	|      move.l d0,-(sp)
   10278:	|      pea 1 <_start+0x1>
   1027c:	|      moveq #12,d0
   1027e:	|      add.l sp,d0
   10280:	|      move.l d0,-(sp)
   10282:	|      jsr 135b8 <getValueType>
   10288:	|      lea 12(sp),sp
   1028c:	|      tst.w d0
   1028e:	|  /-- bne.s 10294 <builtIn_setScale+0x5e>
   10290:	|  |   moveq #1,d0
   10292:	+--|-- bra.s 102c0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10294:	|  \-> moveq #24,d0
   10296:	|      add.l 16(sp),d0
   1029a:	|      move.l d0,-(sp)
   1029c:	|      jsr 13f3c <trimStack>
   102a2:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   102a4:	|      move.l (sp),d0
   102a6:	|      move.l d0,d0
   102a8:	|      movea.w d0,a1
   102aa:	|      move.l 4(sp),d0
   102ae:	|      move.l d0,d0
   102b0:	|      movea.w d0,a0
   102b2:	|      move.l a1,-(sp)
   102b4:	|      move.l a0,-(sp)
   102b6:	|      jsr ab20 <setScale>
   102bc:	|      addq.l #8,sp
	return BR_CONTINUE;
   102be:	|      moveq #2,d0
}
   102c0:	\----> addq.l #8,sp
   102c2:	       rts

000102c4 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   102c4:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   102c6:	       movea.l 12(sp),a0
   102ca:	       move.l 24(a0),d0
   102ce:	       move.l d0,-(sp)
   102d0:	       pea 7 <_start+0x7>
   102d4:	       move.l sp,d0
   102d6:	       addq.l #8,d0
   102d8:	       move.l d0,-(sp)
   102da:	       jsr 135b8 <getValueType>
   102e0:	       lea 12(sp),sp
   102e4:	       tst.w d0
   102e6:	   /-- bne.s 102ec <builtIn_stopCharacter+0x28>
   102e8:	   |   moveq #1,d0
   102ea:	/--|-- bra.s 10324 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   102ec:	|  \-> moveq #24,d0
   102ee:	|      add.l 12(sp),d0
   102f2:	|      move.l d0,-(sp)
   102f4:	|      jsr 13f3c <trimStack>
   102fa:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   102fc:	|      move.l (sp),d0
   102fe:	|      move.l d0,-(sp)
   10300:	|      jsr ac54 <stopPerson>
   10306:	|      addq.l #4,sp
   10308:	|      movea.w d0,a0
   1030a:	|      moveq #28,d0
   1030c:	|      add.l 12(sp),d0
   10310:	|      move.l a0,-(sp)
   10312:	|      pea 1 <_start+0x1>
   10316:	|      move.l d0,-(sp)
   10318:	|      jsr 13eaa <setVariable>
   1031e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10322:	|      moveq #2,d0
}
   10324:	\----> addq.l #4,sp
   10326:	       rts

00010328 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   10328:	pea 17fdc <PutChar+0x1d84>
   1032e:	jsr 15784 <KPrintF>
   10334:	addq.l #4,sp
	return BR_CONTINUE;
   10336:	moveq #2,d0
}
   10338:	rts

0001033a <builtIn_animate>:

builtIn(animate)
{
   1033a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1033c:	       movea.l 16(sp),a0
   10340:	       move.l 24(a0),d0
   10344:	       move.l d0,-(sp)
   10346:	       jsr 13a90 <getAnimationFromVar>
   1034c:	       addq.l #4,sp
   1034e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10352:	   /-- bne.s 10358 <builtIn_animate+0x1e>
   10354:	   |   moveq #1,d0
   10356:	/--|-- bra.s 103d6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10358:	|  \-> moveq #24,d0
   1035a:	|      add.l 16(sp),d0
   1035e:	|      move.l d0,-(sp)
   10360:	|      jsr 13f3c <trimStack>
   10366:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10368:	|      movea.l 16(sp),a0
   1036c:	|      move.l 24(a0),d0
   10370:	|      move.l d0,-(sp)
   10372:	|      pea 7 <_start+0x7>
   10376:	|      move.l sp,d0
   10378:	|      addq.l #8,d0
   1037a:	|      move.l d0,-(sp)
   1037c:	|      jsr 135b8 <getValueType>
   10382:	|      lea 12(sp),sp
   10386:	|      tst.w d0
   10388:	|  /-- bne.s 1038e <builtIn_animate+0x54>
   1038a:	|  |   moveq #1,d0
   1038c:	+--|-- bra.s 103d6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1038e:	|  \-> moveq #24,d0
   10390:	|      add.l 16(sp),d0
   10394:	|      move.l d0,-(sp)
   10396:	|      jsr 13f3c <trimStack>
   1039c:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1039e:	|      move.l (sp),d0
   103a0:	|      move.l 4(sp),-(sp)
   103a4:	|      move.l d0,-(sp)
   103a6:	|      jsr 8414 <animatePerson>
   103ac:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   103ae:	|      move.l 4(sp),-(sp)
   103b2:	|      jsr aca8 <timeForAnim>
   103b8:	|      addq.l #4,sp
   103ba:	|      move.l d0,d1
   103bc:	|      moveq #28,d0
   103be:	|      add.l 16(sp),d0
   103c2:	|      move.l d1,-(sp)
   103c4:	|      pea 1 <_start+0x1>
   103c8:	|      move.l d0,-(sp)
   103ca:	|      jsr 13eaa <setVariable>
   103d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   103d4:	|      moveq #2,d0
}
   103d6:	\----> addq.l #8,sp
   103d8:	       rts

000103da <builtIn_setCostume>:

builtIn(setCostume)
{
   103da:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   103dc:	       movea.l 16(sp),a0
   103e0:	       move.l 24(a0),d0
   103e4:	       move.l d0,-(sp)
   103e6:	       jsr 13264 <getCostumeFromVar>
   103ec:	       addq.l #4,sp
   103ee:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   103f2:	   /-- bne.s 103f8 <builtIn_setCostume+0x1e>
   103f4:	   |   moveq #1,d0
   103f6:	/--|-- bra.s 10450 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   103f8:	|  \-> moveq #24,d0
   103fa:	|      add.l 16(sp),d0
   103fe:	|      move.l d0,-(sp)
   10400:	|      jsr 13f3c <trimStack>
   10406:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10408:	|      movea.l 16(sp),a0
   1040c:	|      move.l 24(a0),d0
   10410:	|      move.l d0,-(sp)
   10412:	|      pea 7 <_start+0x7>
   10416:	|      move.l sp,d0
   10418:	|      addq.l #8,d0
   1041a:	|      move.l d0,-(sp)
   1041c:	|      jsr 135b8 <getValueType>
   10422:	|      lea 12(sp),sp
   10426:	|      tst.w d0
   10428:	|  /-- bne.s 1042e <builtIn_setCostume+0x54>
   1042a:	|  |   moveq #1,d0
   1042c:	+--|-- bra.s 10450 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1042e:	|  \-> moveq #24,d0
   10430:	|      add.l 16(sp),d0
   10434:	|      move.l d0,-(sp)
   10436:	|      jsr 13f3c <trimStack>
   1043c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1043e:	|      move.l (sp),d0
   10440:	|      move.l 4(sp),-(sp)
   10444:	|      move.l d0,-(sp)
   10446:	|      jsr 845e <animatePersonUsingPersona>
   1044c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1044e:	|      moveq #2,d0
}
   10450:	\----> addq.l #8,sp
   10452:	       rts

00010454 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   10454:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10456:	       movea.l 16(sp),a0
   1045a:	       move.l 24(a0),d0
   1045e:	       move.l d0,-(sp)
   10460:	       pea 1 <_start+0x1>
   10464:	       move.l sp,d0
   10466:	       addq.l #8,d0
   10468:	       move.l d0,-(sp)
   1046a:	       jsr 135b8 <getValueType>
   10470:	       lea 12(sp),sp
   10474:	       tst.w d0
   10476:	   /-- bne.s 1047c <builtIn_floatCharacter+0x28>
   10478:	   |   moveq #1,d0
   1047a:	/--|-- bra.s 104f0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1047c:	|  \-> moveq #24,d0
   1047e:	|      add.l 16(sp),d0
   10482:	|      move.l d0,-(sp)
   10484:	|      jsr 13f3c <trimStack>
   1048a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1048c:	|      movea.l 16(sp),a0
   10490:	|      move.l 24(a0),d0
   10494:	|      move.l d0,-(sp)
   10496:	|      pea 7 <_start+0x7>
   1049a:	|      moveq #12,d0
   1049c:	|      add.l sp,d0
   1049e:	|      move.l d0,-(sp)
   104a0:	|      jsr 135b8 <getValueType>
   104a6:	|      lea 12(sp),sp
   104aa:	|      tst.w d0
   104ac:	|  /-- bne.s 104b2 <builtIn_floatCharacter+0x5e>
   104ae:	|  |   moveq #1,d0
   104b0:	+--|-- bra.s 104f0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   104b2:	|  \-> moveq #24,d0
   104b4:	|      add.l 16(sp),d0
   104b8:	|      move.l d0,-(sp)
   104ba:	|      jsr 13f3c <trimStack>
   104c0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   104c2:	|      move.l 4(sp),d1
   104c6:	|      move.l (sp),d0
   104c8:	|      move.l d1,-(sp)
   104ca:	|      move.l d0,-(sp)
   104cc:	|      jsr 9542 <floatCharacter>
   104d2:	|      addq.l #8,sp
   104d4:	|      movea.w d0,a0
   104d6:	|      moveq #28,d0
   104d8:	|      add.l 16(sp),d0
   104dc:	|      move.l a0,-(sp)
   104de:	|      pea 1 <_start+0x1>
   104e2:	|      move.l d0,-(sp)
   104e4:	|      jsr 13eaa <setVariable>
   104ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104ee:	|      moveq #2,d0
}
   104f0:	\----> addq.l #8,sp
   104f2:	       rts

000104f4 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   104f4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104f6:	       movea.l 16(sp),a0
   104fa:	       move.l 24(a0),d0
   104fe:	       move.l d0,-(sp)
   10500:	       pea 1 <_start+0x1>
   10504:	       move.l sp,d0
   10506:	       addq.l #8,d0
   10508:	       move.l d0,-(sp)
   1050a:	       jsr 135b8 <getValueType>
   10510:	       lea 12(sp),sp
   10514:	       tst.w d0
   10516:	   /-- bne.s 1051c <builtIn_setCharacterWalkSpeed+0x28>
   10518:	   |   moveq #1,d0
   1051a:	/--|-- bra.s 10590 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1051c:	|  \-> moveq #24,d0
   1051e:	|      add.l 16(sp),d0
   10522:	|      move.l d0,-(sp)
   10524:	|      jsr 13f3c <trimStack>
   1052a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1052c:	|      movea.l 16(sp),a0
   10530:	|      move.l 24(a0),d0
   10534:	|      move.l d0,-(sp)
   10536:	|      pea 7 <_start+0x7>
   1053a:	|      moveq #12,d0
   1053c:	|      add.l sp,d0
   1053e:	|      move.l d0,-(sp)
   10540:	|      jsr 135b8 <getValueType>
   10546:	|      lea 12(sp),sp
   1054a:	|      tst.w d0
   1054c:	|  /-- bne.s 10552 <builtIn_setCharacterWalkSpeed+0x5e>
   1054e:	|  |   moveq #1,d0
   10550:	+--|-- bra.s 10590 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10552:	|  \-> moveq #24,d0
   10554:	|      add.l 16(sp),d0
   10558:	|      move.l d0,-(sp)
   1055a:	|      jsr 13f3c <trimStack>
   10560:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   10562:	|      move.l 4(sp),d1
   10566:	|      move.l (sp),d0
   10568:	|      move.l d1,-(sp)
   1056a:	|      move.l d0,-(sp)
   1056c:	|      jsr aabc <setCharacterWalkSpeed>
   10572:	|      addq.l #8,sp
   10574:	|      movea.w d0,a0
   10576:	|      moveq #28,d0
   10578:	|      add.l 16(sp),d0
   1057c:	|      move.l a0,-(sp)
   1057e:	|      pea 1 <_start+0x1>
   10582:	|      move.l d0,-(sp)
   10584:	|      jsr 13eaa <setVariable>
   1058a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1058e:	|      moveq #2,d0
}
   10590:	\----> addq.l #8,sp
   10592:	       rts

00010594 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   10594:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10596:	       movea.l 16(sp),a0
   1059a:	       move.l 24(a0),d0
   1059e:	       move.l d0,-(sp)
   105a0:	       pea 1 <_start+0x1>
   105a4:	       move.l sp,d0
   105a6:	       addq.l #8,d0
   105a8:	       move.l d0,-(sp)
   105aa:	       jsr 135b8 <getValueType>
   105b0:	       lea 12(sp),sp
   105b4:	       tst.w d0
   105b6:	   /-- bne.s 105bc <builtIn_turnCharacter+0x28>
   105b8:	   |   moveq #1,d0
   105ba:	/--|-- bra.s 10630 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   105bc:	|  \-> moveq #24,d0
   105be:	|      add.l 16(sp),d0
   105c2:	|      move.l d0,-(sp)
   105c4:	|      jsr 13f3c <trimStack>
   105ca:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   105cc:	|      movea.l 16(sp),a0
   105d0:	|      move.l 24(a0),d0
   105d4:	|      move.l d0,-(sp)
   105d6:	|      pea 7 <_start+0x7>
   105da:	|      moveq #12,d0
   105dc:	|      add.l sp,d0
   105de:	|      move.l d0,-(sp)
   105e0:	|      jsr 135b8 <getValueType>
   105e6:	|      lea 12(sp),sp
   105ea:	|      tst.w d0
   105ec:	|  /-- bne.s 105f2 <builtIn_turnCharacter+0x5e>
   105ee:	|  |   moveq #1,d0
   105f0:	+--|-- bra.s 10630 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   105f2:	|  \-> moveq #24,d0
   105f4:	|      add.l 16(sp),d0
   105f8:	|      move.l d0,-(sp)
   105fa:	|      jsr 13f3c <trimStack>
   10600:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   10602:	|      move.l (sp),d1
   10604:	|      move.l 4(sp),d0
   10608:	|      move.l d1,-(sp)
   1060a:	|      move.l d0,-(sp)
   1060c:	|      jsr ad60 <turnPersonToFace>
   10612:	|      addq.l #8,sp
   10614:	|      movea.w d0,a0
   10616:	|      moveq #28,d0
   10618:	|      add.l 16(sp),d0
   1061c:	|      move.l a0,-(sp)
   1061e:	|      pea 1 <_start+0x1>
   10622:	|      move.l d0,-(sp)
   10624:	|      jsr 13eaa <setVariable>
   1062a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1062e:	|      moveq #2,d0
}
   10630:	\----> addq.l #8,sp
   10632:	       rts

00010634 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   10634:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10636:	       movea.l 16(sp),a0
   1063a:	       move.l 24(a0),d0
   1063e:	       move.l d0,-(sp)
   10640:	       pea 1 <_start+0x1>
   10644:	       move.l sp,d0
   10646:	       addq.l #8,d0
   10648:	       move.l d0,-(sp)
   1064a:	       jsr 135b8 <getValueType>
   10650:	       lea 12(sp),sp
   10654:	       tst.w d0
   10656:	   /-- bne.s 1065c <builtIn_setCharacterExtra+0x28>
   10658:	   |   moveq #1,d0
   1065a:	/--|-- bra.s 106d0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1065c:	|  \-> moveq #24,d0
   1065e:	|      add.l 16(sp),d0
   10662:	|      move.l d0,-(sp)
   10664:	|      jsr 13f3c <trimStack>
   1066a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1066c:	|      movea.l 16(sp),a0
   10670:	|      move.l 24(a0),d0
   10674:	|      move.l d0,-(sp)
   10676:	|      pea 7 <_start+0x7>
   1067a:	|      moveq #12,d0
   1067c:	|      add.l sp,d0
   1067e:	|      move.l d0,-(sp)
   10680:	|      jsr 135b8 <getValueType>
   10686:	|      lea 12(sp),sp
   1068a:	|      tst.w d0
   1068c:	|  /-- bne.s 10692 <builtIn_setCharacterExtra+0x5e>
   1068e:	|  |   moveq #1,d0
   10690:	+--|-- bra.s 106d0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10692:	|  \-> moveq #24,d0
   10694:	|      add.l 16(sp),d0
   10698:	|      move.l d0,-(sp)
   1069a:	|      jsr 13f3c <trimStack>
   106a0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   106a2:	|      move.l (sp),d1
   106a4:	|      move.l 4(sp),d0
   106a8:	|      move.l d1,-(sp)
   106aa:	|      move.l d0,-(sp)
   106ac:	|      jsr aaea <setPersonExtra>
   106b2:	|      addq.l #8,sp
   106b4:	|      movea.w d0,a0
   106b6:	|      moveq #28,d0
   106b8:	|      add.l 16(sp),d0
   106bc:	|      move.l a0,-(sp)
   106be:	|      pea 1 <_start+0x1>
   106c2:	|      move.l d0,-(sp)
   106c4:	|      jsr 13eaa <setVariable>
   106ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106ce:	|      moveq #2,d0
}
   106d0:	\----> addq.l #8,sp
   106d2:	       rts

000106d4 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   106d4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   106d6:	       movea.l 12(sp),a0
   106da:	       move.l 24(a0),d0
   106de:	       move.l d0,-(sp)
   106e0:	       pea 7 <_start+0x7>
   106e4:	       move.l sp,d0
   106e6:	       addq.l #8,d0
   106e8:	       move.l d0,-(sp)
   106ea:	       jsr 135b8 <getValueType>
   106f0:	       lea 12(sp),sp
   106f4:	       tst.w d0
   106f6:	   /-- bne.s 106fc <builtIn_removeCharacter+0x28>
   106f8:	   |   moveq #1,d0
   106fa:	/--|-- bra.s 1071a <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   106fc:	|  \-> moveq #24,d0
   106fe:	|      add.l 12(sp),d0
   10702:	|      move.l d0,-(sp)
   10704:	|      jsr 13f3c <trimStack>
   1070a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1070c:	|      move.l (sp),d0
   1070e:	|      move.l d0,-(sp)
   10710:	|      jsr 9cea <removeOneCharacter>
   10716:	|      addq.l #4,sp
	return BR_CONTINUE;
   10718:	|      moveq #2,d0
}
   1071a:	\----> addq.l #4,sp
   1071c:	       rts

0001071e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1071e:	                lea -28(sp),sp
   10722:	                move.l d2,-(sp)
   10724:	                move.l 44(sp),d1
   10728:	                move.l 48(sp),d0
   1072c:	                move.w d1,d1
   1072e:	                move.w d1,6(sp)
   10732:	                move.w d0,d0
   10734:	                move.w d0,4(sp)
	switch (numParams) {
   10738:	                moveq #2,d0
   1073a:	                cmp.l 36(sp),d0
   1073e:	      /-------- beq.w 10880 <moveChr+0x162>
   10742:	      |         moveq #3,d0
   10744:	      |         cmp.l 36(sp),d0
   10748:	/-----|-------- bne.w 109b4 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1074c:	|     |         movea.l 40(sp),a0
   10750:	|     |         move.l 24(a0),d0
   10754:	|     |         move.l d0,-(sp)
   10756:	|     |         pea 1 <_start+0x1>
   1075a:	|     |         lea 20(sp),a0
   1075e:	|     |         move.l a0,-(sp)
   10760:	|     |         jsr 135b8 <getValueType>
   10766:	|     |         lea 12(sp),sp
   1076a:	|     |         tst.w d0
   1076c:	|     |     /-- bne.s 10774 <moveChr+0x56>
   1076e:	|     |     |   moveq #1,d0
   10770:	|  /--|-----|-- bra.w 109c4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10774:	|  |  |     \-> moveq #24,d0
   10776:	|  |  |         add.l 40(sp),d0
   1077a:	|  |  |         move.l d0,-(sp)
   1077c:	|  |  |         jsr 13f3c <trimStack>
   10782:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10784:	|  |  |         movea.l 40(sp),a0
   10788:	|  |  |         move.l 24(a0),d0
   1078c:	|  |  |         move.l d0,-(sp)
   1078e:	|  |  |         pea 1 <_start+0x1>
   10792:	|  |  |         lea 24(sp),a0
   10796:	|  |  |         move.l a0,-(sp)
   10798:	|  |  |         jsr 135b8 <getValueType>
   1079e:	|  |  |         lea 12(sp),sp
   107a2:	|  |  |         tst.w d0
   107a4:	|  |  |     /-- bne.s 107ac <moveChr+0x8e>
   107a6:	|  |  |     |   moveq #1,d0
   107a8:	|  +--|-----|-- bra.w 109c4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   107ac:	|  |  |     \-> moveq #24,d0
   107ae:	|  |  |         add.l 40(sp),d0
   107b2:	|  |  |         move.l d0,-(sp)
   107b4:	|  |  |         jsr 13f3c <trimStack>
   107ba:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107bc:	|  |  |         movea.l 40(sp),a0
   107c0:	|  |  |         move.l 24(a0),d0
   107c4:	|  |  |         move.l d0,-(sp)
   107c6:	|  |  |         pea 7 <_start+0x7>
   107ca:	|  |  |         lea 16(sp),a0
   107ce:	|  |  |         move.l a0,-(sp)
   107d0:	|  |  |         jsr 135b8 <getValueType>
   107d6:	|  |  |         lea 12(sp),sp
   107da:	|  |  |         tst.w d0
   107dc:	|  |  |     /-- bne.s 107e4 <moveChr+0xc6>
   107de:	|  |  |     |   moveq #1,d0
   107e0:	|  +--|-----|-- bra.w 109c4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   107e4:	|  |  |     \-> moveq #24,d0
   107e6:	|  |  |         add.l 40(sp),d0
   107ea:	|  |  |         move.l d0,-(sp)
   107ec:	|  |  |         jsr 13f3c <trimStack>
   107f2:	|  |  |         addq.l #4,sp

			if (force) {
   107f4:	|  |  |         tst.w 6(sp)
   107f8:	|  |  |     /-- beq.s 10828 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   107fa:	|  |  |     |   movea.l 8(sp),a0
   107fe:	|  |  |     |   move.l 12(sp),d1
   10802:	|  |  |     |   move.l 16(sp),d0
   10806:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb8fac>
   1080a:	|  |  |     |   move.l 44(sp),-(sp)
   1080e:	|  |  |     |   move.l a0,-(sp)
   10810:	|  |  |     |   move.l d1,-(sp)
   10812:	|  |  |     |   move.l d0,-(sp)
   10814:	|  |  |     |   jsr 9566 <forceWalkingPerson>
   1081a:	|  |  |     |   lea 20(sp),sp
   1081e:	|  |  |     |   tst.w d0
   10820:	|  |  |  /--|-- beq.s 1087a <moveChr+0x15c>
   10822:	|  |  |  |  |   moveq #3,d0
   10824:	|  +--|--|--|-- bra.w 109c4 <moveChr+0x2a6>
			} else if (immediate) {
   10828:	|  |  |  |  \-> tst.w 4(sp)
   1082c:	|  |  |  |  /-- beq.s 1084c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   1082e:	|  |  |  |  |   movea.l 8(sp),a0
   10832:	|  |  |  |  |   move.l 12(sp),d1
   10836:	|  |  |  |  |   move.l 16(sp),d0
   1083a:	|  |  |  |  |   move.l a0,-(sp)
   1083c:	|  |  |  |  |   move.l d1,-(sp)
   1083e:	|  |  |  |  |   move.l d0,-(sp)
   10840:	|  |  |  |  |   jsr 986e <jumpPerson>
   10846:	|  |  |  |  |   lea 12(sp),sp
   1084a:	|  |  |  +--|-- bra.s 1087a <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1084c:	|  |  |  |  \-> movea.l 8(sp),a0
   10850:	|  |  |  |      move.l 12(sp),d1
   10854:	|  |  |  |      move.l 16(sp),d0
   10858:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb8fac>
   1085c:	|  |  |  |      move.l 44(sp),-(sp)
   10860:	|  |  |  |      move.l a0,-(sp)
   10862:	|  |  |  |      move.l d1,-(sp)
   10864:	|  |  |  |      move.l d0,-(sp)
   10866:	|  |  |  |      jsr 9a3e <makeWalkingPerson>
   1086c:	|  |  |  |      lea 20(sp),sp
   10870:	|  |  |  |      tst.w d0
   10872:	|  |  |  +----- beq.s 1087a <moveChr+0x15c>
   10874:	|  |  |  |      moveq #3,d0
   10876:	|  +--|--|----- bra.w 109c4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1087a:	|  |  |  \----> moveq #2,d0
   1087c:	|  +--|-------- bra.w 109c4 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10880:	|  |  \-------> movea.l 40(sp),a0
   10884:	|  |            move.l 24(a0),d0
   10888:	|  |            move.l d0,-(sp)
   1088a:	|  |            pea 7 <_start+0x7>
   1088e:	|  |            moveq #32,d0
   10890:	|  |            add.l sp,d0
   10892:	|  |            move.l d0,-(sp)
   10894:	|  |            jsr 135b8 <getValueType>
   1089a:	|  |            lea 12(sp),sp
   1089e:	|  |            tst.w d0
   108a0:	|  |        /-- bne.s 108a8 <moveChr+0x18a>
   108a2:	|  |        |   moveq #1,d0
   108a4:	|  +--------|-- bra.w 109c4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   108a8:	|  |        \-> moveq #24,d0
   108aa:	|  |            add.l 40(sp),d0
   108ae:	|  |            move.l d0,-(sp)
   108b0:	|  |            jsr 13f3c <trimStack>
   108b6:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   108b8:	|  |            movea.l 40(sp),a0
   108bc:	|  |            move.l 24(a0),d0
   108c0:	|  |            move.l d0,-(sp)
   108c2:	|  |            pea 7 <_start+0x7>
   108c6:	|  |            lea 28(sp),a0
   108ca:	|  |            move.l a0,-(sp)
   108cc:	|  |            jsr 135b8 <getValueType>
   108d2:	|  |            lea 12(sp),sp
   108d6:	|  |            tst.w d0
   108d8:	|  |        /-- bne.s 108e0 <moveChr+0x1c2>
   108da:	|  |        |   moveq #1,d0
   108dc:	|  +--------|-- bra.w 109c4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   108e0:	|  |        \-> moveq #24,d0
   108e2:	|  |            add.l 40(sp),d0
   108e6:	|  |            move.l d0,-(sp)
   108e8:	|  |            jsr 13f3c <trimStack>
   108ee:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   108f0:	|  |            move.l 24(sp),d0
   108f4:	|  |            move.l d0,-(sp)
   108f6:	|  |            jsr 14108 <getRegionForObject>
   108fc:	|  |            addq.l #4,sp
   108fe:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10902:	|  |        /-- bne.s 1090a <moveChr+0x1ec>
   10904:	|  |        |   moveq #2,d0
   10906:	|  +--------|-- bra.w 109c4 <moveChr+0x2a6>

			if (force)
   1090a:	|  |        \-> tst.w 6(sp)
   1090e:	|  |        /-- beq.s 1094a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10910:	|  |        |   movea.l 28(sp),a0
   10914:	|  |        |   move.l 24(a0),d2
   10918:	|  |        |   movea.l 20(sp),a1
   1091c:	|  |        |   movea.l 28(sp),a0
   10920:	|  |        |   move.l 20(a0),d1
   10924:	|  |        |   movea.l 28(sp),a0
   10928:	|  |        |   move.l 16(a0),d0
   1092c:	|  |        |   move.l d2,-(sp)
   1092e:	|  |        |   move.l 44(sp),-(sp)
   10932:	|  |        |   move.l a1,-(sp)
   10934:	|  |        |   move.l d1,-(sp)
   10936:	|  |        |   move.l d0,-(sp)
   10938:	|  |        |   jsr 9566 <forceWalkingPerson>
   1093e:	|  |        |   lea 20(sp),sp
   10942:	|  |        |   tst.w d0
   10944:	|  |     /--|-- beq.s 109b0 <moveChr+0x292>
   10946:	|  |     |  |   moveq #3,d0
   10948:	|  +-----|--|-- bra.s 109c4 <moveChr+0x2a6>
			}
			else if (immediate)
   1094a:	|  |     |  \-> tst.w 4(sp)
   1094e:	|  |     |  /-- beq.s 10976 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   10950:	|  |     |  |   movea.l 20(sp),a1
   10954:	|  |     |  |   movea.l 28(sp),a0
   10958:	|  |     |  |   move.l 20(a0),d1
   1095c:	|  |     |  |   movea.l 28(sp),a0
   10960:	|  |     |  |   move.l 16(a0),d0
   10964:	|  |     |  |   move.l a1,-(sp)
   10966:	|  |     |  |   move.l d1,-(sp)
   10968:	|  |     |  |   move.l d0,-(sp)
   1096a:	|  |     |  |   jsr 986e <jumpPerson>
   10970:	|  |     |  |   lea 12(sp),sp
   10974:	|  |     +--|-- bra.s 109b0 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10976:	|  |     |  \-> movea.l 28(sp),a0
   1097a:	|  |     |      move.l 24(a0),d2
   1097e:	|  |     |      movea.l 20(sp),a1
   10982:	|  |     |      movea.l 28(sp),a0
   10986:	|  |     |      move.l 20(a0),d1
   1098a:	|  |     |      movea.l 28(sp),a0
   1098e:	|  |     |      move.l 16(a0),d0
   10992:	|  |     |      move.l d2,-(sp)
   10994:	|  |     |      move.l 44(sp),-(sp)
   10998:	|  |     |      move.l a1,-(sp)
   1099a:	|  |     |      move.l d1,-(sp)
   1099c:	|  |     |      move.l d0,-(sp)
   1099e:	|  |     |      jsr 9a3e <makeWalkingPerson>
   109a4:	|  |     |      lea 20(sp),sp
   109a8:	|  |     |      tst.w d0
   109aa:	|  |     +----- beq.s 109b0 <moveChr+0x292>
   109ac:	|  |     |      moveq #3,d0
   109ae:	|  +-----|----- bra.s 109c4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   109b0:	|  |     \----> moveq #2,d0
   109b2:	|  +----------- bra.s 109c4 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   109b4:	\--|----------> pea 17ffa <PutChar+0x1da2>
   109ba:	   |            jsr 15784 <KPrintF>
   109c0:	   |            addq.l #4,sp
			return BR_ERROR;
   109c2:	   |            moveq #1,d0
	}
}
   109c4:	   \----------> move.l (sp)+,d2
   109c6:	                lea 28(sp),sp
   109ca:	                rts

000109cc <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   109cc:	clr.l -(sp)
   109ce:	clr.l -(sp)
   109d0:	move.l 16(sp),-(sp)
   109d4:	move.l 16(sp),-(sp)
   109d8:	jsr 1071e <moveChr>
   109de:	lea 16(sp),sp
}
   109e2:	rts

000109e4 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   109e4:	clr.l -(sp)
   109e6:	pea 1 <_start+0x1>
   109ea:	move.l 16(sp),-(sp)
   109ee:	move.l 16(sp),-(sp)
   109f2:	jsr 1071e <moveChr>
   109f8:	lea 16(sp),sp
}
   109fc:	rts

000109fe <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   109fe:	pea 1 <_start+0x1>
   10a02:	clr.l -(sp)
   10a04:	move.l 16(sp),-(sp)
   10a08:	move.l 16(sp),-(sp)
   10a0c:	jsr 1071e <moveChr>
   10a12:	lea 16(sp),sp
}
   10a16:	rts

00010a18 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10a18:	jsr 673c <clearStatusBar>
	return BR_CONTINUE;
   10a1e:	moveq #2,d0
}
   10a20:	rts

00010a22 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10a22:	jsr 67e4 <killLastStatus>
	return BR_CONTINUE;
   10a28:	moveq #2,d0
}
   10a2a:	rts

00010a2c <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10a2c:	jsr 66d2 <addStatusBar>
	return BR_CONTINUE;
   10a32:	moveq #2,d0
}
   10a34:	rts

00010a36 <builtIn_statusText>:

builtIn(statusText)
{
   10a36:	       subq.l #8,sp
   10a38:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10a3a:	       movea.l 20(sp),a0
   10a3e:	       move.l 24(a0),d0
   10a42:	       move.l d0,-(sp)
   10a44:	       jsr 13b8e <getTextFromAnyVar>
   10a4a:	       addq.l #4,sp
   10a4c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10a50:	   /-- bne.s 10a56 <builtIn_statusText+0x20>
   10a52:	   |   moveq #1,d0
   10a54:	/--|-- bra.s 10a8a <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10a56:	|  \-> moveq #24,d0
   10a58:	|      add.l 20(sp),d0
   10a5c:	|      move.l d0,-(sp)
   10a5e:	|      jsr 13f3c <trimStack>
   10a64:	|      addq.l #4,sp
	setStatusBar(newText);
   10a66:	|      move.l 8(sp),-(sp)
   10a6a:	|      jsr 6a64 <setStatusBar>
   10a70:	|      addq.l #4,sp
	FreeVec(newText);
   10a72:	|      move.l 8(sp),4(sp)
   10a78:	|      move.l 1add0 <SysBase>,d0
   10a7e:	|      movea.l d0,a6
   10a80:	|      movea.l 4(sp),a1
   10a84:	|      jsr -690(a6)
	return BR_CONTINUE;
   10a88:	|      moveq #2,d0
}
   10a8a:	\----> movea.l (sp)+,a6
   10a8c:	       addq.l #8,sp
   10a8e:	       rts

00010a90 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10a90:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a92:	       movea.l 12(sp),a0
   10a96:	       move.l 24(a0),d0
   10a9a:	       move.l d0,-(sp)
   10a9c:	       pea 1 <_start+0x1>
   10aa0:	       move.l sp,d0
   10aa2:	       addq.l #8,d0
   10aa4:	       move.l d0,-(sp)
   10aa6:	       jsr 135b8 <getValueType>
   10aac:	       lea 12(sp),sp
   10ab0:	       tst.w d0
   10ab2:	   /-- bne.s 10ab8 <builtIn_lightStatus+0x28>
   10ab4:	   |   moveq #1,d0
   10ab6:	/--|-- bra.s 10ad6 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10ab8:	|  \-> moveq #24,d0
   10aba:	|      add.l 12(sp),d0
   10abe:	|      move.l d0,-(sp)
   10ac0:	|      jsr 13f3c <trimStack>
   10ac6:	|      addq.l #4,sp
	setLitStatus (val);
   10ac8:	|      move.l (sp),d0
   10aca:	|      move.l d0,-(sp)
   10acc:	|      jsr 6a54 <setLitStatus>
   10ad2:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ad4:	|      moveq #2,d0
}
   10ad6:	\----> addq.l #4,sp
   10ad8:	       rts

00010ada <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10ada:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10adc:	       movea.l 16(sp),a0
   10ae0:	       move.l 24(a0),d0
   10ae4:	       move.l d0,-(sp)
   10ae6:	       pea 1 <_start+0x1>
   10aea:	       move.l sp,d0
   10aec:	       addq.l #8,d0
   10aee:	       move.l d0,-(sp)
   10af0:	       jsr 135b8 <getValueType>
   10af6:	       lea 12(sp),sp
   10afa:	       tst.w d0
   10afc:	   /-- bne.s 10b02 <builtIn_positionStatus+0x28>
   10afe:	   |   moveq #1,d0
   10b00:	/--|-- bra.s 10b5c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10b02:	|  \-> moveq #24,d0
   10b04:	|      add.l 16(sp),d0
   10b08:	|      move.l d0,-(sp)
   10b0a:	|      jsr 13f3c <trimStack>
   10b10:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b12:	|      movea.l 16(sp),a0
   10b16:	|      move.l 24(a0),d0
   10b1a:	|      move.l d0,-(sp)
   10b1c:	|      pea 1 <_start+0x1>
   10b20:	|      moveq #12,d0
   10b22:	|      add.l sp,d0
   10b24:	|      move.l d0,-(sp)
   10b26:	|      jsr 135b8 <getValueType>
   10b2c:	|      lea 12(sp),sp
   10b30:	|      tst.w d0
   10b32:	|  /-- bne.s 10b38 <builtIn_positionStatus+0x5e>
   10b34:	|  |   moveq #1,d0
   10b36:	+--|-- bra.s 10b5c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10b38:	|  \-> moveq #24,d0
   10b3a:	|      add.l 16(sp),d0
   10b3e:	|      move.l d0,-(sp)
   10b40:	|      jsr 13f3c <trimStack>
   10b46:	|      addq.l #4,sp
	positionStatus (x, y);
   10b48:	|      move.l (sp),d1
   10b4a:	|      move.l 4(sp),d0
   10b4e:	|      move.l d1,-(sp)
   10b50:	|      move.l d0,-(sp)
   10b52:	|      jsr 6846 <positionStatus>
   10b58:	|      addq.l #8,sp
	return BR_CONTINUE;
   10b5a:	|      moveq #2,d0
}
   10b5c:	\----> addq.l #8,sp
   10b5e:	       rts

00010b60 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10b60:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b62:	       movea.l 12(sp),a0
   10b66:	       move.l 24(a0),d0
   10b6a:	       move.l d0,-(sp)
   10b6c:	       pea 1 <_start+0x1>
   10b70:	       move.l sp,d0
   10b72:	       addq.l #8,d0
   10b74:	       move.l d0,-(sp)
   10b76:	       jsr 135b8 <getValueType>
   10b7c:	       lea 12(sp),sp
   10b80:	       tst.w d0
   10b82:	   /-- bne.s 10b88 <builtIn_alignStatus+0x28>
   10b84:	   |   moveq #1,d0
   10b86:	/--|-- bra.s 10ba8 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10b88:	|  \-> moveq #24,d0
   10b8a:	|      add.l 12(sp),d0
   10b8e:	|      move.l d0,-(sp)
   10b90:	|      jsr 13f3c <trimStack>
   10b96:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10b98:	|      move.l (sp),d0
   10b9a:	|      movea.l 1a75c <nowStatus>,a0
   10ba0:	|      move.l d0,d0
   10ba2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10ba6:	|      moveq #2,d0
}
   10ba8:	\----> addq.l #4,sp
   10baa:	       rts

00010bac <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10bac:	             tst.l 4(sp)
   10bb0:	      /----- beq.s 10bbc <getFuncNumForCallback+0x10>
   10bb2:	      |      moveq #1,d0
   10bb4:	      |      cmp.l 4(sp),d0
   10bb8:	      |  /-- beq.s 10bc2 <getFuncNumForCallback+0x16>
   10bba:	   /--|--|-- bra.s 10bf8 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10bbc:	   |  \--|-> clr.l 12(sp)
			break;
   10bc0:	/--|-----|-- bra.s 10c0a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10bc2:	|  |     \-> movea.l 8(sp),a0
   10bc6:	|  |         move.l 24(a0),d0
   10bca:	|  |         move.l d0,-(sp)
   10bcc:	|  |         pea 2 <_start+0x2>
   10bd0:	|  |         move.l 20(sp),-(sp)
   10bd4:	|  |         jsr 135b8 <getValueType>
   10bda:	|  |         lea 12(sp),sp
   10bde:	|  |         tst.w d0
   10be0:	|  |     /-- bne.s 10be6 <getFuncNumForCallback+0x3a>
   10be2:	|  |     |   clr.w d0
   10be4:	|  |  /--|-- bra.s 10c0c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10be6:	|  |  |  \-> moveq #24,d0
   10be8:	|  |  |      add.l 8(sp),d0
   10bec:	|  |  |      move.l d0,-(sp)
   10bee:	|  |  |      jsr 13f3c <trimStack>
   10bf4:	|  |  |      addq.l #4,sp
			break;
   10bf6:	+--|--|----- bra.s 10c0a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10bf8:	|  \--|----> pea 18030 <PutChar+0x1dd8>
   10bfe:	|     |      jsr 15784 <KPrintF>
   10c04:	|     |      addq.l #4,sp
			return FALSE;
   10c06:	|     |      clr.w d0
   10c08:	|     +----- bra.s 10c0c <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10c0a:	\-----|----> moveq #1,d0
}
   10c0c:	      \----> rts

00010c0e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10c0e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10c10:	       move.l sp,d0
   10c12:	       move.l d0,-(sp)
   10c14:	       move.l 16(sp),-(sp)
   10c18:	       move.l 16(sp),-(sp)
   10c1c:	       jsr 10bac <getFuncNumForCallback>
   10c22:	       lea 12(sp),sp
   10c26:	       tst.w d0
   10c28:	/----- beq.s 10c38 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10c2a:	|      movea.l 1a74e <currentEvents>,a0
   10c30:	|      move.l (sp),d0
   10c32:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10c34:	|      moveq #2,d0
   10c36:	|  /-- bra.s 10c3a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10c38:	\--|-> moveq #1,d0
}
   10c3a:	   \-> addq.l #4,sp
   10c3c:	       rts

00010c3e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10c3e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10c40:	       move.l sp,d0
   10c42:	       move.l d0,-(sp)
   10c44:	       move.l 16(sp),-(sp)
   10c48:	       move.l 16(sp),-(sp)
   10c4c:	       jsr 10bac <getFuncNumForCallback>
   10c52:	       lea 12(sp),sp
   10c56:	       tst.w d0
   10c58:	/----- beq.s 10c6a <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10c5a:	|      movea.l 1a74e <currentEvents>,a0
   10c60:	|      move.l (sp),d0
   10c62:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10c66:	|      moveq #2,d0
   10c68:	|  /-- bra.s 10c6c <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   10c6a:	\--|-> moveq #1,d0
}
   10c6c:	   \-> addq.l #4,sp
   10c6e:	       rts

00010c70 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10c70:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10c72:	       move.l sp,d0
   10c74:	       move.l d0,-(sp)
   10c76:	       move.l 16(sp),-(sp)
   10c7a:	       move.l 16(sp),-(sp)
   10c7e:	       jsr 10bac <getFuncNumForCallback>
   10c84:	       lea 12(sp),sp
   10c88:	       tst.w d0
   10c8a:	/----- beq.s 10c9c <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   10c8c:	|      movea.l 1a74e <currentEvents>,a0
   10c92:	|      move.l (sp),d0
   10c94:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   10c98:	|      moveq #2,d0
   10c9a:	|  /-- bra.s 10c9e <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   10c9c:	\--|-> moveq #1,d0
}
   10c9e:	   \-> addq.l #4,sp
   10ca0:	       rts

00010ca2 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   10ca2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10ca4:	       move.l sp,d0
   10ca6:	       move.l d0,-(sp)
   10ca8:	       move.l 16(sp),-(sp)
   10cac:	       move.l 16(sp),-(sp)
   10cb0:	       jsr 10bac <getFuncNumForCallback>
   10cb6:	       lea 12(sp),sp
   10cba:	       tst.w d0
   10cbc:	/----- beq.s 10cce <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   10cbe:	|      movea.l 1a74e <currentEvents>,a0
   10cc4:	|      move.l (sp),d0
   10cc6:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   10cca:	|      moveq #2,d0
   10ccc:	|  /-- bra.s 10cd0 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   10cce:	\--|-> moveq #1,d0
}
   10cd0:	   \-> addq.l #4,sp
   10cd2:	       rts

00010cd4 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   10cd4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10cd6:	       move.l sp,d0
   10cd8:	       move.l d0,-(sp)
   10cda:	       move.l 16(sp),-(sp)
   10cde:	       move.l 16(sp),-(sp)
   10ce2:	       jsr 10bac <getFuncNumForCallback>
   10ce8:	       lea 12(sp),sp
   10cec:	       tst.w d0
   10cee:	/----- beq.s 10d00 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10cf0:	|      movea.l 1a74e <currentEvents>,a0
   10cf6:	|      move.l (sp),d0
   10cf8:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   10cfc:	|      moveq #2,d0
   10cfe:	|  /-- bra.s 10d02 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10d00:	\--|-> moveq #1,d0
}
   10d02:	   \-> addq.l #4,sp
   10d04:	       rts

00010d06 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10d06:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d08:	       move.l sp,d0
   10d0a:	       move.l d0,-(sp)
   10d0c:	       move.l 16(sp),-(sp)
   10d10:	       move.l 16(sp),-(sp)
   10d14:	       jsr 10bac <getFuncNumForCallback>
   10d1a:	       lea 12(sp),sp
   10d1e:	       tst.w d0
   10d20:	/----- beq.s 10d32 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10d22:	|      movea.l 1a74e <currentEvents>,a0
   10d28:	|      move.l (sp),d0
   10d2a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   10d2e:	|      moveq #2,d0
   10d30:	|  /-- bra.s 10d34 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   10d32:	\--|-> moveq #1,d0
}
   10d34:	   \-> addq.l #4,sp
   10d36:	       rts

00010d38 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   10d38:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d3a:	       move.l sp,d0
   10d3c:	       move.l d0,-(sp)
   10d3e:	       move.l 16(sp),-(sp)
   10d42:	       move.l 16(sp),-(sp)
   10d46:	       jsr 10bac <getFuncNumForCallback>
   10d4c:	       lea 12(sp),sp
   10d50:	       tst.w d0
   10d52:	/----- beq.s 10d64 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   10d54:	|      movea.l 1a74e <currentEvents>,a0
   10d5a:	|      move.l (sp),d0
   10d5c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   10d60:	|      moveq #2,d0
   10d62:	|  /-- bra.s 10d66 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   10d64:	\--|-> moveq #1,d0
}
   10d66:	   \-> addq.l #4,sp
   10d68:	       rts

00010d6a <builtIn_spawnSub>:

builtIn (spawnSub)
{
   10d6a:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d6c:	          move.l sp,d0
   10d6e:	          move.l d0,-(sp)
   10d70:	          move.l 16(sp),-(sp)
   10d74:	          move.l 16(sp),-(sp)
   10d78:	          jsr 10bac <getFuncNumForCallback>
   10d7e:	          lea 12(sp),sp
   10d82:	          tst.w d0
   10d84:	/-------- beq.s 10db0 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   10d86:	|         move.l 1ada0 <noStack>,d1
   10d8c:	|         move.l (sp),d0
   10d8e:	|         pea 1 <_start+0x1>
   10d92:	|         move.l d1,-(sp)
   10d94:	|         clr.l -(sp)
   10d96:	|         clr.l -(sp)
   10d98:	|         move.l d0,-(sp)
   10d9a:	|         jsr 5956 <startNewFunctionNum>
   10da0:	|         lea 20(sp),sp
   10da4:	|         tst.l d0
   10da6:	|     /-- bne.s 10dac <builtIn_spawnSub+0x42>
   10da8:	|     |   moveq #1,d0
   10daa:	|  /--|-- bra.s 10db2 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   10dac:	|  |  \-> moveq #2,d0
   10dae:	|  +----- bra.s 10db2 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   10db0:	\--|----> moveq #1,d0
}
   10db2:	   \----> addq.l #4,sp
   10db4:	          rts

00010db6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   10db6:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10db8:	          move.l sp,d0
   10dba:	          addq.l #4,d0
   10dbc:	          move.l d0,-(sp)
   10dbe:	          move.l 20(sp),-(sp)
   10dc2:	          move.l 20(sp),-(sp)
   10dc6:	          jsr 10bac <getFuncNumForCallback>
   10dcc:	          lea 12(sp),sp
   10dd0:	          tst.w d0
   10dd2:	/-------- beq.s 10e08 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   10dd4:	|         move.l 4(sp),d1
   10dd8:	|         move.l sp,d0
   10dda:	|         addq.l #2,d0
   10ddc:	|         move.l d0,-(sp)
   10dde:	|         move.l 20(sp),-(sp)
   10de2:	|         move.l d1,-(sp)
   10de4:	|         jsr 3698 <cancelAFunction>
   10dea:	|         lea 12(sp),sp
		if (killedMyself) {
   10dee:	|         move.w 2(sp),d0
   10df2:	|  /----- beq.s 10e04 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10df4:	|  |      move.l 16(sp),-(sp)
   10df8:	|  |      jsr 35b6 <abortFunction>
   10dfe:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10e00:	|  |      moveq #5,d0
   10e02:	|  |  /-- bra.s 10e0a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10e04:	|  \--|-> moveq #2,d0
   10e06:	|     +-- bra.s 10e0a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   10e08:	\-----|-> moveq #1,d0
}
   10e0a:	      \-> addq.l #8,sp
   10e0c:	          rts

00010e0e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10e0e:	       subq.l #8,sp
   10e10:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10e12:	       movea.l 20(sp),a0
   10e16:	       move.l 24(a0),d0
   10e1a:	       move.l d0,-(sp)
   10e1c:	       jsr 13b8e <getTextFromAnyVar>
   10e22:	       addq.l #4,sp
   10e24:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   10e28:	   /-- bne.s 10e2e <builtIn_stringWidth+0x20>
   10e2a:	   |   moveq #1,d0
   10e2c:	/--|-- bra.s 10e7c <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10e2e:	|  \-> moveq #24,d0
   10e30:	|      add.l 20(sp),d0
   10e34:	|      move.l d0,-(sp)
   10e36:	|      jsr 13f3c <trimStack>
   10e3c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10e3e:	|      move.l 8(sp),-(sp)
   10e42:	|      jsr 13f96 <stringWidth>
   10e48:	|      addq.l #4,sp
   10e4a:	|      move.l d0,d1
   10e4c:	|      moveq #28,d0
   10e4e:	|      add.l 20(sp),d0
   10e52:	|      move.l d1,-(sp)
   10e54:	|      pea 1 <_start+0x1>
   10e58:	|      move.l d0,-(sp)
   10e5a:	|      jsr 13eaa <setVariable>
   10e60:	|      lea 12(sp),sp
	FreeVec(theText);
   10e64:	|      move.l 8(sp),4(sp)
   10e6a:	|      move.l 1add0 <SysBase>,d0
   10e70:	|      movea.l d0,a6
   10e72:	|      movea.l 4(sp),a1
   10e76:	|      jsr -690(a6)
	return BR_CONTINUE;
   10e7a:	|      moveq #2,d0
}
   10e7c:	\----> movea.l (sp)+,a6
   10e7e:	       addq.l #8,sp
   10e80:	       rts

00010e82 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   10e82:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e84:	       movea.l 12(sp),a0
   10e88:	       move.l 24(a0),d0
   10e8c:	       move.l d0,-(sp)
   10e8e:	       pea 1 <_start+0x1>
   10e92:	       move.l sp,d0
   10e94:	       addq.l #8,d0
   10e96:	       move.l d0,-(sp)
   10e98:	       jsr 135b8 <getValueType>
   10e9e:	       lea 12(sp),sp
   10ea2:	       tst.w d0
   10ea4:	   /-- bne.s 10eaa <builtIn_hardScroll+0x28>
   10ea6:	   |   moveq #1,d0
   10ea8:	/--|-- bra.s 10ec8 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   10eaa:	|  \-> moveq #24,d0
   10eac:	|      add.l 12(sp),d0
   10eb0:	|      move.l d0,-(sp)
   10eb2:	|      jsr 13f3c <trimStack>
   10eb8:	|      addq.l #4,sp
	hardScroll (v);
   10eba:	|      move.l (sp),d0
   10ebc:	|      move.l d0,-(sp)
   10ebe:	|      jsr c140 <hardScroll>
   10ec4:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ec6:	|      moveq #2,d0
}
   10ec8:	\----> addq.l #4,sp
   10eca:	       rts

00010ecc <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   10ecc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ece:	       movea.l 12(sp),a0
   10ed2:	       move.l 24(a0),d0
   10ed6:	       move.l d0,-(sp)
   10ed8:	       pea 7 <_start+0x7>
   10edc:	       move.l sp,d0
   10ede:	       addq.l #8,d0
   10ee0:	       move.l d0,-(sp)
   10ee2:	       jsr 135b8 <getValueType>
   10ee8:	       lea 12(sp),sp
   10eec:	       tst.w d0
   10eee:	   /-- bne.s 10ef4 <builtIn_isScreenRegion+0x28>
   10ef0:	   |   moveq #1,d0
   10ef2:	/--|-- bra.s 10f34 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   10ef4:	|  \-> moveq #24,d0
   10ef6:	|      add.l 12(sp),d0
   10efa:	|      move.l d0,-(sp)
   10efc:	|      jsr 13f3c <trimStack>
   10f02:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   10f04:	|      move.l (sp),d0
   10f06:	|      move.l d0,-(sp)
   10f08:	|      jsr 14108 <getRegionForObject>
   10f0e:	|      addq.l #4,sp
   10f10:	|      tst.l d0
   10f12:	|      sne d0
   10f14:	|      neg.b d0
   10f16:	|      moveq #0,d1
   10f18:	|      move.b d0,d1
   10f1a:	|      moveq #28,d0
   10f1c:	|      add.l 12(sp),d0
   10f20:	|      move.l d1,-(sp)
   10f22:	|      pea 1 <_start+0x1>
   10f26:	|      move.l d0,-(sp)
   10f28:	|      jsr 13eaa <setVariable>
   10f2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10f32:	|      moveq #2,d0
}
   10f34:	\----> addq.l #4,sp
   10f36:	       rts

00010f38 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   10f38:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f3a:	       movea.l 12(sp),a0
   10f3e:	       move.l 24(a0),d0
   10f42:	       move.l d0,-(sp)
   10f44:	       pea 1 <_start+0x1>
   10f48:	       move.l sp,d0
   10f4a:	       addq.l #8,d0
   10f4c:	       move.l d0,-(sp)
   10f4e:	       jsr 135b8 <getValueType>
   10f54:	       lea 12(sp),sp
   10f58:	       tst.w d0
   10f5a:	   /-- bne.s 10f60 <builtIn_setSpeechSpeed+0x28>
   10f5c:	   |   moveq #1,d0
   10f5e:	/--|-- bra.s 10fae <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   10f60:	|  \-> moveq #24,d0
   10f62:	|      add.l 12(sp),d0
   10f66:	|      move.l d0,-(sp)
   10f68:	|      jsr 13f3c <trimStack>
   10f6e:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   10f70:	|      move.l (sp),d0
   10f72:	|      move.l d0,-(sp)
   10f74:	|      jsr 15bc0 <__floatsisf>
   10f7a:	|      addq.l #4,sp
   10f7c:	|      move.l #1008981770,-(sp)
   10f82:	|      move.l d0,-(sp)
   10f84:	|      jsr 15c72 <__mulsf3>
   10f8a:	|      addq.l #8,sp
   10f8c:	|      move.l d0,1a760 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   10f92:	|      moveq #28,d0
   10f94:	|      add.l 12(sp),d0
   10f98:	|      pea 1 <_start+0x1>
   10f9c:	|      pea 1 <_start+0x1>
   10fa0:	|      move.l d0,-(sp)
   10fa2:	|      jsr 13eaa <setVariable>
   10fa8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fac:	|      moveq #2,d0
}
   10fae:	\----> addq.l #4,sp
   10fb0:	       rts

00010fb2 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   10fb2:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb4:	       movea.l 12(sp),a0
   10fb8:	       move.l 24(a0),d0
   10fbc:	       move.l d0,-(sp)
   10fbe:	       pea 1 <_start+0x1>
   10fc2:	       move.l sp,d0
   10fc4:	       addq.l #8,d0
   10fc6:	       move.l d0,-(sp)
   10fc8:	       jsr 135b8 <getValueType>
   10fce:	       lea 12(sp),sp
   10fd2:	       tst.w d0
   10fd4:	   /-- bne.s 10fda <builtIn_setFontSpacing+0x28>
   10fd6:	   |   moveq #1,d0
   10fd8:	/--|-- bra.s 11010 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   10fda:	|  \-> move.l (sp),d0
   10fdc:	|      move.l d0,d0
   10fde:	|      move.w d0,1acda <fontSpace>
	trimStack (&fun -> stack);
   10fe4:	|      moveq #24,d0
   10fe6:	|      add.l 12(sp),d0
   10fea:	|      move.l d0,-(sp)
   10fec:	|      jsr 13f3c <trimStack>
   10ff2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10ff4:	|      moveq #28,d0
   10ff6:	|      add.l 12(sp),d0
   10ffa:	|      pea 1 <_start+0x1>
   10ffe:	|      pea 1 <_start+0x1>
   11002:	|      move.l d0,-(sp)
   11004:	|      jsr 13eaa <setVariable>
   1100a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1100e:	|      moveq #2,d0
}
   11010:	\----> addq.l #4,sp
   11012:	       rts

00011014 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11014:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11016:	          movea.l 12(sp),a0
   1101a:	          move.l 24(a0),d0
   1101e:	          move.l d0,-(sp)
   11020:	          pea 1 <_start+0x1>
   11024:	          move.l sp,d0
   11026:	          addq.l #8,d0
   11028:	          move.l d0,-(sp)
   1102a:	          jsr 135b8 <getValueType>
   11030:	          lea 12(sp),sp
   11034:	          tst.w d0
   11036:	      /-- bne.s 1103c <builtIn_transitionLevel+0x28>
   11038:	      |   moveq #1,d0
   1103a:	/-----|-- bra.s 11090 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1103c:	|     \-> moveq #24,d0
   1103e:	|         add.l 12(sp),d0
   11042:	|         move.l d0,-(sp)
   11044:	|         jsr 13f3c <trimStack>
   1104a:	|         addq.l #4,sp

	if (number < 0)
   1104c:	|         move.l (sp),d0
   1104e:	|     /-- bpl.s 11058 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11050:	|     |   clr.b 1a74c <brightnessLevel>
   11056:	|  /--|-- bra.s 11074 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11058:	|  |  \-> move.l (sp),d0
   1105a:	|  |      cmpi.l #255,d0
   11060:	|  |  /-- ble.s 1106a <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11062:	|  |  |   st 1a74c <brightnessLevel>
   11068:	|  +--|-- bra.s 11074 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1106a:	|  |  \-> move.l (sp),d0
   1106c:	|  |      move.l d0,d0
   1106e:	|  |      move.b d0,1a74c <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11074:	|  \----> moveq #28,d0
   11076:	|         add.l 12(sp),d0
   1107a:	|         pea 1 <_start+0x1>
   1107e:	|         pea 1 <_start+0x1>
   11082:	|         move.l d0,-(sp)
   11084:	|         jsr 13eaa <setVariable>
   1108a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1108e:	|         moveq #2,d0
}
   11090:	\-------> addq.l #4,sp
   11092:	          rts

00011094 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11094:	movea.l 8(sp),a0
   11098:	move.l 24(a0),d0
   1109c:	move.l d0,-(sp)
   1109e:	jsr 13af8 <getBoolean>
   110a4:	addq.l #4,sp
   110a6:	move.w d0,1ad70 <captureAllKeys>
	trimStack (&fun -> stack);
   110ac:	moveq #24,d0
   110ae:	add.l 8(sp),d0
   110b2:	move.l d0,-(sp)
   110b4:	jsr 13f3c <trimStack>
   110ba:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   110bc:	move.w 1ad70 <captureAllKeys>,d0
   110c2:	movea.w d0,a0
   110c4:	moveq #28,d0
   110c6:	add.l 8(sp),d0
   110ca:	move.l a0,-(sp)
   110cc:	pea 1 <_start+0x1>
   110d0:	move.l d0,-(sp)
   110d2:	jsr 13eaa <setVariable>
   110d8:	lea 12(sp),sp
	return BR_CONTINUE;
   110dc:	moveq #2,d0
}
   110de:	rts

000110e0 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   110e0:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110e4:	       movea.l 20(sp),a0
   110e8:	       move.l 24(a0),d0
   110ec:	       move.l d0,-(sp)
   110ee:	       pea 1 <_start+0x1>
   110f2:	       moveq #12,d0
   110f4:	       add.l sp,d0
   110f6:	       move.l d0,-(sp)
   110f8:	       jsr 135b8 <getValueType>
   110fe:	       lea 12(sp),sp
   11102:	       tst.w d0
   11104:	   /-- bne.s 1110c <builtIn_spinCharacter+0x2c>
   11106:	   |   moveq #1,d0
   11108:	/--|-- bra.w 111bc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1110c:	|  \-> moveq #24,d0
   1110e:	|      add.l 20(sp),d0
   11112:	|      move.l d0,-(sp)
   11114:	|      jsr 13f3c <trimStack>
   1111a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1111c:	|      movea.l 20(sp),a0
   11120:	|      move.l 24(a0),d0
   11124:	|      move.l d0,-(sp)
   11126:	|      pea 7 <_start+0x7>
   1112a:	|      lea 8(sp),a0
   1112e:	|      move.l a0,-(sp)
   11130:	|      jsr 135b8 <getValueType>
   11136:	|      lea 12(sp),sp
   1113a:	|      tst.w d0
   1113c:	|  /-- bne.s 11142 <builtIn_spinCharacter+0x62>
   1113e:	|  |   moveq #1,d0
   11140:	+--|-- bra.s 111bc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11142:	|  \-> moveq #24,d0
   11144:	|      add.l 20(sp),d0
   11148:	|      move.l d0,-(sp)
   1114a:	|      jsr 13f3c <trimStack>
   11150:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11152:	|      move.l (sp),d0
   11154:	|      move.l d0,-(sp)
   11156:	|      jsr 9514 <findPerson>
   1115c:	|      addq.l #4,sp
   1115e:	|      move.l d0,8(sp)
	if (thisPerson) {
   11162:	|  /-- beq.s 111a2 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11164:	|  |   move.l 4(sp),d0
   11168:	|  |   movea.l 8(sp),a0
   1116c:	|  |   move.l d0,92(a0)
		thisPerson -> spinning = TRUE;
   11170:	|  |   movea.l 8(sp),a0
   11174:	|  |   move.w #1,62(a0)
		thisPerson -> continueAfterWalking = fun;
   1117a:	|  |   movea.l 8(sp),a0
   1117e:	|  |   move.l 20(sp),64(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11184:	|  |   moveq #28,d0
   11186:	|  |   add.l 20(sp),d0
   1118a:	|  |   pea 1 <_start+0x1>
   1118e:	|  |   pea 1 <_start+0x1>
   11192:	|  |   move.l d0,-(sp)
   11194:	|  |   jsr 13eaa <setVariable>
   1119a:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1119e:	|  |   moveq #3,d0
   111a0:	+--|-- bra.s 111bc <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   111a2:	|  \-> moveq #28,d0
   111a4:	|      add.l 20(sp),d0
   111a8:	|      clr.l -(sp)
   111aa:	|      pea 1 <_start+0x1>
   111ae:	|      move.l d0,-(sp)
   111b0:	|      jsr 13eaa <setVariable>
   111b6:	|      lea 12(sp),sp
		return BR_CONTINUE;
   111ba:	|      moveq #2,d0
	}
}
   111bc:	\----> lea 12(sp),sp
   111c0:	       rts

000111c2 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   111c2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111c4:	          movea.l 16(sp),a0
   111c8:	          move.l 24(a0),d0
   111cc:	          move.l d0,-(sp)
   111ce:	          pea 7 <_start+0x7>
   111d2:	          move.l sp,d0
   111d4:	          addq.l #8,d0
   111d6:	          move.l d0,-(sp)
   111d8:	          jsr 135b8 <getValueType>
   111de:	          lea 12(sp),sp
   111e2:	          tst.w d0
   111e4:	      /-- bne.s 111ea <builtIn_getCharacterDirection+0x28>
   111e6:	      |   moveq #1,d0
   111e8:	/-----|-- bra.s 11248 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   111ea:	|     \-> moveq #24,d0
   111ec:	|         add.l 16(sp),d0
   111f0:	|         move.l d0,-(sp)
   111f2:	|         jsr 13f3c <trimStack>
   111f8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   111fa:	|         move.l (sp),d0
   111fc:	|         move.l d0,-(sp)
   111fe:	|         jsr 9514 <findPerson>
   11204:	|         addq.l #4,sp
   11206:	|         move.l d0,4(sp)
	if (thisPerson) {
   1120a:	|  /----- beq.s 1122e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1120c:	|  |      movea.l 4(sp),a0
   11210:	|  |      move.l 102(a0),d1
   11214:	|  |      moveq #28,d0
   11216:	|  |      add.l 16(sp),d0
   1121a:	|  |      move.l d1,-(sp)
   1121c:	|  |      pea 1 <_start+0x1>
   11220:	|  |      move.l d0,-(sp)
   11222:	|  |      jsr 13eaa <setVariable>
   11228:	|  |      lea 12(sp),sp
   1122c:	|  |  /-- bra.s 11246 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1122e:	|  \--|-> moveq #28,d0
   11230:	|     |   add.l 16(sp),d0
   11234:	|     |   clr.l -(sp)
   11236:	|     |   pea 1 <_start+0x1>
   1123a:	|     |   move.l d0,-(sp)
   1123c:	|     |   jsr 13eaa <setVariable>
   11242:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11246:	|     \-> moveq #2,d0
}
   11248:	\-------> addq.l #8,sp
   1124a:	          rts

0001124c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1124c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1124e:	       movea.l 16(sp),a0
   11252:	       move.l 24(a0),d0
   11256:	       move.l d0,-(sp)
   11258:	       pea 7 <_start+0x7>
   1125c:	       move.l sp,d0
   1125e:	       addq.l #8,d0
   11260:	       move.l d0,-(sp)
   11262:	       jsr 135b8 <getValueType>
   11268:	       lea 12(sp),sp
   1126c:	       tst.w d0
   1126e:	   /-- bne.s 11274 <builtIn_isCharacter+0x28>
   11270:	   |   moveq #1,d0
   11272:	/--|-- bra.s 112b6 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11274:	|  \-> moveq #24,d0
   11276:	|      add.l 16(sp),d0
   1127a:	|      move.l d0,-(sp)
   1127c:	|      jsr 13f3c <trimStack>
   11282:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11284:	|      move.l (sp),d0
   11286:	|      move.l d0,-(sp)
   11288:	|      jsr 9514 <findPerson>
   1128e:	|      addq.l #4,sp
   11290:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11294:	|      sne d0
   11296:	|      neg.b d0
   11298:	|      moveq #0,d1
   1129a:	|      move.b d0,d1
   1129c:	|      moveq #28,d0
   1129e:	|      add.l 16(sp),d0
   112a2:	|      move.l d1,-(sp)
   112a4:	|      pea 1 <_start+0x1>
   112a8:	|      move.l d0,-(sp)
   112aa:	|      jsr 13eaa <setVariable>
   112b0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112b4:	|      moveq #2,d0
}
   112b6:	\----> addq.l #8,sp
   112b8:	       rts

000112ba <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   112ba:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112bc:	          movea.l 16(sp),a0
   112c0:	          move.l 24(a0),d0
   112c4:	          move.l d0,-(sp)
   112c6:	          pea 7 <_start+0x7>
   112ca:	          move.l sp,d0
   112cc:	          addq.l #8,d0
   112ce:	          move.l d0,-(sp)
   112d0:	          jsr 135b8 <getValueType>
   112d6:	          lea 12(sp),sp
   112da:	          tst.w d0
   112dc:	      /-- bne.s 112e2 <builtIn_normalCharacter+0x28>
   112de:	      |   moveq #1,d0
   112e0:	/-----|-- bra.s 1135e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   112e2:	|     \-> moveq #24,d0
   112e4:	|         add.l 16(sp),d0
   112e8:	|         move.l d0,-(sp)
   112ea:	|         jsr 13f3c <trimStack>
   112f0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   112f2:	|         move.l (sp),d0
   112f4:	|         move.l d0,-(sp)
   112f6:	|         jsr 9514 <findPerson>
   112fc:	|         addq.l #4,sp
   112fe:	|         move.l d0,4(sp)
	if (thisPerson)
   11302:	|  /----- beq.s 11344 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   11304:	|  |      movea.l 4(sp),a0
   11308:	|  |      movea.l 76(a0),a0
   1130c:	|  |      move.l (a0),d1
   1130e:	|  |      movea.l 4(sp),a0
   11312:	|  |      move.l 102(a0),d0
   11316:	|  |      add.l d0,d0
   11318:	|  |      add.l d0,d0
   1131a:	|  |      movea.l d1,a0
   1131c:	|  |      adda.l d0,a0
   1131e:	|  |      move.l (a0),d0
   11320:	|  |      movea.l 4(sp),a0
   11324:	|  |      move.l d0,68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11328:	|  |      moveq #28,d0
   1132a:	|  |      add.l 16(sp),d0
   1132e:	|  |      pea 1 <_start+0x1>
   11332:	|  |      pea 1 <_start+0x1>
   11336:	|  |      move.l d0,-(sp)
   11338:	|  |      jsr 13eaa <setVariable>
   1133e:	|  |      lea 12(sp),sp
   11342:	|  |  /-- bra.s 1135c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11344:	|  \--|-> moveq #28,d0
   11346:	|     |   add.l 16(sp),d0
   1134a:	|     |   clr.l -(sp)
   1134c:	|     |   pea 1 <_start+0x1>
   11350:	|     |   move.l d0,-(sp)
   11352:	|     |   jsr 13eaa <setVariable>
   11358:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1135c:	|     \-> moveq #2,d0
}
   1135e:	\-------> addq.l #8,sp
   11360:	          rts

00011362 <builtIn_isMoving>:

builtIn(isMoving)
{
   11362:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11364:	          movea.l 16(sp),a0
   11368:	          move.l 24(a0),d0
   1136c:	          move.l d0,-(sp)
   1136e:	          pea 7 <_start+0x7>
   11372:	          move.l sp,d0
   11374:	          addq.l #8,d0
   11376:	          move.l d0,-(sp)
   11378:	          jsr 135b8 <getValueType>
   1137e:	          lea 12(sp),sp
   11382:	          tst.w d0
   11384:	      /-- bne.s 1138a <builtIn_isMoving+0x28>
   11386:	      |   moveq #1,d0
   11388:	/-----|-- bra.s 113ea <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1138a:	|     \-> moveq #24,d0
   1138c:	|         add.l 16(sp),d0
   11390:	|         move.l d0,-(sp)
   11392:	|         jsr 13f3c <trimStack>
   11398:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1139a:	|         move.l (sp),d0
   1139c:	|         move.l d0,-(sp)
   1139e:	|         jsr 9514 <findPerson>
   113a4:	|         addq.l #4,sp
   113a6:	|         move.l d0,4(sp)
	if (thisPerson)
   113aa:	|  /----- beq.s 113d0 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   113ac:	|  |      movea.l 4(sp),a0
   113b0:	|  |      move.w 60(a0),d0
   113b4:	|  |      movea.w d0,a0
   113b6:	|  |      moveq #28,d0
   113b8:	|  |      add.l 16(sp),d0
   113bc:	|  |      move.l a0,-(sp)
   113be:	|  |      pea 1 <_start+0x1>
   113c2:	|  |      move.l d0,-(sp)
   113c4:	|  |      jsr 13eaa <setVariable>
   113ca:	|  |      lea 12(sp),sp
   113ce:	|  |  /-- bra.s 113e8 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   113d0:	|  \--|-> moveq #28,d0
   113d2:	|     |   add.l 16(sp),d0
   113d6:	|     |   clr.l -(sp)
   113d8:	|     |   pea 1 <_start+0x1>
   113dc:	|     |   move.l d0,-(sp)
   113de:	|     |   jsr 13eaa <setVariable>
   113e4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   113e8:	|     \-> moveq #2,d0
}
   113ea:	\-------> addq.l #8,sp
   113ec:	          rts

000113ee <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   113ee:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113f2:	          movea.l 20(sp),a0
   113f6:	          move.l 24(a0),d0
   113fa:	          move.l d0,-(sp)
   113fc:	          pea 7 <_start+0x7>
   11400:	          lea 8(sp),a0
   11404:	          move.l a0,-(sp)
   11406:	          jsr 135b8 <getValueType>
   1140c:	          lea 12(sp),sp
   11410:	          tst.w d0
   11412:	      /-- bne.s 1141a <builtIn_fetchEvent+0x2c>
   11414:	      |   moveq #1,d0
   11416:	/-----|-- bra.w 114ae <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1141a:	|     \-> moveq #24,d0
   1141c:	|         add.l 20(sp),d0
   11420:	|         move.l d0,-(sp)
   11422:	|         jsr 13f3c <trimStack>
   11428:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1142a:	|         movea.l 20(sp),a0
   1142e:	|         move.l 24(a0),d0
   11432:	|         move.l d0,-(sp)
   11434:	|         pea 7 <_start+0x7>
   11438:	|         moveq #12,d0
   1143a:	|         add.l sp,d0
   1143c:	|         move.l d0,-(sp)
   1143e:	|         jsr 135b8 <getValueType>
   11444:	|         lea 12(sp),sp
   11448:	|         tst.w d0
   1144a:	|     /-- bne.s 11450 <builtIn_fetchEvent+0x62>
   1144c:	|     |   moveq #1,d0
   1144e:	+-----|-- bra.s 114ae <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11450:	|     \-> moveq #24,d0
   11452:	|         add.l 20(sp),d0
   11456:	|         move.l d0,-(sp)
   11458:	|         jsr 13f3c <trimStack>
   1145e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   11460:	|         move.l (sp),d1
   11462:	|         move.l 4(sp),d0
   11466:	|         move.l d1,-(sp)
   11468:	|         move.l d0,-(sp)
   1146a:	|         jsr c422 <getCombinationFunction>
   11470:	|         addq.l #8,sp
   11472:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   11476:	|  /----- beq.s 11494 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11478:	|  |      moveq #28,d0
   1147a:	|  |      add.l 20(sp),d0
   1147e:	|  |      move.l 8(sp),-(sp)
   11482:	|  |      pea 2 <_start+0x2>
   11486:	|  |      move.l d0,-(sp)
   11488:	|  |      jsr 13eaa <setVariable>
   1148e:	|  |      lea 12(sp),sp
   11492:	|  |  /-- bra.s 114ac <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11494:	|  \--|-> moveq #28,d0
   11496:	|     |   add.l 20(sp),d0
   1149a:	|     |   clr.l -(sp)
   1149c:	|     |   pea 1 <_start+0x1>
   114a0:	|     |   move.l d0,-(sp)
   114a2:	|     |   jsr 13eaa <setVariable>
   114a8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   114ac:	|     \-> moveq #2,d0
}
   114ae:	\-------> lea 12(sp),sp
   114b2:	          rts

000114b4 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   114b4:	       lea -24(sp),sp
   114b8:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   114ba:	       movea.l 36(sp),a0
   114be:	       move.l 24(a0),d0
   114c2:	       move.l d0,-(sp)
   114c4:	       jsr 13b8e <getTextFromAnyVar>
   114ca:	       addq.l #4,sp
   114cc:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   114d0:	       moveq #24,d0
   114d2:	       add.l 36(sp),d0
   114d6:	       move.l d0,-(sp)
   114d8:	       jsr 13f3c <trimStack>
   114de:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   114e0:	       move.l 24(sp),-(sp)
   114e4:	       jsr 2fe <encodeFilename>
   114ea:	       addq.l #4,sp
   114ec:	       move.l d0,20(sp)
    FreeVec(namNormal);
   114f0:	       move.l 24(sp),16(sp)
   114f6:	       move.l 1add0 <SysBase>,d0
   114fc:	       movea.l d0,a6
   114fe:	       movea.l 16(sp),a1
   11502:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   11506:	       move.l 20(sp),-(sp)
   1150a:	       jsr d1da <failSecurityCheck>
   11510:	       addq.l #4,sp
   11512:	       tst.w d0
   11514:	   /-- beq.s 1151a <builtIn_deleteFile+0x66>
   11516:	   |   moveq #1,d0
   11518:	/--|-- bra.s 11568 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1151a:	|  \-> move.l 20(sp),12(sp)
   11520:	|      move.l 1add8 <DOSBase>,d0
   11526:	|      movea.l d0,a6
   11528:	|      move.l 12(sp),d1
   1152c:	|      jsr -72(a6)
   11530:	|      move.l d0,8(sp)
   11534:	|      move.l 8(sp),d1
   11538:	|      moveq #28,d0
   1153a:	|      add.l 36(sp),d0
   1153e:	|      move.l d1,-(sp)
   11540:	|      pea 1 <_start+0x1>
   11544:	|      move.l d0,-(sp)
   11546:	|      jsr 13eaa <setVariable>
   1154c:	|      lea 12(sp),sp
    FreeVec(nam);
   11550:	|      move.l 20(sp),4(sp)
   11556:	|      move.l 1add0 <SysBase>,d0
   1155c:	|      movea.l d0,a6
   1155e:	|      movea.l 4(sp),a1
   11562:	|      jsr -690(a6)

    return BR_CONTINUE;
   11566:	|      moveq #2,d0
}
   11568:	\----> movea.l (sp)+,a6
   1156a:	       lea 24(sp),sp
   1156e:	       rts

00011570 <builtIn_renameFile>:

builtIn(renameFile)
{
   11570:	       lea -40(sp),sp
   11574:	       move.l a6,-(sp)
   11576:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11578:	       movea.l 56(sp),a0
   1157c:	       move.l 24(a0),d0
   11580:	       move.l d0,-(sp)
   11582:	       jsr 13b8e <getTextFromAnyVar>
   11588:	       addq.l #4,sp
   1158a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1158e:	       move.l 44(sp),-(sp)
   11592:	       jsr 2fe <encodeFilename>
   11598:	       addq.l #4,sp
   1159a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1159e:	       moveq #24,d0
   115a0:	       add.l 56(sp),d0
   115a4:	       move.l d0,-(sp)
   115a6:	       jsr 13f3c <trimStack>
   115ac:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   115ae:	       move.l 40(sp),-(sp)
   115b2:	       jsr d1da <failSecurityCheck>
   115b8:	       addq.l #4,sp
   115ba:	       tst.w d0
   115bc:	   /-- beq.s 115c4 <builtIn_renameFile+0x54>
   115be:	   |   moveq #1,d0
   115c0:	/--|-- bra.w 116aa <builtIn_renameFile+0x13a>
	FreeVec(temp);
   115c4:	|  \-> move.l 44(sp),36(sp)
   115ca:	|      move.l 1add0 <SysBase>,d0
   115d0:	|      movea.l d0,a6
   115d2:	|      movea.l 36(sp),a1
   115d6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   115da:	|      movea.l 56(sp),a0
   115de:	|      move.l 24(a0),d0
   115e2:	|      move.l d0,-(sp)
   115e4:	|      jsr 13b8e <getTextFromAnyVar>
   115ea:	|      addq.l #4,sp
   115ec:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   115f0:	|      move.l 44(sp),-(sp)
   115f4:	|      jsr 2fe <encodeFilename>
   115fa:	|      addq.l #4,sp
   115fc:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   11600:	|      moveq #24,d0
   11602:	|      add.l 56(sp),d0
   11606:	|      move.l d0,-(sp)
   11608:	|      jsr 13f3c <trimStack>
   1160e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   11610:	|      move.l 32(sp),-(sp)
   11614:	|      jsr d1da <failSecurityCheck>
   1161a:	|      addq.l #4,sp
   1161c:	|      tst.w d0
   1161e:	|  /-- beq.s 11626 <builtIn_renameFile+0xb6>
   11620:	|  |   moveq #1,d0
   11622:	+--|-- bra.w 116aa <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11626:	|  \-> move.l 44(sp),28(sp)
   1162c:	|      move.l 1add0 <SysBase>,d0
   11632:	|      movea.l d0,a6
   11634:	|      movea.l 28(sp),a1
   11638:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1163c:	|      move.l 32(sp),24(sp)
   11642:	|      move.l 40(sp),20(sp)
   11648:	|      move.l 1add8 <DOSBase>,d0
   1164e:	|      movea.l d0,a6
   11650:	|      move.l 24(sp),d1
   11654:	|      move.l 20(sp),d2
   11658:	|      jsr -78(a6)
   1165c:	|      move.l d0,16(sp)
   11660:	|      move.l 16(sp),d1
   11664:	|      moveq #28,d0
   11666:	|      add.l 56(sp),d0
   1166a:	|      move.l d1,-(sp)
   1166c:	|      pea 1 <_start+0x1>
   11670:	|      move.l d0,-(sp)
   11672:	|      jsr 13eaa <setVariable>
   11678:	|      lea 12(sp),sp
	FreeVec(nam);
   1167c:	|      move.l 32(sp),12(sp)
   11682:	|      move.l 1add0 <SysBase>,d0
   11688:	|      movea.l d0,a6
   1168a:	|      movea.l 12(sp),a1
   1168e:	|      jsr -690(a6)
	FreeVec(newnam);
   11692:	|      move.l 40(sp),8(sp)
   11698:	|      move.l 1add0 <SysBase>,d0
   1169e:	|      movea.l d0,a6
   116a0:	|      movea.l 8(sp),a1
   116a4:	|      jsr -690(a6)

	return BR_CONTINUE;
   116a8:	|      moveq #2,d0
}
   116aa:	\----> move.l (sp)+,d2
   116ac:	       movea.l (sp)+,a6
   116ae:	       lea 40(sp),sp
   116b2:	       rts

000116b4 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   116b4:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   116b6:	       movea.l 12(sp),a0
   116ba:	       move.l 24(a0),d0
   116be:	       move.l d0,-(sp)
   116c0:	       pea 5 <_start+0x5>
   116c4:	       move.l sp,d0
   116c6:	       addq.l #8,d0
   116c8:	       move.l d0,-(sp)
   116ca:	       jsr 135b8 <getValueType>
   116d0:	       lea 12(sp),sp
   116d4:	       tst.w d0
   116d6:	   /-- bne.s 116dc <builtIn_cacheSound+0x28>
   116d8:	   |   moveq #1,d0
   116da:	/--|-- bra.s 11704 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   116dc:	|  \-> moveq #24,d0
   116de:	|      add.l 12(sp),d0
   116e2:	|      move.l d0,-(sp)
   116e4:	|      jsr 13f3c <trimStack>
   116ea:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   116ec:	|      move.l (sp),d0
   116ee:	|      move.l d0,-(sp)
   116f0:	|      jsr c022 <cacheSound>
   116f6:	|      addq.l #4,sp
   116f8:	|      moveq #-1,d1
   116fa:	|      cmp.l d0,d1
   116fc:	|  /-- bne.s 11702 <builtIn_cacheSound+0x4e>
   116fe:	|  |   moveq #1,d0
   11700:	+--|-- bra.s 11704 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   11702:	|  \-> moveq #2,d0
}
   11704:	\----> addq.l #4,sp
   11706:	       rts

00011708 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   11708:	pea 18045 <PutChar+0x1ded>
   1170e:	jsr 15784 <KPrintF>
   11714:	addq.l #4,sp
	return BR_CONTINUE;
   11716:	moveq #2,d0
}
   11718:	rts

0001171a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   1171a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1171e:	          movea.l 20(sp),a0
   11722:	          move.l 24(a0),d0
   11726:	          move.l d0,-(sp)
   11728:	          pea 1 <_start+0x1>
   1172c:	          moveq #12,d0
   1172e:	          add.l sp,d0
   11730:	          move.l d0,-(sp)
   11732:	          jsr 135b8 <getValueType>
   11738:	          lea 12(sp),sp
   1173c:	          tst.w d0
   1173e:	      /-- bne.s 11746 <builtIn_setCharacterSpinSpeed+0x2c>
   11740:	      |   moveq #1,d0
   11742:	/-----|-- bra.w 117e0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   11746:	|     \-> moveq #24,d0
   11748:	|         add.l 20(sp),d0
   1174c:	|         move.l d0,-(sp)
   1174e:	|         jsr 13f3c <trimStack>
   11754:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11756:	|         movea.l 20(sp),a0
   1175a:	|         move.l 24(a0),d0
   1175e:	|         move.l d0,-(sp)
   11760:	|         pea 7 <_start+0x7>
   11764:	|         lea 8(sp),a0
   11768:	|         move.l a0,-(sp)
   1176a:	|         jsr 135b8 <getValueType>
   11770:	|         lea 12(sp),sp
   11774:	|         tst.w d0
   11776:	|     /-- bne.s 1177c <builtIn_setCharacterSpinSpeed+0x62>
   11778:	|     |   moveq #1,d0
   1177a:	+-----|-- bra.s 117e0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1177c:	|     \-> moveq #24,d0
   1177e:	|         add.l 20(sp),d0
   11782:	|         move.l d0,-(sp)
   11784:	|         jsr 13f3c <trimStack>
   1178a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1178c:	|         move.l (sp),d0
   1178e:	|         move.l d0,-(sp)
   11790:	|         jsr 9514 <findPerson>
   11796:	|         addq.l #4,sp
   11798:	|         move.l d0,8(sp)

	if (thisPerson) {
   1179c:	|  /----- beq.s 117c6 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   1179e:	|  |      move.l 4(sp),d0
   117a2:	|  |      movea.l 8(sp),a0
   117a6:	|  |      move.l d0,118(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   117aa:	|  |      moveq #28,d0
   117ac:	|  |      add.l 20(sp),d0
   117b0:	|  |      pea 1 <_start+0x1>
   117b4:	|  |      pea 1 <_start+0x1>
   117b8:	|  |      move.l d0,-(sp)
   117ba:	|  |      jsr 13eaa <setVariable>
   117c0:	|  |      lea 12(sp),sp
   117c4:	|  |  /-- bra.s 117de <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   117c6:	|  \--|-> moveq #28,d0
   117c8:	|     |   add.l 20(sp),d0
   117cc:	|     |   clr.l -(sp)
   117ce:	|     |   pea 1 <_start+0x1>
   117d2:	|     |   move.l d0,-(sp)
   117d4:	|     |   jsr 13eaa <setVariable>
   117da:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   117de:	|     \-> moveq #2,d0
}
   117e0:	\-------> lea 12(sp),sp
   117e4:	          rts

000117e6 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   117e6:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117ea:	          movea.l 20(sp),a0
   117ee:	          move.l 24(a0),d0
   117f2:	          move.l d0,-(sp)
   117f4:	          pea 1 <_start+0x1>
   117f8:	          moveq #12,d0
   117fa:	          add.l sp,d0
   117fc:	          move.l d0,-(sp)
   117fe:	          jsr 135b8 <getValueType>
   11804:	          lea 12(sp),sp
   11808:	          tst.w d0
   1180a:	      /-- bne.s 11812 <builtIn_setCharacterAngleOffset+0x2c>
   1180c:	      |   moveq #1,d0
   1180e:	/-----|-- bra.w 118ac <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11812:	|     \-> moveq #24,d0
   11814:	|         add.l 20(sp),d0
   11818:	|         move.l d0,-(sp)
   1181a:	|         jsr 13f3c <trimStack>
   11820:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11822:	|         movea.l 20(sp),a0
   11826:	|         move.l 24(a0),d0
   1182a:	|         move.l d0,-(sp)
   1182c:	|         pea 7 <_start+0x7>
   11830:	|         lea 8(sp),a0
   11834:	|         move.l a0,-(sp)
   11836:	|         jsr 135b8 <getValueType>
   1183c:	|         lea 12(sp),sp
   11840:	|         tst.w d0
   11842:	|     /-- bne.s 11848 <builtIn_setCharacterAngleOffset+0x62>
   11844:	|     |   moveq #1,d0
   11846:	+-----|-- bra.s 118ac <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11848:	|     \-> moveq #24,d0
   1184a:	|         add.l 20(sp),d0
   1184e:	|         move.l d0,-(sp)
   11850:	|         jsr 13f3c <trimStack>
   11856:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11858:	|         move.l (sp),d0
   1185a:	|         move.l d0,-(sp)
   1185c:	|         jsr 9514 <findPerson>
   11862:	|         addq.l #4,sp
   11864:	|         move.l d0,8(sp)

	if (thisPerson) {
   11868:	|  /----- beq.s 11892 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   1186a:	|  |      move.l 4(sp),d0
   1186e:	|  |      movea.l 8(sp),a0
   11872:	|  |      move.l d0,96(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11876:	|  |      moveq #28,d0
   11878:	|  |      add.l 20(sp),d0
   1187c:	|  |      pea 1 <_start+0x1>
   11880:	|  |      pea 1 <_start+0x1>
   11884:	|  |      move.l d0,-(sp)
   11886:	|  |      jsr 13eaa <setVariable>
   1188c:	|  |      lea 12(sp),sp
   11890:	|  |  /-- bra.s 118aa <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11892:	|  \--|-> moveq #28,d0
   11894:	|     |   add.l 20(sp),d0
   11898:	|     |   clr.l -(sp)
   1189a:	|     |   pea 1 <_start+0x1>
   1189e:	|     |   move.l d0,-(sp)
   118a0:	|     |   jsr 13eaa <setVariable>
   118a6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   118aa:	|     \-> moveq #2,d0
}
   118ac:	\-------> lea 12(sp),sp
   118b0:	          rts

000118b2 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   118b2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118b4:	       movea.l 12(sp),a0
   118b8:	       move.l 24(a0),d0
   118bc:	       move.l d0,-(sp)
   118be:	       pea 1 <_start+0x1>
   118c2:	       move.l sp,d0
   118c4:	       addq.l #8,d0
   118c6:	       move.l d0,-(sp)
   118c8:	       jsr 135b8 <getValueType>
   118ce:	       lea 12(sp),sp
   118d2:	       tst.w d0
   118d4:	   /-- bne.s 118da <builtIn_transitionMode+0x28>
   118d6:	   |   moveq #1,d0
   118d8:	/--|-- bra.s 11910 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   118da:	|  \-> move.l (sp),d0
   118dc:	|      move.l d0,d0
   118de:	|      move.b d0,1acb0 <fadeMode>
	trimStack (&fun -> stack);
   118e4:	|      moveq #24,d0
   118e6:	|      add.l 12(sp),d0
   118ea:	|      move.l d0,-(sp)
   118ec:	|      jsr 13f3c <trimStack>
   118f2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   118f4:	|      moveq #28,d0
   118f6:	|      add.l 12(sp),d0
   118fa:	|      pea 1 <_start+0x1>
   118fe:	|      pea 1 <_start+0x1>
   11902:	|      move.l d0,-(sp)
   11904:	|      jsr 13eaa <setVariable>
   1190a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1190e:	|      moveq #2,d0
}
   11910:	\----> addq.l #4,sp
   11912:	       rts

00011914 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11914:	moveq #24,d0
   11916:	add.l 8(sp),d0
   1191a:	move.l d0,-(sp)
   1191c:	jsr 13f3c <trimStack>
   11922:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   11924:	moveq #28,d0
   11926:	add.l 8(sp),d0
   1192a:	pea 1 <_start+0x1>
   1192e:	pea 1 <_start+0x1>
   11932:	move.l d0,-(sp)
   11934:	jsr 13eaa <setVariable>
   1193a:	lea 12(sp),sp
	return BR_CONTINUE;
   1193e:	moveq #2,d0
}
   11940:	rts

00011942 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   11942:	pea 1806f <PutChar+0x1e17>
   11948:	jsr 15784 <KPrintF>
   1194e:	addq.l #4,sp
	return BR_CONTINUE;
   11950:	moveq #2,d0
}
   11952:	rts

00011954 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   11954:	       lea -16(sp),sp
   11958:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   1195a:	       movea.l 28(sp),a0
   1195e:	       move.l 24(a0),d0
   11962:	       move.l d0,-(sp)
   11964:	       jsr 13b8e <getTextFromAnyVar>
   1196a:	       addq.l #4,sp
   1196c:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   11970:	   /-- bne.s 11978 <builtIn_saveCustomData+0x24>
   11972:	   |   moveq #1,d0
   11974:	/--|-- bra.w 11a2a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   11978:	|  \-> move.l 16(sp),-(sp)
   1197c:	|      jsr 2fe <encodeFilename>
   11982:	|      addq.l #4,sp
   11984:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   11988:	|      move.l 16(sp),8(sp)
   1198e:	|      move.l 1add0 <SysBase>,d0
   11994:	|      movea.l d0,a6
   11996:	|      movea.l 8(sp),a1
   1199a:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   1199e:	|      move.l 12(sp),-(sp)
   119a2:	|      jsr d1da <failSecurityCheck>
   119a8:	|      addq.l #4,sp
   119aa:	|      tst.w d0
   119ac:	|  /-- beq.s 119b2 <builtIn_saveCustomData+0x5e>
   119ae:	|  |   moveq #1,d0
   119b0:	+--|-- bra.s 11a2a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   119b2:	|  \-> moveq #24,d0
   119b4:	|      add.l 28(sp),d0
   119b8:	|      move.l d0,-(sp)
   119ba:	|      jsr 13f3c <trimStack>
   119c0:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   119c2:	|      movea.l 28(sp),a0
   119c6:	|      movea.l 24(a0),a0
   119ca:	|      move.l (a0),d0
   119cc:	|      moveq #6,d1
   119ce:	|      cmp.l d0,d1
   119d0:	|  /-- beq.s 119e4 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   119d2:	|  |   pea 1809c <PutChar+0x1e44>
   119d8:	|  |   jsr 15784 <KPrintF>
   119de:	|  |   addq.l #4,sp
		return BR_ERROR;
   119e0:	|  |   moveq #1,d0
   119e2:	+--|-- bra.s 11a2a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   119e4:	|  \-> movea.l 28(sp),a0
   119e8:	|      move.l 24(a0),d0
   119ec:	|      move.l d0,-(sp)
   119ee:	|      move.l 16(sp),-(sp)
   119f2:	|      jsr ce2a <stackToFile>
   119f8:	|      addq.l #8,sp
   119fa:	|      tst.w d0
   119fc:	|  /-- bne.s 11a02 <builtIn_saveCustomData+0xae>
   119fe:	|  |   moveq #1,d0
   11a00:	+--|-- bra.s 11a2a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11a02:	|  \-> moveq #24,d0
   11a04:	|      add.l 28(sp),d0
   11a08:	|      move.l d0,-(sp)
   11a0a:	|      jsr 13f3c <trimStack>
   11a10:	|      addq.l #4,sp
	FreeVec(fileName);
   11a12:	|      move.l 12(sp),4(sp)
   11a18:	|      move.l 1add0 <SysBase>,d0
   11a1e:	|      movea.l d0,a6
   11a20:	|      movea.l 4(sp),a1
   11a24:	|      jsr -690(a6)
	return BR_CONTINUE;
   11a28:	|      moveq #2,d0
}
   11a2a:	\----> movea.l (sp)+,a6
   11a2c:	       lea 16(sp),sp
   11a30:	       rts

00011a32 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11a32:	       lea -28(sp),sp
   11a36:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11a38:	       movea.l 40(sp),a0
   11a3c:	       move.l 24(a0),d0
   11a40:	       move.l d0,-(sp)
   11a42:	       jsr 13b8e <getTextFromAnyVar>
   11a48:	       addq.l #4,sp
   11a4a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11a4e:	   /-- bne.s 11a56 <builtIn_loadCustomData+0x24>
   11a50:	   |   moveq #1,d0
   11a52:	/--|-- bra.w 11b52 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11a56:	|  \-> move.l 28(sp),-(sp)
   11a5a:	|      jsr 2fe <encodeFilename>
   11a60:	|      addq.l #4,sp
   11a62:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11a66:	|      move.l 28(sp),20(sp)
   11a6c:	|      move.l 1add0 <SysBase>,d0
   11a72:	|      movea.l d0,a6
   11a74:	|      movea.l 20(sp),a1
   11a78:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11a7c:	|      move.l 24(sp),-(sp)
   11a80:	|      jsr d1da <failSecurityCheck>
   11a86:	|      addq.l #4,sp
   11a88:	|      tst.w d0
   11a8a:	|  /-- beq.s 11a92 <builtIn_loadCustomData+0x60>
   11a8c:	|  |   moveq #1,d0
   11a8e:	+--|-- bra.w 11b52 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11a92:	|  \-> moveq #24,d0
   11a94:	|      add.l 40(sp),d0
   11a98:	|      move.l d0,-(sp)
   11a9a:	|      jsr 13f3c <trimStack>
   11aa0:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11aa2:	|      moveq #28,d0
   11aa4:	|      add.l 40(sp),d0
   11aa8:	|      move.l d0,-(sp)
   11aaa:	|      jsr 13806 <unlinkVar>
   11ab0:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11ab2:	|      movea.l 40(sp),a0
   11ab6:	|      moveq #6,d0
   11ab8:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11abc:	|      moveq #12,d0
   11abe:	|      move.l d0,16(sp)
   11ac2:	|      clr.l 12(sp)
   11ac6:	|      move.l 1add0 <SysBase>,d0
   11acc:	|      movea.l d0,a6
   11ace:	|      move.l 16(sp),d0
   11ad2:	|      move.l 12(sp),d1
   11ad6:	|      jsr -684(a6)
   11ada:	|      move.l d0,8(sp)
   11ade:	|      move.l 8(sp),d0
   11ae2:	|      movea.l 40(sp),a0
   11ae6:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11aea:	|      movea.l 40(sp),a0
   11aee:	|      move.l 32(a0),d0
   11af2:	|  /-- bne.s 11af8 <builtIn_loadCustomData+0xc6>
   11af4:	|  |   moveq #1,d0
   11af6:	+--|-- bra.s 11b52 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11af8:	|  \-> movea.l 40(sp),a0
   11afc:	|      movea.l 32(a0),a0
   11b00:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11b02:	|      movea.l 40(sp),a0
   11b06:	|      movea.l 32(a0),a0
   11b0a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11b0e:	|      movea.l 40(sp),a0
   11b12:	|      movea.l 32(a0),a0
   11b16:	|      moveq #1,d0
   11b18:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11b1c:	|      movea.l 40(sp),a0
   11b20:	|      move.l 32(a0),d0
   11b24:	|      move.l d0,-(sp)
   11b26:	|      move.l 28(sp),-(sp)
   11b2a:	|      jsr c864 <fileToStack>
   11b30:	|      addq.l #8,sp
   11b32:	|      tst.w d0
   11b34:	|  /-- bne.s 11b3a <builtIn_loadCustomData+0x108>
   11b36:	|  |   moveq #1,d0
   11b38:	+--|-- bra.s 11b52 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11b3a:	|  \-> move.l 24(sp),4(sp)
   11b40:	|      move.l 1add0 <SysBase>,d0
   11b46:	|      movea.l d0,a6
   11b48:	|      movea.l 4(sp),a1
   11b4c:	|      jsr -690(a6)
	return BR_CONTINUE;
   11b50:	|      moveq #2,d0
}
   11b52:	\----> movea.l (sp)+,a6
   11b54:	       lea 28(sp),sp
   11b58:	       rts

00011b5a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11b5a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b5c:	       movea.l 12(sp),a0
   11b60:	       move.l 24(a0),d0
   11b64:	       move.l d0,-(sp)
   11b66:	       pea 1 <_start+0x1>
   11b6a:	       move.l sp,d0
   11b6c:	       addq.l #8,d0
   11b6e:	       move.l d0,-(sp)
   11b70:	       jsr 135b8 <getValueType>
   11b76:	       lea 12(sp),sp
   11b7a:	       tst.w d0
   11b7c:	   /-- bne.s 11b82 <builtIn_setCustomEncoding+0x28>
   11b7e:	   |   moveq #1,d0
   11b80:	/--|-- bra.s 11bb8 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11b82:	|  \-> move.l (sp),d0
   11b84:	|      move.l d0,d0
   11b86:	|      move.w d0,1aee0 <saveEncoding>
	trimStack (&fun -> stack);
   11b8c:	|      moveq #24,d0
   11b8e:	|      add.l 12(sp),d0
   11b92:	|      move.l d0,-(sp)
   11b94:	|      jsr 13f3c <trimStack>
   11b9a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11b9c:	|      moveq #28,d0
   11b9e:	|      add.l 12(sp),d0
   11ba2:	|      pea 1 <_start+0x1>
   11ba6:	|      pea 1 <_start+0x1>
   11baa:	|      move.l d0,-(sp)
   11bac:	|      jsr 13eaa <setVariable>
   11bb2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11bb6:	|      moveq #2,d0
}
   11bb8:	\----> addq.l #4,sp
   11bba:	       rts

00011bbc <builtIn_freeSound>:

builtIn(freeSound)
{
   11bbc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bbe:	       movea.l 12(sp),a0
   11bc2:	       move.l 24(a0),d0
   11bc6:	       move.l d0,-(sp)
   11bc8:	       pea 5 <_start+0x5>
   11bcc:	       move.l sp,d0
   11bce:	       addq.l #8,d0
   11bd0:	       move.l d0,-(sp)
   11bd2:	       jsr 135b8 <getValueType>
   11bd8:	       lea 12(sp),sp
   11bdc:	       tst.w d0
   11bde:	   /-- bne.s 11be4 <builtIn_freeSound+0x28>
   11be0:	   |   moveq #1,d0
   11be2:	/--|-- bra.s 11c02 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11be4:	|  \-> moveq #24,d0
   11be6:	|      add.l 12(sp),d0
   11bea:	|      move.l d0,-(sp)
   11bec:	|      jsr 13f3c <trimStack>
   11bf2:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11bf4:	|      move.l (sp),d0
   11bf6:	|      move.l d0,-(sp)
   11bf8:	|      jsr c026 <huntKillFreeSound>
   11bfe:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c00:	|      moveq #2,d0
}
   11c02:	\----> addq.l #4,sp
   11c04:	       rts

00011c06 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11c06:	       lea -12(sp),sp
   11c0a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c0c:	       movea.l 24(sp),a0
   11c10:	       move.l 24(a0),d0
   11c14:	       move.l d0,-(sp)
   11c16:	       pea 1 <_start+0x1>
   11c1a:	       moveq #16,d0
   11c1c:	       add.l sp,d0
   11c1e:	       move.l d0,-(sp)
   11c20:	       jsr 135b8 <getValueType>
   11c26:	       lea 12(sp),sp
   11c2a:	       tst.w d0
   11c2c:	   /-- bne.s 11c34 <builtIn_parallaxAdd+0x2e>
   11c2e:	   |   moveq #1,d0
   11c30:	/--|-- bra.w 11d08 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11c34:	|  \-> moveq #24,d0
   11c36:	|      add.l 24(sp),d0
   11c3a:	|      move.l d0,-(sp)
   11c3c:	|      jsr 13f3c <trimStack>
   11c42:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c44:	|      movea.l 24(sp),a0
   11c48:	|      move.l 24(a0),d0
   11c4c:	|      move.l d0,-(sp)
   11c4e:	|      pea 1 <_start+0x1>
   11c52:	|      moveq #20,d0
   11c54:	|      add.l sp,d0
   11c56:	|      move.l d0,-(sp)
   11c58:	|      jsr 135b8 <getValueType>
   11c5e:	|      lea 12(sp),sp
   11c62:	|      tst.w d0
   11c64:	|  /-- bne.s 11c6c <builtIn_parallaxAdd+0x66>
   11c66:	|  |   moveq #1,d0
   11c68:	+--|-- bra.w 11d08 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11c6c:	|  \-> moveq #24,d0
   11c6e:	|      add.l 24(sp),d0
   11c72:	|      move.l d0,-(sp)
   11c74:	|      jsr 13f3c <trimStack>
   11c7a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c7c:	|      movea.l 24(sp),a0
   11c80:	|      move.l 24(a0),d0
   11c84:	|      move.l d0,-(sp)
   11c86:	|      pea 5 <_start+0x5>
   11c8a:	|      lea 12(sp),a0
   11c8e:	|      move.l a0,-(sp)
   11c90:	|      jsr 135b8 <getValueType>
   11c96:	|      lea 12(sp),sp
   11c9a:	|      tst.w d0
   11c9c:	|  /-- bne.s 11ca2 <builtIn_parallaxAdd+0x9c>
   11c9e:	|  |   moveq #1,d0
   11ca0:	+--|-- bra.s 11d08 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11ca2:	|  \-> moveq #24,d0
   11ca4:	|      add.l 24(sp),d0
   11ca8:	|      move.l d0,-(sp)
   11caa:	|      jsr 13f3c <trimStack>
   11cb0:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   11cb2:	|      move.l 8(sp),d0
   11cb6:	|      move.l d0,d0
   11cb8:	|      moveq #0,d2
   11cba:	|      move.w d0,d2
   11cbc:	|      move.l 12(sp),d0
   11cc0:	|      move.l d0,d0
   11cc2:	|      moveq #0,d1
   11cc4:	|      move.w d0,d1
   11cc6:	|      move.l 4(sp),d0
   11cca:	|      move.l d0,d0
   11ccc:	|      move.w d0,d0
   11cce:	|      andi.l #65535,d0
   11cd4:	|      move.l d2,-(sp)
   11cd6:	|      move.l d1,-(sp)
   11cd8:	|      move.l d0,-(sp)
   11cda:	|      jsr c242 <loadParallax>
   11ce0:	|      lea 12(sp),sp
   11ce4:	|      tst.w d0
   11ce6:	|  /-- bne.s 11cec <builtIn_parallaxAdd+0xe6>
   11ce8:	|  |   moveq #1,d0
   11cea:	+--|-- bra.s 11d08 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   11cec:	|  \-> moveq #28,d0
   11cee:	|      add.l 24(sp),d0
   11cf2:	|      pea 1 <_start+0x1>
   11cf6:	|      pea 1 <_start+0x1>
   11cfa:	|      move.l d0,-(sp)
   11cfc:	|      jsr 13eaa <setVariable>
   11d02:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11d06:	|      moveq #2,d0
}
   11d08:	\----> move.l (sp)+,d2
   11d0a:	       lea 12(sp),sp
   11d0e:	       rts

00011d10 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11d10:	jsr c17a <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11d16:	moveq #28,d0
   11d18:	add.l 8(sp),d0
   11d1c:	pea 1 <_start+0x1>
   11d20:	pea 1 <_start+0x1>
   11d24:	move.l d0,-(sp)
   11d26:	jsr 13eaa <setVariable>
   11d2c:	lea 12(sp),sp
	return BR_CONTINUE;
   11d30:	moveq #2,d0
}
   11d32:	rts

00011d34 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   11d34:	pea 180ba <PutChar+0x1e62>
   11d3a:	jsr 15784 <KPrintF>
   11d40:	addq.l #4,sp

	return BR_CONTINUE;
   11d42:	moveq #2,d0
}
   11d44:	rts

00011d46 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   11d46:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   11d48:	             movea.l 16(sp),a0
   11d4c:	             movea.l 24(a0),a0
   11d50:	             move.l (a0),d0
   11d52:	             moveq #1,d1
   11d54:	             cmp.l d0,d1
   11d56:	      /----- beq.s 11d9e <builtIn_makeFastArray+0x58>
   11d58:	      |      moveq #6,d1
   11d5a:	      |      cmp.l d0,d1
   11d5c:	/-----|----- bne.s 11ddc <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   11d5e:	|     |      movea.l 16(sp),a0
   11d62:	|     |      movea.l 24(a0),a0
   11d66:	|     |      move.l 4(a0),d1
   11d6a:	|     |      moveq #28,d0
   11d6c:	|     |      add.l 16(sp),d0
   11d70:	|     |      move.l d1,-(sp)
   11d72:	|     |      move.l d0,-(sp)
   11d74:	|     |      jsr 1366a <makeFastArrayFromStack>
   11d7a:	|     |      addq.l #8,sp
   11d7c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   11d80:	|     |      moveq #24,d0
   11d82:	|     |      add.l 16(sp),d0
   11d86:	|     |      move.l d0,-(sp)
   11d88:	|     |      jsr 13f3c <trimStack>
   11d8e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   11d90:	|     |      tst.w 6(sp)
   11d94:	|     |  /-- beq.s 11d9a <builtIn_makeFastArray+0x54>
   11d96:	|     |  |   moveq #2,d0
   11d98:	|  /--|--|-- bra.s 11dee <builtIn_makeFastArray+0xa8>
   11d9a:	|  |  |  \-> moveq #1,d0
   11d9c:	|  +--|----- bra.s 11dee <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   11d9e:	|  |  \----> movea.l 16(sp),a0
   11da2:	|  |         movea.l 24(a0),a0
   11da6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   11dac:	|  |         moveq #24,d0
   11dae:	|  |         add.l 16(sp),d0
   11db2:	|  |         move.l d0,-(sp)
   11db4:	|  |         jsr 13f3c <trimStack>
   11dba:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   11dbc:	|  |         moveq #28,d0
   11dbe:	|  |         add.l 16(sp),d0
   11dc2:	|  |         move.l 2(sp),-(sp)
   11dc6:	|  |         move.l d0,-(sp)
   11dc8:	|  |         jsr 136d4 <makeFastArraySize>
   11dce:	|  |         addq.l #8,sp
   11dd0:	|  |         tst.w d0
   11dd2:	|  |     /-- beq.s 11dd8 <builtIn_makeFastArray+0x92>
   11dd4:	|  |     |   moveq #2,d0
   11dd6:	|  +-----|-- bra.s 11dee <builtIn_makeFastArray+0xa8>
   11dd8:	|  |     \-> moveq #1,d0
   11dda:	|  +-------- bra.s 11dee <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   11ddc:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11dde:	   |         pea 180e3 <PutChar+0x1e8b>
   11de4:	   |         jsr 15784 <KPrintF>
   11dea:	   |         addq.l #4,sp
	return BR_ERROR;
   11dec:	   |         moveq #1,d0
}
   11dee:	   \-------> addq.l #8,sp
   11df0:	             rts

00011df2 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11df2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11df4:	          movea.l 16(sp),a0
   11df8:	          move.l 24(a0),d0
   11dfc:	          move.l d0,-(sp)
   11dfe:	          pea 7 <_start+0x7>
   11e02:	          move.l sp,d0
   11e04:	          addq.l #8,d0
   11e06:	          move.l d0,-(sp)
   11e08:	          jsr 135b8 <getValueType>
   11e0e:	          lea 12(sp),sp
   11e12:	          tst.w d0
   11e14:	      /-- bne.s 11e1a <builtIn_getCharacterScale+0x28>
   11e16:	      |   moveq #1,d0
   11e18:	/-----|-- bra.s 11e94 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   11e1a:	|     \-> moveq #24,d0
   11e1c:	|         add.l 16(sp),d0
   11e20:	|         move.l d0,-(sp)
   11e22:	|         jsr 13f3c <trimStack>
   11e28:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11e2a:	|         move.l (sp),d0
   11e2c:	|         move.l d0,-(sp)
   11e2e:	|         jsr 9514 <findPerson>
   11e34:	|         addq.l #4,sp
   11e36:	|         move.l d0,4(sp)
	if (pers) {
   11e3a:	|  /----- beq.s 11e7a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   11e3c:	|  |      movea.l 4(sp),a0
   11e40:	|  |      move.l 28(a0),d0
   11e44:	|  |      move.l #1120403456,-(sp)
   11e4a:	|  |      move.l d0,-(sp)
   11e4c:	|  |      jsr 15c72 <__mulsf3>
   11e52:	|  |      addq.l #8,sp
   11e54:	|  |      move.l d0,-(sp)
   11e56:	|  |      jsr 15b58 <__fixsfsi>
   11e5c:	|  |      addq.l #4,sp
   11e5e:	|  |      move.l d0,d1
   11e60:	|  |      moveq #28,d0
   11e62:	|  |      add.l 16(sp),d0
   11e66:	|  |      move.l d1,-(sp)
   11e68:	|  |      pea 1 <_start+0x1>
   11e6c:	|  |      move.l d0,-(sp)
   11e6e:	|  |      jsr 13eaa <setVariable>
   11e74:	|  |      lea 12(sp),sp
   11e78:	|  |  /-- bra.s 11e92 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11e7a:	|  \--|-> moveq #28,d0
   11e7c:	|     |   add.l 16(sp),d0
   11e80:	|     |   clr.l -(sp)
   11e82:	|     |   pea 1 <_start+0x1>
   11e86:	|     |   move.l d0,-(sp)
   11e88:	|     |   jsr 13eaa <setVariable>
   11e8e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11e92:	|     \-> moveq #2,d0
}
   11e94:	\-------> addq.l #8,sp
   11e96:	          rts

00011e98 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   11e98:	move.l 1af04 <gameSettings>,d0
   11e9e:	move.l d0,d1
   11ea0:	moveq #28,d0
   11ea2:	add.l 8(sp),d0
   11ea6:	move.l d1,-(sp)
   11ea8:	pea 1 <_start+0x1>
   11eac:	move.l d0,-(sp)
   11eae:	jsr 13eaa <setVariable>
   11eb4:	lea 12(sp),sp
	return BR_CONTINUE;
   11eb8:	moveq #2,d0
}
   11eba:	rts

00011ebc <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   11ebc:	moveq #24,d0
   11ebe:	add.l 8(sp),d0
   11ec2:	move.l d0,-(sp)
   11ec4:	jsr 13f3c <trimStack>
   11eca:	addq.l #4,sp
	trimStack (&fun -> stack);
   11ecc:	moveq #24,d0
   11ece:	add.l 8(sp),d0
   11ed2:	move.l d0,-(sp)
   11ed4:	jsr 13f3c <trimStack>
   11eda:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   11edc:	moveq #28,d0
   11ede:	add.l 8(sp),d0
   11ee2:	clr.l -(sp)
   11ee4:	pea 1 <_start+0x1>
   11ee8:	move.l d0,-(sp)
   11eea:	jsr 13eaa <setVariable>
   11ef0:	lea 12(sp),sp

	return BR_CONTINUE;
   11ef4:	moveq #2,d0

}
   11ef6:	rts

00011ef8 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   11ef8:	move.l 1a756 <lastFramesPerSecond>,d1
   11efe:	moveq #28,d0
   11f00:	add.l 8(sp),d0
   11f04:	move.l d1,-(sp)
   11f06:	pea 1 <_start+0x1>
   11f0a:	move.l d0,-(sp)
   11f0c:	jsr 13eaa <setVariable>
   11f12:	lea 12(sp),sp
	return BR_CONTINUE;
   11f16:	moveq #2,d0
}
   11f18:	rts

00011f1a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   11f1a:	moveq #2,d0
}
   11f1c:	rts

00011f1e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   11f1e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f22:	          movea.l 60(sp),a0
   11f26:	          move.l 24(a0),d0
   11f2a:	          move.l d0,-(sp)
   11f2c:	          pea 1 <_start+0x1>
   11f30:	          pea 1acec <thumbHeight>
   11f36:	          jsr 135b8 <getValueType>
   11f3c:	          lea 12(sp),sp
   11f40:	          tst.w d0
   11f42:	      /-- bne.s 11f4a <builtIn_setThumbnailSize+0x2c>
   11f44:	      |   moveq #1,d0
   11f46:	/-----|-- bra.w 12006 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   11f4a:	|     \-> moveq #24,d0
   11f4c:	|         add.l 60(sp),d0
   11f50:	|         move.l d0,-(sp)
   11f52:	|         jsr 13f3c <trimStack>
   11f58:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f5a:	|         movea.l 60(sp),a0
   11f5e:	|         move.l 24(a0),d0
   11f62:	|         move.l d0,-(sp)
   11f64:	|         pea 1 <_start+0x1>
   11f68:	|         pea 1ace8 <thumbWidth>
   11f6e:	|         jsr 135b8 <getValueType>
   11f74:	|         lea 12(sp),sp
   11f78:	|         tst.w d0
   11f7a:	|     /-- bne.s 11f82 <builtIn_setThumbnailSize+0x64>
   11f7c:	|     |   moveq #1,d0
   11f7e:	+-----|-- bra.w 12006 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   11f82:	|     \-> moveq #24,d0
   11f84:	|         add.l 60(sp),d0
   11f88:	|         move.l d0,-(sp)
   11f8a:	|         jsr 13f3c <trimStack>
   11f90:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   11f92:	|         move.l 1ace8 <thumbWidth>,d0
   11f98:	|     /-- bmi.s 11fc6 <builtIn_setThumbnailSize+0xa8>
   11f9a:	|     |   move.l 1acec <thumbHeight>,d0
   11fa0:	|     +-- bmi.s 11fc6 <builtIn_setThumbnailSize+0xa8>
   11fa2:	|     |   move.l 1ace8 <thumbWidth>,d0
   11fa8:	|     |   move.l d0,d1
   11faa:	|     |   move.l 1ad24 <winWidth>,d0
   11fb0:	|     |   cmp.l d1,d0
   11fb2:	|     +-- bcs.s 11fc6 <builtIn_setThumbnailSize+0xa8>
   11fb4:	|     |   move.l 1acec <thumbHeight>,d0
   11fba:	|     |   move.l d0,d1
   11fbc:	|     |   move.l 1ad28 <winHeight>,d0
   11fc2:	|     |   cmp.l d1,d0
   11fc4:	|  /--|-- bcc.s 12004 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   11fc6:	|  |  \-> move.l 1acec <thumbHeight>,d1
   11fcc:	|  |      move.l 1ace8 <thumbWidth>,d0
   11fd2:	|  |      move.l d1,-(sp)
   11fd4:	|  |      move.l d0,-(sp)
   11fd6:	|  |      pea 1810a <PutChar+0x1eb2>
   11fdc:	|  |      lea 14(sp),a0
   11fe0:	|  |      move.l a0,-(sp)
   11fe2:	|  |      jsr 12dc2 <sprintf>
   11fe8:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   11fec:	|  |      lea 2(sp),a0
   11ff0:	|  |      move.l a0,-(sp)
   11ff2:	|  |      pea 18112 <PutChar+0x1eba>
   11ff8:	|  |      jsr 15784 <KPrintF>
   11ffe:	|  |      addq.l #8,sp
		return BR_ERROR;
   12000:	|  |      moveq #1,d0
   12002:	+--|----- bra.s 12006 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12004:	|  \----> moveq #2,d0
}
   12006:	\-------> lea 52(sp),sp
   1200a:	          rts

0001200c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1200c:	       lea -12(sp),sp
   12010:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12012:	       movea.l 24(sp),a0
   12016:	       move.l 24(a0),d0
   1201a:	       move.l d0,-(sp)
   1201c:	       pea 1 <_start+0x1>
   12020:	       lea 12(sp),a0
   12024:	       move.l a0,-(sp)
   12026:	       jsr 135b8 <getValueType>
   1202c:	       lea 12(sp),sp
   12030:	       tst.w d0
   12032:	   /-- bne.s 1203a <builtIn_hasFlag+0x2e>
   12034:	   |   moveq #1,d0
   12036:	/--|-- bra.w 120ca <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1203a:	|  \-> moveq #24,d0
   1203c:	|      add.l 24(sp),d0
   12040:	|      move.l d0,-(sp)
   12042:	|      jsr 13f3c <trimStack>
   12048:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1204a:	|      movea.l 24(sp),a0
   1204e:	|      move.l 24(a0),d0
   12052:	|      move.l d0,-(sp)
   12054:	|      pea 7 <_start+0x7>
   12058:	|      moveq #16,d0
   1205a:	|      add.l sp,d0
   1205c:	|      move.l d0,-(sp)
   1205e:	|      jsr 135b8 <getValueType>
   12064:	|      lea 12(sp),sp
   12068:	|      tst.w d0
   1206a:	|  /-- bne.s 12070 <builtIn_hasFlag+0x64>
   1206c:	|  |   moveq #1,d0
   1206e:	+--|-- bra.s 120ca <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12070:	|  \-> moveq #24,d0
   12072:	|      add.l 24(sp),d0
   12076:	|      move.l d0,-(sp)
   12078:	|      jsr 13f3c <trimStack>
   1207e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   12080:	|      move.l 8(sp),d0
   12084:	|      move.l d0,-(sp)
   12086:	|      jsr c3ee <findObjectType>
   1208c:	|      addq.l #4,sp
   1208e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12092:	|  /-- bne.s 12098 <builtIn_hasFlag+0x8c>
   12094:	|  |   moveq #1,d0
   12096:	+--|-- bra.s 120ca <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12098:	|  \-> movea.l 12(sp),a0
   1209c:	|      move.w 36(a0),d0
   120a0:	|      moveq #0,d2
   120a2:	|      move.w d0,d2
   120a4:	|      move.l 4(sp),d1
   120a8:	|      moveq #1,d0
   120aa:	|      lsl.l d1,d0
   120ac:	|      move.l d2,d1
   120ae:	|      and.l d0,d1
   120b0:	|      moveq #28,d0
   120b2:	|      add.l 24(sp),d0
   120b6:	|      move.l d1,-(sp)
   120b8:	|      pea 1 <_start+0x1>
   120bc:	|      move.l d0,-(sp)
   120be:	|      jsr 13eaa <setVariable>
   120c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   120c8:	|      moveq #2,d0
}
   120ca:	\----> move.l (sp)+,d2
   120cc:	       lea 12(sp),sp
   120d0:	       rts

000120d2 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   120d2:	       jsr c3dc <snapshot>
   120d8:	       tst.w d0
   120da:	/----- beq.s 120e0 <builtIn_snapshotGrab+0xe>
   120dc:	|      moveq #2,d0
   120de:	|  /-- bra.s 120e2 <builtIn_snapshotGrab+0x10>
   120e0:	\--|-> moveq #1,d0
}
   120e2:	   \-> rts

000120e4 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   120e4:	jsr c288 <nosnapshot>
	return BR_CONTINUE;
   120ea:	moveq #2,d0
}
   120ec:	rts

000120ee <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   120ee:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   120f0:	move.w 1a632 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   120f8:	movea.l 12(sp),a0
   120fc:	move.l 24(a0),d0
   12100:	move.l d0,-(sp)
   12102:	jsr 13af8 <getBoolean>
   12108:	addq.l #4,sp
   1210a:	move.w d0,1a632 <allowAnyFilename>
	trimStack (&fun -> stack);
   12110:	moveq #24,d0
   12112:	add.l 12(sp),d0
   12116:	move.l d0,-(sp)
   12118:	jsr 13f3c <trimStack>
   1211e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   12120:	movea.w 2(sp),a0
   12124:	moveq #28,d0
   12126:	add.l 12(sp),d0
   1212a:	move.l a0,-(sp)
   1212c:	pea 1 <_start+0x1>
   12130:	move.l d0,-(sp)
   12132:	jsr 13eaa <setVariable>
   12138:	lea 12(sp),sp
	return BR_CONTINUE;
   1213c:	moveq #2,d0
}
   1213e:	addq.l #4,sp
   12140:	rts

00012142 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12142:	moveq #24,d0
   12144:	add.l 8(sp),d0
   12148:	move.l d0,-(sp)
   1214a:	jsr 13f3c <trimStack>
   12150:	addq.l #4,sp
	trimStack (&fun -> stack);
   12152:	moveq #24,d0
   12154:	add.l 8(sp),d0
   12158:	move.l d0,-(sp)
   1215a:	jsr 13f3c <trimStack>
   12160:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   12162:	moveq #28,d0
   12164:	add.l 8(sp),d0
   12168:	clr.l -(sp)
   1216a:	pea 1 <_start+0x1>
   1216e:	move.l d0,-(sp)
   12170:	jsr 13eaa <setVariable>
   12176:	lea 12(sp),sp

	return BR_CONTINUE;
   1217a:	moveq #2,d0
}
   1217c:	rts

0001217e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1217e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   12180:	movea.l 12(sp),a0
   12184:	move.l 24(a0),d0
   12188:	move.l d0,-(sp)
   1218a:	jsr 13b8e <getTextFromAnyVar>
   12190:	addq.l #4,sp
   12192:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12194:	moveq #24,d0
   12196:	add.l 12(sp),d0
   1219a:	move.l d0,-(sp)
   1219c:	jsr 13f3c <trimStack>
   121a2:	addq.l #4,sp
	KPrintF (mess);
   121a4:	move.l (sp),-(sp)
   121a6:	jsr 15784 <KPrintF>
   121ac:	addq.l #4,sp
	return BR_ERROR;
   121ae:	moveq #1,d0
}
   121b0:	addq.l #4,sp
   121b2:	rts

000121b4 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   121b4:	moveq #24,d0
   121b6:	add.l 8(sp),d0
   121ba:	move.l d0,-(sp)
   121bc:	jsr 13f3c <trimStack>
   121c2:	addq.l #4,sp
	trimStack (&fun -> stack);
   121c4:	moveq #24,d0
   121c6:	add.l 8(sp),d0
   121ca:	move.l d0,-(sp)
   121cc:	jsr 13f3c <trimStack>
   121d2:	addq.l #4,sp
	trimStack (&fun -> stack);
   121d4:	moveq #24,d0
   121d6:	add.l 8(sp),d0
   121da:	move.l d0,-(sp)
   121dc:	jsr 13f3c <trimStack>
   121e2:	addq.l #4,sp
	trimStack (&fun -> stack);
   121e4:	moveq #24,d0
   121e6:	add.l 8(sp),d0
   121ea:	move.l d0,-(sp)
   121ec:	jsr 13f3c <trimStack>
   121f2:	addq.l #4,sp

	return BR_CONTINUE;
   121f4:	moveq #2,d0
}
   121f6:	rts

000121f8 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   121f8:	moveq #24,d0
   121fa:	add.l 8(sp),d0
   121fe:	move.l d0,-(sp)
   12200:	jsr 13f3c <trimStack>
   12206:	addq.l #4,sp
	trimStack (&fun -> stack);
   12208:	moveq #24,d0
   1220a:	add.l 8(sp),d0
   1220e:	move.l d0,-(sp)
   12210:	jsr 13f3c <trimStack>
   12216:	addq.l #4,sp
	trimStack (&fun -> stack);
   12218:	moveq #24,d0
   1221a:	add.l 8(sp),d0
   1221e:	move.l d0,-(sp)
   12220:	jsr 13f3c <trimStack>
   12226:	addq.l #4,sp

	return BR_CONTINUE;
   12228:	moveq #2,d0

}
   1222a:	rts

0001222c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1222c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1222e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12234:	sne d0
   12236:	neg.b d0
   12238:	moveq #0,d1
   1223a:	move.b d0,d1
   1223c:	moveq #28,d0
   1223e:	add.l 12(sp),d0
   12242:	move.l d1,-(sp)
   12244:	pea 1 <_start+0x1>
   12248:	move.l d0,-(sp)
   1224a:	jsr 13eaa <setVariable>
   12250:	lea 12(sp),sp
	return BR_CONTINUE;
   12254:	moveq #2,d0
}
   12256:	addq.l #4,sp
   12258:	rts

0001225a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1225a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1225c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   12262:	pea 18129 <PutChar+0x1ed1>
   12268:	jsr 15784 <KPrintF>
   1226e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12270:	tst.w 2(sp)
   12274:	sne d0
   12276:	neg.b d0
   12278:	moveq #0,d1
   1227a:	move.b d0,d1
   1227c:	moveq #28,d0
   1227e:	add.l 12(sp),d0
   12282:	move.l d1,-(sp)
   12284:	pea 1 <_start+0x1>
   12288:	move.l d0,-(sp)
   1228a:	jsr 13eaa <setVariable>
   12290:	lea 12(sp),sp
	return BR_CONTINUE;
   12294:	moveq #2,d0
}
   12296:	addq.l #4,sp
   12298:	rts

0001229a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1229a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1229e:	             move.l 104(sp),d0
   122a2:	             cmpi.l #166,d0
   122a8:	/----------- bhi.w 1238a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   122ac:	|            move.l 104(sp),d0
   122b0:	|            add.l d0,d0
   122b2:	|            movea.l d0,a1
   122b4:	|            adda.l d0,a1
   122b6:	|            lea 1a778 <paramNum>,a0
   122bc:	|            move.l (0,a1,a0.l),d0
   122c0:	|            moveq #-1,d1
   122c2:	|            cmp.l d0,d1
   122c4:	|  /-------- beq.w 12352 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   122c8:	|  |         move.l 104(sp),d0
   122cc:	|  |         add.l d0,d0
   122ce:	|  |         movea.l d0,a1
   122d0:	|  |         adda.l d0,a1
   122d2:	|  |         lea 1a778 <paramNum>,a0
   122d8:	|  |         move.l (0,a1,a0.l),d0
   122dc:	|  |         cmp.l 108(sp),d0
   122e0:	|  +-------- beq.s 12352 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   122e2:	|  |         move.l 104(sp),d0
   122e6:	|  |         add.l d0,d0
   122e8:	|  |         movea.l d0,a1
   122ea:	|  |         adda.l d0,a1
   122ec:	|  |         lea 1a778 <paramNum>,a0
   122f2:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   122f6:	|  |         moveq #1,d1
   122f8:	|  |         cmp.l d0,d1
   122fa:	|  |  /----- bne.s 12304 <callBuiltIn+0x6a>
   122fc:	|  |  |      move.l #93754,d0
   12302:	|  |  |  /-- bra.s 1230a <callBuiltIn+0x70>
   12304:	|  |  \--|-> move.l #98655,d0
   1230a:	|  |     \-> move.l 104(sp),d1
   1230e:	|  |         add.l d1,d1
   12310:	|  |         movea.l d1,a1
   12312:	|  |         adda.l d1,a1
   12314:	|  |         lea 1a778 <paramNum>,a0
   1231a:	|  |         move.l (0,a1,a0.l),d1
   1231e:	|  |         move.l d0,-(sp)
   12320:	|  |         move.l d1,-(sp)
   12322:	|  |         pea 18161 <PutChar+0x1f09>
   12328:	|  |         lea 12(sp),a0
   1232c:	|  |         move.l a0,-(sp)
   1232e:	|  |         jsr 12dc2 <sprintf>
   12334:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   12338:	|  |         movea.l sp,a0
   1233a:	|  |         move.l a0,-(sp)
   1233c:	|  |         jsr b8 <copyString>
   12342:	|  |         addq.l #4,sp
   12344:	|  |         move.l d0,-(sp)
   12346:	|  |         jsr 15784 <KPrintF>
   1234c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1234e:	|  |         moveq #1,d0
   12350:	|  |     /-- bra.s 1239a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   12352:	|  \-----|-> move.l 104(sp),d0
   12356:	|        |   add.l d0,d0
   12358:	|        |   movea.l d0,a1
   1235a:	|        |   adda.l d0,a1
   1235c:	|        |   lea 1aa14 <builtInFunctionArray>,a0
   12362:	|        |   move.l (0,a1,a0.l),d0
   12366:	+--------|-- beq.s 1238a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   12368:	|        |   move.l 104(sp),d0
   1236c:	|        |   add.l d0,d0
   1236e:	|        |   movea.l d0,a1
   12370:	|        |   adda.l d0,a1
   12372:	|        |   lea 1aa14 <builtInFunctionArray>,a0
   12378:	|        |   movea.l (0,a1,a0.l),a0
   1237c:	|        |   move.l 112(sp),-(sp)
   12380:	|        |   move.l 112(sp),-(sp)
   12384:	|        |   jsr (a0)
   12386:	|        |   addq.l #8,sp
   12388:	|        +-- bra.s 1239a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1238a:	\--------|-> pea 1818c <line.c.05397aaf+0x1f>
   12390:	         |   jsr 15784 <KPrintF>
   12396:	         |   addq.l #4,sp
	return BR_ERROR;
   12398:	         |   moveq #1,d0
}
   1239a:	         \-> lea 100(sp),sp
   1239e:	             rts

000123a0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   123a0:	          subq.l #8,sp
	int indexNum = -1;
   123a2:	          moveq #-1,d0
   123a4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   123a8:	          clr.l (sp)
   123aa:	   /----- bra.s 123d0 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   123ac:	/--|----> move.l 1aefc <languageTable>,d1
   123b2:	|  |      move.l (sp),d0
   123b4:	|  |      add.l d0,d0
   123b6:	|  |      add.l d0,d0
   123b8:	|  |      movea.l d1,a0
   123ba:	|  |      adda.l d0,a0
   123bc:	|  |      move.l (a0),d0
   123be:	|  |      move.l d0,d1
   123c0:	|  |      move.l 1af04 <gameSettings>,d0
   123c6:	|  |      cmp.l d1,d0
   123c8:	|  |  /-- bne.s 123ce <getLanguageForFileB+0x2e>
   123ca:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   123ce:	|  |  \-> addq.l #1,(sp)
   123d0:	|  \----> move.l 1af08 <gameSettings+0x4>,d0
   123d6:	|         cmp.l (sp),d0
   123d8:	\-------- bcc.s 123ac <getLanguageForFileB+0xc>
	}

	return indexNum;
   123da:	          move.l 4(sp),d0
}
   123de:	          addq.l #8,sp
   123e0:	          rts

000123e2 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   123e2:	          lea -20(sp),sp
   123e6:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   123e8:	          move.l 28(sp),-(sp)
   123ec:	          jsr 12aa4 <strlen>
   123f2:	          addq.l #4,sp
   123f4:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   123f8:	          moveq #4,d0
   123fa:	          cmp.l 12(sp),d0
   123fe:	      /-- bge.s 12422 <getPrefsFilename+0x40>
   12400:	      |   move.l 12(sp),d0
   12404:	      |   subq.l #4,d0
   12406:	      |   movea.l 28(sp),a0
   1240a:	      |   adda.l d0,a0
   1240c:	      |   move.b (a0),d0
   1240e:	      |   cmpi.b #46,d0
   12412:	      +-- bne.s 12422 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   12414:	      |   move.l 12(sp),d0
   12418:	      |   subq.l #4,d0
   1241a:	      |   movea.l 28(sp),a0
   1241e:	      |   adda.l d0,a0
   12420:	      |   clr.b (a0)
	}

	char * f = filename;
   12422:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   12428:	          clr.l 20(sp)
   1242c:	   /----- bra.s 12454 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1242e:	/--|----> move.l 20(sp),d0
   12432:	|  |      movea.l 28(sp),a0
   12436:	|  |      adda.l d0,a0
   12438:	|  |      move.b (a0),d0
   1243a:	|  |      cmpi.b #47,d0
   1243e:	|  |  /-- bne.s 12450 <getPrefsFilename+0x6e>
   12440:	|  |  |   move.l 20(sp),d0
   12444:	|  |  |   addq.l #1,d0
   12446:	|  |  |   move.l 28(sp),d1
   1244a:	|  |  |   add.l d0,d1
   1244c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   12450:	|  |  \-> addq.l #1,20(sp)
   12454:	|  \----> move.l 20(sp),d0
   12458:	|         cmp.l 12(sp),d0
   1245c:	\-------- blt.s 1242e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1245e:	          pea 181b7 <line.c.05397aaf+0x4a>
   12464:	          move.l 20(sp),-(sp)
   12468:	          jsr 12ae4 <joinStrings>
   1246e:	          addq.l #8,sp
   12470:	          move.l d0,8(sp)

	FreeVec(filename);
   12474:	          move.l 28(sp),4(sp)
   1247a:	          move.l 1add0 <SysBase>,d0
   12480:	          movea.l d0,a6
   12482:	          movea.l 4(sp),a1
   12486:	          jsr -690(a6)
	filename = NULL;
   1248a:	          clr.l 28(sp)
	return joined;
   1248e:	          move.l 8(sp),d0
}
   12492:	          movea.l (sp)+,a6
   12494:	          lea 20(sp),sp
   12498:	          rts

0001249a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1249a:	             lea -28(sp),sp
   1249e:	             move.l a6,-(sp)
   124a0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   124a2:	             move.l 1af08 <gameSettings+0x4>,d0
   124a8:	             move.l d0,d1
   124aa:	             addq.l #1,d1
   124ac:	             move.l d1,28(sp)
   124b0:	             clr.l 24(sp)
   124b4:	             move.l 1add0 <SysBase>,d0
   124ba:	             movea.l d0,a6
   124bc:	             move.l 28(sp),d0
   124c0:	             move.l 24(sp),d1
   124c4:	             jsr -684(a6)
   124c8:	             move.l d0,20(sp)
   124cc:	             move.l 20(sp),d0
   124d0:	             move.l d0,1aefc <languageTable>
    if( languageTable == 0) {
   124d6:	             move.l 1aefc <languageTable>,d0
   124dc:	         /-- bne.s 124ec <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   124de:	         |   pea 181bc <line.c.05397aaf+0x4f>
   124e4:	         |   jsr 15784 <KPrintF>
   124ea:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   124ec:	         \-> move.l 1af08 <gameSettings+0x4>,d0
   124f2:	             move.l d0,d1
   124f4:	             addq.l #1,d1
   124f6:	             move.l d1,16(sp)
   124fa:	             clr.l 12(sp)
   124fe:	             move.l 1add0 <SysBase>,d0
   12504:	             movea.l d0,a6
   12506:	             move.l 16(sp),d0
   1250a:	             move.l 12(sp),d1
   1250e:	             jsr -684(a6)
   12512:	             move.l d0,8(sp)
   12516:	             move.l 8(sp),d0
   1251a:	             move.l d0,1af00 <languageName>
	if( languageName == 0) {
   12520:	             move.l 1af00 <languageName>,d0
   12526:	         /-- bne.s 12536 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   12528:	         |   pea 181f2 <line.c.05397aaf+0x85>
   1252e:	         |   jsr 15784 <KPrintF>
   12534:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12536:	         \-> clr.l 32(sp)
   1253a:	   /-------- bra.s 125b2 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1253c:	/--|-------> tst.l 32(sp)
   12540:	|  |  /----- beq.s 12550 <makeLanguageTable+0xb6>
   12542:	|  |  |      move.l 40(sp),-(sp)
   12546:	|  |  |      jsr 6bc <get2bytes>
   1254c:	|  |  |      addq.l #4,sp
   1254e:	|  |  |  /-- bra.s 12552 <makeLanguageTable+0xb8>
   12550:	|  |  \--|-> moveq #0,d0
   12552:	|  |     \-> movea.l 1aefc <languageTable>,a0
   12558:	|  |         move.l 32(sp),d1
   1255c:	|  |         add.l d1,d1
   1255e:	|  |         add.l d1,d1
   12560:	|  |         adda.l d1,a0
   12562:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   12564:	|  |         move.l 1af00 <languageName>,d1
   1256a:	|  |         move.l 32(sp),d0
   1256e:	|  |         add.l d0,d0
   12570:	|  |         add.l d0,d0
   12572:	|  |         movea.l d1,a0
   12574:	|  |         adda.l d0,a0
   12576:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   12578:	|  |         move.l 1ad7a <gameVersion>,d0
   1257e:	|  |         cmpi.l #511,d0
   12584:	|  |     /-- ble.s 125ae <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   12586:	|  |     |   move.l 1af08 <gameSettings+0x4>,d0
   1258c:	|  |     +-- beq.s 125ae <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1258e:	|  |     |   move.l 1af00 <languageName>,d1
   12594:	|  |     |   move.l 32(sp),d0
   12598:	|  |     |   add.l d0,d0
   1259a:	|  |     |   add.l d0,d0
   1259c:	|  |     |   movea.l d1,a2
   1259e:	|  |     |   adda.l d0,a2
   125a0:	|  |     |   move.l 40(sp),-(sp)
   125a4:	|  |     |   jsr b02 <readString>
   125aa:	|  |     |   addq.l #4,sp
   125ac:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   125ae:	|  |     \-> addq.l #1,32(sp)
   125b2:	|  \-------> move.l 1af08 <gameSettings+0x4>,d0
   125b8:	|            cmp.l 32(sp),d0
   125bc:	\----------- bcc.w 1253c <makeLanguageTable+0xa2>
		}
	}
}
   125c0:	             nop
   125c2:	             nop
   125c4:	             movea.l (sp)+,a2
   125c6:	             movea.l (sp)+,a6
   125c8:	             lea 28(sp),sp
   125cc:	             rts

000125ce <readIniFile>:

void readIniFile (char * filename) {
   125ce:	                      lea -564(sp),sp
   125d2:	                      move.l a6,-(sp)
   125d4:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   125d6:	                      move.l 576(sp),-(sp)
   125da:	                      jsr b8 <copyString>
   125e0:	                      addq.l #4,sp
   125e2:	                      move.l d0,-(sp)
   125e4:	                      jsr 123e2 <getPrefsFilename>
   125ea:	                      addq.l #4,sp
   125ec:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   125f0:	                      move.l 562(sp),558(sp)
   125f6:	                      move.l #1005,554(sp)
   125fe:	                      move.l 1add8 <DOSBase>,d0
   12604:	                      movea.l d0,a6
   12606:	                      move.l 558(sp),d1
   1260a:	                      move.l 554(sp),d2
   1260e:	                      jsr -30(a6)
   12612:	                      move.l d0,550(sp)
   12616:	                      move.l 550(sp),d0
   1261a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1261e:	                      clr.l 1af04 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   12624:	                      move.w #1,1af0c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1262c:	                      clr.l 1af0e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   12632:	                      moveq #1,d0
   12634:	                      move.l d0,1af12 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1263a:	                      clr.w 1af16 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   12640:	                      clr.w 1af18 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   12646:	                      clr.w 1af1a <gameSettings+0x16>

	FreeVec(langName);
   1264c:	                      move.l 562(sp),542(sp)
   12652:	                      move.l 1add0 <SysBase>,d0
   12658:	                      movea.l d0,a6
   1265a:	                      movea.l 542(sp),a1
   1265e:	                      jsr -690(a6)
	langName = NULL;
   12662:	                      clr.l 562(sp)

	if (fp) {
   12666:	                      tst.l 546(sp)
   1266a:	/-------------------- beq.w 12948 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1266e:	|                     move.l sp,d0
   12670:	|                     addi.l #265,d0
   12676:	|                     move.l #257,d1
   1267c:	|                     move.l d1,-(sp)
   1267e:	|                     clr.l -(sp)
   12680:	|                     move.l d0,-(sp)
   12682:	|                     jsr 15708 <memset>
   12688:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   1268c:	|                     move.l sp,d0
   1268e:	|                     addq.l #8,d0
   12690:	|                     move.l #257,d1
   12696:	|                     move.l d1,-(sp)
   12698:	|                     clr.l -(sp)
   1269a:	|                     move.l d0,-(sp)
   1269c:	|                     jsr 15708 <memset>
   126a2:	|                     lea 12(sp),sp
		unsigned char here = 0;
   126a6:	|                     clr.b 571(sp)
		char readChar = ' ';
   126aa:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   126b0:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   126b6:	|                     clr.w 566(sp)
		LONG tmp = 0;
   126ba:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   126be:	|  /----------------> move.l 546(sp),534(sp)
   126c4:	|  |                  move.l 1add8 <DOSBase>,d0
   126ca:	|  |                  movea.l d0,a6
   126cc:	|  |                  move.l 534(sp),d1
   126d0:	|  |                  jsr -306(a6)
   126d4:	|  |                  move.l d0,530(sp)
   126d8:	|  |                  move.l 530(sp),d0
   126dc:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   126e0:	|  |                  moveq #-1,d1
   126e2:	|  |                  cmp.l 538(sp),d1
   126e6:	|  |           /----- bne.s 126f4 <readIniFile+0x126>
				readChar = '\n';
   126e8:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   126ee:	|  |           |      clr.w 568(sp)
   126f2:	|  |           |  /-- bra.s 126fa <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   126f4:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   126fa:	|  |              \-> move.b 570(sp),d0
   126fe:	|  |                  ext.w d0
   12700:	|  |                  movea.w d0,a0
   12702:	|  |                  moveq #61,d0
   12704:	|  |                  cmp.l a0,d0
   12706:	|  |     /----------- beq.w 128b0 <readIniFile+0x2e2>
   1270a:	|  |     |            moveq #61,d1
   1270c:	|  |     |            cmp.l a0,d1
   1270e:	|  |  /--|----------- blt.w 128bc <readIniFile+0x2ee>
   12712:	|  |  |  |            moveq #10,d0
   12714:	|  |  |  |            cmp.l a0,d0
   12716:	|  |  |  |        /-- beq.s 12720 <readIniFile+0x152>
   12718:	|  |  |  |        |   moveq #13,d1
   1271a:	|  |  |  |        |   cmp.l a0,d1
   1271c:	|  |  +--|--------|-- bne.w 128bc <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   12720:	|  |  |  |        \-> tst.w 566(sp)
   12724:	|  |  |  |     /----- beq.w 1289e <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   12728:	|  |  |  |     |      pea 18226 <line.c.05397aaf+0xb9>
   1272e:	|  |  |  |     |      move.l sp,d0
   12730:	|  |  |  |     |      addi.l #269,d0
   12736:	|  |  |  |     |      move.l d0,-(sp)
   12738:	|  |  |  |     |      jsr 12a64 <strcmp>
   1273e:	|  |  |  |     |      addq.l #8,sp
   12740:	|  |  |  |     |      tst.l d0
   12742:	|  |  |  |     |  /-- bne.s 1275c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   12744:	|  |  |  |     |  |   move.l sp,d0
   12746:	|  |  |  |     |  |   addq.l #8,d0
   12748:	|  |  |  |     |  |   move.l d0,-(sp)
   1274a:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   12750:	|  |  |  |     |  |   addq.l #4,sp
   12752:	|  |  |  |     |  |   move.l d0,1af04 <gameSettings>
   12758:	|  |  |  |     +--|-- bra.w 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1275c:	|  |  |  |     |  \-> pea 1822f <line.c.05397aaf+0xc2>
   12762:	|  |  |  |     |      move.l sp,d0
   12764:	|  |  |  |     |      addi.l #269,d0
   1276a:	|  |  |  |     |      move.l d0,-(sp)
   1276c:	|  |  |  |     |      jsr 12a64 <strcmp>
   12772:	|  |  |  |     |      addq.l #8,sp
   12774:	|  |  |  |     |      tst.l d0
   12776:	|  |  |  |     |  /-- bne.s 1279c <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   12778:	|  |  |  |     |  |   move.l sp,d0
   1277a:	|  |  |  |     |  |   addq.l #8,d0
   1277c:	|  |  |  |     |  |   move.l d0,-(sp)
   1277e:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   12784:	|  |  |  |     |  |   addq.l #4,sp
   12786:	|  |  |  |     |  |   tst.l d0
   12788:	|  |  |  |     |  |   seq d0
   1278a:	|  |  |  |     |  |   neg.b d0
   1278c:	|  |  |  |     |  |   move.b d0,d0
   1278e:	|  |  |  |     |  |   andi.w #255,d0
   12792:	|  |  |  |     |  |   move.w d0,1af0c <gameSettings+0x8>
   12798:	|  |  |  |     +--|-- bra.w 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1279c:	|  |  |  |     |  \-> pea 18236 <line.c.05397aaf+0xc9>
   127a2:	|  |  |  |     |      move.l sp,d0
   127a4:	|  |  |  |     |      addi.l #269,d0
   127aa:	|  |  |  |     |      move.l d0,-(sp)
   127ac:	|  |  |  |     |      jsr 12a64 <strcmp>
   127b2:	|  |  |  |     |      addq.l #8,sp
   127b4:	|  |  |  |     |      tst.l d0
   127b6:	|  |  |  |     |  /-- bne.s 127d0 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   127b8:	|  |  |  |     |  |   move.l sp,d0
   127ba:	|  |  |  |     |  |   addq.l #8,d0
   127bc:	|  |  |  |     |  |   move.l d0,-(sp)
   127be:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   127c4:	|  |  |  |     |  |   addq.l #4,sp
   127c6:	|  |  |  |     |  |   move.l d0,1af0e <gameSettings+0xa>
   127cc:	|  |  |  |     +--|-- bra.w 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   127d0:	|  |  |  |     |  \-> pea 1823e <line.c.05397aaf+0xd1>
   127d6:	|  |  |  |     |      move.l sp,d0
   127d8:	|  |  |  |     |      addi.l #269,d0
   127de:	|  |  |  |     |      move.l d0,-(sp)
   127e0:	|  |  |  |     |      jsr 12a64 <strcmp>
   127e6:	|  |  |  |     |      addq.l #8,sp
   127e8:	|  |  |  |     |      tst.l d0
   127ea:	|  |  |  |     |  /-- bne.s 12804 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   127ec:	|  |  |  |     |  |   move.l sp,d0
   127ee:	|  |  |  |     |  |   addq.l #8,d0
   127f0:	|  |  |  |     |  |   move.l d0,-(sp)
   127f2:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   127f8:	|  |  |  |     |  |   addq.l #4,sp
   127fa:	|  |  |  |     |  |   move.l d0,1af12 <gameSettings+0xe>
   12800:	|  |  |  |     +--|-- bra.w 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   12804:	|  |  |  |     |  \-> pea 18248 <line.c.05397aaf+0xdb>
   1280a:	|  |  |  |     |      move.l sp,d0
   1280c:	|  |  |  |     |      addi.l #269,d0
   12812:	|  |  |  |     |      move.l d0,-(sp)
   12814:	|  |  |  |     |      jsr 12a64 <strcmp>
   1281a:	|  |  |  |     |      addq.l #8,sp
   1281c:	|  |  |  |     |      tst.l d0
   1281e:	|  |  |  |     |  /-- bne.s 12838 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   12820:	|  |  |  |     |  |   move.l sp,d0
   12822:	|  |  |  |     |  |   addq.l #8,d0
   12824:	|  |  |  |     |  |   move.l d0,-(sp)
   12826:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   1282c:	|  |  |  |     |  |   addq.l #4,sp
   1282e:	|  |  |  |     |  |   move.l d0,d0
   12830:	|  |  |  |     |  |   move.w d0,1af16 <gameSettings+0x12>
   12836:	|  |  |  |     +--|-- bra.s 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   12838:	|  |  |  |     |  \-> pea 18254 <line.c.05397aaf+0xe7>
   1283e:	|  |  |  |     |      move.l sp,d0
   12840:	|  |  |  |     |      addi.l #269,d0
   12846:	|  |  |  |     |      move.l d0,-(sp)
   12848:	|  |  |  |     |      jsr 12a64 <strcmp>
   1284e:	|  |  |  |     |      addq.l #8,sp
   12850:	|  |  |  |     |      tst.l d0
   12852:	|  |  |  |     |  /-- bne.s 1286c <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   12854:	|  |  |  |     |  |   move.l sp,d0
   12856:	|  |  |  |     |  |   addq.l #8,d0
   12858:	|  |  |  |     |  |   move.l d0,-(sp)
   1285a:	|  |  |  |     |  |   jsr 12954 <stringToInt>
   12860:	|  |  |  |     |  |   addq.l #4,sp
   12862:	|  |  |  |     |  |   move.l d0,d0
   12864:	|  |  |  |     |  |   move.w d0,1af18 <gameSettings+0x14>
   1286a:	|  |  |  |     +--|-- bra.s 1289e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1286c:	|  |  |  |     |  \-> pea 18262 <line.c.05397aaf+0xf5>
   12872:	|  |  |  |     |      move.l sp,d0
   12874:	|  |  |  |     |      addi.l #269,d0
   1287a:	|  |  |  |     |      move.l d0,-(sp)
   1287c:	|  |  |  |     |      jsr 12a64 <strcmp>
   12882:	|  |  |  |     |      addq.l #8,sp
   12884:	|  |  |  |     |      tst.l d0
   12886:	|  |  |  |     +----- bne.s 1289e <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   12888:	|  |  |  |     |      move.l sp,d0
   1288a:	|  |  |  |     |      addq.l #8,d0
   1288c:	|  |  |  |     |      move.l d0,-(sp)
   1288e:	|  |  |  |     |      jsr 12954 <stringToInt>
   12894:	|  |  |  |     |      addq.l #4,sp
   12896:	|  |  |  |     |      move.l d0,d0
   12898:	|  |  |  |     |      move.w d0,1af1a <gameSettings+0x16>
					}
				}
				here = 0;
   1289e:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   128a2:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   128a6:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   128aa:	|  |  |  |            clr.b 8(sp)
				break;
   128ae:	|  |  |  |  /-------- bra.s 12926 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   128b0:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   128b6:	|  |  |     |         clr.b 571(sp)
				break;
   128ba:	|  |  |     +-------- bra.s 12926 <readIniFile+0x358>

				default:
				if (doingSecond) {
   128bc:	|  |  \-----|-------> tst.w 566(sp)
   128c0:	|  |        |  /----- beq.s 128f4 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   128c2:	|  |        |  |      move.b 571(sp),d0
   128c6:	|  |        |  |      move.b d0,d1
   128c8:	|  |        |  |      addq.b #1,d1
   128ca:	|  |        |  |      move.b d1,571(sp)
   128ce:	|  |        |  |      move.b d0,d0
   128d0:	|  |        |  |      andi.l #255,d0
   128d6:	|  |        |  |      lea 572(sp),a0
   128da:	|  |        |  |      adda.l d0,a0
   128dc:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   128e2:	|  |        |  |      moveq #0,d0
   128e4:	|  |        |  |      move.b 571(sp),d0
   128e8:	|  |        |  |      lea 572(sp),a0
   128ec:	|  |        |  |      adda.l d0,a0
   128ee:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   128f2:	|  |        |  |  /-- bra.s 12924 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   128f4:	|  |        |  \--|-> move.b 571(sp),d0
   128f8:	|  |        |     |   move.b d0,d1
   128fa:	|  |        |     |   addq.b #1,d1
   128fc:	|  |        |     |   move.b d1,571(sp)
   12900:	|  |        |     |   move.b d0,d0
   12902:	|  |        |     |   andi.l #255,d0
   12908:	|  |        |     |   lea 572(sp),a0
   1290c:	|  |        |     |   adda.l d0,a0
   1290e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   12914:	|  |        |     |   moveq #0,d0
   12916:	|  |        |     |   move.b 571(sp),d0
   1291a:	|  |        |     |   lea 572(sp),a0
   1291e:	|  |        |     |   adda.l d0,a0
   12920:	|  |        |     |   clr.b -307(a0)
				break;
   12924:	|  |        |     \-> nop
			}
		} while (keepGoing);
   12926:	|  |        \-------> tst.w 568(sp)
   1292a:	|  \----------------- bne.w 126be <readIniFile+0xf0>

		Close(fp);
   1292e:	|                     move.l 546(sp),526(sp)
   12934:	|                     move.l 1add8 <DOSBase>,d0
   1293a:	|                     movea.l d0,a6
   1293c:	|                     move.l 526(sp),d1
   12940:	|                     jsr -36(a6)
   12944:	|                     move.l d0,522(sp)
	}
}
   12948:	\-------------------> nop
   1294a:	                      move.l (sp)+,d2
   1294c:	                      movea.l (sp)+,a6
   1294e:	                      lea 564(sp),sp
   12952:	                      rts

00012954 <stringToInt>:

unsigned int stringToInt (char * s) {
   12954:	             subq.l #8,sp
	int i = 0;
   12956:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1295a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   1295e:	/----------> movea.l 12(sp),a0
   12962:	|            move.b (a0),d0
   12964:	|            cmpi.b #47,d0
   12968:	|        /-- ble.s 129a0 <stringToInt+0x4c>
   1296a:	|        |   movea.l 12(sp),a0
   1296e:	|        |   move.b (a0),d0
   12970:	|        |   cmpi.b #57,d0
   12974:	|        +-- bgt.s 129a0 <stringToInt+0x4c>
			i *= 10;
   12976:	|        |   move.l 4(sp),d1
   1297a:	|        |   move.l d1,d0
   1297c:	|        |   add.l d0,d0
   1297e:	|        |   add.l d0,d0
   12980:	|        |   add.l d1,d0
   12982:	|        |   add.l d0,d0
   12984:	|        |   move.l d0,4(sp)
			i += *s - '0';
   12988:	|        |   movea.l 12(sp),a0
   1298c:	|        |   move.b (a0),d0
   1298e:	|        |   ext.w d0
   12990:	|        |   movea.w d0,a0
   12992:	|        |   moveq #-48,d0
   12994:	|        |   add.l a0,d0
   12996:	|        |   add.l d0,4(sp)
			s ++;
   1299a:	|        |   addq.l #1,12(sp)
   1299e:	|  /-----|-- bra.s 129d8 <stringToInt+0x84>
		} else if (*s == '-') {
   129a0:	|  |     \-> movea.l 12(sp),a0
   129a4:	|  |         move.b (a0),d0
   129a6:	|  |         cmpi.b #45,d0
   129aa:	|  |     /-- bne.s 129c4 <stringToInt+0x70>
			negative = ! negative;
   129ac:	|  |     |   tst.w 2(sp)
   129b0:	|  |     |   seq d0
   129b2:	|  |     |   neg.b d0
   129b4:	|  |     |   move.b d0,d0
   129b6:	|  |     |   andi.w #255,d0
   129ba:	|  |     |   move.w d0,2(sp)
			s++;
   129be:	|  |     |   addq.l #1,12(sp)
   129c2:	+--|-----|-- bra.s 1295e <stringToInt+0xa>
		} else {
			if (negative)
   129c4:	|  |     \-> tst.w 2(sp)
   129c8:	|  |     /-- beq.s 129d2 <stringToInt+0x7e>
				return -i;
   129ca:	|  |     |   move.l 4(sp),d0
   129ce:	|  |     |   neg.l d0
   129d0:	|  |  /--|-- bra.s 129da <stringToInt+0x86>
			return i;
   129d2:	|  |  |  \-> move.l 4(sp),d0
   129d6:	|  |  +----- bra.s 129da <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   129d8:	\--\--|----X bra.s 1295e <stringToInt+0xa>
		}
	}
   129da:	      \----> addq.l #8,sp
   129dc:	             rts

000129de <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   129de:	    lea -28(sp),sp
   129e2:	    move.l a6,-(sp)
   129e4:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   129e6:	    pea 1826c <line.c.05397aaf+0xff>
   129ec:	    jsr 15784 <KPrintF>
   129f2:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   129f4:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   129f8:	    move.l 40(sp),30(sp)
   129fe:	    move.l #1005,26(sp)
   12a06:	    move.l 1add8 <DOSBase>,d0
   12a0c:	    movea.l d0,a6
   12a0e:	    move.l 30(sp),d1
   12a12:	    move.l 26(sp),d2
   12a16:	    jsr -30(a6)
   12a1a:	    move.l d0,22(sp)
   12a1e:	    move.l 22(sp),d0
   12a22:	    move.l d0,18(sp)
	if (tester) {
   12a26:	/-- beq.s 12a56 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12a28:	|   pea 18286 <line.c.05397aaf+0x119>
   12a2e:	|   jsr 15784 <KPrintF>
   12a34:	|   addq.l #4,sp
		retval = 1;
   12a36:	|   move.b #1,35(sp)
		Close(tester);
   12a3c:	|   move.l 18(sp),14(sp)
   12a42:	|   move.l 1add8 <DOSBase>,d0
   12a48:	|   movea.l d0,a6
   12a4a:	|   move.l 14(sp),d1
   12a4e:	|   jsr -36(a6)
   12a52:	|   move.l d0,10(sp)
	}
	return retval;
   12a56:	\-> move.b 35(sp),d0
   12a5a:	    move.l (sp)+,d2
   12a5c:	    movea.l (sp)+,a6
   12a5e:	    lea 28(sp),sp
   12a62:	    rts

00012a64 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12a64:	   /-- bra.s 12a6e <strcmp+0xa>
    {
        s1++;
   12a66:	/--|-> addq.l #1,4(sp)
        s2++;
   12a6a:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12a6e:	|  \-> movea.l 4(sp),a0
   12a72:	|      move.b (a0),d0
   12a74:	|  /-- beq.s 12a86 <strcmp+0x22>
   12a76:	|  |   movea.l 4(sp),a0
   12a7a:	|  |   move.b (a0),d1
   12a7c:	|  |   movea.l 8(sp),a0
   12a80:	|  |   move.b (a0),d0
   12a82:	|  |   cmp.b d1,d0
   12a84:	\--|-- beq.s 12a66 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12a86:	   \-> movea.l 4(sp),a0
   12a8a:	       move.b (a0),d0
   12a8c:	       moveq #0,d1
   12a8e:	       move.b d0,d1
   12a90:	       movea.l 8(sp),a0
   12a94:	       move.b (a0),d0
   12a96:	       move.b d0,d0
   12a98:	       andi.l #255,d0
   12a9e:	       sub.l d0,d1
   12aa0:	       move.l d1,d0
}
   12aa2:	       rts

00012aa4 <strlen>:

long unsigned int strlen (const char *s) 
{  
   12aa4:	       subq.l #4,sp
	long unsigned int i = 0;
   12aa6:	       clr.l (sp)
	while(s[i]) i++; 
   12aa8:	   /-- bra.s 12aac <strlen+0x8>
   12aaa:	/--|-> addq.l #1,(sp)
   12aac:	|  \-> movea.l 8(sp),a0
   12ab0:	|      adda.l (sp),a0
   12ab2:	|      move.b (a0),d0
   12ab4:	\----- bne.s 12aaa <strlen+0x6>
	return(i);
   12ab6:	       move.l (sp),d0
}
   12ab8:	       addq.l #4,sp
   12aba:	       rts

00012abc <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12abc:	    nop
   12abe:	/-> move.l 8(sp),d0
   12ac2:	|   move.l d0,d1
   12ac4:	|   addq.l #1,d1
   12ac6:	|   move.l d1,8(sp)
   12aca:	|   movea.l 4(sp),a0
   12ace:	|   lea 1(a0),a1
   12ad2:	|   move.l a1,4(sp)
   12ad6:	|   movea.l d0,a1
   12ad8:	|   move.b (a1),d0
   12ada:	|   move.b d0,(a0)
   12adc:	|   move.b (a0),d0
   12ade:	\-- bne.s 12abe <strcpy+0x2>
}
   12ae0:	    nop
   12ae2:	    rts

00012ae4 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12ae4:	    lea -20(sp),sp
   12ae8:	    move.l a6,-(sp)
   12aea:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12aec:	    move.l 32(sp),-(sp)
   12af0:	    jsr 12aa4 <strlen>
   12af6:	    addq.l #4,sp
   12af8:	    move.l d0,d2
   12afa:	    move.l 36(sp),-(sp)
   12afe:	    jsr 12aa4 <strlen>
   12b04:	    addq.l #4,sp
   12b06:	    add.l d2,d0
   12b08:	    move.l d0,d1
   12b0a:	    addq.l #1,d1
   12b0c:	    move.l d1,20(sp)
   12b10:	    clr.l 16(sp)
   12b14:	    move.l 1add0 <SysBase>,d0
   12b1a:	    movea.l d0,a6
   12b1c:	    move.l 20(sp),d0
   12b20:	    move.l 16(sp),d1
   12b24:	    jsr -684(a6)
   12b28:	    move.l d0,12(sp)
   12b2c:	    move.l 12(sp),d0
   12b30:	    move.l d0,8(sp)
	char * t = newString;
   12b34:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12b3a:	    nop
   12b3c:	/-> move.l 32(sp),d0
   12b40:	|   move.l d0,d1
   12b42:	|   addq.l #1,d1
   12b44:	|   move.l d1,32(sp)
   12b48:	|   movea.l 24(sp),a0
   12b4c:	|   lea 1(a0),a1
   12b50:	|   move.l a1,24(sp)
   12b54:	|   movea.l d0,a1
   12b56:	|   move.b (a1),d0
   12b58:	|   move.b d0,(a0)
   12b5a:	|   move.b (a0),d0
   12b5c:	\-- bne.s 12b3c <joinStrings+0x58>
	t--;
   12b5e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12b62:	    nop
   12b64:	/-> move.l 36(sp),d0
   12b68:	|   move.l d0,d1
   12b6a:	|   addq.l #1,d1
   12b6c:	|   move.l d1,36(sp)
   12b70:	|   movea.l 24(sp),a0
   12b74:	|   lea 1(a0),a1
   12b78:	|   move.l a1,24(sp)
   12b7c:	|   movea.l d0,a1
   12b7e:	|   move.b (a1),d0
   12b80:	|   move.b d0,(a0)
   12b82:	|   move.b (a0),d0
   12b84:	\-- bne.s 12b64 <joinStrings+0x80>

	return newString;
   12b86:	    move.l 8(sp),d0
}
   12b8a:	    move.l (sp)+,d2
   12b8c:	    movea.l (sp)+,a6
   12b8e:	    lea 20(sp),sp
   12b92:	    rts

00012b94 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12b94:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12b98:	       moveq #10,d0
   12b9a:	       cmp.l 28(sp),d0
   12b9e:	   /-- bne.s 12bbc <itoa+0x28>
   12ba0:	   |   tst.l 20(sp)
   12ba4:	   +-- bge.s 12bbc <itoa+0x28>
        *str++ = '-';
   12ba6:	   |   move.l 24(sp),d0
   12baa:	   |   move.l d0,d1
   12bac:	   |   addq.l #1,d1
   12bae:	   |   move.l d1,24(sp)
   12bb2:	   |   movea.l d0,a0
   12bb4:	   |   move.b #45,(a0)
        value *= -1;
   12bb8:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12bbc:	   \-> move.l 24(sp),12(sp)
   12bc2:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12bc8:	   /-> move.l 20(sp),d0
   12bcc:	   |   move.l 28(sp),-(sp)
   12bd0:	   |   move.l d0,-(sp)
   12bd2:	   |   jsr 161ee <__modsi3>
   12bd8:	   |   addq.l #8,sp
   12bda:	   |   movea.l d0,a1
   12bdc:	   |   move.l 12(sp),d0
   12be0:	   |   move.l d0,d1
   12be2:	   |   addq.l #1,d1
   12be4:	   |   move.l d1,12(sp)
   12be8:	   |   lea 1829e <line.c.05397aaf+0x131>,a0
   12bee:	   |   move.b (0,a1,a0.l),d1
   12bf2:	   |   movea.l d0,a0
   12bf4:	   |   move.b d1,(a0)
        value /= base;
   12bf6:	   |   move.l 28(sp),-(sp)
   12bfa:	   |   move.l 24(sp),-(sp)
   12bfe:	   |   jsr 161c0 <__divsi3>
   12c04:	   |   addq.l #8,sp
   12c06:	   |   move.l d0,20(sp)
    } while (value);
   12c0a:	   \-- bne.s 12bc8 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12c0c:	       move.l 12(sp),d0
   12c10:	       move.l d0,d1
   12c12:	       subq.l #1,d1
   12c14:	       move.l d1,12(sp)
   12c18:	       movea.l d0,a0
   12c1a:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12c1c:	       move.l 4(sp),8(sp)
   12c22:	   /-- bra.s 12c48 <itoa+0xb4>
        char temp = *low;
   12c24:	/--|-> movea.l 8(sp),a0
   12c28:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12c2c:	|  |   movea.l 12(sp),a0
   12c30:	|  |   move.b (a0),d0
   12c32:	|  |   movea.l 8(sp),a0
   12c36:	|  |   move.b d0,(a0)
        *ptr = temp;
   12c38:	|  |   movea.l 12(sp),a0
   12c3c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12c40:	|  |   addq.l #1,8(sp)
   12c44:	|  |   subq.l #1,12(sp)
   12c48:	|  \-> move.l 8(sp),d0
   12c4c:	|      cmp.l 12(sp),d0
   12c50:	\----- bcs.s 12c24 <itoa+0x90>
    }
    return rc;
   12c52:	       move.l 4(sp),d0
}
   12c56:	       lea 16(sp),sp
   12c5a:	       rts

00012c5c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12c5c:	                            lea -40(sp),sp
   12c60:	                            move.l d2,-(sp)
    char* s = str;
   12c62:	                            move.l 48(sp),40(sp)
    const char* p = format;
   12c68:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12c6e:	   /----------------------- bra.w 12da2 <vsprintf2+0x146>
        if (*p == '%') {
   12c72:	/--|----------------------> movea.l 36(sp),a0
   12c76:	|  |                        move.b (a0),d0
   12c78:	|  |                        cmpi.b #37,d0
   12c7c:	|  |  /-------------------- bne.w 12d88 <vsprintf2+0x12c>
            switch (*++p) {
   12c80:	|  |  |                     addq.l #1,36(sp)
   12c84:	|  |  |                     movea.l 36(sp),a0
   12c88:	|  |  |                     move.b (a0),d0
   12c8a:	|  |  |                     ext.w d0
   12c8c:	|  |  |                     movea.w d0,a0
   12c8e:	|  |  |                     moveq #115,d0
   12c90:	|  |  |                     cmp.l a0,d0
   12c92:	|  |  |           /-------- beq.s 12d0a <vsprintf2+0xae>
   12c94:	|  |  |           |         moveq #115,d1
   12c96:	|  |  |           |         cmp.l a0,d1
   12c98:	|  |  |  /--------|-------- blt.w 12d70 <vsprintf2+0x114>
   12c9c:	|  |  |  |        |         moveq #99,d2
   12c9e:	|  |  |  |        |         cmp.l a0,d2
   12ca0:	|  |  |  |  /-----|-------- beq.w 12d48 <vsprintf2+0xec>
   12ca4:	|  |  |  |  |     |         moveq #100,d0
   12ca6:	|  |  |  |  |     |         cmp.l a0,d0
   12ca8:	|  |  |  +--|-----|-------- bne.w 12d70 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   12cac:	|  |  |  |  |     |         addq.l #4,56(sp)
   12cb0:	|  |  |  |  |     |         movea.l 56(sp),a0
   12cb4:	|  |  |  |  |     |         move.l (a0),d0
   12cb6:	|  |  |  |  |     |         move.l d0,d1
   12cb8:	|  |  |  |  |     |         subq.l #1,d1
   12cba:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   12cbe:	|  |  |  |  |     |         pea a <_start+0xa>
   12cc2:	|  |  |  |  |     |         lea 8(sp),a0
   12cc6:	|  |  |  |  |     |         move.l a0,-(sp)
   12cc8:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   12ccc:	|  |  |  |  |     |         jsr 12b94 <itoa>
   12cd2:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   12cd6:	|  |  |  |  |     |         lea 44(sp),a0
   12cda:	|  |  |  |  |     |         lea -40(a0),a0
   12cde:	|  |  |  |  |     |         move.l a0,28(sp)
   12ce2:	|  |  |  |  |     |     /-- bra.s 12cfe <vsprintf2+0xa2>
                        *s++ = *b;
   12ce4:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   12ce8:	|  |  |  |  |     |  |  |   move.l d0,d1
   12cea:	|  |  |  |  |     |  |  |   addq.l #1,d1
   12cec:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12cf0:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12cf4:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12cf6:	|  |  |  |  |     |  |  |   movea.l d0,a0
   12cf8:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   12cfa:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12cfe:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12d02:	|  |  |  |  |     |  |      move.b (a0),d0
   12d04:	|  |  |  |  |     |  \----- bne.s 12ce4 <vsprintf2+0x88>
                    }
                    break;
   12d06:	|  |  |  |  |  /--|-------- bra.w 12d9e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   12d0a:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12d0e:	|  |  |  |  |  |            movea.l 56(sp),a0
   12d12:	|  |  |  |  |  |            move.l (a0),d0
   12d14:	|  |  |  |  |  |            move.l d0,d1
   12d16:	|  |  |  |  |  |            subq.l #1,d1
   12d18:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   12d1c:	|  |  |  |  |  |        /-- bra.s 12d3e <vsprintf2+0xe2>
                        *s++ = *sval++;
   12d1e:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12d22:	|  |  |  |  |  |     |  |   move.l d1,d2
   12d24:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12d26:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   12d2a:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   12d2e:	|  |  |  |  |  |     |  |   move.l d0,d2
   12d30:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12d32:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   12d36:	|  |  |  |  |  |     |  |   movea.l d1,a0
   12d38:	|  |  |  |  |  |     |  |   move.b (a0),d1
   12d3a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   12d3c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   12d3e:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   12d42:	|  |  |  |  |  |     |      move.b (a0),d0
   12d44:	|  |  |  |  |  |     \----- bne.s 12d1e <vsprintf2+0xc2>
                    }
                    break;
   12d46:	|  |  |  |  |  +----------- bra.s 12d9e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   12d48:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   12d4c:	|  |  |  |     |            movea.l 56(sp),a0
   12d50:	|  |  |  |     |            move.l (a0),d0
   12d52:	|  |  |  |     |            move.l d0,d1
   12d54:	|  |  |  |     |            subq.l #1,d1
   12d56:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   12d5a:	|  |  |  |     |            move.l 40(sp),d0
   12d5e:	|  |  |  |     |            move.l d0,d2
   12d60:	|  |  |  |     |            addq.l #1,d2
   12d62:	|  |  |  |     |            move.l d2,40(sp)
   12d66:	|  |  |  |     |            move.l 24(sp),d1
   12d6a:	|  |  |  |     |            movea.l d0,a0
   12d6c:	|  |  |  |     |            move.b d1,(a0)
                    break;
   12d6e:	|  |  |  |     +----------- bra.s 12d9e <vsprintf2+0x142>
                default:
                    *s++ = *p;
   12d70:	|  |  |  \-----|----------> move.l 40(sp),d0
   12d74:	|  |  |        |            move.l d0,d1
   12d76:	|  |  |        |            addq.l #1,d1
   12d78:	|  |  |        |            move.l d1,40(sp)
   12d7c:	|  |  |        |            movea.l 36(sp),a0
   12d80:	|  |  |        |            move.b (a0),d1
   12d82:	|  |  |        |            movea.l d0,a0
   12d84:	|  |  |        |            move.b d1,(a0)
                    break;
   12d86:	|  |  |        +----------- bra.s 12d9e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   12d88:	|  |  \--------|----------> move.l 40(sp),d0
   12d8c:	|  |           |            move.l d0,d1
   12d8e:	|  |           |            addq.l #1,d1
   12d90:	|  |           |            move.l d1,40(sp)
   12d94:	|  |           |            movea.l 36(sp),a0
   12d98:	|  |           |            move.b (a0),d1
   12d9a:	|  |           |            movea.l d0,a0
   12d9c:	|  |           |            move.b d1,(a0)
        }
        p++;
   12d9e:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   12da2:	|  \----------------------> movea.l 36(sp),a0
   12da6:	|                           move.b (a0),d0
   12da8:	\-------------------------- bne.w 12c72 <vsprintf2+0x16>
    }
    *s = '\0';
   12dac:	                            movea.l 40(sp),a0
   12db0:	                            clr.b (a0)
    return s - str;
   12db2:	                            move.l 40(sp),d0
   12db6:	                            sub.l 48(sp),d0
}
   12dba:	                            move.l (sp)+,d2
   12dbc:	                            lea 40(sp),sp
   12dc0:	                            rts

00012dc2 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   12dc2:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   12dc4:	moveq #16,d0
   12dc6:	add.l sp,d0
   12dc8:	move.l d0,d1
   12dca:	addq.l #4,d1
   12dcc:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   12dd0:	move.l 16(sp),d0
   12dd4:	move.l 4(sp),-(sp)
   12dd8:	move.l d0,-(sp)
   12dda:	move.l 20(sp),-(sp)
   12dde:	jsr 12c5c <vsprintf2>
   12de4:	lea 12(sp),sp
   12de8:	move.l d0,(sp)
    va_end(args);
   12dea:	clr.l 4(sp)

    return done;
   12dee:	move.l (sp),d0
}
   12df0:	addq.l #8,sp
   12df2:	rts

00012df4 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12df4:	       lea -20(sp),sp
   12df8:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12dfa:	       moveq #12,d0
   12dfc:	       move.l d0,20(sp)
   12e00:	       clr.l 16(sp)
   12e04:	       move.l 1add0 <SysBase>,d0
   12e0a:	       movea.l d0,a6
   12e0c:	       move.l 20(sp),d0
   12e10:	       move.l 16(sp),d1
   12e14:	       jsr -684(a6)
   12e18:	       move.l d0,12(sp)
   12e1c:	       move.l 12(sp),d0
   12e20:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12e24:	   /-- bne.s 12e2a <addVarToStack+0x36>
   12e26:	   |   clr.w d0
   12e28:	/--|-- bra.s 12e72 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   12e2a:	|  \-> move.l 8(sp),d0
   12e2e:	|      move.l d0,-(sp)
   12e30:	|      move.l 32(sp),-(sp)
   12e34:	|      jsr 13956 <copyMain>
   12e3a:	|      addq.l #8,sp
   12e3c:	|      tst.w d0
   12e3e:	|  /-- bne.s 12e5a <addVarToStack+0x66>
        FreeVec(newStack);
   12e40:	|  |   move.l 8(sp),4(sp)
   12e46:	|  |   move.l 1add0 <SysBase>,d0
   12e4c:	|  |   movea.l d0,a6
   12e4e:	|  |   movea.l 4(sp),a1
   12e52:	|  |   jsr -690(a6)
        return FALSE;
   12e56:	|  |   clr.w d0
   12e58:	+--|-- bra.s 12e72 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   12e5a:	|  \-> movea.l 32(sp),a0
   12e5e:	|      move.l (a0),d0
   12e60:	|      movea.l 8(sp),a0
   12e64:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12e68:	|      movea.l 32(sp),a0
   12e6c:	|      move.l 8(sp),(a0)
    return TRUE;
   12e70:	|      moveq #1,d0
}
   12e72:	\----> movea.l (sp)+,a6
   12e74:	       lea 20(sp),sp
   12e78:	       rts

00012e7a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   12e7a:	       lea -16(sp),sp
   12e7e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12e80:	       moveq #12,d0
   12e82:	       move.l d0,16(sp)
   12e86:	       clr.l 12(sp)
   12e8a:	       move.l 1add0 <SysBase>,d0
   12e90:	       movea.l d0,a6
   12e92:	       move.l 16(sp),d0
   12e96:	       move.l 12(sp),d1
   12e9a:	       jsr -684(a6)
   12e9e:	       move.l d0,8(sp)
   12ea2:	       move.l 8(sp),d0
   12ea6:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   12eaa:	   /-- bne.s 12eb0 <addVarToStackQuick+0x36>
   12eac:	   |   clr.w d0
   12eae:	/--|-- bra.s 12ee6 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   12eb0:	|  \-> move.l 4(sp),d0
   12eb4:	|      pea 8 <_start+0x8>
   12eb8:	|      move.l 28(sp),-(sp)
   12ebc:	|      move.l d0,-(sp)
   12ebe:	|      jsr 15738 <memcpy>
   12ec4:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   12ec8:	|      movea.l 24(sp),a0
   12ecc:	|      clr.l (a0)

    newStack->next = *thisStack;
   12ece:	|      movea.l 28(sp),a0
   12ed2:	|      move.l (a0),d0
   12ed4:	|      movea.l 4(sp),a0
   12ed8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12edc:	|      movea.l 28(sp),a0
   12ee0:	|      move.l 4(sp),(a0)
    return TRUE;
   12ee4:	|      moveq #1,d0
}
   12ee6:	\----> movea.l (sp)+,a6
   12ee8:	       lea 16(sp),sp
   12eec:	       rts

00012eee <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   12eee:	       lea -16(sp),sp
   12ef2:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   12ef4:	       movea.l 24(sp),a0
   12ef8:	       move.l (a0),d0
   12efa:	       moveq #1,d1
   12efc:	       cmp.l d0,d1
   12efe:	   /-- bne.s 12f28 <addVariablesInSecond+0x3a>
   12f00:	   |   movea.l 28(sp),a0
   12f04:	   |   move.l (a0),d0
   12f06:	   |   moveq #1,d1
   12f08:	   |   cmp.l d0,d1
   12f0a:	   +-- bne.s 12f28 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   12f0c:	   |   movea.l 28(sp),a0
   12f10:	   |   move.l 4(a0),d1
   12f14:	   |   movea.l 24(sp),a0
   12f18:	   |   move.l 4(a0),d0
   12f1c:	   |   add.l d1,d0
   12f1e:	   |   movea.l 28(sp),a0
   12f22:	   |   move.l d0,4(a0)
   12f26:	/--|-- bra.s 12fa2 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   12f28:	|  \-> move.l 24(sp),-(sp)
   12f2c:	|      jsr 13b8e <getTextFromAnyVar>
   12f32:	|      addq.l #4,sp
   12f34:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   12f38:	|      move.l 28(sp),-(sp)
   12f3c:	|      jsr 13b8e <getTextFromAnyVar>
   12f42:	|      addq.l #4,sp
   12f44:	|      move.l d0,12(sp)

		unlinkVar(var2);
   12f48:	|      move.l 28(sp),-(sp)
   12f4c:	|      jsr 13806 <unlinkVar>
   12f52:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   12f54:	|      move.l 12(sp),-(sp)
   12f58:	|      move.l 20(sp),-(sp)
   12f5c:	|      jsr 12ae4 <joinStrings>
   12f62:	|      addq.l #8,sp
   12f64:	|      movea.l 28(sp),a0
   12f68:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   12f6c:	|      movea.l 28(sp),a0
   12f70:	|      moveq #3,d0
   12f72:	|      move.l d0,(a0)
		FreeVec(string1);
   12f74:	|      move.l 16(sp),8(sp)
   12f7a:	|      move.l 1add0 <SysBase>,d0
   12f80:	|      movea.l d0,a6
   12f82:	|      movea.l 8(sp),a1
   12f86:	|      jsr -690(a6)
		FreeVec(string2);
   12f8a:	|      move.l 12(sp),4(sp)
   12f90:	|      move.l 1add0 <SysBase>,d0
   12f96:	|      movea.l d0,a6
   12f98:	|      movea.l 4(sp),a1
   12f9c:	|      jsr -690(a6)
	}
}
   12fa0:	|      nop
   12fa2:	\----> nop
   12fa4:	       movea.l (sp)+,a6
   12fa6:	       lea 16(sp),sp
   12faa:	       rts

00012fac <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   12fac:	movea.l 8(sp),a0
   12fb0:	move.l 4(a0),-(sp)
   12fb4:	move.l (a0),-(sp)
   12fb6:	movea.l 12(sp),a0
   12fba:	move.l 4(a0),-(sp)
   12fbe:	move.l (a0),-(sp)
   12fc0:	jsr 12fe2 <compareVars>
   12fc6:	lea 16(sp),sp
   12fca:	move.l d0,-(sp)
   12fcc:	pea 1 <_start+0x1>
   12fd0:	move.l 16(sp),-(sp)
   12fd4:	jsr 13eaa <setVariable>
   12fda:	lea 12(sp),sp
}
   12fde:	nop
   12fe0:	rts

00012fe2 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   12fe2:	       subq.l #4,sp
	int re = 0;
   12fe4:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   12fe6:	       move.l 8(sp),d1
   12fea:	       move.l 16(sp),d0
   12fee:	       cmp.l d1,d0
   12ff0:	/----- bne.w 130b8 <compareVars+0xd6>
		switch (var1.varType) {
   12ff4:	|      move.l 8(sp),d0
   12ff8:	|      moveq #9,d1
   12ffa:	|      cmp.l d0,d1
   12ffc:	|  /-- bcs.w 130a0 <compareVars+0xbe>
   13000:	|  |   add.l d0,d0
   13002:	|  |   movea.l d0,a0
   13004:	|  |   adda.l #77840,a0
   1300a:	|  |   move.w (a0),d0
   1300c:	|  |   jmp (13010 <compareVars+0x2e>,pc,d0.w)
   13010:	|  |   ori.b #-112,(a4)
   13014:	|  |   ori.l #5243024,(a0)
   1301a:	|  |   ori.l #7733392,(a0)
   13020:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13026:	|  |   move.l d0,(sp)
			break;
   13028:	+--|-- bra.w 130b8 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1302c:	|  |   move.l 12(sp),d1
   13030:	|  |   move.l 20(sp),d0
   13034:	|  |   cmp.l d1,d0
   13036:	|  |   seq d0
   13038:	|  |   neg.b d0
   1303a:	|  |   move.b d0,d0
   1303c:	|  |   andi.l #255,d0
   13042:	|  |   move.l d0,(sp)
			break;
   13044:	+--|-- bra.s 130b8 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13046:	|  |   move.l 12(sp),d1
   1304a:	|  |   move.l 20(sp),d0
   1304e:	|  |   cmp.l d1,d0
   13050:	|  |   seq d0
   13052:	|  |   neg.b d0
   13054:	|  |   move.b d0,d0
   13056:	|  |   andi.l #255,d0
   1305c:	|  |   move.l d0,(sp)
			break;
   1305e:	+--|-- bra.s 130b8 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   13060:	|  |   move.l 20(sp),d1
   13064:	|  |   move.l 12(sp),d0
   13068:	|  |   move.l d1,-(sp)
   1306a:	|  |   move.l d0,-(sp)
   1306c:	|  |   jsr 12a64 <strcmp>
   13072:	|  |   addq.l #8,sp
   13074:	|  |   tst.l d0
   13076:	|  |   seq d0
   13078:	|  |   neg.b d0
   1307a:	|  |   move.b d0,d0
   1307c:	|  |   andi.l #255,d0
   13082:	|  |   move.l d0,(sp)
			break;
   13084:	+--|-- bra.s 130b8 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13086:	|  |   move.l 12(sp),d1
   1308a:	|  |   move.l 20(sp),d0
   1308e:	|  |   cmp.l d1,d0
   13090:	|  |   seq d0
   13092:	|  |   neg.b d0
   13094:	|  |   move.b d0,d0
   13096:	|  |   andi.l #255,d0
   1309c:	|  |   move.l d0,(sp)
			break;
   1309e:	+--|-- bra.s 130b8 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   130a0:	|  \-> move.l 12(sp),d1
   130a4:	|      move.l 20(sp),d0
   130a8:	|      cmp.l d1,d0
   130aa:	|      seq d0
   130ac:	|      neg.b d0
   130ae:	|      move.b d0,d0
   130b0:	|      andi.l #255,d0
   130b6:	|      move.l d0,(sp)
		}
	}
	return re;
   130b8:	\----> move.l (sp),d0
}
   130ba:	       addq.l #4,sp
   130bc:	       rts

000130be <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   130be:	             lea -16(sp),sp
   130c2:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   130c4:	             movea.l 28(sp),a0
   130c8:	             moveq #6,d0
   130ca:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   130cc:	             moveq #12,d0
   130ce:	             move.l d0,12(sp)
   130d2:	             clr.l 8(sp)
   130d6:	             move.l 1add0 <SysBase>,d0
   130dc:	             movea.l d0,a6
   130de:	             move.l 12(sp),d0
   130e2:	             move.l 8(sp),d1
   130e6:	             jsr -684(a6)
   130ea:	             move.l d0,4(sp)
   130ee:	             move.l 4(sp),d0
   130f2:	             movea.l 28(sp),a0
   130f6:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   130fa:	             movea.l 28(sp),a0
   130fe:	             move.l 4(a0),d0
   13102:	         /-- bne.s 1310a <copyStack+0x4c>
   13104:	         |   clr.w d0
   13106:	/--------|-- bra.w 1318c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1310a:	|        \-> movea.l 28(sp),a0
   1310e:	|            movea.l 4(a0),a0
   13112:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   13114:	|            movea.l 28(sp),a0
   13118:	|            movea.l 4(a0),a0
   1311c:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   13120:	|            movea.l 28(sp),a0
   13124:	|            movea.l 4(a0),a0
   13128:	|            moveq #1,d0
   1312a:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1312e:	|            movea.l 24(sp),a0
   13132:	|            movea.l 4(a0),a0
   13136:	|            move.l (a0),16(sp)

	while (a) {
   1313a:	|     /----- bra.s 13184 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1313c:	|  /--|----> movea.l 28(sp),a0
   13140:	|  |  |      move.l 4(a0),d0
   13144:	|  |  |      move.l d0,d1
   13146:	|  |  |      move.l 16(sp),d0
   1314a:	|  |  |      move.l d1,-(sp)
   1314c:	|  |  |      move.l d0,-(sp)
   1314e:	|  |  |      jsr 12df4 <addVarToStack>
   13154:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   13156:	|  |  |      movea.l 28(sp),a0
   1315a:	|  |  |      movea.l 4(a0),a0
   1315e:	|  |  |      move.l 4(a0),d0
   13162:	|  |  |  /-- bne.s 1317a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13164:	|  |  |  |   movea.l 28(sp),a0
   13168:	|  |  |  |   movea.l 4(a0),a1
   1316c:	|  |  |  |   movea.l 28(sp),a0
   13170:	|  |  |  |   movea.l 4(a0),a0
   13174:	|  |  |  |   move.l (a1),d0
   13176:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1317a:	|  |  |  \-> movea.l 16(sp),a0
   1317e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13184:	|  |  \----> tst.l 16(sp)
   13188:	|  \-------- bne.s 1313c <copyStack+0x7e>
	}

	return TRUE;
   1318a:	|            moveq #1,d0
}
   1318c:	\----------> movea.l (sp)+,a6
   1318e:	             lea 16(sp),sp
   13192:	             rts

00013194 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13194:	                lea -20(sp),sp
   13198:	                move.l a6,-(sp)
   1319a:	                move.l 36(sp),d0
   1319e:	                move.w d0,d0
   131a0:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   131a4:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   131aa:	                clr.l 16(sp)

    while (*huntVar) {
   131ae:	   /----------- bra.s 1322c <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   131b0:	/--|----------> movea.l 20(sp),a0
   131b4:	|  |            movea.l (a0),a0
   131b6:	|  |            movea.l 28(sp),a1
   131ba:	|  |            move.l 4(a1),-(sp)
   131be:	|  |            move.l (a1),-(sp)
   131c0:	|  |            move.l 4(a0),-(sp)
   131c4:	|  |            move.l (a0),-(sp)
   131c6:	|  |            jsr 12fe2 <compareVars>
   131cc:	|  |            lea 16(sp),sp
   131d0:	|  |            tst.l d0
   131d2:	|  |  /-------- beq.s 1321e <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   131d4:	|  |  |         movea.l 20(sp),a0
   131d8:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   131dc:	|  |  |         movea.l 12(sp),a0
   131e0:	|  |  |         move.l 8(a0),d0
   131e4:	|  |  |         movea.l 20(sp),a0
   131e8:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   131ea:	|  |  |         move.l 12(sp),d0
   131ee:	|  |  |         move.l d0,-(sp)
   131f0:	|  |  |         jsr 13806 <unlinkVar>
   131f6:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   131f8:	|  |  |         move.l 12(sp),8(sp)
   131fe:	|  |  |         move.l 1add0 <SysBase>,d0
   13204:	|  |  |         movea.l d0,a6
   13206:	|  |  |         movea.l 8(sp),a1
   1320a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1320e:	|  |  |         tst.w 6(sp)
   13212:	|  |  |     /-- bne.s 13218 <deleteVarFromStack+0x84>
   13214:	|  |  |     |   moveq #1,d0
   13216:	|  |  |  /--|-- bra.s 1323a <deleteVarFromStack+0xa6>
            reply++;
   13218:	|  |  |  |  \-> addq.l #1,16(sp)
   1321c:	|  +--|--|----- bra.s 1322c <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1321e:	|  |  \--|----> movea.l 20(sp),a0
   13222:	|  |     |      move.l (a0),d0
   13224:	|  |     |      move.l d0,d1
   13226:	|  |     |      addq.l #8,d1
   13228:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1322c:	|  \-----|----> movea.l 20(sp),a0
   13230:	|        |      move.l (a0),d0
   13232:	\--------|----- bne.w 131b0 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   13236:	         |      move.l 16(sp),d0
}
   1323a:	         \----> movea.l (sp)+,a6
   1323c:	                lea 20(sp),sp
   13240:	                rts

00013242 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   13242:	       movea.l 4(sp),a0
   13246:	       move.l 4(a0),d0
   1324a:	       cmp.l 8(sp),d0
   1324e:	   /-- bhi.s 13254 <fastArrayGetByIndex+0x12>
   13250:	   |   moveq #0,d0
   13252:	/--|-- bra.s 13262 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   13254:	|  \-> movea.l 4(sp),a0
   13258:	|      move.l (a0),d1
   1325a:	|      move.l 8(sp),d0
   1325e:	|      lsl.l #3,d0
   13260:	|      add.l d1,d0
}
   13262:	\----> rts

00013264 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13264:	                lea -32(sp),sp
   13268:	                move.l a6,-(sp)
   1326a:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1326c:	                clr.l 36(sp)

    switch (thisVar->varType) {
   13270:	                movea.l 44(sp),a0
   13274:	                move.l (a0),d0
   13276:	                moveq #8,d1
   13278:	                cmp.l d0,d1
   1327a:	            /-- beq.s 13288 <getCostumeFromVar+0x24>
   1327c:	            |   moveq #9,d1
   1327e:	            |   cmp.l d0,d1
   13280:	   /--------|-- beq.w 13336 <getCostumeFromVar+0xd2>
   13284:	/--|--------|-- bra.w 13340 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13288:	|  |        \-> moveq #8,d0
   1328a:	|  |            move.l d0,28(sp)
   1328e:	|  |            clr.l 24(sp)
   13292:	|  |            move.l 1add0 <SysBase>,d0
   13298:	|  |            movea.l d0,a6
   1329a:	|  |            move.l 28(sp),d0
   1329e:	|  |            move.l 24(sp),d1
   132a2:	|  |            jsr -684(a6)
   132a6:	|  |            move.l d0,20(sp)
   132aa:	|  |            move.l 20(sp),d0
   132ae:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   132b2:	|  |        /-- bne.s 132ba <getCostumeFromVar+0x56>
   132b4:	|  |        |   moveq #0,d0
   132b6:	|  |  /-----|-- bra.w 1336a <getCostumeFromVar+0x106>
            p->numDirections = 1;
   132ba:	|  |  |     \-> movea.l 36(sp),a0
   132be:	|  |  |         moveq #1,d1
   132c0:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   132c4:	|  |  |         moveq #12,d0
   132c6:	|  |  |         move.l d0,16(sp)
   132ca:	|  |  |         clr.l 12(sp)
   132ce:	|  |  |         move.l 1add0 <SysBase>,d0
   132d4:	|  |  |         movea.l d0,a6
   132d6:	|  |  |         move.l 16(sp),d0
   132da:	|  |  |         move.l 12(sp),d1
   132de:	|  |  |         jsr -684(a6)
   132e2:	|  |  |         move.l d0,8(sp)
   132e6:	|  |  |         move.l 8(sp),d0
   132ea:	|  |  |         movea.l 36(sp),a0
   132ee:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   132f0:	|  |  |         movea.l 36(sp),a0
   132f4:	|  |  |         move.l (a0),d0
   132f6:	|  |  |     /-- bne.s 132fc <getCostumeFromVar+0x98>
   132f8:	|  |  |     |   moveq #0,d0
   132fa:	|  |  +-----|-- bra.s 1336a <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   132fc:	|  |  |     \-> clr.l 32(sp)
   13300:	|  |  |     /-- bra.s 1332c <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13302:	|  |  |  /--|-> movea.l 44(sp),a0
   13306:	|  |  |  |  |   move.l 4(a0),d0
   1330a:	|  |  |  |  |   movea.l 36(sp),a0
   1330e:	|  |  |  |  |   movea.l (a0),a0
   13310:	|  |  |  |  |   move.l 32(sp),d1
   13314:	|  |  |  |  |   add.l d1,d1
   13316:	|  |  |  |  |   add.l d1,d1
   13318:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1331c:	|  |  |  |  |   move.l d0,-(sp)
   1331e:	|  |  |  |  |   jsr 84b6 <copyAnim>
   13324:	|  |  |  |  |   addq.l #4,sp
   13326:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   13328:	|  |  |  |  |   addq.l #1,32(sp)
   1332c:	|  |  |  |  \-> moveq #2,d1
   1332e:	|  |  |  |      cmp.l 32(sp),d1
   13332:	|  |  |  \----- bge.s 13302 <getCostumeFromVar+0x9e>
            }
            break;
   13334:	|  |  |     /-- bra.s 13366 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   13336:	|  \--|-----|-> movea.l 44(sp),a0
   1333a:	|     |     |   move.l 4(a0),d0
   1333e:	|     +-----|-- bra.s 1336a <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13340:	\-----|-----|-> movea.l 44(sp),a0
   13344:	      |     |   move.l (a0),d0
   13346:	      |     |   add.l d0,d0
   13348:	      |     |   movea.l d0,a1
   1334a:	      |     |   adda.l d0,a1
   1334c:	      |     |   lea 1acb2 <typeName>,a0
   13352:	      |     |   move.l (0,a1,a0.l),d0
   13356:	      |     |   move.l d0,-(sp)
   13358:	      |     |   pea 18310 <line.c.05397aaf+0x1a3>
   1335e:	      |     |   jsr 15784 <KPrintF>
   13364:	      |     |   addq.l #8,sp
    }

    return p;
   13366:	      |     \-> move.l 36(sp),d0
}
   1336a:	      \-------> movea.l (sp)+,a2
   1336c:	                movea.l (sp)+,a6
   1336e:	                lea 32(sp),sp
   13372:	                rts

00013374 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   13374:	                lea -96(sp),sp
   13378:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1337c:	                move.l 116(sp),-(sp)
   13380:	                pea 18348 <line.c.05397aaf+0x1db>
   13386:	                jsr 12ae4 <joinStrings>
   1338c:	                addq.l #8,sp
   1338e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   13392:	            /-- bne.s 1339a <getSavedGamesStack+0x26>
   13394:	            |   clr.w d0
   13396:	/-----------|-- bra.w 135ae <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1339a:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1339e:	|               move.l #99146,98(sp)
   133a6:	|               moveq #-2,d0
   133a8:	|               move.l d0,94(sp)
   133ac:	|               move.l 1add8 <DOSBase>,d0
   133b2:	|               movea.l d0,a6
   133b4:	|               move.l 98(sp),d1
   133b8:	|               move.l 94(sp),d2
   133bc:	|               jsr -84(a6)
   133c0:	|               move.l d0,90(sp)
   133c4:	|               move.l 90(sp),d0
   133c8:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   133cc:	|           /-- bne.s 133d4 <getSavedGamesStack+0x60>
   133ce:	|           |   clr.w d0
   133d0:	+-----------|-- bra.w 135ae <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   133d4:	|           \-> move.l #260,82(sp)
   133dc:	|               move.l #65536,78(sp)
   133e4:	|               move.l 1add0 <SysBase>,d0
   133ea:	|               movea.l d0,a6
   133ec:	|               move.l 82(sp),d0
   133f0:	|               move.l 78(sp),d1
   133f4:	|               jsr -684(a6)
   133f8:	|               move.l d0,74(sp)
   133fc:	|               move.l 74(sp),d0
   13400:	|               move.l d0,70(sp)
	if (!fib) {
   13404:	|           /-- bne.s 13422 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   13406:	|           |   move.l 86(sp),22(sp)
   1340c:	|           |   move.l 1add8 <DOSBase>,d0
   13412:	|           |   movea.l d0,a6
   13414:	|           |   move.l 22(sp),d1
   13418:	|           |   jsr -90(a6)
		return FALSE;
   1341c:	|           |   clr.w d0
   1341e:	+-----------|-- bra.w 135ae <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   13422:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   13426:	|               move.l 86(sp),66(sp)
   1342c:	|               move.l 70(sp),62(sp)
   13432:	|               move.l 1add8 <DOSBase>,d0
   13438:	|               movea.l d0,a6
   1343a:	|               move.l 66(sp),d1
   1343e:	|               move.l 62(sp),d2
   13442:	|               jsr -102(a6)
   13446:	|               move.l d0,58(sp)
   1344a:	|               move.l 58(sp),d0
   1344e:	|  /----------- beq.w 13562 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   13452:	|  |        /-- bra.w 1352e <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   13456:	|  |  /-----|-> move.l 70(sp),d2
   1345a:	|  |  |     |   addq.l #8,d2
   1345c:	|  |  |     |   move.l 70(sp),d0
   13460:	|  |  |     |   addq.l #8,d0
   13462:	|  |  |     |   move.l d0,-(sp)
   13464:	|  |  |     |   jsr 12aa4 <strlen>
   1346a:	|  |  |     |   addq.l #4,sp
   1346c:	|  |  |     |   move.l d0,d3
   1346e:	|  |  |     |   move.l 116(sp),-(sp)
   13472:	|  |  |     |   jsr 12aa4 <strlen>
   13478:	|  |  |     |   addq.l #4,sp
   1347a:	|  |  |     |   move.l d3,d1
   1347c:	|  |  |     |   sub.l d0,d1
   1347e:	|  |  |     |   move.l d2,d0
   13480:	|  |  |     |   add.l d1,d0
   13482:	|  |  |     |   move.l 116(sp),-(sp)
   13486:	|  |  |     |   move.l d0,-(sp)
   13488:	|  |  |     |   jsr 12a64 <strcmp>
   1348e:	|  |  |     |   addq.l #8,sp
   13490:	|  |  |     |   tst.l d0
   13492:	|  |  |     +-- bne.w 1352e <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   13496:	|  |  |     |   move.l 70(sp),d0
   1349a:	|  |  |     |   addq.l #8,d0
   1349c:	|  |  |     |   move.l d0,-(sp)
   1349e:	|  |  |     |   jsr 12aa4 <strlen>
   134a4:	|  |  |     |   addq.l #4,sp
   134a6:	|  |  |     |   move.l d0,d2
   134a8:	|  |  |     |   move.l 116(sp),-(sp)
   134ac:	|  |  |     |   jsr 12aa4 <strlen>
   134b2:	|  |  |     |   addq.l #4,sp
   134b4:	|  |  |     |   move.l d0,d1
   134b6:	|  |  |     |   move.l d2,d0
   134b8:	|  |  |     |   sub.l d1,d0
   134ba:	|  |  |     |   movea.l 70(sp),a0
   134be:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   134c2:	|  |  |     |   move.l 70(sp),d0
   134c6:	|  |  |     |   addq.l #8,d0
   134c8:	|  |  |     |   move.l d0,-(sp)
   134ca:	|  |  |     |   jsr 118 <decodeFilename>
   134d0:	|  |  |     |   addq.l #4,sp
   134d2:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   134d6:	|  |  |     |   move.l 42(sp),-(sp)
   134da:	|  |  |     |   lea 18(sp),a0
   134de:	|  |  |     |   move.l a0,-(sp)
   134e0:	|  |  |     |   jsr 137da <makeTextVar>
   134e6:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   134e8:	|  |  |     |   move.l 42(sp),38(sp)
   134ee:	|  |  |     |   move.l 1add0 <SysBase>,d0
   134f4:	|  |  |     |   movea.l d0,a6
   134f6:	|  |  |     |   movea.l 38(sp),a1
   134fa:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   134fe:	|  |  |     |   move.l 112(sp),d0
   13502:	|  |  |     |   move.l d0,-(sp)
   13504:	|  |  |     |   lea 18(sp),a0
   13508:	|  |  |     |   move.l a0,-(sp)
   1350a:	|  |  |     |   jsr 12df4 <addVarToStack>
   13510:	|  |  |     |   addq.l #8,sp
   13512:	|  |  |     |   tst.w d0
   13514:	|  |  |  /--|-- beq.s 13566 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   13516:	|  |  |  |  |   movea.l 112(sp),a0
   1351a:	|  |  |  |  |   move.l 4(a0),d0
   1351e:	|  |  |  |  +-- bne.s 1352e <getSavedGamesStack+0x1ba>
   13520:	|  |  |  |  |   movea.l 112(sp),a0
   13524:	|  |  |  |  |   move.l (a0),d0
   13526:	|  |  |  |  |   movea.l 112(sp),a0
   1352a:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1352e:	|  |  |  |  \-> move.l 86(sp),54(sp)
   13534:	|  |  |  |      move.l 70(sp),50(sp)
   1353a:	|  |  |  |      move.l 1add8 <DOSBase>,d0
   13540:	|  |  |  |      movea.l d0,a6
   13542:	|  |  |  |      move.l 54(sp),d1
   13546:	|  |  |  |      move.l 50(sp),d2
   1354a:	|  |  |  |      jsr -108(a6)
   1354e:	|  |  |  |      move.l d0,46(sp)
   13552:	|  |  |  |      move.l 46(sp),d0
   13556:	|  |  \--|----- bne.w 13456 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1355a:	|  |     |      move.w #1,106(sp)
   13560:	|  |     |  /-- bra.s 13568 <getSavedGamesStack+0x1f4>
	}

cleanup:
   13562:	|  \-----|--|-> nop
   13564:	|        |  +-- bra.s 13568 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13566:	|        \--|-> nop
	FreeVec(fib);
   13568:	|           \-> move.l 70(sp),34(sp)
   1356e:	|               move.l 1add0 <SysBase>,d0
   13574:	|               movea.l d0,a6
   13576:	|               movea.l 34(sp),a1
   1357a:	|               jsr -690(a6)
	UnLock(dirLock);
   1357e:	|               move.l 86(sp),30(sp)
   13584:	|               move.l 1add8 <DOSBase>,d0
   1358a:	|               movea.l d0,a6
   1358c:	|               move.l 30(sp),d1
   13590:	|               jsr -90(a6)
	FreeVec(pattern);
   13594:	|               move.l 102(sp),26(sp)
   1359a:	|               move.l 1add0 <SysBase>,d0
   135a0:	|               movea.l d0,a6
   135a2:	|               movea.l 26(sp),a1
   135a6:	|               jsr -690(a6)
	return result;
   135aa:	|               move.w 106(sp),d0
}
   135ae:	\-------------> movem.l (sp)+,d2-d3/a6
   135b2:	                lea 96(sp),sp
   135b6:	                rts

000135b8 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   135b8:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   135ba:	       movea.l 20(sp),a0
   135be:	       move.l (a0),d0
   135c0:	       cmp.l 16(sp),d0
   135c4:	/----- beq.s 13628 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   135c6:	|      move.l 16(sp),d0
   135ca:	|      add.l d0,d0
   135cc:	|      movea.l d0,a1
   135ce:	|      adda.l d0,a1
   135d0:	|      lea 1acb2 <typeName>,a0
   135d6:	|      move.l (0,a1,a0.l),d0
   135da:	|      move.l d0,-(sp)
   135dc:	|      pea 1834c <line.c.05397aaf+0x1df>
   135e2:	|      jsr 12ae4 <joinStrings>
   135e8:	|      addq.l #8,sp
   135ea:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   135ee:	|      movea.l 20(sp),a0
   135f2:	|      move.l (a0),d0
   135f4:	|      add.l d0,d0
   135f6:	|      movea.l d0,a1
   135f8:	|      adda.l d0,a1
   135fa:	|      lea 1acb2 <typeName>,a0
   13600:	|      move.l (0,a1,a0.l),d0
   13604:	|      move.l d0,-(sp)
   13606:	|      pea 1838e <line.c.05397aaf+0x221>
   1360c:	|      jsr 12ae4 <joinStrings>
   13612:	|      addq.l #8,sp
   13614:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   13616:	|      move.l (sp),-(sp)
   13618:	|      move.l 8(sp),-(sp)
   1361c:	|      jsr 15784 <KPrintF>
   13622:	|      addq.l #8,sp

		return FALSE;
   13624:	|      clr.w d0
   13626:	|  /-- bra.s 13638 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   13628:	\--|-> movea.l 20(sp),a0
   1362c:	   |   move.l 4(a0),d0
   13630:	   |   movea.l 12(sp),a0
   13634:	   |   move.l d0,(a0)
	return TRUE;
   13636:	   |   moveq #1,d0
}
   13638:	   \-> addq.l #8,sp
   1363a:	       rts

0001363c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1363c:	move.l 8(sp),-(sp)
   13640:	jsr 5ace <getNumberedString>
   13646:	addq.l #4,sp
   13648:	move.l d0,-(sp)
   1364a:	move.l 8(sp),-(sp)
   1364e:	jsr 137da <makeTextVar>
   13654:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   13656:	movea.l 4(sp),a0
   1365a:	move.l 4(a0),d0
   1365e:	sne d0
   13660:	neg.b d0
   13662:	move.b d0,d0
   13664:	andi.w #255,d0
}
   13668:	rts

0001366a <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1366a:	          subq.l #8,sp
    int size = stackSize(stacky);
   1366c:	          move.l 16(sp),-(sp)
   13670:	          jsr 13f18 <stackSize>
   13676:	          addq.l #4,sp
   13678:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1367c:	          move.l 4(sp),-(sp)
   13680:	          move.l 16(sp),-(sp)
   13684:	          jsr 136d4 <makeFastArraySize>
   1368a:	          addq.l #8,sp
   1368c:	          tst.w d0
   1368e:	      /-- bne.s 13694 <makeFastArrayFromStack+0x2a>
   13690:	      |   clr.w d0
   13692:	/-----|-- bra.s 136d0 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   13694:	|     \-> movea.l 16(sp),a0
   13698:	|         move.l (a0),(sp)
    size = 0;
   1369a:	|         clr.l 4(sp)
    while (allV) {
   1369e:	|     /-- bra.s 136ca <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   136a0:	|  /--|-> movea.l 12(sp),a0
   136a4:	|  |  |   movea.l 4(a0),a0
   136a8:	|  |  |   move.l (a0),d1
   136aa:	|  |  |   move.l 4(sp),d0
   136ae:	|  |  |   lsl.l #3,d0
   136b0:	|  |  |   add.l d0,d1
   136b2:	|  |  |   move.l (sp),d0
   136b4:	|  |  |   move.l d1,-(sp)
   136b6:	|  |  |   move.l d0,-(sp)
   136b8:	|  |  |   jsr 13956 <copyMain>
   136be:	|  |  |   addq.l #8,sp
        size++;
   136c0:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   136c4:	|  |  |   movea.l (sp),a0
   136c6:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   136ca:	|  |  \-> tst.l (sp)
   136cc:	|  \----- bne.s 136a0 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   136ce:	|         moveq #1,d0
}
   136d0:	\-------> addq.l #8,sp
   136d2:	          rts

000136d4 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   136d4:	          lea -28(sp),sp
   136d8:	          move.l a6,-(sp)
    if (size < 0) {
   136da:	          tst.l 40(sp)
   136de:	      /-- bge.s 136f4 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   136e0:	      |   pea 183d3 <graphics.c.1c13408a+0xa>
   136e6:	      |   jsr 15784 <KPrintF>
   136ec:	      |   addq.l #4,sp
		return FALSE;
   136ee:	      |   clr.w d0
   136f0:	/-----|-- bra.w 137d2 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   136f4:	|     \-> move.l 36(sp),-(sp)
   136f8:	|         jsr 13806 <unlinkVar>
   136fe:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   13700:	|         movea.l 36(sp),a0
   13704:	|         moveq #10,d0
   13706:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   13708:	|         moveq #12,d0
   1370a:	|         move.l d0,24(sp)
   1370e:	|         clr.l 20(sp)
   13712:	|         move.l 1add0 <SysBase>,d0
   13718:	|         movea.l d0,a6
   1371a:	|         move.l 24(sp),d0
   1371e:	|         move.l 20(sp),d1
   13722:	|         jsr -684(a6)
   13726:	|         move.l d0,16(sp)
   1372a:	|         move.l 16(sp),d0
   1372e:	|         movea.l 36(sp),a0
   13732:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   13736:	|         movea.l 36(sp),a0
   1373a:	|         move.l 4(a0),d0
   1373e:	|     /-- bne.s 13746 <makeFastArraySize+0x72>
   13740:	|     |   clr.w d0
   13742:	+-----|-- bra.w 137d2 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   13746:	|     \-> move.l 40(sp),d0
   1374a:	|         lsl.l #3,d0
   1374c:	|         move.l d0,12(sp)
   13750:	|         clr.l 8(sp)
   13754:	|         move.l 1add0 <SysBase>,d0
   1375a:	|         movea.l d0,a6
   1375c:	|         move.l 12(sp),d0
   13760:	|         move.l 8(sp),d1
   13764:	|         jsr -684(a6)
   13768:	|         move.l d0,4(sp)
   1376c:	|         move.l 4(sp),d0
   13770:	|         movea.l 36(sp),a0
   13774:	|         movea.l 4(a0),a0
   13778:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1377a:	|         movea.l 36(sp),a0
   1377e:	|         movea.l 4(a0),a0
   13782:	|         move.l (a0),d0
   13784:	|     /-- bne.s 1378a <makeFastArraySize+0xb6>
   13786:	|     |   clr.w d0
   13788:	+-----|-- bra.s 137d2 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1378a:	|     \-> clr.l 28(sp)
   1378e:	|     /-- bra.s 137aa <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   13790:	|  /--|-> movea.l 36(sp),a0
   13794:	|  |  |   movea.l 4(a0),a0
   13798:	|  |  |   move.l (a0),d1
   1379a:	|  |  |   move.l 28(sp),d0
   1379e:	|  |  |   lsl.l #3,d0
   137a0:	|  |  |   movea.l d1,a0
   137a2:	|  |  |   adda.l d0,a0
   137a4:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   137a6:	|  |  |   addq.l #1,28(sp)
   137aa:	|  |  \-> move.l 28(sp),d0
   137ae:	|  |      cmp.l 40(sp),d0
   137b2:	|  \----- blt.s 13790 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   137b4:	|         movea.l 36(sp),a0
   137b8:	|         movea.l 4(a0),a0
   137bc:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   137c2:	|         movea.l 36(sp),a0
   137c6:	|         movea.l 4(a0),a0
   137ca:	|         moveq #1,d0
   137cc:	|         move.l d0,8(a0)
    return TRUE;
   137d0:	|         moveq #1,d0
}
   137d2:	\-------> movea.l (sp)+,a6
   137d4:	          lea 28(sp),sp
   137d8:	          rts

000137da <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   137da:	move.l 4(sp),-(sp)
   137de:	jsr 13806 <unlinkVar>
   137e4:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   137e6:	movea.l 4(sp),a0
   137ea:	moveq #3,d0
   137ec:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   137ee:	move.l 8(sp),-(sp)
   137f2:	jsr b8 <copyString>
   137f8:	addq.l #4,sp
   137fa:	movea.l 4(sp),a0
   137fe:	move.l d0,4(a0)
}
   13802:	nop
   13804:	rts

00013806 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   13806:	                      lea -16(sp),sp
   1380a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   1380c:	                      movea.l 24(sp),a0
   13810:	                      move.l (a0),d0
   13812:	                      moveq #10,d1
   13814:	                      cmp.l d0,d1
   13816:	            /-------- beq.w 138ce <unlinkVar+0xc8>
   1381a:	            |         moveq #10,d1
   1381c:	            |         cmp.l d0,d1
   1381e:	/-----------|-------- bcs.w 13942 <unlinkVar+0x13c>
   13822:	|           |         moveq #8,d1
   13824:	|           |         cmp.l d0,d1
   13826:	|  /--------|-------- beq.w 1392e <unlinkVar+0x128>
   1382a:	|  |        |         moveq #8,d1
   1382c:	|  |        |         cmp.l d0,d1
   1382e:	+--|--------|-------- bcs.w 13942 <unlinkVar+0x13c>
   13832:	|  |        |         moveq #3,d1
   13834:	|  |        |         cmp.l d0,d1
   13836:	|  |        |     /-- beq.s 13842 <unlinkVar+0x3c>
   13838:	|  |        |     |   moveq #6,d1
   1383a:	|  |        |     |   cmp.l d0,d1
   1383c:	|  |        |  /--|-- beq.s 13868 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   1383e:	+--|--------|--|--|-- bra.w 13942 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   13842:	|  |        |  |  \-> movea.l 24(sp),a0
   13846:	|  |        |  |      move.l 4(a0),4(sp)
   1384c:	|  |        |  |      move.l 1add0 <SysBase>,d0
   13852:	|  |        |  |      movea.l d0,a6
   13854:	|  |        |  |      movea.l 4(sp),a1
   13858:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   1385c:	|  |        |  |      movea.l 24(sp),a0
   13860:	|  |        |  |      clr.l 4(a0)
		break;
   13864:	|  |  /-----|--|----- bra.w 1394c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   13868:	|  |  |     |  \----> movea.l 24(sp),a0
   1386c:	|  |  |     |         movea.l 4(a0),a0
   13870:	|  |  |     |         move.l 8(a0),d0
   13874:	|  |  |     |         subq.l #1,d0
   13876:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1387a:	|  |  |     |         movea.l 24(sp),a0
   1387e:	|  |  |     |         movea.l 4(a0),a0
   13882:	|  |  |     |         move.l 8(a0),d0
   13886:	|  |  |  /--|-------- bgt.w 13946 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   1388a:	|  |  |  |  |     /-- bra.s 1389e <unlinkVar+0x98>
   1388c:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   13890:	|  |  |  |  |  |  |   move.l 4(a0),d0
   13894:	|  |  |  |  |  |  |   move.l d0,-(sp)
   13896:	|  |  |  |  |  |  |   jsr 13f3c <trimStack>
   1389c:	|  |  |  |  |  |  |   addq.l #4,sp
   1389e:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   138a2:	|  |  |  |  |  |      movea.l 4(a0),a0
   138a6:	|  |  |  |  |  |      move.l (a0),d0
   138a8:	|  |  |  |  |  \----- bne.s 1388c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   138aa:	|  |  |  |  |         movea.l 24(sp),a0
   138ae:	|  |  |  |  |         move.l 4(a0),8(sp)
   138b4:	|  |  |  |  |         move.l 1add0 <SysBase>,d0
   138ba:	|  |  |  |  |         movea.l d0,a6
   138bc:	|  |  |  |  |         movea.l 8(sp),a1
   138c0:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   138c4:	|  |  |  |  |         movea.l 24(sp),a0
   138c8:	|  |  |  |  |         clr.l 4(a0)
		break;
   138cc:	|  |  |  +--|-------- bra.s 13946 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   138ce:	|  |  |  |  \-------> movea.l 24(sp),a0
   138d2:	|  |  |  |            movea.l 4(a0),a0
   138d6:	|  |  |  |            move.l 8(a0),d0
   138da:	|  |  |  |            subq.l #1,d0
   138dc:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   138e0:	|  |  |  |            movea.l 24(sp),a0
   138e4:	|  |  |  |            movea.l 4(a0),a0
   138e8:	|  |  |  |            move.l 8(a0),d0
   138ec:	|  |  |  |        /-- bgt.s 1394a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   138ee:	|  |  |  |        |   movea.l 24(sp),a0
   138f2:	|  |  |  |        |   movea.l 4(a0),a0
   138f6:	|  |  |  |        |   move.l (a0),16(sp)
   138fa:	|  |  |  |        |   move.l 1add0 <SysBase>,d0
   13900:	|  |  |  |        |   movea.l d0,a6
   13902:	|  |  |  |        |   movea.l 16(sp),a1
   13906:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1390a:	|  |  |  |        |   movea.l 24(sp),a0
   1390e:	|  |  |  |        |   move.l 4(a0),12(sp)
   13914:	|  |  |  |        |   move.l 1add0 <SysBase>,d0
   1391a:	|  |  |  |        |   movea.l d0,a6
   1391c:	|  |  |  |        |   movea.l 12(sp),a1
   13920:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   13924:	|  |  |  |        |   movea.l 24(sp),a0
   13928:	|  |  |  |        |   clr.l 4(a0)
		break;
   1392c:	|  |  |  |        +-- bra.s 1394a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1392e:	|  \--|--|--------|-> movea.l 24(sp),a0
   13932:	|     |  |        |   move.l 4(a0),d0
   13936:	|     |  |        |   move.l d0,-(sp)
   13938:	|     |  |        |   jsr 8882 <deleteAnim>
   1393e:	|     |  |        |   addq.l #4,sp
		break;
   13940:	|     +--|--------|-- bra.s 1394c <unlinkVar+0x146>
		break;
   13942:	\-----|--|--------|-> nop
   13944:	      +--|--------|-- bra.s 1394c <unlinkVar+0x146>
		break;
   13946:	      |  \--------|-> nop
   13948:	      +-----------|-- bra.s 1394c <unlinkVar+0x146>
		break;
   1394a:	      |           \-> nop
	}
}
   1394c:	      \-------------> nop
   1394e:	                      movea.l (sp)+,a6
   13950:	                      lea 16(sp),sp
   13954:	                      rts

00013956 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   13956:	       movea.l 4(sp),a0
   1395a:	       move.l (a0),d0
   1395c:	       movea.l 8(sp),a0
   13960:	       move.l d0,(a0)
	switch (to->varType) {
   13962:	       movea.l 8(sp),a0
   13966:	       move.l (a0),d0
   13968:	       moveq #10,d1
   1396a:	       cmp.l d0,d1
   1396c:	/----- bcs.w 13a5e <copyMain+0x108>
   13970:	|      add.l d0,d0
   13972:	|      movea.l d0,a0
   13974:	|      adda.l #80256,a0
   1397a:	|      move.w (a0),d0
   1397c:	|      jmp (13980 <copyMain+0x2a>,pc,d0.w)
   13980:	|      .short 0x00da
   13982:	|      ori.b #22,(a6)
   13986:	|      ori.w #22,(a4)
   1398a:	|      ori.b #-126,(a6)
   1398e:	|      ori.b #-68,(a6)
   13992:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   1399a:	|      move.l 4(a0),d0
   1399e:	|      movea.l 8(sp),a0
   139a2:	|      move.l d0,4(a0)
		return TRUE;
   139a6:	|      moveq #1,d0
   139a8:	|  /-- bra.w 13a70 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   139ac:	|  |   movea.l 4(sp),a0
   139b0:	|  |   move.l 4(a0),d0
   139b4:	|  |   movea.l 8(sp),a0
   139b8:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   139bc:	|  |   movea.l 8(sp),a0
   139c0:	|  |   movea.l 4(a0),a0
   139c4:	|  |   move.l 8(a0),d0
   139c8:	|  |   addq.l #1,d0
   139ca:	|  |   move.l d0,8(a0)
		return TRUE;
   139ce:	|  |   moveq #1,d0
   139d0:	|  +-- bra.w 13a70 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   139d4:	|  |   movea.l 4(sp),a0
   139d8:	|  |   move.l 4(a0),d0
   139dc:	|  |   move.l d0,-(sp)
   139de:	|  |   jsr b8 <copyString>
   139e4:	|  |   addq.l #4,sp
   139e6:	|  |   movea.l 8(sp),a0
   139ea:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   139ee:	|  |   movea.l 8(sp),a0
   139f2:	|  |   move.l 4(a0),d0
   139f6:	|  |   sne d0
   139f8:	|  |   neg.b d0
   139fa:	|  |   move.b d0,d0
   139fc:	|  |   andi.w #255,d0
   13a00:	|  +-- bra.s 13a70 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13a02:	|  |   movea.l 4(sp),a0
   13a06:	|  |   move.l 4(a0),d0
   13a0a:	|  |   movea.l 8(sp),a0
   13a0e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13a12:	|  |   movea.l 8(sp),a0
   13a16:	|  |   movea.l 4(a0),a0
   13a1a:	|  |   move.l 8(a0),d0
   13a1e:	|  |   addq.l #1,d0
   13a20:	|  |   move.l d0,8(a0)
		return TRUE;
   13a24:	|  |   moveq #1,d0
   13a26:	|  +-- bra.s 13a70 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13a28:	|  |   movea.l 4(sp),a0
   13a2c:	|  |   move.l 4(a0),d0
   13a30:	|  |   movea.l 8(sp),a0
   13a34:	|  |   move.l d0,4(a0)
		return TRUE;
   13a38:	|  |   moveq #1,d0
   13a3a:	|  +-- bra.s 13a70 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13a3c:	|  |   movea.l 4(sp),a0
   13a40:	|  |   move.l 4(a0),d0
   13a44:	|  |   move.l d0,-(sp)
   13a46:	|  |   jsr 84b6 <copyAnim>
   13a4c:	|  |   addq.l #4,sp
   13a4e:	|  |   movea.l 8(sp),a0
   13a52:	|  |   move.l d0,4(a0)
		return TRUE;
   13a56:	|  |   moveq #1,d0
   13a58:	|  +-- bra.s 13a70 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13a5a:	|  |   moveq #1,d0
   13a5c:	|  +-- bra.s 13a70 <copyMain+0x11a>

		default:
		break;
   13a5e:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13a60:	   |   pea 18424 <graphics.c.1c13408a+0x5b>
   13a66:	   |   jsr 15784 <KPrintF>
   13a6c:	   |   addq.l #4,sp
	return FALSE;
   13a6e:	   |   clr.w d0
}
   13a70:	   \-> rts

00013a72 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13a72:	move.l 8(sp),-(sp)
   13a76:	jsr 13806 <unlinkVar>
   13a7c:	addq.l #4,sp
	return copyMain(from, to);
   13a7e:	move.l 8(sp),-(sp)
   13a82:	move.l 8(sp),-(sp)
   13a86:	jsr 13956 <copyMain>
   13a8c:	addq.l #8,sp
}
   13a8e:	rts

00013a90 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13a90:	       movea.l 4(sp),a0
   13a94:	       move.l (a0),d0
   13a96:	       moveq #8,d1
   13a98:	       cmp.l d0,d1
   13a9a:	   /-- bne.s 13ab0 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13a9c:	   |   movea.l 4(sp),a0
   13aa0:	   |   move.l 4(a0),d0
   13aa4:	   |   move.l d0,-(sp)
   13aa6:	   |   jsr 84b6 <copyAnim>
   13aac:	   |   addq.l #4,sp
   13aae:	/--|-- bra.s 13af6 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13ab0:	|  \-> movea.l 4(sp),a0
   13ab4:	|      move.l (a0),d0
   13ab6:	|      moveq #1,d1
   13ab8:	|      cmp.l d0,d1
   13aba:	|  /-- bne.s 13ace <getAnimationFromVar+0x3e>
   13abc:	|  |   movea.l 4(sp),a0
   13ac0:	|  |   move.l 4(a0),d0
   13ac4:	|  +-- bne.s 13ace <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13ac6:	|  |   jsr 9bf6 <makeNullAnim>
   13acc:	+--|-- bra.s 13af6 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13ace:	|  \-> movea.l 4(sp),a0
   13ad2:	|      move.l (a0),d0
   13ad4:	|      add.l d0,d0
   13ad6:	|      movea.l d0,a1
   13ad8:	|      adda.l d0,a1
   13ada:	|      lea 1acb2 <typeName>,a0
   13ae0:	|      move.l (0,a1,a0.l),d0
   13ae4:	|      move.l d0,-(sp)
   13ae6:	|      pea 18310 <line.c.05397aaf+0x1a3>
   13aec:	|      jsr 15784 <KPrintF>
   13af2:	|      addq.l #8,sp
	return NULL;
   13af4:	|      moveq #0,d0
}
   13af6:	\----> rts

00013af8 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13af8:	       movea.l 4(sp),a0
   13afc:	       move.l (a0),d0
   13afe:	       moveq #10,d1
   13b00:	       cmp.l d0,d1
   13b02:	/----- bcs.w 13b88 <getBoolean+0x90>
   13b06:	|      add.l d0,d0
   13b08:	|      movea.l d0,a0
   13b0a:	|      adda.l #80662,a0
   13b10:	|      move.w (a0),d0
   13b12:	|      jmp (13b16 <getBoolean+0x1e>,pc,d0.w)
   13b16:	|      ori.b #26,(a6)
   13b1a:	|      ori.w #68,(114,a2,d0.w)
   13b20:	|      ori.w #46,(114,a2,d0.w)
   13b26:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13b2c:	|      clr.w d0
   13b2e:	|  /-- bra.s 13b8c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13b30:	|  |   movea.l 4(sp),a0
   13b34:	|  |   move.l 4(a0),d0
   13b38:	|  |   sne d0
   13b3a:	|  |   neg.b d0
   13b3c:	|  |   move.b d0,d0
   13b3e:	|  |   andi.w #255,d0
   13b42:	|  +-- bra.s 13b8c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13b44:	|  |   movea.l 4(sp),a0
   13b48:	|  |   movea.l 4(a0),a0
   13b4c:	|  |   move.l (a0),d0
   13b4e:	|  |   sne d0
   13b50:	|  |   neg.b d0
   13b52:	|  |   move.b d0,d0
   13b54:	|  |   andi.w #255,d0
   13b58:	|  +-- bra.s 13b8c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13b5a:	|  |   movea.l 4(sp),a0
   13b5e:	|  |   movea.l 4(a0),a0
   13b62:	|  |   move.b (a0),d0
   13b64:	|  |   sne d0
   13b66:	|  |   neg.b d0
   13b68:	|  |   move.b d0,d0
   13b6a:	|  |   andi.w #255,d0
   13b6e:	|  +-- bra.s 13b8c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13b70:	|  |   movea.l 4(sp),a0
   13b74:	|  |   movea.l 4(a0),a0
   13b78:	|  |   move.l 4(a0),d0
   13b7c:	|  |   sne d0
   13b7e:	|  |   neg.b d0
   13b80:	|  |   move.b d0,d0
   13b82:	|  |   andi.w #255,d0
   13b86:	|  +-- bra.s 13b8c <getBoolean+0x94>

		default:
		break;
   13b88:	\--|-> nop
	}
	return TRUE;
   13b8a:	   |   moveq #1,d0
}
   13b8c:	   \-> rts

00013b8e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13b8e:	      /----------> lea -76(sp),sp
   13b92:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13b94:	      |            movea.l 84(sp),a0
   13b98:	      |            move.l (a0),d0
   13b9a:	      |            moveq #10,d1
   13b9c:	      |            cmp.l d0,d1
   13b9e:	/-----|----------- bcs.w 13e3c <getTextFromAnyVar+0x2ae>
   13ba2:	|     |            add.l d0,d0
   13ba4:	|     |            movea.l d0,a0
   13ba6:	|     |            adda.l #80818,a0
   13bac:	|     |            move.w (a0),d0
   13bae:	|     |            jmp (13bb2 <getTextFromAnyVar+0x24>,pc,d0.w)
   13bb2:	|     |            .short 0x028a
   13bb4:	|     |            bset d0,(a0)+
   13bb6:	|     |            .short 0x028a
   13bb8:	|     |            ori.b #-118,(a6)
   13bbc:	|     |            andi.b #8,ccr
   13bc0:	|     |            andi.w #650,-(a0)
   13bc4:	|     |            .short 0x028a
   13bc6:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13bcc:	|     |            move.l 4(a0),d0
   13bd0:	|     |            move.l d0,-(sp)
   13bd2:	|     |            jsr b8 <copyString>
   13bd8:	|     |            addq.l #4,sp
   13bda:	|  /--|----------- bra.w 13e5e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13bde:	|  |  |            pea 18437 <graphics.c.1c13408a+0x6e>
   13be4:	|  |  |            jsr b8 <copyString>
   13bea:	|  |  |            addq.l #4,sp
   13bec:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13bf0:	|  |  |            clr.l 72(sp)
   13bf4:	|  |  |     /----- bra.w 13c9e <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13bf8:	|  |  |  /--|----> pea 1843d <graphics.c.1c13408a+0x74>
   13bfe:	|  |  |  |  |      move.l 80(sp),-(sp)
   13c02:	|  |  |  |  |      jsr 12ae4 <joinStrings>
   13c08:	|  |  |  |  |      addq.l #8,sp
   13c0a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13c0e:	|  |  |  |  |  /-- bne.s 13c16 <getTextFromAnyVar+0x88>
   13c10:	|  |  |  |  |  |   moveq #0,d0
   13c12:	|  +--|--|--|--|-- bra.w 13e5e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13c16:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13c1c:	|  |  |  |  |      move.l 1add0 <SysBase>,d0
   13c22:	|  |  |  |  |      movea.l d0,a6
   13c24:	|  |  |  |  |      movea.l 56(sp),a1
   13c28:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13c2c:	|  |  |  |  |      movea.l 84(sp),a0
   13c30:	|  |  |  |  |      movea.l 4(a0),a0
   13c34:	|  |  |  |  |      move.l (a0),d1
   13c36:	|  |  |  |  |      move.l 72(sp),d0
   13c3a:	|  |  |  |  |      lsl.l #3,d0
   13c3c:	|  |  |  |  |      add.l d1,d0
   13c3e:	|  |  |  |  |      move.l d0,-(sp)
   13c40:	|  |  +--|--|----- jsr 13b8e <getTextFromAnyVar>(pc)
   13c44:	|  |  |  |  |      addq.l #4,sp
   13c46:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13c4a:	|  |  |  |  |      move.l 52(sp),-(sp)
   13c4e:	|  |  |  |  |      move.l 64(sp),-(sp)
   13c52:	|  |  |  |  |      jsr 12ae4 <joinStrings>
   13c58:	|  |  |  |  |      addq.l #8,sp
   13c5a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13c5e:	|  |  |  |  |  /-- bne.s 13c66 <getTextFromAnyVar+0xd8>
   13c60:	|  |  |  |  |  |   moveq #0,d0
   13c62:	|  +--|--|--|--|-- bra.w 13e5e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13c66:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   13c6c:	|  |  |  |  |      move.l 1add0 <SysBase>,d0
   13c72:	|  |  |  |  |      movea.l d0,a6
   13c74:	|  |  |  |  |      movea.l 48(sp),a1
   13c78:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   13c7c:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   13c80:	|  |  |  |  |      move.l 60(sp),44(sp)
   13c86:	|  |  |  |  |      move.l 1add0 <SysBase>,d0
   13c8c:	|  |  |  |  |      movea.l d0,a6
   13c8e:	|  |  |  |  |      movea.l 44(sp),a1
   13c92:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   13c96:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13c9a:	|  |  |  |  |      addq.l #1,72(sp)
   13c9e:	|  |  |  |  \----> movea.l 84(sp),a0
   13ca2:	|  |  |  |         movea.l 4(a0),a0
   13ca6:	|  |  |  |         move.l 4(a0),d0
   13caa:	|  |  |  |         cmp.l 72(sp),d0
   13cae:	|  |  |  \-------- bgt.w 13bf8 <getTextFromAnyVar+0x6a>
			}
			return builder;
   13cb2:	|  |  |            move.l 76(sp),d0
   13cb6:	|  +--|----------- bra.w 13e5e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   13cba:	|  |  |            pea 1843f <graphics.c.1c13408a+0x76>
   13cc0:	|  |  |            jsr b8 <copyString>
   13cc6:	|  |  |            addq.l #4,sp
   13cc8:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   13ccc:	|  |  |            movea.l 84(sp),a0
   13cd0:	|  |  |            movea.l 4(a0),a0
   13cd4:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   13cd8:	|  |  |     /----- bra.w 13d7a <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   13cdc:	|  |  |  /--|----> pea 1843d <graphics.c.1c13408a+0x74>
   13ce2:	|  |  |  |  |      move.l 72(sp),-(sp)
   13ce6:	|  |  |  |  |      jsr 12ae4 <joinStrings>
   13cec:	|  |  |  |  |      addq.l #8,sp
   13cee:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13cf2:	|  |  |  |  |  /-- bne.s 13cfa <getTextFromAnyVar+0x16c>
   13cf4:	|  |  |  |  |  |   moveq #0,d0
   13cf6:	|  +--|--|--|--|-- bra.w 13e5e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13cfa:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13d00:	|  |  |  |  |      move.l 1add0 <SysBase>,d0
   13d06:	|  |  |  |  |      movea.l d0,a6
   13d08:	|  |  |  |  |      movea.l 32(sp),a1
   13d0c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13d10:	|  |  |  |  |      move.l 64(sp),d0
   13d14:	|  |  |  |  |      move.l d0,-(sp)
   13d16:	|  |  \--|--|----- jsr 13b8e <getTextFromAnyVar>(pc)
   13d1a:	|  |     |  |      addq.l #4,sp
   13d1c:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13d20:	|  |     |  |      move.l 28(sp),-(sp)
   13d24:	|  |     |  |      move.l 40(sp),-(sp)
   13d28:	|  |     |  |      jsr 12ae4 <joinStrings>
   13d2e:	|  |     |  |      addq.l #8,sp
   13d30:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   13d34:	|  |     |  |  /-- bne.s 13d3c <getTextFromAnyVar+0x1ae>
   13d36:	|  |     |  |  |   moveq #0,d0
   13d38:	|  +-----|--|--|-- bra.w 13e5e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13d3c:	|  |     |  |  \-> move.l 28(sp),24(sp)
   13d42:	|  |     |  |      move.l 1add0 <SysBase>,d0
   13d48:	|  |     |  |      movea.l d0,a6
   13d4a:	|  |     |  |      movea.l 24(sp),a1
   13d4e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   13d52:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   13d56:	|  |     |  |      move.l 36(sp),20(sp)
   13d5c:	|  |     |  |      move.l 1add0 <SysBase>,d0
   13d62:	|  |     |  |      movea.l d0,a6
   13d64:	|  |     |  |      movea.l 20(sp),a1
   13d68:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   13d6c:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   13d70:	|  |     |  |      movea.l 64(sp),a0
   13d74:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   13d7a:	|  |     |  \----> tst.l 64(sp)
   13d7e:	|  |     \-------- bne.w 13cdc <getTextFromAnyVar+0x14e>
			}
			return builder;
   13d82:	|  |               move.l 68(sp),d0
   13d86:	|  +-------------- bra.w 13e5e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   13d8a:	|  |               moveq #10,d0
   13d8c:	|  |               move.l d0,16(sp)
   13d90:	|  |               clr.l 12(sp)
   13d94:	|  |               move.l 1add0 <SysBase>,d0
   13d9a:	|  |               movea.l d0,a6
   13d9c:	|  |               move.l 16(sp),d0
   13da0:	|  |               move.l 12(sp),d1
   13da4:	|  |               jsr -684(a6)
   13da8:	|  |               move.l d0,8(sp)
   13dac:	|  |               move.l 8(sp),d0
   13db0:	|  |               move.l d0,4(sp)
			if (! buff) {
   13db4:	|  |           /-- bne.s 13dca <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   13db6:	|  |           |   pea 18446 <graphics.c.1c13408a+0x7d>
   13dbc:	|  |           |   jsr 15784 <KPrintF>
   13dc2:	|  |           |   addq.l #4,sp
				return NULL;
   13dc4:	|  |           |   moveq #0,d0
   13dc6:	|  +-----------|-- bra.w 13e5e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   13dca:	|  |           \-> movea.l 84(sp),a0
   13dce:	|  |               move.l 4(a0),d0
   13dd2:	|  |               move.l d0,-(sp)
   13dd4:	|  |               pea 18470 <graphics.c.1c13408a+0xa7>
   13dda:	|  |               move.l 12(sp),-(sp)
   13dde:	|  |               jsr 12dc2 <sprintf>
   13de4:	|  |               lea 12(sp),sp
			return buff;
   13de8:	|  |               move.l 4(sp),d0
   13dec:	|  +-------------- bra.s 13e5e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13dee:	|  |               movea.l 84(sp),a0
   13df2:	|  |               move.l 4(a0),d0
   13df6:	|  |               move.l d0,-(sp)
   13df8:	|  |               jsr 2fa2 <resourceNameFromNum>
   13dfe:	|  |               addq.l #4,sp
   13e00:	|  |               move.l d0,-(sp)
   13e02:	|  |               pea 16e3a <PutChar+0xbe2>
   13e08:	|  |               jsr 12ae4 <joinStrings>
   13e0e:	|  |               addq.l #8,sp
   13e10:	|  +-------------- bra.s 13e5e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13e12:	|  |               movea.l 84(sp),a0
   13e16:	|  |               move.l 4(a0),d0
   13e1a:	|  |               move.l d0,-(sp)
   13e1c:	|  |               jsr c3ee <findObjectType>
   13e22:	|  |               addq.l #4,sp
   13e24:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   13e28:	+--|-------------- beq.s 13e3c <getTextFromAnyVar+0x2ae>
   13e2a:	|  |               movea.l 40(sp),a0
   13e2e:	|  |               move.l (a0),d0
   13e30:	|  |               move.l d0,-(sp)
   13e32:	|  |               jsr b8 <copyString>
   13e38:	|  |               addq.l #4,sp
   13e3a:	|  +-------------- bra.s 13e5e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   13e3c:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13e3e:	   |               movea.l 84(sp),a0
   13e42:	   |               move.l (a0),d0
   13e44:	   |               add.l d0,d0
   13e46:	   |               movea.l d0,a1
   13e48:	   |               adda.l d0,a1
   13e4a:	   |               lea 1acb2 <typeName>,a0
   13e50:	   |               move.l (0,a1,a0.l),d0
   13e54:	   |               move.l d0,-(sp)
   13e56:	   |               jsr b8 <copyString>
   13e5c:	   |               addq.l #4,sp
}
   13e5e:	   \-------------> movea.l (sp)+,a6
   13e60:	                   lea 76(sp),sp
   13e64:	                   rts

00013e66 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13e66:	move.l 4(sp),-(sp)
   13e6a:	jsr 13806 <unlinkVar>
   13e70:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13e72:	movea.l 4(sp),a0
   13e76:	moveq #8,d0
   13e78:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   13e7a:	movea.l 4(sp),a0
   13e7e:	move.l 8(sp),4(a0)
}
   13e84:	nop
   13e86:	rts

00013e88 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   13e88:	move.l 4(sp),-(sp)
   13e8c:	jsr 13806 <unlinkVar>
   13e92:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   13e94:	movea.l 4(sp),a0
   13e98:	moveq #9,d0
   13e9a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   13e9c:	movea.l 4(sp),a0
   13ea0:	move.l 8(sp),4(a0)
}
   13ea6:	nop
   13ea8:	rts

00013eaa <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   13eaa:	move.l 4(sp),-(sp)
   13eae:	jsr 13806 <unlinkVar>
   13eb4:	addq.l #4,sp
	thisVar->varType = vT;
   13eb6:	movea.l 4(sp),a0
   13eba:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   13ebe:	movea.l 4(sp),a0
   13ec2:	move.l 12(sp),4(a0)
}
   13ec8:	nop
   13eca:	rts

00013ecc <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   13ecc:	      /-- bra.s 13ede <stackGetByIndex+0x12>
        vS = vS->next;
   13ece:	/-----|-> movea.l 4(sp),a0
   13ed2:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   13ed8:	|     +-- bne.s 13ede <stackGetByIndex+0x12>
            return NULL;
   13eda:	|     |   moveq #0,d0
   13edc:	|  /--|-- bra.s 13ef2 <stackGetByIndex+0x26>
    while (theIndex--) {
   13ede:	|  |  \-> move.l 8(sp),d0
   13ee2:	|  |      move.l d0,d1
   13ee4:	|  |      subq.l #1,d1
   13ee6:	|  |      move.l d1,8(sp)
   13eea:	|  |      tst.l d0
   13eec:	\--|----- bne.s 13ece <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   13eee:	   |      move.l 4(sp),d0
}
   13ef2:	   \----> rts

00013ef4 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   13ef4:	          tst.l 4(sp)
   13ef8:	      /-- bne.s 13f08 <stackFindLast+0x14>
		return NULL;
   13efa:	      |   moveq #0,d0
   13efc:	/-----|-- bra.s 13f16 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   13efe:	|  /--|-> movea.l 4(sp),a0
   13f02:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   13f08:	|  |  \-> movea.l 4(sp),a0
   13f0c:	|  |      move.l 8(a0),d0
   13f10:	|  \----- bne.s 13efe <stackFindLast+0xa>

	return hunt;
   13f12:	|         move.l 4(sp),d0
}
   13f16:	\-------> rts

00013f18 <stackSize>:

int stackSize (const struct stackHandler * me) {
   13f18:	       subq.l #8,sp
	int r = 0;
   13f1a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   13f1e:	       movea.l 12(sp),a0
   13f22:	       move.l (a0),(sp)
	while (a) {
   13f24:	   /-- bra.s 13f30 <stackSize+0x18>
		r ++;
   13f26:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   13f2a:	|  |   movea.l (sp),a0
   13f2c:	|  |   move.l 8(a0),(sp)
	while (a) {
   13f30:	|  \-> tst.l (sp)
   13f32:	\----- bne.s 13f26 <stackSize+0xe>
	}
	return r;
   13f34:	       move.l 4(sp),d0
}
   13f38:	       addq.l #8,sp
   13f3a:	       rts

00013f3c <trimStack>:

void trimStack (struct variableStack ** stack) {
   13f3c:	subq.l #8,sp
   13f3e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   13f40:	movea.l 16(sp),a0
   13f44:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   13f48:	movea.l 16(sp),a0
   13f4c:	movea.l (a0),a0
   13f4e:	move.l 8(a0),d0
   13f52:	movea.l 16(sp),a0
   13f56:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   13f58:	move.l 8(sp),d0
   13f5c:	move.l d0,-(sp)
   13f5e:	jsr 13806 <unlinkVar>
   13f64:	addq.l #4,sp
	FreeVec(killMe);
   13f66:	move.l 8(sp),4(sp)
   13f6c:	move.l 1add0 <SysBase>,d0
   13f72:	movea.l d0,a6
   13f74:	movea.l 4(sp),a1
   13f78:	jsr -690(a6)
   13f7c:	nop
   13f7e:	movea.l (sp)+,a6
   13f80:	addq.l #8,sp
   13f82:	rts

00013f84 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   13f84:	pea 18473 <graphics.c.1c13408a+0xaa>
   13f8a:	jsr 15784 <KPrintF>
   13f90:	addq.l #4,sp
	return FALSE;
   13f92:	clr.w d0
}
   13f94:	rts

00013f96 <stringWidth>:

int stringWidth (char * theText) {
   13f96:	       subq.l #8,sp
	int a = 0;
   13f98:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   13f9c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   13f9e:	       move.l 1af28 <fontTableSize>,d0
   13fa4:	/----- bne.s 13faa <stringWidth+0x14>
   13fa6:	|      moveq #0,d0
   13fa8:	|  /-- bra.s 13fac <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   13faa:	\--|-> move.l (sp),d0
}
   13fac:	   \-> addq.l #8,sp
   13fae:	       rts

00013fb0 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   13fb0:	pea 1849a <graphics.c.1c13408a+0xd1>
   13fb6:	jsr 15784 <KPrintF>
   13fbc:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   13fbe:	moveq #1,d0
}
   13fc0:	rts

00013fc2 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   13fc2:	       lea -16(sp),sp
   13fc6:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   13fc8:	       moveq #36,d0
   13fca:	       move.l d0,16(sp)
   13fce:	       clr.l 12(sp)
   13fd2:	       move.l 1add0 <SysBase>,d0
   13fd8:	       movea.l d0,a6
   13fda:	       move.l 16(sp),d0
   13fde:	       move.l 12(sp),d1
   13fe2:	       jsr -684(a6)
   13fe6:	       move.l d0,8(sp)
   13fea:	       move.l 8(sp),d0
   13fee:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   13ff2:	   /-- bne.s 13ffa <addScreenRegion+0x38>
   13ff4:	   |   clr.w d0
   13ff6:	/--|-- bra.w 1407a <addScreenRegion+0xb8>
    newRegion->di = di;
   13ffa:	|  \-> movea.l 4(sp),a0
   13ffe:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   14004:	|      movea.l 4(sp),a0
   14008:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1400c:	|      movea.l 4(sp),a0
   14010:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   14016:	|      movea.l 4(sp),a0
   1401a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   14020:	|      movea.l 4(sp),a0
   14024:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1402a:	|      movea.l 4(sp),a0
   1402e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   14034:	|      movea.l 4(sp),a0
   14038:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1403e:	|      move.l 52(sp),-(sp)
   14042:	|      jsr c4de <loadObjectType>
   14048:	|      addq.l #4,sp
   1404a:	|      movea.l 4(sp),a0
   1404e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   14052:	|      move.l 1af2c <allScreenRegions>,d0
   14058:	|      movea.l 4(sp),a0
   1405c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   14060:	|      move.l 4(sp),1af2c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   14068:	|      movea.l 4(sp),a0
   1406c:	|      move.l 28(a0),d0
   14070:	|      sne d0
   14072:	|      neg.b d0
   14074:	|      move.b d0,d0
   14076:	|      andi.w #255,d0
}
   1407a:	\----> movea.l (sp)+,a6
   1407c:	       lea 16(sp),sp
   14080:	       rts

00014082 <getOverRegion>:

void getOverRegion () {
   14082:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14084:	             move.l 1af2c <allScreenRegions>,(sp)
	while (thisRegion) {
   1408a:	   /-------- bra.s 140f8 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1408c:	/--|-------> move.l 1ad8c <input+0xa>,d0
   14092:	|  |         movea.l (sp),a0
   14094:	|  |         movea.l (a0),a0
   14096:	|  |         move.l 1aee2 <cameraX>,d1
   1409c:	|  |         suba.l d1,a0
   1409e:	|  |         cmpa.l d0,a0
   140a0:	|  |  /----- bgt.s 140f2 <getOverRegion+0x70>
   140a2:	|  |  |      move.l 1ad90 <input+0xe>,d0
   140a8:	|  |  |      movea.l (sp),a0
   140aa:	|  |  |      movea.l 4(a0),a0
   140ae:	|  |  |      move.l 1aee6 <cameraY>,d1
   140b4:	|  |  |      suba.l d1,a0
   140b6:	|  |  |      cmpa.l d0,a0
   140b8:	|  |  +----- bgt.s 140f2 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   140ba:	|  |  |      move.l 1ad8c <input+0xa>,d0
   140c0:	|  |  |      movea.l (sp),a0
   140c2:	|  |  |      movea.l 8(a0),a0
   140c6:	|  |  |      move.l 1aee2 <cameraX>,d1
   140cc:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   140ce:	|  |  |      cmpa.l d0,a0
   140d0:	|  |  +----- blt.s 140f2 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   140d2:	|  |  |      move.l 1ad90 <input+0xe>,d0
   140d8:	|  |  |      movea.l (sp),a0
   140da:	|  |  |      movea.l 12(a0),a0
   140de:	|  |  |      move.l 1aee6 <cameraY>,d1
   140e4:	|  |  |      suba.l d1,a0
   140e6:	|  |  |      cmpa.l d0,a0
   140e8:	|  |  +----- blt.s 140f2 <getOverRegion+0x70>
			overRegion = thisRegion;
   140ea:	|  |  |      move.l (sp),1af30 <overRegion>
			return;
   140f0:	|  |  |  /-- bra.s 14104 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   140f2:	|  |  \--|-> movea.l (sp),a0
   140f4:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   140f8:	|  \-----|-> tst.l (sp)
   140fa:	\--------|-- bne.s 1408c <getOverRegion+0xa>
	}
	overRegion = NULL;
   140fc:	         |   clr.l 1af30 <overRegion>
	return;
   14102:	         |   nop
}
   14104:	         \-> addq.l #4,sp
   14106:	             rts

00014108 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   14108:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1410a:	             move.l 1af2c <allScreenRegions>,(sp)

	while (thisRegion) {
   14110:	   /-------- bra.s 1412c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   14112:	/--|-------> movea.l (sp),a0
   14114:	|  |         movea.l 28(a0),a0
   14118:	|  |         move.l 4(a0),d0
   1411c:	|  |         cmp.l 8(sp),d0
   14120:	|  |     /-- bne.s 14126 <getRegionForObject+0x1e>
			return thisRegion;
   14122:	|  |     |   move.l (sp),d0
   14124:	|  |  /--|-- bra.s 14132 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   14126:	|  |  |  \-> movea.l (sp),a0
   14128:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1412c:	|  \--|----> tst.l (sp)
   1412e:	\-----|----- bne.s 14112 <getRegionForObject+0xa>
	}

	return NULL;
   14130:	      |      moveq #0,d0
}
   14132:	      \----> addq.l #4,sp
   14134:	             rts

00014136 <killAllRegions>:

void killAllRegions () {
   14136:	       subq.l #8,sp
   14138:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1413a:	   /-- bra.s 1417c <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1413c:	/--|-> move.l 1af2c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   14144:	|  |   movea.l 1af2c <allScreenRegions>,a0
   1414a:	|  |   move.l 32(a0),d0
   1414e:	|  |   move.l d0,1af2c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   14154:	|  |   movea.l 8(sp),a0
   14158:	|  |   move.l 28(a0),d0
   1415c:	|  |   move.l d0,-(sp)
   1415e:	|  |   jsr c796 <removeObjectType>
   14164:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   14166:	|  |   move.l 8(sp),4(sp)
   1416c:	|  |   move.l 1add0 <SysBase>,d0
   14172:	|  |   movea.l d0,a6
   14174:	|  |   movea.l 4(sp),a1
   14178:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1417c:	|  \-> move.l 1af2c <allScreenRegions>,d0
   14182:	\----- bne.s 1413c <killAllRegions+0x6>
	}
	overRegion = NULL;
   14184:	       clr.l 1af30 <overRegion>
}
   1418a:	       nop
   1418c:	       movea.l (sp)+,a6
   1418e:	       addq.l #8,sp
   14190:	       rts

00014192 <loadRegions>:

void loadRegions (BPTR fp) {
   14192:	       lea -24(sp),sp
   14196:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   14198:	       move.l 32(sp),-(sp)
   1419c:	       jsr 6bc <get2bytes>
   141a2:	       addq.l #4,sp
   141a4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   141a8:	       move.l #110380,20(sp)

	while (numRegions --) {
   141b0:	   /-- bra.w 1428e <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   141b4:	/--|-> moveq #36,d0
   141b6:	|  |   move.l d0,16(sp)
   141ba:	|  |   clr.l 12(sp)
   141be:	|  |   move.l 1add0 <SysBase>,d0
   141c4:	|  |   movea.l d0,a6
   141c6:	|  |   move.l 16(sp),d0
   141ca:	|  |   move.l 12(sp),d1
   141ce:	|  |   jsr -684(a6)
   141d2:	|  |   move.l d0,8(sp)
   141d6:	|  |   move.l 8(sp),d0
   141da:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   141de:	|  |   movea.l 20(sp),a0
   141e2:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   141e6:	|  |   moveq #32,d1
   141e8:	|  |   add.l 4(sp),d1
   141ec:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   141f0:	|  |   move.l 32(sp),-(sp)
   141f4:	|  |   jsr 6bc <get2bytes>
   141fa:	|  |   addq.l #4,sp
   141fc:	|  |   movea.l 4(sp),a0
   14200:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   14202:	|  |   move.l 32(sp),-(sp)
   14206:	|  |   jsr 6bc <get2bytes>
   1420c:	|  |   addq.l #4,sp
   1420e:	|  |   movea.l 4(sp),a0
   14212:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   14216:	|  |   move.l 32(sp),-(sp)
   1421a:	|  |   jsr 6bc <get2bytes>
   14220:	|  |   addq.l #4,sp
   14222:	|  |   movea.l 4(sp),a0
   14226:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1422a:	|  |   move.l 32(sp),-(sp)
   1422e:	|  |   jsr 6bc <get2bytes>
   14234:	|  |   addq.l #4,sp
   14236:	|  |   movea.l 4(sp),a0
   1423a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1423e:	|  |   move.l 32(sp),-(sp)
   14242:	|  |   jsr 6bc <get2bytes>
   14248:	|  |   addq.l #4,sp
   1424a:	|  |   movea.l 4(sp),a0
   1424e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   14252:	|  |   move.l 32(sp),-(sp)
   14256:	|  |   jsr 6bc <get2bytes>
   1425c:	|  |   addq.l #4,sp
   1425e:	|  |   movea.l 4(sp),a0
   14262:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   14266:	|  |   move.l 32(sp),-(sp)
   1426a:	|  |   jsr 6bc <get2bytes>
   14270:	|  |   addq.l #4,sp
   14272:	|  |   movea.l 4(sp),a0
   14276:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1427a:	|  |   move.l 32(sp),-(sp)
   1427e:	|  |   jsr c48c <loadObjectRef>
   14284:	|  |   addq.l #4,sp
   14286:	|  |   movea.l 4(sp),a0
   1428a:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   1428e:	|  \-> move.l 24(sp),d0
   14292:	|      move.l d0,d1
   14294:	|      subq.l #1,d1
   14296:	|      move.l d1,24(sp)
   1429a:	|      tst.l d0
   1429c:	\----- bne.w 141b4 <loadRegions+0x22>
	}
	* pointy = NULL;
   142a0:	       movea.l 20(sp),a0
   142a4:	       clr.l (a0)
}
   142a6:	       nop
   142a8:	       movea.l (sp)+,a6
   142aa:	       lea 24(sp),sp
   142ae:	       rts

000142b0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   142b0:	             lea -12(sp),sp
   142b4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   142b6:	             move.l #110380,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   142be:	   /-------- bra.s 14338 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   142c0:	/--|-------> movea.l 12(sp),a0
   142c4:	|  |         movea.l (a0),a0
   142c6:	|  |         movea.l 28(a0),a0
   142ca:	|  |         move.l 4(a0),d0
   142ce:	|  |         cmp.l 20(sp),d0
   142d2:	|  |  /----- bne.s 1432a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   142d4:	|  |  |      movea.l 12(sp),a0
   142d8:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   142dc:	|  |  |      movea.l 8(sp),a0
   142e0:	|  |  |      move.l 32(a0),d0
   142e4:	|  |  |      movea.l 12(sp),a0
   142e8:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   142ea:	|  |  |      movea.l 8(sp),a0
   142ee:	|  |  |      move.l 28(a0),d0
   142f2:	|  |  |      move.l d0,-(sp)
   142f4:	|  |  |      jsr c796 <removeObjectType>
   142fa:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   142fc:	|  |  |      move.l 1af30 <overRegion>,d0
   14302:	|  |  |      cmp.l 8(sp),d0
   14306:	|  |  |  /-- bne.s 1430e <removeScreenRegion+0x5e>
   14308:	|  |  |  |   clr.l 1af30 <overRegion>
            FreeVec(killMe);
   1430e:	|  |  |  \-> move.l 8(sp),4(sp)
   14314:	|  |  |      move.l 1add0 <SysBase>,d0
   1431a:	|  |  |      movea.l d0,a6
   1431c:	|  |  |      movea.l 4(sp),a1
   14320:	|  |  |      jsr -690(a6)
            killMe = NULL;
   14324:	|  |  |      clr.l 8(sp)
   14328:	|  +--|----- bra.s 14338 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1432a:	|  |  \----> movea.l 12(sp),a0
   1432e:	|  |         move.l (a0),d0
   14330:	|  |         moveq #32,d1
   14332:	|  |         add.l d0,d1
   14334:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   14338:	|  \-------> movea.l 12(sp),a0
   1433c:	|            move.l (a0),d0
   1433e:	\----------- bne.s 142c0 <removeScreenRegion+0x10>
        }
    }
}
   14340:	             nop
   14342:	             nop
   14344:	             movea.l (sp)+,a6
   14346:	             lea 12(sp),sp
   1434a:	             rts

0001434c <saveRegions>:

void saveRegions (BPTR fp) {
   1434c:	       subq.l #8,sp
	int numRegions = 0;
   1434e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   14352:	       move.l 1af2c <allScreenRegions>,(sp)
	while (thisRegion) {
   14358:	   /-- bra.s 14364 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1435a:	/--|-> movea.l (sp),a0
   1435c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   14360:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   14364:	|  \-> tst.l (sp)
   14366:	\----- bne.s 1435a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   14368:	       move.l 12(sp),-(sp)
   1436c:	       move.l 8(sp),-(sp)
   14370:	       jsr 8d0 <put2bytes>
   14376:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   14378:	       move.l 1af2c <allScreenRegions>,(sp)
	while (thisRegion) {
   1437e:	/----- bra.w 14426 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   14382:	|  /-> movea.l (sp),a0
   14384:	|  |   move.l (a0),d0
   14386:	|  |   move.l 12(sp),-(sp)
   1438a:	|  |   move.l d0,-(sp)
   1438c:	|  |   jsr 8d0 <put2bytes>
   14392:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   14394:	|  |   movea.l (sp),a0
   14396:	|  |   move.l 4(a0),d0
   1439a:	|  |   move.l 12(sp),-(sp)
   1439e:	|  |   move.l d0,-(sp)
   143a0:	|  |   jsr 8d0 <put2bytes>
   143a6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   143a8:	|  |   movea.l (sp),a0
   143aa:	|  |   move.l 8(a0),d0
   143ae:	|  |   move.l 12(sp),-(sp)
   143b2:	|  |   move.l d0,-(sp)
   143b4:	|  |   jsr 8d0 <put2bytes>
   143ba:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   143bc:	|  |   movea.l (sp),a0
   143be:	|  |   move.l 12(a0),d0
   143c2:	|  |   move.l 12(sp),-(sp)
   143c6:	|  |   move.l d0,-(sp)
   143c8:	|  |   jsr 8d0 <put2bytes>
   143ce:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   143d0:	|  |   movea.l (sp),a0
   143d2:	|  |   move.l 16(a0),d0
   143d6:	|  |   move.l 12(sp),-(sp)
   143da:	|  |   move.l d0,-(sp)
   143dc:	|  |   jsr 8d0 <put2bytes>
   143e2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   143e4:	|  |   movea.l (sp),a0
   143e6:	|  |   move.l 20(a0),d0
   143ea:	|  |   move.l 12(sp),-(sp)
   143ee:	|  |   move.l d0,-(sp)
   143f0:	|  |   jsr 8d0 <put2bytes>
   143f6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   143f8:	|  |   movea.l (sp),a0
   143fa:	|  |   move.l 24(a0),d0
   143fe:	|  |   move.l 12(sp),-(sp)
   14402:	|  |   move.l d0,-(sp)
   14404:	|  |   jsr 8d0 <put2bytes>
   1440a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1440c:	|  |   movea.l (sp),a0
   1440e:	|  |   move.l 28(a0),d0
   14412:	|  |   move.l 12(sp),-(sp)
   14416:	|  |   move.l d0,-(sp)
   14418:	|  |   jsr c836 <saveObjectRef>
   1441e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   14420:	|  |   movea.l (sp),a0
   14422:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   14426:	\--|-> tst.l (sp)
   14428:	   \-- bne.w 14382 <saveRegions+0x36>
	}
}
   1442c:	       nop
   1442e:	       nop
   14430:	       addq.l #8,sp
   14432:	       rts

00014434 <showBoxes>:

void showBoxes () {
   14434:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   14436:	       move.l 1af2c <allScreenRegions>,(sp)

	while (huntRegion) {
   1443c:	/----- bra.w 144d8 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   14440:	|  /-> movea.l (sp),a0
   14442:	|  |   move.l 12(a0),d0
   14446:	|  |   movea.l d0,a1
   14448:	|  |   movea.l (sp),a0
   1444a:	|  |   move.l 4(a0),d0
   1444e:	|  |   move.l d0,d1
   14450:	|  |   movea.l (sp),a0
   14452:	|  |   move.l (a0),d0
   14454:	|  |   move.l a1,-(sp)
   14456:	|  |   move.l d1,-(sp)
   14458:	|  |   move.l d0,-(sp)
   1445a:	|  |   jsr c11a <drawVerticalLine>
   14460:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   14464:	|  |   movea.l (sp),a0
   14466:	|  |   move.l 12(a0),d0
   1446a:	|  |   movea.l d0,a1
   1446c:	|  |   movea.l (sp),a0
   1446e:	|  |   move.l 4(a0),d0
   14472:	|  |   move.l d0,d1
   14474:	|  |   movea.l (sp),a0
   14476:	|  |   move.l 8(a0),d0
   1447a:	|  |   move.l a1,-(sp)
   1447c:	|  |   move.l d1,-(sp)
   1447e:	|  |   move.l d0,-(sp)
   14480:	|  |   jsr c11a <drawVerticalLine>
   14486:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1448a:	|  |   movea.l (sp),a0
   1448c:	|  |   move.l 8(a0),d0
   14490:	|  |   movea.l d0,a1
   14492:	|  |   movea.l (sp),a0
   14494:	|  |   move.l 4(a0),d0
   14498:	|  |   move.l d0,d1
   1449a:	|  |   movea.l (sp),a0
   1449c:	|  |   move.l (a0),d0
   1449e:	|  |   move.l a1,-(sp)
   144a0:	|  |   move.l d1,-(sp)
   144a2:	|  |   move.l d0,-(sp)
   144a4:	|  |   jsr c0f4 <drawHorizontalLine>
   144aa:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   144ae:	|  |   movea.l (sp),a0
   144b0:	|  |   move.l 8(a0),d0
   144b4:	|  |   movea.l d0,a1
   144b6:	|  |   movea.l (sp),a0
   144b8:	|  |   move.l 12(a0),d0
   144bc:	|  |   move.l d0,d1
   144be:	|  |   movea.l (sp),a0
   144c0:	|  |   move.l (a0),d0
   144c2:	|  |   move.l a1,-(sp)
   144c4:	|  |   move.l d1,-(sp)
   144c6:	|  |   move.l d0,-(sp)
   144c8:	|  |   jsr c0f4 <drawHorizontalLine>
   144ce:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   144d2:	|  |   movea.l (sp),a0
   144d4:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   144d8:	\--|-> tst.l (sp)
   144da:	   \-- bne.w 14440 <showBoxes+0xc>
	}
   144de:	       nop
   144e0:	       nop
   144e2:	       addq.l #4,sp
   144e4:	       rts

000144e6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   144e6:	             lea -20(sp),sp
   144ea:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   144ec:	             move.l 1af34 <allLoadedBanks>,20(sp)
	while (returnMe) {
   144f4:	      /----- bra.s 14526 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   144f6:	   /--|----> movea.l 20(sp),a0
   144fa:	   |  |      move.l (a0),d0
   144fc:	   |  |      cmp.l 28(sp),d0
   14500:	   |  |  /-- bne.s 1451c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   14502:	   |  |  |   movea.l 20(sp),a0
   14506:	   |  |  |   move.l 4(a0),d0
   1450a:	   |  |  |   addq.l #1,d0
   1450c:	   |  |  |   movea.l 20(sp),a0
   14510:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   14514:	   |  |  |   move.l 20(sp),d0
   14518:	/--|--|--|-- bra.w 145dc <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   1451c:	|  |  |  \-> movea.l 20(sp),a0
   14520:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   14526:	|  |  \----> tst.l 20(sp)
   1452a:	|  \-------- bne.s 144f6 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1452c:	|            moveq #26,d0
   1452e:	|            move.l d0,16(sp)
   14532:	|            clr.l 12(sp)
   14536:	|            move.l 1add0 <SysBase>,d0
   1453c:	|            movea.l d0,a6
   1453e:	|            move.l 16(sp),d0
   14542:	|            move.l 12(sp),d1
   14546:	|            jsr -684(a6)
   1454a:	|            move.l d0,8(sp)
   1454e:	|            move.l 8(sp),d0
   14552:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   14556:	|     /----- beq.w 145da <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   1455a:	|     |      movea.l 20(sp),a0
   1455e:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   14562:	|     |      move.l 20(sp),d0
   14566:	|     |      addq.l #8,d0
   14568:	|     |      clr.l -(sp)
   1456a:	|     |      move.l d0,-(sp)
   1456c:	|     |      move.l 36(sp),-(sp)
   14570:	|     |      jsr 7bda <loadSpriteBank>
   14576:	|     |      lea 12(sp),sp
   1457a:	|     |      tst.w d0
   1457c:	|     |  /-- beq.s 145b2 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   1457e:	|     |  |   movea.l 20(sp),a0
   14582:	|     |  |   moveq #1,d0
   14584:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   14588:	|     |  |   move.l 1af34 <allLoadedBanks>,d0
   1458e:	|     |  |   movea.l 20(sp),a0
   14592:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   14596:	|     |  |   move.l 20(sp),1af34 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   1459e:	|     |  |   pea 184bd <graphics.c.1c13408a+0xf4>
   145a4:	|     |  |   jsr 15784 <KPrintF>
   145aa:	|     |  |   addq.l #4,sp
			return returnMe;
   145ac:	|     |  |   move.l 20(sp),d0
   145b0:	+-----|--|-- bra.s 145dc <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   145b2:	|     |  \-> pea 184ea <graphics.c.1c13408a+0x121>
   145b8:	|     |      jsr 15784 <KPrintF>
   145be:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   145c0:	|     |      move.l 20(sp),4(sp)
   145c6:	|     |      move.l 1add0 <SysBase>,d0
   145cc:	|     |      movea.l d0,a6
   145ce:	|     |      movea.l 4(sp),a1
   145d2:	|     |      jsr -690(a6)
			return NULL;
   145d6:	|     |      moveq #0,d0
   145d8:	+-----|----- bra.s 145dc <loadBankForAnim+0xf6>
		}
	} else return NULL;
   145da:	|     \----> moveq #0,d0
}
   145dc:	\----------> movea.l (sp)+,a6
   145de:	             lea 20(sp),sp
   145e2:	             rts

000145e4 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   145e4:	       lea -32(sp),sp
   145e8:	       move.l d3,-(sp)
   145ea:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   145ec:	       move.l 60(sp),d0
   145f0:	       sub.l 52(sp),d0
   145f4:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   145f8:	       move.l 64(sp),d0
   145fc:	       sub.l 56(sp),d0
   14600:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   14604:	       move.l 68(sp),d0
   14608:	       sub.l 52(sp),d0
   1460c:	       move.l 36(sp),-(sp)
   14610:	       move.l d0,-(sp)
   14612:	       jsr 16142 <__mulsi3>
   14618:	       addq.l #8,sp
   1461a:	       move.l d0,d2
   1461c:	       move.l 72(sp),d0
   14620:	       sub.l 56(sp),d0
   14624:	       move.l 32(sp),-(sp)
   14628:	       move.l d0,-(sp)
   1462a:	       jsr 16142 <__mulsi3>
   14630:	       addq.l #8,sp
   14632:	       add.l d2,d0
   14634:	       move.l d0,-(sp)
   14636:	       jsr 15b80 <__floatsidf>
   1463c:	       addq.l #4,sp
   1463e:	       move.l d0,16(sp)
   14642:	       move.l d1,20(sp)
   14646:	       move.l 16(sp),24(sp)
   1464c:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   14652:	       move.l 36(sp),-(sp)
   14656:	       move.l 40(sp),-(sp)
   1465a:	       jsr 16142 <__mulsi3>
   14660:	       addq.l #8,sp
   14662:	       move.l d0,d2
   14664:	       move.l 32(sp),-(sp)
   14668:	       move.l 36(sp),-(sp)
   1466c:	       jsr 16142 <__mulsi3>
   14672:	       addq.l #8,sp
   14674:	       add.l d2,d0
   14676:	       move.l d0,-(sp)
   14678:	       jsr 15b80 <__floatsidf>
   1467e:	       addq.l #4,sp
   14680:	       move.l d1,-(sp)
   14682:	       move.l d0,-(sp)
   14684:	       move.l 36(sp),-(sp)
   14688:	       move.l 36(sp),-(sp)
   1468c:	       jsr 15a0a <__divdf3>
   14692:	       lea 16(sp),sp
   14696:	       move.l d0,8(sp)
   1469a:	       move.l d1,12(sp)
   1469e:	       move.l 8(sp),24(sp)
   146a4:	       move.l 12(sp),28(sp)

	if (m < 0) {
   146aa:	       clr.l -(sp)
   146ac:	       clr.l -(sp)
   146ae:	       move.l 36(sp),-(sp)
   146b2:	       move.l 36(sp),-(sp)
   146b6:	       jsr 15d98 <__ltdf2>
   146bc:	       lea 16(sp),sp
   146c0:	       tst.l d0
   146c2:	   /-- bge.s 146d8 <closestPointOnLine+0xf4>
		*closestX = x1;
   146c4:	   |   movea.l 44(sp),a0
   146c8:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   146cc:	   |   movea.l 48(sp),a0
   146d0:	   |   move.l 56(sp),(a0)
   146d4:	/--|-- bra.w 147ba <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   146d8:	|  \-> clr.l -(sp)
   146da:	|      move.l #1072693248,-(sp)
   146e0:	|      move.l 36(sp),-(sp)
   146e4:	|      move.l 36(sp),-(sp)
   146e8:	|      jsr 15cde <__gtdf2>
   146ee:	|      lea 16(sp),sp
   146f2:	|      tst.l d0
   146f4:	|  /-- ble.s 1470a <closestPointOnLine+0x126>
		*closestX = x2;
   146f6:	|  |   movea.l 44(sp),a0
   146fa:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   146fe:	|  |   movea.l 48(sp),a0
   14702:	|  |   move.l 64(sp),(a0)
   14706:	+--|-- bra.w 147ba <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   1470a:	|  \-> move.l 52(sp),-(sp)
   1470e:	|      jsr 15b80 <__floatsidf>
   14714:	|      addq.l #4,sp
   14716:	|      move.l d0,d2
   14718:	|      move.l d1,d3
   1471a:	|      move.l 36(sp),-(sp)
   1471e:	|      jsr 15b80 <__floatsidf>
   14724:	|      addq.l #4,sp
   14726:	|      move.l 28(sp),-(sp)
   1472a:	|      move.l 28(sp),-(sp)
   1472e:	|      move.l d1,-(sp)
   14730:	|      move.l d0,-(sp)
   14732:	|      jsr 15c10 <__muldf3>
   14738:	|      lea 16(sp),sp
   1473c:	|      move.l d1,-(sp)
   1473e:	|      move.l d0,-(sp)
   14740:	|      move.l d3,-(sp)
   14742:	|      move.l d2,-(sp)
   14744:	|      jsr 159a8 <__adddf3>
   1474a:	|      lea 16(sp),sp
   1474e:	|      move.l d1,-(sp)
   14750:	|      move.l d0,-(sp)
   14752:	|      jsr 15b18 <__fixdfsi>
   14758:	|      addq.l #8,sp
   1475a:	|      movea.l 44(sp),a0
   1475e:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   14760:	|      move.l 56(sp),-(sp)
   14764:	|      jsr 15b80 <__floatsidf>
   1476a:	|      addq.l #4,sp
   1476c:	|      move.l d0,d2
   1476e:	|      move.l d1,d3
   14770:	|      move.l 32(sp),-(sp)
   14774:	|      jsr 15b80 <__floatsidf>
   1477a:	|      addq.l #4,sp
   1477c:	|      move.l 28(sp),-(sp)
   14780:	|      move.l 28(sp),-(sp)
   14784:	|      move.l d1,-(sp)
   14786:	|      move.l d0,-(sp)
   14788:	|      jsr 15c10 <__muldf3>
   1478e:	|      lea 16(sp),sp
   14792:	|      move.l d1,-(sp)
   14794:	|      move.l d0,-(sp)
   14796:	|      move.l d3,-(sp)
   14798:	|      move.l d2,-(sp)
   1479a:	|      jsr 159a8 <__adddf3>
   147a0:	|      lea 16(sp),sp
   147a4:	|      move.l d1,-(sp)
   147a6:	|      move.l d0,-(sp)
   147a8:	|      jsr 15b18 <__fixdfsi>
   147ae:	|      addq.l #8,sp
   147b0:	|      movea.l 48(sp),a0
   147b4:	|      move.l d0,(a0)
		return TRUE;
   147b6:	|      moveq #1,d0
   147b8:	|  /-- bra.s 147bc <closestPointOnLine+0x1d8>
	}
	return FALSE;
   147ba:	\--|-> clr.w d0
}
   147bc:	   \-> move.l (sp)+,d2
   147be:	       move.l (sp)+,d3
   147c0:	       lea 32(sp),sp
   147c4:	       rts

000147c6 <drawFloor>:

void drawFloor() {
   147c6:	                lea -12(sp),sp
   147ca:	                move.l d3,-(sp)
   147cc:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   147ce:	                clr.l 16(sp)
   147d2:	   /----------- bra.w 149e6 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   147d6:	/--|----------> movea.l 1af38 <currentFloor>,a0
   147dc:	|  |            move.l 12(a0),d1
   147e0:	|  |            move.l 16(sp),d0
   147e4:	|  |            lsl.l #3,d0
   147e6:	|  |            movea.l d1,a0
   147e8:	|  |            adda.l d0,a0
   147ea:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   147ee:	|  |            moveq #1,d0
   147f0:	|  |            cmp.l 8(sp),d0
   147f4:	|  |  /-------- bge.w 149e2 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   147f8:	|  |  |         moveq #1,d0
   147fa:	|  |  |         move.l d0,12(sp)
   147fe:	|  |  |     /-- bra.w 148f8 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   14802:	|  |  |  /--|-> movea.l 1af38 <currentFloor>,a0
   14808:	|  |  |  |  |   move.l 4(a0),d1
   1480c:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   14812:	|  |  |  |  |   movea.l 12(a0),a0
   14816:	|  |  |  |  |   move.l 16(sp),d0
   1481a:	|  |  |  |  |   lsl.l #3,d0
   1481c:	|  |  |  |  |   adda.l d0,a0
   1481e:	|  |  |  |  |   movea.l 4(a0),a0
   14822:	|  |  |  |  |   move.l 12(sp),d0
   14826:	|  |  |  |  |   add.l d0,d0
   14828:	|  |  |  |  |   add.l d0,d0
   1482a:	|  |  |  |  |   adda.l d0,a0
   1482c:	|  |  |  |  |   move.l (a0),d0
   1482e:	|  |  |  |  |   lsl.l #3,d0
   14830:	|  |  |  |  |   movea.l d1,a0
   14832:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14834:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   14838:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   1483e:	|  |  |  |  |   move.l 4(a0),d1
   14842:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   14848:	|  |  |  |  |   movea.l 12(a0),a0
   1484c:	|  |  |  |  |   move.l 16(sp),d0
   14850:	|  |  |  |  |   lsl.l #3,d0
   14852:	|  |  |  |  |   adda.l d0,a0
   14854:	|  |  |  |  |   movea.l 4(a0),a0
   14858:	|  |  |  |  |   move.l 12(sp),d0
   1485c:	|  |  |  |  |   add.l d0,d0
   1485e:	|  |  |  |  |   add.l d0,d0
   14860:	|  |  |  |  |   adda.l d0,a0
   14862:	|  |  |  |  |   move.l (a0),d0
   14864:	|  |  |  |  |   lsl.l #3,d0
   14866:	|  |  |  |  |   movea.l d1,a0
   14868:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1486a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1486c:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   14872:	|  |  |  |  |   move.l 4(a0),d1
   14876:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   1487c:	|  |  |  |  |   movea.l 12(a0),a0
   14880:	|  |  |  |  |   move.l 16(sp),d0
   14884:	|  |  |  |  |   lsl.l #3,d0
   14886:	|  |  |  |  |   adda.l d0,a0
   14888:	|  |  |  |  |   movea.l 4(a0),a0
   1488c:	|  |  |  |  |   move.l 12(sp),d0
   14890:	|  |  |  |  |   addi.l #1073741823,d0
   14896:	|  |  |  |  |   add.l d0,d0
   14898:	|  |  |  |  |   add.l d0,d0
   1489a:	|  |  |  |  |   adda.l d0,a0
   1489c:	|  |  |  |  |   move.l (a0),d0
   1489e:	|  |  |  |  |   lsl.l #3,d0
   148a0:	|  |  |  |  |   movea.l d1,a0
   148a2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   148a4:	|  |  |  |  |   move.l 4(a0),d1
   148a8:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   148ae:	|  |  |  |  |   move.l 4(a0),d3
   148b2:	|  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   148b8:	|  |  |  |  |   movea.l 12(a0),a0
   148bc:	|  |  |  |  |   move.l 16(sp),d0
   148c0:	|  |  |  |  |   lsl.l #3,d0
   148c2:	|  |  |  |  |   adda.l d0,a0
   148c4:	|  |  |  |  |   movea.l 4(a0),a0
   148c8:	|  |  |  |  |   move.l 12(sp),d0
   148cc:	|  |  |  |  |   addi.l #1073741823,d0
   148d2:	|  |  |  |  |   add.l d0,d0
   148d4:	|  |  |  |  |   add.l d0,d0
   148d6:	|  |  |  |  |   adda.l d0,a0
   148d8:	|  |  |  |  |   move.l (a0),d0
   148da:	|  |  |  |  |   lsl.l #3,d0
   148dc:	|  |  |  |  |   movea.l d3,a0
   148de:	|  |  |  |  |   adda.l d0,a0
   148e0:	|  |  |  |  |   move.l (a0),d0
   148e2:	|  |  |  |  |   move.l d2,-(sp)
   148e4:	|  |  |  |  |   move.l a1,-(sp)
   148e6:	|  |  |  |  |   move.l d1,-(sp)
   148e8:	|  |  |  |  |   move.l d0,-(sp)
   148ea:	|  |  |  |  |   jsr 2d0c <drawLine>
   148f0:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   148f4:	|  |  |  |  |   addq.l #1,12(sp)
   148f8:	|  |  |  |  \-> move.l 12(sp),d0
   148fc:	|  |  |  |      cmp.l 8(sp),d0
   14900:	|  |  |  \----- blt.w 14802 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   14904:	|  |  |         movea.l 1af38 <currentFloor>,a0
   1490a:	|  |  |         move.l 4(a0),d1
   1490e:	|  |  |         movea.l 1af38 <currentFloor>,a0
   14914:	|  |  |         movea.l 12(a0),a0
   14918:	|  |  |         move.l 16(sp),d0
   1491c:	|  |  |         lsl.l #3,d0
   1491e:	|  |  |         adda.l d0,a0
   14920:	|  |  |         movea.l 4(a0),a0
   14924:	|  |  |         move.l 8(sp),d0
   14928:	|  |  |         addi.l #1073741823,d0
   1492e:	|  |  |         add.l d0,d0
   14930:	|  |  |         add.l d0,d0
   14932:	|  |  |         adda.l d0,a0
   14934:	|  |  |         move.l (a0),d0
   14936:	|  |  |         lsl.l #3,d0
   14938:	|  |  |         movea.l d1,a0
   1493a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1493c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   14940:	|  |  |         movea.l 1af38 <currentFloor>,a0
   14946:	|  |  |         move.l 4(a0),d1
   1494a:	|  |  |         movea.l 1af38 <currentFloor>,a0
   14950:	|  |  |         movea.l 12(a0),a0
   14954:	|  |  |         move.l 16(sp),d0
   14958:	|  |  |         lsl.l #3,d0
   1495a:	|  |  |         adda.l d0,a0
   1495c:	|  |  |         movea.l 4(a0),a0
   14960:	|  |  |         move.l 8(sp),d0
   14964:	|  |  |         addi.l #1073741823,d0
   1496a:	|  |  |         add.l d0,d0
   1496c:	|  |  |         add.l d0,d0
   1496e:	|  |  |         adda.l d0,a0
   14970:	|  |  |         move.l (a0),d0
   14972:	|  |  |         lsl.l #3,d0
   14974:	|  |  |         movea.l d1,a0
   14976:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14978:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1497a:	|  |  |         movea.l 1af38 <currentFloor>,a0
   14980:	|  |  |         move.l 4(a0),d1
   14984:	|  |  |         movea.l 1af38 <currentFloor>,a0
   1498a:	|  |  |         movea.l 12(a0),a0
   1498e:	|  |  |         move.l 16(sp),d0
   14992:	|  |  |         lsl.l #3,d0
   14994:	|  |  |         adda.l d0,a0
   14996:	|  |  |         movea.l 4(a0),a0
   1499a:	|  |  |         move.l (a0),d0
   1499c:	|  |  |         lsl.l #3,d0
   1499e:	|  |  |         movea.l d1,a0
   149a0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   149a2:	|  |  |         move.l 4(a0),d1
   149a6:	|  |  |         movea.l 1af38 <currentFloor>,a0
   149ac:	|  |  |         move.l 4(a0),d3
   149b0:	|  |  |         movea.l 1af38 <currentFloor>,a0
   149b6:	|  |  |         movea.l 12(a0),a0
   149ba:	|  |  |         move.l 16(sp),d0
   149be:	|  |  |         lsl.l #3,d0
   149c0:	|  |  |         adda.l d0,a0
   149c2:	|  |  |         movea.l 4(a0),a0
   149c6:	|  |  |         move.l (a0),d0
   149c8:	|  |  |         lsl.l #3,d0
   149ca:	|  |  |         movea.l d3,a0
   149cc:	|  |  |         adda.l d0,a0
   149ce:	|  |  |         move.l (a0),d0
   149d0:	|  |  |         move.l d2,-(sp)
   149d2:	|  |  |         move.l a1,-(sp)
   149d4:	|  |  |         move.l d1,-(sp)
   149d6:	|  |  |         move.l d0,-(sp)
   149d8:	|  |  |         jsr 2d0c <drawLine>
   149de:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   149e2:	|  |  \-------> addq.l #1,16(sp)
   149e6:	|  \----------> movea.l 1af38 <currentFloor>,a0
   149ec:	|               move.l 8(a0),d0
   149f0:	|               cmp.l 16(sp),d0
   149f4:	\-------------- bgt.w 147d6 <drawFloor+0x10>
        }
    }
}
   149f8:	                nop
   149fa:	                nop
   149fc:	                move.l (sp)+,d2
   149fe:	                move.l (sp)+,d3
   14a00:	                lea 12(sp),sp
   14a04:	                rts

00014a06 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   14a06:	                      lea -12(sp),sp
    int sharedVertices = 0;
   14a0a:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   14a0e:	                      clr.l 4(sp)
   14a12:	   /----------------- bra.w 14aa4 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   14a16:	/--|----------------> clr.l (sp)
   14a18:	|  |     /----------- bra.s 14a94 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   14a1a:	|  |  /--|----------> movea.l 16(sp),a0
   14a1e:	|  |  |  |            move.l 4(a0),d1
   14a22:	|  |  |  |            move.l 4(sp),d0
   14a26:	|  |  |  |            add.l d0,d0
   14a28:	|  |  |  |            add.l d0,d0
   14a2a:	|  |  |  |            movea.l d1,a0
   14a2c:	|  |  |  |            adda.l d0,a0
   14a2e:	|  |  |  |            move.l (a0),d1
   14a30:	|  |  |  |            movea.l 20(sp),a0
   14a34:	|  |  |  |            movea.l 4(a0),a0
   14a38:	|  |  |  |            move.l (sp),d0
   14a3a:	|  |  |  |            add.l d0,d0
   14a3c:	|  |  |  |            add.l d0,d0
   14a3e:	|  |  |  |            adda.l d0,a0
   14a40:	|  |  |  |            move.l (a0),d0
   14a42:	|  |  |  |            cmp.l d1,d0
   14a44:	|  |  |  |  /-------- bne.s 14a92 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   14a46:	|  |  |  |  |         move.l 8(sp),d0
   14a4a:	|  |  |  |  |         move.l d0,d1
   14a4c:	|  |  |  |  |         addq.l #1,d1
   14a4e:	|  |  |  |  |         move.l d1,8(sp)
   14a52:	|  |  |  |  |         tst.l d0
   14a54:	|  |  |  |  |     /-- beq.s 14a76 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   14a56:	|  |  |  |  |     |   movea.l 16(sp),a0
   14a5a:	|  |  |  |  |     |   move.l 4(a0),d1
   14a5e:	|  |  |  |  |     |   move.l 4(sp),d0
   14a62:	|  |  |  |  |     |   add.l d0,d0
   14a64:	|  |  |  |  |     |   add.l d0,d0
   14a66:	|  |  |  |  |     |   movea.l d1,a0
   14a68:	|  |  |  |  |     |   adda.l d0,a0
   14a6a:	|  |  |  |  |     |   move.l (a0),d0
   14a6c:	|  |  |  |  |     |   movea.l 28(sp),a0
   14a70:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   14a72:	|  |  |  |  |     |   moveq #1,d0
   14a74:	|  |  |  |  |  /--|-- bra.s 14ab4 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   14a76:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   14a7a:	|  |  |  |  |  |      move.l 4(a0),d1
   14a7e:	|  |  |  |  |  |      move.l 4(sp),d0
   14a82:	|  |  |  |  |  |      add.l d0,d0
   14a84:	|  |  |  |  |  |      add.l d0,d0
   14a86:	|  |  |  |  |  |      movea.l d1,a0
   14a88:	|  |  |  |  |  |      adda.l d0,a0
   14a8a:	|  |  |  |  |  |      move.l (a0),d0
   14a8c:	|  |  |  |  |  |      movea.l 24(sp),a0
   14a90:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   14a92:	|  |  |  |  \--|----> addq.l #1,(sp)
   14a94:	|  |  |  \-----|----> movea.l 20(sp),a0
   14a98:	|  |  |        |      move.l (a0),d0
   14a9a:	|  |  |        |      cmp.l (sp),d0
   14a9c:	|  |  \--------|----- bgt.w 14a1a <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   14aa0:	|  |           |      addq.l #1,4(sp)
   14aa4:	|  \-----------|----> movea.l 16(sp),a0
   14aa8:	|              |      move.l (a0),d0
   14aaa:	|              |      cmp.l 4(sp),d0
   14aae:	\--------------|----- bgt.w 14a16 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   14ab2:	               |      clr.w d0
}
   14ab4:	               \----> lea 12(sp),sp
   14ab8:	                      rts

00014aba <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   14aba:	movea.l 1af38 <currentFloor>,a0
   14ac0:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   14ac4:	movea.l 1af38 <currentFloor>,a0
   14aca:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   14ace:	movea.l 1af38 <currentFloor>,a0
   14ad4:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   14ad8:	movea.l 1af38 <currentFloor>,a0
   14ade:	clr.l 16(a0)
}
   14ae2:	nop
   14ae4:	rts

00014ae6 <inFloor>:

int inFloor (int x, int y) {
   14ae6:	          subq.l #8,sp
	int i, r = -1;
   14ae8:	          moveq #-1,d0
   14aea:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14aec:	          clr.l 4(sp)
   14af0:	   /----- bra.s 14b24 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   14af2:	/--|----> movea.l 1af38 <currentFloor>,a0
   14af8:	|  |      move.l 12(a0),d1
   14afc:	|  |      move.l 4(sp),d0
   14b00:	|  |      lsl.l #3,d0
   14b02:	|  |      add.l d1,d0
   14b04:	|  |      move.l 16(sp),-(sp)
   14b08:	|  |      move.l 16(sp),-(sp)
   14b0c:	|  |      move.l d0,-(sp)
   14b0e:	|  |      jsr 14cf0 <pointInFloorPolygon>
   14b14:	|  |      lea 12(sp),sp
   14b18:	|  |      tst.w d0
   14b1a:	|  |  /-- beq.s 14b20 <inFloor+0x3a>
			r = i;
   14b1c:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14b20:	|  |  \-> addq.l #1,4(sp)
   14b24:	|  \----> movea.l 1af38 <currentFloor>,a0
   14b2a:	|         move.l 8(a0),d0
   14b2e:	|         cmp.l 4(sp),d0
   14b32:	\-------- bgt.s 14af2 <inFloor+0xc>

	return r;
   14b34:	          move.l (sp),d0
}
   14b36:	          addq.l #8,sp
   14b38:	          rts

00014b3a <initFloor>:

BOOL initFloor () {
   14b3a:	       lea -12(sp),sp
   14b3e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   14b40:	       moveq #20,d0
   14b42:	       move.l d0,12(sp)
   14b46:	       clr.l 8(sp)
   14b4a:	       move.l 1add0 <SysBase>,d0
   14b50:	       movea.l d0,a6
   14b52:	       move.l 12(sp),d0
   14b56:	       move.l 8(sp),d1
   14b5a:	       jsr -684(a6)
   14b5e:	       move.l d0,4(sp)
   14b62:	       move.l 4(sp),d0
   14b66:	       move.l d0,1af38 <currentFloor>

    if(currentFloor == 0) {
   14b6c:	       move.l 1af38 <currentFloor>,d0
   14b72:	/----- bne.s 14b86 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   14b74:	|      pea 18523 <graphics.c.1c13408a+0x15a>
   14b7a:	|      jsr 15784 <KPrintF>
   14b80:	|      addq.l #4,sp
        return FALSE;
   14b82:	|      clr.w d0
   14b84:	|  /-- bra.s 14b8e <initFloor+0x54>
    }

	noFloor ();
   14b86:	\--|-> jsr 14aba <noFloor>
	return TRUE;
   14b8c:	   |   moveq #1,d0
}
   14b8e:	   \-> movea.l (sp)+,a6
   14b90:	       lea 12(sp),sp
   14b94:	       rts

00014b96 <killFloor>:

void killFloor () {
   14b96:	       lea -24(sp),sp
   14b9a:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   14b9c:	       clr.l 24(sp)
   14ba0:	   /-- bra.s 14bfa <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   14ba2:	/--|-> movea.l 1af38 <currentFloor>,a0
   14ba8:	|  |   move.l 12(a0),d1
   14bac:	|  |   move.l 24(sp),d0
   14bb0:	|  |   lsl.l #3,d0
   14bb2:	|  |   movea.l d1,a0
   14bb4:	|  |   adda.l d0,a0
   14bb6:	|  |   move.l 4(a0),8(sp)
   14bbc:	|  |   move.l 1add0 <SysBase>,d0
   14bc2:	|  |   movea.l d0,a6
   14bc4:	|  |   movea.l 8(sp),a1
   14bc8:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   14bcc:	|  |   movea.l 1af38 <currentFloor>,a0
   14bd2:	|  |   move.l 16(a0),d1
   14bd6:	|  |   move.l 24(sp),d0
   14bda:	|  |   add.l d0,d0
   14bdc:	|  |   add.l d0,d0
   14bde:	|  |   movea.l d1,a0
   14be0:	|  |   adda.l d0,a0
   14be2:	|  |   move.l (a0),4(sp)
   14be6:	|  |   move.l 1add0 <SysBase>,d0
   14bec:	|  |   movea.l d0,a6
   14bee:	|  |   movea.l 4(sp),a1
   14bf2:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   14bf6:	|  |   addq.l #1,24(sp)
   14bfa:	|  \-> movea.l 1af38 <currentFloor>,a0
   14c00:	|      move.l 8(a0),d0
   14c04:	|      cmp.l 24(sp),d0
   14c08:	\----- bgt.s 14ba2 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   14c0a:	       movea.l 1af38 <currentFloor>,a0
   14c10:	       move.l 12(a0),20(sp)
   14c16:	       move.l 1add0 <SysBase>,d0
   14c1c:	       movea.l d0,a6
   14c1e:	       movea.l 20(sp),a1
   14c22:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   14c26:	       movea.l 1af38 <currentFloor>,a0
   14c2c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   14c30:	       movea.l 1af38 <currentFloor>,a0
   14c36:	       move.l 4(a0),16(sp)
   14c3c:	       move.l 1add0 <SysBase>,d0
   14c42:	       movea.l d0,a6
   14c44:	       movea.l 16(sp),a1
   14c48:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   14c4c:	       movea.l 1af38 <currentFloor>,a0
   14c52:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   14c56:	       movea.l 1af38 <currentFloor>,a0
   14c5c:	       move.l 16(a0),12(sp)
   14c62:	       move.l 1add0 <SysBase>,d0
   14c68:	       movea.l d0,a6
   14c6a:	       movea.l 12(sp),a1
   14c6e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   14c72:	       movea.l 1af38 <currentFloor>,a0
   14c78:	       clr.l 16(a0)
}
   14c7c:	       nop
   14c7e:	       movea.l (sp)+,a6
   14c80:	       lea 24(sp),sp
   14c84:	       rts

00014c86 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   14c86:	                   lea -12(sp),sp
	int sharedVertices = 0;
   14c8a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   14c8e:	                   clr.l 4(sp)
   14c92:	   /-------------- bra.s 14cde <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   14c94:	/--|-------------> clr.l (sp)
   14c96:	|  |     /-------- bra.s 14cd2 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   14c98:	|  |  /--|-------> move.l 20(sp),d1
   14c9c:	|  |  |  |         move.l 4(sp),d0
   14ca0:	|  |  |  |         add.l d0,d0
   14ca2:	|  |  |  |         add.l d0,d0
   14ca4:	|  |  |  |         movea.l d1,a0
   14ca6:	|  |  |  |         adda.l d0,a0
   14ca8:	|  |  |  |         move.l (a0),d1
   14caa:	|  |  |  |         movea.l 28(sp),a0
   14cae:	|  |  |  |         move.l (sp),d0
   14cb0:	|  |  |  |         add.l d0,d0
   14cb2:	|  |  |  |         add.l d0,d0
   14cb4:	|  |  |  |         adda.l d0,a0
   14cb6:	|  |  |  |         move.l (a0),d0
   14cb8:	|  |  |  |         cmp.l d1,d0
   14cba:	|  |  |  |     /-- bne.s 14cd0 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   14cbc:	|  |  |  |     |   move.l 8(sp),d0
   14cc0:	|  |  |  |     |   move.l d0,d1
   14cc2:	|  |  |  |     |   addq.l #1,d1
   14cc4:	|  |  |  |     |   move.l d1,8(sp)
   14cc8:	|  |  |  |     |   tst.l d0
   14cca:	|  |  |  |     +-- beq.s 14cd0 <polysShareSide+0x4a>
   14ccc:	|  |  |  |     |   moveq #1,d0
   14cce:	|  |  |  |  /--|-- bra.s 14cea <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   14cd0:	|  |  |  |  |  \-> addq.l #1,(sp)
   14cd2:	|  |  |  \--|----> move.l 24(sp),d0
   14cd6:	|  |  |     |      cmp.l (sp),d0
   14cd8:	|  |  \-----|----- bgt.s 14c98 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   14cda:	|  |        |      addq.l #1,4(sp)
   14cde:	|  \--------|----> move.l 16(sp),d0
   14ce2:	|           |      cmp.l 4(sp),d0
   14ce6:	\-----------|----- bgt.s 14c94 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   14ce8:	            |      clr.w d0
}
   14cea:	            \----> lea 12(sp),sp
   14cee:	                   rts

00014cf0 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   14cf0:	             lea -28(sp),sp
   14cf4:	             move.l d3,-(sp)
   14cf6:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   14cf8:	             clr.l 32(sp)
   14cfc:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   14d00:	             movea.l 40(sp),a0
   14d04:	             move.l (a0),d0
   14d06:	             move.l d0,d1
   14d08:	             subq.l #1,d1
   14d0a:	             move.l d1,28(sp)
   14d0e:	   /-------- bra.w 14f08 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   14d12:	/--|-------> movea.l 1af38 <currentFloor>,a0
   14d18:	|  |         move.l 4(a0),d1
   14d1c:	|  |         movea.l 40(sp),a0
   14d20:	|  |         movea.l 4(a0),a0
   14d24:	|  |         move.l 32(sp),d0
   14d28:	|  |         add.l d0,d0
   14d2a:	|  |         add.l d0,d0
   14d2c:	|  |         adda.l d0,a0
   14d2e:	|  |         move.l (a0),d0
   14d30:	|  |         lsl.l #3,d0
   14d32:	|  |         movea.l d1,a0
   14d34:	|  |         adda.l d0,a0
   14d36:	|  |         move.l (a0),d0
   14d38:	|  |         move.l d0,-(sp)
   14d3a:	|  |         jsr 15bc0 <__floatsisf>
   14d40:	|  |         addq.l #4,sp
   14d42:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   14d46:	|  |         movea.l 1af38 <currentFloor>,a0
   14d4c:	|  |         move.l 4(a0),d1
   14d50:	|  |         movea.l 40(sp),a0
   14d54:	|  |         movea.l 4(a0),a0
   14d58:	|  |         move.l 32(sp),d0
   14d5c:	|  |         add.l d0,d0
   14d5e:	|  |         add.l d0,d0
   14d60:	|  |         adda.l d0,a0
   14d62:	|  |         move.l (a0),d0
   14d64:	|  |         lsl.l #3,d0
   14d66:	|  |         movea.l d1,a0
   14d68:	|  |         adda.l d0,a0
   14d6a:	|  |         move.l 4(a0),d0
   14d6e:	|  |         move.l d0,-(sp)
   14d70:	|  |         jsr 15bc0 <__floatsisf>
   14d76:	|  |         addq.l #4,sp
   14d78:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   14d7c:	|  |         movea.l 1af38 <currentFloor>,a0
   14d82:	|  |         move.l 4(a0),d1
   14d86:	|  |         movea.l 40(sp),a0
   14d8a:	|  |         movea.l 4(a0),a0
   14d8e:	|  |         move.l 28(sp),d0
   14d92:	|  |         add.l d0,d0
   14d94:	|  |         add.l d0,d0
   14d96:	|  |         adda.l d0,a0
   14d98:	|  |         move.l (a0),d0
   14d9a:	|  |         lsl.l #3,d0
   14d9c:	|  |         movea.l d1,a0
   14d9e:	|  |         adda.l d0,a0
   14da0:	|  |         move.l (a0),d0
   14da2:	|  |         move.l d0,-(sp)
   14da4:	|  |         jsr 15bc0 <__floatsisf>
   14daa:	|  |         addq.l #4,sp
   14dac:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   14db0:	|  |         movea.l 1af38 <currentFloor>,a0
   14db6:	|  |         move.l 4(a0),d1
   14dba:	|  |         movea.l 40(sp),a0
   14dbe:	|  |         movea.l 4(a0),a0
   14dc2:	|  |         move.l 28(sp),d0
   14dc6:	|  |         add.l d0,d0
   14dc8:	|  |         add.l d0,d0
   14dca:	|  |         adda.l d0,a0
   14dcc:	|  |         move.l (a0),d0
   14dce:	|  |         lsl.l #3,d0
   14dd0:	|  |         movea.l d1,a0
   14dd2:	|  |         adda.l d0,a0
   14dd4:	|  |         move.l 4(a0),d0
   14dd8:	|  |         move.l d0,-(sp)
   14dda:	|  |         jsr 15bc0 <__floatsisf>
   14de0:	|  |         addq.l #4,sp
   14de2:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14de6:	|  |         move.l 48(sp),-(sp)
   14dea:	|  |         jsr 15bc0 <__floatsisf>
   14df0:	|  |         addq.l #4,sp
   14df2:	|  |         move.l d0,-(sp)
   14df4:	|  |         move.l 20(sp),-(sp)
   14df8:	|  |         jsr 15d62 <__lesf2>
   14dfe:	|  |         addq.l #8,sp
   14e00:	|  |         tst.l d0
   14e02:	|  |     /-- bgt.s 14e22 <pointInFloorPolygon+0x132>
   14e04:	|  |     |   move.l 48(sp),-(sp)
   14e08:	|  |     |   jsr 15bc0 <__floatsisf>
   14e0e:	|  |     |   addq.l #4,sp
   14e10:	|  |     |   move.l d0,-(sp)
   14e12:	|  |     |   move.l 12(sp),-(sp)
   14e16:	|  |     |   jsr 15d2c <__gtsf2>
   14e1c:	|  |     |   addq.l #8,sp
   14e1e:	|  |     |   tst.l d0
   14e20:	|  |  /--|-- bgt.s 14e62 <pointInFloorPolygon+0x172>
   14e22:	|  |  |  \-> move.l 48(sp),-(sp)
   14e26:	|  |  |      jsr 15bc0 <__floatsisf>
   14e2c:	|  |  |      addq.l #4,sp
   14e2e:	|  |  |      move.l d0,-(sp)
   14e30:	|  |  |      move.l 12(sp),-(sp)
   14e34:	|  |  |      jsr 15d62 <__lesf2>
   14e3a:	|  |  |      addq.l #8,sp
   14e3c:	|  |  |      tst.l d0
   14e3e:	|  |  |  /-- bgt.w 14ef8 <pointInFloorPolygon+0x208>
   14e42:	|  |  |  |   move.l 48(sp),-(sp)
   14e46:	|  |  |  |   jsr 15bc0 <__floatsisf>
   14e4c:	|  |  |  |   addq.l #4,sp
   14e4e:	|  |  |  |   move.l d0,-(sp)
   14e50:	|  |  |  |   move.l 20(sp),-(sp)
   14e54:	|  |  |  |   jsr 15d2c <__gtsf2>
   14e5a:	|  |  |  |   addq.l #8,sp
   14e5c:	|  |  |  |   tst.l d0
   14e5e:	|  |  |  +-- ble.w 14ef8 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   14e62:	|  |  \--|-> move.l 44(sp),-(sp)
   14e66:	|  |     |   jsr 15bc0 <__floatsisf>
   14e6c:	|  |     |   addq.l #4,sp
   14e6e:	|  |     |   move.l d0,d3
   14e70:	|  |     |   move.l 20(sp),-(sp)
   14e74:	|  |     |   move.l 16(sp),-(sp)
   14e78:	|  |     |   jsr 15eb4 <__subsf3>
   14e7e:	|  |     |   addq.l #8,sp
   14e80:	|  |     |   move.l d0,d2
   14e82:	|  |     |   move.l 48(sp),-(sp)
   14e86:	|  |     |   jsr 15bc0 <__floatsisf>
   14e8c:	|  |     |   addq.l #4,sp
   14e8e:	|  |     |   move.l 16(sp),-(sp)
   14e92:	|  |     |   move.l d0,-(sp)
   14e94:	|  |     |   jsr 15eb4 <__subsf3>
   14e9a:	|  |     |   addq.l #8,sp
   14e9c:	|  |     |   move.l d0,-(sp)
   14e9e:	|  |     |   move.l d2,-(sp)
   14ea0:	|  |     |   jsr 15c72 <__mulsf3>
   14ea6:	|  |     |   addq.l #8,sp
   14ea8:	|  |     |   move.l d0,d2
   14eaa:	|  |     |   move.l 16(sp),-(sp)
   14eae:	|  |     |   move.l 12(sp),-(sp)
   14eb2:	|  |     |   jsr 15eb4 <__subsf3>
   14eb8:	|  |     |   addq.l #8,sp
   14eba:	|  |     |   move.l d0,-(sp)
   14ebc:	|  |     |   move.l d2,-(sp)
   14ebe:	|  |     |   jsr 15a6c <__divsf3>
   14ec4:	|  |     |   addq.l #8,sp
   14ec6:	|  |     |   move.l 20(sp),-(sp)
   14eca:	|  |     |   move.l d0,-(sp)
   14ecc:	|  |     |   jsr 15972 <__addsf3>
   14ed2:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14ed4:	|  |     |   move.l d0,-(sp)
   14ed6:	|  |     |   move.l d3,-(sp)
   14ed8:	|  |     |   jsr 15de6 <__ltsf2>
   14ede:	|  |     |   addq.l #8,sp
   14ee0:	|  |     |   tst.l d0
   14ee2:	|  |     +-- bge.s 14ef8 <pointInFloorPolygon+0x208>

			c = !c;
   14ee4:	|  |     |   tst.l 24(sp)
   14ee8:	|  |     |   seq d0
   14eea:	|  |     |   neg.b d0
   14eec:	|  |     |   move.b d0,d0
   14eee:	|  |     |   andi.l #255,d0
   14ef4:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   14ef8:	|  |     \-> move.l 32(sp),d0
   14efc:	|  |         move.l d0,d1
   14efe:	|  |         addq.l #1,d1
   14f00:	|  |         move.l d1,32(sp)
   14f04:	|  |         move.l d0,28(sp)
   14f08:	|  \-------> movea.l 40(sp),a0
   14f0c:	|            move.l (a0),d0
   14f0e:	|            cmp.l 32(sp),d0
   14f12:	\----------- bgt.w 14d12 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   14f16:	             tst.l 24(sp)
   14f1a:	             sne d0
   14f1c:	             neg.b d0
   14f1e:	             move.b d0,d0
   14f20:	             andi.w #255,d0
}
   14f24:	             move.l (sp)+,d2
   14f26:	             move.l (sp)+,d3
   14f28:	             lea 28(sp),sp
   14f2c:	             rts

00014f2e <setFloor>:

BOOL setFloor (int fileNum) {
   14f2e:	                               lea -132(sp),sp
   14f32:	                               move.l a6,-(sp)
   14f34:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   14f36:	                               jsr 14b96 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   14f3c:	                               move.l 144(sp),-(sp)
   14f40:	                               jsr 5bcc <openFileFromNum>
   14f46:	                               addq.l #4,sp
   14f48:	                               tst.l d0
   14f4a:	                           /-- bne.s 14f52 <setFloor+0x24>
   14f4c:	                           |   clr.w d0
   14f4e:	/--------------------------|-- bra.w 1569e <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   14f52:	|                          \-> movea.l 1af38 <currentFloor>,a0
   14f58:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   14f5c:	|                              move.l 1adb8 <bigDataFile>,118(sp)
   14f64:	|                              move.l 1add8 <DOSBase>,d0
   14f6a:	|                              movea.l d0,a6
   14f6c:	|                              move.l 118(sp),d1
   14f70:	|                              jsr -306(a6)
   14f74:	|                              move.l d0,114(sp)
   14f78:	|                              move.l 114(sp),d0
   14f7c:	|                              movea.l 1af38 <currentFloor>,a0
   14f82:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   14f86:	|                              movea.l 1af38 <currentFloor>,a0
   14f8c:	|                              move.l 8(a0),d0
   14f90:	|                              lsl.l #3,d0
   14f92:	|                              move.l d0,110(sp)
   14f96:	|                              clr.l 106(sp)
   14f9a:	|                              move.l 1add0 <SysBase>,d0
   14fa0:	|                              movea.l d0,a6
   14fa2:	|                              move.l 110(sp),d0
   14fa6:	|                              move.l 106(sp),d1
   14faa:	|                              jsr -684(a6)
   14fae:	|                              move.l d0,102(sp)
   14fb2:	|                              move.l 102(sp),d0
   14fb6:	|                              movea.l 1af38 <currentFloor>,a0
   14fbc:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   14fc0:	|                              movea.l 1af38 <currentFloor>,a0
   14fc6:	|                              move.l 12(a0),d0
   14fca:	|                          /-- bne.s 14fe0 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   14fcc:	|                          |   pea 18547 <graphics.c.1c13408a+0x17e>
   14fd2:	|                          |   jsr 15784 <KPrintF>
   14fd8:	|                          |   addq.l #4,sp
		return FALSE;
   14fda:	|                          |   clr.w d0
   14fdc:	+--------------------------|-- bra.w 1569e <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14fe0:	|                          \-> clr.l 136(sp)
   14fe4:	|                    /-------- bra.w 150fc <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   14fe8:	|                 /--|-------> move.l 1adb8 <bigDataFile>,26(sp)
   14ff0:	|                 |  |         move.l 1add8 <DOSBase>,d0
   14ff6:	|                 |  |         movea.l d0,a6
   14ff8:	|                 |  |         move.l 26(sp),d1
   14ffc:	|                 |  |         jsr -306(a6)
   15000:	|                 |  |         move.l d0,22(sp)
   15004:	|                 |  |         move.l 22(sp),d1
   15008:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   1500e:	|                 |  |         movea.l 12(a0),a0
   15012:	|                 |  |         move.l 136(sp),d0
   15016:	|                 |  |         lsl.l #3,d0
   15018:	|                 |  |         adda.l d0,a0
   1501a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   1501c:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   15022:	|                 |  |         move.l 12(a0),d1
   15026:	|                 |  |         move.l 136(sp),d0
   1502a:	|                 |  |         lsl.l #3,d0
   1502c:	|                 |  |         movea.l d1,a0
   1502e:	|                 |  |         adda.l d0,a0
   15030:	|                 |  |         move.l (a0),d0
   15032:	|                 |  |         add.l d0,d0
   15034:	|                 |  |         add.l d0,d0
   15036:	|                 |  |         move.l d0,18(sp)
   1503a:	|                 |  |         clr.l 14(sp)
   1503e:	|                 |  |         move.l 1add0 <SysBase>,d0
   15044:	|                 |  |         movea.l d0,a6
   15046:	|                 |  |         move.l 18(sp),d0
   1504a:	|                 |  |         move.l 14(sp),d1
   1504e:	|                 |  |         jsr -684(a6)
   15052:	|                 |  |         move.l d0,10(sp)
   15056:	|                 |  |         move.l 10(sp),d1
   1505a:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   15060:	|                 |  |         movea.l 12(a0),a0
   15064:	|                 |  |         move.l 136(sp),d0
   15068:	|                 |  |         lsl.l #3,d0
   1506a:	|                 |  |         adda.l d0,a0
   1506c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   15070:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   15076:	|                 |  |         move.l 12(a0),d1
   1507a:	|                 |  |         move.l 136(sp),d0
   1507e:	|                 |  |         lsl.l #3,d0
   15080:	|                 |  |         movea.l d1,a0
   15082:	|                 |  |         adda.l d0,a0
   15084:	|                 |  |         move.l 4(a0),d0
   15088:	|                 |  |     /-- bne.s 1509e <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1508a:	|                 |  |     |   pea 18547 <graphics.c.1c13408a+0x17e>
   15090:	|                 |  |     |   jsr 15784 <KPrintF>
   15096:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15098:	|                 |  |     |   clr.w d0
   1509a:	+-----------------|--|-----|-- bra.w 1569e <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1509e:	|                 |  |     \-> clr.l 132(sp)
   150a2:	|                 |  |     /-- bra.s 150dc <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   150a4:	|                 |  |  /--|-> move.l 1adb8 <bigDataFile>,d1
   150aa:	|                 |  |  |  |   movea.l 1af38 <currentFloor>,a0
   150b0:	|                 |  |  |  |   movea.l 12(a0),a0
   150b4:	|                 |  |  |  |   move.l 136(sp),d0
   150b8:	|                 |  |  |  |   lsl.l #3,d0
   150ba:	|                 |  |  |  |   adda.l d0,a0
   150bc:	|                 |  |  |  |   movea.l 4(a0),a0
   150c0:	|                 |  |  |  |   move.l 132(sp),d0
   150c4:	|                 |  |  |  |   add.l d0,d0
   150c6:	|                 |  |  |  |   add.l d0,d0
   150c8:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   150cc:	|                 |  |  |  |   move.l d1,-(sp)
   150ce:	|                 |  |  |  |   jsr 6bc <get2bytes>
   150d4:	|                 |  |  |  |   addq.l #4,sp
   150d6:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   150d8:	|                 |  |  |  |   addq.l #1,132(sp)
   150dc:	|                 |  |  |  \-> movea.l 1af38 <currentFloor>,a0
   150e2:	|                 |  |  |      move.l 12(a0),d1
   150e6:	|                 |  |  |      move.l 136(sp),d0
   150ea:	|                 |  |  |      lsl.l #3,d0
   150ec:	|                 |  |  |      movea.l d1,a0
   150ee:	|                 |  |  |      adda.l d0,a0
   150f0:	|                 |  |  |      move.l (a0),d0
   150f2:	|                 |  |  |      cmp.l 132(sp),d0
   150f6:	|                 |  |  \----- bgt.s 150a4 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   150f8:	|                 |  |         addq.l #1,136(sp)
   150fc:	|                 |  \-------> movea.l 1af38 <currentFloor>,a0
   15102:	|                 |            move.l 8(a0),d0
   15106:	|                 |            cmp.l 136(sp),d0
   1510a:	|                 \----------- bgt.w 14fe8 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   1510e:	|                              move.l 1adb8 <bigDataFile>,d0
   15114:	|                              move.l d0,-(sp)
   15116:	|                              jsr 6bc <get2bytes>
   1511c:	|                              addq.l #4,sp
   1511e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   15122:	|                              move.l 136(sp),d0
   15126:	|                              lsl.l #3,d0
   15128:	|                              move.l d0,98(sp)
   1512c:	|                              clr.l 94(sp)
   15130:	|                              move.l 1add0 <SysBase>,d0
   15136:	|                              movea.l d0,a6
   15138:	|                              move.l 98(sp),d0
   1513c:	|                              move.l 94(sp),d1
   15140:	|                              jsr -684(a6)
   15144:	|                              move.l d0,90(sp)
   15148:	|                              move.l 90(sp),d0
   1514c:	|                              movea.l 1af38 <currentFloor>,a0
   15152:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   15156:	|                              movea.l 1af38 <currentFloor>,a0
   1515c:	|                              move.l 4(a0),d0
   15160:	|                          /-- bne.s 15176 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   15162:	|                          |   pea 18547 <graphics.c.1c13408a+0x17e>
   15168:	|                          |   jsr 15784 <KPrintF>
   1516e:	|                          |   addq.l #4,sp
		return FALSE;
   15170:	|                          |   clr.w d0
   15172:	+--------------------------|-- bra.w 1569e <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   15176:	|                          \-> clr.l 132(sp)
   1517a:	|                          /-- bra.s 151ce <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1517c:	|                       /--|-> move.l 1adb8 <bigDataFile>,d1
   15182:	|                       |  |   movea.l 1af38 <currentFloor>,a0
   15188:	|                       |  |   movea.l 4(a0),a0
   1518c:	|                       |  |   move.l 132(sp),d0
   15190:	|                       |  |   lsl.l #3,d0
   15192:	|                       |  |   lea (0,a0,d0.l),a2
   15196:	|                       |  |   move.l d1,-(sp)
   15198:	|                       |  |   jsr 6bc <get2bytes>
   1519e:	|                       |  |   addq.l #4,sp
   151a0:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   151a2:	|                       |  |   move.l 1adb8 <bigDataFile>,d1
   151a8:	|                       |  |   movea.l 1af38 <currentFloor>,a0
   151ae:	|                       |  |   movea.l 4(a0),a0
   151b2:	|                       |  |   move.l 132(sp),d0
   151b6:	|                       |  |   lsl.l #3,d0
   151b8:	|                       |  |   lea (0,a0,d0.l),a2
   151bc:	|                       |  |   move.l d1,-(sp)
   151be:	|                       |  |   jsr 6bc <get2bytes>
   151c4:	|                       |  |   addq.l #4,sp
   151c6:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   151ca:	|                       |  |   addq.l #1,132(sp)
   151ce:	|                       |  \-> move.l 132(sp),d0
   151d2:	|                       |      cmp.l 136(sp),d0
   151d6:	|                       \----- blt.s 1517c <setFloor+0x24e>
	}

	finishAccess ();
   151d8:	|                              jsr 5ac4 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   151de:	|                              movea.l 1af38 <currentFloor>,a0
   151e4:	|                              move.l 8(a0),d0
   151e8:	|                              add.l d0,d0
   151ea:	|                              add.l d0,d0
   151ec:	|                              move.l d0,86(sp)
   151f0:	|                              clr.l 82(sp)
   151f4:	|                              move.l 1add0 <SysBase>,d0
   151fa:	|                              movea.l d0,a6
   151fc:	|                              move.l 86(sp),d0
   15200:	|                              move.l 82(sp),d1
   15204:	|                              jsr -684(a6)
   15208:	|                              move.l d0,78(sp)
   1520c:	|                              move.l 78(sp),d0
   15210:	|                              movea.l 1af38 <currentFloor>,a0
   15216:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1521a:	|                              movea.l 1af38 <currentFloor>,a0
   15220:	|                              move.l 8(a0),d0
   15224:	|                              add.l d0,d0
   15226:	|                              add.l d0,d0
   15228:	|                              move.l d0,74(sp)
   1522c:	|                              clr.l 70(sp)
   15230:	|                              move.l 1add0 <SysBase>,d0
   15236:	|                              movea.l d0,a6
   15238:	|                              move.l 74(sp),d0
   1523c:	|                              move.l 70(sp),d1
   15240:	|                              jsr -684(a6)
   15244:	|                              move.l d0,66(sp)
   15248:	|                              move.l 66(sp),d0
   1524c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   15250:	|                              movea.l 1af38 <currentFloor>,a0
   15256:	|                              move.l 16(a0),d0
   1525a:	|                          /-- bne.s 15270 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   1525c:	|                          |   pea 18547 <graphics.c.1c13408a+0x17e>
   15262:	|                          |   jsr 15784 <KPrintF>
   15268:	|                          |   addq.l #4,sp
		return FALSE;
   1526a:	|                          |   clr.w d0
   1526c:	+--------------------------|-- bra.w 1569e <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15270:	|                          \-> clr.l 136(sp)
   15274:	|                    /-------- bra.w 15398 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15278:	|                 /--|-------> movea.l 1af38 <currentFloor>,a0
   1527e:	|                 |  |         move.l 8(a0),d0
   15282:	|                 |  |         add.l d0,d0
   15284:	|                 |  |         add.l d0,d0
   15286:	|                 |  |         move.l d0,50(sp)
   1528a:	|                 |  |         clr.l 46(sp)
   1528e:	|                 |  |         move.l 1add0 <SysBase>,d0
   15294:	|                 |  |         movea.l d0,a6
   15296:	|                 |  |         move.l 50(sp),d0
   1529a:	|                 |  |         move.l 46(sp),d1
   1529e:	|                 |  |         jsr -684(a6)
   152a2:	|                 |  |         move.l d0,42(sp)
   152a6:	|                 |  |         move.l 42(sp),d0
   152aa:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   152b0:	|                 |  |         movea.l 16(a0),a0
   152b4:	|                 |  |         move.l 136(sp),d1
   152b8:	|                 |  |         add.l d1,d1
   152ba:	|                 |  |         add.l d1,d1
   152bc:	|                 |  |         adda.l d1,a0
   152be:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   152c0:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   152c6:	|                 |  |         move.l 8(a0),d0
   152ca:	|                 |  |         add.l d0,d0
   152cc:	|                 |  |         add.l d0,d0
   152ce:	|                 |  |         move.l d0,38(sp)
   152d2:	|                 |  |         clr.l 34(sp)
   152d6:	|                 |  |         move.l 1add0 <SysBase>,d0
   152dc:	|                 |  |         movea.l d0,a6
   152de:	|                 |  |         move.l 38(sp),d0
   152e2:	|                 |  |         move.l 34(sp),d1
   152e6:	|                 |  |         jsr -684(a6)
   152ea:	|                 |  |         move.l d0,30(sp)
   152ee:	|                 |  |         move.l 30(sp),d1
   152f2:	|                 |  |         move.l 136(sp),d0
   152f6:	|                 |  |         add.l d0,d0
   152f8:	|                 |  |         add.l d0,d0
   152fa:	|                 |  |         movea.l 62(sp),a0
   152fe:	|                 |  |         adda.l d0,a0
   15300:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   15302:	|                 |  |         movea.l 1af38 <currentFloor>,a0
   15308:	|                 |  |         move.l 16(a0),d1
   1530c:	|                 |  |         move.l 136(sp),d0
   15310:	|                 |  |         add.l d0,d0
   15312:	|                 |  |         add.l d0,d0
   15314:	|                 |  |         movea.l d1,a0
   15316:	|                 |  |         adda.l d0,a0
   15318:	|                 |  |         move.l (a0),d0
   1531a:	|                 |  |     /-- bne.s 15330 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   1531c:	|                 |  |     |   pea 18547 <graphics.c.1c13408a+0x17e>
   15322:	|                 |  |     |   jsr 15784 <KPrintF>
   15328:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1532a:	|                 |  |     |   clr.w d0
   1532c:	+-----------------|--|-----|-- bra.w 1569e <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15330:	|                 |  |     \-> clr.l 132(sp)
   15334:	|                 |  |     /-- bra.s 15384 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   15336:	|                 |  |  /--|-> movea.l 1af38 <currentFloor>,a0
   1533c:	|                 |  |  |  |   move.l 16(a0),d1
   15340:	|                 |  |  |  |   move.l 136(sp),d0
   15344:	|                 |  |  |  |   add.l d0,d0
   15346:	|                 |  |  |  |   add.l d0,d0
   15348:	|                 |  |  |  |   movea.l d1,a0
   1534a:	|                 |  |  |  |   adda.l d0,a0
   1534c:	|                 |  |  |  |   move.l (a0),d1
   1534e:	|                 |  |  |  |   move.l 132(sp),d0
   15352:	|                 |  |  |  |   add.l d0,d0
   15354:	|                 |  |  |  |   add.l d0,d0
   15356:	|                 |  |  |  |   movea.l d1,a0
   15358:	|                 |  |  |  |   adda.l d0,a0
   1535a:	|                 |  |  |  |   moveq #-1,d1
   1535c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   1535e:	|                 |  |  |  |   move.l 136(sp),d0
   15362:	|                 |  |  |  |   add.l d0,d0
   15364:	|                 |  |  |  |   add.l d0,d0
   15366:	|                 |  |  |  |   movea.l 62(sp),a0
   1536a:	|                 |  |  |  |   adda.l d0,a0
   1536c:	|                 |  |  |  |   move.l (a0),d1
   1536e:	|                 |  |  |  |   move.l 132(sp),d0
   15372:	|                 |  |  |  |   add.l d0,d0
   15374:	|                 |  |  |  |   add.l d0,d0
   15376:	|                 |  |  |  |   movea.l d1,a0
   15378:	|                 |  |  |  |   adda.l d0,a0
   1537a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15380:	|                 |  |  |  |   addq.l #1,132(sp)
   15384:	|                 |  |  |  \-> movea.l 1af38 <currentFloor>,a0
   1538a:	|                 |  |  |      move.l 8(a0),d0
   1538e:	|                 |  |  |      cmp.l 132(sp),d0
   15392:	|                 |  |  \----- bgt.s 15336 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15394:	|                 |  |         addq.l #1,136(sp)
   15398:	|                 |  \-------> movea.l 1af38 <currentFloor>,a0
   1539e:	|                 |            move.l 8(a0),d0
   153a2:	|                 |            cmp.l 136(sp),d0
   153a6:	|                 \----------- bgt.w 15278 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   153aa:	|                              clr.l 136(sp)
   153ae:	|              /-------------- bra.w 154b4 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   153b2:	|           /--|-------------> clr.l 132(sp)
   153b6:	|           |  |     /-------- bra.w 1549e <setFloor+0x570>
			if (i != j) {
   153ba:	|           |  |  /--|-------> move.l 136(sp),d0
   153be:	|           |  |  |  |         cmp.l 132(sp),d0
   153c2:	|           |  |  |  |     /-- beq.w 15454 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   153c6:	|           |  |  |  |     |   movea.l 1af38 <currentFloor>,a0
   153cc:	|           |  |  |  |     |   move.l 12(a0),d1
   153d0:	|           |  |  |  |     |   move.l 132(sp),d0
   153d4:	|           |  |  |  |     |   lsl.l #3,d0
   153d6:	|           |  |  |  |     |   movea.l d1,a1
   153d8:	|           |  |  |  |     |   adda.l d0,a1
   153da:	|           |  |  |  |     |   movea.l 1af38 <currentFloor>,a0
   153e0:	|           |  |  |  |     |   move.l 12(a0),d1
   153e4:	|           |  |  |  |     |   move.l 136(sp),d0
   153e8:	|           |  |  |  |     |   lsl.l #3,d0
   153ea:	|           |  |  |  |     |   movea.l d1,a0
   153ec:	|           |  |  |  |     |   adda.l d0,a0
   153ee:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   153f2:	|           |  |  |  |     |   move.l (a1),-(sp)
   153f4:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   153f8:	|           |  |  |  |     |   move.l (a0),-(sp)
   153fa:	|           |  |  |  |     |   jsr 14c86 <polysShareSide>
   15400:	|           |  |  |  |     |   lea 16(sp),sp
   15404:	|           |  |  |  |     |   tst.w d0
   15406:	|           |  |  |  |  /--|-- beq.w 1549a <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1540a:	|           |  |  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   15410:	|           |  |  |  |  |  |   move.l 16(a0),d1
   15414:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15418:	|           |  |  |  |  |  |   add.l d0,d0
   1541a:	|           |  |  |  |  |  |   add.l d0,d0
   1541c:	|           |  |  |  |  |  |   movea.l d1,a0
   1541e:	|           |  |  |  |  |  |   adda.l d0,a0
   15420:	|           |  |  |  |  |  |   move.l (a0),d1
   15422:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15426:	|           |  |  |  |  |  |   add.l d0,d0
   15428:	|           |  |  |  |  |  |   add.l d0,d0
   1542a:	|           |  |  |  |  |  |   movea.l d1,a0
   1542c:	|           |  |  |  |  |  |   adda.l d0,a0
   1542e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   15432:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15436:	|           |  |  |  |  |  |   add.l d0,d0
   15438:	|           |  |  |  |  |  |   add.l d0,d0
   1543a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   1543e:	|           |  |  |  |  |  |   adda.l d0,a0
   15440:	|           |  |  |  |  |  |   move.l (a0),d1
   15442:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15446:	|           |  |  |  |  |  |   add.l d0,d0
   15448:	|           |  |  |  |  |  |   add.l d0,d0
   1544a:	|           |  |  |  |  |  |   movea.l d1,a0
   1544c:	|           |  |  |  |  |  |   adda.l d0,a0
   1544e:	|           |  |  |  |  |  |   moveq #1,d1
   15450:	|           |  |  |  |  |  |   move.l d1,(a0)
   15452:	|           |  |  |  |  +--|-- bra.s 1549a <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   15454:	|           |  |  |  |  |  \-> movea.l 1af38 <currentFloor>,a0
   1545a:	|           |  |  |  |  |      move.l 16(a0),d1
   1545e:	|           |  |  |  |  |      move.l 136(sp),d0
   15462:	|           |  |  |  |  |      add.l d0,d0
   15464:	|           |  |  |  |  |      add.l d0,d0
   15466:	|           |  |  |  |  |      movea.l d1,a0
   15468:	|           |  |  |  |  |      adda.l d0,a0
   1546a:	|           |  |  |  |  |      move.l (a0),d1
   1546c:	|           |  |  |  |  |      move.l 132(sp),d0
   15470:	|           |  |  |  |  |      add.l d0,d0
   15472:	|           |  |  |  |  |      add.l d0,d0
   15474:	|           |  |  |  |  |      movea.l d1,a0
   15476:	|           |  |  |  |  |      adda.l d0,a0
   15478:	|           |  |  |  |  |      moveq #-2,d0
   1547a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1547c:	|           |  |  |  |  |      move.l 136(sp),d0
   15480:	|           |  |  |  |  |      add.l d0,d0
   15482:	|           |  |  |  |  |      add.l d0,d0
   15484:	|           |  |  |  |  |      movea.l 62(sp),a0
   15488:	|           |  |  |  |  |      adda.l d0,a0
   1548a:	|           |  |  |  |  |      move.l (a0),d1
   1548c:	|           |  |  |  |  |      move.l 132(sp),d0
   15490:	|           |  |  |  |  |      add.l d0,d0
   15492:	|           |  |  |  |  |      add.l d0,d0
   15494:	|           |  |  |  |  |      movea.l d1,a0
   15496:	|           |  |  |  |  |      adda.l d0,a0
   15498:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1549a:	|           |  |  |  |  \----> addq.l #1,132(sp)
   1549e:	|           |  |  |  \-------> movea.l 1af38 <currentFloor>,a0
   154a4:	|           |  |  |            move.l 8(a0),d0
   154a8:	|           |  |  |            cmp.l 132(sp),d0
   154ac:	|           |  |  \----------- bgt.w 153ba <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   154b0:	|           |  |               addq.l #1,136(sp)
   154b4:	|           |  \-------------> movea.l 1af38 <currentFloor>,a0
   154ba:	|           |                  move.l 8(a0),d0
   154be:	|           |                  cmp.l 136(sp),d0
   154c2:	|           \----------------- bgt.w 153b2 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   154c6:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   154ca:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   154ce:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   154d2:	|  |                           clr.l 136(sp)
   154d6:	|  |     /-------------------- bra.w 1562c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   154da:	|  |  /--|-------------------> clr.l 132(sp)
   154de:	|  |  |  |     /-------------- bra.w 15616 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   154e2:	|  |  |  |  /--|-------------> movea.l 1af38 <currentFloor>,a0
   154e8:	|  |  |  |  |  |               move.l 16(a0),d1
   154ec:	|  |  |  |  |  |               move.l 136(sp),d0
   154f0:	|  |  |  |  |  |               add.l d0,d0
   154f2:	|  |  |  |  |  |               add.l d0,d0
   154f4:	|  |  |  |  |  |               movea.l d1,a0
   154f6:	|  |  |  |  |  |               adda.l d0,a0
   154f8:	|  |  |  |  |  |               move.l (a0),d1
   154fa:	|  |  |  |  |  |               move.l 132(sp),d0
   154fe:	|  |  |  |  |  |               add.l d0,d0
   15500:	|  |  |  |  |  |               add.l d0,d0
   15502:	|  |  |  |  |  |               movea.l d1,a0
   15504:	|  |  |  |  |  |               adda.l d0,a0
   15506:	|  |  |  |  |  |               move.l (a0),d0
   15508:	|  |  |  |  |  |               moveq #-1,d1
   1550a:	|  |  |  |  |  |               cmp.l d0,d1
   1550c:	|  |  |  |  |  |  /----------- bne.w 15612 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15510:	|  |  |  |  |  |  |            clr.l 122(sp)
   15514:	|  |  |  |  |  |  |     /----- bra.w 15600 <setFloor+0x6d2>
						if (d != i && d != j) {
   15518:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   1551c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   15520:	|  |  |  |  |  |  |  |  |  /-- beq.w 155fc <setFloor+0x6ce>
   15524:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   15528:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   1552c:	|  |  |  |  |  |  |  |  |  +-- beq.w 155fc <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   15530:	|  |  |  |  |  |  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   15536:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1553a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1553e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15540:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15542:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15544:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15546:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15548:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1554c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1554e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15550:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15552:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15554:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   15556:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1555a:	|  |  |  |  |  |  |  |  |  +-- bne.w 155fc <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1555e:	|  |  |  |  |  |  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   15564:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15568:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1556c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1556e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15570:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15572:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15574:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15576:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1557a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1557c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1557e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15580:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15582:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   15584:	|  |  |  |  |  |  |  |  |  +-- bmi.s 155fc <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   15586:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1558a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1558c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1558e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15592:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15594:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15596:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1559a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1559c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1559e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155a0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155a2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   155a4:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   155a8:	|  |  |  |  |  |  |  |  |  +-- bgt.s 155fc <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   155aa:	|  |  |  |  |  |  |  |  |  |   movea.l 1af38 <currentFloor>,a0
   155b0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   155b4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   155b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155bc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155be:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155c0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   155c2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   155c6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155c8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155ca:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155cc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155ce:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   155d2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   155d6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155d8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155da:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   155de:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155e0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   155e2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   155e6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155e8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155ea:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155ec:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155ee:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   155f2:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   155f4:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   155f6:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   155fc:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   15600:	|  |  |  |  |  |  |  |  \----> movea.l 1af38 <currentFloor>,a0
   15606:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1560a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1560e:	|  |  |  |  |  |  |  \-------- bgt.w 15518 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15612:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   15616:	|  |  |  |  |  \-------------> movea.l 1af38 <currentFloor>,a0
   1561c:	|  |  |  |  |                  move.l 8(a0),d0
   15620:	|  |  |  |  |                  cmp.l 132(sp),d0
   15624:	|  |  |  |  \----------------- bgt.w 154e2 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15628:	|  |  |  |                     addq.l #1,136(sp)
   1562c:	|  |  |  \-------------------> movea.l 1af38 <currentFloor>,a0
   15632:	|  |  |                        move.l 8(a0),d0
   15636:	|  |  |                        cmp.l 136(sp),d0
   1563a:	|  |  \----------------------- bgt.w 154da <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1563e:	|  |                           tst.w 130(sp)
   15642:	|  \-------------------------- bne.w 154ca <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15646:	|                              clr.l 136(sp)
   1564a:	|                          /-- bra.s 15672 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1564c:	|                       /--|-> move.l 136(sp),d0
   15650:	|                       |  |   add.l d0,d0
   15652:	|                       |  |   add.l d0,d0
   15654:	|                       |  |   movea.l 62(sp),a0
   15658:	|                       |  |   adda.l d0,a0
   1565a:	|                       |  |   move.l (a0),54(sp)
   1565e:	|                       |  |   move.l 1add0 <SysBase>,d0
   15664:	|                       |  |   movea.l d0,a6
   15666:	|                       |  |   movea.l 54(sp),a1
   1566a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1566e:	|                       |  |   addq.l #1,136(sp)
   15672:	|                       |  \-> movea.l 1af38 <currentFloor>,a0
   15678:	|                       |      move.l 8(a0),d0
   1567c:	|                       |      cmp.l 136(sp),d0
   15680:	|                       \----- bgt.s 1564c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   15682:	|                              move.l 62(sp),58(sp)
   15688:	|                              move.l 1add0 <SysBase>,d0
   1568e:	|                              movea.l d0,a6
   15690:	|                              movea.l 58(sp),a1
   15694:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   15698:	|                              clr.l 62(sp)

	return TRUE;
   1569c:	|                              moveq #1,d0
}
   1569e:	\----------------------------> movea.l (sp)+,a2
   156a0:	                               movea.l (sp)+,a6
   156a2:	                               lea 132(sp),sp
   156a6:	                               rts

000156a8 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   156a8:	jsr 14b96 <killFloor>
	noFloor ();
   156ae:	jsr 14aba <noFloor>
   156b4:	nop
   156b6:	rts

000156b8 <WaitVbl>:
void WaitVbl() {
   156b8:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   156ba:	   /-> movea.l #14675972,a0
   156c0:	   |   move.l (a0),d0
   156c2:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   156c4:	   |   move.l (sp),d0
   156c6:	   |   andi.l #130816,d0
   156cc:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   156ce:	   |   move.l (sp),d0
   156d0:	   |   cmpi.l #76800,d0
   156d6:	   \-- beq.s 156ba <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   156d8:	/----> movea.l #14675972,a0
   156de:	|      move.l (a0),d0
   156e0:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   156e4:	|      move.l 4(sp),d0
   156e8:	|      andi.l #130816,d0
   156ee:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   156f2:	|      move.l 4(sp),d0
   156f6:	|      cmpi.l #76800,d0
   156fc:	|  /-- beq.s 15700 <WaitVbl+0x48>
	while (1) {
   156fe:	\--|-- bra.s 156d8 <WaitVbl+0x20>
			break;
   15700:	   \-> nop
}
   15702:	       nop
   15704:	       addq.l #8,sp
   15706:	       rts

00015708 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   15708:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1570a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1570e:	   /-- bra.s 15720 <memset+0x18>
		*ptr++ = val;
   15710:	/--|-> move.l (sp),d0
   15712:	|  |   move.l d0,d1
   15714:	|  |   addq.l #1,d1
   15716:	|  |   move.l d1,(sp)
   15718:	|  |   move.l 12(sp),d1
   1571c:	|  |   movea.l d0,a0
   1571e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   15720:	|  \-> move.l 16(sp),d0
   15724:	|      move.l d0,d1
   15726:	|      subq.l #1,d1
   15728:	|      move.l d1,16(sp)
   1572c:	|      tst.l d0
   1572e:	\----- bne.s 15710 <memset+0x8>
	return dest;
   15730:	       move.l 8(sp),d0
}
   15734:	       addq.l #4,sp
   15736:	       rts

00015738 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   15738:	       subq.l #8,sp
   1573a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1573c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   15742:	       move.l 20(sp),4(sp)
	while(len--)
   15748:	   /-- bra.s 1576a <memcpy+0x32>
		*d++ = *s++;
   1574a:	/--|-> move.l 4(sp),d1
   1574e:	|  |   move.l d1,d0
   15750:	|  |   addq.l #1,d0
   15752:	|  |   move.l d0,4(sp)
   15756:	|  |   move.l 8(sp),d0
   1575a:	|  |   move.l d0,d2
   1575c:	|  |   addq.l #1,d2
   1575e:	|  |   move.l d2,8(sp)
   15762:	|  |   movea.l d1,a0
   15764:	|  |   move.b (a0),d1
   15766:	|  |   movea.l d0,a0
   15768:	|  |   move.b d1,(a0)
	while(len--)
   1576a:	|  \-> move.l 24(sp),d0
   1576e:	|      move.l d0,d1
   15770:	|      subq.l #1,d1
   15772:	|      move.l d1,24(sp)
   15776:	|      tst.l d0
   15778:	\----- bne.s 1574a <memcpy+0x12>
	return dest;
   1577a:	       move.l 16(sp),d0
}
   1577e:	       move.l (sp)+,d2
   15780:	       addq.l #8,sp
   15782:	       rts

00015784 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   15784:	       lea -128(sp),sp
   15788:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1578c:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec8f0d>,d0
   15792:	       cmpi.w #20153,d0
   15796:	   /-- beq.s 157ba <KPrintF+0x36>
   15798:	   |   cmpi.w #-24562,d0
   1579c:	   +-- beq.s 157ba <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1579e:	   |   movea.l 1add0 <SysBase>,a6
   157a4:	   |   movea.l 144(sp),a0
   157a8:	   |   lea 148(sp),a1
   157ac:	   |   lea 1624a <KPutCharX>,a2
   157b2:	   |   suba.l a3,a3
   157b4:	   |   jsr -522(a6)
}
   157b8:	/--|-- bra.s 157e4 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   157ba:	|  \-> movea.l 1add0 <SysBase>,a6
   157c0:	|      movea.l 144(sp),a0
   157c4:	|      lea 148(sp),a1
   157c8:	|      lea 16258 <PutChar>,a2
   157ce:	|      lea 12(sp),a3
   157d2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   157d6:	|      move.l a3,-(sp)
   157d8:	|      pea 56 <_start+0x56>
   157dc:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec8f0d>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   157e2:	|      addq.l #8,sp
}
   157e4:	\----> movem.l (sp)+,a2-a3/a6
   157e8:	       lea 128(sp),sp
   157ec:	       rts

000157ee <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   157ee:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   157f0:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   157f6:	       movea.l (sp),a0
   157f8:	       move.w (a0),d0
   157fa:	       cmpi.w #20153,d0
   157fe:	   /-- beq.s 1580a <debug_cmd+0x1c>
   15800:	   |   movea.l (sp),a0
   15802:	   |   move.w (a0),d0
   15804:	   |   cmpi.w #-24562,d0
   15808:	/--|-- bne.s 15828 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1580a:	|  \-> move.l 20(sp),-(sp)
   1580e:	|      move.l 20(sp),-(sp)
   15812:	|      move.l 20(sp),-(sp)
   15816:	|      move.l 20(sp),-(sp)
   1581a:	|      pea 58 <_start+0x58>
   1581e:	|      movea.l 20(sp),a0
   15822:	|      jsr (a0)
   15824:	|      lea 20(sp),sp
	}
}
   15828:	\----> nop
   1582a:	       addq.l #4,sp
   1582c:	       rts

0001582e <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1582e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   15830:	   /-- bra.s 15852 <my_strncpy+0x24>
		*destination++ = *source++;
   15832:	/--|-> move.l 12(sp),d1
   15836:	|  |   move.l d1,d0
   15838:	|  |   addq.l #1,d0
   1583a:	|  |   move.l d0,12(sp)
   1583e:	|  |   move.l 8(sp),d0
   15842:	|  |   move.l d0,d2
   15844:	|  |   addq.l #1,d2
   15846:	|  |   move.l d2,8(sp)
   1584a:	|  |   movea.l d1,a0
   1584c:	|  |   move.b (a0),d1
   1584e:	|  |   movea.l d0,a0
   15850:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   15852:	|  \-> movea.l 12(sp),a0
   15856:	|      move.b (a0),d0
   15858:	|  /-- beq.s 15860 <my_strncpy+0x32>
   1585a:	|  |   subq.l #1,16(sp)
   1585e:	\--|-- bne.s 15832 <my_strncpy+0x4>
	*destination = '\0';
   15860:	   \-> movea.l 8(sp),a0
   15864:	       clr.b (a0)
}
   15866:	       nop
   15868:	       move.l (sp)+,d2
   1586a:	       rts

0001586c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1586c:	    lea -60(sp),sp
   15870:	    movea.l 72(sp),a1
   15874:	    movea.l 76(sp),a0
   15878:	    move.l 80(sp),d1
   1587c:	    move.l 84(sp),d0
   15880:	    movea.w a1,a1
   15882:	    move.w a1,8(sp)
   15886:	    movea.w a0,a0
   15888:	    move.w a0,6(sp)
   1588c:	    move.w d1,d1
   1588e:	    move.w d1,4(sp)
   15892:	    move.w d0,d0
   15894:	    move.w d0,2(sp)
	struct debug_resource resource = {
   15898:	    lea 10(sp),a0
   1589c:	    clr.l (a0)
   1589e:	    addq.l #4,a0
   158a0:	    clr.l (a0)
   158a2:	    addq.l #4,a0
   158a4:	    clr.l (a0)
   158a6:	    addq.l #4,a0
   158a8:	    clr.l (a0)
   158aa:	    addq.l #4,a0
   158ac:	    clr.l (a0)
   158ae:	    addq.l #4,a0
   158b0:	    clr.l (a0)
   158b2:	    addq.l #4,a0
   158b4:	    clr.l (a0)
   158b6:	    addq.l #4,a0
   158b8:	    clr.l (a0)
   158ba:	    addq.l #4,a0
   158bc:	    clr.l (a0)
   158be:	    addq.l #4,a0
   158c0:	    clr.l (a0)
   158c2:	    addq.l #4,a0
   158c4:	    clr.l (a0)
   158c6:	    addq.l #4,a0
   158c8:	    clr.l (a0)
   158ca:	    addq.l #4,a0
   158cc:	    clr.w (a0)
   158ce:	    addq.l #2,a0
		.address = (unsigned int)addr,
   158d0:	    move.l 64(sp),d0
	struct debug_resource resource = {
   158d4:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   158d8:	    move.w 8(sp),d0
   158dc:	/-- bpl.s 158e0 <debug_register_bitmap+0x74>
   158de:	|   addq.w #7,d0
   158e0:	\-> asr.w #3,d0
   158e2:	    movea.w d0,a0
   158e4:	    movea.w 6(sp),a1
   158e8:	    move.l a1,-(sp)
   158ea:	    move.l a0,-(sp)
   158ec:	    jsr 16142 <__mulsi3>
   158f2:	    addq.l #8,sp
   158f4:	    movea.w 4(sp),a0
   158f8:	    move.l a0,-(sp)
   158fa:	    move.l d0,-(sp)
   158fc:	    jsr 16142 <__mulsi3>
   15902:	    addq.l #8,sp
	struct debug_resource resource = {
   15904:	    move.l d0,14(sp)
   15908:	    move.w 2(sp),52(sp)
   1590e:	    move.w 8(sp),54(sp)
   15914:	    move.w 6(sp),56(sp)
   1591a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   15920:	    moveq #0,d0
   15922:	    move.w 2(sp),d0
   15926:	    moveq #2,d1
   15928:	    and.l d1,d0
   1592a:	/-- beq.s 15936 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1592c:	|   move.l 14(sp),d0
   15930:	|   add.l d0,d0
   15932:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   15936:	\-> pea 20 <_start+0x20>
   1593a:	    move.l 72(sp),-(sp)
   1593e:	    lea 18(sp),a0
   15942:	    move.l a0,d0
   15944:	    addq.l #8,d0
   15946:	    move.l d0,-(sp)
   15948:	    jsr 1582e <my_strncpy>
   1594e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   15952:	    lea 10(sp),a0
   15956:	    clr.l -(sp)
   15958:	    clr.l -(sp)
   1595a:	    move.l a0,-(sp)
   1595c:	    pea 4 <_start+0x4>
   15960:	    jsr 157ee <debug_cmd>
   15966:	    lea 16(sp),sp
}
   1596a:	    nop
   1596c:	    lea 60(sp),sp
   15970:	    rts

00015972 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   15972:	lea -12(sp),sp
   15976:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   15978:	move.l 20(sp),12(sp)
   1597e:	move.l 24(sp),8(sp)
   15984:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   1598a:	movea.l d0,a6
   1598c:	move.l 12(sp),d0
   15990:	move.l 8(sp),d1
   15994:	jsr -66(a6)
   15998:	move.l d0,4(sp)
   1599c:	move.l 4(sp),d0
}
   159a0:	movea.l (sp)+,a6
   159a2:	lea 12(sp),sp
   159a6:	rts

000159a8 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   159a8:	lea -32(sp),sp
   159ac:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   159b0:	move.l 48(sp),36(sp)
   159b6:	move.l 52(sp),40(sp)
   159bc:	move.l 56(sp),28(sp)
   159c2:	move.l 60(sp),32(sp)
   159c8:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   159ce:	movea.l d0,a6
   159d0:	move.l 36(sp),d0
   159d4:	move.l 40(sp),d1
   159d8:	move.l 28(sp),d2
   159dc:	move.l 32(sp),d3
   159e0:	jsr -66(a6)
   159e4:	move.l d0,12(sp)
   159e8:	move.l d1,16(sp)
   159ec:	move.l 12(sp),20(sp)
   159f2:	move.l 16(sp),24(sp)
   159f8:	move.l 20(sp),d0
   159fc:	move.l 24(sp),d1
}
   15a00:	movem.l (sp)+,d2-d3/a6
   15a04:	lea 32(sp),sp
   15a08:	rts

00015a0a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   15a0a:	lea -32(sp),sp
   15a0e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   15a12:	move.l 48(sp),36(sp)
   15a18:	move.l 52(sp),40(sp)
   15a1e:	move.l 56(sp),28(sp)
   15a24:	move.l 60(sp),32(sp)
   15a2a:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15a30:	movea.l d0,a6
   15a32:	move.l 36(sp),d0
   15a36:	move.l 40(sp),d1
   15a3a:	move.l 28(sp),d2
   15a3e:	move.l 32(sp),d3
   15a42:	jsr -84(a6)
   15a46:	move.l d0,12(sp)
   15a4a:	move.l d1,16(sp)
   15a4e:	move.l 12(sp),20(sp)
   15a54:	move.l 16(sp),24(sp)
   15a5a:	move.l 20(sp),d0
   15a5e:	move.l 24(sp),d1
}
   15a62:	movem.l (sp)+,d2-d3/a6
   15a66:	lea 32(sp),sp
   15a6a:	rts

00015a6c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   15a6c:	lea -12(sp),sp
   15a70:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   15a72:	move.l 20(sp),12(sp)
   15a78:	move.l 24(sp),8(sp)
   15a7e:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15a84:	movea.l d0,a6
   15a86:	move.l 12(sp),d0
   15a8a:	move.l 8(sp),d1
   15a8e:	jsr -84(a6)
   15a92:	move.l d0,4(sp)
   15a96:	move.l 4(sp),d0
}
   15a9a:	movea.l (sp)+,a6
   15a9c:	lea 12(sp),sp
   15aa0:	rts

00015aa2 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   15aa2:	lea -12(sp),sp
   15aa6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15aa8:	move.l 20(sp),12(sp)
   15aae:	move.l 24(sp),8(sp)
   15ab4:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15aba:	movea.l d0,a6
   15abc:	move.l 12(sp),d0
   15ac0:	move.l 8(sp),d1
   15ac4:	jsr -42(a6)
   15ac8:	move.l d0,4(sp)
   15acc:	move.l 4(sp),d0
}
   15ad0:	movea.l (sp)+,a6
   15ad2:	lea 12(sp),sp
   15ad6:	rts

00015ad8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   15ad8:	lea -20(sp),sp
   15adc:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   15ade:	move.l 28(sp),20(sp)
   15ae4:	move.l 1adec <MathIeeeDoubTransBase>,d0
   15aea:	movea.l d0,a6
   15aec:	move.l 20(sp),d0
   15af0:	jsr -108(a6)
   15af4:	move.l d0,4(sp)
   15af8:	move.l d1,8(sp)
   15afc:	move.l 4(sp),12(sp)
   15b02:	move.l 8(sp),16(sp)
   15b08:	move.l 12(sp),d0
   15b0c:	move.l 16(sp),d1
}
   15b10:	movea.l (sp)+,a6
   15b12:	lea 20(sp),sp
   15b16:	rts

00015b18 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   15b18:	lea -12(sp),sp
   15b1c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   15b1e:	move.l 20(sp),8(sp)
   15b24:	move.l 24(sp),12(sp)
   15b2a:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15b30:	movea.l d0,a6
   15b32:	move.l 8(sp),d0
   15b36:	move.l 12(sp),d1
   15b3a:	jsr -30(a6)
   15b3e:	move.l d0,4(sp)
   15b42:	move.l 4(sp),d0
   15b46:	move.l d0,-(sp)
   15b48:	jsr 15b80 <__floatsidf>
   15b4e:	addq.l #4,sp
}
   15b50:	movea.l (sp)+,a6
   15b52:	lea 12(sp),sp
   15b56:	rts

00015b58 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   15b58:	subq.l #8,sp
   15b5a:	move.l a6,-(sp)
	return IEEESPFix(value);
   15b5c:	move.l 16(sp),8(sp)
   15b62:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15b68:	movea.l d0,a6
   15b6a:	move.l 8(sp),d0
   15b6e:	jsr -30(a6)
   15b72:	move.l d0,4(sp)
   15b76:	move.l 4(sp),d0
}
   15b7a:	movea.l (sp)+,a6
   15b7c:	addq.l #8,sp
   15b7e:	rts

00015b80 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   15b80:	lea -20(sp),sp
   15b84:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   15b86:	move.l 28(sp),20(sp)
   15b8c:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15b92:	movea.l d0,a6
   15b94:	move.l 20(sp),d0
   15b98:	jsr -36(a6)
   15b9c:	move.l d0,4(sp)
   15ba0:	move.l d1,8(sp)
   15ba4:	move.l 4(sp),12(sp)
   15baa:	move.l 8(sp),16(sp)
   15bb0:	move.l 12(sp),d0
   15bb4:	move.l 16(sp),d1
}
   15bb8:	movea.l (sp)+,a6
   15bba:	lea 20(sp),sp
   15bbe:	rts

00015bc0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   15bc0:	subq.l #8,sp
   15bc2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15bc4:	move.l 16(sp),8(sp)
   15bca:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15bd0:	movea.l d0,a6
   15bd2:	move.l 8(sp),d0
   15bd6:	jsr -36(a6)
   15bda:	move.l d0,4(sp)
   15bde:	move.l 4(sp),d0
}
   15be2:	movea.l (sp)+,a6
   15be4:	addq.l #8,sp
   15be6:	rts

00015be8 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   15be8:	subq.l #8,sp
   15bea:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15bec:	move.l 16(sp),8(sp)
   15bf2:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15bf8:	movea.l d0,a6
   15bfa:	move.l 8(sp),d0
   15bfe:	jsr -36(a6)
   15c02:	move.l d0,4(sp)
   15c06:	move.l 4(sp),d0
}
   15c0a:	movea.l (sp)+,a6
   15c0c:	addq.l #8,sp
   15c0e:	rts

00015c10 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   15c10:	lea -32(sp),sp
   15c14:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   15c18:	move.l 48(sp),36(sp)
   15c1e:	move.l 52(sp),40(sp)
   15c24:	move.l 56(sp),28(sp)
   15c2a:	move.l 60(sp),32(sp)
   15c30:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15c36:	movea.l d0,a6
   15c38:	move.l 36(sp),d0
   15c3c:	move.l 40(sp),d1
   15c40:	move.l 28(sp),d2
   15c44:	move.l 32(sp),d3
   15c48:	jsr -78(a6)
   15c4c:	move.l d0,12(sp)
   15c50:	move.l d1,16(sp)
   15c54:	move.l 12(sp),20(sp)
   15c5a:	move.l 16(sp),24(sp)
   15c60:	move.l 20(sp),d0
   15c64:	move.l 24(sp),d1
}
   15c68:	movem.l (sp)+,d2-d3/a6
   15c6c:	lea 32(sp),sp
   15c70:	rts

00015c72 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   15c72:	lea -12(sp),sp
   15c76:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   15c78:	move.l 20(sp),12(sp)
   15c7e:	move.l 24(sp),8(sp)
   15c84:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15c8a:	movea.l d0,a6
   15c8c:	move.l 12(sp),d0
   15c90:	move.l 8(sp),d1
   15c94:	jsr -78(a6)
   15c98:	move.l d0,4(sp)
   15c9c:	move.l 4(sp),d0
}
   15ca0:	movea.l (sp)+,a6
   15ca2:	lea 12(sp),sp
   15ca6:	rts

00015ca8 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   15ca8:	lea -12(sp),sp
   15cac:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15cae:	move.l 20(sp),12(sp)
   15cb4:	move.l 24(sp),8(sp)
   15cba:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15cc0:	movea.l d0,a6
   15cc2:	move.l 12(sp),d0
   15cc6:	move.l 8(sp),d1
   15cca:	jsr -42(a6)
   15cce:	move.l d0,4(sp)
   15cd2:	move.l 4(sp),d0
}
   15cd6:	movea.l (sp)+,a6
   15cd8:	lea 12(sp),sp
   15cdc:	rts

00015cde <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   15cde:	lea -20(sp),sp
   15ce2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15ce6:	move.l 36(sp),24(sp)
   15cec:	move.l 40(sp),28(sp)
   15cf2:	move.l 44(sp),16(sp)
   15cf8:	move.l 48(sp),20(sp)
   15cfe:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15d04:	movea.l d0,a6
   15d06:	move.l 24(sp),d0
   15d0a:	move.l 28(sp),d1
   15d0e:	move.l 16(sp),d2
   15d12:	move.l 20(sp),d3
   15d16:	jsr -42(a6)
   15d1a:	move.l d0,12(sp)
   15d1e:	move.l 12(sp),d0
}
   15d22:	movem.l (sp)+,d2-d3/a6
   15d26:	lea 20(sp),sp
   15d2a:	rts

00015d2c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   15d2c:	lea -12(sp),sp
   15d30:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15d32:	move.l 20(sp),12(sp)
   15d38:	move.l 24(sp),8(sp)
   15d3e:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15d44:	movea.l d0,a6
   15d46:	move.l 12(sp),d0
   15d4a:	move.l 8(sp),d1
   15d4e:	jsr -42(a6)
   15d52:	move.l d0,4(sp)
   15d56:	move.l 4(sp),d0
}
   15d5a:	movea.l (sp)+,a6
   15d5c:	lea 12(sp),sp
   15d60:	rts

00015d62 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   15d62:	lea -12(sp),sp
   15d66:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15d68:	move.l 20(sp),12(sp)
   15d6e:	move.l 24(sp),8(sp)
   15d74:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15d7a:	movea.l d0,a6
   15d7c:	move.l 12(sp),d0
   15d80:	move.l 8(sp),d1
   15d84:	jsr -42(a6)
   15d88:	move.l d0,4(sp)
   15d8c:	move.l 4(sp),d0
}
   15d90:	movea.l (sp)+,a6
   15d92:	lea 12(sp),sp
   15d96:	rts

00015d98 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   15d98:	lea -20(sp),sp
   15d9c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15da0:	move.l 36(sp),24(sp)
   15da6:	move.l 40(sp),28(sp)
   15dac:	move.l 44(sp),16(sp)
   15db2:	move.l 48(sp),20(sp)
   15db8:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15dbe:	movea.l d0,a6
   15dc0:	move.l 24(sp),d0
   15dc4:	move.l 28(sp),d1
   15dc8:	move.l 16(sp),d2
   15dcc:	move.l 20(sp),d3
   15dd0:	jsr -42(a6)
   15dd4:	move.l d0,12(sp)
   15dd8:	move.l 12(sp),d0
}
   15ddc:	movem.l (sp)+,d2-d3/a6
   15de0:	lea 20(sp),sp
   15de4:	rts

00015de6 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   15de6:	lea -12(sp),sp
   15dea:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15dec:	move.l 20(sp),12(sp)
   15df2:	move.l 24(sp),8(sp)
   15df8:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15dfe:	movea.l d0,a6
   15e00:	move.l 12(sp),d0
   15e04:	move.l 8(sp),d1
   15e08:	jsr -42(a6)
   15e0c:	move.l d0,4(sp)
   15e10:	move.l 4(sp),d0
}
   15e14:	movea.l (sp)+,a6
   15e16:	lea 12(sp),sp
   15e1a:	rts

00015e1c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   15e1c:	lea -12(sp),sp
   15e20:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15e22:	move.l 20(sp),12(sp)
   15e28:	move.l 24(sp),8(sp)
   15e2e:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15e34:	movea.l d0,a6
   15e36:	move.l 12(sp),d0
   15e3a:	move.l 8(sp),d1
   15e3e:	jsr -42(a6)
   15e42:	move.l d0,4(sp)
   15e46:	move.l 4(sp),d0
}
   15e4a:	movea.l (sp)+,a6
   15e4c:	lea 12(sp),sp
   15e50:	rts

00015e52 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   15e52:	lea -32(sp),sp
   15e56:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   15e5a:	move.l 48(sp),36(sp)
   15e60:	move.l 52(sp),40(sp)
   15e66:	move.l 56(sp),28(sp)
   15e6c:	move.l 60(sp),32(sp)
   15e72:	move.l 1ade8 <MathIeeeDoubBasBase>,d0
   15e78:	movea.l d0,a6
   15e7a:	move.l 36(sp),d0
   15e7e:	move.l 40(sp),d1
   15e82:	move.l 28(sp),d2
   15e86:	move.l 32(sp),d3
   15e8a:	jsr -72(a6)
   15e8e:	move.l d0,12(sp)
   15e92:	move.l d1,16(sp)
   15e96:	move.l 12(sp),20(sp)
   15e9c:	move.l 16(sp),24(sp)
   15ea2:	move.l 20(sp),d0
   15ea6:	move.l 24(sp),d1
}
   15eaa:	movem.l (sp)+,d2-d3/a6
   15eae:	lea 32(sp),sp
   15eb2:	rts

00015eb4 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   15eb4:	lea -12(sp),sp
   15eb8:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   15eba:	move.l 20(sp),12(sp)
   15ec0:	move.l 24(sp),8(sp)
   15ec6:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15ecc:	movea.l d0,a6
   15ece:	move.l 12(sp),d0
   15ed2:	move.l 8(sp),d1
   15ed6:	jsr -72(a6)
   15eda:	move.l d0,4(sp)
   15ede:	move.l 4(sp),d0
}
   15ee2:	movea.l (sp)+,a6
   15ee4:	lea 12(sp),sp
   15ee8:	rts

00015eea <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   15eea:	lea -12(sp),sp
   15eee:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   15ef0:	move.l 20(sp),8(sp)
   15ef6:	move.l 24(sp),12(sp)
   15efc:	move.l 1adec <MathIeeeDoubTransBase>,d0
   15f02:	movea.l d0,a6
   15f04:	move.l 8(sp),d0
   15f08:	move.l 12(sp),d1
   15f0c:	jsr -102(a6)
   15f10:	move.l d0,4(sp)
   15f14:	move.l 4(sp),d0
}
   15f18:	movea.l (sp)+,a6
   15f1a:	lea 12(sp),sp
   15f1e:	rts

00015f20 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   15f20:	subq.l #8,sp
   15f22:	move.l a6,-(sp)
	return IEEESPFix(a);
   15f24:	move.l 16(sp),8(sp)
   15f2a:	move.l 1ade0 <MathIeeeSingBasBase>,d0
   15f30:	movea.l d0,a6
   15f32:	move.l 8(sp),d0
   15f36:	jsr -30(a6)
   15f3a:	move.l d0,4(sp)
   15f3e:	move.l 4(sp),d0
}
   15f42:	movea.l (sp)+,a6
   15f44:	addq.l #8,sp
   15f46:	rts

00015f48 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   15f48:	       lea -24(sp),sp
   15f4c:	       move.l a6,-(sp)
    if (x > 0) {
   15f4e:	       clr.l -(sp)
   15f50:	       move.l 40(sp),-(sp)
   15f54:	       jsr 15d2c <__gtsf2>
   15f5a:	       addq.l #8,sp
   15f5c:	       tst.l d0
   15f5e:	   /-- ble.s 15f90 <atan2f+0x48>
        return IEEESPAtan(y / x);
   15f60:	   |   move.l 36(sp),-(sp)
   15f64:	   |   move.l 36(sp),-(sp)
   15f68:	   |   jsr 15a6c <__divsf3>
   15f6e:	   |   addq.l #8,sp
   15f70:	   |   move.l d0,8(sp)
   15f74:	   |   move.l 1ade4 <MathIeeeSingTransBase>,d0
   15f7a:	   |   movea.l d0,a6
   15f7c:	   |   move.l 8(sp),d0
   15f80:	   |   jsr -30(a6)
   15f84:	   |   move.l d0,4(sp)
   15f88:	   |   move.l 4(sp),d0
   15f8c:	/--|-- bra.w 160f0 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   15f90:	|  \-> clr.l -(sp)
   15f92:	|      move.l 40(sp),-(sp)
   15f96:	|      jsr 15de6 <__ltsf2>
   15f9c:	|      addq.l #8,sp
   15f9e:	|      tst.l d0
   15fa0:	|  /-- bge.s 16014 <atan2f+0xcc>
   15fa2:	|  |   clr.l -(sp)
   15fa4:	|  |   move.l 36(sp),-(sp)
   15fa8:	|  |   jsr 15ca8 <__gesf2>
   15fae:	|  |   addq.l #8,sp
   15fb0:	|  |   tst.l d0
   15fb2:	|  +-- blt.s 16014 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   15fb4:	|  |   move.l 36(sp),-(sp)
   15fb8:	|  |   move.l 36(sp),-(sp)
   15fbc:	|  |   jsr 15a6c <__divsf3>
   15fc2:	|  |   addq.l #8,sp
   15fc4:	|  |   move.l d0,24(sp)
   15fc8:	|  |   move.l 1ade4 <MathIeeeSingTransBase>,d0
   15fce:	|  |   movea.l d0,a6
   15fd0:	|  |   move.l 24(sp),d0
   15fd4:	|  |   jsr -30(a6)
   15fd8:	|  |   move.l d0,20(sp)
   15fdc:	|  |   move.l 20(sp),d0
   15fe0:	|  |   move.l d0,-(sp)
   15fe2:	|  |   jsr 15ad8 <__extendsfdf2>
   15fe8:	|  |   addq.l #4,sp
   15fea:	|  |   move.l #1413754136,-(sp)
   15ff0:	|  |   move.l #1074340347,-(sp)
   15ff6:	|  |   move.l d1,-(sp)
   15ff8:	|  |   move.l d0,-(sp)
   15ffa:	|  |   jsr 159a8 <__adddf3>
   16000:	|  |   lea 16(sp),sp
   16004:	|  |   move.l d1,-(sp)
   16006:	|  |   move.l d0,-(sp)
   16008:	|  |   jsr 15eea <__truncdfsf2>
   1600e:	|  |   addq.l #8,sp
   16010:	+--|-- bra.w 160f0 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   16014:	|  \-> clr.l -(sp)
   16016:	|      move.l 40(sp),-(sp)
   1601a:	|      jsr 15de6 <__ltsf2>
   16020:	|      addq.l #8,sp
   16022:	|      tst.l d0
   16024:	|  /-- bge.s 16096 <atan2f+0x14e>
   16026:	|  |   clr.l -(sp)
   16028:	|  |   move.l 36(sp),-(sp)
   1602c:	|  |   jsr 15de6 <__ltsf2>
   16032:	|  |   addq.l #8,sp
   16034:	|  |   tst.l d0
   16036:	|  +-- bge.s 16096 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   16038:	|  |   move.l 36(sp),-(sp)
   1603c:	|  |   move.l 36(sp),-(sp)
   16040:	|  |   jsr 15a6c <__divsf3>
   16046:	|  |   addq.l #8,sp
   16048:	|  |   move.l d0,16(sp)
   1604c:	|  |   move.l 1ade4 <MathIeeeSingTransBase>,d0
   16052:	|  |   movea.l d0,a6
   16054:	|  |   move.l 16(sp),d0
   16058:	|  |   jsr -30(a6)
   1605c:	|  |   move.l d0,12(sp)
   16060:	|  |   move.l 12(sp),d0
   16064:	|  |   move.l d0,-(sp)
   16066:	|  |   jsr 15ad8 <__extendsfdf2>
   1606c:	|  |   addq.l #4,sp
   1606e:	|  |   move.l #1413754136,-(sp)
   16074:	|  |   move.l #1074340347,-(sp)
   1607a:	|  |   move.l d1,-(sp)
   1607c:	|  |   move.l d0,-(sp)
   1607e:	|  |   jsr 15e52 <__subdf3>
   16084:	|  |   lea 16(sp),sp
   16088:	|  |   move.l d1,-(sp)
   1608a:	|  |   move.l d0,-(sp)
   1608c:	|  |   jsr 15eea <__truncdfsf2>
   16092:	|  |   addq.l #8,sp
   16094:	+--|-- bra.s 160f0 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   16096:	|  \-> clr.l -(sp)
   16098:	|      move.l 40(sp),-(sp)
   1609c:	|      jsr 15aa2 <__eqsf2>
   160a2:	|      addq.l #8,sp
   160a4:	|      tst.l d0
   160a6:	|  /-- bne.s 160c2 <atan2f+0x17a>
   160a8:	|  |   clr.l -(sp)
   160aa:	|  |   move.l 36(sp),-(sp)
   160ae:	|  |   jsr 15d2c <__gtsf2>
   160b4:	|  |   addq.l #8,sp
   160b6:	|  |   tst.l d0
   160b8:	|  +-- ble.s 160c2 <atan2f+0x17a>
        return PI / 2;
   160ba:	|  |   move.l #1070141403,d0
   160c0:	+--|-- bra.s 160f0 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   160c2:	|  \-> clr.l -(sp)
   160c4:	|      move.l 40(sp),-(sp)
   160c8:	|      jsr 15aa2 <__eqsf2>
   160ce:	|      addq.l #8,sp
   160d0:	|      tst.l d0
   160d2:	|  /-- bne.s 160ee <atan2f+0x1a6>
   160d4:	|  |   clr.l -(sp)
   160d6:	|  |   move.l 36(sp),-(sp)
   160da:	|  |   jsr 15de6 <__ltsf2>
   160e0:	|  |   addq.l #8,sp
   160e2:	|  |   tst.l d0
   160e4:	|  +-- bge.s 160ee <atan2f+0x1a6>
        return -PI / 2;
   160e6:	|  |   move.l #-1077342245,d0
   160ec:	+--|-- bra.s 160f0 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   160ee:	|  \-> moveq #0,d0
    }
}
   160f0:	\----> movea.l (sp)+,a6
   160f2:	       lea 24(sp),sp
   160f6:	       rts

000160f8 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   160f8:	lea -24(sp),sp
   160fc:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   160fe:	move.l 32(sp),20(sp)
   16104:	move.l 36(sp),24(sp)
   1610a:	move.l 1adec <MathIeeeDoubTransBase>,d0
   16110:	movea.l d0,a6
   16112:	move.l 20(sp),d0
   16116:	move.l 24(sp),d1
   1611a:	jsr -96(a6)
   1611e:	move.l d0,4(sp)
   16122:	move.l d1,8(sp)
   16126:	move.l 4(sp),12(sp)
   1612c:	move.l 8(sp),16(sp)
   16132:	move.l 12(sp),d0
   16136:	move.l 16(sp),d1
}
   1613a:	movea.l (sp)+,a6
   1613c:	lea 24(sp),sp
   16140:	rts

00016142 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   16142:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   16146:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1614a:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   1614e:	mulu.w 8(sp),d1
	addw	d1, d0
   16152:	add.w d1,d0
	swap	d0
   16154:	swap d0
	clrw	d0
   16156:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16158:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1615c:	mulu.w 10(sp),d1
	addl	d1, d0
   16160:	add.l d1,d0
	rts
   16162:	rts

00016164 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   16164:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   16166:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1616a:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1616e:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   16174:	   /-- bcc.s 1618c <__udivsi3+0x28>
	movel	d0, d2
   16176:	   |   move.l d0,d2
	clrw	d2
   16178:	   |   clr.w d2
	swap	d2
   1617a:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1617c:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1617e:	   |   move.w d2,d0
	swap	d0
   16180:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   16182:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   16186:	   |   divu.w d1,d2
	movew	d2, d0
   16188:	   |   move.w d2,d0
	jra	6f
   1618a:	/--|-- bra.s 161bc <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1618c:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   1618e:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   16190:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   16192:	|  |   cmpi.l #65536,d1
	jcc	4b
   16198:	|  \-- bcc.s 1618e <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1619a:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   1619c:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   161a2:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   161a4:	|      mulu.w d0,d1
	swap	d2
   161a6:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   161a8:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   161aa:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   161ac:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   161ae:	|  /-- bne.s 161ba <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   161b0:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   161b2:	|  +-- bcs.s 161ba <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   161b4:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   161b8:	+--|-- bls.s 161bc <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   161ba:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   161bc:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   161be:	       rts

000161c0 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   161c0:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   161c2:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   161c4:	    move.l 12(sp),d1
	jpl	1f
   161c8:	/-- bpl.s 161ce <__divsi3+0xe>
	negl	d1
   161ca:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   161cc:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   161ce:	\-> move.l 8(sp),d0
	jpl	2f
   161d2:	/-- bpl.s 161d8 <__divsi3+0x18>
	negl	d0
   161d4:	|   neg.l d0
	negb	d2
   161d6:	|   neg.b d2

2:	movel	d1, sp@-
   161d8:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   161da:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   161dc:	    jsr 16164 <__udivsi3>
	addql	#8, sp
   161e2:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   161e4:	    tst.b d2
	jpl	3f
   161e6:	/-- bpl.s 161ea <__divsi3+0x2a>
	negl	d0
   161e8:	|   neg.l d0

3:	movel	sp@+, d2
   161ea:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   161ec:	    rts

000161ee <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   161ee:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   161f2:	move.l 4(sp),d0
	movel	d1, sp@-
   161f6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   161f8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   161fa:	jsr 161c0 <__divsi3>
	addql	#8, sp
   16200:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16202:	move.l 8(sp),d1
	movel	d1, sp@-
   16206:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16208:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1620a:	jsr 16142 <__mulsi3>
	addql	#8, sp
   16210:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16212:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16216:	sub.l d0,d1
	movel	d1, d0
   16218:	move.l d1,d0
	rts
   1621a:	rts

0001621c <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1621c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16220:	move.l 4(sp),d0
	movel	d1, sp@-
   16224:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16226:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   16228:	jsr 16164 <__udivsi3>
	addql	#8, sp
   1622e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16230:	move.l 8(sp),d1
	movel	d1, sp@-
   16234:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16236:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16238:	jsr 16142 <__mulsi3>
	addql	#8, sp
   1623e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16240:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16244:	sub.l d0,d1
	movel	d1, d0
   16246:	move.l d1,d0
	rts
   16248:	rts

0001624a <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1624a:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1624c:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   16250:	jsr -516(a6)
    move.l (sp)+, a6
   16254:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   16256:	rts

00016258 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   16258:	move.b d0,(a3)+
	rts
   1625a:	rts
